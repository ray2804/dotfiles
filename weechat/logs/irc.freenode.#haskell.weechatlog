2013-03-18 17:25:49	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-18 17:25:49	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-18 17:25:49	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-18 17:25:50	--	Nicks #haskell: [@ChanServ [[zz]] [mth] \rs ]OLI[ __main__ _br_ _d3f _flow_ _janne _jwest `0660 `^_^v `bps `micro `nand` `ramses a11235 aajmakin ab9rf absence abumirqaan acfoltzer acharles aCube Adeon adimit Adios adnap adnauseam AfC aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akosch akraut alang albel727 alc alcz aleator_ alej alejandrogomez alexander__b Alice3 alios alistairclark alkabetz alnix alpounet alshain Amadiro amiller amosr amyers anachron_ anders^^ andrewsw aninhume1 anona AntiSpamMeta apaku Apocalisp appamatto aqua_scummm araujo arbn arenz Argue aristid arkeet arkx armlesshobo arnihr__ arun asante aszlig Athas AtnNn augur augustl az b52 b_jonas BadKitty banjiewen bark_ barrucadu bartavelle Baughn bbee bcoppens bd_ beckerb Belgarion0 bens benzap betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld blackmir1oxx BlastHardcheese blooberr BMeph bobry bogner Boney Boreeas bos Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc Bynbo7 byorgey ByronJohnson bytbox cajla Cale caleb_9 caligula__ Canar canta canvon carlocci ccasin ccxCZ cdidd cdntr celery__ centrinia Cerise certainty cfricke chance charlesofarrell chatsiri_ chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisirc chrra ciaranm CindyLinz cjay clahey ClaudiusMaximus Clint clog cmccann cmears cmsd2 cmsmcq cods colah collin comak companion_cube confound connelly copumpkin CosmicRay Counter-Strike CoverSlide cow-orker crdueck cross crs_ Cryovat ctype_real cwvh cynick cyphase d-snp dabradley dannybtran danr danvet dario DarkAceZ Dashkal davean davorak dcoutts deavidsedice Deewiant def-lkb dennda dented42 Derander descender DexterLB dflemstr dfletcher dgpratt dgvncsz0f DigitalKiwi dilinger dinox dixie djanatyn dju dkasak dlundy_ dmac dmarker dmwit Dodek dogmaT dolio Dolphr domingo doomlord dottedmag dqd Draconx Draggor drbean DrChaos dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT` duairc_ dumbhat DustyDingo Dybber dyreshark dysinger eacameron EarlGray earthy eataix edenc Eduard_Munteanu edwtjo Eelis eflister ehamberg eikke einsof eL_Bart0 electrogeek elgot_ Eliel_ elliott elliottcable emma endojelly Enigmagic ent Entroacceptor epta ericmj Eridius ernst Erstarrung Estrellas etabot ethercrow etrepum Excureo eyck f8_ fabjan faen faheem FalkoPeters fall_ favonia fayden fcr fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin floatingman flux folone` formalcow fotc Franciman freiksenet frio frontendloader froztbyte fryguybob ft Fubar^_ Fuco Fuuzetsu fxrh gadjo gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur geh_meh_geh gemelen genisage gentleben gereedy gg7 ggreg ghorn_ Ghoul_ Gilly Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest10329 Guest16384 Guest22595 Guest73244 Gunni Gurragchaa_ guy_ guymann gwern h_chiro habbbe hachiya hackagebot Hafydd hallski_ HaltingState hamid hanDerPeder Hannibal_Smith harrison hattusili_III heath Heffalump helgikrs henk Hermit hiptobecubic hiratara hiredman hiroyuki2 hive-mind hkBst horlicks hpaste hpc hpd Hugglesworth HugoDaniel hungryblank hvr hyko IanKelling ianmathwiz7 ibid IbnFirnas Iceland_jack Icewing identity idnar idntfy idntfy[work] idoru Igloo ijp imeredith inr int-e integral_ Internet13 io2 ion ique ISF_ isomorphic issimus1 Itkovian iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaeyeun jaimef jamwt janbanan JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55 jbauman jcp jdhky Jean jedai Jello_Raptor jercos jerojasro jesyspa jfischoff jix jlamothe jlewis jliikka jlouis jmcarthur jmelesky jml joachifm joar jodaro JoeHazzers joeyh johnny934759 johnw jonaias joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmae julmuri junsuijin jyyou k00mi k0ral kadoban KaiSforza kakos kallisti kallisti_ kalven KaneTW kaol kaoskorobase Ke kennyd kennyp_ Khisanth killy9999 kini Kinnison KitB__ kith KittyFailed kkris kloeri klugez kmels kmic kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius krig_ kryft ksf__ kshannon ktosiek Kuba kyle__ lahwran lambdabot Laney latro`a lattenwald lazard LeaChim lemao_ lennart_ lenstr leoncamel leprauchan leroux levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb LtWorf lucca luite Luke lulf luminous lusory_ m3ga Maarten__ machisuji madjestic magaio_ magicman majoh maksbotan malorie_ maltem maltin mami mannyv marienz martint Martty MasseR mastensg MasterPuncher mateu Mathnerd314 mattp_ matzo mauke Maxdamantus mcguitan83 McManiaC mechairoi mefisto Megant memand mendez merijn message144 metalog meyersh mgile mgsloan miasma mietek mike2 mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mizu_no_oto mjr84 MK_FG mlh mlinksva mmaruseacph2 MnO2 MoALTz mokus_ mollerstrand Mon_Ouie monique_ monochrom monoidal monqy moonlite morazow mornfall mortberg Mortchek mpu mrd mrdomino_ MrFahrenheit MrFenix_ mrkotfw MrMeh mrshoe mspells msuszczy mtahmed mullein munro museun mux__ mwc myme n0c n_b Nanar Natch natechan nathanel_ natte ndngvr netj neurocyte neutrino newsham nexx Nickeeh nicoo Nik_89 niklasb niko nikola Nimatek nimred ninegrid ninzine niteria nlogax no-n noam_ nogs noj Noldorin nonymousa nooodl noplamodo notdan NougatRillettes Nshag numeral nus nwf obcode ocharles ofan OlegYch opqdonut ormaaj Ornedan ortmage osfameron osnr osxorgate otend othiym23 otterdam otters otto_s_ ousado owst ozataman ozgura paddymahoney paintcan PaksAway Pantoufle pantsman papermachine Paprikachu ParahSail1n parcs PartyKat2e pcapriotti pdxleif_away peddie peltchu pepijn_away perlite perspectival petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul philipdexter Philippa phischu PHO_ piezo pikhq plcplc Plex- plhk pmade pnielsen popz pqmodn_ pr pranavrc predator217 preflex prh pricklypear PrO_OkI ps-auxw Ptival ptrf purefn puzza007 pxdr pyrtsa pyykkis q66 quaestor quicksilver quuxman qwandor|quassel qwr qz r126l_ racycle raek rafsoaken raid rainmaker Ralith Rarrikins Raynes Razz rcfox rcj_ rcl realnot reembarking08 reiddraper Rembane RenJuan rexamophone ricepuddin RichyB rio Riussi rkj rmarianski rmunoz rmunroe_ robbe- robbert romanb rossabaker Rotaerk rs0 rsimoes rsuniev123 ryanakca rzr_ s00pcan S11001001 s4msung_ s_quark SaBer saep Sagi saiam Saizan sambio Sami__ saml sarfraz saurik sbahra scgilardi schlicht_ schlumpi schovi schroedinbug sclv Scott_firebeta Sculptor SeanTAllen seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo sh shachaf shanse shepheb shergill shintah SHODAN shurikas shutdown_-h_now si14 silver simon simon___ simpson sipa sirchurchill sjl ski skp skuggi sleepynate SLi sm smarter snowylike snoyberg so so_ Soft sohum solancile solarus solirc sonda Sonderblade sordina2 SoupEvil spion Spockz sproingie Squid_Tamer srcerer srhb sShintah Starfire stat_vi statusfailed steez stelleg_away stepcut stephe stepkut stevejb strax_ suiside sully sunfun_ sunnavy supersym supki sw17ch sysopfb t7 tac tahu tamiko tanakh tanakh_ Taneb Tarential taruti taterbase tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction_y tessier Testos tew88 tg tgeeky th0gz19_ Th0mas The_third_man theDon theodoiko theorbtwo thetallguy thetallguy1 thirsteh_ ThomasLocke Thomyho8 thorkilnaur thoughtpolice Thra11 threedaymonk threesome tieTYT tim timemage timthelion tippenein tkd tlaine tlevine tmiw TML tobiassj1sten toekutr tomaw tomboy65 tomejaguar tomh_ tomku tomprince ToRA Tordek_ tranma TravisD trescenzi trevize trh178 tridactyla trolling tromp__ tsinnema tsou tswett tunixman turiya tuv tvaalen tweakism Twey u_ Ulrar uniquenick Urchin UziMonkey Valodim Varakh vehk verrens Vert Vertue vhz vili vmeson vobi Volstvok Vorpal voyd Vq VZakharov wagle walter Walther warpy__ Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wilfredh william-s Will| wjlroe wollw wolong wormphlegm wting wto wtw wumpus wunki x7 xaimus xcombelle xcv xcvii xinming XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai xymox yacks yam yan_ yano yeltzooo yiannis_t yitz ysulsky yumike zaltekk Zariel zebr zeiris zenzike zero7 ziman zoktar zomg zorzar Zouppen zwiebel zz_nh2 Zzompp]
2013-03-18 17:25:50	--	Channel #haskell: 1039 nicks (1 op, 0 halfops, 0 voices, 1038 normals)
2013-03-18 17:25:50	--	URL for #haskell: http://www.haskell.org/
2013-03-18 17:25:51	trescenzi	but yea fmap works i guess
2013-03-18 17:25:51	--	Mode #haskell [+CLcnpt]
2013-03-18 17:25:51	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-18 17:26:11	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Ping timeout: 256 seconds)
2013-03-18 17:27:41	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-18 17:28:11	<--	Itkovian (~Itkovian@188.188.85.230) has quit (Quit: Itkovian)
2013-03-18 17:28:22	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-18 17:28:47	trescenzi	I guess my real hope was to not have to box any types with functors or monads
2013-03-18 17:29:37	Philippa	once you're using a monad, you're using a monad. But you can have as many islands of purity inside it as you like
2013-03-18 17:29:37	otters	let b = f a in g b
2013-03-18 17:30:41	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-18 17:30:52	<--	Taneb (~nathan@host-84-13-68-168.opaltelecom.net) has quit (Ping timeout: 245 seconds)
2013-03-18 17:30:58	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-18 17:31:08	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-18 17:31:12	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-18 17:31:27	<--	tieTYT (~tieTYT@wsip-70-183-27-154.oc.oc.cox.net) has left #haskell
2013-03-18 17:31:34	<--	nooodl (~nooodl@91.177.19.186) has quit (Quit: Leaving)
2013-03-18 17:31:42	<--	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has quit (Ping timeout: 245 seconds)
2013-03-18 17:32:12	trescenzi	are there any good tutorials you can recommend on how to actually "make your own" monad
2013-03-18 17:32:28	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-03-18 17:32:38	-->	ablokzijl (~arjan@46-126-12-5.dynamic.hispeed.ch) has joined #haskell
2013-03-18 17:32:39	srhb	You could have invented monads, perhaps? It's really about the standard monads, but once you get that pattern, you're pretty much set.
2013-03-18 17:33:00	-->	yukihr (~yukihr@i60-47-23-21.s04.a013.ap.plala.or.jp) has joined #haskell
2013-03-18 17:33:15	-->	nooodl (~nooodl@91.177.19.186) has joined #haskell
2013-03-18 17:33:24	Philippa	trescenzi: the technique I always like but fail to write up properly is to write it as an interpreter first
2013-03-18 17:33:41	Philippa	build an AST for the "monad language" using a GADT, write a runMonad function - and then fuse the two together
2013-03-18 17:33:56	srhb	I'd love to see that written up properly :D
2013-03-18 17:34:01	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-18 17:34:08	Philippa	mmm. I did give a talk on it at one AngloHaskell
2013-03-18 17:34:12	trescenzi	huh that's interesting
2013-03-18 17:34:14	-->	ParahSailin (~eg@unaffiliated/parahsailin) has joined #haskell
2013-03-18 17:34:33	trescenzi	what I'm working on right now actually is a recursive descent parser
2013-03-18 17:34:49	Philippa	http://flippac.org/talks/Fusion.pdf
2013-03-18 17:35:04	Philippa	can't remember how good the slides are, it's been a while
2013-03-18 17:35:14	trescenzi	I think I'm just confused as to what exactly the Monad m => really does
2013-03-18 17:35:24	otters	it means m is a Monad
2013-03-18 17:35:29	trescenzi	yea sorry
2013-03-18 17:35:30	srhb	It constrains the type m to one that has an instance for Monad.
2013-03-18 17:35:33	-->	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has joined #haskell
2013-03-18 17:35:34	-->	Taneb (~nathan@host-84-13-68-168.opaltelecom.net) has joined #haskell
2013-03-18 17:35:44	<--	otend (~otend@2610:e0:a040:e097:aed:b9ff:fe38:151f) has quit (Ping timeout: 258 seconds)
2013-03-18 17:35:48	trescenzi	I get that but what it does to the type it boxes
2013-03-18 17:35:55	Philippa	it says "whatever m is, I'm going to get the proof it's a Monad and that you can do Monad things with it"
2013-03-18 17:36:05	trescenzi	so it forces it to have an instance for a monad?
2013-03-18 17:36:21	Philippa	you're going to get passed a "dictionary" which contains the class's methods for that particular type
2013-03-18 17:36:22	Philippa	right
2013-03-18 17:36:32	trescenzi	ok
2013-03-18 17:36:45	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-03-18 17:37:02	<--	nooodl (~nooodl@91.177.19.186) has quit (Client Quit)
2013-03-18 17:37:14	trescenzi	and that means the type must have at least return and >>=?
2013-03-18 17:37:21	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Quit: Konversation terminated!)
2013-03-18 17:37:25	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-18 17:37:57	-->	earspliT (~earsplit@sub123-196.bucknell.edu) has joined #haskell
2013-03-18 17:37:59	monochrom	I think "box" is a misunderstanding
2013-03-18 17:38:00	srhb	trescenzi: You can query ghci about what functions that are of consequence by saying :i Monad
2013-03-18 17:38:15	Philippa	trescenzi: yes, you'll get return and >>=
2013-03-18 17:38:16	srhb	(Though some may have default implementations)
2013-03-18 17:38:25	-->	nooodl (~nooodl@91.177.19.186) has joined #haskell
2013-03-18 17:38:57	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-18 17:39:11	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Ping timeout: 258 seconds)
2013-03-18 17:39:40	-->	fragamus (~textual@ip-64-134-224-199.public.wayport.net) has joined #haskell
2013-03-18 17:39:48	-->	heruur (~tvh@dslb-188-103-196-142.pools.arcor-ip.net) has joined #haskell
2013-03-18 17:40:02	-->	Eiam (~that@unaffiliated/eiam) has joined #haskell
2013-03-18 17:40:18	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-18 17:41:09	Philippa	trescenzi: there's an old paper by Wadler explaining type classes as once were and the dictionary passing transformation that you might find useful
2013-03-18 17:41:21	-->	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has joined #haskell
2013-03-18 17:41:21	-->	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has joined #haskell
2013-03-18 17:41:36	--	dsirenko_ is now known as EarlGray^
2013-03-18 17:41:36	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-18 17:41:39	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-18 17:41:42	EarlGray^	Hello
2013-03-18 17:41:50	trescenzi	hmm ok I'll have to check it out
2013-03-18 17:41:50	srhb	EarlGray^: Hello.
2013-03-18 17:42:17	EarlGray^	I am trying to do some array operations and I can't wrap my mind about multiple class parameters
2013-03-18 17:42:38	<--	mspells (~matthew@c-24-11-54-30.hsd1.mi.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-18 17:42:39	trescenzi	so if I'm getting errors along the lines of m10 is too general that means I need to specify the actual implementation of the monad functions?
2013-03-18 17:43:17	EarlGray^	for example, I am trying to write a function rndArray :: (IArray a e) => Int -> IO (a Int e)
2013-03-18 17:43:30	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-03-18 17:43:43	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-18 17:43:48	srhb	EarlGray^: I don't remember IArray. What are the constraints on a?
2013-03-18 17:44:19	-->	zhulikas (~Kostas@213.159.34.100) has joined #haskell
2013-03-18 17:44:20	srhb	I don't remember it having kind  * -> * -> * -- isn't that what your code is saying? (I may be completely wrong here and someone will hopefully correct me)
2013-03-18 17:44:31	elliott	that's what IArray looks like
2013-03-18 17:44:34	elliott	@hoogle listArray
2013-03-18 17:44:34	lambdabot	Data.Array.IArray listArray :: (IArray a e, Ix i) => (i, i) -> [e] -> a i e
2013-03-18 17:44:34	lambdabot	Data.Array listArray :: Ix i => (i, i) -> [e] -> Array i e
2013-03-18 17:44:34	lambdabot	Data.Array.MArray newListArray :: (MArray a e m, Ix i) => (i, i) -> [e] -> m (a i e)
2013-03-18 17:44:36	-->	adlan (~adlan@115.134.180.140) has joined #haskell
2013-03-18 17:44:39	elliott	"a" is the array type
2013-03-18 17:44:44	EarlGray^	I use a function rndList :: Int -> IO [Int] , which uses randomRIO and fetch its output to Data.Array.array
2013-03-18 17:45:08	srhb	HOw does a Int e make sense then?
2013-03-18 17:45:13	EarlGray^	and since rndList has already defined type, I have to specify that e is Int in the IArray constraints
2013-03-18 17:45:27	EarlGray^	But I can't put Int instead of e
2013-03-18 17:45:46	monoidal	EarlGray^: you want an array of integers?
2013-03-18 17:45:53	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-18 17:45:58	EarlGray^	yep, a random array of integers
2013-03-18 17:46:11	-->	Ralith (~ralith@d142-058-057-157.wireless.sfu.ca) has joined #haskell
2013-03-18 17:46:37	armlesshobo	liftM (++ ", in bed.") getLine -- fortune cookie joke
2013-03-18 17:46:47	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-18 17:46:49	<--	_jwest (~jordan@unaffiliated/jwest/x-8002332) has quit (Quit: _jwest)
2013-03-18 17:46:53	monochrom	perhaps don't generalize prematurely. don't use the IArray type class first. use concretely Array (from Data.Array)
2013-03-18 17:46:58	monoidal	EarlGray&: why you can't put Int instead of e?
2013-03-18 17:47:16	<--	shurikas (~Kostas@213.159.34.100) has quit (Ping timeout: 246 seconds)
2013-03-18 17:47:45	EarlGray^	 Non type-variable argument in the constraint: IArray a Int
2013-03-18 17:47:46	EarlGray^	    (Use -XFlexibleContexts to permit this)
2013-03-18 17:47:50	monochrom	rndArray :: Int -> Array Int Int
2013-03-18 17:47:58	EarlGray^	Is the extention required here?
2013-03-18 17:48:08	monoidal	EarlGray^: yes, and it's harmless
2013-03-18 17:48:58	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-18 17:49:00	EarlGray^	Ok, I'll use the extension
2013-03-18 17:49:06	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-18 17:49:07	<--	hallski_ (~hallski@80.239.169.202) has quit (Read error: Operation timed out)
2013-03-18 17:49:14	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 255 seconds)
2013-03-18 17:49:53	EarlGray^	It's one of my first efforts to do something with arrays and I try to avoid extensions for irrational reasons
2013-03-18 17:49:57	 *	hackagebot HGamer3D-CEGUI-Binding 0.2.1 - Windows Game Engine for the Haskell Programmer - CEGUI Bindings  http://hackage.haskell.org/package/HGamer3D-CEGUI-Binding-0.2.1 (PeterAlthainz)
2013-03-18 17:49:59	 *	hackagebot HGamer3D-Bullet-Binding 0.2.1 - Windows Game Engine for the Haskell Programmer - Bullet Bindings  http://hackage.haskell.org/package/HGamer3D-Bullet-Binding-0.2.1 (PeterAlthainz)
2013-03-18 17:50:00	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-18 17:50:01	 *	hackagebot HGamer3D-Ogre-Binding 0.2.1 - Windows Game Engine for the Haskell Programmer - Ogre Bindings  http://hackage.haskell.org/package/HGamer3D-Ogre-Binding-0.2.1 (PeterAlthainz)
2013-03-18 17:50:03	 *	hackagebot HGamer3D 0.2.1 - Windows Game Engine for the Haskell Programmer  http://hackage.haskell.org/package/HGamer3D-0.2.1 (PeterAlthainz)
2013-03-18 17:50:40	johnw	if there's a library for ogres, what about other monsters?
2013-03-18 17:50:46	<--	earspliT (~earsplit@sub123-196.bucknell.edu) has quit (Quit: Lost terminal)
2013-03-18 17:51:07	-->	shosti (~user@2602:306:c434:4170:223:12ff:fe01:56f9) has joined #haskell
2013-03-18 17:51:10	srhb	johnw: Ogres are extremely polymorphic.
2013-03-18 17:51:17	<--	shosti (~user@2602:306:c434:4170:223:12ff:fe01:56f9) has quit (Remote host closed the connection)
2013-03-18 17:51:27	johnw	then it should be HGamer3D-Shapeshifter-Binding
2013-03-18 17:51:42	srhb	:)
2013-03-18 17:51:42	-->	bergey (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-03-18 17:52:04	<--	rafsoaken (~rafsoaken@91-119-236-227.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-03-18 17:52:41	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Quit: Leaving.)
2013-03-18 17:52:47	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-03-18 17:52:56	monochrom	or HGamer3D-IOgres-Binding
2013-03-18 17:52:56	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-18 17:53:04	<--	fragamus (~textual@ip-64-134-224-199.public.wayport.net) has quit (Quit: Computer has gone to sleep.)
2013-03-18 17:53:39	-->	mobileblue (~mobileblu@dslb-094-217-247-253.pools.arcor-ip.net) has joined #haskell
2013-03-18 17:53:41	<--	realnot (~realnot@unaffiliated/realnot) has quit (Ping timeout: 248 seconds)
2013-03-18 17:53:53	<--	NougatRillettes (~NougatRil@static.118.236.9.5.clients.your-server.de) has quit (Ping timeout: 248 seconds)
2013-03-18 17:54:13	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-18 17:54:22	--	stelleg_away is now known as stelleg
2013-03-18 17:54:29	-->	realnot (~realnot@host186-50-dynamic.47-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-18 17:54:30	<--	realnot (~realnot@host186-50-dynamic.47-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-18 17:54:30	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-18 17:54:34	-->	Swineflu (~andrew@host81-154-208-243.range81-154.btcentralplus.com) has joined #haskell
2013-03-18 17:54:40	th0gz19_	 a
2013-03-18 17:54:43	Swineflu	is there away to use maximum with tuples?
2013-03-18 17:55:07	sipa	:t maximum
2013-03-18 17:55:09	lambdabot	Ord a => [a] -> a
2013-03-18 17:55:15	monochrom	yes
2013-03-18 17:55:15	-->	jdoliner (~jdoliner@173-228-89-170.dsl.static.sonic.net) has joined #haskell
2013-03-18 17:55:32	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-18 17:55:34	johnw	maximum (map fst tuples)
2013-03-18 17:55:50	ocharles	:t map fst
2013-03-18 17:55:51	sipa	Swineflu: if you have a list of tuples, maximum will select the lexicographically-ordered highest of them
2013-03-18 17:55:51	lambdabot	[(b, b1)] -> [b]
2013-03-18 17:56:06	sipa	> maximum [(1,2,3),(2,1,3),(3,2,1)]
2013-03-18 17:56:07	lambdabot	  (3,2,1)
2013-03-18 17:56:21	johnw	sipa: interesting, did not know that
2013-03-18 17:56:40	ocharles	I actually guessing Swineflu wants something  :: (a, b, c, d, e, etc) -> a | b | c | d
2013-03-18 17:56:43	sipa	johnw: Ord on tuples sorts lexicographicallyu
2013-03-18 17:56:43	<--	chatsiri_ (~chatsiri_@49.228.29.41) has quit (Ping timeout: 256 seconds)
2013-03-18 17:56:49	johnw	ah
2013-03-18 17:56:58	johnw	didn't know tuples had an Ord instance
2013-03-18 17:57:06	ocharles	Swineflu: do you have a list of tuples, or do you want the maximum element in a single tuple?
2013-03-18 17:57:13	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-18 17:57:15	Swineflu	a single tuple
2013-03-18 17:57:15	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-18 17:57:22	-->	fmapE (~fmapE@2001:18e8:2:10f4:923:3e3d:86e5:1bb7) has joined #haskell
2013-03-18 17:57:36	<--	yukihr (~yukihr@i60-47-23-21.s04.a013.ap.plala.or.jp) has quit (Remote host closed the connection)
2013-03-18 17:57:40	ocharles	then it becomes a bit more difficult :)
2013-03-18 17:57:43	Swineflu	;(
2013-03-18 17:57:46	sipa	Swineflu: that makes no sense, as there is not even a requirement that all elements in the tuple have the same type
2013-03-18 17:57:50	ocharles	are the elements of the tuple different types, or all the same type?
2013-03-18 17:58:05	Swineflu	All the same type (int)
2013-03-18 17:58:16	-->	mspells (~matthew@c-24-11-54-30.hsd1.mi.comcast.net) has joined #haskell
2013-03-18 17:58:29	Swineflu	Its a homework task so i dont want a answer was just wondering if there was something maximum
2013-03-18 17:58:34	-->	mcdonc (~mcdonc@lanai.palladion.com) has joined #haskell
2013-03-18 17:58:36	Swineflu	Since it seems to work in python
2013-03-18 17:58:43	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-18 17:58:48	ocharles	python treats tuples as lists, you don't get that same freedom in haskell
2013-03-18 17:59:08	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 255 seconds)
2013-03-18 17:59:12	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-18 17:59:23	ocharles	it *can* be done, but folding a homogeneous tuple is not simple - so I suggest just writing as single function for your specific tuple
2013-03-18 17:59:32	trescenzi	do you know the size of the tuple?
2013-03-18 17:59:36	Swineflu	I'm just going to have to pull the vars out in to a list and use max
2013-03-18 17:59:37	-->	NougatRillettes (~NougatRil@static.118.236.9.5.clients.your-server.de) has joined #haskell
2013-03-18 17:59:40	-->	Philippa_ (~something@cpc4-clif10-2-0-cust380.12-4.cable.virginmedia.com) has joined #haskell
2013-03-18 17:59:41	Swineflu	Yeah its a 3-tuple
2013-03-18 17:59:47	-->	Zedrikov (~cedric@90.24.196.254) has joined #haskell
2013-03-18 17:59:49	Swineflu	I think i can do it with max and a boolen or
2013-03-18 17:59:57	trescenzi	then you could easily write your own max
2013-03-18 18:00:04	--	cyphase is now known as cyphase_
2013-03-18 18:00:37	--	cyphase_ is now known as cyphase
2013-03-18 18:01:09	--	cyphase is now known as cyphase_
2013-03-18 18:01:18	--	cyphase_ is now known as cyphase__
2013-03-18 18:01:39	<--	adlan (~adlan@115.134.180.140) has quit (Remote host closed the connection)
2013-03-18 18:02:08	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-18 18:02:11	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 258 seconds)
2013-03-18 18:02:23	--	cyphase__ is now known as cyphase
2013-03-18 18:02:44	<--	cdidd (~cdidd@93-80-249-125.broadband.corbina.ru) has quit (Read error: Operation timed out)
2013-03-18 18:03:24	-->	rafsoaken (~rafsoaken@91-119-236-227.dynamic.xdsl-line.inode.at) has joined #haskell
2013-03-18 18:03:25	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Quit: Lost terminal)
2013-03-18 18:04:32	monoidal	Swineflu: unzip3 + maximum + zip3?
2013-03-18 18:04:52	monoidal	Swineflu: or that's not what you need?
2013-03-18 18:04:54	-->	quchen (~david@84.170.79.74) has joined #haskell
2013-03-18 18:05:04	-->	cognominal (~cognomina@37.160.38.234) has joined #haskell
2013-03-18 18:05:10	trescenzi	Swineflu: this is a way to do it if you know you have a three tupple max' (x,y,z) = maximum (x:y:z:[])
2013-03-18 18:05:21	--	irc: disconnected from server
2013-03-20 11:48:21	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-20 11:48:21	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-20 11:48:21	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-20 11:48:21	--	Nicks #haskell: [@ChanServ [[zz]] [mth] \rs ]OLI[ __main__ _br_ _flow_ _janne _jwest `0660 `bps `micro `nand` a11235 aajmakin ab9rf absence abumirqaan acfoltzer acharles Adeon adimit Adios adnap adnauseam AfC Afish aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator_ alej alejandrogomez alexander__b Alice3 alios alkabetz alnix_ alpounet alshain Amadiro amatsu amiller amyers anachron_ anders^^ andrewsw aninhume1 anona AntiSpamMeta apaku appamatto araujo arbn ARCADIVS arenz args[0] aristid arkeet arkx armlesshobo arnihr__ arun asante asQuirreL aszlig Athas AtnNn augur augustl az b52 b_jonas BadKitty banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ beckerb Belgarion0 bens benzap bergey betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld bitonic blackmirroxx BlastHardcheese blooberr BMeph bobry bogner Boney Boreeas Botje bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bru` bstrie Bwild bxc Bynbo7 byorgey ByronJohnson bytbox c_wraith Cale caligula Canar canta canvon ccasin ccxCZ cdidd cdntr celery__ centrinia Cerise certainty chance charlesofarrell charliesome chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisirc chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmccann_ cmears cmsd2 cods colah comak companion_cube confound connelly coppro copumpkin CosmicRay Counter-Strike CoverSlide cow-orke1 crdueck cromain cross crs_ Cryovat ctype_real cwvh cynick cyphase d-snp dabradley dannybtran danr danvet dario DarkAceZ darkf Dashkal davean davorak dawe dcoutts dcoutts_ deavidsedice Deewiant def-lkb dennda dented42 Derander descender DexterLB dflemstr dfletcher DigitalKiwi dilinger dinox dixie djanatyn dju dkasak dlundy_ dmarker dmwit docksider Dodek dogmaT dolio domingo dottedmag dqd Draconx Draggor drbean dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT`` duairc__ dumbhat DustyDin1o Dybber dyreshark dzhus eacameron1 EarlGray EarlGray^ earthy ecuderpam edenc edon edsko edtsech edwardk edwtjo Eelis ehamberg Eiam eikke einsof eL_Bart0 electrogeek elgot Eliel_ elliott elliottcable emma endojelly Enigmagic ent Entroacceptor epta ericmj Eridius ernst Erstarrung Estrellas etabot ethercrow etrepum eviltwin_ Excureo eyck f8_ fabjan faen faheem FalkoPeters fall_ fayden fcr fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin floatingman flux folone formalcow fotc freiksenet frio frontendloader froztbyte fryguybob fsvehla ft Fubar^ Fuco Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc_ gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gentleben gereedy gg7 ghorn Ghoul_ gienah Gilly Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest10329 Guest22595 Guest64340 Guest65991 Guest91870 Gunni Gurragchaa_ guy_ guymann h_chiro habbbe hachiya hackagebot Hafydd hallski HaltingState hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk Hermit heruur hiratara hircus hiredman hiroakip hiroyuki2 hive-mind hkBst horlicks hpaste hpc hpd hungryblank hvr hychen hyko iago IanKelling1 ibid IbnFirnas IceDanelol Iceland_jack Icewing idnar idntfy idntfy[work] idoru Igloo_ igstan ijp imeredith inr int-e integral Internet13 ion ique isenmann ISF_ itemad Itkovian iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt jang1 JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55_ jbauman jcp jdoliner Jello_Raptor jercos jerojasro jesyspa jix jlamothe jlewis jliikka jlouis_ jmcarthur jml joachifm joar jodaro joe9 JoeHazzers joeyh johnny934759 johnw jonaias joneshf joneshf-laptop jonke_ Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmae julmuri junsuijin jyyou k0ral kadoban Kaidelong KaiSforza kakos kalven kamatsu KaneTW kaol kaoskorobase Ke kennyd kennyp_ Khisanth kini Kinnison KitB__ kith KittyFailed kkris kloeri klugez kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ krocos kryft kshannon ktosiek Kuba kuribas kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latermuse latro`a lattenwald lazard LeaChim lenstr leprauchan leroux levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lucca luite Luke lulf lusory m0g m3ga Maarten__ machisuji madhadron magicman majoh maksbotan_ malorie maltin mami mannyv marienz Martty MasseR mastensg MasterPu1cher mattp_ matzo mauke Maxdamantus mceier mcguitan83 McManiaC mechairoi mefisto Megant memand mendez merijn meyersh_ mgq mgsloan miasma mietek mike2 mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mjr84 MK_FG mlh mlinksva mmaruseacph2 MnO2 MoALTz mokus_ mollerstrand monique_ monochrom monqy moonlite_ mornfall mortberg Mortchek mpu mrd mrdomino_ MrFenix mrkotfw MrMeh mrshoe MrWoohoo mspells mtahmed mullein munro mushi mux myme n-dolio n_b Nanar nardul Natch natte ndngvr netj neurocyte newsham nexx Nickeeh nicoo Nik_89 NikkeiMinaj niko nikola nilg Nimatek nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nonymousa noplamodo notdan notthemessiah NougatRillettes Nshag numeral nus- nwf obcode ocharles odi ofan opqdonut ormaaj Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s ousado ozataman ozataman_ paddymahoney PaksAway Palmik Pantoufle pantsman Paprikachu ParahSail1n ParahSailin parcs PartyKat2e pcapriotti pdxleif_away peddie peltchu pepijndevos perlite permagreen petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul Philippa PHO_ pikhq plcplc Plex- plhk pnielsen popz powergiant pqmodn_ pr predator217 preflex prh pricklypear PrO_OkI ps-auxw Ptival ptrf purefn puzza007 pxdr pyrtsa pyykkis quaestor quchen quicksilver quuxman qwandor|quassel qwr qz r126l_ raek_ rafsoaken RageOfThou raichoo raid rainmaker Ralith Rarrikins RayNbow`TU Raynes Razz rcfox rcj_ rcl redjohn reembarking08 reiddraper Reite Rembane RenJuan rexamophone rfw RichyB rio Riussi_ rmarianski rmunoz robbe- robbert` rossabaker rs0 rsimoes rsuniev123 ryanakca s00pcan s4msung_ s_quark SaBer saep Sagi saiam Saizan sanemat sarfraz_ saurik sbahra scgilardi schlicht__ schlumpi schroedinbug sclv_ Scott_firebeta scottj SeanTAllen seats SegFaultAX sellout- setmeaway Sgeo sgronblo sh shachaf shanse shepheb shergill SHODAN shurikas shutdown_-h_now si14 silver simon__ simon___ simpson sipa sirchurchill sjl ski skuggi skyflash SLi sm smarter__ snowylike snoyberg so Soft sohum solarus solirc sopvop sordina2 soulofpeace SoupEvil Spockz sproingie Squid_Tamer squidz srcerer staafl Starfire stat_vi statusfailed steez stelleg_away stepcut stephe stepkut strax_ suiside sully sunfun_ sunnavy supersym supki sw17ch Swizec sysop_fb tahu takuan tamiko tanakh tanakh_ Tarential taruti tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction_z tessier Testos tew88 tg Th0mas The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur thoughtpolice threeday1onk threesome tim timemage tippenein tkd tlaine tlevine tmiw TML tobiassj1sten tom339 tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek trevize tridactyla trolling tromp tsou tswett ttuegel tunixman tuv tvaalen Twey twomashi Ulrar Urchin UziMonkey Valodim Varakh vehk verrens Vert Vertue vhz vili vmeson vobi Volstvok Vorpal voyd_ Vq VZakharov wagle Walther warpy__ Watcher7|off waterlaz wchun wei2912 weie wereHamster WhereIsMySpoon whoops wilfredh william-s Will| wjlroe wollw wolong wormphlegm wting wto wtw wump wunki x7 x7a1c0b xaimus xcvii xinming xkcd XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai xymox yacks yam yan_ yano YellowOnion1 yeltzooo yiannis_t yitz ysulsky_ yukihr yumike Zariel zebr Zedrikov zeiris zenzike zero7 zeus ziman zoktar zomg zorzar Zouppen zwiebel_ zz__ zz_nh2 Zzompp]
2013-03-20 11:48:21	--	Channel #haskell: 980 nicks (1 op, 0 halfops, 0 voices, 979 normals)
2013-03-20 11:48:21	--	URL for #haskell: http://www.haskell.org/
2013-03-20 11:48:23	--	Mode #haskell [+CLcnpt]
2013-03-20 11:48:23	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-20 11:48:24	--	schlicht__ is now known as schlicht
2013-03-20 11:48:26	mushi	Botje: is map function in gloss or where?
2013-03-20 11:48:30	<--	squidz (~albert@141.84.69.76) has quit (Ping timeout: 276 seconds)
2013-03-20 11:48:37	-->	osxorgate (~osxorgate@94.142.213.250) has joined #haskell
2013-03-20 11:48:37	Botje	it's a haskell built-in.
2013-03-20 11:48:40	mushi	yeah i mean time based
2013-03-20 11:48:40	-->	Rarrikins_n (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 11:48:47	mushi	so something along the lines a loop
2013-03-20 11:48:51	Botje	then disregard my advice, follow `nand`s instead.
2013-03-20 11:49:05	-->	cognominal (~cognomina@37.161.98.182) has joined #haskell
2013-03-20 11:49:43	<--	LAMMJohnson (~ja@host86-183-156-119.range86-183.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-03-20 11:50:15	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 260 seconds)
2013-03-20 11:50:51	-->	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has joined #haskell
2013-03-20 11:51:35	<--	dawe (~dawe@p5090F923.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-20 11:52:26	Hermit	mushi: what's the scale interval you need?
2013-03-20 11:52:26	mushi	i ll show some code
2013-03-20 11:52:30	mushi	on what i m trying to do
2013-03-20 11:52:37	mushi	http://pastebin.com/dQsfy0A2
2013-03-20 11:52:40	mauke	The paste dQsfy0A2 has been copied to http://hpaste.org/84367
2013-03-20 11:52:47	mushi	i need 0 where its really small
2013-03-20 11:52:54	mushi	then 1 where its current picture size
2013-03-20 11:53:03	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-20 11:53:22	mushi	then 2 twice the square size
2013-03-20 11:53:33	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 11:53:41	mushi	then 2.5 times, 3 times, 3.5 times and so on
2013-03-20 11:54:42	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-20 11:55:09	-->	Philonous (~Philonous@dslb-178-000-135-085.pools.arcor-ip.net) has joined #haskell
2013-03-20 11:55:31	-->	OlegYch (~OlegYch@86.57.158.170) has joined #haskell
2013-03-20 11:55:42	Palmik	Is there something like splitUpdate :: Ord k => (a -> Maybe a) -> (Bool, Bool, Bool) -> k -> Map k a -> Map k a? I know I could use mapMaybeWithKey, but that does not have complexity sensitive to the size of the updated chunk of the map.
2013-03-20 11:55:43	lambdabot	Palmik: You have 1 new message. '/msg lambdabot @messages' to read it.
2013-03-20 11:56:00	<--	krocos (~krocos@95.167.75.238) has quit (Ping timeout: 264 seconds)
2013-03-20 11:56:01	Hermit	mushi: scale (Float, Float, picture)  <-- what? double check that
2013-03-20 11:56:16	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-20 11:56:17	<--	cognominal (~cognomina@37.161.98.182) has quit (Ping timeout: 252 seconds)
2013-03-20 11:56:31	`nand`	line 8 makes no sense
2013-03-20 11:57:02	<--	IanKelling1 (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has quit (Ping timeout: 272 seconds)
2013-03-20 11:57:24	mushi	yeah i know
2013-03-20 11:57:30	mushi	i just was playing with shit
2013-03-20 11:57:40	mushi	but i know i need the scale functions somewhere there
2013-03-20 11:57:43	Hermit	mushi: I don't quite get the stepping you need, please reformulate
2013-03-20 11:57:43	mushi	in  a loop?
2013-03-20 11:58:20	Hermit	mushi: get your question right, and then we can help
2013-03-20 11:58:22	<--	Natch (~Natch@c-fecee155.25-4-64736c10.cust.bredbandsbolaget.se) has quit (Read error: Connection reset by peer)
2013-03-20 11:58:26	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-03-20 11:58:37	mushi	i ve been given this "The side length of the square should grow in direct proportion to time."
2013-03-20 11:58:46	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-20 11:58:47	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 11:59:07	-->	Natch (~Natch@c-fecee155.25-4-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-03-20 11:59:07	mushi	"In other words:  anim 0 should be invisible. anim 1 (the square after one second) should be exactly the same as the square you originally defined in picture. anim 2 should be twice the side length of anim 1 or picture anim 2.5 should be two and a half times the side length of picture anim 3 should be three times the side length of picture and so on..."
2013-03-20 11:59:20	-->	HugoDaniel (~hugo@elab.fcsh.unl.pt) has joined #haskell
2013-03-20 11:59:22	mushi	thats my instructions
2013-03-20 11:59:29	mushi	as a haskell n00b (only a few days)
2013-03-20 11:59:34	-->	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has joined #haskell
2013-03-20 11:59:40	HugoDaniel	oh, haskell hackaton in ukraine
2013-03-20 11:59:46	mushi	it has thrown me off and google loops in haskell hasnt helped
2013-03-20 11:59:54	<--	wtw (~wtw@unaffiliated/wtw) has quit (Quit: Lost terminal)
2013-03-20 12:01:03	-->	Rarrikins_n_o (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 12:02:49	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-20 12:03:20	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-20 12:03:21	<--	Rarrikins_n (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-03-20 12:03:30	<--	fsvehla (~fsvehla@h081217181184.dyn.cm.kabsi.at) has quit (Quit: fsvehla)
2013-03-20 12:03:38	-->	Maarten___ (~maarten@a83-163-18-146.adsl.xs4all.nl) has joined #haskell
2013-03-20 12:03:55	-->	osxorgat_ (~osxorgate@94.142.213.250) has joined #haskell
2013-03-20 12:04:02	<--	osxorgate (~osxorgate@94.142.213.250) has quit (Read error: No route to host)
2013-03-20 12:04:44	Hermit	mushi: first of all, start by putting a working definition at line 8: anim n = scale n n picture
2013-03-20 12:05:26	<--	Maarten__ (~maarten@a83-163-18-146.adsl.xs4all.nl) has quit (Ping timeout: 255 seconds)
2013-03-20 12:05:37	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 12:05:52	<--	bradleyayers (~brad@49.176.69.150) has quit (Ping timeout: 256 seconds)
2013-03-20 12:06:15	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-20 12:06:21	mushi	done Hermit
2013-03-20 12:06:25	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-20 12:07:16	-->	mike25 (~user@host81-151-43-253.range81-151.btcentralplus.com) has joined #haskell
2013-03-20 12:07:28	`nand`	and now the problem is solved
2013-03-20 12:07:28	mushi	hmm that actually does someting
2013-03-20 12:07:31	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Ping timeout: 245 seconds)
2013-03-20 12:07:56	mushi	wow
2013-03-20 12:08:03	mushi	haskell is really functional
2013-03-20 12:08:23	mushi	and i ve spent all the time on java/C
2013-03-20 12:08:33	mushi	can anyone kinda explain what happened
2013-03-20 12:09:21	Hermit	mushi: you should definitely start with at least some introduction tutorial to haskell
2013-03-20 12:09:34	Hermit	mushi: you'll get nowhere otherwise
2013-03-20 12:09:38	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-03-20 12:09:53	-->	shock_one (~shock_one@46.118.141.174) has joined #haskell
2013-03-20 12:10:06	<--	osxorgat_ (~osxorgate@94.142.213.250) has quit (Ping timeout: 252 seconds)
2013-03-20 12:10:18	<--	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:c007:ff37:72a8:d55) has quit (Ping timeout: 264 seconds)
2013-03-20 12:10:25	shock_one	Hi. How do I get all possible combinations of multipliers for a given number? So, for example, for 60 I want to get (5,12), (3, 20), (2, 30), (2,2,15), (2,2,3,5) and so on. I think I should prime factorize the number first, but what's next? How to get the combinations of a different length?
2013-03-20 12:10:31	<--	plcplc (~quassel@fw.math.ku.dk) has quit (Ping timeout: 258 seconds)
2013-03-20 12:10:53	mushi	yeah Hermit i have started one
2013-03-20 12:11:00	mushi	but i ll need to read more
2013-03-20 12:11:55	Hermit	mushi: of course... seeing as you put a C style function call....
2013-03-20 12:12:52	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 12:13:20	powergiant	I don't get why I can't do map (++ [1]) [1,2,3] ? ghc gives an error about ambigious types?
2013-03-20 12:13:27	-->	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has joined #haskell
2013-03-20 12:14:10	<--	Hafydd (jm@unaffiliated/joo) has quit (Ping timeout: 245 seconds)
2013-03-20 12:14:10	earthy	> map (++ 1) [1,2,3]
2013-03-20 12:14:12	lambdabot	  Ambiguous type variable `b0' in the constraints:
2013-03-20 12:14:12	lambdabot	   (GHC.Num.Num b0)
2013-03-20 12:14:12	lambdabot	     a...
2013-03-20 12:14:19	-->	Hafydd (jm@unaffiliated/joo) has joined #haskell
2013-03-20 12:14:26	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-03-20 12:14:27	earthy	> map (++ 1) [1,2,3] :: [Int]
2013-03-20 12:14:29	lambdabot	  No instance for (Data.Monoid.Monoid GHC.Types.Int)
2013-03-20 12:14:29	lambdabot	   arising from a use of...
2013-03-20 12:14:35	Hermit	earthy: check that 1....
2013-03-20 12:14:36	earthy	oh, right. :)
2013-03-20 12:15:04	earthy	> map (:[1]) [1,2,3] :: [Int]
2013-03-20 12:15:05	Hermit	powergiant: your problem is exactly the opposite as what earthy was doing
2013-03-20 12:15:06	lambdabot	  Couldn't match expected type `GHC.Types.Int'
2013-03-20 12:15:06	lambdabot	             with actual type ...
2013-03-20 12:15:10	earthy	> map (:[1]) [1,2,3] :: [[Int]]
2013-03-20 12:15:12	lambdabot	  [[1,1],[2,1],[3,1]]
2013-03-20 12:15:13	Hermit	god...
2013-03-20 12:15:15	earthy	there :)
2013-03-20 12:15:23	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-20 12:15:35	earthy	this set of attempts should clarify things ;)
2013-03-20 12:15:42	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-03-20 12:15:50	-->	sepp2k (~sexy@g224103098.adsl.alicedsl.de) has joined #haskell
2013-03-20 12:15:51	powergiant	hehe yes I think I understand. Thanks!
2013-03-20 12:16:36	earthy	hermit: that was kinda on purpose. he had multiple problems. ;)
2013-03-20 12:17:07	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-20 12:17:17	`nand`	powergiant: because in “2 ++ [1]” the first ‘2’ must be a list (due to ++); and GHC can't reasonably default that. If you were to write a Num instance for lists of numbers, and specify a type signature, it would theoretically type check
2013-03-20 12:18:09	earthy	um. well, monoid (due to ++)
2013-03-20 12:18:12	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-20 12:18:23	`nand`	:t (++)
2013-03-20 12:18:24	lambdabot	Monoid m => m -> m -> m
2013-03-20 12:18:25	Hermit	nope
2013-03-20 12:18:31	Hermit	oh, custom prelude
2013-03-20 12:18:52	Hermit	I thought (.) as fmap was the only thing
2013-03-20 12:19:01	Sgeo	:t from
2013-03-20 12:19:03	lambdabot	(Functor f, Profunctor p) => AnIso s t a b -> p t (f s) -> p b (f a)
2013-03-20 12:19:04	earthy	plus, it really depends on haskell '98 or newer and details like that ;)
2013-03-20 12:19:05	Hermit	`nand`: where can I get a diff summary?
2013-03-20 12:19:07	Sgeo	...
2013-03-20 12:19:12	`nand`	oh, okay; so yes, GHC can't reasonably default Monoid either
2013-03-20 12:19:14	<--	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has quit
2013-03-20 12:19:15	Sgeo	According to Hackage it should be
2013-03-20 12:19:20	Sgeo	from :: AnIso s t a b -> Iso b a t s
2013-03-20 12:19:31	Sgeo	s t a b -> b a t s
2013-03-20 12:19:39	`nand`	turns out it *can* default [Integer], so the only error you get with the list (++) is a missing instance
2013-03-20 12:19:46	supki	Sgeo: :t expands synonyms
2013-03-20 12:19:53	Sgeo	Ah
2013-03-20 12:19:54	`nand`	Hermit: diff between regular Prelude and lambdabot's?
2013-03-20 12:19:59	Hermit	`nand`: aye
2013-03-20 12:20:31	Hermit	just to avoid quirks
2013-03-20 12:20:34	-->	cedric_ (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has joined #haskell
2013-03-20 12:20:42	Sgeo	:t simple
2013-03-20 12:20:43	lambdabot	(Functor f, Profunctor p) => p a (f a) -> p a (f a)
2013-03-20 12:20:51	<--	Zedrikov (~cedric@AMontsouris-651-1-45-210.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-03-20 12:20:56	Hermit	though I like the mappend as (++)
2013-03-20 12:21:01	Hermit	I'm in favor of that
2013-03-20 12:21:44	`nand`	Hermit: http://code.haskell.org/lambdabot/State/L.hs
2013-03-20 12:21:49	-->	ilya_s (~ilya@213.136.42.60) has joined #haskell
2013-03-20 12:21:55	`nand`	this should be a reasonably close approximation
2013-03-20 12:22:13	Hermit	right...
2013-03-20 12:22:25	-->	leoncamel (~leoncamel@124.126.212.196) has joined #haskell
2013-03-20 12:22:32	<--	ilya_s (~ilya@213.136.42.60) has quit (Client Quit)
2013-03-20 12:22:38	Hermit	looks like flip is the other quirk
2013-03-20 12:22:41	Hermit	:t flip
2013-03-20 12:22:43	lambdabot	(a -> b -> c) -> b -> a -> c
2013-03-20 12:22:50	Hermit	oh?
2013-03-20 12:22:56	<--	wolong (wolong@naphaso.com) has quit (Quit: WeeChat 0.3.5)
2013-03-20 12:23:09	-->	dgpratt (~dpratt71@pool-72-65-105-181.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-20 12:23:11	 *	Hermit wonders why it's been hidden in the lambdabot prelude
2013-03-20 12:23:29	supki	:t (??)
2013-03-20 12:23:31	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-03-20 12:24:18	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-20 12:24:36	`nand`	you're probably going to have to poke Cale for the actual L.hs
2013-03-20 12:24:38	<--	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has quit (Quit: leaving)
2013-03-20 12:24:43	Hermit	yeah, I see that definition in L.hs but...
2013-03-20 12:24:45	-->	dpratt71 (~dpratt71@pool-72-65-105-181.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-20 12:24:55	 *	Hermit takes notice
2013-03-20 12:24:55	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-20 12:27:21	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 12:27:31	<--	dgpratt (~dpratt71@pool-72-65-105-181.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-03-20 12:27:56	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-20 12:28:27	johnw	is that (??) from lens?
2013-03-20 12:28:35	supki	yep
2013-03-20 12:28:44	johnw	it's a clever operator name
2013-03-20 12:28:49	-->	Peaker (~Peaker@46.19.80.70) has joined #haskell
2013-03-20 12:29:05	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-03-20 12:29:18	supki	it was (?) for a day or two =(
2013-03-20 12:29:28	johnw	map (f ?? a) [..]  it shows you where the substitution will happen
2013-03-20 12:29:31	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-20 12:29:45	supki	yes, that's the intention
2013-03-20 12:30:10	-->	whathelle (7a946189@gateway/web/freenode/ip.122.148.97.137) has joined #haskell
2013-03-20 12:30:22	whathelle	hi
2013-03-20 12:30:27	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-03-20 12:30:31	-->	adzeitor (~adzeitor@31.207.132.170) has joined #haskell
2013-03-20 12:31:08	whathelle	how to create a picture in haskell?
2013-03-20 12:31:18	johnw	you mean, like a PNG?
2013-03-20 12:31:25	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Read error: Operation timed out)
2013-03-20 12:31:44	whathelle	something like that, import gloss library?
2013-03-20 12:31:53	johnw	yeah, that's one way
2013-03-20 12:32:17	-->	gnuwilliam (~william@177.134.103.177) has joined #haskell
2013-03-20 12:32:35	petantik	or bit banging a bmp
2013-03-20 12:32:56	johnw	for that approach, see http://hackage.haskell.org/packages/archive/gd/3000.7.3/doc/html/Graphics-GD-ByteString.html
2013-03-20 12:33:20	whathelle	thank pal. i go to check it
2013-03-20 12:34:12	adzeitor	diagrams http://projects.haskell.org/diagrams/ ?
2013-03-20 12:34:34	<--	igstan (~igstan@109.99.235.103) has quit (Quit: igstan)
2013-03-20 12:34:35	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-20 12:34:59	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 12:36:16	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-20 12:36:23	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-20 12:39:10	<--	soulofpeace (~soulofpea@119.75.11.250) has quit (Ping timeout: 245 seconds)
2013-03-20 12:40:37	Hermit	what about cairo?
2013-03-20 12:40:52	-->	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has joined #haskell
2013-03-20 12:40:57	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Ping timeout: 256 seconds)
2013-03-20 12:41:49	<--	inr (a@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has quit (Read error: Connection reset by peer)
2013-03-20 12:42:03	-->	fsvehla (~fsvehla@chello084112185050.3.11.vie.surfer.at) has joined #haskell
2013-03-20 12:42:27	-->	inr (a@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has joined #haskell
2013-03-20 12:43:06	`nand`	depends on what kind of picture you want to create, but if you want to create a diagram, my vote lies with diagrams
2013-03-20 12:43:06	`nand`	where diagram means vector graphic
2013-03-20 12:43:16	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 248 seconds)
2013-03-20 12:43:28	<--	fsvehla (~fsvehla@chello084112185050.3.11.vie.surfer.at) has quit (Client Quit)
2013-03-20 12:43:46	-->	Thra11 (~thrall@87.115.27.231) has joined #haskell
2013-03-20 12:43:51	-->	srhb (~srhb@82.211.217.226) has joined #haskell
2013-03-20 12:43:52	<--	fgomez (~Fernando@uwsclient-178-82.uws.ualberta.ca) has quit (Ping timeout: 258 seconds)
2013-03-20 12:46:23	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-20 12:48:32	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 252 seconds)
2013-03-20 12:48:51	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-20 12:48:56	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-20 12:50:36	<--	hircus (~hircus@112.109.20.150) has quit (Ping timeout: 264 seconds)
2013-03-20 12:50:43	-->	osxorgate (~osxorgate@94.142.213.250) has joined #haskell
2013-03-20 12:50:46	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Ping timeout: 258 seconds)
2013-03-20 12:51:03	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-20 12:52:41	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-20 12:52:44	-->	Thra11_ (~thrall@146.90.107.154) has joined #haskell
2013-03-20 12:53:30	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-20 12:53:41	Hermit	I'm trying to compile wxc, it's failing and I have no idea what's going on whatsoever: http://dpaste.com/1028858/  Just WTF is the error?
2013-03-20 12:54:47	<--	whathelle (7a946189@gateway/web/freenode/ip.122.148.97.137) has quit (Quit: Page closed)
2013-03-20 12:54:49	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-20 12:54:56	<--	Peaker (~Peaker@46.19.80.70) has quit (Ping timeout: 255 seconds)
2013-03-20 12:55:00	-->	dawe (~dawe@p5090F923.dip.t-dialin.net) has joined #haskell
2013-03-20 12:55:45	<--	Thra11 (~thrall@87.115.27.231) has quit (Ping timeout: 252 seconds)
2013-03-20 12:56:12	gienah	Hermit: I don't see the error either, please try --verbose=3
2013-03-20 12:56:15	Botje	Hermit: do you have a wx-config binary?
2013-03-20 12:56:35	-->	Firou (~Thunderv5@75.217-227-89.dsl.completel.net) has joined #haskell
2013-03-20 12:57:23	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-20 12:58:34	-->	henrylaxen (~user@187.140.147.7) has joined #haskell
2013-03-20 12:59:16	Hermit	gienah: hang on, seems that the problem is as Botje suggested
2013-03-20 12:59:46	-->	sonda (~sonda@adsl-ull-64-181.50-151.net24.it) has joined #haskell
2013-03-20 12:59:54	-->	amyers (~quassel@38.102.20.61) has joined #haskell
2013-03-20 13:00:17	Hermit	ok, it keeps failing, but at least it's for a version incompatibility now
2013-03-20 13:00:18	<--	mushi (d31eff56@gateway/web/freenode/ip.211.30.255.86) has quit (Quit: Page closed)
2013-03-20 13:00:21	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-20 13:00:48	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 13:00:57	Botje	\o/
2013-03-20 13:00:59	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-20 13:01:11	Botje	well, kind of :]
2013-03-20 13:01:44	 *	hackagebot grid 4.1 - Tools for working with regular grids (graphs, lattices).  http://hackage.haskell.org/package/grid-4.1 (AmyDeBuitleir)
2013-03-20 13:01:50	<--	Entroacceptor (~mad@unserver.de) has left #haskell
2013-03-20 13:02:07	<--	dpratt71 (~dpratt71@pool-72-65-105-181.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-03-20 13:02:23	<--	rsuniev123 (~textual@212.140.174.166) has quit (Quit: Computer has gone to sleep.)
2013-03-20 13:03:15	-->	lemao (~lemao@187.67.222.39) has joined #haskell
2013-03-20 13:03:29	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-20 13:03:50	-->	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has joined #haskell
2013-03-20 13:04:06	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-20 13:04:57	<--	kaoskorobase (~sk@92.56.206.219) has quit (Quit: kaoskorobase)
2013-03-20 13:05:27	-->	kaoskorobase (~sk@92.56.206.219) has joined #haskell
2013-03-20 13:06:29	-->	jimstutt (~jim@host-92-19-60-254.as13285.net) has joined #haskell
2013-03-20 13:06:35	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-03-20 13:08:17	<--	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-20 13:08:33	-->	rsuniev123 (~textual@212.140.174.166) has joined #haskell
2013-03-20 13:08:44	<--	zeus (~quassel@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 245 seconds)
2013-03-20 13:10:00	<--	rsuniev123 (~textual@212.140.174.166) has quit (Client Quit)
2013-03-20 13:10:48	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 13:10:54	<--	sipa (~pw@vps7135.xlshosting.net) has quit (Changing host)
2013-03-20 13:10:54	-->	sipa (~pw@unaffiliated/sipa1024) has joined #haskell
2013-03-20 13:11:05	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-03-20 13:11:14	-->	rsuniev123 (~textual@212.140.174.166) has joined #haskell
2013-03-20 13:11:45	 *	hackagebot som 3.1 - Self-Organising Maps  http://hackage.haskell.org/package/som-3.1 (AmyDeBuitleir)
2013-03-20 13:11:52	-->	jeffreybaird (~jeffreyba@38.104.188.26) has joined #haskell
2013-03-20 13:12:06	<--	zz_nh2 (~nh2@2001:41d0:1:c648::1) has quit (Ping timeout: 264 seconds)
2013-03-20 13:12:44	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-20 13:13:34	-->	zz_nh2 (~nh2@2001:41d0:1:c648::1) has joined #haskell
2013-03-20 13:14:23	<--	takuan (~takuan@d8D86F9AB.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-03-20 13:14:47	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-20 13:15:31	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-20 13:16:54	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-20 13:19:49	<--	spion (~spion@unaffiliated/spion) has quit (Read error: Connection reset by peer)
2013-03-20 13:19:54	-->	cmsmcq (~cmsmcq@pool-108-28-108-98.washdc.fios.verizon.net) has joined #haskell
2013-03-20 13:20:08	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 245 seconds)
2013-03-20 13:20:12	-->	cvic (~cvic@86.125.62.125) has joined #haskell
2013-03-20 13:20:14	<--	cvic (~cvic@86.125.62.125) has quit (Client Quit)
2013-03-20 13:20:27	<--	Firou (~Thunderv5@75.217-227-89.dsl.completel.net) has quit (Read error: Connection reset by peer)
2013-03-20 13:20:40	<--	Guest64340 (~afarmer@host-247-58.pubnet.pdx.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 13:20:55	-->	cvic (~cvic@86.125.62.125) has joined #haskell
2013-03-20 13:21:36	<--	cvic (~cvic@86.125.62.125) has quit (Client Quit)
2013-03-20 13:21:56	-->	cvic (~cvic@86.125.62.125) has joined #haskell
2013-03-20 13:22:10	<--	cvic (~cvic@86.125.62.125) has quit (Client Quit)
2013-03-20 13:22:20	-->	MrFenix_ (~JanB@p57A1AE74.dip.t-dialin.net) has joined #haskell
2013-03-20 13:22:22	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-20 13:23:22	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-20 13:25:31	<--	MrFenix (~JanB@p57A19D47.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-20 13:26:33	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-20 13:26:40	-->	dpratt71 (~dpratt71@207.182.200.34) has joined #haskell
2013-03-20 13:28:16	-->	Urchin[emacs] (~user@unaffiliated/urchin) has joined #haskell
2013-03-20 13:28:21	<--	jeffreybaird (~jeffreyba@38.104.188.26) has left #haskell
2013-03-20 13:28:37	-->	k00mi (~koomi@dslb-188-099-045-172.pools.arcor-ip.net) has joined #haskell
2013-03-20 13:30:38	-->	Taneb (~nathan@host-84-13-68-168.opaltelecom.net) has joined #haskell
2013-03-20 13:30:46	<--	gnuwilliam (~william@177.134.103.177) has left #haskell
2013-03-20 13:31:07	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 13:31:26	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 252 seconds)
2013-03-20 13:31:38	<--	yukihr (~yukihr@i60-47-23-21.s04.a013.ap.plala.or.jp) has quit (Remote host closed the connection)
2013-03-20 13:32:41	-->	hallski_ (~hallski@80.239.169.202) has joined #haskell
2013-03-20 13:32:46	<--	hallski (~hallski@80.239.169.202) has quit (Read error: Operation timed out)
2013-03-20 13:33:28	dcoutts	dmwit: imho, nothing should depend on utf8-string, that package should never be needed
2013-03-20 13:33:41	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Client Quit)
2013-03-20 13:33:42	dcoutts	dmwit: it's a symptom of using the wrong types
2013-03-20 13:34:02	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-20 13:34:06	Taneb	And yet http://packdeps.haskellers.com/reverse/utf8-string
2013-03-20 13:34:20	dcoutts	I know, it's terrible
2013-03-20 13:36:24	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 276 seconds)
2013-03-20 13:37:15	-->	philipdexter (~user@cpe-67-246-132-238.stny.res.rr.com) has joined #haskell
2013-03-20 13:38:02	dmwit	Yes, if there's a next step it's to use bytestring more.
2013-03-20 13:38:16	dmwit	But I wanted to fix the bug first and make the code nice second. =)
2013-03-20 13:38:36	-->	amatsu_ (~amatsu@125.63.54.161) has joined #haskell
2013-03-20 13:38:37	dcoutts	what bug?
2013-03-20 13:38:59	dmwit	gtk's homebrew UTF8 conversion only handled 1-, 2-, and 3-byte characters.
2013-03-20 13:39:11	dmwit	See also Trac #1284
2013-03-20 13:39:17	-->	adlan (~adlan@115.134.180.140) has joined #haskell
2013-03-20 13:39:35	dmwit	s/gtk/gtk2hs/
2013-03-20 13:39:39	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 276 seconds)
2013-03-20 13:39:56	dcoutts	dmwit: there are only 1,2 and 3 byte chars (iirc)
2013-03-20 13:40:04	dmwit	No, there are 4-byte characters.
2013-03-20 13:40:07	<--	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has quit (Ping timeout: 264 seconds)
2013-03-20 13:40:41	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-20 13:40:41	dmwit	Three bytes covers the basic multilingual plane, but you need four bytes for the other planes.
2013-03-20 13:40:52	dcoutts	ah, it's 5 & 6 that are overlong
2013-03-20 13:41:02	dcoutts	and most of the 4-byte code space is also overlong
2013-03-20 13:41:10	dmwit	right
2013-03-20 13:41:39	dmwit	gotta run, but I'll be back on IRC in half an hour or so if there's more to discuss
2013-03-20 13:42:03	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-20 13:42:09	dcoutts	dmwit: well I think I copied that code from somewhere else in the first place, I'd just copy it again rather than adding a dep
2013-03-20 13:42:39	-->	qzr (~qzr@mpp-cp2-natpool-4-250.ethz.ch) has joined #haskell
2013-03-20 13:42:48	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Ping timeout: 264 seconds)
2013-03-20 13:43:35	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-20 13:43:55	<--	amatsu (~amatsumag@125.63.54.161) has quit (Quit: leaving)
2013-03-20 13:44:51	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Quit: none 0.3.9.2)
2013-03-20 13:46:42	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-20 13:46:56	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2013-03-20 13:47:28	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-20 13:49:10	<--	dpratt71 (~dpratt71@207.182.200.34) has quit (Quit: Leaving)
2013-03-20 13:49:22	Jonno_FTW	@src print
2013-03-20 13:49:22	lambdabot	print x = putStrLn (show x)
2013-03-20 13:50:49	<--	nexx (~SPS-User@dslb-188-108-189-032.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-03-20 13:51:38	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Quit: leaving)
2013-03-20 13:52:23	-->	igstan (~igstan@109.99.235.103) has joined #haskell
2013-03-20 13:52:24	<--	squidz (~albert@141.84.69.76) has quit (Ping timeout: 252 seconds)
2013-03-20 13:52:53	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Quit: WeeChat 0.3.8)
2013-03-20 13:53:38	<--	jonaias (~jonaias@177.102.80.97) has quit (Ping timeout: 258 seconds)
2013-03-20 13:54:11	<--	rafsoaken (~rafsoaken@91-119-236-227.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-03-20 13:54:14	-->	kevinqcs (~turing@223.65.141.217) has joined #haskell
2013-03-20 13:55:01	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 13:55:08	--	Igloo_ is now known as Igloo
2013-03-20 13:56:15	-->	yukihr (~yukihr@i60-47-23-21.s04.a013.ap.plala.or.jp) has joined #haskell
2013-03-20 13:57:22	<--	henrylaxen (~user@187.140.147.7) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 13:57:31	--	amatsu_ is now known as amatsu
2013-03-20 13:59:51	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-20 14:00:02	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 14:01:24	dmwit	dcoutts: Yeah, I was wondering what people would think of adding a dependency.
2013-03-20 14:01:35	dmwit	But really, shying away from dependencies seems like a losing goal long-term.
2013-03-20 14:01:47	dmwit	Code reuse is Good!
2013-03-20 14:01:53	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-20 14:02:07	dmwit	Fixing a bug, then spending three hours trying to figure out why your fix isn't being used because somebody used copy-and-paste instead of code reuse is Bad!
2013-03-20 14:02:09	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-20 14:02:27	dcoutts	dmwit: I think there's a particular issue with cairo depending on glib. It used to but we dropped the dep because some people could build cairo but not glib on their platforms (clibs)
2013-03-20 14:02:42	dcoutts	dmwit: oh in general I agree
2013-03-20 14:02:49	dmwit	Sure. And cairo still doesn't depend on glib.
2013-03-20 14:03:14	dcoutts	dmwit: I just have a semi-rational dislike of the utf8-string package
2013-03-20 14:03:29	-->	rafsoaken (~rafsoaken@chello084112059093.11.11.vie.surfer.at) has joined #haskell
2013-03-20 14:03:41	dmwit	I'm happy to depend on a different package. It was just the first hit on Hayoo with the right type and a name thout sounded about right. =P
2013-03-20 14:03:51	dmwit	s/thout/that/
2013-03-20 14:04:03	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-20 14:04:07	dcoutts	as others have pointed out, the type is wrong
2013-03-20 14:04:20	dcoutts	it's only used for marshalling to CString
2013-03-20 14:04:40	 *	dmwit nods agreeably
2013-03-20 14:04:51	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-20 14:04:52	dmwit	What do you suggest?
2013-03-20 14:05:22	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-20 14:05:39	dcoutts	ideally we'd be using Text and then we'd just use the appropriate function to convert to an external rep in utf8
2013-03-20 14:05:55	<--	spion (~spion@unaffiliated/spion) has quit (Read error: Connection reset by peer)
2013-03-20 14:06:01	<--	timemage (~user@pool-70-16-208-33.man.east.myfairpoint.net) has quit (Quit: .)
2013-03-20 14:06:08	dcoutts	if you just want to fix the bug, then I'd suggest just fixing the bug
2013-03-20 14:06:16	dmwit	bug is just fixed
2013-03-20 14:06:27	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-20 14:06:28	dmwit	Switching to Text is a pretty seriously breaking change.
2013-03-20 14:06:36	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-03-20 14:06:38	<--	jimstutt (~jim@host-92-19-60-254.as13285.net) has left #haskell ("Killed buffer")
2013-03-20 14:06:39	dcoutts	aye
2013-03-20 14:06:47	 *	hackagebot pontarius-xmpp 0.2.0.1 - An incomplete implementation of RFC 6120 (XMPP: Core)  http://hackage.haskell.org/package/pontarius-xmpp-0.2.0.1 (JonKristensen)
2013-03-20 14:06:52	Jonno_FTW	how would I make sure the cmd line args are my program are in a specific format, ie string float float ?
2013-03-20 14:07:00	--	pepijndevos is now known as pepijn_away
2013-03-20 14:07:00	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 14:07:09	dmwit	Jonno_FTW: parse them
2013-03-20 14:07:14	-->	jianmeng (~mengjian@123.138.24.91) has joined #haskell
2013-03-20 14:07:18	Jonno_FTW	and run if it is, otherwise show a usage message
2013-03-20 14:07:20	dmwit	There's half a dozen packages on Hackage for munging the command line arguments.
2013-03-20 14:07:34	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-20 14:07:41	dmwit	cmdargs, getopt, that one that uses applicative parsing...
2013-03-20 14:07:42	<--	MnO2 (~MnO2@nat/yahoo/x-tdqgwfkkhjwciqsa) has quit (Quit: MnO2)
2013-03-20 14:07:51	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-20 14:08:08	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 14:08:18	supki	optparse-applicative
2013-03-20 14:08:21	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-20 14:08:56	fizbin	Doesn't cmdtheline also use applicative parsing?
2013-03-20 14:08:57	<--	kaoskorobase (~sk@92.56.206.219) has quit (Quit: kaoskorobase)
2013-03-20 14:09:22	fizbin	http://hackage.haskell.org/package/cmdtheline
2013-03-20 14:09:58	Jonno_FTW	which one would you recommend for what I need?
2013-03-20 14:10:05	Jonno_FTW	and the tutorial for cmdtheline is 404
2013-03-20 14:10:09	-->	cognominal (~cognomina@37.161.159.132) has joined #haskell
2013-03-20 14:11:12	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 14:11:47	 *	hackagebot wai-routes 0.2.2 - Typesafe URLs for Wai applications.  http://hackage.haskell.org/package/wai-routes-0.2.2 (AnupamJain)
2013-03-20 14:12:02	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 14:13:06	twomashi	Any way to get all functions with a certain type using template haskell?
2013-03-20 14:14:24	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 14:14:44	supki	Jonno_FTW: any of them? in optparse-applicative you can provide custom parser for option if you really want to be hardcore
2013-03-20 14:14:48	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-20 14:14:50	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-03-20 14:15:06	Jonno_FTW	I want to be simple, I haven't written haskell for a while
2013-03-20 14:15:14	dmwit	Hell, even "none of them" is reasonable.
2013-03-20 14:15:25	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-20 14:15:41	Jonno_FTW	yeah I was thinking of that
2013-03-20 14:15:59	dmwit	args <- getArgs; case args of [x_,y_,z_] -> let x = read x_; y = read y_; z = read z_ in ...
2013-03-20 14:16:03	Jonno_FTW	but them I'm looking up arguments and checking their type like a sucker
2013-03-20 14:16:57	-->	zhulikas (~Kostas@213.159.34.100) has joined #haskell
2013-03-20 14:18:00	<--	kevinqcs (~turing@223.65.141.217) has quit (Ping timeout: 276 seconds)
2013-03-20 14:18:47	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-20 14:18:55	--	pepijn_away is now known as pepijndevos
2013-03-20 14:20:01	<--	shurikas (~Kostas@195.181.64.50) has quit (Read error: Operation timed out)
2013-03-20 14:20:41	saml	i offer haskell tutoring. $50/hr
2013-03-20 14:20:57	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-20 14:21:00	-->	bitonic (~user@dyn1217-66.wlan.ic.ac.uk) has joined #haskell
2013-03-20 14:21:01	Jonno_FTW	is it minimum 1/hr?
2013-03-20 14:21:08	Jonno_FTW	I offer java tutoring at $30/hr
2013-03-20 14:21:22	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-20 14:21:52	saml	java is no use. no one uses java anymore
2013-03-20 14:22:10	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-20 14:22:10	Jonno_FTW	not if you're a first year at uni
2013-03-20 14:22:11	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-03-20 14:22:28	ab9rf	heh
2013-03-20 14:22:29	-->	donut_ (6b00c37c@gateway/web/freenode/ip.107.0.195.124) has joined #haskell
2013-03-20 14:22:44	ab9rf	saml: except on android :)
2013-03-20 14:23:46	liyang	When you upgrade Java, Oracle displays a banner along the lines of "9 billion devices run Java". I consider that a threat.
2013-03-20 14:24:06	ab9rf	liyang: especially since oracle is working really hard to reduce that number
2013-03-20 14:24:13	saml	i can't define a data constructor on ghci
2013-03-20 14:24:31	saml	actually, i can. lambdabot can't
2013-03-20 14:24:42	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-20 14:24:44	hpaste	Jonno_FTW pasted “opthorrors” at http://hpaste.org/84371
2013-03-20 14:24:46	ab9rf	poor lambdabot
2013-03-20 14:24:50	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-03-20 14:24:58	Jonno_FTW	that's what I have now but it doesn't work, I really have no idea
2013-03-20 14:25:24	tlaine	our uni starts first year CS with java
2013-03-20 14:25:31	-->	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has joined #haskell
2013-03-20 14:25:46	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 14:25:58	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-20 14:26:15	-->	wires (~smuxi@ip152-92-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-03-20 14:26:21	-->	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has joined #haskell
2013-03-20 14:26:27	<--	Rarrikins_n_o (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 276 seconds)
2013-03-20 14:26:34	-->	Rarrikins_n_o_x (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 14:27:30	liyang	tlaine: sorry to hear that.
2013-03-20 14:27:40	ab9rf	it could be worse
2013-03-20 14:27:46	ab9rf	it could be C++
2013-03-20 14:27:55	Jonno_FTW	my uni teaches c++ in 2nd year
2013-03-20 14:28:17	Jonno_FTW	cp1 is java, cp2 is c++, cp3 is c++/java plus jni
2013-03-20 14:28:20	<--	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-20 14:28:40	ab9rf	Jonno_FTW: are they teaching computer science, or training junior codemonkeys?
2013-03-20 14:28:57	liyang	ab9rf: what's the difference?!
2013-03-20 14:28:58	Jonno_FTW	cs in cp2/3
2013-03-20 14:29:20	Jonno_FTW	of course there's a gajillion other cs topics
2013-03-20 14:29:32	tlaine	:D
2013-03-20 14:29:49	ab9rf	liyang: one of them is about the science of computing, the other is about spewing forth massive amounts of hopefully nt entirely useless code.
2013-03-20 14:29:51	tlaine	ok, there's a month of python first
2013-03-20 14:29:53	-->	feliperosa (~felipe@2001:12f0:601:a921:f5e4:826:a26b:6738) has joined #haskell
2013-03-20 14:29:57	liyang	ab9rf: I'm trolling.
2013-03-20 14:30:07	<--	rafsoaken (~rafsoaken@chello084112059093.11.11.vie.surfer.at) has quit (Quit: rafsoaken)
2013-03-20 14:30:25	ab9rf	liyang: a friend of mine is a professor of computer science at a small school in virginia, we have this conversation fairly frequently
2013-03-20 14:30:38	-->	rafsoaken (~rafsoaken@chello084112059093.11.11.vie.surfer.at) has joined #haskell
2013-03-20 14:30:39	Jonno_FTW	any help with my paste?
2013-03-20 14:30:40	Botje	ours only teaches scheme and c++, everything else is learned on the job
2013-03-20 14:30:43	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-03-20 14:30:48	saml	Jonno_FTW, what is it doing?
2013-03-20 14:30:52	-->	Thra11 (~thrall@87.115.191.75) has joined #haskell
2013-03-20 14:30:55	Jonno_FTW	not compiling
2013-03-20 14:30:57	ab9rf	liyang: of course, i'm a systems engineer by trade, and bitch constantly about the state of all things related to computer technology
2013-03-20 14:30:59	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-20 14:31:02	saml	what's the error?
2013-03-20 14:31:35	Jonno_FTW	indentation error,
2013-03-20 14:31:40	saml	too many let's
2013-03-20 14:31:47	liyang	ab9rf: I'm in both camps. I think the SW engineering / industry camp is wrong though.
2013-03-20 14:31:47	Jonno_FTW	how do I format it?
2013-03-20 14:31:48	ab9rf	yeah the let syntax is wrong
2013-03-20 14:31:49	tlaine	tabs
2013-03-20 14:31:51	saml	> let a = 1; b = 2 in a + b
2013-03-20 14:31:53	lambdabot	  3
2013-03-20 14:32:06	ab9rf	liyang: there's nothing wrong with training people to be code monkeys, but that's not computer science, it's vocational training.
2013-03-20 14:32:07	saml	> let a = 1; let b = 1 in a + b
2013-03-20 14:32:09	lambdabot	  <hint>:1:30: parse error (possibly incorrect indentation)
2013-03-20 14:32:19	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Ping timeout: 264 seconds)
2013-03-20 14:32:31	saml	don't write one liners
2013-03-20 14:32:33	saml	spread things out
2013-03-20 14:32:45	-->	sleepynate (~sleepynat@108.204.29.249) has joined #haskell
2013-03-20 14:32:46	ab9rf	liyang: calling it 'computer science' or even 'computer engineering' is abusive to the language
2013-03-20 14:32:51	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-20 14:33:01	ab9rf	whitespace is cheap, use it
2013-03-20 14:33:05	saml	i call it 'computer programming'
2013-03-20 14:33:08	wires	ab9rf, liyang: shit like that is going on everywhere though. there seems to be this tendency that everyone should be able to go to university and if you go to a engineering school, this is lame
2013-03-20 14:33:15	liyang	ab9rf: I split it down the IT / SW engineering / computer science lines.
2013-03-20 14:33:25	saml	or 'web design'
2013-03-20 14:33:28	<--	Thra11_ (~thrall@146.90.107.154) has quit (Ping timeout: 252 seconds)
2013-03-20 14:33:38	-->	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has joined #haskell
2013-03-20 14:33:38	<--	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has quit (Changing host)
2013-03-20 14:33:38	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-20 14:33:40	saml	wanna get Bachelor's in Web Design Technology?
2013-03-20 14:33:41	ab9rf	saml: web design ought to be taught in the marketing or creative arts departments, if you ask me
2013-03-20 14:33:50	ab9rf	it has nearly nothing to do with computer science
2013-03-20 14:33:52	wires	saml: lol
2013-03-20 14:33:59	saml	no bro, node.js and mongodb all the way
2013-03-20 14:34:10	-->	Thra11_ (~thrall@46.208.29.120) has joined #haskell
2013-03-20 14:34:51	ab9rf	saml: you're making me twitch now
2013-03-20 14:35:19	<--	Thra11 (~thrall@87.115.191.75) has quit (Ping timeout: 240 seconds)
2013-03-20 14:35:28	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 256 seconds)
2013-03-20 14:35:28	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-20 14:35:39	Jonno_FTW	saml: I spread it out and now i get another error, I'll paste it
2013-03-20 14:35:51	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 14:35:56	<--	spion (~spion@unaffiliated/spion) has quit (Read error: Connection reset by peer)
2013-03-20 14:36:06	saml	maybe paste compilable test case
2013-03-20 14:36:08	<--	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has quit (Quit: hello)
2013-03-20 14:36:20	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 252 seconds)
2013-03-20 14:36:21	ab9rf	liyang: i was talking to someone the other day getting a bachelor's in some IT/IS field who was taking what amounted to a class in Cisco.
2013-03-20 14:36:49	hpaste	Jonno_FTW pasted “opts” at http://hpaste.org/84372
2013-03-20 14:37:13	ab9rf	indentation is wrng
2013-03-20 14:37:16	saml	yah
2013-03-20 14:37:20	ab9rf	you backdented too far out
2013-03-20 14:37:39	liyang	ab9rf: I'd say that's fair enough for IT/IS.
2013-03-20 14:37:43	ab9rf	basically your let block is empty
2013-03-20 14:37:54	`nand`	> let in 3
2013-03-20 14:37:56	lambdabot	  3
2013-03-20 14:37:57	ab9rf	liyang: it's fine if it's a vocational program
2013-03-20 14:38:10	-->	kevinqcs (~turing@223.65.141.217) has joined #haskell
2013-03-20 14:38:16	liyang	IT/IS *is* vocational in my books...
2013-03-20 14:38:20	<--	cmsmcq (~cmsmcq@pool-108-28-108-98.washdc.fios.verizon.net) has quit (Quit: I'm so ... sleeeepy.)
2013-03-20 14:38:25	saml	https://gist.github.com/saml/5204689  do like this Jonno_FTW
2013-03-20 14:38:25	Jonno_FTW	how should it be formatted then?
2013-03-20 14:38:30	liyang	(as is SW engineering,, for the most part.)
2013-03-20 14:38:30	Jonno_FTW	ahk
2013-03-20 14:38:32	saml	that's $10
2013-03-20 14:38:36	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 252 seconds)
2013-03-20 14:38:39	ab9rf	liyang: i don't like that we give bachelor's degrees in vocational fields
2013-03-20 14:38:47	<--	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has quit (Remote host closed the connection)
2013-03-20 14:39:01	saml	http://en.wikibooks.org/wiki/Haskell/Indentation
2013-03-20 14:39:02	ab9rf	liyang: especially when the classes are so moronic
2013-03-20 14:39:04	liyang	ab9rf: well that's a separate issue...
2013-03-20 14:39:11	saml	what are we talking about
2013-03-20 14:39:30	saml	academia is changing
2013-03-20 14:39:30	<--	charliesome (~textual@124-168-111-211.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-20 14:39:40	Jonno_FTW	I'm only and honours students, I don't have $10 :(
2013-03-20 14:39:44	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 14:39:50	ab9rf	saml: the arrogation of higher education by business so they no longer have to pay to train employees
2013-03-20 14:39:55	`nand`	we're talking about the invasion of a perfectly fine field by enterprise programmers
2013-03-20 14:40:12	<--	sepp2k (~sexy@g224103098.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-20 14:40:20	saml	make a school then. and teach the way you like
2013-03-20 14:40:21	liyang	In the UK at least, I feel it was down to Labour deciding that "everyone should go to university", and as a result many vocational colleges got turned into 'universities'.
2013-03-20 14:40:30	`nand`	my school is #haskell
2013-03-20 14:40:32	saml	wanna make a school with me?
2013-03-20 14:40:39	ab9rf	it used to be that you got paid while you were being trained, now you have to put three to five years pay in advance in order to get training
2013-03-20 14:40:44	saml	i want to be a school president and get girls
2013-03-20 14:40:52	ab9rf	saml: i don't think it works that way
2013-03-20 14:40:52	`nand`	monday is Haskell 101 taught by Cale
2013-03-20 14:41:13	`nand`	tuesday is Monads and Their Evil Twins taught by edwardk
2013-03-20 14:41:31	`nand`	oh, “Comonads and Their Evil Twins” ;)
2013-03-20 14:41:44	ab9rf	and even then after you pay your money you don't have any assurance of getting a job
2013-03-20 14:41:57	ab9rf	i thought comonad were the evil twins
2013-03-20 14:42:39	<--	idntfy[work] (~idntfywor@188.64.147.238) has quit (Read error: Connection reset by peer)
2013-03-20 14:43:16	-->	idntfy[work] (~idntfywor@188.64.147.238) has joined #haskell
2013-03-20 14:43:17	labo	saml: maybe if you choose something other than CS. Biology perhaps?
2013-03-20 14:44:16	-->	MrFahrenheit (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-20 14:45:15	<--	kevinqcs (~turing@223.65.141.217) has quit (Ping timeout: 260 seconds)
2013-03-20 14:45:49	saml	i don't like killing frogs
2013-03-20 14:45:55	`nand`	don't worry
2013-03-20 14:46:10	`nand`	frogs have been created with see-through skin
2013-03-20 14:46:21	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-20 14:46:35	-->	`ramses (863ab323@gateway/web/freenode/ip.134.58.179.35) has joined #haskell
2013-03-20 14:46:45	`nand`	I wonder how long until the technology is transferrable to humans
2013-03-20 14:47:00	<--	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 260 seconds)
2013-03-20 14:47:02	Jonno_FTW	saml: I formatted it like you said and still get an error
2013-03-20 14:47:34	saml	Jonno_FTW, use brackets and semicolons . forget about indentation
2013-03-20 14:47:40	-->	cmsmcq (~cmsmcq@pool-108-28-108-98.washdc.fios.verizon.net) has joined #haskell
2013-03-20 14:47:48	-->	seliopou (~seliopou@pool-72-92-229-93.prvdri.fios.verizon.net) has joined #haskell
2013-03-20 14:47:48	<--	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-03-20 14:47:53	saml	let { a = b; c = d } in  { .. }
2013-03-20 14:48:07	saml	> let {a =1; b=2} in {a+b}
2013-03-20 14:48:08	lambdabot	  <hint>:1:20: parse error on input `{'
2013-03-20 14:48:15	saml	nevermind
2013-03-20 14:48:19	saml	just use java
2013-03-20 14:48:20	Jonno_FTW	:/
2013-03-20 14:48:28	Jonno_FTW	but this is the last thing I need to do
2013-03-20 14:48:32	saml	> let {a =1; b=2} in a+b
2013-03-20 14:48:34	lambdabot	  3
2013-03-20 14:48:59	<--	cognominal (~cognomina@37.161.159.132) has quit (Ping timeout: 252 seconds)
2013-03-20 14:49:04	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 256 seconds)
2013-03-20 14:50:03	saml	 rules <- fmap B.words <$> B.lines <$> B.readFile fname      mapM_ putStrLn $ showRules $ filterRules gmax gmin smax smin $ apriori rules 2
2013-03-20 14:50:09	saml	these are not haskell
2013-03-20 14:50:22	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 258 seconds)
2013-03-20 14:50:23	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-20 14:51:10	Jonno_FTW	then what are they?
2013-03-20 14:51:42	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 14:52:06	-->	win2mac (~marek@80.90.135.76) has joined #haskell
2013-03-20 14:52:36	<--	sanemat (~sanemat@7c2947bf.i-revonet.jp) has quit (Remote host closed the connection)
2013-03-20 14:53:12	<--	feliperosa (~felipe@2001:12f0:601:a921:f5e4:826:a26b:6738) has quit (Quit: Leaving)
2013-03-20 14:53:51	win2mac	nazdar
2013-03-20 14:54:02	-->	squidz (~albert@tmo-110-217.customers.d1-online.com) has joined #haskell
2013-03-20 14:54:10	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-20 14:55:38	-->	hkBst (~marijn@79.170.210.172) has joined #haskell
2013-03-20 14:55:38	<--	hkBst (~marijn@79.170.210.172) has quit (Changing host)
2013-03-20 14:55:38	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-20 14:55:56	-->	cognominal (~cognomina@37.161.159.132) has joined #haskell
2013-03-20 14:56:20	-->	gnuwilliam (~william@177.157.160.52) has joined #haskell
2013-03-20 14:56:28	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-20 14:56:50	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-20 14:57:19	<--	osxorgate (~osxorgate@94.142.213.250) has quit (Read error: Connection reset by peer)
2013-03-20 14:57:46	-->	osxorgate (~osxorgate@94.142.213.250) has joined #haskell
2013-03-20 14:58:28	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-20 14:59:00	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 264 seconds)
2013-03-20 14:59:09	<--	yukihr (~yukihr@i60-47-23-21.s04.a013.ap.plala.or.jp) has quit (Remote host closed the connection)
2013-03-20 14:59:47	-->	yc4891 (~andrew@121.35.223.180) has joined #haskell
2013-03-20 15:00:24	<--	tomprince (~tomprince@socrates.hocat.ca) has quit (Ping timeout: 260 seconds)
2013-03-20 15:00:41	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-20 15:01:00	-->	jeffreybaird (~jeffreyba@38.122.227.186) has joined #haskell
2013-03-20 15:03:59	<--	tanakh (~tanakh@060240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 260 seconds)
2013-03-20 15:04:11	-->	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has joined #haskell
2013-03-20 15:04:25	-->	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-03-20 15:04:39	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-03-20 15:04:39	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-20 15:04:40	ab9rf	ink?
2013-03-20 15:05:26	-->	mechairo` (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-20 15:05:32	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-20 15:05:36	-->	anRch (~markmilli@ip-64-134-242-69.public.wayport.net) has joined #haskell
2013-03-20 15:06:07	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-20 15:06:14	-->	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has joined #haskell
2013-03-20 15:06:17	<--	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has quit (Client Quit)
2013-03-20 15:06:39	-->	tanakh (~tanakh@060240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-20 15:07:19	-->	Thra11 (~thrall@46.208.118.220) has joined #haskell
2013-03-20 15:07:19	-->	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-20 15:07:36	-->	MroiZo (~quassel@79.138.249.40.bredband.3.dk) has joined #haskell
2013-03-20 15:07:48	<--	Thra11_ (~thrall@46.208.29.120) has quit (Ping timeout: 240 seconds)
2013-03-20 15:07:55	-->	fxr (~user@92.45.166.3) has joined #haskell
2013-03-20 15:08:57	<--	mechairo` (~mechairoi@www20325ue.sakura.ne.jp) has quit (Client Quit)
2013-03-20 15:09:13	Jonno_FTW	I finally got it working
2013-03-20 15:09:27	ab9rf	that'll be $13.95
2013-03-20 15:09:37	Jonno_FTW	can I get fries with taht?
2013-03-20 15:09:55	-->	mechairo` (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-20 15:10:12	<--	yc4891 (~andrew@121.35.223.180) has quit (Ping timeout: 272 seconds)
2013-03-20 15:10:18	ab9rf	yes, but you have to pay shipping on them
2013-03-20 15:10:31	Jonno_FTW	how much to post to australia?
2013-03-20 15:10:54	-->	soulofpeace (~soulofpea@cm41.gamma165.maxonline.com.sg) has joined #haskell
2013-03-20 15:11:39	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-20 15:11:40	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 15:11:45	<--	benzap (~bacon1989@S010600222d6b9c98.tb.shawcable.net) has quit (Ping timeout: 248 seconds)
2013-03-20 15:12:02	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-20 15:13:50	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 15:14:52	-->	jsdhfdf (811f4bbb@gateway/web/freenode/ip.129.31.75.187) has joined #haskell
2013-03-20 15:15:12	--	cedric_ is now known as chili-con-carne
2013-03-20 15:15:20	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 15:16:09	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-03-20 15:16:27	-->	racycle (~racycle@75-25-129-128.lightspeed.sjcpca.sbcglobal.net) has joined #haskell
2013-03-20 15:16:39	<--	cognominal (~cognomina@37.161.159.132) has quit (Ping timeout: 245 seconds)
2013-03-20 15:16:56	-->	ziasjdkjasd (~Thunderbi@dyn1075-187.hor.ic.ac.uk) has joined #haskell
2013-03-20 15:16:57	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-20 15:17:16	<--	soulofpeace (~soulofpea@cm41.gamma165.maxonline.com.sg) has quit (Ping timeout: 252 seconds)
2013-03-20 15:17:24	-->	u_ (~phillip@adsl-75-57-178-143.dsl.emhril.sbcglobal.net) has joined #haskell
2013-03-20 15:17:37	no-n	they'd better be curried
2013-03-20 15:17:41	-->	joelb (~textual@c-67-180-87-226.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 15:18:34	<--	fxr (~user@92.45.166.3) has quit (Read error: Connection reset by peer)
2013-03-20 15:18:44	<--	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-03-20 15:18:45	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-20 15:19:02	-->	paintcan (~user@66.199.39.230) has joined #haskell
2013-03-20 15:19:06	<--	Thra11 (~thrall@46.208.118.220) has quit (Ping timeout: 256 seconds)
2013-03-20 15:19:39	-->	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has joined #haskell
2013-03-20 15:20:08	<--	gnuwilliam (~william@177.157.160.52) has left #haskell
2013-03-20 15:20:15	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Ping timeout: 260 seconds)
2013-03-20 15:21:18	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-20 15:22:10	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 15:22:11	<--	win2mac (~marek@80.90.135.76) has quit (Read error: Connection reset by peer)
2013-03-20 15:22:29	-->	kith_ (~kith@unaffiliated/kith) has joined #haskell
2013-03-20 15:23:01	<--	ziasjdkjasd (~Thunderbi@dyn1075-187.hor.ic.ac.uk) has quit (Quit: ziasjdkjasd)
2013-03-20 15:23:31	-->	cognominal (~cognomina@37.161.250.93) has joined #haskell
2013-03-20 15:23:32	<--	kith (~kith@unaffiliated/kith) has quit (Read error: Operation timed out)
2013-03-20 15:23:56	ab9rf	curried curry
2013-03-20 15:24:22	<--	squidz (~albert@tmo-110-217.customers.d1-online.com) has quit (Read error: Connection reset by peer)
2013-03-20 15:24:52	-->	bitonic` (~user@dyn1217-66.wlan.ic.ac.uk) has joined #haskell
2013-03-20 15:25:15	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-20 15:25:19	<--	bitonic (~user@dyn1217-66.wlan.ic.ac.uk) has quit (Read error: Connection reset by peer)
2013-03-20 15:25:19	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-03-20 15:25:23	<--	dkasak (~dkasak@dh207-110-159.xnet.hr) has quit (Read error: Connection reset by peer)
2013-03-20 15:25:28	<--	jsdhfdf (811f4bbb@gateway/web/freenode/ip.129.31.75.187) has quit (Quit: Page closed)
2013-03-20 15:26:10	-->	typoclass (~typoclass@p4FC9259C.dip.t-dialin.net) has joined #haskell
2013-03-20 15:26:48	Jonno_FTW	I'll uncurry them when I unpack them
2013-03-20 15:27:02	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 256 seconds)
2013-03-20 15:27:09	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Read error: Connection reset by peer)
2013-03-20 15:27:47	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-20 15:28:25	<--	rafsoaken (~rafsoaken@chello084112059093.11.11.vie.surfer.at) has quit (Quit: rafsoaken)
2013-03-20 15:28:26	ab9rf	why would you do that?  curried fries sound delicious.
2013-03-20 15:28:51	ab9rf	i wonder how curried popcorn would go
2013-03-20 15:29:36	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Ping timeout: 245 seconds)
2013-03-20 15:29:50	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Ping timeout: 272 seconds)
2013-03-20 15:29:51	-->	k0001 (~k0001@host78.181-1-166.telecom.net.ar) has joined #haskell
2013-03-20 15:30:05	<--	xkcd (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-20 15:30:45	<--	dncr (~dncr@72.185.193.164) has quit (Read error: Operation timed out)
2013-03-20 15:31:06	<--	cognominal (~cognomina@37.161.250.93) has quit (Ping timeout: 272 seconds)
2013-03-20 15:31:26	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-20 15:31:28	-->	timtom (~Thunderbi@2001:630:12:2430:c55b:11b6:d906:e900) has joined #haskell
2013-03-20 15:31:32	-->	dkasak (~dkasak@dh207-110-159.xnet.hr) has joined #haskell
2013-03-20 15:31:56	-->	Thra11 (~thrall@46.208.118.220) has joined #haskell
2013-03-20 15:32:08	<--	ISF_ (~ivan@187.64.222.221) has quit (Ping timeout: 252 seconds)
2013-03-20 15:32:18	Jonno_FTW	eugh
2013-03-20 15:32:26	<--	qzr (~qzr@mpp-cp2-natpool-4-250.ethz.ch) has quit (Remote host closed the connection)
2013-03-20 15:32:56	<--	dkasak (~dkasak@dh207-110-159.xnet.hr) has left #haskell
2013-03-20 15:33:12	-->	dkasak (~dkasak@dh207-110-159.xnet.hr) has joined #haskell
2013-03-20 15:33:32	-->	qzr (~qzr@mpp-cp2-natpool-4-250.ethz.ch) has joined #haskell
2013-03-20 15:33:33	-->	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has joined #haskell
2013-03-20 15:34:00	-->	shurikas (~Kostas@195.181.64.50) has joined #haskell
2013-03-20 15:34:28	-->	kith (~kith@unaffiliated/kith) has joined #haskell
2013-03-20 15:34:43	hpaste	add20 pasted “RealWorldHaskell-chapter5-Exercises2-nest” at http://hpaste.org/84378
2013-03-20 15:35:54	-->	jfischoff (~jfischoff@108-218-105-175.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-20 15:37:06	<--	zhulikas (~Kostas@213.159.34.100) has quit (Ping timeout: 245 seconds)
2013-03-20 15:37:27	-->	QinGW (~yaaic@106.121.125.2) has joined #haskell
2013-03-20 15:38:08	-->	xkcd (~chatzilla@103.5.132.50) has joined #haskell
2013-03-20 15:38:21	<--	kith_ (~kith@unaffiliated/kith) has quit (Ping timeout: 245 seconds)
2013-03-20 15:39:03	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 15:39:25	<--	Tesseraction_z (~Tesseract@unaffiliated/tesseraction) has quit (Remote host closed the connection)
2013-03-20 15:39:46	-->	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has joined #haskell
2013-03-20 15:40:00	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-20 15:40:18	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-20 15:40:53	-->	fgomez (~Fernando@uwsclient-178-114.uws.ualberta.ca) has joined #haskell
2013-03-20 15:41:32	-->	bark_ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has joined #haskell
2013-03-20 15:41:46	<--	powergiant (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 256 seconds)
2013-03-20 15:41:46	-->	roconnor_ (~roconnor@216.154.126.70) has joined #haskell
2013-03-20 15:41:50	-->	argiopeweb (~elliot@99-181-58-141.lightspeed.dybhfl.sbcglobal.net) has joined #haskell
2013-03-20 15:42:02	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-20 15:42:46	<--	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2013-03-20 15:43:39	<--	jang1 (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-20 15:44:03	-->	soulofpeace (~soulofpea@202.156.165.41) has joined #haskell
2013-03-20 15:44:09	<--	joelb (~textual@c-67-180-87-226.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 15:44:32	<--	igstan (~igstan@109.99.235.103) has quit (Quit: igstan)
2013-03-20 15:45:07	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-20 15:45:30	 *	QinGW > ++= *
2013-03-20 15:45:57	-->	alistairclark (~alisaircl@109.174.158.82) has joined #haskell
2013-03-20 15:46:03	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 15:46:11	<--	bark_ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has quit (Remote host closed the connection)
2013-03-20 15:46:12	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-20 15:46:13	Botje	QinGW: did you fall on your keyboard? do you need help?
2013-03-20 15:48:22	QinGW	i just try if haskell has gene of cplusplus
2013-03-20 15:48:30	-->	rafsoaken (~rafsoaken@mail.secretarysearch.at) has joined #haskell
2013-03-20 15:48:53	Kinnison	ab9rf: popcorn seasoned with cumin is nice
2013-03-20 15:49:08	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-20 15:49:15	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-20 15:49:29	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Read error: Connection reset by peer)
2013-03-20 15:49:40	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 15:50:00	<--	tridactyla (~mforney@2605:2700:0:3::4131:491e) has quit (Ping timeout: 264 seconds)
2013-03-20 15:50:12	-->	sh (~sh@89.101.222.213) has joined #haskell
2013-03-20 15:50:25	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-03-20 15:50:36	-->	Ivanych (~n@94.50.136.47) has joined #haskell
2013-03-20 15:50:37	-->	tridactyla (~mforney@2605:2700:0:3::4131:491e) has joined #haskell
2013-03-20 15:51:10	-->	Ankhers (~user@76-10-149-67.dsl.teksavvy.com) has joined #haskell
2013-03-20 15:51:13	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-20 15:51:42	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 15:51:57	<--	jfischoff (~jfischoff@108-218-105-175.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-20 15:52:10	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-20 15:52:19	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: I tend to be neutral about apples)
2013-03-20 15:52:30	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-20 15:52:32	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Ping timeout: 256 seconds)
2013-03-20 15:53:11	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-20 15:53:51	xkcd	Does anybody know of instances where people wrote symbolic algebra software with Haskell
2013-03-20 15:53:53	xkcd	??
2013-03-20 15:54:57	-->	papermachine (~paper@128.211.178.8) has joined #haskell
2013-03-20 15:55:10	xkcd	Comparable http://sympy.org  who have wrote quite a bit of software completely in python
2013-03-20 15:55:18	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-03-20 15:55:25	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-20 15:55:48	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-20 15:56:24	armlesshobo	xkcd: like CAS?
2013-03-20 15:56:28	<--	MroiZo (~quassel@79.138.249.40.bredband.3.dk) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-20 15:56:30	xkcd	yeah
2013-03-20 15:56:35	-->	nexx (~SPS-User@dslb-188-108-189-032.pools.arcor-ip.net) has joined #haskell
2013-03-20 15:56:52	armlesshobo	xkcd: i don't think there is.
2013-03-20 15:56:56	-->	MroiZo (~quassel@79.138.249.40.bredband.3.dk) has joined #haskell
2013-03-20 15:57:08	armlesshobo	xkcd: be the first to write it! :P
2013-03-20 15:57:34	xkcd	Will it be worth it?? According to me yes
2013-03-20 15:57:43	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-20 15:57:45	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-20 15:57:48	xkcd	Yeah I am thinking of it..
2013-03-20 15:57:54	armlesshobo	I think so too.
2013-03-20 15:58:07	<--	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has quit (Ping timeout: 260 seconds)
2013-03-20 15:58:31	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-20 15:58:46	xkcd	But I am just a beginner now I have to learn a lot.
2013-03-20 15:59:07	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 15:59:30	armlesshobo	xkcd: have you considered DoCon?
2013-03-20 15:59:38	armlesshobo	(i'm just perusing google search results)
2013-03-20 15:59:59	xkcd	No I haven't seen it
2013-03-20 16:00:07	xkcd	Do you know what these are
2013-03-20 16:00:08	xkcd	http://hackage.haskell.org/packages/archive/pkg-list.html#cat:algebra
2013-03-20 16:01:28	armlesshobo	looks like algebra packages.
2013-03-20 16:01:28	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-20 16:01:56	xkcd	DoCon seems to be inactive for quite sometime
2013-03-20 16:02:21	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-20 16:02:37	quchen	How do I construct a Maybe value using TH? I thought I could just write 'runQ [| Just 1 |]' and I'd get the corresponding code. However, this results in 'AppE (ConE Data.Maybe.Just) (LitE (IntegerL 1))', which is not valid code, as Data.Maybe.Just is not a Name (which is what ConE expects).
2013-03-20 16:03:22	quchen	Basically I'm looking for a cheap way of getting the TH wrapper of a complicated data type this way.
2013-03-20 16:03:39	quchen	Above I inserted the dummy valud 1, and when I abstract that away then I've got a wrapper function.
2013-03-20 16:03:42	armlesshobo	xkcd: if anything you could just use ghci and the algebra/number package you need to work with
2013-03-20 16:04:13	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 16:04:20	<--	sopvop (~lonokhov@213.170.88.44) has quit (Quit: Leaving.)
2013-03-20 16:04:45	xkcd	Okay  Thanks armlesshobo I look at them.
2013-03-20 16:05:25	armlesshobo	xkcd: np :)
2013-03-20 16:05:35	<--	jianmeng (~mengjian@123.138.24.91) has quit (Quit: Leaving.)
2013-03-20 16:05:35	parcs	quchen: it is definitely valid code
2013-03-20 16:05:59	-->	gustavnils (~textual@31.210.251.9) has joined #haskell
2013-03-20 16:06:03	-->	dolio (~dolio@208.54.36.248) has joined #haskell
2013-03-20 16:06:08	quchen	Well, GHCi says  Couldn't match expected type `Name'
2013-03-20 16:06:08	quchen	                with actual type `a0 -> Maybe a0'
2013-03-20 16:06:09	quchen	    In the first argument of `ConE', namely `Just'
2013-03-20 16:06:28	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 16:06:29	parcs	xkcd: http://vimeo.com/60737699
2013-03-20 16:06:30	quchen	Which is correct, as ConE :: Name -> Expr
2013-03-20 16:06:31	<--	hallski_ (~hallski@80.239.169.202) has quit (Ping timeout: 260 seconds)
2013-03-20 16:06:51	parcs	xkcd: that guy is writing a symbolic algebra thing is haskell too
2013-03-20 16:07:42	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-20 16:07:50	`nand`	xkcd: what a confusing name
2013-03-20 16:08:19	`nand`	misleading, rather
2013-03-20 16:08:28	parcs	quchen: how does GHCi say that?
2013-03-20 16:08:36	<--	QinGW (~yaaic@106.121.125.2) has quit (Ping timeout: 252 seconds)
2013-03-20 16:08:40	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-20 16:09:00	hpaste	Quchen pasted “GHCi's error” at http://hpaste.org/84380
2013-03-20 16:09:19	parcs	quchen: Data.Maybe.Just is how the Name gets pretty printed
2013-03-20 16:09:51	quchen	parcs: I suspected that. But how do I make a "Just" constructor in TH?
2013-03-20 16:10:02	quchen	lookupTypeName?
2013-03-20 16:10:12	xkcd	parcs: Thank you
2013-03-20 16:10:26	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 252 seconds)
2013-03-20 16:10:30	-->	benzap (~bacon1989@S010600222d6b9c98.tb.shawcable.net) has joined #haskell
2013-03-20 16:10:55	parcs	quchen: or mkName, or just use [| Just |]
2013-03-20 16:10:57	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-20 16:11:59	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 16:12:00	-->	F1skr (~F1skr@4205ds8-fb.0.fullrate.dk) has joined #haskell
2013-03-20 16:12:00	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-20 16:12:08	parcs	quchen: you rarely need to use the raw TH ast. just use splices
2013-03-20 16:13:02	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 16:13:14	-->	xkcd_ (~chatzilla@103.5.132.50) has joined #haskell
2013-03-20 16:13:55	quchen	Ah, I see, like do { just <- [| Just |]; return $ AppE just (LitE (IntegerL 1)) }
2013-03-20 16:14:01	quchen	Compiles and seems to do the right thing
2013-03-20 16:14:46	quchen	parcs: Especially the "you rarely need the raw TH stuff" is encouraging :-)
2013-03-20 16:15:01	<--	xkcd (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-20 16:15:09	--	xkcd_ is now known as xkcd
2013-03-20 16:15:13	liyang	> VarE 'Just `AppE` LitE (IntegerL 1)
2013-03-20 16:15:15	lambdabot	  Not in scope: data constructor `VarE'Syntax error on 'Just
2013-03-20 16:15:15	lambdabot	 Perhaps you int...
2013-03-20 16:15:22	quchen	Oh waiiiit. \x -> [| Just x |]
2013-03-20 16:15:26	<--	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-03-20 16:15:27	quchen	That one should be easier
2013-03-20 16:15:32	quchen	Silly me
2013-03-20 16:16:04	liyang	You don't need to [| |] just to get a Just Q Exp.
2013-03-20 16:16:04	quchen	parcs: See, telling me not to use the raw functions already has consequences :-D
2013-03-20 16:16:10	notdan	Hi! Can somebody please tell me why GHC is complaining about overlaping instances for Data.MultiSet.MultiSet in this code: http://hpaste.org/84381
2013-03-20 16:16:14	-->	jang1 (~cmjg@46.233.72.7) has joined #haskell
2013-03-20 16:16:18	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-03-20 16:16:19	quchen	liyang: ?
2013-03-20 16:16:21	parcs	[| $([|Just|]) 1 |]
2013-03-20 16:16:24	notdan	It's strange, because MultiSet is not an instance of Functor
2013-03-20 16:16:26	<--	Testos (User@109.64.163.95) has quit (Quit: Leaving)
2013-03-20 16:16:27	notdan	so it should not overlap
2013-03-20 16:17:02	`ramses	notdan: constraints are checked _after_ instance resolution
2013-03-20 16:17:08	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 16:17:13	quchen	parcs: Isn't $( [| XXX |] ) == XXX?
2013-03-20 16:17:14	`ramses	so the first instances matches all types
2013-03-20 16:17:16	liyang	quchen: [| Just |] returns VarE 'Just
2013-03-20 16:17:25	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-03-20 16:17:37	notdan	Hm, well
2013-03-20 16:17:41	notdan	that sounds strange
2013-03-20 16:17:46	quchen	liyang: I'm not familiar with ' yet
2013-03-20 16:18:08	`ramses	notdan: it's confusing indeed..
2013-03-20 16:18:10	liyang	quchen: it's just a Name.
2013-03-20 16:18:11	-->	Blkt (~user@82.84.159.26) has joined #haskell
2013-03-20 16:18:11	notdan	`ramses: what can I do about it then?
2013-03-20 16:18:15	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 16:18:16	quchen	' = make name of whatever follows?
2013-03-20 16:18:31	quchen	If lower case, then variable, else type?
2013-03-20 16:18:31	`ramses	notdan: newtyping would be the off-the-shelve workaround, I think
2013-03-20 16:18:32	liyang	quchen: yes. And '' is the same for types.
2013-03-20 16:18:52	notdan	`ramses: newtyping?
2013-03-20 16:18:57	<--	anRch (~markmilli@ip-64-134-242-69.public.wayport.net) has quit (Quit: anRch)
2013-03-20 16:19:00	liyang	quchen: no, ' for names and constructors, '' for types and stuff.
2013-03-20 16:19:03	notdan	But I dont have any types defined
2013-03-20 16:19:03	quchen	Ah, so ''Maybe is the type name of Maybe
2013-03-20 16:19:07	quchen	Good to know, thanks
2013-03-20 16:19:17	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-20 16:19:26	quchen	TH is strangely fascinating. :-)
2013-03-20 16:19:42	liyang	As is a car crash.
2013-03-20 16:19:53	quchen	I'm beginning to see why it's an unfortunate blessing. Very tempting.
2013-03-20 16:20:07	quchen	Yeeeah no I wouldn't call a car crash fascinating
2013-03-20 16:20:14	quchen	Let's say nuclear power
2013-03-20 16:20:29	liyang	If you can do the job with CPP, do that. :)
2013-03-20 16:20:47	`ramses	notdan: the problem is the first catch-all instance. To avoid that you could make some type F which wraps a functor and has an OrdFunctor instance
2013-03-20 16:20:49	liyang	(Except GHC uses CPP with --traditional, which has its own quirks.)
2013-03-20 16:21:04	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 16:21:06	quchen	liyang: I can't use CPP, I'm trying to use TH as a poor man's supercompiler
2013-03-20 16:21:06	-->	hallski (~hallski@80.239.169.202) has joined #haskell
2013-03-20 16:21:27	quchen	Basically a compile time deepseq
2013-03-20 16:22:45	<--	tim (~tim@159.182.183.6) has quit (Disconnected by services)
2013-03-20 16:23:08	-->	tim (~tim@159.182.183.6) has joined #haskell
2013-03-20 16:23:08	-->	djahandarie (darius@unaffiliated/djahandarie) has joined #haskell
2013-03-20 16:23:13	-->	perspectival (perspectiv@nat/redhat/x-ppizwqgwaxdinqaq) has joined #haskell
2013-03-20 16:23:14	liyang	Good luck. :)
2013-03-20 16:23:37	djahandarie	edwardk, I should be there for Boston Haskell today!
2013-03-20 16:24:18	quchen	liyang: I'll finally beat these assembler nerds at project euler brute force solving! ;-)
2013-03-20 16:24:28	-->	pranavrc (~pranavrc@122.164.208.131) has joined #haskell
2013-03-20 16:24:28	<--	pranavrc (~pranavrc@122.164.208.131) has quit (Changing host)
2013-03-20 16:24:28	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-20 16:25:42	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-20 16:25:58	djahandarie	I don't have a laptop though... that should be interesting.
2013-03-20 16:26:15	notdan	`ramses: right, thanks
2013-03-20 16:27:55	<--	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-20 16:28:02	-->	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 16:28:40	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-20 16:28:46	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-03-20 16:28:47	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-20 16:28:54	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 16:29:15	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-20 16:29:52	<--	cmsmcq (~cmsmcq@pool-108-28-108-98.washdc.fios.verizon.net) has quit (Quit: I'm so ... sleeeepy.)
2013-03-20 16:30:27	<--	seliopou (~seliopou@pool-72-92-229-93.prvdri.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 16:30:38	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-20 16:30:41	<--	qzr (~qzr@mpp-cp2-natpool-4-250.ethz.ch) has quit (Remote host closed the connection)
2013-03-20 16:30:47	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-20 16:31:08	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-20 16:31:24	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Ping timeout: 260 seconds)
2013-03-20 16:31:50	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 16:33:26	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 16:33:47	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-20 16:34:32	ag90	I've run into this memory problem. I have this function: loop args = <stuff that requires memory> >> loop newArgs. The loops are completely independent, i.e., nothing done in one iteration is required by another (args are just 2 integers). The heap graph shows memory being allocated in phases and not freed when a new loop begins (http://i.imgur.com/YHrpymx.png)
2013-03-20 16:34:43	-->	plcplc (~quassel@fw.math.ku.dk) has joined #haskell
2013-03-20 16:35:05	ag90	I'm completely at loss on how to fix this.
2013-03-20 16:35:42	ag90	(The graph ends early because I terminated program execution.)
2013-03-20 16:36:17	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-20 16:36:37	-->	Suika (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-20 16:36:55	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Disconnected by services)
2013-03-20 16:36:57	--	Suika is now known as erkin
2013-03-20 16:37:18	<--	hallski (~hallski@80.239.169.202) has quit (Ping timeout: 264 seconds)
2013-03-20 16:37:25	-->	cognominal (~cognomina@37.160.50.171) has joined #haskell
2013-03-20 16:37:45	labo	ag90: maybe something isn't fully evaluated and thunks are creeping up?
2013-03-20 16:37:55	labo	(just a guess)
2013-03-20 16:38:52	-->	timthelion (~timothy@134.222.broadband11.iol.cz) has joined #haskell
2013-03-20 16:39:26	ag90	labo: I've been keeping operations pretty strict with bang patterns and $!. Perhaps I missed something.
2013-03-20 16:39:32	aleator_	ag90: Can you show code?
2013-03-20 16:39:42	-->	jmelesky (~jmelesky@173-164-68-213-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 16:39:50	labo	what is a good library for parsing json?
2013-03-20 16:39:51	ag90	Okay, just a moment.
2013-03-20 16:39:56	labo	I want to parse to a data type
2013-03-20 16:40:02	aleator_	labo: aeson seems popular
2013-03-20 16:40:32	hpaste	ag90 pasted “External Mergesort” at http://hpaste.org/84382
2013-03-20 16:41:09	ag90	Line 402
2013-03-20 16:41:48	tippenein	anyone using shim.vim (superior haskell mode) ?
2013-03-20 16:42:02	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-20 16:42:06	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Read error: Connection reset by peer)
2013-03-20 16:42:30	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-20 16:43:40	aleator_	ag90: Well. Atleast it is not obvious.
2013-03-20 16:44:01	ag90	Heh, yeah.
2013-03-20 16:44:04	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-20 16:44:15	ag90	The code is not in the best state either.
2013-03-20 16:44:37	aleator_	ag90: I'm not enough familiar with conduit to offer anything smart. What happens if you slap performGC at the end of the loop?
2013-03-20 16:44:49	aleator_	(Nothing should happen)
2013-03-20 16:44:49	ag90	I tried that. Didn't make a difference.
2013-03-20 16:45:30	aleator_	I've actually had problems where that helped.
2013-03-20 16:46:13	-->	k0001_ (~k0001@host239.181-1-162.telecom.net.ar) has joined #haskell
2013-03-20 16:46:21	--	bitonic` is now known as bitonic
2013-03-20 16:47:36	aleator_	ag90: This is bit funny, since you'd expect that whatever is sticking to the memory would lie in input output or n. None of which can contain increasing amounts of data.
2013-03-20 16:48:02	-->	fmapE (~fmapE@2001:18e8:2:10f4:9443:6390:4f77:17c9) has joined #haskell
2013-03-20 16:48:03	<--	tew88 (~tew88@tew88.net) has quit (Ping timeout: 245 seconds)
2013-03-20 16:48:26	aleator_	I'm looking forward to learning how that gets solved.
2013-03-20 16:48:32	ag90	Yeah. So, I just added performGC to the start of the loop. Went from http://i.imgur.com/sBt6rhU.png to http://i.imgur.com/9AbYQ8u.png
2013-03-20 16:49:00	aleator_	Huh?
2013-03-20 16:49:02	ag90	Which I find weird since that seems to have increased memory usage.
2013-03-20 16:49:11	<--	k0001 (~k0001@host78.181-1-166.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-03-20 16:49:12	ag90	(smaller data set)
2013-03-20 16:50:08	aleator_	ag90: Thats a small difference
2013-03-20 16:50:23	aleator_	How many loops does that do?
2013-03-20 16:50:24	-->	qzr (~qzr@mpp-cp2-natpool-4-111.ethz.ch) has joined #haskell
2013-03-20 16:50:34	ag90	I'll check.
2013-03-20 16:50:52	<--	sleepynate (~sleepynat@108.204.29.249) has quit (Remote host closed the connection)
2013-03-20 16:51:05	-->	powergiant (~powergian@mailfrom.magasin.dk) has joined #haskell
2013-03-20 16:51:12	aleator_	ag90: Also, did you already do retainer profiling? (The -hr thingy?)
2013-03-20 16:51:25	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 256 seconds)
2013-03-20 16:51:38	ag90	No. I should check that.
2013-03-20 16:51:42	-->	Aune (~arne@teyla.lysator.liu.se) has joined #haskell
2013-03-20 16:51:44	ag90	On this data set, it's only one loop iteration.
2013-03-20 16:54:26	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-20 16:54:30	linduxed	tippenein: nope, but so far i've been satisfied with lushtags + neco-ghc, don't feel i need much more
2013-03-20 16:54:32	-->	issimus1 (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-03-20 16:54:42	<--	dolio (~dolio@208.54.36.248) has quit (Ping timeout: 272 seconds)
2013-03-20 16:54:44	linduxed	tippenein: when speakin of haskell-specific plugins, that is
2013-03-20 16:54:51	linduxed	tippenein: i've got a ton of other ones
2013-03-20 16:54:54	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-20 16:55:00	linduxed	tippenein: syntastic comes to mind, really helps
2013-03-20 16:55:02	ag90	http://i.imgur.com/GWDwQHQ.png
2013-03-20 16:55:25	<--	dflemstr (~me@c-d34171d5.144-1-64736c10.cust.bredbandsbolaget.se) has quit (Remote host closed the connection)
2013-03-20 16:55:27	-->	dolio (~dolio@mf82436d0.tmodns.net) has joined #haskell
2013-03-20 16:55:34	linduxed	ag90: really clear diagram right there
2013-03-20 16:56:34	-->	S11001001 (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-03-20 16:56:35	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 255 seconds)
2013-03-20 16:56:41	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-03-20 16:56:41	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-20 16:57:01	aleator_	Also, -hc might Tell you what actually stuffed the sticky stuff to memory..
2013-03-20 16:57:24	-->	Sculptor (~Sculptor@89.110.220.38) has joined #haskell
2013-03-20 16:57:24	<--	Sculptor (~Sculptor@89.110.220.38) has quit (Changing host)
2013-03-20 16:57:24	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-20 16:57:29	aleator_	ag90: From the latest pic, I can't really see the leak anymore?
2013-03-20 16:57:38	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-20 16:57:59	ag90	I'll try running it on the larger data set. The smaller data set does not cause it to take multiple passes.
2013-03-20 16:58:19	aleator_	Yeah. You'd probably want something that has two or three passes.
2013-03-20 16:58:24	-->	system64 (~system64@202.78.175.199) has joined #haskell
2013-03-20 16:58:29	<--	racycle (~racycle@75-25-129-128.lightspeed.sjcpca.sbcglobal.net) has left #haskell
2013-03-20 16:58:30	<--	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has quit (Quit: Leaving)
2013-03-20 16:58:55	ag90	Running. It'll take a few minutes.
2013-03-20 17:00:06	-->	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has joined #haskell
2013-03-20 17:00:27	tippenein	linduxed: I'm not concerned with much more than just executing ghci inside vim
2013-03-20 17:00:48	<--	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-20 17:01:00	linduxed	tippenein: well, i haven't tried that plugin, so i can't help you with that
2013-03-20 17:01:19	tippenein	does neco-ghc or any of your other plugins do that?
2013-03-20 17:01:49	ag90	So, to be clear, retainer profiling tells me why something is not being GCed?
2013-03-20 17:01:54	linduxed	tippenein: don't think so, i use neco-ghc for omnicompletion of functions, it looks through installed packages
2013-03-20 17:02:05	linduxed	tippenein: lush just generates ctags for haskell
2013-03-20 17:02:25	aleator_	ag90: Yeah. Kinda.
2013-03-20 17:02:27	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Lost terminal)
2013-03-20 17:02:38	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 246 seconds)
2013-03-20 17:02:43	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-20 17:02:52	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-20 17:02:57	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-03-20 17:03:10	-->	Thra11_ (~thrall@87.114.94.55) has joined #haskell
2013-03-20 17:03:10	tippenein	linduxed: ok, cool. So you just use a different window for ghc --make ?
2013-03-20 17:03:18	linduxed	yeah
2013-03-20 17:03:34	linduxed	although i generally test stuff in ghci
2013-03-20 17:03:45	linduxed	load the files, run specific functions in the interpreter
2013-03-20 17:03:54	aleator_	ag90: In lucky cases it points you to thunk holding the data
2013-03-20 17:04:09	ag90	Hah, that would be awesome.
2013-03-20 17:04:11	<--	Thra11_ (~thrall@87.114.94.55) has quit (Max SendQ exceeded)
2013-03-20 17:04:35	ag90	However, considering the things I've done in this code, I don't think I'll be that lucky.
2013-03-20 17:04:44	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-20 17:04:48	<--	Thra11 (~thrall@46.208.118.220) has quit (Ping timeout: 240 seconds)
2013-03-20 17:04:59	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-03-20 17:05:19	-->	Thra11_ (~thrall@87.114.94.55) has joined #haskell
2013-03-20 17:05:46	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-20 17:06:27	-->	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has joined #haskell
2013-03-20 17:06:33	<--	Thra11_ (~thrall@87.114.94.55) has quit (Max SendQ exceeded)
2013-03-20 17:07:35	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 252 seconds)
2013-03-20 17:07:43	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Read error: Connection reset by peer)
2013-03-20 17:07:50	-->	Thra11_ (~thrall@87.114.94.55) has joined #haskell
2013-03-20 17:08:32	<--	rafsoaken (~rafsoaken@mail.secretarysearch.at) has quit (Quit: rafsoaken)
2013-03-20 17:08:35	<--	cognominal (~cognomina@37.160.50.171) has quit (Quit: This computer has gone to sleep)
2013-03-20 17:08:46	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Ping timeout: 245 seconds)
2013-03-20 17:09:36	ag90	It's either in the third pass or the fourth pass. Might be okay to kill it now. I don't know how long this will take.
2013-03-20 17:09:39	<--	Ivanych (~n@94.50.136.47) has quit (Quit: Leaving.)
2013-03-20 17:10:05	-->	Ivanych (~n@94.50.136.47) has joined #haskell
2013-03-20 17:10:44	aleator_	ag90: You can actually plot the profiles while the program is running if you drop the last, incomplete, item from the prof
2013-03-20 17:10:58	ClaudiusMaximus	ag90: BS.take and BS.drop reference the existing data, maybe you need BS.copy? http://i.imgur.com/GWDwQHQ.png
2013-03-20 17:11:02	ClaudiusMaximus	oops
2013-03-20 17:11:07	ClaudiusMaximus	http://hpaste.org/84382#line199
2013-03-20 17:11:25	<--	silver (~silver@178.120.215.229) has quit (Read error: Connection reset by peer)
2013-03-20 17:12:12	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 17:12:28	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-20 17:12:35	ag90	ClaudiusMaximus: Cannot copy. Copying will allocate new memory blocks. take/drop will refer to a slice of the same block.
2013-03-20 17:12:41	ClaudiusMaximus	ok
2013-03-20 17:13:04	ClaudiusMaximus	must admit it's a lot of code using libraries i'm not familiar with :)
2013-03-20 17:13:49	ag90	ClaudiusMaximus: Agreed. My familiarity with most of them was minimal too.
2013-03-20 17:13:49	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-20 17:13:57	ag90	aleator_: http://i.imgur.com/hOxfFVT.jpg
2013-03-20 17:14:05	-->	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has joined #haskell
2013-03-20 17:14:37	-->	silver (~silver@178.121.101.102) has joined #haskell
2013-03-20 17:14:46	aleator_	ag90: So the excess is held by groupMV.
2013-03-20 17:14:57	-->	cmsmcq (~cmsmcq@dsl017-018-002.wdc2.dsl.speakeasy.net) has joined #haskell
2013-03-20 17:14:59	aleator_	+1 for ClaudiusMaximus
2013-03-20 17:14:59	ag90	Apparently. I did not expect that.
2013-03-20 17:15:17	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Ping timeout: 252 seconds)
2013-03-20 17:16:43	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-20 17:16:43	<--	Paprikachu (~Paprikach@178.115.250.169.wireless.dyn.drei.com) has quit (Ping timeout: 264 seconds)
2013-03-20 17:16:58	ag90	Looking at groupMV, I don't see anything obvious.
2013-03-20 17:17:06	-->	Paprikachu (~Paprikach@77.117.247.227.wireless.dyn.drei.com) has joined #haskell
2013-03-20 17:17:50	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-20 17:17:54	-->	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has joined #haskell
2013-03-20 17:18:33	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-20 17:18:35	aleator_	ag90: I need to go invigilate an exam. I think it is what ClaudiusMaximus just said: take will reference everything, which might retain older copies.
2013-03-20 17:18:43	aleator_	Hope you get it fixed.
2013-03-20 17:18:55	ag90	Cool. Thanks for your help.
2013-03-20 17:19:24	<--	soulofpeace (~soulofpea@202.156.165.41) has quit (Ping timeout: 272 seconds)
2013-03-20 17:19:29	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-20 17:20:00	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 245 seconds)
2013-03-20 17:20:09	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-20 17:20:51	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-20 17:21:06	-->	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has joined #haskell
2013-03-20 17:21:10	-->	mm_freak (~milch@ertes.de) has joined #haskell
2013-03-20 17:21:39	edwardk	djahandarie: yay!
2013-03-20 17:22:04	edwardk	djahandarie: luke palmer said something about flying into BOS earlier on facebook, so maybe we can lure him out as well
2013-03-20 17:22:29	<--	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has quit (Quit: Lost terminal)
2013-03-20 17:22:37	<--	Maarten___ (~maarten@a83-163-18-146.adsl.xs4all.nl) has quit (Quit: Maarten___)
2013-03-20 17:22:59	<--	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has quit (Read error: Operation timed out)
2013-03-20 17:23:10	-->	flebron (~flebron@216.239.45.74) has joined #haskell
2013-03-20 17:23:19	<--	fgomez (~Fernando@uwsclient-178-114.uws.ualberta.ca) has quit (Ping timeout: 260 seconds)
2013-03-20 17:23:43	flebron	"Hey, I am Haskell; and this is lazy; so here's a function; I'll call it, maybe."
2013-03-20 17:24:00	flebron	(It also works if you remove the last comma :D)
2013-03-20 17:24:12	<--	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has quit (Ping timeout: 264 seconds)
2013-03-20 17:24:46	monochrom	haha
2013-03-20 17:24:52	yitz	flebron: you have provided the answer to this question: what does haskell have in common with Harvard economists?
2013-03-20 17:25:09	Taneb	flebron, that... works better than the original
2013-03-20 17:25:33	Taneb	flebron++
2013-03-20 17:25:48	-->	klrr (~klrr@88.129.154.198) has joined #haskell
2013-03-20 17:25:50	edwardk	If we start thinking of Haskell as the "Call me, Maybe" language then I'll never be able to avoid that song.
2013-03-20 17:25:54	monochrom	@remember flebron "Hey, I am Haskell; and this is lazy; so here's a function; I'll call it, maybe."
2013-03-20 17:25:55	lambdabot	Done.
2013-03-20 17:26:19	yitz	flebron++
2013-03-20 17:26:42	ClaudiusMaximus	ag90: hm, i think VM.clear might not work as advertised - haven't figured out where the instances are defined but class MVector v a where ...  basicClear _ = return ()  -- looks ominous
2013-03-20 17:26:44	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-20 17:26:58	powergiant	Is there a standard function for taking two lists and subtracting their x's with eachother? as in f [1,2] [2,1] = [1-2,2-1] ?
2013-03-20 17:26:59	klrr	i try solve this problem http://projecteuler.net/problem=1 , http://hastebin.com/jaqenuvoyu.hs <- that's my code, but i get the wrong answer why is that? (or is it correct?)
2013-03-20 17:27:25	-->	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has joined #haskell
2013-03-20 17:27:28	flebron	powergiant: zipWith (-)
2013-03-20 17:27:39	S11001001	powergiant: what's f [1] [2,1]?
2013-03-20 17:28:02	--	NikkeiMinaj is now known as Randall
2013-03-20 17:28:04	powergiant	flebron: Oh yes, I should have remebered. Thnaks!
2013-03-20 17:28:08	--	Randall is now known as rmunroe
2013-03-20 17:28:17	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-03-20 17:28:20	S11001001	> zipWith (-) [1,2] [2,1,42] :: [Expr]
2013-03-20 17:28:21	ag90	ClaudiusMaximus: It's defined in Data.Vector.Mutable for that instance. It merely sets the values to uninitialized defaults.
2013-03-20 17:28:22	lambdabot	  [1 - 2,2 - 1]
2013-03-20 17:28:30	powergiant	S11001001: And is undifiend.. Right now I can assume I always use lists of equal sizes
2013-03-20 17:28:38	powergiant	but that'll work too
2013-03-20 17:28:40	yitz	klrr: *below* 1000
2013-03-20 17:28:59	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-20 17:29:02	<--	madhadron (~Adium@209.119.210.194) has left #haskell
2013-03-20 17:29:13	yitz	> [1..5]
2013-03-20 17:29:15	lambdabot	  [1,2,3,4,5]
2013-03-20 17:29:37	klrr	yitz: oh, so [1000..1] ?
2013-03-20 17:29:45	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 17:30:02	yitz	klrr: no, what i meant is that you are including the number 1000, but the problem says not to
2013-03-20 17:30:05	ClaudiusMaximus	ag90: ok - considering library bugs is a sign i'm out of my depth :)
2013-03-20 17:30:19	-->	phischu (~pschuster@dslb-088-077-194-186.pools.arcor-ip.net) has joined #haskell
2013-03-20 17:30:44	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-03-20 17:31:05	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 17:31:14	<--	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-20 17:31:15	ag90	ClaudiusMaximus: Thanks for your help anyway.
2013-03-20 17:31:36	ag90	I'll see if I can find a way.
2013-03-20 17:32:05	-->	tibbe (~tibbe@207.198.105.19) has joined #haskell
2013-03-20 17:33:18	-->	fgomez (~Fernando@uwsclient-132-194.uws.ualberta.ca) has joined #haskell
2013-03-20 17:33:47	<--	klrr (~klrr@88.129.154.198) has quit (Ping timeout: 246 seconds)
2013-03-20 17:34:05	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-20 17:34:05	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-20 17:34:05	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-20 17:34:50	<--	bru` (~bruno`@4077.rez-gif.supelec.fr) has quit (Ping timeout: 255 seconds)
2013-03-20 17:35:02	-->	monoidal (~chatzilla@212-87-13-67.sds.uw.edu.pl) has joined #haskell
2013-03-20 17:35:48	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-20 17:36:57	yitz	wow, interesting. try that euler problem for 1000, 10000, 100000, ... i'm surprised they didn't do something with that. (yes, i know, klrr is gone...)
2013-03-20 17:37:04	<--	timthelion (~timothy@134.222.broadband11.iol.cz) has quit (Ping timeout: 245 seconds)
2013-03-20 17:37:08	-->	tauli (~tauli@e182221028.adsl.alicedsl.de) has joined #haskell
2013-03-20 17:37:22	-->	normanrichards (~normanric@199.223.125.130) has joined #haskell
2013-03-20 17:37:35	powergiant	is it possible to do something like 'runhaskell' from inside ghci ?
2013-03-20 17:38:00	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-20 17:38:07	Iceland_jack	powergiant: :! runs a shell command
2013-03-20 17:38:34	yitz	powergiant: or load the module and just type main at the ghci prompt.
2013-03-20 17:38:58	powergiant	yitz: That does it good enough for my needs. Thanks!
2013-03-20 17:39:37	-->	Itkovian (~Itkovian@188.188.66.72) has joined #haskell
2013-03-20 17:40:11	<--	adlan (~adlan@115.134.180.140) has quit (Remote host closed the connection)
2013-03-20 17:40:20	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-20 17:40:26	-->	end3rW (~end3rW@lak-117-159.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-20 17:40:55	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 17:42:10	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-20 17:43:03	<--	jang1 (~cmjg@46.233.72.7) has quit (Quit: Leaving.)
2013-03-20 17:43:10	-->	ISF_ (~ivan@187.64.222.221) has joined #haskell
2013-03-20 17:43:59	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-20 17:44:10	-->	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has joined #haskell
2013-03-20 17:44:10	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit
2013-03-20 17:45:09	-->	pranavrc (~pranavrc@122.174.9.171) has joined #haskell
2013-03-20 17:45:09	<--	pranavrc (~pranavrc@122.174.9.171) has quit (Changing host)
2013-03-20 17:45:09	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-20 17:45:27	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-20 17:47:00	<--	normanrichards (~normanric@199.223.125.130) has quit
2013-03-20 17:47:00	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-20 17:47:46	-->	normanrichards (~normanric@199.223.125.130) has joined #haskell
2013-03-20 17:47:46	-->	Ralith (~ralith@d142-058-092-218.wireless.sfu.ca) has joined #haskell
2013-03-20 17:47:49	<--	Peaker (~Peaker@bzq-79-180-216-242.red.bezeqint.net) has quit (Ping timeout: 256 seconds)
2013-03-20 17:49:06	<--	ag90 (~ag90@184.175.42.76) has left #haskell
2013-03-20 17:49:12	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-20 17:49:17	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-20 17:49:18	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-20 17:49:25	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-20 17:50:45	-->	bru` (~bruno`@4077.rez-gif.supelec.fr) has joined #haskell
2013-03-20 17:50:56	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-20 17:50:57	-->	ablokzijl (~arjan@46-126-12-5.dynamic.hispeed.ch) has joined #haskell
2013-03-20 17:52:13	<--	normanrichards (~normanric@199.223.125.130) has quit (Client Quit)
2013-03-20 17:52:47	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 17:53:28	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-20 17:53:57	<--	sheerun (~sheerun@78.10.84.193) has quit (Client Quit)
2013-03-20 17:54:06	<--	fgomez (~Fernando@uwsclient-132-194.uws.ualberta.ca) has quit (Ping timeout: 264 seconds)
2013-03-20 17:54:40	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-20 17:54:41	<--	rmunoz (~rmunoz@144.Red-88-16-29.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-03-20 17:54:48	-->	Pranz_ (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-20 17:54:57	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-20 17:55:27	-->	rmunoz (~rmunoz@144.Red-88-16-29.dynamicIP.rima-tde.net) has joined #haskell
2013-03-20 17:55:30	<--	ablokzijl (~arjan@46-126-12-5.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-03-20 17:56:30	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 17:56:32	<--	sheerun (~sheerun@78.10.84.193) has quit (Max SendQ exceeded)
2013-03-20 17:57:10	-->	rafsoaken (~rafsoaken@91-119-236-227.dynamic.xdsl-line.inode.at) has joined #haskell
2013-03-20 17:57:33	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Quit: Leaving)
2013-03-20 17:57:35	<--	EarlGray (~mitra@195.20.154.2) has quit (Quit: Konversation terminated!)
2013-03-20 17:57:38	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Ping timeout: 252 seconds)
2013-03-20 17:57:43	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 17:57:44	<--	sheerun (~sheerun@78.10.84.193) has quit (Excess Flood)
2013-03-20 17:57:51	<--	tibbe (~tibbe@207.198.105.19) has quit (Quit: tibbe)
2013-03-20 17:58:01	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-20 17:58:24	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 17:58:25	<--	sheerun (~sheerun@78.10.84.193) has quit (Max SendQ exceeded)
2013-03-20 17:58:42	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 17:58:44	<--	sheerun (~sheerun@78.10.84.193) has quit (Max SendQ exceeded)
2013-03-20 17:58:59	-->	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-03-20 17:59:10	<--	qzr (~qzr@mpp-cp2-natpool-4-111.ethz.ch) has quit (Remote host closed the connection)
2013-03-20 17:59:17	-->	sapphire (907aee31@gateway/web/freenode/ip.144.122.238.49) has joined #haskell
2013-03-20 17:59:20	-->	sheerun (~sheerun@78.10.84.193) has joined #haskell
2013-03-20 18:00:19	<--	samedhi (~stephen@76.14.74.147) has quit (Client Quit)
2013-03-20 18:01:03	-->	refold (~gman@h-54-251.a258.priv.bahnhof.se) has joined #haskell
2013-03-20 18:01:14	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-20 18:01:26	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 246 seconds)
2013-03-20 18:01:47	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-20 18:01:50	<--	dncr (~dncr@72.185.193.164) has quit (Ping timeout: 255 seconds)
2013-03-20 18:02:00	-->	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has joined #haskell
2013-03-20 18:02:00	<--	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has quit (Changing host)
2013-03-20 18:02:00	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-20 18:02:29	<--	itemad (~user@212.0.102.162) has quit (Read error: Connection reset by peer)
2013-03-20 18:02:52	<--	Thra11_ (~thrall@87.114.94.55) has quit (Ping timeout: 256 seconds)
2013-03-20 18:04:33	<--	rmunoz (~rmunoz@144.Red-88-16-29.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-03-20 18:04:34	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-20 18:04:45	-->	normanrichards (~normanric@199.223.125.130) has joined #haskell
2013-03-20 18:04:49	-->	rmunoz (~rmunoz@144.Red-88-16-29.dynamicIP.rima-tde.net) has joined #haskell
2013-03-20 18:05:32	srhb	Hmm. I'm basically reading Strings directly from an IRC server. And it seems things like 水 and other weird characters are handled just fine. is there any reason to switch to Text or maybe even ByteString for the handling of things from the network socket?
2013-03-20 18:07:21	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-20 18:07:46	byorgey	Text is faster and uses less memory and handles things like uppercasing/lowercasing properly.  But I would say if String is working OK for you then don't worry about it.  (I'm sure others may disagree.)
2013-03-20 18:07:56	<--	bru` (~bruno`@4077.rez-gif.supelec.fr) has quit (Ping timeout: 245 seconds)
2013-03-20 18:08:24	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-20 18:08:26	srhb	OK.
2013-03-20 18:08:39	-->	hkj (~textual@89.191.21.94) has joined #haskell
2013-03-20 18:08:40	-->	mmcdermo (~mmcdermo@adsl-99-170-150-159.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-03-20 18:08:41	<--	hkj (~textual@89.191.21.94) has quit (Max SendQ exceeded)
2013-03-20 18:08:44	byorgey	Since it sounds like you are actually processing text (as opposed to binary data) you should only use ByteString if you really need to handle encoding/decoding yourself.
2013-03-20 18:08:47	sapphire	Hello. I know that --xs!!n-- gives me n-1th element in a list. Can you tell me how can I edit nth element in a list. For example how can I make 'a' an 'e' in this : ['s','a','p','p','h','i','r','e'] ?
2013-03-20 18:09:11	luite	oh what's wrong with uppercasing/lowercasing in String?
2013-03-20 18:09:21	-->	hkj (~textual@89.191.21.94) has joined #haskell
2013-03-20 18:09:46	byorgey	luite: I don't really know the details, apparently in some languages to do upper/lowercasing properly requires looking at several consecutive characters to decide what to do
2013-03-20 18:09:48	supki	sapphire: there isn't predefined function for that
2013-03-20 18:09:51	byorgey	so 'map toUpper' is not correct
2013-03-20 18:09:53	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-20 18:09:56	-->	qzr (~qzr@mpp-cp2-natpool-4-111.ethz.ch) has joined #haskell
2013-03-20 18:10:27	srhb	byorgey: I guess I just don't know yet. I assumed I would have to, but apparently things are working just fine.
2013-03-20 18:10:32	sapphire	<supki> can you give me at least a hint for that?
2013-03-20 18:10:37	<--	ag90 (~ag90@184.175.42.76) has left #haskell
2013-03-20 18:10:38	-->	xyxy (~hrn@host94.181-1-121.telecom.net.ar) has joined #haskell
2013-03-20 18:10:50	-->	Eduard_Munteanu (~Eduard_Mu@188.25.244.109) has joined #haskell
2013-03-20 18:11:04	luite	byorgey: oh uhm odd. I could imagine that would be a problem for utf16 encoded things, where some characters are encoded as a surrogate pair, but Char is just a single integer representing the codepoint
2013-03-20 18:11:07	typoclass	byorgey: that sounds like a job for icu?
2013-03-20 18:11:16	monoidal	sometimes uppercasing depends on locale. for example, English has small i and capital I, while Turkish has capital I, lowercase ı and captial İ, lowercase i
2013-03-20 18:11:18	<--	`ramses (863ab323@gateway/web/freenode/ip.134.58.179.35) has quit (Ping timeout: 245 seconds)
2013-03-20 18:11:27	-->	quchen (~david@p54AA368C.dip.t-dialin.net) has joined #haskell
2013-03-20 18:11:42	luite	byorgey: oh wait, real characters
2013-03-20 18:11:43	byorgey	I defer you all to http://hackage.haskell.org/packages/archive/text/0.11.2.3/doc/html/Data-Text.html#g:8 for the details.
2013-03-20 18:11:46	-->	tomprince (~tomprince@socrates.hocat.ca) has joined #haskell
2013-03-20 18:11:49	luite	hmm that's interesting
2013-03-20 18:12:00	-->	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has joined #haskell
2013-03-20 18:12:12	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-03-20 18:12:17	luite	oh that's quite cool, didn't know that :)
2013-03-20 18:12:28	byorgey	oh, uppercase ß -> SS  is a simple example
2013-03-20 18:12:29	-->	ymasory (~ymasory@209.49.103.254) has joined #haskell
2013-03-20 18:12:38	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 18:12:38	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-20 18:12:49	fizbin	sapphire: You'll need to take the list apart and put it back together.
2013-03-20 18:12:56	luite	ah good one, but that's a deprecated character ;)
2013-03-20 18:12:57	typoclass	sapphire: hello, just as a heads-up, "editing" a list in haskell is done by giving back a new list with a few things changed. the old list stays intact.
2013-03-20 18:13:04	<--	rafsoaken (~rafsoaken@91-119-236-227.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-03-20 18:13:16	byorgey	luite: well, sure, but it still needs to be handled correctly!
2013-03-20 18:13:27	byorgey	> map toUpper "spaß"
2013-03-20 18:13:28	lambdabot	  mueval: recoverEncode: invalid argument (invalid character)
2013-03-20 18:13:34	-->	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has joined #haskell
2013-03-20 18:13:35	byorgey	heh
2013-03-20 18:13:36	luite	ooh
2013-03-20 18:13:52	typoclass	byorgey: that's broken since an update a while ago
2013-03-20 18:14:01	sapphire	thanks guys!
2013-03-20 18:14:02	-->	mcdonc_ (~mcdonc@lanai.palladion.com) has joined #haskell
2013-03-20 18:14:08	--	mcdonc_ is now known as mcdonc
2013-03-20 18:14:14	luite	i need to review the ghcjs code for this
2013-03-20 18:14:17	typoclass	sapphire: for your job, you should look at the map function
2013-03-20 18:14:19	fizbin	> let updateList n newval lst = take (n-1) lst ++ [newval] ++ drop n lst in updateList 5 'g' "Hello world"
2013-03-20 18:14:23	lambdabot	  "Hellg world"
2013-03-20 18:14:26	-->	wtw (~wtw@unaffiliated/wtw) has joined #haskell
2013-03-20 18:14:47	-->	Thra11_ (~thrall@87.114.94.55) has joined #haskell
2013-03-20 18:14:47	--	pdxleif_away is now known as pdxleif
2013-03-20 18:14:53	byorgey	you can also use 'splitAt' to take the list apart
2013-03-20 18:15:10	typoclass	> map (\x -> if x == 'p' then 'u' else x) "sapphire"
2013-03-20 18:15:12	lambdabot	  "sauuhire"
2013-03-20 18:15:15	fizbin	Although that implementation has an off-by-1 error.
2013-03-20 18:15:53	fizbin	> let updateList n newval lst = take n lst ++ [newval] ++ drop (n+1) lst in updateList 5 'g' "Hello world"
2013-03-20 18:15:55	lambdabot	  "Hellogworld"
2013-03-20 18:16:14	<--	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-20 18:16:20	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 252 seconds)
2013-03-20 18:16:33	<--	odi (~user@089144206245.atnat0015.highway.a1.net) has quit (Ping timeout: 252 seconds)
2013-03-20 18:16:42	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Client Quit)
2013-03-20 18:16:50	fizbin	Or sure, you can write it slightly more efficiently with splitAt.
2013-03-20 18:16:58	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-20 18:17:23	sapphire	#typoclass I don't see how map would work for me since I want to edit one or two elements in a list
2013-03-20 18:17:36	<--	normanrichards (~normanric@199.223.125.130) has quit (Ping timeout: 264 seconds)
2013-03-20 18:17:58	typoclass	sapphire: oh sorry, i didn't catch that. map will process all of the elements in the list
2013-03-20 18:18:00	yitz	byorgey, srhb: normally, for a network protocol, you read ByteString off the line, then once you know you have text (and not binary goop) you immediately decode it to Text.
2013-03-20 18:19:01	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 18:19:01	<--	Itkovian (~Itkovian@188.188.66.72) has quit (Read error: Connection reset by peer)
2013-03-20 18:19:18	-->	anRch (~markmilli@50.12.166.124) has joined #haskell
2013-03-20 18:19:48	<--	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Ping timeout: 276 seconds)
2013-03-20 18:20:02	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-20 18:20:37	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 18:21:32	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 18:22:02	typoclass	srhb: afaik, the encoding is not defined in irc, so most clients use utf-8. you seem to have used utf-8 decoding when you read that into the String, so it works out
2013-03-20 18:22:22	ab9rf	typoclass: freenode is officially utf-8
2013-03-20 18:22:32	-->	bru` (~bruno`@4077.rez-gif.supelec.fr) has joined #haskell
2013-03-20 18:23:03	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 276 seconds)
2013-03-20 18:23:23	typoclass	ab9rf: don't know. i guess we'd have to set the client to utf-16 and reconnect, and see what happens.
2013-03-20 18:23:23	<--	rsuniev123 (~textual@212.140.174.166) has quit (Quit: Computer has gone to sleep.)
2013-03-20 18:23:50	-->	mrsolo (~mrsolo@64.125.181.92) has joined #haskell
2013-03-20 18:23:51	ab9rf	in practice, irc only allows ascii-7 in the portions of the communication it actually interprets
2013-03-20 18:24:06	ab9rf	in message payloads the server doesn't care what encoding is used
2013-03-20 18:24:35	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 252 seconds)
2013-03-20 18:24:40	ab9rf	typoclass: a UCS-16 client would not get far :)
2013-03-20 18:25:16	<--	Paprikachu (~Paprikach@77.117.247.227.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-20 18:25:25	ab9rf	i've yet to see an irc server that allows nonlatin characters in channel names
2013-03-20 18:25:29	ab9rf	or in user ids
2013-03-20 18:25:37	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 18:26:24	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-20 18:26:39	chrisdotcode_	hello everyone :)
2013-03-20 18:27:14	ab9rf	the server doesn't interpret any of the payloads so they can be arbitrary binary data.  freenode has a social policy of utf-8, but the servers do not enforce well-formedness, and you will sometimes find channels that are using other encodings
2013-03-20 18:27:22	-->	Ralith_ (~ralith@d142-058-092-218.wireless.sfu.ca) has joined #haskell
2013-03-20 18:27:35	<--	Ralith (~ralith@d142-058-092-218.wireless.sfu.ca) has quit (Read error: Connection reset by peer)
2013-03-20 18:27:50	byorgey	hi chrisdotcode_
2013-03-20 18:28:45	-->	eldariof (~CLD@pppoe-205-108-dyn-sr.volgaline.ru) has joined #haskell
2013-03-20 18:28:46	<--	typoclass (~typoclass@p4FC9259C.dip.t-dialin.net) has quit (Quit: Leaving.)
2013-03-20 18:29:08	-->	BobFunk_ (~mbc@76.14.64.156) has joined #haskell
2013-03-20 18:29:18	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 240 seconds)
2013-03-20 18:30:34	-->	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has joined #haskell
2013-03-20 18:30:39	<--	alistairclark (~alisaircl@109.174.158.82) has quit (Remote host closed the connection)
2013-03-20 18:31:41	sapphire	Is it possible to get the index of an element in the list? For example how can I get the indexes of "p"s in ['s','a','p','p','h','i','r','e']?
2013-03-20 18:32:09	ab9rf	sapphire: oddly enough, yes
2013-03-20 18:32:32	<--	xyxy (~hrn@host94.181-1-121.telecom.net.ar) has left #haskell
2013-03-20 18:32:37	ab9rf	sapphire: do you want to write the function yourself or use a library? :)
2013-03-20 18:32:39	sapphire	can I ask how?
2013-03-20 18:32:54	<--	system64 (~system64@202.78.175.199) has quit (Remote host closed the connection)
2013-03-20 18:33:09	<--	Rarrikins_n_o_x (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 256 seconds)
2013-03-20 18:33:12	sapphire	I'd like to learn to write the function :)
2013-03-20 18:33:22	srhb	You could zip the list with its indices
2013-03-20 18:33:27	<--	quchen (~david@p54AA368C.dip.t-dialin.net) has quit (Quit: Lost terminal)
2013-03-20 18:33:28	srhb	And then extract them afterwards.
2013-03-20 18:33:36	srhb	> zip [1..] "sapphire"
2013-03-20 18:33:38	lambdabot	  [(1,'s'),(2,'a'),(3,'p'),(4,'p'),(5,'h'),(6,'i'),(7,'r'),(8,'e')]
2013-03-20 18:34:02	eikke	a combination of map, filter & zip should do the trick :)
2013-03-20 18:34:05	srhb	NOte that calling it indices seems to imply that you have fast lookup in lists. You don't.
2013-03-20 18:34:08	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-20 18:34:37	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-03-20 18:34:49	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-20 18:35:27	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-03-20 18:35:36	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-20 18:36:01	--	chili-con-carne is now known as Zedrikov
2013-03-20 18:36:03	-->	_d3f (~gnu@nl2.ovpn.to) has joined #haskell
2013-03-20 18:37:45	<--	perspectival (perspectiv@nat/redhat/x-ppizwqgwaxdinqaq) has quit (Quit: Leaving.)
2013-03-20 18:38:35	<--	anRch (~markmilli@50.12.166.124) has quit (Ping timeout: 260 seconds)
2013-03-20 18:38:36	yitz	srhb: on modern machines, it would usually need to be a list with at least 10s of thousands of elements for it to be worthwhile to use anything other than lists tho
2013-03-20 18:39:18	-->	sleepynate (~sleepynat@108.204.29.249) has joined #haskell
2013-03-20 18:39:58	-->	anRch (~markmilli@50.12.166.124) has joined #haskell
2013-03-20 18:41:31	-->	ncw (ncw@conference/pycon/x-odpynibiggfkzqhc) has joined #haskell
2013-03-20 18:41:47	-->	shintah (bebble@h-123-169-131.a336.priv.bahnhof.se) has joined #haskell
2013-03-20 18:41:55	<--	qzr (~qzr@mpp-cp2-natpool-4-111.ethz.ch) has quit (Remote host closed the connection)
2013-03-20 18:42:18	srhb	yitz: Yeah.
2013-03-20 18:42:26	srhb	Well, define worthwhile..
2013-03-20 18:42:53	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-20 18:43:00	<--	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has quit (Ping timeout: 272 seconds)
2013-03-20 18:43:19	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Ping timeout: 252 seconds)
2013-03-20 18:43:51	-->	tew88 (~tew88@tew88.net) has joined #haskell
2013-03-20 18:44:49	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-20 18:45:05	ab9rf	it depends on how often you're doing it
2013-03-20 18:45:07	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-20 18:45:51	-->	rsuniev123 (~textual@static-93.158.79.70.got.public.icomera.com) has joined #haskell
2013-03-20 18:46:14	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-03-20 18:46:17	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Max SendQ exceeded)
2013-03-20 18:46:48	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-03-20 18:46:59	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-03-20 18:47:06	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 276 seconds)
2013-03-20 18:48:29	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-20 18:48:31	arbn	Yo, Haskellers. So, I want to play with Cloud Haskell, but don't know anything about distributed computing yet. Any recommendations on books of algorithms, or other sources of stuff on which to cut my teeth?
2013-03-20 18:48:45	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 245 seconds)
2013-03-20 18:48:48	<--	papermachine (~paper@128.211.178.8) has quit (Quit: Leaving)
2013-03-20 18:49:44	--	Ralith_ is now known as Ralith
2013-03-20 18:49:53	tippenein	arbn: you've looked at all these? http://www.haskell.org/haskellwiki/Cloud_Haskell
2013-03-20 18:49:56	nardul	arbn: I'd look at distributed algorithms and systems like chord and such. I'm currently taking a course, we're using a tannenbaum book called distributed systems.
2013-03-20 18:50:13	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-20 18:50:14	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-20 18:50:29	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell
2013-03-20 18:50:45	tippenein	or are those too specific to haskell
2013-03-20 18:51:16	-->	xcombelle (~xcombelle@AToulouse-551-1-134-118.w86-201.abo.wanadoo.fr) has joined #haskell
2013-03-20 18:51:51	arbn	tippenein: Oh. I had forgot about the Well Typed blog posts. I'll read over those again.
2013-03-20 18:51:57	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 18:52:16	arbn	nardul: How do you like the book?
2013-03-20 18:52:18	<--	k0001_ (~k0001@host239.181-1-162.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-03-20 18:52:45	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 18:53:00	<--	iago (~iago@gwlmf.di.uminho.pt) has quit (Ping timeout: 264 seconds)
2013-03-20 18:53:08	-->	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has joined #haskell
2013-03-20 18:53:10	arbn	tippenein: I am kind of looking more the abstract description of algorithms, that I can implement with Haskell for learning.
2013-03-20 18:53:51	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Read error: Connection reset by peer)
2013-03-20 18:54:04	-->	folone_ (~folone@brln-4d0cc7d6.pool.mediaWays.net) has joined #haskell
2013-03-20 18:54:20	<--	BobFunk_ (~mbc@76.14.64.156) has quit (Ping timeout: 260 seconds)
2013-03-20 18:54:21	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Quit: Leaving)
2013-03-20 18:54:34	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-20 18:54:42	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-03-20 18:55:10	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-20 18:55:23	<--	ISF_ (~ivan@187.64.222.221) has quit (Ping timeout: 252 seconds)
2013-03-20 18:55:42	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-20 18:55:48	<--	mcdonc (~mcdonc@lanai.palladion.com) has quit (Remote host closed the connection)
2013-03-20 18:55:54	<--	sapphire (907aee31@gateway/web/freenode/ip.144.122.238.49) has quit (Quit: Page closed)
2013-03-20 18:55:59	srhb	So I suppose I really ought to be using attoparsec instead.
2013-03-20 18:56:03	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-20 18:56:03	-->	kuribas (~user@94-227-88-230.access.telenet.be) has joined #haskell
2013-03-20 18:56:08	srhb	I wonder how hard the rewrite is...
2013-03-20 18:56:37	-->	mcdonc (~mcdonc@lanai.palladion.com) has joined #haskell
2013-03-20 18:56:57	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 18:56:58	-->	morazow (~morazow@gsd116.gsd.inesc-id.pt) has joined #haskell
2013-03-20 18:56:58	johnw	srhb: what are you using right now?
2013-03-20 18:57:08	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-20 18:57:18	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 240 seconds)
2013-03-20 18:57:26	-->	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has joined #haskell
2013-03-20 18:57:38	srhb	Parsec
2013-03-20 18:57:41	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-20 18:57:49	johnw	it won't be terribly hard
2013-03-20 18:58:02	johnw	there are few combinators missing, but not anything you can't work around
2013-03-20 18:58:20	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-03-20 18:58:21	srhb	Alright. I'll have a crack at it. Then to the actual ByteString -> Maybe Text afterwards.
2013-03-20 18:58:44	johnw	why Maybe Text?
2013-03-20 18:58:50	johnw	you don't know whether it will be textual data or not?
2013-03-20 18:59:19	-->	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has joined #haskell
2013-03-20 18:59:19	<--	gwern (~gwern@pool-71-178-87-250.washdc.east.verizon.net) has quit (Changing host)
2013-03-20 18:59:19	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-20 18:59:28	<--	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has quit (Ping timeout: 272 seconds)
2013-03-20 18:59:38	-->	bmfx (~bmfx@168-139-112-92.pool.ukrtel.net) has joined #haskell
2013-03-20 18:59:47	aristid	johnw: i suppose it's Maybe because the function might fail?
2013-03-20 18:59:51	srhb	Yeah
2013-03-20 18:59:52	<--	crs_ (~crs_@192.210.215.64) has quit (Quit: leaving)
2013-03-20 19:00:02	-->	crs_ (~crs_@192.210.215.64) has joined #haskell
2013-03-20 19:00:03	johnw	hmm... i don't think decodeUtf8 provides that?
2013-03-20 19:00:14	aristid	@hoogle decodeUtf8
2013-03-20 19:00:14	lambdabot	Data.Text.Encoding decodeUtf8 :: ByteString -> Text
2013-03-20 19:00:15	lambdabot	Data.Text.Lazy.Encoding decodeUtf8 :: ByteString -> Text
2013-03-20 19:00:15	lambdabot	Data.Text.Encoding decodeUtf8' :: ByteString -> Either UnicodeException Text
2013-03-20 19:00:16	srhb	There's probably something in text-icu then
2013-03-20 19:00:21	srhb	Ah
2013-03-20 19:00:22	aristid	johnw: it does:)
2013-03-20 19:00:33	aristid	just with a '
2013-03-20 19:00:34	srhb	There's one.
2013-03-20 19:00:35	johnw	ah
2013-03-20 19:00:37	johnw	decodeUtf8'
2013-03-20 19:00:54	johnw	the non ' case just throws an exception
2013-03-20 19:00:57	srhb	Apparently I can't trust irc users to actually write valid anything. So it will be interesting. :-)
2013-03-20 19:01:48	srhb	The bad part is, I need to decide on an encoding, and I don't think that's actually very true to the idea that anyone can just write any byte sequence in a message.
2013-03-20 19:01:50	-->	ISF_ (~ivan@187.64.222.221) has joined #haskell
2013-03-20 19:01:51	aristid	srhb: oh, in case of irc just make a best effort guess as to what they meant :)
2013-03-20 19:01:57	srhb	aside from \CR\LF
2013-03-20 19:01:59	srhb	Yeah.
2013-03-20 19:02:00	<--	mcdonc (~mcdonc@lanai.palladion.com) has quit (Ping timeout: 264 seconds)
2013-03-20 19:02:08	nardul	arbn: It's a bit general. Try building something like: http://zond.github.com/god/architecture.html
2013-03-20 19:02:09	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-20 19:02:15	srhb	I wonder if there's a helper out there for making that guess.
2013-03-20 19:02:24	-->	fgomez (~Fernando@uwsclient-178-239.uws.ualberta.ca) has joined #haskell
2013-03-20 19:02:31	aristid	srhb: i think the "standard" encoding for reading irc is either-latin1-or-utf8. probably easiest on a line-by-line basis
2013-03-20 19:02:44	ab9rf	srhb: there's no guarantee that the payload of an IRC message is valid UTF-8, or indeed valid anything.  i think you can be assured it won't contain any nulls.
2013-03-20 19:02:44	srhb	Yes, I will be reading line-by-line anyway.
2013-03-20 19:02:47	aristid	like first you try utf8 and if that fails for the line, fall back to interpreting it as latin-1 :D
2013-03-20 19:02:55	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Read error: Connection reset by peer)
2013-03-20 19:02:58	srhb	aristid: Fun fun :P
2013-03-20 19:03:07	aristid	srhb: irc is da fun!
2013-03-20 19:03:15	srhb	ab9rf: So should I just give up on even trying to encode the bytestring?
2013-03-20 19:03:32	srhb	ab9rf: That seems like my bot won't be able to do a lot of useful things :P
2013-03-20 19:03:34	ab9rf	srhb: my advice? allow encoding to be set on a channel-by-channel basis
2013-03-20 19:03:40	srhb	Hmm.
2013-03-20 19:03:46	<--	eldariof (~CLD@pppoe-205-108-dyn-sr.volgaline.ru) has quit (Read error: Connection reset by peer)
2013-03-20 19:04:05	-->	YellowOnion (~jim@29.243.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-20 19:04:14	geekosaur	there's also what xchat does by default, which is attempt utf8 and fall back to iso8859-1
2013-03-20 19:04:17	ab9rf	srhb: i've seen channels that are in 8859-5 or CP-1251
2013-03-20 19:04:23	srhb	Ack.
2013-03-20 19:04:28	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-20 19:04:30	aristid	geekosaur: which is pretty much the procedure i described.
2013-03-20 19:04:35	ab9rf	srhb: because they're eastern yurpers
2013-03-20 19:04:36	srhb	tryAllEncodingsOrNothing...
2013-03-20 19:04:37	srhb	:P
2013-03-20 19:04:40	aristid	geekosaur: latin-1 == iso-8859-1
2013-03-20 19:04:51	geekosaur	sorry, yes
2013-03-20 19:04:56	ab9rf	the thing is, you can't tell if it's 8859-1 or 8859-5 by inspection
2013-03-20 19:04:58	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-20 19:04:58	aristid	well latin 1 will always succeed
2013-03-20 19:05:04	srhb	Oh dear.
2013-03-20 19:05:07	aristid	ab9rf: except with very fancy heuristics
2013-03-20 19:05:10	hiptobecubic	one of its best qualities :D
2013-03-20 19:05:12	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-20 19:05:26	ab9rf	all the 8859-X encodings have mappings for every character... just some of them render weird.
2013-03-20 19:05:28	xkcd	Does anybody know nice color scheme for syntax highlighting haskell in vim
2013-03-20 19:05:34	aristid	just tell eastern yuropers to use utf-8 :P
2013-03-20 19:05:38	monochrom	you should just keep it as bytestring and let the real user interpret it
2013-03-20 19:05:40	srhb	Screw it, people can get UTF8 or they can get nothing!
2013-03-20 19:05:42	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 19:05:51	<--	YellowOnion1 (~jim@2406:e000:60af:0:cc36:1db7:7d1e:ae20) has quit (Ping timeout: 245 seconds)
2013-03-20 19:05:53	srhb	monochrom: Unfortunately the bot has to actually respond to things :P
2013-03-20 19:05:59	ab9rf	srhb: i think the practice of trying utf-8 and falling back to 8859-1 is a safe bet
2013-03-20 19:06:08	srhb	Right.
2013-03-20 19:06:12	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-20 19:06:12	powergiant	does anybod know how I can make mplot (from Graphics.Plot) display something by calling it from my main = do ? When I use it in ghci it displays the graphics, but when i run my program nothings happens.
2013-03-20 19:06:20	monochrom	ok, but move the decoding to the responder
2013-03-20 19:06:24	ab9rf	but maximum niceness would allow for overriding that on a channel-by-channel basis
2013-03-20 19:06:33	srhb	Hmm.
2013-03-20 19:06:36	hiptobecubic	xkcd, it's a matter of taste. Here's mine. I like it. http://vpaste.net/N0oBO
2013-03-20 19:06:40	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-20 19:06:43	ab9rf	because there are plenty of 8859-5 channels still out there
2013-03-20 19:06:45	srhb	Can I then at least assume that anything before ':' is not weird?
2013-03-20 19:06:51	hiptobecubic	xkcd, oh you wanted the color scheme. then no.
2013-03-20 19:06:52	ab9rf	i've seen 8859-8 too
2013-03-20 19:06:52	monochrom	yes
2013-03-20 19:07:09	ab9rf	srhb: yes, all of the protocol exchanges are in ASCII-7
2013-03-20 19:07:21	hiptobecubic	xkcd, I grew my own color scheme over time starting from peachpuff in the terminal. I guess you could have that if you watned
2013-03-20 19:07:25	ab9rf	srhb: there ought never be any high-bit-set bytes outside of payloads
2013-03-20 19:07:25	-->	eldariof (~CLD@pppoe-205-108-dyn-sr.volgaline.ru) has joined #haskell
2013-03-20 19:07:27	srhb	So I can always decode prefix, command and the first params to Text
2013-03-20 19:07:29	-->	mcdonc (~mcdonc@lanai.palladion.com) has joined #haskell
2013-03-20 19:07:33	srhb	That helps a bit I guess.
2013-03-20 19:07:38	xkcd	Yeah sure hiptobecubic
2013-03-20 19:07:49	-->	timthelion (~timothy@134.222.broadband11.iol.cz) has joined #haskell
2013-03-20 19:07:50	Ralith	For debugging purposes, is there any way to get the pointer identity of a STRef in ghci?
2013-03-20 19:08:04	<--	casucci (~zeke@unaffiliated/casucci) has quit (Client Quit)
2013-03-20 19:08:18	ab9rf	srhb: no irc server ive seen allows non-latin characters in channel names or nicks
2013-03-20 19:08:27	<--	sonda (~sonda@adsl-ull-64-181.50-151.net24.it) has quit (Remote host closed the connection)
2013-03-20 19:08:31	srhb	Still, just allowing utf8 should be fine.
2013-03-20 19:08:42	srhb	Or I assume it will be :P
2013-03-20 19:08:48	srhb	Up until the :, I mean
2013-03-20 19:08:48	monochrom	depending on what your bot does, you may be able to leave a lot of things undecoded
2013-03-20 19:08:48	ab9rf	srhb: in fact, the reason irc allows ^[/]{|} in nicks and channel names is to accomodate the finns
2013-03-20 19:09:11	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Ping timeout: 245 seconds)
2013-03-20 19:09:17	hiptobecubic	xkcd, http://vpaste.net/ZfILr  Assumes you have 255 color support
2013-03-20 19:09:37	ab9rf	because back when irc was developed, those characters were used for diacritically marked letters in a number of scandinavian languages.
2013-03-20 19:09:42	srhb	Oh.
2013-03-20 19:10:30	srhb	Alright. I'll have a crack at the attoparsec part and let the idea of not being able to decode the payload / fallback or fail settle a bit :P
2013-03-20 19:10:32	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-20 19:10:32	-->	BobFunk_ (~mbc@76.14.64.156) has joined #haskell
2013-03-20 19:10:33	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-03-20 19:11:01	ab9rf	srhb: honestly i'd parse at the bytestring level and only parse payloads when you actually need to
2013-03-20 19:11:46	ab9rf	payloads always start with a : and end with a newline; you can just capture them dumb and transcode them only when needed
2013-03-20 19:12:02	xkcd	Thank you hiptobecubic
2013-03-20 19:12:13	hiptobecubic	xkcd, sure
2013-03-20 19:12:27	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 276 seconds)
2013-03-20 19:12:36	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-20 19:12:50	-->	Mathnerd314 (~quassel@palevsky-223-221.rh.uchicago.edu) has joined #haskell
2013-03-20 19:13:33	ab9rf	srhb: oh, you'll also find channels using CP-437
2013-03-20 19:13:54	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-03-20 19:14:16	<--	fgomez (~Fernando@uwsclient-178-239.uws.ualberta.ca) has quit (Ping timeout: 256 seconds)
2013-03-20 19:14:39	xkcd	hiptobecubic:  How to actually check whether terminal has 255 color support? I use gnome terminal 3.6
2013-03-20 19:15:05	<--	_jwest (~jordan@unaffiliated/jwest/x-8002332) has quit (Ping timeout: 256 seconds)
2013-03-20 19:15:35	hiptobecubic	xkcd, http://www.frexx.de/xterm-256-notes/
2013-03-20 19:16:00	hiptobecubic	i suppose this one http://www.vim.org/scripts/script.php?script_id=1349
2013-03-20 19:16:01	<--	anRch (~markmilli@50.12.166.124) has quit (Quit: anRch)
2013-03-20 19:16:44	<--	Philippa (~user@cpc4-clif10-2-0-cust380.12-4.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-03-20 19:17:09	-->	stvc (~stvc@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-20 19:17:28	-->	Rarrikins_z (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 19:18:19	<--	armlesshobo (~ahobo@32.97.110.52) has quit (Ping timeout: 260 seconds)
2013-03-20 19:19:34	-->	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has joined #haskell
2013-03-20 19:19:36	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-20 19:19:56	<--	mcdonc (~mcdonc@lanai.palladion.com) has quit (Ping timeout: 256 seconds)
2013-03-20 19:19:57	ab9rf	hrm.
2013-03-20 19:20:17	-->	theseb (~cs@74.194.237.26) has joined #haskell
2013-03-20 19:20:49	<--	dncr (~dncr@72.185.193.164) has quit (Ping timeout: 245 seconds)
2013-03-20 19:20:54	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 276 seconds)
2013-03-20 19:22:19	-->	cromain_ (~chris@ALille-555-1-109-172.w90-34.abo.wanadoo.fr) has joined #haskell
2013-03-20 19:22:53	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Read error: Connection reset by peer)
2013-03-20 19:23:15	-->	S1100100` (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-03-20 19:23:27	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-20 19:23:31	theseb	i've had people tell me confidently that in future we'll be using functional languages more and more.....how/why are people that say such things so certain?
2013-03-20 19:23:43	Ralith	when stepping through a computation in ghci, is there any way to hold onto a value gotten from a local var?
2013-03-20 19:24:00	theseb	(i.e. I want to be convinced I should get obsessed with functional and the way forward and the silver bullet)
2013-03-20 19:24:31	-->	glguy (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-20 19:24:47	-->	mcdonc (~mcdonc@lanai.palladion.com) has joined #haskell
2013-03-20 19:25:05	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 19:25:07	-->	OlegYch (~OlegYch@46.28.101.180) has joined #haskell
2013-03-20 19:25:14	Cale	theseb: Being certain about it isn't wise, but there are a bunch of things which are making functional languages more attractive, one of which is the fact that processor clocks aren't getting much faster, making parallelism the only way forward in performance.
2013-03-20 19:25:23	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-20 19:25:27	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-20 19:25:27	--	ozataman_ is now known as ozataman
2013-03-20 19:25:30	flebron	I used to think I know Haskell, like you, but then I took an Arrow to the ContT.
2013-03-20 19:25:37	ab9rf	flebron: heh
2013-03-20 19:25:55	-->	MrGwen (~gwenael@boi59-5-88-185-104-130.fbx.proxad.net) has joined #haskell
2013-03-20 19:26:01	ab9rf	theseb: people will continue to use imperative languages for the indefinite future
2013-03-20 19:26:02	--	S1100100` is now known as S11001001
2013-03-20 19:26:03	Cale	Another is that people are realising more and more that purity/referential transparency leads to all sorts of good correctness properties.
2013-03-20 19:26:03	theseb	Cale: thanks...say haven't i seen on @math often
2013-03-20 19:26:04	<--	cromain (~chris@ALille-555-1-168-115.w86-192.abo.wanadoo.fr) has quit (Ping timeout: 272 seconds)
2013-03-20 19:26:07	theseb	?
2013-03-20 19:26:07	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-03-20 19:26:07	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-20 19:26:12	theseb	Cale: #math i mean
2013-03-20 19:26:17	Cale	theseb: I'm often there, yeah
2013-03-20 19:26:38	theseb	Cale: i'm a math guy myself...i was thinking that math guys may have a bright future if functional keeps growing
2013-03-20 19:26:46	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 19:26:51	theseb	Cale: especially if it scare away a lot of the folks that aren't so into math
2013-03-20 19:27:02	ab9rf	theseb: honestly i think one of the main advantages of learning a functional languge is that it forces you to think about computation in a more structured and rigorous way that leads to better coding practices even when writing in other languages
2013-03-20 19:27:04	xkcd	hiptobecubic: How to run the test I don't know perl
2013-03-20 19:27:21	theseb	ab9rf: thanks
2013-03-20 19:27:38	hiptobecubic	xkcd, perl filename
2013-03-20 19:27:42	<--	bru` (~bruno`@4077.rez-gif.supelec.fr) has quit (Ping timeout: 264 seconds)
2013-03-20 19:27:45	xkcd	Okay
2013-03-20 19:27:47	Cale	theseb: Well, it ought not to *scare away* non-math people, but it definitely encourages a mathematical way of thinking.
2013-03-20 19:27:58	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 272 seconds)
2013-03-20 19:28:03	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 276 seconds)
2013-03-20 19:28:14	hiptobecubic	xkcd, I made one in bash at one point as well. it just prints some escape sequences to the terminal to tell it to change colors. http://vpaste.net/qdwHZ
2013-03-20 19:28:14	ab9rf	theseb: i find myself looking more at data flows and less at execution flow
2013-03-20 19:29:09	Cale	Well, there are lots of good things about functional programming generally, to the point where it's hard to say what will be the cause of future popularity.
2013-03-20 19:29:30	ab9rf	from a personal-competency standpoint, the more tools you have the more capable you are
2013-03-20 19:29:32	hiptobecubic	Cale, i think the correctness argument is probably the strongest
2013-03-20 19:29:44	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 19:29:57	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-20 19:30:07	hiptobecubic	Even for non-critical applications, bug hunting is still *most* of the development effort.
2013-03-20 19:30:08	Cale	There are basic things like, well, you write an algorithm, and then you write another and realise that it's very similar except for a little chunk of code which has been replaced, and you'd like to factor that out.
2013-03-20 19:30:29	<--	phischu (~pschuster@dslb-088-077-194-186.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-03-20 19:30:39	-->	notVert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-20 19:30:41	ab9rf	Cale: i've been impressed on how much easier it is to generalize haskell code.  often it's just a matter of changing the type signature.
2013-03-20 19:30:43	Cale	Of course, OO programming has sort of an answer to that, insofar as it can somewhat awkwardly model functional programming.
2013-03-20 19:31:00	hiptobecubic	Cale, heh
2013-03-20 19:31:24	ab9rf	i've gotten increasingly disenchanted with OO programming
2013-03-20 19:31:51	hiptobecubic	I just don't think it's much fun really.
2013-03-20 19:31:56	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-20 19:31:58	Cale	OO has always been good for some things, but it's only ever been good for some things.
2013-03-20 19:32:26	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 246 seconds)
2013-03-20 19:32:37	ab9rf	Cale: that's true of basically every programming model
2013-03-20 19:32:46	Cale	also, most OO languages do a really poor job of supporting object oriented programming
2013-03-20 19:32:47	c_wraith	I've written OO code in haskell.  Once.  That was the time when it solved the problem well.
2013-03-20 19:32:48	hiptobecubic	it makes me think less about data and more about recipes, which i think is kind of boring
2013-03-20 19:33:03	Cale	In fact, to the point that I think Haskell beats them at it. :P
2013-03-20 19:33:24	theseb	Cale: how does the haskell job market look?
2013-03-20 19:33:32	-->	Tharugrim (~Tharugrim@91-113-43-122.adsl.highway.telekom.at) has joined #haskell
2013-03-20 19:33:33	ab9rf	there's a job market? :)
2013-03-20 19:33:34	Cale	theseb: Well, I'm employed :)
2013-03-20 19:33:42	theseb	Cale: doing haskell!?!?!?
2013-03-20 19:33:45	Cale	yeah
2013-03-20 19:33:48	johnw	OO is easy to describe, but hard to use well; Haskell is hard to describe, but easy to use well (once you've learned it)
2013-03-20 19:33:52	c_wraith	My company has about 5 engineers using haskell.
2013-03-20 19:33:52	theseb	Cale: like WOW
2013-03-20 19:33:57	aristid	there are a bunch of companies that seem to use some haskell now
2013-03-20 19:33:57	theseb	Cale: really....WOW
2013-03-20 19:34:02	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-20 19:34:06	johnw	aristid: Haskell is the only language we use :)
2013-03-20 19:34:07	Taneb	theseb, quite a few people are
2013-03-20 19:34:09	theseb	Cale: paid to use Haskell and be mathy
2013-03-20 19:34:12	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2013-03-20 19:34:17	ab9rf	aristid: yeah, it's been growing quietly inside larger, more forward-looking companies
2013-03-20 19:34:20	Cale	I've been employed 3 different times writing Haskell code for money.
2013-03-20 19:34:26	-->	skp (~skp@88-190-221-99.rev.dedibox.fr) has joined #haskell
2013-03-20 19:34:27	aristid	johnw: well you're in the haskell teaching business from what i can tell :P
2013-03-20 19:34:46	johnw	aristid: that's just our beginning
2013-03-20 19:34:47	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-20 19:34:52	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-20 19:34:56	c_wraith	also, all their code *is* in haskell
2013-03-20 19:35:00	Cale	There are not that many jobs, but there's also not a *huge* amount of competition for those jobs
2013-03-20 19:35:02	ab9rf	i'm wondering what's going to happen with perl6
2013-03-20 19:35:19	johnw	i haven't written a line of code in any other language but Emacs Lisp in almost six month snow
2013-03-20 19:35:20	theseb	Cale: nice
2013-03-20 19:35:29	c_wraith	johnw: that's a long winter
2013-03-20 19:35:33	Cale	If you're a Java programmer, you really have to do a lot to set yourself apart from the ridiculous number of people who know (or at least claim to know) Java.
2013-03-20 19:35:41	thoughtpolice	actually, my experience has been the number of jobs isn't typically very high, but those positions are very competitive in terms of who apply for it
2013-03-20 19:35:43	aristid	johnw: haskell and emacs lisp... make a johnw happy i hope :D
2013-03-20 19:35:45	<--	MrGwen (~gwenael@boi59-5-88-185-104-130.fbx.proxad.net) has quit (Ping timeout: 260 seconds)
2013-03-20 19:35:46	ab9rf	johnw: i've been known to go a year or more without writing code in any language other than perl
2013-03-20 19:35:48	theseb	Cale: where do you find these lovely haskell jobs?
2013-03-20 19:35:50	johnw	aristid: more than I can tell you!
2013-03-20 19:35:55	Cale	If you're a Haskell programmer, probably everyone in the Haskell community eventually knows who you are.
2013-03-20 19:35:57	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-20 19:36:03	thoughtpolice	the average haskell programmer you're going up against for a position like that is likely not going to be a run-of-the-mill regular developer
2013-03-20 19:36:04	Cale	People ask me
2013-03-20 19:36:06	theseb	Cale: any entry level jobs for low pay?
2013-03-20 19:36:13	Cale	and I say "yeah, that'd be cool"
2013-03-20 19:36:30	theseb	Cale: i'd love to get a humble paying entry level monkey coder haskell job
2013-03-20 19:36:38	ab9rf	theseb: i'm not sure there are any such jobs
2013-03-20 19:36:39	<--	heruur (~tvh@dslb-188-103-207-067.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-20 19:36:43	theseb	i'd give you a Steak dinner finders fee
2013-03-20 19:36:52	ab9rf	theseb: haskell is not a language that calls for monkey coders
2013-03-20 19:36:54	Cale	thoughtpolice: That's true
2013-03-20 19:37:29	Cale	thoughtpolice: Then again, you know Haskell, so you're likely already an above average average programmer yourself.
2013-03-20 19:37:42	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 256 seconds)
2013-03-20 19:38:50	-->	bark_ (~bark@2001:470:8a52:67:2c57:80c2:bf63:fce2) has joined #haskell
2013-03-20 19:39:24	aristid	Cale: is the typical haskell job associated with something like a "you may use haskell" pay cut?
2013-03-20 19:39:30	thoughtpolice	Cale: :)
2013-03-20 19:39:58	ab9rf	i've been out f work for four years now, which is part of why i'm coding again
2013-03-20 19:40:20	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-20 19:40:24	<--	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-03-20 19:40:28	Sculptor	how many haskell jobs are out there, ab9rf
2013-03-20 19:40:29	ab9rf	of course, now that i'm actually getting my legs back, i have a fairly serious job prosect
2013-03-20 19:40:35	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Ping timeout: 256 seconds)
2013-03-20 19:40:38	ab9rf	Sculptor: i have no idea.  i'm a systems engineer.
2013-03-20 19:41:00	theseb	aristid: lol
2013-03-20 19:41:03	-->	inad922 (~inad925@93.93.84.85) has joined #haskell
2013-03-20 19:41:04	ab9rf	Sculptor: i haven't worked in a development role professionally since 2001
2013-03-20 19:41:16	Sculptor	ok
2013-03-20 19:41:17	Cale	aristid: I can't really say from experience, but my pay seems pretty reasonable to me, and I'm being paid the same in my current job since we switched to Haskell.
2013-03-20 19:41:56	Cale	I haven't taken that many non-Haskell programming jobs :P
2013-03-20 19:41:58	aristid	Cale: what did you use before in that job?
2013-03-20 19:42:16	Cale	Maintain a horrible grails/groovy codebase :D
2013-03-20 19:42:25	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-20 19:42:35	<--	rsuniev123 (~textual@static-93.158.79.70.got.public.icomera.com) has quit (Quit: Computer has gone to sleep.)
2013-03-20 19:42:49	Cale	(Which we're now replacing with Snap/Haskell)
2013-03-20 19:42:50	ab9rf	Sculptor: although i'm probably going to start writing haskell code to automate systems administration if i get back to working again :)
2013-03-20 19:42:54	aristid	Cale: yay.
2013-03-20 19:43:05	aristid	Cale: were you involved in convincing them to switch? :D
2013-03-20 19:43:08	Cale	Nope
2013-03-20 19:43:10	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-20 19:43:19	--	stelleg_away is now known as stelleg
2013-03-20 19:43:20	aristid	did you join after the decision was already made?
2013-03-20 19:43:23	Cale	My boss is also a Haskeller
2013-03-20 19:43:24	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 19:43:27	Sculptor	ab9rf, glad to hear that
2013-03-20 19:43:27	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Quit: Page closed)
2013-03-20 19:43:29	<--	notVert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Read error: Connection reset by peer)
2013-03-20 19:43:31	johnw	Cale: what is his name?
2013-03-20 19:43:36	Cale	Ryan Trinkle
2013-03-20 19:43:40	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-20 19:43:46	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-20 19:43:53	Taneb	Can you guys make sure that there's loads of Haskell jobs available in about 5 years
2013-03-20 19:43:55	ab9rf	Sculptor: that, or writing games in haskell
2013-03-20 19:44:02	johnw	Taneb: we're working on that :)
2013-03-20 19:44:06	Taneb	Thanks
2013-03-20 19:44:16	johnw	in fact, if FP Complete meets its primary goal, that is exactly what will happen
2013-03-20 19:44:19	Taneb	Wow
2013-03-20 19:44:35	Taneb	Perfect
2013-03-20 19:44:39	aristid	johnw: the fp complete jobs are remote, right?
2013-03-20 19:44:45	johnw	aristid: yes
2013-03-20 19:44:45	hiptobecubic	Cale, oh the game company? How is that going?
2013-03-20 19:44:55	Cale	hiptobecubic: This is actually a different company now :)
2013-03-20 19:45:02	johnw	aristid: in fact, I'm now chatting with you from London, and I bet you had no clue :)
2013-03-20 19:45:13	hiptobecubic	Cale, oh. It went poorly then :D ?
2013-03-20 19:45:14	aristid	johnw: no i thought you were in the US:)
2013-03-20 19:45:16	-->	paolino (~paolino@net-2-32-31-71.cust.dsl.teletu.it) has joined #haskell
2013-03-20 19:45:22	johnw	aristid: my home is in Illinois
2013-03-20 19:45:24	aristid	johnw: whacha doing in the londons?
2013-03-20 19:45:26	johnw	aristid: I'm here for Emacs Conf
2013-03-20 19:45:29	aristid	ah
2013-03-20 19:45:47	johnw	which is in just 10 days, I need to work on my talks...
2013-03-20 19:45:54	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-20 19:45:54	-->	djcoin (~makina@lns-bzn-55-82-255-155-211.adsl.proxad.net) has joined #haskell
2013-03-20 19:45:56	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-03-20 19:46:02	aristid	johnw: and you thought you might as well work on them right in london? cool
2013-03-20 19:46:08	Sculptor	ab9rf, i like games better
2013-03-20 19:46:09	aristid	johnw: in a hotel, or...?
2013-03-20 19:46:10	johnw	yeah, my Dad lives here
2013-03-20 19:46:17	aristid	ah, with your dad then
2013-03-20 19:46:22	johnw	so he's hacking on his computer right now while I hack on mine
2013-03-20 19:46:25	-->	madjestic (~madjestic@178.230.49.4) has joined #haskell
2013-03-20 19:46:39	ab9rf	Sculptor: i like the idea of writing games but i hate the tedium of writing them in languages like C++ or Java
2013-03-20 19:46:42	johnw	this has been a super productive trip.  In gitlib yesterday I wrote a generic "push" algorithm for any Git backend
2013-03-20 19:46:51	aristid	aw father son hacking romanticism :P
2013-03-20 19:47:02	Cale	hiptobecubic: The game is on hiatus, but blackh has put some more work into it recently, to get things running on android. We have most of a game engine, and you can run around and kill enemies and stuff, but there's lots of work to be done on the content and features related to the actual RPG aspect of things.
2013-03-20 19:47:21	johnw	except his hacking is mostly reading e-mails and writing legal documents (he's a lawyer)
2013-03-20 19:47:40	aristid	johnw: the gitlib README is a little short
2013-03-20 19:47:45	ab9rf	johnw: ah, a social engineer
2013-03-20 19:47:56	johnw	aristid: I haven't worked on the documentation yet at all
2013-03-20 19:48:09	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 19:48:15	aristid	johnw: then just explain here what gitlib is:)
2013-03-20 19:48:32	johnw	aristid: basically, it lets you write git "algorithms" to an abstract API, which will then work for variety of backends: cmdline Git, libgit2, GitHub, Amazon S3 (via your aws), and soon "Hit"
2013-03-20 19:48:48	aristid	what's "Hit"?
2013-03-20 19:48:55	johnw	a pure-Haskell implementation of Git
2013-03-20 19:48:59	aristid	johnw: hmm
2013-03-20 19:49:01	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-20 19:49:12	aristid	johnw: do you use the same storage format?
2013-03-20 19:49:20	johnw	here is a real-world utility I wrote based on gitlib, which I use daily now: https://github.com/fpco/gitlib/blob/master/git-monitor/Main.hs
2013-03-20 19:49:31	johnw	aristid: each backend can decide its own storage format, gitlib itself is agnostic
2013-03-20 19:49:51	aristid	i mean in Hit
2013-03-20 19:49:51	-->	Eldariof-ru (~CLD@pppoe-205-2-dyn-sr.volgaline.ru) has joined #haskell
2013-03-20 19:49:56	johnw	git-monitor is a super-efficient daemon that snapshots changes to your working tree as you work
2013-03-20 19:49:59	hiptobecubic	Cale, isn't the game engine the 'hard part' ?
2013-03-20 19:50:04	johnw	ah, Hit I believe duplicates the Git on-disk format
2013-03-20 19:50:06	aristid	johnw: and how does the s3 storage work?
2013-03-20 19:50:07	Cale	hiptobecubic: It would be a shame not to return to it at some point, as we have a lot of stuff that's done. We also have a pretty cool FRP library. At the very least, we ought to write a couple of papers about that and release something to the community at some point. ;)
2013-03-20 19:50:16	johnw	aristid: I serialize the Git objects to JSON
2013-03-20 19:50:19	Cale	hiptobecubic: yeah
2013-03-20 19:50:22	johnw	oh, S3
2013-03-20 19:50:23	aristid	johnw: ah, so no packing?
2013-03-20 19:50:27	johnw	I thought you meant GitHub
2013-03-20 19:50:35	Ralith	man, a way to inspect the pointer identity of STRefs would be handy
2013-03-20 19:50:37	aristid	when i say s3 i usually don't mean github:P
2013-03-20 19:50:47	johnw	for the S3 backend I use the same on-disk storage format as Git, except I provision 8 bytes at the beginning of each object to store its type and size
2013-03-20 19:50:56	aristid	johnw: hmm
2013-03-20 19:51:01	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-20 19:51:06	johnw	I store refs in their own refs.yaml file
2013-03-20 19:51:14	johnw	but no, no packging
2013-03-20 19:51:17	johnw	all objects are loose
2013-03-20 19:51:18	<--	Ivanych (~n@94.50.136.47) has quit (Quit: Leaving.)
2013-03-20 19:51:21	aristid	ugh
2013-03-20 19:51:25	johnw	because storage and bandwidth are cheap
2013-03-20 19:51:38	johnw	it's number of GETs/PUTs that I have to optimize for
2013-03-20 19:52:03	aristid	that's just an artifact of s3's pricing i think:)
2013-03-20 19:52:25	Cale	hiptobecubic: Though there are many layers of completeness to a game engine. Our game engine might be complete enough to do a less ambitious kind of game, which we also might also do at some point in order to actually, you know, make some money from it.
2013-03-20 19:52:26	johnw	sure
2013-03-20 19:52:49	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-03-20 19:52:57	johnw	but this is just a first version; I would hope to support getting and putting packs at some point.  Since Hit is working on reading/writing packfiles, maybe that's how I'll get that support in
2013-03-20 19:53:03	<--	mike25 (~user@host81-151-43-253.range81-151.btcentralplus.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-20 19:53:04	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-03-20 19:53:19	<--	eldariof (~CLD@pppoe-205-108-dyn-sr.volgaline.ru) has quit (Ping timeout: 256 seconds)
2013-03-20 19:53:21	sipa	hit = git in haskell?
2013-03-20 19:53:25	johnw	also, libgit2 I think does deltification, that might work too (since the S3 backend is also an hlibgit2 backend)
2013-03-20 19:53:27	johnw	sipa: yes
2013-03-20 19:53:32	-->	qzr_ (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-20 19:53:45	-->	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-20 19:53:48	aristid	johnw: i would have some other ideas for how to make such a thing :)
2013-03-20 19:54:03	johnw	all suggestions welcome!
2013-03-20 19:54:07	-->	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has joined #haskell
2013-03-20 19:54:10	johnw	open tickets for me on github
2013-03-20 19:54:14	johnw	gitlib is under active development
2013-03-20 19:54:22	sm	I would have thought for most games, the content is actually the harder part
2013-03-20 19:54:31	aristid	johnw: no i just want to tell you the idea right here :P
2013-03-20 19:54:35	johnw	i'm trying to get the API just right before the initial release, which I'm hoping will happen quite soon
2013-03-20 19:54:41	johnw	aristid: haha, ok, tell
2013-03-20 19:54:46	aristid	johnw: are you familiar with bup and/or rsync?
2013-03-20 19:54:51	johnw	yes
2013-03-20 19:54:53	johnw	both
2013-03-20 19:55:04	johnw	and xdelta
2013-03-20 19:55:27	aristid	johnw: are you also familiar with the "implementation detail" of how bup splits its blocks?
2013-03-20 19:55:39	johnw	no
2013-03-20 19:55:39	aristid	(interestingly gzip --rsyncable does more or less the same)
2013-03-20 19:55:44	johnw	i do know that it only grows
2013-03-20 19:56:10	-->	phischu (~pschuster@dslb-088-077-194-186.pools.arcor-ip.net) has joined #haskell
2013-03-20 19:56:17	johnw	my gzip doesn't have that option :(
2013-03-20 19:56:30	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 264 seconds)
2013-03-20 19:56:38	--	pepijndevos is now known as pepijn_away
2013-03-20 19:56:40	johnw	sm: the one time I tried to write a game, that's where i got blocked
2013-03-20 19:56:53	aristid	johnw: ok, if you split a file into blocks so you can deduplicate them, and do it in the obvious way of splitting by fixed block sizes, there's a problem, right? the behavior when you insert something in the middle of the file is quite abysmal, all the blocks after the insertion change
2013-03-20 19:57:05	johnw	right
2013-03-20 19:57:16	-->	gentleben (~gentleben@208.74.182.4.static.etheric.net) has joined #haskell
2013-03-20 19:57:22	aristid	johnw: now, bup does something clever, and it's actually inspired by rsync
2013-03-20 19:57:33	-->	BOOMLAY (~khuram_la@182.177.55.184) has joined #haskell
2013-03-20 19:57:43	aristid	johnw: and the method is also well-known among academics in that area i think, so it's not a new idea *building tension*
2013-03-20 19:57:57	--	pepijn_away is now known as pepijndevos
2013-03-20 19:57:57	BOOMLAY	ANY HOT AND SWEET LADY WANT TRUE FRIENDSHIP PM ME
2013-03-20 19:57:59	johnw	it tries to "sync up" by considering sub-blocks within each block?
2013-03-20 19:58:02	--	Mode #haskell [+o johnw] by ChanServ
2013-03-20 19:58:04	--	Mode #haskell [+b *!~khuram_la@182.177.55.184] by johnw
2013-03-20 19:58:04	<--	johnw has kicked BOOMLAY (Kicked)
2013-03-20 19:58:08	--	Mode #haskell [-o johnw] by johnw
2013-03-20 19:58:35	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-20 19:58:38	Taneb	Alas, there are very few "HOT AND SWEET" ladies here
2013-03-20 19:58:40	shachaf	And there I was hoping for true friendship.
2013-03-20 19:58:42	aristid	johnw: you take a rolling checksum of a 128 byte window (which is rolled byte-by-byte), and once the 13 least-significant bits of the checksum are zero, a new block is started
2013-03-20 19:58:49	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Max SendQ exceeded)
2013-03-20 19:58:58	aristid	johnw: this way, blocks are guaranteed to line up after an insertion
2013-03-20 19:59:08	aristid	and the average block size will be 8 KB
2013-03-20 19:59:16	aristid	> 2^13
2013-03-20 19:59:18	lambdabot	  8192
2013-03-20 19:59:32	johnw	aristid: neat.  want to write this for my S3 backend? :)
2013-03-20 20:00:14	aristid	johnw: i might write some generic code for this, but edwardk already has some code for it in his analytics (i also told him about the trick, and he finished implementing before i got far)
2013-03-20 20:00:29	johnw	he does that when you mention ideas to him
2013-03-20 20:00:37	aristid	:D
2013-03-20 20:00:46	johnw	if you want a chance of doing it, you have to show him code, not talk about code that will be :)
2013-03-20 20:00:48	-->	DanBurto_ (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-03-20 20:00:50	-->	bits (~bits@ip70-181-183-218.sd.sd.cox.net) has joined #haskell
2013-03-20 20:01:22	aristid	well his code is a little different from how i'd like to do it
2013-03-20 20:01:40	<--	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 248 seconds)
2013-03-20 20:01:54	-->	armlesshobo (~ahobo@32.97.110.52) has joined #haskell
2013-03-20 20:01:59	johnw	has it been differentiated and lifted into a profunctor already?
2013-03-20 20:02:05	aristid	johnw: https://github.com/analytics/analytics/blob/master/src/Data/Analytics/Hash/Rolling.hs
2013-03-20 20:02:10	<--	Palmik (~palmik@man-208-121.pks.muni.cz) has quit (Quit: Lost terminal)
2013-03-20 20:02:10	aristid	no, it's quite low-level
2013-03-20 20:02:29	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Ping timeout: 252 seconds)
2013-03-20 20:02:36	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-20 20:02:54	shachaf	johnw: If you show him code he'll just reïmplement it anyway.
2013-03-20 20:02:56	aristid	johnw: so whether you want to use that or not, is pretty much your decision :P
2013-03-20 20:03:06	shachaf	I have evidence.
2013-03-20 20:03:12	johnw	shachaf: haha
2013-03-20 20:03:34	aristid	shachaf: you do love your diaresis in english words :P
2013-03-20 20:03:36	<--	Philonous (~Philonous@dslb-178-000-135-085.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-20 20:03:46	<--	kylcarte (~kcarter@66.162.129.26) has quit (Ping timeout: 245 seconds)
2013-03-20 20:03:48	shachaf	aristid: What's the matter with diæreses?
2013-03-20 20:03:51	johnw	aristid: so, I keep a pack file and a separate table of checksums, right, apply the algorithm to determine what needs to be added to the pack file, and just send that?  later I use some nifty algorithm to de-deltify and read out just the objects I want?
2013-03-20 20:03:57	<--	bits (~bits@ip70-181-183-218.sd.sd.cox.net) has quit (Client Quit)
2013-03-20 20:04:02	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-20 20:04:08	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 252 seconds)
2013-03-20 20:04:42	<--	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has quit (Ping timeout: 272 seconds)
2013-03-20 20:04:56	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 20:05:06	aristid	johnw: the trick is that with this object splitting, you don't need any deltification.
2013-03-20 20:05:28	johnw	sure
2013-03-20 20:05:29	aristid	johnw: because you just split your objects once and store them in a deduplicating store, and that's all there is to it.
2013-03-20 20:06:03	johnw	but how do I avoid having to download the whole pack file every time I want one object out of it?  cap them at a certain size and start keeping generations?
2013-03-20 20:06:11	aristid	by not using pack files.
2013-03-20 20:06:13	-->	fgomez (~Fernando@uwsclient-178-33.uws.ualberta.ca) has joined #haskell
2013-03-20 20:06:24	aristid	i never mentioned any pack files
2013-03-20 20:06:40	johnw	i meant by pack file: that big glomming thing now in S3
2013-03-20 20:06:54	-->	nithp (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-20 20:07:15	aristid	johnw: i think you'd just try to store everything as loose objects, but due to the intelligent block splitting that should not waste too much storage.
2013-03-20 20:07:32	johnw	wait, i think we're missing signals here
2013-03-20 20:07:33	<--	timthelion (~timothy@134.222.broadband11.iol.cz) has quit (Quit: leaving)
2013-03-20 20:07:41	johnw	how many files end up in S3 after pushing 10 objects?
2013-03-20 20:07:59	aristid	10 git objects as generated by git?
2013-03-20 20:08:04	johnw	right
2013-03-20 20:08:10	johnw	blobs, trees, and one commit
2013-03-20 20:08:11	aristid	it depends on the size
2013-03-20 20:08:21	aristid	approximately total size divided by 8192 many
2013-03-20 20:08:32	<--	madjestic (~madjestic@178.230.49.4) has quit (Ping timeout: 252 seconds)
2013-03-20 20:08:51	johnw	how, my 10 objects are spread over a potentially fewer or greater number of files?
2013-03-20 20:08:54	johnw	s/how/so
2013-03-20 20:09:04	<--	adzeitor (~adzeitor@31.207.132.170) has quit (Read error: Operation timed out)
2013-03-20 20:09:20	<--	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 20:09:24	aristid	yes, it depends on the precise contents how many
2013-03-20 20:09:33	johnw	so, how do I read back 1 of those objects?
2013-03-20 20:09:48	johnw	i presume I have a table which says which of the X files I need to download in order to reassemble the bytes for that object?
2013-03-20 20:09:53	aristid	you also store a list of objects in the same store
2013-03-20 20:09:58	aristid	a list of blocks i mean
2013-03-20 20:10:04	aristid	and that list of blocks is the file
2013-03-20 20:10:15	johnw	i see, mapping blocks to "block containers"
2013-03-20 20:10:19	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-20 20:10:23	johnw	and a file is just a group of blocks
2013-03-20 20:10:29	johnw	(a git object)
2013-03-20 20:10:31	aristid	something like that
2013-03-20 20:10:35	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-03-20 20:10:45	johnw	this way I get fairly fine-grained deduplication, without having to download too much extra data
2013-03-20 20:10:48	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 252 seconds)
2013-03-20 20:10:50	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 20:10:53	<--	phischu (~pschuster@dslb-088-077-194-186.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-20 20:10:53	<--	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-20 20:11:00	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-03-20 20:11:04	aristid	yes, and you can cache things locally
2013-03-20 20:11:17	johnw	you mean, the block list?
2013-03-20 20:11:31	aristid	and the individual blocks
2013-03-20 20:11:41	johnw	for my purposes, I cannot cache
2013-03-20 20:11:42	-->	joneshf-laptop (~joneshf@mail.concordusapps.com) has joined #haskell
2013-03-20 20:11:42	aristid	they are identified by their SHA1 or so anyways
2013-03-20 20:11:49	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-20 20:11:50	johnw	I'm using S3 because it's the only storage I have which isn't ephemeral
2013-03-20 20:12:04	aristid	a cache CAN use ephemeral storage quite easily
2013-03-20 20:12:05	johnw	but I could store the block list in an SQL table
2013-03-20 20:12:06	aristid	it's a cache
2013-03-20 20:12:10	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-20 20:12:12	johnw	i see what you mean
2013-03-20 20:12:18	-->	_jwest (~jordan@208.90.215.138) has joined #haskell
2013-03-20 20:12:18	<--	_jwest (~jordan@208.90.215.138) has quit (Changing host)
2013-03-20 20:12:18	-->	_jwest (~jordan@unaffiliated/jwest/x-8002332) has joined #haskell
2013-03-20 20:12:26	johnw	for as long as the cache remains viable, use it to avoid re-getting the same block
2013-03-20 20:12:29	aristid	if you don't want to use ephemeral storage for cache, you don't have to cache
2013-03-20 20:12:32	johnw	this sounds very cool
2013-03-20 20:12:35	johnw	you've sold me
2013-03-20 20:12:40	aristid	lol
2013-03-20 20:12:44	aristid	tell me how well it works!
2013-03-20 20:12:55	johnw	no, this sounds very doable, and not very complicated
2013-03-20 20:13:02	aristid	maybe there are some hidden problems with this scheme, as i've only tried it in my brain
2013-03-20 20:13:20	johnw	this sort of thing goes on our "low-hanging fruit list", for when we discover we could use such an optimization
2013-03-20 20:13:28	aristid	heh.
2013-03-20 20:13:32	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-20 20:13:43	johnw	i'm going to copy this conversation into my notes
2013-03-20 20:14:16	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-20 20:14:59	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-20 20:15:05	<--	Eldariof-ru (~CLD@pppoe-205-2-dyn-sr.volgaline.ru) has quit
2013-03-20 20:15:24	-->	phischu (~pschuster@dslb-084-063-098-169.pools.arcor-ip.net) has joined #haskell
2013-03-20 20:15:26	johnw	aristid: https://github.com/fpco/gitlib/issues/10
2013-03-20 20:17:05	-->	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has joined #haskell
2013-03-20 20:17:06	davorak	quchen++
2013-03-20 20:17:28	aristid	johnw: ok, i'm glad you found this interesting
2013-03-20 20:17:32	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-20 20:17:55	johnw	yes, rather
2013-03-20 20:17:58	davorak	preflex: quchen++
2013-03-20 20:18:40	-->	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has joined #haskell
2013-03-20 20:18:55	johnw	did quchen say something I didn't see?
2013-03-20 20:19:20	-->	eldariof (~CLD@pppoe-205-2-dyn-sr.volgaline.ru) has joined #haskell
2013-03-20 20:19:40	-->	mcstar (~mcstar@adsl-89-135-206-203.monradsl.monornet.hu) has joined #haskell
2013-03-20 20:20:22	-->	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has joined #haskell
2013-03-20 20:20:31	-->	interzoneboy (~matt@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-03-20 20:21:17	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-20 20:21:41	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-03-20 20:22:26	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-20 20:22:42	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 20:23:02	<--	DanBurto_ (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has quit (Remote host closed the connection)
2013-03-20 20:23:11	-->	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has joined #haskell
2013-03-20 20:23:18	<--	eldariof (~CLD@pppoe-205-2-dyn-sr.volgaline.ru) has quit (Remote host closed the connection)
2013-03-20 20:24:01	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-20 20:24:14	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-20 20:24:35	<--	BobFunk_ (~mbc@76.14.64.156) has quit (Ping timeout: 246 seconds)
2013-03-20 20:24:35	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 246 seconds)
2013-03-20 20:25:08	twomashi	Stack space overflow
2013-03-20 20:25:30	twomashi	could mapM be to blame?
2013-03-20 20:25:42	johnw	twomashi: it all depends on what mapM is doing
2013-03-20 20:26:20	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Disconnected by services)
2013-03-20 20:26:20	twomashi	liftM concat (mapM stateFunc myList)
2013-03-20 20:26:37	twomashi	(MonadState)
2013-03-20 20:26:50	-->	realnot (~realnot@host13-62-dynamic.52-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-20 20:26:50	<--	realnot (~realnot@host13-62-dynamic.52-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-20 20:26:50	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-20 20:26:50	johnw	well, now it depends on how myList is built, and what stateFunc does :)
2013-03-20 20:27:13	johnw	:t liftM concat
2013-03-20 20:27:14	lambdabot	Monad m => m [[a]] -> m [a]
2013-03-20 20:27:23	twomashi	concatMapM basically
2013-03-20 20:27:29	johnw	:t fmap sequence
2013-03-20 20:27:31	lambdabot	(Monad m, Functor f) => f [m a] -> f (m [a])
2013-03-20 20:27:48	<--	shock_one (~shock_one@46.118.141.174) has quit (Ping timeout: 264 seconds)
2013-03-20 20:27:56	twomashi	stateFunc is not doing anything huge at all. It takes a data record and returns a (small) list
2013-03-20 20:27:59	johnw	:t fmap join
2013-03-20 20:28:01	lambdabot	(Monad m, Functor f) => f (m (m a)) -> f (m a)
2013-03-20 20:28:14	johnw	which is identical to liftM concat for lists...
2013-03-20 20:28:16	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-20 20:28:25	johnw	as in, liftM=fmap and join=concat :)
2013-03-20 20:28:54	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 20:29:00	<--	Thra11_ (~thrall@87.114.94.55) has quit (Ping timeout: 264 seconds)
2013-03-20 20:29:12	johnw	twomashi: can you @hpaste some code?
2013-03-20 20:29:15	arkeet	I'm trying to compile frag and GHC is using all of my memory building the BSP module.
2013-03-20 20:29:23	twomashi	johnw: sure
2013-03-20 20:29:32	sproingie	frag is a beast
2013-03-20 20:29:53	parcs	twomashi: yes mapM can be to blame
2013-03-20 20:30:10	hpaste	“Anonymous Coward” pasted “Stack space overflow” at http://hpaste.org/84385
2013-03-20 20:30:12	-->	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-03-20 20:30:18	twomashi	^^ thats me
2013-03-20 20:30:38	<--	fgomez (~Fernando@uwsclient-178-33.uws.ualberta.ca) has quit (Remote host closed the connection)
2013-03-20 20:31:26	-->	fgomez (~Fernando@uwsclient-178-33.uws.ualberta.ca) has joined #haskell
2013-03-20 20:31:33	 *	arkeet watches his swap space fill up
2013-03-20 20:31:59	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-03-20 20:32:09	mcstar	kill it while you can!!
2013-03-20 20:32:18	johnw	twomashi: I'd use a Data.Map.Strict, and I'm your data type Map.Map !Label !Int, and State !NodeIndex
2013-03-20 20:32:40	johnw	otherwise, mixElems will generate a number of sizable thunks
2013-03-20 20:32:41	-->	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has joined #haskell
2013-03-20 20:33:18	twomashi	aah… so it could be too many thunks
2013-03-20 20:33:19	johnw	you may need strict state as well
2013-03-20 20:33:21	<--	phischu (~pschuster@dslb-084-063-098-169.pools.arcor-ip.net) has left #haskell
2013-03-20 20:33:25	twomashi	not neccesary too long
2013-03-20 20:33:42	twomashi	I'm doing batch ops on a fairly large dataset, it would make sense for me to be strict when possible no?
2013-03-20 20:33:49	<--	djcoin (~makina@lns-bzn-55-82-255-155-211.adsl.proxad.net) has quit (Quit: WeeChat 0.3.9.2)
2013-03-20 20:34:00	johnw	unless there are expensive-to-compute results that you may not need
2013-03-20 20:34:02	twomashi	i suppose except if I need to stream information for some reason
2013-03-20 20:34:05	arkeet	yep, it ate up 7GB of VM and it still couldn't do it.
2013-03-20 20:34:14	twomashi	arkeet: hello
2013-03-20 20:34:16	arkeet	hi
2013-03-20 20:34:19	twomashi	been doing that myself recently :)
2013-03-20 20:34:26	arkeet	:)
2013-03-20 20:34:32	arkeet	but this was GHC eating up memory.
2013-03-20 20:35:00	twomashi	ah, in my case it was my own naivete, basically!
2013-03-20 20:35:10	johnw	twomashi: well, don't be so sure I'm right yet
2013-03-20 20:35:14	johnw	but what I suggested is cheap to try
2013-03-20 20:35:24	twomashi	yea sure we can run this memory exponential algo on this large dataset!
2013-03-20 20:35:33	-->	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has joined #haskell
2013-03-20 20:35:39	johnw	also, why are you using State instead of doing this is a fold?
2013-03-20 20:35:43	twomashi	johnw: I will try these things :)
2013-03-20 20:35:55	-->	fragamus (~textual@adsl-71-142-51-254.dsl.scrm01.pacbell.net) has joined #haskell
2013-03-20 20:36:19	twomashi	johnw: Yes, you mean pass (NodeIndex, [elements]) in a fold right?
2013-03-20 20:36:22	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-20 20:36:23	arkeet	lazy Map is strict in the keys already.
2013-03-20 20:36:27	johnw	yes
2013-03-20 20:36:55	johnw	it seems you are using State to accumulate some values as you process the data set
2013-03-20 20:37:03	<--	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has quit (Quit: Leaving.)
2013-03-20 20:37:10	twomashi	because once it had occurred to me I'd already invested half an hour into writing the State based code… xl
2013-03-20 20:37:13	johnw	this essentially describes the behavior of a foldM
2013-03-20 20:37:24	johnw	ah :)
2013-03-20 20:37:31	twomashi	but I will do this.
2013-03-20 20:37:39	twomashi	thanks, I'll try the bangs now..
2013-03-20 20:38:01	johnw	how large is a Mix?
2013-03-20 20:38:21	-->	ExternalReality (~user@38.122.11.254) has joined #haskell
2013-03-20 20:38:34	arkeet	:t \kv -> at k ?= v
2013-03-20 20:38:36	lambdabot	(MonadState s m, At s, IxValue s ~ Expr, Index s ~ Expr) => t -> m ()
2013-03-20 20:38:37	arkeet	:t \k v -> at k ?= v
2013-03-20 20:38:39	lambdabot	(MonadState s m, At s) => Index s -> IxValue s -> m ()
2013-03-20 20:38:43	-->	maufred_ (~maufred@gob75-8-88-165-219-241.fbx.proxad.net) has joined #haskell
2013-03-20 20:38:44	arkeet	lens =)
2013-03-20 20:39:00	armlesshobo	why would one want to use "lift"?
2013-03-20 20:39:09	arkeet	as opposed to what?
2013-03-20 20:39:20	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 20:39:22	arkeet	:t lift
2013-03-20 20:39:23	johnw	armlesshobo: to lift a function into the next monad down in a transformer stack
2013-03-20 20:39:24	lambdabot	(Monad m, MonadTrans t) => m a -> t m a
2013-03-20 20:39:25	edwardk	armlesshobo: try calling putStrLn down 4 levels in a monad transformer stack
2013-03-20 20:39:31	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 20:39:39	edwardk	armlesshobo: or even just one level down in a state monad
2013-03-20 20:39:44	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-20 20:40:00	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 260 seconds)
2013-03-20 20:40:04	edwardk	armlesshobo: or working with the inner state if you are misguided enough to want to use StateT s (State t) a
2013-03-20 20:40:19	arkeet	edwardk: that sounds like a case for liftIO, not lift.
2013-03-20 20:40:20	twomashi	johnw: lets say about 10 smallish URLs in ByteString form.
2013-03-20 20:40:22	armlesshobo	oh! i understand now.
2013-03-20 20:40:29	armlesshobo	johnw, edwardk: thank you :)
2013-03-20 20:40:33	edwardk	it comes up a lot when you didn't think to write a function in such a way that it can be lifted over a monad transformer stack
2013-03-20 20:40:46	johnw	twomashi: and how many are in this list?
2013-03-20 20:40:46	edwardk	arkeet: sure, both admit similar usecases
2013-03-20 20:40:50	arkeet	sure.
2013-03-20 20:40:53	-->	Thra11_ (~thrall@46.208.85.80) has joined #haskell
2013-03-20 20:40:57	edwardk	but point taken
2013-03-20 20:40:59	twomashi	johnw: about 60000
2013-03-20 20:41:05	ExternalReality	I am having a bit of a problem when using Data.Cereal -- you I have the constraint (Serialize a) on a method and yet when I call something like (encode $ (Just item :: Maybe a)) I get a type error.
2013-03-20 20:41:14	johnw	ok, here's what you need to do
2013-03-20 20:41:16	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-20 20:41:16	-->	mzero (~markl@207.62.246.71) has joined #haskell
2013-03-20 20:41:38	johnw	when you mkGraph nodes edges, you needs for nodes and edges to be fully evaluated... unless of course there is some reason you want to defer computation in any of them
2013-03-20 20:41:46	arkeet	ExternalReality: you're saying that Just item has type forall a. Maybe a
2013-03-20 20:42:04	arkeet	ExternalReality: does it work if you remove the type annotation?
2013-03-20 20:42:07	johnw	because I'm betting that mkGraph is evaluating the *spine* of the nodes and edges list, but it is not evaluating each node and edge
2013-03-20 20:42:14	<--	maufred_ (~maufred@gob75-8-88-165-219-241.fbx.proxad.net) has quit (Client Quit)
2013-03-20 20:42:53	johnw	thus, you are creating a graph that has many thunks in it, each of which holds onto the original data you passed in.  In effect, the resulting graph is as large as the input list, plus a set of recipes for how to begin the work of computing the edges and nodes
2013-03-20 20:43:17	ExternalReality	arkeet: If I remove the annotation GHC tells me I'm being ambiguous
2013-03-20 20:43:27	twomashi	johnw: so i could use a lazy foldl and strictness in data constructors
2013-03-20 20:43:31	-->	64MACV5QC (~mbc@76.14.64.156) has joined #haskell
2013-03-20 20:43:31	-->	13WAASMZD (~mbc@76.14.64.156) has joined #haskell
2013-03-20 20:43:32	arkeet	ExternalReality: would you like to paste some code?
2013-03-20 20:43:43	johnw	well, the very first thing  you could do to test thi stheory
2013-03-20 20:44:04	johnw	is import Control.DeepSeq and do: nodes `deepseq` edges `deepseq` mkGraph nodes edges
2013-03-20 20:44:13	ExternalReality	sure thing
2013-03-20 20:44:20	johnw	if that fixes your problem, then you think more about how to do it correctly with seq and strictness annotations
2013-03-20 20:44:29	-->	cdk (d810e466@gateway/web/freenode/ip.216.16.228.102) has joined #haskell
2013-03-20 20:44:29	-->	bsilbaugh (ad42c41b@gateway/web/freenode/ip.173.66.196.27) has joined #haskell
2013-03-20 20:44:33	johnw	but I bet you adding those bangs I mentioned above will help a great deal
2013-03-20 20:44:55	cdk	@pl \e -> f >> print e
2013-03-20 20:44:55	lambdabot	(f >>) . print
2013-03-20 20:45:06	johnw	now, the deepseq trick may not be enough, because it may be blowing stack before you even get to the mkGraph call
2013-03-20 20:45:23	-->	Peaker (~Peaker@46.19.80.168) has joined #haskell
2013-03-20 20:45:28	johnw	so maybe don't even bother with that
2013-03-20 20:45:32	johnw	try making your data types strict first
2013-03-20 20:45:43	twomashi	johnw: GHC doesnt like them:Unexpected strictness annotation
2013-03-20 20:45:58	<--	bsilbaugh (ad42c41b@gateway/web/freenode/ip.173.66.196.27) has left #haskell
2013-03-20 20:46:00	johnw	you can't put them everywhere
2013-03-20 20:46:02	hpaste	ExternalReality pasted “Ambiguity” at http://hpaste.org/84387
2013-03-20 20:46:03	johnw	which type was this for?
2013-03-20 20:46:06	twomashi	I had to remove all of them :(
2013-03-20 20:46:18	johnw	oh
2013-03-20 20:46:19	twomashi	type BuilderState = State !NodeIndex — rejected
2013-03-20 20:46:21	johnw	there are type synonyms
2013-03-20 20:46:28	johnw	yeah, they only work for data types
2013-03-20 20:46:46	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-20 20:46:46	structuralist	So… I'm playing around and trying to get (>>=) (bind) from (>>=) (Kleisli composition)… is there a less confusing way to get it than (>>=) = (($ ()) .) . (>=>) . const ?
2013-03-20 20:46:55	johnw	data NodeIndex = NodeIndex (Map.Map !Label !Int)
2013-03-20 20:46:58	twomashi	so I should use seq against some Map keys to force eval?
2013-03-20 20:46:59	structuralist	er second >>= should be >=>
2013-03-20 20:47:15	johnw	twomashi: yes, but realize that seq is shallow, it only evaluates to WHNF
2013-03-20 20:47:20	-->	cariveri (~cariveri@g230118249.adsl.alicedsl.de) has joined #haskell
2013-03-20 20:47:30	structuralist	looking at (($ ()) .) (i.e. apply () to result) in particular
2013-03-20 20:47:55	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-20 20:48:20	<--	mcdonc (~mcdonc@lanai.palladion.com) has quit (Ping timeout: 245 seconds)
2013-03-20 20:48:21	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 20:48:21	ExternalReality	akreet: I can't see what I am doing wrong. Maybe a is and instance of serialize as long as a is.
2013-03-20 20:48:30	arkeet	ExternalReality: but it doesn't know what a is.
2013-03-20 20:48:51	<--	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has quit (Ping timeout: 259 seconds)
2013-03-20 20:48:54	arkeet	well
2013-03-20 20:48:58	arkeet	could you paste the error too?
2013-03-20 20:49:01	ion	structuralist: How did you come up with such a contrived way to write it? :-P f =<< a = (f <=< const a) ()
2013-03-20 20:49:16	twomashi	johnw: data NodeIndex = NodeIndex (!Map.Map !Label !Int) — rejects bang on Label
2013-03-20 20:49:22	-->	swineflu (~andrew@host81-154-208-243.range81-154.btcentralplus.com) has joined #haskell
2013-03-20 20:49:23	monoidal	@pl \x y -> ((const x) >=> y) ()
2013-03-20 20:49:23	lambdabot	flip flip () . (>=>) . const
2013-03-20 20:49:23	structuralist	ion: it's not contrived! it was the first thing I wrote down :P
2013-03-20 20:49:27	-->	Lethalman (~lethal@ppp-28-30.28-151.libero.it) has joined #haskell
2013-03-20 20:49:33	twomashi	though thats fine, surely, label will be evaulated upon the insert.
2013-03-20 20:49:36	monoidal	structuralist: ^
2013-03-20 20:49:36	mzero	okay, I haz the dumbs today.....    seems like I should have a better way to write:      actionWithMaybeResult >>= maybe (return Nothing) action2WithMaybeResult
2013-03-20 20:49:38	swineflu	Anyone here work with haskell professionally?
2013-03-20 20:49:49	arkeet	mzero: MaybeT
2013-03-20 20:49:55	chrisirc	How can I enter the debugger from a ghc-compiled binary?
2013-03-20 20:49:58	johnw	twomashi: ok, I'm no expert at using strict annotations yet.  I will have to leave you to others here, as I'm heading out to dinner now
2013-03-20 20:50:03	<--	theseb (~cs@74.194.237.26) has left #haskell ("Leaving")
2013-03-20 20:50:05	ion	structuralist: Try using more points the next time.
2013-03-20 20:50:07	mzero	er, the actions are in IO
2013-03-20 20:50:11	twomashi	johnw: cool, thanks for your help !
2013-03-20 20:50:14	arkeet	mzero: yes, MaybeT IO
2013-03-20 20:50:17	cariveri	Hi. counldn't match expected "IO ()"  with actual a0 -> m0 a0 of "fct _ _ = do return". whats going on?
2013-03-20 20:50:19	geekosaur	chrisirc, which debugger?
2013-03-20 20:50:25	arkeet	MaybeT actionWithMaybeResult >>= MaybeT action2WithMaybeResult
2013-03-20 20:50:28	arkeet	:t MaybeT
2013-03-20 20:50:28	mzero	ah... see I DO have the dumbs today!
2013-03-20 20:50:29	danr	chrisirc: you can't, ghci demands it to be interpreted
2013-03-20 20:50:29	<--	skp (~skp@88-190-221-99.rev.dedibox.fr) has quit (Quit: Lost terminal)
2013-03-20 20:50:30	lambdabot	Not in scope: data constructor `MaybeT'
2013-03-20 20:50:31	hpaste	“Anonymous Coward” annotated “Ambiguity” with “Ambiguity (annotation)” at http://hpaste.org/84387#a84389
2013-03-20 20:50:32	johnw	anything you can do with strictness annotations, you can do using seq when you create those values
2013-03-20 20:50:33	-->	beaky (~beaky@bba68378.alshamil.net.ae) has joined #haskell
2013-03-20 20:50:33	beaky	hello
2013-03-20 20:50:37	Lethalman	swineflu, yes (not me)
2013-03-20 20:50:49	arkeet	:t Control.Monad.Trans.Maybe.MaybeT
2013-03-20 20:50:50	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-20 20:50:51	lambdabot	m (Maybe a) -> Control.Monad.Trans.Maybe.MaybeT m a
2013-03-20 20:50:56	hpaste	beaky pasted “Animal List” at http://hpaste.org/84390
2013-03-20 20:51:00	arkeet	errr
2013-03-20 20:51:02	arkeet	what I wrote isn't quite it.
2013-03-20 20:51:03	johnw	twomashi: but rather than get this code to work, you may just want to use a fold :)
2013-03-20 20:51:04	arkeet	but whatever.
2013-03-20 20:51:05	-->	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has joined #haskell
2013-03-20 20:51:16	beaky	http://hpaste.org/84390 why does my code fail to compile even though all of the members of the list are instances of the Animal class?
2013-03-20 20:51:17	twomashi	johnw: going to try that.
2013-03-20 20:51:19	chrisirc	danr, aha, ok, thanks
2013-03-20 20:51:20	swineflu	Lethalman: I'm just wondering how wide spread its use is in industry
2013-03-20 20:51:21	geekosaur	cariveri, need to see rather more than that snipped (also, "do return" is redundant, plus "return" is not a control flow command, it is an expression which requires a parameter)
2013-03-20 20:51:22	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-20 20:51:35	arkeet	ExternalReality: oh see, the problem is in the encode Nothing line.
2013-03-20 20:51:44	arkeet	it doesn't know which a to use for Nothing :: Maybe a
2013-03-20 20:51:47	structuralist	`flip flip ()' is harder for me to understand than (($ ()) .)
2013-03-20 20:51:55	danr	cariveri: you probably need an argument to return (what to return)
2013-03-20 20:51:58	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-20 20:51:58	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-20 20:51:58	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-20 20:52:14	<--	bitonic (~user@dyn1217-66.wlan.ic.ac.uk) has quit (Ping timeout: 246 seconds)
2013-03-20 20:52:26	monoidal	@pl flip (\f -> (id>=>f))
2013-03-20 20:52:26	lambdabot	flip (id >=>)
2013-03-20 20:52:27	 *	hackagebot universe 0.1 - Classes for types where we know all the values  http://hackage.haskell.org/package/universe-0.1 (DanielWagner)
2013-03-20 20:52:29	monoidal	structuralist: ^
2013-03-20 20:52:30	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-03-20 20:52:31	-->	dnolen (~user@199.223.125.130) has joined #haskell
2013-03-20 20:52:40	cdk	beaky: even though they are all instances of Animal, they dont have the same type and the standard list type is homogeneous in Haskell
2013-03-20 20:52:47	arkeet	ExternalReality: so you need to fix the type of Nothing
2013-03-20 20:53:04	ion	Both flip flip () and (($ ()) .) are bad.
2013-03-20 20:53:16	geekosaur	beaky, you did not include a full error mesage, but I must point out that typeclasses are not OOP
2013-03-20 20:53:20	arkeet	perhaps Maybe (). perhaps Maybe a' (with ScopedTypeVariables)
2013-03-20 20:53:26	<--	fgomez (~Fernando@uwsclient-178-33.uws.ualberta.ca) has quit (Ping timeout: 256 seconds)
2013-03-20 20:53:29	ExternalReality	akreet: The type annotation (Nothing :: Maybe a) does not seem to give clue enough to GHC
2013-03-20 20:53:34	johnw	edwardk: see that universe package?
2013-03-20 20:53:40	cariveri	danr: expected is IO () . so nothing should be returned. I just want to pattern match the call of a function as a default of doing nothing.
2013-03-20 20:53:42	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (Quit: Coyote finally caught me)
2013-03-20 20:53:49	arkeet	ExternalReality: well yes, a is a universally quantified type variable there.
2013-03-20 20:53:56	arkeet	ExternalReality: it's the same as writing no annotation at all
2013-03-20 20:53:58	edwardk	johnw: i did
2013-03-20 20:54:08	arkeet	ExternalReality: you'll have to pin down a specific type for a.
2013-03-20 20:54:10	johnw	he took me up on a suggestion to use your representable-functors
2013-03-20 20:54:15	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 20:54:20	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-03-20 20:54:35	mzero	beaky - or in otherwords, animalList :: Animal a => [a] doesn't mean "a list of stuff so long as each of them is an Animal"....
2013-03-20 20:54:43	edwardk	ah nice
2013-03-20 20:54:43	structuralist	ion: couldn't someone directly read off "(($ ()) .) f" as "apply () to the result of f"?
2013-03-20 20:54:47	beaky	oh
2013-03-20 20:54:51	mzero	it means "a list of things of type a --- where a, the type of all of them, is an Animal"
2013-03-20 20:54:51	cariveri	geekosaur: It should do nothing. how would I do it without the return ? its a default fct _ _ = do DoNothing
2013-03-20 20:54:51	<--	fragamus (~textual@adsl-71-142-51-254.dsl.scrm01.pacbell.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 20:54:55	beaky	how do I get an object-oriented list?
2013-03-20 20:54:59	mzero	you don't
2013-03-20 20:55:00	structuralist	no intuition for flip flip though
2013-03-20 20:55:01	beaky	:(
2013-03-20 20:55:10	geekosaur	cariveri, it expects IO (), you ```return ()```
2013-03-20 20:55:12	mzero	you define    data Animal = Cat | Rat | Dog
2013-03-20 20:55:15	arkeet	:t flip flip
2013-03-20 20:55:17	lambdabot	b -> (a -> b -> c) -> a -> c
2013-03-20 20:55:18	mzero	and you're done!
2013-03-20 20:55:21	beaky	ah
2013-03-20 20:55:23	-->	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has joined #haskell
2013-03-20 20:55:27	geekosaur	beaky, you *can* do OOP in Haskell but typeclasses are not the way to do it
2013-03-20 20:55:33	mzero	there are ways to do what you were trying....
2013-03-20 20:55:35	ion	structuralist: Sure, if you’re in the writing things in a contrived way competition.
2013-03-20 20:55:40	beaky	but that's a bit different from the OOP way of achieving ad-hoc polymorphism
2013-03-20 20:55:43	-->	jamiltron (~jamiltron@c-174-62-77-25.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 20:55:45	mzero	but they are not usually what you want to do
2013-03-20 20:55:48	-->	jamiltron_ (~jamiltron@c-174-62-77-25.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 20:55:48	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 240 seconds)
2013-03-20 20:55:52	structuralist	ok how would you write flip flip () then
2013-03-20 20:55:53	beaky	ah
2013-03-20 20:55:53	jamiltron_	 /join #libgdx
2013-03-20 20:55:54	geekosaur	you might want to look up OOHaskell, which uses HList --- but this is not something trivial. haskell is functional, not OO
2013-03-20 20:55:55	mzero	(and they aren't standard Haskell - they are GHC extensions)
2013-03-20 20:56:15	<--	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has quit (Client Quit)
2013-03-20 20:56:18	geekosaur	you would do better learning how to program functionally instead of trying to force Haskell to be an OO language
2013-03-20 20:56:22	-->	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-03-20 20:56:27	monoidal	structuralist: flip (id>=>) is IMO the best way to write (>>=)
2013-03-20 20:56:36	<--	13WAASMZD (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-03-20 20:56:37	beaky	I wanna make my animals say different voices when I apply a "voice" function on them.. is the only way is the use higher-order functions?
2013-03-20 20:56:42	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 20:56:53	monoidal	structuralist: it's very intuitive that when you kleisli-compose with identity you get monadic bind
2013-03-20 20:56:55	ion	structuralist: See the expression before @pl ruined it.
2013-03-20 20:57:06	arkeet	beaky: data Animal = Animal { voice :: String, ... }
2013-03-20 20:57:06	<--	64MACV5QC (~mbc@76.14.64.156) has quit (Ping timeout: 276 seconds)
2013-03-20 20:57:26	-->	trescenzi (~trescenzi@66-140-241-100.ded.swbell.net) has joined #haskell
2013-03-20 20:57:28	mzero	or
2013-03-20 20:57:28	cariveri	geekosaur: ok "return ()" did it. thanks.
2013-03-20 20:57:30	mzero	easier
2013-03-20 20:57:30	ExternalReality	akreet: I'd like 'a' to remain polymorphic
2013-03-20 20:57:45	arkeet	ExternalReality: no
2013-03-20 20:57:54	mzero	    voice Cat = "meow"      voice Dog = "woof"
2013-03-20 20:57:54	ion	Functional and OO are not the opposites of each other.
2013-03-20 20:57:56	mzero	etc....
2013-03-20 20:58:03	<--	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has quit (Quit: Lost terminal)
2013-03-20 20:58:04	beaky	a
2013-03-20 20:58:10	arkeet	ExternalReality: ok here
2013-03-20 20:58:39	<--	Peaker (~Peaker@46.19.80.168) has quit (Ping timeout: 260 seconds)
2013-03-20 20:58:43	mzero	you only do     data Animal = Animal { voice :: String ... }    if you want each individual value to have it's own voice
2013-03-20 20:58:45	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-20 20:58:52	geekosaur	ion, that's struictly true in a vacuum but does not make Haskell speak OO paradigms natively
2013-03-20 20:58:55	hpaste	arkeet annotated “Ambiguity” with “Ambiguity (annotation)” at http://hpaste.org/84387#a84392
2013-03-20 20:58:55	structuralist	monoidal: whoah I was really confused how flip (id (>=>)) could be different from flip (>=>) for a second but yeah now it makes sense
2013-03-20 20:58:59	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 20:59:02	beaky	what if I want to define different data representations of my animals? any way to do this without having to use typeclasses or some language extensions?
2013-03-20 20:59:04	arkeet	ExternalReality: this is the morally correct way of doing it
2013-03-20 20:59:12	monoidal	 structuralist: it's section, like (2+)
2013-03-20 20:59:17	structuralist	yep, got it now
2013-03-20 20:59:25	timtom	@type (>=>)
2013-03-20 20:59:27	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-20 20:59:28	arkeet	ExternalReality: in reality, it doesn't matter what type you pick for Nothing, since they all get encoded to the single byte 0
2013-03-20 20:59:35	-->	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has joined #haskell
2013-03-20 20:59:36	<--	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-20 20:59:45	mzero	no no - easy         data Animal = Cat String | Dog Int | Insect Int Int Int
2013-03-20 20:59:48	elliott	structuralist: they can't be different
2013-03-20 20:59:51	elliott	but (id >=>) isn't (id (>=>))
2013-03-20 20:59:52	mzero	see - each constructor can have different values
2013-03-20 20:59:56	arkeet	or that
2013-03-20 21:00:01	timtom	@type (id >=>)
2013-03-20 21:00:04	lambdabot	Monad m => (b -> m c) -> m b -> m c
2013-03-20 21:00:09	ExternalReality	akreet: Yes, I realize that fact
2013-03-20 21:00:13	<--	inad922 (~inad925@93.93.84.85) has quit (Quit: Leaving)
2013-03-20 21:00:16	<--	cariveri (~cariveri@g230118249.adsl.alicedsl.de) has left #haskell
2013-03-20 21:00:24	beaky	hmm I guess I need existentials :D
2013-03-20 21:00:27	arkeet	ExternalReality: in any case you have to pick something.
2013-03-20 21:00:28	arkeet	beaky: no.
2013-03-20 21:00:38	arkeet	beaky: http://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/ and no.
2013-03-20 21:00:44	beaky	ah thanks
2013-03-20 21:00:49	mzero	or, beaky         data Animal = Cat { catBreed :: String } | Dog { dogSize :: Int } | Insect {{ insectLegs :: Int, insectFeelers :: Int }
2013-03-20 21:00:50	DanBurton	@type ((id >=>), =<<)
2013-03-20 21:00:52	ExternalReality	akreet: why can I not pick 'a'?
2013-03-20 21:00:52	lambdabot	parse error on input `)'
2013-03-20 21:00:53	structuralist	elliott: yeah I got it
2013-03-20 21:00:57	mzero	you don't need existentials for most things
2013-03-20 21:00:59	yitz	mzero: i'm sure there's some fancier way to write it, but i'd sure rather see what you wrote when i read your code
2013-03-20 21:01:05	DanBurton	@type ((id >=>), (=<<))
2013-03-20 21:01:07	lambdabot	(Monad m1, Monad m) => ((b -> m c) -> m b -> m c, (a -> m1 b1) -> m1 a -> m1 b1)
2013-03-20 21:01:12	<--	plcplc (~quassel@fw.math.ku.dk) has quit (Remote host closed the connection)
2013-03-20 21:01:12	arkeet	ExternalReality: a is an unrestricted type variable
2013-03-20 21:01:19	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Remote host closed the connection)
2013-03-20 21:01:19	shachaf	I don't know of any way to get the vtable-style optimizations that existentials give you without existentials.
2013-03-20 21:01:26	mzero	yitz - yeah, MaybeT was just as verbose - only useful if I had like a huge chain of them
2013-03-20 21:01:27	shachaf	Note that this is unrelated to type classes.
2013-03-20 21:01:47	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-20 21:01:51	<--	qzr_ (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-20 21:02:05	arkeet	ExternalReality: when you write Maybe a, that's really forall a. Maybe a
2013-03-20 21:02:25	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 21:02:27	 *	hackagebot transformers-compat 0.1.1 - Lenses, Folds and Traversals  http://hackage.haskell.org/package/transformers-compat-0.1.1 (EdwardKmett)
2013-03-20 21:02:47	elliott	edwardk: good description
2013-03-20 21:02:49	mzero	has a 9k line haskell program with only one existential in it....
2013-03-20 21:02:49	shachaf	By which I mean: (exists a. (a, (a -> Int, a -> Char, a -> Bool, ...)) can share the entire dictionary. (Int, Char, Bool, ...) takes more space the more elements you have in the tuple.
2013-03-20 21:02:52	beaky	what if I wanted to represent employee data in haskell? e.g. data Employee = Hourly { rate :: Double } | Salaried { annualPay :: Double, months :: Int } | Commissioned... converting between the value types might be difficult to do :(
2013-03-20 21:02:56	edwardk	hahahahaha
2013-03-20 21:03:09	beaky	                 you have in the tuple.
2013-03-20 21:03:13	beaky	oops misclick
2013-03-20 21:03:21	DanBurton	edwardk: ah the things we do for backwards compatibility
2013-03-20 21:03:26	dmwit	johnw: hi =)
2013-03-20 21:03:34	arkeet	hahahaha
2013-03-20 21:03:52	DanBurton	yeah looks like the synopsis got borked on that one
2013-03-20 21:03:59	mzero	beaky - what you wrote looks fine for   data EmplyeePay = .....
2013-03-20 21:04:04	mzero	I think that would work easily
2013-03-20 21:04:18	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-20 21:04:18	mzero	and writing it this way ensures that everywhere you deail with EmployeePay, you cover all three options
2013-03-20 21:04:25	beaky	ah
2013-03-20 21:04:32	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-03-20 21:04:34	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-20 21:04:36	structuralist	monoidal: okay why is it intuitive?
2013-03-20 21:04:41	ExternalReality	arkeet: ok, I think I got it. Thx
2013-03-20 21:05:18	dmwit	This is so fun.
2013-03-20 21:05:19	mzero	you'd probably factor out EmployeePay from other common Employee data     so      data Employee = Employee { empBoss :: Maybe Employee, empPay :: EmployeePay, empName :: String, empFacelessIdentifier :: Integer }
2013-03-20 21:05:26	beaky	in C++ I would make it an existential or something (then suffer thanks to using inheritance)
2013-03-20 21:05:43	dmwit	 > (&&) < (||)
2013-03-20 21:05:44	dmwit	True
2013-03-20 21:05:45	structuralist	monoidal: the intuition behind ( ($ ()) . ) . (>=>) . const was that you take the type signature of (>=>) and set a = ()
2013-03-20 21:05:52	beaky	oh right
2013-03-20 21:05:54	monoidal	structuralist: kleisli composition takes a -> m b and b -> m c and gives a -> m c. putting identity this means a = m b and then it becomes (b -> m c) -> (m b -> m c), i.e. type of bind
2013-03-20 21:05:58	-->	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has joined #haskell
2013-03-20 21:05:59	structuralist	@type (>=>)
2013-03-20 21:06:01	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-20 21:06:23	monoidal	structuralist: btw you can also avoid flip and use (<=<id)
2013-03-20 21:06:24	structuralist	monoidal: right I can see how the type works out but it seems like magic
2013-03-20 21:06:33	-->	Jesin (~Jessin_@Dyn140096.cc.lehigh.edu) has joined #haskell
2013-03-20 21:06:34	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 21:06:39	arkeet	has anyone written a monad tutorial that emphasizes return and >=> (instead of >>=)?
2013-03-20 21:06:39	monoidal	structuralist: it's just like (>>=id) gives join
2013-03-20 21:06:56	edwardk	arkeet: i've answered a lot of stack overflow questions that way
2013-03-20 21:07:02	structuralist	arkeet: definitely yes but I don't remember where
2013-03-20 21:07:03	arkeet	:)
2013-03-20 21:07:15	arkeet	I think it's a good way to think about them.
2013-03-20 21:07:24	beaky	I lvoe existentials
2013-03-20 21:07:28	 *	hackagebot transformers-compat 0.1.1.1 - A small compatibility shim exposing the new types from transformers 0.3 to older Haskell platforms.  http://hackage.haskell.org/package/transformers-compat-0.1.1.1 (EdwardKmett)
2013-03-20 21:07:29	arkeet	beaky: are they easy?
2013-03-20 21:07:37	monoidal	structuralist: there we have a function taking m a, a -> m b and putting a = m b means the function takes m (m b) and returns m b
2013-03-20 21:07:39	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-20 21:07:47	arkeet	edwardk: couldn't have overwritten 0.1.?
2013-03-20 21:07:49	arkeet	0.1.1
2013-03-20 21:08:00	beaky	they are easy yes
2013-03-20 21:08:04	edwardk	can't overwrite on hackage
2013-03-20 21:08:07	arkeet	oh
2013-03-20 21:08:20	edwardk	or i'd have a lot fewer versions out there ;)
2013-03-20 21:08:25	arkeet	lol
2013-03-20 21:08:36	<--	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has left #haskell
2013-03-20 21:08:39	monoidal	structuralist: (>=>) composes two functions and then uses join. if one of the functions is id, then it takes the function and uses join - which effectively is bind
2013-03-20 21:08:45	Taneb	As someone who mainly uploads when half asleep, I can sympathise, edwardk
2013-03-20 21:08:52	<--	mzero (~markl@207.62.246.71) has quit (Quit: mzero)
2013-03-20 21:08:57	edwardk	Taneb: heh
2013-03-20 21:09:05	-->	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has joined #haskell
2013-03-20 21:09:09	arkeet	I really like how kleisli arrows look for State.
2013-03-20 21:09:13	--	Watcher7|off is now known as Watcher7
2013-03-20 21:09:13	arkeet	(s,a) -> (s,b)
2013-03-20 21:09:20	monoidal	structuralist: do you know typeclassopedia? i got a lot of intuition from there and experiments
2013-03-20 21:09:52	structuralist	monoidal: I see how the plumbing works, now I'm looking for more "semantic" motivation. yeah I've seen typeclassopedia
2013-03-20 21:09:53	Taneb	family-tree-0.3.0.0 had requirement containers > 0.42 & < 0.6
2013-03-20 21:10:36	structuralist	the intuition I have is that going from (>=>) to (>>=) is like going from pointfree to pointful programming
2013-03-20 21:10:47	structuralist	function composition to function application
2013-03-20 21:10:57	structuralist	and the bridge is A isomorphic to () -> A
2013-03-20 21:11:09	shachaf	There isn't anything especially "pointful" about function application.
2013-03-20 21:11:14	<--	powergiant (~powergian@mailfrom.magasin.dk) has quit (Ping timeout: 245 seconds)
2013-03-20 21:11:30	DanBurton	when you apply a function, you specify a "point"
2013-03-20 21:11:33	arkeet	:t \() -> ?m >=> ?f
2013-03-20 21:11:34	<--	Jesin (~Jessin_@Dyn140096.cc.lehigh.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 21:11:35	lambdabot	(?m::a -> m b, ?f::b -> m c, Monad m) => () -> a -> m c
2013-03-20 21:11:38	arkeet	uhg
2013-03-20 21:11:42	arkeet	:t (\() -> ?m) >=> ?f
2013-03-20 21:11:44	lambdabot	(?m::m b, ?f::b -> m c, Monad m) => () -> m c
2013-03-20 21:11:49	arkeet	:t \() -> ?m >>= ?f
2013-03-20 21:11:51	lambdabot	(?m::m a, ?f::a -> m b, Monad m) => () -> m b
2013-03-20 21:12:09	<--	yacks (~yacks@180.151.36.168) has quit (Remote host closed the connection)
2013-03-20 21:12:09	structuralist	what does the "?" do there?
2013-03-20 21:12:12	<--	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has quit (Quit: MrGwen)
2013-03-20 21:12:16	dmwit	?wiki implicit arguments
2013-03-20 21:12:17	lambdabot	http://www.haskell.org/haskellwiki/implicit_arguments
2013-03-20 21:12:17	shachaf	DanBurton: For example in "(.) f g" f and g are points?
2013-03-20 21:12:27	DanBurton	shachaf: yep
2013-03-20 21:12:29	dmwit	structuralist: (that was at you)
2013-03-20 21:12:32	shachaf	I don't think that's what "point" means.
2013-03-20 21:12:41	Cale	Sure it does
2013-03-20 21:12:41	DanBurton	Then what does "point" mean?
2013-03-20 21:12:42	dmwit	um
2013-03-20 21:12:44	arkeet	shachaf: sure it does.
2013-03-20 21:12:46	dmwit	Apparently there is no wiki page for this.
2013-03-20 21:12:47	structuralist	dmwit: "There is currently no text in this page"
2013-03-20 21:12:50	hiptobecubic	that wiki page is empty
2013-03-20 21:12:56	 *	dmwit apologizes profusely
2013-03-20 21:12:57	arkeet	structuralist: implicit parameters
2013-03-20 21:12:59	Cale	This term comes from topology
2013-03-20 21:13:00	shachaf	A named argument, as in a lambda abstraction.
2013-03-20 21:13:09	Cale	A point is an element of a space (which is a set)
2013-03-20 21:13:10	monoidal	structuralist: personally I like to think x >>= f as join (fmap f x). now you put f = id and fmap id disappears
2013-03-20 21:13:14	Cale	Or in our case, a type
2013-03-20 21:13:21	<--	kennyd (~kennyd@93-138-65-185.adsl.net.t-com.hr) has quit (Ping timeout: 276 seconds)
2013-03-20 21:13:25	arkeet	structuralist: except I'm not really using it the way it was intended. I'm using them for holes.
2013-03-20 21:13:45	dmwit	structuralist: http://www.haskell.org/ghc/docs/latest/html/users_guide/other-type-extensions.html#implicit-parameters
2013-03-20 21:13:53	DanBurton	shachaf: I think of points not as the named arguments, but as the applied arguments
2013-03-20 21:13:53	dmwit	hiptobecubic: you, too, if you're interested
2013-03-20 21:13:53	monoidal	structuralist: there's analogous identity for >=> although I'm too lazy now to figure it
2013-03-20 21:14:00	<--	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has quit (Quit: WeeChat 0.4.0)
2013-03-20 21:14:07	shachaf	DanBurton: OK, then there is almost no point-free code.
2013-03-20 21:14:20	arkeet	f >=> g = join (fmap g f)
2013-03-20 21:14:24	Aune	Hello, I want to write a datatype to represent some celestial bodies. I want it to have a logical hierarchy akin to this: http://hpaste.org/84393
2013-03-20 21:14:30	arkeet	:t \f g -> join (fmap g f)
2013-03-20 21:14:31	hiptobecubic	dmwit, just found it as well
2013-03-20 21:14:32	lambdabot	(Monad m, Functor m) => m a1 -> (a1 -> m a) -> m a
2013-03-20 21:14:33	Aune	how would I go about doing that?
2013-03-20 21:14:34	arkeet	errr
2013-03-20 21:14:36	shachaf	arkeet: That looks like >>=
2013-03-20 21:14:36	arkeet	:t \f g -> join (fmap g . f)
2013-03-20 21:14:38	Cale	The thing which is points-free about points-free style is that you're defining functions without mentioning a generic point that's being acted upon, but the parts of the expressions are still likely points in respective spaces.
2013-03-20 21:14:38	lambdabot	(Monad m, Functor m) => m (m a1) -> (a1 -> a) -> m a
2013-03-20 21:14:41	arkeet	err
2013-03-20 21:14:42	arkeet	:p
2013-03-20 21:15:06	arkeet	@src (>=>)
2013-03-20 21:15:07	lambdabot	Source not found. Maybe you made a typo?
2013-03-20 21:15:11	Cale	(i.e. you don't use lambdas)
2013-03-20 21:15:20	DanBurton	shachaf: well yes and no. Going back to "(.) f g", if you think of "." as "composition" rather than "a function", then "f . g" is pointfree.
2013-03-20 21:15:22	dmwit	Aune: The simplest thing is to just make them different types.
2013-03-20 21:15:23	arkeet	:t \f g -> join . fmap g . f
2013-03-20 21:15:25	lambdabot	(Monad m, Functor m, Functor f) => f (m a1) -> (a1 -> m a) -> f (m a)
2013-03-20 21:15:31	arkeet	caaaaaale!
2013-03-20 21:15:44	Cale	What?
2013-03-20 21:15:47	arkeet	:t let (.) = (Prelude..) in \f g -> join . fmap g . f
2013-03-20 21:15:48	arkeet	this again.
2013-03-20 21:15:49	lambdabot	(Monad m, Functor m) => (a -> m a2) -> (a2 -> m a1) -> a -> m a1
2013-03-20 21:15:49	Aune	dmwit, I could do that, but is there a way to make them the same type?
2013-03-20 21:15:50	shachaf	DanBurton: This sounds like a boring argument now.
2013-03-20 21:15:54	dmwit	Aune: data Moon = Moon Name; data Planet = Planet Name [Moon]; data Sun = Sun Name [Planet]; data StarCluster = StarCluster Name [Sun]
2013-03-20 21:15:57	DanBurton	shachaf: I agree.
2013-03-20 21:16:09	hiptobecubic	dmwit, i don't see what it *does*
2013-03-20 21:16:15	arkeet	Cale: you should put (.) back to the Prelude version.
2013-03-20 21:16:27	dmwit	Aune: Yes, but you lose the guarantees that you seem to be asking for in that paste.
2013-03-20 21:16:33	DanBurton	@type (.)
2013-03-20 21:16:35	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-03-20 21:16:44	structuralist	… whaaaat
2013-03-20 21:16:53	DanBurton	why not the category version?
2013-03-20 21:16:55	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-20 21:16:58	structuralist	^ yeah
2013-03-20 21:17:00	hiptobecubic	(+2) . Just 4
2013-03-20 21:17:03	dmwit	hiptobecubic: It lets your function have implicit, named arguments which can be bound (by name) far away from the call-site.
2013-03-20 21:17:04	hiptobecubic	> (+2) . Just 4
2013-03-20 21:17:06	lambdabot	  Just 6
2013-03-20 21:17:25	arkeet	> (+2) <$> Just 4
2013-03-20 21:17:27	lambdabot	  Just 6
2013-03-20 21:17:27	Aune	dmwit, ok, I'll go with the separate datatype solution then
2013-03-20 21:17:32	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-20 21:17:34	beaky	@pl \a b c -> c b c a c a a
2013-03-20 21:17:34	lambdabot	flip =<< (flip .) . (flip =<< (flip .) . flip flip id . (ap .) . flip (flip . join . flip id))
2013-03-20 21:17:39	-->	_jwest_ (~jordan@208.90.215.138) has joined #haskell
2013-03-20 21:17:39	<--	_jwest_ (~jordan@208.90.215.138) has quit (Changing host)
2013-03-20 21:17:39	-->	_jwest_ (~jordan@unaffiliated/jwest/x-8002332) has joined #haskell
2013-03-20 21:17:39	-->	VF2 (Guile@37.250.39.46.bredband.tre.se) has joined #haskell
2013-03-20 21:17:42	arkeet	:t let (.) = (Control.Category..) in \f g -> join . fmap g . f
2013-03-20 21:17:44	lambdabot	(Monad m, Functor m) => (a -> m a2) -> (a2 -> m a1) -> a -> m a1
2013-03-20 21:17:46	hiptobecubic	dmwit, type constraints on free variables?
2013-03-20 21:17:46	DanBurton	beaky: wat
2013-03-20 21:17:49	<--	_jwest (~jordan@unaffiliated/jwest/x-8002332) has quit (Ping timeout: 260 seconds)
2013-03-20 21:17:50	--	_jwest_ is now known as _jwest
2013-03-20 21:17:54	-->	kennyd (~kennyd@78-1-154-138.adsl.net.t-com.hr) has joined #haskell
2013-03-20 21:18:06	dmwit	hiptobecubic: ...sort of, I guess?
2013-03-20 21:18:08	fizbin	:t (Control.Category..)
2013-03-20 21:18:09	lambdabot	Control.Category.Category cat => cat b c -> cat a b -> cat a c
2013-03-20 21:18:12	arkeet	ok, maybe the Category one is acceptable.
2013-03-20 21:18:26	hiptobecubic	dmwit, how is it not that?
2013-03-20 21:18:28	arkeet	but how many actual categories do we have available in lambdabot?
2013-03-20 21:18:37	monoidal	:i Category
2013-03-20 21:18:48	arkeet	@instances Category
2013-03-20 21:18:49	lambdabot	Couldn't find class `Category'. Try @instances-importing
2013-03-20 21:18:56	arkeet	@instances-importing
2013-03-20 21:18:56	lambdabot	Plugin `instances' failed with: Prelude.last: empty list
2013-03-20 21:18:58	dmwit	hiptobecubic: Well, "that" didn't really make sense to me.
2013-03-20 21:19:06	shachaf	@instances-import Control.Category Category
2013-03-20 21:19:06	arkeet	help
2013-03-20 21:19:07	lambdabot	(->), Kleisli m
2013-03-20 21:19:11	arkeet	yeah
2013-03-20 21:19:12	dmwit	So I can't be sure I'm interpreting it the way it was meant to be interpreted.
2013-03-20 21:19:18	shachaf	@instances-import Control.Category Control.Lens Category
2013-03-20 21:19:19	lambdabot	(->), Indexed i, Kleisli m
2013-03-20 21:19:27	shachaf	@instances-import Control.Category Control.Lens Control.Lens.Internal Category
2013-03-20 21:19:28	djahandarie	Kleisli is fun.
2013-03-20 21:19:29	lambdabot	(->), Indexed i, Kleisli m
2013-03-20 21:19:35	shachaf	@instances-import Control.Category Control.Lens Data.Profunctor Category
2013-03-20 21:19:36	hiptobecubic	dmwit, in the example they use  `sort = sortBy cmp`, but cmp is not defined anywhere we can see
2013-03-20 21:19:36	lambdabot	(->), Indexed i, Kleisli m, WrappedArrow p
2013-03-20 21:19:56	dmwit	hiptobecubic: Well, sort = sortBy ?cmp
2013-03-20 21:19:57	dmwit	=)
2013-03-20 21:19:59	hiptobecubic	dmwit, i call cmp a free variable because it's not bound in sort
2013-03-20 21:20:08	hiptobecubic	yes, ?cmp  :)
2013-03-20 21:20:12	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Quit: leaving)
2013-03-20 21:20:15	<--	F1skr (~F1skr@4205ds8-fb.0.fullrate.dk) has quit (Quit: WeeChat 0.4.0)
2013-03-20 21:20:17	hiptobecubic	bound by* sort
2013-03-20 21:20:27	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-20 21:21:06	dmwit	Depends how you define binding. You could say that the type given to sort indicates that it does indeed bind ?cmp. =)
2013-03-20 21:22:02	dmwit	Anyway, I think that what you said is a reasonable interpretation of what's happening.
2013-03-20 21:22:03	--	pepijndevos is now known as pepijn_away
2013-03-20 21:22:14	hiptobecubic	dmwit, binds it to what? It's just a predicate
2013-03-20 21:22:21	-->	bitonic (~user@dyn1223-176.wlan.ic.ac.uk) has joined #haskell
2013-03-20 21:22:43	dmwit	As always, you can't tell what it's bound to until you pass that function an argument.
2013-03-20 21:22:53	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-03-20 21:22:59	mcstar	it is passed implicitely
2013-03-20 21:23:01	hiptobecubic	this seems like a really useless extension. At least by this example. You'll have to define cmp somewhere else anyway and it will have a type already.
2013-03-20 21:23:02	dmwit	In this case you pass the argument by giving it the name ?cmp locally.
2013-03-20 21:23:17	-->	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has joined #haskell
2013-03-20 21:24:10	dmwit	(For comparison: in "\cmp -> sortBy cmp", what is "cmp" bound to? "cmp" certainly wouldn't be considered free there, even though you don't know what it's bound to until the lambda gets applied to an argument.)
2013-03-20 21:24:29	hiptobecubic	sure, but then it's just a normal argument. Why would you want it implicit?
2013-03-20 21:24:45	dmwit	I don't know. I've never wanted this extension as far as I can recall.
2013-03-20 21:24:50	mcstar	because different environments can lead to different cmp functions
2013-03-20 21:25:02	dmwit	"Why is this good?" is a much harder question than "What does this do?". =)
2013-03-20 21:25:04	ab9rf	i too have not seen the merits of implicit arguments
2013-03-20 21:25:05	mcstar	the calling site determines which function gets called
2013-03-20 21:25:06	VF2	could haskell be used for soft realtime or is it to unpreditcable
2013-03-20 21:25:13	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit
2013-03-20 21:25:22	--	pepijn_away is now known as pepijndevos
2013-03-20 21:25:26	ab9rf	VF2: there are issues with the garbage collector
2013-03-20 21:25:26	<--	argiopeweb (~elliot@99-181-58-141.lightspeed.dybhfl.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-03-20 21:25:30	hiptobecubic	mcstar, this is standard haskell practice though. You just pass cmp in.
2013-03-20 21:25:39	dmwit	What does soft realtime even mean?
2013-03-20 21:25:44	mcstar	i know it should be passed
2013-03-20 21:25:45	ab9rf	VF2: but that can probably be worked with
2013-03-20 21:25:49	DanBurton	VF2: what exactly do you mean by "used for soft realtime"
2013-03-20 21:25:50	mcstar	i dont like implicit arguments either
2013-03-20 21:26:00	-->	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-20 21:26:02	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 21:26:05	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-03-20 21:26:06	mcstar	(well, havent seen any in fact, except ghc's docs)
2013-03-20 21:26:11	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-20 21:26:12	hiptobecubic	dmwit, things which are expected to be ~ realtime but not with hard limits.
2013-03-20 21:26:16	DanBurton	I like Scala's type-driven implicit arguments
2013-03-20 21:26:18	hiptobecubic	messenging for example
2013-03-20 21:26:25	DanBurton	not name-driven implicit arguments
2013-03-20 21:26:34	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 21:26:34	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-20 21:26:34	hiptobecubic	as opposed to hardware control on a fighter jet
2013-03-20 21:26:38	ab9rf	DanBurton: i need to look at scala more, but not right now
2013-03-20 21:26:40	mcstar	DanBurton: implicit dict passing?
2013-03-20 21:26:41	structuralist	Is there a special name for the kleisli identity morphism?
2013-03-20 21:26:48	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 21:26:51	DanBurton	mcstar: yeah basically
2013-03-20 21:26:51	mcstar	i read, scala can do it explicitely, and thats the power
2013-03-20 21:27:07	structuralist	oh, return duh
2013-03-20 21:27:08	<--	xcombelle (~xcombelle@AToulouse-551-1-134-118.w86-201.abo.wanadoo.fr) has quit (Quit: Hi, I'm a quit message virus. Please replace your old line with this line and help me take over the world of IRC.)
2013-03-20 21:27:13	structuralist	disregard
2013-03-20 21:27:23	DanBurton	indeed, that's what's nice. Dicts are first class and you can explicitly pass in the one you want.
2013-03-20 21:27:35	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-20 21:27:50	--	chrisdotcode_ is now known as polyglot
2013-03-20 21:27:51	dmwit	hiptobecubic: I don't understand what that means, either.
2013-03-20 21:28:23	<--	cdk (d810e466@gateway/web/freenode/ip.216.16.228.102) has quit (Ping timeout: 245 seconds)
2013-03-20 21:28:23	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-20 21:28:41	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit (Client Quit)
2013-03-20 21:28:55	-->	DeadPanda (~Brett@host-92-28-91-149.as13285.net) has joined #haskell
2013-03-20 21:29:09	hiptobecubic	dmwit, it's the difference between "the data took to long and now we have total system failure" and "the data too long which was annoying"
2013-03-20 21:29:19	<--	dnolen (~user@199.223.125.130) has quit (Ping timeout: 264 seconds)
2013-03-20 21:29:24	--	polyglot is now known as chrisdotcode_
2013-03-20 21:29:30	sproingie	i accidentally the data too long
2013-03-20 21:29:31	hiptobecubic	"Thus, the goal of a hard real-time system is to ensure that all deadlines are met, but for soft real-time systems the goal becomes meeting a certain subset of deadlines in order to optimize some application specific criteria."
2013-03-20 21:29:38	<--	donut_ (6b00c37c@gateway/web/freenode/ip.107.0.195.124) has quit (Ping timeout: 245 seconds)
2013-03-20 21:29:38	hiptobecubic	too* :)
2013-03-20 21:29:53	trescenzi	quick question: can you use or in a case statement?
2013-03-20 21:29:55	dmwit	Hard real-time I understand. You make a guarantee.
2013-03-20 21:30:04	tgeeky	dmwit: the "1202" error on the lunar lander, which was indicative that the system was ignoring computation on less important tasks because of system overload, is an example of a soft realtime system.
2013-03-20 21:30:06	<--	bitonic (~user@dyn1223-176.wlan.ic.ac.uk) has quit (Ping timeout: 264 seconds)
2013-03-20 21:30:07	dmwit	Soft real-time I do not understand. There is no guarantee, so why bother saying "soft realtime"?
2013-03-20 21:30:24	-->	jao (~jao@199.223.125.130) has joined #haskell
2013-03-20 21:30:33	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-20 21:30:33	geekosaur	trescenzi, I have to guess you want to share case patterns, and the answer is no
2013-03-20 21:30:35	hiptobecubic	dmwit, it's not about what you promise to do. It's about the consequences of failure to do them
2013-03-20 21:30:40	<--	jao (~jao@199.223.125.130) has quit (Changing host)
2013-03-20 21:30:40	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-20 21:30:44	ab9rf	tgeeky: more a fail-robust system
2013-03-20 21:30:54	hiptobecubic	dmwit, if failing to do it on time means it's worthless and everything is boned, then that's hard realtime
2013-03-20 21:31:07	trescenzi	geekosaur: so you have to just have two different cases that do the same thing?
2013-03-20 21:31:17	--	chrisdotcode_ is now known as polyglot
2013-03-20 21:31:24	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-20 21:31:29	hiptobecubic	if failing to do it on time sucks but doesn't kill everyone and it's probably a good idea to still do it, even though it's late, then that's soft
2013-03-20 21:31:29	--	polyglot is now known as chrisdotcode_
2013-03-20 21:31:30	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-20 21:31:31	ab9rf	tgeeky: as i recall that was because they left an instrument on that they should have turned off and it was still feeding telemtry into the computer that they didn't need
2013-03-20 21:31:38	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-20 21:31:39	<--	Aune (~arne@teyla.lysator.liu.se) has quit (Quit: Hath Deprated)
2013-03-20 21:31:47	geekosaur	or you can rephrase in terms of guards, which do support alternation. but note that you can also have case x of thing1 -> foo; thing2 -> foo; thing3 -> some other action where foo = ...
2013-03-20 21:32:08	ab9rf	tgeeky: and to think that my TV remote has more processing power than the apollo 13 LM
2013-03-20 21:32:13	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-20 21:32:15	<--	folone_ (~folone@brln-4d0cc7d6.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-03-20 21:32:19	sproingie	there are various degrees even of hard realtime ranging from "drop the frame" to "initiate emergency robot shutdown"
2013-03-20 21:32:20	trescenzi	geekosaur: alright thanks
2013-03-20 21:32:33	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 21:32:48	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-20 21:32:53	ab9rf	realtime systems tend to be fairly sui generis in dealing with such issues
2013-03-20 21:33:08	mcstar	'dont kill the human, never kill the human!!!'
2013-03-20 21:33:10	ab9rf	it can range from "soldier on with best data" to "immediate abort"
2013-03-20 21:33:12	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 264 seconds)
2013-03-20 21:33:26	ab9rf	the 'right' decision depends on the application
2013-03-20 21:34:17	dmwit	What I'm trying to get at is that the question "Can Haskell be used for soft realtime?" is meaningless. You have to just ask about the thing you want to do instead of using a term so vague that there is no good criterion by which your question can be answered "yes" or "no" truthfully.
2013-03-20 21:34:27	ab9rf	i want to hit every person in the world who recommends either php or javascript as a first language
2013-03-20 21:34:35	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-20 21:34:54	tgeeky	ab9rf: yes, I concede. The 1201/1202 errors were about irrelevant data, not about time-sensitive data.
2013-03-20 21:35:12	-->	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has joined #haskell
2013-03-20 21:35:14	sproingie	hell, shell script can be used for soft realtime
2013-03-20 21:35:22	<--	osxorgate (~osxorgate@94.142.213.250) has quit (Remote host closed the connection)
2013-03-20 21:35:36	sproingie	i have soft realtime deadlines in my data collection apps of five minutes
2013-03-20 21:35:55	-->	BobFunk_ (~mbc@24.130.34.248) has joined #haskell
2013-03-20 21:36:16	ab9rf	i don't think there's a meaningful line between "soft" and "hard"
2013-03-20 21:36:16	mcstar	first language needs to be a shell language
2013-03-20 21:36:20	sproingie	"is haskell fast", and the answer is "hells yeah"
2013-03-20 21:36:37	ab9rf	in this case
2013-03-20 21:36:48	yitz	@faq can haskell be fast?
2013-03-20 21:36:48	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-20 21:36:53	-->	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has joined #haskell
2013-03-20 21:37:01	sproingie	@faq can haskell be slow?
2013-03-20 21:37:01	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-20 21:37:06	ab9rf	haha
2013-03-20 21:37:14	sproingie	it answered that awful quickly
2013-03-20 21:37:19	mcstar	 @faq only shows that haskell doesnt understand natural language...
2013-03-20 21:37:23	ab9rf	network monitoring is "realtime"; if you don't poll at lest every five minutes data is lost
2013-03-20 21:37:28	<--	gcmalloc_ (gcmalloc@hackerspace.fixme.ch) has quit (Excess Flood)
2013-03-20 21:38:06	tgeeky	my hard real-time has gone soft real-time :(
2013-03-20 21:38:12	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-20 21:38:14	sproingie	there's medications for that
2013-03-20 21:38:17	<--	sheerun (~sheerun@78.10.84.193) has quit
2013-03-20 21:38:28	<--	ymasory (~ymasory@209.49.103.254) has quit (Remote host closed the connection)
2013-03-20 21:38:34	sproingie	ghciagra
2013-03-20 21:38:52	-->	gcmalloc (gcmalloc@hackerspace.fixme.ch) has joined #haskell
2013-03-20 21:38:58	-->	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has joined #haskell
2013-03-20 21:39:09	mcstar	that warrants a lol
2013-03-20 21:39:10	sproingie	(ghcialis probably would have been funnier, oh well)
2013-03-20 21:39:11	ab9rf	snerk
2013-03-20 21:39:14	-->	schlicht_ (~fl@g225058247.adsl.alicedsl.de) has joined #haskell
2013-03-20 21:39:19	-->	ymasory (~ymasory@209.49.103.254) has joined #haskell
2013-03-20 21:39:27	-->	Thra11 (~thrall@87.114.148.0) has joined #haskell
2013-03-20 21:40:00	dmwit	?remember sproingie <tgeeky> my hard real-time has gone soft real-time :( <sproingie> ghcialis
2013-03-20 21:40:01	lambdabot	It is forever etched in my memory.
2013-03-20 21:40:02	-->	_jwest_ (~jordan@208.90.215.138) has joined #haskell
2013-03-20 21:40:02	<--	_jwest_ (~jordan@208.90.215.138) has quit (Changing host)
2013-03-20 21:40:02	-->	_jwest_ (~jordan@unaffiliated/jwest/x-8002332) has joined #haskell
2013-03-20 21:40:08	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 21:40:32	<--	_jwest (~jordan@unaffiliated/jwest/x-8002332) has quit (Ping timeout: 255 seconds)
2013-03-20 21:40:42	sproingie	yay :)
2013-03-20 21:40:53	timtom	@faq Can you program a 3SAT whose complexity lies in P using Haskell?
2013-03-20 21:40:54	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-20 21:41:14	-->	DinMamma (~simon@109.231.200.166) has joined #haskell
2013-03-20 21:41:25	timtom	bahaha
2013-03-20 21:41:33	<--	Thra11_ (~thrall@46.208.85.80) has quit (Ping timeout: 256 seconds)
2013-03-20 21:41:40	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 21:41:58	mcstar	@remember WinstonChurchill It is a good thing for an uneducated man to read books of quotations.
2013-03-20 21:41:58	lambdabot	Okay.
2013-03-20 21:42:06	<--	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has quit (Quit: leaving)
2013-03-20 21:42:11	otters	ghcialis
2013-03-20 21:42:12	yitz	@nixon
2013-03-20 21:42:12	lambdabot	Government enterprise is the most inefficient and costly way of producing jobs.
2013-03-20 21:42:23	timtom	is there a list of lamdabot commands?
2013-03-20 21:42:29	timtom	@reaggan
2013-03-20 21:42:30	lambdabot	Unknown command, try @list
2013-03-20 21:42:31	sproingie	@help
2013-03-20 21:42:31	lambdabot	help <command>. Ask for help for <command>. Try 'list' for all commands
2013-03-20 21:42:33	timtom	@list
2013-03-20 21:42:34	lambdabot	http://code.haskell.org/lambdabot/COMMANDS
2013-03-20 21:42:51	timtom	@lojban
2013-03-20 21:42:54	<--	morazow (~morazow@gsd116.gsd.inesc-id.pt) has quit (Ping timeout: 260 seconds)
2013-03-20 21:42:55	<--	schlicht (~fl@g226062123.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-03-20 21:42:59	yitz	timtom: that list is likely outdated though
2013-03-20 21:43:20	timtom	@prontotorpedo
2013-03-20 21:43:21	lambdabot	on the haskell site they compare haskell to a spreadsheet
2013-03-20 21:43:33	mcstar	yitz: not surprising, lists are immutable
2013-03-20 21:43:44	<--	ymasory (~ymasory@209.49.103.254) has quit (Ping timeout: 245 seconds)
2013-03-20 21:43:46	timtom	yitz: ok
2013-03-20 21:44:19	otters	#haskell is funny this afternoon
2013-03-20 21:44:34	-->	skp (~skp@88-190-221-99.rev.dedibox.fr) has joined #haskell
2013-03-20 21:44:51	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 260 seconds)
2013-03-20 21:45:11	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-20 21:46:26	<--	_jwest_ (~jordan@unaffiliated/jwest/x-8002332) has quit (Ping timeout: 252 seconds)
2013-03-20 21:46:47	trescenzi	Are steps in do blocks executed sequentially or might they be executed lazily?
2013-03-20 21:46:55	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 21:47:29	geekosaur	depends on how (>>=) is defined for the monad
2013-03-20 21:47:30	timtom	trescenzi: do blocks are just syntactic sugar for monad bindings (i.e >>= )
2013-03-20 21:47:40	timtom	trescenzi: so it all depends on the monad you are using
2013-03-20 21:47:54	otters	i think in the IO monad they're executed sequentially aren't they
2013-03-20 21:48:22	trescenzi	I guess it would be IO in my case. It's all going on inside do blocks inside functions in main
2013-03-20 21:48:32	otters	yeah, it would have to be in IO
2013-03-20 21:48:41	trescenzi	Ok makes sense.
2013-03-20 21:48:51	trescenzi	So IO is sequential? It would have to be wouldn't it?
2013-03-20 21:49:11	tac_	There's lazy IO
2013-03-20 21:49:16	otters	right, b
2013-03-20 21:49:27	timtom	System.IO is lazy and sequential afaik
2013-03-20 21:49:37	otters	steps aren't executed out of order
2013-03-20 21:49:41	otters	as far as I know
2013-03-20 21:49:45	otters	"order" being how the programmer wrote it
2013-03-20 21:50:07	mcstar	wouldnt be any point in using a monad for IO if it wasnt sequential
2013-03-20 21:50:17	-->	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has joined #haskell
2013-03-20 21:50:27	trescenzi	Yea that could return weird results if it wasn't sequential
2013-03-20 21:52:58	<--	amyers (~quassel@38.102.20.61) has quit (Read error: Operation timed out)
2013-03-20 21:53:08	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-20 21:53:23	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-20 21:53:23	ab9rf	IO monad guarantees order only
2013-03-20 21:53:27	-->	Thra11_ (~thrall@146.90.224.184) has joined #haskell
2013-03-20 21:53:36	<--	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has quit (Read error: Connection timed out)
2013-03-20 21:53:40	ab9rf	you're not guaranteed that IO will have actually occurred
2013-03-20 21:53:41	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Quit: Leaving)
2013-03-20 21:54:49	mcstar	order is sequentiality
2013-03-20 21:54:52	mcstar	in my dict
2013-03-20 21:54:57	mcstar	am i wrong?
2013-03-20 21:55:16	ab9rf	do you want to be wrong?
2013-03-20 21:55:18	-->	Sculptor_ (~Sculptor@89.110.220.38) has joined #haskell
2013-03-20 21:55:29	mcstar	that doesnt matter
2013-03-20 21:55:48	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 240 seconds)
2013-03-20 21:55:54	<--	realnot (~realnot@unaffiliated/realnot) has quit (Ping timeout: 264 seconds)
2013-03-20 21:56:06	<--	rcfox (~ryan@taurine.csclub.uwaterloo.ca) has left #haskell
2013-03-20 21:56:12	trescenzi	I agree with mcstar lol in the long run what I care about is execution order of my functions
2013-03-20 21:56:31	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 21:56:32	mcstar	i want to hear what ab9rf has to say
2013-03-20 21:56:36	<--	Thra11 (~thrall@87.114.148.0) has quit (Ping timeout: 264 seconds)
2013-03-20 21:56:38	hpc	i also care that it actually runs though
2013-03-20 21:56:46	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-20 21:56:52	armlesshobo	mcstar: if you don't care whether or not it actually happens, then you're fine.
2013-03-20 21:57:00	hpc	it brings to mind a certain nosql database
2013-03-20 21:57:08	hpc	where it doesn't matter what happens as long as it gets done really fast
2013-03-20 21:57:10	elliott	ab9rf: whtat does "you're not guaranteed that IO will have actually occurred" mean?
2013-03-20 21:57:18	trescenzi	hpc: why would you ever use nosql and haskell together
2013-03-20 21:57:35	hpc	trescenzi: i wouldn't, unless you lump acid-state into that godawful category
2013-03-20 21:57:35	mcstar	well, there are stuff that i write in IO (pure code) that might actually not happen, but IO actions when happen happen in order/sequentially
2013-03-20 21:57:46	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-20 21:58:01	hpc	actually, speaking of which
2013-03-20 21:58:02	<--	Tharugrim (~Tharugrim@91-113-43-122.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-20 21:58:03	DanBurton	trescenzi: any number of reasons dealing with an existing nosql database
2013-03-20 21:58:08	hpc	has takusen been maintained?
2013-03-20 21:58:24	hpc	or something similar? i like the concept of combinator generators for sql
2013-03-20 21:58:38	-->	Tharugrim (~Tharugrim@91-113-43-122.adsl.highway.telekom.at) has joined #haskell
2013-03-20 21:59:04	trescenzi	DanBurton: yea existing would make sense I guess
2013-03-20 21:59:25	<--	Ralith (~ralith@d142-058-092-218.wireless.sfu.ca) has quit (Ping timeout: 256 seconds)
2013-03-20 21:59:36	Tene	My last company has production code that talks to sql and nosql.  It's interoperating with existing data stores.
2013-03-20 21:59:54	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-03-20 22:00:25	Tene	They're working on getting away from PHP.
2013-03-20 22:00:26	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-20 22:00:26	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-20 22:00:26	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-20 22:01:54	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 264 seconds)
2013-03-20 22:02:38	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-20 22:03:45	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 22:03:57	DanBurton	God rest their souls
2013-03-20 22:04:05	ab9rf	elliott: at any particular point you can't be sure whether any particular IO action has happened, except that you know that all IO actions that have actually happened occurred in order
2013-03-20 22:04:23	-->	maufred_ (~maufred@gob75-8-88-165-219-241.fbx.proxad.net) has joined #haskell
2013-03-20 22:04:52	ab9rf	elliott: it is possible for an IO action to _never_ happen, although i think that would only happen in the case of an abnormal termination.
2013-03-20 22:04:55	elliott	ab9rf: what do you mean by "at any particular point"? at a certain point in a sequence of IO actions?
2013-03-20 22:04:59	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 245 seconds)
2013-03-20 22:05:03	-->	folone_ (~folone@brln-4d0cc7d6.pool.mediaWays.net) has joined #haskell
2013-03-20 22:05:05	elliott	are you just thinking of unsafeInterleaveIO or such? e.g. as used by getContents
2013-03-20 22:05:06	hpc	oh, i see what you mean
2013-03-20 22:05:14	DanBurton	well if we're getting really existential, we could argue about whether anything has ever actually occurred >.>
2013-03-20 22:05:19	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-20 22:05:23	Tene	Another reason to use nosql is for nonrelational data sets, caching, plenty of reasons.
2013-03-20 22:05:33	hpc	17:04 < ab9rf> at any particular point in evaluating the value "main", you can't be sure whether any particular IO action has happened, except that you know that all IO actions that have actually happened occurred in order
2013-03-20 22:05:35	-->	realnot (~realnot@host13-62-dynamic.52-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-20 22:05:35	<--	realnot (~realnot@host13-62-dynamic.52-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-20 22:05:35	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-20 22:05:38	hpc	ab9rf: ^ that, yes?
2013-03-20 22:05:39	ab9rf	sql is a crappy database for storing object-structured data
2013-03-20 22:05:43	<--	maufred_ (~maufred@gob75-8-88-165-219-241.fbx.proxad.net) has quit (Client Quit)
2013-03-20 22:05:56	ab9rf	hpc: something like that
2013-03-20 22:06:02	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-20 22:06:07	<--	notthemessiah (~notthemes@c-69-249-202-63.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-03-20 22:06:17	sproingie	objects are a crappy schema for representing relational data
2013-03-20 22:06:23	ab9rf	sproingie: that too
2013-03-20 22:06:42	 *	elliott really doesn't understand what ab9rf means. if you have "do { s <- getLine; ... }" then you know that by the time of ..., a line has been gotten
2013-03-20 22:06:49	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-20 22:06:59	hpc	ab9rf: so basically, "execution of IO actions is slower or equal to evaluation of IO actions"
2013-03-20 22:06:59	ab9rf	elliott: not necessarily, not until you do something that needs s
2013-03-20 22:07:03	elliott	ab9rf: that is false.
2013-03-20 22:07:10	elliott	it would be true if it was "unsafeInterleaveIO getLine".
2013-03-20 22:07:14	elliott	but it is not.
2013-03-20 22:07:17	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-20 22:07:25	hpc	or even "haskell's standard evaluation semantics plus the fact that execution depends on evaluation"
2013-03-20 22:07:34	-->	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has joined #haskell
2013-03-20 22:07:40	c_wraith	execution of IO requires evaluating it.
2013-03-20 22:07:44	DanBurton	but the fact that unsafeInterleaveIO exists should put you on edge, wondering if any of the IO actions you use are unsafely interleaved
2013-03-20 22:07:44	c_wraith	So...  yeah
2013-03-20 22:07:57	ab9rf	DanBurton: hence the 'unsafe'
2013-03-20 22:07:57	DanBurton	e.g. readFile or whatever
2013-03-20 22:08:09	elliott	ab9rf: in do { s <- getLine; ... } it is unambiguous
2013-03-20 22:08:12	ab9rf	elliott: hm, i'll have to go reread soet stuff again
2013-03-20 22:08:36	<--	bergey (~user@ip-66-80-90-109.iad.megapath.net) has quit (Remote host closed the connection)
2013-03-20 22:08:39	elliott	it is true that unsafeInterleaveIO can make the evaluation of values cause execution like this, but that is more a pitfall of readFile/getContents than IO
2013-03-20 22:09:08	elliott	just as unsafePerformIO's existence doesn't really mean that Haskell is impure so much that it means unsafePerformIO is unsafe
2013-03-20 22:09:09	DanBurton	I would call it a pitfall of unsafeInterleaveIO
2013-03-20 22:09:44	-->	ymasory (~ymasory@209.49.103.254) has joined #haskell
2013-03-20 22:09:45	c_wraith	The best way to treat it is the observation that unsafeInterleaveIO is a crazy kind of concurrency
2013-03-20 22:09:56	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 246 seconds)
2013-03-20 22:10:14	-->	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has joined #haskell
2013-03-20 22:10:18	<--	appamatto (~appamatto@65.19.130.32) has quit (Ping timeout: 264 seconds)
2013-03-20 22:10:43	<--	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-20 22:10:48	<--	trescenzi (~trescenzi@66-140-241-100.ded.swbell.net) has quit (Remote host closed the connection)
2013-03-20 22:10:50	-->	papermachine (~paper@pal-166-104.itap.purdue.edu) has joined #haskell
2013-03-20 22:11:04	DanBurton	You should worry about IO values using "unsafeInterleaveIO" in the same way that you should worry about pure values using "unsafePerformIO". Just make sure you trust where your values are coming from.
2013-03-20 22:11:06	--	pepijndevos is now known as pepijn_away
2013-03-20 22:11:20	<--	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has quit (Client Quit)
2013-03-20 22:11:38	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 22:11:49	<--	MroiZo (~quassel@79.138.249.40.bredband.3.dk) has quit (Remote host closed the connection)
2013-03-20 22:12:04	c_wraith	I really dislike that things exposed by Prelude use unsafeInterleaveIO, though
2013-03-20 22:12:29	<--	cfricke (~cfricke@96.45.197.22) has quit (Ping timeout: 255 seconds)
2013-03-20 22:12:29	c_wraith	If they were all in modules that made it clear what they do, it'd be way nicer as a policy.
2013-03-20 22:12:30	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-03-20 22:12:39	c_wraith	Though it'd make quick example programs more work
2013-03-20 22:12:40	tac_	what are the operational semantics of unsafeInterleaveIO?
2013-03-20 22:12:41	dmwit	There's lots of things not to like about the Prelude.
2013-03-20 22:12:51	DanBurton	dmwit++
2013-03-20 22:13:09	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Quit: Lost terminal)
2013-03-20 22:13:16	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 272 seconds)
2013-03-20 22:13:19	c_wraith	tac_: GHC implementation specifically?
2013-03-20 22:13:47	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-20 22:13:50	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-20 22:13:56	tac_	sure. I don't use anything else.
2013-03-20 22:14:07	c_wraith	It is roughly equivalent to return . unsafePerformIO
2013-03-20 22:14:18	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-20 22:14:20	tac_	hmm
2013-03-20 22:14:21	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-20 22:14:27	<--	Taneb (~nathan@host-84-13-68-168.opaltelecom.net) has quit (Quit: Leaving)
2013-03-20 22:14:32	c_wraith	With a couple added tricks to make sure that the IO action it's passed isn't ever duplicated by the optimizer
2013-03-20 22:14:45	c_wraith	Or rather, hit by CSE
2013-03-20 22:15:03	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-20 22:15:06	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-20 22:15:08	tac_	so it's executed at most once, but only when the value is forced?
2013-03-20 22:15:12	c_wraith	yes
2013-03-20 22:15:20	tac_	kk
2013-03-20 22:15:26	tac_	So it's how you implement lazy IO then, right?
2013-03-20 22:15:30	c_wraith	yes
2013-03-20 22:15:43	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-20 22:15:46	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-20 22:15:48	tac_	and "Prelude things that use it" would be mostly getContents
2013-03-20 22:15:54	dmwit	I marvel that "it's like return . unsafePerformIO" was an acceptable answer to "what are the operational semantics".
2013-03-20 22:16:10	c_wraith	getContents, readFile, interact
2013-03-20 22:16:12	<--	ymasory (~ymasory@209.49.103.254) has quit (Ping timeout: 252 seconds)
2013-03-20 22:16:17	<--	paolino (~paolino@net-2-32-31-71.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-03-20 22:16:18	dmwit	It seems like you'd at least want to know the operational semantics of "unsafePerformIO" next. =P
2013-03-20 22:16:24	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-20 22:16:26	 *	tac_ marvels that dmwit marvels at that thing.
2013-03-20 22:16:52	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-20 22:17:03	dmwit	...and I think an operational semantics of unsafePerformIO would have to include an operational semantics of pure values, which nobody's done, right?
2013-03-20 22:17:08	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 22:17:46	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-03-20 22:17:46	c_wraith	Not formally for the language
2013-03-20 22:17:56	c_wraith	However, you can say "look at the GHC implementation"
2013-03-20 22:17:56	 *	tac_ wasn't asking a formal question, really.
2013-03-20 22:18:06	c_wraith	Which is a terrible way to specify something
2013-03-20 22:18:12	c_wraith	but it works, more or less, for these purposes
2013-03-20 22:18:21	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Remote host closed the connection)
2013-03-20 22:18:24	monochrom	I have done. http://www.vex.net/~trebla/haskell/lazy.xhtml
2013-03-20 22:18:33	c_wraith	The problem is when a new version of GHC *changes* some detail
2013-03-20 22:18:40	elliott	dmwit: "how can I express the operational semantics of this in terms of my intuition about the operational semantics of the rest of the language?"
2013-03-20 22:18:51	c_wraith	like the change that allowed one-arg infix functions
2013-03-20 22:18:54	elliott	monochrom: does that handle async exceptions and stuff?
2013-03-20 22:18:58	-->	lennart_ (~lennart@kiel-5f77bfc3.pool.mediaWays.net) has joined #haskell
2013-03-20 22:18:59	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-20 22:19:23	monochrom	not yet, I haven't done errors
2013-03-20 22:19:41	c_wraith	That seems like a significant source of complication
2013-03-20 22:19:48	-->	appamatto (~appamatto@65.19.130.32) has joined #haskell
2013-03-20 22:20:07	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 22:20:44	<--	samedhi (~stephen@208.70.28.214) has quit (Quit: samedhi)
2013-03-20 22:21:10	-->	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has joined #haskell
2013-03-20 22:21:25	<--	[mth] (~mth@1.144.7.247) has quit (Ping timeout: 260 seconds)
2013-03-20 22:21:42	dmwit	monochrom: cool
2013-03-20 22:23:20	-->	kallisti (~eris@168.28.136.16) has joined #haskell
2013-03-20 22:23:21	<--	kallisti (~eris@168.28.136.16) has quit (Changing host)
2013-03-20 22:23:21	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-03-20 22:23:51	<--	appamatto (~appamatto@65.19.130.32) has quit (Changing host)
2013-03-20 22:23:51	-->	appamatto (~appamatto@copyfree/advocate/appamatto) has joined #haskell
2013-03-20 22:23:58	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-20 22:24:06	dmwit	I would also point at "A Natural Semantics for Lazy Evaluation".
2013-03-20 22:25:03	-->	Sculptor__ (~Sculptor@89.110.220.38) has joined #haskell
2013-03-20 22:25:32	<--	HugoDaniel (~hugo@elab.fcsh.unl.pt) has quit (Quit: Lost terminal)
2013-03-20 22:25:47	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-20 22:26:53	<--	Sculptor_ (~Sculptor@89.110.220.38) has quit (Ping timeout: 258 seconds)
2013-03-20 22:27:11	monochrom	actually, I have done errors. "If none of the equations is chosen, it's a runtime error". that is one source of async exceptions. (the other source is throwTo)
2013-03-20 22:28:30	<--	habbbe (~habbbe@cust-95-80-58-209.csbnet.se) has left #haskell
2013-03-20 22:28:49	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 22:28:51	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: [BX] Tickle-Me Elmo uses BitchX. *giggle* *giggle* *giggle*)
2013-03-20 22:29:26	-->	kuribas (~user@94-227-88-230.access.telenet.be) has joined #haskell
2013-03-20 22:29:29	monochrom	perhaps the async exception paper has done too much scaremongering of "you never know". but you can know. not perfectly, but enough for practice.
2013-03-20 22:29:34	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 260 seconds)
2013-03-20 22:30:42	c_wraith	Well, there is a history of imprecise exceptions messing up some parts of hUnit
2013-03-20 22:30:55	c_wraith	You can make the point that it means those parts of hUnit weren't implemented well
2013-03-20 22:30:58	monochrom	suppose thread A constructs "head []" and hands it to thread B, and thread B prints "hello" and then prints what it receives from thread A. then the exception occurs in thread B, and it is after printing "hello". this much you know.
2013-03-20 22:31:04	c_wraith	But you can also make the point that it's hard to implement right
2013-03-20 22:31:29	<--	Sculptor__ (~Sculptor@89.110.220.38) has quit (Ping timeout: 258 seconds)
2013-03-20 22:31:43	-->	taterbase (~taterbase@65.181.52.150) has joined #haskell
2013-03-20 22:31:43	<--	shurikas (~Kostas@195.181.64.50) has quit (Ping timeout: 264 seconds)
2013-03-20 22:31:45	-->	jbu (84ef37dc@gateway/web/freenode/ip.132.239.55.220) has joined #haskell
2013-03-20 22:31:47	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-20 22:31:48	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 22:32:30	jbu	hi all: can someone help explain what "forall a. a -> a" means? specifically the forall and the period are confusing me.  I couldn't even understand the haskell description here http://www.haskell.org/haskellwiki/Keywords#forall
2013-03-20 22:33:09	shachaf	jbu: It means that the person who's using it can choose any "a" they want.
2013-03-20 22:33:14	monochrom	the period is punctuation, delimiter, whatever you call it for mere syntax
2013-03-20 22:33:22	elliott	jbu: it means that it is type (a -> a) for any a you want at all when using it
2013-03-20 22:33:31	elliott	you can use it as Int -> Int, String -> String, (Char -> Bool) -> (Char -> Bool), etc.
2013-03-20 22:33:52	otters	correct me if I'm wrong, but there's an implicit forall in most type signatures
2013-03-20 22:33:56	otters	those that use type variables, that is
2013-03-20 22:34:02	monochrom	yes
2013-03-20 22:34:07	elliott	yes, "foo :: a -> a" is the same as "foo :: forall a. a -> a"
2013-03-20 22:34:08	hpc	otters: in any polymorphic type signature, yes
2013-03-20 22:34:11	elliott	except the latter is non-standard
2013-03-20 22:34:11	jbu	elliott & shachaf: I thought a type variable already let you do that?  it just substitutes any type for "a" ... I've never seen the need for "forall"
2013-03-20 22:34:19	-->	oren1 (~Adium@140.247.0.66) has joined #haskell
2013-03-20 22:34:19	otters	jbu: right, but in some cases
2013-03-20 22:34:22	shachaf	jbu: Yes, "id :: forall a. a -> a" means the same thing as "id :: a -> a"
2013-03-20 22:34:33	<--	appamatto (~appamatto@copyfree/advocate/appamatto) has quit (Ping timeout: 256 seconds)
2013-03-20 22:34:35	ciaranm	jbu: think a -> (forall a. a)
2013-03-20 22:34:37	elliott	jbu: you use the forall for three things:
2013-03-20 22:34:39	shachaf	(In some cases it can be different but not in a fundamental way.)
2013-03-20 22:34:42	elliott	1. being explicit (rarely)
2013-03-20 22:34:44	shachaf	ciaranm: What?
2013-03-20 22:34:48	elliott	2. for ScopedTypeVariables
2013-03-20 22:34:54	<--	BobFunk_ (~mbc@24.130.34.248) has quit (Ping timeout: 264 seconds)
2013-03-20 22:34:54	elliott	3. rank-2 types -- where you have (forall a. ...) -> b
2013-03-20 22:35:01	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-20 22:35:04	ciaranm	where a is b, obviously!
2013-03-20 22:35:07	elliott	for instance, ST uses a type (forall s. ST s a) -> a. this is the primary use of forall
2013-03-20 22:35:16	elliott	and can't be expressed without it
2013-03-20 22:35:17	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-03-20 22:35:19	otters	data BlackBox = forall a. Box a
2013-03-20 22:35:24	monochrom	consider whee :: (forall a. a -> Int) -> Int.  you cannot omit the forall now. if you omit it, different type altogether.
2013-03-20 22:35:24	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 260 seconds)
2013-03-20 22:35:39	<--	mcstar (~mcstar@adsl-89-135-206-203.monradsl.monornet.hu) has quit (Quit: mcstar)
2013-03-20 22:35:43	-->	Corey (~Corey@freenode/staff/corey) has joined #haskell
2013-03-20 22:36:01	twomashi	is it ok if my project depends on multiple versions of containers?
2013-03-20 22:36:08	shachaf	callCC :: ((forall b. a -> b) -> a) -> a -- has the same variance
2013-03-20 22:36:08	jbu	hmm to be  honest, nobody's explanation reached through to me...
2013-03-20 22:36:12	shachaf	twomashi: Probably not.
2013-03-20 22:36:14	hiptobecubic	twomashi, not if you want it to work ever
2013-03-20 22:36:17	twomashi	i just installed 0.5.0.0 to get Data.Map.Strict
2013-03-20 22:36:28	shachaf	jbu: It can take a while to figure it out. :-)
2013-03-20 22:36:36	twomashi	It compiled, though many modules didn't compile from scratch..
2013-03-20 22:36:36	<--	boegel (~boegel@109.130.137.51) has quit (Quit: Leaving)
2013-03-20 22:36:52	hiptobecubic	jbu, ghc will try to resolve the a in a -> Int. If it later needs to use a different type for 'a', it will barf.
2013-03-20 22:36:52	-->	bradleyayers (~brad@49.176.97.3) has joined #haskell
2013-03-20 22:36:53	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-20 22:37:26	oren1	Random Question:Who knows a Haskell module that (1) can be run from the command line with a file as an argument and (2) generates some output from that file.
2013-03-20 22:37:30	 *	hackagebot filestore 0.6.0.1 - Interface for versioning file stores.  http://hackage.haskell.org/package/filestore-0.6.0.1 (JohnMacFarlane)
2013-03-20 22:37:46	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-20 22:38:01	monochrom	cabal-install always chooses unique containers (or any lib) per project
2013-03-20 22:38:18	<--	taterbase (~taterbase@65.181.52.150) has quit (Remote host closed the connection)
2013-03-20 22:38:22	oren1	I'm looking for some example source code to see how people have structured this kind of use case in Haskell.
2013-03-20 22:38:29	<--	ncw (ncw@conference/pycon/x-odpynibiggfkzqhc) has quit (Remote host closed the connection)
2013-03-20 22:38:32	hiptobecubic	> let f g = (g (), g [])
2013-03-20 22:38:33	lambdabot	  not an expression: `let f g = (g (), g [])'
2013-03-20 22:38:40	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-20 22:38:41	hiptobecubic	@let f g = (g (), g [])
2013-03-20 22:38:43	lambdabot	 <local>:17:16:
2013-03-20 22:38:43	lambdabot	     Couldn't match expected type `()' with actual type `[a0]...
2013-03-20 22:38:44	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-20 22:38:48	hiptobecubic	jbu, ^
2013-03-20 22:38:53	elliott	jbu: let's say you have (forall a. a -> a) -> (Int, String)
2013-03-20 22:39:01	hpc	oren1: you'd get the file path from getArgs, open the file, do something with it, then close it
2013-03-20 22:39:01	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-20 22:39:03	elliott	jbu: foo :: (forall a. a -> a) -> (Int, String); foo f = (f 123, f "abc")
2013-03-20 22:39:06	hpc	same as any language
2013-03-20 22:39:14	elliott	jbu: this means you have to pass a function with type (forall a. a -> a) in
2013-03-20 22:39:22	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Quit: leaving)
2013-03-20 22:39:25	elliott	of course, the only function of that type is id. (so this isn't very useful, but it's just an example.)
2013-03-20 22:39:31	hpc	oren1: without more info on what you want, the best abstraction i can give you is to use a with-function
2013-03-20 22:39:33	elliott	in particular, "foo" gets to pick what "a"s it uses your function with.
2013-03-20 22:39:42	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-20 22:39:53	elliott	with "foo :: (a -> a) -> (Int, String)", the *caller* of "foo" would get to pick the "a". because it is "foo :: forall a. (a -> a) -> (Int, String)"
2013-03-20 22:39:55	<--	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has quit (Ping timeout: 258 seconds)
2013-03-20 22:39:59	elliott	(i.e., foo works with any "a" you want.)
2013-03-20 22:40:05	elliott	which doesn't work, of course
2013-03-20 22:40:14	<--	dzhus (~dzhus@95-31-27-234.broadband.corbina.ru) has quit (Read error: Operation timed out)
2013-03-20 22:40:22	<--	gustavnils (~textual@31.210.251.9) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-20 22:40:26	jbu	elliott: thanks, I understand that
2013-03-20 22:40:31	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-20 22:40:33	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-20 22:40:42	-->	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-20 22:40:50	jbu	elliott: your case 2 and 3 earlier confused me , but I'm not sure if I need to understand those at the moment
2013-03-20 22:41:05	<--	Corey (~Corey@freenode/staff/corey) has quit (Quit: leaving)
2013-03-20 22:41:09	elliott	this is an example of 3
2013-03-20 22:41:12	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 22:41:12	elliott	the type of foo is a rank-2 type
2013-03-20 22:41:14	jbu	elliott: so is forall just omitted a lot of the time in function signatures?
2013-03-20 22:41:38	elliott	forall is only omitted at the "top level". i.e., if you have "foo :: t", and t uses a lot of type variables, then it's "foo :: forall v1 v2 v3 ... . t"
2013-03-20 22:41:40	oren1	i want to do some text transformations and format source code
2013-03-20 22:41:48	elliott	"foo :: (a -> a) -> (Int, String)" is "foo :: forall a. (a -> a) -> (Int, String)"
2013-03-20 22:42:07	elliott	this is why you only need forall if you want to write a rank-2 signature: i.e. a function that takes something like (forall a. ...) as an argument, like the correct foo I gave
2013-03-20 22:42:10	thorsten`	can i somehow tell haskell to check that a function never ends in an error/exception? i've got this http://wwwcip.cs.fau.de/~re06huxa/p/995841750456dcf01ad7b9775e2f38a3 and theoretically the "head" might fail
2013-03-20 22:42:32	c_wraith	thorsten`: that's beyond haskell's ability to check
2013-03-20 22:42:40	elliott	#2 is an unrelated use that you'll probably end up needing at some point but isn't very relevant otherwise :P
2013-03-20 22:42:52	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 22:42:54	elliott	(ScopedTypeVariables only uses the "forall" keyword for backwards compatibility with standard Haskell, anyway)
2013-03-20 22:43:22	c_wraith	thorsten`: (this is because Haskell is a turing-complete language)
2013-03-20 22:43:27	<--	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Quit: emmanuelux)
2013-03-20 22:43:30	-->	appamatto (~appamatto@65.19.130.32) has joined #haskell
2013-03-20 22:43:35	<--	gentleben (~gentleben@208.74.182.4.static.etheric.net) has quit (Quit: gentleben)
2013-03-20 22:43:45	<--	ExternalReality (~user@38.122.11.254) has quit (Remote host closed the connection)
2013-03-20 22:43:53	thorsten`	i mean i could do pattern matching and then it could be checked at compile time if the pattern matching is exhaustive
2013-03-20 22:44:09	c_wraith	oh. GHC will do that if you use the -Wall flag
2013-03-20 22:44:18	c_wraith	But there are many other ways to get exceptions
2013-03-20 22:44:24	-->	bergey (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-03-20 22:44:49	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 22:44:51	-->	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has joined #haskell
2013-03-20 22:44:52	thorsten`	e.g.?
2013-03-20 22:45:11	monochrom	exhaustive pattern matching is easy, and does not eliminate errors/exceptions
2013-03-20 22:45:26	monochrom	Prelude's head definitely passes the -Wall test.
2013-03-20 22:45:48	c_wraith	> head [] -- does not actually contain any incomplete pattern matches
2013-03-20 22:45:49	lambdabot	  *Exception: Prelude.head: empty list
2013-03-20 22:45:52	DanBurton	well no one thing could possibly "eliminate errors/exceptions" except god
2013-03-20 22:45:55	<--	hkj (~textual@89.191.21.94) has quit (Quit: Computer has gone to sleep.)
2013-03-20 22:45:59	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 22:46:10	DanBurton	@src head
2013-03-20 22:46:10	lambdabot	head (x:_) = x
2013-03-20 22:46:10	lambdabot	head []    = undefined
2013-03-20 22:46:16	<--	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (Ping timeout: 252 seconds)
2013-03-20 22:46:21	c_wraith	that source is not actually correct, but whatever
2013-03-20 22:46:24	aristid	> head []
2013-03-20 22:46:27	lambdabot	  *Exception: Prelude.head: empty list
2013-03-20 22:46:33	DanBurton	It's cute how @src lies :P
2013-03-20 22:46:34	c_wraith	it's clearly using error with a custom message
2013-03-20 22:46:36	jbu	elliott: does Forall mean something different if it appears without the period: "data Scheme  =  Forall [TVar] Type" ?
2013-03-20 22:46:36	-->	ncw (ncw@conference/pycon/x-icpghmawvquzpenw) has joined #haskell
2013-03-20 22:46:46	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-20 22:46:48	shachaf	jbu: It's just a plain old constructor there, nothing special.
2013-03-20 22:46:52	shachaf	Might as well be called Foo.
2013-03-20 22:46:54	elliott	jbu: that's just someone else's code
2013-03-20 22:46:58	elliott	presumably modelling a programming language with forall
2013-03-20 22:47:00	shachaf	The keyword is "forall".
2013-03-20 22:47:04	-->	ymasory (~ymasory@209.49.103.254) has joined #haskell
2013-03-20 22:47:04	<--	oren1 (~Adium@140.247.0.66) has left #haskell
2013-03-20 22:47:07	monochrom	it is the same as "data Scheme = Hello [TVar] Type"
2013-03-20 22:47:18	monochrom	what an XY Problem
2013-03-20 22:47:24	jbu	shachaf: You're saying that it could just be written as "data Scheme = Foo [TVar] Type"?
2013-03-20 22:47:26	<--	sleepynate (~sleepynat@108.204.29.249) has quit (Remote host closed the connection)
2013-03-20 22:47:31	 *	hackagebot libxml-sax 0.7.4 - Bindings for the libXML2 SAX interface  http://hackage.haskell.org/package/libxml-sax-0.7.4 (JohnMillikin)
2013-03-20 22:47:47	jbu	monochrom: gotcha
2013-03-20 22:47:52	jbu	thanks all
2013-03-20 22:47:56	elliott	monochrom: well, jbu would arguably be unable to understand what Scheme means in terms of what the code is modelling without the info given :P
2013-03-20 22:47:58	shachaf	jbu: Yes.
2013-03-20 22:48:13	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-20 22:48:30	-->	Rarrikins_z_t (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-20 22:48:34	shachaf	elliott: I found forall in logic much more obvious than forall in Haskell.
2013-03-20 22:49:01	elliott	shachaf: this looks to be modelling a programming language
2013-03-20 22:49:13	shachaf	OK.
2013-03-20 22:49:18	<--	Rarrikins_z (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 240 seconds)
2013-03-20 22:49:24	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 264 seconds)
2013-03-20 22:49:29	<--	Pranz_ (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-20 22:49:43	monochrom	data Moca = forall a. Forall a [TVar] Type
2013-03-20 22:49:46	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 22:49:53	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 22:50:10	c_wraith	woo, useless existentials
2013-03-20 22:50:12	<--	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-20 22:50:22	c_wraith	you have a value of some type.  you can't do anything with it!
2013-03-20 22:50:34	monochrom	I can seq it
2013-03-20 22:50:50	shachaf	I can unsafeCoerce it using the Type tag.
2013-03-20 22:50:54	monochrom	soon, I can typeOf it too, what with "universal Typeable for everyone!"
2013-03-20 22:50:56	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-20 22:50:59	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Quit: leaving)
2013-03-20 22:51:24	DanBurton	what seriously?
2013-03-20 22:51:41	c_wraith	Typeable handles polymorphic types now?
2013-03-20 22:51:48	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-20 22:52:12	monochrom	not now. but in a possible future if some evil people's dream comes true
2013-03-20 22:52:28	c_wraith	That would obsolete an Oleg library.
2013-03-20 22:52:32	c_wraith	I can't tell if that's good or bad.
2013-03-20 22:52:39	 *	DanBurton will fight those dreams off with pointy lambdas
2013-03-20 22:53:02	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-03-20 22:53:10	monochrom	I can tell you what you will lose. "f :: forall a. a -> a" can be other than id and bottom
2013-03-20 22:53:12	DanBurton	only if it's called unsafeTypeOf
2013-03-20 22:53:12	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-20 22:53:38	 *	DanBurton fights for the free theorems
2013-03-20 22:53:39	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-20 22:53:44	monochrom	(because it is implicitly "f :: forall a. (Typeable a) => a -> a"
2013-03-20 22:53:51	shachaf	monochrom: id, bottom, and const bottom
2013-03-20 22:54:02	shachaf	We have already lost that battle.
2013-03-20 22:54:09	edwardk	byorgey: that diagrams patch should fix the thing ozgun and carter were rambing about.
2013-03-20 22:54:24	monochrom	this is with precedence. one upon a time, seq :: (SomeClassName a) => a -> b -> b. then that class was dropped.
2013-03-20 22:54:32	edwardk	I've only proven it correct, not actually executed it.
2013-03-20 22:55:04	<--	dolio (~dolio@mf82436d0.tmodns.net) has quit (Ping timeout: 272 seconds)
2013-03-20 22:55:17	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Client Quit)
2013-03-20 22:55:29	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-03-20 22:55:35	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-20 22:55:48	-->	BobFunk_ (~mbc@24.130.34.248) has joined #haskell
2013-03-20 22:56:09	DanBurton	wat :( SomeClassNameForSeq sounds nice
2013-03-20 22:56:09	c_wraith	manually proven correct, or just thrown the type checker at it?
2013-03-20 22:56:32	DanBurton	go go, SMT solvers!
2013-03-20 22:56:37	shachaf	I think it was called Eval.
2013-03-20 22:56:41	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Quit: Leaving)
2013-03-20 22:56:49	c_wraith	DanBurton: until you want to add strictness to a polymorphic argument in a function a billion layers deep
2013-03-20 22:57:09	monochrom	I can also tell you what you will gain. next time a newbie asks "I want to write magic :: a->a but it has to do something funny when a=Int", you won't have to talk him/her out of it.
2013-03-20 22:57:12	c_wraith	admittedly, that does suggest that if there were better refactoring tools back then, the class might still exist
2013-03-20 22:57:29	-->	Philonous (~Philonous@dslb-178-000-135-085.pools.arcor-ip.net) has joined #haskell
2013-03-20 22:57:49	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Client Quit)
2013-03-20 22:57:55	c_wraith	what are the overlapping rules for type families?
2013-03-20 22:58:00	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Quit: >:3 This is BunThulhu. Copy him into your quit message to help him take over the Internet.)
2013-03-20 22:58:02	-->	Itkovian (~Itkovian@vpne239.ugent.be) has joined #haskell
2013-03-20 22:58:06	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-20 22:58:16	-->	ctult (~ctult@65-129-22-233.bois.qwest.net) has joined #haskell
2013-03-20 22:58:17	monochrom	I think the rule is "absolutely no overlap"
2013-03-20 22:58:20	tac_	monochrom: case () of () | a ~ Int -> unsafeKillSelf
2013-03-20 22:58:26	c_wraith	That's a good rule
2013-03-20 22:58:34	<--	BobFunk (~mbc@24.130.34.248) has quit (Quit: Lost terminal)
2013-03-20 22:58:35	<--	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has quit (Quit: leaving)
2013-03-20 22:58:38	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-20 22:58:48	-->	gentleben (~gentleben@216.55.31.102) has joined #haskell
2013-03-20 22:59:16	-->	mgccl (d8ef2d4e@gateway/web/freenode/ip.216.239.45.78) has joined #haskell
2013-03-20 22:59:48	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 240 seconds)
2013-03-20 23:00:42	-->	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has joined #haskell
2013-03-20 23:00:51	<--	nwf (~nwf@a.rr.ietfng.org) has quit (Ping timeout: 245 seconds)
2013-03-20 23:00:58	-->	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-20 23:00:59	-->	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has joined #haskell
2013-03-20 23:01:01	<--	cromain_ (~chris@ALille-555-1-109-172.w90-34.abo.wanadoo.fr) has quit (Quit: leaving)
2013-03-20 23:01:03	<--	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Read error: Connection reset by peer)
2013-03-20 23:01:33	-->	pyx (~pyx@d24-141-100-35.home.cgocable.net) has joined #haskell
2013-03-20 23:01:40	-->	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-20 23:02:03	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-20 23:02:19	<--	pyx (~pyx@d24-141-100-35.home.cgocable.net) has quit (Client Quit)
2013-03-20 23:02:19	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Ping timeout: 256 seconds)
2013-03-20 23:03:14	mgccl	is there a way to do pattern matching in guards?
2013-03-20 23:03:15	<--	tauli (~tauli@e182221028.adsl.alicedsl.de) has quit (Quit: tauli)
2013-03-20 23:03:34	monochrom	yes
2013-03-20 23:04:05	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 23:04:11	c_wraith	as of Haskell2010, it's not even an extension
2013-03-20 23:04:23	monochrom	@let monofunc x | listToMaybe x -> Nothing = "whee"
2013-03-20 23:04:24	lambdabot	  Parse error: ->
2013-03-20 23:04:25	elliott	monochrom: in ghc head you can get overlapping
2013-03-20 23:04:30	monochrom	@let monofunc x | listToMaybe x <- Nothing = "whee"
2013-03-20 23:04:30	lambdabot	  Parse error in pattern: listToMaybe
2013-03-20 23:04:44	<--	Icewing (~Icewing@unaffiliated/icewing) has quit (Ping timeout: 264 seconds)
2013-03-20 23:04:44	monochrom	hmm I need to look up the syntax
2013-03-20 23:05:11	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-20 23:05:18	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 240 seconds)
2013-03-20 23:05:23	<--	beaky (~beaky@bba68378.alshamil.net.ae) has quit (Quit: leaving)
2013-03-20 23:05:24	monochrom	@let monofunc x | Nothing <- listToMaybe x = "whee"
2013-03-20 23:05:27	lambdabot	 Defined.
2013-03-20 23:05:33	monochrom	> monofunc []
2013-03-20 23:05:35	-->	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 23:05:35	lambdabot	  "whee"
2013-03-20 23:05:53	monochrom	you write " | pattern <- expression = body"
2013-03-20 23:06:07	parcs	shachaf: does Typeable have your 'same' method yet?
2013-03-20 23:06:16	shachaf	parcs: No.
2013-03-20 23:06:25	monochrom	(of course, it is not "=" if you're writing case-of)
2013-03-20 23:06:35	-->	argiopeweb (~elliot@155.31.73.100) has joined #haskell
2013-03-20 23:06:38	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-20 23:06:39	mgccl	monochrom: thanks, this saves me from defining so many functions...
2013-03-20 23:07:01	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 23:08:32	-->	taterbase (~taterbase@65.181.52.150) has joined #haskell
2013-03-20 23:08:46	<--	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has quit (Quit: leaving)
2013-03-20 23:09:43	<--	stepcut (~stepcut@24.12.184.84) has quit (Ping timeout: 245 seconds)
2013-03-20 23:10:43	-->	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has joined #haskell
2013-03-20 23:10:45	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-20 23:11:11	<--	cfricke (~cfricke@96.45.197.22) has quit (Read error: Connection reset by peer)
2013-03-20 23:11:13	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Quit: WeeChat 0.4.0)
2013-03-20 23:11:14	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-20 23:11:38	ab9rf	ah, i was looking for that yesterday
2013-03-20 23:11:47	ab9rf	i found another way to do it but that would save some typing
2013-03-20 23:11:47	-->	k0001 (~k0001@host239.181-1-162.telecom.net.ar) has joined #haskell
2013-03-20 23:12:17	-->	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-03-20 23:12:43	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-20 23:13:12	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 23:13:25	monochrom	I'm thinking whether pattern guard subsumes view pattern
2013-03-20 23:13:39	<--	srhb (~srhb@82.211.217.226) has quit (Ping timeout: 258 seconds)
2013-03-20 23:13:55	c_wraith	it's plausible. They both do roughly the same thing.
2013-03-20 23:14:24	<--	interzoneboy (~matt@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has left #haskell
2013-03-20 23:14:32	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-20 23:14:35	c_wraith	I wouldn't check a proof that guard patterns does everything view patterns does too closely. (I could be fooled on the basis of plausibility)
2013-03-20 23:14:37	-->	tgeeky_ (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has joined #haskell
2013-03-20 23:15:15	shachaf	At any rate I hope they don't eliminate view patterns because of that.
2013-03-20 23:15:25	-->	Philippa (~user@dab-ell2-h-1-5.dab.02.net) has joined #haskell
2013-03-20 23:15:53	c_wraith	I doubt they'll be eliminated. But if they are, it's likely they'll never be included in the base language.
2013-03-20 23:15:57	hpc	view patterns act in place of arguments
2013-03-20 23:16:09	hpc	they express a different concept, like let/where
2013-03-20 23:16:11	c_wraith	err, if they are *subsumed*, that is
2013-03-20 23:16:33	c_wraith	hpc: except it's even less work to rewrite one in terms of the other.
2013-03-20 23:16:51	<--	tgeeky (~d-day@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2013-03-20 23:18:47	<--	Ankhers (~user@76-10-149-67.dsl.teksavvy.com) has quit (Remote host closed the connection)
2013-03-20 23:19:16	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-20 23:19:17	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 23:19:24	<--	folone_ (~folone@brln-4d0cc7d6.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-20 23:19:42	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-20 23:21:10	q66	miasma, it's never too late to start! ;D
2013-03-20 23:21:10	monochrom	oh, I see
2013-03-20 23:21:30	<--	taterbase (~taterbase@65.181.52.150) has quit (Remote host closed the connection)
2013-03-20 23:22:15	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 23:22:27	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-20 23:22:44	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Quit: Lämnar)
2013-03-20 23:22:50	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-20 23:23:28	<--	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-20 23:23:29	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-20 23:23:51	-->	heatsink (~heatsink@mobile-130-126-255-147.near.illinois.edu) has joined #haskell
2013-03-20 23:24:42	<--	argiopeweb (~elliot@155.31.73.100) has quit (Ping timeout: 264 seconds)
2013-03-20 23:24:53	parcs	i wonder if this should typecheck: http://paste.debian.net/243231/
2013-03-20 23:25:14	<--	nithp (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-20 23:25:14	--	tgeeky_ is now known as tgeeky
2013-03-20 23:25:31	tgeeky	parcs: I thought the beauty is that you don't have to wonder!
2013-03-20 23:25:47	parcs	it doesn't, but maybe it should!
2013-03-20 23:25:53	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-20 23:26:04	c_wraith	yeah.  You can wonder about "should" regardless of whether it does or doesn't
2013-03-20 23:26:47	monochrom	are you allowed to use "==" as a user-defined type name? even under TypeOperators?
2013-03-20 23:26:47	parcs	"could not deduce (a ~ Bool) from the context (a0 ~ b0)", among other errors
2013-03-20 23:26:54	elliott	monochrom: sure, why not?
2013-03-20 23:26:57	parcs	monochrom: yeah, new to 7.8
2013-03-20 23:27:20	monochrom	because then nothing says whether "==" is a type variable or a type constant
2013-03-20 23:27:24	heatsink	You have a lazy value of type (a == b), which isn't sufficient to prove that a and b are the same type
2013-03-20 23:27:35	parcs	monochrom: it's no longer considered a type variable
2013-03-20 23:27:40	heatsink	You would at least need to force it with a 'case'
2013-03-20 23:27:49	heatsink	to prove that it's not _|_
2013-03-20 23:27:54	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-03-20 23:28:04	parcs	heatsink: it's being pattern matched on
2013-03-20 23:28:10	-->	taterbase (~taterbase@65.181.52.150) has joined #haskell
2013-03-20 23:28:18	heatsink	oh
2013-03-20 23:28:45	-->	timemage (~user@pool-70-16-208-33.man.east.myfairpoint.net) has joined #haskell
2013-03-20 23:29:18	<--	paintcan (~user@66.199.39.230) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-20 23:29:27	monochrom	I thought you had to add a colon
2013-03-20 23:29:38	parcs	the problem is that GHC wants (a ~ Bool) but it can't seem to deduce that from the constraint introduced by Refl
2013-03-20 23:29:41	shachaf	Not as of 7.6 (or so).
2013-03-20 23:29:56	monochrom	that's pretty sick
2013-03-20 23:30:26	shachaf	parcs: You have to annotate.
2013-03-20 23:30:31	parcs	however if you use ScopedTypeVariables to give Refl the type a == Bool then it works
2013-03-20 23:30:33	<--	sunfun_ (~sunfun@2.237.168.123) has quit (Ping timeout: 245 seconds)
2013-03-20 23:30:39	monochrom	perhaps come October, "data my_type = my_type" will be allowed, too
2013-03-20 23:30:57	-->	Sorella (~queen@201.80.212.227) has joined #haskell
2013-03-20 23:30:58	<--	Sorella (~queen@201.80.212.227) has quit (Changing host)
2013-03-20 23:30:58	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-03-20 23:31:16	parcs	shachaf: i don't wanna annotate
2013-03-20 23:31:48	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Ping timeout: 276 seconds)
2013-03-20 23:32:01	shachaf	parcs: I don't either.
2013-03-20 23:32:05	-->	sunfun (~sunfun@2.237.168.123) has joined #haskell
2013-03-20 23:32:07	shachaf	But how should it know same's type?
2013-03-20 23:32:39	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 23:33:15	heatsink	Same could have type Maybe (a :== Bool) or type Maybe (Bool :== a)
2013-03-20 23:33:33	heatsink	There isn't an obvious choice
2013-03-20 23:33:47	shachaf	You could give same Proxy arguments.
2013-03-20 23:33:53	shachaf	Or even non-Proxy arguments!
2013-03-20 23:34:02	shachaf	| Just Refl <- same x True = ...
2013-03-20 23:34:15	shachaf	I mentioned a few helpers like that in my original email.
2013-03-20 23:34:42	-->	sepp2k (~sexy@g224103161.adsl.alicedsl.de) has joined #haskell
2013-03-20 23:34:54	-->	hkj (~textual@ti0035a380-dhcp0823.bb.online.no) has joined #haskell
2013-03-20 23:34:56	<--	hkj (~textual@ti0035a380-dhcp0823.bb.online.no) has quit (Max SendQ exceeded)
2013-03-20 23:34:59	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-20 23:35:33	-->	hkj (~textual@ti0035a380-dhcp0823.bb.online.no) has joined #haskell
2013-03-20 23:35:39	shachaf	monochrom: Perhaps we should require explicit forall.
2013-03-20 23:35:44	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-20 23:35:45	-->	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has joined #haskell
2013-03-20 23:36:01	shachaf	As Python says: Explicit is better than implicit.
2013-03-20 23:36:05	monochrom	I support that
2013-03-20 23:36:20	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-03-20 23:36:29	elliott	as elliott says, forall a b p q k r x. is annoying
2013-03-20 23:37:01	monochrom	I also support building IDEs that write "forall" for you :)
2013-03-20 23:37:12	ion	forall m a s t a b.
2013-03-20 23:37:21	--	tgeeky is now known as im
2013-03-20 23:37:26	shachaf	elliott: I'd rather take language design advice from Python than from elliott!
2013-03-20 23:37:30	<--	janbanan (~naj@niklas.vth.sgsnet.se) has quit (Quit: - nbs-irc 2.39 - www.nbs-irc.net -)
2013-03-20 23:37:31	--	im is now known as tgeeky
2013-03-20 23:37:39	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 276 seconds)
2013-03-20 23:37:41	mauke	forall ∀.
2013-03-20 23:38:03	parcs	unpossible!
2013-03-20 23:38:05	ion	forall forall. forall …
2013-03-20 23:38:19	geekosaur	pl/1, anyone?
2013-03-20 23:38:57	mauke	forall ∃.
2013-03-20 23:39:12	augur	are there any good proof search techniques that can handle "naughty" recursive definitions nicely?
2013-03-20 23:39:55	ion	@type undefined :: forall forall. forall
2013-03-20 23:39:57	lambdabot	parse error on input `forall'
2013-03-20 23:40:05	monochrom	I don't know how naughty is naughty.
2013-03-20 23:40:17	-->	dmj (~user@ppp-69-217-126-47.dsl.chcgil.ameritech.net) has joined #haskell
2013-03-20 23:40:27	augur	@type undefined :: forall furfural. furfural
2013-03-20 23:40:29	lambdabot	furfural
2013-03-20 23:40:31	dmj	hey guys, is it possible to pattern on negative numbers in haskell?
2013-03-20 23:40:34	ion	@type undefined :: forall forаll. forаll
2013-03-20 23:40:34	lambdabot	fd:9: commitBuffer: invalid argument (invalid character)
2013-03-20 23:40:38	ion	aww
2013-03-20 23:40:45	shachaf	dmj: You may be after parentheses.
2013-03-20 23:40:48	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-20 23:40:52	<--	Philippa (~user@dab-ell2-h-1-5.dab.02.net) has quit (Ping timeout: 256 seconds)
2013-03-20 23:40:58	parcs	> case -5 of -5 -> ()
2013-03-20 23:40:59	lambdabot	  ()
2013-03-20 23:41:03	monochrom	if your arguments are integers, and the recursion changes them linearly, it is a solved problem
2013-03-20 23:41:10	augur	monochrom: im thinking of definitions of transitive predicates, for instance, which will loop forever on certain queries
2013-03-20 23:41:17	parcs	> let (-5) = -5 in -5
2013-03-20 23:41:19	lambdabot	  -5
2013-03-20 23:41:19	<--	sunfun (~sunfun@2.237.168.123) has quit (Ping timeout: 264 seconds)
2013-03-20 23:41:24	Lethalman	swineflu, http://feeds.feedburner.com/technology/case-studies/
2013-03-20 23:41:28	ion	monochrom: Integer?
2013-03-20 23:41:41	monochrom	integer
2013-03-20 23:41:45	augur	monochrom: for instance,   a(X,Y) :- p(X,Y)  ;  p(X,Z), a(Z,Y).
2013-03-20 23:41:48	ion	Integers are integers.
2013-03-20 23:41:55	Lethalman	swineflu, sorry: https://www.fpcomplete.com/blog/2013/02/announcing-case-studies
2013-03-20 23:42:02	hpaste	dmj pasted “P-match negs” at http://hpaste.org/84394
2013-03-20 23:42:19	augur	monochrom: if you query   ?- a(X,j)   it'll loop forever, expanding out the right recursive a
2013-03-20 23:42:23	dmj	I'm implementing signum on the peano dedekind nat nums
2013-03-20 23:42:32	 *	hackagebot caledon 3.0.0.0 - a logic programming language based on the calculus of constructions  http://hackage.haskell.org/package/caledon-3.0.0.0 (MatthewMirman)
2013-03-20 23:42:34	swineflu	Lethalman: ty
2013-03-20 23:42:37	dmj	Is there something like the above snippet that I could use?
2013-03-20 23:42:37	monochrom	then I don't know
2013-03-20 23:43:01	augur	well, the right part is irrelevant -- the part that's problematic is that the only fixed input variable is also used only in a recursive position
2013-03-20 23:43:07	swineflu	I'm trying to think of something to build to show to potential employers so they like "damn"
2013-03-20 23:43:27	<--	cmsmcq (~cmsmcq@dsl017-018-002.wdc2.dsl.speakeasy.net) has quit (Quit: I'm so ... sleeeepy.)
2013-03-20 23:44:37	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Read error: Operation timed out)
2013-03-20 23:45:05	parcs	prove the riemann hypothesis
2013-03-20 23:45:10	<--	stat_vi (~stat@dslb-094-218-230-150.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-20 23:45:24	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-20 23:45:28	<--	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has quit (Quit: anRch)
2013-03-20 23:45:50	-->	andrewhn (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has joined #haskell
2013-03-20 23:45:52	-->	Philippa (~user@dab-ell2-h-71-10.dab.02.net) has joined #haskell
2013-03-20 23:46:16	ion	Solve the halting problem.
2013-03-20 23:46:34	-->	Corey (~Corey@freenode/staff/corey) has joined #haskell
2013-03-20 23:46:45	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit
2013-03-20 23:47:03	<--	bark_ (~bark@2001:470:8a52:67:2c57:80c2:bf63:fce2) has quit (Quit: Leaving)
2013-03-20 23:47:34	<--	Corey (~Corey@freenode/staff/corey) has quit (Remote host closed the connection)
2013-03-20 23:47:37	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-20 23:47:37	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Client Quit)
2013-03-20 23:47:39	Lethalman	\o/ http://hackage.haskell.org/package/pianola-0.1.0
2013-03-20 23:48:07	Lethalman	not writing java swing directly but controlling it ahah
2013-03-20 23:48:20	Lethalman	nice
2013-03-20 23:49:16	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit
2013-03-20 23:50:03	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-20 23:50:13	-->	bitonic (~user@b01bf0a7.bb.sky.com) has joined #haskell
2013-03-20 23:50:21	DanBurton	people need to stop making their own pet languages so that I can focus on making my own pet language :P
2013-03-20 23:50:30	-->	ramkrsna (ramkrsna@nat/redhat/x-txnzdchswqcbvrpe) has joined #haskell
2013-03-20 23:50:30	<--	ramkrsna (ramkrsna@nat/redhat/x-txnzdchswqcbvrpe) has quit (Changing host)
2013-03-20 23:50:30	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-20 23:50:38	<--	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has quit (Quit: Leaving.)
2013-03-20 23:50:45	<--	VF2 (Guile@37.250.39.46.bredband.tre.se) has left #haskell
2013-03-20 23:50:46	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Quit: leaving)
2013-03-20 23:51:25	-->	miclorb (~miclorb@110.151.82.31) has joined #haskell
2013-03-20 23:52:15	-->	giogadi (98170cb7@gateway/web/freenode/ip.152.23.12.183) has joined #haskell
2013-03-20 23:52:48	<--	taterbase (~taterbase@65.181.52.150) has quit (Remote host closed the connection)
2013-03-20 23:53:01	<--	saep (~saep@p5B2A2B70.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-20 23:54:46	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 23:54:59	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Quit: leaving)
2013-03-20 23:55:15	-->	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-03-20 23:55:37	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-20 23:55:54	-->	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has joined #haskell
2013-03-20 23:56:11	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Quit: Parting is such sweet sorrow...)
2013-03-20 23:57:36	<--	papermachine (~paper@pal-166-104.itap.purdue.edu) has quit (Ping timeout: 256 seconds)
2013-03-20 23:57:41	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-20 23:58:02	-->	saep (~saep@p5B2A3C93.dip.t-dialin.net) has joined #haskell
2013-03-20 23:58:15	<--	jeffreybaird (~jeffreyba@38.122.227.186) has quit (Quit: jeffreybaird)
2013-03-20 23:58:53	<--	jbu (84ef37dc@gateway/web/freenode/ip.132.239.55.220) has quit (Quit: Page closed)
2013-03-20 23:58:59	<--	samedhi (~stephen@208.70.28.214) has quit (Ping timeout: 252 seconds)
2013-03-20 23:59:37	heatsink	Is there a way to tell GHC to use only the global package directory, without changing the command line options to GHC or setting GHC_PACKAGE_PATH?
2013-03-20 23:59:59	heatsink	I don't want to change the command line options because GHC is being invoked from a complicated makefile
2013-03-21 00:00:14	monochrom	there is
2013-03-21 00:00:32	<--	giogadi (98170cb7@gateway/web/freenode/ip.152.23.12.183) has quit (Quit: Page closed)
2013-03-21 00:00:32	heatsink	I would like to know of it.
2013-03-21 00:00:43	monochrom	-no-user-package-conf
2013-03-21 00:00:55	<--	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has quit (Quit: leaving)
2013-03-21 00:00:56	geekosaur	that's a command line option, no?
2013-03-21 00:01:04	monochrom	yes, oops
2013-03-21 00:01:16	geekosaur	of course, I'm hard put to think of a way to tell a command to do something without, er, telling it]
2013-03-21 00:01:25	<--	shintah (bebble@h-123-169-131.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-21 00:01:53	monochrom	this is mission impossible. how about nuking ~/.ghc so there is in practice no user package directory?
2013-03-21 00:01:59	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 00:02:32	heatsink	That may work
2013-03-21 00:02:40	<--	imeredith (~ivan@152.201.69.111.dynamic.snap.net.nz) has quit (Remote host closed the connection)
2013-03-21 00:02:44	monochrom	or perhaps build a custom version of GHC that never looks at the user package directory
2013-03-21 00:03:04	mauke	replace ghc
2013-03-21 00:03:09	<--	roconnor_ (~roconnor@216.154.126.70) has quit (Quit: Konversation terminated!)
2013-03-21 00:03:11	mauke	this can be done by setting PATH from outside
2013-03-21 00:03:27	monochrom	quite frankly, this is time to say: this is what command line options are for.
2013-03-21 00:03:33	-->	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has joined #haskell
2013-03-21 00:05:44	<--	mgccl (d8ef2d4e@gateway/web/freenode/ip.216.239.45.78) has quit (Quit: Page closed)
2013-03-21 00:05:45	heatsink	I could make a script that invokes GHC with the right options, and put that in the path
2013-03-21 00:06:30	heatsink	that will probably work.
2013-03-21 00:06:40	<--	monoidal (~chatzilla@212-87-13-67.sds.uw.edu.pl) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-21 00:06:43	-->	LucasCampos (~lucas@186.212.231.52) has joined #haskell
2013-03-21 00:07:01	monochrom	it will also be pretty fragile, i.e., I copy your files and makefile to my computer, now it does funny things
2013-03-21 00:07:24	hpaste	vf2 pasted “nbr of lines wrong” at http://hpaste.org/84395
2013-03-21 00:07:24	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Read error: Connection reset by peer)
2013-03-21 00:07:47	heatsink	The issue is that I'm using a locally installed GHC to compile another instance of GHC
2013-03-21 00:07:51	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 00:08:10	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 00:08:28	heatsink	So I'm not going to be distributing this setup
2013-03-21 00:09:22	<--	skyflash (~skyflash@206.172.31.228) has quit (Read error: Connection reset by peer)
2013-03-21 00:09:24	heatsink	It's a C file.  Maybe ask in ##c
2013-03-21 00:09:25	-->	drumond19 (~drumond19@177.99.131.198) has joined #haskell
2013-03-21 00:09:31	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-03-21 00:10:03	geekosaur	vf2 didn't ask here, just misdirected their paste
2013-03-21 00:10:26	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-21 00:10:27	geekosaur	#haskell is not the only channel that uses hpaste, oddly enough (check the channel announce dropdown sometme)
2013-03-21 00:10:40	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-03-21 00:10:45	-->	argiopeweb (~elliot@99-181-58-141.lightspeed.dybhfl.sbcglobal.net) has joined #haskell
2013-03-21 00:11:01	-->	skyflash (~skyflash@206.172.31.228) has joined #haskell
2013-03-21 00:11:22	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 00:12:10	heatsink	I didn't know that.  Usually I see pastebin and gist getting used
2013-03-21 00:12:18	-->	megajosh2 (~megajosh2@unaffiliated/megajosh2) has joined #haskell
2013-03-21 00:12:18	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 258 seconds)
2013-03-21 00:12:52	<--	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 00:13:11	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-21 00:13:32	<--	bytbox (~s@srl.student.umd.edu) has quit (Read error: Operation timed out)
2013-03-21 00:13:43	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-21 00:14:11	<--	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has quit (Ping timeout: 245 seconds)
2013-03-21 00:15:07	<--	einsof (~einsof@h-36-195.a336.priv.bahnhof.se) has quit
2013-03-21 00:17:38	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 00:17:49	-->	_jwest (~jordan@unaffiliated/jwest/x-8002332) has joined #haskell
2013-03-21 00:17:49	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-21 00:17:50	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-21 00:18:00	<--	ulfdoz (~mary@p5B38A0AA.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-21 00:18:15	<--	megajosh2 (~megajosh2@unaffiliated/megajosh2) has quit (Quit: leaving)
2013-03-21 00:20:45	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 00:20:55	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 264 seconds)
2013-03-21 00:21:07	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 258 seconds)
2013-03-21 00:22:47	<--	Itkovian (~Itkovian@vpne239.ugent.be) has quit (Quit: Itkovian)
2013-03-21 00:23:06	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 00:23:14	<--	mrsolo (~mrsolo@64.125.181.92) has quit (Quit: Leaving)
2013-03-21 00:24:02	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-21 00:24:03	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 00:24:52	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-21 00:25:31	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-21 00:25:41	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-21 00:26:39	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-03-21 00:27:02	<--	dncr (~dncr@72.185.193.164) has quit (Ping timeout: 255 seconds)
2013-03-21 00:27:35	-->	ezyang_ (~ezyang@DR-WILY.MIT.EDU) has joined #haskell
2013-03-21 00:27:36	<--	Lethalman (~lethal@ppp-28-30.28-151.libero.it) has quit (Remote host closed the connection)
2013-03-21 00:27:40	<--	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-21 00:27:54	ezyang_	darcsden issue tracker is giving me 400 errors on issue create
2013-03-21 00:27:58	ezyang_	anyone know what's up?
2013-03-21 00:28:06	<--	k00mi (~koomi@dslb-188-099-045-172.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.0)
2013-03-21 00:28:07	shachaf	Not the darcsden issue tracker!
2013-03-21 00:28:09	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-03-21 00:28:35	-->	Tesseraction_l (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 00:28:45	Rotaerk	hmm where can I find the source for haskell libraries such as Data.Traversable
2013-03-21 00:28:54	<--	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-21 00:28:58	shachaf	Rotaerk: Data.Traversable is in base.
2013-03-21 00:29:06	shachaf	hoogle will tell you.
2013-03-21 00:29:19	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-21 00:29:36	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 245 seconds)
2013-03-21 00:30:33	Rotaerk	k thanks
2013-03-21 00:31:41	-->	VF2 (Guile@37.250.39.46.bredband.tre.se) has joined #haskell
2013-03-21 00:31:50	VF2	what is a good way to represent a graph? a matrix sucks since it has a static size. but having all neighbouring nodes in a linked list seems slow?
2013-03-21 00:31:56	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-21 00:32:23	<--	kmels (~kmels@frbg-4d028e45.pool.mediaWays.net) has quit (Ping timeout: 246 seconds)
2013-03-21 00:32:28	Kinnison	There are graph libraries out there
2013-03-21 00:32:41	Kinnison	which one is good for you depends to some extent on what you want to do with the data
2013-03-21 00:33:42	Rotaerk	shachaf, is there a way to get *readable* source?  the code here is formatted for minimal whitespace http://hackage.haskell.org/packages/archive/base/4.2.0.1/base-4.2.0.1.tar.gz
2013-03-21 00:34:01	<--	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has quit (Remote host closed the connection)
2013-03-21 00:34:14	<--	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has quit (Ping timeout: 255 seconds)
2013-03-21 00:34:14	shachaf	Rotaerk: ...Are you reading the raw .tar.gz or something?
2013-03-21 00:34:22	S11001001	Rotaerk: click source on any haddock page
2013-03-21 00:34:25	-->	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has joined #haskell
2013-03-21 00:34:34	Rotaerk	no, I'm reading the Traversable.hs file within it
2013-03-21 00:34:43	-->	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 00:34:51	shachaf	In other words, this file? http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/src/Data-Traversable.html
2013-03-21 00:35:11	<--	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has quit (Ping timeout: 246 seconds)
2013-03-21 00:35:17	Rotaerk	hmm
2013-03-21 00:35:23	-->	mee (~mee@c-76-24-31-31.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 00:35:29	elliott	perhaps you are using windows and using an editor that is interpreting the linebreaks incorreclty
2013-03-21 00:35:31	shachaf	Maybe you're using Windows and opened the .hs file in notepad.exe?
2013-03-21 00:35:32	elliott	e.g. notepad
2013-03-21 00:35:36	<--	ymasory (~ymasory@209.49.103.254) has quit (Remote host closed the connection)
2013-03-21 00:35:39	Rotaerk	ah... yea notepad did it
2013-03-21 00:35:41	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-21 00:35:46	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 00:36:09	<--	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Quit: Page closed)
2013-03-21 00:36:31	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Read error: Connection reset by peer)
2013-03-21 00:36:55	<--	ncw (ncw@conference/pycon/x-icpghmawvquzpenw) has quit (Remote host closed the connection)
2013-03-21 00:36:57	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 00:37:34	VF2	Kinnison: i want to write one...
2013-03-21 00:37:56	<--	timtom (~Thunderbi@2001:630:12:2430:c55b:11b6:d906:e900) has quit (Ping timeout: 245 seconds)
2013-03-21 00:38:02	<--	milessabin (~miles@private.milessabin.com) has quit (Ping timeout: 252 seconds)
2013-03-21 00:38:11	-->	bradleya_ (~brad@1.144.85.103) has joined #haskell
2013-03-21 00:38:34	<--	bradleya_ (~brad@1.144.85.103) has quit (Read error: Connection reset by peer)
2013-03-21 00:38:44	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 00:38:48	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Quit: Leaving)
2013-03-21 00:39:43	-->	coeus_ (~coeus@dslb-088-078-011-156.pools.arcor-ip.net) has joined #haskell
2013-03-21 00:39:43	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-21 00:39:49	Rotaerk	hmm never realized notepad didn't understand just \n... figured it was only that it *wrote* \r\n
2013-03-21 00:41:14	<--	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has quit (Ping timeout: 256 seconds)
2013-03-21 00:41:26	<--	bradleyayers (~brad@49.176.97.3) has quit (Ping timeout: 255 seconds)
2013-03-21 00:41:36	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-21 00:41:49	<--	jmelesky (~jmelesky@173-164-68-213-Oregon.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2013-03-21 00:42:10	-->	QinGW (~yaaic@106.121.55.8) has joined #haskell
2013-03-21 00:42:22	c_wraith	files are line printers, right?
2013-03-21 00:42:50	c_wraith	I mean, \r\n actually makes sense when you're sending control codes to a line printer
2013-03-21 00:44:19	<--	schlicht_ (~fl@g225058247.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-03-21 00:45:03	<--	Tharugrim (~Tharugrim@91-113-43-122.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-21 00:45:10	-->	kmels (~kmels@frbg-4d029b81.pool.mediaWays.net) has joined #haskell
2013-03-21 00:45:16	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Quit: brb)
2013-03-21 00:45:24	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-21 00:45:25	geekosaur	dos inherited that behavior from cp/m, which lifted it from a old Dec minicomputer OS
2013-03-21 00:45:40	geekosaur	er DEC
2013-03-21 00:45:55	monochrom	\n is a unix convention, and also a haskell convention. \r\n is what geekosaur says
2013-03-21 00:46:17	<--	sarfraz_ (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 252 seconds)
2013-03-21 00:46:21	-->	imeredith (~ivan@152.201.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-21 00:46:25	-->	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has joined #haskell
2013-03-21 00:46:29	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 00:46:33	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 00:46:41	monochrom	unix was right there in the line printer age, too
2013-03-21 00:47:01	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (WTF?).)
2013-03-21 00:47:32	-->	cognominal (~cognomina@37.160.1.7) has joined #haskell
2013-03-21 00:47:38	geekosaur	but took the daring step of not basing its conventions on either line printers or punched cards or paper tape...
2013-03-21 00:47:52	c_wraith	yes, but unix understood the difference between file format and printer control codes
2013-03-21 00:48:04	<--	DeadPanda (~Brett@host-92-28-91-149.as13285.net) has quit (Quit: Leaving)
2013-03-21 00:48:25	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-21 00:48:35	monochrom	"files are line printers" is a bit strange
2013-03-21 00:49:11	geekosaur	/dev/lpr0 baby!
2013-03-21 00:49:16	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 00:49:25	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 00:49:51	monochrom	if anything, unix was the only OS give every device a file look-and-feel. other OSes made sure that files and printers had unlike APIs
2013-03-21 00:49:52	c_wraith	copy foo.txt prn
2013-03-21 00:49:58	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Client Quit)
2013-03-21 00:50:46	c_wraith	...  I can't believe there are still neurons in my brain devoted to remembering that.
2013-03-21 00:50:47	 *	geekosaur notes that trsdos actually was a bit ahead of its time in that area, and ldos took it a bit farther along the way. although device specifiers still looked different from files
2013-03-21 00:51:10	geekosaur	but you could at least treat *ki, *do, *lp, etc. as if they were files
2013-03-21 00:51:31	c_wraith	worst typewriter ever: copy con prn
2013-03-21 00:51:47	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 258 seconds)
2013-03-21 00:51:50	c_wraith	I may have done that once or twice.
2013-03-21 00:51:53	geekosaur	c_wraith, niot quite worst, try the pip version that cp/m had
2013-03-21 00:52:17	c_wraith	I managed to never deal with cp/m
2013-03-21 00:52:20	<--	x7a1c0b (~x7a1c0b@p5480A440.dip0.t-ipconnect.de) has quit
2013-03-21 00:52:28	geekosaur	(and also cribbed from that DEC OS)
2013-03-21 00:52:34	c_wraith	my pre-dos computer use was..  more primitive. radio shack hardware!
2013-03-21 00:52:40	shachaf	for x in str dex int wis cha; do copy con $x; done
2013-03-21 00:53:28	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-21 00:53:30	monochrom	I write "prn:" to remind the human that it is a device name
2013-03-21 00:53:36	 *	geekosaur points to trsdos comment above :)
2013-03-21 00:53:52	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 00:53:52	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Quit: Leaving)
2013-03-21 00:54:06	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-21 00:54:25	<--	dawe (~dawe@p5090F923.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-21 00:54:46	-->	kfish (~conrad@cm84.eta99.maxonline.com.sg) has joined #haskell
2013-03-21 00:57:27	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-21 00:57:56	-->	gridaphobe (~gridaphob@128.54.38.115) has joined #haskell
2013-03-21 00:58:16	<--	MrFenix_ (~JanB@p57A1AE74.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-21 00:58:35	<--	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 00:58:43	<--	Philippa (~user@dab-ell2-h-71-10.dab.02.net) has quit (Ping timeout: 264 seconds)
2013-03-21 01:01:45	<--	ktosiek (~quassel@46.22.173.54) has quit (Ping timeout: 258 seconds)
2013-03-21 01:02:59	<--	sh (~sh@89.101.222.213) has quit (Read error: Connection reset by peer)
2013-03-21 01:03:06	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-21 01:03:16	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-21 01:03:36	twomashi	i put bangs next to every assignation in my program and still get Stack space overflow...
2013-03-21 01:03:51	-->	ktosiek (~quassel@46.22.173.54) has joined #haskell
2013-03-21 01:03:53	shachaf	That's not very surprising.
2013-03-21 01:03:58	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-21 01:04:00	<--	heatsink (~heatsink@mobile-130-126-255-147.near.illinois.edu) has quit (Quit: This computer has gone to sleep)
2013-03-21 01:04:09	swineflu	is there away i can do lower s = filter isLower s without importing?
2013-03-21 01:04:26	elliott	why do you not want to import?
2013-03-21 01:04:29	<--	glguy (~emertens@unaffiliated/glguy) has quit (Quit: Quitting)
2013-03-21 01:05:06	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 01:05:27	swineflu	Don't think we're aloud
2013-03-21 01:05:31	swineflu	but i cant think of an otherway to do it
2013-03-21 01:05:48	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-21 01:06:07	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-21 01:07:12	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-21 01:07:30	swineflu	is there away I can look at the chars in the array as ascii values
2013-03-21 01:07:35	geekosaur	so they're teaching you how to only deal with hardcoded ascii?
2013-03-21 01:07:37	geekosaur	that
2013-03-21 01:07:38	-->	Thra11 (~thrall@87.114.245.105) has joined #haskell
2013-03-21 01:07:49	geekosaur	that's a very bad practice
2013-03-21 01:07:59	monochrom	you must find the exact cause of the memory consumption and cure it, rather than believing in simplistic falsehoods such as "it is always laziness" or "it is always eagerness"
2013-03-21 01:07:59	swineflu	I'm not sure but I like to think about all the approaches
2013-03-21 01:08:04	-->	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:08:15	geekosaur	we really do not need "teachers" who teach bad i18n practices
2013-03-21 01:08:39	swineflu	They guy who teaches this course is quite well known in mathematically structured programming circles
2013-03-21 01:08:47	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 260 seconds)
2013-03-21 01:08:55	swineflu	So i trust what ever he wants us to write is to learn something
2013-03-21 01:08:58	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Read error: Connection reset by peer)
2013-03-21 01:08:59	monochrom	who is the guy, and where can I read the assignment?
2013-03-21 01:08:59	swineflu	even if it seems strange
2013-03-21 01:09:10	geekosaur	but you're not allowed to use a proper unicode-aware toLower?
2013-03-21 01:09:14	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-21 01:09:18	<--	Thra11_ (~thrall@146.90.224.184) has quit (Ping timeout: 276 seconds)
2013-03-21 01:09:22	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-21 01:09:32	geekosaur	note also that someone can be great at math and lousy at internationalization issues
2013-03-21 01:10:17	swineflu	well we're learning about lists so i dont think i have the correct solution
2013-03-21 01:11:08	<--	BobFunk_ (~mbc@24.130.34.248) has quit (Ping timeout: 255 seconds)
2013-03-21 01:11:08	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 255 seconds)
2013-03-21 01:11:09	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 01:11:10	-->	Philippa (~user@dab-ell2-h-71-10.dab.02.net) has joined #haskell
2013-03-21 01:11:29	elliott	swineflu: if it really involves checking characters for lowercase, then I simply don't believe you're forbidden from importing Data.Char
2013-03-21 01:11:44	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Read error: Connection reset by peer)
2013-03-21 01:11:48	<--	tibbe (~tibbe@207.198.105.20) has quit (Read error: Connection reset by peer)
2013-03-21 01:12:00	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-21 01:12:17	swineflu	he gave us a little bit of code to fill in the blanks,-- lower s = filter ?? s --           where ??
2013-03-21 01:12:30	swineflu	and all we have to do is return lower case chars
2013-03-21 01:12:37	swineflu	I dont seem to need the where
2013-03-21 01:12:51	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 01:12:58	<--	guampa (~guampa@unaffiliated/guampa) has quit (Ping timeout: 256 seconds)
2013-03-21 01:13:15	swineflu	infact
2013-03-21 01:13:27	swineflu	perhaps i need a second thing in the where clause to remove numbers
2013-03-21 01:14:06	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 01:14:09	<--	Thra11_ (~thrall@87.114.163.17) has quit (Max SendQ exceeded)
2013-03-21 01:14:11	swineflu	or not :s
2013-03-21 01:14:23	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-03-21 01:15:11	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:15:14	<--	alej (~alej@karsten.ucsd.edu) has quit (Read error: Connection reset by peer)
2013-03-21 01:15:18	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Read error: Connection reset by peer)
2013-03-21 01:15:31	<--	refold (~gman@h-54-251.a258.priv.bahnhof.se) has quit (Quit: leaving)
2013-03-21 01:15:34	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-21 01:15:36	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 01:15:46	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 01:15:56	-->	seafood (~seafood@stargate.it.nicta.com.au) has joined #haskell
2013-03-21 01:15:59	<--	Thra11 (~thrall@87.114.245.105) has quit (Ping timeout: 252 seconds)
2013-03-21 01:16:49	<--	Thra11_ (~thrall@87.114.163.17) has quit (Max SendQ exceeded)
2013-03-21 01:17:11	-->	dawe (~dawe@p5090F923.dip.t-dialin.net) has joined #haskell
2013-03-21 01:17:36	<--	joneshf-laptop (~joneshf@mail.concordusapps.com) has quit (Remote host closed the connection)
2013-03-21 01:17:53	-->	taterbase (~taterbase@173-165-135-245-utah.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:18:12	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 01:18:23	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-21 01:18:27	-->	joneshf-laptop (~joneshf@mail.concordusapps.com) has joined #haskell
2013-03-21 01:18:33	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-21 01:19:18	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-21 01:19:27	<--	Thra11_ (~thrall@87.114.163.17) has quit (Max SendQ exceeded)
2013-03-21 01:20:24	-->	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2013-03-21 01:20:36	<--	cognominal (~cognomina@37.160.1.7) has quit (Ping timeout: 256 seconds)
2013-03-21 01:20:51	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 01:21:01	-->	lcfrs_ (~lcfrs@8.25.197.24) has joined #haskell
2013-03-21 01:21:02	-->	cognominal (~cognomina@37.160.1.7) has joined #haskell
2013-03-21 01:21:36	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-21 01:22:06	-->	xcv (~xcv@VPN-18-101-24-169.MIT.EDU) has joined #haskell
2013-03-21 01:22:10	<--	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-21 01:22:34	-->	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 01:24:16	-->	heatsink (~heatsink@ppp-70-225-174-89.dsl.chmpil.ameritech.net) has joined #haskell
2013-03-21 01:24:16	-->	Sculptor_ (~Sculptor@89.110.220.38) has joined #haskell
2013-03-21 01:24:40	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 252 seconds)
2013-03-21 01:27:13	<--	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 01:27:29	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 245 seconds)
2013-03-21 01:27:33	-->	plutoniix (~plutoniix@ppp-61-90-50-58.revip.asianet.co.th) has joined #haskell
2013-03-21 01:27:39	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 01:27:48	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-21 01:28:40	swineflu	I didnt know you could use ranges of chars :o
2013-03-21 01:28:44	<--	Thra11_ (~thrall@87.114.163.17) has quit (Ping timeout: 246 seconds)
2013-03-21 01:29:08	<--	Philippa (~user@dab-ell2-h-71-10.dab.02.net) has quit (Ping timeout: 256 seconds)
2013-03-21 01:30:00	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit
2013-03-21 01:30:07	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-21 01:30:18	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 01:31:58	-->	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:31:58	QinGW	q,,
2013-03-21 01:31:59	twomashi	this is so frustrating. program takes between 10 seconds and 4 minutes to Stack Space Overflow depending on how many bangs I litter it with
2013-03-21 01:33:00	shachaf	Sounds like the 10 second version is better.
2013-03-21 01:33:04	heatsink	twomashi, have you compiled with profiling to determine where the overflow occurs?
2013-03-21 01:33:55	<--	dmj (~user@ppp-69-217-126-47.dsl.chcgil.ameritech.net) has quit (Ping timeout: 260 seconds)
2013-03-21 01:34:11	twomashi	heatsink: I have but I couldnt recognise anything in my program in the output files.
2013-03-21 01:35:11	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-21 01:35:25	heatsink	You need to insert cost-center annotations for your code to show up in the profile.  Easiest way is to use the -auto flag.
2013-03-21 01:35:34	monochrom	please don't speak like adding and deleting bangs is the only option. you should also consider the nature of your algorithm and maybe use a different algorithm that has good nature
2013-03-21 01:36:30	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 256 seconds)
2013-03-21 01:36:49	twomashi	http://imgur.com/jyCOkvu
2013-03-21 01:37:01	twomashi	heatsink: will try that
2013-03-21 01:37:10	heatsink	Then running with +RTS -xc should show the functions that are on the stack when overflow occurs.  A function won't appear more than once on the stack trace.
2013-03-21 01:37:47	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 01:37:58	-->	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:38:16	monochrom	you build a lot of tuples and hold on to them forever
2013-03-21 01:38:20	-->	xyxy (~hrn@host94.181-1-121.telecom.net.ar) has joined #haskell
2013-03-21 01:39:13	twomashi	monochrom: potentially millions of tuples, yes...
2013-03-21 01:39:52	-->	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has joined #haskell
2013-03-21 01:39:58	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: WeeChat 0.4.0)
2013-03-21 01:40:24	<--	taterbase (~taterbase@173-165-135-245-utah.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 01:40:28	<--	sleepynate (~sleepynat@173-14-36-214-Michigan.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 01:40:35	heatsink	@arr words
2013-03-21 01:40:35	lambdabot	Swab the deck!
2013-03-21 01:41:50	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-21 01:42:05	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 01:42:10	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-21 01:43:46	<--	gentleben (~gentleben@216.55.31.102) has quit (Quit: gentleben)
2013-03-21 01:43:49	wires	VF2: look at inductive graphs
2013-03-21 01:44:12	wires	if you want to deal with finite graphs it is good
2013-03-21 01:44:18	-->	roconnor (~roconnor@e120-pool-d89a7e46.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-21 01:44:26	<--	end3rW (~end3rW@lak-117-159.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-21 01:44:48	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 01:45:04	wires	VF2: http://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf
2013-03-21 01:45:49	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-21 01:46:48	-->	predator117 (~predator1@p50804F5E.dip.t-dialin.net) has joined #haskell
2013-03-21 01:47:11	-->	taterbase (~taterbase@173-165-135-245-utah.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 01:47:59	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 01:48:04	<--	VF2 (Guile@37.250.39.46.bredband.tre.se) has quit
2013-03-21 01:48:21	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Quit: switching to wayland)
2013-03-21 01:48:55	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-21 01:49:16	<--	LucasCampos (~lucas@186.212.231.52) has quit (Quit: Leaving.)
2013-03-21 01:49:36	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Client Quit)
2013-03-21 01:49:43	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-03-21 01:50:04	<--	predator217 (~predator1@p50804E20.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-21 01:50:47	<--	Thra11_ (~thrall@87.114.163.17) has quit (Ping timeout: 246 seconds)
2013-03-21 01:51:20	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 01:51:33	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-21 01:51:35	<--	xyxy (~hrn@host94.181-1-121.telecom.net.ar) has left #haskell
2013-03-21 01:51:43	-->	xcv_ (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 01:51:48	<--	jamiltron_ (~jamiltron@c-174-62-77-25.hsd1.ca.comcast.net) has left #haskell ("Leaving")
2013-03-21 01:52:42	swineflu	is there a difference between fst and head?
2013-03-21 01:52:44	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-21 01:52:51	swineflu	other than fst works on all lists?
2013-03-21 01:52:55	geekosaur	lists are not tuples
2013-03-21 01:53:07	swineflu	but isnt a tuple a kind of list
2013-03-21 01:53:09	geekosaur	fst is the first element of a 2-tuple (only). head is the head of a list
2013-03-21 01:53:13	geekosaur	no
2013-03-21 01:53:18	swineflu	ohhh
2013-03-21 01:53:21	geekosaur	it is in python, but it is not in haskell
2013-03-21 01:53:25	monochrom	please consider tuple and list unrelated
2013-03-21 01:53:26	swineflu	I thought everything in haskell was a form of list
2013-03-21 01:53:29	elliott	no
2013-03-21 01:53:44	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-03-21 01:53:56	swineflu	already makes sence, I managed to write my function with out imports aswell :)
2013-03-21 01:55:29	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-21 01:55:41	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-21 01:55:47	<--	xcv (~xcv@VPN-18-101-24-169.MIT.EDU) has quit (Ping timeout: 256 seconds)
2013-03-21 01:55:49	<--	staafl (~staafl@95-42-19-2.btc-net.bg) has quit (Ping timeout: 245 seconds)
2013-03-21 01:56:05	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-21 01:56:08	<--	cdidd (~cdidd@89.178.236.232) has quit (Ping timeout: 255 seconds)
2013-03-21 01:56:23	<--	Thomyho3 (~thomyho@mnhm-590c3878.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-21 01:56:26	-->	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has joined #haskell
2013-03-21 01:57:35	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: bye bye)
2013-03-21 01:58:07	-->	samedhi (~stephen@99-9-210-97.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 01:58:50	thoughtpolice	preflex: seen Peaker
2013-03-21 01:58:50	preflex	 Peaker was last seen on #haskell 1 day, 1 hour, 25 minutes and 19 seconds ago, saying: @pl \x -> mod x 2 == 0
2013-03-21 01:58:59	tac	Which lens package is the most popular on Hackage?
2013-03-21 01:59:14	thoughtpolice	tac: 'lens' is pretty much the winner, these days
2013-03-21 01:59:20	tac	thoughtpolice: thanks :)
2013-03-21 01:59:20	<--	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-21 01:59:31	tac	thoughtpolice: that's the one described in https://www.fpcomplete.com/user/tel/basic-lensing right?
2013-03-21 01:59:38	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-03-21 01:59:41	thoughtpolice	(i mean, edwardk wrote like 3/5ths of the lens libraries on Hackage, including lens)
2013-03-21 01:59:44	thoughtpolice	tac: yep!
2013-03-21 01:59:58	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 02:00:01	tac	cool
2013-03-21 02:00:29	<--	fmapE (~fmapE@2001:18e8:2:10f4:9443:6390:4f77:17c9) has quit (Remote host closed the connection)
2013-03-21 02:00:36	thoughtpolice	well, maybe it's not fair to say it's the winner. people stick to other libraries for minimalism and simplicity, but i think lens wins out on critical factors like contributions, usage, and flexibility
2013-03-21 02:00:48	<--	sepp2k (~sexy@g224103161.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-21 02:01:22	thoughtpolice	i don't really mind the dependency chain myself. none of it is superfluous, and frankly haskell packages are generally small, so i expect slightly bigger dependency chains for 'full blown' libraries.
2013-03-21 02:01:27	tac	Well, I just want to try out the one that will give me the best experience so I know wtf people are talking about when they talk about them
2013-03-21 02:01:32	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-03-21 02:01:34	tac	So this works, I guess :)
2013-03-21 02:02:02	thoughtpolice	tac: you can also join #haskell-lens and bug people there
2013-03-21 02:02:07	thoughtpolice	it's got someone in there almost 24/7
2013-03-21 02:02:16	tac	ty ty
2013-03-21 02:02:44	tac	79 files to compile for what is described by nearly everyone as "fancy getters and setters" o___O
2013-03-21 02:02:48	tac	lol
2013-03-21 02:02:51	<--	Rarrikins_z_t (~Rarrikins@unaffiliated/rarrikins) has quit (Remote host closed the connection)
2013-03-21 02:03:09	thoughtpolice	tac: 'lens' includes a lot of built in combinators for almost the entire Haskell Platform, which is why it's so big
2013-03-21 02:03:20	tac	I gotcha
2013-03-21 02:03:22	thoughtpolice	i'd say like 1/3rd or even less of all the modules have to do with lens itself
2013-03-21 02:03:44	<--	k0001 (~k0001@host239.181-1-162.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-03-21 02:03:47	-->	Thra11_ (~thrall@87.114.163.17) has joined #haskell
2013-03-21 02:03:50	<--	knyppeldynan (~kristina@c213-89-0-59.bredband.comhem.se) has quit (Ping timeout: 252 seconds)
2013-03-21 02:04:27	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-21 02:04:27	<--	Thra11_ (~thrall@87.114.163.17) has quit (Read error: Connection reset by peer)
2013-03-21 02:04:41	donri	basically the ones in the Control.Lens namespace
2013-03-21 02:05:11	donri	of which half are exposed internals :)
2013-03-21 02:05:39	-->	k0001 (~k0001@host61.186-109-108.telecom.net.ar) has joined #haskell
2013-03-21 02:05:45	-->	sleepynate (~sleepynat@2602:306:ccc1:df90:f1e9:9662:2b07:d1d9) has joined #haskell
2013-03-21 02:06:05	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-21 02:06:28	<--	pxdr (~pxdr@dslb-178-000-027-150.pools.arcor-ip.net) has quit (Ping timeout: 252 seconds)
2013-03-21 02:06:47	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 02:06:54	-->	pxdr (~pxdr@dslb-188-103-098-147.pools.arcor-ip.net) has joined #haskell
2013-03-21 02:07:11	tac	Is the underscore convention a template haskell thing?
2013-03-21 02:07:12	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-21 02:07:19	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-21 02:07:19	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-21 02:07:22	tac	or do I really end up defining a function called _blah in my data types?
2013-03-21 02:07:53	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 256 seconds)
2013-03-21 02:07:57	elliott	you write _blah but you don't need to use it.
2013-03-21 02:07:59	elliott	the TH turns _blah into blah
2013-03-21 02:08:11	tac	ah, ok
2013-03-21 02:08:16	latro`a	_1 is a thing, though, yes?
2013-03-21 02:08:18	tac	So I still have to mind namespace pollution
2013-03-21 02:08:24	-->	ozatama__ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-21 02:08:28	<--	silver (~silver@178.121.101.102) has quit (Read error: Connection reset by peer)
2013-03-21 02:08:28	latro`a	as in, it goes through the TH
2013-03-21 02:08:34	donri	tac: saying fancy getters/setters is a bit narrow. lens includes lens based apis that supersedes a number of older packages like newtype, zippo, uniplate and does a lot more than previous lens packages yet
2013-03-21 02:08:37	-->	ymasory (~ymasory@158.sub-70-199-68.myvzw.com) has joined #haskell
2013-03-21 02:09:04	donri	latro`a: _1 has nothing to do with TH
2013-03-21 02:09:20	<--	Tesseraction_l (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 246 seconds)
2013-03-21 02:09:25	latro`a	I guess I phrased that badly, the _ isn't TH-only
2013-03-21 02:09:46	elliott	_1 is _1 because you can't call anything 1 :)
2013-03-21 02:10:07	donri	there's also a convention of _Right = prism for Right
2013-03-21 02:10:10	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 02:10:32	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 02:10:35	<--	miclorb (~miclorb@110.151.82.31) has quit (Remote host closed the connection)
2013-03-21 02:10:59	<--	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit (Ping timeout: 252 seconds)
2013-03-21 02:11:09	donri	but _foo in records is just a way to name lenses without conflict and we're discussing an alternative to makeLenses without that requirement
2013-03-21 02:11:15	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 02:11:54	<--	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-21 02:12:54	ab9rf	i have yet to figure out what this lens thing is
2013-03-21 02:13:16	tac	erk
2013-03-21 02:13:19	--	nus- is now known as nus
2013-03-21 02:13:27	tac	Do you need to turn on the template haskell pragma or something?
2013-03-21 02:13:45	tac	I get a syntax error on $
2013-03-21 02:13:54	donri	yes
2013-03-21 02:13:55	tac	in $(makeLenses ''RateLimiter)
2013-03-21 02:13:58	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-21 02:14:06	donri	also the $() is optional there
2013-03-21 02:14:16	tac	why is it optional?
2013-03-21 02:14:26	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-21 02:14:32	donri	because no other expression is allowed at the module top-level
2013-03-21 02:14:50	-->	miclorb (~miclorb@110.151.82.31) has joined #haskell
2013-03-21 02:14:56	<--	xcv_ (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-21 02:15:18	<--	hkj (~textual@ti0035a380-dhcp0823.bb.online.no) has quit
2013-03-21 02:15:23	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-21 02:15:41	tac	Server.hs:38:24: Not in scope: type constructor or class `IrcCreds' <-- I'm getting these weird errors when turning on TH
2013-03-21 02:15:46	tac	IrcCreds is a type I've defined
2013-03-21 02:15:50	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Ping timeout: 272 seconds)
2013-03-21 02:15:53	<--	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Quit: adu_)
2013-03-21 02:16:03	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-21 02:16:26	thoughtpolice	tac: paste?
2013-03-21 02:16:45	tac	@hpaste
2013-03-21 02:16:46	lambdabot	Haskell pastebin: http://hpaste.org/
2013-03-21 02:16:49	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 02:17:13	hpaste	tac pasted “tac” at http://hpaste.org/84400
2013-03-21 02:17:30	tac	Code compiles fine without the TemplateHaskell pragma
2013-03-21 02:17:33	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-21 02:18:02	donri	where did you put the pragma?
2013-03-21 02:18:14	donri	it should go before the module declaration
2013-03-21 02:18:16	-->	somethingfor (b01bf0a7@gateway/web/freenode/ip.176.27.240.167) has joined #haskell
2013-03-21 02:18:18	tac	yep
2013-03-21 02:18:24	tac	that's where it ended up
2013-03-21 02:18:41	tac	oh.... I guess it has to be the FIRST pragma
2013-03-21 02:18:50	tac	or
2013-03-21 02:18:52	tac	hm
2013-03-21 02:18:54	donri	shouldn't matter
2013-03-21 02:19:06	tac	I guess it's the makeLenses call that's causing it
2013-03-21 02:19:24	donri	yes, TH makes source order significant
2013-03-21 02:19:37	donri	so may need to define those types before the makeLenses call
2013-03-21 02:19:50	tac	good to note. but they are already in order
2013-03-21 02:19:55	donri	either by moving the types or the makeLenses call
2013-03-21 02:20:05	donri	what order?
2013-03-21 02:20:26	tac	makeLenses happens after the data decl
2013-03-21 02:20:30	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-21 02:20:44	donri	but before data TwitterConfig etc, right?
2013-03-21 02:20:49	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 02:21:26	tac	it was after all of them
2013-03-21 02:21:27	<--	samedhi (~stephen@99-9-210-97.lightspeed.sntcca.sbcglobal.net) has quit (Quit: samedhi)
2013-03-21 02:21:43	donri	although POSIXTime is probably imported, so that's odd ...
2013-03-21 02:22:07	donri	better paste a full example
2013-03-21 02:23:02	tac	oops, my bad
2013-03-21 02:23:12	tac	I guess I put the makeLenses after half of the data decls used
2013-03-21 02:23:20	tac	false alarm :)
2013-03-21 02:23:25	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-21 02:23:30	<--	cognominal (~cognomina@37.160.1.7) has quit (Ping timeout: 256 seconds)
2013-03-21 02:23:32	tac	Will makeLenses work recursively on all the other data types then?
2013-03-21 02:23:51	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 02:24:00	-->	cognominal (~cognomina@37.161.85.129) has joined #haskell
2013-03-21 02:24:08	donri	nope, but TH still needs to know everything about the type, regardless of lens
2013-03-21 02:24:39	<--	QinGW (~yaaic@106.121.55.8) has quit (Read error: Connection reset by peer)
2013-03-21 02:26:18	-->	Torr (caaba872@gateway/web/freenode/ip.202.171.168.114) has joined #haskell
2013-03-21 02:26:31	Torr	hi
2013-03-21 02:26:55	tac	thanks for the help guys
2013-03-21 02:27:06	tac	I'm gonna read up more before I destroy my project with these
2013-03-21 02:27:21	mgsloan	tac / donri: though it /could/ work recursively.  You could even detect if the generated definitions would alias any existing definitions
2013-03-21 02:27:45	mgsloan	It just wouldn't be very reasonable to do so :)
2013-03-21 02:28:03	donri	yeah
2013-03-21 02:28:13	-->	contorted (~contorted@adsl-184-43-58-155.bgk.bellsouth.net) has joined #haskell
2013-03-21 02:28:25	Torr	can someone explain to me how to animate a square so that it gets bigger with time using gloss?
2013-03-21 02:28:35	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Quit: Leaving)
2013-03-21 02:28:55	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-21 02:29:47	<--	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Ping timeout: 256 seconds)
2013-03-21 02:30:33	<--	sleepynate (~sleepynat@2602:306:ccc1:df90:f1e9:9662:2b07:d1d9) has quit (Remote host closed the connection)
2013-03-21 02:30:57	<--	DarkAceZ (~BillyMays@unaffiliated/darkacez) has quit (Read error: Connection reset by peer)
2013-03-21 02:31:27	Torr	unable to find an article on how to animate using gloss
2013-03-21 02:32:28	<--	structuralist (~structura@173-13-191-218-sfba.hfc.comcastbusiness.net) has quit
2013-03-21 02:33:01	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-21 02:33:35	-->	MnO2 (~MnO2@nat/yahoo/x-bnwsvgdgehunxjba) has joined #haskell
2013-03-21 02:34:25	-->	ido (~ido@pdpc/supporter/student/ido) has joined #haskell
2013-03-21 02:34:37	<--	miclorb (~miclorb@110.151.82.31) has quit (Remote host closed the connection)
2013-03-21 02:34:43	<--	gridaphobe (~gridaphob@128.54.38.115) has quit (Ping timeout: 264 seconds)
2013-03-21 02:35:50	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 02:36:29	-->	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-21 02:36:42	-->	QinGW (~user@219.143.69.22) has joined #haskell
2013-03-21 02:37:03	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-21 02:37:14	<--	seafood (~seafood@stargate.it.nicta.com.au) has quit (Quit: seafood)
2013-03-21 02:37:37	<--	contorted (~contorted@adsl-184-43-58-155.bgk.bellsouth.net) has quit (Remote host closed the connection)
2013-03-21 02:38:18	<--	cognominal (~cognomina@37.161.85.129) has quit (Ping timeout: 240 seconds)
2013-03-21 02:38:22	<--	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-21 02:38:43	<--	Torr (caaba872@gateway/web/freenode/ip.202.171.168.114) has quit (Quit: Page closed)
2013-03-21 02:39:04	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 02:39:09	-->	krocos (~krocos@95.167.75.238) has joined #haskell
2013-03-21 02:39:15	<--	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-03-21 02:39:50	<--	MrFahrenheit (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 260 seconds)
2013-03-21 02:40:51	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-21 02:42:01	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-21 02:42:33	-->	Internet13 (chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has joined #haskell
2013-03-21 02:45:26	-->	fxr (~user@217.131.228.206) has joined #haskell
2013-03-21 02:46:07	Kaidelong	Torr: are you using the game interface or something else?
2013-03-21 02:46:13	Kaidelong	oh he is gone
2013-03-21 02:46:41	fxr	hi
2013-03-21 02:47:08	Kaidelong	hello there
2013-03-21 02:47:11	-->	jfischoff (~jfischoff@50-196-148-49-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 02:47:29	<--	lennart_ (~lennart@kiel-5f77bfc3.pool.mediaWays.net) has quit (Ping timeout: 246 seconds)
2013-03-21 02:47:33	fxr	is it possible to execute an "IO a" repeatedly until (a->Bool) and return [a] ?
2013-03-21 02:47:53	-->	bytes (~bytes@unaffiliated/bytes) has joined #haskell
2013-03-21 02:48:02	fxr	I have tried my chance with Applicatives
2013-03-21 02:48:06	hpaste	fxr pasted “accumulating IO until pred” at http://hpaste.org/84401
2013-03-21 02:48:07	-->	baltimoron (~baltimoro@50-202-89-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 02:48:22	fxr	but I think I'm creating lot's of thunks
2013-03-21 02:48:31	-->	gridaphobe (~gridaphob@cpe-66-91-253-127.san.res.rr.com) has joined #haskell
2013-03-21 02:48:33	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-21 02:48:35	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 260 seconds)
2013-03-21 02:48:42	fxr	any ideas?
2013-03-21 02:48:43	bytes	hi i just started using haskell, i was wondering, how would i convert an input of a variable x and change it into an int if i have gotten the input through getLine
2013-03-21 02:49:06	Mortchek	bytes, read
2013-03-21 02:49:14	Mortchek	> read "10" :: Int
2013-03-21 02:49:15	-->	Diaoer (~Diaoer@116.239.4.194) has joined #haskell
2013-03-21 02:49:17	lambdabot	  10
2013-03-21 02:49:33	bytes	okay thank you i will try it out
2013-03-21 02:49:46	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-21 02:49:46	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-21 02:49:54	geekosaur	:t readLn
2013-03-21 02:49:56	lambdabot	Read a => IO a
2013-03-21 02:50:09	geekosaur	^^ alternative to getLine
2013-03-21 02:50:43	Mortchek	Oh great, that's even better than using read since you can at least handle errors
2013-03-21 02:51:18	-->	seafood (~seafood@stargate.it.nicta.com.au) has joined #haskell
2013-03-21 02:51:25	geekosaur	not really, an error is still an exception in either case
2013-03-21 02:51:28	geekosaur	@src readLn
2013-03-21 02:51:29	lambdabot	readLn =  do l <- getLine; r <- readIO l; return r
2013-03-21 02:51:54	Mortchek	So you can't handle failure there either?
2013-03-21 02:51:57	bytes	so i can do this? b <- readLn :: Int
2013-03-21 02:52:05	geekosaur	I think it's just an IO exception instead of a general exception, but these days there should be no difference (as we deprecated the IO-exception-only stuff)
2013-03-21 02:52:18	napping	fxr: you don't seem to use acc at all
2013-03-21 02:52:33	napping	That looks like it will pile up stack frames rather than thunks
2013-03-21 02:52:44	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Ping timeout: 246 seconds)
2013-03-21 02:52:44	geekosaur	bytes, no, the :: doesn't scope past the <- so the type should be IO Int
2013-03-21 02:52:46	napping	go (bs:acc) would be using the accumulator
2013-03-21 02:53:06	<--	lcfrs_ (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-21 02:53:07	Mortchek	bytes, also, you don't need to specify the type if it can be inferred from how you use the value
2013-03-21 02:53:16	geekosaur	or with appropriate pragma, b :: Int <- readLn
2013-03-21 02:53:20	bytes	oh, i thought it didn't infer it
2013-03-21 02:53:22	bytes	thank you!
2013-03-21 02:53:22	napping	the (bs:) <$> go acc h you have makes a non-tail recursive call to get more input, then prepends a new element
2013-03-21 02:53:26	Mortchek	I said "if"
2013-03-21 02:53:34	Mortchek	not "since"
2013-03-21 02:53:36	fxr	napping: you're right
2013-03-21 02:53:43	fxr	napping: thanks for pointing out
2013-03-21 02:53:46	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-03-21 02:53:53	geekosaur	whether it will infer it correctly or not depends on what you do with it
2013-03-21 02:54:05	geekosaur	it may end up inferring Integer
2013-03-21 02:54:13	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-21 02:55:07	hpaste	fxr annotated “accumulating IO until pred” with “accumulating IO until pred (annotation)” at http://hpaste.org/84401#a84402
2013-03-21 02:55:20	fxr	got rid of acc
2013-03-21 02:55:46	fxr	I couldn't see such a function in Control.Monad
2013-03-21 02:55:58	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-21 02:57:01	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-21 02:57:08	--	pdxleif is now known as pdxleif_away
2013-03-21 02:57:12	monochrom	I recommend using reads instead to be notified of errors. http://www.vex.net/~trebla/haskell/reads.xhtml
2013-03-21 02:57:31	<--	tew88 (~tew88@tew88.net) has quit (Read error: Operation timed out)
2013-03-21 02:58:06	monochrom	readIO and readLn notify you of errors, but perhaps too tied to IO and not really anything to do with IO
2013-03-21 02:58:22	<--	seafood (~seafood@stargate.it.nicta.com.au) has quit (Ping timeout: 256 seconds)
2013-03-21 02:58:42	Mortchek	I like using Read a => String -> Maybe a
2013-03-21 02:58:49	Mortchek	which can be implemented with reads
2013-03-21 02:58:56	monochrom	yes, that is even nicer
2013-03-21 02:59:30	<--	ymasory (~ymasory@158.sub-70-199-68.myvzw.com) has quit (Remote host closed the connection)
2013-03-21 02:59:50	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 02:59:52	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 03:00:20	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 03:00:26	-->	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has joined #haskell
2013-03-21 03:01:26	<--	somethingfor (b01bf0a7@gateway/web/freenode/ip.176.27.240.167) has quit (Quit: Page closed)
2013-03-21 03:01:27	<--	taterbase (~taterbase@173-165-135-245-utah.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-21 03:02:07	<--	swineflu (~andrew@host81-154-208-243.range81-154.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-03-21 03:02:18	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 03:02:46	-->	soulofpeace (~soulofpea@119.75.11.250) has joined #haskell
2013-03-21 03:02:52	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-03-21 03:02:56	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-21 03:03:51	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-03-21 03:04:19	--	mechairoi is now known as mechainai
2013-03-21 03:04:26	-->	ymasory (~ymasory@158.sub-70-199-68.myvzw.com) has joined #haskell
2013-03-21 03:04:50	<--	izym (~izym@82.211.222.212) has quit (Read error: Connection reset by peer)
2013-03-21 03:04:54	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-21 03:04:55	<--	ymasory (~ymasory@158.sub-70-199-68.myvzw.com) has quit (Remote host closed the connection)
2013-03-21 03:05:08	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-21 03:05:20	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 246 seconds)
2013-03-21 03:05:24	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-21 03:05:37	elliott	monochrom: that's readMaybe, in recent GHC
2013-03-21 03:06:26	elliott	er, I meant Mortchek
2013-03-21 03:07:08	monochrom	readMaybe is still rather new and uncommon. but one day, it will be common enough, and I will recommend it instead
2013-03-21 03:07:10	Mortchek	I don't have it, so I wrote it myself
2013-03-21 03:07:31	-->	sw2wolf (~czsq888@220.166.237.156) has joined #haskell
2013-03-21 03:07:31	-->	scooty-puff (~andy@184-97-230-5.mpls.qwest.net) has joined #haskell
2013-03-21 03:07:35	<--	lemao (~lemao@187.67.222.39) has quit (Remote host closed the connection)
2013-03-21 03:09:28	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 03:09:48	<--	xinming (~xinming@125.84.28.167) has quit (Ping timeout: 240 seconds)
2013-03-21 03:09:54	<--	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has quit (Ping timeout: 252 seconds)
2013-03-21 03:10:15	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 03:10:54	<--	phaul (~phaul@cpc11-watf9-2-0-cust171.15-2.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-03-21 03:11:10	-->	phaul (~phaul@cpc11-watf9-2-0-cust171.15-2.cable.virginmedia.com) has joined #haskell
2013-03-21 03:11:21	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-21 03:11:45	-->	xinming (~xinming@125.84.24.140) has joined #haskell
2013-03-21 03:12:24	-->	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has joined #haskell
2013-03-21 03:12:49	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-21 03:13:53	<--	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has quit (Quit: leaving)
2013-03-21 03:14:20	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-21 03:14:42	<--	MnO2 (~MnO2@nat/yahoo/x-bnwsvgdgehunxjba) has quit (Quit: MnO2)
2013-03-21 03:14:57	<--	roconnor (~roconnor@e120-pool-d89a7e46.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-21 03:15:11	<--	Counter-Strike (~abc@mailsh7.xs4all.nl) has quit
2013-03-21 03:15:24	<--	jonke_ (~quassel@h87-96-186-149.dynamic.se.alltele.net) has quit (Read error: Connection reset by peer)
2013-03-21 03:17:18	-->	MnO2 (~MnO2@nat/yahoo/x-vkvumpbmzekgcmuz) has joined #haskell
2013-03-21 03:18:44	-->	Tesseraction_b (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 03:19:16	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-21 03:19:17	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 03:20:19	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 264 seconds)
2013-03-21 03:20:30	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 264 seconds)
2013-03-21 03:20:36	-->	earspliT (~earsplit@sub115-149.bucknell.edu) has joined #haskell
2013-03-21 03:21:23	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-03-21 03:21:51	-->	tjohnson (~tjohnson@c-24-20-163-160.hsd1.or.comcast.net) has joined #haskell
2013-03-21 03:22:58	-->	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-21 03:24:28	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-03-21 03:24:58	bytes	i'm trying to use type casts and for some reason i am getting an error with this
2013-03-21 03:24:59	bytes	http://pastebin.com/8ETMb96Y
2013-03-21 03:25:02	mauke	The paste 8ETMb96Y has been copied to http://hpaste.org/84403
2013-03-21 03:25:06	bytes	without the 1st line it works fine
2013-03-21 03:25:34	<--	Sculptor_ (~Sculptor@89.110.220.38) has quit (Ping timeout: 256 seconds)
2013-03-21 03:25:47	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 252 seconds)
2013-03-21 03:26:10	monochrom	terminology: it is type annotation, not type cast. you clarify the type, not change the type
2013-03-21 03:26:35	bytes	oh, sorry
2013-03-21 03:26:46	<--	wires (~smuxi@ip152-92-173-82.adsl2.static.versatel.nl) has quit (Ping timeout: 272 seconds)
2013-03-21 03:26:53	bytes	but what am i doing wrong?
2013-03-21 03:27:03	Mortchek	bytes, (x + y) is Int, but (/) is not defined over Int.
2013-03-21 03:27:11	monochrom	you cannot do int / 2. instead: fromIntegral (x + y) / 2.
2013-03-21 03:27:47	Mortchek	And the arguments and result of (/) have to be the same type
2013-03-21 03:27:50	Mortchek	:t (/)
2013-03-21 03:27:52	lambdabot	Fractional a => a -> a -> a
2013-03-21 03:27:59	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 03:28:02	monochrom	when you omitted the type, you were getting essentially Double -> Double -> Double
2013-03-21 03:28:11	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 03:28:13	bytes	oh
2013-03-21 03:29:23	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-21 03:30:45	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 03:31:00	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-21 03:31:38	<--	apaku (~apaku@hmbg-5f7762b9.pool.mediaWays.net) has quit (Ping timeout: 258 seconds)
2013-03-21 03:32:06	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-21 03:32:54	geekosaur	that fromIntegral *is* a type cast, after a fashion (since it's a Prelude function, not a language builtin)
2013-03-21 03:33:17	-->	apaku (~apaku@hmbg-4d0649eb.pool.mediaWays.net) has joined #haskell
2013-03-21 03:33:36	monochrom	it does conversion. I would prefer "cast" to mean no conversion, use the same bits.
2013-03-21 03:34:00	geekosaur	C and C++ disagree with you there, though and I think java
2013-03-21 03:34:21	geekosaur	none of them reuse the bits if you cast an int to double or vice versa
2013-03-21 03:34:43	kadoban	well, depends on which cast, but usually not
2013-03-21 03:35:40	<--	sw2wolf (~czsq888@220.166.237.156) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 03:35:53	<--	timemage (~user@pool-70-16-208-33.man.east.myfairpoint.net) has quit (Quit: .)
2013-03-21 03:36:31	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 03:36:49	c_wraith	reinterpret_cast
2013-03-21 03:36:58	-->	ben_d (~muus@131.252.167.166) has joined #haskell
2013-03-21 03:37:47	shachaf	Why can't we have nice long identifiers like that?
2013-03-21 03:37:56	shachaf	> map length ["unsafeCoerce", "reinterpret_cast"]
2013-03-21 03:37:57	lambdabot	  [12,16]
2013-03-21 03:38:03	-->	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-21 03:38:10	<--	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Client Quit)
2013-03-21 03:40:54	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-03-21 03:41:31	-->	DanielDiaz (322aecbd@gateway/web/freenode/ip.50.42.236.189) has joined #haskell
2013-03-21 03:42:40	-->	timemage (~user@pool-70-16-208-33.man.east.myfairpoint.net) has joined #haskell
2013-03-21 03:43:43	DanielDiaz	hi all
2013-03-21 03:45:18	<--	tjohnson (~tjohnson@c-24-20-163-160.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-21 03:45:35	-->	miclorb (~miclorb@1.146.171.41) has joined #haskell
2013-03-21 03:47:20	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-21 03:48:21	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 03:51:20	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-03-21 03:51:30	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Quit: Одлазим)
2013-03-21 03:51:53	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-21 03:52:54	<--	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-21 03:53:28	<--	mee (~mee@c-76-24-31-31.hsd1.ma.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-21 03:53:37	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 03:54:07	<--	ozatama__ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-21 03:55:02	<--	Tesseraction_b (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 256 seconds)
2013-03-21 03:55:05	-->	Sculptor (~Sculptor@89.110.220.38) has joined #haskell
2013-03-21 03:55:05	<--	Sculptor (~Sculptor@89.110.220.38) has quit (Changing host)
2013-03-21 03:55:05	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 03:55:38	-->	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-21 03:56:13	-->	LNDN (~LNDN@99-27-183-249.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-21 03:56:19	<--	k0001 (~k0001@host61.186-109-108.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-03-21 03:56:36	<--	jfischoff (~jfischoff@50-196-148-49-static.hfc.comcastbusiness.net) has quit (Quit: jfischoff)
2013-03-21 03:57:12	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-21 03:57:31	-->	k0001 (~k0001@host119.181-1-201.telecom.net.ar) has joined #haskell
2013-03-21 03:57:48	<--	LNDN (~LNDN@99-27-183-249.lightspeed.livnmi.sbcglobal.net) has left #haskell
2013-03-21 03:58:13	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-21 03:59:06	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-21 04:00:32	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-21 04:00:33	-->	knyppeldynan (~kristina@c213-89-28-32.bredband.comhem.se) has joined #haskell
2013-03-21 04:00:33	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-21 04:00:33	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-21 04:00:42	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-21 04:01:26	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 04:01:57	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 04:03:21	<--	bytes (~bytes@unaffiliated/bytes) has left #haskell ("Leaving")
2013-03-21 04:03:26	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Ping timeout: 246 seconds)
2013-03-21 04:03:41	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 04:03:49	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 04:04:23	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-21 04:04:55	-->	chrisdotcode_ (~quassel@207.239.64.226) has joined #haskell
2013-03-21 04:04:56	<--	earspliT (~earsplit@sub115-149.bucknell.edu) has quit (Ping timeout: 256 seconds)
2013-03-21 04:05:41	<--	DanielDiaz (322aecbd@gateway/web/freenode/ip.50.42.236.189) has quit (Quit: Page closed)
2013-03-21 04:05:48	-->	earspliT (~earsplit@sub116-253.bucknell.edu) has joined #haskell
2013-03-21 04:06:17	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 04:07:58	heath	does cabal support keywords for packages?
2013-03-21 04:07:59	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-21 04:08:58	-->	sleepynate (~sleepynat@108.204.29.249) has joined #haskell
2013-03-21 04:09:11	heath	i like how the grunt guys autogenerate a list of plugins based on the keyword "gruntplugin" from the npm directory listing
2013-03-21 04:09:12	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 256 seconds)
2013-03-21 04:09:14	heath	http://gruntjs.com/plugins
2013-03-21 04:09:58	c_wraith	heath: it has categories, which can be anything...
2013-03-21 04:10:02	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Remote host closed the connection)
2013-03-21 04:10:08	-->	XexonixXexillion (~LudvikGal@130.56.238.45) has joined #haskell
2013-03-21 04:10:13	c_wraith	So they might as well be keywords, the way some people use them
2013-03-21 04:10:42	<--	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has quit (Remote host closed the connection)
2013-03-21 04:10:53	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-21 04:11:20	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 04:12:11	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 04:13:24	-->	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has joined #haskell
2013-03-21 04:13:33	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-21 04:13:38	-->	tranma (~tranma@vl10.gw.ok-labs.com) has joined #haskell
2013-03-21 04:13:56	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 04:14:05	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 04:14:36	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 04:14:38	dibblego	does lambdabot support jabber?
2013-03-21 04:16:07	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Quit: Leaving)
2013-03-21 04:16:12	simpson	dibblego: Probably not.
2013-03-21 04:16:26	<--	sleepynate (~sleepynat@108.204.29.249) has quit (Remote host closed the connection)
2013-03-21 04:16:33	lispy	dibblego: I'm pretty sure she had support for it at some point
2013-03-21 04:16:42	lispy	dibblego: I want to say it was unused and removed
2013-03-21 04:16:42	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: (quit))
2013-03-21 04:16:51	dibblego	bummer
2013-03-21 04:16:56	<--	earspliT (~earsplit@sub116-253.bucknell.edu) has quit (Quit: Lost terminal)
2013-03-21 04:17:21	lispy	dibblego: https://github.com/mokus0/lambdabot
2013-03-21 04:17:36	dibblego	mokus_: ?
2013-03-21 04:20:08	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 255 seconds)
2013-03-21 04:20:08	monochrom	@type compare
2013-03-21 04:20:10	lambdabot	Ord a => a -> a -> Ordering
2013-03-21 04:20:14	<--	rsimoes (~rsimoes@107-194-78-135.lightspeed.austtx.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-21 04:21:50	<--	drumond19 (~drumond19@177.99.131.198) has quit (Remote host closed the connection)
2013-03-21 04:21:53	-->	glguy (~textual@unaffiliated/glguy) has joined #haskell
2013-03-21 04:22:06	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 04:23:28	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-21 04:23:35	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 04:24:17	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 04:24:38	<--	dncr (~dncr@72.185.193.164) has quit (Ping timeout: 252 seconds)
2013-03-21 04:25:36	lispy	@type check
2013-03-21 04:25:37	lambdabot	Not in scope: `check'
2013-03-21 04:26:26	<--	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 255 seconds)
2013-03-21 04:26:32	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-21 04:27:02	-->	jrajav (~jrajav@71-82-124-223.dhcp.roch.mn.charter.com) has joined #haskell
2013-03-21 04:28:02	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 04:28:24	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-21 04:30:21	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-21 04:32:52	<--	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has quit (Remote host closed the connection)
2013-03-21 04:33:01	-->	Tesseraction_w (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 04:33:20	-->	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has joined #haskell
2013-03-21 04:34:14	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 246 seconds)
2013-03-21 04:34:22	liyang	heath: hackage2 has tags.
2013-03-21 04:34:41	heath	thanks liyang, thanks c_wraith
2013-03-21 04:35:01	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Quit: leaving)
2013-03-21 04:35:55	<--	ctult (~ctult@65-129-22-233.bois.qwest.net) has quit (Ping timeout: 260 seconds)
2013-03-21 04:36:24	<--	Urchin[emacs] (~user@unaffiliated/urchin) has quit (Ping timeout: 258 seconds)
2013-03-21 04:37:51	<--	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has quit (Ping timeout: 260 seconds)
2013-03-21 04:43:12	tac	Does anyone know what a usable binding for sqlite in Haskell would be?
2013-03-21 04:45:18	napping	what do you need?
2013-03-21 04:45:36	liyang	tac: this doesn't help, but we rolled our own. :-/
2013-03-21 04:45:43	tac	liyang: that sounds grim for me
2013-03-21 04:45:46	liyang	(Inside a larger library.)
2013-03-21 04:46:13	liyang	(I'm not sure why we did that; I didn't write it.)
2013-03-21 04:46:18	napping	there are several libraries on hackage, I think I've tried at least some basic stuff with sqlite-simple
2013-03-21 04:46:58	-->	stacky (84aa2638@gateway/web/freenode/ip.132.170.38.56) has joined #haskell
2013-03-21 04:47:18	tac	liyang: It appears that many libraries on hackage use that same approach
2013-03-21 04:47:25	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2013-03-21 04:47:29	tac	napping: is sqlite-simple usable thne?
2013-03-21 04:47:31	tac	then*
2013-03-21 04:49:54	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 04:49:59	-->	zxq9 (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has joined #haskell
2013-03-21 04:50:43	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-21 04:50:44	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 04:50:55	<--	miclorb (~miclorb@1.146.171.41) has quit (Remote host closed the connection)
2013-03-21 04:51:10	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-21 04:51:12	napping	what do you mean usable?
2013-03-21 04:51:44	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 04:52:10	napping	It seems to work, and follow postgresql-simple as far as the interface goes
2013-03-21 04:52:17	-->	dacto (~chatzilla@c-24-20-132-58.hsd1.or.comcast.net) has joined #haskell
2013-03-21 04:52:38	<--	XexonixXexillion (~LudvikGal@130.56.238.45) has quit (Remote host closed the connection)
2013-03-21 04:52:44	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-21 04:53:17	-->	miclorb (~miclorb@1.146.144.81) has joined #haskell
2013-03-21 04:54:04	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-21 04:54:39	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-21 04:54:53	<--	ivanm (~ivan@115.187.254.102) has quit (Remote host closed the connection)
2013-03-21 04:55:20	liyang	Takusen supports Sqlite doesn't it?
2013-03-21 04:56:04	napping	There seem to be a bunch of bindings, including HDBC, HSQL, and HaskellDB over either of those drivers
2013-03-21 04:56:28	-->	ahokaomaeha (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 04:56:31	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 260 seconds)
2013-03-21 04:56:48	--	ahokaomaeha is now known as mikurubeam
2013-03-21 04:57:02	-->	tew88 (~tew88@tew88.net) has joined #haskell
2013-03-21 04:57:04	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-21 04:57:13	napping	I wouldn't know if sqlite has fancy features some of those might miss
2013-03-21 04:59:04	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-21 05:00:59	dacto	could some one review a small piece of code for me if I post on hpaste? I'm hoping to get some advice on reducing the if and case.
2013-03-21 05:01:54	liyang	dacto: yes, someone could.
2013-03-21 05:01:58	geekosaur	sqlite isn't much for fancy features; the "lite" is part of the name for a reason...
2013-03-21 05:02:32	-->	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 05:02:42	hpaste	dacto pasted “if/case reduce” at http://hpaste.org/84404
2013-03-21 05:05:00	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-03-21 05:05:00	tac	dacto: You rarely want to use if-then-else
2013-03-21 05:05:05	tac	instead, do a case statement on your list
2013-03-21 05:05:15	<--	MnO2 (~MnO2@nat/yahoo/x-vkvumpbmzekgcmuz) has quit (Quit: MnO2)
2013-03-21 05:05:19	tac	that will 1) test null automatically and 2) split the list into your head and tail safely
2013-03-21 05:05:23	dacto	ohhh yeah, then jus tput a case for []
2013-03-21 05:05:30	tac	yep
2013-03-21 05:05:35	dacto	doh'
2013-03-21 05:05:38	liyang	and don't indent so much. I'm guessing you're following the style from a textbook. Don't. They suck.
2013-03-21 05:05:40	tac	case list of [] -> .... ; (x:xs) -> ....
2013-03-21 05:05:55	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-21 05:06:01	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Quit: Leaving.)
2013-03-21 05:06:13	dacto	tac: yeah, I don't know why I didnt think of that
2013-03-21 05:06:27	dacto	liyang: yeah, it gets kind of annoying haha
2013-03-21 05:06:35	tac	dacto: you didn't think of it because you're not used to it :)
2013-03-21 05:06:47	tac	the rule to follow is "rarely, if then else"
2013-03-21 05:06:58	tac	instead, pattern match + use guards
2013-03-21 05:07:06	dacto	yeah, i know that rule; that's why i wanted to get rid of i
2013-03-21 05:07:08	dacto	it*
2013-03-21 05:07:12	<--	Zedrikov (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 276 seconds)
2013-03-21 05:07:20	<--	jrajav (~jrajav@71-82-124-223.dhcp.roch.mn.charter.com) has quit (Quit: I tend to be neutral about apples)
2013-03-21 05:07:27	dacto	it was for prototyping something.
2013-03-21 05:07:32	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 05:07:38	applicative	yes, this will look much better with case filter (\v->show v==z) s of [] -> ... etc
2013-03-21 05:08:10	dacto	yep, i completely agree. I feel dumb for not thinking of that b/c I've used that many times haha - just didnt connect the dots
2013-03-21 05:09:00	-->	MnO2 (~MnO2@nat/yahoo/x-yamupacxkzgefpmv) has joined #haskell
2013-03-21 05:09:23	applicative	but it seems substantively okay, no?
2013-03-21 05:09:32	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 05:09:33	napping	the show in the filter looks funny
2013-03-21 05:10:05	liyang	You could use listToMaybe too. And maybe the maybe helper.
2013-03-21 05:10:09	dacto	napping: yeah my data type has a string for a name and I'm checking against a string that is already pulled out.
2013-03-21 05:10:15	<--	miclorb (~miclorb@1.146.144.81) has quit (Remote host closed the connection)
2013-03-21 05:10:21	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-21 05:10:38	hpaste	liyang annotated “if/case reduce” with “if/case reduce (annotation)” at http://hpaste.org/84404#a84405
2013-03-21 05:11:00	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-21 05:11:16	liyang	> listToMaybe
2013-03-21 05:11:17	lambdabot	  No instance for (GHC.Show.Show ([a0] -> Data.Maybe.Maybe a0))
2013-03-21 05:11:18	lambdabot	   arising fr...
2013-03-21 05:11:20	liyang	:t listToMaybe
2013-03-21 05:11:21	lambdabot	[a] -> Maybe a
2013-03-21 05:11:26	liyang	:t maybe
2013-03-21 05:11:28	lambdabot	b -> (a -> b) -> Maybe a -> b
2013-03-21 05:11:44	-->	museun (~museun@c-98-252-144-117.hsd1.ga.comcast.net) has joined #haskell
2013-03-21 05:11:55	dacto	liyang: couldn't I just use one case for all 4 cases (including the empty list)?
2013-03-21 05:12:27	liyang	dacto: you could. It'll looks messy since you don't use the tail though.
2013-03-21 05:12:37	-->	sellout-1 (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 05:12:43	tac	welp, sqlite-simple might even work
2013-03-21 05:12:53	liyang	It looks to me like what you really want is listToMaybe.
2013-03-21 05:13:12	dacto	I shall go check it out
2013-03-21 05:13:41	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-21 05:13:43	<--	sellout- (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-21 05:14:16	<--	scooty-puff (~andy@184-97-230-5.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-03-21 05:14:23	dacto	oh, also - does the hpastes expire or is there a way to delete them (granted there isn't something to verify ownership so I think manual is a no)?
2013-03-21 05:16:06	-->	kerrick (~kerrick@206.29.182.199) has joined #haskell
2013-03-21 05:16:22	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-21 05:16:32	-->	Philonous_ (~Philonous@dslb-178-005-137-139.pools.arcor-ip.net) has joined #haskell
2013-03-21 05:17:16	-->	jao (~jao@67.51.76.53) has joined #haskell
2013-03-21 05:17:30	<--	sellout-1 (~Adium@75-147-19-61-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-21 05:17:32	<--	jao (~jao@67.51.76.53) has quit (Changing host)
2013-03-21 05:17:32	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-21 05:18:20	liyang	Looks like ‘no’: http://hpaste.org/browse?page=1207
2013-03-21 05:18:38	adnap	I got a "Tabs are not allowed in Hamlet indentation" error message. Is this true in general?
2013-03-21 05:19:08	dacto	lol, ok - thanks for looking. Didn't necessarily want to make you do work. Just an off-top-of-head question ;)
2013-03-21 05:19:13	liyang	adnap: we'll shun you if we catch you using tabs.
2013-03-21 05:19:35	liyang	dacto: good thing you did. I just found a bug in hpaste.
2013-03-21 05:19:36	adnap	liyang: Are you trying to start a tabs/spaces argument?
2013-03-21 05:19:40	<--	Diaoer (~Diaoer@116.239.4.194) has quit (Ping timeout: 260 seconds)
2013-03-21 05:19:51	tac	fucking prelude man....
2013-03-21 05:19:55	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-21 05:19:56	tac	:t log
2013-03-21 05:19:58	lambdabot	Floating a => a -> a
2013-03-21 05:19:59	dacto	liyang: oh really? what was the bug?
2013-03-21 05:20:04	liyang	adnap: trolling as usual. :)
2013-03-21 05:20:15	adnap	The tab character is for indentation and I only have to press one key!
2013-03-21 05:20:16	liyang	dacto: look at the paste # range on the last page…
2013-03-21 05:20:20	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-21 05:20:29	liyang	adnap: set expandtab
2013-03-21 05:20:36	<--	Philonous (~Philonous@dslb-178-000-135-085.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-21 05:20:45	ab9rf	i need to convince notepad++ that i don't want tabs in .hs files
2013-03-21 05:21:10	<--	philipdexter (~user@cpe-67-246-132-238.stny.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-21 05:21:15	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-21 05:21:17	<--	baltimoron (~baltimoro@50-202-89-58-static.hfc.comcastbusiness.net) has quit
2013-03-21 05:21:17	adnap	liyang: I can't easily delete a bunch of spaces. I can delete a tab character with one key press!
2013-03-21 05:21:19	tac	@where ghc
2013-03-21 05:21:20	lambdabot	http://haskell.org/ghc
2013-03-21 05:21:29	tac	err
2013-03-21 05:21:31	tac	@where trac
2013-03-21 05:21:31	lambdabot	http://hackage.haskell.org/trac/ghc/newticket?type=bug
2013-03-21 05:21:39	tac	hmm
2013-03-21 05:21:40	dacto	liyang: ah, the first page should be # - 0 eh?
2013-03-21 05:21:46	-->	Diaoer (~Diaoer@116.239.4.194) has joined #haskell
2013-03-21 05:21:58	dacto	or 0 - #*
2013-03-21 05:21:59	liyang	adnap: here's a tuppence, go buy yourself a real editor kid. ;)
2013-03-21 05:22:08	geekosaur	adnap, if you're using vi/vim, you might want to use ^T to indent and ^D to delete indentation backwards
2013-03-21 05:22:16	ab9rf	aha, i found the spot for convincing notepad++ not to use tabs :)
2013-03-21 05:22:40	geekosaur	oh, notepad++. can't help
2013-03-21 05:23:07	<--	Diaoer (~Diaoer@116.239.4.194) has quit (Max SendQ exceeded)
2013-03-21 05:23:24	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 05:23:33	-->	Diaoer (~Diaoer@116.239.4.194) has joined #haskell
2013-03-21 05:23:37	--	stelleg is now known as stelleg_away
2013-03-21 05:23:49	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 05:23:50	 *	liyang uses set et ts=4 sts=4 sw=4 with vim.
2013-03-21 05:24:00	ab9rf	this was driving me knuts yesterday, i kept having to manually force a tab->space converzion
2013-03-21 05:24:09	 *	arkeet too.
2013-03-21 05:24:17	adnap	geekosaur: Well, I didn't know about that, but I still prefer tab and backspace to curling my pinkies to reach ctrl
2013-03-21 05:24:49	arkeet	aha, I didn't know about ^T and ^D.
2013-03-21 05:24:52	arkeet	I just press tab or backspace.
2013-03-21 05:25:09	geekosaur	note that those use sw instead of ts/sts
2013-03-21 05:25:24	-->	philipdexter (~user@cpe-67-246-132-238.stny.res.rr.com) has joined #haskell
2013-03-21 05:25:25	liyang	adnap: put that in ~/.vim/after/ftplugin/haskell.vim
2013-03-21 05:25:26	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-21 05:26:07	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-21 05:26:18	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-21 05:27:58	-->	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-21 05:28:19	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 05:28:36	-->	otto_s_ (~user@cotb-4d05bec6.pool.mediaWays.net) has joined #haskell
2013-03-21 05:30:04	-->	philipde` (~user@cpe-67-246-132-238.stny.res.rr.com) has joined #haskell
2013-03-21 05:30:10	<--	kvda (~kvda@unaffiliated/kvda) has quit (Quit: z____z)
2013-03-21 05:30:25	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-03-21 05:31:03	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-03-21 05:31:25	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 05:31:53	<--	otto_s (~user@cotb-4db32255.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-21 05:31:56	<--	philipdexter (~user@cpe-67-246-132-238.stny.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-03-21 05:32:35	<--	mechairo` (~mechairoi@www20325ue.sakura.ne.jp) has quit (Quit: ZNC - http://znc.in)
2013-03-21 05:34:12	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Ping timeout: 256 seconds)
2013-03-21 05:34:17	<--	kerrick (~kerrick@206.29.182.199) has quit (Ping timeout: 258 seconds)
2013-03-21 05:35:50	-->	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has joined #haskell
2013-03-21 05:36:04	-->	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-21 05:37:01	-->	miclorb (~miclorb@ppp121-44-171-134.lns20.syd7.internode.on.net) has joined #haskell
2013-03-21 05:37:02	-->	Ivanych (~n@188.17.163.9) has joined #haskell
2013-03-21 05:37:18	<--	nexx (~SPS-User@dslb-188-108-189-032.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-21 05:37:21	<--	lpvb (~lpvb@199.188.72.31) has quit (Quit: Leaving)
2013-03-21 05:37:26	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-21 05:37:32	-->	lpvb (~lpvb@199.188.72.31) has joined #haskell
2013-03-21 05:37:33	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-21 05:37:43	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-21 05:38:01	 *	hackagebot scc 0.8 - Streaming component combinators  http://hackage.haskell.org/package/scc-0.8 (MarioBlazevic)
2013-03-21 05:38:03	 *	hackagebot monoid-subclasses 0.1.1 - Subclasses of Monoid  http://hackage.haskell.org/package/monoid-subclasses-0.1.1 (MarioBlazevic)
2013-03-21 05:38:30	<--	stvc (~stvc@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 264 seconds)
2013-03-21 05:39:10	Ralith	is there any better way to work out where a program is busylooping other than scattering traces absolutely everywhere?
2013-03-21 05:39:16	<--	heatsink (~heatsink@ppp-70-225-174-89.dsl.chmpil.ameritech.net) has quit (Quit: Leaving)
2013-03-21 05:39:24	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-21 05:39:26	-->	nwf (~nwf@a.rr.ietfng.org) has joined #haskell
2013-03-21 05:39:39	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 258 seconds)
2013-03-21 05:40:36	--	preflex_ is now known as preflex
2013-03-21 05:41:24	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-21 05:41:30	-->	nexx (~SPS-User@dslb-178-011-249-246.pools.arcor-ip.net) has joined #haskell
2013-03-21 05:41:51	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 05:42:05	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-21 05:42:20	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-21 05:42:35	<--	MnO2 (~MnO2@nat/yahoo/x-yamupacxkzgefpmv) has quit (Quit: MnO2)
2013-03-21 05:43:57	-->	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has joined #haskell
2013-03-21 05:44:17	alang	edwardk: hi
2013-03-21 05:44:20	-->	MnO2 (~MnO2@nat/yahoo/x-velwelpuoeonfmgf) has joined #haskell
2013-03-21 05:45:17	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Quit: Одлазим)
2013-03-21 05:48:12	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 05:48:56	<--	pzuraq (~pzuraq@eduroam-250-137.ucsc.edu) has quit (Ping timeout: 256 seconds)
2013-03-21 05:48:56	<--	Tesseraction_w (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 256 seconds)
2013-03-21 05:49:01	-->	pzuraq_ (~pzuraq@eduroam-250-137.ucsc.edu) has joined #haskell
2013-03-21 05:49:35	<--	pzuraq_ (~pzuraq@eduroam-250-137.ucsc.edu) has quit (Remote host closed the connection)
2013-03-21 05:49:38	<--	estebistec (~estebiste@72.133.228.205) has quit (Read error: Connection reset by peer)
2013-03-21 05:50:08	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-21 05:50:36	-->	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has joined #haskell
2013-03-21 05:52:19	<--	kcj (~casey@unaffiliated/kcj) has quit (Remote host closed the connection)
2013-03-21 05:53:36	<--	philipde` (~user@cpe-67-246-132-238.stny.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-21 05:54:31	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-21 05:54:53	-->	sw2wolf (~czsq888@220.166.237.156) has joined #haskell
2013-03-21 05:55:06	-->	dreixel_ (~dreixel@host81-152-194-218.range81-152.btcentralplus.com) has joined #haskell
2013-03-21 05:55:55	-->	kamatsu (~Adium@2402:1800:4000:2:b1ac:73df:37f5:749c) has joined #haskell
2013-03-21 05:56:37	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-21 05:57:42	<--	dreixel (~dreixel@anon-172-15.vpn.ipredator.se) has quit (Ping timeout: 256 seconds)
2013-03-21 05:58:49	Ralith	is there any way to get a printable address value from a STRef?
2013-03-21 05:59:42	-->	Guest64340 (~afarmer@host-250-25.pubnet.pdx.edu) has joined #haskell
2013-03-21 06:00:11	-->	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has joined #haskell
2013-03-21 06:00:17	mm_freak	Ralith: you could detect busy-looping by using a profiled build
2013-03-21 06:00:19	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 06:00:43	mm_freak	and it's unlikely that you can get an address for an STRef
2013-03-21 06:00:52	mm_freak	you need Ptr+Storable for that
2013-03-21 06:00:53	arkeet	you could unsafeCoerce it to a word
2013-03-21 06:00:55	<--	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has quit (Quit: ZNC - http://znc.in)
2013-03-21 06:01:03	arkeet	:c
2013-03-21 06:01:10	arkeet	maybe
2013-03-21 06:01:16	-->	dreixel__ (~dreixel@anon-171-14.vpn.ipredator.se) has joined #haskell
2013-03-21 06:01:28	-->	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-21 06:01:40	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-03-21 06:01:41	mm_freak	unsafeCoerce may give you some kind of pointer, but it's unlikely to be the pointer to the data
2013-03-21 06:01:46	--	dreixel__ is now known as dreixel
2013-03-21 06:01:49	arkeet	no, that's not stable
2013-03-21 06:02:00	arkeet	yeah
2013-03-21 06:02:08	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-21 06:02:11	Ralith	I don't need it to be stable or usable for anything other than eyeballing
2013-03-21 06:02:11	mm_freak	in particular unsafeCoerce will disagree about two variables holding the same value
2013-03-21 06:02:13	arkeet	well he didn't say what he wanted the address to point to
2013-03-21 06:02:34	Ralith	I just want to be able to judge 'are these two STRefs equal' in some debug output without n^2 comparisons
2013-03-21 06:02:47	mm_freak	Ralith: there is an Eq instance for STRef
2013-03-21 06:02:51	Ralith	...
2013-03-21 06:02:55	arkeet	he said n^2
2013-03-21 06:02:55	arkeet	:c
2013-03-21 06:03:00	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-21 06:03:03	mm_freak	oh, i missed that
2013-03-21 06:03:22	mm_freak	well, check out the source code of the Eq instance
2013-03-21 06:03:31	Ralith	'cause there's nothing I like more than debug output containing a polynomially-growing number of booleans :P
2013-03-21 06:03:32	arkeet	STRef v1# == STRef v2# = sameMutVar# v1# v2#
2013-03-21 06:03:32	arkeet	 
2013-03-21 06:03:33	mm_freak	it's probably comparing something you will find in some GHC.* module
2013-03-21 06:03:48	Ralith	well that's not very useful
2013-03-21 06:03:51	<--	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has quit (Client Quit)
2013-03-21 06:03:56	<--	u_ (~phillip@adsl-75-57-178-143.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-03-21 06:04:11	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 06:04:11	<--	dreixel_ (~dreixel@host81-152-194-218.range81-152.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-03-21 06:04:15	mm_freak	Ralith: bottom line:  STRefs don't have a portable notion of address
2013-03-21 06:04:24	-->	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-21 06:04:39	Ralith	I don't want it to be portable
2013-03-21 06:04:52	Ralith	what have I said that is unclear?
2013-03-21 06:05:05	arkeet	and sameMutVar# is a primop
2013-03-21 06:05:10	arkeet	so, magic
2013-03-21 06:05:15	Ralith	I'm trying to do some debugging and a way to look at a bunch of strefs and judge identity would be really helpful.
2013-03-21 06:05:29	arkeet	you could tag all your strefs with a stable name?
2013-03-21 06:05:35	Ralith	yeah, that's the fallback
2013-03-21 06:05:38	Ralith	lot of wiring though
2013-03-21 06:06:26	mm_freak	Ralith: i don't see any way to do it
2013-03-21 06:06:44	mm_freak	unsafeCoerce may be your only option
2013-03-21 06:06:49	arkeet	you could make a wrapper around STRef to simplify the plumbing I guess
2013-03-21 06:07:08	-->	kerrick (~kerrick@206.29.182.199) has joined #haskell
2013-03-21 06:07:09	mm_freak	do you need ST?
2013-03-21 06:07:24	-->	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has joined #haskell
2013-03-21 06:07:37	mm_freak	Ralith: there is good reasoning that it's impossible
2013-03-21 06:08:03	mm_freak	runST (newSTRef () >>= getSTRefPointer)
2013-03-21 06:08:07	 *	hackagebot bytestring-lexing 0.4.2 - Parse and produce literals efficiently from strict or lazy bytestrings.  http://hackage.haskell.org/package/bytestring-lexing-0.4.2 (WrenThornton)
2013-03-21 06:08:18	mm_freak	could return 1234 now and 4321 later
2013-03-21 06:08:18	Ralith	mm_freak: it's obviously unsafe, yes, I know that.
2013-03-21 06:08:40	mm_freak	Ralith: yeah, and a quick glance at the low level facilities for STRef makes it look impossible
2013-03-21 06:08:52	mm_freak	but i know that there is a library to compare heap pointers
2013-03-21 06:09:07	mm_freak	it's much more general than comparing STRef, but unfortunately that one needs IO
2013-03-21 06:09:17	mm_freak	so in that case you would have to use unsafePerformIO
2013-03-21 06:10:10	Ralith	I'll just run the plumbing
2013-03-21 06:10:58	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-21 06:11:07	mm_freak	Ralith: http://hackage.haskell.org/package/vacuum
2013-03-21 06:11:33	mm_freak	that's the library i meant
2013-03-21 06:11:57	Ralith	looks fun
2013-03-21 06:12:39	mm_freak	see the bottom of the GHC.Vacuum module
2013-03-21 06:12:40	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-21 06:12:44	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 06:12:47	Ralith	whee, found the loop
2013-03-21 06:13:11	mm_freak	lol
2013-03-21 06:14:35	Ralith	?
2013-03-21 06:14:50	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-03-21 06:15:31	mm_freak	now that i looked up the library =P
2013-03-21 06:15:55	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-21 06:16:15	Ralith	..?
2013-03-21 06:16:22	Ralith	oh
2013-03-21 06:16:25	mm_freak	nevermind
2013-03-21 06:16:34	-->	zhulikas (~Kostas@213.159.34.100) has joined #haskell
2013-03-21 06:16:40	mm_freak	i'm back to OS dev =)
2013-03-21 06:16:51	Ralith	^^
2013-03-21 06:17:06	Ralith	lemme know if you have something idrissy to discuss there
2013-03-21 06:17:31	<--	tranma (~tranma@vl10.gw.ok-labs.com) has left #haskell
2013-03-21 06:17:39	-->	tranma (~tranma@vl10.gw.ok-labs.com) has joined #haskell
2013-03-21 06:17:46	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-21 06:18:00	mm_freak	Ralith: my first step is to finish a small kernel design…  that one can be a basis for an RTS
2013-03-21 06:18:47	Ralith	sounds like fun
2013-03-21 06:19:01	Ralith	do you expect it to be able to share an RTS with the regular environment?
2013-03-21 06:19:05	Ralith	or significant components thereof?
2013-03-21 06:19:39	mm_freak	if this works out the RTS will power the entire system…  programs will be compiled only to STG or something similar and no further
2013-03-21 06:19:47	-->	wavewave (~wavewave@141-213-168-121.vpn.umnet.umich.edu) has joined #haskell
2013-03-21 06:20:05	mm_freak	well, slightly further…  opcode routines will be allowed, but they will run with minimal privileges with no way to call the kernel
2013-03-21 06:20:12	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-21 06:20:19	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 260 seconds)
2013-03-21 06:21:22	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-21 06:21:25	Ralith	oh, sorry, I thought you were talking about the idris RTS
2013-03-21 06:21:37	Ralith	that sounds pretty neat
2013-03-21 06:21:42	Ralith	I assume you've looked into proof-carrying code?
2013-03-21 06:21:49	mm_freak	well, depending on what language i choose, it may well be an idris RTS =)
2013-03-21 06:21:54	mm_freak	yes, i did
2013-03-21 06:22:05	Ralith	the used by idris, not one written in :p
2013-03-21 06:22:07	<--	stacky (84aa2638@gateway/web/freenode/ip.132.170.38.56) has quit (Quit: Page closed)
2013-03-21 06:22:22	<--	ben_d (~muus@131.252.167.166) has quit (Ping timeout: 256 seconds)
2013-03-21 06:22:40	<--	dmac (~Adium@12.207.22.242) has quit (Quit: Leaving.)
2013-03-21 06:22:49	mm_freak	yeah…  recall that i want to compile idris to standalone code powered by an RTS that is essentially a mini-kernel
2013-03-21 06:23:16	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 06:23:20	mm_freak	it includes only the bare essentials like memory management/GC and the bridge to some devices
2013-03-21 06:23:55	mm_freak	the goal is to use idris for what it's supposedly good at:  systems programming =)
2013-03-21 06:24:09	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-21 06:24:16	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 06:24:22	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 06:24:28	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-03-21 06:24:29	<--	Eduard_Munteanu (~Eduard_Mu@188.25.244.109) has quit (Ping timeout: 246 seconds)
2013-03-21 06:24:38	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-21 06:26:41	<--	ISF_ (~ivan@187.64.222.221) has quit (Ping timeout: 245 seconds)
2013-03-21 06:26:47	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-21 06:27:04	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 06:27:44	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-21 06:27:59	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 260 seconds)
2013-03-21 06:28:46	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-21 06:29:11	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-21 06:29:33	<--	KittyFailed (~M30W@unaffiliated/archeydevil/bot/archeydevot) has quit (Ping timeout: 256 seconds)
2013-03-21 06:30:05	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Read error: Operation timed out)
2013-03-21 06:30:07	Pods	Hi I have been acquainted with haskell , and know fair amount of oop, I am looking to contribute for haskell, where can i start from ??
2013-03-21 06:30:58	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-21 06:31:08	<--	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 246 seconds)
2013-03-21 06:31:13	-->	KittyFailed (~M30W@nw1225.affinityvision.com.au) has joined #haskell
2013-03-21 06:31:37	--	KittyFailed is now known as Guest12218
2013-03-21 06:32:52	arkeet	start by forgetting everything about oop :p
2013-03-21 06:34:17	Bynbo7	and then forgetting everything about sequential programming
2013-03-21 06:34:21	--	Bynbo7 is now known as Axman6
2013-03-21 06:35:28	-->	pikhq_ (~pikhq@75-163-199-99.clsp.qwest.net) has joined #haskell
2013-03-21 06:35:34	-->	ndonaldson (~nic@130.56.226.212) has joined #haskell
2013-03-21 06:35:35	<--	pikhq (~pikhq@174-24-29-1.clsp.qwest.net) has quit (Ping timeout: 255 seconds)
2013-03-21 06:35:50	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 06:36:20	wavewave	Pods: follow your interest.
2013-03-21 06:36:53	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-21 06:37:03	Pods	I got acquainted with haskell to implement semantic ontologies for search engines.
2013-03-21 06:37:18	Pods	is there any project related to it haskell.org is upto??
2013-03-21 06:37:30	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 06:37:32	Pods	Anything similar coming about for gsoc2013??
2013-03-21 06:37:40	wavewave	Pods: good. that's actually where haskell can excel but not very much developed yet.
2013-03-21 06:38:07	luite	Pods: too early to tell, but you'll be able to submit your own proposal in a month or so
2013-03-21 06:38:16	-->	Tesseraction_h (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 06:38:19	luite	perhaps earlier :)
2013-03-21 06:38:30	Pods	yes, that is where it has a foothold much stronger comapred to other languages
2013-03-21 06:38:31	luite	if you're a student of course
2013-03-21 06:38:38	Pods	luite: yes am a student :)
2013-03-21 06:38:45	wavewave	I remember there are some packages about rdf and semantic webs but things look not maintained much.
2013-03-21 06:39:11	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 245 seconds)
2013-03-21 06:39:19	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 06:39:21	luite	Pods: do you want to do a gsoc project?
2013-03-21 06:39:37	Pods	until then are there any bugs I could look at solving , any major prerequisites for gsoc apart from the main application and project proposal.
2013-03-21 06:39:43	Pods	Eventually yes.
2013-03-21 06:39:44	wavewave	luite: good to see you. I was about to try your ghcjs branch.
2013-03-21 06:39:58	Pods	I am planning to apply for gsoc2013
2013-03-21 06:40:00	luite	wavewave: oh, you'll need some unpublished GHC patches to compile it
2013-03-21 06:40:30	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has left #haskell
2013-03-21 06:40:32	wavewave	luite : do you have some documentation on it yet?
2013-03-21 06:41:01	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-03-21 06:41:31	luite	Pods: obviously you need some proposal that's interesting and useful for the community, but perhaps more importantly, you need to convince the admins that you're capable of doing the project succesfully on time. so try to show what earlier work you've done
2013-03-21 06:41:41	luite	wavewave: uh not really sorry
2013-03-21 06:41:47	Ralith	mm_freak: so what'd you make of pcc?
2013-03-21 06:42:05	luite	wavewave: problem is that it requires GHC HEAD, and you need lots of patches to get even the dependencies to install correctly
2013-03-21 06:42:20	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-21 06:42:20	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-21 06:42:20	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-21 06:42:40	Pods	luite: yes, I undertsand that, I will be including the projects I have done so far for the admins to evaluate my competance ofcource
2013-03-21 06:42:58	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-03-21 06:43:04	Pods	Are there any bugs/fixes assigned to assist this mode of evaluation though
2013-03-21 06:43:26	Pods	Maybe something which gets beginners familiarized with the source etc??
2013-03-21 06:44:13	luite	hmm, i don't think there's an official policy for the haskell organization for that, but individual projects can probably do some checks
2013-03-21 06:44:37	wavewave	luite: i see.. I just wiped out my 5 month old ghcjs installation, so wonder whether I move gen2-alth or not
2013-03-21 06:45:50	Pods	okay, so until then maybe I could look into the general workings of haskell projects which have been there earlier ..and wait for the student applications to start to put up my projects and stuff ?
2013-03-21 06:46:00	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 256 seconds)
2013-03-21 06:46:30	luite	wavewave: i'm almost done adding the major features to gen2, working on weak refs and CAF retaining now (i think weak refs is the only major missing feature compared to the old code generator now)
2013-03-21 06:46:39	<--	ndonaldson (~nic@130.56.226.212) has quit (Quit: Leaving)
2013-03-21 06:46:42	<--	jamiltron (~jamiltron@c-174-62-77-25.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-21 06:47:26	wavewave	luite: sweet.. so gen2-alth will be merged to gen2, soon.
2013-03-21 06:47:39	luite	nah master
2013-03-21 06:47:57	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-21 06:48:01	luite	the non-alth gen2 is less finished since it relies on a garbage collector implemented in js
2013-03-21 06:48:19	luite	the alth uses javascript objects
2013-03-21 06:48:44	wavewave	luite: I see..
2013-03-21 06:48:52	luite	alth still has some gc-like stuff, but that only does marking, and finalizing for CAFs and weak refs
2013-03-21 06:49:56	<--	Guest12218 (~M30W@nw1225.affinityvision.com.au) has quit (Ping timeout: 260 seconds)
2013-03-21 06:50:02	luite	wavewave: there are some cool features, `foreign import javascript' for example, with async calls: foreign import javascript safe "threadDelay(function() { $c(); }, $1);" js_sleep :: Int -> IO ()
2013-03-21 06:50:20	luite	wavewave: suspends the current haskell thread for the number of milliseconds, then wakes it up again
2013-03-21 06:50:29	-->	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-21 06:50:36	wavewave	Pods: I suggest you to start with some simple parsers for semantic web things. Old codes exist, but I think it had better be rewritten anyway in my opinion.
2013-03-21 06:50:44	luite	of course there's threadDelay that does the same thing, but you can use this pattern for other things like ajax
2013-03-21 06:51:18	luite	mr <- timeout 1000000 $ js_ajax "http://blah"
2013-03-21 06:51:22	Pods	wavewave: that would be perfect, any links or documentations I could find for the same??
2013-03-21 06:51:38	wavewave	luite: cool. I am excited!
2013-03-21 06:51:53	-->	KittyFai1ed (~M30W@ns2.affinityvision.com.au) has joined #haskell
2013-03-21 06:52:00	luite	wavewave: lots of stuff needed to work for that, threading, async exceptions, ffi import patterns :)
2013-03-21 06:52:54	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-03-21 06:53:01	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-21 06:53:07	wavewave	Pods: look at the package swish
2013-03-21 06:53:22	Pods	okay :)
2013-03-21 06:53:37	wavewave	Pods: by the way, I just found that swish is updated recently after a long break. didn't know that.
2013-03-21 06:53:53	<--	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has quit (Quit: Leaving)
2013-03-21 06:54:35	luite	wavewave: me too :) the threading code will take a while to stabilize i think, i just pushed it last week. blackholes, threading and async exceptions are pretty complex together
2013-03-21 06:55:01	ezyang_	heh
2013-03-21 06:55:24	ezyang_	At least you don't have to build it with real threads :^)
2013-03-21 06:55:49	Pods	wavewave : good there has been work, will go check it out :)
2013-03-21 06:55:50	luite	that's true
2013-03-21 06:56:04	wavewave	luite: sounds already complex to me. I do not understand things in detail.. but I am thinking about now it's near to have porting a bunch of javascript functions into haskell. ;-)
2013-03-21 06:56:12	luite	but in return i get a platform that's really not meant for this :p
2013-03-21 06:56:35	-->	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-21 06:56:59	ezyang_	luite: Are you guys compiling into asm.js, by any chance?
2013-03-21 06:57:06	luite	no, at least not yet
2013-03-21 06:57:31	luite	i'm not sure if it's really possible to get a good benefit from asm.js
2013-03-21 06:57:48	-->	shintah (bebble@h-151-194.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 06:57:54	luite	since javascript doesn't have tailcalls, we have to return to a main loop every time
2013-03-21 06:57:54	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-21 06:58:06	luite	where arguments are passed in global variables
2013-03-21 06:58:22	ezyang_	well, trampolines are going to suck for performance
2013-03-21 06:58:24	<--	MnO2 (~MnO2@nat/yahoo/x-velwelpuoeonfmgf) has quit (Quit: MnO2)
2013-03-21 06:58:28	c_wraith	don't look at how the sausage is made
2013-03-21 06:58:32	ezyang_	but they're not that bad :)
2013-03-21 06:58:46	luite	ezyang_: the trampoline itself is not terrible actually, performance becomes much worse one you do heap allocation
2013-03-21 06:58:48	wavewave	btw, will it be possible to have ghcjs installation using simple cabal any time in near future?
2013-03-21 06:58:52	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-03-21 06:58:56	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 06:59:00	luite	wavewave: yes when 7.8.1 is out
2013-03-21 06:59:20	wavewave	luite: oh.. ghc 7.8 accepted some required change?
2013-03-21 06:59:37	luite	wavewave: uh well i still need to submit the patches :)
2013-03-21 06:59:50	wavewave	luite: ;-)
2013-03-21 06:59:52	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 06:59:53	c_wraith	better get to that.
2013-03-21 07:00:09	c_wraith	It's only a few months from being too late to consider new features@
2013-03-21 07:00:13	c_wraith	also, !
2013-03-21 07:00:47	wavewave	I think cabal install ghcjs is the monumental moment.
2013-03-21 07:00:59	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-21 07:01:17	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-21 07:01:17	luite	i have four things, one is a custom Way to allow GHCJS to keep the native and javascript platform files apart, another is something to override GHC.Prim in a GHC API program, another is adding a JavaScriptCallConv calling convention, and the last is adding JavaScript as an architecture to Platform
2013-03-21 07:01:52	luite	all pretty simple patches though
2013-03-21 07:01:58	-->	MnO2 (~MnO2@nat/yahoo/x-wyezfehuvxzynbro) has joined #haskell
2013-03-21 07:02:07	wavewave	sounds great!
2013-03-21 07:03:19	wavewave	I dream that we will see javascript package on hackage..
2013-03-21 07:03:23	<--	andrewhn (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has quit (Ping timeout: 245 seconds)
2013-03-21 07:03:27	wavewave	for example, node.hs
2013-03-21 07:03:37	luite	what would that do?
2013-03-21 07:03:47	luite	cabal support is one of the things where there's still some work
2013-03-21 07:04:11	luite	ideally a package distributing a foreign C file should als be able to distribute a foreign .js file
2013-03-21 07:04:29	wavewave	luite: that's what I exactly mean.
2013-03-21 07:04:35	luite	and then #ifdef __GHCJS__ foreign import javascript ... #else foreign import ccall ... #endif
2013-03-21 07:05:05	wavewave	hQuery etc.
2013-03-21 07:05:09	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-21 07:05:10	luite	oh right
2013-03-21 07:05:18	luite	fay does a few of those things already
2013-03-21 07:05:35	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Remote host closed the connection)
2013-03-21 07:05:36	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 264 seconds)
2013-03-21 07:05:36	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 264 seconds)
2013-03-21 07:06:31	<--	xcv (~xcv@lenoil.plus.com) has quit (Ping timeout: 256 seconds)
2013-03-21 07:06:35	wavewave	i am very interested in writing html5 canvas binding for my purpsoe.
2013-03-21 07:06:45	luite	oh yeah you mentioned that in a ticket
2013-03-21 07:07:04	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-21 07:07:11	wavewave	yeah. long term goal.
2013-03-21 07:07:18	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-21 07:07:39	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-03-21 07:08:16	luite	wavewave: shouldn't be that long now. hamish already has one working through jsc
2013-03-21 07:08:25	luite	for the old codegen
2013-03-21 07:08:32	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 07:09:02	-->	pikhq (~pikhq@75-163-211-10.clsp.qwest.net) has joined #haskell
2013-03-21 07:09:09	<--	pikhq_ (~pikhq@75-163-199-99.clsp.qwest.net) has quit (Ping timeout: 245 seconds)
2013-03-21 07:09:35	wavewave	yes. I was about to try jsc. and start wondering which branch of ghcjs to be installed.
2013-03-21 07:10:05	wavewave	luite: probably I will be stick to master for the time being, waiting for merging gen2 into master.
2013-03-21 07:10:10	luite	oh that doesn't yet work with the new cg, hamish has been working on ghc while i've been doing gen2
2013-03-21 07:10:14	luite	right
2013-03-21 07:11:09	wavewave	good to know that gen2 is now forming its final shape.
2013-03-21 07:11:23	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-21 07:11:26	wavewave	how much performance gain do you expect now?
2013-03-21 07:11:39	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Ping timeout: 245 seconds)
2013-03-21 07:11:53	luite	uh, well a lot for many things, a bit less for others ;)
2013-03-21 07:12:06	luite	fib n = fib (n-2) + fib (n-1) is 100x faster or so :)
2013-03-21 07:12:14	<--	dacto (~chatzilla@c-24-20-132-58.hsd1.or.comcast.net) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307023931])
2013-03-21 07:12:18	wavewave	oh... great!!
2013-03-21 07:12:24	luite	but that's probably a best case scenario for gen2
2013-03-21 07:12:32	luite	since it has no heap allocation at all
2013-03-21 07:12:47	luite	just lots of function calls through the trampoline
2013-03-21 07:12:49	<--	gridaphobe (~gridaphob@cpe-66-91-253-127.san.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-03-21 07:12:52	luite	and those are a lot faster
2013-03-21 07:13:20	-->	andrewhn (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has joined #haskell
2013-03-21 07:13:21	wavewave	luite : do you have a blog writing for that? or any plan to write about the detail?
2013-03-21 07:13:33	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-21 07:14:14	luite	i had hoped to stay within 10x native ghc (so 10x slower at worst usually), but that's not yet achieved...
2013-03-21 07:14:17	<--	sw2wolf (~czsq888@220.166.237.156) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 07:14:28	luite	fib is quite good actually, only 7x slower than native code or so
2013-03-21 07:15:08	wavewave	that's actually pretty good performance. faster than python ;D
2013-03-21 07:15:22	luite	but jsbn (bignumber) is much worse than gmp, and allocation-heavy things are also worse
2013-03-21 07:15:35	-->	ps-auxw (~arneb@p4FF7FC8A.dip.t-dialin.net) has joined #haskell
2013-03-21 07:16:16	wavewave	the first application using ghcjs should be for GUI application for which haskell is just miserable yet.
2013-03-21 07:16:18	luite	maybe with a lot more finetuning, but first the basic features and usability need to be in order :)
2013-03-21 07:16:36	wavewave	for those code, actually 10x slower ghc code performs perfectly well.
2013-03-21 07:16:43	luite	oh i wasn planning on writing a paper about this... but i'm not sure now
2013-03-21 07:16:55	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Remote host closed the connection)
2013-03-21 07:17:20	wavewave	luite: you had better write something on it. this is just great.
2013-03-21 07:17:24	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-21 07:17:31	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-03-21 07:17:35	luite	i'd like to go to icfp, but the paper deadline is in a week
2013-03-21 07:18:21	wavewave	I need to write something about my libraries and apps, too, though...  ahh writing is hard.
2013-03-21 07:18:21	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-03-21 07:18:56	ab9rf	words need to be more cooperative
2013-03-21 07:19:47	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-03-21 07:21:04	<--	joneshf-laptop (~joneshf@mail.concordusapps.com) has quit (Remote host closed the connection)
2013-03-21 07:21:12	wavewave	major blocking step in fficxx is to write a documentation. :-P
2013-03-21 07:22:04	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Quit: Page closed)
2013-03-21 07:22:24	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-21 07:23:27	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 07:23:55	edwardk	alang: heya
2013-03-21 07:23:58	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-03-21 07:23:59	edwardk	alang: was suffering intermittent connectivity and was showing luqui stuff earlier
2013-03-21 07:24:09	-->	pikhq_ (~pikhq@75-163-215-88.clsp.qwest.net) has joined #haskell
2013-03-21 07:24:39	<--	pikhq (~pikhq@75-163-211-10.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-21 07:25:14	alang	edwardk: hey no problem
2013-03-21 07:25:21	-->	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has joined #haskell
2013-03-21 07:25:21	edwardk	whats up?
2013-03-21 07:25:45	alang	what do you think of making Lifted, Mode, Jacobian be MPTCs?
2013-03-21 07:26:01	edwardk	i could be talked into it
2013-03-21 07:26:10	alang	adding the numeric type in
2013-03-21 07:26:21	edwardk	actually you could do one better
2013-03-21 07:26:29	edwardk	if you do them as a type family then you can get defaulting
2013-03-21 07:26:45	edwardk	thats one big part of the current reasoning behind the separate args
2013-03-21 07:26:57	edwardk	but i've gotten better at getting defaulting to fire otherwise
2013-03-21 07:27:27	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-03-21 07:27:27	wavewave	btw, what is the most promising library for indexed monad currently?
2013-03-21 07:27:28	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-21 07:27:28	edwardk	the main thing that is important to keep is that things like diff sin 2   -- needs to keep working without annotation
2013-03-21 07:27:51	edwardk	wavewave: github.com/ekmett/indexed will be interesting, but whatever tekmo has released is the defacto standard right now ;)
2013-03-21 07:27:59	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-21 07:28:11	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 246 seconds)
2013-03-21 07:28:25	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 07:28:55	edwardk	with an MPTC it won't default the arg type to 'Double' there
2013-03-21 07:29:02	alang	right
2013-03-21 07:29:05	wavewave	edwardk: is it the same as indexed on hackage?
2013-03-21 07:29:06	alang	that's not very good =(
2013-03-21 07:29:13	edwardk	this would mean adapting the mode so that the mode contains the type argument
2013-03-21 07:29:23	edwardk	that actually has a ton of knock on effects, but isn't hard per se
2013-03-21 07:29:51	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-21 07:29:54	alang	you mean if we go the type family route?
2013-03-21 07:29:56	edwardk	wavewave: no, though since reiner took his indexed code from my category-extras he gave me permission to take back the name ;)
2013-03-21 07:29:57	wavewave	I am currently using it now. and confused about the relation between it and indexed-core
2013-03-21 07:29:58	edwardk	alang: yeah
2013-03-21 07:30:06	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-21 07:30:17	edwardk	indexed-core is the one you want, not the one based on my code
2013-03-21 07:30:32	edwardk	er index-core
2013-03-21 07:30:34	-->	naohiro (~naohiro@p14047-ipngn100106osakachuo.osaka.ocn.ne.jp) has joined #haskell
2013-03-21 07:30:38	alang	so i tried to naively add a type family, but I got some GHC error and I forgot what it was
2013-03-21 07:30:43	alang	let me see if I can reproduce it
2013-03-21 07:31:01	edwardk	to get the type family is a lot of work but perfectly doable
2013-03-21 07:31:18	-->	Suika (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-21 07:31:22	edwardk	its some scoped type variables for us, but it means you can make nicely unboxed modes for doubles, etc.
2013-03-21 07:31:30	-->	bradleyayers (~brad@49.176.97.249) has joined #haskell
2013-03-21 07:31:43	-->	JohnBat26 (~Eugene@89.175.77.161) has joined #haskell
2013-03-21 07:31:48	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Disconnected by services)
2013-03-21 07:31:50	--	Suika is now known as erkin
2013-03-21 07:31:52	edwardk	we can also likely kill most of the abs1 machinery
2013-03-21 07:32:44	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Ping timeout: 255 seconds)
2013-03-21 07:32:51	wavewave	currently i need indexed state monad. seems that only indexed-extra provides it.
2013-03-21 07:32:59	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-21 07:33:17	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-21 07:33:30	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-21 07:33:43	edwardk	you can make an indexed state monad on the foundation provided by tekmo, its just now what you are used to
2013-03-21 07:33:58	edwardk	i do so in my version of indexed on github, which is based on the same kind of foundation
2013-03-21 07:34:26	edwardk	but i can't implement the indexed indexed-monad transformers until we get real product kinds
2013-03-21 07:34:54	edwardk	er *just not what you are used to
2013-03-21 07:35:06	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-21 07:35:36	wavewave	edwardk: hmm there was some theoretical issues.. i see.
2013-03-21 07:35:47	<--	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has quit (Ping timeout: 240 seconds)
2013-03-21 07:35:50	edwardk	alang: if you wanted to start a branch for monomorphic modes i'd happily contribute
2013-03-21 07:36:15	edwardk	wavewave: yeah product kinds don't evaluate to the product of their kinds =(
2013-03-21 07:36:21	edwardk	they are bigger
2013-03-21 07:37:03	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-21 07:37:25	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-21 07:37:40	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-21 07:37:51	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-21 07:38:23	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 07:40:35	wavewave	edwardk : would you elaborate it a little more?
2013-03-21 07:40:59	edwardk	wavewave: every kind has an extra inhabitant 'Any'
2013-03-21 07:41:20	elliott	edwardk: it's to emulate the fun experience of having _|_ at every level at the value level
2013-03-21 07:41:27	edwardk	wavewave: so (*,*)  is inhabited by '(a,b) for a :: *, b :: * and Any
2013-03-21 07:41:28	elliott	wouldn't be Haskell otherwise
2013-03-21 07:41:40	edwardk	elliott: worse its like having _|_ you can pattern match on
2013-03-21 07:41:48	elliott	like having unamb!
2013-03-21 07:42:43	wavewave	hmmm..
2013-03-21 07:42:53	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 246 seconds)
2013-03-21 07:43:07	edwardk	wavewave: the indexed repo worked around this by using 'herp' and 'derp' to match with the eta laws that should exist
2013-03-21 07:43:18	-->	nithp (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-21 07:43:57	edwardk	wavewave: but in the presence of type families and someone importing GHC.Prim.Any you can derive unsafeCoerce with them
2013-03-21 07:44:39	edwardk	and without type families you can break confluence of typeclass resolution, yay
2013-03-21 07:44:58	wavewave	hmm...
2013-03-21 07:45:31	--	pdxleif_away is now known as pdxleif
2013-03-21 07:45:33	wavewave	so this is a problem in all the indexed monad implementation currently?
2013-03-21 07:45:38	edwardk	So 'Any' causes some serious theoretical problems
2013-03-21 07:45:48	edwardk	other indexed monads don't write indexed monad transformers
2013-03-21 07:46:00	edwardk	ever notice? =)
2013-03-21 07:46:40	edwardk	i'm not sure that with corrected polykinds i could, but i definitely can't without usable product kinds
2013-03-21 07:46:43	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-03-21 07:47:16	-->	ahokaomaeha (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 07:47:17	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 240 seconds)
2013-03-21 07:47:19	edwardk	i can write a monadic transformation of an indexed monad or vice versa
2013-03-21 07:47:22	-->	ramkrsna (~ramkrsna@64-71-23-226.static.wiline.com) has joined #haskell
2013-03-21 07:47:22	<--	ramkrsna (~ramkrsna@64-71-23-226.static.wiline.com) has quit (Changing host)
2013-03-21 07:47:22	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-21 07:47:30	--	ahokaomaeha is now known as mikurubeam
2013-03-21 07:47:32	edwardk	but they don't write indexed indexed-monad transformers
2013-03-21 07:47:51	wavewave	edwardk : I am confused with IMonadTrans in index-core and indexed indexed monad transformer
2013-03-21 07:47:53	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 256 seconds)
2013-03-21 07:48:21	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-21 07:48:25	edwardk	wavewave: try to combine indexed IndexedWriterT and IndexedState
2013-03-21 07:48:40	wavewave	I see..
2013-03-21 07:48:41	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 07:48:43	edwardk	not WriterT and IndexedState, not IndexedWriterT and State
2013-03-21 07:49:09	edwardk	but get an indexed monad where the index is based product-like on the indices of both
2013-03-21 07:49:20	-->	lihaitao (~elihait@ec2-176-32-77-128.ap-northeast-1.compute.amazonaws.com) has joined #haskell
2013-03-21 07:49:34	-->	pikhq (~pikhq@75-163-223-81.clsp.qwest.net) has joined #haskell
2013-03-21 07:49:36	--	pdxleif is now known as pdxleif_away
2013-03-21 07:49:43	<--	pikhq_ (~pikhq@75-163-215-88.clsp.qwest.net) has quit (Ping timeout: 264 seconds)
2013-03-21 07:50:00	<--	Blkt (~user@82.84.159.26) has quit (Read error: Connection reset by peer)
2013-03-21 07:50:08	<--	Ivanych (~n@188.17.163.9) has quit (Quit: Leaving.)
2013-03-21 07:50:28	-->	Ivanych (~n@188.17.163.9) has joined #haskell
2013-03-21 07:50:55	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-21 07:51:12	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-21 07:51:32	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-21 07:51:39	wavewave	edwardk : i vaguely got your point. thanks for the clarification.
2013-03-21 07:51:42	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-21 07:51:53	edwardk	sorry it wasn't clearer. bit tired =)
2013-03-21 07:53:34	wavewave	edwardk: it's difficult for me anyway. I am type-system novice. thanks =)
2013-03-21 07:55:44	alang	edwardk: I get a "Can't represent irreducible predicates in Template Haskell: Numeric.AD.Internal.Classes.Domain t a" in the call to deriveNumeric where Domain :: (* -> *) -> * -> Constraint
2013-03-21 07:56:12	alang	edwardk: Do you know what this is about?
2013-03-21 07:57:38	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 07:57:50	alang	this is probably a bit vague
2013-03-21 07:57:51	alang	sec
2013-03-21 07:58:29	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 07:58:56	alang	edwardk: https://github.com/alang9/ad/tree/type-familize
2013-03-21 07:59:15	<--	andrewhn (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has quit (Quit: Page closed)
2013-03-21 07:59:34	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 08:00:19	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 08:00:34	-->	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has joined #haskell
2013-03-21 08:01:20	<--	MnO2 (~MnO2@nat/yahoo/x-wyezfehuvxzynbro) has quit (Quit: MnO2)
2013-03-21 08:01:32	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-03-21 08:01:50	<--	Ivanych (~n@188.17.163.9) has quit (Quit: Leaving.)
2013-03-21 08:03:00	edwardk	alang: i'm betting you have a whole pile of incorrect kinds in the template haskell machinery if its based on the old stuff
2013-03-21 08:03:32	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 08:03:45	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-21 08:03:49	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 08:04:05	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 08:04:52	-->	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-03-21 08:05:11	<--	nus-- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 08:06:13	-->	MnO2 (~MnO2@nat/yahoo/x-nxmdzpmkkokytoyk) has joined #haskell
2013-03-21 08:08:44	<--	KittyFai1ed (~M30W@ns2.affinityvision.com.au) has quit (Read error: Connection reset by peer)
2013-03-21 08:09:09	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-21 08:10:32	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 255 seconds)
2013-03-21 08:10:51	-->	pikhq_ (~pikhq@174-24-7-176.clsp.qwest.net) has joined #haskell
2013-03-21 08:10:59	<--	pikhq (~pikhq@75-163-223-81.clsp.qwest.net) has quit (Ping timeout: 255 seconds)
2013-03-21 08:11:26	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:11:28	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 08:12:07	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:12:08	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 08:12:38	<--	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-03-21 08:12:48	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:12:50	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 08:13:23	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 256 seconds)
2013-03-21 08:13:28	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:13:29	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 08:14:08	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:14:09	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 08:14:29	<--	kamatsu (~Adium@2402:1800:4000:2:b1ac:73df:37f5:749c) has quit (Quit: Leaving.)
2013-03-21 08:14:45	-->	sunfun (~sunfun@2.237.168.123) has joined #haskell
2013-03-21 08:14:45	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 08:14:59	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-21 08:15:38	<--	yacks (~yacks@180.151.36.168) has quit (Read error: Operation timed out)
2013-03-21 08:15:48	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Remote host closed the connection)
2013-03-21 08:15:54	<--	nithp (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-21 08:16:29	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-03-21 08:17:03	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-21 08:17:07	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-21 08:17:53	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-21 08:18:42	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-21 08:18:50	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 08:19:04	--	Watcher7 is now known as Watcher7|off
2013-03-21 08:19:53	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Read error: Connection reset by peer)
2013-03-21 08:19:57	-->	pikhq (~pikhq@174-24-9-52.clsp.qwest.net) has joined #haskell
2013-03-21 08:20:11	<--	pikhq_ (~pikhq@174-24-7-176.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-21 08:20:55	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Quit: Leaving)
2013-03-21 08:20:58	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-21 08:21:15	-->	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has joined #haskell
2013-03-21 08:21:47	-->	Paprikachu (~Paprikach@178.115.250.32.wireless.dyn.drei.com) has joined #haskell
2013-03-21 08:21:53	<--	tranma (~tranma@vl10.gw.ok-labs.com) has quit (Quit: Leaving.)
2013-03-21 08:22:41	-->	jonke (~quassel@h87-96-186-149.dynamic.se.alltele.net) has joined #haskell
2013-03-21 08:24:07	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-21 08:25:19	-->	cdidd (~cdidd@95-27-69-201.broadband.corbina.ru) has joined #haskell
2013-03-21 08:25:31	<--	kerrick (~kerrick@206.29.182.199) has quit (Read error: Connection reset by peer)
2013-03-21 08:25:58	-->	kerrick (~kerrick@206.29.182.199) has joined #haskell
2013-03-21 08:26:39	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-21 08:28:34	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-21 08:29:07	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 08:29:44	-->	comatose (ca14c1fe@gateway/web/freenode/ip.202.20.193.254) has joined #haskell
2013-03-21 08:30:00	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 276 seconds)
2013-03-21 08:30:17	<--	pikhq (~pikhq@174-24-9-52.clsp.qwest.net) has quit (Ping timeout: 240 seconds)
2013-03-21 08:30:29	-->	pikhq (~pikhq@174-24-11-143.clsp.qwest.net) has joined #haskell
2013-03-21 08:32:35	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-03-21 08:32:51	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-03-21 08:33:00	-->	OlegYch9 (~OlegYch@46.28.101.180) has joined #haskell
2013-03-21 08:33:42	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-21 08:33:57	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-21 08:34:24	<--	OlegYch (~OlegYch@46.28.101.180) has quit (Ping timeout: 256 seconds)
2013-03-21 08:34:47	-->	usr1324 (59eede12@gateway/web/freenode/ip.89.238.222.18) has joined #haskell
2013-03-21 08:34:51	-->	adzeitor (~adzeitor@31.207.132.19) has joined #haskell
2013-03-21 08:35:47	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-21 08:35:55	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-03-21 08:37:04	comatose	@hoogle
2013-03-21 08:37:04	lambdabot	No query entered
2013-03-21 08:37:04	lambdabot	Try --help for command line options
2013-03-21 08:37:16	comatose	@hoogle [a] -> [a]
2013-03-21 08:37:16	lambdabot	Prelude cycle :: [a] -> [a]
2013-03-21 08:37:16	lambdabot	Data.List cycle :: [a] -> [a]
2013-03-21 08:37:16	lambdabot	Prelude init :: [a] -> [a]
2013-03-21 08:37:27	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-21 08:37:41	comatose	@ty cycle
2013-03-21 08:37:42	lambdabot	[a] -> [a]
2013-03-21 08:38:30	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-21 08:38:40	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 08:39:03	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 08:39:07	<--	drbean (~drbean@113.196.171.151) has quit (Client Quit)
2013-03-21 08:39:09	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-21 08:39:13	<--	mmcdermo (~mmcdermo@adsl-99-170-150-159.dsl.pltn13.sbcglobal.net) has quit (Quit: Lost terminal)
2013-03-21 08:39:35	arkeet	@@ @free @type cycle
2013-03-21 08:39:37	lambdabot	 Pattern match failure in do expression at Plugin/Free/FreeTheorem.hs:54:21-35
2013-03-21 08:39:41	arkeet	uh
2013-03-21 08:39:53	-->	Itkovian (~Itkovian@188.188.66.72) has joined #haskell
2013-03-21 08:39:59	arkeet	@free [a] -> [a]
2013-03-21 08:40:00	lambdabot	Pattern match failure in do expression at Plugin/Free/FreeTheorem.hs:54:21-35
2013-03-21 08:40:02	arkeet	@free cycle :: [a] -> [a]
2013-03-21 08:40:03	lambdabot	$map f . cycle = cycle . $map f
2013-03-21 08:40:51	arkeet	it would be nice to have more pointful command composition
2013-03-21 08:40:58	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-21 08:41:07	arkeet	i.e. put the outputs of commands anywhere in the input of another command.
2013-03-21 08:41:17	-->	einsof (~einsof@h-36-195.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 08:41:35	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-21 08:42:17	arkeet	maybe pointful isn't the word.
2013-03-21 08:42:26	comatose	@free map
2013-03-21 08:42:27	lambdabot	g . h = k . f => $map g . map h = map k . $map f
2013-03-21 08:42:34	arkeet	@free cycle
2013-03-21 08:42:36	lambdabot	$map f . cycle = cycle . $map f
2013-03-21 08:42:39	arkeet	hmm.
2013-03-21 08:42:57	arkeet	@free head
2013-03-21 08:42:58	lambdabot	f . head = head . $map f
2013-03-21 08:43:11	comatose	@free (>>>)
2013-03-21 08:43:11	lambdabot	Pattern match failure in do expression at Plugin/Free/FreeTheorem.hs:54:21-35
2013-03-21 08:43:12	arkeet	@free seq
2013-03-21 08:43:14	-->	takuan (~takuan@178-118-210-248.access.telenet.be) has joined #haskell
2013-03-21 08:43:14	lambdabot	g . seq x = seq (f x) . g
2013-03-21 08:43:20	arkeet	yeah right.
2013-03-21 08:43:20	arkeet	:P
2013-03-21 08:43:41	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-03-21 08:44:15	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 260 seconds)
2013-03-21 08:44:38	supki	what's f?
2013-03-21 08:44:48	arkeet	an arbitrary function of the appropriate type
2013-03-21 08:45:22	supki	@free const
2013-03-21 08:45:23	lambdabot	f . const x = const (f x) . g
2013-03-21 08:45:29	supki	aha
2013-03-21 08:45:34	arkeet	> id . seq undefined $ ()
2013-03-21 08:45:38	lambdabot	  *Exception: Prelude.undefined
2013-03-21 08:45:45	arkeet	> seq (const () undefined) . id $ ()
2013-03-21 08:45:48	lambdabot	  ()
2013-03-21 08:45:57	mm_freak	Ralith: currently i have no immediate plans to support ppc, simply because i'm not familiar with it and i have no hardware test system for it
2013-03-21 08:46:04	arkeet	where's that free theorem generator?
2013-03-21 08:46:24	mm_freak	Ralith: my main target is x86_64, although currently everything is 32 bits protected mode
2013-03-21 08:46:37	Ralith	mm_freak: pcc, as in proof carrying code
2013-03-21 08:46:43	arkeet	ah http://www-ps.iai.uni-bonn.de/cgi-bin/free-theorems-webui.cgi
2013-03-21 08:46:49	mm_freak	oh =)
2013-03-21 08:46:56	mm_freak	Ralith: could you summarize what you mean by that?
2013-03-21 08:46:57	<--	lihaitao (~elihait@ec2-176-32-77-128.ap-northeast-1.compute.amazonaws.com) has quit (Quit: Ex-Chat)
2013-03-21 08:46:59	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-21 08:47:33	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-21 08:49:06	Ralith	mm_freak: it sounded a lot like what you're doing re verified security
2013-03-21 08:49:10	comatose	thanks for free-theorem
2013-03-21 08:49:33	mm_freak	Ralith: yes, that's exactly what i'm doing…  statically enforced security models
2013-03-21 08:49:35	arkeet	so the free theorem for seq is true if f and g are strict and total. obviously
2013-03-21 08:49:47	arkeet	I guess for seq we only need that f is strict and total.
2013-03-21 08:49:56	Ralith	mm_freak: to be clear--you're implementing a kernel that uses pcc?
2013-03-21 08:49:57	Axman6	like all the best functions are
2013-03-21 08:50:05	-->	pikhq_ (~pikhq@174-24-17-74.clsp.qwest.net) has joined #haskell
2013-03-21 08:50:10	arkeet	the best functions are strict?
2013-03-21 08:50:15	-->	atinon (~comatose@39.7.44.61) has joined #haskell
2013-03-21 08:50:19	<--	pikhq (~pikhq@174-24-11-143.clsp.qwest.net) has quit (Ping timeout: 260 seconds)
2013-03-21 08:50:21	-->	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has joined #haskell
2013-03-21 08:50:37	mm_freak	Ralith: a kernel that /provides/ pcc (if i'm understanding that term properly) and ideally using pcc for its own implementation as well
2013-03-21 08:50:40	mm_freak	the main aim is the former
2013-03-21 08:51:16	Ralith	awesome
2013-03-21 08:51:21	Ralith	that's very exciting
2013-03-21 08:52:01	mm_freak	i'm hoping to have a first working prototype in a couple of months
2013-03-21 08:52:01	-->	ptek (~ptek@217.64.164.1) has joined #haskell
2013-03-21 08:53:21	-->	chatsiri_ (~chatsiri_@158.108.228.241) has joined #haskell
2013-03-21 08:54:46	mm_freak	likely it will be powered by some functional language, most likely idris or haskell, but possibly also my own language
2013-03-21 08:54:47	-->	jao (~jao@67.51.76.53) has joined #haskell
2013-03-21 08:55:03	<--	jao (~jao@67.51.76.53) has quit (Changing host)
2013-03-21 08:55:03	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-21 08:55:39	<--	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (Read error: Connection reset by peer)
2013-03-21 08:55:42	mm_freak	i even considered agda, but the code base is too complicated
2013-03-21 08:56:09	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-21 08:56:34	<--	naohiro (~naohiro@p14047-ipngn100106osakachuo.osaka.ocn.ne.jp) has quit (Quit: Leaving)
2013-03-21 08:56:55	<--	zeiris (~amtal@198.144.180.18) has quit (Ping timeout: 264 seconds)
2013-03-21 08:57:10	mm_freak	my impression is that the agda code is mainly built with the emacs interface in mind and doesn't really support compilation well, even though it has some backends
2013-03-21 08:57:42	<--	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-03-21 08:58:55	-->	mightybyte (~mightybyt@199.47.72.128) has joined #haskell
2013-03-21 08:59:00	<--	djahandarie (darius@unaffiliated/djahandarie) has quit (Read error: Operation timed out)
2013-03-21 08:59:00	<--	Tesseraction_h (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 264 seconds)
2013-03-21 08:59:27	alang	edwardk: in the Forward constructor of Forward, only the first argument is strict. Why is that?
2013-03-21 08:59:38	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 08:59:45	edwardk	its strict to match the semantics of the primal value
2013-03-21 09:00:00	edwardk	e.g. if you calculated with newtype Id a = Id a
2013-03-21 09:00:04	edwardk	then the primal would be strict
2013-03-21 09:00:16	mm_freak	Ralith: since the most likely choice is idris i'd be happy to help you with the compiler backend =)
2013-03-21 09:00:18	alang	i mean why is the other one lazy?
2013-03-21 09:00:39	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-21 09:00:49	-->	srhb (~srhb@82.211.217.226) has joined #haskell
2013-03-21 09:00:50	<--	atinon (~comatose@39.7.44.61) has quit (Remote host closed the connection)
2013-03-21 09:00:59	edwardk	its lazy because an undefined derivative shoudn't affect the definedness of the primal
2013-03-21 09:01:20	-->	djahandarie (darius@unaffiliated/djahandarie) has joined #haskell
2013-03-21 09:01:36	edwardk	basically the strictness on the primal is never a problem, but strictness on other stuff could be
2013-03-21 09:01:46	edwardk	we may want to introduce a mode with a strict derivative, etc.
2013-03-21 09:01:50	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 252 seconds)
2013-03-21 09:01:53	alang	right
2013-03-21 09:01:55	edwardk	but it does introduce semantic issues
2013-03-21 09:01:56	-->	zeiris (~amtal@198.144.180.18) has joined #haskell
2013-03-21 09:02:14	Ralith	mm_freak: that would be wonderful!
2013-03-21 09:02:23	edwardk	so even so we'd probably want the version that was properly lazy in the other derivatives around
2013-03-21 09:02:45	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-21 09:02:46	<--	mightybyte (~mightybyt@199.47.72.128) has left #haskell
2013-03-21 09:03:05	alang	ok, thanks!
2013-03-21 09:03:18	-->	pikhq (~pikhq@174-24-19-176.clsp.qwest.net) has joined #haskell
2013-03-21 09:03:35	Ralith	mm_freak: something to bear in mind is that there's a lot of opportunity to shape/idris to your particular needs, particularly at its current stage
2013-03-21 09:03:49	<--	pikhq_ (~pikhq@174-24-17-74.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-21 09:05:52	`nand`	morning all
2013-03-21 09:05:52	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 258 seconds)
2013-03-21 09:06:11	srhb	`nand`: Morning.
2013-03-21 09:06:16	<--	fayden (~fayden@24.53.57.18) has quit (Read error: Operation timed out)
2013-03-21 09:07:18	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Ping timeout: 264 seconds)
2013-03-21 09:08:38	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-21 09:08:57	notdan	How one would go about representing binary relationships using Arrows?
2013-03-21 09:09:08	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 09:09:53	Ralith	mm_freak: if you want to get your feet wet, I could use a hand tracking down some UB arising from escape analysis...
2013-03-21 09:10:34	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-03-21 09:10:56	-->	dibblego (~nobody@203.202.52.99) has joined #haskell
2013-03-21 09:11:08	-->	atinon (~androirc@c193254.sait.samsung.co.kr) has joined #haskell
2013-03-21 09:11:19	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-21 09:11:35	<--	atinon (~androirc@c193254.sait.samsung.co.kr) has left #haskell
2013-03-21 09:11:47	-->	atinon (~androirc@c193254.sait.samsung.co.kr) has joined #haskell
2013-03-21 09:12:03	-->	dgriffi (~dave@99-160-156-34.lightspeed.bkfdca.sbcglobal.net) has joined #haskell
2013-03-21 09:12:05	<--	wavewave (~wavewave@141-213-168-121.vpn.umnet.umich.edu) has quit (Ping timeout: 245 seconds)
2013-03-21 09:12:19	dgriffi	is anyone here familiar with Pandoc?
2013-03-21 09:12:24	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-03-21 09:12:36	dgriffi	I'm trying to make a simple modification and I'm not getting something basic
2013-03-21 09:13:11	 *	hackagebot network-conduit-tls 1.0.0.1 - Create TLS-aware network code with conduits  http://hackage.haskell.org/package/network-conduit-tls-1.0.0.1 (MichaelSnoyman)
2013-03-21 09:13:13	 *	hackagebot warp-tls 1.4.0.1 - SSL support for Warp via the TLS package  http://hackage.haskell.org/package/warp-tls-1.4.0.1 (MichaelSnoyman)
2013-03-21 09:13:15	 *	hackagebot keter 0.3.5.4 - Web application deployment manager, focusing on Haskell web frameworks  http://hackage.haskell.org/package/keter-0.3.5.4 (MichaelSnoyman)
2013-03-21 09:13:33	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 258 seconds)
2013-03-21 09:14:06	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-21 09:15:18	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-21 09:15:27	dgriffi	anyone here?
2013-03-21 09:15:28	-->	pikhq_ (~pikhq@174-24-21-162.clsp.qwest.net) has joined #haskell
2013-03-21 09:15:33	elliott	no :)
2013-03-21 09:15:42	<--	pikhq (~pikhq@174-24-19-176.clsp.qwest.net) has quit (Ping timeout: 264 seconds)
2013-03-21 09:16:16	-->	hallski (~hallski@80.239.169.202) has joined #haskell
2013-03-21 09:16:18	`nand`	I'm here and incredibly bored
2013-03-21 09:16:20	<--	dibblego (~nobody@203.202.52.99) has quit (Ping timeout: 256 seconds)
2013-03-21 09:16:38	dgriffi	`nand`: well, hopefully I have something that'll make you un-bored
2013-03-21 09:17:28	<--	pxdr (~pxdr@dslb-188-103-098-147.pools.arcor-ip.net) has quit (Quit: WeeChat 0.3.2)
2013-03-21 09:17:54	`nand`	cobored
2013-03-21 09:18:02	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 255 seconds)
2013-03-21 09:18:05	-->	silver (~silver@178.121.101.102) has joined #haskell
2013-03-21 09:18:16	-->	igstan (~igstan@89.36.11.207) has joined #haskell
2013-03-21 09:18:22	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-21 09:18:23	`nand`	alas, I know nothing about pandoc
2013-03-21 09:18:47	hpaste	dgriffi pasted “pandoc mod” at http://hpaste.org/84413
2013-03-21 09:19:21	dgriffi	`nand`: well, could you at least look at what I put on hpaste and tell me if I did something stupid?
2013-03-21 09:19:45	dgriffi	it fails to compile, giving me "Not in scope: data constructor `NewPage'"
2013-03-21 09:19:53	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-21 09:20:08	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-21 09:20:22	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-03-21 09:20:25	srhb	dgriffi: Well there you go, you haven't imported that.
2013-03-21 09:20:27	`nand`	well, have you defined a data constructor NewPage?
2013-03-21 09:20:29	`nand`	oh
2013-03-21 09:20:31	`nand`	or imported
2013-03-21 09:20:54	srhb	dgriffi: There's also something weird with the number of arguments to blockToHtmk
2013-03-21 09:21:00	srhb	Html*
2013-03-21 09:21:43	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-21 09:21:49	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-21 09:21:57	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-21 09:21:58	dgriffi	I'm trying different ways of calling blockToHtml and I keep getting this error... not sure where I need to add something
2013-03-21 09:22:21	srhb	dgriffi: Do you know what data constructors are?
2013-03-21 09:22:26	dgriffi	srhb: no
2013-03-21 09:22:30	`nand`	oh
2013-03-21 09:22:39	`nand`	have you read an introduction to haskell?
2013-03-21 09:22:44	dgriffi	barely
2013-03-21 09:22:55	dgriffi	I'm trying to goad the maintainer of pandoc into adding a feature
2013-03-21 09:23:08	srhb	I think you'll find it an insurmountable task to try and jot random things into the file and have it compile :-)
2013-03-21 09:23:47	dgriffi	they're not quite random.. I was looking at the line below it (talking about HorizontalRule), copying it, and changing it slightly
2013-03-21 09:23:48	-->	fayden (~fayden@24.53.57.18) has joined #haskell
2013-03-21 09:24:04	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 09:24:20	srhb	Well. It looks to me like the arguments to blockToHtml are html-y data constructors
2013-03-21 09:24:38	srhb	NewPage doesn't sound like it's one.
2013-03-21 09:24:49	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-21 09:24:57	<--	Itkovian (~Itkovian@188.188.66.72) has quit (Read error: Connection reset by peer)
2013-03-21 09:25:47	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-21 09:25:47	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-21 09:25:47	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-21 09:25:51	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-21 09:25:55	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-21 09:26:06	latermuse	dgriffi: it will be hard to convince the maintainer of pandoc to add a feature when you dont even understand how haskell/pandoc work
2013-03-21 09:26:30	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-21 09:27:21	dgriffi	latermuse: I'm afraid of that.  he's added several other suggestions.. two remain
2013-03-21 09:27:37	latermuse	dgriffi: right on
2013-03-21 09:27:59	srhb	dgriffi: Another problem is that pure newPage doesn't mean anything without newPage defined
2013-03-21 09:28:15	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Read error: Connection reset by peer)
2013-03-21 09:28:15	srhb	dgriffi: horizontalRule is defined in Text.Pandon.Builder - perhaps you can glean some information there.
2013-03-21 09:28:28	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-21 09:29:06	srhb	And HorizontalRule in Text.Pandoc.Definition
2013-03-21 09:29:18	srhb	That's probably where you'd want the NewPage constructor to come from
2013-03-21 09:29:24	dgriffi	srhb: any hints on what file to rifle through?
2013-03-21 09:29:35	srhb	Yeah, those two
2013-03-21 09:29:43	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 09:29:48	srhb	Text.Pandoc.Builder and Text.Pandoc.Definition
2013-03-21 09:30:01	srhb	the first one should be define newPage, the second one should define NewPage
2013-03-21 09:30:04	-->	madjestic (~madjestic@178.230.54.14) has joined #haskell
2013-03-21 09:30:10	dgriffi	Text/Pandoc/Builder doesn't exist
2013-03-21 09:30:39	srhb	http://hackage.haskell.org/packages/archive/pandoc-types/latest/doc/html/src/Text-Pandoc-Builder.html
2013-03-21 09:30:45	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-03-21 09:31:30	srhb	Start here, really: http://hackage.haskell.org/packages/archive/pandoc-types/latest/doc/html/Text-Pandoc-Definition.html#v:HorizontalRule
2013-03-21 09:31:32	-->	charliesome (~textual@124-168-111-211.dyn.iinet.net.au) has joined #haskell
2013-03-21 09:32:05	srhb	dgriffi: Now, if you think NewPage deserved is a valid constructor for a Block-type-thing, you'll have to add that.
2013-03-21 09:32:06	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Read error: Connection reset by peer)
2013-03-21 09:32:10	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Read error: Connection reset by peer)
2013-03-21 09:32:11	dgriffi	so, I'm going to have to hack a library?
2013-03-21 09:32:15	-->	tanakh__ (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-21 09:32:25	-->	hkBst (~marijn@79.170.210.172) has joined #haskell
2013-03-21 09:32:25	<--	hkBst (~marijn@79.170.210.172) has quit (Changing host)
2013-03-21 09:32:25	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-21 09:32:27	srhb	Yes.
2013-03-21 09:32:37	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-21 09:32:56	srhb	Just cabal unpack pandoc-types -- if you have a working Haskell setup
2013-03-21 09:33:08	<--	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has quit (Quit: Konversation terminated!)
2013-03-21 09:33:15	dgriffi	srhb: I have that much down
2013-03-21 09:33:20	srhb	Ok. :)
2013-03-21 09:33:27	<--	tanakh (~tanakh@060240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-21 09:33:37	srhb	Once you make the appropriate changes to those two files you should be more or less set.
2013-03-21 09:33:42	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 09:34:04	dgriffi	I wonder why he made a seperate library like this
2013-03-21 09:34:20	srhb	Probably because it can be reused without the rest of pandoc.
2013-03-21 09:34:25	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-21 09:34:25	<--	Guest64340 (~afarmer@host-250-25.pubnet.pdx.edu) has quit (Ping timeout: 256 seconds)
2013-03-21 09:34:29	elliott	licensing perhaps
2013-03-21 09:34:32	elliott	or because pandoc has 234892349823849 deps
2013-03-21 09:34:41	srhb	:-)
2013-03-21 09:34:46	dgriffi	<boggle>
2013-03-21 09:35:19	srhb	dgriffi: By the way, where's blockToHtml from?
2013-03-21 09:35:52	srhb	Nevermind, found it.
2013-03-21 09:36:17	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-21 09:37:21	srhb	dgriffi: When you have the rest done, you'll need blockToHtml _ NewPage = return yourHtmlThingy - remember that first argument.
2013-03-21 09:37:32	dgriffi	ah.. I think the more proper thing to do is clone pandoc-types straight from github
2013-03-21 09:37:48	srhb	It's not a big deal if you do one or the other right now
2013-03-21 09:37:51	dgriffi	because pandoc is up to version 1.11.1 and pandoc types is 1.10
2013-03-21 09:38:00	srhb	Unless there have been massive changes.
2013-03-21 09:38:05	dgriffi	somewhat
2013-03-21 09:38:21	dgriffi	one of the previous changes I requested required an API change
2013-03-21 09:38:29	srhb	Either way I think you have everything you need now, aside from some basic Haskell knowhow :P
2013-03-21 09:38:40	-->	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has joined #haskell
2013-03-21 09:38:52	dgriffi	yeah.  thanks for the help
2013-03-21 09:39:07	srhb	No problem, lemme know if you get stuck.
2013-03-21 09:39:42	<--	william-s (reprisal@dereferenced.nullpointer.net) has quit (Ping timeout: 264 seconds)
2013-03-21 09:39:52	dgriffi	one other question... why are haskell binaries so big?
2013-03-21 09:40:05	srhb	They include an RTS and they're statically linked by default, afaik
2013-03-21 09:40:50	mikeplus64	dgriffi: protip: compile with -dynamic for dynamic linking
2013-03-21 09:41:06	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-21 09:41:10	srhb	But in my experience, all that gives you is smaller binaries at the cost of more headaches
2013-03-21 09:41:16	srhb	I don't find myself needing small binaries very often.
2013-03-21 09:41:27	mikeplus64	also you can have shared: True in your ~/.cabal/config file for twice the compilation and dynamic libs
2013-03-21 09:41:34	<--	args[0] (~args0]@199.188.72.28) has quit (Remote host closed the connection)
2013-03-21 09:41:34	dgriffi	yes, I've heard the talk about abandoning dynamics in other languages
2013-03-21 09:41:44	mikeplus64	srhb: why?
2013-03-21 09:41:51	srhb	Harddisk space is cheap most of the time.
2013-03-21 09:41:52	mikeplus64	i mean, what headaches
2013-03-21 09:42:01	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-21 09:42:02	srhb	Not being able to share the binaries easily and so on.
2013-03-21 09:42:04	<--	Deewiant (~deewiant@deewiant.iki.fi) has quit (Quit: Viivan loppu.)
2013-03-21 09:42:38	-->	Deewiant (~deewiant@deewiant.iki.fi) has joined #haskell
2013-03-21 09:42:45	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-21 09:43:07	mikeplus64	i don't like having 50+MB binaries
2013-03-21 09:43:18	srhb	OK. :) That's fine. I just don't care if they're 50MB-
2013-03-21 09:43:20	srhb	+*
2013-03-21 09:43:21	mikeplus64	which is quite easily done using e.g. yesod and its accompanyment
2013-03-21 09:43:27	mikeplus64	or other web things
2013-03-21 09:43:46	srhb	Bottom line being, if you care for some reason, you can dynamically link.
2013-03-21 09:44:05	srhb	I think most people that do care care for no particular reason, but that's just religion. :P
2013-03-21 09:44:06	<--	k0001 (~k0001@host119.181-1-201.telecom.net.ar) has quit (Ping timeout: 276 seconds)
2013-03-21 09:44:09	<--	madjestic (~madjestic@178.230.54.14) has quit (Read error: Connection reset by peer)
2013-03-21 09:44:21	-->	heruur (~tvh@dslb-094-222-008-203.pools.arcor-ip.net) has joined #haskell
2013-03-21 09:44:37	dgriffi	what's the best way to remove a package that was installed using cabal?
2013-03-21 09:44:41	-->	itemad (~user@212.0.102.162) has joined #haskell
2013-03-21 09:44:49	latermuse	cant
2013-03-21 09:44:52	srhb	dgriffi: There's no good way, you can unregister it with ghc-pkg though
2013-03-21 09:45:00	srhb	dgriffi: cabal is not a package manager.
2013-03-21 09:45:15	srhb	ghc-pkg unregister foopackage
2013-03-21 09:45:25	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-21 09:45:39	<--	miclorb (~miclorb@ppp121-44-171-134.lns20.syd7.internode.on.net) has quit (Remote host closed the connection)
2013-03-21 09:45:49	<--	atinon (~androirc@c193254.sait.samsung.co.kr) has quit (Read error: Connection reset by peer)
2013-03-21 09:46:16	-->	atinon (~androirc@c193254.sait.samsung.co.kr) has joined #haskell
2013-03-21 09:46:23	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-21 09:46:26	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-03-21 09:46:37	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-21 09:46:39	tdammers	dgriffi: the best way is to not have it installed globally at all
2013-03-21 09:46:43	tdammers	use cabal-dev
2013-03-21 09:47:03	tdammers	and then if things go pear-shape, you can just zap the .cabal-dev directory and rebuild
2013-03-21 09:47:24	dgriffi	tdammers: that's how I'm using pandoc right now
2013-03-21 09:47:31	mikeplus64	i don't think that's the "best" way. building a cabal-dev environment can take a very long time, and use a lot of disk space if you're using it for every little project
2013-03-21 09:47:48	tdammers	there's not really an alternative though
2013-03-21 09:47:57	tdammers	except for packages that you can pull from your distro's repos
2013-03-21 09:48:06	srhb	Which is a bad idea most of the time anyway
2013-03-21 09:48:17	srhb	I think dgriffi doesn't need anything but ghc-pkg unregister right now
2013-03-21 09:48:17	mikeplus64	the "best" way is imo to use a package manager. arch linux has good haskell/haskell-web repos
2013-03-21 09:48:23	srhb	What.
2013-03-21 09:48:38	srhb	I completely disagree with that. There are so many people having headaches with distro packaged Haskell things.
2013-03-21 09:48:39	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Quit: anderse)
2013-03-21 09:48:48	tdammers	srhb: like what?
2013-03-21 09:49:08	srhb	Incompatibilities and weird breakages.
2013-03-21 09:49:09	tuv	i heard there is a haskell virtualenv. isn't it any good?
2013-03-21 09:49:10	mikeplus64	srhb: yes, but when the packaging is given love, everything is roses
2013-03-21 09:49:24	 *	srhb shrugs
2013-03-21 09:49:25	mikeplus64	srhb: (ie they actually test the packages work with eachother)
2013-03-21 09:49:34	srhb	All I found working is using cabal and cabal-dev
2013-03-21 09:49:41	srhb	Having only ghc and cabal installed globally.
2013-03-21 09:49:49	-->	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has joined #haskell
2013-03-21 09:49:55	tdammers	I have haskell-platform installed from debian
2013-03-21 09:50:03	tdammers	and a few packages that I use regularly
2013-03-21 09:50:06	mikeplus64	i don't like waiting for compiles or downloads and definitely not manually updating packages with cabal
2013-03-21 09:50:07	-->	madjestic (~madjestic@178.230.54.14) has joined #haskell
2013-03-21 09:50:18	 *	srhb shrugs -- works for me
2013-03-21 09:50:22	srhb	I do have a fast computer though
2013-03-21 09:50:28	srhb	I can imagine it would be painful on something slower
2013-03-21 09:50:54	tuv	http://hackage.haskell.org/package/virthualenv
2013-03-21 09:51:03	srhb	tuv: I think that's the deprecated one
2013-03-21 09:51:14	srhb	tuv: I think you want hsenv
2013-03-21 09:51:24	mikeplus64	i have a fairly fast computer (phenom ii x4 955 or whatever, who knows what order that's supposed to be in) but haskell compiles are still quite slow, especially if you e.g. have dynamic enabled, and profiling
2013-03-21 09:51:46	srhb	Ah, another argument against dynamic ( O:-) )
2013-03-21 09:52:03	mikeplus64	my hdd thanks me later :)
2013-03-21 09:52:07	dgriffi	well, I think I have pandoc-types okay
2013-03-21 09:52:22	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-03-21 09:52:22	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-21 09:52:30	srhb	dgriffi: Cool. Then for the LaTeX-writer
2013-03-21 09:52:34	srhb	Or what was it...
2013-03-21 09:52:39	supki	srhb: distro packages are usable if distro is gentoo, where maintainers bump versions all day
2013-03-21 09:52:46	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-21 09:52:46	supki	probably also works for arch
2013-03-21 09:52:49	srhb	Er, HTML writer
2013-03-21 09:52:49	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-21 09:52:51	mikeplus64	supki: yep
2013-03-21 09:52:53	dgriffi	srhb: yeah.. now to see if I can get some results with the latex writer
2013-03-21 09:53:19	supki	debian unstable, on the other hand, still has ghc-7.4.1 => doesn't work
2013-03-21 09:53:29	dgriffi	here a fork, there a fork, everywhere a fork fork
2013-03-21 09:54:03	tlaine	EE-I-EE-I-O.
2013-03-21 09:54:13	srhb	dgriffi: For what it's worth, I have a compiling version with the changes I proposed to you. Whether it actually works is another case. :-)
2013-03-21 09:54:15	<--	atinon (~androirc@c193254.sait.samsung.co.kr) has quit (Ping timeout: 256 seconds)
2013-03-21 09:54:19	srhb	dgriffi: I don't know pandoc.
2013-03-21 09:54:37	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 09:54:45	srhb	The power of types. I have no idea what I'm doing, but the types have to match up. :P
2013-03-21 09:54:54	mikeplus64	supki: i think ideally haskell should get its own nix-like (or emerge-like) package manager, when conflicts occur, it shouldn't really matter, so long as you don't try to use the conflicting packages together
2013-03-21 09:54:54	dgriffi	srhb: I'd like to see it
2013-03-21 09:55:15	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 09:55:19	srhb	dgriffi: I think I did exactly what I suggested you do. I added NewPage, newPage and blockToHtml _ NewPage = return "I don't know what goes here!"
2013-03-21 09:55:19	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-21 09:55:21	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Read error: Connection reset by peer)
2013-03-21 09:55:48	srhb	In definition, builder and the html writer respectively.
2013-03-21 09:56:05	dgriffi	in pandoc-types, I found that I had to modify two files... Builder.hs and Definition.hs
2013-03-21 09:56:13	srhb	Yes.
2013-03-21 09:56:13	dgriffi	at least it looked like I should
2013-03-21 09:56:17	<--	madjestic (~madjestic@178.230.54.14) has quit (Ping timeout: 252 seconds)
2013-03-21 09:56:20	srhb	That's what I did.
2013-03-21 09:56:43	srhb	I don't know how to test it though
2013-03-21 09:56:44	tuv	debian is frozen in preparation for releasing wheezy. everything is getting old. after the release, unstable and testing will be much more recent
2013-03-21 09:56:44	dgriffi	I did cabal-dev install and that seemed to go fine.  so I did "cabal install"
2013-03-21 09:56:51	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-03-21 09:56:54	srhb	dgriffi: Good.
2013-03-21 09:57:14	--	irc: disconnected from server
2013-03-21 11:51:19	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-21 11:51:19	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-21 11:51:19	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-21 11:51:19	--	Nicks #haskell: [@ChanServ [[zzz]] [mth] [swift] \rs ]OLI[ __main__ _br_ _flow_ _janne `0660 `bps `micro `nand` `ramses a11235 aajmakin ab9rf absence abumirqaan acfoltzer acharles Adeon adimit Adios adnap adnauseam adzeitor aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator_ alejandrogomez alexander__b Alice3 alios alkabetz alnix_ alpounet alshain Amadiro amatsu amiller anachron_ anders^^ andrewsw aninhume1 anona AntiSpamMeta apaku appamatto araujo arbn ARCADIVS arenz Argue aristid arkeet arkx armlesshobo arnihr__ arun asante asQuirreL aszlig Athas AtnNn AtomicStryker augur augustl Axman6 az b52 b_jonas BadKitty banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ beckerb Belgarion0 ben_d bens benzap bergey betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blooberr bmfx bobry bogner Boney Boreeas bos Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc byorgey ByronJohnson c_wraith cads Cale caleb_9 caligula Canar canta canvon ccasin ccxCZ cdidd cdntr ceii celery__ centrinia certainty chance charlesofarrell charliesome chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisdotcode_ chrisirc chrra ciaranm CindyLinz circle cjay cl_away ClaudiusMaximus Clint clog cmccann_ cmears cmsd2 cods colah comak comatose companion_cube confound connelly coppro copumpkin CosmicRay CoverSlide cow-orke1 crdueck cross crs_ Cryovat ctype_real cwvh cynick cyphase d-snp dabradley dannybtran danr danvet dario Dashkal davean davorak dawe dcoutts dcoutts_ deavidsedice Deewiant def-lkb dennda dented42 Derander descender DexterLB dfletcher dgriffi Diaoer DigitalKiwi dilinger DinMamma dinox dixie djahandarie djanatyn dju dkasak dlundy_ dmarker dmwit dncr docksider Dodek dogmaT dolio domingo doomlord dottedmag dqd Draconx Draggor drbean dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT`` duairc__ dumbhat DustyDin1o Dybber dyreshark EarlGray EarlGray^ earthy ecuderpam edenc edon edsko edtsech edwardk edwtjo Eelis ehamberg Eiam eikke einsof eL_Bart0 electrogeek elgot Eliel_ elliott elliottcable emma endojelly Enigmagic ent epta ericmj Eridius erkin ernst Erstarrung Estrellas etabot ethercrow etrepum eviltwin_ Excureo eyck ezyang_ f8_ fabjan faen faheem FalkoPeters fall_ fayden fcr fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin flebron floatingman flux folone formalcow fotc freiksenet frio frontendloader froztbyte fryguybob ft Fubar^ Fuco fumieval Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gentleben gereedy gg7 ghorn Ghoul_ gienah Gilly Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest10329 Guest22595 Guest64340 Guest65991 Guest91870 Gunni Gurragchaa_ guy_ guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hamishmack hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk heruur hiratara hiredman hiroakip hiroyuki2 hive-mind hkBst horlicks hpaste hpc hpd hungryblank hvr hyko iago ibid IbnFirnas IceDanelol Iceland_jack idnar idntfy idntfy[work] ido idoru Igloo ijp imeredith inr int-e integral Internet13 ion ique isenmann isomorphic issimus1 Itkovian iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt janbanan JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55_ jbauman jcp jdnavarro jdoliner Jeanne-Kamikaze jedai Jello_Raptor jercos jerojasro Jesin jesyspa jix jlamothe jlewis jliikka jlouis_ jmcarthur jml joachifm joar jodaro joe9 JoeHazzers joeyh JohnBat26 johnny934759 johnw joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmae julmuri junsuijin jyyou k0001 k0ral Kaidelong KaiSforza kakos kallisti kalven KaneTW kaol Kazimuth Ke kennyd kennyp_ kerrick Khisanth killy9999 kini Kinnison KitB__ kith kkris kloeri klugez kmels kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ krocos kryft kshannon ktosiek Kuba kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latermuse latro`a lattenwald lazard LeaChim lennart_ lenstr leoncamel leprauchan leroux levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lucca luite Luke lulf lusory m3ga Maarten__ machisuji magicman majoh maksbotan_ malorie maltin mami mannyv marienz Martty MasseR mastensg MasterPu1cher Mathnerd314 mattp_ matzo mauke Maxdamantus mceier mcguitan83 McManiaC mechainai mechairoi mefisto Megant memand mendez merijn message144 meyersh_ mgq mgsloan miasma mietek mike2 mikeplus64 mikurubeam milessabin milli mimi_vx mimico__ mirsal mixi mjr84 MK_FG mlh mlinksva mm_freak mmaruseacph2 MnO2 MoALTz mokus_ mollerstrand monique_ monochrom moonlite_ morazow mornfall mortberg Mortchek mpu mrd mrdomino_ MrFenix MrGwen mrkotfw MrMeh MroiZo mrshoe MrWoohoo mspells mtahmed mullein munro museun mux myme n-dolio n_b Nanar nardul Natch natte ndngvr netj neurocyte newsham nexx Nickeeh nicoo Nik_89 niko nikola nilg Nimatek nimred ninegrid ninzine Nisstyre Nisstyre-laptop niteria nithp nlogax no-n noam noj nonymousa noplamodo notdan NougatRillettes Nshag numeral nus- nwf obcode ocharles odi ofan Okasu opqdonut ormaaj Ornedan ortmage osfameron osxorgate otend othiym23 otterdam otters otto_s_ ousado owst ozataman ozgura PaksAway Pantoufle ParahSail1n ParahSailin parcs PartyKat2e pcapriotti pdxleif_away peddie peltchu pepijn_away perlite perspectival petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul Philonous_ PHO_ pikhq_ Plex- plhk plutoniix pnielsen Pods popz pqmodn_ pr predator117 preflex prh pricklypear PrO_OkI profmakx ps-auxw Ptival ptrf purefn puzza007 pyrtsa pyykkis QinGW QinGW2 quaestor quchen quicksilver quuxman qwandor|quassel qwr qz qzr r126l_ raek_ RageOfThou raichoo raid rainmaker Ralith RayNbow`TU Raynes Razz rcj_ rcl realnot redjohn reembarking08 reiddraper Rembane RenJuan rexamophone rfw rio Riussi_ rmarianski rmunoz rmunroe robbe- robbert` rossabaker ryanakca s00pcan s4msung_ s_quark SaBer saep Sagi saiam Saizan sanemat sarfraz saurik sbahra scgilardi schlicht_ schlumpi schovi schroedinbug sclv_ Scott_firebeta seafood SeanTAllen seats SegFaultAX setmeaway Sgeo sgronblo sh shachaf shanse shepheb shergill shintah SHODAN shutdown_-h_now si14 silver simon__ simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash SLi sm smarter__ snoyberg so Soft sohum solarus solirc Sonderblade sopvop sordina2 soulofpeace SoupE spion Spockz sproingie Squid_Tamer squidz srcerer srhb sShintah Starfire startling statusfailed steez stelleg_away stepcut stephe stepkut strax_ suiside sully sunfun sunnavy supersym supki sw17ch Swizec sysop_fb tahu takumn tamiko tanakh_ tanakh__ Tarential taruti tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction tessier tew88 tg tgeeky Th0mas tharper The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur thorsten` thoughtpolice threeday1onk threesome tim timemage tippenein tkd tlaine tlevine tmiw TML tobiassj1sten tom339 tomaw tomboy64 tomejaguar tomh_ tomku tommd tomprince ToRA Tordek trevize tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey twomashi typoclass Ulrar Urchin usr1324 UziMonkey Valodim Varakh vehk verrens Vertue vhz vili vmeson vobi Volstvok Vorpal voyd_ Vq VZakharov wagle Walther warpy__ Watcher7|off waterlaz wchun wei2912 weie_ wereHamster WhereIsMySpoon whoops wilfredh Will| wires wjlroe wollw wormphlegm wting wto wtw wump wunki x7 xaimus xalei Xaratas xcvii xinming XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai XyMa xymox yacks yam yan_ yano YellowOnion yeltzooo yiannis_t yitz yriw ysulsky_ yumike Yuu-chan Zariel zebr Zedrikov zeiris zenzike zero7 zhulikas ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp]
2013-03-21 11:51:19	--	Channel #haskell: 999 nicks (1 op, 0 halfops, 0 voices, 998 normals)
2013-03-21 11:51:19	--	URL for #haskell: http://www.haskell.org/
2013-03-21 11:51:21	--	Mode #haskell [+CLcnpt]
2013-03-21 11:51:21	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-21 11:51:21	-->	robstewartuk (5bf0ae22@gateway/web/freenode/ip.91.240.174.34) has joined #haskell
2013-03-21 11:51:53	-->	Aune (~arne@volac.lysator.liu.se) has joined #haskell
2013-03-21 11:53:25	-->	OlegYch9 (~OlegYch@212.98.177.58) has joined #haskell
2013-03-21 11:55:56	--	pepijn_away is now known as pepijndevos
2013-03-21 11:56:02	-->	bitonic (~user@b01bf0a7.bb.sky.com) has joined #haskell
2013-03-21 11:56:41	[swift]	sigh
2013-03-21 11:56:43	-->	LucasCampos (~lucas@186.212.231.52) has joined #haskell
2013-03-21 11:56:57	[swift]	something involving laziness is seriously wrong with my program =\
2013-03-21 11:57:41	[swift]	whether or not it crashes is determined by whether i have a putStrLn printing out the certain values
2013-03-21 11:57:49	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-03-21 11:58:09	<--	Yuu-chan (~yuu@2.mfisoft.ru) has left #haskell
2013-03-21 11:58:11	[swift]	puzzlingly, though, judicious application of $! and force don't seem to solve the problem
2013-03-21 11:58:56	srhb	[swift]: Perhaps you should paste your program.
2013-03-21 11:59:50	srhb	"The presence of a prefix is indicated with a single leading ASCII colon character (':', 0x3b)"
2013-03-21 11:59:51	srhb	yet...
2013-03-21 11:59:56	srhb	> ord ':'
2013-03-21 11:59:58	lambdabot	  58
2013-03-21 12:00:11	srhb	> 0x3b == 58
2013-03-21 12:00:13	lambdabot	  False
2013-03-21 12:00:15	srhb	> 0x3a == 58
2013-03-21 12:00:17	<--	tanakh__ (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 240 seconds)
2013-03-21 12:00:17	lambdabot	  True
2013-03-21 12:00:20	srhb	What the hell?
2013-03-21 12:00:32	[swift]	srhb: it's a bit large for that but the relevant function is defsAnalysis here: https://github.com/sfowler/pygmalion/blob/go-to-definition/src/Pygmalion/Analyze/Source.hs
2013-03-21 12:01:00	<--	krocos (~krocos@95.167.75.238) has quit
2013-03-21 12:01:13	[swift]	crashes without the putStrLn
2013-03-21 12:01:19	<--	osxorgate (~osxorgate@94.142.213.250) has quit (Remote host closed the connection)
2013-03-21 12:01:27	srhb	without?
2013-03-21 12:01:34	[swift]	srhb: right
2013-03-21 12:01:43	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 12:01:47	<--	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-21 12:01:49	srhb	presumably normalise then?
2013-03-21 12:02:03	srhb	Or maybe not.
2013-03-21 12:02:13	-->	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has joined #haskell
2013-03-21 12:02:27	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-21 12:02:29	<--	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-21 12:02:48	[swift]	indeed, i've modified the lib clang bindings and i can see that it never actually performs "show $ XRef.getUSR cursor" and similar unless the putStrLn is there
2013-03-21 12:02:55	-->	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has joined #haskell
2013-03-21 12:03:05	[swift]	the C marshaling code never gets called
2013-03-21 12:03:25	<--	hiratara (~hiratara@j082045.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 256 seconds)
2013-03-21 12:03:29	[swift]	i really don't get it. i've tried a lot of things...
2013-03-21 12:03:56	niteria	what would you use to parse large log files (that don't fit into memory)?
2013-03-21 12:04:54	Xaratas	random access reader, o, wrong language
2013-03-21 12:05:07	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-03-21 12:05:43	srhb	[swift]: Sorry, a bit above my level. Perhaps someone else can help.
2013-03-21 12:05:49	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-21 12:05:59	[swift]	srhb: no worries, it's a bit above my level too =)
2013-03-21 12:06:25	srhb	[swift]: Perhaps you would get more info by narrowing down the print to exactly what thing causes it
2013-03-21 12:06:47	-->	philipde` (~user@cpe-67-246-132-238.stny.res.rr.com) has joined #haskell
2013-03-21 12:06:48	srhb	[swift]: Like try just name, kind, file, ln, col by each by themselves.
2013-03-21 12:06:51	-->	jao (~jao@67.51.76.53) has joined #haskell
2013-03-21 12:06:53	[swift]	srhb: so printing _any_ one thing is enough
2013-03-21 12:07:00	srhb	any one thing. OK
2013-03-21 12:07:07	[swift]	srhb: but just "putStrLn "blah"" doesn't work
2013-03-21 12:07:07	<--	jao (~jao@67.51.76.53) has quit (Changing host)
2013-03-21 12:07:07	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-21 12:08:22	srhb	Hmm. Are you pretending these values are pure when they really aren't?
2013-03-21 12:08:32	-->	hiratara (~hiratara@j080008.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-21 12:08:34	[swift]	srhb: the lib clang bindings are
2013-03-21 12:08:35	<--	Guest64340 (~afarmer@host-250-25.pubnet.pdx.edu) has quit (Ping timeout: 255 seconds)
2013-03-21 12:08:44	[swift]	it uses unsafePerformIO under the hood
2013-03-21 12:09:27	srhb	Meh, I don't know...
2013-03-21 12:10:21	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 12:11:39	-->	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has joined #haskell
2013-03-21 12:12:13	[swift]	it is a good point that unsafePerformIO is involved, though. maybe i will try modifying things to avoid that layer of the bindings..
2013-03-21 12:13:25	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-21 12:13:36	<--	OlegYch9 (~OlegYch@212.98.177.58) has quit (Ping timeout: 276 seconds)
2013-03-21 12:13:55	<--	LucasCampos (~lucas@186.212.231.52) has quit (Quit: Leaving.)
2013-03-21 12:14:02	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-21 12:14:16	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-03-21 12:14:51	<--	iago (~iago@gwlmf.di.uminho.pt) has quit (Read error: Connection timed out)
2013-03-21 12:14:51	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 258 seconds)
2013-03-21 12:14:57	<--	bbee (~bbee@unaffiliated/bbee) has quit (Read error: Connection timed out)
2013-03-21 12:15:35	hpaste	circle pasted “why” at http://hpaste.org/84422
2013-03-21 12:15:41	-->	iago (~iago@gwlmf.di.uminho.pt) has joined #haskell
2013-03-21 12:15:44	circle	why does the above ^ not work?
2013-03-21 12:15:45	<--	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has quit (Quit: MrGwen)
2013-03-21 12:16:05	srhb	It does.
2013-03-21 12:16:46	circle	\prac2.hs:3:6: parse error on input `|'
2013-03-21 12:16:46	circle	Failed, modules loaded: none.
2013-03-21 12:17:04	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-03-21 12:17:31	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 260 seconds)
2013-03-21 12:17:33	circle	srhb: ?
2013-03-21 12:17:34	srhb	Oh sorry
2013-03-21 12:17:36	srhb	That first = is a mistake
2013-03-21 12:17:42	srhb	grade g | ...
2013-03-21 12:17:46	Xaratas	ja
2013-03-21 12:18:01	circle	oh ok
2013-03-21 12:18:11	Xaratas	no = after the function name if you use guards
2013-03-21 12:18:14	-->	Counter-Strike (~abc@mailsh7.xs4all.nl) has joined #haskell
2013-03-21 12:18:28	srhb	circle: Read it as grade g for which it is true that...
2013-03-21 12:18:53	circle	hmm, k
2013-03-21 12:19:26	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 12:20:45	<--	soulofpeace (~soulofpea@119.75.11.250) has quit (Ping timeout: 276 seconds)
2013-03-21 12:21:25	`nand`	circle: you have a superfluous = in line 2
2013-03-21 12:21:27	`nand`	it's omitted in that syntax
2013-03-21 12:22:09	srhb	s/superfluous/wrong :-)
2013-03-21 12:23:50	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 256 seconds)
2013-03-21 12:24:12	<--	Diaoer (~Diaoer@116.239.4.194) has quit (Quit: Leaving)
2013-03-21 12:24:15	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-21 12:24:31	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-21 12:26:43	<--	robstewartuk (5bf0ae22@gateway/web/freenode/ip.91.240.174.34) has quit (Ping timeout: 245 seconds)
2013-03-21 12:27:43	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-21 12:28:18	<--	QinGW (~user@219.143.69.22) has quit (Remote host closed the connection)
2013-03-21 12:28:19	<--	janbanan (~naj@niklas.vth.sgsnet.se) has quit (Read error: No route to host)
2013-03-21 12:28:39	-->	HugoDaniel (~hugo@elab.fcsh.unl.pt) has joined #haskell
2013-03-21 12:29:58	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-21 12:31:09	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 276 seconds)
2013-03-21 12:31:31	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 12:31:33	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-21 12:32:12	-->	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has joined #haskell
2013-03-21 12:32:40	-->	bbee (~bbee@unaffiliated/bbee) has joined #haskell
2013-03-21 12:33:50	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-03-21 12:34:19	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-03-21 12:35:00	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-21 12:35:34	<--	plutoniix (~plutoniix@ppp-61-90-50-58.revip.asianet.co.th) has quit (Quit: จรลี จรลา)
2013-03-21 12:35:44	-->	sonda (~sonda@adsl-ull-64-181.50-151.net24.it) has joined #haskell
2013-03-21 12:36:21	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 276 seconds)
2013-03-21 12:37:28	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-03-21 12:38:30	<--	XyMa (~user@59.108.40.196) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 12:39:07	-->	papermachine (~paper@128.211.178.8) has joined #haskell
2013-03-21 12:39:11	<--	papermachine (~paper@128.211.178.8) has quit (Read error: Connection reset by peer)
2013-03-21 12:39:21	<--	faen (frantk@fran.tk) has quit (Remote host closed the connection)
2013-03-21 12:39:22	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-21 12:40:09	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 12:41:21	hpaste	quchen pasted “Creating a TH Lift instance” at http://hpaste.org/84423
2013-03-21 12:41:35	quchen	Hello, Quchen's daily TH problem is here!
2013-03-21 12:41:55	srhb	quchen: :D
2013-03-21 12:41:58	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-21 12:42:07	quchen	I'm trying to find the easiest way of defining a Lift instance this time.
2013-03-21 12:42:28	-->	faen (frantk@fran.tk) has joined #haskell
2013-03-21 12:42:32	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-21 12:44:34	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-21 12:47:50	quchen	Maybe this is something for SO
2013-03-21 12:48:02	quchen	Adding a line for each constructor seems unnecessary
2013-03-21 12:48:18	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-03-21 12:48:48	<--	sopvop (~lonokhov@213.170.88.44) has quit (Read error: Connection reset by peer)
2013-03-21 12:48:58	srhb	Yeah if the TH gurus aren't here I bet SO can figure it out.
2013-03-21 12:51:37	-->	tanakh (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-21 12:52:01	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-21 12:52:20	ski	  lift (Even x) = [| Even $(return (lift x)) |]  -- perhaps ?
2013-03-21 12:55:19	<--	k0001 (~k0001@host119.181-1-201.telecom.net.ar) has quit (Ping timeout: 260 seconds)
2013-03-21 12:55:31	elliott	ski: re: your pattern ideas: have you considered: Just (fromJust x) = x?
2013-03-21 12:56:04	-->	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has joined #haskell
2013-03-21 12:56:31	-->	refold (~gman@h-54-251.a258.priv.bahnhof.se) has joined #haskell
2013-03-21 12:56:55	-->	j303 (~x@ns2306746.ovh.net) has joined #haskell
2013-03-21 12:57:51	ski	elliott : hm, not this particular form, no
2013-03-21 12:58:50	-->	eikke (~nicolas@85.255.197.126) has joined #haskell
2013-03-21 12:59:28	ski	afaics, this would necessitate a partial match
2013-03-21 12:59:31	quchen	ski: What you're doing just makes the whole thing longer
2013-03-21 12:59:40	quchen	I'm trying to get rid of mentioning "Even"
2013-03-21 12:59:41	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-21 12:59:54	ski	quchen : i thought it madee the whole thing return a different result
2013-03-21 12:59:59	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Ping timeout: 245 seconds)
2013-03-21 13:00:22	ski	quchen : it appears that you maybe wanted CSP ?
2013-03-21 13:00:25	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 13:00:26	elliott	ski: right. which is the desired behaviour for fromJust
2013-03-21 13:00:37	elliott	Identity (runIdentity x) = x -- is fine too
2013-03-21 13:00:45	ski	elliott : yes, so long as you're fine with that, i think it's ok
2013-03-21 13:01:04	elliott	I think you can generalise this to ever-weirder stuff, like (fst p, snd p) = p (to define fst and snd), \x -> f $ x = f (to define ($)), ...
2013-03-21 13:01:29	ski	(btw, was this re me having talked about "message-dispatching" for record syntax, or about other pattern-syntax extensions ?)
2013-03-21 13:01:43	quchen	ski: Have you seen my paste? http://hpaste.org/84423
2013-03-21 13:02:05	ski	yes, i've considered `(fst p, snd p)' long since
2013-03-21 13:02:19	ski	(cf. `f (x_0,x_1,...) = ..x..')
2013-03-21 13:02:33	<--	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-21 13:02:46	ski	quchen : yes -- but i was doubting that the instance you gave had the intended behaviour
2013-03-21 13:02:50	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Read error: Operation timed out)
2013-03-21 13:02:55	-->	Paprikachu (~Paprikach@77.117.247.132.wireless.dyn.drei.com) has joined #haskell
2013-03-21 13:03:04	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-21 13:03:04	elliott	ski: this was actually just me thinking about your lambda pattern stuff and such
2013-03-21 13:03:14	elliott	what is the record syntax thing? sounds interesting
2013-03-21 13:03:38	ski	quchen : .. which was why i was wondering whether you were perhaps subconsciously wanting CSP ..
2013-03-21 13:03:46	quchen	CSP?
2013-03-21 13:03:49	ski	elliott : hm, which lambda pattern stuff was that ?
2013-03-21 13:03:51	ski	Cross-Stage Persistence
2013-03-21 13:04:02	quchen	Oh. Well that sounds like I'm not quite there yet
2013-03-21 13:04:17	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 13:04:47	ski	quchen : the ability to mention a variable (*any* one) from one stage inside a quotation constructing code for the next stage, so that it generates code that when evalauted will just yield the original value
2013-03-21 13:04:51	elliott	ski: (\exp -> pat) patterns
2013-03-21 13:05:11	<--	Paprikachu (~Paprikach@77.117.247.132.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-21 13:05:13	ski	quchen : e.g. what should happen when `x :: IORef Int', in `[| x |]' ?
2013-03-21 13:05:19	elliott	IIRC, { f (\x -> p) = e } = { f g = case g x of p -> e }
2013-03-21 13:05:34	elliott	or, well, { f g | p <- g x = e } I guess
2013-03-21 13:05:52	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-21 13:06:15	ski	elliott : ok (i have been thinking about various pattern-syntax things, so i wasn't sure which one you had seen)
2013-03-21 13:06:24	ski	elliott : the record stuff is basically :
2013-03-21 13:06:35	ski	  data Stream a = Head a & Tail (Stream a)
2013-03-21 13:06:39	ski	  repeat :: a -> Stream a
2013-03-21 13:06:42	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-21 13:06:47	ski	  Head (repeat a) = a
2013-03-21 13:06:54	ski	  Tail (repeat a) = repeat a
2013-03-21 13:07:21	ski	  from :: Enum a => a -> Stream a
2013-03-21 13:07:27	ski	  Head (from n) = n
2013-03-21 13:07:34	ski	  Tail (from n) = from (succ n)
2013-03-21 13:07:36	ski	&c.
2013-03-21 13:07:42	elliott	ski: ah, like agda's copatterns?
2013-03-21 13:08:02	ski	more or less, yes (though i have to look in more detail about how those works)
2013-03-21 13:08:12	ski	i got the idea for this from
2013-03-21 13:08:15	ski	@where ErikPoll
2013-03-21 13:08:16	lambdabot	"Subtyping and Inheritance for Inductive Types" in 1997 at <http://www.cs.ru.nl/E.Poll/papers/durham97.pdf>,"Subtyping and Inheritance for Categorical Datatypes" in 1997 at <http://www.cs.ru.nl/E.
2013-03-21 13:08:16	lambdabot	Poll/papers/kyoto97.pdf>,"A Coalgebraic Semantics of Subtyping" in 2000 at <http://www.cs.ru.nl/E.Poll/papers/cmcs00.pdf>,later version of that in 2001 at <http://www.cs.ru.nl/E.Poll/papers/ita01.
2013-03-21 13:08:16	lambdabot	pdf>
2013-03-21 13:08:25	 *	elliott thinks "Cons" naming for this is confusing, since they're destructors
2013-03-21 13:08:27	<--	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has quit (Quit: leaving)
2013-03-21 13:08:29	elliott	maybe heaD, taiL :)
2013-03-21 13:08:31	<--	tim (~tim@159.182.183.6) has quit (Disconnected by services)
2013-03-21 13:08:39	elliott	hEAD, tAIL
2013-03-21 13:08:46	-->	Paprikachu (~Paprikach@77.117.246.56.wireless.dyn.drei.com) has joined #haskell
2013-03-21 13:08:47	-->	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has joined #haskell
2013-03-21 13:08:56	-->	tim (~tim@159.182.183.6) has joined #haskell
2013-03-21 13:09:02	ski	(and i was tentatively calling this "message-dispatching" syntax, because this is more or less what defining an object in terms of how it responds to messages is)
2013-03-21 13:09:16	ski	elliott : yes, i'm not married to the concrete syntax bit
2013-03-21 13:09:57	-->	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has joined #haskell
2013-03-21 13:10:08	ski	(also, did i say i don't like the `data Foo = MkF {blah :: Blah}' vs. `blah :: Foo -> Blah' schizophrenia ?)
2013-03-21 13:10:41	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 13:11:03	<--	tanakh (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Quit: Leaving...)
2013-03-21 13:12:01	ski	(in SML, it would be `#head' and `#tail')
2013-03-21 13:12:07	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-21 13:12:26	 *	elliott mumbles something about lens.
2013-03-21 13:13:25	-->	nogs (~dnogs@187-072-184-065.static.ctbctelecom.com.br) has joined #haskell
2013-03-21 13:13:44	 *	ski would prefer both abstract, lens-like, fields, *and* non-braindead concrete records
2013-03-21 13:14:37	ski	quchen : anyway, how would what you want work for other datatypes than `EvenOdd' ? e.g. abstract ones ..
2013-03-21 13:14:45	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-21 13:15:20	 *	elliott thinks you can define a record system from scratch with sufficiently complex lens types
2013-03-21 13:15:23	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 260 seconds)
2013-03-21 13:15:29	elliott	supporting things like full type-changing, safe construction, etc.
2013-03-21 13:15:55	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-21 13:16:00	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-21 13:16:02	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 13:16:02	ski	(quchen : btw, if it was unclear, i think your "This doesn't work of course, as [|x|] is simply a VarE." applies equally well to the former instance)
2013-03-21 13:16:03	-->	adlan (~adlan@115.134.180.140) has joined #haskell
2013-03-21 13:16:39	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Ping timeout: 276 seconds)
2013-03-21 13:17:00	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Ping timeout: 264 seconds)
2013-03-21 13:17:35	-->	schovi_ (~schovi@194.213.198.34) has joined #haskell
2013-03-21 13:17:35	<--	schovi (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-21 13:17:35	--	pepijndevos is now known as pepijn_away
2013-03-21 13:18:06	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 258 seconds)
2013-03-21 13:18:26	--	pepijn_away is now known as pepijndevos
2013-03-21 13:19:26	-->	OlegYch (~OlegYch@86.57.158.170) has joined #haskell
2013-03-21 13:19:42	-->	myky (~myky@stargate.cnl.tuke.sk) has joined #haskell
2013-03-21 13:20:19	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-21 13:20:30	myky	hi guys i need help with my little program ...can somebody to check it and explain me what this program works?
2013-03-21 13:20:33	myky	http://pastebin.com/3iRd9gMK
2013-03-21 13:20:42	mauke	The paste 3iRd9gMK has been copied to http://hpaste.org/84424
2013-03-21 13:21:31	-->	amyers (~quassel@38.102.20.61) has joined #haskell
2013-03-21 13:21:39	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-03-21 13:21:42	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 256 seconds)
2013-03-21 13:22:16	<--	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-21 13:22:28	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 13:23:05	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 13:23:06	quchen	ski: Oh. Well, I haven't thought about it much in general.
2013-03-21 13:23:13	ski	instead of  48  please use  ord '0'
2013-03-21 13:23:15	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-21 13:23:16	quchen	I'm learning TH by trial and error basically :/
2013-03-21 13:23:21	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-21 13:23:29	<--	wires (~smuxi@ip152-92-173-82.adsl2.static.versatel.nl) has quit (Read error: No route to host)
2013-03-21 13:23:35	quchen	Luckily I do it for no reason, so I don't damage anything with it
2013-03-21 13:23:38	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 13:23:58	<--	sopvop (~lonokhov@213.170.88.44) has quit (Ping timeout: 256 seconds)
2013-03-21 13:24:04	ski	quchen : it doesn't work at all in general, without CSP -- and even then, it doesn't yield an analyzable expression, which is arguably what `lift' is supposed to yield
2013-03-21 13:24:30	quchen	So \x -> [| Just x |] is not in general a way of lifting something in a Maybe?
2013-03-21 13:24:40	ski	myky : also, you don't handle the empty case gracefully
2013-03-21 13:24:53	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Client Quit)
2013-03-21 13:25:24	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 245 seconds)
2013-03-21 13:25:30	ski	quchen : the `x' in the quotation will just be a variable name (or maybe a CSP reference), not a data structure representing code that will evaluate to `x'
2013-03-21 13:26:18	ski	.. unless TH does some kind of autolifting of free variables in quotations -- which i'm unaware of, though i don't know TH that well
2013-03-21 13:26:36	quchen	I thought [| |] uses Lift
2013-03-21 13:27:08	quchen	If I write [| Even 1 |], then the compiler complains there's no Lift instance for EvenOdd
2013-03-21 13:27:29	<--	Xaratas (~UserNick@brln-4dbc1f7e.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-21 13:27:32	-->	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-21 13:27:46	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:27:51	-->	tanakh (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-21 13:28:13	arkeet	quchen: what's wrong with what you wrote?
2013-03-21 13:28:26	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:29:11	myky	ski: how i fix empty handle?
2013-03-21 13:29:34	BadKitty	myky: empty handle?
2013-03-21 13:29:35	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:29:38	quchen	arkeet: I'm not sure. TH quickly becomes too advanced for me so I have trouble understanding explanations about it
2013-03-21 13:29:47	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 240 seconds)
2013-03-21 13:29:54	quchen	Apparently it's not always the right thing
2013-03-21 13:29:56	ski	myky : simplest is to not match on `x:xs'
2013-03-21 13:29:57	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:30:12	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-21 13:30:15	-->	Xaratas (~UserNick@brln-4dbc1f7e.pool.mediaWays.net) has joined #haskell
2013-03-21 13:30:21	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-21 13:30:22	 *	BadKitty wonders why people and ghc do `code' ?
2013-03-21 13:30:36	-->	madjestic (~madjestic@178.230.54.14) has joined #haskell
2013-03-21 13:30:42	BadKitty	` open ' close O.o
2013-03-21 13:30:49	quchen	BadKitty: To troll typographers
2013-03-21 13:31:05	ski	because TeX, i think
2013-03-21 13:31:07	BadKitty	quchen: It gets annoying :P
2013-03-21 13:31:24	BadKitty	ski: Okay. Blame TeX :)
2013-03-21 13:31:27	quchen	Yeah it used to make me shiver too, but you get used to it
2013-03-21 13:31:41	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-21 13:31:48	quchen	In TeX, `` isn't an opening quote. `` is what when you compile it produces an opening quote.
2013-03-21 13:31:48	BadKitty	quchen: Yea, used to it, but when you notice it's just ughh. (Better when you know why)
2013-03-21 13:31:51	BadKitty	:)
2013-03-21 13:32:00	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-21 13:32:01	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-21 13:32:03	-->	turiya (~turiya@14.139.65.8) has joined #haskell
2013-03-21 13:32:04	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 13:32:05	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-21 13:32:13	quchen	\emph isn't italics, it produces italics. Same argument.
2013-03-21 13:32:38	quchen	On the other hand, there are no quotation marks on a normal keyboard anyway, so I guess you have to abuse some other symbol
2013-03-21 13:32:47	 *	BadKitty wonders if there is any haskell tls for dummies example :)
2013-03-21 13:33:16	yitz	BadKitty: maybe it's because of m4 </troll>
2013-03-21 13:33:16	quchen	TLS = Tumor Lysis Syndrome?
2013-03-21 13:33:33	BadKitty	yitz: IRC /= HTML
2013-03-21 13:33:38	BadKitty	yitz: IRC /= \HTML
2013-03-21 13:33:46	BadKitty	(escaped HTML)
2013-03-21 13:34:00	quchen	BadKitty: troll isn't HTML anyway
2013-03-21 13:34:13	yitz	BadKitty: invalid HTML, with missing open tag
2013-03-21 13:34:14	BadKitty	quchen: </troll> is impl..
2013-03-21 13:34:17	BadKitty	s/HTML/XML/
2013-03-21 13:34:32	BadKitty	implying XML :)
2013-03-21 13:34:46	yitz	BadKitty: ok, SGML derivatives
2013-03-21 13:35:17	BadKitty	WHY IS THERE NO SIMPLE TLS EXAMPLE D:
2013-03-21 13:35:34	applicative	Times Literary Supplement?
2013-03-21 13:35:36	quchen	TLS = Trinity Law School?
2013-03-21 13:35:38	-->	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 13:35:45	BadKitty	@hoogle tls
2013-03-21 13:35:45	lambdabot	package tls
2013-03-21 13:35:45	lambdabot	package tls-extra
2013-03-21 13:35:45	lambdabot	package gnutls
2013-03-21 13:35:47	BadKitty	^
2013-03-21 13:35:55	yitz	BadKitty: what do you want to do with tls?
2013-03-21 13:36:20	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-21 13:36:29	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:36:47	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:37:00	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 256 seconds)
2013-03-21 13:37:11	BadKitty	yitz: In short/development purpose, use it to be lazy instead of making my own payload length send/recv functions. But in practice/desired used, to encrypt traffic encoded to binary form.
2013-03-21 13:37:31	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-03-21 13:38:45	-->	Icewing (~Icewing@koln-4d0b5595.pool.mediaWays.net) has joined #haskell
2013-03-21 13:38:45	<--	Icewing (~Icewing@koln-4d0b5595.pool.mediaWays.net) has quit (Changing host)
2013-03-21 13:38:45	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-03-21 13:38:52	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-21 13:39:17	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-21 13:39:29	yitz	BadKitty: usually tls is used by integrating into some other system, to wrap some specific network protocol. which one do you have in mind?
2013-03-21 13:40:12	 *	ski . o O ( Tow Lherzite Step )
2013-03-21 13:40:20	<--	jdnavarro (~danny@253.Red-88-22-34.staticIP.rima-tde.net) has quit (Ping timeout: 258 seconds)
2013-03-21 13:40:33	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 13:40:42	-->	stat_vi (~stat@dslb-094-218-234-010.pools.arcor-ip.net) has joined #haskell
2013-03-21 13:40:50	BadKitty	yitz: More or less in-development.. data TComm = TAction Action | TToken Token | IMayAdd MoreHere
2013-03-21 13:41:05	BadKitty	binary encode/decode.
2013-03-21 13:41:43	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-21 13:41:43	--	OyooG is now known as NiTo
2013-03-21 13:41:45	-->	pranavrc (~pranavrc@122.174.1.237) has joined #haskell
2013-03-21 13:41:45	<--	pranavrc (~pranavrc@122.174.1.237) has quit (Changing host)
2013-03-21 13:41:45	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-21 13:41:47	BadKitty	I may switch to cereal concidering that tls uses cereal it's self so dealing with just strict bytestrings instead of both strict and lazy seems more ideal.
2013-03-21 13:42:06	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-21 13:42:14	BadKitty	(For this case at least)
2013-03-21 13:42:41	<--	NiTo (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has left #haskell ("Leaving")
2013-03-21 13:43:00	turiya	hi
2013-03-21 13:43:27	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-21 13:43:30	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 13:44:11	turiya	i am compiling ghc-7.0.3 using ghc-6.10.4 but i get an error saying that hscolour could not be found. any way to fix it? i am installing ghc somewhere in my home directory as i dont have root access
2013-03-21 13:44:24	BadKitty	yitz: Any suggestions for where to start?
2013-03-21 13:44:41	 *	BadKitty client/server currently over a unix socket but I'll be moving to a port for production. :)
2013-03-21 13:44:51	BadKitty	tcp/port *
2013-03-21 13:45:10	quchen	turiya: You don't need to compile GHC yourself if it's a supported OS. You can just download and extract the binaries
2013-03-21 13:45:12	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-21 13:45:44	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:45:48	turiya	quchen: i think this os is too old (rhel 5.6) and does not have the correct glibc
2013-03-21 13:46:01	-->	nito (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 13:46:03	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:46:06	BadKitty	turiya: shell server?
2013-03-21 13:46:12	BadKitty	(Ask admin to upgrade)
2013-03-21 13:46:22	applicative	turiya , can you turn of the documentation making? or you need that?
2013-03-21 13:46:37	turiya	BadKitty: it is a cluster and the admin said he wont upgrade :)
2013-03-21 13:46:44	BadKitty	(Or use a better shell/vps >> http://linode.com for example, major upgrades recently(yesterday))
2013-03-21 13:46:47	BadKitty	:D
2013-03-21 13:46:50	applicative	turn off rather
2013-03-21 13:47:25	quchen	turiya: Install a VM ;-D
2013-03-21 13:47:45	<--	sopvop (~lonokhov@213.170.88.44) has quit (Read error: Connection reset by peer)
2013-03-21 13:47:55	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 260 seconds)
2013-03-21 13:47:57	turiya	applicative: i don't know if it is a documentation issue
2013-03-21 13:48:07	 *	BadKitty recommends arch on linode.com; ghc always up to date (well close to when not)
2013-03-21 13:48:07	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:48:10	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:48:38	applicative	turiya: oh, I thought thats all hscolour was used for?
2013-03-21 13:48:51	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:49:02	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:49:06	bitonic	turiya: you can just use the precompiled binaries available here anyway: <http://www.haskell.org/ghc/>.  and you should use the GHC shipped with the platform, if possible
2013-03-21 13:49:20	 *	BadKitty doesn't mean to advertise... Just a great service that an irc friend works for and happens to host the server I am ssh'd into to get on IRC. :) >> In fact, I'm trying to make something for her shell service as it's invite only.. :)
2013-03-21 13:49:42	turiya	there seems to be a --with-hscolour option in configure
2013-03-21 13:49:59	BadKitty	Tokenizer, generating and managing tokens for all users. At first the idea was for just registration but the tokens will be used for more tasks.
2013-03-21 13:50:19	turiya	bitonic: i think the precompiled versions dont work because of old glibc
2013-03-21 13:50:22	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:50:23	quchen	linode.com looks like they're hosting on a RasPi
2013-03-21 13:50:25	<--	nito (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has left #haskell ("Leaving")
2013-03-21 13:50:30	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 264 seconds)
2013-03-21 13:50:31	quchen	Except for the CPU count
2013-03-21 13:50:31	turiya	quchen: i will try vm
2013-03-21 13:50:35	bitonic	turiya: that can be a problem, yes
2013-03-21 13:50:40	quchen	Maybe it's a Raspi cluster :D
2013-03-21 13:50:44	BadKitty	quchen: hehe, problem with the ram?
2013-03-21 13:50:48	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 13:50:58	BadKitty	quchen: You generally shouldn't need much ram..
2013-03-21 13:51:10	 *	BadKitty 's desktop peek ram usage >> 700M
2013-03-21 13:51:37	quchen	I like having a lot of RAM so I can have memory leaks in GHCi without swapping.
2013-03-21 13:51:47	quchen	(I say that because I don't have a lot of RAM.)
2013-03-21 13:52:00	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 13:52:05	-->	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 13:52:14	<--	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has quit (Client Quit)
2013-03-21 13:52:27	BadKitty	And that's with firefox with some evil websites (ram, ram, ram, ram, cpu D:)
2013-03-21 13:52:38	BadKitty	Close firefox and I'm < 300M :)
2013-03-21 13:52:47	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-21 13:52:53	quchen	Yeah same here
2013-03-21 13:52:54	BadKitty	(Could go much lower if I desire, but no need)
2013-03-21 13:52:59	quchen	Plus my window decorator is leaky too
2013-03-21 13:53:05	-->	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 13:53:18	BadKitty	quchen: window decorator as in transparent terminals, shadows?
2013-03-21 13:53:30	-->	u_ (~phillip@adsl-75-57-178-143.dsl.emhril.sbcglobal.net) has joined #haskell
2013-03-21 13:53:33	quchen	Yes
2013-03-21 13:53:44	BadKitty	xorg/compositing window manages + NotMuchRam = ioError "Need moar ram"
2013-03-21 13:53:58	quchen	But I love mah Compiz
2013-03-21 13:54:05	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-21 13:54:05	BadKitty	compton here
2013-03-21 13:54:15	BadKitty	quchen: http://i.imgur.com/bOsg45K.jpg
2013-03-21 13:54:23	BadKitty	http://i.imgur.com/d3vYEeA.jpg
2013-03-21 13:54:28	<--	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has quit (Client Quit)
2013-03-21 13:54:36	-->	u__ (~phillip@75.57.178.143) has joined #haskell
2013-03-21 13:54:38	-->	k00mi (~koomi@dslb-188-099-045-172.pools.arcor-ip.net) has joined #haskell
2013-03-21 13:54:43	-->	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 13:54:46	myky	all thanks for help
2013-03-21 13:55:03	quchen	BadKitty: -> #haskell-blah
2013-03-21 13:55:05	BadKitty	quchen: first is more recent
2013-03-21 13:55:07	BadKitty	quchen: >>
2013-03-21 13:55:26	yitz	BadKitty: well snoyberg is using tls and tls-extra for current development of network-conduit-tls
2013-03-21 13:56:33	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 13:56:36	yitz	BadKitty: you can actually use network-conduit-tls, it might be a better approach than trying to control IO laziness yourself for a low-level network library
2013-03-21 13:57:00	tdammers	my window decorations are wasteful for xmonad standards
2013-03-21 13:57:03	BadKitty	yitz: I'm kinda after low-level to the type.
2013-03-21 13:57:05	tdammers	two whole pixels on each side
2013-03-21 13:57:23	yitz	BadKitty: but even if not, you'll certainly find practical use of the tls and tls-extra in the code for network-conduit-tls
2013-03-21 13:57:31	-->	snowylike2 (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-21 13:57:32	fizbin	:t (>.>)
2013-03-21 13:57:34	lambdabot	    Not in scope: `>.>'
2013-03-21 13:57:34	lambdabot	    Perhaps you meant one of these:
2013-03-21 13:57:34	lambdabot	      `>>' (imported from Control.Monad.Writer),
2013-03-21 13:57:44	fizbin	:t (>>)
2013-03-21 13:57:45	lambdabot	Monad m => m a -> m b -> m b
2013-03-21 13:57:48	<--	arkeet (arkeet@unaffiliated/nereid) has quit (Read error: Connection reset by peer)
2013-03-21 13:57:54	<--	u_ (~phillip@adsl-75-57-178-143.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-03-21 13:57:58	BadKitty	yitz: Indeed
2013-03-21 13:58:02	fizbin	:t (Control.Monad.Writer.>>)
2013-03-21 13:58:03	lambdabot	Monad m => m a -> m b -> m b
2013-03-21 13:58:21	-->	arkeet (arkeet@moriya.ca) has joined #haskell
2013-03-21 13:58:21	<--	arkeet (arkeet@moriya.ca) has quit (Changing host)
2013-03-21 13:58:21	-->	arkeet (arkeet@unaffiliated/nereid) has joined #haskell
2013-03-21 13:58:25	<--	eikke (~nicolas@85.255.197.126) has quit (Ping timeout: 260 seconds)
2013-03-21 13:58:41	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Ping timeout: 248 seconds)
2013-03-21 13:58:42	yitz	BadKitty: snoyberg's libraries tend to be focused on actually working in real life, so you might find out about tls gotchas by looking in there
2013-03-21 13:58:47	<--	QinGW2 (~yaaic@115.171.168.81) has quit (Ping timeout: 246 seconds)
2013-03-21 13:58:47	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-21 13:59:01	-->	eikke (~nicolas@85.255.197.126) has joined #haskell
2013-03-21 13:59:57	-->	wires (~smuxi@ip152-92-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-03-21 14:00:19	yitz	quchen: no, -> #xmonad ;)
2013-03-21 14:00:47	fizbin	Hey, why doesn't :t work in a /msg to lambdabot ?
2013-03-21 14:01:14	<--	mgq (~mgq@115-64-96-169.static.tpgi.com.au) has quit
2013-03-21 14:01:43	yitz	fizbin: yeah weird looks like the bot only wants @type now
2013-03-21 14:01:46	elliott	you have to say @type or ?type
2013-03-21 14:01:49	yitz	in pms
2013-03-21 14:01:50	elliott	nobody knows why. it's only for /msg
2013-03-21 14:01:53	-->	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has joined #haskell
2013-03-21 14:02:07	fizbin	Weird.
2013-03-21 14:02:21	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-21 14:02:37	elliott	"@ty" IIRC works as a shortcut.
2013-03-21 14:02:55	<--	charliesome (~textual@124-168-111-211.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-21 14:02:57	 *	Hermit usually reads that as "thank you"
2013-03-21 14:03:02	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 14:03:29	mikurubeam	Is there any way to check what modules have been imported in lambdabot?
2013-03-21 14:04:23	-->	lemao (~lemao@187.67.222.39) has joined #haskell
2013-03-21 14:04:32	-->	Thra11 (~thrall@87.114.98.137) has joined #haskell
2013-03-21 14:04:33	BadKitty	mikurubeam: see his source
2013-03-21 14:04:34	ski	@where L.hs
2013-03-21 14:04:34	lambdabot	What lambdabot has in scope is at <http://code.haskell.org/lambdabot/State/L.hs>
2013-03-21 14:04:35	BadKitty	!source
2013-03-21 14:04:36	ski	perhaps ?
2013-03-21 14:04:37	<--	myky (~myky@stargate.cnl.tuke.sk) has quit (Quit: leaving)
2013-03-21 14:04:44	ski	(BadKitty : s/his/her/)
2013-03-21 14:04:49	BadKitty	ski: heh
2013-03-21 14:04:53	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 252 seconds)
2013-03-21 14:04:57	<--	silver (~silver@178.120.241.244) has quit (Read error: Connection reset by peer)
2013-03-21 14:04:58	mikurubeam	BadKitty: ski: ty
2013-03-21 14:04:58	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-03-21 14:05:07	 *	BadKitty wonders how ski knows lambdabot is a she O.o
2013-03-21 14:05:07	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-21 14:05:10	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-21 14:05:23	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 14:05:25	BadKitty	mikurubeam: Don't thank me, ski's lambdabot foo is better than mine. :)
2013-03-21 14:05:43	<--	stat_vi (~stat@dslb-094-218-234-010.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-21 14:05:44	ski	BadKitty : <http://kejo.be/ELIS/haskell-blah_lambdabotContest.html>
2013-03-21 14:05:56	Chousuke	why is . defined as fmap?
2013-03-21 14:06:04	-->	BMeph (BMeph@ip68-7-223-219.sd.sd.cox.net) has joined #haskell
2013-03-21 14:06:22	ski	Chousuke : because Cale
2013-03-21 14:06:32	arkeet	cale :(
2013-03-21 14:06:38	ski	`fmap' is a valid generalization of `(.)'
2013-03-21 14:06:48	BadKitty	ski: O.o
2013-03-21 14:06:53	BadKitty	\bot makes more sense :)
2013-03-21 14:06:59	ski	  fmap :: Functor f => (a -> b) -> (f a -> f b)
2013-03-21 14:07:07	arkeet	except (.) gets used pretty often with :t and then it's confusing when it's fmap
2013-03-21 14:07:07	-->	beaky (~beaky@bba68378.alshamil.net.ae) has joined #haskell
2013-03-21 14:07:08	beaky	hello
2013-03-21 14:07:11	ski	set `f' to `(rho ->)', which is a functor, then you get
2013-03-21 14:07:15	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-03-21 14:07:21	arkeet	why rho>?
2013-03-21 14:07:24	beaky	why are haskell data types "algebraic"?
2013-03-21 14:07:28	ski	  fmap :: (a -> b) -> (rho -> a) -> (rho -> b)
2013-03-21 14:07:30	ab9rf	because rho is a sexy letter
2013-03-21 14:07:42	arkeet	beaky: because we have sums and products.
2013-03-21 14:07:45	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-21 14:07:50	ski	which fits the type (and behaviour) of `(.)'
2013-03-21 14:07:59	beaky	sums and products?
2013-03-21 14:08:08	ski	arkeet : it's a traditional letter for the environment parameter
2013-03-21 14:08:09	-->	silver (~silver@37.214.42.47) has joined #haskell
2013-03-21 14:08:12	ab9rf	beaky: yes, you can perform algebra on types
2013-03-21 14:08:19	arkeet	Either a b = Left a | Right b is a sum
2013-03-21 14:08:20	<--	ahkurtz (~ahkurtz@wzrdn.com) has quit (Ping timeout: 260 seconds)
2013-03-21 14:08:32	arkeet	(a,b) is a product
2013-03-21 14:08:36	ski	  Either a b  ~=  a + b
2013-03-21 14:08:42	ski	  (a,b)  ~=  a * b
2013-03-21 14:08:46	arkeet	() ~= 1
2013-03-21 14:08:50	arkeet	Void ~= 0
2013-03-21 14:08:50	arkeet	etc.
2013-03-21 14:08:51	ski	  [a]  ~=  1 + a * [a]
2013-03-21 14:08:59	arkeet	[a] = 1/(1 - a)
2013-03-21 14:09:04	arkeet	:p
2013-03-21 14:09:06	ski	(iow, .. what arkeet said)
2013-03-21 14:09:10	beaky	ah
2013-03-21 14:09:17	beaky	:t (~=)
2013-03-21 14:09:18	lambdabot	    Not in scope: `~='
2013-03-21 14:09:18	lambdabot	    Perhaps you meant one of these:
2013-03-21 14:09:18	lambdabot	      `/=' (imported from Data.Eq), `<=' (imported from Data.Ord),
2013-03-21 14:09:21	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-21 14:09:33	ski	`~=' meant to be read as "is isomorphic to"
2013-03-21 14:09:36	beaky	oh
2013-03-21 14:09:39	-->	ahkurtz (~ahkurtz@wzrdn.com) has joined #haskell
2013-03-21 14:09:40	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-21 14:09:50	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-21 14:09:52	arkeet	or "corresponds to"
2013-03-21 14:09:55	beaky	so a sum is liek set union?
2013-03-21 14:09:56	-->	sott_ (6d43d565@gateway/web/freenode/ip.109.67.213.101) has joined #haskell
2013-03-21 14:10:02	arkeet	disjoint union
2013-03-21 14:10:10	beaky	ah
2013-03-21 14:10:15	ski	(or we probably want "naturally isomorphic to, in the parameters" ? or perhaps something even more restrictive ?)
2013-03-21 14:10:18	arkeet	and product is cartesian product of course.
2013-03-21 14:10:33	turiya	at the linking stage i get "recompile with -fPIC" : how do i do that?
2013-03-21 14:10:34	arkeet	or the product in the sense of category theory.
2013-03-21 14:10:35	fizbin	What do I import to get the Functor definition of (.) ?
2013-03-21 14:10:38	arkeet	(and sum is coproduct)
2013-03-21 14:10:40	<--	jaroslaw (~a@tux3.usask.ca) has quit (Ping timeout: 260 seconds)
2013-03-21 14:10:41	beaky	are aleberaic data types related to the "abstract data types"?
2013-03-21 14:10:43	ski	set union (and set intersection) is only defined for *subsets*
2013-03-21 14:10:53	ski	beaky : not per se
2013-03-21 14:10:56	arkeet	fizbin: you don't; you define it yourself if you want.
2013-03-21 14:11:00	-->	jaroslaw (~a@tux3.usask.ca) has joined #haskell
2013-03-21 14:11:05	arkeet	beaky: yes, they both abbreviate as ADT
2013-03-21 14:11:09	beaky	heh
2013-03-21 14:11:12	arkeet	and that's it.
2013-03-21 14:11:13	turiya	any ideas
2013-03-21 14:11:20	ab9rf	hah
2013-03-21 14:11:20	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 14:11:34	fizbin	arkeet: I mean, when I ask ghci :t (.) it gives me (.) :: (b -> c) -> (a -> b) -> a -> c
2013-03-21 14:11:38	fizbin	But:
2013-03-21 14:11:40	fizbin	:t (.)
2013-03-21 14:11:41	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-03-21 14:11:47	<--	sopvop (~lonokhov@213.170.88.44) has quit (Read error: Connection reset by peer)
2013-03-21 14:11:48	arkeet	fizbin: yes, so you can redefine (.) if you want
2013-03-21 14:11:51	arkeet	hide the Prelude version and make your own.
2013-03-21 14:12:08	Hermit	fizbin: lambdabot has a few quirks like that, for it uses a custom prelude
2013-03-21 14:12:15	<--	VZakharov (~vovka@placenta.corbina.net) has quit (Quit: Leaving)
2013-03-21 14:12:20	fizbin	:info (.)
2013-03-21 14:12:33	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-21 14:12:35	arkeet	lambdabot is also not ghci.
2013-03-21 14:13:14	beaky	are all haskel adts purely-functional?
2013-03-21 14:13:26	arkeet	I don't understand the question.
2013-03-21 14:13:28	Hermit	so far the feature I like the most is @src
2013-03-21 14:13:31	ski	beaky : what do you mean by "adt" and "purely-functional" ?
2013-03-21 14:13:38	srhb	Hermit: Unfortunately it almost never works. :P
2013-03-21 14:13:39	arkeet	Hermit: @src is pretty dumb, it just looks things up in a fixed database
2013-03-21 14:13:42	arkeet	@where src
2013-03-21 14:13:43	lambdabot	The fixed database for the `src' lambdabot command is at <http://code.haskell.org/lambdabot/State/source>
2013-03-21 14:13:52	ab9rf	beaky: virtually everything in haskell is "purely functional", and the parts that aren't tend to be well-hidden or encapsulated
2013-03-21 14:13:53	beaky	like the data you declare with 'data Foo a = Bar a  | Baz a a
2013-03-21 14:14:02	srhb	But I'm totally working on a new lambdabot, so rejoice!
2013-03-21 14:14:13	arkeet	who isn't?
2013-03-21 14:14:14	yitz	beaky: they are immutable, if that's what you mean. the constructors are lazy functions by default, unless you override that with !
2013-03-21 14:14:15	srhb	:P
2013-03-21 14:14:23	srhb	arkeet: You're supposed to motivate me!
2013-03-21 14:14:28	ski	(beaky : note, "ADT" can expand to either of "Algebraic Data Type" or "Abstract Data Type" -- please disambiguate)
2013-03-21 14:14:29	fizbin	Ah, yes. @src (.) answered my question about lambdabot's (.) implementation.
2013-03-21 14:14:38	<--	MrGwen (~gwenael@hem62-1-82-238-50-252.fbx.proxad.net) has left #haskell
2013-03-21 14:14:40	beaky	algebraic data types :D
2013-03-21 14:14:47	fizbin	> (+2) . [4,5,6,7]
2013-03-21 14:14:49	yitz	srhb: what do mean, why is a pithy insult called "not working"?
2013-03-21 14:14:49	lambdabot	  [6,7,8,9]
2013-03-21 14:15:24	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 14:15:25	arkeet	Cale: can we fix (.) ?
2013-03-21 14:15:39	arkeet	even Category's . would be better.
2013-03-21 14:15:39	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 258 seconds)
2013-03-21 14:15:40	 *	ski liked when `flip' was fixed
2013-03-21 14:15:52	arkeet	but I'd like the prelude version.
2013-03-21 14:15:52	Pods	I am having issues installing ghc on my system . .can anyone help
2013-03-21 14:15:53	ski	(onlike now)
2013-03-21 14:15:54	 *	arkeet too
2013-03-21 14:16:04	ski	(s/on/un/)
2013-03-21 14:16:11	elliott	arkeet: there's also (++).
2013-03-21 14:16:15	arkeet	oh yeah.
2013-03-21 14:16:15	elliott	I think that's the remaining Caleskellism.
2013-03-21 14:16:18	ski	@type flip  -- see, unfixed :/
2013-03-21 14:16:19	arkeet	no, that was fixed.
2013-03-21 14:16:20	lambdabot	(a -> b -> c) -> b -> a -> c
2013-03-21 14:16:21	arkeet	:t (++)
2013-03-21 14:16:22	lambdabot	Monoid m => m -> m -> m
2013-03-21 14:16:25	arkeet	no never mind.
2013-03-21 14:16:28	arkeet	ok, Cale.
2013-03-21 14:16:29	arkeet	fix it.
2013-03-21 14:16:30	arkeet	:(
2013-03-21 14:16:36	arkeet	:t (<>) -- we don't need ++ with this
2013-03-21 14:16:38	lambdabot	Monoid m => m -> m -> m
2013-03-21 14:16:40	 *	Hermit votes in favor of (++) == mappend
2013-03-21 14:16:44	srhb	Pods: What's the problem?
2013-03-21 14:16:46	elliott	last I heard Cale doesn't want to budge on (.). which is a great shame because it means we have to studiously avoid lambdabot when teaching people about (.)
2013-03-21 14:16:46	 *	arkeet votes against
2013-03-21 14:16:50	elliott	which is near impossible.
2013-03-21 14:16:54	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-21 14:16:58	arkeet	that's exactly why I want Prelude..
2013-03-21 14:17:05	arkeet	we already have <$> if we want an infix fmap
2013-03-21 14:17:14	elliott	and I don't buy the lambdabot isn't for pedagogy argument, because that's it's most useful and ubiquitous purpose...
2013-03-21 14:17:16	-->	morazow (~morazow@gsd116.gsd.inesc-id.pt) has joined #haskell
2013-03-21 14:17:16	yitz	elliot: let (.) = (Prelude..) in ...
2013-03-21 14:17:24	arkeet	that's a lot of typing to do every time.
2013-03-21 14:17:29	arkeet	and a lot of noise to ignore.
2013-03-21 14:17:35	arkeet	or get confused by.
2013-03-21 14:17:41	yitz	i agree though, i never liked setting (.) = fmap in lambdabot
2013-03-21 14:18:05	elliott	yitz: sure, and then the newbie wonders why you do that, and says :t (.)...
2013-03-21 14:18:17	<--	Paprikachu (~Paprikach@77.117.246.56.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-21 14:18:35	osfameron	presumably someone could host their own fork of lambdabot with the appropriate definition of (.)...
2013-03-21 14:18:37	-->	PaulVisschers (~PaulVissc@77-172-85-26.ip.telfort.nl) has joined #haskell
2013-03-21 14:18:42	-->	perspectival (perspectiv@nat/redhat/x-gzuedxhzcbichsvv) has joined #haskell
2013-03-21 14:18:48	yitz	but the pedagogical arguments are a little weak. Cale himself, at times, as been by far the most active and successful teacher on the channel.
2013-03-21 14:18:56	-->	scooty-puff (~andy@184-97-230-5.mpls.qwest.net) has joined #haskell
2013-03-21 14:18:58	elliott	osfameron: how is that superior to just fixing it?
2013-03-21 14:19:12	elliott	it's not like anyone actually uses the generalisation when using lambdabot, perhaps outside of code golf
2013-03-21 14:19:12	Pods	srhb : this is what running make after config gives me http://dpaste.com/1030134/
2013-03-21 14:19:19	 *	hackagebot neat-interpolation 0.1.1 - A quasiquoter for neat and simple multiline text interpolation  http://hackage.haskell.org/package/neat-interpolation-0.1.1 (NikitaVolkov)
2013-03-21 14:19:23	aCube	> (+3) . [1,2,3]
2013-03-21 14:19:25	lambdabot	  [4,5,6]
2013-03-21 14:19:26	ab9rf	you could be even more confusing and have lambdabot choose its environment based on who's talking to it
2013-03-21 14:19:31	arkeet	and even in golf it's cheating.
2013-03-21 14:19:32	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Client Quit)
2013-03-21 14:19:36	-->	Paprikachu (~Paprikach@178.115.250.65.wireless.dyn.drei.com) has joined #haskell
2013-03-21 14:19:39	osfameron	elliott: it's not.  but if whoever could fix it won't, then it has the advantage of being possible.
2013-03-21 14:19:40	srhb	Pods: Looks like you need the development libraries for curses
2013-03-21 14:19:41	yitz	osfameron: oh no that is way overkill. just unleash your own lambdabot. but i would suggest speaking to srhb first though...
2013-03-21 14:20:20	Pods	srhb: you mean seperate installation for them is needed ?
2013-03-21 14:20:20	srhb	I'm working on it. Don't expect it to be done tomorrow, though. :)
2013-03-21 14:20:24	srhb	Pods: Yes
2013-03-21 14:20:29	ski	@poll-add (++)
2013-03-21 14:20:29	lambdabot	Added new poll: "(++)"
2013-03-21 14:20:29	<--	heruur (~tvh@dslb-094-222-008-203.pools.arcor-ip.net) has quit (Quit: Leaving.)
2013-03-21 14:20:36	magicman	:t flip
2013-03-21 14:20:37	lambdabot	(a -> b -> c) -> b -> a -> c
2013-03-21 14:20:41	arkeet	:t (??)
2013-03-21 14:20:42	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-03-21 14:20:45	Pods	okay will try . thanks srhb
2013-03-21 14:20:46	ski	@choice-add (++) :: [a] -> [a] -> [a]
2013-03-21 14:20:46	lambdabot	usage: @choice-add <poll> <choice>
2013-03-21 14:21:00	ski	@choice-add (++) "(++) :: [a] -> [a] -> [a]"
2013-03-21 14:21:00	lambdabot	usage: @choice-add <poll> <choice>
2013-03-21 14:21:09	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-21 14:21:13	arkeet	@choice-add "(++)" "(++) :: [a] -> [a] -> [a]"
2013-03-21 14:21:13	lambdabot	usage: @choice-add <poll> <choice>
2013-03-21 14:21:16	arkeet	great.
2013-03-21 14:21:17	 *	ski shakes head
2013-03-21 14:21:18	aCube	@help poll
2013-03-21 14:21:18	lambdabot	poll provides: poll-list poll-show poll-add choice-add vote poll-result poll-close poll-remove
2013-03-21 14:21:22	ab9rf	arkeet: you made it unhappy
2013-03-21 14:21:34	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-21 14:21:37	Clint	i think it was already unhappy
2013-03-21 14:21:38	aCube	@vote "(++)"
2013-03-21 14:21:38	lambdabot	usage: @vote <poll> <choice>
2013-03-21 14:21:52	ab9rf	obviously "(++)" is not an acceptable name for a poll
2013-03-21 14:21:55	aCube	@vote "(++)" "(++) :: [a] -> [a] -> [a]"
2013-03-21 14:21:55	lambdabot	usage: @vote <poll> <choice>
2013-03-21 14:21:58	fizbin	@poll-show (++)
2013-03-21 14:21:58	lambdabot	[]
2013-03-21 14:22:03	srhb	osfameron, yitz: I plan to allow several active environments
2013-03-21 14:22:05	yitz	@choice-add (++) (++)::[a]->[a]->[a]
2013-03-21 14:22:05	lambdabot	New candidate "(++)::[a]->[a]->[a]", added to poll "(++)".
2013-03-21 14:22:22	Kinnison	choices may not have whitespace?
2013-03-21 14:22:29	aCube	@vote (++) (++)::[a]->[a]->[a]
2013-03-21 14:22:29	lambdabot	voted on "(++)::[a]->[a]->[a]"
2013-03-21 14:22:31	srhb	osfameron, yitz: Right now it's a bit primitive, you name them before the >.. Like srhbs> :t (.)
2013-03-21 14:22:39	yitz	Kinnison: apparently not, or at least i don't know the quoting convention.
2013-03-21 14:22:44	ski	@choice-add (++) (++)::Monoid_m=>m->m->m
2013-03-21 14:22:44	lambdabot	New candidate "(++)::Monoid_m=>m->m->m", added to poll "(++)".
2013-03-21 14:22:54	srhb	I think I will end up having one global standard that follows closely to a barebones Haskell install
2013-03-21 14:23:01	srhb	and then optionally one defined for each registered user
2013-03-21 14:23:01	fizbin	@vote (++) (++)::[a]->[a]->[a]
2013-03-21 14:23:01	lambdabot	voted on "(++)::[a]->[a]->[a]"
2013-03-21 14:23:10	<--	dawe (~dawe@p5090F923.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-21 14:23:11	Kaidelong	@choice-add (++) (++)::Semigroup_m=>m->m->m
2013-03-21 14:23:11	lambdabot	New candidate "(++)::Semigroup_m=>m->m->m", added to poll "(++)".
2013-03-21 14:23:14	srhb	osfameron: How does that sound?
2013-03-21 14:23:18	fizbin	@poll-show (++)
2013-03-21 14:23:18	lambdabot	["(++)::Semigroup_m=>m->m->m","(++)::Monoid_m=>m->m->m","(++)::[a]->[a]->[a]"]
2013-03-21 14:23:37	osfameron	srhb: sounds good, yeah
2013-03-21 14:23:56	ski	Hermit ^
2013-03-21 14:24:00	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-21 14:24:15	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-21 14:24:15	ski	@poll-result (++)
2013-03-21 14:24:15	lambdabot	Poll results for (++) (Open): (++)::Semigroup_m=>m->m->m=0, (++)::Monoid_m=>m->m->m=0, (++)::[a]->[a]->[a]=2
2013-03-21 14:24:29	Hermit	sorry ski, I'll vote for monoid :-)
2013-03-21 14:24:45	<--	Paprikachu (~Paprikach@178.115.250.65.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-21 14:24:51	-->	powergiant (~powergian@shop3.diku.dk) has joined #haskell
2013-03-21 14:24:54	hpaste	“Weird Error” pasted “powergiant” at http://hpaste.org/84426
2013-03-21 14:24:58	ski	Hermit : just meant to direct your attention to the availability of the poll ..
2013-03-21 14:25:06	ski	(so, no need to be sorry ?)
2013-03-21 14:25:27	Hermit	@vote (++) (++)::Monoid_m=>m->m->m
2013-03-21 14:25:27	lambdabot	voted on "(++)::Monoid_m=>m->m->m"
2013-03-21 14:25:59	aCube	@help poll
2013-03-21 14:25:59	lambdabot	poll provides: poll-list poll-show poll-add choice-add vote poll-result poll-close poll-remove
2013-03-21 14:26:01	arkeet	Hermit: but we already have (<>)
2013-03-21 14:26:05	powergiant	Can someone explain that error to me? it seems very weird to me
2013-03-21 14:26:11	aCube	@poll-result (++)
2013-03-21 14:26:11	lambdabot	Poll results for (++) (Open): (++)::Semigroup_m=>m->m->m=0, (++)::Monoid_m=>m->m->m=2, (++)::[a]->[a]->[a]=2
2013-03-21 14:26:13	ab9rf	:t zip
2013-03-21 14:26:15	lambdabot	[a] -> [b] -> [(a, b)]
2013-03-21 14:26:28	powergiant	well that explains it..
2013-03-21 14:26:31	powergiant	thanks! :P
2013-03-21 14:26:38	Hermit	arkeet: hmm  /me reads about semigroups
2013-03-21 14:26:40	ab9rf	powergiant: could you post source, and not just the error?
2013-03-21 14:26:42	ski	arkeet : we already have `liftM' as well
2013-03-21 14:27:08	ski	powergiant : should perhaps be `... :: [(Double,Double)]' ?
2013-03-21 14:27:16	ab9rf	powergiant: i think the problem is that you're trying to bind the wrong type to the result of the zip
2013-03-21 14:27:18	arkeet	ski: but that at least has a (poor) reason for existing, as Functor isn't a superclass of Monad
2013-03-21 14:27:18	ion	@vote (++) (++)::Semigroup_m=>m->m->m
2013-03-21 14:27:18	lambdabot	voted on "(++)::Semigroup_m=>m->m->m"
2013-03-21 14:27:25	arkeet	ski: who knows why liftA exists, though...
2013-03-21 14:27:27	ski	powergiant : or maybe you wanted to use `zipWith' ?
2013-03-21 14:27:27	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 14:27:40	ion	arkeet: So you can easily define fmap in terms of your Applicative instance
2013-03-21 14:27:46	ab9rf	zip can't match a type of [Double], ever
2013-03-21 14:27:50	arkeet	ion: oh, fair
2013-03-21 14:27:55	ab9rf	zip is [(a,b)]
2013-03-21 14:27:56	powergiant	ab9rf: The :t call made my realize it.. I wanted [(Double,Double)]
2013-03-21 14:28:49	Pods	srhb : installed n curses , the error i am getting now is dpaste.com/1030145/
2013-03-21 14:28:55	Hermit	oh, so semigroups were monoids without mempty all along
2013-03-21 14:29:08	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-03-21 14:29:10	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Remote host closed the connection)
2013-03-21 14:29:29	srhb	Pods: That's the output of ./configure?
2013-03-21 14:29:36	ab9rf	powergiant: i only did that to be certain i had the type of zip right :)
2013-03-21 14:29:55	Pods	srhb : no that is for make
2013-03-21 14:29:59	turiya	is ghc useful with --with-rts=no
2013-03-21 14:30:05	powergiant	ab9rf: Ahh ok. I took it to be a friendly hint about actually understanding what types I was using hehe
2013-03-21 14:30:09	srhb	Pods: What does configure say_
2013-03-21 14:30:16	ab9rf	powergiant: that was serendipity :)
2013-03-21 14:30:19	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-21 14:30:29	Hermit	arkeet: <> looks like "not equal" to me (greater or less)
2013-03-21 14:30:52	`nand`	it's somewhat surprising that one actually meets other haskell programmers at events like these
2013-03-21 14:30:55	ab9rf	Hermit: that's what it meant in old ROM Basic
2013-03-21 14:30:57	`nand`	wouldn't have expected it
2013-03-21 14:31:41	<--	Thra11 (~thrall@87.114.98.137) has quit (Ping timeout: 246 seconds)
2013-03-21 14:31:42	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-21 14:31:42	<--	mechainai (~mechairoi@101-140-45-225f1.osk3.eonet.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-21 14:31:43	Hermit	ab9rf: it's not like basic was the only language to adopt that operator...
2013-03-21 14:31:47	ab9rf	Hermit: >< meant the same thing in some dialects; you could also use <= and =< interchangably
2013-03-21 14:31:51	Pods	srhb : http://dpaste.com/1030148/ this is my configure
2013-03-21 14:32:14	<--	jaroslaw (~a@tux3.usask.ca) has quit (Remote host closed the connection)
2013-03-21 14:32:18	<--	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-21 14:32:21	ab9rf	Hermit: i think SQL allows <> for not-equal
2013-03-21 14:32:23	-->	jaroslaw (~a@tux3.usask.ca) has joined #haskell
2013-03-21 14:32:30	-->	bru` (~bruno`@4077.rez-gif.supelec.fr) has joined #haskell
2013-03-21 14:32:33	-->	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has joined #haskell
2013-03-21 14:32:45	srhb	Pods: I've no idea why you get that ld error.
2013-03-21 14:32:57	Hermit	ab9rf: yep, that's it
2013-03-21 14:33:26	ab9rf	Hermit: i saw one dialect that allowed <=>, =<>, etc., all mapping to an infix operator that was vacuously true
2013-03-21 14:33:29	Pods	srhb : Any ideas about how should I proceed hereon??
2013-03-21 14:33:42	srhb	Pods: Hope that someone else that knows more responds. :)
2013-03-21 14:33:54	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 14:33:59	Pods	same here!!
2013-03-21 14:34:16	Hermit	anyway, I still haven't heard of a good reason why (++) should be [a] -> [a] -> [a]  instead of mappend. After all, lists are monoids
2013-03-21 14:34:24	ab9rf	Hermit: which gave insight to how they implemented comparison operators :)
2013-03-21 14:34:36	arkeet	Hermit: by the same argument, (.) should be fmap
2013-03-21 14:34:48	Hermit	arkeet: prelude compliance?
2013-03-21 14:35:36	int-e	@type Control.Category.(.)
2013-03-21 14:35:38	lambdabot	Couldn't find qualified module.
2013-03-21 14:35:43	arkeet	@type (Control.Category..)
2013-03-21 14:35:44	int-e	@type (Control.Category..)
2013-03-21 14:35:44	lambdabot	Control.Category.Category cat => cat b c -> cat a b -> cat a c
2013-03-21 14:35:45	lambdabot	Control.Category.Category cat => cat b c -> cat a b -> cat a c
2013-03-21 14:36:09	<--	sott_ (6d43d565@gateway/web/freenode/ip.109.67.213.101) has quit (Quit: Page closed)
2013-03-21 14:36:13	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-03-21 14:36:13	<--	scooty-puff (~andy@184-97-230-5.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-03-21 14:36:31	Hermit	ab9rf: what was <=> suposed to mean anyway?
2013-03-21 14:36:38	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Ping timeout: 255 seconds)
2013-03-21 14:36:44	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Quit: Leaving)
2013-03-21 14:36:48	-->	osxorgate (~osxorgate@62.140.132.44) has joined #haskell
2013-03-21 14:36:50	saml	Hermit, equivalent
2013-03-21 14:36:57	Hermit	no kidding
2013-03-21 14:37:00	<--	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-21 14:37:02	ab9rf	Hermit: in fact, i think in standard SQL only <> is allowed for not-equal, although many dialects allow != as a nonstandard extension
2013-03-21 14:37:12	ab9rf	Hermit: in BASIC?  it was not defined.
2013-03-21 14:37:24	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 264 seconds)
2013-03-21 14:37:31	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-21 14:37:50	Hermit	ab9rf: no, I meant the dialect (of, uh...) you mentioned above
2013-03-21 14:38:07	ab9rf	Hermit: that was in some versions of BASIC i've used in eons gone by
2013-03-21 14:38:13	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-21 14:38:21	ab9rf	Hermit: a <=> b was true for all a and b.
2013-03-21 14:38:33	-->	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has joined #haskell
2013-03-21 14:38:34	arkeet	less than or equal or greater than.
2013-03-21 14:38:35	Hermit	pretty pointless if you ask me...
2013-03-21 14:38:48	ab9rf	Hermit: it's because of how they parsed the operator
2013-03-21 14:38:49	arkeet	ab9rf: was NaN <=> NaN true?
2013-03-21 14:39:01	ab9rf	arkeet: NaN?  what is that? :)
2013-03-21 14:39:04	arkeet	lol
2013-03-21 14:39:09	Hermit	ab9rf: not a number
2013-03-21 14:39:11	arkeet	ok, no floats.
2013-03-21 14:39:18	Hermit	oh
2013-03-21 14:39:19	ab9rf	arkeet: even if they had floats they didn't have NaN
2013-03-21 14:39:34	arkeet	what was 0/0 then?
2013-03-21 14:39:37	ab9rf	arkeet: we're talking stuff written in the 70s and early 80s
2013-03-21 14:39:43	arkeet	sure.
2013-03-21 14:39:52	ab9rf	arkeet: a program halt
2013-03-21 14:39:58	arkeet	sure.
2013-03-21 14:40:07	Hermit	well, even early 80s predates me so....
2013-03-21 14:40:27	Hermit	err, that didn't sound right now that I double check it...
2013-03-21 14:40:30	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-21 14:40:43	Hermit	s/predates/pre-dates
2013-03-21 14:40:45	Hermit	there
2013-03-21 14:40:47	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 14:40:49	ab9rf	these interpreters dealt with comparison operators by scanning the operator, if they saw < then it would be true if less than, = would be true if equal, > would be true if greater
2013-03-21 14:40:52	arkeet	Hermit: no, predates
2013-03-21 14:40:59	ab9rf	you could do a ========== b and the interpreter would not are
2013-03-21 14:41:00	ab9rf	care
2013-03-21 14:41:23	Hermit	arkeet: thought for a second 'predates' had something to do with predators or something
2013-03-21 14:41:43	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-03-21 14:41:47	arkeet	it may
2013-03-21 14:41:55	ab9rf	a <=> b was literally "a is less than, equal to, or greater than b" and would be true as long as a and b were comparable
2013-03-21 14:41:55	b__	is there a way to set a max execution time on a function?
2013-03-21 14:41:57	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Quit: Leaving)
2013-03-21 14:41:58	Hermit	that's why
2013-03-21 14:42:06	arkeet	except it doesn't.
2013-03-21 14:42:08	ab9rf	and an error if they weren;t
2013-03-21 14:42:24	FireFly	ab9rf: I wonder if that's where <> for "inequal" is from
2013-03-21 14:42:26	Hermit	arkeet: good to know.
2013-03-21 14:42:59	-->	stat_vi (~stat@dslb-094-218-226-100.pools.arcor-ip.net) has joined #haskell
2013-03-21 14:43:38	ab9rf	i remember that this was a hard thing for me to unlern when i started writing code in pascal
2013-03-21 14:43:58	beaky	how does data.map work
2013-03-21 14:43:59	int-e	b__: Have a look at System.Timeout.
2013-03-21 14:44:09	-->	Ivanych (~n@188.17.163.9) has joined #haskell
2013-03-21 14:44:09	b__	alright, thanks
2013-03-21 14:44:11	ab9rf	the basic dialect i learned first allowed mushy comparison operators  and i had gotten into the habit of using <= and =>, and pascal didn't allow =>
2013-03-21 14:44:15	-->	Thra11 (~thrall@87.114.98.137) has joined #haskell
2013-03-21 14:44:21	<--	edtsech (~edtsech@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-21 14:44:39	ab9rf	i don't remember what not-equal was in pascal
2013-03-21 14:44:39	numeral	in math <=> is iff
2013-03-21 14:44:44	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-21 14:44:49	 *	numeral is just putting it out there
2013-03-21 14:44:56	arkeet	wow, I don't remember either.
2013-03-21 14:45:03	ab9rf	numeral: in perl <=> is the three-way comparison operator
2013-03-21 14:45:20	numeral	that's just wrong on so many levels
2013-03-21 14:45:35	arkeet	ah, in pascal it's <>
2013-03-21 14:45:48	ab9rf	arkeet: thought so but wasn't certain
2013-03-21 14:45:57	-->	hamilyon (~ashaposhn@94.124.202.202) has joined #haskell
2013-03-21 14:45:58	ab9rf	i haven't written any pascal since the late 80s
2013-03-21 14:46:04	<--	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-21 14:46:05	ski	hm, isn't Pascal `<>' Haskell `/=' ?
2013-03-21 14:46:10	arkeet	yes
2013-03-21 14:46:19	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-21 14:46:26	Kinnison	Lua's is ~= just for funsies
2013-03-21 14:46:27	ab9rf	haskell is /= which is fairly unusual in modern languages, ost everyone has gone with != since C did so
2013-03-21 14:46:51	ski	in Prolog, the non-strict comparisions are `>=' and `=<'
2013-03-21 14:47:07	ab9rf	Kinnison: that drives me nuts about lua
2013-03-21 14:47:08	<--	beaky (~beaky@bba68378.alshamil.net.ae) has left #haskell
2013-03-21 14:47:09	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-21 14:47:09	arkeet	on my ti-89 it's ≠
2013-03-21 14:47:11	arkeet	:p
2013-03-21 14:47:16	Kinnison	ab9rf: it does?  I like it
2013-03-21 14:47:17	Hermit	I find lambdas more unusual, with the scape syntax
2013-03-21 14:47:18	<--	lemao (~lemao@187.67.222.39) has quit (Excess Flood)
2013-03-21 14:47:29	ab9rf	arkeet: it's the same in APL except you have to actualy overstrike the / over the = :)
2013-03-21 14:47:38	arkeet	whaaat?
2013-03-21 14:47:44	-->	lemao (~lemao@187.67.222.39) has joined #haskell
2013-03-21 14:47:55	ab9rf	arkeet: APL used deliberate overstrikes
2013-03-21 14:47:57	FireFly	APL syntax is always fun
2013-03-21 14:48:05	<--	turiya (~turiya@14.139.65.8) has quit (Quit: Leaving)
2013-03-21 14:48:10	ab9rf	insane language.  it was my fourth i think
2013-03-21 14:48:36	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 14:48:38	Hermit	to think there's people writing big pieces of software in K nowadays...
2013-03-21 14:48:39	ab9rf	i scored a tiny APL interpreter for the trash-80 in like 1984?
2013-03-21 14:48:40	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 14:48:42	Hermit	gives me shivers
2013-03-21 14:48:49	ab9rf	Hermit: K being the successor to J?
2013-03-21 14:48:59	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-21 14:49:01	Hermit	ab9rf: no, K and J are brothers
2013-03-21 14:49:09	ab9rf	i looked at J back in the early 90s. i knew a guy who was writing text processing apps in APL back then
2013-03-21 14:49:13	-->	kaoskorobase (~sk@92.56.206.219) has joined #haskell
2013-03-21 14:49:16	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 14:49:18	Hermit	ab9rf: or the heroes of the men in black...
2013-03-21 14:49:18	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 14:49:29	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 14:49:51	<--	hamilyon (~ashaposhn@94.124.202.202) has left #haskell
2013-03-21 14:49:53	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 14:49:54	Hermit	ab9rf: J is used for number crunching, K is for... other things....
2013-03-21 14:49:55	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 14:49:59	ab9rf	J was iverson's attempt to pull APL into the "modern" era and not need overstriking :)
2013-03-21 14:50:30	FireFly	J looks rather ugly though, compared to APL :\
2013-03-21 14:50:32	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 14:50:34	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 14:50:35	ab9rf	FireFly: yes
2013-03-21 14:50:41	 *	Hermit would definitely like a calculator that runs J
2013-03-21 14:50:42	-->	mechainai (~mechairoi@101-140-24-154f1.osk3.eonet.ne.jp) has joined #haskell
2013-03-21 14:50:48	 *	FireFly too
2013-03-21 14:51:00	Hermit	for a couple of months J was my de-facto console calculator
2013-03-21 14:51:03	FireFly	(well, preferably using more APL-y characters)
2013-03-21 14:51:07	Hermit	until I forgot the syntax
2013-03-21 14:51:12	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 14:51:25	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 14:51:45	ab9rf	J uses . and : for a lot of things and the language looked like a pigeon shat all over your screen after a while
2013-03-21 14:52:06	Kinnison	⍨ has to be one of the best characters I've ever seen in a programming language though
2013-03-21 14:52:16	ab9rf	Kinnison: not renderable in my terminal font :(
2013-03-21 14:52:23	 *	Hermit can't see that char
2013-03-21 14:52:35	Kinnison	ab9rf: looks like a long ~ with two dots above it, like a confused face emoticon, only the right way up
2013-03-21 14:52:36	-->	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has joined #haskell
2013-03-21 14:52:41	Hermit	terminus should expand it's unicode horizons
2013-03-21 14:52:51	arkeet	it's
2013-03-21 14:52:55	merijn	ab9rf: Get a better terminal font :p
2013-03-21 14:52:56	Hermit	its*
2013-03-21 14:53:00	 *	Kinnison uses inconsolata for terminal font usage
2013-03-21 14:53:07	 *	arkeet uses whatever
2013-03-21 14:53:14	ab9rf	Kinnison: what code page is that one?
2013-03-21 14:53:16	ab9rf	on
2013-03-21 14:53:32	Kinnison	U+2368 APL FUNCTIONAL SYMBOL TILDE DIAERESIS
2013-03-21 14:53:32	Kinnison	UTF-8: e2 8d a8  UTF-16BE: 2368  Decimal: &#9064;
2013-03-21 14:53:50	merijn	Adobe released an open source monospace font not too long ago, might be worth looking at if you want better unicode coverage
2013-03-21 14:54:19	<--	hiratara (~hiratara@j080008.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 258 seconds)
2013-03-21 14:54:22	ab9rf	i'm not even sure what font i'm using here anymore :)
2013-03-21 14:54:41	Kinnison	heh
2013-03-21 14:54:42	 *	merijn uses Monaco, which is great, but not freely available AFAIK
2013-03-21 14:54:47	ab9rf	ah, ten point consolas
2013-03-21 14:54:52	-->	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-21 14:54:54	merijn	ugh
2013-03-21 14:55:00	ab9rf	meh, i'm lazy
2013-03-21 14:55:04	Kinnison	After a long time fiddling with different options, I settled on Inconsolata as being the least dreadful of the free ones
2013-03-21 14:55:09	merijn	I switched to 14pt a longtime ago
2013-03-21 14:55:18	ab9rf	i'm still young enough to use small fonts :)
2013-03-21 14:55:28	Hermit	merijn: menlo ftw :D
2013-03-21 14:55:30	ab9rf	merijn: i used to use 8pt, though, i'm getting older
2013-03-21 14:55:34	 *	Kinnison appears to use 10pt 
2013-03-21 14:55:46	ab9rf	14pt would occupy way too much screen real estate
2013-03-21 14:55:53	Kinnison	I could make it smaller, but I like to sit back from my screen and the lighting in here makes smaller glyphs harder to read
2013-03-21 14:56:00	merijn	Hermit: Menlo is just small in width for me
2013-03-21 14:56:14	 *	ski challenges "right way up"
2013-03-21 14:56:17	merijn	ab9rf: I have a 21 inch wide screen, I prefer not straining my eyes
2013-03-21 14:56:26	Kinnison	ski: :-P  (as it where)
2013-03-21 14:56:30	Kinnison	where? were!
2013-03-21 14:56:32	merijn	For the others: http://blogs.adobe.com/typblography/2012/09/source-code-pro.html
2013-03-21 14:56:32	 *	Kinnison needs new fingers
2013-03-21 14:56:37	ab9rf	merijn: i'm using a laptop with a 15" screen, so real estate is liited
2013-03-21 14:56:45	ski	Kinnison : that's the right way around, yes
2013-03-21 14:57:04	Kinnison	merijn: I prefer the 0 to have a stroke not a dot
2013-03-21 14:57:13	merijn	That's Adobe's open source monospace font, looks pretty decent. It was designed for source code so the glyphs are nice and readable, like iIlL1 difference and oO0
2013-03-21 14:57:44	Kinnison	merijn: IIRC, there were a few other reasons I disliked it. (I tried SCP and went back to Inconsolata)
2013-03-21 14:57:51	FireFly	Otherwise DejaVu Sans Mono is pretty decent IMHO
2013-03-21 14:58:03	-->	stat_vi_ (~stat@dslb-094-218-226-100.pools.arcor-ip.net) has joined #haskell
2013-03-21 14:58:24	Kinnison	Well, while this has been fun -- I have another annoyingly open-ended question about Haskell libs
2013-03-21 14:58:26	merijn	I really like Monaco and Menlo, but they're not freely available except OSX, afaik
2013-03-21 14:58:27	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-21 14:58:45	Kinnison	What is the preferred method for sending email from within a Haskell app?  (doesn't have to work on Windows, but bonus points if it does)
2013-03-21 14:58:59	ab9rf	ugh
2013-03-21 14:59:03	ab9rf	i hate sending mail
2013-03-21 14:59:05	<--	fxr (~user@217.131.228.206) has quit (Quit: disconnection...)
2013-03-21 14:59:14	-->	hiratara (~hiratara@g038004.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-21 14:59:15	Kinnison	So do I -- but a project I'm about to embark on will need to
2013-03-21 14:59:19	merijn	Kinnison: Depends, do you have access to a proper mail serve?
2013-03-21 14:59:38	Kinnison	merijn: I'm prepared to say "Yes, I have non-SSL access to an SMTP server which will trust me and relay"
2013-03-21 14:59:59	<--	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-21 15:00:02	merijn	Kinnison: Then just pluck some random SMTP library and point it at that? That's usually by far the easiest
2013-03-21 15:00:14	Kinnison	merijn: that gets me SMTP, but not email message construction
2013-03-21 15:00:18	Pods	can someone help me with getting my ghc geared up
2013-03-21 15:00:23	Kinnison	merijn: I'd rather not be gluing strings together myself if I can avoid it
2013-03-21 15:00:25	Pods	need to start developing for haskell
2013-03-21 15:00:27	ab9rf	Kinnison: ah
2013-03-21 15:00:36	-->	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has joined #haskell
2013-03-21 15:00:49	-->	Itkovian_ (~Itkovian@vpnk067.ugent.be) has joined #haskell
2013-03-21 15:00:52	ab9rf	Kinnison: it's the "how do i build an email" part you want dealt with, not the "how do i deliver it to a MTA"
2013-03-21 15:00:58	Kinnison	ab9rf: Both
2013-03-21 15:01:09	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-21 15:01:17	ab9rf	GAH! I HATE COMPUTES
2013-03-21 15:01:19	merijn	Kinnison: Most SMTP libraries in python have email datatype to work with, I'm not sure how it works in the haskell libraries, but considering the simplicity of SMTP I wouldn't be that worried...
2013-03-21 15:01:20	Kinnison	ab9rf: I'll get to the "And now I want to GPG encrypt it too" later :-)
2013-03-21 15:01:34	fizbin	@hackage mime-mail
2013-03-21 15:01:34	lambdabot	http://hackage.haskell.org/package/mime-mail
2013-03-21 15:01:34	merijn	Kinnison: Pipe it through GPG using fork() ;)
2013-03-21 15:01:59	<--	srhb (~srhb@82.211.217.226) has quit (Ping timeout: 258 seconds)
2013-03-21 15:02:02	Kinnison	fizbin: that looks plausible, ta.
2013-03-21 15:02:07	ab9rf	merijn: the problem with email is that it's not that simple anymore
2013-03-21 15:02:33	-->	alistairclark (~alisaircl@109.174.158.82) has joined #haskell
2013-03-21 15:03:12	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Ping timeout: 264 seconds)
2013-03-21 15:03:13	--	Itkovian_ is now known as Itkovian
2013-03-21 15:03:15	ab9rf	it's simple if you have non-SSL non-TLS access to an SMTP server that will relay for you without authentication, but if that's not the case then you have a massive stack of shit to pull in
2013-03-21 15:03:24	merijn	ab9rf: How so? The difficult part is sender trust, which is irrelevant if you have a proper mail server to relay over
2013-03-21 15:03:38	Kinnison	frankly I can assume a /usr/bin/sendmail too -- so I think mime-mail looks perfect
2013-03-21 15:04:07	ab9rf	Kinnison: if you can assume a sendmail, then just use that, it's far easier than doing network pootery
2013-03-21 15:04:48	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-21 15:05:20	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 15:05:32	Kinnison	ab9rf: Mmm, mime-mail supports running via sendmail so that's perfect
2013-03-21 15:05:42	-->	Urchin[emacs] (~user@unaffiliated/urchin) has joined #haskell
2013-03-21 15:06:00	Kinnison	For my next trick, I need to put all of this together into a terrifyingly fun web service.  yay Happstack
2013-03-21 15:06:03	Kinnison	thanks chaps
2013-03-21 15:06:23	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 15:06:30	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 276 seconds)
2013-03-21 15:06:56	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-21 15:07:02	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-21 15:07:21	b__	I want to set a timeout (System.Timeout) on a writeBS (from Snap) that's waiting for a result from a Parsec parser. Can I wrap the writeBS in an IO computation somehow?
2013-03-21 15:07:53	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-21 15:07:55	b__	unsafePerformIO? =}}
2013-03-21 15:08:12	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-21 15:08:17	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 240 seconds)
2013-03-21 15:08:50	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Read error: Connection reset by peer)
2013-03-21 15:08:55	<--	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-21 15:09:29	arkeet	return?
2013-03-21 15:09:41	arkeet	(not really)
2013-03-21 15:10:16	ab9rf	wee
2013-03-21 15:10:16	 *	ski wonders what the type of `writeBS' is
2013-03-21 15:10:21	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 15:10:37	notdan	How can I run cabal-dev ghci from haskell-mode?
2013-03-21 15:10:51	notdan	It appears that somehow I need to change the current directory to my project one
2013-03-21 15:10:54	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 15:11:10	ab9rf	i want somethig that will move the wet clothing from the washer to the dryer without me having to get up from my chair.
2013-03-21 15:11:17	b__	writeBS :: MonadSnap m => ByteString -> m ()
2013-03-21 15:11:20	powergiant	ab9rf: a wife ?
2013-03-21 15:11:34	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-21 15:11:39	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 15:12:13	ab9rf	powergiant: danger, will robinson
2013-03-21 15:12:35	earthy	ab9rf: a washer dryer combo?
2013-03-21 15:12:45	arkeet	MonadIO is a superclass of MonadSnap, no?
2013-03-21 15:13:07	arkeet	I guess that doesn't help.
2013-03-21 15:13:11	arkeet	liftIO goes the wrong way.
2013-03-21 15:13:13	ab9rf	i was thinking that i could enslave one or more of the children to do that
2013-03-21 15:13:22	ab9rf	but my daughter is at school and my son is still asleep
2013-03-21 15:13:32	Pods	I need someone to please install ghc for me !!
2013-03-21 15:13:35	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 15:13:48	b__	arkeet yeah, liftIO goes the wrong way
2013-03-21 15:13:48	Pods	or well just point out the issue
2013-03-21 15:14:02	ab9rf	Pods: you have odd errors
2013-03-21 15:14:10	-->	racycle (~racycle@75-25-129-128.lightspeed.sjcpca.sbcglobal.net) has joined #haskell
2013-03-21 15:14:29	Pods	ab9rf : nevertheless I am dying to contribute..what do we do ??
2013-03-21 15:14:44	-->	jdnavarro (~danny@253.red-88-22-34.staticip.rima-tde.net) has joined #haskell
2013-03-21 15:14:53	ab9rf	Pods: use a different computer? :)
2013-03-21 15:15:03	arkeet	Pods: are you installing the haskell platform?
2013-03-21 15:15:12	Pods	arkeet : yes
2013-03-21 15:15:23	-->	Itkovian_ (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-03-21 15:15:31	Pods	ab9rf : as much as I would like that , students here are allowed only 1
2013-03-21 15:15:33	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-21 15:15:44	<--	YellowOnion (~jim@29.243.69.111.dynamic.snap.net.nz) has quit (Read error: Connection reset by peer)
2013-03-21 15:16:05	notdan	Hm, also searching the haddock does not work for me in haskell-mode, I get funny urls like: http://www.haskell.org/ghc/docs/latest/html/libraries//%60GHC-List%27.html%23v:head
2013-03-21 15:16:18	Pods	arkeet : so to install haskell is why i needed ghc , which isnt working, is there any other way ??
2013-03-21 15:16:54	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 276 seconds)
2013-03-21 15:16:58	arkeet	ghc comes in the platform.
2013-03-21 15:17:18	arkeet	what's the problem?
2013-03-21 15:17:30	<--	Itkovian (~Itkovian@vpnk067.ugent.be) has quit (Ping timeout: 264 seconds)
2013-03-21 15:17:30	--	Itkovian_ is now known as Itkovian
2013-03-21 15:17:53	-->	Paprikachu (~Paprikach@178.115.249.28.wireless.dyn.drei.com) has joined #haskell
2013-03-21 15:18:03	Pods	installing haskell gave me an error that it couldnt locate ghc
2013-03-21 15:18:26	Pods	are you saying that installing haskell directly should make it work ??
2013-03-21 15:18:48	<--	guampa (~guampa@unaffiliated/guampa) has quit
2013-03-21 15:18:49	arkeet	what?
2013-03-21 15:18:54	arkeet	what exactly are you installing?
2013-03-21 15:19:12	Pods	I want to develop in haskell
2013-03-21 15:19:22	Pods	so I am looking to install the haskell platform
2013-03-21 15:19:35	Clint	on what?
2013-03-21 15:19:42	Pods	on ubuntu
2013-03-21 15:19:45	Pods	11.10
2013-03-21 15:19:50	<--	nithp (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-21 15:20:08	Pods	and so I came across a documentation which says prerequisite for haskell is ghc
2013-03-21 15:20:10	<--	racycle (~racycle@75-25-129-128.lightspeed.sjcpca.sbcglobal.net) has left #haskell
2013-03-21 15:20:16	arkeet	that comes with the platform.
2013-03-21 15:20:17	<--	powergiant (~powergian@shop3.diku.dk) has quit (Ping timeout: 255 seconds)
2013-03-21 15:20:20	Clint	Pods: apt-get install haskell-platform
2013-03-21 15:20:27	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 15:20:28	Pods	and so i ended up installing ghc and then never getting through with it
2013-03-21 15:20:29	Pods	oh
2013-03-21 15:20:36	Pods	thanks Clint
2013-03-21 15:20:39	Pods	will try that
2013-03-21 15:21:06	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 15:21:08	<--	edon (~user@albalug/edon) has quit (Ping timeout: 258 seconds)
2013-03-21 15:21:29	ab9rf	i can't imagine only having one computer
2013-03-21 15:21:44	ab9rf	i mean, i remember back when i only had one computer
2013-03-21 15:21:50	ab9rf	but that was a _long_ time ago
2013-03-21 15:22:03	Pods	I hope contributing with gsoc resolves that part atleast :D
2013-03-21 15:23:13	-->	paintcan (~user@66.199.39.230) has joined #haskell
2013-03-21 15:23:22	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit
2013-03-21 15:23:48	geekosaur	note that if you installed a ghc that is not the one the haskell-platform metapackage expects, it may demand that you remove it first
2013-03-21 15:23:51	Pods	Thanks so much :D this was a command line away !! <mental-note : must not follow random documentations thoroughly :D >
2013-03-21 15:24:17	-->	gnuwilliam (~william@177.134.100.111) has joined #haskell
2013-03-21 15:24:35	<--	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-21 15:24:56	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:25:06	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 15:25:07	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:25:15	<--	gnuwilliam (~william@177.134.100.111) has left #haskell
2013-03-21 15:25:46	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:25:49	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:26:09	arkeet	ubuntu 11.10 is ancient no?
2013-03-21 15:26:12	-->	anRch (~markmilli@pool-108-20-103-241.bstnma.east.verizon.net) has joined #haskell
2013-03-21 15:26:19	<--	MnO2 (~MnO2@nat/yahoo/x-pgtkofrjtxjlbozr) has quit (Quit: MnO2)
2013-03-21 15:26:27	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:26:29	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:26:50	arkeet	platform 2011.2.0.1.2 :s
2013-03-21 15:26:55	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 264 seconds)
2013-03-21 15:27:08	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:27:10	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:27:12	Clint	surprisingly, both are from 2011
2013-03-21 15:27:18	<--	LAMMJohnson (~ja@user-5af433bb.broadband.tesco.net) has quit (Remote host closed the connection)
2013-03-21 15:27:49	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:27:52	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:27:55	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Read error: Connection reset by peer)
2013-03-21 15:27:59	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Quit: WeeChat 0.3.8)
2013-03-21 15:28:29	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:28:32	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:29:09	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:29:13	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:29:49	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:29:52	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:30:36	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:30:36	-->	kevinqcs (~turing@183.209.41.97) has joined #haskell
2013-03-21 15:30:38	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:30:51	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-21 15:31:13	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-03-21 15:31:14	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:31:18	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:31:59	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:32:01	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:32:39	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:32:43	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:32:52	<--	Paprikachu (~Paprikach@178.115.249.28.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-21 15:32:53	-->	psii (~user@sunbeam.informatik.uni-kiel.de) has joined #haskell
2013-03-21 15:33:07	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 15:33:20	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:33:22	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:34:00	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:34:02	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:34:16	-->	tlawson (~tlawson@c-24-118-48-63.hsd1.mn.comcast.net) has joined #haskell
2013-03-21 15:34:41	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:34:45	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:35:00	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-21 15:35:21	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 15:35:24	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:35:29	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:35:30	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 15:35:38	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 15:36:02	-->	timtom (~Thunderbi@2001:630:12:2430:9493:11a6:f629:9d04) has joined #haskell
2013-03-21 15:36:03	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 15:36:07	<--	stat_vi_ (~stat@dslb-094-218-226-100.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-21 15:36:12	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:36:18	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:36:57	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:37:02	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:37:11	tlawson	New user question: Is there a more direct function for setting record fields than a lambda (e.g. \s -> record{field=s})?
2013-03-21 15:37:42	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:37:46	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:37:58	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (Max SendQ exceeded)
2013-03-21 15:38:24	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 15:38:24	-->	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has joined #haskell
2013-03-21 15:38:28	<--	sheerun (~sheerun@89-72-253-211.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-03-21 15:38:31	-->	gustavnils (~textual@31.210.251.9) has joined #haskell
2013-03-21 15:38:58	Pods	arkeet : the latest one 12.* version dont support development too well
2013-03-21 15:39:01	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 15:39:06	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 15:39:09	supki	tlawson: no
2013-03-21 15:39:21	Pods	I find 11.10 the best..mac culture is not much deep rooted here
2013-03-21 15:40:03	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 15:40:15	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-21 15:40:26	arkeet	what ghc does platform 2011.2 come with, anyway?
2013-03-21 15:40:38	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:40:39	arkeet	7.0.x?
2013-03-21 15:40:56	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 15:40:56	tlawson	supki: thanks.
2013-03-21 15:41:12	ski	also see lenses
2013-03-21 15:41:57	arkeet	or rather, lens
2013-03-21 15:42:11	fizbin	Is it standard Haskell style when writing a tuple across several lines to write the comma at the beginning of the second (and later) lines, lined up with the open paren on the first line? I'm seeing that in this article and it took me a while to convince myself there wasn't any weird syntax I hadn't seen before going on.
2013-03-21 15:42:11	-->	shurikas (~Kostas@195.181.64.50) has joined #haskell
2013-03-21 15:42:34	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Leaving...)
2013-03-21 15:42:34	ski	fizbin : i do that. no idea about standard
2013-03-21 15:42:34	Pods	arkeet : yes 7.4
2013-03-21 15:42:37	supki	fizbin: I use it everywhere
2013-03-21 15:42:42	earthy	fizbin: it's quite common
2013-03-21 15:43:13	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:43:14	ski	(and similarly with literal lists and records)
2013-03-21 15:43:15	arkeet	I don't understand "yes 7.4", are you agreeing with me?
2013-03-21 15:43:20	arkeet	7.4 wasn't released until 2012
2013-03-21 15:43:28	typoclass	fizbin: i guess it makes it harder to forget a comma by accident
2013-03-21 15:43:39	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:43:47	ski	also makes it easier to line up the commas
2013-03-21 15:43:57	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:44:03	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 15:44:11	fizbin	I guess? It's just such a radical departure from other languages that use vaguely-similar syntax.
2013-03-21 15:44:11	timtom	fizbin: i use it
2013-03-21 15:44:17	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:44:21	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 15:44:24	Pods	well i was struggling with installing the 7.4 tar
2013-03-21 15:44:50	 *	ski is pro- lining-up stuff
2013-03-21 15:45:16	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 15:45:16	k00mi	I find it makes editing the list/tuple/record easier, since one can just comment out or add a line and the commas still match up
2013-03-21 15:45:16	fizbin	e.g., while one could write a json array exactly that way too, people would look at you weird.
2013-03-21 15:45:17	<--	zhulikas (~Kostas@213.159.34.100) has quit (Ping timeout: 258 seconds)
2013-03-21 15:45:18	timtom	fizbin: it also allows you to easily comment out / delete every element except the first one
2013-03-21 15:45:29	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:45:51	-->	Logarithm (322aecbd@gateway/web/freenode/ip.50.42.236.189) has joined #haskell
2013-03-21 15:45:56	aCube	The other style allows the same, except for the last one
2013-03-21 15:46:10	ski	but is ugly, or awkward
2013-03-21 15:46:20	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-21 15:46:23	ski	(ugly if you don't line up. awkward if you do line up)
2013-03-21 15:46:31	 *	typoclass uses that too, but couldn't really say why. i guess it's to make the overall structure clear ... "tuple with three elements"
2013-03-21 15:46:38	fizbin	I guess what's weird is that when you write it on one line you always write (thingA, thingB) or (thingA,thingB) but never (thingA ,thingB)
2013-03-21 15:46:43	typoclass	fizbin: it's a style choice. either one is fine
2013-03-21 15:47:03	ski	fizbin : i've written the latter of those many times
2013-03-21 15:47:15	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:47:19	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-21 15:47:36	ski	(usually to line up with a `,' from a pair on another line)
2013-03-21 15:47:50	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:47:54	fizbin	Right, but when I see (thingA ,thingB) I think I'm back reading the innards of a lisp quasi-quote expression.
2013-03-21 15:48:00	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 15:48:03	aCube	How do you format the export lists of modules?
2013-03-21 15:48:07	aCube	a
2013-03-21 15:48:08	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:48:37	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-03-21 15:48:41	ski	  module Foo
2013-03-21 15:48:46	ski	    ( foo
2013-03-21 15:48:51	ski	    , bar
2013-03-21 15:48:53	ski	    ) where
2013-03-21 15:48:58	aCube	oh, I do
2013-03-21 15:49:01	aCube	module Foo (
2013-03-21 15:49:07	aCube	    
2013-03-21 15:49:07	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-03-21 15:49:16	aCube	module Foo (
2013-03-21 15:49:17	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 240 seconds)
2013-03-21 15:49:18	aCube	    A
2013-03-21 15:49:21	aCube	   , B
2013-03-21 15:49:26	ski	(and then the rest of the module indented two spaces, with possible exceptions for "commenting chunks of code out")
2013-03-21 15:49:31	aCube	lol I dodn't get it right in chat
2013-03-21 15:49:44	aCube	module Foo (
2013-03-21 15:49:47	mikurubeam	aCube: hpaste?
2013-03-21 15:49:48	aCube	    foo
2013-03-21 15:49:55	aCube	  , bar
2013-03-21 15:49:59	<--	osxorgate (~osxorgate@62.140.132.44) has quit (Ping timeout: 255 seconds)
2013-03-21 15:50:05	parcs	encapsulation is overrated. export everything!
2013-03-21 15:50:05	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:50:05	aCube	  ) where
2013-03-21 15:50:07	typoclass	aCube: please use hpaste for code > 1 line
2013-03-21 15:50:11	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 15:50:12	aCube	typoclass: ok
2013-03-21 15:50:26	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (Ping timeout: 245 seconds)
2013-03-21 15:50:48	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:50:56	 *	ski . o O ( "please use <http://hpaste.org> for pasting code" ? )
2013-03-21 15:51:17	notdan	> :info head
2013-03-21 15:51:19	lambdabot	  <hint>:1:1: parse error on input `:'
2013-03-21 15:51:21	notdan	@info head
2013-03-21 15:51:22	lambdabot	head
2013-03-21 15:51:24	notdan	hm
2013-03-21 15:51:31	ski	@index head
2013-03-21 15:51:31	lambdabot	Data.List, Prelude
2013-03-21 15:51:55	ski	@undo head
2013-03-21 15:51:55	lambdabot	head
2013-03-21 15:52:01	ski	@help info
2013-03-21 15:52:01	lambdabot	help <command>. Ask for help for <command>. Try 'list' for all commands
2013-03-21 15:52:17	notdan	Strange. It seems that in my build of GHC, 'head' is located in GHC.List
2013-03-21 15:52:18	ski	(i.e. "no such command")
2013-03-21 15:52:32	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-21 15:52:35	notdan	which breaks inferior-haskell-find-haddock
2013-03-21 15:52:36	ski	notdan : implementation details
2013-03-21 15:52:43	ski	hm, interesting
2013-03-21 15:53:02	aCube	head :: [a] -> a        -- Defined in `GHC.List'
2013-03-21 15:53:14	-->	sanemat (~sanemat@7c2947bf.i-revonet.jp) has joined #haskell
2013-03-21 15:53:25	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:53:28	notdan	Yeah, and if you try to C-c C-d on it, it'll take you to a non-exiting .html doc
2013-03-21 15:53:28	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:53:31	-->	fergusnoble (fergusnobl@repl.esden.net) has joined #haskell
2013-03-21 15:53:38	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 15:54:01	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-21 15:54:04	-->	jeffreybaird (~jeffreyba@pool-96-246-2-14.nycmny.east.verizon.net) has joined #haskell
2013-03-21 15:54:08	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-21 15:54:43	-->	Eduard_Munteanu (~Eduard_Mu@188.25.7.16) has joined #haskell
2013-03-21 15:55:28	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 15:55:31	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-21 15:55:32	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-21 15:55:40	<--	tlawson (~tlawson@c-24-118-48-63.hsd1.mn.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-21 15:55:46	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:55:48	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:55:50	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 256 seconds)
2013-03-21 15:56:20	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-21 15:57:04	-->	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has joined #haskell
2013-03-21 15:57:29	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:57:31	-->	fibred-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:57:41	-->	_jwest (~jordan@108-245-186-81.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 15:57:41	<--	_jwest (~jordan@108-245-186-81.lightspeed.sntcca.sbcglobal.net) has quit (Changing host)
2013-03-21 15:57:41	-->	_jwest (~jordan@unaffiliated/jwest/x-8002332) has joined #haskell
2013-03-21 15:58:21	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 15:58:25	<--	fibred-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 15:58:28	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-21 15:58:52	int-e	notdan: well, that is where head is defined. The thing that breaks it is a haddock hack: GHC.List has -- #hide in its source code, so all haddocks from there are generated in modules reexporting functions from GHC.List instead, that is, Data.List.
2013-03-21 15:59:20	<--	schovi_ (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-21 15:59:23	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 15:59:28	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 258 seconds)
2013-03-21 15:59:33	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-21 15:59:34	<--	usr1324 (59eede12@gateway/web/freenode/ip.89.238.222.18) has quit (Quit: Page closed)
2013-03-21 15:59:37	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 15:59:41	--	stelleg_away is now known as stelleg
2013-03-21 15:59:47	<--	az (~andre@kettu.znaider.de) has left #haskell ("WeeChat 0.3.7")
2013-03-21 16:00:13	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 16:00:15	<--	schovi (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-21 16:00:26	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 16:00:35	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-21 16:00:36	-->	hkBst_ (~marijn@79.170.210.172) has joined #haskell
2013-03-21 16:00:36	<--	hkBst_ (~marijn@79.170.210.172) has quit (Changing host)
2013-03-21 16:00:36	-->	hkBst_ (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-21 16:00:47	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 240 seconds)
2013-03-21 16:00:51	ski	so the broken thing is `inferior-haskell-find-haddock' still looking for `GHC.List' ?
2013-03-21 16:01:14	int-e	iow, :i in ghci is not a reliable way for finding out where haddock put the accompanying documentation.
2013-03-21 16:01:23	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:01:41	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-21 16:02:08	-->	powergiant (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-21 16:03:05	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 16:03:11	int-e	that said I don't know how to do it properly.
2013-03-21 16:04:32	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-21 16:04:34	<--	odi (~user@089144206245.atnat0015.highway.a1.net) has quit (Ping timeout: 245 seconds)
2013-03-21 16:04:53	<--	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has quit (Quit: WeeChat 0.4.0)
2013-03-21 16:05:13	-->	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has joined #haskell
2013-03-21 16:05:41	<--	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has quit (Client Quit)
2013-03-21 16:05:55	-->	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has joined #haskell
2013-03-21 16:06:31	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 16:06:58	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 16:07:35	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Ping timeout: 260 seconds)
2013-03-21 16:07:44	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-21 16:08:43	-->	frz_ (~frz@unaffiliated/fry) has joined #haskell
2013-03-21 16:09:57	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-21 16:11:08	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Ping timeout: 256 seconds)
2013-03-21 16:11:17	<--	Logarithm (322aecbd@gateway/web/freenode/ip.50.42.236.189) has quit (Quit: Page closed)
2013-03-21 16:11:21	<--	kerrick (~kerrick@206.29.182.199) has quit (Ping timeout: 258 seconds)
2013-03-21 16:17:18	<--	sopvop (~lonokhov@213.170.88.44) has quit (Quit: Leaving.)
2013-03-21 16:17:19	-->	Loggs (322aecbd@gateway/web/freenode/ip.50.42.236.189) has joined #haskell
2013-03-21 16:18:13	-->	dan_johnsin (~djohnson@168.93.96.4) has joined #haskell
2013-03-21 16:18:49	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-21 16:20:10	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-21 16:21:38	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 16:22:01	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-21 16:22:24	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-21 16:22:42	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-21 16:22:51	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:22:53	<--	JohnBat26 (~Eugene@89.175.77.161) has quit (Quit: KVIrc 4.3.1 Aria http://www.kvirc.net/)
2013-03-21 16:22:58	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-21 16:23:10	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 16:23:16	amyers	chrisdone's haskell-docs seems to do pretty well
2013-03-21 16:23:27	amyers	I haven't really used it a lot though
2013-03-21 16:24:03	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:24:03	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 16:24:39	-->	srhb (~srhb@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-21 16:25:03	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:25:20	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 16:25:52	mm_freak	Ralith: as said, i'm happy to help, but please be patient for now =)
2013-03-21 16:26:15	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:26:16	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 16:26:43	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 16:27:02	<--	Maarten__ (~maarten@a83-163-18-146.adsl.xs4all.nl) has quit (Quit: Maarten__)
2013-03-21 16:27:04	-->	kerrick (~kerrick@206.29.182.199) has joined #haskell
2013-03-21 16:27:29	<--	silver (~silver@37.214.42.47) has quit (Ping timeout: 245 seconds)
2013-03-21 16:28:04	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 256 seconds)
2013-03-21 16:28:05	-->	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-21 16:28:14	<--	Thra11 (~thrall@87.114.98.137) has quit (Ping timeout: 255 seconds)
2013-03-21 16:28:18	<--	Eliel_ (~jojkaart@dyn79-415.yok.fi) has quit (Read error: No route to host)
2013-03-21 16:28:28	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 16:29:12	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:30:08	-->	beaky (~beaky@bba68378.alshamil.net.ae) has joined #haskell
2013-03-21 16:30:09	beaky	hello
2013-03-21 16:30:17	beaky	how do i translate a class hierarchy to haskell
2013-03-21 16:30:38	srhb	You don't really do that. Have you read about the antipattern wrt class hierarchies?
2013-03-21 16:30:59	--	[[zzz]] is now known as [[zz]]
2013-03-21 16:31:03	-->	ijp` (~user@host86-173-114-23.range86-173.btcentralplus.com) has joined #haskell
2013-03-21 16:31:04	-->	Thra11 (~thrall@87.114.179.138) has joined #haskell
2013-03-21 16:31:07	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 264 seconds)
2013-03-21 16:31:26	<--	kerrick (~kerrick@206.29.182.199) has quit (Ping timeout: 252 seconds)
2013-03-21 16:31:47	beaky	nope
2013-03-21 16:32:00	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-21 16:32:17	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-03-21 16:32:18	<--	Thra11 (~thrall@87.114.179.138) has quit (Max SendQ exceeded)
2013-03-21 16:32:32	beaky	why are class hierarchies bad
2013-03-21 16:32:35	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-21 16:32:40	-->	jaeyeun_ (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 16:32:57	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-21 16:33:13	-->	adlan_ (~adlan@210.195.12.15) has joined #haskell
2013-03-21 16:33:14	-->	Thra11 (~thrall@87.114.179.138) has joined #haskell
2013-03-21 16:33:38	<--	ijp (~user@host81-159-28-249.range81-159.btcentralplus.com) has quit (Ping timeout: 252 seconds)
2013-03-21 16:33:43	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-21 16:33:49	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-21 16:33:54	ski	afaiu, even object gurus discourage deep class hierarchies
2013-03-21 16:34:22	<--	adlan (~adlan@115.134.180.140) has quit (Ping timeout: 252 seconds)
2013-03-21 16:34:38	-->	darinmorrison (~dwm@unaffiliated/darinmorrison) has joined #haskell
2013-03-21 16:34:39	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-21 16:35:23	jrajav	Object gurus also encourage composition over inheritance
2013-03-21 16:35:25	jrajav	But then Java :/
2013-03-21 16:35:43	beaky	http://ideone.com/OdjstA atm I have this huge class hierarchy
2013-03-21 16:35:59	ab9rf	beaky: that sounds like a problem you need to deal with
2013-03-21 16:36:04	beaky	because I have several kinds of employees with different attributes related to payment policies
2013-03-21 16:36:16	beaky	but I don't know how to reduce it to a single type :(
2013-03-21 16:36:36	ab9rf	beaky: you owe me a fifth of bourbon just for looking at that code
2013-03-21 16:36:38	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 16:36:55	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-21 16:36:55	dario	type Employee = Intern | NonPaydEmployee | Paydemployee
2013-03-21 16:37:20	-->	yezariaely (arj1@2a01:130:2000:121:230:48ff:fe64:340a) has joined #haskell
2013-03-21 16:37:22	beaky	heh yeah object-oriented code can get very messy
2013-03-21 16:37:35	ab9rf	beaky: especially when it's a dumb model
2013-03-21 16:37:54	beaky	dario: but with that definition, how can I add/change new employee payment policiy definitions at runtime?
2013-03-21 16:38:09	ab9rf	beaky: you can't do that with this class hierarchy either
2013-03-21 16:38:16	beaky	ah
2013-03-21 16:38:22	beaky	how come?
2013-03-21 16:38:32	ab9rf	you can't add a new class to the hierarchy at run time
2013-03-21 16:38:38	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 16:38:38	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 16:38:40	beaky	oh
2013-03-21 16:38:47	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Quit: Leaving...)
2013-03-21 16:38:56	yezariaely	I wondered if there is any multimap library? My cabal responds with "No matches found" on multimap.
2013-03-21 16:39:02	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 16:39:19	beaky	but it seems to make sense: every employee is a person, and every specialization of employee is an employee subtype, a bonus salary employee is a salaried employee, and employers are people
2013-03-21 16:39:19	ab9rf	beaky: i realize that tis is a a standard OO 'learning exercise' but it's phenomenally stupid
2013-03-21 16:39:30	beaky	what makes it terrible?
2013-03-21 16:39:33	<--	MroiZo (~quassel@79.138.247.27.bredband.3.dk) has quit (Remote host closed the connection)
2013-03-21 16:39:50	ab9rf	beaky: the fact that if your company changes its pay policies you have to rewrite the application
2013-03-21 16:40:00	beaky	ah right;
2013-03-21 16:40:00	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-21 16:40:16	beaky	and serialization would be hard
2013-03-21 16:40:16	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 16:40:29	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Ping timeout: 246 seconds)
2013-03-21 16:40:29	-->	pranavrc (~pranavrc@122.164.173.119) has joined #haskell
2013-03-21 16:40:29	<--	pranavrc (~pranavrc@122.164.173.119) has quit (Changing host)
2013-03-21 16:40:29	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-21 16:40:57	ab9rf	invariably you'll discover that there are endless 'special cases' in any organization
2013-03-21 16:41:24	<--	Thra11 (~thrall@87.114.179.138) has quit (Ping timeout: 276 seconds)
2013-03-21 16:41:24	ab9rf	and if you use a class model like this you end up having lots of classes that apply only to one person
2013-03-21 16:41:34	supki	yezariaely: Map k [v] or Map k (Set v) is not good enough?
2013-03-21 16:41:39	dcoutts	yezariaely: if you can't find a specific lib for it on hackage, you can of course use a Map k [v]
2013-03-21 16:42:00	<--	elliott (elliott@unaffiliated/elliott) has quit (Read error: Connection reset by peer)
2013-03-21 16:42:02	ab9rf	it's a dumb example that only makes sense to people who have enver actually tried to write or use a payroll application :)
2013-03-21 16:42:17	beaky	hmm; so what kind of design will account for such variety in payment policies?
2013-03-21 16:42:19	-->	elliott_ (elliott@unaffiliated/elliott) has joined #haskell
2013-03-21 16:42:20	beaky	hah
2013-03-21 16:42:25	tdammers	the reason why OOP is so insanely popular in the corporate world is that it looks as if it maps 1:1 on organisation structures and business processes
2013-03-21 16:42:29	hkBst_	ab9rf: so what does make sense? A compensation description DSL?
2013-03-21 16:42:33	tdammers	but the sad part is, it actually doesn't
2013-03-21 16:42:46	ab9rf	tdammers: that's a generl problem with OOP
2013-03-21 16:43:04	ab9rf	tdammers: OOP _seems_ to map onto conceptual objects, but when you dig into it it usually doesn't
2013-03-21 16:43:06	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-21 16:43:23	ab9rf	hkBst_: o
2013-03-21 16:43:25	ab9rf	gah
2013-03-21 16:43:28	ab9rf	damn keyboard
2013-03-21 16:43:31	tdammers	OOP does map onto something conceptual, but that something is just a bit more abstract than the real-world objects you're trying to model
2013-03-21 16:43:35	beaky	OOP objects end up being way more abstract than stuff
2013-03-21 16:43:36	simpson	Could you all just say "Java" instead of "OOP" please?
2013-03-21 16:43:52	tdammers	simpson: no. It applies to other OOP languages too
2013-03-21 16:43:55	--	elliott_ is now known as elliott
2013-03-21 16:43:56	beaky	maybe C++ too
2013-03-21 16:44:04	tdammers	C++, Java, C#, ...
2013-03-21 16:44:07	tdammers	PHP, even
2013-03-21 16:44:08	-->	kerrick (~kerrick@c-69-181-23-69.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 16:44:10	simpson	tdammers: Even those without classes?
2013-03-21 16:44:22	ab9rf	well PHP is just java with extra warts
2013-03-21 16:44:31	-->	Acedip (~ani@fedora/Acedip) has joined #haskell
2013-03-21 16:44:37	ab9rf	ruby's model is slightly different but not materially
2013-03-21 16:44:37	simpson	ab9rf: Uh, what. Not even close.
2013-03-21 16:44:43	jfischoff	are there any packages out there that help with tracking and restarting long running processes?
2013-03-21 16:44:58	Pods	does haskell have an interpreter like python ??
2013-03-21 16:44:59	tdammers	I'd rather say PHP is just half of misunderstood Perl with half of Java's OOP semantics tacked onto it
2013-03-21 16:45:10	srhb	daily PHP rant?
2013-03-21 16:45:12	Kinnison	jfischoff: I tend to leave that to something dedicated to the job like systemd
2013-03-21 16:45:12	tdammers	Pods: not quite, but there's runghc and ghci
2013-03-21 16:45:14	beaky	hmm maybe prototype-based oop can solve that kind of problem
2013-03-21 16:45:17	`ramses	Pods: ghci
2013-03-21 16:45:20	-->	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has joined #haskell
2013-03-21 16:45:21	ab9rf	simpson: PHP's object model is java's viewed through a fairly crappy mirror and implemented by baboons
2013-03-21 16:45:25	yezariaely	supki: Well, yes, this would work fine. Just wondered if there is some which smoothly integrates all aux functions like map and such in the map. When using Map k [v] I always have to nest the maps, folds, ...
2013-03-21 16:45:38	Pods	can we try implementing one maybe as a part of (say) gsoc
2013-03-21 16:45:44	yezariaely	*map and such in MultiMap
2013-03-21 16:46:00	tdammers	yezariaely: I wouldn't be surprised if lens had an answer for you
2013-03-21 16:46:06	-->	[swift] (~mfowler@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 16:46:16	<--	hkBst_ (~marijn@gentoo/developer/hkbst) has quit (Quit: Konversation terminated!)
2013-03-21 16:46:17	simpson	ab9rf: Well, no. For starters, classes are completely optional in PHP and you can write code that looks like Pascal without any extra effort.
2013-03-21 16:46:19	yezariaely	lol lens is like 42. The answer to everything, isn't it ;-)
2013-03-21 16:46:29	-->	morolin (~morolin@cantor.csl.cornell.edu) has joined #haskell
2013-03-21 16:46:33	<--	powergiant (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 256 seconds)
2013-03-21 16:46:39	yezariaely	but thanks!
2013-03-21 16:46:42	tdammers	yezariaely: yes, that is my understanding ;)
2013-03-21 16:46:43	ab9rf	tdammers: PHP is a melange of features from varius languages, lumped together by vaguely incompetent developers.
2013-03-21 16:46:44	srhb	yezariaely: Except "which library should I read to understand Haskell?"
2013-03-21 16:46:54	edwardk	yezariaely: to work with traversals of sam the elements in a list contained in a map you can just use traverse a couple of times
2013-03-21 16:47:00	<--	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has quit (Ping timeout: 258 seconds)
2013-03-21 16:47:02	tdammers	hehe
2013-03-21 16:47:04	ab9rf	simpson: i was only talking about PHP's object model, not about the language more broadly
2013-03-21 16:47:12	tdammers	mention lens, and edwardk wakes up
2013-03-21 16:47:14	edwardk	> traverse (traverse (+1)) $ fromList [1,[2,3,4]]
2013-03-21 16:47:16	lambdabot	  Not in scope: `fromList'
2013-03-21 16:47:16	lambdabot	 Perhaps you meant one of these:
2013-03-21 16:47:16	lambdabot	   `IM.fromList' ...
2013-03-21 16:47:20	edwardk	> traverse (traverse (+1)) $ M.fromList [1,[2,3,4]]
2013-03-21 16:47:22	lambdabot	  Couldn't match expected type `(k0, t0 (f0 b0))'
2013-03-21 16:47:22	lambdabot	             with actual ty...
2013-03-21 16:47:26	edwardk	> traverse (traverse (+1)) $ M.fromList [(1,[2,3,4])]
2013-03-21 16:47:27	lambdabot	  No instance for (GHC.Num.Num (f0 b0))
2013-03-21 16:47:28	lambdabot	   arising from a use of `e_111234'
2013-03-21 16:47:28	lambdabot	 ...
2013-03-21 16:47:29	ab9rf	simpson: the non-object aspects of PHP are probably most informed by perl
2013-03-21 16:47:29	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-03-21 16:47:43	Pods	Is any prospect mentor for gsoc here ??
2013-03-21 16:47:56	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 252 seconds)
2013-03-21 16:47:58	supki	> M.fromList [("hello", [1,2,3]), ("world", [4,5,6])] & mapped . mapped +~ 1
2013-03-21 16:48:00	lambdabot	  fromList [("hello",[2,3,4]),("world",[5,6,7])]
2013-03-21 16:48:04	tdammers	ab9rf, simpson: hence, half of misunderstood Perl with half of Java's OOP semantics tacked onto it
2013-03-21 16:48:25	tdammers	IIRC, PHP started as a collection of Perl scripts
2013-03-21 16:48:26	johnw	Java OOPS semantics
2013-03-21 16:48:33	srhb	PHP is probably off-topic unless there's a concrete Haskelly thing in there :-)
2013-03-21 16:48:38	ab9rf	tdammers: that's a fairly accurate description, although it fails to convey the proper level of revulsion that one should have :)
2013-03-21 16:48:43	jfischoff	Kinnison: I like to be able to save out partial results and have them restarted from there
2013-03-21 16:48:44	edwardk	well, here i don't have any effects, so
2013-03-21 16:48:47	edwardk	> fmap (map (+1)) $ M.fromList [(1,[2,3,4])]
2013-03-21 16:48:48	lambdabot	  fromList [(1,[3,4,5])]
2013-03-21 16:49:03	edwardk	and this is equivalent to the lens solution
2013-03-21 16:49:10	jfischoff	edwardk is here!
2013-03-21 16:49:19	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 16:49:21	Kinnison	jfischoff: Some kind of persistable continuations?
2013-03-21 16:49:22	johnw	edwardk!
2013-03-21 16:49:24	dcoutts	Pods: I'm sure there's several people, but you should say what you're interested in
2013-03-21 16:49:25	ab9rf	as to the payroll thingy, i'd think you'd want some way to represent a payroll scheme, and each employee would be assigned to a payroll scheme
2013-03-21 16:49:29	ion	jfischoff is here!
2013-03-21 16:49:31	edwardk	heya jfischoff, watching your maxent video as i head out the door
2013-03-21 16:49:34	edwardk	nice talk
2013-03-21 16:49:37	Pods	Like just now I was using ghci
2013-03-21 16:49:39	quchen	srhb: PHP is OT. Reason:  is faster than C++, more concise than Perl, more regular than Python, more flexible than Ruby, more typeful than C#, more robust than Java, and has absolutely nothing in common with PHP. (By Audrey Tang)
2013-03-21 16:49:44	ion	What video?
2013-03-21 16:49:44	ab9rf	actually embedding the payroll logic into the employee is a bad move
2013-03-21 16:49:48	yezariaely	edwardk: thx, got it.
2013-03-21 16:49:53	<--	madjestic (~madjestic@178.230.54.14) has quit (Ping timeout: 252 seconds)
2013-03-21 16:50:04	Pods	and it seems to me that it is not as intuitive for haskell as say python's interpreter  is
2013-03-21 16:50:07	jfischoff	edwardk: I'm thinking of it as a work in progress …  the whole talking thing
2013-03-21 16:50:13	ab9rf	the payroll scheme assigned to an employee can change over time, either as the employee's status changes or as the company changes payroll schemes
2013-03-21 16:50:18	jfischoff	ion: http://www.reddit.com/r/haskell/comments/1aqem6/bahaskell_talk_on_maximum_entropy/
2013-03-21 16:50:19	Pods	So i was wondering if we have a project for gsoc in that domain
2013-03-21 16:50:21	ion	jfischoff: Thanks
2013-03-21 16:50:24	ab9rf	so making it an inherent property of the employee is doubly bad
2013-03-21 16:50:51	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-21 16:51:19	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-21 16:51:32	dcoutts	Pods: plausibly. So there's basically two approaches: 1. think of a cool project yourself and find someone who's interested to mentor you, 2. pick one of the projects that a mentor has already indicated they're interested in doing
2013-03-21 16:51:33	<--	anRch (~markmilli@pool-108-20-103-241.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-03-21 16:51:40	dcoutts	Pods: the latter is usually easier
2013-03-21 16:52:10	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-03-21 16:52:15	Pods	dcoutts : I totally agree, so i merely wondering if a project of this sort is available .
2013-03-21 16:52:16	-->	bitonic (~user@dyn1216-32.wlan.ic.ac.uk) has joined #haskell
2013-03-21 16:52:51	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-21 16:52:55	Pods	Is there a list of any possible projects. I wanted to play around with some code and do some bug fixing
2013-03-21 16:52:58	dcoutts	Pods: so our org's trac hasn't been updated yet for 2013, but you can see the old ones http://hackage.haskell.org/trac/summer-of-code/
2013-03-21 16:53:08	jfischoff	Kinnison: I think that is probably closer to what I want, in the sense that I am looking for the right abstraction for restartable processes…and a library to help me work with them
2013-03-21 16:53:13	Kinnison	Pods: In what way is ghci less intuitive (for a haskell programmer) than python's REPL is (for a python programmer) ?
2013-03-21 16:53:15	ab9rf	beaky: i was working at a cmpany when they switched from paying payroll on friday to paying it on tuesday.  think about how your class-based system will cope with that.
2013-03-21 16:53:42	-->	giogadi (98170eeb@gateway/web/freenode/ip.152.23.14.235) has joined #haskell
2013-03-21 16:53:54	Kinnison	jfischoff: Seems to me that some kind of persistable continuation is the obvious approach.  Of course, obvious does not always equal easy :-(
2013-03-21 16:54:17	jfischoff	Kinnison: or natural
2013-03-21 16:54:42	Kinnison	jfischoff: I guess.  I need to play with the Cont monad at some point
2013-03-21 16:54:46	<--	schlicht_ (~fl@lutz.uebb.tu-berlin.de) has quit (Ping timeout: 256 seconds)
2013-03-21 16:54:52	Kinnison	jfischoff: some combination of Cont and State and some magic might be a basis for you
2013-03-21 16:54:52	jfischoff	it could be awkward … but I think it is the right direction
2013-03-21 16:54:53	Pods	Kinnison : A very basic example will be like , in writing a haskell program I do not have to make a let x = [1..] statement , it is initialized directly , while in ghci I would need to follow the "let syntax"
2013-03-21 16:55:06	jfischoff	Kinnison: yeah I think that is good point
2013-03-21 16:55:09	Pods	Python on the other hand doesnt need a seperate documentation for its interpretor
2013-03-21 16:55:28	Kinnison	Pods: Hmm, I guess unless you realise ghci is effectively in a 'do' yeah, that could be confusing
2013-03-21 16:55:40	 *	Kinnison wonders if changing the default prompt to 'do >' might be enough of a hint
2013-03-21 16:55:56	Pods	yes , might be better off for a beginner
2013-03-21 16:56:03	<--	hallski (~hallski@80.239.169.202) has quit (Quit: Lost terminal)
2013-03-21 16:56:04	johnw	Kinnison: that's not a bad idea.  I use ">>> " so I can copy/paste into a docstring and use doctest.
2013-03-21 16:56:18	timtom	Kinnison: full ack
2013-03-21 16:56:24	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-03-21 16:56:28	<--	dinox (~dinox@nietzsche.jforberg.se) has quit (Read error: Connection reset by peer)
2013-03-21 16:56:34	<--	permagreen (~donovan@204-195-27-175.wavecable.com) has quit (Read error: Connection reset by peer)
2013-03-21 16:56:37	beaky	so I shouldn't use OOP to implement a payroll system?
2013-03-21 16:56:46	simpson	beaky: What does that even *mean*?
2013-03-21 16:56:48	donri	or just make let-less bindings work as let?
2013-03-21 16:56:52	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-21 16:57:07	Kinnison	donri: I think that'd be more confusing (for me at least)
2013-03-21 16:57:14	ab9rf	beaky: you shouldn't use that object model
2013-03-21 16:57:24	Kinnison	donri: esp. once you start using foo <- bar in the repl
2013-03-21 16:57:29	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Ping timeout: 255 seconds)
2013-03-21 16:57:38	ab9rf	beaky: youc an use OOP, but you probably shouldn't use classes to represent differences in employee payroll status.
2013-03-21 16:57:43	beaky	ah
2013-03-21 16:57:43	donri	Kinnison: you can already do other top-level declarations and they overwrite old ones
2013-03-21 16:57:47	ab9rf	beaky: or at least not use inheritance for that
2013-03-21 16:57:47	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-03-21 16:57:52	ab9rf	beaky: use composition instead
2013-03-21 16:58:10	ab9rf	beaky: this is offtopic for #haskell, though
2013-03-21 16:58:58	Kinnison	donri: I meant that once you use foo <- bar syntax in ghci, the fact that you say 'let foo = bar' makes sense, and confusing the issue with allowing 'foo = bar' in ghci would (I think) cause more problems for people learning do sugar in the first place.
2013-03-21 16:59:09	<--	Loggs (322aecbd@gateway/web/freenode/ip.50.42.236.189) has quit (Quit: Page closed)
2013-03-21 16:59:13	beaky	hmm maybe if I used haskell I could design a more effective payroll system
2013-03-21 16:59:32	beaky	one that is functional
2013-03-21 16:59:59	-->	lambdafoo (5eae90b2@gateway/web/freenode/ip.94.174.144.178) has joined #haskell
2013-03-21 17:00:02	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 258 seconds)
2013-03-21 17:00:10	Pods	Kinnison : what would be the conceptual difference in saying foo < - bar and let foo = bar ??
2013-03-21 17:00:23	Kinnison	Pods: foo <- bar involves unwrapping the IOness
2013-03-21 17:00:55	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-21 17:00:59	tac	It's the difference between unwrapping a delicious candy bar and being the incarnated act of unwrapping a delicious candy bar
2013-03-21 17:01:19	Chousuke	let foo = bar literally means bar equals foo.
2013-03-21 17:01:32	lambdafoo	When an data structure is using records e.g. data Foo = Foo { a :: Int } , how do I refer to a explicitly in a function passed a Foo parameter. i.e. bar x@Foo{..} = a * 2
2013-03-21 17:01:43	johnw	i would say it means that foo is another name for bar
2013-03-21 17:01:44	johnw	"equality" is a slippery notion
2013-03-21 17:01:51	lambdafoo	how do I refer to a in the function bar ?
2013-03-21 17:01:58	timtom	whereas foo <- bar is desugared into bind and function application
2013-03-21 17:01:58	ab9rf	lambdafoo: bar Foo a = a * 2
2013-03-21 17:02:11	ab9rf	lambdafoo: sorry, need parens
2013-03-21 17:02:15	-->	Fuuzetsu (~Shana@limol.bath.ac.uk) has joined #haskell
2013-03-21 17:02:15	<--	Fuuzetsu (~Shana@limol.bath.ac.uk) has quit (Changing host)
2013-03-21 17:02:15	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-21 17:02:17	ab9rf	lambdafoo: bar (Foo a) = a * 2
2013-03-21 17:02:20	-->	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has joined #haskell
2013-03-21 17:02:25	ski	lambdafoo : `bar Foo {a=blah} = blah*2' ?
2013-03-21 17:02:26	johnw	lambdafoo: since you're using RecordWildcards with {..}, just use "a"
2013-03-21 17:02:32	timtom	bar Foo{a=value} = value * 2
2013-03-21 17:02:38	ab9rf	lambdafoo: you can also do bar Foo {a=x} = x*2
2013-03-21 17:02:39	ski	also s/a=blah/a/ with punning
2013-03-21 17:02:41	johnw	bar Foo {..} = a * 2
2013-03-21 17:02:41	Chousuke	johnw: well, I suppose that's right. Though I don't think it is possible for bar not to equal foo if they're just different names for the same thing
2013-03-21 17:02:45	lambdafoo	ah! I don't have RecoveryWildcards turned on.
2013-03-21 17:02:53	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-21 17:03:05	ab9rf	recovery?
2013-03-21 17:03:06	danr	recovery wildcards?
2013-03-21 17:03:06	-->	soulofpeace (~soulofpea@cm62.gamma164.maxonline.com.sg) has joined #haskell
2013-03-21 17:03:17	lambdafoo	RecordWildcards sorry.
2013-03-21 17:03:27	 *	ski recovers some wildcards
2013-03-21 17:03:27	johnw	Chousuke: i think you're right, it's just that internally, there aren't two values, so that it's like saying that a thing is equal to itself
2013-03-21 17:03:31	danr	ah. I thought I had missed an interesting-sounding extension
2013-03-21 17:03:44	donri	Kinnison: so we should remove support for data declarations etc then? :)
2013-03-21 17:03:47	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 17:03:50	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-21 17:04:23	Kinnison	donri: Mmm, I get your point
2013-03-21 17:04:25	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 256 seconds)
2013-03-21 17:04:30	<--	giogadi (98170eeb@gateway/web/freenode/ip.152.23.14.235) has quit (Quit: Page closed)
2013-03-21 17:04:33	Kinnison	donri: not sure then.
2013-03-21 17:04:34	<--	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has quit (Remote host closed the connection)
2013-03-21 17:05:03	Pods	Chousuke : you mean they are the same contrary to all the above explanations ??
2013-03-21 17:05:16	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-21 17:05:24	ab9rf	buh
2013-03-21 17:05:26	-->	Taneb (~nathan@host-2-97-152-171.as13285.net) has joined #haskell
2013-03-21 17:05:26	Chousuke	Pods: foo <- bar is something completely different.
2013-03-21 17:05:41	donri	Kinnison: i think it's far more common that people type "x = y" and get confused at the error, than people typing "import" and getting confused at it working
2013-03-21 17:05:48	Pods	sorry there was suddenly too much to process
2013-03-21 17:06:08	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-21 17:06:17	ab9rf	donri: being confused by unexpectedly useful behavior is a serious problem :)
2013-03-21 17:06:23	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-21 17:06:50	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Operation timed out)
2013-03-21 17:06:54	donri	Kinnison: there are also other dissimilarities to 'do' in ghci, for example you can evaluate pure expressions without a 'return'
2013-03-21 17:07:04	-->	phischu (~pschuster@dslb-088-077-200-140.pools.arcor-ip.net) has joined #haskell
2013-03-21 17:07:49	Pods	Kinnison : what do you mean by IOness ??
2013-03-21 17:08:05	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-21 17:08:18	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 256 seconds)
2013-03-21 17:09:22	monochrom	prince : princess :: ion :: ioness
2013-03-21 17:09:36	 *	ion 
2013-03-21 17:09:39	Chousuke	:P
2013-03-21 17:09:43	-->	pseudolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 17:09:58	timtom	:D
2013-03-21 17:10:00	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 256 seconds)
2013-03-21 17:10:04	-->	fmapE (~fmapE@2001:18e8:2:10f4:5552:b7d7:b9e:50da) has joined #haskell
2013-03-21 17:10:34	timtom	her majesty, the ioness of glasgow
2013-03-21 17:10:35	Kinnison	donri: mmm
2013-03-21 17:10:45	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-21 17:10:46	Pods	oh :D
2013-03-21 17:10:51	Pods	I get it now :D
2013-03-21 17:11:00	-->	Beetle_jada (~jadatkins@host109-151-136-130.range109-151.btcentralplus.com) has joined #haskell
2013-03-21 17:11:29	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-21 17:11:34	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 17:11:53	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-21 17:12:06	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 17:12:16	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Ping timeout: 256 seconds)
2013-03-21 17:12:20	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-21 17:13:07	-->	pwang_ (~pwang@unaffiliated/parahsailin) has joined #haskell
2013-03-21 17:13:17	Beetle_jada	hello people
2013-03-21 17:13:58	Taneb	Hey, Beetle_jada
2013-03-21 17:14:10	Beetle_jada	:)
2013-03-21 17:14:11	-->	Sculptor (~Sculptor@89.110.220.38) has joined #haskell
2013-03-21 17:14:12	<--	Sculptor (~Sculptor@89.110.220.38) has quit (Changing host)
2013-03-21 17:14:12	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 17:15:12	Beetle_jada	what is the best way for finding out how to use nonstandard packages on hackage? (such as http://hackage.haskell.org/package/indents-0.3.3)
2013-03-21 17:15:25	Beetle_jada	the haddock for it is quite brief
2013-03-21 17:15:27	-->	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has joined #haskell
2013-03-21 17:15:27	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-21 17:15:42	monochrom	ask the authors
2013-03-21 17:15:47	<--	snowylike2 (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-21 17:16:00	<--	ParahSail1n (~pwang@unaffiliated/parahsailin) has quit (Ping timeout: 256 seconds)
2013-03-21 17:16:11	monochrom	switch to a package that you understand
2013-03-21 17:16:42	typoclass	Beetle_jada: often, reading the source is helpful. you can click the 'source' link on the right hand side
2013-03-21 17:16:43	Beetle_jada	i could peruse these examples of people using it i suppose https://github.com/search?q=import+Text.Parsec.Indent&ref=simplesearch&type=Code
2013-03-21 17:16:56	Beetle_jada	typoclass: yes, i tried that. it was a little bit
2013-03-21 17:17:21	typoclass	Beetle_jada: oh, i like the idea with the github search, that's clever
2013-03-21 17:17:36	Beetle_jada	i also created a question on stackoverflow http://stackoverflow.com/q/15549050/952580
2013-03-21 17:18:04	Beetle_jada	i could email my stackoverflow question to the author
2013-03-21 17:18:16	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Quit: Page closed)
2013-03-21 17:18:16	Beetle_jada	or i could just peruse that stuff on github
2013-03-21 17:18:29	beaky	if CLRS is the book for imperative algorithms and data structures, is there a book for purely-functional algorithms and dat astructures?
2013-03-21 17:18:34	ab9rf	wee
2013-03-21 17:18:35	Beetle_jada	i think i will probably throw my brain at the stuff on github and see if it breaks
2013-03-21 17:18:43	ab9rf	don't break github :)
2013-03-21 17:18:50	Beetle_jada	no, breaks my brain i mean
2013-03-21 17:18:51	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 256 seconds)
2013-03-21 17:18:52	-->	pwang__ (~pwang@unaffiliated/parahsailin) has joined #haskell
2013-03-21 17:18:56	ab9rf	oh, we don't care about that
2013-03-21 17:19:01	Beetle_jada	:D
2013-03-21 17:19:05	Pods	So if a and b are 2 functions and i say a <- b means all the arguments passed to a will be same as b and the retuen values too will be same even if the function in itself is different right ??
2013-03-21 17:19:17	ab9rf	hm, the ncurses bindings dump core for me
2013-03-21 17:19:43	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-21 17:19:51	Beetle_jada	Pods: that doesn't look right but perhaps i missed something from earlier
2013-03-21 17:19:55	monochrom	if a and b are 2 functions, then "a <- b" is unlikely to make sense
2013-03-21 17:19:57	fizbin	Pods: Um, you've gotten confused. '<-' means slightly different things in different contexts. Where are you seeing it?
2013-03-21 17:20:12	-->	Eliel (~jojkaart@dyn79-415.yok.fi) has joined #haskell
2013-03-21 17:20:22	donri	@where okasaki -- beaky
2013-03-21 17:20:22	lambdabot	http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf
2013-03-21 17:20:55	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-21 17:21:06	Pods	fizbin : I am basically reading on some documentations for ghci and trying to make sense of the different usages of foo = bar and foo <- bar
2013-03-21 17:21:40	Beetle_jada	beaky: the two books for haskell that i like the best are: (book 1) http://learnyouahaskell.com/ and (book 2) http://book.realworldhaskell.org/ (in that order)
2013-03-21 17:21:47	<--	pwang_ (~pwang@unaffiliated/parahsailin) has quit (Ping timeout: 240 seconds)
2013-03-21 17:21:47	ab9rf	<- has a number of different semantic meanings
2013-03-21 17:21:50	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-21 17:21:56	ab9rf	= is pretty consistent though
2013-03-21 17:22:11	fizbin	That is, '<-' in a list comprehension means something subtly different from '<-' in a "do" block.
2013-03-21 17:22:12	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-21 17:22:12	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-21 17:22:18	Pods	Beetle_jada : it was in reference to a statement made earlier saying that while foo = bar means equality , foo <- bar means transfer of IOness , where IOness for me was interpretable in the context of functions
2013-03-21 17:22:21	beaky	ah thanks
2013-03-21 17:22:27	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 17:22:41	Pods	fizbin : precisely what was confusing me
2013-03-21 17:22:52	fizbin	Pods: Ah, you're talking then about what '<-' means inside a "do" block.
2013-03-21 17:22:57	Pods	yes
2013-03-21 17:23:01	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-21 17:23:09	monochrom	you can type "x <- getLine" into ghci. getLine is not a function. and x will not be either.
2013-03-21 17:23:09	hiptobecubic	I don't really know how to describe '<-'. It's a just a *feeling* :)
2013-03-21 17:23:25	<--	morazow (~morazow@gsd116.gsd.inesc-id.pt) has quit (Ping timeout: 258 seconds)
2013-03-21 17:23:40	Mortchek	a <- b inside a do block binds the "result" of b to a. Whatever "result" means for the given monad
2013-03-21 17:23:52	fizbin	Okay, inside a "do" block, 'x <- y' means roughly 'y >>= \x ->'
2013-03-21 17:24:01	timtom	why does <- have a different meaning in a list comprehension than in a do block?
2013-03-21 17:24:09	<--	kerrick (~kerrick@c-69-181-23-69.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-21 17:24:11	donri	timtom: it dousn't
2013-03-21 17:24:15	Mortchek	So if you say line <- getLine, then line will hold the result of carrying out the getLine action
2013-03-21 17:24:16	Pods	^ + 1 timtom
2013-03-21 17:24:18	hiptobecubic	fizbin, not roughly. precisely, i believe
2013-03-21 17:24:29	-->	lrojas (~lrojas@mail.rogue-research.com) has joined #haskell
2013-03-21 17:24:31	latro`a	up to pattern matching
2013-03-21 17:24:43	-->	b__ (~basdirks@5352A1E5.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-03-21 17:24:50	latro`a	the behavior under pattern matching is slightly different, because fail is terrible
2013-03-21 17:24:52	lrojas	hi all, i have a question regarding the ghci
2013-03-21 17:24:58	fumieval	Which library should I use to play sounds? ALUT is just crashing.
2013-03-21 17:25:09	timtom	latro`a: could you provide an example?
2013-03-21 17:25:09	lrojas	here is what i typed
2013-03-21 17:25:13	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-21 17:25:16	lrojas	h> [2,4..20]
2013-03-21 17:25:16	lrojas	[2,4,6,8,10,12,14,16,18,20]
2013-03-21 17:25:17	lrojas	h> [4,2..12]
2013-03-21 17:25:18	lrojas	[]
2013-03-21 17:25:20	<--	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has quit (Ping timeout: 258 seconds)
2013-03-21 17:25:24	ab9rf	heh
2013-03-21 17:25:24	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Ping timeout: 264 seconds)
2013-03-21 17:25:27	monochrom	the safest way to explain how "<-" means different things is referring to pattern guards, f x | Nothing <- listToMaybe x = ...
2013-03-21 17:25:29	lrojas	why does the second one fails?
2013-03-21 17:25:34	ab9rf	lrojas: it doesn't fil
2013-03-21 17:25:37	ab9rf	fail
2013-03-21 17:25:38	ski	> [a + b | a <- [0,1,2] , b <- [300,400]]
2013-03-21 17:25:39	lambdabot	  [300,400,301,401,302,402]
2013-03-21 17:25:40	ski	> do a <- [0,1,2]; b <- [300,400]; return (a + b)
2013-03-21 17:25:42	lambdabot	  [300,400,301,401,302,402]
2013-03-21 17:25:45	Iceland_jack	lrojas: Counting from 4, 2… up to 12?
2013-03-21 17:25:46	ab9rf	lrojas: 12 is greater than 2
2013-03-21 17:25:49	latro`a	> Nothing >>= (\(Just x) -> undefined)
2013-03-21 17:25:51	lambdabot	  Nothing
2013-03-21 17:25:53	latro`a	er
2013-03-21 17:26:04	ab9rf	you asked it to start at 4 and count downward by 2s until it got to 12
2013-03-21 17:26:14	latro`a	> (Just []) >>= (\(Just (x:xs)) -> x)
2013-03-21 17:26:14	fizbin	timtom: Well, unless you're using the relevant syntax extension, '<-' in a list comprehension is limited to pulling from lists. In a do block, it can "pull" from any Monad.
2013-03-21 17:26:16	lambdabot	  Couldn't match expected type `[a0]'
2013-03-21 17:26:16	lambdabot	             with actual type `Data.May...
2013-03-21 17:26:17	lrojas	ab9rf: wait, what? 4 is the step no? and starst at 2
2013-03-21 17:26:20	ab9rf	that's not going to happen, so it returned []
2013-03-21 17:26:26	timtom	yes
2013-03-21 17:26:27	geekosaur	no, backwards
2013-03-21 17:26:31	geekosaur	first, next .. last
2013-03-21 17:26:33	latro`a	:|, one more time
2013-03-21 17:26:36	Iceland_jack	> [4, 2 .. -12]
2013-03-21 17:26:37	timtom	but a list comprehension is just sugar over do blocks (or so i thought)
2013-03-21 17:26:38	lambdabot	  [4,2,0,-2,-4,-6,-8,-10,-12]
2013-03-21 17:26:40	geekosaur	not step, not, *next*
2013-03-21 17:26:43	latro`a	> (Just []) >>= (\(x:xs)) -> x)
2013-03-21 17:26:43	-->	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has joined #haskell
2013-03-21 17:26:43	ab9rf	lrojas: no, -2 is the step, because the first element was 4 and the second was 2
2013-03-21 17:26:45	lambdabot	  <hint>:1:23: parse error on input `)'
2013-03-21 17:26:48	geekosaur	s/not,/note,/
2013-03-21 17:26:54	<--	squidz (~albert@141.84.69.76) has quit (Read error: Operation timed out)
2013-03-21 17:26:56	timtom	so the semantics of <- would be identical
2013-03-21 17:27:03	latro`a	> (Just []) >>= (\(x:xs) -> x)
2013-03-21 17:27:05	lambdabot	  *Exception: <interactive>:3:16-27: Non-exhaustive patterns in lambda
2013-03-21 17:27:07	latro`a	there we go
2013-03-21 17:27:13	<--	chrisdotcode_ (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 17:27:14	timtom	just that list comprehensions only operate within the list monad
2013-03-21 17:27:15	ab9rf	fizbin: at least it is now.  you used to be able to use any monad n a list comprehension
2013-03-21 17:27:16	fizbin	timtom: Okay, fair point, but it's only sugar over []-based do blocks.
2013-03-21 17:27:21	donri	timtom: the semantics of <- for the list monad and list comprehension is the same
2013-03-21 17:27:24	geekosaur	it might help to know that that gets translated into a call to enumFromThenTo
2013-03-21 17:27:38	monochrom	don't forget monad comprehension. GHC has that.
2013-03-21 17:27:40	fizbin	ab9rf: There's a syntax extension you can pull in these days if you still want that.
2013-03-21 17:27:43	donri	timtom: the semantics of <- in do notation is not identical to >>=, though
2013-03-21 17:27:44	ski	> [a + b | a <- [0,1,2] | b <- [300,400]]
2013-03-21 17:27:46	latro`a	> (x:xs) <- Just []; return x
2013-03-21 17:27:46	lambdabot	  [300,401]
2013-03-21 17:27:47	lambdabot	  <hint>:1:18: parse error on input `;'
2013-03-21 17:27:56	latro`a	> do (x:xs) <- Just []; return x
2013-03-21 17:27:56	lrojas	ab9rf: ok, so what would be the correct expression for numbers from 2 to 12 in 4 steps increments...
2013-03-21 17:27:57	lambdabot	  Nothing
2013-03-21 17:27:59	timtom	donri: tell me more! :)
2013-03-21 17:28:00	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 17:28:01	latro`a	finally
2013-03-21 17:28:02	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-21 17:28:09	`ramses	don't you need a MonadPlus for a general monad comprehension?
2013-03-21 17:28:12	donri	timtom: i think latro`a has been telling you about it
2013-03-21 17:28:13	ski	@undo do Just x <- blah; bleh x
2013-03-21 17:28:13	lambdabot	blah >>= \ a -> case a of { Just x -> bleh x; _ -> fail ""}
2013-03-21 17:28:22	latro`a	(Just []) >>= (\(x:xs) -> x) errors; do (x:xs) <- Just []; return x calls fail
2013-03-21 17:28:29	fizbin	I have a feeling that none of this answers Pods's question.
2013-03-21 17:28:32	ski	`ramses : well, really `MonadZero' or `MonadFail', but ..
2013-03-21 17:28:33	ab9rf	lrojas: [2,6..12]
2013-03-21 17:28:50	`ramses	ski: you need to be able to write guard, right?
2013-03-21 17:28:51	ab9rf	> [2,6..12]
2013-03-21 17:28:53	lambdabot	  [2,6,10]
2013-03-21 17:28:58	donri	`ramses: yes
2013-03-21 17:29:01	lrojas	ps, i just started to read Learn me a haskell for greater good
2013-03-21 17:29:18	monochrom	that is good
2013-03-21 17:29:20	-->	argiopeweb (~elliot@155.31.73.100) has joined #haskell
2013-03-21 17:29:24	<--	overflo (~Adium@66.97.133.7) has quit (Quit: Leaving.)
2013-03-21 17:29:24	donri	`ramses: but it's only required by MonadComprehensions if you actually use guards
2013-03-21 17:29:26	timtom	thanks guys, very interesting :)
2013-03-21 17:29:29	donri	IIRC
2013-03-21 17:29:30	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-21 17:29:53	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-21 17:29:58	`ramses	donri: is the compiler smart enough to check that?
2013-03-21 17:30:00	johnw	Learn Me a Haskell for the Greatest Good Possible!!!
2013-03-21 17:30:29	fumieval	http://english.stackexchange.com/questions/165/what-does-great-good-mean-in-tutorial-title-learn-you-a-haskell-for-great-goo
2013-03-21 17:30:31	Pods	Mortcheck: yes this example was helpful, thanks a lot :)
2013-03-21 17:30:34	tlaine	Teach me a haskell
2013-03-21 17:30:36	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 17:30:44	donri	`ramses: well it just rewrites it to the monad operators and combinators, then type inference is enough to figure that out
2013-03-21 17:30:45	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Client Quit)
2013-03-21 17:30:46	<--	Xaratas (~UserNick@brln-4dbc1f7e.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-21 17:30:58	monochrom	do { Just x <- m; more } = m >>= \v -> case v of Just x -> more; _ -> fail "pattern matching error message here"
2013-03-21 17:31:18	donri	`ramses: if you don't write any guard, it won't rewrite it to call 'guard', and MonadPlus isn't inferred
2013-03-21 17:31:49	Pods	just a side comment: Out of all the places I have done any open source contributions and communities I have interacted with , haskell so far is becoming my best experience :D, everyone here is great :D
2013-03-21 17:31:57	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 17:32:07	donri	@undo [ x | foo ]
2013-03-21 17:32:08	lambdabot	if foo then [x] else []
2013-03-21 17:32:09	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-21 17:32:13	donri	heh
2013-03-21 17:32:14	Kinnison	Okay everyone, you can take the gloves off, Pods things we're great.
2013-03-21 17:32:21	<--	overflo (~Adium@66.97.133.7) has quit (Read error: Connection reset by peer)
2013-03-21 17:32:25	ski	donri : that's occasionally handy to use
2013-03-21 17:32:29	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 17:32:29	`ramses	donri: ah, cool :) I'll probably never use it but it's good to know
2013-03-21 17:32:42	donri	ski: yep
2013-03-21 17:32:44	johnw	Pods: thanks!
2013-03-21 17:32:51	donri	ski: i was hoping for a translation to MonadPlus though
2013-03-21 17:33:01	ski	ah, i see
2013-03-21 17:33:04	johnw	Pods: you clearly have yet to ask us to explain monads to you, though
2013-03-21 17:33:05	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 17:33:05	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-21 17:33:10	ski	@undo [()|let]
2013-03-21 17:33:10	lambdabot	let { } in [()]
2013-03-21 17:33:23	monochrom	there is no monad or cabal
2013-03-21 17:33:24	donri	@undo [ x | x <- xs, foo ]
2013-03-21 17:33:24	lambdabot	concatMap (\ x -> if foo then [x] else []) xs
2013-03-21 17:33:28	donri	:(
2013-03-21 17:33:52	fizbin	Okay, then: Can someone explain WTF the point of arrows is?
2013-03-21 17:33:56	timtom	donri: neat
2013-03-21 17:34:01	Pods	johnw : i am getting there, I am trying to do my homework before I do the interogation :D
2013-03-21 17:34:04	johnw	fizbin: they abstract functions
2013-03-21 17:34:10	fumieval	> take 15 $ nubBy (((==0).).mod) $ 2 : [3, 5..]
2013-03-21 17:34:13	lambdabot	  [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]
2013-03-21 17:34:19	Kinnison	primes!
2013-03-21 17:34:20	fizbin	As I see them (HXT), they just seem like extra cognitive baggage with no benefit.
2013-03-21 17:34:25	ski	donri : as per <http://www.haskell.org/onlinereport/haskell2010/haskellch3.html#x8-420003.11>
2013-03-21 17:34:26	<--	overflo (~Adium@66.97.133.7) has quit (Client Quit)
2013-03-21 17:34:41	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-21 17:34:41	monochrom	arrow is a bit more general than monad, and more special than applicative
2013-03-21 17:34:42	<--	tim (~tim@159.182.183.6) has quit (Disconnected by services)
2013-03-21 17:34:48	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-21 17:34:59	monochrom	HXT is not a good use of arrow
2013-03-21 17:35:05	-->	tim (~tim@159.182.183.6) has joined #haskell
2013-03-21 17:35:07	ski	the original motivation of arrows was to be able to do static optimization
2013-03-21 17:35:08	fizbin	johnw: Right, so if I were wanting to prove theorems I suppose I might want to work with arrows instead of functions to make my proofs more general. But why use them in a library?
2013-03-21 17:35:15	donri	ski: i was hoping @undo knew about monad comprehensions is all
2013-03-21 17:35:32	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 17:35:39	monochrom	reactive programming and modeling circuits are good uses of arrow
2013-03-21 17:35:43	applicative	fizbin: why are you interested in arrows?
2013-03-21 17:35:48	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Client Quit)
2013-03-21 17:35:51	donri	fizbin: hxt is basically a kleisli arrow so it could easily be monadic instead
2013-03-21 17:35:58	fizbin	HXT, because of HXT picklers.
2013-03-21 17:36:02	ab9rf	yeah, the reactive programming stuff i've read is nicely expressive using arrows
2013-03-21 17:36:05	<--	yacks (~yacks@180.151.36.168) has quit (Quit: Leaving)
2013-03-21 17:36:09	applicative	fizbin: there are some cool uses but I think they haven't become must-know standard haskell
2013-03-21 17:36:21	applicative	damn hxt
2013-03-21 17:36:36	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-21 17:36:36	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 17:36:48	johnw	fizbin: basically, Arrow is just a step up from a regular Category
2013-03-21 17:36:49	donri	fizbin: but when you don't have ArrowApply you could usually get away with applicative+category just as well
2013-03-21 17:36:50	monochrom	I like HXT and I understand how to use it. but I agree it's better off monadic
2013-03-21 17:37:00	johnw	fizbin: the extra "step" it's providing is the ability to lift ordinary functions into the Arrow
2013-03-21 17:37:02	-->	Maarten__ (~maarten@87.208.219.89) has joined #haskell
2013-03-21 17:37:13	fizbin	At this point, hxt being based on arrows just seems to me that I need to wrap all calls to HXT stuff in some sort of run* call for no apparent reason.
2013-03-21 17:37:17	johnw	because Category already generalize the concept of composing functions
2013-03-21 17:37:18	fumieval	@where profunctors
2013-03-21 17:37:18	lambdabot	I know nothing about profunctors.
2013-03-21 17:37:28	<--	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 17:37:32	donri	fizbin: you'd need that with a monad too
2013-03-21 17:37:42	ski	fumieval : apparently the new name for difunctors
2013-03-21 17:37:55	donri	fizbin: but normally you just run a complete arrow once, not every little arrow individually. are you using it wrong?
2013-03-21 17:37:55	-->	GooyO (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has joined #haskell
2013-03-21 17:38:19	johnw	Pods: I was reading about monads last night, and came across this little nugget: The Monad interface extends a type 'm' such that two functions, f : a -> m b, and g : b -> m c, can be composed without erasing the type in the middle (i.e., using some z : m b -> b).
2013-03-21 17:38:55	fizbin	donri: I have no idea. I'm not actually using it yet because trying to get my types right makes no sense.
2013-03-21 17:39:03	`ramses	johnw: that's a nice point of view
2013-03-21 17:39:10	timtom	johnw: :)
2013-03-21 17:39:13	monochrom	fizbin: good account of the relations between applicative, arrow, monad: http://homepages.inf.ed.ac.uk/wadler/topics/monads.html#arrows-and-idioms
2013-03-21 17:39:14	 *	ski . o O ( <http://lambdalounge.org.uk/assets/86/c4b5be1635dd1206c24b1e821dd8e4/doing-it-wrong.jpg> )
2013-03-21 17:39:17	fizbin	johnw:  z looks very much like an unlifted join.
2013-03-21 17:39:24	armlesshobo	johnw: wow, didn't think of it like that.
2013-03-21 17:39:51	ab9rf	johnw: hm.
2013-03-21 17:40:04	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 17:40:10	`ramses	johnw: although the omission of any reference to the fact that the ms are "merged" or "combined" makes it seem a bit too weak
2013-03-21 17:40:12	fumieval	ski: It's easy to confuse bifunctors and difunctors
2013-03-21 17:40:19	donri	fizbin: there are alternatives for xml pickling btw, like hexpat-pickle (duno if good or not)
2013-03-21 17:40:39	Pods	johnw: so the z there will be the extra data refered to in this definition " The essence of monad is thus separation of composition timeline from the composed computation's execution timeline, as well as the ability of computation to implicitly carry extra data, as pertaining to the computation itself, in addition to its one (hence the name) output, that it will produce when run (or queried, or called upon)."
2013-03-21 17:40:42	HugoDaniel	hi
2013-03-21 17:40:44	armlesshobo	`ramses: i think the 'z' part is what makes up for that.
2013-03-21 17:40:51	HugoDaniel	how can i transform a Text so that it becomes URL safe ?
2013-03-21 17:40:51	<--	adlan_ (~adlan@210.195.12.15) has quit (Remote host closed the connection)
2013-03-21 17:41:05	ski	fumieval : really ?
2013-03-21 17:41:18	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-21 17:41:22	ab9rf	fumieval: especially if you're dyslexic.
2013-03-21 17:41:43	-->	heruur (~tvh@6-149-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-21 17:41:50	-->	Itkovian (~Itkovian@188.188.67.112) has joined #haskell
2013-03-21 17:41:51	<--	OyooG (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has quit (Ping timeout: 276 seconds)
2013-03-21 17:41:52	<--	edtsech (~edtsech@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-21 17:42:01	`ramses	armlesshobo: how so? The described function could also just discard the context of the first monadic function, couldn't it?
2013-03-21 17:42:39	monochrom	I disagree with "the essence of monad is separation of composition time from execution time"
2013-03-21 17:42:48	fumieval	:P
2013-03-21 17:43:09	johnw	`ramses: when you work through how Monad makes this happen, you find that Monad must provide an operation which collapses m (m a) -> m a, and this is where the real magic happens.  (And when you look at Monads from the point of view of functor adjunctions, this one operation is in fact all that Monad brings to the table).  This operation is just fused into >>= in such a way that it may not seem obvious at first.
2013-03-21 17:43:10	Pods	monochrom : why is that ??
2013-03-21 17:43:12	fizbin	See, I'm not sure that it's proper to say that a monad composes through a function z: m b -> b, but rather that it composes through z: m m b -> m b
2013-03-21 17:43:15	monochrom	whenever you have laziness, you already have that. no monad necessary.
2013-03-21 17:43:17	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 17:43:18	 *	ski isn't sure what "execution time" means in this context
2013-03-21 17:43:23	sipa	monochrom: i think that description is valid for IO (independent of whether that is a monad or not)
2013-03-21 17:43:35	ab9rf	yeah, that doesn't seem to apply to either the Maybe monad or the list monad...
2013-03-21 17:43:42	ski	(because what monochrom said)
2013-03-21 17:43:46	monochrom	and anally speaking, you always have that, laziness or not
2013-03-21 17:43:47	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-21 17:43:51	fizbin	But then what you've got is that a Monad is an Applicative with "join", which is one of the known ways to talk about Monad.
2013-03-21 17:43:59	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-21 17:44:06	`ramses	johnw: I know that, but the description you gave, does not seem to capture the essence of join to me, it doesn't seem to imply that the contexts are merged
2013-03-21 17:44:16	ab9rf	too many "what is a monad" tutorials confuse the IO monad with monads generally
2013-03-21 17:44:18	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Ping timeout: 272 seconds)
2013-03-21 17:44:24	fumieval	just kidding, The diffference between covariant and contravariant is larger than hell and heaven is
2013-03-21 17:44:25	johnw	fizbin: Monad doesn't compose through z : m b -> b, I think I said that the purpose of Monad is allow a composition of those two functions *without* relying on such a z
2013-03-21 17:44:34	 *	hackagebot mueval 0.9 - Safely evaluate pure Haskell expressions  http://hackage.haskell.org/package/mueval-0.9 (GwernBranwen)
2013-03-21 17:44:36	<--	nonymousa (~byteme@2001:470:cabe:dead:beef:feed:dead:beef) has quit (Ping timeout: 245 seconds)
2013-03-21 17:44:36	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Ping timeout: 264 seconds)
2013-03-21 17:44:42	Taneb	"What is a Monad?" "It's an anagram of Nomad. Cool, huh?"
2013-03-21 17:44:58	ab9rf	for me it's a game piece in a game i used to have when i was a kid
2013-03-21 17:45:04	johnw	`ramses: here, let me try to get that into the sentence
2013-03-21 17:45:04	ab9rf	they were worth 80 points
2013-03-21 17:45:11	c_wraith	I like the occasional times people ask about nomadic code.
2013-03-21 17:45:17	fizbin	:t (>>=)
2013-03-21 17:45:17	Mortchek	I actually took advantage of that in a game of Crysis Wars. Since the default player name is Nomad, I named myself Monad. Groans were had all around once they started getting it
2013-03-21 17:45:18	lambdabot	Monad m => m a -> (a -> m b) -> m b
2013-03-21 17:45:25	c_wraith	It's often written at coffee shops
2013-03-21 17:45:30	ski	c_wraith : we should rename "mobile code" to that
2013-03-21 17:45:35	-->	nonymousa (~byteme@2001:470:cabe:dead:beef:feed:dead:beef) has joined #haskell
2013-03-21 17:45:41	ab9rf	c_wraith: good ol' autocorrect
2013-03-21 17:46:02	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-21 17:46:04	monochrom	sipa, the separation is valid for IO because the language as a whole is lazy in practice. not an essence of monad. in an eager language you will have monads that do not have the separation
2013-03-21 17:46:06	<--	lambdafoo (5eae90b2@gateway/web/freenode/ip.94.174.144.178) has quit (Quit: Page closed)
2013-03-21 17:46:12	fizbin	:t \x y -> join (liftM y x)
2013-03-21 17:46:13	lambdabot	Monad m => m a1 -> (a1 -> m a) -> m a
2013-03-21 17:46:21	<--	kennyp_ (~kennyp@new.jroes.net) has quit (Quit: leaving)
2013-03-21 17:46:23	ab9rf	http://boardgamegeek.com/boardgame/1520/monad <- the 'original' monad :)
2013-03-21 17:46:29	-->	kennyp (~kennyp@fedora/kennyp) has joined #haskell
2013-03-21 17:46:44	fizbin	@pl \x y -> join (liftM y x)
2013-03-21 17:46:45	lambdabot	(join .) . flip fmap
2013-03-21 17:46:59	Botje	c_wraith: wouldn't nomadic code be stuff like mobile agents?
2013-03-21 17:47:02	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-21 17:47:11	Botje	(or internet worms, if you're more malicious)
2013-03-21 17:47:31	fizbin	ab9rf: I think the title of 'original' monad goes to http://en.wikipedia.org/wiki/Monad_(philosophy)
2013-03-21 17:47:55	 *	ski . o O ( the original monad <http://upload.wikimedia.org/wikipedia/commons/c/c2/Leibniz_Monadology_2.jpg> )
2013-03-21 17:47:56	sproingie	"The first player to accumulate a given number of Monads (which varies depending on the number of players in the game) is the winner."
2013-03-21 17:47:58	monochrom	Pods: in general, in my opinion, avoid wordy essays until you have done a ton of examples. Recall how to learn Chess. do you read a lot of essays first before you try your hand at the first game?
2013-03-21 17:48:15	<--	soulofpeace (~soulofpea@cm62.gamma164.maxonline.com.sg) has quit (Ping timeout: 260 seconds)
2013-03-21 17:48:20	<--	ParahSailin (~eg@unaffiliated/parahsailin) has quit (Read error: Connection reset by peer)
2013-03-21 17:48:22	sproingie	Haskell: He who dies with the most monad tutorials wins.
2013-03-21 17:48:26	armlesshobo	LOL
2013-03-21 17:48:28	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 17:48:31	johnw	`ramses: I don't like how long this is getting, but what about this: "The Monad interface extends a type 'm' such that two functions, f : a -> m b, and g : b -> m c, can be composed without erasing the type in the middle (i.e., without using some z : m b -> b).  It does this by lifting g into the Monad as g' : m b -> m (m c), composing, and then using an implied join : m (m c) -> m c to yield the expected m c at the end.  It is this
2013-03-21 17:48:31	johnw	merging in the final step which provides the functionality associated with Monads."
2013-03-21 17:48:31	ab9rf	fizbin: bah :)
2013-03-21 17:48:36	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-21 17:48:43	ab9rf	fizbin: i ran into the game long before i ran into the philsophy
2013-03-21 17:48:45	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-21 17:48:59	fizbin	:t fmap (fmap join) (flip fmap)
2013-03-21 17:49:00	lambdabot	(Monad m, Functor m) => m a1 -> (a1 -> m a) -> m a
2013-03-21 17:49:03	<--	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has quit (Quit: anRch)
2013-03-21 17:49:15	mcstar	i knew monads way before i met haskell from Ergo Proxy
2013-03-21 17:49:16	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-03-21 17:49:17	armlesshobo	fizbin: what is this witchcraft?
2013-03-21 17:49:23	armlesshobo	:P
2013-03-21 17:49:23	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-21 17:49:30	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-21 17:49:31	fizbin	Which is (since what Monad isn't a Functor?), exactly the type of >>=
2013-03-21 17:49:37	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-21 17:49:50	`ramses	@ty fmap join . fmap
2013-03-21 17:49:51	johnw	:t (join .) . flip fmap
2013-03-21 17:49:52	lambdabot	(Monad m, Functor m) => (a1 -> m a) -> m a1 -> m a
2013-03-21 17:49:53	lambdabot	(Monad m, Functor m) => m a1 -> (a1 -> m a) -> m a
2013-03-21 17:50:06	Pods	Looks like I need another theory session for functors :P
2013-03-21 17:50:07	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-21 17:50:15	armlesshobo	Pods: you and me both :P
2013-03-21 17:50:15	`ramses	@ty flip (fmap join . fmap)
2013-03-21 17:50:17	lambdabot	(Monad m, Functor m) => m a1 -> (a1 -> m a) -> m a
2013-03-21 17:50:23	ab9rf	i actually understand functors better than monads
2013-03-21 17:50:30	applicative	the philosophy 'monad' is not really to the point, try Euclid VII Def. 1. A unit (monad) is that by virtue of which each of the things that exist is called one.
2013-03-21 17:50:38	-->	earspliT (~earsplit@sub85-039.bucknell.edu) has joined #haskell
2013-03-21 17:50:38	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Quit: Mi siddiai)
2013-03-21 17:50:39	byorgey	the confusing thing about fizbin's code is that two of the fmaps are for the monad in question, and one is for the ((->) e) monad, i.e. it is just composition.
2013-03-21 17:50:43	<--	edon (~user@albalug/edon) has quit (Ping timeout: 260 seconds)
2013-03-21 17:50:49	ski	> (fmap . fmap . fmap) (2 *) [Just [0,1,2],Nothing,Just [3,4]]
2013-03-21 17:50:50	lambdabot	  [Just [0,2,4],Nothing,Just [6,8]]
2013-03-21 17:50:51	`ramses	johnw: yeah, it kinda lost it succinctness :) But I do like that kind of explanation
2013-03-21 17:50:59	typoclass	monochrom: kudos, you have a very sensible position
2013-03-21 17:50:59	Pods	*retreating to get the theory right*
2013-03-21 17:51:01	Pods	bbl
2013-03-21 17:51:06	typoclass	monochrom: see also http://www.youtube.com/watch?v=MnKoQbFXemE
2013-03-21 17:51:11	fumieval	:t fmap fmap fmap fmap
2013-03-21 17:51:13	lambdabot	(Functor f2, Functor f1, Functor f) => f (f1 (a -> b)) -> f (f1 (f2 a -> f2 b))
2013-03-21 17:51:19	mcstar	> fix fmap
2013-03-21 17:51:21	lambdabot	  Occurs check: cannot construct the infinite type: b0 = f0 b0Occurs check: c...
2013-03-21 17:51:26	joe9	 is there a haskell intersect that can take more than 2 lists? a list of lists?
2013-03-21 17:51:38	`ramses	johnw: I strongly feel a lot of the monad-confusion arises from too concrete explanations
2013-03-21 17:51:40	Iceland_jack	probably `intersects' if it exists
2013-03-21 17:51:45	applicative	foldr intersect
2013-03-21 17:52:00	ab9rf	applicative: what's the base case?
2013-03-21 17:52:08	applicative	@type intersect
2013-03-21 17:52:09	lambdabot	Eq a => [a] -> [a] -> [a]
2013-03-21 17:52:22	ski	@type foldr1 intersect
2013-03-21 17:52:23	lambdabot	Eq a => [[a]] -> [a]
2013-03-21 17:52:31	ab9rf	i think you need foldr1, not foldr
2013-03-21 17:52:34	applicative	ab9rf: right, this will be bad....
2013-03-21 17:52:50	<--	eikke (~nicolas@85.255.197.126) has quit (Ping timeout: 252 seconds)
2013-03-21 17:52:52	ab9rf	as ski has already noted :)
2013-03-21 17:52:54	fizbin	`ramses: I think that monads can only be explained abstractly after you've used them concretely for a bit.
2013-03-21 17:52:54	<--	bos (~bos@173.252.71.129) has quit (Ping timeout: 276 seconds)
2013-03-21 17:53:01	ski	or `foldr intersect universe', as the case may be
2013-03-21 17:53:06	ab9rf	heh
2013-03-21 17:53:14	`ramses	fizbin: not sure... depends on the explainee probably
2013-03-21 17:53:22	ski	(`union' is easier)
2013-03-21 17:53:27	joe9	ski, applicatieve, thanks.
2013-03-21 17:53:38	applicative	ski, yes, thats what came to me with ab9rf 's question
2013-03-21 17:53:38	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-21 17:53:43	`ramses	fizbin: you certainly have to accompany the abstract explanation by examples, though
2013-03-21 17:54:02	sproingie	i think it's waaaaay easier to grok monads after fully internalizing functor and monoid
2013-03-21 17:54:05	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-21 17:54:12	ab9rf	joe9: did that answer your question?
2013-03-21 17:54:19	otters	I don't see what monoids have to do with monads
2013-03-21 17:54:24	otters	not on the learning front
2013-03-21 17:54:24	johnw	`ramses: yes, I agree.  concrete explanations must perforce "instantiate" the abstraction in a particular domain, but this distracts from how differently the other instantiations can behave from the one you've chosen, and then you are comparing apples to oranges, instead of understanding that the point was to talk about "fruit"
2013-03-21 17:54:25	`ramses	sproingie: absolutely, throw in Applicative as well :)
2013-03-21 17:54:34	ab9rf	sproingie: typeclassopedia's little dag of the different categories helped me immensely in that regard
2013-03-21 17:54:45	Taneb	otters, not so much in Haskell, but in category theory I gather they are conected
2013-03-21 17:54:57	ab9rf	otters rock
2013-03-21 17:55:02	otters	i know
2013-03-21 17:55:05	johnw	otters: ah, that one is actually easy
2013-03-21 17:55:07	sproingie	monoid makes you think in terms of composition.  functor is fundamental at any rate
2013-03-21 17:55:16	johnw	so, you know how a monad can combine two elements to make a new element of the same type?
2013-03-21 17:55:20	johnw	sorry, a monoid
2013-03-21 17:55:28	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-21 17:55:31	ab9rf	like numbers :)
2013-03-21 17:55:35	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 17:55:38	fumieval	:t mappend
2013-03-21 17:55:39	fizbin	There needs to be a "Counterexamples in typeclasses" paper along the lines of the excellent "Counterexamples in Topology" text.
2013-03-21 17:55:39	lambdabot	Monoid a => a -> a -> a
2013-03-21 17:55:42	sproingie	like some operations on numbers anyway
2013-03-21 17:55:51	ab9rf	yes
2013-03-21 17:55:54	johnw	well, a monad can compose two functors to make a another functor of the same kind
2013-03-21 17:55:56	typoclass	`ramses: i think it's perfectly alright to explain monads concretely in terms of Maybe and of IO and so on. explaining them concretely in terms of the proverbial space suits and burritos is a different matter. it's much more difficult to do well
2013-03-21 17:55:57	fumieval	:type mappend `on` Sum
2013-03-21 17:56:09	johnw	m (m a) is like saying (m `o` m) a
2013-03-21 17:56:14	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-21 17:56:15	fumieval	:t  mappend `on` Sum
2013-03-21 17:56:15	johnw	where `o` is the type-operator for functor composition
2013-03-21 17:56:16	lambdabot	Num a => a -> a -> Sum a
2013-03-21 17:56:22	ab9rf	hm, it took us until 11:56 to get to burritos
2013-03-21 17:56:29	johnw	now you can view monads as a monoid over functors
2013-03-21 17:56:29	`ramses	typoclass: those are perfect examples, but I doubt you will be really communicating the abstract idea then
2013-03-21 17:56:30	otters	:t (??)
2013-03-21 17:56:32	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-03-21 17:56:42	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 17:56:44	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-21 17:57:09	ab9rf	i mainly use Maybe as a way to tet whether someone's explanation of monads makes sense.  so many of them don't make sense for Maybe (or for the list monad)
2013-03-21 17:57:10	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-21 17:57:16	johnw	(well, specifically it must be a monoid over endofunctors)
2013-03-21 17:57:23	johnw	(or, said more correctly, a monoid in the category of endofunctors)
2013-03-21 17:57:32	 *	ski . o O ( "Counterexamples in Clifford algebras" by Pertti Lounesto at <http://users.tkk.fi/ppuska/mirror/Lounesto/counterexamples.htm> )
2013-03-21 17:57:42	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Ping timeout: 264 seconds)
2013-03-21 17:58:18	-->	Tesseraction_j (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 17:58:26	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-21 17:58:39	-->	emc2 (~emccorkl@207-172-209-89.c3-0.arl-ubr1.sbo-arl.ma.static.cable.rcn.com) has joined #haskell
2013-03-21 17:58:39	-->	schlicht_ (~fl@g225058247.adsl.alicedsl.de) has joined #haskell
2013-03-21 17:59:04	`ramses	johnw: I tried to write that down a while ago: https://gist.github.com/RamsesDeNorre/d64bd27697325a1f75dd
2013-03-21 17:59:04	johnw	otters: so, while a monoid turns a <> a <> a into a, a monad turns F (F (F a)) into F a.  It's just a monoid at the functor level, rather than at the value level
2013-03-21 17:59:11	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 245 seconds)
2013-03-21 17:59:28	<--	overflo (~Adium@66.97.133.7) has quit (Quit: Leaving.)
2013-03-21 17:59:37	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-21 17:59:39	-->	nilg` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has joined #haskell
2013-03-21 18:00:09	otters	oh i gotcha
2013-03-21 18:00:19	fizbin	:t join
2013-03-21 18:00:20	lambdabot	Monad m => m (m a) -> m a
2013-03-21 18:00:23	ski	johnw : i'm not sure that's a good way to think about it
2013-03-21 18:00:33	-->	Tharugrim (~Tharugrim@194-166-74-207.adsl.highway.telekom.at) has joined #haskell
2013-03-21 18:00:33	<--	srhb (~srhb@79.142.224.177.nat.router4.bolignet.dk) has quit (Read error: Connection reset by peer)
2013-03-21 18:00:35	johnw	ski: how so?
2013-03-21 18:00:48	-->	etehtsea (~textual@188.134.44.6) has joined #haskell
2013-03-21 18:01:00	typoclass	`ramses: probably so, but then we get into the whole question of what you need this abstract understanding for ...
2013-03-21 18:01:22	johnw	`ramses: yeah, researching this stuff in Haskell is a great way to go
2013-03-21 18:01:24	<--	beaky (~beaky@bba68378.alshamil.net.ae) has quit (Quit: leaving)
2013-03-21 18:01:29	ski	johnw : for monoids, `(<>)' come together with `mempty' -- what is the corresponding thing in the monad situation ?
2013-03-21 18:01:40	<--	schovi (~schovi@194.213.198.34) has quit (Ping timeout: 260 seconds)
2013-03-21 18:01:48	`ramses	ski: something with return probably?
2013-03-21 18:01:59	fizbin	> let enlist x = [x] in join (enlist . enlist . enlist) 5
2013-03-21 18:02:00	lambdabot	  Couldn't match expected type `t0 -> a0' with actual type `[a1]'
2013-03-21 18:02:02	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 18:02:03	johnw	ski: the true identity functor
2013-03-21 18:02:06	applicative	return turns an a into an F a
2013-03-21 18:02:19	<--	nilg (~user@ALagny-551-1-238-224.w83-114.abo.wanadoo.fr) has quit (Ping timeout: 264 seconds)
2013-03-21 18:02:21	applicative	oh i see where we are
2013-03-21 18:02:26	`ramses	typoclass: to see the big picture, not just instantiations of it? To not just see the shadows in the cave? ;)
2013-03-21 18:02:29	<--	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has quit (Ping timeout: 256 seconds)
2013-03-21 18:02:35	johnw	I (F a) = F a
2013-03-21 18:02:36	fizbin	Maybe we don't have a Monoid, but just a semigroup?
2013-03-21 18:02:39	-->	Yuu-chan (~yuu@2.mfisoft.ru) has joined #haskell
2013-03-21 18:02:41	johnw	F (I a) = F a
2013-03-21 18:02:49	djahandarie	I suspect johnw is just trying to give the "-oid" explanation.
2013-03-21 18:02:56	applicative	left and right unit
2013-03-21 18:02:56	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-21 18:03:04	johnw	it's maybe not a Monoid like this in Haskell
2013-03-21 18:03:09	ski	johnw : for monoids, i think `mempty : 1 -> M' and `uncurry (<>) : M * M -> M', while for monads we have `eta : id -> T' and `mu : T . T -> T' -- so `*' corresponds to `.' (and `1' to `id'). `mempty' corresponds to `return'/`eta' and `(<>)' to `join'/`mu'
2013-03-21 18:03:10	johnw	because we don't have a true identity functor
2013-03-21 18:03:16	`ramses	fizbin: it really is a monoid, in the endofunctor sense the identity is return
2013-03-21 18:03:24	applicative	djahandarie: whats wrong with that
2013-03-21 18:03:39	djahandarie	Nothing.
2013-03-21 18:03:42	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-21 18:04:03	ski	johnw : however, as you stated it, it appeared you wanted `(<>)' to correspond to `(.)'
2013-03-21 18:04:33	johnw	ski: if join is mappend, and join . return is a no-op, then return is mempty, is that what you're saying?
2013-03-21 18:04:48	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 18:04:58	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-21 18:04:59	applicative	<> corresponds to composition of functors
2013-03-21 18:05:00	ski	`ramses : byw, fyi `MonadicFun' is called `Kleisli'
2013-03-21 18:05:04	ski	@index Kleisli
2013-03-21 18:05:04	lambdabot	Control.Arrow, Control.Arrow
2013-03-21 18:05:19	<--	Tesseraction_j (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 264 seconds)
2013-03-21 18:05:25	ski	johnw : yes, more or less
2013-03-21 18:05:32	<--	AtomicStryker (AtomicStry@ip-95-223-48-49.unitymediagroup.de) has quit (Quit: UP YOUR LEBENSRAUM)
2013-03-21 18:05:36	johnw	ski: ok.  I'm not sure how I implied that <> was ., but I didn't mean to
2013-03-21 18:05:38	ski	applicative : no, that's that i disagree with here
2013-03-21 18:05:43	ski	s/that i/what i/
2013-03-21 18:05:44	<--	tommd (~tommd@pdx.galois.com) has quit (Quit: Leaving.)
2013-03-21 18:05:46	-->	klrr (58819891@gateway/web/freenode/ip.88.129.152.145) has joined #haskell
2013-03-21 18:06:01	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-21 18:06:02	<--	jdnavarro (~danny@253.red-88-22-34.staticip.rima-tde.net) has quit (Remote host closed the connection)
2013-03-21 18:06:08	 *	applicative reflects
2013-03-21 18:06:18	ski	johnw : by the comparision "a monoid turns a <> a <> a into a, a monad turns F (F (F a)) into F a"
2013-03-21 18:06:42	johnw	but if <> = join, aren't the two statements identical?
2013-03-21 18:06:55	ski	(note that `F (F (F a))' is `(F . F . F) a')
2013-03-21 18:06:57	timtom	does anybody know the flag to make GHC do a complete rebuild?
2013-03-21 18:07:12	johnw	ahh
2013-03-21 18:07:13	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-21 18:07:16	johnw	thanks for clarifying that!
2013-03-21 18:07:27	ski	johnw : `F (F (F a))' is a type, but `a <> a <> a' must be a value, since `(<>)' operates on the value-level
2013-03-21 18:07:28	<--	tommd (~tommd@pdx.galois.com) has quit (Remote host closed the connection)
2013-03-21 18:07:29	johnw	i was performing my join after composition
2013-03-21 18:07:31	applicative	-force-recomp
2013-03-21 18:07:35	ski	and monoid vs. monad is nothing about value vs. type
2013-03-21 18:07:40	djahandarie	You know, I've always kind of wondered why monads aren't more interesting in category theory. It feels they should be more fundamental, because they are monoids (in the category of endofunctors), and monoids are rather core to things in category theory.
2013-03-21 18:07:43	applicative	timtom: ^^^ or did you mean more
2013-03-21 18:07:45	--	cl_away is now known as clahey
2013-03-21 18:07:46	<--	overflo (~Adium@66.97.133.7) has quit (Quit: Leaving.)
2013-03-21 18:07:51	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-21 18:07:56	johnw	ski: i had meant value vs. functor
2013-03-21 18:07:59	fizbin	So, one problem with this view is that a given monad only works on one functor. But I guess that might work; after all, "Sum Nat" is certainly a monoid and...
2013-03-21 18:08:06	timtom	applicative: more?
2013-03-21 18:08:16	klrr	C got K&R, LISP got SICP, does Haskell got a bible too?
2013-03-21 18:08:19	fizbin	> join [[5]]
2013-03-21 18:08:20	lambdabot	  [5]
2013-03-21 18:08:31	ski	applicative : `(<>)' corresponds to `join', and *cartesian product* (curried in the case of `(<>)') is what corresponds to "composition of functors"
2013-03-21 18:08:31	<--	sanemat (~sanemat@7c2947bf.i-revonet.jp) has quit (Remote host closed the connection)
2013-03-21 18:08:36	johnw	klrr: and Coq has Software Foundaitns
2013-03-21 18:08:39	ski	johnw : same difference
2013-03-21 18:08:40	johnw	Foundations
2013-03-21 18:08:46	Taneb	klrr, LYAH?
2013-03-21 18:09:05	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 18:09:07	klrr	Taneb: hmm, LYAH is bible class?
2013-03-21 18:09:14	johnw	LYAH is introduction class
2013-03-21 18:09:28	Taneb	LYAH is like the book of Genesis
2013-03-21 18:09:32	applicative	timtom: I just wondered if that's what you were looking for, -fforce-recomp
2013-03-21 18:09:38	shergill	i have a directed graph G. is there a name for G' obtained by reversing all the edges in G?
2013-03-21 18:09:40	hiptobecubic	I don't think haskell has a K&R equivalent
2013-03-21 18:09:42	Taneb	RWH has got a bit of Exodus
2013-03-21 18:09:43	klrr	is, "Programming in Haskell" bible?
2013-03-21 18:09:43	fizbin	klrr: If you're thinking of a relatively short yet still thorough document, "A Gentle Introduction" is a bit dated now, but still pretty good.
2013-03-21 18:09:51	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 18:09:52	tharper	oh please
2013-03-21 18:09:54	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-21 18:10:01	tharper	it's an insult to LYAH to compare it to the Bible
2013-03-21 18:10:02	knz	shergill: transpose
2013-03-21 18:10:09	knz	shergill: transposed graph
2013-03-21 18:10:10	shergill	oh right. duh
2013-03-21 18:10:14	klrr	fizbin: no, i rather mean a state of the art, extremely excellent book by people who has iq 300
2013-03-21 18:10:15	shergill	thanks knz
2013-03-21 18:10:17	ab9rf	LYAH never claims that pi = 3, for example
2013-03-21 18:10:18	knz	yw
2013-03-21 18:10:22	`ramses	ski: I discovered that later on ;)
2013-03-21 18:10:26	applicative	'a few monads more' kind of reminds me of Judges
2013-03-21 18:10:33	fizbin	klrr: But you compared it to K&R
2013-03-21 18:10:35	tharper	who has an IQ of 300?
2013-03-21 18:10:46	timtom	applicative: yeah, that was exactly it - thanks :)
2013-03-21 18:10:46	fizbin	K&R is far from state-of-the-art C.
2013-03-21 18:10:46	<--	b__ (~basdirks@5352A1E5.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-03-21 18:10:47	 *	ski . o O ( "A Gentle Introduction (if you're a Functional Programmer who just doesn't know Haskell)" )
2013-03-21 18:10:48	sproingie	who let the dogs out?
2013-03-21 18:10:50	ab9rf	tharper: nobody does, it's not meaningful to claim that
2013-03-21 18:10:51	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 18:10:54	tharper	ah
2013-03-21 18:10:59	tharper	didn't think so
2013-03-21 18:11:03	tharper	that sounds...troubling as well
2013-03-21 18:11:09	-->	quchen (~david@p54AA309D.dip.t-dialin.net) has joined #haskell
2013-03-21 18:11:10	tharper	The would would probably be so damn boring
2013-03-21 18:11:14	ab9rf	tharper: IQ is a normalized measure with z =100 and sigma = 15 (or 14 for some tests)
2013-03-21 18:11:18	klrr	fizbin: K&R is excellent
2013-03-21 18:11:19	sproingie	i had the start of a tutorial up a long time back, but i wiped it out in a depressed fit once
2013-03-21 18:11:22	<--	Yuu-chan (~yuu@2.mfisoft.ru) has left #haskell
2013-03-21 18:11:43	sproingie	it was called Learn You Yet Another Real World Gentle Haskell (LYYARWGH)
2013-03-21 18:11:51	ab9rf	a claimed IQ of 300 would be plus-13 sigma
2013-03-21 18:11:53	 *	ski grins
2013-03-21 18:11:59	fizbin	klrr: Oh, it's a classic. But contrary to popular belief, C has changed since then.
2013-03-21 18:12:13	sproingie	K&R is full of nuggets like the one-line strcpy
2013-03-21 18:12:15	ab9rf	tharper: in practice Stanford-Binet cannot yield a score higher than +3 sigma
2013-03-21 18:12:27	klrr	fizbin: a classic is a book which is relevant to read even if the language it teaches is dead or not
2013-03-21 18:12:28	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 18:12:28	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 18:12:29	fizbin	Which is why I'd compare it to "A Gentle Introduction"
2013-03-21 18:12:29	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-21 18:12:42	fizbin	Because it's still highly relevant.
2013-03-21 18:12:45	ab9rf	tharper: there are some tests that can give scores as high as 180, but those are questionable.  any score higher tha 180 is statistically unjustifiable.
2013-03-21 18:12:51	tharper	ha
2013-03-21 18:13:33	hiptobecubic	ski, it does say that it's for someone who has "experience with another functional language (even an 'almost functional' such as ML or Scheme)", HA!
2013-03-21 18:13:34	<--	dncr (~dncr@72.185.193.164) has quit (Quit: leaving)
2013-03-21 18:14:00	klrr	thanks for the answers, in 10 years i will write the classic im looking for, i will become programming master of masters guru
2013-03-21 18:14:11	-->	tibbe (~tibbe@216.239.45.130) has joined #haskell
2013-03-21 18:14:15	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-21 18:14:23	klrr	(probably not i know, but i have dreams)
2013-03-21 18:14:25	sproingie	IQ is a measurement of your aptitude for IQ tests
2013-03-21 18:14:26	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-21 18:14:29	ab9rf	sproingie: tat too
2013-03-21 18:14:35	klrr	i got 105
2013-03-21 18:14:59	sproingie	i'd taken several of them as a kid, i thought they were pretty silly then
2013-03-21 18:15:00	applicative	djahandarie: I think monads arent expecially central in ordinary mathematical uses of categories because endofunctors arent central
2013-03-21 18:15:05	ab9rf	sproingie: and also how white you are
2013-03-21 18:15:07	-->	Palmik (~palmik@man-208-121.pks.muni.cz) has joined #haskell
2013-03-21 18:15:10	klrr	tested me at mensa two years ago
2013-03-21 18:15:12	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-21 18:15:13	ab9rf	sproingie: the race bias on most IQ tests is 4-5 points
2013-03-21 18:15:16	klrr	i was 13 i think
2013-03-21 18:15:18	klrr	well bye
2013-03-21 18:15:21	<--	klrr (58819891@gateway/web/freenode/ip.88.129.152.145) has quit (Quit: Page closed)
2013-03-21 18:15:32	--	Palmik is now known as Guest87109
2013-03-21 18:15:40	fumieval	IQ is just IO with a thorn
2013-03-21 18:15:44	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 18:15:48	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-03-21 18:15:56	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Read error: Connection reset by peer)
2013-03-21 18:16:01	<--	bos (~bos@173.252.71.129) has quit (Read error: Connection reset by peer)
2013-03-21 18:16:10	johnw	true, one reason Monads are so useful to Haskell are we live in a world of strong endofunctors
2013-03-21 18:16:19	johnw	and those noly
2013-03-21 18:16:21	johnw	only
2013-03-21 18:16:24	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-03-21 18:16:30	djahandarie	applicative, maybe. But endofunctors are one of the only categorical things you can make monoids out of. But I see your point.
2013-03-21 18:16:30	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-21 18:16:33	sproingie	we all live in a monad submarine
2013-03-21 18:16:40	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 252 seconds)
2013-03-21 18:16:47	simpson	A monad submarine!
2013-03-21 18:16:47	johnw	i think there is only one true question to ask concerning monads
2013-03-21 18:16:54	johnw	is it mAHnad, or mOEnad?
2013-03-21 18:17:01	sproingie	a monad submarine!  we all li*ahem* that's enough
2013-03-21 18:17:02	RenJuan	to say that IQ tests are racist is itself racist
2013-03-21 18:17:11	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 18:17:12	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-21 18:17:18	RenJuan	in an unintended way
2013-03-21 18:17:38	typoclass	johnw: m-oughäæeiu-nad
2013-03-21 18:17:38	<--	Itkovian (~Itkovian@188.188.67.112) has quit (Read error: Connection reset by peer)
2013-03-21 18:17:40	-->	nabilhassein (~yaaic@pool-108-28-70-91.washdc.fios.verizon.net) has joined #haskell
2013-03-21 18:17:50	sproingie	the bias is observable when other factors are controlled for
2013-03-21 18:18:01	applicative	IQ measures degree of assimilation to market society, as we left-wing Flynn Effect enthusiasts argue.
2013-03-21 18:18:01	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 18:18:13	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-03-21 18:18:14	sproingie	e.g. similar academic achievement ratings, other standardized tests
2013-03-21 18:18:35	djahandarie	Well, I suppose another interesting thing is a monoid in the category of monoids, which are commutative monoids, which are kind of used I suppose.
2013-03-21 18:18:37	johnw	perhaps we could take discussion of IQ tests to #haskell-blah
2013-03-21 18:18:48	djahandarie	Still. It feels like there should be something more interesting going on.
2013-03-21 18:18:50	applicative	yes
2013-03-21 18:19:00	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-21 18:19:20	RenJuan	for example my father was a black who's IQ was measured in a us federal prison as being 160
2013-03-21 18:19:36	-->	overflo (~Adium@66.97.133.7) has joined #haskell
2013-03-21 18:20:09	applicative	RenJuan: as johnw haskell-blah for such things
2013-03-21 18:20:22	ab9rf	someone is going t have to write a "monads are like a submarine" tutorial now
2013-03-21 18:20:39	johnw	ab9fr: is the monad the submarine itself, or is it the water?
2013-03-21 18:20:41	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-21 18:20:43	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-03-21 18:20:44	RenJuan	applicative, missing verb
2013-03-21 18:20:52	ab9rf	johnw: it's not my metaphor, you figure it out :)
2013-03-21 18:20:53	<--	`ramses (863ab323@gateway/web/freenode/ip.134.58.179.35) has quit (Ping timeout: 245 seconds)
2013-03-21 18:20:55	RenJuan	or other part of speech
2013-03-21 18:20:56	johnw	haha
2013-03-21 18:20:58	johnw	fair enough
2013-03-21 18:20:59	djahandarie	Ah. I suppose something interesting is that a monoid in a bicategory B is the hom-object of a B-enriched category with a single object. Though that's kind of just the case due to just definitions.
2013-03-21 18:21:01	typoclass	johnw: which is to say, i think pronunciation variants are quite okay. i don't see a problem if some people say moenad and some say mahnad
2013-03-21 18:21:10	ab9rf	johnw: i'm sick of monad metaphors
2013-03-21 18:21:19	johnw	a monad is like a sickness
2013-03-21 18:21:28	 *	sproingie cocks his head sideways at djahandarie and does his best confused puppy dog expression
2013-03-21 18:21:28	-->	ncw (ncw@conference/pycon/x-gahlpdtpdtjlrmpb) has joined #haskell
2013-03-21 18:21:42	applicative	RenJuan: yes I mean, the topic belongs there, as johnw said it's off topic but tends to be incendiary
2013-03-21 18:21:54	sproingie	johnw: like the kind you get from a bad burrito
2013-03-21 18:22:04	-->	shock_one (~shock_one@46.118.141.174) has joined #haskell
2013-03-21 18:22:06	ab9rf	12:21 and we have TWO BURRITOS
2013-03-21 18:22:12	applicative	return is like getting sick; join is like getting better?
2013-03-21 18:22:15	ab9rf	keep this up and i'l hve to go to taco bell again
2013-03-21 18:22:22	Cale	djahandarie: Though to some extent, everything is just the case due to just definitions
2013-03-21 18:22:27	johnw	RenJuan: we use #haskell-blah as a way of keeping #haskell focused more on code and related subjects
2013-03-21 18:22:37	RenJuan	you what "monad" reminds me of? This department in IBM Research where I worked where they had this markup language who's compiler was called "demiurge"
2013-03-21 18:22:38	djahandarie	Cale, yeah. But this seems like it's really just due to the definitions more-so than other things.
2013-03-21 18:22:52	sproingie	ab9rf: i make it a habit to not eat meat extruded from a caulking gun
2013-03-21 18:22:53	ski	applicative : well, monads are related to adjunctions, which are ubiquous
2013-03-21 18:22:59	-->	normanrichards (~normanric@64.128.85.190) has joined #haskell
2013-03-21 18:23:00	Cale	There's a lot of that in CT :P
2013-03-21 18:23:15	RenJuan	it ain't exacle lighting up haskell-blah right now
2013-03-21 18:23:31	johnw	RenJuan: that's the other reason we move those conversations there ;)
2013-03-21 18:23:36	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Read error: Operation timed out)
2013-03-21 18:23:43	ab9rf	"This monad left intentionally blank."
2013-03-21 18:23:46	applicative	ski oh yeah, but adjoint functors arent endofunctors, though their compositions are
2013-03-21 18:23:52	RenJuan	*whose
2013-03-21 18:24:00	ski	applicative : exactly
2013-03-21 18:24:09	applicative	I mean, in general
2013-03-21 18:24:13	johnw	applicative: that's a great point
2013-03-21 18:24:35	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 18:24:46	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-21 18:25:08	ski	(s/arent/doesn't have to be/)
2013-03-21 18:25:28	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-21 18:25:42	-->	cognominal (~cognomina@37.160.40.245) has joined #haskell
2013-03-21 18:25:44	<--	Guest87109 (~palmik@man-208-121.pks.muni.cz) has quit (Quit: Lost terminal)
2013-03-21 18:26:01	<--	bos (~bos@173.252.71.129) has quit (Remote host closed the connection)
2013-03-21 18:26:02	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-21 18:26:02	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-21 18:26:16	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-21 18:26:23	ab9rf	now i've lost track of what an endofunctor is
2013-03-21 18:26:28	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-03-21 18:26:38	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-21 18:26:39	-->	stvc (~stvc@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-21 18:26:45	--	pepijndevos is now known as pepijn_away
2013-03-21 18:26:52	-->	srhb (~srhb@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-21 18:26:53	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-21 18:26:57	johnw	ab9fr: a mapping from a category (like Hask) to itself
2013-03-21 18:27:05	ab9rf	johnw: thank you
2013-03-21 18:27:14	ab9rf	johnw: too much abstract math causes me to drop definitions
2013-03-21 18:27:21	johnw	yeah, tell me about it
2013-03-21 18:27:32	johnw	re-learning is as much a part of that game as understanding it the first time
2013-03-21 18:27:55	ab9rf	i only have so much conceptual space in short-term memory
2013-03-21 18:27:55	-->	glguy (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-21 18:28:02	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-03-21 18:28:03	djahandarie	I think a lot of the naming in category theory is just really unfortunate
2013-03-21 18:28:19	ski	like "triples"
2013-03-21 18:28:20	djahandarie	Too many names, lack of reoccurring morphemes
2013-03-21 18:28:24	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-21 18:28:27	coppro	djahandarie: except "co"
2013-03-21 18:28:33	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-21 18:28:38	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 246 seconds)
2013-03-21 18:28:40	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Client Quit)
2013-03-21 18:28:55	ab9rf	djahandarie: one of my grouses about abstract math is that there's a mix of ordinary words repurposed to mean something having nothing to do with the ordinary word, combined with meaningless terms
2013-03-21 18:29:01	johnw	and then you have to remember the mappings from CT into Haskell
2013-03-21 18:29:10	johnw	like return for unit, etc.
2013-03-21 18:29:16	-->	gridaphobe (~gridaphob@128.54.44.136) has joined #haskell
2013-03-21 18:29:31	djahandarie	ab9rf, ah, well, that's not just abstract math. That
2013-03-21 18:29:35	djahandarie	That's pretty much anything.
2013-03-21 18:29:41	ski	ab9rf : perhaps the alternative is to *only* use meaningless terms ?
2013-03-21 18:29:47	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-21 18:29:50	djahandarie	Like "speed" in physics.
2013-03-21 18:29:52	<--	alistairclark (~alisaircl@109.174.158.82) has quit (Remote host closed the connection)
2013-03-21 18:30:09	<--	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (Remote host closed the connection)
2013-03-21 18:30:17	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-21 18:30:24	-->	bos_ (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-21 18:30:26	djahandarie	Plenty of technical fields redefine common words to either be more specific or more general.
2013-03-21 18:30:29	johnw	ab9fr: i find myself wading through terminology when I have to decode what a "strong lax monodoial functor" is, only to find that it's an applicative functor!  I guess the CT definition is more conceptually accurate, but it's a lot harder to grok
2013-03-21 18:31:01	<--	psii (~user@sunbeam.informatik.uni-kiel.de) has quit (Read error: Connection reset by peer)
2013-03-21 18:31:03	johnw	though, I do suppose the merit of understanding the abstract math definition is that it decomposes the abstraction down to its building blocks
2013-03-21 18:31:10	sproingie	"strong lax" sounds like something you take for constipation
2013-03-21 18:31:13	johnw	like deriving monads from adjoint functors
2013-03-21 18:31:21	djahandarie	Ugh, "strong lax". Whoever said that needs to be punched.
2013-03-21 18:31:23	<--	bos (~bos@173.252.71.129) has quit (Ping timeout: 256 seconds)
2013-03-21 18:31:34	 *	djahandarie would say "a lax monoidal endofunctor with a strength"
2013-03-21 18:31:45	johnw	djahandarie: or how about a "strict weak total order", which is not even a total order!
2013-03-21 18:31:45	typoclass	djahandarie: iirc it's in the haddock for Data.Monoid or thereabouts
2013-03-21 18:32:05	-->	realnot (~realnot@host78-5-dynamic.32-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-21 18:32:05	<--	realnot (~realnot@host78-5-dynamic.32-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-21 18:32:05	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-21 18:32:13	-->	bos (~bos@173.252.71.6) has joined #haskell
2013-03-21 18:32:36	Cale	djahandarie: Is there some problem with monoidal functors having a strength being called strong?
2013-03-21 18:32:50	<--	bos (~bos@173.252.71.6) has quit (Read error: Connection reset by peer)
2013-03-21 18:33:04	ocharles	Cale: yes, strong has another meaning
2013-03-21 18:33:06	ocharles	http://cstheory.stackexchange.com/questions/12412/explaining-applicative-functor-in-categorical-terms-monoidal-functors
2013-03-21 18:33:08	-->	fumieval-alt (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-21 18:33:23	ocharles	at least, two meanings of strength, depending on how you read it
2013-03-21 18:33:25	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-21 18:33:29	johnw	there are two meanings for strength
2013-03-21 18:33:29	johnw	yeah
2013-03-21 18:33:49	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-21 18:33:53	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-21 18:33:57	typoclass	er no, it was Control.Applicative http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Applicative.html
2013-03-21 18:34:05	djahandarie	Cale, not a real problem, it's just confusing for someone who doesn't have every sharp and distinct in their mind.
2013-03-21 18:34:09	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Ping timeout: 245 seconds)
2013-03-21 18:34:14	Cale	ocharles: What's the second sense?
2013-03-21 18:34:32	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-21 18:34:38	ab9rf	ski: the use of phrases instead perhaps
2013-03-21 18:34:47	ocharles	Cale: I can't explain more than point you at that link :)
2013-03-21 18:34:52	ab9rf	sorry, i got called away, didn't mean to leave in mid-argument :)
2013-03-21 18:34:53	typoclass	... it's kind of sad they thought this was a good thing to bring up in the very first sentence (as opposed to a footnote or something)
2013-03-21 18:35:01	ocharles	but it suggests there are two interpretations from the ambiguous phrase "strong lax monoidal endofunctor"
2013-03-21 18:35:10	<--	alios (~alios@alios.alios.net) has quit (Quit: So Long, and Thanks for All the Fish)
2013-03-21 18:35:13	-->	psii (~user@sunbeam.informatik.uni-kiel.de) has joined #haskell
2013-03-21 18:35:13	djahandarie	There aren't two interpretations
2013-03-21 18:35:21	-->	alios (~alios@alios.alios.net) has joined #haskell
2013-03-21 18:35:24	johnw	Cale: I think it's a strong endofunctor, but a non-strong *monoidal* functor
2013-03-21 18:35:32	djahandarie	There is one interpretation, but "strong" in that context is just confusing
2013-03-21 18:35:32	-->	Sculptor (~Sculptor@89.110.220.38) has joined #haskell
2013-03-21 18:35:32	<--	Sculptor (~Sculptor@89.110.220.38) has quit (Changing host)
2013-03-21 18:35:32	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-21 18:35:50	djahandarie	(The context being with a monoidal functor)
2013-03-21 18:35:51	-->	Kindaro (~Kindaro@84.23.59.80) has joined #haskell
2013-03-21 18:35:55	<--	bos_ (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Ping timeout: 264 seconds)
2013-03-21 18:36:50	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 252 seconds)
2013-03-21 18:36:54	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-21 18:37:03	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-21 18:37:08	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 252 seconds)
2013-03-21 18:37:10	ski	ab9rf : perhaps. but then it's not as clear how those compose, i think
2013-03-21 18:37:13	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-21 18:37:34	--	fumieval-alt is now known as fumieval
2013-03-21 18:37:36	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 18:38:30	-->	end3rW (~end3rW@lak-115-184.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-21 18:38:47	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-21 18:39:25	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Client Quit)
2013-03-21 18:39:31	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Read error: No route to host)
2013-03-21 18:39:36	-->	fumieval-alt (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-21 18:40:33	<--	bmfx (~bmfx@168-139-112-92.pool.ukrtel.net) has quit (Read error: Connection reset by peer)
2013-03-21 18:41:47	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 240 seconds)
2013-03-21 18:42:09	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 256 seconds)
2013-03-21 18:42:18	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Remote host closed the connection)
2013-03-21 18:42:36	sproingie	the explanation of lax monoidal functor reminds me of demorgans law
2013-03-21 18:42:55	<--	EarlGray^ (~DSirenko@cl-169.led-01.ru.sixxs.net) has quit (Remote host closed the connection)
2013-03-21 18:43:07	sproingie	namely the F(A)⊕F(B)→F(A⊗B) bit
2013-03-21 18:43:14	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-21 18:43:23	sproingie	(hm those two ops look almost identical in this font)
2013-03-21 18:43:44	-->	plucas_ (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-21 18:43:45	<--	GooyO (~OooOooO@abo-234-135-68.bdx.modulonet.fr) has quit (Quit: Leaving)
2013-03-21 18:44:08	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Ping timeout: 255 seconds)
2013-03-21 18:44:08	--	plucas_ is now known as plucas
2013-03-21 18:44:10	<--	fumieval-alt (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 252 seconds)
2013-03-21 18:44:20	-->	Fuuzetsu (~Shana@limol.bath.ac.uk) has joined #haskell
2013-03-21 18:44:20	<--	Fuuzetsu (~Shana@limol.bath.ac.uk) has quit (Changing host)
2013-03-21 18:44:20	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-21 18:44:21	-->	_d3f (~gnu@nl2.ovpn.to) has joined #haskell
2013-03-21 18:44:33	<--	tibbe (~tibbe@216.239.45.130) has quit (Quit: tibbe)
2013-03-21 18:45:05	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-21 18:45:23	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-03-21 18:45:24	ab9rf	ski: it's probably just m egrousing
2013-03-21 18:45:28	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-21 18:45:49	ab9rf	ski: i haven't put enough effort into learning the domain specific language, and so statements in it are gibberish that sorta make sense but don't
2013-03-21 18:46:06	-->	bmfx (~bmfx@137-196-112-92.pool.ukrtel.net) has joined #haskell
2013-03-21 18:46:28	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-21 18:46:30	ab9rf	ski: there really is no wya to make the domain-specific language "better"
2013-03-21 18:46:36	mcstar	they are identical if we allow rotation around the center
2013-03-21 18:47:04	ab9rf	sproingie: they are identical in my font, they're both a substitution character :)
2013-03-21 18:47:29	-->	cvic (~cvic@86.125.62.125) has joined #haskell
2013-03-21 18:47:29	ocharles	sproingie: isn't that just the distributative law?
2013-03-21 18:47:39	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Ping timeout: 260 seconds)
2013-03-21 18:47:41	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-03-21 18:47:44	sproingie	ocharles: they're two different ops
2013-03-21 18:48:03	ocharles	so is distribution, no?
2013-03-21 18:48:11	sproingie	distribution distributes one op
2013-03-21 18:48:16	ocharles	multplication distributing over addition
2013-03-21 18:48:19	ocharles	for example
2013-03-21 18:48:30	mcstar	they are logic connectives
2013-03-21 18:48:33	mcstar	logical*
2013-03-21 18:49:37	 *	hackagebot retry 0.2.0.0 - Retry combinators for monadic actions that may fail  http://hackage.haskell.org/package/retry-0.2.0.0 (OzgunAtaman)
2013-03-21 18:49:37	ab9rf	i thought de morgan's was just the statement of the distributive law in the ring of boolean algebra
2013-03-21 18:49:44	monochrom	we should create a game Logic the Gathering
2013-03-21 18:49:50	sproingie	hm maybe.  abstract math for me is a strange and new place.  keeps it fun, but i'm amused at the most trivial things
2013-03-21 18:50:11	ab9rf	but it's been nigh on twenty years since i've done any serious abstract algebra
2013-03-21 18:50:20	-->	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has joined #haskell
2013-03-21 18:50:20	sproingie	always a child in the kindergarden of algebra
2013-03-21 18:50:46	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-03-21 18:51:01	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Remote host closed the connection)
2013-03-21 18:51:21	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-21 18:51:34	-->	Testos (User@109.64.163.95) has joined #haskell
2013-03-21 18:51:34	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-03-21 18:51:49	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Quit: Leaving)
2013-03-21 18:52:18	<--	yacks (~yacks@180.151.36.168) has quit (Quit: Leaving)
2013-03-21 18:52:29	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 245 seconds)
2013-03-21 18:52:54	<--	Acedip (~ani@fedora/Acedip) has quit (Ping timeout: 245 seconds)
2013-03-21 18:53:15	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-21 18:53:36	-->	amindfv (~textual@c-50-148-161-5.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 18:54:47	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-21 18:55:28	<--	ncw (ncw@conference/pycon/x-gahlpdtpdtjlrmpb) has quit (Remote host closed the connection)
2013-03-21 18:55:28	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 18:55:58	<--	bitonic (~user@dyn1216-32.wlan.ic.ac.uk) has quit (Ping timeout: 256 seconds)
2013-03-21 18:56:33	-->	sellout- (~Adium@nomad.ccs.neu.edu) has joined #haskell
2013-03-21 18:57:53	-->	ncw (ncw@conference/pycon/x-iqsjokowixknipqs) has joined #haskell
2013-03-21 18:59:27	<--	[swift] (~mfowler@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 18:59:32	--	pdxleif_away is now known as pdxleif
2013-03-21 18:59:41	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-21 18:59:47	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-21 19:00:03	<--	Kindaro (~Kindaro@84.23.59.80) has quit (Read error: Connection reset by peer)
2013-03-21 19:00:04	-->	Kindaro_ (~Kindaro@84.23.59.80) has joined #haskell
2013-03-21 19:00:25	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-21 19:00:30	<--	Taneb (~nathan@host-2-97-152-171.as13285.net) has quit (Ping timeout: 276 seconds)
2013-03-21 19:00:56	-->	bitonic (~user@dyn1216-32.wlan.ic.ac.uk) has joined #haskell
2013-03-21 19:01:45	<--	Icewing (~Icewing@unaffiliated/icewing) has quit (Ping timeout: 260 seconds)
2013-03-21 19:01:55	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-21 19:02:20	-->	madjestic (~madjestic@178.230.54.14) has joined #haskell
2013-03-21 19:02:31	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-03-21 19:02:50	<--	normanrichards (~normanric@64.128.85.190) has quit
2013-03-21 19:05:03	-->	OlegYch (~OlegYch@212.98.189.88) has joined #haskell
2013-03-21 19:05:32	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 19:05:33	<--	kaoskorobase (~sk@92.56.206.219) has quit (Quit: kaoskorobase)
2013-03-21 19:05:35	<--	HugoDaniel (~hugo@elab.fcsh.unl.pt) has quit (Quit: BUY)
2013-03-21 19:05:51	-->	dminus (~dminus@unaffiliated/dminus) has joined #haskell
2013-03-21 19:07:00	-->	niloc132 (~colin@70.59.123.97) has joined #haskell
2013-03-21 19:07:26	<--	dmac (~Adium@12.207.22.242) has quit (Client Quit)
2013-03-21 19:07:46	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-21 19:08:28	-->	Paprikachu (~Paprikach@93-82-140-105.adsl.highway.telekom.at) has joined #haskell
2013-03-21 19:09:12	<--	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-21 19:09:46	<--	nabilhassein (~yaaic@pool-108-28-70-91.washdc.fios.verizon.net) has quit (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
2013-03-21 19:10:12	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 252 seconds)
2013-03-21 19:10:27	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-03-21 19:10:42	<--	perspectival (perspectiv@nat/redhat/x-gzuedxhzcbichsvv) has quit (Ping timeout: 256 seconds)
2013-03-21 19:11:57	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-21 19:12:18	<--	aristid (~aristid@unaffiliated/aristid) has quit (Quit: WeeChat 0.4.0)
2013-03-21 19:12:25	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Remote host closed the connection)
2013-03-21 19:12:26	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Read error: Operation timed out)
2013-03-21 19:13:05	-->	aristid (~aristid@unaffiliated/aristid) has joined #haskell
2013-03-21 19:13:19	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-03-21 19:13:26	<--	DexterLB (~dex@95-42-20-87.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-21 19:13:27	madjestic	hey guys, I want to be able to call a function with an arument either [a] or a.  Is that possible?
2013-03-21 19:14:05	ski	> (:[]) 'a'
2013-03-21 19:14:07	lambdabot	  "a"
2013-03-21 19:14:07	monochrom	perhaps f :: Either [a] a -> Your_type
2013-03-21 19:14:13	ski	> (:[]) ['a','b']
2013-03-21 19:14:14	lambdabot	  ["ab"]
2013-03-21 19:14:14	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 19:14:32	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 19:14:40	ski	madjestic : so it's possible if your function doesn't need to analyze the argument it is given
2013-03-21 19:14:46	ski	ab9rf : perhaps
2013-03-21 19:14:46	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-21 19:14:50	-->	[swift] (~mfowler@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 19:15:00	c_wraith	> const 5 "a"
2013-03-21 19:15:02	lambdabot	  5
2013-03-21 19:15:05	c_wraith	> const 5 ["a"]
2013-03-21 19:15:07	lambdabot	  5
2013-03-21 19:15:10	c_wraith	sweet!
2013-03-21 19:15:34	monochrom	perhaps I don't understand the question
2013-03-21 19:15:36	<--	Maarten__ (~maarten@87.208.219.89) has quit (Quit: Maarten__)
2013-03-21 19:15:49	-->	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has joined #haskell
2013-03-21 19:16:04	madjestic	ski: interesting
2013-03-21 19:16:07	c_wraith	I suspect madjestic actually wants ad-hoc polymorphism, at a syntactic level
2013-03-21 19:16:09	sublimepua	Quick question, what is the <> operator? Symbols are fairly ungoogleable.
2013-03-21 19:16:18	c_wraith	sublimepua: they're very hoogleable, though
2013-03-21 19:16:20	shachaf	sublimepua: But they're Hoogle-able!
2013-03-21 19:16:22	shachaf	@where hoogle
2013-03-21 19:16:22	lambdabot	http://haskell.org/hoogle
2013-03-21 19:16:31	mcstar	cant type families do that?
2013-03-21 19:16:41	fizbin	madjestic, if you only want this for certain a you could also use a typeclass.
2013-03-21 19:16:46	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-21 19:16:55	-->	system64 (~system64@202.78.175.199) has joined #haskell
2013-03-21 19:17:07	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 19:17:46	<--	tanakh_ (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has quit (Quit: Leaving...)
2013-03-21 19:17:54	-->	Kindaro (~Kindaro@84.23.59.80) has joined #haskell
2013-03-21 19:17:57	monochrom	I object to using type class
2013-03-21 19:18:11	ski	@type (<>)
2013-03-21 19:18:13	lambdabot	Monoid m => m -> m -> m
2013-03-21 19:18:21	<--	Kindaro_ (~Kindaro@84.23.59.80) has quit (Read error: Connection reset by peer)
2013-03-21 19:18:26	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 19:18:39	-->	DexterLB (~dex@95-42-20-87.btc-net.bg) has joined #haskell
2013-03-21 19:18:59	sublimepua	Hoogle calls it a beside. Is it for pretty printing?
2013-03-21 19:18:59	-->	sanemat (~sanemat@7c2947bf.i-revonet.jp) has joined #haskell
2013-03-21 19:19:06	sproingie	so <> is mappend?
2013-03-21 19:19:41	ski	@hoogle (<>)
2013-03-21 19:19:41	lambdabot	Language.Haskell.TH.PprLib (<>) :: Doc -> Doc -> Doc
2013-03-21 19:19:41	lambdabot	Text.PrettyPrint.HughesPJ (<>) :: Doc -> Doc -> Doc
2013-03-21 19:19:41	lambdabot	Text.PrettyPrint (<>) :: Doc -> Doc -> Doc
2013-03-21 19:19:58	-->	osxorgate (~osxorgate@94.142.213.250) has joined #haskell
2013-03-21 19:19:59	-->	MrZepeda (~textual@201.139.150.40.cable.dyn.cableonline.com.mx) has joined #haskell
2013-03-21 19:20:03	Mortchek	Is Seq an ideal type to represent a checker board?
2013-03-21 19:20:04	fizbin	@src (<>)
2013-03-21 19:20:04	-->	tech2 (~tech2@b01b6eae.bb.sky.com) has joined #haskell
2013-03-21 19:20:05	lambdabot	Source not found. That's something I cannot allow to happen.
2013-03-21 19:20:28	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-21 19:20:44	Mortchek	Or hrm, it has non-constant lookup. What would have constant lookup?
2013-03-21 19:20:53	<--	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-21 19:20:53	sublimepua	Ah, it shows up as an infix mappend. Thanks. Someone might want to fix the hoogle links, all they say is that its 'besides'
2013-03-21 19:21:08	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-21 19:21:13	Mortchek	Err, not lookup, but rather, find the element at (x, y).
2013-03-21 19:21:35	ski	sublimepua : well, that's what it means in Hughes' Pretty-Printing lib
2013-03-21 19:21:51	<--	cvic (~cvic@86.125.62.125) has left #haskell
2013-03-21 19:22:13	monochrom	I would use an array for a checker board
2013-03-21 19:22:15	ski	Mortchek : perhaps you want arrays ? (not constant lookup there either, though)
2013-03-21 19:22:34	Mortchek	ski, is that what you might use if you wanted to represent a checker board?
2013-03-21 19:22:42	-->	Taneb (~nathan@host-2-97-152-171.as13285.net) has joined #haskell
2013-03-21 19:22:43	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 256 seconds)
2013-03-21 19:23:06	-->	mateu (~mateu@missoula.org) has joined #haskell
2013-03-21 19:23:16	<--	sanemat (~sanemat@7c2947bf.i-revonet.jp) has quit (Ping timeout: 240 seconds)
2013-03-21 19:23:51	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-03-21 19:24:05	ab9rf	what are you putting o the checkerboard?
2013-03-21 19:24:16	ab9rf	it might be easier to represent the positions of the pieces
2013-03-21 19:24:23	Mortchek	Good point.
2013-03-21 19:24:25	ab9rf	instead of the squares themselves
2013-03-21 19:24:39	-->	raichoo (~raichoo@i59F6C7B0.versanet.de) has joined #haskell
2013-03-21 19:24:42	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-21 19:25:06	ab9rf	you can probably write a perfectly good checkers engine with two lists, specifying the positions of each of red's and black's pieces, respectively
2013-03-21 19:25:13	Mortchek	Though then "Is there a piece here?" is O(n) in the number of pieces.
2013-03-21 19:25:29	ab9rf	Mortchek: yes but there;s at most what, 24 pieces on the board?
2013-03-21 19:25:35	Mortchek	Yeah. That should work. Thanks.
2013-03-21 19:25:48	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-21 19:25:55	Mortchek	I realize I was probably prematurely optimizing. D:
2013-03-21 19:25:55	-->	perspectival (~perspecti@163.105.broadband14.iol.cz) has joined #haskell
2013-03-21 19:26:27	ab9rf	then againm there's only 32 live squares
2013-03-21 19:26:40	docksider	What kind of types has the least amount of boxing overhead
2013-03-21 19:26:43	docksider	?
2013-03-21 19:26:53	ab9rf	you could store them in a tree and get O(lg n) lookup
2013-03-21 19:27:10	Mortchek	That's okay - I like the list idea because it's simple to implement.
2013-03-21 19:27:29	ab9rf	Mortchek: you do have to keep track of which pieces have been kinged
2013-03-21 19:27:48	Mortchek	Yeah. I figure that's a parameter in the checker value.
2013-03-21 19:28:14	docksider	And by boxing overhead i mean both execution time and space
2013-03-21 19:28:19	ab9rf	yeah, you could just use a data Piece = Pawn | King or something
2013-03-21 19:28:53	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 19:29:39	ab9rf	Mortchek: now, if you wanted to write checkers for arbitrary n boards... that might justify some optimization
2013-03-21 19:30:05	-->	Azel (~arjanenl@37.160.54.240) has joined #haskell
2013-03-21 19:30:17	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-03-21 19:30:19	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-21 19:30:35	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-21 19:30:52	monochrom	unboxed types have the least amount of boxing overhead. but they are harder to use, and GHC-specific
2013-03-21 19:31:46	-->	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has joined #haskell
2013-03-21 19:32:03	sproingie	newtypes have no overhead in the wrapper.  but seriously, premature optimization alert.
2013-03-21 19:32:13	docksider	I don't see how boxing is at all needed tho, is it for ABI stability?
2013-03-21 19:32:33	monochrom	for example, you can use GHC's Int# directly. many restrictions apply. it may be much pain for no gain.
2013-03-21 19:32:39	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 19:32:47	ab9rf	ABI?
2013-03-21 19:32:48	-->	adek (~adek@5.134.64.87) has joined #haskell
2013-03-21 19:32:52	sproingie	boxing is simply how data is represented generically, same idea as java references
2013-03-21 19:33:03	docksider	http://en.wikipedia.org/wiki/Application_binary_interface
2013-03-21 19:33:05	madjestic	let foo = foldr1 (+).  I want to be able to call: foo 5; and get 5 translated into 5:[], so that foo works (so that foldr1 (+) inside foo works)
2013-03-21 19:33:11	sproingie	it has nothing to do with ABI
2013-03-21 19:33:17	RichyB	monochrom: yeah, I would strongly recommend using "ghc-core" (which you'll find on hackage) before trying unboxed types.
2013-03-21 19:33:20	madjestic	am I being very wrong on my thinking there?
2013-03-21 19:33:29	-->	S11001001 (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 19:33:32	ab9rf	Mortchek: representing te board as a Data.Map with an integer key would give O(log n) for most operations
2013-03-21 19:33:33	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-03-21 19:33:33	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-21 19:33:51	docksider	Well, since im compiling the code, why do i need more boxing than C structs?
2013-03-21 19:34:05	docksider	The compiler must be sure of what it has built anyway
2013-03-21 19:34:06	-->	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has joined #haskell
2013-03-21 19:34:18	Mortchek	ab9rf, an integer key? Not (Integer, Integer)?
2013-03-21 19:34:24	ab9rf	Mortchek: why use a tuple?
2013-03-21 19:34:26	RichyB	monochrom: rewriting a large subroutine to use all unboxed types is painful, so you want to always use ghc-core first to check that the optimiser hasn't already figured out how to do that transformation for you.
2013-03-21 19:34:44	RichyB	I have done that once and regretted not checking first. :)
2013-03-21 19:34:48	Mortchek	Because the location on the board is (how many down, how many left) or something.
2013-03-21 19:34:49	ab9rf	Mortchek: you can just number the squares across the board, it's not like you're going to increase the number of squares during the game
2013-03-21 19:34:57	adek	In monad transformers tutorial we read: "Map.lookup is defined to work in any monad by calling its fail function". Does type signature include this information? Do I need to check implementation to check if some function which returns Maybe can work within other monad by calling its fail function?
2013-03-21 19:35:10	docksider	RichyB: How do you do that?
2013-03-21 19:35:36	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 276 seconds)
2013-03-21 19:35:40	Mortchek	ab9rf, but a pair would enter into that anyway, no? Why not just keep that pair as the key so I don't need to transform it into an integer?
2013-03-21 19:35:41	monochrom	boxing is one way to help implement laziness. but I guess you don't want laziness, and boxing is not the only way anyway
2013-03-21 19:35:51	ab9rf	Mortchek: you can use tuples (since there's an Ord instance for (a,a) where a in Ord) if you want
2013-03-21 19:35:51	RichyB	docksider: do which bit? Convert to using unboxed types is, manually use Int# instead of Int everywhere, and so on, and use unboxed tuples for most things.
2013-03-21 19:35:55	<--	tech2 (~tech2@b01b6eae.bb.sky.com) has quit (Read error: Operation timed out)
2013-03-21 19:35:57	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-21 19:35:59	<--	IceDanelol (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (Ping timeout: 252 seconds)
2013-03-21 19:36:09	monochrom	boxing is also one way to help implement polymorphism. but it is also not the only way. code duplication is another way.
2013-03-21 19:36:13	Mortchek	ab9rf, I'm just curious what your rationale for using an integer is rather than a pair of integers.
2013-03-21 19:36:18	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 19:36:19	docksider	Checking if the compiler figured it out
2013-03-21 19:36:20	ski	docksider : boxing for uniform polymorphism implementation (an alternative would be to pass type-infos at run-time to polymorphic code)
2013-03-21 19:36:25	ab9rf	Mortchek: porbably just my prejudice against complex keys :)
2013-03-21 19:36:27	monochrom	do you not need boxing, if you write your own compiler and not use GHC.
2013-03-21 19:36:30	Mortchek	I see :P
2013-03-21 19:36:38	monochrom	s/do you/you do/
2013-03-21 19:36:39	<--	sambio (~sambio@190.57.227.109) has quit (Ping timeout: 245 seconds)
2013-03-21 19:36:49	docksider	Why is the code polymorphic at runtime?
2013-03-21 19:37:00	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 19:37:11	RichyB	docksider: use ghc-core to check is very easy - you pretty much run "ghc-core Foo.hs" and it compiles Foo.hs with the optimiser turned on, then spits out a syntax-highlighted annotated version of your code, showing the GHC core that the optimiser managed to turn it into, and below that the assembly code that the core got changed to in the end.
2013-03-21 19:37:28	<--	ncw (ncw@conference/pycon/x-iqsjokowixknipqs) has quit (Remote host closed the connection)
2013-03-21 19:37:29	monochrom	like I said, it does not have to be. write your own compiler to eliminate polymorphism at run time
2013-03-21 19:37:29	<--	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has quit (Ping timeout: 245 seconds)
2013-03-21 19:37:33	docksider	Im not saying it is a bad decision to box everyting, I'm saying that I can't understand it
2013-03-21 19:37:41	RichyB	It also prepends a little report about which code simplification rules were activated how many times.
2013-03-21 19:37:50	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-21 19:37:52	docksider	cool
2013-03-21 19:37:55	<--	Azel (~arjanenl@37.160.54.240) has quit (Ping timeout: 260 seconds)
2013-03-21 19:37:57	ab9rf	Mortchek: i'm probably prematurely optimizing :)
2013-03-21 19:38:03	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 260 seconds)
2013-03-21 19:38:05	ski	monochrom : .. except polymorphic recursion (unless you intend RTCG ;)
2013-03-21 19:38:09	<--	amindfv (~textual@c-50-148-161-5.hsd1.ca.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-21 19:38:37	Mortchek	ab9rf, that temptation is too strong :)
2013-03-21 19:38:58	ski	docksider : it makes it simple to implement e.g. `length' -- it doesn't need to know the size of the elements of the list
2013-03-21 19:39:06	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-03-21 19:39:15	ab9rf	Mortchek: my main concerns about the list-of-pieces strategy is that building the list of possible moves for a given piece in a given position is O(n), where n is the number of pieces.  with the map implementation it's O(lg n)
2013-03-21 19:39:21	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-03-21 19:39:29	RichyB	docksider: if you start playing with ghc-core, you'll find that GHC is pretty good at this. For example, I once wrote a barrier implementation in terms of MVar and it completely unboxed everything.
2013-03-21 19:39:29	<--	kmels (~kmels@frbg-4d029b81.pool.mediaWays.net) has quit (Ping timeout: 255 seconds)
2013-03-21 19:39:52	-->	x7a1c0b (~x7a1c0b@p5480A431.dip0.t-ipconnect.de) has joined #haskell
2013-03-21 19:39:56	ski	docksider : so, there can be a single `length', rather than one version for every element type you use `length' on in your program (which may be infinite, in case of polymorphic recursion)
2013-03-21 19:40:00	ab9rf	well, O(lg n) where n in the number of _squares_
2013-03-21 19:40:12	ab9rf	which is a lose in the endgame, i suppose
2013-03-21 19:40:17	ab9rf	but a win in the foregame
2013-03-21 19:40:23	docksider	Imo that should be solved just before linking, recompile all the imported code for your types. It would probably increase the time needed to compile large projects a lot
2013-03-21 19:40:26	Mortchek	ab9rf, oh I wouldn't call using a map instead of a [(Position, Piece)] premature optimization. That's just leveraging abstraction to simplify code.
2013-03-21 19:40:55	ski	docksider : doesn't solve the polymorphic recursion case; you'd need RTCG for that
2013-03-21 19:40:57	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-21 19:41:03	ab9rf	Mortchek: on the other hand, the list of pieces strategy makes "is the game over" test fairly quick :)
2013-03-21 19:41:24	-->	tibbe (~tibbe@216.239.45.130) has joined #haskell
2013-03-21 19:41:39	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-21 19:41:46	<--	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has quit (Quit: leaving)
2013-03-21 19:41:46	docksider	ski: I don't understand why I need RTCG for taht
2013-03-21 19:41:46	ab9rf	Mortchek: i suspect that it's a tradeoff, you'll gain performance in some places and lose it elsewhere. :)
2013-03-21 19:41:50	docksider	that*
2013-03-21 19:42:14	monochrom	do you know polymorphic recursion?
2013-03-21 19:42:19	ab9rf	Mortchek: pick the representation that makes your algorithm easier to express and make it faster later :)
2013-03-21 19:42:20	docksider	no
2013-03-21 19:42:27	Mortchek	ab9rf, indeed \o/
2013-03-21 19:42:31	-->	lcfrs (~lcfrs@8.25.197.25) has joined #haskell
2013-03-21 19:42:35	<--	madjestic (~madjestic@178.230.54.14) has quit (Ping timeout: 252 seconds)
2013-03-21 19:42:40	docksider	I guess that is what im missing then :)
2013-03-21 19:42:48	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-21 19:42:53	ab9rf	Mortchek: i can't decide whether one list of pieces, or two, makes more sense
2013-03-21 19:43:00	supki	adek: if something returns Maybe it always returns Maybe, a tutorial is probably outdated
2013-03-21 19:43:03	ab9rf	Mortchek: i mean, yeah, you could just have one list and use filter i guess
2013-03-21 19:43:21	ab9rf	black = (filter . isBlack) pieces
2013-03-21 19:43:44	docksider	I was about to say what would you need that for
2013-03-21 19:43:50	docksider	then I realized
2013-03-21 19:43:52	docksider	Yes
2013-03-21 19:43:57	docksider	that might be a problem
2013-03-21 19:44:02	Mortchek	ab9rf, I think a Map Position Piece mixing both colors would be all right.
2013-03-21 19:44:15	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-21 19:44:37	docksider	Well generic polymorphic reursion might be a problem
2013-03-21 19:44:43	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 19:44:55	ab9rf	Mortchek: it's probably a god place to start
2013-03-21 19:44:57	ab9rf	er, good
2013-03-21 19:45:20	ski	> let foo :: Show a => [a] -> [String]; foo [    ] = []; foo (a:as) = show a : foo (map (:[]) as) in foo [0,1,2,3]
2013-03-21 19:45:21	docksider	But i can't imagine any complex usecases for it
2013-03-21 19:45:22	lambdabot	  ["0","[1]","[[2]]","[[[3]]]"]
2013-03-21 19:45:27	ab9rf	Mortchek: plus that is a fairly general presentation, you could easily generalize it to 3d checkers or chinese checkers
2013-03-21 19:45:42	Mortchek	Or even many-team checkers :)
2013-03-21 19:45:44	ab9rf	Mortchek: just by changing the "Position" type and "Piece" types
2013-03-21 19:46:02	ab9rf	Mortchek: chinese checkers can be played by up to six players or with teams of two or three
2013-03-21 19:46:09	ski	docksider : consider this function ^. you can't know until run-time how many monomorphic version of it you'll need
2013-03-21 19:46:09	Mortchek	Ah, neat.
2013-03-21 19:46:25	docksider	If it depends on IO atleast
2013-03-21 19:46:36	ab9rf	Mortchek: it's a triangular grid board so representing the squares would be more interesting but the basic structure would be the same
2013-03-21 19:46:50	ab9rf	Mortchek: oh, there's a hakcage library for this sort of thig
2013-03-21 19:46:53	ab9rf	just remembered it
2013-03-21 19:46:53	docksider	But yes, it very much justifies boxing
2013-03-21 19:46:55	Mortchek	As long as you can establish a coordinate system and a sense of adjacency, you can do it.
2013-03-21 19:47:06	ab9rf	@hackage grid
2013-03-21 19:47:06	lambdabot	http://hackage.haskell.org/package/grid
2013-03-21 19:47:22	Mortchek	:0 That is neat.
2013-03-21 19:47:22	docksider	ski: Thanks I understand the problem now :)
2013-03-21 19:47:27	ab9rf	Mortchek: it was mentioned in one of the "games in haskell" articles i read the other day
2013-03-21 19:47:39	ab9rf	Mortchek: might work for you,
2013-03-21 19:47:40	docksider	Also gained a bit of respect for cons-cells
2013-03-21 19:47:41	Mortchek	Got the link to the article? I wanna get into that stuff.
2013-03-21 19:47:48	ab9rf	Mortchek: lemme see if i can fnd it
2013-03-21 19:48:19	ski	docksider : also, potential for code explosion
2013-03-21 19:48:36	adek	adek: Indeed. It fails to compile, thank you.
2013-03-21 19:48:49	adek	s/adek/supki :-)
2013-03-21 19:49:09	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-21 19:49:30	<--	MrZepeda (~textual@201.139.150.40.cable.dyn.cableonline.com.mx) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-21 19:49:56	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-21 19:50:20	ab9rf	Mortchek: the obvious starting point is http://www.haskell.org/haskellwiki/Game_Development
2013-03-21 19:50:31	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-21 19:50:54	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-21 19:51:02	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Client Quit)
2013-03-21 19:51:11	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-21 19:51:55	-->	Philippa (~user@dab-bas2-h-11-10.dab.02.net) has joined #haskell
2013-03-21 19:52:13	ab9rf	Mortchek: unfortunately i read the article on my phone which doesn't stash browser history as well, i can't find it
2013-03-21 19:52:22	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 252 seconds)
2013-03-21 19:52:25	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-21 19:52:54	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Client Quit)
2013-03-21 19:53:23	chrisirc	To resolve "Ambiguous module name `Data.Vector': it was found in multiple packages: vector-0.10.0.1 AC-Vector-Fancy-2.4.0" it works to pass ghci the -hide-package option;
2013-03-21 19:53:24	-->	apucacao (~apucaca@12.250.157.102) has joined #haskell
2013-03-21 19:53:45	chrisirc	but, for better comfort, location, etc., could I say the same thing in the source file?
2013-03-21 19:54:01	johnw	import "vector" Data.Vector works
2013-03-21 19:54:03	chrisirc	i.e. change "import Data.Vector" to something that qualifies it?
2013-03-21 19:54:07	chrisirc	ah
2013-03-21 19:54:28	johnw	it'll want an extension, but it should name it in the error message
2013-03-21 19:54:46	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: rebooting with vmlinuz-linux-ck)
2013-03-21 19:55:06	ab9rf	Mortchek: "haskell game development" as a google search found several decent articles for me
2013-03-21 19:56:02	-->	ncw (ncw@conference/pycon/x-utqfkaqquxlavymk) has joined #haskell
2013-03-21 19:56:18	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 19:56:36	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-21 19:56:52	Mortchek	ab9rf, yeah, I've checked out some of those, but was curious about this one in particular. Thanks though.
2013-03-21 19:56:57	<--	Axman6 (~Axman6@pdpc/supporter/student/Axman6) has quit (Ping timeout: 256 seconds)
2013-03-21 19:57:39	-->	|akh| (~akh@80-71-135-67.u.parknet.dk) has joined #haskell
2013-03-21 19:57:52	<--	Philippa (~user@dab-bas2-h-11-10.dab.02.net) has quit (Ping timeout: 256 seconds)
2013-03-21 19:57:59	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-21 19:58:43	<--	Taneb (~nathan@host-2-97-152-171.as13285.net) has quit (Quit: Leaving)
2013-03-21 19:59:12	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-03-21 19:59:19	<--	shock_one (~shock_one@46.118.141.174) has quit (Ping timeout: 264 seconds)
2013-03-21 19:59:31	<--	osxorgate (~osxorgate@94.142.213.250) has quit (Remote host closed the connection)
2013-03-21 19:59:37	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-21 19:59:54	ab9rf	Mortchek: i'm not sure which one it was that mentioned grid
2013-03-21 20:00:16	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Quit: Page closed)
2013-03-21 20:00:30	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 20:00:32	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-21 20:00:47	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-21 20:01:14	-->	xcv (~xcv@VPN-18-101-24-175.MIT.EDU) has joined #haskell
2013-03-21 20:01:59	ab9rf	i dunno how grid performs
2013-03-21 20:02:14	-->	kludgy (~Adium@24.85.254.223) has joined #haskell
2013-03-21 20:02:23	ab9rf	but it seems that it might be a nice basis to build on, especially ince it also would allow for some fun modifications
2013-03-21 20:02:32	ab9rf	checkers on a hex grid could be fu
2013-03-21 20:02:33	-->	ewt (~eric@ws45-105.wireless.dynamic.msstate.edu) has joined #haskell
2013-03-21 20:02:35	ab9rf	fu
2013-03-21 20:02:36	ab9rf	n
2013-03-21 20:02:52	Mortchek	No that's right too, checkers on a hex grid could also be fuuuuu
2013-03-21 20:03:01	chrisirc	should I use Data.Array.Repa or some of the other (newer) parallel array libraries if I'm starting out in high performance computing?
2013-03-21 20:03:19	monochrom	yes
2013-03-21 20:03:28	chrisirc	Trying that one currently, but finding it hard to get my first program to run (getting type error over my head right now).
2013-03-21 20:03:42	<--	adek (~adek@5.134.64.87) has quit (Ping timeout: 264 seconds)
2013-03-21 20:04:09	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-21 20:04:31	chrisirc	monochrom, whas that a yes towards me?
2013-03-21 20:04:38	<--	sajith (~sajith@bog.hcoop.net) has quit (Quit: Changing server)
2013-03-21 20:05:04	monochrom	yes
2013-03-21 20:05:13	chrisirc	k
2013-03-21 20:05:16	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-03-21 20:05:24	<--	sajith (~sajith@bog.hcoop.net) has quit (Client Quit)
2013-03-21 20:05:28	ab9rf	Mortchek: the one thing grid doesn't do is give you a easy way to enumerate jump moves
2013-03-21 20:05:33	monochrom	repa is a good place to start
2013-03-21 20:05:42	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-03-21 20:05:56	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-03-21 20:06:01	ab9rf	Mortchek: i'm also tempted to extend it to allow joining two bounded grids along a given edge
2013-03-21 20:06:06	-->	chrisdone (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-03-21 20:06:07	-->	dylukes (~dylukes@eb-wireless-pittnet-150-212-34-34.wireless.pitt.edu) has joined #haskell
2013-03-21 20:06:38	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 246 seconds)
2013-03-21 20:06:59	-->	napping (~brandon@qchost236-242.cs.illinois.edu) has joined #haskell
2013-03-21 20:07:08	-->	Fuuzetsu (~Shana@limol.bath.ac.uk) has joined #haskell
2013-03-21 20:07:08	<--	Fuuzetsu (~Shana@limol.bath.ac.uk) has quit (Changing host)
2013-03-21 20:07:08	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-21 20:07:30	<--	|akh| (~akh@80-71-135-67.u.parknet.dk) has quit (Quit: leaving)
2013-03-21 20:08:09	ab9rf	Mortchek: with self joins you can make the double mobius board, which is freaky weird to play on
2013-03-21 20:09:16	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 240 seconds)
2013-03-21 20:10:56	<--	[swift] (~mfowler@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-21 20:10:58	chrisdone	so i'm messing around with aeson and i don't quite follow how to use the takeWhile of Data.Attoparsec.Text:
2013-03-21 20:10:58	chrisdone	λ> eitherResult (parse (takeWhile (const True)) "look ma, no hands!") →  Left "Result: incomplete input"
2013-03-21 20:10:58	lambdabot	chrisdone: You have 1 new message. '/msg lambdabot @messages' to read it.
2013-03-21 20:10:58	chrisdone	whereas λ> eitherResult (parse (takeWhile (/= '!')) "look ma, no hands!") → Right "look ma, no hands"
2013-03-21 20:10:58	chrisdone	based on my experience of Parsec, i'd expect EOF to count as a 'False' which is triggered on the ! here, but it ain't, and it don't. it makes writing some parsers rather tricky or impossible. what's the deal?
2013-03-21 20:11:03	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-21 20:11:19	<--	cognominal (~cognomina@37.160.40.245) has quit (Ping timeout: 264 seconds)
2013-03-21 20:11:21	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-21 20:11:36	<--	perspectival (~perspecti@163.105.broadband14.iol.cz) has quit (Ping timeout: 264 seconds)
2013-03-21 20:11:53	chrisdone	i'm writing a parser now, so i can produce an example of where this makes things hard, maybe you have some suggestions for alternative ways to write the code
2013-03-21 20:12:04	<--	boegel (~boegel@109.130.137.51) has quit (Quit: This computer has gone to sleep)
2013-03-21 20:12:45	-->	Axman6 (~Axman6@pdpc/supporter/student/Axman6) has joined #haskell
2013-03-21 20:13:03	napping	eitherResult flattens "Partial" to an error
2013-03-21 20:13:07	<--	gridaphobe (~gridaphob@128.54.44.136) has quit (Ping timeout: 264 seconds)
2013-03-21 20:13:08	Mortchek	ab9rf, what's that?
2013-03-21 20:13:36	<--	earspliT (~earsplit@sub85-039.bucknell.edu) has quit (Read error: Operation timed out)
2013-03-21 20:13:45	ab9rf	Mortchek: the double mobius board?  it's a square board, where the north edge is connected to the south edge with a half twist, amd the east edge is connected to the west edge also with a half twist
2013-03-21 20:13:55	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-21 20:14:07	chrisdone	napping: ah, so i could use parseWith, perhaps
2013-03-21 20:14:10	Mortchek	Half-twist?
2013-03-21 20:14:32	luite	chrisdone: hey I want to submit a "foreign import javascript" patch to GHC HQ? would something like that also be useful fay? if so, any requests or suggestions?
2013-03-21 20:14:40	ab9rf	Mortchek: (0,0) is adajcent to (0,1), (1,0), and (n-1,n-1)
2013-03-21 20:14:42	johnw	chrisdone: what about using endOfInput?
2013-03-21 20:14:52	johnw	or atEnd?
2013-03-21 20:15:23	napping	or parseOnly, if you want something simple
2013-03-21 20:15:26	ab9rf	Mortchek: (0,1) is adajcent to (0,0), (0,2), (1,1), and (n-1,n-2)
2013-03-21 20:15:39	-->	hypestar (~user@2805ds5-fb.0.fullrate.dk) has joined #haskell
2013-03-21 20:16:04	<--	sonda (~sonda@adsl-ull-64-181.50-151.net24.it) has quit (Ping timeout: 246 seconds)
2013-03-21 20:16:05	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-21 20:16:11	<--	typoclass (~typoclass@p4FC916F4.dip.t-dialin.net) has quit (Quit: Leaving.)
2013-03-21 20:16:19	ab9rf	Mortchek: basically (0,k) and (n-1,n-1-k) are adjacent
2013-03-21 20:16:20	chrisdone	ah, parseOnly does the trick
2013-03-21 20:16:25	-->	cognominal (~cognomina@37.160.40.245) has joined #haskell
2013-03-21 20:16:30	Iceland_jack	hugs!
2013-03-21 20:16:37	luite	chrisdone: i have a patch ready that supports this: http://hpaste.org/84429
2013-03-21 20:16:44	ab9rf	Mortchek: the toroidal map has (0,k) and (n-1,k) adjacent (no twist)
2013-03-21 20:17:05	ab9rf	Mortchek: and also (k,0) and (k,n-1); if you only do one dimension you have a cylinder instead
2013-03-21 20:17:30	ab9rf	with a twist in one dimension only it's a simple mobius strip
2013-03-21 20:17:31	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 20:17:32	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 20:18:16	-->	sonda (~sonda@ppp-245-14.26-151.libero.it) has joined #haskell
2013-03-21 20:18:17	Mortchek	ab9rf, I'm having trouble visualizing that to the point that it can be called a half-twist. Got a diagram?
2013-03-21 20:18:22	 *	sproingie tries to visualize it and fails.  guessing it's impossible in three dimensions?
2013-03-21 20:18:35	chrisdone	johnw: i think those don't help. e.g. λ> eitherResult (parse (do takeWhile (const True); endOfInput → Left "Result: incomplete input"
2013-03-21 20:18:41	sproingie	the double möbius that is
2013-03-21 20:18:53	ab9rf	sproingie: it's an imbedding in a manifold of some sort but yeah, it's not possible to exist.  probably a klein bottle.
2013-03-21 20:19:01	chrisdone	johnw: whereas λ> parseOnly (takeWhile (const True)) "look ma, no hands!" → Right "look ma, no hands!"
2013-03-21 20:19:03	<--	tibbe (~tibbe@216.239.45.130) has quit (Quit: tibbe)
2013-03-21 20:19:06	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Client Quit)
2013-03-21 20:19:12	napping	why are you using eitherResult?
2013-03-21 20:19:24	ab9rf	sproingie: but i won't attest to that, i'm not an algebraic topologist.
2013-03-21 20:19:46	chrisdone	napping: so i can look at the error or get the value. what do you mean?
2013-03-21 20:19:57	<--	Enigmagic (enigmo@unaffiliated/enigmagic) has quit (Quit: brb)
2013-03-21 20:20:00	napping	there's a Show instance for Result
2013-03-21 20:20:04	chrisdone	napping: just the typical parsec use-case. parse some stuff
2013-03-21 20:20:08	ab9rf	er, possible in three dimensions alone.
2013-03-21 20:20:18	chrisdone	napping: i don't mean inspect with my eyes, i mean with the code
2013-03-21 20:20:20	chrisdone	luite: hmm
2013-03-21 20:20:28	ab9rf	Mortchek: the single half twist (in one direction only) is a mobius strip
2013-03-21 20:20:30	napping	seems like getting Partial _ vs. Left <error> would make these situations a bit clearer
2013-03-21 20:20:32	 *	chrisdone reads
2013-03-21 20:20:44	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Ping timeout: 272 seconds)
2013-03-21 20:21:00	ab9rf	i don't think parsec supports partial parsing
2013-03-21 20:21:09	napping	0.
2013-03-21 20:21:28	chrisdone	ab9rf: pretty sure it does? you can consume as much as you want. maybe that's not what you mean?
2013-03-21 20:21:44	luite	chrisdone: it's just a foreign import declaration that accepts any string (but will throw an error if you use it when generating native code)
2013-03-21 20:21:45	alexander__b	the book I'm following tells me to make scripts, do :l script -- and reload it when I change it. is there a way to get vim bound to the interpreter like you can with BASH and Python (and others)?
2013-03-21 20:21:57	ab9rf	chrisdone: partial parsing means that when you fail, you leave the input at the fail point and return what you successfully parse
2013-03-21 20:22:14	chrisdone	ahh, ok
2013-03-21 20:22:17	napping	The problem is that without using something like parseOnly to tell it input is over, you can't tell the difference between the cases where the string so far is valid but more input might also be accepted, and the case where the current input is invalid, but more might finish the parse
2013-03-21 20:22:27	alexander__b	e.g. in BASH ("everyone" has this), you may run fc -- or if you are using standard keybinds do ^X ^E to get a vim instance.
2013-03-21 20:22:29	ab9rf	chrisdone: useful when you have one language that contains self-bounding constructs within it that are in a different language
2013-03-21 20:22:30	luite	chrisdone: the rest is the same as ccall, but that could be changed, it could allow unboxed tuple returns, or perhaps more types that can be automatically marshalled, things like that
2013-03-21 20:23:04	<--	sonda (~sonda@ppp-245-14.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-21 20:23:10	chrisdone	luite: hmm. what about passing Strings to it?
2013-03-21 20:23:14	ab9rf	chrisdone: it's hard to do in parsec because of how parsec works
2013-03-21 20:23:22	supki	alexander__b: you probably want :e
2013-03-21 20:23:34	ab9rf	chrisdone: LR parsers can do partial parsing fairly easily
2013-03-21 20:23:35	<--	dmac (~Adium@12.207.22.242) has quit (Quit: Leaving.)
2013-03-21 20:23:37	alexander__b	supki: glorious! thanks.
2013-03-21 20:23:41	-->	duosrx (~duosrx@2a01:e35:8b02:46d0:c58c:6ac0:2500:d5bb) has joined #haskell
2013-03-21 20:23:48	luite	chrisdone: would the callee get a javascript string? or a reference to some list element?
2013-03-21 20:24:18	chrisdone	luite: the callee would get a javascript string
2013-03-21 20:24:46	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-21 20:25:02	chrisdone	String -> String (at least in fay) is unserialize_back_to_fay_list(the_js_fun(serialize_to_js_string(x))
2013-03-21 20:25:36	luite	chrisdone: I'll check if that's easily doable there
2013-03-21 20:25:52	-->	mjrosenb (~mjrosenb@c-71-58-70-139.hsd1.pa.comcast.net) has joined #haskell
2013-03-21 20:25:54	byorgey	cm
2013-03-21 20:26:03	chrisdone	luite: i guess it's just a white list in ghc's ffi code right?
2013-03-21 20:26:45	-->	fxr (~user@217.131.228.206) has joined #haskell
2013-03-21 20:26:45	mjrosenb	morning everyone.  is there a generic frp libary that isn't tied to a particular gui/other means of inputting data?
2013-03-21 20:27:11	chrisdone	luite: the name 'CString' doesn't even make sense for javascript, thinking about it. it should be JSString or something. but i guess that doesn't fit well with your existing ghcjs stuff
2013-03-21 20:27:12	luite	chrisdone: for things like Int, there is already code to unbox and rebox the primitive Int# inside, in core
2013-03-21 20:27:42	-->	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has joined #haskell
2013-03-21 20:27:50	chrisdone	luite: ah right. cool. so that kind of convenient serialization is justifiable if it already exists
2013-03-21 20:28:18	<--	duosrx (~duosrx@2a01:e35:8b02:46d0:c58c:6ac0:2500:d5bb) has quit (Ping timeout: 264 seconds)
2013-03-21 20:28:21	jfischoff	mjrosenb: netwire? (could be wrong…)
2013-03-21 20:28:28	alexander__b	supki: kind of wish :wq would do :r, but I think that might be the kind of thing that would bite me in the ass some day.
2013-03-21 20:28:48	-->	sclv (c62d125f@gateway/web/freenode/ip.198.45.18.95) has joined #haskell
2013-03-21 20:28:49	supki	alexander__b: it does :r in newer versions
2013-03-21 20:28:55	chrisdone	luite: thinking aloud, kinda weird that this kind of thing isn't done for Strings, i suppose. it's not like it would be a performance hit if you're going to be using withCString anyway…
2013-03-21 20:28:57	supki	starting from 7.6.1 I think
2013-03-21 20:29:08	luite	chrisdone: I'm not too worried about names, CString is just an pointer, those will still be supported for all the other things that depend on them. but hopefully more convenient alternatives are possible for real strings
2013-03-21 20:29:39	alexander__b	supki: I only have 6.12.3-r2, as I was told this was the most OK one to start out with. it's the only one that's in Gentoo stable as well. (testing has up to 7.6.2.)
2013-03-21 20:29:55	mjrosenb	jfischoff: neat, I'll look into it.
2013-03-21 20:29:59	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-21 20:30:01	chrisdone	luite: sure
2013-03-21 20:30:03	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-03-21 20:30:14	<--	Philonous_ (~Philonous@dslb-178-005-137-139.pools.arcor-ip.net) has quit (Read error: Connection reset by peer)
2013-03-21 20:30:14	-->	adek (~adek@5.134.64.87) has joined #haskell
2013-03-21 20:30:25	luite	chrisdone: hmm, i don't know, i think a problem might be that converting the string also depends on the system encoding
2013-03-21 20:30:28	-->	LAMMJohnson (~ja@user-5af43fd6.broadband.tesco.net) has joined #haskell
2013-03-21 20:30:38	<--	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has quit (Read error: Operation timed out)
2013-03-21 20:30:50	-->	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has joined #haskell
2013-03-21 20:30:52	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-21 20:31:00	<--	dylukes (~dylukes@eb-wireless-pittnet-150-212-34-34.wireless.pitt.edu) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-21 20:31:13	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 252 seconds)
2013-03-21 20:31:14	<--	alkabetz (~bbaren@CONTENTS-VNDER-PRESSVRE.MIT.EDU) has quit (Read error: Connection reset by peer)
2013-03-21 20:31:14	<--	ezyang_ (~ezyang@DR-WILY.MIT.EDU) has quit (Read error: Connection reset by peer)
2013-03-21 20:31:32	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-21 20:31:37	chrisdone	luite: yeah if that's do-able, that would be proper cool. it's tricky as fay's ffi is a lot more magic and people kind of expect these things of it now. well, people even want polymorphic types to be serialized automatically
2013-03-21 20:32:32	ski	`fay' ?
2013-03-21 20:32:42	chrisdone	@google fay lang
2013-03-21 20:32:44	lambdabot	https://github.com/faylang/fay/wiki
2013-03-21 20:33:12	ski	(hm, empty page to me)
2013-03-21 20:33:16	<--	bitonic (~user@dyn1216-32.wlan.ic.ac.uk) has quit (Ping timeout: 240 seconds)
2013-03-21 20:33:35	-->	Enigmagic (enigmo@unaffiliated/enigmagic) has joined #haskell
2013-03-21 20:33:40	<--	nogs (~dnogs@187-072-184-065.static.ctbctelecom.com.br) has quit (Remote host closed the connection)
2013-03-21 20:34:02	chrisdone	ski: well it's a compiler from a subset of haskell to javascript
2013-03-21 20:34:24	chrisdone	(based on haskell-src-exts)
2013-03-21 20:34:36	-->	Suika (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-21 20:34:46	<--	Kindaro (~Kindaro@84.23.59.80) has quit (Read error: Connection reset by peer)
2013-03-21 20:35:02	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 20:35:18	<--	argiopeweb (~elliot@155.31.73.100) has quit (Ping timeout: 272 seconds)
2013-03-21 20:35:26	luite	ski: Fay has substituted typeclasses with magic!
2013-03-21 20:35:43	alexander__b	can someone point me to the most accepted code styles? some dos and donts? e.g. when to use linebreaks, how many spaces, soft or hard tabs, etc.
2013-03-21 20:35:53	<--	ncw (ncw@conference/pycon/x-utqfkaqquxlavymk) has quit (Remote host closed the connection)
2013-03-21 20:35:56	-->	stephenjudkins (~textual@c-76-105-181-98.hsd1.or.comcast.net) has joined #haskell
2013-03-21 20:35:57	<--	apucacao (~apucaca@12.250.157.102) has quit (Quit: apucacao)
2013-03-21 20:35:57	Botje	haskell and tabs = sadness
2013-03-21 20:36:03	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 276 seconds)
2013-03-21 20:36:21	chrisdone	luite: i actually tried to use some of the haskell-suite packages the other day but couldn't get the things to compile on my ghc version. kind of ironic that the libraries made to make non-GHC-dependent haskell compilers are dependent upon GHC's latest gubbins
2013-03-21 20:36:29	luite	hehe
2013-03-21 20:36:52	alexander__b	Botje: hard tabs in general make me cringe
2013-03-21 20:37:05	luite	chrisdone: are they almost ready for general use though?
2013-03-21 20:37:13	-->	Lethalman (~lethal@ppp-28-30.28-151.libero.it) has joined #haskell
2013-03-21 20:37:18	-->	monoidal (~chatzilla@212-87-13-67.sds.uw.edu.pl) has joined #haskell
2013-03-21 20:37:33	Botje	alexander__b: i'm usually a tabs+spaces person, but haskell is spaces only.
2013-03-21 20:37:50	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Ping timeout: 272 seconds)
2013-03-21 20:38:05	alexander__b	I set up https://github.com/wlangstroth/vim-haskell -- but obviously this doesn't enforce some dos and donts. such as when (if ever) to break if/then/else into several lines and so on.
2013-03-21 20:38:19	<--	hypestar (~user@2805ds5-fb.0.fullrate.dk) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 20:38:29	chrisdone	luite: lots of TODOs, i think still in alpha stage. it's hard to follow, info's scattered all around
2013-03-21 20:38:30	<--	adek (~adek@5.134.64.87) has quit (Ping timeout: 264 seconds)
2013-03-21 20:38:44	chrisdone	luite: (i mean it's hard to follow the development of the 'suite' as a whole)
2013-03-21 20:39:24	luite	chrisdone: but they're still working on it, right?
2013-03-21 20:39:38	-->	jMCg (~hiro@apache/committer/igalic) has joined #haskell
2013-03-21 20:39:42	alexander__b	also despite not starting haskell yet (starting Monday), please tell me it's one of them neat languages where statements and expressions aren't two entirely differnt things, making things like "a = if b then c else d" possible.
2013-03-21 20:39:44	jMCg	Hello happy people o/~
2013-03-21 20:39:51	alexander__b	(or equivalent)
2013-03-21 20:40:17	geekosaur	you could say that... there isn't really a concept of statements in haskell
2013-03-21 20:40:18	sproingie	alexander__b: it's exactly one of those languages.  in fact it's hard to say haskell has "statements" at all
2013-03-21 20:40:21	shachaf	alexander__b: There are no statements.
2013-03-21 20:40:30	-->	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has joined #haskell
2013-03-21 20:40:37	sproingie	top-level bindings are about as close as it gets to discrete containers of expressions
2013-03-21 20:40:43	alexander__b	thank god^wthe language designers.
2013-03-21 20:40:46	geekosaur	(do expressions can *look* like statements, but in fact are expressions)
2013-03-21 20:40:51	shachaf	alexander__b: (But there are things that behave a lot like statements. But they're actually expressions.)
2013-03-21 20:40:52	<--	cognominal (~cognomina@37.160.40.245) has quit (Read error: Connection reset by peer)
2013-03-21 20:40:53	jMCg	One of my devs is asking me to setup a buildslave with haskel platform in the latest version, and with cabal in the latest version. Stuipid question time: Can I install/update cabal (packages) globally? Are there Debuntu packages for the latest haskel/caball?
2013-03-21 20:40:57	-->	powergiant (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-21 20:41:19	napping	jMCg: there are rarely packages for the latest version
2013-03-21 20:41:33	chrisdone	luite: mm last push was a month ago
2013-03-21 20:41:47	sproingie	i couldn't make eclipseFP play nice with the haskell platform, so i built 7.6 ... we'll see how it goes
2013-03-21 20:41:49	alexander__b	I made a thread on reddit on how to learn haskell in a week. most people just told me that I couldn't, hehe. I'll try, and see how far I get.
2013-03-21 20:41:59	sproingie	you can learn the basics in a week
2013-03-21 20:42:07	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-21 20:42:12	luite	chrisdone: hmm, so you might need to push some Fayians their way to help
2013-03-21 20:42:17	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-21 20:42:18	chrisdone	jMCg: yeah there are debian packages for both. you can also install globally or per user. there's a flag to pass to cabal to choose
2013-03-21 20:42:19	sproingie	haskell is one of those "easy to learn, hard to master" things
2013-03-21 20:42:20	napping	but the Haskell platform installer should work fine. You can install packages globally, but you have to be careful about dependencies. Might be better just to leat users install
2013-03-21 20:42:43	chrisdone	luite: yeah i guess that's one way to answer people demanding type-classes =p "send patches to niklas!"
2013-03-21 20:43:20	luite	i tried compiling haskell-src-exts with ghcjs this weekend... took 20GB RAM at first :/
2013-03-21 20:43:27	luite	i optimized it later
2013-03-21 20:43:35	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-21 20:43:39	alexander__b	sproingie: I usually spend three days to get the basics, but since I haven't yet entirely groked functional programming (to my great shame), I thought I'd give it a week. I only know basic common lisp and some scala.
2013-03-21 20:43:40	-->	cognominal (~cognomina@37.160.40.245) has joined #haskell
2013-03-21 20:44:06	shachaf	Shame is not a good mindset for lerning things.
2013-03-21 20:44:09	<--	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has quit (Ping timeout: 245 seconds)
2013-03-21 20:44:11	jMCg	chrisdone: AAaah.. ACK. (My assumption was, if I do it as root, it will automagickally install globally)
2013-03-21 20:44:13	chrisdone	luite: lol. fay also hogs memory. 1.2gb or so reported by johnw
2013-03-21 20:44:16	alexander__b	sproingie: I know enough common lisp to be annoyed when I found out that * 6 7 returned an error. =/
2013-03-21 20:44:33	sproingie	eh?  (* 6 7) works for me
2013-03-21 20:44:36	-->	vrume21 (cfe5b7cc@gateway/web/freenode/ip.207.229.183.204) has joined #haskell
2013-03-21 20:44:43	<--	ccasin (~ccasin@158.130.53.65) has quit (Ping timeout: 245 seconds)
2013-03-21 20:44:47	alexander__b	shachaf: my mindset is mostly "functional programming is the future for game programming".
2013-03-21 20:44:49	sproingie	the parens are kinda part of the syntax there
2013-03-21 20:45:02	napping	There's quite a range in how functional scala and common lisp can be
2013-03-21 20:45:03	chrisdone	jMCg: istr global used to be the default, then it was changed to user. maybe i'm misremembering
2013-03-21 20:45:03	-->	ncw (ncw@conference/pycon/x-fjncgwdyikmuxypl) has joined #haskell
2013-03-21 20:45:05	shachaf	Oh, you're the person who posted that post on Reddit. I second those people's recommendations to spend more than a week.
2013-03-21 20:45:07	hiptobecubic	has anyone tried tying eclipsefp into vim with eclim yet?
2013-03-21 20:45:11	alexander__b	sproingie: I get a bunch of errors.
2013-03-21 20:45:18	luite	chrisdone: GHC also uses 1.3GB on these files, and produces an 8MB .o file (ghcjs now uses 5GB or so, still some optimization needed, and produces 70MB javascript files (before minification))
2013-03-21 20:45:29	shachaf	The primary benefit you'll see is most likely changes in how you think about things.
2013-03-21 20:45:31	alexander__b	sproingie: well just the one about no instance for(num t -> a))
2013-03-21 20:45:40	 *	geekosaur hopes you are not trying to use clisp with ghci... haskell is not clisp
2013-03-21 20:45:53	monoidal	alexander__b: in haskell, it is (*) 6 7
2013-03-21 20:45:54	chrisdone	luite: haha, yeah that's pretty massive. stretching the limits of what google closure can handle
2013-03-21 20:46:00	alexander__b	monoidal: ah
2013-03-21 20:46:01	luite	chrisdone: (that can all be reduced a lot by disabling -O)
2013-03-21 20:46:09	sproingie	ohhhh i thought you were getting that in common lisp
2013-03-21 20:46:28	sproingie	in haskell it can be (*) 6 7 but you can just do 6 * 7
2013-03-21 20:46:28	jMCg	oookay, so what am I doing wrong here: http://apaste.info/llUz ?
2013-03-21 20:46:29	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 20:46:29	monoidal	alexander__b: also note that unlike in lisps operators such as (*), (+) are binary
2013-03-21 20:46:30	alexander__b	monoidal: that is delicious. how do I nest though?
2013-03-21 20:46:31	sproingie	it even has precedence
2013-03-21 20:46:32	alexander__b	sproingie: sorry heh
2013-03-21 20:46:39	shachaf	Haskell is not Lisp -- you won't get that far by expecting it to be Lisp.
2013-03-21 20:46:41	monoidal	alexander__b: 6 * 7 * 8 or product [6,7,8]
2013-03-21 20:46:43	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-21 20:46:54	shachaf	* is an infix operator.
2013-03-21 20:47:06	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-21 20:47:08	alexander__b	monoidal: I meant can I nest it with Polish notation?
2013-03-21 20:47:12	sproingie	it should take you less than a week to get through LYAH
2013-03-21 20:47:20	monoidal	alexander__b: (*) 6 ((*) 7 8)
2013-03-21 20:47:22	alexander__b	shachaf: I really don't. I just like Polish notation for maths.
2013-03-21 20:47:24	sproingie	after which you'll know the basics and then some
2013-03-21 20:47:54	S11001001	@remember sproingie it should take you less than a week to get through LYAH
2013-03-21 20:47:54	lambdabot	Done.
2013-03-21 20:47:55	sproingie	this does assume that you spend time reading it and not here or reddit :)
2013-03-21 20:47:57	alexander__b	monoidal: that's kind of ugly but hey at least it's doable. worst case, I can write my own functions for it.
2013-03-21 20:48:19	-->	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-21 20:48:23	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-21 20:48:25	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Quit: WeeChat 0.3.8)
2013-03-21 20:48:29	alexander__b	sproingie: I use a stopwatch for work. it's off ATM. ;-)
2013-03-21 20:48:33	sproingie	with my poor attention span it would take me about 2-3 weeks but that's just me
2013-03-21 20:48:34	-->	user0213120 (~user02131@89.47.4.234) has joined #haskell
2013-03-21 20:48:49	chrisdone	my one recommendation for learning haskell most efficiently: properly understand how types, kinds and type-classes work and properly grok laziness and how it's implemented in the trivial case. those are the two _really_ foreign things that will trip you up later on. everything else is so-so imo
2013-03-21 20:48:54	shachaf	alexander__b: There are no varargs functions in Haskell (generally). Each function takes a aprticular number of arguments.
2013-03-21 20:49:02	shachaf	Well, in particular each function takes one argument.
2013-03-21 20:49:02	sproingie	namely one
2013-03-21 20:49:07	 *	sproingie loses
2013-03-21 20:49:28	shachaf	But you can pretend a function takes N arguments; but then it's always the same N.
2013-03-21 20:49:28	sproingie	i had that explained really well in LYYARWGH if i say so myself
2013-03-21 20:49:31	sproingie	i really regret erasing it
2013-03-21 20:49:39	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 20:49:58	sproingie	i even had exercises and everything
2013-03-21 20:50:00	alexander__b	scgilardi: aww. I wanted a min/max that takes vararg.
2013-03-21 20:50:05	napping	jMCg: cabal-install is the package with the "cabal" executable
2013-03-21 20:50:11	alexander__b	sorry shachaf ^
2013-03-21 20:50:29	geekosaur	alexander__b, in that case you may want the version that operates on lists
2013-03-21 20:50:29	shachaf	alexander__b: But there is a good reason for this, which you will find out in due time.
2013-03-21 20:50:32	monoidal	alexander__b: instead of vararg functions, haskell uses functions that take lists. for example, maximum/minimum
2013-03-21 20:50:43	alexander__b	shachaf: I don't doubt that. :-)
2013-03-21 20:50:44	--	Suika is now known as erkin
2013-03-21 20:50:51	-->	ccasin (~ccasin@GRW565-3.cis.upenn.edu) has joined #haskell
2013-03-21 20:50:51	alexander__b	monoidal: lists of arbitrary sizes?
2013-03-21 20:50:53	monoidal	alexander__b: you can convert a "binary" function to a function taking a list using fold
2013-03-21 20:50:57	geekosaur	(in some sense, everything in lisp is a list; haskell doesn't work that way, but there is a list type with useful operations)
2013-03-21 20:51:01	mikurubeam	alexander__b: Varargs are evil, how do you even give it a type?
2013-03-21 20:51:02	-->	afarmer_ (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has joined #haskell
2013-03-21 20:51:04	sproingie	alexander__b: all lists are arbitrary size
2013-03-21 20:51:06	monoidal	alexander__b: yes
2013-03-21 20:51:12	shachaf	mikurubeam: Using a list!
2013-03-21 20:51:16	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-03-21 20:51:19	napping	jMCg: Cabal is a Haskell library for doing package/build stuff that cabal uses
2013-03-21 20:51:19	monoidal	foldl (+) 0 [3,4,5]
2013-03-21 20:51:21	mikurubeam	shachaf: A list is not varargs.
2013-03-21 20:51:25	monoidal	> foldl (+) 0 [3,4,5]
2013-03-21 20:51:27	lambdabot	  12
2013-03-21 20:51:29	alexander__b	so can I uhm min makeThisIntoAList(3 4 5 6 18 24)?
2013-03-21 20:51:42	monoidal	> minimum [3,4,5,6]
2013-03-21 20:51:44	lambdabot	  3
2013-03-21 20:51:50	shachaf	mikurubeam: int foo(char x, int* vararg) { ... }
2013-03-21 20:51:51	sproingie	you'll learn a lot more reading LYAH than random Q&A here
2013-03-21 20:51:55	shachaf	Not in Haskell, though. :-)
2013-03-21 20:51:59	alexander__b	monoidal: I'm just wondering whether there is a "makethisintoalist"
2013-03-21 20:51:59	shachaf	==sproingie
2013-03-21 20:52:05	shachaf	alexander__b: See also the FAQ:
2013-03-21 20:52:07	shachaf	@where faq
2013-03-21 20:52:07	lambdabot	http://www.haskell.org/haskellwiki/FAQ
2013-03-21 20:52:14	monoidal	alexander__b: list notation is used for this
2013-03-21 20:52:15	alexander__b	cool
2013-03-21 20:52:31	mikurubeam	shachaf: C types do not really mean anything.
2013-03-21 20:52:41	-->	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has joined #haskell
2013-03-21 20:52:46	monoidal	alexander__b: I really recommend LYAH http://learnyouahaskell.com/chapters in case you haven't seen it yet
2013-03-21 20:52:56	shachaf	mikurubeam: That's not a C type, just C-ish notation.
2013-03-21 20:53:00	alexander__b	monoidal: I have that up, yes
2013-03-21 20:53:02	shachaf	mikurubeam: * means "zero or more", not "pointer"
2013-03-21 20:53:03	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-21 20:53:10	geekosaur	alexander__b, not in the sense of something built in that takes a lisp-notation thing and turns it into a haskell list; haskell is not lisp, it does not use lisp syntax. haskell syntax is [thing,another thing,..]
2013-03-21 20:53:12	shachaf	The point is that varargs are just notation for a list.
2013-03-21 20:53:18	alexander__b	monoidal: I'm going this route: http://stackoverflow.com/questions/1012573/getting-started-with-haskell -- well as much of it I can get through in a week's time.
2013-03-21 20:53:20	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-03-21 20:53:42	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 20:53:47	amyers	alexander__b: Why only a week?
2013-03-21 20:53:50	shachaf	I don't recommend "projecteuler" problems. In fact I recommend against them.
2013-03-21 20:53:51	mikurubeam	shachaf: I thought varargs, unlike list elements, were allowed to have heterogeneous types.
2013-03-21 20:53:53	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 20:54:00	-->	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has joined #haskell
2013-03-21 20:54:01	alexander__b	amyers: that's when my easter break is over.
2013-03-21 20:54:07	amyers	ah
2013-03-21 20:54:08	alexander__b	amyers: well, the time of it I have for haskell at least.
2013-03-21 20:54:10	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-21 20:54:15	shachaf	mikurubeam: If you restrict it to that then it becomes more complicated.
2013-03-21 20:54:16	alexander__b	amyers: I will still keep using it, if I like it.
2013-03-21 20:54:17	monoidal	alexander__b: I think it's a good list, but as shachaf I recommend against doing project euler
2013-03-21 20:54:21	mikurubeam	shachaf: When I think varargs, I think the abomination printf is.
2013-03-21 20:54:31	<--	Guest64340 (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-21 20:54:33	-->	jang1 (~Jan@host-78-145-247-1.as13285.net) has joined #haskell
2013-03-21 20:54:35	<--	lattenwald (~qalex@195.218.191.171) has quit (Ping timeout: 246 seconds)
2013-03-21 20:54:42	shachaf	mikurubeam: You can make a type-safe dependently-typed printf, surely.
2013-03-21 20:54:49	-->	[swift]_ (~mfowler@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-21 20:55:02	alexander__b	amyers: I'm a game programmer, so I'll use it for games if I can grok it.
2013-03-21 20:55:15	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-21 20:55:22	<--	dminus (~dminus@unaffiliated/dminus) has left #haskell
2013-03-21 20:55:23	shachaf	alexander__b: You'll benefit a lot more from allowing more than a week for a language, if what you're trying is the "one week per language" thing.
2013-03-21 20:55:25	-->	folone_ (~folone@brln-4dbad945.pool.mediaWays.net) has joined #haskell
2013-03-21 20:55:27	alexander__b	monoidal: they don't look appealing to me, so that's nice to hear. as mentioned ^ I'm a game programmer. I want immediately useful things. project euler is a bit... meh.
2013-03-21 20:55:33	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-21 20:55:40	shachaf	I don't care whether the language is Haskell. Whichever one it is, more time is better than more languages.
2013-03-21 20:55:43	alexander__b	shachaf: I have one week. I thought, hey, I need to learn haskell.
2013-03-21 20:56:01	shachaf	OK.
2013-03-21 20:56:18	shachaf	I think the "I want immediately useful things" mindset will be harmful, but I suppose we'll see.
2013-03-21 20:56:20	sproingie	haskell for games, sure, doable and been done for a couple reasonably polished games
2013-03-21 20:56:24	<--	plhk (~plhk@urban.v12.su) has quit (Read error: Connection reset by peer)
2013-03-21 20:56:34	sproingie	it's certainly a different world though
2013-03-21 20:56:34	-->	blankverse (~blankvers@165.225.134.102) has joined #haskell
2013-03-21 20:56:42	alexander__b	sproingie: if not haskell for games, then at least groking functional programming will be endlessly useful.
2013-03-21 20:56:44	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 20:56:53	sproingie	it will help you write better code in any language, yes
2013-03-21 20:56:53	chrisdone	my colleague learned haskell from LYAH and was writing a multithreaded server within a week
2013-03-21 20:56:54	jMCg	napping: but it says it's using the library version 1.14.0 too..
2013-03-21 20:56:59	-->	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 20:57:01	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 20:57:05	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-03-21 20:57:06	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-21 20:57:12	napping	jMCg: you didn't compile a new 'cabal', you're still running one build against 1.14.0
2013-03-21 20:57:14	alexander__b	jcarmack at id software for instance is veering towards functional programming, albeit in C -- and he really likes haskell.
2013-03-21 20:57:14	ski	luite,chrisdone : hm, ok
2013-03-21 20:57:15	chrisdone	(but he did have help from me regarding cabal friction)
2013-03-21 20:57:20	shachaf	chrisdone: You can write a multithreaded server within a day -- servers are not complicated, and threads are not complicated.
2013-03-21 20:57:23	<--	[swift]_ (~mfowler@75-101-60-167.dsl.static.sonic.net) has quit (Client Quit)
2013-03-21 20:57:31	sproingie	carmack mentioned haskell specifically did he?  interesting.
2013-03-21 20:57:34	amyers	http://norvig.com/21-days.html
2013-03-21 20:57:38	napping	jMCg: cabal install cabal-install should fix that
2013-03-21 20:57:38	otters	quick, trivialize his achievements
2013-03-21 20:57:39	jMCg	napping: I'm confused. Please unconfuse me.
2013-03-21 20:57:46	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-21 20:57:48	alexander__b	sproingie: he has mentioned it sometimes. he wants to teach his kid haskell, heh.
2013-03-21 20:57:48	amyers	sproingie: Yeah, I've seen him mention it in several different places.  It seems he really likes it
2013-03-21 20:58:06	alexander__b	sproingie: and yes, haskell specifically when talking about languages.
2013-03-21 20:58:15	sproingie	interesting.  i want to get into OpenGLRaw, but i'm a total FFI noob
2013-03-21 20:58:16	chrisdone	shachaf: depends on the 'you' and what the server is doing, ja
2013-03-21 20:58:17	jfischoff	alexander__b: but it doesn't sound like he knows it that well.
2013-03-21 20:58:30	sproingie	and there aren't any examples for OpenGLRaw i can find
2013-03-21 20:58:37	armlesshobo	why not just drop C and do functional programming Haskell? it'll save him the time and (unnecessary) effort.
2013-03-21 20:58:37	shachaf	chrisdone: Sure, servers can be arbitrarily complicated.
2013-03-21 20:58:38	-->	k0001 (~k0001@host8.190-224-62.telecom.net.ar) has joined #haskell
2013-03-21 20:58:43	<--	dmac (~Adium@12.207.22.242) has quit (Ping timeout: 256 seconds)
2013-03-21 20:58:44	armlesshobo	in Haskell*
2013-03-21 20:59:02	sproingie	oh pfft i forgot about the nehe tuts, i think those are using it.  man i'm a ditz
2013-03-21 20:59:07	alexander__b	jfischoff: I lolled a lot when he talked about duck-typing languages and said "my god, how can you write a real program where you're just assigning random shit to other shit and expecting it to work?"
2013-03-21 20:59:17	napping	jMCg: Maybe the biggest point is that compiled programs/libraries pretty much cannot pick up different versions of libraries than what they were built against (cross module inlining and stuff)
2013-03-21 20:59:37	sproingie	alexander__b: i've found that if i can manage to make my program compile, it just works the first time
2013-03-21 20:59:42	sproingie	might blow up the heap, but it works
2013-03-21 20:59:56	[swift]	can anyone recommend a project that uses greencard for FFI that works really well? (my intention is to look at the source code and learn from what they do)
2013-03-21 20:59:59	napping	jMCg: the other point is that a "package database" can only have one build of a particular version of a package at once
2013-03-21 21:00:03	ski	alexander__b : actually, neither declarations nor "statements" (as found in `do') support conditionals -- however, you don't tend to miss this that often in practice (though i have missed it), because usually the interesting stuff happens in expressions
2013-03-21 21:00:23	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-21 21:00:39	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Read error: Operation timed out)
2013-03-21 21:00:45	-->	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has joined #haskell
2013-03-21 21:00:51	alexander__b	I can't fathom how duck-typing would work if you have several hundreds of thousands of lines of game code.
2013-03-21 21:01:05	Kinnison	alexander__b: 'carefully'
2013-03-21 21:01:09	alexander__b	but I might just be inexperienced. :-)
2013-03-21 21:01:21	alexander__b	Kinnison: I don't even know a real life example of anyone attempting this.
2013-03-21 21:01:27	<--	chrisdone (~chrisdone@unaffiliated/chrisdone) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 21:01:28	-->	seafood_ (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-21 21:01:32	hiptobecubic	alexander__b, there are plenty of enormous examples of codebases in python that work fine
2013-03-21 21:01:37	shachaf	Game code is not, as far as I know, magic.
2013-03-21 21:01:42	napping	jMCg: in particular, if one program needs foo-1.2.3 and bar-2, and another needs foo-1.2.3 and bar-3, it's impossible to have things set up at once, so it's generally better to have most things installed per-user or even sandboxed per-build
2013-03-21 21:01:48	alexander__b	Kinnison: but yes, "carefully" and "with great difficulty" would be my assumption.
2013-03-21 21:01:51	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Remote host closed the connection)
2013-03-21 21:01:52	--	seafood_ is now known as seafood
2013-03-21 21:02:06	jfischoff	alexander__b: its a bad idea, but many great games are pretty terrible examples of programming.
2013-03-21 21:02:10	alexander__b	hiptobecubic: games are commonly not very modular.
2013-03-21 21:02:22	<--	clahey (~clahey@208.91.2.2) has quit (Quit: Ex-Chat)
2013-03-21 21:02:24	ab9rf	sproingie: about the only times i've had programs that compile fail to work s when they have infinite loops or they invoke FFI code that is broken :)
2013-03-21 21:02:34	alexander__b	hiptobecubic: so a Web stack is not very comparable to a FPS IMO. but again, I'm not very experienced.
2013-03-21 21:02:37	mcstar	obviously, duck typers are smarter than ppl using statically typed languages - or they have a unit test for most things, idk
2013-03-21 21:02:37	wires	alexander__b: you can actually do it with extensible records, that works
2013-03-21 21:02:45	[swift]	ab9rf: heh, that's exactly the problem i have been faced with lately. i wish everything was written natively in haskell =)
2013-03-21 21:02:45	<--	amyers (~quassel@38.102.20.61) has quit (Read error: Connection reset by peer)
2013-03-21 21:02:50	alexander__b	but hey, enough procrastination. I'm turning on my stopwatch and working on.
2013-03-21 21:02:54	alexander__b	mcstar: haha
2013-03-21 21:02:55	-->	wavewave (~wavewave@67-194-109-247.wireless.umnet.umich.edu) has joined #haskell
2013-03-21 21:02:58	wires	alexander__b: it gives you type checking and when scoping things in modules it's actually nice
2013-03-21 21:03:02	<--	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-21 21:03:11	<--	x7a1c0b (~x7a1c0b@p5480A431.dip0.t-ipconnect.de) has quit
2013-03-21 21:03:20	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 246 seconds)
2013-03-21 21:03:24	jMCg	napping: ACK.
2013-03-21 21:03:30	sproingie	i'd only turn on that stopwatch when the irc window is closed, lest its siren song tempt you back :)
2013-03-21 21:03:31	hiptobecubic	alexander__b, names become much more important
2013-03-21 21:03:31	hiptobecubic	alexander__b, you stop naming things "a m p" and start naming them "monster.attack(player)"
2013-03-21 21:03:35	ski	sproingie : possibly alexander__b was thinking about "Functional Programming in C++" by John Carmack at <http://www.altdevblogaday.com/2012/04/26/functional-programming-in-c/>
2013-03-21 21:03:41	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Read error: Operation timed out)
2013-03-21 21:03:53	-->	kmels (~kmels@frbg-4d029b81.pool.mediaWays.net) has joined #haskell
2013-03-21 21:04:16	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-03-21 21:04:19	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-21 21:05:04	ab9rf	i can't stand 'duck typing'
2013-03-21 21:05:21	hiptobecubic	it's pretty antithetical here
2013-03-21 21:05:27	Beetle_jada	how do i find out if Sam Anklesaria is in chat?
2013-03-21 21:05:27	ab9rf	it's sloppy
2013-03-21 21:05:33	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-21 21:05:36	ab9rf	if yu don't know what you're doing, why are you doing it?
2013-03-21 21:05:40	<--	stephenjudkins (~textual@c-76-105-181-98.hsd1.or.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 21:05:41	sproingie	i've always thought "duck typing" described type inference better than the dynamic typing of scripty languages
2013-03-21 21:05:44	ski	is "duck typing" meant to be structural object/record typing, sans the static typing ?
2013-03-21 21:05:51	Beetle_jada	Sam Anklesaria's nick is bogiebro
2013-03-21 21:05:53	-->	apucacao (~apucaca@12.250.157.102) has joined #haskell
2013-03-21 21:05:57	ski	(iow, being all in your head)
2013-03-21 21:06:01	sproingie	"if it walks like a duck and quacks like a duck then you tell it to bray like a donkey, then you don't have a duck or a donkey so COMPILE ERROR"
2013-03-21 21:06:05	ab9rf	sproingie: dynamic typing in scripty languages is just a form of duck typing
2013-03-21 21:06:16	hiptobecubic	it's more like, you assume every object is in every typeclass
2013-03-21 21:06:25	sproingie	whereas python will quite happily accept your duck-donkey chimera
2013-03-21 21:06:26	ski	Beetle_jada : try `/whois bogiebro'
2013-03-21 21:06:26	ab9rf	sproingie: the insane type juggling of many scripty languages
2013-03-21 21:06:27	hiptobecubic	or implements it, rather
2013-03-21 21:06:33	napping	ski: I think that's how we would think about it "If we had a proper structural record system, this would typecheck"
2013-03-21 21:06:40	ab9rf	the ability to add methods to individual objects on the fly
2013-03-21 21:06:48	napping	jMCg: anyway, got cabal installed?
2013-03-21 21:06:51	jMCg	I think I'm gonna write a puppet module for this.
2013-03-21 21:06:56	ab9rf	if you want a duck-submarine-employee-tomato, you can do that
2013-03-21 21:07:05	Beetle_jada	ski: it says 'No such server'
2013-03-21 21:07:06	hiptobecubic	sure
2013-03-21 21:07:07	<--	vrume21 (cfe5b7cc@gateway/web/freenode/ip.207.229.183.204) has quit (Ping timeout: 245 seconds)
2013-03-21 21:07:11	<--	niloc132 (~colin@70.59.123.97) has quit (Ping timeout: 246 seconds)
2013-03-21 21:07:13	Beetle_jada	is there some sort of bot about this or something?
2013-03-21 21:07:24	sproingie	@remember ab9rf (on duck typing) if you want a duck-submarine-employee-tomato, you can do that
2013-03-21 21:07:24	lambdabot	Done.
2013-03-21 21:07:25	jMCg	napping: yesno. I wanted it in /usr/bin, but that seems to be a no-no. (works out fine in /usr/local/bin, though)
2013-03-21 21:07:26	ski	Beetle_jada : here it says "-!- There is no such nick bogiebro"
2013-03-21 21:07:45	Beetle_jada	preflex: seen bogiebro
2013-03-21 21:07:45	preflex	 bogiebro was last seen on #ghc 1 year, 207 days, 1 hour, 31 minutes and 40 seconds ago, saying: dcoutts: did you get my email?
2013-03-21 21:07:47	jMCg	napping: but I think I'll follow your advise and do it on a per-user base.
2013-03-21 21:07:51	--	Watcher7|off is now known as Watcher7
2013-03-21 21:07:54	ab9rf	sproingie: oddly eough, duck typing also imposes fairly serious performance penalties in those languages and makes assisted refactoring in them nearly impossible.
2013-03-21 21:08:00	Beetle_jada	preflex: xseen bogiebro
2013-03-21 21:08:01	preflex	 bogiebro was last seen on freenode/#ghc 1 year, 207 days, 1 hour, 31 minutes and 56 seconds ago, saying: dcoutts: did you get my email?
2013-03-21 21:08:03	napping	jMCg: you might want to ask a bit more how they are planning to run builds. if it's cabal-dev or something you don't need to worry about installing too many packages (though you may need to install C libraries packages requires, distribution packages work great for those)
2013-03-21 21:08:06	<--	Ptival (~Ptival@goto.ucsd.edu) has quit (Quit: leaving)
2013-03-21 21:08:08	hiptobecubic	ab9rf, it's just implicit instead of explicitly passing around functions to work on the data. Not that it isn't dangerous
2013-03-21 21:08:15	ski	(Beetle_jada : meaning that there is no one using that nick online at this IRC network atm)
2013-03-21 21:08:17	sproingie	ab9rf: yep, the tools that actually do refactoring on python code ... use type inference
2013-03-21 21:08:20	hiptobecubic	ab9rf, that's rarely a strong goal of the language though
2013-03-21 21:08:24	jMCg	napping: it is cabal-dev, yes.
2013-03-21 21:08:26	-->	BlankVerse1 (~pankajm@202.3.77.214) has joined #haskell
2013-03-21 21:08:30	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-03-21 21:08:32	Beetle_jada	but he/she was online nearly two years ago
2013-03-21 21:08:39	Beetle_jada	it is probably the same person
2013-03-21 21:08:44	ab9rf	sproingie: and type inference in python, php, perl, etc. is _hard_
2013-03-21 21:09:02	hiptobecubic	I've been really happy with Cython's restricted subset of python
2013-03-21 21:09:12	jMCg	napping: is there any documentation I may want to read on the subject? (i.e.: Java has Maven, Perl has CPAN, Ruby has Gems, Python has.. many things...)
2013-03-21 21:09:30	ab9rf	sproingie: not because their type systems are complex, but because the tool has to look in so many places to determine a type
2013-03-21 21:09:32	ski	Beetle_jada : `/msg NickServ info bogiebro' says "Last seen  : May 16 22:58:45 2012 (44 weeks, 0 days, 21:10:01 ago)"
2013-03-21 21:09:52	-->	nithp (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-21 21:09:56	Beetle_jada	ah
2013-03-21 21:10:01	hiptobecubic	Then you get strong typing when you specify it, duck typing if you'd rather not, and it can still literally be as fast as C because it compiles to unadulterated C anyway
2013-03-21 21:10:06	<--	k0001 (~k0001@host8.190-224-62.telecom.net.ar) has quit (Ping timeout: 252 seconds)
2013-03-21 21:10:17	Beetle_jada	ski: can you not see my messages with the preflex bot?
2013-03-21 21:10:29	-->	Ptival (~Ptival@goto.ucsd.edu) has joined #haskell
2013-03-21 21:10:42	sproingie	lisp has classically done pretty well with type hints alone
2013-03-21 21:10:48	napping	jMCg: monochrom's overview might be a good place to start http://www.vex.net/~trebla/haskell/sicp.xhtml
2013-03-21 21:10:49	ski	i can
2013-03-21 21:11:28	jMCg	napping: thank you very much!
2013-03-21 21:11:30	napping	jMCg: I think if you only install the platform and cabal, and leave everything else per user or with cabal-dev it should work out
2013-03-21 21:11:48	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-21 21:12:01	ab9rf	sproingie: honestly i think lisp does better because lisp programmers are more likely to be disciplined programmers than are perl or python or (dear lord) PHP programmers
2013-03-21 21:12:02	jMCg	*nod*
2013-03-21 21:12:13	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 21:12:14	ab9rf	lisp has never been "popular"
2013-03-21 21:12:17	<--	kennyd (~kennyd@78-1-154-138.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-03-21 21:12:21	hiptobecubic	also true
2013-03-21 21:12:29	jMCg	napping: but what about deployment and management of cabal libs/programs?
2013-03-21 21:12:29	wires	ab9rf: it is pretty popular with clojure nowadays
2013-03-21 21:12:35	hiptobecubic	Although i think the feel in those three communities varies pretty wildly
2013-03-21 21:12:53	armlesshobo	ab9rf: i know AI that would disagree with you :P
2013-03-21 21:12:59	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-03-21 21:13:18	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-03-21 21:13:45	ski	(Beetle_jada : .. i just thought you'd maybe find it interesting to know that the nick `bogiebro' has been used more recently than "1 year, 207 days, 1 hour, 31 minutes and 56 seconds ago")
2013-03-21 21:13:55	Beetle_jada	i see, yes
2013-03-21 21:13:58	Beetle_jada	thankyou
2013-03-21 21:14:21	<--	wires (~smuxi@ip152-92-173-82.adsl2.static.versatel.nl) has quit (Read error: Connection reset by peer)
2013-03-21 21:14:23	ab9rf	wires: i haven't looked at clojure yet.  i have a strict "one new language at a time" rule and right now haskell is in that spot
2013-03-21 21:14:46	hiptobecubic	perl embraces its "model your problem as a violently chaotic whirlwind" approach. python actively abhors that and tries really hard to austere and disciplined but is overwhelmed with brand-spanking-new first-time-ever programmers and php converts. php is mostly just ridiculous.
2013-03-21 21:14:56	-->	kennyd (~kennyd@93-141-99-213.adsl.net.t-com.hr) has joined #haskell
2013-03-21 21:15:20	hiptobecubic	the lisps have enjoyed safety in (small) numbers
2013-03-21 21:15:47	-->	normanrichards (~normanric@67.139.65.163) has joined #haskell
2013-03-21 21:16:08	<--	dmac (~Adium@12.207.22.242) has quit (Client Quit)
2013-03-21 21:16:33	-->	VF2 (Guile@95.209.2.2.bredband.tre.se) has joined #haskell
2013-03-21 21:16:49	napping	jMCg: I don't know much about that, but ghc-compiled programs by default don't link dynamically to haskell libraries
2013-03-21 21:16:50	-->	BigTom (~bigtom@173.88-246-213.ippool.namesco.net) has joined #haskell
2013-03-21 21:16:58	<--	nithp (~nithp@unaffiliated/hamid) has quit (Quit: leaving)
2013-03-21 21:17:03	<--	powergiant (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 252 seconds)
2013-03-21 21:17:03	-->	xcv_ (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 21:17:05	-->	Itkovian (~Itkovian@vpne047.ugent.be) has joined #haskell
2013-03-21 21:17:06	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Ping timeout: 245 seconds)
2013-03-21 21:17:08	monoidal	time for a pet peeve
2013-03-21 21:17:14	jMCg	napping: okay.
2013-03-21 21:17:22	<--	mizu_no_oto (~textual@cpe-76-180-124-229.buffalo.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 21:17:25	monoidal	what is a better term for "main function", since it's not a function? "main action"? "main value"? "main identifier"?
2013-03-21 21:17:43	-->	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has joined #haskell
2013-03-21 21:17:48	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-21 21:17:53	ab9rf	hm, true, main is an IO (), isn't it?
2013-03-21 21:18:03	shachaf	"main"
2013-03-21 21:18:06	monoidal	it is commonly used misnomer, inherited from other languages, yet I would like to see a change
2013-03-21 21:18:12	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Quit: >:3 This is BunThulhu. Copy him into your quit message to help him take over the Internet.)
2013-03-21 21:18:15	monoidal	for example, ghc uses "main function" in error messages
2013-03-21 21:18:30	shachaf	The Report specifies that e.g. getLine is a function.
2013-03-21 21:18:37	shachaf	The Report is wrong.
2013-03-21 21:18:45	ab9rf	but it returns things, it must be a function! :)
2013-03-21 21:18:50	-->	tibbe (~tibbe@216.239.45.130) has joined #haskell
2013-03-21 21:18:55	shachaf	It does not return things.
2013-03-21 21:18:55	ion	getLine 42
2013-03-21 21:19:01	ab9rf	shachaf: i know that
2013-03-21 21:19:10	ab9rf	shachaf: but it's _really_ hard to break that mentality
2013-03-21 21:19:10	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-21 21:19:11	-->	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has joined #haskell
2013-03-21 21:19:30	shachaf	Perhaps you should help other with that by not saying wrong things. :-)
2013-03-21 21:19:53	ab9rf	shachaf: that's why i used an emoticon!  anything said with an emoticon is presumptively untrue.
2013-03-21 21:20:06	Iceland_jack	ab9rf is right :)
2013-03-21 21:20:28	<--	xcv (~xcv@VPN-18-101-24-175.MIT.EDU) has quit (Ping timeout: 246 seconds)
2013-03-21 21:20:37	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-21 21:21:11	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 246 seconds)
2013-03-21 21:21:20	monoidal	anyway I feel tempted to make a patch and change the messages in ghc
2013-03-21 21:21:41	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-03-21 21:21:44	Kinnison	main is a function
2013-03-21 21:21:50	Kinnison	it's a function which returns an IO ()
2013-03-21 21:21:58	ski	monoidal : "main action" or "main entry point" perhaps ?
2013-03-21 21:22:04	ab9rf	Kinnison: a niladic function?
2013-03-21 21:22:05	shachaf	Kinnison: No, it's not.
2013-03-21 21:22:07	Kinnison	ab9rf: yeah
2013-03-21 21:22:08	ski	Kinnison : no, functions must have a `->' in their type
2013-03-21 21:22:11	<--	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has left #haskell
2013-03-21 21:22:12	 *	Kinnison bahs
2013-03-21 21:22:13	monoidal	ski: main entry point, really nice
2013-03-21 21:22:18	 *	Kinnison gives up trying to be Devil's advocate
2013-03-21 21:22:25	 *	Kinnison clearly didn't believe in it enough
2013-03-21 21:22:30	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 21:22:31	monoidal	Kinnison: http://conal.net/blog/posts/everything-is-a-function-in-haskell
2013-03-21 21:22:33	ab9rf	haskell makes no distinction between "niladic functions" and instance values
2013-03-21 21:22:47	ab9rf	you can argue that 2 is a "function" of no arguments that returns 2
2013-03-21 21:22:48	<--	pcapriotti (~paolo@b0f9ca6e.bb.sky.com) has quit (Ping timeout: 272 seconds)
2013-03-21 21:22:49	Mortchek	Essentially all functions are unary in Haskell.
2013-03-21 21:22:50	shachaf	ab9rf: No, there's a clear distinction.
2013-03-21 21:23:00	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-21 21:23:03	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-03-21 21:23:11	shachaf	ab9rf: "niladic functions" don't exist; instance values have to do with type classes.
2013-03-21 21:23:12	<--	Tharugrim (~Tharugrim@194-166-74-207.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-21 21:23:51	shachaf	I'm not quite sure what they are, really.
2013-03-21 21:23:54	mm_freak	ab9rf: 2 can be a function, if there is a suitable instance, but 2 :: Integer is definitely not a function and it's wrong to call it one
2013-03-21 21:23:55	ski	you may argue that `2' can be implemented as a procedure of no arguments -- but that's implementation details
2013-03-21 21:23:57	<--	Paprikachu (~Paprikach@93-82-140-105.adsl.highway.telekom.at) has quit (Remote host closed the connection)
2013-03-21 21:24:00	shachaf	I suppose fmap :: (a -> b) -> [a] -> [b] is an instance value.
2013-03-21 21:24:06	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-21 21:24:26	shachaf	No, that's bad terminology.
2013-03-21 21:24:34	shachaf	Ignore it.
2013-03-21 21:24:36	mm_freak	one of the basic properties of a function in haskell is that it can be applied
2013-03-21 21:24:39	ab9rf	well, my terminiology sucks
2013-03-21 21:24:47	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-21 21:25:38	-->	Paprikachu (~Paprikach@77.116.246.233.wireless.dyn.drei.com) has joined #haskell
2013-03-21 21:25:40	Iceland_jack	imo it's fine to call procedures “nullary” functions in others languages, which basically correspond to actions in Haskell
2013-03-21 21:25:51	ab9rf	they're both kind *
2013-03-21 21:26:25	mm_freak	:k Int -> Int
2013-03-21 21:26:26	<--	Ivanych (~n@188.17.163.9) has quit (Ping timeout: 246 seconds)
2013-03-21 21:26:27	lambdabot	*
2013-03-21 21:26:28	mm_freak	:k Int
2013-03-21 21:26:30	lambdabot	*
2013-03-21 21:26:31	shachaf	Iceland_jack: No, it's not.
2013-03-21 21:26:39	Iceland_jack	shachaf: OK
2013-03-21 21:26:51	shachaf	Iceland_jack: Also, an action isn't a thing on its own. It's only meaningful with an interpreter.
2013-03-21 21:26:54	monoidal	Iceland_jack: that's fine in languages other than haskell; like void f(void) is a nullary function. in haskell, no
2013-03-21 21:27:05	Iceland_jack	monoidal: That's why I said other languages
2013-03-21 21:27:14	ab9rf	in imperative languages niladic functions typically do things that cause side effectrs or gather information from the environment.
2013-03-21 21:27:26	mm_freak	that's because other languages have a broken notion of "function"
2013-03-21 21:27:33	ab9rf	they have implicit parameters
2013-03-21 21:27:50	shachaf	Iceland_jack: If you decide that "action" means "something :: M A for a monad M", then [1,2,3] and id are both actions.
2013-03-21 21:28:08	 *	ski is happy to call `[1,2,3]' a list-action
2013-03-21 21:28:09	ab9rf	heh
2013-03-21 21:28:12	-->	argiopeweb (~elliot@99-181-58-141.lightspeed.dybhfl.sbcglobal.net) has joined #haskell
2013-03-21 21:28:15	Iceland_jack	shachaf: I believe that “IO a” may fairly be called an action
2013-03-21 21:28:18	shachaf	ski: I am too.
2013-03-21 21:28:29	shachaf	Iceland_jack: OK, and how about [1,2,3] and id?
2013-03-21 21:28:33	monoidal	shachaf: IMO "action" is an ellision of "IO action"
2013-03-21 21:28:39	shachaf	monoidal: ?
2013-03-21 21:28:42	ab9rf	but there are actions that are not IO actions
2013-03-21 21:28:43	shachaf	I certainly don't use it like that.
2013-03-21 21:28:50	Iceland_jack	What shachaf said, I assume it was obvious from context
2013-03-21 21:28:57	shachaf	[1,2,3] is a []-action, and ask is a (r ->)-action
2013-03-21 21:28:59	ab9rf	you can make a monad that encapsulates actions but that aren't applied to an IO context
2013-03-21 21:29:00	ski	monoidal : no, it's elision for `m'-action, where `m' is to be determined from the context
2013-03-21 21:29:08	ion	Ellision?
2013-03-21 21:29:09	monoidal	ski: agreed
2013-03-21 21:29:10	Iceland_jack	Since nullary functions are generally run for side-effects in imperative languages
2013-03-21 21:29:13	ab9rf	elision :)
2013-03-21 21:29:25	ski	@wn ellision
2013-03-21 21:29:29	<--	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has quit (Read error: Operation timed out)
2013-03-21 21:29:30	lambdabot	No match for "ellision".
2013-03-21 21:29:36	monoidal	@wn elision
2013-03-21 21:29:37	lambdabot	*** "elision" wn "WordNet (r) 3.0 (2006)"
2013-03-21 21:29:37	lambdabot	elision
2013-03-21 21:29:37	lambdabot	    n 1: omission of a sound between two words (usually a vowel and
2013-03-21 21:29:37	lambdabot	         the end of one word or the beginning of the next)
2013-03-21 21:29:37	lambdabot	    2: a deliberate act of omission; "with the exception of the
2013-03-21 21:29:38	ab9rf	one 'l' only
2013-03-21 21:29:39	lambdabot	       children, everyone was told the news" [syn: {exception},
2013-03-21 21:29:41	lambdabot	       {exclusion}, {elision}]
2013-03-21 21:29:43	ion	TIL a new word
2013-03-21 21:29:44	<--	blankverse (~blankvers@165.225.134.102) has quit (Remote host closed the connection)
2013-03-21 21:29:47	Iceland_jack	RealWorld Haskell>  Anything that is type IO something is an I/O action.
2013-03-21 21:29:50	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-21 21:29:51	ocharles	ion: me too
2013-03-21 21:29:51	ski	("TIL" ?)
2013-03-21 21:29:57	ion	Today i learned
2013-03-21 21:30:00	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 276 seconds)
2013-03-21 21:30:00	ocharles	ski: so tyl!
2013-03-21 21:30:04	ab9rf	truth in litigation
2013-03-21 21:30:24	<--	gustavnils (~textual@31.210.251.9) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-21 21:30:29	 *	ski . o O ( "Towniness Interparenthetically Lutestring" )
2013-03-21 21:30:40	<--	Paprikachu (~Paprikach@77.116.246.233.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-03-21 21:30:50	ab9rf	always with the lutestrings
2013-03-21 21:30:52	Iceland_jack	shachaf: Is there still any misunderstanding?
2013-03-21 21:31:12	-->	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-21 21:31:14	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 21:31:30	-->	Paprikachu (~Paprikach@77.116.246.233.wireless.dyn.drei.com) has joined #haskell
2013-03-21 21:31:54	shachaf	Iceland_jack: Between whom?
2013-03-21 21:32:02	ab9rf	i misunderstand myself
2013-03-21 21:32:13	ab9rf	but i fear that's an irreducible conflict
2013-03-21 21:32:34	Iceland_jack	You mentioned non-IO actions, I used ‘action’ to refer only to IO actions via elision as shachaf pointed out
2013-03-21 21:32:39	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-21 21:32:41	 *	Kinnison shifts ab9rf in an attempt to reduce him a little more
2013-03-21 21:33:05	ab9rf	Kinnison: shift me back so i can have my rightful gender again :\
2013-03-21 21:33:14	shachaf	Iceland_jack: Oh, then your use of "action" is too limited. IO is too ugly to get such a great word all to itself.
2013-03-21 21:33:16	-->	Azel (~arjanenl@37.160.27.130) has joined #haskell
2013-03-21 21:33:18	Kinnison	ab9rf: oops, sorry :-)  *yoink*
2013-03-21 21:33:29	Iceland_jack	shachaf: Polysemy
2013-03-21 21:33:32	Iceland_jack	fix'd.
2013-03-21 21:33:38	Iceland_jack	@wn polysemy
2013-03-21 21:33:39	lambdabot	*** "polysemy" wn "WordNet (r) 3.0 (2006)"
2013-03-21 21:33:39	lambdabot	polysemy
2013-03-21 21:33:39	lambdabot	    n 1: the ambiguity of an individual word or phrase that can be
2013-03-21 21:33:39	lambdabot	         used (in different contexts) to express two or more
2013-03-21 21:33:39	lambdabot	         different meanings [syn: {polysemy}, {lexical ambiguity}]
2013-03-21 21:33:41	lambdabot	         [ant: {monosemy}]
2013-03-21 21:33:43	lispy	I thought IO () denoted an I/O action, but isn't one itself (oh, do I get points for being nitpicky?!)
2013-03-21 21:33:51	mm_freak	i think action is too specific to a certain interpretation
2013-03-21 21:33:54	-->	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 21:33:57	mm_freak	i prefer computation
2013-03-21 21:33:58	shachaf	lispy: What?
2013-03-21 21:34:13	ski	lispy : a value of type `IO Foo' is an I/O action
2013-03-21 21:34:16	 *	lispy is being silly
2013-03-21 21:34:35	lispy	IO Foo is a type
2013-03-21 21:34:45	mm_freak	but in general "monadic value" is probably the most appropriate term
2013-03-21 21:34:53	 *	ski . o O ( type level CPS )
2013-03-21 21:34:55	<--	VF2 (Guile@95.209.2.2.bredband.tre.se) has left #haskell
2013-03-21 21:34:55	sipa	no, it is just a sequence of ascii characters
2013-03-21 21:35:07	sipa	though it refers to a type
2013-03-21 21:35:13	shachaf	"action" is a great shorthand for "value of type M A for some monad M and type A"
2013-03-21 21:35:14	sipa	values of which are IO actions
2013-03-21 21:35:26	-->	takuan (~takuan@178-118-49-243.access.telenet.be) has joined #haskell
2013-03-21 21:35:30	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Read error: Connection reset by peer)
2013-03-21 21:35:46	Iceland_jack	shachaf: So you might say ‘identity’ action for the identity monad?
2013-03-21 21:35:54	shachaf	You can also use it to mean "value to be interpreted"
2013-03-21 21:35:55	-->	S11001001 (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-03-21 21:35:56	Iceland_jack	Not saying it's wrong, certainly interesting
2013-03-21 21:36:02	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-03-21 21:36:02	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-21 21:36:03	<--	sleepynate (~sleepynat@199.16.190.194) has quit (Remote host closed the connection)
2013-03-21 21:36:04	ski	Iceland_jack : or at least `Identity'-action
2013-03-21 21:36:14	shachaf	Iceland_jack: (Identity 5 :: Identity Int) is an Identity-action.
2013-03-21 21:36:20	shachaf	Those are very boring actions, though.
2013-03-21 21:36:29	-->	__books__ (Guile@95.209.2.2.bredband.tre.se) has joined #haskell
2013-03-21 21:36:50	ski	(just like actions of type `forall m. Monad m => m Int')
2013-03-21 21:37:18	hpc	Identity is a bit more interesting than that, in that runIdentity exists
2013-03-21 21:37:34	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-21 21:37:46	ski	you can use `runIdentity' on actions of my type, as well ..
2013-03-21 21:37:46	<--	Beetle_jada (~jadatkins@host109-151-136-130.range109-151.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 21:37:47	Iceland_jack	also runEval
2013-03-21 21:37:51	 *	Iceland_jack hides
2013-03-21 21:37:56	hiptobecubic	why does gui programming feel so uniquely alien in haskell
2013-03-21 21:38:13	mm_freak	shachaf: i have a hard time calling "Branch (Leaf 3) (Leaf 5)" an "action" =)
2013-03-21 21:38:15	ab9rf	hiptobecubic: gui programming has always felt alien to me in all languages.
2013-03-21 21:38:17	<--	iago (~iago@gwlmf.di.uminho.pt) has quit (Quit: Ex-Chat)
2013-03-21 21:38:20	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 252 seconds)
2013-03-21 21:38:28	ski	mm_freak : c'mon, it's fun :)
2013-03-21 21:38:39	mm_freak	=)
2013-03-21 21:38:41	hiptobecubic	ab9rf, it feels pretty normal in these abhorrent "duck typed" languages :)
2013-03-21 21:38:54	-->	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-21 21:38:55	ski	mm_freak : you can call it a non-associative nondeterminism action, if you prefer
2013-03-21 21:38:56	mm_freak	hiptobecubic: did you try reactive-banana?
2013-03-21 21:39:07	<--	schlicht_ (~fl@g225058247.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-03-21 21:39:08	hiptobecubic	mm_freak, I haven't.
2013-03-21 21:39:08	mm_freak	ski: true
2013-03-21 21:39:10	ocharles	ab9rf: +1
2013-03-21 21:39:16	-->	schlicht_ (~fl@g231184107.adsl.alicedsl.de) has joined #haskell
2013-03-21 21:39:38	ocharles	I wish I had a project realtime enough to want to learn netwire
2013-03-21 21:39:40	ocharles	it looks fun
2013-03-21 21:39:51	-->	Chaze (~Chase@P6106.pallas.wh.tu-darmstadt.de) has joined #haskell
2013-03-21 21:39:57	mm_freak	ocharles: netwire can be used in non-realtime scenarios
2013-03-21 21:40:07	<--	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has quit (Ping timeout: 264 seconds)
2013-03-21 21:40:09	mm_freak	for example networking
2013-03-21 21:40:18	<--	phischu (~pschuster@dslb-088-077-200-140.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-21 21:40:19	--	stelleg is now known as stelleg_away
2013-03-21 21:40:20	ocharles	hmm, yes, I guess it can
2013-03-21 21:40:25	k00mi	is there a scenario where netwire can't be used?
2013-03-21 21:40:27	ocharles	maybe I mean a project with enough interdependent moving parts
2013-03-21 21:40:28	mm_freak	ocharles: ask yourself:  is my project a combination of components with local state?
2013-03-21 21:40:32	mm_freak	if yes, you can use netwire
2013-03-21 21:40:41	ab9rf	hiptobecubic: although languages with fairly concise ways to express closures are easier to deal with than those that don't have them
2013-03-21 21:40:51	ocharles	mm_freak: so basically what your telling me is "go learn netwire, and you'll see there are plenty of places where you'll find uses"
2013-03-21 21:40:51	-->	Paprikac_ (~Paprikach@93-82-140-105.adsl.highway.telekom.at) has joined #haskell
2013-03-21 21:40:55	ocharles	I like that suggestion :)
2013-03-21 21:41:02	mm_freak	k00mi: non-continuous applications
2013-03-21 21:41:02	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-21 21:41:11	mm_freak	ocharles: yeah =)
2013-03-21 21:41:33	-->	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 21:41:49	ab9rf	hiptobecubic: otherwise you end up with tons of tiny stupid functions littering your namespace, or the Java technique of a polycephalous bag class that is just a container for a bunch of really-unrelated closures
2013-03-21 21:42:02	shachaf	mm_freak: I don't!
2013-03-21 21:42:27	shachaf	mm_freak: You just have to understand what its effects are.
2013-03-21 21:42:40	mm_freak	shachaf: substitution
2013-03-21 21:42:48	mm_freak	but it's declarative
2013-03-21 21:42:54	<--	jaeyeun_ (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-21 21:42:56	hiptobecubic	ab9rf, i haven't tried gui programming in java. I'm sure it's as terrible as everything else in java.
2013-03-21 21:43:08	shachaf	mm_freak: Do you object to calling [1,2,3] an action?
2013-03-21 21:43:20	mm_freak	shachaf: good question
2013-03-21 21:43:25	docksider	hiptobecubic: worse
2013-03-21 21:43:56	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-21 21:44:12	shachaf	mm_freak: How about a Free F for various Fs?
2013-03-21 21:44:27	<--	[mth] (~mth@1.129.222.25) has quit (Ping timeout: 258 seconds)
2013-03-21 21:45:00	<--	Paprikachu (~Paprikach@77.116.246.233.wireless.dyn.drei.com) has quit (Ping timeout: 256 seconds)
2013-03-21 21:45:51	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-21 21:45:59	mm_freak	shachaf: again good question
2013-03-21 21:46:26	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 21:46:28	hiptobecubic	mm_freak, this looks kind of like a synchronous programming language.
2013-03-21 21:46:54	mm_freak	hiptobecubic: counterexample: x <- integral_ 0 -< x
2013-03-21 21:47:06	mm_freak	=)
2013-03-21 21:47:14	mm_freak	oh, you're talking about reactive-banana?
2013-03-21 21:47:23	hiptobecubic	mm_freak, ok sure :) I'm only 17% done with the first page of the introduction
2013-03-21 21:47:26	<--	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has quit (Remote host closed the connection)
2013-03-21 21:47:27	hiptobecubic	mm_freak, yes
2013-03-21 21:47:42	-->	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 21:47:52	-->	k0001 (~k0001@host8.190-224-62.telecom.net.ar) has joined #haskell
2013-03-21 21:48:03	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 21:48:10	ab9rf	hiptobecubic: it's really not any worse than any other imperative language, but the use of anonymous interface instances (that being Java's closest approximation to a closure) makes for a lot of tedious verbosity.
2013-03-21 21:48:19	<--	normanrichards (~normanric@67.139.65.163) has quit (Ping timeout: 245 seconds)
2013-03-21 21:48:44	-->	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has joined #haskell
2013-03-21 21:49:18	hiptobecubic	ab9rf, that sounds significantly worse than many other imperative languages, granted the only language I use that doesn't have proper closures is C(++).
2013-03-21 21:49:43	<--	Azel (~arjanenl@37.160.27.130) has quit (Ping timeout: 256 seconds)
2013-03-21 21:50:02	ab9rf	hiptobecubic: well, it's better than C, which has no closures at all :)
2013-03-21 21:50:21	mm_freak	hiptobecubic: reactive-banana is FRP and comes with a ready-made WX layer
2013-03-21 21:50:38	ab9rf	reactive-banana is on my near-term reading list
2013-03-21 21:50:46	<--	dmac (~Adium@12.207.22.242) has quit (Ping timeout: 252 seconds)
2013-03-21 21:50:55	mm_freak	FRP is about time-varying values…  i would recommend netwire, but it has no GUI layer yet
2013-03-21 21:50:59	ab9rf	in part because i am seriously considering writing games in haskell and reactive-banana appears very useful for that
2013-03-21 21:51:04	<--	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (Read error: Operation timed out)
2013-03-21 21:51:05	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-21 21:51:08	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-21 21:51:08	--	ozataman_ is now known as ozataman
2013-03-21 21:51:09	<--	AloisJanicek (~AloisJani@188.80.broadband5.iol.cz) has quit (Client Quit)
2013-03-21 21:51:14	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-21 21:51:24	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-21 21:51:26	hiptobecubic	I think C gets an unfair rap. If it were a new language there would be no question that it's "niche" and not supposed to be used for everything. Just because it's been around since before all of these nice languages were invented means it got used for things it wasn't any good for and was judged accordingly.
2013-03-21 21:51:31	mm_freak	ab9rf: if this is about realtime games, i recommend netwire instead of reactive-banana…  there are a few examples right on the FRP wiki page
2013-03-21 21:51:32	<--	xcv_ (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-21 21:51:46	ab9rf	mm_freak: noted, i'll put netwire on the reading list too
2013-03-21 21:52:12	lispy	mm_freak: why is thta?
2013-03-21 21:52:17	<--	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has quit (Quit: mcstar)
2013-03-21 21:52:18	<--	boegel (~boegel@109.130.137.51) has quit (Ping timeout: 264 seconds)
2013-03-21 21:52:18	mm_freak	lispy: what?
2013-03-21 21:52:21	hiptobecubic	what makes netwire more appropriate than banananana?
2013-03-21 21:52:25	lispy	yeah
2013-03-21 21:52:29	mm_freak	hiptobecubic: i don't see any use case at all for C…  i write even my current kernel project in C++
2013-03-21 21:53:07	ab9rf	i haven't used C since the late 90s
2013-03-21 21:53:15	ab9rf	no, wait i wrote a small project in C in 2003
2013-03-21 21:53:22	mm_freak	hiptobecubic: technically netwire is a thin layer around regular functions, so it's very efficient and flexible…  it makes development of custom components easy
2013-03-21 21:53:23	__books__	what is the negative thing about C really? It is an abstraction layer over the hardware. gives you good expressive power without loss of control(almost)...
2013-03-21 21:53:38	shachaf	This sounds a bit off-topic.
2013-03-21 21:53:44	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-03-21 21:53:54	hiptobecubic	a little
2013-03-21 21:54:00	mm_freak	__books__: because C++ gives you a few goodies from haskell land for low level projects that C lacks
2013-03-21 21:54:01	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-21 21:54:16	ab9rf	mm_freak: have you a suggestion for reading up on netwire?  the hackage page lacks any documention or links to documentation
2013-03-21 21:54:23	mm_freak	you even get a form of dependent types in C++
2013-03-21 21:54:24	ski	__books__ : no tail recursion, e.g.
2013-03-21 21:54:24	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-21 21:54:37	mm_freak	ab9rf: open the Control.Wire module
2013-03-21 21:54:53	mm_freak	ski: actually gcc has TCO
2013-03-21 21:54:53	ab9rf	mm_freak: thank you
2013-03-21 21:54:55	ski	(and returning multiple things is clumsy)
2013-03-21 21:55:15	dgriffi	Is there something in Text.Blaze.Html that creates a pagebreak?
2013-03-21 21:55:27	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-03-21 21:55:29	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Quit: WeeChat 0.4.0)
2013-03-21 21:55:31	ski	mm_freak : well, yes. if you don't take address of `auto'-variables or something like that
2013-03-21 21:55:55	ski	(but if we're talking GCC, then we also have "downward FUNARGs")
2013-03-21 21:56:04	mm_freak	__books__: as a serious language even for low level development i demand at least:  some kind of encapsulation, some type-level features like parametric polymorphism, exceptions
2013-03-21 21:56:21	ab9rf	mm_freak: exceptions are a pain
2013-03-21 21:56:30	hiptobecubic	C++ exceptions are the worst
2013-03-21 21:56:32	ski	__books__ : oh yes, apart from parametric polymorphism, i also want existentials
2013-03-21 21:56:45	mm_freak	ab9rf: what do you suggest instead?  null?  -1?  ""?  some other PHP pain?
2013-03-21 21:57:01	ski	.. and an inst system wouldn't be half bad
2013-03-21 21:57:11	<--	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has quit (Ping timeout: 255 seconds)
2013-03-21 21:57:12	Cale	__books__: The thing about C is that it's sort of awkward -- it's too high level for a lot of low-level uses (where LLVM for example outshines it), and too low-level to really be worth struggling with for most everyday programming.
2013-03-21 21:57:21	ab9rf	mm_freak: not having exceptions is also a pain :)
2013-03-21 21:57:31	mm_freak	Cale++
2013-03-21 21:57:42	mm_freak	it's too high level where it should be lower level and too low level where it should be high level
2013-03-21 21:57:44	ab9rf	Cale: yeah, i think that about nails it
2013-03-21 21:57:45	Cale	There are very few applications where C is really the right thing anymore, but it's still popular because there are still a lot of people who know it.
2013-03-21 21:58:03	<--	Aune (~arne@volac.lysator.liu.se) has quit (Quit: Hath Deprated)
2013-03-21 21:58:11	-->	moai (~m@141.70.23.87) has joined #haskell
2013-03-21 21:58:12	johnw	C is very easy source code to read, because there are so few magical things that can happen
2013-03-21 21:58:13	ocharles	heyyyy, I think I could use netwire for my hobby bitcoin trading thing
2013-03-21 21:58:16	mm_freak	ab9rf: that's my point…  i demand exception support
2013-03-21 21:58:18	ocharles	that I've not yet even started
2013-03-21 21:58:22	johnw	except when people get into pointer trickery
2013-03-21 21:58:27	ocharles	but for computing the moving averages of the market data, netwire seems ideal
2013-03-21 21:58:34	ab9rf	mm_freak: then get off the hardware stack :)
2013-03-21 21:58:37	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-03-21 21:58:41	Cale	ocharles: Do you have any idea what's been going on with the price of bitcoins recently? Why is it skyrocketing?
2013-03-21 21:58:43	ski	johnw : except when you UB and demons fly out of your nose :P
2013-03-21 21:58:50	johnw	BU?
2013-03-21 21:58:56	mm_freak	ab9rf: dunno if you overread it, but i'm writing a kernel in C++ ;)
2013-03-21 21:58:57	ski	Undefined Behaviour
2013-03-21 21:59:03	hiptobecubic	ocharles, I had the same idea. Are you making a bot ?
2013-03-21 21:59:17	ab9rf	mm_freak: have fun with that!
2013-03-21 21:59:22	-->	araujo (~araujo@190.73.45.171) has joined #haskell
2013-03-21 21:59:22	<--	araujo (~araujo@190.73.45.171) has quit (Changing host)
2013-03-21 21:59:22	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-03-21 21:59:24	ocharles	Cale: wish I knew
2013-03-21 21:59:24	ab9rf	mm_freak: i wouldn't use exceptions in that
2013-03-21 21:59:29	mm_freak	ab9rf: why not?
2013-03-21 21:59:33	ab9rf	especially nt C++ exceptions
2013-03-21 21:59:39	ocharles	hiptobecubic: yes, I'd like to make something that just buys and sells at "sensible" times
2013-03-21 21:59:44	ocharles	which seems like never, right now :p
2013-03-21 21:59:51	-->	dates (58e3e89b@gateway/web/freenode/ip.88.227.232.155) has joined #haskell
2013-03-21 21:59:58	hiptobecubic	Cale, people are jumping on because people are jumping on. It's your standard 'bubble'
2013-03-21 21:59:58	mm_freak	ocharles: no problem:  'empty' =)
2013-03-21 22:00:02	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Remote host closed the connection)
2013-03-21 22:00:03	ocharles	:D
2013-03-21 22:00:08	ski	johnw : e.g. "C Compilers Disprove Fermat’s Last Theorem" by John Regehr in 2010-04-28 at <http://blog.regehr.org/archives/140>
2013-03-21 22:00:12	ab9rf	hiptobecubic: bitcoin's market is almost entirely noise
2013-03-21 22:00:19	Cale	hiptobecubic: But there's something really strange going on in the last couple days
2013-03-21 22:00:20	mm_freak	ocharles: in netwire 3 there was even a wire called 'never', but it's equivalent to 'empty', so i removed it =)
2013-03-21 22:00:27	hiptobecubic	Cale, yes, it's exploding
2013-03-21 22:00:31	ocharles	mm_freak: oh, you are the author of netwire?
2013-03-21 22:00:33	dgriffi	Can anyone here answer a question about Text.Blaze.Html?
2013-03-21 22:00:37	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-21 22:00:38	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 22:00:38	mm_freak	ocharles: yeah
2013-03-21 22:00:38	ocharles	dgriffi: fire away
2013-03-21 22:00:41	hiptobecubic	But that's what bubbles do.
2013-03-21 22:00:49	ab9rf	mm_freak: there's an ACM paper around somewhere about why TiVo elected to remove exceptions from C++ in their product.
2013-03-21 22:00:50	ocharles	mm_freak: in that case, have one "you rock" token
2013-03-21 22:00:51	ocharles	:)
2013-03-21 22:00:57	dgriffi	ocharles: I'm wondering if there's anything in there that will generate a page break.
2013-03-21 22:01:09	ocharles	dgriffi: a "page break"? what's that as a html element?
2013-03-21 22:01:18	mm_freak	ocharles: thanks…  if you have any questions, just ask
2013-03-21 22:01:30	__books__	Cale: for most everyday programming, sure if that means webapps, games etc. i dont know about LLVM.  Im into embedded systems and C is pretty much the norm even if some C++ is used at the application level. Dont see much wrong with it. Type safety is missing ofc. Maybe im satisfied because im too unimaginative... :)
2013-03-21 22:01:35	dgriffi	ocharles: <div style=\"page-break-before:always;\"></div>
2013-03-21 22:01:45	ab9rf	mm_freak: you might find it informative :)
2013-03-21 22:01:53	ocharles	dgriffi: then H.div ! A.style "page-break-before: always"
2013-03-21 22:01:54	mm_freak	ab9rf: if you know a good alternative, i'm very open for suggestions
2013-03-21 22:02:01	hiptobecubic	Many large organizations have a flat no exceptions policy
2013-03-21 22:02:04	ocharles	dgriffi: which you're welcome to package up as your own function
2013-03-21 22:02:05	mm_freak	ab9rf: error return values are not an alternative
2013-03-21 22:02:09	dates	hello. I have a tuple like this : (3,5,"String1","String2","String3","String4","String5","String6","String7","String8","String9","String10",). Can you tell me how can I retrieve nth element?
2013-03-21 22:02:17	paintcan	mm_freak: global variables?
2013-03-21 22:02:24	ab9rf	mm_freak: tivo disagrees with you
2013-03-21 22:02:26	mm_freak	dates: pattern matching, a custom function or lenses
2013-03-21 22:02:45	-->	gusto (~gusto@ppp-212-114-181-21.dynamic.mnet-online.de) has joined #haskell
2013-03-21 22:02:48	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:02:55	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Ping timeout: 264 seconds)
2013-03-21 22:03:00	ocharles	ab9rf: tbf, I don't exactly consider TiVo authority on programming practices :)
2013-03-21 22:03:02	Cale	dates: (\(_,_,_,_,x,_,_,_,_,_,_,_) -> x)
2013-03-21 22:03:06	ocharles	though I should still probably look at that paper
2013-03-21 22:03:09	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Quit: Leaving)
2013-03-21 22:03:09	--	stelleg_away is now known as stelleg
2013-03-21 22:03:11	mm_freak	ab9rf: a large portion of the programmer community also disagrees with functional programmers…  i'll stay unbiased and form my own conclusions
2013-03-21 22:03:11	Cale	dates: (but don't use large tuples like that)
2013-03-21 22:03:17	dgriffi	ocharles: so, there's nothing already available for this?
2013-03-21 22:03:20	mm_freak	ab9rf: but i'll read their paper…  at least skim through it
2013-03-21 22:03:22	ski	mm_freak : hm, doesn't Fortran have multiple returns ?
2013-03-21 22:03:29	ocharles	dgriffi: not built in to the library itself, no
2013-03-21 22:03:36	ab9rf	mm_freak, ocharles: http://queue.acm.org/detail.cfm?id=1127867
2013-03-21 22:03:38	mm_freak	ski: fortran is awfully low level
2013-03-21 22:03:49	hiptobecubic	mm_freak, no it isn't.
2013-03-21 22:03:53	ocharles	dgriffi: that's not really its goal - the goal of blaze-html is to provide a general interface to generating html
2013-03-21 22:03:57	ab9rf	fortran is not low-level
2013-03-21 22:04:04	-->	bradleyayers (~brad@49.176.67.44) has joined #haskell
2013-03-21 22:04:06	Cale	dates: You'll rarely see anything much longer than a pair or the occasional triple in real Haskell code.
2013-03-21 22:04:07	hiptobecubic	This is what i'm talknig about. These languages are being used for things that they were not intended to solve
2013-03-21 22:04:10	<--	DinMamma (~simon@109.231.200.166) has quit (Ping timeout: 256 seconds)
2013-03-21 22:04:10	ocharles	also, I want to rewrite blaze-html (or write my own blaze-html) that has a valid Monad instance
2013-03-21 22:04:13	ab9rf	and actually fortran has some really strong points for certain purposes
2013-03-21 22:04:15	dgriffi	ocharles: would it be a good idea to get that into the official codebase?
2013-03-21 22:04:18	Cale	dates: anything more, and you're better off using something more structured.
2013-03-21 22:04:22	ocharles	dgriffi: not for blaze-html, no
2013-03-21 22:04:25	mm_freak	ski: C++' class and template system actually comes in handy for kernel dev, but my ultimate goal is to use a functional language…  my current aim is to add a standalone target to idris, but that's going to take a while
2013-03-21 22:04:28	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: [BX] Outwit. Outplay. Outlast. Survivor BitchX.)
2013-03-21 22:04:35	ocharles	dgriffi: but as I said - you can make your own library and release that on hackage, no problem
2013-03-21 22:04:39	hiptobecubic	so people are like "You can't even write a webserver in FORTRAN. It's terrible", which is stupid
2013-03-21 22:04:40	dates	I am afraid I have to deal with larger tuples, like at least 10 tuple
2013-03-21 22:04:46	ab9rf	fortran is especially easy to parallelize, and its semantics for numerical evaluation ensure stability of order of evaluation, so the programmer can control precision loss
2013-03-21 22:04:55	Cale	dates: Why is that?
2013-03-21 22:05:01	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Ping timeout: 245 seconds)
2013-03-21 22:05:03	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 22:05:12	__books__	So let's talk realtime. How would an improvement on C or C++ look? Could you design a good functional alternative with out GC?
2013-03-21 22:05:12	dgriffi	ocharles: I'm trying to modify Pandoc to do pagebreaks in html.  adding yet another library doesn't seem like a good idea
2013-03-21 22:05:34	mm_freak	__books__: i don't aim to go without GC
2013-03-21 22:05:47	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Client Quit)
2013-03-21 22:05:51	dates	Cale : because I have such an input
2013-03-21 22:05:52	Cale	hiptobecubic: I guess in log scale it doesn't look so unreasonable ;) http://bitcoincharts.com/charts/mtgoxUSD#tgOzbgDzm1g10zm2g25zvzl
2013-03-21 22:06:02	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-03-21 22:06:07	dgriffi	bitcoin is heading for a big crash
2013-03-21 22:06:12	hiptobecubic	Cale, haha. Jesus christ
2013-03-21 22:06:28	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-21 22:06:38	ocharles	dgriffi: add it to pandoc then
2013-03-21 22:06:40	mm_freak	does fortran have a template system like C++?
2013-03-21 22:06:40	dgriffi	ocharles: I'll just use preEscapedString for my substitution and hope the maintainer likes what I'm doing
2013-03-21 22:06:50	mm_freak	or even actual parametric polymorphism?
2013-03-21 22:06:55	ski	__books__ : "Retrospective Thoughts on BitC" by Jonathan S. Shapiro in 2012-03-23 at <http://www.coyotos.org/pipermail/bitc-dev/2012-March/003300.html> seems interesting, though i don't know that much about this system
2013-03-21 22:07:03	ab9rf	mm_freak: does fortran need those things?
2013-03-21 22:07:04	ocharles	dgriffi: I don't think pandoc would object to you adding 'pageBreak = H.div ! A.style "..." mempty'
2013-03-21 22:07:06	<--	cognominal (~cognomina@37.160.40.245) has quit (Quit: This computer has gone to sleep)
2013-03-21 22:07:07	<--	gg7 (~gg7@unaffiliated/gg7) has quit (Read error: Connection reset by peer)
2013-03-21 22:07:12	mm_freak	ab9rf: i need those things
2013-03-21 22:07:20	ab9rf	mm_freak: then don't use fortran :)
2013-03-21 22:07:25	mm_freak	ok =)
2013-03-21 22:07:26	-->	anRch (~markmilli@ip-64-134-242-108.public.wayport.net) has joined #haskell
2013-03-21 22:07:27	hiptobecubic	FORTRAN is not for systems programming.
2013-03-21 22:07:37	ab9rf	although i questin whtehr yuo really _need_ those things
2013-03-21 22:07:41	ab9rf	you just _think_ you need them :)
2013-03-21 22:07:48	ski	__books__ : for "good functional alternative with out GC", <http://en.wikipedia.org/wiki/Region-based_memory_management> might perhaps be interesting
2013-03-21 22:07:55	ab9rf	hiptobecubic: i used to write text processing software in fortran :)
2013-03-21 22:08:01	sproingie	drbean: a "big crash" for those left who care about bitcoin.  there are probably more people trading pogs.
2013-03-21 22:08:07	dgriffi	ocharles: look here:  https://github.com/DavidGriffith/pandoc/commit/ef7f867e323ecf9a9bad25c27721338228f11f2d
2013-03-21 22:08:09	mm_freak	ab9rf: i'm a haskell programmer, so practically i need them =)
2013-03-21 22:08:21	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-03-21 22:08:25	<--	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has quit (Quit: WeeChat 0.4.0)
2013-03-21 22:08:34	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-21 22:08:39	-->	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has joined #haskell
2013-03-21 22:08:40	dgriffi	ocharles: those are the changes that would enable pagebreaks.  The string "fart fart fart" is just a placeholder.  I haven't pushed anything more sensible yet
2013-03-21 22:08:46	mm_freak	ab9rf: i'm using (in C++!) a form of dependent types to prevent things like buffer overflows
2013-03-21 22:08:47	hiptobecubic	Everytime I use templates, I end up realizing that I only actually needed it to work with maybe two or three different types and hardcoding them in would have saved assloads of time in the debugging stage
2013-03-21 22:08:54	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 22:08:57	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 22:08:59	Cale	http://bitcoincharts.com/charts/mtgoxUSD#rg360ztgOzbgDzm1g10zm2g25zv -- non-log-scale, this year ;)
2013-03-21 22:09:25	ocharles	Cale: do you have any bitcoins, or do you just watch as an interested observer?
2013-03-21 22:09:29	hiptobecubic	Cale, i wasn't aware of the last few days. It's really out of control. It's going to crash *hard*
2013-03-21 22:09:31	Cale	I'm just watching
2013-03-21 22:09:31	--	irc: disconnected from server
2013-03-21 22:12:42	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-21 22:12:42	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-21 22:12:42	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-21 22:12:42	--	Nicks #haskell: [@ChanServ [[zz]] [swift] \rs ]OLI[ __books__ __main__ _br_ _flow_ _janne _jwest `0660 `bps `micro `nand` `ramses a11235 aajmakin aavogt ab9rf absence abumirqaan acfoltzer acharles Adeon adimit Adios adnap adnauseam adzeitor afarmer_ AfC Afish aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator_ alejandrogomez alexander__b Alice3 alios alnix_ alpounet alshain Amadiro amatsu amiller anachron_ anders^^ andrewsw aninhume1 anona anRch AntiSpamMeta apaku Apocalisp appamatto apucacao araujo arbn arenz argiopeweb aristid arkeet arkx arlinius armlesshobo arnihr__ arun asante asQuirreL aszlig Athas AtnNn augustl Axman6 b52 b_jonas BadKitty bananagram banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ Belgarion0 ben_d bens benzap bergey betawaffle bezik bgamari bholst Bigcheese BigEndian BigTom birkenfeld blackmirroxx BlankVerse1 BlastHardcheese blooberr Bloodless BMeph bmfx BobFunk bobry boegel bogner Boney Boreeas Botje bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bru` bstrie Bwild bxc byorgey ByronJohnson bytbox c_wraith cads Cale caligula Canar canta canvon carlocci carter ccasin ccxCZ cdidd cdntr celery__ centrinia Cerise certainty cfricke chance charlesofarrell Chaze chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisirc chrra ciaranm CindyLinz circle cjay ClaudiusMaximus Clint clog cmccann_ cmears cmsd2 cods colah collin comak comatose companion_cube conehead confound connelly coppro copumpkin CosmicRay Counter-Strike CoverSlide cow-orke1 crdueck cross crs_ Cryovat ctype_real cwvh cynick cyphase d-snp dabradley dan_johnsin dannybtran danr darinmorrison dario Dashkal davean davorak dcoutts deavidsedice Deewiant def-lkb dennda dented42 dEPY Derander descender DexterLB dfletcher dgriffi dgvncsz0f DigitalKiwi dilinger dixie djahandarie djanatyn dju dkasak dlundy_ dmac dmarker dmwit docksider Dodek dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT`` duairc__ dumbhat DustyDin1o Dybber dyreshark dysinger eacameron EarlGray earthy ecuderpam edenc edon edtsech Eduard_Munteanu edwtjo Eelis ehamberg Eiam einsof eis eL_Bart0 electrogeek elgot Eliel elliott elliottcable emc2 emma end3rW endojelly Enigmagic ent epta ericmj Eridius erkin ernst Erstarrung Estrellas etabot etehtsea ethercrow etrepum eviltwin_ ewt Excureo eyck f8_ fabjan faen faheem FalkoPeters fall_ fayden fcr fenton_travers fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin flebron floatingman flux fmapE folone folone_ formalcow fotc Franciman freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gereedy ghorn Ghoul_ gienah Gilly glguy Gothmog_ Gracenotes gseitz gspr gthorslund guerrilla Guest10329 Guest22595 Guest65991 Guest91870 Gunni gusto guy_ guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hamid hamishmack hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk Hermit heruur hiptobecubic hiratara hiredman hiroakip hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hungryblank hvr hyko ibid IbnFirnas Iceland_jack identity idnar idntfy idntfy[work] ido idoru Igloo ijp` imeredith inr int-e integral Internet13 ion ique isenmann isomorphic issimus1 Itkovian iulian ivan\ ivan` ixian j303 Jaak jabirali jackhill jacobw jaimef jamwt janbanan jang1 JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55_ jbauman jcp jdoliner Jeanne-Kamikaze jedai jeffreybaird Jello_Raptor jercos jerojasro Jesin jesyspa jfischoff jix jlamothe jlewis jliikka jlouis_ jmcarthur jMCg jml joachifm joar jodaro joe9 JoeHazzers joeyh johnny934759 johnw joneshf jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmae julmuri junsuijin jyyou k0001 k00mi k0ral kadoban KaiSforza kakos kallisti kalven KaneTW kaol Kazimuth Ke kennyd kennyp kevinqcs Khisanth kini Kinnison KitB__ kith kkris kloeri kludgy klugez kmels kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ kryft kshannon ktosiek Kuba kushal kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard lcfrs LeaChim lemao lennart_ lenstr leoncamel leprauchan leroux Lethalman levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lrojas lucca luite Luke lulf lusory m0g m3ga machisuji magicman majoh maksbotan_ malorie maltin mami mannyv marienz Martty MasseR mastensg MasterPu1cher mateu Mathnerd314 mattp_ matzo mauke Maxdamantus mceier mcguitan83 McManiaC mechainai mechairoi mefisto Megant mendez merijn message144 meyersh_ mgile mgsloan miasma mietek mike2 mikecaruso mikeplus64 mikurubeam milessabin milli mimi_vx mimico__ mirsal mixi mjr84 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 moai MoALTz mokus_ mollerstrand monique_ monochrom monoidal moonlite_ morazow mornfall morolin mortberg Mortchek mpu mrd mrdomino_ MrFenix mrkotfw MrMeh mrotondo mrshoe mrsolo mspells mtahmed mullein munro museun mux myme n_b Nanar napping nardul Natch natechan natte ndngvr netj neurocyte newsham nexx Nickeeh nicoo Nik_89 niko nikola nilg` Nimatek nimish nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj Noldorin nonymousa noplamodo notdan NougatRillettes Nshag numeral nus nwf obcode ocharles ofan Okasu OlegYch opqdonut ormaaj Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s_ ousado overflo ozataman paintcan PaksAway Paprikac_ parcs PartyKat2e PaulVisschers pdxleif peddie peltchu pepijn_away perlite permagreen petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul philipde` PHO_ phyrex1an piezo pikhq_ Plex- plhk plucas pmade pnielsen Pods popz pqmodn_ pr predator117 preflex prh pricklypear PrO_OkI profmakx ps-auxw pseudolio psii Ptival ptrf purefn puzza007 pwang__ pyrtsa pyykkis q66 quaestor quchen quicksilver quuxman qwandor|quassel qwr qz r126l_ raek_ RageOfThou raichoo raid rainmaker Ralith RayNbow`TU Raynes Razz rcj_ rcl realnot redjohn reembarking08 refold reiddraper Reite Rembane RenJuan rexamophone rfw rickeyski-k rio Riussi_ rmarianski rmunoz rmunroe robbe- robbert` rossabaker ryanakca s00pcan S11001001 s4msung_ s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi saml sarfraz saurik sbahra scgilardi schlicht_ schlumpi schovi schroedinbug sclv sclv_ Scott_firebeta Sculptor SeanTAllen seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo sh shachaf shanse shepheb shergill shintah SHODAN shurikas shutdown_-h_now si14 simon__ simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash SLi sm smarter__ snoyberg so Soft sohum solarus solirc sordina2 SoupE spion Spockz sproingie Squid_Tamer squidz srcerer srhb sShintah staafl Starfire stat_vi statusfailed steez stelleg stepcut stephe strax_ stvc suiside sully sunfun sunnavy supersym supki sw17ch Swizec sysop_fb system64 tahu takuan tamiko tanakh Tarential taruti taterbase tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tenmilestereo tensorpudding Tesseraction tessier Testos tew88 tg tgeeky Th0mas thalassarche tharper The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh Thomyho4 thorkilnaur thorsten` thoughtpolice threeday1onk threesome tibbe tim timemage timtom tippenein tjohnson tkd tlaine tlevine tmiw TML tobiassj1sten tom339 tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek trevize tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey u__ Ulrar Urchin Urchin[emacs] user0213120 UziMonkey Valodim Varakh vehk verrens Vertue vhz vili vmeson vobi Volstvok Vorpal voyd_ Vq wagle Walther warpy__ Watcher7 waterlaz wavewave wchun wei2912 weie_ wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wtw wump wunki wyfrn x7 xaimus xcvii xinming XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai xymox yam yan_ yano yeltzooo yezariaely yiannis_t yitz yriw ysulsky_ yumike Zariel zebr Zedrikov zeiris zenzike zero7 ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp]
2013-03-21 22:12:42	--	Channel #haskell: 1039 nicks (1 op, 0 halfops, 0 voices, 1038 normals)
2013-03-21 22:12:42	--	URL for #haskell: http://www.haskell.org/
2013-03-21 22:12:44	--	Mode #haskell [+CLcnpt]
2013-03-21 22:12:44	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-21 22:12:54	mm_freak	and that's #define-d to disappear when -DDEBUG is not there
2013-03-21 22:12:59	ab9rf	mm_freak: well, you're free to disagree :)
2013-03-21 22:13:09	ab9rf	C++ exceptions are a botch, regardless
2013-03-21 22:13:18	<--	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has quit (Client Quit)
2013-03-21 22:13:22	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-21 22:13:24	-->	k0001_ (~k0001@host102.190-229-215.telecom.net.ar) has joined #haskell
2013-03-21 22:13:30	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-21 22:13:31	mm_freak	i don't see much difference between C++ exceptions and haskell exceptions, tbh, except that haskell has GC
2013-03-21 22:13:33	-->	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has joined #haskell
2013-03-21 22:13:41	-->	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-21 22:13:47	ab9rf	mm_freak: you don't say
2013-03-21 22:13:55	sproingie	ab9rf: my "favorite" part about C++ exceptions is how throwing in a handle causes an immediate abort
2013-03-21 22:14:00	sproingie	*handler
2013-03-21 22:14:21	<--	user0213120 (~user02131@89.47.4.234) has quit (Quit: Leaving)
2013-03-21 22:14:33	hiptobecubic	haskell exceptions feel pretty inappropriate too most of the time
2013-03-21 22:14:48	ski	it's interesting how in some Lisps you can restart (some) exceptions (called "conditions")
2013-03-21 22:14:49	sproingie	yes but haskell actually has other mechanisms for communicating exceptional status
2013-03-21 22:14:56	Cale	The extensibility of exceptions in the new Haskell exception library is really nice though.
2013-03-21 22:15:02	mm_freak	hiptobecubic: really?  see Maybe used all over the base library ;)
2013-03-21 22:15:11	ocharles	Cale: new as in forthcoming, or current?
2013-03-21 22:15:15	Cale	Current.
2013-03-21 22:15:18	hiptobecubic	Cale, elaborate?
2013-03-21 22:15:28	mm_freak	hiptobecubic: see SomeException and the Exception class
2013-03-21 22:15:38	mm_freak	they use some magic to allow to match against specific exception types
2013-03-21 22:15:40	thoughtpolice	well, "new" in the sense it was put into base like, 3-4 years ago
2013-03-21 22:15:43	mm_freak	much like in other languages
2013-03-21 22:16:03	mm_freak	the old exception system was awkward to use
2013-03-21 22:16:21	hiptobecubic	mm_freak, is this an argument for or against them? I'm saying that I *don't* like exceptions in Haskell and they feel totally out of place.
2013-03-21 22:16:25	Cale	You can construct a new instance of Exception which is an arbitrary superset of existing exception types.
2013-03-21 22:16:27	mm_freak	hiptobecubic: for them
2013-03-21 22:16:35	<--	k0001 (~k0001@host8.190-224-62.telecom.net.ar) has quit (Ping timeout: 256 seconds)
2013-03-21 22:16:48	-->	Taneb (~nathan@host-2-97-152-171.as13285.net) has joined #haskell
2013-03-21 22:16:48	mm_freak	i just wanted to explain the "new" exception system =)
2013-03-21 22:17:05	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-03-21 22:17:19	<--	wavewave (~wavewave@67-194-109-247.wireless.umnet.umich.edu) has quit (Ping timeout: 264 seconds)
2013-03-21 22:17:32	<--	permagreen (~donovan@204-195-27-175.wavecable.com) has quit (Quit: USER DEAD IMMINENT)
2013-03-21 22:17:57	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-21 22:18:15	mm_freak	hiptobecubic: but let's consider a practical example:  you have a fileServer :: Handle -> FilePath -> IO ()
2013-03-21 22:18:17	Cale	You can create nice hierarchies of exceptions and then insert new things into them in future modules, by implementing toException and fromException appropriately.
2013-03-21 22:18:19	mm_freak	how would you write it?
2013-03-21 22:18:25	ski	.. i don't really like how you can throw a `FooException' and catch it as a `SomeException' (and vice versa)
2013-03-21 22:18:42	dgriffi	ocharles: does this line make sense?
2013-03-21 22:18:45	dgriffi	ocharles: blockToHtml opts (NewPage) = return $ H.div ! A.style "page-break-before:always;"
2013-03-21 22:18:57	mm_freak	ski: it's one ugly necessity of the exception system, but i can live with it
2013-03-21 22:19:00	hiptobecubic	I guess usually what I don't like is how they feel 'out of band'. If that is mitigated by using the new features correctly then perhaps it isn't so terrible. My Haskell is far from Exceptional.
2013-03-21 22:19:04	mm_freak	ski: i know, special cases suck
2013-03-21 22:19:05	ski	imo, if you want to catch a `FooException' as a `SomeException' you should use some kind of `handleAny' (or equivalent) operation
2013-03-21 22:19:05	hiptobecubic	HEYOOOOO
2013-03-21 22:19:10	ocharles	dgriffi: I guess
2013-03-21 22:19:17	ski	and a `throwAny' for the other direction
2013-03-21 22:19:22	-->	beaky (~beaky@bba68378.alshamil.net.ae) has joined #haskell
2013-03-21 22:19:23	beaky	hello
2013-03-21 22:19:25	ocharles	dgriffi: ask the compiler if it makes sense, I can't help you with pandoc stuff
2013-03-21 22:19:32	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-21 22:19:32	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-21 22:19:32	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-21 22:19:33	dgriffi	ocharles: I'm getting "Couldn't match expected type `Html' with actual type `Html -> Html'"
2013-03-21 22:19:38	<--	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has quit (Read error: Operation timed out)
2013-03-21 22:19:39	ski	(or just open the `SomeException' and use `throw' on the `e' with `Exception e')
2013-03-21 22:19:45	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Ping timeout: 256 seconds)
2013-03-21 22:19:45	ocharles	dgriffi: H.div expects some contents
2013-03-21 22:19:46	<--	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-03-21 22:19:52	ski	mm_freak : afaics, it's not a necessity
2013-03-21 22:19:54	-->	donut_ (6b00c37c@gateway/web/freenode/ip.107.0.195.124) has joined #haskell
2013-03-21 22:19:55	ocharles	so use `mempty` if you want "empty" contents
2013-03-21 22:20:06	ocharles	dgriffi: and `import Data.Monoid (mempty)`
2013-03-21 22:20:10	Cale	ski: Well, you shouldn't often be catching SomeException, though it's obviously the laziest way to go about things (not in the sense of lazy evaluation)
2013-03-21 22:20:13	mm_freak	ski: well, how would you design Exception?
2013-03-21 22:20:37	mm_freak	hiptobecubic: could you give me an example of how you would write the fileServer function?  it should only send the contents of the given file to the given handle…  lazy I/O is fine
2013-03-21 22:20:55	dgriffi	ocharles: mempty is already imported
2013-03-21 22:21:09	mm_freak	hiptobecubic: assume that there is no predefined withFile function
2013-03-21 22:21:16	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 240 seconds)
2013-03-21 22:21:19	ski	mm_freak : a `handle (\(e :: FooException) -> ..e..) (...)' would only handle `FooException's thrown from `...', not `throw'n `SomeException's which happen (in one or more layers) to contain a `FooException'
2013-03-21 22:21:23	ocharles	dgriffi: ok
2013-03-21 22:21:31	hiptobecubic	mm_freak, I suppose that's not a great type to use *unless* you are planning on exploding out the middle of the function when you have an error.
2013-03-21 22:21:48	Cale	One thing which I'm a little surprised about is the silly way that IOException is poorly reflected in the Control.Exception library, when there's no need for that. At one point I wrote a module to reflect the insides of IOExceptions as new exception types.
2013-03-21 22:21:48	mm_freak	hiptobecubic: why?  the type is fine
2013-03-21 22:21:50	-->	pcapriotti (~paolo@b0f9ca6e.bb.sky.com) has joined #haskell
2013-03-21 22:22:04	mm_freak	hiptobecubic: if you have a better alternative, propose it
2013-03-21 22:22:04	<--	Paprikac_ (~Paprikach@93-82-140-105.adsl.highway.telekom.at) has quit (Remote host closed the connection)
2013-03-21 22:22:20	ski	mm_freak : and a `handle (\(e :: SomeException) -> ..e..) (...)' would only handle `SomeException's thrown from `...', not `throw'n `FooException's, for `FooException' distinct from `SomeException'
2013-03-21 22:22:21	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-21 22:22:44	hpaste	Cale pasted “IOError as Control.Exception types” at http://hpaste.org/84433
2013-03-21 22:22:46	<--	Franciman (~quassel@host48-48-dynamic.181-80-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-21 22:22:51	hiptobecubic	Well suppose the file path isn't valid for example, you'd like the return value to include something about failure
2013-03-21 22:23:04	Cale	^^ the fact that you can do stuff like that in a future module is really nice imo
2013-03-21 22:23:12	beaky	are exceptions good to use in my code?
2013-03-21 22:23:16	-->	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has joined #haskell
2013-03-21 22:23:26	Cale	beaky: I think they're all right for IO code
2013-03-21 22:23:29	ski	mm_freak : this would mean that we need a `handleAny' to catch a `FooException' (for unknown at catch site `Foo') as a `SomeException' -- and perhaps a `throwAny' for convenience
2013-03-21 22:23:40	johnw	beaky: exceptions solve certain problems, but I prefer writing total functions if I can
2013-03-21 22:23:50	Cale	For pure code, that's another thing
2013-03-21 22:23:52	mm_freak	hiptobecubic: that's a minor matter…  let's disregard security and assume that failure is handled by not sending anything
2013-03-21 22:24:08	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-21 22:24:08	mm_freak	hiptobecubic: for the sake of making my point
2013-03-21 22:24:21	beaky	ah
2013-03-21 22:24:23	ski	and also `catchAny',`tryAny'
2013-03-21 22:24:43	ski	not sure how useful `catchAnyJust' would be
2013-03-21 22:24:45	beaky	sometimes I put a case in my pure code that does 'error "DomainError"'
2013-03-21 22:24:48	<--	donut_ (6b00c37c@gateway/web/freenode/ip.107.0.195.124) has quit (Quit: Page closed)
2013-03-21 22:24:51	hiptobecubic	Well what's the issue then? You either silently do something or you don't. Why is anyone raising an exception?
2013-03-21 22:24:57	johnw	beaky: that is certainly to be avoided :)
2013-03-21 22:25:02	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-21 22:25:11	johnw	partial functions are like coding bombs
2013-03-21 22:25:13	beaky	how do I constrain it so that the type system can catch those kind of error?
2013-03-21 22:25:18	mm_freak	hiptobecubic: give me an implementation and i point out why you either did it wrong or you used exceptions =)
2013-03-21 22:25:23	johnw	you can't
2013-03-21 22:25:27	johnw	error always has the right type
2013-03-21 22:25:27	beaky	ah :(
2013-03-21 22:25:41	Cale	I might've been able to do an even better job of that module, in fact, by applying various functions in System.IO.Error to extract the relevant bits of information about each exception type.
2013-03-21 22:25:45	ski	mm_freak : any comment ?
2013-03-21 22:25:50	johnw	i use a linter I call hlint++ to point out if I'm creating partial functions
2013-03-21 22:25:53	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-21 22:25:54	mm_freak	ski: i agree
2013-03-21 22:25:55	Cale	(and realise those as fields of the datastructure)
2013-03-21 22:25:59	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-21 22:26:11	-->	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has joined #haskell
2013-03-21 22:26:35	ski	mm_freak : doing this would remove the special magic status that `SomeException' has with `throw',`handle',`catch'
2013-03-21 22:26:45	<--	Lethalman (~lethal@ppp-28-30.28-151.libero.it) has quit (Remote host closed the connection)
2013-03-21 22:26:58	mm_freak	ski: yeah, that's true
2013-03-21 22:27:12	ski	mm_freak : the cost is some duplication of API, though arguably the intent in the two families is somewhat different
2013-03-21 22:27:33	mm_freak	catchAll :: IO a -> (forall e. (Exception e) -> e -> IO a) -> IO a
2013-03-21 22:27:46	ski	*nod*, if you prefer that name
2013-03-21 22:28:04	mm_freak	yeah, any/all…  something like that
2013-03-21 22:28:18	beaky	what is the difference between having state and passing data through a recursive function?
2013-03-21 22:28:28	mm_freak	beaky: nothing
2013-03-21 22:28:30	johnw	beaky: I'm not sure I follow your question
2013-03-21 22:28:31	ski	beaky : is there a difference ?
2013-03-21 22:28:34	beaky	ah
2013-03-21 22:28:38	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 22:28:40	sproingie	the second is one means of implementing the first
2013-03-21 22:28:44	Enigmagic	johnw: turn it into a GHC plugin
2013-03-21 22:28:45	ski	conceptually, it's basically the same
2013-03-21 22:28:54	mm_freak	the second is the only way to implement the first in haskell =)
2013-03-21 22:28:56	beaky	I wanna code up an FSM and I thought the recursive way is one way to do it
2013-03-21 22:29:06	johnw	ah, i see, yeah, there is no difference
2013-03-21 22:29:11	sproingie	mm_freak: naw, iorefs are pretty darn variableish
2013-03-21 22:29:11	johnw	guess how the State monad works :)
2013-03-21 22:29:25	ski	beaky : though with state, we usually also allow state to flow outwards from a function, into the "next" call -- if you don't need that, then an accumulator is quite enough
2013-03-21 22:29:25	mm_freak	sproingie: IORefs don't act like mutable variables unless you use recursion
2013-03-21 22:29:40	sproingie	i suppose you still do have to pass the ref around
2013-03-21 22:29:43	<--	k0001_ (~k0001@host102.190-229-215.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-03-21 22:30:00	-->	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-21 22:30:03	ski	@type random
2013-03-21 22:30:04	mm_freak	sproingie: if you don't recurse, then IORefs are just shadowing
2013-03-21 22:30:05	lambdabot	(RandomGen g, Random a) => g -> (a, g)
2013-03-21 22:30:09	ski	beaky : e.g. that ^
2013-03-21 22:30:10	ab9rf	ski: you can flow state outwards as well by returning it from the function....
2013-03-21 22:30:18	<--	darinmorrison (~dwm@unaffiliated/darinmorrison) has quit
2013-03-21 22:30:22	ski	ab9rf : which is what i meant, yes
2013-03-21 22:30:33	beaky	so returning a pair containing the result and the next state is another way to do it?
2013-03-21 22:30:39	ab9rf	beaky: yes
2013-03-21 22:30:43	dgriffi	what's wrong with this line? return $ H.div ! A.style "page-break-before:always;" mempty
2013-03-21 22:30:44	beaky	wow cool
2013-03-21 22:30:46	-->	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-21 22:30:46	sproingie	that's what State does
2013-03-21 22:30:47	mm_freak	beaky: that's just State in disguise =)
2013-03-21 22:31:00	ab9rf	that's what State is doing, it's just easier to read (and code) using State
2013-03-21 22:31:04	beaky	hmm maybe I can write finite state machines elegantly
2013-03-21 22:31:05	mm_freak	dgriffi: remove the "mempty"
2013-03-21 22:31:13	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: leaving)
2013-03-21 22:31:14	ski	beaky : you need both passing the "before" state in, and returning the "after" state as result (or part of the result, if you want also a separate result) to get the full picture of "state"
2013-03-21 22:31:20	mm_freak	dgriffi: or do this:  A.style "page-break-before: always;" <> mempty
2013-03-21 22:31:29	ski	beaky : in some specific cases, you only need one of these two ingredients, though
2013-03-21 22:31:34	mm_freak	but by the monoid laws that's equivalent to leaving out the mempty
2013-03-21 22:31:35	beaky	ah
2013-03-21 22:31:50	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 22:32:13	dgriffi	mm_freak: still doesn't work: Couldn't match expected type `Html' with actual type `Html -> Html'
2013-03-21 22:32:14	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 252 seconds)
2013-03-21 22:32:23	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:32:51	-->	stephenjudkins (~textual@75-164-246-205.ptld.qwest.net) has joined #haskell
2013-03-21 22:32:52	mm_freak	dgriffi: you need inner HTML for 'div'
2013-03-21 22:32:58	ski	beaky : see how `random' both takes the "before" (pseudo-) random generator state `g' as input, and returns the "after" pRNG state `g' as output
2013-03-21 22:33:03	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-21 22:33:09	mm_freak	dgriffi: H.div someHtml ! A.style "style"
2013-03-21 22:33:14	-->	gentleben (~gentleben@208.74.182.4.static.etheric.net) has joined #haskell
2013-03-21 22:33:15	ski	(also returning the randomly generated value of type `a')
2013-03-21 22:33:21	mm_freak	dgriffi: in other words H.div is a function Html -> Html
2013-03-21 22:33:22	hpaste	dgriffi pasted “blaze error” at http://hpaste.org/84434
2013-03-21 22:33:50	ocharles	mm_freak: the inner html is at the end
2013-03-21 22:33:52	kludgy	Hi all, can anyone help me discover why this simple web server code does only sends a response on a subsequent request? I feel like there's a lazy evaluation bug somewhere here in a do block, but I'm having problems identifying it: http://pastebin.com/a4PPpx5V
2013-03-21 22:33:58	mm_freak	ocharles: no
2013-03-21 22:34:00	mauke	The paste a4PPpx5V has been copied to http://hpaste.org/84435
2013-03-21 22:34:02	ocharles	it's H.div ! A.style ".." $ mempty
2013-03-21 22:34:09	ocharles	mm_freak: yes, because that's why do notation works :)
2013-03-21 22:34:21	mm_freak	dgriffi: example:  H.div (return ()) ! A.style "blah"
2013-03-21 22:34:26	-->	DrChaos (~DrChaos@71.22.67.48) has joined #haskell
2013-03-21 22:34:31	mm_freak	ocharles: that's a type error
2013-03-21 22:34:37	mm_freak	ocharles: (!) :: Html -> Attribute -> Html
2013-03-21 22:35:04	mm_freak	and you have this:  H.div :: Html -> Html
2013-03-21 22:35:13	beaky	is there a special name for functions that have a type like (a -> IO b) ?
2013-03-21 22:35:15	Cale	Okay, who created the syntax colouring for Haskell which is being used by pastebin? I want to tell them that it's bad and they should feel bad.
2013-03-21 22:35:36	mm_freak	beaky: we call them monadic functions or IO functions, but no, it's just a function that results in an IO action
2013-03-21 22:35:37	ocharles	mm_freak: i'm sorry, you are mistaken
2013-03-21 22:35:39	ski	Cale : yeah. my complaint is really with the special magic status of `SomeException'
2013-03-21 22:35:42	ocharles	it's type checking in ghci just fine
2013-03-21 22:35:45	beaky	ah
2013-03-21 22:35:49	<--	milessabin (~miles@private.milessabin.com) has quit (Ping timeout: 258 seconds)
2013-03-21 22:35:50	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 22:35:52	ab9rf	Cale: ugh, that is unpleasant
2013-03-21 22:35:53	ocharles	H.div ! A.style "foo" $ mempty :: H.html
2013-03-21 22:35:58	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 22:36:23	alpounet	mm_freak, I always put the inner html at the end -- has always worked
2013-03-21 22:36:30	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:36:43	ski	beaky : if you squint a little, it's a map from `a' to `b' in the kleisli category for `IO'
2013-03-21 22:36:59	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Remote host closed the connection)
2013-03-21 22:37:09	johnw	Cale: you mean like the palette of two colors that you almost can't tell apart?
2013-03-21 22:37:15	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-21 22:37:15	hiptobecubic	mm_freak, anyway. what's wrong with the most obvious one? "fileServer h f = readFile f >>= hPutStr h"
2013-03-21 22:37:37	ski	beaky : meaning : you can think of it as an `IO'-effectful function from `a' to `b' -- or even secretly as an `IO'-side-effectful function from `a' to `b', in some hypothetical language with `IO'-side-effects
2013-03-21 22:37:45	mm_freak	indeed, (!) is polymorphic
2013-03-21 22:37:58	Cale	kludgy: If you apply hGetContents to a handle, you are *not* allowed to hClose that handle.
2013-03-21 22:37:59	ski	beaky : if what i said made no sense, you can safely ignore it
2013-03-21 22:38:15	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 276 seconds)
2013-03-21 22:38:23	mm_freak	my version works, too
2013-03-21 22:38:29	-->	typoclass (~typoclass@p4FC92561.dip.t-dialin.net) has joined #haskell
2013-03-21 22:38:31	Cale	kludgy: You're essentially giving up the right to hClose the handle to the implementation of hGetContents
2013-03-21 22:38:32	mm_freak	> renderHtml $ H.div "x" ! A.style "x"
2013-03-21 22:38:34	lambdabot	  Not in scope: `renderHtml'
2013-03-21 22:38:34	lambdabot	 Perhaps you meant `renderStyle' (imported from ...
2013-03-21 22:38:34	mm_freak	"<div style=\"x\">x</div>"
2013-03-21 22:38:47	hpaste	beaky pasted “Why does A get printed twice when I do not enter a?” at http://hpaste.org/84436
2013-03-21 22:38:50	kludgy	Cale: Thanks for the heads up on this! I'm going to check out further documentation now
2013-03-21 22:38:58	Cale	kludgy: But this is magic and lazy, so you don't know when the handle will be closed, which sucks for a network application.
2013-03-21 22:39:00	ocharles	mm_freak: oh, interesting
2013-03-21 22:39:09	ocharles	didn't know that
2013-03-21 22:39:13	mm_freak	hehe
2013-03-21 22:39:32	-->	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has joined #haskell
2013-03-21 22:39:44	Cale	kludgy: You might prefer to use something like Strict Data.Text or Data.ByteString whose hGetContents will slurp the entire contents immediately
2013-03-21 22:39:44	glguy	ski: There is no special allowance made for SomeException
2013-03-21 22:39:56	<--	sclv (c62d125f@gateway/web/freenode/ip.198.45.18.95) has quit (Quit: Page closed)
2013-03-21 22:39:57	--	sclv_ is now known as sclv
2013-03-21 22:40:00	 *	glguy has been half-following the conversation and might have missed an important bit
2013-03-21 22:40:04	<--	hiratara (~hiratara@g038004.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 272 seconds)
2013-03-21 22:40:04	ski	kludgy : passing a `Handle' to `hGetContents' renders it "semi-closed", meaning "it's closed, but lazily", meaning it will be closed later, by `hGetContents' (or GC); in particular, you should not close it yourself, since you have relinguished that responsibility to `hGetContents'
2013-03-21 22:40:12	kludgy	Cale: Excellent, thanks for the lead on this.
2013-03-21 22:40:21	Cale	glguy: Well, it is somewhat blessed in that the definition of the Exception class uses it.
2013-03-21 22:40:21	-->	DinMamma (~simon@host-78-149-118-155.as13285.net) has joined #haskell
2013-03-21 22:40:23	mm_freak	ocharles: polymorphism fooled both of us =P
2013-03-21 22:40:25	<--	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-03-21 22:40:30	mm_freak	dgriffi: could you paste the full code?
2013-03-21 22:40:35	ocharles	mm_freak: indeed
2013-03-21 22:40:49	ocharles	mm_freak: that's some pretty bizzare polymorphism, too
2013-03-21 22:40:58	mm_freak	ocharles: it's actually reasonable
2013-03-21 22:41:04	ocharles	somewhat
2013-03-21 22:41:05	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Remote host closed the connection)
2013-03-21 22:41:08	ski	glguy : how come `handle (\e -> print (e :: SomeException)) (throw (ErrorCall "apa"))' and `handle (\e -> print (e :: ErrorCall)) (throw (SomeException (ErrorCall "apa")))' catch the exceptions, then ?
2013-03-21 22:41:25	<--	bradleyayers (~brad@49.176.67.44) has quit (Remote host closed the connection)
2013-03-21 22:41:36	<--	squidz (~albert@141.84.69.76) has quit (Ping timeout: 264 seconds)
2013-03-21 22:42:10	Ralith	@hoogle [a] -> [(b,c)] -> [(a,b,c)]
2013-03-21 22:42:10	lambdabot	Data.Graph.Inductive.Graph inn :: Graph gr => gr a b -> Node -> [LEdge b]
2013-03-21 22:42:10	lambdabot	Data.Graph.Inductive.Graph out :: Graph gr => gr a b -> Node -> [LEdge b]
2013-03-21 22:42:16	mm_freak	ocharles: it's about the same kind of polymorphism that allows you to use strings as functions
2013-03-21 22:42:28	glguy	Because of how SomeException's instance was written
2013-03-21 22:42:50	<--	j303 (~x@ns2306746.ovh.net) has quit (Ping timeout: 260 seconds)
2013-03-21 22:42:51	glguy	You could do the same thing and make SkisException, no?
2013-03-21 22:42:51	kludgy	Cale: Looking here: http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html#v:hGetContents "Any operation that fails because a handle is closed, also fails if a handle is semi-closed. The only exception is hClose. A semi-closed handle becomes closed:
2013-03-21 22:42:52	kludgy		•	if hClose is applied to it;"
2013-03-21 22:43:18	ski	glguy : yes, which is what i object to, i suppose
2013-03-21 22:43:27	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-21 22:43:30	glguy	I'm saying its not magic because you can implement it yourself
2013-03-21 22:43:37	ski	imo, `toException e' should never be just `e'
2013-03-21 22:43:40	glguy	not trying to say antying more than that :)
2013-03-21 22:43:54	-->	Internet13 (chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has joined #haskell
2013-03-21 22:44:19	ski	or, i suppose i want `toException' to always be `SomeException'
2013-03-21 22:44:28	-->	HW42 (~000000@pD9E43CF6.dip.t-dialin.net) has joined #haskell
2013-03-21 22:44:29	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 22:44:32	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-21 22:44:39	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:45:08	Cale	kludgy: Right, well, when that happens, weird stuff happens to the String that was the result of hGetContents
2013-03-21 22:45:11	-->	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-21 22:45:13	-->	xunatai_ (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-21 22:45:18	-->	hiratara (~hiratara@g036117.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-21 22:45:21	ski	kludgy : yes, but i don't think it's very useful to do that (i don't know of a sensible use case)
2013-03-21 22:45:22	<--	overflo (~Adium@66.97.133.7) has quit (Read error: Connection reset by peer)
2013-03-21 22:45:22	Cale	i.e. usually it's truncated
2013-03-21 22:45:24	<--	__books__ (Guile@95.209.2.2.bredband.tre.se) has quit (Ping timeout: 252 seconds)
2013-03-21 22:45:25	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-21 22:45:26	<--	Thomyho4 (~thomyho@mnhm-590c0fb0.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-21 22:45:47	Cale	In fact, though it's not a hard error, I think it really ought to be a runtime error to do that.
2013-03-21 22:45:57	Cale	(I can't think of a good use case either)
2013-03-21 22:46:01	-->	Thomyho4 (~thomyho@mnhm-590c22ad.pool.mediaWays.net) has joined #haskell
2013-03-21 22:46:04	-->	atriq (~nathan@host-92-30-220-50.as13285.net) has joined #haskell
2013-03-21 22:46:08	<--	Taneb (~nathan@host-2-97-152-171.as13285.net) has quit (Ping timeout: 260 seconds)
2013-03-21 22:46:17	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-03-21 22:46:17	-->	Xaratas (~UserNick@brln-4dbc1f7e.pool.mediaWays.net) has joined #haskell
2013-03-21 22:46:34	-->	Thra11 (~thrall@87.114.179.138) has joined #haskell
2013-03-21 22:46:34	kludgy	Cale: Aha ok
2013-03-21 22:46:37	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-21 22:46:37	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:46:45	<--	floatingman (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-21 22:47:12	<--	nus-- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-21 22:47:18	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-21 22:48:28	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-21 22:48:35	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-21 22:48:49	Cale	I really wish that there were a strict version of hGetContents in System.IO. It's easy enough to write one via Data.ByteString or Data.Text, but that's often a little daunting for people starting out.
2013-03-21 22:48:51	<--	dfletcher (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-21 22:49:07	hiptobecubic	isn't there System.IO.Strict?
2013-03-21 22:49:19	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-21 22:49:28	hiptobecubic	i thought i saw someone mention that on -beginners
2013-03-21 22:49:42	Cale	hiptobecubic: er, if there is, it's not in base
2013-03-21 22:49:49	hiptobecubic	Cale, perhaps not.
2013-03-21 22:49:55	-->	arbn_ (~arbn@auriga.kiwilight.com) has joined #haskell
2013-03-21 22:50:00	typoclass	hiptobecubic: heh, not a bad idea
2013-03-21 22:50:08	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-21 22:50:16	<--	Thomyho4 (~thomyho@mnhm-590c22ad.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-03-21 22:50:23	<--	arbn_ (~arbn@auriga.kiwilight.com) has quit (Client Quit)
2013-03-21 22:50:24	-->	Thomyho4 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has joined #haskell
2013-03-21 22:51:07	typoclass	apparently there's two packages: http://hackage.haskell.org/packages/archive/strict/0.3.2/doc/html/System-IO-Strict.html -- http://hackage.haskell.org/packages/archive/strict-io/0.2.0/doc/html/System-IO-Strict.html
2013-03-21 22:51:14	-->	arbn_ (~arbn@auriga.kiwilight.com) has joined #haskell
2013-03-21 22:51:52	-->	ParahSailin (~eg@unaffiliated/parahsailin) has joined #haskell
2013-03-21 22:52:09	kludgy	Cale: I find myself wishing that haskell was just strict by default :) This is tempting: http://www.haskell.org/haskellwiki/DDC
2013-03-21 22:52:13	<--	helgikrs (~helgikrs@89.17.128.56) has quit (Read error: Connection reset by peer)
2013-03-21 22:52:16	<--	ParahSailin (~eg@unaffiliated/parahsailin) has left #haskell
2013-03-21 22:52:22	ski	(also, `fromException' should never be just `Just')
2013-03-21 22:52:26	<--	arbn_ (~arbn@auriga.kiwilight.com) has quit (Client Quit)
2013-03-21 22:52:26	-->	joneshf-laptop (~joneshf@mail.concordusapps.com) has joined #haskell
2013-03-21 22:52:53	<--	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-21 22:52:54	-->	helgikrs (~helgikrs@89.17.128.56) has joined #haskell
2013-03-21 22:53:27	-->	dnolen (~user@97-115-20-36.ptld.qwest.net) has joined #haskell
2013-03-21 22:53:34	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-21 22:53:42	Cale	kludgy: I would disagree, though lazy IO is much more questionable than lazy everything else.
2013-03-21 22:53:53	pharaun	lazy io is questionable imho
2013-03-21 22:54:00	pharaun	lazy everything else is great imho
2013-03-21 22:54:05	Cale	Yes
2013-03-21 22:54:13	Cale	Lazy IO *can* be nice too
2013-03-21 22:54:17	pharaun	yes it can be
2013-03-21 22:54:23	pharaun	but it can bite you in the arse really badly
2013-03-21 22:54:34	pharaun	i think i've spent more time fixing io than forcing eval with lazy eval
2013-03-21 22:54:42	pharaun	*waymore*
2013-03-21 22:54:44	-->	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-03-21 22:54:44	typoclass	kludgy: i think laziness is quite alright :-) it's just that a handful of functions in System.IO are not that easy to use, in particular hGetContents
2013-03-21 22:54:52	Cale	Mainly for small programs, it's really good, but once you get to a certain level of seriousness, just switching to strict IO saves a lot of headaches.
2013-03-21 22:54:59	pharaun	yup
2013-03-21 22:55:08	pharaun	Cale: now days i just default to strict io unless i have a need for lazy io
2013-03-21 22:55:17	pharaun	Cale: strict buffered/chunked io that is i mean
2013-03-21 22:55:29	kludgy	Good to know. I have to defer to those wiser than I, as I'm so inexperienced with haskell
2013-03-21 22:55:39	<--	paintcan (~user@66.199.39.230) has quit (Remote host closed the connection)
2013-03-21 22:55:59	pharaun	again kludgy it can depend on your needs
2013-03-21 22:56:03	pharaun	its a ymmv
2013-03-21 22:56:12	<--	sellout- (~Adium@nomad.ccs.neu.edu) has quit (Quit: Leaving.)
2013-03-21 22:56:13	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Quit: leaving)
2013-03-21 22:56:19	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 264 seconds)
2013-03-21 22:56:22	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 246 seconds)
2013-03-21 22:56:31	Cale	Also, careful use of lazy IO, such as with lazy ByteString or lazy Text can allow for really convenient processing of single very large files.
2013-03-21 22:56:38	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-21 22:56:59	dEPY	how can I decide on which lang to learn? I want to learn so many of them :S
2013-03-21 22:57:13	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-21 22:57:21	dEPY	or would a simple test run of most of them be enough to choose?:)
2013-03-21 22:57:21	Cale	dEPY: Just pick one, learn that, and then pick another.
2013-03-21 22:57:25	<--	Thomyho4 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-21 22:57:32	hiptobecubic	dEPY, find an intersting problem. Reimplement in all the languages you want to learn.
2013-03-21 22:57:52	dEPY	ye but learning something like haskell or clojure is not a matter of few months probably :)
2013-03-21 22:57:54	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 22:58:03	dEPY	hiptobecubic: I was thinking exactly that :)
2013-03-21 22:58:03	--	atriq is now known as Taneb
2013-03-21 22:58:11	pharaun	dEPY: but those are probably teaching you some higher level concept
2013-03-21 22:58:17	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-21 22:58:25	pharaun	that a vanilla reimplement of half of ruby/python won't
2013-03-21 22:58:42	-->	Thomyho3 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has joined #haskell
2013-03-21 22:58:50	--	ijp` is now known as ijp
2013-03-21 22:58:53	<--	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has quit (Ping timeout: 245 seconds)
2013-03-21 22:59:03	pharaun	dEPY: i find you can generally classify languages in rough groups, sure each languages in a group may have difference and so on but nothing like the difference between C and say haskell or lisp for ex
2013-03-21 22:59:03	Cale	I will happily mention that the people who I've started out on Haskell have had less difficulty learning other languages and writing nice code in them.
2013-03-21 22:59:32	pharaun	Cale: i wished i learned haskell first!
2013-03-21 22:59:35	<--	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-21 22:59:38	ab9rf	Cale: i've been arguing for Haskell as a first language whenever i get the chance
2013-03-21 22:59:39	dEPY	pharaun, yes you're probably right, teaching FP concepts will take time but they don't differ from language to language that much
2013-03-21 22:59:42	pharaun	i'm finding myself having to undo my bad habits
2013-03-21 22:59:47	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-21 22:59:56	dEPY	pharaun really?:D
2013-03-21 22:59:57	pharaun	dEPY: its the high level concept that matters, all the rest tends to be implementation details
2013-03-21 23:00:12	pharaun	dEPY: so go for haskell or whatever, then latter on a oop language, logical language, etc..
2013-03-21 23:00:28	<--	HaltingState (~HaltingSt@unaffiliated/haltingstate) has quit (Quit: Leaving)
2013-03-21 23:00:49	-->	HaltingState (~HaltingSt@cpe-76-169-228-195.socal.res.rr.com) has joined #haskell
2013-03-21 23:00:49	<--	HaltingState (~HaltingSt@cpe-76-169-228-195.socal.res.rr.com) has quit (Changing host)
2013-03-21 23:00:49	-->	HaltingState (~HaltingSt@unaffiliated/haltingstate) has joined #haskell
2013-03-21 23:00:51	<--	HaltingState (~HaltingSt@unaffiliated/haltingstate) has quit (Remote host closed the connection)
2013-03-21 23:00:58	<--	shurikas (~Kostas@195.181.64.50) has quit (Ping timeout: 272 seconds)
2013-03-21 23:00:59	pharaun	after i feel happy with my level of expertness with haskell i'll probably go pick up something like prolog or something
2013-03-21 23:01:07	dEPY	I know java, javascript and ruby kinda, I want something FP now
2013-03-21 23:01:33	-->	HaltingState (~HaltingSt@unaffiliated/haltingstate) has joined #haskell
2013-03-21 23:01:36	dEPY	And I still have Prolog nightmares from college :D
2013-03-21 23:01:49	dEPY	But I'm a totally different person now... So maybe ye.. :)
2013-03-21 23:02:05	kludgy	javascript makes me sad :(  I'm glad there are attempts to improve it for production development
2013-03-21 23:02:07	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-21 23:02:10	<--	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-21 23:02:18	dEPY	I have mixed feelings about javascript...
2013-03-21 23:02:31	dEPY	I reaaaly reaaaly love that it has first class functions
2013-03-21 23:02:42	ski	Prolog is great fun ! :)
2013-03-21 23:02:44	hiptobecubic	if it didn't it would be seriously worthless
2013-03-21 23:02:47	<--	tavelram_ (tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (Read error: Connection reset by peer)
2013-03-21 23:02:47	-->	tavelram_ (tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-03-21 23:02:57	kludgy	Elm was kind of cool but limited in scope, and fay looks promising, but things like coffeescript I feel bring too little to the table for the overhead they impose.
2013-03-21 23:03:05	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 256 seconds)
2013-03-21 23:03:09	-->	Beetle_jada (~jadatkins@host109-151-136-130.range109-151.btcentralplus.com) has joined #haskell
2013-03-21 23:03:14	dEPY	I have mixed feelings about coffee script also
2013-03-21 23:03:17	-->	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has joined #haskell
2013-03-21 23:03:19	-->	Jesin (~Jessin_@dhcp123-36.eecs.lehigh.edu) has joined #haskell
2013-03-21 23:03:20	dEPY	I'd rather see javascript fixed
2013-03-21 23:03:21	-->	roconnor_ (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-21 23:04:28	<--	adzeitor (~adzeitor@31.207.132.19) has quit (Read error: Operation timed out)
2013-03-21 23:04:46	 *	hackagebot network-bitcoin 1.1.0 - An interface to bitcoind.  http://hackage.haskell.org/package/network-bitcoin-1.1.0 (ClarkGaebel)
2013-03-21 23:04:52	arbn	kludgy: Do you find that CoffeeScript imposes a lot of overhead? Just a translation step, and debugging coffeescript from javascript is fairly straightforward, in my experience.
2013-03-21 23:04:54	-->	bos (~bos@173.252.71.1) has joined #haskell
2013-03-21 23:05:06	johnw	dEPY: a lot of languages are a bit like glorified assembly languages: they're various ways of abstracting an operational model of computation.  Haskell is a glorified lambda calculus, which means it abstracts a denotational semantics.  You end up programming in terms of what things mean, rather than what needs to happen to accomplishes those statements of meaning (like, how 1+1 becomes 2).  The compiler's job is to translate between
2013-03-21 23:05:06	johnw	those models, whereas in operational languages, it partly the compiler's job, and partly the programmer's job.
2013-03-21 23:05:21	<--	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-21 23:05:35	-->	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has joined #haskell
2013-03-21 23:05:43	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-21 23:05:46	-->	Tesseraction_f (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-21 23:05:49	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 246 seconds)
2013-03-21 23:06:02	kludgy	arbn: it imposes enough debugging hassle day-to-day in combination with the poor formalism of node.js that I'd still rather work straight in js.
2013-03-21 23:06:05	johnw	this difference is HUGE in many ways that can seem subtle at first
2013-03-21 23:06:20	-->	ctult (~ctult@65-129-22-233.bois.qwest.net) has joined #haskell
2013-03-21 23:06:29	dEPY	johnw I'm kinda looking for something like that yes.. I want to shift my problem solving ability a bit :)
2013-03-21 23:06:35	arbn	johnw: Yes. In a lot of languages, the model of computation is that of the machine. In Haskell, the model of computation is that of the lambda calculus.
2013-03-21 23:06:44	johnw	dEPY: i would say start with Haskell
2013-03-21 23:06:52	pharaun	that's why i suggest people to learn *actual* different model fo computation
2013-03-21 23:07:01	pharaun	not just say oh python then ruby then perl
2013-03-21 23:07:06	pharaun	they're kinda same-ish :)
2013-03-21 23:07:10	dEPY	I said so many times i'll do it and I just can't get into it :)
2013-03-21 23:07:12	kludgy	With Haskell I find myself doing actualy production much less, but doing thinking a lot more :)
2013-03-21 23:07:14	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Quit: Parting is such sweet sorrow...)
2013-03-21 23:07:28	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-21 23:07:38	dEPY	What's the good approach to get into it without loosing interest?:)
2013-03-21 23:07:46	johnw	@lyah
2013-03-21 23:07:46	<--	Fuco (dota.keys@unaffiliated/fuco) has quit (Ping timeout: 240 seconds)
2013-03-21 23:07:46	lambdabot	Unknown command, try @list
2013-03-21 23:07:49	johnw	@where lyah
2013-03-21 23:07:50	lambdabot	http://www.learnyouahaskell.com/
2013-03-21 23:07:51	dEPY	learn you a haskell is kinda cool I think
2013-03-21 23:07:52	johnw	read that book
2013-03-21 23:07:57	dEPY	:)
2013-03-21 23:08:00	johnw	and play along in ghci as you read it
2013-03-21 23:08:08	johnw	it's a good start, and it's amusing
2013-03-21 23:08:16	johnw	pharaun: I agree
2013-03-21 23:08:31	kludgy	Lipovaca actually came to give a talk at the last polyglot unconference here in vancouver. He's the reason I started on haskell!
2013-03-21 23:08:37	-->	opamp (opamp@37.250.122.92.bredband.tre.se) has joined #haskell
2013-03-21 23:08:48	dEPY	pharaun ye, I came from java to javascript now to ruby, it kinda feels the same
2013-03-21 23:08:50	-->	Fuco (dota.keys@server.dasnet.cz) has joined #haskell
2013-03-21 23:08:51	<--	Fuco (dota.keys@server.dasnet.cz) has quit (Changing host)
2013-03-21 23:08:51	-->	Fuco (dota.keys@unaffiliated/fuco) has joined #haskell
2013-03-21 23:09:04	pharaun	that's because they are kinda mostly in the same subset of computation model
2013-03-21 23:09:11	pharaun	there are difference here and there sure
2013-03-21 23:09:19	ab9rf	dEPY: all imperative languages are essentially the same
2013-03-21 23:09:29	dEPY	ye, that's why I want functional language next
2013-03-21 23:09:39	dEPY	and I hate ruby's blocks :)
2013-03-21 23:09:40	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-21 23:09:45	hiptobecubic	ha really?
2013-03-21 23:09:46	ab9rf	heh
2013-03-21 23:09:50	hiptobecubic	That's the best part of the language
2013-03-21 23:09:54	ab9rf	i kinda like ruby
2013-03-21 23:10:01	ab9rf	i hated it at first but i've grown to like it
2013-03-21 23:10:05	dEPY	as cool as they are, it feels like a dirty patch for first class functions :D
2013-03-21 23:10:07	-->	miclorb (~miclorb@ppp121-44-84-133.lns20.syd6.internode.on.net) has joined #haskell
2013-03-21 23:10:20	otters	it's not dirty D:
2013-03-21 23:10:23	dEPY	I do like ruby but there's some things I dislike :D
2013-03-21 23:10:25	<--	nexx (~SPS-User@dslb-178-011-249-246.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-21 23:10:28	otters	it's just magic like everything else in ruby
2013-03-21 23:10:32	<--	raichoo (~raichoo@i59F6C7B0.versanet.de) has quit (Quit: leaving)
2013-03-21 23:10:36	ab9rf	ruby does have some excessive complexity around blocks
2013-03-21 23:10:45	dEPY	don't even get me started with rails magic :D
2013-03-21 23:10:45	otters	but i'll take blocks over type constructors with 8 type variables ;d
2013-03-21 23:10:47	ab9rf	there's four distinct types in the language for what amount to the same thing
2013-03-21 23:10:53	<--	m0g (~mog@glo44-8-83-155-40-1.fbx.proxad.net) has quit (Quit: leaving)
2013-03-21 23:10:59	ab9rf	because of the evolution of those types over the life of the language
2013-03-21 23:11:02	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-21 23:11:12	pharaun	logical, functional, oop/procedural, what else?
2013-03-21 23:11:12	dEPY	otters true :)
2013-03-21 23:11:27	arbn	ab9rf: All imperative languages are not the same...
2013-03-21 23:11:27	johnw	pharaun: logical
2013-03-21 23:11:32	johnw	pharaun: oh :)
2013-03-21 23:11:35	ab9rf	pharaun: i'm not sure where prolog falls in that typology
2013-03-21 23:11:36	johnw	pharaun: data-flow
2013-03-21 23:11:43	ab9rf	pharaun: or, for that matter, SQL
2013-03-21 23:11:48	pharaun	johnw: hm? can't claim to be familiar with data-flow
2013-03-21 23:11:54	ab9rf	pharaun: XSLT
2013-03-21 23:11:56	pharaun	ab9rf: relational alegbra/sets theory
2013-03-21 23:11:57	ion	pharaun: esoteric
2013-03-21 23:12:06	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 23:12:21	johnw	pharaun: http://en.wikipedia.org/wiki/Dataflow_programming
2013-03-21 23:12:24	dEPY	pharaun: prototypal (don't know how to spell it), or is that not it?
2013-03-21 23:12:33	pharaun	isn't esoteric kinda a catch-all bucket
2013-03-21 23:12:51	johnw	that page claims it to be a "programming paradigm", though I haven't used it
2013-03-21 23:12:54	ab9rf	pharaun: a non-clade grouping, to borrow from linnaeologists
2013-03-21 23:13:02	ion	pharaun: As opposed to the other ones listed so far? :-P
2013-03-21 23:13:09	ab9rf	johnw: i'm not sure what a 'programming paradigm' is
2013-03-21 23:13:13	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-03-21 23:13:14	arbn	"Programming paradigm" is a stupid, useless concept. This taxonomy makes almost no sense.
2013-03-21 23:13:17	johnw	he was giving a list of them
2013-03-21 23:13:24	johnw	imperative, oo, logical,...
2013-03-21 23:13:47	ab9rf	hm, VHDL is a good point
2013-03-21 23:13:50	tdammers	arbn: the concept is alright, it's just wrong to categorize programming languages by it
2013-03-21 23:13:52	RichyB	arbn: is it really? Programming in Prolog is such a violently different experience to programming in Haskell for instance.
2013-03-21 23:13:54	pharaun	i was trying to give a rough grouping of concept
2013-03-21 23:14:04	RichyB	or VHDL or Verilog.
2013-03-21 23:14:05	ab9rf	i never got the hang of prolog
2013-03-21 23:14:06	-->	MOMI (uid4868@gateway/web/irccloud.com/x-szyaixwanmoelvcc) has joined #haskell
2013-03-21 23:14:14	arbn	RichyB: I'm not saying that there isn't a good taxonomy. I'm saying that this is a bad one.
2013-03-21 23:14:16	RichyB	tdammers: I like that way of characterising it, yes.
2013-03-21 23:14:16	pharaun	it might not exactly be correct but certain language/concept *are* different
2013-03-21 23:14:23	pharaun	there are cross-over/blending of course
2013-03-21 23:14:23	kludgy	ab9rf: Ruby, a language with implicit coercion from anything to anything. What could go wrong? ;)
2013-03-21 23:14:24	ab9rf	and verilog and vhdl are quite alien
2013-03-21 23:14:31	arbn	tdammers: The purpose of the concept is to categorize programming languages...
2013-03-21 23:14:31	ab9rf	kludgy: quack
2013-03-21 23:14:46	 *	hackagebot template-default 0.1.1 - declaring Default instances just got even easier  http://hackage.haskell.org/package/template-default-0.1.1 (GregoryCollins)
2013-03-21 23:14:53	pharaun	i just want to give a quick in a nutshell broad groups, and if you care you can learn the implementation and more in depth detail
2013-03-21 23:14:59	<--	afarmer_ (~afarmer@c-98-246-172-211.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-21 23:15:12	<--	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-21 23:15:17	pharaun	johnw: interesting, i don't know about that
2013-03-21 23:15:30	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 23:15:38	<--	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-21 23:15:43	pharaun	johnw: i've heard claims/discussion about "dataflow" programming in C and c++ (iD software)
2013-03-21 23:15:54	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: reboot for linux-ck +BFQ)
2013-03-21 23:15:57	MOMI	Hi.I want to learn programming but haskell is kinda hard for me, is there any book I can read "How to think like a programmer" i would greatlly appreciate it.Thanks
2013-03-21 23:16:01	ab9rf	pharaun: 'programming paradigms' are indeendent of language
2013-03-21 23:16:02	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-03-21 23:16:09	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-21 23:16:17	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-03-21 23:16:18	RichyB	arbn: I think that it's reasonable to say that there exist wildly different sets-of-semantics, that some programming languages support only a few, and that every programming language supports at least one by default.
2013-03-21 23:16:20	ab9rf	you can write object-oriented assmebly or structured ROM basic
2013-03-21 23:16:22	dEPY	MOMI did you try any other languages ?
2013-03-21 23:16:40	MOMI	No its my first
2013-03-21 23:16:42	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-21 23:16:50	pharaun	ab9rf: ab9rf well yeah, that would be more precise way of def it, i learned majority of my experience via learning languages so its a bit tangled up for me unfortunately
2013-03-21 23:16:52	arbn	MOMI: "The Structure and Interpretation of Computer Programs"
2013-03-21 23:16:55	-->	zeus (~quassel@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-21 23:16:57	MOMI	I have read allot about it but never trully programmed
2013-03-21 23:16:58	RichyB	You can't really write OO VHDL or Verilog, unless you write a CPU and then write an OO program on that, though.
2013-03-21 23:17:00	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2013-03-21 23:17:00	-->	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has joined #haskell
2013-03-21 23:17:04	arbn	MOMI: Or "How to Design Programs"
2013-03-21 23:17:05	pharaun	ab9rf: which is one thing i'm trying to break away from with haskell via external non-language related study/learning
2013-03-21 23:17:06	ab9rf	a paradigm is how you approach the task; some paradigms may be easier to express in some languages than others but if the languages are TE then they can all express the same concept
2013-03-21 23:17:17	arbn	MOMI: They both use Scheme, which I think is a better place to start than Haskell, personally.
2013-03-21 23:17:23	pharaun	ab9rf: but yeah you're right
2013-03-21 23:17:28	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-21 23:17:32	arbn	MOMI: Both books are free online.
2013-03-21 23:17:36	<--	psii (~user@sunbeam.informatik.uni-kiel.de) has quit (Remote host closed the connection)
2013-03-21 23:17:42	ab9rf	RichyB: i don't know enough about verilog to comment
2013-03-21 23:17:46	arbn	MOMI: They show you how to think like a programmer.
2013-03-21 23:18:09	MOMI	Ok i will try.Thank you.:)
2013-03-21 23:18:19	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 245 seconds)
2013-03-21 23:18:34	RichyB	ab9rf: HDLs like Verilog and VHDL (I'll lump them together, the differences don't matter to this conversation) are languages for specifying nets of transistors and wires.
2013-03-21 23:18:38	dEPY	MOMI I agree, SICP book is amazing. But can be challenging. :)
2013-03-21 23:18:49	ab9rf	RichyB: i know that much.  but that's about all i know :)
2013-03-21 23:18:59	arbn	MOMI: "How to Design Programs" is easier, so if SICP is too tough, try that one.
2013-03-21 23:19:07	RichyB	*together with okay-ish mechanisms for composing them.
2013-03-21 23:19:19	johnw	MOMI: another free resource that's extremely good: http://www.cis.upenn.edu/~bcpierce/sf/
2013-03-21 23:19:25	ab9rf	RichyB: the largest gap in my knowledge of the technology stack of computing is in that area
2013-03-21 23:19:54	<--	Taneb (~nathan@host-92-30-220-50.as13285.net) has quit (Quit: Leaving)
2013-03-21 23:19:59	ab9rf	RichyB: i actually know more about the quantum physics of semiconductors than i do about the technologies involved in designing modern microprocessors :)
2013-03-21 23:20:14	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-21 23:20:16	hiptobecubic	mm_freak, I'm still not clear on why ReactiveBanana will not be suitable for realtime systems like games?
2013-03-21 23:20:32	MOMI	I will thank you all for help, I hope I can become a haskeller one day. ^__^
2013-03-21 23:20:35	arbn	johnw: What the hell? He wants to learn programming for the first time ever, and you recommend him *that*?!? Seriously?
2013-03-21 23:20:54	johnw	arbn: i assume if it's not his cup of tea, he'll ignore it pretty quickly
2013-03-21 23:20:59	ab9rf	heh
2013-03-21 23:21:03	johnw	but it does start with the fundamentals
2013-03-21 23:21:05	arbn	johnw: OK. Just a bit unconventional.
2013-03-21 23:21:14	johnw	yeah, I grant you it was a stretch
2013-03-21 23:21:18	johnw	but you never know!
2013-03-21 23:21:21	-->	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has joined #haskell
2013-03-21 23:21:26	ab9rf	arbn: he's looking at haskell first, so he's already proven he's unconventional :)
2013-03-21 23:21:53	-->	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has joined #haskell
2013-03-21 23:22:00	johnw	however, if you do start there, Haskell will seem like a shorthand for concepts you now know extremely well
2013-03-21 23:22:11	beaky	why does folds correspond to pattern matching?
2013-03-21 23:22:25	arbn	ab9rf: Fair enough. I just usually resort to Scheme for the people who find the jump to Haskell too daunting. But, I started with Scheme, so I'm biased. :P
2013-03-21 23:22:42	johnw	beaky: why do you ask that?
2013-03-21 23:23:07	ab9rf	arbn: scheme is one of my usual "first language" recommendations as well
2013-03-21 23:23:10	RichyB	ab9rf: hah. Okay, short version: you can define named registers, you update each register's state once per clock cycle, every register's new state is a bit-wise function of some subset of all of the other registers in the system. There are no conditional branches of any kind. Every register updates itself from its inputs every clock cycle.
2013-03-21 23:23:15	beaky	http://stackoverflow.com/questions/2527153/are-design-patterns-specific-to-language-or-technology
2013-03-21 23:23:23	beaky	it says that visitor pattern is like folds
2013-03-21 23:23:24	dEPY	scheme is awesome to get you started
2013-03-21 23:23:33	johnw	oh, THAT kind of pattern
2013-03-21 23:23:36	dEPY	and the most awesome thing is almost no syntax
2013-03-21 23:23:46	hiptobecubic	honestly i found that difficult
2013-03-21 23:23:51	johnw	that is a completely different use of the word than Haskell's "pattern matching"
2013-03-21 23:23:54	dEPY	which imo kinda speeds things up
2013-03-21 23:23:55	ab9rf	beaky: hm there's merit to that
2013-03-21 23:24:04	-->	npoektop (~npoektop@176.195.22.139) has joined #haskell
2013-03-21 23:24:06	beaky	how does haskell pattern matching work?
2013-03-21 23:24:07	ab9rf	johnw: yeah, 'design pattern'
2013-03-21 23:24:09	hiptobecubic	I was constantly looking at things like '('() 3 5 '9 )''00r32900()()()like "wtf is this"
2013-03-21 23:24:11	johnw	the visitor pattern is just a traversal
2013-03-21 23:24:14	beaky	ah
2013-03-21 23:24:29	<--	npoektop (~npoektop@176.195.22.139) has quit (Client Quit)
2013-03-21 23:24:30	RichyB	ab9rf: so you can't have if statements or branches or anything. If you want to compute, say, x = if y then z else q, then what you have to do is compute both z and q in parallel and use a multiplexer to select which of z or q you want.
2013-03-21 23:24:42	ab9rf	folds are traversals over sequences; traversals are a bit more general
2013-03-21 23:24:45	arbn	hiptobecubic: That's not valid Scheme.
2013-03-21 23:24:53	ab9rf	RichyB: yeah, i get that
2013-03-21 23:24:55	RichyB	That's not *all* there is to HDLs, but that's a basic idea of what *an* HDL's semantics might work like.
2013-03-21 23:24:59	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-21 23:25:07	ab9rf	RichyB: reminds me of some of the stuff i've read about vectorizing computation actually
2013-03-21 23:25:16	hiptobecubic	arbn, no, but until you learn scheme and the nuances of "'", it was hard to tell.
2013-03-21 23:25:32	RichyB	Yes. All of the parallel computation systems that work resemble each other a bit.
2013-03-21 23:25:46	johnw	beaky: when you askhow haskell's pattern matching works, I'm not sure how deep an answer you want
2013-03-21 23:25:52	ab9rf	haha
2013-03-21 23:25:56	arbn	hiptobecubic: SICP and HtDP make the learning pretty smooth. SICP doesn't introduce quotation or side-effects until rather late.
2013-03-21 23:26:02	mm_freak	hiptobecubic: reactive-banana uses a complicated representation of signal networks internally, and it's not very flexible either
2013-03-21 23:26:41	hiptobecubic	mm_freak, but does the programmer have to care? How does that affect what we're interested in, which is reacting to events?
2013-03-21 23:26:54	ab9rf	someone has to care :)
2013-03-21 23:26:58	mm_freak	hiptobecubic: let me give you a simple example
2013-03-21 23:27:17	mm_freak	hiptobecubic: "you are holding space" . keyDown space <|> "hold space"
2013-03-21 23:27:28	mm_freak	this is realtimy netwire code
2013-03-21 23:27:41	mm_freak	the equivalent code in reactive-banana involves a recursive switcher
2013-03-21 23:27:54	-->	xkcd (~chatzilla@103.5.132.50) has joined #haskell
2013-03-21 23:27:55	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-21 23:28:13	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-03-21 23:28:18	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 252 seconds)
2013-03-21 23:28:30	<--	ewt (~eric@ws45-105.wireless.dynamic.msstate.edu) has quit (Quit: ewt)
2013-03-21 23:28:42	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 252 seconds)
2013-03-21 23:28:43	mm_freak	let's say you want to have "seconds since program start", but you want to slow down this clock while the spacebar is held down
2013-03-21 23:28:53	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-21 23:28:54	<--	anRch (~markmilli@ip-64-134-242-108.public.wayport.net) has quit (Quit: anRch)
2013-03-21 23:29:01	mm_freak	integral_ 0 . (0.5 . keyDown space <|> 1)
2013-03-21 23:29:15	mm_freak	this is comparatively complicated to express in reactive-banana
2013-03-21 23:29:19	hiptobecubic	i see
2013-03-21 23:29:37	hiptobecubic	So what does rb give you in exchange?
2013-03-21 23:29:54	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-21 23:30:05	hiptobecubic	also what on the right of that alternative? just a 1? is that representing something like time here?
2013-03-21 23:30:20	mm_freak	it gives you a the classic notion of FRP without the ugliness of the numerous monadic approaches
2013-03-21 23:30:35	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-21 23:30:42	--	nus-- is now known as nus
2013-03-21 23:30:48	mm_freak	RB is fine for what it does and you can take advantage of its WX layer
2013-03-21 23:31:08	mm_freak	hiptobecubic: 1 = pure 1 in netwire
2013-03-21 23:31:27	hiptobecubic	ah ok
2013-03-21 23:31:32	mm_freak	1 :: (Monad m, Num b) => Wire e m a b
2013-03-21 23:31:33	hiptobecubic	so 0.5 if keydown space else 1
2013-03-21 23:31:39	mm_freak	yeah
2013-03-21 23:31:40	<--	zeus (~quassel@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 245 seconds)
2013-03-21 23:31:55	mm_freak	read (<|>) as "or"
2013-03-21 23:31:59	<--	beaky (~beaky@bba68378.alshamil.net.ae) has quit (Ping timeout: 256 seconds)
2013-03-21 23:32:00	hiptobecubic	yes
2013-03-21 23:32:03	mm_freak	regarding events you can read (.) as "and"
2013-03-21 23:32:13	mm_freak	0.5 . for 10 . keyDown space
2013-03-21 23:32:22	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-21 23:32:30	mm_freak	0.5 for 10 seconds, then 1
2013-03-21 23:32:31	<--	Thomyho3 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-21 23:34:07	<--	stvc (~stvc@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 264 seconds)
2013-03-21 23:34:29	hiptobecubic	Has anyone used netwire for gui programming?
2013-03-21 23:34:43	hiptobecubic	Or better, has anyone used both rb and netwire in a single application?
2013-03-21 23:34:43	<--	Thra11 (~thrall@87.114.179.138) has quit (Ping timeout: 264 seconds)
2013-03-21 23:34:46	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-21 23:34:50	mm_freak	i've seen a few projects on reddit and apparently HGamer3D now uses netwire
2013-03-21 23:35:37	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-21 23:35:43	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-21 23:35:58	hiptobecubic	Windows only :(
2013-03-21 23:35:59	<--	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has quit (Remote host closed the connection)
2013-03-21 23:36:26	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-21 23:37:13	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-21 23:37:55	-->	coeus_ (~coeus@dslb-088-078-011-156.pools.arcor-ip.net) has joined #haskell
2013-03-21 23:38:39	-->	sepp2k (~sexy@g227180089.adsl.alicedsl.de) has joined #haskell
2013-03-21 23:39:09	-->	clahey (~clahey@208.91.2.2) has joined #haskell
2013-03-21 23:39:43	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-21 23:39:49	mm_freak	hiptobecubic: i few weeks ago i've written an OpenGL example for netwire
2013-03-21 23:39:52	mm_freak	http://hpaste.org/83098
2013-03-21 23:39:56	mm_freak	works on linux
2013-03-21 23:40:00	-->	Thomyho3 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has joined #haskell
2013-03-21 23:40:07	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-21 23:40:16	-->	never_ (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-21 23:40:36	mm_freak	it allows you to move around and will change the background color, if you leave the circle
2013-03-21 23:41:04	-->	dates (58e3e89b@gateway/web/freenode/ip.88.227.232.155) has joined #haskell
2013-03-21 23:41:27	opamp	is there an alternative to sockets? or everything above the OS uses sockets for netwroking?
2013-03-21 23:41:35	<--	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has quit (Read error: Connection reset by peer)
2013-03-21 23:41:47	dates	hi, how can I write my own Show instance for tuples larger than 7 components?
2013-03-21 23:41:52	<--	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has quit (Ping timeout: 246 seconds)
2013-03-21 23:42:13	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Read error: Connection reset by peer)
2013-03-21 23:42:14	-->	Thra11 (~thrall@87.114.179.138) has joined #haskell
2013-03-21 23:42:18	RichyB	opamp: on Unix, everything above the OS uses a variant of the sockets API for networking.
2013-03-21 23:42:28	-->	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-21 23:42:37	<--	BigTom (~bigtom@173.88-246-213.ippool.namesco.net) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-21 23:42:43	RichyB	90% of the time you're writing anything networked, you just want TCP sockets.
2013-03-21 23:42:51	mm_freak	opamp: in haskell you use sockets + concurrency, typically combined with some streaming abstraction like pipes
2013-03-21 23:42:57	RichyB	Most of the rest of the time, you are writing video games and you want UDP.
2013-03-21 23:43:13	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-21 23:43:17	mm_freak	opamp: so the way you use sockets in haskell is very different from how you do it in most other languages
2013-03-21 23:43:32	<--	Thra11 (~thrall@87.114.179.138) has quit (Max SendQ exceeded)
2013-03-21 23:43:40	-->	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has joined #haskell
2013-03-21 23:43:46	mm_freak	dates: instance (Show a, Show b, Show c, …) => Show (a, b, c, …)?
2013-03-21 23:44:00	RichyB	Very occasionally you're doing something weird and you might want to use SOCK_RAW, which gives you direct access to the IP layer at least, and maybe ethernet too.
2013-03-21 23:44:09	-->	Thra11 (~thrall@87.114.179.138) has joined #haskell
2013-03-21 23:44:19	<--	jang1 (~Jan@host-78-145-247-1.as13285.net) has quit (Read error: Connection reset by peer)
2013-03-21 23:44:25	RichyB	Pretty much the only exception to that is in things like OpenMPI.
2013-03-21 23:44:45	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-21 23:46:07	<--	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-21 23:46:37	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 23:46:40	<--	dnolen (~user@97-115-20-36.ptld.qwest.net) has quit (Ping timeout: 252 seconds)
2013-03-21 23:46:43	<--	never_ (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-21 23:46:59	sproingie	linux has oddball sockets like netlink, not sure if those are actually usable from haskell tho
2013-03-21 23:47:07	ski	ab9rf : i'm not sure if "if the languages are TE then they can all express the same concept" is right .. except in the trivial sense of writing an implementation of the one language in the other
2013-03-21 23:47:11	dEPY	just out of curiousity... Can you define infix functions in haskell in same maner as *, +, ... ?
2013-03-21 23:47:22	dEPY	Or are those just special ?
2013-03-21 23:47:26	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 255 seconds)
2013-03-21 23:47:26	<--	DinMamma (~simon@host-78-149-118-155.as13285.net) has quit (Read error: No route to host)
2013-03-21 23:47:37	sproingie	dEPY: any function can be used infix, but if it isn't made of nonalpha chars, you have to surround it with backticks
2013-03-21 23:47:49	ski	> let infixr 3 >--<; (>--<) = (-) in 2 >--< 3 >--< 4
2013-03-21 23:47:50	lambdabot	  3
2013-03-21 23:47:59	sproingie	> 1 `max` 2
2013-03-21 23:48:00	lambdabot	  2
2013-03-21 23:48:05	dEPY	oh
2013-03-21 23:48:09	dEPY	cool :) tnx
2013-03-21 23:48:15	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-21 23:48:37	<--	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has quit (Quit: leaving)
2013-03-21 23:48:47	ski	dEPY : does that answer your question ? :)
2013-03-21 23:48:52	dEPY	yep :D
2013-03-21 23:49:11	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-21 23:49:31	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-21 23:49:59	dates	<mm_freak> yes, kind of that
2013-03-21 23:50:19	<--	cdidd (~cdidd@95-27-69-201.broadband.corbina.ru) has quit (Ping timeout: 264 seconds)
2013-03-21 23:50:42	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Quit: Parting is such sweet sorrow...)
2013-03-21 23:51:03	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-21 23:51:16	latro`a	> 2 - 3 - 4
2013-03-21 23:51:18	lambdabot	  -5
2013-03-21 23:51:29	latro`a	> @info (-)
2013-03-21 23:51:30	lambdabot	  <hint>:1:1: parse error on input `@'
2013-03-21 23:51:42	<--	kennyd (~kennyd@93-141-99-213.adsl.net.t-com.hr) has quit (Ping timeout: 276 seconds)
2013-03-21 23:51:42	latro`a	what's the lambdabot analogue of :i?
2013-03-21 23:51:58	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-21 23:52:41	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-21 23:52:45	twomashi	data A = A Int; let foo = A 11; — How to get 11 back out of foo?
2013-03-21 23:52:50	<--	saep (~saep@p5B2A3C93.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-21 23:52:51	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-21 23:53:18	johnw	case foo of A x
2013-03-21 23:53:38	johnw	or, make a function like: bar (A x)
2013-03-21 23:53:43	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2013-03-21 23:53:57	latro`a	or records
2013-03-21 23:54:03	johnw	yeah, or records
2013-03-21 23:54:03	twomashi	Have to pattern match it then
2013-03-21 23:54:06	latro`a	(though that's shorthand really)
2013-03-21 23:54:12	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-21 23:54:16	<--	heruur (~tvh@6-149-103-86.dynamic.dsl.tng.de) has quit (Ping timeout: 240 seconds)
2013-03-21 23:54:25	latro`a	but yes, any extraction from a constructor is ultimately via a pattern match
2013-03-21 23:54:33	latro`a	albeit not necessarily an explicit one
2013-03-21 23:54:42	johnw	twomashi: that's really what pattern matching is all about
2013-03-21 23:54:53	ski	  instance (Show a,Show b,Show c,Show d,Show e,Show f,Show g,Show h) => Show (a,b,c,d,e,f,g,h) where showsPrec _ (a,b,c,d,e,f,g,h) = showParen True $ shows a . showChar ',' . shows b . showChar ',' . shows c . showChar ',' . shows d . showChar ',' . shows e . showChar ',' . shows f . showChar ',' . shows g
2013-03-21 23:54:56	johnw	data constructors build up data, and pattern matching breaks down data
2013-03-21 23:54:58	ski	dates : &c.
2013-03-21 23:54:59	<--	stephenjudkins (~textual@75-164-246-205.ptld.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-03-21 23:55:23	ski	latro`a : no direct analogue
2013-03-21 23:55:26	dEPY	any1 here uses emacs?
2013-03-21 23:55:30	 *	ski 
2013-03-21 23:55:33	johnw	dEPY: you bet
2013-03-21 23:55:39	dEPY	what's the difference between haskell-mode and ghc ?
2013-03-21 23:55:40	twomashi	I thought there might be another way since you get field getters if you do data { _foo :: Int } etc
2013-03-21 23:55:48	johnw	I don't just use Emacs, it's a lifestyle choice
2013-03-21 23:55:51	<--	end3rW (~end3rW@lak-115-184.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-21 23:55:55	dEPY	lol
2013-03-21 23:55:55	johnw	dEPY: you mean, ghc-mod?
2013-03-21 23:55:59	latro`a	ski: aw, oh well, ty anyways
2013-03-21 23:56:08	<--	napping (~brandon@qchost236-242.cs.illinois.edu) has quit (Quit: leaving)
2013-03-21 23:56:12	johnw	twomashi: that's what we meant by "records"
2013-03-21 23:56:19	dEPY	it just says ghc in package list
2013-03-21 23:56:19	twomashi	Ah, right
2013-03-21 23:56:19	<--	tew88 (~tew88@tew88.net) has quit (Ping timeout: 258 seconds)
2013-03-21 23:56:25	johnw	twomashi: but that's just syntactic sugar for writing a function called "_foo" that does pattern matching :)
2013-03-21 23:56:37	<--	tibbe (~tibbe@216.239.45.130) has quit (Quit: tibbe)
2013-03-21 23:56:39	johnw	dEPY: huh, don't really know what that is then
2013-03-21 23:56:50	twomashi	johnw: you may be amused to hear that I am now using mapAccumR, and rolled my own graph, and I am still getting the stack space overflow
2013-03-21 23:57:01	johnw	twomashi: show me?
2013-03-21 23:57:05	twomashi	ok
2013-03-21 23:57:08	--	DT`` is now known as DT`
2013-03-21 23:57:12	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-03-21 23:57:42	hpaste	“Anonymous Coward” pasted “Stack space overflow returns” at http://hpaste.org/84446
2013-03-21 23:57:45	edwardk	@remember johnw Stealing lens from the gods, and then having my liver eaten out daily.
2013-03-21 23:57:46	lambdabot	It is forever etched in my memory.
2013-03-21 23:57:58	johnw	haha
2013-03-21 23:58:06	ski	dates : btw, IRC custom is not to refer to a person by "<nickname> message", but to start with just the nickname, usually followed by a ":" or a ",", and then the message
2013-03-21 23:58:14	 *	edwardk returns his attention to hashable-extras
2013-03-21 23:58:21	-->	saep (~saep@p5B2A20A3.dip.t-dialin.net) has joined #haskell
2013-03-21 23:58:25	dEPY	johnw: seems to be ghc-mod. It says "Happy haskell programming"
2013-03-21 23:58:34	dates	ski : like this?
2013-03-21 23:58:39	ski	e.g., yes
2013-03-21 23:58:49	dates	ski, thanks :)
2013-03-21 23:58:59	ski	(some people prefer it with no space before the ":"/",")
2013-03-21 23:59:32	dates	I see, I am kind of new to this, so sorry for breaking rules.
2013-03-21 23:59:41	sproingie	most irc clients will expand it for you if you start typing the name and hit TAB
2013-03-21 23:59:41	ski	(dates : btw, if you say "<nickname> message", then it appears that you're claiming that *"nickname"* said "message")
2013-03-22 00:00:01	twomashi	johnw: the stack gets blown in deserialization of the Mixes, but that still doesnt explain to me why its happening… I've tried profiling and viewing the heap statistics but wasnt able to decipher the cause.
2013-03-22 00:00:05	dates	oh thanks, I didn't know that either. Thank you
2013-03-22 00:00:09	<--	idntfy (~idntfy@5.187.81.163) has quit (Ping timeout: 276 seconds)
2013-03-22 00:00:11	twomashi	johnw ( http://hpaste.org/84446 )
2013-03-22 00:00:27	johnw	reading...
2013-03-22 00:00:39	<--	shintah (bebble@h-151-194.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-22 00:00:45	ski	(.. because many IRC clients display messages that "nickname" as said as "<nickname> message", or something close to that)
2013-03-22 00:01:07	<--	tanakh (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 264 seconds)
2013-03-22 00:01:44	dates	I see
2013-03-22 00:01:54	ski	dates : also, if you plan on staying here, it might be nice to look into getting a proper IRC client ;)
2013-03-22 00:02:26	ski	(which usually has ways to tell you if someone are talking to you, unlike a tab in a browser, which can easily be forgotten)
2013-03-22 00:02:29	eikke	has anyone ever done an ML compiler in Haskell?
2013-03-22 00:02:44	ski	(eikke : as in SML and O'Caml ?)
2013-03-22 00:02:53	eikke	yup
2013-03-22 00:02:55	dates	ski: do you have any recommendations?
2013-03-22 00:02:59	-->	kfish (~conrad@cm84.eta99.maxonline.com.sg) has joined #haskell
2013-03-22 00:03:11	ski	hm. HBC was written in LazyML, iirc; so the other way around
2013-03-22 00:03:21	<--	roconnor_ (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-22 00:03:37	--	clahey is now known as cl_away
2013-03-22 00:03:54	-->	tibbe (~tibbe@207.198.105.23) has joined #haskell
2013-03-22 00:04:02	dates	btw I wrote Instance (Show a,Show b, Show c, Show d, Show e, Show f, Show g, Show h, Show i, Show j) => Show (a, b, c, d, e, f, g, h, i, j) and I got : <interactive>:1:89: parse error on input `=>' Can you tell why is that?
2013-03-22 00:04:03	<--	Chaze (~Chase@P6106.pallas.wh.tu-darmstadt.de) has quit (Quit: Chaze)
2013-03-22 00:04:14	-->	Tharugrim (~Tharugrim@194-166-74-207.adsl.highway.telekom.at) has joined #haskell
2013-03-22 00:04:19	<--	einsof (~einsof@h-36-195.a336.priv.bahnhof.se) has quit
2013-03-22 00:04:27	-->	v_ (~v@61.173.89.166) has joined #haskell
2013-03-22 00:04:32	johnw	twomashi: can you try importing Data.Map.Strict as Map, instead of Data.Map?
2013-03-22 00:04:53	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-22 00:04:59	ski	dates : on windows, X-Chat (please use <http://www.silverex.org/download/> for no nagware) or maybe mIRC. on *nices, there's also X-Chat; though i use the terminal-based irssi; there's also more. on Mac OS X, i dunno (Colloquy ?)
2013-03-22 00:05:06	twomashi	johnw: Have done. Didnt fix.
2013-03-22 00:05:09	hiptobecubic	mm_freak, it "works" in the sense that I managed to cabal-dev around it and build. But nothing rendered. Just black and massive system-wide lag. I imagine this is more related to my system than your program though :)
2013-03-22 00:05:32	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (WTF?).)
2013-03-22 00:05:34	johnw	twomashi: is there any easy way for me to run this code here?
2013-03-22 00:05:39	ski	dates : perhaps s/Instance/instance/
2013-03-22 00:05:56	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 00:06:02	hiptobecubic	mm_freak, although glxgears renders smooth and nice so who knows
2013-03-22 00:06:25	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-03-22 00:06:45	-->	newppp (~newppp@host4-27-dynamic.244-95-r.retail.telecomitalia.it) has joined #haskell
2013-03-22 00:06:51	-->	tibbe_ (~tibbe@207.198.105.23) has joined #haskell
2013-03-22 00:06:51	mm_freak	hiptobecubic: weird, because it has worked for multiple people in here
2013-03-22 00:07:07	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-03-22 00:07:39	johnw	twomashi: oh, and why are you using mapAccumR if you don't use the final value of idx?
2013-03-22 00:07:55	hiptobecubic	mm_freak, I don't know what to test really.
2013-03-22 00:07:57	<--	folone_ (~folone@brln-4dbad945.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-03-22 00:08:08	twomashi	johnw: I will use it, when I have it working
2013-03-22 00:08:12	<--	boegel (~boegel@109.130.137.51) has quit (Quit: Leaving)
2013-03-22 00:08:16	<--	tibbe (~tibbe@207.198.105.23) has quit (Ping timeout: 252 seconds)
2013-03-22 00:08:16	--	tibbe_ is now known as tibbe
2013-03-22 00:08:17	twomashi	I'm making a small mix generator so you can reproduce
2013-03-22 00:08:19	mm_freak	hiptobecubic: if you find a way to resolve it, i'd be happy to know…  i could help you later, when i've got some more time
2013-03-22 00:08:30	monoidal	dates: in general, it's better to write instances in a file
2013-03-22 00:08:36	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 00:08:38	johnw	twomashi: let me try some changes
2013-03-22 00:08:43	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 00:08:46	monoidal	dates: not in interactive mode
2013-03-22 00:09:07	ski	dates : btw, one of the most important things to realize about IRC is that people commonly are logged in to IRC all day and night, even though they aren't physically at the computer all that time. this way, they can catch up later if they want to
2013-03-22 00:09:28	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-22 00:09:37	<--	earthy (~arthurvl@abaris.idefix.net) has quit (Ping timeout: 245 seconds)
2013-03-22 00:09:58	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 00:10:01	dates	oh I see
2013-03-22 00:10:16	-->	earthy (~arthurvl@abaris.idefix.net) has joined #haskell
2013-03-22 00:10:17	ski	dates : this means that if noone appears to be present who can help you, you should (a) not quit within a few minutes or half an hour; but rather (b) wait *at least* a few hours, and come back later days if you haven't got an answer
2013-03-22 00:10:18	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 264 seconds)
2013-03-22 00:10:29	-->	dawe (~dawe@p5090F923.dip.t-dialin.net) has joined #haskell
2013-03-22 00:10:35	-->	tranma (~tranma@vl10.gw.ok-labs.com) has joined #haskell
2013-03-22 00:10:51	-->	heruur (~tvh@2a00:12d0:a100:8c01:bc1d:856e:8d86:5e3f) has joined #haskell
2013-03-22 00:10:55	<--	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has quit (Ping timeout: 260 seconds)
2013-03-22 00:11:01	ski	dates : however, doing this is more important on more quiet channels than #haskell (which is usually pretty active), and where questions can get lost in the noise (so try asking again later)
2013-03-22 00:11:02	dates	okey, I will keep them in mind - thanks also monodial
2013-03-22 00:11:06	lispy	ircbrowse.net is now a nice way to search the log here asa well
2013-03-22 00:11:07	--	preflex_ is now known as preflex
2013-03-22 00:11:08	-->	Itkovian_ (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-22 00:11:12	<--	stat_vi (~stat@dslb-094-218-226-100.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-22 00:11:17	<--	Itkovian (~Itkovian@vpne047.ugent.be) has quit (Ping timeout: 255 seconds)
2013-03-22 00:11:18	--	Itkovian_ is now known as Itkovian
2013-03-22 00:11:51	-->	bos_ (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-22 00:11:53	-->	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has joined #haskell
2013-03-22 00:11:54	-->	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has joined #haskell
2013-03-22 00:11:58	<--	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has quit (Ping timeout: 252 seconds)
2013-03-22 00:12:02	<--	Beetle_jada (~jadatkins@host109-151-136-130.range109-151.btcentralplus.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-22 00:12:03	connelly	is there a module for implementing a LLVM backend in haskell?
2013-03-22 00:12:04	<--	bos_ (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Read error: Connection reset by peer)
2013-03-22 00:12:08	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Quit: leaving)
2013-03-22 00:12:11	ski	dates : it is quite frustrating for someone who can answer to see that the querent has already left the channel
2013-03-22 00:12:30	-->	bos_ (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-22 00:12:45	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-22 00:13:09	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-22 00:13:09	<--	Jesin (~Jessin_@dhcp123-36.eecs.lehigh.edu) has quit (Ping timeout: 276 seconds)
2013-03-22 00:13:39	<--	leoncamel (~leoncamel@124.126.212.196) has quit (Ping timeout: 256 seconds)
2013-03-22 00:13:39	ski	dates : also, it's usually considered impolite to ask "is anyone here ?" or "can anyone help me with <topic> ?" -- many people don't like to commit themselves into trying to help until they know at least somewhat what the question is about -- so be bold, and ask your question :)
2013-03-22 00:14:06	ski	(dates : i think #haskell is more forgiving of this than some other channels, though)
2013-03-22 00:14:24	hiptobecubic	most channels have it in the /topic
2013-03-22 00:14:50	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-03-22 00:15:00	<--	bos (~bos@173.252.71.1) has quit (Ping timeout: 245 seconds)
2013-03-22 00:15:21	dates	okey, I'll keep these in mind :)
2013-03-22 00:15:34	xkcd	hiptobecubic: Can you make a comment on this http://pyvideo.org/video/1799/functional-programming-with-python
2013-03-22 00:15:47	<--	wei2912 (wei2912@unaffiliated/wei2912) has quit (Ping timeout: 255 seconds)
2013-03-22 00:16:01	xkcd	may be after watching for a few min
2013-03-22 00:16:10	ski	dates : i'm just mentioning this because these seems to be the most common misunderstandings newbies have with IRC culture -- not saying you in particular did any of this ;)
2013-03-22 00:16:12	-->	Sorella (~queen@201.80.212.227) has joined #haskell
2013-03-22 00:16:12	<--	Sorella (~queen@201.80.212.227) has quit (Changing host)
2013-03-22 00:16:12	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-03-22 00:16:21	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-22 00:16:41	<--	bos_ (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Ping timeout: 245 seconds)
2013-03-22 00:17:29	dEPY	someone explain this:
2013-03-22 00:17:31	dEPY	> [3,2,1] > [2,10,100]
2013-03-22 00:17:33	lambdabot	  True
2013-03-22 00:17:52	hiptobecubic	@src [] (>)
2013-03-22 00:17:52	lambdabot	Source not found. Sorry about this, I know it's a bit silly.
2013-03-22 00:17:55	<--	Thomyho3 (~thomyho@mnhm-4d013013.pool.mediaWays.net) has quit (Ping timeout: 246 seconds)
2013-03-22 00:17:59	hiptobecubic	@src (>) []
2013-03-22 00:18:00	lambdabot	Source not found.
2013-03-22 00:18:02	hiptobecubic	oh well
2013-03-22 00:18:13	-->	rsimoes (~rsimoes@107-194-78-135.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-03-22 00:18:27	dEPY	Book says first heads are compared then second elements ....
2013-03-22 00:18:29	<--	otters (~otters@oftn/member/otters) has quit (Quit: bye)
2013-03-22 00:18:33	smarter__	3 > 2
2013-03-22 00:18:34	monoidal	dEPY: indeed, and 3 > 2
2013-03-22 00:18:36	alpounet	dEPY, lexicographic ordering
2013-03-22 00:18:37	--	stelleg is now known as stelleg_away
2013-03-22 00:18:48	--	smarter__ is now known as smarter
2013-03-22 00:19:02	dEPY	doesn't it compare second elements then after that?
2013-03-22 00:19:19	monoidal	dEPY: no, first place where it's different decides the result
2013-03-22 00:19:20	sproingie	dEPY: it works for any list of Ord elements.  this is how strings compare.
2013-03-22 00:19:28	alpounet	only if the first elements are equal dEPY
2013-03-22 00:19:50	dEPY	oh I see
2013-03-22 00:19:53	dEPY	cool tnx
2013-03-22 00:19:59	kludgy	Cale: I switched to the strict version of hGetContents.. that seems to work, but appears to be unrelated to the program not responding to requests when one would expect by looking at code :( http://pastebin.com/6bGWTdrN
2013-03-22 00:20:04	mauke	The paste 6bGWTdrN has been copied to http://hpaste.org/84447
2013-03-22 00:20:29	-->	otters (~joel@oftn/member/otters) has joined #haskell
2013-03-22 00:20:50	hiptobecubic	I suppose it's reasonable, but I still find it annoying when people talk about the disadvantages of functional programming as "not OO. Hard to understand compared to OO. Loops are easier than recursion for everyone"
2013-03-22 00:20:57	-->	DeadPanda (~Brett@host-92-28-91-149.as13285.net) has joined #haskell
2013-03-22 00:21:08	dates	ski: thanks for warning, now I can behave better here :)
2013-03-22 00:21:09	hiptobecubic	it's reasonable because almost everyone is taught OO, mind you. Not because I agree with any of it necessarily.
2013-03-22 00:21:16	sproingie	actually lists of Ord are themselves Ord ... the derivation of that is somewhat magical
2013-03-22 00:21:21	-->	bos (~bos@107.39.180.40) has joined #haskell
2013-03-22 00:21:23	hpaste	johnw annotated “Stack space overflow returns” with “Stack space overflow returns (annotation)” at http://hpaste.org/84446#a84448
2013-03-22 00:21:23	Cale	kludgy: hmm
2013-03-22 00:21:30	johnw	twomashi: see if that helps at all
2013-03-22 00:21:38	Cale	kludgy: Hang on, I'll try to run it myself
2013-03-22 00:21:46	sproingie	> [[1]] > [[2]]
2013-03-22 00:21:47	lambdabot	  False
2013-03-22 00:22:02	kludgy	Cale: Something is still nagging at me that I'm missing a subtlety of chaining/binding in the do notation
2013-03-22 00:22:12	-->	iago (~iago@a213-22-41-239.cpe.netcabo.pt) has joined #haskell
2013-03-22 00:22:36	dEPY	hiptobecubic: about loops... I used map and filter in php in my last job and my boss (CTO) was angry at me cause it's too complicated to read and understand altough the code was like 3 times shorter and more compact.
2013-03-22 00:22:41	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-03-22 00:22:56	Saizan	kludgy: how are you sending the requests?
2013-03-22 00:23:01	hiptobecubic	dEPY, it's not really about being shorter and compact. I jsut don't agree that loops are easier than composing map and filter
2013-03-22 00:23:19	kludgy	Saizan: From chrome, connecting to localhost:9000
2013-03-22 00:23:26	<--	system64 (~system64@202.78.175.199) has quit (Remote host closed the connection)
2013-03-22 00:23:33	<--	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-22 00:23:34	hiptobecubic	map and filter are both easy concepts to understand. it's just less to keep in your short term memory when you are trying to understand a larger problem
2013-03-22 00:23:41	dEPY	hiptobecubic: I don't agree either. But I had to revert that code back to like 3 or 4 times nested loops :D
2013-03-22 00:24:24	Saizan	kludgy: maybe chrome is trying to keep the connection alive? if it doesn't close it hGetContents won't return
2013-03-22 00:24:29	dEPY	hiptobecubic: exactly. I told him that and I said other programmers will surely undestand after first read of the documentation if they don't know the concepts already... but... meh :)
2013-03-22 00:24:44	-->	dibblego (~nobody@stargate.it.nicta.com.au) has joined #haskell
2013-03-22 00:25:33	hiptobecubic	dEPY, it's just an example of what I was talking about. Even simple funtional programming concepts are frowned upon because most programmers are already familiar with the (often worse) imperative way and that becomes the basis of all comparison
2013-03-22 00:25:47	<--	janbanan (~naj@niklas.vth.sgsnet.se) has quit (Quit: - nbs-irc 2.39 - www.nbs-irc.net -)
2013-03-22 00:25:50	hiptobecubic	So it's not enough that it works. You have to justify having used it in place of the "normal" way
2013-03-22 00:26:05	Cale	kludgy: There're type errors in your pasted code
2013-03-22 00:26:31	-->	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has joined #haskell
2013-03-22 00:26:35	<--	takuan (~takuan@178-118-49-243.access.telenet.be) has quit (Ping timeout: 255 seconds)
2013-03-22 00:26:45	hiptobecubic	and then you have talks like this video where he opens with advantages and disadvantages of the paradigm and the disadvantages are basically "you didn't have a bunch of mandatory classes involving this stuff so it's hard"
2013-03-22 00:26:46	<--	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-22 00:26:56	<--	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has quit (Remote host closed the connection)
2013-03-22 00:27:12	-->	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-22 00:27:21	Cale	actually, it was just the PortID parameter
2013-03-22 00:27:26	-->	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has joined #haskell
2013-03-22 00:28:04	hiptobecubic	It's funny really. Before I knew that "functional programming" was thing, I used a lot of these features in python and just assumed that it was normal to have them. I was rudely awakened by my first experience with C.
2013-03-22 00:28:11	hiptobecubic	was a thing*
2013-03-22 00:28:26	<--	dates (58e3e89b@gateway/web/freenode/ip.88.227.232.155) has quit (Quit: Page closed)
2013-03-22 00:28:28	-->	ddp (~ddp@71-83-115-6.static.reno.nv.charter.com) has joined #haskell
2013-03-22 00:28:51	-->	bitonic (~user@b01bf0a7.bb.sky.com) has joined #haskell
2013-03-22 00:29:05	<--	etehtsea (~textual@188.134.44.6) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-22 00:29:11	-->	kmels_ (~kmels@frbg-4d029a9f.pool.mediaWays.net) has joined #haskell
2013-03-22 00:29:16	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-22 00:29:17	-->	dEPy_ (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-22 00:29:27	dEPy_	O_o weird disconnect...
2013-03-22 00:29:34	twomashi	johnw: tried your changes, didnt compile.. having dinner now but am preparing a version you can run, i'll ping you. thanks for your help
2013-03-22 00:30:04	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-22 00:31:04	<--	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has quit (Ping timeout: 256 seconds)
2013-03-22 00:31:19	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-22 00:31:24	--	dEPy_ is now known as dEPy
2013-03-22 00:31:28	Cale	oh
2013-03-22 00:31:39	Cale	kludgy: the reason is that hGetContents is waiting for the socket to close
2013-03-22 00:31:48	<--	newppp (~newppp@host4-27-dynamic.244-95-r.retail.telecomitalia.it) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-22 00:32:01	<--	lennart_ (~lennart@kiel-5f77bfc3.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-22 00:32:07	-->	cognominal (~cognomina@37.160.40.245) has joined #haskell
2013-03-22 00:32:11	Cale	and of course, you probably don't want to wait that long to do anything because then it's too late to respond
2013-03-22 00:32:35	monoidal	indeed. with netcat, the parsing starts after Ctrl-D
2013-03-22 00:33:12	<--	kmels (~kmels@frbg-4d029b81.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-22 00:33:20	--	irc: disconnected from server
2013-03-22 00:33:30	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-22 00:33:30	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-22 00:33:30	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-22 00:33:30	--	Nicks #haskell: [@ChanServ [[zz]] [mth] [swift] \rs ]OLI[ __main__ _br_ _flow_ _janne _jwest `0660 `bps `micro `nand` `ramses a11235 aajmakin aavogt ab9rf absence abumirqaan acfoltzer acharles Adeon adimit Adios adnap adnauseam AfC aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator_ alejandrogomez alexander__b alios alnix_ alpounet alshain Amadiro amatsu amiller anachron_ anders^^ andrewsw aninhume1 anona AntiSpamMeta apaku appamatto apucacao araujo arbn argiopeweb aristid arkeet arkx arlinius armlesshobo arnihr__ arun asante asQuirreL aszlig Athas AtnNn augustl Axman6 azaq23 b52 b_jonas BadKitty bananagram banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ Belgarion0 bens benzap bergey betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld bitonic blackmirroxx BlankVerse1 BlastHardcheese blooberr Bloodless BMeph bmfx BobFunk bobry bogner Boney Boreeas bos Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bru` bstrie Bwild bxc byorgey ByronJohnson bytbox c_wraith cads Cale caligula Canar canta canvon carlocci ccasin ccxCZ cdntr celery__ Cerise certainty chance charlesofarrell chessguy chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisirc chrra ciaranm CindyLinz circle cjay cl_away ClaudiusMaximus Clint clog cmccann_ cmears cmsd2 cods coeus_ cognominal colah collin comak comatose companion_cube conehead confound connelly coppro copumpkin CosmicRay Counter-Strike CoverSlide cow-orke1 crdueck cross crs_ Cryovat ctult ctype_real cwvh cynick cyphase d-snp dabradley dan_johnsin dannybtran danr dario Dashkal davean davorak dawe dcoutts ddp DeadPanda deavidsedice Deewiant def-lkb dennda dented42 dEPy Derander descender DexterLB dfletcher_ dgriffi dibblego DigitalKiwi dilinger dixie djahandarie djanatyn dju dkasak dlundy_ dmac dmarker dmwit docksider Dodek dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean DrChaos dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago DT` duairc__ dumbhat DustyDin1o Dybber dyreshark dysinger eacameron EarlGray earthy ecuderpam edenc edon Eduard_Munteanu edwardk edwtjo Eelis ehamberg Eiam eikke eis eL_Bart0 electrogeek elgot Eliel elliott elliottcable emc2 emma endojelly Enigmagic ent epta ericmj Eridius erkin ernst Erstarrung Estrellas etabot ethercrow etrepum eviltwin_ Excureo eyck f8_ fabjan faen faheem FalkoPeters fall_ fayden fcr fenton_travers fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin flebron flux fmapE folone formalcow fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul_ gienah Gilly glguy Gothmog_ Gracenotes gseitz gspr gthorslund guerrilla Guest10329 Guest22595 Guest65991 Guest91870 Gunni gusto guy_ guymann gwern h_chiro hachiya hackagebot Hafydd HaltingState hamishmack hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk Hermit heruur hiptobecubic hiratara hiredman hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hungryblank hvr HW42 hyko iago IanKelling ibid IbnFirnas Iceland_jack identity idnar idntfy[work] ido idoru Igloo ijp imeredith inr int-e integral Internet13 ion ique isenmann isomorphic issimus1 Itkovian iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55_ jbauman jcp jdoliner Jeanne-Kamikaze jedai jeffreybaird Jello_Raptor jercos jerojasro jfischoff jix jlamothe jlewis jliikka jlouis_ jmcarthur jMCg jml joachifm joar jodaro joe9 JoeHazzers joeyh johnny934759 johnw joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmae julmuri junsuijin jyyou k00mi k0ral kadoban KaiSforza kakos kallisti kalven KaneTW kaol Ke kennyp kevinqcs kfish Khisanth kini Kinnison KitB__ kith kkris kloeri kludgy klugez kmels_ kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ kryft kshannon ktosiek Kuba kvda kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard lcfrs LeaChim lemao lenstr leprauchan leroux levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lrojas lucca luite Luke lulf lusory m3ga machisuji madjestic magicman majoh maksbotan_ malorie maltin mami mannyv marienz Martty MasseR mastensg MasterPu1cher mateu Mathnerd314 mattp_ matzo mauke Maxdamantus mceier mcguitan83 McManiaC mechainai mechairoi mefisto Megant mendez merijn message144 meyersh_ mgsloan miasma miclorb mietek mike2 mikecaruso mikeplus64 mikurubeam milli mimi_vx mimico__ mirsal mixi mizu_no_oto mjr84 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 moai MoALTz mokus_ mollerstrand MOMI monique_ monochrom monoidal moonlite_ morazow mornfall morolin mortberg Mortchek mpu mrd mrdomino_ MrFenix mrkotfw MrMeh mrotondo mrshoe mspells mtahmed mullein munro museun mux myme n_b Nanar nardul Natch natte ndngvr netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg` niloc132 Nimatek nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nonymousa noplamodo notdan NougatRillettes Nshag numeral nus nwf obcode ocharles ofan OlegYch opamp opqdonut ormaaj Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s_ ousado ozataman ozgura PaksAway pantsman parcs PartyKat2e PaulVisschers pcapriotti pdxleif peddie peltchu pepijn_away perlite petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul philipde` PHO_ piezo pikhq_ Plex- plhk plucas pnielsen popz pqmodn_ pr predator117 preflex prh pricklypear PrO_OkI profmakx ps-auxw pseudolio Ptival ptrf purefn puzza007 pwang__ pyrtsa pyykkis q66 quaestor quchen quicksilver quuxman qwandor|quassel qwr qz r126l_ raek_ RageOfThou raid rainmaker Ralith Raynes Razz rcj_ rcl realnot redjohn reembarking08 refold reiddraper Rembane RenJuan rexamophone rfw RichyB Rickasaurus rio Riussi_ rmarianski rmunoz rmunroe robbe- robbert` rossabaker Rotaerk rsimoes ryanakca s00pcan s4msung_ s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi saurik sbahra scgilardi schlicht_ schlumpi schroedinbug sclv Scott_firebeta Sculptor SeanTAllen seats SegFaultAX sepp2k setmeaway Sgeo sgronblo sh shachaf shanse shepheb shergill SHODAN shutdown_-h_now si14 simon__ simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash SLi sm smarter snoyberg so Soft sohum solarus solirc sordina2 Sorella SoupE Spockz sproingie Squid_Tamer srcerer srhb sShintah staafl Starfire statusfailed steez stelleg_away stepcut stephe strax_ suiside sully sunfun sunnavy supersym supki sw17ch Swizec sysop_fb tahu tamiko Tarential taruti taterbase tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction_f tessier Testos tg tgeeky Th0mas thalassarche Tharugrim The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur thorsten` thoughtpolice Thra11 threeday1onk threesome tibbe tim timemage timtom tippenein tjohnson tkd tlaine tlevine tmiw TML tobiassj1sten tom339 tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek tranma trevize tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl_ Twey twomashi typoclass u__ ulfdoz Ulrar Urchin Urchin[emacs] UziMonkey v_ Valodim Varakh vehk verrens Vertue vhz vili vmeson vobi Volstvok Vorpal voyd_ Vq wagle Walther warpy__ Watcher7 waterlaz wchun weie_ wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wump wunki wyfrn x7 xaimus xalei Xaratas xcv xcvii xinming xkcd XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai_ xymox yam yan_ yano yeltzooo yezariaely yiannis_t yriw ysulsky_ yumike Zariel zebr Zedrikov zeiris zenzike zero7 ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp]
2013-03-22 00:33:30	--	Channel #haskell: 1001 nicks (1 op, 0 halfops, 0 voices, 1000 normals)
2013-03-22 00:33:30	--	URL for #haskell: http://www.haskell.org/
2013-03-22 00:33:32	--	Mode #haskell [+CLcnpt]
2013-03-22 00:33:32	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-22 00:33:33	dEPy	hiptobecubic: forgot to mention, when my boss saw I was passing functions as parameters to other functions, he called that "programming masturbation" because it only feels good for the person who wrote it cause he's showing off... :D
2013-03-22 00:33:53	dEPy	I didn't know if I should laugh or cry honestly.. :)
2013-03-22 00:34:03	monoidal	so during refreshing, the browser only then closes old socket and that's why it's seen
2013-03-22 00:34:04	kludgy	Cale: apologies for the type error.. ad hoc editing in pastebin
2013-03-22 00:34:15	kludgy	Cale: and good call on waiting for the socket to close
2013-03-22 00:34:47	 *	hackagebot hash 0.1 - Hashing tools  http://hackage.haskell.org/package/hash-0.1 (EdwardKmett)
2013-03-22 00:34:50	hiptobecubic	dEPy, that's straight out of K&R C. Go look at qsort.
2013-03-22 00:34:50	<--	otters (~joel@oftn/member/otters) has quit (Changing host)
2013-03-22 00:34:50	-->	otters (~joel@unaffiliated/otters) has joined #haskell
2013-03-22 00:35:32	--	stelleg_away is now known as stelleg
2013-03-22 00:35:37	johnw	twomashi: i will likely be asleep, but i'll see the ping tomorrow
2013-03-22 00:35:58	<--	edon (~user@albalug/edon) has quit (Ping timeout: 245 seconds)
2013-03-22 00:36:43	hpc	hiptobecubic: imagine going from any other language to "you can't have assignments in a lambda" python ;)
2013-03-22 00:36:43	lcfrs	jfischoff: i'm thinking of using maxent for a small project
2013-03-22 00:37:24	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 00:37:24	hiptobecubic	hpc, that was one of the first programming language complaints I ever had :D  I'm kind of proud of myself now :)
2013-03-22 00:37:35	hpc	i got bit by that my first day of python, and i didn't even know what lambda was
2013-03-22 00:37:43	-->	neena (~neena@codesurfers.net) has joined #haskell
2013-03-22 00:37:46	-->	ncw (ncw@conference/pycon/x-ghhghtpphmldxhwl) has joined #haskell
2013-03-22 00:37:47	hpc	i copy-pasted some code from somewhere else to solve a PE problem
2013-03-22 00:37:59	hpc	replaced the interesting part with an increment of some kind
2013-03-22 00:38:01	hpc	and it borked
2013-03-22 00:38:17	hiptobecubic	although, it's one of the few times I'll say that python seemed arbitrarily stupid. Normally I was pleasantly surprised when I wanted to do something "ugly"
2013-03-22 00:38:32	hpc	indeed
2013-03-22 00:38:51	hpc	it was that lambda issue and python's weird handling of numeric types, for me
2013-03-22 00:39:23	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-22 00:39:25	hpc	doing PE problems in a "duck-typed" anything-goes language, only to get a runtime error when you give it an int instead of a float
2013-03-22 00:39:35	hpc	was quite frustrating
2013-03-22 00:39:40	-->	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has joined #haskell
2013-03-22 00:39:47	hiptobecubic	PE?
2013-03-22 00:39:47	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-22 00:39:48	 *	hackagebot hash 0.1.1 - Hashing tools  http://hackage.haskell.org/package/hash-0.1.1 (EdwardKmett)
2013-03-22 00:39:48	<--	mizu_no_oto (~textual@rrcs-69-193-53-138.nys.biz.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-22 00:39:50	 *	hackagebot log-domain 0.4 - Log-domain arithmetic  http://hackage.haskell.org/package/log-domain-0.4 (EdwardKmett)
2013-03-22 00:39:57	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 00:40:03	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-22 00:40:08	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-03-22 00:40:22	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 00:40:30	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-22 00:40:38	<--	sepp2k (~sexy@g227180089.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-22 00:40:44	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Quit: Disappears in a puff of smoke)
2013-03-22 00:40:47	<--	kevinqcs (~turing@183.209.41.97) has quit (Quit: Leaving.)
2013-03-22 00:40:55	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-22 00:41:21	hiptobecubic	hpc, I've had a lot of bugs like that in the last few days. I'm always bitten by numpy.arange() defaulting to int.
2013-03-22 00:42:48	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-03-22 00:43:03	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-22 00:43:12	madjestic	hey guys, how do I check, if an argument is a list?
2013-03-22 00:43:50	monoidal	madjestic: simply speaking, you can't
2013-03-22 00:43:54	hiptobecubic	xkcd, what did you want to talk about?
2013-03-22 00:43:59	opamp	madjestic: static typing doesnt allow that
2013-03-22 00:44:04	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-22 00:44:21	hiptobecubic	madjestic, it's determined at compile time what the type will be.
2013-03-22 00:44:24	rmunroe	hiptobecubic: Hmm?
2013-03-22 00:44:32	rmunroe	oh, never mind
2013-03-22 00:44:35	monoidal	madjestic: if a function is polymorphic, then it has to behave uniformly for lists and nonlists
2013-03-22 00:44:48	 *	hackagebot compensated 0.2 - Compensated floating-point arithmetic  http://hackage.haskell.org/package/compensated-0.2 (EdwardKmett)
2013-03-22 00:44:50	 *	hackagebot hash 0.1.2 - Hashing tools  http://hackage.haskell.org/package/hash-0.1.2 (EdwardKmett)
2013-03-22 00:45:05	<--	dibblego (~nobody@stargate.it.nicta.com.au) has quit (Ping timeout: 256 seconds)
2013-03-22 00:45:15	opamp	PE=Price/Earnings?
2013-03-22 00:45:30	madjestic	right, but if it's of type foo::a->a.  'a' can be a list, but then foo must return a list too, right?
2013-03-22 00:45:38	monoidal	madjestic: yes
2013-03-22 00:45:43	hiptobecubic	opamp, ah, perhaps
2013-03-22 00:46:14	monoidal	madjestic: the only foo of type a -> a is identity, i.e. returning what you got (excluding some pathological values like exceptions)
2013-03-22 00:47:21	johnw	edwardk: cool, just "hash", I like it
2013-03-22 00:47:33	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-22 00:47:36	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 276 seconds)
2013-03-22 00:48:06	heath	is there a method in cabal for showing when a package was last updated?
2013-03-22 00:48:27	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-03-22 00:48:33	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-22 00:48:54	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 276 seconds)
2013-03-22 00:49:03	hpc	get the info from hackage?
2013-03-22 00:49:05	<--	heruur (~tvh@2a00:12d0:a100:8c01:bc1d:856e:8d86:5e3f) has quit (Ping timeout: 246 seconds)
2013-03-22 00:49:10	edwardk	johnw: well it merged the hashable-extras code i had lying around here with a bunch of stuff from Data.Analytics.Hash.*
2013-03-22 00:49:22	edwardk	and i'll probably wind up putting a murmurhash impl in there, etc.
2013-03-22 00:49:24	hpc	there isn't really a clear notion of "last updated" for packages
2013-03-22 00:49:41	johnw	although it could be a package for combining anonymous meat products with tiny potatoes...
2013-03-22 00:49:46	edwardk	johnw: true
2013-03-22 00:49:47	madjestic	hmm, I am trying to right a function like this: http://hpaste.org/84450
2013-03-22 00:49:51	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-22 00:49:51	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-22 00:49:51	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-22 00:50:05	edwardk	hen you can release add-on modules corned-beef-hash, etc.
2013-03-22 00:50:11	madjestic	what direction should I take?
2013-03-22 00:50:12	johnw	exactly
2013-03-22 00:50:27	hpc	madjestic: step back from the implementation; what type do you want it to have?
2013-03-22 00:50:31	hiptobecubic	edwardk, broken link for travis|buildstatus in hash readme
2013-03-22 00:50:36	edwardk	hiptobecubic: woops
2013-03-22 00:50:48	hpc	(this is only partially a trick question)
2013-03-22 00:51:14	edwardk	thanks =)
2013-03-22 00:51:15	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-22 00:51:25	madjestic	hpc it should output a sum of vlues, whether it is a list of values, or a singlton value, not in a list
2013-03-22 00:51:48	hpc	i mean, what actual type
2013-03-22 00:52:00	madjestic	float or an integer
2013-03-22 00:52:05	hpc	"add is a function from X to Y"
2013-03-22 00:52:06	madjestic	a numeric valaue
2013-03-22 00:52:33	<--	k00mi (~koomi@dslb-188-099-045-172.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.0)
2013-03-22 00:52:55	<--	comatose (ca14c1fe@gateway/web/freenode/ip.202.20.193.254) has quit (Quit: Page closed)
2013-03-22 00:52:56	madjestic	k, I meant the product of X.  a fold, not addition per se
2013-03-22 00:53:39	-->	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-22 00:53:44	hpc	so afaict, you want it to be something like
2013-03-22 00:54:04	hpc	add :: Num a => (either one value of 'a' or a list [a]) -> a
2013-03-22 00:54:10	madjestic	yes
2013-03-22 00:54:24	madjestic	I very much want that
2013-03-22 00:54:31	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 264 seconds)
2013-03-22 00:54:46	hpc	the way you do that is... not pleasant
2013-03-22 00:54:52	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 00:55:16	hpc	and it's honestly better to just call it with single numbers as (add [x]) and move on
2013-03-22 00:55:18	-->	DasIch-m (~dasich@tmo-110-3.customers.d1-online.com) has joined #haskell
2013-03-22 00:55:30	hpc	but for the sake of exercise
2013-03-22 00:55:39	hpc	the way i would do it is
2013-03-22 00:55:41	madjestic	hpc if by doing so I wil learn a thing or two and have a laughe in between - I am very much willing to try such unpleasant way
2013-03-22 00:55:42	<--	rmarianski (~rmariansk@mail.marianski.com) has quit (Quit: leaving)
2013-03-22 00:55:47	<--	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-22 00:55:58	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 00:56:26	hpc	class AddClass a b | a -> b where add :: a -> b -- you need functional dependencies or something similar to express that the return type depends on the input; you'll see why
2013-03-22 00:56:45	<--	tibbe (~tibbe@207.198.105.23) has quit (Quit: tibbe)
2013-03-22 00:57:00	hpc	instance Num a => AddClass a a where add = id -- you need some other extensions to make this work too, i forget exactly which
2013-03-22 00:57:29	--	pwang__ is now known as ParahSail1n
2013-03-22 00:57:33	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Read error: Connection reset by peer)
2013-03-22 00:57:36	hpc	instance Num a => AddClass [a] a where add = foldl' (+) 0
2013-03-22 00:57:38	<--	typoclass (~typoclass@p4FC92561.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-22 00:57:49	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-22 00:57:57	hpc	that lets you write both (add 5) and (add [1, 2, 3, 4, 5])
2013-03-22 00:58:09	madjestic	aha, so they are add functions, belonging to different type classes?
2013-03-22 00:58:10	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 252 seconds)
2013-03-22 00:58:20	hpc	belonging to a single type class
2013-03-22 00:58:34	hpc	'add' is a single function with a single type
2013-03-22 00:58:36	hpc	and that type is
2013-03-22 00:58:39	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-22 00:58:45	hpc	add :: AddClass a b => a -> b
2013-03-22 00:59:03	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 00:59:06	hpc	it has a different implementation for each (AddClass a b) instance you give it
2013-03-22 00:59:16	<--	mixi (~mixi@exherbo/developer/mixi) has quit (Ping timeout: 252 seconds)
2013-03-22 00:59:25	madjestic	interesting
2013-03-22 00:59:30	hpc	now there's some places this can fall apart
2013-03-22 00:59:34	hpc	namely
2013-03-22 00:59:50	hpc	instance Num a => Num [a] where fromInteger x = repeat x
2013-03-22 00:59:59	hpc	now we can do something like
2013-03-22 01:00:14	hpc	(1 :: [Int]) = [1, 1, ...]
2013-03-22 01:00:21	heath	hpc: okay, that works
2013-03-22 01:00:25	heath	thank you
2013-03-22 01:00:35	hpc	and so now if we call (add (1 :: [Int])), what does it equal?
2013-03-22 01:00:40	hpc	there's two instances it can use
2013-03-22 01:00:52	hpc	because [Int] matches (Num a) => [a]
2013-03-22 01:01:03	<--	roconnor (~roconnor@e120-pool-d89a6fcf.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-22 01:01:03	hpc	but [Int] is also a Num, so it matches the first instance too
2013-03-22 01:01:14	<--	Tharugrim (~Tharugrim@194-166-74-207.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-22 01:01:16	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-22 01:01:32	hpc	ghc has rules that it uses to attempt to resolve the confusion, and i haven't bothered to waste braincells on knowing if those work here
2013-03-22 01:02:00	<--	ktosiek (~quassel@46.22.173.54) has quit (Ping timeout: 264 seconds)
2013-03-22 01:02:44	hpc	i also mentioned that this class requires a functional dependency
2013-03-22 01:02:57	hpc	so, that "| a -> b" part means, a determines what b is
2013-03-22 01:03:26	-->	ktosiek (~quassel@46.22.173.54) has joined #haskell
2013-03-22 01:03:31	<--	LAMMJohnson (~ja@user-5af43fd6.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-03-22 01:03:32	-->	mixi (~mixi@exherbo/developer/mixi) has joined #haskell
2013-03-22 01:03:33	hpc	if we know that 'a' is '[Int]', we can immediately deduce from just that information that 'b' is 'Int'
2013-03-22 01:03:52	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-22 01:04:06	hpc	a nice consequence of this is that you can't have a third instance
2013-03-22 01:04:18	hpc	uh
2013-03-22 01:04:24	hpc	well you probably can actually
2013-03-22 01:04:32	hpc	but that's because we're doing weird stuff
2013-03-22 01:04:49	-->	sh (~sh@89.101.222.213) has joined #haskell
2013-03-22 01:05:00	<--	DasIch-m (~dasich@tmo-110-3.customers.d1-online.com) has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)
2013-03-22 01:05:02	hpc	supposing we wrote our instance like "instance Add [Int] Int where"
2013-03-22 01:05:09	-->	LAMMJohnson (~ja@user-5af43fd6.broadband.tesco.net) has joined #haskell
2013-03-22 01:05:19	hpc	we couldn't add a conflicting "instance Add [Int] Double where"
2013-03-22 01:05:39	hpc	or instance Add [Int] (IO ()) where add _ = unsafeLaunchMissiles
2013-03-22 01:06:11	hpc	without that functional dependency, we also have to specify what exact result we want
2013-03-22 01:06:41	hpc	without that little bit of magic, 'a' and 'b' are totally independent, and the compiler can't infer that you mean to add that [Int] to an Int
2013-03-22 01:06:57	hpc	there could be another instance like the evil i just mentioned, but in a totally different module
2013-03-22 01:07:24	hpc	or some other kind of wrongness
2013-03-22 01:07:46	<--	quchen (~david@p54AA309D.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-22 01:07:58	madjestic	hehe
2013-03-22 01:08:18	hpc	at this point, i would pull back and say, "how about a data structure"
2013-03-22 01:08:37	hpc	data Add a = Single a | List [a]
2013-03-22 01:08:41	hpc	add (Single a) = a
2013-03-22 01:08:51	hpc	add (List as) = foldl' (+) as
2013-03-22 01:08:58	genisage	I've been trying to get that to work
2013-03-22 01:09:08	hpc	but now we have to say
2013-03-22 01:09:11	hpc	add (Single 5)
2013-03-22 01:09:16	hpc	add (List [1..5])
2013-03-22 01:09:16	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-22 01:09:23	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-22 01:09:27	genisage	But I can't figure out how to work (Num a) into it.
2013-03-22 01:09:35	hpc	and at that point, we might as well dispense with any illusion of polymorphism and say add [1..5] and add [5]
2013-03-22 01:09:44	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Read error: Connection reset by peer)
2013-03-22 01:09:51	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-22 01:09:51	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-03-22 01:10:02	hpc	that Num constraint comes into the type of add
2013-03-22 01:10:13	hpc	data-structured add would be of type
2013-03-22 01:10:20	hpc	add :: Num a => Add a -> a
2013-03-22 01:10:42	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-22 01:10:58	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-22 01:11:23	<--	tjohnson (~tjohnson@8-116.ptpg.oregonstate.edu) has quit (Ping timeout: 245 seconds)
2013-03-22 01:11:24	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-22 01:11:34	genisage	But how would you prevent somebody from using those data constructors on values that can't be added?
2013-03-22 01:11:39	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-22 01:12:05	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-22 01:12:11	madjestic	hpc ehh, wait, what?  How did you get from add (Single 5) to add (List [1..5]) ?
2013-03-22 01:12:12	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Client Quit)
2013-03-22 01:12:33	hpc	madjestic: those are two pattern matches
2013-03-22 01:12:38	<--	bos (~bos@107.39.180.40) has quit (Ping timeout: 245 seconds)
2013-03-22 01:12:41	genisage	It's a pattern match of the constructor
2013-03-22 01:12:51	madjestic	dang
2013-03-22 01:12:55	hpc	it's like
2013-03-22 01:13:01	hpc	frobnicate False = 15
2013-03-22 01:13:08	hpc	frobnicate True = 33.16
2013-03-22 01:13:19	hpc	except more complicated
2013-03-22 01:14:01	-->	dncr (~dncr@72.185.193.164) has joined #haskell
2013-03-22 01:14:30	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-22 01:14:33	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-22 01:14:37	madjestic	I am pretty sure that I read about that in LYAH, but my mind is blown anyways
2013-03-22 01:15:08	<--	opamp (opamp@37.250.122.92.bredband.tre.se) has quit (Ping timeout: 245 seconds)
2013-03-22 01:15:16	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 01:15:55	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has quit (Client Quit)
2013-03-22 01:16:15	<--	ulfdoz (~mary@p5B389F50.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-22 01:16:16	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-22 01:16:51	<--	cognominal (~cognomina@37.160.40.245) has quit (Ping timeout: 276 seconds)
2013-03-22 01:17:10	dncr	If f operates on arbitrarily large ByteStrings, how should I memoize it? Can I use a trie (like Data.MemoCombinators.bits does on integers)? Is Data.Trie too strict for this purpose?
2013-03-22 01:17:35	<--	refold (~gman@h-54-251.a258.priv.bahnhof.se) has quit (Quit: leaving)
2013-03-22 01:17:52	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Read error: Connection reset by peer)
2013-03-22 01:18:23	-->	cognominal (~cognomina@37.160.40.245) has joined #haskell
2013-03-22 01:19:00	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-22 01:19:32	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 246 seconds)
2013-03-22 01:20:32	-->	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has joined #haskell
2013-03-22 01:21:30	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 01:21:40	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 01:21:42	-->	LAMMJohn1on (~ja@host86-183-156-119.range86-183.btcentralplus.com) has joined #haskell
2013-03-22 01:22:05	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-22 01:22:21	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 01:22:34	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-22 01:22:36	genisage	can somebody explain why XDatatypeContexts is bad?
2013-03-22 01:22:38	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 01:23:16	c_wraith	the X isn't part of the name, it's just the command-line flag to specify a language extension
2013-03-22 01:23:25	c_wraith	DatatypeContexts is bad because it more or less does nothing.
2013-03-22 01:23:32	dmwit	genisage: It's not bad. It's just not good.
2013-03-22 01:23:45	dolio	There is no longer a reason to put contexts on a datatype, given how it works.
2013-03-22 01:23:54	monoidal	unlike GADT syntax, it's broken
2013-03-22 01:24:04	-->	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has joined #haskell
2013-03-22 01:24:05	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 01:24:12	genisage	Why isn't it good to be able to o something like data Ord a => Tree a = stuff
2013-03-22 01:24:19	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 260 seconds)
2013-03-22 01:24:27	dmwit	Because it doesn't do what the syntax would suggest it ought to do.
2013-03-22 01:24:28	c_wraith	Two reasons: the first is that it doesn't make anything easier
2013-03-22 01:24:52	c_wraith	The second is because it prevents creating trees for non-ord types of a, which still makes sense in some cases. (singleton trees, for instance)
2013-03-22 01:24:56	<--	dkasak (~dkasak@dh207-110-159.xnet.hr) has quit (Ping timeout: 252 seconds)
2013-03-22 01:25:06	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-03-22 01:25:14	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-22 01:25:18	<--	LAMMJohnson (~ja@user-5af43fd6.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-03-22 01:25:24	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 01:25:34	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 01:25:47	dmwit	Okay, so the real answer is like this: it doesn't let you omit "Ord a" from the context of things that munge "Tree a"s. Which is what you'd want it to do.
2013-03-22 01:25:53	-->	xpika (~jrg@1.152.153.192) has joined #haskell
2013-03-22 01:26:06	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 01:26:18	c_wraith	@ty M.singleton
2013-03-22 01:26:19	lambdabot	k -> a -> M.Map k a
2013-03-22 01:26:33	c_wraith	Notice how there's no Ord constraint on k in that function
2013-03-22 01:26:35	dmwit	That is, if you have a value of type "Tree a" and you pattern match on it to get some values of type "a", you *still* can't call compare or (<) or (>) on them.
2013-03-22 01:26:37	c_wraith	because it's not needed
2013-03-22 01:26:38	dmwit	So what's the point?
2013-03-22 01:26:41	-->	wyfrn_ (~wyfrn@p5B2BDD1D.dip.t-dialin.net) has joined #haskell
2013-03-22 01:27:25	monoidal	if you match on data Tree a where Node :: Ord a => a -> Tree a, you get the Ord instance
2013-03-22 01:27:29	-->	jcowan (~jcowan@mail.digitalkingdom.org) has joined #haskell
2013-03-22 01:27:48	genisage	What I thought it would be useful for was making sure you couldn't create a piece of data that wouldn't with the functions you had written.
2013-03-22 01:27:49	monoidal	i.e. you don't need to supply it in the type signature
2013-03-22 01:27:55	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-03-22 01:28:04	c_wraith	genisage: you don't need it to do that, though
2013-03-22 01:28:06	jcowan	I have some n00b questions; I'm about halfway through LYAH, and these are things that have come up in mind, more  "Why?" than "How?"  Is this the right place for them?
2013-03-22 01:28:15	monoidal	if you match on data Ord a => Tree a = Node a then you have to put Ord in the signature
2013-03-22 01:28:15	c_wraith	genisage: look at the type of singleton in Data.Map
2013-03-22 01:28:23	<--	gusto (~gusto@ppp-212-114-181-21.dynamic.mnet-online.de) has quit (Quit: leaving)
2013-03-22 01:28:27	shachaf	jcowan: Go ahead and ask your questions.
2013-03-22 01:28:28	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Quit: Lost terminal)
2013-03-22 01:28:35	c_wraith	genisage: it doesn't interfere with all the functions that put an Ord k constraint in
2013-03-22 01:28:43	c_wraith	genisage: instead, each function specifies what it needs
2013-03-22 01:28:47	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 01:29:29	dmwit	genisage: I sympathize with wanting to prevent the user from making Tree a values unless a is orderable. Unfortunately, the reason I sympathize is because later I want to assume that my Tree only contains orderable things.
2013-03-22 01:29:37	dmwit	genisage: The first part you get. The second part you don't.
2013-03-22 01:29:42	<--	wyfrn (~wyfrn@91.43.221.174) has quit (Ping timeout: 252 seconds)
2013-03-22 01:29:46	dmwit	The first part is useless on its own.
2013-03-22 01:29:51	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 276 seconds)
2013-03-22 01:30:08	-->	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has joined #haskell
2013-03-22 01:30:12	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-03-22 01:30:28	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 01:30:52	-->	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2013-03-22 01:31:22	dmwit	genisage: Another way to say this is: go ahead and use DatatypeContexts in an old build of GHC for a while and see if you still like it. =P
2013-03-22 01:31:26	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 246 seconds)
2013-03-22 01:31:26	genisage	I do get the second part. It just seemed like it would be easier to debug if you got an error as soon as the data was created, instead of waiting until a function tries to operate on it.
2013-03-22 01:31:50	dolio	The errors are always at compile time.
2013-03-22 01:31:53	<--	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Quit: emmanuelux)
2013-03-22 01:32:04	dmwit	genisage: Oh, by "get" I didn't mean "understand". I literally meant "get", as in, "DatatypeContexts guarantees the first but not the second".
2013-03-22 01:32:15	genisage	But the part of the program that generated it would be different
2013-03-22 01:32:31	jcowan	1) Either has symmetrically named constructors, yet is used asymmetrically. What's the story there?
2013-03-22 01:32:48	c_wraith	genisage: wait, runtime? No. Either way, the problem is caught at compile time.
2013-03-22 01:32:54	 *	timtom is happy because he just wrote his first working happstack+acid-state program
2013-03-22 01:32:57	shachaf	jcowan: What do you mean? That Right usually means success, and Left usually means failure?
2013-03-22 01:33:07	monoidal	genisage: essentially what datatype context does is require the context every time the type appears, that's all
2013-03-22 01:33:15	genisage	Yes, I know type errors are caught at compile time, but the line number would be different.
2013-03-22 01:33:41	c_wraith	So? The error message is still going to be "no instance (Blah Blah)"
2013-03-22 01:34:09	jcowan	I would have expected something like "data Either a b = Wrong a | Right b", or something with equally polarized names.
2013-03-22 01:34:29	monoidal	genisage: if you have a function that depends on the methods in the context, its type will be the same with and without DatatypeContexts
2013-03-22 01:34:36	shachaf	jcowan: Well, Either has a lot of uses.
2013-03-22 01:34:40	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-22 01:34:47	monoidal	genisage: if you have a function that does not depend on the methods, it will behave in the same way with or without the context
2013-03-22 01:34:49	 *	hackagebot hash 0.2 - Hashing tools  http://hackage.haskell.org/package/hash-0.2 (EdwardKmett)
2013-03-22 01:34:49	shachaf	Some of them are symmetric and some of them aren't. Left and Right don't assume anything.
2013-03-22 01:34:51	<--	tommd (~tommd@pdx.galois.com) has quit (Client Quit)
2013-03-22 01:34:55	monoidal	genisage: so there is completely no difference in behavior
2013-03-22 01:35:02	dmwit	jcowan: Sometimes, I use Either as a basic sum type, not as a Wrong or Right.
2013-03-22 01:35:05	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-22 01:35:07	jcowan	2) Is the quicksort algorithm presented in LYAH really a quicksort?  I cannot convince myself that it really has n log n time complexity when lazily implemented.
2013-03-22 01:35:17	jcowan	dmwit: Thanks
2013-03-22 01:35:25	genisage	Thanks for the explanations everybody.
2013-03-22 01:35:30	shachaf	jcowan: Is it the foo (x:xs) = filter (<= x) xs ++ [x] ++ filter (> x) xs?
2013-03-22 01:35:33	dmwit	jcowan: Most "quicksorts" in Haskell are not quicksort in the traditional sense.
2013-03-22 01:35:36	jcowan	Yes.
2013-03-22 01:35:39	-->	unK_ (~unknown@78.10.81.234) has joined #haskell
2013-03-22 01:35:42	<--	Xaratas (~UserNick@brln-4dbc1f7e.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-03-22 01:35:45	-->	darkness12345 (~darkness1@c-98-209-116-250.hsd1.mi.comcast.net) has joined #haskell
2013-03-22 01:35:45	shachaf	jcowan: That is not really quicksort. I wish people would stop spreading that rumour.
2013-03-22 01:35:51	<--	ncw (ncw@conference/pycon/x-ghhghtpphmldxhwl) has quit (Remote host closed the connection)
2013-03-22 01:36:04	dmwit	jcowan: However, it does have the usual n log n complexity.
2013-03-22 01:36:06	<--	dncr (~dncr@72.185.193.164) has quit (Quit: leaving)
2013-03-22 01:36:09	shachaf	jcowan: Er, I fortgot the recursive sort calls. :-)
2013-03-22 01:36:18	monoidal	dmwit: sort [1..n]?
2013-03-22 01:36:25	dmwit	average time
2013-03-22 01:36:32	shachaf	dmwit: Does it really?
2013-03-22 01:36:40	c_wraith	yeah, it does
2013-03-22 01:36:46	c_wraith	just *terrible* constant factors
2013-03-22 01:37:12	c_wraith	also, you really should use partition instead of a pair of filters
2013-03-22 01:37:16	dmwit	https://en.wikipedia.org/wiki/Tree_sort
2013-03-22 01:37:19	c_wraith	that saves you one O(n) pass right up front
2013-03-22 01:37:23	dmwit	O(n^2) worst case, O(n log n) average case
2013-03-22 01:37:27	madjestic	http://hpaste.org/84450 I get an error, if I call add [1..5], instead of add (List [1..5]), as ghc suggested.  What am I missing?
2013-03-22 01:37:38	c_wraith	Which is a good constant factor
2013-03-22 01:37:41	jcowan	Also, the choice of pivot is known to suck, but lots of quicksorts have that problem.
2013-03-22 01:37:54	jcowan	I would have expected a mergesort as optimal for linked lists.
2013-03-22 01:38:03	shachaf	jcowan: Choosing the first element is more justified with linked lists. :-)
2013-03-22 01:38:08	dmwit	jcowan: I believe GHC's Data.List.sort is mergesort.
2013-03-22 01:38:16	hiptobecubic	yes
2013-03-22 01:38:18	dmwit	This is also good for laziness in a way that quicksort is not.
2013-03-22 01:38:18	-->	dkasak (~dkasak@dh207-45-248.xnet.hr) has joined #haskell
2013-03-22 01:38:21	-->	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has joined #haskell
2013-03-22 01:38:32	monoidal	madjestic: your function takes a value of type Add a, while you give it [a]. they are different types
2013-03-22 01:38:33	c_wraith	yeah, mergesort is nicely lazy, assume your merge is head-biased
2013-03-22 01:38:36	ab9rf	merge sort is usually the best general sort for large data sets.
2013-03-22 01:38:38	monoidal	madjestic: therefore the function cannot be used
2013-03-22 01:39:09	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 01:39:15	jcowan	3) How does "deriving" work?  It seems like magic.
2013-03-22 01:39:28	c_wraith	Data.List.sort is also bottom-up. I suspect all performance-oriented mergesorts are, but it's not all that publicized
2013-03-22 01:39:36	ab9rf	i have to admit that i think stack-sort is fairly amusing
2013-03-22 01:39:43	<--	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-22 01:39:49	 *	hackagebot hashable-extras 0.1 - Higher-rank Hashable  http://hackage.haskell.org/package/hashable-extras-0.1 (EdwardKmett)
2013-03-22 01:39:54	ab9rf	but so far the only known working implementation is in javascript
2013-03-22 01:40:00	monoidal	jcowan: it has special cases for several (7?) classes, built-in into the compiler
2013-03-22 01:40:04	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 01:40:06	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 01:40:14	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 01:40:18	<--	darkness12345 (~darkness1@c-98-209-116-250.hsd1.mi.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-22 01:40:24	dmwit	jcowan: Can you say what about it seems magical?
2013-03-22 01:40:57	dmwit	"How does the compiler {know,do,guess,implement} X?" or something like that
2013-03-22 01:41:12	jcowan	Just so.
2013-03-22 01:41:21	-->	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has joined #haskell
2013-03-22 01:41:32	dmwit	That was supposed to be a mad-lib. =)
2013-03-22 01:41:44	monoidal	jcowan: it has a fixed template. say, you derive Eq and your datatype is data A = X Int | Y | Z Bool
2013-03-22 01:42:15	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-22 01:42:20	geekosaur	the basic derivable types are fully documented in the haskell language report
2013-03-22 01:42:26	monoidal	jcowan: then it generates code (X a == X b) = (a == b); (Y == Y) = True; (Z a == Z b) = (a == b); (_ == _) = False
2013-03-22 01:42:37	monoidal	it's mechanical and hardwired
2013-03-22 01:42:37	geekosaur	it's a "mechanical" operation, no magic about it
2013-03-22 01:42:47	madjestic	monoidal: http://hpaste.org/84453  What could hpc mean than?
2013-03-22 01:42:57	geekosaur	newtype deriving is not documented there but is equally mechanical
2013-03-22 01:43:05	-->	ncw (ncw@conference/pycon/x-fcnhactfavdoshnq) has joined #haskell
2013-03-22 01:43:22	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 01:43:35	 *	geekosaur does not understand the question
2013-03-22 01:43:47	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-22 01:43:54	dmwit	Perhaps it seems magical that GHC can derive any class. This is because GHC can not derive any class.
2013-03-22 01:44:06	geekosaur	there is a type there, defined in terms of two patterns:  data Add a = Single a | List [a]
2013-03-22 01:44:12	dmwit	It can only derive Eq, Ord, Show, Read and a handful of others in special cases.
2013-03-22 01:44:14	monoidal	madjestic: I don't know
2013-03-22 01:44:19	<--	DeadPanda (~Brett@host-92-28-91-149.as13285.net) has quit (Read error: Connection reset by peer)
2013-03-22 01:44:23	jcowan	4) Why are guards thought to be better style than if-then-else chains?
2013-03-22 01:44:27	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 01:44:28	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 01:44:30	<--	ncw (ncw@conference/pycon/x-fcnhactfavdoshnq) has quit (Remote host closed the connection)
2013-03-22 01:44:32	<--	gentleben (~gentleben@208.74.182.4.static.etheric.net) has left #haskell
2013-03-22 01:44:35	dmwit	jcowan: There's no accounting for taste.
2013-03-22 01:44:38	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 01:44:41	dmwit	next question
2013-03-22 01:44:50	<--	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has quit (Quit: The garbage collector got me)
2013-03-22 01:44:51	 *	jcowan snorks
2013-03-22 01:44:59	geekosaur	given these patterns, you can now create values of the type by dupicating the pattern (someA = Single 5; anotherA = List [3..6])
2013-03-22 01:45:13	-->	ncw (ncw@conference/pycon/x-iptpeyrhktppnext) has joined #haskell
2013-03-22 01:45:15	monoidal	jcowan: they're more compact
2013-03-22 01:45:38	genisage	I find guard more readable and easier to organize.
2013-03-22 01:45:42	jcowan	5) How can pure (i.e. non-IO) functions call "error", when it doesn't return a proper value?
2013-03-22 01:45:49	-->	predator217 (~predator1@p50804E41.dip.t-dialin.net) has joined #haskell
2013-03-22 01:45:49	geekosaur	or you can recognize these values by their patterns: add (Single a) = a; add (List as) = foldl' (+) as
2013-03-22 01:46:00	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-03-22 01:46:01	dmwit	jcowan: That's a bit awkward, isn't it?
2013-03-22 01:46:02	arkeet	jcowan: the same way pure functions can loop indefinitely.
2013-03-22 01:46:17	ski	"In Haskell 98, the only classes that may appear in the deriving clause are the standard classes `Eq', `Ord', `Enum', `Ix', `Bounded', `Read', and `Show'." <http://www.haskell.org/ghc/docs/latest/html/users_guide/deriving.html#deriving-typeable>
2013-03-22 01:46:21	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-22 01:46:22	dmwit	?google tackling the awkward squad
2013-03-22 01:46:23	lambdabot	http://research.microsoft.com/~simonpj/Papers/marktoberdorf/mark.pdf.gz
2013-03-22 01:46:25	monoidal	jcowan: usually error means programming error
2013-03-22 01:46:27	dmwit	jcowan: Might like that paper.
2013-03-22 01:46:56	dmwit	...specifically the section on exceptions
2013-03-22 01:47:00	ski	"Specification of Derived Instances" <http://www.haskell.org/onlinereport/haskell2010/haskellch11.html#x18-18200011>,"Deriving Instances of Ix" <http://www.haskell.org/onlinereport/haskell2010/haskellch19.html#x27-22700019.2>
2013-03-22 01:47:58	jcowan	I tried it but found it too hairy for me at this stage.
2013-03-22 01:48:02	-->	jonaias (~jonaias@177.102.80.97) has joined #haskell
2013-03-22 01:48:19	geekosaur	madjestic, did you follow what I said above?
2013-03-22 01:48:21	timtom	How do you guys organize your code when you have lots of record types? Do you create a separate module for each record type?
2013-03-22 01:48:27	-->	plutoniix (~plutoniix@ppp-61-90-18-72.revip.asianet.co.th) has joined #haskell
2013-03-22 01:48:36	madjestic	hpc, I don't think I fully understand you, when you said: "we might as well dispense with any illusion of polymorphism and say  add [1..5] and add [5]
2013-03-22 01:48:37	dmwit	jcowan: That's a shame, as it has several pages outlining a very clear, concise argument for Haskell's exception mechanism.
2013-03-22 01:48:43	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-22 01:48:52	jcowan	6) I don't understand what minBound and maxBound really are.
2013-03-22 01:48:53	<--	predator117 (~predator1@p50804F5E.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-22 01:48:54	 *	dmwit encourages a second attempt
2013-03-22 01:48:55	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-22 01:49:02	jcowan	dmwit: I will tackle it a gain then
2013-03-22 01:49:11	dmwit	jcowan: minBound and maxBound are constants of polymorphic type corresponding to the minimal and maximal elements of that type.
2013-03-22 01:49:13	-->	wei2912 (wei2912@unaffiliated/wei2912) has joined #haskell
2013-03-22 01:49:17	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 01:49:19	monoidal	jcowan: there's a class called Bounded and it contains two members, minBound and maxBound
2013-03-22 01:49:26	ski	also <http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html> may be interesting
2013-03-22 01:49:38	ski	jcowan : see above links for "deriving"
2013-03-22 01:49:43	dmwit	jcowan: Alternately: minBound is a mapping from types that implement the Bounded typeclass to a value of that type.
2013-03-22 01:49:46	monoidal	jcowan: you can declare any type to be an instance of Bounded by giving values for minBound and maxBound
2013-03-22 01:49:48	geekosaur	madjestic, hpc meant there is no real justification for handling the case of a single item separately from a list; just pass a single-element list
2013-03-22 01:49:56	dmwit	(and likewise for maxBound)
2013-03-22 01:50:10	hiptobecubic	> minBound :: Float
2013-03-22 01:50:12	lambdabot	  No instance for (GHC.Enum.Bounded GHC.Types.Float)
2013-03-22 01:50:12	lambdabot	   arising from a use of...
2013-03-22 01:50:21	hiptobecubic	> minBound :: Char
2013-03-22 01:50:22	geekosaur	so now add always takes a list
2013-03-22 01:50:22	lambdabot	  '\NUL'
2013-03-22 01:50:35	geekosaur	it doesn't have to have a special variant that takes a non-list
2013-03-22 01:51:14	ski	jcowan : if all guards of a defining equation fail, the next defining equation is tried. with `if'-`then'-`else', you have already committed to the current defining equation
2013-03-22 01:51:34	<--	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-03-22 01:51:39	dmwit	ski++ for this juicy tidbit that I always somehow manage to forget
2013-03-22 01:51:41	madjestic	geekosaur: yes, I did.  However my question was concerning that line: we might as well dispense with any illusion of polymorphism and say add [1..5] and add [5].  That is I understood it as:  instead of add (List [1..5]) - it should be possible to say: add [1..5]
2013-03-22 01:51:44	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-03-22 01:51:51	geekosaur	no
2013-03-22 01:51:57	monoidal	madjestic: note that foldl' (+) [x] == x
2013-03-22 01:52:08	geekosaur	he was talking about the one where we can say add 5 or add [1..5]
2013-03-22 01:52:54	geekosaur	the add (List xs) vs. add (Single x) is not polymorphic; it always has the same type, but values can take different forms indicated by the constructor used
2013-03-22 01:53:13	geekosaur	nevertheless all such values are still of type Add a
2013-03-22 01:54:02	madjestic	geekosaur: so how can I get to being able to do: add 5 -- or -- add [1..5]?
2013-03-22 01:54:15	<--	fenton_travers (~fenton@S0106001839ecd155.vc.shawcable.net) has quit (Quit: WeeChat 0.4.0)
2013-03-22 01:54:33	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-22 01:54:33	<--	samedhi (~stephen@208.70.28.214) has quit (Quit: samedhi)
2013-03-22 01:54:40	ski	jcowan : it may or may not confuse you that `minBound' and `maxBound' are overloaded on the "return type" (in this case, they are not functions, so that's the whole type)
2013-03-22 01:54:49	 *	hackagebot log-domain 0.5 - Log-domain arithmetic  http://hackage.haskell.org/package/log-domain-0.5 (EdwardKmett)
2013-03-22 01:54:50	ski	> read "123" :: Int
2013-03-22 01:54:52	lambdabot	  123
2013-03-22 01:54:52	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-22 01:54:53	ski	> read "123" :: Bool
2013-03-22 01:54:54	lambdabot	  *Exception: Prelude.read: no parse
2013-03-22 01:55:13	ski	`read' is another operation overloaded on the return type (only)
2013-03-22 01:55:33	<--	schlicht_ (~fl@g231184107.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-03-22 01:55:53	ski	> 1 + read "123"
2013-03-22 01:55:54	lambdabot	  124
2013-03-22 01:55:59	ski	> not (read "123")
2013-03-22 01:56:00	lambdabot	  *Exception: Prelude.read: no parse
2013-03-22 01:56:09	geekosaur	madjestic, you were told that already? go read your backlog starting at "class AddClass"
2013-03-22 01:56:38	-->	HugoDaniel (~hugo@bl5-20-201.dsl.telepac.pt) has joined #haskell
2013-03-22 01:56:41	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-22 01:56:46	geekosaur	you were also told why it's a really bad idea, but I get the impression you are too wedded to this little hack to care just how badly you can shoot yourself in the foot with it, you just want that hole in your foot
2013-03-22 01:56:49	<--	iago (~iago@a213-22-41-239.cpe.netcabo.pt) has quit (Quit: Leaving)
2013-03-22 01:56:51	dmwit	> not (read "True")
2013-03-22 01:56:53	lambdabot	  False
2013-03-22 01:57:15	jcowan	ski: Yes, I think that's what confused me.
2013-03-22 01:57:45	ski	jcowan : btw, `error' doesn't return a value at all (just like an infinite loop doesn't return any value)
2013-03-22 01:57:51	<--	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (Quit: Leaving)
2013-03-22 01:58:27	madjestic	geekosaur: I did not ralise that the last bit concerned the part, related to that.  I percieved that the data stracture was a preferable alternative to the inital sollution
2013-03-22 01:58:48	jcowan	Right.  So my mental model is that there is a reduction machine, and "error" jams the machine, and this is safe because there is no way back, so it is always deterministic.  But this breaks down because there might be more than one call to error, and depending on the  exact implementation of laziness you might get any (all?) of them.
2013-03-22 01:58:50	ski	however, `error', as well as pattern-match failure (or last guard failing, with no more equation to try) results in aborting computation
2013-03-22 01:59:31	dmwit	jcowan: That is correct, and in fact the compiler is allowed to choose at will between any exceptions it could throw in a lazy evaluation.
2013-03-22 01:59:31	 *	jcowan nods.
2013-03-22 01:59:34	monoidal	jcowan: indeed, it's called imprecise exception
2013-03-22 01:59:51	dmwit	jcowan: My most famous StackOverflow question is the result of exactly this, you might like it.
2013-03-22 01:59:54	 *	dmwit goes hunting
2013-03-22 01:59:59	ski	jcowan : yes, the idea there is to claim that we get the set of all errors the code could possibly raise -- and then demonic nondeterminism at the I/O level indeterministically picks one of them
2013-03-22 02:00:03	monoidal	jcowan: for example, error "X" + error "Y" can give you error "X" or "Y", semantics does not precise which one
2013-03-22 02:00:09	dmwit	http://stackoverflow.com/q/11070690/791604
2013-03-22 02:00:29	jcowan	Does that even make sense?  What is the type of error "X"?
2013-03-22 02:00:35	dmwit	:t error "X"
2013-03-22 02:00:37	lambdabot	a
2013-03-22 02:00:40	ski	(in practice, implementation details such as which order things happened to evaluate will determine which one you get -- however, optimizations are free to change which one you get)
2013-03-22 02:01:05	jcowan	So a does not implement Num (as such), so there should be no way to even get that past the compiler.
2013-03-22 02:01:18	jcowan	Or am I confused?
2013-03-22 02:01:23	dmwit	Integer implements Num, and a can unify with Integer.
2013-03-22 02:01:25	monoidal	the type of error "X" + errory "Y" is Num a => a
2013-03-22 02:01:34	-->	leoncamel (~leoncamel@219.143.150.16) has joined #haskell
2013-03-22 02:01:37	cmccann_	the type will default to Integer, yes
2013-03-22 02:01:38	monoidal	numeric typeclasses usually default to Int
2013-03-22 02:01:43	monoidal	or Integer
2013-03-22 02:01:45	dmwit	(Indeed, "a" unifies with "Num a => a".)
2013-03-22 02:01:45	--	cmccann_ is now known as cmccann
2013-03-22 02:01:51	jcowan	Mm, yes, I see that now
2013-03-22 02:01:52	dmwit	:t error "X" :: Num a => a
2013-03-22 02:01:54	lambdabot	Num a => a
2013-03-22 02:02:15	ski	this is known as "imprecise exceptions". see "A semantics for imprecise exceptions" by Simon Peyton Jones,Alastair Reid,Tony Hoare,Simon Marlow,Fergus Henderson in 1999 at <http://research.microsoft.com/en-us/um/people/simonpj/papers/imprecise-exn.htm>
2013-03-22 02:02:21	jcowan	So if a function never returns a value, its type signature can have variables on the right that don't appear on the left?
2013-03-22 02:02:30	dmwit	correct
2013-03-22 02:02:44	dmwit	assuming "right" and "left" refers to the sides of "->" they appear on
2013-03-22 02:02:49	jcowan	Yes
2013-03-22 02:03:03	cmccann	:t const undefined
2013-03-22 02:03:04	lambdabot	b -> a
2013-03-22 02:03:11	<--	dEPy (~dEPY@46-150-62-58.cable.teleing.net) has quit
2013-03-22 02:03:15	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-22 02:03:20	dmwit	:t let neverReturns n = neverReturns (n+1) in neverReturns -- for example
2013-03-22 02:03:22	lambdabot	Num a => a -> t
2013-03-22 02:03:30	dmwit	:t let neverReturns = neverReturns in neverReturns -- for another
2013-03-22 02:03:30	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-22 02:03:32	lambdabot	t
2013-03-22 02:03:58	ski	jcowan : occasionally, you can catch infinite loops in code by noticing the inferred type has type variables in the return type not occuring otherwise in the type
2013-03-22 02:04:06	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 02:04:12	monoidal	jcowan: conversely, if the RHS of "->" is some variable that is not on the left hand side, it would have to arise from nothing; so the function must hang or give error
2013-03-22 02:04:15	ski	@type forever
2013-03-22 02:04:16	lambdabot	Monad m => m a -> m b
2013-03-22 02:04:25	jcowan	Umph.
2013-03-22 02:04:39	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-22 02:04:41	fizbin	:t lmap
2013-03-22 02:04:42	lambdabot	Profunctor p => (a -> b) -> p b c -> p a c
2013-03-22 02:04:50	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-22 02:04:51	 *	hackagebot pipes 3.2.0 - Compositional pipelines  http://hackage.haskell.org/package/pipes-3.2.0 (GabrielGonzalez)
2013-03-22 02:05:03	cmccann	similarly, a type like "a -> [b]" only has one non-errory result possible
2013-03-22 02:05:15	ski	the `b' here in the return type indicates that the resulting action doesn't yield a final value (but the effects of the input action are done repeatedly, ignoring *its* result (of type `a'))
2013-03-22 02:05:22	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-22 02:05:26	niteria	@hoogle TimeoutManager
2013-03-22 02:05:26	lambdabot	No results found
2013-03-22 02:05:30	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 02:05:36	monoidal	jcowan: also note that the definition "let x = x" gives x :: a
2013-03-22 02:06:11	ski	e.g. if you have `forever (print 945)', then `print 945' has type `IO ()', and the whole action will have type `IO a', for any type `a' that you prefer/like
2013-03-22 02:06:25	dmwit	?free a -> [b]
2013-03-22 02:06:25	lambdabot	Extra stuff at end of line
2013-03-22 02:06:27	<--	ncw (ncw@conference/pycon/x-iptpeyrhktppnext) has quit (Remote host closed the connection)
2013-03-22 02:06:31	dmwit	?free foo :: a -> [b]
2013-03-22 02:06:31	lambdabot	$map g . foo = foo . f
2013-03-22 02:06:47	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 02:07:15	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 260 seconds)
2013-03-22 02:07:43	dmwit	This says: the output of foo is exactly the same, no matter what function you map over it.
2013-03-22 02:08:18	dmwit	And in particular this means foo outputs [], by choosing a function like (+1) that never outputs exactly the same thing it gets as input.
2013-03-22 02:08:36	niteria	?free i :: a -> a
2013-03-22 02:08:37	lambdabot	f . i = i . f
2013-03-22 02:08:44	ski	@free foo :: Int -> a
2013-03-22 02:08:44	lambdabot	f . foo = foo
2013-03-22 02:08:56	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-03-22 02:08:57	arkeet	@free x ::
2013-03-22 02:08:57	lambdabot	Extra stuff at end of line
2013-03-22 02:08:58	arkeet	@free x :: a
2013-03-22 02:08:58	lambdabot	f x = x
2013-03-22 02:09:15	arkeet	heh
2013-03-22 02:09:26	<--	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-22 02:09:29	arkeet	only if x is strict.
2013-03-22 02:09:32	arkeet	er, f.
2013-03-22 02:10:02	dmwit	If the equation is well-typed, f need not be strict.
2013-03-22 02:10:18	dmwit	um
2013-03-22 02:10:18	-->	Jesin (~Jessin_@4.59.138.56) has joined #haskell
2013-03-22 02:10:19	niteria	? g :: [a] -> (a -> [b]) -> [b]
2013-03-22 02:10:19	dmwit	j/k
2013-03-22 02:10:28	niteria	?free g :: [a] -> (a -> [b]) -> [b]
2013-03-22 02:10:28	lambdabot	$map h . k = p . f => $map h (g xs k) = g ($map f xs) p
2013-03-22 02:10:35	 *	ski . o O ( "All conversations eventually degenerate to bot abuse." )
2013-03-22 02:11:01	monoidal	good night
2013-03-22 02:11:08	<--	monoidal (~chatzilla@212-87-13-67.sds.uw.edu.pl) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-22 02:11:09	ski	night, monoidal
2013-03-22 02:11:43	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-03-22 02:13:11	fizbin	When I was complaining here n what use arrows are, and why one actually wants them someone suggested I go read http://homepages.inf.ed.ac.uk/wadler/topics/monads.html#arrows-and-idioms
2013-03-22 02:13:13	ski	jcowan : any more comment, question or request for clarification ?
2013-03-22 02:13:28	<--	apucacao (~apucaca@12.250.157.102) has quit (Quit: apucacao)
2013-03-22 02:13:45	genisage	what are you asking lambdabot with free?
2013-03-22 02:13:50	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-22 02:13:52	ski	@help free
2013-03-22 02:13:53	lambdabot	free <ident>. Generate theorems for free
2013-03-22 02:14:04	dmwit	genisage: free takes a type and generates a theorem about all inhabitants of that type
2013-03-22 02:14:14	genisage	Thanks
2013-03-22 02:14:15	fizbin	Unfortunately, I clearly don't have the background for that paper - is there anyone here who's read it who can point me at something that will give me the proper background for section 2 ?
2013-03-22 02:15:15	fizbin	Section 2 is glossing over what must be standard notation in PL papers, but as I don't read PL papers on a regular basis, I don't know what that notation means.
2013-03-22 02:15:45	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 02:15:53	ski	genisage : "Theorems for free!" by Philip Wadler in 1989-09 at <http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html#free>
2013-03-22 02:16:18	madjestic	geekosaur: I read your explanation, however I do not understand why is it such a bad thing to do in the context that I demonstrated (computing a product of a value, which may be either a list of elements or a single element that's not a list)
2013-03-22 02:16:23	ski	genisage : the generated theorem holds because of parametric morphism, can be derived from the type alone
2013-03-22 02:16:34	-->	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has joined #haskell
2013-03-22 02:16:34	ski	@free listFun :: [a] -> [a]
2013-03-22 02:16:34	lambdabot	$map f . listFun = listFun . $map f
2013-03-22 02:16:47	geekosaur	madjestic, because you're giving the compiler license to do unexpected things with type inference
2013-03-22 02:17:02	geekosaur	the compiler is much more clever than you are, and this can lead to unpleasant surprises
2013-03-22 02:17:12	ski	this says that it doesn't matter if you apply `listFun' to a list, and then `map' a function `f' on each of the elements, or do it in the other order : the result will be the same
2013-03-22 02:17:35	dmwit	geekosaur: That is a great way to put it.
2013-03-22 02:17:49	ski	so, it's saying that any function with the type of `listFun' must be "agnostic" in the list elements : it can't look at them, it can't do something special if their type is `Int', &c.
2013-03-22 02:18:12	ski	it may just pass the elements around, and perhaps duplicate and/or discard references to them
2013-03-22 02:18:25	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-03-22 02:18:34	-->	ncw (ncw@conference/pycon/x-xqgubvdoxsvxlinn) has joined #haskell
2013-03-22 02:18:54	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-22 02:19:07	ski	this is a great boon to reasoning about code, especially higher-order code
2013-03-22 02:19:09	-->	rmarianski (~rmariansk@mail.marianski.com) has joined #haskell
2013-03-22 02:19:20	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 256 seconds)
2013-03-22 02:19:53	jcowan	nope, done, thanks all.
2013-03-22 02:19:57	<--	jcowan (~jcowan@mail.digitalkingdom.org) has left #haskell ("Leaving")
2013-03-22 02:20:00	ski	if you have `map :: (a -> b) -> [a] -> [b]', then you already know from the type alone that the only way `map' may actually use the elements of type `a' is by passing them to the argument function -- and that's the only way it may get the `b' elements from
2013-03-22 02:20:18	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 256 seconds)
2013-03-22 02:21:53	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-22 02:21:56	madjestic	geekosaur: I still want to do that for the sake of the excercise
2013-03-22 02:22:31	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 02:22:37	geekosaur	madjestic, specifically, if it sees something which was actually a typo or mistake, but it can use AddClass to make it make some weird kind of sense, it will do so. and the result is likely to be either an unexpected error somewhere else when it can't make that work elsewhere, or possibly a program which compiles but produces bizarre results. I've had both happen when I wasn't careful with typeclasses
2013-03-22 02:22:41	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 02:22:46	<--	Eduard_Munteanu (~Eduard_Mu@188.25.7.16) has quit (Ping timeout: 240 seconds)
2013-03-22 02:22:52	madjestic	it's not like a giant lazer will scorch the Earth if I do that wrong
2013-03-22 02:22:54	ski	madjestic : hm, how do you know the list isn't actually a list of lists ?
2013-03-22 02:23:09	no-n	what's the prefix for base 2?
2013-03-22 02:23:16	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 02:23:40	dmwit	no-n: "bi"?
2013-03-22 02:23:45	madjestic	ski: because I control the context, for the sake of the excercise
2013-03-22 02:23:52	dmwit	or, what does prefix mean?
2013-03-22 02:24:07	no-n	0x is for base 16
2013-03-22 02:24:09	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-22 02:24:14	dmwit	Ah, there isn't one, sadly.
2013-03-22 02:24:17	no-n	ah
2013-03-22 02:24:32	cmccann	0b would make sense
2013-03-22 02:24:32	dmwit	You should make a Haskell' proposal, I'd love to see binary-literal syntax and it should be a harmless addition.
2013-03-22 02:24:35	dmwit	yes
2013-03-22 02:24:41	dmwit	gcc allows 0b sometimes, I think
2013-03-22 02:24:43	no-n	ya, 0b is in python
2013-03-22 02:24:44	dmwit	with appropriate flags
2013-03-22 02:24:46	no-n	but not C
2013-03-22 02:24:54	cmccann	yeah, I thought I'd seen it elsewhere
2013-03-22 02:25:09	madjestic	geekosaur: right.  I see that there are good reasons to do certain things in a certain way
2013-03-22 02:25:09	cmccann	I also endorse it as a proposal
2013-03-22 02:25:14	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 02:25:18	no-n	indeed
2013-03-22 02:25:29	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-22 02:25:55	tromp	i'm all for binary
2013-03-22 02:25:57	no-n	we could start an online petition :)
2013-03-22 02:26:12	ski	@hoogle Num a => ReadS a
2013-03-22 02:26:12	lambdabot	Numeric readDec :: Num a => ReadS a
2013-03-22 02:26:12	lambdabot	Numeric readHex :: Num a => ReadS a
2013-03-22 02:26:12	lambdabot	Numeric readOct :: Num a => ReadS a
2013-03-22 02:26:15	ski	@type readInt
2013-03-22 02:26:16	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 02:26:17	lambdabot	Num a => a -> (Char -> Bool) -> (Char -> Int) -> ReadS a
2013-03-22 02:26:20	ski	> readInt 2 (`elem` "01") digitToInt "1011"
2013-03-22 02:26:21	lambdabot	  [(11,"")]
2013-03-22 02:26:21	no-n	http://www.change.org
2013-03-22 02:26:30	<--	lcfrs (~lcfrs@8.25.197.25) has quit (Remote host closed the connection)
2013-03-22 02:26:30	aavogt	http://hackage.haskell.org/package/binary-literal-qq
2013-03-22 02:26:32	ski	no-n ^
2013-03-22 02:26:35	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-22 02:26:37	dmwit	> readBin "23423"
2013-03-22 02:26:38	lambdabot	  Not in scope: `readBin'
2013-03-22 02:26:39	lambdabot	 Perhaps you meant `readLn' (imported from Prelude)
2013-03-22 02:26:52	no-n	thanks
2013-03-22 02:26:53	dmwit	no-n: Haskell' proposals *are* online petitions.
2013-03-22 02:26:58	dmwit	Except with a chance of actually doing something.
2013-03-22 02:27:02	<--	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit (Client Quit)
2013-03-22 02:27:03	no-n	dmwit: ah. where are they?
2013-03-22 02:27:10	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-22 02:27:24	dmwit	Google for "haskell prime proposal"?
2013-03-22 02:27:58	dmwit	http://hackage.haskell.org/trac/haskell-prime/wiki/Process
2013-03-22 02:28:09	ski	> chr 0o033  -- octal
2013-03-22 02:28:10	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Quit: Disappears in a puff of smoke)
2013-03-22 02:28:10	<--	cognominal (~cognomina@37.160.40.245) has quit (Ping timeout: 256 seconds)
2013-03-22 02:28:11	lambdabot	  '\ESC'
2013-03-22 02:28:36	<--	HugoDaniel (~hugo@bl5-20-201.dsl.telepac.pt) has quit (Quit: Lost terminal)
2013-03-22 02:28:54	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 264 seconds)
2013-03-22 02:28:55	ski	> 0o33
2013-03-22 02:28:57	lambdabot	  27
2013-03-22 02:28:57	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 02:29:03	geekosaur	> 0b10101
2013-03-22 02:29:05	lambdabot	  Not in scope: `b10101'
2013-03-22 02:29:09	geekosaur	oh well
2013-03-22 02:29:27	-->	cognominal (~cognomina@37.160.35.207) has joined #haskell
2013-03-22 02:29:30	dmwit	Maybe in Haskell 2022!
2013-03-22 02:30:06	ski	dmwit,cmccann : how about something like <http://www.erlang.org/doc/programming_examples/bit_syntax.html> ?
2013-03-22 02:30:24	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 02:30:53	cmccann	ski: sounds potentially useful but a bit elaborate
2013-03-22 02:31:15	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 256 seconds)
2013-03-22 02:31:33	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-22 02:31:38	dmwit	Am I missing something?
2013-03-22 02:31:42	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-22 02:31:50	dmwit	Does this discuss a facility for base-2 numbers somewhere?
2013-03-22 02:32:17	ski	@hackage BitSyntax
2013-03-22 02:32:17	lambdabot	http://hackage.haskell.org/package/BitSyntax
2013-03-22 02:32:28	tromp	but if you have base 2, 4, 8, and 16, shouldnt you do base 4 as well?
2013-03-22 02:32:43	dmwit	0q3302
2013-03-22 02:32:46	<--	v_ (~v@61.173.89.166) has quit (Ping timeout: 240 seconds)
2013-03-22 02:32:47	tromp	(uhm, meant leave out 4 in first list)
2013-03-22 02:33:05	tromp	ah yes, quaternary
2013-03-22 02:33:05	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 02:33:29	geekosaur	nybbles!
2013-03-22 02:33:51	ab9rf	why not do base 32 as well?
2013-03-22 02:34:46	ski	hm, both Prolog and Erlang allow number literals in bases between `2' and `36'
2013-03-22 02:35:00	 *	cmccann votes for base 91
2013-03-22 02:35:05	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-22 02:35:13	<--	bru` (~bruno`@4077.rez-gif.supelec.fr) has quit (Read error: Operation timed out)
2013-03-22 02:35:20	ab9rf	why only 91?
2013-03-22 02:35:29	cmccann	why not?
2013-03-22 02:35:32	cmccann	it's a good number.
2013-03-22 02:35:37	geekosaur	thing is, binary and hex are very well established, octal is still useful for working with unix constants from the minicomputer era, but the last nybble-based cpu I recall seeing was only used in hand calculators
2013-03-22 02:35:49	ab9rf	there's 94 printable nonblank characters in 7-bit ascii :)
2013-03-22 02:36:10	<--	dented42 (~dented42@opengroove.org) has quit (Ping timeout: 260 seconds)
2013-03-22 02:36:23	<--	Jesin (~Jessin_@4.59.138.56) has quit (Ping timeout: 245 seconds)
2013-03-22 02:36:26	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 02:36:33	cmccann	94 has entirely too many factors. not awkward enough.
2013-03-22 02:36:36	tromp	yeah, but you need to be self delimiting too
2013-03-22 02:36:36	geekosaur	but if you really want to be silly, at least some versions of 'dc' let you use arbitrary integral bases >= 2
2013-03-22 02:36:40	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-22 02:37:00	cmccann	actually, wait. I can't arithmetic in my head.
2013-03-22 02:37:00	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-22 02:37:05	cmccann	I guess 94 would be ok.
2013-03-22 02:37:15	geekosaur	cmccann, we can go back to babylonia, base 60
2013-03-22 02:37:29	tromp	base 4 would make geneticists happy
2013-03-22 02:37:50	tromp	although they'd want to use ACGT as digits
2013-03-22 02:38:06	 *	ski . o O ( <http://en.wikipedia.org/wiki/Golden_ratio_base>,<http://en.wikipedia.org/wiki/Fibonacci_coding> )
2013-03-22 02:38:37	-->	xyxy (~hrn@host188.201-252-147.telecom.net.ar) has joined #haskell
2013-03-22 02:39:26	-->	Nhasc (~Nhasc@172.Red-83-32-147.dynamicIP.rima-tde.net) has joined #haskell
2013-03-22 02:39:43	<--	dmwit (~dmwit@pool-71-175-247-206.phlapa.east.verizon.net) has quit (Quit: system update time, pray for me LOL)
2013-03-22 02:39:47	ski	0dnaACGT
2013-03-22 02:39:57	-->	glguy_ (~textual@unaffiliated/glguy) has joined #haskell
2013-03-22 02:40:09	hpaste	heath pasted “failure to install cabal-dev” at http://hpaste.org/84454
2013-03-22 02:40:10	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-22 02:40:20	ski	(of course also a `0rnaACGU')
2013-03-22 02:40:24	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-22 02:40:48	cmccann	pf, uracil.
2013-03-22 02:40:50	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Ping timeout: 260 seconds)
2013-03-22 02:40:59	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-22 02:41:29	geekosaur	.oO (ur cilly too)
2013-03-22 02:41:42	cmccann	heh
2013-03-22 02:43:20	-->	dmwit (~dmwit@pool-71-175-247-206.phlapa.east.verizon.net) has joined #haskell
2013-03-22 02:43:32	<--	Nhasc (~Nhasc@172.Red-83-32-147.dynamicIP.rima-tde.net) has quit (Quit: Saliendo)
2013-03-22 02:43:37	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-22 02:44:39	<--	sublimepua (~sublimepu@kytetop.wireless.rit.edu) has quit (Quit: leaving)
2013-03-22 02:45:34	-->	v_ (~v@114.112.255.154) has joined #haskell
2013-03-22 02:45:59	<--	Testos (User@109.64.163.95) has quit (Ping timeout: 256 seconds)
2013-03-22 02:47:28	hiptobecubic	. o O ( When did this get so popular? )
2013-03-22 02:48:00	-->	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has joined #haskell
2013-03-22 02:48:04	<--	cognominal (~cognomina@37.160.35.207) has quit (Ping timeout: 256 seconds)
2013-03-22 02:48:17	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-03-22 02:48:22	-->	darinmorrison (~dwm@unaffiliated/darinmorrison) has joined #haskell
2013-03-22 02:48:46	-->	Jesin (~Jessin_@Dyn088178.dept.Lehigh.EDU) has joined #haskell
2013-03-22 02:49:01	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-22 02:49:21	tgeeky	. o O 0 <-- the smallest thought bubble
2013-03-22 02:49:36	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Ping timeout: 272 seconds)
2013-03-22 02:50:06	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-22 02:50:07	<--	ddp (~ddp@71-83-115-6.static.reno.nv.charter.com) has quit (Quit: ddp)
2013-03-22 02:50:52	-->	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has joined #haskell
2013-03-22 02:51:16	-->	soulofpeace (~soulofpea@119.75.11.250) has joined #haskell
2013-03-22 02:51:25	<--	v_ (~v@114.112.255.154) has quit (Quit: Leaving)
2013-03-22 02:51:30	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-22 02:53:00	<--	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has quit (Quit: Lost terminal)
2013-03-22 02:53:09	-->	MnO2 (~MnO2@nat/yahoo/x-iojujobgdpkhxief) has joined #haskell
2013-03-22 02:53:46	<--	Zedrikov (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 240 seconds)
2013-03-22 02:53:51	lightquake	how can I tell what part of my haskell code is causing a stack overflow in ghc 7.4?
2013-03-22 02:53:55	<--	kcj (~casey@unaffiliated/kcj) has quit (Quit: kcj)
2013-03-22 02:53:58	lightquake	(i.e., I don't have the 7.6 stack stuff)
2013-03-22 02:54:01	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-22 02:54:03	-->	cognominal (~cognomina@37.160.35.207) has joined #haskell
2013-03-22 02:54:24	tgeeky	man, that's hard to search for given the site "stack overflow"
2013-03-22 02:54:39	lightquake	yeah :(
2013-03-22 02:55:08	tgeeky	you can do -site:stackoverflow.com, but then you might miss the answer!
2013-03-22 02:55:47	<--	issimus1 (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-03-22 02:55:58	amatsu	surely you can search stackoverflow for stack overflows directly.
2013-03-22 02:56:14	<--	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has left #haskell ("Leaving")
2013-03-22 02:56:24	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-22 02:56:29	tgeeky	lightquake: I'm just going to be pasting links, I don't know if they will help or not. Sorry: http://blog.ezyang.com/2011/05/anatomy-of-a-thunk-leak/
2013-03-22 02:57:13	tgeeky	lightquake: http://stackoverflow.com/questions/6429085/haskell-heap-issues-with-parameter-passing-style/6429888#6429888
2013-03-22 02:57:29	tgeeky	lightquake: http://comments.gmane.org/gmane.comp.lang.haskell.cafe/90803
2013-03-22 02:58:24	tgeeky	lightquake: though the solution, once the problem is found, is to add strictness. (!)
2013-03-22 02:58:27	ski	hiptobecubic : dunno
2013-03-22 02:58:55	tgeeky	ski: FYI, there is a phinary module for Haskell
2013-03-22 02:59:03	-->	floatingman (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has joined #haskell
2013-03-22 02:59:33	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-22 03:00:06	tgeeky	ski: http://devrand.org:8080/cgi-bin/cgit/phinary <-- it is there, if that site works again in the future.
2013-03-22 03:00:08	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Ping timeout: 245 seconds)
2013-03-22 03:00:13	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-22 03:01:43	<--	cognominal (~cognomina@37.160.35.207) has quit (Ping timeout: 264 seconds)
2013-03-22 03:02:32	-->	fosky (~fosky@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-22 03:04:01	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 03:04:11	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 03:04:23	<--	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-03-22 03:05:00	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 03:05:53	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-22 03:05:53	<--	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has quit (Quit: Konversation terminated!)
2013-03-22 03:06:38	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 03:06:48	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 03:06:52	<--	rmarianski (~rmariansk@mail.marianski.com) has quit (Quit: leaving)
2013-03-22 03:08:20	-->	xinming_ (~xinming@125.84.17.181) has joined #haskell
2013-03-22 03:08:39	-->	cognominal (~cognomina@37.160.35.207) has joined #haskell
2013-03-22 03:08:55	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-22 03:09:35	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 03:09:49	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-22 03:09:52	<--	bmfx (~bmfx@137-196-112-92.pool.ukrtel.net) has quit (Ping timeout: 272 seconds)
2013-03-22 03:10:32	-->	bmfx (~bmfx@148-45-95-178.pool.ukrtel.net) has joined #haskell
2013-03-22 03:11:35	<--	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 03:11:39	<--	xinming (~xinming@125.84.24.140) has quit (Ping timeout: 260 seconds)
2013-03-22 03:12:48	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-03-22 03:13:24	<--	ktosiek (~quassel@46.22.173.54) has quit (Ping timeout: 264 seconds)
2013-03-22 03:13:29	<--	PaulVisschers (~PaulVissc@77-172-85-26.ip.telfort.nl) has quit (Read error: Connection reset by peer)
2013-03-22 03:13:31	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Remote host closed the connection)
2013-03-22 03:13:51	-->	ktosiek (~quassel@46.22.173.54) has joined #haskell
2013-03-22 03:15:26	<--	timtom (~Thunderbi@2001:630:12:2430:9493:11a6:f629:9d04) has quit (Ping timeout: 245 seconds)
2013-03-22 03:15:39	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-22 03:15:52	<--	xunatai_ (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-22 03:16:13	-->	yc4891_ (~andrew@121.14.98.46) has joined #haskell
2013-03-22 03:16:14	<--	yc4891 (~andrew@121.14.98.46) has quit (Read error: Connection reset by peer)
2013-03-22 03:16:17	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 03:16:18	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (Quit: Leaving)
2013-03-22 03:16:46	<--	[[zz]] (~q@node-37h.pool-125-25.dynamic.totbb.net) has quit (Ping timeout: 252 seconds)
2013-03-22 03:16:54	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-22 03:17:00	<--	kludgy (~Adium@24.85.254.223) has quit (Ping timeout: 260 seconds)
2013-03-22 03:17:18	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-22 03:17:30	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-22 03:17:35	<--	Counter-Strike (~abc@mailsh7.xs4all.nl) has quit
2013-03-22 03:18:03	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-22 03:18:24	-->	Testos (User@109.64.163.95) has joined #haskell
2013-03-22 03:18:36	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-22 03:19:28	-->	Rotaerk_ (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-22 03:19:31	-->	tyro89 (~erik@198-84-183-94.cpe.teksavvy.com) has joined #haskell
2013-03-22 03:19:43	hpaste	heath pasted “missing-files” at http://hpaste.org/84456
2013-03-22 03:19:54	heath	could use some help
2013-03-22 03:19:58	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 03:20:07	<--	jonke (~quassel@h87-96-186-149.dynamic.se.alltele.net) has quit (Read error: Connection reset by peer)
2013-03-22 03:20:38	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 246 seconds)
2013-03-22 03:22:00	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-22 03:22:10	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-22 03:22:22	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-03-22 03:22:26	-->	[[zz]] (~q@node-1cnh.pool-101-108.dynamic.totbb.net) has joined #haskell
2013-03-22 03:22:48	dmwit	heath: ghc-pkg check ?
2013-03-22 03:22:58	<--	xyxy (~hrn@host188.201-252-147.telecom.net.ar) has left #haskell
2013-03-22 03:22:58	dmwit	heath: And then cabal install --reinstall the broken packages?
2013-03-22 03:23:08	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-22 03:23:21	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-22 03:23:23	dmwit	heath: (...what did you DO?)
2013-03-22 03:23:46	dmwit	Oh, I see this *is* the output of ghc-pkg check and I just hadn't gotten far enough.
2013-03-22 03:23:54	dmwit	My goodness. What DID you do?
2013-03-22 03:24:20	dmwit	...you might consider just "rm -r ~/.cabal" and starting over. =P
2013-03-22 03:24:27	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-22 03:24:38	dmwit	rm -r ~/.cabal ~/.ghc
2013-03-22 03:24:39	applicative	heath: or are you meaning to use a later ghc but still have ghc-7.4 around, having meant to get rid of it
2013-03-22 03:25:30	-->	pranavrc (~pranavrc@122.164.165.42) has joined #haskell
2013-03-22 03:25:30	<--	pranavrc (~pranavrc@122.164.165.42) has quit (Changing host)
2013-03-22 03:25:30	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-22 03:25:37	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-22 03:25:43	heath	so on this particular machine i installed snap after installing yesod, yesod complained, and i reacted by doing the stupid: sudo apt-get remove #something like lib-ghc and the haskell-platform# then rm -rf ~/.cabal
2013-03-22 03:26:02	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-22 03:26:08	heath	and a apt-get purge for good measure then apt-get install libghc and haskell platform
2013-03-22 03:26:16	applicative	wait is it just a .ghc dir thats still around
2013-03-22 03:26:18	heath	cabal install cabal-dev
2013-03-22 03:26:20	dmwit	rm -r ~/.ghc
2013-03-22 03:26:21	heath	and foobar!
2013-03-22 03:26:37	heath	oh
2013-03-22 03:26:37	applicative	right like dimwit says
2013-03-22 03:26:41	Clint	yesod complained about snap?
2013-03-22 03:26:54	applicative	woops called dmwit dimwit
2013-03-22 03:27:14	dmwit	iit happens
2013-03-22 03:27:25	heath	yesod just complained
2013-03-22 03:27:26	heath	$ yesod devel
2013-03-22 03:27:26	heath	yesod: initINotify: resource exhausted (Too many open files)
2013-03-22 03:27:38	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 03:27:44	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 03:27:44	dmwit	You had too many open files and your reaction was to reinstall GHC?
2013-03-22 03:28:03	applicative	my kind of guy
2013-03-22 03:28:03	heath	and somewhere during all this i realized i needed to sandbox these apps
2013-03-22 03:28:24	-->	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has joined #haskell
2013-03-22 03:28:53	heath	i was under a lot of stress picking a web framework, take it easy on me :P
2013-03-22 03:29:30	YayMe	in any language (generally speaking) if you: Only use function application, or other functions that only use function application, do you get guaranteed purity? I think so, but then I might not be able to think up the way of wiggling impurity into that..
2013-03-22 03:30:09	heath	rm -rf ~/.ghc worked
2013-03-22 03:30:25	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 03:31:08	<--	apaku (~apaku@hmbg-4d0649eb.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-03-22 03:31:44	<--	darinmorrison (~dwm@unaffiliated/darinmorrison) has quit
2013-03-22 03:31:46	-->	apaku (~apaku@hmbg-5f76e360.pool.mediaWays.net) has joined #haskell
2013-03-22 03:32:15	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 03:32:22	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 03:32:22	<--	hattusili_III (~quassel@black-171-066.rh.uchicago.edu) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2013-03-22 03:33:03	hiptobecubic	YayMe, what is your question? If you build an entire expression out of pure functions then it will also be pure.
2013-03-22 03:33:11	<--	LAMMJohn1on (~ja@host86-183-156-119.range86-183.btcentralplus.com) has quit (Remote host closed the connection)
2013-03-22 03:33:17	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-22 03:33:26	YayMe	hiptobecubic: can function application be impure is my question
2013-03-22 03:33:59	hiptobecubic	YayMe, "function application" meaning what? Calling an arbitrary function in an arbitrary programming language?
2013-03-22 03:34:02	YayMe	if you apply impure functions, yes, but if you only apply functions which only use function application inside of them, is there any way with which function application can be pure?
2013-03-22 03:34:13	<--	tyro89 (~erik@198-84-183-94.cpe.teksavvy.com) has left #haskell
2013-03-22 03:34:23	YayMe	or rather any way it can be impure I mean
2013-03-22 03:34:57	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 03:35:02	hiptobecubic	YayMe, if the function itself does not mutate data and does not call any functions which mutate data then it is pure
2013-03-22 03:35:39	YayMe	a combinator is defined as "only using function application or previously defined combinators" I'm staking the claim that if the *only* tool you use is function application or functions which only use that, you have guaranteed purity, but I don't want to say that without running it past you folks since y'all know a lot more than I
2013-03-22 03:35:41	hiptobecubic	if the function calls pure functions, but is not pure itself, then of course the entire thing will be impure
2013-03-22 03:35:57	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-22 03:36:03	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 03:36:41	-->	issimus1 (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-03-22 03:36:51	-->	lcfrs (~lcfrs@8.25.197.25) has joined #haskell
2013-03-22 03:37:13	hiptobecubic	Well like I said, if the function does no mutation and only calls other pure functions, then the expression will be pure
2013-03-22 03:37:56	hiptobecubic	The compiler proves this for you when you build a huge a expression tree with no IO in it
2013-03-22 03:38:01	YayMe	I know that.. that doesn't say if it only uses function application it will be pure though. I can't imagine only using function application and having that mutate data
2013-03-22 03:38:17	YayMe	but maybe it's possible
2013-03-22 03:38:22	hiptobecubic	YayMe, if you aren't using assignment, I don't see how.
2013-03-22 03:38:30	<--	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 256 seconds)
2013-03-22 03:38:30	YayMe	That's my thought as well
2013-03-22 03:38:31	hiptobecubic	unless you are doing some fishy IO
2013-03-22 03:38:42	YayMe	but fishy IO would require assignment
2013-03-22 03:38:46	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Ping timeout: 252 seconds)
2013-03-22 03:38:53	<--	argiopeweb (~elliot@99-181-58-141.lightspeed.dybhfl.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-03-22 03:39:07	YayMe	unsafePerformIO does assignment underneath so calling it would be calling something that doesn't *only* use function application
2013-03-22 03:39:23	YayMe	I'm satisfied with my logic. It's pure (until someone tells me otherwise)
2013-03-22 03:39:27	<--	dmac (~Adium@12.207.22.242) has quit (Quit: Leaving.)
2013-03-22 03:40:02	hiptobecubic	puresin x = unsafePerformIO $ print "ERMAHGERRRDD" >> return . Prelude.sin x
2013-03-22 03:40:27	hiptobecubic	err, ignore that . and replace with ()
2013-03-22 03:40:36	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 252 seconds)
2013-03-22 03:40:47	YayMe	I have no idea what that would do
2013-03-22 03:41:05	YayMe	:t sin
2013-03-22 03:41:06	hiptobecubic	prints some garbage and then returns sin
2013-03-22 03:41:07	lambdabot	Floating a => a -> a
2013-03-22 03:41:17	<--	lcfrs (~lcfrs@8.25.197.25) has quit (Ping timeout: 256 seconds)
2013-03-22 03:41:27	hiptobecubic	the point is that you have to cheat
2013-03-22 03:41:37	hiptobecubic	if you dno't cheat then the type tells you that it's pure
2013-03-22 03:42:13	lightquake	I can't get ghc to allow profiling options, even though I'm using cabal configure --enable-executable-profiling
2013-03-22 03:42:32	hiptobecubic	since there is no (permissible) function f :: IO a -> a, then you are all set
2013-03-22 03:42:48	hiptobecubic	lightquake, error message?
2013-03-22 03:42:56	lightquake	decafc: the flag -xc requires the program to be built with -prof
2013-03-22 03:42:57	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-22 03:43:05	YayMe	hiptobecubic: Good enough for me.
2013-03-22 03:43:16	hiptobecubic	also you probably need library profiling as well. and if you didn't enable that before you started then everything is probably doomed.
2013-03-22 03:43:32	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-22 03:44:12	-->	chromesitar (~sss@bruce-bb-espn-dhcp-001-38.dsl.airstreamcomm.net) has joined #haskell
2013-03-22 03:44:15	lightquake	no, i made sure to enable that
2013-03-22 03:45:09	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-22 03:47:23	-->	nexx (~SPS-User@dslb-178-011-249-246.pools.arcor-ip.net) has joined #haskell
2013-03-22 03:47:46	<--	moai (~m@141.70.23.87) has quit (Ping timeout: 240 seconds)
2013-03-22 03:48:25	<--	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-03-22 03:48:44	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-22 03:48:51	-->	hattusili_III (~quassel@black-171-066.rh.uchicago.edu) has joined #haskell
2013-03-22 03:49:57	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 03:50:02	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 256 seconds)
2013-03-22 03:50:08	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Read error: No route to host)
2013-03-22 03:50:19	-->	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has joined #haskell
2013-03-22 03:50:46	<--	HW42 (~000000@pD9E43CF6.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-22 03:53:24	-->	pranavrc (~pranavrc@122.164.165.42) has joined #haskell
2013-03-22 03:53:24	<--	pranavrc (~pranavrc@122.164.165.42) has quit (Changing host)
2013-03-22 03:53:24	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-22 03:54:02	Cale	https://www.youtube.com/watch?v=rRbY3TMUcgQ -- lol
2013-03-22 03:54:16	shachaf	kfish: I don't think either use of hash is for actual cryptographic hash functions as in sha1 etc., is it?
2013-03-22 03:55:19	shachaf	kfish: As far as I can tell both versions are meant to be "fast keys for balanced containers". The question is whether you can come up with patterns to DoS a hash table with.
2013-03-22 03:56:05	kfish	shachaf, oh ok, i misinterpreted the reasoning for siphash
2013-03-22 03:56:26	kfish	is it related to having persistency?
2013-03-22 03:56:38	-->	alc (~alc@61.135.169.78) has joined #haskell
2013-03-22 03:57:14	shachaf	I think that's also an issue. I haven't been keeping close track of it, but I think the current version picks a random salt for every run of the program or something like that.
2013-03-22 03:57:28	shachaf	(Of course you can always pick a salt yourself.)
2013-03-22 03:57:30	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-22 03:57:42	-->	hammersbang (~hammersba@modemcable089.123-162-184.mc.videotron.ca) has joined #haskell
2013-03-22 03:57:54	shachaf	(But when a package like unordered-containers uses a hash function directly it can be trickier.)
2013-03-22 03:58:35	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-03-22 03:59:00	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-22 03:59:09	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-22 04:00:32	-->	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has joined #haskell
2013-03-22 04:02:24	<--	hammersbang (~hammersba@modemcable089.123-162-184.mc.videotron.ca) has left #haskell
2013-03-22 04:02:32	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-22 04:02:58	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 04:03:08	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 04:03:16	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-22 04:03:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 04:03:42	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 04:03:45	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 04:03:56	<--	ousado (~ousado@unaffiliated/ousado) has quit (Remote host closed the connection)
2013-03-22 04:04:31	<--	jeffreybaird (~jeffreyba@pool-96-246-2-14.nycmny.east.verizon.net) has left #haskell
2013-03-22 04:04:51	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-03-22 04:05:02	-->	k0001 (~k0001@host127.190-224-63.telecom.net.ar) has joined #haskell
2013-03-22 04:05:20	-->	mrotondo (~mrotondo@108-169-6-213.dsl.dynamic.sonic.net) has joined #haskell
2013-03-22 04:05:22	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 04:05:24	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-22 04:06:17	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 04:07:01	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 04:07:18	<--	cognominal (~cognomina@37.160.35.207) has quit (Ping timeout: 264 seconds)
2013-03-22 04:07:43	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-22 04:07:43	<--	canvon (zzz@arara.de) has quit (Ping timeout: 264 seconds)
2013-03-22 04:08:14	-->	canvon (zzz@arara.de) has joined #haskell
2013-03-22 04:09:17	<--	lemao (~lemao@187.67.222.39) has quit (Remote host closed the connection)
2013-03-22 04:10:26	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 256 seconds)
2013-03-22 04:10:56	-->	cognominal (~cognomina@37.160.35.207) has joined #haskell
2013-03-22 04:13:47	-->	kamatsu (~Adium@2402:1800:4000:2:cdca:2f79:3e60:97a8) has joined #haskell
2013-03-22 04:15:55	-->	rhdoenges (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has joined #haskell
2013-03-22 04:16:17	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 04:16:45	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 04:16:49	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 04:17:20	tgeeky	lol. seriously?
2013-03-22 04:18:03	<--	kmels_ (~kmels@frbg-4d029a9f.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-22 04:18:50	parcs	tgeeky: seriously :(
2013-03-22 04:19:19	luite	:)
2013-03-22 04:19:29	parcs	i wish to petition tgeeky's ban
2013-03-22 04:19:59	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-22 04:20:14	Clint	aren't you doing that in the wrong channel?
2013-03-22 04:20:22	parcs	yes
2013-03-22 04:20:25	tgeeky	is there a right channel?
2013-03-22 04:20:35	-->	chatsiri_ (~chatsiri_@158.108.232.176) has joined #haskell
2013-03-22 04:20:39	shachaf	#haskell-ops is the channel for that.
2013-03-22 04:20:57	shachaf	Philippa isn't in there, though.
2013-03-22 04:21:12	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-22 04:21:17	Philippa	shachaf: it isn't. -blah is not under the jurisdiction of -ops
2013-03-22 04:21:33	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 256 seconds)
2013-03-22 04:21:53	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-22 04:21:59	-->	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has joined #haskell
2013-03-22 04:22:18	shachaf	OK.
2013-03-22 04:22:42	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-22 04:23:14	shachaf	At any rate this channel is not the place for it.
2013-03-22 04:23:27	hiptobecubic	tgeeky, doesn't look very banned
2013-03-22 04:23:30	--	pdxleif is now known as pdxleif_away
2013-03-22 04:23:51	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 04:23:55	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-22 04:24:01	tgeeky	hiptobecubic: Cannot join to channel #haskell-blah (You are banned)
2013-03-22 04:24:05	-->	Kindaro (~Kindaro@84.23.59.80) has joined #haskell
2013-03-22 04:24:24	<--	Testos (User@109.64.163.95) has quit (Ping timeout: 256 seconds)
2013-03-22 04:25:11	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-22 04:25:17	hiptobecubic	ah
2013-03-22 04:25:20	parcs	perhaps it's time to start a new #-blah with 100% less power-hungry, trigger-happy ops
2013-03-22 04:26:05	Philippa	could be. Feel free to talk to boegel about it
2013-03-22 04:26:11	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 04:26:21	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 04:26:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 04:26:24	Philippa	maybe it's time to start /another/ one with less sexist bullshit, too
2013-03-22 04:26:39	-->	chrisdotcode_ (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has joined #haskell
2013-03-22 04:26:43	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 04:27:48	<--	cognominal (~cognomina@37.160.35.207) has quit (Ping timeout: 264 seconds)
2013-03-22 04:28:33	hiptobecubic	Well it shouldn't be in here.
2013-03-22 04:28:35	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-22 04:28:45	<--	yc4891_ (~andrew@121.14.98.46) has quit (Ping timeout: 260 seconds)
2013-03-22 04:28:53	chrisdotcode_	hello everyone :)
2013-03-22 04:28:53	<--	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has quit (Ping timeout: 245 seconds)
2013-03-22 04:28:56	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Remote host closed the connection)
2013-03-22 04:29:05	-->	xkcd_ (~chatzilla@103.5.132.50) has joined #haskell
2013-03-22 04:29:18	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-22 04:29:23	tgeeky	who the hell is boegel, anyway?
2013-03-22 04:29:33	-->	Testos (User@109.64.163.95) has joined #haskell
2013-03-22 04:29:51	-->	Rogach (uid6398@gateway/web/irccloud.com/x-jcsexqzaqqudgfcu) has joined #haskell
2013-03-22 04:29:55	parcs	he's the creator of #-blah who is now 100% irrelevant to the daily functioning of #-blah
2013-03-22 04:30:12	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 04:30:16	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Disconnected by services)
2013-03-22 04:30:23	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 04:30:29	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 04:30:30	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-22 04:30:30	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Disconnected by services)
2013-03-22 04:30:36	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 04:30:42	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Disconnected by services)
2013-03-22 04:30:47	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Quit: WeeChat 0.3.8)
2013-03-22 04:30:48	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 04:30:52	<--	xkcd (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-22 04:30:56	-->	cognominal (~cognomina@37.160.35.207) has joined #haskell
2013-03-22 04:30:59	--	xkcd_ is now known as xkcd
2013-03-22 04:31:03	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 04:31:12	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-22 04:31:13	Rogach	Hello! I've got a cabal problem - I'm trying to reinstall package arithmoi with profiling enabled, but it complains: "Could not find module `Control.Monad.State.Strict' Perhaps you haven't installed the profiling libraries for package `mtl-2.0.1.0'?". I did install "libghc-mtl-prof" package on my machine. What could be wrong?
2013-03-22 04:31:29	<--	chatsiri_ (~chatsiri_@158.108.232.176) has quit (Ping timeout: 256 seconds)
2013-03-22 04:31:33	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-22 04:31:47	tgeeky	parcs (who is not here): I've never heard of him/her, so that at least makes sense.
2013-03-22 04:31:48	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 04:32:01	dmwit	Rogach: Perhaps you have an installation of mtl in your local package repository that is overriding the global one.
2013-03-22 04:32:06	dmwit	Rogach: Try ghc-pkg list mtl
2013-03-22 04:32:19	hpaste	tgeeky pasted “(no longer) private messages between tgeeky and Philippa” at http://hpaste.org/84457
2013-03-22 04:32:33	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 04:32:48	monochrom	this is why possessing multiple versions is confusing.
2013-03-22 04:32:50	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-03-22 04:32:50	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: (quit))
2013-03-22 04:32:59	Rogach	dmwit: No, there's only one - in global.
2013-03-22 04:33:25	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-22 04:33:55	monochrom	may I see the output of "ghc-pkg list -v"? and also "ghc -v"?
2013-03-22 04:34:23	dmwit	also also ghc-pkg check
2013-03-22 04:34:51	Philippa	tgeeky has just posted that without my consent
2013-03-22 04:34:59	hpaste	Rogach pasted “ghc-pkg list -v” at http://hpaste.org/84458
2013-03-22 04:35:01	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 04:35:10	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 04:35:22	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 04:35:31	Philippa	and FWIW, that does *not* belong in this chan
2013-03-22 04:35:32	hpaste	Rogach pasted “ghc -v” at http://hpaste.org/84459
2013-03-22 04:35:36	<--	chromesitar (~sss@bruce-bb-espn-dhcp-001-38.dsl.airstreamcomm.net) has quit (Quit: chromesitar)
2013-03-22 04:35:40	dmwit	Philippa: For an abuse of power like that, followed by a refusal to justify the abuse, I think he damn well ought to.
2013-03-22 04:35:48	tgeeky	Philippa: yeah, to that I agree. #haskell-blah is not listed as a channel to paste it in.
2013-03-22 04:36:14	hpaste	Rogach pasted “ghc-pkg check” at http://hpaste.org/84460
2013-03-22 04:36:31	<--	Urchin[emacs] (~user@unaffiliated/urchin) has quit (Ping timeout: 258 seconds)
2013-03-22 04:36:48	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 04:36:52	Philippa	dmwit: Wrong. Channel.
2013-03-22 04:37:07	<--	unK_ (~unknown@78.10.81.234) has quit (Quit: Konversation terminated!)
2013-03-22 04:37:38	Rogach	dmwit: Seems I indeed have a problem (as shown by ghc-pkg check), but it's unrelated to mtl and arithmoi.
2013-03-22 04:38:15	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 04:38:40	<--	cognominal (~cognomina@37.160.35.207) has quit (Ping timeout: 260 seconds)
2013-03-22 04:39:04	hiptobecubic	how dramatic
2013-03-22 04:39:07	<--	fmapE (~fmapE@2001:18e8:2:10f4:5552:b7d7:b9e:50da) has quit (Remote host closed the connection)
2013-03-22 04:40:22	tgeeky	hiptobecubic: I just had a vision of you being Hedonism Bot from Futurama.
2013-03-22 04:40:27	monochrom	Rogach: may I see "ghc-pkg describe mtl"?
2013-03-22 04:40:37	hiptobecubic	tgeeky, I wish. That guy's got it good.
2013-03-22 04:40:54	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 04:41:04	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 04:41:14	-->	ddp (~ddp@71-83-115-6.static.reno.nv.charter.com) has joined #haskell
2013-03-22 04:41:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 04:41:23	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 04:42:35	--	preflex_ is now known as preflex
2013-03-22 04:42:56	hpaste	Rogach pasted “ghc-pkg describe mtl” at http://hpaste.org/84461
2013-03-22 04:42:58	<--	ddp (~ddp@71-83-115-6.static.reno.nv.charter.com) has quit (Client Quit)
2013-03-22 04:43:00	Rogach	monochrom: Sure
2013-03-22 04:43:32	<--	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Remote host closed the connection)
2013-03-22 04:44:05	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Quit: Lost terminal)
2013-03-22 04:44:11	-->	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-22 04:44:15	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 04:46:22	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-22 04:46:23	monochrom	I can't figure out what's going on
2013-03-22 04:46:45	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-22 04:47:07	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 04:47:38	Rogach	monochrom: Neither can I :(
2013-03-22 04:49:38	-->	interzoneboy (~androirc@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-03-22 04:49:40	<--	Bwild (~irc@netblock-75-79-22-130.dslextreme.com) has quit (Ping timeout: 248 seconds)
2013-03-22 04:49:58	 *	hackagebot bytestring-lexing 0.4.3 - Parse and produce literals efficiently from strict or lazy bytestrings.  http://hackage.haskell.org/package/bytestring-lexing-0.4.3 (WrenThornton)
2013-03-22 04:50:20	<--	interzoneboy (~androirc@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Client Quit)
2013-03-22 04:51:15	 *	lispy wonders what wren is up to
2013-03-22 04:51:42	-->	interzoneboy (~androirc@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-03-22 04:51:54	-->	Bwild (~irc@netblock-75-79-22-130.dslextreme.com) has joined #haskell
2013-03-22 04:52:18	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 04:52:36	<--	interzoneboy (~androirc@209-6-55-13.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has left #haskell
2013-03-22 04:52:40	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 256 seconds)
2013-03-22 04:53:43	lispy	I would have expected mtl to be a trusted lib
2013-03-22 04:53:53	lispy	I don't have it installed to check if it is here
2013-03-22 04:54:03	lispy	If you're trying to compile safe haskell that could be an issue?
2013-03-22 04:54:23	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-03-22 04:54:36	<--	Testos (User@109.64.163.95) has quit (Ping timeout: 252 seconds)
2013-03-22 04:54:49	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 04:55:07	<--	nwf (~nwf@a.rr.ietfng.org) has quit (Ping timeout: 264 seconds)
2013-03-22 04:56:05	<--	MnO2 (~MnO2@nat/yahoo/x-iojujobgdpkhxief) has quit (Quit: MnO2)
2013-03-22 04:56:10	<--	Thra11 (~thrall@87.114.179.138) has quit (Ping timeout: 260 seconds)
2013-03-22 04:56:34	--	stelleg is now known as stelleg_away
2013-03-22 04:58:03	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 04:58:23	-->	nwf (~nwf@67.62.51.95) has joined #haskell
2013-03-22 04:58:30	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 260 seconds)
2013-03-22 04:58:33	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 04:59:00	<--	wyfrn_ (~wyfrn@p5B2BDD1D.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-22 04:59:05	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 04:59:13	<--	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-22 04:59:24	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-22 05:00:06	-->	MnO2 (~MnO2@nat/yahoo/x-ejfsikhdzailuayi) has joined #haskell
2013-03-22 05:00:11	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-22 05:00:19	<--	MnO2 (~MnO2@nat/yahoo/x-ejfsikhdzailuayi) has quit (Client Quit)
2013-03-22 05:00:33	<--	ctult (~ctult@65-129-22-233.bois.qwest.net) has quit (Ping timeout: 245 seconds)
2013-03-22 05:00:58	Rogach	lispy: Sorry, I'm a newbie. What's "safe haskell"?
2013-03-22 05:01:16	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 05:01:22	<--	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has quit (Quit: Leaving.)
2013-03-22 05:02:12	-->	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has joined #haskell
2013-03-22 05:02:27	-->	tertl3-laptop (~tertl3-la@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has joined #haskell
2013-03-22 05:02:37	-->	chatsiri_ (~chatsiri_@158.108.232.176) has joined #haskell
2013-03-22 05:02:45	Rogach	Btw, I needed to nuke several global packages that were doubling the user packages (as shown by ghc-pkg check), and now I can't install them back, because cabal now wants profiling by default.
2013-03-22 05:02:58	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 05:03:12	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 05:03:28	<--	Jesin (~Jessin_@Dyn088178.dept.Lehigh.EDU) has quit (Ping timeout: 245 seconds)
2013-03-22 05:03:54	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-03-22 05:04:31	Rogach	Now that's sad, because in particular, I can't install my xmonad back, and that means that if I would need to restart, I'll lose my WM.
2013-03-22 05:04:38	lispy	Rogach: you may need to reinstall your ghc.
2013-03-22 05:04:51	<--	tertl3-laptop (~tertl3-la@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has quit (Client Quit)
2013-03-22 05:05:11	lispy	Rogach: You pretty much never want to remove/upgrade things in your global package db due to the way ghc works.
2013-03-22 05:05:25	<--	k0001 (~k0001@host127.190-224-63.telecom.net.ar) has quit (Ping timeout: 256 seconds)
2013-03-22 05:05:26	lispy	Unfortunately, this is not obvious :(
2013-03-22 05:05:48	lispy	Rogach: can you simply ask your package manager to reinstall the OS packages for those libraries?
2013-03-22 05:06:14	-->	vifanq (~vifanq@gateway/tor-sasl/vifanq) has joined #haskell
2013-03-22 05:06:53	-->	Targen (~iguana@190.75.116.159) has joined #haskell
2013-03-22 05:07:05	-->	k0001 (~k0001@host31.186-125-148.telecom.net.ar) has joined #haskell
2013-03-22 05:07:35	Rogach	lispy: Those reinstallation were needed because I screwed up my earlier xmonad install.
2013-03-22 05:07:44	Rogach	lispy: Yes, I'll try.
2013-03-22 05:07:46	-->	dented42 (~dented42@opengroove.org) has joined #haskell
2013-03-22 05:08:02	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-03-22 05:08:28	<--	arbn (~arbn@auriga.kiwilight.com) has quit (Remote host closed the connection)
2013-03-22 05:08:36	Rogach	Well, seems the root of the problem was in me, after all. Why is ghc-prof not dependent on libghc-mtl-prof?
2013-03-22 05:09:29	dmwit	What does ghc-prof provide?
2013-03-22 05:09:41	dmwit	(Is there a reason to expect that ghc-prof should depend on libghc-mtl-prof?)
2013-03-22 05:09:42	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-22 05:11:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 05:11:46	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 05:11:56	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 05:12:09	Rogach	dmwit: I'm a bit confused (because of all that reinstall stuff), but my idea is as follows - if package "ghc" resulted in mtl library on my system, then "ghc-prof" should also contain the mtl files.
2013-03-22 05:12:15	-->	apucacao (~apucaca@12.250.157.102) has joined #haskell
2013-03-22 05:12:32	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 05:12:33	Rogach	dmwit: Maybe I'm wrong, and mtl ended up being on my system for some other reason.
2013-03-22 05:12:42	dmwit	Hm. Did ghc result in mtl on your system?
2013-03-22 05:13:11	-->	Shin-LaC (~LaC@adsl-99-35-43-72.dsl.chcgil.sbcglobal.net) has joined #haskell
2013-03-22 05:13:22	dmwit	I bet it didn't. =)
2013-03-22 05:13:41	Rogach	dmwit: Is there a way to see what packages depend on certain package?
2013-03-22 05:13:44	<--	alc (~alc@61.135.169.78) has quit (Ping timeout: 252 seconds)
2013-03-22 05:13:59	Rogach	dmwit: Because there's one thing I'm sure of - I didn't install mtl package by hand.
2013-03-22 05:14:12	dmwit	huh
2013-03-22 05:14:38	dmwit	I don't really know the answer to your most recent direct question.
2013-03-22 05:15:26	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-22 05:15:34	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-03-22 05:15:44	Rogach	dmwit: Sorry, it's deb-specific. I'll ask elsewhere.
2013-03-22 05:17:17	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 05:17:46	Clint	Rogach: libghc-mtl-dev goes with libghc-mtl-prof and libghc-mtl-doc
2013-03-22 05:17:50	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 05:17:55	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-03-22 05:18:14	lispy	Rogach: ghc doesn't ship with mtl so it would be odd for your OS package to provide mtl as part of ghc. On the other hand, they might have marked it as a 'recommended' package and your system automatically added it to the "install plan"?
2013-03-22 05:18:22	-->	QinGW (~yaaic@1.203.204.242) has joined #haskell
2013-03-22 05:18:45	Clint	no, something else caused libghc-mtl-dev to be installed
2013-03-22 05:18:58	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-22 05:19:03	 *	hiptobecubic thinks -dev packages are stupid
2013-03-22 05:19:56	-->	overdamped (~overdampe@unaffiliated/overdamped) has joined #haskell
2013-03-22 05:20:26	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-22 05:21:28	-->	argiopeweb (~elliot@155.31.73.125) has joined #haskell
2013-03-22 05:21:29	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-22 05:21:43	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 252 seconds)
2013-03-22 05:21:44	<--	joneshf-laptop (~joneshf@mail.concordusapps.com) has quit (Ping timeout: 252 seconds)
2013-03-22 05:22:03	Rogach	Ok, seems my problem is now solved. Thanks a lot!
2013-03-22 05:22:12	Rogach	hiptobecubic: What's wrong with them?
2013-03-22 05:22:28	hiptobecubic	There's no good reason not to include them by default
2013-03-22 05:22:31	<--	Rotaerk_ (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 05:22:35	hiptobecubic	They always lead to headaches
2013-03-22 05:22:48	hiptobecubic	Someone is missing some headers for some obscure library
2013-03-22 05:22:49	--	u__ is now known as u_
2013-03-22 05:22:54	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2013-03-22 05:23:10	<--	apucacao (~apucaca@12.250.157.102) has quit (Quit: apucacao)
2013-03-22 05:23:41	hiptobecubic	and they weren't installed with the library for what? to save 16k on disk in exchange for doubling the number of packages you have to sort through every time your run the package manager
2013-03-22 05:24:34	Clint	well, in the haskell case, the -dev package IS the library
2013-03-22 05:26:07	<--	overdamped (~overdampe@unaffiliated/overdamped) has quit (Quit: Leaving)
2013-03-22 05:29:01	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 05:29:28	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 05:29:46	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Quit: Leaving.)
2013-03-22 05:29:58	 *	hackagebot sbv 2.10 - SMT Based Verification: Symbolic Haskell theorem prover using SMT solving.  http://hackage.haskell.org/package/sbv-2.10 (LeventErkok)
2013-03-22 05:30:36	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-22 05:31:08	<--	jonaias (~jonaias@177.102.80.97) has quit (Quit: Konversation terminated!)
2013-03-22 05:31:55	-->	sw2wolf (~czsq888@171.216.203.124) has joined #haskell
2013-03-22 05:32:04	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Ping timeout: 245 seconds)
2013-03-22 05:32:19	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 05:32:31	Sgeo	@hoogle (Applicative f) => (a -> f b) -> (b -> f c) -> a -> f c
2013-03-22 05:32:31	lambdabot	Control.Monad (>=>) :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)
2013-03-22 05:32:31	lambdabot	Control.Monad (<=<) :: Monad m => (b -> m c) -> (a -> m b) -> (a -> m c)
2013-03-22 05:32:31	lambdabot	Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
2013-03-22 05:33:11	<--	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 05:33:17	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 05:33:23	Sgeo	Hmm. Arrow has that operation too, I guess Applicative doesn't?
2013-03-22 05:33:49	latro`a	that's composition of Kleisli arrows
2013-03-22 05:33:54	latro`a	the exact signature of it
2013-03-22 05:34:08	latro`a	pretty sure there's no way to have a non-Monad Applicative with that, because it's only a tiny step away from >>=
2013-03-22 05:34:28	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-22 05:34:33	latro`a	(all you need is a notion of function application, so that you can have "const m")
2013-03-22 05:34:34	Sgeo	I'm trying to get some intuition for what Arrows provide over Applicatives
2013-03-22 05:34:57	latro`a	m >>= f = (const m >=> f) ()
2013-03-22 05:35:01	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 05:35:08	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 05:35:11	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 05:35:21	dario	:t (>=>)
2013-03-22 05:35:22	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-22 05:35:28	shachaf	m >>= f = (id >=> id) (fmap f m)
2013-03-22 05:35:49	Sgeo	:t (id >=> id)
2013-03-22 05:35:50	lambdabot	Monad m => m (m c) -> m c
2013-03-22 05:35:51	latro`a	that's sorta indirect by comparison
2013-03-22 05:35:56	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 05:36:01	latro`a	since that's how you get join then >>=
2013-03-22 05:36:06	<--	nexx (~SPS-User@dslb-178-011-249-246.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-22 05:36:09	--	Watcher7 is now known as Watcher7|off
2013-03-22 05:36:14	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-22 05:36:31	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 05:36:33	shachaf	Yep.
2013-03-22 05:36:36	<--	Shin-LaC (~LaC@adsl-99-35-43-72.dsl.chcgil.sbcglobal.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 05:36:39	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-22 05:36:40	shachaf	But I don't like const and ()
2013-03-22 05:36:48	--	Watcher7|off is now known as Watcher7
2013-03-22 05:37:36	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 05:38:04	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 05:38:11	<--	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 05:38:54	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-03-22 05:39:47	-->	nexx (~SPS-User@dslb-188-108-104-010.pools.arcor-ip.net) has joined #haskell
2013-03-22 05:41:02	<--	Rogach (uid6398@gateway/web/irccloud.com/x-jcsexqzaqqudgfcu) has left #haskell
2013-03-22 05:42:53	<--	ncw (ncw@conference/pycon/x-xqgubvdoxsvxlinn) has quit (Remote host closed the connection)
2013-03-22 05:44:25	<--	Kindaro (~Kindaro@84.23.59.80) has quit (Read error: Connection reset by peer)
2013-03-22 05:44:49	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 246 seconds)
2013-03-22 05:45:07	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-22 05:45:28	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 05:45:36	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Client Quit)
2013-03-22 05:45:38	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 05:45:58	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 05:46:17	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 05:47:07	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-22 05:49:11	-->	Kindaro (~Kindaro@84.23.59.80) has joined #haskell
2013-03-22 05:49:31	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (Read error: Connection reset by peer)
2013-03-22 05:50:31	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Quit: leaving)
2013-03-22 05:56:17	<--	u_ (~phillip@75.57.178.143) has quit (Remote host closed the connection)
2013-03-22 05:57:59	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-22 05:58:11	-->	arbn (~arbn@auriga.kiwilight.com) has joined #haskell
2013-03-22 06:00:11	-->	m3ga (~erikd@101.171.197.53) has joined #haskell
2013-03-22 06:00:27	-->	srhb` (~srhb@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-22 06:00:27	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-22 06:02:37	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 06:02:52	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 06:04:40	<--	srhb (~srhb@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 272 seconds)
2013-03-22 06:06:41	-->	AfC (~andrew@jim1020952.lnk.telstra.net) has joined #haskell
2013-03-22 06:06:44	-->	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 06:06:56	<--	m3ga (~erikd@101.171.197.53) has quit (Quit: disappearing into the sunset)
2013-03-22 06:07:15	<--	chatsiri_ (~chatsiri_@158.108.232.176) has quit (Ping timeout: 256 seconds)
2013-03-22 06:07:29	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-22 06:09:09	<--	vifanq (~vifanq@gateway/tor-sasl/vifanq) has quit (Remote host closed the connection)
2013-03-22 06:09:57	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: No route to host)
2013-03-22 06:10:20	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 06:10:46	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-22 06:11:44	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Ping timeout: 255 seconds)
2013-03-22 06:12:05	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-03-22 06:12:31	<--	issimus1 (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-22 06:12:41	-->	Mon_Ouie (~Mon_Ouie@91.176.22.249) has joined #haskell
2013-03-22 06:12:41	<--	Mon_Ouie (~Mon_Ouie@91.176.22.249) has quit (Changing host)
2013-03-22 06:12:41	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-22 06:15:42	-->	Ziphilt (~Ziphilt@AEOLOS.WIFI.WPI.EDU) has joined #haskell
2013-03-22 06:16:02	<--	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-22 06:16:22	<--	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-03-22 06:17:26	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-22 06:17:38	-->	JoeyA (~joeyadams@199.168.196.156) has joined #haskell
2013-03-22 06:19:14	JoeyA	> show (userError "didn't work")
2013-03-22 06:19:15	lambdabot	  "user error (didn't work)"
2013-03-22 06:19:31	<--	Ziphilt (~Ziphilt@AEOLOS.WIFI.WPI.EDU) has quit (Client Quit)
2013-03-22 06:19:49	JoeyA	Does anybody else but me wish that (show . userError) would just print the string directly, without "user error" ?
2013-03-22 06:19:54	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Quit: Одлазим)
2013-03-22 06:19:58	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-22 06:20:24	JoeyA	Since a "user error" usually isn't the end user's fault.
2013-03-22 06:20:32	-->	Shin-LaC (~LaC@comrb-8-69.wireless.uic.edu) has joined #haskell
2013-03-22 06:21:46	newsham	> show $ text "stuff here"
2013-03-22 06:21:48	lambdabot	  "stuff here"
2013-03-22 06:22:18	<--	Bloodless (~Bloodless@c-98-208-23-49.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-22 06:22:36	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-22 06:22:43	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-22 06:22:59	JoeyA	:t text
2013-03-22 06:23:00	lambdabot	String -> Doc
2013-03-22 06:23:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 06:24:02	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 246 seconds)
2013-03-22 06:24:31	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Quit: Leaving)
2013-03-22 06:24:34	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-22 06:24:46	monochrom	perhaps don't use userError. it was invented in an old era when the only exception type was IOError, trying to provide a custom-made exception but not very successfully as you see why.
2013-03-22 06:25:15	monochrom	today, you can completely write your own exception type and use it, including what it is called.
2013-03-22 06:25:23	<--	philipde` (~user@cpe-67-246-132-238.stny.res.rr.com) has quit (Ping timeout: 258 seconds)
2013-03-22 06:26:17	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-22 06:27:43	adnap	#yesod is so dead...
2013-03-22 06:28:16	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-22 06:28:34	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 06:28:40	JoeyA	monochrom: sure, but fail "My.Module.foo: whoops" is extremely convenient for reporting API misuse.
2013-03-22 06:29:02	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 06:29:22	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-22 06:29:51	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-03-22 06:29:56	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-22 06:30:21	-->	shock_one (~shock_one@46.118.141.174) has joined #haskell
2013-03-22 06:30:27	<--	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has quit (Ping timeout: 256 seconds)
2013-03-22 06:30:39	JoeyA	Meh, I guess it's not too inconvenient to just define a custom exception type.
2013-03-22 06:31:15	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 260 seconds)
2013-03-22 06:31:55	<--	AfC (~andrew@jim1020952.lnk.telstra.net) has quit (Quit: Leaving.)
2013-03-22 06:32:16	arbn	adnap: Ask your Yesod question in here and ignore the haters. :)
2013-03-22 06:34:30	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 06:35:07	-->	tanakh (~tanakh@041240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-22 06:38:45	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: bye bye)
2013-03-22 06:39:02	adnap	arbn: I don't know what haters you're referring to.
2013-03-22 06:39:17	adnap	My question is: I want to use reactive-banana with yesod to define things like "Event t GetPageR". In reactive-banana, newAddHandler produces a callback function "a -> IO ()" which fires an event. How can I give my yesod getPageR handler access to this callback?
2013-03-22 06:39:48	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 264 seconds)
2013-03-22 06:40:38	-->	jaeyeun_ (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 06:41:09	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-22 06:41:13	-->	nsxt (~nsxt@c-68-45-12-237.hsd1.nj.comcast.net) has joined #haskell
2013-03-22 06:41:36	<--	sw2wolf (~czsq888@171.216.203.124) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-22 06:41:55	<--	JoeyA (~joeyadams@199.168.196.156) has quit (Quit: Leaving)
2013-03-22 06:42:46	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 240 seconds)
2013-03-22 06:44:27	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-22 06:44:40	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-22 06:45:05	 *	hackagebot pipes-network 0.1.0.1 - Use network sockets together with the pipes library.  http://hackage.haskell.org/package/pipes-network-0.1.0.1 (RenzoCarbonara)
2013-03-22 06:48:12	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-22 06:48:41	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Read error: Connection reset by peer)
2013-03-22 06:51:09	<--	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Quit: Ex-Chat)
2013-03-22 06:52:39	<--	plutoniix (~plutoniix@ppp-61-90-18-72.revip.asianet.co.th) has quit (Quit: จรลี จรลา)
2013-03-22 06:54:02	<--	dented42 (~dented42@opengroove.org) has quit (Ping timeout: 255 seconds)
2013-03-22 06:54:46	-->	MnO2 (~MnO2@nat/yahoo/x-dzeybxdfhldtstgv) has joined #haskell
2013-03-22 06:55:21	<--	mrotondo (~mrotondo@108-169-6-213.dsl.dynamic.sonic.net) has quit (Quit: mrotondo)
2013-03-22 06:56:18	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-22 06:57:27	<--	kcj (~casey@unaffiliated/kcj) has quit (Quit: kcj)
2013-03-22 06:57:38	-->	powergiant (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-22 06:58:57	-->	dented42 (~dented42@opengroove.org) has joined #haskell
2013-03-22 06:59:02	-->	zhulikas (~Kostas@213.159.34.100) has joined #haskell
2013-03-22 06:59:24	<--	BlankVerse1 (~pankajm@202.3.77.214) has quit (Remote host closed the connection)
2013-03-22 06:59:28	-->	mcdonc (~mcdonc@ip72-209-215-142.dc.dc.cox.net) has joined #haskell
2013-03-22 07:00:06	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-22 07:00:20	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-22 07:00:51	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-22 07:00:55	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 07:01:01	-->	tavelram__ (tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-03-22 07:01:02	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-22 07:01:28	<--	ps-auxw (~arneb@p4FF7FC8A.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-03-22 07:02:19	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 264 seconds)
2013-03-22 07:02:38	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Read error: Operation timed out)
2013-03-22 07:03:56	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-22 07:04:16	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-22 07:04:29	<--	tavelram_ (tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (Ping timeout: 256 seconds)
2013-03-22 07:05:31	-->	PatrickRobotham_ (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-22 07:05:35	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-03-22 07:06:45	<--	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (Ping timeout: 256 seconds)
2013-03-22 07:08:08	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-03-22 07:08:14	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-22 07:08:28	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 07:08:30	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-22 07:09:31	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-03-22 07:10:09	-->	krzysz00 (~krzys@76.78.130.232) has joined #haskell
2013-03-22 07:12:32	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-03-22 07:12:57	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-22 07:13:04	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 07:13:16	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 07:14:53	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-03-22 07:15:58	--	Watcher7 is now known as Watcher7|off
2013-03-22 07:16:34	<--	kvda (~kvda@unaffiliated/kvda) has quit (Ping timeout: 256 seconds)
2013-03-22 07:16:38	<--	shock_one (~shock_one@46.118.141.174) has quit (Read error: Operation timed out)
2013-03-22 07:17:45	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-03-22 07:17:49	-->	hamilyon (~ashaposhn@94.124.202.202) has joined #haskell
2013-03-22 07:17:53	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-22 07:18:28	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-22 07:20:48	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-22 07:20:51	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 276 seconds)
2013-03-22 07:20:55	-->	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-22 07:21:06	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-03-22 07:21:07	<--	jaeyeun_ (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-22 07:22:08	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-22 07:22:14	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-03-22 07:22:15	<--	QinGW (~yaaic@1.203.204.242) has quit (Ping timeout: 260 seconds)
2013-03-22 07:23:00	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 264 seconds)
2013-03-22 07:23:29	<--	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has quit (Read error: Connection reset by peer)
2013-03-22 07:23:39	-->	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has joined #haskell
2013-03-22 07:25:09	<--	glguy_ (~textual@unaffiliated/glguy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-22 07:27:20	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 07:27:20	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 07:27:36	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-03-22 07:32:12	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-22 07:33:27	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-22 07:34:50	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 07:36:23	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-03-22 07:36:25	<--	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-03-22 07:37:44	<--	nus-- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-22 07:37:46	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-22 07:38:02	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-22 07:38:22	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 07:38:30	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-22 07:39:48	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-22 07:41:21	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Read error: Operation timed out)
2013-03-22 07:43:52	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-22 07:45:11	 *	hackagebot cabal-rpm 0.7.1 - RPM package creator for Haskell Cabal-based packages  http://hackage.haskell.org/package/cabal-rpm-0.7.1 (JensPetersen)
2013-03-22 07:45:25	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-03-22 07:45:38	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 07:46:38	-->	eff (~quassel@114.250.93.166) has joined #haskell
2013-03-22 07:51:16	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 07:51:21	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 07:51:31	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 07:52:03	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 276 seconds)
2013-03-22 07:52:04	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 07:52:52	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-22 07:53:15	--	preflex_ is now known as preflex
2013-03-22 07:53:38	-->	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has joined #haskell
2013-03-22 07:55:19	<--	cmears (~Chris@2001:388:608c:4c58:92b1:1cff:fe72:d0ce) has quit (Quit: Leaving)
2013-03-22 07:55:30	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-03-22 07:56:13	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-22 07:56:15	<--	hamilyon (~ashaposhn@94.124.202.202) has left #haskell
2013-03-22 07:56:30	<--	powergiant (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 264 seconds)
2013-03-22 07:56:47	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-22 07:56:49	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-03-22 07:57:21	-->	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-22 07:57:24	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-22 07:57:35	BadKitty	"all encrypted ciphers supported ordered from strong to weak." -> [ cipher_AES128_SHA256, cipher_AES256_SHA256, ... ]
2013-03-22 07:57:38	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Read error: Connection reset by peer)
2013-03-22 07:57:38	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 252 seconds)
2013-03-22 07:57:52	BadKitty	How can aes256 be weaker than aes128? O.o
2013-03-22 07:57:56	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-03-22 07:58:01	shachaf	As explained on the Wikipedia page.
2013-03-22 07:58:16	shachaf	Are you still changing your nick every few hours?
2013-03-22 07:58:30	BadKitty	shachaf: Sorry
2013-03-22 07:58:42	BadKitty	Not hours... Occasionally (Soemtimes often)
2013-03-22 07:59:27	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 256 seconds)
2013-03-22 07:59:42	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-22 07:59:59	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-22 08:00:05	BadKitty	shachaf: As explained on what wikipedia pagE?
2013-03-22 08:00:14	shachaf	AES
2013-03-22 08:00:32	 *	BadKitty sees quites a blank wikipedia page
2013-03-22 08:00:45	BadKitty	http://simple.wikipedia.org/wiki/Advanced_Encryption_Standard -- Skimming, I skip?
2013-03-22 08:01:05	BadKitty	oh wtf did simple. come from O.o
2013-03-22 08:01:18	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Ping timeout: 252 seconds)
2013-03-22 08:01:28	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-22 08:01:40	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-22 08:02:19	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-22 08:02:40	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-22 08:02:40	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-22 08:02:40	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-22 08:02:52	BadKitty	shachaf: Where am I meant to be looking ... :|
2013-03-22 08:03:01	<--	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Changing host)
2013-03-22 08:03:01	-->	dfletcher_ (~fletch@drupal.org/user/72475/view) has joined #haskell
2013-03-22 08:03:04	--	dfletcher_ is now known as dfletcher
2013-03-22 08:03:09	pharaun	known attacks?
2013-03-22 08:03:30	shachaf	All known attacks are computationally infeasible. For AES-128, the key can be recovered with a computational complexity of 2126.1 using bicliques. For biclique attacks on AES-192 and AES-256, the computational complexities of 2189.7 and 2254.4 respectively apply. Related-key attacks can break AES-192 and AES-256 with complexities 2176 and 299.5, respectively.
2013-03-22 08:03:51	-->	odi` (~user@80-121-44-194.adsl.highway.telekom.at) has joined #haskell
2013-03-22 08:03:55	shachaf	Skimming Wikipedia pages is a valuable skill -- much more valuable than knowing about the existence of theoretical weaknesses in AES-256.
2013-03-22 08:04:14	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 255 seconds)
2013-03-22 08:04:18	pharaun	299.5?
2013-03-22 08:04:26	pharaun	that seems unusually low
2013-03-22 08:04:29	-->	Palmik (~palmik@man-208-121.pks.muni.cz) has joined #haskell
2013-03-22 08:04:51	pharaun	oh 2^99.5
2013-03-22 08:05:15	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-22 08:05:16	Shin-LaC	http://crypto.stackexchange.com/questions/5118/is-aes-256-weaker-than-192-and-128-bit-versions
2013-03-22 08:05:39	--	odi` is now known as odi
2013-03-22 08:05:44	BadKitty	Strange
2013-03-22 08:05:59	BadKitty	Intereting that more is less O.o
2013-03-22 08:06:06	BadKitty	(In this exact context)
2013-03-22 08:06:21	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-22 08:06:48	pharaun	interesting i was not aware of 256 being weaker in some sense
2013-03-22 08:06:50	shachaf	With that said, you probably shouldn't be dealing with any cryptography library that makes you decide whether to use AES-256 or AES-128.
2013-03-22 08:07:28	--	cads is now known as kevin_^
2013-03-22 08:07:36	BadKitty	shachaf: tls
2013-03-22 08:07:39	--	kevin_^ is now known as cads
2013-03-22 08:07:43	BadKitty	Not make but options are there
2013-03-22 08:07:54	<--	srhb` (~srhb@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 264 seconds)
2013-03-22 08:08:35	pharaun	In the formal land of academic cryptanalysis, related-key attacks still count as worthwhile results, despite their lack of applicability to most practical scenarios.
2013-03-22 08:08:59	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-22 08:09:35	otters	that's the kind of stuff #haskell loves though
2013-03-22 08:10:15	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-22 08:11:31	pharaun	this is educational
2013-03-22 08:11:58	-->	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-22 08:12:19	pharaun	also for additional fun, read up on lucky 13, beast, crime, and all of the other fun tls/ssl attacks
2013-03-22 08:12:20	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 255 seconds)
2013-03-22 08:12:27	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-22 08:13:03	<--	MnO2 (~MnO2@nat/yahoo/x-dzeybxdfhldtstgv) has quit (Quit: MnO2)
2013-03-22 08:14:23	BadKitty	How would one make a basic tls client/server where the certificates are required, no public sent in the plain and signed by a top level certificate?
2013-03-22 08:14:33	BadKitty	Or.. Just top-level sign I guess.
2013-03-22 08:14:40	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-22 08:16:31	-->	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has joined #haskell
2013-03-22 08:16:43	<--	fosky (~fosky@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-22 08:16:57	BadKitty	Need to send bytestrings around through tls
2013-03-22 08:17:32	<--	centrinia (~exc@adsl-184-36-95-209.asm.bellsouth.net) has quit (Client Quit)
2013-03-22 08:17:56	<--	miclorb (~miclorb@ppp121-44-84-133.lns20.syd6.internode.on.net) has quit (Remote host closed the connection)
2013-03-22 08:20:37	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 08:20:51	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 08:21:19	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 08:23:01	<--	kamatsu (~Adium@2402:1800:4000:2:cdca:2f79:3e60:97a8) has quit (Quit: Leaving.)
2013-03-22 08:23:02	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-22 08:23:44	<--	nsxt (~nsxt@c-68-45-12-237.hsd1.nj.comcast.net) has quit (Quit: Leaving)
2013-03-22 08:26:26	-->	m3ga (~erikd@110.151.66.180) has joined #haskell
2013-03-22 08:27:04	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-03-22 08:27:11	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 255 seconds)
2013-03-22 08:28:08	<--	freiksenet (~freiksene@freiksenet.com) has quit (Quit: WeeChat 0.3.2)
2013-03-22 08:28:21	-->	freiksenet (~freiksene@freiksenet.com) has joined #haskell
2013-03-22 08:29:19	<--	jb55_ (~jb55@192-0-129-165.cpe.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-03-22 08:29:49	-->	randomclown (~randomclo@unaffiliated/randomclown) has joined #haskell
2013-03-22 08:29:59	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Client Quit)
2013-03-22 08:30:50	-->	silver (~silver@37.214.42.47) has joined #haskell
2013-03-22 08:30:54	-->	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has joined #haskell
2013-03-22 08:32:24	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-22 08:34:54	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 264 seconds)
2013-03-22 08:35:21	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-03-22 08:35:53	-->	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 08:36:35	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 08:36:44	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-22 08:37:02	paddymahoney	hey all, what are you using to edit haskell?
2013-03-22 08:37:14	MasseR	Vim
2013-03-22 08:37:45	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-22 08:37:50	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-22 08:37:59	<--	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has quit (Ping timeout: 256 seconds)
2013-03-22 08:38:23	Hermit	emacs
2013-03-22 08:38:25	<--	m3ga (~erikd@110.151.66.180) has quit (Ping timeout: 260 seconds)
2013-03-22 08:38:31	-->	LAMMJohnson (~ja@user-5af43b24.broadband.tesco.net) has joined #haskell
2013-03-22 08:38:55	BadKitty	vim
2013-03-22 08:39:20	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 255 seconds)
2013-03-22 08:40:06	BadKitty	Oh and zsh
2013-03-22 08:40:26	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-22 08:40:26	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-22 08:40:26	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-22 08:40:28	BadKitty	Substitutions <3
2013-03-22 08:40:32	paddymahoney	lovely! any particular modes you prefer?
2013-03-22 08:40:43	BadKitty	modes?
2013-03-22 08:40:45	shachaf	Command mode is pretty good.
2013-03-22 08:41:32	shachaf	paddymahoney: To be less unhelpful: Asking about editors in here won't get you very far (though it might start some flame wars if you're not careful).
2013-03-22 08:41:41	shachaf	paddymahoney: Whichever editor you're using should be just fine.
2013-03-22 08:41:56	shachaf	You don't really need special editor support for Haskell.
2013-03-22 08:42:04	Saizan	@where haskell-mode
2013-03-22 08:42:05	lambdabot	http://haskell.org/haskellwiki/Haskell_mode_for_Emacs
2013-03-22 08:42:05	 *	BadKitty fules the fire
2013-03-22 08:42:07	BadKitty	VIM!
2013-03-22 08:42:27	shachaf	BadKitty: Please don't.
2013-03-22 08:42:29	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-03-22 08:42:48	Saizan	http://www.haskell.org/haskellwiki/Editors <- this page has details, it seems
2013-03-22 08:42:49	BadKitty	shachaf: I'm not.
2013-03-22 08:42:54	<--	EarlGray (~mitra@195.20.154.2) has quit (Ping timeout: 245 seconds)
2013-03-22 08:42:58	Saizan	well, links mostly
2013-03-22 08:43:04	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-22 08:43:15	paddymahoney	thanks all! just curious, I like a pretty bare bones editor, I could use a reindent all, a few other small features.
2013-03-22 08:43:17	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-22 08:43:17	shachaf	Ah, emacs has a thing called haskell-mode specifically.
2013-03-22 08:43:33	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Quit: [swift])
2013-03-22 08:43:39	shachaf	paddymahoney: "reindent all" isn't really a thing you can usually do because indentation is significant in Haskell code.
2013-03-22 08:43:53	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 08:45:11	Hermit	paddymahoney: but if you are so worried about indentation, emacs has 3 indentation modules
2013-03-22 08:45:24	Hermit	paddymahoney: I'm sure one of them will suit your tastes
2013-03-22 08:45:31	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-03-22 08:45:58	shachaf	If you're not already using emacs, you probably shouldn't start using it just for Haskell. Then you have two complicated things to learn at once.
2013-03-22 08:46:25	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-22 08:46:30	-->	cdidd (~cdidd@95-27-11-19.broadband.corbina.ru) has joined #haskell
2013-03-22 08:47:11	Hermit	a ghci commands crafting question: How can I use System.Process.std_in (or System.Process.Internals.std_in) without ghci bitching about invisible constructor? (note: they ARE exported)
2013-03-22 08:47:18	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-22 08:47:49	Hermit	(I already workarrounded it using  :m System.Process  in .ghci, but I'd like to use this directly, no imports)
2013-03-22 08:48:18	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 08:48:34	<--	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 08:48:53	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-22 08:49:02	-->	stat_vi (~stat@dslb-094-218-226-004.pools.arcor-ip.net) has joined #haskell
2013-03-22 08:49:15	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Quit: Konversation terminated!)
2013-03-22 08:50:05	-->	quchen (~david@p54AA309D.dip.t-dialin.net) has joined #haskell
2013-03-22 08:50:22	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 08:50:51	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 08:50:52	Hermit	(or any constructor from System.Process.Internals for that matter)
2013-03-22 08:51:15	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-03-22 08:51:29	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 255 seconds)
2013-03-22 08:51:33	<--	Riussi_ (~riussi@codemancers.fi) has quit (Read error: Connection reset by peer)
2013-03-22 08:51:41	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-22 08:51:44	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-22 08:52:08	-->	hkBst (~marijn@79.170.210.172) has joined #haskell
2013-03-22 08:52:08	<--	hkBst (~marijn@79.170.210.172) has quit (Changing host)
2013-03-22 08:52:08	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-22 08:52:59	-->	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has joined #haskell
2013-03-22 08:53:34	-->	jb55 (~jb55@192-0-129-165.cpe.teksavvy.com) has joined #haskell
2013-03-22 08:54:32	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-03-22 08:54:48	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 08:54:59	<--	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has quit (Client Quit)
2013-03-22 08:55:22	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 08:56:04	 *	BadKitty installs yi
2013-03-22 08:56:16	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 240 seconds)
2013-03-22 08:56:18	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 252 seconds)
2013-03-22 08:56:42	BadKitty	hackage yi is broken, git yi not. (With latest ghc)
2013-03-22 08:56:59	<--	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-22 08:57:32	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-03-22 08:58:42	-->	moai (~m@141.70.23.87) has joined #haskell
2013-03-22 09:00:01	-->	jonke (~quassel@h87-96-186-149.dynamic.se.alltele.net) has joined #haskell
2013-03-22 09:00:08	-->	xkcd_ (~chatzilla@103.5.132.50) has joined #haskell
2013-03-22 09:00:54	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-03-22 09:01:21	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-22 09:01:26	-->	takuan (~takuan@d8D86FA8E.access.telenet.be) has joined #haskell
2013-03-22 09:01:40	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-03-22 09:02:09	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Remote host closed the connection)
2013-03-22 09:02:19	BadKitty	Naww
2013-03-22 09:02:57	<--	xkcd (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-22 09:03:03	--	xkcd_ is now known as xkcd
2013-03-22 09:03:11	-->	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 09:03:13	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 09:03:48	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 09:04:41	-->	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has joined #haskell
2013-03-22 09:04:54	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 264 seconds)
2013-03-22 09:06:22	-->	sabalaba (~Adium@c-76-21-4-232.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 09:07:34	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 09:07:34	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 09:07:34	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 09:08:18	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-22 09:11:23	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-22 09:11:25	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-03-22 09:12:39	-->	JaRoel|4d (~jaroel|4d@94.142.215.213) has joined #haskell
2013-03-22 09:13:03	-->	madjestic (~madjestic@188.89.75.186) has joined #haskell
2013-03-22 09:13:18	<--	quchen (~david@p54AA309D.dip.t-dialin.net) has quit (Ping timeout: 276 seconds)
2013-03-22 09:13:24	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-22 09:13:31	-->	juxovec (~juxovec@ip-37-188-227-73.eurotel.cz) has joined #haskell
2013-03-22 09:14:44	-->	MrFenix_ (~JanB@p57A18F4D.dip.t-dialin.net) has joined #haskell
2013-03-22 09:14:46	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-03-22 09:15:04	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-22 09:15:22	<--	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 09:15:28	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 09:15:42	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-22 09:16:16	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-22 09:16:48	<--	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-03-22 09:17:40	-->	heruur (~tvh@220-158-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-22 09:17:54	<--	MrFenix (~JanB@p57A1BF37.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-22 09:18:03	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-22 09:18:36	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-22 09:18:50	<--	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-22 09:19:06	-->	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has joined #haskell
2013-03-22 09:19:13	<--	Urchin (~urchin@unaffiliated/urchin) has quit (Ping timeout: 248 seconds)
2013-03-22 09:20:13	--	centrinia is now known as Toxic2
2013-03-22 09:20:31	<--	museun (~museun@c-98-252-144-117.hsd1.ga.comcast.net) has quit (Quit: ZNC - http://znc.in)
2013-03-22 09:20:38	--	Toxic2 is now known as centrinia
2013-03-22 09:21:06	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-22 09:21:28	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 09:22:23	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-03-22 09:22:41	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-22 09:23:00	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Ping timeout: 264 seconds)
2013-03-22 09:23:02	<--	juxovec (~juxovec@ip-37-188-227-73.eurotel.cz) has quit (Ping timeout: 256 seconds)
2013-03-22 09:23:04	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-22 09:23:15	-->	blueonyx (~blueonyx@152.vpn.tu-cottbus.de) has joined #haskell
2013-03-22 09:23:15	<--	blueonyx (~blueonyx@152.vpn.tu-cottbus.de) has quit (Changing host)
2013-03-22 09:23:15	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 09:23:29	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-22 09:24:44	-->	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 09:24:47	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-22 09:25:59	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-22 09:26:18	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-22 09:26:52	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 09:27:31	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 264 seconds)
2013-03-22 09:29:14	<--	madjestic (~madjestic@188.89.75.186) has quit (Ping timeout: 252 seconds)
2013-03-22 09:29:48	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-22 09:30:03	-->	madjestic (~madjestic@188.89.75.186) has joined #haskell
2013-03-22 09:30:08	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-22 09:30:40	<--	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-22 09:30:56	-->	ijp (~user@host86-173-114-23.range86-173.btcentralplus.com) has joined #haskell
2013-03-22 09:31:28	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Read error: Operation timed out)
2013-03-22 09:31:30	<--	ivan\ (~ivan@unaffiliated/ivan/x-000001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-22 09:31:32	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-22 09:31:53	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-22 09:32:09	<--	LAMMJohnson (~ja@user-5af43b24.broadband.tesco.net) has quit (Quit: leaving)
2013-03-22 09:32:28	-->	ivan\ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-03-22 09:32:42	-->	LAMMJohnson (~ja@user-5af43b24.broadband.tesco.net) has joined #haskell
2013-03-22 09:32:45	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-03-22 09:33:23	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-22 09:34:23	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 09:34:48	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-22 09:35:08	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 09:35:08	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 09:35:08	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 09:35:14	<--	madjestic (~madjestic@188.89.75.186) has quit (Read error: Connection reset by peer)
2013-03-22 09:35:57	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-03-22 09:36:27	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 09:36:56	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 255 seconds)
2013-03-22 09:37:43	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-03-22 09:37:47	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-22 09:38:02	--	Volstvok is now known as railguntesttest
2013-03-22 09:38:29	--	railguntesttest is now known as volstvok
2013-03-22 09:38:53	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 09:40:07	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-22 09:40:55	-->	eldariof (~CLD@89.22.1.3) has joined #haskell
2013-03-22 09:40:55	<--	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has quit (Read error: Connection reset by peer)
2013-03-22 09:40:57	<--	eldariof (~CLD@89.22.1.3) has quit (Client Quit)
2013-03-22 09:41:05	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-22 09:41:40	-->	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-22 09:41:44	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 256 seconds)
2013-03-22 09:41:54	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-22 09:42:57	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-22 09:43:29	<--	heruur (~tvh@220-158-103-86.dynamic.dsl.tng.de) has quit (Quit: Leaving.)
2013-03-22 09:43:31	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-22 09:44:18	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-22 09:44:29	-->	kurkale6ka (~kurkale6k@84.19.53.21) has joined #haskell
2013-03-22 09:44:40	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-22 09:46:37	kurkale6ka	Hi, in the following http://bpaste.net/show/85545/ I don't understand showNameQuestion (name knight). To me nae is a constant in the Knight data type, so why is it used as a function?
2013-03-22 09:46:49	kurkale6ka	nae
2013-03-22 09:46:53	kurkale6ka	name :)
2013-03-22 09:47:02	-->	madjestic (~madjestic@188.89.75.186) has joined #haskell
2013-03-22 09:47:33	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-22 09:47:53	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Quit: leaving)
2013-03-22 09:48:02	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Max SendQ exceeded)
2013-03-22 09:48:29	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-22 09:48:39	-->	srhb (~srhb@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-22 09:49:10	-->	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has joined #haskell
2013-03-22 09:49:36	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 09:49:48	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 09:50:17	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-03-22 09:50:27	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-03-22 09:50:49	-->	shock_one (~shock_one@46.118.141.174) has joined #haskell
2013-03-22 09:50:55	<--	idntfy[work] (~idntfywor@188.64.147.238) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-22 09:51:26	Saizan	name is a field of Knight, so it's also an accessor function getting out that field out of a Knight value
2013-03-22 09:51:39	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 256 seconds)
2013-03-22 09:52:19	<--	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-22 09:53:32	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-22 09:53:34	kurkale6ka	Saizan: thanks
2013-03-22 09:53:35	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 09:53:39	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Read error: Operation timed out)
2013-03-22 09:53:59	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 09:55:30	<--	setmeaway (stemearay@119.201.52.130) has quit (Read error: Connection reset by peer)
2013-03-22 09:55:30	-->	bind (~bind@D4B2749A.static.ziggozakelijk.nl) has joined #haskell
2013-03-22 09:55:47	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-22 09:55:48	-->	setmeaway (setmeaway3@119.201.52.130) has joined #haskell
2013-03-22 09:56:28	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 09:56:28	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 09:56:28	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 09:56:47	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-22 09:56:55	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-03-22 09:57:24	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-22 09:58:03	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 09:59:15	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-22 09:59:26	-->	geh_meh_geh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-22 10:00:08	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-03-22 10:00:27	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 260 seconds)
2013-03-22 10:00:33	<--	b__ (~basdirks@185.6.205.4) has quit (Quit: leaving)
2013-03-22 10:01:52	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-22 10:01:52	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 10:01:52	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 256 seconds)
2013-03-22 10:01:53	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Ping timeout: 248 seconds)
2013-03-22 10:01:55	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 10:02:17	-->	jang1 (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has joined #haskell
2013-03-22 10:02:45	<--	predator217 (~predator1@p50804E41.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-22 10:02:56	-->	predator117 (~predator1@p50804E41.dip.t-dialin.net) has joined #haskell
2013-03-22 10:03:28	<--	xkcd (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-22 10:03:52	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-03-22 10:04:01	-->	einsof (~einsof@h-36-195.a336.priv.bahnhof.se) has joined #haskell
2013-03-22 10:06:14	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 10:06:24	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 10:06:58	-->	nrgs1 (~nrgs1@host-155-149.hs.le.ac.uk) has joined #haskell
2013-03-22 10:07:06	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 10:07:28	nrgs1	?
2013-03-22 10:07:54	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Ping timeout: 276 seconds)
2013-03-22 10:08:00	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-03-22 10:08:03	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 10:08:18	--	preflex_ is now known as preflex
2013-03-22 10:08:53	-->	jbu (~jbu@adsl-75-11-175-41.dsl.sndg02.sbcglobal.net) has joined #haskell
2013-03-22 10:10:04	jbu	hi all. what does it mean to see a constructor like data Blah a = Foo ()?  What does the () mean in this context?
2013-03-22 10:10:15	 *	hackagebot binary-file 0.4 - read/write binary file  http://hackage.haskell.org/package/binary-file-0.4 (YoshikuniJujo)
2013-03-22 10:10:41	fumieval	:t ()
2013-03-22 10:10:43	lambdabot	()
2013-03-22 10:10:49	fumieval	just type.
2013-03-22 10:11:24	jbu	I don't really follow
2013-03-22 10:11:29	Saizan	jbu: () is the type with only one defined value, also called ()
2013-03-22 10:11:54	jbu	Ah, ok
2013-03-22 10:11:57	quchen	jbu: () ("Unit") is like a no-type in Haskell. The concept behind it is similar to void in other languages.
2013-03-22 10:12:09	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-22 10:12:12	<--	nrgs1 (~nrgs1@host-155-149.hs.le.ac.uk) has quit (Quit: leaving)
2013-03-22 10:12:14	quchen	It's basically "data Unit = Unit".
2013-03-22 10:12:17	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 256 seconds)
2013-03-22 10:12:35	jbu	Saizan: so in my example, is that just syaing that Foo takes no parameters in its constructor?
2013-03-22 10:12:38	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 10:13:07	<--	takuan (~takuan@d8D86FA8E.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-03-22 10:13:15	-->	flimbar (~nrgs1@host-155-149.hs.le.ac.uk) has joined #haskell
2013-03-22 10:13:27	<--	mechainai (~mechairoi@101-140-24-154f1.osk3.eonet.ne.jp) has quit (Ping timeout: 258 seconds)
2013-03-22 10:13:32	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Read error: Operation timed out)
2013-03-22 10:13:34	quchen	To take your example, "data Blah = Foo Int" would mean that you can put all possible Int values in a Foo, which means many different numbers.
2013-03-22 10:13:46	quchen	If you change that to "Foo ()", then Foo can take all possible values of type ().
2013-03-22 10:13:49	-->	mechainai (~mechairoi@101-140-24-154f1.osk3.eonet.ne.jp) has joined #haskell
2013-03-22 10:13:59	quchen	Type () however has only one value, which is also called ().
2013-03-22 10:14:17	-->	Riussi (~riussi@codemancers.fi) has joined #haskell
2013-03-22 10:14:25	jbu	quchen: so basically Foo always takes in the unit value, and nothing else? essentially it takes no parameters? is that the correct way to think of it?
2013-03-22 10:14:31	supki	type () has 2 values
2013-03-22 10:14:45	quchen	supki: not now.
2013-03-22 10:15:26	quchen	jbu: Well, Foo takes no type parameters.
2013-03-22 10:15:46	quchen	But note that "Foo :: () -> Blah a"
2013-03-22 10:15:54	arbn	supki: You're thinking of undefined, or what?
2013-03-22 10:16:03	supki	yes
2013-03-22 10:16:03	quchen	arbn: yes
2013-03-22 10:16:24	quchen	jbu: So in order to construct a Blah-typed value, you have to invoke the Foo data constructor with ().
2013-03-22 10:16:33	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-22 10:16:35	jbu	quchen: gotcha, thanks
2013-03-22 10:16:36	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-22 10:17:01	quchen	jbu: () often means you're not interested in the result of something. For example,
2013-03-22 10:17:04	jbu	quchen: I'm not quite sure why I'd have to even pass "()" to the constructor instead of just not passing anything
2013-03-22 10:17:05	quchen	:t putStrLn
2013-03-22 10:17:06	lambdabot	String -> IO ()
2013-03-22 10:17:14	-->	sss_ (6d43d565@gateway/web/freenode/ip.109.67.213.101) has joined #haskell
2013-03-22 10:17:23	jbu	oh, I see
2013-03-22 10:17:35	quchen	putStrLn shouldn't return any value. What it's supposed to do is some sort of side effect.
2013-03-22 10:17:45	quchen	The result of a computation here is not interesting.
2013-03-22 10:17:54	arbn	jbu: You do, because you need a kind of *, and not * -> *
2013-03-22 10:18:07	quchen	On the other hand, getLine has type "IO String", because you're interested in an actual value as a result, not just some side stuff.
2013-03-22 10:18:11	quchen	:t getLine
2013-03-22 10:18:13	lambdabot	IO String
2013-03-22 10:18:23	sss_	Can I pattern match against an empty Data.Text?
2013-03-22 10:18:42	arbn	jbu: () is sometimes used when you need a concrete type, but don't really care what it is.
2013-03-22 10:18:48	quchen	sss_: I don't think you can pattern match with Text at all. Guards might be the way to go.
2013-03-22 10:19:04	sss_	quchen: ok, thank you
2013-03-22 10:19:15	<--	mechainai (~mechairoi@101-140-24-154f1.osk3.eonet.ne.jp) has quit (Quit: Tiarra 0.1+svn-29652: SIGTERM received; exit)
2013-03-22 10:19:41	quchen	sss_: foo text | empty text = DO_IF_EMPTY | otherwise = ...
2013-03-22 10:19:43	quchen	Something like that
2013-03-22 10:19:55	quchen	Eh, "empty" should've been "null"
2013-03-22 10:21:07	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-22 10:21:34	sss_	thanks
2013-03-22 10:21:45	<--	kcj (~casey@unaffiliated/kcj) has quit (Remote host closed the connection)
2013-03-22 10:22:10	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-22 10:22:16	jbu	ok thanks all
2013-03-22 10:22:22	jbu	more clear now :)
2013-03-22 10:22:50	<--	coeus_ (~coeus@dslb-088-078-011-156.pools.arcor-ip.net) has quit (Ping timeout: 255 seconds)
2013-03-22 10:22:54	-->	charliesome (~textual@124-148-165-17.dyn.iinet.net.au) has joined #haskell
2013-03-22 10:23:14	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-03-22 10:24:50	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 10:24:59	-->	Zedrikov (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has joined #haskell
2013-03-22 10:24:59	<--	ozgura (~ozgura@host-2-96-30-184.as13285.net) has quit (Remote host closed the connection)
2013-03-22 10:25:12	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-03-22 10:25:17	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-22 10:25:37	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-22 10:29:19	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Quit: leaving)
2013-03-22 10:29:35	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 10:29:44	-->	ulfdoz (~mary@p5B38A29B.dip.t-dialin.net) has joined #haskell
2013-03-22 10:30:16	 *	hackagebot parsec3 1.0.0.5 - Monadic parser combinators  http://hackage.haskell.org/package/parsec3-1.0.0.5 (ChristianMaeder)
2013-03-22 10:30:55	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Read error: Operation timed out)
2013-03-22 10:32:26	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-22 10:32:44	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Lost terminal)
2013-03-22 10:32:54	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-22 10:33:04	--	pepijn_away is now known as pepijndevos
2013-03-22 10:33:04	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-22 10:34:58	-->	swi (~swi@altlinux/developer/swi) has joined #haskell
2013-03-22 10:36:28	-->	MnO2 (~MnO2@nat/yahoo/x-nqiqziitjkmipige) has joined #haskell
2013-03-22 10:36:53	<--	bmfx (~bmfx@148-45-95-178.pool.ukrtel.net) has quit (Read error: Operation timed out)
2013-03-22 10:36:59	<--	predator117 (~predator1@p50804E41.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-22 10:37:03	-->	takuan (~takuan@d8D86FA8E.access.telenet.be) has joined #haskell
2013-03-22 10:37:11	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-22 10:37:28	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-22 10:37:41	-->	bru` (~bruno`@4077.rez-gif.supelec.fr) has joined #haskell
2013-03-22 10:37:43	-->	usr1328 (59eede12@gateway/web/freenode/ip.89.238.222.18) has joined #haskell
2013-03-22 10:37:54	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 10:37:54	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 10:37:54	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 10:38:53	<--	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-03-22 10:39:17	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-22 10:39:35	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 10:39:36	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 10:39:36	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 10:39:58	-->	bmfx (~bmfx@137-104-112-92.pool.ukrtel.net) has joined #haskell
2013-03-22 10:40:23	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Ping timeout: 256 seconds)
2013-03-22 10:40:28	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-22 10:41:56	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-22 10:41:59	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 260 seconds)
2013-03-22 10:43:24	-->	predator117 (~predator1@p50804E41.dip.t-dialin.net) has joined #haskell
2013-03-22 10:43:43	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Ping timeout: 264 seconds)
2013-03-22 10:44:38	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 256 seconds)
2013-03-22 10:45:01	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-03-22 10:45:08	<--	shock_one (~shock_one@46.118.141.174) has quit (Ping timeout: 256 seconds)
2013-03-22 10:45:22	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-22 10:47:31	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 10:47:49	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-22 10:48:52	-->	sanemat (~sanemat@6.208.138.210.vmobile.jp) has joined #haskell
2013-03-22 10:48:55	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-22 10:50:29	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 10:50:38	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-22 10:51:24	<--	sanemat (~sanemat@6.208.138.210.vmobile.jp) has quit (Remote host closed the connection)
2013-03-22 10:51:30	-->	hallski (~hallski@80.239.169.202) has joined #haskell
2013-03-22 10:51:53	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-22 10:52:05	-->	byron (~byron@2601:9:c80:73:38c8:b029:440d:b72b) has joined #haskell
2013-03-22 10:53:10	<--	JaRoel|4d (~jaroel|4d@94.142.215.213) has quit (Ping timeout: 260 seconds)
2013-03-22 10:53:33	<--	byron (~byron@2601:9:c80:73:38c8:b029:440d:b72b) has quit (Client Quit)
2013-03-22 10:53:35	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-22 10:53:59	-->	Testos (User@bzq-109-64-163-95.red.bezeqint.net) has joined #haskell
2013-03-22 10:55:19	madjestic	hey hpc, I am trying to work through your suggestions from yesterday, I've got the following piece of code, and I am getting a conflict error: http://hpaste.org/84472 .  Does it require other dependencies to make it work?
2013-03-22 10:55:56	madjestic	*dependencies -> extensions
2013-03-22 10:57:24	-->	bitonic (~user@b01bf0a7.bb.sky.com) has joined #haskell
2013-03-22 10:58:09	-->	schlicht_ (~fl@g231184107.adsl.alicedsl.de) has joined #haskell
2013-03-22 10:58:33	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 10:58:51	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-03-22 10:59:12	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 10:59:14	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-22 10:59:15	<--	takuan (~takuan@d8D86FA8E.access.telenet.be) has quit (Ping timeout: 276 seconds)
2013-03-22 11:01:30	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-22 11:01:35	<--	jbu (~jbu@adsl-75-11-175-41.dsl.sndg02.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2013-03-22 11:02:11	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 11:02:39	-->	XexonixXexillion (~LudvikGal@130.56.91.115) has joined #haskell
2013-03-22 11:02:46	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 256 seconds)
2013-03-22 11:03:44	swi	Hello. i have a function lineSum x = (Just . show . sum) (read <$> words x::[Int]).  How can i make it error proof for i.e. if user input not numbers but some chars ?
2013-03-22 11:03:49	sopvop	heh, ghc with -O2 hangs on my trifecta parser
2013-03-22 11:03:50	<--	mmaruseacph2 (~mihai@swarm.cs.pub.ro) has quit (Ping timeout: 252 seconds)
2013-03-22 11:04:43	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-22 11:04:55	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-22 11:05:02	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 11:05:10	supki	swi: don't use read, use reads
2013-03-22 11:05:19	usr1328	Can someone give me a hint on where to begin learning about modeling computation with the more known haskell typeclasses (functors, applicatives, monads, arrows)? Although I understand what each typeclass brings to the table, I just can't wrap my head around where each one should be used while the others would be overkill.
2013-03-22 11:05:37	--	geh_meh_geh is now known as gehmehgeh
2013-03-22 11:06:07	arkeet	usr1328: have you seen the typeclassopedia?
2013-03-22 11:06:08	-->	gusto (~gusto@ppp-62-216-206-179.dynamic.mnet-online.de) has joined #haskell
2013-03-22 11:06:16	-->	Maarten__ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has joined #haskell
2013-03-22 11:07:37	arkeet	swi: there is also readMaybe and readEither in Text.Read with recent versions of ghc
2013-03-22 11:08:34	arkeet	:t readMaybe
2013-03-22 11:08:35	lambdabot	Not in scope: `readMaybe'
2013-03-22 11:08:41	arkeet	lambdabot isn't on a recent enough version I guess.
2013-03-22 11:08:42	-->	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-22 11:08:43	arkeet	:t readEither
2013-03-22 11:08:44	lambdabot	    Not in scope: `readEither'
2013-03-22 11:08:44	lambdabot	    Perhaps you meant one of these:
2013-03-22 11:08:44	lambdabot	      `readLitChar' (imported from Data.Char),
2013-03-22 11:08:57	arkeet	er
2013-03-22 11:09:02	arkeet	:t Text.Read.readMaybe
2013-03-22 11:09:04	lambdabot	Not in scope: `Text.Read.readMaybe'
2013-03-22 11:09:15	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-22 11:09:16	arkeet	right.
2013-03-22 11:09:18	supki	lambdabot is on 7.4
2013-03-22 11:09:35	arkeet	right, and those were introduced in base 4.6
2013-03-22 11:09:37	<--	rhdoenges (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-03-22 11:10:30	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Read error: Connection reset by peer)
2013-03-22 11:10:40	-->	Diaoer (~Diaoer@116.239.4.194) has joined #haskell
2013-03-22 11:10:50	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 11:10:55	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:11:30	-->	SoupEvil (~jloos@e177117042.adsl.alicedsl.de) has joined #haskell
2013-03-22 11:11:36	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:11:36	-->	flori (flori@irc.ping.de) has joined #haskell
2013-03-22 11:12:12	swi	supki: it's seems i dont understand your point about reads
2013-03-22 11:13:18	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 264 seconds)
2013-03-22 11:13:37	supki	> read "M" :: Int
2013-03-22 11:13:38	lambdabot	  *Exception: Prelude.read: no parse
2013-03-22 11:13:42	supki	> reads "M" :: [(Int, String)]
2013-03-22 11:13:43	lambdabot	  []
2013-03-22 11:13:48	supki	> reads "123" :: [(Int, String)]
2013-03-22 11:13:49	lambdabot	  [(123,"")]
2013-03-22 11:13:52	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 11:14:22	swi	hm
2013-03-22 11:14:22	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-22 11:14:28	alang	edwardk: hello
2013-03-22 11:14:29	supki	swi: in other words, it does not fail in runtime if user provides incorrect input
2013-03-22 11:14:54	<--	SoupE (~jloos@e177127225.adsl.alicedsl.de) has quit (Ping timeout: 252 seconds)
2013-03-22 11:15:19	<--	Diaoer (~Diaoer@116.239.4.194) has quit (Client Quit)
2013-03-22 11:16:31	arkeet	@let readMaybe s = case reads s of [(x,"")] -> Just x; _ -> Nothing
2013-03-22 11:16:33	lambdabot	 Defined.
2013-03-22 11:16:48	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 11:17:00	arkeet	> readMaybe "123" :: Maybe Int
2013-03-22 11:17:03	lambdabot	  Just 123
2013-03-22 11:17:05	arkeet	> readMaybe "blah" :: Maybe Int
2013-03-22 11:17:06	lambdabot	  Nothing
2013-03-22 11:17:40	-->	lennart_ (~lennart@kiel-d9bfc184.pool.mediaWays.net) has joined #haskell
2013-03-22 11:18:28	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 245 seconds)
2013-03-22 11:19:34	swi	and if i don need Just at this point ?
2013-03-22 11:19:39	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:19:52	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:20:05	arkeet	then you'll have to deal with an error.
2013-03-22 11:20:08	Palmik	Hmm, if I have (foo :: Ord a => a -> a -> Bool), it should hold that if (compare a b == compare x y) then (foo a b == foo x y) (if we ignore things like overlapping instances, etc.). I feel that it should somehow follow from Yoneda's Lemma.
2013-03-22 11:20:17	Palmik	Is that right?
2013-03-22 11:20:58	swi	arkeet: Yes. And that was what i asked, how to deal with error in that situation ?
2013-03-22 11:21:23	<--	eff (~quassel@114.250.93.166) has quit (Ping timeout: 252 seconds)
2013-03-22 11:21:24	arkeet	swi: you can't catch errors outside IO.
2013-03-22 11:21:55	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 11:21:59	arkeet	so to read stuff safely, you'll need to use something like reads or readMaybe
2013-03-22 11:22:09	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 11:22:19	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:22:31	swi	arkeet: hm. or i can use something like brackets in my 'do' block where i call this function ?
2013-03-22 11:24:23	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-22 11:24:43	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 11:25:03	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 11:25:15	-->	shurikas (~Kostas@195.181.64.50) has joined #haskell
2013-03-22 11:25:24	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Ping timeout: 264 seconds)
2013-03-22 11:25:51	-->	igrekster (~andrey@37.139.64.15) has joined #haskell
2013-03-22 11:25:59	arkeet	Palmik: well, parametricity gives you this: if x <= y == f x <= f y forall x and y, then foo x y = foo (f x) (f y)
2013-03-22 11:26:07	<--	xcv (~xcv@lenoil.plus.com) has quit (Remote host closed the connection)
2013-03-22 11:26:18	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-22 11:27:04	arkeet	@free foo :: (a -> a -> Bool) -> (a -> a -> Bool)
2013-03-22 11:27:04	lambdabot	(forall x. g x = h (f x) . f) => foo g y = foo h (f y) . f
2013-03-22 11:27:05	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-22 11:27:07	-->	mmaruseacph2 (~mihai@swarm.cs.pub.ro) has joined #haskell
2013-03-22 11:27:14	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-22 11:27:15	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 260 seconds)
2013-03-22 11:27:16	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-22 11:27:19	<--	zhulikas (~Kostas@213.159.34.100) has quit (Read error: Operation timed out)
2013-03-22 11:27:20	arkeet	take g = h = (<=) there
2013-03-22 11:28:01	arkeet	since a lawful dictionary for Ord a is equivalent to (a -> a -> Bool)
2013-03-22 11:28:20	arkeet	given by (<=)
2013-03-22 11:28:44	-->	Thomyho3 (~thomyho@mnhm-590c2689.pool.mediaWays.net) has joined #haskell
2013-03-22 11:30:11	arkeet	I guess you could probably generalize a little.
2013-03-22 11:30:26	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:30:41	arkeet	yeah,
2013-03-22 11:30:47	<--	nus-- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-22 11:30:47	-->	k00mi (~koomi@dslb-188-099-045-172.pools.arcor-ip.net) has joined #haskell
2013-03-22 11:30:56	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:31:06	arkeet	if f x <= f y = g x <= g y for all f and g, then foo (f x) (f y) = foo (g x) (g y)
2013-03-22 11:31:31	arkeet	Palmik: which implies your statement
2013-03-22 11:31:32	arkeet	:)
2013-03-22 11:31:50	arkeet	er
2013-03-22 11:31:55	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-22 11:31:56	arkeet	that should say, for all x and y.
2013-03-22 11:33:44	-->	tufflax (~tufflax@c213-89-254-181.bredband.comhem.se) has joined #haskell
2013-03-22 11:34:51	swi	arkeet: i think i understand you. Am i right that in case of using reads i can't write that my function as one-liner ? :)
2013-03-22 11:35:09	arkeet	swi: well it'll be a longer one-liner :p
2013-03-22 11:35:34	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 11:35:42	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-22 11:35:45	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 11:35:55	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:35:58	swi	arkeet: with a lambda's i think :)
2013-03-22 11:36:08	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-22 11:36:17	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 11:36:20	arkeet	well, you need to pattern match, so a case.
2013-03-22 11:36:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 11:36:36	swi	btw, what i can use instead of case  there ?
2013-03-22 11:37:01	arkeet	with reads? you don't.
2013-03-22 11:37:19	arkeet	well, you could do some messier thing to deconstruct the list and so on but then that would really make for a long line.
2013-03-22 11:37:36	Palmik	arkeet, how does it imply that (forall x, y, a, b . if (x <= y) = (a <= b) then (foo x y == foo a b))?
2013-03-22 11:38:25	arkeet	Palmik: do you agree that if f x <= f y = g x <= g y for all f and g, then foo (f x) (f y) = foo (g x) (g y)?
2013-03-22 11:38:47	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 11:38:50	arkeet	uhhh.
2013-03-22 11:38:53	arkeet	let's rename things.
2013-03-22 11:38:55	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:38:57	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:39:02	arkeet	er.
2013-03-22 11:39:05	arkeet	that should again be for all x and y.
2013-03-22 11:39:08	arkeet	not f and g.
2013-03-22 11:39:18	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-22 11:39:20	arkeet	anyway
2013-03-22 11:39:29	Palmik	No, honestly I'm not sure.
2013-03-22 11:39:45	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 11:39:47	arkeet	well it follows from a free theorem.
2013-03-22 11:40:12	arkeet	@free foo' :: (a -> a -> Bool) -> (a -> a -> Bool)
2013-03-22 11:40:12	lambdabot	(forall x. g x = h (f x) . f) => foo' g y = foo' h (f y) . f
2013-03-22 11:40:19	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-22 11:40:21	arkeet	in other words
2013-03-22 11:40:47	arkeet	(forall x y. g x y = h (f x) (f y)) => foo' g x y = foo' h (f x) (f y)
2013-03-22 11:40:54	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 11:41:02	arkeet	ok, let's stick with those names.
2013-03-22 11:41:04	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:41:23	arkeet	let g x y = k x <= k y, and h = (<=)
2013-03-22 11:41:24	Palmik	Ah, OK, if I take lambdabod's word for it (since I'm not sure how I would derive the theorem myself), then yes.
2013-03-22 11:41:25	arkeet	so that specializes to
2013-03-22 11:41:45	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:41:46	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-03-22 11:41:48	arkeet	hmm
2013-03-22 11:41:51	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-22 11:41:52	arkeet	uhhh
2013-03-22 11:42:01	arkeet	no
2013-03-22 11:42:08	arkeet	h x y = l x <= l y, and f = id.
2013-03-22 11:42:13	arkeet	I think.
2013-03-22 11:42:15	arkeet	no that's worse.
2013-03-22 11:42:28	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 11:42:32	arkeet	I haven't thought it through.
2013-03-22 11:42:46	arkeet	the point is that foo' (<=) is your foo.
2013-03-22 11:42:58	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-03-22 11:43:00	arkeet	so, from (forall x y. g x y = h (f x) (f y)) => foo' g x y = foo' h (f x) (f y)
2013-03-22 11:43:08	arkeet	take g = h = (<=), and foo = foo' (<=)
2013-03-22 11:43:15	-->	wyfrn_ (~wyfrn@p5B2BDD1D.dip.t-dialin.net) has joined #haskell
2013-03-22 11:43:21	arkeet	so (forall x y. x <= y = f x <= f y) => foo x y = foo (f x) (f y)
2013-03-22 11:43:28	-->	beaky (~beaky@bba68378.alshamil.net.ae) has joined #haskell
2013-03-22 11:43:39	arkeet	ok.
2013-03-22 11:43:40	Palmik	Yep, OK.
2013-03-22 11:43:50	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 11:43:53	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 11:44:07	<--	hiratara (~hiratara@g036117.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 252 seconds)
2013-03-22 11:44:50	arkeet	now suppose f :: Bool -> X, where X is your favourite type, let a = f False, and b = f True.
2013-03-22 11:45:06	arkeet	then forall x y. x <= y = f x <= f y is the same as a < b.
2013-03-22 11:45:30	arkeet	(here x and y are in Bool)
2013-03-22 11:45:35	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-03-22 11:45:38	arkeet	so:
2013-03-22 11:45:58	arkeet	yeah.
2013-03-22 11:45:58	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 11:46:02	solirc	So similar question to what I asked a couple of days ago:
2013-03-22 11:46:04	<--	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has quit (Ping timeout: 252 seconds)
2013-03-22 11:46:13	arkeet	if a < b, then you get stuff like
2013-03-22 11:46:16	solirc	`data Foo = Foo | Bar` is called a sum type, data `Foo = Foo String Int` is a product type, so how do we call `data Foo = Foo Int`?
2013-03-22 11:46:18	arkeet	foo False True = foo a b
2013-03-22 11:46:28	arkeet	foo False False = foo a a
2013-03-22 11:46:30	arkeet	and so on.
2013-03-22 11:46:31	solirc	singleton or something?
2013-03-22 11:46:57	Palmik	arkeet: OK, I will think about it, thanks.
2013-03-22 11:47:16	<--	chrisdotcode (~quassel@207.239.64.226) has quit (Read error: Connection reset by peer)
2013-03-22 11:47:21	ski	solirc : i'd say `data' introduces sum-of-product types
2013-03-22 11:47:21	arkeet	but wait.
2013-03-22 11:47:24	arkeet	in particular:
2013-03-22 11:47:28	arkeet	if a < b and a' < b'
2013-03-22 11:47:34	arkeet	then foo a b = foo False True = foo a' b'
2013-03-22 11:47:39	solirc	ski: In general yes
2013-03-22 11:47:42	ski	solirc : so that's a sum-of-product with only one term, with only one factor
2013-03-22 11:48:18	dEPY	what are singleton lists?
2013-03-22 11:48:21	ski	conceptually, `Foo' just "happens" to have one alternative, with just one argument
2013-03-22 11:48:35	ski	(as opposed to a `newtype')
2013-03-22 11:48:44	solirc	ski: but we can call something like `data Foo = Foo` a unit type
2013-03-22 11:48:52	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-22 11:48:55	ski	dEPY : usually a list with exactly one element is meant
2013-03-22 11:48:59	arkeet	I'm not sure what happens when a == b.
2013-03-22 11:48:59	--	pepijndevos is now known as pepijn_away
2013-03-22 11:49:18	solirc	so wonder if there is a commonly understood term for something like `data Foo = Foo Int`
2013-03-22 11:49:32	-->	Philonous (~Philonous@dslb-088-075-030-176.pools.arcor-ip.net) has joined #haskell
2013-03-22 11:49:33	arkeet	I suppose if you assume all your orderings are antisymmetric, then the same thing holds again.
2013-03-22 11:49:34	solirc	or newtype for that matter
2013-03-22 11:49:35	dEPY	ski: Tnx.
2013-03-22 11:49:38	arkeet	er
2013-03-22 11:49:42	arkeet	total orderings
2013-03-22 11:49:43	<--	wyfrn_ (~wyfrn@p5B2BDD1D.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-22 11:49:48	ski	solirc : i suppose (if you care about bottoms atm) you can call it the lifting of `Int'
2013-03-22 11:50:03	arkeet	where a == b is not (a < b || b < a)
2013-03-22 11:50:10	-->	hiratara (~hiratara@h221069.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-22 11:50:26	-->	chrisdotcode (~quassel@207.239.64.226) has joined #haskell
2013-03-22 11:50:35	arkeet	Palmik: so I think the answer is "yes, if your Ord instances actually are total orderings."
2013-03-22 11:51:03	arkeet	hmm.
2013-03-22 11:51:25	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-22 11:51:26	-->	eff (~quassel@222.129.235.48) has joined #haskell
2013-03-22 11:51:32	swi	am i right: if i want to use pattern matching in function i need to: define it like foo somepather = ...;foor otherpather = ...; or use case. And in where block i can use only case version ?
2013-03-22 11:51:35	<--	boegel (~boegel@109.130.137.51) has quit (Quit: Leaving)
2013-03-22 11:51:49	ski	solirc : in the `newtype' case, the idea is usually (but not always) that all valid values of the "contained" type are valid (distinct) values of the new type (and vice versa) -- so, usually you do a `newtype' for abstractness, or to get a recursive type, or to make an instance for some type class
2013-03-22 11:51:51	-->	mugenken (~mugenken@p5DC65A45.dip.t-dialin.net) has joined #haskell
2013-03-22 11:51:59	--	pepijn_away is now known as pepijndevos
2013-03-22 11:52:00	-->	sonda (~sonda@ppp-245-14.26-151.libero.it) has joined #haskell
2013-03-22 11:52:07	arkeet	swi: in a where block you can write function declarations.
2013-03-22 11:52:13	arkeet	well, declarations.
2013-03-22 11:52:14	-->	boegel (~boegel@109.130.137.51) has joined #haskell
2013-03-22 11:52:28	arkeet	well, definitions.
2013-03-22 11:52:34	arkeet	which can use case if you want.
2013-03-22 11:53:02	-->	end3rW (~end3rW@lak-31-216.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-22 11:53:20	swi	em.. foo :: a -> a it declaration ?
2013-03-22 11:53:31	ski	(in the "abstract data type" case, sometimes you want only some values of the representation type to be valid as values for the abstract type (corresponding to a subset), and sometimes you want distinct representation values to represent the same abstract value (corresponding to a quotient/factor set))
2013-03-22 11:53:45	arkeet	swi: there needs to be a corresponding equation though.
2013-03-22 11:53:47	<--	XexonixXexillion (~LudvikGal@130.56.91.115) has quit (Remote host closed the connection)
2013-03-22 11:53:50	ski	solirc : .. not sure how much this helps
2013-03-22 11:54:01	Palmik	arkeet: OK, the reason I was asking is that I wanted to show that (Ord x => x -> x -> Bool) is iso with (Bool, Bool, Bool)... I think I have the right morphisms (functions), but I could not prove one of the identities (see here: http://hpaste.org/84475)
2013-03-22 11:54:34	solirc	ski: I'm really not puzzled about the use cases, but I'm just looking for a short descriptive name ;)
2013-03-22 11:54:49	yitz	swi: you can use pattern matching anywhere you define a function - top level, inside a where or let block, or in a lambda expression.
2013-03-22 11:54:58	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 11:55:04	arkeet	Palmik: sure, so this free theorem would help with that.
2013-03-22 11:55:16	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 11:55:17	ski	solirc : perhaps "lifting" or "wrapping", or something along that line
2013-03-22 11:55:20	arkeet	Palmik: also, in the definition of iso1, you don't need to compare things in Ordering :p
2013-03-22 11:55:40	solirc	ski: yeah, wrapping sounds good :)
2013-03-22 11:55:55	yitz	swi: you can also use pattern matching in a "pattern binding" in a let or where block, e.g.: x:xs = [1..]
2013-03-22 11:56:19	yitz	swi: and finally, of course, in a case expression.
2013-03-22 11:56:43	swi	yitz: so case kind of syntax version for per-line pat.match ?
2013-03-22 11:56:51	arkeet	Palmik: but I imagine that iso2 . iso1 = id might fail if our Ord instances aren't nice enough.
2013-03-22 11:57:56	dEPY	I made it trough 2 chapters of learn you a haskell. I'm actually proud of my self because I've been so unproductive lately. :)
2013-03-22 11:57:58	Palmik	arkeet: Yeah, I guess it would still work, but I wanted the morhisms to have the form iso1 : A -> B and iso2 : B -> A.
2013-03-22 11:58:07	arkeet	sure they do.
2013-03-22 11:58:25	yitz	swi: case can go anywhere inside any expression, regardless of lines. you could have as many case expressions as you want even on a single line (but you probably don't want that)
2013-03-22 11:58:36	Palmik	arkeet: I kind of assume that the definition of the Ord instance is not bogus.
2013-03-22 11:58:39	arkeet	:p
2013-03-22 11:58:49	<--	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has quit (Remote host closed the connection)
2013-03-22 11:58:50	arkeet	in that case I think you're safe.
2013-03-22 11:58:54	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 11:59:00	<--	ccasin (~ccasin@GRW565-3.cis.upenn.edu) has quit (Remote host closed the connection)
2013-03-22 11:59:13	swi	yitz: but seems like in my example, as arkeet says and as i see, i can't drop case
2013-03-22 11:59:22	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 256 seconds)
2013-03-22 11:59:55	Palmik	arkeet: I probably misunderstood your comment on iso2, you probably meant that I could have used 0 1 2 instead of LT EQ GT (for example), right?
2013-03-22 11:59:57	<--	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-22 12:00:07	yitz	swi: there was a period of time where i didn't like case, so i never used it, ever. i got over that, but anyway...
2013-03-22 12:00:08	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:00:08	arkeet	you could cmp 0 1, cmp () (), cmp 'b' 'a' if you wanted.
2013-03-22 12:00:15	Palmik	Even True False would do.
2013-03-22 12:00:21	Palmik	Yeah.
2013-03-22 12:00:22	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 246 seconds)
2013-03-22 12:00:24	arkeet	I would lean toward bool, yeah.
2013-03-22 12:01:00	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-22 12:01:15	hpaste	“Anonymous Coward” pasted “swi” at http://hpaste.org/84476
2013-03-22 12:01:20	yitz	swi: sorry i didnt see your example. did you paste something?
2013-03-22 12:01:34	swi	yitz: 15:01 < hpaste> “Anonymous Coward” pasted “swi” at http://hpaste.org/84476
2013-03-22 12:02:05	swi	this one right after arkeet explain me how to make function works even if user input not numbers
2013-03-22 12:02:48	arkeet	:t sum . catMaybes . map readMaybe . words
2013-03-22 12:02:50	lambdabot	(Num b, Read b) => String -> b
2013-03-22 12:03:05	arkeet	> sum . catMaybes . map readMaybe . words $ "a 1 hello 2 3"
2013-03-22 12:03:08	lambdabot	  6
2013-03-22 12:03:25	hpaste	yitz annotated “swi” with “swi (annotation)” at http://hpaste.org/84476#a84477
2013-03-22 12:03:32	yitz	for example
2013-03-22 12:03:42	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 264 seconds)
2013-03-22 12:03:46	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Client Quit)
2013-03-22 12:03:59	swi	yitz: aaahh! i see
2013-03-22 12:04:05	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-22 12:04:07	arkeet	I prefer the original.
2013-03-22 12:04:15	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Ping timeout: 240 seconds)
2013-03-22 12:04:18	swi	:t catMaybes
2013-03-22 12:04:20	lambdabot	[Maybe a] -> [a]
2013-03-22 12:04:25	-->	haskellhero (~hugo@media.fcsh.unl.pt) has joined #haskell
2013-03-22 12:04:27	arkeet	or at least we shouldn't call yitz's thing readInt.
2013-03-22 12:04:33	haskellhero	hi
2013-03-22 12:04:37	arkeet	hmm
2013-03-22 12:04:48	yitz	arkeet: indeed, readInt usually doesn't mean what i wrote, it would be a little confusing.
2013-03-22 12:05:00	arkeet	:t MaybeT
2013-03-22 12:05:01	lambdabot	Not in scope: data constructor `MaybeT'
2013-03-22 12:05:04	arkeet	oh great.
2013-03-22 12:05:11	-->	kennyd (~kennyd@93-141-99-213.adsl.net.t-com.hr) has joined #haskell
2013-03-22 12:05:15	arkeet	:t Control.Monad.Trans.Maybe.MaybeT
2013-03-22 12:05:17	lambdabot	m (Maybe a) -> Control.Monad.Trans.Maybe.MaybeT m a
2013-03-22 12:05:19	arkeet	:t Control.Monad.Trans.Maybe.runMaybeT
2013-03-22 12:05:20	lambdabot	Control.Monad.Trans.Maybe.MaybeT m a -> m (Maybe a)
2013-03-22 12:05:26	<--	madjestic (~madjestic@188.89.75.186) has quit (Ping timeout: 252 seconds)
2013-03-22 12:05:27	arkeet	@let maybeT = Control.Monad.Trans.Maybe.MaybeT
2013-03-22 12:05:28	lambdabot	 <local>:19:10:
2013-03-22 12:05:28	lambdabot	     Not in scope: data constructor `Control.Monad.Trans.Mayb...
2013-03-22 12:05:31	arkeet	uhh
2013-03-22 12:05:52	swi	arkeet: actualy i have ghc 7.4 too :)
2013-03-22 12:06:24	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-03-22 12:06:50	arkeet	MaybeT isn't what I wanted anyway.
2013-03-22 12:07:31	-->	iago (~iago@gwlmf.di.uminho.pt) has joined #haskell
2013-03-22 12:07:42	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Ping timeout: 252 seconds)
2013-03-22 12:08:25	arkeet	:t foldr (maybe id (:))
2013-03-22 12:08:26	lambdabot	[a] -> [Maybe a] -> [a]
2013-03-22 12:08:29	arkeet	:t foldr (maybe id (:)) []
2013-03-22 12:08:30	lambdabot	[Maybe a] -> [a]
2013-03-22 12:08:37	arkeet	works.
2013-03-22 12:08:53	swi	another thing i dont like about my line is a brackets :) i dont line them :)
2013-03-22 12:09:56	yitz	lineSum x = Just . show . sum . map readInt $ words x
2013-03-22 12:09:59	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-22 12:10:01	-->	kmels_ (~kmels@frbg-4d029a9f.pool.mediaWays.net) has joined #haskell
2013-03-22 12:12:18	-->	Urchin[emacs] (~user@unaffiliated/urchin) has joined #haskell
2013-03-22 12:12:53	swi	yitz: in that case reads must be in readInt (so case) ?
2013-03-22 12:13:00	yitz	in which case it might as well be: lineSum = Just . show . sum . map readInt . words
2013-03-22 12:13:17	yitz	swi: right i'm back to your original
2013-03-22 12:13:25	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-22 12:13:45	<--	edon (~user@albalug/edon) has quit (Ping timeout: 240 seconds)
2013-03-22 12:14:38	yitz	swi: well with that readInt you could get rid of the case by defining another function, but you might as well stick with case then.
2013-03-22 12:15:08	<--	Thomyho3 (~thomyho@mnhm-590c2689.pool.mediaWays.net) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-22 12:15:33	swi	yitz: map readInt . words ?? why there . ?
2013-03-22 12:16:07	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 264 seconds)
2013-03-22 12:16:12	yitz	swi: first divide into words, then make them ints, then sum them, then make them strings, then wrap them in Just.
2013-03-22 12:16:31	yitz	wrap *it
2013-03-22 12:16:48	swi	i mean map function get function to wrap and a list
2013-03-22 12:16:54	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-22 12:16:55	swi	list is ommited here
2013-03-22 12:17:01	swi	ahh
2013-03-22 12:17:04	swi	sorry :)
2013-03-22 12:17:04	yitz	swi: yep.
2013-03-22 12:17:34	<--	k0001 (~k0001@host31.186-125-148.telecom.net.ar) has quit (Ping timeout: 256 seconds)
2013-03-22 12:17:41	yitz	currying
2013-03-22 12:17:53	arkeet	:t prism'
2013-03-22 12:17:54	lambdabot	(Applicative f, Choice p) => (a -> s) -> (s -> Maybe a) -> p a (f a) -> p s (f s)
2013-03-22 12:18:02	arkeet	:t prism' show readMaybe
2013-03-22 12:18:04	lambdabot	(Read a, Show a, Applicative f, Choice p) => p a (f a) -> p String (f String)
2013-03-22 12:18:04	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-22 12:18:07	<--	end3rW (~end3rW@lak-31-216.wohnheime.ruhr-uni-bochum.de) has quit (Remote host closed the connection)
2013-03-22 12:18:18	ocharles	:i Choice
2013-03-22 12:18:32	ocharles	ok, guess lambdabot doesn't know what :i means
2013-03-22 12:18:52	swi	yitz: but i can't set reads in this line
2013-03-22 12:18:55	arkeet	@let blah = prism' show readMaybe
2013-03-22 12:18:57	lambdabot	 Defined.
2013-03-22 12:19:00	yitz	@info Choice
2013-03-22 12:19:00	lambdabot	Choice
2013-03-22 12:19:09	ocharles	heh
2013-03-22 12:19:19	yitz	ocharles: i guess it doesn't know much more about what @info means, either
2013-03-22 12:19:43	yitz	arkeet: that's a cool lens combinator
2013-03-22 12:19:57	arkeet	> "a 12 b 3" ^.. to words . traverse . blah
2013-03-22 12:19:59	lambdabot	  []
2013-03-22 12:20:01	arkeet	hmm
2013-03-22 12:20:05	ocharles	prisms are great
2013-03-22 12:20:12	arkeet	> "a 12 b 3" ^.. to words . traverse . blah :: [Int]
2013-03-22 12:20:14	lambdabot	  [12,3]
2013-03-22 12:20:44	-->	typoclass (~typoclass@p57A64F35.dip.t-dialin.net) has joined #haskell
2013-03-22 12:20:44	arkeet	:t iso
2013-03-22 12:20:45	lambdabot	(Functor f, Profunctor p) => (s -> a) -> (b -> t) -> p a (f b) -> p s (f t)
2013-03-22 12:21:00	arkeet	@let _words = iso words unwords
2013-03-22 12:21:02	lambdabot	 Defined.
2013-03-22 12:21:11	arkeet	@let _read = prism' show readMaybe
2013-03-22 12:21:13	lambdabot	 Defined.
2013-03-22 12:21:21	arkeet	> "a 12 b 3" & to words . traverse . _read +~ 1
2013-03-22 12:21:23	<--	Targen (~iguana@190.75.116.159) has quit (Ping timeout: 245 seconds)
2013-03-22 12:21:23	lambdabot	  No instance for (Control.Lens.Internal.Getter.Gettable
2013-03-22 12:21:23	lambdabot	                    ...
2013-03-22 12:21:30	arkeet	> "a 12 b 3" & _words . traverse . _read +~ 1
2013-03-22 12:21:32	lambdabot	  can't find file: L.hs
2013-03-22 12:21:33	arkeet	> "a 12 b 3" & _words . traverse . _read +~ 1
2013-03-22 12:21:36	lambdabot	  "a 13 b 4"
2013-03-22 12:21:47	-->	takuan (~takuan@d8D86FA8E.access.telenet.be) has joined #haskell
2013-03-22 12:21:47	arkeet	help
2013-03-22 12:21:50	-->	setmeaway2 (setmeaway3@118.45.149.119) has joined #haskell
2013-03-22 12:21:59	yitz	> let readMany = unfoldr $ listToMaybe . concatMap reads . tails in readMany "a 12 b 3" :: [Int]
2013-03-22 12:22:02	lambdabot	  [12,3]
2013-03-22 12:22:05	<--	simon__ (simon@relay.pronoia.dk) has left #haskell
2013-03-22 12:22:51	arkeet	:t from _read
2013-03-22 12:22:53	lambdabot	(Functor f, Read b, Show b, Profunctor p, Choice (Control.Lens.Internal.Iso.Exchange b b)) => p String (f String) -> p b (f b)
2013-03-22 12:22:57	arkeet	uhh
2013-03-22 12:23:01	yitz	lenses are cool, but life was good before them, too.
2013-03-22 12:23:04	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-22 12:23:06	arkeet	> 5 ^. from _read
2013-03-22 12:23:08	lambdabot	  No instance for (Data.Profunctor.Choice
2013-03-22 12:23:08	lambdabot	                    (Control.Lens.I...
2013-03-22 12:23:11	arkeet	figures.
2013-03-22 12:23:13	arkeet	:t re _read
2013-03-22 12:23:14	lambdabot	(Read b, Show b, Gettable f) => (String -> f String) -> b -> f b
2013-03-22 12:23:15	sipa	just a bit more vague
2013-03-22 12:23:42	<--	beaky (~beaky@bba68378.alshamil.net.ae) has quit (Quit: leaving)
2013-03-22 12:24:09	<--	takuan (~takuan@d8D86FA8E.access.telenet.be) has quit (Read error: Connection reset by peer)
2013-03-22 12:24:10	yitz	sipa: vague? what's vague about i wrote? especially compared to the line-noise version in lenses
2013-03-22 12:24:21	<--	MnO2 (~MnO2@nat/yahoo/x-nqiqziitjkmipige) has quit (Quit: MnO2)
2013-03-22 12:24:22	arkeet	line-noise :(
2013-03-22 12:24:52	yitz	i know, there is some logic to this line noise, but there is definitely a learning curve.
2013-03-22 12:24:59	hpaste	swi pasted “new version” at http://hpaste.org/84479
2013-03-22 12:25:08	<--	setmeaway (setmeaway3@119.201.52.130) has quit (Ping timeout: 245 seconds)
2013-03-22 12:25:08	arkeet	@let _unsafeShow = iso show read
2013-03-22 12:25:11	lambdabot	 Defined.
2013-03-22 12:25:14	arkeet	> 5 ^. _unsafeShow
2013-03-22 12:25:16	lambdabot	  Ambiguous type variable `t0' in the constraint:
2013-03-22 12:25:16	lambdabot	   (GHC.Read.Read t0) arisi...
2013-03-22 12:25:20	arkeet	err
2013-03-22 12:25:23	arkeet	:t _unsafeShow
2013-03-22 12:25:23	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-22 12:25:24	lambdabot	(Functor f, Read t, Show s, Profunctor p) => p String (f String) -> p s (f t)
2013-03-22 12:25:34	-->	elliott_ (elliott@unaffiliated/elliott) has joined #haskell
2013-03-22 12:25:37	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-22 12:25:37	<--	elliott (elliott@unaffiliated/elliott) has quit (Disconnected by services)
2013-03-22 12:25:37	arkeet	great.
2013-03-22 12:25:41	arkeet	:t iso'
2013-03-22 12:25:42	lambdabot	    Not in scope: iso'
2013-03-22 12:25:42	lambdabot	    Perhaps you meant `iso' (imported from Control.Lens)
2013-03-22 12:25:44	--	elliott_ is now known as elliott
2013-03-22 12:26:03	arkeet	@let _show = iso show read :: (Read s, Show s) =>  Iso' s String
2013-03-22 12:26:06	lambdabot	 Defined.
2013-03-22 12:26:06	arkeet	> 5 ^. _show
2013-03-22 12:26:09	lambdabot	  "5"
2013-03-22 12:26:23	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-03-22 12:26:29	arkeet	> 123 & _show %~ reverse I still think this is disgusting.
2013-03-22 12:26:31	lambdabot	  <hint>:1:57: parse error (possibly incorrect indentation)
2013-03-22 12:26:31	arkeet	> 123 & _show %~ reverse -- I still think this is disgusting.
2013-03-22 12:26:33	lambdabot	  321
2013-03-22 12:26:41	arkeet	:p
2013-03-22 12:26:51	ion	That should have been a prism.
2013-03-22 12:27:04	arkeet	I made a prism going the other way.
2013-03-22 12:27:07	arkeet	:t _read
2013-03-22 12:27:08	lambdabot	(Read a, Show a, Applicative f, Choice p) => p a (f a) -> p String (f String)
2013-03-22 12:27:09	-->	Counter-Strike (~abc@mailsh7.xs4all.nl) has joined #haskell
2013-03-22 12:27:13	arkeet	but we can't use it for that.
2013-03-22 12:27:25	<--	EarlGray (~mitra@195.20.154.2) has quit (Quit: Konversation terminated!)
2013-03-22 12:27:27	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 12:27:34	arkeet	:t _read :: (Read a, Show a) => Prism' String a
2013-03-22 12:27:35	lambdabot	(Read a, Show a, Applicative f, Choice p) => p a (f a) -> p String (f String)
2013-03-22 12:27:40	arkeet	..
2013-03-22 12:28:14	-->	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 12:28:17	-->	Thomyho3 (~thomyho@mnhm-590c2689.pool.mediaWays.net) has joined #haskell
2013-03-22 12:28:38	arkeet	I find it weird how the argument orders for iso and prism are not consistent.
2013-03-22 12:28:47	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-22 12:28:47	arkeet	prism puts the getter second, iso puts it first.
2013-03-22 12:28:57	arkeet	er
2013-03-22 12:28:59	arkeet	:t prism
2013-03-22 12:29:00	lambdabot	(Applicative f, Choice p) => (b -> t) -> (s -> Either t a) -> p a (f b) -> p s (f t)
2013-03-22 12:29:09	arkeet	not getter.
2013-03-22 12:29:26	arkeet	I mean prism puts the reviewer first, iso puts it second.
2013-03-22 12:29:28	<--	soulofpeace (~soulofpea@119.75.11.250) has quit (Ping timeout: 256 seconds)
2013-03-22 12:29:36	arkeet	:t iso
2013-03-22 12:29:37	lambdabot	(Functor f, Profunctor p) => (s -> a) -> (b -> t) -> p a (f b) -> p s (f t)
2013-03-22 12:29:42	arkeet	the b -> t.
2013-03-22 12:30:08	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 245 seconds)
2013-03-22 12:30:13	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 12:30:27	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-22 12:30:33	arkeet	oh well
2013-03-22 12:30:57	arkeet	I need sleep.
2013-03-22 12:31:16	-->	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has joined #haskell
2013-03-22 12:31:24	yitz	arkeet: in iso both of the first two arguments are reviewers, aren't they?
2013-03-22 12:31:32	<--	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has quit (Changing host)
2013-03-22 12:31:32	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-22 12:31:42	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 12:31:46	-->	k0001 (~k0001@host59.190-224-66.telecom.net.ar) has joined #haskell
2013-03-22 12:31:48	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:31:53	swi	brr..
2013-03-22 12:31:57	swi	:t putStrLn
2013-03-22 12:31:58	lambdabot	String -> IO ()
2013-03-22 12:32:05	yitz	oh oh what's with preflex
2013-03-22 12:32:14	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-22 12:32:28	swi	@putStrLn "Foo" ++ "Bar"
2013-03-22 12:32:28	lambdabot	Unknown command, try @list
2013-03-22 12:32:37	swi	> putStrLn "Foo" ++ "Bar"
2013-03-22 12:32:39	lambdabot	  Couldn't match expected type `GHC.Types.IO ()'
2013-03-22 12:32:39	lambdabot	             with actual typ...
2013-03-22 12:32:43	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-22 12:32:51	swi	:t "Foo" ++ "Bar"
2013-03-22 12:32:53	lambdabot	[Char]
2013-03-22 12:33:02	arkeet	:t putStrLn ("Foo" ++ "Bar")
2013-03-22 12:33:04	lambdabot	IO ()
2013-03-22 12:33:22	swi	arkeet: but why ?
2013-03-22 12:33:25	arkeet	why what?
2013-03-22 12:33:46	swi	putStrLn get String as parameter and return IO()
2013-03-22 12:33:56	swi	why it' need (string) ?
2013-03-22 12:34:08	srhb	Because it needs that which it is supposed to print.
2013-03-22 12:34:09	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Ping timeout: 245 seconds)
2013-03-22 12:34:12	arkeet	what you wrote parses as (putStrLn "Foo") ++ "Bar"
2013-03-22 12:34:12	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 12:34:24	arkeet	which makes no sense.
2013-03-22 12:34:25	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 12:34:31	swi	damn
2013-03-22 12:34:34	swi	silly me
2013-03-22 12:34:41	srhb	swi: Function application binds very tightly.
2013-03-22 12:34:42	swi	i forgot that ++ is a function
2013-03-22 12:34:48	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-22 12:34:50	srhb	Operators less so.
2013-03-22 12:35:00	-->	HW42 (~000000@pD9E43679.dip.t-dialin.net) has joined #haskell
2013-03-22 12:35:08	-->	Kostas (~Kostas@213.159.34.100) has joined #haskell
2013-03-22 12:35:09	swi	thanks a lot guys :)
2013-03-22 12:35:15	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-22 12:35:53	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-03-22 12:35:58	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:36:04	<--	Maarten__ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has left #haskell
2013-03-22 12:36:12	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 12:37:13	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-22 12:37:40	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-03-22 12:38:03	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 276 seconds)
2013-03-22 12:38:15	<--	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has quit (Remote host closed the connection)
2013-03-22 12:38:52	<--	shurikas (~Kostas@195.181.64.50) has quit (Ping timeout: 246 seconds)
2013-03-22 12:39:20	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-03-22 12:39:44	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:40:09	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-22 12:40:24	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-03-22 12:40:45	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-22 12:41:26	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 12:41:59	-->	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-22 12:43:16	--	pepijndevos is now known as pepijn_away
2013-03-22 12:43:31	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-22 12:43:36	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-22 12:44:55	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-22 12:45:02	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-22 12:45:10	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 12:45:58	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:46:22	--	preflex_ is now known as preflex
2013-03-22 12:47:19	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-03-22 12:47:42	bobry	Hello, is there a way _not_ to write constraints for 'bar' explicitly, since they are fixed by the use of 'Foo"? example: http://paste.in.ua/8121
2013-03-22 12:48:33	Botje	bobry: yeah, haskell data constructors don't work nicely with type classes like that :/
2013-03-22 12:48:57	-->	dnolen (~user@199.106.166.115) has joined #haskell
2013-03-22 12:49:29	<--	sss_ (6d43d565@gateway/web/freenode/ip.109.67.213.101) has quit (Quit: Page closed)
2013-03-22 12:49:48	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-03-22 12:50:44	<--	k0001 (~k0001@host59.190-224-66.telecom.net.ar) has quit (Ping timeout: 256 seconds)
2013-03-22 12:51:29	-->	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has joined #haskell
2013-03-22 12:52:15	-->	dnolen_ (~user@199.106.166.115) has joined #haskell
2013-03-22 12:52:21	bobry	Botje: I hoped there's some magical GHC extension, I'm missing :)
2013-03-22 12:52:33	<--	dnolen_ (~user@199.106.166.115) has quit (Remote host closed the connection)
2013-03-22 12:52:38	<--	dnolen (~user@199.106.166.115) has quit (Client Quit)
2013-03-22 12:53:05	-->	dnolen (~user@199.106.166.115) has joined #haskell
2013-03-22 12:53:19	Botje	you'll have to wait for the DoWhatIMean extension :P
2013-03-22 12:53:45	Philonous	Botje:  Even then, ghc would have to invent the type class dictionary out of thin air
2013-03-22 12:54:05	Philonous	Botje:  So it would at least to be -XBlackMagic
2013-03-22 12:56:21	<--	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has quit (Remote host closed the connection)
2013-03-22 12:56:38	-->	lemao (~lemao@187.67.222.39) has joined #haskell
2013-03-22 12:57:02	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-22 12:57:38	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 12:57:40	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-03-22 12:57:47	<--	moai (~m@141.70.23.87) has quit (Ping timeout: 246 seconds)
2013-03-22 12:58:05	Philonous	bobry:  This extension can not exist. Your type for the function "bar" says it will accept any argument of type a and c whatsoever, but when you pattern match on Foo you get values back out that somehow have a class dictionary associated with them.
2013-03-22 12:58:34	bobry	Philonous: I see, thanks.
2013-03-22 12:58:48	-->	Philippa (~user@82-71-7-109.dsl.in-addr.zen.co.uk) has joined #haskell
2013-03-22 12:59:13	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-22 12:59:22	Philonous	bobry:  It would be nice though if you could give a partial type (with type holes). Like bar :: (??) => a -> c -> Foo a c. Unfortunately that doesn't exist.
2013-03-22 12:59:30	<--	ulfdoz (~mary@p5B38A29B.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-22 12:59:38	bobry	Yup, that the syntax I was asking about :)
2013-03-22 12:59:45	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-22 13:00:53	-->	inad922 (~inad925@93.93.84.85) has joined #haskell
2013-03-22 13:01:29	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-03-22 13:01:30	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-22 13:02:47	--	threeday1onk is now known as threedaymonk
2013-03-22 13:03:13	Hermit	has anyone successfully built wxcore lately? (it's driving me nuts here: http://dpaste.com/1031212)
2013-03-22 13:03:28	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-22 13:03:44	<--	PatrickRobotham_ (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-22 13:03:55	-->	robstewartuk (~robstewar@cpc2-sgyl34-2-0-cust177.sgyl.cable.virginmedia.com) has joined #haskell
2013-03-22 13:04:25	Hermit	libwxc.so exists in ~/.cabal/lib/wxc-0.90.0.4/ghc-7.4.1/
2013-03-22 13:04:40	hpaste	Rob pasted “Rigid type varialbes with forall” at http://hpaste.org/84481
2013-03-22 13:05:12	robstewartuk	Hi, I'm unsure how to correctly use forall for data constructors. See http://hpaste.org/84481
2013-03-22 13:05:33	robstewartuk	That hpaste does not compile.
2013-03-22 13:06:17	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 13:06:18	 *	robstewartuk has updated the hpaste http://hpaste.org/edit/84481
2013-03-22 13:06:26	robstewartuk	with the rigid type error.
2013-03-22 13:06:26	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-22 13:06:56	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-22 13:07:14	-->	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2013-03-22 13:07:21	robstewartuk	My question boils down to a better need to understand forall a. before a data constructor. Help?
2013-03-22 13:08:57	srhb	What do you intend for that forall to mean?
2013-03-22 13:10:03	-->	madjestic (~madjestic@188.89.75.186) has joined #haskell
2013-03-22 13:10:50	robstewartuk	I'm thinking of Foo to be a very simple API, with a field f that can have any time... hm... let me update with a better example.
2013-03-22 13:10:56	robstewartuk	one sec.
2013-03-22 13:10:58	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 13:11:38	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-22 13:12:30	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-22 13:13:49	<--	sonda (~sonda@ppp-245-14.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-22 13:13:59	hpaste	Rob revised “Rigid type varialbes with forall”: “forall rigid type” at http://hpaste.org/84481
2013-03-22 13:14:13	<--	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-22 13:15:05	robstewartuk	srhb: In the revised hpaste, I am wanting Foo to be a simple API, that can be instantiated with f as a Data.Map with any types for its key nd its value.
2013-03-22 13:15:11	robstewartuk	s/nd/and/
2013-03-22 13:17:28	<--	boegel (~boegel@109.130.137.51) has quit (Quit: Leaving)
2013-03-22 13:17:54	parcs	robstewartuk: why are you using existentials?
2013-03-22 13:18:10	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-03-22 13:18:22	-->	sonda (~sonda@ppp-245-14.26-151.libero.it) has joined #haskell
2013-03-22 13:18:50	<--	krzysz00 (~krzys@76.78.130.232) has quit (Quit: leaving)
2013-03-22 13:19:18	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:19:20	<--	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has left #haskell
2013-03-22 13:19:38	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-22 13:19:42	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:20:13	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:20:56	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:20:57	-->	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-22 13:21:08	hpaste	Rob revised “Rigid type varialbes with forall”: “fixed: bound rigid type variables with forall” at http://hpaste.org/84481
2013-03-22 13:21:19	robstewartuk	parcs: excellent question. Doh. This works http://hpaste.org/84481
2013-03-22 13:21:26	robstewartuk	thanks.
2013-03-22 13:21:28	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:21:36	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 256 seconds)
2013-03-22 13:21:56	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Ping timeout: 255 seconds)
2013-03-22 13:22:02	srhb	It seems whenever people have a problem and decide to use Existential Quantification, they end up with two problems. :P
2013-03-22 13:22:05	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:22:32	<--	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-03-22 13:22:37	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:22:46	-->	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has joined #haskell
2013-03-22 13:23:18	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:23:52	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:24:28	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:25:06	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 13:25:35	 *	hackagebot hen 0.0.0 - Haskell bindings to Xen hypervisor interface  http://hackage.haskell.org/package/hen-0.0.0 (FedorGogolev)
2013-03-22 13:25:39	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:26:19	<--	schlaftier (~daniel@141.89.86.57) has quit (Max SendQ exceeded)
2013-03-22 13:26:31	-->	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has joined #haskell
2013-03-22 13:26:59	hpaste	Rob revised “Rigid type varialbes with forall”: “wildcards in record patterns” at http://hpaste.org/84481
2013-03-22 13:27:04	<--	piezo (~piezo@ADijon-652-1-86-71.w90-56.abo.wanadoo.fr) has quit (Ping timeout: 245 seconds)
2013-03-22 13:27:07	-->	schlaftier (~daniel@141.89.86.57) has joined #haskell
2013-03-22 13:27:19	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-03-22 13:27:21	swi	Can i compile my haskell programm on my machine so, that it run on another machine (i.e. another distro) ?
2013-03-22 13:27:41	robstewartuk	srhb: parcs: new problem. http://hpaste.org/84481 . I cannot use wildcards in a recod pattern, for MyFoo.
2013-03-22 13:27:43	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-22 13:27:51	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-22 13:28:05	swi	i'v learn about -optl-static but stack with 'kernel too old' on dest. machine
2013-03-22 13:28:10	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-22 13:29:19	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-22 13:30:39	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-22 13:30:55	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-03-22 13:34:10	-->	Icewing (~Icewing@koln-5d814ce4.pool.mediaWays.net) has joined #haskell
2013-03-22 13:34:11	<--	Icewing (~Icewing@koln-5d814ce4.pool.mediaWays.net) has quit (Changing host)
2013-03-22 13:34:11	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-03-22 13:34:28	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-22 13:34:41	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 13:35:04	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-22 13:35:43	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-22 13:36:12	<--	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 264 seconds)
2013-03-22 13:36:17	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-22 13:36:23	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 245 seconds)
2013-03-22 13:36:46	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-22 13:36:59	hpaste	Rob revised “Rigid type varialbes with forall”: “fixed: Rigid type varialbes with forall” at http://hpaste.org/84481
2013-03-22 13:37:54	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-22 13:38:58	<--	dnolen (~user@199.106.166.115) has quit (Ping timeout: 256 seconds)
2013-03-22 13:39:17	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-22 13:39:18	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 13:39:25	quchen	Is there a way I can make Djinn understand lists?
2013-03-22 13:39:34	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-22 13:39:51	quchen	It doesn't seem to know [a], and "List a = Nil | Cons a (List a)" is recursive and seems not to be allowed.
2013-03-22 13:39:59	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Ping timeout: 245 seconds)
2013-03-22 13:40:12	-->	heruur (~tvh@220-158-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-22 13:40:42	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-22 13:41:23	<--	typoclass (~typoclass@p57A64F35.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-22 13:41:45	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 276 seconds)
2013-03-22 13:41:53	srhb	No, it is indeed recursive, afaik.
2013-03-22 13:42:35	-->	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has joined #haskell
2013-03-22 13:42:35	<--	blueonyx (~blueonyx@p578be0b3.dip0.t-ipconnect.de) has quit (Changing host)
2013-03-22 13:42:35	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-22 13:42:47	quchen	And Djinn doesn't have a special list hook in it somewhere? Arrrr :-(
2013-03-22 13:42:55	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-03-22 13:42:57	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 13:43:40	srhb	I don't think so. :/
2013-03-22 13:44:01	quchen	But I can't sell callCC to strangers!
2013-03-22 13:44:11	quchen	elem would make a much nicer example :-(
2013-03-22 13:44:36	srhb	:P
2013-03-22 13:44:40	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 260 seconds)
2013-03-22 13:45:01	quchen	Would you know some nice example I can give to an imperative person?
2013-03-22 13:45:22	quchen	Like "hey I don't need to know how to write this because it has a unique proof"
2013-03-22 13:46:29	srhb	Hum. Things like functor instances are almost unique, are they not?
2013-03-22 13:46:43	quchen	Yeah, but then Functors are already too haskelly
2013-03-22 13:46:46	srhb	Ah.
2013-03-22 13:46:47	elliott	a law-abiding Functor instance is unique
2013-03-22 13:46:48	quchen	Bind for Maybe also works
2013-03-22 13:46:57	elliott	if you ignore laws, very ununique :P
2013-03-22 13:47:02	srhb	Yeah.
2013-03-22 13:47:17	elliott	quchen: you may be able to model a list as ((a -> r -> r) -> r -> r)
2013-03-22 13:47:20	elliott	depending on the situation
2013-03-22 13:47:22	aleator_	Traversals?
2013-03-22 13:47:29	elliott	(you really want a "forall r." there, but djinn can't do that)
2013-03-22 13:47:43	<--	otend (~otend@c-69-242-188-14.hsd1.mo.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-22 13:47:47	quchen	elliott: I'm trying to find a good example of why Djinn/proofs are useful in programming to give to someone who knows only imperative languages.
2013-03-22 13:47:57	quchen	That constrains the possible functions a lot.
2013-03-22 13:48:08	srhb	Yeah, but really, do you find Djinn that useful?
2013-03-22 13:48:13	srhb	Aside from your own mental Djinn :-)
2013-03-22 13:48:28	quchen	srhb: It's not about Djinn per se, but about what makes types so useful.
2013-03-22 13:48:38	srhb	How about composition then
2013-03-22 13:48:45	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-03-22 13:48:46	quchen	You can't start giving explanations with type holes etc
2013-03-22 13:48:53	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 13:49:00	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 13:49:07	srhb	@djinn (b -> c) -> (a -> b) -> a -> c
2013-03-22 13:49:07	lambdabot	f a b c = a (b c)
2013-03-22 13:49:52	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-22 13:49:55	quchen	Alright, the backstory: I just told a colleague that I started reading this book about type theory, and tried explaining why it is relevant (background) knowledge. I then gave the examples of "id" and "const", but then he said he understands that, but would like to see a nontrivial example.
2013-03-22 13:50:15	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-22 13:50:22	quchen	So now I'm looking for some code that may be useful in an imperative setting, but that I can simply have Djinn write for me based on telling it "what I mean" instead of "how to".
2013-03-22 13:50:27	<--	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-22 13:50:41	srhb	How about stateful computations
2013-03-22 13:50:46	srhb	Can't Djinn work some magic there?
2013-03-22 13:51:01	elliott	I mainly find Djinn useful for deriving highly abstract code.
2013-03-22 13:51:02	quchen	Yes. But imperative languages don't have "s -> (a, s)". ;-(
2013-03-22 13:51:05	-->	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has joined #haskell
2013-03-22 13:51:07	elliott	like the monad instances for State and Cont.
2013-03-22 13:51:17	quchen	elliott: Cont is about as functional as it gets
2013-03-22 13:51:17	srhb	I'm not sure Djinn is very useful for imperative things. :/
2013-03-22 13:51:29	quchen	That will give me the "this is academic blabla" look
2013-03-22 13:51:34	elliott	and sometimes lens-related stuff (as in, when coming up with new representations for lenses, not when working with lenses as they exist themselves), which is even less relatable :P
2013-03-22 13:51:37	srhb	Or we'd have Djinn for C :P
2013-03-22 13:51:40	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-22 13:51:42	amyers	quchen: Which book?
2013-03-22 13:51:48	elliott	quchen: I don't think you'll be able to convince anyone of Djinn's utility unless they're sold on FP
2013-03-22 13:51:49	parcs	robstewartuk: you can't? what error are you getting?
2013-03-22 13:51:59	elliott	I'd say its main use is impressing beginners, honestly
2013-03-22 13:52:00	quchen	amyers: thompson - type theory and functional programming
2013-03-22 13:52:04	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-22 13:52:13	robstewartuk	I can now, I modifed the hpaste
2013-03-22 13:52:15	quchen	amyers: If you can recommend another one let me know
2013-03-22 13:52:30	quchen	amyers: (It's not bad so far, but comparison is always nice)
2013-03-22 13:52:37	amyers	quchen: I'm working my way through types and programming languages
2013-03-22 13:52:50	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 13:52:55	quchen	amyers: Is that a book title or a sentence? :-)
2013-03-22 13:52:56	amyers	quchen: It's the first book on type theory that I've read.  I was curious what else Haskell folks were reading
2013-03-22 13:52:57	<--	mateu (~mateu@missoula.org) has left #haskell
2013-03-22 13:53:02	parcs	robstewartuk: oh ok
2013-03-22 13:53:15	amyers	quchen: haha sorry,, title is "Types and Programming Languages"
2013-03-22 13:53:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-22 13:53:40	quchen	amyers: I'm just an amateur (in the classical sense), so I just picked the next best match that seemed decent. Nobody with actual knowledge recommended me this one (or any other).
2013-03-22 13:53:44	amyers	quchen: by Benjamin Pierce
2013-03-22 13:53:53	amyers	quchen: Ah, same here
2013-03-22 13:53:53	quchen	amyers: Thanks, I'll have a look at it
2013-03-22 13:54:01	amyers	quchen: Likewise
2013-03-22 13:54:21	-->	u_ (~phillip@adsl-75-57-178-143.dsl.emhril.sbcglobal.net) has joined #haskell
2013-03-22 13:54:24	quchen	amyers: thompson is available for free, just search for it
2013-03-22 13:54:53	-->	system64 (~system64@202.78.175.199) has joined #haskell
2013-03-22 13:54:56	amyers	quchen: Ah good, my search on amazon turned up a copy for $250 so I was a bit discouraged
2013-03-22 13:55:12	-->	etehtsea (~textual@93.185.184.116) has joined #haskell
2013-03-22 13:55:14	quchen	http://www.cs.kent.ac.uk/people/staff/sjt/TTFP/
2013-03-22 13:55:18	quchen	"Out of print"
2013-03-22 13:55:27	quchen	So you're looking at an antique book at Amazon ;-)
2013-03-22 13:55:32	-->	u__ (~phillip@75.57.178.143) has joined #haskell
2013-03-22 13:55:38	--	irc: disconnected from server
2013-03-22 21:28:41	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-22 21:28:41	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-22 21:28:41	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-22 21:28:41	--	Nicks #haskell: [@ChanServ [[zz]] \rs ]OLI[ __main__ _br_ _d3f _flow_ _janne `0660 `^_^v `bps `micro `nand` `ramses a11235 aajmakin ab9rf absence abumirqaan acfoltzer acharles aCube Adeon adimit Adios adnap adnauseam Afish aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang alanz albel727 alcz aleator_ alejandrogomez alexander__b Alice3 alios alnix_ alpounet alshain Amadiro amatsu amiller anachron_ anders^^ andrewsw aninhume1 anona AntiSpamMeta apaku Apocalisp appamatto araujo arbn arenz argiopeweb aristid arkeet arkx armlesshobo arnihr__ arun asante aszlig Athas AtnNn augur augustl Axman6 b52 b_jonas BadKitty bananagram banjiewen bark_ barrucadu bartavelle Baughn bbee bcoppens bd_ beaky Belgarion0 bens benzap bergey Betal betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld bishboria bitonic blackmirroxx BlastHardcheese blooberr Bloodless BMeph bmfx BobFunk bobry boegel bogner Boney Boreeas bos Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc byorgey byron ByronJohnson c_wraith cads Cale caligula Canar canta canvon carlocci carter Catbuntu ccc ccxCZ cdidd cdntr celery__ centrinia Cerise certainty cfricke chance charlesofarrell chessguy chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisdotcode_ chrisirc chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmccann cmsd2 cods cognominal__ colah collin comak companion_cube confound connelly coppro copumpkin CosmicRay Counter-Strike CoverSlide cow-orke1 crdueck cross crs_ Cryovat ctype_real cwvh cynick cyphase d-snp dabradley dan_johnsin danharaj DanielDiaz dannybtran danr danvet dario Dashkal davean davorak dcoutts deavidsedice Deewiant def-lkb dennda dented42 dEPY Derander descender DexterLB dfletcher dgriffi dgvncsz0f DigitalKiwi dilinger dixie djahandarie djanatyn dju dkasak dlundy_ dmac dmarker dmwit docksider Dodek dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean dreixel drek drewr drmegahertz dropdrive DrSyzygy dsantiago DT` duairc__ dumbhat dustinswan DustyDin1o Dybber dyreshark dysinger eacameron EarlGray earthy ecuderpam edenc edon edtsech edwardk edwtjo Eelis eff ehamberg Eiam eikke einsof eis eL_Bart0 eldariof electrogeek elgot Eliel elliott elliottcable emc2 emma endojelly Enigmagic ent epta erasmas ericmj Eridius erkin ernst Erstarrung Esa|iPhone6 Estrellas etabot ethercrow etrepum eviltwin_ Excureo eyck f8_ fabjan faen FalkoPeters fall_ fayden fcr fergusnoble finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux fmapE folone_ formalcow Franciman freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul_ gienah Gilly glguy Gothmog_ Gracenotes gseitz gspr gthorslund guerrilla Guest10329 Guest22595 Guest65991 Guest91870 Gunni guon gustavnils guy_ guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hamishmack hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk Hermit hfaafb hgolden hiptobecubic hiratara hiredman hiroakip hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hungryblank hvr HW42 hyko iago IanKelling ibid IbnFirnas Iceland_jack Icewing identity idnar ido idoru Igloo igrekster imeredith imphasing inr int-e integral Internet13 ion ique issimus1 iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt janbanan JaRoel|4d jaroslaw jaspervdj Jaxan jayne jb55 jbauman jcp jdoliner Jeanne-Kamikaze jedai jeffreybaird Jello_Raptor jercos jerojasro Jesin jfischoff jix jlaire jlamothe jlewis jliikka jlouis_ jmcarthur jMCg jml joachifm joar jodaro joe9 JoeHazzers joeyh johnw joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrajav jrib jrockway jrslepak jtalk jtobin_ juhp julmac julmae junsuijin jyyou k00mi k0ral KaiSforza kakos kalven KaneTW kaol kaoskorobase Ke kennyd kennyp Khisanth kini Kinnison Kiryx KitB__ kith kkris kloeri kludgy klugez kmels_ kmicu knightshade kniu knyppeldynan knz koala_man koninkje_away kosmikus Kostas kqr1 kranius_ krig_ kryft kshannon ktosiek Kuba kylcarte kyle__ labo lahwran lambdabot LambdaDusk LAMMJohnson Laney latro`a lattenwald lazard lcfrs LeaChim lemao_ lennart__ lenstr leoncamel leprauchan leroux Lethalman levi levitation_ liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lucca luite Luke lulf lusory lzm m3ga machisuji madjestic magicman majoh maksbotan_ malorie maltin mami mannyv marienz martinalex Martty MasseR mastensg MasterPu1cher mateu mattp_ matzo mauke Maxdamantus mcdonc mceier mcguitan83 McManiaC mechairoi mefisto Megant mendez merijn message144 meyersh_ mgile mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mjr84 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus_ mollerstrand MOMI Mon_Ouie monique_ monochrom monoidal moonlite_ morazow mornfall morolin mortberg Mortchek mpu mrd mrdomino_ MrFenix_ mrkotfw MrMeh mrotondo mrshoe mrsolo mspells mullein munro museun mux myme mysticc n_b Nanar nardul Natch natechan natte ndngvr necrobious neena netj neurocyte newsham nexx Nickeeh nicoo nighty^ NihilistDandy Nik_89 niko nikola nilg` niloc132 Nimatek nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nonymousa noplamodo normanrichards notdan notVert NougatRillettes Nshag numeral nus- nwf obcode ocharles ofan Okasu OlegYch opqdonut ormaaj Ornedan ortmage osfameron osxorgat_ othiym23 otterdam otters otto_s_ ozataman ozataman_ ozgura paddymahoney PaksAway ParahSail1n parcs PartyKat2e path[l] pcapriotti pcl pdxleif peddie peltchu peoplee pepijndevos perlite perspectival petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa Philonous PHO_ phyrex1an piezo pikhq piotr Plex- plhk pmade pnielsen Pods popz pqmodn_ pr Pranz predator117 preflex prh pricklypear PrO_OkI profmakx ps-auxw pseudolio Ptival ptrf purefn puzza007 pyrtsa pyykkis q66 quaestor quicksilver quuxman qwandor|quassel qwr qz r126l_ raek_ RageOfThou raichoo raid rainmaker Ralith Raynes Razz rcj_ rcl realnot redjohn reembarking08 refold reiddraper Reite Rembane RenJuan rexamophone rfw Rickasaurus rickeyski-k rio Riussi rmarianski rmunoz rmunroe robbe- robbert` roconnor rossabaker rs0 rsimoes ryanakca S11001001 s4msung_ s_quark sabalaba SaBer saep Sagi saiam Saizan sajith saml sanemat sarfraz saurik sbahra scgilardi schlicht_ schlumpi schovi schroedinbug sclv Scott_firebeta Sculptor seafood SeanTAllen seats SegFaultAX sellout- sepp2k1 setmeaway2 Sgeo sgronblo sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 silasm silver simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash sleepynate SLi sm smarter snits so Soft sohum solarus solirc Sonderblade sordina2 SoupEvil Spockz sproingie Squid_Tamer srcerer srhb staafl Starfire startling stat_vi statusfailed steez stelleg stepcut stephe strax_ suiside sully sunfun sunnavy supersym supki sw17ch Swizec sysop_fb tac tahu tamiko tanakh Tarential Targen taruti tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction_f tessier Testos tg tgeeky Th0mas thalassarche tharper The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh Thomyho3 thorkilnaur thorsten` thoughtpolice Thra11_ threedaymonk threesome tibbe tim timemage tippenein tjohnson tkd tlaine tlevine tmiw TML tobiassj1sten toekutr tom339 tomaw tomboy65 tomejaguar tomh_ tomku tomprince ToRA Tordek tranma trevize trh178 tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl_ Twey twomashi u__ ulfdoz Ulrar uniquenick Urchin[emacs] user0213120 UziMonkey Valodim Varakh vehk verrens Vertue vhz vili vmeson vobi volstvok Vorpal voyd_ Vq wagle Walther warpy__ Watcher7 waterlaz wchun wei2912 weie_ wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki wyfrn_ x7 x7a1c0b xaimus xcombelle xcv xcvii xinming_ xkcd XMunkki xnyhps Xorlev xorox90 xplat xrl_ xunatai xymox yam yan_ yano yeltzooo yezariaely yiannis_t ymasory yriw ysulsky_ yumike Zariel zebr Zedrikov zeiris zenzike zero7 ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp]
2013-03-22 21:28:41	--	Channel #haskell: 1048 nicks (1 op, 0 halfops, 0 voices, 1047 normals)
2013-03-22 21:28:41	--	URL for #haskell: http://www.haskell.org/
2013-03-22 21:28:43	--	Mode #haskell [+CLcnpt]
2013-03-22 21:28:43	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-22 21:28:53	<--	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has quit (Remote host closed the connection)
2013-03-22 21:29:12	LambdaDusk	shachaf: why so?
2013-03-22 21:29:19	jMCg	hvr: I'm building a buildbot for.. I suppose you. I'm trying to keep it sane and reproducable, but failing. (I was trying to coerce ghc and cabal-dev into /opt/rise, but that doesn't seem to work out as simple as I imagined: http://apaste.info/lWiC )
2013-03-22 21:29:36	shachaf	LambdaDusk: Because think about what you can do with it.
2013-03-22 21:29:39	shachaf	See also the FAQ
2013-03-22 21:29:41	shachaf	@where faq
2013-03-22 21:29:42	lambdabot	http://www.haskell.org/haskellwiki/FAQ
2013-03-22 21:29:44	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-03-22 21:30:02	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-22 21:30:11	<--	Ralith (~ralith@d142-058-094-063.wireless.sfu.ca) has quit (Ping timeout: 255 seconds)
2013-03-22 21:30:12	geekosaur	twomashi, no
2013-03-22 21:30:35	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-22 21:30:44	--	Mode #haskell [+o glguy] by ChanServ
2013-03-22 21:30:58	-->	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has joined #haskell
2013-03-22 21:31:08	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-22 21:31:10	-->	Taneb (~nathan@host-92-30-220-50.as13285.net) has joined #haskell
2013-03-22 21:31:18	--	Mode #haskell [-bb *amathew*!*@*$##fixyourconnection andreypopp!*@*$##fixyourconnection] by glguy
2013-03-22 21:31:23	hvr	jMCg: hi...
2013-03-22 21:31:39	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 21:31:42	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:32:12	Pods	Any instance wherein using "newtype" is beneficial over "type"; why does haskell have both ??
2013-03-22 21:32:19	hvr	jMCg: I'm missing a bit of context right now...
2013-03-22 21:32:37	tgeeky	Pods: that doesn't sound correct.
2013-03-22 21:32:39	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-22 21:32:52	latro`a	they don't really compare
2013-03-22 21:32:55	geekosaur	Pods, type is just an alias, newtype lets you hide something so you can replace it (typically a typeclass of some kind)
2013-03-22 21:32:55	--	duairc__ is now known as duairc_
2013-03-22 21:32:59	latro`a	data compares to newtype more than newtype to type
2013-03-22 21:33:00	tgeeky	Pods: but the answer is that newtype doesn't add any performance penalty whatsoever, it is simply a renaming of an existing type.
2013-03-22 21:33:31	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Read error: Connection reset by peer)
2013-03-22 21:33:35	latro`a	again relative to data, where data Foo a = Foo a adds the overhead of a Foo constructor at runtime
2013-03-22 21:33:44	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-22 21:33:47	LambdaDusk	Pods: Basically, you can't/shouldn't do class instances on "type"s but sometimes data does too much
2013-03-22 21:34:07	merijn	Pods: Passing a String to a function "f :: SafeString -> Foo" is ok if you have "type SafeString = String", but a type error when you have "newtype SafeString = SafeString String"
2013-03-22 21:34:16	Pods	tgeeky: point here is that if i say type "newtype FirstName = FirstName String", then i will have to create new functions which take FirstName as their signature while doing type i can simply use the functions which already have string as their signature
2013-03-22 21:34:31	elliott	it is newtype and data which are similar, not type and newtype.
2013-03-22 21:34:32	<--	guon (~jan@c-5890e755.017-311-6c6b701.cust.bredbandsbolaget.se) has quit (Quit: Leaving.)
2013-03-22 21:34:46	tgeeky	Pods: what elliott said.
2013-03-22 21:34:49	-->	AtomicStryker (AtomicStry@ip-95-223-48-49.unitymediagroup.de) has joined #haskell
2013-03-22 21:34:55	merijn	The difference between "newtype" and "data" is that, at runtime, the newtype's constructor doesn't exist
2013-03-22 21:35:04	tgeeky	and I am wrong, anyway.
2013-03-22 21:35:13	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 21:35:16	latro`a	why exactly can't data optimize away a constructor for a type with only one constructor anyway?
2013-03-22 21:35:34	c_wraith	Because that changes the meaning
2013-03-22 21:35:36	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-22 21:35:40	latro`a	oh?
2013-03-22 21:35:46	geekosaur	consider bottoms
2013-03-22 21:35:50	<--	jrajav (~jrajav@198.179.137.211) has quit (Quit: I tend to be neutral about apples)
2013-03-22 21:35:52	latro`a	ah yes
2013-03-22 21:36:05	geekosaur	or, looked at another way: the constructor introduces an opportunity for laziness
2013-03-22 21:36:06	merijn	Pods: "type" is for aliasing long types, for example "type Blah = Foo -> Bar -> Baz -> Xyzzy", so you don't have the constantly type the entire type signatures.
2013-03-22 21:36:08	latro`a	newtype Foo a = Foo a; Foo undefined is undefined
2013-03-22 21:36:15	latro`a	knew this ages ago
2013-03-22 21:36:16	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 245 seconds)
2013-03-22 21:36:25	geekosaur	if you optimize it away you may be introducing strictness where it is not wanted
2013-03-22 21:36:32	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 21:36:36	<--	xcombelle (~xcombelle@AToulouse-551-1-134-118.w86-201.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-03-22 21:36:38	latro`a	yes, I remember now
2013-03-22 21:36:46	c_wraith	latro`a: consider: instance Monad Identity where return = Identity ; (Identity x) >>= f = f x
2013-03-22 21:36:51	latro`a	so is data Foo a = Foo !a just dumb?
2013-03-22 21:36:56	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 272 seconds)
2013-03-22 21:37:07	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:37:08	c_wraith	latro`a: the semantics of that monad instance vary greatly depending on whether Identity is defined as data or a newtype
2013-03-22 21:37:16	latro`a	yeah I see that
2013-03-22 21:37:18	Pods	could i merge multiple types in a newtype ??, say define a newtype which constitues of strings as well as integrals??
2013-03-22 21:37:37	LambdaDusk	Pods: Nope, that's what data is for
2013-03-22 21:37:40	monoidal	Pods: newtypes can have only one constructor
2013-03-22 21:37:44	--	preflex_ is now known as preflex
2013-03-22 21:37:56	Pods	okay
2013-03-22 21:37:59	LambdaDusk	Pods: one constructor with one parameter
2013-03-22 21:38:01	Pods	got it :)
2013-03-22 21:38:15	<--	wyfrn_ (~wyfrn@p5B2BDD1D.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-22 21:38:46	 *	tgeeky finds the language on HaskellWiki's keywords page confusing with respect to these two. 'type' starts The newtype declaration is how one introduces a renaming for an algebraic data type into Haskell.
2013-03-22 21:38:51	tgeeky	...
2013-03-22 21:38:57	tgeeky	newtype => The newtype declaration is how one introduces a renaming for an algebraic data type into Haskell.
2013-03-22 21:39:04	tgeeky	type => The type declaration is how one introduces an alias for an algebraic data type into Haskell.
2013-03-22 21:39:18	-->	schlicht__ (~fl@e179128222.adsl.alicedsl.de) has joined #haskell
2013-03-22 21:39:20	<--	schlicht_ (~fl@g231184107.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-03-22 21:39:27	-->	indrek (~indrek@gn28.zone.eu) has joined #haskell
2013-03-22 21:39:34	Pods	tgeeky : good to see the same emotion flooding :D
2013-03-22 21:39:34	-->	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has joined #haskell
2013-03-22 21:39:52	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 21:39:53	tgeeky	I mean, I thought I understood them both, but I never use 'type', and have really only used 'data'.
2013-03-22 21:39:58	-->	Eldariof-ru (~CLD@pppoe-214-197-dyn-sr.volgaline.ru) has joined #haskell
2013-03-22 21:39:58	merijn	Pods: THe simplest answer is that you should just use type and data and when you finally need newtype it'll probably feel completely obvious (at least, that was my experience)
2013-03-22 21:40:01	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:40:16	tgeeky	From my perspective, OTHER people use newtype when they know what's best :o
2013-03-22 21:41:00	Pods	merijn : point noted :)
2013-03-22 21:41:09	merijn	tgeeky: type mostly makes sense if you have a function type that occurs frequently and thus needs to be repeated in all sorts of signatures
2013-03-22 21:41:20	merijn	It avoids annoying parenthesis, etc
2013-03-22 21:41:30	indrek	I have 3 lists. [1], [2, 4], [3]. What is the easiest way to get all possible combinations so that one element from each list is used? e.g [1, 2, 3], [1, 4, 3]
2013-03-22 21:41:32	sproingie	newtype seems most useful as a subtype mechanism
2013-03-22 21:41:44	tgeeky	merijn: and then I could just later use newtype when I want the same structure, but just under a different name
2013-03-22 21:41:49	tgeeky	?
2013-03-22 21:41:55	-->	heruur (~tvh@220-158-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-22 21:42:07	sproingie	got two things taking an Int but want to differentiate them anyway?  wrap a newtype around it.  that sort of thing.
2013-03-22 21:42:13	merijn	tgeeky: "I want the same structure, but want to encode some operational difference in the type"
2013-03-22 21:42:17	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 21:42:23	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 21:42:25	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:42:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 248 seconds)
2013-03-22 21:42:34	monoidal	> sequence [[1], [2,4],[3]] --indrek
2013-03-22 21:42:34	merijn	tgeeky: I really like the String/SafeString example of strings that have dangerous characters escaped
2013-03-22 21:42:36	lambdabot	  [[1,2,3],[1,4,3]]
2013-03-22 21:42:38	<--	DexterLB (~dex@87-126-72-78.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-22 21:43:06	LambdaDusk	Haskell is hard until you understood it then you wonder why you've been so stupid
2013-03-22 21:43:07	merijn	tgeeky: Clearly it's just a string, but using "type" would let you accidentally hand unescaped strings to something expecting escaped strings
2013-03-22 21:43:10	tgeeky	merijn: yes, that's alon the lines of my thought. I have a type already, but I want another which appears to be identical, but is (probably) internally different, and which *can not* be mixed.
2013-03-22 21:43:24	<--	eldariof (~CLD@pppoe-202-128-dyn-sr.volgaline.ru) has quit (Ping timeout: 276 seconds)
2013-03-22 21:43:44	merijn	tgeeky: Yeah, that's the usualy case for newtypes, together with recursive types
2013-03-22 21:44:03	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 276 seconds)
2013-03-22 21:44:04	merijn	i.e. "newtype Interpeter a = a -> IO (Interpreter a)"
2013-03-22 21:44:16	 *	tgeeky thinks he should look at the report to make sure he is thinking correctly.
2013-03-22 21:44:20	merijn	That type signature would otherwise report infinitely
2013-03-22 21:44:30	<--	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has quit (Ping timeout: 264 seconds)
2013-03-22 21:44:49	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-22 21:44:50	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-22 21:45:05	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-22 21:45:05	sproingie	i read something about fixpoint types that address that sort of thing
2013-03-22 21:45:14	<--	bitonic (~user@b01bf0a7.bb.sky.com) has quit (Remote host closed the connection)
2013-03-22 21:45:22	sproingie	cant remember where i found it
2013-03-22 21:45:23	elliott	merijn: you're missing a constructor name there :)
2013-03-22 21:45:30	-->	bitonic (~user@b01bf0a7.bb.sky.com) has joined #haskell
2013-03-22 21:45:33	-->	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has joined #haskell
2013-03-22 21:45:36	merijn	elliott: My bad
2013-03-22 21:45:51	<--	sellout- (~Adium@nomad.ccs.neu.edu) has quit (Quit: Leaving.)
2013-03-22 21:46:16	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Quit: leaving)
2013-03-22 21:46:16	<--	LambdaDusk (~Tom_Strel@91-66-25-66-dynip.superkabel.de) has left #haskell
2013-03-22 21:47:02	elliott	sproingie: isorecursive vs. equirecursive?
2013-03-22 21:47:04	<--	hiroakip (~hiroaki@5.147.122.136) has quit (Ping timeout: 272 seconds)
2013-03-22 21:47:15	<--	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 258 seconds)
2013-03-22 21:47:17	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 255 seconds)
2013-03-22 21:47:21	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-03-22 21:48:42	sproingie	elliott: might be some way, but it's beyond me
2013-03-22 21:49:16	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 21:49:28	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:50:53	sproingie	oddly the fix point type made a lot more sense to me than the fix function itself
2013-03-22 21:51:10	<--	cognominal__ (~cognomina@37.160.6.238) has quit (Ping timeout: 260 seconds)
2013-03-22 21:51:16	sproingie	the one time type level programming was actually clearer to me
2013-03-22 21:51:30	sproingie	unfortunately the concept was too slippery to stay in my head
2013-03-22 21:51:41	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-22 21:51:45	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-22 21:51:49	-->	DexterLB (~dex@87-126-74-235.btc-net.bg) has joined #haskell
2013-03-22 21:51:50	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 21:51:59	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:52:04	sproingie	i rememver monads were like that for years for me
2013-03-22 21:52:56	-->	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has joined #haskell
2013-03-22 21:53:00	skyflash	Anyone here used the "plugins" library?  Trying to use 'eval' with the simple example included in the docs and getting "Warning: -fglasgow-exts is deprecated..." in the output (which apparently fails the whole eval)
2013-03-22 21:53:31	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-22 21:53:32	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-22 21:53:33	-->	PuercoPop (~PuercoPop@190.222.252.106) has joined #haskell
2013-03-22 21:53:48	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-22 21:53:53	<--	elgot (~elgot@c-a0c3e455.017-362-6c6b701.cust.bredbandsbolaget.se) has quit (Ping timeout: 245 seconds)
2013-03-22 21:54:09	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 258 seconds)
2013-03-22 21:54:29	monoidal	skyflash: -fglasgow-exts is equivalent to several other flags
2013-03-22 21:54:50	monoidal	ah, I misunderstood
2013-03-22 21:54:59	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 21:55:04	<--	mrsolo (~mrsolo@64.125.181.92) has quit (Quit: This computer has gone to sleep)
2013-03-22 21:55:07	parcs	@src Mu
2013-03-22 21:55:07	lambdabot	newtype Mu f = In { out :: f (Mu f) }
2013-03-22 21:55:09	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 21:55:20	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 21:55:25	PuercoPop	One question, don't closures require a dynamic state? (Apparently not as haskell has them http://www.haskell.org/haskellwiki/Closure). How does that work?
2013-03-22 21:56:37	skyflash	yes, clearly the plugins library sends the source you present to 'eval' off to the compiler, and I imagine the current version of plugins also attaches the -fglasgow-exts flag.  I wonder if I can turn that off without amending the plugins library.
2013-03-22 21:56:58	merijn	PuercoPop: Why do closures require dynamic state?
2013-03-22 21:57:12	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 272 seconds)
2013-03-22 21:57:17	geekosaur	the preserved scope can be seen as a kind of dynamic state
2013-03-22 21:57:20	merijn	PuercoPop: All data is immutable in haskell, so after creating the closure the entire closure is immutable...
2013-03-22 21:57:20	-->	mrsolo (~mrsolo@64.125.181.92) has joined #haskell
2013-03-22 21:57:25	tgeeky	skyflash: I'm looking at it now. That should only incur a warning, anyway... which shouldn't stop eval.
2013-03-22 21:57:40	PuercoPop	merijn don't they need keep a pointer to the current value of the variable?
2013-03-22 21:57:55	geekosaur	dynamic in the sense of created when needed, not in the sense of mutable
2013-03-22 21:57:56	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-22 21:58:03	merijn	PuercoPop: Sure, but that's an internal implementation detail
2013-03-22 21:58:13	sproingie	they could in fact copy it if they wished
2013-03-22 21:58:17	skyflash	tgeeky: Thanks!  That's what I thought too, but I clearly get "Nothing" back from eval (or strictly: IO Nothing).
2013-03-22 21:58:23	sproingie	(they don't, but you can imagine they do)
2013-03-22 21:58:51	PuercoPop	aren't you keeping 'state' in the variable? Doesn't that violate referential transparenty?
2013-03-22 21:58:53	merijn	PuercoPop: Internally the compiler can mutate whatever it likes
2013-03-22 21:59:03	sproingie	haskell variables don't vary
2013-03-22 21:59:18	merijn	PuercoPop: How does it violate referential transparency? Every time you call the closure it produces the same output, no?
2013-03-22 21:59:28	-->	cognominal__ (~cognomina@37.161.2.79) has joined #haskell
2013-03-22 21:59:31	danharaj	Would anyone happen to know if there is a package that defines applicative operations on Vectors? Because the base package only has monadic operations and they can't be used to define a traversal. I would rather not convert to and from lists.
2013-03-22 21:59:43	PuercoPop	merijn: let me give you an example, sec
2013-03-22 22:00:00	edwardk	danharaj: are they not in vector or vector-instances?
2013-03-22 22:00:13	elliott	danharaj: do you mean like mapM?
2013-03-22 22:00:16	PuercoPop	merijn: sorry I just read the example I was thinking of and I was doing assignment
2013-03-22 22:00:21	elliott	lens has traversals for vectors, at least
2013-03-22 22:00:22	geekosaur	haskell doesn't really have variables, it has bindings. (the difference is, a variable is a container you can put things in, a binding is a bit of accounting information saying where to find something)
2013-03-22 22:00:26	PuercoPop	merijn: thanks for clearing it up
2013-03-22 22:00:32	danharaj	edwardk: Boxed vectors have traversals but unboxed do not because of the constraint.
2013-03-22 22:00:59	danharaj	elliott: pretty much
2013-03-22 22:00:59	merijn	PuercoPop: np :)
2013-03-22 22:01:02	edwardk	danharaj: try 'each'
2013-03-22 22:01:03	<--	madjestic (~madjestic@188.89.75.186) has quit (Read error: Connection reset by peer)
2013-03-22 22:01:09	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-22 22:01:14	danharaj	:t each
2013-03-22 22:01:16	lambdabot	(Indexable (Index t) p, Each f s t a b) => p a (f b) -> s -> f t
2013-03-22 22:01:28	edwardk	> [1..10]^..each.filtered even
2013-03-22 22:01:31	lambdabot	  [2,4,6,8,10]
2013-03-22 22:01:34	danharaj	edwardk: has anyone told you how violent lens signatures are
2013-03-22 22:01:36	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 22:01:36	-->	elgot (~elgot@c-a0c3e455.017-362-6c6b701.cust.bredbandsbolaget.se) has joined #haskell
2013-03-22 22:01:37	tgeeky	skyflash: can you try someting simpler, to see if the code you are trying is genuinely failing to typecheck?
2013-03-22 22:01:40	edwardk	=)
2013-03-22 22:01:42	edwardk	a few
2013-03-22 22:01:43	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 22:01:53	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 22:02:05	edwardk	i can no longer even hear their screams
2013-03-22 22:02:23	dEPY	how long does it take to memorize and get used to haskells syntax?  there's alot of variations of doing stuff :S
2013-03-22 22:02:45	danharaj	edwardk: one day you must teach me how to read those signatures.
2013-03-22 22:02:46	merijn	dEPY: The syntax not so long, the operators from common libraries? Slightly longer
2013-03-22 22:03:01	merijn	dEPY: But Hoogle and GHCi are usually quick ways to figure out what things are doing
2013-03-22 22:03:09	edwardk	danharaj: to a first approximation assume 'p' = (->)
2013-03-22 22:03:11	tgeeky	edwardk: fstab? Get your lenses out of my fstab!
2013-03-22 22:03:26	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-03-22 22:03:37	dEPY	merijn: I hope so.. :D
2013-03-22 22:03:50	edwardk	tgeeky: you get 'stab' 'pabst' and all sorts of fun combinations out of lens. i'm pretty sure i had it all but say 'i m a s t a b u'  and i walked away
2013-03-22 22:04:23	-->	pimpy (~pimpy@ney92-6-88-180-119-101.fbx.proxad.net) has joined #haskell
2013-03-22 22:04:36	merijn	dEPY: There's a nice haskell cheat sheet on http://cheatsheet.codeslower.com/
2013-03-22 22:05:01	<--	fmapE (~fmapE@2001:18e8:2:10f4:135:7df5:5508:d607) has quit (Remote host closed the connection)
2013-03-22 22:05:27	geekosaur	2remember edwardk
2013-03-22 22:05:28	danharaj	edwardk: sometimes the errors you get for using indexed stuff explode into spectacular pages of unsolvable constraints.
2013-03-22 22:05:45	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-22 22:05:48	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 22:05:54	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 22:05:55	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Ping timeout: 264 seconds)
2013-03-22 22:06:20	<--	pimpy (~pimpy@ney92-6-88-180-119-101.fbx.proxad.net) has left #haskell ("Leaving")
2013-03-22 22:06:20	<--	igrekster (~andrey@37.139.64.15) has quit (Read error: Connection reset by peer)
2013-03-22 22:07:00	<--	akosch (~akosch@catv-89-132-137-62.catv.broadband.hu) has quit (Quit: Leaving)
2013-03-22 22:07:01	-->	igrekster (~andrey@37.139.64.15) has joined #haskell
2013-03-22 22:07:58	dEPY	merijn: thanks, that will be usefull. :)
2013-03-22 22:08:07	merijn	@hoogle Monad m => (a -> b -> m c) -> m a -> m b -> m c
2013-03-22 22:08:08	lambdabot	Control.Monad zipWithM :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]
2013-03-22 22:08:08	lambdabot	Control.Monad zipWithM_ :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()
2013-03-22 22:08:08	lambdabot	Control.Monad foldM :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
2013-03-22 22:08:12	merijn	:(
2013-03-22 22:08:42	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-22 22:08:46	niteria	:t liftM
2013-03-22 22:08:47	lambdabot	Monad m => (a1 -> r) -> m a1 -> m r
2013-03-22 22:08:57	niteria	:t liftM2
2013-03-22 22:08:57	-->	madjestic (~madjestic@188.89.75.186) has joined #haskell
2013-03-22 22:08:58	merijn	niteria: liftM and fmap lift the result too
2013-03-22 22:08:58	lambdabot	Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
2013-03-22 22:09:07	-->	akosch (~akosch@catv-89-132-137-62.catv.broadband.hu) has joined #haskell
2013-03-22 22:09:18	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-22 22:09:18	danharaj	edwardk: and the best part is when I solve the type error and the code just works and I have no idea what I am doing still ;)
2013-03-22 22:09:25	merijn	I wanted <$> and <*> where the result is already a monad of itself :p
2013-03-22 22:09:47	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-22 22:09:55	edwardk	hah, we should sit down and do a crash course in what it all means at some point
2013-03-22 22:10:12	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-22 22:10:17	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-22 22:10:18	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-22 22:10:19	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 260 seconds)
2013-03-22 22:10:29	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Client Quit)
2013-03-22 22:10:58	niteria	:t join . liftM2
2013-03-22 22:11:00	lambdabot	Monad m => (a1 -> a1 -> r) -> m a1 -> m r
2013-03-22 22:11:12	 *	hackagebot bound 0.7 - Making de Bruijn Succ Less  http://hackage.haskell.org/package/bound-0.7 (EdwardKmett)
2013-03-22 22:11:13	-->	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-03-22 22:11:15	merijn	edwardk: The two hour talk on lens/traversal/fold was nice, now I just need one for prisms and all the other new indexed stuff :p
2013-03-22 22:11:18	danharaj	edwardk: took a peak at the Each instance for unboxed vectors and it looks like it converts to and back from a list. I am not sure that is as performant as possible. I'll probably do a profile *eventually*.
2013-03-22 22:11:25	monoidal	:t \f x y -> join (liftM2 f x y)
2013-03-22 22:11:27	lambdabot	Monad m => (a1 -> a2 -> m a) -> m a1 -> m a2 -> m a
2013-03-22 22:11:39	niteria	yeah, that's what I wanted
2013-03-22 22:11:46	danharaj	edwardk: I am afraid of the possibility that it actually creates the list instead of deforesting it.
2013-03-22 22:11:54	edwardk	danharaj: i don't think you can do anything better, because we don't get anything out of vector that works with applicatives
2013-03-22 22:12:02	edwardk	the str2013-03-22 22:12:39	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 276 seconds)
2013-03-22 22:12:56	<--	[swift] (~swift]@75-101-60-167.dsl.static.sonic.net) has quit (Client Quit)
2013-03-22 22:13:17	edwardk	danharaj: maybe take a look at the Control.Lens.Internal.ByteString module which bends over backwards to make bytestrings perform
2013-03-22 22:13:37	edwardk	if we did the same thing for vectors you could get log time indexing to jump around in them like i give you in bytestrings
2013-03-22 22:13:50	edwardk	and you could get a slightly better story than the naive list
2013-03-22 22:14:03	edwardk	expect a very unsafe ratsnest though
2013-03-22 22:14:43	danharaj	edwardk: Sounds like the path of lesser resistance would be to just write mutable vector code when I need tighter performance.
2013-03-22 22:15:11	edwardk	danharaj: i still do
2013-03-22 22:15:24	<--	igrekster (~andrey@37.139.64.15) has quit (Ping timeout: 256 seconds)
2013-03-22 22:15:30	danharaj	edwardk: that's the one area of code lens doesn't scratch for me.
2013-03-22 22:15:32	edwardk	the analytics code has a fair bit of mixed lens/traditional vector code
2013-03-22 22:15:40	-->	darinmorrison (~dwm@unaffiliated/darinmorrison) has joined #haskell
2013-03-22 22:15:53	danharaj	since it's not possible to write monadic loops as lenses.
2013-03-22 22:15:54	edwardk	take a look at say the HyperLogLog code in analytics for examples
2013-03-22 22:16:13	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 22:16:17	danharaj	edwardk: will do right now actually. I am rewriting my vector code as we speak.
2013-03-22 22:16:34	edwardk	also Data.Analytics.Numeric.Moments iirc
2013-03-22 22:16:55	edwardk	http://rebase.org/analytics/src/Data-Analytics-Numeric-Moments.html#Moments
2013-03-22 22:17:00	edwardk	not my prettiest code
2013-03-22 22:17:37	<--	osxorgat_ (~osxorgate@94.142.213.250) has quit (Read error: No route to host)
2013-03-22 22:18:03	edwardk	and http://rebase.org/analytics/src/Data-Analytics-Approximate-HyperLogLog-Type.html#HyperLogLog
2013-03-22 22:18:05	-->	osxorgate (~osxorgate@94.142.213.250) has joined #haskell
2013-03-22 22:18:18	<--	pseudolio (~dolio@gw1.mcgraw-hill.com) has quit (Quit: Leaving)
2013-03-22 22:19:18	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-22 22:19:36	danharaj	edwardk: when and why would one use the `inline` primitive instead of relying on pragmas?
2013-03-22 22:19:37	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-22 22:19:37	-->	Paprikachu (~Paprikach@178.115.248.3.wireless.dyn.drei.com) has joined #haskell
2013-03-22 22:20:32	-->	lww5064 (~louis@pool-98-114-3-27.phlapa.fios.verizon.net) has joined #haskell
2013-03-22 22:20:41	edwardk	if you have two occurrences of a value in a term, it isn't 'work safe' to inline it so, ghc won't typically unless it is trivial. so if you have two uses of a continuation that get used very differently inlining can copy the continuation like you'd duplicated the code by hand
2013-03-22 22:20:57	-->	Eduard_Munteanu (~Eduard_Mu@188.25.6.165) has joined #haskell
2013-03-22 22:21:03	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-22 22:21:06	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 264 seconds)
2013-03-22 22:21:09	--	preflex_ is now known as preflex
2013-03-22 22:21:20	danharaj	edwardk: oh that's really good to know
2013-03-22 22:21:31	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-22 22:21:40	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-03-22 22:22:11	<--	DexterLB (~dex@87-126-74-235.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-22 22:22:31	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-22 22:23:48	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-22 22:23:52	-->	jpeeters (~Adium@cha28-2-88-12013-03-23 04:12:45	otters	finger
2013-03-23 04:12:48	otters	gross
2013-03-23 04:12:59	--	Kindaro_ is now known as Kindaro
2013-03-23 04:13:17	Kaidelong	well there is a network tool by that name
2013-03-23 04:13:23	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-23 04:13:23	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-23 04:15:31	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-23 04:15:32	-->	kallisti (~eris@168.28.136.16) has joined #haskell
2013-03-23 04:15:32	<--	kallisti (~eris@168.28.136.16) has quit (Changing host)
2013-03-23 04:15:32	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-03-23 04:15:35	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 260 seconds)
2013-03-23 04:15:47	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-23 04:15:50	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-23 04:16:10	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 260 seconds)
2013-03-23 04:17:39	-->	mrotondo (~mrotondo@108-169-6-213.dsl.dynamic.sonic.net) has joined #haskell
2013-03-23 04:18:45	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-23 04:20:26	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 245 seconds)
2013-03-23 04:21:16	-->	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-23 04:22:29	<--	knightshade (~knightsha@p54BC5884.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-23 04:23:50	<--	k00mi (~koomi@24.134.205.36) has quit (Quit: WeeChat 0.4.0)
2013-03-23 04:24:18	-->	latermuse (~ron@112.201.163.36) has joined #haskell
2013-03-23 04:25:06	<--	sjust (~sam@71-83-191-116.dhcp.gldl.ca.charter.com) has quit (Ping timeout: 276 seconds)
2013-03-23 04:25:28	<--	roconnor (~roconnor@e120-pool-d89a627b.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-23 04:25:42	-->	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has joined #haskell
2013-03-23 04:26:39	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-03-23 04:27:14	-->	path[l] (~vsi@173.252.71.129) has joined #haskell
2013-03-23 04:27:26	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 252 seconds)
2013-03-23 04:28:19	-->	deech (~user@108.230.9.218) has joined #haskell
2013-03-23 04:29:15	<--	Kindaro (~Kindaro@84.23.59.80) has quit (Quit: leaving)
2013-03-23 04:29:16	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-23 04:30:06	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 264 seconds)
2013-03-23 04:30:07	BMeph	So remember, you can tool your finger.... ;p
2013-03-23 04:30:15	-->	Kevin-_-|2 (kvirc@host-184-197.mocores.clients.pavlovmedia.com) has joined #haskell
2013-03-23 04:30:56	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-23 04:31:44	-->	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has joined #haskell
2013-03-23 04:31:46	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-23 04:32:25	-->	pranavrc (~pranavrc@122.174.6.195) has joined #haskell
2013-03-23 04:32:25	<--	pranavrc (~pranavrc@122.174.6.195) has quit (Changing host)
2013-03-23 04:32:25	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-23 04:33:18	-->	[[zz]] (~q@node-47b.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-23 04:33:30	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-23 04:33:41	<--	Kevin-_- (kvirc@host-43-148.mocores.clients.pavlovmedia.com) has quit (Ping timeout: 246 seconds)
2013-03-23 04:34:05	-->	cschneid (cschneid@2600:3c00::f03c:91ff:fedf:d92e) has joined #haskell
2013-03-23 04:34:14	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 240 seconds)
2013-03-23 04:35:58	<--	Urchin[emacs] (~user@unaffiliated/urchin) has quit (Ping timeout: 245 seconds)
2013-03-23 04:36:06	-->	soulofpeace (~soulofpea@175.156.65.167) has joined 2013-03-23 04:42:42	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-23 04:43:50	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Quit: WeeChat 0.3.7)
2013-03-23 04:44:00	cschneid	How do I noop my default parse implementation? https://gist.github.com/cschneid/5226348
2013-03-23 04:44:51	parcs	what?
2013-03-23 04:45:11	parcs	i think you want 'return ()'?
2013-03-23 04:45:16	<--	snits (~snits@inet-hqmc06-o.oracle.com) has quit (Quit: leaving)
2013-03-23 04:45:26	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 04:46:11	otters	could use "undefined"
2013-03-23 04:46:17	otters	lol
2013-03-23 04:46:31	-->	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 04:46:31	<--	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has quit (Changing host)
2013-03-23 04:46:31	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-23 04:46:34	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-23 04:46:59	cschneid	parcs: undefined crashes out. I want 1) exaustive pattern matching to make the warning go away, and then 2) not to do anything if it isn't -v and -h
2013-03-23 04:47:07	cschneid	parcs: probably, ya, let me give it a go
2013-03-23 04:47:41	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-23 04:47:45	cschneid	cool, that did work. Thank you - this is my 50th "first-day" of haskell. Hopefully this time it sticks.
2013-03-23 04:48:06	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-23 04:48:23	--	u_ is now known as v_
2013-03-23 04:48:37	--	v_ is now known as u_
2013-03-23 04:49:34	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-23 04:50:06	<--	wyfrn_ (~wyfrn@p5B2BBB06.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-23 04:51:37	-->	charliesome (~textual@124-148-152-46.dyn.iinet.net.au) has joined #haskell
2013-03-23 04:51:42	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 264 seconds)
2013-03-23 04:52:07	<--	ctult (~ctult@65-129-22-233.bois.qwest.net) has quit (Ping timeout: 260 seconds)
2013-03-23 04:54:08	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 252 seconds)
2013-03-23 04:55:05	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 252 seconds)
2013-03-23 04:55:42	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-03-23 04:56:02	<--	DexterLB (~dex@46.10.48.187) has quit (Ping timeout: 252 seconds)
2013-03-23 04:56:04	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-23 04:57:24	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-03-23 04:57:44	<--	mannyv (~manny@c-68-55-227-229.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-23 05:00:30	<--	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 260 seconds)
2013-03-23 05:01:20	-->	Nomad__ (d83a6fb6@gateway/web/freenode/ip.216.58.111.182) has joined #haskell
2013-03-23 05:01:45	Nomad__	Hello. I'm kinda curious, if I do a recursive list in haskell, does it reallocate the list each step, or does it do magic in the background to optimize that?
2013-03-23 05:02:09	<--	soulofpeace (~soulofpea@175.156.65.167) has quit (Ping timeout: 276 seconds)
2013-03-23 05:03:23	ParahSail1n	what it needs to allocate, it will allocate
2013-03-23 05:03:29	<--	latermuse (~ron@112.201.163.36) has quit (Ping timeout: 256 seconds)
2013-03-23 05:03:41	shachaf	INSUFFICIENT DATA FOR MEANINGFUL ANSWER
2013-03-23 05:03:45	-->	soulofpeace (~soulofpea@175.156.65.167) has joined #haskell
2013-03-23 05:04:04	geekosaur	shachaf will someday evolve into universal-AC
2013-03-23 05:04:16	<--	lemao_ (~lemao@187.67.222.39) has quit (Remote host closed the connection)
2013-03-23 05:05:00	 *	latro`a repeats the earlier gag
2013-03-23 05:05:10	latro`a	"Hey, I am Haskell; and this is lazy; so here's a function; I'll call it, maybe."
2013-032013-03-23 05:42:51	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-23 05:43:01	cschneid	anyway, it seems like Data.Text.hexadecimal translates it to an Integral value.
2013-03-23 05:43:04	cschneid	which is ... closer.
2013-03-23 05:43:10	cschneid	but I can't actually get that to work either
2013-03-23 05:43:13	ParahSail1n	data.bits is helpful for bit twiddling on integral values
2013-03-23 05:43:41	startling	cschneid, I'd just split it into two-char chunks and thence into Data.Word.Word8
2013-03-23 05:43:44	cschneid	ParahSail1n: that is 100% what I need for my next steps.
2013-03-23 05:44:23	cschneid	startling: I'm new to all this. As I mentioned earlier, it's my 50th "fresh start" on attempting this. I finally have a good problem set to play with
2013-03-23 05:44:54	shachaf	cschneid: Probably you should parse it into a list of bytes and then use BS.pack
2013-03-23 05:45:08	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 248 seconds)
2013-03-23 05:45:17	ParahSail1n	@ty readhex
2013-03-23 05:45:18	lambdabot	    Not in scope: `readhex'
2013-03-23 05:45:18	lambdabot	    Perhaps you meant one of these:
2013-03-23 05:45:18	lambdabot	      `readHex' (imported from Numeric),
2013-03-23 05:45:23	ParahSail1n	@ty readHex
2013-03-23 05:45:25	lambdabot	(Eq a, Num a) => ReadS a
2013-03-23 05:45:28	<--	Nomad__ (d83a6fb6@gateway/web/freenode/ip.216.58.111.182) has quit (Ping timeout: 245 seconds)
2013-03-23 05:46:09	shachaf	> BS.pack . map (^?! base 16) . splitEvery 2 $ "ffaa11"
2013-03-23 05:46:11	lambdabot	  "\255\170\DC1"
2013-03-23 05:46:14	shachaf	OK, no fair using lens.
2013-03-23 05:46:29	latro`a	:t (^?!)
2013-03-23 05:46:31	lambdabot	s -> Getting (Endo a) s t a b -> a
2013-03-23 05:47:06	cschneid	wtf is going on with ^?!
2013-03-23 05:47:11	shachaf	Sorry, ignore that.
2013-03-23 05:47:12	cschneid	nevermind, I don't care yet
2013-03-23 05:47:30	edwardk	the name of ^?! is designed to make you stop and go ^?! =P
2013-03-23 05:47:40	cschneid	ok, help me with reading docs.  How would I go from a string representing a byte:   "aa" into the byte it represents as a Word8
2013-03-23 05:47:58	ParahSail1n	> readHex "ffaa11"
2013-03-23 05:48:00	lambdabot	  can't find file: L.hs
2013-03-23 05:48:22	shachaf	> readHex "aa"
2013-03-23 05:48:24	lambdabot	  [(170,"")]
2013-03-23 05:48:44	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-23 05:49:07	shachaf	@let readHexMaybe :: Integral a => String -> Maybe a; readHexMaybe s = case readHex s of [(x,"")] -> Just x; _ -> Nothing
2013-03-23 05:49:10	lambdabot	 Defined.
2013-03-23 05:49:23	startling	cschneid: well, one way is `case x of "01" -> 1 :: Word8; "02" -> 2 :: Word8; ...`
2013-03-23 05:49:42	shachaf	> fmap BS.pack . mapM readHexMaybe . splitEvery 2 $ "ffaa11"
2013-03-23 05:49:45	lambdabot	  Just "\255\170\DC1"
2013-03-23 05:49:50	shachaf	> fmap BS.pack . mapM readHexMaybe . splitEvery 2 $ "ffaa115q"
2013-03-23 05:49:52	lambdabot	  Nothing
2013-03-23 05:49:53	startling	:t splitEvery
2013-03-23 05:49:55	lambdabot	Int -> [e] -> [[e]]
2013-03-23 05:49:59	startling	where's that from?
2013-03-23 05:50:06	ParahSail1n	splits
2013-03-23 05:50:14	startling	handy
2013-03-23 05:50:18	ParahSail1n	@ty chunksOf
2013-03-23 05:50:19	lambdabot	Int -> [e] -> [[e]]
2013-03-23 05:50:28	JoeyA	@hackage split
2013-03-23 05:50:28	lambdabot	http://hackage.haskell.org/package/split
2013-03-23 05:54:20	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-23 05:54:47	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 05:55:45	<--	wollw (~wollw@unaffiliated/wollw) has quit (Quit: Lost terminal)
2013-03-23 05:56:06	-->	kanishka (ae3ed515@gateway/web/freenode/ip.174.62.213.21) has joined #haskell
2013-03-23 05:56:09	cschneid	ok, thank you everybody. I'm parsing all of the things you sent my way now... :)
2013-03-23 05:56:12	--	pdxleif_away is now known as pdxleif
2013-03-23 05:56:17	-->	wollw (~wollw@unaffiliated/wollw) has joined #haskell
2013-03-23 05:56:29	-->	Jesin (~Jes2013-03-23 06:42:37	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-03-23 06:42:43	BadKitty	...
2013-03-23 06:43:14	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-03-23 06:43:39	 *	BadKitty wonders why this isn't using a bytestring version of Numeric
2013-03-23 06:43:49	BadKitty	readInt/showIntAtBase etc
2013-03-23 06:43:57	BadKitty	then store the int as a bytestring
2013-03-23 06:44:03	BadKitty	encode *
2013-03-23 06:44:05	shachaf	cschneid: This is "C in Haskell", more or less.
2013-03-23 06:44:20	cschneid	shachaf: ok, figured. Just CRAZY.
2013-03-23 06:44:22	cschneid	:)
2013-03-23 06:44:42	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-03-23 06:44:52	cschneid	it does give me correct output. So whatever.  But still just weird code
2013-03-23 06:46:01	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-23 06:46:10	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-23 06:46:54	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-03-23 06:48:03	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-23 06:50:53	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-23 06:51:47	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: Connection reset by peer)
2013-03-23 06:52:00	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-23 06:53:20	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-23 06:54:39	-->	sanemat (~sanemat@209.208.138.210.vmobile.jp) has joined #haskell
2013-03-23 06:55:31	<--	jianmeng1 (~mengjian@61.183.52.98) has quit (Quit: Leaving.)
2013-03-23 06:56:01	BadKitty	cschneid: Don't use it. Use Numeral's readInt and showIntAtBase
2013-03-23 06:56:39	BadKitty	(Get an integer, from there encode that to a bytestring)
2013-03-23 06:56:40	cschneid	BadKitty: it already works with this code, even if the underlying one is crazy
2013-03-23 06:56:50	BadKitty	CRAZY
2013-03-23 06:56:52	cschneid	can you example that up? I'm brand new.
2013-03-23 06:57:05	BadKitty	Sure.
2013-03-23 06:57:10	BadKitty	@hoogle showIntAtBase
2013-03-23 06:57:11	lambdabot	Numeric showIntAtBase :: Integral a => a -> (Int -> Char) -> a -> ShowS
2013-03-23 06:58:00	cschneid	what's a ReadS and ShowS, I've seen those a few times
2013-03-23 06:58:02	cschneid	what's the S mean
2013-03-23 06:58:10	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-23 06:58:15	shachaf	cschneid: Do you know about Hoogle?
2013-03-23 06:58:17	shachaf	@where hoogle
2013-03-23 06:58:17	lambdabot	http://haskell.org/hoogle
2013-03-23 06:58:26	shachaf	It's useful for answering those sorts of questions.
2013-03-23 06:58:47	cschneid	I know of it, but haven't integrated it into my workflow... since... I don't have a workflow
2013-03-23 06:58:59	<--	sanemat (~sanemat@209.208.138.210.vmobile.jp) has quit (Ping timeout: 252 seconds)
2013-03-23 06:59:53	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: No route to host)
2013-03-23 06:59:58	-->	juxovec_ (~juxovec@88.103.13.78) has joined #haskell
2013-03-23 06:59:59	<--	nwf (~nwf@67.62.51.95) has quit (Ping timeout: 245 seconds)
2013-03-23 07:01:28	ParahSail1n	one thing that's annoying is that sometimes when i use google to look for standard ghc libraries, the 6.x docs appear as the only result
2013-03-23 07:01:50	<--	hattusili_III (~quassel@black-171-066.rh.uchicago.edu) has quit (Remote host closed the connection)
2013-03-23 07:02:23	pharaun	rah that annoys the crap out of me
2013-03-23 07:02:40	<--	bhrgunatha (~chatzilla@118-170-185-120.dynamic.hinet.net) has quit (Quit: ChatZilla 0.9.90 [Firefox 22.0a1/20130322031028])
2013-03-23 07:02:48	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-23 07:02:57	BadKitty	cschneid: showIntAtBase 5 (\i -> case i of { 1 -> 'b'; 3 -> 'c'; 4 -> 'd'; 5 -> 'e' }) 1048 ""
2013-03-23 07:03:01	BadKitty	> showIntAtBa2013-03-23 07:42:45	<--	Ftroop (~kvirc@cpc23-linc11-2-0-cust242.12-1.cable.virginmedia.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-03-23 07:43:18	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 264 seconds)
2013-03-23 07:43:49	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Quit: seafood)
2013-03-23 07:45:04	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 07:45:09	Ralith	oh man, Zhivago
2013-03-23 07:45:57	Ralith	if ever you want a precise and 100% correct, helpful, and informative answer founded in the formal standards, couched in a bombardment of personal attacks
2013-03-23 07:46:00	Ralith	he's your man
2013-03-23 07:46:08	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-23 07:46:23	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-23 07:46:28	-->	shintah (bebble@h-169-159.a336.priv.bahnhof.se) has joined #haskell
2013-03-23 07:46:42	<--	jonaias_ (~jonaias@177.102.80.97) has quit (Read error: Connection reset by peer)
2013-03-23 07:47:23	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-23 07:47:38	-->	jonaias (~jonaias@177.102.80.97) has joined #haskell
2013-03-23 07:47:54	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-23 07:48:31	<--	Eduard_Munteanu (~Eduard_Mu@188.25.6.165) has quit (Ping timeout: 264 seconds)
2013-03-23 07:49:26	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-23 07:50:41	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 252 seconds)
2013-03-23 07:50:46	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-23 07:51:10	-->	usr1328 (~AndChat70@89.47.4.234) has joined #haskell
2013-03-23 07:51:54	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 07:52:19	-->	DexterLB (~dex@87-126-74-127.btc-net.bg) has joined #haskell
2013-03-23 07:53:37	<--	charliesome (~textual@124-148-152-46.dyn.iinet.net.au) has quit (Read error: Connection reset by peer)
2013-03-23 07:53:53	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-23 07:53:58	<--	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-23 07:53:59	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-23 07:54:13	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-23 07:54:18	-->	charliesome (~textual@124-148-152-46.dyn.iinet.net.au) has joined #haskell
2013-03-23 07:54:24	-->	sanemat (~sanemat@209.208.138.210.vmobile.jp) has joined #haskell
2013-03-23 07:54:47	<--	sanemat (~sanemat@209.208.138.210.vmobile.jp) has quit (Read error: Connection reset by peer)
2013-03-23 07:54:49	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-23 07:55:21	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-23 07:55:24	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-23 07:55:47	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-23 07:56:53	kallisti	it would appear that the lens library cannot automatically derive lenses for existential types?
2013-03-23 07:57:07	<--	tac (47ef635e@gateway/web/freenode/ip.71.239.99.94) has quit (Ping timeout: 245 seconds)
2013-03-23 07:57:25	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-23 07:57:38	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-23 07:59:02	--	pepijn_away is now known as pepijndevos
2013-03-23 07:59:40	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-23 07:59:47	supki	no
2013-03-23 08:00:08	kallisti	why?
2013-03-23 08:00:19	-->	mewalz (~user@CPE-72-131-87-206.wi.res.rr.com) has joined #haskell
2013-03-23 08:00:48	-->	Eldariof-ru 2013-03-23 08:44:43	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-23 08:44:44	wavewave	which is foundation of computational logic
2013-03-23 08:45:01	-->	oscar_ (~quassel@87-53-20-69-static.dk.customer.tdc.net) has joined #haskell
2013-03-23 08:45:01	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-23 08:45:02	Pods	which in turn is derived by propositional and predicate logic :)
2013-03-23 08:45:20	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 08:45:32	-->	sanemat (~sanemat@209.208.138.210.vmobile.jp) has joined #haskell
2013-03-23 08:45:45	wavewave	both ways in fact. logic can be defined in terms of lambda calculus, too.
2013-03-23 08:45:54	<--	sanemat (~sanemat@209.208.138.210.vmobile.jp) has quit (Read error: Connection reset by peer)
2013-03-23 08:45:55	Pods	Wondering if haskell features in "the beautiful code" ..This is graceful translation of pure logic into computer science.
2013-03-23 08:46:10	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-23 08:46:12	-->	sanemat (~sanemat@209.208.138.210.vmobile.jp) has joined #haskell
2013-03-23 08:46:22	Pods	No wonder haskell is much closer to semantics than any other language i know of..
2013-03-23 08:47:20	wavewave	Pods: if you are interested in logic/ proof related system, you will be interested in dependent type languages some time soon, too.
2013-03-23 08:47:38	wavewave	like Agda, Coq, Idris, Cayenne... etc.
2013-03-23 08:48:14	wavewave	haskell is not dependent typed, but closely related to them.
2013-03-23 08:48:23	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-23 08:48:25	Pods	Havent been exposed to them yet, academic curriculums are restrictive ..(just a matter of flexing them a little bit. )
2013-03-23 08:49:17	Pods	*Agda, Coq, Idris, Cayenne noted in the to-do sometime list :)
2013-03-23 08:49:28	wavewave	Pods: any way one by one. Learning haskell is definitely the right road to learn those languages.
2013-03-23 08:50:07	Pods	yes :)
2013-03-23 08:50:29	no-n	what are teh main dependent typed languages?
2013-03-23 08:50:38	<--	sanemat (~sanemat@209.208.138.210.vmobile.jp) has quit (Ping timeout: 252 seconds)
2013-03-23 08:50:57	wavewave	no-n: I think agda is promising. at least for haskellers.
2013-03-23 08:51:14	Chousuke	idris looks neat as well
2013-03-23 08:51:19	wavewave	no-n: probably coq is for ML programmers.
2013-03-23 08:51:38	wavewave	idris is really nice. it's very new.
2013-03-23 08:52:38	wavewave	I haven't looked at coq much, but for real world proof checker system, coq is the best I heard .
2013-03-23 08:53:07	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-23 08:54:08	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-23 08:54:23	<--	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has quit (Remote host closed the connection)
2013-03-23 08:54:25	wavewave	dependent type languages have practical use in proof checking, but not yet for practical programming. agda and idris are experimenting towards practical language.
2013-03-23 08:55:04	no-n	*nod*
2013-03-23 08:55:34	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-23 08:55:48	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-23 08:56:52	-->	MrFenix (~JanB@p57A19F15.dip.t-dialin.net) has joined #haskell
2013-03-23 08:56:59	wavewave	as for dependent types, the position of haskell looks in-between. haskell is not pursuing full dependent typing, but embracing lightweight dependent type system to a certain extent.
2013-03-23 08:57:10	Chousuke	the effect system in idris seems really nice compared to stacking monad transformers :P
2013-03-23 08:58:03	wavewave	Chousuke: I am not sure effect system can replace monad transformer, though.
2013-03-23 08:58:30	Chousuke	not in general perhaps, but in the case of combining effects, yes.
2013-03-23 08:58:55	wavewave	monad transformer is more about modularization.
2013-03-23 02013-03-23 09:50:19	<--	mrotondo (~mrotondo@108-169-6-213.dsl.dynamic.sonic.net) has quit (Quit: mrotondo)
2013-03-23 09:51:11	-->	noam__ (~noam@213.57.201.130) has joined #haskell
2013-03-23 09:51:31	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-23 09:51:58	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Remote host closed the connection)
2013-03-23 09:52:09	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 09:53:16	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-23 09:54:30	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-03-23 09:54:44	<--	noam_ (~noam@213.57.201.130) has quit (Ping timeout: 248 seconds)
2013-03-23 09:55:05	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-23 09:55:30	<--	kkris (~kkris@v2201109100636289.yourvserver.net) has quit (Read error: Operation timed out)
2013-03-23 09:55:39	-->	kkris (~kkris@v2201109100636289.yourvserver.net) has joined #haskell
2013-03-23 09:56:01	<--	gemelen (~gemelen@gemelen.net) has quit (Ping timeout: 248 seconds)
2013-03-23 09:56:20	<--	Ghoul_ (uid6924@gateway/web/irccloud.com/x-jjknfqsmemvrjtxh) has quit (Ping timeout: 252 seconds)
2013-03-23 09:56:20	<--	solirc (~solirc@213-239-220-143.clients.your-server.de) has quit (Ping timeout: 248 seconds)
2013-03-23 09:56:20	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (Ping timeout: 248 seconds)
2013-03-23 09:56:28	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-03-23 09:56:35	 *	BadKitty is surprised that there is no "none" alias to not . all
2013-03-23 09:56:36	<--	owst (~owst@93-97-69-180.zone5.bethere.co.uk) has quit (Ping timeout: 264 seconds)
2013-03-23 09:56:36	<--	skchrko (~sk@130.255.129.64) has quit (Ping timeout: 276 seconds)
2013-03-23 09:56:56	-->	solirc (~solirc@213-239-220-143.clients.your-server.de) has joined #haskell
2013-03-23 09:57:16	-->	gemelen (~gemelen@gemelen.net) has joined #haskell
2013-03-23 09:58:04	<--	vlatkoB (~vlatko@188.129.50.226) has quit (Quit: Leaving)
2013-03-23 09:58:28	BadKitty	But again all (not . f)
2013-03-23 09:58:39	-->	heruur (~tvh@2a00:12d0:a100:8e01:bc1d:856e:8d86:5e3f) has joined #haskell
2013-03-23 09:58:59	BadKitty	any even
2013-03-23 09:59:11	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-23 10:00:01	--	Watcher7 is now known as Watcher7|off
2013-03-23 10:00:17	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-23 10:00:47	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-03-23 10:01:09	-->	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 10:02:00	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-23 10:02:35	<--	hgolden (~hgolden@pdpc/supporter/active/hgolden) has quit (Remote host closed the connection)
2013-03-23 10:04:03	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-23 10:04:27	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-23 10:05:59	<--	tomboy66 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-03-23 10:06:11	-->	lennart__ (~lennart@kiel-5f77bb5e.pool.mediaWays.net) has joined #haskell
2013-03-23 10:06:30	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-23 10:07:29	<--	tim (~tim@159.182.183.6) has quit (Disconnected by services)
2013-03-23 10:07:54	-->	tim (~tim@159.182.183.6) has joined #haskell
2013-03-23 10:08:16	<--	pcl (~squip@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-23 10:08:35	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-23 10:11:44	-->	hallski_ (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-23 10:12:28	supki	@google Fairbairn threshold
2013-03-23 10:12:30	lambdabot	http://www.haskell.org/pipermail/libraries/2012-February/2013-03-23 10:27:09	-->	Paprikachu (~Paprikach@77.117.246.98.wireless.dyn.drei.com) has joined #haskell
2013-03-23 10:27:16	-->	moai (~m@141.70.23.87) has joined #haskell
2013-03-23 10:27:51	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-23 10:28:32	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-03-23 10:28:35	-->	LucasCampos (~lucas@187.112.6.209) has joined #haskell
2013-03-23 10:30:43	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-23 10:30:50	<--	hgolden (~hgolden@pdpc/supporter/active/hgolden) has quit (Remote host closed the connection)
2013-03-23 10:31:48	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 256 seconds)
2013-03-23 10:32:45	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-23 10:32:55	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-23 10:33:46	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 245 seconds)
2013-03-23 10:34:43	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-23 10:35:03	BadKitty	supki: Err, I just read through that in full and noticed exactly what you meant.
2013-03-23 10:35:28	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 256 seconds)
2013-03-23 10:35:31	BadKitty	supki: Hehe.. So.. System.IO has too much under the threshold ;)
2013-03-23 10:36:33	-->	portero (tero@core.feriko.fi) has joined #haskell
2013-03-23 10:36:48	-->	ulfdoz (~mary@p5B38A011.dip.t-dialin.net) has joined #haskell
2013-03-23 10:37:01	-->	folone_ (~folone@brln-4dbc33dd.pool.mediaWays.net) has joined #haskell
2013-03-23 10:39:15	<--	LucasCampos (~lucas@187.112.6.209) has quit (Ping timeout: 258 seconds)
2013-03-23 10:39:37	<--	hgolden (~hgolden@pdpc/supporter/active/hgolden) has quit (Remote host closed the connection)
2013-03-23 10:40:09	BadKitty	Helper functions have a reason / purpose.
2013-03-23 10:40:53	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-23 10:42:04	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Quit: WeeChat 0.4.0)
2013-03-23 10:42:19	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 10:42:33	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-23 10:43:29	-->	xcombelle (~xcombelle@AToulouse-551-1-134-118.w86-201.abo.wanadoo.fr) has joined #haskell
2013-03-23 10:44:13	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-03-23 10:46:03	-->	LucasCampos (~lucas@177.17.105.143) has joined #haskell
2013-03-23 10:46:40	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-23 10:46:45	<--	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has quit (Read error: Connection reset by peer)
2013-03-23 10:47:09	-->	schlicht__ (~fl@e179128222.adsl.alicedsl.de) has joined #haskell
2013-03-23 10:47:29	-->	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-23 10:47:30	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Ping timeout: 264 seconds)
2013-03-23 10:48:42	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-23 10:48:50	-->	typoclass (~typoclass@p57A64A79.dip.t-dialin.net) has joined #haskell
2013-03-23 10:48:54	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-23 10:50:14	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 252 seconds)
2013-03-23 10:50:33	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-23 10:51:02	-->	dibblego (~nobody@220-245-107-64.static.tpgi.com.au) has joined #haskell
2013-03-23 10:52:04	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 10:52:09	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-23 10:52:51	-->	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has joined #haskell
2013-03-23 10:53:21	<--	hgolden (~hgolden@pdpc/supporter/active/hgolden) has quit (Remote host closed the connection)
2013-03-23 10:53:26	<--	Paprikachu (~Paprikach@77.117.246.98.wireless.dyn.drei.com) has quit (Ping timeout: 258 seconds)
2013-03-23 10:54:12	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-23 10:54:12	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-23 10:54:53	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-23 10:56:32	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-23 10:57:07	-->	mike25 (~user@host86-150-101-137.range86-150.btcentralplus.com) has joined #haskell
2013-03-23 10:57:23	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-23 10:57:30	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-23 10:57:41	-->	aa47f8 (~sdaone@h176n2-far-a12.ias.bredband.telia.com) has joined #haskell
2013-03-23 10:58:05	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 10:58:50	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Client Quit)
2013-03-23 10:59:46	-->	mallory (~chatzilla@125.122.83.164) has joined #haskell
2013-03-23 10:59:54	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-23 11:01:08	<--	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Leaving)
2013-03-23 11:01:28	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-23 11:02:11	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-03-23 11:03:06	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 11:03:14	-->	pckt (~pckt@unaffiliated/pckt) has joined #haskell
2013-03-23 11:04:01	dibblego	I have packages on hackage that need deletion/deprecation and also some I'd like to rename (e.g. I used capital letters, sorry it was 2009) — is there a process to do this?
2013-03-23 11:04:18	<--	aa47f8 (~sdaone@h176n2-far-a12.ias.bredband.telia.com) has quit (Quit: aa47f8)
2013-03-23 11:05:38	Saizan	dibblego: for deprecation i think you're supposed to mail ross
2013-03-23 11:05:41	<--	heruur (~tvh@2a00:12d0:a100:8e01:bc1d:856e:8d86:5e3f) has quit (Ping timeout: 246 seconds)
2013-03-23 11:05:45	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-23 11:05:45	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-23 11:05:45	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-23 11:06:02	dibblego	ok, what about renaming?
2013-03-23 11:06:16	dibblego	I might just email Ross and ask
2013-03-23 11:06:20	Saizan	no idea, i guess you can ask in the same email :)
2013-03-23 11:06:29	dibblego	yep cheers
2013-03-23 11:06:39	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-23 11:06:43	dibblego	Ross Paterson right?
2013-03-23 11:07:08	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-23 11:07:14	<--	folone_ (~folone@brln-4dbc33dd.pool.mediaWays.net) has quit (Ping timeout: 258 seconds)
2013-03-23 11:07:18	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-23 11:07:26	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-03-23 11:08:05	typoclass	this package has a big red "obsolete" warning, i wonder what triggered it. i'm guessing the word "deprecated" in the package description
2013-03-23 11:08:18	dibblego	which?
2013-03-23 11:08:41	typoclass	http://hackage.haskell.org/package/web-encodings <- this one. sorry, it's too early :-)
2013-03-23 11:08:43	<--	LucasCampos (~lucas@177.17.105.143) has quit (Quit: Leaving.)
2013-03-23 11:08:48	-->	monoidal (~chatzilla@212-87-13-67.sds.uw.edu.pl) has joined #haskell
2013-03-23 11:08:53	 *	typoclass crawls towards the coffee pot
2013-03-23 11:08:57	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 11:09:18	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-23 11:10:22	Saizan	yeah
2013-03-23 11:10:24	mallory	@ezyang
2013-03-23 11:10:25	lambdabot	Unknown command, try @list
2013-03-23 11:10:30	mallory	@list
2013-03-23 11:10:32	lambdabot	http://code.haskell.org/lambdabot/COMMANDS
2013-03-23 11:10:40	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-23 11:10:43	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Ping timeout: 264 seconds)
2013-03-23 11:11:05	skp	hey
2013-03-23 11:11:12	-->	SoupE (~jloos@f054172206.adsl.alicedsl.de) has joined #haskell
2013-03-23 11:11:13	skp	I try to compile a program with cabal-dev
2013-03-23 11:11:14	typoclass	dibblego: could you include a hint what people are supposed to use instead? (link to a blog post or to a replacement package). thanks a lot. that's one thing that bugs me about web-encodings
2013-03-23 11:11:15	skp	cabal: Could not resolve dependencies:
2013-03-23 11:11:18	skp	I got that
2013-03-23 11:11:31	skp	and the suggestion is the app version itself
2013-03-23 11:11:41	skp	do you have an idea about that issue?
2013-03-23 11:11:46	supki	skp: try with -v3
2013-03-23 11:11:59	dibblego	typoclass: I haven't a clue sorry, perhaps contact maintainers
2013-03-23 11:12:02	mallory	users seen
2013-03-23 11:12:05	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-23 11:12:24	skp	thanks supki
2013-03-23 11:12:45	-->	tomboy66 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-23 11:12:49	skp	[__1] rejecting: base-3.0.3.2, 3.0.3.1 (global constraint requires installed instance)
2013-03-23 11:12:52	skp	is this bad?
2013-03-23 11:14:02	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-03-23 11:14:11	<--	alang (~alang@218.201.120.153.tokyo.global.crust-r.net) has quit (Ping timeout: 245 seconds)
2013-03-23 11:14:16	typoclass	dibblego: no, i mean about your own packages that you're deprecating
2013-03-23 11:14:30	<--	SoupEvil (~jloos@e177117042.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-03-23 11:14:44	<--	tomboy65 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-03-23 11:14:52	tsinnema	i've been squiggling together some category theory, planning some possible experimentation in row polymorphism -- but i don't know whether to start writing it in scala or haskell. i'm very much a newbie to haskell
2013-03-23 11:14:53	dibblego	typoclass: oh yes I will be doing something like that once I know the proper process
2013-03-23 11:15:00	-->	gabnet (~gabnet@ACaen-652-1-192-63.w83-115.abo.wanadoo.fr) has joined #haskell
2013-03-23 11:15:10	supki	skp: no
2013-03-23 11:15:23	dibblego	tsinnema: scala is not fun to entertain category theory
2013-03-23 11:15:26	<--	hgolden (~hgolden@pdpc/supporter/active/hgolden) has quit (Remote host closed the connection)
2013-03-23 11:15:29	typoclass	dibblego: i meant to say, please don't add a "deprecated" label and nothing else. it's frustrating if users find a package that does what they want, but it's marked deprecated for no apparent reason and with no information on what to use instead; not even a link to a blog post. often, they'll end up using the deprecated package anyway, just with an insecure feeling. but that's not what the author wanted either :-)
2013-03-23 11:15:34	skp	hm
2013-03-23 11:15:35	typoclass	dibblego: sounds great, thanks
2013-03-23 11:15:46	dibblego	typoclass: yes I can understand that frustration
2013-03-23 11:15:56	srhb	typoclass: old-time hurts me, too. The new time library doesn't implement a lot of what was in old-time.
2013-03-23 11:15:57	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-03-23 11:16:26	srhb	Actually mostly it just doesn't implement things that ought to be there for obvious reasons. ._.
2013-03-23 11:16:35	tsinnema	i know that edwardk has some nice-looking modules for category theory in haskell so that seems like a natural way to go
2013-03-23 11:16:49	typoclass	srhb: old-locale is an annoying one. there just is no such thing as new-locale :-/ so it's just confusing
2013-03-23 11:16:54	srhb	tsinnema: I think Scala will put a lot of road blocks in your way if your object is CT.
2013-03-23 11:16:58	-->	hgolden (~hgolden@pdpc/supporter/active/hgolden) has joined #haskell
2013-03-23 11:16:59	srhb	typoclass: Yeah.
2013-03-23 11:17:01	dibblego	tsinnema: edwardk and I implemented a lot of it in scala too — just stick with haskell if it is for education purposes
2013-03-23 11:17:14	<--	silver_ (~silver@178.120.187.17) has quit (Ping timeout: 240 seconds)
2013-03-23 11:17:21	dibblego	scala puts road blocks in your way proportional to how effective you want to be
2013-03-23 11:17:33	srhb	I suppose that's another way of putting it. :)
2013-03-23 11:17:39	dibblego	tsinnema: edwardk did a lot of the generalising work in scalaz6
2013-03-23 11:17:52	typoclass	srhb: out of curiosity, which things are missing in time, compared to old-time?
2013-03-23 11:18:15	typoclass	@remember dibblego scala puts road blocks in your way proportional to how effective you want to be
2013-03-23 11:18:16	lambdabot	Nice!
2013-03-23 11:18:29	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-23 11:18:53	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-23 11:19:23	tsinnema	dibblego, srhb, the only obstacle in that direction is that i've hardly written a line in haskell. but i suppose learning haskell as i go shouldn't be much more of a problem than dealing with the quirks of scala
2013-03-23 11:19:32	dibblego	I starter scalaz in 2008 when I had to write a production app on the JVM and noticed all the basic libraries were missing
2013-03-23 11:19:39	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-23 11:19:49	dibblego	tsinnema: I highly recommend haskell for your endeavour — we are here to help you
2013-03-23 11:20:09	 *	typoclass purrs friendlily at tsinnema
2013-03-23 11:20:11	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-23 11:20:32	dibblego	tsinnema: if you concede and use scala, we are over at #scalaz to help you too
2013-03-23 11:20:38	tsinnema	sure
2013-03-23 11:20:44	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-23 11:20:48	skp	oh?
2013-03-23 11:20:57	dibblego	oh there you are
2013-03-23 11:21:04	skp	cabal-dev doesn’t install private dependencies
2013-03-23 11:21:14	skp	that sounds quite obvious actually
2013-03-23 11:21:39	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 11:21:54	-->	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has joined #haskell
2013-03-23 11:22:15	typoclass	tsinnema: the man himself (edwardk) is in here quite often and is very responsive. also most of what he says requires a saving throw against confusion
2013-03-23 11:23:17	dEPY	anyone can help me with this? https://gist.github.com/depy/5227221
2013-03-23 11:23:26	typoclass	s/also/although
2013-03-23 11:23:51	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-23 11:23:55	-->	silver (~silver@178.120.92.9) has joined #haskell
2013-03-23 11:24:11	monoidal	dEPY: s/[bmi w h |/[bmi|
2013-03-23 11:24:16	aristid	typoclass: which means you can level up your confusion resistance
2013-03-23 11:24:23	<--	gabnet (~gabnet@ACaen-652-1-192-63.w83-115.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-03-23 11:24:41	<--	DexterLB (~dex@87-126-74-127.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-23 11:24:42	gspr	Suppose I have a function foo :: Bar a -> Baz a, where Bar a is some data type with a structure highly optimal for what foo does. Let's say you can build Bar a from [a] by means of fromList :: [a] -> Bar a. In a package, do I expose foo and fromList, or a version of foo that takes lists? What if Bar a is really complicated, and making Bar a's from lists is expensive, but making them from Vecto2013-03-23 11:27:05	srhb	gspr: If there's an efficient and a very inefficient way of constructing your Bars, you should probably hide away the inefficient one or put rather large disclaimers on it. It's hard to say something general about it.
2013-03-23 11:27:52	typoclass	gspr: hello. for me, you got cut off at "both alternatives? Maybe"
2013-03-23 11:28:09	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-23 11:28:58	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-03-23 11:29:47	-->	skyflas__ (~skyflash@96.53.63.54) has joined #haskell
2013-03-23 11:30:09	-->	Paprikachu (~Paprikach@77.116.247.167.wireless.dyn.drei.com) has joined #haskell
2013-03-23 11:30:39	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-23 11:30:58	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-03-23 11:31:26	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-23 11:33:41	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 258 seconds)
2013-03-23 11:34:24	<--	skyflas__ (~skyflash@96.53.63.54) has quit (Ping timeout: 256 seconds)
2013-03-23 11:34:58	<--	oscar_ (~quassel@87-53-20-69-static.dk.customer.tdc.net) has quit (Ping timeout: 256 seconds)
2013-03-23 11:35:05	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 252 seconds)
2013-03-23 11:35:35	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-23 11:36:12	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 264 seconds)
2013-03-23 11:36:29	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 246 seconds)
2013-03-23 11:37:40	-->	DexterLB (~dex@95-42-29-48.btc-net.bg) has joined #haskell
2013-03-23 11:38:13	-->	nexx (~SPS-User@dslb-188-096-168-205.pools.arcor-ip.net) has joined #haskell
2013-03-23 11:39:13	--	irc: disconnected from server
2013-03-23 16:08:22	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-23 16:08:22	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-23 16:08:22	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-23 16:08:22	--	Nicks #haskell: [@ChanServ 16WAANAMZ [[zz]] \rs ]OLI[ __main__ _br_ _flow_ _g _janne `0660 `bps `micro `nand` a11235 aajmakin ab9rf absence abumirqaan acfoltzer acharles aCube Adeon adimit Adios adlan adnap adnauseam Afish aforemny agumonkey agundry ahf ahihi ahkurtz ajhager akahn akosch akraut alang_ alanz albel727 alcz aleator_ alejandrogomez alexander__b Alice3 alios alnix_ alpounet alshain Amadiro amatsu\idle amiller anachron_ anders^^ anderse andrewsw aninhume1 anona AntiSpamMeta apaku appamatto araujo arbn ARCADIVS Argue aristid arkeet arkx armlesshobo arnihr__ arun asante aszlig Athas AtnNn augur augustl Axman6 b52 b_jonas BadKitty banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ beckerb Belgarion0 bens benzap bergey betawaffle bezik bgamari bholst Bigcheese BigEndian BigTom birkenfeld blackmirroxx BlastHardcheese blooberr BMeph bmfx bobry bogner Boney Boreeas Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc byorgey byron ByronJohnson c_wraith Cale caligula Canar canta canvon carlocci ccxCZ cdidd cdntr ceii celery__ centrinia Cerise certainty chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisdotcode chrisirc chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmccann cmsd2 cods cognominal colah comak companion_cube confound connelly coppro copumpkin CosmicRay Counter-Strike CoverSlide cow-orke1 crdueck cross Cryovat cschneid ctult ctype_real cwvh cynick cyphase d-snp dabradley dan_johnsin danr danvet dario darkf Dashkal davean davorak dcoutts deavidsedice deech Deewiant def-lkb dennda dented42 dEPY Derander descender DexterLB dfletcher DigitalKiwi dilinger dixie djahandarie djanatyn dju dkasak dlundy_ dmarker dmwit docksider Dodek dogmaT dolio DolphR domingo doomlord dottedmag dqd Draconx Draggor drbean DrChaos DrCode dreixel_ drek drewr drmegahertz dropdrive DrSyzygy dsantiago DT` duairc_ dumbhat DustyDin1o Dybber dyreshark eacameron EarlGray earthy ecuderpam edenc edon edtsech edwardk edwtjo Eelis eff_ ehamberg eis eL_Bart0 Eldariof93-ru electrogeek elgot Eliel elliott elliottcable emc2 emma emmanuelux end3rW endojelly Enigmagic ent epta ericmj Eridius ernst Erstarrung Estrellas etabot ethercrow etrepum eviltwin_ Excureo exoticb eyck f8 fabjan faen FalkoPeters fall_ fayden fcr fergusnoble fgomez finnrobi fionnan FireFly fireglow floatingman flori flux formalcow fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco fumieval Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc gdeest_ gdsx geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul_ gienah Gilly Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest10329 Guest22595 Guest65991 Guest91870 Gunni gustavnils guy_ guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi HaltingState hamishmack hanDerPeder harrison heath Heffalump helgikrs henk Hermit hgolden hiratara hiredman hiroakip hiroyuki2 hive-mind hiyakashi horlicks hpaste hpc hpd hungryblank hvr hyko iago IanKelling ibid IbnFirnas Iceland_jack identity idnar idntfy ido idoru Igloo ilyanok imeredith imphasing inr int-e integral Internet13 ion ique issimus iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt janbanan jao JaRoel|4d jaroslaw jasonjckn jaspervdj Jaxan jayne jb55 jbauman jcp jdoliner Jeanne-Kamikaze Jello_Raptor jercos jerojasro jix jlaire jlamothe jlewis jliikka jlouis_ jmcarthur jMCg jml joachifm joar jodaro JoeHazzers joeyh johnw jon-shape joneshf jonke Jonno_FTW Jonte_ JoshuaA JPohlman1 jrib jrockway jrslepak jtalk jtobin_ juhp julmac julmae junsuijin jyyou k00mi k0ral KaiSforza kakos kallisti kalven kamatsu KaneTW kaol Ke kennyd kennyp Khisanth kini Kinnison Kiryx KitB__ kith_ kkris kloeri klugez kmicu kmrhb kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ kryft ksf kshannon ktosiek Kuba kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latermuse latro`a lattenwald lazard LeaChim lemao lennart__ lenstr leoncamel leprauchan leroux levi levitation_ liesen lightquake Liii linduxed Liskni_si lispy liszt liyang lokydor lopex lpsmith lpvb lucca luite lulf lusory lzm m3ga machisuji magicman majoh maksbotan_ mallory malorie mami marienz Martty MasseR mastensg MasterPu1cher mateu mattp_ matzo mauke Maxdamantus mcdonc mceier mcguitan83 McManiaC mechairoi mee mefisto Megant mendez merijn message144 meyersh_ miasma mietek mike2 mikeplus64 milessabin milli milStaja mimi_vx mimico__ mirsal mixi mizu_no_oto mjr84 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 MnO2 moai MoALTz mokus_ mollerstrand MOMI Mon_Ouie monique_ monochrom monoidal moonlite_ morazow mornfall morolin mortberg Mortchek mpu mrd mrdomino_ mrkotfw MrMeh mrshoe mspells mullein munro mux myme n_b Nanar nardul Natch natte ndngvr necrobious neena netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niko nikola nilg` Nimatek nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nonymousa noplamodo notdan NougatRillettes Nshag nu11ptr numeral nwf obcode ocharles ofan Okasu OlegYch8 opqdonut ormaaj Ornedan ortmage osfameron osnr othiym23 otterdam otters otto_s ozataman ozataman_ paddymahoney PaksAway Paprikac_ ParahSail1n parcs PartyKat2e path[l] PatrickRobotham pcapriotti pckt pdxleif_away peddie peltchu pepijn_away perlite permagreen perspectival petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa Philonous phischu PHO_ phyrex1an piezoid pikhq_ Plex- plhk pnielsen Pods popz pqmodn_ pr pranavrc predator117 preflex prh pricklypear PrO_OkI profmakx ps-auxw Ptival ptrf purefn1 puzza007 pyrtsa pyykkis q66 quaestor quicksilver quuxman qwandor|quassel qwr qz r126l_ racycle raek_ RageOfThou raid rainmaker Ralith randomclown Rarrikins_q Raynes Razz rcj_ rcl realnot redjohn reembarking08 reiddraper Reite Rembane rexamophone rfw Rickasaurus rio Riussi rmunoz rmunroe robbe- robbert` rossabaker Rotaerk rs0 rsimoes ryanakca s00pcan s4msung_ s_quark SaBer saep safinaskar Sagi saiam Saizan sajith sambio sarfraz saurik sbahra scgilardi schlaftier schlumpi schroedinbug sclv Scott_firebeta Sculptor seafood SeanTAllen seats SegFaultAX sepp2k setmeaway2 Sgeo sgronblo sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash SLi sm smarter so Soft sohum solarus solirc Sonderblade sordina2 Sorella soulofpeace SoupE spion Spockz sproingie Squid_Tamer squidz srcerer srhb Starfire statusfailed steez stelleg_away stepcut stephe strax_ suiside sully sunfun sunnavy supersym supki sw17ch sysop_fb tahu tamiko tanakh Tarential Targen taruti taterbase tavelram_ td123 tdammers TDJACR techlife Tehnix Tene tensorpudding Tesseraction tessier Testos tg tgeeky Th0mas thalassarche tharper The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur thorsten` thoughtpolice threedaymonk threesome tim timemage timthelion tippenein tkd tlaine tlevine tmiw TML tobiassjosten tom339 tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek tranma trevize tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl Twey twomashi typoclass tzxn3 u__ u_quark ulfdoz Ulrar UziMonkey v__ Valodim Varakh vehk verrens Vert Vertue vhz vili vmeson vobi volstvok Vorpal voyd_ Vq wagle Walther warpy__ Watcher7|off waterlaz wchun wei2912 weie_ wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus Xaratas xcombelle xcvii xinming xkcd XMunkki xnyhps Xorlev xorox90 xplat xrl_ xymox yacks yam yan_ yano yc4891 yeltzooo yezariaely yiannis_t yriw ysulsky_ yumike Zariel zebr zeiris zenzike zero7 zhulikas ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp]
2013-03-23 16:08:22	--	Channel #haskell: 985 nicks (1 op, 0 halfops, 0 voices, 984 normals)
2013-03-23 16:08:22	--	URL for #haskell: http://www.haskell.org/
2013-03-23 16:08:22	dEPY	tnx :)
2013-03-23 16:08:24	--	Mode #haskell [+CLcnpt]
2013-03-23 16:08:24	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-23 16:09:42	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-23 16:10:06	--	stelleg_away is now known as stelleg
2013-03-23 16:10:18	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-23 16:11:05	-->	tazjin (2971tazjin@server1.bouncer4you.de) has joined #haskell
2013-03-23 16:11:51	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Quit: WeeChat 0.3.8)
2013-03-23 16:13:31	monoidal	merijn: probably should be (0==) . flip mod 3829
2013-03-23 16:13:33	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-23 16:13:48	<--	racycle (~racycle@75-25-129-128.lightspeed.sjcpca.sbcglobal.net) has left #haskell
2013-03-23 16:14:13	-->	F1skr (~F1skr@4205ds8-fb.0.fullrate.dk) has joined #haskell
2013-03-23 16:14:25	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Client Quit)
2013-03-23 16:14:45	-->	Thomyho3 (~thomyho@mnhm-590c3038.pool.mediaWays.net) has joined #haskell
2013-03-23 16:15:05	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-23 16:15:40	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-03-23 16:16:16	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-23 16:17:27	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-23 16:18:17	<--	timthelion (~timothy@134.222.broadband11.iol.cz) has quit (Quit: leaving)
2013-03-23 16:18:25	-->	Kazimuth (~Nautilus@209.144.63.76) has joined #haskell
2013-03-23 16:18:47	-->	stat_vi (~stat@dslb-094-218-229-075.pools.arcor-ip.net) has joined #haskell
2013-03-23 16:19:44	jmcarthur	:t let (===) = liftA2 (==) in 0 === (`mod` 3829)   -- probably won't be such a nice type signature without numinstances :\
2013-03-23 16:19:46	lambdabot	(Integral b, Num (b -> b)) => b -> Bool
2013-03-23 16:20:13	jmcarthur	oh the integral constraint...
2013-03-23 16:20:24	<--	randomclown (~randomclo@unaffiliated/randomclown) has quit (Ping timeout: 258 seconds)
2013-03-23 16:20:42	jmcarthur	ah it's okay, nevermind
2013-03-23 16:22:11	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-23 16:22:31	<--	issimus (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-03-23 16:23:15	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-23 16:23:19	-->	glguy (~textual@unaffiliated/glguy) has joined #haskell
2013-03-23 16:23:29	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-23 16:25:19	<--	Kazimuth (~Nautilus@209.144.63.76) has quit (Quit: Leaving)
2013-03-23 16:28:09	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-23 16:28:13	-->	jdnavarro (~danny@253.Red-88-22-34.staticIP.rima-tde.net) has joined #haskell
2013-03-23 16:29:13	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Ping timeout: 258 seconds)
2013-03-23 16:29:48	<--	typoclass (~typoclass@p57A64A79.dip.t-dialin.net) has quit (Quit: Leaving.)
2013-03-23 16:30:30	<--	yc4891 (~andrew@121.35.223.193) has quit (Ping timeout: 252 seconds)
2013-03-23 16:33:12	-->	jrajav (~jrajav@71-82-124-223.dhcp.roch.mn.charter.com) has joined #haskell
2013-03-23 16:33:14	-->	Eldariof28-ru (~CLD@pppoe-206-121-dyn-sr.volgaline.ru) has joined #haskell
2013-03-23 16:33:40	<--	milessabin (~miles@private.milessabin.com) has quit (Quit: Konversation terminated!)
2013-03-23 16:34:03	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-23 16:34:15	-->	vermeille (~vermeille@91.207.208.225) has joined #haskell
2013-03-23 16:34:18	vermeille	Hello guys
2013-03-23 16:34:21	johnw	merijn: for that expression, I'd probably use the lambda anyway, it's a 3 char diff (once you surround the point-free version with parens)
2013-03-23 16:34:22	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-23 16:34:26	johnw	vermeille: hello!
2013-03-23 16:34:26	vermeille	I'm losing time for a stupid thing
2013-03-23 16:34:46	vermeille	I'm dealing with some Word16 (or Int16, depending on what you'll say)
2013-03-23 16:34:48	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-03-23 16:34:52	vermeille	I have a list of it
2013-03-23 16:34:58	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Ping timeout: 258 seconds)
2013-03-23 16:35:18	vermeille	and I just want to print that *in binary form* (not string-serialized) on the standard output
2013-03-23 16:35:22	-->	dannybtran (~digisyndi@c-69-137-89-3.hsd1.tn.comcast.net) has joined #haskell
2013-03-23 16:35:24	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-03-23 16:35:32	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-23 16:35:36	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-23 16:35:40	vermeille	So, ideally, I need something like [Word16] -> IO ()
2013-03-23 16:36:05	johnw	do you mean you want to see 0s and 1s?
2013-03-23 16:36:11	johnw	or that you want it "raw"?
2013-03-23 16:36:16	vermeille	I want it raw
2013-03-23 16:36:18	merijn	I'm assuming raw?
2013-03-23 16:36:27	johnw	first [Word16] -> ByteString
2013-03-23 16:36:32	johnw	then ByteString -> IO ()
2013-03-23 16:36:46	merijn	The easiest is probably to turn [Word16] into [Word8] and then convert that ByteString? Unless there's a direct [Word16] -> ByteString
2013-03-23 16:36:46	-->	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has joined #haskell
2013-03-23 16:36:52	<--	Eldariof93-ru (~CLD@pppoe-197-186-dyn-sr.volgaline.ru) has quit (Ping timeout: 248 seconds)
2013-03-23 16:37:02	vermeille	yeah, I was trying to using Data.Binary.encode
2013-03-23 16:37:03	-->	osa1 (~omer@88.242.248.15) has joined #haskell
2013-03-23 16:37:03	johnw	or use a bytestring builder
2013-03-23 16:37:06	johnw	it takes Word16's
2013-03-23 16:37:32	<--	moai (~m@141.70.23.87) has quit (Quit: Leaving)
2013-03-23 16:37:38	<--	darkf (~darkf___@unaffiliated/darkf) has quit (Quit: Leaving)
2013-03-23 16:38:05	<--	leoncamel (~leoncamel@219.143.150.16) has quit (Ping timeout: 256 seconds)
2013-03-23 16:38:05	vermeille	Well
2013-03-23 16:38:08	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-23 16:38:30	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-23 16:38:50	vermeille	map (putStr . encode) $ map (ByteString) myWord16List
2013-03-23 16:38:52	vermeille	?
2013-03-23 16:39:31	johnw	it's easier to try it in ghci than try to use us as ghci :)
2013-03-23 16:39:37	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-23 16:39:50	vermeille	In fact, I tried it, and it does not work :(
2013-03-23 16:40:01	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-23 16:40:02	<--	osa1 (~omer@88.242.248.15) has quit (Read error: Connection reset by peer)
2013-03-23 16:40:04	johnw	you'd need mapM for the first one, but the second map is all wrong
2013-03-23 16:40:11	-->	osa1 (~omer@88.242.248.15) has joined #haskell
2013-03-23 16:40:15	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-23 16:40:30	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-23 16:40:58	-->	jonaias (~jonaias@177.102.80.97) has joined #haskell
2013-03-23 16:41:17	vermeille	Yeah, I'm quite new to Haskell
2013-03-23 16:42:31	<--	Rarrikins_q (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-03-23 16:42:37	johnw	i think you'd need mconcat (map word16BE myWord16List)
2013-03-23 16:42:41	johnw	that's if the data is big-endian
2013-03-23 16:42:46	johnw	otherwise you need word16LE
2013-03-23 16:42:57	johnw	and then the whole would be:
2013-03-23 16:43:44	johnw	Data.ByteString.putStr . mconcat . map word16BE $ myWord16List
2013-03-23 16:44:29	vermeille	Let's try it :D
2013-03-23 16:44:35	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-23 16:45:03	<--	ctult (~ctult@65-129-22-233.bois.qwest.net) has quit
2013-03-23 16:45:31	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Ping timeout: 264 seconds)
2013-03-23 16:46:06	<--	Guest65991 (~moi@213.155.72.86.rev.sfr.net) has quit (Quit: Lost terminal)
2013-03-23 16:46:37	dEPY	what are  !! ?
2013-03-23 16:46:50	johnw	!! is an operator
2013-03-23 16:46:53	srhb	:t (!!)
2013-03-23 16:46:54	lambdabot	[a] -> Int -> a
2013-03-23 16:47:00	dEPY	I know. What does it do? :D
2013-03-23 16:47:05	johnw	see if you can tell from the type
2013-03-23 16:47:16	dEPY	It return nth element from a list?
2013-03-23 16:47:20	johnw	exactly!
2013-03-23 16:47:26	dEPY	tnx :)
2013-03-23 16:47:28	johnw	inferring behavior from types is a good skill to practice
2013-03-23 16:47:55	dEPY	:)
2013-03-23 16:47:57	-->	fxr (~user@217.131.192.142) has joined #haskell
2013-03-23 16:48:15	-->	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has joined #haskell
2013-03-23 16:48:41	--	Watcher7|off is now known as Watcher7
2013-03-23 16:48:48	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-23 16:49:00	vermeille	Well guy, forgive my stupidity, what means "Could not find module `Data.ByteString.Lazy.Builder.BasicEncoding.Binary' ; it is a hidden module in the package `bytestring-0.10.0.2'"
2013-03-23 16:49:03	<--	dixie (dixie@real.wilbury.sk) has quit (Read error: Connection reset by peer)
2013-03-23 16:49:13	johnw	are you using cabal
2013-03-23 16:49:14	johnw	?
2013-03-23 16:49:17	vermeille	Nope
2013-03-23 16:49:24	johnw	you seem to be using GHC 7.6
2013-03-23 16:49:29	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-23 16:49:43	johnw	you are doing this in ghci?
2013-03-23 16:49:46	vermeille	You're right.
2013-03-23 16:49:51	vermeille	Nope, compiling with GHC
2013-03-23 16:50:10	-->	Thomyho4 (~thomyho@mnhm-5f75c0b9.pool.mediaWays.net) has joined #haskell
2013-03-23 16:50:14	johnw	ah, hmm... i don't do that often
2013-03-23 16:50:25	<--	Thomyho3 (~thomyho@mnhm-590c3038.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-23 16:50:27	johnw	try putting -package bytestring
2013-03-23 16:50:31	johnw	on your command line
2013-03-23 16:50:59	vermeille	not better =/
2013-03-23 16:51:15	johnw	well, now I would be just guessing, maybe someone else knows
2013-03-23 16:51:15	vermeille	In can't believe that's it's so painful to deal with binary datas o_o
2013-03-23 16:51:22	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-23 16:51:40	johnw	it really isn't painful at all, but I always use cabal
2013-03-23 16:51:43	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Max SendQ exceeded)
2013-03-23 16:51:45	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-23 16:52:08	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-23 16:52:49	Igloo	vermeille: That's an internal module; you can't use it
2013-03-23 16:52:49	srhb	vermeille: It isn't painful at all. But it's a bit hard to tell you why your ghc can't find bytestring if you don't give a bit more info. :)
2013-03-23 16:53:00	-->	xcv (~xcv@lenoil.plus.com) has joined #haskell
2013-03-23 16:53:15	johnw	he should only need: import Data.Bytestring; import Data.ByteString.Builder
2013-03-23 16:53:17	 *	hackagebot sparse-lin-alg 0.4.2 - Effective linear algebra on sparse matrices  http://hackage.haskell.org/package/sparse-lin-alg-0.4.2 (AlexeyAlekhin)
2013-03-23 16:53:19	 *	hackagebot sparse-lin-alg 0.4.3 - Effective linear algebra on sparse matrices  http://hackage.haskell.org/package/sparse-lin-alg-0.4.3 (AlexeyAlekhin)
2013-03-23 16:53:53	-->	danols_work (~danols_wo@s72-38-184-18.static.comm.cgocable.net) has joined #haskell
2013-03-23 16:53:55	-->	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has joined #haskell
2013-03-23 16:54:01	vermeille	Could not find module `Data.ByteString.Builder' :(
2013-03-23 16:54:22	vermeille	I'm googling, I swear I try to do my best
2013-03-23 16:54:26	johnw	??
2013-03-23 16:54:28	johnw	http://hackage.haskell.org/package/bytestring/
2013-03-23 16:54:30	-->	HugoDaniel (~hugo@bl5-19-231.dsl.telepac.pt) has joined #haskell
2013-03-23 16:54:32	merijn	Is ByteString installed with ghc?
2013-03-23 16:54:38	--	pepijn_away is now known as pepijndevos
2013-03-23 16:54:44	-->	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has joined #haskell
2013-03-23 16:54:47	johnw	something is amiss
2013-03-23 16:54:55	merijn	I guess not? And if he's using 7.6 he doesn't have platform so maybe ByteString is just missing?
2013-03-23 16:54:58	johnw	yes, i believe it's a core library
2013-03-23 16:55:07	merijn	Ah, maybe, I dunno
2013-03-23 16:55:09	johnw	let me check
2013-03-23 16:55:11	vermeille	I can import Data.ByteString, but I can't import Data.ByteString.Builder
2013-03-23 16:55:20	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-23 16:55:26	johnw	yes
2013-03-23 16:55:33	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-23 16:55:34	-->	yc4891 (~andrew@121.35.223.193) has joined #haskell
2013-03-23 16:55:54	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 264 seconds)
2013-03-23 16:55:56	johnw	vermeille: that's very odd, because you said you're using ghc 7.6.2
2013-03-23 16:56:01	johnw	ghc 7.4.2 doesn't have Builder
2013-03-23 16:56:08	HugoDaniel	hi
2013-03-23 16:56:23	johnw	oh, it *very* new
2013-03-23 16:56:28	johnw	vermeille: try this instead:
2013-03-23 16:56:29	vermeille	Yup, 7.6.2 :(
2013-03-23 16:56:32	johnw	import Data.ByteString.Lazy
2013-03-23 16:56:34	johnw	import Data.ByteString.Lazy.Builder
2013-03-23 16:56:40	johnw	that should be in the version that you have
2013-03-23 16:57:19	vermeille	It's okay !
2013-03-23 16:57:28	vermeille	Sooooooooooooo \o/
2013-03-23 16:57:30	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Max SendQ exceeded)
2013-03-23 16:57:32	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-03-23 16:57:38	-->	derelm (~derelm@p57B75B31.dip.t-dialin.net) has joined #haskell
2013-03-23 16:57:41	vermeille	Maybe we will finally have the right expression :D
2013-03-23 16:58:27	johnw	you'll need to use a lazy putStr
2013-03-23 16:58:31	johnw	Data.ByteString.Lazy.putStr
2013-03-23 16:59:10	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-23 16:59:36	-->	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has joined #haskell
2013-03-23 16:59:51	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-23 16:59:58	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-23 17:00:17	-->	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has joined #haskell
2013-03-23 17:00:20	<--	yc4891 (~andrew@121.35.223.193) has quit (Ping timeout: 248 seconds)
2013-03-23 17:00:38	-->	eldariof (~CLD@pppoe-209-130-dyn-sr.volgaline.ru) has joined #haskell
2013-03-23 17:00:59	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-23 17:01:18	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-23 17:01:41	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Max SendQ exceeded)
2013-03-23 17:02:25	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Quit: Leaving...)
2013-03-23 17:02:27	vermeille	cannot match [Word16] with ByteString
2013-03-23 17:02:27	vermeille	We're reaching the goal !
2013-03-23 17:02:27	vermeille	YEAH
2013-03-23 17:02:27	vermeille	GO IT
2013-03-23 17:02:28	vermeille	It compiles !
2013-03-23 17:02:38	johnw	does it run? :)
2013-03-23 17:02:42	vermeille	but it does not output anything
2013-03-23 17:02:54	vermeille	BL.putStr $ encode $ sinW 0 (440.0)
2013-03-23 17:03:28	vermeille	Yeah, I missed to crash my computer :d
2013-03-23 17:03:50	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-03-23 17:03:52	<--	Eldariof28-ru (~CLD@pppoe-206-121-dyn-sr.volgaline.ru) has quit (Ping timeout: 252 seconds)
2013-03-23 17:03:57	<--	jonaias (~jonaias@177.102.80.97) has quit (Quit: Konversation terminated!)
2013-03-23 17:04:22	vermeille	Nothing happens when I pipe it to hexdump :(
2013-03-23 17:04:31	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-03-23 17:04:38	-->	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has joined #haskell
2013-03-23 17:05:04	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 256 seconds)
2013-03-23 17:05:29	johnw	not knowing what sinW outputs, I don't know what to say
2013-03-23 17:06:00	vermeille	It works :)
2013-03-23 17:06:00	vermeille	In fact, sinW outputs an infinite list
2013-03-23 17:06:01	vermeille	and putStr waits the end to flush
2013-03-23 17:06:13	johnw	so slap in a BL.take
2013-03-23 17:06:26	vermeille	I did it, and it works :)
2013-03-23 17:06:28	-->	jonaias (~jonaias@177.102.80.97) has joined #haskell
2013-03-23 17:06:30	johnw	yay
2013-03-23 17:06:31	vermeille	thank you a LOT
2013-03-23 17:06:37	-->	IngoPan (~mareike@188-192-110-7-dynip.superkabel.de) has joined #haskell
2013-03-23 17:06:42	IngoPan	Hi, i am Linux newbie and i´d like to know if someone knows this Amazon book
2013-03-23 17:06:42	IngoPan	and can tell me if its any good to enter the Linux world: http://t.co/p9tS8QnDgc ?
2013-03-23 17:06:42	<--	soulofpeace (~soulofpea@cm92.gamma160.maxonline.com.sg) has quit (Ping timeout: 264 seconds)
2013-03-23 17:07:00	jmcarthur	this is the wrong channel for these kinds of questions
2013-03-23 17:07:18	jmcarthur	also could you paste the amazon link instead of some shortened thing?
2013-03-23 17:07:20	jmcarthur	:P
2013-03-23 17:07:30	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 245 seconds)
2013-03-23 17:07:30	IngoPan	sorry ;)
2013-03-23 17:07:33	johnw	yeah, that smelled way too much like spam
2013-03-23 17:07:57	-->	dixie (dixie@real.wilbury.sk) has joined #haskell
2013-03-23 17:08:09	IngoPan	just a suqstion
2013-03-23 17:08:17	geekosaur	this user is up to something
2013-03-23 17:08:30	jmcarthur	but i stand by my claim that this is the wrong channel and you should try elsewhere
2013-03-23 17:08:37	--	Mode #haskell [+o johnw] by ChanServ
2013-03-23 17:08:42	geekosaur	hit #haskell once yesterday and #perl twice with a multiply obscured url, the final target was legit but the middle indirections were dubious
2013-03-23 17:08:44	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-23 17:09:37	<--	Liii (~jens@c83-254-78-124.bredband.comhem.se) has left #haskell
2013-03-23 17:09:37	geekosaur	(note, not confirmed but not at all trustworthy especially with te repeats)
2013-03-23 17:10:10	<--	emmanuelux (~emmanuelu@nl4.freedom-ip.com) has quit (Max SendQ exceeded)
2013-03-23 17:10:12	@johnw	geekosaur: yeah, the guise of legitimacy is the worst
2013-03-23 17:10:41	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-23 17:10:56	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:11:06	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-23 17:11:20	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:11:23	-->	croikle (~peterm@50-127-79-69.drr02.ftwy.in.frontiernet.net) has joined #haskell
2013-03-23 17:11:26	-->	klrr (~klrr@88.129.146.169) has joined #haskell
2013-03-23 17:11:59	-->	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-03-23 17:12:04	<--	safinaskar (~user@2a00:f480:4:197:16fe:b5ff:feaf:4c04) has quit (Remote host closed the connection)
2013-03-23 17:12:05	klrr	hey
2013-03-23 17:12:05	dEPY	is there any way to get see how some internal functions looks in ghci ?
2013-03-23 17:12:23	dEPY	for example if I want to see how + is defined?
2013-03-23 17:12:23	parcs	nope
2013-03-23 17:12:27	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:12:28	geekosaur	usually they're compiled, so no
2013-03-23 17:12:28	@johnw	@src (+)
2013-03-23 17:12:28	lambdabot	Source not found. Your mind just hasn't been the same since the electro-shock, has it?
2013-03-23 17:12:29	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:12:42	@johnw	dEPY: you can generate the GHC Core, and then assembly
2013-03-23 17:12:52	@johnw	but I don't think "+" is written in Haskell
2013-03-23 17:13:00	dEPY	oh
2013-03-23 17:13:04	dEPY	makes sense
2013-03-23 17:13:19	@johnw	i usually boils down to "add" on whichever processor you're using
2013-03-23 17:13:28	geekosaur	you can install hoogle and configure it into ghci, then use that to find source... but (+), while actually written in haskell last I checked, redirects to primops based on type
2013-03-23 17:13:28	@johnw	which itself is just a number... ;)
2013-03-23 17:13:40	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:13:57	-->	safinaskar (~user@2a00:f480:4:197:16fe:b5ff:feaf:4c04) has joined #haskell
2013-03-23 17:14:02	@johnw	ah, true, polymorphic + turns into primops type-specific +
2013-03-23 17:14:38	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:14:56	-->	rck (~hakujin@c-68-52-135-71.hsd1.tn.comcast.net) has joined #haskell
2013-03-23 17:15:16	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-23 17:15:42	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-23 17:15:59	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:15:59	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:16:27	<--	jonaias (~jonaias@177.102.80.97) has quit (Read error: No route to host)
2013-03-23 17:16:59	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:17:19	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:17:23	-->	jonaias (~jonaias@177.102.80.97) has joined #haskell
2013-03-23 17:17:44	-->	roadfish (~user@209-239-15-11.ded.execulink.com) has joined #haskell
2013-03-23 17:18:19	-->	drostie (~14kthings@535424AF.cm-6-5a.dynamic.ziggo.nl) has joined #haskell
2013-03-23 17:18:24	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:18:51	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:19:01	roadfish	@pl a b = if b == 3 then 33 else c (d e)
2013-03-23 17:19:02	lambdabot	a = flip (flip if' 33 . (3 ==)) (c (d e))
2013-03-23 17:20:05	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:20:08	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:20:09	@johnw	a b = if' (b == 3) 33 (c (d e))
2013-03-23 17:20:14	@johnw	not really helping
2013-03-23 17:20:27	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-23 17:20:27	dEPY	Hm. Learning haskell gives me a feeling like I've been given a space ship that can travel trough space and time but I can barely drive a moped. O_ô
2013-03-23 17:20:41	--	u__ is now known as u_
2013-03-23 17:20:43	@johnw	we do have a Tardis monad
2013-03-23 17:20:48	roadfish	@hoogle if'
2013-03-23 17:20:49	dEPY	LOL :D
2013-03-23 17:20:49	lambdabot	No results found
2013-03-23 17:20:58	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:21:04	dEPY	When do you get used to the "Tardis" ?:D
2013-03-23 17:21:07	@johnw	http://hackage.haskell.org/package/tardis
2013-03-23 17:21:15	@johnw	roadfish: it's functional if
2013-03-23 17:21:22	@johnw	if' x y z = if x then y else z
2013-03-23 17:21:25	geekosaur	roadfish, it doesn't actually eist, you should take it as a hitnt hat if doesn't really have a pointfree form
2013-03-23 17:21:26	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-23 17:21:38	geekosaur	you can define it that way ^^ but it doesn't come predefined
2013-03-23 17:22:27	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-23 17:22:34	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 252 seconds)
2013-03-23 17:22:41	roadfish	the main hint is that I should skip point-free on this one
2013-03-23 17:22:55	@johnw	just being point-free itself is rarely a worthy goal
2013-03-23 17:23:13	@johnw	when it adds clarity, it's great
2013-03-23 17:23:19	@johnw	but clarity should be the objective
2013-03-23 17:23:35	--	jlouis_ is now known as jlouis
2013-03-23 17:23:35	geekosaur	we like to refer to that as "pointless" for a reason :)
2013-03-23 17:23:41	roadfish	I wanted to shove getChar >>= ... without doing the getChar >>= \ch -> ...
2013-03-23 17:24:37	roadfish	well, first I have to try @pl before I can separate the good points from the pointless
2013-03-23 17:24:49	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-23 17:25:06	@johnw	roadfish: huh?  do you want >=>?
2013-03-23 17:25:09	geekosaur	a good rule of thumb is if it contains more than one flip, it's not worth it
2013-03-23 17:25:23	@johnw	or if it contains . with a paren immediately next to it
2013-03-23 17:25:31	@johnw	flip (a .) . (. b)
2013-03-23 17:25:32	geekosaur	or more than one ap
2013-03-23 17:25:35	@johnw	that's classic @pl noise
2013-03-23 17:25:44	-->	tac (47ef635e@gateway/web/freenode/ip.71.239.99.94) has joined #haskell
2013-03-23 17:25:46	<--	jonaias (~jonaias@177.102.80.97) has quit (Quit: Konversation terminated!)
2013-03-23 17:25:53	roadfish	more than one flip only gets points in the Olympics
2013-03-23 17:26:05	-->	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has joined #haskell
2013-03-23 17:26:05	@johnw	although today I did write this:
2013-03-23 17:26:06	@johnw	awsRetry = ((((retrying def (isFailure . responseResult) .) .) .) .) aws
2013-03-23 17:26:10	geekosaur	well, it gets points for obfuscation :)
2013-03-23 17:26:35	-->	MrFenix (~JanB@87.161.159.21) has joined #haskell
2013-03-23 17:26:36	@johnw	(each . corresponds to an argument passed to aws)
2013-03-23 17:26:38	aCube	is curry $ a . b . uncurry c worth it?
2013-03-23 17:26:51	roadfish	@hoogle aws
2013-03-23 17:26:52	lambdabot	package aws
2013-03-23 17:26:52	lambdabot	Graphics.Rendering.OpenGL.GLU.Quadrics data QuadricDrawStyle
2013-03-23 17:26:52	lambdabot	System.Process rawSystem :: String -> [String] -> IO ExitCode
2013-03-23 17:26:55	@johnw	aCube: i wouldn't say so
2013-03-23 17:27:04	@johnw	aws is Amazon Web Services
2013-03-23 17:28:12	@johnw	aCube: i mean, it can be worth it
2013-03-23 17:29:33	geekosaur	the question might be, why are you using tuples to start with. (sometimes it's reasonable, as when you're working with arrows --- but then you probably want to use the appropriate arrow abstraction instead of curry/uncurry)
2013-03-23 17:29:39	<--	osa1 (~omer@88.242.248.15) has quit (Ping timeout: 256 seconds)
2013-03-23 17:30:59	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Read error: Connection reset by peer)
2013-03-23 17:31:03	<--	squidz (~albert@141.84.69.76) has quit (Quit: Lost terminal)
2013-03-23 17:31:27	<--	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has quit (Quit: Leaving)
2013-03-23 17:31:38	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-23 17:31:45	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-23 17:31:51	roadfish	in what sense is aCube's example a triple?
2013-03-23 17:31:54	roadfish	the signature of "x a b c = curry $ a . b . uncurry c" is "x :: (b1 -> c) -> (b2 -> b1) -> (a -> b -> b2) -> a -> b -> c"
2013-03-23 17:32:26	roadfish	no, I retract
2013-03-23 17:32:41	roadfish	why did I think someone said triple?
2013-03-23 17:33:13	dEPY	I was trying to rewrite map with left fold and it doens't really work:D   let map2 f xs = foldl (\x acc -> acc ++ [(f x)]) xs []
2013-03-23 17:33:19	dEPY	Any idea?
2013-03-23 17:33:35	@johnw	you have acc and x reversed
2013-03-23 17:33:38	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 17:33:40	@johnw	and xs and []
2013-03-23 17:33:42	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Client Quit)
2013-03-23 17:34:08	dEPY	oh yes, silly me :)
2013-03-23 17:34:11	dEPY	thank you
2013-03-23 17:34:29	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-23 17:35:31	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-23 17:36:50	@johnw	i would use foldr, though
2013-03-23 17:37:04	@johnw	foldl is really the worst choice possible for map
2013-03-23 17:37:11	-->	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has joined #haskell
2013-03-23 17:38:20	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-23 17:38:24	<--	IngoPan (~mareike@188-192-110-7-dynip.superkabel.de) has quit
2013-03-23 17:39:11	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-03-23 17:39:19	<--	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-23 17:40:04	<--	exoticb (~exoticb@FL1-125-197-210-12.tky.mesh.ad.jp) has quit (Remote host closed the connection)
2013-03-23 17:40:32	<--	derelm (~derelm@p57B75B31.dip.t-dialin.net) has quit (Quit: derelm)
2013-03-23 17:41:55	-->	madjestic (~madjestic@188.88.122.31) has joined #haskell
2013-03-23 17:42:01	Squid_Tamer	I have  2D list (A List of Lists of Eq). What would be the cleanest way to get the (x,y) coordinates of a specific value?
2013-03-23 17:42:31	Squid_Tamer	Like, find the first 7 in a grid of Ints and return the location?
2013-03-23 17:42:31	-->	taterbase (~taterbase@66.sub-70-208-0.myvzw.com) has joined #haskell
2013-03-23 17:43:19	@johnw	nested filter
2013-03-23 17:43:30	@johnw	combined with take 1
2013-03-23 17:43:31	-->	sonda (~sonda@adsl-ull-99-176.50-151.net24.it) has joined #haskell
2013-03-23 17:44:00	@johnw	or, rather, nested find
2013-03-23 17:44:04	@johnw	sorry, i just don't use find often
2013-03-23 17:44:27	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-03-23 17:44:53	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-23 17:45:03	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-23 17:45:24	Squid_Tamer	Yeah, I think I just need to recurse over the outer list and use findIndex on all of the inner ones.
2013-03-23 17:45:26	-->	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has joined #haskell
2013-03-23 17:45:26	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 245 seconds)
2013-03-23 17:46:12	@johnw	well, stopping after you have your answer
2013-03-23 17:46:20	<--	taterbase (~taterbase@66.sub-70-208-0.myvzw.com) has quit (Remote host closed the connection)
2013-03-23 17:47:16	-->	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has joined #haskell
2013-03-23 17:47:54	-->	honkfestival (~honkfesti@198-84-183-94.cpe.teksavvy.com) has joined #haskell
2013-03-23 17:47:59	Squid_Tamer	johnw: Yes, definitely will want to do that too. Thanks! I was just wondering if there was some magically simple solution that I was missing.
2013-03-23 17:48:05	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-23 17:48:09	supki	> [[1,2,3],[4,5,6]] ^@.. ifolded Lens.<.> ifolded . filtered (== 3)
2013-03-23 17:48:12	lambdabot	  [((0,2),3)]
2013-03-23 17:48:45	<--	Thomyho4 (~thomyho@mnhm-5f75c0b9.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-23 17:48:57	FireFly	:t (^@..)
2013-03-23 17:48:59	lambdabot	s -> IndexedGetting i (Endo [(i, a)]) s t a b -> [(i, a)]
2013-03-23 17:49:08	hiptobecubic	FireFly, hah. nice try
2013-03-23 17:49:21	edwardk	> [[1,2,3],[4,5,6]]^@..each Lens.<.> each.filtered (== 3)
2013-03-23 17:49:24	lambdabot	  [((0,2),3)]
2013-03-23 17:49:30	-->	bad_alloc (~bad_alloc@HSI-KBW-085-216-111-172.hsi.kabelbw.de) has joined #haskell
2013-03-23 17:49:32	aCube	What is the best way to get GHC 7.4 on Archlinux ?
2013-03-23 17:49:37	-->	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has joined #haskell
2013-03-23 17:50:17	edwardk	FireFly: in lens (^.) is used to evaluate a lens, or getter to get a single result. (^..) is used to get a list of all targets of a lens, getter, fold, traversal, etc. (@) modifies it to make it also return the 'index' of the targets.
2013-03-23 17:50:18	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-23 17:50:25	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-23 17:50:35	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-23 17:50:40	edwardk	^@. returns the index and result of an indexed lens or getter,   ^@.. returns the indices and results of an indexed traversal, etc.
2013-03-23 17:50:59	<--	v__ (~v@61.173.89.166) has quit (Ping timeout: 256 seconds)
2013-03-23 17:51:18	-->	taterbase (~taterbase@66.sub-70-208-0.myvzw.com) has joined #haskell
2013-03-23 17:51:28	edwardk	^ is 'read', @ as a 'morpheme' is used to indicate index. . single result, and .. multiple
2013-03-23 17:51:34	aCube	What is <.>?
2013-03-23 17:51:35	-->	v__ (~v@114.112.255.154) has joined #haskell
2013-03-23 17:51:38	<--	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has quit (Ping timeout: 258 seconds)
2013-03-23 17:51:40	FireFly	edwardk: and how do you pronounce ^@.. ? :D
2013-03-23 17:51:49	edwardk	FireFly: 'itoListOf'
2013-03-23 17:52:04	-->	osa1 (~omer@88.242.248.15) has joined #haskell
2013-03-23 17:52:06	<--	osa1 (~omer@88.242.248.15) has quit (Client Quit)
2013-03-23 17:52:17	-->	Eldariof-ru (~CLD@188.168.243.40) has joined #haskell
2013-03-23 17:52:19	aCube	> [1,2,3] ^@. contains 1
2013-03-23 17:52:21	lambdabot	  (1,True)
2013-03-23 17:52:22	edwardk	aCube: if you compose two indexed traversals, etc. with (.) you only get the 'deepest' index. if you use <.> though, i can tuple them up and give them to you
2013-03-23 17:52:37	edwardk	> [[1,2,3],[4,5,6]]^@..each Lens.<.> each.filtered (== 3)
2013-03-23 17:52:39	lambdabot	  [((0,2),3)]
2013-03-23 17:52:43	edwardk	> [[1,2,3],[4,5,6]]^@..each . each.filtered (== 3)
2013-03-23 17:52:45	lambdabot	  [(2,3)]
2013-03-23 17:52:50	<--	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-03-23 17:52:52	edwardk	notice how it lost the outer index.
2013-03-23 17:52:55	bad_alloc	Hi I'm trying to implement mergesort as an exercise. When I try to trace what is going on in my merge function this happens: http://cxg.de/_393a55.htm Why do the messages collide? does this have something to do with lazy evaluation (i.e. the unevaluated function call is spliced into the list)?
2013-03-23 17:52:56	<--	madjestic (~madjestic@188.88.122.31) has quit (Ping timeout: 252 seconds)
2013-03-23 17:52:56	aCube	ah :)
2013-03-23 17:53:16	<--	taterbase (~taterbase@66.sub-70-208-0.myvzw.com) has quit (Remote host closed the connection)
2013-03-23 17:53:17	edwardk	<.> <. and .> are used in lens to indicate which one to keep. (.>) is redundant because it matches the behavior of .
2013-03-23 17:53:22	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Ping timeout: 252 seconds)
2013-03-23 17:53:50	edwardk	many combinators in lens, (like to) are index-preserving in that if they do not or cannot use the index they pass along whatever index was given to them
2013-03-23 17:54:01	Botje	bad_alloc: yes, it does.
2013-03-23 17:54:02	edwardk	that is what filtered is doing here
2013-03-23 17:54:07	-->	Eldariof93-ru (~CLD@pppoe-219-38-dyn-sr.volgaline.ru) has joined #haskell
2013-03-23 17:54:13	hiptobecubic	there is *at least* one book's worth of material on lens that needs to be written
2013-03-23 17:54:13	Botje	ghci prints elements one by one and forces stuff when it's necessary.
2013-03-23 17:54:26	-->	chrisdotcode (~quassel@pool-96-232-82-250.nycmny.fios.verizon.net) has joined #haskell
2013-03-23 17:54:34	BMeph	edwardk: That has a very ISWIM-esque flavor to it. :)
2013-03-23 17:54:42	bad_alloc	Botje: How do I "fix" this?
2013-03-23 17:54:52	Botje	bad_alloc: force the list in one go :)
2013-03-23 17:55:00	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-23 17:55:11	edwardk	BMeph: heh
2013-03-23 17:55:12	Botje	bad_alloc: let m = merge [1,3,5] [2,4,5] in length m `seq` m
2013-03-23 17:55:39	<--	eldariof (~CLD@pppoe-209-130-dyn-sr.volgaline.ru) has quit (Ping timeout: 260 seconds)
2013-03-23 17:56:27	-->	ivan____ (~ivan@138.193.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-23 17:56:27	Botje	bad_alloc: also note that your merge is slightly broken
2013-03-23 17:56:38	Botje	consider merge [1,2,3] [4,5,6]
2013-03-23 17:56:48	edwardk	this can be useful with tables if you want to do nested grouping, etc. because each group comes back as an indexed traversal of subtables that you can continue to group, etc.
2013-03-23 17:57:04	-->	plucas (~plucas@69.38.217.3) has joined #haskell
2013-03-23 17:57:50	edwardk	foo^@..group FooBar <.> group FooBaz . to count  -- can be used with tables to use the indices to do grouping by the Bar field, then the Baz field, and tuple them up to give you the counts by the tuple of those two things
2013-03-23 17:57:54	<--	Eldariof-ru (~CLD@188.168.243.40) has quit (Ping timeout: 245 seconds)
2013-03-23 17:58:03	edwardk	and that can be interspersed with 'with' clauses, etc.
2013-03-23 17:58:04	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Client Quit)
2013-03-23 17:58:12	bad_alloc	Botje: Ah, I see. I get 1,4,2... Well back to the drawing board and thanks for the hints :)
2013-03-23 17:58:23	edwardk	that usecase was a big motivator behind adding index-preservation to 3.8
2013-03-23 17:58:24	<--	connelly (~connelly@XVM-FOUR-180.MIT.EDU) has quit (Remote host closed the connection)
2013-03-23 17:58:38	Botje	bad_alloc: you're pretty close though :)
2013-03-23 17:58:58	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-23 17:58:59	aCube	:t traversed
2013-03-23 17:59:00	aCube	:t traverse
2013-03-23 17:59:00	lambdabot	(Applicative f1, Traversable f, Indexable Int p) => p a (f1 b) -> f a -> f1 (f b)
2013-03-23 17:59:02	lambdabot	(Applicative f, Traversable t) => (a -> f b) -> t a -> f (t b)
2013-03-23 17:59:04	<--	imeredith (~ivan@152.201.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 256 seconds)
2013-03-23 17:59:19	aCube	what is the difference between the too?
2013-03-23 17:59:19	edwardk	traversed gives you the index, traverse does not
2013-03-23 17:59:31	aCube	[1,2,3] ^@.. traverse
2013-03-23 17:59:33	aCube	> [1,2,3] ^@.. traverse
2013-03-23 17:59:35	lambdabot	  Couldn't match expected type `Control.Lens.Internal.Indexed.Indexed
2013-03-23 17:59:35	lambdabot	       ...
2013-03-23 17:59:36	edwardk	traversed takes any container with a Traversable instance and gives you the ordinal position in the traversal as an index
2013-03-23 17:59:38	aCube	ah ok
2013-03-23 17:59:46	edwardk	that is ordinal position, not the position in the container.
2013-03-23 17:59:50	hiptobecubic	edwardk, can't say I've heard anyone clamoring for "index-based nested grouping of nested subtables by key"
2013-03-23 17:59:54	aCube	> [1,2,3] ^@.. traversed
2013-03-23 17:59:56	lambdabot	  [(0,1),(1,2),(2,3)]
2013-03-23 18:00:02	-->	ijp (~user@host86-143-197-46.range86-143.btcentralplus.com) has joined #haskell
2013-03-23 18:00:07	edwardk	so if you have a Map with keys, itraversed will give you the keys, traversed will give you the position
2013-03-23 18:00:21	edwardk	hiptobecubic: have you ever used group by in sql? think that
2013-03-23 18:00:40	edwardk	hiptobecubic: i for one use aggregates in sql all the time =P
2013-03-23 18:00:41	hiptobecubic	True, I just haven't done any CRUD in haskell
2013-03-23 18:01:01	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-23 18:01:26	<--	dario (~dario@mailgate.zerties.org) has quit (Ping timeout: 256 seconds)
2013-03-23 18:01:48	edwardk	i try to avoid it myself ;)
2013-03-23 18:01:56	hiptobecubic	edwardk, clearly
2013-03-23 18:02:13	-->	qnikst (~qnikst@gentoo/developer/qnikst) has joined #haskell
2013-03-23 18:02:44	<--	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-03-23 18:02:47	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-23 18:02:56	<--	guampa (~guampa@unaffiliated/guampa) has quit (Ping timeout: 245 seconds)
2013-03-23 18:03:14	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-23 18:03:16	edwardk	heh fortunately it seems even my database stuff involves category theory, as we're starting to use galois connections to talk about hierarchies and compression schemes in analytics ;)
2013-03-23 18:03:54	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 258 seconds)
2013-03-23 18:05:15	<--	pckt (~pckt@unaffiliated/pckt) has quit (Quit: leaving)
2013-03-23 18:05:28	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-23 18:06:53	-->	taterbase (~taterbase@144.35.254.5) has joined #haskell
2013-03-23 18:07:25	roadfish	sequence does [m a] -> m [a]. Is there something that does (m a,m b) -> m (a,b)?
2013-03-23 18:07:31	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Ping timeout: 245 seconds)
2013-03-23 18:07:41	bad_alloc	(Maybe Botje:) It seems to work now, but I'm not sure if it's done properly. What could be improved?: http://cxg.de/_de8c8c.htm
2013-03-23 18:07:46	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-23 18:08:15	edwardk	shachaf++ # nullary typeclasses
2013-03-23 18:08:15	-->	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has joined #haskell
2013-03-23 18:08:27	hiptobecubic	bad_alloc, type in EQ case?
2013-03-23 18:08:53	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-23 18:08:54	hiptobecubic	typo* (ironically)
2013-03-23 18:09:21	Botje	looks okay to me
2013-03-23 18:09:51	supki	roadfish: not as one function
2013-03-23 18:10:27	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Quit: WeeChat 0.3.8)
2013-03-23 18:10:35	bad_alloc	hiptobecubic: what typo?
2013-03-23 18:10:36	roadfish	supki: are you implying there are two functions that will do it?
2013-03-23 18:10:56	hiptobecubic	bad_alloc, it appears you are including 'a' in the result twice?
2013-03-23 18:11:03	aCube	@ty uncurry $ liftM2 (,)
2013-03-23 18:11:05	lambdabot	Monad m => (m a1, m a2) -> m (a1, a2)
2013-03-23 18:11:09	hiptobecubic	a : b : merge as bs
2013-03-23 18:11:16	hiptobecubic	is probably what you wanted
2013-03-23 18:11:50	aCube	couldn't the head of as be smaller than b? hiptobecubic?
2013-03-23 18:12:02	hiptobecubic	bad_alloc, also note that  x : [] ++ aList == x : aList
2013-03-23 18:12:14	bad_alloc	hiptobecubic: well, since a == b that shouldn't matter, so I figures a : a might be more obvious, or am I wrong here?
2013-03-23 18:12:40	bad_alloc	hiptobecubic: really? the compiler barfed on that when I tried it.
2013-03-23 18:12:49	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-23 18:13:06	hiptobecubic	bad_alloc, well for numbers where a == b, implies a *is* b then it shouldn't matter. But you can implement the Eq typeclass differently for different types
2013-03-23 18:13:34	<--	taterbase (~taterbase@144.35.254.5) has quit (Remote host closed the connection)
2013-03-23 18:13:35	-->	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has joined #haskell
2013-03-23 18:14:00	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 264 seconds)
2013-03-23 18:14:04	hiptobecubic	crazytype1 == crazytype2 might just mean "these are equal in the parts we care about". Whether or not that's great practice is a different question I guess
2013-03-23 18:14:24	bad_alloc	hiptobecubic: um, is this like in java a ==  b vs a.equals(b) ?
2013-03-23 18:14:29	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-23 18:14:32	hiptobecubic	> x : [] ++ [y,z] == x : [y,z]
2013-03-23 18:14:34	lambdabot	  True
2013-03-23 18:15:10	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-23 18:15:28	skuggi	bad_alloc: not really. you can't generally do the equivalent of java's (a == b) in haskell
2013-03-23 18:15:34	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-03-23 18:15:50	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-23 18:16:24	bad_alloc	hiptobecubic: the code after your changes: http://cxg.de/_b1550d.htm
2013-03-23 18:16:45	aristid	:t [x,y,z]
2013-03-23 18:16:46	lambdabot	[Expr]
2013-03-23 18:17:49	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-23 18:18:03	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-23 18:18:09	danharaj	edwardk: I saw the new nullary type class extension and I thought of reflection.
2013-03-23 18:18:12	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 248 seconds)
2013-03-23 18:18:45	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-23 18:18:57	edwardk	danharaj: yeah that one is a bit tricky because its kinda nice to be able to have two constraints of the same type
2013-03-23 18:19:03	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-23 18:19:15	edwardk	hence the 's'
2013-03-23 18:19:19	<--	rck (~hakujin@c-68-52-135-71.hsd1.tn.comcast.net) has quit (Quit: WeeChat 0.4.0)
2013-03-23 18:19:23	<--	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-03-23 18:19:42	edwardk	that said for pure 'global configuration stuff' a nullary reflection wouldn't be bad
2013-03-23 18:20:01	hiptobecubic	aristid, package simple-reflect
2013-03-23 18:20:06	hiptobecubic	aristid, it's *very* nice
2013-03-23 18:20:16	edwardk	or rather it becomes a unary reflection because you have the type of the value
2013-03-23 18:20:23	hiptobecubic	> foldr f x [y,z]
2013-03-23 18:20:24	lambdabot	  f y (f z x)
2013-03-23 18:20:26	edwardk	in which case it could be used today
2013-03-23 18:20:34	<--	jdnavarro (~danny@253.Red-88-22-34.staticIP.rima-tde.net) has quit (Remote host closed the connection)
2013-03-23 18:21:07	-->	niloc132 (~colin@75-163-26-190.dlth.qwest.net) has joined #haskell
2013-03-23 18:21:31	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 264 seconds)
2013-03-23 18:22:02	danharaj	edwardk: well if there ever arise -1 type classes we will be glad we have nullary type classes for reflection :P
2013-03-23 18:22:04	tac	bad_alloc: yeah, there's no such thing as "reference equality" in Haskell
2013-03-23 18:22:09	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-23 18:22:12	-->	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has joined #haskell
2013-03-23 18:22:13	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Ping timeout: 245 seconds)
2013-03-23 18:22:29	<--	mallory (~chatzilla@125.122.80.51) has quit (Ping timeout: 245 seconds)
2013-03-23 18:22:34	aristid	hiptobecubic: i do know about the package :)
2013-03-23 18:22:36	edwardk	class Given a where given :: a; give :: a -> (Given a => r) -> r
2013-03-23 18:24:10	edwardk	danharaj: https://github.com/ekmett/reflection/issues/6
2013-03-23 18:24:51	-->	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-23 18:25:14	hiptobecubic	bad_alloc, looks ok i think? Although I think it's typical to divide the list by "unzipping" rather chopping in half because of the way lists are implemented
2013-03-23 18:25:17	bad_alloc	tac: I can say nothing meaningful to that, as I have no idea how haskell works. but I can complain, that I can't find anything that corresponds to lisp's eq, eql, equal and equalsp, which is really nice.
2013-03-23 18:25:32	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-23 18:25:41	tac	yeah, CL is horrible with that.
2013-03-23 18:25:57	danharaj	edwardk: That would be a good class to have.
2013-03-23 18:26:20	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-03-23 18:26:20	edwardk	hen we can ship system wide configurations around with it, etc.
2013-03-23 18:27:13	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-23 18:27:13	danharaj	I am actually having a little trouble seeing what extra power the phantom s gives you over Given.
2013-03-23 18:27:25	edwardk	make two moduli
2013-03-23 18:27:34	danharaj	ah, and then pass them both in.
2013-03-23 18:27:36	bad_alloc	hiptobecubic: how does that work?
2013-03-23 18:27:41	edwardk	yeah
2013-03-23 18:28:04	edwardk	the other thing is the existing API can nominally be implemented without the hack
2013-03-23 18:28:07	edwardk	but given cannot
2013-03-23 18:28:35	danharaj	edwardk: to be quite honest it seems like reflection is so nice that it should be folded into GHC base and made guaranteed to work.
2013-03-23 18:28:48	danharaj	and work fast instead of precariously relying on shenanigans.
2013-03-23 18:29:09	<--	cognominal (~cognomina@37.160.44.56) has quit (Read error: Connection reset by peer)
2013-03-23 18:29:26	edwardk	yeah, though its kind of nice that as a library i can support it clear back to hugs.
2013-03-23 18:30:01	danharaj	That is rather impressive but it seems to be a sad but true fact that Haskell as a community is turning into GHC as a community.
2013-03-23 18:30:09	edwardk	sure
2013-03-23 18:30:41	-->	fmapE (~fmapE@2001:18e8:2:10f4:69db:ef85:ba63:187e) has joined #haskell
2013-03-23 18:31:34	-->	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-23 18:32:24	edwardk	bad_alloc: by not giving you those tools, we can make things faster though. r5rs semantics for scheme are interesting, but they basically force you to implement virtually every lambda as given, because each lambda gets its own location and can be compared for equality, etc. by separating those concerns we get more flexibility for the compiler
2013-03-23 18:32:56	edwardk	GHC does incredibly heroic rewriting on your code. it wouldn't be possible to do so and preserve those operations that you want in a sane way
2013-03-23 18:33:05	-->	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has joined #haskell
2013-03-23 18:33:25	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 258 seconds)
2013-03-23 18:34:01	edwardk	bad_alloc: now, that said there are things like reallyUnsafePointerEquality# lying around in GHC modules, but I've in geneal been able to get away with using StableNames and other techniques that  let me avoid using it.
2013-03-23 18:34:23	-->	Thomyho4 (~thomyho@mnhm-5f75c0b9.pool.mediaWays.net) has joined #haskell
2013-03-23 18:34:34	danharaj	it should be pointed out what the significance of "reallyUnsafe" is. unsafePerformIO can segfault, for comparison.
2013-03-23 18:34:48	hiptobecubic	segfault > wrong
2013-03-23 18:35:20	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-23 18:35:32	edwardk	reallyUnsafePointerEquaity can lie when you work with performance monitoring turned on, etc.
2013-03-23 18:35:34	hiptobecubic	I want my programs to either be correct or violently explode
2013-03-23 18:36:25	bad_alloc	edwardk: Well, in that case I'll go on a quest to coerce C++ code into haskell ;) Seriously, I've just been dealing with haskell for a few days and this is something for later on I guess. Thanks for all the input :)
2013-03-23 18:36:31	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-23 18:36:39	<--	bad_alloc (~bad_alloc@HSI-KBW-085-216-111-172.hsi.kabelbw.de) has quit (Quit: "<hiptobecubic> I want my programs to either be correct or violently explode" Quote of the day.)
2013-03-23 18:36:50	-->	rosslazer (~Sputnik@149.119.229.195) has joined #haskell
2013-03-23 18:37:24	<--	skchrko (~sk@130.255.129.64) has quit (Remote host closed the connection)
2013-03-23 18:37:27	sproingie	@remember hiptobecubic I want my programs to either be correct or violently explode
2013-03-23 18:37:27	lambdabot	Nice!
2013-03-23 18:37:48	monochrom	there is much incentive, for people who code for money, for covering up incorrectness, at least postpone until after payment
2013-03-23 18:37:56	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Ping timeout: 248 seconds)
2013-03-23 18:38:08	hiptobecubic	monochrom, good thing no one pays me anything :|
2013-03-23 18:39:00	monochrom	my conspiracy theory is that this explains why people who code for money hug their dynamic languages so much
2013-03-23 18:39:26	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-23 18:40:59	hiptobecubic	monochrom, maybe partly. I think a huge part of it is that people who code for money are often under the direction of people who demand .... less productive.. languages.
2013-03-23 18:41:37	<--	bmfx (~bmfx@163-2-112-92.pool.ukrtel.net) has quit (Ping timeout: 256 seconds)
2013-03-23 18:41:44	hiptobecubic	So if I have to chose between pythons dynamism and Java's ... whatever gross mess you want to call that, the choice isn't so mind boggling.
2013-03-23 18:41:44	-->	cognominal (~cognomina@37.160.44.56) has joined #haskell
2013-03-23 18:42:06	<--	xkcd (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-23 18:42:47	-->	theodoiko (~theodoiko@92.40.253.124.threembb.co.uk) has joined #haskell
2013-03-23 18:43:24	-->	bmfx (~bmfx@13-45-112-92.pool.ukrtel.net) has joined #haskell
2013-03-23 18:43:31	hiptobecubic	Going to duck typing after working in a type system that sucks is like driving without your seat belt on at all, instead of just tying it around your neck.
2013-03-23 18:44:22	-->	xkcd (~chatzilla@103.5.132.50) has joined #haskell
2013-03-23 18:45:50	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-23 18:47:40	<--	rosslazer (~Sputnik@149.119.229.195) has quit (Ping timeout: 260 seconds)
2013-03-23 18:48:20	-->	feliperosa (~felipe@179-236-41-10.user.veloxzone.com.br) has joined #haskell
2013-03-23 18:48:34	--	irc: disconnected from server
2013-03-25 01:03:06	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-25 01:03:06	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-25 01:03:06	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-25 01:03:06	--	Nicks #haskell: [@ChanServ 13WAATC7Z [[zz]] [mth] \rs ]OLI[ __main__ _br_- _dabradley _flow_ _janne `0660 `bps `nand` a11235 A1kmm aajmakin aavogt ab9rf absence acfoltzer acharles_ Adeon adimit Adios adnap_ adnauseam AfC1 agumonkey agundry ahf ahkurtz ajhager akahn akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b alios alnix alpounet alshain AlStanforth Amadiro amatsu\idle amiller anachron_ andrewsw_ aninhume1 anona AntiSpamMeta apaku Apocalisp appamatto araujo arbn aristid arkeet arkx armlesshobo arnihr__ arun asante10111 asQuirreL aszlig Athas_ AtnNn augustl Axioma azaq23 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 ben_d bens_ bergey betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld bitonic blackmir1oxx BlastHardcheese blooberr BMeph_ bmfx bobry bogner Boney Boreeas Botje_ bradleyayers brainproxy Brando753 brandonw_ brett BrianHV brisbin brixen_ bstrie_ Bwild bxc Bynbo7 byorgey_ ByronJohnson cadsII Cale caligula canvon carlocci ccxCZ cdntr ceii celery__ centrinia_ certainty chance charlesofarrell chatsiri_ chessguy chirpsalot ChongLi Chousuke chr1s_ chrisbuchholz_ chrisirc chrra CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods cognominal colah collin comak companion_cube conehead confound connelly copamp coppro copumpkin CosmicRa` Counter-Strike cow-orke1 cross crs__ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dan_johnsin danols_work danr danvet darinmorrison dario DarkLinkXXXX Dashkal davean_ davorak dcoutts deavidsedice Deewiant def-lkb dennda__ dented42 Derander descender dfletcher_ DigitalKiwi dilinger dixie djahandarie djanatyn dju dkasak dm120769 dmwit dnolen dockside1 DolphR domingo_ donri doomlord dottedmag dqd Draconx Draggor drbean DrChaos DrCode dreixel__ drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago duairc_ dumbhat eacameron EarlGray^ earthy ecuderpam edenc Eduard_Munteanu edwtjo Eelis eff_ ehamberg eikke eis eL_Bart0 electrogeek elgot Eliel elliott elliottcable emma emmanuel__ endojelly Enigmagic ent- epta_ ericmj Eridius ernst Erstarrung Esa_ Estrellas etabot ethercrow etrepum Excureo External` eyck ezyang_ f8 fabjan_ faen FalkoPeters fall_ fayden felipe_ fergusnoble fgomez finnrobi fionnan fireglow floatingman flori flux fmapE formalcow freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco FunkyDrummer fxr fxrh gbarboza gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul_ gienah Gilly glguy Gothmog_ Gracenotes groovy2shoes gseitz gspr guerrill1 Guest10329 Guest22595 Guest30119 Guest46860 Guest76523 Gunni guy__ guymann gwern h_chiro hachiya hackagebot hackedy Hafydd hajimehoshi HaltingState hamishmack harrison_ heath helgikrs henk Hermit hiratara hiredman hive-mind hiyakashi horlicks hpc Hugglesworth hughfdja1kson HugoDani1l hvr hyko iago IAmNotARobot IanKelling ibid IbnFirnas IceDanelol Iceland_jack idnar idntfy ido idoru Igloo_ ilyanok imeredith imphasing inr int-e_ integral ion ique ISF_ec09 issimus iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt JaRoel|4d jaspervdj Jaxan jayne jbauman jcp jdoliner jedai Jello_Raptor jercos_ jerojasro jix jlaire jlamothe_ jlewis jliikka jlouis jmcarthur jMCg jml joachifm joar jodaro joe9 joeyh johnw jon-shape joneshf joneshf-laptop jonke Jonte JoshuaA jrib1 jrockway jrslepak jtalk jtobin julmae julmuri junsuijin jyyou k00mi k0ral KaiSforza kakos kallisti kalven_ KaneTW kaol kdridi__ Ke kennyd_ kennyp_ kevinqcs kfish Khisanth kini Kinnison KitB__ kkris kloeri klugez kmels kmels__ kmicu knightshade kniu knyppeldynan koala_man koninkje kosmikus kqr1 kranius_ krig_ kryft kshannon ktosiek Kuba kvey kylcarte kyle__ labo_ lahwran lambdabot lan3y latro`a lattenwald LeaChim lenstr leroux levi levitation_ lightquake_ Liskni_si lispy_ liszt liyang lokydor lopex lpsmith lpvb lucca luite lunarjar lusory lzm Maarten__ magicman majoh maksbotan_ malorie_ mami marienz Martty MasseR mastensg mateu mattp_ matzo mauke Maxdamantus mcdonc mceier mcguitan83 McManiaC mechairoi mefisto Megant_ meiji11` mendez merijn_ Mewnoid meyersh_ mgsloan miasma Michae___ miclorb mietek mike2 mikecaruso1 milli mimi_vx mimico__ mirsal mixi mjrosenb_ mlinksva mm_freak mmaruseacph2 MoALTz__ mokus mollerstrand monique_ monochrom moonlite_ morazow mornfall morolin mortberg Mortchek mpu mrd mrdomino_ MrFenix mrko MrMeh` mrshoe mspells mullein mux myme n_b nade Nahra Nanar nardul Natch neena NemesisD netj neurocyte newsham_ nexx Nickeeh nicoo nighty^ Nik_89 niko nikola nilg` niloc132 Nimatek nimish ninegrid ninzine Nisstyre no-n noam noj_ Noldorin nonymousa noplamodo notdan_ NougatRillettes Nshag nu11ptr numeral nus nwf_ obcode_ ocharles ofan OlegYch8 opqdonut Ornedan orospakr ortmage orzo osfameron osnr_ osxorgate otterdam otters otto_s_ ousado ozataman ozgura_ paddymahoney PaksAway ParahSail1n parcs PartyKat2e pcapriotti pdxleif_away Peaker peddie peltchu pepijndevos perlite permagreen petanqk petekaz peterhil pettter pfoetchen pharaun phaul Philonous PHO_ pikhq_ Plex_ plhk plucas pnielsen popz_ pqmodn_ pr predator217 preflex prh prinnysocks PrO_OkI profmakx Ptival ptrf purefn puzza007 pyrtsa pyykkis_ q66 QinGW quchen quicksilver quuxman qwandor qwr qz_ r126l_ raek_ raid rainmaker Ralith Rarrikins_f Raynes Razz rcj_ rcl realnot_ redjohn reembarking08 reiddraper Rembane_ rexamophone rfw RichyB Rickasaurus rio_ ritek Riussi rmunoz rmunroe_ robbe- robbert` rossabaker Rotaerk rs0 rsimoes ryanakca s00pcan S11001001 SaBer saep Sagi saiam_ Saizan sajith sambio sarfraz saurik_ sbahra_ schlumpi Scott_firebeta Sculptor_ seats SegFaultAX setmeaway2 sgronblo sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC SHODAN shutdown_-h_now si14 simon_ simpson sipa sirchurc1ill sjl ski skp skuggi skyflash skyflash_ SLi sm smarter__ so Soft sohum solancile solarus solirc sordina3 Sorella SoupEvil Spockz sproingie Squid_Tamer squidz Starfire statusfailed steez stelleg stephe- strax_ suiside sully sunfun sunnavy_ supersym supki sw17ch Swizec sysop_fb tahu tamiko_ tanakh Targen_ taruti taterbase tavelram_ tazjin TDJACR techlife Tehnix_ tensorpudding Tesis100 Tesseraction tg tgeeky Th0mas_ theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh Thomyho4 thorkilnaur thoughtpolice threeday1onk threesome tim timemage tkd_ tlaine tmiw TML tobiassj1sten tom4939 tomaw tomboy64 tomejaguar tomku tomprince ToRA Tordek_ TravisD tridacty1a trolling tromp tsinnema_ tsou tswett ttm ttuegel tunixman tuvxy tvaalen twanvl twanvl_ Twey tzxn3 u__ u_quark1 Ulrar_ User_ UziMonkey_ Valodim Varakh vehk verrens Vert Vertue vhz vmeson vobi volstvok Vorpal voyd_ Vq wagle Walther Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops Will| wjlroe wollw wormphle2m wting wto wtw wumpus wunki wyfrn_ x7 xaimus_ xcvii xinming xnyhps xorox90 xrl_ xunatai xymox_ yam yan_ yano yeltzooo yezariaely yiannis_1 yriw_ ysulsky_ yumike Zariel- zebr Zedrikov zeiris zenzike_ ZFox ziman zoktar zomg zorzar Zouppen zwiebel_ zxq9 zz__ zz_nh2 Zzompp_]
2013-03-25 01:03:06	--	Channel #haskell: 888 nicks (1 op, 0 halfops, 0 voices, 887 normals)
2013-03-25 01:03:06	--	URL for #haskell: http://www.haskell.org/
2013-03-25 01:03:07	--	lightquake_ is now known as lightquake
2013-03-25 01:03:09	--	Mode #haskell [+CLcnpt]
2013-03-25 01:03:09	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-25 01:03:11	-->	tippenein (~bo@199.195.252.184) has joined #haskell
2013-03-25 01:03:13	-->	tavelram (tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-03-25 01:03:13	-->	fcr (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-03-25 01:03:14	-->	eviltwin (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 01:03:14	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-25 01:03:15	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-03-25 01:03:16	-->	dyreshark (~george@li449-101.members.linode.com) has joined #haskell
2013-03-25 01:03:16	-->	xplat (~james@67.205.253.208) has joined #haskell
2013-03-25 01:03:33	-->	SeanTAllen (uid4855@gateway/web/irccloud.com/x-fuulzfqdjbehhctg) has joined #haskell
2013-03-25 01:03:33	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-03-25 01:03:36	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-03-25 01:03:38	S11001001	or skyflash_
2013-03-25 01:03:42	--	eviltwin is now known as 1JTAAFA3H
2013-03-25 01:03:45	-->	ijp (~user@host81-159-127-140.range81-159.btcentralplus.com) has joined #haskell
2013-03-25 01:03:45	-->	JPohlmann (~jannis@roadtrain.codethink.co.uk) has joined #haskell
2013-03-25 01:03:45	-->	hanDerPe1er (~peder@li307-49.members.linode.com) has joined #haskell
2013-03-25 01:03:45	-->	tomh_ (uid501@gateway/web/irccloud.com/x-usezjphmwguguvuy) has joined #haskell
2013-03-25 01:03:45	-->	mjr841 (~mjr84@jasper.ruschserver.com) has joined #haskell
2013-03-25 01:03:45	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-03-25 01:03:45	-->	natte (~natte@69.55.61.125) has joined #haskell
2013-03-25 01:03:45	-->	DT` (~ea@95.239.42.179) has joined #haskell
2013-03-25 01:03:45	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-03-25 01:03:45	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-03-25 01:03:45	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-25 01:03:45	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:03:45	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-25 01:03:45	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:03:45	-->	machisuji (~machisuji@78.46.83.103) has joined #haskell
2013-03-25 01:03:45	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-25 01:03:45	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-25 01:03:45	-->	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has joined #haskell
2013-03-25 01:03:45	-->	petantik (~oz@unaffiliated/ceezer) has joined #haskell
2013-03-25 01:03:45	-->	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2013-03-25 01:03:45	-->	othiym23 (ogd@aglaia.aoaioxxysz.net) has joined #haskell
2013-03-25 01:03:45	-->	XMunkki (xm@hilla.kapsi.fi) has joined #haskell
2013-03-25 01:03:45	-->	DustyDingo (~nonamen@atommuell.mum.jku.at) has joined #haskell
2013-03-25 01:03:45	-->	lulf (~lulf@li307-13.members.linode.com) has joined #haskell
2013-03-25 01:03:45	-->	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 01:03:45	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-03-25 01:03:45	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-03-25 01:03:45	-->	quaestor (~quaestor@188-194-59-186-dynip.superkabel.de) has joined #haskell
2013-03-25 01:03:45	-->	tessier (~treed@kernel-panic/copilotco) has joined #haskell
2013-03-25 01:03:45	-->	aforemny (~aforemny@209-61-142-12.static.cloud-ips.com) has joined #haskell
2013-03-25 01:03:45	-->	Tene (~tene@poipu/supporter/slacker/tene) has joined #haskell
2013-03-25 01:03:45	-->	Dybber (~dybber@dybber.dk) has joined #haskell
2013-03-25 01:03:45	-->	hiroyuki2 (~hiroyuki@49.212.145.173) has joined #haskell
2013-03-25 01:03:45	-->	Canar (~bass@benjamincook.ca) has joined #haskell
2013-03-25 01:03:45	-->	ahihi (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-03-25 01:03:45	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-03-25 01:03:45	-->	`micro (~micro@ec2-50-16-189-142.compute-1.amazonaws.com) has joined #haskell
2013-03-25 01:03:46	monochrom	that is even better. fix (your_function >=>) initial
2013-03-25 01:03:46	-->	jaroslaw (~a@tux3.usask.ca) has joined #haskell
2013-03-25 01:03:46	-->	mlh_ (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-25 01:03:46	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:03:46	-->	marchdown (~marchdown@37-146-205-166.broadband.corbina.ru) has joined #haskell
2013-03-25 01:03:46	-->	dannybtran (~digisyndi@c-69-137-89-3.hsd1.tn.comcast.net) has joined #haskell
2013-03-25 01:03:46	-->	kith (~kith@unaffiliated/kith) has joined #haskell
2013-03-25 01:03:46	-->	anders^^ (~anders@h-37-119.a336.priv.bahnhof.se) has joined #haskell
2013-03-25 01:03:46	-->	JoeHazzers (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 01:03:55	-->	td123 (~thomas-dz@li430-81.members.linode.com) has joined #haskell
2013-03-25 01:04:06	<--	otterdam (otterdam@reddit/operator/otterdam) has quit (Excess Flood)
2013-03-25 01:04:07	<--	orospakr (~orospakr@mobotropolis.orospakr.ca) has quit (Ping timeout: 264 seconds)
2013-03-25 01:04:07	<--	threeday1onk (~threedaym@surimi.vm.bytemark.co.uk) has quit (Ping timeout: 264 seconds)
2013-03-25 01:04:07	<--	aszlig (~aszlig@213.133.97.59) has quit (Ping timeout: 264 seconds)
2013-03-25 01:04:19	-->	Fuuzetsu (~Shana@unaffiliated/shanachan) has joined #haskell
2013-03-25 01:04:26	-->	threedaymonk (~threedaym@surimi.vm.bytemark.co.uk) has joined #haskell
2013-03-25 01:04:30	-->	Internet13 (~chatzilla@92.233.64.26) has joined #haskell
2013-03-25 01:04:30	<--	staafl (~staafl@95-42-19-2.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-03-25 01:04:34	-->	nlogax (~nlogax@unaffiliated/nlogax) has joined #haskell
2013-03-25 01:04:43	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-25 01:04:45	-->	scgilardi (~scgilardi@valve.draines.com) has joined #haskell
2013-03-25 01:04:47	-->	aszlig (~aszlig@redmoonstudios.org) has joined #haskell
2013-03-25 01:04:47	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:04:58	<--	Baughn (~svein@tsugumi.brage.info) has quit (Ping timeout: 256 seconds)
2013-03-25 01:05:07	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 01:05:08	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-25 01:05:14	--	jlamothe_ is now known as jlamothe
2013-03-25 01:05:17	-->	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-25 01:05:22	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-03-25 01:05:24	-->	linduxed (~linduxed@194-14-0-85.serioustubes.org) has joined #haskell
2013-03-25 01:05:27	-->	otterdam (otterdam@reddit/operator/otterdam) has joined #haskell
2013-03-25 01:05:36	Michae___	what's the time complexity of the default sort function? I'm having trouble finding this in the docs.
2013-03-25 01:05:37	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-03-25 01:05:42	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 276 seconds)
2013-03-25 01:05:49	<--	eis (~eis@109.197.218.46) has quit (Read error: Connection reset by peer)
2013-03-25 01:05:50	<--	tavelram_ (tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (Read error: Operation timed out)
2013-03-25 01:05:50	monochrom	n * log n
2013-03-25 01:06:31	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:06:40	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-25 01:06:48	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-25 01:06:51	-->	srcerer (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 01:06:53	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 252 seconds)
2013-03-25 01:06:54	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-03-25 01:07:14	-->	v__ (~v@61.170.247.221) has joined #haskell
2013-03-25 01:07:32	-->	knz (~kena@82-170-42-189.ip.telfort.nl) has joined #haskell
2013-03-25 01:07:36	<--	quaestor (~quaestor@188-194-59-186-dynip.superkabel.de) has quit (Ping timeout: 272 seconds)
2013-03-25 01:07:37	Peaker	lists as control structures (replacing loops) is nice, lists as data structures, quite terrible most of the time.   sort indicates the latter
2013-03-25 01:07:44	-->	Baughn (~svein@tsugumi.brage.info) has joined #haskell
2013-03-25 01:07:46	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 01:07:50	<--	DustyDingo (~nonamen@atommuell.mum.jku.at) has quit (Read error: Connection reset by peer)
2013-03-25 01:08:08	-->	DustyDingo (~nonamen@atommuell.mum.jku.at) has joined #haskell
2013-03-25 01:08:14	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:14	<--	XMunkki (xm@hilla.kapsi.fi) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:14	<--	Dybber (~dybber@dybber.dk) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:14	<--	munro (~ryan@node-2.0x0539.org) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:14	<--	`micro (~micro@ec2-50-16-189-142.compute-1.amazonaws.com) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:37	<--	Guest10329 (~rdeaton@galactica.lug.udel.edu) has quit (Remote host closed the connection)
2013-03-25 01:08:52	<--	mjr841 (~mjr84@jasper.ruschserver.com) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:52	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:52	<--	othiym23 (ogd@aglaia.aoaioxxysz.net) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:52	<--	Tene (~tene@poipu/supporter/slacker/tene) has quit (Ping timeout: 272 seconds)
2013-03-25 01:08:52	<--	Canar (~bass@benjamincook.ca) has quit (Ping timeout: 272 seconds)
2013-03-25 01:09:07	<--	plucas (~plucas@12.130.117.52) has quit (Remote host closed the connection)
2013-03-25 01:09:22	-->	XMunkki (xm@hilla.kapsi.fi) has joined #haskell
2013-03-25 01:09:22	monochrom	perhaps I want to sort my control structure :)
2013-03-25 01:09:23	-->	Dybber (~dybber@dybber.dk) has joined #haskell
2013-03-25 01:09:31	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:09:49	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 01:09:55	-->	davidf18 (~textual@ip-64-134-101-52.public.wayport.net) has joined #haskell
2013-03-25 01:10:02	-->	Tene (~tene@poipu/supporter/slacker/tene) has joined #haskell
2013-03-25 01:10:13	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 01:10:41	skyflash_	monochrom or S11001001:  fix (your_function >=>) initial, works like a charm.  Can't help but thinking I fell off the beaten path though.  I was expecting a standard Monad function to iterate over a function of that pattern.  Anyway, thanks!
2013-03-25 01:10:48	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:10:48	<--	DT` (~ea@95.239.42.179) has quit (Read error: Connection reset by peer)
2013-03-25 01:11:12	-->	DT` (~ea@95.239.42.179) has joined #haskell
2013-03-25 01:11:13	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:11:13	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-25 01:11:28	<--	QinGW (~yaaic@115.171.168.84) has quit (Ping timeout: 256 seconds)
2013-03-25 01:12:03	monochrom	@type void
2013-03-25 01:12:05	lambdabot	Functor f => f a -> f ()
2013-03-25 01:12:10	<--	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-25 01:12:26	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-25 01:12:28	monochrom	@type undefined :: Void
2013-03-25 01:12:29	lambdabot	Not in scope: type constructor or class `Void'
2013-03-25 01:12:48	-->	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 01:12:49	-->	quaestor (~quaestor@188-194-59-186-dynip.superkabel.de) has joined #haskell
2013-03-25 01:12:54	-->	plucas (~plucas@12.130.117.52) has joined #haskell
2013-03-25 01:13:09	<--	v__ (~v@61.170.247.221) has quit (Ping timeout: 245 seconds)
2013-03-25 01:13:16	-->	AntiSpamMeta2 (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-03-25 01:13:16	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Killed (morgan.freenode.net (Nickname regained by services)))
2013-03-25 01:13:16	--	AntiSpamMeta2 is now known as AntiSpamMeta
2013-03-25 01:13:18	<--	machisuji (~machisuji@78.46.83.103) has quit (Ping timeout: 272 seconds)
2013-03-25 01:13:22	<--	fmapE (~fmapE@2001:18e8:2:10f4:cd00:7f05:f543:13c2) has quit (Remote host closed the connection)
2013-03-25 01:13:37	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 01:13:42	<--	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:13:43	-->	nh23 (~nh2@2001:41d0:1:c648::1) has joined #haskell
2013-03-25 01:14:13	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-25 01:14:21	<--	plucas (~plucas@12.130.117.52) has quit (Remote host closed the connection)
2013-03-25 01:14:34	<--	hpaste (~hpaste@unaffiliated/chrisdone) has quit (Ping timeout: 272 seconds)
2013-03-25 01:14:34	<--	natte (~natte@69.55.61.125) has quit (Ping timeout: 272 seconds)
2013-03-25 01:14:34	<--	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has quit (Ping timeout: 272 seconds)
2013-03-25 01:14:34	<--	petantik (~oz@unaffiliated/ceezer) has quit (Ping timeout: 272 seconds)
2013-03-25 01:14:34	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (Ping timeout: 272 seconds)
2013-03-25 01:14:36	-->	froztbyt1 (~froztbyte@elegua.za.net) has joined #haskell
2013-03-25 01:14:43	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-03-25 01:14:46	<--	A1kmm (~a1kmm@222-155-112-70.jetstream.xtra.co.nz) has quit (Ping timeout: 240 seconds)
2013-03-25 01:14:47	<--	froztbyte (~froztbyte@unaffiliated/frozt01100101) has quit (Ping timeout: 240 seconds)
2013-03-25 01:14:47	<--	mcdonc (~mcdonc@ip72-209-215-142.dc.dc.cox.net) has quit (Remote host closed the connection)
2013-03-25 01:14:57	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-25 01:15:00	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-25 01:15:00	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:00	<--	Maarten__ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:00	<--	puzza007 (uid127@gateway/web/irccloud.com/x-qwswmnnnroizsdsq) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:01	<--	zz_nh2 (~nh2@2001:41d0:1:c648::1) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:01	<--	jacobw (~jacobw@unaffiliated/jacobw) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:01	-->	mcdonc (~mcdonc@ip72-209-215-142.dc.dc.cox.net) has joined #haskell
2013-03-25 01:15:01	<--	meyersh_ (~meyersh@198.102.147.253) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:01	<--	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:03	<--	yan_ (~yan@64.22.109.95) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:07	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:15:08	-->	wto_ (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-25 01:15:10	-->	othiym23 (ogd@aglaia.aoaioxxysz.net) has joined #haskell
2013-03-25 01:15:10	-->	BMeph (BMeph@ip68-7-223-219.sd.sd.cox.net) has joined #haskell
2013-03-25 01:15:12	-->	machisuji (~machisuji@78.46.83.103) has joined #haskell
2013-03-25 01:15:12	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (Ping timeout: 272 seconds)
2013-03-25 01:15:12	<--	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has quit (Ping timeout: 272 seconds)
2013-03-25 01:15:12	<--	lulf (~lulf@li307-13.members.linode.com) has quit (Ping timeout: 272 seconds)
2013-03-25 01:15:12	<--	tessier (~treed@kernel-panic/copilotco) has quit (Ping timeout: 272 seconds)
2013-03-25 01:15:12	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (Ping timeout: 272 seconds)
2013-03-25 01:15:23	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Client Quit)
2013-03-25 01:15:31	<--	flori (flori@irc.ping.de) has quit (Ping timeout: 264 seconds)
2013-03-25 01:15:32	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-03-25 01:15:34	-->	`micro (~micro@ec2-50-16-189-142.compute-1.amazonaws.com) has joined #haskell
2013-03-25 01:15:39	-->	meyersh (~meyersh@198.102.147.253) has joined #haskell
2013-03-25 01:15:41	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-25 01:15:41	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 245 seconds)
2013-03-25 01:15:42	-->	puzza007 (uid127@gateway/web/irccloud.com/x-hjjetnpdwswdxdqs) has joined #haskell
2013-03-25 01:15:46	-->	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-03-25 01:15:52	<--	quchen (~david@p54AA3215.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-03-25 01:15:54	-->	yan_ (~yan@64.22.109.95) has joined #haskell
2013-03-25 01:15:57	-->	sambio_ (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:15:58	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Ping timeout: 256 seconds)
2013-03-25 01:15:58	--	`micro is now known as Guest11523
2013-03-25 01:15:58	-->	jacobw (~jacobw@unaffiliated/jacobw) has joined #haskell
2013-03-25 01:16:08	-->	bergey` (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-03-25 01:16:18	-->	flori (flori@irc.ping.de) has joined #haskell
2013-03-25 01:16:20	-->	mjr841 (~mjr84@jasper.ruschserver.com) has joined #haskell
2013-03-25 01:16:22	<--	sambio_ (~sambio@190.57.227.109) has quit (Read error: Connection reset by peer)
2013-03-25 01:16:29	-->	tessier (~treed@216.105.40.125) has joined #haskell
2013-03-25 01:16:29	<--	tessier (~treed@216.105.40.125) has quit (Changing host)
2013-03-25 01:16:29	-->	tessier (~treed@kernel-panic/copilotco) has joined #haskell
2013-03-25 01:16:29	-->	honkfestival (~honkfesti@198-84-183-94.cpe.teksavvy.com) has joined #haskell
2013-03-25 01:16:31	-->	ahihi (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-03-25 01:16:31	-->	lulf (~lulf@li307-13.members.linode.com) has joined #haskell
2013-03-25 01:16:32	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-25 01:16:45	-->	Canar (~bass@benjamincook.ca) has joined #haskell
2013-03-25 01:17:05	-->	sambio_ (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:17:14	--	Axioma is now known as yarjar
2013-03-25 01:17:25	--	puzza007 is now known as puzza007_
2013-03-25 01:17:58	-->	mrd_ (~md@50.57.107.153) has joined #haskell
2013-03-25 01:18:10	-->	sw2wolf (~czsq888@171.212.254.57) has joined #haskell
2013-03-25 01:18:48	<--	davidf18 (~textual@ip-64-134-101-52.public.wayport.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 01:18:51	<--	hive-mind (pranq@unaffiliated/contempt) has quit (Ping timeout: 256 seconds)
2013-03-25 01:19:04	-->	WhereIsMySpoon_ (~james@teamfrag.net) has joined #haskell
2013-03-25 01:19:33	 *	hackagebot z3 0.3.0 - Bindings for the Z3 Theorem Prover  http://hackage.haskell.org/package/z3-0.3.0 (IagoAbal)
2013-03-25 01:19:48	-->	hive-mind (pranq@unaffiliated/contempt) has joined #haskell
2013-03-25 01:20:13	-->	natte (~natte@69.55.61.125) has joined #haskell
2013-03-25 01:20:17	<--	labo_ (~labo@84.200.73.251) has quit (Ping timeout: 256 seconds)
2013-03-25 01:20:29	-->	colah_ (~colah@76-10-173-74.dsl.teksavvy.com) has joined #haskell
2013-03-25 01:20:36	<--	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:20:47	-->	sh|tmp (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-25 01:20:47	<--	sh (~sh@89.101.222.213) has quit (Disconnected by services)
2013-03-25 01:20:48	--	sh|tmp is now known as sh
2013-03-25 01:20:50	-->	zeiris_ (~amtal@198.144.180.18) has joined #haskell
2013-03-25 01:20:52	<--	marienz (~marienz@freenode/staff/marienz) has quit (Ping timeout: 600 seconds)
2013-03-25 01:20:58	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Quit: Lämnar)
2013-03-25 01:20:59	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-03-25 01:21:15	<--	meyersh (~meyersh@198.102.147.253) has quit (Ping timeout: 256 seconds)
2013-03-25 01:21:17	<--	akahn (uid2243@gateway/web/irccloud.com/x-mvqzgirvopaqizvm) has quit (Ping timeout: 245 seconds)
2013-03-25 01:21:26	-->	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has joined #haskell
2013-03-25 01:21:28	<--	zeiris (~amtal@198.144.180.18) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	BMeph_ (BMeph@ip68-7-223-219.sd.sd.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	xrl_ (uid1091@gateway/web/irccloud.com/x-cyedmnxnqkcltrio) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	mrd (~md@debian/developer/mrd) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	<--	bergey (~user@ip-66-80-90-109.iad.megapath.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:28	-->	Amadiro (~Amadiro@2001:700:100:570::211) has joined #haskell
2013-03-25 01:21:29	<--	kevinqcs (~turing@183.209.42.37) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:29	<--	WhereIsMySpoon (~james@unaffiliated/whereismyspoon) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:29	<--	colah (~colah@76-10-173-74.dsl.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:29	<--	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:29	-->	labo (~labo@84.200.73.251) has joined #haskell
2013-03-25 01:21:31	<--	pepijndevos (~pepijndev@ec2-50-17-110-149.compute-1.amazonaws.com) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:31	<--	yezariaely (arj1@2a01:130:2000:121:230:48ff:fe64:340a) has quit (Ping timeout: 264 seconds)
2013-03-25 01:21:46	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-25 01:21:52	-->	petantik (~oz@unaffiliated/ceezer) has joined #haskell
2013-03-25 01:21:57	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Remote host closed the connection)
2013-03-25 01:21:59	-->	meyersh (~meyersh@198.102.147.253) has joined #haskell
2013-03-25 01:22:05	-->	yezariaely (arj1@2a01:130:2000:121:230:48ff:fe64:340a) has joined #haskell
2013-03-25 01:22:24	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-25 01:22:27	-->	pcapriot` (~paolo@5.69.140.1) has joined #haskell
2013-03-25 01:22:30	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-25 01:22:37	-->	davidf18 (~textual@ip-64-134-101-52.public.wayport.net) has joined #haskell
2013-03-25 01:22:43	<--	Estrellas (~Stars@static.211.55.63.178.clients.your-server.de) has quit (Ping timeout: 264 seconds)
2013-03-25 01:22:56	<--	jaroslaw (~a@tux3.usask.ca) has quit (*.net *.split)
2013-03-25 01:22:57	<--	mlh_ (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has quit (*.net *.split)
2013-03-25 01:22:57	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (*.net *.split)
2013-03-25 01:22:57	<--	marchdown (~marchdown@37-146-205-166.broadband.corbina.ru) has quit (*.net *.split)
2013-03-25 01:22:57	<--	dannybtran (~digisyndi@c-69-137-89-3.hsd1.tn.comcast.net) has quit (*.net *.split)
2013-03-25 01:22:57	<--	kith (~kith@unaffiliated/kith) has quit (*.net *.split)
2013-03-25 01:22:57	<--	anders^^ (~anders@h-37-119.a336.priv.bahnhof.se) has quit (*.net *.split)
2013-03-25 01:22:57	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (*.net *.split)
2013-03-25 01:22:58	<--	wunki (~wunki@www.wunki.org) has quit (Ping timeout: 245 seconds)
2013-03-25 01:23:00	<--	flux (flux@2001:708:310:3430:b449:c49c:480:3df3) has quit (Read error: Connection reset by peer)
2013-03-25 01:23:00	-->	eikke_ (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-25 01:23:05	-->	anders^^ (~anders@h-37-119.a336.priv.bahnhof.se) has joined #haskell
2013-03-25 01:23:07	-->	flux (flux@2001:708:310:3430:b449:c49c:480:3df3) has joined #haskell
2013-03-25 01:23:11	<--	pcapriotti (~paolo@5.69.140.1) has quit (Disconnected by services)
2013-03-25 01:23:14	-->	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-25 01:23:15	-->	robbe-_ (~robbe@missioncontrol.be) has joined #haskell
2013-03-25 01:23:15	-->	kith (~kith@unaffiliated/kith) has joined #haskell
2013-03-25 01:23:16	-->	nilg`` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has joined #haskell
2013-03-25 01:23:17	-->	Estrellas (~Stars@static.211.55.63.178.clients.your-server.de) has joined #haskell
2013-03-25 01:23:18	--	pcapriot` is now known as pcapriotti
2013-03-25 01:23:18	-->	int-e (~noone@static.88-198-179-137.clients.your-server.de) has joined #haskell
2013-03-25 01:23:19	-->	pepijn_away (~pepijndev@ec2-50-17-110-149.compute-1.amazonaws.com) has joined #haskell
2013-03-25 01:23:20	-->	marchdown (~marchdown@37-146-205-166.broadband.corbina.ru) has joined #haskell
2013-03-25 01:23:25	--	pepijn_away is now known as pepijndevos
2013-03-25 01:23:35	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:23:46	-->	JoeHazzers (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 01:23:46	-->	pikhq (~pikhq@174-24-52-194.clsp.qwest.net) has joined #haskell
2013-03-25 01:23:46	<--	SegFaultAX (SegFaultAX@2600:3c01::f03c:91ff:fedf:9620) has quit (Ping timeout: 245 seconds)
2013-03-25 01:23:55	-->	wyfrn__ (~wyfrn@p5B2BDE0E.dip.t-dialin.net) has joined #haskell
2013-03-25 01:23:56	<--	robbe- (~robbe@missioncontrol.be) has quit (Remote host closed the connection)
2013-03-25 01:23:56	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:23:56	<--	joneshf (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:23:56	<--	guymann (~c@unaffiliated/guymann) has quit (Ping timeout: 264 seconds)
2013-03-25 01:23:56	--	robbe-_ is now known as robbe-
2013-03-25 01:24:04	-->	QinGW (~yaaic@115.171.168.84) has joined #haskell
2013-03-25 01:24:09	-->	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has joined #haskell
2013-03-25 01:24:14	<--	u_quark1 (~u_quark@athedsl-350188.home.otenet.gr) has quit (Ping timeout: 256 seconds)
2013-03-25 01:24:15	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Ping timeout: 240 seconds)
2013-03-25 01:24:16	<--	vhz (~tab@nucleus.snarc.org) has quit (*.net *.split)
2013-03-25 01:24:16	<--	hackedy (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-03-25 01:24:16	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (*.net *.split)
2013-03-25 01:24:16	<--	noj_ (jon@orm.abc.se) has quit (*.net *.split)
2013-03-25 01:24:16	<--	Jonte (~jonte@li465-55.members.linode.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	_br_- (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (*.net *.split)
2013-03-25 01:24:16	<--	Tehnix_ (~Tehnix@192.81.221.23) has quit (*.net *.split)
2013-03-25 01:24:16	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (*.net *.split)
2013-03-25 01:24:16	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (*.net *.split)
2013-03-25 01:24:16	<--	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	jercos_ (jercos@babbage.subluminal.net) has quit (*.net *.split)
2013-03-25 01:24:16	<--	brandonw_ (~brandonw@68-118-241-217.dhcp.oxfr.ma.charter.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	AfC1 (~andrew@gateway.syd.operationaldynamics.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	merijn_ (~merijn@inconsistent.nl) has quit (*.net *.split)
2013-03-25 01:24:16	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	saurik_ (~saurik@carrier.saurik.com) has quit (*.net *.split)
2013-03-25 01:24:16	<--	tsinnema_ (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (*.net *.split)
2013-03-25 01:24:16	<--	raek_ (~raek@h-17-164.a328.priv.bahnhof.se) has quit (*.net *.split)
2013-03-25 01:24:16	<--	realnot_ (~realnot@host150-48-dynamic.47-79-r.retail.telecomitalia.it) has quit (*.net *.split)
2013-03-25 01:24:16	<--	smarter__ (~smarter@ubuntu/member/smarter) has quit (*.net *.split)
2013-03-25 01:24:16	<--	Igloo_ (~igloo@210.99.2.81.in-addr.arpa) has quit (*.net *.split)
2013-03-25 01:24:16	<--	int-e_ (~noone@static.88-198-179-137.clients.your-server.de) has quit (*.net *.split)
2013-03-25 01:24:16	<--	fireglow (fireglow@unaffiliated/fireglow) has quit (*.net *.split)
2013-03-25 01:24:16	<--	sambio (~sambio@190.57.227.109) has quit (*.net *.split)
2013-03-25 01:24:19	<--	Sorella (~queen@oftn/member/Sorella) has quit (*.net *.split)
2013-03-25 01:24:19	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (*.net *.split)
2013-03-25 01:24:19	<--	b52 (~b52@unaffiliated/b52) has quit (*.net *.split)
2013-03-25 01:24:19	<--	alang (~alang@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	pettter (pettter@stalin.acc.umu.se) has quit (*.net *.split)
2013-03-25 01:24:19	<--	petekaz (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (*.net *.split)
2013-03-25 01:24:19	<--	myme (~myme@djent.myme.no) has quit (*.net *.split)
2013-03-25 01:24:19	<--	alios (~alios@alios.alios.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	nilg` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has quit (*.net *.split)
2013-03-25 01:24:19	<--	Eliel (~jojkaart@dyn79-415.yok.fi) has quit (*.net *.split)
2013-03-25 01:24:19	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	Hermit (~hermit@unaffiliated/grpala) has quit (*.net *.split)
2013-03-25 01:24:19	<--	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	kylcarte (~kcarter@pdx.galois.com) has quit (*.net *.split)
2013-03-25 01:24:19	<--	Kuba (~jakub@unaffiliated/kuba) has quit (*.net *.split)
2013-03-25 01:24:19	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (*.net *.split)
2013-03-25 01:24:19	<--	kaol (kaol@piperka.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	hpc (~juzz@ip98-169-33-6.dc.dc.cox.net) has quit (*.net *.split)
2013-03-25 01:24:19	<--	pfoetchen (~pfoetchen@winc043.informatik.uni-wuerzburg.de) has quit (*.net *.split)
2013-03-25 01:24:19	<--	jliikka (jliikka@xob.kapsi.fi) has quit (*.net *.split)
2013-03-25 01:24:19	<--	certainty (~david@www1.d-coded.de) has quit (*.net *.split)
2013-03-25 01:24:19	<--	joachifm (~joachifm@ulrik.uio.no) has quit (*.net *.split)
2013-03-25 01:24:19	<--	yam (yam@liberty.xenbox.fr) has quit (*.net *.split)
2013-03-25 01:24:19	<--	levitation_ (~levitatio@tlngw.webmedia.ee) has quit (*.net *.split)
2013-03-25 01:24:19	<--	alcz (~alc@snf-2833.vm.okeanos.grnet.gr) has quit (*.net *.split)
2013-03-25 01:24:19	<--	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has quit (*.net *.split)
2013-03-25 01:24:37	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-03-25 01:24:38	<--	pikhq_ (~pikhq@75-163-212-190.clsp.qwest.net) has quit (Ping timeout: 245 seconds)
2013-03-25 01:24:46	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-03-25 01:24:55	-->	joneshf (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has joined #haskell
2013-03-25 01:24:57	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-03-25 01:24:57	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-25 01:25:11	-->	guymann (~c@unaffiliated/guymann) has joined #haskell
2013-03-25 01:25:15	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 256 seconds)
2013-03-25 01:25:15	<--	zxq9 (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has quit (Ping timeout: 256 seconds)
2013-03-25 01:25:33	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 01:25:33	<--	gspr (~gspr@2a00:1a28:1251:178:73:210:141:0) has quit (Ping timeout: 245 seconds)
2013-03-25 01:26:00	-->	wunki (~wunki@2a01:7c8:aaaa:11d::1) has joined #haskell
2013-03-25 01:26:11	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 01:26:22	<--	Thomyho4 (~thomyho@mnhm-4d0129c3.pool.mediaWays.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:26:32	-->	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has joined #haskell
2013-03-25 01:26:35	<--	wyfrn_ (~wyfrn@p5B2BDD0B.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-25 01:26:36	-->	_zxq9_ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has joined #haskell
2013-03-25 01:26:41	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-25 01:26:47	-->	raek (~raek@h-17-164.a328.priv.bahnhof.se) has joined #haskell
2013-03-25 01:26:48	-->	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 01:26:53	<--	gcmalloc (gcmalloc@hackerspace.fixme.ch) has quit (Read error: Operation timed out)
2013-03-25 01:26:59	-->	AntiSpamMeta2 (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-03-25 01:26:59	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Killed (asimov.freenode.net (Nickname regained by services)))
2013-03-25 01:26:59	--	AntiSpamMeta2 is now known as AntiSpamMeta
2013-03-25 01:27:06	-->	SegFaultAX (SegFaultAX@2600:3c01::f03c:91ff:fedf:9620) has joined #haskell
2013-03-25 01:27:08	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:27:18	-->	gcmalloc (gcmalloc@hackerspace.fixme.ch) has joined #haskell
2013-03-25 01:27:24	-->	alang (~alang@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-03-25 01:27:39	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:27:44	-->	DT`` (~ea@95.239.42.179) has joined #haskell
2013-03-25 01:27:47	<--	sambio (~sambio@190.57.227.109) has quit (Excess Flood)
2013-03-25 01:27:52	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:28:02	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:28:03	<--	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-ejdyrxvmwjbbsyxf) has quit (Ping timeout: 258 seconds)
2013-03-25 01:28:07	<--	integral (~bsmith@p3m/member/integral) has quit (Ping timeout: 264 seconds)
2013-03-25 01:28:10	<--	sambio (~sambio@190.57.227.109) has quit (Excess Flood)
2013-03-25 01:28:19	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Read error: Connection reset by peer)
2013-03-25 01:28:22	-->	Rickasaur (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-25 01:28:26	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:28:32	-->	wump (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has joined #haskell
2013-03-25 01:28:39	<--	Bwild (~irc@netblock-75-79-22-130.dslextreme.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:28:39	<--	ivan` (~ivan@unaffiliated/ivan/x-000001) has quit (Ping timeout: 258 seconds)
2013-03-25 01:28:42	-->	jaroslaw (~a@tux3.usask.ca) has joined #haskell
2013-03-25 01:28:45	<--	Amadiro (~Amadiro@2001:700:100:570::211) has quit (Ping timeout: 264 seconds)
2013-03-25 01:28:48	<--	jaroslaw (~a@tux3.usask.ca) has quit (Client Quit)
2013-03-25 01:29:02	<--	Guest11523 (~micro@ec2-50-16-189-142.compute-1.amazonaws.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:02	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:02	<--	yumike (yumike@gateway/shell/ircrelay.com/x-tmxortcywijvuwwx) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:03	-->	tensorpuddin (~tensorpud@99.148.193.57) has joined #haskell
2013-03-25 01:29:03	-->	brandonw (~brandonw@68-118-241-217.dhcp.oxfr.ma.charter.com) has joined #haskell
2013-03-25 01:29:08	-->	machisuji_ (~machisuji@78.46.83.103) has joined #haskell
2013-03-25 01:29:09	-->	integral (~bsmith@109.74.198.73) has joined #haskell
2013-03-25 01:29:09	<--	integral (~bsmith@109.74.198.73) has quit (Changing host)
2013-03-25 01:29:09	-->	integral (~bsmith@p3m/member/integral) has joined #haskell
2013-03-25 01:29:11	-->	Plex- (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has joined #haskell
2013-03-25 01:29:13	-->	petekaz (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has joined #haskell
2013-03-25 01:29:17	<--	sambio (~sambio@190.57.227.109) has quit (Excess Flood)
2013-03-25 01:29:23	-->	fergusnoble (fergusnobl@repl.esden.net) has joined #haskell
2013-03-25 01:29:25	<--	electrogeek (electrogee@unaffiliated/electrogeek) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:26	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:35	<--	hughfdja1kson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 255 seconds)
2013-03-25 01:29:38	-->	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has joined #haskell
2013-03-25 01:29:40	-->	noj (~jon@orm.abc.se) has joined #haskell
2013-03-25 01:29:47	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-03-25 01:29:48	<--	flori (flori@irc.ping.de) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:48	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:48	<--	lokydor (lecornec20@tom.iiens.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:29:56	-->	realnot (~realnot@host150-48-dynamic.47-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-25 01:29:56	<--	realnot (~realnot@host150-48-dynamic.47-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-25 01:29:56	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-25 01:29:56	-->	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-25 01:29:57	-->	ivan`_ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-03-25 01:29:59	-->	`micro_ (~micro@ec2-50-16-189-142.compute-1.amazonaws.com) has joined #haskell
2013-03-25 01:30:02	-->	kevinqcs (~turing@183.209.42.37) has joined #haskell
2013-03-25 01:30:02	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-25 01:30:03	-->	Eliel (~jojkaart@dyn79-415.yok.fi) has joined #haskell
2013-03-25 01:30:03	<--	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-25 01:30:07	-->	Tehnix (~Tehnix@192.81.221.23) has joined #haskell
2013-03-25 01:30:07	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 01:30:09	-->	jliikka (jliikka@xob.kapsi.fi) has joined #haskell
2013-03-25 01:30:09	-->	saurik (~saurik@74.208.44.105) has joined #haskell
2013-03-25 01:30:10	<--	kevinqcs (~turing@183.209.42.37) has quit (Max SendQ exceeded)
2013-03-25 01:30:11	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Ping timeout: 258 seconds)
2013-03-25 01:30:11	<--	amatsu\idle (~amatsu@125.63.54.161) has quit (Ping timeout: 258 seconds)
2013-03-25 01:30:12	-->	Bwild (~irc@netblock-75-79-22-130.dslextreme.com) has joined #haskell
2013-03-25 01:30:14	-->	Jonte (~jonte@li465-55.members.linode.com) has joined #haskell
2013-03-25 01:30:16	<--	_zxq9_ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has quit (Max SendQ exceeded)
2013-03-25 01:30:18	-->	vhz (~tab@nucleus.snarc.org) has joined #haskell
2013-03-25 01:30:21	-->	ndngvr` (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 01:30:22	-->	tippenei1 (~bo@199.195.252.184) has joined #haskell
2013-03-25 01:30:23	-->	lokydor (lecornec20@tom.iiens.net) has joined #haskell
2013-03-25 01:30:24	--	`micro_ is now known as Guest36494
2013-03-25 01:30:26	-->	Igloo (~igloo@210.99.2.81.in-addr.arpa) has joined #haskell
2013-03-25 01:30:27	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:30:28	-->	cristo (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:30:34	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 258 seconds)
2013-03-25 01:30:34	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 258 seconds)
2013-03-25 01:30:35	-->	merijn (~merijn@83.163.46.169) has joined #haskell
2013-03-25 01:30:37	-->	certainty (~david@www1.d-coded.de) has joined #haskell
2013-03-25 01:30:39	-->	flx_ (flux@2001:708:310:3430:b449:c49c:480:3df3) has joined #haskell
2013-03-25 01:30:44	<--	jlewis (~jlewis@unaffiliated/jordanlewis) has quit (Remote host closed the connection)
2013-03-25 01:30:45	--	ndngvr` is now known as 17WABC1UP
2013-03-25 01:30:51	-->	_zxq9_ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has joined #haskell
2013-03-25 01:30:56	-->	elnadi (~elnadi@156.34.77.11) has joined #haskell
2013-03-25 01:30:57	<--	notdan_ (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has quit (Ping timeout: 258 seconds)
2013-03-25 01:30:58	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-25 01:31:04	-->	mrshoe_ (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-03-25 01:31:12	<--	cristo (~sambio@190.57.227.109) has quit (Client Quit)
2013-03-25 01:31:20	<--	jix (~jix@jixco.de) has quit (Ping timeout: 258 seconds)
2013-03-25 01:31:20	<--	rsimoes (~rsimoes@107-194-78-135.lightspeed.austtx.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:31:20	<--	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has quit (Ping timeout: 258 seconds)
2013-03-25 01:31:22	-->	jercos (jercos@babbage.subluminal.net) has joined #haskell
2013-03-25 01:31:24	<--	Rickasaur (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:31:28	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-03-25 01:31:32	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2013-03-25 01:31:33	-->	Rotaerk (~BlahBlahB@174.54.255.117) has joined #haskell
2013-03-25 01:31:33	-->	mizu_no__ (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:31:33	-->	gspr (~gspr@2a00:1a28:1251:178:73:210:141:0) has joined #haskell
2013-03-25 01:31:41	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:31:41	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-25 01:31:44	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 01:31:46	<--	Nahra (~user@unaffiliated/nahra) has quit (Ping timeout: 258 seconds)
2013-03-25 01:31:46	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:31:46	-->	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has joined #haskell
2013-03-25 01:31:46	<--	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has quit (Changing host)
2013-03-25 01:31:46	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-03-25 01:31:53	-->	nilg``` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has joined #haskell
2013-03-25 01:31:54	-->	joachifm (~joachifm@ulrik.uio.no) has joined #haskell
2013-03-25 01:31:59	-->	jix (~jix@jixco.de) has joined #haskell
2013-03-25 01:32:08	-->	kevinqcs (~turing@183.209.42.37) has joined #haskell
2013-03-25 01:32:08	<--	IAmNotARobot (~IAmNotARo@unaffiliated/iamnotarobot) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:08	<--	noplamodo (~noplamodo@unaffiliated/noplamodo) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:08	<--	kmicu (~kmicu@ec2-54-246-30-17.eu-west-1.compute.amazonaws.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:14	<--	setmeaway2 (setmeaway3@118.45.149.119) has quit (Ping timeout: 256 seconds)
2013-03-25 01:32:17	-->	amatsu\idle (~amatsu@125.63.54.161) has joined #haskell
2013-03-25 01:32:28	--	amatsu\idle is now known as amatsu
2013-03-25 01:32:29	<--	flux (flux@2001:708:310:3430:b449:c49c:480:3df3) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:29	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:29	<--	alshain (~alshain@124-171.1-85.cust.bluewin.ch) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:32	<--	joneshf (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has quit (Ping timeout: 245 seconds)
2013-03-25 01:32:32	<--	UziMonkey_ (uid184@gateway/web/irccloud.com/x-odqleroromccxvdv) has quit (Ping timeout: 245 seconds)
2013-03-25 01:32:38	-->	flori (flori@irc.ping.de) has joined #haskell
2013-03-25 01:32:39	--	flx_ is now known as flux
2013-03-25 01:32:40	<--	klugez (kluge@xob.kapsi.fi) has quit (Remote host closed the connection)
2013-03-25 01:32:47	-->	klugez (kluge@xob.kapsi.fi) has joined #haskell
2013-03-25 01:32:53	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:53	<--	wei2912 (wei2912@gateway/shell/elitebnc/x-ypeazbjmcqftsytw) has quit (Ping timeout: 258 seconds)
2013-03-25 01:32:56	-->	verrens_ (~verrens@93.95.103.188) has joined #haskell
2013-03-25 01:33:00	-->	noplamodo (~noplamodo@192.81.221.200) has joined #haskell
2013-03-25 01:33:03	<--	noplamodo (~noplamodo@192.81.221.200) has quit (Changing host)
2013-03-25 01:33:04	-->	noplamodo (~noplamodo@unaffiliated/noplamodo) has joined #haskell
2013-03-25 01:33:28	-->	alshain (~alshain@124-171.1-85.cust.bluewin.ch) has joined #haskell
2013-03-25 01:33:28	<--	AlStanforth (~AlStanfor@modemcable081.170-23-96.mc.videotron.ca) has quit (Remote host closed the connection)
2013-03-25 01:33:32	<--	QinGW (~yaaic@115.171.168.84) has quit (Ping timeout: 256 seconds)
2013-03-25 01:33:33	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-25 01:33:39	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 252 seconds)
2013-03-25 01:33:41	-->	DigitalK1wi (~kiwi@ip68-13-179-79.om.om.cox.net) has joined #haskell
2013-03-25 01:33:45	-->	wei2912 (wei2912@gateway/shell/elitebnc/x-ufmkvwvhhlmviark) has joined #haskell
2013-03-25 01:33:50	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 01:33:50	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:33:50	<--	majoh (~Sponge_Bo@antiklimax.se) has quit (Ping timeout: 258 seconds)
2013-03-25 01:33:53	-->	pharaun_ (~pharaunfr@static.88-198-62-245.clients.your-server.de) has joined #haskell
2013-03-25 01:34:03	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-25 01:34:09	-->	edenc_ (~edenc@ash.insolide.net) has joined #haskell
2013-03-25 01:34:11	-->	TravisD_ (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-25 01:34:11	-->	dreixel___ (~dreixel@anon-168-179.vpn.ipredator.se) has joined #haskell
2013-03-25 01:34:14	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Read error: Operation timed out)
2013-03-25 01:34:14	<--	integral (~bsmith@p3m/member/integral) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:14	<--	1JTAAFA3H (~eviltwin@178.33.68.198) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:14	<--	Enigmagic (~enigmo@unaffiliated/enigmagic) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:14	<--	DigitalKiwi (~kiwi@ip68-13-179-79.om.om.cox.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:14	<--	lpvb (~lpvb@199.188.72.31) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:14	parcs	hello
2013-03-25 01:34:15	<--	lulf (~lulf@li307-13.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:15	<--	sunfun (~sunfun@2.237.168.123) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:15	<--	zwiebel_ (~chris@42-2-85-100.static.netvigator.com) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:16	-->	integral_ (~bsmith@reson.cabbage.org.uk) has joined #haskell
2013-03-25 01:34:16	<--	integral_ (~bsmith@reson.cabbage.org.uk) has quit (Changing host)
2013-03-25 01:34:16	-->	integral_ (~bsmith@p3m/member/integral) has joined #haskell
2013-03-25 01:34:22	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-03-25 01:34:23	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-25 01:34:25	-->	lulf (~lulf@li307-13.members.linode.com) has joined #haskell
2013-03-25 01:34:26	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:34:30	-->	setmeaway2 (setmeaway3@118.45.149.119) has joined #haskell
2013-03-25 01:34:32	-->	ocharles- (~ocharles@li452-125.members.linode.com) has joined #haskell
2013-03-25 01:34:35	-->	majoh (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-03-25 01:34:38	-->	zwiebel (~chris@42-2-85-100.static.netvigator.com) has joined #haskell
2013-03-25 01:34:40	<--	noj (~jon@orm.abc.se) has quit (Ping timeout: 256 seconds)
2013-03-25 01:34:42	<--	nilg`` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has quit (*.net *.split)
2013-03-25 01:34:42	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (*.net *.split)
2013-03-25 01:34:42	<--	petantik (~oz@unaffiliated/ceezer) has quit (*.net *.split)
2013-03-25 01:34:42	<--	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has quit (*.net *.split)
2013-03-25 01:34:42	<--	natte (~natte@69.55.61.125) has quit (*.net *.split)
2013-03-25 01:34:42	<--	sambio_ (~sambio@190.57.227.109) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Canar (~bass@benjamincook.ca) has quit (*.net *.split)
2013-03-25 01:34:43	<--	mjr841 (~mjr84@jasper.ruschserver.com) has quit (*.net *.split)
2013-03-25 01:34:43	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	machisuji (~machisuji@78.46.83.103) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	munro (~ryan@node-2.0x0539.org) has quit (*.net *.split)
2013-03-25 01:34:43	<--	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (*.net *.split)
2013-03-25 01:34:43	<--	DT` (~ea@95.239.42.179) has quit (*.net *.split)
2013-03-25 01:34:43	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	srcerer (~chatzilla@dns2.klsairexpress.com) has quit (*.net *.split)
2013-03-25 01:34:43	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	linduxed (~linduxed@194-14-0-85.serioustubes.org) has quit (*.net *.split)
2013-03-25 01:34:43	<--	staafl (~staafl@95-42-19-2.btc-net.bg) has quit (*.net *.split)
2013-03-25 01:34:43	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (*.net *.split)
2013-03-25 01:34:43	<--	scottj (~scott@206.212.250.58) has quit (*.net *.split)
2013-03-25 01:34:43	<--	tippenein (~bo@199.195.252.184) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Internet13 (~chatzilla@92.233.64.26) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Plex_ (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Athas_ (~athas@sigkill.dk) has quit (*.net *.split)
2013-03-25 01:34:43	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (*.net *.split)
2013-03-25 01:34:43	<--	jonke (~quassel@h87-96-186-149.dynamic.se.alltele.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	freiksenet (~freiksene@freiksenet.com) has quit (*.net *.split)
2013-03-25 01:34:43	<--	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-03-25 01:34:43	<--	helgikrs (~helgikrs@89.17.128.56) has quit (*.net *.split)
2013-03-25 01:34:43	<--	simpson (~simpsoco@osuosl/staff/mostawesomedude) has quit (*.net *.split)
2013-03-25 01:34:43	<--	wumpus (~quassel@pdpc/supporter/professional/wumpus) has quit (*.net *.split)
2013-03-25 01:34:43	<--	pharaun (~pharaunfr@static.88-198-62-245.clients.your-server.de) has quit (*.net *.split)
2013-03-25 01:34:43	<--	Draconx (~draconx@fsf/member/Draconx) has quit (*.net *.split)
2013-03-25 01:34:43	<--	tensorpudding (~tensorpud@99.148.193.57) has quit (*.net *.split)
2013-03-25 01:34:43	<--	NougatRillettes (~NougatRil@static.118.236.9.5.clients.your-server.de) has quit (*.net *.split)
2013-03-25 01:34:46	<--	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has quit (*.net *.split)
2013-03-25 01:34:46	<--	Vorpal (~Vorpal@unaffiliated/vorpal) has quit (*.net *.split)
2013-03-25 01:34:46	<--	verrens (~verrens@93.95.103.188) has quit (*.net *.split)
2013-03-25 01:34:46	<--	ocharles (~ocharles@musicbrainz/user/ocharles) has quit (*.net *.split)
2013-03-25 01:34:46	<--	lambdabot (~lambdabot@74.207.243.105) has quit (*.net *.split)
2013-03-25 01:34:46	<--	hackagebot (~rss2irc@173.255.219.222) has quit (*.net *.split)
2013-03-25 01:34:46	<--	alejandrogomez (~dialelo@31.170.110.58) has quit (*.net *.split)
2013-03-25 01:34:46	<--	edenc (~edenc@173.255.226.193) has quit (*.net *.split)
2013-03-25 01:34:46	<--	jamwt (~jamwt@67.228.22.122) has quit (*.net *.split)
2013-03-25 01:34:46	--	verrens_ is now known as verrens
2013-03-25 01:34:46	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-03-25 01:34:46	--	tensorpuddin is now known as tensorpudding
2013-03-25 01:34:46	--	ocharles- is now known as ocharles
2013-03-25 01:34:47	-->	noj (jon@orm.abc.se) has joined #haskell
2013-03-25 01:34:59	-->	pfoetchen (~pfoetchen@winc043.informatik.uni-wuerzburg.de) has joined #haskell
2013-03-25 01:35:01	<--	Jonte (~jonte@li465-55.members.linode.com) has quit (Ping timeout: 256 seconds)
2013-03-25 01:35:01	<--	xinming (~xinming@125.82.204.239) has quit (Ping timeout: 256 seconds)
2013-03-25 01:35:12	-->	Vorpal_ (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-03-25 01:35:12	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-25 01:35:27	-->	Jonte (~jonte@li465-55.members.linode.com) has joined #haskell
2013-03-25 01:35:35	<--	dkasak (~dkasak@dh207-73-206.xnet.hr) has quit (Ping timeout: 256 seconds)
2013-03-25 01:35:35	<--	def-lkb (~def@lakaban.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:35:35	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 256 seconds)
2013-03-25 01:35:38	<--	certainty (~david@www1.d-coded.de) has quit (Remote host closed the connection)
2013-03-25 01:35:40	<--	Vorpal_ (~Vorpal@unaffiliated/vorpal) has quit (Excess Flood)
2013-03-25 01:35:46	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 01:35:48	-->	alios (~alios@alios.alios.net) has joined #haskell
2013-03-25 01:35:54	<--	kaoskorobase (~sk@84.78.195.71) has quit (Read error: Connection reset by peer)
2013-03-25 01:36:04	<--	mizu_no__ (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 01:36:04	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Ping timeout: 245 seconds)
2013-03-25 01:36:04	-->	fergusnoble_ (fergusnobl@repl.esden.net) has joined #haskell
2013-03-25 01:36:08	<--	ivan`_ (~ivan@unaffiliated/ivan/x-000001) has quit (Ping timeout: 256 seconds)
2013-03-25 01:36:09	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-03-25 01:36:10	-->	chr1s (chris@62.212.66.37) has joined #haskell
2013-03-25 01:36:14	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-25 01:36:17	-->	Vorpal (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-03-25 01:36:21	-->	def-lkb (~def@lakaban.net) has joined #haskell
2013-03-25 01:36:23	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-03-25 01:36:24	--	fergusnoble_ is now known as fergusnoble
2013-03-25 01:36:34	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-03-25 01:36:34	<--	numeral (~numeral@198.23.228.15) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:34	-->	ivan` (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-03-25 01:36:40	-->	jlewis_ (~jlewis@mookmo.net) has joined #haskell
2013-03-25 01:36:40	-->	xinming (~xinming@125.87.86.194) has joined #haskell
2013-03-25 01:36:41	-->	kmicu (~kmicu@ec2-54-246-30-17.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-03-25 01:36:42	<--	pettter (pettter@stalin.acc.umu.se) has quit (Ping timeout: 256 seconds)
2013-03-25 01:36:43	<--	dreixel__ (~dreixel@anon-168-179.vpn.ipredator.se) has quit (Ping timeout: 256 seconds)
2013-03-25 01:36:43	<--	jlewis (~jlewis@unaffiliated/jordanlewis) has quit (Ping timeout: 264 seconds)
2013-03-25 01:36:44	<--	Heffalump (~ganesh@urchin.earth.li) has quit (Ping timeout: 272 seconds)
2013-03-25 01:36:44	<--	hiroyuki2 (~hiroyuki@49.212.145.173) has quit (Ping timeout: 272 seconds)
2013-03-25 01:36:45	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Write error: Broken pipe)
2013-03-25 01:36:48	-->	sunfun (~sunfun@2.237.168.123) has joined #haskell
2013-03-25 01:36:52	<--	chr1s_ (chris@punt.slashpunt.org) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:52	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:52	<--	parcs (~patrick@24.185.14.147) has quit (Quit: WeeChat 0.3.8)
2013-03-25 01:36:53	<--	niloc132 (~colin@75-163-26-190.dlth.qwest.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:53	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-25 01:36:53	<--	apaku (~apaku@hmbg-4d0655ae.pool.mediaWays.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:53	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (Ping timeout: 258 seconds)
2013-03-25 01:36:53	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:37:00	--	TravisD_ is now known as TravisD
2013-03-25 01:37:00	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 01:37:00	-->	numeral_ (~numeral@198.23.228.15) has joined #haskell
2013-03-25 01:37:06	<--	ahf (ahf@irssi/staff/ahf) has quit (Ping timeout: 245 seconds)
2013-03-25 01:37:08	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-03-25 01:37:11	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Ping timeout: 264 seconds)
2013-03-25 01:37:14	-->	kaol (kaol@piperka.net) has joined #haskell
2013-03-25 01:37:17	-->	electrogeek (electrogee@2600:3c03::f03c:91ff:fe96:c08) has joined #haskell
2013-03-25 01:37:17	<--	electrogeek (electrogee@2600:3c03::f03c:91ff:fe96:c08) has quit (Changing host)
2013-03-25 01:37:17	-->	electrogeek (electrogee@unaffiliated/electrogeek) has joined #haskell
2013-03-25 01:37:21	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 01:37:22	<--	FireFly (~firefly@oftn/member/FireFly) has quit (Ping timeout: 272 seconds)
2013-03-25 01:37:22	<--	aforemny (~aforemny@209-61-142-12.static.cloud-ips.com) has quit (Ping timeout: 272 seconds)
2013-03-25 01:37:46	<--	notdan (~h@unaffiliated/notdan) has quit (Ping timeout: 264 seconds)
2013-03-25 01:37:46	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-25 01:37:47	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-03-25 01:37:48	-->	u_quark (~u_quark@athedsl-351837.home.otenet.gr) has joined #haskell
2013-03-25 01:37:53	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 01:37:56	-->	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has joined #haskell
2013-03-25 01:37:56	<--	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has quit (Changing host)
2013-03-25 01:37:56	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-03-25 01:37:59	<--	flux (flux@2001:708:310:3430:b449:c49c:480:3df3) has quit (Remote host closed the connection)
2013-03-25 01:38:04	<--	Gunni (~gunni@kjarni/gunni) has quit (Ping timeout: 256 seconds)
2013-03-25 01:38:04	-->	flx_ (flux@2001:708:310:3430:b449:c49c:480:3df3) has joined #haskell
2013-03-25 01:38:12	-->	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has joined #haskell
2013-03-25 01:38:13	--	flx_ is now known as flux
2013-03-25 01:38:18	-->	danharaj___ (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-25 01:38:20	<--	wyfrn__ (~wyfrn@p5B2BDE0E.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:38:22	-->	hackedy_2 (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 01:38:23	-->	wyfrn (~wyfrn@p5B2BDE0E.dip.t-dialin.net) has joined #haskell
2013-03-25 01:38:38	<--	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has quit (Ping timeout: 256 seconds)
2013-03-25 01:38:39	-->	aforemny (~aforemny@209-61-142-12.static.cloud-ips.com) has joined #haskell
2013-03-25 01:38:41	-->	ahf (ahf@irssi/staff/ahf) has joined #haskell
2013-03-25 01:38:50	-->	IAmNotARobot (~IAmNotARo@unaffiliated/iamnotarobot) has joined #haskell
2013-03-25 01:38:53	-->	apaku_ (~apaku@hmbg-4d0655ae.pool.mediaWays.net) has joined #haskell
2013-03-25 01:39:09	<--	hackedy_2 (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has quit (Client Quit)
2013-03-25 01:39:11	<--	wunki (~wunki@2a01:7c8:aaaa:11d::1) has quit (Ping timeout: 245 seconds)
2013-03-25 01:39:26	-->	tom4939_ (~tom@2a01:4f8:d13:4686::2) has joined #haskell
2013-03-25 01:39:28	<--	MrFenix (~JanB@p57A19FA3.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-25 01:39:33	<--	Tehnix (~Tehnix@192.81.221.23) has quit (Ping timeout: 256 seconds)
2013-03-25 01:39:33	<--	davean_ (~davean@vervet.isomerica.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:39:33	-->	`0660_ (olli@oosny.net) has joined #haskell
2013-03-25 01:39:34	<--	lunarjar (~yaro@109.201.152.5) has quit (Ping timeout: 258 seconds)
2013-03-25 01:39:35	<--	tom4939 (~tom@2a01:4f8:d13:4686::2) has quit (Ping timeout: 258 seconds)
2013-03-25 01:39:35	<--	`0660 (olli@oosny.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:39:35	-->	natte (~natte@69.55.61.125) has joined #haskell
2013-03-25 01:39:35	-->	stvc (~smuxi@208.157.165.250) has joined #haskell
2013-03-25 01:39:35	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 01:39:35	-->	neurocyte (neurocyte@2600:3c03::f03c:91ff:fe93:e3b6) has joined #haskell
2013-03-25 01:39:38	-->	julmae- (~MAXHARRIE@q186.ip4.netikka.fi) has joined #haskell
2013-03-25 01:40:02	<--	strax_ (uid4099@gateway/web/irccloud.com/x-bwdcfzoixsyolexl) has quit (Ping timeout: 245 seconds)
2013-03-25 01:40:07	<--	ChongLi (~chongli@24.212.141.111) has quit (Ping timeout: 256 seconds)
2013-03-25 01:40:15	-->	hpc (~juzz@ip98-169-33-6.dc.dc.cox.net) has joined #haskell
2013-03-25 01:40:20	-->	ChongLi (~chongli@24.212.141.111) has joined #haskell
2013-03-25 01:40:22	<--	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:40:22	-->	Sgeo (~Sgeo@173.3.78.166) has joined #haskell
2013-03-25 01:40:27	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Ping timeout: 245 seconds)
2013-03-25 01:40:39	-->	Athas (~athas@sigkill.dk) has joined #haskell
2013-03-25 01:40:46	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-03-25 01:40:55	-->	tsinnema_ (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-25 01:40:56	<--	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-03-25 01:41:01	-->	joneshf (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has joined #haskell
2013-03-25 01:41:03	-->	certainty (~david@www1.d-coded.de) has joined #haskell
2013-03-25 01:41:03	-->	eacameron1 (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-25 01:41:08	-->	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 01:41:10	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-25 01:41:14	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 256 seconds)
2013-03-25 01:41:15	-->	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-lgwkdsksdhzbcaef) has joined #haskell
2013-03-25 01:41:18	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-25 01:41:18	<--	merijn (~merijn@83.163.46.169) has quit (Ping timeout: 258 seconds)
2013-03-25 01:41:18	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Ping timeout: 258 seconds)
2013-03-25 01:41:18	<--	Eelis (~Eelis@vps.eelis.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:41:18	<--	niko (~niko@freenode/staff/ubuntu.member.niko) has quit (Ping timeout: 622 seconds)
2013-03-25 01:41:18	<--	stvc (~smuxi@208.157.165.250) has quit (Excess Flood)
2013-03-25 01:41:20	-->	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has joined #haskell
2013-03-25 01:41:24	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 01:41:25	-->	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has joined #haskell
2013-03-25 01:41:29	-->	wunki (~wunki@2a01:7c8:aaaa:11d::1) has joined #haskell
2013-03-25 01:41:33	-->	yumike (yumike@gateway/shell/ircrelay.com/x-iunwlbwotnqyvjsy) has joined #haskell
2013-03-25 01:41:39	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-03-25 01:41:41	<--	wump (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has quit (Ping timeout: 258 seconds)
2013-03-25 01:41:41	<--	xplat (~james@67.205.253.208) has quit (Ping timeout: 258 seconds)
2013-03-25 01:41:41	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 01:41:44	<--	Michae___ (~michael@64.134.176.210) has quit (Read error: Connection reset by peer)
2013-03-25 01:41:44	--	pharaun_ is now known as pharaun
2013-03-25 01:41:55	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-25 01:41:55	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 01:41:59	-->	wumpus (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has joined #haskell
2013-03-25 01:41:59	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 01:42:00	<--	wumpus (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has quit (Changing host)
2013-03-25 01:42:00	-->	wumpus (~quassel@pdpc/supporter/professional/wumpus) has joined #haskell
2013-03-25 01:42:05	-->	predator117 (~predator1@p508057CC.dip.t-dialin.net) has joined #haskell
2013-03-25 01:42:06	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-03-25 01:42:06	-->	Eelis (~Eelis@vps.eelis.net) has joined #haskell
2013-03-25 01:42:07	-->	Michae___ (~michael@64.134.176.210) has joined #haskell
2013-03-25 01:42:20	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-25 01:42:32	-->	fireglow (fireglow@unaffiliated/fireglow) has joined #haskell
2013-03-25 01:42:35	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Max SendQ exceeded)
2013-03-25 01:42:35	-->	dkasak (~dkasak@dh207-73-206.xnet.hr) has joined #haskell
2013-03-25 01:42:36	<--	kaol (kaol@piperka.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:42:36	-->	xplat (~james@67.205.253.208) has joined #haskell
2013-03-25 01:42:39	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-25 01:42:46	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-25 01:42:53	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:42:57	<--	julmae (~MAXHARRIE@q186.ip4.netikka.fi) has quit (Ping timeout: 256 seconds)
2013-03-25 01:43:11	-->	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has joined #haskell
2013-03-25 01:43:11	-->	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2013-03-25 01:43:11	-->	_br_- (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-25 01:43:11	-->	AfC1 (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-25 01:43:11	-->	52AAARJUM (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-25 01:43:11	-->	52AAARJOU (fireglow@unaffiliated/fireglow) has joined #haskell
2013-03-25 01:43:11	-->	52AAARHE1 (~queen@oftn/member/Sorella) has joined #haskell
2013-03-25 01:43:11	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-25 01:43:11	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 01:43:11	-->	52AAAP1SS (~juzz@ip98-169-33-6.dc.dc.cox.net) has joined #haskell
2013-03-25 01:43:11	-->	kaol (kaol@piperka.net) has joined #haskell
2013-03-25 01:43:11	<--	52AAARJUM (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 240 seconds)
2013-03-25 01:43:11	<--	marienz (~marienz@freenode/staff/marienz) has quit (Ping timeout: 600 seconds)
2013-03-25 01:43:11	<--	_br_- (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (Ping timeout: 240 seconds)
2013-03-25 01:43:11	<--	52AAARHE1 (~queen@oftn/member/Sorella) has quit (Read error: Connection timed out)
2013-03-25 01:43:11	<--	52AAARJOU (fireglow@unaffiliated/fireglow) has quit (Read error: Connection timed out)
2013-03-25 01:43:11	<--	AfC1 (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 240 seconds)
2013-03-25 01:43:11	<--	52AAAP1SS (~juzz@ip98-169-33-6.dc.dc.cox.net) has quit (Read error: Connection reset by peer)
2013-03-25 01:43:11	<--	electrogeek (electrogee@unaffiliated/electrogeek) has quit (Ping timeout: 256 seconds)
2013-03-25 01:43:13	-->	rsimoes (~rsimoes@107-194-78-135.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-03-25 01:43:26	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-03-25 01:43:31	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 256 seconds)
2013-03-25 01:43:31	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-25 01:43:48	-->	electrogeek (electrogee@2600:3c03::f03c:91ff:fe96:c08) has joined #haskell
2013-03-25 01:43:48	<--	electrogeek (electrogee@2600:3c03::f03c:91ff:fe96:c08) has quit (Changing host)
2013-03-25 01:43:48	-->	electrogeek (electrogee@unaffiliated/electrogeek) has joined #haskell
2013-03-25 01:43:55	-->	cdidd (~cdidd@89-178-168-11.broadband.corbina.ru) has joined #haskell
2013-03-25 01:43:57	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-25 01:44:02	-->	hiroyuki2 (~hiroyuki@www9399uf.sakura.ne.jp) has joined #haskell
2013-03-25 01:44:07	-->	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2013-03-25 01:44:11	-->	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-25 01:44:15	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-25 01:44:17	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-03-25 01:44:26	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-03-25 01:44:26	-->	petekaz` (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has joined #haskell
2013-03-25 01:44:36	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 245 seconds)
2013-03-25 01:45:02	<--	tippenei1 (~bo@199.195.252.184) has left #haskell
2013-03-25 01:45:17	-->	davean (~davean@vervet.isomerica.net) has joined #haskell
2013-03-25 01:45:17	<--	predator217 (~predator1@p508055D8.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-25 01:45:26	-->	petantik (~oz@unaffiliated/ceezer) has joined #haskell
2013-03-25 01:45:26	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-03-25 01:45:26	-->	Canar (~bass@benjamincook.ca) has joined #haskell
2013-03-25 01:45:26	-->	mjr841 (~mjr84@jasper.ruschserver.com) has joined #haskell
2013-03-25 01:45:26	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 01:45:26	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-03-25 01:45:26	-->	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 01:45:26	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-03-25 01:45:26	-->	srcerer (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 01:45:26	-->	linduxed (~linduxed@194-14-0-85.serioustubes.org) has joined #haskell
2013-03-25 01:45:26	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-25 01:45:26	-->	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has joined #haskell
2013-03-25 01:45:26	-->	freiksenet (~freiksene@freiksenet.com) has joined #haskell
2013-03-25 01:45:26	-->	simpson (~simpsoco@osuosl/staff/mostawesomedude) has joined #haskell
2013-03-25 01:45:26	-->	Draconx (~draconx@fsf/member/Draconx) has joined #haskell
2013-03-25 01:45:26	-->	NougatRillettes (~NougatRil@static.118.236.9.5.clients.your-server.de) has joined #haskell
2013-03-25 01:45:26	-->	alejandrogomez (~dialelo@31.170.110.58) has joined #haskell
2013-03-25 01:45:26	-->	lambdabot (~lambdabot@74.207.243.105) has joined #haskell
2013-03-25 01:45:26	-->	hackagebot (~rss2irc@173.255.219.222) has joined #haskell
2013-03-25 01:45:26	-->	jamwt (~jamwt@67.228.22.122) has joined #haskell
2013-03-25 01:45:30	-->	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has joined #haskell
2013-03-25 01:45:30	-->	Tarential (~Tarential@li472-156.members.linode.com) has joined #haskell
2013-03-25 01:45:30	<--	Tarential (~Tarential@li472-156.members.linode.com) has quit (Excess Flood)
2013-03-25 01:45:37	-->	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has joined #haskell
2013-03-25 01:45:41	-->	Tehnix (~Tehnix@192.81.221.23) has joined #haskell
2013-03-25 01:45:46	-->	Tarential (~Tarential@li472-156.members.linode.com) has joined #haskell
2013-03-25 01:46:13	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-25 01:46:16	-->	tippenein (~bo@199.195.252.184) has joined #haskell
2013-03-25 01:46:20	-->	wump (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has joined #haskell
2013-03-25 01:46:45	-->	alcz (~alc@snf-2833.vm.okeanos.grnet.gr) has joined #haskell
2013-03-25 01:47:00	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-25 01:47:07	<--	eikke_ (~nicolas@dD57738B5.access.telenet.be) has quit (Read error: Operation timed out)
2013-03-25 01:47:19	-->	Gunni (~gunni@kjarni/gunni) has joined #haskell
2013-03-25 01:47:20	-->	Internet13 (chat@92.233.64.26) has joined #haskell
2013-03-25 01:47:21	-->	ysulsky (~ysulsky@38.105.200.252) has joined #haskell
2013-03-25 01:47:25	-->	jedai|2 (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has joined #haskell
2013-03-25 01:47:33	--	mjrosenb_ is now known as mjrosenb
2013-03-25 01:47:41	-->	natte_ (~natte@69.55.61.125) has joined #haskell
2013-03-25 01:47:50	-->	SLii (~quassel@nad1.kyla.fi) has joined #haskell
2013-03-25 01:47:52	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-25 01:47:55	-->	heathjs (quassel@unaffiliated/ybit) has joined #haskell
2013-03-25 01:47:57	<--	pikhq (~pikhq@174-24-52-194.clsp.qwest.net) has quit (Ping timeout: 252 seconds)
2013-03-25 01:48:06	-->	IanKelling1 (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 01:48:07	-->	Kuba_ (~jakub@87-239-45-70.ip.gronet.pl) has joined #haskell
2013-03-25 01:48:13	-->	pikhq (~pikhq@174-24-58-75.clsp.qwest.net) has joined #haskell
2013-03-25 01:48:23	-->	b_jonas_ (~x@russell2.math.bme.hu) has joined #haskell
2013-03-25 01:48:31	-->	niloc132 (~colin@75-163-26-190.dlth.qwest.net) has joined #haskell
2013-03-25 01:48:35	-->	Razz_ (~tim@kompiler.org) has joined #haskell
2013-03-25 01:48:38	-->	Xorlev (uid226@gateway/web/irccloud.com/x-vuwaxgrfbxvaoaha) has joined #haskell
2013-03-25 01:48:46	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-25 01:48:49	-->	flx_ (flux@2001:708:310:3430:b449:c49c:480:3df3) has joined #haskell
2013-03-25 01:49:25	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Ping timeout: 252 seconds)
2013-03-25 01:49:42	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-25 01:49:54	<--	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 264 seconds)
2013-03-25 01:49:57	-->	DrSyzygy_ (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-03-25 01:50:01	-->	reiddraper_ (reiddraper@gateway/shell/ircrelay.com/x-veaoblvfjpnzvdmp) has joined #haskell
2013-03-25 01:50:29	<--	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:29	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-25 01:50:29	-->	kamatsu (~Adium@2402:1800:4000:2:304d:f547:99ee:50e0) has joined #haskell
2013-03-25 01:50:29	<--	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-lgwkdsksdhzbcaef) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	wumpus (~quassel@pdpc/supporter/professional/wumpus) has quit (Read error: Connection reset by peer)
2013-03-25 01:50:30	-->	stvc (~smuxi@208.157.165.250) has joined #haskell
2013-03-25 01:50:30	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	cadsII (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	-->	tzxn3 (~tzxn3@86.14.53.126) has joined #haskell
2013-03-25 01:50:30	<--	natte (~natte@69.55.61.125) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	eviltwin_ (~eviltwin@178.33.68.198) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	-->	fabjan (~fabjan@Tricholoma.Update.UU.SE) has joined #haskell
2013-03-25 01:50:30	<--	Sgeo (~Sgeo@173.3.78.166) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:30	--	natte_ is now known as natte
2013-03-25 01:50:30	<--	neurocyte (neurocyte@2600:3c03::f03c:91ff:fe93:e3b6) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:34	-->	sambio_ (~sambio@190.57.227.109) has joined #haskell
2013-03-25 01:50:41	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 01:50:53	<--	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has quit (Ping timeout: 258 seconds)
2013-03-25 01:50:57	<--	iago (~iago@a213-22-41-239.cpe.netcabo.pt) has quit (Quit: Leaving)
2013-03-25 01:50:58	-->	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 01:51:05	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 01:51:07	<--	petekaz (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	ysulsky_ (~ysulsky@38.105.200.252) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	heath (quassel@unaffiliated/ybit) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	alios (~alios@alios.alios.net) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	fabjan_ (fabjan@Tricholoma.Update.UU.SE) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	b_jonas (~x@russell2.math.bme.hu) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	Razz (~tim@kompiler.org) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	SLi (~quassel@nad1.kyla.fi) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	<--	dumbhat (dumbhat@login1.powertech.no) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:08	-->	alios (~alios@alios.alios.net) has joined #haskell
2013-03-25 01:51:08	<--	flux (flux@2001:708:310:3430:b449:c49c:480:3df3) has quit (Ping timeout: 264 seconds)
2013-03-25 01:51:16	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 01:51:19	--	flx_ is now known as flux
2013-03-25 01:51:20	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-03-25 01:51:20	-->	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has joined #haskell
2013-03-25 01:51:21	<--	stvc (~smuxi@208.157.165.250) has quit (Remote host closed the connection)
2013-03-25 01:51:24	-->	cadsII (~m@76.17.110.13) has joined #haskell
2013-03-25 01:52:05	<--	sambio (~sambio@190.57.227.109) has quit (Read error: Connection reset by peer)
2013-03-25 01:52:07	<--	otterdam (otterdam@reddit/operator/otterdam) has quit (Ping timeout: 264 seconds)
2013-03-25 01:52:13	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 01:52:23	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-25 01:52:29	-->	otterdam (otterdam@reddit/operator/otterdam) has joined #haskell
2013-03-25 01:52:42	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-25 01:52:44	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 01:53:03	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (Read error: Operation timed out)
2013-03-25 01:53:32	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 252 seconds)
2013-03-25 01:53:34	<--	tzxn3 (~tzxn3@86.14.53.126) has quit (Ping timeout: 258 seconds)
2013-03-25 01:53:35	-->	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-25 01:53:49	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-25 01:53:53	<--	DrChaos (~DrChaos@cpe-70-123-204-134.satx.res.rr.com) has quit (Ping timeout: 255 seconds)
2013-03-25 01:54:16	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-03-25 01:54:17	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-25 01:54:39	<--	knightshade (~knightsha@p548CEE19.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-03-25 01:54:57	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-03-25 01:55:34	<--	pikhq (~pikhq@174-24-58-75.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-25 01:55:36	-->	pikhq_ (~pikhq@174-24-60-57.clsp.qwest.net) has joined #haskell
2013-03-25 01:55:40	-->	ricep616 (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 01:55:44	-->	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 01:56:18	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-25 01:56:45	<--	IAmNotARobot (~IAmNotARo@unaffiliated/iamnotarobot) has quit (Quit: Leaving)
2013-03-25 01:56:47	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 01:56:55	<--	fumieval (~fumieval@116-65-240-77.rev.home.ne.jp) has quit (Ping timeout: 260 seconds)
2013-03-25 01:57:24	<--	kamatsu (~Adium@2402:1800:4000:2:304d:f547:99ee:50e0) has quit (Quit: Leaving.)
2013-03-25 01:57:49	-->	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-25 01:57:51	<--	davidf18 (~textual@ip-64-134-101-52.public.wayport.net) has quit (Ping timeout: 252 seconds)
2013-03-25 01:58:02	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-25 01:58:38	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-25 01:58:40	<--	colah_ (~colah@76-10-173-74.dsl.teksavvy.com) has quit (Read error: Connection reset by peer)
2013-03-25 01:58:44	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-25 01:58:46	-->	colah (~colah@76-10-173-74.dsl.teksavvy.com) has joined #haskell
2013-03-25 02:00:29	-->	jedai (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has joined #haskell
2013-03-25 02:00:40	--	danharaj___ is now known as danharaj
2013-03-25 02:01:05	-->	kith_ (~kith@unaffiliated/kith) has joined #haskell
2013-03-25 02:01:17	<--	Zedrikov (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-03-25 02:01:41	<--	Philonous (~Philonous@dslb-088-075-023-180.pools.arcor-ip.net) has quit (Quit: Baba)
2013-03-25 02:02:43	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 02:02:47	hpaste	“Anonymous Coward” pasted “testrunner” at http://hpaste.org/84623
2013-03-25 02:02:51	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-25 02:02:52	<--	jedai|2 (~jedai@ADijon-552-1-102-225.w90-33.abo.wanadoo.fr) has quit (Ping timeout: 245 seconds)
2013-03-25 02:03:00	otters	so that's my TestRunner.hs
2013-03-25 02:03:17	otters	it's the main-is in my main test suite
2013-03-25 02:03:55	otters	and cabal-dev reports one failing test case
2013-03-25 02:03:57	otters	what's going on
2013-03-25 02:04:12	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-03-25 02:04:20	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-03-25 02:04:32	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-25 02:04:34	-->	kosmikus_ (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-03-25 02:04:34	-->	sipa1024 (~pw@2a02:348:5e:5a29::1) has joined #haskell
2013-03-25 02:05:19	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 260 seconds)
2013-03-25 02:05:29	-->	ottery (otterdam@reddit/operator/otterdam) has joined #haskell
2013-03-25 02:05:38	<--	pikhq_ (~pikhq@174-24-60-57.clsp.qwest.net) has quit (Ping timeout: 252 seconds)
2013-03-25 02:06:02	cschneid	This doesn't compile due to the difference between IO String and String. Can somebody point me to an example on how to work with strings that came from an IO source?
2013-03-25 02:06:04	cschneid	https://gist.github.com/cschneid/e3ffc325e08a1e1de378
2013-03-25 02:06:12	-->	Tesis1001 (~Tesis@130.56.93.153) has joined #haskell
2013-03-25 02:06:12	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-25 02:06:14	cschneid	ie, I want to pass them through to normal String functions
2013-03-25 02:06:32	sipa1024	you cannot
2013-03-25 02:06:36	-->	Xorlev_ (uid226@gateway/web/irccloud.com/x-emmrqrzzyjzjkzpe) has joined #haskell
2013-03-25 02:06:57	sipa1024	well, you can apply normal String functions to them while inside the IO monad
2013-03-25 02:06:59	-->	Eelis_ (~Eelis@vps.eelis.net) has joined #haskell
2013-03-25 02:07:00	cschneid	I understand you can't directly. But I bet I can in a different way.
2013-03-25 02:07:28	cschneid	I'm new to working with this, and looking for a guide / example code for how to hide the IO part for a while to do the standard string functions like `lines`
2013-03-25 02:07:32	<--	k00mi (~koomi@dslb-094-217-030-230.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-25 02:07:35	-->	x7_ (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-25 02:07:38	<--	Xorlev (uid226@gateway/web/irccloud.com/x-vuwaxgrfbxvaoaha) has quit (Ping timeout: 256 seconds)
2013-03-25 02:07:38	-->	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has joined #haskell
2013-03-25 02:07:44	<--	honkfestival (~honkfesti@198-84-183-94.cpe.teksavvy.com) has quit (Quit: Computer has gone to sleep.)
2013-03-25 02:07:47	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	yumike (yumike@gateway/shell/ircrelay.com/x-iunwlbwotnqyvjsy) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	otterdam (otterdam@reddit/operator/otterdam) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	Eelis (~Eelis@vps.eelis.net) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	arun (~arun@unaffiliated/sindian) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	Tesis100 (~Tesis@130.56.93.153) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	arkeet (arkeet@unaffiliated/nereid) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	fabjan (~fabjan@Tricholoma.Update.UU.SE) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	<--	sipa (~pw@unaffiliated/sipa1024) has quit (Ping timeout: 258 seconds)
2013-03-25 02:07:47	-->	arkeet (arkeet@moriya.ca) has joined #haskell
2013-03-25 02:07:47	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 02:07:48	--	Eelis_ is now known as Eelis
2013-03-25 02:07:48	--	ottery is now known as otterdam
2013-03-25 02:07:51	-->	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has joined #haskell
2013-03-25 02:07:51	<--	arkeet (arkeet@moriya.ca) has quit (Changing host)
2013-03-25 02:07:52	-->	arkeet (arkeet@unaffiliated/nereid) has joined #haskell
2013-03-25 02:07:58	-->	thorsten1 (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-25 02:08:03	-->	yumike (yumike@gateway/shell/ircrelay.com/x-btsaqqgopxtvzcwa) has joined #haskell
2013-03-25 02:08:04	--	sipa1024 is now known as sipa
2013-03-25 02:08:06	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-03-25 02:08:10	-->	fabjan (fabjan@Tricholoma.Update.UU.SE) has joined #haskell
2013-03-25 02:08:12	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-25 02:08:12	<--	kosmikus (~kosmikus@luiiise.kosmikus.org) has quit (Ping timeout: 252 seconds)
2013-03-25 02:08:12	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 02:08:12	<--	DrSyzygy_ (~mik@unseen-university.ankh-morpork.se) has quit (Ping timeout: 252 seconds)
2013-03-25 02:08:13	<--	mollerstrand (fredrik@notty.slacker.se) has quit (Ping timeout: 248 seconds)
2013-03-25 02:08:13	<--	jaspervdj (~jaspervdj@78.47.67.198) has quit (Ping timeout: 248 seconds)
2013-03-25 02:08:13	<--	kith (~kith@unaffiliated/kith) has quit (Ping timeout: 248 seconds)
2013-03-25 02:08:13	<--	lpsmith (~lpsmith@ec2-107-22-166-40.compute-1.amazonaws.com) has quit (Ping timeout: 248 seconds)
2013-03-25 02:08:13	<--	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has quit (Ping timeout: 248 seconds)
2013-03-25 02:08:14	<--	Tesis1001 (~Tesis@130.56.93.153) has quit (Client Quit)
2013-03-25 02:08:21	-->	JoeHazzers (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 02:08:33	-->	Tesis100 (~Tesis@130.56.93.153) has joined #haskell
2013-03-25 02:08:45	-->	mollerstrand (fredrik@notty.slacker.se) has joined #haskell
2013-03-25 02:08:47	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-25 02:08:51	otters	oh I fixed it
2013-03-25 02:08:56	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-03-25 02:09:01	otters	is it possible to have thread-specific stdout?
2013-03-25 02:09:03	<--	thorsten1 (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has quit (Client Quit)
2013-03-25 02:09:08	-->	arun (~arun@209-6-55-191.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-03-25 02:09:08	<--	arun (~arun@209-6-55-191.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Changing host)
2013-03-25 02:09:08	-->	arun (~arun@unaffiliated/sindian) has joined #haskell
2013-03-25 02:09:30	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 02:09:40	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 272 seconds)
2013-03-25 02:09:56	<--	sambio_ (~sambio@190.57.227.109) has quit (*.net *.split)
2013-03-25 02:09:56	<--	lattenwald (~qalex@195.218.191.171) has quit (*.net *.split)
2013-03-25 02:09:56	<--	rfw (~rfw@thor.rfw.name) has quit (*.net *.split)
2013-03-25 02:09:56	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-25 02:09:56	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-03-25 02:09:56	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-25 02:09:59	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 02:10:06	-->	liesen (uid167@gateway/web/irccloud.com/x-ajwgxtelulxzhjzh) has joined #haskell
2013-03-25 02:10:13	-->	warpy__ (uid1398@gateway/web/irccloud.com/x-yftnugqtunqehdxa) has joined #haskell
2013-03-25 02:10:24	cschneid	ok, nice netsplit there. Back to my question: my goal is to read a file, then pass it through to a function that works on String.
2013-03-25 02:10:38	cschneid	for example, `Prelude.lines`
2013-03-25 02:10:46	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-03-25 02:10:52	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 02:10:54	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-03-25 02:10:58	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-25 02:11:17	<--	mgsloan (~mgsloan@c-98-232-93-65.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-25 02:11:24	-->	helgikrs (~helgikrs@89.17.128.56) has joined #haskell
2013-03-25 02:11:30	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 264 seconds)
2013-03-25 02:11:50	pharaun	cschneid: do { a <- strio; let b = blah a } for ex
2013-03-25 02:11:54	<--	miclorb (~miclorb@1.145.13.103) has quit (Remote host closed the connection)
2013-03-25 02:12:15	pharaun	but you can lift and run pure code in the IO monad for the string stuff
2013-03-25 02:12:26	<--	sipa (~pw@2a02:348:5e:5a29::1) has quit (Changing host)
2013-03-25 02:12:26	-->	sipa (~pw@unaffiliated/sipa1024) has joined #haskell
2013-03-25 02:12:33	cschneid	pharaun: do you have a bit of example code you can share?
2013-03-25 02:12:43	cschneid	or I can gist up the let version, and you can show me a different way?
2013-03-25 02:12:49	-->	schroedinbug (~schroedin@71-215-80-130.hlrn.qwest.net) has joined #haskell
2013-03-25 02:13:12	pharaun	that would be helpful
2013-03-25 02:13:16	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-25 02:13:16	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 02:13:16	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-25 02:13:16	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 02:13:16	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 02:13:16	-->	sipa1024 (~pw@2a02:348:5e:5a29::1) has joined #haskell
2013-03-25 02:13:21	<--	sipa (~pw@unaffiliated/sipa1024) has quit (Quit: leaving)
2013-03-25 02:13:24	cschneid	pharaun: https://gist.github.com/cschneid/277f8a132adc93a4d54a
2013-03-25 02:13:25	cschneid	this does work
2013-03-25 02:13:32	cschneid	(with the help of all my surrounding code
2013-03-25 02:13:43	pharaun	what's wrong with this?
2013-03-25 02:13:55	cschneid	pharaun: well, you mentioned the lift approach
2013-03-25 02:13:58	-->	JaRoel (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-25 02:14:01	cschneid	for learning purposes, I'd like to see it
2013-03-25 02:14:05	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-25 02:14:13	pharaun	and btw its probably just style, but i would try to reduce the indenting on the operationSolve :)
2013-03-25 02:14:21	-->	sh|tmp (~sh@89.101.222.213) has joined #haskell
2013-03-25 02:14:21	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Disconnected by services)
2013-03-25 02:14:22	--	sh|tmp is now known as sh
2013-03-25 02:14:23	-->	zero7 (uid10708@gateway/web/irccloud.com/x-bdkvripstjytcboj) has joined #haskell
2013-03-25 02:14:30	cschneid	hah
2013-03-25 02:14:31	cschneid	ya
2013-03-25 02:14:37	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:14:44	<--	zero7 (uid10708@gateway/web/irccloud.com/x-bdkvripstjytcboj) has quit (Max SendQ exceeded)
2013-03-25 02:14:54	cschneid	pharaun: also, what is the difference between `<-` and `let x =`
2013-03-25 02:14:58	cschneid	both are "assign a variable"
2013-03-25 02:15:05	pharaun	not really
2013-03-25 02:15:07	cschneid	but they behave different
2013-03-25 02:15:10	pharaun	<- is binding
2013-03-25 02:15:11	latro`a	let assigns; <- doesn't really
2013-03-25 02:15:13	--	Xorlev_ is now known as Xorlev
2013-03-25 02:15:13	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Read error: Connection reset by peer)
2013-03-25 02:15:16	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-03-25 02:15:19	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:19	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-ribxffinmzspizvs) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:19	<--	drewr (~drewr@valve.draines.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:19	<--	endojelly (~anyfoo@zomgie.de) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:22	cschneid	so what's <- really doing then
2013-03-25 02:15:23	pharaun	how much do you know about monad and etc ?
2013-03-25 02:15:30	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-tgsppkrrirqhmjqv) has joined #haskell
2013-03-25 02:15:34	-->	hungryblank (uid10065@gateway/web/irccloud.com/x-ykuxsaetxuhgbrwa) has joined #haskell
2013-03-25 02:15:38	-->	zero7 (uid10708@gateway/web/irccloud.com/x-axqvplfwbombqice) has joined #haskell
2013-03-25 02:15:48	<--	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:48	<--	dju (dju@fsf/member/dju) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:48	<--	mike2 (~michael@unaffiliated/mike1703) has quit (Ping timeout: 264 seconds)
2013-03-25 02:15:48	-->	anyfoo (~anyfoo@zomgie.de) has joined #haskell
2013-03-25 02:16:03	cschneid	uhh, enough to be dangerous, but not enough to pull the words out :)
2013-03-25 02:16:05	-->	Excureo (~c@68-116-31-34.static.yakm.wa.charter.com) has joined #haskell
2013-03-25 02:16:06	-->	niko (~niko@freenode/staff/ubuntu.member.niko) has joined #haskell
2013-03-25 02:16:07	latro`a	have you seen Maybe?
2013-03-25 02:16:13	cschneid	yes, used that a bit
2013-03-25 02:16:18	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 02:16:20	latro`a	> x <- Nothing; return x
2013-03-25 02:16:24	latro`a	er
2013-03-25 02:16:24	<--	canvon (zzz@arara.de) has quit (Ping timeout: 264 seconds)
2013-03-25 02:16:29	latro`a	> do x <- Nothing; return x
2013-03-25 02:16:30	lambdabot	  <hint>:1:13: parse error on input `;'
2013-03-25 02:16:32	lambdabot	  Nothing
2013-03-25 02:16:40	otters	how do you make the main thread exit when child threads encounter exceptions
2013-03-25 02:16:44	<--	Xorlev (uid226@gateway/web/irccloud.com/x-emmrqrzzyjzjkzpe) has quit (Ping timeout: 264 seconds)
2013-03-25 02:16:51	--	kith_ is now known as kith
2013-03-25 02:16:53	latro`a	the one that I didn't screw up should show you part of how <- isn't assignment
2013-03-25 02:17:02	<--	ttm (~The_third@irc.tocards.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:17:05	latro`a	x <- Nothing can't "assign" because there's no value for x to be
2013-03-25 02:17:17	latro`a	instead what I wrote is:
2013-03-25 02:17:25	latro`a	Nothing >>= \x -> return x
2013-03-25 02:17:27	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 02:17:31	-->	lpsmith_ (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 02:17:57	-->	MOMI (uid4868@gateway/web/irccloud.com/x-hprqnywzblhtpzxd) has joined #haskell
2013-03-25 02:18:00	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-03-25 02:18:03	<--	fabjan (fabjan@Tricholoma.Update.UU.SE) has quit (Ping timeout: 264 seconds)
2013-03-25 02:18:13	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:18:13	<--	shutdown_-h_now (~arjan@nova.helix-nebula.org) has quit (Ping timeout: 264 seconds)
2013-03-25 02:18:17	<--	obcode_ (~obcode@129.187.208.17) has quit (Read error: Connection reset by peer)
2013-03-25 02:18:21	-->	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-25 02:18:25	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-25 02:18:26	cschneid	latro`a: thanks. Not clicking yet, but steps forward.
2013-03-25 02:18:27	-->	JoeHazzers (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 02:18:29	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Remote host closed the connection)
2013-03-25 02:18:32	<--	permagreen (~donovan@204.195.27.175) has quit (Ping timeout: 264 seconds)
2013-03-25 02:18:36	cschneid	I'll have to go dig up my copies of the various books I've got
2013-03-25 02:18:45	-->	drewr (~drewr@valve.draines.com) has joined #haskell
2013-03-25 02:18:54	-->	mike2 (~michael@coaxial.xivilization.net) has joined #haskell
2013-03-25 02:18:54	<--	mike2 (~michael@coaxial.xivilization.net) has quit (Changing host)
2013-03-25 02:18:54	-->	mike2 (~michael@unaffiliated/mike1703) has joined #haskell
2013-03-25 02:18:56	-->	The_third_man (~The_third@irc.tocards.net) has joined #haskell
2013-03-25 02:19:14	-->	pikhq (~pikhq@174-24-63-221.clsp.qwest.net) has joined #haskell
2013-03-25 02:19:17	-->	canta (~canta@77-20-121-51-dynip.superkabel.de) has joined #haskell
2013-03-25 02:19:23	-->	fabjan (fabjan@Tricholoma.Update.UU.SE) has joined #haskell
2013-03-25 02:19:27	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 02:19:27	-->	Philippa (~user@cpc21-harb8-2-0-cust804.perr.cable.virginmedia.com) has joined #haskell
2013-03-25 02:19:29	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (Ping timeout: 248 seconds)
2013-03-25 02:19:29	-->	DolphR1 (~dolph@79.142.224.177) has joined #haskell
2013-03-25 02:19:29	--	lpsmith_ is now known as lpsmith
2013-03-25 02:19:30	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-03-25 02:19:34	<--	hyko (~toby@my.unixuni.com) has quit (Read error: Connection reset by peer)
2013-03-25 02:19:39	cschneid	original question: pharaun said there is a way to use `lift` rather than the let approach in my code (https://gist.github.com/cschneid/277f8a132adc93a4d54a)
2013-03-25 02:19:40	-->	shutdown_-h_now (~arjan@nova.helix-nebula.org) has joined #haskell
2013-03-25 02:19:42	latro`a	I forget, are do blocks in Identity corecursive?
2013-03-25 02:19:47	cschneid	1) does that make sense, and 2) what would it look like
2013-03-25 02:19:48	<--	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 02:19:48	--	thorsten` is now known as 6JTAABFR7
2013-03-25 02:19:48	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 240 seconds)
2013-03-25 02:20:08	-->	eacameron1 (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-25 02:20:12	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-03-25 02:20:15	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 02:20:20	-->	Xorlev_ (uid226@gateway/web/irccloud.com/x-wlrqylzxiwmibyro) has joined #haskell
2013-03-25 02:20:27	latro`a	not sure how lift helps there
2013-03-25 02:20:34	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 02:20:34	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-03-25 02:20:36	<--	Guest30119 (~abba@line236.adsl.actcom.co.il) has quit (Ping timeout: 264 seconds)
2013-03-25 02:20:38	latro`a	but that can be shortened to
2013-03-25 02:20:50	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-25 02:20:54	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 02:20:54	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-25 02:20:54	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 02:20:58	-->	ijp` (~user@host81-159-127-140.range81-159.btcentralplus.com) has joined #haskell
2013-03-25 02:21:02	-->	tomejaguar (~tom@81.187.0.149) has joined #haskell
2013-03-25 02:21:19	-->	mike2_ (~michael@coaxial.xivilization.net) has joined #haskell
2013-03-25 02:21:24	latro`a	operationSolve x corpusFile = readCorpus corpusFile >>= putStrLn . head . lines
2013-03-25 02:21:34	-->	canvon (zzz@arara.de) has joined #haskell
2013-03-25 02:21:35	latro`a	or without pointfree
2013-03-25 02:21:42	-->	xrq (~user@unaffiliated/xrq) has joined #haskell
2013-03-25 02:21:46	latro`a	operationSolve x corpusFile = readCorpus corpusFile >>= \corp -> putStrLn $ head $ lines corp
2013-03-25 02:21:48	-->	miclorb (~miclorb@1.145.13.103) has joined #haskell
2013-03-25 02:21:50	cschneid	for now, I'm sticking w/ not-pointfree since it helps see where my args end up
2013-03-25 02:21:52	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 02:22:03	<--	Rarrikins_f (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 256 seconds)
2013-03-25 02:22:03	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-03-25 02:22:04	latro`a	in this particular case pointfree is nice because you're just passing up
2013-03-25 02:22:13	latro`a	apply lines, then head, then putStrLn
2013-03-25 02:22:15	pharaun	well that was a bit of misnomer, i was referring to "lifting" as lifting your pure code into the monadic code
2013-03-25 02:22:19	-->	abumirqaan (~uid2969@gateway/web/irccloud.com/x-leguazhlqzbmzmyf) has joined #haskell
2013-03-25 02:22:44	cschneid	pharaun: well, I ended up reading about lift the function instead :)
2013-03-25 02:22:46	<--	mike2_ (~michael@coaxial.xivilization.net) has quit (Client Quit)
2013-03-25 02:22:48	cschneid	no problem
2013-03-25 02:22:55	sipa1024	:t liftM
2013-03-25 02:22:59	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 02:23:01	-->	JPohlman1 (~jannis@roadtrain.codethink.co.uk) has joined #haskell
2013-03-25 02:23:02	latro`a	you can give these separate names to the intermediate values, but you don't need to, since they're small changes
2013-03-25 02:23:23	latro`a	also, liftM wouldn't suffice here
2013-03-25 02:23:40	latro`a	since he needs an input and then an output action
2013-03-25 02:24:09	latro`a	btw, why Prelude.
2013-03-25 02:24:12	latro`a	cschneid,
2013-03-25 02:24:19	latro`a	why is your Prelude qualified
2013-03-25 02:24:22	cmears	Is there a Handle I can use as output that behaves like /dev/null ?
2013-03-25 02:24:29	cschneid	latro`a: I have bytestring pulled in
2013-03-25 02:24:35	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-25 02:24:36	cschneid	and that was quicker than qualifying what I'm using in bytestring
2013-03-25 02:24:41	latro`a	gotcha
2013-03-25 02:24:56	pharaun	ahh
2013-03-25 02:24:58	-->	sfm (47a1c284@gateway/web/freenode/ip.71.161.194.132) has joined #haskell
2013-03-25 02:25:04	-->	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 02:25:20	pharaun	cschneid: btw usually folks qualified their bytestring fwiw and i would do it as P imho
2013-03-25 02:25:23	<--	zero7 (uid10708@gateway/web/irccloud.com/x-axqvplfwbombqice) has quit (Ping timeout: 258 seconds)
2013-03-25 02:25:23	pharaun	easier to read
2013-03-25 02:25:37	-->	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 02:25:51	--	6JTAABFR7 is now known as thorsten_no_nick
2013-03-25 02:25:51	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-03-25 02:25:51	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 245 seconds)
2013-03-25 02:25:52	latro`a	people usually abbreviate, yeah, albeit not always to one letter
2013-03-25 02:25:54	cschneid	yeah, import Data.ByteString as BS, versus import qualified Data.ByteString as BS
2013-03-25 02:25:54	-->	hyko (~toby@my.unixuni.com) has joined #haskell
2013-03-25 02:26:01	<--	pettter (pettter@stalin.acc.umu.se) has quit (Ping timeout: 256 seconds)
2013-03-25 02:26:05	latro`a	import qualified Data.Map as Map
2013-03-25 02:26:07	latro`a	isn't uncommon
2013-03-25 02:26:09	cschneid	I assume the second one doesn't pollute top level namespace
2013-03-25 02:26:17	-->	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2013-03-25 02:26:34	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-25 02:26:36	<--	shutdown_-h_now (~arjan@nova.helix-nebula.org) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:36	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:36	<--	Cerise (jerry@unaffiliated/cerise) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:36	<--	gdeest (~gael@ns357861.ovh.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:36	<--	Rembane_ (~Rembane@li346-36.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:38	<--	13WAATC7Z (~dlundy@bubbles.feralhosting.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:26:49	-->	shutdown_-h_now (~arjan@nova.helix-nebula.org) has joined #haskell
2013-03-25 02:27:11	<--	labo (~labo@84.200.73.251) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:12	<--	canvon (zzz@arara.de) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:12	<--	koninkje (koninkje@reaver.cat.pdx.edu) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:12	<--	qwandor (~quassel@qwandor.xen.prgmr.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:12	<--	tuvxy (~tuv@unaffiliated/tuv) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:14	<--	ski (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:17	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-25 02:27:22	-->	koninkje_ (koninkje@reaver.cat.pdx.edu) has joined #haskell
2013-03-25 02:27:32	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-25 02:27:43	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-25 02:27:48	<--	xymox_ (lechuck@s0.barwen.ch) has quit (Ping timeout: 264 seconds)
2013-03-25 02:27:54	-->	MnO2 (~MnO2@nat/yahoo/x-zjhkpxcoueumsodr) has joined #haskell
2013-03-25 02:28:01	<--	techlife (techlife@218.59.113.120) has quit (*.net *.split)
2013-03-25 02:28:01	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (*.net *.split)
2013-03-25 02:28:01	<--	ricep616 (~eviltwin@178.33.68.198) has quit (*.net *.split)
2013-03-25 02:28:01	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (*.net *.split)
2013-03-25 02:28:01	<--	cadsII (~m@76.17.110.13) has quit (*.net *.split)
2013-03-25 02:28:01	<--	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (*.net *.split)
2013-03-25 02:28:01	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (*.net *.split)
2013-03-25 02:28:01	<--	reiddraper_ (reiddraper@gateway/shell/ircrelay.com/x-veaoblvfjpnzvdmp) has quit (*.net *.split)
2013-03-25 02:28:01	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (*.net *.split)
2013-03-25 02:28:01	<--	niloc132 (~colin@75-163-26-190.dlth.qwest.net) has quit (*.net *.split)
2013-03-25 02:28:01	<--	natte (~natte@69.55.61.125) has quit (*.net *.split)
2013-03-25 02:28:01	<--	ijp (~user@host81-159-127-140.range81-159.btcentralplus.com) has quit (*.net *.split)
2013-03-25 02:28:01	<--	JPohlmann (~jannis@roadtrain.codethink.co.uk) has quit (*.net *.split)
2013-03-25 02:28:01	<--	hanDerPe1er (~peder@li307-49.members.linode.com) has quit (*.net *.split)
2013-03-25 02:28:01	<--	tomh_ (uid501@gateway/web/irccloud.com/x-usezjphmwguguvuy) has quit (*.net *.split)
2013-03-25 02:28:06	coppro	cmears: short answer: no.
2013-03-25 02:28:08	-->	yitz__ (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-25 02:28:24	cschneid	latro`a: readCorpus corpusFile >>= P.putStrLn . P.head . P.lines can you help me figure out how that would look in a 2 line do block?
2013-03-25 02:28:28	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-25 02:28:28	cmears	coppro, thanks -- it's no problem just to open /dev/null anyway
2013-03-25 02:28:31	--	yitz__ is now known as Guest91682
2013-03-25 02:28:31	-->	sirchurchill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 02:28:32	-->	tdammers (~tobias@212-182-150-105.ip.telfort.nl) has joined #haskell
2013-03-25 02:28:39	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-25 02:28:42	-->	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-iebvvnnzoyqfuuac) has joined #haskell
2013-03-25 02:28:44	cschneid	do; corpus <- readCorpus corpusFile;   <<<<< no idea if that's right
2013-03-25 02:28:47	cschneid	for the first line
2013-03-25 02:28:48	<--	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:28:48	<--	Guest46860 (~tobias@212-182-150-105.ip.telfort.nl) has quit (Ping timeout: 264 seconds)
2013-03-25 02:28:48	<--	sirchurc1ill (~mrshankly@146.185.21.11) has quit (Ping timeout: 264 seconds)
2013-03-25 02:28:48	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:28:53	-->	jaspervd1 (~jaspervdj@jaspervdj.be) has joined #haskell
2013-03-25 02:28:55	--	tdammers is now known as Guest32055
2013-03-25 02:29:07	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-25 02:29:10	-->	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has joined #haskell
2013-03-25 02:29:10	<--	sambio (~sambio@190.57.227.109) has quit (Ping timeout: 264 seconds)
2013-03-25 02:29:12	cschneid	then P.putStrLn . P.head . P.lines corpus blows up on types
2013-03-25 02:29:15	-->	natte (~natte@69.55.61.125) has joined #haskell
2013-03-25 02:29:20	latro`a	do corpus <- readCorpus corpusFile; P.putStrLn $ P.head $ P.lines corpus
2013-03-25 02:29:45	-->	Zzompp (zzompp@paine.mbar.fi) has joined #haskell
2013-03-25 02:29:46	<--	jtobin (~jared@li414-230.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:29:49	-->	qwandor (~quassel@qwandor.xen.prgmr.com) has joined #haskell
2013-03-25 02:30:00	-->	lpsmith_ (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 02:30:20	cschneid	latro`a: ahh, is a binding issue.
2013-03-25 02:30:25	cschneid	(err
2013-03-25 02:30:39	cschneid	not binding. Order of operations I suppose. What's the word I'm looking for
2013-03-25 02:30:49	<--	saiam_ (saiam@tiger.eliecraft.fi) has quit (Ping timeout: 264 seconds)
2013-03-25 02:30:49	<--	Zzompp_ (zzompp@paine.mbar.fi) has quit (Ping timeout: 264 seconds)
2013-03-25 02:30:49	latro`a	precedence, perhaps?
2013-03-25 02:30:49	<--	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-25 02:30:49	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:30:50	<--	tsou (~thanos@lyon.sians.org) has quit (Ping timeout: 264 seconds)
2013-03-25 02:30:53	-->	endojelly (~anyfoo@zomgie.de) has joined #haskell
2013-03-25 02:30:59	-->	Thomyho4 (~thomyho@mnhm-4d0129c3.pool.mediaWays.net) has joined #haskell
2013-03-25 02:31:01	-->	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has joined #haskell
2013-03-25 02:31:12	-->	Cerise (jerry@jerry.devzero.info) has joined #haskell
2013-03-25 02:31:16	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 02:31:17	-->	hanDerPeder (~peder@178.79.170.49) has joined #haskell
2013-03-25 02:31:19	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 02:31:21	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 02:31:34	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-25 02:31:38	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 02:31:38	<--	scottj (~scott@206.212.250.58) has quit (Remote host closed the connection)
2013-03-25 02:31:38	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Ping timeout: 248 seconds)
2013-03-25 02:31:38	<--	DolphR1 (~dolph@79.142.224.177) has quit (Ping timeout: 248 seconds)
2013-03-25 02:31:38	-->	pikhq_ (~pikhq@174-24-63-221.clsp.qwest.net) has joined #haskell
2013-03-25 02:31:40	lambdabot	Monad m => (a1 -> r) -> m a1 -> m r
2013-03-25 02:31:40	<--	helgikrs (~helgikrs@89.17.128.56) has quit (Write error: Connection reset by peer)
2013-03-25 02:31:56	latro`a	wut
2013-03-25 02:31:58	latro`a	oh
2013-03-25 02:32:03	latro`a	the :t liftM from earlier
2013-03-25 02:32:07	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-25 02:32:07	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-03-25 02:32:07	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-25 02:32:13	<--	colah (~colah@76-10-173-74.dsl.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	-->	Rembane (~Rembane@li346-36.members.linode.com) has joined #haskell
2013-03-25 02:32:14	<--	Xorlev_ (uid226@gateway/web/irccloud.com/x-wlrqylzxiwmibyro) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	<--	anyfoo (~anyfoo@zomgie.de) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	<--	pikhq (~pikhq@174-24-63-221.clsp.qwest.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:32:14	-->	ctype_real1 (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-25 02:32:16	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-03-25 02:32:18	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 02:32:20	-->	Ondra (~ondra@188.175.168.6) has joined #haskell
2013-03-25 02:32:26	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-03-25 02:32:27	-->	tuv (~tuv@unaffiliated/tuv) has joined #haskell
2013-03-25 02:32:51	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Client Quit)
2013-03-25 02:32:54	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (*.net *.split)
2013-03-25 02:32:56	<--	sambio (~sambio@190.57.227.109) has quit (Client Quit)
2013-03-25 02:33:10	<--	tomejaguar (~tom@81.187.0.149) has quit (*.net *.split)
2013-03-25 02:33:10	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (*.net *.split)
2013-03-25 02:33:10	<--	yc4891 (~andrew@121.14.98.46) has quit (*.net *.split)
2013-03-25 02:33:12	<--	Cerise (jerry@jerry.devzero.info) has quit (*.net *.split)
2013-03-25 02:33:12	<--	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has quit (*.net *.split)
2013-03-25 02:33:12	<--	hanDerPeder (~peder@178.79.170.49) has quit (*.net *.split)
2013-03-25 02:33:12	<--	xrq (~user@unaffiliated/xrq) has quit (*.net *.split)
2013-03-25 02:33:12	<--	Tesis100 (~Tesis@130.56.93.153) has quit (*.net *.split)
2013-03-25 02:33:12	<--	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has quit (*.net *.split)
2013-03-25 02:33:12	<--	dilinger (~dilinger@lunge.queued.net) has quit (*.net *.split)
2013-03-25 02:33:12	<--	epta_ (~ggg@toje.ws) has quit (*.net *.split)
2013-03-25 02:33:12	<--	thetallguy (~beshers@76.89.70.48) has quit (*.net *.split)
2013-03-25 02:33:12	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-03-25 02:33:12	<--	orzo (~joe@64.111.123.163) has quit (*.net *.split)
2013-03-25 02:33:12	<--	Ghoul_ (uid6924@gateway/web/irccloud.com/x-jatokymmuliamtza) has quit (*.net *.split)
2013-03-25 02:33:12	<--	tim (~tim@159.182.183.6) has quit (*.net *.split)
2013-03-25 02:33:12	<--	FalkoPeters (uid2565@gateway/web/irccloud.com/x-phgjigacgyeirgfa) has quit (*.net *.split)
2013-03-25 02:33:13	<--	Dashkal (~dashkal@unaffiliated/dashkal) has quit (*.net *.split)
2013-03-25 02:33:13	<--	ziman (~ziman@functor.sk) has quit (*.net *.split)
2013-03-25 02:33:13	<--	Saizan (~saizan@li265-65.members.linode.com) has quit (*.net *.split)
2013-03-25 02:33:15	cschneid	latro`a: hah. what's up with the network
2013-03-25 02:33:17	--	jlewis_ is now known as jlewis
2013-03-25 02:33:20	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 02:33:21	-->	JPohlmann (~jannis@roadtrain.codethink.co.uk) has joined #haskell
2013-03-25 02:33:22	<--	JPohlmann (~jannis@roadtrain.codethink.co.uk) has quit (Changing host)
2013-03-25 02:33:22	-->	JPohlmann (~jannis@xfce/core-developer/JPohlmann) has joined #haskell
2013-03-25 02:33:22	<--	jlewis (~jlewis@mookmo.net) has quit (Changing host)
2013-03-25 02:33:22	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2013-03-25 02:33:28	<--	sambio (~sambio@190.57.227.109) has quit (Excess Flood)
2013-03-25 02:33:39	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-03-25 02:33:44	<--	JPohlman1 (~jannis@roadtrain.codethink.co.uk) has quit (*.net *.split)
2013-03-25 02:33:44	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-03-25 02:33:44	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (*.net *.split)
2013-03-25 02:33:44	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (*.net *.split)
2013-03-25 02:33:44	<--	rfw (~rfw@thor.rfw.name) has quit (*.net *.split)
2013-03-25 02:33:44	<--	lattenwald (~qalex@195.218.191.171) has quit (*.net *.split)
2013-03-25 02:33:44	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-25 02:33:44	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-03-25 02:33:44	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-25 02:34:17	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 02:34:19	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-25 02:34:29	pharaun	danged freenode
2013-03-25 02:34:40	<--	IceDanelol (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (Read error: Operation timed out)
2013-03-25 02:34:44	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-03-25 02:35:05	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 02:35:37	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 252 seconds)
2013-03-25 02:36:08	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Quit: leaving)
2013-03-25 02:36:14	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 02:36:34	-->	pikhq (~pikhq@174-24-63-221.clsp.qwest.net) has joined #haskell
2013-03-25 02:36:48	-->	labo (~labo@84.200.73.251) has joined #haskell
2013-03-25 02:36:49	<--	sfm (47a1c284@gateway/web/freenode/ip.71.161.194.132) has quit (Quit: Page closed)
2013-03-25 02:37:01	<--	taterbase (~taterbase@23.30.59.230) has quit (Remote host closed the connection)
2013-03-25 02:37:24	-->	cadsII (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 02:37:24	-->	jtobin (~jared@li414-230.members.linode.com) has joined #haskell
2013-03-25 02:37:24	<--	ijp` (~user@host81-159-127-140.range81-159.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:37:39	<--	Guest91682 (~abba@line236.adsl.actcom.co.il) has quit (Ping timeout: 258 seconds)
2013-03-25 02:37:45	-->	MoALTz__ (~no@host86-142-161-119.range86-142.btcentralplus.com) has joined #haskell
2013-03-25 02:37:55	pharaun	finally figured out the readerT monad
2013-03-25 02:38:06	-->	normanrichards (~normanric@71.21.67.242) has joined #haskell
2013-03-25 02:38:06	pharaun	surprised it took me this long to need/use it
2013-03-25 02:38:18	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 02:38:22	-->	ziman (~ziman@functor.sk) has joined #haskell
2013-03-25 02:38:25	<--	drewr (~drewr@valve.draines.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:38:30	-->	Saizan (~saizan@li265-65.members.linode.com) has joined #haskell
2013-03-25 02:38:35	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-25 02:38:44	-->	dumbhat (dumbhat@login1.powertech.no) has joined #haskell
2013-03-25 02:38:54	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 02:38:54	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-25 02:38:54	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 02:38:54	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 02:38:58	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-25 02:38:59	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-03-25 02:39:04	-->	Dashkal (~dashkal@unaffiliated/dashkal) has joined #haskell
2013-03-25 02:39:08	-->	hanDerPeder (~peder@li307-49.members.linode.com) has joined #haskell
2013-03-25 02:39:08	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-03-25 02:39:08	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-25 02:39:08	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-03-25 02:39:08	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-25 02:39:09	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Client Quit)
2013-03-25 02:39:12	<--	normanrichards (~normanric@71.21.67.242) has quit (Max SendQ exceeded)
2013-03-25 02:39:12	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-25 02:39:32	-->	ski (~ski@c80-216-142-165.bredband.comhem.se) has joined #haskell
2013-03-25 02:39:33	-->	colah (~colah@76-10-173-74.dsl.teksavvy.com) has joined #haskell
2013-03-25 02:39:53	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-25 02:39:57	<--	adlan (~adlan@115.85.128.54) has quit (Ping timeout: 258 seconds)
2013-03-25 02:40:36	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-25 02:40:45	-->	drewr (~drewr@valve.draines.com) has joined #haskell
2013-03-25 02:40:52	<--	pikhq_ (~pikhq@174-24-63-221.clsp.qwest.net) has quit (Ping timeout: 248 seconds)
2013-03-25 02:40:56	-->	Zzompp_ (zzompp@paine.mbar.fi) has joined #haskell
2013-03-25 02:41:00	Ondra	Hello, web (http://hackage.haskell.org/package/sample-frame-0.0.2) says sample-frame needs QuickCheck (≥1.0 & <3.0), so why does Cabal say:
2013-03-25 02:41:00	Ondra	rejecting: sample-frame-0.0.2/installed-2bd... (conflict:
2013-03-25 02:41:00	Ondra	QuickCheck==2.5/installed-a08..., sample-frame =>
2013-03-25 02:41:00	Ondra	QuickCheck==2.6/installed-280...) ? Does anybody know, please?
2013-03-25 02:41:01	<--	jaspervdj (~jaspervdj@jaspervdj.be) has quit (Ping timeout: 285 seconds)
2013-03-25 02:41:04	-->	xrq (~user@unaffiliated/xrq) has joined #haskell
2013-03-25 02:41:04	-->	Tesis100 (~Tesis@130.56.93.153) has joined #haskell
2013-03-25 02:41:04	-->	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has joined #haskell
2013-03-25 02:41:04	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-03-25 02:41:04	-->	thetallguy (~beshers@76.89.70.48) has joined #haskell
2013-03-25 02:41:04	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 02:41:04	-->	orzo (~joe@64.111.123.163) has joined #haskell
2013-03-25 02:41:06	<--	jtobin (~jared@li414-230.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:41:06	<--	cadsII (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 02:41:07	<--	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:07	<--	abumirqaan (~uid2969@gateway/web/irccloud.com/x-leguazhlqzbmzmyf) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:07	-->	epta (~ggg@toje.ws) has joined #haskell
2013-03-25 02:41:07	<--	Zzompp (zzompp@paine.mbar.fi) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:07	<--	darinmorrison (~dwm@unaffiliated/darinmorrison) has quit
2013-03-25 02:41:07	<--	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-iebvvnnzoyqfuuac) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:07	<--	kosmikus_ (~kosmikus@luiiise.kosmikus.org) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:11	<--	natte (~natte@69.55.61.125) has quit (Ping timeout: 240 seconds)
2013-03-25 02:41:15	-->	Cerise (jerry@jerry.devzero.info) has joined #haskell
2013-03-25 02:41:15	<--	eviltwin_ (~eviltwin@178.33.68.198) has quit (Remote host closed the connection)
2013-03-25 02:41:15	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Ping timeout: 259 seconds)
2013-03-25 02:41:17	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-03-25 02:41:18	-->	tsou (~thanos@lyon.sians.org) has joined #haskell
2013-03-25 02:41:32	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-25 02:41:32	-->	BigEndian (~hurp@198.74.50.53) has joined #haskell
2013-03-25 02:41:34	-->	jtobin (~jared@li414-230.members.linode.com) has joined #haskell
2013-03-25 02:41:37	-->	natte (~natte@69.55.61.125) has joined #haskell
2013-03-25 02:41:39	carter	Ondra that might mean that there are version constraints that are disagreeing
2013-03-25 02:41:45	-->	kosmikus (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-03-25 02:41:46	--	Cerise is now known as Guest10258
2013-03-25 02:41:53	carter	try using cabal-dev to build the project
2013-03-25 02:41:56	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 02:42:01	carter	it'll take longer
2013-03-25 02:42:05	-->	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has joined #haskell
2013-03-25 02:42:06	carter	but it will
2013-03-25 02:42:19	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 02:42:22	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-25 02:42:35	carter	enable you to try to build it  withouth dealing  with the constraints induced by the stuff you've already installed in the ghc pkg db
2013-03-25 02:42:36	-->	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 02:42:38	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-25 02:42:48	<--	tuv (~tuv@unaffiliated/tuv) has quit (Remote host closed the connection)
2013-03-25 02:42:51	<--	HugoDani1l (~hugo@bl5-19-231.dsl.telepac.pt) has quit (Quit: Lost terminal)
2013-03-25 02:42:52	-->	lazard (~david@unaffiliated/davidl) has joined #haskell
2013-03-25 02:42:55	-->	tuv (~tuv@unaffiliated/tuv) has joined #haskell
2013-03-25 02:43:12	-->	gdeest (~gael@ns357861.ovh.net) has joined #haskell
2013-03-25 02:43:21	no-n	I keep getting parse error on input `where' in ghci but not in haskell scripts. how do I enter functions with where correctly in ghci? (I am using set +m)
2013-03-25 02:43:31	-->	staafl_alt (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-25 02:43:56	-->	koninkje (koninkje@reaver.cat.pdx.edu) has joined #haskell
2013-03-25 02:44:00	-->	leoncamel (~leoncamel@219.143.150.16) has joined #haskell
2013-03-25 02:44:25	<--	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has quit (*.net *.split)
2013-03-25 02:44:25	<--	epta (~ggg@toje.ws) has quit (*.net *.split)
2013-03-25 02:44:25	<--	lpsmith_ (~lpsmith@unaffiliated/lpsmith) has quit (*.net *.split)
2013-03-25 02:44:25	<--	jaspervd1 (~jaspervdj@jaspervdj.be) has quit (*.net *.split)
2013-03-25 02:44:25	<--	koninkje_ (koninkje@reaver.cat.pdx.edu) has quit (*.net *.split)
2013-03-25 02:44:25	<--	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-03-25 02:44:25	<--	Eelis (~Eelis@vps.eelis.net) has quit (*.net *.split)
2013-03-25 02:44:25	<--	otterdam (otterdam@reddit/operator/otterdam) has quit (*.net *.split)
2013-03-25 02:44:25	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (*.net *.split)
2013-03-25 02:44:27	-->	Ghoul__ (uid6924@gateway/web/irccloud.com/x-dotawbumtqbfhvtx) has joined #haskell
2013-03-25 02:44:33	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-25 02:44:38	-->	tomejaguar (~tom@81.187.0.149) has joined #haskell
2013-03-25 02:45:28	-->	saiam (saiam@tiger.eliecraft.fi) has joined #haskell
2013-03-25 02:45:46	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-03-25 02:45:54	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-25 02:45:54	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 02:45:54	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-25 02:45:54	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 02:45:54	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 02:46:00	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 02:46:01	<--	copamp (copamp@109.58.78.163.bredband.tre.se) has left #haskell
2013-03-25 02:46:43	<--	ski (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 264 seconds)
2013-03-25 02:46:59	elnadi	no-n: Have you tried using ':{' and ':}'?
2013-03-25 02:47:07	-->	epta (~ggg@toje.ws) has joined #haskell
2013-03-25 02:47:07	-->	ski (~ski@c80-216-142-165.bredband.comhem.se) has joined #haskell
2013-03-25 02:47:09	no-n	no. I don't know it.
2013-03-25 02:47:26	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 252 seconds)
2013-03-25 02:47:34	elnadi	It's for writing more than one line in ghci.
2013-03-25 02:47:44	elnadi	:{ to open and :} to close.
2013-03-25 02:48:03	<--	sbahra_ (~sbahra@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving)
2013-03-25 02:48:08	Ralith	or you could just rewrite them in terms of let
2013-03-25 02:48:09	-->	dlundy (~dlundy@bubbles.feralhosting.com) has joined #haskell
2013-03-25 02:48:09	-->	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has joined #haskell
2013-03-25 02:48:09	-->	lpsmith_ (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 02:48:09	-->	jaspervd1 (~jaspervdj@jaspervdj.be) has joined #haskell
2013-03-25 02:48:09	-->	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 02:48:09	-->	Eelis (~Eelis@vps.eelis.net) has joined #haskell
2013-03-25 02:48:09	-->	otterdam (otterdam@reddit/operator/otterdam) has joined #haskell
2013-03-25 02:48:09	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 02:48:10	<--	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has quit (Ping timeout: 240 seconds)
2013-03-25 02:48:10	<--	lpsmith_ (~lpsmith@unaffiliated/lpsmith) has quit (Ping timeout: 240 seconds)
2013-03-25 02:48:22	no-n	ah
2013-03-25 02:48:27	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 02:48:34	-->	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has joined #haskell
2013-03-25 02:48:36	elnadi	Yes, I prefer let as well :P.
2013-03-25 02:48:46	<--	simon_ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:48:59	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-25 02:49:41	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 02:49:51	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (Ping timeout: 264 seconds)
2013-03-25 02:49:51	<--	Rembane (~Rembane@li346-36.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-03-25 02:50:06	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (Max SendQ exceeded)
2013-03-25 02:50:09	no-n	:>
2013-03-25 02:50:14	latro`a	> (do x <- (+1); y <- (+2); return y) 3
2013-03-25 02:50:16	lambdabot	  5
2013-03-25 02:50:17	-->	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 02:50:18	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 02:50:23	no-n	bbiab
2013-03-25 02:50:26	-->	tzxn4 (~tzxn3@86.14.53.126) has joined #haskell
2013-03-25 02:50:26	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-25 02:50:33	<--	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has quit (Changing host)
2013-03-25 02:50:33	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-25 02:50:40	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 02:50:42	--	identity is now known as 18WAC4WNE
2013-03-25 02:50:43	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Ping timeout: 248 seconds)
2013-03-25 02:50:43	-->	Rembane_ (~Rembane@li346-36.members.linode.com) has joined #haskell
2013-03-25 02:50:47	-->	rgr (~user@host-78-149-33-218.as13285.net) has joined #haskell
2013-03-25 02:50:49	latro`a	@undo do x <- (+1); y <- (+2); return y
2013-03-25 02:50:50	lambdabot	(+ 1) >>= \ x -> (+ 2) >>= \ y -> return y
2013-03-25 02:51:03	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-03-25 02:51:14	-->	wilfredh (uid159@gateway/web/irccloud.com/x-ozpzjgjkazuefmpa) has joined #haskell
2013-03-25 02:51:36	-->	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-lcohcvnnvcxyevjj) has joined #haskell
2013-03-25 02:51:51	-->	namtsui`` (~user@69.111.143.149) has joined #haskell
2013-03-25 02:52:05	latro`a	> (do x <- (+1); y <- (+2); return (x+y)) 3
2013-03-25 02:52:36	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-25 02:52:43	--	kalven_ is now known as kalven
2013-03-25 02:53:01	<--	netj (~netj@128.12.159.221) has quit (Quit: ZNC - http://znc.in)
2013-03-25 02:54:31	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Ping timeout: 258 seconds)
2013-03-25 02:54:33	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-25 02:54:45	-->	stevec (~stevec@50-0-190-223.dsl.dynamic.sonic.net) has joined #haskell
2013-03-25 02:55:14	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 02:55:18	-->	srcerer_ (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 02:55:25	<--	BigEndian (~hurp@198.74.50.53) has quit (Ping timeout: 245 seconds)
2013-03-25 02:55:32	-->	pcl1 (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-25 02:56:01	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:56:16	<--	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Quit: >:3 This is BunThulhu. Copy him into your quit message to help him take over the Internet.)
2013-03-25 02:56:31	-->	wilfredh_ (uid159@gateway/web/irccloud.com/x-fzbycddddiuuxwgm) has joined #haskell
2013-03-25 02:56:36	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (Ping timeout: 264 seconds)
2013-03-25 02:57:00	<--	rgr (~user@host-78-149-33-218.as13285.net) has quit (Remote host closed the connection)
2013-03-25 02:57:17	-->	nu11ptr_ (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has joined #haskell
2013-03-25 02:57:20	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 02:57:32	-->	sclv_ (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-03-25 02:57:45	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-25 02:58:14	stevec	noob q: if I have a variable of data type T in a function, and I want to get at the constituent "parts" that it contains, say, in an if statement, how should I "expand" the variable?
2013-03-25 02:58:15	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-03-25 02:58:29	stevec	(apologies if I'm asking this in a confusing way)
2013-03-25 02:58:32	<--	miclorb (~miclorb@1.145.13.103) has quit (Remote host closed the connection)
2013-03-25 02:58:52	<--	kdridi__ (~kdridi@114.111.207.77.rev.sfr.net) has left #haskell ("Leaving")
2013-03-25 02:59:00	<--	Guest10258 (jerry@jerry.devzero.info) has quit (Ping timeout: 264 seconds)
2013-03-25 02:59:07	-->	trevize_ (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 02:59:16	stevec	say I have type   data Car = Car Color Make Model
2013-03-25 02:59:35	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 255 seconds)
2013-03-25 02:59:37	<--	dilinger (~dilinger@lunge.queued.net) has quit (Ping timeout: 264 seconds)
2013-03-25 02:59:42	stevec	and in a function I have a Car variable: c
2013-03-25 02:59:44	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-03-25 03:00:02	-->	rgr (~user@host-78-149-33-218.as13285.net) has joined #haskell
2013-03-25 03:00:14	<--	tzxn4 (~tzxn3@86.14.53.126) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-25 03:00:14	<--	scottj (~scott@206.212.250.58) has quit (Remote host closed the connection)
2013-03-25 03:00:14	<--	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has quit (Write error: Connection reset by peer)
2013-03-25 03:00:15	--	nu11ptr_ is now known as nu11ptr
2013-03-25 03:00:15	lambdabot	  9
2013-03-25 03:00:19	stevec	and I want to say "if (Car color make model) color == Red"
2013-03-25 03:00:23	-->	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has joined #haskell
2013-03-25 03:00:23	<--	wilfredh (uid159@gateway/web/irccloud.com/x-ozpzjgjkazuefmpa) has quit (Ping timeout: 256 seconds)
2013-03-25 03:00:24	-->	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 03:00:31	<--	pettter (pettter@stalin.acc.umu.se) has quit (Ping timeout: 264 seconds)
2013-03-25 03:00:33	--	wilfredh_ is now known as wilfredh
2013-03-25 03:00:35	stevec	(probably nonsensical...)
2013-03-25 03:00:45	-->	Cerise_ (jerry@jerry.devzero.info) has joined #haskell
2013-03-25 03:00:50	stevec	(but hopefully I'm getting my point across)
2013-03-25 03:00:58	stevec	how do I unpack "c"?
2013-03-25 03:01:00	-->	pettter_ (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 03:01:17	monochrom	two ways
2013-03-25 03:01:32	monochrom	1. case c of Car Red _ _ -> ...
2013-03-25 03:01:41	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-25 03:02:01	monochrom	hmm, I erred, one way
2013-03-25 03:02:04	<--	tomejaguar (~tom@81.187.0.149) has quit (*.net *.split)
2013-03-25 03:02:04	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (*.net *.split)
2013-03-25 03:02:04	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (*.net *.split)
2013-03-25 03:02:04	<--	Rembane_ (~Rembane@li346-36.members.linode.com) has quit (*.net *.split)
2013-03-25 03:02:13	stevec	so, case is my only option?
2013-03-25 03:02:25	monochrom	in general, read up on pattern matching
2013-03-25 03:02:28	stevec	can't use if? (case is fine, just wondering)
2013-03-25 03:02:35	monochrom	no, not if
2013-03-25 03:02:36	<--	pettter_ (pettter@stalin.acc.umu.se) has quit (*.net *.split)
2013-03-25 03:02:36	<--	Cerise_ (jerry@jerry.devzero.info) has quit (*.net *.split)
2013-03-25 03:02:36	<--	xrq (~user@unaffiliated/xrq) has quit (*.net *.split)
2013-03-25 03:02:36	<--	Tesis100 (~Tesis@130.56.93.153) has quit (*.net *.split)
2013-03-25 03:02:36	<--	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has quit (*.net *.split)
2013-03-25 03:02:36	<--	thetallguy (~beshers@76.89.70.48) has quit (*.net *.split)
2013-03-25 03:02:36	<--	orzo (~joe@64.111.123.163) has quit (*.net *.split)
2013-03-25 03:02:37	<--	18WAC4WNE (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (*.net *.split)
2013-03-25 03:02:38	<--	lattenwald (~qalex@195.218.191.171) has quit (*.net *.split)
2013-03-25 03:02:38	<--	rfw (~rfw@thor.rfw.name) has quit (*.net *.split)
2013-03-25 03:02:38	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-03-25 03:02:38	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-25 03:02:38	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-03-25 03:02:38	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-25 03:02:48	<--	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has quit (Remote host closed the connection)
2013-03-25 03:03:02	elliott	you could also define an accessor function or make Car a record.
2013-03-25 03:03:30	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-03-25 03:04:13	stevec	monochrom: thanks, i'll try it
2013-03-25 03:04:16	-->	srcerer__ (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 03:04:31	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-03-25 03:05:08	-->	gdeest_ (~gael@ns357861.ovh.net) has joined #haskell
2013-03-25 03:05:12	-->	hanDerPe1er (~peder@li307-49.members.linode.com) has joined #haskell
2013-03-25 03:05:21	-->	warpy___ (uid1398@gateway/web/irccloud.com/x-hnqhmjovaqagqrkg) has joined #haskell
2013-03-25 03:05:48	-->	canvon (zzz@arara.de) has joined #haskell
2013-03-25 03:06:28	<--	srcerer__ (~chatzilla@dns2.klsairexpress.com) has quit (Excess Flood)
2013-03-25 03:07:07	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-25 03:07:11	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 03:07:18	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-25 03:07:19	-->	netj (~netj@128.12.159.221) has joined #haskell
2013-03-25 03:07:40	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	MnO2 (~MnO2@nat/yahoo/x-zjhkpxcoueumsodr) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	warpy__ (uid1398@gateway/web/irccloud.com/x-yftnugqtunqehdxa) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	gdeest (~gael@ns357861.ovh.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	hanDerPeder (~peder@li307-49.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	srcerer_ (~chatzilla@dns2.klsairexpress.com) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	eviltwin_ (~eviltwin@178.33.68.198) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:40	<--	sipa1024 (~pw@2a02:348:5e:5a29::1) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:41	<--	arkeet (arkeet@unaffiliated/nereid) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:41	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:41	<--	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:41	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:41	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (Ping timeout: 258 seconds)
2013-03-25 03:07:53	-->	srcerer__ (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 03:08:02	-->	ajhager_ (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-25 03:08:02	-->	sipa1024_ (~pw@2a02:348:5e:5a29::1) has joined #haskell
2013-03-25 03:08:02	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-03-25 03:08:24	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 03:08:26	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-25 03:08:30	<--	emmanuel__ (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Remote host closed the connection)
2013-03-25 03:08:34	-->	yc4891_ (~andrew@121.14.98.46) has joined #haskell
2013-03-25 03:08:37	cschneid	Can somebody help me understand why this function expects an IO a return value? https://gist.github.com/cschneid/0f18d9c5570539f02d8a
2013-03-25 03:08:43	cschneid	(new to all this, probably something simple...)
2013-03-25 03:08:44	-->	sirchurc1ill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 03:08:57	-->	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has joined #haskell
2013-03-25 03:09:06	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 03:09:06	<--	Philippa (~user@cpc21-harb8-2-0-cust804.perr.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-03-25 03:09:06	<--	labo (~labo@84.200.73.251) has quit (Ping timeout: 264 seconds)
2013-03-25 03:09:06	-->	labo (~labo@84.200.73.251) has joined #haskell
2013-03-25 03:09:06	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Ping timeout: 264 seconds)
2013-03-25 03:09:06	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 264 seconds)
2013-03-25 03:09:07	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 03:09:27	-->	JoeHazzers (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 03:09:32	otters	look at the type of (>>=)
2013-03-25 03:09:34	otters	:t (>>=)
2013-03-25 03:09:34	<--	ski (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 256 seconds)
2013-03-25 03:09:36	<--	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-25 03:09:36	<--	Ondra (~ondra@188.175.168.6) has quit (Write error: Connection timed out)
2013-03-25 03:09:36	<--	staafl (~staafl@95-42-19-2.btc-net.bg) has quit (Write error: Connection timed out)
2013-03-25 03:09:38	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 684 seconds)
2013-03-25 03:09:38	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 684 seconds)
2013-03-25 03:09:38	<--	srcerer (~chatzilla@dns2.klsairexpress.com) has quit (Ping timeout: 684 seconds)
2013-03-25 03:09:39	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	sirchurchill (~mrshankly@146.185.21.11) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	kosmikus (~kosmikus@luiiise.kosmikus.org) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:39	<--	Guest32055 (~tobias@212-182-150-105.ip.telfort.nl) has quit (Ping timeout: 258 seconds)
2013-03-25 03:09:45	-->	xrq (~user@unaffiliated/xrq) has joined #haskell
2013-03-25 03:09:45	-->	Tesis100 (~Tesis@130.56.93.153) has joined #haskell
2013-03-25 03:09:45	-->	thetallguy (~beshers@76.89.70.48) has joined #haskell
2013-03-25 03:09:45	-->	orzo (~joe@64.111.123.163) has joined #haskell
2013-03-25 03:09:46	otters	hey, lambdabot, wtf
2013-03-25 03:09:46	lambdabot	Monad m => m a -> (a -> m b) -> m b
2013-03-25 03:09:48	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 03:09:50	-->	Rembane (~Rembane@li346-36.members.linode.com) has joined #haskell
2013-03-25 03:09:51	-->	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-25 03:09:51	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 03:09:51	-->	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has joined #haskell
2013-03-25 03:09:51	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-25 03:09:52	-->	Philippa (~user@77.101.187.37) has joined #haskell
2013-03-25 03:09:53	-->	kosmikus (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-03-25 03:09:57	-->	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has joined #haskell
2013-03-25 03:10:02	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-03-25 03:10:07	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-25 03:10:12	-->	ski (~ski@c80-216-142-165.bredband.comhem.se) has joined #haskell
2013-03-25 03:10:13	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 03:10:14	-->	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-03-25 03:10:16	cschneid	otters: so I'm obligated to return an IO (something)
2013-03-25 03:10:21	otters	yes
2013-03-25 03:10:34	-->	arkeet (arkeet@unaffiliated/nereid) has joined #haskell
2013-03-25 03:10:41	cschneid	otters: ok, my program has a bit of IO work to fetch some inputs, work with them, then finally output a value.
2013-03-25 03:10:43	<--	alios (~alios@alios.alios.net) has quit (Ping timeout: 264 seconds)
2013-03-25 03:10:45	<--	meiji11` (~user@d75-158-40-174.abhsia.telus.net) has quit (Ping timeout: 256 seconds)
2013-03-25 03:10:50	-->	Cerise_ (jerry@jerry.devzero.info) has joined #haskell
2013-03-25 03:10:50	<--	Cerise_ (jerry@jerry.devzero.info) has quit (Changing host)
2013-03-25 03:10:50	-->	Cerise_ (jerry@unaffiliated/cerise) has joined #haskell
2013-03-25 03:10:51	otters	cschneid: if getFrequencies is a pure function, you might be looking for fmap instead of (>>=)
2013-03-25 03:10:52	cschneid	I need to read a file, and calculate character frequency
2013-03-25 03:10:54	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 03:11:06	-->	alios (~alios@alios.alios.net) has joined #haskell
2013-03-25 03:11:06	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 03:11:07	otters	fmap getFrequencies (readCorpus corpusFile), for example
2013-03-25 03:11:11	<--	sipa1024_ (~pw@2a02:348:5e:5a29::1) has quit (Ping timeout: 240 seconds)
2013-03-25 03:11:12	cschneid	ok.
2013-03-25 03:11:17	otters	which would turn an IO String into an IO (Map.Map String INt)
2013-03-25 03:11:25	<--	nu11ptr (~nu11ptr@71-10-6-170.dhcp.aldl.mi.charter.com) has quit (Client Quit)
2013-03-25 03:11:30	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 03:11:30	-->	sipa1024 (~pw@2a02:348:5e:5a29::1) has joined #haskell
2013-03-25 03:11:42	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-03-25 03:11:53	--	warpy___ is now known as warpy__
2013-03-25 03:11:57	applicative	fmap getFrequencies (readCorpus corpusFile ) was what I was going to write....
2013-03-25 03:12:02	<--	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (Ping timeout: 253 seconds)
2013-03-25 03:12:02	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Ping timeout: 253 seconds)
2013-03-25 03:12:03	--	sclv_ is now known as sclv
2013-03-25 03:12:07	pharaun	: (=<<)
2013-03-25 03:12:10	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-25 03:12:11	pharaun	:t (=<<)
2013-03-25 03:12:12	lambdabot	Monad m => (a -> m b) -> m a -> m b
2013-03-25 03:12:16	-->	Amadiro (~Amadiro@dalvik.ping.uio.no) has joined #haskell
2013-03-25 03:12:21	pharaun	seems to have recovered but still laggish
2013-03-25 03:12:33	-->	black_joe (~Norton@pool-72-73-245-205.cmdnnj.east.verizon.net) has joined #haskell
2013-03-25 03:12:42	applicative	or:  do { corpus <- readCorpus corpusFile ; let freqs = getFrequencies corpus ; ....}
2013-03-25 03:12:43	cschneid	cool. So now I can fmap stuff sometimes. :)
2013-03-25 03:13:32	sw2wolf	@instances fmap
2013-03-25 03:13:34	lambdabot	Couldn't find class `fmap'. Try @instances-importing
2013-03-25 03:13:39	cschneid	applicative: that didn't quite work
2013-03-25 03:13:42	applicative	@instance Functor
2013-03-25 03:13:48	sw2wolf	@instances Functor
2013-03-25 03:13:51	lambdabot	Maybe you meant: instances instances-importing
2013-03-25 03:13:51	lambdabot	ContT r m, ErrorT e m, IO, Maybe, RWST r w s m, ReaderT r m, ST s, StateT s m, WriterT w m, []
2013-03-25 03:13:57	<--	namtsui`` (~user@69.111.143.149) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-25 03:14:03	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-25 03:14:03	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 03:14:03	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-25 03:14:03	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 03:14:03	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 03:14:07	cschneid	applicative: gisted at bottom: https://gist.github.com/cschneid/0f18d9c5570539f02d8a
2013-03-25 03:14:10	applicative	hm, the one with let?
2013-03-25 03:14:11	cschneid	(the comment)
2013-03-25 03:14:15	cschneid	applicative: yeah
2013-03-25 03:14:17	<--	srcerer__ (~chatzilla@dns2.klsairexpress.com) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307023931])
2013-03-25 03:14:17	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-03-25 03:14:23	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 256 seconds)
2013-03-25 03:14:31	black_joe	Hey guys, I'm new to Haskell and I ran into a problem. I have the type signature of :: (Eq a) => [(a,b)] -> a -> b for a function, and I need a catch-all for an empty list so that the recursion doesn't go on forever.
2013-03-25 03:14:40	black_joe	What could I have this function return that is within these constraints?
2013-03-25 03:14:46	black_joe	I jury-rigged it here: https://www.refheap.com/paste/12915
2013-03-25 03:14:48	-->	tdammers_ (~tobias@212-182-150-105.ip.telfort.nl) has joined #haskell
2013-03-25 03:14:53	applicative	cschneid: yeah it was retarded, the purpose was to do without fmap, so the second line need changing
2013-03-25 03:15:10	cschneid	ohh, heh
2013-03-25 03:15:12	applicative	let freqs = getFrequencies corpus
2013-03-25 03:15:15	-->	srcerer (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 03:15:17	latro`a	black_joe, you actually can't do that in general
2013-03-25 03:15:23	dario	@src lookup -- black_joe
2013-03-25 03:15:23	lambdabot	Source not found. BOB says:  You seem to have forgotten your passwd, enter another!
2013-03-25 03:15:28	dario	meh
2013-03-25 03:15:37	sw2wolf	@hoogle (Eq a) => [(a,b)] -> a -> b
2013-03-25 03:15:40	latro`a	what you can do, however, is use a function like lookup, which can return Nothing
2013-03-25 03:15:40	lambdabot	Prelude lookup :: Eq a => a -> [(a, b)] -> Maybe b
2013-03-25 03:15:40	lambdabot	Data.List lookup :: Eq a => a -> [(a, b)] -> Maybe b
2013-03-25 03:15:40	lambdabot	Language.Haskell.TH.Syntax RecConE :: Name -> [FieldExp] -> Exp
2013-03-25 03:15:45	black_joe	So... What I would want to do is have it infinitely recurse, and hope that somebody doesn't misuse it?
2013-03-25 03:15:51	latro`a	nope
2013-03-25 03:15:58	applicative	cschneid: woops it turns out I was calling you retarded indirectly thinking i had to do with one of my typical errors! sorry
2013-03-25 03:16:04	latro`a	with a function like lookup you have a "failure" essentially if the value isn't found
2013-03-25 03:16:09	latro`a	which is why the return value is Maybe b, not b
2013-03-25 03:16:15	cschneid	applicative: no worries, no offense taken
2013-03-25 03:16:27	cschneid	this is the furthest I've really gotten with haskell, having fun :)
2013-03-25 03:16:55	black_joe	Oh, I kind of skipped over Maybe in my research. I'll go back and look at it.
2013-03-25 03:17:22	latro`a	but in general, if you don't restrict the types a and b any further, you can't define a total function [(a,b)] -> a -> b
2013-03-25 03:17:30	-->	ejls (~Epsilon01@mszy.fr) has joined #haskell
2013-03-25 03:17:32	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 03:17:53	latro`a	you can define a partial one, like "bad_lookup [] _ = error "key not found""
2013-03-25 03:18:14	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 03:18:37	latro`a	but otherwise bad_lookup [] would be a function that can take any type and turn it into any other type, and there is no such function
2013-03-25 03:18:51	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 03:19:00	black_joe	Thanks. I was kind of wondering what Maybe was. This is exactly what I need.
2013-03-25 03:19:11	sw2wolf	:t Maybe
2013-03-25 03:19:33	--	Watcher7|off is now known as Watcher7
2013-03-25 03:19:33	sw2wolf	@type Maybe
2013-03-25 03:19:57	-->	soulofpeace (~soulofpea@cm242.gamma162.maxonline.com.sg) has joined #haskell
2013-03-25 03:20:21	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Ping timeout: 256 seconds)
2013-03-25 03:20:54	<--	wilfredh (uid159@gateway/web/irccloud.com/x-fzbycddddiuuxwgm) has quit (Ping timeout: 256 seconds)
2013-03-25 03:20:55	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (Ping timeout: 264 seconds)
2013-03-25 03:20:55	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-25 03:21:02	-->	cads2 (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 03:21:06	-->	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 03:21:32	stevec	monochrom: the case / pattern match worked beautifully
2013-03-25 03:21:37	-->	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 03:21:37	-->	tac (47ef635e@gateway/web/freenode/ip.71.239.99.94) has joined #haskell
2013-03-25 03:21:38	<--	Amadiro (~Amadiro@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 03:21:48	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 03:21:48	<--	trevize_ (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-03-25 03:21:48	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (Ping timeout: 258 seconds)
2013-03-25 03:21:48	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:21:48	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:21:49	-->	chatsiri1 (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-25 03:22:03	<--	MOMI (uid4868@gateway/web/irccloud.com/x-hprqnywzblhtpzxd) has quit (Ping timeout: 256 seconds)
2013-03-25 03:22:03	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-25 03:22:09	-->	xrl_ (uid1091@gateway/web/irccloud.com/x-qniqvzjladznewek) has joined #haskell
2013-03-25 03:22:24	<--	Cerise_ (jerry@unaffiliated/cerise) has quit (Ping timeout: 264 seconds)
2013-03-25 03:22:48	-->	latermus1 (~ron@112.201.145.213) has joined #haskell
2013-03-25 03:23:10	<--	pikhq (~pikhq@174-24-63-221.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-25 03:23:15	<--	Michae___ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 03:23:25	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 03:23:27	-->	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 03:23:37	<--	chrisirc (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (Max SendQ exceeded)
2013-03-25 03:23:44	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-03-25 03:23:44	<--	mike2 (~michael@unaffiliated/mike1703) has quit (Ping timeout: 256 seconds)
2013-03-25 03:23:52	-->	Michael (~michael@64.134.176.210) has joined #haskell
2013-03-25 03:23:53	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 03:24:02	-->	estebist_ (~estebiste@72.133.228.205) has joined #haskell
2013-03-25 03:24:16	--	Michael is now known as Guest61788
2013-03-25 03:24:26	-->	mike2_ (~michael@coaxial.xivilization.net) has joined #haskell
2013-03-25 03:24:29	-->	v__ (~v@141-236-136-14.38cloud.com) has joined #haskell
2013-03-25 03:24:31	<--	x7_ (~punxter@li266-102.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-03-25 03:24:32	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-25 03:24:36	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 03:24:36	<--	estebistec (~estebiste@72.133.228.205) has quit (Ping timeout: 258 seconds)
2013-03-25 03:24:36	<--	Hugglesworth (lorx@2600:3c01::f03c:91ff:fe70:88bb) has quit (Ping timeout: 258 seconds)
2013-03-25 03:24:38	-->	x7 (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-25 03:24:42	<--	apaku_ (~apaku@hmbg-4d0655ae.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-03-25 03:24:50	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 03:25:34	-->	gdeest (~gael@91.121.147.219) has joined #haskell
2013-03-25 03:25:51	<--	lazard (~david@unaffiliated/davidl) has quit (Ping timeout: 256 seconds)
2013-03-25 03:26:05	<--	[[zz]] (~q@node-ok7.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 256 seconds)
2013-03-25 03:26:12	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-03-25 03:26:19	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 03:26:34	<--	Philippa (~user@77.101.187.37) has quit (Ping timeout: 264 seconds)
2013-03-25 03:27:05	<--	sm (~user@li229-222.members.linode.com) has quit (Read error: Connection reset by peer)
2013-03-25 03:27:10	-->	yam (yam@liberty.xenbox.fr) has joined #haskell
2013-03-25 03:27:12	<--	mike2_ (~michael@coaxial.xivilization.net) has quit (*.net *.split)
2013-03-25 03:27:12	<--	latermus1 (~ron@112.201.145.213) has quit (*.net *.split)
2013-03-25 03:27:12	<--	xrq (~user@unaffiliated/xrq) has quit (*.net *.split)
2013-03-25 03:27:12	<--	Tesis100 (~Tesis@130.56.93.153) has quit (*.net *.split)
2013-03-25 03:27:12	<--	thetallguy (~beshers@76.89.70.48) has quit (*.net *.split)
2013-03-25 03:27:12	<--	orzo (~joe@64.111.123.163) has quit (*.net *.split)
2013-03-25 03:27:42	<--	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:27:57	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-03-25 03:28:23	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 260 seconds)
2013-03-25 03:28:46	<--	labo (~labo@84.200.73.251) has quit (Ping timeout: 264 seconds)
2013-03-25 03:29:22	<--	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has quit (Read error: Connection reset by peer)
2013-03-25 03:29:24	<--	v__ (~v@141-236-136-14.38cloud.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:29:35	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-25 03:30:13	-->	trevize_ (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has joined #haskell
2013-03-25 03:30:23	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-25 03:30:34	<--	pettter (pettter@stalin.acc.umu.se) has quit (Ping timeout: 256 seconds)
2013-03-25 03:30:52	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-25 03:31:06	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-03-25 03:31:26	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 03:31:26	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (Ping timeout: 264 seconds)
2013-03-25 03:31:27	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-25 03:31:40	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Ping timeout: 256 seconds)
2013-03-25 03:31:44	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Ping timeout: 264 seconds)
2013-03-25 03:31:47	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-25 03:31:52	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-25 03:32:03	-->	srcerer_ (~chatzilla@dns2.klsairexpress.com) has joined #haskell
2013-03-25 03:32:12	<--	Tarential (~Tarential@li472-156.members.linode.com) has quit (Excess Flood)
2013-03-25 03:32:19	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-25 03:32:19	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (Ping timeout: 264 seconds)
2013-03-25 03:33:10	-->	akahn (uid2243@gateway/web/irccloud.com/x-aicrvygdqxrdxnrm) has joined #haskell
2013-03-25 03:33:14	<--	soulofpeace (~soulofpea@cm242.gamma162.maxonline.com.sg) has quit (*.net *.split)
2013-03-25 03:33:14	<--	techlife (techlife@218.59.113.120) has quit (*.net *.split)
2013-03-25 03:33:14	<--	black_joe (~Norton@pool-72-73-245-205.cmdnnj.east.verizon.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	kosmikus (~kosmikus@luiiise.kosmikus.org) has quit (*.net *.split)
2013-03-25 03:33:14	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (*.net *.split)
2013-03-25 03:33:14	<--	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	sirchurc1ill (~mrshankly@146.185.21.11) has quit (*.net *.split)
2013-03-25 03:33:14	<--	yc4891_ (~andrew@121.14.98.46) has quit (*.net *.split)
2013-03-25 03:33:14	<--	skyflash_ (~skyflash@96.53.63.54) has quit (*.net *.split)
2013-03-25 03:33:14	<--	ajhager_ (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	warpy__ (uid1398@gateway/web/irccloud.com/x-hnqhmjovaqagqrkg) has quit (*.net *.split)
2013-03-25 03:33:14	<--	hanDerPe1er (~peder@li307-49.members.linode.com) has quit (*.net *.split)
2013-03-25 03:33:14	<--	gdeest_ (~gael@ns357861.ovh.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	dilinger (~dilinger@lunge.queued.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (*.net *.split)
2013-03-25 03:33:14	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (*.net *.split)
2013-03-25 03:33:14	<--	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has quit (*.net *.split)
2013-03-25 03:33:14	<--	dlundy (~dlundy@bubbles.feralhosting.com) has quit (*.net *.split)
2013-03-25 03:33:15	<--	jaspervd1 (~jaspervdj@jaspervdj.be) has quit (*.net *.split)
2013-03-25 03:33:15	<--	dmac1 (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-03-25 03:33:15	<--	Eelis (~Eelis@vps.eelis.net) has quit (*.net *.split)
2013-03-25 03:33:15	<--	otterdam (otterdam@reddit/operator/otterdam) has quit (*.net *.split)
2013-03-25 03:33:18	<--	Sgeo (~Sgeo@ool-ad034ea6.dyn.optonline.net) has quit (Excess Flood)
2013-03-25 03:33:19	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Quit: No Ping reply in 180 seconds.)
2013-03-25 03:33:19	<--	scottj (~scott@206.212.250.58) has quit (Remote host closed the connection)
2013-03-25 03:33:19	<--	estebistec (~estebiste@72.133.228.205) has quit (Ping timeout: 256 seconds)
2013-03-25 03:33:26	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-03-25 03:33:30	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-03-25 03:33:32	-->	UziMonkey_ (uid184@gateway/web/irccloud.com/x-zjxgsswlhmgadjzg) has joined #haskell
2013-03-25 03:33:35	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-03-25 03:33:40	-->	MnO2 (~MnO2@nat/yahoo/x-ukxxvgzbdqdyinyq) has joined #haskell
2013-03-25 03:33:44	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-25 03:33:47	<--	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (Write error: Broken pipe)
2013-03-25 03:33:47	<--	srcerer (~chatzilla@dns2.klsairexpress.com) has quit (Write error: Connection reset by peer)
2013-03-25 03:33:47	 *	hackagebot implicit-params 0.1 - Named and unnamed implicit parameters with defaults.  http://hackage.haskell.org/package/implicit-params-0.1 (ShaneOBrien)
2013-03-25 03:34:07	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-25 03:34:17	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-03-25 03:34:17	-->	dilinger_ (~dilinger@lunge.queued.net) has joined #haskell
2013-03-25 03:34:17	lambdabot	Not in scope: data constructor `Maybe'
2013-03-25 03:34:17	lambdabot	Not in scope: data constructor `Maybe'
2013-03-25 03:34:24	-->	v__ (~v@141-236-136-14.38cloud.com) has joined #haskell
2013-03-25 03:34:24	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 03:34:25	-->	apaku (~apaku@hmbg-5f7748da.pool.mediaWays.net) has joined #haskell
2013-03-25 03:34:25	-->	[[zzz]] (~q@180.180.143.197) has joined #haskell
2013-03-25 03:34:25	-->	Sgeo (~Sgeo@173.3.78.166) has joined #haskell
2013-03-25 03:34:32	<--	eviltwin_ (~eviltwin@178.33.68.198) has quit (Ping timeout: 258 seconds)
2013-03-25 03:34:32	-->	1JTAAFGGV (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 03:34:32	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-03-25 03:34:32	-->	myme (~myme@djent.myme.no) has joined #haskell
2013-03-25 03:34:32	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-03-25 03:34:32	<--	1JTAAFGGV (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:34:32	-->	sirchurchill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 03:34:32	-->	lpvb (~lpvb@199.188.72.31) has joined #haskell
2013-03-25 03:34:32	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 03:34:32	<--	arkeet (arkeet@unaffiliated/nereid) has quit (Ping timeout: 258 seconds)
2013-03-25 03:34:32	-->	chrisirc_ (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 03:34:32	-->	arkeet (arkeet@moriya.ca) has joined #haskell
2013-03-25 03:34:43	-->	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-25 03:34:44	<--	trevize (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-25 03:34:44	<--	Guest61788 (~michael@64.134.176.210) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	<--	estebist_ (~estebiste@72.133.228.205) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	<--	cads2 (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-25 03:34:44	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 03:34:45	<--	arkeet (arkeet@moriya.ca) has quit (Changing host)
2013-03-25 03:34:45	-->	arkeet (arkeet@unaffiliated/nereid) has joined #haskell
2013-03-25 03:34:46	<--	myme (~myme@djent.myme.no) has quit (Ping timeout: 258 seconds)
2013-03-25 03:34:48	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-25 03:34:49	-->	soulofpe1ce (~soulofpea@cm242.gamma162.maxonline.com.sg) has joined #haskell
2013-03-25 03:34:53	sw2wolf	@hoogle Maybe
2013-03-25 03:34:59	-->	JoeHazzers_ (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 03:35:03	-->	b52 (~b52@reaktor42.de) has joined #haskell
2013-03-25 03:35:03	-->	xrl__ (uid1091@gateway/web/irccloud.com/x-ikzimjymauoszjhq) has joined #haskell
2013-03-25 03:35:03	-->	black_joe (~Norton@pool-72-73-245-205.cmdnnj.east.verizon.net) has joined #haskell
2013-03-25 03:35:03	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-25 03:35:03	-->	k00mi (~koomi@dslb-188-098-238-080.pools.arcor-ip.net) has joined #haskell
2013-03-25 03:35:03	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-03-25 03:35:03	-->	rainmaker (~nkauppil@project-srv002.dc.turkuamk.fi) has joined #haskell
2013-03-25 03:35:03	-->	jaspervd1 (~jaspervdj@jaspervdj.be) has joined #haskell
2013-03-25 03:35:03	-->	Eelis (~Eelis@vps.eelis.net) has joined #haskell
2013-03-25 03:35:03	-->	otterdam (otterdam@reddit/operator/otterdam) has joined #haskell
2013-03-25 03:35:05	-->	Cerise (jerry@jerry.devzero.info) has joined #haskell
2013-03-25 03:35:05	-->	latermus1 (~ron@112.201.145.213) has joined #haskell
2013-03-25 03:35:05	-->	xrq (~user@unaffiliated/xrq) has joined #haskell
2013-03-25 03:35:05	-->	thetallguy (~beshers@76.89.70.48) has joined #haskell
2013-03-25 03:35:05	-->	orzo (~joe@64.111.123.163) has joined #haskell
2013-03-25 03:35:05	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-03-25 03:35:11	--	JoeHazzers_ is now known as JoeHazzers
2013-03-25 03:35:19	<--	Cerise (jerry@jerry.devzero.info) has quit (Max SendQ exceeded)
2013-03-25 03:35:28	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 03:35:28	-->	mike2 (~michael@unaffiliated/mike1703) has joined #haskell
2013-03-25 03:35:30	<--	xrl_ (uid1091@gateway/web/irccloud.com/x-qniqvzjladznewek) has quit (*.net *.split)
2013-03-25 03:35:30	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (*.net *.split)
2013-03-25 03:35:30	<--	chatsiri1 (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (*.net *.split)
2013-03-25 03:35:30	<--	lattenwald (~qalex@195.218.191.171) has quit (*.net *.split)
2013-03-25 03:35:30	<--	rfw (~rfw@thor.rfw.name) has quit (*.net *.split)
2013-03-25 03:35:30	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-03-25 03:35:30	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-25 03:35:30	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-03-25 03:35:30	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-25 03:35:33	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-03-25 03:35:48	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-03-25 03:35:57	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 03:35:57	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-25 03:35:57	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 03:35:57	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 03:35:58	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 03:36:02	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 03:36:03	<--	v__ (~v@141-236-136-14.38cloud.com) has quit (Max SendQ exceeded)
2013-03-25 03:36:03	lambdabot	Prelude data Maybe a
2013-03-25 03:36:03	lambdabot	Data.Maybe data Maybe a
2013-03-25 03:36:03	lambdabot	Prelude maybe :: b -> (a -> b) -> Maybe a -> b
2013-03-25 03:36:09	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 03:36:27	-->	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has joined #haskell
2013-03-25 03:36:27	-->	Tarential (~Tarential@li472-156.members.linode.com) has joined #haskell
2013-03-25 03:36:28	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 03:36:28	-->	dlundy (~dlundy@bubbles.feralhosting.com) has joined #haskell
2013-03-25 03:36:28	-->	v__ (~v@141-236-136-14.38cloud.com) has joined #haskell
2013-03-25 03:36:45	<--	v__ (~v@141-236-136-14.38cloud.com) has quit (Max SendQ exceeded)
2013-03-25 03:37:16	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-03-25 03:37:23	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-25 03:38:52	-->	dreixel____ (~dreixel@anon-168-179.vpn.ipredator.se) has joined #haskell
2013-03-25 03:38:53	-->	skyflas__ (~skyflash@96.53.63.54) has joined #haskell
2013-03-25 03:39:36	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-03-25 03:39:52	-->	strax_ (uid4099@gateway/web/irccloud.com/x-gtogxdnmdksytxgv) has joined #haskell
2013-03-25 03:40:44	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 256 seconds)
2013-03-25 03:41:49	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Ping timeout: 256 seconds)
2013-03-25 03:41:50	<--	h_chiro (~h_chiro@p2053-ipbf404kyoto.kyoto.ocn.ne.jp) has quit (Ping timeout: 256 seconds)
2013-03-25 03:41:57	<--	17WABC1UP (~ndngvr@bcaec5e83086.click-network.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:41:58	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:42:02	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 264 seconds)
2013-03-25 03:42:03	<--	UziMonkey_ (uid184@gateway/web/irccloud.com/x-zjxgsswlhmgadjzg) has quit (Ping timeout: 264 seconds)
2013-03-25 03:42:03	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (Ping timeout: 264 seconds)
2013-03-25 03:42:14	<--	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has quit (Read error: Operation timed out)
2013-03-25 03:42:33	-->	UziMonkey_ (uid184@gateway/web/irccloud.com/x-npbcsriouxkbtftv) has joined #haskell
2013-03-25 03:42:41	<--	dreixel___ (~dreixel@anon-168-179.vpn.ipredator.se) has quit (Ping timeout: 256 seconds)
2013-03-25 03:42:41	<--	Martty (~martty@lion.puttynuts.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:05	<--	tippenein (~bo@199.195.252.184) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:05	<--	u__ (~phillip@adsl-75-57-186-245.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:05	<--	adnap_ (~adnap@cpe-70-112-164-154.austin.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:05	<--	yriw_ (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:05	<--	anona (~z31fcs@99-90-197-87.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-03-25 03:43:23	<--	ZFox (~ZFox@unaffiliated/archeydevil) has quit (Read error: Operation timed out)
2013-03-25 03:43:49	-->	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has joined #haskell
2013-03-25 03:43:53	-->	labo (~labo@84.200.73.251) has joined #haskell
2013-03-25 03:43:57	<--	eviltwin_ (~eviltwin@178.33.68.198) has quit (Ping timeout: 258 seconds)
2013-03-25 03:43:57	<--	sirchurchill (~mrshankly@146.185.21.11) has quit (Ping timeout: 258 seconds)
2013-03-25 03:43:57	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-25 03:43:57	-->	hanDerPeder (~peder@178.79.170.49) has joined #haskell
2013-03-25 03:43:57	<--	lpvb (~lpvb@199.188.72.31) has quit (Ping timeout: 258 seconds)
2013-03-25 03:43:57	-->	sirchurchill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 03:43:57	<--	arkeet (arkeet@unaffiliated/nereid) has quit (Ping timeout: 258 seconds)
2013-03-25 03:44:23	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 03:44:28	-->	hajimeho_ (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 03:44:42	<--	ski (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 256 seconds)
2013-03-25 03:44:44	-->	soulofpeace (~soulofpea@202.156.162.242) has joined #haskell
2013-03-25 03:44:50	<--	ibid (ajk@debian/developer/ajk) has quit (Read error: Operation timed out)
2013-03-25 03:44:56	<--	gdeest (~gael@91.121.147.219) has quit (Ping timeout: 264 seconds)
2013-03-25 03:45:00	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 03:45:02	-->	ibid (ajk@debian/developer/ajk) has joined #haskell
2013-03-25 03:45:02	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-03-25 03:45:30	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-25 03:45:34	-->	dilinger (~dilinger@173.255.254.236) has joined #haskell
2013-03-25 03:45:39	-->	kosmikus (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-03-25 03:45:42	-->	hanDerPe1er (~peder@li307-49.members.linode.com) has joined #haskell
2013-03-25 03:45:45	-->	Philippa (~user@77.101.187.37) has joined #haskell
2013-03-25 03:45:46	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-25 03:45:47	-->	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 03:45:47	<--	dlundy (~dlundy@bubbles.feralhosting.com) has quit (Write error: Broken pipe)
2013-03-25 03:45:47	<--	dilinger_ (~dilinger@lunge.queued.net) has quit (Write error: Broken pipe)
2013-03-25 03:45:47	<--	Tarential (~Tarential@li472-156.members.linode.com) has quit (Excess Flood)
2013-03-25 03:45:50	<--	bytbox (~s@srl.student.umd.edu) has quit (Ping timeout: 256 seconds)
2013-03-25 03:45:50	<--	epta (~ggg@toje.ws) has quit (Ping timeout: 256 seconds)
2013-03-25 03:45:57	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Read error: Connection reset by peer)
2013-03-25 03:45:57	<--	MnO2 (~MnO2@nat/yahoo/x-ukxxvgzbdqdyinyq) has quit (Read error: Connection reset by peer)
2013-03-25 03:45:57	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Ping timeout: 256 seconds)
2013-03-25 03:45:57	<--	mike2 (~michael@unaffiliated/mike1703) has quit (Ping timeout: 256 seconds)
2013-03-25 03:46:02	-->	Tarential (~Tarential@li472-156.members.linode.com) has joined #haskell
2013-03-25 03:46:03	-->	Valodim_ (~Valodim@mail.mugenguild.com) has joined #haskell
2013-03-25 03:46:07	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 264 seconds)
2013-03-25 03:46:09	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 03:46:09	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Excess Flood)
2013-03-25 03:46:13	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-25 03:46:15	<--	sm (~user@li229-222.members.linode.com) has quit (Read error: Connection reset by peer)
2013-03-25 03:46:17	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-03-25 03:46:24	<--	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (Ping timeout: 256 seconds)
2013-03-25 03:46:25	-->	epta (~ggg@toje.ws) has joined #haskell
2013-03-25 03:46:26	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-25 03:46:27	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-25 03:46:35	-->	gdeest (~gael@ns357861.ovh.net) has joined #haskell
2013-03-25 03:46:36	-->	ski_ (~ski@c80-216-142-165.bredband.comhem.se) has joined #haskell
2013-03-25 03:46:39	<--	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has quit (Remote host closed the connection)
2013-03-25 03:46:42	-->	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-25 03:46:42	-->	tavelram_ (tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-03-25 03:46:47	-->	pikhq (~pikhq@75-163-181-249.clsp.qwest.net) has joined #haskell
2013-03-25 03:46:53	<--	mrd_ (~md@50.57.107.153) has quit (Read error: Connection reset by peer)
2013-03-25 03:47:05	-->	x7 (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-25 03:47:11	-->	MnO2 (~MnO2@nat/yahoo/x-hfvdnmfsenojiuhz) has joined #haskell
2013-03-25 03:47:19	<--	UziMonkey_ (uid184@gateway/web/irccloud.com/x-npbcsriouxkbtftv) has quit (Ping timeout: 264 seconds)
2013-03-25 03:47:22	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 252 seconds)
2013-03-25 03:47:22	<--	soulofpe1ce (~soulofpea@cm242.gamma162.maxonline.com.sg) has quit (Ping timeout: 252 seconds)
2013-03-25 03:47:22	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 03:47:22	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (Ping timeout: 252 seconds)
2013-03-25 03:47:22	--	Valodim_ is now known as Valodim
2013-03-25 03:47:22	-->	sm_ (~user@li229-222.members.linode.com) has joined #haskell
2013-03-25 03:47:23	-->	sirchurc1ill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 03:47:23	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 03:47:23	-->	u_ (~phillip@adsl-75-57-186-245.dsl.emhril.sbcglobal.net) has joined #haskell
2013-03-25 03:47:26	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 03:47:27	-->	h_chiro (~h_chiro@p2053-ipbf404kyoto.kyoto.ocn.ne.jp) has joined #haskell
2013-03-25 03:47:33	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 03:47:57	-->	lewis1711 (~chatzilla@122-59-194-155.jetstream.xtra.co.nz) has joined #haskell
2013-03-25 03:48:03	-->	tomejaguar (~tom@81.187.0.149) has joined #haskell
2013-03-25 03:48:17	-->	yriw_ (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-03-25 03:48:32	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 292 seconds)
2013-03-25 03:48:32	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Ping timeout: 292 seconds)
2013-03-25 03:48:32	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-25 03:48:35	-->	dlundy (~dlundy@bubbles.feralhosting.com) has joined #haskell
2013-03-25 03:48:49	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 03:49:10	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 03:49:11	-->	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has joined #haskell
2013-03-25 03:49:19	-->	eviltwin_ (~eviltwin@178.33.68.198) has joined #haskell
2013-03-25 03:49:24	-->	lpvb (~lpvb@199.188.72.31) has joined #haskell
2013-03-25 03:49:25	-->	mrd_ (~md@50.57.107.153) has joined #haskell
2013-03-25 03:49:26	-->	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has joined #haskell
2013-03-25 03:49:42	-->	jaimef (~jaimef@dns.mauthesis.com) has joined #haskell
2013-03-25 03:49:44	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-03-25 03:49:52	lewis1711	https://gist.github.com/lewis1711/5234602 simple implementation of wc to practice using IO, anything particularly unidiomatic here?
2013-03-25 03:49:53	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-25 03:49:53	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-25 03:50:13	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-25 03:50:27	<--	tavelram (tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (Ping timeout: 256 seconds)
2013-03-25 03:50:32	glguy	lewis1711: You don't need to use $ nearly that much
2013-03-25 03:51:08	glguy	For example, this line should be:    let str = "" : [show nLines, show nWords, show nBytes, filename]
2013-03-25 03:51:21	lewis1711	ah yes. they originally had more arguments and I left them there
2013-03-25 03:51:29	lewis1711	good point
2013-03-25 03:51:56	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-25 03:52:10	-->	ZFox (~ZFox@unaffiliated/archeydevil) has joined #haskell
2013-03-25 03:52:34	-->	tippenein (~bo@199.195.252.184) has joined #haskell
2013-03-25 03:52:46	Cale	If you prefer, you're also allowed to put multiple declarations into a single let
2013-03-25 03:52:59	--	lispy_ is now known as lispy
2013-03-25 03:53:05	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Client Quit)
2013-03-25 03:53:30	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 03:54:02	-->	JoeHazzers_ (~Joe@area11.joehazzers.com) has joined #haskell
2013-03-25 03:54:26	<--	Thomyho4 (~thomyho@mnhm-4d0129c3.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-25 03:54:47	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 03:55:06	<--	sirchurchill (~mrshankly@146.185.21.11) has quit (*.net *.split)
2013-03-25 03:55:06	<--	hanDerPeder (~peder@178.79.170.49) has quit (*.net *.split)
2013-03-25 03:55:06	<--	JoeHazzers (~Joe@area11.joehazzers.com) has quit (*.net *.split)
2013-03-25 03:55:06	<--	chrisirc_ (~chrisirc@static.206.51.47.78.clients.your-server.de) has quit (*.net *.split)
2013-03-25 03:55:06	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (*.net *.split)
2013-03-25 03:55:06	--	JoeHazzers_ is now known as JoeHazzers
2013-03-25 03:55:18	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 03:55:18	-->	sanemat (~sanemat@134.208.138.210.vmobile.jp) has joined #haskell
2013-03-25 03:55:38	lewis1711	so it has the same syntax as a let outside of the do syntax?
2013-03-25 03:55:41	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-25 03:55:45	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-25 03:56:14	Clint	lewis1711: you can also do filename <- fmap head getArgs
2013-03-25 03:56:27	-->	meiji11` (~user@d75-158-40-174.abhsia.telus.net) has joined #haskell
2013-03-25 03:57:33	sw2wolf	:t fmap head
2013-03-25 03:57:34	-->	binroot (~binroot@c-50-134-13-248.hsd1.va.comcast.net) has joined #haskell
2013-03-25 03:57:54	binroot	lambdabot: @pl \xs n -> take n xs ==> flip take
2013-03-25 03:58:03	binroot	\xs n -> take n xs ==> flip take
2013-03-25 03:58:08	binroot	@pl \xs n -> take n xs ==> flip take
2013-03-25 03:58:17	-->	anona (~z31fcs@99-90-197-87.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-03-25 03:58:19	binroot	uhh, how do I use lambdabot? :\
2013-03-25 03:58:31	-->	chrisirc_ (~chrisirc@static.206.51.47.78.clients.your-server.de) has joined #haskell
2013-03-25 03:58:40	sw2wolf	lambdabot is sleeping now :)
2013-03-25 03:58:47	binroot	oh
2013-03-25 03:58:50	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-25 03:58:50	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: No route to host)
2013-03-25 03:59:17	-->	sm__ (~user@li229-222.members.linode.com) has joined #haskell
2013-03-25 04:00:35	<--	tzxn4 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-03-25 04:00:36	lewis1711	ok I spent a bit of time looking at the type sig of fmap and comparing it with map. that makes sense. somewhat
2013-03-25 04:00:56	-->	x7_ (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-25 04:01:06	lewis1711	so there is a functor that makes a list, which is expressed as [] ?
2013-03-25 04:01:08	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 256 seconds)
2013-03-25 04:01:10	External`	lewis1711: Why not use Text.Printf or something like that?
2013-03-25 04:01:13	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-03-25 04:01:13	<--	soulofpeace (~soulofpea@202.156.162.242) has quit (Ping timeout: 264 seconds)
2013-03-25 04:01:14	-->	bananagram (~bot@98.198.236.112) has joined #haskell
2013-03-25 04:01:17	<--	binroot (~binroot@c-50-134-13-248.hsd1.va.comcast.net) has quit (Client Quit)
2013-03-25 04:01:26	lewis1711	didn't know it existed, will look it up
2013-03-25 04:02:29	-->	ZFox_ (~ZFox@unaffiliated/archeydevil) has joined #haskell
2013-03-25 04:02:40	-->	mrd__ (~md@50.57.107.153) has joined #haskell
2013-03-25 04:02:46	-->	tippenei1 (~bo@199.195.252.184) has joined #haskell
2013-03-25 04:02:50	<--	juhp (~petersen@redhat/juhp) has quit (Ping timeout: 256 seconds)
2013-03-25 04:02:55	<--	pettter (pettter@stalin.acc.umu.se) has quit (Ping timeout: 264 seconds)
2013-03-25 04:03:27	-->	pettter (pettter@stalin.acc.umu.se) has joined #haskell
2013-03-25 04:03:51	<--	Philippa (~user@77.101.187.37) has quit (Ping timeout: 264 seconds)
2013-03-25 04:04:17	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 04:04:17	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Excess Flood)
2013-03-25 04:04:39	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-25 04:05:06	<--	ZFox (~ZFox@unaffiliated/archeydevil) has quit (Remote host closed the connection)
2013-03-25 04:05:07	<--	notdan (~h@unaffiliated/notdan) has quit (Ping timeout: 264 seconds)
2013-03-25 04:05:07	<--	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has quit (Write error: Connection reset by peer)
2013-03-25 04:05:07	<--	mrd_ (~md@50.57.107.153) has quit (Write error: Broken pipe)
2013-03-25 04:05:13	-->	jonaias (~jonaias@200-148-10-25.dsl.telesp.net.br) has joined #haskell
2013-03-25 04:05:23	-->	parcs (~patrick@ool-18b90e93.dyn.optonline.net) has joined #haskell
2013-03-25 04:05:25	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 04:05:26	-->	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has joined #haskell
2013-03-25 04:05:26	<--	notdan (~h@ppp91-79-123-199.pppoe.mtu-net.ru) has quit (Changing host)
2013-03-25 04:05:26	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-03-25 04:05:40	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 256 seconds)
2013-03-25 04:05:44	<--	bytbox (~s@srl.student.umd.edu) has quit (Ping timeout: 255 seconds)
2013-03-25 04:05:49	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Ping timeout: 256 seconds)
2013-03-25 04:05:49	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Ping timeout: 256 seconds)
2013-03-25 04:06:16	-->	u__ (~phillip@adsl-75-57-186-245.dsl.emhril.sbcglobal.net) has joined #haskell
2013-03-25 04:06:18	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-25 04:06:18	-->	jonke (~quassel@h87-96-186-149.dynamic.se.alltele.net) has joined #haskell
2013-03-25 04:06:39	lambdabot	flip flip (flip take) . ((==>) .) . flip take
2013-03-25 04:06:39	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-25 04:06:43	lambdabot	flip flip (flip take) . ((==>) .) . flip take
2013-03-25 04:06:43	lambdabot	Functor f => f [b] -> f b
2013-03-25 04:06:49	<--	u_ (~phillip@adsl-75-57-186-245.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	<--	sirchurc1ill (~mrshankly@146.185.21.11) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	<--	sm_ (~user@li229-222.members.linode.com) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	<--	tomejaguar (~tom@81.187.0.149) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	<--	tippenein (~bo@199.195.252.184) has quit (Ping timeout: 252 seconds)
2013-03-25 04:06:49	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 04:07:13	<--	sanemat (~sanemat@134.208.138.210.vmobile.jp) has quit (Ping timeout: 254 seconds)
2013-03-25 04:07:44	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-25 04:08:07	-->	ski (~ski@c80-216-142-165.bredband.comhem.se) has joined #haskell
2013-03-25 04:08:10	-->	arkeet (arkeet@unaffiliated/nereid) has joined #haskell
2013-03-25 04:08:19	-->	sirchurchill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 04:08:25	-->	mike2 (~michael@coaxial.xivilization.net) has joined #haskell
2013-03-25 04:08:25	<--	mike2 (~michael@coaxial.xivilization.net) has quit (Changing host)
2013-03-25 04:08:25	-->	mike2 (~michael@unaffiliated/mike1703) has joined #haskell
2013-03-25 04:08:59	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 260 seconds)
2013-03-25 04:09:06	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-25 04:09:18	<--	ski_ (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-25 04:09:22	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-03-25 04:09:33	-->	plutoniix (~plutoniix@node-xur.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-25 04:10:33	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-03-25 04:11:36	cschneid	This code works: https://gist.github.com/cschneid/5ac84c9815f61330dc93 but gives me Stack overflow errors when run on biggish input.  How would I force it to be strict on updating the Map, so I don't build a giant tree there that's not needed
2013-03-25 04:12:00	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-25 04:13:08	<--	kmels (~kmels@frbg-5d84f698.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-25 04:13:14	<--	kmels__ (~kmels@frbg-5d84f698.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-25 04:13:33	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has left #haskell
2013-03-25 04:14:03	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-25 04:15:07	-->	Philippa (~user@cpc21-harb8-2-0-cust804.perr.cable.virginmedia.com) has joined #haskell
2013-03-25 04:15:29	-->	binroot (~binroot@c-50-134-13-248.hsd1.va.comcast.net) has joined #haskell
2013-03-25 04:15:42	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-03-25 04:15:53	--	nwf_ is now known as nwf
2013-03-25 04:16:01	liyang	cschneid: use Data.Map.Strict or Data.EnumMap.Strict from enummapset-th.
2013-03-25 04:16:21	cschneid	liyang: yeah, I landed on Data.Map.Strict - but my ghc doesn't find it. Is it a cabal installed lib?
2013-03-25 04:16:50	binroot	Can every function be written in point-free notation?
2013-03-25 04:17:05	liyang	cschneid: it's not the map that's big. (Assuming your input is ASCII, you should only have <128 entries.) It looks like you have lots lazy thunks.
2013-03-25 04:17:14	cschneid	liyang: right.
2013-03-25 04:17:26	cschneid	liyang: new to haskell, so I know what to problem is, but not really how to run around fixing it
2013-03-25 04:17:27	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 04:17:28	liyang	cschneid: which version of ghc and containers?
2013-03-25 04:17:33	-->	ben22 (~benblue20@S010600226b80ad3e.cg.shawcable.net) has joined #haskell
2013-03-25 04:17:34	-->	pikhq_ (~pikhq@75-163-219-50.clsp.qwest.net) has joined #haskell
2013-03-25 04:17:38	cschneid	liyang: cabal install containers found it, moving on :)
2013-03-25 04:17:39	<--	pikhq (~pikhq@75-163-181-249.clsp.qwest.net) has quit (Ping timeout: 256 seconds)
2013-03-25 04:17:43	ben22	anybody know how I can SORT an infinite list?
2013-03-25 04:17:46	cschneid	The Glorious Glasgow Haskell Compilation System, version 7.4.2
2013-03-25 04:18:01	shachaf	ben22: You have rather limited options.
2013-03-25 04:18:10	ben22	like this shachaf
2013-03-25 04:18:19	cschneid	liyang: so. how do I hunt down what's up with the code such that it doesn't work. Specifically, this happens: Stack space overflow: current size 8388608 bytes.
2013-03-25 04:18:29	ben22	how do I execute haskell void function code here?
2013-03-25 04:18:39	ben22	I want to execute this
2013-03-25 04:18:40	ben22	[ 2^(i-j) * 3^(j-k) * 5^k | i <- [0..], j <- [0..i], k <- [0..j] ]
2013-03-25 04:18:42	sproingie	binroot: not entirely.  flip for example can't be
2013-03-25 04:18:48	cschneid	> [ 2^(i-j) * 3^(j-k) * 5^k | i <- [0..], j <- [0..i], k <- [0..j] ]
2013-03-25 04:18:50	lambdabot	  [1,2,3,5,4,6,10,9,15,25,8,12,20,18,30,50,27,45,75,125,16,24,40,36,60,100,54...
2013-03-25 04:18:50	shachaf	What is "void function code"?
2013-03-25 04:19:10	ben22	cschneid, did it for me
2013-03-25 04:19:22	ben22	see how it's not sorte
2013-03-25 04:19:26	ben22	I want to sort this
2013-03-25 04:19:38	ben22	but I have no idea!!!
2013-03-25 04:19:45	sproingie	sort an infinite list?
2013-03-25 04:19:48	ben22	btw cschneid how did you do that?
2013-03-25 04:19:53	cschneid	ben22: the > up front
2013-03-25 04:20:00	ben22	> hi
2013-03-25 04:20:01	lambdabot	  Not in scope: `hi'
2013-03-25 04:20:02	lambdabot	 Perhaps you meant one of these:
2013-03-25 04:20:02	lambdabot	   `pi' (imported from ...
2013-03-25 04:20:08	ben22	oh ok thx!
2013-03-25 04:20:38	cschneid	liyang: so how do I go about hunting down where my leak is? Presumably this code has no reason to expand out, so I'm leaking thunks. But where, and then what's the fix
2013-03-25 04:20:40	ben22	sproingie, I just need it like this [1,2,3,4,5,6,8,9,15]
2013-03-25 04:20:40	liyang	cschneid: not a helpful reply, but in practice I use intuition. :<
2013-03-25 04:20:47	cschneid	:-/
2013-03-25 04:20:59	cschneid	I don't have that yet. All my ruby knowledge isn't much help here
2013-03-25 04:21:03	cmears	There is a package for testing assertions about thunks that might help
2013-03-25 04:21:05	binroot	sproingie: thanks
2013-03-25 04:21:14	ben22	so it is impossible to sort an infinite list right
2013-03-25 04:21:22	cmears	So you can say "here this should not be a thunk" and have it tested
2013-03-25 04:21:38	pharaun	oh nice
2013-03-25 04:21:41	cschneid	ben22: yes. the next value could always be the smallest. So you can't know its sorted until you look at every value
2013-03-25 04:21:54	cschneid	cmears: 1) awesome. 2) This seems like an easy problem. This isn't rocket-science code
2013-03-25 04:22:06	ben22	ok thanks guys. hugs and kisses! :)
2013-03-25 04:22:19	<--	appamatto (~appamatto@65.19.130.32) has quit (Changing host)
2013-03-25 04:22:19	-->	appamatto (~appamatto@copyfree/advocate/appamatto) has joined #haskell
2013-03-25 04:22:29	liyang	cschneid: if you want to keep using the lazy Data.Map, you'll want to make sure you're inserting the result rather than the unevalutated (getOrDefault key freqs + 1).
2013-03-25 04:22:30	sproingie	if you can prove your function has global minima, you can sort it in chunks, but no general purpose sort can prove that
2013-03-25 04:22:33	cschneid	odd that it's so easy to screw up memory allocations like that. I assume it's more my fault than the language, but, I don't know what bit of intuition I'm missing
2013-03-25 04:22:40	cschneid	liyang: how.
2013-03-25 04:22:50	<--	squidz (~albert@141.84.69.76) has quit (Ping timeout: 255 seconds)
2013-03-25 04:23:03	cschneid	liyang: and strict map didn't fix it
2013-03-25 04:23:07	cmears	cschneid, the package is "ghc-heap-view" and GHC.AssertNF is the module
2013-03-25 04:23:08	-->	slack1256 (~slack@181-160-227-156.baf.movistar.cl) has joined #haskell
2013-03-25 04:23:15	ben22	> show "The cake is a lie"
2013-03-25 04:23:16	lambdabot	  "\"The cake is a lie\""
2013-03-25 04:23:24	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 04:23:28	liyang	cschneid: ! patterns or seq.
2013-03-25 04:23:35	<--	stevec (~stevec@50-0-190-223.dsl.dynamic.sonic.net) has quit (Quit: Leaving...)
2013-03-25 04:23:38	<--	nilg``` (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-03-25 04:23:39	-->	William (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has joined #haskell
2013-03-25 04:23:40	liyang	(or rnf from deepseq.)
2013-03-25 04:23:43	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 04:23:56	cschneid	liyang: is that two or three suggestions (off to google how seq and such work)
2013-03-25 04:23:59	cschneid	and what do you mean patterns
2013-03-25 04:24:03	--	William is now known as Guest65522
2013-03-25 04:24:06	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 256 seconds)
2013-03-25 04:24:16	liyang	Yes reasoning about space usage should be simple, but unfortunately it's not. :<
2013-03-25 04:24:18	-->	helgikrs (~helgikrs@89.17.128.56) has joined #haskell
2013-03-25 04:24:24	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 04:24:44	elliott	I'll take complex space usage reasoning for the advantages we get (like properly-composable algorithms)
2013-03-25 04:24:54	--	preflex_ is now known as preflex
2013-03-25 04:25:00	cschneid	elliott: which is why I'm trying to learn
2013-03-25 04:25:09	cschneid	very disheartening that my simple algorithm just doesn't work due to the laziness.
2013-03-25 04:25:11	--	tippenei1 is now known as tippenein
2013-03-25 04:25:12	elliott	that was more to liyang
2013-03-25 04:25:24	liyang	elliott: you know that I know that. :p
2013-03-25 04:25:36	elliott	I know you do, and I know you know I know you know you do!
2013-03-25 04:25:42	elliott	cschneid: I could point to very simple things that just don't work due to strictness
2013-03-25 04:26:11	cschneid	elliott: sure, and I'm fine learning the intuition parts. Can somebody just point me to what's wrong in my code for a start? https://gist.github.com/cschneid/5ac84c9815f61330dc93
2013-03-25 04:26:18	elliott	like (head . sort) being an inefficient way to find the minimum element (with an appropriate sort)
2013-03-25 04:26:42	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-25 04:26:50	<--	yriw_ (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (Quit: Leaving)
2013-03-25 04:26:55	elliott	cschneid: I would put a bang (!) on the freqs argument of getFrequencies'
2013-03-25 04:26:59	elliott	i.e. freqs -> !freqs
2013-03-25 04:27:03	elliott	looks like you're building up a big thunk there
2013-03-25 04:27:18	elliott	btw, you can make the process more mechanical with profiling, if you're having trouble building intuition
2013-03-25 04:27:29	elliott	the intuition here is: when you do (getFrequencies' (updateKey key freqs) rest), (updateKey key freqs) isn't evaluated
2013-03-25 04:27:35	-->	Xorlev_ (uid226@gateway/web/irccloud.com/x-vugvenfczultmpgk) has joined #haskell
2013-03-25 04:27:43	elliott	you build up a big chain of promises to build a modified map when it's forced, but only force it at the very end
2013-03-25 04:27:51	cschneid	elliott: can you type out the line of what the bang'd version looks like
2013-03-25 04:27:57	cschneid	elliott: right, I figure it's that
2013-03-25 04:28:01	elliott	getFrequencies' !freqs (key:rest) = getFrequencies' (updateKey key freqs) rest
2013-03-25 04:28:08	elliott	you need to turn on the BangPatterns language extension; an alternative way to write it would be
2013-03-25 04:28:14	elliott	getFrequencies' freqs (key:rest) = freqs `seq` getFrequencies' (updateKey key freqs) rest
2013-03-25 04:28:24	elliott	this just forces freqs to be evaluated whenever (getFrequencies' (updateKey key freqs) rest) is
2013-03-25 04:28:34	cschneid	huh, ok
2013-03-25 04:28:39	elliott	so that as you recurse further, the updated Map keeps getting evaluated at each step
2013-03-25 04:28:40	cschneid	bangpatterns is just a nice way to say that
2013-03-25 04:28:50	elliott	yeah
2013-03-25 04:28:58	cschneid	ok, how do I do language extentions
2013-03-25 04:29:05	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-03-25 04:29:06	elliott	{-# LANGUAGE BangPatterns #-} at the top of your source file
2013-03-25 04:29:32	-->	tomh_ (uid501@gateway/web/irccloud.com/x-huhrtvucbuqrzipx) has joined #haskell
2013-03-25 04:29:35	cschneid	that did indeed fix my problem
2013-03-25 04:29:39	elliott	I should say since it's a common misconception: (x `seq` x) is the same thing as x (in other words, if you define: force !x = x -- it doesn't do anything)... (x `seq` y) just means "when you evaluate y, also evaluate x"
2013-03-25 04:29:44	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-25 04:29:49	elliott	(so (x `seq` x) is "when you evaluate x, also evaluate x")
2013-03-25 04:30:02	cschneid	yeah, saw that when I searched up seq
2013-03-25 04:30:12	cschneid	that it's just a forced data connection between two items
2013-03-25 04:30:23	cschneid	and a connection between something and itself doesn't add anything
2013-03-25 04:30:24	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-03-25 04:30:58	cschneid	elliott: thanks a bunch for walking me through this. I'll probably go through the profiler route next time I run into this so I can learn that approach
2013-03-25 04:31:31	elliott	yeah, GHC has some very good profiling tools, though I admit I've never figured out how to read the heap profiling output
2013-03-25 04:31:43	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 04:32:25	cschneid	elliott: it's weird just how foreign a lot of this is. It's not the happy-path, it's the things that trip you up are so different
2013-03-25 04:32:43	-->	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has joined #haskell
2013-03-25 04:32:47	cschneid	I can do function calling, and even easy monads right away. whatever. But this thunk leak totally stymied me.
2013-03-25 04:33:01	-->	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has joined #haskell
2013-03-25 04:33:08	elliott	the evaluation model takes a lot of getting used to
2013-03-25 04:33:10	NemesisD	have any of you guys used shake for anything?
2013-03-25 04:33:32	monochrom	lazy evaluation is unfamiliar. so you start assuming, and assuming wrong things. but see my http://www.vex.net/~trebla/haskell/lazy.xhtml
2013-03-25 04:33:46	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-25 04:34:01	slack1256	shake the build system?
2013-03-25 04:34:05	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-25 04:34:08	NemesisD	slack1256: yes
2013-03-25 04:34:44	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 04:34:48	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Client Quit)
2013-03-25 04:34:53	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-25 04:35:15	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 04:35:37	-->	stevec (~stevec@50-0-190-223.dsl.dynamic.sonic.net) has joined #haskell
2013-03-25 04:35:37	-->	zero7 (uid10708@gateway/web/irccloud.com/x-lifnjlorrkhuuvkf) has joined #haskell
2013-03-25 04:35:52	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-25 04:35:58	DarkLinkXXXX	I tried install this in eclipse, and then it asked me install some helper executables, which I agreed to. But in the log, I'm seeing a lot of "cabal.exe: permission denied". Do these programs need to be run as administrator?
2013-03-25 04:36:06	<--	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 264 seconds)
2013-03-25 04:36:12	DarkLinkXXXX	http://eclipsefp.github.com/index.html
2013-03-25 04:36:52	slack1256	NemesisD: I had interest in it. but Neil said it was intended for big programs, so if you had programs that could be compiled with 'ghc --make' you should go with that.
2013-03-25 04:37:05	<--	sw2wolf (~czsq888@171.212.254.57) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-25 04:37:11	-->	abumirqaan (uid2969@gateway/web/irccloud.com/x-zunsmrssyhzvgumt) has joined #haskell
2013-03-25 04:37:38	--	Guest65522 is now known as tertl3
2013-03-25 04:37:39	slack1256	I think did a blogpost of some rules used on a complex build system in his work. seemed quite succinct
2013-03-25 04:37:54	sproingie	DarkLinkXXXX: cabal should install things to ~/.cabal.  maybe you previously did a sudo cabal or something that made parts of ~/.cabal owned by root?
2013-03-25 04:37:56	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 04:38:04	-->	FalkoPeters (uid2565@gateway/web/irccloud.com/x-pvpeizkftkyjxzmz) has joined #haskell
2013-03-25 04:38:04	NemesisD	slack1256: fair. this is not a big project. i just don't like copying around the same busted Makefile from project to project
2013-03-25 04:38:06	<--	yarjar (~Axioma@96-42-29-140.dhcp.mdsn.wi.charter.com) has quit (Read error: Connection reset by peer)
2013-03-25 04:38:33	DarkLinkXXXX	sproingie, Nope. On windows, btw.
2013-03-25 04:38:34	sproingie	my problem with eclipsefp is some of the dependencies simply wouldn't install
2013-03-25 04:38:49	NemesisD	what i really need to do is figure out a faster way to get feedback from my tests. using cabal-dev to build and run tests takes about 4 seconds on this pretty small project
2013-03-25 04:39:05	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-25 04:39:18	sproingie	DarkLinkXXXX: ah, don't know.  i certainly didn't need escalation to cabal-install anything
2013-03-25 04:39:33	DanielDiaz	Hello, is there a standard library to work with polynomials?
2013-03-25 04:39:36	DarkLinkXXXX	Maybe it's using different paramters though. There was also an "Install for this user only" box that I unchecked. So it might trying to  install in C:\ProgramFiles somewhere.
2013-03-25 04:39:37	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-25 04:39:47	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 04:40:08	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 04:40:14	stevec	noob pattern match q: Let's say I have data Car = Car Color Make Model, and data Cars = Cars [Car] and I want to define an instance Show Cars in which, to start, I have a simple case statement like show cars = case cars of Cars(c:cs) -> show(c) ++ " " ++ show(Cars(cs))   ...
2013-03-25 04:40:14	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 04:40:16	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-25 04:40:30	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-25 04:41:24	shachaf	You should give up on the "function(argument)" syntax sooner rather than later -- it's "function argument" -- but OK.
2013-03-25 04:41:25	--	preflex_ is now known as preflex
2013-03-25 04:41:56	stevec	now I want a higher precedence match where I do something else, like Cars((Car Red _ _ c):cs) -> "It's Red!" ++ show(c) ++ " " ++ show(Cars(cs))   ...
2013-03-25 04:42:04	stevec	(sure, re: style)
2013-03-25 04:42:35	-->	nilg (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has joined #haskell
2013-03-25 04:42:40	stevec	I guess I don't get how I do the pattern match *and* have a car ("c") variable I can use on the right side
2013-03-25 04:42:50	shachaf	Just the way you wrote it, I assume.
2013-03-25 04:43:00	--	mrd__ is now known as mrd
2013-03-25 04:43:01	latro`a	the way you wrote it works fine, yeah
2013-03-25 04:43:07	<--	mrd (~md@50.57.107.153) has quit (Changing host)
2013-03-25 04:43:07	-->	mrd (~md@debian/developer/mrd) has joined #haskell
2013-03-25 04:43:16	latro`a	except you have one too many _
2013-03-25 04:43:19	latro`a	but that's a minor error
2013-03-25 04:43:52	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-25 04:43:55	stevec	it's Car Color Make Model ...
2013-03-25 04:43:55	<--	nilg (~user@ALagny-551-1-192-225.w83-112.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-03-25 04:44:00	<--	latermus1 (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-25 04:44:14	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-25 04:44:19	latro`a	you have Car Red _ _ c
2013-03-25 04:44:26	latro`a	this makes Car have 4 arguments, not 3
2013-03-25 04:44:36	stevec	I'm getting "should have 3 arguments, but has been given 4"
2013-03-25 04:44:50	shachaf	stevec: Ah, then it's what latro`a said.
2013-03-25 04:44:50	latro`a	you want Car Red _ c
2013-03-25 04:45:05	stevec	ah interesting...
2013-03-25 04:45:11	shachaf	A Car looks like this: Car someColour someMake someMoudel
2013-03-25 04:45:15	coppro	no
2013-03-25 04:45:18	<--	centrinia_ (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-25 04:45:23	coppro	what stevec wants is c@(Car Red _ _)
2013-03-25 04:45:23	shachaf	('u's are for elliott)
2013-03-25 04:45:25	<--	notdan (~h@unaffiliated/notdan) has quit (Ping timeout: 256 seconds)
2013-03-25 04:45:34	stevec	so intuitively it seems like then I'd be dropping the wildcard of Model...
2013-03-25 04:45:35	shachaf	Oh, that's also true.
2013-03-25 04:45:44	 *	shachaf didn't look carefully enough at what was happening.
2013-03-25 04:45:44	latro`a	I think he may have wanted that, but that will result in infinite recursion
2013-03-25 04:45:49	latro`a	I think
2013-03-25 04:45:51	latro`a	oh wait, no
2013-03-25 04:45:52	latro`a	nvm
2013-03-25 04:45:52	stevec	(btw, dropping the last wildcard works...)
2013-03-25 04:45:58	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-03-25 04:46:03	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 04:46:04	slack1256	how well is doing the llvm backend on the nofib suite?
2013-03-25 04:46:07	latro`a	it does, but I think it does something different from what you wanted
2013-03-25 04:46:10	coppro	stevec: you want c to be the Car, right?
2013-03-25 04:46:20	stevec	coppro: yeah
2013-03-25 04:46:22	slack1256	how long until we welcome our new llvm overlords?
2013-03-25 04:46:25	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-03-25 04:46:31	coppro	yeah, then use  my snippet
2013-03-25 04:46:40	coppro	http://www.haskell.org/tutorial/patterns.html
2013-03-25 04:46:47	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 260 seconds)
2013-03-25 04:47:05	shachaf	stevec: Usually you wouldn't write this using explicit recursion, of course. But all in its good time.
2013-03-25 04:47:19	-->	tim1 (~tim@159.182.183.6) has joined #haskell
2013-03-25 04:47:40	<--	ben22 (~benblue20@S010600226b80ad3e.cg.shawcable.net) has quit (Quit: Leaving)
2013-03-25 04:47:49	stevec	ah awesome, saw that in LYAHFGG but blew through it the first time
2013-03-25 04:48:21	stevec	well, i'm determined to be recusion-crazy for now
2013-03-25 04:48:29	stevec	in good lisp form ;)
2013-03-25 04:49:21	-->	prock_ (~prock@r74-192-192-30.bcstcmta02.clsttx.tl.dh.suddenlink.net) has joined #haskell
2013-03-25 04:49:23	slack1256	ah that's good, I did the same thing about being recursion-crazy
2013-03-25 04:49:29	-->	ndngvr` (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-25 04:50:44	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-03-25 04:51:05	stevec	i'll optimize at some point
2013-03-25 04:51:19	--	srcerer_ is now known as srcerer
2013-03-25 04:51:27	shachaf	Recursion is low-level.
2013-03-25 04:51:45	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-25 04:52:03	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 04:52:06	-->	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 04:52:22	<--	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has quit (Changing host)
2013-03-25 04:52:22	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-25 04:52:56	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 245 seconds)
2013-03-25 04:53:54	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-25 04:54:49	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-25 04:54:52	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 04:55:11	-->	Axioma (~Axioma@96-42-29-140.dhcp.mdsn.wi.charter.com) has joined #haskell
2013-03-25 04:55:14	DanielDiaz	Any recommendations about a library to work with polynomials?
2013-03-25 04:56:18	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-25 04:57:23	-->	m3ga (~erikd@112-213-172-127.bb.ispone.net.au) has joined #haskell
2013-03-25 04:57:29	<--	tanakh (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 255 seconds)
2013-03-25 04:58:14	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (*.net *.split)
2013-03-25 04:58:14	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (*.net *.split)
2013-03-25 04:58:14	<--	sirchurchill (~mrshankly@146.185.21.11) has quit (*.net *.split)
2013-03-25 04:58:14	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (*.net *.split)
2013-03-25 04:58:22	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 256 seconds)
2013-03-25 04:58:28	kfish	DanielDiaz, what do you want to do with polynomials?
2013-03-25 04:58:50	<--	MrMeh` (~blerg@c-24-99-197-135.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-03-25 04:59:04	<--	MnO2 (~MnO2@nat/yahoo/x-hfvdnmfsenojiuhz) has quit (Quit: MnO2)
2013-03-25 04:59:25	<--	rfw (~rfw@thor.rfw.name) has quit (Ping timeout: 246 seconds)
2013-03-25 04:59:25	<--	lattenwald (~qalex@195.218.191.171) has quit (Ping timeout: 246 seconds)
2013-03-25 04:59:25	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 04:59:26	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-25 05:00:09	-->	sirchurchill (~mrshankly@146.185.21.11) has joined #haskell
2013-03-25 05:00:35	DanielDiaz	Well, I want a type to represent them and use them. And root finding would be awesome too.
2013-03-25 05:00:35	-->	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-25 05:01:50	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-03-25 05:01:50	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-25 05:02:01	<--	stevec (~stevec@50-0-190-223.dsl.dynamic.sonic.net) has quit (Quit: Leaving...)
2013-03-25 05:02:32	-->	sellout-1 (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-25 05:02:37	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 05:02:37	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-25 05:02:49	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 05:03:00	<--	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 05:03:10	--	amatsu is now known as amatsu\idle
2013-03-25 05:04:11	<--	wyfrn (~wyfrn@p5B2BDE0E.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-25 05:04:13	cmears	I guess the "polynomial" package is worth a look (:
2013-03-25 05:05:30	kfish	and dsp for http://hackage.haskell.org/packages/archive/dsp/0.2.1/doc/html/Polynomial-Roots.html
2013-03-25 05:06:19	DanielDiaz	cmears: Yes, I already saw it, but didn't see contributions for a while, when the library is not that complete. Not a big deal since I can contribute myself, but I wanted to have more opinions in hands.
2013-03-25 05:07:09	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-25 05:08:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 05:08:46	<--	marchdown (~marchdown@37-146-205-166.broadband.corbina.ru) has quit (Ping timeout: 245 seconds)
2013-03-25 05:08:50	-->	paintcan (~user@108.162.180.237) has joined #haskell
2013-03-25 05:08:53	<--	slack1256 (~slack@181-160-227-156.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-03-25 05:08:57	--	sellout-1 is now known as sellout
2013-03-25 05:09:10	alang	@src abs
2013-03-25 05:09:10	lambdabot	Source not found. You type like i drive.
2013-03-25 05:10:04	-->	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-25 05:10:31	DanielDiaz	kfish: but dsp represents polynomials by lists and it doesn't look orientated to provide a rich interface.
2013-03-25 05:10:35	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Remote host closed the connection)
2013-03-25 05:10:59	<--	jml (~jml@unaffiliated/jml) has quit (Ping timeout: 252 seconds)
2013-03-25 05:11:23	DanielDiaz	Perhaps the polynomial package is the best point to start with.
2013-03-25 05:11:28	<--	u_quark (~u_quark@athedsl-351837.home.otenet.gr) has quit (Disconnected by services)
2013-03-25 05:11:28	-->	u_quark1 (~u_quark@athedsl-344111.home.otenet.gr) has joined #haskell
2013-03-25 05:11:32	<--	ClaudiusMaximus (~claude@93-97-90-35.zone5.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-25 05:11:35	-->	bradleya_ (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-25 05:11:42	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Read error: No route to host)
2013-03-25 05:12:32	-->	ClaudiusMaximus (~claude@93-97-90-35.zone5.bethere.co.uk) has joined #haskell
2013-03-25 05:12:47	<--	binroot (~binroot@c-50-134-13-248.hsd1.va.comcast.net) has quit (Quit: leaving)
2013-03-25 05:13:28	<--	sellout (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 05:13:32	-->	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has joined #haskell
2013-03-25 05:14:25	-->	dmj (~user@ip-64-134-174-215.public.wayport.net) has joined #haskell
2013-03-25 05:14:29	-->	MnO2 (~MnO2@nat/yahoo/x-fnslzkrdwkqlwvje) has joined #haskell
2013-03-25 05:15:42	-->	tanakh (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has joined #haskell
2013-03-25 05:15:48	dmj	hey guys, anyone know what "primrec" means in the context of natural numbers?
2013-03-25 05:15:57	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 05:16:06	-->	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-25 05:16:06	-->	jml (~jml@unaffiliated/jml) has joined #haskell
2013-03-25 05:17:56	-->	codolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 05:17:56	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 05:18:09	tertl3	recursive?
2013-03-25 05:18:19	luite	i'd  guess primitive recursive
2013-03-25 05:18:31	<--	nade (~nade@WS-ESR1-72-49-94-77.fuse.net) has quit (Quit: nade)
2013-03-25 05:18:32	luite	which is a subset of recursive
2013-03-25 05:19:12	<--	tac (47ef635e@gateway/web/freenode/ip.71.239.99.94) has quit (Ping timeout: 245 seconds)
2013-03-25 05:20:01	-->	wilfredh_ (uid159@gateway/web/irccloud.com/x-wljuwwdlfocmcjfk) has joined #haskell
2013-03-25 05:20:42	--	codolio is now known as dolio
2013-03-25 05:21:29	-->	MOMI (uid4868@gateway/web/irccloud.com/x-yixihrfsumcmrjrq) has joined #haskell
2013-03-25 05:21:42	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-25 05:21:46	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 05:23:36	-->	warpy___ (uid1398@gateway/web/irccloud.com/x-tlukqumfdubkswyz) has joined #haskell
2013-03-25 05:23:49	-->	otto_s (~user@cotb-4d05bfbe.pool.mediaWays.net) has joined #haskell
2013-03-25 05:23:49	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-25 05:24:09	-->	lazard (~david@unaffiliated/davidl) has joined #haskell
2013-03-25 05:24:15	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: 'night)
2013-03-25 05:25:30	<--	cdidd (~cdidd@89-178-168-11.broadband.corbina.ru) has quit (Quit: Leaving)
2013-03-25 05:25:31	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-25 05:25:34	<--	bananagram (~bot@98.198.236.112) has quit (Ping timeout: 256 seconds)
2013-03-25 05:26:40	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-25 05:26:56	<--	otto_s_ (~user@cotb-4db35385.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-25 05:27:23	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 05:28:06	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-25 05:28:17	tgeeky	dmj: I remember reading and studying this paper: http://arxiv.org/pdf/1104.5311v1.pdf
2013-03-25 05:29:04	tgeeky	dmj: I don't want you to waste time deviating from whatever your professors text is, but this might help you put the natural numbers in perspective.
2013-03-25 05:29:34	--	amatsu\idle is now known as amatsu
2013-03-25 05:30:01	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: (quit))
2013-03-25 05:31:41	<--	nexx (~SPS-User@dslb-188-096-172-041.pools.arcor-ip.net) has quit (Ping timeout: 255 seconds)
2013-03-25 05:33:55	<--	jlamothe (~jlamothe@jlamothe.net) has quit (Ping timeout: 260 seconds)
2013-03-25 05:35:27	<--	kennyd_ (~kennyd@93-138-171-125.adsl.net.t-com.hr) has quit (Ping timeout: 276 seconds)
2013-03-25 05:35:40	-->	nexx (~SPS-User@dslb-188-108-178-137.pools.arcor-ip.net) has joined #haskell
2013-03-25 05:35:49	dmj	tgeeky: So this Peano guy made the Natural Numbers a standard by his axioms?
2013-03-25 05:35:53	--	froztbyt1 is now known as froztbyte
2013-03-25 05:36:19	--	Axioma is now known as Enslavedonkeys
2013-03-25 05:36:27	<--	Enslavedonkeys (~Axioma@96-42-29-140.dhcp.mdsn.wi.charter.com) has left #haskell ("Leaving")
2013-03-25 05:36:48	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 05:37:02	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 05:37:09	tgeeky	dmj: I think he's credited with sort of the simplest possible axioms, probably not the only ones
2013-03-25 05:37:21	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-25 05:37:32	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 255 seconds)
2013-03-25 05:38:42	dmj	Ok so primerec is "The natural recursive function generator for NaturalNumber"
2013-03-25 05:38:45	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-25 05:39:01	dmj	the way my numbers are implemented are recursived by default "two == succ one"
2013-03-25 05:39:03	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 260 seconds)
2013-03-25 05:39:06	dmj	recursive
2013-03-25 05:39:08	External`	You know. I was on a C# project and I really wanted to use TPL Dataflow to modularize my code. Problem was the primatives (know as blocks) run concurrently by default and always build queues. So here I have this great modularization tool but I can't get them to run in strict syncronization without the added overhead. This is the greatness of Lazy and Iteratee type things.
2013-03-25 05:39:46	dmj	External' C# and .NET 4 have a Lazy<T>
2013-03-25 05:39:57	External`	Boo
2013-03-25 05:39:59	dmj	There is also a Concurrent_Bag<T> you can wrap your List<T> with
2013-03-25 05:40:08	External`	Double Boo
2013-03-25 05:40:09	-->	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has joined #haskell
2013-03-25 05:40:23	dmj	External': Why boo?
2013-03-25 05:40:24	<--	m3ga (~erikd@112-213-172-127.bb.ispone.net.au) has quit (Quit: disappearing into the sunset)
2013-03-25 05:40:35	DarkLinkXXXX	Umm, what works here doesn't seem to work in ghci. http://learnyouahaskell.com/starting-out#texas-ranges
2013-03-25 05:40:45	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-25 05:40:58	dmj	As with all things in .NET the a concurrent_bag is just an abstraction over a lock
2013-03-25 05:41:04	DarkLinkXXXX	Prelude> removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
2013-03-25 05:41:04	DarkLinkXXXX	<interactive>:2:23: parse error on input `='
2013-03-25 05:41:09	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-25 05:41:42	-->	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined #haskell
2013-03-25 05:41:43	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 246 seconds)
2013-03-25 05:42:00	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 256 seconds)
2013-03-25 05:42:11	elliott	DarkLinkXXXX: you need "let" at the start
2013-03-25 05:42:14	tgeeky	DarkLinkXXXX: 'let'
2013-03-25 05:42:16	elliott	GHCi isn't the same as Haskell files
2013-03-25 05:42:18	-->	myme (~myme@djent.myme.no) has joined #haskell
2013-03-25 05:42:23	DarkLinkXXXX	Ah. Okay.
2013-03-25 05:42:27	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Client Quit)
2013-03-25 05:42:29	tgeeky	> let removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
2013-03-25 05:42:30	lambdabot	  not an expression: `let removeNonUppercase st = [ c | c <- st, c `elem` ['A...
2013-03-25 05:42:56	tgeeky	> let removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']] in removeNonUppercase "This is a test."
2013-03-25 05:42:56	sproingie	lambdabot is itself different
2013-03-25 05:42:57	lambdabot	  "T"
2013-03-25 05:43:23	-->	UziMonkey_ (uid184@gateway/web/irccloud.com/x-wfodyyhbsvrdagcp) has joined #haskell
2013-03-25 05:43:27	sproingie	all the LYAH examples use ghci, what specifically isn't working?
2013-03-25 05:43:36	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-25 05:43:53	sproingie	oh already pasted nevermind.  i'm slow tonight
2013-03-25 05:43:55	DarkLinkXXXX	sproingie, Nevermind. Fixed.
2013-03-25 05:44:00	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-03-25 05:44:08	External`	dmj: Correct me if I'm wrong but Lazy<T> is lazy instantiation not lazy evaluation which is different -- no producer/consumer behaviour there.
2013-03-25 05:44:22	<--	MnO2 (~MnO2@nat/yahoo/x-fnslzkrdwkqlwvje) has quit (Quit: MnO2)
2013-03-25 05:44:24	dmj	> let remNonUp st = [ c | c <- st, c `elem` ['A'..'Z']]
2013-03-25 05:44:25	lambdabot	  not an expression: `let remNonUp st = [ c | c <- st, c `elem` ['A'..'Z']]'
2013-03-25 05:44:32	<--	u_quark1 (~u_quark@athedsl-344111.home.otenet.gr) has quit (Ping timeout: 252 seconds)
2013-03-25 05:44:43	-->	dmj` (~user@ip-64-134-174-215.public.wayport.net) has joined #haskell
2013-03-25 05:45:16	<--	dmj (~user@ip-64-134-174-215.public.wayport.net) has quit (Remote host closed the connection)
2013-03-25 05:45:23	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-25 05:45:38	-->	MnO2 (~MnO2@nat/yahoo/x-azztyjmhkxkltjgd) has joined #haskell
2013-03-25 05:45:47	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 05:46:47	-->	paintcan` (~user@108.162.180.237) has joined #haskell
2013-03-25 05:46:47	-->	DarkLinkXXXX_ (uid10912@gateway/web/irccloud.com/x-xxvvgjfsjpdcalfd) has joined #haskell
2013-03-25 05:46:55	<--	DarkLinkXXXX (~nyan@unaffiliated/darklinkxxxx) has quit (Quit: Leaving)
2013-03-25 05:46:55	--	DarkLinkXXXX_ is now known as DarkLinkXXXX
2013-03-25 05:47:09	<--	IanKelling1 (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has quit (Ping timeout: 276 seconds)
2013-03-25 05:47:15	<--	DarkLinkXXXX (uid10912@gateway/web/irccloud.com/x-xxvvgjfsjpdcalfd) has quit (Changing host)
2013-03-25 05:47:15	-->	DarkLinkXXXX (uid10912@unaffiliated/darklinkxxxx) has joined #haskell
2013-03-25 05:47:15	<--	DarkLinkXXXX (uid10912@unaffiliated/darklinkxxxx) has quit (Changing host)
2013-03-25 05:47:15	-->	DarkLinkXXXX (uid10912@gateway/web/irccloud.com/x-xxvvgjfsjpdcalfd) has joined #haskell
2013-03-25 05:47:30	<--	paintcan (~user@108.162.180.237) has quit (Ping timeout: 264 seconds)
2013-03-25 05:48:44	-->	EarlGray^ (~mitra@195.20.154.2) has joined #haskell
2013-03-25 05:48:44	<--	dmj` (~user@ip-64-134-174-215.public.wayport.net) has quit (Remote host closed the connection)
2013-03-25 05:50:02	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-25 05:50:04	--	newsham_ is now known as newsham
2013-03-25 05:50:15	-->	tranma (~tranma@vl10.gw.ok-labs.com) has joined #haskell
2013-03-25 05:51:02	-->	IanKelling (~ian@c-67-160-118-141.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 05:51:20	-->	AfC (~andrew@jim1020952.lnk.telstra.net) has joined #haskell
2013-03-25 05:51:23	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 05:54:14	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2013-03-25 05:54:50	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-03-25 05:55:07	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-25 05:55:23	-->	dmj (~user@ip-64-134-174-215.public.wayport.net) has joined #haskell
2013-03-25 05:57:32	-->	oitnelis (~oitnelis@unaffiliated/oitnelis) has joined #haskell
2013-03-25 05:58:21	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 252 seconds)
2013-03-25 05:58:49	<--	prock_ (~prock@r74-192-192-30.bcstcmta02.clsttx.tl.dh.suddenlink.net) has quit (Quit: Lost terminal)
2013-03-25 06:01:58	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-25 06:02:33	-->	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has joined #haskell
2013-03-25 06:02:36	<--	DanielDiaz (~DanielDia@50-42-236-189.drr01.stbo.ga.frontiernet.net) has quit (Read error: Connection reset by peer)
2013-03-25 06:02:54	<--	jonaias (~jonaias@200-148-10-25.dsl.telesp.net.br) has quit (Quit: Konversation terminated!)
2013-03-25 06:06:32	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-25 06:08:50	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-25 06:09:00	<--	Mortchek (~danny@unaffiliated/mortchek) has quit (Quit: leaving)
2013-03-25 06:11:01	-->	u_quark (~u_quark@athedsl-344332.home.otenet.gr) has joined #haskell
2013-03-25 06:14:23	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 06:15:29	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 06:15:31	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 06:15:33	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 06:15:43	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-03-25 06:17:08	<--	Sculptor_ (~Sculptor@89.110.220.38) has quit (Quit: Одлазим)
2013-03-25 06:17:36	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-25 06:19:42	<--	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has quit (Remote host closed the connection)
2013-03-25 06:19:59	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 06:20:37	-->	Adlan_ (~adlan@115.85.128.54) has joined #haskell
2013-03-25 06:20:57	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-25 06:22:39	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-25 06:23:28	<--	adlan (~adlan@115.85.128.54) has quit (Ping timeout: 245 seconds)
2013-03-25 06:23:50	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-03-25 06:25:16	<--	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has quit (Quit: ~ Trillian Astra - www.trillian.im ~)
2013-03-25 06:25:33	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 06:25:51	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 06:27:56	-->	clahey (~clahey@208.91.2.2) has joined #haskell
2013-03-25 06:27:57	<--	Zariel- (~zariel@li37-84.members.linode.com) has quit (Read error: Connection reset by peer)
2013-03-25 06:28:45	<--	cl_away (~clahey@208.91.2.2) has quit (Ping timeout: 276 seconds)
2013-03-25 06:29:39	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-25 06:31:50	-->	shintah (bebble@h-136-113.a336.priv.bahnhof.se) has joined #haskell
2013-03-25 06:34:25	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-25 06:34:54	<--	amatsu (~amatsu@125.63.54.161) has quit (Ping timeout: 264 seconds)
2013-03-25 06:35:13	-->	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-03-25 06:36:09	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 06:36:56	<--	kushal (kdas@fedora/kushal) has quit (Read error: Connection reset by peer)
2013-03-25 06:37:18	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-25 06:37:58	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-03-25 06:38:09	-->	seafood (~seafood@48.8.233.220.static.exetel.com.au) has joined #haskell
2013-03-25 06:38:12	<--	pcl1 (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-25 06:38:14	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-25 06:38:31	-->	kamatsu (~Adium@2402:1800:4000:2:f055:a6e8:51b6:5d76) has joined #haskell
2013-03-25 06:38:35	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-25 06:39:16	-->	gentleben_ (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 06:40:08	-->	Derander_ (~Derander@andrew.xen.prgmr.com) has joined #haskell
2013-03-25 06:40:08	-->	petekaz`` (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has joined #haskell
2013-03-25 06:40:31	-->	ique_ (~ique@108-171-189-45.static.cloud-ips.com) has joined #haskell
2013-03-25 06:40:33	-->	klugez_ (kluge@xob.kapsi.fi) has joined #haskell
2013-03-25 06:40:33	-->	vhz_ (~tab@nucleus.snarc.org) has joined #haskell
2013-03-25 06:40:50	<--	seafood (~seafood@48.8.233.220.static.exetel.com.au) has quit (Client Quit)
2013-03-25 06:40:58	-->	lokydor_ (lecornec20@tom.iiens.net) has joined #haskell
2013-03-25 06:41:04	-->	d-q-d (id@dqd.cz) has joined #haskell
2013-03-25 06:41:06	-->	krkini (kini@unaffiliated/kini) has joined #haskell
2013-03-25 06:41:31	-->	certaint1 (~david@www1.d-coded.de) has joined #haskell
2013-03-25 06:41:32	-->	Kinnison_ (NU7a9qgfFu@gateway/shell/pepperfish/x-nhfnkdqutnyiodvh) has joined #haskell
2013-03-25 06:41:40	-->	joeyh_ (~joeyh@2001:41c8:125:49::10) has joined #haskell
2013-03-25 06:41:50	-->	ab9rf_ (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has joined #haskell
2013-03-25 06:41:52	-->	opqdonut_ (opqdonut@pseudo.fixme.fi) has joined #haskell
2013-03-25 06:41:53	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 06:42:03	--	stelleg is now known as stelleg_away
2013-03-25 06:42:04	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 06:42:24	-->	hackedy (~ryan@c-71-197-153-41.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 06:42:30	-->	ortmage1 (williasr@nat/google/x-makibvzsjigegciq) has joined #haskell
2013-03-25 06:42:32	-->	Tehnix_ (~Tehnix@192.81.221.23) has joined #haskell
2013-03-25 06:42:34	<--	meiji11` (~user@d75-158-40-174.abhsia.telus.net) has quit (Read error: Connection reset by peer)
2013-03-25 06:42:38	<--	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (Ping timeout: 256 seconds)
2013-03-25 06:42:50	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-25 06:42:56	-->	elliottc1ble (~me@ell.io) has joined #haskell
2013-03-25 06:43:07	-->	Walther_ (walther@irc.bitcu.be) has joined #haskell
2013-03-25 06:43:08	-->	mlinksva_ (~quassel@rose.makesad.us) has joined #haskell
2013-03-25 06:43:08	-->	xcvii_ (~baja@95.170.86.156) has joined #haskell
2013-03-25 06:43:19	-->	PHO__ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has joined #haskell
2013-03-25 06:43:24	-->	WillB (~wrboyce@willboyce.com) has joined #haskell
2013-03-25 06:43:26	-->	matzo_ (~mvanderha@revue.vtk.be) has joined #haskell
2013-03-25 06:43:30	-->	jrslepak_ (~jrslepak@punchout.ccs.neu.edu) has joined #haskell
2013-03-25 06:43:42	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 06:43:57	-->	bbloom_ (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has joined #haskell
2013-03-25 06:43:57	-->	ninegrid_ (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has joined #haskell
2013-03-25 06:43:59	-->	a11235_ (~a11235@ec2-176-34-243-182.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-03-25 06:43:59	<--	a11235_ (~a11235@ec2-176-34-243-182.eu-west-1.compute.amazonaws.com) has quit (Changing host)
2013-03-25 06:43:59	-->	a11235_ (~a11235@unaffiliated/a11235) has joined #haskell
2013-03-25 06:44:01	-->	Cale_ (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-03-25 06:44:02	-->	kalven_ (calvin@brutaldeluxe.com) has joined #haskell
2013-03-25 06:44:08	-->	machisuji (~machisuji@78.46.83.103) has joined #haskell
2013-03-25 06:44:14	--	hackedy is now known as hackedy_away
2013-03-25 06:44:15	-->	Bigcheese_ (~bigcheese@unaffiliated/bigcheese) has joined #haskell
2013-03-25 06:44:15	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Disconnected by services)
2013-03-25 06:44:17	--	Cale_ is now known as Cale
2013-03-25 06:44:17	-->	ernst_ (~ernst@vs251127.vserver.de) has joined #haskell
2013-03-25 06:44:26	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-25 06:44:27	-->	sohum_ (sohum@2a01:7e00::f03c:91ff:fedf:ca84) has joined #haskell
2013-03-25 06:44:28	-->	jlaire_ (~jlaire@80-248-242-78.cust.suomicom.fi) has joined #haskell
2013-03-25 06:44:41	-->	woozletoff (~saep@p4FC3F3FE.dip.t-dialin.net) has joined #haskell
2013-03-25 06:44:42	-->	davean_ (~davean@vervet.isomerica.net) has joined #haskell
2013-03-25 06:44:45	-->	wei2912_ (wei2912@gateway/shell/elitebnc/x-uskkwnpqfnnqzcrm) has joined #haskell
2013-03-25 06:44:53	-->	Adeon_ (~makrillit@109.73.169.52) has joined #haskell
2013-03-25 06:44:55	-->	deavid (~quassel@ns311218.ovh.net) has joined #haskell
2013-03-25 06:44:57	-->	ghorn_ (ghorn@repl.esden.net) has joined #haskell
2013-03-25 06:45:00	-->	Ralith_ (~ralith@S010678cd8e745fa7.vc.shawcable.net) has joined #haskell
2013-03-25 06:45:00	-->	wormphlegm (~wormphleg@c-24-6-156-103.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 06:45:09	-->	Vq_ (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-03-25 06:45:10	-->	kaol_ (kaol@piperka.net) has joined #haskell
2013-03-25 06:45:12	-->	_yezariaely (arj1@2a01:130:2000:121:230:48ff:fe64:340a) has joined #haskell
2013-03-25 06:45:18	-->	zz_nh2 (~nh2@2001:41d0:1:c648::1) has joined #haskell
2013-03-25 06:45:21	-->	ahihi2 (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-03-25 06:45:25	-->	imphasin1 (~imphasing@ec2-174-129-8-12.compute-1.amazonaws.com) has joined #haskell
2013-03-25 06:45:26	-->	dottedma1 (~dottedmag@mail.dottedmag.net) has joined #haskell
2013-03-25 06:45:28	-->	anders^^_ (~anders@h-37-119.a336.priv.bahnhof.se) has joined #haskell
2013-03-25 06:45:30	-->	tessier_ (~treed@kernel-panic/copilotco) has joined #haskell
2013-03-25 06:45:30	-->	Razz (~tim@kompiler.org) has joined #haskell
2013-03-25 06:45:37	-->	SegFaultAX_ (SegFaultAX@2600:3c01::f03c:91ff:fedf:9620) has joined #haskell
2013-03-25 06:46:11	-->	_zxq9__ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has joined #haskell
2013-03-25 06:46:12	--	tsinnema_ is now known as tsinnema
2013-03-25 06:46:20	<--	Derander (~Derander@andrew.xen.prgmr.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	ique (~ique@108-171-189-45.static.cloud-ips.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	klugez (kluge@xob.kapsi.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	vhz (~tab@nucleus.snarc.org) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	joeyh (~joeyh@2001:41c8:125:49::10) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	lokydor (lecornec20@tom.iiens.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	Belgarion0 (~aoeu@Index.BrokenBrain.se) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	]OLI[ (~oli@raven.linux.ox.ac.uk) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:20	<--	dqd (id@wikipedia/dqd) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	wilfredh_ (uid159@gateway/web/irccloud.com/x-wljuwwdlfocmcjfk) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	certainty (~david@www1.d-coded.de) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	_zxq9_ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	inr (a@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	Walther (walther@irc.bitcu.be) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	kryft (~knybo@james.ics.hut.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	opqdonut (opqdonut@pseudo.fixme.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	jlaire (~jlaire@80-248-242-78.cust.suomicom.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	xcvii (~baja@95.170.86.156) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	Kinnison (~dsilvers@gateway/shell/pepperfish/x-bxsjmrjkvxickzff) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	petekaz` (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:21	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:24	<--	jrslepak (~jrslepak@punchout.ccs.neu.edu) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:24	<--	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:24	<--	PHO_ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	kini (kini@unaffiliated/kini) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	lahwran (lahwran@python/site-packages/lahwran) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	matzo (~mvanderha@revue.vtk.be) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	deavidsedice (~quassel@ns311218.ovh.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	mlinksva (~quassel@rose.makesad.us) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Tehnix (~Tehnix@192.81.221.23) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	FireFly (~firefly@oftn/member/FireFly) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ninegrid (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ortmage (williasr@nat/google/x-pgcirebdlqmwyour) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	-->	inr (~inr@83.226.83.132) has joined #haskell
2013-03-25 06:46:25	<--	yezariaely (arj1@2a01:130:2000:121:230:48ff:fe64:340a) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	yeltzooo (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ghorn (ghorn@repl.esden.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Will| (~wrboyce@willboyce.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	elliottcable (~me@ell.io) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	--	ique_ is now known as ique
2013-03-25 06:46:25	--	gentleben_ is now known as gentleben
2013-03-25 06:46:25	<--	rio_ (~rio@eta-ori.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	a11235 (~a11235@unaffiliated/a11235) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	saep (~saep@p4FC3F3FE.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	sohum (sohum@pdpc/supporter/active/sohum) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	kaol (kaol@piperka.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	imphasing (~imphasing@ec2-174-129-8-12.compute-1.amazonaws.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ernst (~ernst@vs251127.vserver.de) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	davean (~davean@vervet.isomerica.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	wei2912 (wei2912@gateway/shell/elitebnc/x-ufmkvwvhhlmviark) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	machisuji_ (~machisuji@78.46.83.103) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	SegFaultAX (SegFaultAX@2600:3c01::f03c:91ff:fedf:9620) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	nh23 (~nh2@2001:41d0:1:c648::1) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	lopex (uid4272@gateway/web/irccloud.com/x-ekijelsmnqjfgikp) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Adeon (~makrillit@109.73.169.52) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	wormphle2m (~wormphleg@c-24-6-156-103.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Razz_ (~tim@kompiler.org) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	solarus (solarus@c83-254-3-245.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	Bigcheese (~bigcheese@unaffiliated/bigcheese) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	_flow_ (flo@star.freakempire.de) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	-->	rio (~rio@eta-ori.net) has joined #haskell
2013-03-25 06:46:25	<--	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has quit (Remote host closed the connection)
2013-03-25 06:46:25	-->	Belgarion0 (~aoeu@2001:470:28:a1a::90) has joined #haskell
2013-03-25 06:46:25	<--	numeral_ (~numeral@198.23.228.15) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	anders^^ (~anders@h-37-119.a336.priv.bahnhof.se) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	tessier (~treed@kernel-panic/copilotco) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	dottedmag (~dottedmag@altlinux/developer/dottedmag) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	ptrf (ptrf@proteus.pronoia.dk) has quit (Remote host closed the connection)
2013-03-25 06:46:25	<--	petanqk (siniluht@jumi.lut.fi) has quit (Remote host closed the connection)
2013-03-25 06:46:25	-->	ptrf (ptrf@proteus.pronoia.dk) has joined #haskell
2013-03-25 06:46:25	-->	inr_ (a@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has joined #haskell
2013-03-25 06:46:25	-->	petanqk (siniluht@jumi.lut.fi) has joined #haskell
2013-03-25 06:46:25	<--	byorgey_ (~byorgey@LVN513-9.cis.upenn.edu) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	qwr (~qwr@tartu.cyber.ee) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:25	<--	kalven (calvin@brutaldeluxe.com) has quit (Remote host closed the connection)
2013-03-25 06:46:26	-->	solarus (solarus@c83-254-3-245.bredband.comhem.se) has joined #haskell
2013-03-25 06:46:26	<--	shutdown_-h_now (~arjan@nova.helix-nebula.org) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:26	<--	sunnavy_ (~sunnavy@li387-135.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:26	<--	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:26	<--	etabot (~etabot@199.47.72.128) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:26	--	sohum_ is now known as sohum
2013-03-25 06:46:26	--	SegFaultAX_ is now known as SegFaultAX
2013-03-25 06:46:28	--	bbloom_ is now known as bbloom
2013-03-25 06:46:33	-->	numeral (~numeral@198.23.228.15) has joined #haskell
2013-03-25 06:46:41	<--	inr (~inr@83.226.83.132) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:41	<--	jliikka (jliikka@xob.kapsi.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:41	<--	Zouppen (joell@moskova.liittovaltio.fi) has quit (Ping timeout: 245 seconds)
2013-03-25 06:46:47	-->	Zouppen (joell@moskova.liittovaltio.fi) has joined #haskell
2013-03-25 06:46:47	-->	qwr (~qwr@tartu.cyber.ee) has joined #haskell
2013-03-25 06:46:49	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-03-25 06:46:51	--	sohum is now known as Guest12971
2013-03-25 06:46:52	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-25 06:46:52	-->	yeltzooo6 (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has joined #haskell
2013-03-25 06:47:00	-->	]OLI[ (~oli@raven.linux.ox.ac.uk) has joined #haskell
2013-03-25 06:47:02	--	jlaire_ is now known as jlaire
2013-03-25 06:47:03	-->	sunnavy (~sunnavy@li387-135.members.linode.com) has joined #haskell
2013-03-25 06:47:24	-->	kryft (~knybo@130.233.178.230) has joined #haskell
2013-03-25 06:47:26	-->	jliikka (jliikka@xob.kapsi.fi) has joined #haskell
2013-03-25 06:48:08	--	pdxleif_away is now known as pdxleif
2013-03-25 06:48:22	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-03-25 06:48:29	-->	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2013-03-25 06:48:49	-->	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 06:48:49	<--	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has quit (Changing host)
2013-03-25 06:48:49	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-25 06:49:38	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 06:49:43	<--	NemesisD (~NemesisD@50.125.74.242) has quit (Ping timeout: 256 seconds)
2013-03-25 06:49:50	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-25 06:49:50	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-25 06:49:50	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-25 06:49:59	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 255 seconds)
2013-03-25 06:50:34	-->	miclorb (~miclorb@ppp121-44-238-225.lns20.syd7.internode.on.net) has joined #haskell
2013-03-25 06:50:39	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-25 06:51:35	--	Bigcheese_ is now known as Bigcheese
2013-03-25 06:51:38	-->	lahwran- (lahwran@python/site-packages/lahwran) has joined #haskell
2013-03-25 06:51:49	<--	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has quit (Changing host)
2013-03-25 06:51:49	-->	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has joined #haskell
2013-03-25 06:52:13	-->	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has joined #haskell
2013-03-25 06:52:45	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-25 06:54:31	<--	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Quit: Ex-Chat)
2013-03-25 06:55:20	--	Ralith_ is now known as Ralith
2013-03-25 06:55:27	-->	shutdown_-h_now (~arjan@nova.helix-nebula.org) has joined #haskell
2013-03-25 06:59:48	<--	kcj (~casey@unaffiliated/kcj) has quit (Remote host closed the connection)
2013-03-25 06:59:53	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-25 06:59:59	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-25 07:00:15	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-25 07:00:20	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 248 seconds)
2013-03-25 07:00:56	-->	oscar (~quassel@87-53-20-69-static.dk.customer.tdc.net) has joined #haskell
2013-03-25 07:00:59	-->	kfish (~conrad@cm84.eta99.maxonline.com.sg) has joined #haskell
2013-03-25 07:01:02	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 07:02:09	--	Watcher7 is now known as Watcher7|off
2013-03-25 07:02:11	<--	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has quit (Ping timeout: 256 seconds)
2013-03-25 07:03:19	-->	techlife (techlife@218.59.113.120) has joined #haskell
2013-03-25 07:03:28	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-25 07:06:28	<--	AfC (~andrew@jim1020952.lnk.telstra.net) has quit (Quit: Leaving.)
2013-03-25 07:08:00	-->	zhulikas (~Kostas@213.159.34.100) has joined #haskell
2013-03-25 07:08:10	<--	dmj (~user@ip-64-134-174-215.public.wayport.net) has quit (Ping timeout: 246 seconds)
2013-03-25 07:08:19	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-03-25 07:09:01	<--	appamatto (~appamatto@copyfree/advocate/appamatto) has left #haskell
2013-03-25 07:09:17	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-25 07:09:47	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 255 seconds)
2013-03-25 07:10:20	-->	sw2wolf (~czsq888@110.188.69.57) has joined #haskell
2013-03-25 07:10:34	<--	cognominal (~cognomina@37.161.17.39) has quit (Quit: This computer has gone to sleep)
2013-03-25 07:11:04	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-25 07:12:28	-->	Icarot (~Icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 07:13:36	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 07:14:22	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-25 07:14:37	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-03-25 07:15:48	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-03-25 07:16:00	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-25 07:16:51	<--	chirpsalot (~Chirps@unaffiliated/chirpsalot) has quit (Ping timeout: 276 seconds)
2013-03-25 07:17:10	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-25 07:18:23	<--	Icarot (~Icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-25 07:19:11	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-03-25 07:19:14	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 07:22:03	<--	ZFox_ (~ZFox@unaffiliated/archeydevil) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-25 07:22:14	-->	ZFox (~ZFox@unaffiliated/archeydevil) has joined #haskell
2013-03-25 07:22:19	--	ZFox is now known as DarkFox
2013-03-25 07:22:49	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-25 07:23:15	-->	shurikas (~Kostas@195.181.64.50) has joined #haskell
2013-03-25 07:23:20	-->	heruur (~tvh@167-148-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-25 07:23:40	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 256 seconds)
2013-03-25 07:24:42	<--	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has quit (Ping timeout: 256 seconds)
2013-03-25 07:24:48	-->	SuperNoeMan (~SuperNoeM@ec2-23-20-202-208.compute-1.amazonaws.com) has joined #haskell
2013-03-25 07:24:56	SuperNoeMan	what is the best way to install haskell?
2013-03-25 07:25:14	SuperNoeMan	on mac?
2013-03-25 07:26:14	<--	zhulikas (~Kostas@213.159.34.100) has quit (Ping timeout: 245 seconds)
2013-03-25 07:26:36	<--	idntfy (~idntfy@31.210.207.50) has quit (Ping timeout: 276 seconds)
2013-03-25 07:27:20	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-25 07:27:25	-->	totimkopf (~jamesmart@unaffiliated/totimkopf) has joined #haskell
2013-03-25 07:27:27	elliott	SuperNoeMan: you probably want the haskell platform
2013-03-25 07:27:29	elliott	@where haskell-platform
2013-03-25 07:27:29	lambdabot	I know nothing about haskell-platform.
2013-03-25 07:27:31	elliott	@where platform
2013-03-25 07:27:31	lambdabot	http://hackage.haskell.org/platform/
2013-03-25 07:27:45	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 07:28:31	<--	rgr (~user@host-78-149-33-218.as13285.net) has quit (Read error: Connection reset by peer)
2013-03-25 07:28:33	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-25 07:28:52	-->	rgr (~user@host-78-149-33-218.as13285.net) has joined #haskell
2013-03-25 07:29:02	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Max SendQ exceeded)
2013-03-25 07:29:14	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 07:30:52	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-03-25 07:31:23	<--	guy__ (~sft@nullsecurity.net) has quit (Ping timeout: 255 seconds)
2013-03-25 07:32:06	-->	andrewhn_ (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has joined #haskell
2013-03-25 07:33:05	<--	andrewhn_ (cb861d3e@gateway/web/freenode/ip.203.134.29.62) has quit (Client Quit)
2013-03-25 07:34:19	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-25 07:34:58	-->	circle (~circle@203-219-13-238.static.tpgi.com.au) has joined #haskell
2013-03-25 07:35:15	circle	I want to install the "gloss" and "bmp" libraries for haskell
2013-03-25 07:35:50	circle	I've been told to type "cabal install gloss bmp" but I don't have cabal
2013-03-25 07:35:58	elliott	how did you install ghc?
2013-03-25 07:36:03	circle	pacman
2013-03-25 07:36:24	elliott	try installing the cabal-install package
2013-03-25 07:36:31	circle	alright, thank you friend
2013-03-25 07:37:31	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-03-25 07:38:16	circle	this seems to have worked
2013-03-25 07:38:17	circle	thank you
2013-03-25 07:38:27	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-25 07:39:31	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 07:40:01	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-25 07:40:01	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 07:41:10	-->	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has joined #haskell
2013-03-25 07:41:36	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 07:42:38	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-25 07:42:51	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 07:44:36	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-25 07:44:51	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Quit: Scheduled restart to prevent possible database corruption)
2013-03-25 07:45:07	-->	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-03-25 07:45:48	<--	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has quit (Ping timeout: 264 seconds)
2013-03-25 07:45:49	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-25 07:48:36	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-25 07:48:36	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-25 07:48:36	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-25 07:48:58	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 07:49:11	--	d-q-d is now known as dqd
2013-03-25 07:49:18	<--	dqd (id@dqd.cz) has quit (Changing host)
2013-03-25 07:49:19	-->	dqd (id@wikipedia/dqd) has joined #haskell
2013-03-25 07:49:43	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 245 seconds)
2013-03-25 07:50:13	--	pdxleif is now known as pdxleif_away
2013-03-25 07:52:42	-->	piotr (~quassel@e178096020.adsl.alicedsl.de) has joined #haskell
2013-03-25 07:52:45	<--	sw2wolf (~czsq888@110.188.69.57) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-25 07:53:19	<--	kamatsu (~Adium@2402:1800:4000:2:f055:a6e8:51b6:5d76) has quit (Read error: Connection reset by peer)
2013-03-25 07:53:37	-->	kamatsu (~Adium@2402:1800:4000:2:f055:a6e8:51b6:5d76) has joined #haskell
2013-03-25 07:53:42	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-25 07:54:39	-->	coeus (~coeus@static-213-182-110-056-teleos.ewe-ip-backbone.de) has joined #haskell
2013-03-25 07:55:20	-->	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-25 07:55:35	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-03-25 07:59:10	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 252 seconds)
2013-03-25 07:59:35	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has left #haskell
2013-03-25 07:59:37	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-25 08:00:24	-->	bandicoot1 (~arian@188.34.53.208) has joined #haskell
2013-03-25 08:01:13	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-03-25 08:02:32	-->	etabot (~etabot@199.47.72.128) has joined #haskell
2013-03-25 08:02:50	<--	Eduard_Munteanu (~Eduard_Mu@188.25.92.232) has quit (Ping timeout: 256 seconds)
2013-03-25 08:04:14	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-03-25 08:04:51	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-25 08:06:29	<--	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (Ping timeout: 255 seconds)
2013-03-25 08:07:12	<--	External` (~user@cpe-68-175-107-229.nyc.res.rr.com) has quit (Remote host closed the connection)
2013-03-25 08:07:33	-->	__dv__ (~quassel@SD1.retn.net) has joined #haskell
2013-03-25 08:07:45	-->	kennyd (~kennyd@93-138-171-125.adsl.net.t-com.hr) has joined #haskell
2013-03-25 08:09:37	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 08:11:27	<--	lattenwald (~qalex@195.218.191.171) has quit (Read error: Connection reset by peer)
2013-03-25 08:11:38	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-25 08:11:57	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 08:13:27	<--	ben_d (~muus@184-76-107-96.war.clearwire-wmx.net) has quit (Ping timeout: 256 seconds)
2013-03-25 08:14:20	-->	m3ga (~erikd@112-213-172-127.bb.ispone.net.au) has joined #haskell
2013-03-25 08:14:44	-->	osa1 (58fff5fc@gateway/web/freenode/ip.88.255.245.252) has joined #haskell
2013-03-25 08:15:16	osa1	how can I throw a ParseError in a ParsecT function ?
2013-03-25 08:16:29	-->	jfischoff (~jfischoff@66.140.190.154) has joined #haskell
2013-03-25 08:17:17	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-25 08:17:18	-->	lattenwald (~qalex@195.218.191.171) has joined #haskell
2013-03-25 08:17:32	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 08:18:27	--	koninkje is now known as koninkje_away
2013-03-25 08:20:03	notdan	osa1: try 'newErrorMessage' or 'newErrorUnknown'
2013-03-25 08:21:14	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-03-25 08:21:16	<--	kamatsu (~Adium@2402:1800:4000:2:f055:a6e8:51b6:5d76) has quit (Quit: Leaving.)
2013-03-25 08:21:49	osa1	notdan: I alredy have the ParseError, I want to throw it. to be precise, I'm calling `parse` again in a parser function, and I need to throw when `parse` throws an exception
2013-03-25 08:21:56	<--	bandicoot1 (~arian@188.34.53.208) has left #haskell
2013-03-25 08:22:04	-->	kamatsu (~Adium@2402:1800:4000:2:6043:d5d6:16f7:8669) has joined #haskell
2013-03-25 08:22:12	-->	bandicoot (~Thunderbi@188.34.53.208) has joined #haskell
2013-03-25 08:22:27	<--	plutoniix (~plutoniix@node-xur.pool-125-25.dynamic.totbb.net) has quit (Ping timeout: 256 seconds)
2013-03-25 08:22:40	-->	silver (~silver@178.120.13.248) has joined #haskell
2013-03-25 08:23:10	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-03-25 08:24:36	notdan	Well, if you have a ParseError, then 'parse' will return 'Left ...', won't it? And then you can do 'case (parse ..) of Right _ -> ... Left _ -> raise ...'
2013-03-25 08:24:44	notdan	Or maybe I've misunderstood you, sorry
2013-03-25 08:26:16	<--	tranma (~tranma@vl10.gw.ok-labs.com) has quit (Quit: Leaving.)
2013-03-25 08:26:24	<--	kamatsu (~Adium@2402:1800:4000:2:6043:d5d6:16f7:8669) has quit (Client Quit)
2013-03-25 08:26:25	<--	_zxq9__ (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has quit (Quit: Leaving)
2013-03-25 08:26:36	-->	tranma (~tranma@vl10.gw.ok-labs.com) has joined #haskell
2013-03-25 08:26:38	<--	tranma (~tranma@vl10.gw.ok-labs.com) has quit (Client Quit)
2013-03-25 08:26:44	-->	zxq9 (~zxq9@FL1-119-244-167-168.okn.mesh.ad.jp) has joined #haskell
2013-03-25 08:27:29	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-25 08:27:41	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-03-25 08:29:12	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 08:29:38	<--	EarlGray^ (~mitra@195.20.154.2) has quit (Quit: Konversation terminated!)
2013-03-25 08:29:47	--	tkd_ is now known as tkd
2013-03-25 08:30:35	osa1	notdan: you're right except "raise ..." part doesn't work
2013-03-25 08:30:51	osa1	notdan: and by raise you mean "throwError", right ?
2013-03-25 08:32:08	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-25 08:32:16	-->	Beetny (~Beetny@ppp118-208-136-253.lns20.bne1.internode.on.net) has joined #haskell
2013-03-25 08:33:12	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-25 08:33:23	<--	fxr (~user@176.42.186.150) has quit (Ping timeout: 252 seconds)
2013-03-25 08:33:28	<--	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 08:33:32	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-25 08:34:11	-->	charliesome (~textual@124-148-168-157.dyn.iinet.net.au) has joined #haskell
2013-03-25 08:34:56	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 08:34:59	<--	JaRoel (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-25 08:35:16	notdan	osa1: well throwError works only in MonadError
2013-03-25 08:35:23	-->	plutoniix (~plutoniix@node-31u.pool-182-52.dynamic.totbb.net) has joined #haskell
2013-03-25 08:35:35	notdan	osa1: so your 'Right -> ..' part needs to return something of that type too
2013-03-25 08:38:13	-->	ivan____ (~ivan@18.204.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-25 08:40:06	-->	wilfredh_ (uid159@gateway/web/irccloud.com/x-hsaopwipidyuxeqk) has joined #haskell
2013-03-25 08:41:16	<--	imeredith (~ivan@138.193.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 256 seconds)
2013-03-25 08:41:21	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 08:42:19	-->	MrFenix (~JanB@p57A19FA3.dip.t-dialin.net) has joined #haskell
2013-03-25 08:42:41	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-25 08:43:02	<--	oscar (~quassel@87-53-20-69-static.dk.customer.tdc.net) has quit (Ping timeout: 246 seconds)
2013-03-25 08:43:22	-->	lopex (uid4272@gateway/web/irccloud.com/x-iutbubqwnaywsyrp) has joined #haskell
2013-03-25 08:44:34	-->	_flow_ (flo@star.freakempire.de) has joined #haskell
2013-03-25 08:45:34	-->	xcv (~xcv@cpc16-enfi18-2-0-cust79.20-2.cable.virginmedia.com) has joined #haskell
2013-03-25 08:46:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 10:58:14	--	irc: disconnected from server
2013-03-25 10:58:41	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-25 10:58:41	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-25 10:58:41	--	Topic set by monochrom on di, 29 jan 2013 18:36:42
2013-03-25 10:58:41	--	Nicks #haskell: [@ChanServ [[zzz]] [mth] \rs ]OLI[ __dv__ __main__ _anona _br_ _dabradley _flow_ _janne _yezariaely `0660_ `bps `nand` `ramses a11235 aajmakin aavogt ab9rf_ absence abumirqaan acharles_ Adeon_ adimit Adios adnap adnauseam aforemny agundry ahf ahihi ahkurtz akahn akamaus akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b alios alnix alpounet alshain Amadiro amiller anachron_ anders^^ anderse andrewsw_ aninhume1 AntiSpamMeta apaku araujo arbn ARCADIVS Argue aristid arkeet arkx armlesshobo arnihr__ arun asante10111 asQuirreL aszlig Athas AtnNn augur augustl b52 b_jonas bandicoot banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 bens_ bergey` betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld bitonic black_joe blackmir1oxx BlastHardcheese blooberr BMeph bmfx bobry bogner Boney Boreeas Botje_ brainproxy Brando753 brandonw brett BrianHV brisbin brixen_ bstrie_ Bwild bxc Bynbo7 byorgey ByronJohnson c_wraith cads Cale caligula Canar canta canvon carlocci ccxCZ cdntr cduez ceii celery__ certaint1 chance charlesofarrell charliesome chatsiri_ chessguy ChongLi Chousuke chr1s chrisbuchholz_ chrisirc_ chrra CindyLinz circle cjay clahey_ ClaudiusMaximus Clint clog cmears cmsd2 cods cognominal__ colah comak companion_cube confound connelly coppro copumpkin CosmicRa` Counter-Strike cow-orke1 cross crs__ Cryovat cschneid ctype_real1 cwvh1 cynick cyphase d-snp dan_johnsin danols_work danr danvet dario DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander descender dfletcher_ DigitalK1wi dilinger_ dixie djahandarie djanatyn djcoin dju dkasak dlundy dm120769 dmj dmwit dockside1 dogmaT dolio DolphR domingo_ doomlord dottedmag dqd Draconx Draggor drbean DrCode dreixel____ drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT`` duairc_ dumbhat DustyDingo Dybber dyreshark eacameron1 EarlGray earthy ecuderpam edenc_ edsko edtsech_ edwardk edwtjo Eelis eff_ ehamberg eikke ejls eL_Bart0 electrogeek elgot Eliel elliott elliottc1ble elnadi emma endojelly ent- epta ericmj Eridius ernst Erstarrung Estrellas etabot ethercrow etrepum eviltwin_ Excureo eyck ezyang_ f8 fabjan faen FalkoPeters fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow floatingman flori flux folone formalcow fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn_ Ghoul__ gienah Gilly Gothmog_ Gracenotes gseitz gspr guerrill1 Guest22595 Guest24609 Guest36494 Guest41630 Guest48967 Guest76523 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hamid hamishmack hanDerPe1er harrison_ haskellhero heathjs Heffalump helgikrs henk Hermit heruur hiratara hiredman hiroyuki2 hive-mind hiyakashi horlicks hpaste hpc hpd hungryblank hvr hychen hyko IanKelling ibid IbnFirnas Iceland_jack identity idnar ido idoru Igloo ijp ilyanok imeredith imphasing inr_ int-e integral_ Internet13 ion ique ISF_ec09 isomorphic issimus itemad Itkovian iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt jang JaRoel|4d jaspervdj Jaxan jayne jbauman jcao219 jcp jdoliner jedai Jello_Raptor jercos jerojasro jesyspa jfischoff jix jlaire_ jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joar jodaro joe9 JoeHazzers joeyh_ johnw jon-shape joneshf jonke Jonno_FTW Jonte JoshuaA JPohlmann jrib1 jrockway jrslepak_ jtalk jtobin juhp julmae- julmuri junsuijin jyyou k00mi k0ral kadoban_ KaiSforza kakos kallisti kalven KaneTW kaol kaoskorobase Ke kennyd kennyp_ kerrick kevinqcs Khisanth Kinnison KitB__ kith kiwnix kkris kloeri klugez kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr1 kranius_ krig_ krkini kryft kshannon ktosiek Kuba_ kuribas kvey kylcarte kyle__ labo lahwran- lambdabot lan3y latermuse latro`a lattenwald lazard` LeaChim lennart_ lenstr leroux levi lewis1711 liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb lucca luite lulf lusory lzm m3ga_ machisuji magicman majoh maksbotan_ malorie_ mami marienz Martty MasseR mastensg mateu mattp_ matzo_ Maxdamantus mcdonc mceier mcguitan83 McManiaC mechairoi mefisto Megant_ mendez merijn Mewnoid meyersh miasma mietek mike2 mikecaruso1 mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva_ mm_freak mmaruseacph2 MnO2 MoALTz__ mokus mollerstrand MOMI Mon_Ouie monique_ monochrom moonlite_ mornfall morolin mortberg mpu mrd mrdomino_ MrFenix mrko mrshoe_ mspells mullein munro mux myme n_b Nanar nardul Natch natte ndngvr` neena netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg Nimatek ninegrid ninzine Nisstyre nlogax no-n noam noj nonymousa noplamodo not_rfw notdan NougatRillettes Nshag numeral nus-- nwf obcode_ ocharles ofan oitnelis OlegYch opqdonut_ ormaaj Ornedan ortmage1 orzo osfameron osnr_ othiym23 otterdam otters otto_s ousado ozataman ozgura_ paintcan` PaksAway Palmik pantsman ParahSail1n parcs PartyKat2e PatrickRobotham pcapriotti pdxleif_away peddie peltchu pepijndevos perlite permagreen petanqk petantik petekaz`` peterhil pettter pfoetchen pharaun phaul Philippa phischu PHO__ phyrex1an piotr_ Plex- plhk plutoniix pnielsen popz_ pqmodn_ pr predator117 prh prinnysocks PrO_OkI profmakx ps-auxw ptek Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ quaestor quchen quicksilver quuxman qwandor qwr qz_ r126l_ raek raichoo_ raid rainmaker Ralith ramkrsna Raynes Razz rcj_ rcl redjohn reembarking08 reiddraper Reite Rembane rexamophone Rickasaurus rio ritek Riussi rmunoz rmunroe_ robbe- robbert` rossabaker Rotaerk rs0 rsimoes ryanakca s00pcan s_quark SaBer Sagi saiam Saizan sajith samedhi sanemat sarfraz saurik scgilardi schlumpi schovi_ schroedinbug sclv Scott_firebeta SeanTAllen seats SegFaultAX sellout- setmeaway2 Sgeo sgronblo sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shurikas shutdown_-h_now si14 silver_ simon___ simpson sipa1024 sirchurchill sjl ski skp skuggi skyflash SLi sm__ smarter snowylike so Soft sohum solarus solirc Sonderblade sopvop sordina3 SoupEvil Spockz sproingie Squid_Tamer srcerer_ srkila staafl_alt Starfire statusfailed steez stelleg_away stepcut stephe- strax_ suiside sully sunfun sunnavy SuperNoeMan supersym supki sw17ch Swizec t7 tahu takumn tamiko_ tanakh Tarential Targen_ taruti tavelram_ tazjin td123 tdamemrs TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tg tgeeky Th0mas_ The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh ThomasLocke_ thorkilnaur thorsten_no_nick thoughtpolice threedaymonk threesome tim1 timemage tippenein tkd tlaine tmiw TML tobiassj1sten tom4939_ tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek_ totimkopf trep trevize_ tridacty1a trolling tromp tsou tswett ttuegel tunixman tuv tvaalen Twey twomashi tzxn3 u__ u_quark ulfdoz Ulrar_ User_ UziMonkey__ Valodim Varakh vehk verrens Vert Vertue vhz_ vili vlatkoB vmeson vobi volstvok Vorpal voyd_ Vq vramana VZakharov wagle Walther_ warpy___ Watcher7|off waterlaz wchun wei2912 weie_ wereHamster WhereIsMySpoon_ whoops wilfredh_ William_ Will| wjlroe wollw woozletoff wormphlegm wting wto_ wtw wump wunki x7_ xaimus_ xcvii xinming XMunkki xnyhps Xorlev_ xorox90 xpika xplat xraycat xrl__ xrq xxen xymox yacks yam yan_ yano yc4891 yeltzooo6 yiannis_1 yriw_ ysulsky yumike zebr Zedrikov zeiris_ zenzike_ zero7 ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ zz_nh2 Zzompp_]
2013-03-25 10:58:41	--	Channel #haskell: 954 nicks (1 op, 0 halfops, 0 voices, 953 normals)
2013-03-25 10:58:41	--	URL for #haskell: http://www.haskell.org/
2013-03-25 10:58:44	dmj	circle: delete 3 [1..5]
2013-03-25 10:58:52	dmj	== [1,2,4,5]
2013-03-25 10:58:53	--	Mode #haskell [+CLcnpt]
2013-03-25 10:58:53	--	Channel created on zo, 26 nov 2006 07:42:48
2013-03-25 10:59:01	dmj	Hermit: cool :)
2013-03-25 10:59:08	circle	dmj: thanks
2013-03-25 10:59:12	dmj	circle: :m + Data.List
2013-03-25 10:59:15	circle	dmj: what about an element at a specific location?
2013-03-25 10:59:16	--	not_rfw is now known as rfw
2013-03-25 10:59:24	dmj	circle: (!!)
2013-03-25 10:59:29	dmj	circle: gives you the index
2013-03-25 10:59:33	circle	thanks
2013-03-25 11:00:15	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 11:00:22	dmj	circle: np, also, http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-List.html
2013-03-25 11:01:28	<--	itemad (~user@212.0.102.162) has quit (Remote host closed the connection)
2013-03-25 11:01:42	vlatkoB	supki: Yes, it's easy to see now. Should learn to write it down like this myself. Thanks.
2013-03-25 11:02:22	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 11:02:27	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 11:02:45	circle	delete doesn't work
2013-03-25 11:03:00	<--	kiwnix (~egarcia@unaffiliated/kiwnix) has quit (Remote host closed the connection)
2013-03-25 11:03:45	--	tdamemrs is now known as tdammers
2013-03-25 11:04:04	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-25 11:04:15	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Excess Flood)
2013-03-25 11:04:28	dmj	circle: what are you trying?
2013-03-25 11:04:45	circle	delete 3 [1 .. 5]
2013-03-25 11:04:48	-->	hkBst (~marijn@79.170.210.172) has joined #haskell
2013-03-25 11:04:48	<--	hkBst (~marijn@79.170.210.172) has quit (Changing host)
2013-03-25 11:04:48	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 11:04:50	circle	not in scope delete
2013-03-25 11:05:07	dmj	ok, so you'll need to import Data.List at the top of your file
2013-03-25 11:05:17	dmj	below the module name
2013-03-25 11:05:33	dmj	circle: if you're using ghci, then :m + Data.List
2013-03-25 11:05:37	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-03-25 11:05:38	dmj	:m == import
2013-03-25 11:05:58	circle	works now, thanks mate
2013-03-25 11:06:28	dmj	circle: cool beans
2013-03-25 11:06:57	-->	leoncamel (~leoncamel@219.143.150.16) has joined #haskell
2013-03-25 11:07:00	-->	bradleyayers (~brad@49.176.102.56) has joined #haskell
2013-03-25 11:07:34	<--	Palmik (~palmik@comp55-29.vpn.muni.cz) has quit (Ping timeout: 256 seconds)
2013-03-25 11:07:35	-->	sepp2k (~sepp2k@64pc49.pools.uni-luebeck.de) has joined #haskell
2013-03-25 11:07:36	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 11:08:15	<--	Guest41630 (~ZFox@maharani.meskarune.com) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-25 11:08:46	-->	ZFox (~DarkFox@unaffiliated/archeydevil) has joined #haskell
2013-03-25 11:08:48	--	ZFox is now known as DarkFox
2013-03-25 11:08:54	-->	Palmik (~palmik@comp55-65.vpn.muni.cz) has joined #haskell
2013-03-25 11:08:56	<--	SoupEvil (~jloos@e177160118.adsl.alicedsl.de) has quit (Read error: Operation timed out)
2013-03-25 11:09:06	--	x7_ is now known as x7
2013-03-25 11:09:18	--	Palmik is now known as Guest18795
2013-03-25 11:09:57	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Remote host closed the connection)
2013-03-25 11:10:01	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-25 11:10:12	<--	DarkFox (~DarkFox@unaffiliated/archeydevil) has quit (Client Quit)
2013-03-25 11:10:26	-->	DarkFox (~DarkFox@unaffiliated/archeydevil) has joined #haskell
2013-03-25 11:10:30	-->	schlicht__ (~fl@lutz.uebb.tu-berlin.de) has joined #haskell
2013-03-25 11:10:54	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 11:11:02	vlatkoB	Hm, not clear. If
2013-03-25 11:11:03	vlatkoB	((y:_):_) covers [[1,2,3],[4,5,6]]-[[1,2,3]]-[[1]]
2013-03-25 11:11:03	vlatkoB	[] covers []
2013-03-25 11:11:03	vlatkoB	what does ([]:rest) cover?
2013-03-25 11:11:21	<--	dmj (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Remote host closed the connection)
2013-03-25 11:11:34	<--	DarkFox (~DarkFox@unaffiliated/archeydevil) has quit (Changing host)
2013-03-25 11:11:34	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-25 11:11:35	shachaf	A nonempty list whose first element is a list (which is empty).
2013-03-25 11:11:36	-->	dmj (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-03-25 11:11:36	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-25 11:11:48	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 256 seconds)
2013-03-25 11:12:19	mauke	> case [[], ["A", "B"]] of [] : rest -> rest
2013-03-25 11:12:21	lambdabot	  [["A","B"]]
2013-03-25 11:12:33	<--	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has quit (Quit: bye)
2013-03-25 11:12:34	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-03-25 11:12:34	mauke	> case [["A", "B"], []] of [] : rest -> rest
2013-03-25 11:12:36	lambdabot	  *Exception: <interactive>:3:1-42: Non-exhaustive patterns in case
2013-03-25 11:12:54	-->	SoupEvil (~jloos@d149003.adsl.hansenet.de) has joined #haskell
2013-03-25 11:13:12	vlatkoB	Yes, I see, thanks.
2013-03-25 11:13:14	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-03-25 11:13:36	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 11:13:47	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-25 11:14:23	<--	sanemat (~sanemat@130.208.138.210.vmobile.jp) has quit (Ping timeout: 252 seconds)
2013-03-25 11:14:51	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-25 11:15:31	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-25 11:15:46	<--	kadoban_ (~kadoban@98.165.177.158) has quit (Ping timeout: 256 seconds)
2013-03-25 11:16:36	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-25 11:16:51	-->	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has joined #haskell
2013-03-25 11:16:54	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 256 seconds)
2013-03-25 11:17:13	<--	ptek (~ptek@217.64.164.1) has quit (Quit: Computer has gone to sleep.)
2013-03-25 11:17:21	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 276 seconds)
2013-03-25 11:18:01	<--	srkila (7ca9b31e@gateway/web/freenode/ip.124.169.179.30) has quit (Quit: Page closed)
2013-03-25 11:18:12	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 264 seconds)
2013-03-25 11:18:24	-->	gal_bolle (~florent@tausendblum.fdn.fr) has joined #haskell
2013-03-25 11:18:33	--	Sgeo is now known as NotRichBurlew
2013-03-25 11:18:35	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 11:18:55	-->	tsinnema (~tsinnema@193-64-21-227-nat.elisa-mobile.fi) has joined #haskell
2013-03-25 11:20:50	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 11:21:11	xpika	putChar (chr 55296) gives me *** Exception: <stdout>: hPutChar: invalid argument (invalid character)
2013-03-25 11:21:30	xpika	is there a more direct way to write a binary to stdout?
2013-03-25 11:21:35	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-25 11:22:59	--	Guest18795 is now known as Palmik_
2013-03-25 11:23:03	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-25 11:23:22	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-03-25 11:23:50	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-25 11:24:27	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 11:24:42	-->	davorb_laptop (~textual@ip231-246.wireless.lu.se) has joined #haskell
2013-03-25 11:24:50	-->	ptek (~ptek@217.64.164.1) has joined #haskell
2013-03-25 11:24:53	tdammers	xpika: bytestrings?
2013-03-25 11:25:40	<--	dmj (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Remote host closed the connection)
2013-03-25 11:25:54	-->	dmj (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-03-25 11:26:32	<--	Eelis (~Eelis@vps.eelis.net) has quit (Quit: ZNC - http://znc.in)
2013-03-25 11:26:46	-->	vlatko_ (~vlatko@188.129.49.159) has joined #haskell
2013-03-25 11:27:15	--	NotRichBurlew is now known as Sgeo
2013-03-25 11:27:18	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-25 11:27:42	-->	Eelis (~Eelis@vps.eelis.net) has joined #haskell
2013-03-25 11:27:47	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-25 11:27:47	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-25 11:27:47	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-25 11:29:02	xraycat	Hello, I have a list of "work" which can be evaluated in parallel. If the evaluation of one of these element yield a certain result, I can finish, e.g. I need some sort of short circuiting. In addition I'd like to evaluate only as much work in parallel as I have OS Threads (-NX), for -N1 it should work like the sequential counter part. The List should be evaluated in order: if I have for example a list of 16 elements and -N8 is supplied, I
2013-03-25 11:29:13	--	guerrill1 is now known as guerrilla
2013-03-25 11:29:30	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-25 11:29:59	<--	vlatkoB (~vlatko@188.129.49.48) has quit (Ping timeout: 245 seconds)
2013-03-25 11:30:22	-->	leocassarani (~leo@46-65-251-65.zone16.bethere.co.uk) has joined #haskell
2013-03-25 11:30:23	<--	leocassarani (~leo@46-65-251-65.zone16.bethere.co.uk) has quit (Changing host)
2013-03-25 11:30:23	-->	leocassarani (~leo@unaffiliated/cassarani) has joined #haskell
2013-03-25 11:30:32	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-25 11:31:22	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-25 11:31:30	<--	ctype_real1 (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-25 11:31:34	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-03-25 11:31:43	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-03-25 11:33:00	<--	leocassarani (~leo@unaffiliated/cassarani) has quit (Client Quit)
2013-03-25 11:33:20	--	nus-- is now known as nus
2013-03-25 11:33:33	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-25 11:33:51	<--	lewis1711 (~chatzilla@122-59-194-155.jetstream.xtra.co.nz) has quit (Read error: Connection reset by peer)
2013-03-25 11:35:40	--	zero7 is now known as mtlatif
2013-03-25 11:35:43	-->	leocassarani (~leo@46-65-251-65.zone16.bethere.co.uk) has joined #haskell
2013-03-25 11:35:43	<--	leocassarani (~leo@46-65-251-65.zone16.bethere.co.uk) has quit (Changing host)
2013-03-25 11:35:43	-->	leocassarani (~leo@unaffiliated/cassarani) has joined #haskell
2013-03-25 11:36:08	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-25 11:37:30	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 11:37:43	<--	totimkopf (~jamesmart@c-98-197-230-48.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-25 11:38:05	--	opqdonut_ is now known as opqdonut
2013-03-25 11:38:26	ocharles	xraycat: you cut off
2013-03-25 11:38:34	ocharles	we only got you up to "is supplied, I"
2013-03-25 11:38:35	<--	leocassarani (~leo@unaffiliated/cassarani) has left #haskell
2013-03-25 11:38:45	ocharles	but it sounds like you want the `async` package
2013-03-25 11:38:48	xraycat	is supplied, I want to evaluate the first 8 elements in parallel first. Is there something like this for the par monad or what would be the way to do it? I've been using STM thus far, but I'm unable to achieve the determinism I need.
2013-03-25 11:38:52	<--	edtsech_ (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-25 11:38:55	ocharles	and also, that you need concurrency, not parallelism
2013-03-25 11:38:55	xraycat	oh sorry, thanks for mentioning it
2013-03-25 11:39:06	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-25 11:39:34	ocharles	when my laptop is done indexing this database I'll have a look at async to see if that's what you need
2013-03-25 11:39:42	ocharles	but right now, I fear opening firefox might cause it to overheat :)
2013-03-25 11:39:46	ocharles	@hackage async
2013-03-25 11:39:46	lambdabot	http://hackage.haskell.org/package/async
2013-03-25 11:39:50	ocharles	but check that out
2013-03-25 11:39:55	xraycat	thanks, will do
2013-03-25 11:39:59	 *	hackagebot VKHS 0.3.0 - Provides access to Vkontakte social network via public API  http://hackage.haskell.org/package/VKHS-0.3.0 (SergeyMironov)
2013-03-25 11:40:23	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-25 11:40:23	ocharles	there is somesort of 'race' function which will race a bunch of threads until one terminates
2013-03-25 11:40:57	-->	Tharugrim (~Tharugrim@178-190-243-248.adsl.highway.telekom.at) has joined #haskell
2013-03-25 11:41:07	ocharles	xpika: using a ByteString and the stdout file handle might be the way to go
2013-03-25 11:41:15	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-25 11:41:16	--	dreixel____ is now known as dreixel
2013-03-25 11:41:39	-->	typoclass (~typoclass@p57A64F3C.dip.t-dialin.net) has joined #haskell
2013-03-25 11:41:48	ocharles	dmj: btw, you can `import` in GHCI just fine
2013-03-25 11:42:15	-->	arenz (arenz@nat/ibm/x-geguegqzfaarhtcm) has joined #haskell
2013-03-25 11:42:24	xraycat	waitAny looks good
2013-03-25 11:43:12	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 11:43:51	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-25 11:44:46	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-03-25 11:45:52	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-25 11:46:15	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-03-25 11:46:16	<--	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has quit (Ping timeout: 245 seconds)
2013-03-25 11:47:03	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-25 11:47:19	<--	dmj (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2013-03-25 11:47:35	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-25 11:47:59	<--	robbert` (~robbert@195.169.215.40) has quit (Quit: Coyote finally caught me)
2013-03-25 11:48:04	-->	identity (~0xC3@5070823C.static.ziggozakelijk.nl) has joined #haskell
2013-03-25 11:48:05	<--	bandicoot (~Thunderbi@188.34.53.208) has left #haskell
2013-03-25 11:48:12	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-25 11:48:17	-->	robbert` (~robbert@vhe-410044.sshn.net) has joined #haskell
2013-03-25 11:48:20	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Ping timeout: 245 seconds)
2013-03-25 11:49:07	<--	Palmik_ (~palmik@comp55-65.vpn.muni.cz) has quit (Ping timeout: 260 seconds)
2013-03-25 11:49:11	<--	ulfdoz (~mary@p5B38AE81.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-25 11:49:11	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Read error: Connection reset by peer)
2013-03-25 11:49:23	-->	kuribas (~user@94-227-88-230.access.telenet.be) has joined #haskell
2013-03-25 11:49:47	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-25 11:49:47	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Client Quit)
2013-03-25 11:50:03	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-25 11:50:25	<--	tsinnema (~tsinnema@193-64-21-227-nat.elisa-mobile.fi) has quit (Quit: Ex-Chat)
2013-03-25 11:50:37	-->	Palmik_ (~palmik@comp55-28.vpn.muni.cz) has joined #haskell
2013-03-25 11:50:41	--	Adeon_ is now known as Adeon
2013-03-25 11:51:08	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-25 11:51:11	-->	seafood (~seafood@48.8.233.220.static.exetel.com.au) has joined #haskell
2013-03-25 11:51:12	<--	MnO2 (~MnO2@nat/yahoo/x-mhviwqdmbaqcfsbn) has quit (Quit: MnO2)
2013-03-25 11:51:44	-->	Icewing (~Icewing@koln-5d8170d7.pool.mediaWays.net) has joined #haskell
2013-03-25 11:51:44	<--	Icewing (~Icewing@koln-5d8170d7.pool.mediaWays.net) has quit (Changing host)
2013-03-25 11:51:44	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-03-25 11:52:03	<--	robbert` (~robbert@vhe-410044.sshn.net) has quit (Changing host)
2013-03-25 11:52:03	-->	robbert` (~robbert@unaffiliated/robbert) has joined #haskell
2013-03-25 11:52:03	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-25 11:52:53	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-25 11:53:12	--	hanDerPe1er is now known as hanDerPeder
2013-03-25 11:53:28	<--	xpika (~jrg@1.153.196.212) has quit (Ping timeout: 245 seconds)
2013-03-25 11:54:44	<--	seafood (~seafood@48.8.233.220.static.exetel.com.au) has quit (Client Quit)
2013-03-25 11:55:16	circle	function :: something a -> something_else b
2013-03-25 11:55:17	circle	what
2013-03-25 11:55:25	circle	is the "something" and "something_else" in that?
2013-03-25 11:55:58	<--	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has quit (Ping timeout: 245 seconds)
2013-03-25 11:56:20	<--	issimus (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-25 11:57:12	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 11:57:26	typoclass	circle: it's a type with a type variable, for example Maybe Int vs. Maybe String, etc.
2013-03-25 11:57:41	circle	hmm, thanks
2013-03-25 11:58:32	-->	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has joined #haskell
2013-03-25 11:59:26	--	lan3y is now known as Laney
2013-03-25 11:59:56	--	Laney is now known as Guest13162
2013-03-25 12:00:06	-->	ulfdoz (~mary@p5B38AE81.dip.t-dialin.net) has joined #haskell
2013-03-25 12:01:27	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-25 12:02:30	-->	itemad (~user@212.0.102.162) has joined #haskell
2013-03-25 12:03:50	--	Guest24609 is now known as jlamothe
2013-03-25 12:04:52	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-25 12:04:52	<--	dm120769 (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-25 12:04:58	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-25 12:05:01	 *	hackagebot hsndfile 0.7.0 - Haskell bindings for libsndfile  http://hackage.haskell.org/package/hsndfile-0.7.0 (StefanKersten)
2013-03-25 12:05:38	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-25 12:05:39	<--	clahey_ (~clahey@208.91.2.2) has quit (Remote host closed the connection)
2013-03-25 12:05:41	-->	ijp` (~user@host86-128-177-238.range86-128.btcentralplus.com) has joined #haskell
2013-03-25 12:06:08	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-03-25 12:06:10	-->	kiwnix (~egarcia@unaffiliated/kiwnix) has joined #haskell
2013-03-25 12:06:20	-->	clahey_ (~clahey@208.91.2.1) has joined #haskell
2013-03-25 12:07:13	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 12:07:16	<--	Guest13162 (~laney@cripps.orangesquash.org.uk) has quit (Changing host)
2013-03-25 12:07:16	-->	Guest13162 (~laney@ubuntu/member/pdpc.active.laney) has joined #haskell
2013-03-25 12:08:03	--	Guest13162 is now known as Laney
2013-03-25 12:08:28	<--	ijp (~user@host81-159-127-140.range81-159.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-03-25 12:09:02	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 256 seconds)
2013-03-25 12:10:33	dmwit	circle: I don't believe you're being totally honest. What's the *real* type signature?
2013-03-25 12:10:44	-->	cdidd (~cdidd@95-28-167-47.broadband.corbina.ru) has joined #haskell
2013-03-25 12:10:50	<--	Th0mas_ (~thomas@th0mas.nl) has quit (Ping timeout: 255 seconds)
2013-03-25 12:11:04	<--	yacks (~yacks@180.151.36.168) has quit (Quit: Leaving)
2013-03-25 12:11:28	typoclass	dmwit: haven't you heard? the newest versions of base have something_else :-)
2013-03-25 12:11:38	-->	Th0mas (~thomas@th0mas.nl) has joined #haskell
2013-03-25 12:11:39	dmwit	(There's only one implementation of the type you gave, and it's a function that never returns -- for example, by infinite looping, throwing an exception, etc.)
2013-03-25 12:12:21	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-25 12:12:40	-->	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has joined #haskell
2013-03-25 12:12:41	<--	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has quit (Changing host)
2013-03-25 12:12:41	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-25 12:12:52	-->	sonda (~sonda@ppp-30-21.26-151.libero.it) has joined #haskell
2013-03-25 12:13:06	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 12:13:07	--	sipa1024 is now known as sipa
2013-03-25 12:13:37	circle	dmwit: real type signature is some function defined not by haskell but a 3rd party library
2013-03-25 12:13:43	circle	It is made to loop forever I believe.
2013-03-25 12:14:04	dmwit	Go on. You'll get a better answer if you tell us the truth. Plus it feels good. ;-)
2013-03-25 12:14:35	-->	totimkopf (~jamesmart@c-98-197-230-48.hsd1.tx.comcast.net) has joined #haskell
2013-03-25 12:15:01	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-25 12:15:02	 *	hackagebot hsndfile 0.7.1 - Haskell bindings for libsndfile  http://hackage.haskell.org/package/hsndfile-0.7.1 (StefanKersten)
2013-03-25 12:15:20	-->	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has joined #haskell
2013-03-25 12:15:20	<--	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has quit (Changing host)
2013-03-25 12:15:20	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-25 12:15:20	typoclass	circle: the issue is, in haskell there's normally no way to convert "anything into anything", which is what the 'a' and 'b' in your signature stand for
2013-03-25 12:15:37	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-25 12:15:58	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 245 seconds)
2013-03-25 12:16:14	-->	hkBst_ (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 12:16:37	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-25 12:16:55	-->	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has joined #haskell
2013-03-25 12:16:59	<--	blueonyx (~blueonyx@dslc-082-082-190-033.pools.arcor-ip.net) has quit (Changing host)
2013-03-25 12:16:59	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-25 12:17:10	--	Guest36494 is now known as `micro
2013-03-25 12:17:47	-->	amatsu (~amatsu@125.63.54.161) has joined #haskell
2013-03-25 12:17:50	--	ijp` is now known as ijp
2013-03-25 12:17:56	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Remote host closed the connection)
2013-03-25 12:18:08	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-25 12:18:20	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-25 12:18:21	<--	hkBst_ (~marijn@gentoo/developer/hkbst) has quit (Excess Flood)
2013-03-25 12:18:33	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-25 12:18:41	killy9999	can I pass unboxed values to return?
2013-03-25 12:18:45	-->	hkBst_ (~marijn@79.170.210.172) has joined #haskell
2013-03-25 12:18:45	<--	hkBst_ (~marijn@79.170.210.172) has quit (Changing host)
2013-03-25 12:18:45	-->	hkBst_ (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 12:19:08	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 12:19:16	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-25 12:19:42	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-25 12:19:49	bobry	killy9999: I think no, because they kave kind #, instead of *
2013-03-25 12:19:51	dmwit	killy9999: Let's do science! I have a hypothesis, can you concoct an experiment that tests it...?
2013-03-25 12:20:18	bobry	Is there a way to hide the value of type synonym in haddock? for instance I have type Foo = String, can I hide the String part somehow?
2013-03-25 12:20:31	--	Guest48967 is now known as Cerise
2013-03-25 12:20:31	<--	Cerise (jerry@jerry.devzero.info) has quit (Changing host)
2013-03-25 12:20:31	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-03-25 12:20:40	dmwit	bobry: No, unless you also hide Foo from being exported at all.
2013-03-25 12:21:11	dmwit	bobry: And it's a good thing, too, because you'd only be fooling yourself if you hid it from the docs; people would still be able to discover it via :browse, :info, and half a dozen other ways.
2013-03-25 12:21:21	-->	robstewartuk (~robstewar@cpc2-sgyl34-2-0-cust177.sgyl.cable.virginmedia.com) has joined #haskell
2013-03-25 12:21:33	bobry	Okay, thanks!
2013-03-25 12:21:35	merijn	Or even just passing a String to it and not getting a type error :p
2013-03-25 12:21:50	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-25 12:22:04	robstewartuk	Reading http://www.haskell.org/ghc/docs/7.6.2/html/users_guide/using-shared-libs.html , is there a way to turn on the --enable-shared flag within a .cabal file ?
2013-03-25 12:22:05	merijn	bobry: Are you trying to stop people from using Strings directly and making them convert them?
2013-03-25 12:22:13	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-03-25 12:22:30	merijn	robstewartuk: ghc-options?
2013-03-25 12:22:39	bobry	merijn: nope, I don't need a newtype wrapper, I just want an "abstract" type
2013-03-25 12:22:43	merijn	That let's you pass arbitrary options to GHC during compilation
2013-03-25 12:22:49	merijn	bobry: ok
2013-03-25 12:23:26	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 255 seconds)
2013-03-25 12:23:34	<--	vlatko_ (~vlatko@188.129.49.159) has quit (Quit: Leaving)
2013-03-25 12:24:27	-->	mushi (d31eff56@gateway/web/freenode/ip.211.30.255.86) has joined #haskell
2013-03-25 12:25:01	mushi	hello
2013-03-25 12:25:18	mushi	anyone around that is fimilar with BST
2013-03-25 12:25:27	mushi	and quickcheck for a few questions
2013-03-25 12:26:35	typoclass	mushi: hi :-) just ask
2013-03-25 12:27:41	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: Reconnecting)
2013-03-25 12:27:50	-->	gusto (~gusto@ppp-212-114-234-24.dynamic.mnet-online.de) has joined #haskell
2013-03-25 12:27:50	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-25 12:28:09	mushi	ok here is my code
2013-03-25 12:28:11	mushi	http://pastebin.com/pDWumMtW
2013-03-25 12:28:25	mushi	i have to prove this
2013-03-25 12:28:26	mushi	prop_mysteryPred_1 integer = forAll searchTrees $ \tree -> mysteryPred integer (insert integer tree)
2013-03-25 12:28:37	mushi	i am struggling to figure out what this prop means
2013-03-25 12:28:49	mushi	anyone want to give me pointers/lead me on correct path?
2013-03-25 12:29:18	<--	hkBst_ (~marijn@gentoo/developer/hkbst) has quit (Remote host closed the connection)
2013-03-25 12:29:54	-->	hkBst_ (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 12:30:03	 *	hackagebot bitset 1.3.0 - A space-efficient set data structure.  http://hackage.haskell.org/package/bitset-1.3.0 (SergeiLebedev)
2013-03-25 12:30:11	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 255 seconds)
2013-03-25 12:32:43	-->	monsieurlu (~monsieurl@163.5.151.6) has joined #haskell
2013-03-25 12:34:08	--	xxen is now known as nexx
2013-03-25 12:34:28	typoclass	mushi: have you checked the type of function mysteryPred? does this give any clues?
2013-03-25 12:34:54	mushi	the type is this "mysteryPred :: Integer -> BinaryTree ->Bool"
2013-03-25 12:35:35	dmwit	It almost reads like English.
2013-03-25 12:35:51	<--	gal_bolle (~florent@tausendblum.fdn.fr) has quit (Remote host closed the connection)
2013-03-25 12:36:00	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 12:36:12	dmwit	It says that for all search trees (and integers), if you insert that integer into the tree, mysteryPred holds of that integer and the resulting tree.
2013-03-25 12:36:14	typoclass	mushi: right. so the code "mysteryPred integer (insert integer tree)" produces a tree that has the number 'integer' inserted, and then gives the tree and the number into mysteryPred
2013-03-25 12:36:59	<--	nexx (~SPS-User@dslb-188-108-178-137.pools.arcor-ip.net) has quit (Read error: Connection reset by peer)
2013-03-25 12:37:21	dmwit	(The forAll seems a bit spurious, though. Why not prop_mysteryPred_1 integer tree = mysteryPred integer (insert integer tree)?)
2013-03-25 12:37:29	dmwit	?hoogle forAll
2013-03-25 12:37:29	lambdabot	Test.QuickCheck.Property forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property
2013-03-25 12:37:29	lambdabot	Test.QuickCheck forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property
2013-03-25 12:37:29	lambdabot	keyword forall
2013-03-25 12:37:40	-->	Michael__ (~michael@64.134.176.210) has joined #haskell
2013-03-25 12:37:57	blueonyx	?hoogle Arbitrary
2013-03-25 12:37:57	lambdabot	Test.QuickCheck.Arbitrary class Arbitrary a
2013-03-25 12:37:57	lambdabot	Test.QuickCheck class Arbitrary a
2013-03-25 12:37:57	lambdabot	Test.QuickCheck.Arbitrary arbitrary :: Arbitrary a => Gen a
2013-03-25 12:38:26	dmwit	Oh, I see, that's so BinaryTree doesn't have to be an instance of Arbitrary.
2013-03-25 12:38:37	blueonyx	think so too
2013-03-25 12:38:48	dmwit	That seems a bit silly, though, since searchTrees looks like it ought to be a perfectly good such instance.
2013-03-25 12:39:52	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Quit: Leaving.)
2013-03-25 12:40:59	mushi	can someone explain to me like i m 3 on how to write mysteryPred?
2013-03-25 12:41:42	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 12:41:47	-->	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-25 12:43:03	<--	hkBst_ (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 245 seconds)
2013-03-25 12:43:06	typoclass	mushi: i suspect that this is supposed to be a basic test that the 'insert' function works correctly. "we have a tree, we use 'insert' to put an integer into it, now, does the new tree contain the integer"
2013-03-25 12:43:25	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-25 12:43:37	-->	hkBst_ (~marijn@79.170.210.172) has joined #haskell
2013-03-25 12:43:37	<--	hkBst_ (~marijn@79.170.210.172) has quit (Changing host)
2013-03-25 12:43:37	-->	hkBst_ (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-25 12:43:38	mushi	so mysteryPred
2013-03-25 12:43:49	mushi	is supposed to test if integer is in the tree?
2013-03-25 12:44:00	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-25 12:44:07	-->	Hannibal_Smith (~ff130493@host166-76-dynamic.10-87-r.retail.telecomitalia.it) has joined #haskell
2013-03-25 12:44:11	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-25 12:44:50	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-03-25 12:44:59	Hannibal_Smith	Hi, is HDBC library dead?
2013-03-25 12:45:02	typoclass	mushi: i don't know, but yeah, that's my guess
2013-03-25 12:45:41	Hannibal_Smith	It's like the mantainer has abandoned the project
2013-03-25 12:46:41	--	Jaak_ is now known as Jaak
2013-03-25 12:46:46	<--	Michael__ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 12:47:04	Hannibal_Smith	https://github.com/hdbc/hdbc/commits/master <-There are some recent commits
2013-03-25 12:47:29	mushi	thanks typoclass i ll look into it
2013-03-25 12:47:44	Hannibal_Smith	https://github.com/hdbc/hdbc/issues <-But the bug tracker is abandoned
2013-03-25 12:48:14	notdan	How can I make cabal generate haddock documentation? Here's a part of my .cabal file: http://paste.lisp.org/display/136329
2013-03-25 12:48:16	notdan	I want cabal to generate haddock docs for PTTest and PetriNet modules
2013-03-25 12:48:32	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-25 12:48:33	-->	Michael__ (~michael@64.134.176.210) has joined #haskell
2013-03-25 12:48:42	typoclass	notdan: are you passing "--enable-documentation" to "cabal install"? (or, do you have that switch in your ~/.cabal/config
2013-03-25 12:49:07	typoclass	notdan: wait, or is the question about other-modules vs. exposed-modules
2013-03-25 12:49:29	-->	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-25 12:49:31	dmwit	cabal will not generate documentation for executables, only libraries.
2013-03-25 12:49:40	notdan	typoclass: I have documentation: True in my cabal config file
2013-03-25 12:49:56	notdan	But I am using cabal-dev actually, that shouldn't matter should it?
2013-03-25 12:50:03	 *	hackagebot hen 0.0.2 - Haskell bindings to Xen hypervisor interface  http://hackage.haskell.org/package/hen-0.0.2 (FedorGogolev)
2013-03-25 12:50:15	dmwit	So consider installing PTTest and PetriNet as a library, and having your program depend on that library.
2013-03-25 12:50:20	notdan	dmwit: so I'll need to add a Library field to my .cabal file?
2013-03-25 12:50:29	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-25 12:50:34	dmwit	Bonus points for putting them at an appropriate place in the module hierarchy first (instead of at the top level).
2013-03-25 12:50:39	dmwit	notdan: yes
2013-03-25 12:51:10	notdan	I see. But I want them for internal use only :S
2013-03-25 12:51:13	dmwit	notdan: Also, you'll need to read a tiny bit about how to do that correctly, as it can be a bit of a pain to get the executable to actually use your library instead of recompiling the modules, if compilation time is a concern for you.
2013-03-25 12:51:23	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 245 seconds)
2013-03-25 12:51:29	dmwit	notdan: In that case, you will need to run haddock yourself.
2013-03-25 12:51:39	notdan	Maybe I can just abandon cabal-dev for that purpose
2013-03-25 12:51:44	notdan	yeah dmwit I might actually do that
2013-03-25 12:51:45	notdan	thanks
2013-03-25 12:51:50	<--	Fuco (dota.keys@server.dasnet.cz) has quit (Changing host)
2013-03-25 12:51:51	-->	Fuco (dota.keys@unaffiliated/fuco) has joined #haskell
2013-03-25 12:52:12	<--	davorb_laptop (~textual@ip231-246.wireless.lu.se) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-25 12:53:14	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-25 12:53:20	<--	m3ga_ (~erikd@112-213-172-127.bb.ispone.net.au) has quit (Ping timeout: 245 seconds)
2013-03-25 12:53:33	-->	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-03-25 12:54:28	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-03-25 12:54:29	<--	itemad (~user@212.0.102.162) has quit (Read error: Connection reset by peer)
2013-03-25 12:55:16	-->	itemad (~user@212.0.102.162) has joined #haskell
2013-03-25 12:58:12	<--	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Ping timeout: 260 seconds)
2013-03-25 12:59:12	-->	Xenplex (~xenplex@195.46.241.225) has joined #haskell
2013-03-25 13:00:25	-->	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-25 13:01:12	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Quit: Lost terminal)
2013-03-25 13:01:52	-->	squidz (~albert@141.84.69.76) has joined #haskell
2013-03-25 13:02:06	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Quit: anderse)
2013-03-25 13:02:47	aleator	My brain froze. What is the common name for any (==True)?
2013-03-25 13:03:02	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-25 13:03:04	typoclass	aleator: 'or'?
2013-03-25 13:03:16	supki	any id
2013-03-25 13:03:18	typoclass	> or [False, False, True]
2013-03-25 13:03:20	lambdabot	  True
2013-03-25 13:03:24	supki	oh
2013-03-25 13:03:42	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-03-25 13:04:03	b_jonas	> or []
2013-03-25 13:04:03	-->	znode (~znode@public-nat-a.vpngate.net) has joined #haskell
2013-03-25 13:04:04	lambdabot	  False
2013-03-25 13:04:12	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-25 13:04:16	<--	plutoniix (~plutoniix@node-31u.pool-182-52.dynamic.totbb.net) has quit (Quit: จรลี จรลา)
2013-03-25 13:04:34	aleator	> any (==True) []
2013-03-25 13:04:36	lambdabot	  False
2013-03-25 13:04:40	<--	znode (~znode@public-nat-a.vpngate.net) has quit (Remote host closed the connection)
2013-03-25 13:04:41	aleator	> or []
2013-03-25 13:04:42	lambdabot	  False
2013-03-25 13:04:46	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-25 13:04:47	 *	typoclass purrs and rubs his kitty head on aleator, to unfreeze his brain
2013-03-25 13:05:11	aleator	Grief. How could I forgot that..
2013-03-25 13:05:12	typoclass	supki: for some reason, i like 'any id' better than 'or'
2013-03-25 13:05:25	ocharles	:t or
2013-03-25 13:05:27	lambdabot	[Bool] -> Bool
2013-03-25 13:05:43	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 13:06:01	b_jonas	or should be called any, and any should be called anyWith
2013-03-25 13:06:06	b_jonas	well no
2013-03-25 13:06:14	ocharles	bah, that could be generalized to a semiring!
2013-03-25 13:06:23	b_jonas	maybe it's okay this way, but zipWith should be called zip
2013-03-25 13:06:33	elliott	anyWith doesn't really need to exist.
2013-03-25 13:06:40	elliott	"any . map f" would be fine
2013-03-25 13:07:05	b_jonas	no, it's the opposite. any needn't exist, because (anyWith id) is fine
2013-03-25 13:07:16	b_jonas	and zip needn't exist either
2013-03-25 13:07:38	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-25 13:07:55	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 245 seconds)
2013-03-25 13:08:08	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 13:08:14	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Read error: Connection timed out)
2013-03-25 13:08:33	typoclass	b_jonas: oh, i'd support renaming zipWith to zip. you wouldn't need the former zip at all because "zip (,)" is so simple
2013-03-25 13:09:15	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 13:09:49	mushi	anyone have link to tree search algothrims for haskell
2013-03-25 13:09:59	mushi	e.g. depth search? google didnt help
2013-03-25 13:09:59	<--	monsieurlu (~monsieurl@163.5.151.6) has quit (Ping timeout: 245 seconds)
2013-03-25 13:11:19	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 13:13:28	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 13:13:30	elliott	b_jonas: why should we bake map into every function?
2013-03-25 13:13:35	latro`a	elliott, "any . map f" would only really be fine with stream fusion
2013-03-25 13:13:40	elliott	for zip it's different. you need an uncurry step there or such
2013-03-25 13:13:49	latro`a	which probably wasn't in place at the time the library was written
2013-03-25 13:13:56	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-25 13:14:12	latro`a	without stream fusion it traverses twice
2013-03-25 13:14:15	b_jonas	elliott: because I'm an imperative programmer and can't put (any . map f) in my head
2013-03-25 13:14:17	<--	paintcan` (~user@108.162.180.237) has quit (Ping timeout: 256 seconds)
2013-03-25 13:14:24	b_jonas	consciously I know that it works in a lazy language
2013-03-25 13:14:28	b_jonas	but it's just strange
2013-03-25 13:14:52	latro`a	"are any of the values after application of f True?"
2013-03-25 13:15:13	mushi	typoclass: hey man you still around?
2013-03-25 13:15:24	alexander__b	so sum' = foldl (+) 0  pretty much blew my mind.
2013-03-25 13:15:31	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Ping timeout: 264 seconds)
2013-03-25 13:15:48	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-03-25 13:16:03	typoclass	mushi: yes, but can just as well ask the channel :-)
2013-03-25 13:16:13	-->	hyperthunk (~hyperthun@46.233.72.121) has joined #haskell
2013-03-25 13:16:52	blueonyx	mushi: do you mean Tiefensuche aka depth first search? :>
2013-03-25 13:16:56	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 13:17:16	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 13:17:20	Pods	Would the parser which runs haskell be turing complete ??
2013-03-25 13:17:44	-->	monsieurlu (~monsieurl@163.5.111.71) has joined #haskell
2013-03-25 13:17:46	mushi	yeah
2013-03-25 13:17:53	dmwit	aleator: mconcat ;-)
2013-03-25 13:17:57	danr	Pods: the context sensitivity is only fixitiy information about operatiors, so no
2013-03-25 13:18:03	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-25 13:18:04	mushi	hold on i can show you all the code
2013-03-25 13:18:09	dmwit	> mconcat [Any False, Any False, Any True]
2013-03-25 13:18:10	lambdabot	  Any {getAny = True}
2013-03-25 13:18:30	blueonyx	mushi: this then depends on the data structure of your tree
2013-03-25 13:18:48	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-25 13:18:49	blueonyx	or maybe he has a Functor instance?
2013-03-25 13:19:07	mushi	http://pastebin.com/t67AcqXB
2013-03-25 13:19:09	Pods	danr : For us to make it a language that can handle semantics sont you think it should first become a language which approaches the completness ??
2013-03-25 13:19:11	typoclass	> getAny $ mconcat $ map Any [False, False, True]
2013-03-25 13:19:12	lambdabot	  True
2013-03-25 13:19:29	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 13:19:36	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-25 13:19:37	danr	Pods: I don't understand sorry
2013-03-25 13:19:44	mushi	thats my code i need to write mysteryPred which meets msyteryPred_1 and _2
2013-03-25 13:20:01	alexander__b	OK, I'm sorry, but "We can omit the xs as the parameter because calling foldl (+) 0 will return a function that takes a list" is not enough of an explanation to me. WTF is up with foldl (+) 0?
2013-03-25 13:20:04	mushi	i ve worked out (due to mostly this channel)
2013-03-25 13:20:06	-->	dates (58e3c7cf@gateway/web/freenode/ip.88.227.199.207) has joined #haskell
2013-03-25 13:20:14	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-25 13:20:15	mushi	msteryPred needs to be a search function
2013-03-25 13:20:22	Pods	I will rephrase it , Would you require (Say) haskell to be turing complete for it to execute (say) semantic searches ??
2013-03-25 13:20:34	danr	but I forgot about the indentation as well, that is also context sensitive
2013-03-25 13:20:35	mushi	i m thinking along the lines of depth search or breath serach?
2013-03-25 13:21:13	blueonyx	mushi: dont think it matters here
2013-03-25 13:21:20	blueonyx	dfs is easier though
2013-03-25 13:21:26	blueonyx	is this homework?
2013-03-25 13:21:28	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-25 13:21:45	mushi	yes
2013-03-25 13:22:09	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 276 seconds)
2013-03-25 13:22:22	`ramses	alexander__b: if you write f(x) == y(x), do you agree you could equally well have written f == y ?
2013-03-25 13:22:28	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-03-25 13:22:43	`ramses	(with an implicit universal quantor for x)
2013-03-25 13:22:49	ocharles	i was about to say..
2013-03-25 13:23:04	typoclass	alexander__b: don't worry :) it's partial application. ordinarily, foldl requires 3 arguments. you're giving it only 2 (the function (+) and the 0), and you have a function that needs 1 more argument
2013-03-25 13:23:07	typoclass	@type foldl
2013-03-25 13:23:08	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-03-25 13:23:11	alexander__b	`ramses: in maths, yes. in programming I haven't really done anything equivalent, so IDK, heh.
2013-03-25 13:23:20	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-25 13:23:30	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 13:23:40	alexander__b	typoclass: I realise that it's partial application and that foldl returns a list but I mean still WTF. I can't really grok it, heh.
2013-03-25 13:23:42	dmwit	Pods: Haskell is Turing complete. Haskell's parser is not. There are many stages of execution that come after parsing.
2013-03-25 13:23:49	`ramses	alexander__b: haskell functions are pretty close to mathematical functions
2013-03-25 13:23:52	alexander__b	the whole thing is sum' = foldl (+) 0
2013-03-25 13:23:53	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-25 13:24:42	dmwit	s/Haskell's parser/GHC's parser/
2013-03-25 13:24:45	`ramses	alexander__b: saying "sum' xs = foldl (+) 0 xs" is the same as saying "sum' = foldl (+) 0" in the same way as the f and y above
2013-03-25 13:24:56	`ramses	(why did I choose y for the second function?? :p)
2013-03-25 13:25:08	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-03-25 13:25:29	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Quit: Leaving...)
2013-03-25 13:25:32	Pods	dmwit: yes, was wondering the same ..
2013-03-25 13:25:32	-->	khismetix (~textual@178.167.167.45.threembb.ie) has joined #haskell
2013-03-25 13:25:46	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 256 seconds)
2013-03-25 13:25:55	<--	Hannibal_Smith (~ff130493@host166-76-dynamic.10-87-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-03-25 13:26:04	typoclass	alexander__b: oh, you'll get used to it :) it's just a bit alien at first. but you can work this out pretty directly from the type. you have (a -> b -> a) -> a -> [b] -> a, and you have the (a -> b -> a) covered and the 'a' covered, so you're left with a function [b] -> a
2013-03-25 13:26:07	alexander__b	`ramses: omg. that's clever. but so so so so painful to grok for my C-brain. :-D
2013-03-25 13:26:09	Pods	Thanks :)
2013-03-25 13:26:27	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-25 13:26:34	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-25 13:26:37	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-25 13:26:58	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 256 seconds)
2013-03-25 13:27:09	`ramses	alexander__b: it's because functions are regular values, so you can really say "this function I'm defining is equal to this other function" instead of saying what it does on all its parameters
2013-03-25 13:27:10	typoclass	alexander__b: also, it may help if you write down the type of sum', just to be clear
2013-03-25 13:27:23	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 13:27:34	alexander__b	typoclass: I did that but omitted it when pasting here.
2013-03-25 13:27:54	<--	gusto (~gusto@ppp-212-114-234-24.dynamic.mnet-online.de) has quit (Quit: leaving)
2013-03-25 13:28:11	alexander__b	`ramses: I get it now. well, I can't say I feel comfortable *using* it yet, but I get this specific little code snippet and what is doing, heh. thanks.
2013-03-25 13:28:29	-->	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has joined #haskell
2013-03-25 13:28:36	`ramses	alexander__b: also note the "right associativity" of (->): a -> b -> c == a -> (b -> c), which shows the same idea at the type level
2013-03-25 13:28:50	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-03-25 13:29:20	`ramses	alexander__b: it wont take long until you start to really miss this way of thinking in other languages :)
2013-03-25 13:29:40	<--	schlicht__ (~fl@lutz.uebb.tu-berlin.de) has quit (Ping timeout: 240 seconds)
2013-03-25 13:30:58	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-25 13:31:00	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-25 13:31:14	<--	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has quit (Read error: Operation timed out)
2013-03-25 13:31:32	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-25 13:31:42	-->	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has joined #haskell
2013-03-25 13:31:57	alexander__b	`ramses: I don't follow what (->): is, but I get that it's right associative.
2013-03-25 13:32:15	dmwit	(->) is the function arrow
2013-03-25 13:32:19	dmwit	the : was just part of the sentence
2013-03-25 13:32:26	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-25 13:32:31	alexander__b	oh, heh.
2013-03-25 13:32:55	hamid	:t max
2013-03-25 13:32:55	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-25 13:32:56	lambdabot	Ord a => a -> a -> a
2013-03-25 13:33:13	-->	pikhq (~pikhq@75-163-216-247.clsp.qwest.net) has joined #haskell
2013-03-25 13:33:16	alexander__b	well thank you haskell for blowing my mind, at least. :-)
2013-03-25 13:33:33	kennyd	alexander__b Int -> String is a function that takes an Int and returns String
2013-03-25 13:34:22	-->	ks07 (~ks07_free@2604:180::25b6:c60f) has joined #haskell
2013-03-25 13:34:34	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 13:35:08	dates	Hi. I have an expression :  filter (\(x,y)->(distance (x,y)(0,0))<=5) [(1,1),(2,2),(2,3),(2,4),(2,5),(2,6)] . the function distance takes two tuples as points and calculates their distance. I want to write function version of this expression. I wrote this : giveinsideborder = distance ref_pt pt_list filter  (\(x,y)->(distance_calc (x,y) ref_pt)<=distance). This is supposed to list the points which are as far as distance at most. But 
2013-03-25 13:35:09	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 13:35:51	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 13:36:02	Botje_	dates: you got cut off after "But"
2013-03-25 13:36:18	Botje_	dates: might want to formulate your question as a paste on hpaste.org
2013-03-25 13:36:21	--	Walther_ is now known as Walther
2013-03-25 13:36:52	--	Botje_ is now known as Botje
2013-03-25 13:36:59	<--	Botje (~Botje@d51A4033C.access.telenet.be) has quit (Changing host)
2013-03-25 13:36:59	-->	Botje (~Botje@p3m/member/Botje) has joined #haskell
2013-03-25 13:38:25	-->	paintcan` (~user@66.199.39.230) has joined #haskell
2013-03-25 13:38:35	hpaste	“Anonymous Coward” pasted “distance” at http://hpaste.org/84630
2013-03-25 13:38:39	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-25 13:39:13	`ramses	dates: arguments go before the "="
2013-03-25 13:39:13	dates	Botje_ : http://hpaste.org/84630 better?
2013-03-25 13:39:57	-->	merijn (~merijn@wcw-staff-212-177.wireless.uva.nl) has joined #haskell
2013-03-25 13:40:10	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-25 13:41:01	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 13:41:28	Botje	dates: okay, and what do you want to do with that?
2013-03-25 13:41:58	hpaste	“`ramses” annotated “distance” with “distance (annotation)” at http://hpaste.org/84630#a84631
2013-03-25 13:42:11	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 13:42:32	`ramses	dates: it is a pure syntax issue, see my annotation
2013-03-25 13:42:56	-->	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-25 13:43:49	dates	:ramses thanks, problem solved
2013-03-25 13:43:54	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-25 13:44:01	dates	thanks to you too Botje
2013-03-25 13:44:16	<--	hyperthunk (~hyperthun@46.233.72.121) has left #haskell
2013-03-25 13:44:18	Botje	no problem, glad it was something silly :)
2013-03-25 13:44:36	<--	Michael__ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 13:44:51	<--	vramana (~chatzilla@103.5.132.50) has quit (Client Quit)
2013-03-25 13:44:56	dates	yeah it was :)
2013-03-25 13:45:02	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-25 13:45:13	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-25 13:45:14	<--	verrens (~verrens@93.95.103.188) has quit (Ping timeout: 252 seconds)
2013-03-25 13:45:31	<--	OlegYch (~OlegYch@212.98.189.88) has quit (Ping timeout: 264 seconds)
2013-03-25 13:45:50	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-25 13:45:56	ks07	Hey, is there a good tutorial for using STArray?
2013-03-25 13:45:57	-->	verrens (~verrens@93.95.103.188) has joined #haskell
2013-03-25 13:49:28	-->	xcombelle (~xcombelle@AToulouse-551-1-61-55.w92-146.abo.wanadoo.fr) has joined #haskell
2013-03-25 13:50:46	<--	xalei (~xalei@ppp118-209-60-64.lns20.mel4.internode.on.net) has left #haskell ("Leaving")
2013-03-25 13:50:59	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-25 13:51:24	-->	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-25 13:53:01	-->	twomashi1 (~Adium@83-244-243-242.cust-83.exponential-e.net) has joined #haskell
2013-03-25 13:53:07	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-03-25 13:53:28	<--	twomashi (~Adium@83-244-243-242.cust-83.exponential-e.net) has quit (Read error: Connection reset by peer)
2013-03-25 13:54:10	<--	monsieurlu (~monsieurl@163.5.111.71) has quit (Ping timeout: 245 seconds)
2013-03-25 13:54:20	-->	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has joined #haskell
2013-03-25 13:54:31	<--	charliesome (~textual@124-148-168-157.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-25 13:54:59	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-25 13:54:59	-->	cognominal (~cognomina@37.160.59.38) has joined #haskell
2013-03-25 13:55:22	mm_freak	edwardk: do you have an EitherT that is a Biapplicative somewhere?
2013-03-25 13:55:43	<--	cognominal__ (~cognomina@37.160.59.38) has quit (Ping timeout: 264 seconds)
2013-03-25 13:55:47	mm_freak	or rather:  is there a BiapplicativeTrans version?
2013-03-25 13:56:21	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 13:56:24	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-25 13:56:56	mm_freak	actually i wonder how this might work…  perhaps i didn't think this through enough =)
2013-03-25 13:57:10	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-25 13:57:11	-->	hyperthunk (~hyperthun@46.233.72.121) has joined #haskell
2013-03-25 13:57:27	<--	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Read error: Connection reset by peer)
2013-03-25 13:57:36	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-03-25 13:58:18	hyperthunk	Does anyone know if there's an API (GHC specific is fine) to determine which +RTS options have been given at runtime?
2013-03-25 13:58:59	-->	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 13:59:04	hyperthunk	I want to know when a program compiled with -eventlog is being run with `+RTS -v` (or equivalent flags)
2013-03-25 13:59:12	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-03-25 13:59:12	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-25 13:59:26	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-25 14:01:02	<--	Tharugrim (~Tharugrim@178-190-243-248.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-25 14:03:09	-->	Philonous (~Philonous@dslb-088-075-023-180.pools.arcor-ip.net) has joined #haskell
2013-03-25 14:03:32	mm_freak	hyperthunk: you can get at some of the information at least…  check out modules below GHC.*
2013-03-25 14:03:57	-->	bradleya_ (~brad@110.150.35.181) has joined #haskell
2013-03-25 14:04:04	hyperthunk	mm_freak: ok thanks, I'll take a look - just didn't want to dig through all the haddocks if it was a dead end, but if there's something there then I'll poke around a bit. Cheers!
2013-03-25 14:04:10	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-25 14:04:18	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 245 seconds)
2013-03-25 14:04:47	-->	allsystemsarego (~allsystem@188.27.165.190) has joined #haskell
2013-03-25 14:04:47	<--	allsystemsarego (~allsystem@188.27.165.190) has quit (Changing host)
2013-03-25 14:04:47	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-03-25 14:04:53	-->	Tharugrim (~Tharugrim@178-190-243-248.adsl.highway.telekom.at) has joined #haskell
2013-03-25 14:04:55	quchen	ks07: Are you familiar with ST in general? STArray is quite straightforward if that's the case.
2013-03-25 14:05:03	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 14:05:36	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 264 seconds)
2013-03-25 14:05:37	ks07	No, sadly, new to haskell. Done a tiny bit of IO
2013-03-25 14:05:56	<--	Tharugrim (~Tharugrim@178-190-243-248.adsl.highway.telekom.at) has quit (Client Quit)
2013-03-25 14:05:56	-->	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-25 14:06:15	-->	Tharugrim (~Tharugrim@178-190-243-248.adsl.highway.telekom.at) has joined #haskell
2013-03-25 14:06:31	quchen	Oh. Well then ST might be a long shot. Have you used normal arrays before in Haskell?
2013-03-25 14:06:41	<--	cognominal (~cognomina@37.160.59.38) has quit (Ping timeout: 245 seconds)
2013-03-25 14:06:44	-->	XexonixXexillion (~LudvikGal@130.56.91.115) has joined #haskell
2013-03-25 14:06:48	<--	thorsten_no_nick (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has quit (Quit: WeeChat 0.4.0)
2013-03-25 14:06:53	-->	cognominal (~cognomina@37.160.59.38) has joined #haskell
2013-03-25 14:06:53	quchen	STArrays don't do anything special, they're mostly for optimization of normal array operations.
2013-03-25 14:06:59	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Read error: Operation timed out)
2013-03-25 14:07:16	<--	bradleyayers (~brad@49.176.102.56) has quit (Ping timeout: 261 seconds)
2013-03-25 14:07:20	-->	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-25 14:08:10	<--	Palmik_ (~palmik@comp55-28.vpn.muni.cz) has quit (Ping timeout: 240 seconds)
2013-03-25 14:08:14	<--	kiwnix (~egarcia@unaffiliated/kiwnix) has quit (Quit: Leaving)
2013-03-25 14:08:21	-->	Hannibal_Smith (~ff130493@host166-76-dynamic.10-87-r.retail.telecomitalia.it) has joined #haskell
2013-03-25 14:08:50	ks07	Ah okay - the reason I ask is I'm doing an assignment where one part asks us to use arrays to speed up an operation. Is it worth trying with standard arrays first to learn the ropes?
2013-03-25 14:09:19	quchen	ks07: Definitely.
2013-03-25 14:09:34	ks07	Alright ty, will look into it
2013-03-25 14:09:43	quchen	ks07: The problem with normal arrays in Haskell is that when you change a single element, you have to copy the entire array.
2013-03-25 14:09:47	<--	hyperthunk (~hyperthun@46.233.72.121) has left #haskell
2013-03-25 14:10:00	-->	peoplee (b1513f32@gateway/web/freenode/ip.177.81.63.50) has joined #haskell
2013-03-25 14:10:05	-->	Palmik_ (~palmik@man-208-121.pks.muni.cz) has joined #haskell
2013-03-25 14:10:06	quchen	So if you insert three numbers in an array of 10k entries, you have to make 30k copy operations.
2013-03-25 14:10:21	quchen	ST fixes that problem so that you can combine multiple operations like that into one.
2013-03-25 14:10:22	ks07	so similar to a list?
2013-03-25 14:10:38	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 14:10:39	quchen	No, to change an element in a list you don't have to copy the entire thing.
2013-03-25 14:10:59	ks07	Shows how much I know
2013-03-25 14:11:04	quchen	Lists are like linked lists in Haskell, they can be distributed over memory. When you update a single element in a list, not much has to be changed.
2013-03-25 14:11:27	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Read error: Connection reset by peer)
2013-03-25 14:11:29	<--	Rotaerk (~BlahBlahB@174.54.255.117) has quit (Read error: Connection reset by peer)
2013-03-25 14:11:29	quchen	Basically, the compiler has to create a new list consisting of a pointer to the "before", to the "after", and allocate a new element.
2013-03-25 14:11:43	mauke	quchen: that's wrong
2013-03-25 14:11:46	mauke	there is no "before"
2013-03-25 14:11:56	quchen	Oh, right.
2013-03-25 14:12:08	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-25 14:12:16	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-25 14:12:19	<--	latro`a (~Ian@pool-108-48-122-186.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-25 14:12:24	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 14:12:26	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-03-25 14:12:33	quchen	So you have to allocate a new "before" spine I guess.
2013-03-25 14:13:00	mm_freak	ks07: when people talk about arrays in haskell they don't necessarily mean Data.Array.* arrays…  in almost all cases you would prefer to use Data.Vector.* arrays
2013-03-25 14:13:17	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-03-25 14:13:23	-->	schlicht__ (~fl@lutz.uebb.tu-berlin.de) has joined #haskell
2013-03-25 14:13:24	ks07	How do they differ?
2013-03-25 14:13:56	quchen	Vector has a friendly API, array doesn't. ;-)
2013-03-25 14:14:00	mm_freak	ks07: vectors are designed for purely written code…  many operations that would be O(n) space/time with standard arrays are O(1) with vectors
2013-03-25 14:14:07	--	heathjs is now known as heath
2013-03-25 14:14:12	-->	copamp (copamp@88.131.56.174) has joined #haskell
2013-03-25 14:14:24	-->	Itkovian (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-03-25 14:14:30	elliott	if it's an assignment I'm not so sure vector would be allowed
2013-03-25 14:14:32	ClaudiusMaximus	assignent for haskell newbie probably involves boxed arrays for memoization/dynamic programming?
2013-03-25 14:14:52	typoclass	ks07: i suggest that you implement things the simplest possible way (which probably means lists). then you can profile it and determine where the bottlenecks are. you can afterwards write another solution using arrays and compare the performance of the two solutions. this way you can be sure you're doing something meaningful
2013-03-25 14:14:54	ks07	haha, that sounds good, think I'll try the vector
2013-03-25 14:14:55	mm_freak	ks07: you only ever need destructive update if you really want to update individual elements separately, for example when you write a prime sieve or something like that
2013-03-25 14:14:56	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-25 14:14:58	-->	OlegYch (~OlegYch@86.57.158.170) has joined #haskell
2013-03-25 14:15:05	copamp	does each socket has correspond to one separate physical connection or can several sockets listen to the same IP and port?
2013-03-25 14:15:06	mm_freak	ks07: however, make sure you are allowed to use vectors
2013-03-25 14:15:18	-->	Zariel (~zariel@li37-84.members.linode.com) has joined #haskell
2013-03-25 14:15:20	quchen	Vector is pretty much like C++'s vectors: zero-based int indexed etc. Arrays allow any Ix as index, but as a consequence they're a little harder to work with sometimes.
2013-03-25 14:16:18	typoclass	ks07: and as always, don't do premature optimization
2013-03-25 14:16:51	ks07	I don't think we're restricted on what we use - the task is an extension to write a better shuffle implementation, as the basic list version we started with is O(n^2)
2013-03-25 14:17:30	mm_freak	copamp: sockets, just like other file descriptors, can be duplicated…  to see what this means you should check out your operating system's manual
2013-03-25 14:17:33	-->	chirpsalot (~Chirps@unaffiliated/chirpsalot) has joined #haskell
2013-03-25 14:18:04	mm_freak	ks07: you definitely want vectors for that…  specifically see the 'backpermute' function
2013-03-25 14:18:06	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-25 14:18:08	ks07	didn't think to search for haskell shuffle, totally missed the whole wiki page on shuffling
2013-03-25 14:18:27	elliott	ks07: well, the thing is that vector is not a totally standard library
2013-03-25 14:18:34	elliott	it's aprt of the Haskell Platform, but doesn't come with the GHC compiler itself
2013-03-25 14:18:42	elliott	which is why it might not be allowed
2013-03-25 14:18:58	ks07	Data.Vectr ?
2013-03-25 14:19:01	ks07	+o
2013-03-25 14:19:15	-->	kmels (~kmels@frbg-5d84f698.pool.mediaWays.net) has joined #haskell
2013-03-25 14:19:17	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-25 14:19:18	-->	kmels__ (~kmels@frbg-5d84f698.pool.mediaWays.net) has joined #haskell
2013-03-25 14:19:32	elliott	yes
2013-03-25 14:19:42	ks07	Not available on the lab machines, so looks like it'll be arrays after all
2013-03-25 14:19:53	blueonyx	@source otherwise
2013-03-25 14:19:54	lambdabot	otherwise not available
2013-03-25 14:19:57	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Quit: sclv)
2013-03-25 14:19:59	blueonyx	O.o
2013-03-25 14:20:04	blueonyx	:t otherwise
2013-03-25 14:20:05	lambdabot	Bool
2013-03-25 14:20:07	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 14:20:24	typoclass	ks07: keep in mind that O(...) notation does not usually tell the whole story. i suggest you profile your solution to get some actual measurements
2013-03-25 14:20:29	<--	copamp (copamp@88.131.56.174) has left #haskell
2013-03-25 14:20:55	quchen	blueonyx: otherwise = True, defined in GHC.Bool or something
2013-03-25 14:21:05	typoclass	blueonyx: it's (funnily) defined as "otherwise = True". this way, it always matches when you do "| otherwise = ..."
2013-03-25 14:21:18	blueonyx	i know, thx anyhow
2013-03-25 14:21:28	ks07	Ok,  will keep that in mind, thanks for all the suggestions
2013-03-25 14:21:37	-->	ddenys (59a28b02@gateway/web/freenode/ip.89.162.139.2) has joined #haskell
2013-03-25 14:22:00	typoclass	blueonyx: and @src afaik is just a text file where someone copy-pasted the most popular functions. the "source" links on haddock are more complete
2013-03-25 14:22:12	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-25 14:22:14	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-03-25 14:22:14	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-03-25 14:22:15	blueonyx	ah
2013-03-25 14:22:58	blueonyx	i just wanted to explain the | otherwise thing with lambdabot for mushi
2013-03-25 14:23:03	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 14:23:40	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 14:24:18	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-25 14:24:34	<--	ddenys (59a28b02@gateway/web/freenode/ip.89.162.139.2) has quit (Client Quit)
2013-03-25 14:24:35	-->	davidf18 (~textual@25.sub-70-192-70.myvzw.com) has joined #haskell
2013-03-25 14:25:17	 *	hackagebot yaml-config 0.0.1 - Configuration management  http://hackage.haskell.org/package/yaml-config-0.0.1 (FedorGogolev)
2013-03-25 14:25:17	<--	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has quit (Remote host closed the connection)
2013-03-25 14:25:30	--	zz_nh2 is now known as nh2
2013-03-25 14:25:50	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-03-25 14:25:53	-->	melter (~Melter@2001:4930:116:0:c7e:d332:48b3:766c) has joined #haskell
2013-03-25 14:26:07	-->	jianmeng1 (~mengjian@27.24.141.56) has joined #haskell
2013-03-25 14:26:50	-->	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has joined #haskell
2013-03-25 14:29:03	-->	alanz (~alanz@105-237-0-207.access.mtnbusiness.co.za) has joined #haskell
2013-03-25 14:30:01	<--	nh2 (~nh2@2001:41d0:1:c648::1) has left #haskell
2013-03-25 14:30:47	--	MoALTz__ is now known as MoALTz
2013-03-25 14:31:40	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 240 seconds)
2013-03-25 14:31:41	-->	Urchin[emacs] (~user@unaffiliated/urchin) has joined #haskell
2013-03-25 14:32:13	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-25 14:33:37	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 14:33:44	-->	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has joined #haskell
2013-03-25 14:33:54	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-03-25 14:34:33	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 14:34:37	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Read error: Connection reset by peer)
2013-03-25 14:34:43	-->	seafood (~seafood@48.8.233.220.static.exetel.com.au) has joined #haskell
2013-03-25 14:35:03	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 14:35:17	 *	hackagebot fclabels 1.1.5 - First class accessor labels.  http://hackage.haskell.org/package/fclabels-1.1.5 (SebastiaanVisser)
2013-03-25 14:35:22	-->	cognominal__ (~cognomina@37.161.236.94) has joined #haskell
2013-03-25 14:35:30	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-25 14:35:42	--	jlaire_ is now known as jlaire
2013-03-25 14:35:43	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-25 14:35:59	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 14:36:04	<--	cognominal (~cognomina@37.160.59.38) has quit (Ping timeout: 256 seconds)
2013-03-25 14:36:29	<--	nomeata (nobody@nomeata.de) has quit (Quit: Client exiting)
2013-03-25 14:37:45	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-25 14:39:12	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-25 14:39:30	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 14:39:36	<--	XexonixXexillion (~LudvikGal@130.56.91.115) has quit (Remote host closed the connection)
2013-03-25 14:41:21	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-25 14:41:27	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 276 seconds)
2013-03-25 14:42:04	<--	Urchin[emacs] (~user@unaffiliated/urchin) has quit (Ping timeout: 245 seconds)
2013-03-25 14:42:16	<--	schovi_ (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-25 14:43:20	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-25 14:44:19	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-25 14:44:26	-->	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-03-25 14:44:27	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-25 14:44:30	<--	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-03-25 14:44:53	-->	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has joined #haskell
2013-03-25 14:45:08	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-25 14:45:28	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 14:45:43	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-03-25 14:45:56	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 252 seconds)
2013-03-25 14:47:22	-->	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 14:48:25	<--	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has quit (Client Quit)
2013-03-25 14:48:53	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-25 14:50:18	 *	hackagebot safecopy 0.8.2 - Binary serialization with version control.  http://hackage.haskell.org/package/safecopy-0.8.2 (DavidHimmelstrup)
2013-03-25 14:50:42	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-03-25 14:52:14	<--	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-25 14:52:22	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-25 14:52:47	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-25 14:53:02	-->	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 14:53:32	-->	monsieurlu (~monsieurl@163.5.151.112) has joined #haskell
2013-03-25 14:53:36	<--	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has left #haskell
2013-03-25 14:53:46	<--	cognominal__ (~cognomina@37.161.236.94) has quit (Ping timeout: 245 seconds)
2013-03-25 14:53:57	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-25 14:54:01	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-25 14:54:25	-->	cognominal__ (~cognomina@37.160.50.22) has joined #haskell
2013-03-25 14:54:56	-->	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 14:55:05	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-25 14:55:55	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-25 14:56:47	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-25 14:56:53	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-25 14:57:00	-->	niloc132 (~colin@75-163-26-190.dlth.qwest.net) has joined #haskell
2013-03-25 14:57:40	<--	davidf18 (~textual@25.sub-70-192-70.myvzw.com) has quit (Read error: Connection reset by peer)
2013-03-25 14:58:30	<--	khismetix (~textual@178.167.167.45.threembb.ie) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-25 14:58:37	-->	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-25 15:00:03	<--	mushi (d31eff56@gateway/web/freenode/ip.211.30.255.86) has quit (Ping timeout: 245 seconds)
2013-03-25 15:00:18	<--	squidz (~albert@141.84.69.76) has quit (Quit: leaving)
2013-03-25 15:00:23	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-25 15:00:25	<--	pikhq (~pikhq@75-163-216-247.clsp.qwest.net) has quit (Ping timeout: 245 seconds)
2013-03-25 15:00:32	-->	pikhq (~pikhq@174-24-12-186.clsp.qwest.net) has joined #haskell
2013-03-25 15:00:47	-->	glguy (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-25 15:00:57	<--	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has quit (Quit: Leaving)
2013-03-25 15:01:10	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Ping timeout: 240 seconds)
2013-03-25 15:01:10	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-25 15:01:22	-->	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has joined #haskell
2013-03-25 15:01:44	mm_freak	instance (Monoid e) => Alternative (Either e)  -- this instance is missing
2013-03-25 15:01:48	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-25 15:02:18	-->	_ft_ (~user@wpa146213.Wireless.McGill.CA) has joined #haskell
2013-03-25 15:02:58	johnw	i'd let libraries@ know
2013-03-25 15:03:03	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-25 15:03:03	<--	edsko (~edsko@79.97.126.24) has quit (Remote host closed the connection)
2013-03-25 15:03:22	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-25 15:03:29	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 15:03:54	mm_freak	johnw: i doubt that they will add it
2013-03-25 15:04:09	johnw	why wouldn't they?
2013-03-25 15:04:35	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 15:05:20	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-25 15:05:55	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 256 seconds)
2013-03-25 15:08:04	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 15:08:07	mm_freak	well, for one thing it clashes with this stupid, braindead, whoever-came-up-with-this-deserves-to-be-publicly-whipped Alternative instance from transformers' Control.Monad.Trans.Error
2013-03-25 15:08:34	johnw	that is really unfortunate :(
2013-03-25 15:09:06	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 15:09:14	<--	aCube (~cubce@dslb-088-073-235-234.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-25 15:09:23	mm_freak	MonadError really has PHP qualities…  must have been invented by a PHP programmer who never convalesced from it
2013-03-25 15:09:27	 *	dcoutts wants to complain about the instance MonadError (Either e) 
2013-03-25 15:09:40	dcoutts	the unnecessary Error e =>  constraint
2013-03-25 15:09:50	dcoutts	makes all kinds of useful things impossible
2013-03-25 15:10:02	dcoutts	unnecessary/unused
2013-03-25 15:10:21	mm_freak	yeah, basically lets you newtype-wrap Either all the time
2013-03-25 15:10:32	johnw	s/lets/forces you to?
2013-03-25 15:10:45	mm_freak	yeah
2013-03-25 15:10:59	 *	elliott wants to complain about the existence of Error, full stop
2013-03-25 15:11:06	-->	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has joined #haskell
2013-03-25 15:11:09	dcoutts	elliott: yes
2013-03-25 15:11:09	<--	fxr (~user@82.222.92.178) has quit (Remote host closed the connection)
2013-03-25 15:11:17	mm_freak	to be honest i consider it an error to import anything that brings MonadError instances into scope
2013-03-25 15:11:23	dcoutts	though I can at least see a couple places where it's actually used
2013-03-25 15:11:23	glguy	"EitherT is a version of ErrorT that does not require a spurious Error instance for the Left case."
2013-03-25 15:12:03	mm_freak	dcoutts: a can see no place where a Monoid constraint on e would not be much more sensible
2013-03-25 15:12:12	mm_freak	i
2013-03-25 15:12:26	zenzike_	I must be missing something ... why is Error so evil? Is it that you'd rather leave Left alone?
2013-03-25 15:12:38	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-25 15:12:51	mm_freak	zenzike_: Error assumes that all error messages are strings
2013-03-25 15:12:53	typoclass	mm_freak: how do you mean? multiple errors are collected in a monoid?
2013-03-25 15:13:02	dcoutts	mm_freak: I've not looked at that, I just noted that it's unused in several places, and is a harmful requirement in those places
2013-03-25 15:13:07	mm_freak	typoclass: consider Last SomeException
2013-03-25 15:13:14	mm_freak	Error forces you to use String instead of that
2013-03-25 15:13:20	zenzike_	mm_freak: aha, yes, that is eil. I hadn't noticed the type of strMsg
2013-03-25 15:13:53	Saizan	the Error constraint on the MonadError instance is probably there from when it was needed for Monad (Either e)
2013-03-25 15:14:06	mm_freak	dcoutts: this is where the globalization of class instances bites you
2013-03-25 15:14:23	dcoutts	well, if we all agree it's wrong, lets propose it on the libs list
2013-03-25 15:14:33	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 15:14:35	mm_freak	Saizan: that was never required in the first place…  'fail' shouldn't exist
2013-03-25 15:14:48	mm_freak	after all you always fail with "pattern match failure"
2013-03-25 15:14:58	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-25 15:15:06	mm_freak	dcoutts: i think, we all agree
2013-03-25 15:15:17	johnw	I agree as well
2013-03-25 15:15:17	dcoutts	and the constraint was already dropped for Monad
2013-03-25 15:15:27	dcoutts	just need to follow through with the rest
2013-03-25 15:16:05	-->	Luke (~lhoersten@160.79.132.254) has joined #haskell
2013-03-25 15:16:09	mm_freak	my proposal is to require Monoid on 'e' where necessary
2013-03-25 15:16:26	mm_freak	whenever you fail, fail with Left mempty
2013-03-25 15:16:40	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-25 15:16:45	glguy	Doesn't that create a circumstance where ap /= <*> ?
2013-03-25 15:16:55	 *	glguy jumps in late
2013-03-25 15:16:57	mm_freak	and have:  Left e1 <|> Left e2 = Left (e1 <> e2)
2013-03-25 15:17:05	mm_freak	glguy: why?
2013-03-25 15:17:17	glguy	Ah, you're only doing the exception merge on Alternative
2013-03-25 15:17:20	glguy	and not Applicative?
2013-03-25 15:17:36	mm_freak	glguy: what do you mean?
2013-03-25 15:18:00	glguy	You can also have Monoid e => Applicative (Either e)
2013-03-25 15:18:02	mm_freak	similarly you get:  Left e1 <*> Left e2 = Left (e1 <> e2)
2013-03-25 15:18:04	mm_freak	yeah
2013-03-25 15:18:15	glguy	but then   f <*> x    isn't the same as   f `ap` x
2013-03-25 15:18:18	-->	MasterPuncher (~erinehart@208.117.200.94) has joined #haskell
2013-03-25 15:18:21	glguy	which some people consider a mistake
2013-03-25 15:18:21	mm_freak	i've checked the laws already for an Either-like type
2013-03-25 15:18:29	glguy	Are you revoking the Monad instance?
2013-03-25 15:18:41	mm_freak	glguy: it is when fail = const (Left mempty)
2013-03-25 15:18:54	Saizan	i think we should keep the Monad and Applicative instances as they are now, with no constraints
2013-03-25 15:18:59	mm_freak	glguy: oh, i see what you mean
2013-03-25 15:19:29	mm_freak	so leftmost error only?
2013-03-25 15:19:51	mm_freak	then of course no Monoid constraint is necessary
2013-03-25 15:20:11	glguy	I'm not advocating for either approach, just bringing up the issue
2013-03-25 15:20:30	Saizan	yeah, left-most only
2013-03-25 15:20:33	<--	__dv__ (~quassel@SD1.retn.net) has quit (Remote host closed the connection)
2013-03-25 15:20:34	dcoutts	mm_freak: fewer constraints seems sensible as the default. It's easy enough to make a separate type (not Either) that does the "collecting multiple independent errors" thing
2013-03-25 15:20:56	<--	edon (~user@albalug/edon) has quit (Ping timeout: 252 seconds)
2013-03-25 15:21:20	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-25 15:21:30	mm_freak	yeah, unfortunately the applicative Either i'm proposing is not a Monad, as pointed out by glguy =/
2013-03-25 15:21:45	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-25 15:21:59	<--	taterbase (~taterbase@c-67-169-241-198.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-03-25 15:22:14	-->	__dv__ (~quassel@SD1.retn.net) has joined #haskell
2013-03-25 15:22:29	mm_freak	in any case MonadError needs to go
2013-03-25 15:22:37	-->	Kostas (~Kostas@213.159.34.100) has joined #haskell
2013-03-25 15:23:49	--	MasterPuncher is now known as EvanR
2013-03-25 15:23:53	<--	EvanR (~erinehart@208.117.200.94) has quit (Changing host)
2013-03-25 15:23:53	-->	EvanR (~erinehart@unaffiliated/evanr) has joined #haskell
2013-03-25 15:24:34	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-25 15:25:10	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-25 15:25:13	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-25 15:26:23	<--	shurikas (~Kostas@195.181.64.50) has quit (Ping timeout: 245 seconds)
2013-03-25 15:26:45	plhk	what's the replacement, exception monad?
2013-03-25 15:28:18	<--	dates (58e3c7cf@gateway/web/freenode/ip.88.227.199.207) has quit (Quit: Page closed)
2013-03-25 15:28:29	<--	_ft_ (~user@wpa146213.Wireless.McGill.CA) has quit (Remote host closed the connection)
2013-03-25 15:28:39	-->	roconnor (~roconnor@e120-pool-d89a7738.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-25 15:29:55	-->	soulofpeace (~soulofpea@cm242.gamma162.maxonline.com.sg) has joined #haskell
2013-03-25 15:30:04	-->	Thomyho4 (~thomyho@mnhm-4d0129c3.pool.mediaWays.net) has joined #haskell
2013-03-25 15:30:55	-->	fxr (~user@82.222.92.178) has joined #haskell
2013-03-25 15:31:43	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-25 15:31:44	<--	__dv__ (~quassel@SD1.retn.net) has quit (Remote host closed the connection)
2013-03-25 15:32:27	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 15:32:48	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 15:33:20	<--	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 245 seconds)
2013-03-25 15:33:23	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-25 15:34:20	-->	kiwnix (~egarcia@unaffiliated/kiwnix) has joined #haskell
2013-03-25 15:34:32	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-25 15:35:19	 *	hackagebot gdiff-th 0.1.0.5 - Generate gdiff GADTs and Instances.  http://hackage.haskell.org/package/gdiff-th-0.1.0.5 (JonathanFischoff)
2013-03-25 15:35:54	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-25 15:36:08	-->	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 15:36:10	<--	seafood (~seafood@48.8.233.220.static.exetel.com.au) has quit (Ping timeout: 240 seconds)
2013-03-25 15:36:25	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-25 15:36:48	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 245 seconds)
2013-03-25 15:36:50	-->	inad922 (~inad925@93.93.84.85) has joined #haskell
2013-03-25 15:37:32	<--	cognominal__ (~cognomina@37.160.50.22) has quit (Ping timeout: 245 seconds)
2013-03-25 15:38:45	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-25 15:39:00	hpaste	Rob pasted “HsFFI.h: No such file or directory” at http://hpaste.org/84638
2013-03-25 15:42:43	<--	julmuri (~kama@q186.ip4.netikka.fi) has quit (Read error: Connection reset by peer)
2013-03-25 15:42:43	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 15:42:43	-->	julmuri (~kama@q186.ip4.netikka.fi) has joined #haskell
2013-03-25 15:42:44	robstewartuk	Hi, could someone tell me what the error is that I am making, trying to call Haskell from C using FFI? http://hpaste.org/84638
2013-03-25 15:42:44	robstewartuk	"fatal error: HsFFI.h: No such file or directory"
2013-03-25 15:42:44	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Quit: leaving)
2013-03-25 15:42:44	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 264 seconds)
2013-03-25 15:42:44	 *	hackagebot gdiff-th 0.1.0.6 - Generate gdiff GADTs and Instances.  http://hackage.haskell.org/package/gdiff-th-0.1.0.6 (JonathanFischoff)
2013-03-25 15:42:44	-->	sbahra (~sbahra@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-25 15:42:44	-->	schovi_ (~schovi@194.213.198.34) has joined #haskell
2013-03-25 15:42:44	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-25 15:42:45	geekosaur	robstewartuk, you should normally not ever try to directly compile a .h file, wiether with gcc or ghc
2013-03-25 15:42:52	hpaste	amatsu pasted “Couldn't match expected type” at http://hpaste.org/84639
2013-03-25 15:43:00	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Client Quit)
2013-03-25 15:43:03	geekosaur	it's an include file, it is only meaningful as part of some other compilation
2013-03-25 15:43:13	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-25 15:43:16	amatsu	I'm probably pattern matching wrong, but for some reason this doesn't seem to work
2013-03-25 15:43:18	<--	schovi_ (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-25 15:43:19	<--	monsieurlu (~monsieurl@163.5.151.112) has quit (Ping timeout: 245 seconds)
2013-03-25 15:43:27	geekosaur	(that is, only meaningful when #include-d by some C source fiule which may need to do other setup for it to work)
2013-03-25 15:43:42	-->	schovi_ (~schovi@194.213.198.34) has joined #haskell
2013-03-25 15:43:43	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-25 15:43:43	amatsu	I'm trying to declare a functor instance for my newtype, which is a wrapper around a vector of vectors.
2013-03-25 15:43:45	<--	kennyd (~kennyd@93-138-171-125.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-03-25 15:43:45	-->	cognominal (~cognomina@37.160.50.22) has joined #haskell
2013-03-25 15:43:46	armlesshobo	robstewartuk: make sure the include directories are valid and contain HsFFI.h?
2013-03-25 15:43:58	amatsu	Is there a better way to do this?
2013-03-25 15:44:01	geekosaur	likely the first ghc invocation did the setup,m the second has no idea about it and should not be passed the .h file at all
2013-03-25 15:45:37	<--	glguy (~emertens@unaffiliated/glguy) has quit (Quit: Quitting)
2013-03-25 15:45:41	Rotaerk	hmm, given that mutation is encapsulated by the State monad, *on top of* a purely functional framework, is GHC capable of optimizing how this is compiled, such that mutations within State correspond to physical mutations of memory locations?
2013-03-25 15:45:42	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-25 15:45:52	hpaste	Rob revised “HsFFI.h: No such file or directory”: “Updated: undefined reference to ZCMain_main_closure” at http://hpaste.org/84638
2013-03-25 15:46:04	-->	glguy (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-25 15:46:04	Rotaerk	well, assuming you're in a context where the state being replaced is no longer needed
2013-03-25 15:46:39	robstewartuk	geekosaur: armlesshobo: thanks, I've updated. This time, I'm getting an error because my module does not export a main function http://hpaste.org/84638
2013-03-25 15:46:52	geekosaur	yes, because you do not have Main.main, you have Foo.main
2013-03-25 15:46:54	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-25 15:46:57	-->	rmarianski (~rmariansk@mail.marianski.com) has joined #haskell
2013-03-25 15:47:00	aCube	Can I compile a shared library from cbits sources in cabal?
2013-03-25 15:47:01	geekosaur	hm, wait, not quite
2013-03-25 15:47:16	-->	kennyd (~kennyd@93-138-171-125.adsl.net.t-com.hr) has joined #haskell
2013-03-25 15:47:20	geekosaur	oh, I see, you are using a C main. I think you're not quite doing it right
2013-03-25 15:47:35	robstewartuk	geekosaur: quite.
2013-03-25 15:47:54	robstewartuk	yes, I want to export foo in Foo as a library
2013-03-25 15:48:00	geekosaur	lemme check how that works; having a C main() is somewhat different to work with than using a Haskell Main.main
2013-03-25 15:48:01	robstewartuk	to be used by C
2013-03-25 15:49:03	dcoutts	aCube: sort-of, you can compile a haskell lib as a shared lib, and that will also work for c code in the lib
2013-03-25 15:49:42	geekosaur	robstewartuk, " If you do use GHC, then don't forget the flag -no-hs-main, otherwise GHC will try to link to the Main Haskell module."
2013-03-25 15:50:00	geekosaur	http://www.haskell.org/ghc/docs/latest/html/users_guide/ffi-ghc.html#using-own-main
2013-03-25 15:50:04	-->	Michael__ (~michael@64.134.176.210) has joined #haskell
2013-03-25 15:51:02	robstewartuk	that's it.
2013-03-25 15:51:03	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-25 15:51:06	robstewartuk	thank you geekosaur
2013-03-25 15:51:40	<--	cognominal (~cognomina@37.160.50.22) has quit (Ping timeout: 245 seconds)
2013-03-25 15:51:47	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Ping timeout: 255 seconds)
2013-03-25 15:51:53	aCube	I'm getting the following error when loading a simple library in C++ (with export "C") to be used by the Haskell FFI: final link ... ghc: ./libmain.a: unknown symbol `__dso_handle'
2013-03-25 15:52:12	-->	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has joined #haskell
2013-03-25 15:52:22	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-25 15:52:33	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Client Quit)
2013-03-25 15:52:39	<--	Michael__ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 15:52:41	aCube	It works if I compile my main library into a shared library and load that one
2013-03-25 15:53:07	-->	rck (hidden-use@ip67-90-159-2.z159-90-67.customer.algx.net) has joined #haskell
2013-03-25 15:53:23	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 252 seconds)
2013-03-25 15:53:57	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-25 15:54:02	-->	mmm__ (~bark@2001:470:8a52:67:691e:57ee:c61d:23db) has joined #haskell
2013-03-25 15:55:28	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-25 15:55:45	geekosaur	http://wiki.osdev.org/C%2B%2B#GCC suggests you need to provide it; possibly you should actually be linking to some libstdc++ or other C++ runtime?
2013-03-25 15:56:24	 *	geekosaur thinks that page is suggesting manual implementation of several chunks of C++ runtime that should be coming from its runtime support library
2013-03-25 15:56:24	aCube	I used this command to compile the static library: g++ -static -c -o main.o main.c && ar rcs libmain.a main.o
2013-03-25 15:56:36	mm_freak	aCube: you need more flags
2013-03-25 15:56:38	geekosaur	yes, so where's the C++ runtime library there?
2013-03-25 15:56:50	geekosaur	or more likely, where is it in the final link?
2013-03-25 15:57:23	aCube	The error message appears when I do: ghci ./main.hs -L. -lmain -lstdc++ -lgcc_s -lc
2013-03-25 15:57:41	geekosaur	ghci.
2013-03-25 15:57:57	aCube	Is it a problem with ghci?
2013-03-25 15:58:09	geekosaur	I think you may lose, unless you fake it as specified by that earlier link? ghci has its own builtin linker which doesn't always behave like the system linker
2013-03-25 15:58:33	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Quit: leaving)
2013-03-25 15:58:46	geekosaur	alternately try including it in your first g++ line so it's built into main.o?
2013-03-25 15:58:50	mm_freak	aCube: it's a problem with C++ and the FFI's failure to support it…  you may will find yourself in a situation where you can compile C++ FFI programs, but not interpret them
2013-03-25 15:59:10	mm_freak	aCube: your best bet is to compile the C++ stuff into a shared object
2013-03-25 15:59:24	<--	jaeyeun (~jaeyeun@c-24-91-30-184.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-25 15:59:25	mm_freak	s/will/well/
2013-03-25 15:59:41	geekosaur	^^ is basically what I'm getting at, from the other end...
2013-03-25 16:00:21	<--	alanz (~alanz@105-237-0-207.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-25 16:00:45	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-25 16:01:29	aCube	Can I build my haskell lib as a static lib, and only build the c++ lib as a shared lib with cabal?
2013-03-25 16:02:28	dcoutts	aCube: no, cabal's support for building C/C++ code is always as part of the same lib, so it'd be compiled the same way as the Haskell lib (static or dynamic)
2013-03-25 16:02:37	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 16:02:51	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-25 16:03:00	aCube	so I have to build my whole library as shared for this to work?
2013-03-25 16:03:24	dcoutts	aCube: so you can have C/C++ code in a Haskell lib and compile the Haskell lib as a static lib, or as a dynamic lib. If you want to compile the C/C++ code as a separate lib you can do that too (building that is then outside the scope of cabal) and then link to that external lib in the usual ways
2013-03-25 16:03:26	-->	cognominal (~cognomina@37.160.34.109) has joined #haskell
2013-03-25 16:03:28	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 245 seconds)
2013-03-25 16:04:11	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-03-25 16:04:22	-->	ParahSailin (~eg@unaffiliated/parahsailin) has joined #haskell
2013-03-25 16:04:23	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 255 seconds)
2013-03-25 16:04:34	aCube	ok, thank you
2013-03-25 16:04:38	coppro	aCube: does adding "-lgcc" help?
2013-03-25 16:04:40	dcoutts	aCube: what are you really trying to do? are you trying to present a C/C++ interface for this lib?
2013-03-25 16:04:45	--	pepijndevos is now known as pepijn_away
2013-03-25 16:05:01	dcoutts	or is it just some C/C++ helper code that you need to link into your Haskell lib
2013-03-25 16:05:14	aCube	coppro: no
2013-03-25 16:05:48	<--	sopvop (~lonokhov@213.170.88.44) has quit (Quit: Leaving.)
2013-03-25 16:06:01	aCube	dcoutts: I'm trying to access some stuff of QML2
2013-03-25 16:06:14	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Ping timeout: 245 seconds)
2013-03-25 16:06:17	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 16:06:55	dcoutts	aCube: ok, so the C code is for interfacing to that external lib? I'm guessing QML2 is a C++ lib, and your code is to provide some C functions you can bind to directly with the ffi
2013-03-25 16:06:58	<--	danols_work (~danols_wo@s72-38-184-18.static.comm.cgocable.net) has left #haskell
2013-03-25 16:07:46	dcoutts	if that's the case, then I don't see that you need to worry about whether the Haskell lib is built static or dynamic
2013-03-25 16:07:52	--	lahwran- is now known as lahwran
2013-03-25 16:08:27	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 16:08:48	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-25 16:10:13	--	pepijn_away is now known as pepijndevos
2013-03-25 16:10:16	-->	Michael__ (~michael@64.134.176.210) has joined #haskell
2013-03-25 16:10:44	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-03-25 16:11:14	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-25 16:11:39	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 245 seconds)
2013-03-25 16:12:55	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 16:13:05	<--	jianmeng1 (~mengjian@27.24.141.56) has quit (Quit: Leaving.)
2013-03-25 16:13:11	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Quit: WeeChat 0.3.8)
2013-03-25 16:13:23	<--	cognominal (~cognomina@37.160.34.109) has quit (Ping timeout: 255 seconds)
2013-03-25 16:13:40	-->	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has joined #haskell
2013-03-25 16:14:23	-->	cognominal (~cognomina@37.160.34.109) has joined #haskell
2013-03-25 16:15:42	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Read error: Connection timed out)
2013-03-25 16:17:08	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 16:17:08	johnw	what is the typical Haskell way of setting the executable bit on a file?
2013-03-25 16:17:25	johnw	setFileMode?
2013-03-25 16:17:39	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 276 seconds)
2013-03-25 16:17:43	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-25 16:19:16	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-25 16:19:57	glguy	johnw: Since that's a unix-specific bit, I'd think (setFileMode) would be the right way to go for existing files
2013-03-25 16:20:25	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 245 seconds)
2013-03-25 16:21:00	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:21:02	glguy	For new files it might be better to go with createFile :: FilePath -> FileMode -> IO Fd
2013-03-25 16:21:10	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 240 seconds)
2013-03-25 16:21:21	-->	Taneb (~nathan@host-92-30-218-119.as13285.net) has joined #haskell
2013-03-25 16:21:28	johnw	oh, yeah, this is a new file
2013-03-25 16:21:40	johnw	thanks!
2013-03-25 16:21:46	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-25 16:22:56	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 245 seconds)
2013-03-25 16:23:28	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 16:23:32	<--	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (Quit: ~ truthfulness ~ compassion ~ forbearance ~)
2013-03-25 16:23:57	-->	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-03-25 16:24:02	--	stelleg_away is now known as stelleg
2013-03-25 16:25:29	Rotaerk	"Tilda Swinton is Sleeping in a Box at the Museum of Modern Art. Really. ...  The actress puts herself on display by lying in a glass box for museum-goers to see. Check it out."
2013-03-25 16:25:35	Rotaerk	err, wrong channel
2013-03-25 16:27:07	-->	dolio (~dolio@m8f2436d0.tmodns.net) has joined #haskell
2013-03-25 16:27:50	<--	mietek (mietek@bak.io) has quit (Quit: leaving)
2013-03-25 16:28:03	<--	typoclass (~typoclass@p57A64F3C.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-25 16:28:57	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-03-25 16:30:03	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-25 16:30:25	-->	mietek (mietek@bak.io) has joined #haskell
2013-03-25 16:30:34	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Quit: leaving)
2013-03-25 16:30:54	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-25 16:31:07	<--	cognominal (~cognomina@37.160.34.109) has quit (Ping timeout: 264 seconds)
2013-03-25 16:31:18	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-03-25 16:31:50	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-25 16:33:21	<--	itemad (~user@212.0.102.162) has quit (Ping timeout: 252 seconds)
2013-03-25 16:34:07	<--	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has quit (Ping timeout: 264 seconds)
2013-03-25 16:34:18	<--	schlicht__ (~fl@lutz.uebb.tu-berlin.de) has quit (Ping timeout: 264 seconds)
2013-03-25 16:34:37	<--	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has quit (Read error: Connection timed out)
2013-03-25 16:35:24	 *	hackagebot gloss-juicy 0.1 - Load any image supported by Juicy.Pixels in your gloss application  http://hackage.haskell.org/package/gloss-juicy-0.1 (AlpMestanogullari)
2013-03-25 16:35:24	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-25 16:35:35	-->	centrinia (~exc@adsl-184-36-93-174.asm.bellsouth.net) has joined #haskell
2013-03-25 16:35:51	<--	xplat (~james@67.205.253.208) has quit (Ping timeout: 276 seconds)
2013-03-25 16:36:24	<--	Michael__ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 16:36:49	-->	ExternalReality (~user@38.122.11.254) has joined #haskell
2013-03-25 16:37:00	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 16:37:11	-->	Michael__ (~michael@64.134.176.210) has joined #haskell
2013-03-25 16:37:20	-->	cognominal (~cognomina@37.161.193.158) has joined #haskell
2013-03-25 16:37:35	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-25 16:37:36	-->	lcfrs (~lcfrs@c-24-5-64-135.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:38:09	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-25 16:38:17	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-25 16:39:24	sordina3	I've had a mental blank... How is it possible to short circut a monadic computation with a "exit" method if >> is >>= that ignores the result of the previous statement?
2013-03-25 16:40:06	donri	sordina3: because the circuiting is in the effects
2013-03-25 16:40:24	 *	hackagebot caledon 3.2.1.0 - a logic programming language based on the calculus of constructions  http://hackage.haskell.org/package/caledon-3.2.1.0 (MatthewMirman)
2013-03-25 16:40:28	donri	for example in the maybe monad with (Just 3), 3 is the "result" and Just is the effect
2013-03-25 16:40:55	donri	in Nothing, there is no "result" and the effect is to short circuit
2013-03-25 16:41:26	-->	zeus_ (~quassel@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-25 16:41:43	donri	sordina3: remember that >>= are specific to each monad
2013-03-25 16:41:57	-->	joker_89 (~ircap@unaffiliated/joker-89/x-0901110) has joined #haskell
2013-03-25 16:41:58	donri	it's a different function for every type
2013-03-25 16:41:59	joker_89	hi
2013-03-25 16:42:10	-->	LAMMJohnson (~ja@host86-183-156-119.range86-183.btcentralplus.com) has joined #haskell
2013-03-25 16:42:28	sordina3	I under stand the maybe I'm more confused by short circuiting a set of statements where effects from before the exit are preserved.
2013-03-25 16:42:30	joker_89	if i need to return somtehing like this Maybe ([Int],Int,Int) and i return ([1,2],3,4) why says error?
2013-03-25 16:43:10	S11001001	> return ([1,2],3,4) :: Maybe ([Int],Int,Int)
2013-03-25 16:43:12	lambdabot	  Just ([1,2],3,4)
2013-03-25 16:43:17	S11001001	joker_89: ?
2013-03-25 16:43:18	donri	joker_89: what's the error? may need a type signature for return to be Maybe
2013-03-25 16:43:18	<--	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-25 16:43:31	-->	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has joined #haskell
2013-03-25 16:43:32	S11001001	joker_89: hpaste.org
2013-03-25 16:43:33	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-25 16:43:46	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:43:49	joker_89	ok
2013-03-25 16:43:51	sordina3	For example you may have some kind of State, ContT stack where you can say "modify (+1) >> exit >> modify (+1)" and it effectively just adds 1 rather than 2...
2013-03-25 16:44:01	donri	sordina3: Just a >>= f = f a; Nothing >>= f = Nothing
2013-03-25 16:44:10	sordina3	I swear I understood how this works recently now it's all gone :/
2013-03-25 16:44:40	hpaste	joker_89 pasted “maybe” at http://hpaste.org/84641
2013-03-25 16:44:51	joker_89	http://hpaste.org/84641
2013-03-25 16:45:03	sordina3	Actually, that doesn't help due to the symetry...
2013-03-25 16:45:23	donri	joker_89: you're missing a return or a Just at the end
2013-03-25 16:45:25	sordina3	 "modify (+1) >> exit >> modify (+35)""
2013-03-25 16:45:38	joker_89	so i need to put return?
2013-03-25 16:45:47	<--	schroedinbug (~schroedin@71-215-80-130.hlrn.qwest.net) has quit (Ping timeout: 255 seconds)
2013-03-25 16:45:48	S11001001	joker_89: line 10 has the type ([Int],Int,Int), not Maybe ([Int],Int,Int)
2013-03-25 16:45:50	danr	sordina3: why don't you use the maybe monad transformer?
2013-03-25 16:45:50	ocharles	sordina3: A good exercise in these cases is to manually evaluate the expression
2013-03-25 16:45:51	S11001001	@quote return
2013-03-25 16:45:51	lambdabot	tomasz says: After all, return is only a fancy name for liftM0 :-)
2013-03-25 16:46:00	ocharles	Expand >> into >>=, and then expand >>= into the definition of >>= for Cont
2013-03-25 16:46:01	donri	joker_89: in the else clause you need a Maybe value, you have a plain tuple
2013-03-25 16:46:09	danr	oops that won't work
2013-03-25 16:46:18	joker_89	so Just ....
2013-03-25 16:46:20	sordina3	danr: ocharles: Yep I'm going to have to I guess.
2013-03-25 16:46:23	ocharles	sordina3: and then continue to simplify it
2013-03-25 16:46:25	donri	joker_89: yeah
2013-03-25 16:46:38	ocharles	sordina3: Don't be ashamed or afraid of doing that, it's a *very* powerful learning aid
2013-03-25 16:46:41	<--	LAMMJohnson (~ja@host86-183-156-119.range86-183.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-03-25 16:46:55	joker_89	if i put Just says: " Couldn't match expected type `Int' with actual type `Maybe Int'"
2013-03-25 16:46:57	sordina3	It's just the law saying that >> = >>= \_ ->
2013-03-25 16:47:03	Tesseraction	another silly question, is it possible to figure out the index of list in a recursive definition, say, [1, b..] where b equals something depending on its index?
2013-03-25 16:47:03	Tesseraction	or should I just provide a recursive function providing its index?
2013-03-25 16:47:21	sordina3	that's throwing me
2013-03-25 16:47:22	joker_89	ouch
2013-03-25 16:47:25	joker_89	nothing...
2013-03-25 16:47:26	<--	dju (dju@fsf/member/dju) has quit (Ping timeout: 246 seconds)
2013-03-25 16:47:26	donri	sordina3: >> doesn't enter into it
2013-03-25 16:47:27	joker_89	ok solved!
2013-03-25 16:47:37	<--	Michael__ (~michael@64.134.176.210) has quit (Remote host closed the connection)
2013-03-25 16:47:47	<--	ghorn_ (ghorn@repl.esden.net) has quit (Ping timeout: 246 seconds)
2013-03-25 16:47:51	sordina3	donri, well it does when that's the entirity of what's confusing me.
2013-03-25 16:47:58	-->	ghorn (ghorn@repl.esden.net) has joined #haskell
2013-03-25 16:48:04	donri	sordina3: :)
2013-03-25 16:48:08	<--	McManiaC (~mcmaniac@nils.cc) has quit (Ping timeout: 246 seconds)
2013-03-25 16:48:17	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-25 16:48:43	donri	sordina3: remember, for a monadic computation "m a", >> ignores the "a" but not the "m"
2013-03-25 16:48:43	joker_89	how can i convert a Maybe to not maybe?
2013-03-25 16:48:53	donri	sordina3: the circuiting is in the effects, in the "m"
2013-03-25 16:48:55	aCube	joker_89: ?
2013-03-25 16:48:57	ExternalReality	Tess: you want to determin index from b given only b?
2013-03-25 16:48:59	-->	_d3f (~gnu@nl2.ovpn.to) has joined #haskell
2013-03-25 16:49:02	S11001001	joker_89: with the function called `maybe'
2013-03-25 16:49:08	aCube	:t maybe
2013-03-25 16:49:09	lambdabot	b -> (a -> b) -> Maybe a -> b
2013-03-25 16:49:15	-->	ccasin (~ccasin@GRW565-3.cis.upenn.edu) has joined #haskell
2013-03-25 16:49:15	donri	joker_89: what do you want to do if it's a Nothing?
2013-03-25 16:49:22	aCube	> maybe 3 id $ Just 4
2013-03-25 16:49:24	lambdabot	  4
2013-03-25 16:49:26	aCube	> maybe 3 id $ Nothing
2013-03-25 16:49:28	lambdabot	  3
2013-03-25 16:49:28	sordina3	donri: Hmmm that makes sense actually.
2013-03-25 16:49:34	joker_89	i chec if is nothing, and else i need only a Int not Maybe Int
2013-03-25 16:49:43	sordina3	Okay I'm going to manually run through some code.
2013-03-25 16:49:46	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-03-25 16:50:05	<--	jtalk (~quassel@94.181.46.210) has quit (Read error: Connection reset by peer)
2013-03-25 16:50:10	dolio	> maybe 3 4 $ Just 5
2013-03-25 16:50:11	sordina3	Thanks peeps
2013-03-25 16:50:12	lambdabot	  Could not deduce (GHC.Num.Num (a0 -> b))
2013-03-25 16:50:12	lambdabot	   arising from the ambiguity chec...
2013-03-25 16:50:26	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Read error: Connection reset by peer)
2013-03-25 16:50:42	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-03-25 16:50:52	donri	joker_89: with the 'maybe' function you don't need the check for Nothing
2013-03-25 16:51:03	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Remote host closed the connection)
2013-03-25 16:51:07	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-25 16:51:38	joker_89	the code that i put, i have a function basaCorrecte that returns a Maybe Int
2013-03-25 16:51:40	<--	hkBst_ (~marijn@gentoo/developer/hkbst) has quit (Quit: Konversation terminated!)
2013-03-25 16:52:08	joker_89	and in the function that i uploaded i want to return a Maybe ([Carta], Int , Int) which the last Int is the previous Maybe Int
2013-03-25 16:52:23	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-25 16:52:24	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-25 16:52:30	donri	joker_89: you could use the maybe monad
2013-03-25 16:52:33	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-25 16:52:46	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-25 16:52:53	aCube	@ty fromMaybe
2013-03-25 16:52:55	lambdabot	a -> Maybe a -> a
2013-03-25 16:52:57	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-25 16:53:03	<--	rck (hidden-use@ip67-90-159-2.z159-90-67.customer.algx.net) has quit (Quit: WeeChat 0.4.0)
2013-03-25 16:53:24	donri	> do x <- Just 2; y <- Just 3; return (x,y)
2013-03-25 16:53:25	lambdabot	  Just (2,3)
2013-03-25 16:53:43	joker_89	ok fromMaybe
2013-03-25 16:53:56	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-25 16:54:08	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-25 16:54:10	ExternalReality	donri: "you don't need to check for Nothing" -- didn't anyone ever teach you not to use negatives :-)
2013-03-25 16:54:31	-->	LucasCampos (~lucas@177.98.26.176) has joined #haskell
2013-03-25 16:54:35	ExternalReality	double negatives
2013-03-25 16:54:52	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-03-25 16:55:29	aCube	Can I tell in a cabal file that I want to build a shared library?
2013-03-25 16:55:43	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:55:55	dcoutts	aCube: no, that's decided by the person building the package, not the author, so it doesn't go in the .cabal file
2013-03-25 16:56:05	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-25 16:56:08	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-03-25 16:56:12	dcoutts	aCube: I'm not sure I understand why it matters to you, shouldn't it work either way?
2013-03-25 16:56:41	aCube	dcoutts: when I build statically, i get: final link ... ghc: dist/build/libHShsqml2-0.1.0.0.a: unknown symbol `DW.ref.__gxx_personality_v0' when I try to use the library in ghci
2013-03-25 16:56:45	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-25 16:56:50	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Remote host closed the connection)
2013-03-25 16:57:04	aCube	It works fine when I build a shared lib
2013-03-25 16:57:23	danharaj	edwardk: I just spent 5 minutes playing around with lensisms over Kleisli and it seems like the types check out. Is this a profitable area to investigate?
2013-03-25 16:57:26	-->	jtalk (~quassel@94.181.46.210) has joined #haskell
2013-03-25 16:57:31	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:57:53	edwardk	danharaj: the problem is the same as with traverse vs. mapM there are none that need the Monad that comply with the laws
2013-03-25 16:58:32	dcoutts	aCube: ah, loading code that uses c++ is a bit tricky with ghci
2013-03-25 16:58:39	<--	raichoo_ (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-03-25 16:58:40	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-25 16:59:18	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-25 16:59:22	aCube	dcoutts: so there is no solution to this?
2013-03-25 16:59:26	dcoutts	aCube: it'll also work fine when you compile a standalone exe, rather than loading it in ghci
2013-03-25 16:59:27	--	amatsu is now known as amatsu\idle
2013-03-25 17:00:22	dcoutts	aCube: I think loading c++ code can work, if you link in the right c++ support libs and you're not using certain c++ features that make the ghci linker cry
2013-03-25 17:00:47	aCube	dcoutts: Can I specify some external libraries to be included in the linker flags when something uses my package?
2013-03-25 17:00:48	dcoutts	I know there are some packages, like the llvm bindings that just don't work with ghci, when llvm itself is using static libs
2013-03-25 17:00:48	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 264 seconds)
2013-03-25 17:00:58	dcoutts	aCube: sure, extra-libraries:
2013-03-25 17:00:58	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Remote host closed the connection)
2013-03-25 17:01:02	<--	roconnor (~roconnor@e120-pool-d89a7738.brdbnd.voicenetwork.ca) has quit (Ping timeout: 252 seconds)
2013-03-25 17:01:19	joker_89	if i have a tuple , how can i apply a function in each element?
2013-03-25 17:01:24	danharaj	edwardk: that is a shame. I didn't work it out but it seemed like mutable array access satisfied the lens laws.
2013-03-25 17:01:35	Rotaerk	joker_89, there's the "both" function
2013-03-25 17:01:59	edwardk	danharaj: the main issue is it spams updates it doesn't need
2013-03-25 17:02:05	edwardk	even reading does a write
2013-03-25 17:02:31	joker_89	both function?
2013-03-25 17:02:54	aCube	:t \f -> uncurry $ join f
2013-03-25 17:02:56	lambdabot	(a -> a -> b -> c) -> (a, b) -> c
2013-03-25 17:03:00	-->	Enigmagic (~enigmo@unaffiliated/enigmagic) has joined #haskell
2013-03-25 17:03:22	--	wump is now known as wumpus
2013-03-25 17:03:25	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-25 17:03:25	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-25 17:04:10	<--	wumpus (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has quit (Changing host)
2013-03-25 17:04:10	-->	wumpus (~quassel@pdpc/supporter/professional/wumpus) has joined #haskell
2013-03-25 17:04:17	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-25 17:04:34	<--	cognominal (~cognomina@37.161.193.158) has quit (Ping timeout: 256 seconds)
2013-03-25 17:05:33	<--	ildorn (~ildorn@p5B2FB311.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-25 17:05:36	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-03-25 17:05:58	aCube	@hoogle (a -> c) -> (a,a) -> c
2013-03-25 17:05:59	lambdabot	Data.Graph.Inductive.Query.Monad orP :: (a -> Bool) -> (b -> Bool) -> (a, b) -> Bool
2013-03-25 17:06:00	<--	ptek (~ptek@217.64.164.1) has quit (Quit: Computer has gone to sleep.)
2013-03-25 17:06:38	-->	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-03-25 17:07:01	fizbin	@djinn (a -> c) -> (a,a) -> c
2013-03-25 17:07:01	lambdabot	f a (b, _) = a b
2013-03-25 17:07:10	aCube	@hoogle (a -> c) -> (a,a) -> (c,c)
2013-03-25 17:07:10	lambdabot	Data.Graph.Inductive.Query.Monad (><) :: (a -> b) -> (c -> d) -> (a, c) -> (b, d)
2013-03-25 17:07:10	lambdabot	Data.Graph.Inductive.Query.Monad mapSnd :: (a -> b) -> (c, a) -> (c, b)
2013-03-25 17:07:10	lambdabot	Data.Graph.Inductive.Query.Monad mapFst :: (a -> b) -> (a, c) -> (b, c)
2013-03-25 17:07:22	c_wraith	:t join (***)
2013-03-25 17:07:23	lambdabot	Arrow a => a b c -> a (b, b) (c, c)
2013-03-25 17:07:59	aCube	@ty \f -> uncurry $ Control.Comonad.duplicate f
2013-03-25 17:08:00	lambdabot	Monoid b => (b -> c) -> (b, b) -> c
2013-03-25 17:08:29	fizbin	@djinn (a -> c) -> (a,a) -> (c,c)
2013-03-25 17:08:30	lambdabot	f a (b, _) = (a b, a b)
2013-03-25 17:08:37	aCube	:O
2013-03-25 17:08:38	-->	cognominal (~cognomina@37.161.154.128) has joined #haskell
2013-03-25 17:08:51	c_wraith	haha.
2013-03-25 17:08:58	ClaudiusMaximus	how might i use cabal-install to build/install a foreign executable?  so far my experiments give Error: No 'Main-Is' field found for executable
2013-03-25 17:09:11	c_wraith	djinn's attempts to use each argument apparently don't work recursively
2013-03-25 17:09:23	--	irc: disconnected from server
2013-03-27 00:08:43	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-27 00:08:43	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-27 00:08:43	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-27 00:08:43	--	Nicks #haskell: [@ChanServ [[zzz]] [mth] [swift] \rs ]OLI[ __main__ _anona _br_ _flow_ _janne _yezariaely `0660 `^_^v `bps_ `micro `nand` a11235 aajmakin aavogt ab9rf absence abumirqaan acfoltzer acharles Adeon adimit Adios adnap adnauseam AfC1 aforemny agumonke1 agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b alios alnix alpounet alshain Amadiro amatsu\idle amiller anachron_ anders^^ andrewsw aninhumer AntiSpamMeta apaku araujo arbn aristid arkeet arkx armlesshobo arnihr__ arun asante10111 aszlig Athas AtnNn augustl Axman6 b52 b_jonas bananagram banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens_ bd_ Belgarion0 ben_d bens bergey` betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld bitonic blackmir1oxx BlastHardcheese blooberr BMeph_ BobFunk bobry boegel|zzz bogner Boney Boreeas bos Botje_ bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen_ bstrie Bwild bxc_ byorgey ByronJohnson c_wraith cads Cale caligula Canar canta canvon carlocci_ catbee ccasin ccxCZ cdidd ceii celery__ centrinia_ Cerise certaint1 cfricke chance charlesofarrell chatsiri_ chessguy chirpsalot ChongLi Chousuke_ chr1s chrisbuchholz_ chrisirc_ chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods cognominal colah collin comak companion_cube conehead confound connelly coppro copumpkin corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck creichert cross crs__ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dacto dan_johnsin DanBurton danharaj danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dawe dcoutts dcoutts_ deavid Deewiant def-lkb dennda dented42 Derander dfletcher DigitalK1wi dilinger_ dixie_ djahandarie djanatyn dju dkasak dlundy dmarker DMcGill dmwit dnolen dockside1 Dodek dolio domingo_ donri doomlord dottedmag dqd Draconx|Laptop Draggor drbean DrChaos dreixel drek_ drewr drmegahertz dropdrive drosoph DrSyzygy dsantiago DT`` duairc_ dukedave dumbhat DustyDin1o Dybber dyreshark eacameron EarlGray^ earthy ecuderpam edenc_ Eduard_Munteanu edwardk edwtjo Eelis eff ehamberg Eiam eirikur ejls_ eL_Bart0 electrogeek elgot Eliel elliott elliottc1ble em emmanuelux endojelly Enigmagic enquora ent- epta ericmj Eridius ernst Erstarrung Esa_ Estrellas etabot ethercrow etrepum eviltwin_ Excureo f8 fabjan faen FalkoPeters fall_ favonia fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow Flint flori flux fmapE folone formalcow fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco FunkyDrummer Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gereedy gg7 ghorn Ghoul__ Gilly glguy gmaggior Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest14075 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hamishmack hanDerPeder harrison_ heath Heffalump helgikrs henk heruur hiptobecubic hiratara hiredman hiroaki hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hungryblank hvr hyko IanKelling ibid IbnFirnas Iceland_jack idnar idntfy2 ido idoru Igloo ijp ilyanok imeredith imphasing inr_ int-e integral_ Internet13 ion ique isomorphic issimus Itkovian iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaeyeun jaimef jamwt JaRoel|4d jaspervdj Jaxan jayne jbauman jcp jdoliner Jello_Raptor jercos Jesin jesyspa jfischoff jix jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jmelesky jml joachifm joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jtalk jtobin juliohm julmae julmuri junsuijin jyyou k00mi k0ral kadoban Kaidelong KaiSforza kakos kallisti kalven KaneTW kaol kdridi Ke kennyd kennyp_ ketil_ kfish Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels kmels__ kmicu kniu knz koala_man koninkje_away kosmikus kqr kranius_ krig_ kryft ks07 kshannon ktosiek Kuba_ kvey kylcarte kyle__ labo lahwran lambdabot LAMMJohn1on Laney latro`a lattenwald lazard lcfrs LeaChim lennart_ lenstr leoncamel leroux levi liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luc_ lucca luite Luke lulf lusory lzm m3ga macbr machisuji magicman majoh maksbotan_ malorie_ mami marienz Martty MasseR mastensg mateu mattp__ mattrepl matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairoi mefisto Megant melter memand mendez merijn message144 meyersh miasma miclorb_ mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI monique_ monochrom moonlite_ morazow mornfall mortberg Mortchek mpu mrd mrdomino_ MrFenix mrko mrotondo mrshoe mrsolo mspells mtlatif mullein munro mux mwc myme n_b nade Nahra Nanar nardul Natch natechan natte neena netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg nilg` niloc132 Nimatek ninegrid ninzine Nisstyre nlogax no-n noam noj nonymousa noplamodo normanrichards notdan NougatRillettes nouitfvf Nshag nule numeral nus- nwf obcode_ ocharles ofan oitnelis OlegYch opqdonut ormaaj Ornedan ortmage orzo osfameron osnr othiym23 otterdam otters otto_s ousado ozataman ozataman_ ozgura paddymahoney Pantoufle ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pcl pdxleif peddie peltchu pepijn_away perlite petanqk petantik peterhil pettter pfoetchen pharaun phaul Philippa Philonous phischu PHO_ phyrex1an pikhq_ piotr_ Plex- plhk pnielsen popz_ pqmodn pr Pranz predator217 preflex prh prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ q66 quaestor quchen quicksilver quuxman qwandor|quassel qwr qz_ r126l_ raek raid rainmaker Ralith Rarrikins Raynes Razz rcj_ rcl redjohn reembarking08 reiddraper Rembane rexamophone rfw Rickasaurus rickeyski-k rio ritek Riussi rmarianski rmunoz rmunroe_ robbe- robbert` romanandreg rossabaker rs0 rsimoes rul s00pcan S11001001 s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi sarfraz saurik sbahra scgilardi schlaftier schlicht schlumpi sclv scooty-puff-sr Scott_firebeta Sculptor SeanTAllen seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 simon___ simpson sipa sirchurchill sjl ski skp skuggi skyflash skyflash_ SLi sm smarter so Soft sohum solarus solirc Sonderblade sordina3 Sorella SoupE Spockz sproingie srcerer sShintah staafl_alt Starfire stat_vi statusfailed steez stelleg_away stepcut stephe- strax_ stvc suiside_ sully sunfun sunnavy supersym supki sw17ch sysop_fb system64 tahu tamiko tanakh Tarential taruti taterbase tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tg tgeeky Th0mas thalassarche The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh Thomyho5 thorkilnaur_ thorsten` thoughtpolice threeday1onk threesome tim1 timemage tippenein tjohnson tkd tlaine tlevine tmiw TML tobiassj1sten toekutr tom4939_ tomaw tomboy65 tomejaguar tomh_ tomku tomprince ToRA Tordek trevize_ trh178 tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl_ Twey tzxn3 u__ u_quark1 ulfdoz Ulrar_ User_ UziMonkey__ Valodim Varakh vehk verrens Vert Vertue vhz_ vili vmeson vobi volstvok Vorpal voyd Vq vramana VZakharov wagle Walther warpy___ Watcher7 waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon_ whoops wilfredh_ William_ Will| wjlroe wollw wormphlegm wting wto wtw wump wunki x7 xaimus Xaratas xcvii xenoxaos xinming XMunkki_ xnyhps Xorlev xorox90 xplat xrl__ xrq xunatai xymox yabadaba yam yan_ yano yeltzooo6 yiannis_1 yriw_ yumike Zariel zebr Zedrikov zeiris_ zenzike_ zeta- ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-27 00:08:43	--	Channel #haskell: 997 nicks (1 op, 0 halfops, 0 voices, 996 normals)
2013-03-27 00:08:43	--	URL for #haskell: http://www.haskell.org/
2013-03-27 00:08:46	--	Mode #haskell [+CLcnpt]
2013-03-27 00:08:46	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-27 00:08:49	shachaf	Perhaps utf8-string should be more standard.
2013-03-27 00:09:20	-->	heruur1 (~tvh@160-144-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-27 00:09:27	shachaf	Hmm, does Data.ByteString.UTF8 have indexing functions?
2013-03-27 00:09:33	-->	edeast (~chatzilla@d75-158-1-152.abhsia.telus.net) has joined #haskell
2013-03-27 00:09:34	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Quit: Page closed)
2013-03-27 00:10:07	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-27 00:10:12	DanBurton	@google Data.ByteString.UTF8 docs
2013-03-27 00:10:14	lambdabot	http://www.haskell.org/ghc/docs/6.12.1/html/libraries/utf8-string-0.3.4/Data-ByteString-UTF8.html
2013-03-27 00:10:14	lambdabot	Title: Data.ByteString.UTF8
2013-03-27 00:10:29	<--	schlicht (~fl@g229053127.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-03-27 00:10:57	shachaf	Yes, I saw those. None of them are quite what I want.
2013-03-27 00:11:31	shachaf	I asked in here because glguy is the author of the package.
2013-03-27 00:12:30	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-27 00:12:34	<--	heruur (~tvh@160-144-103-86.dynamic.dsl.tng.de) has quit (Ping timeout: 256 seconds)
2013-03-27 00:12:41	DanBurton	but if you already knew the module in question did not in fact have what you are looking for, then it seems your true question is something else entirely than the one you posed
2013-03-27 00:13:04	glguy	I'd have to check. I haven't fussed with it much in the last couple years :)
2013-03-27 00:13:26	glguy	It's got 285 rev deps, though :) (just peeked)
2013-03-27 00:14:00	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-03-27 00:14:06	<--	stat_vi (~stat@dslb-094-218-235-054.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-27 00:14:16	shachaf	DanBurton: You found me out.
2013-03-27 00:14:28	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-27 00:14:33	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 00:14:52	-->	morolin (~morolin@nat-128-84-124-0-332.cit.cornell.edu) has joined #haskell
2013-03-27 00:15:30	<--	morolin (~morolin@nat-128-84-124-0-332.cit.cornell.edu) has quit (Client Quit)
2013-03-27 00:15:48	<--	lennart_ (~lennart@p549955A9.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-03-27 00:16:54	-->	mgccl (d8ef2d4e@gateway/web/freenode/ip.216.239.45.78) has joined #haskell
2013-03-27 00:18:27	mgccl	Is there a way to give alias to things in data? for example for now I have data Exp a = Atom a | Repeat a Int, I wonder if I can make (Atom a) to be an alias of (Repeat a 1)
2013-03-27 00:18:32	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-27 00:18:47	shachaf	mgccl: No.
2013-03-27 00:18:51	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-27 00:18:59	shachaf	But you can define a function: atom a = Repeat a 1
2013-03-27 00:19:06	<--	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has quit (Ping timeout: 256 seconds)
2013-03-27 00:19:10	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-27 00:19:55	mgccl	shachaf: ok. Is it possible with template Haskell?
2013-03-27 00:20:11	elliott	you could make a splice I guess.
2013-03-27 00:20:19	elliott	but it'd look like $(atom a) instead.
2013-03-27 00:20:26	elliott	actually I guess it'd have to be more elaborate than that
2013-03-27 00:20:28	shachaf	What are you actually trying to do here?
2013-03-27 00:20:40	kdridi	how do i convert a CP1252 encoded string to UTF8 ?
2013-03-27 00:20:50	-->	Barrell_R (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-03-27 00:21:32	shachaf	kdridi: Probably decode it -- maybe with http://hackage.haskell.org/packages/archive/encoding/0.6.7.2/doc/html/Data-Encoding-CP1252.html ? -- and then encode it.
2013-03-27 00:21:58	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-03-27 00:22:10	kdridi	shachaf: decodeString CP1252 "\224" returns "\224" insetad of "à"
2013-03-27 00:22:45	shachaf	kdridi: How about [chr 224]?
2013-03-27 00:22:50	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-27 00:23:10	Saizan	> "\224" == "à"
2013-03-27 00:23:10	lambdabot	  mueval: recoverEncode: invalid argument (invalid character)
2013-03-27 00:23:14	Saizan	meh
2013-03-27 00:23:17	<--	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (Ping timeout: 248 seconds)
2013-03-27 00:23:30	mgccl	shachaf: I want to make readability easier. So I can use Atom a to refer to things instead of writing out Repeat a 1, but I guess this is not so important.
2013-03-27 00:23:33	kdridi	shachaf: [char 224] returns "\224"
2013-03-27 00:23:44	shachaf	kdridi: How about "à"? :-)
2013-03-27 00:23:55	glguy	kdridi: Try using putStrLn to look at it, which will output that string appropriately for your terminal
2013-03-27 00:23:57	shachaf	(It's all the same thing.)
2013-03-27 00:23:57	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-27 00:24:10	kdridi	shachaf: it returns "\224" :)
2013-03-27 00:24:12	luc_	:set -XOverloadedStrings
2013-03-27 00:24:15	luc_	this is proving useful
2013-03-27 00:24:15	glguy	when you "show" a String, it escapes characters like \224
2013-03-27 00:24:22	luc_	I didn't realize just how useful that was
2013-03-27 00:24:35	luc_	now I don't have to convert to Text, which is nice
2013-03-27 00:24:37	kdridi	ah ok. i didn't knew
2013-03-27 00:25:12	luc_	good call, @DanBurton
2013-03-27 00:25:31	DanBurton	luc_: :)
2013-03-27 00:25:38	<--	leoncamel (~leoncamel@219.143.150.16) has quit (Ping timeout: 240 seconds)
2013-03-27 00:25:59	kdridi	so, is there any way to print "à" as "à" instead of "\224" ?
2013-03-27 00:26:15	shachaf	show will always give you the string "\"\\224\""
2013-03-27 00:26:24	shachaf	You can use something other than show if you want.
2013-03-27 00:26:25	-->	trescenzi (~trescenzi@2620:91:0:163:7081:a93e:b5:f5a1) has joined #haskell
2013-03-27 00:26:27	<--	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-27 00:26:32	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-27 00:26:42	glguy	kdridi: I just told you the way
2013-03-27 00:27:13	shachaf	glguy: You're pretty suspicious-looking, though.
2013-03-27 00:27:15	<--	luc_ (~luc@173-164-68-213-Oregon.hfc.comcastbusiness.net) has quit (Quit: luc_)
2013-03-27 00:27:16	kdridi	glguy: thx, i'll try that :)
2013-03-27 00:27:28	DanBurton	that depends on what you mean by "print". Do you actually want to write a letter to the screen? Or to a piece of paper?
2013-03-27 00:27:35	glguy	shachaf: too many 'g's?
2013-03-27 00:28:13	<--	jaeyeun (~jaeyeun@8.20.178.184) has quit (Read error: Connection reset by peer)
2013-03-27 00:28:39	-->	jaeyeun (~jaeyeun@8.20.178.184) has joined #haskell
2013-03-27 00:28:48	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Ping timeout: 276 seconds)
2013-03-27 00:28:54	<--	jaeyeun (~jaeyeun@8.20.178.184) has quit (Read error: Connection reset by peer)
2013-03-27 00:29:00	<--	cognominal (~cognomina@37.161.92.41) has quit (Ping timeout: 264 seconds)
2013-03-27 00:29:08	kdridi	glguy: that works, thx ;-)
2013-03-27 00:29:26	-->	jaeyeun (~jaeyeun@8.20.178.184) has joined #haskell
2013-03-27 00:29:51	<--	jaeyeun (~jaeyeun@8.20.178.184) has quit (Remote host closed the connection)
2013-03-27 00:29:56	-->	lennart_ (~lennart@p549955A9.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 00:30:17	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-27 00:30:25	-->	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 00:30:54	-->	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has joined #haskell
2013-03-27 00:30:55	-->	jaeyeun_ (~jaeyeun@8.20.178.184) has joined #haskell
2013-03-27 00:31:08	-->	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-03-27 00:31:16	<--	milessabin (~miles@private.milessabin.com) has quit (Ping timeout: 272 seconds)
2013-03-27 00:32:15	<--	jaeyeun_ (~jaeyeun@8.20.178.184) has quit (Remote host closed the connection)
2013-03-27 00:32:48	-->	jaeyeun_ (~jaeyeun@8.20.178.184) has joined #haskell
2013-03-27 00:33:09	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-27 00:33:23	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-27 00:33:45	<--	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Remote host closed the connection)
2013-03-27 00:34:01	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-27 00:34:02	-->	cognominal (~cognomina@37.161.108.137) has joined #haskell
2013-03-27 00:34:16	-->	luc_ (~luc@173-164-68-213-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 00:34:22	-->	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-27 00:35:27	<--	samedhi (~stephen@208.70.28.214) has quit (Quit: samedhi)
2013-03-27 00:36:07	<--	sambio (~sambio@190.57.227.109) has quit (Read error: Connection reset by peer)
2013-03-27 00:37:23	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 246 seconds)
2013-03-27 00:37:36	<--	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has quit (Remote host closed the connection)
2013-03-27 00:37:49	-->	Tharugrim (~Tharugrim@194-166-77-4.adsl.highway.telekom.at) has joined #haskell
2013-03-27 00:38:16	<--	AfC1 (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-27 00:38:55	<--	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Ping timeout: 264 seconds)
2013-03-27 00:38:59	--	bcoppens_ is now known as bcoppens
2013-03-27 00:39:10	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-27 00:39:34	<--	trescenzi (~trescenzi@2620:91:0:163:7081:a93e:b5:f5a1) has quit (Remote host closed the connection)
2013-03-27 00:42:04	<--	shintah (bebble@h-148-195.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-27 00:42:45	<--	jaeyeun_ (~jaeyeun@8.20.178.184) has quit (Read error: Connection reset by peer)
2013-03-27 00:42:50	-->	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has joined #haskell
2013-03-27 00:43:10	-->	jaeyeun (~jaeyeun@8.20.178.184) has joined #haskell
2013-03-27 00:43:22	-->	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has joined #haskell
2013-03-27 00:43:38	<--	jao (~jao@48.Red-88-17-131.dynamicIP.rima-tde.net) has quit (Changing host)
2013-03-27 00:43:38	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-27 00:44:45	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-27 00:44:56	<--	Philonous (~Philonous@dslb-178-000-130-197.pools.arcor-ip.net) has quit (Quit: Baba)
2013-03-27 00:46:13	<--	Thomyho5 (~thomyho@mnhm-590c36b6.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-27 00:46:40	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-03-27 00:47:30	<--	Boney (~paul@124-168-200-69.dyn.iinet.net.au) has quit (Ping timeout: 264 seconds)
2013-03-27 00:48:15	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 00:49:10	ivanm	is there an equivalent to liftM* where the lifted function is also monadic? i.e. liftM2' f mx my = do { x <- mx; y <- my; f x y }
2013-03-27 00:49:24	shachaf	join (liftM2 f x y)
2013-03-27 00:49:24	<--	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-27 00:49:35	copumpkin	shachaf speaks the truth
2013-03-27 00:49:39	shachaf	Other than that, no. Sometimes people call it bind2 or something.
2013-03-27 00:49:46	ivanm	shachaf: yeah, I figured that out; I was hoping there was a better way without needing to use join
2013-03-27 00:49:56	ivanm	*nod*
2013-03-27 00:50:06	ivanm	at least hoogle and hayoo weren't lying to me then :p
2013-03-27 00:50:55	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 264 seconds)
2013-03-27 00:51:02	<--	luc_ (~luc@173-164-68-213-Oregon.hfc.comcastbusiness.net) has quit (Quit: luc_)
2013-03-27 00:51:06	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-27 00:51:22	<--	ClaudiusMaximus (~claude@78-105-51-40.zone3.bethere.co.uk) has quit (Quit: upgrade)
2013-03-27 00:52:27	<--	system64 (~system64@182.68.249.0) has quit (Remote host closed the connection)
2013-03-27 00:53:07	-->	edeast_ (~chatzilla@d75-158-1-152.abhsia.telus.net) has joined #haskell
2013-03-27 00:53:37	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-27 00:53:41	<--	edeast (~chatzilla@d75-158-1-152.abhsia.telus.net) has quit (Ping timeout: 248 seconds)
2013-03-27 00:53:47	--	edeast_ is now known as edeast
2013-03-27 00:53:52	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-27 00:54:22	<--	skyflash (~skyflash@206.172.31.228) has quit (Remote host closed the connection)
2013-03-27 00:55:43	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-27 00:55:50	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-27 00:56:12	<--	Zedrikov (~cedric@AMontsouris-651-1-27-210.w82-123.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-03-27 00:56:46	<--	Nahra (~user@unaffiliated/nahra) has quit (Ping timeout: 256 seconds)
2013-03-27 00:57:14	catbee	IRC newbie question : how does one find out the nickname <-> person map?
2013-03-27 00:57:30	-->	Nahra (~user@unaffiliated/nahra) has joined #haskell
2013-03-27 00:57:30	ivanm	catbee: in general, you can't
2013-03-27 00:57:37	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-27 00:57:38	ivanm	you can try a /whois
2013-03-27 00:57:44	catbee	ivanm: what about for #haskell?
2013-03-27 00:57:57	ivanm	or see if they use the same nick on github or something and then list their real name
2013-03-27 00:58:06	-->	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has joined #haskell
2013-03-27 00:58:14	catbee	for example, /whois ivanm gives me : Unknown
2013-03-27 00:58:19	ivanm	catbee: in general == there's no reliable way that it will work for any random person :)
2013-03-27 00:58:29	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 248 seconds)
2013-03-27 00:58:31	ivanm	huh, I thought I had my name in my config
2013-03-27 00:58:37	shachaf	What is a person?
2013-03-27 00:58:41	glguy	catbee: the command is, "Hi, I'm <name>. What's your name?"
2013-03-27 00:58:44	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-27 00:58:52	-->	rdesfo (~ryan@c-75-68-190-48.hsd1.me.comcast.net) has joined #haskell
2013-03-27 00:58:54	shachaf	Let's try it.
2013-03-27 00:58:56	catbee	hi i'm ben, what's your name?
2013-03-27 00:58:58	shachaf	Hi, I'm glguy. What's your name?
2013-03-27 00:58:58	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-27 00:59:08	<--	piotr_ (~quassel@e178090242.adsl.alicedsl.de) has quit (Ping timeout: 272 seconds)
2013-03-27 00:59:15	catbee	hm server must be down
2013-03-27 00:59:23	glguy	shachaf: You can't trick me!
2013-03-27 00:59:25	ivanm	catbee: which server?
2013-03-27 00:59:33	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-03-27 00:59:41	catbee	lol
2013-03-27 00:59:45	shachaf	glguy: Wait, <name> isn't where I substitute the nick of the person I want to find things out about?
2013-03-27 00:59:46	<--	heruur1 (~tvh@160-144-103-86.dynamic.dsl.tng.de) has quit (Quit: Leaving.)
2013-03-27 01:00:01	shachaf	This is hard. :-(
2013-03-27 01:00:12	glguy	Yeah, English has a lot of nuances
2013-03-27 01:00:32	shachaf	nuisances, too.
2013-03-27 01:00:39	<--	jaeyeun (~jaeyeun@8.20.178.184) has quit (Remote host closed the connection)
2013-03-27 01:00:48	<--	cognominal (~cognomina@37.161.108.137) has quit (Ping timeout: 264 seconds)
2013-03-27 01:00:58	glguy	that's #haskell
2013-03-27 01:01:05	<--	raek (~raek@h-17-164.a328.priv.bahnhof.se) has quit (Ping timeout: 252 seconds)
2013-03-27 01:01:09	ivanm	shachaf, copumpkin: and the best bit is, I actually only needed liftM2; I was doing it late last night and got confused, the error messages were because I hadn't updated the type *facepalm*
2013-03-27 01:01:13	-->	raek (~raek@h-17-164.a328.priv.bahnhof.se) has joined #haskell
2013-03-27 01:01:16	copumpkin	yay
2013-03-27 01:01:29	shachaf	ivanm: Have you considered using liftA2 instead?
2013-03-27 01:01:29	<--	mgccl (d8ef2d4e@gateway/web/freenode/ip.216.239.45.78) has quit (Quit: Page closed)
2013-03-27 01:01:40	shachaf	"doing my part"
2013-03-27 01:01:41	<--	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-27 01:01:41	-->	rsampaio (~rodrigo@189.121.226.43) has joined #haskell
2013-03-27 01:01:59	ivanm	yeah, just used to the M variants
2013-03-27 01:02:10	-->	cognominal (~cognomina@37.161.108.137) has joined #haskell
2013-03-27 01:02:15	ivanm	I even went and defined "type AMonad m = (Applicative m, Monad m)" and use that for my type sigs :/
2013-03-27 01:02:43	--	koninkje_away is now known as koninkje
2013-03-27 01:03:44	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 245 seconds)
2013-03-27 01:04:34	shachaf	A monad, a plan, a canal: Padanoma!
2013-03-27 01:04:43	byorgey	catbee: I maintain a large nick <-> person map in my head, so you could ask me =)
2013-03-27 01:04:53	<--	sepp2k (~sexy@g224101023.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-27 01:05:06	shachaf	byorgey: Where can I find this Yorgey person? Is he related to Brent Byorgey?
2013-03-27 01:05:32	byorgey	shachaf: yes, they are twins
2013-03-27 01:05:41	byorgey	one of them always tells the truth and the other one always lies.
2013-03-27 01:05:44	newsham	surely sh. achaf.
2013-03-27 01:05:51	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-27 01:05:55	shachaf	Are they categorical duals?
2013-03-27 01:05:57	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 248 seconds)
2013-03-27 01:06:19	-->	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 01:06:22	byorgey	well, they are in a categorical duel
2013-03-27 01:06:28	shachaf	Even better.
2013-03-27 01:06:31	-->	roconnor (~roconnor@e120-pool-d89a68c0.brdbnd.voicenetwork.ca) has joined #haskell
2013-03-27 01:06:50	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-27 01:07:18	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-27 01:08:03	-->	Squid_Tamer (~s@198.23.138.21) has joined #haskell
2013-03-27 01:08:51	-->	trescenzi (~trescenzi@2620:91:0:163:1169:b49c:39ea:1855) has joined #haskell
2013-03-27 01:09:47	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-27 01:09:50	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-27 01:10:27	<--	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has quit (Ping timeout: 252 seconds)
2013-03-27 01:11:41	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Ping timeout: 246 seconds)
2013-03-27 01:13:21	<--	zeta- (~chatzilla@31.185.228.74) has quit (Quit: ChatZilla 0.9.90 [Firefox 21.0a2/20130326042012])
2013-03-27 01:13:22	<--	Xaratas (~UserNick@brln-d9ba4221.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-27 01:13:47	edwardk	diagrams at 30 paces?
2013-03-27 01:14:19	c_wraith	non-commutative diagrams only
2013-03-27 01:14:59	<--	tjohnson (~tjohnson@68.65.169.215) has quit (Ping timeout: 245 seconds)
2013-03-27 01:15:07	byorgey	hehe
2013-03-27 01:15:31	<--	cognominal (~cognomina@37.161.108.137) has quit (Ping timeout: 264 seconds)
2013-03-27 01:15:43	otters	joke's on you
2013-03-27 01:15:45	otters	i have a magma cannon
2013-03-27 01:15:48	shachaf	I suppose Brent Byorgey and Edwardk Kmett and all the rest of them are from a parallel universe.
2013-03-27 01:16:16	otters	i'm self conscious because my real name isn't part of my username
2013-03-27 01:16:28	edwardk	Nah, byorgey and I are the evil twins. You can tell by the beards.
2013-03-27 01:16:30	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 252 seconds)
2013-03-27 01:16:30	<--	quchen (~david@p54AA3329.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-27 01:16:43	<--	reembarking08 (~reembarki@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 01:17:17	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 01:17:26	<--	mwc (~matt@helios.cogneti.ca) has quit (Read error: Connection reset by peer)
2013-03-27 01:17:40	-->	cognominal (~cognomina@37.161.108.122) has joined #haskell
2013-03-27 01:17:49	<--	jmelesky (~jmelesky@173-164-68-213-Oregon.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2013-03-27 01:17:51	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Quit: Leaving)
2013-03-27 01:17:52	ivanm	byorgey: that reminds me, with your diagrams-haddock package, I take it from the usage in Diagrams.TwoD.Path.IteratedSubset that it can also use functions in scope, not just defined in comments?
2013-03-27 01:18:47	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-27 01:19:04	byorgey	ivanm: no. It's just that the stuff defined in comments can include imports.
2013-03-27 01:19:05	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Remote host closed the connection)
2013-03-27 01:19:11	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-27 01:19:13	<--	kmels__ (~kmels@frbg-4d028c1c.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-03-27 01:19:52	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-27 01:20:00	<--	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-27 01:20:14	byorgey	so the definitions for the diagrams in the IteratedSubset module include 'import Diagrams.TwoD.Path.IteratedSubset'.  diagrams-contrib has to be built & installed somewhere before running diagrams-haddock.
2013-03-27 01:21:07	ivanm	byorgey: ahhh, so it's importing itself?
2013-03-27 01:21:11	byorgey	right
2013-03-27 01:21:16	byorgey	making stuff in scope available would be possible in principle, but it's tricky to get right
2013-03-27 01:21:22	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-27 01:21:33	ivanm	*nod*
2013-03-27 01:21:33	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Ping timeout: 240 seconds)
2013-03-27 01:21:47	ivanm	preflex: seen lispy
2013-03-27 01:21:47	preflex	 lispy was last seen on #haskell 1 day, 5 hours, 25 minutes and 59 seconds ago, saying: Cale: It's a new type, but it can be used in the same places as the unrefined type, right?
2013-03-27 01:22:09	Cale	Hello preflex
2013-03-27 01:23:11	arkeet	Cale: you should fix lambdabot's (.)
2013-03-27 01:23:26	Cale	arkeet: lambdabot's (.) is functioning as intended
2013-03-27 01:23:37	arkeet	the intention is broken :p
2013-03-27 01:23:38	glguy	it's a "feature"
2013-03-27 01:24:00	sproingie	what's wrong with the intention?
2013-03-27 01:24:12	<--	edeast (~chatzilla@d75-158-1-152.abhsia.telus.net) has quit (Ping timeout: 264 seconds)
2013-03-27 01:24:27	shachaf	(.) = flip lmap is the only correct definition, hth
2013-03-27 01:24:33	arkeet	its use in :t and ensuing confusion is far more common than its actual use as infix fmap, for which we already have <$> anyway.
2013-03-27 01:24:52	shachaf	I agree with arkeet and I think most other people do too, but I doubt Cale will change his mind.
2013-03-27 01:25:00	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-03-27 01:25:05	arkeet	we must try harder!
2013-03-27 01:25:17	ivanm	shachaf: "lmap" ?
2013-03-27 01:25:23	-->	ClaudiusMaximus (~claude@78-105-51-40.zone3.bethere.co.uk) has joined #haskell
2013-03-27 01:25:25	sproingie	i find <$> ghastly to type, but i can see the problem with :t
2013-03-27 01:25:58	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Leaving...)
2013-03-27 01:25:59	Cale	Well, the ensuing confusion is only confusing for a short time, so long as it's explained :)
2013-03-27 01:26:07	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-27 01:26:09	arkeet	but it has to be explained every single time.
2013-03-27 01:26:22	Cale	Since when are we opposed to explaining things?
2013-03-27 01:26:24	arkeet	I don't recall anyone using . with lambdabot where the fmap generality is actually used, anyway.
2013-03-27 01:26:33	-->	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has joined #haskell
2013-03-27 01:26:41	sproingie	it reveals to people the generality of fmap.  people should be grokking that anyway.
2013-03-27 01:27:00	arkeet	explaining random quirks in caleskell is not something worth anyone's time, I think.
2013-03-27 01:27:16	<--	gmaggior (5237b2ac@gateway/web/freenode/ip.82.55.178.172) has quit (Quit: Page closed)
2013-03-27 01:27:28	Cale	It generates opportunities to teach something interesting, which there would be too few of otherwise.
2013-03-27 01:27:28	sproingie	tho maybe caleskell should get even more radical and just put on a different bot trigger
2013-03-27 01:27:40	 *	elliott throws in his strong support for Prelude (.).
2013-03-27 01:27:43	arkeet	when was the last time it has taught someone something interesting?
2013-03-27 01:27:47	glguy	the way to solve it is for someone else to figure out how to compile lambdabot
2013-03-27 01:27:51	elliott	people need to know about (.) far before they need to know it should be generalised to fmap.
2013-03-27 01:27:53	glguy	and we can just ban lambdabot
2013-03-27 01:27:54	glguy	and move on
2013-03-27 01:28:06	elliott	also the universal reaction is just to tell people to ignore the silly type and type out the real one by hand.
2013-03-27 01:28:15	shachaf	Compiling lambdabot isn't that hard.
2013-03-27 01:28:38	shachaf	I think the fact that fmap = (.) at the (r ->) instance is good to know. But people who are confused by (.)'s regular type are going to be much more confused by also trying to understand the fmap thing.
2013-03-27 01:28:46	<--	lennart_ (~lennart@p549955A9.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-03-27 01:29:02	shachaf	You need to understand type classes (of non-* kind!) and all sorts of crazy things that beginners shouldn't need to understand just to compose functions.
2013-03-27 01:29:03	elliott	there's also the fact that basically nobody else who wants to generalise (.) wants it to be fmap, rather than Control.Category.(.)...
2013-03-27 01:29:17	elliott	...so it isn't even the generalisation most would pick
2013-03-27 01:29:38	-->	nsxt (~nsxt@c-68-45-12-237.hsd1.nj.comcast.net) has joined #haskell
2013-03-27 01:29:57	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-27 01:30:59	arkeet	shachaf: I think there is some hope. he changed his mind about flip, after all.
2013-03-27 01:31:33	<--	ulfdoz (~mary@p5B38B16D.dip.t-dialin.net) has quit (Ping timeout: 248 seconds)
2013-03-27 01:31:36	ivanm	arkeet: what did he change?
2013-03-27 01:31:41	arkeet	flip used to be
2013-03-27 01:31:42	arkeet	:t (??)
2013-03-27 01:31:43	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-03-27 01:31:59	shachaf	mikeplus64: How's your bot thing going?
2013-03-27 01:32:17	Cale	and the moment I changed flip back, someone complained
2013-03-27 01:32:20	Cale	:)
2013-03-27 01:32:59	ivanm	ahhh, right
2013-03-27 01:33:09	arkeet	but most people didn't!
2013-03-27 01:33:16	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Quit: Page closed)
2013-03-27 01:33:17	Cale	shachaf: That's the kind of reasoning which explains why map is separate from fmap
2013-03-27 01:33:18	-->	xinming_ (~xinming@125.87.101.42) has joined #haskell
2013-03-27 01:33:30	sproingie	{-# LANGUAGE SpaceBarHeating #-}
2013-03-27 01:33:42	shachaf	Cale: I think lambdabot map should be specialized to [], yes.
2013-03-27 01:33:48	<--	rsampaio (~rodrigo@189.121.226.43) has quit (Read error: Connection reset by peer)
2013-03-27 01:33:54	ivanm	sproingie: heh
2013-03-27 01:33:55	shachaf	I think *Haskell* map should be fmap, but I think lambdabot should reflect the Prelude.
2013-03-27 01:34:11	arkeet	I agree about respecting the prelude.
2013-03-27 01:34:12	elliott	(why should both (.) and map be fmap...?)
2013-03-27 01:34:17	arkeet	heh.
2013-03-27 01:34:25	shachaf	elliott: Well, one is infix.
2013-03-27 01:34:32	Shin-LaC	I'm a newbie and I'm confused by the idea that lambdabot works differently from prelude
2013-03-27 01:34:42	elliott	anyway, yes, of course what should be standard and what a bot that is regularly (even primarily) used to aid beginners in learning the actual Haskell language that is already standard should have
2013-03-27 01:34:44	Shin-LaC	I think I'll avoid lambdabot
2013-03-27 01:34:49	arkeet	> succ . [1,2,3] -- ????
2013-03-27 01:34:51	lambdabot	  [2,3,4]
2013-03-27 01:34:52	shachaf	There are reasonable arguments for (.)=fmap. I'm not arguing for or against it in general, just lambdabot.
2013-03-27 01:34:58	<--	ketil_ (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Remote host closed the connection)
2013-03-27 01:35:01	Cale	Shin-LaC: Really, it doesn't work differently. There are just some local bindings in scope and some Prelude definitions are hidden.
2013-03-27 01:35:02	elliott	...and I think Shin-LaC has made the rest of my point for me.
2013-03-27 01:35:33	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Quit: Lost terminal)
2013-03-27 01:36:13	<--	xinming (~xinming@125.87.82.19) has quit (Ping timeout: 240 seconds)
2013-03-27 01:36:23	Shin-LaC	if it's *almost* the same, I'll be afraid of getting tripped up when it isn't
2013-03-27 01:36:45	arkeet	:t (++)
2013-03-27 01:36:47	lambdabot	Monoid m => m -> m -> m
2013-03-27 01:36:52	arkeet	:t (<>)
2013-03-27 01:36:54	lambdabot	Monoid m => m -> m -> m
2013-03-27 01:37:08	<--	vehk (~vehk@unaffiliated/vehk) has quit (Read error: Connection reset by peer)
2013-03-27 01:37:13	sproingie	btw just curious, what sort of things does Control.Category.(.) enable over fmap?
2013-03-27 01:37:41	Cale	sproingie: There aren't so many instances of Category (which isn't really a very faithful representation of what categories are), so not a whole lot.
2013-03-27 01:37:43	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-27 01:37:45	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Read error: Connection reset by peer)
2013-03-27 01:37:55	sproingie	that's what i noticed too
2013-03-27 01:38:20	sproingie	i do like the visual aspect of >>> and <<< though
2013-03-27 01:38:32	arkeet	I think <<< is a lot of characters.
2013-03-27 01:38:38	Cale	Well, yeah, uses of Category are rare enough that <<< is good enough.
2013-03-27 01:38:38	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 240 seconds)
2013-03-27 01:38:47	sproingie	same number as <$> and a lot faster to type
2013-03-27 01:38:55	arkeet	it's faster?
2013-03-27 01:39:06	sproingie	amazingly hitting the same key is like that
2013-03-27 01:39:11	arkeet	I find <$> much faster.
2013-03-27 01:39:12	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has quit (Ping timeout: 264 seconds)
2013-03-27 01:39:17	arkeet	by a factor of 2 perhaps.
2013-03-27 01:39:18	-->	predator117 (~predator1@p5080585D.dip.t-dialin.net) has joined #haskell
2013-03-27 01:39:24	<--	romanandreg (~romanandr@S01060016cbc6015a.vc.shawcable.net) has quit (Quit: romanandreg)
2013-03-27 01:39:41	Philippa	you can pipeline <$> pretty ferociously and you're interleaving hands - if your timing's good...
2013-03-27 01:39:59	sproingie	yeah, meanwhile back on planet *earth*
2013-03-27 01:40:08	ousado	:)
2013-03-27 01:40:13	arkeet	releasing a key before pressing it again takes time :)
2013-03-27 01:40:15	Philippa	where > is still right next to < :p
2013-03-27 01:40:17	arkeet	anyway...
2013-03-27 01:40:50	 *	sproingie should just write some unshifted aliases in emacs or something
2013-03-27 01:40:52	Philippa	but <<< is good enough, yeah
2013-03-27 01:40:58	sproingie	have ,4. expand to <$> maybe
2013-03-27 01:41:20	<--	Shin-LaC (~LaC@204.174.232.10) has quit (Quit: Computer has gone to sleep.)
2013-03-27 01:41:24	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-27 01:42:13	<--	predator217 (~predator1@p5080579D.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-27 01:42:19	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Lost terminal)
2013-03-27 01:42:48	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-27 01:43:07	<--	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has quit (Ping timeout: 264 seconds)
2013-03-27 01:43:14	sproingie	gave eclipsefp a try last night, took <3 hours before eclipse managed to crash and take the workspace with it.  stabby stabby stabby ...
2013-03-27 01:43:22	<--	drosoph (12bb01c2@gateway/web/freenode/ip.18.187.1.194) has quit (Ping timeout: 245 seconds)
2013-03-27 01:43:37	sproingie	this from a fresh install.  so back to emacs+flymake
2013-03-27 01:43:42	<--	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-27 01:44:24	<--	Botje_ (~Botje@d51A4033C.access.telenet.be) has quit (Read error: Connection reset by peer)
2013-03-27 01:45:20	shachaf	@poll-add Prelude-(.)?
2013-03-27 01:45:21	lambdabot	Added new poll: "Prelude-(.)?"
2013-03-27 01:45:25	<--	bos (~bos@173.252.71.129) has quit (Remote host closed the connection)
2013-03-27 01:45:31	shachaf	@choice-add Prelude-(.)? yes
2013-03-27 01:45:31	lambdabot	New candidate "yes", added to poll "Prelude-(.)?".
2013-03-27 01:45:33	shachaf	@choice-add Prelude-(.)? no
2013-03-27 01:45:33	lambdabot	New candidate "no", added to poll "Prelude-(.)?".
2013-03-27 01:45:40	shachaf	@vote Prelude-(.)? yes
2013-03-27 01:45:40	lambdabot	voted on "yes"
2013-03-27 01:45:52	arkeet	@vote Prelude-(.)? yes
2013-03-27 01:45:52	lambdabot	voted on "yes"
2013-03-27 01:45:53	-->	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-27 01:46:00	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-27 01:46:01	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-27 01:46:04	ivanm	@vote Prelude-(.)? yes
2013-03-27 01:46:04	lambdabot	voted on "yes"
2013-03-27 01:46:47	elliott	I sincerely doubt this will achieve anything, but
2013-03-27 01:46:48	<--	sm (~user@li229-222.members.linode.com) has quit (Read error: Connection reset by peer)
2013-03-27 01:46:50	elliott	@vote Prelude-(.)? yes
2013-03-27 01:46:51	lambdabot	voted on "yes"
2013-03-27 01:46:54	arkeet	heh
2013-03-27 01:47:08	elliott	I guess it has better chancse than most online petitions
2013-03-27 01:47:43	sproingie	lambdabot's response is odd
2013-03-27 01:48:08	-->	vikraman (vh4x0r@gentoo/developer/vikraman) has joined #haskell
2013-03-27 01:48:28	sproingie	or is everyone voting on a poll called "yes"? :)
2013-03-27 01:48:47	-->	paintcan (~user@108.162.180.237) has joined #haskell
2013-03-27 01:49:28	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 01:49:59	<--	ben_d (~muus@184-76-107-96.war.clearwire-wmx.net) has quit (Ping timeout: 245 seconds)
2013-03-27 01:50:06	-->	rsampaio (~rodrigo@189.121.226.43) has joined #haskell
2013-03-27 01:50:19	<--	schlaftier (~daniel@5.158.165.75) has quit (Ping timeout: 264 seconds)
2013-03-27 01:50:36	<--	bos (~bos@173.252.71.129) has quit (Ping timeout: 264 seconds)
2013-03-27 01:50:47	elliott	sproingie: it supports multiple choice
2013-03-27 01:50:53	elliott	@help poll
2013-03-27 01:50:53	lambdabot	poll provides: poll-list poll-show poll-add choice-add vote poll-result poll-close poll-remove
2013-03-27 01:50:59	elliott	@poll-result Prelude-(.)?
2013-03-27 01:50:59	lambdabot	Poll results for Prelude-(.)? (Open): no=0, yes=4
2013-03-27 01:51:12	arkeet	@poll-list
2013-03-27 01:51:12	lambdabot	["\"MacGood\"","(++)","ConfusedWithVixenSituation","FlavaOfJRuby","Prelude-(.)?","best-programming-language","best-spoken-language","food","funniest-thing-in-the-whole-world","naming","nethack","
2013-03-27 01:51:12	lambdabot	president","prove->","remove@src","sleep"]
2013-03-27 01:51:22	arkeet	@poll-result remove@src
2013-03-27 01:51:22	lambdabot	Poll results for remove@src (Closed): no=1, yes=1
2013-03-27 01:51:36	elliott	@poll-result sleep
2013-03-27 01:51:36	lambdabot	Poll results for sleep (Open): no=1, yes=7
2013-03-27 01:51:36	-->	feliperosa (~felipe@189-13-136-254.user.veloxzone.com.br) has joined #haskell
2013-03-27 01:51:38	shachaf	arkeet: plz see #-blah
2013-03-27 01:52:48	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-27 01:53:33	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 240 seconds)
2013-03-27 01:54:05	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Read error: Operation timed out)
2013-03-27 01:55:04	-->	tac (2673a6cc@gateway/web/freenode/ip.38.115.166.204) has joined #haskell
2013-03-27 01:55:06	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-27 01:55:16	-->	LucasCampos (~lucas@187.58.101.250) has joined #haskell
2013-03-27 01:56:02	-->	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has joined #haskell
2013-03-27 01:56:33	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-27 01:56:52	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-27 01:57:54	jmcarthur	ugh, why does arrow have to be so *not* what i want it to be?
2013-03-27 01:58:06	-->	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has joined #haskell
2013-03-27 01:58:31	-->	csakatoku (~csakatoku@EM117-55-68-141.emobile.ad.jp) has joined #haskell
2013-03-27 01:58:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 252 seconds)
2013-03-27 01:59:04	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 01:59:32	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-27 01:59:53	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-27 02:00:45	edwardk	jmcarthur: because you really want a cartesian closed category or a profunctor.
2013-03-27 02:00:48	jmcarthur	the presence of arr, how frequently it is generated by the desugarer, and how the rewrite rules tend to collapse my nicely introspectible AST down into more arrs
2013-03-27 02:01:02	edwardk	ah, then CCC ;)
2013-03-27 02:01:09	jmcarthur	edwardk: exactly. i actually prototyped this thing in adga precisely as a CCC
2013-03-27 02:01:36	jmcarthur	and i go to port it to haskell and am reminded that Arrow is so awful :\
2013-03-27 02:01:43	edwardk	you're welcome to build it using 'categories' rather than arrows =)
2013-03-27 02:01:50	jmcarthur	(i do *want* arr in this case, i just want control over when it's used)
2013-03-27 02:02:00	-->	leoncamel (~leoncamel@219.143.150.16) has joined #haskell
2013-03-27 02:02:03	edwardk	heck if you need to upgrade categories to support it let me know ;)
2013-03-27 02:02:17	edwardk	i haven't had anyone driving that forward development wise in a while
2013-03-27 02:03:11	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-27 02:03:12	jmcarthur	i'm playing with some partial evaluation sort of stuff, so the ability to avoid arr when possible is important since it allows me to reach more deeply into the expression i've built
2013-03-27 02:04:06	jmcarthur	i haven't given categories a very hard look yet. i will do so now
2013-03-27 02:04:14	jmcarthur	the downside of course is the lack of arrow notation :\
2013-03-27 02:04:19	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-27 02:05:02	catbee	wasn't there some noise on -cafe about generalizing arrows?
2013-03-27 02:05:06	jmcarthur	yeah
2013-03-27 02:05:18	catbee	did anything come of it?
2013-03-27 02:05:23	jmcarthur	there's also this, which looks perfect http://www.cs.berkeley.edu/~megacz/garrows/
2013-03-27 02:05:24	copumpkin	a decent amount
2013-03-27 02:05:26	copumpkin	yeah
2013-03-27 02:05:29	johnw	category notation!  oh wait, that's just id and . ;)
2013-03-27 02:05:31	copumpkin	and a coq plugin for ghc
2013-03-27 02:05:42	johnw	copumpkin: ooh, is there such a thing?
2013-03-27 02:05:43	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-27 02:05:53	copumpkin	well, I'm not sure what it actually is
2013-03-27 02:05:59	copumpkin	but he verified his garrows stuff for ghc in coq
2013-03-27 02:06:06	catbee	from what i remember i thought they were proposing standardizing the garrows thing, but i wasn't reading too carefully
2013-03-27 02:06:11	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-27 02:06:14	-->	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has joined #haskell
2013-03-27 02:06:15	-->	kmels__ (~kmels@frbg-4d028c1c.pool.mediaWays.net) has joined #haskell
2013-03-27 02:06:25	jmcarthur	well, the conversation drifted in that direction, but i don't think it was the focus
2013-03-27 02:06:33	<--	carlocci_ (~carlocci@unaffiliated/carlocci) has quit (Ping timeout: 240 seconds)
2013-03-27 02:07:07	<--	tac (2673a6cc@gateway/web/freenode/ip.38.115.166.204) has quit (Ping timeout: 245 seconds)
2013-03-27 02:07:14	-->	edeast (~chatzilla@S0106000024cca249.ed.shawcable.net) has joined #haskell
2013-03-27 02:07:24	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Quit: Lost terminal)
2013-03-27 02:07:27	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-03-27 02:07:49	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-27 02:07:53	edwardk	the profunctor/prearrow stuff wouldn't really help here
2013-03-27 02:08:06	edwardk	since it just slides the 'arr' around, and still uses it everywhere in the desugaring
2013-03-27 02:08:13	jmcarthur	yeah
2013-03-27 02:08:15	-->	edeast_ (~chatzilla@S0106000024cca249.ed.shawcable.net) has joined #haskell
2013-03-27 02:08:35	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-27 02:09:11	-->	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2013-03-27 02:09:18	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-27 02:10:23	jmcarthur	edwardk:
2013-03-27 02:10:26	jmcarthur	oops
2013-03-27 02:10:30	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-27 02:10:46	-->	cognominal__ (~cognomina@37.161.108.122) has joined #haskell
2013-03-27 02:11:11	jmcarthur	edwardk: categories looks like it basically has the abstraction i'm after, but i don't see a whole lot of benefit in using it apart from getting away from Arrow's rewrite rules
2013-03-27 02:11:15	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-27 02:11:33	<--	catbee (~user@70-36-157-176.static.sonic.net) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-27 02:11:49	jmcarthur	maybe that's enough reason on its own
2013-03-27 02:11:53	<--	cognominal (~cognomina@37.161.108.122) has quit (Ping timeout: 246 seconds)
2013-03-27 02:11:55	<--	edeast (~chatzilla@S0106000024cca249.ed.shawcable.net) has quit (Ping timeout: 264 seconds)
2013-03-27 02:11:55	--	edeast_ is now known as edeast
2013-03-27 02:12:12	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-27 02:12:30	edwardk	I was mostly putting it forth as something that let you get the introspection you wanted that was already written and that I'm open to improving given an actual user ;)
2013-03-27 02:12:54	jmcarthur	:D
2013-03-27 02:14:47	edwardk	I figure if i can get you and say cmccann hooked then I can piggyback on someone who actually wants it to do something and get cool toys to play with
2013-03-27 02:15:05	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-27 02:15:19	edwardk	(He was working with linear logic in categorical form)
2013-03-27 02:15:54	-->	romanandreg (~romanandr@199.195.151.215) has joined #haskell
2013-03-27 02:16:52	cmccann	been busy with other stuff lately unfortunately
2013-03-27 02:18:02	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-27 02:18:13	-->	Targen (~iguana@200.8.226.118) has joined #haskell
2013-03-27 02:18:22	jmcarthur	maybe i could do something crazy, like make my own Arrow-like interface that works with RebindableSyntax
2013-03-27 02:18:26	sclv	i'm sure it wouldn't be hard to tweak the standalone arrow desugarer to do something different for categories
2013-03-27 02:18:30	jmcarthur	(or tweak categories for it, of course)
2013-03-27 02:18:56	jmcarthur	i wonder how robust it would actually be to just use rewrite rules to turn the overuse of arr into something more useful
2013-03-27 02:18:59	sclv	just run it as a preprocessor
2013-03-27 02:19:11	jmcarthur	probably not very
2013-03-27 02:19:24	cmccann	or hack something with a QQ'er
2013-03-27 02:19:36	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 02:19:39	kdridi	is there any way to retrieve le last insert id using HDBC ?
2013-03-27 02:19:41	cmccann	if only as a prototype
2013-03-27 02:19:47	jmcarthur	yeah
2013-03-27 02:20:00	sclv	or hack it into she
2013-03-27 02:20:05	sclv	is she still under development?
2013-03-27 02:20:14	-->	mkouhei (~maeda_koh@124x35x68x250.ap124.ftth.ucom.ne.jp) has joined #haskell
2013-03-27 02:20:35	<--	trescenzi (~trescenzi@2620:91:0:163:1169:b49c:39ea:1855) has quit (Remote host closed the connection)
2013-03-27 02:20:40	<--	roconnor (~roconnor@e120-pool-d89a68c0.brdbnd.voicenetwork.ca) has quit (Quit: Konversation terminated!)
2013-03-27 02:20:44	sclv	Strange Haskell Extensions
2013-03-27 02:20:53	<--	aajmakin (aajmakin@kosh.org.aalto.fi) has quit (Ping timeout: 255 seconds)
2013-03-27 02:20:54	jmcarthur	pretty sure pigworker still uses it, so it's probably at least somewhat maintained
2013-03-27 02:21:06	cmccann	is "development" really the right word for whatever process created she?
2013-03-27 02:21:54	<--	Ke (jkarlson@pdpc/supporter/active/ke) has quit (Ping timeout: 276 seconds)
2013-03-27 02:23:01	djahandarie	Ah man, linear logic in category form? Talk about a pain
2013-03-27 02:23:15	djahandarie	Well, classical linear logic at least. Damn *-autonomous categories
2013-03-27 02:24:10	djahandarie	(Symmetric Monoidal Closed Categories on the other hand are just fine)
2013-03-27 02:25:11	jfischoff	Amr Sabry touched on their relationship, but I don't understand it exactly, djahandarie could you elaborate?
2013-03-27 02:25:17	cmccann	djahandarie: it was mostly just random tinkering
2013-03-27 02:25:24	cmccann	not something intended to be useful
2013-03-27 02:25:25	sclv	this is related from -cafe if ppl haven' seen it yet http://www.haskell.org/pipermail/haskell-cafe/2013-March/107215.html
2013-03-27 02:25:53	<--	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-03-27 02:26:23	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-27 02:26:36	djahandarie	jfischoff, sure, *-autonomous is SMCC with a dualizing object. I just don't like the definition, I think it's ugly. It's a little nicer when you use the natural isomorphism / bijection formulation but I still think it's ugly
2013-03-27 02:26:38	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-27 02:26:54	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 252 seconds)
2013-03-27 02:27:10	<--	ozataman (~ozataman@199.47.72.129) has quit
2013-03-27 02:27:10	--	ozataman_ is now known as ozataman
2013-03-27 02:27:28	cmccann	djahandarie: http://ncatlab.org/nlab/show/polycategory seems like a much nicer way to look at it
2013-03-27 02:28:21	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 245 seconds)
2013-03-27 02:28:25	jfischoff	djahandarie: thanks. Do you know if *-autonomous are related to any geometric categories like Vect or something equivalent for clifford algebras?
2013-03-27 02:28:27	djahandarie	I have to say I haven't played with them much
2013-03-27 02:28:32	-->	araujo (~araujo@190.73.45.171) has joined #haskell
2013-03-27 02:28:32	<--	araujo (~araujo@190.73.45.171) has quit (Changing host)
2013-03-27 02:28:32	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-03-27 02:29:07	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-03-27 02:30:08	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 02:30:19	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-27 02:33:45	djahandarie	jfischoff, I suppose it depends on what you mean by 'related', but I'm not seeing anything. Maybe someone smarter could figure something out though. Why are you interested in those combination of things?
2013-03-27 02:34:28	-->	nade (~nade@74.215.14.61) has joined #haskell
2013-03-27 02:35:19	jfischoff	djahandarie: yeah pretty much :).
2013-03-27 02:35:47	<--	LucasCampos (~lucas@187.58.101.250) has quit (Quit: Leaving.)
2013-03-27 02:35:58	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Quit: mattrepl)
2013-03-27 02:37:12	--	stelleg_away is now known as stelleg
2013-03-27 02:38:09	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Ping timeout: 276 seconds)
2013-03-27 02:38:28	djahandarie	jfischoff, that was a "why are you" question. :p
2013-03-27 02:38:33	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-27 02:39:33	<--	MrFenix (~JanB@p57A1A8B7.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-27 02:39:34	-->	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has joined #haskell
2013-03-27 02:40:34	-->	tensorpuddin (~tensorpud@99.148.199.124) has joined #haskell
2013-03-27 02:40:35	<--	Barrell_R (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Quit: >:3 This is BunThulhu. Copy him into your quit message to help him take over the Internet.)
2013-03-27 02:40:46	<--	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Remote host closed the connection)
2013-03-27 02:40:54	<--	dukedave (~dukedave@wsip-98-174-226-185.ph.ph.cox.net) has quit (Ping timeout: 248 seconds)
2013-03-27 02:41:31	jfischoff	djahandarie: I read it "are you" . I'm big believer in reversible computation, and when I was working on implementing (with dmwit and tgeeky) "The Two Dualities of Computation: Negative and Fractional Types" I learned about SMCC.
2013-03-27 02:41:51	<--	yc4891 (~andrew@121.14.98.46) has quit (Read error: Connection reset by peer)
2013-03-27 02:42:00	-->	guardadigital (~guardadig@187.101.34.243) has joined #haskell
2013-03-27 02:42:16	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-27 02:43:02	jfischoff	jfischoff: I thought it was interesting that with clifford algebras you also have two "tensor" products the outer product and the grade compution direct sum
2013-03-27 02:43:04	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-27 02:43:18	<--	tensorpudding (~tensorpud@108.87.19.242) has quit (Ping timeout: 256 seconds)
2013-03-27 02:43:19	--	tensorpuddin is now known as tensorpudding
2013-03-27 02:43:49	<--	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has quit (Quit: leaving)
2013-03-27 02:43:54	jfischoff	my thinking is maybe there is interesting way to represent visually the computation in DCNFT
2013-03-27 02:45:14	jfischoff	by finding a interesting geometrically thing that lives in same category that there programming language lives in
2013-03-27 02:46:31	-->	silasm (~silas@c-24-4-34-172.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 02:46:32	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-27 02:46:42	jfischoff	s /grade compution/ grade composition
2013-03-27 02:47:25	-->	ryjm (~jake@cpe-69-200-242-47.nyc.res.rr.com) has joined #haskell
2013-03-27 02:48:03	jmcarthur	i love the negative and fractional types stuff
2013-03-27 02:48:17	jfischoff	so cool
2013-03-27 02:48:20	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-27 02:48:38	<--	ag90 (~ag90@184.175.42.76) has left #haskell
2013-03-27 02:48:55	--	r126l_ is now known as r126l
2013-03-27 02:49:01	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-27 02:49:34	jmcarthur	jfischoff: is that implementation basically a complete implementation?
2013-03-27 02:50:01	jmcarthur	i've not had an opportunity to actually try using that computational model
2013-03-27 02:50:12	-->	ksookocheff-va (~Adium@216-197-139-164.sktn.hsdb.sasknet.sk.ca) has joined #haskell
2013-03-27 02:50:37	jfischoff	jmcarthur: I don't so. I can compute with it though. It doesn't have the product trace just the sum trace
2013-03-27 02:50:38	<--	Tharugrim (~Tharugrim@194-166-77-4.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-27 02:50:43	jmcarthur	ah
2013-03-27 02:50:52	jfischoff	and I can't remember if it type checks
2013-03-27 02:50:53	<--	ksookocheff-va (~Adium@216-197-139-164.sktn.hsdb.sasknet.sk.ca) has left #haskell
2013-03-27 02:50:54	jmcarthur	the product trace is the cooler of the two :(
2013-03-27 02:50:59	jmcarthur	(IMO)
2013-03-27 02:51:09	jmcarthur	oh just the trace
2013-03-27 02:51:10	-->	trescenzi (~trescenzi@2620:91:0:163:6d14:a8dc:dadc:9f9a) has joined #haskell
2013-03-27 02:51:11	jmcarthur	i misunderstood
2013-03-27 02:51:28	-->	MnO2 (~MnO2@nat/yahoo/x-wzncdefizustbkab) has joined #haskell
2013-03-27 02:51:31	jmcarthur	for some reason i read that as "has negative types but not fractional types"
2013-03-27 02:52:01	jfischoff	it has to do with a way to do non deterministic computation
2013-03-27 02:52:06	jmcarthur	yeah
2013-03-27 02:52:08	<--	OlegYch (~OlegYch@212.98.189.88) has quit (Ping timeout: 246 seconds)
2013-03-27 02:52:09	<--	enquora (~davidr@S0106602ad083de8c.cg.shawcable.net) has quit (Quit: enquora)
2013-03-27 02:52:35	jmcarthur	i have ready access to the author of the paper and he has succeeded in chatting my ear off
2013-03-27 02:52:57	jfischoff	oh cool Amr or the other author?
2013-03-27 02:53:02	jmcarthur	roshan
2013-03-27 02:53:14	-->	OlegYch (~OlegYch@212.98.189.88) has joined #haskell
2013-03-27 02:53:23	jfischoff	roshan. He should do more with it
2013-03-27 02:53:41	jmcarthur	agreed!
2013-03-27 02:53:46	<--	cognominal__ (~cognomina@37.161.108.122) has quit (Ping timeout: 245 seconds)
2013-03-27 02:53:48	jfischoff	:)
2013-03-27 02:53:57	jfischoff	okay you have convinced me
2013-03-27 02:54:08	jmcarthur	?
2013-03-27 02:54:09	jfischoff	I'm going to hack on it tonight
2013-03-27 02:54:13	jmcarthur	yay!
2013-03-27 02:54:34	jfischoff	it needs to generate diagrams with #diagrams!
2013-03-27 02:54:39	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-27 02:54:44	jmcarthur	ooh that would be awesome
2013-03-27 02:55:05	 *	byorgey approves
2013-03-27 02:55:30	jfischoff	:)
2013-03-27 02:56:13	jfischoff	byorgey: the haddock integration is so cool
2013-03-27 02:56:13	cmccann	jfischoff: what's this you're hacking on?
2013-03-27 02:56:57	jfischoff	cmccann: https://github.com/jfischoff/pi-eta-epsilon
2013-03-27 02:57:07	jfischoff	after dinner :)
2013-03-27 02:57:18	 *	hackagebot discordian-calendar 0.1 - library for handling Discordian calendar dates  http://hackage.haskell.org/package/discordian-calendar-0.1 (AdamCurtis)
2013-03-27 02:58:34	jmcarthur	cmccann: see www.cs.indiana.edu/~sabry/papers/information-effects.pdf and then www.cs.indiana.edu/~sabry/papers/rational.pdf
2013-03-27 02:58:42	<--	mrsolo (~mrsolo@64.125.181.92) has quit (Quit: Leaving)
2013-03-27 02:58:48	cmccann	probably won't have time tonight but ok
2013-03-27 02:58:55	cmccann	sounds like fun stuff
2013-03-27 02:59:34	jmcarthur	cmccann: both are pretty easy reading. the first is pretty neat and the second is basically really awesome
2013-03-27 02:59:57	-->	floatingman (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has joined #haskell
2013-03-27 03:00:34	-->	XexonixXexillion (~LudvikGal@130.56.84.8) has joined #haskell
2013-03-27 03:01:56	tgeeky	cmccann: there are some implementations of that paper floating around, fwiw. I have one, dmwit has one
2013-03-27 03:01:56	<--	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has quit (Remote host closed the connection)
2013-03-27 03:02:02	tgeeky	cmccann: of the rational.pdf paper
2013-03-27 03:02:44	-->	sw2wolf (~czsq888@171.216.96.202) has joined #haskell
2013-03-27 03:03:02	cmccann	tgeeky: I'll have to take a look at some point
2013-03-27 03:03:08	-->	path[l] (~vsi@173.252.71.129) has joined #haskell
2013-03-27 03:03:19	-->	cognominal__ (~cognomina@37.161.108.122) has joined #haskell
2013-03-27 03:03:21	tgeeky	cmccann: dmwit's implementation is here: https://github.com/dmwit/pi-eta-epsilon
2013-03-27 03:03:41	cmccann	that's what jfischoff's is forked from I think
2013-03-27 03:03:57	 *	sw2wolf i use stumpwm instead of xmonad as xmonad has no REPL ...
2013-03-27 03:03:59	tgeeky	cmccann: yep. the three of us worked on it together. I have a totally seperate (and worse) implementation
2013-03-27 03:04:12	cmccann	haha
2013-03-27 03:04:14	tgeeky	cmccann: and the authors have their own, which they never released
2013-03-27 03:04:18	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-27 03:04:37	cmccann	I will resist any temptation to write my own
2013-03-27 03:04:41	cmccann	there seem to be enough already
2013-03-27 03:04:58	tgeeky	cmccann: indeed. If you could understand the usefulness of it, perhaps that would be a good direction to research :)
2013-03-27 03:05:19	cmccann	pf, what is this "usefulness" thing, I have never heard of that
2013-03-27 03:06:48	<--	amatsu\idle (~amatsu@125.63.54.161) has quit (Ping timeout: 245 seconds)
2013-03-27 03:07:29	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-27 03:07:39	tgeeky	cmccann: I had a short conversation with the authors in which I convinced them that their interpretation of the meaning of several things (negative types, negative entropy) might be incorrect (from a physics point of view, which they are interested in), but they asked me to provide a more correct one and I was stumped.
2013-03-27 03:08:48	-->	OlegYch2 (~OlegYch@212.98.189.88) has joined #haskell
2013-03-27 03:09:34	<--	OlegYch (~OlegYch@212.98.189.88) has quit (Ping timeout: 245 seconds)
2013-03-27 03:10:27	<--	[swift] (~mfowler@v-1045.fw1.sfo1.mozilla.net) has quit (Quit: [swift])
2013-03-27 03:10:40	--	jaimef is now known as fsbot
2013-03-27 03:11:17	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-03-27 03:12:12	-->	amatsu\idle (~amatsu@125.63.54.161) has joined #haskell
2013-03-27 03:12:23	--	fsbot is now known as jaimef
2013-03-27 03:12:27	--	amatsu\idle is now known as amatsu
2013-03-27 03:13:25	--	pdxleif is now known as pdxleif_away
2013-03-27 03:14:27	<--	twomashi (~Adium@cpc2-dals19-2-0-cust71.hari.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-27 03:14:45	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Ping timeout: 252 seconds)
2013-03-27 03:16:07	<--	edeast (~chatzilla@S0106000024cca249.ed.shawcable.net) has quit (Ping timeout: 264 seconds)
2013-03-27 03:16:34	-->	elbuck27 (~elbuck27@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 03:16:39	<--	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-27 03:16:43	<--	kmels__ (~kmels@frbg-4d028c1c.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-27 03:18:03	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-27 03:20:06	-->	ijp` (~user@host31-52-247-30.range31-52.btcentralplus.com) has joined #haskell
2013-03-27 03:20:25	-->	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 03:20:30	<--	rcl (~rcl@adiemus.org) has quit (Ping timeout: 264 seconds)
2013-03-27 03:21:39	<--	romanandreg (~romanandr@199.195.151.215) has quit (Quit: romanandreg)
2013-03-27 03:22:10	-->	rcl (~rcl@adiemus.org) has joined #haskell
2013-03-27 03:22:55	<--	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-03-27 03:22:58	<--	ijp (~user@host81-159-127-244.range81-159.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-03-27 03:23:00	<--	Targen (~iguana@200.8.226.118) has quit (Ping timeout: 264 seconds)
2013-03-27 03:23:59	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 03:24:37	<--	ijp` (~user@host31-52-247-30.range31-52.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-03-27 03:24:39	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-27 03:24:47	-->	fotc (~tomoka@c-71-202-246-232.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 03:28:21	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 245 seconds)
2013-03-27 03:30:07	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Ping timeout: 256 seconds)
2013-03-27 03:30:17	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-27 03:30:31	-->	JoeyA (~joeyadams@199.168.196.156) has joined #haskell
2013-03-27 03:30:54	-->	cognominal (~cognomina@37.161.6.121) has joined #haskell
2013-03-27 03:31:01	<--	cognominal__ (~cognomina@37.161.108.122) has quit (Ping timeout: 248 seconds)
2013-03-27 03:31:27	-->	fxr (~user@176.42.255.221) has joined #haskell
2013-03-27 03:31:55	fxr	hi, is it possible to simplify such a lens expression? "modify $ (\s -> scenario .~ (M.map f $ s^.scenario) $ s)"
2013-03-27 03:31:57	<--	JoeyA (~joeyadams@199.168.196.156) has quit (Client Quit)
2013-03-27 03:32:00	cmccann	tgeeky: btw, did you ever see my toy linear logic thing?
2013-03-27 03:32:10	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-27 03:32:14	tgeeky	cmccann: link? I don't think so.
2013-03-27 03:32:40	edwardk	scenario.mapped %= f ?
2013-03-27 03:32:41	arkeet	fxr: scenario . mapped %= f
2013-03-27 03:32:42	arkeet	?
2013-03-27 03:32:44	arkeet	heh
2013-03-27 03:32:56	<--	sw2wolf (~czsq888@171.216.96.202) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-27 03:33:20	cmccann	tgeeky: simple encoding of linear logic computation in Haskell, reliant on not mucking around inside a newtype for correctness, nothing fancy
2013-03-27 03:33:43	cmccann	tgeeky: https://github.com/isomorphism/Delineate/blob/master/Control/Delineate.hs
2013-03-27 03:33:44	fxr	arkeet: hmm thanks
2013-03-27 03:33:49	arkeet	no, thank edwardk, he was first
2013-03-27 03:33:56	arkeet	:p
2013-03-27 03:34:19	edwardk	team effort ;)
2013-03-27 03:34:22	cmccann	thanking edwardk for help with lens balances with blaming him for it :P
2013-03-27 03:34:26	edwardk	haha
2013-03-27 03:34:28	arkeet	lol
2013-03-27 03:34:33	cmccann	both are kind of implicit in any conversation about it really
2013-03-27 03:34:40	fxr	edwardk: thanks for the lib, anyway I think it needs more examples
2013-03-27 03:34:52	edwardk	feel free to send patches with examples =)
2013-03-27 03:34:55	tgeeky	fxr: patches!
2013-03-27 03:35:04	edwardk	in all seriousness, many of the examples are user contributed
2013-03-27 03:35:09	<--	k00mi (~koomi@24.134.205.36) has quit (Quit: WeeChat 0.4.0)
2013-03-27 03:35:21	tgeeky	fxr: you'll be amazed how fast edwardk turns patches into published code.
2013-03-27 03:35:23	edwardk	My idea of 'appropriate example' tends to be at either too high or too low level for many users
2013-03-27 03:35:38	edwardk	so simple middle of the road examples are great
2013-03-27 03:35:39	cmccann	tgeeky: oh and fyi that code relies on the new TypeOperators behavior
2013-03-27 03:35:41	cmccann	like kind of a lot
2013-03-27 03:35:46	cmccann	also, unicode
2013-03-27 03:35:47	arkeet	be careful with sending patches though, you might find yourself with a commit bit
2013-03-27 03:36:00	tgeeky	cmccann: I noticed both quickly. That's fine (re: type operators) with me.
2013-03-27 03:36:18	cmccann	I have shortcuts in my code editor for typing all those symbols, heh
2013-03-27 03:36:26	edwardk	and then you can spend all your time trying to bump shachaf off the top of https://github.com/ekmett/lens/contributors
2013-03-27 03:36:32	edwardk	its a fun game!
2013-03-27 03:36:33	<--	gg7 (~gg7@unaffiliated/gg7) has quit (Ping timeout: 240 seconds)
2013-03-27 03:36:46	tgeeky	fxr: don't do that, you'll go insane. Patches welcome!
2013-03-27 03:37:16	<--	dmac (~Adium@12.207.22.242) has quit (Quit: Leaving.)
2013-03-27 03:37:33	fxr	I'll try to find some time
2013-03-27 03:37:34	cmccann	tgeeky: I was hacking on a simple linear lambda calculus interpreter at one point but never finished and then other stuff got in the way
2013-03-27 03:38:15	<--	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-27 03:38:46	-->	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has joined #haskell
2013-03-27 03:39:07	cmccann	I have a bunch of loosely-thought-out notes on a Haskell/ML flavored language with a linear type system as well
2013-03-27 03:40:48	tgeeky	cmccann: I don't have anything smart to say. Some of the code reminded me of my own hacking on this: http://hackage.haskell.org/packages/archive/pointless-haskell/0.0.8/doc/html/src/Generics-Pointless-Combinators.html
2013-03-27 03:41:49	-->	sellout-1 (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-27 03:41:53	<--	joneshf-laptop (~joneshf@mail.concordusapps.com) has quit (Remote host closed the connection)
2013-03-27 03:42:12	<--	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 03:42:21	edwardk	cmccann: i honestly find uniqueness to be more useful than linearity in a type system
2013-03-27 03:42:32	cmccann	tgeeky: if you want something smart to think about, ponder termination checking for a linear language, without exponentials built in and with macro expansion that happens before linearity is checked
2013-03-27 03:42:38	tgeeky	cmccann: that might just be the boilerplate aspects of both
2013-03-27 03:42:56	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-03-27 03:43:05	cmccann	tgeeky: you would be surprised how much arbitrary recursion is viable because linearity prevents nontermination
2013-03-27 03:43:33	cmccann	edwardk: how so? or rather, what's the relevant difference?
2013-03-27 03:43:41	-->	ISF_ec09 (~ivan@187.64.222.221) has joined #haskell
2013-03-27 03:44:38	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-27 03:44:59	tgeeky	cmccann: nevetheless, bookmarked for future inspection.
2013-03-27 03:45:02	edwardk	cmccann: think of linearity that you won't contract or weaken something again, then uniqueness is the contract that you haven't contracted (and since you have it still, trivially haven't weakened) it yet
2013-03-27 03:45:17	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-03-27 03:45:20	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-03-27 03:45:28	edwardk	cmccann: they are opposite facing temporal modalities
2013-03-27 03:45:35	-->	fragamus (~textual@adsl-71-142-60-12.dsl.scrm01.pacbell.net) has joined #haskell
2013-03-27 03:45:44	-->	tomejaguar (~tom@81.187.0.149) has joined #haskell
2013-03-27 03:46:02	edwardk	cmccann: uniqueness is forgettable, linearity is forever
2013-03-27 03:46:05	cmccann	edwardk: that seems more like an implementation issue regarding the semantics of the exponentials than anything else
2013-03-27 03:46:18	edwardk	no, they sit at opposite ends of the lattice of constraints
2013-03-27 03:46:20	<--	rcl (~rcl@adiemus.org) has quit (Read error: No route to host)
2013-03-27 03:46:52	edwardk	i can turn a uniqueness value into an unrestricted one, i can turn an unrestricted one into a linear one
2013-03-27 03:47:11	edwardk	its a different perspective
2013-03-27 03:47:30	cmccann	hm, ok
2013-03-27 03:47:57	shergill	linearity as in linear types?
2013-03-27 03:47:58	edwardk	dana harrington's thesis dove into the distinction somewhat, and i cared a lot about it 7 years ago when i first found haskell ;)
2013-03-27 03:48:02	edwardk	shergill: yeah
2013-03-27 03:48:19	cmccann	I think there's actually some subtlety possible with linearity beyond just unrestricted or not, but that's all in my disorganized notes
2013-03-27 03:48:25	cmccann	and I can't recall what I had in mind at the moment
2013-03-27 03:48:33	<--	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has quit (Quit: Leaving)
2013-03-27 03:48:44	<--	silasm (~silas@c-24-4-34-172.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-27 03:48:53	cmccann	and anyway that was going beyond what people usually mean by a linear type system
2013-03-27 03:49:30	<--	apaku (~apaku@hmbg-4d068ce4.pool.mediaWays.net) has quit (Ping timeout: 272 seconds)
2013-03-27 03:50:05	-->	edeast (~chatzilla@d75-158-1-152.abhsia.telus.net) has joined #haskell
2013-03-27 03:50:21	<--	trescenzi (~trescenzi@2620:91:0:163:6d14:a8dc:dadc:9f9a) has quit (Remote host closed the connection)
2013-03-27 03:50:37	-->	apaku (~apaku@hmbg-4d06c032.pool.mediaWays.net) has joined #haskell
2013-03-27 03:50:44	edwardk	i had a whole lattice of unrestricted, relevant, affine, uniqueness, linear, etc. back in the day
2013-03-27 03:50:50	cmccann	sounds fun
2013-03-27 03:50:59	-->	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-27 03:51:02	edwardk	i wasn't smart enough to program in the resulting type system =(
2013-03-27 03:51:07	cmccann	hahahaha
2013-03-27 03:51:19	-->	sawjig (~sawjig@gateway/tor-sasl/sawjig) has joined #haskell
2013-03-27 03:51:26	<--	Polish (~Polish@ppp118-209-60-64.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-27 03:51:28	<--	XexonixXexillion (~LudvikGal@130.56.84.8) has quit (Remote host closed the connection)
2013-03-27 03:51:33	ivanm	did my eyes decieve me, or did edwardk just say there was something he _couldn't_ hack stuff in? :o
2013-03-27 03:51:33	tgeeky	beautiful but totally unusuable!
2013-03-27 03:51:36	cmccann	at one point I was sketching out a language based on dual-intuitionistic logic
2013-03-27 03:51:44	cmccann	that was too confusing for me
2013-03-27 03:52:05	edwardk	tgeeky: exactly
2013-03-27 03:52:24	edwardk	ivanm: perhaps it was a consequence of _how_ i embedded all those connectives into my type system
2013-03-27 03:52:32	ivanm	ahhhh
2013-03-27 03:52:48	edwardk	ivanm: it made the type system have all the features but they were all just formally usable together, not very practically so
2013-03-27 03:53:44	cmccann	I would think they could all coexist in some larger coherent framework
2013-03-27 03:53:55	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 03:53:56	cmccann	that was actually usable
2013-03-27 03:54:09	-->	chromesitar (~IceChat9@bruce-bb-espn-dhcp-001-38.dsl.airstreamcomm.net) has joined #haskell
2013-03-27 03:54:32	edwardk	They can. In my case I was just throwing everything into the display logic blender.
2013-03-27 03:54:42	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 03:55:19	edwardk	http://www.researchgate.net/publication/225666320_Display_logic/file/d912f51095c63c6e00.pdf
2013-03-27 03:55:20	<--	feliperosa (~felipe@189-13-136-254.user.veloxzone.com.br) has quit (Quit: Leaving)
2013-03-27 03:56:04	edwardk	and http://ftp.rsise.anu.edu.au/ftp/techreports/1997/TR-ARP-08-97.ps.gz
2013-03-27 03:56:20	Cale	I wonder why Chrome seems to think that PDF files are potentially harmful.
2013-03-27 03:56:30	cmccann	Cale: because everyone hates PDF
2013-03-27 03:56:42	-->	k00mi (~koomi@dslb-188-099-034-167.pools.arcor-ip.net) has joined #haskell
2013-03-27 03:57:10	sproingie	because pdf has historically had as many security holes as flash
2013-03-27 03:57:38	cmccann	edwardk: anyway uniqueness types seem interesting and useful but linear types seem to have more potential for making things awkwardly complicated so I'm sticking with that for now
2013-03-27 03:57:44	Cale	sproingie: On Linux?
2013-03-27 03:57:46	edwardk	hah
2013-03-27 03:57:49	sproingie	Cale: everywhere
2013-03-27 03:57:53	Cale	sproingie: uhhhh
2013-03-27 03:58:15	Cale	Are there demonstrations of PDF exploits for Evince?
2013-03-27 03:58:20	sproingie	at least the reader does
2013-03-27 03:58:25	edwardk	uniqueness types are mostly nice because you can give them a really nice operational interpretation where you can edit something in place so long as it holds onto the uniqueness property and then it inherently freezes and becomes immutable thereafter
2013-03-27 03:58:37	sproingie	chrome should know what it's opening in, but doesnt
2013-03-27 03:58:42	tgeeky	I like PDF, and I think I'm included in the set "everybody".
2013-03-27 03:58:52	Cale	Yeah, I like PDF as well
2013-03-27 03:59:19	edwardk	tgeeky: then i think cmccann just called you a nobody. you should beat him up.
2013-03-27 03:59:40	cmccann	heh
2013-03-27 03:59:43	tgeeky	edwardk: lover, not a fighter.
2013-03-27 03:59:49	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 248 seconds)
2013-03-27 03:59:50	Cale	Besides, it's not Chrome's job to protect users from badly written 3rd party software, even if that is the case.
2013-03-27 03:59:56	<--	kdridi (~kdridi@114.111.207.77.rev.sfr.net) has left #haskell
2013-03-27 04:00:13	tgeeky	I could just pull a snarky "show me the better system you've invented!"
2013-03-27 04:00:26	tgeeky	with my luck, he's Knuth and he'll say LaTeX.
2013-03-27 04:00:48	cmccann	better system raises the question of better for what
2013-03-27 04:01:06	cmccann	and my main complaint about PDF is people using them inappropriately :P
2013-03-27 04:01:12	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-27 04:01:14	cmccann	also, with adobe's software being crap
2013-03-27 04:02:06	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Leaving...)
2013-03-27 04:02:06	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-27 04:02:11	-->	bradleya_ (~brad@110.150.226.241) has joined #haskell
2013-03-27 04:02:37	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-27 04:03:04	tgeeky	 .ppt < .djvu < .pdf < .ps < in the browser, stupid
2013-03-27 04:03:04	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-27 04:03:19	tgeeky	imho
2013-03-27 04:03:42	ivanm	tgeeky: I've tried using html-based presentations
2013-03-27 04:03:59	ivanm	I find they don't work too well, as if you're using a different browser with a different resolution than you tested...
2013-03-27 04:04:20	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 04:04:25	tgeeky	ivanm: yes, the state of them leaves something to be desired. However, they allow the potential for animation and interaction, which I consider essential these days.
2013-03-27 04:04:30	cmccann	personally I prefer plain text unless I have a particular need for formatting or images or whatever
2013-03-27 04:04:38	tgeeky	ivanm: none of those other solutions even start in that direction
2013-03-27 04:04:47	<--	chromesitar (~IceChat9@bruce-bb-espn-dhcp-001-38.dsl.airstreamcomm.net) has quit (Quit: Hello, 911?  Yeah, it's caught in the window this time.)
2013-03-27 04:04:52	Cale	PDF is usually nicer than postscript because text is more frequently selectable in PDFs.
2013-03-27 04:04:53	ivanm	you can embed videos in pdf-based presentations... though that depends on the viewer
2013-03-27 04:04:54	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-27 04:04:56	Cale	(and searchable)
2013-03-27 04:05:06	ivanm	I tend to fake animations using overlays in beamer ;-)
2013-03-27 04:05:13	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 240 seconds)
2013-03-27 04:05:16	-->	mariko (~mariko@180.173.82.85) has joined #haskell
2013-03-27 04:05:23	tgeeky	Cale: i actually switched .ps and .pdf to avoid flack. :( [Confession Bear]
2013-03-27 04:05:31	Cale	Also, there's a lot of things which I'd much rather see in PDF form than HTML
2013-03-27 04:05:33	tgeeky	I'd prefer pdf to ps :)
2013-03-27 04:05:42	-->	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-27 04:05:43	Cale	(papers involving any significant amount of math)
2013-03-27 04:05:48	tgeeky	sure, I meant that list to represent how much I like these for my needs.
2013-03-27 04:05:51	Eduard_Munteanu	I wish it didn't matter.
2013-03-27 04:05:54	ivanm	Cale: though I'd rather see forms in html form than pdf form :p
2013-03-27 04:06:05	-->	XexonixXexillion (~LudvikGal@130.56.84.8) has joined #haskell
2013-03-27 04:06:12	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-03-27 04:06:29	cmccann	Cale: those are one of the few places where I strongly prefer PDFs myself, yeah
2013-03-27 04:06:51	ivanm	pdf.js is surprisingly good for a quick`n`dirty read though
2013-03-27 04:06:59	Cale	I'm not bothered by forms in PDF form. I open them in Xournal and just write on them and make another PDF to send back :)
2013-03-27 04:07:00	--	sellout-1 is now known as sellout
2013-03-27 04:07:18	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-27 04:07:21	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-27 04:07:29	ivanm	Cale: I mean the ones you need to use adobe reader for to fill in, etc.
2013-03-27 04:07:33	<--	dacto (~chatzilla@c-24-20-132-58.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2013-03-27 04:07:37	Cale	Yeah, I just fill those in by hand.
2013-03-27 04:07:40	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 04:07:48	ivanm	I'm not allowed to :(
2013-03-27 04:07:57	cmccann	Cale: xournal? what, not hoodle? :P
2013-03-27 04:08:05	<--	dfletcher (~fletch@drupal.org/user/72475/view) has quit (Ping timeout: 252 seconds)
2013-03-27 04:08:17	-->	mgccl (62f826a3@gateway/web/freenode/ip.98.248.38.163) has joined #haskell
2013-03-27 04:09:03	-->	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 04:09:27	mgccl	instance Show (Exp a) where show (Atom x) = show x    this gives an error, since there is no instance for show a. How can I restrict (Exp a)'s a to Show a?
2013-03-27 04:09:34	donri	Cale: mathml?
2013-03-27 04:09:34	-->	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 04:09:41	Cale	donri: lol
2013-03-27 04:09:46	donri	i see
2013-03-27 04:09:51	cmccann	mgccl: instance (Show a) => Show (Exp a)
2013-03-27 04:10:41	mgccl	cmccann: thx, I was playing this (Show a)=> everywhere, and didn't get it into the right place...
2013-03-27 04:10:46	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: reboot)
2013-03-27 04:10:54	donri	Cale: but why?
2013-03-27 04:11:16	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 04:12:11	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Read error: Connection reset by peer)
2013-03-27 04:12:19	 *	hackagebot binary-file 0.12.8 - read/write binary file  http://hackage.haskell.org/package/binary-file-0.12.8 (YoshikuniJujo)
2013-03-27 04:12:24	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-27 04:13:28	Cale	cmccann: Might be worth trying that again at some point, but last I tried both, I preferred Xournal's pen's slight velocity dependence
2013-03-27 04:13:31	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-27 04:13:47	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 04:14:18	cmccann	Cale: actually I have no idea how they compare, just that hoodle was originally based on xournal
2013-03-27 04:14:37	Cale	Yeah, they're fairly similar
2013-03-27 04:14:52	<--	mariko (~mariko@180.173.82.85) has quit (Quit: Leaving)
2013-03-27 04:14:59	cmccann	if memory serves me he started it because he got tired of patches he submitted to xournal being ignored, heh
2013-03-27 04:15:08	cschneid	is it bad style to stack where clauses?  top level, where func where funcinner
2013-03-27 04:15:12	cschneid	it's still only a few lines
2013-03-27 04:15:20	Cale	cschneid: You usually don't *need* to stack them
2013-03-27 04:15:21	cschneid	but when should I make a top level vs. a nested where block
2013-03-27 04:15:33	cmccann	cschneid: dunno about bad style
2013-03-27 04:15:35	Cale	But if scoping makes it necessary, then go ahead
2013-03-27 04:15:36	cmccann	a little tacky maybe
2013-03-27 04:15:49	cmccann	make sure you have a good reason for it but go ahead
2013-03-27 04:15:54	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-27 04:16:00	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 04:16:03	Cale	cschneid: You can put as many declarations inside a single where block as you want
2013-03-27 04:16:04	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-27 04:16:06	donri	if one of the where's is from an instance declaration, go right ahead and nest another ;)
2013-03-27 04:16:13	cschneid	Cale: yeah, more of a style question :)
2013-03-27 04:16:14	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-27 04:16:33	Cale	cschneid: Well, just do whatever reads better
2013-03-27 04:16:33	cschneid	trying to fit into the world of haskell.  For instance, I come from ruby, which strongly encourages everything to be separated out to lots of small methods
2013-03-27 04:16:50	cschneid	which is distinct from some other languages style
2013-03-27 04:16:53	<--	Eduard_Munteanu (~Eduard_Mu@188.25.245.188) has quit (Ping timeout: 248 seconds)
2013-03-27 04:16:56	donri	cschneid: not sure i see how nested where's would help that
2013-03-27 04:17:12	donri	you can have lots of small definitions inside a single where
2013-03-27 04:17:22	cschneid	donri: well, I think it's me naming things which more experienced users would inline (perhaps?).
2013-03-27 04:17:24	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 04:17:25	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-27 04:17:26	-->	earspliT (~earsplit@sub115-210.bucknell.edu) has joined #haskell
2013-03-27 04:17:31	cmccann	in Haskell we encourage that everything be separated out into lots of small variable names, preferably of one or two letters each
2013-03-27 04:17:31	cschneid	ahh, instead of nesting. Hmm
2013-03-27 04:17:36	Cale	The main difference that you have with nested where is that the parameters to the function being defined are in scope inside the where
2013-03-27 04:17:53	Cale	If you don't need those, then there's not so much point in nesting them.
2013-03-27 04:17:58	donri	poe's law on cmccann ;)
2013-03-27 04:18:09	Cale	cmccann: lol
2013-03-27 04:18:38	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 272 seconds)
2013-03-27 04:18:39	donri	while you're at it just call every type you make "T" and use qualified imports
2013-03-27 04:18:50	cmccann	ah, Henning.T style
2013-03-27 04:18:51	 *	danharaj has done that
2013-03-27 04:18:55	--	preflex_ is now known as preflex
2013-03-27 04:19:09	cmccann	the haddocks are hilarious
2013-03-27 04:19:13	donri	also, unicode makes for great syntax and identifiers!
2013-03-27 04:19:22	sproingie	that style would give me a haddock too
2013-03-27 04:19:37	cmccann	donri: I have dozens of shortcuts in my text editor for creating gratuitous unicode!
2013-03-27 04:19:44	donri	\o/
2013-03-27 04:19:50	sproingie	<Multi_key> <a> <r> <r>             : "☠" U2620 # SKULL AND CROSSBONES
2013-03-27 04:20:01	Cale	The actual rule for variable name length is that the lengths of variable names should grow with the size of the scope in which the variable is bound, and shrink with the frequency of use.
2013-03-27 04:20:04	donri	i bet you write agda code
2013-03-27 04:20:10	arkeet	@arr
2013-03-27 04:20:10	lambdabot	Avast!
2013-03-27 04:21:03	--	[[zzz]] is now known as [[zz]]
2013-03-27 04:21:11	Cale	So, if you have something which only scopes over one line, one letter is enough, because its point of definition is always going to be in view and in recent memory at each point of usage.
2013-03-27 04:21:16	cschneid	Cale: good rule of thumb. So a var that's only bound for that line can easily be a single letter, but a global "constant" variable might need to be a full thingWithCamelCase
2013-03-27 04:21:19	cschneid	?
2013-03-27 04:21:24	Cale	yeah
2013-03-27 04:21:24	danharaj	Cale: don't forget how polymorphic it is
2013-03-27 04:21:29	cmccann	donri: here take a look http://hpaste.org/75848
2013-03-27 04:21:34	-->	skyflash (~skyflash@216.21.138.13) has joined #haskell
2013-03-27 04:21:51	<--	agumonke1 (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 252 seconds)
2013-03-27 04:22:27	Cale	If you have something which scopes over the entire program, but you use it constantly, it's also okay for it to have a short name.
2013-03-27 04:22:43	<--	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 04:23:00	cmccann	Cale: is that why you call fmap (.)?
2013-03-27 04:23:05	Cale	ehehe
2013-03-27 04:23:14	Cale	Well, that's part of the reason I like that
2013-03-27 04:23:23	Cale	over, say, blessing Control.Category
2013-03-27 04:23:31	cmccann	that is true
2013-03-27 04:23:31	donri	cmccann: you've shown me this before :)
2013-03-27 04:23:41	cmccann	donri: hahaha yeah that was an old hpaste
2013-03-27 04:23:48	--	pdxleif_away is now known as pdxleif
2013-03-27 04:23:53	donri	ah same paste even
2013-03-27 04:24:24	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 04:24:27	cmccann	clearly "snowman=☃" is the most important one
2013-03-27 04:24:29	<--	rsampaio (~rodrigo@189.121.226.43) has quit (Quit: Leaving)
2013-03-27 04:24:35	<--	skyflash (~skyflash@216.21.138.13) has quit (Remote host closed the connection)
2013-03-27 04:25:12	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-27 04:26:07	--	pdxleif is now known as pdxleif_away
2013-03-27 04:26:13	sproingie	the snowman is really underrepresented in mathematical notation
2013-03-27 04:26:23	cmccann	it's a valid Haskell identifier
2013-03-27 04:26:25	cmccann	just sayin'
2013-03-27 04:26:36	donri	and domain name
2013-03-27 04:26:46	-->	rsampaio (~rodrigo@189.121.226.43) has joined #haskell
2013-03-27 04:27:03	<--	bradleya_ (~brad@110.150.226.241) has quit (Read error: Connection reset by peer)
2013-03-27 04:27:29	<--	earspliT (~earsplit@sub115-210.bucknell.edu) has quit (Quit: Lost terminal)
2013-03-27 04:27:30	<--	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-27 04:27:55	-->	LowPotential (~user@CPE0026f31f38c8-CM0026f31f38c5.cpe.net.cable.rogers.com) has joined #haskell
2013-03-27 04:28:38	TravisD	in Control.Monad.Primitive, the type of primitive is: "primitive :: (State# (PrimState m) -> (#State# (PrimState m), a#)) -> m a"
2013-03-27 04:28:41	TravisD	what are all the #'s?
2013-03-27 04:28:52	arkeet	they are characters
2013-03-27 04:29:00	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 264 seconds)
2013-03-27 04:29:06	danharaj	magic hashes
2013-03-27 04:29:14	TravisD	heh, arkeet
2013-03-27 04:29:21	arkeet	conventionally they're put in names for things that deal with unboxed stuff
2013-03-27 04:29:46	TravisD	so State# is just a type?
2013-03-27 04:29:49	arkeet	sure.
2013-03-27 04:30:07	arkeet	also that last bit is (# State# (PrimState m), a #)
2013-03-27 04:30:11	arkeet	(# , #) is an unboxed tuple
2013-03-27 04:30:20	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-03-27 04:30:26	TravisD	mh, I see
2013-03-27 04:31:25	LowPotential	Hi everyone. I've been learning Haskell off and on for a few years, and I wrote a small interactive RPN calculator. I'm trying to write idiomatic Haskell. Any tips for improving the code? http://hpaste.org/84700
2013-03-27 04:31:37	-->	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has joined #haskell
2013-03-27 04:31:41	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 245 seconds)
2013-03-27 04:32:57	-->	Polish (~Polish@d58-111-175-154.meb802.vic.optusnet.com.au) has joined #haskell
2013-03-27 04:33:37	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-27 04:34:05	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 04:35:09	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-27 04:35:13	arkeet	LowPotential: a few things can be shortened I guess.
2013-03-27 04:35:23	arkeet	push x = modify (x:)
2013-03-27 04:35:38	arkeet	assuming ErrorT has a MonadState instance.
2013-03-27 04:35:49	arkeet	(otherwise you can lift modify, I suppose)
2013-03-27 04:35:52	ivanm	arkeet: need to use the non-Trans version of ErrorT
2013-03-27 04:36:00	-->	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has joined #haskell
2013-03-27 04:36:05	arkeet	well something.
2013-03-27 04:36:10	arkeet	duplicate = top >>= push
2013-03-27 04:36:19	ivanm	it'd need to be lift . modify $ (x:)
2013-03-27 04:36:21	<--	Polish (~Polish@d58-111-175-154.meb802.vic.optusnet.com.au) has quit (Remote host closed the connection)
2013-03-27 04:36:28	ivanm	the "return ()" there is redundant as-is
2013-03-27 04:36:32	arkeet	it is.
2013-03-27 04:37:11	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 04:37:20	 *	hackagebot tuple-lenses 0.1.0.0 - Stock FieldN combos and generators  http://hackage.haskell.org/package/tuple-lenses-0.1.0.0 (JonathanFischoff)
2013-03-27 04:37:29	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 246 seconds)
2013-03-27 04:37:30	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-27 04:37:35	ivanm	my browser just froze on me again so I can't check whether this makes sense, but consider using maybe + listToMaybe for pop
2013-03-27 04:37:46	LowPotential	ivanm arkeet: Nice suggestions. Thanks!
2013-03-27 04:38:35	ivanm	OK, can't use maybe and listToMaybe for pop
2013-03-27 04:38:42	LowPotential	The "case" statement on 117 is sort of bothering me. Is there a better way to accomplish that?
2013-03-27 04:39:13	ivanm	you could use the either combinator...
2013-03-27 04:39:43	ivanm	might be able to clean up pop if you use the the LambdaCase language extension
2013-03-27 04:39:50	arkeet	no
2013-03-27 04:40:00	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: (quit))
2013-03-27 04:40:00	arkeet	:c
2013-03-27 04:40:15	ivanm	applyBinaryOp op = liftM2 op pop pop
2013-03-27 04:40:18	-->	feliperosa (~felipe@189-13-136-254.user.veloxzone.com.br) has joined #haskell
2013-03-27 04:40:26	-->	Targen (~iguana@200.8.226.118) has joined #haskell
2013-03-27 04:40:27	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-27 04:40:34	arkeet	I'm sure we can do better than two cases there.
2013-03-27 04:40:54	ivanm	arkeet: sure you could... write a function for the Left case, and then do `either foo (return ())'
2013-03-27 04:41:01	arkeet	sure
2013-03-27 04:41:05	arkeet	with a const there
2013-03-27 04:41:19	ivanm	oh, right
2013-03-27 04:41:27	arkeet	but something like
2013-03-27 04:41:29	arkeet	:t catchError
2013-03-27 04:41:31	lambdabot	MonadError e m => m a -> (e -> m a) -> m a
2013-03-27 04:41:39	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-03-27 04:41:46	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 04:41:55	arkeet	hmm
2013-03-27 04:42:12	ivanm	applyUnaryOp = (<$> pop)
2013-03-27 04:42:20	 *	hackagebot tuple-lenses 0.1.0.1 - Stock FieldN combos and generators  http://hackage.haskell.org/package/tuple-lenses-0.1.0.1 (JonathanFischoff)
2013-03-27 04:42:27	ivanm	oh, that's not right... need to push it again
2013-03-27 04:42:29	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 248 seconds)
2013-03-27 04:42:49	ivanm	applyUnaryOp op = push =<< (op <$> pop)
2013-03-27 04:42:55	-->	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-27 04:42:59	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 04:43:01	ivanm	applyBinaryOp op = push =<< liftM2 op pop pop
2013-03-27 04:43:07	-->	ben_d (~muus@131.252.167.111) has joined #haskell
2013-03-27 04:43:08	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Remote host closed the connection)
2013-03-27 04:43:17	 *	ivanm has to run for a tute
2013-03-27 04:43:23	LowPotential	I can tell that neither of you like "do". Has it sort of gone out of favor in the last few years?
2013-03-27 04:43:35	LowPotential	ivan: Thanks!
2013-03-27 04:43:37	arkeet	do is fine for longer things. :p
2013-03-27 04:43:46	arkeet	I wouldn't write mainLoop without it.
2013-03-27 04:43:51	-->	notdan_ (~h@ppp91-79-115-5.pppoe.mtu-net.ru) has joined #haskell
2013-03-27 04:44:50	arkeet	but for 1- or 2-line things I probably wouldn't use it.
2013-03-27 04:44:53	<--	cdidd (~cdidd@95-27-40-143.broadband.corbina.ru) has quit (Ping timeout: 240 seconds)
2013-03-27 04:44:58	arkeet	up to you
2013-03-27 04:46:02	arkeet	this is just me being picky, but I'd align the = signs in the definition of fromString. :p
2013-03-27 04:46:51	arkeet	I think I'd move hFlush into showPrompt.
2013-03-27 04:47:23	arkeet	or maybe factor out the whole prompt + getLine thing into its own action.
2013-03-27 04:47:24	<--	notdan (~h@ppp91-79-119-166.pppoe.mtu-net.ru) has quit (Ping timeout: 256 seconds)
2013-03-27 04:47:27	<--	feliperosa (~felipe@189-13-136-254.user.veloxzone.com.br) has quit (Quit: Leaving)
2013-03-27 04:47:49	-->	Polish (~Polish@d58-111-175-154.meb802.vic.optusnet.com.au) has joined #haskell
2013-03-27 04:48:32	<--	b_jonas (~x@russell2.math.bme.hu) has quit (Read error: Operation timed out)
2013-03-27 04:48:46	arkeet	looks fine overall.
2013-03-27 04:48:48	-->	b_jonas (~x@russell2.math.bme.hu) has joined #haskell
2013-03-27 04:49:07	arkeet	I better go, battery is running out. :)
2013-03-27 04:49:57	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 04:50:27	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-27 04:50:47	-->	trescenzi (~trescenzi@2620:91:0:163:5db6:b964:9511:2c73) has joined #haskell
2013-03-27 04:51:31	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-27 04:52:20	 *	hackagebot lens 3.9.0.1 - Lenses, Folds and Traversals  http://hackage.haskell.org/package/lens-3.9.0.1 (EdwardKmett)
2013-03-27 04:53:10	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 04:55:01	<--	trescenzi (~trescenzi@2620:91:0:163:5db6:b964:9511:2c73) has quit (Ping timeout: 245 seconds)
2013-03-27 04:56:59	-->	hajimeho_ (~hajimehos@209.118.182.66) has joined #haskell
2013-03-27 04:57:01	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-27 04:57:03	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-27 04:58:17	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Read error: Operation timed out)
2013-03-27 04:58:52	<--	joar (~joar@fsf/member/jwandborg) has quit (Quit: leaving)
2013-03-27 04:59:14	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Client Quit)
2013-03-27 05:00:33	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-27 05:00:53	-->	trescenzi (~trescenzi@2620:91:0:163:41e7:a993:112e:e283) has joined #haskell
2013-03-27 05:00:54	LowPotential	arkeet: Just stepped away from the computer for a second. Thanks for all the feedback.
2013-03-27 05:01:24	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-03-27 05:01:34	<--	sellout (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-03-27 05:02:17	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-27 05:02:37	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-27 05:02:50	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-27 05:03:13	-->	Shin-LaC (~LaC@c-24-5-0-20.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 05:03:56	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 05:04:42	-->	Ke (jkarlson@pdpc/supporter/active/ke) has joined #haskell
2013-03-27 05:05:15	William_	hi
2013-03-27 05:05:27	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-27 05:05:39	jfischoff	hi William_
2013-03-27 05:05:55	<--	trescenzi (~trescenzi@2620:91:0:163:41e7:a993:112e:e283) has quit (Ping timeout: 264 seconds)
2013-03-27 05:05:58	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-03-27 05:06:32	William_	whats the most advanced graphics thats possible with haskell?
2013-03-27 05:06:35	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-27 05:06:42	<--	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has quit (Ping timeout: 264 seconds)
2013-03-27 05:06:52	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-27 05:06:56	elliott	that's a pretty vague question :P
2013-03-27 05:07:00	Cale	William_: Well, there's OpenGL and Cairo bindings...
2013-03-27 05:07:07	<--	k00mi (~koomi@dslb-188-099-034-167.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-27 05:07:20	Cale	"advanced graphics" is pretty vague, yeah :)
2013-03-27 05:07:23	centrinia_	William_, Quake 3 map viewer!
2013-03-27 05:07:27	Cale	hehe
2013-03-27 05:07:30	Cale	There is that
2013-03-27 05:07:31	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-03-27 05:07:38	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-27 05:07:57	centrinia_	http://www.haskell.org/haskellwiki/Frag
2013-03-27 05:08:17	jfischoff	William_: And if you want to make a raytracer, a pure functional languages has some parallelization advantages
2013-03-27 05:08:18	William_	ok
2013-03-27 05:08:23	Cale	Frag is a nice little proof of concept that was thrown together apparently in about a week
2013-03-27 05:08:42	Cale	(though it may have received a little attention since then, I don't know)
2013-03-27 05:08:57	William_	idk i want to make a game but I want it to work with a controller
2013-03-27 05:09:29	-->	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has joined #haskell
2013-03-27 05:09:35	William_	maybe xbox or something
2013-03-27 05:10:00	jfischoff	compiling for the xbox might be an issue
2013-03-27 05:10:06	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-27 05:10:10	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-27 05:10:24	centrinia_	Cale, it claims to work with ghc-6.8 but was originally written in 2005.
2013-03-27 05:10:26	Rants	What would be considered to be 'advanced' types?
2013-03-27 05:10:28	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 05:10:49	Cale	Rants: heh, depends on your perspective
2013-03-27 05:10:51	William_	modern things like pixel shader and stuff
2013-03-27 05:10:54	<--	`^_^v (~nycs@ool-4573da18.dyn.optonline.net) has quit (Quit: This computer has gone to sleep)
2013-03-27 05:10:55	Cale	Rants: Do you have some context?
2013-03-27 05:11:08	William_	pixel shader 3.0
2013-03-27 05:11:16	centrinia_	William_, sure. You can bind shaders with OpenGL.
2013-03-27 05:11:35	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 256 seconds)
2013-03-27 05:11:54	William_	does using openGL make  it impure?
2013-03-27 05:11:58	Cale	William_: you might be interested in http://hackage.haskell.org/package/GPipe-1.1.7
2013-03-27 05:12:16	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-27 05:12:21	jfischoff	Cale: have you used it? I'm curious, I haven't myself
2013-03-27 05:12:38	Rants	Cale: More advanced than what would be covered in the first couple of weeks in a programming languages class
2013-03-27 05:12:39	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 05:12:48	Cale	jfischoff: I haven't used it, but I've worked with one of the people responsible for it.
2013-03-27 05:13:01	elliott	William_: no more than doing any other kind of IO
2013-03-27 05:13:26	jfischoff	Cale: cool
2013-03-27 05:13:36	William_	ok ty
2013-03-27 05:13:39	William_	bbiab
2013-03-27 05:13:45	Cale	Rants: Well, does that include type classes? I guess that most extensions to Haskell 98 wouldn't be included in such coverage, but depending on your focus, you might touch on those.
2013-03-27 05:13:58	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-27 05:14:06	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-27 05:14:07	Cale	Rants: Or, beyond what's available in Haskell implementations, you have dependent type systems
2013-03-27 05:14:37	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 05:14:38	Rants	I think they covered haskell type classes
2013-03-27 05:15:10	Cale	Yeah, so there are a lot of extensions to the functionality of typeclasses
2013-03-27 05:15:44	-->	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has joined #haskell
2013-03-27 05:15:50	<--	kvey (~kvey@cpepool1gcmts2-212.sanbrunocable.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-27 05:15:53	Cale	For example, class associated types / type and data families, and multiparameter type classes, and functional dependencies
2013-03-27 05:16:20	-->	edeast_ (~chatzilla@24.114.26.90) has joined #haskell
2013-03-27 05:16:41	<--	ben_d (~muus@131.252.167.111) has quit (Ping timeout: 245 seconds)
2013-03-27 05:16:45	Cale	http://www.haskell.org/ghc/docs/latest/html/users_guide/ghc-language-features.html -- you might be interested to look through this
2013-03-27 05:17:22	Cale	(that's the section of the GHC user's guide on all the supported language extensions)
2013-03-27 05:17:39	Rants	actually yeah that's what I was looking for
2013-03-27 05:17:51	-->	plutoniix (~plutoniix@ppp-171-97-163-25.revip8.asianet.co.th) has joined #haskell
2013-03-27 05:18:06	Rants	It's been a while since I navigated that section of haskell.org
2013-03-27 05:18:07	Cale	You also have things like GADTs and type equality constraints
2013-03-27 05:18:39	cmccann	jfischoff: hey were you the one working on some geometric algebra whatnot stuff at some point in the vaguely described past?
2013-03-27 05:18:39	Cale	Higher rank polymorphism (which gives functions the ability to demand polymorphic arguments)
2013-03-27 05:18:57	<--	edeast (~chatzilla@d75-158-1-152.abhsia.telus.net) has quit (Ping timeout: 256 seconds)
2013-03-27 05:18:59	--	edeast_ is now known as edeast
2013-03-27 05:19:29	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-03-27 05:19:56	jfischoff	cmccann: yeah the update is after a conversation with you I looked into Singular for doing the symbolic manipulation. I now think that wrapping Singular is a good idea in general
2013-03-27 05:19:58	<--	fragamus (~textual@adsl-71-142-60-12.dsl.scrm01.pacbell.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 05:20:18	jfischoff	cmccann: http://www.singular.uni-kl.de/
2013-03-27 05:20:19	Cale	Existential types, which give you data types which can (partially) "forget" the types of their contents, allowing various things to be stored, so long as they, for instance, belong to some type class, or have the functions which act on them packaged inside the data structure with them.
2013-03-27 05:20:30	-->	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-27 05:20:32	-->	sw2wolf (~czsq888@171.216.96.202) has joined #haskell
2013-03-27 05:21:24	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-03-27 05:21:25	Rants	Cool, thanks
2013-03-27 05:21:29	jfischoff	cmccann: it is just a reasonably efficient algebra library that can handle clifford algebras and more esoteric algebras
2013-03-27 05:21:40	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-27 05:21:53	cmccann	jfischoff: hm
2013-03-27 05:22:04	cmccann	that probably precludes a pure API though, doesn't it?
2013-03-27 05:22:14	Rants	at this point I'm just trying to think of a way to present it that would be most accessible to these people
2013-03-27 05:22:17	Cale	I like their logo
2013-03-27 05:22:52	cmccann	it's an appropriate logo
2013-03-27 05:23:01	wavewave	jfischoff: i'm sorry I just miss the discussion. what library are you talking about?
2013-03-27 05:23:21	jfischoff	cmccann: I think you do it monadically well. You have to setup a algebra you are operating in first
2013-03-27 05:23:24	cmccann	wavewave: http://www.singular.uni-kl.de/
2013-03-27 05:23:46	-->	Jesin (~Jessin_@Dyn141098.cc.lehigh.edu) has joined #haskell
2013-03-27 05:24:00	wavewave	cmccann: ah.. yeah. i know it. thanks.
2013-03-27 05:24:03	jfischoff	I'm there might be a better open source lib for symbolic algebra?, but that was best I could find.
2013-03-27 05:24:36	jfischoff	and the there are books to go a long with it
2013-03-27 05:24:44	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 05:24:57	cmccann	I was more interested in simple calculation rather than symbolic manipulation anyway
2013-03-27 05:25:14	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Operation timed out)
2013-03-27 05:25:17	Cale	It's kind of sad that practically every computer algebra system seems to have its own half-baked programming language implementation.
2013-03-27 05:25:25	jfischoff	cmccann: then you can use matrices pretty straight forwardly… one sec...
2013-03-27 05:25:40	cmccann	Cale: instead of sharing a common half-baked programming language implementation?
2013-03-27 05:25:41	wavewave	hmm .. it's much evolved after I saw it last time.
2013-03-27 05:25:42	--	pdxleif_away is now known as pdxleif
2013-03-27 05:25:55	Cale	cmccann: haha
2013-03-27 05:26:00	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 05:26:22	<--	sw2wolf (~czsq888@171.216.96.202) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-27 05:26:47	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-27 05:26:48	wavewave	I glanced at it when I needed to find Grobner basis of polynomial systems.
2013-03-27 05:27:01	Rants	everyone knows mathematica is the best programming language ever written
2013-03-27 05:27:20	monochrom	every time an application catches on, people must demand "but now we want it to be scriptable!" therefore, they must evolve (repeat: evolve) another programming language.
2013-03-27 05:27:57	wavewave	i do not like mathematica much.
2013-03-27 05:28:06	augur	Cale: what do you mean its own ... ?
2013-03-27 05:28:16	Rants	THE BEST
2013-03-27 05:28:33	Kaidelong	monochrom: very true, although some people learn their lesson and design things to be scriptable from the start
2013-03-27 05:28:42	Cale	augur: They're generally not libraries for general purpose programming languages.
2013-03-27 05:28:46	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 245 seconds)
2013-03-27 05:28:51	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-27 05:29:14	wavewave	it has good man-power covering many mathematical disciplines though.
2013-03-27 05:30:03	wavewave	I would like to see DoCon revive..
2013-03-27 05:30:04	Cale	augur: Instead, they consist of a new programming language which is usually somewhat weak, but with a handful of syntactic conveniences, together with an extensive library built on top.
2013-03-27 05:30:21	augur	weak in what sense
2013-03-27 05:30:42	Cale	Weak in the sense of not having a lot of useful features for general programming.
2013-03-27 05:30:49	augur	ah ok.
2013-03-27 05:30:58	Cale	Usually a halfassed type system if any
2013-03-27 05:31:07	jfischoff	cmccann: it is described in this book http://amzn.to/XceQ7g there is a pdf version on the web somewhere but I couldn't find it. Which is also captured here http://bit.ly/YDy7h7 but way more succinctly
2013-03-27 05:31:19	wavewave	it's too good to be just abandoned.
2013-03-27 05:31:26	Cale	Maybe no module system at all
2013-03-27 05:31:36	Rants	MATHEMATICA SUPPORTS PROCEDURAL, FUNCTIONAL, AAAND OBJECT ORIENTED PROGRAMMING also yeah the programming language is pretty weak and there's not much of a type system to speak of
2013-03-27 05:32:19	cmccann	I was under the impression that mathematica mostly supported mathematica-oriented programming
2013-03-27 05:32:38	tgeeky	wolfram demonstrations is nice
2013-03-27 05:32:52	Rants	hahaha
2013-03-27 05:33:38	cmccann	jfischoff: ah yeah I've seen that
2013-03-27 05:33:46	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 245 seconds)
2013-03-27 05:34:16	Cale	Everyone knows that Stephen Wolfram is at least twice as smart as the next smartest human being, and is responsible for completely transforming science as we know it.
2013-03-27 05:34:35	cmccann	Cale: specifically, transforming it into mathematica
2013-03-27 05:34:48	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 05:35:20	Shin-LaC	show me where Stephen Wolfram touched you on this doll
2013-03-27 05:35:34	tgeeky	I think it's unfair to judge him that way, because I wouldn't want my projects being so directly connected to my hubris and other moral scruples of mine.
2013-03-27 05:35:36	Rants	but, see, a good number of mathematicians wouldn't want a proper type system
2013-03-27 05:35:45	Rants	the smart ones would, once you showed it to them
2013-03-27 05:35:46	cmccann	wavewave: is DoCon even on hackage?
2013-03-27 05:36:00	wavewave	cmccann: i don't think so.. shame.
2013-03-27 05:36:06	Rants	buuuuut
2013-03-27 05:36:28	wavewave	cmccann: shall we make it available on hackage?
2013-03-27 05:36:43	-->	dukedave (~dukedave@ip68-109-181-31.ph.ph.cox.net) has joined #haskell
2013-03-27 05:36:48	tgeeky	my main objection to mathematica is that it didn't seem possible to me, to build a sense of trust in the correctness of the code into the code.
2013-03-27 05:37:12	cmccann	wavewave: it looks awfully abandoned... wonder if it even builds?
2013-03-27 05:37:22	Cale	Did you know that in 1982, Stephen Wolfram coined the term "complex systems research"?
2013-03-27 05:37:29	cmccann	that's got to be like a hundred GHC versions ago or something
2013-03-27 05:37:40	coppro	Cale: I hear he also invented science around that time
2013-03-27 05:37:45	<--	bananagram (~notabot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-27 05:37:52	<--	XexonixXexillion (~LudvikGal@130.56.84.8) has quit (Remote host closed the connection)
2013-03-27 05:37:54	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-27 05:38:06	cmccann	tgeeky: I'm pretty sure the poking fun at mathematica and wolfram are two separate things, being done on their own merits
2013-03-27 05:38:08	wavewave	cmccann: yeah... this is too bad.
2013-03-27 05:39:24	cmccann	wavewave: also, it seems to have a non-standard license which might be a problem for actual use
2013-03-27 05:39:34	-->	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-03-27 05:39:36	jfischoff	speaking of things that should be on hackage and aren't is this tensor lib: http://www.volkerschatz.com/haskell/tensor.hs
2013-03-27 05:40:15	--	pdxleif is now known as pdxleif_away
2013-03-27 05:40:54	--	pdxleif_away is now known as pdxleif
2013-03-27 05:41:26	wavewave	cmccann: exactly.. now I was looking at license.txt file.
2013-03-27 05:42:01	cmccann	wavewave: I suspect this would take a moderate amount of tinkering to get in working order on a modern GHC
2013-03-27 05:42:17	liyang	jfischoff: looks like it could do with more invariants built in to the type.
2013-03-27 05:42:17	wavewave	cmccann: even putting it on hackage with the name DoCon may be problematic.
2013-03-27 05:42:24	cmccann	might be worth getting in touch with the author as well, to ask about the license and whether he's doing anything with it these days
2013-03-27 05:42:35	copumpkin	liyang++
2013-03-27 05:42:48	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-27 05:42:54	copumpkin	I feel like that's the kind of thing you could make decently correct by construction in haskell with some cleverness
2013-03-27 05:43:02	copumpkin	and without going too crazy
2013-03-27 05:43:11	cmccann	and copumpkin makes a dynamic entry to express support for type-enforced invariants
2013-03-27 05:43:17	cmccann	a shocking twist
2013-03-27 05:43:18	copumpkin	lol
2013-03-27 05:43:54	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-27 05:44:10	jfischoff	liyang: yeah I'm sure it needs a lot clean up.
2013-03-27 05:44:18	wavewave	good symbolic computation libraries are where haskell can excel but suprisingly few  libraries exist
2013-03-27 05:44:43	cmccann	wavewave: probably a matter of it still being a lot of work to implement despite Haskell being well suited to it
2013-03-27 05:44:53	wavewave	cmccann: definitely.
2013-03-27 05:45:03	cmccann	plus a lot of stuff already exists
2013-03-27 05:45:14	jfischoff	wavewave: That seems like step two. Step one is too wrap an existing library from c++/c land
2013-03-27 05:45:31	liyang	You're probably better off not looking at that and starting from scratch.
2013-03-27 05:45:32	cmccann	and "reinventing the wheel in Haskell" is not the best reason for writing a complicated library
2013-03-27 05:46:15	wavewave	it's not exactly reinventing the wheel  though in my opinion.
2013-03-27 05:46:16	<--	Jesin (~Jessin_@Dyn141098.cc.lehigh.edu) has quit (Read error: Connection reset by peer)
2013-03-27 05:46:29	wavewave	since almost all such libraries are written in untyped language.
2013-03-27 05:46:51	wavewave	or just C API for a specific computation.
2013-03-27 05:46:53	cmccann	it's inventing a new wheel that is like the old one except with better traction for icy roads
2013-03-27 05:47:29	wavewave	CAS in strongly typed language is something worth to make.
2013-03-27 05:47:45	wavewave	but anyway it's not very simple at all.
2013-03-27 05:47:52	cmccann	yeah
2013-03-27 05:48:06	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Remote host closed the connection)
2013-03-27 05:48:26	cmccann	also there's the matter of would anyone want to use it? might be a hard sell to people used to the CAS with crappy types or none at all
2013-03-27 05:48:33	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-27 05:48:37	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 05:48:54	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 256 seconds)
2013-03-27 05:49:02	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-03-27 05:49:09	-->	gwern (~gwern@pool-108-48-209-134.washdc.east.verizon.net) has joined #haskell
2013-03-27 05:49:09	<--	gwern (~gwern@pool-108-48-209-134.washdc.east.verizon.net) has quit (Changing host)
2013-03-27 05:49:09	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-27 05:49:20	wavewave	cmccann: yeah.. that's true.. my field is already filled with mathematica people who wouldn't change it anyway.
2013-03-27 05:49:32	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 05:49:50	cmccann	you might be able to win people over with time
2013-03-27 05:49:56	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-27 05:50:43	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-27 05:51:09	wavewave	we can start some from small things, like clifford algebra, group representations or computational commutative algebra
2013-03-27 05:51:18	wavewave	I like the approach by HaskellForMath
2013-03-27 05:51:40	cmccann	unfortunately I'm not familiar enough with how CAS are actually used in practice to know where to start on something like that
2013-03-27 05:51:41	--	amatsu is now known as amatsu\idle
2013-03-27 05:51:52	<--	nade (~nade@74.215.14.61) has quit (Quit: nade)
2013-03-27 05:51:52	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-03-27 05:51:56	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-27 05:52:10	wavewave	oh.. HaskellForMaths has been grown up quite much. nice.
2013-03-27 05:52:15	-->	Jesin (~Jessin_@Dyn141098.cc.lehigh.edu) has joined #haskell
2013-03-27 05:52:54	cmccann	unfortunately jfischoff seems to have disappeared, but he's been interested in clifford algebra stuff
2013-03-27 05:52:57	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 05:53:03	cmccann	which is how this conversation started
2013-03-27 05:55:41	wavewave	hmm. HaskellForMaths looks very good. Seem to be a good starting point where to add on top of
2013-03-27 05:55:41	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-27 05:56:43	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-27 05:56:59	<--	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-27 05:57:26	-->	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 05:57:51	cmccann	wavewave: what kind of stuff would you want to add?
2013-03-27 05:59:01	wavewave	cmccann : for my purpose, some differential geometry stuff and Lie group stuff maybe.
2013-03-27 05:59:02	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 05:59:23	<--	Bwild (~irc@netblock-75-79-22-130.dslextreme.com) has quit (Ping timeout: 260 seconds)
2013-03-27 06:00:38	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 06:00:39	-->	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-27 06:01:09	<--	MnO2 (~MnO2@nat/yahoo/x-wzncdefizustbkab) has quit (Quit: MnO2)
2013-03-27 06:01:15	cmccann	hm... looks like HaskellForMaths hasn't been updated for a while
2013-03-27 06:01:37	--	amatsu\idle is now known as amatsu
2013-03-27 06:01:40	wavewave	prabably the author is busy these day.
2013-03-27 06:01:49	-->	kulakowski (~George@140.247.0.2) has joined #haskell
2013-03-27 06:01:58	cmccann	most likely.
2013-03-27 06:02:07	cmccann	hopefully he hasn't abandoned it
2013-03-27 06:02:20	-->	sysopfb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 06:02:55	-->	MnO2 (~MnO2@nat/yahoo/x-vgqzvfgsxhzxqeqg) has joined #haskell
2013-03-27 06:04:32	LowPotential	xb
2013-03-27 06:04:42	LowPotential	Oops. Typo.
2013-03-27 06:04:53	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-27 06:05:46	<--	mgccl (62f826a3@gateway/web/freenode/ip.98.248.38.163) has quit (Quit: Page closed)
2013-03-27 06:05:48	<--	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-27 06:06:32	<--	kulakowski (~George@140.247.0.2) has quit (Remote host closed the connection)
2013-03-27 06:08:21	-->	nade (~nade@74.215.14.61) has joined #haskell
2013-03-27 06:09:29	<--	DigitalK1wi (~kiwi@ip68-13-179-79.om.om.cox.net) has quit (Ping timeout: 255 seconds)
2013-03-27 06:09:59	-->	csakatok_ (~csakatoku@EM117-55-68-51.emobile.ad.jp) has joined #haskell
2013-03-27 06:11:35	<--	csakatoku (~csakatoku@EM117-55-68-141.emobile.ad.jp) has quit (Read error: Connection reset by peer)
2013-03-27 06:11:36	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-27 06:12:41	<--	dukedave (~dukedave@ip68-109-181-31.ph.ph.cox.net) has quit (Ping timeout: 246 seconds)
2013-03-27 06:14:26	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 06:14:55	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 06:15:02	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 06:15:13	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 06:15:24	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-27 06:16:09	xunatai	so, wait, is there any alternative to dealing with state other than records flying all over the place?
2013-03-27 06:16:49	--	pdxleif is now known as pdxleif_away
2013-03-27 06:17:32	--	Watcher7 is now known as Watcher7|off
2013-03-27 06:18:01	wavewave	xunatai : try to use lens
2013-03-27 06:18:02	Rants	STATE MONAD
2013-03-27 06:18:14	xunatai	ah yes, lens!
2013-03-27 06:18:21	xunatai	i was trying to remember the name all day
2013-03-27 06:18:52	xunatai	rants, do state monads make even the record stuff easy to deal with?
2013-03-27 06:19:44	Rants	isn't lens basically a state monad with certain features?
2013-03-27 06:19:48	xunatai	hm
2013-03-27 06:20:01	Ralith	no.
2013-03-27 06:20:27	Ralith	the State monad is useful, and lens is useful, and they are different things, and neither of them subsume records
2013-03-27 06:20:31	-->	rckxtra (~xtra@c-98-192-44-241.hsd1.ga.comcast.net) has joined #haskell
2013-03-27 06:20:39	Ralith	(though lens is capable of making records nicer to use)
2013-03-27 06:20:47	arkeet	lenses are actually coalgebras for a certain comonad.
2013-03-27 06:20:48	arkeet	:>
2013-03-27 06:21:14	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 06:21:20	arkeet	incidentally, it's the comonad coming from the same adjunction that gives the state monad.
2013-03-27 06:21:37	Ralith	xunatai: if you aren't using the State monad, and you are troubled by the need to pass things in/out all over the place, using the State monad will probably resolve your immediate concern.
2013-03-27 06:21:46	arkeet	but please ignore this abstract nonsense
2013-03-27 06:22:00	xunatai	thanks ralith
2013-03-27 06:22:07	Rants	I NEVER IGNORE ABSTRACT NONSENSE
2013-03-27 06:22:14	xunatai	well
2013-03-27 06:22:16	arkeet	lens does make the State monad nicer to work with, though ;)
2013-03-27 06:22:18	elliott	or caps locks?
2013-03-27 06:22:26	Ralith	arkeet: sure, but one thing at a time.
2013-03-27 06:22:27	cmccann	elliott: CAPS LOCK IS AWESOME OK
2013-03-27 06:22:30	xunatai	it's not so much that i ignore the abstract nonsense, it's that i can't make any sense of it!
2013-03-27 06:22:42	elliott	cmccann: #cobol
2013-03-27 06:22:56	arkeet	Lens' s a = s -> Context' s a
2013-03-27 06:22:59	Rants	I'm not hitting caps lock, I'm holding down the Shift key
2013-03-27 06:23:02	arkeet	Context' s is the comonad here.
2013-03-27 06:23:05	cmccann	elliott: BUT HOLDING DOWN SHIFT AND TYPING CAPS THAT WAY IS EVEN MORE AWESOME.
2013-03-27 06:23:05	xunatai	should i learn state monads, or lenses first?
2013-03-27 06:23:11	cmccann	caps lock is for lazy people
2013-03-27 06:23:30	elliott	arkeet: that definition of Lens is awful because it doesn't give you prisms.
2013-03-27 06:23:30	elliott	:(
2013-03-27 06:23:33	 *	BMeph_ thinks fondly of programming in COBOL...especially when dealing with C++ APIs.... ;þ
2013-03-27 06:23:34	arkeet	sure.
2013-03-27 06:23:47	Ralith	xunatai: you want the State monad.
2013-03-27 06:23:52	xunatai	okay
2013-03-27 06:23:55	<--	hiratara (~hiratara@g039096.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 264 seconds)
2013-03-27 06:24:08	cmccann	BMeph_: have you seen the trendy new web framework for cobol?
2013-03-27 06:24:10	cmccann	http://www.coboloncogs.org/INDEX.HTM
2013-03-27 06:24:12	Ralith	xunatai: lens is useful but it is not the solution to your problem.
2013-03-27 06:24:14	arkeet	the State monad is a very good example to learn about monads with.
2013-03-27 06:24:29	xunatai	i'm in that annoying limbo where i understand monads, /sort/ of, but not enough to effectively apply them, but i can tell that it's very annoying to do anything without them
2013-03-27 06:24:35	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-27 06:24:43	Ralith	applying the state monad may well help you overcome that!
2013-03-27 06:24:48	Cale	It's not that annoying to do stuff without them
2013-03-27 06:24:56	<--	ryjm (~jake@cpe-69-200-242-47.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-03-27 06:25:01	xunatai	depends on what you're doing
2013-03-27 06:25:05	Cale	It's just that there are a fair number of libraries out there which happen to be monads
2013-03-27 06:25:07	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 06:25:07	Rants	a good thing to do for practice is write your own state monad
2013-03-27 06:25:10	BMeph_	cmccann: I'd rather have had COBOL on cobblestones, but, eh, beggars, choosers, yadda-yadda. :)
2013-03-27 06:25:19	cmccann	BMeph_: that site is hilarious though
2013-03-27 06:25:26	Cale	So... it's useful to know about monads in general to be able to use all those libraries a little better.
2013-03-27 06:25:29	xunatai	Rants, i was actually thinking exactly that
2013-03-27 06:25:33	xunatai	thanks for reminding me
2013-03-27 06:26:12	Ralith	Cale: manually threading state, for example, seems pretty annoying to me.
2013-03-27 06:26:20	Ralith	assuming you have to do much of it
2013-03-27 06:26:24	Cale	Ralith: well, occasionally, sure
2013-03-27 06:26:44	xunatai	i'm making a small game, with a good chunk of statey stuff
2013-03-27 06:26:48	Cale	Though to be honest, explicit parameter passing is a lot better than Reader a lot of the time
2013-03-27 06:27:10	BMeph_	I like to think of Manads as colors - it's not so much "understanding" them as it is understanding how to use certain ones, and them figuring out what they all have in common. :)
2013-03-27 06:27:22	 *	hackagebot honk 1.1.1.2 - Cross-platform interface to the PC speaker.  http://hackage.haskell.org/package/honk-1.1.1.2 (ChrisWong)
2013-03-27 06:27:24	BMeph_	Oops - *Monads
2013-03-27 06:27:33	Cale	and if you're in IO already, sending an IORef (or half of one, i.e. partially applied readIORef/writeIORef) is frequently nicer than StateT
2013-03-27 06:27:33	<--	LowPotential (~user@CPE0026f31f38c8-CM0026f31f38c5.cpe.net.cable.rogers.com) has quit (Ping timeout: 248 seconds)
2013-03-27 06:28:12	-->	hiratara (~hiratara@g038169.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-27 06:28:17	BMeph_	cmccann: I'll peruse, thanks. :)
2013-03-27 06:28:20	Cale	(unless you go to a lot of trouble)
2013-03-27 06:28:41	<--	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-27 06:28:51	cmccann	BMeph_: it's full of little jokes making fun of COBOL and RoR simultaneously
2013-03-27 06:28:55	cmccann	you really can't ask for more than that
2013-03-27 06:28:56	Ralith	StateT IO is a bit silly, yes
2013-03-27 06:29:27	Cale	People overuse some of the machinery which is available
2013-03-27 06:29:27	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 252 seconds)
2013-03-27 06:29:32	cmccann	pf, clearly you use the StateT to store the IORefs!
2013-03-27 06:29:45	Cale	cmccann: More likely ReaderT at least.
2013-03-27 06:29:48	BMeph_	cmccann: Oh, yeah? How about a site that makes fun of RoR and Drupal simultaneously? ;)
2013-03-27 06:29:57	Cale	but even then, you're paying a heavy tax to have to liftIO everything
2013-03-27 06:30:00	cmccann	Cale: but what if you need to, er, change the IORefs!
2013-03-27 06:30:15	-->	rsampaio_ (~rodrigo@189.121.226.43) has joined #haskell
2013-03-27 06:30:19	Cale	just to save on parameter passing
2013-03-27 06:30:20	cmccann	I actually like doing the ReaderT IO thing.
2013-03-27 06:30:33	cmccann	if I have enough stuff I want to keep around
2013-03-27 06:31:45	Cale	One thing I highly recommend though, is splitting the ends of an IORef by creating it at some top level and passing the partially applied read/write into different parts of a computation. This can also really help in a multithreaded setting especially if you later need to change the semantics of how that state is accessed.
2013-03-27 06:32:22	Cale	Or for example you can log the changes to the state really easily from that central location
2013-03-27 06:32:24	cmccann	Cale: sometimes I take that one step further and pass around things parameterized in the monad with read/write type signatures
2013-03-27 06:32:44	cmccann	so that the same code can work with different reference types
2013-03-27 06:32:52	cmccann	assuming it doesn't do any IO directly obviously
2013-03-27 06:33:00	--	pdxleif_away is now known as pdxleif
2013-03-27 06:33:09	Cale	well
2013-03-27 06:33:15	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 06:33:20	cmccann	though you can make putStrLn look like a "write" operation and such as well
2013-03-27 06:33:43	Cale	If something isn't really doing any IO, I'd start to question whether it wouldn't be better off written in some other less-stateful style.
2013-03-27 06:33:50	Cale	But yeah
2013-03-27 06:34:06	cmccann	usually it's because I have something doing input and output but not necessarily direct IO
2013-03-27 06:34:12	cmccann	as well as using references or whatever
2013-03-27 06:34:13	Cale	ah, yeah
2013-03-27 06:34:17	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 06:34:20	Cale	Also, have you seen MonadPrompt?
2013-03-27 06:34:29	Cale	It can be good for that sort of thing
2013-03-27 06:34:37	cmccann	and then parameterizing the whole thing and shoving it in a record so it can be State+lenses or IO or whatever else
2013-03-27 06:34:44	cmccann	I think so
2013-03-27 06:34:51	-->	glguy_ (~textual@unaffiliated/glguy) has joined #haskell
2013-03-27 06:35:02	-->	sw2wolf (~czsq888@171.216.96.202) has joined #haskell
2013-03-27 06:35:31	Cale	Basically, you get to create a GADT of primitives for your newly constructed monad, and then the parameters to the run function let you specify their exact semantics.
2013-03-27 06:35:39	cmccann	ah yeah
2013-03-27 06:35:58	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-03-27 06:36:25	cmccann	mostly I never used it because I started with a fixed monad and then refactored to get the parameterized style, heh
2013-03-27 06:36:35	cmccann	if I was thinking ahead and wanted that kind of thing it would make sense
2013-03-27 06:37:08	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Read error: Connection reset by peer)
2013-03-27 06:37:24	cmccann	it amounts to mostly the same thing anyhow
2013-03-27 06:37:27	sw2wolf	@wn GADT
2013-03-27 06:37:28	lambdabot	No match for "GADT".
2013-03-27 06:38:33	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 240 seconds)
2013-03-27 06:39:03	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell
2013-03-27 06:39:17	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-03-27 06:39:54	-->	bradleyayers (~brad@1.130.138.219) has joined #haskell
2013-03-27 06:41:47	cmccann	sw2wolf: Gratuitous Acronyms Demand Tribute
2013-03-27 06:41:48	cmccann	obviously
2013-03-27 06:42:14	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 06:42:42	--	boegel|zzz is now known as boegel
2013-03-27 06:42:55	-->	trep (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 06:43:06	Enigmagic	Grunt Axle Diminished Types
2013-03-27 06:43:13	<--	nsxt (~nsxt@c-68-45-12-237.hsd1.nj.comcast.net) has quit (Quit: Leaving)
2013-03-27 06:46:14	<--	sysopfb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Ping timeout: 257 seconds)
2013-03-27 06:46:41	<--	yabadaba (~altergnom@176.61.61.180) has quit
2013-03-27 06:48:08	-->	TravisD_ (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-27 06:48:28	<--	Shin-LaC (~LaC@c-24-5-0-20.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 06:48:32	-->	sysopfb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 06:50:50	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 246 seconds)
2013-03-27 06:50:52	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 06:50:54	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Ping timeout: 252 seconds)
2013-03-27 06:50:54	--	TravisD_ is now known as TravisD
2013-03-27 06:51:16	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-27 06:51:41	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 06:52:00	<--	trep (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-27 06:52:04	<--	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has quit (Ping timeout: 245 seconds)
2013-03-27 06:55:17	<--	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (Remote host closed the connection)
2013-03-27 06:56:02	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-27 06:56:40	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-27 06:56:42	<--	miclorb_ (~miclorb@ppp121-44-81-187.lns20.syd6.internode.on.net) has quit (Remote host closed the connection)
2013-03-27 06:57:09	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 06:57:46	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-27 06:57:46	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-27 06:57:46	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-27 06:58:32	--	koninkje is now known as koninkje_away
2013-03-27 07:00:51	-->	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has joined #haskell
2013-03-27 07:00:53	-->	trescenzi (~trescenzi@2620:91:0:163:edd2:55e7:1fa9:57b8) has joined #haskell
2013-03-27 07:01:01	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-27 07:01:54	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-27 07:04:15	<--	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has quit (Quit: Ex-Chat)
2013-03-27 07:04:32	<--	boegel (~boegel@109.130.128.122) has quit (Quit: Leaving)
2013-03-27 07:05:01	<--	trescenzi (~trescenzi@2620:91:0:163:edd2:55e7:1fa9:57b8) has quit (Ping timeout: 245 seconds)
2013-03-27 07:05:05	-->	knyppeldynan (~kristina@c213-89-19-165.bredband.comhem.se) has joined #haskell
2013-03-27 07:05:34	-->	Vicfred (~Futaba@187.206.119.1) has joined #haskell
2013-03-27 07:07:56	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-27 07:08:02	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-27 07:08:40	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 07:09:20	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 07:10:06	-->	kamatsu (~Adium@2402:1800:4000:2:5de8:aa59:b23:8d10) has joined #haskell
2013-03-27 07:10:40	--	pdxleif is now known as pdxleif_away
2013-03-27 07:11:32	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-03-27 07:12:50	<--	centrinia_ (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Remote host closed the connection)
2013-03-27 07:13:25	<--	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has quit (Ping timeout: 248 seconds)
2013-03-27 07:13:53	<--	bradleyayers (~brad@1.130.138.219) has quit (Ping timeout: 240 seconds)
2013-03-27 07:14:16	<--	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Quit: Ex-Chat)
2013-03-27 07:15:09	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-27 07:18:50	<--	edeast (~chatzilla@24.114.26.90) has quit (Ping timeout: 246 seconds)
2013-03-27 07:19:33	<--	Polish (~Polish@d58-111-175-154.meb802.vic.optusnet.com.au) has quit (Remote host closed the connection)
2013-03-27 07:20:05	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-27 07:20:18	<--	nade (~nade@74.215.14.61) has quit (Quit: nade)
2013-03-27 07:20:27	<--	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Leaving)
2013-03-27 07:21:38	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-27 07:21:52	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-03-27 07:22:24	<--	ParahSail1n (~pwang@unaffiliated/parahsailin) has quit (Ping timeout: 256 seconds)
2013-03-27 07:22:34	-->	ParahSail1n (~pwang@unaffiliated/parahsailin) has joined #haskell
2013-03-27 07:23:51	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-27 07:23:52	<--	yacks (~yacks@180.151.36.168) has quit (Read error: Operation timed out)
2013-03-27 07:24:46	-->	cardamon (~wintermut@c-24-30-40-161.hsd1.ga.comcast.net) has joined #haskell
2013-03-27 07:25:01	<--	[[zz]] (~q@node-mnb.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 245 seconds)
2013-03-27 07:25:11	cardamon	What's the > operator do to a pair of lists?
2013-03-27 07:25:13	<--	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has quit (Ping timeout: 240 seconds)
2013-03-27 07:25:18	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-03-27 07:25:38	cardamon	I'm reading Learn you a Haskell and got confused on this.
2013-03-27 07:25:55	simpson	> "abba" > "adder"
2013-03-27 07:25:56	lambdabot	  False
2013-03-27 07:26:01	cardamon	It compares heads, then second elements, etc, as long as they're true?
2013-03-27 07:26:05	arkeet	cardamon: it compares two lists like you would compare words in a dictionary.
2013-03-27 07:26:16	simpson	> [1,2,3,4] > [1,3,2,2]
2013-03-27 07:26:17	lambdabot	  False
2013-03-27 07:26:30	shachaf	@google lexicographical ordering
2013-03-27 07:26:31	lambdabot	http://en.wikipedia.org/wiki/Lexicographical_order
2013-03-27 07:26:31	lambdabot	Title: Lexicographical order - Wikipedia, the free encyclopedia
2013-03-27 07:26:36	arkeet	^
2013-03-27 07:26:40	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-03-27 07:26:44	cardamon	Yeah, but how is [3,2,1] > [2,10,100] True?
2013-03-27 07:26:47	arkeet	because 3 > 2
2013-03-27 07:26:52	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 07:26:53	shachaf	3 > 2
2013-03-27 07:26:58	arkeet	read the wiki link:
2013-03-27 07:26:59	arkeet	:p
2013-03-27 07:27:21	arkeet	it compares the first elements. if one of them is greater, then done.
2013-03-27 07:27:21	sw2wolf	what does :p mean :)
2013-03-27 07:27:32	arkeet	otherwise, repeat with the second elements. and so on.
2013-03-27 07:27:41	arkeet	if you hit the end of one list, then it's smaller than the other list.
2013-03-27 07:27:44	arkeet	(unless they're equal)
2013-03-27 07:27:44	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 07:27:58	shachaf	Nonexistence is considered smaller than any value.
2013-03-27 07:28:05	arkeet	[3,2,1] > [2,10,100] for the same reason "cba" > "bjz"
2013-03-27 07:28:14	arkeet	becuase cba would come after bjz in the dictionary.
2013-03-27 07:28:18	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 07:28:21	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-27 07:28:35	elliott	you have a very strange dictionary, arkeet.
2013-03-27 07:28:45	arkeet	*if* they were words.
2013-03-27 07:28:45	shachaf	> chr (ord 'a' + 100)
2013-03-27 07:28:47	lambdabot	  '\197'
2013-03-27 07:29:03	elliott	you cannot hide your Alien Dictionary for Aliens from me
2013-03-27 07:29:11	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 245 seconds)
2013-03-27 07:29:12	shachaf	"cba" > "bjÅ"
2013-03-27 07:29:13	elliott	cba bjz glurk.
2013-03-27 07:29:29	arkeet	my dictionary contains all strings that could conceivably be a word in any language.
2013-03-27 07:29:38	shachaf	I thought arkeet was only going to be an alien in the summer.
2013-03-27 07:29:45	cardamon	arkeet: THat's the part I didn't get.  So it compares 3 and 2 and then finishes, rather than comparing to make see if every element in list 1 was greater than every element of the same index in list two, which is what I mistakenly infered it would do?
2013-03-27 07:30:05	shachaf	cardamon: You have a very operational way of phrasing it, but yes.
2013-03-27 07:30:15	cardamon	operational?
2013-03-27 07:30:25	arkeet	cardamon: you look at the first position where the two lists differ. the list with the larger element at that position is larger.
2013-03-27 07:30:34	bitonic	cardamon: you think about how it runs rather than how it works
2013-03-27 07:30:44	bitonic	or rather than what it does :P
2013-03-27 07:30:47	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Quit: Leaving)
2013-03-27 07:30:59	-->	seafood_ (~seafood@stargate.it.nicta.com.au) has joined #haskell
2013-03-27 07:31:00	shachaf	Or what it is/what it describes.
2013-03-27 07:31:01	shachaf	Whatever.
2013-03-27 07:31:03	arkeet	you could look at it recursively.
2013-03-27 07:31:07	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:31:16	arkeet	(a:as) <= (b:bs) iff a <= b or (a == b and as <= bs)
2013-03-27 07:31:16	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (Ping timeout: 245 seconds)
2013-03-27 07:31:17	--	seafood_ is now known as seafood
2013-03-27 07:31:36	elliott	arkeet: that would literally be easier to define by making it valid haskell
2013-03-27 07:31:37	cardamon	How should I know what it does without knowing how it does it, unless someone tells me?
2013-03-27 07:31:37	arkeet	and [] <= x for any list x
2013-03-27 07:31:45	arkeet	sure.
2013-03-27 07:31:54	arkeet	cardamon: it's all in the Ord instance for lists.
2013-03-27 07:31:57	elliott	well, you don't need to care about what it does.
2013-03-27 07:32:02	elliott	only what it means.
2013-03-27 07:32:03	arkeet	well, that's where it's defined.
2013-03-27 07:32:06	cardamon	I read dthe book, the book apparently assumed I could infer things I did not.
2013-03-27 07:32:07	<--	kamatsu (~Adium@2402:1800:4000:2:5de8:aa59:b23:8d10) has quit (Quit: Leaving.)
2013-03-27 07:32:11	elliott	its behaviour was specified in full even before arkeet's recursive definition
2013-03-27 07:32:56	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:32:56	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-27 07:32:56	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-27 07:32:56	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-27 07:32:56	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-27 07:33:13	arkeet	er
2013-03-27 07:33:17	arkeet	I should have written a < b up there.
2013-03-27 07:33:34	arkeet	whatever.
2013-03-27 07:34:25	-->	[[zz]] (~q@node-mnb.pool-101-108.dynamic.totbb.net) has joined #haskell
2013-03-27 07:34:32	cardamon	I think there's some meaning to "lexicographical ordering" that I'm not getting.
2013-03-27 07:34:36	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 07:34:42	<--	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-03-27 07:34:53	 *	sw2wolf thinking Why is it hard to implement a light weight REPL using haskell ?  
2013-03-27 07:34:55	shachaf	cardamon: Later elements are used as tie-breakers for earlier elements.
2013-03-27 07:35:17	shachaf	The first element is what counts. If it happens to be the same in both lists, you resort to checking the next one. And so on.
2013-03-27 07:35:17	<--	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (Ping timeout: 248 seconds)
2013-03-27 07:35:20	arkeet	<arkeet> cardamon: you look at the first position where the two lists differ. the list with the larger element at that position is larger.
2013-03-27 07:35:25	arkeet	I thought this was pretty clear.
2013-03-27 07:36:14	arkeet	it's how you would see if one word comes before another in the dictionary.
2013-03-27 07:36:17	arkeet	s/if/whether/
2013-03-27 07:36:30	cardamon	Yeah, but then you started going on about the what not the how, as if I'd missed something fundamental in the presentation resulting in my confusion.
2013-03-27 07:36:48	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-27 07:36:55	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:37:02	arkeet	ok, I don't know what you aren't sure about.
2013-03-27 07:37:35	cardamon	How "ng haskell ?                                                   │·····························
2013-03-27 07:37:38	cardamon	02:33 < shachaf> cardamon: Later elements are used as tie-breakers for earlier elements.                                                    │·····························
2013-03-27 07:37:42	cardamon	02:33 -!- Rickasaurus [~quassel@ool-44c0bd65.dyn.optonline.net] has quit [Ping timeout: 248 seconds]                                        │·····························
2013-03-27 07:37:46	cardamon	...sorry.
2013-03-27 07:37:57	cardamon	I mashed a button I shouldn't have.
2013-03-27 07:38:14	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:38:44	pharaun	heh
2013-03-27 07:38:56	 *	pharaun takes away cardamon's buttons
2013-03-27 07:39:15	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-27 07:39:45	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-27 07:39:47	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:40:24	--	cads is now known as ShinjouKarunoto
2013-03-27 07:40:44	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:41:02	<--	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has quit (Quit: ~ Trillian Astra - www.trillian.im ~)
2013-03-27 07:41:02	cardamon	pharaun: urxvt and pasting is hard.
2013-03-27 07:41:27	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:42:07	--	wump is now known as wumpus
2013-03-27 07:42:10	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-27 07:42:10	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-27 07:42:10	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-27 07:42:13	<--	wumpus (~quassel@5ED69A19.cm-7-7c.dynamic.ziggo.nl) has quit (Changing host)
2013-03-27 07:42:14	-->	wumpus (~quassel@pdpc/supporter/professional/wumpus) has joined #haskell
2013-03-27 07:42:16	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:42:27	-->	bradleya_ (~brad@49.176.72.2) has joined #haskell
2013-03-27 07:42:48	pharaun	heh indeed
2013-03-27 07:42:57	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:43:27	-->	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has joined #haskell
2013-03-27 07:43:30	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-27 07:45:46	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 246 seconds)
2013-03-27 07:46:12	cardamon	I"m going to bed.  Night.
2013-03-27 07:47:19	--	stelleg is now known as stelleg_away
2013-03-27 07:48:06	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 252 seconds)
2013-03-27 07:49:32	<--	sw2wolf (~czsq888@171.216.96.202) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-27 07:49:43	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 07:50:18	-->	ivanm (~ivan@115.187.254.102) has joined #haskell
2013-03-27 07:50:36	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-27 07:50:37	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:51:09	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:51:35	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:51:52	TravisD	Is there a way to give ghc hints about the type of an expression without specifying the entire type?
2013-03-27 07:52:01	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:52:35	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:52:53	Pods	Hey, having learnt haskell for a while I was thinking what exactly are the development arenas for noobs in swish ?? P.S. Looking at applying for the same for gsoc too..
2013-03-27 07:53:35	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:53:56	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:54:41	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 07:54:52	<--	bradleya_ (~brad@49.176.72.2) has quit (Remote host closed the connection)
2013-03-27 07:54:52	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-27 07:55:01	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 07:55:03	 *	cardamon feels bad that he can't figure out how to exit ghci
2013-03-27 07:55:06	<--	yacks (~yacks@180.151.36.168) has quit (Read error: Connection reset by peer)
2013-03-27 07:55:19	cardamon	Ah.
2013-03-27 07:55:20	cardamon	got it.
2013-03-27 07:55:23	cardamon	need a :
2013-03-27 07:55:25	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 07:55:54	<--	MnO2 (~MnO2@nat/yahoo/x-vgqzvfgsxhzxqeqg) has quit (Quit: MnO2)
2013-03-27 07:56:08	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Quit: Bye)
2013-03-27 07:56:17	-->	folone_ (~folone@brln-4dbc1c92.pool.mediaWays.net) has joined #haskell
2013-03-27 07:56:55	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-27 07:58:17	<--	td123 (~thomas-dz@li430-81.members.linode.com) has quit (Quit: WeeChat 0.4.0)
2013-03-27 07:58:31	--	KaiSforza is now known as jelly3
2013-03-27 08:00:05	-->	heruur (~tvh@167-147-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-27 08:00:11	--	ShinjouKarunoto is now known as cads
2013-03-27 08:00:29	adnap	How do I see all functions exported by a module in GHCI?
2013-03-27 08:00:38	-->	td123 (~thomas-dz@archlinux/developer/td123) has joined #haskell
2013-03-27 08:00:43	arkeet	:browse does something like that.
2013-03-27 08:01:39	adnap	Does GHC have a manpage? I don't have one.
2013-03-27 08:01:41	-->	bradleya_ (~brad@49.176.72.2) has joined #haskell
2013-03-27 08:02:35	-->	MnO2 (~MnO2@nat/yahoo/x-bnriqlfmtxnxrkmv) has joined #haskell
2013-03-27 08:02:36	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 08:02:50	shachaf	GHC has a man page.
2013-03-27 08:02:54	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 245 seconds)
2013-03-27 08:03:02	shachaf	It also has a user's guide.
2013-03-27 08:03:07	shachaf	ghci has :help
2013-03-27 08:03:08	adnap	I use Gentoo and I compiled GHC with the doc USE flag.
2013-03-27 08:03:19	-->	v__ (~v@199.68.198.120) has joined #haskell
2013-03-27 08:03:22	-->	bradley__ (~brad@49.176.72.2) has joined #haskell
2013-03-27 08:03:46	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-27 08:04:10	-->	aesptux (~aesptux@d393556.seedhost.eu) has joined #haskell
2013-03-27 08:04:41	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 246 seconds)
2013-03-27 08:04:54	Pods	Any GSOC mentors here ??
2013-03-27 08:05:06	supki	adnap: #gentoo-haskell might know how to get manpages for ghc on gentoo
2013-03-27 08:05:31	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-27 08:06:12	<--	fcr (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Operation timed out)
2013-03-27 08:06:26	<--	bradleya_ (~brad@49.176.72.2) has quit (Ping timeout: 246 seconds)
2013-03-27 08:06:42	<--	leroux (~leroux@unaffiliated/leroux) has quit (Ping timeout: 264 seconds)
2013-03-27 08:06:57	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-27 08:07:22	-->	fcr (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-03-27 08:07:38	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:07:41	-->	ThomasLocke_ (~ThomasLoc@mail.serverbox.dk) has joined #haskell
2013-03-27 08:07:41	<--	ThomasLocke_ (~ThomasLoc@mail.serverbox.dk) has quit (Changing host)
2013-03-27 08:07:41	-->	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-27 08:08:04	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:08:57	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:09:10	--	jelly3 is now known as KaiSforza
2013-03-27 08:09:41	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:11:43	-->	leroux (~leroux@unaffiliated/leroux) has joined #haskell
2013-03-27 08:12:58	--	amatsu is now known as amatsu\idle
2013-03-27 08:13:01	-->	shintah (bebble@h-35-99.a336.priv.bahnhof.se) has joined #haskell
2013-03-27 08:13:07	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 264 seconds)
2013-03-27 08:13:17	liyang	ghci is so vimist. :<
2013-03-27 08:13:17	<--	OlegYch2 (~OlegYch@212.98.189.88) has quit (Read error: Connection reset by peer)
2013-03-27 08:13:52	liyang	C-x C-c does nothing. D:
2013-03-27 08:14:02	-->	OlegYch (~OlegYch@212.98.189.88) has joined #haskell
2013-03-27 08:14:10	shachaf	The default keybindings are pretty emacsy.
2013-03-27 08:14:19	shachaf	Except they're a cheap plastic imitation of readline.
2013-03-27 08:14:35	<--	LAMMJohn1on (~ja@user-5af4341a.broadband.tesco.net) has quit (Quit: Reconnecting)
2013-03-27 08:15:05	-->	LAMMJohnson (~ja@user-5af4341a.broadband.tesco.net) has joined #haskell
2013-03-27 08:15:18	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-27 08:17:34	 *	hackagebot bytestring-handle 0.1.0.1 - ByteString-backed Handles  http://hackage.haskell.org/package/bytestring-handle-0.1.0.1 (GaneshSittampalam)
2013-03-27 08:18:13	<--	OlegYch (~OlegYch@212.98.189.88) has quit (Ping timeout: 240 seconds)
2013-03-27 08:18:26	-->	kallisti (~eris@168.28.136.16) has joined #haskell
2013-03-27 08:18:26	<--	kallisti (~eris@168.28.136.16) has quit (Changing host)
2013-03-27 08:18:26	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-03-27 08:19:23	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Quit: leaving)
2013-03-27 08:20:08	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-27 08:20:10	-->	OlegYch (~OlegYch@212.98.189.88) has joined #haskell
2013-03-27 08:20:49	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-27 08:21:02	<--	ivanm (~ivan@115.187.254.102) has quit (Read error: Connection timed out)
2013-03-27 08:21:03	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-03-27 08:21:25	adnap	So... often when I reading haskell, I mentally specialize the type of a function (e.g. a -> a to Int -> Int). Can some program help me do this?
2013-03-27 08:21:48	<--	Shin-LaC (~LaC@68.65.81.227) has quit (Ping timeout: 264 seconds)
2013-03-27 08:21:55	-->	xpika (~jrg@110.140.145.206) has joined #haskell
2013-03-27 08:22:31	--	notdan_ is now known as notdan
2013-03-27 08:22:36	<--	notdan (~h@ppp91-79-115-5.pppoe.mtu-net.ru) has quit (Changing host)
2013-03-27 08:22:36	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-03-27 08:22:50	<--	Vicfred (~Futaba@187.206.119.1) has quit (Read error: Connection reset by peer)
2013-03-27 08:24:20	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-03-27 08:25:26	<--	folone_ (~folone@brln-4dbc1c92.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-27 08:25:49	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 08:25:53	<--	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 240 seconds)
2013-03-27 08:26:15	-->	bradleya_ (~brad@49.176.68.7) has joined #haskell
2013-03-27 08:27:09	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:28:02	-->	threesteps (~ming@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-27 08:28:12	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:28:33	<--	bradley__ (~brad@49.176.72.2) has quit (Ping timeout: 240 seconds)
2013-03-27 08:28:38	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-27 08:28:49	<--	Targen (~iguana@200.8.226.118) has quit (Ping timeout: 252 seconds)
2013-03-27 08:28:54	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:29:15	<--	bradleya_ (~brad@49.176.68.7) has quit (Remote host closed the connection)
2013-03-27 08:29:25	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-03-27 08:30:01	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:30:27	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 252 seconds)
2013-03-27 08:32:18	-->	Bwild (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has joined #haskell
2013-03-27 08:32:31	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-03-27 08:33:07	<--	Nahra (~user@unaffiliated/nahra) has quit (Remote host closed the connection)
2013-03-27 08:33:28	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Quit: hamishmack)
2013-03-27 08:34:20	<--	MnO2 (~MnO2@nat/yahoo/x-bnriqlfmtxnxrkmv) has quit (Quit: MnO2)
2013-03-27 08:34:23	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 08:34:32	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-27 08:34:35	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-27 08:35:20	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-03-27 08:36:22	-->	Nahra (~user@unaffiliated/nahra) has joined #haskell
2013-03-27 08:36:43	-->	__dv__ (~quassel@SD1.retn.net) has joined #haskell
2013-03-27 08:36:56	-->	MnO2 (~MnO2@nat/yahoo/x-zxrxvdizsezzonje) has joined #haskell
2013-03-27 08:37:04	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:37:21	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-27 08:37:24	-->	Carb0n13 (~Carb0n13@ip70-161-254-153.hr.hr.cox.net) has joined #haskell
2013-03-27 08:37:30	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:37:40	-->	LMolr (~LMolr@87.19.246.78) has joined #haskell
2013-03-27 08:38:02	-->	icarot (~icarot@2600:1010:b121:a66b:0:3:93d5:e901) has joined #haskell
2013-03-27 08:38:15	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-27 08:38:17	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:39:09	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 245 seconds)
2013-03-27 08:39:43	bitonic	adnap: replace the type variables with what you need, making sure that the types you are replacing with respect the constraints
2013-03-27 08:39:55	-->	Aune (~arne@rakanishu.lysator.liu.se) has joined #haskell
2013-03-27 08:40:54	-->	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has joined #haskell
2013-03-27 08:40:54	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-27 08:41:04	-->	bradleyayers (~brad@49.176.100.91) has joined #haskell
2013-03-27 08:41:05	<--	Jesin (~Jessin_@Dyn141098.cc.lehigh.edu) has quit (Ping timeout: 246 seconds)
2013-03-27 08:41:47	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:42:00	<--	guardadigital (~guardadig@187.101.34.243) has quit (Ping timeout: 252 seconds)
2013-03-27 08:42:20	pqmodn	@type: id `asAppliedTo` "hello"
2013-03-27 08:42:21	lambdabot	[Char] -> [Char]
2013-03-27 08:42:23	pqmodn	adnap: ^^
2013-03-27 08:42:28	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-27 08:43:17	shachaf	The type Int -> Int communicates much less information than the type a -> Int
2013-03-27 08:44:15	<--	icarot (~icarot@2600:1010:b121:a66b:0:3:93d5:e901) has quit (Remote host closed the connection)
2013-03-27 08:44:20	-->	DigitalKiwi (~kiwi@ip174-74-81-77.om.om.cox.net) has joined #haskell
2013-03-27 08:44:41	adnap	pqmodn:
2013-03-27 08:44:44	adnap	Thanks
2013-03-27 08:45:02	-->	charliesome_ (~textual@124.168.126.54) has joined #haskell
2013-03-27 08:45:40	adnap	pqmodn: How do I do that in ghci?
2013-03-27 08:46:29	-->	sw2wolf (~czsq888@171.216.96.202) has joined #haskell
2013-03-27 08:46:35	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-27 08:46:36	-->	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has joined #haskell
2013-03-27 08:47:17	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 08:48:01	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 08:48:29	 *	Pods waiting for ping
2013-03-27 08:48:33	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 08:48:51	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-27 08:51:50	pqmodn	adnap: let as :: (t -> b) -> t -> t -> b; as f t _ = f t
2013-03-27 08:52:07	pqmodn	adnap: :type id `as` "foo"
2013-03-27 08:54:20	adnap	It works, but I don't understand it
2013-03-27 08:55:03	adnap	as :: (a -> a) -> String -> String -> a ...
2013-03-27 08:55:03	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-03-27 08:55:11	pqmodn	adnap: the key is the type signature, which says the second and third argument are the same `t` type.
2013-03-27 08:55:29	pqmodn	adnap: no, as :: (String -> b) -> String -> String -> b
2013-03-27 08:55:34	-->	ivan____ (~ivan@18.204.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-27 08:55:48	<--	imeredith (~ivan@18.204.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 256 seconds)
2013-03-27 08:56:15	adnap	type of first argument, id, is a -> a
2013-03-27 08:56:48	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-27 08:56:58	pqmodn	`as` works like this: give me an f :: t -> b, then an actual concrete type (well, maybe). now i can pin down the type variable for f.
2013-03-27 08:57:13	-->	piotr (~quassel@e178090242.adsl.alicedsl.de) has joined #haskell
2013-03-27 08:57:33	<--	MnO2 (~MnO2@nat/yahoo/x-zxrxvdizsezzonje) has quit (Quit: MnO2)
2013-03-27 08:57:43	<--	vramana (~chatzilla@103.5.132.50) has quit (Remote host closed the connection)
2013-03-27 08:58:11	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-27 08:58:16	pqmodn	right, so t = a, b = a, initially (eg, as id :: a -> a -> a). but when you pass a second argument, (as id "hi") it can infer t must be String. so as id "hi" :: String -> String
2013-03-27 08:58:40	adnap	I see
2013-03-27 08:58:47	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-27 08:59:01	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-27 08:59:01	adnap	I don't understand the implementation though: "as f t _ = f t"
2013-03-27 08:59:03	-->	MnO2 (~MnO2@nat/yahoo/x-iltnuqixhwttkkfh) has joined #haskell
2013-03-27 08:59:08	pqmodn	it's not too far off from ($) really. except it requires an extra argument (_)
2013-03-27 08:59:12	pqmodn	@type ($)
2013-03-27 08:59:13	lambdabot	(a -> b) -> a -> b
2013-03-27 08:59:31	pqmodn	see how `as` just requires another `a`?
2013-03-27 08:59:42	pqmodn	it's the _ argument which we don't actually use
2013-03-27 08:59:55	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-27 08:59:58	pqmodn	the reason it's required is:
2013-03-27 08:59:59	adnap	Is it the first argument to the new function?
2013-03-27 09:00:04	pqmodn	@type ($) id "hi"
2013-03-27 09:00:06	lambdabot	[Char]
2013-03-27 09:00:11	pqmodn	that only gives the return type
2013-03-27 09:00:21	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-27 09:00:35	pqmodn	because ($) f t = f t
2013-03-27 09:00:44	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-27 09:00:52	adnap	Argh
2013-03-27 09:01:03	-->	trescenzi (~trescenzi@2620:91:0:163:b875:ebe7:4eab:9319) has joined #haskell
2013-03-27 09:01:15	pqmodn	as f t _ = f t -- we require another argument, so as id "hi" :: String -> String, but ($) id "hi" :: String
2013-03-27 09:01:30	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-27 09:01:50	adnap	Oh, so
2013-03-27 09:01:56	adnap	the "hi" is a throwaway
2013-03-27 09:01:58	pqmodn	yes
2013-03-27 09:02:06	adnap	But it specifies the type of t
2013-03-27 09:02:09	pqmodn	yup
2013-03-27 09:02:34	pqmodn	actually "hi" isn't thrown away, but you have the general idea
2013-03-27 09:02:35	 *	hackagebot Etage 0.1.11 - A general data-flow framework  http://hackage.haskell.org/package/Etage-0.1.11 (MitarMilutinovic)
2013-03-27 09:02:47	pqmodn	> let f t _ = f t in f "hi" "bai"
2013-03-27 09:02:49	lambdabot	  Occurs check: cannot construct the infinite type: t1 = t0 -> t1
2013-03-27 09:02:53	pqmodn	> let f t _ = f t in f id "hi" "bai"
2013-03-27 09:02:54	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-27 09:02:55	lambdabot	  Occurs check: cannot construct the infinite type: t1 = t0 -> t1
2013-03-27 09:03:01	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-03-27 09:03:24	--	charliesome_ is now known as charliesome
2013-03-27 09:03:46	<--	rsampaio_ (~rodrigo@189.121.226.43) has quit (Ping timeout: 245 seconds)
2013-03-27 09:04:00	<--	rsampaio (~rodrigo@189.121.226.43) has quit (Ping timeout: 252 seconds)
2013-03-27 09:04:01	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-27 09:04:01	pqmodn	eh, it's late:
2013-03-27 09:04:07	Cale	http://www.youtube.com/watch?v=HrIfZrDe788 -- Etagen, a marble-flow... network?
2013-03-27 09:04:08	pqmodn	> let as f t _ = f t in as id "hi" "bai"
2013-03-27 09:04:10	lambdabot	  "hi"
2013-03-27 09:04:21	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 248 seconds)
2013-03-27 09:05:03	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-27 09:05:05	adnap	Oh! I was staring at "as" for a while
2013-03-27 09:05:26	<--	trescenzi (~trescenzi@2620:91:0:163:b875:ebe7:4eab:9319) has quit (Ping timeout: 245 seconds)
2013-03-27 09:05:30	adnap	I realized it does compute something, but we just use its definition to get its type signature when applied to a function and type
2013-03-27 09:05:38	-->	jutaro (~juergen.n@business-178-015-073-231.static.arcor-ip.net) has joined #haskell
2013-03-27 09:05:41	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-27 09:05:42	adnap	I forgot this all started with ":t as ..."
2013-03-27 09:06:02	pqmodn	adnap: sorry, probably a poorly chosen name
2013-03-27 09:06:20	adnap	pqmodn: Is there a function like this already in Prelude or somewhere else?
2013-03-27 09:06:26	adnap	I guess I could put it in .ghci
2013-03-27 09:06:31	pqmodn	i'm not sure, but probably not.
2013-03-27 09:06:38	<--	paintcan (~user@108.162.180.237) has quit (Ping timeout: 246 seconds)
2013-03-27 09:07:08	adnap	Hm...
2013-03-27 09:07:15	adnap	> let x = "hi"; :t x
2013-03-27 09:07:17	lambdabot	  <hint>:1:15: parse error on input `:'
2013-03-27 09:07:21	adnap	> let x = "hi" in :t x
2013-03-27 09:07:22	lambdabot	  <hint>:1:17: parse error on input `:'
2013-03-27 09:07:35	 *	hackagebot Etage-Graph 0.1.7 - Data-flow based graph algorithms  http://hackage.haskell.org/package/Etage-Graph-0.1.7 (MitarMilutinovic)
2013-03-27 09:07:36	pqmodn	you can bind at the top level in ghci with just "let". let x = "hi"
2013-03-27 09:07:41	pqmodn	then on the next command, :t x
2013-03-27 09:08:24	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-27 09:08:55	adnap	Hm...
2013-03-27 09:09:00	pqmodn	also, you might see if you squint at "as f t _ = f t" something that looks like const. in fact, as = (.) const :: (t -> b) -> t -> t -> b
2013-03-27 09:09:13	adnap	It doesn't seem like "as" generalizes to functions with more arguments
2013-03-27 09:09:24	adnap	I tried "foldl' `as` (2 :: Int)
2013-03-27 09:09:52	pqmodn	no, but you can. :t (\f xs -> foldl f (2 :: Int) xs)
2013-03-27 09:10:12	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-27 09:10:39	adnap	:t id "hi"
2013-03-27 09:10:40	lambdabot	[Char]
2013-03-27 09:10:50	pqmodn	or flip foldl `as` (2 :: Int) if you like
2013-03-27 09:11:38	adnap	:t (\f xs -> foldl f (2 :: Int) xs)
2013-03-27 09:11:39	lambdabot	(Int -> b -> Int) -> [b] -> Int
2013-03-27 09:11:44	adnap	:t foldl
2013-03-27 09:11:46	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-03-27 09:11:53	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 246 seconds)
2013-03-27 09:11:57	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 09:12:09	adnap	So, this makes the initial a argument go away
2013-03-27 09:12:11	pqmodn	oops, you need two flips, but chances are that ^^ above, using (\arg arg -> ...) will be generally easier to remember and use anyway
2013-03-27 09:12:19	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-03-27 09:12:47	pqmodn	ah, :t (\f -> foldl `as` (2 :: Int))
2013-03-27 09:12:58	pqmodn	sorry, foldl f `as` (2 :: Int)
2013-03-27 09:13:13	pqmodn	@type (\f -> foldl f (2 :: Int))
2013-03-27 09:13:14	lambdabot	(Int -> b -> Int) -> [b] -> Int
2013-03-27 09:13:17	pqmodn	@type (\f -> foldl f `asAppliedTo` (2 :: Int))
2013-03-27 09:13:19	lambdabot	(Int -> b -> Int) -> Int -> [b] -> Int
2013-03-27 09:13:34	adnap	Where is "asAppliedTo"?
2013-03-27 09:13:38	<--	sunnavy (~sunnavy@li387-135.members.linode.com) has quit (Remote host closed the connection)
2013-03-27 09:13:41	adnap	@hoogle asAppliedto
2013-03-27 09:13:41	lambdabot	No results found
2013-03-27 09:13:48	pqmodn	@type (\f init -> foldl f init `asAppliedTo` "hi")
2013-03-27 09:13:49	lambdabot	(b -> Char -> b) -> b -> [Char] -> b
2013-03-27 09:13:52	bitonic	adnap: asAppliedTo f _ = f
2013-03-27 09:13:53	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Ping timeout: 240 seconds)
2013-03-27 09:14:29	bitonic	> let foo _ f = f in id `foo` 42
2013-03-27 09:14:31	lambdabot	  42
2013-03-27 09:14:34	bitonic	@ty let foo _ f = f in id `foo` 42
2013-03-27 09:14:35	-->	madjestic (~madjestic@178.224.48.142) has joined #haskell
2013-03-27 09:14:36	lambdabot	Num t => t
2013-03-27 09:14:42	bitonic	@ty let foo _ f = f in id `foo` (42 :: Int)
2013-03-27 09:14:43	lambdabot	Int
2013-03-27 09:14:51	bitonic	@ty let foo f _ = f in id `foo` (42 :: Int)
2013-03-27 09:14:52	lambdabot	a -> a
2013-03-27 09:14:55	bitonic	oh.
2013-03-27 09:14:59	bitonic	ah.
2013-03-27 09:15:05	adnap	This is so confusing
2013-03-27 09:15:13	pqmodn	f = (.) const :: (t -> b) -> b -> b -> t
2013-03-27 09:15:15	bitonic	@ty let foo f x = let _ = f x in f in id `foo` (42 :: Int)
2013-03-27 09:15:17	lambdabot	Int -> Int
2013-03-27 09:15:32	bitonic	so, ‘asAppliedTo f x = let _ = f x in f’.
2013-03-27 09:15:35	 *	bitonic didn’t sleep much
2013-03-27 09:15:57	pqmodn	adnap: is it as late there as it is here?
2013-03-27 09:16:01	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-27 09:16:04	bitonic	@localtime adnap
2013-03-27 09:16:05	lambdabot	Local time for adnap is Wed Mar 27 03:14:44 2013
2013-03-27 09:16:08	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-27 09:16:10	adnap	That's correct
2013-03-27 09:16:11	-->	sunnavy (~sunnavy@li387-135.members.linode.com) has joined #haskell
2013-03-27 09:16:18	bitonic	lambdabot knows.
2013-03-27 09:17:15	pqmodn	adnap: so the moral is, if you want to specialize the n+1th argument, :t (\one two .. nth -> f one two .. nth `asAppliedTo` ..)
2013-03-27 09:17:41	<--	heruur (~tvh@167-147-103-86.dynamic.dsl.tng.de) has quit (Quit: Leaving.)
2013-03-27 09:17:56	adnap	pqmodn: What if I just want to specify some argument m, where 1 <= m <= n?
2013-03-27 09:18:00	pqmodn	put this in your .ghci: let asAppliedTo = (.) const :: (t -> b) -> t -> t -> b
2013-03-27 09:18:38	pqmodn	you mean you want to check the type of some function if the m-th argument has type t?
2013-03-27 09:18:39	<--	jutaro (~juergen.n@business-178-015-073-231.static.arcor-ip.net) has left #haskell
2013-03-27 09:18:45	adnap	pqmodn: Yeah
2013-03-27 09:18:54	bitonic	adnap: I think it would be useful to understand how ‘asAppliedTo’ works
2013-03-27 09:19:01	adnap	bitonic: I'm really trying
2013-03-27 09:19:12	adnap	It's not clicking
2013-03-27 09:19:31	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 09:19:37	bitonic	adnap: are you looking at my definition?  because ‘(.) const’ is pretty obscure
2013-03-27 09:19:37	-->	Eduard_Munteanu (~Eduard_Mu@188.25.245.211) has joined #haskell
2013-03-27 09:19:46	adnap	bitonic: No
2013-03-27 09:19:56	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-27 09:19:56	bitonic	adnap: ‘asAppliedTo f x = let _ = f x in f’
2013-03-27 09:20:18	pqmodn	oh, that's what i meant above. for instance to infer by specializing the first argument: foldl `asAppliedTo` (+). second argument: (\op -> foldl op `asAppliedTo` (0 :: Int)), third argument: (\op init -> foldl op init "list")
2013-03-27 09:20:32	-->	MrFenix (~JanB@p57A1A8B7.dip.t-dialin.net) has joined #haskell
2013-03-27 09:20:37	pqmodn	sorry, third argument: (\op init -> foldl op init `asAppliedTo` "list")
2013-03-27 09:20:41	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-27 09:20:58	bitonic	adnap: so, asApplied to gets some function ‘a -> b’.  ‘a’ and ‘b’ are type variables, they can be substituted with any type.
2013-03-27 09:21:09	adnap	Yeah
2013-03-27 09:21:14	adnap	and asks for another a
2013-03-27 09:21:15	pqmodn	adnap: i think asAppliedTo f arg _ = f arg is the simplest. don't forget to the type signature though
2013-03-27 09:21:24	adnap	Yes, it makes sense
2013-03-27 09:21:35	<--	madjestic (~madjestic@178.224.48.142) has quit (Ping timeout: 252 seconds)
2013-03-27 09:21:45	bitonic	pqmodn: oh yes, that’s nicer
2013-03-27 09:21:59	adnap	:t asAppliedTo
2013-03-27 09:22:00	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 09:22:35	bitonic	adnap: so yes, it asks for another ‘a’.  so with ‘id’, you have ‘asAppliedTo id :: a -> a -> a’, right?
2013-03-27 09:22:52	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-27 09:22:53	-->	itemad (~user@212.0.102.162) has joined #haskell
2013-03-27 09:22:59	adnap	Hold on... I keep doing double-takes
2013-03-27 09:23:17	bitonic	you start with ‘(t -> b) -> t -> t -> b’, and ‘id :: a -> a’
2013-03-27 09:23:36	bitonic	so given the type signature for ‘id’, ‘t’ must be the same as ‘b’
2013-03-27 09:23:54	pqmodn	and don't forget when you apply an argument to a function, the resulting type now has one *less* argument
2013-03-27 09:24:18	pqmodn	damnit, apply a "function to an argument". going to bed before i cause more damage
2013-03-27 09:24:36	-->	madjestic (~madjestic@178.224.48.142) has joined #haskell
2013-03-27 09:24:41	bitonic	I have the reverse problem, woke up after 5 hrs for some reason lol
2013-03-27 09:24:53	-->	Itkovian (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-03-27 09:25:11	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-03-27 09:25:17	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-03-27 09:25:26	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-03-27 09:25:44	adnap	asAppliedTo id "hi" _ = id "hi"
2013-03-27 09:26:08	adnap	:t asAppliedTo
2013-03-27 09:26:09	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 09:26:09	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 09:26:40	adnap	asAppliedTp f x y = (\y -> f x)
2013-03-27 09:27:04	bitonic	adnap: maybe you meant ‘asAppliedTo f x = (\y -> f x)’
2013-03-27 09:27:15	adnap	Yes
2013-03-27 09:28:02	adnap	So... b is determined from the type of the function we pass in and t by the type of the argument we pass in
2013-03-27 09:28:08	-->	paintcan (~user@108.162.180.237) has joined #haskell
2013-03-27 09:29:03	adnap	Hm... why do we throw away y...
2013-03-27 09:29:15	adnap	asAppliedTo f x = (\y -> f y)
2013-03-27 09:29:20	-->	silver (~silver@178.120.22.1) has joined #haskell
2013-03-27 09:29:23	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-03-27 09:29:26	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-27 09:29:38	<--	hajimeho_ (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-27 09:29:44	<--	krig_ (~krig@109.74.3.242) has quit (Read error: Operation timed out)
2013-03-27 09:29:50	<--	madjestic (~madjestic@178.224.48.142) has quit (Ping timeout: 252 seconds)
2013-03-27 09:29:51	-->	krig (~krig@109.74.3.242) has joined #haskell
2013-03-27 09:29:55	<--	bradleyayers (~brad@49.176.100.91) has quit (Ping timeout: 264 seconds)
2013-03-27 09:30:08	bitonic	@djinn (t -> b) -> t -> t -> b
2013-03-27 09:30:10	lambdabot	f a b _ = a b
2013-03-27 09:30:24	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 252 seconds)
2013-03-27 09:30:46	<--	skyflash (~skyflash@96.53.63.54) has quit (Remote host closed the connection)
2013-03-27 09:31:27	adnap	Oh
2013-03-27 09:31:31	bitonic	@ty (\f _ x -> f x) :: (t -> b) -> t -> t -> b
2013-03-27 09:31:32	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 09:31:39	adnap	So, calling the function on the passed-in type specifies t
2013-03-27 09:31:40	bitonic	it doesn’t really matter which one you throw away
2013-03-27 09:31:50	adnap	I think it does
2013-03-27 09:31:53	<--	tomboy65 (~tomboy@unaffiliated/tomboy64) has quit (Remote host closed the connection)
2013-03-27 09:31:58	bitonic	look above
2013-03-27 09:32:08	bitonic	@ty (\f x _ -> f x) :: (t -> b) -> t -> t -> b
2013-03-27 09:32:09	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 09:32:14	bitonic	@ty (\f _ x -> f x) :: (t -> b) -> t -> t -> b
2013-03-27 09:32:15	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 09:32:31	-->	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has joined #haskell
2013-03-27 09:32:42	-->	tomboy65 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-27 09:32:45	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Quit: Lost terminal)
2013-03-27 09:32:47	bitonic	adnap: the function it’s useless, it’s just a device to instantiate those type variables
2013-03-27 09:32:50	bitonic	*is useless
2013-03-27 09:32:56	 *	bitonic needs to go
2013-03-27 09:33:19	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Read error: Connection reset by peer)
2013-03-27 09:34:14	adnap	if I do "let asAppliedTo f x = (\y -> f y)" and then ":t id `asAppliedTo` "hi"" in ghci, I get t1 -> t1
2013-03-27 09:34:51	adnap	if I do "let asAppliedTo f x = (\_ -> f x" and then ":t id `asAppliedTo` "hi"" in ghci, I get t1 -> [Char]
2013-03-27 09:35:02	bitonic	@ty ((\f _ x -> f x) :: (t -> b) -> t -> t -> b) id "foo"
2013-03-27 09:35:03	lambdabot	[Char] -> [Char]
2013-03-27 09:35:12	bitonic	adnap: the type it infers is more general
2013-03-27 09:35:27	bitonic	I really need to go anyway, later
2013-03-27 09:35:32	adnap	Bye-bue
2013-03-27 09:35:33	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-27 09:35:36	adnap	*Bye-bye
2013-03-27 09:35:41	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-27 09:35:50	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Quit: anderse)
2013-03-27 09:36:00	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-27 09:37:16	-->	Xenplex (~xenplex@195.46.241.225) has joined #haskell
2013-03-27 09:37:26	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 09:38:04	-->	MrFenix_ (~JanB@p57A1A0AE.dip.t-dialin.net) has joined #haskell
2013-03-27 09:38:44	supki	@ty (undefined :: (t -> b) -> t -> t -> b) id "foo"
2013-03-27 09:38:45	lambdabot	[Char] -> [Char]
2013-03-27 09:38:49	-->	XexonixXexillion (~LudvikGal@130.56.84.8) has joined #haskell
2013-03-27 09:39:17	<--	samedhi (~stephen@76.14.74.147) has quit (Client Quit)
2013-03-27 09:39:39	adnap	:t foldl
2013-03-27 09:39:41	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-03-27 09:40:21	-->	odi (~user@089144206079.atnat0015.highway.a1.net) has joined #haskell
2013-03-27 09:40:33	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-27 09:41:00	<--	CoverSlide (~richard@pool-173-55-58-198.lsanca.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-03-27 09:41:00	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-27 09:41:09	<--	MrFenix (~JanB@p57A1A8B7.dip.t-dialin.net) has quit (Ping timeout: 248 seconds)
2013-03-27 09:42:03	adnap	@ty (undefined :: ((a -> b -> a) -> a -> [b] -> a) -> b -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:42:04	lambdabot	(a -> [Char] -> a) -> a -> [[Char]] -> a
2013-03-27 09:42:13	-->	CoverSlide (~richard@pool-173-55-58-198.lsanca.fios.verizon.net) has joined #haskell
2013-03-27 09:42:27	adnap	@ty (undefined :: ((a -> b -> a) -> a -> [b] -> a) -> a -> (a -> b -> a) -> a -> [b] -> a) foldl "foo
2013-03-27 09:42:29	lambdabot	    lexical error in string/character literal at end of input
2013-03-27 09:42:30	adnap	@ty (undefined :: ((a -> b -> a) -> a -> [b] -> a) -> a -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:42:32	lambdabot	([Char] -> b -> [Char]) -> [Char] -> [b] -> [Char]
2013-03-27 09:42:51	adnap	:t typeOf
2013-03-27 09:42:52	lambdabot	Typeable a => a -> TypeRep
2013-03-27 09:43:08	-->	dafis (~dafis@dslb-092-077-010-104.pools.arcor-ip.net) has joined #haskell
2013-03-27 09:43:42	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-27 09:43:51	adnap	@ty (undefined :: (typeOf foldl -> a -> typeOf foldl) foldl "foo"
2013-03-27 09:43:52	lambdabot	parse error on input `"'
2013-03-27 09:44:01	adnap	@ty (undefined :: typeOf foldl -> a -> typeOf foldl) foldl "foo"
2013-03-27 09:44:02	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-03-27 09:44:24	-->	turiya (~turiya@14.139.65.3) has joined #haskell
2013-03-27 09:44:34	turiya	hi
2013-03-27 09:44:47	turiya	is it possible to do symbolic math in haskell?
2013-03-27 09:45:20	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-27 09:45:47	supki	@ty (undefined :: (s -> t -> b) -> s -> t -> (s -> t -> b)) foldl (++) ""
2013-03-27 09:45:48	lambdabot	([Char] -> [Char] -> [Char]) -> [Char] -> [[Char]] -> [Char]
2013-03-27 09:46:24	adnap	supki: I wonder if I can define something that does require me to type the type of the function I am interested in
2013-03-27 09:46:28	adnap	*doesn
2013-03-27 09:46:32	adnap	*doesn't
2013-03-27 09:46:41	supki	adnap: ?
2013-03-27 09:46:49	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-27 09:47:33	adnap	@ty (undefined :: (typeOf foldl -> a -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:47:34	lambdabot	parse error on input `"'
2013-03-27 09:47:42	adnap	@ty (undefined :: typeOf foldl -> a -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:47:43	lambdabot	([Char] -> b -> [Char]) -> [Char] -> [b] -> [Char]
2013-03-27 09:47:52	adnap	@ty (undefined :: typeOf foldl -> b -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:47:53	lambdabot	(a -> [Char] -> a) -> a -> [[Char]] -> a
2013-03-27 09:48:38	adnap	Just want to get rid of X in @ty (undefined :: typeOf foldl -> b -> X) foldl "foo"
2013-03-27 09:48:42	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-27 09:48:50	adnap	Avoid specifying X, rather
2013-03-27 09:49:14	supki	@ty (undefined :: foo bar -> b -> (a -> b -> a) -> a -> [b] -> a) foldl "foo"
2013-03-27 09:49:16	lambdabot	(a -> [Char] -> a) -> a -> [[Char]] -> a
2013-03-27 09:49:26	-->	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has joined #haskell
2013-03-27 09:50:16	supki	oh, I see
2013-03-27 09:50:23	supki	I don't know if you can do that
2013-03-27 09:50:34	-->	schlaftier (~daniel@5.158.165.75) has joined #haskell
2013-03-27 09:51:22	-->	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has joined #haskell
2013-03-27 09:51:26	supki	adnap: note that  typeOf foldl  on the type level does not do what you probably think it does, it's just 2 type variables like in  f a
2013-03-27 09:51:49	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-27 09:52:26	adnap	@ty (\f _ -> (undefined :: (typeOf f -> a -> (a -> b -> a) -> a -> [b] -> a)) foldl "foo"
2013-03-27 09:52:27	lambdabot	parse error (possibly incorrect indentation)
2013-03-27 09:53:13	adnap	@ty (\f _ -> (undefined :: typeOf f -> a -> (a -> b -> a) -> a -> [b] -> a)) foldl "foo"
2013-03-27 09:53:14	lambdabot	typeOf f -> a -> (a -> b -> a) -> a -> [b] -> a
2013-03-27 09:53:28	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-03-27 09:53:36	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Quit: Page closed)
2013-03-27 09:54:40	-->	system64 (~system64@182.68.249.0) has joined #haskell
2013-03-27 09:54:45	-->	AfC (~andrew@203-174-172-234.static-cust.nw.aapt.net.au) has joined #haskell
2013-03-27 09:54:58	supki	adnap: anyway, you can use  :: (t -> b) -> t -> t -> b  to specify first argument's type, :: (s -> t -> b) -> s -> t -> (s -> t -> b)  to specify first two arguments' type and so on
2013-03-27 09:55:10	adnap	Yeah
2013-03-27 09:55:21	adnap	But the annoying thing is having to type the type of the function
2013-03-27 09:55:31	supki	you don't need to
2013-03-27 09:55:38	supki	@ty (undefined :: (s -> t -> b) -> s -> t -> (s -> t -> b)) foldl (++) ""
2013-03-27 09:55:39	lambdabot	([Char] -> [Char] -> [Char]) -> [Char] -> [[Char]] -> [Char]
2013-03-27 09:55:49	supki	I did not specify type of foldl in any way
2013-03-27 09:55:58	adnap	Uh...
2013-03-27 09:56:00	supki	well
2013-03-27 09:56:12	supki	I did specify that it takes at least 2 arguments
2013-03-27 09:56:23	adnap	:t foldl
2013-03-27 09:56:25	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-03-27 09:57:01	supki	s = (a -> b -> a), t = a, b = [b] -> a
2013-03-27 09:57:13	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-03-27 09:57:37	adnap	I see
2013-03-27 09:57:56	<--	edsko (~edsko@79.97.126.24) has quit (Quit: Leaving)
2013-03-27 09:58:16	-->	_boegel_ (~boegel@b246h203.ugent.be) has joined #haskell
2013-03-27 09:58:23	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-03-27 09:58:38	adnap	I wish I could just do something like (a :: Int) in typeOf foldl
2013-03-27 09:59:16	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-27 09:59:19	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Ping timeout: 264 seconds)
2013-03-27 09:59:44	supki	@ty foldl :: (a ~ Int) => (a -> b -> a) -> a -> [b] -> a
2013-03-27 09:59:45	lambdabot	    Illegal equational constraint a ~ Int
2013-03-27 09:59:45	lambdabot	    (Use -XGADTs or -XTypeFamilies to permit this)
2013-03-27 09:59:45	lambdabot	    In an expression type signature:
2013-03-27 09:59:50	supki	oh well
2013-03-27 09:59:56	-->	Palmik (~palmik@man-208-121.pks.muni.cz) has joined #haskell
2013-03-27 09:59:57	supki	anyway, it works in ghci
2013-03-27 10:00:01	adnap	No way!
2013-03-27 10:00:06	<--	issimus (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-27 10:00:07	adnap	That's what I was asking for all along
2013-03-27 10:00:08	-->	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has joined #haskell
2013-03-27 10:00:14	adnap	Wait...
2013-03-27 10:00:21	adnap	I don't want to have to type the type of foldl though
2013-03-27 10:00:26	supki	yeah
2013-03-27 10:01:09	adnap	"Assume that :t foldl applies the conventional type labeling. replace symbol x with type of value v"
2013-03-27 10:01:17	adnap	That's what I want
2013-03-27 10:01:18	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 10:01:25	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-27 10:01:54	<--	turiya (~turiya@14.139.65.3) has quit (Quit: Leaving)
2013-03-27 10:02:36	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 264 seconds)
2013-03-27 10:02:38	<--	system64 (~system64@182.68.249.0) has quit (Remote host closed the connection)
2013-03-27 10:02:42	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-27 10:03:18	<--	AfC (~andrew@203-174-172-234.static-cust.nw.aapt.net.au) has quit (Quit: Leaving.)
2013-03-27 10:03:37	supki	that's would be rather limited
2013-03-27 10:03:46	adnap	Why?
2013-03-27 10:03:52	supki	most of the time :t would tell something like  a137 -> b75 -> ...
2013-03-27 10:04:32	supki	there are even abominations like liftM
2013-03-27 10:04:34	supki	:t liftM
2013-03-27 10:04:35	lambdabot	Monad m => (a1 -> r) -> m a1 -> m r
2013-03-27 10:04:48	-->	joaopizani (~joaopizan@188.90.15.206) has joined #haskell
2013-03-27 10:04:50	adnap	I could do ":t f", look for the label, l, of the type I want to specify, and then supply (l -> s), where s is a specific type
2013-03-27 10:05:18	-->	Swizec (~swizec@93.103.26.7) has joined #haskell
2013-03-27 10:05:25	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 246 seconds)
2013-03-27 10:05:32	supki	now that sounds like a nice idea for a project ;)
2013-03-27 10:06:23	adnap	Even better would be...
2013-03-27 10:07:26	-->	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-27 10:07:34	adnap	What would the type of foldl be if I called it like this: "foldl _ "hi" _"
2013-03-27 10:09:12	<--	XexonixXexillion (~LudvikGal@130.56.84.8) has quit (Remote host closed the connection)
2013-03-27 10:09:46	quicksilver	@type foldl ?a "hi" ?b
2013-03-27 10:09:48	lambdabot	(?a::[Char] -> b -> [Char], ?b::[b]) => [Char]
2013-03-27 10:09:50	quicksilver	adnap: like that?
2013-03-27 10:10:01	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 10:10:12	adnap	quicksilver: Whoa
2013-03-27 10:10:39	<--	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has quit (Quit: WeeChat 0.3.8)
2013-03-27 10:10:44	quicksilver	implicit parameters are pretty horrific to actually program with
2013-03-27 10:10:52	quicksilver	but they're quite handy for type-checking tricks :)
2013-03-27 10:10:59	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-03-27 10:11:00	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 264 seconds)
2013-03-27 10:11:06	adnap	What are implicit parameters?
2013-03-27 10:11:31	-->	Boney (~paul@124-168-104-147.dyn.iinet.net.au) has joined #haskell
2013-03-27 10:11:35	quicksilver	you can look them up in the manual if you want :)
2013-03-27 10:11:48	quicksilver	they're parameters which are implicitly passed around as a context, a bit like type class instances
2013-03-27 10:12:03	danr	adnap http://www.haskell.org/haskellwiki/Implicit_parameters
2013-03-27 10:12:06	adnap	quicksilver: One problem with the output is that it doesn't give "([Char] -> b -> [Char]) -> [Char] -> [b] -> [Char]"
2013-03-27 10:12:25	-->	Taneb (d917e6b6@gateway/web/freenode/ip.217.23.230.182) has joined #haskell
2013-03-27 10:12:26	quicksilver	yes. Will I wasn't quite sure what you wanted.
2013-03-27 10:12:27	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-27 10:12:53	adnap	quicksilver: That's what I want
2013-03-27 10:13:08	quicksilver	you can define a help "withSecondParameter" such that you could write foldl `withSecondParameter` (undefined::[Char])
2013-03-27 10:13:18	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 252 seconds)
2013-03-27 10:13:21	quicksilver	or indeed foldl `withSecondParameter` "hi"
2013-03-27 10:13:31	shachaf	@ty (\a b c -> foldl a (b::[Char]) c)
2013-03-27 10:13:32	lambdabot	([Char] -> b -> [Char]) -> [Char] -> [b] -> [Char]
2013-03-27 10:14:04	adnap	shachaf: Nice
2013-03-27 10:14:27	adnap	@type foldl ?a "hi"
2013-03-27 10:14:28	lambdabot	(?a::[Char] -> b -> [Char]) => [b] -> [Char]
2013-03-27 10:14:36	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-03-27 10:14:38	quicksilver	@let withSecondParameter f x :: (a -> b -> c) -> b -> (a -> b -> c); withSecondParameter = undefined
2013-03-27 10:14:38	lambdabot	  Left-hand side of type signature is not a variable: withSecondParameter f x
2013-03-27 10:14:55	quicksilver	@let withSecondParameter :: (a -> b -> c) -> b -> (a -> b -> c); withSecondParameter = undefined
2013-03-27 10:14:57	lambdabot	 Defined.
2013-03-27 10:15:05	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-27 10:15:05	quicksilver	@type foldl `withSecondParameter` "hi"
2013-03-27 10:15:06	lambdabot	([Char] -> b -> [Char]) -> [Char] -> [b] -> [Char]
2013-03-27 10:15:21	adnap	quicksilver: But one still has to define withXParameter for all X
2013-03-27 10:15:45	quicksilver	well you could also define #$ and #* such that you could write
2013-03-27 10:15:50	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 10:15:54	adnap	And with "@ty (\a b c -> foldl a (b::[Char]) c)
2013-03-27 10:15:59	-->	nexx (~SPS-User@dslb-178-011-054-025.pools.arcor-ip.net) has joined #haskell
2013-03-27 10:16:04	adnap	One has to type out a, b, c, etc.
2013-03-27 10:16:06	quicksilver	foldl #$ undefined #* "hi" #* undefined
2013-03-27 10:16:08	quicksilver	I think.
2013-03-27 10:16:15	-->	ulfdoz (~mary@p5B38AEA8.dip.t-dialin.net) has joined #haskell
2013-03-27 10:18:07	adnap	quicksilver: What if it was like "foldl _ Char _"
2013-03-27 10:18:21	<--	lispy (~lispy@li85-105.members.linode.com) has quit (Ping timeout: 276 seconds)
2013-03-27 10:18:21	<--	frontendloader (~mst@tomservo.robotrollcall.org) has quit (Ping timeout: 276 seconds)
2013-03-27 10:18:43	adnap	or "foldl (Char -> _ -> Char) _ _"
2013-03-27 10:19:11	-->	system64 (~system64@182.68.249.0) has joined #haskell
2013-03-27 10:19:21	-->	lispy (~lispy@li85-105.members.linode.com) has joined #haskell
2013-03-27 10:19:31	shachaf	I thinkt he whole thing may be a bit misguided.
2013-03-27 10:19:38	-->	frontendloader (~mst@tomservo.robotrollcall.org) has joined #haskell
2013-03-27 10:19:43	shachaf	Type variables aren't bad. They give you more information than [Char]
2013-03-27 10:19:55	adnap	That's not the point of it
2013-03-27 10:20:02	-->	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has joined #haskell
2013-03-27 10:20:21	adnap	The point of it is to help with the mental substitution of a specific type when working out how one will call a function
2013-03-27 10:20:37	<--	edon (~user@albalug/edon) has quit (Ping timeout: 248 seconds)
2013-03-27 10:21:07	--	Chousuke_ is now known as Chousuke
2013-03-27 10:21:29	<--	ivan\ (~ivan@unaffiliated/ivan/x-000001) has quit (Ping timeout: 255 seconds)
2013-03-27 10:22:14	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-27 10:23:43	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-27 10:23:44	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-27 10:23:44	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-27 10:24:08	<--	Carb0n13 (~Carb0n13@ip70-161-254-153.hr.hr.cox.net) has quit
2013-03-27 10:24:14	-->	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has joined #haskell
2013-03-27 10:24:18	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Ping timeout: 252 seconds)
2013-03-27 10:24:28	-->	arenz (arenz@nat/ibm/x-uadueqjvriqgfvkv) has joined #haskell
2013-03-27 10:26:39	-->	ivan\ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-03-27 10:26:45	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-03-27 10:26:55	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 10:27:57	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-27 10:28:05	-->	tanakh_ (~tanakh@x091056.ppp.asahi-net.or.jp) has joined #haskell
2013-03-27 10:28:19	Taneb	How does HashSet handle hash collisions?
2013-03-27 10:28:32	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-27 10:28:40	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Remote host closed the connection)
2013-03-27 10:28:54	<--	maksbotan_ (~quassel@2a00:11d8:503:858c:226:9eff:fe21:2763) has quit (Ping timeout: 264 seconds)
2013-03-27 10:29:17	-->	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-27 10:29:42	quchen	Taneb: Using Eq
2013-03-27 10:30:07	Taneb	Right
2013-03-27 10:31:16	<--	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has left #haskell ("Lämnar")
2013-03-27 10:31:20	<--	system64 (~system64@182.68.249.0) has quit (Ping timeout: 246 seconds)
2013-03-27 10:31:24	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Disconnected by services)
2013-03-27 10:31:47	-->	maksbotan (~quassel@2a00:11d8:503:858c:226:9eff:fe21:2763) has joined #haskell
2013-03-27 10:31:47	<--	maksbotan (~quassel@2a00:11d8:503:858c:226:9eff:fe21:2763) has quit (Changing host)
2013-03-27 10:31:47	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-03-27 10:32:03	-->	Sonder (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-03-27 10:32:33	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Ping timeout: 252 seconds)
2013-03-27 10:33:53	quchen	What do the docs mean with "O(min(n,W))" here? http://hackage.haskell.org/packages/archive/unordered-containers/0.2.3.0/doc/html/Data-HashSet.html#g:3
2013-03-27 10:34:02	quchen	Is "W" some sort of standard notation?
2013-03-27 10:34:18	quchen	Like "Width of the set"? In any case, what's n then?
2013-03-27 10:34:50	<--	ozgura (~ozgura@host-2-96-30-184.as13285.net) has quit (Remote host closed the connection)
2013-03-27 10:35:07	supki	W is number of bits in something I think
2013-03-27 10:35:13	Chousuke	I'm pretty sure it has something to do with the hashing.
2013-03-27 10:35:22	Chousuke	:P
2013-03-27 10:35:38	-->	ijp (~user@host86-143-194-152.range86-143.btcentralplus.com) has joined #haskell
2013-03-27 10:36:08	supki	hmm, at least Data.IntMap uses W in that sense
2013-03-27 10:36:09	quchen	Hm.
2013-03-27 10:36:17	supki	not sure about unordered-containers
2013-03-27 10:36:23	quchen	Still weird that "member" isn't log(n)
2013-03-27 10:36:28	quchen	So there's gotta be some magic in there
2013-03-27 10:37:08	Chousuke	bloom filters? :P
2013-03-27 10:37:49	Chousuke	hmm
2013-03-27 10:38:54	Chousuke	it just does a HashMap lookup
2013-03-27 10:38:57	quchen	It's quite odd as "HashSet a = HashMap a ()"
2013-03-27 10:38:58	quchen	Yeah
2013-03-27 10:39:05	quchen	And the HashMap docs say log(n)
2013-03-27 10:39:21	quchen	Which makes sense as average case
2013-03-27 10:39:39	Chousuke	it's HashMap.Lazy which says the same as HashSet
2013-03-27 10:39:56	Chousuke	"Many operations have a worst-case complexity of O(min(n,W)). This means that the operation can become linear in the number of elements with a maximum of W -- the number of bits in an Int (32 or 64). "
2013-03-27 10:41:10	quchen	Where does it say that?
2013-03-27 10:41:18	Chousuke	HashMap.Lazy documentation
2013-03-27 10:41:29	Chousuke	at the top
2013-03-27 10:41:35	quchen	Can't find it in there :s
2013-03-27 10:41:45	quchen	0.2.3.0?
2013-03-27 10:41:45	Chousuke	http://hackage.haskell.org/packages/archive/unordered-containers/0.1.2.0/doc/html/Data-HashMap-Lazy.html here
2013-03-27 10:42:00	Chousuke	just the first hit in google, didn't look at the version
2013-03-27 10:42:15	<--	sw2wolf (~czsq888@171.216.96.202) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-27 10:42:30	quchen	That comment was removed it seems
2013-03-27 10:42:54	quchen	I wonder why it even talks about worst-case complexity.
2013-03-27 10:43:19	quchen	That corresponds to having a constant hash function, which is clearly not important for applications
2013-03-27 10:43:34	Chousuke	I suppose due to laziness?
2013-03-27 10:43:35	hamid	I want to debug or trace to see which function calls or specifically what arguments are passed when my function calls itself recursively. Is there any way to do that?
2013-03-27 10:43:40	<--	MnO2 (~MnO2@nat/yahoo/x-iltnuqixhwttkkfh) has quit (Quit: MnO2)
2013-03-27 10:44:05	quchen	Chousuke: I think HashMap is a Map of lists.
2013-03-27 10:44:31	quchen	Lookup means calculating the hash, and looking it up in the Map. If there are multiple hits, Eq is used to traverse the list of "things that have this hash"
2013-03-27 10:44:51	quchen	So only when two hashes collide you have to traverse the list
2013-03-27 10:45:31	quchen	hamid: The quick and dirty way of doing this is using Debug.Trace
2013-03-27 10:45:37	Chousuke	yeah, well, you never know with laziness and functional data structures. They can get weird. :)
2013-03-27 10:45:46	thirsteh	in [x * y | x <- [1..100], y <- [1..100], cond $ x * y], does x * y only happen once per permutation (in GHC)?
2013-03-27 10:45:52	-->	MnO2 (~MnO2@nat/yahoo/x-crdeexogdpweskbc) has joined #haskell
2013-03-27 10:45:57	quchen	thirsteh: No.
2013-03-27 10:46:07	quchen	Wait
2013-03-27 10:46:12	hamid	quchen, as long as it's quick it's fine ;) thanks.
2013-03-27 10:46:15	quchen	Restate that, it could also be "yes"
2013-03-27 10:46:52	quchen	hamid: Debug.Trace.trace gives you the "trace" function, which allows you to print stuff out of pure functions.
2013-03-27 10:47:08	hamid	quchen, awesome! that's it :)
2013-03-27 10:47:10	quchen	It's not safe to use in release code, but as a quick way of "looking inside" it's fine
2013-03-27 10:47:32	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 10:47:51	thirsteh	quchen: any rule of thumb for this? (Same for multiple "f g" in a function/where clause)
2013-03-27 10:48:22	quchen	thirsteh: Oh, you mean whether GHC recognizes x*y as appearing twice? Possibly. It's called common subexpression elimination.
2013-03-27 10:48:30	thirsteh	quchen: yes
2013-03-27 10:48:40	supki	thirsteh: if you want to share computation it's better to state that explicitly with let
2013-03-27 10:48:50	thirsteh	quchen: to rephrase, I'm curious if there is a rule-of-thumb for when common subexpression elimination happens
2013-03-27 10:49:04	thirsteh	or doesn't happen
2013-03-27 10:49:14	quchen	I'm not sure how good GHC is at this, and I wouldn't rely on it. If you *know* you have common subexpressions, better use "let" manually.
2013-03-27 10:49:23	quchen	GHC does do this, yes.
2013-03-27 10:49:44	thirsteh	quchen: this is one of the (surprisingly) few cases where I'd like to retain the list comprehension
2013-03-27 10:50:03	supki	you can use let in list comprehensions
2013-03-27 10:50:18	thirsteh	ah, great
2013-03-27 10:50:22	quchen	filter cond $ liftM2 (*) [1..100] [1..100]
2013-03-27 10:50:24	<--	niko (~niko@freenode/staff/ubuntu.member.niko) has quit (Quit: leaving)
2013-03-27 10:50:34	thirsteh	quchen: that's also pretty good
2013-03-27 10:50:46	quchen	filter cond $ liftA2 (*) [1..100] [1..100]
2013-03-27 10:50:51	quchen	A!
2013-03-27 10:50:56	quchen	Booo monads ;-)
2013-03-27 10:50:58	supki	> [z | x <- [1..10], y <- [1..10], let z = x * y]
2013-03-27 10:51:00	lambdabot	  [1,2,3,4,5,6,7,8,9,10,2,4,6,8,10,12,14,16,18,20,3,6,9,12,15,18,21,24,27,30,...
2013-03-27 10:51:18	thirsteh	perfect, thanks guys
2013-03-27 10:51:26	_yezariaely	I have fmap (+1) (Just 1) and fmap (+1) [1,2,3] which works both fine. How would I combine them? i.e. fmap (+1) [Just 1, Nothing, Just 2] = [Just 2, Nothing, Just 3] ?
2013-03-27 10:51:29	quchen	supki: Do you know what list comprehensions desugar to? Is it monadic code or only something similar?
2013-03-27 10:51:43	quchen	_yezariaely: (fmap . fmap)
2013-03-27 10:51:46	supki	@undo [z | x <- [1..10], y <- [1..10], let z = x * y]
2013-03-27 10:51:46	lambdabot	concatMap (\ x -> concatMap (\ y -> let { z = x * y} in [z]) [1 .. 10]) [1 .. 10]
2013-03-27 10:52:07	quchen	_yezariaely: Chaining "fmap" like this allows you to go multiple levels deep.
2013-03-27 10:52:16	_yezariaely	cool
2013-03-27 10:52:19	quchen	> (fmap.fmap) (+1) [Just 1, Nothing, Just 2]
2013-03-27 10:52:20	_yezariaely	thx
2013-03-27 10:52:21	lambdabot	  [Just 2,Nothing,Just 3]
2013-03-27 10:53:28	quchen	_yezariaely: the more obvious way would be using fmap (fmap (+1)) [...], but you can rewrite "f (g x)" as (f.g) x" and that's what happens here
2013-03-27 10:53:30	-->	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 10:53:49	quchen	Plus it's more readable when you know about the idiom
2013-03-27 10:54:15	-->	niko (~niko@freenode/staff/ubuntu.member.niko) has joined #haskell
2013-03-27 10:54:31	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 264 seconds)
2013-03-27 10:54:32	supki	quchen: I think report specifies what list comprehensions desugar to
2013-03-27 10:54:53	supki	yeah, section 3.11
2013-03-27 10:55:19	quchen	Oh. Well no monads then
2013-03-27 10:55:26	Chousuke	if you don't like repeating fmap you can also do fmap (+1) <$> [Just 1, Nothing, Just 2] which is actually just repeating fmap but with a different name :P
2013-03-27 10:55:31	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-27 10:56:16	<--	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-27 10:56:32	-->	piotr_ (~quassel@e178075099.adsl.alicedsl.de) has joined #haskell
2013-03-27 10:56:47	Chousuke	applicatives are fun
2013-03-27 10:56:53	supki	well, monad comprehensions probably desugar to monadic code
2013-03-27 10:56:53	<--	piotr (~quassel@e178090242.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-03-27 10:57:49	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-27 10:57:57	<--	LMolr (~LMolr@87.19.246.78) has quit (Ping timeout: 248 seconds)
2013-03-27 11:01:42	-->	jdnavarro_ (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has joined #haskell
2013-03-27 11:01:44	-->	trescenzi (~trescenzi@148.100.79.148) has joined #haskell
2013-03-27 11:02:18	quchen	But that's not part of the report
2013-03-27 11:02:30	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 11:02:58	<--	jdnavarro (~danny@125.Red-88-0-5.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-03-27 11:03:03	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 11:03:07	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 240 seconds)
2013-03-27 11:03:13	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 11:03:33	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-27 11:03:35	-->	eirikur (~eirikur@46-239-208-19.tal.is) has joined #haskell
2013-03-27 11:04:47	-->	heruur (~tvh@167-147-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-27 11:05:00	<--	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 264 seconds)
2013-03-27 11:05:30	<--	Taneb (d917e6b6@gateway/web/freenode/ip.217.23.230.182) has quit (Quit: Page closed)
2013-03-27 11:05:35	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 11:06:14	-->	SoupEvil (~jloos@e177124038.adsl.alicedsl.de) has joined #haskell
2013-03-27 11:06:31	<--	trescenzi (~trescenzi@148.100.79.148) has quit (Ping timeout: 264 seconds)
2013-03-27 11:06:55	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 11:07:11	-->	bradleya_ (~brad@1.129.138.34) has joined #haskell
2013-03-27 11:08:06	<--	eirikur (~eirikur@46-239-208-19.tal.is) has quit (Ping timeout: 248 seconds)
2013-03-27 11:08:35	-->	system64 (~system64@182.68.249.0) has joined #haskell
2013-03-27 11:09:34	<--	SoupE (~jloos@g231161080.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-03-27 11:09:36	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 245 seconds)
2013-03-27 11:09:42	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-03-27 11:09:57	<--	schlaftier (~daniel@5.158.165.75) has quit (Ping timeout: 252 seconds)
2013-03-27 11:10:07	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-03-27 11:10:17	<--	system64 (~system64@182.68.249.0) has quit (Remote host closed the connection)
2013-03-27 11:10:19	<--	mkouhei (~maeda_koh@124x35x68x250.ap124.ftth.ucom.ne.jp) has left #haskell
2013-03-27 11:10:32	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 246 seconds)
2013-03-27 11:11:08	<--	plutoniix (~plutoniix@ppp-171-97-163-25.revip8.asianet.co.th) has quit (Quit: จรลี จรลา)
2013-03-27 11:11:36	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 252 seconds)
2013-03-27 11:12:15	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Quit: Leaving)
2013-03-27 11:14:02	supki	no, they aren't, but ghc user guide should describe their desugaring
2013-03-27 11:14:06	-->	cinimod (~user@cpc27-nmal16-2-0-cust206.19-2.cable.virginmedia.com) has joined #haskell
2013-03-27 11:14:21	supki	http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#monad-comprehensions
2013-03-27 11:14:22	-->	Reite (~Reite@cm-84.211.71.25.getinternet.no) has joined #haskell
2013-03-27 11:14:55	-->	chrisdone (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-03-27 11:15:15	cinimod	I am trying to install a package which requires base==4.6.*
2013-03-27 11:15:15	lambdabot	cinimod: You have 1 new message. '/msg lambdabot @messages' to read it.
2013-03-27 11:15:22	-->	EarlGray (~mitra@88.154.0.153) has joined #haskell
2013-03-27 11:15:26	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 245 seconds)
2013-03-27 11:16:19	supki	cinimod: you will need ghc 7.6.1 at least for that
2013-03-27 11:16:23	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-27 11:16:59	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-03-27 11:17:44	cinimod	I just tried to do that
2013-03-27 11:17:53	hamid	quchen, now I get what do you mean by dirty :P
2013-03-27 11:18:17	hamid	nvm this was just a testcase :)
2013-03-27 11:18:18	-->	shamrock (~user@host-78-149-33-218.as13285.net) has joined #haskell
2013-03-27 11:18:42	--	shamrock is now known as Guest86591
2013-03-27 11:18:43	cinimod	./configure --prefix=/Library/Haskell
2013-03-27 11:18:53	cinimod	sudo make install
2013-03-27 11:19:01	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-27 11:19:04	<--	Guest86591 (~user@host-78-149-33-218.as13285.net) has quit (Client Quit)
2013-03-27 11:19:23	quchen	hamid: "dirty" in the sense it's a dirty hack and should never appear outside of testing
2013-03-27 11:19:24	-->	rgr (~user@host-78-149-33-218.as13285.net) has joined #haskell
2013-03-27 11:19:57	quchen	'trace' performs IO out of a seemingly pure function
2013-03-27 11:20:00	-->	EarlGray^ (~mitra@88.154.217.57) has joined #haskell
2013-03-27 11:20:26	hamid	quchen, yes. but it's real useful to me. i didn't want to make mine impure.
2013-03-27 11:21:04	cinimod	It claimed to have installed but it looks like it didn't
2013-03-27 11:21:14	hamid	quchen, there's no other way like ghc tracing the function calls?
2013-03-27 11:21:46	quchen	hamid: You can of course use 'trace', but you should take it out again once you know what you wanted.
2013-03-27 11:22:11	quchen	hamid: Maybe look at the GHCi debugger, but I'm not familiar with that one
2013-03-27 11:22:36	hamid	quchen, ok thank you.
2013-03-27 11:22:43	<--	chrisdone (~chrisdone@unaffiliated/chrisdone) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-27 11:23:01	<--	EarlGray (~mitra@88.154.0.153) has quit (Ping timeout: 248 seconds)
2013-03-27 11:23:08	cinimod	Despite me setting the prefix correctly it has installed it in /Library/Haskell/lib
2013-03-27 11:23:16	cinimod	Not sure why it would have done that
2013-03-27 11:23:26	-->	end3rW (~end3rW@lak-67-150.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-27 11:24:02	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-27 11:24:05	-->	bitonic` (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-27 11:24:10	cinimod	bash-3.2$ /Library/Haskell/lib/ghc-7.6.2/ghc --version
2013-03-27 11:24:10	cinimod	The Glorious Glasgow Haskell Compilation System, version 7.6.2
2013-03-27 11:24:10	cinimod	 
2013-03-27 11:24:31	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 264 seconds)
2013-03-27 11:24:54	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Quit: Lost terminal)
2013-03-27 11:25:22	cinimod	I now have 7.4.1 and 7.6.2
2013-03-27 11:25:39	cinimod	How do I tell cabal to use 7.6.2 and 7.4.1?
2013-03-27 11:25:43	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 264 seconds)
2013-03-27 11:25:55	dcoutts_	cinimod: -w ghc-7.6.2
2013-03-27 11:26:07	dcoutts_	assuming ghc-7.6.2 is on your $PATH
2013-03-27 11:26:17	dcoutts_	otherwise you'd need to pass the full path to it
2013-03-27 11:26:21	cinimod	It isn't at the moment
2013-03-27 11:26:25	cinimod	But it can be
2013-03-27 11:26:32	cinimod	Thanks
2013-03-27 11:26:55	dcoutts_	alternatively, just change your $PATH so that the 'ghc' on your $PATH is the one you want
2013-03-27 11:27:16	-->	Botje (~Botje@d51A4033C.access.telenet.be) has joined #haskell
2013-03-27 11:27:16	<--	Botje (~Botje@d51A4033C.access.telenet.be) has quit (Changing host)
2013-03-27 11:27:16	-->	Botje (~Botje@p3m/member/Botje) has joined #haskell
2013-03-27 11:27:49	dcoutts_	cinimod: for people who need to use several (e.g. for testing) we usually arrange that all of them are on the path, and since ghc uses versioned names then that works out nicely
2013-03-27 11:27:50	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-27 11:29:12	cinimod	Cool! It is for testing. I have most of my stuff using the current platform but someone has sent me something that only works with the latest base.
2013-03-27 11:29:25	<--	bitonic` (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 246 seconds)
2013-03-27 11:29:37	-->	x7 (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-27 11:30:59	-->	Philonous (~Philonous@dslb-178-000-130-110.pools.arcor-ip.net) has joined #haskell
2013-03-27 11:31:39	-->	spion_ (~spion@unaffiliated/spion) has joined #haskell
2013-03-27 11:32:37	<--	leoncamel (~leoncamel@219.143.150.16) has quit (Ping timeout: 248 seconds)
2013-03-27 11:32:58	-->	Gruu_ (~Gruu@213.211.132.86.static.edpnet.net) has joined #haskell
2013-03-27 11:33:02	-->	leoncamel (~leoncamel@124.126.218.38) has joined #haskell
2013-03-27 11:34:05	-->	aajmakin (aajmakin@kosh.org.aalto.fi) has joined #haskell
2013-03-27 11:34:50	-->	blueonyx (~blueonyx@p54BA32AE.dip.t-dialin.net) has joined #haskell
2013-03-27 11:34:50	<--	blueonyx (~blueonyx@p54BA32AE.dip.t-dialin.net) has quit (Changing host)
2013-03-27 11:34:50	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-03-27 11:35:07	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-27 11:35:16	<--	adlan (~adlan@115.85.128.54) has quit (Quit: Leaving)
2013-03-27 11:35:47	<--	EarlGray^ (~mitra@88.154.217.57) has quit (Read error: Connection reset by peer)
2013-03-27 11:36:12	<--	edtsech (~edtsech@194.213.198.34) has quit (Ping timeout: 264 seconds)
2013-03-27 11:36:57	-->	bitonic` (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-27 11:37:48	-->	typoclass (~typoclass@p4FC921C6.dip.t-dialin.net) has joined #haskell
2013-03-27 11:38:12	-->	eirikur (~eirikur@46-239-208-19.tal.is) has joined #haskell
2013-03-27 11:38:17	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-27 11:38:57	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-27 11:39:31	<--	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has quit (Ping timeout: 264 seconds)
2013-03-27 11:41:16	<--	MnO2 (~MnO2@nat/yahoo/x-crdeexogdpweskbc) has quit (Quit: MnO2)
2013-03-27 11:41:54	-->	k00mi (~koomi@dslb-188-099-034-167.pools.arcor-ip.net) has joined #haskell
2013-03-27 11:43:44	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Ping timeout: 245 seconds)
2013-03-27 11:43:49	<--	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has quit (Ping timeout: 248 seconds)
2013-03-27 11:44:20	-->	Antz (~Antz@203-217-58-195.dyn.iinet.net.au) has joined #haskell
2013-03-27 11:44:48	Antz	hello
2013-03-27 11:45:10	<--	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has quit (Quit: ZNC - http://znc.in)
2013-03-27 11:45:26	<--	Antz (~Antz@203-217-58-195.dyn.iinet.net.au) has quit (Client Quit)
2013-03-27 11:45:27	-->	haskellhero (~hugo@elab.fcsh.unl.pt) has joined #haskell
2013-03-27 11:45:44	-->	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-27 11:46:12	quchen	Good day to you sir.
2013-03-27 11:46:17	cinimod	bash-3.2$ which ghc
2013-03-27 11:46:17	cinimod	/Library/Haskell/lib/ghc-7.6.2/ghc
2013-03-27 11:46:17	cinimod	 
2013-03-27 11:46:25	cinimod	But I get
2013-03-27 11:46:34	cinimod	bash-3.2$ ghc
2013-03-27 11:46:35	cinimod	ghc: missing -B<dir> option
2013-03-27 11:46:35	cinimod	 
2013-03-27 11:46:54	adimit	OK, so here's an embarrassing newbie question. Suppose I want to write a function average :: (Num n, Fractional m) => [n] -> m -- I know why it obviously won't work so easily, but the question is: can it be done at all?
2013-03-27 11:47:19	<--	xpika (~jrg@110.140.145.206) has quit (Ping timeout: 264 seconds)
2013-03-27 11:47:40	 *	hackagebot weather-api 0.4.2 - Weather api implemented in haskell  http://hackage.haskell.org/package/weather-api-0.4.2 (PeterGoncharov)
2013-03-27 11:47:55	<--	Swizec (~swizec@93.103.26.7) has quit (Quit: Computer has gone to sleep.)
2013-03-27 11:48:20	adimit	So, the problem, as I see it, is that \ns -> sum ns / fromIntegral (length ns) won't give the desired output, becaues of sum's type (Num a => [a] -> a)
2013-03-27 11:49:08	cinimod	Why is that a problem?
2013-03-27 11:49:14	<--	haskellhero (~hugo@elab.fcsh.unl.pt) has quit (Client Quit)
2013-03-27 11:49:24	<--	Eduard_Munteanu (~Eduard_Mu@188.25.245.211) has quit (Ping timeout: 264 seconds)
2013-03-27 11:50:00	-->	HugoDaniel (~hugo@elab.fcsh.unl.pt) has joined #haskell
2013-03-27 11:50:21	typoclass	cinimod: looks to me like ghc is present and prints a message. have you tried "ghc somefile.hs"? or "ghci"?
2013-03-27 11:50:39	adimit	because of the type of (/). If I give the average function a list of Integrals, that won't work --- I'd need fromIntegral there. But I only need it for Integrals, not for Fractionals.
2013-03-27 11:51:19	adimit	so I can write two versions of average, one for Fractional, one for Integral, but I can't make the compiler choose automatically between them.
2013-03-27 11:51:50	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-27 11:51:56	hpaste	adimit pasted “Fractional/Integral” at http://hpaste.org/84709
2013-03-27 11:52:05	cinimod	I think I would just map the ints to floats or whatever
2013-03-27 11:52:48	cinimod	@typoclass: ghci is still 7.4.1
2013-03-27 11:52:48	lambdabot	Unknown command, try @list
2013-03-27 11:53:00	cinimod	typoclass: ghci is still 7.4.1
2013-03-27 11:53:02	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-03-27 11:53:13	adimit	cinimod: how (and why map?) You don't know that they're Ints. Ideally, you only know they're Nums.
2013-03-27 11:53:24	cinimod	bash-3.2$ ghci --version
2013-03-27 11:53:24	cinimod	The Glorious Glasgow Haskell Compilation System, version 7.4.1
2013-03-27 11:53:24	cinimod	 
2013-03-27 11:53:48	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-27 11:54:13	<--	Bwild (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-03-27 11:54:17	<--	paintcan (~user@108.162.180.237) has quit (Ping timeout: 246 seconds)
2013-03-27 11:54:28	<--	bradleya_ (~brad@1.129.138.34) has quit (Read error: Connection reset by peer)
2013-03-27 11:54:29	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 248 seconds)
2013-03-27 11:54:37	-->	urm3l (~urm3l@HSI-KBW-078-043-223-061.hsi4.kabel-badenwuerttemberg.de) has joined #haskell
2013-03-27 11:54:45	cinimod	avg_i = avg_f . map fromIntegral
2013-03-27 11:54:47	-->	bradleyayers (~brad@1.129.138.34) has joined #haskell
2013-03-27 11:55:12	--	qwandor|quassel is now known as qwandor
2013-03-27 11:55:36	-->	bradleya_ (~brad@1.129.138.34) has joined #haskell
2013-03-27 11:56:03	<--	bradleya_ (~brad@1.129.138.34) has quit (Remote host closed the connection)
2013-03-27 11:56:31	adimit	cinimod: that's not what I want. What i want would be avg :: (Num a, Fractional b) => [a] -> b
2013-03-27 11:56:42	adimit	which that isn't.
2013-03-27 11:57:19	-->	schlicht (~fl@g229053127.adsl.alicedsl.de) has joined #haskell
2013-03-27 11:57:20	-->	issimus (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-03-27 11:57:21	adimit	It appears that I'm (of course not) the first one to ask this question, and that the answer isn't simple.. http://stackoverflow.com/questions/2376981/haskell-types-frustrating-a-simple-average-function :-|
2013-03-27 11:57:37	mcstar	there is a solution
2013-03-27 11:57:58	mcstar	i just always forget what the damn conversion function is, that converts from Num to Fractional
2013-03-27 11:58:11	mcstar	there is a SO question about this
2013-03-27 11:58:42	quicksilver	realToFrac
2013-03-27 11:58:48	-->	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has joined #haskell
2013-03-27 11:58:48	mcstar	that
2013-03-27 11:58:49	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-27 11:58:50	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-27 11:58:50	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-27 11:58:53	quicksilver	although it doesn't convert from Num to Fractional.
2013-03-27 11:58:54	mcstar	just found the SO question
2013-03-27 11:59:08	mcstar	it converts typeclass constraints
2013-03-27 11:59:11	<--	bradleyayers (~brad@1.129.138.34) has quit (Ping timeout: 246 seconds)
2013-03-27 11:59:11	mcstar	:t realToFrac
2013-03-27 11:59:12	quicksilver	most of the time fromIntegral and realToFrac are everything you need.
2013-03-27 11:59:13	lambdabot	(Fractional b, Real a) => a -> b
2013-03-27 11:59:24	adimit	yeah, I linked the SO question above.
2013-03-27 11:59:27	quicksilver	occasionally you might want round,floor,ceiling.
2013-03-27 11:59:45	cinimod	Hmm I don't even seem to have a package config file
2013-03-27 11:59:45	adimit	I didn't consider that just googling Fractional Integral haskell was enough..
2013-03-27 11:59:51	mcstar	adimit: i missed that ...
2013-03-27 11:59:58	-->	LAMMJohn1on (~ja@user-5af43711.broadband.tesco.net) has joined #haskell
2013-03-27 12:00:10	cinimod	bash-3.2$ ghc-pkg list
2013-03-27 12:00:10	cinimod	ghc-pkg: missing --global-package-db option, location of global package database unknown
2013-03-27 12:00:10	cinimod	 
2013-03-27 12:00:35	-->	Franciman (~quassel@host113-192-static.12-87-b.business.telecomitalia.it) has joined #haskell
2013-03-27 12:00:37	adimit	So the best I can get is average :: (Real a, Fractional b) => [a] -> b
2013-03-27 12:00:54	quicksilver	that's one thing you can get.
2013-03-27 12:01:04	mcstar	thats a pretty good thing i think
2013-03-27 12:01:18	adimit	yeah, I think it's OK, since I can feed it all numbers I want to.
2013-03-27 12:01:25	<--	issimus (~kvirc@76-221-140-251.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 248 seconds)
2013-03-27 12:01:32	quicksilver	if you want integer average you have to concede that that is a different operation.
2013-03-27 12:01:46	quicksilver	you can get intAverage :: Integral a => [a] -> a
2013-03-27 12:01:55	adimit	yeah.
2013-03-27 12:02:00	mcstar	quicksilver: you mean integer to integer?
2013-03-27 12:02:25	-->	bradleyayers (~brad@1.129.138.34) has joined #haskell
2013-03-27 12:02:27	mcstar	but thats probably not what he wants
2013-03-27 12:02:36	<--	LAMMJohnson (~ja@user-5af4341a.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-03-27 12:02:40	 *	hackagebot NXT 0.2.3 - A Haskell interface to Lego Mindstorms NXT  http://hackage.haskell.org/package/NXT-0.2.3 (MitarMilutinovic)
2013-03-27 12:02:45	<--	bradleyayers (~brad@1.129.138.34) has quit (Remote host closed the connection)
2013-03-27 12:02:52	typoclass	cinimod: could you do "echo $PATH" and check if the new ghc's directory comes before the old one's?
2013-03-27 12:02:56	mcstar	also, you can write that in terms of the more general average
2013-03-27 12:03:01	adimit	no, it's not quite, but that's ok, since intAverage is no trouble to write the way I want it.
2013-03-27 12:03:13	cinimod	bash-3.2$ echo $PATH
2013-03-27 12:03:13	cinimod	/Library/Haskell/lib/ghc-7.6.2:/Users/dom/Downloadable/pylearn2/pylearn2/scripts/train_example:/Users/dom/Downloadable/pylearn2/pylearn2/scripts:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Users/dom/Library/Haskell/bin:/Users/dom/Downloadable/pylearn2/pylearn2/scripts/train_example:/Users/dom/Downloadable/pylearn2/pylearn2/scripts:/Library/Frameworks/Python.framework/Versions/2.7/bin:/Users/dom/Library/Haskell/
2013-03-27 12:03:13	cinimod	 
2013-03-27 12:03:27	adimit	I'm just puzzled that something like (Num a, Fractional b) => a -> b doesn't exist.
2013-03-27 12:03:48	typoclass	cinimod: could you describe what your problem is?
2013-03-27 12:04:03	cinimod	bash-3.2$ ghc
2013-03-27 12:04:03	cinimod	ghc: missing -B<dir> option
2013-03-27 12:04:03	cinimod	 
2013-03-27 12:04:08	cinimod	Is one problem
2013-03-27 12:04:15	merijn	adimit: Well, not every Num might be convertible to a fractional...
2013-03-27 12:04:31	cinimod	bash-3.2$ ghc-pkg list
2013-03-27 12:04:31	cinimod	ghc-pkg: missing --global-package-db option, location of global package database unknown
2013-03-27 12:04:31	cinimod	 
2013-03-27 12:04:32	adimit	merijn: irrational numbers, say?
2013-03-27 12:04:33	cinimod	is another
2013-03-27 12:04:34	merijn	adimit: For instance, imagine a matrix/vector instance of Num, could you convert those to a Fractional?
2013-03-27 12:04:39	merijn	adimit: Those too, yes
2013-03-27 12:05:18	cinimod	I thought I had followed the instructions ./configure and make install
2013-03-27 12:05:18	mcstar	Prelude has Num instances of Integer, Int, Float, Double, exactly those are the instances of Real
2013-03-27 12:05:21	merijn	adimit: Num is *really* generic, on purpose. But that generality also means that some operations may not make any sense, even if they seem sensible at first glance
2013-03-27 12:05:30	-->	LAMMJohnson (~ja@user-5af43731.broadband.tesco.net) has joined #haskell
2013-03-27 12:05:30	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-27 12:05:35	adimit	so I guess, barring introspection/reflection, i'd have to force the caller to use fromIntegral on the supplied value.
2013-03-27 12:05:37	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-27 12:05:54	merijn	adimit: Well, what's wrong with using Real?
2013-03-27 12:06:18	merijn	All the likely suspect people will want to use should be Real's, I think
2013-03-27 12:06:27	cinimod	With 7.4.1 I seem to have bin and doc directories
2013-03-27 12:07:21	cinimod	But not with 7.6.2
2013-03-27 12:07:30	adimit	Yeah, I think what mcstar just said probably explains my confusion: All Num instances in Prelude look like (Num a, Fractional b) => a -> b should make sense, but that's not the intended use of the Num type class.
2013-03-27 12:07:31	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 12:07:32	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 12:07:40	mcstar	you have to import, to get Num instances of Complex a and Ratio a
2013-03-27 12:07:44	adimit	since it's conceived to be more general.
2013-03-27 12:07:44	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-03-27 12:08:36	<--	LAMMJohn1on (~ja@user-5af43711.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-03-27 12:09:00	--	osfameron is now known as osfameron-
2013-03-27 12:09:17	adimit	but the (Real a, Fractional b) => [a] -> b one does what I want in any case.
2013-03-27 12:09:27	-->	csakatoku (~csakatoku@EM117-55-68-9.emobile.ad.jp) has joined #haskell
2013-03-27 12:09:47	cinimod	The doc directory seems to be in /Library/Haskell/share/doc/
2013-03-27 12:09:58	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-03-27 12:10:43	-->	silasm (~silas@c-24-4-34-172.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 12:10:44	-->	bradleyayers (~brad@1.129.138.34) has joined #haskell
2013-03-27 12:10:49	<--	Gruu_ (~Gruu@213.211.132.86.static.edpnet.net) has quit (Quit: Gruu_)
2013-03-27 12:10:52	-->	EarlGray^ (~mitra@88.155.193.200) has joined #haskell
2013-03-27 12:10:57	<--	bitonic` (~user@ppp-232-137.27-151.libero.it) has quit (Read error: Connection reset by peer)
2013-03-27 12:11:23	<--	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-27 12:11:47	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 246 seconds)
2013-03-27 12:12:04	<--	csakatok_ (~csakatoku@EM117-55-68-51.emobile.ad.jp) has quit (Ping timeout: 245 seconds)
2013-03-27 12:12:12	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 264 seconds)
2013-03-27 12:12:27	--	spion_ is now known as spion
2013-03-27 12:12:47	-->	bitonic` (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-27 12:13:27	--	amatsu\idle is now known as amatsu
2013-03-27 12:13:54	--	osfameron- is now known as osfameron
2013-03-27 12:18:35	-->	EarlGray^^ (~mitra@195.20.154.2) has joined #haskell
2013-03-27 12:19:23	-->	petekaz (~user@99-99-189-187.lightspeed.rcsntx.sbcglobal.net) has joined #haskell
2013-03-27 12:19:29	<--	EarlGray^ (~mitra@88.155.193.200) has quit (Ping timeout: 246 seconds)
2013-03-27 12:21:24	-->	circle (~circle@203-219-13-238.static.tpgi.com.au) has joined #haskell
2013-03-27 12:22:21	circle	when you define a function recursively, and have a term (x:xs)
2013-03-27 12:22:32	circle	how does haskell "know" that that means a single x with a list xs on the end?
2013-03-27 12:22:48	circle	how do they know x:xs is a single element, then a list?
2013-03-27 12:23:01	skuggi	because that's what the : means
2013-03-27 12:24:11	merijn	circle: Because that's what the type of (:) says so
2013-03-27 12:24:15	merijn	:t (:)
2013-03-27 12:24:16	lambdabot	a -> [a] -> [a]
2013-03-27 12:24:17	blueonyx	@where lyah
2013-03-27 12:24:17	lambdabot	http://www.learnyouahaskell.com/
2013-03-27 12:24:20	mcstar	x : xs == (:) x xs
2013-03-27 12:24:42	blueonyx	lyah down? :>
2013-03-27 12:24:45	blueonyx	:(
2013-03-27 12:24:45	cinimod	Where does package-db point to by default?
2013-03-27 12:25:00	circle	oh okay
2013-03-27 12:25:01	circle	thanks
2013-03-27 12:25:21	typoclass	blueonyx: yes, seems down for me :-/
2013-03-27 12:25:33	merijn	circle: Do you know how to define your own datatypes yet? (I don't want to give an example that's too difficult :)
2013-03-27 12:25:42	circle	I don't know that yet
2013-03-27 12:25:59	merijn	Ah, then nevermind for now
2013-03-27 12:26:02	circle	I think it said in the beginning of the book that ":" means that, I just forgot somewhere along the line
2013-03-27 12:27:01	merijn	circle: Basically, when you define a datatype you specify some constructors and the types of arguments those constructors have. GHC uses that information to "know" what should be there when you pattern match
2013-03-27 12:27:48	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-27 12:27:58	mcstar	ghc?
2013-03-27 12:27:59	merijn	circle: [] and : are the constructors for lists, the former taking no arguments and the : taking an item and a list. So the way haskell "knows" is because the definition of lists tells that's what happens
2013-03-27 12:28:13	circle	hmm, yeah, fair enough
2013-03-27 12:28:37	mcstar	merijn: you have to supply it, what else is to know?
2013-03-27 12:28:39	-->	edtsech (~edtsech@80.243.180.82) has joined #haskell
2013-03-27 12:28:45	mcstar	case x : xs of....
2013-03-27 12:29:20	mcstar	it not haskell that figures it, it is you, you put it there to pattern match on them
2013-03-27 12:29:22	merijn	mcstar: heh? I don't understand the relevance to the question?
2013-03-27 12:29:48	mcstar	merijn: i dont understand your answer to circle , what are you trying to explain with that 'haskell/ghc knows'?
2013-03-27 12:29:59	merijn	mcstar: circle was asking "if you pattern match (x:xs), how does the compiler tell x is a single x, where as xs is a list of x?"
2013-03-27 12:30:17	mcstar	thats a simple question of typechekcing
2013-03-27 12:30:25	merijn	mcstar: It is not as obvious as you think, for people coming from, say, python/ruby/javascript where you have heterogeneous lists
2013-03-27 12:30:32	t7	it checks the tag on the tagged union
2013-03-27 12:30:41	merijn	mcstar: Of course it's obvious and simple...to us :)
2013-03-27 12:30:48	<--	gadjo (~gggg@109.102.72.188) has quit (Ping timeout: 264 seconds)
2013-03-27 12:30:51	t7	then decomposes the datatype
2013-03-27 12:31:47	t7	its a bit scary that im gonna be teaching foreign people IT in a few weeks
2013-03-27 12:32:02	merijn	t7: How so?
2013-03-27 12:32:15	<--	sawjig (~sawjig@gateway/tor-sasl/sawjig) has quit (Ping timeout: 276 seconds)
2013-03-27 12:32:17	t7	part of my new job is 10 hours teaching a week
2013-03-27 12:32:18	merijn	How is it different from teaching non-foreign people IT? :p
2013-03-27 12:32:32	mcstar	what does it stand for?
2013-03-27 12:32:41	 *	mcstar puns
2013-03-27 12:32:54	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 276 seconds)
2013-03-27 12:33:17	t7	you have to use babbys first english words
2013-03-27 12:33:22	<--	rgr (~user@host-78-149-33-218.as13285.net) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-27 12:33:43	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 12:33:50	<--	joaopizani (~joaopizan@188.90.15.206) has quit (Quit: Lost terminal)
2013-03-27 12:34:58	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-27 12:35:26	mcstar	> 1/0
2013-03-27 12:35:27	lambdabot	  Infinity
2013-03-27 12:35:34	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-27 12:35:41	mcstar	i dont remember this happening
2013-03-27 12:35:52	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-27 12:35:54	mcstar	wth is Infinity here?
2013-03-27 12:35:54	t7	> 1 / 0 :: Int
2013-03-27 12:35:55	lambdabot	  No instance for (GHC.Real.Fractional GHC.Types.Int)
2013-03-27 12:35:56	lambdabot	   arising from a use o...
2013-03-27 12:36:05	t7	> 1 `div` 0
2013-03-27 12:36:07	lambdabot	  *Exception: divide by zero
2013-03-27 12:36:27	typoclass	mcstar: something defaults to Float or Double, and those are funky
2013-03-27 12:36:52	mcstar	> (1/0)::Float
2013-03-27 12:36:54	lambdabot	  Infinity
2013-03-27 12:37:16	-->	dfletcher (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-27 12:37:43	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Quit: Leaving)
2013-03-27 12:37:45	-->	Paprikachu (~Paprikach@77.117.247.224.wireless.dyn.drei.com) has joined #haskell
2013-03-27 12:37:57	mcstar	its just that ive never seen this before
2013-03-27 12:37:57	-->	askalski (~akuda@2001:6a0:5001:b:d4db:c35e:8120:711) has joined #haskell
2013-03-27 12:38:11	mcstar	maybe i was a good kid the whole time, and never tried division by zero
2013-03-27 12:38:20	mcstar	float division
2013-03-27 12:38:47	-->	kmrhb (~kmrhb@dsl-216-221-57-138.mtl.aei.ca) has joined #haskell
2013-03-27 12:38:51	mcstar	anyway, what is it?
2013-03-27 12:38:55	<--	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-27 12:39:03	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-27 12:39:17	<--	EarlGray^^ (~mitra@195.20.154.2) has quit (Ping timeout: 248 seconds)
2013-03-27 12:39:18	mcstar	it is pure code, and it doesnt start with ***Exception
2013-03-27 12:39:31	<--	silasm (~silas@c-24-4-34-172.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 12:39:50	merijn	mcstar: It's Infinity, as defined by IEEE754
2013-03-27 12:40:13	mcstar	> floor $ 1 / 0
2013-03-27 12:40:15	lambdabot	  179769313486231590772930519078902473361797697894230657273430081157732675805...
2013-03-27 12:40:39	merijn	IEEE754 floating points have a bunch of things like positive infinity, negative infinity, multiple different zeroes and several NaN's (Not A Number)
2013-03-27 12:40:58	merijn	Haskell Floats should follow IEEE754, I think
2013-03-27 12:41:11	mcstar	merijn: that wasnt my question, i was asking what IT is, i guess 'show' converts float inf to "Infinity"
2013-03-27 12:41:14	-->	Thomyho5 (~thomyho@mnhm-4d0130c4.pool.mediaWays.net) has joined #haskell
2013-03-27 12:41:21	merijn	Yes
2013-03-27 12:41:27	mcstar	it just wasnt clear to me first
2013-03-27 12:41:27	-->	refd (~refd@117.214.150.238) has joined #haskell
2013-03-27 12:41:40	-->	sawjig (~sawjig@gateway/tor-sasl/sawjig) has joined #haskell
2013-03-27 12:41:42	<--	refd (~refd@117.214.150.238) has quit (Max SendQ exceeded)
2013-03-27 12:41:47	merijn	I think read doesn't support it, though
2013-03-27 12:41:53	merijn	> read "Infinity" :: Float
2013-03-27 12:41:55	lambdabot	  Infinity
2013-03-27 12:41:59	merijn	oh, I guess it does
2013-03-27 12:42:03	cinimod	I've reported the problems installing 7.6.2 here if anyone is interested: http://www.haskell.org/pipermail/glasgow-haskell-users/2013-March/023903.html
2013-03-27 12:42:23	tsou	> logBase 10 1000
2013-03-27 12:42:25	mcstar	merijn: why doesnt floor error out, or something? isnt that weird?
2013-03-27 12:42:25	lambdabot	  2.9999999999999996
2013-03-27 12:42:34	-->	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has joined #haskell
2013-03-27 12:42:44	-->	ndonaldson (~Sugarloaf@61.69.24.113) has joined #haskell
2013-03-27 12:43:01	<--	ndonaldson (~Sugarloaf@61.69.24.113) has left #haskell
2013-03-27 12:43:13	-->	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-27 12:43:56	<--	bradleyayers (~brad@1.129.138.34) has quit (Remote host closed the connection)
2013-03-27 12:44:00	mcstar	the conversion from RealFrac to Integral is not checked against inf
2013-03-27 12:44:17	mcstar	i think it should give an error
2013-03-27 12:44:59	typoclass	mcstar: yes, the conversions are sometimes dubious
2013-03-27 12:45:54	<--	alexander__b (~alexander@fsf/member/alexanderb) has quit (Ping timeout: 276 seconds)
2013-03-27 12:46:06	merijn	Consult IEEE754? :p
2013-03-27 12:46:15	merijn	I avoid floats like the plague
2013-03-27 12:46:22	merijn	@quote mantissa
2013-03-27 12:46:22	lambdabot	quicksilver says: <jatqceer> i love them.  Double is my friend <quicksilver> You think he is, sure <quicksilver> he says nice things about you <quicksilver> but one day, when your back is turned, he
2013-03-27 12:46:22	lambdabot	will stab you in the back with a mantissa
2013-03-27 12:46:43	<--	dfletcher (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-27 12:47:44	mcstar	The Praying Mantissa
2013-03-27 12:48:45	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-27 12:51:02	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 12:53:11	-->	alexander__b (~alexander@107.4.189.109.customer.cdi.no) has joined #haskell
2013-03-27 12:54:19	<--	rdesfo (~ryan@c-75-68-190-48.hsd1.me.comcast.net) has left #haskell
2013-03-27 12:55:12	<--	Aune (~arne@rakanishu.lysator.liu.se) has quit (Quit: Hath Deprated)
2013-03-27 12:56:52	<--	alexander__b (~alexander@107.4.189.109.customer.cdi.no) has quit (Changing host)
2013-03-27 12:56:52	-->	alexander__b (~alexander@fsf/member/alexanderb) has joined #haskell
2013-03-27 12:57:45	 *	hackagebot http-streams 0.4.0.1 - An HTTP client using io-streams  http://hackage.haskell.org/package/http-streams-0.4.0.1 (AndrewCowie)
2013-03-27 12:58:48	<--	tanakh_ (~tanakh@x091056.ppp.asahi-net.or.jp) has quit (Quit: Leaving...)
2013-03-27 12:59:36	-->	mgq (~mgq@115-64-96-169.static.tpgi.com.au) has joined #haskell
2013-03-27 12:59:46	<--	mgq (~mgq@115-64-96-169.static.tpgi.com.au) has left #haskell
2013-03-27 13:00:12	<--	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-03-27 13:01:07	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-27 13:01:24	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-27 13:02:06	-->	trescenzi (~trescenzi@2620:91:0:163:a9f9:f0ed:6760:acde) has joined #haskell
2013-03-27 13:02:46	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-03-27 13:03:48	-->	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 13:04:26	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-27 13:05:42	-->	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has joined #haskell
2013-03-27 13:05:50	<--	jdnavarro_ (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has quit (Remote host closed the connection)
2013-03-27 13:06:16	<--	trescenzi (~trescenzi@2620:91:0:163:a9f9:f0ed:6760:acde) has quit (Ping timeout: 245 seconds)
2013-03-27 13:06:53	-->	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has joined #haskell
2013-03-27 13:07:18	-->	Y_Less (~Y_Less@host-109-97.eg.le.ac.uk) has joined #haskell
2013-03-27 13:07:19	<--	Y_Less (~Y_Less@host-109-97.eg.le.ac.uk) has quit (Client Quit)
2013-03-27 13:07:57	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 13:08:07	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 13:08:28	-->	sonda (~sonda@ppp-30-21.26-151.libero.it) has joined #haskell
2013-03-27 13:09:50	<--	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-03-27 13:10:04	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-27 13:10:11	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 13:10:20	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-03-27 13:10:30	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 13:11:14	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-27 13:11:39	<--	chatsiri_ (~chatsiri_@kuwin-133-10.kuwin.ku.ac.th) has quit (Ping timeout: 245 seconds)
2013-03-27 13:11:41	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 13:11:42	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-27 13:12:21	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-03-27 13:12:27	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 13:12:29	-->	plcplc (~quassel@188-183-115-64-dynamic.dk.customer.tdc.net) has joined #haskell
2013-03-27 13:12:59	aleator	I'd like to apply a rewrite rule to rewrite computations of form (sum (map sum (foo xs)), but I can't get the rules to fire. Besides -ddump-simple-firings, are there other tools for debugging such?
2013-03-27 13:13:16	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-03-27 13:13:21	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 245 seconds)
2013-03-27 13:13:57	arkeet	I'm guessing other rewrite rules are firing before tours.
2013-03-27 13:14:02	<--	skuggi (~skuggi@ankner.csbnet.se) has quit (Read error: Connection reset by peer)
2013-03-27 13:14:03	Boney	w/in 10
2013-03-27 13:14:14	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-27 13:14:42	<--	yacks (~yacks@180.151.36.168) has quit (Read error: Connection reset by peer)
2013-03-27 13:15:10	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-27 13:15:57	-->	Itkovian (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-03-27 13:16:09	circle	did something change recently in haskell? my book has recursive functions using like (n + 1) = a * (n) for instance but the ghci only accepts, for me at least, n = 1 * (n - 1)
2013-03-27 13:16:39	quchen	circle: (n+k) patterns aren't allowed in Haskell 2010 anymore.
2013-03-27 13:16:48	circle	jesus
2013-03-27 13:17:09	Rembane	quchen: Why? :D
2013-03-27 13:17:18	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-27 13:17:44	typoclass	circle: yes, the so-called n+k patterns were widely agreed to be a mistake, and were turned off by default. there's a compiler flag that turns them back on, if you absolutely want to
2013-03-27 13:17:47	quchen	Rembane: Because they're weird special case syntax. + isn't a data constructor after all.
2013-03-27 13:18:04	circle	Yeah I don't actually think they're very nice compared to the other way to do it
2013-03-27 13:18:09	Rembane	quchen: That's a very good point. Thanks.
2013-03-27 13:18:12	circle	but my book is doing it that way
2013-03-27 13:18:21	typoclass	circle: luckily, you really only need to watch out for "... + ... = ...". it shouldn't happen too often
2013-03-27 13:18:21	quchen	Change your book.
2013-03-27 13:18:24	<--	cognominal (~cognomina@37.161.6.121) has quit (Read error: Connection reset by peer)
2013-03-27 13:18:34	circle	this is supposed to be a pretty good one
2013-03-27 13:18:39	circle	came out in 2007.
2013-03-27 13:18:39	Rembane	Which is it?
2013-03-27 13:18:51	circle	Programming in Haskell by Graham Hutton
2013-03-27 13:18:53	sopvop	is this ok? `Context reduction stack overflow; size = 201 Use -fcontext-stack=N to increase stack size to N`
2013-03-27 13:18:56	int-e	circle: you can use the NPlusKPatterns language extension in ghc; in ghci, type  :set -XNPlusKPatterns
2013-03-27 13:19:11	-->	tanakh_ (~tanakh@x091056.ppp.asahi-net.or.jp) has joined #haskell
2013-03-27 13:19:36	sopvop	no, it is not
2013-03-27 13:19:44	typoclass	circle: even the best book will have typos and slowly go out of date. if you have doubts about any of the book's code, feel free to ask in here
2013-03-27 13:19:49	<--	charliesome (~textual@124.168.126.54) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 13:19:52	int-e	circle: but enough people have agreed that it's ugly and not very useful to have those patterns. (The same discussion also suggested to remove n-patterns, i.e.  f 0 = foo, but that didn't happen because it's too useful.)
2013-03-27 13:19:57	circle	sopvop: Not a good book you say? WHich would you recommend?
2013-03-27 13:20:09	circle	This book also uses piece-wise functions a lot. Is that also a bad idea?
2013-03-27 13:20:21	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 248 seconds)
2013-03-27 13:20:24	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 245 seconds)
2013-03-27 13:20:31	quchen	int-e: What's wrong with "f 0"? 0 is a data constructor after all
2013-03-27 13:20:44	int-e	(the justification being that f 0 = foo is really syntactic sugar for  f x | x == 0 = foo, because of the nature of numerals in Haskell, where 0 = fromInteger 0)
2013-03-27 13:20:45	quchen	Polymorphic maybe, but still
2013-03-27 13:20:47	typoclass	circle: you mean functions defined in multiple equations? "f abc = ...", "f xyz = ..." ?
2013-03-27 13:20:53	<--	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-03-27 13:21:05	int-e	quchen: it looks like one, maybe, but it isn't :)
2013-03-27 13:21:13	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-27 13:21:14	circle	Yeah. Like f a 0 = a. f a b = a * b. or whatever.
2013-03-27 13:21:19	quchen	int-e: That's not true. If you're using the guard, you need Eq. With patterns you don't.
2013-03-27 13:21:24	typoclass	circle: that's generally fine. also, you could always in a very simple way rewrite it with case-of
2013-03-27 13:21:24	-->	tanakh__ (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has joined #haskell
2013-03-27 13:21:30	circle	I know.
2013-03-27 13:21:31	int-e	quchen: but you do.
2013-03-27 13:21:32	sopvop	circle: my comment was not to you :)
2013-03-27 13:21:36	circle	So about this book. Is it bad or is it good?
2013-03-27 13:21:51	int-e	:t let f 0 = () in f
2013-03-27 13:21:52	lambdabot	(Eq a, Num a) => a -> ()
2013-03-27 13:21:58	int-e	quchen: see?
2013-03-27 13:22:00	quchen	Wat
2013-03-27 13:22:04	quchen	Color me surprised
2013-03-27 13:22:13	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 240 seconds)
2013-03-27 13:23:05	quchen	So what is 0 then?
2013-03-27 13:23:08	quchen	CAF?
2013-03-27 13:23:12	typoclass	quchen: it's somewhat surprising, yes. but it seems to work well enough
2013-03-27 13:23:21	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-03-27 13:23:40	int-e	syntactic sugar for fromInteger 0; now that Integer is actually a constant.
2013-03-27 13:23:59	quchen	That plus guard?
2013-03-27 13:24:05	int-e	quchen: as a pattern, yes.
2013-03-27 13:24:22	quchen	Oh, and 0 is generally fromInteger 0.
2013-03-27 13:24:26	quchen	Well that makes sense
2013-03-27 13:24:34	quchen	But the pattern part seemed odd
2013-03-27 13:24:35	<--	tanakh_ (~tanakh@x091056.ppp.asahi-net.or.jp) has quit (Ping timeout: 246 seconds)
2013-03-27 13:24:44	<--	volstvok (~quassel@c-98-244-100-41.hsd1.va.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-27 13:25:11	-->	Volstvok (~quassel@c-98-244-100-41.hsd1.va.comcast.net) has joined #haskell
2013-03-27 13:25:31	Philonous	@type let f (fromInteger 0) = () in f -- That should work as well, then
2013-03-27 13:25:33	lambdabot	Parse error in pattern: fromInteger
2013-03-27 13:25:41	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-27 13:25:45	Philonous	It's a bit inconsistent.
2013-03-27 13:25:55	int-e	it is a special case in the syntax
2013-03-27 13:26:07	quchen	Naah. What int-e meant is that 0 in a pattern is desugared to a guard with fromInteger.
2013-03-27 13:26:23	quchen	f 0    ==    f x | x == 0
2013-03-27 13:26:29	quchen	f 0    ==    f x | x == fromInteger 0
2013-03-27 13:27:17	<--	Paprikachu (~Paprikach@77.117.247.224.wireless.dyn.drei.com) has quit (Ping timeout: 248 seconds)
2013-03-27 13:27:29	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 245 seconds)
2013-03-27 13:27:35	-->	Paprikachu (~Paprikach@178.115.248.104.wireless.dyn.drei.com) has joined #haskell
2013-03-27 13:28:03	quchen	Oh right, I just realized why 0 isn't a data constructor. "data Int = Int Int#"
2013-03-27 13:28:14	-->	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has joined #haskell
2013-03-27 13:28:17	-->	kmels__ (~kmels@frbg-4d028c1c.pool.mediaWays.net) has joined #haskell
2013-03-27 13:28:49	Philonous	@type let f (fromInteger -> 0) = () in f
2013-03-27 13:28:50	lambdabot	    Illegal view pattern:  fromInteger -> 0
2013-03-27 13:28:51	lambdabot	    Use -XViewPatterns to enable view patterns
2013-03-27 13:29:23	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-03-27 13:29:38	quchen	ViewPatterns are odd too. I'm not sure what to think of code in patterns.
2013-03-27 13:29:47	<--	askalski (~akuda@2001:6a0:5001:b:d4db:c35e:8120:711) has quit (Quit: Wychodzi)
2013-03-27 13:29:48	<--	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has quit (Quit: mcstar)
2013-03-27 13:30:04	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-27 13:30:06	-->	cognominal (~cognomina@37.161.6.121) has joined #haskell
2013-03-27 13:30:09	quchen	The pathological examples outweigh the useful ones if you ask me.
2013-03-27 13:30:36	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-27 13:30:58	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-27 13:31:25	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-27 13:31:56	<--	ulfdoz (~mary@p5B38AEA8.dip.t-dialin.net) has quit (Ping timeout: 246 seconds)
2013-03-27 13:32:50	-->	ni369473 (~u521161@85.96.51.52) has joined #haskell
2013-03-27 13:33:08	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-27 13:33:10	<--	ni369473 (~u521161@85.96.51.52) has quit (Remote host closed the connection)
2013-03-27 13:33:18	Philonous	quchen:  But you can just treat them es sugar for guards.
2013-03-27 13:33:46	Philonous	Oh wait, you need pattern guards then
2013-03-27 13:34:47	Philonous	Ah, but pattern guards are in Haskell 2010.
2013-03-27 13:34:51	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-27 13:34:53	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-27 13:35:27	quchen	The GHC manual gives the example "foo ((f, _), f -> 4) = ..."
2013-03-27 13:36:13	quchen	That's the next-to-easiest case of using them, and I can't really read it very easily.
2013-03-27 13:36:38	quchen	Compared to "((f, _), x) | f x == 4" I think it's not very clear.
2013-03-27 13:36:39	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Remote host closed the connection)
2013-03-27 13:37:05	quchen	And when such a feature becomes readily available, I'm not sure to what extent it will be abused.
2013-03-27 13:37:30	quchen	I really like the distinction between the pattern and code parts we have right now.
2013-03-27 13:37:48	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-27 13:38:55	<--	nwf (~nwf@a.rr.ietfng.org) has quit (Ping timeout: 264 seconds)
2013-03-27 13:39:19	aleator	quchen: I think it might have been intended to work with stuff like complex ASTs, where the patterns quickÃly become illegible.For example, try to match a function return value of Language.C.AST
2013-03-27 13:39:33	<--	edon (~user@albalug/edon) has quit (Ping timeout: 248 seconds)
2013-03-27 13:39:50	-->	pranavrc (~pranavrc@122.164.80.229) has joined #haskell
2013-03-27 13:39:50	<--	pranavrc (~pranavrc@122.164.80.229) has quit (Changing host)
2013-03-27 13:39:50	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-27 13:40:44	quchen	Well in that case I'd use pattern guards, which can easily (and naturally) be split over multiple lines
2013-03-27 13:41:18	quchen	Actually, can you do multiline pattern matches in functions? "f 0\n   1 = ..."?
2013-03-27 13:41:46	quchen	Wow, it works
2013-03-27 13:41:51	quchen	That feels odd
2013-03-27 13:42:05	typoclass	quchen: i think you defined a function "f 0 1 = ..."
2013-03-27 13:42:10	typoclass	(2 arguments)
2013-03-27 13:42:11	-->	tuttlem (~IRCUSENAM@CPE-124-186-132-187.lns10.woo.bigpond.net.au) has joined #haskell
2013-03-27 13:42:34	quchen	Yes
2013-03-27 13:42:38	-->	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has joined #haskell
2013-03-27 13:42:51	<--	cinimod (~user@cpc27-nmal16-2-0-cust206.19-2.cable.virginmedia.com) has quit (Ping timeout: 252 seconds)
2013-03-27 13:43:05	typoclass	quchen: right. just making sure :-) didn't know what you meant to do
2013-03-27 13:43:28	quchen	http://codepad.org/0K6VXhDp
2013-03-27 13:43:47	quchen	I was just wondering whether you could in general have newlines in patterns of top-level declarations
2013-03-27 13:44:23	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-27 13:44:35	dcoutts	quchen: for big patterns, that's rather useful
2013-03-27 13:45:06	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Quit: Leaving)
2013-03-27 13:45:11	quchen	dcoutts: Tell me about it, reading patterns of half a line is awful
2013-03-27 13:45:19	-->	Aune (~arne@volac.lysator.liu.se) has joined #haskell
2013-03-27 13:45:29	quchen	But that's why I'm here: talk about unrelated stuff and learn new things by accident
2013-03-27 13:45:39	quchen	Thank you, ViewPatterns ;-D
2013-03-27 13:45:43	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-03-27 13:46:58	-->	Zedrikov (~cedric@AMontsouris-651-1-36-31.w82-123.abo.wanadoo.fr) has joined #haskell
2013-03-27 13:47:14	quchen	Also, for the first time, I looked up what the 2010 report changed.
2013-03-27 13:47:22	quchen	Turns out it's more than n+k patterns
2013-03-27 13:47:52	 *	dcoutts would bring back n+k patterns for integral types
2013-03-27 13:48:05	dcoutts	sorry, natural types
2013-03-27 13:48:07	dcoutts	and add a Nat and Natural type
2013-03-27 13:48:09	quchen	Is there any talk about the next iteration of Haskell by the way? Haskell prime seems a little inactive
2013-03-27 13:48:15	-->	nwf (~nwf@a.rr.ietfng.org) has joined #haskell
2013-03-27 13:48:21	quchen	But then 2010 is only 2.something years ago
2013-03-27 13:48:25	-->	Balaji (783d03d3@gateway/web/freenode/ip.120.61.3.211) has joined #haskell
2013-03-27 13:48:38	quchen	Anyway, I want my BangPatterns official ;-)
2013-03-27 13:48:44	<--	bitonic` (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 245 seconds)
2013-03-27 13:49:17	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-27 13:49:32	-->	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 13:50:26	typoclass	dcoutts: so you mean, you'd disallow n+k patterns as far as negative numbers are concerned, and allow it for positive?
2013-03-27 13:51:11	quchen	What did "f (n+k)" mean anyway?
2013-03-27 13:51:24	quchen	Was it especially implemented or just desugar-able?
2013-03-27 13:52:31	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-03-27 13:52:32	<--	`0660 (olli@oosny.net) has quit (Ping timeout: 256 seconds)
2013-03-27 13:52:51	<--	tuttlem (~IRCUSENAM@CPE-124-186-132-187.lns10.woo.bigpond.net.au) has quit (Quit: leaving)
2013-03-27 13:53:13	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 240 seconds)
2013-03-27 13:53:41	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 13:53:57	-->	`0660 (olli@oosny.net) has joined #haskell
2013-03-27 13:53:57	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 248 seconds)
2013-03-27 13:54:25	-->	till_t (~till@g230198230.adsl.alicedsl.de) has joined #haskell
2013-03-27 13:54:27	dcoutts	typoclass: I'd allow it only on types that are natural numbers
2013-03-27 13:54:41	dcoutts	so not Int or Integer, and certainly not floating
2013-03-27 13:54:55	-->	ulfdoz (~mary@p5B38AEA8.dip.t-dialin.net) has joined #haskell
2013-03-27 13:54:56	typoclass	dcoutts: hm ok, so it would be Word and the like
2013-03-27 13:55:04	dcoutts	typoclass: right
2013-03-27 13:55:20	dcoutts	typoclass: and at the same time, I'd add a new type Nat, and Natural, like Int and Integer
2013-03-27 13:55:34	quchen	Special syntax just for Word+co? Mmmmh
2013-03-27 13:55:38	dcoutts	typoclass: difference is that Word is supposed to wrap
2013-03-27 13:55:41	-->	jianmeng (~mengjian@123.138.24.84) has joined #haskell
2013-03-27 13:55:45	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-27 13:55:56	quchen	A Nat type would be nice, I agree
2013-03-27 13:56:32	dcoutts	typoclass: 0-1 :: Word is defined, for Nat or Natural it would not be defined (it'd be a checked error, like div by zero)
2013-03-27 13:56:35	<--	yeltzooo6 (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has quit (K-Lined)
2013-03-27 13:56:36	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-27 13:56:41	quchen	dcoutts: I'm sure this has been proposed already
2013-03-27 13:56:47	dcoutts	has it?
2013-03-27 13:56:48	typoclass	dcoutts: right, sounds good
2013-03-27 13:57:27	quchen	dcoutts: I would think so. I miss positive integers quite frequently.
2013-03-27 13:57:37	liyang	So Integer is to Nat what Int is to Word?
2013-03-27 13:57:39	quchen	And I think many others do as well
2013-03-27 13:57:53	quchen	Integer <=> natural; Nat <=> Int
2013-03-27 13:58:00	quchen	Int = whatever your machine wants it to be in length
2013-03-27 13:58:08	dcoutts	liyang: um, Nat & Int, Natural & Integer
2013-03-27 13:58:51	quchen	I wonder how Natural would fit in the silly numeric classes though
2013-03-27 13:58:59	liyang	What's the difference between Nat and Word then? I mean, if Nat doesn't wrap, what would it do on overflow?
2013-03-27 13:59:03	quicksilver	it's always annoyed me that CPUs provide facilities for fairly efficient checked naturals
2013-03-27 13:59:03	quchen	a - b | b > a = 0
2013-03-27 13:59:04	quchen	?
2013-03-27 13:59:09	quicksilver	runtime error, quchen
2013-03-27 13:59:17	dcoutts	and difference between Word and Nat, is that Word is explicitly defined to be mod 2^something
2013-03-27 13:59:19	quicksilver	but languages never expose them.
2013-03-27 13:59:20	dEPY	Any of u guys involved in a startup?
2013-03-27 13:59:24	quchen	Well that would make "-" a non-total function, which isn't really good either
2013-03-27 13:59:28	dcoutts	quicksilver: right
2013-03-27 13:59:35	quicksilver	"-" *is* a partial function on Nat.
2013-03-27 13:59:39	quicksilver	if you don't like that, don't use it.
2013-03-27 13:59:41	quicksilver	other types exist ;)
2013-03-27 13:59:53	liyang	(If the answer is error on overflow, why should't the corresponding Int do the same?)
2013-03-27 14:00:06	quicksilver	liyang: hysterical raisins, most likely.
2013-03-27 14:00:13	dcoutts	liyang: that's a good question, as quicksilver says, history
2013-03-27 14:00:37	quicksilver	just like all CPUs since about 1980 have the ability to implement efficient N*2-bit integers from their N-bit registers
2013-03-27 14:00:44	quicksilver	(all you need is a carry bit and a conditional jump)
2013-03-27 14:00:45	dcoutts	liyang: arguably it's more important for Nat than Int, because overflow is a long way off, but underflow is right here at 0!
2013-03-27 14:00:56	quicksilver	but no programming language gives you access to the carry bit.
2013-03-27 14:00:58	quicksilver	it's madness!
2013-03-27 14:01:15	t7	inline asm
2013-03-27 14:01:30	dcoutts	quicksilver: we looked into this when we were implementing the SafeInt type, ie how to do the overflow check in cmm/asm etc. In the end our client didn't need it to be *that* fast.
2013-03-27 14:01:44	liyang	dcoutts: that feels distinctly unnatural. :<
2013-03-27 14:02:18	liyang	We need to overhaul the Num hierarchy really, so that you can't subtract thing willy-nilly.
2013-03-27 14:02:27	dcoutts	liyang: I think it'd be prefectly within the H98 spec for int overlow to be a runtime error, but we don't do it because of performance I think
2013-03-27 14:02:42	dcoutts	liyang: which has it's problems, like we had to implement SafeInt
2013-03-27 14:02:50	quicksilver	dcoutts: yeah. You often don't need it. It just annoys the perfectionist in me :)
2013-03-27 14:02:51	dcoutts	quicksilver: interestingly, cmm isn't well adapted for those kinds of ops
2013-03-27 14:02:56	liyang	dcoutts: likewise, I'd like for Nat to behave the same for performance. (In which case it's just Word.)
2013-03-27 14:03:06	quicksilver	dcoutts: I tend to use it as a canned example of why C really *isn't* a low-level language.
2013-03-27 14:03:08	-->	yeltzooo (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has joined #haskell
2013-03-27 14:03:12	liyang	dcoutts: doesn't SafeInt kill performance?
2013-03-27 14:03:16	dcoutts	liyang: I think it can be done pretty efficiently
2013-03-27 14:03:18	quicksilver	it's lowest-common-denominator, not powerful.
2013-03-27 14:03:25	liyang	(In which case you may as well be using Integer.)
2013-03-27 14:03:48	dcoutts	liyang: the way we implemented it yes, it's between perf of Int and Integer, but by using the cpu properly we could get it much closer to Int performance
2013-03-27 14:03:59	Radish	I'm trying to use a haskell library for port audio on haskell, can anyone help me?
2013-03-27 14:04:06	dcoutts	liyang: correctly predicted jumps are more or less free
2013-03-27 14:04:41	<--	creichert (~christoph@c-98-194-197-245.hsd1.tx.comcast.net) has quit (Quit: Konversation terminated!)
2013-03-27 14:04:51	Radish	I've kind of recreated this file structure on my computer: http://code.haskell.org/portaudio/ minus the readme and the _darcs and the .cabal
2013-03-27 14:04:54	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 14:05:05	dcoutts	liyang: as quicksilver was hinting, on x86 you already get the overflow bit in the flags, just need to do a conditional jump on that
2013-03-27 14:05:13	liyang	dcoutts: true… but if you had a checked Nat, I'll want a checked Int. (as well as a non-checked Int.) ;p
2013-03-27 14:05:23	dcoutts	liyang: big difference with Integer is that the representation is much better
2013-03-27 14:05:25	Radish	I can run set up but I can run the examples, I'm not sure if the examples are bad or if its not meant to be run that way
2013-03-27 14:05:33	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 240 seconds)
2013-03-27 14:06:20	dcoutts	liyang: oh I agree, I expect that there would be enough of a remaining perf difference (perhaps more so on other cpus) that people would want both checked and unchecked Int
2013-03-27 14:06:28	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-27 14:07:09	Radish	Does anyone use haskell with windows who can help me out?
2013-03-27 14:07:12	liyang	dcoutts: so what are we going to call that? My original objection is mostly due to my concern that we're running out of nice names for these types.
2013-03-27 14:07:16	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-03-27 14:07:18	gspr	Suppose I have a package that uses some third party C library through FFI, and I don't include that library in my package itself, but rather consider it a dependency. It seems Hackage then refuses to generate haddock documentation for my package since it fails to build (since Hackage naturally doesn't have said dependency). Is there a way to tell Hackage that "I know this package won't build for you, but please generate the Haddock docs anyway"
2013-03-27 14:07:43	<--	Thomyho5 (~thomyho@mnhm-4d0130c4.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-27 14:07:45	dcoutts	liyang: right, I don't know, we have SafeInt, but that's wordy. It'd be a hard sell to change Int, and as you say finding a suitable name isn't easy.
2013-03-27 14:07:52	liyang	s/re running/ve run/
2013-03-27 14:08:03	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-27 14:08:09	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 14:08:10	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 14:08:26	dcoutts	liyang: my suggestion with Nat is partly because it's a new type it's easier, and making Int consistent with that is hard because changing things is hard
2013-03-27 14:08:48	liyang	Consistency or death. D:
2013-03-27 14:08:57	dcoutts	:-)
2013-03-27 14:09:28	dmwit	gspr: I don't think so (which is a shame). Maybe you could mail Ross and ask him to install that C library or something.
2013-03-27 14:09:33	dcoutts	gspr: no there isn't, but the new hackage server allows multiple bots to do the doc build, or in a pinch maintainers can upload them
2013-03-27 14:09:36	-->	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has joined #haskell
2013-03-27 14:09:48	dmwit	ETA on New Hackage?
2013-03-27 14:10:00	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-27 14:10:02	gspr	dmwit: A shame indeed! Nah, I won't bother him with that -- it's too ugly a solution :)
2013-03-27 14:10:04	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 256 seconds)
2013-03-27 14:10:06	dcoutts	dmwit: see new-hackage.haskell.org for info on the alpha testing
2013-03-27 14:10:28	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 14:10:30	gspr	dcoutts: Ah, OK, good to know!
2013-03-27 14:10:40	-->	phischu (~pschuster@wlan-93-202.uni-koblenz.de) has joined #haskell
2013-03-27 14:10:43	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 264 seconds)
2013-03-27 14:10:57	dmwit	ooo, shiny
2013-03-27 14:11:05	gspr	In cases such as this, is it customary to just build the Haddock docs oneself and provide a link from the package description?
2013-03-27 14:11:24	dmwit	That seems like the best choice to me.
2013-03-27 14:12:02	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-27 14:12:21	gspr	ok
2013-03-27 14:12:29	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-27 14:12:47	quchen	Is haskell.org written in Haskell by the way?
2013-03-27 14:12:55	dmwit	"The goal has been to get it deployed, rather than worrying too much about the new features. We believe that once it is actually up and running, that the community will be more interested in helping improve and add features." <- 100%
2013-03-27 14:12:55	<--	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has quit (Quit: Page closed)
2013-03-27 14:13:02	quchen	I'm guessing the Hackage automatization is, but what about the frontend generateion?
2013-03-27 14:13:22	dmwit	quchen: I think haskell.org is just mediawiki or some other super-standard wiki software.
2013-03-27 14:13:31	dcoutts	dmwit: your patches gratefully accepted :-)
2013-03-27 14:13:38	dmwit	=D
2013-03-27 14:14:05	dcoutts	quchen: I'm not sure I understand your question
2013-03-27 14:14:15	liyang	dcoutts: stupid idea, but compile-time flag for checked/unchecked arithmetic?
2013-03-27 14:14:37	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 240 seconds)
2013-03-27 14:14:42	liyang	(y'know, like what C compilers did/do…)
2013-03-27 14:14:47	quchen	dcoutts: I was just wondering how much of haskell.org was made out of Haskell (and not PHP etc.)
2013-03-27 14:15:08	liyang	(or did they?)
2013-03-27 14:15:12	dmwit	quchen: There's lots of subdomains at haskell.org...
2013-03-27 14:15:14	liyang	(no they didn't.)
2013-03-27 14:15:26	dcoutts	quchen: different bits use different things, as dmwit said the main haskell.org wiki is just mediawiki
2013-03-27 14:15:41	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-27 14:15:45	typoclass	as a thought experiment, how about Int and UnsafeInt?
2013-03-27 14:16:05	liyang	UnsafeInt is wordy. :<
2013-03-27 14:16:06	-->	croikle (~peterm@134.53.245.65) has joined #haskell
2013-03-27 14:16:20	liyang	It's not *that* unsafe.
2013-03-27 14:16:29	typoclass	then let's abbreviate it to UInt... urgh no, wait :-)
2013-03-27 14:16:30	sipa	how about UInt... oh wait
2013-03-27 14:16:36	dcoutts	heh heh
2013-03-27 14:16:37	liyang	And sometimes the ‘unsafe’ behaviour is exactly what you want.
2013-03-27 14:16:40	sipa	!hi5 typoclass
2013-03-27 14:16:51	dcoutts	liyang: but then you should be using Int32 or Int64
2013-03-27 14:16:58	dcoutts	probably
2013-03-27 14:17:17	typoclass	liyang: well, sometimes unsafePerformIO is exactly what you want, but i think the name is still justified ...
2013-03-27 14:17:41	dcoutts	liyang: yeah, I'm not sure that sits well with haskell really, and different behaviour in different modules depending on flags
2013-03-27 14:17:50	liyang	dcoutts: I rely on Int being the native size for performance, instead of a bunch of #ifdefs to decide whether I should use Int32 or Int64…
2013-03-27 14:18:15	dcoutts	liyang: but if you do that (which is fine) then you are not relying on the wrapping
2013-03-27 14:18:23	dcoutts	because you don't know how big the type is
2013-03-27 14:18:36	liyang	Yes I do! Bits!
2013-03-27 14:18:41	dcoutts	bah
2013-03-27 14:18:50	-->	gg7 (~gg7@unaffiliated/gg7) has joined #haskell
2013-03-27 14:18:52	dcoutts	but in practice you're not doing that
2013-03-27 14:19:06	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-03-27 14:19:19	liyang	Suppose I had something that works for both 32 and 64-bit Ints…
2013-03-27 14:19:29	dmwit	Okay, cabal-install switched to new-hackage, and hackage search keyword in browser switched to new-hackage's AWESOME search feature!
2013-03-27 14:19:32	dmwit	\o/
2013-03-27 14:19:33	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 14:19:33	dcoutts	you see what I mean, code that doesn't mind how big the type is, it just wants it to be fast, is not likely to be relying on mod 2^n wrapping
2013-03-27 14:19:58	dmwit	Now, does this mean that "cabal upload" is going to do the wrong thing?
2013-03-27 14:20:04	dcoutts	dmwit: wait, what awesome search feature? I thought it was pretty crummy
2013-03-27 14:20:05	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-27 14:20:12	dmwit	dcoutts: existing is AWESOME
2013-03-27 14:20:17	dcoutts	dmwit: oh heh, ok
2013-03-27 14:20:29	liyang	(We don't have any -f flags that change runtime behaviour? I'd be surprised were that the case…)
2013-03-27 14:20:32	dcoutts	dmwit: there's a lot that needs doing to it, it doesn't search tags yet for starters
2013-03-27 14:20:40	quchen	New-hackage has an AWESOME search feature?
2013-03-27 14:20:44	dcoutts	no!
2013-03-27 14:20:54	dcoutts	it's got a rudimentary search feature
2013-03-27 14:20:56	dmwit	quchen: It has a search feature! Isn't that AWESOME?
2013-03-27 14:21:00	dcoutts	that's in need if your patches :-)
2013-03-27 14:21:01	typoclass	we could, as a thought experiment, just come up with a prefix or suffix. LLInt (low-level int), BInt (bad int), FInt (flaky int), etc.
2013-03-27 14:21:17	quchen	I just typed in "comonad" and it gave me "comonad" packages. Pretty AWESOME
2013-03-27 14:21:23	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-27 14:21:24	quchen	(Hoogle doesn't do that.)
2013-03-27 14:21:32	dcoutts	dmwit: actually I've not checked yet, I think it should do the right thing, ie it'll upload to the new server
2013-03-27 14:21:41	typoclass	quchen: have you seen hayoo?
2013-03-27 14:21:43	typoclass	@where hayoo
2013-03-27 14:21:43	lambdabot	http://holumbus.fh-wedel.de/hayoo/hayoo.html
2013-03-27 14:21:47	liyang	typoclass: CInt I guess would be fine.
2013-03-27 14:22:07	dmwit	dcoutts: Ah, bummer (for this, admittedly transitory, situation).
2013-03-27 14:22:08	quchen	typoclass: I know Hayoo, but I prefer Hoogle when possible. Because of the colors.
2013-03-27 14:22:10	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-27 14:22:17	typoclass	liyang: oh, good point. don't we have that already in Foreign.Somewhere ...
2013-03-27 14:22:26	dcoutts	dmwit: well, we do want you to test uploading too :-)
2013-03-27 14:22:30	merijn	Also, Hayoo usually functions terrible for me, I don't think you can search types?
2013-03-27 14:22:33	quchen	Hmm, the AWESOME search feature doesn't match package descriptions though. It's very rudimentary it seems.
2013-03-27 14:22:40	liyang	typoclass: yeah, it's just an alias for something.
2013-03-27 14:22:45	dcoutts	quchen: only package synopsis I think
2013-03-27 14:22:48	merijn	Is there a way to have a local hoogle that indexes all installed packages?
2013-03-27 14:22:52	quchen	dcoutts: Not even that
2013-03-27 14:22:57	dmwit	dcoutts: I think I'll have to switch cabal back to old-hackage then, or I'll undoubtedly forget. If I remember, I'll test uploading, but by default I want my package releases going where they can be seen. =P
2013-03-27 14:23:01	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-27 14:23:02	quchen	OH nevermind
2013-03-27 14:23:03	merijn	As hoogle doesn't index some stuff I use
2013-03-27 14:23:03	quchen	typo
2013-03-27 14:23:08	-->	trescenzi (~trescenzi@2620:91:0:163:f0e4:7b7b:c704:66ff) has joined #haskell
2013-03-27 14:23:08	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-27 14:23:13	quchen	Sorry for doubting the search
2013-03-27 14:23:21	dcoutts	phew!
2013-03-27 14:23:22	liyang	So… -fignore-asserts changes runtime behaviour. We actually make use of that.
2013-03-27 14:23:23	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 14:23:27	quchen	http://new-hackage.haskell.org/packages/find?name=dualization
2013-03-27 14:23:29	quchen	Yipee.
2013-03-27 14:23:31	dcoutts	liyang: yes, I was going to mention that
2013-03-27 14:23:37	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-27 14:23:48	liyang	In fact I indirectly made use of it today…
2013-03-27 14:24:11	linduxed	in a line like the following, i prefer to add the parenthesis to make things clear, but also because i'm never sure what binds tighter (or in what order)
2013-03-27 14:24:13	linduxed	newUnusedNodes = (unusedNodes `Set.difference` connectedNodes) `Set.union` newNode
2013-03-27 14:24:16	liyang	So SafeInt is basically Int wrapped in lots of asserts.
2013-03-27 14:24:27	linduxed	i've tested it in ghci, and i could remove those parens
2013-03-27 14:24:34	typoclass	btw, in my thought-experiment parallel-world variant of haskell, Int and Integer will be swapped, with the short name giving the safe behavior
2013-03-27 14:24:43	dmwit	linduxed: I think most people would have little objection to those parens.
2013-03-27 14:24:45	linduxed	but i don't understand the rule that says why i could do that
2013-03-27 14:24:53	linduxed	dmwit: yeah i guess so
2013-03-27 14:25:02	liyang	In which case -funchecked-arithmetic is no different from -fignore-asserts…(!)
2013-03-27 14:25:03	dcoutts	typoclass: what!? the bigger name is the bigger type! :-)
2013-03-27 14:25:15	linduxed	dmwit: but is there some way to have ghci tell me what binds when and "how strongly"/
2013-03-27 14:25:17	linduxed	?
2013-03-27 14:25:22	dmwit	linduxed: For sure, use :i
2013-03-27 14:25:48	dmwit	linduxed: If it doesn't say something like "infixl 7", then it will have the default fixity.
2013-03-27 14:25:49	quchen	linduxed: Infix backticks, `foobar`, have fixity "infixl 9" by default.
2013-03-27 14:26:05	linduxed	oh yeah, the fixity thing
2013-03-27 14:26:07	dmwit	(Which I can never remember off the top of my head. Rumor has it that future GHCi's will show even thedefault fixity.)
2013-03-27 14:26:12	quchen	I don't remember many `XY` with non-default fixities, mostly quot, rem etc.
2013-03-27 14:26:18	 *	linduxed will have to read up on fixity
2013-03-27 14:26:22	-->	nooodl (~nooodl@91.179.180.252) has joined #haskell
2013-03-27 14:26:30	linduxed	i've only glanced over it
2013-03-27 14:26:36	typoclass	> succ `map` (pred `map` [1..3])
2013-03-27 14:26:37	dmwit	There's not much to it. Lower numbers bind tighter.
2013-03-27 14:26:38	lambdabot	  [1,2,3]
2013-03-27 14:26:46	typoclass	> (succ `map` pred) `map` [1..3] -- error
2013-03-27 14:26:48	lambdabot	  Couldn't match expected type `a0 -> b0' with actual type `[b1]'
2013-03-27 14:26:54	dmwit	infixl means associate to the left when the numbers are the same; infixr associates right; infix throws an error.
2013-03-27 14:26:59	liyang	Wat. Higher fixities bind tighter…
2013-03-27 14:27:03	dmwit	uh
2013-03-27 14:27:07	typoclass	> succ `map` pred `map` [1..3] -- same error
2013-03-27 14:27:09	lambdabot	  Couldn't match expected type `a0 -> b0' with actual type `[b1]'
2013-03-27 14:27:12	dmwit	Colud be. I often get that backwards.
2013-03-27 14:27:20	dmwit	I always check (+) and (*) when I need to know... =P
2013-03-27 14:27:23	quchen	Mnenonic for dmwit: $upertight
2013-03-27 14:27:24	quchen	;-)
2013-03-27 14:27:26	liyang	dmwit: snap.
2013-03-27 14:27:40	nooodl	when i enter ":t (>>=)" in ghci i get a result like "(>>=) :: Monad m => m a -> (a -> m b) -> m b". is there a way to ask it to "fill in" the type signature for a specific Monad instance?
2013-03-27 14:27:48	liyang	dmwit: well, more crackle. I never remember their exact fixities.
2013-03-27 14:27:55	nooodl	i.e., something like [a] -> (a -> [b]) -> [b]
2013-03-27 14:28:01	-->	cdidd (~cdidd@95.27.112.156) has joined #haskell
2013-03-27 14:28:10	nooodl	or Maybe a -> (a -> Maybe b) -> Maybe b, for Maybe... etc
2013-03-27 14:28:15	dmwit	nooodl: You can use `asAppliedTo`.
2013-03-27 14:28:18	--	stelleg_away is now known as stelleg
2013-03-27 14:28:22	quchen	:t (>>=) `asAppliedTo` Just 1
2013-03-27 14:28:23	lambdabot	Num a => Maybe a -> (a -> Maybe b) -> Maybe b
2013-03-27 14:28:24	dmwit	:t (>>=) `asAppliedTo` [1,2,3]
2013-03-27 14:28:25	lambdabot	Num a => [a] -> (a -> [b]) -> [b]
2013-03-27 14:28:33	nooodl	@type asAppliedTo
2013-03-27 14:28:35	lambdabot	(t -> b) -> t -> t -> b
2013-03-27 14:28:37	dmwit	:t (>>=) `asAppliedTo` []
2013-03-27 14:28:38	lambdabot	[a] -> (a -> [b]) -> [b]
2013-03-27 14:28:45	quchen	asAppliedTo = undefined :: (t -> b) -> t -> t -> b
2013-03-27 14:28:50	nooodl	cool!
2013-03-27 14:29:02	dmwit	asAppliedTo = const, no?
2013-03-27 14:29:13	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-03-27 14:29:31	quchen	Matches the type sig.
2013-03-27 14:29:42	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 14:29:50	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-27 14:29:53	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-27 14:30:04	dmwit	> ((+1) `asAppliedTo` 3) 4
2013-03-27 14:30:06	lambdabot	  5
2013-03-27 14:30:25	<--	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-27 14:30:36	quchen	Excellent example
2013-03-27 14:30:36	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-27 14:31:42	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Ping timeout: 272 seconds)
2013-03-27 14:32:08	quchen	Has anyone accomplished having persistent definitions in ghci.conf yet?
2013-03-27 14:32:17	<--	croikle (~peterm@134.53.245.65) has quit (Quit: croikle)
2013-03-27 14:32:23	quchen	I've got 'asAppliedTo' in there, but :r kills it as usual
2013-03-27 14:32:29	quchen	Or :l or something
2013-03-27 14:32:38	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-03-27 14:33:17	-->	cyril_ (cyril@nat/intel/x-oqgcxkrqvdkfqtnv) has joined #haskell
2013-03-27 14:34:08	ski	quchen : perhaps put it in `$HOME/.ghci' ?
2013-03-27 14:34:38	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 14:34:49	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-03-27 14:34:51	quchen	That's not the problem I think. If you have 'let' bindings in ghci.conf, it's overwritten when you switch modules.
2013-03-27 14:35:02	quchen	Just like using :l X and then :l Y throws out X
2013-03-27 14:35:06	ski	oh, i see
2013-03-27 14:35:08	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-27 14:35:19	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 264 seconds)
2013-03-27 14:35:26	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-27 14:35:27	quchen	That's also the reason we can't make colored GHCi output hacks
2013-03-27 14:35:44	quchen	I looked at the source and gave up pretty quickly
2013-03-27 14:35:55	-->	extraordinaire (~extraordi@mail.secretsales.com) has joined #haskell
2013-03-27 14:36:00	-->	ndonaldson (~Sugarloaf@61.69.24.113) has joined #haskell
2013-03-27 14:36:14	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-03-27 14:36:56	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-27 14:37:10	<--	a11235 (~a11235@unaffiliated/a11235) has left #haskell
2013-03-27 14:37:24	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-27 14:37:34	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-03-27 14:39:58	-->	kurkale6ka (~kurkale6k@84.19.53.21) has joined #haskell
2013-03-27 14:40:15	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-03-27 14:40:34	Radish	I need to support the c library that a cabal file requires
2013-03-27 14:40:39	-->	Swizec (~swizec@93.103.26.7) has joined #haskell
2013-03-27 14:40:42	Radish	How do I get that going?
2013-03-27 14:41:16	Radish	It says I need to install the system package that provides this library
2013-03-27 14:41:27	liyang	*That* is why you can't have nice things.
2013-03-27 14:41:33	Radish	would that be .exe?
2013-03-27 14:41:53	<--	dawe (~dawe@p5090F923.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-27 14:41:54	kurkale6ka	I am trying to understand Monads. If I get it correctly, the maybe Monad is pure, is that right?
2013-03-27 14:42:16	liyang	All monads are pure in their own ways.
2013-03-27 14:43:03	linduxed	kurkale6ka: have you seen this introduction? http://www.youtube.com/watch?v=ZhuHCtR3xq8
2013-03-27 14:43:28	liyang	(and Maybe prefers to be referred to with its name capitalised.)
2013-03-27 14:44:11	kurkale6ka	linduxed: I will have a look
2013-03-27 14:44:25	liyang	Unless you're referring to the proletarian maybe.
2013-03-27 14:44:45	quchen	maybe is monadic, its value is of Reader type ;-)
2013-03-27 14:45:05	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-27 14:45:19	typoclass	kurkale6ka: which part is confusing you? if you have code, please use hpaste
2013-03-27 14:45:19	liyang	Your mother is a Reader.
2013-03-27 14:45:21	typoclass	@where hpaste
2013-03-27 14:45:22	lambdabot	http://hpaste.org/
2013-03-27 14:45:31	<--	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has quit (Ping timeout: 264 seconds)
2013-03-27 14:45:50	Peaker	if a thread is within a "modifyMVar_" action, and is killed, does it roll back to release the MVar to the old value?
2013-03-27 14:45:50	liyang	(Sorry, slightly drunk.)
2013-03-27 14:45:56	-->	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-03-27 14:46:15	dcoutts	Peaker: yes
2013-03-27 14:46:34	fryguybob	Radish: Your question doesn't give enough information for me to know how to help.  Can you paste the specific error you are getting on hpaste.org?
2013-03-27 14:46:38	Peaker	thanks
2013-03-27 14:47:00	<--	tanakh__ (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has quit (Ping timeout: 264 seconds)
2013-03-27 14:47:19	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Ping timeout: 264 seconds)
2013-03-27 14:47:38	<--	ndonaldson (~Sugarloaf@61.69.24.113) has quit (Quit: leaving)
2013-03-27 14:47:43	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-27 14:48:00	quchen	Peaker: "An exception-safe wrapper for modifying the contents of an MVar. Like withMVar, modifyMVar will replace the original contents of the MVar if an exception is raised during the operation. This function is only atomic if there are no other producers for this MVar. "
2013-03-27 14:48:20	quchen	http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Concurrent-MVar.html#v:modifyMVar_
2013-03-27 14:48:26	Radish	fryguybob: my command prompt doesn't allow me to copy and paste so this will take a minute
2013-03-27 14:48:40	quchen	Radish: Try right click after selecting
2013-03-27 14:48:46	quchen	Or Ctrl+Shift+C
2013-03-27 14:48:47	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-27 14:49:06	typoclass	Radish: are you on linux? in that case, you can highlight the text in the terminal, and in another window click the middle mouse button
2013-03-27 14:49:10	Radish	quechen: windows
2013-03-27 14:49:10	fryguybob	Radish: I'm assuming you are on Windows.  If you go to the control menu there are options for selecting and copying.
2013-03-27 14:49:27	Radish	its cmd.exe
2013-03-27 14:49:37	Radish	I don't know any control menu :(
2013-03-27 14:49:40	typoclass	Radish: try alt-space and selecting copy
2013-03-27 14:49:42	fryguybob	Radish: You might have more success with PowerShell
2013-03-27 14:50:10	t7	Radish, right click, click mark, select your text, right click again
2013-03-27 14:50:19	t7	no dont do the last step
2013-03-27 14:50:48	Radish	groovy that alt space works
2013-03-27 14:50:52	t7	actually yes you have to right click
2013-03-27 14:51:02	-->	Meat_Puppet (~MeatPuppe@186-210-063-147.xd-dynamic.ctbcnetsuper.com.br) has joined #haskell
2013-03-27 14:51:14	Radish	thanks t7 i think your method works too
2013-03-27 14:51:30	<--	Swizec (~swizec@93.103.26.7) has quit (Quit: Computer has gone to sleep.)
2013-03-27 14:51:51	hpaste	BadRadish pasted “Dependency” at http://hpaste.org/84715
2013-03-27 14:51:52	t7	good old windows making it so awkward to copy from console
2013-03-27 14:52:07	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-27 14:52:28	Radish	is linux much better than windows?
2013-03-27 14:52:31	<--	Squid_Tamer (~s@198.23.138.21) has quit (Ping timeout: 245 seconds)
2013-03-27 14:52:36	Radish	i've been working up the courage to make the swithc
2013-03-27 14:52:39	fryguybob	Radish: Yes
2013-03-27 14:52:56	t7	the grass really is greener
2013-03-27 14:52:58	Radish	fryguybob: i'm scared I won't be able to get anything working ever
2013-03-27 14:53:06	typoclass	Radish: linux needs more babysitting ...
2013-03-27 14:53:07	<--	trescenzi (~trescenzi@2620:91:0:163:f0e4:7b7b:c704:66ff) has quit (Remote host closed the connection)
2013-03-27 14:53:09	Radish	i hear installation is a nightmare
2013-03-27 14:53:26	-->	croikle (~peterm@134.53.245.65) has joined #haskell
2013-03-27 14:53:31	t7	use ubuntu or similar until your a pro, you will be fine
2013-03-27 14:53:32	-->	Squid_Tamer (~s@198.23.138.21) has joined #haskell
2013-03-27 14:53:41	Radish	I'm kind of waiting for an oportunity where I have two computers lol ;)
2013-03-27 14:53:50	fryguybob	Radish: There are baby steps where you don't have to commit completely :D
2013-03-27 14:54:03	Radish	hard drive partitioning, right?
2013-03-27 14:54:11	Botje	Radish: installation hasn't been a nightmare since 2003.
2013-03-27 14:54:12	Radish	use two OSs?
2013-03-27 14:54:26	Radish	botje: what changed?
2013-03-27 14:54:29	Botje	Radish: ubuntu allows you to install inside a file on existing partitions.
2013-03-27 14:54:39	Botje	no need to faff around with partitions if you don't want to.
2013-03-27 14:54:48	Botje	Radish: likewise, you can always create a virtual machine.
2013-03-27 14:54:50	fryguybob	Radish: You can use a VM
2013-03-27 14:54:53	arbn	Radish: There are fancy graphical installers now that do autoconfiguration magic.
2013-03-27 14:55:21	Radish	that sounds difficult lol
2013-03-27 14:55:31	Heffalump	if it's happened before then replace, I guess, but perhaps more at your convenience than panic call to etyres (though I think they were actually a decent cheap option last time I investigated)
2013-03-27 14:55:33	<--	linduxed (~linduxed@194-14-0-85.serioustubes.org) has quit (Ping timeout: 245 seconds)
2013-03-27 14:55:34	fryguybob	Radish: It isn't.
2013-03-27 14:55:41	-->	jdnavarro (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has joined #haskell
2013-03-27 14:55:58	Botje	Radish: http://virtualboximages.com/ has premade ubuntu VMs.
2013-03-27 14:56:09	Botje	just install virtualbox, download one of these images, and you're set.
2013-03-27 14:56:19	arbn	For Haskell programming, I think it's convenient to have some sort of Unix. Mac OS X or Linux.
2013-03-27 14:56:45	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-27 14:56:55	fryguybob	Radish: To fix your problem you will want to get a pre-built release of the portaudio library (not the haskell one) for windows.
2013-03-27 14:57:23	Radish	fryguybob: the download page has .tgz files
2013-03-27 14:57:31	Radish	http://www.portaudio.com/download.html
2013-03-27 14:57:46	Meat_Puppet	I need to create in haskell, an real exact exponential algorithm witch calculates the optimal solution(minimum numbers of bins to pack all the itens) for the bin packing problem: list of itens with variable sizes that needs to be packed into bins with size S, somebody can help me?
2013-03-27 14:57:59	Radish	I'm not terribly familiar with any of this lol
2013-03-27 14:58:04	-->	franco00 (~franco00@nl5x.mullvad.net) has joined #haskell
2013-03-27 14:58:06	fryguybob	Radish: I don't think any of those are binaries which makes it harder.
2013-03-27 14:58:10	-->	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 14:58:16	dcoutts	dmwit: still here? something to show you
2013-03-27 14:58:18	Radish	I just want to write code and not deal with this crap lol
2013-03-27 14:58:22	Radish	:D
2013-03-27 14:58:22	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-27 14:58:28	franco00	I am looking for an acyclic graph library in haskell. Does it exist?
2013-03-27 14:58:43	Botje	Radish: then get a linux vm. it's ten times easier compilation-wise.
2013-03-27 14:58:43	franco00	(it's not that difficult to write some functions myself, just don't want to reinvent the wheel)
2013-03-27 14:58:55	Radish	fryguybob: so i need to create the binary for portAudio
2013-03-27 14:58:57	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-27 14:59:00	Radish	fryguybob: ?
2013-03-27 14:59:02	fryguybob	Yes
2013-03-27 14:59:10	fryguybob	http://portaudio.com/docs/v19-doxydocs/compile_windows_mingw.html
2013-03-27 14:59:32	fryguybob	Radish: If you installed the haskell platform you already have a mingw.
2013-03-27 14:59:50	Radish	i did
2013-03-27 14:59:53	quchen	franco00: Have you tried http://hackage.haskell.org/package/fgl-5.4.2.4
2013-03-27 15:00:10	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-27 15:00:22	franco00	oh, cool quchen , thanks
2013-03-27 15:00:56	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-27 15:01:05	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-03-27 15:01:08	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-27 15:01:41	<--	Balaji (783d03d3@gateway/web/freenode/ip.120.61.3.211) has quit (Quit: Page closed)
2013-03-27 15:02:06	fryguybob	Radish: It might be easiest to follow the directions from the page I linked, but to be honest it might take a while with a few dead ends to get it all working.
2013-03-27 15:02:32	Radish	fryguybob: yeah this is just a tiddle over my head but I'll give it a shot.
2013-03-27 15:02:56	<--	franco00 (~franco00@nl5x.mullvad.net) has quit (Quit: leaving)
2013-03-27 15:03:13	Radish	fryguybob: once I do this, if I build a program it will run on any platform that both haskell and portaudio run on, right?
2013-03-27 15:04:00	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-27 15:04:18	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-27 15:04:28	fryguybob	Radish: Right (anyone should be able to compile, the binary you build will be Windows only).  Once you have that library built and installed (I recommend something like c:\opt\) you will need to tell cabal to look there.
2013-03-27 15:06:12	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-27 15:06:45	<--	sonda (~sonda@ppp-30-21.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-27 15:06:47	<--	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-03-27 15:07:24	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-27 15:08:35	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 15:08:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-03-27 15:10:24	-->	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has joined #haskell
2013-03-27 15:10:56	-->	byc (~byc@2001:da8:20c:1705:21c:23ff:fe3b:a900) has joined #haskell
2013-03-27 15:11:05	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 15:11:12	Radish	fryguybob: I got haskell working for the first time like twenty minutes ago...
2013-03-27 15:11:22	Radish	fryguybob: CABAL**
2013-03-27 15:11:39	Radish	fryguybob: I got cabal working for the first time like twenty mintues ago...**
2013-03-27 15:12:07	Radish	fryguybob: i think I can figure it out though, thank you so much.
2013-03-27 15:12:15	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-27 15:12:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Connection reset by peer)
2013-03-27 15:12:48	fryguybob	Radish: No problem.  I hope it works out.  Feel free to keep asking questions as they come up.
2013-03-27 15:12:53	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-27 15:13:03	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-03-27 15:13:11	-->	lemao (~lemao@c-174-62-194-16.hsd1.me.comcast.net) has joined #haskell
2013-03-27 15:13:14	<--	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has quit (Quit: Page closed)
2013-03-27 15:13:46	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 15:14:10	-->	`ramses (863ab323@gateway/web/freenode/ip.134.58.179.35) has joined #haskell
2013-03-27 15:14:15	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-27 15:15:15	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 252 seconds)
2013-03-27 15:15:22	<--	Meat_Puppet (~MeatPuppe@186-210-063-147.xd-dynamic.ctbcnetsuper.com.br) has quit (Quit: - nbs-irc 2.39 - www.nbs-irc.net -)
2013-03-27 15:15:38	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-27 15:15:46	cardamon	Hard part for me was figuring out how to read the intructions.
2013-03-27 15:15:48	<--	tjohnson (~tjohnson@173-228-28-191.dsl.dynamic.sonic.net) has quit (Ping timeout: 252 seconds)
2013-03-27 15:16:01	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-27 15:16:08	cardamon	Debian's cabal package breaks Debian's own rule about man pages.
2013-03-27 15:16:20	cardamon	In that it doesn't have one.
2013-03-27 15:16:39	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 15:17:18	<--	csakatoku (~csakatoku@EM117-55-68-9.emobile.ad.jp) has quit (Remote host closed the connection)
2013-03-27 15:17:32	-->	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-27 15:19:31	arbn	Yeah. A lot of Haskell programs don't have man pages.
2013-03-27 15:20:01	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-27 15:20:17	-->	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-27 15:20:35	typoclass	cardamon: you've discovered "cabal help" and "cabal help install" and the like, right? also, it has a very good user manual on the web
2013-03-27 15:20:49	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 245 seconds)
2013-03-27 15:20:53	jeff_s1	Why are the "Numeric Types" in Foreign.C.Types not instances of Integral? They're just newtypes of integer types? The same question could be asked of Bits, Bounded, and perhaps some others.
2013-03-27 15:21:25	jeff_s1	That second sentence wasn't supposed to be a question.
2013-03-27 15:21:28	-->	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 15:21:41	arbn	typoclass: You just saved me two keystrokes. I usually type "cabal --help" and "cabal install --help".
2013-03-27 15:23:07	jeff_s1	For instance, if I want to truncate a CTime to 10 seconds, I have to unwrap and re-wrap (CTime x) and (CTime y): truncateTo (Ctime x) (CTime y) = Ctime $ (x `div` y) * y
2013-03-27 15:23:34	jeff_s1	Or I have to implement my own Integral typeclass for CType, which only takes 3 lines, but feels like it should be in base.
2013-03-27 15:24:23	typoclass	jeff_s1: hm that's a good question. http://www.haskell.org/ghc/docs/latest/html/libraries/base/Foreign-C-Types.html suggests CInt, CChar and all kinds of types have Integral instances, but not CTime
2013-03-27 15:24:38	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-03-27 15:24:45	-->	apfel (~apfel@p5499BACB.dip.t-dialin.net) has joined #haskell
2013-03-27 15:25:21	<--	lemao (~lemao@c-174-62-194-16.hsd1.me.comcast.net) has quit (Remote host closed the connection)
2013-03-27 15:26:01	jeff_s1	Yup! I'm just wondering if anyone here knows why before I ask the libraries mail list.
2013-03-27 15:26:03	-->	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 15:26:03	<--	phischu (~pschuster@wlan-93-202.uni-koblenz.de) has quit (Quit: Leaving.)
2013-03-27 15:26:12	<--	apfel (~apfel@p5499BACB.dip.t-dialin.net) has quit (Client Quit)
2013-03-27 15:26:33	jeff_s1	I had a similar complaint before, when CTime and others didn't have their constructors exposed, forcing me to use unsafeCoerce.
2013-03-27 15:26:33	-->	apfel (~apfel@p5499BACB.dip.t-dialin.net) has joined #haskell
2013-03-27 15:26:40	jeff_s1	I didn't speak up at the time, though.
2013-03-27 15:26:44	<--	v__ (~v@199.68.198.120) has quit (Ping timeout: 246 seconds)
2013-03-27 15:27:22	-->	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-27 15:28:03	<--	flebron_ (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit (Client Quit)
2013-03-27 15:28:05	-->	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 15:28:07	typoclass	jeff_s1: apparently folks discussed it already in 2007, but there was no good conclusion. nobody said "here is an extremely good reason why" or "here is an extremely good workaround" http://web.archiveorange.com/archive/v/nDNOvn1ticwudBminciV
2013-03-27 15:28:18	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-03-27 15:28:19	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-27 15:29:36	<--	extraordinaire (~extraordi@mail.secretsales.com) has quit (Ping timeout: 264 seconds)
2013-03-27 15:29:55	typoclass	jeff_s1: it does seem like a weird oversight, in particular because CTime is a newtype for Int64, and Int64 has an Integral instance
2013-03-27 15:30:01	<--	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-27 15:30:11	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-27 15:30:52	jeff_s1	OK thanks, I'll escalate my complaint. :-)
2013-03-27 15:32:21	-->	kamishimo (~kamishimo@p3153-ipbf706fukuhanazo.fukushima.ocn.ne.jp) has joined #haskell
2013-03-27 15:32:22	-->	kevinqcs (~turing@183.209.154.4) has joined #haskell
2013-03-27 15:32:24	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Client Quit)
2013-03-27 15:32:26	<--	kevinqcs (~turing@183.209.154.4) has quit (Max SendQ exceeded)
2013-03-27 15:32:43	Peaker	does anyone know how to work with OpenGL in a threaded context? e.g: I want to parallelize two GL texture loading operations
2013-03-27 15:32:46	<--	kamishimo (~kamishimo@p3153-ipbf706fukuhanazo.fukushima.ocn.ne.jp) has quit (Client Quit)
2013-03-27 15:32:55	<--	cognominal (~cognomina@37.161.6.121) has quit (Ping timeout: 264 seconds)
2013-03-27 15:32:55	-->	kamishimo (~kamishimo@p3153-ipbf706fukuhanazo.fukushima.ocn.ne.jp) has joined #haskell
2013-03-27 15:33:06	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-27 15:33:09	-->	extraordinaire (~extraordi@mail.secretsales.com) has joined #haskell
2013-03-27 15:33:18	-->	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has joined #haskell
2013-03-27 15:33:41	-->	kevinqcs (~turing@183.209.154.4) has joined #haskell
2013-03-27 15:33:54	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-27 15:34:22	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-27 15:36:00	parcs	Peaker: you can only call opengl functions from the thread in which the context was created
2013-03-27 15:36:11	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Client Quit)
2013-03-27 15:36:24	--	amatsu is now known as amatsu\idle
2013-03-27 15:36:44	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Quit: mattrepl)
2013-03-27 15:37:21	-->	anRch (~markmilli@pool-108-20-96-150.bstnma.east.verizon.net) has joined #haskell
2013-03-27 15:38:30	-->	cognominal (~cognomina@37.161.231.44) has joined #haskell
2013-03-27 15:38:39	Peaker	parcs, No way at all to parallelize things?
2013-03-27 15:39:08	geekosaur	opengl does not support parallel operations
2013-03-27 15:39:10	jeff_s1	It turns out that CTime can technically be a floating point type, so I guess I won't complain.... on the other hand, my other googling suggests that there's no platform where CTime isn't an integer of some sort.
2013-03-27 15:39:25	geekosaur	I do not mean haskell opengl bindings, I mean the underlying opengl library
2013-03-27 15:39:41	<--	izym (~izym@82.211.222.212) has quit (Ping timeout: 246 seconds)
2013-03-27 15:39:50	parcs	Peaker: nope
2013-03-27 15:40:06	geekosaur	jeff_s1, there have been experiments with floating types, one of the problems is you lose precision in some cases
2013-03-27 15:40:15	-->	v__ (~v@61.173.105.92) has joined #haskell
2013-03-27 15:40:21	geekosaur	this is often considered a bad thing with times
2013-03-27 15:40:46	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-27 15:42:30	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-27 15:42:38	typoclass	jeff_s1: but haskell makes CTime a newtype for Int64, doesn't it? so by definition we're not on a platform that uses floats for CTime :-)
2013-03-27 15:42:42	-->	alistairclark (~alisaircl@109.174.158.82) has joined #haskell
2013-03-27 15:43:38	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 15:44:03	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-27 15:44:05	<--	sopvop (~lonokhov@213.170.88.44) has quit (Read error: Connection reset by peer)
2013-03-27 15:44:30	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-27 15:44:38	-->	scriptor (~Scriptor@ext.corp.bitshelter.com) has joined #haskell
2013-03-27 15:44:40	--	Guest14075 is now known as EvanR
2013-03-27 15:44:43	<--	EvanR (~erinehart@208.117.200.94) has quit (Changing host)
2013-03-27 15:44:43	-->	EvanR (~erinehart@unaffiliated/evanr) has joined #haskell
2013-03-27 15:44:55	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-27 15:45:22	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-27 15:46:37	<--	sipa (~pw@2a02:348:5e:5a29::1) has quit (Changing host)
2013-03-27 15:46:37	-->	sipa (~pw@unaffiliated/sipa1024) has joined #haskell
2013-03-27 15:46:42	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-27 15:47:59	 *	hackagebot hashable-extras 0.1.0.1 - Higher-rank Hashable  http://hackage.haskell.org/package/hashable-extras-0.1.0.1 (EdwardKmett)
2013-03-27 15:48:13	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-27 15:48:43	<--	croikle (~peterm@134.53.245.65) has quit (Quit: croikle)
2013-03-27 15:51:31	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 264 seconds)
2013-03-27 15:52:45	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-27 15:52:46	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-27 15:53:00	 *	hackagebot lens 3.9.0.2 - Lenses, Folds and Traversals  http://hackage.haskell.org/package/lens-3.9.0.2 (EdwardKmett)
2013-03-27 15:53:00	-->	nade (~nade@WS-ESR1-72-49-94-77.fuse.net) has joined #haskell
2013-03-27 15:53:33	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-27 15:54:24	-->	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has joined #haskell
2013-03-27 15:54:40	-->	cinimod (~user@cpc27-nmal16-2-0-cust206.19-2.cable.virginmedia.com) has joined #haskell
2013-03-27 15:54:45	-->	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-27 15:55:46	<--	heruur (~tvh@167-147-103-86.dynamic.dsl.tng.de) has quit (Read error: Operation timed out)
2013-03-27 15:57:06	--	Watcher7|off is now known as Watcher7
2013-03-27 15:57:54	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-27 15:58:00	 *	hackagebot compensated 0.2.0.1 - Compensated floating-point arithmetic  http://hackage.haskell.org/package/compensated-0.2.0.1 (EdwardKmett)
2013-03-27 15:58:02	 *	hackagebot log-domain 0.5.0.1 - Log-domain arithmetic  http://hackage.haskell.org/package/log-domain-0.5.0.1 (EdwardKmett)
2013-03-27 15:58:04	 *	hackagebot hash 0.2.0.1 - Hashing tools  http://hackage.haskell.org/package/hash-0.2.0.1 (EdwardKmett)
2013-03-27 15:58:53	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Client Quit)
2013-03-27 15:58:58	 *	merijn is imagining the Unreal Tournament announcer going "P-P-P-PRODUCTIVITY-Y-Y!"
2013-03-27 15:59:17	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 15:59:23	edwardk	heh
2013-03-27 16:00:00	edwardk	More like mortal combat: "FINISH IT!"
2013-03-27 16:00:25	edwardk	er kombat
2013-03-27 16:00:31	-->	dukedave (~dukedave@ip68-109-181-31.ph.ph.cox.net) has joined #haskell
2013-03-27 16:00:50	Nimatek	I always hear "P-P-P-PROCASTINATION!"
2013-03-27 16:03:07	<--	byc (~byc@2001:da8:20c:1705:21c:23ff:fe3b:a900) has quit (Ping timeout: 240 seconds)
2013-03-27 16:03:47	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-27 16:03:48	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-27 16:04:02	merijn	Nimatek: Join the club
2013-03-27 16:04:30	-->	m_hyperbolic (~powergian@0x3ec66863.inet.dsl.telianet.dk) has joined #haskell
2013-03-27 16:05:21	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-27 16:05:26	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 16:05:43	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Client Quit)
2013-03-27 16:05:44	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-27 16:05:50	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-27 16:05:57	ski	@hoogle club
2013-03-27 16:05:57	lambdabot	No results found
2013-03-27 16:06:20	centrinia	I imagine the Unreal Tournament announcer go: "DENIED!!"
2013-03-27 16:06:21	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-27 16:06:29	<--	kurkale6ka (~kurkale6k@84.19.53.21) has left #haskell ("WeeChat 0.3.9.2")
2013-03-27 16:06:57	<--	sopvop (~lonokhov@213.170.88.44) has quit (Client Quit)
2013-03-27 16:07:05	<--	gg7 (~gg7@unaffiliated/gg7) has quit (Quit: You humans are incomprehensible.)
2013-03-27 16:08:13	<--	odi (~user@089144206079.atnat0015.highway.a1.net) has quit (Ping timeout: 240 seconds)
2013-03-27 16:08:32	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-27 16:08:34	 *	typoclass imagines the UT announce go "MEEEEOOOWW!!"
2013-03-27 16:08:49	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-27 16:08:51	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 16:09:04	-->	mr-- (~martin@pcmat00034.uni-regensburg.de) has joined #haskell
2013-03-27 16:11:23	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-27 16:11:25	-->	linduxed (~linduxed@194-14-0-85.serioustubes.org) has joined #haskell
2013-03-27 16:11:26	-->	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 16:11:31	-->	heruur (~tvh@2a00:12d0:a100:9501:2565:d753:11a0:dabd) has joined #haskell
2013-03-27 16:11:34	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 16:11:55	<--	extraordinaire (~extraordi@mail.secretsales.com) has quit (Quit: extraordinaire)
2013-03-27 16:12:53	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-03-27 16:12:54	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-27 16:13:31	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 16:13:32	<--	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-27 16:13:51	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Quit: leaving)
2013-03-27 16:14:12	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 257 seconds)
2013-03-27 16:14:18	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-03-27 16:14:24	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-27 16:15:44	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 246 seconds)
2013-03-27 16:16:18	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 252 seconds)
2013-03-27 16:16:19	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-03-27 16:16:20	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-27 16:16:25	-->	dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 16:16:49	<--	Jeanne-Kamikaze (~Jeanne-Ka@192.53.76.188.dynamic.jazztel.es) has quit (Read error: Connection reset by peer)
2013-03-27 16:16:56	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-27 16:17:18	<--	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-27 16:18:26	-->	gbeshers (gbeshers@nat/redhat/x-dbgfztdhldvkuvhc) has joined #haskell
2013-03-27 16:19:07	-->	mathcog (af9cf502@gateway/web/freenode/ip.175.156.245.2) has joined #haskell
2013-03-27 16:19:12	<--	EarlGray (~mitra@195.20.154.2) has quit (Read error: Connection reset by peer)
2013-03-27 16:19:26	<--	m_hyperbolic (~powergian@0x3ec66863.inet.dsl.telianet.dk) has quit (Quit: WeeChat 0.4.0)
2013-03-27 16:19:31	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-27 16:19:36	<--	anRch (~markmilli@pool-108-20-96-150.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-03-27 16:19:41	-->	powergiant (~powergian@0x3ec66863.inet.dsl.telianet.dk) has joined #haskell
2013-03-27 16:20:03	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-27 16:20:18	--	powergiant is now known as m_hyperbolic
2013-03-27 16:20:47	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-27 16:21:31	-->	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 16:21:31	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-27 16:21:31	--	croikle_ is now known as croikle
2013-03-27 16:21:55	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-27 16:24:06	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Read error: Operation timed out)
2013-03-27 16:24:16	-->	akamaus (~akamaus@91.203.66.24) has joined #haskell
2013-03-27 16:24:24	-->	edtsech_ (~edtsech@194.213.198.34) has joined #haskell
2013-03-27 16:24:53	<--	edtsech (~edtsech@80.243.180.82) has quit (Ping timeout: 248 seconds)
2013-03-27 16:25:21	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-27 16:25:21	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-27 16:25:32	-->	niklasb (~codeslay0@p5B3102CC.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 16:27:05	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 16:27:05	nooodl	is there a nice way to define mapM without relying on sequence?
2013-03-27 16:27:50	-->	dodo_ (c14890e2@gateway/web/freenode/ip.193.72.144.226) has joined #haskell
2013-03-27 16:28:14	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 272 seconds)
2013-03-27 16:28:37	byorgey	nooodl: well, you can define mapM directly via explicit recursion, and then define sequence in terms of mapM
2013-03-27 16:29:06	byorgey	I don't know what exactly you're looking for
2013-03-27 16:29:14	nooodl	something like that, yeah
2013-03-27 16:29:53	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Ping timeout: 240 seconds)
2013-03-27 16:30:12	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-27 16:30:38	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-27 16:30:39	merijn	nooodl: Why would you want that, though?
2013-03-27 16:30:47	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 16:30:56	nooodl	i'm just trying to understand mapM
2013-03-27 16:31:23	centrinia	@source mapM
2013-03-27 16:31:23	lambdabot	mapM not available
2013-03-27 16:31:23	merijn	nooodl: The trick to understanding mapM is probably more about understanding sequence than about mapM itself
2013-03-27 16:31:36	centrinia	lambdabot is not as insulting as in the past.
2013-03-27 16:31:49	merijn	centrinia: "mapM f = sequence . map f"
2013-03-27 16:32:13	byorgey	my point was that you can also invert it, and say that the trick to understanding sequence is to understanding mapM
2013-03-27 16:32:22	byorgey	I think the real trick is to understand how the two are related. =)
2013-03-27 16:32:39	merijn	nooodl: What is it that confuses you about mapM?
2013-03-27 16:32:40	nooodl	sequence = mapM id, right?
2013-03-27 16:32:45	byorgey	nooodl: right
2013-03-27 16:33:12	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 16:33:15	merijn	Yes, since map id xs = id xs = xs
2013-03-27 16:33:52	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-27 16:33:58	nooodl	maybe i should try to understand sequence first
2013-03-27 16:34:00	hpaste	Quchen pasted “sequence written out” at http://hpaste.org/84717
2013-03-27 16:34:21	nooodl	i was about to do exactly that
2013-03-27 16:34:21	quchen	^ This is from my "functions_comprehensible" file that I wrote to understand mapM and foldM and so on.
2013-03-27 16:34:22	mgsloan	nooodl: also, mapM f = sequence . map f
2013-03-27 16:34:24	quchen	Maybe it's helpful
2013-03-27 16:34:28	nooodl	thanks, quchen
2013-03-27 16:34:28	merijn	and "mapM f = sequence . map f", so "mapM id = sequence . map id" => "mapM id = sequence . id" => "mapM id = sequence"
2013-03-27 16:34:49	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 16:35:11	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 256 seconds)
2013-03-27 16:35:17	quchen	nooodl: Basically, if you have a list of monadic things, sequence pulls out the value of each one and puts it in a list of that monad.
2013-03-27 16:35:25	armlesshobo	mapM takes a list and maps a monadic constructor to each value.
2013-03-27 16:35:26	quchen	> sequence [Just 1, Just 2, Just 3]
2013-03-27 16:35:26	armlesshobo	right?
2013-03-27 16:35:27	lambdabot	  Just [1,2,3]
2013-03-27 16:35:33	nooodl	oooh, i see why sequence does what it does for the list monad
2013-03-27 16:35:38	merijn	nooodl: Try these in ghci: "map print [1..10] !! 3" and "mapM print [1..10] !! 3", compare results
2013-03-27 16:35:48	quchen	"pull out 1, pull out 2, pull out 3; put everything in a Maybe-List"
2013-03-27 16:35:53	nooodl	that do notation expansion is just a list comprehension
2013-03-27 16:35:57	armlesshobo	mapM (\x -> case x of 0 -> Nothing; _ -> Just x) [1,2,3,4]
2013-03-27 16:36:03	armlesshobo	> mapM (\x -> case x of 0 -> Nothing; _ -> Just x) [1,2,3,4]
2013-03-27 16:36:05	lambdabot	  Just [1,2,3,4]
2013-03-27 16:36:20	-->	roadfish (~user@209-239-15-200.ded.execulink.com) has joined #haskell
2013-03-27 16:36:28	byorgey	merijn: well, the second one doesn't type check
2013-03-27 16:36:29	quchen	nooodl: do notation is somewhat similar to list comprehensions sometimes, yes.
2013-03-27 16:36:33	merijn	Actually, I guess my second example is a type error, silly me
2013-03-27 16:36:43	<--	iulian (~iulian@ubuntu/member/iulian) has quit (Read error: Connection reset by peer)
2013-03-27 16:36:53	hpaste	Quchen pasted “mapM written out” at http://hpaste.org/84718
2013-03-27 16:36:55	merijn	quchen: By "somewhat similar" you mean "almost identical", right?
2013-03-27 16:37:00	-->	iulian (~iulian@d67-193-181-113.home3.cgocable.net) has joined #haskell
2013-03-27 16:37:14	<--	akamaus (~akamaus@91.203.66.24) has quit (Read error: Operation timed out)
2013-03-27 16:37:17	<--	iulian (~iulian@d67-193-181-113.home3.cgocable.net) has quit (Changing host)
2013-03-27 16:37:17	-->	iulian (~iulian@ubuntu/member/iulian) has joined #haskell
2013-03-27 16:37:24	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-03-27 16:37:46	<--	mathcog (af9cf502@gateway/web/freenode/ip.175.156.245.2) has left #haskell
2013-03-27 16:37:47	byorgey	they are actually isomorphic for the list monad.  And with the MonadComprehensions extension turned on, you can use list comprehension syntax for any monad!
2013-03-27 16:38:03	byorgey	well, you need MonadPlus if you use guards.
2013-03-27 16:38:04	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 16:38:14	-->	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has joined #haskell
2013-03-27 16:38:18	<--	jianmeng (~mengjian@123.138.24.84) has quit (Quit: Leaving.)
2013-03-27 16:38:21	tom4939_	quchen: Isn't list comprehension syntax sugar for do-notation (which is sugar for bind ofc)?
2013-03-27 16:38:46	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-03-27 16:38:48	-->	mmm__ (~bark@2001:470:8a52:67:95fc:7327:cfbb:859f) has joined #haskell
2013-03-27 16:38:49	byorgey	tom4939_: I think list comprehensions are desugared directly to functions like filter and map, not to do-notation
2013-03-27 16:38:49	quchen	tom4939_: That would be one way to implement list comprehensions, yes.
2013-03-27 16:38:50	tom4939_	Oh, that's what the previous two lines said.
2013-03-27 16:38:59	-->	tjohnson (~tjohnson@68.65.169.216) has joined #haskell
2013-03-27 16:39:04	roadfish	I noticed that case works with otherwise _other _otherwise ... why does Haskell have all the different versions?
2013-03-27 16:39:26	byorgey	roadfish: it doesn't.
2013-03-27 16:39:38	tom4939_	quchen: Ah sure, haskell implementations may choose an alternative implementation for performance reasons or whatnot.
2013-03-27 16:39:42	hpc	> case 1 of otherwise -> otherwise
2013-03-27 16:39:44	lambdabot	  1
2013-03-27 16:39:45	byorgey	roadfish: it works with eroifjergawlij too, try it!
2013-03-27 16:39:48	hpc	> otherwise
2013-03-27 16:39:48	quchen	roadfish: _ basically means "whatever". Sometimes you'd like to indicate which "whatever", so you call it "_something"
2013-03-27 16:39:49	lambdabot	  True
2013-03-27 16:39:52	hpc	:t otherwise
2013-03-27 16:39:53	<--	nade (~nade@WS-ESR1-72-49-94-77.fuse.net) has quit (Quit: nade)
2013-03-27 16:39:54	lambdabot	Bool
2013-03-27 16:40:07	byorgey	roadfish: any variable name is a pattern which matches anything, so it doesn't matter what name you use
2013-03-27 16:40:30	quchen	tom4939_: The Haskell report says "list comprehensions satisfy these laws" and that's it. I'm not sure what GHC does internally.
2013-03-27 16:40:35	byorgey	roadfish: in fact for a default in a case expression, it's best to use _ instead of 'otherwise'
2013-03-27 16:40:36	roadfish	ok, so is really just: case 1 of _ -> 33
2013-03-27 16:40:40	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-27 16:40:50	byorgey	'otherwise' is defined to be 'True', for use in guards
2013-03-27 16:40:52	merijn	roadfish: Yes, assuming the result clause doesn't use the same name
2013-03-27 16:40:55	quchen	tom4939_: For all practical purposes, list comprehensions are the same as do notation.
2013-03-27 16:40:58	roadfish	good. I'll switch to _ ... much shorter
2013-03-27 16:41:22	merijn	roadfish: _ and variable names are indistinguishable, but _ doesn't produce a warning if you don't plan to use the match
2013-03-27 16:41:31	hpc	list comprehensions can in fact be directly translated into do-notation (and i believe they are in ghc)
2013-03-27 16:41:50	hpc	older haskell standards had fully-generic monad comprehensions
2013-03-27 16:41:59	<--	cognominal (~cognomina@37.161.231.44) has quit (Ping timeout: 256 seconds)
2013-03-27 16:42:03	hpc	and there's an extension to get it back
2013-03-27 16:42:07	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 240 seconds)
2013-03-27 16:42:26	quchen	hpc: I'm not sure about that do notation thing. Guards for example may produce lots of [], which could be inefficient. Maybe having special handling can eliminate that
2013-03-27 16:42:29	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 248 seconds)
2013-03-27 16:42:46	roadfish	so list comprehensions are translated into do-notation which is then translated into >>=/return?
2013-03-27 16:42:56	hpc	and guard
2013-03-27 16:42:57	hpc	:t guard
2013-03-27 16:42:58	lambdabot	MonadPlus m => Bool -> m ()
2013-03-27 16:43:01	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-03-27 16:43:10	byorgey	roadfish: They *could* be, but I doubt it actually works that way in GHC.
2013-03-27 16:43:19	hpc	[expr | name <- action, action, boolean]
2013-03-27 16:43:22	hpc	translates to
2013-03-27 16:43:36	hpc	do {name <- action; action; guard boolean; return expr}
2013-03-27 16:43:39	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-27 16:43:39	quchen	[ x | x <- [1..10], even x ]   ==   [1..10] >> \x -> guard (even x) >>= return x
2013-03-27 16:43:56	quchen	= in the wrong place, woops
2013-03-27 16:43:59	-->	Thomyho5 (~thomyho@mnhm-4d0130c4.pool.mediaWays.net) has joined #haskell
2013-03-27 16:44:07	quchen	[ x | x <- [1..10], even x ]   ==   [1..10] >>= \x -> guard (even x) >> return x
2013-03-27 16:44:18	<--	SonderbladeWork (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 245 seconds)
2013-03-27 16:45:24	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-03-27 16:45:37	byorgey	the code that actually desugars list comprehensions is here:  https://github.com/ghc/ghc/blob/master/compiler/deSugar/DsListComp.lhs
2013-03-27 16:45:58	byorgey	too bad the formatting is screwed up and it's impossible to read on that page
2013-03-27 16:45:58	<--	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has quit (Ping timeout: 272 seconds)
2013-03-27 16:46:19	quchen	And if you click on "raw" it doesn't get better
2013-03-27 16:46:20	tom4939_	https://raw.github.com/ghc/ghc/master/compiler/deSugar/DsListComp.lhs
2013-03-27 16:46:37	merijn	@ask mm_freak Ah, right. If your example had used ReaderT IO instead of Reader for the Wire monad then the example could've used stepSession directly, right?
2013-03-27 16:46:37	lambdabot	Consider it noted.
2013-03-27 16:47:36	<--	ISF_ec09 (~ivan@187.64.222.221) has quit (Ping timeout: 264 seconds)
2013-03-27 16:48:04	byorgey	hah, it looks like it actually desugars directly into calls to 'foldr' and 'build'
2013-03-27 16:48:16	mm_freak	merijn: it's better to highlight me directly, otherwise you may find yourself waiting a few days for the answer =)
2013-03-27 16:48:20	nooodl	> let mapM' f [] = return []; mapM' f (x:xs) = f x >>= \r -> liftM (r:) (mapM' f xs) in mapM' (\x -> [x,-x]) [3,4]
2013-03-27 16:48:22	lambdabot	  [[3,4],[3,-4],[-3,4],[-3,-4]]
2013-03-27 16:48:29	nooodl	hell yeah
2013-03-27 16:48:37	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-03-27 16:48:39	mm_freak	merijn: in the case of ReaderT the outer computation must be a ReaderT as well when using stepSession
2013-03-27 16:48:48	mm_freak	merijn: in most cases even that's not what you want
2013-03-27 16:48:59	-->	dskippy (~mmachenry@67.208.185.2) has joined #haskell
2013-03-27 16:49:07	byorgey	nooodl: nice!
2013-03-27 16:49:16	mm_freak	the ReaderT carries information about the current instant and may change between instants
2013-03-27 16:49:26	merijn	mm_freak: I'm never sure when you're around :p
2013-03-27 16:49:33	mm_freak	so what you really want is:  runReaderT (stepWire w dt x) s
2013-03-27 16:49:41	mm_freak	merijn: you don't have to be =)
2013-03-27 16:49:57	mm_freak	merijn: as long as i'm online i receive the highlight as soon as i go to my computer =)
2013-03-27 16:50:10	-->	cognominal (~cognomina@37.161.231.44) has joined #haskell
2013-03-27 16:51:08	nooodl	ooh, found something even nicer
2013-03-27 16:51:08	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-03-27 16:51:10	nooodl	> let mapM' f [] = return []; mapM' f (x:xs) = do { r <- f x; rs <- mapM' f xs; return (r:rs) } in mapM' (\x -> [x,-x]) [3,4]
2013-03-27 16:51:11	-->	Esa|iPhone6 (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 16:51:12	lambdabot	  [[3,4],[3,-4],[-3,4],[-3,-4]]
2013-03-27 16:51:23	<--	roadfish (~user@209-239-15-200.ded.execulink.com) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-27 16:51:29	merijn	What did you mean by "the outer computation must be a ReaderT as well"?
2013-03-27 16:51:43	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-27 16:52:30	-->	inad922 (~inad925@93.93.84.85) has joined #haskell
2013-03-27 16:53:39	-->	rsampaio (~rodrigo@186.202.130.24) has joined #haskell
2013-03-27 16:53:50	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-03-27 16:53:58	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-27 16:54:13	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-03-27 16:54:34	<--	mr-- (~martin@pcmat00034.uni-regensburg.de) has quit (Remote host closed the connection)
2013-03-27 16:55:17	<--	cognominal (~cognomina@37.161.231.44) has quit (Ping timeout: 246 seconds)
2013-03-27 16:55:31	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-03-27 16:55:46	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-27 16:56:07	-->	_d3f (~gnu@95.211.188.251) has joined #haskell
2013-03-27 16:56:12	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-27 16:56:46	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Quit: ilyanok)
2013-03-27 16:56:57	merijn	mm_freak: i.e. in my case I have a "global" set of input state that doesn't change overtime that should go to all the wires
2013-03-27 16:58:03	<--	EarlGray (~mitra@195.20.154.2) has quit (Ping timeout: 245 seconds)
2013-03-27 16:58:20	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-03-27 16:58:23	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 16:58:49	<--	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has quit (Quit: leaving)
2013-03-27 16:58:52	-->	Jeanne-Kamikaze (~Jeanne-Ka@183.78.76.188.dynamic.jazztel.es) has joined #haskell
2013-03-27 17:00:07	<--	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has quit (Ping timeout: 240 seconds)
2013-03-27 17:00:08	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 245 seconds)
2013-03-27 17:00:32	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 17:01:23	-->	morazow (~morazow@gsd116.gsd.inesc-id.pt) has joined #haskell
2013-03-27 17:01:27	-->	EarlGray (~mitra@195.20.154.2) has joined #haskell
2013-03-27 17:03:15	mm_freak	merijn: your application loop basically
2013-03-27 17:03:16	-->	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has joined #haskell
2013-03-27 17:03:34	mm_freak	merijn: if that's the case you can put everything into the ReaderT
2013-03-27 17:03:56	mm_freak	and then you can use stepSession
2013-03-27 17:04:28	merijn	Yeah, that's what I figured
2013-03-27 17:04:33	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-27 17:04:34	-->	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has joined #haskell
2013-03-27 17:04:34	fxr	hmm may I ask another simplification for this lens expression in a state monad? "x <- uses listeners (flip (M.!) idx)"
2013-03-27 17:04:35	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-27 17:04:45	merijn	The same holds for RWST, I guess?
2013-03-27 17:05:22	-->	mattrepl (~mattrepl@ssid-mason-secure-216.wireless.gmu.edu) has joined #haskell
2013-03-27 17:05:30	merijn	fxr: M.! is the indexing function for Data.Map (probably), so "m ! x" looks up the key x in m.
2013-03-27 17:06:06	merijn	fxr: The flip is just there to avoid a confusing section "(M.! idx)"
2013-03-27 17:06:36	fxr	actually I'm looking for a simplification for the lens side
2013-03-27 17:06:49	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-27 17:06:51	fxr	there should be an operator for Indexed maps
2013-03-27 17:07:25	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Client Quit)
2013-03-27 17:07:42	fxr	merijn: thanks, it looks better now
2013-03-27 17:08:00	<--	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has quit (Remote host closed the connection)
2013-03-27 17:09:14	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 17:09:27	edwardk	fxr: use (listeners.ix idx)
2013-03-27 17:09:45	edwardk	or use $ listeners.ix idx
2013-03-27 17:10:59	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Read error: Operation timed out)
2013-03-27 17:11:18	edwardk	actually that is a lie
2013-03-27 17:11:28	fxr	yeah I guessed
2013-03-27 17:11:31	edwardk	because the lens for 'ix' doesn't know you assume the element to actually be there
2013-03-27 17:11:39	mm_freak	merijn: yes
2013-03-27 17:11:42	edwardk	so it only gives you a traverse
2013-03-27 17:11:49	edwardk	preuse $ listeners.ix idx
2013-03-27 17:11:59	supki	Just x <- use (listeners . at idx) ?
2013-03-27 17:12:02	edwardk	will give you a preview (that is as a Maybe) in case the element isn't in the list.
2013-03-27 17:12:03	mm_freak	merijn: however, i always keep the monad of the application loop separate from the wire's monad
2013-03-27 17:12:07	edwardk	supki's suggestion works
2013-03-27 17:12:23	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Quit: ilyanok)
2013-03-27 17:12:29	edwardk	also use $ listeners.singular (ix idx)
2013-03-27 17:12:33	-->	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has joined #haskell
2013-03-27 17:12:44	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-27 17:12:46	-->	tomboy66 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-27 17:13:11	edwardk	we don't offer non-total lenses by default, but instead offer traversals that you can choose to assert are total by using singular or reading with ^?!    sadly we don't have a 'use' equivalent for ^?!
2013-03-27 17:13:13	<--	Shin-LaC (~LaC@68.65.81.227) has quit (Quit: Computer has gone to sleep.)
2013-03-27 17:13:30	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-03-27 17:13:35	fxr	thank you very much
2013-03-27 17:14:15	merijn	mm_freak: For any specific reason?
2013-03-27 17:14:25	edwardk	fxr: but in general 'at' and 'ix' can be used to index into any indexed container.
2013-03-27 17:14:43	edwardk	> M.fromList [(2,"hello")]^.at 2
2013-03-27 17:14:45	lambdabot	  Just "hello"
2013-03-27 17:14:49	edwardk	> M.fromList [(2,"hello")]^.at 3
2013-03-27 17:14:51	lambdabot	  Nothing
2013-03-27 17:15:08	<--	tomboy65 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-03-27 17:15:11	edwardk	that is a lens that lets you view any field of a map as Maybe its contents.
2013-03-27 17:15:20	edwardk	> M.fromList [(2,"hello")] & at 2 .~ Nothing
2013-03-27 17:15:22	lambdabot	  fromList []
2013-03-27 17:15:24	fxr	pretty clear
2013-03-27 17:15:34	fxr	I am exactly looking for at and ix.
2013-03-27 17:15:34	mm_freak	merijn: composability…  the wire is usually pure only needing some environment information
2013-03-27 17:15:53	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Ping timeout: 240 seconds)
2013-03-27 17:15:58	edwardk	ix on the other hand is a traversal, not a lens. that means it can be used to edit something _only if it is already there_
2013-03-27 17:16:10	edwardk	> M.fromList [(2,"hello")] & ix 2 .~ "goodbye"
2013-03-27 17:16:12	lambdabot	  fromList [(2,"goodbye")]
2013-03-27 17:16:15	edwardk	> M.fromList [(2,"hello")] & ix 3 .~ "goodbye"
2013-03-27 17:16:17	lambdabot	  fromList [(2,"hello")]
2013-03-27 17:16:23	<--	dukedave (~dukedave@ip68-109-181-31.ph.ph.cox.net) has quit (Ping timeout: 245 seconds)
2013-03-27 17:16:29	edwardk	> M.fromList [(2,"hello")] & at 3 .~ Just "goodbye"
2013-03-27 17:16:30	-->	trescenzi (~trescenzi@2620:91:0:163:e5c1:9420:2d55:39aa) has joined #haskell
2013-03-27 17:16:31	lambdabot	  fromList [(2,"hello"),(3,"goodbye")]
2013-03-27 17:16:50	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-27 17:16:51	edwardk	> M.fromList [(2,"hello")] & at 3 ?~ "goodbye" -- we can implicitly bolt the Just on the result with ?~ instead of .~
2013-03-27 17:16:53	lambdabot	  fromList [(2,"hello"),(3,"goodbye")]
2013-03-27 17:17:06	-->	simon (simon@relay.pronoia.dk) has joined #haskell
2013-03-27 17:17:08	fxr	hmm, how about setters like "_ <- listeners %= M.insert (fromInteger i) h"
2013-03-27 17:17:21	<--	nooodl (~nooodl@91.179.180.252) has quit (Ping timeout: 252 seconds)
2013-03-27 17:17:25	-->	catbee (~user@70-36-157-176.static.sonic.net) has joined #haskell
2013-03-27 17:17:30	fxr	can I simplify it more?
2013-03-27 17:17:43	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-03-27 17:17:46	edwardk	listeners.at (fromInteger i) ?= h
2013-03-27 17:17:49	glguy	You don't need to _ <- the %= operator
2013-03-27 17:18:16	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 272 seconds)
2013-03-27 17:18:27	fxr	glguy: yeah I added specifically for explanation
2013-03-27 17:18:52	glguy	That silly warning is why we have to have the <%= operator
2013-03-27 17:19:36	edwardk	yeah. half the operators in lens are caused by the 'you didn't remember to use that' police.
2013-03-27 17:19:48	--	threeday1onk is now known as threedaymonk
2013-03-27 17:20:14	otters	edwardk: omg i didn't realize that
2013-03-27 17:20:16	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 17:20:27	otters	i've been using .~ (Just ...)
2013-03-27 17:20:32	otters	shame on me
2013-03-27 17:20:34	edwardk	otters: =)
2013-03-27 17:20:44	edwardk	?= and ?~ are pretty handy for playing with maps.
2013-03-27 17:20:44	lambdabot	Maybe you meant: . ? @ v
2013-03-27 17:20:49	edwardk	if nothing else they kill a lot of parens
2013-03-27 17:20:51	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 245 seconds)
2013-03-27 17:20:55	fxr	exactly
2013-03-27 17:21:13	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 17:21:16	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Ping timeout: 245 seconds)
2013-03-27 17:21:38	<--	Th0mas (~thomas@th0mas.nl) has quit (Ping timeout: 256 seconds)
2013-03-27 17:21:39	<--	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-27 17:21:41	fxr	but it's hard to find the right operators at the beginning
2013-03-27 17:21:51	coppro	edwardk: oh, hey, I like that solution of indexing
2013-03-27 17:21:56	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 17:21:58	coppro	edwardk: I vaguely recall we discussed it a while back
2013-03-27 17:22:05	-->	cognominal (~cognomina@37.161.231.44) has joined #haskell
2013-03-27 17:22:34	otters	yeah there are so many operators in lens it's hard to find the right ones
2013-03-27 17:22:36	-->	Th0mas (~thomas@th0mas.nl) has joined #haskell
2013-03-27 17:22:49	edwardk	i usually recommend folks to start with the basic ones
2013-03-27 17:22:52	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-27 17:22:53	edwardk	then learn the others as needed
2013-03-27 17:23:09	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-27 17:23:16	edwardk	in general if you ever wind up using the same lens twice in a chunk of code its because you didn't spot that there was a way to fuse both accesses together
2013-03-27 17:23:25	edwardk	and that is a good time to pop on #haskell-lens and ask
2013-03-27 17:23:35	glguy	Same lens twice?
2013-03-27 17:23:52	edwardk	glguy: e.g. reading from foo.at 2     and then later writing to foo.at 2  in the same block of code
2013-03-27 17:23:53	fxr	aha, a separate # for lens
2013-03-27 17:23:59	 *	fxr joins...
2013-03-27 17:24:14	glguy	edwardk: Ah, OK.
2013-03-27 17:24:36	edwardk	glguy: most of the time that is better served by doing something smarter with the foo.at 2 lens that lets you share the work getting down with the work coming back up
2013-03-27 17:24:44	edwardk	and the result often has a more permissive type signature, etc.
2013-03-27 17:24:47	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-03-27 17:24:57	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Quit: leaving)
2013-03-27 17:25:10	edwardk	After all that work put into defining cloneLens, etc. I basically find the need for them to be a sign that you're using the wrong combinators
2013-03-27 17:25:38	 *	edwardk has to run.
2013-03-27 17:25:41	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-27 17:25:51	<--	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Client Quit)
2013-03-27 17:25:59	merijn	mm_freak: mmmm, I basically have a world state that gets mutated by the wires and some output IO events (networking) that get produced. I'm just not really sure whether I should just have the Wire use the RWST IO monad and carry the world state in State and do the networking directly in the wire, or just use a pure RWS wire that stuffs the networking in the Writer and runs everything at the end
2013-03-27 17:26:19	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-03-27 17:27:15	mm_freak	merijn: it's a tradeoff…  you should have tried both before you can make a real judgement
2013-03-27 17:27:17	<--	plcplc (~quassel@188-183-115-64-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 248 seconds)
2013-03-27 17:27:40	<--	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has quit (Read error: Operation timed out)
2013-03-27 17:28:32	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has quit (Ping timeout: 246 seconds)
2013-03-27 17:28:37	merijn	ok, I'll just try RWST IO first, because then I can just get away with stepSession :p
2013-03-27 17:29:03	-->	chatsiri_ (~chatsiri_@171.7.150.203) has joined #haskell
2013-03-27 17:29:13	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-27 17:29:43	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 17:29:43	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Quit: Leaving.)
2013-03-27 17:30:25	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Client Quit)
2013-03-27 17:30:41	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-27 17:30:50	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-27 17:31:34	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Ping timeout: 248 seconds)
2013-03-27 17:32:35	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (Remote host closed the connection)
2013-03-27 17:32:45	<--	Argue (~Argue@112.209.13.160) has quit (Ping timeout: 252 seconds)
2013-03-27 17:33:07	-->	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has joined #haskell
2013-03-27 17:33:51	<--	adlan (~adlan@210.195.12.15) has quit (Remote host closed the connection)
2013-03-27 17:34:07	<--	cinimod (~user@cpc27-nmal16-2-0-cust206.19-2.cable.virginmedia.com) has quit (Ping timeout: 240 seconds)
2013-03-27 17:34:33	-->	edeast (~chatzilla@38.108.87.20) has joined #haskell
2013-03-27 17:36:03	-->	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has joined #haskell
2013-03-27 17:36:19	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Client Quit)
2013-03-27 17:37:01	-->	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 17:37:01	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-27 17:37:01	--	croikle_ is now known as croikle
2013-03-27 17:37:17	-->	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has joined #haskell
2013-03-27 17:38:11	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 17:39:07	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-27 17:39:13	<--	_d3f (~gnu@95.211.188.251) has quit (Quit: WeeChat 0.4.0)
2013-03-27 17:39:31	<--	nouitfvf (~brain@unaffiliated/nouitfvf) has quit (Ping timeout: 264 seconds)
2013-03-27 17:39:32	-->	nouitfvf_ (~brain@unaffiliated/nouitfvf) has joined #haskell
2013-03-27 17:39:33	-->	_d3f (~gnu@nl2.ovpn.to) has joined #haskell
2013-03-27 17:40:08	<--	cognominal (~cognomina@37.161.231.44) has quit (Ping timeout: 245 seconds)
2013-03-27 17:40:45	<--	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has quit (Quit: anRch)
2013-03-27 17:40:49	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has quit (Quit: Leaving.)
2013-03-27 17:41:14	<--	nouitfvf_ (~brain@unaffiliated/nouitfvf) has quit (Client Quit)
2013-03-27 17:41:27	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2013-03-27 17:41:38	-->	Mon_Ouie (~Mon_Ouie@91.176.13.218) has joined #haskell
2013-03-27 17:41:38	<--	Mon_Ouie (~Mon_Ouie@91.176.13.218) has quit (Changing host)
2013-03-27 17:41:38	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-27 17:42:15	-->	agr (bae74f6a@gateway/web/freenode/ip.186.231.79.106) has joined #haskell
2013-03-27 17:42:38	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-27 17:43:18	-->	Itkovian (~Itkovian@188.189.64.247) has joined #haskell
2013-03-27 17:44:07	<--	fmapE (~fmapE@2001:18e8:2:10f4:79b1:b7e4:7e76:712f) has quit (Remote host closed the connection)
2013-03-27 17:44:26	-->	cinimod (~user@cpc27-nmal16-2-0-cust206.19-2.cable.virginmedia.com) has joined #haskell
2013-03-27 17:44:35	-->	dcoutts (~duncan@host90-152-0-50.ipv4.regusnet.com) has joined #haskell
2013-03-27 17:44:35	<--	dcoutts (~duncan@host90-152-0-50.ipv4.regusnet.com) has quit (Changing host)
2013-03-27 17:44:35	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2013-03-27 17:45:09	-->	Sculptor (~Sculptor@89.110.204.50) has joined #haskell
2013-03-27 17:45:09	<--	Sculptor (~Sculptor@89.110.204.50) has quit (Changing host)
2013-03-27 17:45:09	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-27 17:45:17	--	cl_away is now known as clahey
2013-03-27 17:45:40	armlesshobo	i'm trying to do error handling, but am unsure about how to go about it.
2013-03-27 17:45:49	armlesshobo	really, i'm not sure if i should just use error
2013-03-27 17:46:09	armlesshobo	or come up with my own instance of the Error monad
2013-03-27 17:46:14	-->	Taneb (~nathan@92.23.119.149) has joined #haskell
2013-03-27 17:46:35	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-03-27 17:46:39	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has left #haskell
2013-03-27 17:46:56	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-27 17:47:07	armlesshobo	I'm only checking if a file exists and is readable, but want to error out with the appropriate message
2013-03-27 17:47:14	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 17:47:38	armlesshobo	also, if the user put supplied an argument (this will be run in a terminal)
2013-03-27 17:48:17	armlesshobo	so, for three simple error cases, is it worth using the Error monad or just calling error?
2013-03-27 17:48:23	<--	typoclass (~typoclass@p4FC921C6.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-03-27 17:48:29	-->	nouitfvf (~brain@unaffiliated/nouitfvf) has joined #haskell
2013-03-27 17:48:38	<--	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Ping timeout: 248 seconds)
2013-03-27 17:48:48	-->	cognominal (~cognomina@37.161.231.44) has joined #haskell
2013-03-27 17:49:21	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-03-27 17:49:34	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-27 17:49:46	merijn	armlesshobo: It depends on the kind of error and how you want to handle it
2013-03-27 17:50:05	merijn	armlesshobo: If you say "if the file exists I'm just going to quit" then personally I think error is fine
2013-03-27 17:50:25	merijn	eh...doesn't exist, obviously
2013-03-27 17:50:45	armlesshobo	merijn: yeah, it's nothing too serious where I'd need to do special error handling.
2013-03-27 17:51:15	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-27 17:51:18	<--	cyril_ (cyril@nat/intel/x-oqgcxkrqvdkfqtnv) has quit (Remote host closed the connection)
2013-03-27 17:51:24	-->	fmapE (~fmapE@2001:18e8:2:10f4:e4f6:3b4:5812:68ec) has joined #haskell
2013-03-27 17:51:25	merijn	If you need to do things like "check if file exists, if yes do X else do Y" you'd prefer to use Maybe to handle that sort of scenario
2013-03-27 17:51:26	armlesshobo	merijn: i really just want to output a message and exit. really, i can't continue if those cases aren't met.
2013-03-27 17:51:31	<--	Itkovian (~Itkovian@188.189.64.247) has quit (Quit: Itkovian)
2013-03-27 17:51:45	merijn	armlesshobo: Then just go with error for now
2013-03-27 17:51:51	armlesshobo	merijn: ok, thank you
2013-03-27 17:51:52	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Quit: Leaving)
2013-03-27 17:52:53	<--	`ramses (863ab323@gateway/web/freenode/ip.134.58.179.35) has quit (Quit: Page closed)
2013-03-27 17:53:15	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-27 17:53:41	<--	__dv__ (~quassel@SD1.retn.net) has quit (Remote host closed the connection)
2013-03-27 17:53:59	<--	edtsech_ (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-27 17:54:38	--	rmunroe_ is now known as rmunroe
2013-03-27 17:55:33	<--	Mortchek (~danny@unaffiliated/mortchek) has quit (Ping timeout: 248 seconds)
2013-03-27 17:56:43	-->	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-27 17:56:50	-->	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has joined #haskell
2013-03-27 17:57:34	-->	Mortchek (~danny@unaffiliated/mortchek) has joined #haskell
2013-03-27 17:57:39	-->	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has joined #haskell
2013-03-27 17:57:57	<--	phyrex1an (~phyrex1an@h-64-3.a155.priv.bahnhof.se) has quit (Remote host closed the connection)
2013-03-27 17:58:03	<--	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has quit (Ping timeout: 252 seconds)
2013-03-27 17:58:30	-->	dskippy1 (~mmachenry@67.208.185.2) has joined #haskell
2013-03-27 17:59:00	<--	dskippy (~mmachenry@67.208.185.2) has quit (Read error: Connection reset by peer)
2013-03-27 17:59:06	-->	skyflash (~skyflash@206.172.31.228) has joined #haskell
2013-03-27 17:59:12	<--	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Read error: Operation timed out)
2013-03-27 17:59:13	<--	dodo_ (c14890e2@gateway/web/freenode/ip.193.72.144.226) has quit (Ping timeout: 245 seconds)
2013-03-27 17:59:34	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Read error: Operation timed out)
2013-03-27 17:59:37	-->	ThomasLocke_ (~ThomasLoc@mail.serverbox.dk) has joined #haskell
2013-03-27 17:59:37	<--	ThomasLocke_ (~ThomasLoc@mail.serverbox.dk) has quit (Changing host)
2013-03-27 17:59:37	-->	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-03-27 17:59:42	-->	x7 (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-27 18:00:07	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 240 seconds)
2013-03-27 18:00:31	mm_freak	merijn: i must say i'm inclined to remove stepSession…  i find using sessionUpdate + stepWire more sensible
2013-03-27 18:01:06	mm_freak	the monads simply aren't related
2013-03-27 18:01:13	-->	skyflas__ (~skyflash@remote.symmetrics.com) has joined #haskell
2013-03-27 18:01:20	<--	_boegel_ (~boegel@b246h203.ugent.be) has quit (Quit: This computer has gone to sleep)
2013-03-27 18:02:24	<--	itemad (~user@212.0.102.162) has quit (Read error: Connection reset by peer)
2013-03-27 18:03:01	mm_freak	if anything a monad morphism argument should be added to stepSession
2013-03-27 18:03:12	mm_freak	forall a. mw a -> m a
2013-03-27 18:03:19	<--	skyflash (~skyflash@206.172.31.228) has quit (Ping timeout: 245 seconds)
2013-03-27 18:03:22	merijn	My biggest annoyance is sessionUpdate and manually passing it to stepWire feels so redundant/unnecessary
2013-03-27 18:03:48	<--	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has quit (Read error: Operation timed out)
2013-03-27 18:05:05	-->	NemesisD_ (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 18:05:11	--	NemesisD_ is now known as NemesisD
2013-03-27 18:05:19	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-27 18:05:46	-->	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has joined #haskell
2013-03-27 18:06:23	-->	staafl_123 (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-27 18:06:24	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-27 18:06:58	ehamberg	petterw: ïnteresting
2013-03-27 18:07:01	-->	Itkovian (~Itkovian@188.189.64.247) has joined #haskell
2013-03-27 18:07:26	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-27 18:07:43	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-27 18:08:03	pettter	ehamberg: ECHAN?
2013-03-27 18:08:20	-->	atriq (~nathan@host-92-30-195-9.as13285.net) has joined #haskell
2013-03-27 18:08:24	pettter	or potentially wrong user :)
2013-03-27 18:08:29	mm_freak	merijn: it wouldn't be as annoying if i had called it "stepClock" instead =)
2013-03-27 18:08:46	mm_freak	(dt, c) <- stepClock c
2013-03-27 18:08:53	mm_freak	(mx, w) <- stepWire w c x
2013-03-27 18:08:54	ehamberg	pettter: ECHAN :)
2013-03-27 18:09:05	mm_freak	uh
2013-03-27 18:09:13	mm_freak	couldn't have written this more buggy =)
2013-03-27 18:09:17	mm_freak	(dt, c) <- stepClock c'
2013-03-27 18:09:18	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-03-27 18:09:21	pettter	:)
2013-03-27 18:09:24	mm_freak	(mx, w) <- stepWire w' dt x'
2013-03-27 18:09:29	mm_freak	there we go =)
2013-03-27 18:09:34	<--	Taneb (~nathan@92.23.119.149) has quit (Ping timeout: 272 seconds)
2013-03-27 18:09:37	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 18:09:43	<--	staafl_alt (~staafl@95-42-19-2.btc-net.bg) has quit (Ping timeout: 260 seconds)
2013-03-27 18:09:49	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-27 18:10:09	-->	zachk (~root@unaffiliated/zachk) has joined #haskell
2013-03-27 18:10:23	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 18:10:28	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 18:10:34	merijn	But I want things to work by magic :(
2013-03-27 18:10:38	--	atriq is now known as Taneb
2013-03-27 18:10:49	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-27 18:10:51	<--	trescenzi (~trescenzi@2620:91:0:163:e5c1:9420:2d55:39aa) has quit (Remote host closed the connection)
2013-03-27 18:10:52	mm_freak	merijn: they will…  i'm already working on the next netwire =)
2013-03-27 18:11:34	-->	quchen (~david@p54AA2159.dip.t-dialin.net) has joined #haskell
2013-03-27 18:11:36	merijn	btw
2013-03-27 18:11:41	mm_freak	but i'm not going to merge sessionUpdate and stepWire…  i'm going to make the session value polymorphic and introduce wire monad morphisms
2013-03-27 18:12:12	merijn	What's the point of doing "mx `seq`" for the key up/down things in http://hpaste.org/83098?
2013-03-27 18:12:21	merijn	I don't think mx is ever actually used anywhere?
2013-03-27 18:12:39	-->	dukedave (~dukedave@wsip-98-174-226-185.ph.ph.cox.net) has joined #haskell
2013-03-27 18:12:57	-->	raichoo (~raichoo@i59F6A541.versanet.de) has joined #haskell
2013-03-27 18:13:03	mm_freak	merijn: wires can be interpreted as streams, so the 'seq' is akin to the difference between foldl and foldl'
2013-03-27 18:13:11	--	irc: disconnected from server
2013-03-27 18:24:14	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-27 18:24:14	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-27 18:24:14	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-27 18:24:15	--	Nicks #haskell: [@ChanServ [[zz]] \rs ]OLI[ __main__ _anona _br_ _d3f _flow_ _janne _yezariaely `0660 `^_^v `bps_ `micro `nand` aajmakin ab9rf absence abumirqaan acfoltzer acharles aCube Adeon adimit Adios adnap adnauseam aesptux aforemny agr agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b Alice3 alios alistairclark alnix alpounet alshain Amadiro amathew amatsu\idle amiller anachron_ anders^^ andrewsw aninhumer AntiSpamMeta apaku apfel Apocalisp araujo arbn arenz aristid arkeet arkx armlesshobo arnihr__ arun asante10111 aszlig Athas AtnNn augustl Aune Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 ben_d bens bergey` betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld blackmir1oxx BlastHardcheese blooberr BMeph_ bobry bogner Boney Boreeas Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen_ bstrie bxc_ byorgey ByronJohnson bytbox c_wraith Cale caligula Canar canta canvon cardamon carlocci carter catbee Catbuntu ccasin ccxCZ cdidd ceii celery__ Cerise certaint1 chance charlesofarrell chatsiri_ chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisirc_ chrra ciaranm CindyLinz circle cjay clahey ClaudiusMaximus Clint clog cmears cmsd2 cods cognominal colah collin comak companion_cube conal conehead confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross crs__ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dafis dan_johnsin danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander dfletcher_ dgpratt dgvncsz0f DigitalKiwi dilinger_ dixie_ djahandarie djanatyn djcoin dju dkasak dlundy dmac dmarker DMcGill dmwit dnolen dockside1 Dodek dogmaT dolio DolphR domingo_ donri dottedmag dqd Draggor drbean DrChaos dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dskippy1 DT`` duairc_ dukedave dumbhat duosrx DustyDin1o Dybber dylukes dyreshark eacameron EarlGray earthy ecuderpam edeast edenc_ edsko edwardk edwtjo Eelis eff ehamberg Eiam eikke eirikur ejls_ eL_Bart0 elbuck27 eldariof electrogeek elgot Eliel elliott elliottc1ble em end3rW endojelly Enigmagic ent- epta ericmj Eridius erkin ernst Erstarrung Esa|iPhone6 Estrellas etabot ethercrow etrepum EvanR eviltwin_ Excureo f8 fabjan faen FalkoPeters fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow Flint floatingman flori flux fmapE folone formalcow fotc Franciman fredmorcos freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco FunkyDrummer Fuuzetsu fxr fxrh gadjo gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly glguy glguy_ Gothmog_ Gracenotes gseitz gspr gthorslund guampa guerrilla Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hallski HaltingState hanDerPeder harrison_ heath Heffalump helgikrs henk heruur hiptobecubic hiratara hiredman hiroyuki2 hive-mind hiyakashi horlicks hpaste hpc hpd HugoDaniel hungryblank hvr hychen hyko IanKelling ibid IbnFirnas Iceland_jack idnar idntfy2 ido idoru Igloo ijp ilyanok imphasing inad922 inr_ int-e integral_ Internet13 ion ique isomorphic iulian ivan\ ivan____ ivan` ixian izym Jaak jabirali jackhill jacobw jaimef jamwt janbanan JaRoel|4d jaspervdj Jaxan jayne jbauman jcp jdnavarro jdoliner Jeanne-Kamikaze jeff_s1 Jello_Raptor jercos Jesin jesyspa jfischoff jix jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jtalk jtobin juhp julmae julmuri junsuijin jyyou k00mi k0ral kadoban KaiSforza kakos kallisti kalven kamishimo KaneTW kaol kaoskorobase Ke kennyd kennyp_ kevinqcs Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels kmels__ kmicu kmrhb kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius_ krig kryft ks07 kshannon ktosiek Kuba_ kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard LeaChim lennart_ lenstr leoncamel leroux levi liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb LtWorf lucca luite Luke lulf lusory lzm m3ga m_hyperbolic macbr machisuji magicman majoh maksbotan malorie_ mami marienz Martty MasseR mastensg mateu mattp__ mattrepl matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairoi mefisto Megant melter mendez merijn message144 meyersh mgile mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 mmm__ MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom moonlite_ morazow mornfall mortberg Mortchek mpu mr- mrd mrdomino_ MrFenix_ mrko mrotondo mrshoe mrsolo mspells mtlatif mullein munro mux myme n_b Nahra Nanar nardul Natch natechan natte neena NemesisD netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niklasb niko nikola nilg nilg` niloc132 Nimatek ninegrid ninzine Nisstyre nlogax no-n noam noj Noldorin nonymousa noplamodo normanrichards notdan NougatRillettes nouitfvf Nshag nule numeral nus nwf obcode_ ocharles ofan oitnelis OlegYch opqdonut ormaaj Ornedan ortmage orzo osfameron osnr othiym23 otterdam otters otto_s ousado ozataman ozgura paddymahoney Palmik Pantoufle Paprikachu ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pcl pdxleif_away Peaker peddie peltchu pepijn_away perlite perspectival petanqk petantik petekaz peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous phischu PHO_ pikhq_ piotr_ Plex- plhk pmade pnielsen popz_ pqmodn pr pranavrc predator117 preflex prh prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ q66 quaestor quchen quicksilver quuxman qwandor qwr qz_ r126l raek raichoo raid rainmaker Ralith Raynes Razz rcj_ rckxtra realnot redjohn reiddraper Reite Rembane rexamophone rfw rickeyski-k rio ritek Riussi rmarianski rmunoz rmunroe robbe- robbert` rossabaker rs0 rsampaio rsimoes rul s00pcan S11001001 s_quark SaBer saep Sagi saiam Saizan sajith sambio saurik sawjig sbahra scgilardi schellsan schlicht schlumpi schovi sclv scooty-puff-sr Scott_firebeta scriptor Sculptor seafood SeanTAllen seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill shintah SHODAN shutdown_-h_now si14 silver simon simon___ simpson sipa sirchurchill sjl ski skp skyflash skyflash_ SLi sm smarter snoyberg so Soft sohum solarus solirc Sonder sordina3 SoupEvil spion Spockz sproingie Squid_Tamer srcerer sShintah staafl_123 Starfire statusfailed steez stelleg stepcut stephe- strax_ suiside_ sully sunfun sunnavy supersym supki sw17ch Swizec sysopfb tac tahu takumn tamiko tanakh tanakh_ Taneb Tarential taruti tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tg tgeeky Th0mas thalassarche Tharugrim The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh ThomasLocke_ Thomyho5 thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome threesteps till_t tim1 timemage tippenein tjohnson tkd tlaine tlevine tmiw TML tobiassj1sten tom4939_ tomaw tomboy66 tomejaguar tomh_ tomku tomprince ToRA Tordek trevize_ trh178 tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey tzxn3 u__ u_quark1 ulfdoz Ulrar_ uniquenick User_ UziMonkey__ v__ Valodim Varakh vehk verrens Vertue vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq vramana VZakharov wagle walter Walther warpy___ Watcher7 waterlaz wchun wei2912 weie wereHamster WhereIsMySpoon_ whoops wilfredh_ William_ Will| wjlroe wollw wormphlegm wting wtw wumpus wunki x7 xaimus Xaratas xcombelle xcvii xenoxaos Xenplex xinming_ XMunkki_ xnyhps Xorlev xorox90 xplat xrl__ xrq xymox yam yan_ yano yeltzooo yiannis_1 yriw_ yumike zachk Zariel zebr Zedrikov zeiris_ zenzike_ zhulikas ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-27 18:24:15	--	Channel #haskell: 1028 nicks (1 op, 0 halfops, 0 voices, 1027 normals)
2013-03-27 18:24:15	--	URL for #haskell: http://www.haskell.org/
2013-03-27 18:24:16	--	Mode #haskell [+CLcnpt]
2013-03-27 18:24:16	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-27 18:24:32	<--	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has quit (Ping timeout: 246 seconds)
2013-03-27 18:24:40	mm_freak	linduxed: doesn't look like an imperative algorithm to me…  by "mutating" do you actually mean using destructive update?
2013-03-27 18:24:57	<--	alistairclark (~alisaircl@109.174.158.82) has quit (Remote host closed the connection)
2013-03-27 18:24:59	<--	skyflash (~skyflash@206.172.31.228) has quit (Ping timeout: 245 seconds)
2013-03-27 18:25:32	<--	x7 (~punxter@li266-102.members.linode.com) has quit (Read error: Operation timed out)
2013-03-27 18:25:40	--	pdxleif_away is now known as pdxleif
2013-03-27 18:25:55	-->	Shin-LaC (~LaC@204.174.232.10) has joined #haskell
2013-03-27 18:26:00	-->	imeredith (~ivan@219.199.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-27 18:26:05	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-03-27 18:26:09	Shin-LaC	guys
2013-03-27 18:26:25	Shin-LaC	when I install ghc 7.4.2 (either from binary or from source), some packages are broken
2013-03-27 18:26:26	-->	x7 (~punxter@li266-102.members.linode.com) has joined #haskell
2013-03-27 18:26:29	linduxed	mm_freak: i might be using incorrect terminology, but what i meant was that i take an input matrix, extract the data into a couple of data structures and pass around those structures to the same loop over and over, each time manipulating each of those structures
2013-03-27 18:26:53	linduxed	mm_freak: until the things i pass around fulfill a set of requirements
2013-03-27 18:27:02	mauke	Shin-LaC: do you mean packages coming with ghc?
2013-03-27 18:27:09	Shin-LaC	hxt, network, hxt-unicode, hxt-regex-xmlschema, hxt-charproperties, Cabal
2013-03-27 18:27:11	Shin-LaC	mauke: yes
2013-03-27 18:27:27	mauke	those don't come with ghc
2013-03-27 18:27:34	Shin-LaC	they do now
2013-03-27 18:27:38	mauke	platform?
2013-03-27 18:27:43	Shin-LaC	os x
2013-03-27 18:27:58	mauke	heh. no, I meant "are you installing the Haskell Platform?"
2013-03-27 18:28:05	 *	hackagebot prednote 0.2.0.0 - Build and evaluate trees of predicates  http://hackage.haskell.org/package/prednote-0.2.0.0 (OmariNorman)
2013-03-27 18:28:05	Shin-LaC	no, I'm not
2013-03-27 18:28:16	Shin-LaC	I want to install the haskell platform later
2013-03-27 18:28:16	mauke	then I don't understand
2013-03-27 18:28:21	Shin-LaC	which is why I'm using 7.4.2
2013-03-27 18:28:25	Shin-LaC	7.6.2 doesn't have this problem
2013-03-27 18:28:27	dmwit	dcoutts: pong
2013-03-27 18:28:30	Shin-LaC	but it's not compatible with hp
2013-03-27 18:28:32	mauke	o_O
2013-03-27 18:28:48	armlesshobo	i'd use just haskell-platform
2013-03-27 18:28:59	armlesshobo	that's what i do. it happens to come with ghc for me
2013-03-27 18:29:11	Shin-LaC	but I want to install it in a different location
2013-03-27 18:29:28	Shin-LaC	so I can't just use the HP binary package
2013-03-27 18:29:35	<--	ivan____ (~ivan@18.204.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 276 seconds)
2013-03-27 18:29:45	armlesshobo	Shin-LaC: you just want ghc in a different location?
2013-03-27 18:29:45	mm_freak	linduxed: in haskell to make sure that your program terminates, make make sure that your traversals are total
2013-03-27 18:29:49	merijn	Shin-LaC: Why do you want to install it in a different location, though?
2013-03-27 18:30:03	Shin-LaC	armlesshobo: hp too
2013-03-27 18:30:05	mm_freak	linduxed: the easiest way to do it is to express your traversals in terms of folds
2013-03-27 18:30:13	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-03-27 18:30:23	armlesshobo	why can't you install HP in a different location?
2013-03-27 18:30:23	Shin-LaC	merijn: I'm trying to install it through home-brew, a package manager
2013-03-27 18:30:37	-->	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has joined #haskell
2013-03-27 18:30:37	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-27 18:30:40	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-27 18:30:42	armlesshobo	Shin-LaC: you can download it off of the website
2013-03-27 18:30:44	mm_freak	linduxed: but as you seem to be a beginner, i don't want to bombard you with new terminology…  put in simple terms:  make sure you destruct
2013-03-27 18:30:47	merijn	Shin-LaC: Why?
2013-03-27 18:31:14	Shin-LaC	merijn: because then I can keep track of what I have installed, and uninstall or upgrade it easily
2013-03-27 18:31:24	mm_freak	linduxed: always recurse with structurally smaller arguments (the tail of a list, one branch of a tree, etc.)
2013-03-27 18:31:32	linduxed	mm_freak: honestly, if i don't sort this shit out soon, i'll just post a link to my repo with explanations, because otherwise this will just be useless theorycrafting
2013-03-27 18:31:53	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-03-27 18:32:09	<--	leoncamel (~leoncamel@124.126.218.38) has quit (Ping timeout: 252 seconds)
2013-03-27 18:32:09	merijn	Shin-LaC: The binary install of Haskell Platform on OSX comes with an uninstaller that removes everything and uninstalling stuff installed with cabal is just a matter of nuking ~/.ghc and ~/.cabal
2013-03-27 18:32:26	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-27 18:32:27	mm_freak	linduxed: this is practical…  unfortunately i'm not familiar with the algorithm, so i can only express in words what i mean
2013-03-27 18:32:32	<--	ijp (~user@host86-143-194-152.range86-143.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-03-27 18:32:39	newsham	merijn: unless you install global
2013-03-27 18:32:47	merijn	Installing platform using homebrew and macports is just a painful exercise without much arguments in favour, in my experience
2013-03-27 18:32:55	merijn	newsham: But you shouldn't be doing that anyway...
2013-03-27 18:33:00	linduxed	mm_freak: i'm sure you'll see errors regardless of whether you're familiar with the alg
2013-03-27 18:33:01	newsham	why?
2013-03-27 18:33:05	 *	hackagebot prednote 0.4.0.0 - Build and evaluate trees of predicates  http://hackage.haskell.org/package/prednote-0.4.0.0 (OmariNorman)
2013-03-27 18:33:15	Shin-LaC	oh
2013-03-27 18:33:15	newsham	merijn: i dont want a package existing for every user
2013-03-27 18:33:21	Shin-LaC	apparently the problem was ~/.ghc
2013-03-27 18:33:21	mm_freak	linduxed: <<loop>> means that something is defined by referring to itself in a strict manner:  let x = x in x
2013-03-27 18:33:35	Shin-LaC	after removing it, the error is gone
2013-03-27 18:33:38	-->	xunatai_ (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-27 18:33:39	mm_freak	linduxed: "to see what x is, see x"
2013-03-27 18:33:46	mm_freak	that's <<loop>>
2013-03-27 18:34:01	armlesshobo	mm_freak: what's the issue?
2013-03-27 18:34:12	linduxed	mm_freak: hmm, i'll consider that
2013-03-27 18:34:21	mm_freak	armlesshobo: linduxed gets a <<loop>> and is searching for the bug
2013-03-27 18:34:34	<--	Thomyho5 (~thomyho@mnhm-4d0130c4.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-03-27 18:34:45	mm_freak	armlesshobo: and i'm failing to explain what productive/consuming recursion means =)
2013-03-27 18:35:03	armlesshobo	hmmm
2013-03-27 18:35:21	linduxed	don't worry
2013-03-27 18:35:26	Shin-LaC	merijin: thanks for the hint about nuking ~/.ghc
2013-03-27 18:35:33	Shin-LaC	that was the missing piece
2013-03-27 18:35:36	linduxed	i'm committing some stuff now which finishes most of the alg
2013-03-27 18:35:41	linduxed	still not working
2013-03-27 18:35:49	linduxed	but it will be something i can post a link to
2013-03-27 18:36:00	armlesshobo	linduxed: you're looping because you provide no edge case?
2013-03-27 18:36:12	linduxed	armlesshobo: you'll see in a sec
2013-03-27 18:36:21	Shin-LaC	btw, afaict the haskell-platform binaries still have this issue: http://hackage.haskell.org/trac/ghc/ticket/7040
2013-03-27 18:36:26	dmwit	dcoutts: (okay, disappearing again)
2013-03-27 18:36:38	mm_freak	linduxed: the classic explanation is:  you don't have a base case in some of your tail recursions…  or you have tail recursion where you really don't want it =)
2013-03-27 18:36:54	mm_freak	i've tried to explain this more fundamentally, so that you don't run into this issue again
2013-03-27 18:37:06	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-27 18:37:13	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-27 18:37:16	<--	cognominal (~cognomina@37.161.231.44) has quit (Read error: Connection reset by peer)
2013-03-27 18:37:28	armlesshobo	if you provide a list to a function, then your edge case would be the condition that tells you you're done, which would be []
2013-03-27 18:37:29	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 245 seconds)
2013-03-27 18:37:33	<--	edeast (~chatzilla@38.108.87.20) has quit (Ping timeout: 240 seconds)
2013-03-27 18:37:43	armlesshobo	now, you'd also need to make sure you actually come across this case
2013-03-27 18:37:53	mm_freak	armlesshobo: failing to provide that wouldn't end in a <<loop>>
2013-03-27 18:37:58	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-27 18:38:06	mm_freak	rather something like this:  f (x:xs) = f (x:xs)
2013-03-27 18:38:16	armlesshobo	that would cause to loop
2013-03-27 18:38:19	armlesshobo	<<loop>>
2013-03-27 18:38:22	hpaste	merijn pasted “netwire mainloop compile error” at http://hpaste.org/84720
2013-03-27 18:38:42	merijn	mm_freak: Any clue what I'm screwing up there?
2013-03-27 18:39:04	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-27 18:39:05	Taneb	armlesshobo, I don't think Haskell can detect that
2013-03-27 18:39:42	Taneb	> let f (x : xs) = f (x : xs) in f "hello"
2013-03-27 18:39:46	lambdabot	  mueval-core: Time limit exceeded
2013-03-27 18:40:09	mm_freak	merijn: are you sure that your types are right?  add a type signature for 'loop'
2013-03-27 18:40:15	armlesshobo	Taneb: right, but he's trying to find where his code is causing this loop
2013-03-27 18:40:20	-->	Y_Less (Y_Less@5ac17519.bb.sky.com) has joined #haskell
2013-03-27 18:40:27	<--	threesteps (~ming@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 256 seconds)
2013-03-27 18:40:27	-->	skyflash (~skyflash@206.172.31.228) has joined #haskell
2013-03-27 18:40:30	linduxed	mm_freak: alright, here we go: https://github.com/linduxed/progp-molbio/blob/evoltree/NJ.hs
2013-03-27 18:40:34	mm_freak	Taneb: it detects that, but only when you compile
2013-03-27 18:40:37	armlesshobo	as far as haskell is concerned, this is correct. semantically, though, it's not.
2013-03-27 18:40:39	mm_freak	<<loop>> is a feature of the RTS
2013-03-27 18:40:41	Taneb	I don't think I've ever actually seen <<loop>>
2013-03-27 18:40:48	linduxed	mm_freak: so the issue lies with the function "neighbor"
2013-03-27 18:40:50	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-27 18:41:02	dEPY	Just a dumb question...
2013-03-27 18:41:14	merijn	Adding "loop :: AppWire () () -> Session IO -> IO ()" results in the same error
2013-03-27 18:41:17	linduxed	i should start by saying that "createDMapWithConnectingNode" (while really ugly) works as it should. this i've verified
2013-03-27 18:41:26	-->	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-27 18:41:34	<--	fmapE (~fmapE@2001:18e8:2:10f4:e4f6:3b4:5812:68ec) has quit (Remote host closed the connection)
2013-03-27 18:41:36	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Quit: Lost terminal)
2013-03-27 18:41:42	mm_freak	linduxed: ok, just as a side note, that's definitely pure code =)
2013-03-27 18:41:49	dEPY	Do you guys think that when hiring, someone who knows at least Haskell basics is worth more just for the sake that he was curious enough to learn it?
2013-03-27 18:41:52	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-27 18:42:04	-->	sg (~sg@unaffiliated/sg) has joined #haskell
2013-03-27 18:42:06	mm_freak	dEPY: yes
2013-03-27 18:42:06	linduxed	mm_freak: ok, i would have assumed it was
2013-03-27 18:42:21	merijn	oh, maybe the stepWire case is wrong...
2013-03-27 18:42:57	linduxed	dEPY: well he'll most likely be familiar with the concept of functional programming, along with some other things that enrich you as a developer
2013-03-27 18:43:15	armlesshobo	linduxed: what arguments did you provide "neighbor"
2013-03-27 18:43:19	dEPY	I thought so.
2013-03-27 18:43:37	-->	sonda (~sonda@ppp-30-21.26-151.libero.it) has joined #haskell
2013-03-27 18:43:37	linduxed	armlesshobo: i do :load tests.hs
2013-03-27 18:43:39	linduxed	armlesshobo: then
2013-03-27 18:43:48	linduxed	armlesshobo: neighbor $ makeDistanceMatrix $ convertSeqs shortDNAs
2013-03-27 18:43:54	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Read error: Operation timed out)
2013-03-27 18:44:18	linduxed	armlesshobo: or well... you could substitute "shortDNAs" with set found in the tests.hs file, same exception anyway
2013-03-27 18:44:32	merijn	mm_freak: Right now I'm not even sure which random bits I should fiddle with to get it to work...
2013-03-27 18:44:43	-->	mephx (~mephx@newton.ist.utl.pt) has joined #haskell
2013-03-27 18:45:10	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Remote host closed the connection)
2013-03-27 18:45:19	armlesshobo	linduxed: have you tried stepping through with ghci?
2013-03-27 18:45:25	armlesshobo	well
2013-03-27 18:45:26	armlesshobo	nvm
2013-03-27 18:45:28	linduxed	armlesshobo: nope, don't know how
2013-03-27 18:45:49	linduxed	i have tried adding a lot of trace output on line 64
2013-03-27 18:46:06	linduxed	but all that got me was that i realized that it only does one iteration before failing
2013-03-27 18:46:31	mm_freak	linduxed: at a first glance i don't see any trivial <<loop>>s there…  are you sure your algorithm indeed terminates?
2013-03-27 18:46:39	<--	Sonder (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Quit: Lämnar)
2013-03-27 18:46:53	linduxed	mm_freak: well, just looking at "neighbor"
2013-03-27 18:47:07	linduxed	mm_freak: i know that createDMapWithConnectingNode works
2013-03-27 18:47:20	-->	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has joined #haskell
2013-03-27 18:47:20	mm_freak	linduxed: another way to explain <<loop>>:  the run-time system has found a trivial non-productive infinite recursion
2013-03-27 18:47:21	fryguybob	linduxed: newDMap = ... connectingEdges ; connectingEdges = ... newDMap  Are you sure this terminates?
2013-03-27 18:47:35	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 18:47:36	linduxed	fryguybob: what line?
2013-03-27 18:47:51	fryguybob	69-70
2013-03-27 18:47:55	mm_freak	linduxed: in other words:  it can either busy-loop forever or just tell you that it would busy-loop forever by printing <<loop>> and exiting =)
2013-03-27 18:48:05	 *	hackagebot penny-lib 0.10.0.0 - Extensible double-entry accounting system - library  http://hackage.haskell.org/package/penny-lib-0.10.0.0 (OmariNorman)
2013-03-27 18:48:11	linduxed	fryguybob: hmmm, lemme think
2013-03-27 18:48:15	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-03-27 18:49:10	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-03-27 18:49:11	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-27 18:49:18	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-27 18:49:37	linduxed	fryguybob: hmmm, i know that createDMapWithConnectingNode returns correctly, so the only problem would be if connectingEdges didn't
2013-03-27 18:49:53	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-27 18:50:02	-->	nooodl (~nooodl@91.179.180.252) has joined #haskell
2013-03-27 18:50:25	linduxed	fryguybob: ooooh waaait a minute
2013-03-27 18:50:27	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-27 18:50:32	sg	so i'm having a bit of a struggle with parsec right now
2013-03-27 18:50:33	sg	https://github.com/cbarcenas/MoCap/blob/6b84d5431399afae35792679ef3734bc2ab40f8e/Data/MotionCapture/AMC/SkeletonParser.hs#L66
2013-03-27 18:50:42	-->	augur (~augur@129-2-129-32.wireless.umd.edu) has joined #haskell
2013-03-27 18:50:44	linduxed	fryguybob: that could be it... newDMap referencing itself
2013-03-27 18:50:52	linduxed	fryguybob: lemme read this a couple of time
2013-03-27 18:51:06	sg	is there a way to fix that so that i can have another "unknown" descriptor be ignored by the parser?
2013-03-27 18:51:11	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-03-27 18:51:47	-->	trescenzi (~trescenzi@2620:91:0:163:20f4:8ff5:3c8a:b929) has joined #haskell
2013-03-27 18:52:11	<--	coppro (raedford@taurine.csclub.uwaterloo.ca) has quit (Ping timeout: 260 seconds)
2013-03-27 18:52:29	--	catbee is now known as midfield
2013-03-27 18:52:51	-->	coppro (raedford@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-03-27 18:53:01	linduxed	YES
2013-03-27 18:53:03	linduxed	!
2013-03-27 18:53:05	 *	hackagebot penny-bin 0.10.0.0 - Extensible double-entry accounting system - binary and documentation  http://hackage.haskell.org/package/penny-bin-0.10.0.0 (OmariNorman)
2013-03-27 18:53:08	merijn	mm_freak: ok, I'm giving up for now, I can't figure out why it complains about an escaped type variable
2013-03-27 18:53:11	linduxed	fryguybob: you were exactly right!
2013-03-27 18:53:20	fryguybob	linduxed: Excellent!
2013-03-27 18:53:27	linduxed	i must have missed that while renaming some functions
2013-03-27 18:53:31	companion_cube	sounds like a bounded type variable that would escape
2013-03-27 18:53:51	linduxed	so 69-70 was self-referencing
2013-03-27 18:53:56	armlesshobo	linduxed: noice
2013-03-27 18:54:06	mm_freak	merijn: which Session are you using?  a custom one?
2013-03-27 18:54:11	linduxed	other than that it works just as it should
2013-03-27 18:54:13	merijn	clockSession
2013-03-27 18:54:21	linduxed	the minor errors... always so frustrating
2013-03-27 18:54:23	armlesshobo	btw. to use ghci's tracing, you do :break neighbor, and then call the function like you normally would
2013-03-27 18:54:27	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-27 18:54:27	armlesshobo	linduxed: ^
2013-03-27 18:54:39	merijn	I just have "session <- clockSession; mainLoop chan ui mainWire session" somewhere else in the code
2013-03-27 18:54:40	armlesshobo	linduxed: then do :step to step through each line
2013-03-27 18:54:42	linduxed	armlesshobo: ok
2013-03-27 18:54:53	mm_freak	merijn: GHC version?
2013-03-27 18:54:57	merijn	7.4
2013-03-27 18:54:58	armlesshobo	:h will output more useful info
2013-03-27 18:55:10	<--	ThomasLocke_ (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Read error: Operation timed out)
2013-03-27 18:55:13	merijn	(.1)
2013-03-27 18:55:16	mm_freak	merijn: "session <- clockSession" can't be right
2013-03-27 18:55:23	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 18:55:26	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-27 18:55:55	mm_freak	Session is definitely not a monad
2013-03-27 18:56:37	merijn	mm_freak: clockSession has type "MonadIO m => m (Session m)"
2013-03-27 18:56:38	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 18:56:46	mm_freak	merijn: oh, then your netwire version is outdated =)
2013-03-27 18:56:47	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-27 18:56:49	-->	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 18:56:53	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Ping timeout: 252 seconds)
2013-03-27 18:57:05	mm_freak	clockSession should have type:  (MonadIO m) => Session m
2013-03-27 18:57:58	merijn	bah
2013-03-27 18:58:25	merijn	I have 4.0.0, which version should I be having?
2013-03-27 18:58:31	mm_freak	4.0.7
2013-03-27 18:58:55	elliott	(shouldn't that be 4.1 by the pvp...?)
2013-03-27 18:59:05	mm_freak	yes, it should
2013-03-27 18:59:18	mm_freak	my bad
2013-03-27 18:59:22	-->	LMolr (~LMolr@host63-240-dynamic.2-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-27 18:59:45	<--	trescenzi (~trescenzi@2620:91:0:163:20f4:8ff5:3c8a:b929) has quit (Remote host closed the connection)
2013-03-27 18:59:49	<--	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has quit (Remote host closed the connection)
2013-03-27 19:00:02	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-03-27 19:00:13	--	ejls_ is now known as ejls
2013-03-27 19:00:31	<--	sysopfb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-27 19:00:32	-->	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has joined #haskell
2013-03-27 19:00:42	merijn	Right, seems to compile now
2013-03-27 19:00:51	mm_freak	in fact i wonder…  i thought the first release of netwire 4.0 had the proper clockSession type
2013-03-27 19:01:19	mm_freak	did you install from hackage or from repository?
2013-03-27 19:01:28	merijn	I don't remember
2013-03-27 19:01:49	mm_freak	it's probably a repository install…  IIRC i changed the type of clockSession before release
2013-03-27 19:02:12	-->	singla (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-27 19:02:16	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-27 19:02:31	-->	sysopfb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has joined #haskell
2013-03-27 19:03:02	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-27 19:03:12	<--	simon (simon@relay.pronoia.dk) has left #haskell
2013-03-27 19:03:30	<--	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has quit (Ping timeout: 252 seconds)
2013-03-27 19:03:37	-->	fmapE (~fmapE@2001:18e8:2:10f4:e4f6:3b4:5812:68ec) has joined #haskell
2013-03-27 19:04:24	<--	arenz (arenz@nat/ibm/x-uadueqjvriqgfvkv) has quit (Ping timeout: 264 seconds)
2013-03-27 19:04:31	<--	bos (~bos@173.252.71.129) has quit (Remote host closed the connection)
2013-03-27 19:04:47	<--	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 19:05:26	-->	alkabetz (~bbaren@CONTENTS-VNDER-PRESSVRE.MIT.EDU) has joined #haskell
2013-03-27 19:05:36	<--	sysop_fb (~trep-@108-95-16-149.lightspeed.spfdmo.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-03-27 19:05:45	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-27 19:06:27	<--	sg (~sg@unaffiliated/sg) has quit (Remote host closed the connection)
2013-03-27 19:06:46	linduxed	alright
2013-03-27 19:06:49	linduxed	now then
2013-03-27 19:07:19	<--	inad922 (~inad925@93.93.84.85) has quit (Quit: Leaving)
2013-03-27 19:07:36	linduxed	this is a *broad* question, but i'm kinda worried that i can't clean up linest 91-111 in https://github.com/linduxed/progp-molbio/blob/evoltree/NJ.hs
2013-03-27 19:08:24	linduxed	i might be wrong and everyone actually thinks that is some beautiful code right there, but i doubt it
2013-03-27 19:08:26	-->	[swift] (~mfowler@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-27 19:08:36	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Quit: Leaving)
2013-03-27 19:08:52	linduxed	so i'm just looking for some general pointers, if there's something that can very obviously be improved
2013-03-27 19:09:07	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-27 19:10:03	mm_freak	linduxed: your code is actually fine, except that you are a bit exaggerating with identifier names
2013-03-27 19:10:33	linduxed	mm_freak: i tend to use those to avoid all possible confusion
2013-03-27 19:10:39	linduxed	mm_freak: makes stuff wordy though
2013-03-27 19:10:41	mm_freak	oldX and newX could just as well be x0 and x1 or x' and x
2013-03-27 19:11:13	linduxed	mm_freak: hmm, maybe... i'm worried that will be impenetrable for others
2013-03-27 19:11:30	mm_freak	linduxed: it's a fairly common style in haskell
2013-03-27 19:11:35	linduxed	oh i see
2013-03-27 19:11:54	-->	adzeitor (~adzeitor@31.207.154.200) has joined #haskell
2013-03-27 19:12:08	mm_freak	most use "x" for old and "x'" for new…  i prefer it the other way around, but in any case the apostrophe is usually used either for "versioning" (values) or for strictness (functions)
2013-03-27 19:12:27	linduxed	ok, i'll consider that
2013-03-27 19:12:38	mm_freak	nonstrict foldl, strict foldl', old x', new x
2013-03-27 19:12:44	<--	[swift] (~mfowler@v-1045.fw1.sfo1.mozilla.net) has quit (Client Quit)
2013-03-27 19:12:46	 *	elliott can't see the logic in doing it mm_freak's way at all
2013-03-27 19:12:56	-->	Thomyho5 (~thomyho@mnhm-4d0130c4.pool.mediaWays.net) has joined #haskell
2013-03-27 19:12:57	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-03-27 19:13:00	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-27 19:13:01	linduxed	btw, is 116-118 sensible or is that an ugly way of doing things
2013-03-27 19:13:14	linduxed	it felt kinda hacky, even though it does its job
2013-03-27 19:13:24	mm_freak	elliott: it makes the code more obvious:  f a' b c'
2013-03-27 19:13:34	mm_freak	you know exactly which values will change in a recursive invocation or in the result
2013-03-27 19:13:38	-->	threesteps (~ming@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-27 19:14:01	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-27 19:14:02	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-27 19:14:22	<--	dylukes (~dylukes@dhcp-sl-130-49-21-208.oakland.resnet.pitt.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-27 19:14:31	elliott	why does that matter? "b" probably gets transformed somehow to turn into the result, too
2013-03-27 19:14:33	mm_freak	elliott: it's about the same rationale for using _ to show that you don't use a pattern variable
2013-03-27 19:14:40	elliott	just perhaps not in a way that makes sense to refer to it as the new b
2013-03-27 19:15:29	mm_freak	elliott: it's a preference that arose from experience with netwire where you use recursive invocations with new versions all the time
2013-03-27 19:15:34	mm_freak	it just makes the code much more accessible
2013-03-27 19:15:57	<--	dukedave (~dukedave@wsip-98-174-226-185.ph.ph.cox.net) has quit (Read error: Connection reset by peer)
2013-03-27 19:16:20	-->	croikle (~peterm@134.53.245.65) has joined #haskell
2013-03-27 19:16:52	mm_freak	most people who have worked with the netwire code have agreed that it's a better style…  there is really no rationale of using the opposite style in favor of mine
2013-03-27 19:17:01	mm_freak	s/in favor/instead/
2013-03-27 19:17:03	-->	ijp (~user@host86-143-194-152.range86-143.btcentralplus.com) has joined #haskell
2013-03-27 19:18:06	 *	hackagebot BlogLiterately 0.6.0.1 - A tool for posting Haskelly articles to blogs  http://hackage.haskell.org/package/BlogLiterately-0.6.0.1 (BrentYorgey)
2013-03-27 19:18:22	-->	watermind (~wm@2.80.234.191) has joined #haskell
2013-03-27 19:18:48	 *	elliott thinks that's overstating it a bit
2013-03-27 19:19:52	-->	S1100100` (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-03-27 19:19:54	glguy	For those of us following along at home, the topic is using quote for the new or old version of a variable?
2013-03-27 19:20:05	mm_freak	glguy: yeah
2013-03-27 19:20:07	-->	edeast (~hygspigs@162.106.4.145) has joined #haskell
2013-03-27 19:20:11	glguy	OK, thanks :)
2013-03-27 19:20:38	mm_freak	elliott: i don't think there is a right and wrong here
2013-03-27 19:20:42	<--	elbuck27 (~elbuck27@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-27 19:21:00	mm_freak	elliott: i just figured:  when i reverse the style, i can see immediately which values change in this case
2013-03-27 19:21:06	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-27 19:21:23	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Ping timeout: 245 seconds)
2013-03-27 19:21:24	mm_freak	this is really useful in netwire, and i found it also useful in other cases
2013-03-27 19:21:32	elliott	sure, but I don't see that as valuable... I do see it as valuable to know which values are newer versions of other values from their name, because it lets me trace the dependencies back
2013-03-27 19:21:39	elliott	with yours, "b" could be just b, or new b.
2013-03-27 19:22:13	mm_freak	true…  so it probably depends on the application =)
2013-03-27 19:22:22	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-27 19:22:29	<--	Tharugrim (~Tharugrim@178-190-245-137.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-27 19:22:33	-->	_boegel_ (~boegel@109.130.128.122) has joined #haskell
2013-03-27 19:22:33	glguy	It seems like the main problem is that in the rest of math the "primed" version of a version is the "next" version or the "derived" version, etc
2013-03-27 19:22:40	glguy	so you'd just confuse anyone who didn't read your style guide
2013-03-27 19:23:06	 *	hackagebot VKHS 0.3.2 - Provides access to Vkontakte social network via public API  http://hackage.haskell.org/package/VKHS-0.3.2 (SergeyMironov)
2013-03-27 19:23:10	-->	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has joined #haskell
2013-03-27 19:23:23	elliott	yeah, I was arguing separately from convention
2013-03-27 19:23:27	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-27 19:23:57	mm_freak	glguy: i think the style is easy to follow…  in the worst case you can treat "'" as yet another variable name character
2013-03-27 19:24:03	elliott	in the context of existing mathematical and Haskell use of ' I definitely think this is a bad idea, but I figured the fact that I'm not sure of the advantages even devoid of that was more pertinent :P
2013-03-27 19:24:16	mm_freak	if you can tell x from x' you can follow both styles, no matter which one you're used to
2013-03-27 19:24:56	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 272 seconds)
2013-03-27 19:25:01	-->	joneshf-laptop (~joneshf@mail.concordusapps.com) has joined #haskell
2013-03-27 19:25:21	monochrom	I know of only one bikeshed colouring dispute more trivial than this one.
2013-03-27 19:25:37	-->	system64 (~system64@182.68.68.118) has joined #haskell
2013-03-27 19:25:51	monochrom	"should the hardware clock be UTC or local time?"
2013-03-27 19:25:56	notdan	Is it possible to do semi-automatic testing with 'cabal test' and HUnit?
2013-03-27 19:26:05	glguy	monochrom: Oh, definitely UTC
2013-03-27 19:26:09	glguy	:)
2013-03-27 19:26:28	monochrom	my sister disagrees, based on Windows experience
2013-03-27 19:26:29	aristid	if it's not UTC, the computer is broken
2013-03-27 19:26:30	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-03-27 19:26:36	aristid	clearly
2013-03-27 19:27:12	<--	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has quit (Quit: Leaving)
2013-03-27 19:27:27	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-27 19:27:28	mm_freak	notdan: what's "semi-automatic"?
2013-03-27 19:27:42	notdan	well, automatic
2013-03-27 19:27:43	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 19:27:47	notdan	I just want it to run unit tests
2013-03-27 19:27:48	<--	sambio (~sambio@190.57.227.109) has quit (Ping timeout: 264 seconds)
2013-03-27 19:27:49	mm_freak	notdan: then yes
2013-03-27 19:27:51	notdan	before compilation
2013-03-27 19:27:57	mm_freak	then no
2013-03-27 19:28:03	mm_freak	you compile, then test, then run
2013-03-27 19:28:03	notdan	Hm
2013-03-27 19:28:06	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Ping timeout: 272 seconds)
2013-03-27 19:28:10	notdan	Oh, true, true
2013-03-27 19:28:26	-->	soapiness18 (~soapiness@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 19:28:29	monochrom	to be fair, there is a visible difference only when you have to change into and out of daylight saving time annually. otherwise, you can abstract away the hardware clock
2013-03-27 19:28:32	mm_freak	notdan: look into the 'lens' library for how to do it
2013-03-27 19:28:35	notdan	OK, I was just having troubles finding the docs, because I've found on stackoverlow the information that it's currently not possible to do that
2013-03-27 19:28:38	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-27 19:28:40	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-27 19:28:41	notdan	mm_freak: sounds legit
2013-03-27 19:29:13	monochrom	so, the manifested bikeshed colouring dispute is: should the OS change the hardware clock for daylight saving time or not
2013-03-27 19:29:33	armlesshobo	monochrom: yes
2013-03-27 19:29:33	--	pdxleif is now known as pdxleif_away
2013-03-27 19:29:34	armlesshobo	:)
2013-03-27 19:29:35	armlesshobo	done
2013-03-27 19:29:37	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-27 19:29:43	armlesshobo	next issue?
2013-03-27 19:30:00	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-03-27 19:30:08	monochrom	there is no next issue
2013-03-27 19:30:13	<--	edeast (~hygspigs@162.106.4.145) has quit (Ping timeout: 240 seconds)
2013-03-27 19:30:17	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-03-27 19:30:26	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-27 19:30:57	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-03-27 19:32:30	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-27 19:33:08	--	S1100100` is now known as S11001001
2013-03-27 19:33:10	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-03-27 19:33:10	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-27 19:33:25	<--	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has left #haskell
2013-03-27 19:33:30	elliott	monochrom: I like the idea of it changing for DST but also being UTC
2013-03-27 19:34:46	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-27 19:35:12	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-03-27 19:35:37	<--	soapiness18 (~soapiness@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Quit: soapiness18)
2013-03-27 19:35:45	-->	ixmatus (~ixmatus@65-36-73-102.dyn.grandenetworks.net) has joined #haskell
2013-03-27 19:36:14	--	sellout- is now known as sellout
2013-03-27 19:36:20	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-27 19:36:27	-->	greymalkin (~greymalki@foo.foosoft.us) has joined #haskell
2013-03-27 19:36:38	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 19:36:59	-->	Taneb (~nathan@host-92-30-195-9.as13285.net) has joined #haskell
2013-03-27 19:37:10	greymalkin	Why does this work: shuffleList x y = map snd $ sortBy (comparing fst) $ zip x y
2013-03-27 19:37:20	-->	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-27 19:37:27	greymalkin	But this doesn't: shuffleList = map snd . sortBy (comparing fst) . zip
2013-03-27 19:37:39	-->	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has joined #haskell
2013-03-27 19:37:39	-->	dnolen_ (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-27 19:38:02	elliott	greymalkin: because that's shuffleList x = map snd (sortBy (comparing fst) (zip x))
2013-03-27 19:38:05	byorgey	greymalkin: because (.) is only for composing two one-argument functions
2013-03-27 19:38:05	--	kennyp_ is now known as kennyp
2013-03-27 19:38:07	monochrom	and this probably does: shuffleList x = map snd . sortBy (comparing fst) . zip x
2013-03-27 19:38:13	elliott	shuffleList x = map snd . sortBy (comparing fst) . zip x will work
2013-03-27 19:38:15	byorgey	greymalkin: it can't compose a two-argument function with a one-argument function
2013-03-27 19:38:50	elliott	greymalkin: basically, (f . g) x = f (g x), always; there's no magic :)
2013-03-27 19:39:13	<--	agr (bae74f6a@gateway/web/freenode/ip.186.231.79.106) has quit (Ping timeout: 245 seconds)
2013-03-27 19:39:13	<--	scooty-puff-sr (417c8c08@gateway/web/freenode/ip.65.124.140.8) has quit (Ping timeout: 245 seconds)
2013-03-27 19:39:24	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 19:39:26	greymalkin	Gotcha
2013-03-27 19:39:32	-->	osa1 (~omer@176.237.140.0) has joined #haskell
2013-03-27 19:39:38	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-27 19:39:55	dario	@src (.)
2013-03-27 19:39:55	lambdabot	(f . g) x = f (g x)
2013-03-27 19:39:55	lambdabot	NB: In lambdabot,  (.) = fmap
2013-03-27 19:40:41	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 19:40:53	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-27 19:41:07	<--	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-27 19:41:07	croikle	greymalkin: you could replace the last (.) with (.:), where (a .: b) x y = a (b x y)
2013-03-27 19:41:39	<--	heruur (~tvh@2a00:12d0:a100:9501:2565:d753:11a0:dabd) has quit (Quit: Leaving.)
2013-03-27 19:41:48	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-27 19:41:54	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-03-27 19:42:23	<--	Esa|iPhone6 (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2013-03-27 19:42:44	-->	drofland44 (~drofland4@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 19:43:13	<--	pqmodn (~pqmodn@okcomputer.xen.prgmr.com) has quit (Changing host)
2013-03-27 19:43:13	-->	pqmodn (~pqmodn@unaffiliated/pqmodn) has joined #haskell
2013-03-27 19:43:38	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Ping timeout: 246 seconds)
2013-03-27 19:43:42	<--	scriptor (~Scriptor@ext.corp.bitshelter.com) has left #haskell
2013-03-27 19:44:24	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-27 19:44:26	plhk	any ideas about what's going on here? http://hpaste.org/84722 (template haskell)
2013-03-27 19:44:44	-->	nuthog (4b329d8a@gateway/web/freenode/ip.75.50.157.138) has joined #haskell
2013-03-27 19:46:10	-->	knightshade (~knightsha@p548CF12B.dip.t-dialin.net) has joined #haskell
2013-03-27 19:46:27	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-27 19:46:44	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 19:47:06	notdan	I fogrot: is it advisable to update cabal-install package?
2013-03-27 19:47:29	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-27 19:47:39	-->	sepp2k (~sexy@g224101148.adsl.alicedsl.de) has joined #haskell
2013-03-27 19:47:42	danharaj	@pl (\(_,x) _ -> x == 1)
2013-03-27 19:47:42	lambdabot	const . (1 ==) . snd
2013-03-27 19:47:53	<--	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has quit (Quit: anRch)
2013-03-27 19:48:01	monochrom	I say no, but people say yes
2013-03-27 19:48:37	Taneb	It's an issue of "why should you need to", I believe
2013-03-27 19:48:55	<--	jdnavarro (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has quit (Remote host closed the connection)
2013-03-27 19:49:10	-->	akurei (~akurei@lak-175-130.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-27 19:49:19	monochrom	but I can agree to this method: inside a sandbox install the new cabal-install, copy out the exe, throw away the sandbox
2013-03-27 19:49:22	<--	tac_ (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has left #haskell
2013-03-27 19:49:28	aCube	@hoogle  (a -> b -> b) -> [a] -> [b] -> [(a,b)]
2013-03-27 19:49:28	lambdabot	Data.Generics.Twins gmapAccumQr :: Data d => (r' -> r -> r) -> r -> (forall e. Data e => a -> e -> (a, r')) -> a -> d -> (a, r)
2013-03-27 19:49:28	lambdabot	Data.Generics.Twins gmapAccumQl :: Data d => (r -> r' -> r) -> r -> (forall e. Data e => a -> e -> (a, r')) -> a -> d -> (a, r)
2013-03-27 19:49:47	monochrom	this is to avoid getting two version of the Cabal lib
2013-03-27 19:49:55	monochrom	s/version/versions/
2013-03-27 19:50:08	<--	threesteps (~ming@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-03-27 19:50:59	<--	drofland44 (~drofland4@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-03-27 19:51:26	aCube	:t \f a b -> zip a . zipWith f a b
2013-03-27 19:51:28	lambdabot	    Couldn't match expected type `a0 -> [b0]' with actual type `[c0]'
2013-03-27 19:51:28	lambdabot	    In the return type of a call of `zipWith'
2013-03-27 19:51:28	lambdabot	    Probable cause: `zipWith' is applied to too many arguments
2013-03-27 19:51:47	aCube	:t \f a b -> zip a $ zipWith f a b
2013-03-27 19:51:48	lambdabot	(a -> b1 -> b) -> [a] -> [b1] -> [(a, b)]
2013-03-27 19:51:59	croikle	how about zipWith (const &&& f)
2013-03-27 19:52:14	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 19:52:16	aCube	:t \f a b -> zipWith (id &&& f) a b
2013-03-27 19:52:17	lambdabot	    Couldn't match expected type `b0 -> c0'
2013-03-27 19:52:18	lambdabot	                with actual type `(c1, c'0)'
2013-03-27 19:52:18	lambdabot	    Expected type: a0 -> b0 -> c0
2013-03-27 19:52:24	aCube	:t \f a b -> zipWith (const &&& f) a b
2013-03-27 19:52:25	lambdabot	    Couldn't match expected type `b0 -> c0'
2013-03-27 19:52:26	lambdabot	                with actual type `(c1, c'0)'
2013-03-27 19:52:26	lambdabot	    Expected type: a0 -> b0 -> c0
2013-03-27 19:52:33	<--	tjohnson (~tjohnson@68.65.169.216) has quit (Ping timeout: 240 seconds)
2013-03-27 19:52:54	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 245 seconds)
2013-03-27 19:53:17	croikle	ehh, multiple arguments make trouble in the &&& I guess
2013-03-27 19:53:39	monochrom	"const &&& f" looks wrong. "const () &&& f" looks better
2013-03-27 19:53:56	aCube	:t \f a b -> zipWith (const () &&& f) a b
2013-03-27 19:53:57	lambdabot	    Couldn't match expected type `b0 -> c0'
2013-03-27 19:53:57	lambdabot	                with actual type `(c1, c'0)'
2013-03-27 19:53:57	lambdabot	    Expected type: a0 -> b0 -> c0
2013-03-27 19:54:16	edwardk	:t const () &&& ?f
2013-03-27 19:54:17	lambdabot	(?f::b -> c') => b -> ((), c')
2013-03-27 19:54:23	<--	osa1 (~omer@176.237.140.0) has quit (Quit: Konversation terminated!)
2013-03-27 19:54:30	edwardk	:t (() <$) . ?f
2013-03-27 19:54:31	lambdabot	(?f::a -> f b, Functor f) => a -> f ()
2013-03-27 19:54:56	edwardk	:t fmap ((,)()) . ?f
2013-03-27 19:54:57	aCube	:t \f a b -> zipWith (curry $ uncurry const &&& uncurry f) a b
2013-03-27 19:54:57	lambdabot	(?f::a -> f a1, Functor f) => a -> f ((), a1)
2013-03-27 19:54:58	lambdabot	(a -> b -> c') -> [a] -> [b] -> [(a, c')]
2013-03-27 19:55:18	edwardk	:t (,)() . ?f
2013-03-27 19:55:19	lambdabot	(?f::a -> b) => a -> ((), b)
2013-03-27 19:55:24	edwardk	derp
2013-03-27 19:55:42	 *	edwardk looks up to find the original problem/question
2013-03-27 19:55:54	aCube	edwark: shortcut for \f a b -> zip a $ zipWith f a b
2013-03-27 19:56:17	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Quit: Leaving)
2013-03-27 19:56:21	notdan	Warning: nctlmc.cabal: Ignoring unknown section type: test-suit
2013-03-27 19:56:21	edwardk	:t zipwith (id &&& f) a b
2013-03-27 19:56:23	lambdabot	    Not in scope: `zipwith'
2013-03-27 19:56:23	lambdabot	    Perhaps you meant one of these:
2013-03-27 19:56:23	lambdabot	      `zipWith' (imported from Data.List),
2013-03-27 19:56:24	notdan	Ok well
2013-03-27 19:56:26	edwardk	:t zipwith (id &&& ?f) ?a ?b
2013-03-27 19:56:27	notdan	this is unfortunate
2013-03-27 19:56:27	lambdabot	    Not in scope: `zipwith'
2013-03-27 19:56:27	lambdabot	    Perhaps you meant one of these:
2013-03-27 19:56:27	lambdabot	      `zipWith' (imported from Data.List),
2013-03-27 19:56:31	edwardk	:t zipWith (id &&& ?f) ?a ?b
2013-03-27 19:56:32	lambdabot	    Couldn't match expected type `b0 -> c0'
2013-03-27 19:56:32	lambdabot	                with actual type `(c1, c'0)'
2013-03-27 19:56:32	lambdabot	    Expected type: a0 -> b0 -> c0
2013-03-27 19:56:55	<--	HugoDaniel (~hugo@elab.fcsh.unl.pt) has quit (Quit: BUY BUY)
2013-03-27 19:57:27	monochrom	zipWith (\x y -> (x, f x y)) a b
2013-03-27 19:57:39	edwardk	@pl \a b -> (a, f a b)
2013-03-27 19:57:39	lambdabot	liftM2 (.) (,) f
2013-03-27 19:57:54	-->	ryjm (~jake@cpe-69-200-242-47.nyc.res.rr.com) has joined #haskell
2013-03-27 19:57:55	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-27 19:58:01	aCube	Maybe it is a function that is already defined somewhere?
2013-03-27 19:58:06	edwardk	:t zipWith . liftM2 (.) (,)
2013-03-27 19:58:07	lambdabot	(a -> b -> b1) -> [a] -> [b] -> [(a, b1)]
2013-03-27 19:58:10	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-27 19:58:47	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 19:58:57	<--	augur (~augur@129-2-129-32.wireless.umd.edu) has quit (Remote host closed the connection)
2013-03-27 19:59:22	-->	silasm (~silas@c-24-4-34-172.hsd1.ca.comcast.net) has joined #haskell
2013-03-27 19:59:54	sproingie	Functor, Monad, Applicative ... any other classes that you'd say are "must-know"?
2013-03-27 20:00:04	byorgey	Monoid
2013-03-27 20:00:07	aCube	Traversable
2013-03-27 20:00:09	aCube	Foldable
2013-03-27 20:00:09	-->	trescenzi (~trescenzi@2620:91:0:163:d85e:3153:1af8:b6e1) has joined #haskell
2013-03-27 20:00:18	sproingie	oh yah forgot Monoid
2013-03-27 20:00:22	<--	apfel (~apfel@p5499BACB.dip.t-dialin.net) has quit (Ping timeout: 257 seconds)
2013-03-27 20:00:23	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-03-27 20:00:26	 *	sproingie adds Traversable and Foldable to his list
2013-03-27 20:00:51	danharaj	you don't need to know traversable and foldable anymore all you need to know is the entire lens package ;0
2013-03-27 20:00:58	aCube	:D
2013-03-27 20:00:59	-->	augur (~augur@129-2-129-32.wireless.umd.edu) has joined #haskell
2013-03-27 20:01:03	 *	sproingie cringes
2013-03-27 20:01:13	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-27 20:01:27	donri	@where typeclassopedia -- sproingie
2013-03-27 20:01:27	lambdabot	http://www.haskell.org/haskellwiki/Typeclassopedia
2013-03-27 20:01:30	aCube	It seems to me that nearly the entire lens package is build up on profunctors
2013-03-27 20:01:45	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-27 20:01:57	donri	aCube: just prisms and isos no?
2013-03-27 20:02:09	danharaj	indexed stuff uses a variation of profunctors
2013-03-27 20:02:19	danharaj	"Conjoined"
2013-03-27 20:02:21	donri	aha
2013-03-27 20:02:40	-->	fgomez (~Fernando@142.244.216.78) has joined #haskell
2013-03-27 20:02:58	<--	dnolen_ (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-27 20:03:18	danharaj	I actually much like the new machinery compared to the initial indexed stuff despite the types being a bit imperspicuous.
2013-03-27 20:03:19	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-03-27 20:03:22	-->	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has joined #haskell
2013-03-27 20:03:46	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-03-27 20:03:52	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-27 20:04:05	<--	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-27 20:04:34	byorgey	imperspicuous is a good word for it.
2013-03-27 20:04:43	<--	trescenzi (~trescenzi@2620:91:0:163:d85e:3153:1af8:b6e1) has quit (Ping timeout: 258 seconds)
2013-03-27 20:04:48	byorgey	it is self-referential.
2013-03-27 20:04:49	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-27 20:05:07	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-27 20:05:17	danharaj	byorgey: I learned it from oleg :D
2013-03-27 20:05:26	edwardk	Heh
2013-03-27 20:05:30	<--	ericmj (ericmj@h245n6-g-ml-a11.ias.bredband.telia.com) has quit (Ping timeout: 264 seconds)
2013-03-27 20:06:07	edwardk	Next we need to work on making sure there are fewer impertransible data structures.
2013-03-27 20:06:44	-->	madjestic (~madjestic@178.226.120.235) has joined #haskell
2013-03-27 20:06:49	danharaj	edwardk: I am perturbed that impertransible is a word.
2013-03-27 20:07:04	edwardk	=)
2013-03-27 20:07:04	-->	rofer (~rofer@rofer.me) has joined #haskell
2013-03-27 20:07:19	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-27 20:07:26	edwardk	I find myself imperturbed
2013-03-27 20:07:41	-->	pierian62 (~Pierian62@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-27 20:08:22	-->	threesteps (~ming@p5B04BF42.dip.t-dialin.net) has joined #haskell
2013-03-27 20:08:36	danharaj	edwardk: I am working on translating Martin Erwig's fgl library into lens language. Are you familiar with it?
2013-03-27 20:09:16	rofer	Is it normal to need to do 'cabal update', 'cabal install cabal-install' several times before getting to the most recent version?
2013-03-27 20:09:16	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Ping timeout: 272 seconds)
2013-03-27 20:09:39	croikle	the new one may be later in your path
2013-03-27 20:09:43	croikle	try which -a cabal
2013-03-27 20:09:57	<--	piotr_ (~quassel@e178075099.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-03-27 20:10:15	-->	trescenzi (~trescenzi@2620:91:0:163:e4af:7492:b7f8:60e6) has joined #haskell
2013-03-27 20:10:27	edwardk	I'm familiar with fgl.
2013-03-27 20:10:34	edwardk	I'm not a particular fan of the API
2013-03-27 20:10:46	rofer	croikle: Ah, I have a /usr/bin/cabal and a /bin/cabal
2013-03-27 20:10:51	edwardk	i find that it is impossible to make efficient
2013-03-27 20:11:22	danharaj	edwardk: Oh. That is important to me. I haven't been able to find any material on Haskell graph datastructures except fgl.
2013-03-27 20:11:28	danharaj	(and cutesy stuff like tying the knot)
2013-03-27 20:11:35	<--	Philonous (~Philonous@dslb-178-000-130-110.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-27 20:12:03	edwardk	danharaj: i spent some time on it a couple of years ago (and iirc annoyed ivanm by taking the package name 'graphs')
2013-03-27 20:12:07	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-27 20:12:36	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Ping timeout: 240 seconds)
2013-03-27 20:12:45	-->	apfel (~apfel@p5499BACB.dip.t-dialin.net) has joined #haskell
2013-03-27 20:12:54	edwardk	but in particular it is quite important to be able to separate the shape of the graph from the data that is associated with the nodes and edges of the graph otherwise you spend all your time manipulating and garbage collecting the same boring graph meta-data about what is connected to what
2013-03-27 20:12:55	danharaj	edwardk: About to go check it out. My idea with fgl was that graphs ought to have an At instance for fgl's Contexts, and decomposing a graph should be something like a Zipper.
2013-03-27 20:13:17	edwardk	the problem with fgl's contexts from a lens perspective is you really can't comply with the lens laws
2013-03-27 20:13:26	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Remote host closed the connection)
2013-03-27 20:13:28	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-27 20:13:29	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-27 20:13:29	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-27 20:13:35	edwardk	so everything you write will be an 'almost lens' or 'almost traversal'
2013-03-27 20:13:50	danharaj	edwardk: hm? Which law is broken?
2013-03-27 20:14:00	edwardk	you might be able to get by with traversals that carry around the indices of what the end points are of the edge for instance as an index
2013-03-27 20:14:18	danharaj	oh I see "Get back what you put in" is broken.
2013-03-27 20:14:20	edwardk	depends on if you forbid multi-edges etc
2013-03-27 20:14:24	danharaj	wait no.
2013-03-27 20:14:33	 *	sproingie ponders an Almost monad
2013-03-27 20:14:41	<--	trescenzi (~trescenzi@2620:91:0:163:e4af:7492:b7f8:60e6) has quit (Ping timeout: 258 seconds)
2013-03-27 20:14:52	sproingie	let threeish = mostly 3 :: Almost Int
2013-03-27 20:15:03	edwardk	sproingie: http://rebase.org/analytics/Data-Analytics-Approximate-Mass.html
2013-03-27 20:15:09	rofer	Heh, looks like I have two cabal's in my path, but the one I want isn't in my path
2013-03-27 20:15:42	<--	trevize_ (~trevize@cpc7-stav17-2-0-cust228.17-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-03-27 20:15:51	sproingie	huh neat.  i could see using that for fuzzy logic
2013-03-27 20:16:38	danharaj	edwardk: It seems to me that multiedge directed graphs satisfy the lens laws for contexts, at least.
2013-03-27 20:16:41	edwardk	sproingie: i use it in the api for things like http://rebase.org/analytics/Data-Analytics-Approximate-HyperLogLog.html to give back approximate answers
2013-03-27 20:17:08	edwardk	danharaj: if you are willing to allow multiedges, etc. you can get pretty far
2013-03-27 20:17:33	edwardk	but then you still run into the problem that the representation of all of those graphs is terrible for GC purposes
2013-03-27 20:17:35	danharaj	edwardk: I suppose you also need to allow 'dangling edges'
2013-03-27 20:17:50	sproingie	edwardk: that looks like some neat stuff
2013-03-27 20:18:11	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-27 20:18:20	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-03-27 20:18:30	Aune	Hi, I'm building a small space strategy game. It is meant to be at many scales: Star Cluster -> Solar System -> Planetary System -> Planets and moons. I dont know how to properly represent a players units. Any pointers would be greatly appreciated: http://hpaste.org/84723
2013-03-27 20:19:01	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-27 20:19:11	<--	shepheb (oda@taurine.csclub.uwaterloo.ca) has quit (Disconnected by services)
2013-03-27 20:19:53	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-03-27 20:19:57	-->	shepheb (~bsshephe@bas1-jockvale05-3096536643.dsl.bell.ca) has joined #haskell
2013-03-27 20:20:39	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-27 20:20:43	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-03-27 20:21:10	<--	Shin-LaC (~LaC@204.174.232.10) has quit (Quit: Computer has gone to sleep.)
2013-03-27 20:21:17	-->	tntc (~tntc@c-98-217-26-29.hsd1.ct.comcast.net) has joined #haskell
2013-03-27 20:22:30	danharaj	Aune: that is a difficult question to answer.
2013-03-27 20:23:54	notdan	Is it possible to create a .cabal package with a library and an executable, such that the executable depends on the library?
2013-03-27 20:24:26	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-27 20:24:34	byorgey	notdan: yes
2013-03-27 20:24:35	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 246 seconds)
2013-03-27 20:24:38	sproingie	i would think the dependency is somewhat automatic, since they're built together
2013-03-27 20:24:43	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 20:24:47	byorgey	it is not automatic.
2013-03-27 20:24:53	Aune	danharaj, Yeah. Is it to open ended or is there more that makes it hard to answer. What context could I produce to make it easier to answer?
2013-03-27 20:24:56	<--	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-03-27 20:24:59	byorgey	but you just have to list the library in the build-depends for the executable.
2013-03-27 20:25:04	-->	kk` (~kk@unaffiliated/kk/x-5380134) has joined #haskell
2013-03-27 20:25:12	-->	LAMMJohn1on (~ja@user-5af434fc.broadband.tesco.net) has joined #haskell
2013-03-27 20:25:24	danharaj	Aune: It would possibly be a good idea to make it a stackoverflow question to give would-be answerers time to give a nice comprehensive answer.
2013-03-27 20:25:47	danharaj	I am not sure if stackoverflow allows such questions. They seem to be a little capricious about what is an appropriate question.
2013-03-27 20:25:58	-->	Rants (~quassel@204.132.65.177) has joined #haskell
2013-03-27 20:26:06	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-03-27 20:26:22	notdan	byorgey: I tried that and I have a strange error message when I try to build it: cabal: can't find source for NPNTool/PetriNet in ., dist/build/autogen
2013-03-27 20:26:22	sproingie	you might want to add to the question something more specific than "what's the best way", like whatever specific problem you're having with approach X or Y or what's blocking you &c
2013-03-27 20:26:40	-->	chatsiri_ (~chatsiri_@171.7.150.203) has joined #haskell
2013-03-27 20:26:42	<--	Palmik (~palmik@man-208-121.pks.muni.cz) has quit (Quit: Lost terminal)
2013-03-27 20:26:43	byorgey	notdan: what version of cabal do you have?
2013-03-27 20:26:45	dEPY	What are  .hi  files?
2013-03-27 20:26:45	sproingie	basically, SO gets really persnickety about open-ended questions
2013-03-27 20:26:51	notdan	byorgey: 0.14
2013-03-27 20:27:06	byorgey	notdan: hmm, strange, I don't know
2013-03-27 20:27:12	Aune	I have noticed that.
2013-03-27 20:27:38	edwardk	@tell cale could we harass you to update lens on lambdabot?
2013-03-27 20:27:38	lambdabot	Consider it noted.
2013-03-27 20:27:48	notdan	byorgey: would you might taking a glance at my .cabal file? maybe I made some really stupid error somewhere there
2013-03-27 20:27:52	byorgey	dEPY: they specify the interface exported by a given module
2013-03-27 20:27:56	byorgey	notdan: sure
2013-03-27 20:28:05	edwardk	notdan: yes you need to list the library in the executable dependencies
2013-03-27 20:28:07	<--	LAMMJohnson (~ja@user-5af43731.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-03-27 20:28:29	notdan	http://paste.lisp.org/display/136363
2013-03-27 20:28:50	edwardk	notdan: https://github.com/ekmett/ersatz/blob/master/ersatz.cabal builds two executables that use the library as part of the build process
2013-03-27 20:29:17	-->	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has joined #haskell
2013-03-27 20:29:25	danharaj	edwardk: by the way, I recently watched your NY lens talk and I am disappointed that I didn't get to see it live. Mostly due to ignorance of its occurrence within my vicinity.
2013-03-27 20:29:45	edwardk	danharaj: clearly you just need to come up to boston haskell and hang out some time ;)
2013-03-27 20:30:03	-->	trescenzi (~trescenzi@148.100.72.126) has joined #haskell
2013-03-27 20:30:42	danharaj	edwardk: Watch out, it could happen and then you'll be stuck with me asking stupid questions *in real life* :P
2013-03-27 20:31:01	byorgey	notdan: do you get that error when it's building the library, or the executable?
2013-03-27 20:31:12	dEPY	byorgey: something like .h files from c++ ?
2013-03-27 20:31:31	<--	croikle (~peterm@134.53.245.65) has quit (Quit: croikle)
2013-03-27 20:31:35	-->	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has joined #haskell
2013-03-27 20:31:38	notdan	byorgey: looks like the executable
2013-03-27 20:31:45	byorgey	dEPY: yes, sort of, but automatically generated, and intended for consumption by other programs and not humans
2013-03-27 20:32:04	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 272 seconds)
2013-03-27 20:32:13	dEPY	byorgey: oh, what can other programs do with it?
2013-03-27 20:32:19	notdan	byorgey: but how can I check to know for sure?
2013-03-27 20:32:28	byorgey	dEPY: well, maybe I shouldn't have said 'other'
2013-03-27 20:32:42	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-27 20:33:10	dEPY	byorgey: :)  so, ghc uses them basically not "other" programs?
2013-03-27 20:33:12	byorgey	dEPY: GHC itself uses the .hi files when deciding what to recompile, calling the linker, etc.
2013-03-27 20:33:22	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-03-27 20:33:25	dEPY	byorgey: I see. Thanks. :)
2013-03-27 20:33:27	notdan	byorgey: no, sorry, the problem is with the library
2013-03-27 20:33:30	byorgey	perhaps there are other programs that use them too, I am not sure.
2013-03-27 20:33:46	<--	techlife (techlife@218.59.113.120) has quit (Ping timeout: 245 seconds)
2013-03-27 20:34:09	byorgey	notdan: ah, then perhaps you need to add  an  hs-source-dirs:  field for the library?  where is NPNTool/PetriNet.hs located?
2013-03-27 20:34:31	-->	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-27 20:34:31	-->	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-27 20:34:40	<--	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Read error: Connection reset by peer)
2013-03-27 20:35:02	Aune	danharaj, sproingie Im writing it up on http://codereview.stackexchange.com/   they seem more appropriate for open ended questions.
2013-03-27 20:35:06	notdan	god, I am so stupid
2013-03-27 20:35:07	notdan	thanks byorgey
2013-03-27 20:35:09	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:35:10	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:35:11	notdan	it works now
2013-03-27 20:35:18	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-27 20:35:24	byorgey	hehe, glad I could help =)
2013-03-27 20:35:45	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:35:46	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:35:49	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 245 seconds)
2013-03-27 20:35:51	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-27 20:36:05	-->	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has joined #haskell
2013-03-27 20:36:19	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:36:20	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:36:54	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:36:55	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:37:16	-->	Shin-LaC (~LaC@204.174.232.10) has joined #haskell
2013-03-27 20:37:26	<--	wollw (~wollw@unaffiliated/wollw) has quit (Ping timeout: 256 seconds)
2013-03-27 20:37:29	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:37:29	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:38:02	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:38:03	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:38:05	<--	madjestic (~madjestic@178.226.120.235) has quit (Ping timeout: 252 seconds)
2013-03-27 20:38:08	<--	end3rW (~end3rW@lak-67-150.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-27 20:38:13	-->	morolin (~morolin@cantor.csl.cornell.edu) has joined #haskell
2013-03-27 20:38:26	<--	watermind (~wm@2.80.234.191) has quit (Quit: Konversation terminated!)
2013-03-27 20:38:39	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:38:40	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:39:04	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-03-27 20:39:15	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:39:15	<--	techlife (~jimmy@218.59.113.120) has quit (Max SendQ exceeded)
2013-03-27 20:40:09	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-27 20:40:13	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-27 20:41:15	notdan	Uh oh, now I have some really scary linking errors: http://paste.lisp.org/+2X7V/1
2013-03-27 20:41:19	<--	fxr (~user@176.42.255.221) has quit (Ping timeout: 264 seconds)
2013-03-27 20:41:23	-->	duosrx (~duosrx@2a01:e35:8b02:46d0:bc83:6be8:4cc9:ff55) has joined #haskell
2013-03-27 20:42:42	-->	Ralith (~ralith@d142-058-095-010.wireless.sfu.ca) has joined #haskell
2013-03-27 20:42:45	notdan	aaand that's because I am stupid
2013-03-27 20:43:04	notdan	and haven't included NodeMap in other-modules
2013-03-27 20:43:28	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Quit: Leaving)
2013-03-27 20:44:25	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-03-27 20:44:36	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-27 20:44:53	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Ping timeout: 246 seconds)
2013-03-27 20:45:40	<--	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has left #haskell
2013-03-27 20:45:43	<--	duosrx (~duosrx@2a01:e35:8b02:46d0:bc83:6be8:4cc9:ff55) has quit (Ping timeout: 258 seconds)
2013-03-27 20:47:29	-->	fizruk (59f9a510@gateway/web/freenode/ip.89.249.165.16) has joined #haskell
2013-03-27 20:48:14	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-27 20:48:30	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-27 20:48:30	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-27 20:48:30	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-27 20:49:04	--	armlesshobo is now known as `-_-a
2013-03-27 20:49:22	fizruk	hey, guys! why does ghci act so different than runghc?
2013-03-27 20:50:19	`-_-a	one's a REPL the other isn't? that's my guess
2013-03-27 20:50:26	-->	zakora_ (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-27 20:50:39	<--	zakora_ (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Client Quit)
2013-03-27 20:50:57	quchen	fizruk: GHCi is an interactive Haskell session, runghc compiles and immediately runs your program.
2013-03-27 20:51:02	fizruk	sorry, I didn't finished the message
2013-03-27 20:51:08	fizruk	here's sample code http://pastebin.com/YSe5YFPU
2013-03-27 20:51:12	<--	mpu (~qcar@phd4.cs.yale.edu) has left #haskell
2013-03-27 20:51:14	mauke	The paste YSe5YFPU has been copied to http://hpaste.org/84727
2013-03-27 20:51:38	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Quit: Leaving)
2013-03-27 20:51:46	fizruk	when I run it with runghc, I get an error (and it's understandable)
2013-03-27 20:52:08	quchen	The code looks right to me.
2013-03-27 20:52:36	fizruk	when I remove «main» function, load module into ghci, and enter «show $ One 1» I get just "1"
2013-03-27 20:53:03	-->	pikhq (~pikhq@71-219-223-77.clsp.qwest.net) has joined #haskell
2013-03-27 20:53:09	<--	pikhq_ (~pikhq@75-163-185-14.clsp.qwest.net) has quit (Ping timeout: 248 seconds)
2013-03-27 20:53:10	`-_-a	export main?
2013-03-27 20:53:39	quchen	Main is automatically exported unless otherwise stated
2013-03-27 20:53:53	quchen	(i.e. there's another module declaration)
2013-03-27 20:53:53	-->	rzr_ (~rzr@94.72.142.9) has joined #haskell
2013-03-27 20:54:08	`-_-a	quchen: i could've sworn that some earlier versions of ghc required you to export it
2013-03-27 20:54:14	fizruk	that's not the problem
2013-03-27 20:54:24	dEPY	hm... is   withFile .... -> do ...... a monad stuff? (I'm not that far in a book, just wondering.) :)
2013-03-27 20:54:36	<--	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has quit (Ping timeout: 240 seconds)
2013-03-27 20:54:37	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-27 20:54:39	quchen	The problem seems to be that it can't infer the type of "One 1", which is "My Int ?"
2013-03-27 20:54:49	quchen	It doesn't know the ?, so it cannot pick the right show instance
2013-03-27 20:54:58	fizruk	quchen, exactly
2013-03-27 20:55:04	geekosaur	ha
2013-03-27 20:55:11	hpaste	Quchen annotated “GHCi & GHC” with “GHCi & GHC (annotation)” at http://hpaste.org/84727#a84728
2013-03-27 20:55:12	`-_-a	quchen: would it be My Int or My Integral?
2013-03-27 20:55:13	geekosaur	monomorphism restriction?
2013-03-27 20:55:16	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 20:55:30	geekosaur	ghci extended defaulting probably infers b as ()
2013-03-27 20:55:36	quchen	Integral is a typeclass, what you want is type.
2013-03-27 20:55:44	quchen	Integer and Int are types.
2013-03-27 20:55:45	`-_-a	oh, right.
2013-03-27 20:55:47	quchen	Integral is a type class.
2013-03-27 20:55:50	`-_-a	Integer*
2013-03-27 20:55:59	`-_-a	My Integer
2013-03-27 20:56:12	<--	sonda (~sonda@ppp-30-21.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-27 20:56:16	-->	sbowman (~sbowman@ip-64-134-11-16.public.wayport.net) has joined #haskell
2013-03-27 20:56:30	fizruk	geekosaur, perhaphs. Why does ghci act differently from ghc?
2013-03-27 20:56:46	-->	dylukes (~dylukes@eh-wireless-pittnet-150-212-0-185.wireless.pitt.edu) has joined #haskell
2013-03-27 20:56:58	geekosaur	fizruk, I actualy said why there
2013-03-27 20:57:01	geekosaur	extended defaulting
2013-03-27 20:57:11	<--	xcombelle (~xcombelle@AToulouse-551-1-61-55.w92-146.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-03-27 20:57:13	<--	dskippy1 (~mmachenry@67.208.185.2) has quit (Quit: Leaving.)
2013-03-27 20:57:17	quchen	GHCi tries to not get in your way too much, so it often guesses types when it can't actually infer them
2013-03-27 20:57:30	geekosaur	standard defaulting, which ghc does by default, can only infer types which are an instance of Num per the language standard
2013-03-27 20:57:53	geekosaur	extended defaulting, which ghci adds by default, adds some extra types not permitted by the standard... notably (), the unit type
2013-03-27 20:57:55	<--	LMolr (~LMolr@host63-240-dynamic.2-79-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-27 20:58:14	geekosaur	so you can get away with stuff like that without full types, because it can infer () as the type of the unused part, as a convenience
2013-03-27 20:58:29	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 20:58:35	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-27 20:58:57	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-27 20:59:00	<--	fgomez (~Fernando@142.244.216.78) has quit (Ping timeout: 252 seconds)
2013-03-27 20:59:07	quchen	Can you switch this off by the way?
2013-03-27 20:59:12	geekosaur	yes
2013-03-27 20:59:18	geekosaur	I'm looking up the exact option
2013-03-27 20:59:24	quchen	:set NoGuesses?
2013-03-27 20:59:45	geekosaur	:set -XNoExtendedDefaultRules
2013-03-27 21:00:44	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-27 21:00:48	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 21:01:01	fizruk	geekosaur, thanks a lot for the explanation!
2013-03-27 21:01:04	quchen	Wonderful.
2013-03-27 21:01:17	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-27 21:01:58	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-27 21:02:19	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Quit: Lost terminal)
2013-03-27 21:02:36	<--	seafood (~seafood@stargate.it.nicta.com.au) has quit (Ping timeout: 264 seconds)
2013-03-27 21:02:38	<--	m_hyperbolic (~powergian@0x3ec66863.inet.dsl.telianet.dk) has quit (Ping timeout: 245 seconds)
2013-03-27 21:04:54	<--	etrepum (uid763@gateway/web/irccloud.com/x-rksscznmqfzspzfv) has quit (Ping timeout: 256 seconds)
2013-03-27 21:04:55	<--	Xorlev (uid226@gateway/web/irccloud.com/x-vugvenfczultmpgk) has quit (Ping timeout: 256 seconds)
2013-03-27 21:04:59	<--	SeanTAllen (uid4855@gateway/web/irccloud.com/x-fuulzfqdjbehhctg) has quit (Ping timeout: 255 seconds)
2013-03-27 21:05:03	<--	strax_ (uid4099@gateway/web/irccloud.com/x-gtogxdnmdksytxgv) has quit (Ping timeout: 256 seconds)
2013-03-27 21:05:10	<--	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has quit (Remote host closed the connection)
2013-03-27 21:05:19	<--	mimico__ (uid2554@gateway/web/irccloud.com/x-ctxtqzgqyhkdxjmt) has quit (Ping timeout: 264 seconds)
2013-03-27 21:05:19	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-27 21:05:28	<--	akahn (uid2243@gateway/web/irccloud.com/x-aicrvygdqxrdxnrm) has quit (Ping timeout: 256 seconds)
2013-03-27 21:05:45	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-03-27 21:05:49	<--	MOMI (uid4868@gateway/web/irccloud.com/x-mddsvupuwfdznvst) has quit (Ping timeout: 245 seconds)
2013-03-27 21:05:59	<--	liesen (uid167@gateway/web/irccloud.com/x-ajwgxtelulxzhjzh) has quit (Ping timeout: 252 seconds)
2013-03-27 21:06:06	-->	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has joined #haskell
2013-03-27 21:06:06	<--	augustl (uid10075@gateway/web/irccloud.com/x-wyfjyqzmflchehai) has quit (Ping timeout: 264 seconds)
2013-03-27 21:06:06	<--	chrisbuchholz_ (uid6784@gateway/web/irccloud.com/x-mtznyamavgzzgetp) has quit (Ping timeout: 264 seconds)
2013-03-27 21:06:06	<--	sw17ch (uid10745@gateway/web/irccloud.com/x-fatesigqantmbwts) has quit (Ping timeout: 264 seconds)
2013-03-27 21:06:20	<--	akraut (uid3423@gateway/web/irccloud.com/x-yyejytztwgkrvyqi) has quit (Ping timeout: 256 seconds)
2013-03-27 21:06:23	-->	m_hyperbolic (~powergian@0x3ec66863.inet.dsl.telianet.dk) has joined #haskell
2013-03-27 21:06:24	<--	warpy___ (uid1398@gateway/web/irccloud.com/x-tlukqumfdubkswyz) has quit (Ping timeout: 276 seconds)
2013-03-27 21:06:24	<--	FalkoPeters (uid2565@gateway/web/irccloud.com/x-pvpeizkftkyjxzmz) has quit (Ping timeout: 276 seconds)
2013-03-27 21:06:24	<--	mtlatif (uid10708@gateway/web/irccloud.com/x-lifnjlorrkhuuvkf) has quit (Ping timeout: 276 seconds)
2013-03-27 21:06:25	<--	blooberr (uid5163@gateway/web/irccloud.com/x-tygmaizeaetmbhun) has quit (Ping timeout: 248 seconds)
2013-03-27 21:06:42	<--	tomh_ (uid501@gateway/web/irccloud.com/x-huhrtvucbuqrzipx) has quit (Ping timeout: 264 seconds)
2013-03-27 21:06:42	<--	jodaro (uid5995@gateway/web/irccloud.com/x-owekjxhqvxvbmihh) has quit (Ping timeout: 264 seconds)
2013-03-27 21:06:43	<--	Ghoul__ (uid6924@gateway/web/irccloud.com/x-dotawbumtqbfhvtx) has quit (Ping timeout: 252 seconds)
2013-03-27 21:06:43	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-03-27 21:07:00	-->	stat_vi (~stat@dslb-094-218-236-127.pools.arcor-ip.net) has joined #haskell
2013-03-27 21:07:13	-->	dskippy (~mmachenry@67.208.185.2) has joined #haskell
2013-03-27 21:07:29	-->	Esa|iPhone6 (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-27 21:07:44	-->	kuribas (~user@94-227-88-230.access.telenet.be) has joined #haskell
2013-03-27 21:07:48	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-27 21:08:09	<--	mattrepl (~mattrepl@ssid-mason-secure-216.wireless.gmu.edu) has quit (Quit: mattrepl)
2013-03-27 21:08:33	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Remote host closed the connection)
2013-03-27 21:09:00	-->	folone_ (~folone@brln-4dbc1c92.pool.mediaWays.net) has joined #haskell
2013-03-27 21:09:11	-->	bos (~bos@173.252.71.1) has joined #haskell
2013-03-27 21:09:20	<--	bos (~bos@173.252.71.1) has quit (Read error: Connection reset by peer)
2013-03-27 21:09:47	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-27 21:09:54	-->	desc|zenbook (~heh@cm148.omega155.maxonline.com.sg) has joined #haskell
2013-03-27 21:10:52	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-27 21:11:14	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-03-27 21:12:12	<--	kmrhb (~kmrhb@dsl-216-221-57-138.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-27 21:12:34	-->	Eduard_Munteanu (~Eduard_Mu@188.25.7.0) has joined #haskell
2013-03-27 21:12:40	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-27 21:13:24	<--	Shin-LaC (~LaC@204.174.232.10) has quit (Quit: Computer has gone to sleep.)
2013-03-27 21:13:30	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Remote host closed the connection)
2013-03-27 21:13:57	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-27 21:14:18	-->	Shin-LaC (~LaC@204.174.232.10) has joined #haskell
2013-03-27 21:14:57	<--	kennyd (~kennyd@93-138-75-53.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-03-27 21:15:14	rofer	Is there a way to see the fully qualified name of something in GHCi?
2013-03-27 21:15:50	Shin-LaC	does ghci have something like python's help?
2013-03-27 21:15:59	-->	fgomez (~Fernando@uwsclient-135-191.uws.ualberta.ca) has joined #haskell
2013-03-27 21:16:24	shachaf	rofer: Which fully qualified name? Or why?
2013-03-27 21:16:30	<--	rmunoz (~rmunoz@144.Red-88-16-29.dynamicIP.rima-tde.net) has quit (Quit: leaving)
2013-03-27 21:16:49	`-_-a	rofer: try :i <name>?
2013-03-27 21:16:57	rofer	shachaf: Trying to figure out where something is from
2013-03-27 21:17:00	mikeplus64	Shin-LaC: what is python's help like?
2013-03-27 21:17:08	`-_-a	rofer: hoogle is also useful
2013-03-27 21:17:09	-->	mattrepl (~mattrepl@SSID-MASON-SECURE-216.wireless.gmu.edu) has joined #haskell
2013-03-27 21:17:11	rofer	`-_-a: That's what I was looking for, thanks!
2013-03-27 21:17:18	shachaf	rofer: :i
2013-03-27 21:17:18	Shin-LaC	argh, sorry, gtg
2013-03-27 21:17:21	<--	Shin-LaC (~LaC@204.174.232.10) has quit (Client Quit)
2013-03-27 21:17:26	-->	baltimoron (~baltimoro@50-202-89-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-27 21:17:28	shachaf	Ah, you got an answer.
2013-03-27 21:17:40	shachaf	Though it wasn't an answer to your original question. :-)
2013-03-27 21:17:46	<--	ixmatus (~ixmatus@65-36-73-102.dyn.grandenetworks.net) has quit (Quit: FOR THE CHEESE)
2013-03-27 21:17:47	<--	Franciman (~quassel@host113-192-static.12-87-b.business.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-03-27 21:17:50	-->	Taneb (~nathan@host-92-30-195-9.as13285.net) has joined #haskell
2013-03-27 21:17:57	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-27 21:17:58	shachaf	Also note that :i will tell you which module defined a particular value, not which module you imported it from.
2013-03-27 21:18:12	--	pdxleif_away is now known as pdxleif
2013-03-27 21:18:16	rofer	shachaf: Ah, thanks for that
2013-03-27 21:18:19	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Ping timeout: 245 seconds)
2013-03-27 21:18:38	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-27 21:18:39	-->	kennyd (~kennyd@93-138-106-0.adsl.net.t-com.hr) has joined #haskell
2013-03-27 21:19:01	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-27 21:19:37	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-27 21:19:52	-->	xenplex2 (~yaaic@213.135.232.48) has joined #haskell
2013-03-27 21:19:55	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-27 21:20:08	-->	singla_ (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-27 21:20:08	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-27 21:20:11	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-27 21:20:20	-->	ksookocheff-va (~Adium@184.71.94.142) has joined #haskell
2013-03-27 21:20:45	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-03-27 21:20:47	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-27 21:20:50	<--	m_hyperbolic (~powergian@0x3ec66863.inet.dsl.telianet.dk) has quit (Ping timeout: 272 seconds)
2013-03-27 21:23:33	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-27 21:23:48	-->	dates_ (58e3efb1@gateway/web/freenode/ip.88.227.239.177) has joined #haskell
2013-03-27 21:23:53	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-27 21:24:37	dEPY	I'm on IO chapter in Learn you a haskell, and for everything IO related it states "It returns an I/O action" instead of performs. Is that to indicate lazyness?
2013-03-27 21:24:47	otters	not exactly
2013-03-27 21:24:47	<--	ksookocheff-va (~Adium@184.71.94.142) has left #haskell
2013-03-27 21:24:57	otters	well, the IO monad is lazy, I believe
2013-03-27 21:25:23	dEPY	Oh, so it means the return type is IO and it's actually performed by the "do" ?
2013-03-27 21:25:30	otters	the IO monad is one of those weird monads that trip people up but it's like a "computation"
2013-03-27 21:25:35	shachaf	No.
2013-03-27 21:25:50	dEPY	Damn you haskell! Why can't I figure something out on my own! :D
2013-03-27 21:25:51	shachaf	A function like putStrLn :: String -> IO () returns an IO action.
2013-03-27 21:25:53	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 240 seconds)
2013-03-27 21:26:01	shachaf	That is, (putStrLn "blah") is an IO action.
2013-03-27 21:26:08	otters	When evaluated, it puts that strln
2013-03-27 21:26:13	shachaf	What?
2013-03-27 21:26:22	aristid	otters: no
2013-03-27 21:26:23	shachaf	Anyway, an IO action is a completely inert value.
2013-03-27 21:26:24	--	`-_-a is now known as `O_o
2013-03-27 21:26:30	<--	fgomez (~Fernando@uwsclient-135-191.uws.ualberta.ca) has quit (Ping timeout: 252 seconds)
2013-03-27 21:26:33	--	`O_o is now known as armlesshobo
2013-03-27 21:26:40	elliott	otters: not true
2013-03-27 21:26:46	otters	lol
2013-03-27 21:26:47	aristid	> putStrLn "foo" `seq` 123
2013-03-27 21:26:48	lambdabot	  123
2013-03-27 21:26:54	dEPY	shachaf: Go on.. I'm following
2013-03-27 21:26:56	aristid	note how this doesn't print "foo"
2013-03-27 21:27:00	otters	well, haskell isn't my strong point
2013-03-27 21:27:15	shachaf	dEPY: An IO action is like a program that can be run to do IO.
2013-03-27 21:27:30	<--	armlesshobo (~ahobo@32.97.110.52) has quit (Changing host)
2013-03-27 21:27:30	-->	armlesshobo (~ahobo@unaffiliated/armlesshobo) has joined #haskell
2013-03-27 21:27:40	<--	Ralith (~ralith@d142-058-095-010.wireless.sfu.ca) has quit (Ping timeout: 256 seconds)
2013-03-27 21:27:44	<--	signalsea (~signalsea@bas1-montreal46-1242535714.dsl.bell.ca) has quit (Quit: Leaving)
2013-03-27 21:27:48	shachaf	dEPY: You can construct these programs out of smaller programs, for example.
2013-03-27 21:28:04	dEPY	And... It's run by "do"?  O_ô
2013-03-27 21:28:14	elliott	no, "do" is how you construct the programs out of smaller ones
2013-03-27 21:28:17	aristid	no. do just combines multiple smaller programs.
2013-03-27 21:28:18	shachaf	No, "do" is -- yes.
2013-03-27 21:28:21	dEPY	oh ok
2013-03-27 21:28:22	otters	no, do is syntax sugar for bind
2013-03-27 21:28:23	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-27 21:28:30	dEPY	I'm gonna shut up now and listen. :)
2013-03-27 21:28:37	shachaf	dEPY: Then when you compile your .hs file, the resulting executable runs the IO action "main".
2013-03-27 21:28:39	aristid	dEPY: the IO is run by the haskell runtime. it looks for an IO value returned by main, and executes that.
2013-03-27 21:28:44	otters	"do" is misleadingly named
2013-03-27 21:28:46	latro`a	do is syntax sugar for bind, bind is how you chain together IO actions, then one action that is actually performed is main
2013-03-27 21:28:53	latro`a	s/then/the
2013-03-27 21:28:55	aristid	otters: perhaps.
2013-03-27 21:29:01	glguy	lol, let shachaf finish :)
2013-03-27 21:29:13	<--	nuthog (4b329d8a@gateway/web/freenode/ip.75.50.157.138) has quit (Ping timeout: 245 seconds)
2013-03-27 21:29:15	otters	> unsafePerformIO (putStrln "foo") `seq` "foo"
2013-03-27 21:29:17	lambdabot	  Not in scope: `unsafePerformIO'Not in scope: `putStrln'
2013-03-27 21:29:17	lambdabot	 Perhaps you meant ...
2013-03-27 21:29:20	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-03-27 21:29:20	otters	rats
2013-03-27 21:29:25	-->	Hannibal_Smith (~ff130493@host122-76-dynamic.46-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-27 21:29:29	shachaf	otters: I don't think you're helping.
2013-03-27 21:29:35	aristid	otters: we don't talk about unsafePerformIO in polite company
2013-03-27 21:29:36	armlesshobo	do { line <- getLine; putStrLn line;} = getLine >>= (\x -> putStrLn x)
2013-03-27 21:29:44	otters	I apologize everybody
2013-03-27 21:29:51	dEPY	someone finish the damn story :)
2013-03-27 21:29:52	-->	enquora (~davidr@S0106602ad083de8c.cg.shawcable.net) has joined #haskell
2013-03-27 21:30:03	latro`a	supposing you compile the program
2013-03-27 21:30:08	shachaf	dEPY: So, for example, (putStrLn "hi") and (putStrLn "ho") are both IO actions.
2013-03-27 21:30:08	latro`a	main = getLine >>= putStrLn
2013-03-27 21:30:14	otters	oh, weird
2013-03-27 21:30:17	latro`a	and then run it
2013-03-27 21:30:21	shachaf	dEPY: So do { putStrLn "hi"; putStrLn "ho" } is another IO action.
2013-03-27 21:30:26	otters	when I evaluate that in GHCI it outputs "hi\nfoo"
2013-03-27 21:30:27	latro`a	it will take a line from the user and then print it back
2013-03-27 21:30:30	jfischoff	what do I add to the cabal file to make this go away? Dynamic linking required, but this is a non-standard build (eg. prof) …. -osuf to set the object file suffix
2013-03-27 21:30:58	latro`a	just evaluating getLine or putStrLn or getLine >>= putStrLn doesn't make the IO happen; what makes the IO happen is being in main
2013-03-27 21:30:58	shachaf	dEPY; If you say main = do { putStrLn "hi"; putStrLn "ho" }, then when you run that program, GHC will run the IO action "main".
2013-03-27 21:31:12	armlesshobo	putStr "Hello, " >> putStrLn "World"
2013-03-27 21:31:20	shachaf	dEPY: In order to do that it'll run each IO action that main is made up of, in turn.
2013-03-27 21:31:21	Mortchek	otters, GHCI evaluates and then *executes* IO actions. The execution is what you're seeing.
2013-03-27 21:31:45	armlesshobo	execute is for IO only, right?
2013-03-27 21:32:01	latro`a	technically yes, though others may be described that way sometimes
2013-03-27 21:32:07	aristid	shachaf: hmm, do you think a blueprint would be a good analogy?
2013-03-27 21:32:08	Mortchek	Don't quote me on the term "execute", I'm not sure it's technically correct
2013-03-27 21:32:09	armlesshobo	because binding other Monadic types don't necessary get executed
2013-03-27 21:32:13	<--	adzeitor (~adzeitor@31.207.154.200) has quit (Ping timeout: 245 seconds)
2013-03-27 21:32:14	dEPY	shachaf: So far so good. :)
2013-03-27 21:32:15	shachaf	latro`a: There is no "technically" because there's no technical definition of "execute".
2013-03-27 21:32:36	latro`a	well, "strictly speaking" or something like that
2013-03-27 21:32:44	shachaf	I think "execute" makes sense for just about any monad. But sometimes it's a boring kind of sense.
2013-03-27 21:32:58	armlesshobo	execute Maybe?
2013-03-27 21:33:04	Mortchek	> putStrLn "lambdabot refuses to execute IO, for good reason."
2013-03-27 21:33:05	lambdabot	  No instance for (GHC.Show.Show (GHC.Types.IO ()))
2013-03-27 21:33:06	lambdabot	   arising from a use of ...
2013-03-27 21:33:17	armlesshobo	execute Either?
2013-03-27 21:33:22	shachaf	"execute" means more or less the same thing as "interpret".
2013-03-27 21:33:37	shachaf	Executing a value of type (Maybe a) is pretty boring.
2013-03-27 21:33:47	aristid	armlesshobo: runEither :: Either a b -> (a -> c) -> (b -> c) -> c
2013-03-27 21:33:51	-->	`ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-27 21:33:56	aristid	:t either
2013-03-27 21:33:57	lambdabot	(a -> c) -> (b -> c) -> Either a b -> c
2013-03-27 21:34:03	aristid	:t maybe
2013-03-27 21:34:05	lambdabot	b -> (a -> b) -> Maybe a -> b
2013-03-27 21:34:14	armlesshobo	ahhhh, i was thinking about it all wrong.
2013-03-27 21:34:20	armlesshobo	aristid: thank you
2013-03-27 21:34:39	aristid	:t maybe Nothing Just
2013-03-27 21:34:41	lambdabot	Maybe a -> Maybe a
2013-03-27 21:34:42	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-27 21:34:48	aristid	*giggle*
2013-03-27 21:34:57	latro`a	best id ever
2013-03-27 21:34:59	-->	osa1 (~omer@176.237.140.0) has joined #haskell
2013-03-27 21:35:07	Mortchek	($) is a pretty cool id too
2013-03-27 21:35:21	latro`a	evidently lens is filled with cool ids
2013-03-27 21:35:26	aristid	:t either Left Right
2013-03-27 21:35:28	lambdabot	Either a b -> Either a b
2013-03-27 21:35:33	<--	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 258 seconds)
2013-03-27 21:35:43	latro`a	:t Control.Error.Util.hush
2013-03-27 21:35:44	lambdabot	Couldn't find qualified module.
2013-03-27 21:35:46	latro`a	aw
2013-03-27 21:35:48	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-03-27 21:35:59	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 246 seconds)
2013-03-27 21:36:00	latro`a	I love the names of hush and note
2013-03-27 21:36:04	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-27 21:36:05	latro`a	succinct and descriptive
2013-03-27 21:36:17	--	`ramses_ is now known as `ramses
2013-03-27 21:36:18	Mortchek	What do they do?
2013-03-27 21:36:26	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Quit: Leaving)
2013-03-27 21:36:30	latro`a	hush (Right x) = Just x; hush (Left _) = Nothing
2013-03-27 21:36:46	Mortchek	And note is the opposite?
2013-03-27 21:36:56	<--	zhulikas (~zhulikas@213.159.34.100) has quit
2013-03-27 21:37:01	latro`a	note mynote Nothing = Left mynote; note _ (Just x) = Right x
2013-03-27 21:37:08	Mortchek	Neat.
2013-03-27 21:37:14	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-27 21:37:52	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-27 21:38:19	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 245 seconds)
2013-03-27 21:38:27	sproingie	sort of a maybeToEither
2013-03-27 21:38:41	latro`a	more descriptive than that name, though
2013-03-27 21:38:46	sproingie	definitely
2013-03-27 21:38:50	sproingie	shorter too :)
2013-03-27 21:38:56	--	`ramses is now known as ramses_
2013-03-27 21:40:00	-->	schlicht_ (~fl@g225049144.adsl.alicedsl.de) has joined #haskell
2013-03-27 21:40:18	<--	trescenzi (~trescenzi@148.100.72.126) has quit (Remote host closed the connection)
2013-03-27 21:40:26	<--	William_ (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-27 21:40:29	ion	@type \a -> maybe (Left a) . Right
2013-03-27 21:40:30	lambdabot	    Couldn't match expected type `a0 -> Either a1 b0'
2013-03-27 21:40:31	lambdabot	                with actual type `Either a3 a2'
2013-03-27 21:40:31	lambdabot	    Expected type: a2 -> a0 -> Either a1 b0
2013-03-27 21:40:38	ion	@type \a -> maybe (Left a) Right
2013-03-27 21:40:40	lambdabot	a -> Maybe b -> Either a b
2013-03-27 21:41:09	lispy	hello
2013-03-27 21:41:13	ion	hi
2013-03-27 21:41:14	<--	threesteps (~ming@p5B04BF42.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-03-27 21:41:23	latro`a	oh cool, you can implement them with maybe/either
2013-03-27 21:41:33	lispy	@tell ivanm were you looking for me?
2013-03-27 21:41:34	lambdabot	Consider it noted.
2013-03-27 21:41:41	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 248 seconds)
2013-03-27 21:42:01	ion	@type either (const Nothing) Just
2013-03-27 21:42:02	lambdabot	Either a a1 -> Maybe a1
2013-03-27 21:42:06	latro`a	indeed
2013-03-27 21:42:20	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Quit: WeeChat 0.3.7)
2013-03-27 21:42:28	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-03-27 21:43:19	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-03-27 21:43:49	<--	schlicht (~fl@g229053127.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-03-27 21:43:53	--	pepijn_away is now known as pepijndevos
2013-03-27 21:45:17	<--	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-27 21:45:17	-->	trescenzi (~trescenzi@2620:91:0:163:58f6:e58e:2cf5:5c81) has joined #haskell
2013-03-27 21:46:05	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Quit: !)
2013-03-27 21:46:15	-->	edeast (~chatzilla@24.114.27.50) has joined #haskell
2013-03-27 21:46:48	<--	morazow (~morazow@gsd116.gsd.inesc-id.pt) has quit (Ping timeout: 245 seconds)
2013-03-27 21:47:08	<--	baltimoron (~baltimoro@50-202-89-58-static.hfc.comcastbusiness.net) has quit
2013-03-27 21:48:06	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 21:49:05	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-27 21:49:21	-->	cognominal (~cognomina@37.161.196.64) has joined #haskell
2013-03-27 21:49:55	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-27 21:53:08	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 272 seconds)
2013-03-27 21:57:22	-->	threesteps (~ming@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-27 21:57:26	<--	fizruk (59f9a510@gateway/web/freenode/ip.89.249.165.16) has quit (Quit: Page closed)
2013-03-27 21:57:51	<--	edeast (~chatzilla@24.114.27.50) has quit (Ping timeout: 252 seconds)
2013-03-27 21:58:08	<--	raichoo (~raichoo@i59F6A541.versanet.de) has quit (Quit: leaving)
2013-03-27 21:58:17	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-27 21:58:38	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-27 21:59:03	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-27 21:59:08	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Quit: leaving)
2013-03-27 21:59:15	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-27 21:59:34	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-27 21:59:47	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-03-27 22:00:06	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-27 22:00:32	-->	Desheng^ (~Desheng@32.162.40.84) has joined #haskell
2013-03-27 22:02:38	-->	plcplc (~quassel@188-183-115-64-dynamic.dk.customer.tdc.net) has joined #haskell
2013-03-27 22:02:44	-->	mutjida (d0125401@gateway/web/freenode/ip.208.18.84.1) has joined #haskell
2013-03-27 22:02:53	-->	Lethalman (~lethal@ppp-7-30.28-151.libero.it) has joined #haskell
2013-03-27 22:03:38	-->	fxr (~user@176.42.255.221) has joined #haskell
2013-03-27 22:04:18	-->	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has joined #haskell
2013-03-27 22:04:39	aristid	@pl \a -> maybe (Left a) . Right
2013-03-27 22:04:39	lambdabot	(. Right) . maybe . Left
2013-03-27 22:04:41	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-27 22:04:45	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Quit: leaving)
2013-03-27 22:04:52	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-27 22:05:00	<--	dskippy (~mmachenry@67.208.185.2) has quit (Quit: Leaving.)
2013-03-27 22:05:13	<--	rexamophone (uid4239@gateway/web/irccloud.com/x-aeatrgwjuorpwhtl) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	hungryblank (uid10065@gateway/web/irccloud.com/x-ykuxsaetxuhgbrwa) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	puzza007_ (uid127@gateway/web/irccloud.com/x-hjjetnpdwswdxdqs) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	wilfredh_ (uid159@gateway/web/irccloud.com/x-hsaopwipidyuxeqk) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	bobry (uid4445@gateway/web/irccloud.com/x-tcmzqvmkgzfqaerw) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	UziMonkey__ (uid184@gateway/web/irccloud.com/x-sizqbwybmuznkkia) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-tgsppkrrirqhmjqv) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	DarkLinkXXXX (uid10912@gateway/web/irccloud.com/x-sezlsanmchdibvix) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	xrl__ (uid1091@gateway/web/irccloud.com/x-ikzimjymauoszjhq) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	lopex (uid4272@gateway/web/irccloud.com/x-qkxymfmturavpndp) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	arnihr__ (uid1395@gateway/web/irccloud.com/x-sfvhsbluqpnwwrol) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	PrO_OkI (uid4868@gateway/web/irccloud.com/x-lijjsufqdwdougxo) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	si14 (uid2619@gateway/web/irccloud.com/x-wkesagqdofhffzla) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	charlesofarrell (uid7413@gateway/web/irccloud.com/x-mvfqizjuiscmhiva) has quit (Read error: Connection reset by peer)
2013-03-27 22:05:13	<--	IbnFirnas (uid6178@gateway/web/irccloud.com/x-rwhaihozjrkcbnuw) has quit (Remote host closed the connection)
2013-03-27 22:05:13	<--	Vertue (uid10621@gateway/web/irccloud.com/x-fkloktmlpkchkcyr) has quit (Remote host closed the connection)
2013-03-27 22:05:14	<--	abumirqaan (uid2969@gateway/web/irccloud.com/x-zunsmrssyhzvgumt) has quit (Write error: Broken pipe)
2013-03-27 22:05:21	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-27 22:05:43	-->	edeast (~chatzilla@24.114.27.50) has joined #haskell
2013-03-27 22:07:04	<--	mutjida (d0125401@gateway/web/freenode/ip.208.18.84.1) has quit (Client Quit)
2013-03-27 22:07:10	dates_	Hi. I have a function "func dist ref_pt pt_list = filter (\(x,y)->(distance_calc (x,y) ref_pt) <= dist) pt_list" this gives list of points which are inside this distance. I want to modify it so that it shall give only the closest points. Ex: if closest points are only in distance 1, just give them otherwise check distance 2 How can I do that?
2013-03-27 22:07:57	<--	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-27 22:08:29	<--	[[zz]] (~q@node-mnb.pool-101-108.dynamic.totbb.net) has quit (Ping timeout: 256 seconds)
2013-03-27 22:08:39	-->	tazman (~androirc@128-69-70-218.broadband.corbina.ru) has joined #haskell
2013-03-27 22:09:16	aristid	dates_: what's the rule for how many points it should be?
2013-03-27 22:09:24	Eduard_Munteanu	Presumably pt_list is non-empty.
2013-03-27 22:09:41	<--	tazman (~androirc@128-69-70-218.broadband.corbina.ru) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-03-27 22:09:47	glguy	dates_: Are you confused about how to do this or how to implement a particular algorithm for it in Haskell?
2013-03-27 22:09:49	-->	dskippy (~mmachenry@67.208.185.2) has joined #haskell
2013-03-27 22:09:53	<--	cognominal (~cognomina@37.161.196.64) has quit (Ping timeout: 240 seconds)
2013-03-27 22:10:06	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Quit: anderse)
2013-03-27 22:10:12	-->	Tazman (~androirc@128-69-70-218.broadband.corbina.ru) has joined #haskell
2013-03-27 22:10:14	dates_	pt_list is never empty, and as many as points with least distance
2013-03-27 22:10:37	Eduard_Munteanu	Ok, that's reasonable.
2013-03-27 22:10:42	dates_	glguy : I am confused about its haskell implementation
2013-03-27 22:11:05	 *	aristid isn't sure what exactly dates_ actually wants.
2013-03-27 22:11:14	edwardk	latro`a: hush = preview _Right
2013-03-27 22:11:57	dates_	the function gives all points inside that distance, I want it to give the ones with least distance
2013-03-27 22:12:05	<--	Tazman (~androirc@128-69-70-218.broadband.corbina.ru) has left #haskell
2013-03-27 22:13:10	 *	hackagebot liblastfm 0.1.1.1 - Lastfm API interface  http://hackage.haskell.org/package/liblastfm-0.1.1.1 (MatveyAksenov)
2013-03-27 22:13:21	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-27 22:13:23	hpaste	glguy pasted “minimums with measure” at http://hpaste.org/84731
2013-03-27 22:13:27	latro`a	@type \d r ps -> filter (\p -> dist p r == minimum (map (dist r) ps)
2013-03-27 22:13:28	lambdabot	parse error (possibly incorrect indentation)
2013-03-27 22:13:31	 *	glguy guesses that's what he's looking for
2013-03-27 22:13:33	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 240 seconds)
2013-03-27 22:13:34	-->	tjohnson (~tjohnson@68.65.169.226) has joined #haskell
2013-03-27 22:13:36	latro`a	@type \d r ps -> filter (\p -> dist p r == minimum (map (dist r) ps))
2013-03-27 22:13:38	lambdabot	Not in scope: `dist'
2013-03-27 22:13:38	lambdabot	Not in scope: `dist'
2013-03-27 22:13:39	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-27 22:13:46	latro`a	bah
2013-03-27 22:13:57	latro`a	@type \f d r ps -> filter (\p -> dist p r == minimum (map (dist r) ps)) ps
2013-03-27 22:13:59	lambdabot	Not in scope: `dist'
2013-03-27 22:13:59	lambdabot	Not in scope: `dist'
2013-03-27 22:14:05	latro`a	one more time...
2013-03-27 22:14:09	latro`a	@type \f d r ps -> filter (\p -> dist p r == minimum (map (f r) ps)) ps
2013-03-27 22:14:10	lambdabot	Not in scope: `dist'
2013-03-27 22:14:15	latro`a	...
2013-03-27 22:14:16	latro`a	last time
2013-03-27 22:14:28	aristid	latro`a: what about "not in scope: dist" do you fail to understand?
2013-03-27 22:14:30	latro`a	@type \f d r ps -> filter (\p -> f r p == minimum (map (f r) ps)) ps
2013-03-27 22:14:31	lambdabot	Ord a => (t1 -> a1 -> a) -> t -> t1 -> [a1] -> [a1]
2013-03-27 22:14:40	latro`a	I just kept forgetting to fix it
2013-03-27 22:14:47	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-27 22:14:49	-->	Tazman (~androirc@128-69-70-218.broadband.corbina.ru) has joined #haskell
2013-03-27 22:14:49	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-27 22:15:33	<--	dolio (~dolio@gw1.mcgraw-hill.com) has quit (Ping timeout: 245 seconds)
2013-03-27 22:15:39	<--	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 260 seconds)
2013-03-27 22:15:41	<--	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-27 22:15:43	aristid	i don't think this is very efficient either
2013-03-27 22:15:54	-->	wto (~wto@h-123-175-116.a336.priv.bahnhof.se) has joined #haskell
2013-03-27 22:16:00	<--	gadjo (~gggg@109.102.72.188) has quit (Ping timeout: 252 seconds)
2013-03-27 22:16:08	latro`a	it's not, unless you get magic stream fusion
2013-03-27 22:16:13	<--	staafl_123 (~staafl@95-42-19-2.btc-net.bg) has quit (Quit: Leaving)
2013-03-27 22:16:19	glguy	dates_: Does the paste help?
2013-03-27 22:16:26	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-27 22:16:33	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-03-27 22:16:59	dates_	I'm trying to put it into function
2013-03-27 22:17:14	<--	dylukes (~dylukes@eh-wireless-pittnet-150-212-0-185.wireless.pitt.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-27 22:18:08	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 22:19:00	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-27 22:19:20	-->	cognominal (~cognomina@37.161.196.64) has joined #haskell
2013-03-27 22:19:30	<--	tomboy66 (~tomboy@unaffiliated/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-03-27 22:19:36	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-27 22:19:53	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 22:20:44	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-27 22:21:07	dates_	I couldn't figure how to use it
2013-03-27 22:21:27	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Client Quit)
2013-03-27 22:21:29	<--	epta (~ggg@toje.ws) has quit (Ping timeout: 255 seconds)
2013-03-27 22:22:00	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-27 22:22:03	-->	[[zz]] (~q@node-8dm.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-27 22:22:48	duairc_	I'm trying to build GHC HEAD on a Debian system, and I'm running into problems, I think because shared libraries are default by now. How would I turn off the shared library stuff?
2013-03-27 22:22:51	quchen	I've got a data type with a constructor that requires Ord. Do I have to use GADTs to make the constructor work only on Ord things? (The reason is that every possible value of that constructor involves a call to Data.Map)
2013-03-27 22:22:52	glguy	minimumsWithMeasure (distanceToPoint referencePoint) points
2013-03-27 22:23:13	-->	Xaratas (~UserNick@brln-4d0ce80a.pool.mediaWays.net) has joined #haskell
2013-03-27 22:23:15	-->	fenton (~fenton@m121-202-251-52.smartone.com) has joined #haskell
2013-03-27 22:23:20	-->	puzza007_ (uid127@gateway/web/irccloud.com/x-qyuazamtzvqxqugi) has joined #haskell
2013-03-27 22:23:25	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-27 22:23:39	quchen	(Requiring a typeclass for a constructor seems like a code smell, but I can't think of anything better here.)
2013-03-27 22:23:57	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-03-27 22:23:59	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-27 22:24:00	-->	liesen (uid167@gateway/web/irccloud.com/x-awlzljfxnixarzuo) has joined #haskell
2013-03-27 22:24:00	-->	wilfredh_ (uid159@gateway/web/irccloud.com/x-hosilciefindogfy) has joined #haskell
2013-03-27 22:24:03	-->	UziMonkey__ (uid184@gateway/web/irccloud.com/x-pjmqynvekcdzlgcu) has joined #haskell
2013-03-27 22:24:11	-->	Xorlev (uid226@gateway/web/irccloud.com/x-negtrdjwaqgdjxme) has joined #haskell
2013-03-27 22:24:24	<--	kk` (~kk@unaffiliated/kk/x-5380134) has quit (Quit: WeeChat 0.4.0)
2013-03-27 22:24:39	-->	fgomez (~Fernando@uwsclient-178-224.uws.ualberta.ca) has joined #haskell
2013-03-27 22:24:41	<--	fenton (~fenton@m121-202-251-52.smartone.com) has quit (Client Quit)
2013-03-27 22:24:46	-->	system64_ (~textual@182.68.68.118) has joined #haskell
2013-03-27 22:24:48	-->	tomh_ (uid501@gateway/web/irccloud.com/x-huzedbhdunaomggt) has joined #haskell
2013-03-27 22:24:54	<--	system64 (~system64@182.68.68.118) has quit (Remote host closed the connection)
2013-03-27 22:25:03	-->	fenton (~fenton@m121-202-251-52.smartone.com) has joined #haskell
2013-03-27 22:25:24	-->	etrepum (uid763@gateway/web/irccloud.com/x-cpbulsjdfstjpuwv) has joined #haskell
2013-03-27 22:25:54	--	stelleg is now known as stelleg_away
2013-03-27 22:26:04	-->	xrl__ (uid1091@gateway/web/irccloud.com/x-wskpdswxuafyosmj) has joined #haskell
2013-03-27 22:26:11	-->	system64 (~system64@182.68.68.118) has joined #haskell
2013-03-27 22:26:32	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-27 22:26:41	-->	tyler (quassel@2a01:7e00::f03c:91ff:fedf:8103) has joined #haskell
2013-03-27 22:26:43	-->	warpy___ (uid1398@gateway/web/irccloud.com/x-bknaiuatgrmsbfkf) has joined #haskell
2013-03-27 22:26:45	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-27 22:26:46	tyler	is it idem'potent or idempo'tent i hear most people say idem'potent but omnipo'tent is used in that word
2013-03-27 22:26:50	-->	arnihr__ (uid1395@gateway/web/irccloud.com/x-ldpmfwgfattczyib) has joined #haskell
2013-03-27 22:27:08	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-27 22:27:27	-->	heruur (~tvh@218-144-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-03-27 22:27:35	monochrom	idem potent
2013-03-27 22:27:43	glguy	i.dem.po.tent |ˈīdemˌpōtənt
2013-03-27 22:27:45	-->	Rants (~quassel@204.132.65.177) has joined #haskell
2013-03-27 22:27:52	monochrom	also, omni potent
2013-03-27 22:28:07	glguy	(to paste from the dictionary)
2013-03-27 22:28:15	monochrom	ah, intonation? I don't know then
2013-03-27 22:28:19	tyler	because there is only one dictionary
2013-03-27 22:28:21	-->	akahn (uid2243@gateway/web/irccloud.com/x-antgpwotwyzmohaj) has joined #haskell
2013-03-27 22:28:46	-->	FalkoPeters (uid2565@gateway/web/irccloud.com/x-jiggysqxhnbcosbf) has joined #haskell
2013-03-27 22:28:48	monochrom	look up 3 dictionaries then take the average :)
2013-03-27 22:28:55	tyler	lol
2013-03-27 22:28:56	-->	mimico__ (uid2554@gateway/web/irccloud.com/x-wqspvkspeavtiiph) has joined #haskell
2013-03-27 22:29:09	-->	si14 (uid2619@gateway/web/irccloud.com/x-zotcmhtuhvfuayci) has joined #haskell
2013-03-27 22:29:11	tyler	i was more curious how people say it
2013-03-27 22:29:16	tyler	i guess its like tuple
2013-03-27 22:29:21	tyler	where you pretty much good either way
2013-03-27 22:29:28	singla_	join #svn-dev
2013-03-27 22:29:31	tyler	although most academic people i know say toople
2013-03-27 22:29:42	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-27 22:29:45	<--	osa1 (~omer@176.237.140.0) has quit (Ping timeout: 252 seconds)
2013-03-27 22:29:47	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-27 22:29:52	schellsan	idémpotent
2013-03-27 22:29:53	<--	fenton (~fenton@m121-202-251-52.smartone.com) has quit (Client Quit)
2013-03-27 22:29:59	<--	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-03-27 22:30:00	-->	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has joined #haskell
2013-03-27 22:30:27	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Disconnected by services)
2013-03-27 22:30:40	schellsan	i thought it was tuple like couple
2013-03-27 22:30:43	-->	akraut (uid3423@gateway/web/irccloud.com/x-rllobxpcjfsqpmam) has joined #haskell
2013-03-27 22:30:47	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-27 22:30:53	-->	mgeorgi_ (uid3499@gateway/web/irccloud.com/x-xcunyvpwhukkoieb) has joined #haskell
2013-03-27 22:30:54	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-27 22:31:01	schellsan	(left, right) is a couple that makes a tuple
2013-03-27 22:31:54	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Ping timeout: 258 seconds)
2013-03-27 22:32:04	-->	Ralith (~ralith@d142-058-094-209.wireless.sfu.ca) has joined #haskell
2013-03-27 22:32:11	<--	augur (~augur@129-2-129-32.wireless.umd.edu) has quit (Remote host closed the connection)
2013-03-27 22:32:16	-->	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-27 22:32:17	-->	abumirqaan (uid2969@gateway/web/irccloud.com/x-suqdscgsfnusxkqv) has joined #haskell
2013-03-27 22:32:17	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Ping timeout: 258 seconds)
2013-03-27 22:32:19	-->	strax_ (uid4099@gateway/web/irccloud.com/x-fgmpderckrmzypde) has joined #haskell
2013-03-27 22:32:22	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Remote host closed the connection)
2013-03-27 22:32:31	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-27 22:32:41	glguy	schellsan: both pronunciations appear to be recognized
2013-03-27 22:32:44	schellsan	of course - i also always thought kludgey was like clud-gee and according to google it's klooo-gee
2013-03-27 22:32:49	-->	rexamophone (uid4239@gateway/web/irccloud.com/x-wsdfqkcplmtcjdvg) has joined #haskell
2013-03-27 22:32:59	tyler	i say kloo-gee
2013-03-27 22:33:11	<--	sleepynate (~sleepynat@199.16.190.194) has quit (Remote host closed the connection)
2013-03-27 22:33:14	-->	lopex (uid4272@gateway/web/irccloud.com/x-nskrgvhctbhbapth) has joined #haskell
2013-03-27 22:33:17	-->	bobry (uid4445@gateway/web/irccloud.com/x-mizoybzyfmgcqlor) has joined #haskell
2013-03-27 22:33:17	schellsan	see - told you i was wrong ;)
2013-03-27 22:33:25	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 256 seconds)
2013-03-27 22:33:35	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Quit: Leaving)
2013-03-27 22:33:52	<--	idntfy2 (~idntfy@178.210.56.88) has quit (Ping timeout: 256 seconds)
2013-03-27 22:34:09	-->	ryanakca (ryan@ubuntu/member/ryanakca) has joined #haskell
2013-03-27 22:34:10	schellsan	budge, nudge...kludge?
2013-03-27 22:34:35	glguy	Yeah, boodge, noodge, and kloodge
2013-03-27 22:34:42	Ralith	>_>
2013-03-27 22:34:44	glguy	it's consistent :)
2013-03-27 22:34:50	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 22:35:07	-->	SeanTAllen (uid4855@gateway/web/irccloud.com/x-rdpbvgdcwmyeahzs) has joined #haskell
2013-03-27 22:35:08	-->	MOMI (uid4868@gateway/web/irccloud.com/x-mfswzbyjumetxzmm) has joined #haskell
2013-03-27 22:35:08	-->	PrO_OkI (uid4868@gateway/web/irccloud.com/x-jgabdorpcmdyijgu) has joined #haskell
2013-03-27 22:35:18	schellsan	boodge your kloodge in the noodge
2013-03-27 22:35:27	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-27 22:35:50	-->	blooberr (uid5163@gateway/web/irccloud.com/x-grqmmctevrgernhg) has joined #haskell
2013-03-27 22:36:04	schellsan	okay back to work for me - i've sufficiently gotten you guys off track for now :)
2013-03-27 22:36:10	-->	edeast_ (~chatzilla@24.114.27.50) has joined #haskell
2013-03-27 22:36:11	-->	augur (~augur@129-2-129-32.wireless.umd.edu) has joined #haskell
2013-03-27 22:36:26	<--	trescenzi (~trescenzi@2620:91:0:163:58f6:e58e:2cf5:5c81) has quit (Remote host closed the connection)
2013-03-27 22:37:13	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-27 22:37:59	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-27 22:38:13	<--	edeast (~chatzilla@24.114.27.50) has quit (Ping timeout: 240 seconds)
2013-03-27 22:38:20	--	edeast_ is now known as edeast
2013-03-27 22:38:21	<--	samedhi (~stephen@208.70.28.214) has quit (Quit: samedhi)
2013-03-27 22:38:30	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2013-03-27 22:38:37	-->	Philonous (~Philonous@dslb-178-000-130-110.pools.arcor-ip.net) has joined #haskell
2013-03-27 22:38:39	-->	jodaro (uid5995@gateway/web/irccloud.com/x-prhjoaoehrrkitxa) has joined #haskell
2013-03-27 22:38:41	--	pepijndevos is now known as pepijn_away
2013-03-27 22:39:12	-->	IbnFirnas (uid6178@gateway/web/irccloud.com/x-vwmfzkytfhzeywic) has joined #haskell
2013-03-27 22:39:13	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: BitchX: now with Olestra!)
2013-03-27 22:39:38	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-27 22:40:04	--	pepijn_away is now known as pepijndevos
2013-03-27 22:41:46	-->	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-27 22:42:25	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-27 22:42:33	<--	edeast (~chatzilla@24.114.27.50) has quit (Ping timeout: 240 seconds)
2013-03-27 22:42:58	-->	chrisbuchholz_ (uid6784@gateway/web/irccloud.com/x-klidukgasxpvfajn) has joined #haskell
2013-03-27 22:43:05	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-27 22:43:38	-->	Ghoul__ (uid6924@gateway/web/irccloud.com/x-vpevientpqkskwwy) has joined #haskell
2013-03-27 22:44:43	<--	v__ (~v@61.173.105.92) has quit (Ping timeout: 245 seconds)
2013-03-27 22:44:49	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-yngntzciwogbctiw) has joined #haskell
2013-03-27 22:44:50	-->	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-27 22:44:56	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Remote host closed the connection)
2013-03-27 22:44:57	-->	v__ (~v@61.173.107.214) has joined #haskell
2013-03-27 22:45:00	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Quit: croikle)
2013-03-27 22:45:01	<--	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 245 seconds)
2013-03-27 22:45:03	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-27 22:45:05	<--	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-27 22:45:18	<--	system64_ (~textual@182.68.68.118) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-27 22:45:19	-->	trescenzi (~trescenzi@2620:91:0:163:65d5:3a6f:6843:3827) has joined #haskell
2013-03-27 22:45:40	-->	system64_ (~system64@182.68.68.118) has joined #haskell
2013-03-27 22:45:40	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-27 22:45:54	-->	lennart_ (~lennart@p54995447.dip0.t-ipconnect.de) has joined #haskell
2013-03-27 22:46:59	<--	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has quit (Read error: Connection reset by peer)
2013-03-27 22:47:01	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: Connection reset by peer)
2013-03-27 22:47:04	<--	Tazman (~androirc@128-69-70-218.broadband.corbina.ru) has quit (Ping timeout: 245 seconds)
2013-03-27 22:47:32	-->	miclorb (~miclorb@ppp121-44-81-187.lns20.syd6.internode.on.net) has joined #haskell
2013-03-27 22:47:37	-->	charlesofarrell (uid7413@gateway/web/irccloud.com/x-tslusinzzizyvgcs) has joined #haskell
2013-03-27 22:47:50	-->	mlh (~mlh@c220-239-126-102.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-03-27 22:47:52	-->	napping (~brandon@qchost236-242.cs.illinois.edu) has joined #haskell
2013-03-27 22:47:58	-->	fenton (~fenton@m121-202-251-52.smartone.com) has joined #haskell
2013-03-27 22:49:07	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-03-27 22:49:24	<--	system64 (~system64@182.68.68.118) has quit (Remote host closed the connection)
2013-03-27 22:49:25	--	system64_ is now known as system64
2013-03-27 22:49:37	<--	till_t (~till@g230198230.adsl.alicedsl.de) has quit (Quit: Be back later)
2013-03-27 22:49:47	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-03-27 22:49:55	<--	trescenzi (~trescenzi@2620:91:0:163:65d5:3a6f:6843:3827) has quit (Ping timeout: 258 seconds)
2013-03-27 22:49:59	cschneid	why is there both Either and Maybe?  They seem like close cousins.  When should I use one over the other in my code?
2013-03-27 22:50:04	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-27 22:50:06	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 240 seconds)
2013-03-27 22:50:07	-->	Damgaard1 (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-27 22:50:20	-->	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has joined #haskell
2013-03-27 22:50:36	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-27 22:50:43	elliott	cschneid: when there is some information you want to confer along with an absent value/failure, then use Either. otherwise Maybe
2013-03-27 22:50:47	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-27 22:50:47	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-03-27 22:51:15	cschneid	so Nothing is the same as a Left with nothing (except that's not a real type, since left does take an arg)
2013-03-27 22:51:21	--	amatsu\idle is now known as amatsu
2013-03-27 22:51:43	cschneid	so I'm right that they're pretty close.  Is there a way to turn an Either into a Maybe (throw away the error, just tell me if it succeeded)
2013-03-27 22:51:46	elliott	Maybe a and Either () a are isomorphic
2013-03-27 22:51:47	glguy	Either () is isomorphic to Maybe
2013-03-27 22:51:54	cschneid	ahh, sure.
2013-03-27 22:51:56	elliott	cschneid: sure
2013-03-27 22:52:03	elliott	discard (Left _) = Nothing; discard (Right a) = Just a
2013-03-27 22:52:03	elliott	or:
2013-03-27 22:52:06	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-27 22:52:08	elliott	discard = either (const Nothing) Just
2013-03-27 22:52:14	elliott	but in general you rarely have to do this.
2013-03-27 22:52:22	cschneid	what's `const` doing there
2013-03-27 22:52:34	Clint	feels like i've had to do that several tiems
2013-03-27 22:52:41	glguy	const puts the "discard" in discard
2013-03-27 22:52:46	aristid	cschneid: unlike Just, Nothing is not a funciton.
2013-03-27 22:52:50	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-27 22:52:59	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-27 22:53:21	cschneid	ahh, since the first arg to either is a func. But `const x` is the "always return x" function
2013-03-27 22:53:29	cschneid	(had to go look it up)
2013-03-27 22:54:24	cschneid	I've really gotta go read through Prelude...
2013-03-27 22:54:27	cschneid	thanks for the quick answers
2013-03-27 22:55:20	<--	mmm__ (~bark@2001:470:8a52:67:95fc:7327:cfbb:859f) has quit (Quit: Leaving)
2013-03-27 22:55:53	-->	Vicfred (~Futaba@187.206.119.1) has joined #haskell
2013-03-27 22:57:11	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-27 22:58:05	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-27 22:58:26	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-27 23:00:03	<--	augur (~augur@129-2-129-32.wireless.umd.edu) has quit (Remote host closed the connection)
2013-03-27 23:00:08	`nand`	glguy: ignoring bottom
2013-03-27 23:01:04	glguy	That's right, but wouldn't have been helpful in that context
2013-03-27 23:01:18	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-03-27 23:01:53	<--	cognominal (~cognomina@37.161.196.64) has quit (Ping timeout: 240 seconds)
2013-03-27 23:02:11	--	pepijndevos is now known as pepijn_away
2013-03-27 23:02:26	-->	mobileblue (~mobileblu@dslb-094-217-251-105.pools.arcor-ip.net) has joined #haskell
2013-03-27 23:02:53	-->	hungryblank (uid10065@gateway/web/irccloud.com/x-hxjfwocjqmyepbvh) has joined #haskell
2013-03-27 23:04:04	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 272 seconds)
2013-03-27 23:04:06	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-27 23:04:13	-->	augustl (uid10075@gateway/web/irccloud.com/x-dqxxuobcyvyaeuyk) has joined #haskell
2013-03-27 23:05:36	-->	divarvel (~clement@beg-ar-loge.delafargue.name) has joined #haskell
2013-03-27 23:05:56	<--	phischu (~pschuster@dslb-084-063-109-170.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2013-03-27 23:06:06	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-27 23:06:16	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-27 23:06:19	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-27 23:06:48	`nand`	my preferred solution is "more or less isomorphic"
2013-03-27 23:06:54	-->	trescenzi (~trescenzi@2620:91:0:163:4de8:56ec:2d52:18f9) has joined #haskell
2013-03-27 23:06:57	--	clahey is now known as cl_away
2013-03-27 23:07:00	<--	eirikur (~eirikur@46-239-208-19.tal.is) has quit (Remote host closed the connection)
2013-03-27 23:07:46	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-27 23:07:49	-->	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has joined #haskell
2013-03-27 23:08:00	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-27 23:08:02	-->	jedai (~jedai@ADijon-552-1-67-125.w92-138.abo.wanadoo.fr) has joined #haskell
2013-03-27 23:08:32	divarvel	hi, I'm trying to install snap though cabal-install, but clientsession fails to build. Is this a know problem ?
2013-03-27 23:08:34	divarvel	https://raw.github.com/gist/5258524
2013-03-27 23:08:41	-->	cognominal (~cognomina@37.161.196.64) has joined #haskell
2013-03-27 23:09:17	<--	sbowman (~sbowman@ip-64-134-11-16.public.wayport.net) has quit (Remote host closed the connection)
2013-03-27 23:09:41	-->	mightybyte (~mightybyt@199.47.72.128) has joined #haskell
2013-03-27 23:09:46	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 272 seconds)
2013-03-27 23:10:07	mightybyte	divarvel: Try adding --constraint='clientsessien<0.8.1'
2013-03-27 23:10:10	-->	dgpratt (~dpratt71@pool-72-65-100-189.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-27 23:10:27	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-27 23:10:28	mightybyte	Oops, correct the spelling of clientsession
2013-03-27 23:10:39	glguy	I have clientsession-0.8.1 installed with cprng-aes-0.3.4 and crypto-api-0.11
2013-03-27 23:10:50	divarvel	mightybyte: I tried to manually install an older version
2013-03-27 23:10:53	divarvel	mightybyte: same issue
2013-03-27 23:11:00	<--	kuribas (~user@94-227-88-230.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-27 23:11:40	-->	edeast (~chatzilla@24.114.27.50) has joined #haskell
2013-03-27 23:11:43	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-27 23:11:45	cschneid	how far does haskell go to the dream of magic-parallelization of code? I know purely functional code lets you do tricks in compiler to make it just happen, but how far along is the real-world cases of that?
2013-03-27 23:11:50	<--	gbeshers (gbeshers@nat/redhat/x-dbgfztdhldvkuvhc) has quit (Remote host closed the connection)
2013-03-27 23:11:59	mightybyte	divarvel: What version of cprng-aes and crypto-api do you have installed?
2013-03-27 23:12:13	sproingie	cschneid: it basically doesn't at all
2013-03-27 23:12:19	divarvel	glguy: for some reason crypto-api was not installed. I'm installing it
2013-03-27 23:12:30	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Remote host closed the connection)
2013-03-27 23:12:47	sproingie	cschneid: the DPH extension however does do quite a bit, it requires you use special syntax for "parallel arrays" though
2013-03-27 23:12:57	glguy	divarvel: I was guessing that those two packages were related to your problem just based on the module and type names in your error message
2013-03-27 23:13:00	glguy	fyi
2013-03-27 23:13:07	divarvel	mightybyte: I have cprng-aes-0.3.4 crypto-api-0.11
2013-03-27 23:13:12	-->	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-27 23:13:24	<--	mobileblue (~mobileblu@dslb-094-217-251-105.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-27 23:13:25	divarvel	glguy: unfortunately clientsession still fails to build
2013-03-27 23:13:30	<--	SaaMmY-laptop1 (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-27 23:13:31	glguy	What version of GHC is that?
2013-03-27 23:13:54	divarvel	7.6.2
2013-03-27 23:13:55	-->	dacto (~chatzilla@c-24-21-108-89.hsd1.or.comcast.net) has joined #haskell
2013-03-27 23:14:19	glguy	divarvel: and you you have multiple versions of any libraries installed?
2013-03-27 23:14:24	sproingie	cschneid: the problem of optimally figuring out what to automatically parallelize for general purpose code is at least NP-complete if not undecideable.  so the Sufficiently Smart Compiler may remain mythical
2013-03-27 23:14:36	divarvel	glguy: it's a clean cabal-dev sandbox
2013-03-27 23:15:09	cschneid	sproingie: presumably doing it perfectly is really hard, but can't it see maps and that everything under it is pure function, and parallelize that?  I'd imagine there are easy-wins, even if you can't do it optimally
2013-03-27 23:15:13	<--	trescenzi (~trescenzi@2620:91:0:163:4de8:56ec:2d52:18f9) has quit (Ping timeout: 258 seconds)
2013-03-27 23:15:15	`nand`	sproingie: do you know of any code example that will automatically make use of more than one processor thread to a non-negligible extent when compiled using the latest GHC?
2013-03-27 23:15:34	Ralith	sproingie: surely you mean figuring out the *optimal* paralellization
2013-03-27 23:15:36	cschneid	(honest questions - I only have undergrad CS, and only basic compiler knowledge, I may just be dumb here :) )
2013-03-27 23:15:41	sproingie	yes i mean optimal
2013-03-27 23:15:55	mightybyte	divarvel: What's the output of "cabal --version"?
2013-03-27 23:15:56	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-03-27 23:16:02	Ralith	there are plenty of useful suboptimal solutions
2013-03-27 23:16:09	sproingie	"optimal coverage" of anything tends to be NP complete of course
2013-03-27 23:16:14	Ralith	indeed
2013-03-27 23:16:26	napping	cschneid: there are various ways to add a decent amount of parallelism very easily, but nothing really tries to automatically add it
2013-03-27 23:16:31	Ralith	and that's often not as much an obstacle as it sounds
2013-03-27 23:16:40	Ralith	one very rarely actually needs *the* optimal solution
2013-03-27 23:16:42	divarvel	mightybyte: 1.16.0
2013-03-27 23:16:50	--	irc: disconnected from server
2013-03-28 01:58:53	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-28 01:58:53	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-28 01:58:53	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-28 01:58:53	--	Nicks #haskell: [@ChanServ [[zz]] [mth] [swift] \rs ]OLI[ __main__ _anona _boegel_ _br_ _flow_ _janne _yezariaely `0660 `bps_ `micro `nand` aajmakin ab9rf absence acfoltzer acharles Adeon_ adimit Adios adnap adnauseam aesptux AfC aforemny AgentM agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b alios alkabetz alnix alpounet alshain Amadiro amatsu amiller anachron_ anders^^ andrewsw aninhumer AntiSpamMeta apaku apfel Apocalisp araujo arbn aristid arkeet arkx arlinius armlesshobo arnihr__ arun asante10111 astropirate aszlig Athas AtnNn augur augustl Axman6 b52 b_jonas bananagram banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 bens bergey betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld blackmir1oxx BlastHardcheese blooberr BMeph_ BobFunk bobry bogner Boney Boreeas Botje bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen_ bstrie bxc_ byc byorgey ByronJohnson bytbox c_wraith Cale caligula Canar canta canvon cardamon carlocci ccasin ccxCZ cdidd ceii celery__ Cerise certaint1 chance charlesofarrell chatsiri_ chessguy chirpsalot ChongLi Chousuke chr1s chrisbuchholz_ chrisirc_ chrra ciaranm CindyLinz circle cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods cognominal colah comak companion_cube conal conehead confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross crs__ Cryovat cschneid ctype_real cwvh1 cynick cyphase cyril_ d-snp dabradley Damgaard dan_johnsin danharaj danr dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 Derander desc|zenbook dfletcher_ dgpratt DigitalKiwi dilinger_ dixie_ djahandarie djanatyn dju dkasak dlundy dmarker dmwit dockside1 Dodek dolio DolphR domingo_ donri doomlord dottedmag dqd Draconx Draggor drbean DrChaos dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT`` duairc_ dumbhat DustyDin1o Dybber dyreshark eacameron EarlGray earthy ecuderpam edeast edenc_ edwardk edwtjo Eelis eff_ ehamberg Eiam ejls eL_Bart0 electrogeek elgot Eliel elliott elliottc1ble em emmanuelux endojelly Enigmagic ent- Eridius ernst Erstarrung Estrellas etabot ethercrow etrepum EvanR eviltwin_ Excureo exitmouse f8 fabjan faen FalkoPeters fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow Flint floatingman flori flux fmapE folone folone_ formalcow fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly glguy glguy_ Gothmog_ Gracenotes greymalkin gseitz gspr gthorslund guampa guerrilla Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd HaltingState hanDerPeder harrison_ heath Heffalump helgikrs henk hiratara hiredman hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hungryblank hvr hychen hyko IanKelling ibid IbnFirnas Iceland_jack idnar ido idoru Igloo ilyanok imeredith imphasing inr_ int-e integral_ Internet13 ion ique ISF_ec09 isomorphic Itkovian iulian ivan\ ivan` ixian izym Jaak jabirali jackhill jacobw jaimef jamwt JaRoel|4d jaspervdj Jaxan jayne jbauman jcp jdoliner jedai|2 jeff_s1 Jello_Raptor jercos Jesin jesyspa jfischoff jix jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop jonke Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jtalk jtobin juhp julmae julmuri jyyou k00mi k0ral kadoban KaiSforza kakos kallisti kalven kamishimo KaneTW kaol kaoskorobase kcj Ke kennyd kennyp kfish Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels__ kmicu knightshade kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius_ krig kryft kshannon ktosiek Kuba_ kvda kylcarte kyle__ labo lahwran lambdabot LAMMJohn1on Laney latro`a lattenwald lazard LeaChim LeNsTR leroux levi liesen lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb lucca luite Luke lulf lusory lzm m3ga macbr machisuji magicman majoh maksbotan malorie_ mami marienz Martty MasseR mastensg mateu mattp__ mattrepl matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairoi mefisto Megant melter mendez mephx merijn message144 meyersh mgeorgi_ mgsloan miasma Michael__ miclorb midfield mietek mike2 mikecaruso mikeplus64 mikurubeam milli mimi_vx mimico__ mirsal mixi mizu_no_oto mjr841 mjrosenb MK_FG mkouhei mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom moonlite_ morazow mornfall morolin mortberg Mortchek mrd mrdomino_ MrFenix_ mrko mrotondo mrshoe mspells mtlatif mugenken mullein munro mux myme n_b nade Nahra Nanar napping nardul Natch natte neena netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niklasb niko nikola nilg nilg` niloc132 Nimatek ninegrid ninzine Nisstyre nlogax no-n noam noj Noldorin nonymousa noplamodo notdan NougatRillettes nouitfvf Nshag nule numeral nus- nwf obcode_ ocharles ofan oitnelis OlegYch opqdonut ormaaj Ornedan ortmage orzo osfameron osnr othiym23 otterdam otters otto_s ousado ozataman ozataman_ ozgura paddymahoney Paprikachu ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pcl pdxleif_away Peaker peddie peltchu pepijn_away perlite perspectival petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa PHO_ pierian62 pikhq Plex- plhk pnielsen Pods popz_ pqmodn pr predator217 preflex prh prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ QinGW quaestor quicksilver quuxman qwandor qwr qz_ r126l raek RageOfThou raid rainmaker Ralith Raynes Razz rcj_ realnot redjohn reiddraper Reite Rembane rexamophone rfw RichyB rickeyski-k rio ritek Riussi rmunroe robbe- robbert` rofer rossabaker Rotaerk rs0 rsampaio rsimoes rul ryjm s00pcan S11001001 s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi saurik sawjig sbahra scb scgilardi schlaftier schlumpi sclv Scott_firebeta Sculptor SeanTAllen seats SegFaultAX sellout setmeaway2 Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill SHODAN shutdown_-h_now si14 silasm simon___ simpson singla singla_ sipa sirchurchill sjl ski skp skyflash skyflash_ SLi sm-afk smarter so Soft sohum solarus solirc Sonderblade sordina3 Sorella SoupEvil spion Spockz sproingie Squid_Tamer srcerer sShintah staafl Starfire statusfailed steez stelleg_away stepcut stephe- strax_ stvc suiside_ sully sunfun sunnavy supersym supki sw17ch Swizec sysopfb tahu tamiko tanakh tanakh_ Tarential taruti tavelram_ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome tim1 timemage tippenein tkd tlaine tlevine tmiw TML tntc tobiassj1sten toekutr tom4939_ tomaw tomboy64 tomejaguar tomh_ tomku tomprince ToRA Tordek TravisD trescenzi trh178 tridactyla trolling tromp tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey tyler tzxn3 u__ u_quark1 ulfdoz Ulrar_ User_ UziMonkey__ Valodim Varakh vehk verrens Vert Vertue vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq VZakharov wagle walter Walther warpy___ Watcher7 waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon_ whoops wilfredh_ Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki w|t x7 xaimus xcvii xenoxaos xinming XMunkki_ xnyhps Xorlev xorox90 xplat xrl__ xrq xunatai_ xymox Y_Less yam yan_ yano yeltzooo yiannis_1 yriw_ yumike zachk Zariel zebr zeiris_ zenzike_ ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-28 01:58:53	--	Channel #haskell: 987 nicks (1 op, 0 halfops, 0 voices, 986 normals)
2013-03-28 01:58:53	--	URL for #haskell: http://www.haskell.org/
2013-03-28 01:58:55	--	Mode #haskell [+CLcnpt]
2013-03-28 01:58:55	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-28 02:00:03	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-28 02:00:24	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 252 seconds)
2013-03-28 02:00:34	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 246 seconds)
2013-03-28 02:00:35	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-28 02:01:37	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-28 02:01:37	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-28 02:01:40	<--	[mth] (~mth@atp-c1mjv420dty4.dynhost.nicta.com.au) has quit (Ping timeout: 245 seconds)
2013-03-28 02:02:03	--	amatsu is now known as amatsu\idle
2013-03-28 02:03:18	 *	hackagebot diagrams-haddock 0.1.0.1 - Preprocessor for embedding diagrams in Haddock documentation  http://hackage.haskell.org/package/diagrams-haddock-0.1.0.1 (BrentYorgey)
2013-03-28 02:03:48	--	amatsu\idle is now known as amatsu
2013-03-28 02:03:53	<--	trescenzi (~trescenzi@2620:91:0:163:cc44:775b:4b3f:d4d2) has quit (Remote host closed the connection)
2013-03-28 02:05:47	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-28 02:06:29	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Quit: mattrepl)
2013-03-28 02:07:00	<--	ulfdoz (~mary@p5B38AEA8.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-28 02:07:41	-->	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-03-28 02:07:44	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Client Quit)
2013-03-28 02:09:00	<--	edeast (~chatzilla@24.114.27.50) has quit (Ping timeout: 272 seconds)
2013-03-28 02:09:47	--	irc: disconnected from server
2013-03-28 18:41:27	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-28 18:41:27	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-28 18:41:27	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-28 18:41:27	--	Nicks #haskell: [@ChanServ [[zz]] \rs ]OLI[ __main__ _anona _boegel_ _br_ _d3f _flow_ _janne `0660 `^_^v `bps_ `fogus `nand` aajmakin aavogt ab9rf absence acfoltzer acharles aCube Adeon adimit Adios adnap adnauseam aesptux aforemny agr agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut akurei alang alang_ alanz albel727 alcz aleator alejandrogomez alexander__b Alice3 alios alkabetz alnix alpounet alshain alszar Amadiro amathew amatsu amiller anachron anders^^ andrewsw aninhumer AntiSpamMeta apaku_ Apocalisp araujo arbn arenz aristid arkeet arkx arlinius armlesshobo arnihr__ arun asante10111 asQuirreL aszlig_ Athas AtnNn augur Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens_ bd_ Belgarion0 bens bergey betawaffle bezik bgamari Bigcheese BigEndian birkenfeld bishopplox_ bitonic blackmirroxx BlastHardcheese BMeph_ BobFunk bogner Boney Boreeas Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson bytbox cads Cale caligula_ Canar canta canvon cardamon carlocci ccasin ccc ccxCZ ceii celery__ Cerise certaint1 cfricke chance chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay clahey ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods colah collin_ comak companion_cube conal conehead confound connelly coppro copumpkin corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross cryon Cryovat cschneid ctype_real cwraith cwvh1 cynick cyphase cyril_ d-snp dabradley Damgaard dan_johnsin danr dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander descender dfletcher_ dgpratt dgvncsz0f DigitalKiwi dilinger_ djahandarie djanatyn djcoin dju dkasak dlundy dmarker DMcGill dmwit_ dnolen dockside1 Dodek dogmaT dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean DrChaos dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe dskippy DT` duairc_ dumbhat DustyDingo Dybber dyreshark eacameron EarlGray earthy ecuderpam edenc edsko Eduard_Munteanu edwardk edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 electrogeek elgot Eliel_ elliott elliottc1ble em end3rW endojelly Enigmagic ent- Eridius erkin ernst Erstarrung Esa_ Estrellas etabot ethercrow etrepum EvanR eviltwin_ Excureo exFalso1 f8 fabjan faen fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow Flame_Alchemist Flint floatingman flori flux fmapE Fnar folone folone__ formalcow fotc fragamus freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gadjo gbarboza gbeshers gbluma gcmalloc_ gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly glguy glguy_ Gothmog_ Gracenotes greymalkin gseitz gspr gthorslund guampa guerrill1 Guest58551 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd HalfWayMan HaltingState hamishmack hanDerPeder harrison heath Heero` Heffalump helgikrs henk hiratara hiredman hiroyuki2 hive-mind hiyakashi horlicks hpaste hpc hpd HugoDaniel hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar ido idoru Igloo ilyanok imeredith imphasing inr_ int-e integral_ Internet13 ion ique isomorphic Itkovian iulian ivan\ ivan` ixian izym Jaak jabirali jackhill jacksmithz jacobw jaimef jamwt jao jaspervdj Jaxan jayne jbauman_ jcp jdoliner Jeanne-Kamikaze jedai|2 jeff_s1 Jello_Raptor jercos Jesin jesyspa jix_ jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtobin juliohm julmac julmae junsuijin jyyou k00mi_ k0ral kadoban Kaidelong KaiSforza kakos kallisti kalven kamatsu KaneTW kaol kaoskorobase Ke kennyd kennyp kerrick ketil kevinqcs Khisanth khismetix kini Kinnison KitB_ kith kkris kloeri klugez kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba_ kushal kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard lcfrs LeaChim lennart_ lenstr leoncamel leroux Lethalman levi` lightquake linduxed Liskni_si lispy liszt liyang LK4D4 lokydor_ lopex lpsmith lpvb luisgabriel luite Luke lulf lusory lzm m3ga machisuji magicman majoh maksbotan malorie_ mami marienz Martty Masse^^ mastensg mateu mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mcstar mechairoi mefisto` Megant melter mendez mephx merijn message144 meyersh mgile mgsloan miasma mietek mike2 mikecaruso mikeplus64 mikurubeam milessabin milli mimi_vx mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 MnO2 MoALTz mokus mollerstrand monique_ monochrom mononofu moonlite_ morazow mornfall morolin mortberg Mortchek mr- mrd mrdomino_ MrFenix mrkotfw mrotondo mrshoe mspells mtlatif mullein munro mux myme N4sh_ n_b nade Nahra Nanar nardul Natch natechan natte neena netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niko nikola nilg` niloc132 Nimatek nimish ninegrid ninzine Nisstyre nlogax no-n noam noj Noldorin nonymousa nooodl noplamodo normanrichards not_tommy notdan NougatRillettes nouitfvf Nshag nule_ numeral nus nwf obcode_ ocharles ofan oitnelis Okasu opqdonut ormaaj Ornedan ortmage orzo osa1 osfameron osnr othiym23 otterdam otters otto_s_ ousado owst ozataman ozataman_ ozgura paddymahoney paintcan Pantoufle ParahSail1n ParahSailin parcs PartyKat1e pcapriotti pcl pdxleif Peaker peddie peltchu pepijn_away perlite permagreen petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa PHO_ pierian62 pikhq plhk plucas pmade pnielsen Pocket popz pqmodn pr Pranz predator217 preflex prh prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ q66 quaestor quchen quicksilver quuxman_ qwandor qwr qz_ r126l raek RageOfThou raid rainmaker Ralith Rants Raynes Razz rcj_ redjohn reiddraper Reite Rembane resnik_ rexamophone rfw RichyB rickeyski-k rio Riussi rmunroe robbe- robbert rofer rossabaker rs0 rsampaio rsimoes rul ryanakca s00pcan S11001001 s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi saurik sawjig sbahra scgilardi schellsan schlumpi sclv Scott_firebeta Sculptor seats SegFaultAX seliopou sellout sepp2k1 setmeaway2 Sgeo sgronblo_ sh shachaf_ shanse Shapeshifter shepheb shergill shintah SHODAN shutdown_-h_now si14 silver simon___ simpson sipa Siphonblast sirchurchill sjl ski skp skyflash skyflash_ sleepynate SLi sm smarter__ snowylike snoyberg so Soft sohum solarus solirc Sonarpulse sonda Sonderblade sordina3 SoupEvil spion Spockz sproingie Squid_Tamer srcerer staafl Starfire stat_vi statusfailed steez stelleg stepcut stephe stvc suiside_ sully sunfun sunnavy supersym supki Swizec sysopfb tac-lunch tahu tamiko tanakh tanakh_ Taneb Tarential Targen taruti taterbase tavelram__ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh Thomyho3 thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome till_t tim1 timemage tippenein tkd tlaine tlevine TML tntc tobiassjosten tom4939_ tomaw tomejaguar tomh_ tomku tommd tomprince ToRA Tordek trevize trh178 tridactyla trolling tromp_ tsinnema tsou tswett_ ttuegel_ tunixman tuv tvaalen Twey tyler tzxn3 u__ u_quark ulfdoz Ulrar_ uniquenick urm3l User_ UziMonkey__ v__ Valodim Varakh vehk verrens Vert vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq vramana VZakharov wagle walter Walther Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wi Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii Xenplex xinming XMunkki_ xnyhps Xorlev xorox90 xplat xrl__ xrq xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yriw yumike zachk Zariel zebr Zedrikov zeiris zenzike_ zhulikas ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-28 18:41:27	--	Channel #haskell: 1019 nicks (1 op, 0 halfops, 0 voices, 1018 normals)
2013-03-28 18:41:28	--	URL for #haskell: http://www.haskell.org/
2013-03-28 18:41:29	--	Mode #haskell [+CLcnpt]
2013-03-28 18:41:29	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-28 18:42:02	johnw	mcstar: that makes #haskell pretty quiet, no?
2013-03-28 18:42:05	-->	ben_d (~muus@c-71-236-155-211.hsd1.or.comcast.net) has joined #haskell
2013-03-28 18:42:05	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-28 18:42:07	-->	js__ (~quassel@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-28 18:42:13	mcstar	yes, i like that
2013-03-28 18:42:30	-->	niklasb (~codeslay0@p5B31011D.dip0.t-ipconnect.de) has joined #haskell
2013-03-28 18:42:36	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 18:42:52	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-03-28 18:43:35	<--	folone (~folone@91.102.12.198) has quit (Quit: Leaving)
2013-03-28 18:43:36	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-28 18:43:36	<--	cyril_ (cyril@nat/intel/x-kdeomvfpthpwyqsx) has quit (Ping timeout: 256 seconds)
2013-03-28 18:43:44	-->	idntfy (~idntfy@5.187.83.186) has joined #haskell
2013-03-28 18:44:12	-->	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has joined #haskell
2013-03-28 18:44:31	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-28 18:45:19	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 18:46:51	-->	chatsiri_ (~chatsiri_@171.7.150.203) has joined #haskell
2013-03-28 18:47:18	--	smarter__ is now known as smarter
2013-03-28 18:47:23	-->	eyck (~eyck@nat08.nowanet.pl) has joined #haskell
2013-03-28 18:47:43	-->	midfield (~user@70-36-157-176.static.sonic.net) has joined #haskell
2013-03-28 18:47:50	<--	_boegel_ (~boegel@109.130.150.33) has quit (Quit: Leaving)
2013-03-28 18:48:04	-->	sw17ch (uid10745@gateway/web/irccloud.com/x-vvzpbjkauqnuembv) has joined #haskell
2013-03-28 18:48:06	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-28 18:48:26	-->	augustl (uid10075@gateway/web/irccloud.com/x-gldvgfmcheteifbm) has joined #haskell
2013-03-28 18:48:29	<--	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-28 18:48:31	quchen	"ReaderT r IO" is safe to use with IORefs, right? Or am I in for some unexpected results
2013-03-28 18:48:38	ChongLi	hmm, rust seems like an interesting language
2013-03-28 18:48:47	-->	warpy___ (uid1398@gateway/web/irccloud.com/x-iefytqunhisrhbnp) has joined #haskell
2013-03-28 18:49:07	byorgey	quchen: should be fine.
2013-03-28 18:49:22	<--	rsampaio (~rodrigo@186.202.80.205) has quit (Ping timeout: 256 seconds)
2013-03-28 18:49:28	donri	quchen: safe how? unsafe how?
2013-03-28 18:49:48	quchen	donri: Switching the order etc
2013-03-28 18:50:00	quchen	(Single process only, don't worry)
2013-03-28 18:50:06	-->	trescenzi (~trescenzi@ool-4578705e.dyn.optonline.net) has joined #haskell
2013-03-28 18:50:20	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-03-28 18:50:43	donri	quchen: don't follow
2013-03-28 18:50:47	Ralith	what's the syntax for having both a pattern guard and a boolean guard on the same branch?
2013-03-28 18:51:01	Ralith	with the latter having the variables introduced by the former in scope
2013-03-28 18:51:05	-->	wilfredh (uid159@gateway/web/irccloud.com/x-oexkzklopekfdisg) has joined #haskell
2013-03-28 18:51:26	newsham	f (Just x) | x < 25 = x * 2      ?
2013-03-28 18:51:27	-->	charlesofarrell (uid7413@gateway/web/irccloud.com/x-lppbrozgasaahrzq) has joined #haskell
2013-03-28 18:51:29	quchen	Ralith: I'm not sure I understand the problem. Do you mean "f (x:xs) | x > 0 = "
2013-03-28 18:51:32	quchen	?
2013-03-28 18:51:33	liyang	quchen: ReaderT r IO a ≅ r → IO a , so we're not sure what you'd mean by 'unsafe'...
2013-03-28 18:51:35	quchen	Yeah that should work
2013-03-28 18:51:40	-->	bobry (uid4445@gateway/web/irccloud.com/x-ibdvzwttbokgbdlu) has joined #haskell
2013-03-28 18:51:42	byorgey	quchen: well it certainly can't switch the order of reads and writes to the IORef.  And even if it did switch the order of IORef operations and reads from the reader environment (which it won't), it wouldn't matter.
2013-03-28 18:51:50	byorgey	because the reader environment is constant.
2013-03-28 18:52:04	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 245 seconds)
2013-03-28 18:52:09	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-28 18:52:16	-->	Vertue (uid10621@gateway/web/irccloud.com/x-vnjoyhcgwqtatzun) has joined #haskell
2013-03-28 18:52:28	Ralith	quchen: I want 'f x y | Just z <- foo x, y == z ='
2013-03-28 18:52:31	quchen	byorgey: Not if the reader environment is an IORef though ..?
2013-03-28 18:52:35	Ralith	except , is probably wrong
2013-03-28 18:52:47	quchen	Ralith: "Pattern guards"
2013-03-28 18:52:53	byorgey	quchen: it's still constant.  It's always the same IORef.
2013-03-28 18:53:03	quchen	Ralith: http://www.haskell.org/haskellwiki/Pattern_guard
2013-03-28 18:53:03	Ralith	quchen: yes, I am using pattern guards
2013-03-28 18:53:07	liyang	quchen: you mean ReaderT (IORef r) IO ?
2013-03-28 18:53:14	Ralith	quchen: the question is how to combine those with a boolean guard
2013-03-28 18:53:23	Ralith	looks like , was correct though
2013-03-28 18:53:26	Ralith	yay vague memory
2013-03-28 18:53:27	quchen	liyang: Something like that, yes
2013-03-28 18:53:32	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 258 seconds)
2013-03-28 18:54:03	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-28 18:54:09	liyang	quchen: you'd still need to do IO to get the r out of the IORef. That's no different than juggling two IORefs...
2013-03-28 18:54:16	byorgey	quchen: sure, that will work just fine.  The whole point is that it's impossible to use IORefs in a way that is unsafe.
2013-03-28 18:54:25	byorgey	aside from the usual "unsafe"ness of mutable state.
2013-03-28 18:54:45	<--	trescenzi (~trescenzi@ool-4578705e.dyn.optonline.net) has quit (Ping timeout: 256 seconds)
2013-03-28 18:54:55	donri	the reader just gives you access to the ioref, not the value contained in it (not without reading it like normal)
2013-03-28 18:55:14	quchen	Right
2013-03-28 18:55:32	Ralith	quchen: (you can tell because I said 'pattern guard' in my question :p)
2013-03-28 18:55:45	quchen	Yeah I guess the question was pretty pointless then. But I wanted to be sure it's a solution for my problem before I rewrote all the code
2013-03-28 18:55:57	quchen	Now that I think of it maybe I should replace the IORef with a State anyway
2013-03-28 18:56:04	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-28 18:56:06	quchen	Oh well, thanks to all of you
2013-03-28 18:56:08	quchen	Ralith: Woops
2013-03-28 18:56:44	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-03-28 18:57:26	donri	instance MonadState (Reader IORef)  yay!
2013-03-28 18:57:43	quchen	donri: Pfff
2013-03-28 18:57:52	<--	N4sh_ (~N4sh_@unaffiliated/saadtalaat) has quit (Ping timeout: 256 seconds)
2013-03-28 18:57:56	byorgey	kind error
2013-03-28 18:58:05	donri	pseudo code
2013-03-28 18:58:10	-->	black_joe (~Norton@pool-72-73-249-210.cmdnnj.east.verizon.net) has joined #haskell
2013-03-28 18:58:24	quchen	I'm relying on IORefs right now without a reader. I can now add something convenient with Reader. That's how I came up with the idea.
2013-03-28 18:58:35	-->	gh__ (c810100d@gateway/web/freenode/ip.200.16.16.13) has joined #haskell
2013-03-28 18:58:43	 *	hackagebot reflection 1.2.0.1 - Reifies arbitrary terms into types that can be reflected back into terms  http://hackage.haskell.org/package/reflection-1.2.0.1 (EdwardKmett)
2013-03-28 18:59:15	-->	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has joined #haskell
2013-03-28 18:59:31	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 18:59:34	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-28 18:59:44	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-28 19:00:06	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 19:00:08	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-28 19:00:32	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-28 19:00:39	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 19:00:42	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-28 19:00:58	--	dmwit_ is now known as dmwit
2013-03-28 19:02:14	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-28 19:02:34	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-28 19:03:07	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-03-28 19:03:43	 *	hackagebot profunctors 3.3.0.1 - Haskell 98 Profunctors  http://hackage.haskell.org/package/profunctors-3.3.0.1 (EdwardKmett)
2013-03-28 19:04:25	-->	mdhopkins (~mdhopkins@c-98-213-135-108.hsd1.il.comcast.net) has joined #haskell
2013-03-28 19:04:47	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-28 19:05:46	dmwit	donri: I've wondered several times why there wasn't a library with that in it. Same for s/IORef/MVar/
2013-03-28 19:05:47	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 19:05:52	<--	Thomyho3 (~thomyho@mnhm-4d012b63.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-28 19:06:20	-->	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has joined #haskell
2013-03-28 19:06:30	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-28 19:06:52	donri	dmwit: isn't it kinda pointless if you use only the state api, and illegal if you don't?
2013-03-28 19:07:18	<--	dskippy (~mmachenry@67.208.185.2) has quit (Quit: Leaving.)
2013-03-28 19:07:24	dmwit	No.
2013-03-28 19:07:38	dmwit	What if I want to write my Gtk callbacks as if they had access to a shared state?
2013-03-28 19:07:49	dmwit	(For example.)
2013-03-28 19:08:43	donri	but is it really a legal state monad if you writeIORef outside a state computation?
2013-03-28 19:08:49	<--	cwraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2013-03-28 19:09:14	--	u__ is now known as u_
2013-03-28 19:09:16	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-03-28 19:09:24	dmwit	I'm confused. Maybe I don't understand the question yet.
2013-03-28 19:09:28	glguy_	instance MonadState (Reader IORef), perhaps this is closer to: instance MonadIO m => MonadState a (ReaderT (IORef a) m) ?
2013-03-28 19:09:53	dmwit	glguy_: Yes, something like that.
2013-03-28 19:09:56	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 19:10:14	donri	yeah that's what i meant with my lazy pseudo code :)
2013-03-28 19:10:25	-->	dskippy (~mmachenry@67.208.185.2) has joined #haskell
2013-03-28 19:10:46	donri	dmwit: i admit i don't actually know if there are such laws for the state monad... it just "feels" wrong :D
2013-03-28 19:11:00	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 264 seconds)
2013-03-28 19:11:02	donri	i'd expect if i "put" something, I "get" the same thing back
2013-03-28 19:11:08	dmwit	ah
2013-03-28 19:11:09	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-28 19:11:15	donri	but if you writeIORef from the outside that doesn't work any more
2013-03-28 19:11:37	dmwit	Even so, this law would be satisfied assuming there was only one thread (as there usually is in simple gtk apps).
2013-03-28 19:11:38	 *	glguy_ suspects that the laws for MonadState are that they satisfy the type signature
2013-03-28 19:12:02	edwardk	glguy_: i would disagree
2013-03-28 19:12:10	edwardk	the you get back what you put is pretty fundamental to state
2013-03-28 19:12:15	glguy_	Great, let's document this
2013-03-28 19:12:23	glguy_	and add it to the class
2013-03-28 19:12:33	edwardk	its the same general set of laws as for store
2013-03-28 19:12:54	<--	Ralith (~ralith@d142-058-057-140.wireless.sfu.ca) has quit (Ping timeout: 256 seconds)
2013-03-28 19:12:54	edwardk	all existing instances comply with the common sense laws
2013-03-28 19:13:04	-->	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has joined #haskell
2013-03-28 19:13:06	glguy_	It's no good to have laws if they only exist in IRC logs
2013-03-28 19:13:28	<--	UziMonkey__ (uid184@gateway/web/irccloud.com/x-pjmqynvekcdzlgcu) has quit (Ping timeout: 258 seconds)
2013-03-28 19:13:31	monochrom	some laws don't even exist in IRC logs :)
2013-03-28 19:13:36	dmwit	edwardk: But I want my MonadState s (ReaderT (MVar s) m) instance. =(
2013-03-28 19:13:51	<--	jodaro (uid5995@gateway/web/irccloud.com/x-prhjoaoehrrkitxa) has quit (Ping timeout: 258 seconds)
2013-03-28 19:14:02	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-28 19:14:05	-->	snhmib (~jurjen@AOrleans-251-1-43-154.w90-20.abo.wanadoo.fr) has joined #haskell
2013-03-28 19:14:16	<--	IbnFirnas (uid6178@gateway/web/irccloud.com/x-vwmfzkytfhzeywic) has quit (Ping timeout: 252 seconds)
2013-03-28 19:14:18	<--	DarkLinkXXXX (uid10912@gateway/web/irccloud.com/x-mmcfacmztjiqreda) has quit (Ping timeout: 256 seconds)
2013-03-28 19:14:53	glguy_	and if we don't add them to the actual documentation they are just "good ideas"
2013-03-28 19:15:24	<--	lopex (uid4272@gateway/web/irccloud.com/x-nskrgvhctbhbapth) has quit (Ping timeout: 245 seconds)
2013-03-28 19:15:32	edwardk	i'm surprised they aren't in the docs actually
2013-03-28 19:15:44	liyang	:r
2013-03-28 19:15:46	<--	rexamophone (uid4239@gateway/web/irccloud.com/x-wsdfqkcplmtcjdvg) has quit (Ping timeout: 258 seconds)
2013-03-28 19:15:46	<--	puzza007_ (uid127@gateway/web/irccloud.com/x-qyuazamtzvqxqugi) has quit (Ping timeout: 258 seconds)
2013-03-28 19:15:59	glguy_	http://hackage.haskell.org/packages/archive/mtl/2.1.2/doc/html/Control-Monad-State-Lazy.html
2013-03-28 19:16:13	edwardk	yeah
2013-03-28 19:16:17	edwardk	i believe that they aren't there
2013-03-28 19:16:22	edwardk	adding an issue to remind myself to create them
2013-03-28 19:16:24	<--	sw17ch (uid10745@gateway/web/irccloud.com/x-vvzpbjkauqnuembv) has quit (Ping timeout: 264 seconds)
2013-03-28 19:16:27	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-28 19:16:33	glguy_	I would have believed they were somewhere else is why I pasted that
2013-03-28 19:16:40	<--	si14 (uid2619@gateway/web/irccloud.com/x-zotcmhtuhvfuayci) has quit (Ping timeout: 245 seconds)
2013-03-28 19:16:44	glguy_	just saying that link was why I thought they weren't laws
2013-03-28 19:17:08	<--	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 19:17:09	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-28 19:17:15	edwardk	https://github.com/ekmett/mtl/issues/5
2013-03-28 19:17:19	<--	wilfredh (uid159@gateway/web/irccloud.com/x-oexkzklopekfdisg) has quit (Ping timeout: 264 seconds)
2013-03-28 19:17:41	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-yngntzciwogbctiw) has quit (Ping timeout: 252 seconds)
2013-03-28 19:17:57	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 19:18:07	hpaste	liyang pasted “MonadState r (ReaderT (IORef r) m)” at http://hpaste.org/84769
2013-03-28 19:18:14	alexander__b	findIndices (`elem` ['A'..'Z']) "Find the Caps!" -- how do I need to structure this code to use elem without infix?
2013-03-28 19:18:25	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-03-28 19:18:27	<--	xrl__ (uid1091@gateway/web/irccloud.com/x-wskpdswxuafyosmj) has quit (Ping timeout: 258 seconds)
2013-03-28 19:18:45	<--	mtlatif (uid10708@gateway/web/irccloud.com/x-qeduajcwabcvegxz) has quit (Ping timeout: 248 seconds)
2013-03-28 19:18:53	<--	PrO_OkI (uid4868@gateway/web/irccloud.com/x-eqwslasrzwuvrstc) has quit (Ping timeout: 240 seconds)
2013-03-28 19:18:54	byorgey	alexander__b: you could write  (\c -> elem c ['A'..'Z'])
2013-03-28 19:19:07	<--	bobry (uid4445@gateway/web/irccloud.com/x-ibdvzwttbokgbdlu) has quit (Ping timeout: 264 seconds)
2013-03-28 19:19:08	byorgey	or  (flip elem ['A'..'Z'])
2013-03-28 19:19:09	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-28 19:19:13	<--	arnihr__ (uid1395@gateway/web/irccloud.com/x-qzttomihuyeeiupg) has quit (Ping timeout: 258 seconds)
2013-03-28 19:19:17	<--	Siphonblast (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 248 seconds)
2013-03-28 19:19:19	edwardk	fwiw: when i can convince myself nobody else will edit my IORef but me, i've been known to make state-like monads out of things build on IO with an IORef
2013-03-28 19:19:20	<--	akahn (uid2243@gateway/web/irccloud.com/x-antgpwotwyzmohaj) has quit (Ping timeout: 252 seconds)
2013-03-28 19:19:28	alexander__b	byorgey: ah. thanks.
2013-03-28 19:19:31	edwardk	but not to put that horrible flexible instance in ;)
2013-03-28 19:19:31	<--	mononofu (~mononofu@chello062178010088.4.11.vie.surfer.at) has quit (Quit: Leaving)
2013-03-28 19:19:33	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Remote host closed the connection)
2013-03-28 19:19:35	--	aszlig_ is now known as aszlig
2013-03-28 19:19:41	<--	Vertue (uid10621@gateway/web/irccloud.com/x-vnjoyhcgwqtatzun) has quit (Ping timeout: 255 seconds)
2013-03-28 19:19:54	-->	standerp (~ssh@sex.is.better.on.wonderfulplanet.net) has joined #haskell
2013-03-28 19:20:00	<--	augustl (uid10075@gateway/web/irccloud.com/x-gldvgfmcheteifbm) has quit (Ping timeout: 264 seconds)
2013-03-28 19:20:03	-->	t7 (522d57e8@gateway/web/freenode/ip.82.45.87.232) has joined #haskell
2013-03-28 19:20:05	donri	edwardk: but is it even useful if you can't really use it as an ioref anyway?
2013-03-28 19:20:11	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 19:20:12	merijn	I've been known to gleefully abuse "unsafePerformIO $ newMVar" at the top level, because I <3 state :p
2013-03-28 19:20:17	donri	is there a performance gain or something
2013-03-28 19:20:18	monochrom	I recommend http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.90.2560 for laws for MonadState etc. it states what you're already stating sure; my point is how to do it formally
2013-03-28 19:20:25	<--	etrepum (uid763@gateway/web/irccloud.com/x-rqguzkbsjcpcbatt) has quit (Ping timeout: 245 seconds)
2013-03-28 19:20:28	edwardk	donri: it can make a big performance difference
2013-03-28 19:20:32	edwardk	because you aren't constantly tupling
2013-03-28 19:20:33	donri	aha
2013-03-28 19:20:54	-->	tribeca (~3beca@cpe-72-225-186-138.nyc.res.rr.com) has joined #haskell
2013-03-28 19:20:57	monochrom	of course, you could say, you don't want to do it formally
2013-03-28 19:20:59	-->	Itkovian (~Itkovian@188.189.64.247) has joined #haskell
2013-03-28 19:21:04	edwardk	IORef b -> IO a     doesn't require you to keep making up and tearing down tuples
2013-03-28 19:21:06	donri	tight tupling is the performance version of tight coupling?
2013-03-28 19:21:08	<--	tomh_ (uid501@gateway/web/irccloud.com/x-huzedbhdunaomggt) has quit (Ping timeout: 258 seconds)
2013-03-28 19:21:23	<--	charlesofarrell (uid7413@gateway/web/irccloud.com/x-lppbrozgasaahrzq) has quit (Ping timeout: 256 seconds)
2013-03-28 19:21:27	luite	it does make (# #) tuples all the time though ;)
2013-03-28 19:21:27	-->	N4sh_ (~N4sh_@197.195.72.15) has joined #haskell
2013-03-28 19:21:52	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-28 19:22:31	edwardk	monochrom: I added those to the ticket
2013-03-28 19:22:46	edwardk	monochrom: they match what i'd expect
2013-03-28 19:22:54	donri	perhaps then we should have a package with a newtype for this with the constructor private
2013-03-28 19:22:55	monochrom	neato
2013-03-28 19:23:05	-->	pyx (~pyx@d24-141-100-35.home.cgocable.net) has joined #haskell
2013-03-28 19:23:15	edwardk	luite: yeah but those are all but free =P
2013-03-28 19:23:46	<--	pyx (~pyx@d24-141-100-35.home.cgocable.net) has quit (Client Quit)
2013-03-28 19:23:47	<--	standerp (~ssh@sex.is.better.on.wonderfulplanet.net) has left #haskell
2013-03-28 19:24:09	<--	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has left #haskell
2013-03-28 19:24:12	<--	Xorlev (uid226@gateway/web/irccloud.com/x-qrshsaxijymzghsw) has quit (Ping timeout: 264 seconds)
2013-03-28 19:24:45	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-28 19:24:47	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-28 19:24:55	alexander__b	zipWith3 (\x y z -> x + y + z) [1..3] [4..6] [7..9] -- is this possible to rewrite similar to sum' = foldr (+) 0 ?
2013-03-28 19:25:01	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-03-28 19:25:03	donri	if the ioref is hidden we could even unsafePerformIO safely?
2013-03-28 19:25:31	donri	or not? concurrency? :x
2013-03-28 19:25:55	liyang	donri: there's no guarantee that the underlying monad (assuming you're writing an IOStateT) runs things in sequence.
2013-03-28 19:26:10	donri	ah right
2013-03-28 19:26:18	dmwit	alexander__b: yep:
2013-03-28 19:26:28	dmwit	> map sum . transpose $ [[1..3], [4..6], [7..9]]
2013-03-28 19:26:30	lambdabot	  [12,15,18]
2013-03-28 19:26:47	alexander__b	dmwit: well... yes
2013-03-28 19:26:55	alexander__b	dmwit: but I meant more in general
2013-03-28 19:27:12	dmwit	The answer is still yes, but it's also: Oleg did it.
2013-03-28 19:27:28	donri	@faq Can Oleg do it?
2013-03-28 19:27:29	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-28 19:27:35	dmwit	http://www.okmij.org/ftp/Haskell/zip-folds.lhs
2013-03-28 19:27:39	dmwit	I think
2013-03-28 19:27:48	<--	warpy___ (uid1398@gateway/web/irccloud.com/x-iefytqunhisrhbnp) has quit (Ping timeout: 264 seconds)
2013-03-28 19:27:48	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-28 19:29:04	ab9rf	oleg == haskell?
2013-03-28 19:29:31	-->	dylukes (~dylukes@c-98-236-69-114.hsd1.pa.comcast.net) has joined #haskell
2013-03-28 19:29:35	dmwit	affirmative, Oleg == Haskell
2013-03-28 19:29:38	-->	cyril_ (~cyril@79.140.209.79) has joined #haskell
2013-03-28 19:29:48	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-28 19:29:56	ab9rf	excellent
2013-03-28 19:30:00	donri	Iso' Oleg Haskell
2013-03-28 19:30:03	<--	gh__ (c810100d@gateway/web/freenode/ip.200.16.16.13) has quit (Ping timeout: 245 seconds)
2013-03-28 19:30:25	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-28 19:30:34	<--	casucci (~zeke@unaffiliated/casucci) has quit (Quit: Lost terminal)
2013-03-28 19:31:03	johnw	hmm.. but Should Oleg do it?
2013-03-28 19:31:17	<--	tribeca (~3beca@cpe-72-225-186-138.nyc.res.rr.com) has left #haskell
2013-03-28 19:31:22	<--	till_t (~till@g231176230.adsl.alicedsl.de) has quit (Quit: Leaving...)
2013-03-28 19:31:41	-->	timjb (~timjb@ppp-188-174-169-47.dynamic.mnet-online.de) has joined #haskell
2013-03-28 19:31:41	<--	khismetix (~textual@178.167.177.143.threembb.ie) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-28 19:31:44	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-28 19:32:05	<--	akraut (uid3423@gateway/web/irccloud.com/x-cbwjwkjjjntptnqa) has quit (Ping timeout: 248 seconds)
2013-03-28 19:32:44	<--	dskippy (~mmachenry@67.208.185.2) has quit (Quit: Leaving.)
2013-03-28 19:33:18	-->	charlesofarrell (uid7413@gateway/web/irccloud.com/x-xpnxiabvvawgijql) has joined #haskell
2013-03-28 19:33:19	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Remote host closed the connection)
2013-03-28 19:33:31	mami	just having a discussion with a friend
2013-03-28 19:33:54	mami	his feeling is, that if you write good, well reviewed c code you can get it to be more secure than haskell
2013-03-28 19:34:12	ChongLi	mami: that's pretty silly
2013-03-28 19:34:12	mami	because with haskell you are just trusting the compiler to do the magic right
2013-03-28 19:34:19	sproingie	ahahaha
2013-03-28 19:34:27	sproingie	he's audited his C compiler line by line has he?
2013-03-28 19:34:29	mami	what is to say about the security review status compared to e.g. gcc?
2013-03-28 19:34:37	Taneb	Good, well reviewed C code will almost certainly be better than sloppy Haskell
2013-03-28 19:34:44	sproingie	you could argue with him, but what's the point?
2013-03-28 19:34:45	mami	sproingie: nope, but gcc has a much wider userbase
2013-03-28 19:34:51	edwardk	@remember dolio If you roll it back, though, you'll be the only person to ever use liftM7.
2013-03-28 19:34:52	lambdabot	I will never forget.
2013-03-28 19:34:59	<--	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 256 seconds)
2013-03-28 19:35:21	mami	Taneb: well, lets say we have good, well reviewed c and good well reviewed haskell
2013-03-28 19:35:41	mami	we have a much bigger complexity in the compiler with haskell, but more complexity in the code with c
2013-03-28 19:35:55	alexander__b	dmwit: gcc is pretty complex, man
2013-03-28 19:35:55	mami	it probably does not much matter in the end?
2013-03-28 19:36:01	ChongLi	GHC is more complex than GCC?
2013-03-28 19:36:02	sproingie	watch for the moving goalposts on "good, well reviewed"
2013-03-28 19:36:06	-->	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has joined #haskell
2013-03-28 19:36:07	alexander__b	sorry not dmwit. IDK how that got tab completed. :-)
2013-03-28 19:36:08	dmwit	alexander__b: Why are you telling me?
2013-03-28 19:36:09	ChongLi	that's news to me
2013-03-28 19:36:13	dmwit	ok =)
2013-03-28 19:36:13	mami	ChongLi: idk
2013-03-28 19:36:14	gspr	If I have a function that really needs Data.Vector.Storable.Vector, is it customary to provide an interface for any Data.Vector.Generic.Vector? Moreover, is convert :: (Vector v a, Vector w a) => v a -> w a   a no-op when v = w?
2013-03-28 19:36:17	mami	its just a gut feeling
2013-03-28 19:36:24	mami	did anyone ever research this?
2013-03-28 19:36:27	alexander__b	mami: I would guess it's the opposite
2013-03-28 19:36:32	edwardk	mami: arguably the compiler is the better place to concentrate the complications, because it can then get more eyeballs and more scenarios tested.
2013-03-28 19:36:38	ChongLi	GHC is written in Haskell
2013-03-28 19:36:43	ChongLi	making it easier to verify :)
2013-03-28 19:36:57	dmwit	What is this "testing" nonsense? Use CompCert and be done with that. ;-)
2013-03-28 19:37:00	mami	what was used to compile the first ghc?
2013-03-28 19:37:07	edwardk	mami: libraries written in languages with poor guarantees are great places for all sorts of crap code and bugs to hide. fewer eyeballs.
2013-03-28 19:37:08	sproingie	ghc of course
2013-03-28 19:37:10	monochrom	you need to see this regarding gcc: https://plus.google.com/102208456519922110915/posts/DZsZ6mvA4T6
2013-03-28 19:37:12	mami	reflections on trusting trust an such
2013-03-28 19:37:13	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-28 19:37:16	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-03-28 19:37:20	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-28 19:37:37	dmwit	mami: I wonder, has your friend heard of the Underhanded C Contest?
2013-03-28 19:37:38	-->	knightshade (~knightsha@p548CEEC1.dip.t-dialin.net) has joined #haskell
2013-03-28 19:37:41	dmwit	(Have you?)
2013-03-28 19:38:06	edwardk	mami: if you go back far enough for first working haskell compiler was written in LML by Lennart Augustsson.. the same guy who designed LML ;)
2013-03-28 19:38:08	ChongLi	or the ioccc
2013-03-28 19:38:09	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-28 19:38:10	ChongLi	I love that one
2013-03-28 19:38:23	dmwit	IOCCC is irrelevant because the winners are code that was never designed to pass inspection.
2013-03-28 19:38:34	ChongLi	http://www.ioccc.org/2012/deckmyn/deckmyn.c
2013-03-28 19:38:38	dmwit	UCC is devastating because the code is all transparent, well-written C that *does the wrong thing*.
2013-03-28 19:38:46	orzo	hi
2013-03-28 19:38:51	ChongLi	get your friend to do a security audit on that!
2013-03-28 19:38:59	edwardk	Now, it wouldn't surprise me to find out that Lennart stacked some hack in the earliest haskell compiler just to screw with us. He _has_ won the IOCCC at least 2-3 times and it'd be quite the coup.
2013-03-28 19:39:01	edwardk	=)
2013-03-28 19:39:08	orzo	I want to get some help working out an algorithm, is there a good irc channel for that?
2013-03-28 19:39:49	dockside1	You say that like it is an achievement
2013-03-28 19:39:49	dolio	'C can be better/safer/etc. than Haskell if you have an unlimited budget of time and money to spend on the C, and not on the Haskell.'
2013-03-28 19:39:49	dolio	Whoop de doo.
2013-03-28 19:40:14	johnw	dolio: where is that quote from?
2013-03-28 19:40:46	sipa	dolio: or if you know C really well already, and don't know haskell at all?
2013-03-28 19:40:52	ChongLi	it's silly to make inductions about hypothetical scenarios comparing languages
2013-03-28 19:40:55	dolio	It's a paraphrasing of the argument people usually make in favor of C.
2013-03-28 19:41:08	mami	dmwit: yeah obfuscating and underhandind misses the point ;)
2013-03-28 19:41:11	sproingie	my favorite ioccc program was one that calculated pi based the ascii art circle that the source code was formed into
2013-03-28 19:41:13	ChongLi	better off looking at real world examples
2013-03-28 19:41:15	johnw	dolio: I could say the same thing about writing binary code by hand
2013-03-28 19:41:21	sproingie	it had a comment: "to get more precision, write a bigger program"
2013-03-28 19:41:40	ChongLi	Xmonad is one great example
2013-03-28 19:41:49	-->	trh178` (~user@static-141-158-191-65.cap.east.verizon.net) has joined #haskell
2013-03-28 19:42:02	dolio	johnw: Yeah, it used to be used in favor of assembly over C.
2013-03-28 19:42:03	johnw	in fact, give me an unlimited budget and I'll write code by raising goats or sheep, depending on whether I need a 1 or a 0.  In time, I will get it done.
2013-03-28 19:42:22	lightquake	mami: i agree obfuscated does, but I don't think underhanded does
2013-03-28 19:42:22	orzo	I have a BSP tree representing a coloring of ℝⁿ with the set X and I want to reduce the dimension to generate a BSP tree that colors ℝⁿ⁻¹ with [X] where each color in the reduced tree is a list of colors ordered by their original position in the non-reduced tree.
2013-03-28 19:42:27	-->	dskippy (~mmachenry@67.208.185.2) has joined #haskell
2013-03-28 19:42:35	dmwit	mami: I disagree. Obfuscated code misses the point; underhanded code does not.
2013-03-28 19:42:52	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-28 19:42:52	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-28 19:42:52	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-28 19:43:04	mami	dmwit: sorry, mixed that up
2013-03-28 19:43:05	--	tac-lunch is now known as tac
2013-03-28 19:43:08	mami	i see your point
2013-03-28 19:43:12	mami	another question
2013-03-28 19:43:25	mami	how hard is it to correlate the haskell function to the machine code?
2013-03-28 19:43:37	ChongLi	depends on the function!
2013-03-28 19:43:39	ChongLi	next!
2013-03-28 19:43:40	dockside1	does it matter?
2013-03-28 19:43:42	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-28 19:43:44	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-28 19:43:48	mami	with c its pretty easy to just look at the intermediate assembly and find your function
2013-03-28 19:43:49	<--	trh178 (~user@static-141-158-191-65.cap.east.verizon.net) has quit (Ping timeout: 248 seconds)
2013-03-28 19:44:04	mami	dockside1: in case you want to audit what your compiler did, yes
2013-03-28 19:44:04	mcstar	easy with haskell too
2013-03-28 19:44:10	mcstar	you look at core, and see the function
2013-03-28 19:44:11	dockside1	Either you accept that you are writing high level code, or pick some macro assembler like C
2013-03-28 19:44:15	sproingie	probably not too hard for core.  for haskell source, probably harder, but the debugger manages.
2013-03-28 19:44:20	orzo	buggers
2013-03-28 19:44:30	mami	mcstar: how would i proceed there
2013-03-28 19:44:32	mami	ah k
2013-03-28 19:44:36	<--	merijn (~merijn@hippo.science.uva.nl) has quit (Ping timeout: 264 seconds)
2013-03-28 19:44:39	mcstar	ghc can dump core
2013-03-28 19:44:41	-->	LucasCampos (~lucas@186.212.242.29) has joined #haskell
2013-03-28 19:44:42	sproingie	do you trust 100% every optimization your C compiler does?
2013-03-28 19:44:45	mami	nope
2013-03-28 19:44:46	mcstar	there is even a highlighter for it
2013-03-28 19:44:47	dockside1	I don't  want that
2013-03-28 19:44:54	mami	this is all about gut feelings in the end
2013-03-28 19:44:57	dockside1	I want my compiler to optimize the AST
2013-03-28 19:44:58	dmwit	sproingie: Depends. Which C compiler is "mine"?
2013-03-28 19:45:06	mami	since we do not have anything with completely proven properties
2013-03-28 19:45:07	dmwit	sproingie: I trust 100% every optimization that CompCert does.
2013-03-28 19:45:15	mami	in the end the bare metal screws everything up
2013-03-28 19:45:17	sproingie	mami: yes it is.  which is probably why it's pointless to have the argument
2013-03-28 19:45:18	monochrom	I am all about denouncing gut feeling.
2013-03-28 19:45:25	mami	sproingie: i think so too
2013-03-28 19:45:43	mami	just needed some ammunition against it ;)
2013-03-28 19:45:47	glguy_	dmwit: because you've already reviewed the model of the hardware they run on?
2013-03-28 19:46:31	edwardk	mami: after a good c compiler has done its work, i'd argue that the control flow can be pretty obfuscated relative to the original source code
2013-03-28 19:46:33	dmwit	I don't need to trust the stages after the compiler to trust the compiler. =)
2013-03-28 19:46:45	-->	edeast (~chatzilla@24.114.26.118) has joined #haskell
2013-03-28 19:47:26	thoughtpolice	glguy_: hardware models don't have so much to do with compcert's optimizations being semantics-preserving, although the processor can certainly screw up later
2013-03-28 19:47:49	edwardk	after multiple rounds of strength reduction, loop unrolling, smashing things together into simd opcodes, shuffling code around to make it not branch, etc. it usually bears little resemblance to the input. gcc often looks a lot like the output, but, well, thats gcc. ;)
2013-03-28 19:47:54	<--	resnik_ (~resnik@108.71.82.84) has quit (Remote host closed the connection)
2013-03-28 19:48:15	dockside1	don't forget inlining
2013-03-28 19:48:24	thoughtpolice	edwardk: locality rearrangements really mess things up more than anything, especially combined with inlining
2013-03-28 19:48:29	glguy_	thoughtpolice: I don't know much about how compcert actually works, I'm just thinking that the semantics-preservation is only as good as those semantics map to the actual environment the program runs on
2013-03-28 19:48:34	edwardk	that too
2013-03-28 19:48:34	thoughtpolice	at least IMO after deubgging some of the GHC runtime recently
2013-03-28 19:48:53	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-28 19:48:55	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-28 19:48:55	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-28 19:49:23	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-28 19:49:38	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-03-28 19:49:44	<--	eff (~quassel@114.246.90.161) has quit (Remote host closed the connection)
2013-03-28 19:49:46	-->	edeast_ (~chatzilla@24.114.26.118) has joined #haskell
2013-03-28 19:50:06	doomlord	in gamedev it was very common to check what the compiler was outputting when optimizing
2013-03-28 19:50:23	doomlord	nevermind GCC, microsoft tools struggled too
2013-03-28 19:50:31	sproingie	that's more to do with "is this busting the cache" than "is this producing correct code"
2013-03-28 19:50:40	-->	ijp (~user@host86-143-194-152.range86-143.btcentralplus.com) has joined #haskell
2013-03-28 19:50:59	doomlord	oh youre all talking about correctness rather than optimality
2013-03-28 19:51:13	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-28 19:51:27	glguy_	thoughtpolice: And wasn't it the case that the frontend wasn't verified, so while the semantics are being preserved they aren't necessarily the ones you asked for in the first place?
2013-03-28 19:51:27	<--	ijp (~user@host86-143-194-152.range86-143.btcentralplus.com) has left #haskell
2013-03-28 19:51:49	<--	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-28 19:51:49	-->	arnihr__ (uid1395@gateway/web/irccloud.com/x-ppnuhnzebwefcrzf) has joined #haskell
2013-03-28 19:51:59	<--	edeast (~chatzilla@24.114.26.118) has quit (Ping timeout: 256 seconds)
2013-03-28 19:52:11	--	edeast_ is now known as edeast
2013-03-28 19:53:03	thoughtpolice	glguy_: there were some bugs in the parser originally, which was written in ocaml. i think something like 10 bugs
2013-03-28 19:53:25	thoughtpolice	now, they actually have a parser written in Coq too i think. i don't think any other semantics-violating bugs have been found
2013-03-28 19:53:57	glguy_	ah cool, (and for the record I'm only balking at the 100% trust aspect)
2013-03-28 19:54:47	thoughtpolice	oh sure, i'd agree, but verified compilers are a nice move forward :) 10 years ago people would have probably thought it impossible, so it's always exciting to see stuff like CompCert
2013-03-28 19:54:51	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 260 seconds)
2013-03-28 19:55:34	<--	Itkovian (~Itkovian@188.189.64.247) has quit (Quit: Itkovian)
2013-03-28 19:55:51	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Read error: Operation timed out)
2013-03-28 19:55:57	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 256 seconds)
2013-03-28 19:56:00	-->	eff (~quassel@114.246.90.161) has joined #haskell
2013-03-28 19:56:10	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-28 19:56:43	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-28 19:57:48	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Ping timeout: 264 seconds)
2013-03-28 19:58:33	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 240 seconds)
2013-03-28 19:58:48	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-28 19:59:00	<--	casucci (~zeke@unaffiliated/casucci) has quit (Ping timeout: 264 seconds)
2013-03-28 19:59:10	cschneid	what is Coq? proof system, but is it a totally different language, or a haskell thing?
2013-03-28 19:59:23	ChongLi	totally different language
2013-03-28 19:59:40	cschneid	related in any way?
2013-03-28 20:00:00	ChongLi	it's related in that it's statically typed, strongly typed, functional
2013-03-28 20:00:22	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Quit: message144)
2013-03-28 20:00:39	ChongLi	it's also dependently typed, unlike Haskell
2013-03-28 20:00:44	-->	lopex (uid4272@gateway/web/irccloud.com/x-wwhantdbqfeoamjr) has joined #haskell
2013-03-28 20:00:51	seliopou	coq is great
2013-03-28 20:01:10	armlesshobo	i luv the Coq
2013-03-28 20:01:11	armlesshobo	teehee
2013-03-28 20:01:24	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-28 20:01:39	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Remote host closed the connection)
2013-03-28 20:01:46	-->	Tharugrim (~Tharugrim@91-113-99-62.adsl.highway.telekom.at) has joined #haskell
2013-03-28 20:01:46	seliopou	and yes, it's dependently typed, and allows you to define and pass around propositions, and prove theorems about your programs
2013-03-28 20:01:47	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-03-28 20:02:03	cschneid	hmm, I'm sure that means something, but I'll stick with learning haskell first.
2013-03-28 20:02:05	cschneid	:)
2013-03-28 20:02:13	seliopou	haha, yeah it wasn't a great explanation either
2013-03-28 20:03:00	seliopou	do you know what it means for a language to be dependently typed?
2013-03-28 20:03:05	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-28 20:03:08	m_hyperbolic	Why isn't it possible to do : 1 + $ 2 + 3 but you have to to 1 + (2 +3) ? I understood $ to mean something like "Do the right side of this first" but maybe I'm wrong ?
2013-03-28 20:03:31	cschneid	seliopou: not a clue! And it sounds like something that would take up space in my head, and not be what I need right now.
2013-03-28 20:03:38	-->	emc2 (~emccorkl@2001:470:1f11:617:221:ccff:fec9:c208) has joined #haskell
2013-03-28 20:03:45	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-28 20:03:50	seliopou	everybody needs some dependent types in their lives
2013-03-28 20:03:59	-->	Franciman (~quassel@host113-192-static.12-87-b.business.telecomitalia.it) has joined #haskell
2013-03-28 20:03:59	edwardk	cschneid: it is much more verbose than haskell and feels rather ML'ish, but you can say more powerful things in it, so it is a trade-off. Coq is more about proving stuff than executing code. When you're done with a coq program you've usually proven something about a given domain. You rarely (unless your name is Adam Chlipala) actually run the resulting code though.
2013-03-28 20:04:00	aCube	> (1+) $  2 + 3
2013-03-28 20:04:01	lambdabot	  6
2013-03-28 20:04:07	seliopou	it just means that a type can depend on a value
2013-03-28 20:04:13	-->	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has joined #haskell
2013-03-28 20:04:15	aCube	> (1+) $  2 + 3 -- m_hyperbolic
2013-03-28 20:04:17	lambdabot	  6
2013-03-28 20:04:44	cschneid	edwardk: right, proof system. Didn't it have some method to export resulting validated code to other lanugages (like haskell)
2013-03-28 20:04:51	edwardk	cschneid: There is a similar language with a more Haskellish feel called 'Agda', which is probably an easier thing to transition to from Haskell. There are reasons to understand both. Coq is more mature and has a bigger ecosystem around it
2013-03-28 20:05:01	edwardk	Agda is where the cool kids are, and is pleasant to use
2013-03-28 20:05:02	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-28 20:05:02	seliopou	So you could have a list type that takes a number that represents, say the length of the list
2013-03-28 20:05:10	<--	glguy_ (~emertens@unaffiliated/glguy) has quit (Remote host closed the connection)
2013-03-28 20:05:12	seliopou	and then only lists with that length would have that type, for example
2013-03-28 20:05:21	cschneid	edwardk: honestly, I'm a software dev, not a research guy - so the right place to be is "making shit that works in haskell".  Mostly just curious around that
2013-03-28 20:05:33	tac	edwardk: The cool kids stopped using Agda last month. Now it's Idris ;D
2013-03-28 20:05:45	edwardk	cschneid: I'm somewhere in the middle, but yes, I like just making things that work. ;)
2013-03-28 20:05:52	seliopou	tac: the actor?
2013-03-28 20:05:59	m_hyperbolic	So the problem was the '+' not being applied correctly ?
2013-03-28 20:06:00	edwardk	hence why i code in haskell and not agda/idris/coq ;)
2013-03-28 20:06:12	cschneid	edwardk: it's been really interesting seeing how different the general feel of programming haskell has been from Ruby. Both get things done, but in such totally different manners
2013-03-28 20:06:29	cschneid	haskell function reuse is amazingly easy, but at least for me, getting the right function in the first place has been tricky
2013-03-28 20:06:38	edwardk	tac: I find that Haskell causes me to think almost entirely bottom up and just have faith that I'll get the right abstraction in the end
2013-03-28 20:07:01	edwardk	Nicely it has rewarded that behavior consistently enough that I can just trust in it to lead me to the right abstractions
2013-03-28 20:07:03	-->	Damgaard1 (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-28 20:07:17	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 256 seconds)
2013-03-28 20:07:25	edwardk	It is hard to quantify that feeling of gentle guidance to an outsider
2013-03-28 20:07:44	cschneid	edwardk: do you mean bottom as "simple conversion functions and combinations" and then haskell continues pushing you toward the toplevel `calculateTheWorld` function
2013-03-28 20:07:48	<--	ben_d (~muus@c-71-236-155-211.hsd1.or.comcast.net) has quit (Quit: LEE VING)
2013-03-28 20:07:53	quchen	ARGH! Could not deduce (Functor m) arising from a use of `void' from the context (MonadIO m)
2013-03-28 20:07:58	quchen	Where can I sign up for a lobby
2013-03-28 20:08:04	ChongLi	edwardk: I think one of the best ways to get that feeling is to just start hacking on some existing haskell code
2013-03-28 20:08:11	<--	urm3l (~urm3l@HSI-KBW-078-043-223-061.hsi4.kabel-badenwuerttemberg.de) has quit (Remote host closed the connection)
2013-03-28 20:08:23	edwardk	cschneid: yes. i tend to start by just putting together little abstractions and soon enough i have something that can launch missiles.
2013-03-28 20:08:30	ChongLi	and see how the types generally force you to do the right thing
2013-03-28 20:08:48	edwardk	But if I start thinking about it from the missile design goal perspective in a top down oriented fashion the Haskell that results is inevitably crap
2013-03-28 20:09:12	ChongLi	top down design is crap in general
2013-03-28 20:09:14	cschneid	So, more general question: what testing framework should I be using to convince myself that functions work? So far I've been using 'eyeball the results', but something like hunit or quickcheck seem important to convince myself repeatedly that I didn't screw up
2013-03-28 20:09:43	edwardk	I use doctest a lot. hunit and quickcheck are good, but they are terrible at the kind of code i like to write which is heavily polymorphic
2013-03-28 20:10:12	edwardk	I wind up building a lot of scaffolding there
2013-03-28 20:10:28	cschneid	hmm, I've been writing extremely concrete code.  Does polymorphic code just expand out from better knowledge of the language and wanting to make nice APIs to your code?
2013-03-28 20:10:34	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-28 20:10:41	ChongLi	remember that testing doesn't tell you that there are no bugs
2013-03-28 20:10:43	edwardk	Are you familiar with the idea of a free theorem?
2013-03-28 20:10:48	ChongLi	only that your tests passed
2013-03-28 20:11:00	ChongLi	(or failed)
2013-03-28 20:11:16	-->	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has joined #haskell
2013-03-28 20:11:19	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-28 20:12:22	edwardk	free theorems are little laws given to you by your type signatures. In essence every time you typecheck the compiler is proving these little theorems for you about your code. Think of them as laws you'd have to really screw up to break ;)
2013-03-28 20:12:40	edwardk	When your type signatures are more polymorphic there are fewer bad programs you can write that have those types
2013-03-28 20:12:47	edwardk	@djinn a -> b -> a
2013-03-28 20:12:47	lambdabot	f a _ = a
2013-03-28 20:12:49	<--	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has quit (Client Quit)
2013-03-28 20:13:01	edwardk	that is the only sane program with that type
2013-03-28 20:13:08	edwardk	on the other hand contrast that with Int -> Int -> Int
2013-03-28 20:13:15	edwardk	there are _lots_ of perfectly valid programs with that type
2013-03-28 20:13:15	hpaste	luisgabriel pasted “Data.Array error” at http://hpaste.org/84775
2013-03-28 20:13:23	cschneid	right. Int->Int->Int do lots of stuff. I have a few functions like that.
2013-03-28 20:13:25	edwardk	(i am ignoring blatant _|_'s here)
2013-03-28 20:13:44	sproingie	"blatant bottoms" sounds like a good band name
2013-03-28 20:13:44	cschneid	so you're general "feels right" idea is to make as few degrees of freedom for the actual implementation as possible?
2013-03-28 20:13:44	johnw	f a b = f a b
2013-03-28 20:13:52	edwardk	so if you can make the signature of your code polymorphic the compiler can do more to help you.
2013-03-28 20:13:54	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-28 20:13:55	johnw	that's a failing but valid definition for your function
2013-03-28 20:13:58	hpaste	luisgabriel pasted “Data.Array error” at http://hpaste.org/84776
2013-03-28 20:13:59	-->	pcapriot` (~paolo@b0f9dcb3.bb.sky.com) has joined #haskell
2013-03-28 20:14:04	edwardk	johnw: blatant _|_ though
2013-03-28 20:14:08	johnw	true
2013-03-28 20:14:22	sproingie	@pl f a b = f a b
2013-03-28 20:14:22	monochrom	polymorphic functions enjoy simple tests. "f :: a->a" can be tested by "f () == ()". parametericity extends this to all other types.
2013-03-28 20:14:22	lambdabot	f = fix id
2013-03-28 20:14:23	S11001001	const a _ = factor 3910753893 `seq` a
2013-03-28 20:14:28	sproingie	nifty
2013-03-28 20:14:34	edwardk	cschneid: yes.
2013-03-28 20:14:51	<--	mdhopkins (~mdhopkins@c-98-213-135-108.hsd1.il.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 20:14:57	edwardk	the more polymorphic your type signatures, the fewer valid programs can match them, so if you type one in and it typechecks the more likely it is to be correct ;)
2013-03-28 20:15:00	cschneid	edwardk: I like that idea. It's been weird trying to get a feel for code that does more than just work, but instead what the ideas around style and best practices
2013-03-28 20:15:31	monochrom	another example: if "g :: a -> [a]" and g () = [(), ()], then you also know g 5 = [5, 5]
2013-03-28 20:15:34	S11001001	constant factor
2013-03-28 20:15:42	<--	N4sh_ (~N4sh_@197.195.72.15) has quit (Quit: Lost terminal)
2013-03-28 20:15:45	edwardk	cschneid: i write some incredibly generic code with type signatures that without the free theorems to help me reason about them, i wouldn't be smart enough to write
2013-03-28 20:16:04	ChongLi	cschneid: if you get some time you may want to check out this talk:
2013-03-28 20:16:06	ChongLi	http://skillsmatter.com/podcast/home/keynote-3842/mh-6793
2013-03-28 20:16:09	edwardk	@type taking
2013-03-28 20:16:11	lambdabot	(Applicative f, Conjoined p) => Int -> Over p (Control.Lens.Internal.Bazaar.BazaarT p f a a) s t a a -> Over p f s t a a
2013-03-28 20:16:18	S11001001	@quote generic
2013-03-28 20:16:19	lambdabot	ghc says: More than one type pattern for a single generic type constructor
2013-03-28 20:16:30	cschneid	edwardk: do you have any open source I can look at?
2013-03-28 20:16:36	edwardk	if i went and replaced all those types with the moral equivalent of Int, i'd never have been able to write that function
2013-03-28 20:16:45	<--	pcapriotti (~paolo@5.69.140.1) has quit (Ping timeout: 276 seconds)
2013-03-28 20:16:55	edwardk	cshneid: a few repositories: github.com/ekmett and github.com/analytics
2013-03-28 20:16:57	ChongLi	SPJ's enthusiasm for types is infectious!
2013-03-28 20:17:11	-->	bishboria (~bishboria@cpc6-acto3-2-0-cust184.4-2.cable.virginmedia.com) has joined #haskell
2013-03-28 20:17:27	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-28 20:17:32	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has quit (Quit: reboot-to-windows)
2013-03-28 20:17:50	-->	OlegYch (~OlegYch@193.151.42.194) has joined #haskell
2013-03-28 20:17:51	-->	pcapriotti (~paolo@b01bbbc2.bb.sky.com) has joined #haskell
2013-03-28 20:18:07	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-28 20:18:38	<--	pcapriot` (~paolo@b0f9dcb3.bb.sky.com) has quit (Ping timeout: 255 seconds)
2013-03-28 20:19:34	edwardk	cschneid: you can see a pretty long laundry list of build bot messages scroll by on #haskell-lens for them ;)
2013-03-28 20:19:36	-->	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has joined #haskell
2013-03-28 20:19:47	cschneid	ok, I need to figure out custom types I think. That's my next big brick. (instance / class keywords)
2013-03-28 20:19:54	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-28 20:19:54	-->	erpe (~erpe@bigfun.eu) has joined #haskell
2013-03-28 20:19:58	<--	skyflash (~skyflash@96.53.63.54) has quit (Remote host closed the connection)
2013-03-28 20:20:04	<--	timjb (~timjb@ppp-188-174-169-47.dynamic.mnet-online.de) has quit (Remote host closed the connection)
2013-03-28 20:20:30	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-28 20:20:44	-->	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has joined #haskell
2013-03-28 20:20:58	-->	stephenjudkins (~textual@68.178.19.17) has joined #haskell
2013-03-28 20:21:22	-->	_boegel_ (~boegel@boegel.ugent.be) has joined #haskell
2013-03-28 20:21:32	luisgabriel	I don't know why I'm getting the error "array (48,122) [(48,fromList *** Exception: (Array.!): undefined array element" for this code: http://hpaste.org/84778. Can anyone help me?
2013-03-28 20:21:47	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 255 seconds)
2013-03-28 20:21:48	<--	OlegYch (~OlegYch@193.151.42.194) has quit (Read error: Connection reset by peer)
2013-03-28 20:22:07	cschneid	edwardk: for types, what should I go read? (ie, first the syntax of instance & such, then a reasonable tutorial/demo usage so I can get a feel for the why/when questions (as opposed to just how)
2013-03-28 20:22:40	edwardk	cschneid: have you read learn you a haskell or real world haskell?
2013-03-28 20:22:53	edwardk	both are good references to get started from
2013-03-28 20:23:00	cschneid	I have the books, but have gotten bogged down in reading them rather than doing. I figure I can go dive into the relevant sections
2013-03-28 20:23:00	johnw	cschneid: I don't recommend starting out by reading edwardk code
2013-03-28 20:23:05	cschneid	rather than reading them cover-to-cover
2013-03-28 20:23:10	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-03-28 20:23:10	int-e	luisgabriel: it means that the entry at index 48 was never defined.
2013-03-28 20:23:13	<--	exFalso1 (~exfalso@149.241.12.113) has left #haskell
2013-03-28 20:23:14	byorgey	luisgabriel: because that IMap has only one entry, so when you construct the array, only index 50 gets initialized
2013-03-28 20:23:20	luite	luisgabriel: print the IMap assocs first, no association for 49 probably
2013-03-28 20:23:28	edwardk	RWH moreso with prior programming experience, LYAH is more gradual, but may be frustratingly slow at points.
2013-03-28 20:23:37	<--	yacks (~yacks@180.151.36.168) has quit (Quit: Leaving)
2013-03-28 20:23:37	<--	agr (bae74f6a@gateway/web/freenode/ip.186.231.79.106) has quit (Quit: Page closed)
2013-03-28 20:23:43	-->	OlegYch (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 20:23:47	byorgey	luite: the IMap assocs are listed in the line above, there is only one! =)
2013-03-28 20:23:54	luite	oh you're right
2013-03-28 20:23:55	cschneid	I have a paper copy of RWH, I wonder where I put that...
2013-03-28 20:23:56	<--	Franciman (~quassel@host113-192-static.12-87-b.business.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-28 20:23:59	luite	and i meant 48 not 49 :)
2013-03-28 20:24:04	edwardk	I find it is generally safer to just go cover to cover, since very little works in haskell like you'd expect from other languages
2013-03-28 20:24:10	carter	yeah
2013-03-28 20:24:13	monochrom	eventually you will find that 49 is bad too
2013-03-28 20:24:13	edwardk	at least with something like LYAH
2013-03-28 20:24:31	edwardk	RWH has some problems with using things out of order, etc. that make the cover to cover story a harder sell there
2013-03-28 20:24:44	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-28 20:24:47	cschneid	edwardk: it's been cool to dive in with enough knowledge to read in input, do calcs and see output. Now I'm wanting to expand outward from that core of working code.
2013-03-28 20:24:47	carter	thats a more tractible starting point than edwardk's voluminous set of handy pacakges
2013-03-28 20:24:49	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-28 20:24:53	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 240 seconds)
2013-03-28 20:24:53	<--	izym (~izym@82.211.222.212) has quit (Ping timeout: 248 seconds)
2013-03-28 20:24:56	cschneid	I've just gotten bogged down in the books before
2013-03-28 20:25:01	edwardk	yeah
2013-03-28 20:25:19	monochrom	I recommend: start humble and start LYAH
2013-03-28 20:25:28	edwardk	my recommendation is to actualy set up the REPL and do all the fiddly little coding exercises as they come up in the book and riff on them as you go to learn more
2013-03-28 20:25:42	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-28 20:25:49	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-28 20:25:49	edwardk	its easy to fool yourself into thinking you understand when just skimming the books
2013-03-28 20:25:49	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-28 20:25:57	luisgabriel	int-e, byorgey, luite: got it. thanks ;)
2013-03-28 20:26:01	edwardk	but the REPL is a harsh mistress
2013-03-28 20:26:15	carter	and it gives you immediate feedback
2013-03-28 20:26:23	carter	and science indicates that doing things
2013-03-28 20:26:27	carter	and getting immediate feedback
2013-03-28 20:26:29	carter	is the best way to learn
2013-03-28 20:26:36	int-e	@type accumArray (const id)
2013-03-28 20:26:37	monochrom	I overestimate the number of people who know to perform more experiments
2013-03-28 20:26:38	lambdabot	Ix i => e -> (i, i) -> [(i, e)] -> Array i e
2013-03-28 20:26:48	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-03-28 20:26:50	carter	monochrom i don't experiment enough
2013-03-28 20:26:59	<--	shachaf_ (~shachaf@li227-219.members.linode.com) has quit (Changing host)
2013-03-28 20:26:59	-->	shachaf_ (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-03-28 20:26:59	<--	jMCg (~hiro@apache/committer/igalic) has quit (Ping timeout: 252 seconds)
2013-03-28 20:27:01	--	shachaf_ is now known as shachaf
2013-03-28 20:27:09	-->	jMCg (~hiro@apache/committer/igalic) has joined #haskell
2013-03-28 20:27:16	carter	but edwardk's pushing me towards the experiment always approach from repeated exposure to watching the commit stream of his code :)
2013-03-28 20:27:21	int-e	luisgabriel: that's one way to get an array with default entries if you want them
2013-03-28 20:27:40	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-03-28 20:27:42	monochrom	I assume that people automatically invent and do experiments, because that's what I do. but apparently, people prefer to assume. (oh, the irony!)
2013-03-28 20:28:20	cschneid	I have certainly been experimenting.  Yeah, I'll have to give RWH another go. I bet it answers most the questions I've been using this channel for
2013-03-28 20:28:26	cschneid	(ya'll are amazing by the way... super awesome)
2013-03-28 20:28:53	ChongLi	this channel is like a REPL for english!
2013-03-28 20:28:57	edwardk	cschneid: the min reason i stuck around in #haskell was because of the community. The fact that the language is also amazing was a nice perk
2013-03-28 20:29:01	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Client Quit)
2013-03-28 20:29:04	<--	jacksmithz (~jacksmith@83-91-57-117-dynamic.dk.customer.tdc.net) has quit (Quit: Leaving)
2013-03-28 20:29:07	edwardk	er main
2013-03-28 20:29:29	carter	tropical rings edwardk ?
2013-03-28 20:29:44	edwardk	carter: what do you need to know?
2013-03-28 20:29:52	carter	i was riffing on the min reason
2013-03-28 20:29:52	carter	:)
2013-03-28 20:29:56	edwardk	ah =)
2013-03-28 20:30:03	edwardk	well, its a definite (+) =)
2013-03-28 20:30:13	carter	we do have good engineering weather in haskell land
2013-03-28 20:30:20	<--	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has quit (Ping timeout: 255 seconds)
2013-03-28 20:30:28	carter	unlike the languages near artic circles
2013-03-28 20:30:29	johnw	edwardk: I was at the London haskell user's group last night, and the presentation reminded me of one of your library
2013-03-28 20:30:37	edwardk	oh?
2013-03-28 20:30:44	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-28 20:30:47	johnw	there were cata, ana, histo, zygo and futu morphisms :)
2013-03-28 20:30:52	edwardk	oh
2013-03-28 20:30:55	edwardk	bah =P
2013-03-28 20:31:03	johnw	oh, and para of course
2013-03-28 20:31:12	edwardk	and 50 slides later they made it through fib?
2013-03-28 20:31:14	johnw	no prepromorphisms though!
2013-03-28 20:31:14	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 255 seconds)
2013-03-28 20:31:14	HugoDaniel	i like the school of haskell website
2013-03-28 20:31:19	edwardk	or was it factorial
2013-03-28 20:31:22	HugoDaniel	its possible to run examples and change them :)
2013-03-28 20:31:22	ChongLi	no hylomorphisms?
2013-03-28 20:31:30	johnw	edwardk: haha, that was about 30 slides in I think :)
2013-03-28 20:31:30	-->	DanZimm (~Dan@147.126.10.25) has joined #haskell
2013-03-28 20:31:39	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-28 20:31:42	johnw	it was all about using fixed points of functors to generalize folds and unflods
2013-03-28 20:31:46	edwardk	let me guess functional treesort/pseudo-quicksort ;)
2013-03-28 20:32:21	ChongLi	Erik Meijer is quitting microsoft!
2013-03-28 20:32:23	edwardk	the treesort/quicksort example would be the stock hylo example
2013-03-28 20:32:33	luisgabriel	int-e: I'm using deepseq to force the evaluation of an array in a separate thread, I think I can't do that if I contruct the array using the array function, right?
2013-03-28 20:32:34	edwardk	ChongLi: wow
2013-03-28 20:32:40	cschneid	ok, the last 15 lines of scrollback or so is what terrifies me about haskell still.  How much does the mathy research side come into play to just make cool stuff?
2013-03-28 20:32:41	-->	spligak_ (~spligak@2607:f0d0:1100:8026:2e41:38ff:feaf:1ff7) has joined #haskell
2013-03-28 20:32:47	johnw	ChongLi: oh, there was hylo
2013-03-28 20:32:54	cschneid	I don't mind undergrad level CS... but.... :)
2013-03-28 20:32:56	johnw	and apo-
2013-03-28 20:33:08	ChongLi	I'll really miss all his great C9 vids
2013-03-28 20:33:18	ChongLi	he has a great rapport with Charles
2013-03-28 20:33:21	Ralith	performance advice!
2013-03-28 20:33:22	johnw	and he distinguished between Fix and Cofix, recursion and corecursion
2013-03-28 20:33:24	-->	sarfraz_ (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-28 20:33:32	edwardk	cschneid: the hylo/etc. stuff is a bit of a disease. ;)
2013-03-28 20:33:54	johnw	it was a nice presentation, actually, but I still need to develop a keener sense of when such an approach would be *the* killer approach to a problem
2013-03-28 20:34:17	mcstar	ChongLi: where will he work now?
2013-03-28 20:34:21	edwardk	cschneid: i personally do not find it all that useful. At one point I used to think there was a lot of deep fundamental stuff there, but it turned out to be a couple of 'fundamental' bits of math, and a bunch of abuses of the same kind of distributive law.
2013-03-28 20:34:29	monochrom	johnw: is that Ralf Hinze's work and "just use a suitable left-adjoint functor" (right-adjoint if you're doing cofix)?
2013-03-28 20:34:30	Ralith	I have an AST walker that first tags certain (frequent, widely distributed) AST nodes with names and generates some constraints on those names, then solves the constraints, then replaces the names based on the constraint solution.
2013-03-28 20:34:30	-->	s4msung (~s4msung@s4msung.de) has joined #haskell
2013-03-28 20:34:32	edwardk	johnw: the trick is it never is
2013-03-28 20:34:35	ChongLi	mcstar: he's going back to academia
2013-03-28 20:34:40	int-e	luisgabriel: well, 'array' is really primarily for the case where you actually initialise all elements of the array. so 'no' to the question as asked
2013-03-28 20:34:52	johnw	Barclay's is apparently using them to good effect to reduce boilerplate
2013-03-28 20:34:59	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Remote host closed the connection)
2013-03-28 20:35:01	int-e	luisgabriel: but in your case, yes, deepseq on that array with undeefined entries is going to fail.
2013-03-28 20:35:03	edwardk	johnw: spotting that something is a fold is very useful. spotting the rest is less so
2013-03-28 20:35:07	johnw	and it makes the recursion "scheme" apparent, they said, which helps reasoning
2013-03-28 20:35:09	Ralith	Should I use STRefs to be able to get the solution data to the names in-place, or is an IntMap from names (Ints) to solved value Good Enough?
2013-03-28 20:35:17	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 255 seconds)
2013-03-28 20:35:26	johnw	oh, but the best part
2013-03-28 20:35:37	edwardk	i buy it when the scheme is cata/fold.
2013-03-28 20:35:38	johnw	he had the best presentation on implementing foldl in terms of foldr that I've yet seen
2013-03-28 20:35:59	johnw	it's a "catamorphism that builds a function"
2013-03-28 20:36:03	Ralith	the effect being making the final AST walk linear (just a read from the STRefs annotating the AST nodes) or superlinear (an IntMap lookup)
2013-03-28 20:36:10	 *	int-e thinks this discussion is heading towards fusion or co(n)fusion.
2013-03-28 20:36:41	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-28 20:37:09	<--	Heero` (~Heero@207.182.200.130) has quit (Ping timeout: 248 seconds)
2013-03-28 20:37:34	luisgabriel	int-e: yes, in my case I don't have the guarantee that all elements will be initialized ;/
2013-03-28 20:37:41	ChongLi	deforestation!
2013-03-28 20:38:15	edwardk	johnw: yes. this is the part of it i like =)
2013-03-28 20:38:27	cschneid	yeah, question: what's 'list fusion' in some of the docs?  I assume that means intermediate lists won't get created when you ask for the answer
2013-03-28 20:38:31	 *	fizbin needs an HXT channel.
2013-03-28 20:38:57	edwardk	johnw: the problem is when you start talking about generalized catamorphisms and are mixing in arbitrary comonads with distributive laws, its all the same thing, but you're cheating to fmap over the base functor to distribute anyways
2013-03-28 20:38:59	-->	wouters (~wouters@ip109-172-212-87.adsl2.static.versatel.nl) has joined #haskell
2013-03-28 20:39:07	ChongLi	http://eprints.eemcs.utwente.nl/7281/01/db-utwente-40501F46.pdf
2013-03-28 20:39:13	ChongLi	relevant to both topics!
2013-03-28 20:39:34	-->	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has joined #haskell
2013-03-28 20:39:39	monochrom	yes cschneid
2013-03-28 20:39:49	-->	dates_ (58e3ccec@gateway/web/freenode/ip.88.227.204.236) has joined #haskell
2013-03-28 20:40:09	edwardk	cschneid: http://www.haskell.org/haskellwiki/Correctness_of_short_cut_fusion
2013-03-28 20:40:34	johnw	fusion is a very cool thing
2013-03-28 20:40:53	-->	duetosymmetry (84ec0734@gateway/web/freenode/ip.132.236.7.52) has joined #haskell
2013-03-28 20:40:56	edwardk	cschneid: there are several forms of 'fusion' one can use. one is inspired by all this cata/fold stuff: cata-fusion, hylo-fusion, etc.    and then there is foldr/build fusion   and there is also destroy/unfoldr fusion.
2013-03-28 20:41:05	edwardk	the latter two are the most interesting from a pragmatic engineering perspective
2013-03-28 20:41:14	wouters	I have a SmallCheck question: suppose I have a test of the form 'exists $ \x -> px' -- is there a way to get SmallCheck to print the x for which the test passes?
2013-03-28 20:41:19	-->	Xorlev (uid226@gateway/web/irccloud.com/x-gchhfnterijkeqks) has joined #haskell
2013-03-28 20:41:27	edwardk	because unfortunately converting to a form that permits hylo fusion is a big messy problem
2013-03-28 20:41:28	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-28 20:41:41	edwardk	and moreover once you have hylo you can do anything, so its already 'too big' in a deep fundamental sense
2013-03-28 20:42:07	cschneid	edwardk: I think we're working at different levels here :)
2013-03-28 20:42:11	edwardk	foldr/build fusion is pretty simple though
2013-03-28 20:42:12	edwardk	:t foldr
2013-03-28 20:42:14	lambdabot	(a -> b -> b) -> b -> [a] -> b
2013-03-28 20:42:18	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-28 20:42:21	johnw	cschneid: lol
2013-03-28 20:42:26	johnw	cschneid: don't I know exactly how you feel :)
2013-03-28 20:42:29	edwardk	build :: (forall b. (a -> b -> b) -> b -> b) -> [a]
2013-03-28 20:42:43	edwardk	then gives you: foldr c n (build g) = g c n
2013-03-28 20:42:46	johnw	I think edwardk forgets that people don't know things sometimes ;)
2013-03-28 20:43:02	edwardk	if you look at the signature there
2013-03-28 20:43:20	 *	cschneid is years out of a pretty terrible undergrad CS program. I can program, but man, technicalities and math are just stuff I don't know
2013-03-28 20:43:22	edwardk	foldr is saying how to replace (:) and [] in a list with a function and a value respectively. and get a new answer
2013-03-28 20:43:34	johnw	but what's he saying about fusion is that some function applications can cancel each other out
2013-03-28 20:43:42	johnw	in this case, foldr and build can cancel out
2013-03-28 20:43:48	johnw	and unfoldr and destroy can cancel out
2013-03-28 20:44:09	edwardk	build is saying that if you give me something that knows how to build up a structure with any pair of those kinds of functions, I can give you back a list.
2013-03-28 20:44:21	cschneid	edwardk: that's a cool way to look at foldr. Obvious but haven't heard it stated that way
2013-03-28 20:44:22	edwardk	foldr build fusion then makes that intermediate list go away
2013-03-28 20:44:32	-->	glguy_ (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-28 20:44:42	edwardk	by just handing the function you gave to build the foldr args directly
2013-03-28 20:44:45	cschneid	edwardk: cool.  As far as I'm concerned for now, it's magic that the compiler does?
2013-03-28 20:44:53	johnw	not the compiler
2013-03-28 20:44:54	cschneid	later on I may need to tweak code to let the compiler do its work
2013-03-28 20:44:57	johnw	the library writer
2013-03-28 20:44:58	luisgabriel	int-e: worked fine with accumArray. thanks!
2013-03-28 20:45:01	cschneid	ahh, I see
2013-03-28 20:45:04	edwardk	well, it turns out there are two styles of fusion you can use. foldr/build and destroy/unfoldr
2013-03-28 20:45:08	cschneid	same diff. For now I don't need to worry about it?
2013-03-28 20:45:23	johnw	GHC supports "rewrite rules", which can rewrite recurring patterns as taught to it by the library writer
2013-03-28 20:45:35	<--	t7 (522d57e8@gateway/web/freenode/ip.82.45.87.232) has quit (Quit: Page closed)
2013-03-28 20:45:35	edwardk	you have to pick one, because the rewrite rules that the compiler can use to convert your code into a suitable form have to make decisions between one and the other that kind of make the other go in the wrong direction
2013-03-28 20:45:39	johnw	cschneid: you don't need to worry about this for a while yet
2013-03-28 20:45:41	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 248 seconds)
2013-03-28 20:45:47	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-28 20:45:48	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-03-28 20:45:58	<--	HugoDaniel (~hugo@elab.fcsh.unl.pt) has quit (Quit: leaving)
2013-03-28 20:46:16	edwardk	cschneid: the short answer is the compiler has some rewrite rules given to it by the authors of the standard library that let it take your code and turn it into equivalent faster code using this machinery
2013-03-28 20:46:48	edwardk	cschneid: the compiler itself just has hooks for the rewrite rules, this is all just enabled by library code with those rules in it
2013-03-28 20:46:53	<--	duetosymmetry (84ec0734@gateway/web/freenode/ip.132.236.7.52) has quit (Quit: Page closed)
2013-03-28 20:46:55	cschneid	cool.  The pureness of haskell opening up options for the compiler/library writers is interesting.  Somebody give me a bunch of money to go to grad school plz.
2013-03-28 20:47:07	<--	DanZimm (~Dan@147.126.10.25) has quit (Quit: Computer has gone to sleep.)
2013-03-28 20:47:10	edwardk	Data.Vector, etc. use a form of 'destroy/unfoldr' fusion. the Prelude uses a limited form of foldr/build fusion.
2013-03-28 20:47:12	monochrom	some grad schools give you that money
2013-03-28 20:47:30	-->	[1]papyrus (papyrus@119.199.107.183) has joined #haskell
2013-03-28 20:47:40	edwardk	It is important to note that neither are 'hylo-fusion', because that is crap ;)
2013-03-28 20:47:56	monochrom	in Canada, two levels of government also give you that money, but you have to perform well first
2013-03-28 20:48:09	edwardk	(actually it'd be kinda neat if it did work, its just the kind of thing you can't optimize well)
2013-03-28 20:48:41	andrewsw	edwardk: the type you've given for builder confuses me.
2013-03-28 20:48:43	cschneid	monochrom: none of them make up for opportunity costs though :)
2013-03-28 20:49:00	edwardk	http://metagraph.org/papers/stream_fusion.pdf talks about the form of destroy/unfoldr fusion
2013-03-28 20:49:04	edwardk	andrewsw: its a rank2 type
2013-03-28 20:49:09	--	stelleg is now known as stelleg_away
2013-03-28 20:49:23	<--	[1]papyrus (papyrus@119.199.107.183) has quit (Client Quit)
2013-03-28 20:49:41	andrewsw	I read it as "given a function that looks like fold, I'll return a list of arbitrary type"
2013-03-28 20:49:54	andrewsw	okay, not quite arbitrary.
2013-03-28 20:49:56	edwardk	andrewsw: notice the forall b.
2013-03-28 20:50:04	edwardk	build :: (forall b. (a -> b -> b) -> b -> b) -> [a]
2013-03-28 20:50:12	edwardk	you have to give me a function that doesn't care what b i give it
2013-03-28 20:50:16	<--	OlegYch (~OlegYch@80.249.95.251) has quit (Read error: Connection reset by peer)
2013-03-28 20:50:19	monochrom	the "a" in [a] is the same "a" in (forall b. (a -> b -> b) -> b -> b)
2013-03-28 20:50:23	edwardk	so i could choose to give it (:) and [] by choosing b = [a]
2013-03-28 20:50:32	andrewsw	hmm...
2013-03-28 20:50:38	-->	OlegYch (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 20:50:50	edwardk	then (:) :: a -> [a] -> [a]    and [] :: [a]  are perfectly good args
2013-03-28 20:50:54	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 20:51:05	edwardk	build f = f (:) []
2013-03-28 20:51:08	monochrom	you could say, (forall b. (a -> b -> b) -> b -> b) is an encoding of a list, and build decodes it back to a list
2013-03-28 20:51:25	andrewsw	okay, I think I follow. it's been a while.
2013-03-28 20:51:38	edwardk	the arg to build is a sort of cps transformed list. that will build something list like using the user supplied functions
2013-03-28 20:51:54	trolling	@pl \f -> f (:) []
2013-03-28 20:51:54	lambdabot	flip ($ (:)) []
2013-03-28 20:52:22	edwardk	build (\cons nil -> cons 1 nil)  -- represents the 'virtual' list [1]
2013-03-28 20:52:36	johnw	edwardk: are you just talking about DLists?
2013-03-28 20:52:37	andrewsw	I recognize the list encoded in (a -> b -> b) -> b -> b
2013-03-28 20:52:55	<--	sonda (~sonda@ppp-181-37.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-28 20:52:58	andrewsw	alright , let me stew on it a while.
2013-03-28 20:52:59	edwardk	foldr (+) 0 (build (\cons nil -> cons 1 nil))      = (\cons nil -> cons 1 nil) (+) 0    by foldr build fusion, so you get 1 + 0
2013-03-28 20:53:20	edwardk	johnw: different trick to get a similar goal
2013-03-28 20:53:26	andrewsw	thanks edwardk and monochrom
2013-03-28 20:53:39	johnw	defer list construction until the end, so it's O(n) overall
2013-03-28 20:54:03	edwardk	same goal. different way to do it
2013-03-28 20:54:06	johnw	i wonder why this hasn't been generalized for any monoids
2013-03-28 20:54:31	johnw	i guess it's too easy
2013-03-28 20:54:33	edwardk	if you take the same 'virtual list' you built up with the arg to build and deconstruct it twice you have to do all the work to build it twice
2013-03-28 20:54:40	johnw	a <> b <> c = (a <>) . (b <>) . c
2013-03-28 20:54:46	edwardk	basically if you will inspect something multiple times you want a real list
2013-03-28 20:54:48	johnw	a <> b <> c = (a <>) . (b <>) $ c
2013-03-28 20:54:57	edwardk	if you just do one pass over it, this sort of opens up more compiler optimizations
2013-03-28 20:55:13	johnw	ah
2013-03-28 20:56:00	<--	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has quit (Ping timeout: 260 seconds)
2013-03-28 20:56:33	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Remote host closed the connection)
2013-03-28 20:56:48	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-28 20:57:21	--	k00mi_ is now known as k00mi
2013-03-28 20:57:57	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 248 seconds)
2013-03-28 20:58:19	<--	nexx (~SPS-User@dslb-188-096-166-150.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-28 20:58:19	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 260 seconds)
2013-03-28 20:59:54	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-28 21:01:40	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-28 21:02:04	<--	js__ (~quassel@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 240 seconds)
2013-03-28 21:02:31	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Remote host closed the connection)
2013-03-28 21:02:35	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-03-28 21:03:05	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-28 21:03:15	-->	fizruk (59f9a510@gateway/web/freenode/ip.89.249.165.16) has joined #haskell
2013-03-28 21:03:48	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-28 21:04:09	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 21:04:24	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-28 21:04:46	fizruk	hey, guys! could you help me with some monad transformers?
2013-03-28 21:04:48	<--	plucas (~plucas@lawn-128-61-44-203.lawn.gatech.edu) has quit (Quit: Computer has gone to sleep.)
2013-03-28 21:05:01	<--	qwr (~qwr@tartu.cyber.ee) has quit (Ping timeout: 245 seconds)
2013-03-28 21:05:07	-->	x7a1c0b (~x7a1c0b@g224018103.adsl.alicedsl.de) has joined #haskell
2013-03-28 21:05:20	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-28 21:05:23	<--	Jaak (~foo@tartu.cyber.ee) has quit (Ping timeout: 258 seconds)
2013-03-28 21:05:36	johnw	fizruk: sure!
2013-03-28 21:05:39	johnw	i love monad transformers
2013-03-28 21:05:52	fizbin	Bleah. I've just lost a whole day because the DTD generation in HXT's picklers sucks rocks.
2013-03-28 21:06:06	fizruk	suppose I have something like type T m a = StateT SomeState m a
2013-03-28 21:06:24	johnw	it is supposed
2013-03-28 21:06:25	shachaf	fizruk: Generally you should just ask your question rather than asking for someone to volunteer first. :-)
2013-03-28 21:06:25	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-28 21:06:50	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-28 21:06:57	-->	qwr (~qwr@tartu.cyber.ee) has joined #haskell
2013-03-28 21:07:02	fizruk	and then I have something like withSocketsDo :: IO a -> IO a
2013-03-28 21:07:08	<--	dates_ (58e3ccec@gateway/web/freenode/ip.88.227.204.236) has quit (Ping timeout: 245 seconds)
2013-03-28 21:07:10	fizbin	If I'd just known that HXT's picklers can't generate a DTD - and therefore should be ignored, along with anything that uses that DTD generation like checkPickler - I'd have finished this stuff hours ago.
2013-03-28 21:07:15	-->	Jaak (~foo@tartu.cyber.ee) has joined #haskell
2013-03-28 21:07:21	--	Watcher7|off is now known as Watcher7
2013-03-28 21:07:35	-->	sw17ch (uid10745@gateway/web/irccloud.com/x-cnijhmrfqjglomth) has joined #haskell
2013-03-28 21:07:43	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Ping timeout: 264 seconds)
2013-03-28 21:07:48	fizruk	and now I want to use that function within my transformed monad: T IO
2013-03-28 21:07:55	-->	realnot (~realnot@host224-52-dynamic.52-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-28 21:07:56	<--	realnot (~realnot@host224-52-dynamic.52-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-03-28 21:07:56	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-03-28 21:08:04	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-28 21:08:04	x7a1c0b	Say i have: data Time = Night | Day
2013-03-28 21:08:05	johnw	fizruk: liftIO
2013-03-28 21:08:06	snhmib	a whole day is nothing compared to the soul you lost by using xml in the first place
2013-03-28 21:08:16	-->	js__ (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-28 21:08:31	shachaf	fizruk: It's trouble.
2013-03-28 21:08:42	x7a1c0b	is it legal to define succ and pred so that succ Day returns Night and succ Night returns Day ?
2013-03-28 21:08:45	shachaf	fizruk: You should probably just use withSocketsDo in the beginning of main or something.
2013-03-28 21:08:48	fizruk	johnw: liftIO is not sufficient, cause I need to get an argument
2013-03-28 21:08:58	johnw	fizruk: show me code where liftIO didn't work?
2013-03-28 21:09:07	shachaf	johnw: 13:07 <fizruk> and then I have something like withSocketsDo :: IO a -> IO a
2013-03-28 21:09:07	johnw	but that's kind of what liftIO means :)
2013-03-28 21:09:19	shachaf	johnw: It is not.
2013-03-28 21:09:23	johnw	a <- liftIO $ withSocketsDo someAction
2013-03-28 21:09:46	fizruk	the problem is that someAction is not of type IO a
2013-03-28 21:09:48	<--	wouters (~wouters@ip109-172-212-87.adsl2.static.versatel.nl) has quit (Quit: wouters)
2013-03-28 21:09:51	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-28 21:09:54	johnw	shachaf: It is in the sense of, how do I invoke some function in IO a in my tranformed monad T IO a
2013-03-28 21:09:54	fizruk	it's of type T IO a
2013-03-28 21:09:56	nooodl	x7a1c0b: sure, just add "deriving (Enum)"
2013-03-28 21:09:57	shachaf	johnw: fizruk wants T IO a -> T IO a, of course
2013-03-28 21:10:02	simpson	x7a1c0b: It's certainly something that you can do, but I bet that it will make things like [Day, ..] into an infinite list.
2013-03-28 21:10:05	johnw	fizruk: ah
2013-03-28 21:10:11	-->	petrus (~petrus@unaffiliated/petrus) has joined #haskell
2013-03-28 21:10:12	simpson	Or, uh, [Day..] in Haskell, sorry.
2013-03-28 21:10:14	johnw	this was no said
2013-03-28 21:10:27	nooodl	wait
2013-03-28 21:10:30	nooodl	i can't read
2013-03-28 21:10:31	-->	akraut (uid3423@gateway/web/irccloud.com/x-brnincqblrozagud) has joined #haskell
2013-03-28 21:10:41	-->	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has joined #haskell
2013-03-28 21:10:47	johnw	fizruk: you can't route a T IO a through an IO a and keep the state
2013-03-28 21:10:50	<--	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-03-28 21:11:01	x7a1c0b	nooodl the problem is (succ maxBound) which does not return minBound
2013-03-28 21:11:07	nooodl	yeah
2013-03-28 21:11:07	johnw	you'd have to strip the state to get down to an IO a
2013-03-28 21:11:07	shachaf	fizruk: As far as I know you're generally supposed to use withSocketsDo once around your entire program.
2013-03-28 21:11:08	monochrom	withSocketsDo is meant to be called once at the outermost level anyway
2013-03-28 21:11:10	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-28 21:11:16	-->	jodaro (uid5995@gateway/web/irccloud.com/x-dgsjcejmkvqclhbj) has joined #haskell
2013-03-28 21:11:26	shachaf	fizruk: So do main = withSocketsDo $ do { restOfProgram }
2013-03-28 21:11:35	<--	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has quit (Client Quit)
2013-03-28 21:11:41	-->	UziMonkey__ (uid184@gateway/web/irccloud.com/x-bozpaugnpdebnukk) has joined #haskell
2013-03-28 21:11:49	shachaf	This is not a general-purpose answer to your question about transformers. It is only an answer about withSocketsDo.
2013-03-28 21:11:50	fizruk	shachaf, I understand the withSocketsDo case, but what if there are other things like preservingMatrix here: http://bit.ly/10dpKYh
2013-03-28 21:11:58	shachaf	As far as I know the general-purpose question doesn't have a good answer.
2013-03-28 21:12:11	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 255 seconds)
2013-03-28 21:12:42	shachaf	(Hmm. Probably you shouldn't use shortened URLs in here, either.)
2013-03-28 21:12:45	-->	brill (~brill@78.156.103.250) has joined #haskell
2013-03-28 21:12:47	-->	rexamophone (uid4239@gateway/web/irccloud.com/x-wvhngkgiwznhosxd) has joined #haskell
2013-03-28 21:12:58	fizruk	so I need to get into internals of my concrete monad to do that
2013-03-28 21:13:05	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-03-28 21:13:08	johnw	shachaf: there might be a general answer
2013-03-28 21:13:10	-->	puzza007_ (uid127@gateway/web/irccloud.com/x-lrjvvgqgtqqfbkan) has joined #haskell
2013-03-28 21:13:14	shachaf	fizruk: Correct. It's pretty awful.
2013-03-28 21:13:20	shachaf	johnw: A good known answer.
2013-03-28 21:13:22	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-qxprhqyhbllytnxw) has joined #haskell
2013-03-28 21:13:30	shachaf	Monad transformers are pretty awful.
2013-03-28 21:13:31	shachaf	Oh well.
2013-03-28 21:13:34	 *	zachk wants a cement shoes monad
2013-03-28 21:13:37	-->	wilfredh (uid159@gateway/web/irccloud.com/x-oanccyucgyluzvps) has joined #haskell
2013-03-28 21:13:38	-->	si14 (uid2619@gateway/web/irccloud.com/x-qbvbqdyhgbimofyq) has joined #haskell
2013-03-28 21:13:40	johnw	shachaf: \a -> control $ \runInIO -> withSocketsDo (runInIO a)
2013-03-28 21:13:44	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-03-28 21:13:52	zachk	iirc, category theorist have barely explored monad transformers
2013-03-28 21:13:57	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-03-28 21:14:06	shachaf	johnw: That is sometimes feasible and sometimes not.
2013-03-28 21:14:07	johnw	by using monad-control
2013-03-28 21:14:13	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-28 21:14:21	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-28 21:14:24	johnw	shachaf: when is it not feasible?
2013-03-28 21:14:25	sproingie	newtype CementShoes a = CementShoes { sleepWithDaFishes :: a }
2013-03-28 21:14:27	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-28 21:14:39	shachaf	johnw: I bet it doesn't work for Cont?
2013-03-28 21:15:00	Philippa	zachk: I suspect mostly on grounds of "obviously bad idea unless you can't help it"
2013-03-28 21:15:01	-->	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has joined #haskell
2013-03-28 21:15:05	johnw	also, that approach only carries the state unchanged through the operation, doesn't it
2013-03-28 21:15:15	<--	kennyd (~kennyd@93-138-106-0.adsl.net.t-com.hr) has quit (Ping timeout: 276 seconds)
2013-03-28 21:15:17	johnw	and he may want to mutate state within the withSocketsDo
2013-03-28 21:15:35	johnw	so, whoever said to do main = withSocketsDo $ ... is the right answer
2013-03-28 21:15:38	shachaf	For instance.
2013-03-28 21:15:42	Philippa	shachaf: so I think in part it's our ability (or rather, Haskell's) to build infrastructure in terms of them that's lousy? I can look at Frank and piss-takingly show Conor where the transformers are...
2013-03-28 21:16:12	-->	xrl__ (uid1091@gateway/web/irccloud.com/x-lpufhcmccwamiksr) has joined #haskell
2013-03-28 21:16:20	shachaf	There are many disadvantages to any practical solution/workaround to this problem. I don't know a good solution in general, or whether one exists.
2013-03-28 21:16:37	-->	augustl (uid10075@gateway/web/irccloud.com/x-qxibnkubvuwkwlcn) has joined #haskell
2013-03-28 21:16:49	shachaf	Philippa: I don't know.
2013-03-28 21:16:52	-->	mtlatif (uid10708@gateway/web/irccloud.com/x-gsopejrsganohtti) has joined #haskell
2013-03-28 21:16:59	-->	bobry (uid4445@gateway/web/irccloud.com/x-ydijzxvgtkdehxyy) has joined #haskell
2013-03-28 21:17:03	-->	Vertue (uid10621@gateway/web/irccloud.com/x-fjuwnjusmigjrcop) has joined #haskell
2013-03-28 21:17:08	-->	etrepum (uid763@gateway/web/irccloud.com/x-lrpkgevibpcaznjg) has joined #haskell
2013-03-28 21:17:15	Philippa	shachaf: so you've accidentally helped me realise that yes, the problem I'd been bitching about in chan for a few months does also apply meaningfully to monad transformers in a not-yet-solved way and give us all kinds of problems
2013-03-28 21:17:28	johnw	lifting IO a -> IO a to T IO a -> T IO a feels like a monad transformery fmap
2013-03-28 21:17:37	-->	PrO_OkI (uid4868@gateway/web/irccloud.com/x-kiarigfchnnojdnf) has joined #haskell
2013-03-28 21:17:38	-->	akahn (uid2243@gateway/web/irccloud.com/x-tyxlpazagvtrohxe) has joined #haskell
2013-03-28 21:17:47	-->	watermind (~wm@2.80.234.191) has joined #haskell
2013-03-28 21:17:54	fizruk	johnw: exactly :)
2013-03-28 21:17:54	johnw	Philippa: which problem was that?
2013-03-28 21:18:06	Philippa	shachaf: I think part of my thinking is - the way we talk using them now is pretty much the asm for this stuff, which means waaaay too much book-keeping
2013-03-28 21:18:26	-->	Y_Less (Y_Less@5ac17519.bb.sky.com) has joined #haskell
2013-03-28 21:18:27	shachaf	I agree that there's way too much book-keeping.
2013-03-28 21:18:33	johnw	fizruk: but remember, fmap doesn't let you access the context, so you can use my monad-control trick if that's all you want wrt State
2013-03-28 21:18:35	Philippa	johnw: navigating through stacks of functors / a known decomposition of a composed functor
2013-03-28 21:18:39	shachaf	I don't know that a good solution will be based on monad transformers as we know them today.
2013-03-28 21:18:46	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-28 21:18:54	-->	tomh_ (uid501@gateway/web/irccloud.com/x-xzoonhqpdksfaqet) has joined #haskell
2013-03-28 21:19:04	Philippa	shachaf: *nod*. I suspect it'll have somewhere you can point and say "that's where they ended up", but that's not the same thing
2013-03-28 21:19:35	johnw	fizruk: that line of code I pasted is from the lifted-based package, and is how it turns `catch' into a function that works for any MonadIO m
2013-03-28 21:19:36	shachaf	Sure, there are good ideas/goals in monad transformers. The general idea of building up monads from pieces is a nice one.
2013-03-28 21:19:38	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-28 21:19:40	-->	kennyd (~kennyd@93-141-55-39.adsl.net.t-com.hr) has joined #haskell
2013-03-28 21:19:41	sproingie	the transformer part is nice, it's the "stack" that's awful
2013-03-28 21:20:15	shachaf	It's just that the implementation is full of things like n^2 instances and lifting and variance all sorts of ad-hoc details that I bet aren't really necessary.
2013-03-28 21:20:15	sproingie	"how many lifts was that?"
2013-03-28 21:20:36	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 264 seconds)
2013-03-28 21:20:37	sproingie	to say nothing of error messages reminiscent of C++ STL
2013-03-28 21:20:47	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Quit: croikle)
2013-03-28 21:21:00	Philippa	sproingie: 'xactly. Where's my row-kinded record of accessors I can compose appropriately?
2013-03-28 21:21:03	<--	trh178` (~user@static-141-158-191-65.cap.east.verizon.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-28 21:21:05	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-28 21:21:11	<--	ulfdoz (~mary@p5B38AD7B.dip.t-dialin.net) has quit (Ping timeout: 255 seconds)
2013-03-28 21:21:11	<--	sarfraz_ (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Quit: leaving)
2013-03-28 21:21:25	<--	xinming (~xinming@125.82.207.161) has quit (Ping timeout: 248 seconds)
2013-03-28 21:21:30	Philippa	shachaf: right, all the bits that are sort-of inflicted by Haskell not being as good at type-level programming as we'd like
2013-03-28 21:21:42	sproingie	mister owl, how many lifts does it take to get to the IO center of a monad transformer stack?
2013-03-28 21:21:50	johnw	fizruk: actually, the mmorph package has a "hoist" which is an fmap for monads
2013-03-28 21:22:12	sproingie	let's see, one, two, liftIO ...
2013-03-28 21:22:36	johnw	and there is a StateT instance...
2013-03-28 21:22:43	fizruk	johnw: sorry, my mind just exploded. Now have to rethink if fmap on monads is what I need…
2013-03-28 21:22:47	shachaf	Philippa: I'm not sure that's the only thing.
2013-03-28 21:22:59	shachaf	Philippa: But I don't know a good solution. All I know is that I don't like the current one. :-)
2013-03-28 21:23:00	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-28 21:23:40	-->	warpy___ (uid1398@gateway/web/irccloud.com/x-hnsqgjynhzjqbefv) has joined #haskell
2013-03-28 21:23:53	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-28 21:24:03	-->	fenton (~fenton@m121-202-251-34.smartone.com) has joined #haskell
2013-03-28 21:24:21	<--	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-03-28 21:24:31	Philippa	shachaf: so there's a major problem with typing 'callbacks' and the like inside a stack and how that interacts with control operations, too
2013-03-28 21:24:50	<--	wi (~smuxi@5ED04B6A.cm-7-1b.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-03-28 21:24:59	Philippa	if the exception layer doesn't know about state then exception handlers can't either, that sort of thing
2013-03-28 21:25:01	<--	fenton (~fenton@m121-202-251-34.smartone.com) has quit (Client Quit)
2013-03-28 21:25:23	shachaf	Yes. Thinking about things like ContT, I'm not sure whether a solution that does everything you'd want it to exists at all.
2013-03-28 21:26:20	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-28 21:26:43	johnw	fizruk: heh, it works
2013-03-28 21:26:52	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-28 21:26:53	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-28 21:26:57	--	`ramses is now known as ramses_
2013-03-28 21:27:06	Philippa	well, the thing about that one is you suddenly want the option of a /recursive/ stack. Which I'm already playing around with in another context where the functor stack is (meta)syntax
2013-03-28 21:27:07	-->	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has joined #haskell
2013-03-28 21:27:14	hpaste	johnw pasted “hoist.hs” at http://hpaste.org/84782
2013-03-28 21:27:17	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-28 21:27:24	johnw	fizruk: --^
2013-03-28 21:27:28	ramses_	have you guys seen that new laters package for monad transformers? It looked really nice at first sight but I haven't looked at it in detail yet
2013-03-28 21:27:34	ramses_	layers*
2013-03-28 21:27:41	johnw	i haven't looked at it either
2013-03-28 21:27:44	vikraman	hi, how do I traverse an aeson Value, without actually making a separate type for it?
2013-03-28 21:27:45	hpaste	implr pasted “ST” at http://hpaste.org/84783
2013-03-28 21:27:56	johnw	vikraman: using aeson-lens
2013-03-28 21:28:26	johnw	it gives you a "key NAME" lens that will let you drill down as you like
2013-03-28 21:28:28	-->	implr (implr@nolajf.pl) has joined #haskell
2013-03-28 21:28:28	ramses_	I think it is supposed to make usage of tranformers less of a burden, although it certainly wont be revolutionary
2013-03-28 21:28:35	fizruk	johnw: that's cool
2013-03-28 21:28:43	implr	hi everyone
2013-03-28 21:28:59	vikraman	i see, i don't know about lenses yet though :(
2013-03-28 21:29:05	fizruk	johnw: I just don't get this type signature: hoist :: Monad m => (forall a. m a -> n a) -> t m b -> t n b
2013-03-28 21:29:08	implr	I've been trying to code something with STUArray and ran across a strange problem
2013-03-28 21:29:11	implr	http://hpaste.org/84783
2013-03-28 21:29:18	implr	why does this behave this way?
2013-03-28 21:29:19	johnw	fizruk: for your case, m and n are both IO, and t is T
2013-03-28 21:29:47	<--	bishopplox_ (88020166@gateway/web/freenode/ip.136.2.1.102) has quit (Quit: Page closed)
2013-03-28 21:29:47	fizruk	johnw: the problem is with a and b, actually =)
2013-03-28 21:30:05	fizruk	oh, i got that
2013-03-28 21:30:23	fizruk	johnw: thanks a lot for showing that stuff! :)
2013-03-28 21:30:25	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-28 21:30:29	johnw	sure thing
2013-03-28 21:30:38	johnw	much nicer to use than monad-control, actually
2013-03-28 21:30:42	johnw	glad you had me look into this
2013-03-28 21:31:35	johnw	shachaf: sure enough
2013-03-28 21:31:37	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-28 21:31:42	johnw	shachaf: hoist on ContT gives: No instance for (MFunctor (ContT ()))
2013-03-28 21:32:01	shachaf	johnw: Lots of things may not work "as expected" here, of course (and couldn't).
2013-03-28 21:32:06	-->	manud (~manu@121.99.93.145) has joined #haskell
2013-03-28 21:32:19	johnw	at least it's a relatively clear "no" answer in this case
2013-03-28 21:32:50	<--	manud (~manu@121.99.93.145) has left #haskell
2013-03-28 21:33:47	shachaf	f k = do { k; k }; hoist f (do { modify (+1); get >>= liftIO print})
2013-03-28 21:33:48	-->	xinming (~xinming@125.82.202.103) has joined #haskell
2013-03-28 21:33:57	shachaf	For instance.
2013-03-28 21:34:13	shachaf	What would you expect that'll do?
2013-03-28 21:34:30	hpc	shachaf: confuse me :P
2013-03-28 21:34:32	johnw	it should toss the state manipulation inside the second do block
2013-03-28 21:34:42	<--	`fogus (~fogus@freedom.d-a-s.com) has quit (Quit: Leaving)
2013-03-28 21:34:43	johnw	the hoist is a "barrier" through which effects may not pass
2013-03-28 21:34:51	x7a1c0b	Which type classes do i have to implement to use fancy features like [a..c] ?
2013-03-28 21:34:53	ramses_	is there an easy to use GUI framework/toolkit for haskell? preferably cross platform? I'd need to have some basic windows with buttons and such
2013-03-28 21:34:55	johnw	otherwise, this wouldn't be MFunctor, it would be MMOnad
2013-03-28 21:34:57	hpc	x7a1c0b: enum
2013-03-28 21:35:00	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 264 seconds)
2013-03-28 21:35:01	shachaf	johnw: ?
2013-03-28 21:35:07	otters	M-m-m-monad
2013-03-28 21:35:13	shachaf	I don't know what that means.
2013-03-28 21:35:18	johnw	see the function "embed"
2013-03-28 21:35:22	shachaf	The final state will be your initial state +1
2013-03-28 21:35:26	luite	ramses_: not really, wxHaskell and gtk2hs take some work to install
2013-03-28 21:35:33	johnw	so, hoist, like fmap, is ignorant of context
2013-03-28 21:35:39	x7a1c0b	hpc Should deriving Enum work? I get "A section must be enclosed in parentheses
2013-03-28 21:35:39	x7a1c0b	      thus: (February.. December)"
2013-03-28 21:35:50	ramses_	luite: yeah, I saw those and they seemed like a pain to get going, hence the question...
2013-03-28 21:35:50	johnw	and embed, like liftM, can mutate context
2013-03-28 21:35:58	johnw	hmm
2013-03-28 21:36:01	johnw	wait, liftM doesn't do that
2013-03-28 21:36:15	shachaf	Anyway I'll be back later.
2013-03-28 21:36:28	johnw	shachaf: i'm going to try your hoist code
2013-03-28 21:36:30	johnw	one sec
2013-03-28 21:36:35	ramses_	is it a matter of no one wanting to sped the effort or are there more serious reasons?
2013-03-28 21:36:44	ramses_	s/sped/spend
2013-03-28 21:37:00	shachaf	johnw: Here: http://slbkbs.org/beep.hs
2013-03-28 21:37:02	sproingie	layers looks really interesting
2013-03-28 21:37:03	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-28 21:37:05	-->	cognominal (~cognomina@37.161.188.104) has joined #haskell
2013-03-28 21:37:29	-->	peterhil` (~peterhil@a91-154-228-199.elisa-laajakaista.fi) has joined #haskell
2013-03-28 21:37:31	<--	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has quit (Quit: anRch)
2013-03-28 21:37:34	luite	ramses_: nah it's just a lot of work to maintain, and their api's arent't terribly haskelly
2013-03-28 21:37:38	johnw	shachaf: huh, you're right
2013-03-28 21:37:52	johnw	shachaf: contrary to my expectations, the +1 modifies the state of the code calling hoist
2013-03-28 21:37:55	shachaf	It's the only reasonable thing that code could do.
2013-03-28 21:38:03	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-28 21:38:04	shachaf	Unfortunately it's only locally reasonable.
2013-03-28 21:38:11	ramses_	luite: and no one is doing any serious GUI stuff in haskell then?
2013-03-28 21:38:17	shachaf	Now imagine the IO action stores a callback in an IORef. What do you want *that* to do?
2013-03-28 21:38:37	shachaf	Anyway I need to go.
2013-03-28 21:38:41	 *	shachaf vanishes in a puff of orange smoke.
2013-03-28 21:38:42	johnw	ok
2013-03-28 21:38:43	johnw	thanks
2013-03-28 21:39:00	`^_^v	what's the difference between a monoid and a MonadPlus?
2013-03-28 21:39:11	ramses_	sproingie: yeah it does, although the docs started to lose me towards the end
2013-03-28 21:39:17	luite	ramses_: dunno, i think many gui things are web based now, at least fpcomplete seems to be going that direction
2013-03-28 21:39:21	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-03-28 21:39:28	sproingie	they lost me much earlier but my attention sp--ooh shiny
2013-03-28 21:39:29	-->	steven_is_false (~user@d66-183-57-118.bchsia.telus.net) has joined #haskell
2013-03-28 21:39:55	ramses_	luite: ah, and what do they use for graphics stuff then? That might be acceptable to me as well
2013-03-28 21:39:56	S11001001	`^_^v: consider Semigroup a => Monoid (Maybe a).  Can you write this behavior with MonadPlus Maybe?
2013-03-28 21:40:07	johnw	ok, queuing http://hackage.haskell.org/packages/archive/layers/0.1/doc/html/Documentation-Layers-Overview.html to read later
2013-03-28 21:40:40	johnw	since it mentions stuff like, "Can every type that is currently an instance of MonadTrans be made an instance of MFunctor too? The answer, unfortunately, is no. Once again, ContT proves too stubborn, and won't permit an instance of MFunctor. However, the idea behind MFunctor/hoist is "close", and it certainly seems to be on the right track."
2013-03-28 21:40:50	<--	permagreen (~donovan@204-195-27-175.wavecable.com) has quit (Quit: USER DEAD IMMINENT)
2013-03-28 21:41:11	 *	sproingie does the sideways-puppy-dog-head-cocked thing
2013-03-28 21:41:15	luite	ramses_: oh for simple graphics without much windowing requirement you can use gloss
2013-03-28 21:41:16	ramses_	`^_^v: the monad...
2013-03-28 21:42:01	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-03-28 21:42:09	Cale	`^_^v: The monad, and the fact that if we have (MonadPlus m) then m a is essentially a monoid for all types a, not just one particular type.
2013-03-28 21:42:11	<--	osa1 (~omer@176.237.226.108) has quit (Quit: Konversation terminated!)
2013-03-28 21:42:13	<--	steven_is_false (~user@d66-183-57-118.bchsia.telus.net) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-28 21:43:11	hpaste	supki annotated “ST” with “ST (annotation)” at http://hpaste.org/84783#a84784
2013-03-28 21:43:22	supki	implr: I guess you meant something like that?
2013-03-28 21:43:40	-->	saml (~saml@pool-71-183-131-29.nycmny.east.verizon.net) has joined #haskell
2013-03-28 21:44:06	saml	setup: Use of GHC's environment variable GHC_PACKAGE_PATH is incompatible with Cabal. Use the flag --package-db to specify a package database (it can be used multiple times).
2013-03-28 21:44:10	saml	what do I do?
2013-03-28 21:44:50	luite	upgrade your hsenv
2013-03-28 21:44:57	saml	not sure what that means
2013-03-28 21:45:09	luite	i'm just wildly guessing :p
2013-03-28 21:45:09	saml	bash: hsenv: command not found
2013-03-28 21:45:36	geekosaur	saml, what are you using, if anything?
2013-03-28 21:45:38	implr	supki: works, thanks
2013-03-28 21:45:45	luite	saml: ok, something has set GHC_PACKAGE_PATH, hsenv did that, how did you install ghc, what platform?
2013-03-28 21:45:47	saml	i'm tryin got do cabal install cabal-install
2013-03-28 21:45:53	implr	the whole forall thing is still confusing to me
2013-03-28 21:45:57	ramses_	luite: hmm, that doesn't seem to allow interactive GUIs, does it? For stuff in "the web direction" where you thinking haskell in the backend and some js in the frontend then?
2013-03-28 21:46:06	saml	i'm using justhub  http://justhub.org/overview   on centos 5.5
2013-03-28 21:46:08	-->	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has joined #haskell
2013-03-28 21:46:15	ramses_	I have a hard time to believe no one is doing desktop application in haskell..
2013-03-28 21:46:48	`^_^v	that makes sense, thanks all
2013-03-28 21:47:05	luite	ramses_: gloss is not web based, it's an opengl based drawing thing (although there's a web version that uses canvas, communicates with a haskell backend)
2013-03-28 21:47:06	-->	oio (ba54a08a@gateway/web/freenode/ip.186.84.160.138) has joined #haskell
2013-03-28 21:47:15	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-28 21:47:29	oio	complete remoce Haskell platform
2013-03-28 21:47:34	oio	*remove
2013-03-28 21:47:44	oio	for reinstall on mac os x ?
2013-03-28 21:47:46	ramses_	luite: yeah, I got that..
2013-03-28 21:47:47	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 260 seconds)
2013-03-28 21:48:15	<--	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 21:48:24	ramses_	luite: I just want to somehow make an interactive GUI application, web based is fine but I don't want to spend half of my time writing js..
2013-03-28 21:48:42	luite	ramses_: well i just happen to be working on a haskell->js compiler ;)
2013-03-28 21:49:00	ramses_	luite: hehe, will it be finished soon? :)
2013-03-28 21:49:00	supki	implr: as I understand it, when you pattern match on Bar, you need to peek some s to type t, say s1; but now you can't pass t to runSTUArray, since it expects t to be fully polymorphic
2013-03-28 21:49:06	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-28 21:49:10	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-28 21:49:29	ChongLi	luite: oh yeah?
2013-03-28 21:49:59	luite	ramses_: finished as in 'done', not really, but we should have a user-usable release out before GHC 7.8.1
2013-03-28 21:50:00	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-28 21:50:38	ChongLi	is there any way for a haskell-js compiler to take advantage of asm.js optimizations?
2013-03-28 21:50:39	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-28 21:50:44	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-28 21:50:51	luite	ChongLi: argh why does everyone keep asking that question :p
2013-03-28 21:50:56	ChongLi	haha
2013-03-28 21:50:58	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-28 21:51:16	luite	ChongLi: the answer is probably not
2013-03-28 21:51:36	ChongLi	implement the haskell heap as a js typed array and bring the entire GHC runtime and GC into javascript?
2013-03-28 21:52:01	simpson	That sounds like a horrible plan.
2013-03-28 21:52:04	-->	icarot (~icarot@2600:1010:b10b:873f:0:10:b475:6b01) has joined #haskell
2013-03-28 21:52:11	luite	yes I did that to some extent, but i didn't feel comfortable maintaining that
2013-03-28 21:52:22	<--	icarot (~icarot@2600:1010:b10b:873f:0:10:b475:6b01) has quit (Client Quit)
2013-03-28 21:52:27	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-28 21:52:28	luite	might revisit that when the rest of ghcjs works fine etc
2013-03-28 21:52:34	luite	but for now it's using javascript objects again
2013-03-28 21:52:42	ChongLi	ahh, damn
2013-03-28 21:53:26	ChongLi	is javascript the most hated language in the world?
2013-03-28 21:53:27	ChongLi	haha
2013-03-28 21:53:35	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: No route to host)
2013-03-28 21:53:47	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-28 21:53:50	luite	haskell is relatively GC friendly, since there are not too many places that can mutate data, but still, writing a good GC with acceptable performance and pauses for interactive apps is not quite trivial :)
2013-03-28 21:53:59	-->	icarot (~icarot@2600:1010:b10b:873f:0:10:b475:6b01) has joined #haskell
2013-03-28 21:54:17	ChongLi	hmm
2013-03-28 21:54:24	-->	trescenzi (~trescenzi@2620:91:0:163:d03c:ff6a:4a1d:49ee) has joined #haskell
2013-03-28 21:54:25	luite	asm.js is really ment for non-gc languages
2013-03-28 21:54:28	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-28 21:54:28	luite	meant
2013-03-28 21:54:32	sproingie	haskell generates vast amounts of garbage but sweeps it up just as quickly
2013-03-28 21:54:46	ChongLi	what about some radical whole-program optimization a la stalin scheme?
2013-03-28 21:54:52	simpson	asm.js is for people that have not learned the lessons of the past.
2013-03-28 21:55:01	sproingie	it's when you start dealing with large maps or arrays that things start to bog
2013-03-28 21:55:01	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 248 seconds)
2013-03-28 21:55:01	mcstar	haskell needs Lenin
2013-03-28 21:55:20	ChongLi	stalin scheme gets rid of GC entirely as far as I know
2013-03-28 21:55:25	ChongLi	uses region-based memory management
2013-03-28 21:55:28	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-28 21:55:30	mcstar	rust
2013-03-28 21:55:39	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-28 21:55:42	mcstar	friend of mine always talks about rust to me
2013-03-28 21:55:46	implr	supki: yeah, that makes sense
2013-03-28 21:55:52	sproingie	i'd like to see something actually written in rust
2013-03-28 21:55:53	<--	Pocket (72a656ef@gateway/web/freenode/ip.114.166.86.239) has quit (Ping timeout: 245 seconds)
2013-03-28 21:56:03	mcstar	the compiler?
2013-03-28 21:56:05	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-28 21:56:07	sproingie	besides that
2013-03-28 21:56:07	mcstar	:)
2013-03-28 21:56:12	ChongLi	stalin scheme also eliminates closures
2013-03-28 21:56:14	luite	sproingie: fortunately some javascript engines have a reasonably efficient allocator, but firefox really suffers with its non-generational gc
2013-03-28 21:56:18	<--	fizruk (59f9a510@gateway/web/freenode/ip.89.249.165.16) has quit (Ping timeout: 245 seconds)
2013-03-28 21:56:22	ChongLi	and other pretty radical transformations
2013-03-28 21:56:23	luite	often 4x slower than v8 with ghcjs produced programs
2013-03-28 21:56:43	-->	luisgabriel_ (~luisgabri@177.159.209.55) has joined #haskell
2013-03-28 21:56:55	ChongLi	yeah this is why you want to circumvent the browser gc
2013-03-28 21:56:56	<--	luisgabriel (~luisgabri@177.158.144.212) has quit (Ping timeout: 256 seconds)
2013-03-28 21:57:07	luite	ChongLi: nah they're working on a new one
2013-03-28 21:57:14	luite	I'd rather have them do it than me
2013-03-28 21:57:23	simpson	ChongLi: So, there's at least one Haskell compiler that does full-program compilation and optimization. It's *slow* and runs out of memory easily.
2013-03-28 21:57:35	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-28 21:57:46	ChongLi	simpson: runs out of memory on big machines?
2013-03-28 21:57:48	-->	bos_ (~bos@173.252.71.4) has joined #haskell
2013-03-28 21:58:29	luite	ChongLi: anyway the heap-in-an-array branch is still there, though a bit out of date. if you feel like hacking on a gc in js you're welcome :)
2013-03-28 21:58:38	sproingie	simpson: Supero?
2013-03-28 21:58:44	simpson	ChongLi: JHC.
2013-03-28 21:58:51	luite	but for acceptable performance you'll need to have at least a generational gc with incremental marking
2013-03-28 21:58:56	-->	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has joined #haskell
2013-03-28 21:58:59	<--	bos (~bos@173.252.71.4) has quit (Ping timeout: 260 seconds)
2013-03-28 21:59:01	saml	https://gist.github.com/saml/c63c0f2c68be984ce2d6  what is this? how do you install cipher-aes   ?
2013-03-28 21:59:06	saml	is there c library dependency?
2013-03-28 21:59:28	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-03-28 21:59:31	ChongLi	luite: ideally wouldn't it just be the GHC gc compiled to js via emscripten?
2013-03-28 21:59:56	luite	ChongLi: yes that's the other thing everyone always suggests
2013-03-28 22:00:02	-->	ulfdoz (~mary@p5B38AD7B.dip.t-dialin.net) has joined #haskell
2013-03-28 22:00:04	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 240 seconds)
2013-03-28 22:00:11	ChongLi	I'm just shooting from the hip here
2013-03-28 22:00:13	luite	also just used the GHC LLVM output, pipe it through emscripten and you're done
2013-03-28 22:00:16	ChongLi	I haven't actually investigated
2013-03-28 22:00:28	luite	hehe i'm not actually annoyed
2013-03-28 22:00:32	mcstar	sproingie: he showned me this https://github.com/pcwalton/sprocketnes
2013-03-28 22:00:56	sproingie	ah nice
2013-03-28 22:01:02	luite	but given that it's already quite hard to compile hugs and jhc things (ask ChrisDone) to js with emscripten, it's not going to be trivial
2013-03-28 22:01:04	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 240 seconds)
2013-03-28 22:01:19	ChongLi	I think what everybody wants is to be able to compile all of their fave languages through LLVM -> emscripten and get a nice, super-fast js that runs everywhere
2013-03-28 22:01:25	sproingie	can't say i'm a fan of rust's syntax, but it has some nice ideas anyway
2013-03-28 22:01:38	stephenjudkins	luite: from what I understand, emscripten can't compile arbitrary LLVM bytecode, only a subset that comes from certain C compilers
2013-03-28 22:01:46	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-28 22:01:47	stephenjudkins	at least last time I checked, it couldn't deal with C++
2013-03-28 22:01:58	luite	stephenjudkins: yes, the CPS stye that GHC emits wouldn't really work
2013-03-28 22:02:00	simpson	ChongLi: FSVO "everybody". Some of us want to kill JS.
2013-03-28 22:02:15	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-28 22:02:16	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-28 22:02:17	sproingie	BTW, anyone know of a greasemonkey script that gets rid of github's sliding animations?
2013-03-28 22:02:18	luite	stephenjudkins: i asked alon zakai lasth month
2013-03-28 22:02:19	ChongLi	yeah I'd love to kill js too
2013-03-28 22:02:23	ChongLi	but replace it with what?
2013-03-28 22:02:26	<--	stat_vi (~stat@dslb-094-218-229-164.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-28 22:02:28	simpson	Don't replace it.
2013-03-28 22:02:48	ChongLi	so just go back to static web pages?
2013-03-28 22:02:49	luite	ChongLi: something like PNaCl sounds reasonable
2013-03-28 22:02:50	stephenjudkins	i had high hopes for pnacl, but google's not getting their act together on it.
2013-03-28 22:03:03	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: [BX] Reserve your copy of BitchX-1.2c01-svn for the Sony Playstation 1 today!)
2013-03-28 22:03:09	ChongLi	pnacl doesn't seem to have a chance
2013-03-28 22:03:12	simpson	History has shown us that, given the opportunity to script any kind of dynamic behavior into browsers, people will abuse it to create full applications.
2013-03-28 22:03:26	luite	and mozilla doesn't like it because they're working on asm.js with epic games
2013-03-28 22:03:30	oio	anyone know why haskell platform downloading is taking so long
2013-03-28 22:03:38	oio	5 hours ETA
2013-03-28 22:03:45	ParahSailin	global internet ddos
2013-03-28 22:03:46	ChongLi	you call it abuse if you want
2013-03-28 22:04:03	ChongLi	most people just want to write some code that can run on anything without being installed
2013-03-28 22:04:04	<--	[[zz]] (~q@node-8dm.pool-125-25.dynamic.totbb.net) has quit (Read error: Connection reset by peer)
2013-03-28 22:04:23	ChongLi	and java applets failed in that regard
2013-03-28 22:04:29	oio	nope the last time was the same
2013-03-28 22:04:31	ChongLi	too slow to start up!
2013-03-28 22:04:33	simpson	ChongLi: Well, but then some people invented Offline Storage.
2013-03-28 22:04:44	simpson	So things are still being installed, but in a way that you can't easily manage.
2013-03-28 22:04:50	<--	bytbox (~s@srl.student.umd.edu) has quit (Ping timeout: 255 seconds)
2013-03-28 22:04:51	luite	anyway, install ghc 7.8.1 when its out, do cabal update; cabal install ghcjs, and you're good to go :p performance will be reasonable
2013-03-28 22:04:58	simpson	Also, nobody *actually* wants to run on every platform.
2013-03-28 22:05:00	oio	a buddy here downloaded himself uploaded to his dropbox account
2013-03-28 22:05:02	-->	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has joined #haskell
2013-03-28 22:05:05	oio	a gave the link
2013-03-28 22:05:06	sproingie	at least nacl at least builds a new foundation rather than basing things on a tower of hacks like javascript + css + html + xmlhttprequest
2013-03-28 22:05:08	ChongLi	luite: I use firefix!
2013-03-28 22:05:10	ChongLi	firefox
2013-03-28 22:05:11	ChongLi	rather
2013-03-28 22:05:17	ChongLi	actually aurora
2013-03-28 22:05:22	luite	ChongLi: I hope they have the new garbage collector ready by then then
2013-03-28 22:05:25	ChongLi	I don't know if it has the new gc or not
2013-03-28 22:05:26	simpson	Because then somebody will message you and ask you why your thing doesn't work on AIX.
2013-03-28 22:05:29	-->	[[zz]] (~q@node-4m3.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-28 22:05:32	luite	ChongLi: no it's still experimental
2013-03-28 22:05:39	simpson	And what will you say? "Oh, yes, I don't have AIX, but I'd love to help you out?" Not likely!
2013-03-28 22:05:56	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 22:05:57	<--	perlite (~perlite@114-25-204-182.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-03-28 22:06:01	ChongLi	sproingie: who says we have to have that?
2013-03-28 22:06:08	startling	is there a Num instance that will let me write a function like "\d -> 20 * d" and let me pretty-print it as "20x"?
2013-03-28 22:06:26	ChongLi	I envision a future where your "web page" is just an html wrapper around the real program
2013-03-28 22:06:36	newsham	> 20 * a
2013-03-28 22:06:37	sproingie	ChongLi: we don't, i just don't want the future of application development to be javascript
2013-03-28 22:06:38	lambdabot	  20 * a
2013-03-28 22:06:39	ChongLi	everything you see after it loads is dynamic
2013-03-28 22:06:44	newsham	> 2 * a * 10
2013-03-28 22:06:46	lambdabot	  2 * a * 10
2013-03-28 22:06:52	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-28 22:07:02	<--	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has quit (Read error: Connection reset by peer)
2013-03-28 22:07:07	startling	newsham: yeah; I want a more mathy syntax
2013-03-28 22:07:11	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-28 22:07:13	-->	perlite (~perlite@114-36-247-1.dynamic.hinet.net) has joined #haskell
2013-03-28 22:07:16	simpson	ChongLi: I envision a future where applications stop wasting CPU time.
2013-03-28 22:07:18	ChongLi	the idea behind asm.js is so we don't code in js anymore
2013-03-28 22:07:19	startling	I know it'd be doable, I'm just wondering if it exists.
2013-03-28 22:07:20	sproingie	or dart for that matter
2013-03-28 22:07:21	ChongLi	but just compile to it
2013-03-28 22:07:32	-->	mast_ (18721611@gateway/web/freenode/ip.24.114.22.17) has joined #haskell
2013-03-28 22:07:36	newsham	startling: that is mathy
2013-03-28 22:07:39	-->	pt (~ptpt@84.114.230.154) has joined #haskell
2013-03-28 22:07:41	startling	or even if there's a general framework for introspecting expressions with Num
2013-03-28 22:07:41	simpson	But it's such a shitty language to compile to!
2013-03-28 22:07:47	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-28 22:07:50	luite	ChongLi: yeah but you comple only to a very limited subset of javascript
2013-03-28 22:07:51	mast_	hey everyone
2013-03-28 22:07:54	ChongLi	simpson: what's a better alternative?
2013-03-28 22:07:56	mast_	i have a quick question
2013-03-28 22:07:58	startling	newsham, well, how you'd handwrite math
2013-03-28 22:07:59	newsham	www.funmath.be
2013-03-28 22:08:01	luite	ChongLi: i don't think asm.js allows object allocation, does it?
2013-03-28 22:08:09	luite	inside an asm.js function
2013-03-28 22:08:13	simpson	ChongLi: For starters, ignoring JS and the Web entirely.
2013-03-28 22:08:24	ChongLi	simpson: that's not an alternative
2013-03-28 22:08:34	newsham	ignorance is bliss, but the pay is not very good.
2013-03-28 22:08:45	simpson	ChongLi: Sure it is! XBoxes do it, Steam does it, and you could be doing it.
2013-03-28 22:08:53	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 248 seconds)
2013-03-28 22:08:55	<--	Damgaard1 (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 264 seconds)
2013-03-28 22:08:58	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-28 22:08:58	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-28 22:08:58	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-28 22:09:05	startling	simpson, says the guy who survived writing a websockets implementation
2013-03-28 22:09:06	simpson	Do you think that iPhones boot to a web browser?
2013-03-28 22:09:09	sproingie	doesnt steam use flash?
2013-03-28 22:09:11	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Quit: Leaving)
2013-03-28 22:09:13	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 240 seconds)
2013-03-28 22:09:21	simpson	startling: Hey, I was paid and also I was cursing the entire time.
2013-03-28 22:09:22	mast_	Why would we have failure to visit all nodes in a tree if a variable arm aborts?
2013-03-28 22:09:25	ChongLi	all of those are different platforms
2013-03-28 22:09:26	luite	steam uses at least webkit in its interface
2013-03-28 22:09:29	<--	dylukes (~dylukes@c-98-236-69-114.hsd1.pa.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 22:09:37	luite	probably much of the steam store is scripted with javascript
2013-03-28 22:09:37	ChongLi	I don't want to port to them all
2013-03-28 22:09:49	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-28 22:09:50	startling	simpson: heh
2013-03-28 22:09:57	<--	dolio (~dolio@gw1.mcgraw-hill.com) has quit (Ping timeout: 248 seconds)
2013-03-28 22:10:02	simpson	ChongLi: You *can't* port to them all! Surprise!
2013-03-28 22:10:16	ChongLi	I just want to write a program in plain haskell and push a button so it runs super fast on every device with a CPU in it!
2013-03-28 22:10:22	<--	RayNbow`TU (~kirika@s55967d29.adsl.online.nl) has quit (Quit: leaving)
2013-03-28 22:10:25	simpson	luite: How sad will you be to learn that it's C++ with a couple C# shims?
2013-03-28 22:10:31	ChongLi	and have users able to run it just by visiting a URL
2013-03-28 22:10:49	simpson	ChongLi: So, why does the Web have to be involved in URLs?
2013-03-28 22:11:05	mast_	can anyone please point me in the directtion for theory of haskell
2013-03-28 22:11:09	ChongLi	because URLs are an easy way to find and pass things around
2013-03-28 22:11:10	simpson	ChongLi: You are advocating working with broken infrastructure. I'm advocating tearing down the bad things and designing better things.
2013-03-28 22:11:22	<--	sleepynate (~sleepynat@199.16.190.194) has quit (Remote host closed the connection)
2013-03-28 22:11:24	snhmib	http;//server.com/doit.exe
2013-03-28 22:11:24	luite	simpson: really? so they use the webkit API just to thisplay the pages?
2013-03-28 22:11:26	simpson	mast_: Like, the report that talks about the design of Haskell and what it can do?
2013-03-28 22:11:32	mast_	I want to know about statefull programming
2013-03-28 22:11:49	ChongLi	simpson: how often in human history have we ever done that?
2013-03-28 22:11:49	simpson	luite: Yup. Or any other browser control; Steam in Wine uses Gecko.
2013-03-28 22:11:57	simpson	ChongLi: Clearly not often enough! >:3
2013-03-28 22:12:22	ChongLi	no, it's all about glomming on more things to an ever-expanding ball of mud!
2013-03-28 22:12:25	kylcarte	mast_: what's your question?
2013-03-28 22:12:31	<--	samedhi (~stephen@208.70.28.214) has quit (Ping timeout: 264 seconds)
2013-03-28 22:12:36	luite	simpson: ah dunno if that makes me sad, a browser control is not a terrible way to do crosplatform layout of some text/images
2013-03-28 22:12:37	mast_	Why would we have failure to visit all nodes in a tree if a variable arm aborts?
2013-03-28 22:12:42	simpson	ChongLi: Anyway, to tie these two things together: Steam has steam:// URLs for manipulating and launching things from your library.
2013-03-28 22:12:47	<--	shanse (~generic@2001:470:9d22:0:fe2d:5a9e:e932:2f45) has quit (Read error: Operation timed out)
2013-03-28 22:12:55	sproingie	gecko has a thing that mimics IWebBrowse
2013-03-28 22:12:59	simpson	luite: Sure. But don't think for a second that Steam's games are done in JS, 'cause they're not.
2013-03-28 22:13:02	kylcarte	mast_: I'm not sure what you mean. Do you have an example?
2013-03-28 22:13:02	sproingie	steam thinks it's IE
2013-03-28 22:13:18	<--	petrus (~petrus@unaffiliated/petrus) has quit (Quit: Leaving)
2013-03-28 22:13:21	mast_	I know that "failure-atomicity mechanism" helps repair this issue
2013-03-28 22:13:24	luite	simpson: oh i didn't... though isn't that up to the game devs themselves?
2013-03-28 22:13:30	simpson	luite: Sure.
2013-03-28 22:13:39	ChongLi	yeah, steam even has flash games
2013-03-28 22:13:40	<--	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (Ping timeout: 246 seconds)
2013-03-28 22:13:41	simpson	C++ still reigns supreme in game development.
2013-03-28 22:13:46	sproingie	steam's just a delivery system
2013-03-28 22:13:56	sproingie	well and an in-game library
2013-03-28 22:14:06	--	quuxman_ is now known as quuxman
2013-03-28 22:14:12	simpson	ChongLi: You've been able to make standalone executables that bundle the Flash runtime ever since Shockwave and Flash were separate programs.
2013-03-28 22:14:13	snhmib	and all that from boiling water
2013-03-28 22:14:16	snhmib	that's great
2013-03-28 22:14:17	mast_	it was posted by someone on paste bin : http://ja.pastebin.ca/2343768
2013-03-28 22:14:39	mast_	I am trying to get the answer for all those questions
2013-03-28 22:14:48	ChongLi	simpson: yeah, too bad for us linux users :(
2013-03-28 22:15:00	ChongLi	damn devs won't bother to bundle up for linux!
2013-03-28 22:15:05	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-28 22:15:12	simpson	ChongLi: Again, I believe in fixing problems when possible, and removing problems from existence when it benefits us to do so.
2013-03-28 22:15:20	simpson	mast_: Looks like homework. Have you asked your TA?
2013-03-28 22:15:28	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-28 22:15:40	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-28 22:15:44	-->	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has joined #haskell
2013-03-28 22:15:46	-->	shanse (~generic@2001:470:9d22:0:fe2d:5a9e:e932:2f45) has joined #haskell
2013-03-28 22:15:46	ChongLi	wishful thinking!
2013-03-28 22:15:52	<--	stephenjudkins (~textual@68.178.19.17) has quit (Quit: Computer has gone to sleep.)
2013-03-28 22:15:55	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-28 22:16:00	startling	snhmib: just wait till we get to internal combustion
2013-03-28 22:16:01	mast_	TA says can't help since he woud give out the answer. its all theory thats why
2013-03-28 22:16:07	<--	peterhil` (~peterhil@a91-154-228-199.elisa-laajakaista.fi) has quit (Ping timeout: 264 seconds)
2013-03-28 22:16:07	ChongLi	that's the most important lesson to learn as a functional programmer!
2013-03-28 22:16:12	simpson	ChongLi: Not really. Ever used a language without NULL-terminated strings?
2013-03-28 22:16:29	startling	mast_: sounds like a lousy TA
2013-03-28 22:16:35	ChongLi	what, like pascal?
2013-03-28 22:16:50	simpson	Things like bounds checking, fixed-size numbers, illegal states... we *eliminated* these problems by altering the way that we think about computation.
2013-03-28 22:17:01	mast_	lol this is the class that everyone wants to avoid taking with this prof
2013-03-28 22:17:08	--	koninkje_away is now known as koninkje
2013-03-28 22:17:57	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 248 seconds)
2013-03-28 22:18:56	-->	sethroot (~sethroot@108.71.82.84) has joined #haskell
2013-03-28 22:19:06	mast_	would u be able to help is i provide you with all the files?
2013-03-28 22:19:30	mast_	lectur notes, problems hints?
2013-03-28 22:19:33	-->	resnik_ (~resnik@108.71.82.84) has joined #haskell
2013-03-28 22:19:44	mcstar	but i keep the grade, ok?
2013-03-28 22:19:47	<--	resnik_ (~resnik@108.71.82.84) has quit
2013-03-28 22:19:53	<--	edeast (~chatzilla@24.114.26.118) has quit (Ping timeout: 256 seconds)
2013-03-28 22:19:59	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-28 22:20:12	-->	stat_vi (~stat@dslb-094-218-229-164.pools.arcor-ip.net) has joined #haskell
2013-03-28 22:21:05	mcstar	that pastebin seems to have the shittiest fonts ever, does it look like crap for you guys?
2013-03-28 22:21:18	mast_	please really stuck
2013-03-28 22:21:42	<--	saml (~saml@pool-71-183-131-29.nycmny.east.verizon.net) has quit (Quit: Leaving)
2013-03-28 22:22:00	<--	mspells (~matthew@c-24-11-54-30.hsd1.mi.comcast.net) has quit (Remote host closed the connection)
2013-03-28 22:22:13	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 248 seconds)
2013-03-28 22:22:31	snhmib	mast maybe it helps if you're able to think a bit and type out what you're actually stuck with instead of dumping someone else's questions and say 'i need answers'
2013-03-28 22:22:40	<--	brill (~brill@78.156.103.250) has quit (Quit: Lost terminal)
2013-03-28 22:22:48	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 260 seconds)
2013-03-28 22:22:52	ab9rf	i'll provide answers for you for a 'reasonable fee
2013-03-28 22:23:03	simpson	I left school and never want to go back.
2013-03-28 22:23:15	mcstar	dont tempt me..
2013-03-28 22:23:22	mcstar	i wanna finish
2013-03-28 22:23:27	ab9rf	simpson: my kids get enough homework to satisfy my need to do homework.
2013-03-28 22:23:40	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-28 22:24:00	simpson	ab9rf: Ha!
2013-03-28 22:24:09	mcstar	anyway, am i the only one who thinks that font looks crappy?
2013-03-28 22:24:10	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-28 22:24:15	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit
2013-03-28 22:24:15	ab9rf	simpson: not that it takes much to satisfy that need :)
2013-03-28 22:24:31	mast_	sure i'll pay if you want me to
2013-03-28 22:24:35	-->	mspells (~matthew@c-24-11-54-30.hsd1.mi.comcast.net) has joined #haskell
2013-03-28 22:24:42	ab9rf	although honestly if you have some good introductor programming problems, i'll be glad to give them to my daughter :)
2013-03-28 22:24:48	mast_	i really need this done
2013-03-28 22:25:00	ab9rf	mast_: could you ask a more focused question?
2013-03-28 22:25:30	<--	ecuderpam (~rjclarkso@66.102.14.32) has quit (Quit: leaving)
2013-03-28 22:25:36	slack1256	mast_: is even your class about haskell or functional programming?
2013-03-28 22:25:47	ramses_	mcstar: looks terrible here as well
2013-03-28 22:25:51	mast_	hmm but those are the questions given
2013-03-28 22:26:13	mast_	its about programming languages.
2013-03-28 22:26:28	mast_	mainly haskell
2013-03-28 22:26:33	ab9rf	the font issue sare because that site is japanese
2013-03-28 22:26:34	ramses_	mast_: have you done any effort already? Do you have some partial answers yet?
2013-03-28 22:26:36	mast_	we never learned haskell
2013-03-28 22:26:41	ab9rf	for some reason japanese uses really ugly fonts
2013-03-28 22:27:01	mast_	I have partial answers for 1, 2, 3
2013-03-28 22:27:04	snhmib	is it just me or are those questions nonsense-ish
2013-03-28 22:27:10	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-28 22:27:11	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-28 22:27:24	ramses_	ab9rf: haha, that can't possibly be true? Don't japanese people ever visit sites with normal fonts?
2013-03-28 22:27:27	monochrom	it is not haskell, neither syntactically nor semantically
2013-03-28 22:27:49	ab9rf	ramses_: i don't understand it either, but i see it all the time
2013-03-28 22:28:00	monochrom	but the semantics seems to be some kind of transactional memory
2013-03-28 22:28:11	ab9rf	yeah, there's a type signature of Vertex -> Vertex -> (*)
2013-03-28 22:28:17	ab9rf	(*) is not a Haskell type
2013-03-28 22:28:18	slack1256	but japan has a lot of cool ascii art \(ºwº)/
2013-03-28 22:28:23	mast_	is there a way i can send you the lecture notes or hints?
2013-03-28 22:28:28	mast_	like email?
2013-03-28 22:28:45	ab9rf	slack1256: you should define an operator in haskell that looks like that :)
2013-03-28 22:28:58	slack1256	ab9rf: haven't you heard of 'data (*) = Iamreal | NoIamnot
2013-03-28 22:29:09	ab9rf	slack1256: haha
2013-03-28 22:29:33	ab9rf	this is a haskell-like language but it's not haskell
2013-03-28 22:29:36	monochrom	I have only heard of "data Me = Myself | MeToo"
2013-03-28 22:29:59	slack1256	ab9rf: Implying I am not already using it in my library, SuperLens(tm)
2013-03-28 22:30:03	<--	oio (ba54a08a@gateway/web/freenode/ip.186.84.160.138) has quit (Ping timeout: 245 seconds)
2013-03-28 22:30:16	-->	madjestic (~madjestic@188.88.173.3) has joined #haskell
2013-03-28 22:30:36	slack1256	data You = Notme | AlsoNotHim
2013-03-28 22:30:45	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-28 22:30:45	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-28 22:30:47	slack1256	> data You = Notme | AlsoNotHim
2013-03-28 22:30:48	lambdabot	  <hint>:1:1: parse error on input `data'
2013-03-28 22:31:05	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-28 22:31:23	<--	izym (~izym@82.211.222.212) has quit (Quit: Lost terminal)
2013-03-28 22:31:23	ramses_	mast_: seriously, no one is just going to solve your homework...
2013-03-28 22:31:41	ramses_	certainly not a list of graded questions
2013-03-28 22:31:55	ab9rf	indeed.
2013-03-28 22:32:04	<--	morazow (~morazow@gsd116.gsd.inesc-id.pt) has quit (Ping timeout: 256 seconds)
2013-03-28 22:32:14	monochrom	it is a lot of work, and I'm too lazy today
2013-03-28 22:32:22	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-03-28 22:32:27	slack1256	you could do what I did when needed linux answers
2013-03-28 22:32:36	slack1256	troll a CS channel until they responded
2013-03-28 22:32:53	slack1256	'X is such bleh, because I can't to Y'
2013-03-28 22:33:01	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-28 22:33:04	implr	supki: meh, looks like I got another problem
2013-03-28 22:33:04	mast_	please if you can help
2013-03-28 22:33:14	implr	I can't figure out how to create that array
2013-03-28 22:33:15	slack1256	'Oh no you didn't you obviously do Y here is how, you flamboyan hippy'
2013-03-28 22:33:21	mast_	i really need this done in a 30 min
2013-03-28 22:33:25	mast_	have to hand it
2013-03-28 22:33:27	ramses_	slack1256: haha :)
2013-03-28 22:33:38	--	Mode #haskell [+o glguy_] by ChanServ
2013-03-28 22:33:43	ozataman_	anybody familiar with http-conduit? does the Manager become invalid after an exception and outside the same runResourceT block?
2013-03-28 22:33:45	<--	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 22:33:45	implr	something like this http://hpaste.org/84785
2013-03-28 22:33:52	implr	but that is obviously incorrect
2013-03-28 22:33:54	--	Mode #haskell [+q *!*@gateway/web/freenode/ip.24.114.22.17] by glguy_
2013-03-28 22:34:01	ab9rf	heh
2013-03-28 22:34:19	monochrom	I don't like that tactic, but that's another story. my story today is: I don't know how to apply that tactic to this question, which is a semantics question rather than a write-a-program question.
2013-03-28 22:34:31	ab9rf	should i contact J. Bentahar at Concordia University and let him know aout this? :)
2013-03-28 22:34:36	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-28 22:34:51	--	Mode #haskell [-o glguy] by glguy_
2013-03-28 22:35:14	slack1256	ab9rf: that full blown trolling, not cool dude
2013-03-28 22:35:29	ab9rf	slack1256: i don't approve of cheating
2013-03-28 22:35:46	slack1256	don't for what other people do
2013-03-28 22:35:53	slack1256	if they want to cheat they will
2013-03-28 22:35:58	ab9rf	and it's fairly obvious that those assignments are from concordia
2013-03-28 22:36:12	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Ping timeout: 264 seconds)
2013-03-28 22:36:13	mauke	slack1256: trolling?
2013-03-28 22:36:24	slack1256	**don't care for, sorry my engrish.
2013-03-28 22:36:26	-->	nade (~nade@WS-ESR1-72-49-94-77.fuse.net) has joined #haskell
2013-03-28 22:36:31	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-28 22:36:34	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-28 22:36:57	<--	mast_ (18721611@gateway/web/freenode/ip.24.114.22.17) has quit (Quit: Page closed)
2013-03-28 22:37:13	<--	fragamus (~textual@adsl-71-142-60-12.dsl.scrm01.pacbell.net) has quit (Ping timeout: 240 seconds)
2013-03-28 22:37:19	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-28 22:37:32	dmwit	"Criminals do crime" is a terrible reason not to call the police.
2013-03-28 22:37:58	slack1256	true, I see is a bad argument, how about this
2013-03-28 22:38:06	mcstar	well, dont help, but to tell on someone, thats just ...
2013-03-28 22:38:08	mcstar	idk
2013-03-28 22:38:12	slack1256	That won't stop cheating, it will only do harm without benefit
2013-03-28 22:38:14	dmwit	I can imagine many reasonable reasons, like "well, he didn't actually cheat because nobody in here helped him".
2013-03-28 22:38:15	monochrom	implr: you're better off with "data Bar s = Bar Int (STUArray s Int Int)"
2013-03-28 22:38:26	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-28 22:38:34	mauke	mcstar: fair?
2013-03-28 22:38:43	mcstar	no, not that
2013-03-28 22:38:50	implr	monochrom: I tried that
2013-03-28 22:38:59	implr	but the earlier example didnt work then
2013-03-28 22:39:04	mcstar	mauke: kind of arrogant
2013-03-28 22:39:09	Clint	slack1256: not necessarily; the cheater might learn to be sneakier next time
2013-03-28 22:39:12	implr	monochrom: http://hpaste.org/84783#a84784 this one
2013-03-28 22:39:13	-->	Damgaard1 (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-28 22:39:17	mcstar	the 'i know better' attitude
2013-03-28 22:39:20	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-28 22:39:25	monochrom	thanks, I'll look
2013-03-28 22:39:26	slack1256	Clint: and be a better cheater, MUAHAHAHAHA!
2013-03-28 22:39:46	Clint	everybody wins
2013-03-28 22:39:50	snhmib	you could ask for questions as the annoying guy in class
2013-03-28 22:39:54	mcstar	he cheats only himself...
2013-03-28 22:39:55	snhmib	on irc
2013-03-28 22:39:56	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 255 seconds)
2013-03-28 22:40:13	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-03-28 22:40:17	snhmib	that'd be fun ;]
2013-03-28 22:40:36	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-28 22:40:36	@glguy_	The merits or otherwise of cheating in school isn't really the topic of #haskell
2013-03-28 22:40:43	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-28 22:40:48	--	Mode #haskell [-o glguy_] by glguy_
2013-03-28 22:41:05	slack1256	true, sorry guys for the offtopic.
2013-03-28 22:41:17	otters	@faq is learning Haskell a replacement for school?
2013-03-28 22:41:19	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-28 22:41:51	ab9rf	otters: heh
2013-03-28 22:41:53	armlesshobo	lol
2013-03-28 22:41:56	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Read error: Connection reset by peer)
2013-03-28 22:41:58	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-28 22:41:59	-->	Beetny (~Beetny@ppp118-210-230-16.lns20.adl6.internode.on.net) has joined #haskell
2013-03-28 22:42:09	<--	madjestic (~madjestic@188.88.173.3) has quit (Read error: Connection reset by peer)
2013-03-28 22:42:10	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-28 22:42:12	armlesshobo	@faq can Haskell fix my failing marriage?
2013-03-28 22:42:12	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-28 22:42:21	-->	phischu (~pschuster@p4FD300F8.dip0.t-ipconnect.de) has joined #haskell
2013-03-28 22:42:21	armlesshobo	:D
2013-03-28 22:42:41	dockside1	so can alt.suicide.holiday
2013-03-28 22:42:44	otters	fix (failing marriage)
2013-03-28 22:42:45	-->	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has joined #haskell
2013-03-28 22:43:03	ab9rf	i'm too tired to care
2013-03-28 22:43:05	<--	x7a1c0b (~x7a1c0b@g224018103.adsl.alicedsl.de) has quit (Ping timeout: 255 seconds)
2013-03-28 22:43:07	quchen	> fix error marriage
2013-03-28 22:43:08	lambdabot	  Not in scope: `marriage'
2013-03-28 22:43:10	<--	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has quit (Quit: WeeChat 0.4.0)
2013-03-28 22:43:11	otters	> fix fail marriage
2013-03-28 22:43:12	quchen	> fix error "marriage"
2013-03-28 22:43:13	hpc	:t failing -- i can totally see this being a function
2013-03-28 22:43:13	lambdabot	  Not in scope: `marriage'
2013-03-28 22:43:14	lambdabot	  can't find file: L.hs
2013-03-28 22:43:15	lambdabot	    Not in scope: `failing'
2013-03-28 22:43:15	lambdabot	    Perhaps you meant `ceiling' (imported from Prelude)
2013-03-28 22:43:17	otters	that'll just repeatedly cause the marriage to fail
2013-03-28 22:43:32	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Ping timeout: 255 seconds)
2013-03-28 22:43:46	otters	haskell is the most pun-rich major language
2013-03-28 22:44:23	croikle	> fix (error "marriage")
2013-03-28 22:44:25	lambdabot	  *Exception: marriage
2013-03-28 22:44:32	otters	values keep leaking out of my Maybes, can anyone recommend a stronger functor?
2013-03-28 22:44:46	slack1256	we have marriage in a thunk.
2013-03-28 22:44:58	ab9rf	probably the best place to store marriage
2013-03-28 22:45:00	c_wraith	Data Nope a = Nope
2013-03-28 22:45:04	otters	slack1256: don't force it, it's considered illegal
2013-03-28 22:45:06	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-28 22:45:16	otters	except in some countries
2013-03-28 22:45:16	c_wraith	otters: that should be strong enough to prevent values from ever getting out
2013-03-28 22:45:38	ab9rf	definitely don't want any family values escaping
2013-03-28 22:45:50	armlesshobo	@faq can Haskell solve world poverty?
2013-03-28 22:45:51	lambdabot	The answer is: Yes! Haskell can do that.
2013-03-28 22:45:51	-->	x7a1c0b (~x7a1c0b@g224018103.adsl.alicedsl.de) has joined #haskell
2013-03-28 22:45:53	dockside1	family types
2013-03-28 22:46:02	mikeplus64	> fix error
2013-03-28 22:46:03	-->	madjestic (~madjestic@188.88.173.3) has joined #haskell
2013-03-28 22:46:04	lambdabot	  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *E...
2013-03-28 22:46:34	otters	is the mailing list group associative or is it closed?
2013-03-28 22:46:52	otters	ok I think it might be time for me to take a break
2013-03-28 22:47:09	<--	trescenzi (~trescenzi@2620:91:0:163:d03c:ff6a:4a1d:49ee) has quit (Remote host closed the connection)
2013-03-28 22:47:34	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-28 22:49:38	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-03-28 22:49:38	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-03-28 22:49:38	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-03-28 22:49:44	-->	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-03-28 22:50:01	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-28 22:50:10	Michae___	Is there any way to speed up the checking of equality, apart from removing it entirely? It's taking up almost half of my programs time
2013-03-28 22:50:17	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 255 seconds)
2013-03-28 22:50:24	--	Notice(armlesshobo): what
2013-03-28 22:50:36	ab9rf	meep?
2013-03-28 22:50:50	mcstar	lol
2013-03-28 22:50:54	mcstar	sure
2013-03-28 22:50:59	hpaste	liyang pasted “instance MonadState s (IORefT s m)” at http://hpaste.org/84789
2013-03-28 22:51:03	mcstar	even faster, if you remove the program
2013-03-28 22:51:05	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-03-28 22:51:06	liyang	edwardk quchen donri: what do you think of the above?
2013-03-28 22:51:35	liyang	I'm contemplating using it in production. :3
2013-03-28 22:51:57	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-28 22:52:07	edwardk	i think with the atomicModifyIORef' and atomicWriteIORef you're locked into very current ghc's ;)
2013-03-28 22:52:20	liyang	OH NOES.
2013-03-28 22:52:43	edwardk	otherwise looks as sane as you can be given the IORef in there
2013-03-28 22:52:46	<--	bos_ (~bos@173.252.71.4) has quit (Remote host closed the connection)
2013-03-28 22:52:47	donri	liyang: i think you should hide the IORefT data constructor
2013-03-28 22:53:28	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-03-28 22:53:28	c_wraith	wait..  atomicWriteIORef? I need to check the docs on that one
2013-03-28 22:53:50	-->	pib1904 (~pib1904@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-28 22:54:09	c_wraith	Oh, I see
2013-03-28 22:54:09	monochrom	implr: I would abandon foobar. it is not meant to be useful. ST is designed to disallow leaking an STUArray s (or STRef s) outside the ST s (with same s). and foobar precisely wants to take a leaked STUArray as parameter. no one can provide that parameter.
2013-03-28 22:54:13	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 248 seconds)
2013-03-28 22:54:22	liyang	donri: sure. But is there really much harm in it? You need to supply an IORef to run it in any case, and it's not like it changes, being in a ReaderT.
2013-03-28 22:54:41	liyang	(Much *more* harm, I should say.)
2013-03-28 22:54:44	edwardk	liyang: note: you _can_ safely do this with STRefs
2013-03-28 22:54:51	edwardk	the IORef is the dangerous part
2013-03-28 22:54:51	--	tswett_ is now known as tswett
2013-03-28 22:55:03	liyang	edwardk: good point.
2013-03-28 22:55:26	otters	lmap :: (a -> b) -> p b c -> p a c ?
2013-03-28 22:55:28	otters	wot
2013-03-28 22:55:32	liyang	edwardk: well, I was intending to share the IORef between threads... </troll>
2013-03-28 22:55:50	edwardk	:t flip (.)
2013-03-28 22:55:52	-->	trescenzi (~trescenzi@2620:91:0:163:e8b5:a0f2:f3ce:86b8) has joined #haskell
2013-03-28 22:55:52	lambdabot	(a -> b) -> (b -> c) -> a -> c
2013-03-28 22:55:56	edwardk	otters: thats an example
2013-03-28 22:56:07	edwardk	when p = (->)
2013-03-28 22:56:18	otters	OH I see
2013-03-28 22:56:30	otters	I was associating the last two types in my head instead of the first two
2013-03-28 22:56:59	liyang	c_wraith: atomicWriteIORef is writeIORef with a barrier. Funny that there isn't an atomicWriteIORef'...
2013-03-28 22:57:19	ClaudiusMaximus	and i guess the name comes from lmap :: (l -> l') -> Either l r -> Either l' r
2013-03-28 22:57:20	-->	Jayrays (~Jayrays@unaffiliated/jayrays) has joined #haskell
2013-03-28 22:57:33	ClaudiusMaximus	wait no
2013-03-28 22:57:35	danharaj	no
2013-03-28 22:57:36	danharaj	:P
2013-03-28 22:57:42	otters	l and l' are backwards there
2013-03-28 22:57:46	 *	ClaudiusMaximus gives up thinking and watches donuts spin
2013-03-28 22:57:50	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-28 22:58:21	monochrom	implr: I suggest foobar3 :: (forall s. ST s (Bar s)) -> UArray Int Int; foobar3 program = runSTUArray (do { Bar n t <- program; return t })
2013-03-28 22:58:31	c_wraith	liyang: yeah, the "oh, I see" was after I looked up the docs. :)
2013-03-28 22:58:32	liyang	c_wraith: http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-IORef.html#g:2
2013-03-28 22:58:47	-->	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has joined #haskell
2013-03-28 22:58:49	liyang	c_wraith: OUC...
2013-03-28 22:58:53	<--	nade (~nade@WS-ESR1-72-49-94-77.fuse.net) has quit (Quit: nade)
2013-03-28 22:58:56	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-28 22:58:57	-->	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has joined #haskell
2013-03-28 22:59:14	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-28 22:59:21	<--	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has left #haskell ("Konversation terminated!")
2013-03-28 22:59:21	<--	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-28 22:59:33	danharaj	edwardk: can you explain to me how to use your graphs library in a way that is GC friendly, and why storing just a VertexMap and EdgeMap with the graph shape implicit is worse?
2013-03-28 22:59:44	otters	so what can you do with Profunctor
2013-03-28 23:00:09	liyang	otters: take over the world.
2013-03-28 23:00:12	edwardk	if you mix them together, when you mutate it both the shape and the data become 'new stuff' to the GC.
2013-03-28 23:00:19	liyang	otters: as edwardk seems to be doing.
2013-03-28 23:00:24	hpaste	“Anonymous Coward” pasted “aeson lens” at http://hpaste.org/84790
2013-03-28 23:00:37	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-28 23:00:56	otters	liyang I'm starting to think edwardk could take over the world using only unsafeCoerce and const
2013-03-28 23:01:12	edwardk	otters: thats pretty much how we power lens ;)
2013-03-28 23:01:21	otters	yeah that's what I thought
2013-03-28 23:01:21	edwardk	not so much with the const though
2013-03-28 23:01:22	vikraman	hi, i'm trying to read json from a http service and decode it using aeson
2013-03-28 23:01:27	-->	citizen94 (citizen93@98pc230.sshunet.nl) has joined #haskell
2013-03-28 23:01:31	vikraman	this is what I have now http://hpaste.org/84790
2013-03-28 23:01:33	<--	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-28 23:02:28	danharaj	edwardk: 'new stuff' refers to how the GC sees the data w.r.t. generations I infer?
2013-03-28 23:02:30	-->	noteventime (~user@nl104-215-228.student.uu.se) has joined #haskell
2013-03-28 23:02:32	liyang	otters: abstract over things other than (->). For example, if you had I a b c = a -> b -> c, then I a would be a profunctor... (This is how the indexed stuff works in lens, I believe.)
2013-03-28 23:02:40	vikraman	but the code feels unusually complex to me!
2013-03-28 23:02:44	otters	functionalWebserver = unsafeCoerce ()
2013-03-28 23:02:44	vikraman	someone care to review?
2013-03-28 23:02:53	<--	Heero (~Heero@unaffiliated/heero) has quit (Ping timeout: 255 seconds)
2013-03-28 23:03:11	edwardk	vikraman: i recommend looking at github.com/lens/aeson-traversal for a more lensy way to work with json
2013-03-28 23:03:12	-->	citizen93 (~anonymous@98pc230.sshunet.nl) has joined #haskell
2013-03-28 23:03:23	edwardk	not sure if statusfailed ever shipped it
2013-03-28 23:03:25	<--	citizen94 (citizen93@98pc230.sshunet.nl) has quit (Client Quit)
2013-03-28 23:03:26	otters	oh god
2013-03-28 23:03:32	otters	aeson-traversal, aeson-lens
2013-03-28 23:04:38	otters	edwardk would you recommend aeson-traversal over aeson-lens
2013-03-28 23:04:44	otters	it appears that you can do at least all the same things with it
2013-03-28 23:04:51	edwardk	yes.
2013-03-28 23:04:55	<--	DrChaos (~DrChaos@71.22.67.48) has quit (Ping timeout: 256 seconds)
2013-03-28 23:04:56	<--	trescenzi (~trescenzi@2620:91:0:163:e8b5:a0f2:f3ce:86b8) has quit (Remote host closed the connection)
2013-03-28 23:05:24	edwardk	aeson-traversal has the benefit of actually following the lens laws, etc.
2013-03-28 23:05:24	-->	till_t (~till@g231176230.adsl.alicedsl.de) has joined #haskell
2013-03-28 23:05:31	otters	fancy that
2013-03-28 23:05:43	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-28 23:06:37	donri	liyang: oh. i was thinking you'd create a newIORef when you run it.
2013-03-28 23:06:40	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-28 23:07:19	Ralith	when GHC detects an infinite loop, is there any way to get it to tell you anything at all about *where*?
2013-03-28 23:07:22	vikraman	aeson-traversal isn't on hackage yet!
2013-03-28 23:07:35	luite	Ralith: possibly if you run with -xc
2013-03-28 23:07:35	<--	madjestic (~madjestic@188.88.173.3) has quit (Ping timeout: 252 seconds)
2013-03-28 23:07:37	-->	Siphonblast (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-28 23:07:40	edwardk	vikraman: harass statusfailed =)
2013-03-28 23:07:43	dEPY	can "do" only be used in main?
2013-03-28 23:07:48	<--	phischu (~pschuster@p4FD300F8.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-28 23:07:49	edwardk	dEPY: no
2013-03-28 23:08:04	dEPY	Ok then I need help :)
2013-03-28 23:08:04	Ralith	luite: unrecognized flag
2013-03-28 23:08:19	hpaste	dEPy pasted “random strings” at http://hpaste.org/84791
2013-03-28 23:08:23	luite	Ralith: compile with profiling, the start your program with ./x +RTS -xc
2013-03-28 23:08:24	-->	trescenzi (~trescenzi@2620:91:0:163:398b:fcb0:796d:408c) has joined #haskell
2013-03-28 23:08:36	<--	sethroot (~sethroot@108.71.82.84) has quit (Quit: Lost terminal)
2013-03-28 23:08:38	<--	bos (~bos@173.252.71.4) has quit (Remote host closed the connection)
2013-03-28 23:08:44	liyang	donri: well, sometimes you *do* want to live dangerously and use the same IORef in multiple threads.
2013-03-28 23:08:57	liyang	(But not often.)
2013-03-28 23:08:59	dEPY	I have a function that produces list of random string, it takes in length of the string and number of the string u want
2013-03-28 23:09:00	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 260 seconds)
2013-03-28 23:09:01	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-28 23:09:06	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: Connection reset by peer)
2013-03-28 23:09:15	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-28 23:09:22	liyang	(And often when you do, you really don't.)
2013-03-28 23:09:29	Ralith	luite: I don't have a profiling world set up; can't ghci do anything directly, being an interpreter?
2013-03-28 23:09:34	<--	trescenzi (~trescenzi@2620:91:0:163:398b:fcb0:796d:408c) has quit (Remote host closed the connection)
2013-03-28 23:09:48	<--	icarot (~icarot@2600:1010:b10b:873f:0:10:b475:6b01) has quit (Ping timeout: 264 seconds)
2013-03-28 23:09:54	luite	Ralith: yes, it might not detect the loop :p
2013-03-28 23:10:07	Ralith	it does
2013-03-28 23:10:13	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 248 seconds)
2013-03-28 23:10:14	glguy_	Ralith: The <<loop>> exception is catchable, you can catch it, annotate it, and rethrow
2013-03-28 23:10:26	glguy_	You can also tell ghci to stop on exeception
2013-03-28 23:10:31	dmwit	dEPY: Perhaps you want something like "randStrs <- randomString len (pred num); return (randStr:randStrs)".
2013-03-28 23:10:42	luite	oh is it, i need to change that in ghcjs then :)
2013-03-28 23:10:43	dmwit	dEPY: But it ain't gonna do what you want.
2013-03-28 23:10:45	Ralith	glguy_: that sounds promising; how do I do that?
2013-03-28 23:11:03	<--	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (Quit: This computer has gone to sleep)
2013-03-28 23:11:12	Ralith	none of my code is in IO, so catching is tricky.
2013-03-28 23:11:15	glguy_	Ralith: Look at -fbreak-on-exception and -fbreak-on-error and see if they help
2013-03-28 23:11:22	Ralith	kk
2013-03-28 23:11:33	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-28 23:11:46	dEPY	dmwit: how do I fix it then? :/
2013-03-28 23:12:27	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-28 23:12:34	monochrom	"splitAt (num*10) $ drop len" seems incomplete. what is the list?
2013-03-28 23:12:39	dmwit	dEPY: If you're happy living in IO, why not use randomRIO?
2013-03-28 23:13:09	dEPY	dmwit: because I'm not that far in a book and don't know it exists :D
2013-03-28 23:13:10	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-28 23:13:10	<--	melter (~Melter@2001:4930:116:0:c7e:d332:48b3:766c) has quit (Remote host closed the connection)
2013-03-28 23:13:24	Ralith	running with tracing seems to make the exception not occur >.<
2013-03-28 23:13:30	Ralith	just silently loops
2013-03-28 23:13:31	dmwit	:t \m n -> replicateM m (replicateM n (randomRIO ('a','z')))
2013-03-28 23:13:33	lambdabot	Int -> Int -> IO [[Char]]
2013-03-28 23:13:37	Ralith	oh, sweet, it catches ^C
2013-03-28 23:13:39	<--	bos (~bos@173.252.71.4) has quit (Ping timeout: 260 seconds)
2013-03-28 23:13:40	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-28 23:13:50	dEPY	oh I should probably say that this is the error:   Couldn't match expected type `[t0]' with actual type `IO StdGen'   (at line wit getStdGen)
2013-03-28 23:14:13	-->	kartoffelbrei (~kartoffel@p549613DB.dip.t-dialin.net) has joined #haskell
2013-03-28 23:14:46	<--	Beetny (~Beetny@ppp118-210-230-16.lns20.adl6.internode.on.net) has quit (Read error: Connection reset by peer)
2013-03-28 23:15:25	-->	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has joined #haskell
2013-03-28 23:15:28	dmwit	dEPY: I'm kind of torn. On the one hand, I want to suggest you use randomRIO because it does the maintenance of the StdGen for you. On the other, I want you to learn how to do the maintenance of the StdGen...
2013-03-28 23:15:41	dmwit	dEPY: Anyway, the short answer is you should use functions that generate both an output and an updated StdGen.
2013-03-28 23:15:43	<--	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has left #haskell
2013-03-28 23:15:48	monochrom	the type error is not the only problem
2013-03-28 23:15:57	--	pepijn_away is now known as pepijndevos
2013-03-28 23:16:04	implr	monochrom: you have a point there
2013-03-28 23:16:06	dmwit	...I will leave this in monochrom's very capable hands. =P
2013-03-28 23:16:13	implr	basically what I wanted to achieve
2013-03-28 23:16:15	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Ping timeout: 245 seconds)
2013-03-28 23:16:19	-->	DanZimm (~Dan@147.126.10.25) has joined #haskell
2013-03-28 23:16:29	<--	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (Excess Flood)
2013-03-28 23:16:33	ramses_	"cabal-dev init" fails on me with "./cabal-dev/lib/ghc-7.6.2/ObjectName-1.0.0.0:
2013-03-28 23:16:35	-->	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-28 23:16:36	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 23:16:36	ramses_	does not exist"
2013-03-28 23:16:41	implr	was that you create a type Bar consisting of an Int (which never changes) and a STUArray
2013-03-28 23:16:41	--	pepijndevos is now known as pepijn_away
2013-03-28 23:16:45	ramses_	anyone know what that means?
2013-03-28 23:17:03	ramses_	the ghc-7.6.2 subdir is not there
2013-03-28 23:17:15	implr	then you make some changes to said array, and after you are done you convert it to a plain UArray
2013-03-28 23:17:17	dEPY	Hm.. :S
2013-03-28 23:17:18	johnw	ramses_: that's odd
2013-03-28 23:17:27	dEPY	Anyone else can tell me why this doesn't work? http://hpaste.org/84791
2013-03-28 23:17:31	implr	that's what foobar was supposed to do
2013-03-28 23:17:33	DanZimm	hey all i was wondering if someone could explain to me the issue I'm having with the following code: http://d.pr/n/YlJb
2013-03-28 23:17:57	DanZimm	pop pasted to wrong place
2013-03-28 23:18:12	<--	schellsan (~schellsan@75-101-46-88.dsl.static.sonic.net) has quit (Read error: No route to host)
2013-03-28 23:18:12	implr	I wanted to have the int in the type because basically it is needed by all functions that will operate on that array
2013-03-28 23:18:20	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-28 23:18:21	hpaste	DanZimm pasted “Factorial test” at http://hpaste.org/84792
2013-03-28 23:18:23	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-28 23:18:35	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-28 23:18:35	implr	and passing it to them every time seemed well... ugly
2013-03-28 23:18:36	DanZimm	yep there
2013-03-28 23:18:58	geekosaur	and the issue is? (if you have an error message, please nopaste the whole message)
2013-03-28 23:19:04	Tordek	does anyone remember what the function for combining parameters for sortOn is? I tried hoogling '(a -> b) -> (a -> c) -> a -> (b, c)' but no cigar
2013-03-28 23:19:07	ramses_	johnw: nevermind, I must have done something woring, I just deleted the cabal-dev dir and started all over again
2013-03-28 23:19:16	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-28 23:19:17	ramses_	s/woring/wrong
2013-03-28 23:19:25	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-28 23:19:33	<--	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has quit (Quit: mcstar)
2013-03-28 23:19:44	DanZimm	geekosaur aight sorry
2013-03-28 23:19:44	johnw	ramses_: yeah, that often works for me too in those cases :)
2013-03-28 23:19:46	monochrom	implr: I think foobar3 still fits that purpose. foobar3 (do { b@(Bar n t) <- create' 40; do whatever you like to t; return b })
2013-03-28 23:19:48	-->	OlegYch3 (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 23:20:14	<--	watermind (~wm@2.80.234.191) has quit (Quit: Konversation terminated!)
2013-03-28 23:20:18	hpaste	DanZimm pasted “Factorial test - with error” at http://hpaste.org/84793
2013-03-28 23:20:44	-->	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-28 23:20:46	-->	reckler (~reckler@ppp118-210-230-16.lns20.adl6.internode.on.net) has joined #haskell
2013-03-28 23:20:51	DanZimm	its like the n isn't being assumed to be an integer… idk how to "force" it to be an int
2013-03-28 23:21:01	DanZimm	or integer for that matter
2013-03-28 23:21:16	croikle	DanZimm: so, subfact needs to produce an Integer, and you're multiplying n to get its result, so n is integer
2013-03-28 23:21:35	croikle	maybe you want fact :: Integer -> Integer
2013-03-28 23:21:35	-->	cdidd (~cdidd@93-80-5-217.broadband.corbina.ru) has joined #haskell
2013-03-28 23:21:36	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-28 23:21:45	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Read error: Connection reset by peer)
2013-03-28 23:21:50	-->	watermind (~wm@2.80.234.191) has joined #haskell
2013-03-28 23:21:52	croikle	or, you could add some fromIntegral
2013-03-28 23:22:05	-->	niteria (~niteria@89-76-207-233.dynamic.chello.pl) has joined #haskell
2013-03-28 23:22:21	-->	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-28 23:22:22	implr	monochrom: oh, I didnt think of wrapping it like that
2013-03-28 23:22:27	implr	that should work, thanks
2013-03-28 23:22:29	<--	OlegYch (~OlegYch@80.249.95.251) has quit (Ping timeout: 248 seconds)
2013-03-28 23:22:37	<--	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (Excess Flood)
2013-03-28 23:22:41	cardamon	I'm learning haskell as I go through configuring xmonad and reading Learn you a Haskell, but I've gotten to one I don't quite get.
2013-03-28 23:22:46	<--	bos (~bos@173.252.71.4) has quit (Remote host closed the connection)
2013-03-28 23:22:50	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-28 23:22:52	DanZimm	if you do fact :: Integer -> Integer then it throws the error that the !! infix only accepts int not integer
2013-03-28 23:23:12	cardamon	What's the significance of nameing something PP?
2013-03-28 23:23:17	<--	Tharugrim (~Tharugrim@91-113-99-62.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-28 23:23:22	-->	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-28 23:23:32	-->	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-28 23:23:36	<--	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (Excess Flood)
2013-03-28 23:23:55	ChongLi	cardamon: you talking in reference to Xmonad?
2013-03-28 23:23:59	monochrom	dEPY: "splitAt (num*10) $ drop len" looks incomplete. where is the list?
2013-03-28 23:24:10	-->	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-28 23:24:21	DanZimm	croikle ^
2013-03-28 23:24:22	johnw	cardamon: Pretty Printer?
2013-03-28 23:24:24	k00mi	cardamon: in XMonad, PP stands for PrettyPrinter
2013-03-28 23:24:26	ChongLi	cardamon: Xmonad has a PP type
2013-03-28 23:24:29	croikle	DanZimm: okay, then you need genericIndex, or fromIntegral
2013-03-28 23:24:29	ChongLi	yes
2013-03-28 23:24:37	<--	OlegYch3 (~OlegYch@80.249.95.251) has quit (Ping timeout: 248 seconds)
2013-03-28 23:24:55	cardamon	ChongLi: I wasn't sure where it came from.
2013-03-28 23:24:58	cardamon	Thanks.
2013-03-28 23:25:20	ChongLi	cardamon: http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Hooks-DynamicLog.html#g:3
2013-03-28 23:25:21	cardamon	johnw: k00mi: Thanks to you too.
2013-03-28 23:25:38	dEPY	monochrom: nice catch, still that's not the main problem :S
2013-03-28 23:25:44	niteria	haskell threads are preemptive? how is this done?
2013-03-28 23:25:51	dEPY	oh wait
2013-03-28 23:25:59	monochrom	ok, then you need "return (randStr : ...)"
2013-03-28 23:26:06	-->	OlegYch (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 23:26:11	monochrom	no, that also is wrong
2013-03-28 23:26:11	DanZimm	croikle ah ok thanks
2013-03-28 23:26:14	ChongLi	niteria: haskell threads are distinct from OS threads
2013-03-28 23:26:21	dEPY	monochrom: Yes, just figured that out :D forgot it returns new generator
2013-03-28 23:26:22	croikle	DanZimm: probably easiest is to keep it at Int -> Integer, but make subfact n = fromIntegral n? * fact (n-1)
2013-03-28 23:26:41	DanZimm	why is n considered an integral right there?
2013-03-28 23:26:45	DanZimm	erm Integer
2013-03-28 23:26:49	monochrom	you need "more <- randomString len (pred num)". now you can "return (randStr : more)"
2013-03-28 23:27:00	-->	21WAADRCT (~quassel@124.47.124.24.cm.sunflower.com) has joined #haskell
2013-03-28 23:27:12	croikle	fromIntegral converts from any Integral type, like Int, Integer, Word8, etc
2013-03-28 23:27:16	monochrom	but this is just writing out replicateM by hand
2013-03-28 23:27:19	niteria	ChongLi: that's why I'm asking, I don't know a good way to have preemptive userspace threads
2013-03-28 23:27:39	ChongLi	niteria: oh, ok
2013-03-28 23:27:41	21WAADRCT	is there an easy way to show a double without e-notation. Example I want 0.04 printed as "0.04" instead of "4.0e-2"
2013-03-28 23:27:48	<--	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Ping timeout: 264 seconds)
2013-03-28 23:27:54	ChongLi	you'll have to investigate the details of the runtime
2013-03-28 23:28:22	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-28 23:28:27	-->	OlegYch6 (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 23:28:27	ChongLi	I'm not up on the gory details
2013-03-28 23:28:41	dEPY	monochrom: I fixed that but still getting:  Couldn't match expected type `[t0]' with actual type `IO StdGen'
2013-03-28 23:28:54	DanZimm	croikle right but all n's should be integers anyways, why is it assuming otherwise?
2013-03-28 23:28:58	monochrom	ok show current code
2013-03-28 23:29:14	ChongLi	DanZimm: types are inferred from context
2013-03-28 23:29:43	ChongLi	Haskell doesn't go from a more specific type to a more general one
2013-03-28 23:29:46	croikle	n has to be Int if we call fact (n-1) when fact :: Int -> Integer
2013-03-28 23:29:48	-->	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has joined #haskell
2013-03-28 23:29:54	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-28 23:30:00	hpaste	dEPy pasted “random string list” at http://hpaste.org/84795
2013-03-28 23:30:13	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-03-28 23:30:13	DanZimm	croikle right but why was haskell not assuming that?
2013-03-28 23:30:30	-->	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-03-28 23:30:47	croikle	at the same time, n has to be Integer, since subfact n = n * stuff is an Integer
2013-03-28 23:30:53	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-28 23:31:05	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Quit: Parting is such sweet sorrow...)
2013-03-28 23:31:07	<--	OlegYch (~OlegYch@80.249.95.251) has quit (Ping timeout: 264 seconds)
2013-03-28 23:31:25	DanZimm	croikle is that why haskell was complaining?
2013-03-28 23:31:28	dEPY	monochrom: http://hpaste.org/84795
2013-03-28 23:31:45	DanZimm	I'm trying to understand why it wasn't assuming that it was an int
2013-03-28 23:31:57	croikle	DanZimm: yeah, it couldn't find a type for n that satisfies both constraints
2013-03-28 23:31:58	monochrom	@type getStdGen
2013-03-28 23:31:59	lambdabot	IO StdGen
2013-03-28 23:32:24	<--	paintcan (~user@66.199.39.230) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-28 23:32:31	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-28 23:32:31	monochrom	oh, um, [String]? IO [String]?
2013-03-28 23:32:39	DanZimm	croikle ah ok, so you have to do fromIntegral (or in theory could even do fromInteger) so that you convert it into Int?
2013-03-28 23:32:39	aCube	Where can I find the ghc 7.6 haddock documentation?
2013-03-28 23:32:54	merijn	DanZimm: Yeah
2013-03-28 23:33:02	croikle	multiplication doesn't do any coercion, so if n * k :: Integer, we have n, k :: Integer
2013-03-28 23:33:04	ChongLi	be advised that you may lose precision
2013-03-28 23:33:09	DanZimm	yay i have learned me a little good haskell :P
2013-03-28 23:33:12	dEPY	monochrom: hm now i fails at first 2 pattern matches for 0 _ and _ 0
2013-03-28 23:33:23	dEPY	cause they're not returning IO [String]
2013-03-28 23:33:24	ChongLi	since Integers have a lot more precision than Ints
2013-03-28 23:33:26	DanZimm	ChongLi ya i realize that
2013-03-28 23:33:28	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-28 23:33:30	<--	till_t (~till@g231176230.adsl.alicedsl.de) has quit (Quit: Be back later)
2013-03-28 23:33:30	monochrom	well then, it's "return []"
2013-03-28 23:33:35	aCube	ah nvm, found it
2013-03-28 23:33:37	dEPY	oh
2013-03-28 23:33:39	DanZimm	hrm
2013-03-28 23:33:46	monochrom	this code is full of conceptual problems
2013-03-28 23:34:02	croikle	DanZimm: yeah, fromIntegral is your general converter. Also used if you want to divide integers and get something floating
2013-03-28 23:34:13	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-28 23:34:23	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-28 23:34:43	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 264 seconds)
2013-03-28 23:34:47	DanZimm	very cool! thank you croikle ChongLi and merijn :D
2013-03-28 23:34:49	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-28 23:34:57	<--	21WAADRCT (~quassel@124.47.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-03-28 23:35:03	monochrom	to be fair, there would be no such conceptual problems in other languages. but I hate that.
2013-03-28 23:35:23	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit
2013-03-28 23:35:42	dEPY	monochrom: still some problems :D
2013-03-28 23:35:42	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 23:35:42	monochrom	"f (g x) (h y)" in other languages say: perform the effects of g, then the effect of h, then go back to perform the effect of f.
2013-03-28 23:35:44	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-28 23:35:53	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-28 23:36:05	monochrom	you see the disparity between code order and effect order?
2013-03-28 23:36:13	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Read error: Connection reset by peer)
2013-03-28 23:36:13	ChongLi	I'm much happier coercing with fromInteger than having javascript's equality operator coerce the crap out of everything
2013-03-28 23:36:14	monochrom	it's so hard to read
2013-03-28 23:36:30	-->	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has joined #haskell
2013-03-28 23:36:51	monochrom	whereas haskell forces you to "a <- g x; b <- h y; f a b" code order is effect order. this is the only reasonable choice.
2013-03-28 23:37:11	dEPY	monochrom: it says: Couldn't match expected type `[a0]' with actual type `Char',  for second argument of drop (randomChars)
2013-03-28 23:37:23	monochrom	dEPY: what is with (randomChars:_)? why is it not simply randomChars?
2013-03-28 23:37:24	ChongLi	dont you just love how 0 equals the empty string in js?
2013-03-28 23:37:41	ChongLi	it's just madness!
2013-03-28 23:37:45	dEPY	monochrom: Hm. I guess I thought randomRs also returns generator
2013-03-28 23:37:57	monochrom	@type randomRs
2013-03-28 23:37:58	johnw	monochrom: effect order of arguments is not guaranteed in C++ either
2013-03-28 23:37:59	lambdabot	(RandomGen g, Random a) => (a, a) -> g -> [a]
2013-03-28 23:38:07	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-28 23:38:08	dEPY	I see
2013-03-28 23:38:26	<--	pt (~ptpt@84.114.230.154) has quit (Ping timeout: 255 seconds)
2013-03-28 23:38:33	<--	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has quit (Quit: WeeChat 0.3.9.2)
2013-03-28 23:39:08	monochrom	effect order of "f (h x) (g y)" is largely guaranteed in SML and Scheme, but I still hate it. why is it not consistently left-to-right or right-to-left?
2013-03-28 23:39:12	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-28 23:39:22	croikle	ChongLi: the difference between "2" + "2" and "2" - "2" is pretty funny too
2013-03-28 23:39:59	ChongLi	haha yeah
2013-03-28 23:40:07	 *	DanZimm does what croikle says now
2013-03-28 23:40:11	--	zakora is now known as zakora_way
2013-03-28 23:40:18	monochrom	because of this I think Moggi is very right to say "use a monad" because it makes you use explicit >>= or equivalent
2013-03-28 23:41:09	DanZimm	wut
2013-03-28 23:41:13	DanZimm	lmao
2013-03-28 23:41:13	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Quit: leaving)
2013-03-28 23:41:25	johnw	monochrom: in fact, the Eval monad in the "parallel" package exists partly just to solve sequencing issues
2013-03-28 23:42:21	croikle	DanZimm: you might enjoy https://www.destroyallsoftware.com/talks/wat if you liked that one
2013-03-28 23:42:23	<--	zakora_way (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Client Quit)
2013-03-28 23:42:25	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-28 23:42:53	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-28 23:42:56	DanZimm	oh lawd ruby
2013-03-28 23:43:05	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-28 23:43:08	dEPY	final touch I think: Couldn't match expected type `[t0]' with actual type `([Char], [Char])'    in:    let (randStr:_) = splitAt (1*10) $ drop 10 randomChars
2013-03-28 23:43:35	otters	(randStr,_)
2013-03-28 23:43:44	<--	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has quit (Quit: WeeChat 0.4.1-dev)
2013-03-28 23:44:03	monochrom	wait, why don't you use take instead of splitAt?
2013-03-28 23:44:03	DanZimm	croikle you have made my week, thank you!
2013-03-28 23:44:34	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 240 seconds)
2013-03-28 23:44:56	dEPY	monochrom: how would I know :) I'm doing haskell for 4-5days now :D
2013-03-28 23:45:06	dEPY	monochrom: but ye, good idea
2013-03-28 23:46:10	-->	OlegYch (~OlegYch@80.249.95.251) has joined #haskell
2013-03-28 23:46:28	-->	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has joined #haskell
2013-03-28 23:46:57	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-03-28 23:47:05	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-28 23:47:41	johnw	dEPY: i've seen you here longer than 5 days, haven't i?
2013-03-28 23:48:05	<--	OlegYch6 (~OlegYch@80.249.95.251) has quit (Ping timeout: 248 seconds)
2013-03-28 23:48:18	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-03-28 23:48:41	dEPY	johnw: I've been around longer cause I like you guys :)
2013-03-28 23:49:05	johnw	we are crazy
2013-03-28 23:49:21	dEPY	johnw: Because everytime I asked you guys something about some programming concept even it was not haskell you guys gladly explained it :)
2013-03-28 23:49:30	dEPY	johnw: Me too O_ô
2013-03-28 23:50:15	-->	pt (~ptpt@84.114.230.154) has joined #haskell
2013-03-28 23:50:17	dEPY	johnw: Otherwise I'd be learning some overhyped lang and some hipster framework now :)
2013-03-28 23:51:16	dEPY	I hope there's no RoR or node.js guys here :D
2013-03-28 23:51:17	<--	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-03-28 23:51:19	croikle	some folks consider haskell overhyped
2013-03-28 23:51:38	otters	i'm a ruby on rails guy
2013-03-28 23:51:41	johnw	but none of us consider it overtyped
2013-03-28 23:51:44	otters	it's not really a niche framework at this point
2013-03-28 23:52:00	dEPY	otters: me too kinda
2013-03-28 23:52:14	Philippa	not when security holes in it are enough to create major work for IT security analysts, no :p
2013-03-28 23:52:14	otters	but nodejs guys, yeah, THOSE are the bastards
2013-03-28 23:52:32	<--	silver (~silver@178.120.80.156) has quit (Read error: Connection reset by peer)
2013-03-28 23:52:47	johnw	let's just make a Node.js monad and assimilate them
2013-03-28 23:53:14	<--	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has quit (Quit: leaving)
2013-03-28 23:53:14	<--	saep (~saep@p5B2A2B4D.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-28 23:53:26	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-03-28 23:53:39	-->	QinGW (~yaaic@115.171.170.214) has joined #haskell
2013-03-28 23:54:12	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-28 23:54:17	<--	js__ (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Read error: Connection reset by peer)
2013-03-28 23:54:24	-->	agr (bd269061@gateway/web/freenode/ip.189.38.144.97) has joined #haskell
2013-03-28 23:54:29	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-28 23:55:16	<--	Siphonblast (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-28 23:55:29	otters	will cabal ghci be in 1.18.x
2013-03-28 23:55:37	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-28 23:56:22	--	bcoppens_ is now known as bcoppens
2013-03-28 23:57:09	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-28 23:57:18	-->	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-28 23:57:38	chrisirc_	Hm. I'm working with a monad that extracts stuff from XML files. Now when I get to the point where I've selected a certain tag, how do I do several different subqueries on that same tag?
2013-03-28 23:57:49	chrisirc_	I need something like a "fork" on the monad state.
2013-03-28 23:58:25	-->	saep (~saep@p5B2A1B19.dip.t-dialin.net) has joined #haskell
2013-03-28 23:58:37	chrisirc_	Does such a thing exist? (i.e. first class monad state; bind to a variable, run submonads from that binding.)
2013-03-28 23:58:55	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-28 23:59:10	arkeet	you want to zoom.
2013-03-28 23:59:13	arkeet	from lens :p
2013-03-28 23:59:14	-->	Gonzih (~gonzih@37.212.214.110) has joined #haskell
2013-03-28 23:59:30	chrisirc_	Hm??
2013-03-28 23:59:49	<--	Icewing (~Icewing@unaffiliated/icewing) has quit (Ping timeout: 248 seconds)
2013-03-28 23:59:59	chrisirc_	hu, Control.Lens.Zoom?
2013-03-29 00:00:02	dEPY	Anyone can explain why this http://hpaste.org/84796 is returning list of strings of length 5,4,3,2,1 instead of list of stringht of length 5 ?
2013-03-29 00:00:05	arkeet	> execState (zoom _1 $ modify (+1)) (3,"hi")
2013-03-29 00:00:08	lambdabot	  (4,"hi")
2013-03-29 00:00:11	<--	snhmib (~jurjen@AOrleans-251-1-43-154.w90-20.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-03-29 00:00:56	ion	depy: Btw, use newStdGen instead of getStdGen.
2013-03-29 00:01:10	-->	js__ (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 00:01:25	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Ping timeout: 248 seconds)
2013-03-29 00:01:28	arkeet	dEPY: because you're using pred.
2013-03-29 00:01:38	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-03-29 00:01:49	arkeet	and taking num of them, not len.
2013-03-29 00:01:50	<--	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 255 seconds)
2013-03-29 00:02:02	dEPY	arkeet: ah, I must take based on len not num
2013-03-29 00:02:04	<--	kaoskorobase (~sk@84.78.195.71) has quit (Quit: kaoskorobase)
2013-03-29 00:02:20	dEPY	tnx
2013-03-29 00:02:37	dEPY	ion: I think I'm just about to read up on that in "learn you a haskell" not that far :)
2013-03-29 00:02:41	-->	[mth] (~mth@1.145.192.50) has joined #haskell
2013-03-29 00:02:59	ion	LYAH recommends getStdGen?
2013-03-29 00:03:21	-->	roshan (~roshan@uws08243usr.uws.ualberta.ca) has joined #haskell
2013-03-29 00:03:23	dEPY	it looks like it explains them goth
2013-03-29 00:03:25	dEPY	both*
2013-03-29 00:03:43	chrisirc_	Hm if I understand that correctly, that just selects the first slot of the tuple for the monad actions, arkeet. What I need is preserve the state and let me run from there multiple times.
2013-03-29 00:03:48	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-29 00:04:13	arkeet	chrisirc_: ok, then get the state and then run a new state action inside.
2013-03-29 00:05:00	chrisirc_	Hm, fair enough, need to check that (I'm feeling uncertain since I don't know what's inside the monad state, since I didn't write it).
2013-03-29 00:05:25	<--	bishboria (~bishboria@cpc6-acto3-2-0-cust184.4-2.cable.virginmedia.com) has quit (Quit: bishboria)
2013-03-29 00:05:27	<--	ulfdoz (~mary@p5B38AD7B.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-29 00:06:04	-->	bishboria (~bishboria@cpc6-acto3-2-0-cust184.4-2.cable.virginmedia.com) has joined #haskell
2013-03-29 00:06:13	arkeet	:t let f m = get >>= runState m in f
2013-03-29 00:06:14	lambdabot	MonadState b ((,) a) => State b a -> (a, b)
2013-03-29 00:06:20	arkeet	hm
2013-03-29 00:06:25	arkeet	nope.
2013-03-29 00:06:41	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 00:06:58	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Quit: Leaving)
2013-03-29 00:07:01	cardamon	What's a =<< operator do?
2013-03-29 00:07:11	quchen	cardamon: flip >>=
2013-03-29 00:07:13	arkeet	same as >>=, just flipped
2013-03-29 00:07:46	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Quit: leaving)
2013-03-29 00:07:55	shachaf	For bonus points: (*>) does the same thing as (>>). What does (<*) do?
2013-03-29 00:08:28	niteria	ok, no magic in ghc's preemptive threads, just memory allocation being a yield point
2013-03-29 00:08:28	johnw	do { x <- f; y; return x }
2013-03-29 00:08:55	arkeet	:t liftM2 const
2013-03-29 00:08:56	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-29 00:08:56	lambdabot	Monad m => m r -> m a2 -> m r
2013-03-29 00:09:08	Philippa	shachaf: funny thing - I don't think I'd want to lose either of those operators if I were to design the libs today, either
2013-03-29 00:09:11	ion	liftM2 kills kittens
2013-03-29 00:09:22	-->	OlegYch5 (~OlegYch@80.249.95.251) has joined #haskell
2013-03-29 00:09:35	shachaf	Philippa: What would you call them?
2013-03-29 00:09:38	arkeet	whoever invented the typeclass hierarchy killed many, many kittens.
2013-03-29 00:10:14	<--	setmeaway2 (stemearay@118.45.149.119) has quit (Read error: Connection reset by peer)
2013-03-29 00:10:48	-->	jianmeng (~mengjian@123.138.32.54) has joined #haskell
2013-03-29 00:10:53	arkeet	:t \m -> liftM (evalState m) get
2013-03-29 00:10:54	lambdabot	MonadState a1 m => State a1 r -> m r
2013-03-29 00:11:01	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 248 seconds)
2013-03-29 00:11:03	quchen	arkeet: British sense of humour
2013-03-29 00:11:18	arkeet	hrm
2013-03-29 00:11:34	shachaf	What?
2013-03-29 00:11:42	ion	humoure
2013-03-29 00:11:54	-->	OlegYch6 (~OlegYch@80.249.95.251) has joined #haskell
2013-03-29 00:11:55	<--	OlegYch (~OlegYch@80.249.95.251) has quit (Ping timeout: 264 seconds)
2013-03-29 00:11:58	-->	jobstijl (~job@5070A080.static.ziggozakelijk.nl) has joined #haskell
2013-03-29 00:12:05	<--	OlegYch6 (~OlegYch@80.249.95.251) has quit (Client Quit)
2013-03-29 00:12:09	Philippa	ion: eh. Maybe these days - it's be nice if `liftM2 (+)` were valid though
2013-03-29 00:12:19	-->	OlegYch (~OlegYch@80.249.95.251) has joined #haskell
2013-03-29 00:12:37	Philippa	shachaf: as in, how would I pronounce *> and >>?
2013-03-29 00:12:37	ion	philippa: Banana brackets would be nicer for that.
2013-03-29 00:12:44	shachaf	Philippa: For instance.
2013-03-29 00:13:04	shachaf	I assume you wouldn't actually have both.
2013-03-29 00:13:18	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-29 00:13:22	Philippa	ion: yeah, and I'd like an applicative let (have decided do is subtly wrong for it), but that's life
2013-03-29 00:13:25	-->	OlegYch2 (~OlegYch@80.249.95.251) has joined #haskell
2013-03-29 00:13:51	Philippa	shachaf: no, that's my point: I probably would because >> is neatly mnemonic when thinking monadically. It's that or rename >>=
2013-03-29 00:13:54	<--	fmapE (~fmapE@shamgar.soic.indiana.edu) has quit (Remote host closed the connection)
2013-03-29 00:13:59	<--	OlegYch5 (~OlegYch@80.249.95.251) has quit (Ping timeout: 255 seconds)
2013-03-29 00:14:01	Philippa	to be fair, I might consider that
2013-03-29 00:14:06	shachaf	You would have (*>) = (>>)?
2013-03-29 00:14:09	ion	Well, we don’t have `liftA2 (+)` either. So while we’re talking about hypothetical syntax… banana brackets would be nicer. :-P
2013-03-29 00:14:30	johnw	why don't we have banana brackets, when we have arrow syntax?
2013-03-29 00:14:34	Philippa	shachaf: I guess, so long as we're still allowing specialised implementations
2013-03-29 00:14:37	johnw	seems like banana brackets would be much lower impact
2013-03-29 00:14:44	Philippa	johnw: hysterical raisins plus nobody wrote the patch
2013-03-29 00:14:51	quchen	Banana brackets?
2013-03-29 00:14:52	shachaf	They'd be much higher-impact because people would use them.
2013-03-29 00:15:01	johnw	[| f x y |] = f <$> x <*> y
2013-03-29 00:15:07	johnw	shachaf: lol
2013-03-29 00:15:09	shachaf	quchen: I assume they mean idiom brackets.
2013-03-29 00:15:12	otters	:t (<<)
2013-03-29 00:15:14	lambdabot	    Not in scope: `<<'
2013-03-29 00:15:14	lambdabot	    Perhaps you meant one of these:
2013-03-29 00:15:14	lambdabot	      `=<<' (imported from Control.Monad.Writer),
2013-03-29 00:15:16	quchen	Idiom brackets?
2013-03-29 00:15:21	otters	why isn't (<<) defined?
2013-03-29 00:15:28	shachaf	@google idiom brackets
2013-03-29 00:15:31	lambdabot	http://www.haskell.org/haskellwiki/Idiom_brackets
2013-03-29 00:15:31	lambdabot	Title: Idiom brackets - HaskellWiki
2013-03-29 00:15:40	shachaf	Arrow syntax in GHC considered harmful.
2013-03-29 00:15:42	DanZimm	ok new question: lets say I have some function y where it is at first positive and then negative and I wanted to make a set of y(n) where n is an element of the natural numbers and y is always positive. I currently have  `[ n | n <- [1 ..] , ( y n ) > 0 ]` but haskell begins to hang once it gets to the last element, i am guessing this is because it doesn't realize that all elements beyond this won't be in the set, is there a way to specify almost like the
2013-03-29 00:15:42	DanZimm	 characteristics of the function or something?
2013-03-29 00:15:53	johnw	otters: you know, in all this time I've never reached for <<
2013-03-29 00:15:58	<--	MrFenix (~JanB@p57A1B772.dip.t-dialin.net) has quit (Quit: leaving)
2013-03-29 00:16:03	johnw	so it's probably not defined because no one else did either
2013-03-29 00:16:04	DanZimm	I realize you could just specify the interval of natural numbers but I want this to be really generic
2013-03-29 00:16:07	shachaf	DanZimm: No.
2013-03-29 00:16:13	shachaf	DanZimm: You can use something like takeWhile, though.
2013-03-29 00:16:17	otters	johnw: I've used <*
2013-03-29 00:16:18	shachaf	> takeWhile (<10) [1..]
2013-03-29 00:16:20	lambdabot	  [1,2,3,4,5,6,7,8,9]
2013-03-29 00:16:29	johnw	otters: yeah, me too
2013-03-29 00:16:35	otters	is it not the same thing as (<<)?
2013-03-29 00:16:40	otters	or what (<<) would be if it existed
2013-03-29 00:16:41	quchen	Well that Wiki article is crap
2013-03-29 00:16:45	-->	OlegYch7 (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 00:16:47	shachaf	(<<) could have two meanings.
2013-03-29 00:16:47	johnw	otters: when you have do notation, x << y is easier to write as x; y
2013-03-29 00:16:51	DanZimm	shachaf thanks
2013-03-29 00:16:53	<--	OlegYch (~OlegYch@80.249.95.251) has quit (Ping timeout: 248 seconds)
2013-03-29 00:16:56	johnw	or y; x
2013-03-29 00:16:58	otters	shachaf: ?
2013-03-29 00:16:58	shachaf	Would you expect (<<) to behave like (<*) or like (=<<)?
2013-03-29 00:17:04	otters	like (=<<)
2013-03-29 00:17:07	otters	why?
2013-03-29 00:17:10	shachaf	OK, that's the opposite of (<*)
2013-03-29 00:17:11	johnw	right, like shachaf is saying
2013-03-29 00:17:12	otters	what's the difference
2013-03-29 00:17:13	shachaf	So there you go.
2013-03-29 00:17:15	johnw	x <* y evaluates x first
2013-03-29 00:17:15	shachaf	otters: Try it out!
2013-03-29 00:17:19	otters	oh
2013-03-29 00:17:19	Philippa	I've used <* seriously
2013-03-29 00:17:21	otters	why
2013-03-29 00:17:22	johnw	x << y would, if like =<<, evaluate y first
2013-03-29 00:17:26	shachaf	johnw: ?
2013-03-29 00:17:26	<--	folone__ (~folone@brln-4dbac454.pool.mediaWays.net) has quit (Ping timeout: 252 seconds)
2013-03-29 00:17:34	shachaf	johnw: I don't think order of evaluation really gets into this.
2013-03-29 00:17:34	otters	I see
2013-03-29 00:17:37	Philippa	with a local pronunciation of "given", because I was working in a logic programming applicative
2013-03-29 00:17:47	Philippa	"[yield] LHS given RHS"
2013-03-29 00:17:51	johnw	shachaf: no?  it would mean that <* and << are very different
2013-03-29 00:18:01	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-29 00:18:07	shachaf	No, that has nothing to do with evaluation.
2013-03-29 00:18:12	<--	OlegYch2 (~OlegYch@80.249.95.251) has quit (Ping timeout: 264 seconds)
2013-03-29 00:18:14	shachaf	Maybe you mean "executes".
2013-03-29 00:18:17	johnw	ah, yes
2013-03-29 00:18:48	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2013-03-29 00:18:58	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 00:19:07	DanZimm	shachaf perfect thank you
2013-03-29 00:19:13	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 00:19:19	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-03-29 00:19:22	DanZimm	now i would just rather get the indecies rather than the actual values heh
2013-03-29 00:19:41	shachaf	zip may help.
2013-03-29 00:19:42	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-29 00:20:01	-->	trescenzi (~trescenzi@2620:91:0:163:cc36:4314:496d:8bd3) has joined #haskell
2013-03-29 00:20:36	<--	tommd (~tommd@pdx.galois.com) has quit (Quit: Leaving.)
2013-03-29 00:20:45	chrisirc_	Well, I don't even know what kind of monad this is: Cursor -> DList Cursor
2013-03-29 00:20:56	chrisirc_	runCursor or runDList don't exist.
2013-03-29 00:21:01	<--	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has quit
2013-03-29 00:21:16	shachaf	DList is pretty bad as a monad, isn't it?
2013-03-29 00:21:20	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 260 seconds)
2013-03-29 00:21:22	-->	jaroslaw (~a@tux2.usask.ca) has joined #haskell
2013-03-29 00:21:33	chrisirc_	Well, how do you mean?
2013-03-29 00:21:34	shachaf	chrisirc_: Something called "runCursor" would be irrelevant to any sort of monad being involved here. (Why?)
2013-03-29 00:22:03	shachaf	chrisirc_: DList is a "difference list" -- you should go and figure out how it works, if your goal is to be learning things.
2013-03-29 00:22:09	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 00:22:11	<--	stat_vi (~stat@dslb-094-218-229-164.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-29 00:22:34	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-29 00:22:53	chrisirc_	Well, that's the type I have for an action; now as I described above, I need a way to capture the state, or "freeze" or "fork" the monad so I can run several subsequent actions starting from the same start point.
2013-03-29 00:23:09	chrisirc_	Ok I'll check the DList docs.
2013-03-29 00:23:13	<--	nooodl (~nooodl@91.179.149.218) has quit (Ping timeout: 240 seconds)
2013-03-29 00:23:32	-->	nh2 (~nh2@149.241.12.113) has joined #haskell
2013-03-29 00:23:33	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 00:23:46	nh2	I need a priority queue. What package is recommended?
2013-03-29 00:23:47	shachaf	It seems unlikely that DList is the monad you're thinking of here.
2013-03-29 00:23:48	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 00:24:07	shachaf	Also I don't understand whatever you want to do.
2013-03-29 00:24:17	c_wraith	DList's monad instance is going to be really slow, isn't it?
2013-03-29 00:24:30	shachaf	c_wraith: That's what I thought.
2013-03-29 00:24:31	<--	trescenzi (~trescenzi@2620:91:0:163:cc36:4314:496d:8bd3) has quit (Ping timeout: 264 seconds)
2013-03-29 00:24:43	chrisirc_	shachaf, maybe this is the monad type:  type Trans a b = a -> DList b
2013-03-29 00:24:59	chrisirc_	(Isnt' that the same thing actually?)
2013-03-29 00:25:22	-->	kfish (~conrad@cm84.eta99.maxonline.com.sg) has joined #haskell
2013-03-29 00:25:23	<--	roshan (~roshan@uws08243usr.uws.ualberta.ca) has left #haskell
2013-03-29 00:25:23	chrisirc_	(Trans Cursor Cursor == Cursor -> DList Cursor)
2013-03-29 00:25:23	shachaf	chrisirc_: I have the feeling you don't completely understand what's going on. :-) I know I don't, anyway. Did you write this code?
2013-03-29 00:25:32	chrisirc_	no
2013-03-29 00:25:53	<--	agr (bd269061@gateway/web/freenode/ip.189.38.144.97) has quit (Ping timeout: 245 seconds)
2013-03-29 00:26:03	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 00:26:12	chrisirc_	That's existing code that queries XML documents, and I'm trying to change it for my purposes.
2013-03-29 00:26:20	ramses_	with doctest, how can I import a test module from within a doctest in a production module? I get an error that the test module could not be found
2013-03-29 00:26:32	chrisirc_	(or rather, just *use* the infrastructure there is)
2013-03-29 00:26:40	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-29 00:26:55	<--	juxovec (~juxovec@88.103.13.78) has quit (Ping timeout: 264 seconds)
2013-03-29 00:27:31	<--	ozataman_ (~ozataman@199.47.72.129) has quit
2013-03-29 00:27:45	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-29 00:28:00	<--	jianmeng (~mengjian@123.138.32.54) has quit (Quit: Leaving.)
2013-03-29 00:28:07	-->	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has joined #haskell
2013-03-29 00:28:31	chrisirc_	shachaf, this is my starting point: https://github.com/petermarks/hoodlums-sessions/blob/master/xml.hs
2013-03-29 00:28:49	<--	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has quit (Remote host closed the connection)
2013-03-29 00:29:15	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-29 00:29:27	shachaf	I guess DList is the monad.
2013-03-29 00:29:35	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-29 00:29:40	-->	ozataman_ (~ozataman@199.47.72.129) has joined #haskell
2013-03-29 00:29:41	-->	DrChaos (~DrChaos@cpe-70-123-204-134.satx.res.rr.com) has joined #haskell
2013-03-29 00:29:56	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-03-29 00:30:01	<--	ozataman_ (~ozataman@199.47.72.129) has quit (Client Quit)
2013-03-29 00:30:11	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 255 seconds)
2013-03-29 00:30:29	niteria	:t (>=>)
2013-03-29 00:30:29	-->	kmels_ (~kmels@frbg-4d029404.pool.mediaWays.net) has joined #haskell
2013-03-29 00:30:30	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-29 00:30:35	-->	edeast (~hygspigs@162.106.4.145) has joined #haskell
2013-03-29 00:31:10	quchen	Is there a name for the transformation the "length" function uses - putting the return value in a parameter to become tail recursive? I.e. "length xs = 1 + length' xs" becomes "length = length' 0; length' n (_:xs) = length' (n+1) xs"
2013-03-29 00:31:28	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-29 00:31:31	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Read error: Connection reset by peer)
2013-03-29 00:31:39	ciaranm	"tail recursive" considered nonsense
2013-03-29 00:31:44	shachaf	quchen: Using an accumulator?
2013-03-29 00:31:52	shachaf	ciaranm: Why?
2013-03-29 00:31:52	<--	bos (~bos@173.252.71.4) has quit (Remote host closed the connection)
2013-03-29 00:32:04	ciaranm	shachaf: compilers do not work that way!
2013-03-29 00:32:14	shachaf	Who said anything about compilers?
2013-03-29 00:32:23	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 00:32:25	<--	edeast (~hygspigs@162.106.4.145) has quit (Client Quit)
2013-03-29 00:32:25	<--	sepp2k1 (~sexy@g224101186.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-29 00:32:27	-->	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-29 00:32:38	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-29 00:32:46	-->	edeast (~hygspigs@162.106.4.145) has joined #haskell
2013-03-29 00:32:50	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 00:33:05	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 00:33:29	quchen	... and even in the compiler case, why would it be nonsense?
2013-03-29 00:33:35	<--	watermind (~wm@2.80.234.191) has quit (Quit: Konversation terminated!)
2013-03-29 00:33:47	<--	kmels (~kmels@frbg-4d028c1c.pool.mediaWays.net) has quit (Ping timeout: 255 seconds)
2013-03-29 00:34:19	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: reboot)
2013-03-29 00:34:21	<--	_boegel_ (~boegel@boegel.ugent.be) has quit (Quit: Leaving)
2013-03-29 00:34:23	shachaf	I assume ciaranm means something like "evaluation, particularly non-strict evaluation, doesn't work the way you think".
2013-03-29 00:34:51	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 00:34:55	niteria	@src foldr
2013-03-29 00:34:55	lambdabot	foldr f z []     = z
2013-03-29 00:34:56	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2013-03-29 00:35:36	quchen	... and he chose to say this because ...
2013-03-29 00:35:42	ciaranm	or more generally, mucking around with your code to get it into some arbitrary form you just made up in the hopes that doing so is what will make the compiler decide to rewrite out recursion is bad, because your compiler's notion of what it can and cannot do has little to do with what you think it does
2013-03-29 00:36:20	shachaf	You can get a pretty good model in your head of what GHC is going to compile your code into.
2013-03-29 00:36:45	--	clahey is now known as cl_away
2013-03-29 00:36:48	<--	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Ping timeout: 264 seconds)
2013-03-29 00:37:02	-->	Kyo (~elaineben@h179n3c1o1097.bredband.skanova.com) has joined #haskell
2013-03-29 00:37:10	shachaf	But it's not "push a stack frame on every function call, pop it on return, etc."
2013-03-29 00:38:00	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 264 seconds)
2013-03-29 00:38:13	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-29 00:38:21	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-03-29 00:38:34	niteria	it's g-machine somewhere below, right?
2013-03-29 00:38:36	<--	Gonzih (~gonzih@37.212.214.110) has quit (Ping timeout: 264 seconds)
2013-03-29 00:38:49	-->	bos (~bos@173.252.71.4) has joined #haskell
2013-03-29 00:39:09	-->	stephenjudkins (~textual@71-222-9-110.ptld.qwest.net) has joined #haskell
2013-03-29 00:39:51	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-03-29 00:41:15	-->	Thomyho3 (~thomyho@mnhm-4d012b63.pool.mediaWays.net) has joined #haskell
2013-03-29 00:41:18	<--	bishboria (~bishboria@cpc6-acto3-2-0-cust184.4-2.cable.virginmedia.com) has quit (Quit: bishboria)
2013-03-29 00:41:37	monochrom	g-machine is too low-level, unnecessary for most needs
2013-03-29 00:42:01	monochrom	my http://www.vex.net/~trebla/haskell/lazy.xhtml is the right level for most purposes
2013-03-29 00:42:05	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-29 00:42:21	<--	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-29 00:42:22	monochrom	(just work with expressions themselves, and care about sharing)
2013-03-29 00:42:26	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 00:43:03	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-29 00:43:35	-->	TacticalGrace (~chak@101.175.71.191) has joined #haskell
2013-03-29 00:43:45	monochrom	g-machine and down is just "what detailed data structures stand for expression nodes" and is beside the point unless you want to count "it's 30 bytes as opposed to 2 bytes"
2013-03-29 00:44:08	Philippa	which, to be fair, some people do
2013-03-29 00:44:27	monochrom	oh, when that happens, g-machine is too high
2013-03-29 00:44:33	Philippa	yep :-)
2013-03-29 00:44:46	Philippa	I figure Core's a reasonably nice level to think at
2013-03-29 00:45:29	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 00:45:41	<--	edeast (~hygspigs@162.106.4.145) has quit (Ping timeout: 248 seconds)
2013-03-29 00:46:01	<--	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-29 00:46:04	hpaste	DanZimm pasted “projectile drag” at http://hpaste.org/84797
2013-03-29 00:46:11	johnw	common reaction to learning Haskell: https://i.chzbgr.com/maxW500/6629056768/hFEC05F8A/
2013-03-29 00:46:13	<--	ag90 (~ag90@184.175.42.76) has quit (Ping timeout: 248 seconds)
2013-03-29 00:46:36	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-29 00:46:36	DanZimm	is there any witty way to make theta variable in that above code? i tried making it a variable but then it loses the caching stuff
2013-03-29 00:46:39	byorgey	that appears to be chemistry, not math!
2013-03-29 00:46:54	cmccann	yes, definitely chemistry
2013-03-29 00:46:58	johnw	haha
2013-03-29 00:46:59	fryguybob	That looks like my cat.
2013-03-29 00:47:10	monochrom	hmm reaction, chemistry...
2013-03-29 00:47:18	cmccann	must be a chemical burn, nothing to do with math!
2013-03-29 00:47:23	<--	bos (~bos@173.252.71.4) has quit (Remote host closed the connection)
2013-03-29 00:47:57	-->	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has joined #haskell
2013-03-29 00:49:05	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-03-29 00:49:39	<--	kevinqcs (~turing@183.209.140.29) has quit (Quit: Leaving.)
2013-03-29 00:50:43	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 260 seconds)
2013-03-29 00:51:01	<--	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-29 00:51:06	cmccann	DanZimm: you have rather a lot of unnecessary parentheses there
2013-03-29 00:51:21	DanZimm	:D
2013-03-29 00:51:31	glguy_	Does "MonoLocalBinds" do anything anymore? Is it supposed to?
2013-03-29 00:51:37	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 00:51:54	cmccann	DanZimm: what do you want to accomplish? memoizing intermediate expressions?
2013-03-29 00:52:24	<--	bos (~bos@2620:0:1cfe:18:e6ce:8fff:fe4d:e7f4) has quit (Ping timeout: 264 seconds)
2013-03-29 00:52:54	monochrom	MonoLocalBinds still does something, since under normal conditions local binds are still polymorphic by default
2013-03-29 00:53:00	<--	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has quit (Ping timeout: 264 seconds)
2013-03-29 00:53:41	glguy_	Ah, I just read about how if the binding could have been lifted out of the local scope then it won't be considered
2013-03-29 00:53:44	cmccann	DanZimm: it looks like you're already doing some simple memoization there, why not do something similar for taking theta as a parameter?
2013-03-29 00:54:00	DanZimm	cmccann yes
2013-03-29 00:54:57	DanZimm	to first question that is
2013-03-29 00:55:07	cmccann	DanZimm: you just need some way to look things up by a non-integer key
2013-03-29 00:55:10	DanZimm	cmccann i tried and it became really slow
2013-03-29 00:55:11	-->	estebistec (~estebiste@68-70-92-82.static.kc.surewest.net) has joined #haskell
2013-03-29 00:55:22	cmccann	yeah I'm not sure you're going to gain anything here
2013-03-29 00:55:25	DanZimm	cmccann oh wow that gave me an idea
2013-03-29 00:55:32	cmccann	unless the computations are very expensive
2013-03-29 00:55:39	DanZimm	gotcha ok
2013-03-29 00:55:50	DanZimm	thank you
2013-03-29 00:55:51	cmccann	also depending on how many possible inputs you'll actually use and how many times you use them
2013-03-29 00:56:00	<--	Kyo (~elaineben@h179n3c1o1097.bredband.skanova.com) has quit
2013-03-29 00:56:03	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-29 00:57:31	monochrom	consider: bundle_deal theta = (vx, vy, ax, ay, x, y) where { vx = your code; vy = your code; etc }
2013-03-29 00:57:57	<--	MoALTz (~no@host86-142-161-119.range86-142.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-03-29 00:58:25	augur	why okmij
2013-03-29 00:59:22	DanZimm	cmccann thanks for the insight :d
2013-03-29 00:59:23	DanZimm	:D
2013-03-29 00:59:35	nh2	I fond a priority queue implementation that looks good: pqueue
2013-03-29 01:00:12	<--	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has quit (Quit: leaving)
2013-03-29 01:00:24	Rotaerk	nh2, sounds like a reasonable name for such a thing
2013-03-29 01:00:38	nh2	Rotaerk: was still hard to find though
2013-03-29 01:00:55	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 01:00:56	nh2	"haskell priority queue" finds me mostly overly complicated or outdated pacakges
2013-03-29 01:01:06	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-03-29 01:01:11	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-29 01:01:24	Rotaerk	heh
2013-03-29 01:02:07	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 01:02:31	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 256 seconds)
2013-03-29 01:03:58	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Ping timeout: 272 seconds)
2013-03-29 01:04:13	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-29 01:04:16	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-03-29 01:05:11	chrisirc_	I don't understand why DList would be a monad really; I'm trying to check by using >> or >>=, but that fails:
2013-03-29 01:05:17	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 255 seconds)
2013-03-29 01:05:57	otters	has anybody encountered "Can't parse --info output of GHC" with cabal-dev?
2013-03-29 01:06:03	chrisirc_	:t ((fromList [1,2,3]) :: DList Integer) >>= (cons (1 :: Integer))
2013-03-29 01:06:04	lambdabot	    Not in scope: `fromList'
2013-03-29 01:06:04	lambdabot	    Perhaps you meant one of these:
2013-03-29 01:06:04	lambdabot	      `IM.fromList' (imported from Data.IntMap),
2013-03-29 01:06:33	arkeet	chrisirc_: sure, that doesn't even work for ordinary lists.
2013-03-29 01:06:38	arkeet	> [1,2,3] >>= (1:)
2013-03-29 01:06:39	lambdabot	  No instance for (GHC.Num.Num [b0])
2013-03-29 01:06:40	lambdabot	   arising from a use of `e_11231'
2013-03-29 01:06:40	lambdabot	 Poss...
2013-03-29 01:06:51	arkeet	time to review what >>= does.
2013-03-29 01:06:54	arkeet	or at least what its type is.
2013-03-29 01:06:56	<--	x7a1c0b (~x7a1c0b@g224018103.adsl.alicedsl.de) has quit
2013-03-29 01:07:03	chrisirc_	(How does one import Data.DList into lambdabot?)
2013-03-29 01:07:07	arkeet	one doesn't.
2013-03-29 01:07:13	cmccann	:t (>>=)
2013-03-29 01:07:14	lambdabot	Monad m => m a -> (a -> m b) -> m b
2013-03-29 01:07:16	cmccann	:t concatMap
2013-03-29 01:07:17	lambdabot	(a -> [b]) -> [a] -> [b]
2013-03-29 01:07:23	<--	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 01:07:25	cmccann	:t (=<<)
2013-03-29 01:07:27	lambdabot	Monad m => (a -> m b) -> m a -> m b
2013-03-29 01:07:38	arkeet	I guess it is there.
2013-03-29 01:07:43	arkeet	@type Data.DList.fromList
2013-03-29 01:07:44	lambdabot	[a] -> Data.DList.DList a
2013-03-29 01:08:04	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Ping timeout: 240 seconds)
2013-03-29 01:08:26	-->	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 01:08:26	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 01:08:27	--	croikle_ is now known as croikle
2013-03-29 01:08:32	monochrom	@type (1:)
2013-03-29 01:08:34	lambdabot	Num a => [a] -> [a]
2013-03-29 01:08:40	monochrom	oh, no wonder
2013-03-29 01:09:08	chrisirc_	:t Data.DList.cons
2013-03-29 01:09:09	lambdabot	a -> Data.DList.DList a -> Data.DList.DList a
2013-03-29 01:09:12	<--	pt (~ptpt@84.114.230.154) has quit (Ping timeout: 264 seconds)
2013-03-29 01:09:12	monochrom	you probably want instead (:[10,20,30])
2013-03-29 01:09:56	monochrom	therefore (flip cons (fromList [10,20,30]))
2013-03-29 01:10:15	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 01:10:19	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-29 01:10:43	-->	shintah| (bebble@h-169-29.a336.priv.bahnhof.se) has joined #haskell
2013-03-29 01:10:44	<--	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-29 01:10:48	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Quit: leaving)
2013-03-29 01:10:48	cmccann	> (Data.DList.fromList [1,2,3] :: DList Integer) >>= flip cons (Data.DList.fromList [1])
2013-03-29 01:10:50	lambdabot	  Not in scope: type constructor or class `DList'Not in scope: `Data.DList.fr...
2013-03-29 01:10:54	cmccann	>:[
2013-03-29 01:10:56	-->	DMcGill_ (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has joined #haskell
2013-03-29 01:11:15	<--	lpvb (~lpvb@199.188.72.31) has quit (Ping timeout: 245 seconds)
2013-03-29 01:11:23	-->	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 01:11:26	<--	shintah (bebble@h-169-29.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-29 01:11:26	--	shintah| is now known as shintah
2013-03-29 01:12:02	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Ping timeout: 255 seconds)
2013-03-29 01:12:16	monochrom	use Char instead of numbers so you can save some types
2013-03-29 01:12:32	cmccann	save the types!
2013-03-29 01:13:16	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 01:13:27	cmccann	hm, I seem to have tablet input with pressure sensitivity working with my slightly hacked up version of gtk2hs.
2013-03-29 01:13:28	monochrom	> Data.DList.fromList "abc"
2013-03-29 01:13:30	lambdabot	  Not in scope: `Data.DList.fromList'
2013-03-29 01:13:31	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 01:13:42	cmccann	monochrom: lambdabot is being contrary it seems
2013-03-29 01:13:43	monochrom	I see. oh well.
2013-03-29 01:13:53	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Ping timeout: 240 seconds)
2013-03-29 01:13:53	monochrom	well, @type and > are different plugins
2013-03-29 01:13:58	cmccann	yep
2013-03-29 01:14:31	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-03-29 01:14:36	shachaf	Yes. @type allows values that aren't in scope; @run does not.
2013-03-29 01:14:44	shachaf	This is, I think, intended.
2013-03-29 01:14:48	-->	peterhil` (~peterhil@a91-154-228-71.elisa-laajakaista.fi) has joined #haskell
2013-03-29 01:15:31	<--	ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-03-29 01:15:38	 *	monochrom thought up a suggestion, and then realized that Aesop's Fables already covered that
2013-03-29 01:15:44	otters	cabal-ghci and cabal-dev are both broken
2013-03-29 01:15:51	otters	is it because I'm using 1.17.*?
2013-03-29 01:16:18	otters	might
2013-03-29 01:16:19	<--	k00mi (~koomi@dslb-188-099-033-172.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-03-29 01:16:20	otters	be
2013-03-29 01:19:52	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-29 01:19:59	otters	what the fuck is going on, cabal-install won't compile
2013-03-29 01:20:32	otters	somebody please explain what is going on https://gist.github.com/otters/6ff255bef2119c0f8cac
2013-03-29 01:20:36	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 264 seconds)
2013-03-29 01:20:54	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-29 01:21:26	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-29 01:21:52	-->	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has joined #haskell
2013-03-29 01:21:57	lispy	otters: It's very hard to know what's going on with only the error message. From that it looks like the libraries you're using together are not compatible.
2013-03-29 01:21:57	<--	stephenjudkins (~textual@71-222-9-110.ptld.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 01:21:57	<--	peterhil` (~peterhil@a91-154-228-71.elisa-laajakaista.fi) has quit (Ping timeout: 248 seconds)
2013-03-29 01:22:02	-->	pt (~ptpt@84.114.230.154) has joined #haskell
2013-03-29 01:22:21	monochrom	yeah, a version mismatch not caught by version bounds
2013-03-29 01:23:33	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-29 01:23:57	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Quit: croikle)
2013-03-29 01:24:18	otters	oh, I should've compiled --global
2013-03-29 01:24:21	otters	Cabal, that is
2013-03-29 01:24:21	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-29 01:24:33	otters	I have Cabal 1.17 global and 1.16 local, that's the problem
2013-03-29 01:24:41	-->	zeus (~quassel@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 01:24:48	<--	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 260 seconds)
2013-03-29 01:24:53	monochrom	that may or may not make a difference
2013-03-29 01:25:06	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-29 01:25:52	-->	Rants (~quassel@204.132.65.177) has joined #haskell
2013-03-29 01:26:42	-->	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-29 01:26:47	monochrom	very likely not make a difference
2013-03-29 01:26:54	-->	sw2wolf (~czsq888@222.209.240.64) has joined #haskell
2013-03-29 01:27:04	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-03-29 01:27:07	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-29 01:27:34	-->	js___ (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 01:27:51	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-29 01:28:14	<--	js__ (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 255 seconds)
2013-03-29 01:28:15	lispy	I would advise against that
2013-03-29 01:28:25	monochrom	if, previously, the version bounds already erroneously allowed Cabal-1.17, then, even after Cabal-1.16 is present, the bounds will still allow Cabal-1.17
2013-03-29 01:28:29	lispy	Cabal comes with ghc and if something comes with ghc you should almost never upgrade it.
2013-03-29 01:28:50	otters	lispy: you're right, that didn't help
2013-03-29 01:28:57	otters	what's weird is that it looks like it's some kind of whitespace-related error
2013-03-29 01:29:04	monochrom	and cabal-install really loves to choose the newest version allowed
2013-03-29 01:29:17	otters	nvm, it worked
2013-03-29 01:29:23	otters	I removed Cabal-1.17.0 from global
2013-03-29 01:29:27	otters	ka blamo
2013-03-29 01:29:39	lispy	Is 1.17 on hackage yet?
2013-03-29 01:29:52	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-29 01:29:57	monochrom	seems no
2013-03-29 01:30:07	lispy	It's not listed, looks like 1.16.0.3 is the latest release
2013-03-29 01:30:23	otters	I think odd minor numbers are betas or whatever
2013-03-29 01:30:32	lispy	Unless you're trying to test something or need a specific unreleased feature, I recommend not upgrading beyond what you get on hackage :)
2013-03-29 01:30:34	<--	alszar (~alszar@99-126-113-172.lightspeed.snantx.sbcglobal.net) has quit (Quit: alszar)
2013-03-29 01:30:56	-->	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-03-29 01:31:01	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 01:31:25	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-03-29 01:31:58	black_joe	I am learning Haskell and I'm having trouble reading a declaration in Functor's definition.
2013-03-29 01:31:59	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-29 01:31:59	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-03-29 01:32:01	black_joe	https://www.refheap.com/paste/13062
2013-03-29 01:32:08	-->	k00mi (~koomi@dslb-188-098-226-094.pools.arcor-ip.net) has joined #haskell
2013-03-29 01:32:12	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-29 01:32:15	black_joe	Here, what is f? And what does -> f a mean?
2013-03-29 01:32:24	black_joe	I know they're type variables, but I can't understand why it's important.
2013-03-29 01:32:38	monochrom	concrete examples of "f" are [], Maybe, IO
2013-03-29 01:32:42	sw2wolf	black_joe: polymorhism
2013-03-29 01:33:00	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-29 01:33:20	monochrom	so, you have these variations: (a->b) -> [a]->[b], (a->b) -> Maybe a -> Maybe b, (a->b) -> IO a -> IO b
2013-03-29 01:33:43	black_joe	So then... Why isn't fmap defined as simply fmap :: (a -> b) -> [a] -> [b]?
2013-03-29 01:33:50	black_joe	I don't get what the f does in line two, rather.
2013-03-29 01:34:02	Axman6	because it works on more than lists
2013-03-29 01:34:05	monochrom	because some other times I want Maybe, not []
2013-03-29 01:34:15	<--	dskippy (~mmachenry@67.208.185.2) has quit (Quit: Leaving.)
2013-03-29 01:34:20	Axman6	it's a generalised map for other structures (and functions, and other things)
2013-03-29 01:34:28	<--	end3rW (~end3rW@lak-67-200.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-29 01:34:33	black_joe	Oh... That's what I was confused about. I thought it was specifically lists.
2013-03-29 01:34:33	Axman6	> fmap (+1) (Just 7)
2013-03-29 01:34:35	lambdabot	  Just 8
2013-03-29 01:34:38	black_joe	Thanks.
2013-03-29 01:34:38	-->	AfC (~andrew@jim1020952.lnk.telstra.net) has joined #haskell
2013-03-29 01:34:38	-->	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has joined #haskell
2013-03-29 01:34:39	<--	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has quit (Changing host)
2013-03-29 01:34:39	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-03-29 01:34:44	sw2wolf	sorry! should be polymorphism
2013-03-29 01:34:45	Axman6	> fmap (+1) [1,2,3]
2013-03-29 01:34:47	lambdabot	  [2,3,4]
2013-03-29 01:34:57	Axman6	> fmap (+1) (Right 3)
2013-03-29 01:34:59	lambdabot	  Right 4
2013-03-29 01:35:02	-->	oio (ba54a08a@gateway/web/freenode/ip.186.84.160.138) has joined #haskell
2013-03-29 01:35:02	Axman6	> fmap (+1) (Left 3)
2013-03-29 01:35:03	<--	mr- (~martin@rgnb-5d87c513.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-29 01:35:04	lambdabot	  Left 3
2013-03-29 01:35:14	Axman6	(confusing if you haven't seen Either yet)
2013-03-29 01:35:22	sw2wolf	(+1) (Right 3)
2013-03-29 01:35:27	sw2wolf	> (+1) (Right 3)
2013-03-29 01:35:28	lambdabot	  No instance for (GHC.Num.Num (Data.Either.Either a0 b0))
2013-03-29 01:35:28	lambdabot	   arising from a ...
2013-03-29 01:35:39	sw2wolf	it is right
2013-03-29 01:35:45	black_joe	I will go back and look at Either's definition. I've definitely used it before.
2013-03-29 01:35:48	sw2wolf	so fmap
2013-03-29 01:35:51	Axman6	src Either
2013-03-29 01:35:54	Axman6	@src Either
2013-03-29 01:35:54	lambdabot	Source not found. The more you drive -- the dumber you get.
2013-03-29 01:35:57	Axman6	urgh
2013-03-29 01:36:05	Axman6	data Either a b = Left a | Right b
2013-03-29 01:36:23	black_joe	Yeah, I found it in these notes. So that's kind of like Maybe.
2013-03-29 01:36:25	<--	AfC (~andrew@jim1020952.lnk.telstra.net) has quit (Client Quit)
2013-03-29 01:36:39	monochrom	black_joe: in the Either case, in concrete it's (a->b) -> Either x a -> Either x b. so, you could say, f = Either x
2013-03-29 01:36:48	-->	predator117 (~predator1@p50805A5F.dip.t-dialin.net) has joined #haskell
2013-03-29 01:36:58	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-03-29 01:37:00	oio	getting this on mac os x cabal: /Users/xxxxxx/Library/Haskell/bin: does not exist
2013-03-29 01:37:15	black_joe	Okay. What I thought originally was application, and I know that wasn't right.
2013-03-29 01:37:25	<--	zeus (~quassel@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 248 seconds)
2013-03-29 01:38:17	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 01:38:21	<--	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-29 01:38:33	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 01:38:47	-->	peterhil` (~peterhil@a91-154-228-71.elisa-laajakaista.fi) has joined #haskell
2013-03-29 01:38:52	 *	hackagebot diagrams-lib 0.6.0.2 - Embedded domain-specific language for declarative graphics  http://hackage.haskell.org/package/diagrams-lib-0.6.0.2 (BrentYorgey)
2013-03-29 01:39:56	<--	predator217 (~predator1@p50805716.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-03-29 01:40:46	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-29 01:41:15	 *	sw2wolf how does GHC find appropriate instances ? 
2013-03-29 01:41:29	-->	AfC (~andrew@jim1020952.lnk.telstra.net) has joined #haskell
2013-03-29 01:41:35	monochrom	from imports, and their imports, ad infinitum
2013-03-29 01:41:41	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-29 01:42:08	<--	HalfWayMan (~blake@cpc1-seac9-0-0-cust413.7-2.cable.virginmedia.com) has quit (Ping timeout: 252 seconds)
2013-03-29 01:42:22	monochrom	an instance exists iff the import graph happens to have it
2013-03-29 01:42:31	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 260 seconds)
2013-03-29 01:42:45	-->	chatsiri_ (~chatsiri_@171.7.150.203) has joined #haskell
2013-03-29 01:42:55	sw2wolf	monochrom: whether or not it uses Pattern Match as Prolog finds rules ?
2013-03-29 01:43:27	monochrom	it is a bit dumber than prolog. some hilarities ensue
2013-03-29 01:44:01	sw2wolf	what is "hilarities ensue" ?
2013-03-29 01:44:26	<--	Thomyho3 (~thomyho@mnhm-4d012b63.pool.mediaWays.net) has quit (Ping timeout: 255 seconds)
2013-03-29 01:44:55	<--	AfC (~andrew@jim1020952.lnk.telstra.net) has quit (Client Quit)
2013-03-29 01:44:59	monochrom	I guess it is like this. you see "instance Show a => MonoClass [a]", and you want to know whether it's like prolog's MonoClass [a] :- Show a, right?
2013-03-29 01:45:20	monochrom	the answer is: it is like MonoClass [a] :- cut, Show a
2013-03-29 01:45:37	sw2wolf	yeah
2013-03-29 01:46:01	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-29 01:46:09	-->	mkouhei (~maeda_koh@124x35x68x250.ap124.ftth.ucom.ne.jp) has joined #haskell
2013-03-29 01:46:14	<--	cyril_ (~cyril@79.140.209.79) has quit (Ping timeout: 255 seconds)
2013-03-29 01:46:57	<--	Betal (~Betal@unaffiliated/betal) has quit (Read error: Connection reset by peer)
2013-03-29 01:47:00	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 264 seconds)
2013-03-29 01:47:02	monochrom	therefore when you say "[Int -> Bool]" it already commits to "yes that's a MonoClass instance, but now, if you don't also have Show (Int -> Bool), that will be an irrecoverable error"
2013-03-29 01:47:10	<--	oio (ba54a08a@gateway/web/freenode/ip.186.84.160.138) has quit (Quit: Page closed)
2013-03-29 01:47:20	sw2wolf	it seems haskell doesnot need cut, at least we donot need to use cut manually
2013-03-29 01:47:23	-->	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has joined #haskell
2013-03-29 01:47:51	<--	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has quit (Quit: "last(?) hardware modification")
2013-03-29 01:47:53	-->	Xaratas (~UserNick@brln-4dbc0fca.pool.mediaWays.net) has joined #haskell
2013-03-29 01:48:14	Tordek	does anyone remember what the function for combining parameters for sortOn is? I tried hoogling '(a -> b) -> (a -> c) -> a -> (b, c)' but no cigar
2013-03-29 01:48:34	-->	xpika (~jrg@110.141.193.164) has joined #haskell
2013-03-29 01:48:36	<--	QinGW (~yaaic@115.171.170.214) has quit (Read error: Connection reset by peer)
2013-03-29 01:48:44	shachaf	@ty (&&&) :: (a -> b) -> (a -> c) -> a -> (b, c)
2013-03-29 01:48:46	lambdabot	(a -> b) -> (a -> c) -> a -> (b, c)
2013-03-29 01:49:00	Tordek	thanks!
2013-03-29 01:49:01	shachaf	I don't know what sortOn is.
2013-03-29 01:49:03	shachaf	@hoogle sortOn
2013-03-29 01:49:04	lambdabot	No results found
2013-03-29 01:49:09	<--	Heero (~Heero@unaffiliated/heero) has quit (Ping timeout: 248 seconds)
2013-03-29 01:49:17	shachaf	See also: sortBy (comparing x <> comparing y <> comparing z)
2013-03-29 01:49:18	aCube	sortBy on
2013-03-29 01:49:29	aCube	:t on
2013-03-29 01:49:31	lambdabot	(b -> b -> c) -> (a -> b) -> a -> a -> c
2013-03-29 01:50:35	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 01:50:37	<--	DanZimm (~Dan@147.126.10.25) has quit (Quit: Computer has gone to sleep.)
2013-03-29 01:50:40	-->	ag90 (~ag90@184.175.42.76) has joined #haskell
2013-03-29 01:50:44	<--	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Remote host closed the connection)
2013-03-29 01:50:56	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 260 seconds)
2013-03-29 01:51:08	<--	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has quit (Client Quit)
2013-03-29 01:51:24	-->	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has joined #haskell
2013-03-29 01:51:37	sw2wolf	monochrom: the context declaration is VERY helpful when searching appropriate instances
2013-03-29 01:51:41	<--	Boney (~paul@124-168-104-147.dyn.iinet.net.au) has quit (Ping timeout: 245 seconds)
2013-03-29 01:52:13	<--	rofer (~rofer@rofer.me) has quit (Ping timeout: 245 seconds)
2013-03-29 01:52:43	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 01:54:47	-->	CodeDmitry (~AndChat68@216-58-111-182.cpe.distributel.net) has joined #haskell
2013-03-29 01:55:00	<--	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has quit (Client Quit)
2013-03-29 01:55:16	-->	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has joined #haskell
2013-03-29 01:55:49	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-29 01:56:03	-->	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has joined #haskell
2013-03-29 01:56:04	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-29 01:56:17	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 01:56:31	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 260 seconds)
2013-03-29 01:57:09	<--	peterhil` (~peterhil@a91-154-228-71.elisa-laajakaista.fi) has quit (Ping timeout: 248 seconds)
2013-03-29 01:57:10	<--	noteventime (~user@nl104-215-228.student.uu.se) has quit (Ping timeout: 248 seconds)
2013-03-29 01:59:00	<--	kartoffelbrei (~kartoffel@p549613DB.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-29 01:59:20	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 260 seconds)
2013-03-29 02:00:03	-->	rofer (~rofer@rofer.me) has joined #haskell
2013-03-29 02:00:30	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-29 02:00:31	CodeDmitry	Is a functor just the thing that associates two things together, like a Cartesian product/table?
2013-03-29 02:00:36	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 02:00:57	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 02:01:50	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-29 02:02:47	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-29 02:02:56	Rotaerk	CodeDmitry, no, a functor is something that a function can be mapped across
2013-03-29 02:03:00	arkeet	CodeDmitry: that's a function.
2013-03-29 02:03:31	arkeet	or relation
2013-03-29 02:03:50	Rotaerk	or map
2013-03-29 02:04:25	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 02:04:33	CodeDmitry	I mean isnt it something that accepts a function from a to b, and a structure constructor+object, and wraps the constructor on b and returns it?
2013-03-29 02:04:37	<--	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-29 02:05:22	Rotaerk	no, and where are you getting "structure constructor+object" from
2013-03-29 02:05:40	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-03-29 02:06:06	CodeDmitry	(a->b)->F a -> F b, F a being structure wrapper and object a
2013-03-29 02:06:19	-->	trescenzi (~trescenzi@2620:91:0:163:8c64:cb16:7a5e:7738) has joined #haskell
2013-03-29 02:06:20	CodeDmitry	Its abuse of terminology
2013-03-29 02:06:24	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 02:07:03	Rotaerk	CodeDmitry, an example of a functor is a list, and an example of mapping a function across it is transforming [a, b, c, d] into [f a, f b, f c, f d]
2013-03-29 02:07:27	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 02:07:38	Rotaerk	that should illustrate the concept of a functor
2013-03-29 02:08:16	<--	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2013-03-29 02:08:21	<--	tswett (~quassel@ec2-23-23-86-149.compute-1.amazonaws.com) has quit (Changing host)
2013-03-29 02:08:21	-->	tswett (~quassel@unaffiliated/tswett) has joined #haskell
2013-03-29 02:08:30	--	pdxleif is now known as pdxleif_away
2013-03-29 02:08:44	<--	gadjo (~gggg@109.102.72.188) has quit (Ping timeout: 255 seconds)
2013-03-29 02:09:16	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-29 02:09:29	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-03-29 02:09:32	<--	LucasCampos (~lucas@186.212.242.29) has quit (Quit: Leaving.)
2013-03-29 02:09:35	CodeDmitry	Yeah i was trying to understand the code but the fmap throws me off
2013-03-29 02:09:51	ChongLi	CodeDmitry: fmap is basically the same as map
2013-03-29 02:10:00	ChongLi	except instead of beign specialized to lists
2013-03-29 02:10:07	ChongLi	it works on any functor (including lists)
2013-03-29 02:10:41	<--	estebistec (~estebiste@68-70-92-82.static.kc.surewest.net) has quit (Remote host closed the connection)
2013-03-29 02:10:51	ag90	CodeDmitry: For more on this, check http://www.haskell.org/haskellwiki/Typeclassopedia#Functor. It might help with the intuition.
2013-03-29 02:11:03	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 02:11:05	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 02:11:08	arkeet	it's important to remember that the notion of a functor is an abstraction.
2013-03-29 02:11:16	CodeDmitry	Yeah
2013-03-29 02:11:20	-->	k00mi_ (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has joined #haskell
2013-03-29 02:11:23	<--	CodeDmitry (~AndChat68@216-58-111-182.cpe.distributel.net) has quit (Remote host closed the connection)
2013-03-29 02:11:40	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 02:11:49	-->	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has joined #haskell
2013-03-29 02:12:12	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-29 02:12:12	-->	CodeDmitry (~AndChat68@216-58-111-182.cpe.distributel.net) has joined #haskell
2013-03-29 02:12:15	CodeDmitry	Crashed
2013-03-29 02:13:45	jmcarthur	CodeDmitry: in haskell, if you have  F :: * -> *  and  fmap :: (a -> b) -> (F a -> F b)  such that  fmap (f . g) = fmap f . fmap g, you have a functor. F can be any type constructor so long as you have fmap and it obeys the law. it's a bit less productive to think about what a functor "does" than simply what it "is"
2013-03-29 02:14:08	jmcarthur	that was a semi-formal explanation. depending on the way you think, it may or may not be helpful
2013-03-29 02:14:09	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-29 02:14:36	<--	k00mi (~koomi@dslb-188-098-226-094.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-29 02:15:35	shachaf	jmcarthur: It is also necessary that fmap id = id
2013-03-29 02:15:48	shachaf	(In fact, it's sufficient in this case.)
2013-03-29 02:15:50	jmcarthur	shachaf: in hask that is implied by the law i gave
2013-03-29 02:15:52	jmcarthur	isn't it?
2013-03-29 02:15:54	arkeet	no
2013-03-29 02:15:58	shachaf	No, it goes the other way.
2013-03-29 02:16:00	jmcarthur	ah
2013-03-29 02:16:07	shachaf	For example: instance Functor [] where fmap _ _ = []
2013-03-29 02:16:31	jmcarthur	i actually had typed that one instead at first but convinced myself i was confused
2013-03-29 02:16:33	arkeet	with only the composition law, all you get is that fmap id is idempotent.
2013-03-29 02:16:40	jmcarthur	turns out i was confused, just not the way i thought i was :P
2013-03-29 02:16:42	-->	ixmatus (~ixmatus@cpe-173-174-43-51.austin.res.rr.com) has joined #haskell
2013-03-29 02:16:59	--	Watcher7 is now known as Watcher7|off
2013-03-29 02:17:06	--	stelleg_away is now known as stelleg
2013-03-29 02:17:22	jmcarthur	that would have been a better law for an explanation anyway since it's simpler :\
2013-03-29 02:17:49	-->	centrinia_ (~exc@adsl-184-36-92-217.asm.bellsouth.net) has joined #haskell
2013-03-29 02:17:59	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 02:18:02	jmcarthur	shachaf: yeah, not sure what i was thinking
2013-03-29 02:18:06	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-03-29 02:18:07	shachaf	I suspect it doesn't matter.
2013-03-29 02:18:28	jmcarthur	probably not immediately
2013-03-29 02:18:38	<--	k00mi_ (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has quit (Ping timeout: 255 seconds)
2013-03-29 02:18:38	-->	Boney (~paul@124-149-152-56.dyn.iinet.net.au) has joined #haskell
2013-03-29 02:18:46	<--	glguy_ (~emertens@unaffiliated/glguy) has quit (Quit: Quitting)
2013-03-29 02:18:57	shachaf	I mean that person you're explaining to will be confused either way.
2013-03-29 02:19:20	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-29 02:19:29	jmcarthur	i am of the opinion that playing fast and loose with analogies tends to have negative effects in the long term even if they appear to help in the short term.
2013-03-29 02:19:49	shachaf	I agree.
2013-03-29 02:19:55	arkeet	so give correct and well-thought-out analogies instead.
2013-03-29 02:19:58	shachaf	The explanation is OK.
2013-03-29 02:20:00	ChongLi	it's hard to make an analogy of something so abstract
2013-03-29 02:20:11	ChongLi	it's the same problem with monads
2013-03-29 02:20:12	jmcarthur	so i like to give a somewhat formal explanation but then follow up with analogies if necessary
2013-03-29 02:20:31	jmcarthur	as long as you don't lose sight of the real explanation, analogies are probably okay
2013-03-29 02:20:40	ChongLi	using any real-world analogy is pretty much guaranteed to be too specific
2013-03-29 02:20:44	jmcarthur	yeah
2013-03-29 02:20:48	<--	centrinia (~exc@adsl-184-36-82-19.asm.bellsouth.net) has quit (Ping timeout: 260 seconds)
2013-03-29 02:20:53	jmcarthur	arkeet: what is a "correct" analogy?
2013-03-29 02:21:04	jmcarthur	a model?
2013-03-29 02:21:09	<--	niklasb (~codeslay0@p5B31011D.dip0.t-ipconnect.de) has quit (Ping timeout: 248 seconds)
2013-03-29 02:21:17	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 02:21:52	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-29 02:22:01	-->	fosky (~fosky@ppp118-209-96-150.lns20.mel4.internode.on.net) has joined #haskell
2013-03-29 02:22:26	ChongLi	honestly, for monads, I think a better way to explain is to forgo analogies or anything like that
2013-03-29 02:22:56	quchen	Boxes always worked well for my functors.
2013-03-29 02:23:05	quchen	For monads not so much though.
2013-03-29 02:23:14	shachaf	:-(
2013-03-29 02:23:27	arkeet	the only real way to get a handle on an abstraction is to have a good supply of examples.
2013-03-29 02:23:30	ChongLi	so in the case of the Maybe functor
2013-03-29 02:23:35	ChongLi	the box may or may not exist?
2013-03-29 02:23:41	cmccann	a monad is like a box full of burritos
2013-03-29 02:23:45	jmcarthur	examples and a precise, accurate explanation of the *actual* thing almost always works, if you're careful to not go too fast and make it too dense
2013-03-29 02:24:12	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 02:24:25	edwardk	its easy. just make the explanation too fast and dense, and if the person comes back 6 months later understanding it, then they are worth continuing to explain things too ;)
2013-03-29 02:24:26	quchen	ChongLi: Maybe is special. It's so easy the box analogy makes it more complicated. ;-)
2013-03-29 02:24:29	cmccann	I am convinced that analogies only make it harder to understand truly abstract concepts.
2013-03-29 02:24:32	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Quit: Leaving)
2013-03-29 02:24:34	arkeet	so you should have a bunch of things that share a common pattern, then recognize the pattern.
2013-03-29 02:24:56	johnw	edwardk: haha
2013-03-29 02:24:59	edwardk	er to
2013-03-29 02:25:01	johnw	edwardk: so that's why!
2013-03-29 02:25:06	ChongLi	just tell it straight up: a monad is an instance of the Monad class; it implements (>>=) and return and it satisfies the monad laws
2013-03-29 02:25:06	<--	earspliT (~earsplit@ool-4a589100.dyn.optonline.net) has quit (Quit: Lost terminal)
2013-03-29 02:25:09	edwardk	i mean look at johnw.
2013-03-29 02:25:13	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 02:25:19	arkeet	this is how people come up with abstractions in the first place.
2013-03-29 02:25:19	quchen	ChongLi: Yeah that doesn't work.
2013-03-29 02:25:24	ChongLi	that's all there is to it
2013-03-29 02:25:25	cmccann	arkeet: a guided tour through reinventing the concept is sort of the logical conclusion of that approach
2013-03-29 02:25:25	jmcarthur	edwardk: is this the same kind of thing as the sorting algorithm where you check to see if the array is sorted and if it's not then you destroy the universe?
2013-03-29 02:25:32	<--	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Changing host)
2013-03-29 02:25:32	-->	dfletcher_ (~fletch@drupal.org/user/72475/view) has joined #haskell
2013-03-29 02:25:34	--	dfletcher_ is now known as dfletcher
2013-03-29 02:25:34	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-29 02:25:35	ChongLi	just explain each of those things
2013-03-29 02:25:35	edwardk	i braindumped way too much on him, and now i've outsourced that portion of my explanation system ;)
2013-03-29 02:25:35	cmccann	arkeet: it works really well if it works at all
2013-03-29 02:25:38	arkeet	except for category theorists. they make abstractions just for the sake of abstracting.
2013-03-29 02:25:41	<--	bos (~bos@173.252.71.129) has quit (Remote host closed the connection)
2013-03-29 02:25:41	jmcarthur	edwardk: (therefore only universes in which the array is sorted can exist)
2013-03-29 02:25:45	ChongLi	and then give some examples
2013-03-29 02:25:49	edwardk	jmcarthur: yes, community by quantum bogosort
2013-03-29 02:26:03	cmccann	jmcarthur: quantum suicide bogosort is the best sorting algorithm
2013-03-29 02:26:04	quchen	Hello first grade. Sharpen your pencils, today we're talking about the Principia, because we don't want to give you false analogies
2013-03-29 02:26:07	quchen	Good idea.
2013-03-29 02:26:28	jmcarthur	quchen: nobody said it has to be so... boring
2013-03-29 02:26:32	johnw	a lot of my Haskell education now is realizing what edwardk meant six months ago
2013-03-29 02:26:36	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 02:26:36	arkeet	quchen: that's also the wrong way to go about it. :p
2013-03-29 02:26:57	arkeet	numbers are an abstraction too.
2013-03-29 02:26:58	 *	sw2wolf thining whether or not it is possible to create a light wight haskell REPL. GHCi is too heavy ...
2013-03-29 02:27:04	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 02:27:06	quchen	arkeet: Well that's what "a monad is what fulfills the laws" feels like to a beginner. It's true, and it's completely useless.
2013-03-29 02:27:09	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-29 02:27:11	cmccann	arkeet: category theory originated from common abstractions in mathematics. I think people who just do category theory itself are at the point of creating generalized abstractions over other generalized abstractions, so it's kinda the same thing
2013-03-29 02:27:13	Philippa	sw2wolf: tried hugs?
2013-03-29 02:27:16	monochrom	I recommend http://homepages.inf.ed.ac.uk/wadler/topics/monads.html#marktoberdorf
2013-03-29 02:27:26	arkeet	cmccann: my remark was supposed to be tongue-in-cheek. :p
2013-03-29 02:27:38	-->	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has joined #haskell
2013-03-29 02:27:41	arkeet	oh crap, I forgot to mark it with a ":p"
2013-03-29 02:27:48	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 264 seconds)
2013-03-29 02:28:03	sw2wolf	Philippa: does hugs implement haskell standard completely ?
2013-03-29 02:28:11	jmcarthur	quchen: such an explanation is not a complete introduction. it's more of a reference to look at while going through the *actual* lesson
2013-03-29 02:28:15	monochrom	the p looks more like IO Tongue -> Tongue :)
2013-03-29 02:28:20	ChongLi	to understand the monad laws you just need to understand (>>=) and return
2013-03-29 02:28:38	 *	cmccann thinks (<=<) is a better way to understand the monad laws
2013-03-29 02:28:43	cmccann	or join
2013-03-29 02:28:44	Philippa	sw2wolf: Bearing in mind that GHCi doesn't? No, it doesn't
2013-03-29 02:28:45	edwardk	cmccann: i agree
2013-03-29 02:28:46	cmccann	not (>>=)
2013-03-29 02:28:47	 *	johnw agrees
2013-03-29 02:28:47	 *	arkeet was about to say that.
2013-03-29 02:28:50	jmcarthur	quchen: since the reference can never be wrong, even though the lesson is very likely to contain errors and poor explanations. the reference makes it easy to fact check the conclusions you derive from the lesson
2013-03-29 02:28:52	arkeet	about <=<
2013-03-29 02:28:54	Philippa	you might want to go look up the list of infelicities, though
2013-03-29 02:28:57	cmccann	(>>=) is convenient for programming and desugaring do blocks
2013-03-29 02:29:03	edwardk	there is something fishy about that operator though
2013-03-29 02:29:03	cmccann	but it's conceptually obtuse
2013-03-29 02:29:06	quchen	cmccann: join is good for some monads, but for say State I find >>= easier.
2013-03-29 02:29:07	edwardk	i blame Cale
2013-03-29 02:29:16	ChongLi	cmccann: I disagree
2013-03-29 02:29:18	jmcarthur	(of course, the reference can be wrong if you aren't careful as my error earlier demonstrates...)
2013-03-29 02:29:23	arkeet	quchen: for State, >=>  is by far the easiest.
2013-03-29 02:29:26	jmcarthur	(which is really bad)
2013-03-29 02:29:30	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 02:29:31	arkeet	after all, a -> State s b ~ (a,s) -> (b,s)
2013-03-29 02:29:34	quchen	arkeet: I've never looked at >=> for state
2013-03-29 02:29:36	arkeet	and it's obvious how to compose such things.
2013-03-29 02:29:38	quchen	:s
2013-03-29 02:29:39	cmccann	yes, kleisli composition is always a good way to do it
2013-03-29 02:29:39	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-29 02:29:46	sw2wolf	:t (>=>)
2013-03-29 02:29:46	Philippa	cmccann: conceptually, you explain it exactly in terms of its role in do blocks - or rather, a generalised desugaring of (simple) let statements
2013-03-29 02:29:47	ab9rf	i stopped caring about whether i understood monads or not.  i just use them.
2013-03-29 02:29:47	<--	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-29 02:29:47	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-29 02:29:50	cmccann	join is simple for container-ish functors like [] or Maybe
2013-03-29 02:29:58	cmccann	not so much when functions are involved
2013-03-29 02:30:27	Philippa	cmccann: sure it is. It's run<currentMonad>M
2013-03-29 02:30:35	-->	estebistec (~estebiste@68-70-92-82.static.kc.surewest.net) has joined #haskell
2013-03-29 02:30:43	arkeet	yeah, I have a hard time thinking about join for State.
2013-03-29 02:30:49	-->	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has joined #haskell
2013-03-29 02:30:53	<--	trescenzi (~trescenzi@2620:91:0:163:8c64:cb16:7a5e:7738) has quit (Remote host closed the connection)
2013-03-29 02:30:58	arkeet	it works well for a lot of monads though.
2013-03-29 02:31:08	cmccann	join for Reader is handy for pointless obfuscation
2013-03-29 02:31:11	quchen	For state, I think of join as >>= id ;-)
2013-03-29 02:31:29	jmcarthur	cmccann: oh? i find join for Reader to be quite intuitive...
2013-03-29 02:31:32	arkeet	:t id >=> id
2013-03-29 02:31:34	lambdabot	Monad m => m (m c) -> m c
2013-03-29 02:31:41	jmcarthur	it's just W
2013-03-29 02:31:56	quchen	jmcarthur: But you wouldn't use join for reader
2013-03-29 02:32:07	jmcarthur	quchen: i would for  ((->) a)
2013-03-29 02:32:07	cmccann	jmcarthur: yes. hence obfuscation via pointless, i.e. @pl
2013-03-29 02:32:09	cmccann	:P
2013-03-29 02:32:09	quchen	join alone is fine, but I can't picture how it would be beneficial to think of it
2013-03-29 02:32:19	quchen	(for Reader applications that is)
2013-03-29 02:32:23	jmcarthur	> join (*) 10
2013-03-29 02:32:25	lambdabot	  100
2013-03-29 02:32:35	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-29 02:32:45	ab9rf	:t join
2013-03-29 02:32:46	lambdabot	Monad m => m (m a) -> m a
2013-03-29 02:32:48	jmcarthur	> join (++) "foo"
2013-03-29 02:32:51	lambdabot	  "foofoo"
2013-03-29 02:33:01	arkeet	> join f x :: Expr
2013-03-29 02:33:02	ab9rf	ah
2013-03-29 02:33:04	lambdabot	  f x x
2013-03-29 02:33:15	cmccann	:t fmap fix return
2013-03-29 02:33:17	lambdabot	b -> b
2013-03-29 02:33:21	quchen	jmcarthur: sure. But when have you used that? How's that related to using 'ask'?
2013-03-29 02:33:28	-->	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has joined #haskell
2013-03-29 02:33:35	jmcarthur	quchen: ((->) a)  is the implementation for Reader
2013-03-29 02:33:39	arkeet	ask = id
2013-03-29 02:33:40	jmcarthur	@unmtl Reader r a
2013-03-29 02:33:40	lambdabot	r -> a
2013-03-29 02:33:45	arkeet	asks = id, too
2013-03-29 02:34:07	arkeet	> ask 5
2013-03-29 02:34:09	lambdabot	  5
2013-03-29 02:34:28	jmcarthur	quchen: i use it when i have an operation that i want to put the same argument on both sides of
2013-03-29 02:34:31	sw2wolf	:t id
2013-03-29 02:34:33	lambdabot	a -> a
2013-03-29 02:34:35	cmccann	:t asks
2013-03-29 02:34:37	lambdabot	MonadReader r m => (r -> a) -> m a
2013-03-29 02:34:39	cmccann	:t reader
2013-03-29 02:34:40	lambdabot	MonadReader r m => (r -> a) -> m a
2013-03-29 02:34:51	quchen	jmcarthur: But then that's not really a Reader thing. join just happens to do the right thing.
2013-03-29 02:35:04	jmcarthur	quchen: i don't typically just say  "join foo bar"  when i could just say  "foo bar bar", but i do you "join foo" when the alternative is "\x -> foo x x"
2013-03-29 02:35:06	quchen	Like using <*> as S
2013-03-29 02:35:13	cmccann	no, duplicating inputs is exactly Reader's thing
2013-03-29 02:35:16	jmcarthur	quchen: it's not just a coincidence
2013-03-29 02:35:29	jmcarthur	quchen: nor is the (<*>) is S
2013-03-29 02:35:31	jmcarthur	*that
2013-03-29 02:35:40	monochrom	it is not so much wrong analogies but ambiguous natural language words
2013-03-29 02:35:54	jmcarthur	monochrom: yeah that happens a lot too :\
2013-03-29 02:36:16	jmcarthur	e.g. mempty/mappend  >:(
2013-03-29 02:36:18	ChongLi	join x = x >>= id
2013-03-29 02:36:29	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-29 02:36:35	-->	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has joined #haskell
2013-03-29 02:36:35	<--	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has quit (Changing host)
2013-03-29 02:36:35	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-03-29 02:36:37	arkeet	anyway, >>= is less intuitive than both join and >=>, I think.
2013-03-29 02:36:38	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 02:36:40	jmcarthur	class Appendable a   -- *shudder*
2013-03-29 02:36:49	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-29 02:37:08	quchen	Hmm. I don't think there's much of a difference between >=> and >>= understanding-wise
2013-03-29 02:37:09	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-29 02:37:21	<--	estebistec (~estebiste@68-70-92-82.static.kc.surewest.net) has quit (Remote host closed the connection)
2013-03-29 02:37:23	jmcarthur	arkeet: it strikes a decent balance of usefulness, learnability, and typically clear implementation, though
2013-03-29 02:37:27	monochrom	>=> is a bit less expressive
2013-03-29 02:37:37	arkeet	no it isn't!
2013-03-29 02:37:40	arkeet	you can write >>= in terms of it.
2013-03-29 02:37:45	cmccann	quchen: try writing the monad laws using each and see which is clearer
2013-03-29 02:37:58	arkeet	:t (>=>)
2013-03-29 02:37:59	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-29 02:38:02	arkeet	>>= is just that where a = ()
2013-03-29 02:38:07	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 02:38:26	monochrom	I see
2013-03-29 02:38:26	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-29 02:38:38	quchen	cmccann: It has benefits, yes. Making this the only criterion is a little Texas sharpshooty.
2013-03-29 02:38:52	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 02:40:03	jmcarthur	i think it makes sense for Monad to have (>>=) and not (>=>), since implementing the latter directly is almost always slightly more complicated than implementing the former directly, even though i think (>=>) is more presentable
2013-03-29 02:40:17	-->	mknox (~mknox@8.25.197.25) has joined #haskell
2013-03-29 02:40:24	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 02:40:25	<--	shintah (bebble@h-169-29.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-29 02:40:30	copumpkin	"a monad is a thing that when you construct something that resembles the kleisli category, it actually is a category"
2013-03-29 02:40:39	-->	Shin-LaC (~LaC@68.65.174.42) has joined #haskell
2013-03-29 02:40:40	cmccann	fmap, return, and join are orthogonal and sufficient, and (>=>) makes describing the laws and properties of monads easier
2013-03-29 02:40:52	ChongLi	newbies completely freeze up
2013-03-29 02:40:56	ChongLi	deer in the headlights
2013-03-29 02:41:00	jmcarthur	well, (>=>) makes the laws more concise, at least
2013-03-29 02:41:02	ChongLi	at the mere mention of categories
2013-03-29 02:41:05	monochrom	a wrong analogy could still be useful, for learning and for practice. the important point is that it is unambiguous, so that there is a clear "it is right on these points" and "it is wrong on these points", and you can learn from them.
2013-03-29 02:41:09	jmcarthur	the derivation of those laws is further obscured, though
2013-03-29 02:41:11	arkeet	I think the Kleisli arrows themselves are easier to think about.
2013-03-29 02:41:19	arkeet	how could it be any easier than   a -> State s b = (a,s) -> (b,s)
2013-03-29 02:41:35	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-29 02:41:39	ChongLi	soon thereafter you begin talking about morphisms and their eyes glaze over!
2013-03-29 02:41:40	cmccann	arkeet: that's what using (>=>) is doing, modulo newtype wrappers
2013-03-29 02:41:47	arkeet	yes, it's composing such things.
2013-03-29 02:41:52	-->	jasonkuhrt (~jasonkuhr@modemcable174.218-81-70.mc.videotron.ca) has joined #haskell
2013-03-29 02:42:01	jmcarthur	monochrom: sure. my only really strong claims is that the actual definition should usually be at the forefront even while using analogies in order to make sure things don't get out of control
2013-03-29 02:42:04	monochrom	ambiguous natural language wording is open to constantly moving the goalpost to make it "right", so that it is not refutable. you learn nothing from an irrefutable claim.
2013-03-29 02:42:05	jmcarthur	*claim
2013-03-29 02:42:09	arkeet	but looking it that way makes it really clear what composing State actions does.
2013-03-29 02:42:28	arkeet	IMO.
2013-03-29 02:42:29	cmccann	monochrom: possibly more important is that the analogy be wrong in ways that lead you in the direction of the right thing
2013-03-29 02:42:53	cmccann	getting a shove in the right direction and a "good luck, you're on your own now" is better than being led down a blind alley
2013-03-29 02:43:15	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 02:43:43	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-29 02:43:52	ChongLi	another analogy I tried to use with someone is that composing a bunch of monadic actions together is like building up a data structure which will later be executed like a shell script
2013-03-29 02:44:00	<--	midfield (~user@70-36-157-176.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-03-29 02:44:04	ChongLi	(in the case of IO)
2013-03-29 02:44:07	-->	lennart__ (~lennart@kiel-4d0666b3.pool.mediaWays.net) has joined #haskell
2013-03-29 02:44:08	ChongLi	is that a good one?
2013-03-29 02:44:08	arkeet	and I think it helps that Kleisli arrows actually *do* things.
2013-03-29 02:44:23	Philippa	ChongLi: it's good enough that for any monad there is going to be a reasonable decomposition that way
2013-03-29 02:44:45	shachaf	Philippa: Even Cont?
2013-03-29 02:44:47	quchen	It's pretty good for "holds exactly one value" monads
2013-03-29 02:44:58	ChongLi	haha
2013-03-29 02:45:06	shachaf	quchen: What is a "holds exactly one value" monad?
2013-03-29 02:45:08	-->	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 02:45:09	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-03-29 02:45:18	<--	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has quit (Quit: leaving)
2013-03-29 02:45:19	ChongLi	to understand the continuation monad just put your brain in a blender and press the puree button!
2013-03-29 02:45:22	jmcarthur	quchen: no, this works for other kinds of monads, too
2013-03-29 02:45:25	-->	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-29 02:45:30	monochrom	when I said ">=> is a bit less expressive", I used an analogy. but it is an unambiguous, mathematical analogy. I was thinking Arrow. therefore, it was possible to see where the difference was.
2013-03-29 02:45:31	Philippa	shachaf: I reckon so. It's probably a somewhat amusing one though
2013-03-29 02:45:33	ab9rf	ChongLi: how would that change anything?
2013-03-29 02:45:43	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-29 02:45:44	quchen	shachaf: All but Maybe, List and Cont.
2013-03-29 02:45:51	quchen	Cont is just on that list because.
2013-03-29 02:45:57	arkeet	Either isn't on that list.
2013-03-29 02:46:01	jmcarthur	quchen: for example, a Maybe Int is a script that either returns a value of type Int or doesn't
2013-03-29 02:46:04	ChongLi	ab9rf: that way your mind can follow the strange flow of execution
2013-03-29 02:46:13	shachaf	quchen: I don't know what you mean but it doesn't sound right.
2013-03-29 02:46:13	Philippa	shachaf: one whose implementation always has exactly one continuation or analogue thereof in hand
2013-03-29 02:46:25	Philippa	(but it's easy for me to say that now I know how the concept works)
2013-03-29 02:46:26	shachaf	How many values does (x :: Bool -> Char) hold?
2013-03-29 02:46:28	arkeet	sounds pretty vague.
2013-03-29 02:46:28	arkeet	:p
2013-03-29 02:46:34	ChongLi	I guess you could say the same thing about laziness in general
2013-03-29 02:46:36	shachaf	(The monad here is (Bool ->), of course.)
2013-03-29 02:46:38	monochrom	whereas with popular natural language cliches such as "monad is about computation" and "arrow is about computation" you will go nowhere. you can keep moving the definition of "computation" to fit everything.
2013-03-29 02:46:53	ChongLi	that it may not be immediately obvious what order things will evaluate in
2013-03-29 02:47:12	monochrom	down with natural languages!
2013-03-29 02:47:19	Philippa	monochrom: that's what happens when people forget that "computation" was supposed to be a term of art that might as well have been 'program'
2013-03-29 02:47:21	arkeet	>=> is less expressive than >>= in the same way that (.) is less expressive than function application.
2013-03-29 02:47:23	cardamon	Up with skirts!
2013-03-29 02:47:28	cardamon	Wait..what?
2013-03-29 02:47:30	jmcarthur	shachaf: it holds  Char^2  of course (plus an extra for _|_) :P
2013-03-29 02:47:33	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-29 02:47:37	jmcarthur	cardamon: this isn't the place
2013-03-29 02:47:47	kfish	jmcarthur, +1
2013-03-29 02:47:49	-->	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has joined #haskell
2013-03-29 02:47:49	<--	lennart_ (~lennart@kiel-d9bfd97f.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-29 02:47:55	Philippa	jmcarthur: cheers
2013-03-29 02:48:01	shachaf	jmcarthur: Right, so Reader should be in that list, right?
2013-03-29 02:48:13	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 02:48:24	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-03-29 02:48:24	jmcarthur	shachaf: i am neither a lover nor a hater of the container analogy
2013-03-29 02:48:29	cardamon	Sorry, crude humor bleeding over from other rooms.    I'm very unfocused tonight.
2013-03-29 02:48:38	ChongLi	another thing I find interesting to explain is sum types and product types
2013-03-29 02:48:44	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Remote host closed the connection)
2013-03-29 02:49:14	shachaf	jmcarthur: But any analogy that applies to, say, Stream should also apply to (Nat ->), surely.
2013-03-29 02:49:46	jmcarthur	cardamon: it's all good. just be aware that we want to be as welcoming of a community as we can and that even if you don't mean anything overtly offensive that doesn't mean nobody will be uncomfortable about certain kinds of jokes
2013-03-29 02:49:51	<--	sw2wolf (~czsq888@222.209.240.64) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 02:50:03	shachaf	jmcarthur++
2013-03-29 02:50:10	cmccann	the container analogy works best on monads that aren't in the same room as shachaf.
2013-03-29 02:50:41	jmcarthur	shachaf: i have no intention of attacking or defending the container analogy
2013-03-29 02:50:50	jmcarthur	i'd rather just attack analogies ;)
2013-03-29 02:51:51	-->	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has joined #haskell
2013-03-29 02:51:53	cardamon	Um...what's the =<< operator do?  It's not on the list I have.
2013-03-29 02:52:01	arkeet	it's a flipped >>=
2013-03-29 02:52:01	jmcarthur	it's flip (>>=)
2013-03-29 02:52:04	jmcarthur	:t (=<<)
2013-03-29 02:52:06	lambdabot	Monad m => (a -> m b) -> m a -> m b
2013-03-29 02:52:09	jmcarthur	it lives in Control.Monad
2013-03-29 02:54:24	<--	pt (~ptpt@84.114.230.154) has quit (Ping timeout: 260 seconds)
2013-03-29 02:54:45	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 248 seconds)
2013-03-29 02:55:25	cardamon	Oh, so you have two operators with the same function but different associativity?
2013-03-29 02:55:38	shachaf	cardamon: Useful tool:
2013-03-29 02:55:40	shachaf	@where hoogle
2013-03-29 02:55:40	lambdabot	http://haskell.org/hoogle
2013-03-29 02:55:53	shachaf	The associativity isn't the point. The arguments are flipped.
2013-03-29 02:55:56	shachaf	Look at the types.
2013-03-29 02:56:04	-->	chatsiri_ (~chatsiri_@171.7.150.203) has joined #haskell
2013-03-29 02:56:11	ChongLi	cardamon: it makes more sense when you're writing it out in code
2013-03-29 02:56:16	arkeet	f =<< x  =  x >>= f
2013-03-29 02:56:21	<--	lennart__ (~lennart@kiel-4d0666b3.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-29 02:56:21	cmccann	that said, they do have opposite associativity as well
2013-03-29 02:56:31	<--	pierian62 (~Pierian62@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Quit: pierian62)
2013-03-29 02:56:31	ChongLi	if you imagine it as a pipeline you can think of it as reversing the direction
2013-03-29 02:56:51	-->	MnO2 (~MnO2@nat/yahoo/x-hoamtgiijidijtgf) has joined #haskell
2013-03-29 02:57:09	cardamon	I'm doing a course in language concepts, so syntax, semantics, and bindings are fresh in my head.
2013-03-29 02:57:31	arkeet	the argument order for =<< is supposed to remind you of function application.
2013-03-29 02:57:32	cmccann	so that (x >>= f >>= g) and (g =<< f =<< x) mean the same thing
2013-03-29 02:57:50	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 256 seconds)
2013-03-29 02:57:52	ChongLi	a lot of the stuff we do in functional programming is so that composition is easier/possible
2013-03-29 02:58:17	cmccann	composition is more (>=>) or (<=<)
2013-03-29 02:58:25	jmcarthur	i wish there was a prefix version of (=<<) in the standard libs
2013-03-29 02:58:31	-->	NemesisD (~NemesisD@50.125.74.242) has joined #haskell
2013-03-29 02:58:35	shachaf	@let dnib = (=<<)
2013-03-29 02:58:36	jmcarthur	it's nice to think of it as a function transformation
2013-03-29 02:58:37	lambdabot	 Defined.
2013-03-29 02:58:43	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-29 02:58:53	jmcarthur	i also like numbered variants, similar to liftA2, liftA3, etc.
2013-03-29 02:59:13	jmcarthur	@let dnib2 f x y = x >>= \a -> y >>= \b -> f x y
2013-03-29 02:59:16	lambdabot	 Defined.
2013-03-29 02:59:19	jmcarthur	:t dnib2
2013-03-29 02:59:21	lambdabot	Monad m => (m a -> m a1 -> m b) -> m a -> m a1 -> m b
2013-03-29 02:59:24	jmcarthur	err
2013-03-29 02:59:24	shachaf	@ty (.)
2013-03-29 02:59:26	lambdabot	(b -> c) -> (a -> b) -> a -> c
2013-03-29 02:59:27	jmcarthur	duh
2013-03-29 02:59:28	shachaf	whoa, dude
2013-03-29 02:59:30	jmcarthur	i'm wrong
2013-03-29 02:59:37	arkeet	jmcarthur: nice id.
2013-03-29 02:59:54	shachaf	jmcarthur: It's join (liftM2 f x y) and so on
2013-03-29 02:59:58	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 02:59:59	cmccann	jmcarthur: I have "bind" in my prelude replacement as a prefix (=<<)
2013-03-29 03:00:11	jmcarthur	oh i see what i did
2013-03-29 03:00:14	jmcarthur	derp
2013-03-29 03:00:15	cmccann	and I still like my (=<*) operator even if nobody else does
2013-03-29 03:00:24	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-29 03:00:26	arkeet	what does that do?
2013-03-29 03:00:27	jmcarthur	:t \f x y -> x >>= \a -> y >>= \b -> f a b
2013-03-29 03:00:29	lambdabot	Monad m => (a -> a1 -> m b) -> m a -> m a1 -> m b
2013-03-29 03:01:08	cmccann	it's (=<*) :: m (a -> m b) -> m a -> m b
2013-03-29 03:01:11	jmcarthur	arkeet: that wasn't id, actually
2013-03-29 03:01:18	cmccann	=<* does exactly what it looks like
2013-03-29 03:01:19	arkeet	true.
2013-03-29 03:01:20	jmcarthur	arkeet: it still performed the effects of x and y
2013-03-29 03:01:24	<--	Y_Less (Y_Less@5ac17519.bb.sky.com) has quit (Ping timeout: 264 seconds)
2013-03-29 03:01:41	-->	Y_Less (~Y_Less@5ac17519.bb.sky.com) has joined #haskell
2013-03-29 03:01:43	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-03-29 03:01:53	jmcarthur	cmccann: i'm trying to think of situations where i would have wanted that...
2013-03-29 03:02:01	cmccann	so I can write e.g. "f <$> x <*> y =<* z"
2013-03-29 03:02:16	cmccann	jmcarthur: it's like (<*>) except when the function ends with a monadic result
2013-03-29 03:02:29	<--	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-03-29 03:02:30	<--	Spockz (~alessandr@thalion.alessandrovermeulen.me) has quit (Ping timeout: 264 seconds)
2013-03-29 03:02:30	jmcarthur	i see *what* it is, i just don't see why i want it :P
2013-03-29 03:02:40	quchen	Seconded
2013-03-29 03:02:55	quchen	Also =<* looks like it could be from Lens ;-)
2013-03-29 03:02:59	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-03-29 03:03:01	jmcarthur	i will be looking for this pattern now, though, of course
2013-03-29 03:03:05	-->	crowberries74 (~crowberri@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 03:03:16	-->	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-29 03:03:23	jmcarthur	but i really don't think this comes up often for me...
2013-03-29 03:03:25	cmccann	jmcarthur: you were just trying out the type of something where you'd use it :P
2013-03-29 03:03:55	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 03:04:03	-->	charliesome (~textual@124-148-140-249.dyn.iinet.net.au) has joined #haskell
2013-03-29 03:04:17	jmcarthur	i don't see it immediately
2013-03-29 03:04:19	linduxed	is there a substitute command for strings?
2013-03-29 03:04:19	cmccann	jmcarthur: e.g. "\f x y -> f <$> x =<* y :: (Monad m, Applicative m) => (a1 -> a -> m b) -> m a1 -> m a -> m b"
2013-03-29 03:04:56	jmcarthur	eh
2013-03-29 03:04:59	shachaf	@ty \f x y -> join (f <$> x <*> y)
2013-03-29 03:05:01	lambdabot	(Monad m, Applicative m) => (a2 -> a1 -> m a) -> m a2 -> m a1 -> m a
2013-03-29 03:05:12	cmccann	shachaf: yeah that's the same thing
2013-03-29 03:05:18	linduxed	so that for instance if i have "Hello there, mister linduxed, come in." id be able to say "replace the ", " with ";_"" for instance
2013-03-29 03:05:46	cmccann	jmcarthur: it's not that uncommon to have a function with a type that looks like "a -> b -> ... -> m c"  for some number of arguments
2013-03-29 03:06:14	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 03:06:15	cmccann	this is just so that I can use functions like that infix-y applicative style
2013-03-29 03:06:18	<--	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-29 03:06:18	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-29 03:06:21	quchen	linduxed: The Regex libs will solve the problem for sure. Not beautiful but will do the trick
2013-03-29 03:06:26	<--	ag90 (~ag90@184.175.42.76) has left #haskell
2013-03-29 03:06:27	shachaf	cmccann: Now make a trick that lets you do (a -> m b -> c -> m d) -> m a -> m b -> m c -> m d
2013-03-29 03:06:31	<--	js___ (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 260 seconds)
2013-03-29 03:06:38	ChongLi	now you have two problems!
2013-03-29 03:06:51	-->	Spockz (~alessandr@thalion.alessandrovermeulen.me) has joined #haskell
2013-03-29 03:06:58	jmcarthur	cmccann: right. i also prefer liftA* over a chain of (<*>) though, so maybe this is why i don't favor your style
2013-03-29 03:07:07	-->	lpvb (~lpvb@199.188.72.31) has joined #haskell
2013-03-29 03:07:09	cmccann	jmcarthur: that might explain it yes!
2013-03-29 03:07:20	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-29 03:07:33	Philippa	jmcarthur: so I don't because it forces me to count
2013-03-29 03:07:33	arkeet	jmcarthur: finally, someone who agrees with me!
2013-03-29 03:07:43	shachaf	<lexande> sometimes i am confronted with a problem and i think "I know, I'll use Banach-Tarski"
2013-03-29 03:07:45	jmcarthur	Philippa: haha
2013-03-29 03:07:46	 *	cmccann uses liftA* when lifting somepoint pointlessly, but (<*>)s when writing it out pointfully
2013-03-29 03:07:48	arkeet	Philippa: how often do you use liftAn for n >= 3?
2013-03-29 03:07:51	linduxed	quchen: hmmm, i'm starting to think that maybe i should work on my data structure instead...
2013-03-29 03:07:56	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 260 seconds)
2013-03-29 03:08:08	cmccann	...somepoint?
2013-03-29 03:08:09	Philippa	arkeet: I don't. Pointedly.
2013-03-29 03:08:25	cmccann	I got a little carried away there it seems
2013-03-29 03:08:37	arkeet	I am a fan of liftA2.
2013-03-29 03:08:56	Philippa	2 makes a fair idiom for things that we think of as binary operators, yeah
2013-03-29 03:09:00	 *	hackagebot binary-file 0.13.2 - read/write binary file  http://hackage.haskell.org/package/binary-file-0.13.2 (YoshikuniJujo)
2013-03-29 03:09:10	Philippa	tasks like parsing can end up with n somewhat bigger than 2, though
2013-03-29 03:09:17	arkeet	sure.
2013-03-29 03:09:24	jmcarthur	i admit that it's a bit unsatisfying that liftA* doesn't scale the way (<*>) does
2013-03-29 03:09:27	<--	Guest74767 (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has quit (Read error: No route to host)
2013-03-29 03:09:30	jmcarthur	but for the common case i think it's nice
2013-03-29 03:09:32	monochrom	if you have an Applicative Functor f, plus somehow someone gives you (=<*) :: f (a -> f b) -> f a -> f b, then you can make f Monad.
2013-03-29 03:09:43	Philippa	as can anything which uses an intentionally more-applicative-than-average style
2013-03-29 03:09:56	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 03:09:58	quchen	cmccann: So I've been trying to figure out the rationale behind using "=<*" for 5 minutes now and don't understand how that name is canonical. Care to explain?
2013-03-29 03:10:12	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-29 03:10:18	cmccann	quchen: it's a cross between (=<<) and (<*>)
2013-03-29 03:10:20	jmcarthur	yeah parsing the best example i can think of to favor (<*>) over liftA* more frequently
2013-03-29 03:10:21	cmccann	a visual pun
2013-03-29 03:10:26	jmcarthur	*parsing is the
2013-03-29 03:10:31	quchen	cmccann: Aaaaah, <*>, not <*
2013-03-29 03:10:46	arkeet	=<*>
2013-03-29 03:10:46	quchen	I thought "why the hell does he have <* in there"
2013-03-29 03:10:49	cmccann	or perhaps a visual portmanteau
2013-03-29 03:10:49	quchen	Yeah
2013-03-29 03:10:55	arkeet	=<<*>
2013-03-29 03:10:58	Philippa	jmcarthur: logic programming's a good one, too
2013-03-29 03:11:02	<--	Xenplex (~xenplex@195.46.241.225) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-29 03:11:03	jmcarthur	oh?
2013-03-29 03:11:19	Philippa	especially if you have a reason to avoid >>=
2013-03-29 03:11:19	jmcarthur	i've not had this come up with logic programming so much
2013-03-29 03:11:25	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-29 03:11:33	jmcarthur	(i do typically avoid (>>=) if i don't need it)
2013-03-29 03:11:58	-->	thorsten` (~Thorsten@expand-opti.roethelheim.stw.uni-erlangen.de) has joined #haskell
2013-03-29 03:12:21	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-29 03:12:50	cmccann	jmcarthur: anyway, hopefully you can at least see the value of something like (=<*) given the assumption of writing things in Applicative infix-y style
2013-03-29 03:12:52	jmcarthur	the main reason i like liftA* is the same reason i tend to like a lot of point free code, which is that it is more composable
2013-03-29 03:13:35	jmcarthur	i typically prefer transforming functions over transforming function applications
2013-03-29 03:13:44	 *	cmccann does wish that Monad implied Applicative as it should and that liftM* meant "liftA* followed by join"
2013-03-29 03:13:53	jmcarthur	yeah
2013-03-29 03:13:56	cmccann	rather than having so many redundant functions
2013-03-29 03:14:02	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-03-29 03:14:20	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-29 03:14:28	jmcarthur	and we could also get rid of liftA and liftM!
2013-03-29 03:14:45	cmccann	liftA was gotten rid of preemptively
2013-03-29 03:14:49	jmcarthur	(or keep them around as defaults for fmap if we want)
2013-03-29 03:14:50	cmccann	because why would that even exist :P
2013-03-29 03:14:55	jmcarthur	yeah
2013-03-29 03:14:57	-->	homo_vitruvius (~mavvam@pool-108-17-82-218.pitbpa.fios.verizon.net) has joined #haskell
2013-03-29 03:15:02	jmcarthur	didn't realize it's gone, actually
2013-03-29 03:15:15	cmccann	did it ever exist? that would be silly.
2013-03-29 03:15:20	jmcarthur	i thought it did
2013-03-29 03:15:32	cmccann	oh apparently it did
2013-03-29 03:15:33	cmccann	heh
2013-03-29 03:15:35	cmccann	that's hilarious
2013-03-29 03:15:41	jmcarthur	it still exists...
2013-03-29 03:15:45	jmcarthur	http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control-Applicative.html
2013-03-29 03:15:56	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-29 03:16:02	cmccann	huh
2013-03-29 03:16:17	jmcarthur	i think it's reasonable since you can just implement Applicative and then use liftA as your implementation for fmap
2013-03-29 03:16:17	cmccann	I thought I had all of Control.Applicative imported
2013-03-29 03:16:37	jmcarthur	since as implementing Monad and then using return and ap for Applicative
2013-03-29 03:16:41	jmcarthur	*same as
2013-03-29 03:16:41	<--	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-29 03:16:51	cmccann	I guess I must have excluded that ages ago because it's mostly useless and then forgotten it existed at all
2013-03-29 03:17:09	<--	chatsiri_ (~chatsiri_@171.7.150.203) has quit (Ping timeout: 248 seconds)
2013-03-29 03:17:47	-->	ludamad (~adomurad@dsl-67-204-48-155.acanac.net) has joined #haskell
2013-03-29 03:17:52	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 03:17:55	-->	chatsiri_ (~chatsiri_@171.6.171.131) has joined #haskell
2013-03-29 03:17:57	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-29 03:18:02	ludamad	Any advice for choosing packages on hackage ?
2013-03-29 03:18:03	<--	canta (~canta@77-20-121-51-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-03-29 03:18:12	ludamad	I search JSON and get an overwhelming amount of results
2013-03-29 03:18:20	jmcarthur	my favorite property of liftA*...    liftA2.liftA2.liftA2  does the most sensible thing possible
2013-03-29 03:18:27	ludamad	(well, using 'cabal list', anyway)
2013-03-29 03:18:30	johnw	ludamad: yeah, discoverability is not the highest
2013-03-29 03:18:32	johnw	ask here
2013-03-29 03:19:15	ludamad	OK, I'm looking to do a chat server after messing around with some stuff like sudoku solver in haskell etc
2013-03-29 03:19:18	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-29 03:19:18	jmcarthur	hmm, wonder if bind2 has the same nice property... i doubt it since monads don't compose in general
2013-03-29 03:19:23	jmcarthur	@undef
2013-03-29 03:19:35	monochrom	in the case of JSON, I recommend aeson
2013-03-29 03:19:36	jmcarthur	@let bind2 f a b = a >>= \x -> b >>= \y -> f x y
2013-03-29 03:19:38	lambdabot	 Defined.
2013-03-29 03:19:41	jmcarthur	:t bind2
2013-03-29 03:19:43	lambdabot	Monad m => (a -> a1 -> m b) -> m a -> m a1 -> m b
2013-03-29 03:19:44	jmcarthur	:t bind2.bind2
2013-03-29 03:19:46	-->	canta (~canta@77-20-121-51-dynip.superkabel.de) has joined #haskell
2013-03-29 03:19:46	lambdabot	Monad m => (a -> a1 -> m b) -> m (m a) -> m (m a1) -> m b
2013-03-29 03:19:55	ludamad	monochrom: TY
2013-03-29 03:19:59	jmcarthur	oh, still pretty sensible
2013-03-29 03:20:06	jmcarthur	just not the same
2013-03-29 03:20:11	cmccann	jmcarthur: all the liftA* functions compose nicely that way, don't they
2013-03-29 03:20:22	jmcarthur	yup!
2013-03-29 03:20:31	jmcarthur	:t liftA4.liftA4.liftA4
2013-03-29 03:20:32	lambdabot	    Not in scope: `liftA4'
2013-03-29 03:20:33	lambdabot	    Perhaps you meant one of these:
2013-03-29 03:20:33	lambdabot	      `liftA' (imported from Control.Applicative),
2013-03-29 03:20:40	jmcarthur	:t liftA3.liftA3.liftA3
2013-03-29 03:20:42	lambdabot	(Applicative f2, Applicative f1, Applicative f) => (a -> b -> c -> d) -> f (f1 (f2 a)) -> f (f1 (f2 b)) -> f (f1 (f2 c)) -> f (f1 (f2 d))
2013-03-29 03:20:53	shachaf	I.e., both liftA* functions.
2013-03-29 03:21:03	-->	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has joined #haskell
2013-03-29 03:21:04	jmcarthur	:t foldMap.foldMap.foldMap
2013-03-29 03:21:05	lambdabot	(Foldable t2, Foldable t1, Foldable t, Monoid m) => (a -> m) -> t (t1 (t2 a)) -> m
2013-03-29 03:21:12	jmcarthur	:t traverse.traverse.traverse
2013-03-29 03:21:12	cmccann	jmcarthur: liftA0 would compose that way too if it existed!
2013-03-29 03:21:13	lambdabot	(Applicative f, Traversable t2, Traversable t1, Traversable t) => (a -> f b) -> t (t1 (t2 a)) -> f (t (t1 (t2 b)))
2013-03-29 03:21:21	cmccann	well, existed by that name
2013-03-29 03:21:23	jmcarthur	i love these things
2013-03-29 03:21:29	jmcarthur	:t fmap.fmap.fmap
2013-03-29 03:21:31	lambdabot	(Functor f2, Functor f1, Functor f) => (a -> b) -> f (f1 (f2 a)) -> f (f1 (f2 b))
2013-03-29 03:21:56	jmcarthur	what, pure?
2013-03-29 03:21:57	--	Watcher7|off is now known as Watcher7
2013-03-29 03:21:59	jmcarthur	:t pure.pure.pure
2013-03-29 03:22:01	lambdabot	(Applicative f2, Applicative f1, Applicative f) => a -> f (f1 (f2 a))
2013-03-29 03:22:01	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-29 03:22:02	cmccann	yes
2013-03-29 03:22:08	<--	tac (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Ping timeout: 245 seconds)
2013-03-29 03:22:24	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-03-29 03:22:32	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 03:23:08	monochrom	soon, you will conceive liftA-1 and liftA1/2
2013-03-29 03:23:42	cmccann	jmcarthur: in fact, liftA0 and liftA2 would suffice to define Applicative, which makes a great deal of sense
2013-03-29 03:23:46	jmcarthur	i got so confused for a second because i've had negative and fractional types on my mind this evening
2013-03-29 03:23:57	jmcarthur	cmccann: yup!
2013-03-29 03:24:01	monochrom	haha
2013-03-29 03:24:07	jmcarthur	cmccann: and liftA for Functor
2013-03-29 03:24:25	--	irc: disconnected from server
2013-03-29 03:28:21	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-29 03:28:21	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-29 03:28:21	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-29 03:28:21	--	Nicks #haskell: [@ChanServ [[zz]] [mth] [swift] \rs ]OLI[ __main__ _anona _br_ _d3f _flow_ _janne `0660 `bps_ `nand` aajmakin aavogt ab9rf absence acfoltzer acharles Adeon adimit Adios adlan adnap adnauseam adu_ aesptux AfC aforemny agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut akurei alang alang_ albel727 alcz aleator alejandrogomez alexander__b alios alkabetz alnix alpounet alshain Amadiro amathew amatsu amiller anachron anders^^ andrewsw andyjgill aninhumer AntiSpamMeta apaku_ Apocalisp araujo arbn aristid arkeet arkx arlinius armlesshobo arnihr__ arun asante10111 aszlig Athas AtnNn augustl Axman6 azaq23 b52 b_jonas bananagram banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 bens bergey betawaffle bezik bgamari Bigcheese BigEndian birkenfeld black_joe blackmirroxx BlastHardcheese BMeph_ bobry bogner Boney Boreeas Botje brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson bytbox c_wraith cads Cale caligula_ Canar canta canvon cardamon carlocci ccasin ccc ccxCZ cdidd ceii celery__ centrinia_ Cerise certaint1 chance charlesofarrell charliesome chatsiri_ chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle citizen93 cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 CodeDmitry cods coeus_ cognominal colah collin comak companion_cube conal conehead confound connelly coppro copumpkin corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross crowberries74 cryon Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley Damgaard1 dan_johnsin danharaj danr dario DarkFox Dashkal davean davorak dawe dcoutts deavid Deewiant def-lkb dennda dented42 Derander descender dfletcher dgpratt DigitalKiwi dilinger_ djahandarie djanatyn dju dkasak dlundy dmarker DMcGill_ dmwit dnolen dockside1 Dodek dolio DolphR domingo donri dottedmag dqd Draconx Draggor drbean DrChaos dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT` duairc_ dumbhat DustyDingo Dybber dyreshark eacameron EarlGray earthy edenc Eduard_Munteanu edwardk edwtjo Eelis eff ehamberg Eiam eirikur ejls eL_Bart0 electrogeek elgot Eliel_ elliott elliottc1ble em emc2 endojelly Enigmagic ent- Eridius ernst erpe Erstarrung Estrellas etabot ethercrow etrepum EvanR eviltwin_ Excureo eyck f8 fabjan faen fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow Flint floatingman flori flux fmapE Fnar formalcow fosky fotc freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc_ gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly glguy Gothmog_ Gracenotes greymalkin gseitz gspr gthorslund guampa guerrill1 Guest58551 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd HaltingState hamishmack hanDerPeder harrison heath Heero Heffalump helgikrs henk hiratara hiredman hiroyuki2 hive-mind homo_vitruvius horlicks hpaste hpc hpd hughfdjackson hvr hychen hyko IanKelling ibid icarot Iceland_jack idnar idntfy ido idoru Igloo ilyanok imeredith imphasing implr inr_ int-e integral_ Internet13 ion ique ISF isomorphic iulian ivan\ ivan` ixian ixmatus j2j Jaak jabirali jackhill jacobw jaimef jamwt JaRoel|4d jaroslaw jasonkuhrt jaspervdj Jaxan jayne Jayrays jbauman jcp jdoliner jedai|2 jeff_s1 Jello_Raptor jercos Jesin jix_ jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joaopizani joar jobstijl jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtobin juhp julmac julmae junsuijin jyyou k0ral Kaidelong KaiSforza kakos kallisti kalven KaneTW kaol kcj Ke kennyd kennyp kerrick ketil kfish Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels_ kmicu kmrhb knightshade knightshade2 kniu knyppeldynan knz koala_man koninkje kosmikus kqr kranius krig kryft kshannon ktosiek Kuba_ kushal kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard LeaChim lenstr leoncamel leroux levi` lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb ludamad luisgabriel_ luite Luke lulf lusory lzm m3ga machisuji magicman majoh maksbotan malorie_ mami marienz Martty Masse^^ mastensg mateu mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairoi mefisto` Megant mendez mephx merijn message144 meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 mikurubeam milessabin milli mimi_vx mirsal mixi mizu_no_oto mjr841 mjrosenb MK_FG mknox mkouhei mlh mlinksva mm_freak mmaruseacph2 MnO2 mokus mollerstrand monique_ monochrom moonlite_ mornfall morolin mortberg Mortchek mrd mrdomino_ mrkotfw mrshoe mspells mtlatif mullein munro mux myme n_b Nahra Nanar nardul Natch natechan natte neena NemesisD netj neurocyte newsham nh2 Nickeeh nicoo nighty^ Nik_89 niko nikola nilg` niloc132 Nimatek nimish ninegrid ninzine niteria nlogax no-n noam noj Noldorin nonymousa noplamodo normanrichards not_tommy notdan NougatRillettes nouitfvf Nshag nule_ numeral nus nwf obcode_ ocharles ofan oitnelis OlegYch7 opqdonut ormaaj Ornedan ortmage orzo osfameron osnr othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney ParahSail1n ParahSailin parcs PartyKat1e pcapriotti pdxleif_away Peaker peddie peltchu pepijn_away perlite perspectival petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa PHO_ pib1904 pikhq plhk pnielsen popz pqmodn pr predator117 preflex prh prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ quaestor quicksilver quuxman qwandor qwr qz_ r126l raek RageOfThou raid rainmaker Ralith Rants Raynes Razz rcj_ reckler redjohn reiddraper Rembane rexamophone rfw RichyB rio ritek Riussi rmunroe robbe- robbert rofer rossabaker Rotaerk rs0 rsimoes rul ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sambio samedhi sanemat saurik sawjig sbahra scgilardi schlumpi sclv Scott_firebeta scottj Sculptor seats SegFaultAX sellout Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb Shin-LaC SHODAN shutdown_-h_now si14 simon___ simpson sipa sirchurchill sjl skchrko ski skp skyflash_ slack1256 SLi sm smarter so Soft sohum solarus solirc Sonderblade sordina3 Sorella SoupEvil spligak_ Spockz sproingie Squid_Tamer srcerer staafl Starfire statusfailed steez stelleg stepcut stephe stvc subbyyy suiside_ sully sunfun sunnavy supersym supki sw17ch Swizec sysopfb tac_ TacticalGrace tahu takumn_ tamiko tanakh tanakh_ Tarential Targen taruti tavelram__ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas The_third_man theDon TheFuzzball theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome tim1 timemage tippenein tkd tlaine tlevine TML tntc tobiassjosten tom4939_ tomaw tomejaguar tomh_ tomku tomprince ToRA Tordek TravisD trevize tridactyla trolling tromp_ tsinnema tsou tswett ttuegel_ tunixman tuv tvaalen Twey tyler tzxn3 u_ u_quark Ulrar_ User_ UziMonkey__ v__ Valodim Varakh vehk verrens Vert Vertue vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq vramana VZakharov wagle walter Walther warpy___ Watcher7 waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus Xaratas xcvii xinming XMunkki_ xnyhps Xorlev xorox90 xpika xplat xrl__ xrq xunatai xymox Y_Less yam yan_ yano yc4891 yeltzooo yezariaely yiannis_1 yriw yumike zachk Zariel zebr Zedrikov zeiris zenzike_ ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-29 03:28:21	--	Channel #haskell: 980 nicks (1 op, 0 halfops, 0 voices, 979 normals)
2013-03-29 03:28:21	--	URL for #haskell: http://www.haskell.org/
2013-03-29 03:28:23	--	Mode #haskell [+CLcnpt]
2013-03-29 03:28:23	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-29 03:28:35	-->	edeast (~chatzilla@d50-93-126-222.abhsia.telus.net) has joined #haskell
2013-03-29 03:29:03	-->	knightshade3 (~knightsha@p54BC5F67.dip.t-dialin.net) has joined #haskell
2013-03-29 03:29:06	jmcarthur	oh, i've read about an alleged equivalence between Arrow and Category+Applicative, but i didn't realize wadler had some writing on arrows and idioms(/applicative-i-assume)
2013-03-29 03:29:09	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-29 03:29:23	monochrom	yes, idiom = applicative
2013-03-29 03:29:37	jmcarthur	oh i have seen this before
2013-03-29 03:29:39	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: No route to host)
2013-03-29 03:29:43	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-29 03:29:44	jmcarthur	never read it, just the title
2013-03-29 03:29:48	monochrom	idiom was an old name when it was first invented
2013-03-29 03:29:53	<--	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 03:30:10	jmcarthur	yeah
2013-03-29 03:30:12	slack1256	I cannot find a tutorial of generic programming with just Data.Data
2013-03-29 03:30:19	<--	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 260 seconds)
2013-03-29 03:30:20	slack1256	or people don't use Data.Data directly?
2013-03-29 03:30:30	jmcarthur	depends on what you're trying to do
2013-03-29 03:30:32	--	centrinia_ is now known as centrinia
2013-03-29 03:30:57	slack1256	what would be the most popular option?
2013-03-29 03:31:05	<--	knightshade (~knightsha@p548CEEC1.dip.t-dialin.net) has quit (Ping timeout: 255 seconds)
2013-03-29 03:31:05	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Client Quit)
2013-03-29 03:31:13	jmcarthur	(i tend to avoid generic programming unless i have a great reason to use it, which is not crazy)
2013-03-29 03:31:15	-->	thintin (~hygspigs@24.114.26.180) has joined #haskell
2013-03-29 03:31:19	-->	trescenzi (~trescenzi@2620:91:0:163:2559:3d2:330:37d6) has joined #haskell
2013-03-29 03:31:27	jmcarthur	slack1256: i meant it. it depends on what you're trying to do
2013-03-29 03:31:32	slack1256	is the typical example of an enterprise and modifying salaries
2013-03-29 03:31:41	<--	ktosiek (~quassel@46.22.173.54) has quit (Ping timeout: 245 seconds)
2013-03-29 03:31:47	<--	centrinia (~exc@adsl-184-36-92-217.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-29 03:31:48	slack1256	oh, not this is just for learning
2013-03-29 03:31:55	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-29 03:32:19	jmcarthur	slack1256: i find generics are pretty great for generic typeclassy things. uniplate (and now lens) are good for kind of reaching into some random structure and manipulating things in a fairly ad hoc way
2013-03-29 03:32:31	<--	edeast (~chatzilla@d50-93-126-222.abhsia.telus.net) has quit (Remote host closed the connection)
2013-03-29 03:32:46	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-29 03:32:56	cmccann	jmcarthur: also, keep in mind that the connection between Applicative and Monad is kind of a useful coincidence due to the nature of Hask
2013-03-29 03:33:01	-->	ktosiek (~quassel@46.22.173.54) has joined #haskell
2013-03-29 03:33:07	cmccann	the more general versions of each in category theory don't have that relationship
2013-03-29 03:33:11	jmcarthur	cmccann: i was not actually aware of that
2013-03-29 03:33:12	<--	knightshade2 (~knightsha@p54BC592B.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-29 03:33:14	slack1256	oh, I didn't know that uniplate and lens had that kind of relation.
2013-03-29 03:33:20	<--	cognominal (~cognomina@37.161.188.104) has quit (Ping timeout: 255 seconds)
2013-03-29 03:33:24	edwardk	slack1256: lens contains a port of uniplate
2013-03-29 03:33:31	jmcarthur	slack1256: lens kind of subsumes uniplate in a way
2013-03-29 03:33:40	jmcarthur	slack1256: (and it's faster, iirc)
2013-03-29 03:33:44	edwardk	> ("hello","world",["!!!"])^..biplate :: [String]
2013-03-29 03:33:46	lambdabot	  ["hello","world","!!!"]
2013-03-29 03:34:03	<--	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-03-29 03:34:04	edwardk	> ("hello","world",["!!!"]) & partsOf biplate %~ (reverse :: String -> String)
2013-03-29 03:34:06	lambdabot	  ("!!!dl","rowol",["leh"])
2013-03-29 03:34:22	slack1256	mmm this is getting interesting.
2013-03-29 03:34:22	cmccann	jmcarthur: you might find my answer to http://cstheory.stackexchange.com/q/16241/53 interesting
2013-03-29 03:34:27	johnw	> (("hello","world"),"!!!", 2 :: Int, ()) % biplate._head %~ toUpper
2013-03-29 03:34:28	lambdabot	  Not in scope: `%'
2013-03-29 03:34:29	lambdabot	 Perhaps you meant `R.%' (imported from Data.Ratio)
2013-03-29 03:34:36	johnw	> (("hello","world"),"!!!", 2 :: Int, ()) & biplate._head %~ toUpper
2013-03-29 03:34:37	edwardk	& =)
2013-03-29 03:34:38	lambdabot	  No instance for (Control.Lens.Cons.Cons
2013-03-29 03:34:38	lambdabot	                    (->)
2013-03-29 03:34:38	lambdabot	          ...
2013-03-29 03:34:47	johnw	hmm.. that worked before
2013-03-29 03:34:57	edwardk	_head is more general than it used to be
2013-03-29 03:35:02	edwardk	doesn't know that should be a list
2013-03-29 03:35:07	slack1256	so generics for classical generic programming, then lenses for the new kid on the block and exploratory on structures.
2013-03-29 03:35:10	monochrom	I think I can summarize what Wadler says. Consider chaining two effectful actions. all 3 of Applicative, Arrow, Monad let you do that. and the difference is:
2013-03-29 03:35:19	slack1256	ok that will be then
2013-03-29 03:35:23	-->	jonaias (~jonaias@189.111.80.20) has joined #haskell
2013-03-29 03:35:25	edwardk	i use lens for my generic programming mostly.
2013-03-29 03:35:32	monochrom	Applicative says: the "return value" of the first action cannot be fed into the second
2013-03-29 03:35:54	edwardk	being able to just say 'rewrite (\case Neg (Lit a) -> Just (Lit (-a)); _ -> Nothing)' and get a bottom up rewrite of a syntax tree is really nice
2013-03-29 03:35:55	<--	trescenzi (~trescenzi@2620:91:0:163:2559:3d2:330:37d6) has quit (Ping timeout: 264 seconds)
2013-03-29 03:36:11	monochrom	Arrow says: can be fed, with this restriction: must be through the >>> mechanism. for example, cannot use function application
2013-03-29 03:36:49	-->	dylukes (~dylukes@dhcp-ltc-130-49-7-200.oakland.resnet.pitt.edu) has joined #haskell
2013-03-29 03:37:02	monochrom	Monad says: can use function application, the second action can have whatever dependency you like on the "return value" of the first action
2013-03-29 03:37:20	jmcarthur	cmccann: cozip looks useful at least. coap looks like lambda abstraction in HOAS, and i guess copure would be some sort of eval function
2013-03-29 03:37:46	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 03:37:53	cmccann	well, cozip is either trivial or underspecified
2013-03-29 03:38:06	jmcarthur	cmccann: oh, right
2013-03-29 03:38:09	<--	samedhi (~stephen@208.70.28.214) has quit (Quit: samedhi)
2013-03-29 03:38:12	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-29 03:38:14	shachaf	cmccann: Well, isn't everything?
2013-03-29 03:38:19	jmcarthur	ignore my remarks on cozip
2013-03-29 03:38:52	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 03:38:53	<--	ISF (~ivan@187.64.222.221) has quit (Quit: WeeChat 0.4.0)
2013-03-29 03:39:15	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-03-29 03:40:10	cmccann	jmcarthur: what cozip probably "wants" to be is something like partitionEithers, which goes from coproduct to product while doing something more meaningful with the functor structure
2013-03-29 03:40:32	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Read error: Connection reset by peer)
2013-03-29 03:40:47	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-29 03:40:57	cmccann	shachaf: nah, somethings are fully specified and non-trivial. we usually call those "programs".
2013-03-29 03:41:15	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-29 03:41:21	shachaf	Aren't all programs either trivial or impossible, by definition?
2013-03-29 03:41:24	-->	trescenzi (~trescenzi@2620:91:0:163:d5c1:323e:aed7:edfa) has joined #haskell
2013-03-29 03:41:43	cmccann	shachaf: sounds like you're thinking of rice's theorem
2013-03-29 03:41:46	jmcarthur	what definition of trivial is that?
2013-03-29 03:41:46	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 03:41:58	monochrom	haha, Rice's theorem yeah
2013-03-29 03:42:03	cmccann	which is about figuring out what programs do, not the thing they do itself
2013-03-29 03:42:03	Jello_Raptor	so i'm going to be looking for jobs soon, and i'd appreciate if anyone has any suggestions(haskelly jobs would be awesome), i'm keeping a list here http://goo.gl/SNrkL
2013-03-29 03:42:38	cmccann	so programs can do nontrivial things, you just can't be sure that they're doing what you think they're doing in general
2013-03-29 03:42:51	jmcarthur	Jello_Raptor: Jane Street Capital! (disclaimer, i work for JSC)
2013-03-29 03:43:05	jmcarthur	err
2013-03-29 03:43:10	jmcarthur	s/disclaimer/full disclosure/
2013-03-29 03:43:39	cmccann	jmcarthur: anyway, that's an interesting point about HOAS, hadn't occurred to me
2013-03-29 03:43:53	<--	v__ (~v@61.173.108.241) has quit (Ping timeout: 245 seconds)
2013-03-29 03:44:25	jmcarthur	cmccann: i in fact implement a lot of my hoas stuff with applicative + that lambda function, at least when i allow pure
2013-03-29 03:44:28	cmccann	that version of a "CoApplicative" doesn't work as such, but there might be something interesting with similar types
2013-03-29 03:45:21	cmccann	just wouldn't be dual to Applicative in any obvious way
2013-03-29 03:45:28	gienah	Jello_Raptor: a short list  here
2013-03-29 03:45:34	-->	dawe_ (~dawe@koln-5d81d8d3.pool.mediaWays.net) has joined #haskell
2013-03-29 03:45:36	gienah	http://cufp.org/jobs
2013-03-29 03:45:54	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Quit: message144)
2013-03-29 03:46:07	<--	trescenzi (~trescenzi@2620:91:0:163:d5c1:323e:aed7:edfa) has quit (Ping timeout: 264 seconds)
2013-03-29 03:47:04	cmccann	jmcarthur: anyway, the original point was that the post touches on how Applicative and Monad only relate the way they do in the context of Hask
2013-03-29 03:47:09	jmcarthur	yeah
2013-03-29 03:47:17	cmccann	which is why there's no dual Applicative with a similar relationship to Comonad
2013-03-29 03:47:22	<--	apaku_ (~apaku@hmbg-4d06dd59.pool.mediaWays.net) has quit (Ping timeout: 272 seconds)
2013-03-29 03:47:33	jmcarthur	i admit that i only skimmed, but i saw mention of endofunctors, and i imagine that is the biggest thing relating them
2013-03-29 03:47:36	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 264 seconds)
2013-03-29 03:47:45	<--	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 03:47:50	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-29 03:47:54	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-29 03:48:19	cmccann	yes, a generalized Applicative makes sense for a functor between monoidal closed categories that preserves that structure
2013-03-29 03:48:26	Jello_Raptor	jmcarthur: gienah: thanks :)
2013-03-29 03:48:29	-->	apaku (~apaku@hmbg-4d06eaa6.pool.mediaWays.net) has joined #haskell
2013-03-29 03:48:31	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 264 seconds)
2013-03-29 03:48:38	cmccann	which includes non-endofunctors obviously
2013-03-29 03:49:01	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 03:49:03	cmccann	as well as categories that are monoidal closed but not cartesian closed
2013-03-29 03:49:07	<--	dawe (~dawe@koln-4d0b2884.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-03-29 03:49:12	--	Mode #haskell [+o glguy] by ChanServ
2013-03-29 03:49:21	--	Mode #haskell [-qo *!*@gateway/web/freenode/ip.24.114.22.17 glguy] by glguy
2013-03-29 03:49:21	<--	tlevine (~tlevine@pool-173-68-0-113.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-29 03:49:23	cmccann	which sounds like a subtle distinction but actually makes quite a bit of difference
2013-03-29 03:49:43	-->	sw2wolf (~czsq888@222.209.240.64) has joined #haskell
2013-03-29 03:50:15	-->	centrinia (~exc@adsl-184-36-92-217.asm.bellsouth.net) has joined #haskell
2013-03-29 03:50:56	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-29 03:51:45	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-29 03:51:47	cmccann	anyway the important thing is that I used the latex support on cstheory.se to make that answer look way more authoritative
2013-03-29 03:52:02	cmccann	just look at how "Hask" is written
2013-03-29 03:52:05	-->	xinming_ (~xinming@113.248.118.149) has joined #haskell
2013-03-29 03:52:08	cmccann	very official-looking
2013-03-29 03:52:21	-->	ahokaomaeha (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 03:52:25	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Read error: Connection reset by peer)
2013-03-29 03:52:44	--	ahokaomaeha is now known as mikurubeam
2013-03-29 03:53:09	-->	ben_d (~muus@131.252.167.171) has joined #haskell
2013-03-29 03:53:39	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 03:53:45	<--	Shin-LaC (~LaC@68.65.174.42) has quit (Quit: Computer has gone to sleep.)
2013-03-29 03:54:29	<--	xinming (~xinming@125.82.202.103) has quit (Ping timeout: 255 seconds)
2013-03-29 03:55:53	-->	v__ (~v@199.68.198.120) has joined #haskell
2013-03-29 03:55:59	<--	Xaratas (~UserNick@brln-4dbc0fca.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-29 03:55:59	jmcarthur	yes, that was my takeaway, too
2013-03-29 03:56:40	shachaf	cmccann: I hate official-looking category theory things.
2013-03-29 03:56:48	shachaf	I can never tell which letters are which.
2013-03-29 03:57:20	monochrom	haha
2013-03-29 03:57:31	cmccann	most letters look like themselves unless they're written in fraktur
2013-03-29 03:57:58	monochrom	yeah, fraktur is the problem :)
2013-03-29 03:59:14	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 03:59:34	DarkFox	Does acid-state's tcp server support encryption or just raw anyone who can talk can manipulate?
2013-03-29 03:59:35	 *	cmccann doesn't really see fraktur used that often
2013-03-29 03:59:56	-->	Beta_w (~Betal@unaffiliated/betal) has joined #haskell
2013-03-29 03:59:56	--	Beta_w is now known as Betal
2013-03-29 04:01:18	-->	singla (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-29 04:02:03	monochrom	I just read Ralf Hinze's MPC 2010 paper, which used Fraktur letters
2013-03-29 04:02:13	<--	sw2wolf (~czsq888@222.209.240.64) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 04:02:17	cmccann	to indicate what?
2013-03-29 04:02:19	johnw	𝔠𝔪𝔠𝔠𝔞𝔫𝔫
2013-03-29 04:02:26	DarkFox	How might one use acid-state with tls?
2013-03-29 04:02:45	cmccann	johnw: hahaha don't tempt me to start that
2013-03-29 04:03:18	johnw	i tempt thee, good sir
2013-03-29 04:03:33	monochrom	suppose you have "data List = Nil | Cons Int List". but he wants to talk about the open-recursion version of that. so he uses Fraktur...
2013-03-29 04:03:42	cmccann	monochrom: ...whyyyy
2013-03-29 04:03:47	cmccann	:[
2013-03-29 04:03:47	-->	Shin-LaC (~LaC@68.65.174.42) has joined #haskell
2013-03-29 04:03:54	johnw	although, for whatever reason my new shiny Emacs doesn't display fraktur, even though it's the same font
2013-03-29 04:03:55	johnw	sigh
2013-03-29 04:04:00	monochrom	data FrakturList a = FrakturNil | FrakturCons Int a
2013-03-29 04:04:33	cmccann	johnw: I got bored with my unicode abuse program when someone wrote a better one, I forget who
2013-03-29 04:04:37	monochrom	well, changing font is easier than coining new names
2013-03-29 04:04:37	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 248 seconds)
2013-03-29 04:05:36	cmccann	monochrom: people should start using east asian characters for stuff
2013-03-29 04:05:42	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 04:05:50	<--	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 256 seconds)
2013-03-29 04:05:54	cmccann	surely those are at least as common in unicode fonts as fraktur nonsense
2013-03-29 04:05:59	cmccann	and there's so many to pick from!
2013-03-29 04:06:03	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 04:06:38	monochrom	to a large extent, I like change fonts and keeping the same letters to indicate that two things are closely related
2013-03-29 04:07:48	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-29 04:08:08	cmccann	yeah but... fraktur
2013-03-29 04:08:13	cmccann	half the time they don't even look like the same letter
2013-03-29 04:08:16	cmccann	madness!
2013-03-29 04:08:48	monochrom	hehe
2013-03-29 04:09:19	cmccann	seriously I can read English transliterated in katakana almost as fast as I can read stuff written in some fraktur fonts
2013-03-29 04:09:32	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 04:09:47	Rants	katakana engrish can get pretty tough to parse
2013-03-29 04:10:03	Rants	it's easier for me to read straight japanese
2013-03-29 04:10:14	cmccann	it's phonetic and usually unambiguous what English word it should be
2013-03-29 04:10:24	monochrom	for this paper, you don't need to perfectly read Fraktur, since the normal version and the Fraktur version are given together
2013-03-29 04:10:27	cmccann	with a few obvious difficulties that are usually clear in context
2013-03-29 04:10:40	Rants	I just really have trouble with it
2013-03-29 04:10:46	Rants	like even just a couple of words
2013-03-29 04:10:49	cmccann	also I don't know enough Japanese to read it so that kind of puts me at a disadvantage there
2013-03-29 04:11:16	Rants	half the time something's in katakana it isn't English anyway
2013-03-29 04:11:17	-->	chatsiri1 (~chatsiri_@14.207.141.40) has joined #haskell
2013-03-29 04:11:29	cmccann	basic grammar and phonetic scripts? sure. building vocabulary and memorizing kanji? ehhhh attention span what's that
2013-03-29 04:11:33	Rants	which is easier to read
2013-03-29 04:11:50	Rants	kanji is infinitly easier to read than katakana english omg you have no idea
2013-03-29 04:12:05	cmccann	no, I agree
2013-03-29 04:12:18	cmccann	for all like ten kanji I can remember at least
2013-03-29 04:12:20	cmccann	sigh
2013-03-29 04:12:25	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 04:12:54	Rants	it's just an instantly recognizable thing
2013-03-29 04:13:24	Rants	but it can take me upwards of five minutes just to recognize an english word that's been transliterated into katakana
2013-03-29 04:13:39	Rants	and then I feel stupid when I realize what word it was
2013-03-29 04:13:43	<--	mknox (~mknox@8.25.197.25) has quit (Ping timeout: 260 seconds)
2013-03-29 04:13:49	cmccann	especially if it's a misused and abused loanword
2013-03-29 04:13:51	cmccann	those are always fun
2013-03-29 04:13:58	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-29 04:14:09	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-29 04:14:18	cmccann	or an English word shortened in a way that only makes phonetic sense in Japanese
2013-03-29 04:14:39	<--	thintin (~hygspigs@24.114.26.180) has quit (Ping timeout: 260 seconds)
2013-03-29 04:14:44	<--	ludamad (~adomurad@dsl-67-204-48-155.acanac.net) has quit (Ping timeout: 255 seconds)
2013-03-29 04:14:55	<--	chatsiri_ (~chatsiri_@171.6.171.131) has quit (Ping timeout: 264 seconds)
2013-03-29 04:14:56	monochrom	whenever computer stuff written in Japanese comes up, it takes two persons --- me and my sister --- to read
2013-03-29 04:15:05	<--	jasonkuhrt (~jasonkuhr@modemcable174.218-81-70.mc.videotron.ca) has quit (Quit: Linkinus - http://linkinus.com)
2013-03-29 04:15:12	cmccann	google translate is surprisingly effective these days
2013-03-29 04:15:24	monochrom	she reads it aloud phonetically, and I try to distort it back to the English word :)
2013-03-29 04:15:26	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-29 04:15:28	cmccann	haha
2013-03-29 04:15:34	-->	ludamad (~adomurad@dsl-67-204-7-72.acanac.net) has joined #haskell
2013-03-29 04:15:34	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-03-29 04:15:36	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-29 04:15:55	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-29 04:16:04	monochrom	because I know more English computer words (and more imaginative in distortions) and she knows more Japanese
2013-03-29 04:16:07	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 264 seconds)
2013-03-29 04:17:21	cmccann	one of these days I really should get back to studying Japanese. or some foreign language at least.
2013-03-29 04:18:43	<--	slack1256 (~slack@181-160-176-203.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-03-29 04:19:32	<--	luisgabriel_ (~luisgabri@177.159.209.55) has quit (Quit: Konversation terminated!)
2013-03-29 04:19:36	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 04:20:20	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-03-29 04:20:53	-->	OlegYch (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 04:20:59	<--	netj (~netj@128.12.159.221) has quit (Quit: ZNC - http://znc.in)
2013-03-29 04:21:21	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Remote host closed the connection)
2013-03-29 04:21:37	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-03-29 04:23:01	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-03-29 04:23:17	<--	OlegYch7 (~OlegYch@80.249.93.99) has quit (Ping timeout: 248 seconds)
2013-03-29 04:23:26	<--	fxr (~user@176.42.255.221) has quit (Quit: ups)
2013-03-29 04:23:44	Shin-LaC	why is a functor called a functor?
2013-03-29 04:23:50	<--	Eduard_Munteanu (~Eduard_Mu@188.25.7.142) has quit (Read error: Operation timed out)
2013-03-29 04:23:54	<--	Zedrikov (~cedric@AMontsouris-651-1-36-31.w82-123.abo.wanadoo.fr) has quit (Quit: Quitte)
2013-03-29 04:24:02	 *	hackagebot lens-aeson 0.1 - Law-abiding lenses for aeson  http://hackage.haskell.org/package/lens-aeson-0.1 (EdwardKmett)
2013-03-29 04:24:14	johnw	guess you'd have to ask Mac Lane that
2013-03-29 04:24:39	edwardk	johnw: you earlier asked how i would recommend talking to aeson. try that
2013-03-29 04:24:52	johnw	ohhoooo
2013-03-29 04:25:00	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-29 04:25:13	edwardk	http://lens.github.com/lens-aeson/Control-Lens-Aeson.html
2013-03-29 04:25:18	edwardk	if you want better docs. send patches
2013-03-29 04:25:23	johnw	hahah
2013-03-29 04:25:28	johnw	how is it that you read my mind!
2013-03-29 04:25:30	monochrom	perhaps "function operator"?
2013-03-29 04:25:35	johnw	i went into "tests" thinking, cool...
2013-03-29 04:25:44	johnw	to find only a doctests runner!
2013-03-29 04:25:48	<--	theorbtwo (~theorb@91.84.53.6) has quit (Read error: Connection reset by peer)
2013-03-29 04:25:54	edwardk	>>> "{\"a\": 1, \"b\": 3}" & key "a"._Integer *~ 100
2013-03-29 04:25:54	edwardk	{"a":100,"b":3}
2013-03-29 04:25:57	-->	netj (~netj@128.12.159.221) has joined #haskell
2013-03-29 04:26:14	edwardk	most stuff can run directly on values strings or bytestrings
2013-03-29 04:26:17	johnw	but docs can be sent, this is great
2013-03-29 04:26:19	johnw	i like nth
2013-03-29 04:26:31	edwardk	statusfailed wrote the original library. i just overgeneralized it
2013-03-29 04:26:44	edwardk	also you get a Plated instance for Value. so you can do generic programming rewrites on it
2013-03-29 04:26:54	shachaf	So now there is aeson-lens and lens-aeson.
2013-03-29 04:27:03	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-03-29 04:27:05	johnw	"[{\"a\": 1}, {\"a\": 2}]" ^. nth 1.key "a"
2013-03-29 04:27:05	hpaste	“Anonymous Coward” annotated “pseudo code” with “pseudo code (annotation) (annotation)” at http://hpaste.org/63565#a84799
2013-03-29 04:27:07	johnw	> "[{\"a\": 1}, {\"a\": 2}]" ^. nth 1.key "a"
2013-03-29 04:27:09	lambdabot	  Not in scope: `nth'Not in scope: `key'
2013-03-29 04:27:09	lambdabot	 Perhaps you meant one of these:
2013-03-29 04:27:09	lambdabot	   ...
2013-03-29 04:27:12	edwardk	i didn't feel right asking to take his package name from him
2013-03-29 04:27:20	johnw	oh, you just pasted the answer
2013-03-29 04:27:32	edwardk	i should have just asked though
2013-03-29 04:27:43	edwardk	but it'd break the existing code that was using aeson-lens
2013-03-29 04:27:50	cmccann	shachaf: now we need lens-aeson-lens, lens-aeson-lens-lens, aeson-lens-eggs-baked-beans-and-lens...
2013-03-29 04:27:54	edwardk	so this provides some modicum of upgrade path
2013-03-29 04:28:12	-->	timtom (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has joined #haskell
2013-03-29 04:28:36	shachaf	If we had aeson, we could have aeson-lens, if we had lens.
2013-03-29 04:28:53	edwardk	>>> "[{\"a\": 1}, {\"a\": 2}]" ^? nth 1.key "a"
2013-03-29 04:28:53	edwardk	Just (Number 2)
2013-03-29 04:29:05	shachaf	Naturally the package edwardk wrote is an upgrade from the package he didn't write.
2013-03-29 04:29:10	edwardk	>>> "[{\"a\": 1}, {\"a\": 2}]" ^? nth 1.key "a"._Integer
2013-03-29 04:29:10	edwardk	Just 2
2013-03-29 04:29:17	monochrom	please also consider ae-lens-son
2013-03-29 04:29:27	edwardk	monochrom: we came close to liaeson
2013-03-29 04:29:38	monochrom	that's really cool
2013-03-29 04:29:46	cmccann	hahaha
2013-03-29 04:29:52	-->	Siphonblast (~icarot@2600:1010:b10d:4b89:0:5:1582:7901) has joined #haskell
2013-03-29 04:29:57	 *	cmccann would never be able to remember how to spell that
2013-03-29 04:29:59	applicative	Shin-LaC: famously Mac Lane took 'functor' from Carnap who used it in a much less grand way in his Logical Syntax, for functions that map 'real things' to numbers and the like
2013-03-29 04:30:03	edwardk	thats why i opted out
2013-03-29 04:30:12	shachaf	not enough æ
2013-03-29 04:30:21	Shin-LaC	applicative: ah
2013-03-29 04:30:31	cmccann	shæchæf
2013-03-29 04:30:32	<--	Shin-LaC (~LaC@68.65.174.42) has quit (Quit: Computer has gone to sleep.)
2013-03-29 04:30:48	<--	NemesisD (~NemesisD@50.125.74.242) has quit (Ping timeout: 264 seconds)
2013-03-29 04:31:02	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-29 04:31:22	edwardk	johnw: anyways consider that an alpha, since everyone kept asking me how you'd do it right
2013-03-29 04:31:50	johnw	ok, thanks edwardk!
2013-03-29 04:31:55	johnw	i shall noise it abroad
2013-03-29 04:31:56	applicative	Shin-LaC I think the core idea of a functor was sort of like that for mac lane, the other category you functor into is sort of measuring the things in the source category; certain kinds of order are being preserved
2013-03-29 04:32:16	<--	Y_Less (~Y_Less@5ac17519.bb.sky.com) has quit
2013-03-29 04:32:22	edwardk	docs would probably be a good idea before it gets too wide a reception ;)
2013-03-29 04:32:41	 *	cmccann remembers once a question on SO where someone asked "does a library like this exist" and then edwardk created a library to do it and posted an answer saying "sure"
2013-03-29 04:32:44	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-29 04:32:54	edwardk	cmccann: that was how 'rad' and 'ad' were born
2013-03-29 04:32:54	johnw	haha
2013-03-29 04:33:12	cmccann	edwardk: I think it was "rad" I'm remembering
2013-03-29 04:33:19	edwardk	http://stackoverflow.com/questions/2744973/is-there-any-working-implementation-of-reverse-mode-automatic-differentiation-fo
2013-03-29 04:33:37	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-29 04:33:39	shachaf	ad subsumes rad, doesn't it?
2013-03-29 04:33:43	edwardk	i responded in the negative. then went off and wrote the library
2013-03-29 04:33:50	edwardk	and then i went off and wrote a better one
2013-03-29 04:33:58	edwardk	it does
2013-03-29 04:34:02	edwardk	its faster and more general
2013-03-29 04:34:15	edwardk	rad was deprecated a few years back
2013-03-29 04:35:26	<--	knightshade3 (~knightsha@p54BC5F67.dip.t-dialin.net) has quit (Quit: knightshade3)
2013-03-29 04:36:07	cmccann	probably for the best, nobody actually says rad anymore. that was like an 80s or 90s thing.
2013-03-29 04:37:27	edwardk	yeah its all about ad networks now
2013-03-29 04:37:33	cmccann	haha
2013-03-29 04:38:47	<--	timtom (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has quit (Quit: Au revoir)
2013-03-29 04:39:56	johnw	woohoo, gitlib can now push from any supported backend to any Git URI!  and with this I can finally sleep
2013-03-29 04:40:07	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 264 seconds)
2013-03-29 04:43:42	<--	Betal (~Betal@unaffiliated/betal) has quit
2013-03-29 04:45:37	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-29 04:46:02	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Quit: leaving)
2013-03-29 04:46:35	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 04:46:41	-->	Moggle (~chatzilla@S01060014d1c3a9f9.wp.shawcable.net) has joined #haskell
2013-03-29 04:47:01	-->	DanZimm (~Dan@147.126.43.116) has joined #haskell
2013-03-29 04:48:06	Moggle	Anyone have any recommendations for an image library? All I want is the ability to load/save images and access their pixels.
2013-03-29 04:48:11	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 04:48:14	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-29 04:49:53	lispy	Moggle: JuicyPixels
2013-03-29 04:50:56	Moggle	lispy: thanks, this looks perfect
2013-03-29 04:51:29	-->	ahokaomaeha (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 04:51:45	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 04:51:52	--	mikurubeam is now known as Guest83442
2013-03-29 04:51:56	<--	Guest83442 (~suckmy@unaffiliated/dijkstragroupie) has quit (Read error: Connection reset by peer)
2013-03-29 04:52:01	applicative	Juicy.Pixels now does something called 'Radiance' pictures; I was sorry to find out about that format
2013-03-29 04:52:04	--	ahokaomaeha is now known as mikurubeam
2013-03-29 04:52:44	<--	dawe_ (~dawe@koln-5d81d8d3.pool.mediaWays.net) has quit (Quit: leaving)
2013-03-29 04:54:06	 *	hackagebot computational-algebra 0.1.2.0 - Well-kinded computational algebra library, currently supporting Groebner basis.  http://hackage.haskell.org/package/computational-algebra-0.1.2.0 (HiromiIshii)
2013-03-29 04:54:31	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 264 seconds)
2013-03-29 04:54:53	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 04:55:20	-->	conal_ (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 04:55:24	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-03-29 04:56:08	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 255 seconds)
2013-03-29 04:58:29	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-03-29 04:58:32	--	conal_ is now known as conal
2013-03-29 04:58:41	-->	blackh (~blackh@207.192.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-29 04:59:33	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 04:59:47	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-29 05:00:36	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 05:00:37	<--	dylukes (~dylukes@dhcp-ltc-130-49-7-200.oakland.resnet.pitt.edu) has quit (Ping timeout: 248 seconds)
2013-03-29 05:00:43	<--	imeredith (~ivan@219.199.69.111.dynamic.snap.net.nz) has quit (Remote host closed the connection)
2013-03-29 05:01:55	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-29 05:03:49	<--	DMcGill_ (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Ping timeout: 248 seconds)
2013-03-29 05:04:24	-->	conal_ (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 05:04:57	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-29 05:05:16	cmccann	applicative: why?
2013-03-29 05:05:36	applicative	oh the pictures?
2013-03-29 05:05:37	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-03-29 05:05:37	--	conal_ is now known as conal
2013-03-29 05:05:42	applicative	they freaked me out
2013-03-29 05:06:17	applicative	like these
2013-03-29 05:06:18	cmccann	it's a HDR thing, isn't it?
2013-03-29 05:06:24	applicative	yeah
2013-03-29 05:06:40	applicative	i just hadn't noticed them before
2013-03-29 05:06:42	<--	singla (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-29 05:06:53	 *	cmccann is familiar with the basic idea of HDR
2013-03-29 05:08:27	applicative	Its kind of cool I guess, but I dont want to look at them ... http://www.smashingmagazine.com/2008/03/10/35-fantastic-hdr-pictures/
2013-03-29 05:09:14	applicative	has anyone else noticed that the topics of simplexes, simplicial complexes and simplicial sets and so on is fatally dull?
2013-03-29 05:09:18	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-29 05:09:23	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-03-29 05:09:46	arkeet	applicative: uh... ??
2013-03-29 05:09:55	arkeet	simplicial sets are pretty cool.
2013-03-29 05:10:10	applicative	the applications seem excellent.
2013-03-29 05:10:43	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Lost terminal)
2013-03-29 05:10:44	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-29 05:10:48	-->	fumieval (~fumieval@61-21-126-12.rev.home.ne.jp) has joined #haskell
2013-03-29 05:10:50	arkeet	...but?
2013-03-29 05:10:51	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-29 05:10:59	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-29 05:11:04	<--	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Quit: adu_)
2013-03-29 05:11:35	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-29 05:11:50	ludamad	Can I print out unicode in utf8 using ByteString ?
2013-03-29 05:12:19	applicative	I'm trying to figure out the simplicial set concept again.  Maybe I shouldnt complain.  Somewhere I managed to defined the simplex category in Haskell + DataKinds
2013-03-29 05:12:46	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-29 05:13:05	applicative	ludamad: this question might be a little ambiguous. Have you looked at the Data.Text.Encoding functions?
2013-03-29 05:13:19	arkeet	applicative: the category \Delta?
2013-03-29 05:13:28	applicative	yes
2013-03-29 05:13:40	arkeet	k
2013-03-29 05:14:02	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: brb)
2013-03-29 05:14:10	applicative	I cant find it at the moment, but it was comparatively trivial of course
2013-03-29 05:14:18	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 05:14:21	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-03-29 05:14:41	ludamad	ill look, thanks
2013-03-29 05:14:54	<--	jobstijl (~job@5070A080.static.ziggozakelijk.nl) has quit (Remote host closed the connection)
2013-03-29 05:15:03	ludamad	applicative: I'm looking for something that doesnt require a hackage package for now, so as not to confuse the other haskell newcomer im working with
2013-03-29 05:15:05	ludamad	but thanks
2013-03-29 05:15:40	Moggle	can anyone recommend any textbooks on category theory?
2013-03-29 05:15:47	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 260 seconds)
2013-03-29 05:15:57	arkeet	I think a lot of people here like Awodey.
2013-03-29 05:16:02	<--	DanZimm (~Dan@147.126.43.116) has quit (Quit: Computer has gone to sleep.)
2013-03-29 05:16:06	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-03-29 05:16:26	applicative	me too, my sometime teacher!
2013-03-29 05:16:53	applicative	ludamad: I think the text package is in the haskell platform
2013-03-29 05:17:10	ludamad	ah
2013-03-29 05:17:14	arkeet	indeed it is
2013-03-29 05:17:18	ludamad	ok, thanks
2013-03-29 05:19:05	applicative	you want http://lambda.haskell.org/platform/doc/current/packages/text-0.11.2.3/doc/html/Data-Text-Encoding.html there are more direct ways with utf8 packages, but this is idiot simple
2013-03-29 05:19:10	<--	centrinia (~exc@adsl-184-36-92-217.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-29 05:20:17	applicative	ludamad: it might be that you should basically be thinking in terms of Text rather than Bytestring + String if it is text you are using
2013-03-29 05:21:04	ludamad	applicative: I guess the 'stability: experimental' is throwing me off.
2013-03-29 05:21:11	ludamad	I looked into Text at first
2013-03-29 05:21:11	<--	ixmatus (~ixmatus@cpe-173-174-43-51.austin.res.rr.com) has quit (Quit: FOR THE CHEESE)
2013-03-29 05:21:19	-->	Testos (User@bzq-109-64-163-95.red.bezeqint.net) has joined #haskell
2013-03-29 05:21:22	-->	McManiaC_ (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 05:21:42	applicative	does it say that for text?  I think people forget to erase that.  Its among the most widely used packages.
2013-03-29 05:21:50	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 05:21:52	ludamad	Ah.
2013-03-29 05:21:59	ludamad	And yes, it does
2013-03-29 05:22:00	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-29 05:22:12	<--	McManiaC (~mcmaniac@nils.cc) has quit (Read error: Connection reset by peer)
2013-03-29 05:22:38	<--	lopex (uid4272@gateway/web/irccloud.com/x-wwhantdbqfeoamjr) has quit (Ping timeout: 256 seconds)
2013-03-29 05:22:38	<--	tazjin (2971tazjin@server1.bouncer4you.de) has quit (Ping timeout: 256 seconds)
2013-03-29 05:22:54	-->	crs_ (~crs_@192.210.215.64) has joined #haskell
2013-03-29 05:23:00	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 05:23:05	circle	what's the library function to shop off "n" elements from the end of a list?
2013-03-29 05:23:09	circle	chop*
2013-03-29 05:23:12	<--	tom4939_ (~tom@2a01:4f8:d13:4686::2) has quit (Ping timeout: 256 seconds)
2013-03-29 05:23:13	arkeet	drop
2013-03-29 05:23:15	circle	thanks
2013-03-29 05:23:16	-->	lopex (uid4272@gateway/web/irccloud.com/x-afziysethlhwhwwr) has joined #haskell
2013-03-29 05:23:18	-->	tom4939 (~tom@2a01:4f8:d13:4686::2) has joined #haskell
2013-03-29 05:23:27	circle	what if I want those elements returned?
2013-03-29 05:23:32	arkeet	take
2013-03-29 05:23:46	<--	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-03-29 05:23:46	<--	User_ (User@109.64.163.95) has quit (Ping timeout: 256 seconds)
2013-03-29 05:23:46	circle	oh ok, I got them mixed up, thanks
2013-03-29 05:23:49	-->	tazjin (2971tazjin@server1.bouncer4you.de) has joined #haskell
2013-03-29 05:23:55	arkeet	oh wait
2013-03-29 05:23:58	arkeet	n elements from the end?
2013-03-29 05:24:02	-->	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has joined #haskell
2013-03-29 05:24:02	circle	you're right
2013-03-29 05:24:04	circle	I tested it
2013-03-29 05:24:21	ludamad	Right, but isn't take for the beginning ?
2013-03-29 05:24:30	arkeet	there's no dropFromEnd in a standard library.
2013-03-29 05:24:50	arkeet	@where sneaky
2013-03-29 05:24:50	lambdabot	dropFromEnd n xs = zipWith const xs (drop n xs)
2013-03-29 05:25:00	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-29 05:25:18	applicative	hah, thats pretty good
2013-03-29 05:25:28	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 256 seconds)
2013-03-29 05:25:47	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-29 05:26:40	applicative	even works for infinite lists ...
2013-03-29 05:26:45	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-29 05:27:56	-->	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has joined #haskell
2013-03-29 05:28:23	-->	NemesisD (~NemesisD@50.125.74.242) has joined #haskell
2013-03-29 05:28:51	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 260 seconds)
2013-03-29 05:29:19	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 264 seconds)
2013-03-29 05:31:05	hpaste	Haisheng revised “max-two-dim-array”: “max-two-dim-array” at http://hpaste.org/84590
2013-03-29 05:31:17	<--	fumieval (~fumieval@61-21-126-12.rev.home.ne.jp) has quit (Read error: Connection reset by peer)
2013-03-29 05:32:02	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-29 05:32:16	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-29 05:32:16	-->	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has joined #haskell
2013-03-29 05:35:00	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 05:36:44	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Ping timeout: 258 seconds)
2013-03-29 05:37:13	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 245 seconds)
2013-03-29 05:38:14	cmccann	applicative:  the power of lazy natural numbers! (think about it if it's not obvious why)
2013-03-29 05:39:04	<--	chatsiri1 (~chatsiri_@14.207.141.40) has quit (Quit: leaving)
2013-03-29 05:39:19	shachaf	What was that one puzzle people had in here the other day?
2013-03-29 05:39:22	-->	chatsiri_ (~chatsiri_@14.207.141.40) has joined #haskell
2013-03-29 05:39:30	shachaf	Ah, lazy split-into-halves.
2013-03-29 05:40:57	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 05:41:17	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-29 05:41:26	-->	trescenzi (~trescenzi@2620:91:0:163:c827:b95c:b8e0:689b) has joined #haskell
2013-03-29 05:41:33	-->	Gorgorion (~gorgorion@CPE185933409f97-CM185933409f94.cpe.net.cable.rogers.com) has joined #haskell
2013-03-29 05:42:30	arkeet	> transpose . Data.List.Split.chunksOf 2 $ [1..]
2013-03-29 05:42:32	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-29 05:42:32	lambdabot	  [[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,...
2013-03-29 05:42:39	arkeet	> map (take 10) . transpose . Data.List.Split.chunksOf 2 $ [1..]
2013-03-29 05:42:42	lambdabot	  mueval-core: Time limit exceeded
2013-03-29 05:42:53	arkeet	hmm
2013-03-29 05:42:59	cmccann	> map (take 10) . transpose . Data.List.Split.chunksOf 2 $ [1..]
2013-03-29 05:43:03	lambdabot	  mueval-core: Time limit exceeded
2013-03-29 05:43:13	cmccann	ok not just lambdabot being contrary
2013-03-29 05:43:17	arkeet	> map (take 10) . transpose . Data.List.Split.chunksOf 2 $ [1..]
2013-03-29 05:43:20	lambdabot	  mueval-core: Time limit exceeded
2013-03-29 05:43:23	arkeet	hmm
2013-03-29 05:45:56	<--	trescenzi (~trescenzi@2620:91:0:163:c827:b95c:b8e0:689b) has quit (Ping timeout: 258 seconds)
2013-03-29 05:47:33	<--	idntfy (~idntfy@5.187.83.186) has quit (Ping timeout: 248 seconds)
2013-03-29 05:47:59	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 05:48:21	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 05:48:55	<--	eff (~quassel@114.246.90.161) has quit (Ping timeout: 260 seconds)
2013-03-29 05:49:03	<--	Gorgorion (~gorgorion@CPE185933409f97-CM185933409f94.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-03-29 05:49:27	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 05:49:37	-->	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has joined #haskell
2013-03-29 05:52:07	<--	Siphonblast (~icarot@2600:1010:b10d:4b89:0:5:1582:7901) has quit (Ping timeout: 264 seconds)
2013-03-29 05:53:15	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 05:54:07	 *	hackagebot constrained-normal 1.0.0 - Normalised Deep Embeddings for Constrained Type-Class Instances  http://hackage.haskell.org/package/constrained-normal-1.0.0 (NeilSculthorpe)
2013-03-29 05:54:13	<--	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-29 05:54:22	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: No route to host)
2013-03-29 05:55:24	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Ping timeout: 264 seconds)
2013-03-29 05:55:30	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 05:56:00	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-29 05:56:53	-->	david1991 (david1991@98pc230.sshunet.nl) has joined #haskell
2013-03-29 05:57:11	-->	sw2wolf (~czsq888@222.209.240.64) has joined #haskell
2013-03-29 05:57:49	david1991	Hello guys, I have a small question. Have anybody used the SBV package on hackage? So I was trying to install it on Windows 7 (https://github.com/LeventErkok/sbv/blob/master/INSTALL), so I followed everything that this thing said.
2013-03-29 05:58:08	david1991	However, after running the first 3 lines at (http://hackage.haskell.org/package/sbv)
2013-03-29 05:58:21	david1991	I get Failed to complete the call to z3
2013-03-29 05:58:28	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 05:58:40	david1991	it detects z3 and I can execute it from th command prompt, however I have no idea how to solve this problem.
2013-03-29 05:59:04	-->	rsampaio (~rodrigo@189.121.226.43) has joined #haskell
2013-03-29 05:59:18	<--	citizen93 (~anonymous@98pc230.sshunet.nl) has quit
2013-03-29 05:59:54	-->	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-03-29 06:01:28	Shin-LaC	https://github.com/roman/HaskellKoans <- ok, this is complete bullshit
2013-03-29 06:01:38	Shin-LaC	it's nothing like the python or ruby koans
2013-03-29 06:02:18	-->	path[l] (~vsi@173.252.71.129) has joined #haskell
2013-03-29 06:02:26	<--	circle (~circle@203-219-13-238.static.tpgi.com.au) has quit (Read error: Connection reset by peer)
2013-03-29 06:02:45	-->	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has joined #haskell
2013-03-29 06:02:53	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 06:02:54	Shin-LaC	the first four groups are trivial, and mostly just require you to choose the right function
2013-03-29 06:02:54	-->	kvey (~kvey@cpepool1gcmts2-212.sanbrunocable.com) has joined #haskell
2013-03-29 06:02:55	<--	ben_d (~muus@131.252.167.171) has quit (Ping timeout: 260 seconds)
2013-03-29 06:03:06	Shin-LaC	and they *tell* you what the right function is
2013-03-29 06:03:14	Shin-LaC	so you just copy and paste a word
2013-03-29 06:03:24	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Read error: Connection reset by peer)
2013-03-29 06:03:31	Shin-LaC	wow, I can feel the learning already
2013-03-29 06:03:37	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 06:04:01	m3ga	Shin-LaC: any reason you aren't reading learnyouahaskell.com?
2013-03-29 06:04:08	Shin-LaC	then it asks you to go straight from currification to parser combinators
2013-03-29 06:04:37	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-29 06:05:02	Shin-LaC	m3ga: the title and the website suggest that it's the sort of why_ (or _why or whatever)-style whimsical stuff that I hate
2013-03-29 06:05:24	-->	oio (befeeb08@gateway/web/freenode/ip.190.254.235.8) has joined #haskell
2013-03-29 06:05:38	Shin-LaC	I don't want to be entertained, I want information packaged in the most efficient format
2013-03-29 06:05:47	m3ga	Shin-LaC: it is widely regarded as an excellent resource for learning haskell.
2013-03-29 06:06:11	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 260 seconds)
2013-03-29 06:06:50	oio	how could out of this string "abcdef" this "a" "ab" "abc" "abcd" "abcde" "abcdef" ?
2013-03-29 06:06:51	Shin-LaC	I'll give it a chance, then
2013-03-29 06:06:58	Shin-LaC	I guess I'll skip the first five chapters
2013-03-29 06:06:59	applicative	Shin-LaC: theres plenty of silliness, but LYAH is pretty well thought out.
2013-03-29 06:07:00	m3ga	Shin-LaC: there are a bunch more here http://www.haskell.org/haskellwiki/Learning_Haskell
2013-03-29 06:07:25	mauke	> inits "abcdef"
2013-03-29 06:07:27	lambdabot	  ["","a","ab","abc","abcd","abcde","abcdef"]
2013-03-29 06:07:32	applicative	> inits "abcdef"
2013-03-29 06:07:34	lambdabot	  ["","a","ab","abc","abcd","abcde","abcdef"]
2013-03-29 06:07:41	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-29 06:07:42	Shin-LaC	but now I want to solve this parser combinators stuff
2013-03-29 06:07:49	applicative	mauke is too fast for me
2013-03-29 06:07:59	mauke	2fast4u
2013-03-29 06:08:14	Shin-LaC	but I don't really understand how to combine two different applicatives
2013-03-29 06:08:21	oio	.... k
2013-03-29 06:08:23	Shin-LaC	I think I need to combine Parser and [] somehow
2013-03-29 06:08:28	Shin-LaC	basically
2013-03-29 06:08:46	Shin-LaC	I have "digit" which is a Parser Char
2013-03-29 06:09:07	Shin-LaC	and I need to get a Parser String that takes a sequence of digits
2013-03-29 06:09:10	applicative	and now you want "digits"?
2013-03-29 06:09:14	applicative	many1 digit
2013-03-29 06:09:38	mauke	some digit
2013-03-29 06:10:00	Saizan	:t some
2013-03-29 06:10:01	lambdabot	Alternative f => f a -> f [a]
2013-03-29 06:10:13	applicative	:t many
2013-03-29 06:10:14	lambdabot	Alternative f => f a -> f [a]
2013-03-29 06:10:31	applicative	:t many1
2013-03-29 06:10:32	lambdabot	    Not in scope: `many1'
2013-03-29 06:10:32	lambdabot	    Perhaps you meant `many' (imported from Control.Applicative)
2013-03-29 06:10:32	Shin-LaC	ok, but that doesn't really teach me anything
2013-03-29 06:11:03	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 06:11:08	mauke	write many/some yourself
2013-03-29 06:11:17	Shin-LaC	yes, that's what I want to do
2013-03-29 06:11:23	Shin-LaC	I wanted to use "map" at first
2013-03-29 06:11:24	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 06:11:35	Shin-LaC	but that gives me… I don't know what the hell that gives me
2013-03-29 06:11:37	mauke	over what input list?
2013-03-29 06:11:54	Shin-LaC	the input list would be the String
2013-03-29 06:12:03	Shin-LaC	except that a parser isn't really a function
2013-03-29 06:12:11	<--	sw2wolf (~czsq888@222.209.240.64) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 06:12:19	mauke	yeah, you can't do that
2013-03-29 06:12:29	Saizan	list combinators aren't going to help
2013-03-29 06:12:38	mauke	don't touch the String; combine existing parsers instead
2013-03-29 06:12:53	applicative	dont look at the implementation of some and many in Control.Applicative.
2013-03-29 06:12:55	lispy	dcoutts: pkg-config-depends (or whatever the field is called) can be a hassle on windows. Just FYI.
2013-03-29 06:13:08	mauke	knowing regexes may help :-)
2013-03-29 06:13:11	lispy	dcoutts: I have a package here I wanted to build but it uses the field (libffi)
2013-03-29 06:13:31	--	Watcher7 is now known as Watcher7|off
2013-03-29 06:14:15	<--	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has quit (Quit: ~ Trillian Astra - www.trillian.im ~)
2013-03-29 06:14:16	lispy	dcoutts: I installed a mingw version of pkg-config (find it was a pain) but that didn't realy solve my problem because now pkg-config just tells me that I don't have libffi installed :)
2013-03-29 06:14:38	lispy	dcoutts: I don't know if it's feasible, but having ghc ship pkg-config (since cabal could use it) would be nice.
2013-03-29 06:17:04	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 240 seconds)
2013-03-29 06:18:35	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-03-29 06:19:19	<--	kvey (~kvey@cpepool1gcmts2-212.sanbrunocable.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-29 06:21:19	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-29 06:22:51	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-03-29 06:24:49	-->	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-03-29 06:25:19	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 260 seconds)
2013-03-29 06:25:55	applicative	heres a dumb digits Shin-LaC , for criticism http://hpaste.org/84803
2013-03-29 06:26:03	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 06:26:15	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-29 06:27:02	<--	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 255 seconds)
2013-03-29 06:27:48	<--	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has quit (Ping timeout: 256 seconds)
2013-03-29 06:27:57	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 06:28:10	-->	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has joined #haskell
2013-03-29 06:28:41	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-29 06:29:12	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-29 06:29:56	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-29 06:30:01	-->	edeast (~chatzilla@24.114.26.180) has joined #haskell
2013-03-29 06:30:11	<--	edeast (~chatzilla@24.114.26.180) has left #haskell
2013-03-29 06:30:24	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 258 seconds)
2013-03-29 06:31:13	--	koninkje is now known as koninkje_away
2013-03-29 06:31:33	oio	is there a name for this algorithm 123456 -> 1 12 123 1234 12345 123456 2 23 234 2345 2356 3 34 345 3456 4 45 456 5 56 6
2013-03-29 06:31:56	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Read error: Connection reset by peer)
2013-03-29 06:32:09	-->	sw2wolf (~czsq888@222.209.240.64) has joined #haskell
2013-03-29 06:32:14	mauke	> subsets "123456"
2013-03-29 06:32:14	shachaf	> (\x -> inits x >>= tails) "123456"
2013-03-29 06:32:16	lambdabot	  Not in scope: `subsets'
2013-03-29 06:32:16	lambdabot	 Perhaps you meant `subst' (imported from Data.Numb...
2013-03-29 06:32:16	lambdabot	  mueval-core: L.hs: removeLink: does not exist (No such file or directory)
2013-03-29 06:32:34	mauke	:t (>=>)
2013-03-29 06:32:37	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-29 06:32:38	shachaf	I don't think subsequences is it.
2013-03-29 06:32:43	shachaf	> (inits >=> tails) "123456"
2013-03-29 06:32:44	lambdabot	  ["","1","","12","2","","123","23","3","","1234","234","34","4","","12345","...
2013-03-29 06:32:49	shachaf	 subsequences "123456"
2013-03-29 06:32:56	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Read error: Connection reset by peer)
2013-03-29 06:33:01	shachaf	> subsequences "123456"
2013-03-29 06:33:03	lambdabot	  ["","1","2","12","3","13","23","123","4","14","24","124","34","134","234","...
2013-03-29 06:33:35	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 06:34:17	oio	nope
2013-03-29 06:34:39	shachaf	> unwords . (tail . inits >=> init . tails) $ "123456"
2013-03-29 06:34:40	lambdabot	  "1 12 2 123 23 3 1234 234 34 4 12345 2345 345 45 5 123456 23456 3456 456 56...
2013-03-29 06:34:43	mikurubeam	@src subsequences
2013-03-29 06:34:43	lambdabot	Source not found. I've seen penguins that can type better than that.
2013-03-29 06:34:46	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-29 06:35:01	<--	Sorella (~queen@oftn/member/Sorella) has quit (Ping timeout: 248 seconds)
2013-03-29 06:35:37	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 06:36:55	oio	:t (>=>)
2013-03-29 06:36:56	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-03-29 06:38:03	oio	f*** genius..
2013-03-29 06:39:16	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-29 06:39:24	<--	EarlGray (~mitra@195.20.154.2) has quit (Quit: Konversation terminated!)
2013-03-29 06:39:33	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 240 seconds)
2013-03-29 06:40:40	<--	fmapE (~fmapE@2001:18e8:2:10f4:9c2b:e8f4:9acc:7277) has quit (Remote host closed the connection)
2013-03-29 06:40:44	-->	syoon_ (~syoon@50.40.126.63) has joined #haskell
2013-03-29 06:41:00	ludamad	:t init
2013-03-29 06:41:01	lambdabot	[a] -> [a]
2013-03-29 06:41:10	ludamad	:t inits
2013-03-29 06:41:11	lambdabot	[a] -> [[a]]
2013-03-29 06:42:20	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 06:42:30	augur	:t innit
2013-03-29 06:42:31	lambdabot	    Not in scope: `innit'
2013-03-29 06:42:32	lambdabot	    Perhaps you meant one of these:
2013-03-29 06:42:32	lambdabot	      `init' (imported from Data.List),
2013-03-29 06:42:41	augur	i was hoping for `Chav' :(
2013-03-29 06:43:31	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 260 seconds)
2013-03-29 06:43:44	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-03-29 06:43:55	<--	syoon_ (~syoon@50.40.126.63) has left #haskell
2013-03-29 06:43:59	<--	banjiewen (~banjiewen@184.173.74.133-static.reverse.softlayer.com) has quit (Ping timeout: 246 seconds)
2013-03-29 06:44:00	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-29 06:44:00	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 264 seconds)
2013-03-29 06:44:22	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-29 06:44:30	Saizan	> unwords . concat . map (drop 1 . inits) . tails $ "123456"
2013-03-29 06:44:32	lambdabot	  "1 12 123 1234 12345 123456 2 23 234 2345 23456 3 34 345 3456 4 45 456 5 56...
2013-03-29 06:45:06	shachaf	> unwords . (>>= drop 1 . inits) . tails $ "12345"
2013-03-29 06:45:39	lambdabot	  "1 12 123 1234 12345 2 23 234 2345 3 34 345 4 45 5"
2013-03-29 06:48:42	-->	sidgwick (~zhigang@123.14.85.76) has joined #haskell
2013-03-29 06:49:52	-->	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has joined #haskell
2013-03-29 06:50:03	<--	nh2 (~nh2@149.241.12.113) has quit (Ping timeout: 260 seconds)
2013-03-29 06:50:17	<--	sw2wolf (~czsq888@222.209.240.64) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 06:51:45	oio	> length . concat . map (drop 1 . inits) . tails $ "123456"
2013-03-29 06:51:47	lambdabot	  21
2013-03-29 06:52:07	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-29 06:52:39	oio	length . (>>= drop 1 . inits) . tails $ "123456"
2013-03-29 06:52:52	<--	tac_ (62c14e0f@gateway/web/freenode/ip.98.193.78.15) has quit (Quit: Page closed)
2013-03-29 06:52:53	oio	>length . (>>= drop 1 . inits) . tails $ "123456"
2013-03-29 06:53:22	<--	applicative (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-03-29 06:53:35	<--	sidgwick (~zhigang@123.14.85.76) has left #haskell
2013-03-29 06:54:16	--	not_tommy is now known as tmiw
2013-03-29 06:54:53	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 06:55:01	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-29 06:55:23	<--	NemesisD (~NemesisD@50.125.74.242) has quit (Ping timeout: 256 seconds)
2013-03-29 06:55:45	Saizan	you need the space
2013-03-29 06:56:26	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 06:56:38	<--	u_ (~phillip@adsl-75-57-186-245.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-03-29 06:56:58	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-29 06:57:09	<--	rsampaio (~rodrigo@189.121.226.43) has quit (Remote host closed the connection)
2013-03-29 06:57:31	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 260 seconds)
2013-03-29 06:58:02	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 06:58:03	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 06:58:17	oio	fine i need to know all those .. functions
2013-03-29 06:58:28	<--	MnO2 (~MnO2@nat/yahoo/x-hoamtgiijidijtgf) has quit (Quit: MnO2)
2013-03-29 06:59:03	<--	casucci (~zeke@unaffiliated/casucci) has quit (Quit: Lost terminal)
2013-03-29 06:59:48	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-29 07:00:07	ab9rf	no, lambdabot knows them for you :)
2013-03-29 07:00:49	-->	circle (~circle@203-219-13-238.static.tpgi.com.au) has joined #haskell
2013-03-29 07:01:03	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 256 seconds)
2013-03-29 07:01:16	-->	seafood (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-29 07:01:29	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-29 07:02:06	<--	juxovec (~juxovec@88.103.13.78) has quit (Read error: Connection reset by peer)
2013-03-29 07:02:08	-->	juxovec_ (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 07:03:04	oio	haskell so high
2013-03-29 07:03:43	-->	akurei_ (~akurei@lak-69-207.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-29 07:03:46	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-29 07:03:52	-->	eff (~quassel@114.250.88.108) has joined #haskell
2013-03-29 07:04:20	<--	akurei (~akurei@lak-115-101.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 256 seconds)
2013-03-29 07:04:33	-->	vifanq (~vifanq@gateway/tor-sasl/vifanq) has joined #haskell
2013-03-29 07:04:55	circle	how do I actually access the contents of a tuple?
2013-03-29 07:05:00	<--	Damgaard1 (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Ping timeout: 264 seconds)
2013-03-29 07:05:03	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-29 07:05:09	circle	say I have an object structured as such (technically a list)
2013-03-29 07:05:21	circle	[([a], [b])]
2013-03-29 07:05:39	circle	a list with one element, a tuple, containing two elements. how do I access a and b?
2013-03-29 07:05:40	mikurubeam	circle: If it is a pair, you could use the functions fst and snd.
2013-03-29 07:05:50	mauke	pattern matching
2013-03-29 07:05:53	mikurubeam	circle: For tuples of other arities, you could use pattern-matching or whatever.
2013-03-29 07:06:03	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-29 07:06:21	circle	example?
2013-03-29 07:06:31	-->	MnO2 (~MnO2@nat/yahoo/x-qulzqixrrvdppfwb) has joined #haskell
2013-03-29 07:06:42	mikurubeam	> (\(a,b,c) -> a + b + c) (1,2,3)
2013-03-29 07:06:44	lambdabot	  6
2013-03-29 07:06:44	Nisstyre-laptop	(a,b,c) = b
2013-03-29 07:06:48	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 264 seconds)
2013-03-29 07:07:00	<--	casucci (~zeke@unaffiliated/casucci) has quit (Quit: Lost terminal)
2013-03-29 07:07:01	Nisstyre-laptop	or rather "let (_,b_) = triple in b"
2013-03-29 07:07:09	Nisstyre-laptop	*(_,b,_)
2013-03-29 07:07:24	mikurubeam	:t (%)
2013-03-29 07:07:26	lambdabot	    Not in scope: `%'
2013-03-29 07:07:26	lambdabot	    Perhaps you meant `R.%' (imported from Data.Ratio)
2013-03-29 07:07:46	-->	sarfraz_ (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-29 07:07:56	-->	null___ (null@2600:3c02::f03c:91ff:feae:8694) has joined #haskell
2013-03-29 07:08:37	Nisstyre-laptop	> let (_,(b:_),_) = b + b in ([1],[2],[3])
2013-03-29 07:08:39	lambdabot	  Occurs check: cannot construct the infinite type:
2013-03-29 07:08:39	lambdabot	   t2 = (t0, [t2], t1)
2013-03-29 07:09:00	Nisstyre-laptop	> let (_,(b:[]),_) = b + b in ([1],[2],[3])
2013-03-29 07:09:02	lambdabot	  Occurs check: cannot construct the infinite type:
2013-03-29 07:09:02	lambdabot	   t2 = (t0, [t2], t1)
2013-03-29 07:09:05	Nisstyre-laptop	ugh
2013-03-29 07:09:31	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2013-03-29 07:10:50	Nisstyre-laptop	okay I'm an idiot right now
2013-03-29 07:11:06	Nisstyre-laptop	> let (_,(b:_),_) = ([1],[2],[3]) in b + b
2013-03-29 07:11:07	lambdabot	  4
2013-03-29 07:11:13	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-03-29 07:12:27	circle	thanks
2013-03-29 07:12:27	-->	sw2wolf (~czsq888@222.209.240.64) has joined #haskell
2013-03-29 07:12:33	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-03-29 07:14:11	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-03-29 07:14:34	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-29 07:15:52	<--	oio (befeeb08@gateway/web/freenode/ip.190.254.235.8) has quit (Ping timeout: 245 seconds)
2013-03-29 07:17:00	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-03-29 07:19:09	<--	ciaranm (~ciaranm@tchaikovsky.exherbo.org) has quit (Read error: Operation timed out)
2013-03-29 07:19:49	<--	jonaias (~jonaias@189.111.80.20) has quit (Quit: Konversation terminated!)
2013-03-29 07:20:09	<--	fosky (~fosky@ppp118-209-96-150.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-29 07:20:18	-->	ciaranm (~ciaranm@tchaikovsky.exherbo.org) has joined #haskell
2013-03-29 07:20:54	-->	hajimeho_ (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 07:21:32	-->	xrq` (~user@unaffiliated/xrq) has joined #haskell
2013-03-29 07:22:23	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 255 seconds)
2013-03-29 07:22:43	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-29 07:22:49	<--	xrq (~user@unaffiliated/xrq) has quit (Read error: Connection reset by peer)
2013-03-29 07:22:52	-->	hamilyon (~ashaposhn@94.124.202.202) has joined #haskell
2013-03-29 07:23:39	<--	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (Ping timeout: 260 seconds)
2013-03-29 07:24:22	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 07:24:47	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-03-29 07:24:57	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Read error: Operation timed out)
2013-03-29 07:25:18	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-29 07:25:41	<--	ludamad (~adomurad@dsl-67-204-7-72.acanac.net) has quit (Ping timeout: 248 seconds)
2013-03-29 07:26:08	<--	niteria (~niteria@89-76-207-233.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-29 07:26:23	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 07:27:12	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-03-29 07:27:30	-->	rohitkav (~rohitkav@122.167.9.72) has joined #haskell
2013-03-29 07:27:40	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-03-29 07:28:05	rohitkav	I got Ubuntu 12.04, need to install Haskell completely and Than yesod framework
2013-03-29 07:28:09	rohitkav	Kindly help
2013-03-29 07:28:18	<--	null___ (null@2600:3c02::f03c:91ff:feae:8694) has left #haskell
2013-03-29 07:28:22	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 07:28:36	mauke	haha
2013-03-29 07:28:47	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 07:29:32	rohitkav	? mauke
2013-03-29 07:29:59	mauke	you're showing zero effort
2013-03-29 07:30:00	<--	pharaun (~pharaunfr@static.88-198-62-245.clients.your-server.de) has quit (Ping timeout: 256 seconds)
2013-03-29 07:30:12	mauke	just "I want X. do it."
2013-03-29 07:30:23	mgsloan	rohitkav: "sudo apt-get install haskell-platform" followed by "cabal install yesod" should do it.  But yeah, google is your friend
2013-03-29 07:30:44	rohitkav	I did mgsloan , But i could set cabal path properly I guess
2013-03-29 07:30:53	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 246 seconds)
2013-03-29 07:30:57	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 258 seconds)
2013-03-29 07:31:24	mgsloan	rohitkav: Did you start a new terminal?  that might be necessary
2013-03-29 07:31:34	-->	dp_wiz (~wiz@212.13.29.5) has joined #haskell
2013-03-29 07:31:41	rohitkav	yes mgsloan
2013-03-29 07:31:56	-->	nade (~nade@74.215.14.61) has joined #haskell
2013-03-29 07:32:34	mgsloan	Oh, I forgot about "cabal update"
2013-03-29 07:32:43	hpaste	rohit pasted “Error while trying to install yesod” at http://hpaste.org/84804
2013-03-29 07:33:17	rohitkav	I did update too mgsloan so I thought I needed full package of Ghci
2013-03-29 07:33:25	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-29 07:33:25	rohitkav	or somewhere I was going wrong
2013-03-29 07:33:30	mgsloan	you're overwriting your PATH variable so that it doesn't include the usual stuff like /usr/bin
2013-03-29 07:33:38	rohitkav	yes
2013-03-29 07:33:47	edwardk	shachaf: around?
2013-03-29 07:34:04	-->	blackh1 (~blackh@207.192.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-29 07:34:09	rohitkav	Actually I was trying to follow the yesod site reference on this
2013-03-29 07:34:22	<--	blackh (~blackh@207.192.69.111.dynamic.snap.net.nz) has quit (Quit: Leaving.)
2013-03-29 07:34:23	shachaf	hi edwardk
2013-03-29 07:34:44	mgsloan	rohitkav: Try starting a new terminal, and do "export PATH=$PATH:$HOME/.cabal/bin"
2013-03-29 07:35:02	<--	dp_wiz (~wiz@212.13.29.5) has quit (Client Quit)
2013-03-29 07:35:13	mgsloan	rohitkav: The yesod site reference probably assumes you have cabal install in your local cabal directory, unfortunately
2013-03-29 07:35:36	<--	crowberries74 (~crowberri@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Quit: crowberries74)
2013-03-29 07:35:53	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 07:35:54	rohitkav	It shows me a list of things which needed to be installed , I belive
2013-03-29 07:35:56	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-03-29 07:36:36	mgsloan	rohitkav: sounds like it's working! enjoy!
2013-03-29 07:37:22	hpaste	rohit pasted “Error installing yesod” at http://hpaste.org/84805
2013-03-29 07:37:41	rohitkav	check the above mgsloan plz.
2013-03-29 07:38:23	mgsloan	Such things will happen.  Use "--force-reinstalls"
2013-03-29 07:38:30	-->	unpastoral24 (~unpastora@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 07:38:35	rohitkav	ok
2013-03-29 07:38:36	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-03-29 07:38:48	-->	OlegYch7 (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 07:39:04	rohitkav	so cabal install yesod-platform --force-reinstalls would work is it
2013-03-29 07:39:30	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-29 07:39:33	rohitkav	I was worried if some packages get broken so came to irc for help
2013-03-29 07:39:47	rohitkav	if in case i was doing some mistake
2013-03-29 07:40:01	-->	OlegYch3 (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 07:40:04	sw2wolf	rohitkav: ghc-pkg check
2013-03-29 07:40:08	-->	chatsiri1 (~chatsiri_@171.7.58.25) has joined #haskell
2013-03-29 07:40:25	sw2wolf	irrc
2013-03-29 07:40:39	rohitkav	you want the out put sw2wolf
2013-03-29 07:40:39	sw2wolf	iirc
2013-03-29 07:40:48	rohitkav	of that
2013-03-29 07:41:03	sw2wolf	rohitkav: no
2013-03-29 07:41:18	<--	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 256 seconds)
2013-03-29 07:41:23	<--	OlegYch (~OlegYch@80.249.93.99) has quit (Ping timeout: 260 seconds)
2013-03-29 07:41:40	hpaste	rohit pasted “Error installing yesod” at http://hpaste.org/84806
2013-03-29 07:41:47	-->	trescenzi (~trescenzi@2620:91:0:163:acf3:e7f8:dd30:6a6f) has joined #haskell
2013-03-29 07:41:53	rohitkav	oops sorry sw2wolf
2013-03-29 07:42:30	rohitkav	what was that sw2wolf
2013-03-29 07:42:54	sw2wolf	All those warnings seem to be NOT severe
2013-03-29 07:43:01	-->	odi (~user@62-46-195-128.adsl.highway.telekom.at) has joined #haskell
2013-03-29 07:43:06	-->	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-29 07:43:14	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-29 07:43:15	<--	chatsiri_ (~chatsiri_@14.207.141.40) has quit (Ping timeout: 260 seconds)
2013-03-29 07:43:16	-->	pharaun (~pharaunfr@static.88-198-62-245.clients.your-server.de) has joined #haskell
2013-03-29 07:43:26	rohitkav	ok :)
2013-03-29 07:43:36	<--	OlegYch7 (~OlegYch@80.249.93.99) has quit (Ping timeout: 258 seconds)
2013-03-29 07:43:44	rohitkav	mgsloan, it seams installing
2013-03-29 07:43:47	rohitkav	thanks mgsloan
2013-03-29 07:44:04	mgsloan	welcome!
2013-03-29 07:44:45	<--	OlegYch3 (~OlegYch@80.249.93.99) has quit (Read error: Connection reset by peer)
2013-03-29 07:44:50	yezariaely	I want to have the following point free: gen env exp = runState (gen' env exp) 0. Tried genPF = (flip runState) 0 gen' but this doesn't work. Anyone can give me a hint?
2013-03-29 07:45:11	shachaf	@pl gen env exp = runState (gen' env exp) 0
2013-03-29 07:45:11	lambdabot	gen = flip flip 0 . (runState .) . gen'
2013-03-29 07:45:15	shachaf	Ugh.
2013-03-29 07:45:31	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-03-29 07:45:37	-->	OlegYch (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 07:45:42	-->	juxovec (~juxovec@88.103.13.78) has joined #haskell
2013-03-29 07:45:55	yezariaely	magic!
2013-03-29 07:45:57	yezariaely	thx
2013-03-29 07:46:00	shachaf	yezariaely: (flip runState 0 .) . gen' -- ?
2013-03-29 07:46:09	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 07:46:11	mgsloan	o_0 "flip flip 0"
2013-03-29 07:46:12	<--	juxovec_ (~juxovec@88.103.13.78) has quit (Read error: No route to host)
2013-03-29 07:46:12	yezariaely	looks much better...
2013-03-29 07:46:17	<--	trescenzi (~trescenzi@2620:91:0:163:acf3:e7f8:dd30:6a6f) has quit (Ping timeout: 258 seconds)
2013-03-29 07:46:19	yezariaely	two flips is cool :)
2013-03-29 07:46:29	shachaf	@ty flip flip
2013-03-29 07:46:30	lambdabot	b -> (a -> b -> c) -> a -> c
2013-03-29 07:46:42	mgsloan	I get it, but it's still crazy!
2013-03-29 07:47:00	shachaf	Just use a concatenative language.
2013-03-29 07:47:18	mgsloan	I'd prefer not to, I like my composition explicit ;)
2013-03-29 07:47:42	Nisstyre-laptop	check out Joy
2013-03-29 07:47:50	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-29 07:47:55	<--	unpastoral24 (~unpastora@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 07:47:57	-->	Polish (~Polish@ppp118-209-96-150.lns20.mel4.internode.on.net) has joined #haskell
2013-03-29 07:48:06	-->	syoon_ (~syoon@50.40.126.63) has joined #haskell
2013-03-29 07:50:42	-->	unpastoral24 (~unpastora@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 07:52:53	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 240 seconds)
2013-03-29 07:53:03	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 260 seconds)
2013-03-29 07:54:13	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-29 07:57:24	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 07:58:36	<--	nade (~nade@74.215.14.61) has quit (Quit: nade)
2013-03-29 08:00:36	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-29 08:00:56	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 08:01:06	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-03-29 08:01:45	-->	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-29 08:02:21	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-03-29 08:03:16	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-29 08:03:25	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-29 08:03:48	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 261 seconds)
2013-03-29 08:04:25	<--	Flint (~paks@173-30-126-173.client.mchsi.com) has quit (Ping timeout: 252 seconds)
2013-03-29 08:04:30	<--	david1991 (david1991@98pc230.sshunet.nl) has quit
2013-03-29 08:04:31	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 08:06:02	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-03-29 08:06:30	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 08:06:32	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has quit (Quit: Leaving)
2013-03-29 08:08:15	<--	hamilyon (~ashaposhn@94.124.202.202) has left #haskell
2013-03-29 08:09:24	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-03-29 08:09:29	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-03-29 08:10:24	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 08:10:47	<--	gadjo (~gggg@109.102.72.188) has quit (Ping timeout: 246 seconds)
2013-03-29 08:12:21	<--	Polish (~Polish@ppp118-209-96-150.lns20.mel4.internode.on.net) has quit (Quit: Leaving)
2013-03-29 08:13:12	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-29 08:14:08	<--	tanakh_ (~tanakh@236240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 255 seconds)
2013-03-29 08:15:02	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-29 08:15:59	-->	silver (~silver@178.121.55.208) has joined #haskell
2013-03-29 08:16:12	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 08:16:17	-->	dudlite (~dudlite@121.99.141.118) has joined #haskell
2013-03-29 08:16:22	dudlite	hello
2013-03-29 08:16:24	-->	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has joined #haskell
2013-03-29 08:16:31	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 08:16:45	dudlite	having problems splitting lists recursively for merge sort function
2013-03-29 08:17:06	-->	axcint (~axcint@ppp118-209-96-150.lns20.mel4.internode.on.net) has joined #haskell
2013-03-29 08:17:10	dudlite	this is what I wrote to split one list into two
2013-03-29 08:17:12	dudlite	halve :: [a] -> ([a],[a])
2013-03-29 08:17:17	no-n	wouldn't flip . flip $ f just return f?
2013-03-29 08:17:18	dudlite	halve k = splitAt (length k `div` 2) k
2013-03-29 08:18:14	-->	PaksAway (~paks@173-30-126-173.client.mchsi.com) has joined #haskell
2013-03-29 08:18:28	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-03-29 08:18:41	shachaf	Oh boy.
2013-03-29 08:18:46	shachaf	We just had this a few days ago.
2013-03-29 08:19:02	shachaf	For a good time make it lazier.
2013-03-29 08:19:27	c_wraith	for an even better time, merge bottom up
2013-03-29 08:19:55	dudlite	my understand of merge sort is it just splits all the lists until 1 element remains
2013-03-29 08:20:04	dudlite	then my sort method just sorts each list up
2013-03-29 08:20:07	dudlite	from bottom
2013-03-29 08:20:13	lightquake	why does highlighting-kate use two-character CSS classes?
2013-03-29 08:20:15	dudlite	understanding*
2013-03-29 08:20:32	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-03-29 08:20:33	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-03-29 08:20:33	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-03-29 08:20:33	dudlite	function*
2013-03-29 08:21:00	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-03-29 08:21:24	c_wraith	dudlite: that's what a top-down mergesort does.  It starts at the top, then does the splitting recursively
2013-03-29 08:21:25	shachaf	Well...
2013-03-29 08:21:25	-->	Feuerbach (~feuerbach@80.90.233.58) has joined #haskell
2013-03-29 08:21:41	shachaf	Using "length" is probably a bad sign for a function like this.
2013-03-29 08:21:47	<--	blackh1 (~blackh@207.192.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 255 seconds)
2013-03-29 08:21:53	dudlite	because it has to traverse twice?
2013-03-29 08:22:05	dudlite	not worried about big n for this one
2013-03-29 08:22:06	c_wraith	dudlite: a bottom-up mergesort starts by doing a single pass to divide everything into lists of length one, then starts merging adjacent pairs
2013-03-29 08:22:10	dudlite	just a homework assignment
2013-03-29 08:22:11	-->	imeredith (~ivan@219.199.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-29 08:22:14	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 255 seconds)
2013-03-29 08:22:27	lightquake	in a not-entirely-unrelated note, i wish pandoc didn't take ages to link against
2013-03-29 08:22:43	shachaf	This is also about elegance. :-)
2013-03-29 08:22:48	<--	axcint (~axcint@ppp118-209-96-150.lns20.mel4.internode.on.net) has quit (Quit: Leaving)
2013-03-29 08:23:02	dudlite	Thankyou wraith
2013-03-29 08:23:05	 *	shachaf is in favor of getting the length out of your system early.
2013-03-29 08:23:26	shachaf	Anyway, you haven't mentioned the trouble you're having yet.
2013-03-29 08:23:27	dudlite	whats the runtime on length?
2013-03-29 08:23:57	dudlite	o(n)??
2013-03-29 08:24:09	dudlite	Sorry, I am new to this language
2013-03-29 08:24:12	dudlite	confused as heck lol
2013-03-29 08:24:27	dudlite	pretty much I know what to do, just don't know how to do it
2013-03-29 08:24:36	dudlite	having problem calling my function recursively
2013-03-29 08:24:43	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-29 08:26:15	shachaf	[] is a (singly-)linked list, so yes, it's O(n) (in fact, it's exactly n).
2013-03-29 08:26:45	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 08:27:02	dudlite	ahh
2013-03-29 08:27:07	dudlite	thanks
2013-03-29 08:28:28	dudlite	sorry, I know so little about this language I am having problems explaining what my problem is lol
2013-03-29 08:28:34	<--	zachk (~root@unaffiliated/zachk) has quit (Ping timeout: 272 seconds)
2013-03-29 08:28:36	dudlite	basicly the type is this
2013-03-29 08:28:38	dudlite	halve :: [a] -> ([a],[a])
2013-03-29 08:28:52	dudlite	which is returning two arbitary lists
2013-03-29 08:29:21	dudlite	arbitrary
2013-03-29 08:29:23	dudlite	oops
2013-03-29 08:29:27	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 08:30:20	<--	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has quit (Ping timeout: 255 seconds)
2013-03-29 08:30:34	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 08:31:08	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 258 seconds)
2013-03-29 08:31:13	dudlite	i ne
2013-03-29 08:31:14	dudlite	.0
2013-03-29 08:31:20	<--	dudlite (~dudlite@121.99.141.118) has quit (Quit: irc2go)
2013-03-29 08:31:53	shachaf	I see.
2013-03-29 08:32:30	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 246 seconds)
2013-03-29 08:34:37	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-29 08:35:55	yezariaely	I want to use mapM f someList  where someList :: [(a,b)] and now I want f to replace the second element of the tuple with something that comes from state. Right now I have f (xi,_) = getNext >>= \v -> return (xi,v)  with getNext returning something from state. Can't I abbreviate this with second and liftM somehow?
2013-03-29 08:36:09	yezariaely	(second from Control.Arrow)
2013-03-29 08:37:35	-->	thirty2k (~thirty2k@c-69-181-0-132.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 08:37:40	yezariaely	the approach second getNext obviously does not work as this leaves the monadic context.
2013-03-29 08:37:59	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 255 seconds)
2013-03-29 08:39:12	 *	hackagebot certificate 1.3.6 - Certificates and Key Reader/Writer  http://hackage.haskell.org/package/certificate-1.3.6 (VincentHanquez)
2013-03-29 08:39:15	 *	hackagebot case-insensitive 1.0.0.1 - Case insensitive string comparison  http://hackage.haskell.org/package/case-insensitive-1.0.0.1 (BasVanDijk)
2013-03-29 08:40:32	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Read error: Connection reset by peer)
2013-03-29 08:40:42	supki	@pl getNext >>= \v -> return (xi,v)
2013-03-29 08:40:42	lambdabot	(,) xi `fmap` getNext
2013-03-29 08:41:35	yezariaely	hmm. How does this know, that it works only on the second component?
2013-03-29 08:41:41	yezariaely	@ty (,)
2013-03-29 08:41:42	lambdabot	a -> b -> (a, b)
2013-03-29 08:42:21	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-03-29 08:42:33	-->	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has joined #haskell
2013-03-29 08:42:49	-->	dmead (~dan@c-24-127-133-203.hsd1.pa.comcast.net) has joined #haskell
2013-03-29 08:42:53	dmead	!!!
2013-03-29 08:43:34	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-29 08:43:43	supki	yezariaely:   m >>= \x -> return (f x)  =   fmap f m
2013-03-29 08:43:49	supki	@pl m >>= \x -> return (f x)
2013-03-29 08:43:49	lambdabot	f `fmap` m
2013-03-29 08:44:07	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-29 08:44:58	yezariaely	supki: I see, thanks
2013-03-29 08:45:30	aavogt	:t \f -> uncurry ((. return) . ap ) . first (liftM zip . mapM f) . unzip
2013-03-29 08:45:31	lambdabot	Monad m => (a1 -> m a) -> [(a1, b)] -> m [(a, b)]
2013-03-29 08:46:00	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 08:46:06	-->	emilie (~Allie@c-65-96-244-250.hsd1.nh.comcast.net) has joined #haskell
2013-03-29 08:46:07	yezariaely	@pl \(xi,_) -> (,) xi `fmap` getNext
2013-03-29 08:46:07	lambdabot	(`fmap` getNext) . (,) . fst
2013-03-29 08:47:26	yezariaely	can't this be somehow shortened using Control.Arrow.second ?
2013-03-29 08:47:36	yezariaely	I don't like the (,) . fst part
2013-03-29 08:48:09	shachaf	The . fst part seems OK.
2013-03-29 08:48:18	shachaf	You're explicitly ignoring the second half of the tuple.
2013-03-29 08:49:12	 *	hackagebot packer 0.1.0 - Fast byte serializer and unserializer  http://hackage.haskell.org/package/packer-0.1.0 (VincentHanquez)
2013-03-29 08:49:42	yezariaely	ah yes, now it gets clearer. use the first part as-is and for the second do ...
2013-03-29 08:49:43	<--	thirty2k (~thirty2k@c-69-181-0-132.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 08:50:09	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has quit (Quit: roshan)
2013-03-29 08:50:11	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 08:50:14	shachaf	By the way, not everything has to be point-free.
2013-03-29 08:50:25	yezariaely	hehe I know ;)
2013-03-29 08:50:27	-->	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has joined #haskell
2013-03-29 08:51:01	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-29 08:51:16	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-29 08:51:24	yezariaely	I just want to get a feeling for what part should be written in point-free style and what not. Thus I try to write everything pf and then see what is ugly.
2013-03-29 08:51:25	--	emilie is now known as Cirno
2013-03-29 08:51:27	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-29 08:51:34	<--	Cirno (~Allie@c-65-96-244-250.hsd1.nh.comcast.net) has left #haskell ("Textual IRC Client: http://www.textualapp.com/")
2013-03-29 08:51:36	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 08:51:57	shachaf	Good approach.
2013-03-29 08:51:59	mjrosenb	is it just me or is http://www.haskell.org/haskellwiki/X_window_programming_in_Haskell#Drawing_in_windows seriously lacking in the indentation department?
2013-03-29 08:53:14	shachaf	mjrosenb: You don't like one-space indentation?
2013-03-29 08:53:24	shachaf	Oh, hmm.
2013-03-29 08:53:29	shachaf	Yes, it looks lacking.
2013-03-29 08:53:33	shachaf	I wonder whether it parses.
2013-03-29 08:54:28	<--	LAMMJohnson (~ja@user-5af434fc.broadband.tesco.net) has quit (Remote host closed the connection)
2013-03-29 08:54:54	<--	YayMe (~user@c-24-8-61-183.hsd1.co.comcast.net) has quit (Ping timeout: 258 seconds)
2013-03-29 08:55:00	mjrosenb	shachaf: it does not.
2013-03-29 08:55:07	mjrosenb	X2.hs:10:2: parse error on input `let'
2013-03-29 08:55:08	-->	fosky (~fosky@ppp118-209-96-150.lns20.mel4.internode.on.net) has joined #haskell
2013-03-29 08:55:54	mjrosenb	oh my, every example on that page is just like it
2013-03-29 08:56:28	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-29 08:56:36	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Ping timeout: 264 seconds)
2013-03-29 08:57:20	shachaf	Wait, which example is that?
2013-03-29 08:57:43	-->	Taneb (~nathan@host-92-30-195-9.as13285.net) has joined #haskell
2013-03-29 08:58:02	shachaf	"We can now rewrite our initial code using the new function now."?
2013-03-29 08:58:12	mjrosenb	"We can now rewrite our example using this new approach: "
2013-03-29 08:58:14	mjrosenb	I believe.
2013-03-29 08:58:14	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-03-29 08:58:36	shachaf	Er, right, I was looking at an old version of the page.
2013-03-29 08:58:44	mjrosenb	yeah, that must be it.
2013-03-29 08:58:52	shachaf	Or not.
2013-03-29 08:58:53	<--	hamid (~nithp@unaffiliated/hamid) has quit (Read error: Operation timed out)
2013-03-29 08:58:57	shachaf	Yes, that's messed up.
2013-03-29 08:59:10	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-03-29 08:59:34	<--	MnO2 (~MnO2@nat/yahoo/x-qulzqixrrvdppfwb) has quit (Quit: MnO2)
2013-03-29 09:00:12	<--	bytbox (~s@srl.student.umd.edu) has quit (Ping timeout: 246 seconds)
2013-03-29 09:00:13	<--	rohitkav (~rohitkav@122.167.9.72) has quit (Ping timeout: 264 seconds)
2013-03-29 09:00:32	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-03-29 09:01:03	-->	thirty2k (~thirty2k@173.252.71.189) has joined #haskell
2013-03-29 09:01:10	<--	thirty2k (~thirty2k@173.252.71.189) has left #haskell
2013-03-29 09:01:15	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has left #haskell ("Leaving")
2013-03-29 09:02:12	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-29 09:02:21	mjrosenb	I like how 5 of the last 7 or so changes are "fix the formatting"
2013-03-29 09:02:59	mjrosenb	ugh.
2013-03-29 09:03:12	<--	Shin-LaC (~LaC@68.65.81.227) has quit (Ping timeout: 264 seconds)
2013-03-29 09:03:24	mjrosenb	it seems like the easiest solution is "pull in gtk even though I only want to blat cairo to the screen.
2013-03-29 09:03:26	mjrosenb	"
2013-03-29 09:04:10	-->	emilie (~emilie@c-65-96-244-250.hsd1.nh.comcast.net) has joined #haskell
2013-03-29 09:04:16	-->	ArthurVard (~androirc@46.162.246.71) has joined #haskell
2013-03-29 09:04:20	shachaf	Sounds like the sort of thing that happens.
2013-03-29 09:04:28	mjrosenb	:(
2013-03-29 09:05:16	shachaf	Don't hate Gtk. Hate the universe.
2013-03-29 09:06:06	mjrosenb	shachaf: I don't see any reason to not hate both
2013-03-29 09:06:15	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Quit: Leaving)
2013-03-29 09:06:18	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-03-29 09:06:19	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 260 seconds)
2013-03-29 09:06:21	mjrosenb	as well as triple negations.
2013-03-29 09:06:42	shachaf	That was only double.
2013-03-29 09:06:57	mjrosenb	shachaf: so?
2013-03-29 09:07:07	shachaf	So constructivists are still fine with it.
2013-03-29 09:07:16	shachaf	You have to get to triple negations to annoy them.
2013-03-29 09:07:38	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-03-29 09:08:55	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-03-29 09:10:10	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-29 09:10:38	yezariaely	When I use smart constructors to ensure that some constraints are met within my data constructors I don't want to export the normal data ctor. Can I somehow pattern match on the ctor outside, then?
2013-03-29 09:10:38	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-29 09:10:38	circle	how do I make a function return any number type?
2013-03-29 09:10:41	circle	Is it Num a => ?
2013-03-29 09:10:54	shachaf	yezariaely: Not if you don't export it.
2013-03-29 09:10:56	yezariaely	circle: f :: Num a -> b -> a
2013-03-29 09:11:01	-->	Itkovian (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-03-29 09:11:05	-->	MnO2 (~MnO2@nat/yahoo/x-lusvtpkcsmoraoiq) has joined #haskell
2013-03-29 09:11:06	yezariaely	circle: sorry, typo f :: Num a => b -> a
2013-03-29 09:11:13	shachaf	circle: It depends on what you're doing.
2013-03-29 09:11:35	circle	finding the sum of a list, just an exercise. I could be lazy and use double or something but technically the sum could be any rational.
2013-03-29 09:11:53	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 240 seconds)
2013-03-29 09:12:04	shachaf	Rational numbers isn't the same thing as any numbers!
2013-03-29 09:12:24	circle	a computer can't store an irrational number
2013-03-29 09:12:32	shachaf	Anyway, how about this: Write the function without giving it a type signature. Then ask ghci for its type.
2013-03-29 09:12:35	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-29 09:12:39	shachaf	Sure a computer can store an irrational number.
2013-03-29 09:12:45	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-29 09:13:02	shachaf	It can also store compex numbers and other things.
2013-03-29 09:13:24	circle	shut up man
2013-03-29 09:13:31	-->	bondar (~rukugu@41.72.193.86) has joined #haskell
2013-03-29 09:13:38	shachaf	?
2013-03-29 09:13:38	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 09:13:43	circle	sorry, I take that back.
2013-03-29 09:13:43	shachaf	Oh well. Have fun.
2013-03-29 09:14:36	<--	Feuerbach (~feuerbach@80.90.233.58) has quit (Ping timeout: 264 seconds)
2013-03-29 09:15:23	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-29 09:15:33	yezariaely	shachaf: any other possibility to restrict a data constructor's range but maintain pattern matching capabilities?
2013-03-29 09:16:00	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-29 09:16:11	yezariaely	I thought about a phantom type which can be instantiated in the module only?
2013-03-29 09:16:17	yezariaely	would this be possible?
2013-03-29 09:16:25	shachaf	yezariaely: There are view patterns...
2013-03-29 09:16:35	shachaf	It depends on what you're doing.
2013-03-29 09:16:39	<--	sw2wolf (~czsq888@222.209.240.64) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 09:16:42	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-29 09:17:32	yezariaely	ah view patterns locks like a solution for the problem.
2013-03-29 09:17:43	shachaf	Only sort of a solution.
2013-03-29 09:18:13	<--	eff (~quassel@114.250.88.108) has quit (Ping timeout: 264 seconds)
2013-03-29 09:18:20	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-29 09:18:22	yezariaely	I have data Exp = Var String | ... and I want to ensure that String is always upper case.
2013-03-29 09:18:30	--	stelleg is now known as stelleg_away
2013-03-29 09:18:36	yezariaely	so I thought smart ctor is applicable.
2013-03-29 09:18:42	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 09:18:51	yezariaely	though then I don't export Var and can't pattern match.
2013-03-29 09:19:00	-->	phischu (~pschuster@p4FD3093B.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 09:19:23	shachaf	You can make a "newtype UppercaseString" and have that be the smart constructor.
2013-03-29 09:19:41	shachaf	Then you can export Var.
2013-03-29 09:19:59	shachaf	Or you can parameterize Exp on the identifier type and move the problem elsewhere. :-)
2013-03-29 09:20:06	--	stelleg_away is now known as stelleg
2013-03-29 09:20:22	yezariaely	so, I basically hide the information that it is a string.
2013-03-29 09:20:32	yezariaely	hmm I see.
2013-03-29 09:20:34	<--	nouitfvf (~brain@unaffiliated/nouitfvf) has quit (Ping timeout: 240 seconds)
2013-03-29 09:20:35	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Remote host closed the connection)
2013-03-29 09:20:44	yezariaely	moving elsewhere is a nice approach ;)
2013-03-29 09:21:18	<--	MnO2 (~MnO2@nat/yahoo/x-lusvtpkcsmoraoiq) has quit (Quit: MnO2)
2013-03-29 09:21:35	shachaf	Sometimes if you move a problem around enough it stops being a problem.
2013-03-29 09:21:48	shachaf	At least that's what I'm hoping will happen. Any day now...
2013-03-29 09:22:17	yezariaely	though moving the problem from one stack on your desk to the other isn't helping ... ;)
2013-03-29 09:23:53	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 255 seconds)
2013-03-29 09:24:49	-->	MnO2 (~MnO2@nat/yahoo/x-yxchscekyjwocboq) has joined #haskell
2013-03-29 09:27:03	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-29 09:27:05	<--	syoon_ (~syoon@50.40.126.63) has quit (Quit: Lost terminal)
2013-03-29 09:27:05	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 09:29:05	<--	hajimeho_ (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-29 09:30:10	<--	bondar (~rukugu@41.72.193.86) has quit
2013-03-29 09:31:31	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 260 seconds)
2013-03-29 09:32:13	mjrosenb	    Could not find module `Time'
2013-03-29 09:32:13	mjrosenb	    It is a member of the hidden package `haskell98-2.0.0.1'.
2013-03-29 09:32:29	mjrosenb	what should I be importing now, rather than 'time'?
2013-03-29 09:32:36	shachaf	Data.Time?
2013-03-29 09:34:41	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 255 seconds)
2013-03-29 09:34:47	-->	cyril_ (~cyril@79.140.209.79) has joined #haskell
2013-03-29 09:35:01	mjrosenb	Canvas.hs:3:34: Module `Graphics.UI.Gtk' does not export `fill'
2013-03-29 09:35:01	mjrosenb	Canvas.hs:3:51: Module `Graphics.UI.Gtk' does not export `lineWidth'
2013-03-29 09:35:03	mjrosenb	great.
2013-03-29 09:35:22	 *	mjrosenb will deal with this bs in the morning.
2013-03-29 09:35:51	shachaf	Graphics.UI.Gtk.Gdk.GC?
2013-03-29 09:36:20	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 272 seconds)
2013-03-29 09:36:42	augur	are there any hypergraph packages for haskell?
2013-03-29 09:37:04	--	bcoppens is now known as bcoppens_
2013-03-29 09:37:27	augur	hmm. seems there is one
2013-03-29 09:38:09	mjrosenb	shachaf: joke's on you!
2013-03-29 09:38:29	mjrosenb	shachaf: that was in a hiding declaration, so it doesn't matter if it is missing!
2013-03-29 09:39:13	shachaf	?
2013-03-29 09:39:19	shachaf	You mean you imported hiding those things?
2013-03-29 09:39:24	mjrosenb	  import Graphics.UI.Gtk hiding (fill,drawPolygon,lineWidth)
2013-03-29 09:39:26	mjrosenb	yeah.
2013-03-29 09:39:32	shachaf	Good joke.
2013-03-29 09:39:39	mjrosenb	i'm just copying and pasting examples from the web
2013-03-29 09:39:41	shachaf	Anyway, hayoo++ for finding it.
2013-03-29 09:39:50	mjrosenb	trying to find something recent enough that it compiles
2013-03-29 09:40:00	-->	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has joined #haskell
2013-03-29 09:40:14	mjrosenb	because gtk/X/cairo documentation is kinda annoying to read.
2013-03-29 09:40:17	-->	Gonzih (~gonzih@37.212.214.110) has joined #haskell
2013-03-29 09:40:42	-->	JohnBat26 (~Eugene@89.175.77.161) has joined #haskell
2013-03-29 09:42:15	<--	ozgura (~ozgura@host-2-96-30-184.as13285.net) has quit (Remote host closed the connection)
2013-03-29 09:42:30	-->	trescenzi (~trescenzi@148.100.72.120) has joined #haskell
2013-03-29 09:42:46	-->	cyril__ (cyril@nat/intel/x-ucrqwzwwcwqqpjdr) has joined #haskell
2013-03-29 09:43:20	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-29 09:44:40	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-29 09:44:49	dEPY	erm
2013-03-29 09:45:06	dEPY	is there any way to convert strings like "*", "+" to the functions?
2013-03-29 09:45:25	dEPY	so I could take parameter named: op     and to  (op) arg1 arg2 ?
2013-03-29 09:45:38	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-03-29 09:45:59	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 260 seconds)
2013-03-29 09:46:50	<--	chatsiri1 (~chatsiri_@171.7.58.25) has quit (Ping timeout: 255 seconds)
2013-03-29 09:47:01	-->	ykm (~ykm@124.155.255.244) has joined #haskell
2013-03-29 09:47:05	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-29 09:47:08	<--	trescenzi (~trescenzi@148.100.72.120) has quit (Ping timeout: 257 seconds)
2013-03-29 09:47:14	<--	juxovec (~juxovec@88.103.13.78) has quit (Remote host closed the connection)
2013-03-29 09:48:04	-->	chatsiri_ (~chatsiri_@171.7.58.25) has joined #haskell
2013-03-29 09:48:18	dEPY	on the other hand it's not the best idea ever...
2013-03-29 09:49:10	-->	nexx (~SPS-User@dslb-188-096-171-242.pools.arcor-ip.net) has joined #haskell
2013-03-29 09:51:51	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Remote host closed the connection)
2013-03-29 09:51:58	-->	kartoffelbrei (~kartoffel@p5496255B.dip.t-dialin.net) has joined #haskell
2013-03-29 09:52:03	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 260 seconds)
2013-03-29 09:52:05	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 09:52:12	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Ping timeout: 252 seconds)
2013-03-29 09:53:18	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 09:53:36	-->	eff (~quassel@111.197.232.181) has joined #haskell
2013-03-29 09:54:01	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 09:54:19	-->	rohitkav (~rohitkav@122.167.9.72) has joined #haskell
2013-03-29 09:54:24	<--	emilie (~emilie@c-65-96-244-250.hsd1.nh.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 09:55:03	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-03-29 09:55:31	--	stelleg is now known as stelleg_away
2013-03-29 09:55:35	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 09:56:48	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-03-29 09:56:57	-->	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 09:57:29	-->	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has joined #haskell
2013-03-29 09:58:22	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-03-29 09:58:39	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 09:59:48	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-29 10:00:07	notdan	@pf (\_ -> f)
2013-03-29 10:00:07	lambdabot	Maybe you meant: bf pl
2013-03-29 10:00:12	notdan	@pl (\_ -> f)
2013-03-29 10:00:12	lambdabot	const f
2013-03-29 10:01:08	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 256 seconds)
2013-03-29 10:02:02	--	bcoppens_ is now known as bcoppens
2013-03-29 10:02:35	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 255 seconds)
2013-03-29 10:02:54	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-29 10:03:01	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 256 seconds)
2013-03-29 10:03:12	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 10:03:14	hamid_	> bf pl
2013-03-29 10:03:16	lambdabot	  Not in scope: `bf'
2013-03-29 10:03:16	lambdabot	 Perhaps you meant one of these:
2013-03-29 10:03:16	lambdabot	   `b' (imported from D...
2013-03-29 10:04:23	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-29 10:04:50	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 255 seconds)
2013-03-29 10:05:51	-->	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 10:05:51	<--	ramkrsna (~ramkrsna@c-71-198-45-0.hsd1.ca.comcast.net) has quit (Changing host)
2013-03-29 10:05:51	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-29 10:05:53	--	pepijn_away is now known as pepijndevos
2013-03-29 10:06:01	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has quit (Remote host closed the connection)
2013-03-29 10:06:08	-->	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-29 10:07:14	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-29 10:07:43	<--	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 10:08:17	-->	jdnavarro (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has joined #haskell
2013-03-29 10:08:26	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 255 seconds)
2013-03-29 10:08:29	-->	tanakh_ (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has joined #haskell
2013-03-29 10:08:56	<--	phischu (~pschuster@p4FD3093B.dip0.t-ipconnect.de) has left #haskell
2013-03-29 10:09:27	<--	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-03-29 10:11:03	-->	stat_vi (~stat@dslb-094-218-237-228.pools.arcor-ip.net) has joined #haskell
2013-03-29 10:11:24	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-29 10:11:29	-->	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 10:11:46	<--	MnO2 (~MnO2@nat/yahoo/x-yxchscekyjwocboq) has quit (Quit: MnO2)
2013-03-29 10:12:06	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-29 10:12:17	-->	kvey (~kvey@cpepool1gcmts2-212.sanbrunocable.com) has joined #haskell
2013-03-29 10:13:07	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 10:13:52	<--	cyril__ (cyril@nat/intel/x-ucrqwzwwcwqqpjdr) has quit (Ping timeout: 258 seconds)
2013-03-29 10:14:57	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-29 10:15:28	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 10:16:20	yezariaely	@pl get >>= \s -> return $ TVar (show s)
2013-03-29 10:16:20	lambdabot	(TVar . show) `fmap` get
2013-03-29 10:16:44	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-29 10:17:15	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 260 seconds)
2013-03-29 10:17:28	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-29 10:17:34	yezariaely	is there a function for a state monad which returns current state and applys a function on the state? I currently do a modify f >> get.
2013-03-29 10:17:49	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 10:17:51	yezariaely	order doesn't really matter for me.
2013-03-29 10:17:59	-->	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-03-29 10:18:01	yezariaely	so, applying f after getting is fine, too.
2013-03-29 10:18:16	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 10:18:30	-->	MnO2 (~MnO2@nat/yahoo/x-iwcecgbeppzwlvdq) has joined #haskell
2013-03-29 10:18:37	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 10:18:38	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-03-29 10:19:06	augur	@pl get >>= \s -> return $ f s
2013-03-29 10:19:07	lambdabot	f `fmap` get
2013-03-29 10:19:08	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-03-29 10:19:40	augur	yezariaely: unless you want to apply f to the state, rather than return that value
2013-03-29 10:19:56	yezariaely	augur:  I want to apply it to the state.
2013-03-29 10:20:02	augur	@pl get >>= \s -> put $ f s
2013-03-29 10:20:02	lambdabot	put . f =<< get
2013-03-29 10:20:11	augur	@pl modify f >> get
2013-03-29 10:20:11	lambdabot	modify f >> get
2013-03-29 10:20:15	augur	:|
2013-03-29 10:20:27	augur	@def modify
2013-03-29 10:20:27	lambdabot	Maybe you meant: bf do let
2013-03-29 10:20:32	augur	@define modify
2013-03-29 10:20:36	augur	@src modify
2013-03-29 10:20:37	lambdabot	Source not found. My mind is going. I can feel it.
2013-03-29 10:20:39	augur	:(
2013-03-29 10:20:44	yezariaely	well... ;)
2013-03-29 10:21:02	augur	well anyway, modify f >> get will apply f to the state and also return the result, i think
2013-03-29 10:21:06	-->	lennart__ (~lennart@kiel-4d0666b3.pool.mediaWays.net) has joined #haskell
2013-03-29 10:21:13	augur	if all you want to do is apply f to the state, obviously you just want modify f
2013-03-29 10:21:23	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 10:21:29	augur	if you want to leave the state alone but return f of the state, then get >>= put . f
2013-03-29 10:21:37	yezariaely	sure, I want both. I am fine with modify and get, just wondered if there is a shorter one.
2013-03-29 10:21:48	augur	shorter one for which tho
2013-03-29 10:21:53	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 10:21:54	augur	i mean, probably not, but
2013-03-29 10:22:27	yezariaely	applying a function f to the current state AND returning the value of the state (either before, or after applying f doesn't matter)
2013-03-29 10:22:40	dEPY	any1 can tell me why my RPN calculator can do "1 2 +" but not "1 2 3 +", says parse error:  http://hpaste.org/84808
2013-03-29 10:23:13	augur	oh. then probably no. but if you dont like writing things like that, you can just write your own little function!
2013-03-29 10:23:26	<--	ramkrsna (~ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 246 seconds)
2013-03-29 10:23:29	augur	> let putModify f = put . f =<< get
2013-03-29 10:23:31	lambdabot	  not an expression: `let putModify f = put . f =<< get'
2013-03-29 10:23:33	augur	:|
2013-03-29 10:23:38	augur	@let putModify f = put . f =<< get
2013-03-29 10:23:40	lambdabot	 Defined.
2013-03-29 10:23:47	augur	@pl putModify f
2013-03-29 10:23:47	lambdabot	putModify f
2013-03-29 10:23:47	yezariaely	augur: Just beeing curious I like the version modify f >> get
2013-03-29 10:24:15	augur	yezariaely: if youre writing with do notation (you should) youll just write   do modify f ; get
2013-03-29 10:24:17	augur	er
2013-03-29 10:24:21	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-29 10:24:26	augur	do modify f ; s <- get
2013-03-29 10:24:31	augur	then the rest of your stuff
2013-03-29 10:24:52	yezariaely	currently it is:  getNext = modify (+1) >> (TVar . show) `fmap` get
2013-03-29 10:25:03	yezariaely	which seems to be fine without 'do'
2013-03-29 10:26:29	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 248 seconds)
2013-03-29 10:26:46	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-29 10:26:56	yezariaely	or should I rather use 'do' in this one liner?
2013-03-29 10:27:03	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-29 10:27:04	augur	blegh. i dont like it
2013-03-29 10:27:25	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 10:27:48	augur	getNext = do modify (+1) ; s <- get ; return $ TVar $ show s
2013-03-29 10:27:50	augur	but thats just me :)
2013-03-29 10:27:54	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-03-29 10:28:47	yezariaely	augur: Just compare the two versions and I agree with you. The do-version is cleaner.
2013-03-29 10:28:51	augur	or at least   getNext = modify (+1) >> return . TVar . show =<< get
2013-03-29 10:28:53	yezariaely	+d
2013-03-29 10:29:18	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-29 10:29:30	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 10:29:37	augur	i think the do is cleanest
2013-03-29 10:29:51	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 260 seconds)
2013-03-29 10:30:52	augur	return $ TVar (show s) might look even nicer. using $ after the return but treating the rest like normal function application creates a nice visual separation between the monadic and non-monadic parts
2013-03-29 10:31:14	yezariaely	in fact this is what I just coded ;)
2013-03-29 10:31:31	kartoffelbrei	dEPY: to see whats going on you should use Debug.Trace
2013-03-29 10:31:33	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 240 seconds)
2013-03-29 10:31:43	-->	BigTom (~bigtom@225.91-246-213.ippool.namesco.net) has joined #haskell
2013-03-29 10:31:55	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 256 seconds)
2013-03-29 10:32:00	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 264 seconds)
2013-03-29 10:32:25	<--	Nahra (~user@unaffiliated/nahra) has quit (Remote host closed the connection)
2013-03-29 10:32:48	-->	Nahra (~user@unaffiliated/nahra) has joined #haskell
2013-03-29 10:33:08	-->	phischu (~pschuster@p4FD3093B.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 10:33:11	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 255 seconds)
2013-03-29 10:33:21	kartoffelbrei	i for one like to define a helper function "traceIt :: Show a => a; traceIt x = trace (show x) x". the replace the "read" with "(read . traceIt)" to see the arguments it will get.
2013-03-29 10:33:48	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 258 seconds)
2013-03-29 10:34:11	kartoffelbrei	s/the replace/then replace/
2013-03-29 10:35:12	kartoffelbrei	the traceIt function simply takes the argument, prints it and returns it again. it's useful for quick and dirty debugging.
2013-03-29 10:35:14	dEPY	then the whole thing will return a Show :S
2013-03-29 10:35:23	dEPY	no?
2013-03-29 10:35:28	kartoffelbrei	try it.
2013-03-29 10:36:05	dEPY	Could not deduce (Show (String -> String))
2013-03-29 10:36:27	kartoffelbrei	traceIt doesn't do anything. the argument to read is always a string, which is a "Show a => a".
2013-03-29 10:38:22	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-03-29 10:38:24	dEPY	It says there's problem with traceIt itself
2013-03-29 10:38:48	hpaste	kartoffelbrei pasted “heres what i did” at http://hpaste.org/84809
2013-03-29 10:39:12	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-29 10:39:16	dEPY	u fogot the one -> a   the first time :)
2013-03-29 10:39:24	dEPY	ok now
2013-03-29 10:39:28	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-29 10:39:47	kartoffelbrei	oh sorry, my bad.
2013-03-29 10:39:53	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 10:39:59	dEPY	np
2013-03-29 10:40:05	dEPY	cool little function btw :)
2013-03-29 10:41:26	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-03-29 10:42:37	<--	rohitkav (~rohitkav@122.167.9.72) has quit (Ping timeout: 258 seconds)
2013-03-29 10:43:24	-->	qzr_ (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 10:45:06	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-29 10:45:30	<--	qzr_ (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-03-29 10:45:39	-->	ulfdoz (~mary@p5B38AEAB.dip.t-dialin.net) has joined #haskell
2013-03-29 10:45:51	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 10:46:09	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 10:47:30	dEPY	kartoffelbrei: I still have no idea what's wrong with it. If I give it "1 1 +" it works fine, and first two reads are "1" and "1" but If I give it "1 1 1 +" first read is "+" somehow and it fails :S
2013-03-29 10:48:14	-->	mr- (~martin@rgnb-5d8625b7.pool.mediaWays.net) has joined #haskell
2013-03-29 10:48:32	hpaste	yezariaely pasted “Code” at http://hpaste.org/84810
2013-03-29 10:48:41	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-29 10:48:50	yezariaely	anyone willingly to look at the just pasted code for improvements in style?
2013-03-29 10:49:11	yezariaely	I'd consider it to be rather ugly, but I am new to haskell.
2013-03-29 10:50:06	dEPY	I'm also new, but, you got to split that big chunk into smaller functions
2013-03-29 10:50:40	-->	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has joined #haskell
2013-03-29 10:51:19	<--	VZakharov (~vovka@placenta.corbina.net) has quit (Quit: Leaving)
2013-03-29 10:51:35	dEPY	any1 else willing to look at my rpn calculator and tell my why is it failing to process "1 1 1 +" but works fine with "1 1 +" :S  http://hpaste.org/84811 ?
2013-03-29 10:52:13	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-29 10:54:36	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 256 seconds)
2013-03-29 10:54:56	-->	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 10:55:13	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-03-29 10:55:15	<--	sopvop (~lonokhov@213.170.88.44) has quit (Read error: Connection reset by peer)
2013-03-29 10:55:51	-->	rohitkav (~rohitkav@122.167.9.73) has joined #haskell
2013-03-29 10:56:09	<--	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-03-29 10:57:01	<--	mkouhei (~maeda_koh@124x35x68x250.ap124.ftth.ucom.ne.jp) has left #haskell
2013-03-29 10:57:03	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-29 10:57:16	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-03-29 10:58:09	-->	k00mi_ (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has joined #haskell
2013-03-29 10:58:37	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 10:59:13	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 10:59:16	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 10:59:54	<--	VZakharov (~vovka@placenta.corbina.net) has quit (Remote host closed the connection)
2013-03-29 11:00:01	hpaste	kartoffelbrei pasted “just added more traces” at http://hpaste.org/84812
2013-03-29 11:00:22	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-03-29 11:00:47	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-03-29 11:01:20	yezariaely	dEPY: so what do you expect it should do? "1 1 1 +" ?
2013-03-29 11:01:49	-->	Thomyho3 (~thomyho@mnhm-4d012b63.pool.mediaWays.net) has joined #haskell
2013-03-29 11:01:57	yezariaely	"1 1 + 1 +" would be fine in my opinion?
2013-03-29 11:02:00	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 264 seconds)
2013-03-29 11:02:07	yezariaely	but this term is not well-defined in upn
2013-03-29 11:02:09	-->	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-29 11:02:23	yezariaely	+ is binary not ternary
2013-03-29 11:02:32	<--	VZakharov (~vovka@placenta.corbina.net) has quit (Remote host closed the connection)
2013-03-29 11:02:54	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 11:02:57	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-03-29 11:03:00	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Remote host closed the connection)
2013-03-29 11:03:05	kartoffelbrei	he expects it to put the result "2" on the stack and then do "2" + "1"
2013-03-29 11:03:13	<--	MnO2 (~MnO2@nat/yahoo/x-iwcecgbeppzwlvdq) has quit (Quit: MnO2)
2013-03-29 11:03:26	yezariaely	but why?
2013-03-29 11:03:39	-->	SoupE (~jloos@f054173099.adsl.alicedsl.de) has joined #haskell
2013-03-29 11:03:40	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 246 seconds)
2013-03-29 11:03:48	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-03-29 11:03:56	yezariaely	if he expects two additions, then there must be two additions.
2013-03-29 11:04:01	yezariaely	there is only one.
2013-03-29 11:04:07	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-29 11:04:30	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-29 11:04:32	-->	nooodl (~nooodl@91.179.149.218) has joined #haskell
2013-03-29 11:04:42	yezariaely	the RPN seems to be perfectly fine. It is the input that is wrong
2013-03-29 11:05:13	-->	end3rW (~end3rW@lak-116-192.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-03-29 11:05:50	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-29 11:06:07	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 246 seconds)
2013-03-29 11:06:09	-->	MnO2 (~MnO2@nat/yahoo/x-ldsgrqssfqdfdrki) has joined #haskell
2013-03-29 11:06:20	<--	McManiaC_ (~mcmaniac@nils.cc) has quit (Read error: Connection reset by peer)
2013-03-29 11:06:54	<--	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has quit (Quit: Must not waste too much time here...)
2013-03-29 11:07:06	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-03-29 11:07:24	<--	SoupEvil (~jloos@e177150145.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-03-29 11:07:36	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 11:08:19	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Client Quit)
2013-03-29 11:08:33	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2013-03-29 11:08:41	kartoffelbrei	it is. i should have seen that. i feel stupid. i need coffee.
2013-03-29 11:08:53	-->	madjestic (~madjestic@178.230.64.56) has joined #haskell
2013-03-29 11:09:21	<--	phischu (~pschuster@p4FD3093B.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-29 11:10:58	-->	ajnsit (~aj@182.64.72.107) has joined #haskell
2013-03-29 11:11:38	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 11:11:48	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-03-29 11:13:07	-->	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has joined #haskell
2013-03-29 11:13:18	-->	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has joined #haskell
2013-03-29 11:13:23	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Read error: Operation timed out)
2013-03-29 11:13:34	<--	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has quit (Remote host closed the connection)
2013-03-29 11:14:11	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 260 seconds)
2013-03-29 11:14:51	-->	astropirate (~astropira@pool-173-66-67-143.washdc.fios.verizon.net) has joined #haskell
2013-03-29 11:14:51	<--	astropirate (~astropira@pool-173-66-67-143.washdc.fios.verizon.net) has quit (Changing host)
2013-03-29 11:14:51	-->	astropirate (~astropira@unaffiliated/astropirate) has joined #haskell
2013-03-29 11:14:58	-->	leoncamel1 (~leoncamel@1.202.5.29) has joined #haskell
2013-03-29 11:17:04	-->	Flame_Alchemist_ (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 11:17:04	<--	leoncamel (~leoncamel@124.126.218.38) has quit (Ping timeout: 245 seconds)
2013-03-29 11:18:03	-->	RottenMuffin (~AndChat16@37.212.214.110) has joined #haskell
2013-03-29 11:18:17	<--	rohitkav (~rohitkav@122.167.9.73) has quit (Read error: Connection reset by peer)
2013-03-29 11:18:31	<--	Flame_Alchemist (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has quit (Ping timeout: 264 seconds)
2013-03-29 11:18:33	<--	Gonzih (~gonzih@37.212.214.110) has quit (Quit: IRC is just multiplayer vim.)
2013-03-29 11:18:43	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-29 11:19:58	-->	theorbtwo (~theorb@91.84.53.6) has joined #haskell
2013-03-29 11:20:14	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-03-29 11:20:50	<--	adlan (~adlan@115.85.128.54) has quit (Quit: Leaving)
2013-03-29 11:21:09	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 11:21:27	<--	ajnsit (~aj@182.64.72.107) has left #haskell ("lunch!")
2013-03-29 11:21:39	-->	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has joined #haskell
2013-03-29 11:22:20	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-03-29 11:22:59	--	bcoppens is now known as bcoppens_
2013-03-29 11:24:54	<--	Flame_Alchemist_ (~Flame_Alc@host21-99-dynamic.6-79-r.retail.telecomitalia.it) has quit (Ping timeout: 258 seconds)
2013-03-29 11:25:51	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 11:25:58	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-03-29 11:27:25	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 11:27:46	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 11:28:06	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-29 11:28:36	<--	fosky (~fosky@ppp118-209-96-150.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-29 11:29:29	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-29 11:29:53	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 11:31:41	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Read error: Operation timed out)
2013-03-29 11:32:19	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 264 seconds)
2013-03-29 11:32:39	-->	rohitkav (~rohitkav@122.167.9.121) has joined #haskell
2013-03-29 11:34:14	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-03-29 11:34:23	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 255 seconds)
2013-03-29 11:34:43	<--	OlegYch (~OlegYch@80.249.93.99) has quit (Ping timeout: 260 seconds)
2013-03-29 11:35:07	-->	tuttlem (~IRCUSENAM@CPE-124-186-132-187.lns10.woo.bigpond.net.au) has joined #haskell
2013-03-29 11:35:17	<--	tuttlem (~IRCUSENAM@CPE-124-186-132-187.lns10.woo.bigpond.net.au) has quit (Quit: leaving)
2013-03-29 11:35:18	<--	McManiaC (~mcmaniac@nils.cc) has quit (Read error: Connection reset by peer)
2013-03-29 11:35:36	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 11:35:44	<--	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has quit (Ping timeout: 255 seconds)
2013-03-29 11:37:09	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-29 11:37:37	<--	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has quit (Remote host closed the connection)
2013-03-29 11:38:09	<--	kartoffelbrei (~kartoffel@p5496255B.dip.t-dialin.net) has quit (Quit: Leaving)
2013-03-29 11:38:56	--	k00mi_ is now known as k00mi
2013-03-29 11:40:12	-->	raichoo (~raichoo@i59F6C338.versanet.de) has joined #haskell
2013-03-29 11:41:46	-->	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-29 11:41:47	<--	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has quit (Remote host closed the connection)
2013-03-29 11:42:02	<--	tanakh_ (~tanakh@pc1.gorilla-unet.ocn.ne.jp) has quit (Ping timeout: 258 seconds)
2013-03-29 11:42:36	<--	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has quit (Quit: Must not waste too much time here...)
2013-03-29 11:42:41	-->	trescenzi (~trescenzi@2620:91:0:163:b5e8:3d9e:501a:de98) has joined #haskell
2013-03-29 11:43:07	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 260 seconds)
2013-03-29 11:43:25	-->	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2013-03-29 11:44:28	-->	Argue_ (~Argue@112.209.13.160) has joined #haskell
2013-03-29 11:44:35	<--	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has quit (Read error: Connection reset by peer)
2013-03-29 11:44:35	<--	Heero (~Heero@unaffiliated/heero) has quit (Read error: Connection reset by peer)
2013-03-29 11:44:35	<--	Argue (~Argue@112.209.13.160) has quit (Read error: Connection reset by peer)
2013-03-29 11:44:36	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-29 11:44:36	<--	tdammers (~tobias@unaffiliated/tdammers) has quit (Read error: Connection reset by peer)
2013-03-29 11:44:36	<--	schovi (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-29 11:44:36	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-03-29 11:45:00	<--	cyril_ (~cyril@79.140.209.79) has quit (Quit: WeeChat 0.3.8)
2013-03-29 11:45:32	-->	hrehf (~s@p4FE3B709.dip.t-dialin.net) has joined #haskell
2013-03-29 11:45:41	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-29 11:46:32	<--	Heero (~Heero@unaffiliated/heero) has quit (Read error: Connection reset by peer)
2013-03-29 11:46:59	-->	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has joined #haskell
2013-03-29 11:46:59	<--	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has quit (Changing host)
2013-03-29 11:46:59	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-03-29 11:47:09	<--	skchrko (~sk@130.255.129.64) has quit (Remote host closed the connection)
2013-03-29 11:47:24	<--	trescenzi (~trescenzi@2620:91:0:163:b5e8:3d9e:501a:de98) has quit (Ping timeout: 258 seconds)
2013-03-29 11:47:37	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-03-29 11:48:22	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-29 11:48:48	-->	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has joined #haskell
2013-03-29 11:49:03	-->	tdammers (~tobias@212-182-150-105.ip.telfort.nl) has joined #haskell
2013-03-29 11:49:05	<--	JohnBat26 (~Eugene@89.175.77.161) has quit (Read error: Connection reset by peer)
2013-03-29 11:49:27	--	tdammers is now known as Guest26834
2013-03-29 11:49:54	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-29 11:50:15	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-03-29 11:50:29	-->	NoWhereMan (~NoWhereMa@159.149.42.45) has joined #haskell
2013-03-29 11:51:05	-->	rs234 (~rs234@89.137.4.235) has joined #haskell
2013-03-29 11:51:08	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-03-29 11:51:13	<--	hiratara (~hiratara@g038169.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 240 seconds)
2013-03-29 11:51:34	-->	sonda (~sonda@ppp-181-37.26-151.libero.it) has joined #haskell
2013-03-29 11:52:12	<--	perlite (~perlite@114-36-247-1.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-03-29 11:52:40	-->	perlite (~perlite@114-36-247-1.dynamic.hinet.net) has joined #haskell
2013-03-29 11:52:47	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-29 11:52:56	NoWhereMan	hi all, is it correct to say that the "standard monad laws" described here http://en.wikibooks.org/wiki/Haskell/Category_theory#The_third_and_fourth_laws are the associativity and unity laws in Asperti-Longo (chap.5,p.104) ?
2013-03-29 11:53:14	<--	RottenMuffin (~AndChat16@37.212.214.110) has quit (Read error: Connection reset by peer)
2013-03-29 11:53:17	-->	rtnmfn (~AndChat16@37.212.214.110) has joined #haskell
2013-03-29 11:53:32	NoWhereMan	and if that is correct, what do law 1 and 2 correspond two ?
2013-03-29 11:53:59	<--	TacticalGrace (~chak@101.175.71.191) has quit (Quit: Bye now!)
2013-03-29 11:54:18	bitonic	NoWhereMan: it’s probably useful to reproduce the laws you are talking about here
2013-03-29 11:54:31	<--	arenz (~arenz@HSI-KBW-046-005-062-174.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 264 seconds)
2013-03-29 11:54:54	-->	folone__ (~folone@brln-4db804df.pool.mediaWays.net) has joined #haskell
2013-03-29 11:55:15	bitonic	btw I think that ‘do { let { y = v }; x }  -->  let y = v in do { x }’ is wrong
2013-03-29 11:55:17	<--	DigitalKiwi (~kiwi@ip174-74-81-77.om.om.cox.net) has quit (Remote host closed the connection)
2013-03-29 11:55:17	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-29 11:55:33	-->	DigitalKiwi (~kiwi@ip174-74-81-77.om.om.cox.net) has joined #haskell
2013-03-29 11:55:41	Cale	bitonic: wrong how?
2013-03-29 11:55:49	bitonic	since the ‘do’ let is different with regards to pattern matching.  more like ‘do y <- return v; x’
2013-03-29 11:55:59	Cale	what?
2013-03-29 11:56:05	bitonic	Cale: pattern match failures with do lets will invoke ‘fail’, iirc
2013-03-29 11:56:08	Cale	no
2013-03-29 11:56:13	Cale	They shouldn't
2013-03-29 11:56:34	bitonic	Cale: iirc the only way to get pattern match failures in ‘do’ was ‘case’ but I might be wrong, let’s see
2013-03-29 11:56:50	bitonic	> fail "foo" :: Either String a
2013-03-29 11:56:52	lambdabot	  *Exception: foo
2013-03-29 11:56:56	bitonic	> fail "foo" :: Maybe a
2013-03-29 11:56:58	lambdabot	  Nothing
2013-03-29 11:57:12	<--	sarfraz_ (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2013-03-29 11:57:12	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Ping timeout: 264 seconds)
2013-03-29 11:57:15	bitonic	> do let Just _ = Nothing; return 1 :: Just Int
2013-03-29 11:57:16	lambdabot	  <hint>:1:26:
2013-03-29 11:57:17	lambdabot	     Invalid type signature: return 1 :: Just Int
2013-03-29 11:57:17	lambdabot	     Should ...
2013-03-29 11:57:19	Cale	> do { let { Just x = Nothing } ; x }
2013-03-29 11:57:21	lambdabot	  *Exception: <interactive>:3:12-27: Irrefutable pattern failed for pattern D...
2013-03-29 11:57:31	bitonic	I stand corrected :)
2013-03-29 11:57:33	Cale	> do { let { Just x = Nothing } ; return x } :: Maybe Integer
2013-03-29 11:57:34	<--	snoyberg (~ubuntu@89-139-41-249.bb.netvision.net.il) has quit (Remote host closed the connection)
2013-03-29 11:57:35	<--	Varakh (~Varakh@isp05-defrrd.redacion.de) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-03-29 11:57:35	lambdabot	  Just *Exception: <interactive>:3:12-27: Irrefutable pattern failed for patt...
2013-03-29 11:57:40	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-29 11:57:54	bitonic	> do { Just x <- return Nothing ; x } :: Maybe Integer
2013-03-29 11:57:55	lambdabot	  Nothing
2013-03-29 11:57:57	-->	hiratara (~hiratara@i217114.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-29 11:57:59	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-29 11:58:04	-->	Varakh (~Varakh@isp05-defrrd.redacion.de) has joined #haskell
2013-03-29 11:58:06	NoWhereMan	bitonic, you can find them on page 105 here http://www.ling.ohio-state.edu/~plummer/courses/winter09/ling681/asperti-longo/5Adj.pdf
2013-03-29 11:58:16	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-03-29 11:58:24	<--	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-29 11:58:24	<--	ernst (~ernst@vs251127.vserver.de) has quit (Ping timeout: 264 seconds)
2013-03-29 11:58:24	Cale	NoWhereMan: The "third and fourth laws" on that page just say that return and join are natural transformations
2013-03-29 11:58:40	bitonic	Cale: I can’t remember in which situation the only way to reliably get a failure was ‘case’...
2013-03-29 11:58:43	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-29 11:58:46	-->	ernst (~ernst@vs251127.vserver.de) has joined #haskell
2013-03-29 11:58:49	Cale	NoWhereMan: (they're the naturality squares)
2013-03-29 11:59:00	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 264 seconds)
2013-03-29 11:59:01	<--	skchrko (~sk@130.255.129.64) has quit (Quit: .)
2013-03-29 11:59:34	Cale	bitonic: Well, pattern bindings in let are lazy: you'll only get the exception if you demand the evaluation of the value.
2013-03-29 11:59:53	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 12:00:15	bitonic	Cale: no, it was something else that came up in a discussion here.  mhm
2013-03-29 12:00:33	Cale	> let Nothing = Just 5 in "this will be fine because the pattern Nothing doesn't bind any variables and so the failed match will never be discovered"
2013-03-29 12:00:35	lambdabot	  "this will be fine because the pattern Nothing doesn't bind any variables a...
2013-03-29 12:00:48	<--	Jonno_FTW (~come@9ch.in) has quit (Ping timeout: 264 seconds)
2013-03-29 12:01:10	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-03-29 12:01:36	Peaker	Hard to debug what's keeping some objects alive.. finalizers not running
2013-03-29 12:01:47	bitonic	Cale: yeah, but I remember some strange behaviour with ‘do’ and fail
2013-03-29 12:01:56	bitonic	maybe I imagined it
2013-03-29 12:02:01	-->	quchen (~david@p54AA253F.dip.t-dialin.net) has joined #haskell
2013-03-29 12:02:09	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-03-29 12:02:59	-->	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has joined #haskell
2013-03-29 12:03:39	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-03-29 12:03:43	Saizan	fail is relevant for <-
2013-03-29 12:04:06	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-03-29 12:04:32	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-03-29 12:04:41	hpc	i always liked being able to do that
2013-03-29 12:04:56	-->	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has joined #haskell
2013-03-29 12:06:19	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-29 12:06:27	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-29 12:06:46	bitonic	yeah pattern matches failures with ‘<-’ are nice
2013-03-29 12:06:50	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-03-29 12:07:02	Peaker	what are some good ways to debug a leak, or what's holding some value alive?
2013-03-29 12:07:12	bitonic	boh.  I must be confusing this issue with something else
2013-03-29 12:07:24	Peaker	in Python there's the "gc" module, you can ask it who refers to some value
2013-03-29 12:08:22	-->	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has joined #haskell
2013-03-29 12:08:26	-->	madjestic13 (~madjestic@188.90.184.106) has joined #haskell
2013-03-29 12:08:29	-->	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-03-29 12:08:35	<--	Argue_ (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-03-29 12:08:47	hpc	Peaker: do profiling
2013-03-29 12:08:54	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-03-29 12:09:27	<--	gadjo (~gggg@109.102.72.188) has quit (Quit: Leaving)
2013-03-29 12:09:27	Peaker	it's not a massive leak of many objects, but rather a leak of a few, very large objects
2013-03-29 12:09:34	-->	OlegYch (~OlegYch@86.57.158.170) has joined #haskell
2013-03-29 12:09:43	hpc	even easier :P
2013-03-29 12:09:48	Peaker	I know exactly which objects aren't being freed, but afaik I'm not holding any references to them
2013-03-29 12:09:54	hpc	ah
2013-03-29 12:09:56	Peaker	and GC is running many times, not freeing them
2013-03-29 12:10:09	Peaker	is there a heap drawing thing?
2013-03-29 12:10:12	Peaker	visualizing
2013-03-29 12:10:21	hpc	there is; i forget what it is called
2013-03-29 12:10:52	hpc	something that has bit me in the past is doing something like
2013-03-29 12:10:53	<--	NoWhereMan (~NoWhereMa@159.149.42.45) has quit (Quit: This computer has gone to sleep)
2013-03-29 12:11:07	hpc	loop = do {action; loop; return ()}
2013-03-29 12:11:13	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 240 seconds)
2013-03-29 12:11:20	<--	madjestic (~madjestic@178.230.64.56) has quit (Ping timeout: 252 seconds)
2013-03-29 12:11:31	Peaker	what leaked?
2013-03-29 12:11:38	-->	cyril_ (cyril@nat/intel/x-tjxhdcmlimjkwunq) has joined #haskell
2013-03-29 12:11:41	hpc	the (>> return ()) action
2013-03-29 12:11:45	hpc	making it not a tail call
2013-03-29 12:11:51	-->	Urchin (~urchin@unaffiliated/urchin) has joined #haskell
2013-03-29 12:12:13	-->	NoWhereMan (~NoWhereMa@159.149.42.45) has joined #haskell
2013-03-29 12:12:14	Peaker	ah, well, I have an immutable Vector of MVars that hold "Cells", a Cell a = Uncomputed | Computed | Computing ThreadId
2013-03-29 12:12:52	Peaker	and the result of the computation of a cell is a drawing-combinators sprite, that has an allocation of an OpenGL texture ID in it
2013-03-29 12:12:55	hpc	if you can narrow it down to a simpler section of code, hpaste it
2013-03-29 12:12:59	Peaker	and when the sprite dies, it's finalizer will free the GL texture
2013-03-29 12:13:01	bitonic	hpc, Peaker: hp2ps?
2013-03-29 12:13:16	Peaker	I'll run some profiling just to get more input
2013-03-29 12:13:33	bitonic	(regarding the ‘heap visualising’ thing)
2013-03-29 12:13:39	NoWhereMan	Cale, then what about the first and second law?
2013-03-29 12:13:44	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Quit: Leaving)
2013-03-29 12:15:29	-->	McManiaC_ (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 12:16:27	Peaker	bitonic, I want something to show me specific heap objects and pointers
2013-03-29 12:17:01	bitonic	Peaker: there was threadscope but that’s oriented towards parallelism
2013-03-29 12:17:14	bitonic	and I don’t think it does what you want
2013-03-29 12:17:17	<--	McManiaC (~mcmaniac@nils.cc) has quit (Read error: Connection reset by peer)
2013-03-29 12:17:24	Peaker	hah! If I use +RTS -h, I can see the finalizer printing that it's running
2013-03-29 12:17:33	Peaker	as expected
2013-03-29 12:17:39	Peaker	but without +RTS -h, it never runs
2013-03-29 12:17:48	Peaker	is this likely a GHC bug?
2013-03-29 12:18:23	-->	Eduard_Munteanu (~Eduard_Mu@188.25.245.114) has joined #haskell
2013-03-29 12:20:01	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-29 12:20:10	Tordek	this is on a thread while main dies early? that's not a bug, but there's no easy way to have main wait on all threads iirc (this is quoting from a talk I watched last week, so grain of salt)
2013-03-29 12:20:31	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 12:21:10	-->	Aune (~arne@ronon.lysator.liu.se) has joined #haskell
2013-03-29 12:21:17	<--	ykm (~ykm@124.155.255.244) has quit (Remote host closed the connection)
2013-03-29 12:21:37	Peaker	Tordek, nope, main is alive till the end
2013-03-29 12:22:09	merijn	Tordek: Well, depends you can wrap forkIO to update a top level MVar (using unsafePerformIO) and hen block until that's updated to a value indicating all threads have closed
2013-03-29 12:22:23	merijn	Which is pretty easy to implement
2013-03-29 12:22:41	merijn	Global mutable state \o/
2013-03-29 12:22:56	Tordek	\o/
2013-03-29 12:24:28	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (Quit: http://www.cyphase.com/)
2013-03-29 12:24:53	--	implr is now known as asdfqwe
2013-03-29 12:25:08	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-03-29 12:25:23	--	asdfqwe is now known as implr
2013-03-29 12:25:34	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-29 12:27:36	<--	McManiaC_ (~mcmaniac@nils.cc) has quit (Ping timeout: 246 seconds)
2013-03-29 12:27:36	-->	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-03-29 12:27:36	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 12:27:36	<--	rtnmfn (~AndChat16@37.212.214.110) has quit (Quit: Bye)
2013-03-29 12:27:36	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 12:27:36	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 12:27:36	Eduard_Munteanu	Tordek: you can wait on all threads if you use something like 'async'
2013-03-29 12:27:36	-->	nouitfvf (~brain@unaffiliated/nouitfvf) has joined #haskell
2013-03-29 12:27:36	Eduard_Munteanu	@hackage async
2013-03-29 12:27:36	lambdabot	http://hackage.haskell.org/package/async
2013-03-29 12:27:58	-->	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-29 12:28:08	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 12:28:25	-->	skchrko (~sk@31.28.233.39) has joined #haskell
2013-03-29 12:28:47	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 12:29:00	NoWhereMan	Cale, if I've understood correctly the first two laws are the definition of \mu and \eta in the monad (T,\mu,\eta)
2013-03-29 12:29:11	<--	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-03-29 12:29:12	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-29 12:29:31	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-29 12:29:55	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 264 seconds)
2013-03-29 12:30:44	NoWhereMan	so haskell's monad laws would be 2 laws that enforce the definition of monad (of course), and then two extra laws that  require the naturality of \mu and \eta (which I think is part of the theoretical definition of monad itself)
2013-03-29 12:31:53	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 12:32:14	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Ping timeout: 246 seconds)
2013-03-29 12:33:06	Peaker	"cabal clean && cabal configure --enable-{executable,library}-profiling && cabal build" <-- not building with profiling enabled, hmm?
2013-03-29 12:33:18	Peaker	"ghc-prof-options:    -Wall -O2 -prof -auto-all -rtsopts" <-- in the .cabal file
2013-03-29 12:35:03	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 12:36:10	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-29 12:36:20	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 12:36:26	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-29 12:36:48	<--	cyril_ (cyril@nat/intel/x-tjxhdcmlimjkwunq) has quit (Ping timeout: 264 seconds)
2013-03-29 12:37:14	<--	nooodl (~nooodl@91.179.149.218) has quit (Ping timeout: 258 seconds)
2013-03-29 12:37:27	<--	Thomyho3 (~thomyho@mnhm-4d012b63.pool.mediaWays.net) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-29 12:37:47	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 12:39:03	<--	v__ (~v@199.68.198.120) has quit (Quit: Leaving)
2013-03-29 12:39:31	 *	hackagebot lifted-base 0.2.0.3 - lifted IO operations from the base library  http://hackage.haskell.org/package/lifted-base-0.2.0.3 (BasVanDijk)
2013-03-29 12:40:43	Kaidelong	Eduard_Munteanu: Is that an implementation of F#'s async monad or is it something I'll need to relearn?
2013-03-29 12:42:01	Kaidelong	oh, I see, it isn't
2013-03-29 12:42:26	Kaidelong	I guess what'd I'd be looking for would still be Orc then
2013-03-29 12:42:43	-->	Philonous (~Philonous@dslb-178-000-013-255.pools.arcor-ip.net) has joined #haskell
2013-03-29 12:43:05	Eduard_Munteanu	Dunno about F#'s stuff.
2013-03-29 12:43:33	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-29 12:43:47	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-29 12:45:18	Kaidelong	F# has an async monad that lets you use do notation to go "a <- b; c <- d" and the two bindings are done asynchronously
2013-03-29 12:45:53	Eduard_Munteanu	Interesting.
2013-03-29 12:45:54	Kaidelong	the main issue I saw going to haskell is that you'd need some kind of ugly interaction with the IO monad which is not an issue in F# as it is impure
2013-03-29 12:46:07	<--	rohitkav (~rohitkav@122.167.9.121) has quit (Ping timeout: 260 seconds)
2013-03-29 12:46:28	Kaidelong	the approach Orc took was to make itself an instance of MonadIO
2013-03-29 12:46:30	Eduard_Munteanu	I suspect you could just wrap IO.
2013-03-29 12:46:38	Eduard_Munteanu	Yeah.
2013-03-29 12:46:43	Saizan	"a <- async b; c <- async d" is pretty close
2013-03-29 12:46:48	<--	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 258 seconds)
2013-03-29 12:46:54	-->	Taneb (~nathan@host-92-30-195-9.as13285.net) has joined #haskell
2013-03-29 12:47:03	<--	chatsiri_ (~chatsiri_@171.7.58.25) has quit (Ping timeout: 260 seconds)
2013-03-29 12:47:34	-->	McManiaC_ (~mcmaniac@nils.cc) has joined #haskell
2013-03-29 12:47:37	<--	McManiaC (~mcmaniac@nils.cc) has quit (Ping timeout: 246 seconds)
2013-03-29 12:48:23	Kaidelong	hmm, speaking of F#
2013-03-29 12:48:43	-->	chatsiri_ (~chatsiri_@171.7.141.141) has joined #haskell
2013-03-29 12:48:45	Kaidelong	is there a haskell extension that gives haskell a similar enhanced do notation? MonadComprehensions?
2013-03-29 12:49:02	Kaidelong	for stuff like yield, yield! mostly
2013-03-29 12:49:42	quchen	I'm not sure what yield does, but if it's any similar to Python then you can probably make something using Cont
2013-03-29 12:50:15	-->	Reite (~Reite@cF6F28BC3.dhcp.as2116.net) has joined #haskell
2013-03-29 12:50:44	quchen	"getCC = callCC $ \exit -> let x = exit x in x" effectively creates a goto mark iirc
2013-03-29 12:50:58	quchen	And from there on you can go crazy (and equally unreadable)
2013-03-29 12:51:15	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 260 seconds)
2013-03-29 12:51:22	--	asante10111 is now known as asante
2013-03-29 12:51:40	<--	asante (~asante@iceqll.eu) has quit (Changing host)
2013-03-29 12:51:40	-->	asante (~asante@unaffiliated/asante) has joined #haskell
2013-03-29 12:52:25	Kaidelong	probably more analogous to mplus
2013-03-29 12:52:35	-->	shintah (bebble@h-123-169-173.a336.priv.bahnhof.se) has joined #haskell
2013-03-29 12:52:48	Kaidelong	yield is like mplus . return and yield! is like mplus
2013-03-29 12:53:03	quchen	So it has nothing to do with Python's yield? Oh
2013-03-29 12:53:18	Kaidelong	I don't know how python's yield works
2013-03-29 12:53:37	Kaidelong	but the general use is for writing iterators, infinite streams and the like
2013-03-29 12:53:37	quchen	It's like a return statement, but when you call the function again you jump back to where the yield was
2013-03-29 12:53:49	Kaidelong	oh icon's "suspend"?
2013-03-29 12:54:01	Kaidelong	I suppose implementation wise it basically boils down to that
2013-03-29 12:54:13	Kaidelong	not really how I think of it conceptually
2013-03-29 12:56:23	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 260 seconds)
2013-03-29 12:56:25	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-03-29 12:56:27	circle	does "a" have special meaning in haskell?
2013-03-29 12:56:33	circle	when you're defining general functions
2013-03-29 12:57:05	Kaidelong	no
2013-03-29 12:57:31	-->	schlicht_ (~fl@g225062225.adsl.alicedsl.de) has joined #haskell
2013-03-29 12:57:44	Kaidelong	at least, I can't think of a way to interpret the question where the answer would be yes
2013-03-29 12:58:07	Kaidelong	the closest I can get to is that it's a string literal in a pattern match
2013-03-29 12:58:34	-->	rohitkav (~rohitkav@122.167.15.189) has joined #haskell
2013-03-29 12:58:34	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 12:58:38	quchen	circle: In types, "a" is something like "anything"
2013-03-29 12:58:48	quchen	id :: a -> a -- id maps anything to something of the same type
2013-03-29 12:58:54	circle	I know what it means
2013-03-29 12:58:56	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-29 12:58:57	circle	so it does have special meaning
2013-03-29 12:59:02	circle	you can't just replace it with "e"
2013-03-29 12:59:05	circle	or something
2013-03-29 12:59:06	quchen	You can
2013-03-29 12:59:07	Kaidelong	yes you can
2013-03-29 12:59:17	circle	so it doesn'
2013-03-29 12:59:18	circle	t
2013-03-29 12:59:18	Kaidelong	id :: forall a. a -> a
2013-03-29 12:59:22	quchen	:t id :: u -> u
2013-03-29 12:59:23	lambdabot	u -> u
2013-03-29 12:59:29	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-03-29 12:59:31	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-29 12:59:31	Kaidelong	think of forall like a lambda for types
2013-03-29 12:59:34	quchen	:t id :: rabbit -> rabbit
2013-03-29 12:59:36	lambdabot	rabbit -> rabbit
2013-03-29 13:00:03	Kaidelong	lower case types are universally instantiated implicitly
2013-03-29 13:00:05	quchen	Using "a" is a convention like using "x" for variables
2013-03-29 13:00:25	Kaidelong	universal instantiation being what the forall does
2013-03-29 13:00:28	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 13:01:15	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-03-29 13:01:20	<--	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-29 13:01:35	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-29 13:01:57	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-29 13:02:21	Saizan	itym universally quantified
2013-03-29 13:03:03	Saizan	instantiation is the term for when you use it at some type, afaict
2013-03-29 13:03:45	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-29 13:03:47	-->	MrFenix (~JanB@p57A1AEB0.dip.t-dialin.net) has joined #haskell
2013-03-29 13:04:47	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 260 seconds)
2013-03-29 13:05:15	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 260 seconds)
2013-03-29 13:07:16	<--	sh (~sh@2a00:15b8:109:1:1::1) has quit (Remote host closed the connection)
2013-03-29 13:07:32	-->	sh (~sh@2a00:15b8:109:1:1::1) has joined #haskell
2013-03-29 13:08:06	-->	LucasCampos (~lucas@177.98.133.216) has joined #haskell
2013-03-29 13:08:13	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-03-29 13:08:38	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-03-29 13:08:42	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 13:10:07	<--	Taneb (~nathan@host-92-30-195-9.as13285.net) has quit (Ping timeout: 264 seconds)
2013-03-29 13:12:19	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-29 13:12:24	-->	cognominal (~cognomina@37.160.28.219) has joined #haskell
2013-03-29 13:13:28	<--	chatsiri_ (~chatsiri_@171.7.141.141) has quit (Ping timeout: 256 seconds)
2013-03-29 13:13:42	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-29 13:14:05	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-29 13:14:20	-->	setmeaway (~setmeaway@118.45.149.119) has joined #haskell
2013-03-29 13:14:22	<--	NoWhereMan (~NoWhereMa@159.149.42.45) has quit (Quit: Sto andando via)
2013-03-29 13:14:39	-->	chatsiri_ (~chatsiri_@171.7.173.175) has joined #haskell
2013-03-29 13:14:47	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-03-29 13:15:21	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-29 13:15:59	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-03-29 13:16:14	<--	madjestic13 (~madjestic@188.90.184.106) has quit (Ping timeout: 252 seconds)
2013-03-29 13:17:08	<--	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has quit (Quit: Page closed)
2013-03-29 13:17:27	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Client Quit)
2013-03-29 13:17:45	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-29 13:18:29	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 13:18:47	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-03-29 13:19:11	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 13:19:32	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 13:19:39	<--	ulfdoz (~mary@p5B38AEAB.dip.t-dialin.net) has quit (Quit: brb)
2013-03-29 13:19:42	<--	MnO2 (~MnO2@nat/yahoo/x-ldsgrqssfqdfdrki) has quit (Quit: MnO2)
2013-03-29 13:20:52	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-29 13:20:54	-->	_boegel_ (~boegel@b246h102.ugent.be) has joined #haskell
2013-03-29 13:20:58	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-29 13:21:12	<--	_boegel_ (~boegel@b246h102.ugent.be) has quit (Client Quit)
2013-03-29 13:21:28	-->	ulfdoz (~mary@p5B38AEAB.dip.t-dialin.net) has joined #haskell
2013-03-29 13:21:41	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-29 13:22:09	-->	JohnBat26 (~Eugene@89.175.77.161) has joined #haskell
2013-03-29 13:22:30	<--	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Read error: Connection reset by peer)
2013-03-29 13:22:38	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Ping timeout: 246 seconds)
2013-03-29 13:22:42	-->	pantsman- (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-29 13:22:50	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-03-29 13:23:01	<--	reckler (~reckler@ppp118-210-230-16.lns20.adl6.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-03-29 13:25:01	<--	LucasCampos (~lucas@177.98.133.216) has quit (Quit: Leaving.)
2013-03-29 13:25:33	<--	Moggle (~chatzilla@S01060014d1c3a9f9.wp.shawcable.net) has quit (Ping timeout: 240 seconds)
2013-03-29 13:27:17	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-29 13:28:47	-->	Flame_Alchemist (~Flame_Alc@host245-236-dynamic.11-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 13:29:19	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-29 13:30:25	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-29 13:30:25	-->	niklasb (~codeslay0@p5B3102AF.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 13:30:29	<--	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-29 13:30:45	-->	perspectival1 (perspectiv@nat/redhat/x-abhopbpwlvtebgqv) has joined #haskell
2013-03-29 13:31:26	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 13:31:32	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-29 13:31:50	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Ping timeout: 255 seconds)
2013-03-29 13:32:12	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-29 13:32:50	--	McManiaC_ is now known as McManiaC
2013-03-29 13:33:38	-->	MoALTz (~no@host86-142-161-119.range86-142.btcentralplus.com) has joined #haskell
2013-03-29 13:34:10	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-29 13:34:31	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 13:36:47	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 255 seconds)
2013-03-29 13:37:02	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-03-29 13:37:34	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 13:37:40	-->	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 13:38:10	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-29 13:40:37	<--	xpika (~jrg@110.141.193.164) has quit (Ping timeout: 248 seconds)
2013-03-29 13:41:17	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 13:43:15	-->	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has joined #haskell
2013-03-29 13:43:16	<--	jdnavarro (~danny@38.Red-88-6-248.staticIP.rima-tde.net) has quit (Remote host closed the connection)
2013-03-29 13:43:23	-->	trescenzi (~trescenzi@148.100.78.128) has joined #haskell
2013-03-29 13:43:34	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-29 13:44:15	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-29 13:45:03	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 13:45:33	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 240 seconds)
2013-03-29 13:45:57	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 13:46:03	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-29 13:46:55	<--	yc4891 (~andrew@121.14.98.46) has quit (Ping timeout: 256 seconds)
2013-03-29 13:47:50	<--	trescenzi (~trescenzi@148.100.78.128) has quit (Ping timeout: 246 seconds)
2013-03-29 13:49:01	-->	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has joined #haskell
2013-03-29 13:49:37	<--	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has quit
2013-03-29 13:50:00	<--	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has quit (Ping timeout: 264 seconds)
2013-03-29 13:50:05	-->	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 13:50:31	<--	zeus (~zeus@89-68-153-169.dynamic.chello.pl) has left #haskell
2013-03-29 13:51:31	-->	ajnsit (~aj@182.64.60.221) has joined #haskell
2013-03-29 13:51:36	<--	ajnsit (~aj@182.64.60.221) has quit (Client Quit)
2013-03-29 13:52:51	<--	akurei_ (~akurei@lak-69-207.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 260 seconds)
2013-03-29 13:52:53	-->	ajnsit (~aj@182.64.60.221) has joined #haskell
2013-03-29 13:53:14	<--	ajnsit (~aj@182.64.60.221) has quit (Client Quit)
2013-03-29 13:53:33	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 240 seconds)
2013-03-29 13:53:47	-->	ajnsit (~aj@182.64.60.221) has joined #haskell
2013-03-29 13:53:52	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 13:55:17	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 13:55:28	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-03-29 13:55:41	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Quit: ilyanok)
2013-03-29 13:55:56	--	Ulrar_ is now known as Ulrar
2013-03-29 13:57:00	-->	ctc (5f50362d@gateway/web/freenode/ip.95.80.54.45) has joined #haskell
2013-03-29 13:57:43	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Quit: Leaving...)
2013-03-29 13:58:38	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-29 13:59:13	<--	ajnsit (~aj@182.64.60.221) has left #haskell
2013-03-29 13:59:38	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 258 seconds)
2013-03-29 13:59:52	Radish	Can someone help me really quick?
2013-03-29 14:00:06	Radish	I'm using command prompt and I'm trying to install portaudio still
2013-03-29 14:00:11	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-29 14:00:25	Radish	I think I've resolved the dependencies but it doesn't seem like command prompt knows where I hid them.
2013-03-29 14:00:29	Radish	This problem can usually be solved by installing the system package that provides this library (you may need the "-dev" version). If the library is already installed but in a non-standard location then you can use the flags --extra-include-dirs= and --extra-lib-dirs= to specify where it is.
2013-03-29 14:01:00	Radish	do I just type cabal install portaudio --extra-include-dirs=C:\blah\blah or what?
2013-03-29 14:01:01	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 14:01:03	-->	Kyo (~elaineben@h206n2c1o1097.bredband.skanova.com) has joined #haskell
2013-03-29 14:01:05	<--	jMCg (~hiro@apache/committer/igalic) has quit (Ping timeout: 255 seconds)
2013-03-29 14:01:11	hpaste	ctc pasted “Strange” at http://hpaste.org/84813
2013-03-29 14:01:42	-->	phischu (~pschuster@p4FD306BE.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 14:02:11	ctc	what is going on here: http://hpaste.org/84813
2013-03-29 14:02:29	Botje	ctc: haskell just expanded ("" `return`) to \x -> return "" x
2013-03-29 14:02:30	-->	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has joined #haskell
2013-03-29 14:03:11	supki	and ((->) t) is a Monad
2013-03-29 14:04:14	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 14:04:47	Radish	does a directory need to be in quotes?
2013-03-29 14:05:08	Botje	if the path contains spaces.
2013-03-29 14:05:15	Radish	oh
2013-03-29 14:05:33	Radish	is this right? cabal install portaudio --extra-include-dirs=C:\blah\blah
2013-03-29 14:05:55	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-03-29 14:06:19	Radish	wait shoot.  I don't think I configured where I installed portaudio...
2013-03-29 14:06:39	Radish	Where is it then?  "It's not in any of the standard directories".
2013-03-29 14:06:53	Radish	this is why I hate programming.
2013-03-29 14:07:01	 *	Radish is too stupid
2013-03-29 14:07:11	-->	js6i_ (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 14:07:16	Botje	no, you're not precise enough :)
2013-03-29 14:08:00	<--	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 264 seconds)
2013-03-29 14:08:15	Philonous	Does Windows not have pkg-config?
2013-03-29 14:08:33	<--	ISF (~ivan@187.64.222.221) has quit (Read error: Connection reset by peer)
2013-03-29 14:08:35	-->	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has joined #haskell
2013-03-29 14:08:54	Radish	I already installed portaudio
2013-03-29 14:08:57	ion	ctc: For shits and giggles, try with :set -XPostfixOperators, too.
2013-03-29 14:09:05	Radish	I am out of installation instructions!
2013-03-29 14:09:08	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-29 14:09:13	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 14:09:22	Radish	I'm supposed to run cabal install portaudio but alas after all my installing nothing changed
2013-03-29 14:09:31	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 14:09:33	Radish	I just want to do synthesis this is ridiculous. :( :(
2013-03-29 14:09:33	<--	quchen (~david@p54AA253F.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-29 14:09:54	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-03-29 14:09:55	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-29 14:10:55	fumieval	I built with cabal unpack
2013-03-29 14:11:07	--	Guest26834 is now known as tdammers
2013-03-29 14:11:21	<--	tdammers (~tobias@212-182-150-105.ip.telfort.nl) has quit (Changing host)
2013-03-29 14:11:21	-->	tdammers (~tobias@unaffiliated/tdammers) has joined #haskell
2013-03-29 14:11:22	dmwit	Radish: Yes, --extra-include-dirs=C:\blah\blah looks right. What happens when you use that?
2013-03-29 14:11:35	Radish	same thing
2013-03-29 14:11:40	Radish	i need to locate the dll file
2013-03-29 14:11:41	-->	quchen (~david@p54AA428F.dip.t-dialin.net) has joined #haskell
2013-03-29 14:11:45	dmwit	And with --extra-lib-dirs?
2013-03-29 14:11:59	Radish	i didn't use any fancy instructions with MSys
2013-03-29 14:12:09	Radish	just ./configure
2013-03-29 14:12:10	Radish	make
2013-03-29 14:12:12	Radish	make install
2013-03-29 14:12:23	Radish	where would it put the .dll?
2013-03-29 14:12:34	dmwit	ask configure =)
2013-03-29 14:12:37	-->	Taneb (~nathan@host-92-23-142-211.as13285.net) has joined #haskell
2013-03-29 14:12:57	Radish	i kind of already backed out of there
2013-03-29 14:13:03	Radish	i can get it back right?
2013-03-29 14:13:32	dmwit	I don't know. What does "backed out of there" mean?
2013-03-29 14:14:19	Philonous	Uh, what would I call a module that handles textual representation of IP addresses?
2013-03-29 14:14:42	dmwit	You're telling me that there isn't already a module for that?
2013-03-29 14:14:58	Philonous	dmwit:  I tried to find it, but I couldn't.
2013-03-29 14:15:22	Radish	so how would I ask configure?
2013-03-29 14:15:31	<--	leoncamel1 (~leoncamel@1.202.5.29) has quit (Ping timeout: 264 seconds)
2013-03-29 14:15:37	dmwit	Perhaps ./configure --help will tell you the defaults for its various options.
2013-03-29 14:15:59	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Quit: Leaving)
2013-03-29 14:16:02	Radish	i think it saved everything to "configure.status"
2013-03-29 14:16:19	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-29 14:16:34	dmwit	Even if ./configure --help won't say, make install --dry-run certainly will.
2013-03-29 14:16:56	Radish	it says the dot . is not recognized
2013-03-29 14:17:13	<--	brandonw (~brandonw@68-118-241-217.dhcp.oxfr.ma.charter.com) has quit (Read error: Connection reset by peer)
2013-03-29 14:17:42	-->	brandonw (~brandonw@68-118-241-217.dhcp.oxfr.ma.charter.com) has joined #haskell
2013-03-29 14:17:49	Radish	hmm wait no i think i've got it now
2013-03-29 14:18:08	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-29 14:18:09	Radish	got two command prompts open lol one had me fooled ;)
2013-03-29 14:18:22	merijn	Anyone know if the unix package works under windows if you use cygwin?
2013-03-29 14:18:35	Radish	it says "Port Audio was successfully installed"
2013-03-29 14:18:53	-->	Franciman (~quassel@host32-163-dynamic.27-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 14:19:07	dEPY	off-topic:  anyone here uses heroku?
2013-03-29 14:19:21	fumieval	Radish: Did you check lib\.libs?
2013-03-29 14:19:32	Radish	I'm doing --dry-run
2013-03-29 14:19:33	 *	hackagebot soap 0.1.0.4 - SOAP client tools  http://hackage.haskell.org/package/soap-0.1.0.4 (AlexanderBondarenko)
2013-03-29 14:19:43	Radish	where does it say where its installed?
2013-03-29 14:19:43	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 264 seconds)
2013-03-29 14:20:03	Radish	entering/leaving directory?
2013-03-29 14:20:37	Radish	its the same directory as the one I'm in, which I'm thinking might be where it's installed but I tried to feed that line to cabal install and besides I don't see the .dll...
2013-03-29 14:20:54	dmwit	No, that's just an indication of which directories it's looking for Makefiles in.
2013-03-29 14:21:03	Radish	okay
2013-03-29 14:21:03	fumieval	Um, The directory that you ran 'make'.
2013-03-29 14:21:23	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-29 14:21:51	Radish	maybe its this usr/local/lib/pkgconfig?
2013-03-29 14:21:54	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-29 14:22:11	Radish	could that be where it was installed to by default?
2013-03-29 14:22:14	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 14:22:34	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 14:22:48	Radish	this is tragic lol
2013-03-29 14:23:19	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-29 14:23:22	Radish	fumieval: how do i check lib\.libs?
2013-03-29 14:23:59	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-29 14:24:00	Radish	omg i think this is it
2013-03-29 14:24:07	Radish	fumieval: i think I got you, thank you
2013-03-29 14:24:35	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-03-29 14:25:01	alpounet	dEPY, i have seen a few blog posts about haskell & heroku, but don't remember discussions about that here while I was around. the blog posts may be all you need though
2013-03-29 14:25:42	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-29 14:25:57	Radish	oh for crying out loud new error
2013-03-29 14:26:01	Radish	it's missing the .h file
2013-03-29 14:26:11	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 14:26:15	Radish	thats the "header" file, right?
2013-03-29 14:26:41	Botje	this is where the --extra-include-dirs comes into play.
2013-03-29 14:27:39	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 14:27:58	Radish	okay so i need to point that one at wherever I put that .h file.
2013-03-29 14:27:59	Radish	okay
2013-03-29 14:28:08	Radish	this is confusing but kind of exciting
2013-03-29 14:28:21	-->	nxorg8 (~nxor@130.225.245.183) has joined #haskell
2013-03-29 14:28:36	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-03-29 14:28:53	Radish	i'm super inexperienced with command prompt, haskell, port audio, linux/unix, .h, .dll, .tar, .tgz, and just about everyone other aspect of this project.
2013-03-29 14:28:59	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 14:29:19	 *	merijn has to hold off from making a sex joke
2013-03-29 14:29:19	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-03-29 14:29:20	-->	banjiewen (~banjiewen@184.173.74.133-static.reverse.softlayer.com) has joined #haskell
2013-03-29 14:29:23	Botje	yay! learning!
2013-03-29 14:30:12	<--	phischu (~pschuster@p4FD306BE.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-03-29 14:30:28	Radish	oh yeah baby, defrag my kernel! -- if you know what i mean
2013-03-29 14:30:47	Radish	and he never got laid again
2013-03-29 14:31:02	Radish	where would the .h be agian??
2013-03-29 14:31:13	Radish	i'm rumaging around.  i found some .hxx lol
2013-03-29 14:31:45	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-29 14:31:51	Radish	aha!
2013-03-29 14:31:51	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Quit: leeave())
2013-03-29 14:32:12	-->	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 14:32:22	-->	jMCg (~hiro@apache/committer/igalic) has joined #haskell
2013-03-29 14:33:22	-->	teneen (~chatzilla@217.55.205.7) has joined #haskell
2013-03-29 14:33:35	teneen	Is GHC RULES pragma a compile-time optimization?
2013-03-29 14:33:42	teneen	How is it different from #define?
2013-03-29 14:33:47	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-29 14:33:55	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-29 14:33:59	dmwit	It is compile-time.
2013-03-29 14:34:00	<--	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has quit (Read error: Connection reset by peer)
2013-03-29 14:34:13	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 240 seconds)
2013-03-29 14:34:14	Radish	omg finally
2013-03-29 14:34:18	<--	ctc (5f50362d@gateway/web/freenode/ip.95.80.54.45) has quit (Quit: Page closed)
2013-03-29 14:34:21	Radish	i've been working on this for weeks
2013-03-29 14:34:23	dmwit	I'm not sure exactly how to compare it to #define other than to say that it's hygienic.
2013-03-29 14:34:30	dEPY	How many of you guys use haskell at your job?:)
2013-03-29 14:34:43	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 14:34:49	Radish	I would kill to be a haskell programmer full time
2013-03-29 14:34:56	dmwit	?wiki haskell in industry
2013-03-29 14:34:57	lambdabot	http://www.haskell.org/haskellwiki/haskell_in_industry
2013-03-29 14:34:58	Radish	that would be like totally suave
2013-03-29 14:35:03	teneen	dmwit: So #define can always replace RULES?
2013-03-29 14:35:34	dmwit	teneen: Ah, no, there's another difference: RULES can fire on optimized code.
2013-03-29 14:35:37	dmwit	#define happens once.
2013-03-29 14:35:46	hiptobecubic	i think there is a big divide between "paid to use haskell" and "paid in spite of the use of  haskell"
2013-03-29 14:35:47	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2013-03-29 14:36:01	Dodek	hey, is there a library that supports secure client-side websockets?
2013-03-29 14:36:20	dmwit	If you've looked on Hackage and didn't see one, there probably isn't.
2013-03-29 14:36:26	dmwit	If you didn't look on Hackage, do so now. =)
2013-03-29 14:36:30	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-03-29 14:36:58	Dodek	the "websockets" library only supports plain sockets, not secure ones
2013-03-29 14:37:05	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 14:37:23	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 14:37:24	merijn	Any haskell under cygwin users around?
2013-03-29 14:37:52	merijn	Radish: Make sure to have a profile on haskellers.com, I've gotten two recruitment messages for haskell jobs so far :)
2013-03-29 14:37:58	Radish	hiptobecubic: +1 dude
2013-03-29 14:38:17	Heffalump	merijn: I do sometimse
2013-03-29 14:38:33	Adeon	Dodek: can't you just tunnel the websocket in SSL connection?
2013-03-29 14:38:33	Taneb	How early is too early to make a profile on haskellers.com
2013-03-29 14:38:42	Radish	merijn: I can't program my way out of a paper bag at this point, but I'm trying to learn!
2013-03-29 14:38:46	Dodek	Adeon: tht's not what i am talking about
2013-03-29 14:38:51	Dodek	Adeon: http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10#page-20
2013-03-29 14:39:05	Adeon	I see
2013-03-29 14:39:21	merijn	Taneb: Well, I have zero (useful) libraries on hackage and barely any OS haskell code to show, so there's no such thing as too early, I think :p
2013-03-29 14:39:45	Taneb	merijn, I'm still in high school, not doing any computer-y education
2013-03-29 14:39:52	Radish	merijn: i bookmarked the site though thanks
2013-03-29 14:40:41	Heffalump	Taneb: that's got nothing to do with being a haskeller or not!
2013-03-29 14:40:48	Taneb	Good point, Heffalump
2013-03-29 14:40:49	merijn	Taneb: My personal opinion is that most people in the industry are more terrible than you think (especially if you hang out here, this place is filled with outliers :p), so I don't think it hurts to start early
2013-03-29 14:40:57	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-29 14:41:30	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-03-29 14:42:29	-->	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-03-29 14:42:46	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Remote host closed the connection)
2013-03-29 14:43:03	merijn	Taneb: My biggest mistakes in high school/university was thinking I knew how much I was worth (i.e. not much), once I started working a bit I realised people were willing to pay craptons of money for me to do things I thought were trivial. My biggest life advice to someone in high school and coding would be to never underestimate how much value your skills have to people, else you'll screw yourself out of money and/or jobs
2013-03-29 14:43:59	merijn	In fact, if you ever get asked what kind of salary you're looking for. Think of the highest salary you realistically expect someone to pay you, then triple it (or maybe even quadruple or more)
2013-03-29 14:44:16	-->	pigoz (~pigoz@ip-static-94-242-209-206.as5577.net) has joined #haskell
2013-03-29 14:44:26	dmwit	$300,000/year!
2013-03-29 14:44:29	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-29 14:44:29	-->	ludamad (~adomurad@67.55.40.60) has joined #haskell
2013-03-29 14:44:33	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-29 14:44:34	 *	hackagebot hspec-expectations 0.3.1 - Catchy combinators for HUnit  http://hackage.haskell.org/package/hspec-expectations-0.3.1 (SimonHengel)
2013-03-29 14:44:52	Taneb	merijn, thank you for that advice
2013-03-29 14:45:03	sipa	+1 merijn
2013-03-29 14:45:04	-->	JaRoel (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-29 14:45:27	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 14:46:15	merijn	Taneb: One example, I have a friend who started looking for jobs recently, to figure out how much he was worth (granted, he is rather experience already), they asked him to name a salary. He figured 75k would be too much, they immediately said "yes", turns out they probably would've gone up to 120k
2013-03-29 14:46:36	Taneb	Whoa
2013-03-29 14:47:03	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 14:47:24	Hafydd	merijn: one of the commas in your first sentence should be a full stop. Which one is it?
2013-03-29 14:48:07	merijn	Hafydd: I refuse to bow to your childish notions of correct punctuation! :p
2013-03-29 14:48:12	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 264 seconds)
2013-03-29 14:48:25	Hafydd	merijn: I'm asking because I actually didn't understand your sentence.
2013-03-29 14:48:49	geekosaur	Hafydd, I'd replace first comma with colon and second with semicolon
2013-03-29 14:49:10	merijn	I think the first comma should be a colon and the third a full stop?
2013-03-29 14:49:36	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 14:49:36	-->	rickeyski-k (~rickeyski@206.217.106.178) has joined #haskell
2013-03-29 14:49:46	geekosaur	the third is after "granted", why would it be a full stop?
2013-03-29 14:50:09	merijn	geekosaur: I don't consider parenthesis part of the first sentence
2013-03-29 14:50:13	geekosaur	(also "experience" in that parenthetical probably should be "experienced")
2013-03-29 14:50:23	Hafydd	So the employer asked because they wanted to find out how much he was worth? I see.
2013-03-29 14:50:35	geekosaur	the comma after the parenthetical should not be a full stop, it might be removed though
2013-03-29 14:50:44	merijn	Hafydd: No, my friend was trying to figure out how much he could get for new jobs
2013-03-29 14:51:01	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-29 14:51:13	Hafydd	Oh.
2013-03-29 14:51:21	merijn	geekosaur: Spellchecking my IRC typing would be a fulltime job for someone...the number of typos is just awful
2013-03-29 14:51:26	-->	leoncamel1 (~leoncamel@1.202.5.29) has joined #haskell
2013-03-29 14:51:31	-->	Tesseraction_u (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-29 14:51:40	Hafydd	I'll do it for 75k pa/.
2013-03-29 14:51:57	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 14:52:07	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 264 seconds)
2013-03-29 14:52:13	Botje	.. what currency?
2013-03-29 14:52:20	Hafydd	Bitcoins.
2013-03-29 14:52:42	Botje	that's a fun proposition.
2013-03-29 14:52:49	Hafydd	I'll also accept lambdabot karma points.
2013-03-29 14:53:06	Botje	one month you can buy a new house, the next you can barely afford a sandwich.
2013-03-29 14:53:18	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-29 14:54:35	 *	hackagebot hspec-expectations 0.3.2 - Catchy combinators for HUnit  http://hackage.haskell.org/package/hspec-expectations-0.3.2 (SimonHengel)
2013-03-29 14:54:59	Hafydd	Because you spent all the money on the house? That sounds accruate.
2013-03-29 14:55:27	Taneb	Don't houses cost about as much as a red paperclip and some web hosting now?
2013-03-29 14:55:27	 *	Hafydd pre-emptively shuts up.
2013-03-29 14:55:55	dmwit	What kind of unit is k pa/.?
2013-03-29 14:56:13	Taneb	Thousands of currency per year
2013-03-29 14:56:17	Hafydd	75 k year^-1
2013-03-29 14:56:33	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-29 14:57:15	merijn	dmwit: I'm guessing pa = per annum?
2013-03-29 14:57:18	dmwit	I much rather prefer my interpretation of "kiloPascals per corrected period".
2013-03-29 14:57:29	Hafydd	Hahah.
2013-03-29 14:57:34	dmwit	"I will crush you with a thousand atmospheres for EACH ERROR!"
2013-03-29 14:57:39	-->	Sorella (~queen@201.80.212.227) has joined #haskell
2013-03-29 14:58:30	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-29 14:59:02	dmwit	There's a lot of things I'd do for 75k BTC/year.
2013-03-29 14:59:30	Taneb	What's the BTC/GBP conversion rate atm
2013-03-29 14:59:47	dmwit	dunno about GBP, but I sold 10 BTC for $93/BTC yesterday
2013-03-29 14:59:48	dmwit	USD
2013-03-29 15:00:30	hiptobecubic	dmwit, yes, they are spiking like mad
2013-03-29 15:01:09	Taneb	And I've just spent 10 minutes trying to get the coordinates on my Haskellers profile correct to four decimal places
2013-03-29 15:01:14	<--	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has quit (Quit: Page closed)
2013-03-29 15:01:22	dmwit	Even at the lowest exchange rate I've seen since I learned about them (namely $3/BTC) there's a lot of things I'd do for 75k BTC/year.
2013-03-29 15:01:27	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-29 15:01:30	hiptobecubic	yes
2013-03-29 15:01:37	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-03-29 15:01:39	Taneb	Darn, I'm two houses too far west
2013-03-29 15:01:40	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 15:01:53	Taneb	And a few meters too far south
2013-03-29 15:01:59	hiptobecubic	honestly btc are a pretty outrageous story
2013-03-29 15:02:08	dmwit	Taneb: Won't Google maps tell you your coordinates to as many decimal places as you like...?
2013-03-29 15:02:16	Hafydd	Taneb: please make it accurate so I can pay uninvited visits to your house.
2013-03-29 15:02:35	Taneb	dmwit, could never work it out
2013-03-29 15:02:39	Taneb	Hafydd, please don't
2013-03-29 15:02:50	Hafydd	That's the spirit.
2013-03-29 15:03:22	sipa	Spirits aren't welcome at his hiuse either, i suppose :)
2013-03-29 15:03:43	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-29 15:03:43	Hafydd	So bringing a bottle of Whiskey won't help?
2013-03-29 15:03:53	dmwit	Taneb: Right click -> center map here; then click the "permalink" button in the top left.
2013-03-29 15:03:53	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-29 15:04:05	dmwit	It has your latitude and longitude in the URL.
2013-03-29 15:04:09	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-29 15:04:10	Taneb	And now I've got it PERFECT
2013-03-29 15:04:16	Taneb	I'm gonna round to two decimal places
2013-03-29 15:04:20	Taneb	So nobody can find me!
2013-03-29 15:04:22	merijn	Hafydd: He said he was in high school, I don't think his parents would appreciate uninvited strangers bringing whisky ;)
2013-03-29 15:04:39	merijn	OTOH, feel free to come and bring me whisky!
2013-03-29 15:04:43	<--	cognominal (~cognomina@37.160.28.219) has quit (Ping timeout: 264 seconds)
2013-03-29 15:04:44	Hafydd	Heheh.
2013-03-29 15:04:50	Taneb	I don't think my mum would mind
2013-03-29 15:04:55	Taneb	But I'm not too keen on whisky
2013-03-29 15:05:03	sipa	Taneb: but she is?
2013-03-29 15:05:11	<--	rohitkav (~rohitkav@122.167.15.189) has quit (Ping timeout: 246 seconds)
2013-03-29 15:05:14	merijn	Single malt/cask only, please. I am a gentleman of taste...
2013-03-29 15:05:19	Taneb	Indeed
2013-03-29 15:05:40	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-03-29 15:05:46	merijn	Blended is for the uninformed and uncultured masses :>
2013-03-29 15:06:16	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 256 seconds)
2013-03-29 15:06:18	<--	vehk (~vehk@unaffiliated/vehk) has quit (Ping timeout: 272 seconds)
2013-03-29 15:06:19	notdan	Is there a way to sort of make one module "friend" of another, so it can access private (non-exported) functions and variables?
2013-03-29 15:06:29	Taneb	I need a more professional gravatar image...
2013-03-29 15:06:37	 *	Eelis sends merijn a nice bottle of blended whisky
2013-03-29 15:06:38	notdan	I haven't found anything regarding that in the docs, but maybe there is a pattern or whatnot
2013-03-29 15:06:54	Taneb	No
2013-03-29 15:07:01	Taneb	There is not
2013-03-29 15:07:07	merijn	notdan: Why not just have an internal module that exports everything but is not exported by your package?
2013-03-29 15:07:24	merijn	notdan: That way your own stuff can use it, but the rest of the world can't
2013-03-29 15:07:53	sipa	merijn: xkcd.com/915 ?
2013-03-29 15:08:18	notdan	merijn: hm, sounds like a nice idea
2013-03-29 15:08:19	<--	emc2 (~emccorkl@2001:470:1f11:617:221:ccff:fec9:c208) has quit (Ping timeout: 264 seconds)
2013-03-29 15:08:20	notdan	thanks
2013-03-29 15:08:24	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-29 15:08:37	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 15:08:39	merijn	notdan: And if the outside world needs some internal stuff you can just reexport it from a "public" module
2013-03-29 15:08:53	<--	canta (~canta@77-20-121-51-dynip.superkabel.de) has quit (Quit: WeeChat 0.4.0)
2013-03-29 15:09:34	Taneb	Okay, I have a public Haskellers.com profile
2013-03-29 15:09:38	Taneb	Time to play pokemon
2013-03-29 15:09:43	dario	hrhr
2013-03-29 15:09:54	-->	canta (~canta@77-20-121-51-dynip.superkabel.de) has joined #haskell
2013-03-29 15:10:30	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-29 15:10:49	-->	megabeest (~megabeest@i59202.upc-i.chello.nl) has joined #haskell
2013-03-29 15:11:00	<--	k00mi (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.0)
2013-03-29 15:11:39	<--	Luke (~lhoersten@160.79.132.254) has quit (Ping timeout: 245 seconds)
2013-03-29 15:12:19	-->	chatsiri1 (~chatsiri_@14.207.126.37) has joined #haskell
2013-03-29 15:13:15	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-29 15:15:31	<--	chatsiri_ (~chatsiri_@171.7.173.175) has quit (Ping timeout: 264 seconds)
2013-03-29 15:15:46	-->	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 15:15:59	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-03-29 15:15:59	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-03-29 15:16:37	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 248 seconds)
2013-03-29 15:16:38	<--	sellout (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-03-29 15:16:53	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-29 15:16:54	<--	schovi (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-03-29 15:17:18	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-03-29 15:18:03	--	adu_ is now known as adu
2013-03-29 15:19:35	 *	hackagebot l-bfgs-b 0.1 - Bindings to L-BFGS-B, Fortran code for limited-memory quasi-Newton bound-constrained optimization  http://hackage.haskell.org/package/l-bfgs-b-0.1 (GardSpreemann)
2013-03-29 15:19:43	<--	rs234 (~rs234@89.137.4.235) has quit (Ping timeout: 264 seconds)
2013-03-29 15:20:34	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-03-29 15:21:44	--	`ramses is now known as ramses_
2013-03-29 15:21:45	<--	teneen (~chatzilla@217.55.205.7) has quit (Read error: Connection reset by peer)
2013-03-29 15:22:48	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 15:23:42	-->	nooodl (~nooodl@91.179.149.218) has joined #haskell
2013-03-29 15:24:45	-->	Luke (~lhoersten@160.79.132.254) has joined #haskell
2013-03-29 15:25:05	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-29 15:26:10	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 15:26:30	-->	madjestic (~madjestic@188.90.225.99) has joined #haskell
2013-03-29 15:26:49	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-29 15:28:12	-->	haskN00b (62bfc0a9@gateway/web/freenode/ip.98.191.192.169) has joined #haskell
2013-03-29 15:28:35	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-29 15:28:59	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 246 seconds)
2013-03-29 15:29:19	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-03-29 15:30:43	-->	phischu (~pschuster@p4FD306BE.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 15:31:16	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-29 15:31:54	-->	jianmeng1 (~mengjian@123.138.24.77) has joined #haskell
2013-03-29 15:31:56	-->	k00mi (~koomi@24.134.205.36) has joined #haskell
2013-03-29 15:32:16	-->	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has joined #haskell
2013-03-29 15:32:33	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 15:33:32	-->	cyril_ (cyril@nat/intel/x-pyefjaqfjjqcrgrt) has joined #haskell
2013-03-29 15:33:41	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-29 15:34:49	-->	trescenzi (~trescenzi@2620:91:0:163:7076:9a6a:c074:7cbc) has joined #haskell
2013-03-29 15:35:22	-->	birch__ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has joined #haskell
2013-03-29 15:35:38	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-03-29 15:36:10	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-03-29 15:36:36	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-29 15:36:56	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 255 seconds)
2013-03-29 15:37:12	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-29 15:37:14	dockside1	Let's talk about the module namespace. I see there are a lot of packages providing Data.Vector, however they are very diffrent in both abstraction and functionallity. I also see high level algorithms using some of them resulting in a packages with a very abstract names that has very specific usecases. Is this accepted as a problem?
2013-03-29 15:37:21	-->	YoungFrog (~youngfrog@geodiff-mac3.ulb.ac.be) has joined #haskell
2013-03-29 15:37:27	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-29 15:37:34	-->	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has joined #haskell
2013-03-29 15:38:34	aCube	What is the best way to map over a list with a function that needs the current element and the rest of the list?
2013-03-29 15:38:52	aCube	It sounds a lot like a zipper, but I wasn't sure how to use one here
2013-03-29 15:39:12	<--	chatsiri1 (~chatsiri_@14.207.126.37) has quit (Ping timeout: 264 seconds)
2013-03-29 15:39:27	supki	@ty \f -> map f . tails
2013-03-29 15:39:28	lambdabot	([a] -> b) -> [a] -> [b]
2013-03-29 15:39:29	-->	chatsiri_ (~chatsiri_@14.207.216.240) has joined #haskell
2013-03-29 15:40:27	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 258 seconds)
2013-03-29 15:40:33	k00mi	dockside1: what packages provide Data.Vector? I can only find the vector package and all the algorithms packages use that
2013-03-29 15:40:35	-->	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has joined #haskell
2013-03-29 15:40:44	aCube	@ty \f l -> map (\x -> f x (delete x l)) l
2013-03-29 15:40:45	lambdabot	Eq a => (a -> [a] -> b) -> [a] -> [b]
2013-03-29 15:40:53	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-29 15:41:00	aCube	That's one implementation, but maybe there is a better way?
2013-03-29 15:42:22	-->	HalfWayMan (~blake@cpc1-seac9-0-0-cust413.7-2.cable.virginmedia.com) has joined #haskell
2013-03-29 15:43:03	-->	kmrhb (~kmrhb@modemcable116.174-81-70.mc.videotron.ca) has joined #haskell
2013-03-29 15:43:03	Kyo	could haskell be used for soft realtime?
2013-03-29 15:43:41	-->	gg7 (~gg7@unaffiliated/gg7) has joined #haskell
2013-03-29 15:44:00	-->	guampa|2 (~guampa@unaffiliated/guampa) has joined #haskell
2013-03-29 15:44:03	<--	guampa (~guampa@unaffiliated/guampa) has quit (Ping timeout: 240 seconds)
2013-03-29 15:44:23	k00mi	Kyo: that question has been asked a few times on stack overflow
2013-03-29 15:44:33	-->	jobstijl (~job@5070A080.static.ziggozakelijk.nl) has joined #haskell
2013-03-29 15:44:35	-->	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2013-03-29 15:44:36	 *	hackagebot names 0.1 - Types that symbolise Names.  http://hackage.haskell.org/package/names-0.1 (JulianFleischer)
2013-03-29 15:44:42	latermuse	kyo: what do you mean by soft realtime?
2013-03-29 15:44:48	dates	hi, Is it possible to do this in a haskell function : "if true then do this and this". I mean can I do two things if a logical expression is true in the function?
2013-03-29 15:44:58	latermuse	dates: yes
2013-03-29 15:45:12	aCube	> if True then 3 else 0
2013-03-29 15:45:13	lambdabot	  3
2013-03-29 15:45:16	latermuse	dates if True then ... else ...
2013-03-29 15:45:21	ramses_	@ty join . (map .) -- aCube
2013-03-29 15:45:22	lambdabot	([a] -> a -> b) -> [a] -> [b]
2013-03-29 15:45:24	<--	guampa (~guampa@unaffiliated/guampa) has quit (Client Quit)
2013-03-29 15:45:44	latermuse	> putStrLn $ if True then "yes" else "no"
2013-03-29 15:45:46	lambdabot	  No instance for (GHC.Show.Show (GHC.Types.IO ()))
2013-03-29 15:45:46	lambdabot	   arising from a use of ...
2013-03-29 15:45:50	<--	madjestic (~madjestic@188.90.225.99) has quit (Ping timeout: 252 seconds)
2013-03-29 15:45:53	dates	latermuse : no, I mean if the condition is true, do two things, call different funcitons etc..
2013-03-29 15:46:00	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 15:46:00	latermuse	dates: yes
2013-03-29 15:46:06	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Remote host closed the connection)
2013-03-29 15:46:17	ramses_	aCube: ^^
2013-03-29 15:46:25	latermuse	if True then someFunction >> someOtherFunction else aThirdFunction
2013-03-29 15:46:26	-->	croikle (~peterm@134.53.245.65) has joined #haskell
2013-03-29 15:47:06	dates	latermuse: using ">>" operation?
2013-03-29 15:47:08	aCube	ramses_: Sorry, i want the list sans the current element
2013-03-29 15:47:10	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-29 15:47:13	latermuse	dates: yes
2013-03-29 15:47:17	aCube	Another implementation:
2013-03-29 15:47:19	aCube	@ty \f l -> snd $ mapAccumL (\(l,r) e -> ((l ++ [e], tail r), f e (l ++ tail r))) ([], l) l
2013-03-29 15:47:20	lambdabot	(t -> [t] -> y) -> [t] -> [y]
2013-03-29 15:47:22	ramses_	aCube: ah, right..
2013-03-29 15:47:27	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-03-29 15:47:30	<--	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-03-29 15:47:31	azaq23	dates: everything is an expression in haskell, hence you cannot do a standalone "if" (except when you're in a monad and use guard, but that's a different topic); you must always specify the if and
2013-03-29 15:47:31	azaq23	the else block which need to return a value of the same type
2013-03-29 15:47:36	dates	latermuse : thank you
2013-03-29 15:47:54	latermuse	dates: play around with (>>) a bit
2013-03-29 15:48:11	dockside1	k00mi: Correct, i got confused from weird imports
2013-03-29 15:48:13	<--	guampa|2 (~guampa@unaffiliated/guampa) has quit (Ping timeout: 240 seconds)
2013-03-29 15:48:13	latermuse	dates: if you need to pass a parament from the first function to the second function, then use (>>=) instead of (>>)
2013-03-29 15:48:18	latermuse	parameter
2013-03-29 15:48:26	-->	anRch (~markmilli@pool-108-20-96-150.bstnma.east.verizon.net) has joined #haskell
2013-03-29 15:48:39	centrinia	@wn parament
2013-03-29 15:48:39	lambdabot	No match for "parament".
2013-03-29 15:49:08	ramses_	aCube: the one with delete will always remove the first element which is equal to the current element, not necessarily the current, right?
2013-03-29 15:49:16	azaq23	yeah let's tell him to use some monad operations on the (r ->) monad instead of clearly addressing the underlying issue which lets us infer that he wants to do imperative programming in haskell
2013-03-29 15:49:23	<--	birch__ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has quit (Quit: Leaving)
2013-03-29 15:49:36	latermuse	> if True then (putStrLn "hi" >> putStrLn "meow") else putStrLn "moo"
2013-03-29 15:49:38	azaq23	someone who has to ask for if clearly has experience in the use of monads and can do so responsible
2013-03-29 15:49:38	lambdabot	  No instance for (GHC.Show.Show (GHC.Types.IO ()))
2013-03-29 15:49:38	lambdabot	   arising from a use of ...
2013-03-29 15:49:46	latermuse	bah
2013-03-29 15:50:01	latermuse	azaq23: nothing wrong with imperative programming in haskell
2013-03-29 15:50:11	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Remote host closed the connection)
2013-03-29 15:50:44	-->	DarkFox (~DarkFox@maharani.meskarune.com) has joined #haskell
2013-03-29 15:50:44	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-29 15:51:02	-->	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2013-03-29 15:51:02	aCube	ramses_: yes, but I forgot to say that no element appears twice in the list
2013-03-29 15:51:07	--	DarkFox is now known as Guest67606
2013-03-29 15:51:21	-->	madjestic (~madjestic@188.90.225.99) has joined #haskell
2013-03-29 15:51:21	<--	Guest67606 (~DarkFox@maharani.meskarune.com) has quit (Changing host)
2013-03-29 15:51:21	-->	Guest67606 (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 15:51:55	--	Guest67606 is now known as DarkFox
2013-03-29 15:52:00	ramses_	aCube: you could also write an efficient select function, like the standard prolog predicate, and use that. May be more efficient
2013-03-29 15:52:04	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-29 15:52:13	latermuse	dates: you probably want to read some "monad tutorials" if you really want to understand the question that you are asking
2013-03-29 15:52:14	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Client Quit)
2013-03-29 15:52:26	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 15:52:32	ramses_	latermuse: bah, monad tutorials
2013-03-29 15:52:47	latermuse	ramses_: they suck, but a beginner has to start somewhere
2013-03-29 15:53:04	-->	sellout- (~Adium@70.96.9.235) has joined #haskell
2013-03-29 15:53:18	Kyo	what is the recommended interface to use to build a protocol for a server using haskell? im going to build a linux server that serves a webapp and ranks soccer streams. use a simple socket interface or is there something more high level?
2013-03-29 15:53:36	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-29 15:53:37	ramses_	latermuse: one should start with a good general tutorial which builds up all necessary abstractions to make monads as easy as they are
2013-03-29 15:53:42	latermuse	kyo: there are quite a few mature haskell servers
2013-03-29 15:53:42	dates	latermuse : I'm checking them on hoogle right now
2013-03-29 15:53:49	<--	trescenzi (~trescenzi@2620:91:0:163:7076:9a6a:c074:7cbc) has quit (Remote host closed the connection)
2013-03-29 15:53:55	latermuse	kyo: might be more fun to use sockets though
2013-03-29 15:54:35	-->	trescenzi (~trescenzi@148.100.79.90) has joined #haskell
2013-03-29 15:54:37	<--	trescenzi (~trescenzi@148.100.79.90) has quit (Remote host closed the connection)
2013-03-29 15:54:50	Kyo	latermuse: soft realtime = it needs to get there almost always to function properly but if it misses something every now or then or gets a bit light every now and then noone dies. hard realtime = this task needs to finish within 1ms or the patient dies.
2013-03-29 15:54:53	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 15:54:55	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-03-29 15:55:24	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-03-29 15:55:30	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 15:55:53	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-29 15:55:56	<--	cyril_ (cyril@nat/intel/x-pyefjaqfjjqcrgrt) has quit (Ping timeout: 246 seconds)
2013-03-29 15:55:58	<--	madjestic (~madjestic@188.90.225.99) has quit (Read error: Connection reset by peer)
2013-03-29 15:56:27	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-29 15:56:33	<--	skchrko (~sk@31.28.233.39) has quit (Quit: .)
2013-03-29 15:56:49	-->	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has joined #haskell
2013-03-29 15:57:55	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-29 15:58:13	S11001001	@djinn (a -> ()) -> [a] -> ()
2013-03-29 15:58:14	lambdabot	Error: Undefined type []
2013-03-29 15:58:24	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-29 15:58:41	Taneb	:t fold
2013-03-29 15:58:43	lambdabot	(Foldable t, Monoid m) => t m -> m
2013-03-29 15:58:45	Taneb	:t foldMap
2013-03-29 15:58:46	lambdabot	(Foldable t, Monoid m) => (a -> m) -> t a -> m
2013-03-29 15:59:02	Taneb	:t foldMap (a -> ()) -> [a] -> ()
2013-03-29 15:59:04	lambdabot	parse error on input `->'
2013-03-29 15:59:10	Taneb	:t foldMap : (a -> ()) -> [a] -> ()
2013-03-29 15:59:12	lambdabot	parse error on input `->'
2013-03-29 15:59:13	Taneb	Bah
2013-03-29 15:59:18	S11001001	Taneb: I wanted to see what djinn would do specifically
2013-03-29 15:59:27	<--	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-29 15:59:27	aCube	:D
2013-03-29 15:59:40	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 16:00:01	Taneb	probably \_ _ -> ()
2013-03-29 16:00:07	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: testing)
2013-03-29 16:00:09	S11001001	maybe
2013-03-29 16:00:24	S11001001	@djinn (a -> ()) -> (a, a) -> ()
2013-03-29 16:00:25	lambdabot	f a (b, _) = a b
2013-03-29 16:00:31	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 16:00:36	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Remote host closed the connection)
2013-03-29 16:00:42	S11001001	maybe not
2013-03-29 16:00:51	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-03-29 16:01:32	<--	ludamad (~adomurad@67.55.40.60) has quit (Ping timeout: 258 seconds)
2013-03-29 16:01:36	-->	madjestic (~madjestic@188.90.225.99) has joined #haskell
2013-03-29 16:01:39	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-29 16:01:50	<--	fizbin (~Adium@pool-173-72-83-132.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-03-29 16:01:52	elliott	djinn can't do lists
2013-03-29 16:01:57	elliott	so it wouldn't :P
2013-03-29 16:02:12	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 16:02:35	<--	Luke (~lhoersten@160.79.132.254) has quit (Ping timeout: 255 seconds)
2013-03-29 16:03:13	S11001001	@djinn (a -> ()) -> (b -> ()) -> (a, b) -> ()
2013-03-29 16:03:13	lambdabot	f a _ (b, _) = a b
2013-03-29 16:03:15	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-29 16:03:29	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-29 16:03:45	-->	skchrko (~sk@31.28.233.39) has joined #haskell
2013-03-29 16:03:58	ParahSailin	whats djinn?
2013-03-29 16:04:03	supki	@djinn (a -> ()) -> (b -> ()) -> (a, b) -> ((), ())
2013-03-29 16:04:03	lambdabot	f _ _ _ = ((), ())
2013-03-29 16:04:08	<--	croikle (~peterm@134.53.245.65) has quit (Quit: croikle)
2013-03-29 16:04:12	-->	cognominal (~cognomina@37.160.8.103) has joined #haskell
2013-03-29 16:04:22	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-29 16:04:24	<--	JaRoel (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 264 seconds)
2013-03-29 16:04:43	S11001001	@ty (***)
2013-03-29 16:04:44	lambdabot	Arrow a => a b c -> a b' c' -> a (b, b') (c, c')
2013-03-29 16:05:15	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-29 16:05:21	notdan	Ugh, there is no insertWith or unionWith in Data.Set :(
2013-03-29 16:05:28	notdan	I thought it had interface similar to Map
2013-03-29 16:05:53	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-29 16:05:55	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-03-29 16:06:28	<--	ArthurVard (~androirc@46.162.246.71) has quit (Remote host closed the connection)
2013-03-29 16:06:41	-->	ArthurVard (~androirc@46.162.246.71) has joined #haskell
2013-03-29 16:06:45	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 16:07:07	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-03-29 16:08:56	<--	madjestic (~madjestic@188.90.225.99) has quit (Ping timeout: 252 seconds)
2013-03-29 16:09:02	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-29 16:09:28	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-03-29 16:09:29	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 16:10:09	elliott	notdan: what would it mean to have those in Set?
2013-03-29 16:10:17	elliott	Set k is like Map k ()
2013-03-29 16:10:59	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-03-29 16:11:11	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 16:11:24	-->	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2013-03-29 16:12:14	k00mi	elliott: on values where Ord is defined by e.g. an ID it would make sense
2013-03-29 16:12:43	<--	ryanakca (ryan@ubuntu/member/ryanakca) has quit (Ping timeout: 246 seconds)
2013-03-29 16:13:44	k00mi	i.e. where EQ does not mean the values are actually equal
2013-03-29 16:13:59	-->	luisgabriel (~luisgabri@177.158.98.48) has joined #haskell
2013-03-29 16:14:54	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 16:15:09	elliott	k00mi: if you are distinguishing values that are EQ for non-optimisation/internal implementation reasons, your instance is broken
2013-03-29 16:15:14	linduxed	instead of filtering two times, is there a way to add two conditions as the filter function?
2013-03-29 16:15:33	linduxed	so that i can do something like "filter (even && (<6))"?
2013-03-29 16:15:46	ocharles	linduxed: filter (\x -> even x && x < 6)
2013-03-29 16:15:48	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-29 16:15:53	linduxed	aaah yes
2013-03-29 16:15:57	linduxed	ofc
2013-03-29 16:15:59	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-29 16:15:59	linduxed	hahah
2013-03-29 16:16:03	ocharles	there are ways to do it point free, too
2013-03-29 16:16:12	linduxed	mind blanked there, ocharles
2013-03-29 16:16:12	-->	nh2 (~nh2@149.241.12.113) has joined #haskell
2013-03-29 16:16:20	linduxed	ocharles: hmmm, you think so?
2013-03-29 16:16:33	linduxed	or well, i expect that there is, but i can't think of the way
2013-03-29 16:16:34	<--	lattenwald (~qalex@195.218.191.171) has quit (Ping timeout: 246 seconds)
2013-03-29 16:17:13	-->	trescenzi (~trescenzi@148.100.79.90) has joined #haskell
2013-03-29 16:17:46	-->	system64 (~system64@202.78.175.199) has joined #haskell
2013-03-29 16:17:56	ocharles	> filter ((&&) <$> even <*> (<6)) [1..10]
2013-03-29 16:17:58	lambdabot	  [2,4]
2013-03-29 16:18:01	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 16:18:11	linduxed	whoa
2013-03-29 16:18:13	k00mi	elliott: that is correct, although such an instance would make sense for Set (but I understand that is not what Ord is intended for)
2013-03-29 16:18:18	linduxed	i'd never figure that one out
2013-03-29 16:18:28	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-29 16:18:39	linduxed	i don't even know what the <$> and <*> are
2013-03-29 16:18:45	ocharles	linduxed: it uses the (int ->) reader applicative instance
2013-03-29 16:18:47	Philonous	linduxed:  The trick to understanding that is understanding the Applicative instance for (-> r)
2013-03-29 16:18:49	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 16:18:51	dmwit	aCube: There is, indeed, a better way.
2013-03-29 16:19:02	ocharles	but really, I think \x -> ... is clearer
2013-03-29 16:19:02	elliott	k00mi: you could use Map TheID TheOtherStuff
2013-03-29 16:19:04	dmwit	aCube: Step one is to write a function that takes a list and returns all the zippers.
2013-03-29 16:19:08	<--	casucci (~zeke@unaffiliated/casucci) has quit (Client Quit)
2013-03-29 16:19:09	ion	linduxed: liftA2, http://heh.fi/haskell/functors/#function-instance
2013-03-29 16:19:16	linduxed	Philonous: yeah, i'm not that fluent with it yet :-S
2013-03-29 16:19:23	elliott	ocharles: liftA (&&) even (<6) is perhaps nicer (though the explicit lambda is obviously the way to go here)
2013-03-29 16:19:28	ion	linduxed: Also, what ocharles said.
2013-03-29 16:20:01	ocharles	I wonder if you can do it with distribute and getAll or something too
2013-03-29 16:20:25	k00mi	elliott: right
2013-03-29 16:21:13	<--	Franciman (~quassel@host32-163-dynamic.27-79-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-03-29 16:22:13	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Ping timeout: 248 seconds)
2013-03-29 16:22:39	ramses_	@ty filter . fmap and . Data.Traversable.sequenceA
2013-03-29 16:22:40	lambdabot	[a -> Bool] -> [a] -> [a]
2013-03-29 16:22:54	ramses_	linduxed: ^^ works for a list of boolean functions
2013-03-29 16:22:56	dmwit	> zip <$> inits <*> tails $ [1..5]
2013-03-29 16:22:57	lambdabot	  [([],[1,2,3,4,5]),([1],[2,3,4,5]),([1,2],[3,4,5]),([1,2,3],[4,5]),([1,2,3,4...
2013-03-29 16:23:30	ocharles	> filter (all . distribute [ even, (<6) ]) [1..10]
2013-03-29 16:23:32	lambdabot	  Not in scope: `distribute'
2013-03-29 16:23:32	lambdabot	 Perhaps you meant `distrib' (imported from Cont...
2013-03-29 16:23:34	ocharles	lame.
2013-03-29 16:23:39	linduxed	omg, this is too heavy for me atm
2013-03-29 16:23:45	aCube	> zip <*> inits <$> tails $ [1,2,3]
2013-03-29 16:23:46	linduxed	i'll dig into that stuff quite soon
2013-03-29 16:23:47	lambdabot	  [([1,2,3],[]),([2,3],[[1,2,3]]),([3],[[1,2,3],[2,3]]),([],[[1,2,3],[2,3],[3...
2013-03-29 16:23:53	linduxed	but right now it's too heavy
2013-03-29 16:24:04	ocharles	linduxed: don't worry about it
2013-03-29 16:24:05	ocharles	linduxed: haskell lets you go as far as you want
2013-03-29 16:24:16	ocharles	linduxed: as cool as other solutions are, the explicit lambda is easily the clearest
2013-03-29 16:24:20	dmwit	aCube: It depends a bit on exactly what you want to do with "the rest of the list", of course.
2013-03-29 16:24:22	ocharles	and clarity wins over cleverness
2013-03-29 16:24:43	dmwit	aCube: I prefer the function that's efficient but semantically equivalent to
2013-03-29 16:24:47	ramses_	maybe I shouldn't have taken the pointfree version, but I copy pasted it from some code I wrote a while ago
2013-03-29 16:24:50	linduxed	ocharles: we'll i'm currently only a couple of paragraphs into this chapter http://learnyouahaskell.com/functors-applicative-functors-and-monoids#functors-redux
2013-03-29 16:25:03	linduxed	ocharles: so i should get there quite soon
2013-03-29 16:25:05	dmwit	aCube: ...that function, but reverses the first list in each tuple.
2013-03-29 16:25:10	ocharles	linduxed: ok, you have a bit of time to go :)
2013-03-29 16:25:23	aCube	dmwit: yes, that's easier :D
2013-03-29 16:25:26	ocharles	linduxed: just take your time and get comfortable with each step - this will come naturally, in the end
2013-03-29 16:25:29	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 16:25:30	ocharles	(i started with that book too)
2013-03-29 16:25:54	ramses_	linduxed: that chapter is where the fun begins! :)
2013-03-29 16:26:03	ocharles	indeed, applicatives are da bomb
2013-03-29 16:26:30	dmwit	> let zippers = go []; zippers xs ys = (xs, ys) : case ys of [] -> []; y:yt -> go (y:xs) yt in zippers [1..3]
2013-03-29 16:26:32	lambdabot	  Conflicting definitions for `zippers'
2013-03-29 16:26:32	lambdabot	 Bound at: <interactive>:1:5-11
2013-03-29 16:26:32	lambdabot	     ...
2013-03-29 16:26:46	dmwit	> let zippers = go []; go xs ys = (xs, ys) : case ys of [] -> []; y:yt -> go (y:xs) yt in zippers [1..3]
2013-03-29 16:26:47	lambdabot	  [([],[1,2,3]),([1],[2,3]),([2,1],[3]),([3,2,1],[])]
2013-03-29 16:27:15	-->	ryanakca (ryan@ubuntu/member/ryanakca) has joined #haskell
2013-03-29 16:27:19	aCube	@ty \f l -> snd $ mapAccumL (\(l,r) e -> ((e:l, tail r), f e (l ++ tail r))) ([], l) l
2013-03-29 16:27:21	lambdabot	(a -> [a] -> y) -> [a] -> [y]
2013-03-29 16:27:21	dmwit	aCube: I would start with this function.
2013-03-29 16:27:24	aCube	dmwit: ^
2013-03-29 16:27:34	linduxed	robbe-: oh yeah it sure feels like it
2013-03-29 16:27:44	linduxed	ramses_: shit got real in a real hurry
2013-03-29 16:27:48	dmwit	:t mapAccumL
2013-03-29 16:27:49	lambdabot	(acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
2013-03-29 16:28:15	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 260 seconds)
2013-03-29 16:28:28	ramses_	linduxed: I'm not sure what you mean by that..
2013-03-29 16:28:33	-->	edon (~user@albalug/edon) has joined #haskell
2013-03-29 16:28:46	dmwit	aCube: Yes, that's similar.
2013-03-29 16:29:02	linduxed	ramses_: everything up to that point took some time to memorize, but not really to digest
2013-03-29 16:29:07	aCube	But I quite like the version with inits and tails :)
2013-03-29 16:29:11	dmwit	aCube: Except that whatever function you hand to that isn't allowed to observe *where* in the list the element it's currently looking at was extracted from.
2013-03-29 16:29:15	linduxed	ramses_: there was a lot of it, but it wasn't all that hard
2013-03-29 16:29:23	linduxed	ramses_: this chapeter however... holy shit
2013-03-29 16:29:32	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 16:29:40	linduxed	ramses_: i can only imagine what will happen in the coming chapters
2013-03-29 16:29:42	ramses_	linduxed: indeed, from that chapter on, the really nice (but harder to grasp initially) abstractions are discussed
2013-03-29 16:30:08	<--	jacobw (~jacobw@unaffiliated/jacobw) has quit (Quit: WeeChat 0.4.0)
2013-03-29 16:30:28	dmwit	aCube: Also, I guess you're probably getting some bits of the list in reverse order there, no?
2013-03-29 16:30:50	ramses_	linduxed: I found applicatives the hardest to get an intuition for, but once you got those, monads will seem easy
2013-03-29 16:30:54	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-29 16:31:05	dmwit	> snd $ mapAccumL (\(l,r) e -> ((e:l, tail r), l ++ tail r)) ([], [1..5]) [1..5]
2013-03-29 16:31:07	lambdabot	  [[2,3,4,5],[1,3,4,5],[2,1,4,5],[3,2,1,5],[4,3,2,1]]
2013-03-29 16:31:16	dmwit	Right, see the end. =)
2013-03-29 16:31:30	<--	sbahra (~sbahra@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving)
2013-03-29 16:32:13	aCube	> let f = \f l -> snd $ mapAccumL (\(l,r) e -> ((e:l, tail r), f e (l ++ tail r))) ([], l) l in f (,) [1..5]
2013-03-29 16:32:15	lambdabot	  [(1,[2,3,4,5]),(2,[1,3,4,5]),(3,[2,1,4,5]),(4,[3,2,1,5]),(5,[4,3,2,1])]
2013-03-29 16:32:35	aCube	yes, that is the reversed version
2013-03-29 16:32:36	--	nonymousa is now known as AmaBoten
2013-03-29 16:32:43	dmwit	In the middle, you get lists where part of the list is forward, part is backward, and there's no indication where the separation is.
2013-03-29 16:32:46	dmwit	That seems bad to me.
2013-03-29 16:32:56	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-03-29 16:32:58	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-29 16:33:11	aCube	> let f = \f l -> snd $ mapAccumL (\(l,r) e -> ((l ++ [e], tail r), f e (l ++ tail r))) ([], l) l in f (,) [1..5]
2013-03-29 16:33:13	lambdabot	  [(1,[2,3,4,5]),(2,[1,3,4,5]),(3,[1,2,4,5]),(4,[1,2,3,5]),(5,[1,2,3,4])]
2013-03-29 16:33:34	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-29 16:33:43	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-03-29 16:33:52	dmwit	Again, the right way to write this function depends a bit on what your plan for consuming the data is.
2013-03-29 16:34:54	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 16:35:02	aCube	> let f = \f l -> map (\(a,b) -> f (head b) (a ++ tail b)) $ init $ zip (inits l) (tails l) in f (,) [1..5]
2013-03-29 16:35:05	lambdabot	  [(1,[2,3,4,5]),(2,[1,3,4,5]),(3,[1,2,4,5]),(4,[1,2,3,5]),(5,[1,2,3,4])]
2013-03-29 16:35:18	aCube	I like that way tp write it :D
2013-03-29 16:35:49	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-03-29 16:35:51	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 16:35:53	<--	cognominal (~cognomina@37.160.8.103) has quit (Ping timeout: 255 seconds)
2013-03-29 16:35:54	-->	Siphonblast (~icarot@2600:1010:b103:48fb:0:45:47d3:b201) has joined #haskell
2013-03-29 16:35:56	<--	system64 (~system64@202.78.175.199) has quit (Quit: Computer has gone to sleep.)
2013-03-29 16:35:59	-->	ludamad (~adomurad@38.108.79.102) has joined #haskell
2013-03-29 16:36:05	<--	JohnBat26 (~Eugene@89.175.77.161) has quit (Quit: KVIrc 4.3.1 Aria http://www.kvirc.net/)
2013-03-29 16:36:05	<--	LeaChim (~LeaChim@xelix.net) has quit (Remote host closed the connection)
2013-03-29 16:36:29	-->	yc4891 (~andrew@119.123.182.139) has joined #haskell
2013-03-29 16:36:38	<--	anRch (~markmilli@pool-108-20-96-150.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-03-29 16:36:38	Sculptor	hi
2013-03-29 16:37:15	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-29 16:38:00	<--	icarot (~icarot@c-50-131-62-151.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 16:38:27	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-03-29 16:38:55	-->	cognominal (~cognomina@37.161.7.74) has joined #haskell
2013-03-29 16:39:09	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-29 16:39:45	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 16:40:37	<--	js6i_ (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Remote host closed the connection)
2013-03-29 16:40:49	dmwit	aCube: Why not \f l -> [f b (a ++ e) | (a, b:e) <- zip (inits l) (tails l)]
2013-03-29 16:40:58	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 16:41:40	-->	LeaChim (~LeaChim@xelix.net) has joined #haskell
2013-03-29 16:41:42	aCube	dmwit: oh, that's even nicer :) Thanks
2013-03-29 16:41:42	<--	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has quit (Ping timeout: 245 seconds)
2013-03-29 16:42:11	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-29 16:42:15	<--	DrChaos (~DrChaos@cpe-70-123-204-134.satx.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-03-29 16:43:04	-->	AndroUser2 (~androirc@46.162.246.71) has joined #haskell
2013-03-29 16:43:04	<--	ArthurVard (~androirc@46.162.246.71) has quit (Read error: Connection reset by peer)
2013-03-29 16:43:46	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-03-29 16:43:51	<--	AndroUser2 (~androirc@46.162.246.71) has quit (Read error: Connection reset by peer)
2013-03-29 16:44:01	-->	glguy (~emertens@unaffiliated/glguy) has joined #haskell
2013-03-29 16:44:20	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-29 16:44:54	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 256 seconds)
2013-03-29 16:45:06	-->	`cc` (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has joined #haskell
2013-03-29 16:45:17	-->	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has joined #haskell
2013-03-29 16:45:42	ramses_	 @ty let select [] = []; select (x:xs) = (x,xs) : map (\(y,ys) -> (y,x:ys)) (select xs) in \f
2013-03-29 16:45:53	-->	ormaaj (~ormaaj@71-220-13-116.mpls.qwest.net) has joined #haskell
2013-03-29 16:46:00	<--	cognominal (~cognomina@37.161.7.74) has quit (Ping timeout: 258 seconds)
2013-03-29 16:46:21	ramses_	err
2013-03-29 16:46:25	ramses_	@ty let select [] = []; select (x:xs) = (x,xs) : map (\(y,ys) -> (y,x:ys)) (select xs) in \f -> map (uncurry f) . select
2013-03-29 16:46:27	lambdabot	(a -> [a] -> b) -> [a] -> [b]
2013-03-29 16:47:03	`cc`	if you have a Map of string , [int] , is it easy to insert a new (string, int) by appending it existing key or inserting a singleton else
2013-03-29 16:47:05	<--	charliesome (~textual@124-148-140-249.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-29 16:47:19	<--	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has quit (Ping timeout: 264 seconds)
2013-03-29 16:47:25	`cc`	(like the append of erlang)
2013-03-29 16:47:29	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-03-29 16:47:30	ramses_	`cc`: insertWith
2013-03-29 16:48:26	ramses_	@ty Data.Map.insertWith (++)
2013-03-29 16:48:28	lambdabot	(Ord k, Monoid a) => k -> a -> M.Map k a -> M.Map k a
2013-03-29 16:49:01	`cc`	> Map.insertWith  5 'e' fromList [(5,'a'), (3,'b')]
2013-03-29 16:49:03	lambdabot	  Not in scope: `Map.insertWith'
2013-03-29 16:49:03	lambdabot	 Perhaps you meant one of these:
2013-03-29 16:49:03	lambdabot	   `M.inser...
2013-03-29 16:49:05	-->	peter__ (~peter@unaffiliated/petrus) has joined #haskell
2013-03-29 16:49:06	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-29 16:49:20	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 16:49:32	`cc`	> Data.Map.insertWith  5 'e' Data.Map.fromList [(5,'a'), (3,'b')]
2013-03-29 16:49:34	lambdabot	  mueval-core: L.hs: removeLink: does not exist (No such file or directory)
2013-03-29 16:49:50	monochrom	try again, race condition
2013-03-29 16:49:51	`cc`	> Data.Map.insertWith  5 'e' (Data.Map.fromList [(5,'a'), (3,'b')])
2013-03-29 16:49:52	lambdabot	  Not in scope: `Data.Map.insertWith'Not in scope: `Data.Map.fromList'
2013-03-29 16:50:03	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 16:50:13	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 258 seconds)
2013-03-29 16:50:23	-->	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has joined #haskell
2013-03-29 16:50:33	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Ping timeout: 245 seconds)
2013-03-29 16:50:35	-->	cyril_ (cyril@nat/intel/x-ltkesuwkceprydty) has joined #haskell
2013-03-29 16:50:49	monochrom	perhaps they call it M.insertWith and M.fromList
2013-03-29 16:50:53	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-03-29 16:51:09	`cc`	> M.insertWith  5 'e' (M.fromList [(5,'a'), (3,'b')])
2013-03-29 16:51:11	lambdabot	  No instance for (GHC.Num.Num (Data.Map.Map k0 GHC.Types.Char))
2013-03-29 16:51:11	lambdabot	   arising f...
2013-03-29 16:51:24	byorgey	`cc`: note you'll have to use  "e", "a", "b"
2013-03-29 16:51:26	aCube	:t M.insertWith
2013-03-29 16:51:28	lambdabot	Ord k => (a -> a -> a) -> k -> a -> M.Map k a -> M.Map k a
2013-03-29 16:51:28	byorgey	'e' is a Char
2013-03-29 16:51:30	monochrom	where is your (++)?
2013-03-29 16:51:32	`cc`	> M.insertWith  5 'e' (M.fromList [(5,"a"), (3,"b")])
2013-03-29 16:51:34	lambdabot	  No instance for (GHC.Num.Num (Data.Map.Map k0 [GHC.Types.Char]))
2013-03-29 16:51:34	lambdabot	   arising...
2013-03-29 16:51:37	ramses_	> M.insertWith  (++) 5 "e" $ M.fromList [(5,"a"), (3,"b")]
2013-03-29 16:51:39	lambdabot	  fromList [(3,"b"),(5,"ea")]
2013-03-29 16:51:44	`cc`	hehe
2013-03-29 16:51:55	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 246 seconds)
2013-03-29 16:52:01	bobry	is there a guide on working with primitive array operations? for example GHC.Prim.writeByteArray#
2013-03-29 16:52:54	-->	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has joined #haskell
2013-03-29 16:53:35	<--	peter__ (~peter@unaffiliated/petrus) has quit (Quit: leaving)
2013-03-29 16:53:39	`cc`	ramses_, thx
2013-03-29 16:53:58	ludamad	 \o/ first time rewriting a 'do' block using >>=
2013-03-29 16:54:05	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-29 16:54:12	ramses_	@ty (++)  --  Wtf, this is a synonym for (<>) now?
2013-03-29 16:54:13	lambdabot	Monoid m => m -> m -> m
2013-03-29 16:54:17	-->	cognominal (~cognomina@37.160.37.75) has joined #haskell
2013-03-29 16:54:25	ramses_	`cc`: np :)
2013-03-29 16:54:27	nicoo	ludamad: First time doing bindage ?
2013-03-29 16:54:30	nicoo	So kinky.
2013-03-29 16:54:31	--	stelleg_away is now known as stelleg
2013-03-29 16:55:03	ludamad	nicoo: Uhh, maybe
2013-03-29 16:55:17	nicoo	^_^
2013-03-29 16:55:34	nicoo	ludamad: Was just a silly pun on bondage :)
2013-03-29 16:55:37	--	DarkFox is now known as DarkFoxy
2013-03-29 16:55:44	--	DarkFoxy is now known as DarkFox
2013-03-29 16:55:55	ludamad	nicoo: Yes, but is >>= called binding or something ?
2013-03-29 16:56:08	monochrom	it is usually called bind
2013-03-29 16:56:14	ludamad	ok
2013-03-29 16:56:29	<--	Taneb (~nathan@host-92-23-142-211.as13285.net) has quit (Ping timeout: 246 seconds)
2013-03-29 16:56:40	monochrom	http://ro-che.info/ccc/01.html
2013-03-29 16:56:53	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Quit: ♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪)
2013-03-29 16:57:04	-->	osa1 (~omer@176.237.218.208) has joined #haskell
2013-03-29 16:57:19	ludamad	monochrom: Gah the PUUUNS
2013-03-29 16:57:43	ludamad	anyway, time to write it back to a do block for the sake of my friends eyes
2013-03-29 16:57:50	<--	joe9 (~user@c-24-98-97-215.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-29 16:58:11	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 16:58:14	nicoo	monochrom: Sooo classim :)
2013-03-29 16:58:41	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-29 16:59:09	<--	`cc` (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has quit (Quit: Quitte)
2013-03-29 16:59:44	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-03-29 16:59:46	magicman	Does anyone here know who introduced the concept of base functors of recursive datatypes?
2013-03-29 16:59:52	<--	kmrhb (~kmrhb@modemcable116.174-81-70.mc.videotron.ca) has quit (Quit: kmrhb)
2013-03-29 17:01:30	Kaidelong	ludamad: because the operation is analogous to being able to refer to the result of a subcomputation in another computation
2013-03-29 17:01:41	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: Lost terminal)
2013-03-29 17:01:56	magicman	Specifically, I'm looking for a way to systematically derive a base functor from a given datatype, and to actually prove the functoriality of datatypes created by this construction.
2013-03-29 17:02:27	-->	M30W (~M30W@nw1225.affinityvision.com.au) has joined #haskell
2013-03-29 17:02:27	<--	M30W (~M30W@nw1225.affinityvision.com.au) has quit (Changing host)
2013-03-29 17:02:27	-->	M30W (~M30W@unaffiliated/archeydevil/bot/archeydevot) has joined #haskell
2013-03-29 17:02:31	Kaidelong	basically for some computing system m, a value of type m a, an a computed in by the system m, that value can be accessed in another computation as a value of type a
2013-03-29 17:02:40	Kyo	a
2013-03-29 17:02:45	Kaidelong	provided it is also a computation done by the system m
2013-03-29 17:02:49	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 17:02:51	--	M30W is now known as Guest26458
2013-03-29 17:02:53	--	Guest26458 is now known as darkFoxy
2013-03-29 17:02:57	--	darkFoxy is now known as DarkFoxy
2013-03-29 17:03:06	monochrom	"data X = .... X ..." becomes "data XBase again = ... again ..."
2013-03-29 17:03:38	Kaidelong	the way you import those bindings in is that you make functions from (a -> m b) that insert the value into the context that wants to bind it
2013-03-29 17:03:38	<--	Aune (~arne@ronon.lysator.liu.se) has quit (Quit: Hath Deprated)
2013-03-29 17:03:53	Kaidelong	hence the type m a -> (a -> m b) -> m b
2013-03-29 17:03:57	-->	kmrhb (~kmrhb@modemcable116.174-81-70.mc.videotron.ca) has joined #haskell
2013-03-29 17:04:31	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Leaving...)
2013-03-29 17:04:50	Kaidelong	I'm pretty sure that's the logic behind the name bind anyway, it's analogous to the idea of a binding in a programming language
2013-03-29 17:04:52	magicman	monochrom: Right, so basically a dumb search-and-replace for the original datatype header?
2013-03-29 17:04:57	ludamad	Kaidelong: makes sense, thanks
2013-03-29 17:05:03	monochrom	yes
2013-03-29 17:06:13	Kaidelong	I think that analogy is also what separates monads from applicative functors
2013-03-29 17:06:26	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:06:31	<--	pantsman- (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Quit: Leaving)
2013-03-29 17:06:32	Kaidelong	in an applicative functor you can't refer to the contents of other applicative functors by name
2013-03-29 17:06:46	Kaidelong	you can just lift pure functions of arbitrary numbers of arguments
2013-03-29 17:06:49	<--	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-29 17:06:53	<--	cyril_ (cyril@nat/intel/x-ltkesuwkceprydty) has quit (Ping timeout: 240 seconds)
2013-03-29 17:06:58	-->	lhooq (~chatzilla@2001:558:600b:f:5c9c:e310:ef19:5dee) has joined #haskell
2013-03-29 17:07:02	<--	trescenzi (~trescenzi@148.100.79.90) has quit (Remote host closed the connection)
2013-03-29 17:07:08	-->	joaopiza1i (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:07:18	-->	petrus (~petrus@unaffiliated/petrus) has joined #haskell
2013-03-29 17:07:28	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 258 seconds)
2013-03-29 17:07:28	ludamad	Kaidelong: What's an example of an applicative functor ?
2013-03-29 17:07:37	<--	DarkFoxy (~M30W@unaffiliated/archeydevil/bot/archeydevot) has left #haskell ("♪┏( ･o･)┛♪┗(･o･)┓♪┏(･o･)┛♪┗(･o･ )┓♪")
2013-03-29 17:07:39	-->	bos (~bos@c-67-164-98-198.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 17:07:42	<--	joaopiza1i (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:07:47	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:07:53	<--	phischu (~pschuster@p4FD306BE.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-03-29 17:07:55	Kaidelong	ludamad: I think ZipLists are one of the few examples of an applicative functor that is not always a monad, but all monads are also applicative functors
2013-03-29 17:08:07	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:08:16	Kaidelong	also a monad...
2013-03-29 17:08:22	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 17:08:36	-->	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has joined #haskell
2013-03-29 17:08:51	-->	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has joined #haskell
2013-03-29 17:08:51	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:09:28	<--	Flame_Alchemist (~Flame_Alc@host245-236-dynamic.11-79-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-03-29 17:09:42	Kaidelong	IE you could define readInt :: IO Int = read . getLine
2013-03-29 17:09:43	Kaidelong	err
2013-03-29 17:09:44	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-03-29 17:09:50	Kaidelong	read <$> getLine
2013-03-29 17:09:52	Kaidelong	I meant
2013-03-29 17:09:56	-->	finchedura (~finchedur@host218-125-dynamic.244-95-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 17:09:57	mauke	readLn
2013-03-29 17:10:00	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:10:04	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:10:07	Kaidelong	and then use that readInt applicatively
2013-03-29 17:10:29	ludamad	:t <$>
2013-03-29 17:10:31	lambdabot	parse error on input `<$>'
2013-03-29 17:10:38	ludamad	:t (<$>)
2013-03-29 17:10:39	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-03-29 17:10:40	mauke	:t (+) <$> readLn <*> readLn
2013-03-29 17:10:42	lambdabot	(Num b, Read b) => IO b
2013-03-29 17:10:59	Kaidelong	sumTwo :: IO () = ((+) <$> readInt <*> readInt) >>= print
2013-03-29 17:11:20	Kaidelong	which prints the sum of two integers read from the command line
2013-03-29 17:11:27	mauke	:t print =<< (+) <$> readLn <*> readLn
2013-03-29 17:11:28	lambdabot	IO ()
2013-03-29 17:11:43	-->	Flame_Alchemist (~Flame_Alc@host245-236-dynamic.11-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 17:11:56	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:12:07	<--	yc4891 (~andrew@119.123.182.139) has quit (Ping timeout: 260 seconds)
2013-03-29 17:12:35	ludamad	:t liftM
2013-03-29 17:12:37	lambdabot	Monad m => (a1 -> r) -> m a1 -> m r
2013-03-29 17:13:00	Kaidelong	a way to see (+) <$> readInt <*> readInt being like
2013-03-29 17:13:01	ludamad	Is <$> a general version of liftM ?
2013-03-29 17:13:05	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2013-03-29 17:13:13	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-29 17:13:20	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 17:13:30	quchen	ludamad: <$> is infix for fmap
2013-03-29 17:13:33	quchen	And liftM = fmap
2013-03-29 17:13:43	Kaidelong	IO { $readInt + $readInt }, or something, to discard the haskell syntax to illustrate that you're using + in a different context, IO in this case
2013-03-29 17:13:48	ludamad	:t fmap
2013-03-29 17:13:50	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-03-29 17:14:02	joaopizani	ludamad: every Functor is also a Monad
2013-03-29 17:14:09	-->	tanakh_ (~tanakh@218240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-29 17:14:09	ludamad	Ah. And monad a functor ?
2013-03-29 17:14:10	joaopizani	:t liftM
2013-03-29 17:14:11	lambdabot	Monad m => (a1 -> r) -> m a1 -> m r
2013-03-29 17:14:13	Kaidelong	and that's what applicative functors are about, using functions of aribtrary numbers of arguments in different contexts
2013-03-29 17:14:14	byorgey	joaopizani: other way around.
2013-03-29 17:14:20	joaopizani	byorgey: sorry
2013-03-29 17:14:28	joaopizani	byorgey: exactly, every Monad is a Functor
2013-03-29 17:14:30	ludamad	right, so it is more general.
2013-03-29 17:14:33	ludamad	as I was asking
2013-03-29 17:14:41	-->	u_ (~phillip@75.57.186.245) has joined #haskell
2013-03-29 17:14:46	-->	niloc132 (~colin@173-23-182-156.client.mchsi.com) has joined #haskell
2013-03-29 17:14:49	Kaidelong	yeah monads are all functors because if you can get that binding behavior
2013-03-29 17:14:51	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-03-29 17:15:01	Kaidelong	then you can implement a generic conversion to all pure functions in the form
2013-03-29 17:15:12	<--	sellout- (~Adium@70.96.9.235) has quit (Quit: Leaving.)
2013-03-29 17:15:36	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Read error: Connection reset by peer)
2013-03-29 17:15:39	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-29 17:15:47	ludamad	thanks all
2013-03-29 17:15:56	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 17:15:57	Kaidelong	pureFunction5 f a' b' c' d' e' = do { a <- a'; b <- b'; c <- c'; ... return f a b c d e
2013-03-29 17:16:01	Kaidelong	 ; }
2013-03-29 17:16:02	ludamad	this category theory stuff is becoming a little less daunting
2013-03-29 17:16:40	Philonous	That's not really category theory.
2013-03-29 17:16:45	Kaidelong	I think this is still in the realm of algebra, category theory is where you start talking about how examples of these things relate to one another, like how a bitmap related to a pixel
2013-03-29 17:16:48	Kaidelong	relates even
2013-03-29 17:17:07	Kaidelong	like, what general relationship do bitmaps represent to their pixels
2013-03-29 17:17:14	Kaidelong	then you end up with terms like "monoid orphism"
2013-03-29 17:17:17	ludamad	sure. either way.
2013-03-29 17:17:26	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 258 seconds)
2013-03-29 17:17:26	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 17:17:49	<--	Siphonblast (~icarot@2600:1010:b103:48fb:0:45:47d3:b201) has quit (Ping timeout: 258 seconds)
2013-03-29 17:17:49	Kaidelong	and you start seeing that same kind of relationship between two data structures everywhere
2013-03-29 17:18:08	Kaidelong	if a data structure is an algebra then category theory is algebras for algebras
2013-03-29 17:18:09	Kaidelong	I guess
2013-03-29 17:18:36	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-03-29 17:18:48	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 17:18:48	Kaidelong	more abstract and IMHO less useful than the algebra part
2013-03-29 17:19:02	-->	tibbe (~tibbe@216.239.45.130) has joined #haskell
2013-03-29 17:19:40	Kaidelong	algebra helps you write correct programs, category theory helps you architect them, but architecture to me is usually the easy part because even for large programs the architecture is often simple
2013-03-29 17:19:46	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-03-29 17:20:02	<--	petrus (~petrus@unaffiliated/petrus) has left #haskell
2013-03-29 17:20:07	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 258 seconds)
2013-03-29 17:20:08	Kaidelong	both help by allowing you to see complex problems as simpler ones
2013-03-29 17:20:12	Kaidelong	through analogy
2013-03-29 17:20:15	tac	If you're talking about actual real programs, things grow much more organically.
2013-03-29 17:20:30	Kaidelong	that too
2013-03-29 17:21:10	Kaidelong	I mean there are some exceptions where a lot of the design was up front and by specification but usually things just evolve over time
2013-03-29 17:21:34	Kaidelong	where I still find that being able to identify "this is a monoid" is useful but "I want to make sure someone else can find a monoid morphism" not so much
2013-03-29 17:22:03	-->	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 17:22:12	-->	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 17:22:15	Kaidelong	I guess if you're designing a library the category-theory kind of viewpoint might be more useful
2013-03-29 17:22:22	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2013-03-29 17:22:29	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-03-29 17:22:30	Kaidelong	or it might be that I just haven't thought enough in that way to see how it is useful
2013-03-29 17:22:37	<--	mr- (~martin@rgnb-5d8625b7.pool.mediaWays.net) has quit (Quit: Lost terminal)
2013-03-29 17:23:17	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-29 17:23:50	Kaidelong	thinking about things in terms of algebra though is wonderful and I do it even when writing stuff like C#
2013-03-29 17:23:59	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 17:24:09	-->	cyril_ (cyril@nat/intel/x-kgnqvwqspjirdegb) has joined #haskell
2013-03-29 17:24:11	Kaidelong	since it lets you identify places where you can reuse code so that things break in less places
2013-03-29 17:25:09	Kaidelong	and typeclasses are one of the nicest features of haskell in part because it automates that algebraic idea of design where you make analogies between one statement and another one with extra context
2013-03-29 17:25:35	Kaidelong	although I suppose you could do it better with metaprogramming facilities in things like lisp or nermele, not that I've used those much
2013-03-29 17:26:52	Kaidelong	I guess it's somewhat like rhyming slang in that rather than saying what you mean you say something that rhymes with what you mean, in this case taking advantage of it being shorter
2013-03-29 17:26:59	Kaidelong	and that's where applicative functors come in handy
2013-03-29 17:27:04	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-03-29 17:27:33	-->	kartoffelbrei (~kartoffel@p5496255B.dip.t-dialin.net) has joined #haskell
2013-03-29 17:27:57	<--	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has quit (Ping timeout: 245 seconds)
2013-03-29 17:28:01	joaopizani	yeah... writing parsers using applicative functors was one of the nicest experiences I had lately :)
2013-03-29 17:28:29	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 17:29:05	-->	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-03-29 17:30:07	Sculptor	now you sound like sheldon
2013-03-29 17:31:07	-->	Rants (~quassel@204.132.65.177) has joined #haskell
2013-03-29 17:31:13	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Ping timeout: 240 seconds)
2013-03-29 17:31:45	-->	mononofu (~mononofu@chello062178010088.4.11.vie.surfer.at) has joined #haskell
2013-03-29 17:31:53	<--	bos (~bos@c-67-164-98-198.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-03-29 17:32:05	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-29 17:32:10	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Ping timeout: 246 seconds)
2013-03-29 17:32:11	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-03-29 17:32:25	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 17:32:29	-->	bos (~bos@c-67-164-98-198.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 17:32:46	-->	trescenzi (~trescenzi@2620:91:0:163:e001:9dcf:2d1f:a319) has joined #haskell
2013-03-29 17:33:11	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 17:33:23	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 17:33:32	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 17:33:52	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Read error: Connection reset by peer)
2013-03-29 17:34:11	-->	mr- (~martin@rgnb-5d8625b7.pool.mediaWays.net) has joined #haskell
2013-03-29 17:34:44	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-29 17:35:11	-->	path[l] (~vsi@173.252.71.129) has joined #haskell
2013-03-29 17:35:45	<--	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-29 17:35:45	<--	anRch (~markmilli@ip-64-134-66-30.public.wayport.net) has quit (Quit: anRch)
2013-03-29 17:36:04	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-29 17:36:32	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:36:33	<--	bos (~bos@c-67-164-98-198.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-29 17:36:38	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 255 seconds)
2013-03-29 17:37:19	ludamad	:t zip
2013-03-29 17:37:20	lambdabot	[a] -> [b] -> [(a, b)]
2013-03-29 17:37:34	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:37:47	<--	cyril_ (cyril@nat/intel/x-kgnqvwqspjirdegb) has quit (Ping timeout: 260 seconds)
2013-03-29 17:37:54	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:38:09	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 17:38:25	-->	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has joined #haskell
2013-03-29 17:38:31	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:39:26	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 17:39:38	ludamad	How can I do a m a -> m b -> m (a, b) ?
2013-03-29 17:39:44	ludamad	Or well, what's a terse way ?
2013-03-29 17:39:44	 *	hackagebot traverse-with-class 0.1 - Generic applicative traversals  http://hackage.haskell.org/package/traverse-with-class-0.1 (RomanCheplyaka)
2013-03-29 17:40:09	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-29 17:40:14	<--	Tesseraction_u (~Tesseract@unaffiliated/tesseraction) has quit (Ping timeout: 255 seconds)
2013-03-29 17:40:53	<--	LtWorf (~LtWorf@unaffiliated/ltworf) has quit (Quit: Mi siddiai)
2013-03-29 17:42:51	<--	dmarker (~dmarker@inet-hqmc03-o.oracle.com) has quit (Client Quit)
2013-03-29 17:43:02	--	bcoppens_ is now known as bcoppens
2013-03-29 17:44:02	elliott	ludamad: liftM2 (,)
2013-03-29 17:44:05	-->	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has joined #haskell
2013-03-29 17:44:12	ludamad	elliott, tyvm
2013-03-29 17:44:25	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-29 17:44:43	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-29 17:44:43	--	Watcher7|off is now known as Watcher7
2013-03-29 17:46:04	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-29 17:46:24	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 17:46:38	<--	lhooq (~chatzilla@2001:558:600b:f:5c9c:e310:ef19:5dee) has left #haskell
2013-03-29 17:47:12	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Read error: Operation timed out)
2013-03-29 17:47:12	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 17:47:15	-->	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 17:48:18	<--	vifanq (~vifanq@gateway/tor-sasl/vifanq) has quit (Ping timeout: 276 seconds)
2013-03-29 17:48:59	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 260 seconds)
2013-03-29 17:49:03	-->	vifanq (~vifanq@gateway/tor-sasl/vifanq) has joined #haskell
2013-03-29 17:50:22	<--	cognominal (~cognomina@37.160.37.75) has quit (Ping timeout: 246 seconds)
2013-03-29 17:50:35	<--	niloc132 (~colin@173-23-182-156.client.mchsi.com) has quit (Ping timeout: 255 seconds)
2013-03-29 17:50:37	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-29 17:50:43	--	tac is now known as tac-lunch
2013-03-29 17:50:55	-->	tjohnson (~tjohnson@128-193-152-160.ptpg.oregonstate.edu) has joined #haskell
2013-03-29 17:51:02	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 17:51:17	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 17:51:18	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 17:51:19	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-29 17:51:27	-->	Hannibal_Smith (~ff130493@host122-76-dynamic.46-79-r.retail.telecomitalia.it) has joined #haskell
2013-03-29 17:51:35	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-29 17:52:02	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Read error: Connection reset by peer)
2013-03-29 17:54:36	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2013-03-29 17:54:42	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 264 seconds)
2013-03-29 17:55:08	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-03-29 17:55:29	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 17:56:20	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-29 17:56:26	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-03-29 17:56:36	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 264 seconds)
2013-03-29 17:57:01	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-03-29 17:57:05	-->	caleb_9 (~caleb@nwcsnbsc00w-142134234147.dhcp-dynamic.FibreOp.nb.bellaliant.net) has joined #haskell
2013-03-29 17:57:36	-->	cognominal (~cognomina@37.160.54.210) has joined #haskell
2013-03-29 17:57:43	-->	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has joined #haskell
2013-03-29 17:58:07	<--	lpvb (~lpvb@199.188.72.31) has quit (Ping timeout: 264 seconds)
2013-03-29 17:58:59	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 17:59:04	-->	niloc132 (~colin@50-80-17-180.client.mchsi.com) has joined #haskell
2013-03-29 17:59:19	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 17:59:37	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-03-29 17:59:54	-->	malkomalko (~malkomalk@pool-71-190-186-219.nycmny.fios.verizon.net) has joined #haskell
2013-03-29 18:00:43	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-29 18:00:48	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 264 seconds)
2013-03-29 18:01:11	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-29 18:01:20	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-29 18:01:53	<--	m_hyperbolic (~powergian@80-71-135-7.u.parknet.dk) has quit (Ping timeout: 240 seconds)
2013-03-29 18:02:10	<--	adu (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-29 18:03:23	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 18:03:58	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-29 18:04:08	-->	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has joined #haskell
2013-03-29 18:04:08	<--	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has quit (Changing host)
2013-03-29 18:04:08	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-29 18:04:35	-->	cognominal__ (~cognomina@37.161.21.184) has joined #haskell
2013-03-29 18:04:49	<--	cognominal (~cognomina@37.160.54.210) has quit (Ping timeout: 256 seconds)
2013-03-29 18:06:08	Philonous	Is there a portable way to handle SockAddr without autoconf?
2013-03-29 18:06:21	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:07:10	<--	chatsiri_ (~chatsiri_@14.207.216.240) has quit (Quit: leaving)
2013-03-29 18:07:33	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 240 seconds)
2013-03-29 18:07:53	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:08:35	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-29 18:08:35	<--	rofer (~rofer@rofer.me) has quit (Ping timeout: 260 seconds)
2013-03-29 18:08:49	<--	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-29 18:09:05	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-29 18:09:34	<--	croikle_ (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Quit: croikle_)
2013-03-29 18:10:29	-->	teneen (~chatzilla@217.55.141.243) has joined #haskell
2013-03-29 18:10:31	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-03-29 18:10:34	teneen	how to declare an instance of Typeable manually?
2013-03-29 18:11:18	<--	jianmeng1 (~mengjian@123.138.24.77) has quit (Quit: Leaving.)
2013-03-29 18:11:20	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:11:31	ludamad	I'm getting 'Warning: Pattern match(es) are overlapped', but AFAICS the alternatives are '1' and '2' that its saying overlap. What could be going on ?
2013-03-29 18:11:55	geekosaur	@paste your code
2013-03-29 18:11:55	lambdabot	Haskell pastebin: http://hpaste.org/
2013-03-29 18:12:13	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Ping timeout: 240 seconds)
2013-03-29 18:12:47	<--	trescenzi (~trescenzi@2620:91:0:163:e001:9dcf:2d1f:a319) has quit (Remote host closed the connection)
2013-03-29 18:13:04	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:13:05	<--	cognominal__ (~cognomina@37.161.21.184) has quit (Ping timeout: 255 seconds)
2013-03-29 18:13:09	tgeeky	(along with the error)
2013-03-29 18:13:25	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Remote host closed the connection)
2013-03-29 18:13:27	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-29 18:13:41	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-29 18:13:47	teneen	I can't use type-safely cast a newtype wrapper around Int to an Int. Why is this?
2013-03-29 18:14:11	ludamad	strange, im getting IRC messages but cant browse
2013-03-29 18:15:01	-->	cognominal__ (~cognomina@37.160.37.34) has joined #haskell
2013-03-29 18:15:07	<--	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has quit (Ping timeout: 260 seconds)
2013-03-29 18:15:13	<--	pigoz (~pigoz@ip-static-94-242-209-206.as5577.net) has quit (Quit: WeeChat 0.4.0-dev)
2013-03-29 18:16:14	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 255 seconds)
2013-03-29 18:16:19	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-03-29 18:16:29	teneen	When is Data.Typeable.cast useful?
2013-03-29 18:16:40	ludamad	geekosaur, tgeeky: http://hpaste.org/84825
2013-03-29 18:16:51	ludamad	the problem is in getMessage
2013-03-29 18:16:56	<--	bos (~bos@173.252.71.129) has quit (Remote host closed the connection)
2013-03-29 18:17:14	geekosaur	figured that
2013-03-29 18:17:20	geekosaur	you cannot test for values that way in case
2013-03-29 18:17:21	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-03-29 18:17:32	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-03-29 18:17:33	-->	madhadron (~Adium@209.119.210.194) has joined #haskell
2013-03-29 18:17:42	ludamad	Oh ?
2013-03-29 18:17:53	<--	raichoo (~raichoo@i59F6C338.versanet.de) has quit (Quit: leaving)
2013-03-29 18:17:54	geekosaur	you are not checoing against an existing loginMessageId, you are creating a new local binding to the value you are "testing"
2013-03-29 18:17:57	madhadron	Would someone on the Haskell mailing lists mind doing me a favor?
2013-03-29 18:18:00	<--	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-29 18:18:02	geekosaur	it is a pattern match not a comparison
2013-03-29 18:18:03	<--	perspectival1 (perspectiv@nat/redhat/x-abhopbpwlvtebgqv) has quit (Quit: Leaving.)
2013-03-29 18:18:09	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-29 18:18:12	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 264 seconds)
2013-03-29 18:18:16	ludamad	geekosaur: Oooh.
2013-03-29 18:18:19	ludamad	gotcha
2013-03-29 18:18:19	madhadron	I've been somewhat out of the community for a year or two, and at someone's request just updated the hdaemonize package to work with the latest GHC.
2013-03-29 18:18:35	ludamad	geekosaur: No way to have a named constant in a case ?
2013-03-29 18:18:40	madhadron	It's gone to Hackage, but would someone mind sending the usual little announce message that it's alive and updated?
2013-03-29 18:18:53	madhadron	(Or has that been automated or is not done anymore since I wandered off?)
2013-03-29 18:18:55	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-29 18:19:02	<--	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has quit (Remote host closed the connection)
2013-03-29 18:19:09	tgeeky	madhadron: not automated, someone will have to do it
2013-03-29 18:19:24	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 264 seconds)
2013-03-29 18:19:27	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-03-29 18:19:29	geekosaur	I don't see where those values are defined but if they derive Eq then you can do: case msgType of a | a == loginMessageID -> ... | a = createUserMessageID -> ...
2013-03-29 18:19:35	tgeeky	madhadron: I can't do it, unfortunately. I signed up with an "email+haskellmailinglist" kind of address, which doesn't let me reply
2013-03-29 18:19:40	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:19:46	 *	hackagebot hdaemonize 0.4.5.0 - Library to handle the details of writing daemons for UNIX  http://hackage.haskell.org/package/hdaemonize-0.4.5.0 (FrederickRoss)
2013-03-29 18:19:58	ludamad	they're just in the file
2013-03-29 18:19:59	madhadron	Well, there's Hackagebot at least.
2013-03-29 18:20:01	ludamad	but that works, thanks
2013-03-29 18:20:05	tgeeky	madhadron: yep :)
2013-03-29 18:20:24	madhadron	(With special thanks to Karl Voelker for doing the actual work)
2013-03-29 18:20:36	<--	cognominal__ (~cognomina@37.160.37.34) has quit (Ping timeout: 264 seconds)
2013-03-29 18:20:52	<--	mononofu (~mononofu@chello062178010088.4.11.vie.surfer.at) has quit (Quit: Leaving)
2013-03-29 18:20:57	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Remote host closed the connection)
2013-03-29 18:20:59	tgeeky	KarlVoelker++
2013-03-29 18:21:02	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-29 18:21:22	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:21:31	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Ping timeout: 264 seconds)
2013-03-29 18:21:35	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Read error: Connection reset by peer)
2013-03-29 18:22:05	<--	bos (~bos@173.252.71.129) has quit (Ping timeout: 255 seconds)
2013-03-29 18:22:07	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:22:14	-->	creichert (~christoph@c-98-194-197-245.hsd1.tx.comcast.net) has joined #haskell
2013-03-29 18:22:20	-->	mrsolo (~mrsolo@64.125.181.92) has joined #haskell
2013-03-29 18:22:39	-->	vramana_ (~chatzilla@103.5.132.50) has joined #haskell
2013-03-29 18:22:42	madhadron	Anyway, anyone on the lists who would send the message for me?
2013-03-29 18:22:53	madhadron	(Besides tgeeky and his spamproofed address)
2013-03-29 18:22:55	-->	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has joined #haskell
2013-03-29 18:22:57	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 18:23:08	 *	tgeeky sulks in the corner
2013-03-29 18:23:31	madhadron	tgeeky: Hey, I don't blame you. We all know what a giant spamlord Simon Peyton-Jones is. (:
2013-03-29 18:23:47	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-03-29 18:23:48	--	vramana_ is now known as vramana
2013-03-29 18:23:49	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-29 18:23:51	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-29 18:23:51	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:25:01	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-03-29 18:25:39	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 258 seconds)
2013-03-29 18:25:57	-->	cognominal__ (~cognomina@37.160.16.110) has joined #haskell
2013-03-29 18:25:58	-->	lpvb (~lpvb@199.188.72.31) has joined #haskell
2013-03-29 18:26:03	-->	rofer (~rofer@rofer.me) has joined #haskell
2013-03-29 18:26:30	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-29 18:27:07	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-03-29 18:27:33	hpaste	ParahSailin pasted “optimize” at http://hpaste.org/84826
2013-03-29 18:28:11	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 246 seconds)
2013-03-29 18:28:27	ParahSailin	in that example, will a call of "nearestNeighborTM" compute the thunk "countNeighbors sq" twice, or is ghc smart enough?
2013-03-29 18:28:29	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-29 18:28:59	geekosaur	in general, if you want to make sure something is computed once, use a let binding
2013-03-29 18:29:28	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-03-29 18:29:40	djahandarie	edwardk, I like how you got a whole meetup dedicated to studying your libraries in Japan
2013-03-29 18:31:08	-->	akurei (~akurei@dslb-084-056-079-103.pools.arcor-ip.net) has joined #haskell
2013-03-29 18:31:48	tgeeky	djahandarie: as well there should be!
2013-03-29 18:31:50	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:32:03	-->	Maarten_ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has joined #haskell
2013-03-29 18:33:09	-->	midfield (~user@70-36-157-176.static.sonic.net) has joined #haskell
2013-03-29 18:33:21	aristid	djahandarie: in addition to a channel dedicated to discussing his libraries :)
2013-03-29 18:33:32	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:34:14	<--	tazjin (2971tazjin@server1.bouncer4you.de) has quit (Ping timeout: 255 seconds)
2013-03-29 18:35:35	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 255 seconds)
2013-03-29 18:35:54	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 18:36:10	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 18:37:05	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 18:37:19	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:37:33	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 18:37:43	<--	teneen (~chatzilla@217.55.141.243) has quit (Quit: ChatZilla 0.9.90 [Firefox 16.0.2/20121025231724])
2013-03-29 18:38:00	<--	cduez (~cduez@AMontsouris-651-1-134-240.w90-46.abo.wanadoo.fr) has quit (Quit: bye)
2013-03-29 18:39:26	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:39:26	<--	Argue (~Argue@112.209.13.160) has quit (Read error: Connection reset by peer)
2013-03-29 18:39:39	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Client Quit)
2013-03-29 18:40:07	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Remote host closed the connection)
2013-03-29 18:40:24	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-29 18:40:30	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-29 18:40:33	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-29 18:40:59	-->	trescenzi (~trescenzi@2620:91:0:163:44ac:765e:e950:180c) has joined #haskell
2013-03-29 18:40:59	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-03-29 18:41:27	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:41:53	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-29 18:42:00	<--	kartoffelbrei (~kartoffel@p5496255B.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-03-29 18:42:05	-->	nade (~nade@sanderswireless-pat.uc.edu) has joined #haskell
2013-03-29 18:42:21	-->	SoupEvil (~jloos@f054173099.adsl.alicedsl.de) has joined #haskell
2013-03-29 18:42:31	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:42:32	<--	SoupEvil (~jloos@f054173099.adsl.alicedsl.de) has quit (Client Quit)
2013-03-29 18:43:14	-->	tazjin (2971tazjin@server1.bouncer4you.de) has joined #haskell
2013-03-29 18:43:19	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:43:45	tgeeky	aristid: and now, thanks to diagrams-haddock, diagram-ize and example-ize.
2013-03-29 18:44:58	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:45:22	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:46:51	<--	cognominal__ (~cognomina@37.160.16.110) has quit (Ping timeout: 260 seconds)
2013-03-29 18:47:07	<--	ludamad (~adomurad@38.108.79.102) has quit (Ping timeout: 258 seconds)
2013-03-29 18:47:20	-->	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 18:48:07	-->	sellout- (~Adium@67.51.227.94) has joined #haskell
2013-03-29 18:48:07	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:48:15	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Ping timeout: 260 seconds)
2013-03-29 18:48:47	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-29 18:48:59	<--	kmrhb (~kmrhb@modemcable116.174-81-70.mc.videotron.ca) has quit (Quit: kmrhb)
2013-03-29 18:49:26	-->	zakora (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:49:35	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:49:39	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-03-29 18:49:46	<--	zakora (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Client Quit)
2013-03-29 18:49:56	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:50:15	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-29 18:50:25	-->	OlegYch (~OlegYch@80.249.93.99) has joined #haskell
2013-03-29 18:50:34	<--	crs_ (~crs_@192.210.215.64) has quit (Ping timeout: 258 seconds)
2013-03-29 18:50:49	-->	n4techan (~natechan@220.sub-174-229-0.myvzw.com) has joined #haskell
2013-03-29 18:50:57	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-03-29 18:51:31	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-29 18:51:33	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:51:35	<--	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 18:52:01	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:52:03	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 18:52:31	-->	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 18:52:38	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 18:52:42	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Disconnected by services)
2013-03-29 18:52:42	--	n4techan is now known as natechan
2013-03-29 18:53:02	-->	mknox (~mknox@8.25.197.25) has joined #haskell
2013-03-29 18:53:08	<--	tibbe (~tibbe@216.239.45.130) has quit (Ping timeout: 255 seconds)
2013-03-29 18:53:29	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:53:31	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 18:53:43	<--	nade (~nade@sanderswireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 18:53:43	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 18:53:49	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 18:53:57	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:54:00	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 18:54:00	<--	Shin-LaC (~LaC@68.65.81.227) has quit (Quit: Computer has gone to sleep.)
2013-03-29 18:54:03	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-03-29 18:54:08	-->	cognominal__ (~cognomina@37.160.38.183) has joined #haskell
2013-03-29 18:54:37	<--	trescenzi (~trescenzi@2620:91:0:163:44ac:765e:e950:180c) has quit (Remote host closed the connection)
2013-03-29 18:54:59	-->	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has joined #haskell
2013-03-29 18:55:45	Pods	Hi, I want to start contributing for haskell- swish mainly , as a part of GSOC2013, any directions for relevant bugs in swish??
2013-03-29 18:55:54	-->	n4techan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 18:56:10	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-29 18:56:14	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:56:17	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 18:56:44	<--	natechan (~natechan@220.sub-174-229-0.myvzw.com) has quit (Disconnected by services)
2013-03-29 18:56:45	--	n4techan is now known as natechan
2013-03-29 18:57:26	madhadron	Pods: Is there a bug tracker up somewhere?
2013-03-29 18:57:48	madhadron	(I normally wouldn't respond since I'm almost not in the community at this point, but there's an epidemic of silence)
2013-03-29 18:58:05	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-03-29 18:58:29	Pods	madharon: there is , but I cannot seem to find something good to start with for the respective library
2013-03-29 18:58:43	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-03-29 18:58:47	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:58:51	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 18:58:52	madhadron	Ah. Everything requires more knowledge of the guts than you have?
2013-03-29 18:59:09	<--	Sorella (~queen@201.80.212.227) has quit (Changing host)
2013-03-29 18:59:09	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-03-29 18:59:21	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-29 18:59:36	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-03-29 18:59:41	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 18:59:44	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 19:00:10	Pods	madharon : More like I dont know which is the best place to start using the knowledge I have :)
2013-03-29 19:00:31	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-29 19:00:35	madhadron	Ah. Have you built something with the library yet?
2013-03-29 19:00:48	-->	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-03-29 19:00:49	ChongLi	hmm
2013-03-29 19:00:50	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-03-29 19:00:56	ChongLi	anyone here use ghcmod.vim?
2013-03-29 19:01:03	Pods	not yet
2013-03-29 19:01:31	madhadron	Pods: That's a good place to start in order to get some perspective.
2013-03-29 19:01:56	-->	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has joined #haskell
2013-03-29 19:02:06	-->	Breadmonster (4e9ad236@gateway/web/freenode/ip.78.154.210.54) has joined #haskell
2013-03-29 19:02:24	Breadmonster	Umm, how do you define a function in Haskell?
2013-03-29 19:02:29	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-29 19:02:35	ChongLi	Breadmonster: with =
2013-03-29 19:02:43	Breadmonster	yeah, I get an error.
2013-03-29 19:02:45	ChongLi	foo x = x * 2
2013-03-29 19:02:49	Breadmonster	One minute, let me show you.
2013-03-29 19:03:07	ChongLi	if you are at the ghci prompt, you need to use let
2013-03-29 19:03:09	madhadron	Breadmonster: Are you in GHCi or GHC?
2013-03-29 19:03:13	Pods	madhadron : thanks , will do
2013-03-29 19:03:16	ChongLi	let foo x = x * 2
2013-03-29 19:03:20	-->	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has joined #haskell
2013-03-29 19:03:28	madhadron	Pods: Remember, free advice on the Internet is usually worth what you paid for it. (:
2013-03-29 19:03:31	Breadmonster	madhadron: GHCi
2013-03-29 19:03:39	Breadmonster	ghci> doubleMe x = x + x  <interactive>:8:12: parse error on input `='
2013-03-29 19:03:44	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-03-29 19:03:45	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 19:03:50	ChongLi	let doubleMe x = x + x
2013-03-29 19:03:51	madhadron	Breadmonster: Type 'let doubleMe x = x + x'
2013-03-29 19:03:59	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-03-29 19:04:02	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 19:04:09	Breadmonster	madhadron: would there be a difference if I was using ghc and ghci?
2013-03-29 19:04:09	madhadron	GHCi is more like programming in an IO do block than the basic language
2013-03-29 19:04:09	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 19:04:11	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Max SendQ exceeded)
2013-03-29 19:04:13	Pods	madharon : ^ . ^
2013-03-29 19:04:20	madhadron	Breadmonster: If you put it in a source file and compiled it, it would work fine.
2013-03-29 19:04:42	ab9rf	:t ^ . ^
2013-03-29 19:04:42	madhadron	GHCi is not a REPL in exactly the same way you would find in Lisp or Python
2013-03-29 19:04:43	lambdabot	parse error on input `^'
2013-03-29 19:04:48	-->	eirikur (~eirikur@nova126-255.cust.nova.is) has joined #haskell
2013-03-29 19:05:05	Breadmonster	madhadron: Oh, so I have to use let for assignment in ghci?
2013-03-29 19:05:08	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 19:05:12	madhadron	Breadmonster: Right, just like you would in a do block
2013-03-29 19:05:15	Breadmonster	Strange, they don't say that in Learn You a Haskell.
2013-03-29 19:05:20	ab9rf	Breadmonster: no, you have t use let for binding in ghci
2013-03-29 19:05:20	Breadmonster	madhadron: What's a do block?
2013-03-29 19:05:23	<--	finchedura (~finchedur@host218-125-dynamic.244-95-r.retail.telecomitalia.it) has quit (Quit: Leaving)
2013-03-29 19:05:25	ChongLi	it's not assignment, it's binding :)
2013-03-29 19:05:36	ChongLi	Breadmonster: you haven't got that far yet
2013-03-29 19:05:38	madhadron	Breadmonster: Oh, you're going through Learn You a Haskell. Forget I mentioned anything.
2013-03-29 19:05:39	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-03-29 19:05:48	madhadron	Yes, it would be good if they mentioned that.
2013-03-29 19:05:56	ab9rf	bad website
2013-03-29 19:06:03	Breadmonster	Hmm, isn't bonus on this chatroom?
2013-03-29 19:06:06	ab9rf	bad, naughty website
2013-03-29 19:06:10	ab9rf	no cookie for you
2013-03-29 19:06:12	madhadron	And yes, it's a binding, not an assignment, and you'll have learned something important and subtle when you understand the difference
2013-03-29 19:06:14	ChongLi	bonus?
2013-03-29 19:06:21	simpson	preflex: xseen BONUS
2013-03-29 19:06:21	preflex	 BONUS was last seen on freenode/#haskell 1 year, 333 days, 22 hours, 38 minutes and 44 seconds ago, saying: yeah i think that's better as well
2013-03-29 19:06:26	madhadron	ab9rf: There's a browser preference for that, I think...
2013-03-29 19:06:39	--	cl_away is now known as clahey
2013-03-29 19:06:48	Breadmonster	Hmm.
2013-03-29 19:07:34	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 19:08:10	-->	mtao (~mtao@dgpsb-gw141.cs.toronto.edu) has joined #haskell
2013-03-29 19:08:13	<--	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 19:08:24	ChongLi	Breadmonster: hmm?
2013-03-29 19:08:25	ab9rf	Breadmonster: 'assignment' is a concept that doesn't really apply to functional languages.
2013-03-29 19:08:26	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-03-29 19:08:51	-->	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 19:09:11	lispy	We prefer binding
2013-03-29 19:09:17	ChongLi	bound variables and free variables :)
2013-03-29 19:09:19	dmwit	preflex: xseen BONUS_
2013-03-29 19:09:19	preflex	 BONUS_ was last seen on freenode/#haskell 3 years, 112 days, 4 hours, 24 minutes and 51 seconds ago, saying: osaunders_: usually i think it's defined as a function that uses only the stuff it takes as parameters and function application
2013-03-29 19:09:27	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-29 19:09:36	dmwit	preflex has been going for three years? huh
2013-03-29 19:09:36	<--	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-29 19:09:38	lispy	I wonder what happened to BONUS
2013-03-29 19:10:16	lispy	Scumbag haskller: writes a good book; then disappears forever.
2013-03-29 19:10:30	lispy	(BONUS isn't really a scumbag!)
2013-03-29 19:10:31	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-29 19:11:08	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 255 seconds)
2013-03-29 19:11:17	monochrom	you can still say "assignment" but you have to think "single assignment"
2013-03-29 19:11:39	<--	timemage (~user@pool-70-16-208-33.man.east.myfairpoint.net) has quit (Ping timeout: 256 seconds)
2013-03-29 19:11:45	-->	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has joined #haskell
2013-03-29 19:11:56	edwardk	djahandarie: i'm huge in japan
2013-03-29 19:12:00	-->	n8109a5m (~huto@e181134186.adsl.alicedsl.de) has joined #haskell
2013-03-29 19:12:17	lispy	edwardk: so is tom waits
2013-03-29 19:13:23	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 19:13:48	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-29 19:14:02	monochrom	3 years is a short time. 3 years is hardly 1% of my thesis time :)
2013-03-29 19:14:03	-->	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has joined #haskell
2013-03-29 19:15:01	monochrom	in any case, preflex had down times too. but unlike lambdabot, preflex probably knows to save state to disk.
2013-03-29 19:15:12	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-03-29 19:15:12	-->	croikle (~peterm@134.53.245.65) has joined #haskell
2013-03-29 19:15:43	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 19:16:53	<--	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-03-29 19:17:10	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-03-29 19:17:24	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit
2013-03-29 19:17:36	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 19:18:03	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 19:18:08	<--	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has quit (Remote host closed the connection)
2013-03-29 19:18:16	<--	malkomalko (~malkomalk@pool-71-190-186-219.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-29 19:18:20	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 255 seconds)
2013-03-29 19:19:17	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-29 19:19:49	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Quit: jumping out window)
2013-03-29 19:20:03	<--	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has quit (Ping timeout: 245 seconds)
2013-03-29 19:20:20	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Ping timeout: 252 seconds)
2013-03-29 19:21:19	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 19:21:19	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-29 19:21:34	<--	gadjo (~gggg@109.102.72.188) has quit (Read error: Connection reset by peer)
2013-03-29 19:21:57	--	tac-lunch is now known as tac
2013-03-29 19:22:03	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-03-29 19:22:22	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 19:22:26	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Client Quit)
2013-03-29 19:22:56	<--	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-29 19:23:59	-->	timemage (~user@pool-71-241-132-15.burl.east.myfairpoint.net) has joined #haskell
2013-03-29 19:25:07	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-29 19:25:15	<--	edsko (~edsko@79.97.126.24) has left #haskell ("Leaving")
2013-03-29 19:25:37	--	pdxleif_away is now known as pdxleif
2013-03-29 19:26:13	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-03-29 19:26:31	<--	eirikur (~eirikur@nova126-255.cust.nova.is) has quit (Remote host closed the connection)
2013-03-29 19:27:07	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-29 19:27:14	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-29 19:28:03	<--	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has quit (Ping timeout: 245 seconds)
2013-03-29 19:28:22	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-03-29 19:29:12	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-29 19:29:27	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 19:29:28	-->	agr (bd269061@gateway/web/freenode/ip.189.38.144.97) has joined #haskell
2013-03-29 19:29:36	TravisD	monochrom: Your thesis is 300 years?
2013-03-29 19:29:49	-->	casucci (~zeke@unaffiliated/casucci) has joined #haskell
2013-03-29 19:30:06	<--	jobstijl (~job@5070A080.static.ziggozakelijk.nl) has quit (Quit: Ik ga weg)
2013-03-29 19:30:40	ChongLi	sounds like the plot of a point and click adventure game
2013-03-29 19:30:48	ChongLi	"Monochrom and the 300 year thesis"
2013-03-29 19:30:55	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-03-29 19:31:27	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-03-29 19:32:37	<--	n8109a5m (~huto@e181134186.adsl.alicedsl.de) has quit (Quit: Leaving.)
2013-03-29 19:33:16	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-29 19:33:22	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 19:33:42	<--	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has quit (Quit: WeeChat 0.3.9.2)
2013-03-29 19:34:37	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-29 19:34:38	<--	black_joe (~Norton@pool-72-73-249-210.cmdnnj.east.verizon.net) has quit (Read error: Connection reset by peer)
2013-03-29 19:34:39	<--	odi (~user@62-46-195-128.adsl.highway.telekom.at) has quit (Ping timeout: 258 seconds)
2013-03-29 19:34:53	-->	black_joe (~Norton@pool-72-73-249-210.cmdnnj.east.verizon.net) has joined #haskell
2013-03-29 19:35:56	<--	casucci (~zeke@unaffiliated/casucci) has quit (Quit: Lost terminal)
2013-03-29 19:36:21	ab9rf	heh
2013-03-29 19:36:54	--	bcoppens is now known as bcoppens_
2013-03-29 19:37:09	sproingie	♫ heeyyyyo they love the way i do it ♫
2013-03-29 19:37:50	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-03-29 19:38:13	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-29 19:38:16	-->	gentleben (~gentleben@208.74.182.4.static.etheric.net) has joined #haskell
2013-03-29 19:38:44	<--	sellout- (~Adium@67.51.227.94) has quit (Ping timeout: 245 seconds)
2013-03-29 19:39:17	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 19:39:19	-->	ilyanok (~ilya@nat184.lu.usi.ch) has joined #haskell
2013-03-29 19:39:38	<--	ilyanok (~ilya@nat184.lu.usi.ch) has quit (Client Quit)
2013-03-29 19:39:45	-->	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-03-29 19:40:02	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-29 19:41:00	<--	Kyo (~elaineben@h206n2c1o1097.bredband.skanova.com) has quit (Ping timeout: 264 seconds)
2013-03-29 19:41:23	armlesshobo	♫ as long as I got my suit & tie ♫
2013-03-29 19:41:34	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 19:41:38	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-29 19:42:36	TravisD	I have a literate haskell file that uses the gnuplot package to render some plots. Is there a good way to include them in the pdf output of running lhs2TeX -> pdflatex?
2013-03-29 19:43:20	-->	andyjgill (~andyjgill@dhcp248.ittc.ku.edu) has joined #haskell
2013-03-29 19:44:43	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-29 19:44:49	<--	k00mi (~koomi@24.134.205.36) has quit (Quit: WeeChat 0.4.0)
2013-03-29 19:45:31	<--	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has quit (Quit: hello)
2013-03-29 19:46:05	-->	k00mi (~koomi@24.134.205.36) has joined #haskell
2013-03-29 19:46:24	<--	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has quit (Quit: anRch)
2013-03-29 19:46:50	ChongLi	anyone know of an easy equivalent to Clojure's juxt?
2013-03-29 19:48:12	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 19:48:12	<--	HalfWayMan (~blake@cpc1-seac9-0-0-cust413.7-2.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-03-29 19:48:13	<--	cognominal__ (~cognomina@37.160.38.183) has quit (Ping timeout: 240 seconds)
2013-03-29 19:48:19	<--	madhadron (~Adium@209.119.210.194) has left #haskell
2013-03-29 19:48:37	shachaf	That depends on what Clojure's juxt is.
2013-03-29 19:49:00	ChongLi	juxt takes a bunch of functions and returns a function that is the juxtaposition of them
2013-03-29 19:49:07	<--	icarot (~icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Ping timeout: 256 seconds)
2013-03-29 19:49:12	shachaf	OK, now it depends on what a juxtaposition is.
2013-03-29 19:49:20	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-03-29 19:49:32	-->	HalfWayMan (~blake@cpc1-seac9-0-0-cust413.7-2.cable.virginmedia.com) has joined #haskell
2013-03-29 19:49:32	--	pepijndevos is now known as pepijn_away
2013-03-29 19:49:33	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-03-29 19:49:33	sproingie	http://clojuredocs.org/clojure_core/1.2.0/clojure.core/juxt looks like it
2013-03-29 19:49:39	ChongLi	it just returns a vector of the results of applying all those functions to the argument
2013-03-29 19:49:41	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-29 19:49:43	--	pepijn_away is now known as pepijndevos
2013-03-29 19:50:01	shachaf	The easy way to ask this question would be with a concrete example, you know. :-) Much simpler than English.
2013-03-29 19:50:14	shachaf	> sequence [(+1),(*2),sqrt] 5
2013-03-29 19:50:15	lambdabot	  [6.0,10.0,2.23606797749979]
2013-03-29 19:50:18	<--	skchrko (~sk@31.28.233.39) has quit (Quit: .)
2013-03-29 19:50:22	-->	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2013-03-29 19:50:29	shachaf	> map ($ 5) [(+1),(*2),sqrt] -- sometimes simpler
2013-03-29 19:50:30	lambdabot	  [6.0,10.0,2.23606797749979]
2013-03-29 19:50:36	sproingie	looks just a bunch of concat'd maps
2013-03-29 19:50:52	ChongLi	right, but juxt can have different types for each function
2013-03-29 19:50:54	<--	stat_vi (~stat@dslb-094-218-237-228.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-29 19:51:02	ChongLi	so it's a little more complicated
2013-03-29 19:51:12	sproingie	yeah you're not going to get that in haskell, it actually cares about types
2013-03-29 19:51:16	shachaf	OK, so what sort of type are you hoping for this function to have?
2013-03-29 19:51:43	ChongLi	well, I don't necessarily want this function, I'm just translating a pattern of thought
2013-03-29 19:51:53	ChongLi	there's probably a more idiomatic way to do this in haskell
2013-03-29 19:51:56	-->	Rants (~quassel@204.132.65.177) has joined #haskell
2013-03-29 19:52:03	-->	stat_vi (~stat@dslb-094-218-237-228.pools.arcor-ip.net) has joined #haskell
2013-03-29 19:52:10	sproingie	sequence or maybe applicative on lists
2013-03-29 19:52:18	shachaf	Probably.
2013-03-29 19:53:04	shachaf	> (head &&& length) "hello"
2013-03-29 19:53:05	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 19:53:06	lambdabot	  ('h',5)
2013-03-29 19:53:08	TravisD	ChongLi: In Control.Arrow the (&&&) operator does what you want, but only for pairs
2013-03-29 19:53:27	byorgey	but pairs is all you need!
2013-03-29 19:53:32	TravisD	:)
2013-03-29 19:53:39	byorgey	> ((head &&& length) &&& reverse) "hello"
2013-03-29 19:53:41	lambdabot	  (('h',5),"olleh")
2013-03-29 19:53:44	ChongLi	yeah, haha
2013-03-29 19:53:56	byorgey	> (head &&& length &&& reverse) "hello"
2013-03-29 19:53:56	sproingie	what's the associativity normally
2013-03-29 19:53:57	lambdabot	  ('h',(5,"olleh"))
2013-03-29 19:54:03	sproingie	right looks like
2013-03-29 19:54:13	sproingie	more lispy anyway
2013-03-29 19:54:13	byorgey	yep, I wasn't sure if it had an associativity
2013-03-29 19:54:14	TravisD	a bit harder to work with, I guess :P
2013-03-29 19:54:16	ChongLi	makes sense
2013-03-29 19:54:24	 *	sproingie probably woke lispy up with that one
2013-03-29 19:54:31	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 260 seconds)
2013-03-29 19:54:34	-->	cognominal__ (~cognomina@37.161.235.232) has joined #haskell
2013-03-29 19:54:49	byorgey	my version is more sproingie
2013-03-29 19:54:56	ChongLi	I probably should just create a record type for what I want
2013-03-29 19:55:02	sproingie	yay :)
2013-03-29 19:55:08	-->	napping (~brandon@qchost236-242.cs.illinois.edu) has joined #haskell
2013-03-29 19:55:39	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 19:55:51	ChongLi	there's always tradeoffs going back and forth between lisps and Haskell
2013-03-29 19:56:10	sproingie	> let (x,(y,z)) = (head &&& length &&& reverse) "hello" in (x,y,z)
2013-03-29 19:56:12	lambdabot	  ('h',5,"olleh")
2013-03-29 19:56:14	-->	fedvasu (73f2e9d4@gateway/web/freenode/ip.115.242.233.212) has joined #haskell
2013-03-29 19:56:22	johnw	@tell chrisdone Ping me if you're around
2013-03-29 19:56:22	lambdabot	Consider it noted.
2013-03-29 19:56:41	sproingie	not pretty but there it is
2013-03-29 19:56:48	ChongLi	that seems pretty good
2013-03-29 19:57:02	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 255 seconds)
2013-03-29 19:57:13	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-29 19:57:14	fedvasu	hi guys, is there a library on hackage which lets me program gpu's (general computing) irrespective of my gpu card?
2013-03-29 19:57:21	-->	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has joined #haskell
2013-03-29 19:57:22	sproingie	i don't guess there's some generic traversal of that form?
2013-03-29 19:57:37	<--	Rants (~quassel@204.132.65.177) has quit (Ping timeout: 256 seconds)
2013-03-29 19:57:39	fedvasu	I have read articles and papers by mauel on CUDA.accelarate
2013-03-29 19:57:51	ChongLi	CUDA requires a nvidia GPU
2013-03-29 19:57:53	fedvasu	but that is Nvidia specific.
2013-03-29 19:58:01	sproingie	openCL is the way to go these days
2013-03-29 19:58:16	fedvasu	but how? which haskell library?
2013-03-29 19:58:37	sproingie	with the opencl package from haskell i imagine
2013-03-29 19:58:38	fedvasu	where to find docs? may be good articles like Manuel's
2013-03-29 19:58:46	sproingie	s/haskell/hackage/
2013-03-29 19:59:06	-->	lemao (~lemao@c-174-62-194-16.hsd1.me.comcast.net) has joined #haskell
2013-03-29 19:59:07	ChongLi	http://hackage.haskell.org/packages/archive/OpenCL/1.0.3.2/doc/html/Control-Parallel-OpenCL.html
2013-03-29 19:59:08	-->	ncw (~ncw@host31-54-161-130.range31-54.btcentralplus.com) has joined #haskell
2013-03-29 19:59:15	<--	quchen (~david@p54AA428F.dip.t-dialin.net) has quit (Quit: Lost terminal)
2013-03-29 19:59:16	fedvasu	sproingie: those are low level bindings
2013-03-29 19:59:23	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-29 19:59:31	sproingie	there's gpipe i suppose
2013-03-29 19:59:34	thoughtpolice	all opencl/cuda bindings modulo accelerate are fairly awful IMO
2013-03-29 19:59:47	fedvasu	not like CUDA.Array :'(
2013-03-29 20:00:06	sproingie	nothing as lovely as aparapi for java
2013-03-29 20:00:15	lispy	MOAR LISPY
2013-03-29 20:00:15	thoughtpolice	they're just far too low level for most people to tolerate. there is a WIP OpenCL backend for Accelerate somewhere, but AFAIK it's not finished
2013-03-29 20:00:21	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit
2013-03-29 20:00:29	-->	dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-03-29 20:00:55	-->	sellout- (~Adium@67.51.227.94) has joined #haskell
2013-03-29 20:00:57	fedvasu	I am a bit sad!!
2013-03-29 20:01:02	--	pepijndevos is now known as pepijn_away
2013-03-29 20:01:11	ChongLi	that's just the way it is!
2013-03-29 20:01:16	-->	izym (~izym@1706ds1-aroe.0.fullrate.dk) has joined #haskell
2013-03-29 20:01:41	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-29 20:01:46	johnw	lispy: RAWR!
2013-03-29 20:02:09	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 20:02:12	k00mi	the repo for the OpenCL backend wasn't touched since over a year
2013-03-29 20:02:12	lispy	@rawr
2013-03-29 20:02:12	lambdabot	Maybe you meant: arr yarr
2013-03-29 20:02:17	lispy	@yarr
2013-03-29 20:02:17	lambdabot	Gangway!
2013-03-29 20:02:36	lispy	Is it talk like a lambdabot day?
2013-03-29 20:02:48	lispy	> fix Just
2013-03-29 20:02:50	lambdabot	  Occurs check: cannot construct the infinite type:
2013-03-29 20:02:50	lambdabot	   a0 = Data.Maybe.Maybe a0
2013-03-29 20:02:57	<--	agr (bd269061@gateway/web/freenode/ip.189.38.144.97) has quit (Ping timeout: 245 seconds)
2013-03-29 20:03:08	shachaf	> fix (In . Just)
2013-03-29 20:03:11	lambdabot	  In (Just (In (Just (In (Just (In (Just (In (Just (In (Just (In (Just (In (J...
2013-03-29 20:03:38	shachaf	> fix (Just . In)
2013-03-29 20:03:40	lambdabot	  Just (In (Just (In (Just (In (Just (In (Just (In (Just (In (Just (In (Just ...
2013-03-29 20:03:40	otters	this Just In
2013-03-29 20:03:58	<--	Mortchek (~danny@unaffiliated/mortchek) has quit (Ping timeout: 272 seconds)
2013-03-29 20:04:17	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 20:04:33	<--	Eduard_Munteanu (~Eduard_Mu@188.25.245.114) has quit (Ping timeout: 258 seconds)
2013-03-29 20:05:02	croikle	:t In
2013-03-29 20:05:03	lambdabot	f (Mu f) -> Mu f
2013-03-29 20:05:10	-->	Mortchek (~danny@unaffiliated/mortchek) has joined #haskell
2013-03-29 20:05:13	-->	stephenjudkins (~textual@174-25-92-126.ptld.qwest.net) has joined #haskell
2013-03-29 20:05:26	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-29 20:05:39	aCube	:k Mu
2013-03-29 20:05:40	lambdabot	(* -> *) -> *
2013-03-29 20:06:06	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Client Quit)
2013-03-29 20:06:20	--	pepijn_away is now known as pepijndevos
2013-03-29 20:08:29	fedvasu	will ghc-7.8 use dynamically linked libraries by default?
2013-03-29 20:09:01	fedvasu	does that mean less bloated binaries for my <favorite> linux distro?
2013-03-29 20:09:40	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-03-29 20:09:53	napping	you would have to ask the maintainers for your distro
2013-03-29 20:10:41	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 20:10:50	fedvasu	napping: ok, i understanf that the decision to build ghc as statically linked binaries is of distro maintainer
2013-03-29 20:11:10	-->	beefcube (~jpf@cpe-192-136-217-198.tx.res.rr.com) has joined #haskell
2013-03-29 20:11:19	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-29 20:11:35	fedvasu	napping: but dynamically linked libraries for ghc are the norm from now on right?
2013-03-29 20:11:44	ChongLi	I like the static linking
2013-03-29 20:11:54	ChongLi	far too much breakage would go on otherwise
2013-03-29 20:12:23	napping	we don't have a good plan for packaging binaries like that
2013-03-29 20:12:41	fedvasu	ChongLi : Noooooo, bandwidth is still way way too precious in poor countries
2013-03-29 20:13:08	fedvasu	ghc download on fedora takes like : 300 Mb
2013-03-29 20:13:09	napping	if you really care about bandwidth, source packages are the way to go
2013-03-29 20:13:10	ChongLi	fedvasu: I didn't even think of that!
2013-03-29 20:13:15	beefcube	i'm not sure if this is a haskell specific question, I'm wondering if there is a way to retain a System.IO Handle to a file, change the file, and have the handle point to the change? Or Is System.IO, essentially modeled so that I would need to reload the handle following a change to the file?
2013-03-29 20:13:19	fedvasu	on disk it is atleast 1GB
2013-03-29 20:13:42	tsinnema	is there any nice intro to the various tools in the HList package and particularly to useful things to know about their implementation?
2013-03-29 20:13:47	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-29 20:14:01	fedvasu	napping: yup, source packages are the way to go, so I will use gentoo from now on!!
2013-03-29 20:14:10	ChongLi	fedvasu: ghc on arch linux is 60MB download
2013-03-29 20:14:10	ab9rf	beefcube: "point to the change"?  i don't understand what you mean.
2013-03-29 20:14:15	-->	Taneb (~nathan@host-92-23-142-211.as13285.net) has joined #haskell
2013-03-29 20:14:36	<--	stephenjudkins (~textual@174-25-92-126.ptld.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 20:14:47	<--	silver (~silver@178.121.55.208) has quit (Read error: Connection reset by peer)
2013-03-29 20:14:57	napping	I think the nicest thing about shared libraries for distros is that you can hopefully just update the library for security fixes, but I doubt that works for dynamically linked haskell
2013-03-29 20:15:05	sproingie	it's a handle, a file descriptor.  handles don't have contents, they just point to an open file
2013-03-29 20:15:12	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-29 20:15:22	sproingie	if it changes, that'll be reflected when you read it
2013-03-29 20:15:23	fedvasu	ChongLi: Arch Linux, FTW!!
2013-03-29 20:15:35	ChongLi	fedvasu: yes, it does in general
2013-03-29 20:15:37	beefcube	ab9rf: for example, if hIsEOF returns true for a handle, and I subsequently write to the file, I want hIsEOF to return false
2013-03-29 20:15:47	ChongLi	but especialy so if you need to keep downloads small
2013-03-29 20:15:47	beefcube	ab9rf: for the same handle
2013-03-29 20:15:53	fedvasu	ChongLi: But wait, I can't explain this problem to fedora ghc maintainer, partly I am to blame here
2013-03-29 20:15:57	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-29 20:16:09	sproingie	is that EOF behavior even well defined in C?
2013-03-29 20:16:09	Eelis	i was installing archlinux today but when the installation guide said "now go read the GRUB wiki article", i'd had enough :P
2013-03-29 20:16:32	ChongLi	fedvasu: why are you to blame?
2013-03-29 20:16:49	napping	fedvasu: getting a binary ghc package and using cabal for the rest seems to work pretty well. The only thing that I remember that takes annoyingly long to build it gtk
2013-03-29 20:16:55	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Ping timeout: 260 seconds)
2013-03-29 20:17:03	fedvasu	ChongLi: just a minute
2013-03-29 20:17:26	-->	Eduard_Munteanu (~Eduard_Mu@188.25.92.97) has joined #haskell
2013-03-29 20:17:32	gspr	Does Hackage 2 have a feature to ignore non-documentation build errors when building the haddock documentation for a package?
2013-03-29 20:17:40	-->	silver (~silver@37.214.34.150) has joined #haskell
2013-03-29 20:17:50	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 20:18:06	fedvasu	ChongLi: https://bugzilla.redhat.com/show_bug.cgi?id=911725
2013-03-29 20:18:07	--	adu_ is now known as adu
2013-03-29 20:18:40	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-29 20:18:45	-->	quchen (~david@p54AA428F.dip.t-dialin.net) has joined #haskell
2013-03-29 20:18:46	fedvasu	napping: cabal ain't as pretty as adverstised, it doesn't work sometimes, like installing Agda2 recently
2013-03-29 20:19:15	<--	HaltingState (~HaltingSt@unaffiliated/haltingstate) has quit (Remote host closed the connection)
2013-03-29 20:19:17	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-03-29 20:19:17	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-03-29 20:19:17	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-03-29 20:19:20	-->	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has joined #haskell
2013-03-29 20:19:27	napping	yeah, some things might be better built sandboxed, especially if you just want to produce a statically linked binary for yourself
2013-03-29 20:19:32	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-03-29 20:20:17	<--	unpastoral24 (~unpastora@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-03-29 20:20:32	monochrom	"ghc-ghc-devel is for hacking on ghc" is wrong
2013-03-29 20:20:54	fedvasu	monochrom : for what it is?
2013-03-29 20:21:06	<--	kith (~kith@unaffiliated/kith) has quit (Read error: Connection reset by peer)
2013-03-29 20:21:23	monochrom	if you use any of hint, ghc-mod, eclipsefp... you already need it
2013-03-29 20:21:55	fedvasu	monochrom: hmm, for emacs-haksell-mode??
2013-03-29 20:22:03	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-03-29 20:22:16	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-03-29 20:22:16	<--	croikle (~peterm@134.53.245.65) has quit (Quit: croikle)
2013-03-29 20:22:18	-->	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has joined #haskell
2013-03-29 20:22:34	monochrom	not really, but ghc-mod is for emacs and goes beyond emacs haskell mode
2013-03-29 20:23:14	ChongLi	fedvasu: hmmm
2013-03-29 20:23:25	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-29 20:23:33	monochrom	anyway generally it is needed for advanced IDE and IDE-like things
2013-03-29 20:23:44	ChongLi	fedvasu: it sounds to me like the maintainer wants to help you
2013-03-29 20:23:46	-->	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has joined #haskell
2013-03-29 20:23:46	fedvasu	monochrom: can just jeave your couple of points on that bugsite, so that I and mainatainer both are enlightened ??
2013-03-29 20:23:59	monochrom	no, I don't really care about fedora
2013-03-29 20:24:08	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 20:24:08	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Read error: Connection reset by peer)
2013-03-29 20:24:37	fedvasu	ChongLi: yeah, I get that, but does he understand what is absolutely required and what ain't?, I don't!!
2013-03-29 20:24:49	-->	icarot (~icarot@2600:1010:b102:2080:0:14:497a:6901) has joined #haskell
2013-03-29 20:24:53	ChongLi	fedvasu: depends what you want to do
2013-03-29 20:25:05	-->	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-29 20:25:07	ChongLi	Network is required for a lot of things, for example
2013-03-29 20:25:11	-->	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-29 20:25:20	fedvasu	monochrom: OK, fair enough. No fedora love on irc huh?
2013-03-29 20:26:03	fedvasu	ChongLi: the previous bug report was because i was not able to use quick-chcek ok
2013-03-29 20:26:35	fedvasu	ChongLi: To fix it he added a whole lot of devel packages.
2013-03-29 20:26:40	ChongLi	perhaps you just want to install the compiler and cabal-install
2013-03-29 20:26:48	ChongLi	and then just add any package you need with that
2013-03-29 20:27:01	<--	timemage (~user@pool-71-241-132-15.burl.east.myfairpoint.net) has quit (Read error: No route to host)
2013-03-29 20:27:30	fedvasu	ChongLi: yeah, perhaps.. that is best. but the thing is ghc-compiler is not freely installable from packages, it has ghc-ghc-devel as dependency
2013-03-29 20:27:43	-->	HaltingState (~HaltingSt@cpe-76-169-228-195.socal.res.rr.com) has joined #haskell
2013-03-29 20:27:44	<--	HaltingState (~HaltingSt@cpe-76-169-228-195.socal.res.rr.com) has quit (Changing host)
2013-03-29 20:27:44	-->	HaltingState (~HaltingSt@unaffiliated/haltingstate) has joined #haskell
2013-03-29 20:28:01	fedvasu	ChongLi: the problem is with dependendncy, not how i install ghc by default.
2013-03-29 20:28:04	ChongLi	by the way, I don't know how the arch maintainer gets such a small package
2013-03-29 20:28:28	ChongLi	if you just download ghc from the website on haskell.org/ghc it is 120+MB
2013-03-29 20:28:32	Pods	Looks like there is an error in building swish.. http://pastebin.com/raw.php?i=2CaU5yCL ;  (hpaste wasn't loading in my browser so i reverted to using pastebin instead)
2013-03-29 20:28:37	mauke	The paste 2CaU5yCL has been copied to http://hpaste.org/84834
2013-03-29 20:28:47	fedvasu	ChongLi: yeah
2013-03-29 20:28:50	thoughtpolice	ChongLi: it's because that includes documentation and other stuff
2013-03-29 20:29:01	thoughtpolice	and a lot of libraries
2013-03-29 20:29:02	ChongLi	perhaps you want to switch to arch linux!
2013-03-29 20:29:10	thoughtpolice	so most of the time maintainers will split those pieces out
2013-03-29 20:29:21	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-29 20:29:29	-->	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has joined #haskell
2013-03-29 20:29:29	fedvasu	ChongLi: about time!! may be Gentoo!!
2013-03-29 20:29:36	ChongLi	haha, gentoo
2013-03-29 20:29:43	monochrom	GHC takes a while to build
2013-03-29 20:29:53	Pods	Thanks mauke :)
2013-03-29 20:30:24	fedvasu	monochrom: to build ghc we need ghc right?
2013-03-29 20:30:30	monochrom	also yes
2013-03-29 20:30:33	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Ping timeout: 240 seconds)
2013-03-29 20:30:36	thoughtpolice	well, it *can* take a while to build. even my $80 ARM machine can build GHC in about 2 1/2 hours with 4 cores
2013-03-29 20:30:47	<--	Taneb (~nathan@host-92-23-142-211.as13285.net) has quit (Ping timeout: 255 seconds)
2013-03-29 20:30:56	thoughtpolice	just changing your build flavour and using 'make -j1' can reduce the build time by a factor of like 10
2013-03-29 20:31:03	thoughtpolice	er, 'make -jX'
2013-03-29 20:31:14	fedvasu	thoughtpolice: some kind of chromebook or its knock-off?
2013-03-29 20:31:19	-->	Kyo (~elaineben@h206n2c1o1097.bredband.skanova.com) has joined #haskell
2013-03-29 20:31:24	thoughtpolice	ODROID-U2
2013-03-29 20:31:26	fedvasu	-jX means what?
2013-03-29 20:31:32	Pods	Can anyone explain the error http://hpaste.org/84834
2013-03-29 20:31:33	ChongLi	number of jobs
2013-03-29 20:31:36	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-29 20:31:38	ChongLi	-j4
2013-03-29 20:31:40	ChongLi	4 jobs
2013-03-29 20:31:42	-->	aeron (~aeron@bas4-toronto21-1176311949.dsl.bell.ca) has joined #haskell
2013-03-29 20:31:42	thoughtpolice	it's just an ARM SoC, but a beefy one at that with 4 cores and 2GB of RAM @ 1.7gHZ
2013-03-29 20:32:03	sproingie	didn't know it worked with parallel make.  that oughta help on my 48 core server
2013-03-29 20:32:07	fedvasu	thoughtpolice: thats pretty hardcore
2013-03-29 20:32:27	-->	Taneb (~nathan@host-92-23-142-211.as13285.net) has joined #haskell
2013-03-29 20:32:32	<--	alanz (~alanz@105-236-148-237.access.mtnbusiness.co.za) has quit (Ping timeout: 258 seconds)
2013-03-29 20:32:33	thoughtpolice	sproingie: nobody seems to, i'd say 90% of the time people say GHC takes a long time to build, they're building with 1 core and not modifying their build settings.
2013-03-29 20:32:44	thoughtpolice	my view is skewed though, because i also mostly talk to people who want to work or patch GHC
2013-03-29 20:32:55	sproingie	it doesn't mention it anywhere in the README so i didn't assume it worked
2013-03-29 20:32:58	-->	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 20:33:06	-->	kith (~kith@unaffiliated/kith) has joined #haskell
2013-03-29 20:33:23	<--	Hannibal_Smith (~ff130493@host122-76-dynamic.46-79-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-03-29 20:33:25	thoughtpolice	sproingie: i'll fix that
2013-03-29 20:33:33	thoughtpolice	and make sure the HACKING file has that too since I recently rewrote it
2013-03-29 20:33:34	sproingie	yay :)
2013-03-29 20:33:47	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-29 20:33:53	<--	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-03-29 20:34:03	<--	hiroakip (~hiroaki@77-20-72-92-dynip.superkabel.de) has quit (Ping timeout: 252 seconds)
2013-03-29 20:34:42	<--	cognominal__ (~cognomina@37.161.235.232) has quit (Read error: Connection reset by peer)
2013-03-29 20:35:46	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 20:35:57	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-29 20:37:16	juliohm	Off-topic: Is someone advanced user of TeX/LaTeX? Where on earth i can learn this language in deep? All the book i've read are superficial and teach examples instead of the language itself.
2013-03-29 20:37:35	<--	sonda (~sonda@ppp-181-37.26-151.libero.it) has quit (Remote host closed the connection)
2013-03-29 20:37:45	monochrom	if you really want deep, Knuth's The TeXbook
2013-03-29 20:37:53	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-29 20:38:01	ChongLi	that sounds pretty scary
2013-03-29 20:38:25	monochrom	what can I do. "deep" is being demanded.
2013-03-29 20:38:26	<--	Taneb (~nathan@host-92-23-142-211.as13285.net) has quit (Ping timeout: 255 seconds)
2013-03-29 20:38:43	ChongLi	donald knuth is a crazy wizard genius who writes big scary tomes!
2013-03-29 20:38:53	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-29 20:39:00	napping	TeX is pretty scary too, but that is the book if you really want to know how it works
2013-03-29 20:39:02	byorgey	the TeXbook is not that big actually.
2013-03-29 20:39:02	ChongLi	hopefully he manages to finish TAOCP
2013-03-29 20:39:04	thoughtpolice	sproingie: https://github.com/ghc/ghc/commit/0b72347dc468ba081d67385a077238bcaa9eb4d5
2013-03-29 20:39:16	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-03-29 20:39:33	monochrom	this one, fortunately, is just 500 pages
2013-03-29 20:39:48	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-29 20:40:05	napping	I presume there's a literate programming version of the source if you really want, but the TeXbook is as in depth as I've needed
2013-03-29 20:40:16	byorgey	huh, for some reason I thought it was shorter than that
2013-03-29 20:40:33	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 240 seconds)
2013-03-29 20:40:35	sproingie	thoughtpolice: looks good :)
2013-03-29 20:40:39	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Ping timeout: 252 seconds)
2013-03-29 20:40:43	<--	sellout- (~Adium@67.51.227.94) has quit (Ping timeout: 260 seconds)
2013-03-29 20:41:07	thoughtpolice	oh shoot
2013-03-29 20:41:07	sproingie	make -j49 # mmmmmm
2013-03-29 20:41:30	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-03-29 20:41:46	yezariaely	sproingie: So many cores, you have? Using all of them, you must!
2013-03-29 20:42:01	sproingie	hrm!
2013-03-29 20:43:11	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-03-29 20:44:22	ChongLi	perhaps in a few thousand years they'll think of TAOCP the way we think of Euclid's Elements?
2013-03-29 20:45:07	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 20:45:14	-->	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has joined #haskell
2013-03-29 20:45:29	-->	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has joined #haskell
2013-03-29 20:45:56	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-03-29 20:46:54	augur	hmm
2013-03-29 20:47:06	augur	Num a => Num (Cont a) ??
2013-03-29 20:47:19	<--	HalfWayMan (~blake@cpc1-seac9-0-0-cust413.7-2.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-03-29 20:47:29	<--	phischu (~pschuster@p4FD30148.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-29 20:47:30	juliohm	monochrom, have you read the Knuth's book? It's worth buying?
2013-03-29 20:47:43	juliohm	i'll try it out...
2013-03-29 20:47:46	juliohm	searching for a preview
2013-03-29 20:48:03	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-29 20:48:09	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 20:48:10	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Read error: Connection reset by peer)
2013-03-29 20:48:20	<--	Rants (~quassel@71-212-143-49.hlrn.qwest.net) has quit (Remote host closed the connection)
2013-03-29 20:48:29	-->	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has joined #haskell
2013-03-29 20:48:30	-->	cognominal (~cognomina@37.161.235.232) has joined #haskell
2013-03-29 20:48:37	thoughtpolice	sproingie: hilariously i almost broke the repository with that commit.
2013-03-29 20:48:43	thoughtpolice	submodules and 'git commit -a' strike again
2013-03-29 20:48:44	thoughtpolice	*sigh*
2013-03-29 20:49:21	thoughtpolice	i really wish we could just not use them somehow. they just seem error prone at this rate
2013-03-29 20:49:21	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 20:49:31	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 20:49:50	-->	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has joined #haskell
2013-03-29 20:50:03	ChongLi	I don't use submodules :)
2013-03-29 20:50:46	yezariaely	juliohm: If you refer to Knuth's The Art of computer Programming, it is definitely worth buying, though large and (partly) complex. But if you do half of the exercises (follow the algorithm in the introduction ;-)) you learn lot of stuff.
2013-03-29 20:51:18	yezariaely	If you are able to use the new knowledge depends though.
2013-03-29 20:51:42	juliohm	yezariaely, no, The TeXBook
2013-03-29 20:51:44	<--	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-29 20:51:53	-->	sepp2k (~sexy@g224103007.adsl.alicedsl.de) has joined #haskell
2013-03-29 20:52:04	juliohm	The Art of Programming is incredible, but no one has patience to read the full series
2013-03-29 20:52:04	-->	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has joined #haskell
2013-03-29 20:52:06	juliohm	nor time
2013-03-29 20:52:24	<--	beefcube (~jpf@cpe-192-136-217-198.tx.res.rr.com) has quit (Remote host closed the connection)
2013-03-29 20:52:32	yezariaely	Definitely. But I don't know his TeXBook, sorry.
2013-03-29 20:53:09	 *	geekosaur has it in storage somewhere, if it hasn't suffered water damage or something
2013-03-29 20:53:22	napping	juliohm: I've found the TeXBook useful
2013-03-29 20:53:39	geekosaur	it's pretty good, but TeX is fairly low level. if you're using latex you probably want to start with lamport's book instead
2013-03-29 20:53:57	napping	I don't need to do it often, but it's been invaluable for understanding some weird stuff
2013-03-29 20:54:15	juliohm	geekosaur, i have read lots of books for latex, probably this one by lamport, all are superficial and don't teach the language, just copy/paste snippets
2013-03-29 20:54:38	juliohm	i'm not able to write my own packages by reading those latex books
2013-03-29 20:54:47	juliohm	or contribute to existing ones
2013-03-29 20:55:08	<--	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-29 20:55:09	geekosaur	ok, for that level you would also need knuth
2013-03-29 20:55:16	fedvasu	juliom: have tried wikibook on latex? lt is cookbook style and I think covers lot of breadth
2013-03-29 20:55:27	fedvasu	juliom: not sure of depth
2013-03-29 20:55:31	-->	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has joined #haskell
2013-03-29 20:55:33	<--	nexx (~SPS-User@dslb-188-096-171-242.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-03-29 20:55:36	-->	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has joined #haskell
2013-03-29 20:55:41	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-29 20:56:07	-->	Urchin[emacs] (~user@unaffiliated/urchin) has joined #haskell
2013-03-29 20:56:32	<--	PartyKat1e (~R8128@secanda.nl) has quit (Ping timeout: 272 seconds)
2013-03-29 20:56:58	<--	Breadmonster (4e9ad236@gateway/web/freenode/ip.78.154.210.54) has quit (Quit: Page closed)
2013-03-29 20:57:09	-->	PartyKat1e (~R8128@secanda.nl) has joined #haskell
2013-03-29 20:57:20	<--	yacks (~yacks@180.151.36.168) has quit (Quit: Leaving)
2013-03-29 20:57:24	-->	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has joined #haskell
2013-03-29 20:58:13	<--	fujimura (~fujimura@ntt8-ppp966.tokyo.sannet.ne.jp) has quit (Remote host closed the connection)
2013-03-29 20:59:09	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-29 20:59:10	-->	NemesisD_ (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 20:59:14	--	NemesisD_ is now known as NemesisD
2013-03-29 20:59:16	dEPY	anyone can look at this: http://hpaste.org/84835 and tell me why is solveRPN working ok and myRpn is not working properly? myRpn calculates ok "1 1 +" but fails at "1 1 1 +"
2013-03-29 20:59:20	-->	dmarker (~dmarker@inet-hqmc05-o.oracle.com) has joined #haskell
2013-03-29 20:59:21	<--	dmarker (~dmarker@inet-hqmc05-o.oracle.com) has quit (Client Quit)
2013-03-29 20:59:33	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-29 20:59:34	-->	dmarker (~dmarker@inet-hqmc05-o.oracle.com) has joined #haskell
2013-03-29 20:59:47	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Read error: Operation timed out)
2013-03-29 21:00:19	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Remote host closed the connection)
2013-03-29 21:00:49	<--	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-29 21:00:53	-->	bos (~bos@173.252.71.1) has joined #haskell
2013-03-29 21:00:57	-->	emc2 (~emccorkl@thingy.cs.umass.edu) has joined #haskell
2013-03-29 21:01:12	NemesisD	hi guys. i'm trying to specify build an API client, one of the functions returns IO [Result], on the remote end it is getting items a page at a time
2013-03-29 21:02:00	NemesisD	but i want that list to be lazy so that you'd do something like: results <- apiCall; print $ take 2 results and it would not make unnecessary API calls
2013-03-29 21:02:36	hpaste	NemesisD pasted “lazy io” at http://hpaste.org/84836
2013-03-29 21:03:04	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has quit (Quit: roshan)
2013-03-29 21:03:06	NemesisD	a simplified example ^ could anyone give me a hint how i'd restructure this for laziness in the result
2013-03-29 21:04:50	<--	faen (frantk@fran.tk) has quit (Remote host closed the connection)
2013-03-29 21:05:05	-->	trescenzi (~trescenzi@2620:91:0:163:a82b:e8c2:ee64:f0f1) has joined #haskell
2013-03-29 21:05:27	<--	bos (~bos@173.252.71.1) has quit (Ping timeout: 260 seconds)
2013-03-29 21:05:56	-->	phischu (~pschuster@p4FD31972.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 21:05:57	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 252 seconds)
2013-03-29 21:07:05	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-29 21:09:00	<--	mrsolo (~mrsolo@64.125.181.92) has quit (Quit: This computer has gone to sleep)
2013-03-29 21:09:06	-->	bos (~bos@173.252.71.1) has joined #haskell
2013-03-29 21:09:18	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-29 21:09:29	<--	emc2 (~emccorkl@thingy.cs.umass.edu) has quit (Ping timeout: 255 seconds)
2013-03-29 21:09:36	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-29 21:09:48	-->	mrsolo (~mrsolo@64.125.181.92) has joined #haskell
2013-03-29 21:10:07	<--	trescenzi (~trescenzi@2620:91:0:163:a82b:e8c2:ee64:f0f1) has quit (Ping timeout: 264 seconds)
2013-03-29 21:10:10	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 21:10:25	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 21:11:23	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-03-29 21:13:24	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-29 21:13:25	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-29 21:13:34	<--	cognominal (~cognomina@37.161.235.232) has quit (Ping timeout: 256 seconds)
2013-03-29 21:13:53	<--	kennyd (~kennyd@93-141-55-39.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-03-29 21:14:30	NemesisD	should i be using an IOArray or just choose a streaming library and abandon this pursuit
2013-03-29 21:14:34	<--	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has quit (Ping timeout: 245 seconds)
2013-03-29 21:14:45	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 252 seconds)
2013-03-29 21:14:55	<--	azaq23 (~derivecto@unaffiliated/azaq23) has quit (Quit: Leaving.)
2013-03-29 21:14:57	 *	Pods waiting for any advancement in swish related queries 
2013-03-29 21:15:12	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-03-29 21:15:25	NemesisD	swish queries?
2013-03-29 21:15:54	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-29 21:16:03	tamiko	NemesisD: You can use unsafeInterleaveIO to lazily build up [result]
2013-03-29 21:16:52	Pods	NemesisD :  building swish gives me an error  http://hpaste.org/84834, seems to me like a bug
2013-03-29 21:16:56	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: shab khosh)
2013-03-29 21:17:05	NemesisD	tamiko: that sounds... unsafe
2013-03-29 21:17:09	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-03-29 21:18:42	tamiko	NemesisD: Actually it does what you want and is quite a nice way to interleave IO when building up a WHNF such as a list.
2013-03-29 21:19:04	-->	kennyd (~kennyd@93-138-25-41.adsl.net.t-com.hr) has joined #haskell
2013-03-29 21:19:12	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-29 21:19:24	NemesisD	tamiko: hmm, yeah i've just always strived to stay away from the unsafe functions because i don't know what i'm doing
2013-03-29 21:19:50	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-29 21:19:59	NemesisD	also this is a library and i don't want to hose anyone's code by doing this
2013-03-29 21:20:07	<--	tommd (~tommd@pdx.galois.com) has quit (Client Quit)
2013-03-29 21:20:10	tamiko	NemesisD: I found an example snippet. Something I've written 2 or 3 years ago. http://dpaste.org/pptOo/
2013-03-29 21:20:19	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Ping timeout: 264 seconds)
2013-03-29 21:20:24	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-29 21:20:52	--	Guest58551 is now known as `micro
2013-03-29 21:20:54	<--	Flame_Alchemist (~Flame_Alc@host245-236-dynamic.11-79-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-03-29 21:22:00	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 21:22:39	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 21:22:51	mauke	preflex: longest-unseen
2013-03-29 21:22:56	mauke	inb4 ping timeout
2013-03-29 21:23:11	-->	cognominal (~cognomina@37.160.45.234) has joined #haskell
2013-03-29 21:23:13	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-29 21:23:19	-->	willem (~wi@541BB0B7.cm-5-4c.dynamic.ziggo.nl) has joined #haskell
2013-03-29 21:24:23	--	willem is now known as wi
2013-03-29 21:24:41	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-29 21:24:42	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 21:24:43	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 245 seconds)
2013-03-29 21:25:10	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 21:25:28	NemesisD	tamiko: more surprising to me is that you have to use the unsafeInterleaveIO function for something that seems like it should be within haskell's wheelhouse, lazily producing values
2013-03-29 21:25:38	lispy	I'll just leave this here...http://www.andres-loeh.de/GenericGenericProgramming/ggp.pdf
2013-03-29 21:25:52	<--	cjay (cjay@nerdbox.nerd2nerd.org) has quit (Read error: Connection reset by peer)
2013-03-29 21:26:02	preflex	 fghy was last seen on #perl 4 years, 349 days, 8 hours, 40 minutes and 50 seconds ago, saying: SINCE?
2013-03-29 21:26:06	-->	aa47f8 (~sdaone@c80-217-33-230.bredband.comhem.se) has joined #haskell
2013-03-29 21:26:19	<--	Mon_Ouie (~Mon_Ouie@subtle/user/MonOuie) has quit (Quit: WeeChat 0.4.0)
2013-03-29 21:26:21	<--	kaoskorobase (~sk@84.78.195.71) has quit (Quit: kaoskorobase)
2013-03-29 21:26:23	<--	hrehf (~s@p4FE3B709.dip.t-dialin.net) has quit (Quit: bfg)
2013-03-29 21:26:24	mauke	oh, interesting
2013-03-29 21:26:34	-->	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has joined #haskell
2013-03-29 21:26:45	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-29 21:27:09	-->	rs234 (~rs234@89.137.4.235) has joined #haskell
2013-03-29 21:27:43	<--	cognominal (~cognomina@37.160.45.234) has quit (Ping timeout: 246 seconds)
2013-03-29 21:28:16	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-03-29 21:28:17	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-03-29 21:28:20	tamiko	NemesisD: Not with IO. This is a very subtle matter.
2013-03-29 21:28:31	<--	aeron (~aeron@bas4-toronto21-1176311949.dsl.bell.ca) has left #haskell
2013-03-29 21:28:38	-->	cjay (~cjay@ppp-62-216-198-149.dynamic.mnet-online.de) has joined #haskell
2013-03-29 21:29:49	NemesisD	tamiko: makes me think what i'm doing might be a bad idea
2013-03-29 21:30:11	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-03-29 21:30:18	NemesisD	i'd just use io-streams or something but then that pisses off adherants to the religions of pipe, conduit, enumerators, etc
2013-03-29 21:30:22	tibbe	@pl \ z xs f -> foldl f z xs
2013-03-29 21:30:22	lambdabot	flip . flip foldl
2013-03-29 21:30:34	tibbe	lambdabot: you there?
2013-03-29 21:30:45	<--	haskN00b (62bfc0a9@gateway/web/freenode/ip.98.191.192.169) has quit (Quit: Page closed)
2013-03-29 21:30:47	mauke	@msg #haskell yes
2013-03-29 21:30:47	lambdabot	Not enough privileges
2013-03-29 21:31:03	-->	cognominal (~cognomina@37.161.112.152) has joined #haskell
2013-03-29 21:31:14	tamiko	mauke: ;-)
2013-03-29 21:31:37	<--	aa47f8 (~sdaone@c80-217-33-230.bredband.comhem.se) has left #haskell
2013-03-29 21:31:41	-->	trescenzi (~trescenzi@2620:91:0:163:483a:ee18:10c5:b5f8) has joined #haskell
2013-03-29 21:31:56	<--	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 21:32:19	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-29 21:32:46	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-29 21:33:12	<--	megabeest (~megabeest@i59202.upc-i.chello.nl) has quit (Remote host closed the connection)
2013-03-29 21:33:45	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-29 21:34:14	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 255 seconds)
2013-03-29 21:34:43	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-29 21:34:56	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-03-29 21:35:18	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 21:35:58	otters	does anybody else use cabal-ghci?
2013-03-29 21:36:13	otters	it randomly breaks on me
2013-03-29 21:37:13	-->	Kayexter (6d96476f@gateway/web/freenode/ip.109.150.71.111) has joined #haskell
2013-03-29 21:38:00	<--	taterbase (~taterbase@63.226.99.118) has quit (Remote host closed the connection)
2013-03-29 21:38:50	c_wraith	NemesisD: it doesn't really. Gabriel Gonzales was one of the main contributors to io-streams.
2013-03-29 21:39:10	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-29 21:39:34	<--	sepp2k (~sexy@g224103007.adsl.alicedsl.de) has quit (Quit: Leaving.)
2013-03-29 21:39:41	-->	sepp2k (~sexy@g224103007.adsl.alicedsl.de) has joined #haskell
2013-03-29 21:39:47	Kayexter	Hey, im new to the haskell language, and i'm wondering if someone could tell me why this is not working
2013-03-29 21:39:56	Kayexter	remove:: Eq a => a -> [[a]] -> [[a]]
2013-03-29 21:40:01	Kayexter	remove a (x:xs) = remove (filter (/=a) x) xs
2013-03-29 21:40:05	-->	schlicht__ (~fl@g225052107.adsl.alicedsl.de) has joined #haskell
2013-03-29 21:40:05	NemesisD	c_wraith: how can he do both D:
2013-03-29 21:40:09	Kayexter	noidea what im doing wrong
2013-03-29 21:40:15	NemesisD	there is obviously only 1 true right answer
2013-03-29 21:40:46	mauke	Kayexter: define "not working"
2013-03-29 21:40:56	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 21:41:06	flux	kayexter, I don't know either, but at least I can see that you are not handling the base case: remove 42 []
2013-03-29 21:41:08	geekosaur	Kayexter, I see you using remove in two different types there (the one you declared, and one that takes a predicate)
2013-03-29 21:41:12	geekosaur	how is that supposed to work?
2013-03-29 21:41:22	mauke	geekosaur: what predicate?
2013-03-29 21:41:36	mauke	the different types are a and [a]
2013-03-29 21:41:36	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-29 21:41:39	geekosaur	mauke: the parameter with filter?
2013-03-29 21:41:43	geekosaur	oh, right
2013-03-29 21:41:44	geekosaur	ok
2013-03-29 21:41:54	-->	niklasb_ (~codeslay0@p5B3102AF.dip0.t-ipconnect.de) has joined #haskell
2013-03-29 21:41:54	 *	geekosaur read too fast
2013-03-29 21:42:02	mauke	and too deep
2013-03-29 21:42:53	Kayexter	I get a 'Couldn't match type' error
2013-03-29 21:43:16	mauke	Kayexter: what's the error message?
2013-03-29 21:43:33	<--	schlicht_ (~fl@g225062225.adsl.alicedsl.de) has quit (Ping timeout: 240 seconds)
2013-03-29 21:43:35	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-29 21:44:17	-->	stephenjudkins (~textual@c-98-246-155-212.hsd1.or.comcast.net) has joined #haskell
2013-03-29 21:44:19	<--	niklasb (~codeslay0@p5B3102AF.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-03-29 21:44:34	<--	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-29 21:44:41	--	niklasb_ is now known as niklasb
2013-03-29 21:44:45	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-29 21:44:53	aavogt	geekosaur: you're allowed to have polymorphic recursion, for example:    remove a (x:xs) = concat $ remove (filter (/=a) x) [xs]
2013-03-29 21:45:18	geekosaur	no, I misread it as a partiual application
2013-03-29 21:45:22	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 21:45:26	Kayexter	'a' is a rigid type variable bound by the type signature for remove :: Eq a => a -> [[a]] -> [[a]] is the full error
2013-03-29 21:45:31	geekosaur	was flipping beween this channel and another
2013-03-29 21:45:34	aavogt	in that remove on the right hand side is called with type   [a] -> [[[a]]] -> [[[a]]]
2013-03-29 21:46:05	aavogt	but then you need to do stuff to make sure that the type being returned isn't infinite / dependent on the length of the input list
2013-03-29 21:46:14	<--	lemao (~lemao@c-174-62-194-16.hsd1.me.comcast.net) has quit (Remote host closed the connection)
2013-03-29 21:46:20	aavogt	Kayexter: you should keep the 'a' argument the same
2013-03-29 21:46:21	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-29 21:46:44	aavogt	 remove a (x:xs) = filter (/=a) x : remove a xs
2013-03-29 21:46:52	mauke	Kayexter: that's not the full error
2013-03-29 21:46:54	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Read error: Connection reset by peer)
2013-03-29 21:47:06	-->	amindfv (~textual@pool-173-69-2-167.prvdri.fios.verizon.net) has joined #haskell
2013-03-29 21:47:06	-->	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has joined #haskell
2013-03-29 21:47:16	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-29 21:47:36	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 21:47:45	aavogt	or simpler:      remove a xs = map (filter (/= a)) xs
2013-03-29 21:47:54	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-29 21:48:04	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 21:48:35	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-03-29 21:48:38	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 255 seconds)
2013-03-29 21:48:40	Kayexter	I see, thank you people very much, first programming language im learning, still trying to get to grips with evreything
2013-03-29 21:48:40	sipa	remove a = map . filter (/= a)
2013-03-29 21:48:53	-->	qm_ (~Volta@cpe-70-124-195-111.rgv.res.rr.com) has joined #haskell
2013-03-29 21:49:08	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 21:49:08	shachaf	sipa: I think you want $, not .
2013-03-29 21:49:09	<--	trescenzi (~trescenzi@2620:91:0:163:483a:ee18:10c5:b5f8) has quit (Remote host closed the connection)
2013-03-29 21:49:23	shachaf	(Actually you want parentheses, of course.)
2013-03-29 21:49:39	sipa	eh, rifht
2013-03-29 21:49:42	sipa	right
2013-03-29 21:49:55	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Client Quit)
2013-03-29 21:50:25	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 256 seconds)
2013-03-29 21:50:37	-->	mmm__ (~bark@2001:470:8a52:67:f0d8:bb81:cb85:386c) has joined #haskell
2013-03-29 21:50:41	-->	trescenzi (~trescenzi@148.100.78.6) has joined #haskell
2013-03-29 21:51:27	-->	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has joined #haskell
2013-03-29 21:51:58	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 21:52:13	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 246 seconds)
2013-03-29 21:52:51	--	tyler is now known as tjgillies
2013-03-29 21:53:15	<--	cognominal (~cognomina@37.161.112.152) has quit (Ping timeout: 252 seconds)
2013-03-29 21:55:07	<--	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-29 21:55:18	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 21:56:13	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Ping timeout: 240 seconds)
2013-03-29 21:56:18	<--	silver (~silver@37.214.34.150) has quit (Read error: Connection reset by peer)
2013-03-29 21:57:11	<--	schlicht__ (~fl@g225052107.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-03-29 21:57:57	<--	Kayexter (6d96476f@gateway/web/freenode/ip.109.150.71.111) has quit (Quit: Page closed)
2013-03-29 21:58:15	-->	mahogny (~mahogny@m30742.olf.sgsnet.se) has joined #haskell
2013-03-29 21:58:22	-->	Kayexter (6d96476f@gateway/web/freenode/ip.109.150.71.111) has joined #haskell
2013-03-29 21:58:34	otters	as far as I can tell, the only way to read from a socket until null byte is character by character
2013-03-29 21:58:43	-->	cognominal (~cognomina@37.160.48.8) has joined #haskell
2013-03-29 21:59:07	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 260 seconds)
2013-03-29 21:59:25	<--	trescenzi (~trescenzi@148.100.78.6) has quit (Remote host closed the connection)
2013-03-29 21:59:39	-->	silver (~silver@178.120.62.213) has joined #haskell
2013-03-29 21:59:55	Eelis	these days if i were to use sockets and wasn't bound to an existing TCP protocol or something, i'd probably use zeromq
2013-03-29 22:00:23	geekosaur	otters, that's usually the only way provided by the OS
2013-03-29 22:00:25	otters	i'm bound to an existing TCP protocol
2013-03-29 22:00:41	otters	okay, thanks
2013-03-29 22:01:21	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-03-29 22:01:46	-->	schlicht (~fl@g225052107.adsl.alicedsl.de) has joined #haskell
2013-03-29 22:02:33	<--	osa1 (~omer@176.237.218.208) has quit (Ping timeout: 240 seconds)
2013-03-29 22:02:54	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: [BX] The Invisible Man uses BitchX, you just can't see it!)
2013-03-29 22:02:56	sipa	otters: i think you can peek into a socket to find its next data being read, without actually reading it
2013-03-29 22:03:29	sipa	otters: so you could do thay, scan tje memory buffer for null, and then 'read' that many bytes for real
2013-03-29 22:03:42	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 252 seconds)
2013-03-29 22:03:46	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-29 22:03:47	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-29 22:03:50	-->	trescenzi (~trescenzi@2620:91:0:163:9478:3275:be30:886f) has joined #haskell
2013-03-29 22:04:03	<--	trescenzi (~trescenzi@2620:91:0:163:9478:3275:be30:886f) has quit (Remote host closed the connection)
2013-03-29 22:04:18	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-29 22:04:19	otters	hmmm
2013-03-29 22:04:22	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-29 22:04:26	otters	hLookAhead only returns a char though
2013-03-29 22:04:27	quchen	I've got a newtype wrapper around a monad (transformer stack). Is there an easy way of making this a monad?
2013-03-29 22:04:44	quchen	As in "is the obvious solution of writing bind using wrap/unwrap correct"
2013-03-29 22:04:58	-->	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has joined #haskell
2013-03-29 22:05:15	quchen	GeneralizedNewtypeDeriving is black magic so I'd like to do it explicitly myself even if that's an alternative :-)
2013-03-29 22:05:23	otters	sipa: I don't think you can look ahead more than a character lol
2013-03-29 22:05:31	-->	joneshf-laptop (~joneshf@mail.concordusapps.com) has joined #haskell
2013-03-29 22:05:36	-->	[[zzz]] (~q@node-6pr.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-29 22:07:13	sipa	otters: pretty sure you can; recvfrom() , MSG_PEEK
2013-03-29 22:07:25	otters	in haskell?
2013-03-29 22:08:00	sipa	oh, no idea :)
2013-03-29 22:08:20	sipa	i meant sockets in general support that
2013-03-29 22:08:22	hpaste	dates pasted “modifying list of list of strings” at http://hpaste.org/84839
2013-03-29 22:08:35	sipa	i never wrote networking code in haskell
2013-03-29 22:08:36	<--	[[zz]] (~q@node-4m3.pool-125-25.dynamic.totbb.net) has quit (Ping timeout: 264 seconds)
2013-03-29 22:08:59	-->	TallerGhostWalt (62bfc0a9@gateway/web/freenode/ip.98.191.192.169) has joined #haskell
2013-03-29 22:09:00	dates	hi, I made a hpaste, can you help me  solving that problem?
2013-03-29 22:09:18	<--	cognominal (~cognomina@37.160.48.8) has quit (Ping timeout: 245 seconds)
2013-03-29 22:09:26	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-29 22:09:39	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-03-29 22:10:35	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-29 22:11:45	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-29 22:11:48	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 22:12:33	<--	edtsech (~edtsech@98.193.broadband6.iol.cz) has quit (Remote host closed the connection)
2013-03-29 22:13:48	otters	is it possible to fork a child process and exit without killing it? basically replacing the current process with a new one
2013-03-29 22:14:00	-->	cognominal (~cognomina@37.161.135.33) has joined #haskell
2013-03-29 22:14:08	otters	because code hotloading etc. is out of scope for this bot, I'd rather just have it restart itself by executing the binary
2013-03-29 22:14:12	mauke	er. it sounds like you're describing exec
2013-03-29 22:14:33	otters	er yes
2013-03-29 22:14:42	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Ping timeout: 252 seconds)
2013-03-29 22:14:51	 *	hackagebot names 0.2 - Types that symbolise Names.  http://hackage.haskell.org/package/names-0.2 (JulianFleischer)
2013-03-29 22:14:53	 *	hackagebot named-records 0.1 - Named records.  http://hackage.haskell.org/package/named-records-0.1 (JulianFleischer)
2013-03-29 22:14:54	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit
2013-03-29 22:14:57	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-03-29 22:15:23	--	pepijndevos is now known as pepijn_away
2013-03-29 22:15:30	<--	adu (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Quit: adu)
2013-03-29 22:15:49	<--	fedvasu (73f2e9d4@gateway/web/freenode/ip.115.242.233.212) has quit
2013-03-29 22:15:53	<--	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has quit (Ping timeout: 240 seconds)
2013-03-29 22:16:11	geekosaur	:t execProcess
2013-03-29 22:16:13	lambdabot	Not in scope: `execProcess'
2013-03-29 22:16:18	<--	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-29 22:16:24	geekosaur	silly bot
2013-03-29 22:16:45	-->	emilie__ (~emilie@c-65-96-244-250.hsd1.nh.comcast.net) has joined #haskell
2013-03-29 22:16:54	otters	like ruby's exec
2013-03-29 22:16:56	otters	!
2013-03-29 22:17:00	otters	and since ruby and haskell have so much in common...
2013-03-29 22:17:19	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 260 seconds)
2013-03-29 22:17:21	-->	ozgura (~ozgura@host-2-96-30-184.as13285.net) has joined #haskell
2013-03-29 22:17:25	mauke	no, like unix exec
2013-03-29 22:17:38	otters	yeah, ruby exec is unix exec
2013-03-29 22:18:29	<--	cognominal (~cognomina@37.161.135.33) has quit (Read error: Connection reset by peer)
2013-03-29 22:18:50	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Quit: WeeChat 0.3.7)
2013-03-29 22:18:53	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-29 22:18:58	-->	beaky (~beaky@92.96.112.56) has joined #haskell
2013-03-29 22:19:00	ChongLi	ruby and haskell have so much in common?
2013-03-29 22:19:01	beaky	hello
2013-03-29 22:19:06	otters	no ChongLi
2013-03-29 22:19:07	beaky	how do I make a lambda call itself?
2013-03-29 22:19:12	ChongLi	I didn't think so :)
2013-03-29 22:19:14	otters	beaky: fix
2013-03-29 22:19:28	beaky	@src fix
2013-03-29 22:19:28	lambdabot	fix f = let x = f x in x
2013-03-29 22:19:28	otters	so what I'm looking for is probably System.Posix.Process.executeFile then
2013-03-29 22:19:31	otters	or forkProcess
2013-03-29 22:19:54	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-29 22:20:10	geekosaur	not forkProcess
2013-03-29 22:20:16	joaopizani	beaky: an easier-to-understand definition for fix is probably
2013-03-29 22:20:25	joaopizani	beaky: fix f = f (fix f)
2013-03-29 22:20:28	--	emilie__ is now known as emilie
2013-03-29 22:20:41	otters	executeFile then
2013-03-29 22:20:42	-->	Kruppe (~user@CPE602ad0938e9a-CM602ad0938e97.cpe.net.cable.rogers.com) has joined #haskell
2013-03-29 22:20:45	shachaf	From some perspectives the other one is easier to understand.
2013-03-29 22:20:57	shachaf	> let x = 1 : x in x
2013-03-29 22:20:58	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-03-29 22:21:02	beaky	I guess the @src one is written in a way to avoid a recursive type?
2013-03-29 22:21:03	shachaf	Now abstract out the (1:)
2013-03-29 22:21:17	monochrom	for fix, see my http://www.vex.net/~trebla/haskell/fix.xhtml
2013-03-29 22:21:41	beaky	> fix (1:)
2013-03-29 22:21:42	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-03-29 22:21:45	otters	but then, how to figure out the location of the executable
2013-03-29 22:21:59	monochrom	also, the "let" version increases sharing
2013-03-29 22:22:03	mauke	otters: how portable does it have to be?
2013-03-29 22:22:26	otters	mauke: unix only
2013-03-29 22:22:31	mauke	which unix?
2013-03-29 22:22:31	otters	lunix
2013-03-29 22:22:40	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-03-29 22:22:41	mauke	?
2013-03-29 22:22:42	<--	nooodl (~nooodl@91.179.149.218) has quit (Quit: Leaving)
2013-03-29 22:22:42	otters	realistically speaking, just my debian server
2013-03-29 22:22:43	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-29 22:22:51	mauke	@hoogle readLink
2013-03-29 22:22:52	lambdabot	No results found
2013-03-29 22:23:00	beaky	how do i write fix without using recursion?
2013-03-29 22:23:06	joaopizani	> let fac = fix (\f n -> if n == 0 then 1 else n * f (n-1))  in  fac 4
2013-03-29 22:23:08	lambdabot	  24
2013-03-29 22:23:14	monochrom	cannot be written in haskell
2013-03-29 22:23:17	-->	chrisdone (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-03-29 22:23:19	sproingie	fix is recursive by definition
2013-03-29 22:23:21	tibbe	:pl
2013-03-29 22:23:22	chrisdone	what up
2013-03-29 22:23:22	lambdabot	chrisdone: You have 2 new messages. '/msg lambdabot @messages' to read them.
2013-03-29 22:23:23	tibbe	@pl
2013-03-29 22:23:23	lambdabot	(line 1, column 1):
2013-03-29 22:23:23	lambdabot	unexpected end of input
2013-03-29 22:23:23	lambdabot	expecting white space, "()", natural, identifier, lambda abstraction or expression
2013-03-29 22:23:26	joaopizani	monochrom: REALLY?
2013-03-29 22:23:26	elliott	beaky: you can do: fix f = let x = f x in x. that might or might not conut as recursive to you
2013-03-29 22:23:34	chrisdone	@yow do you work yet
2013-03-29 22:23:34	lambdabot	Couldn't find fortune file
2013-03-29 22:23:43	monochrom	really. because the type system gets into the way
2013-03-29 22:23:53	elliott	you can write it with only type-level, no value-level recursion
2013-03-29 22:24:04	shachaf	Getting into the way is the goal of the type system.
2013-03-29 22:24:04	sproingie	fix exists so you can say this:
2013-03-29 22:24:05	-->	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has joined #haskell
2013-03-29 22:24:06	sproingie	> fix error
2013-03-29 22:24:06	beaky	:t \f -> let x = f x in x
2013-03-29 22:24:08	lambdabot	  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *E...
2013-03-29 22:24:08	lambdabot	(t -> t) -> t
2013-03-29 22:24:08	tibbe	@pl let f x = undefined in Data.IntMap.foldrWithKey' (\ pl b -> f pb b)
2013-03-29 22:24:09	lambdabot	Data.IntMap.foldrWithKey' (const undefined)
2013-03-29 22:24:10	monochrom	oh, actually, I am probably wrong
2013-03-29 22:24:30	tibbe	@pl let f x = undefined in Data.IntMap.foldrWithKey' (\ pl b -> f pb <> b)
2013-03-29 22:24:30	S11001001	@djinn (a -> a) -> a
2013-03-29 22:24:30	lambdabot	Data.IntMap.foldrWithKey' (const (undefined <>))
2013-03-29 22:24:31	lambdabot	-- f cannot be realized.
2013-03-29 22:24:31	<--	dates (58e3d87b@gateway/web/freenode/ip.88.227.216.123) has quit (Quit: Page closed)
2013-03-29 22:24:34	mauke	otters: /proc/self/exe
2013-03-29 22:24:39	otters	oh, I see
2013-03-29 22:24:41	otters	neato
2013-03-29 22:24:45	beaky	recursion is so cool
2013-03-29 22:24:48	joaopizani	monochrom: can we just use the Y combinator?
2013-03-29 22:24:49	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-03-29 22:24:50	monochrom	nevermind, I'm probably right
2013-03-29 22:24:52	joaopizani	monochrom: let me try :)
2013-03-29 22:25:00	monochrom	the Y combinator has a type problem in Haskell
2013-03-29 22:25:03	tibbe	@pl let f x = [x] in Data.IntMap.foldrWithKey' (\ pl b -> f pb <> b)
2013-03-29 22:25:03	lambdabot	Data.IntMap.foldrWithKey' (const ([pb] <>))
2013-03-29 22:25:05	beaky	so the y combinator is the essence of recursion?
2013-03-29 22:25:08	sproingie	Y is itself a fixpoint combinator
2013-03-29 22:25:10	joaopizani	monochrom: ahhh yeah
2013-03-29 22:25:12	glguy	.?quote monochrom nevermind, I'm probably right
2013-03-29 22:25:17	shachaf	monochrom: You can do it with Rec (a type with negative recursion).
2013-03-29 22:25:18	monochrom	haha
2013-03-29 22:25:27	<--	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has quit (Remote host closed the connection)
2013-03-29 22:25:29	glguy	oh, or remember, or whatever ;)
2013-03-29 22:25:44	elliott	you can write the Y combinator with a newtype wrapper
2013-03-29 22:25:46	elliott	but that wrapper is itself recursive
2013-03-29 22:25:58	-->	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has joined #haskell
2013-03-29 22:25:58	-->	nooodl (~nooodl@91.179.149.218) has joined #haskell
2013-03-29 22:25:59	monochrom	yeah, if you don't use value recursion, you need to go through a recursive type, but I still consider that "using recursion"
2013-03-29 22:26:01	shachaf	Curry's paradox!
2013-03-29 22:26:02	joaopizani	too many workarounds :)
2013-03-29 22:26:10	elliott	not really a workaround
2013-03-29 22:26:14	elliott	just being more explicit about your types
2013-03-29 22:26:17	shachaf	Curry's paradox may be the best paradox.
2013-03-29 22:26:22	<--	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit
2013-03-29 22:26:22	beaky	@src fix
2013-03-29 22:26:22	lambdabot	fix f = let x = f x in x
2013-03-29 22:26:39	chrisdone	shachaf: https://twitter.com/pigworker/status/317065227852185600
2013-03-29 22:26:57	joaopizani	elliott: but this newtype wrapper would be to write type-level or value-level non-recursive fix?
2013-03-29 22:27:00	monochrom	it is certainly not as good as Y which moves the recursion completely to the meta level (the interpreter, the denotational semantics, etc)
2013-03-29 22:27:03	-->	schulenburg36 (~Schulenbu@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 22:27:15	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-03-29 22:27:20	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-03-29 22:27:22	chrisdone	shachaf: thought it was a nice perspective shift from 'types block you from messing up' to 'types guide you to success'
2013-03-29 22:27:40	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-03-29 22:27:47	monochrom	ho hum, I have another idea
2013-03-29 22:27:53	elliott	joaopizani: the newtype wrapper would be type-level recursive.
2013-03-29 22:27:59	elliott	you'd then write a non-value-level-recursive fix using it
2013-03-29 22:28:05	-->	DanZimm (~Dan@c-71-228-47-179.hsd1.in.comcast.net) has joined #haskell
2013-03-29 22:28:07	shachaf	And crash GHC.
2013-03-29 22:28:10	shachaf	So it goes.
2013-03-29 22:28:25	tibbe	Anyone have a good idea how to make this point free and still readable: Map.foldr (\ pl b -> putPostingList pl <> b) mempty
2013-03-29 22:28:47	<--	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-29 22:28:53	tibbe	The pattern that's repeating is that the function being folded over the map computes some values that's then mappended on to the front
2013-03-29 22:28:54	elliott	tibbe: that's a foldMap
2013-03-29 22:28:59	sproingie	@pl Map.foldr (\ pl b -> putPostingList pl <> b) mempty
2013-03-29 22:28:59	lambdabot	Map.foldr ((<>) . putPostingList) mempty
2013-03-29 22:29:00	elliott	foldMap putPostingList
2013-03-29 22:29:06	monochrom	use runST and mutable ref. this may get you a good fix.
2013-03-29 22:29:07	elliott	:ty foldMap ?putPostingList
2013-03-29 22:29:10	elliott	:t foldMap ?putPostingList
2013-03-29 22:29:11	lambdabot	(?putPostingList::a -> m, Foldable t, Monoid m) => t a -> m
2013-03-29 22:29:21	tibbe	ah :)
2013-03-29 22:29:22	elliott	(in Data.Foldable)
2013-03-29 22:29:37	tibbe	now lets see if Map has an efficient Foldable instance :)
2013-03-29 22:29:37	elliott	bonus, it might even use the tree structure efficiently, depending on how good Map's instance is
2013-03-29 22:29:43	shachaf	foldMap will give you a balanced rather than a right-biased tree.
2013-03-29 22:29:44	elliott	it should be at least as efficient as the foldr though.
2013-03-29 22:29:52	shachaf	This may be a bonus or an un-bonus.
2013-03-29 22:29:59	tibbe	I should know as I probably wrote it but I forgot
2013-03-29 22:30:00	elliott	(well, assuming you have a good Monoid.)
2013-03-29 22:30:05	elliott	tibbe: hehe
2013-03-29 22:30:08	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 245 seconds)
2013-03-29 22:30:18	elliott	it's annoying how some monoids get worse by giving them tree structure :(
2013-03-29 22:30:22	elliott	lens has that problem a lot.
2013-03-29 22:30:30	-->	mm0 (~Matt@cpe-108-182-29-196.nyc.res.rr.com) has joined #haskell
2013-03-29 22:30:30	shachaf	Data.Map's Traversable instance is fine.
2013-03-29 22:30:45	<--	mm0 (~Matt@cpe-108-182-29-196.nyc.res.rr.com) has left #haskell
2013-03-29 22:30:45	shachaf	That can't be said for all the instances in containers. :-(
2013-03-29 22:30:48	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-29 22:31:00	tibbe	hmm, I think the Foldable Map instance associates wrong
2013-03-29 22:31:07	<--	icarot (~icarot@2600:1010:b102:2080:0:14:497a:6901) has quit (Ping timeout: 264 seconds)
2013-03-29 22:31:09	tibbe	foldMap f (Bin _ _ v l r) = Foldable.foldMap f l `mappend` f v `mappend` Foldable.foldMap f r
2013-03-29 22:31:18	shachaf	That looks OK to me?
2013-03-29 22:31:18	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-29 22:31:20	tibbe	I think that should be: foldMap f (Bin _ _ v l r) = Foldable.foldMap f l `mappend` (f v `mappend` Foldable.foldMap f r)
2013-03-29 22:31:24	-->	demolithion (~nonehaxor@p4FCCC3D6.dip.t-dialin.net) has joined #haskell
2013-03-29 22:31:25	shachaf	What would you want it to be like?
2013-03-29 22:31:26	shachaf	Oh.
2013-03-29 22:31:29	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-29 22:31:34	tibbe	like <> associates
2013-03-29 22:31:37	shachaf	I'm not sure that matters that much.
2013-03-29 22:31:52	tibbe	for continuation mono ids like the byte string builder it does
2013-03-29 22:31:56	-->	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has joined #haskell
2013-03-29 22:32:03	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-03-29 22:32:06	tibbe	I hate colloquy autocomplete
2013-03-29 22:32:18	<--	jcp (~quassel@bzflag/contributor/javawizard2539) has quit (Remote host closed the connection)
2013-03-29 22:32:18	shachaf	monochromoids
2013-03-29 22:32:40	shachaf	It depends on how you're using the tree.
2013-03-29 22:32:44	<--	dolio (~dolio@gw1.mcgraw-hill.com) has quit (Ping timeout: 255 seconds)
2013-03-29 22:32:50	shachaf	If you're using it right-to-left you want the opposite instance. :-)
2013-03-29 22:32:52	shachaf	But sure.
2013-03-29 22:33:42	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-29 22:33:42	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Quit: Leaving)
2013-03-29 22:33:52	<--	Nahra (~user@unaffiliated/nahra) has quit (Ping timeout: 246 seconds)
2013-03-29 22:34:29	tibbe	hmm, maybe it doesn't matter for trees
2013-03-29 22:34:30	shachaf	The nice thing about a balanced tree is that it doesn't matter that much.
2013-03-29 22:34:34	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-29 22:34:34	tibbe	too many continuations!
2013-03-29 22:34:38	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 22:34:55	tibbe	so the trees are ordered and the folds go left to right
2013-03-29 22:35:16	shachaf	Anyway you can recover the foldr behavior with Endo if you want it.
2013-03-29 22:36:03	<--	DanZimm (~Dan@c-71-228-47-179.hsd1.in.comcast.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-29 22:36:23	shachaf	I think Map.foldr (mappend . putPostingList) mempty isn't so unreadable.
2013-03-29 22:36:43	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 22:37:16	Radish	I installed a cabal for portaudio earlier today, how come import Sound.PortAudio says it can't find anything?  Does anyone know?
2013-03-29 22:37:42	tibbe	shachaf: I agree
2013-03-29 22:37:50	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-29 22:37:57	tibbe	shachaf: although it requires the reader to think about which monoid goes on which side
2013-03-29 22:37:58	-->	mangoman (~elliott@pool-71-245-113-133.cmdnnj.fios.verizon.net) has joined #haskell
2013-03-29 22:38:03	tibbe	which monoid value
2013-03-29 22:38:09	Radish	Oh wait, its just saying everything "is not in scope"
2013-03-29 22:38:18	Radish	bad example file I guess?
2013-03-29 22:38:36	Radish	I'll try to write one myself I guess...
2013-03-29 22:38:38	Radish	thanks
2013-03-29 22:38:58	-->	jcp (~quassel@192.81.212.241) has joined #haskell
2013-03-29 22:38:58	<--	jcp (~quassel@192.81.212.241) has quit (Changing host)
2013-03-29 22:38:58	-->	jcp (~quassel@bzflag/contributor/javawizard2539) has joined #haskell
2013-03-29 22:39:03	-->	faen (frantk@fran.tk) has joined #haskell
2013-03-29 22:39:07	Eduard_Munteanu	chrisdone: it says "haskell" on the door, but there's more "blah" than Haskell. ;P
2013-03-29 22:39:44	tibbe	decisions decisions, should I rely in the foldMap instance for Map traversing in order :/
2013-03-29 22:39:53	mietek	Has anyone seen a problem with Gloss on OS X where the animation doesn't work in example apps?
2013-03-29 22:39:56	shachaf	tibbe: "in order"?
2013-03-29 22:40:06	tibbe	shachaf: key1 <> key2 <> key3
2013-03-29 22:40:07	<--	demolithion (~nonehaxor@p4FCCC3D6.dip.t-dialin.net) has quit (Quit: WeeChat 0.4.0)
2013-03-29 22:40:18	shachaf	Oh, I would certainly hope so.
2013-03-29 22:40:23	shachaf	At least I've been assuming that.
2013-03-29 22:40:40	tibbe	shachaf: I should check and document the current behavior
2013-03-29 22:40:42	shachaf	The shape of the tree is less safe to assume but I've been assuming it too.
2013-03-29 22:40:58	mietek	It seems like the animation gets stuck after ~5 frames.  The weird thing is, it was just working a while ago.
2013-03-29 22:41:13	shachaf	(Assuming that it's balanced, that is. I wouldn't mind the <> being infixr rather than infixl thing.)
2013-03-29 22:41:14	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 22:41:23	<--	emilie (~emilie@c-65-96-244-250.hsd1.nh.comcast.net) has quit (Ping timeout: 245 seconds)
2013-03-29 22:41:47	elliott	tibbe: foldMap is allowed to assume a monoid, not a commutative monoid :)
2013-03-29 22:41:58	elliott	if the order is inconsistent with foldr, I'm pretty sure that's a buggy instance
2013-03-29 22:41:59	mietek	And by a while ago, I mean minutes ago, right after installing gloss-examples with cabal.
2013-03-29 22:42:02	tibbe	elliott: right
2013-03-29 22:42:04	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Client Quit)
2013-03-29 22:42:27	tibbe	elliott: one can reasonable assume that foldMap will traverse like just fold
2013-03-29 22:42:36	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-29 22:42:43	tibbe	elliott: is there any laws on the Traversable instances that guarantees that?
2013-03-29 22:42:46	croikle	if you depend on the order, maybe traversable is better
2013-03-29 22:42:54	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Quit: KVIrc 4.3.1 Aria http://www.kvirc.net/)
2013-03-29 22:43:05	tibbe	croikle: I have no interesting effects though
2013-03-29 22:43:11	shachaf	That guarantee what?
2013-03-29 22:43:15	tibbe	so an Applicative sounds a bit much
2013-03-29 22:43:27	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-29 22:43:28	shachaf	The Traversable instance should match the Foldable instance, at least.
2013-03-29 22:43:34	-->	reckler (~reckler@ppp121-45-111-141.lns20.adl6.internode.on.net) has joined #haskell
2013-03-29 22:43:35	tibbe	shachaf: is there a guarantee in Foldable that foldMap traverses elements in the same order as foldr
2013-03-29 22:43:41	shachaf	But they can both choose any order they like.
2013-03-29 22:43:42	shachaf	Ah.
2013-03-29 22:43:43	<--	DrChaos (~DrChaos@cpe-24-28-153-25.satx.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-03-29 22:43:44	shachaf	Yes.
2013-03-29 22:43:50	shachaf	At least I think so?
2013-03-29 22:44:03	shachaf	There aren't really any Foldable laws, but the default definition of foldr in terms of Foldable (and vice versa) gives you that.
2013-03-29 22:44:11	shachaf	Er, in terms of foldMap.
2013-03-29 22:44:32	tibbe	I see no laws in the docs :(
2013-03-29 22:44:34	-->	strg (~strg@a89-183-19-204.net-htp.de) has joined #haskell
2013-03-29 22:44:39	shachaf	There are no Laws.
2013-03-29 22:44:41	shachaf	Foldable is awful.
2013-03-29 22:44:50	tibbe	the docs should mention the default implementation at least
2013-03-29 22:45:07	elliott	well, Foldable/Traversable are meant to define an ordering
2013-03-29 22:45:17	elliott	so it makes sense that you have to use the same one for all the different expressions of it
2013-03-29 22:45:21	<--	croikle (~peterm@ip-134-53-244-195.dhcp.muohio.edu) has quit (Quit: croikle)
2013-03-29 22:45:21	<--	chrisdone (~chrisdone@unaffiliated/chrisdone) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-29 22:45:25	shachaf	==elliott
2013-03-29 22:45:28	shachaf	It's not really specified.
2013-03-29 22:45:46	<--	pib1904 (~pib1904@your.friendly.media.team.coder.ark-cr.info) has quit (Remote host closed the connection)
2013-03-29 22:46:04	shachaf	As far as I'm concerned a Foldable instance (or a Traversable instance) defines a canonical ordering for the elements of a data structure.
2013-03-29 22:46:10	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-29 22:46:15	ChongLi	didn't guy steele rail against the notion of ordering in folds/maps?
2013-03-29 22:46:49	ChongLi	that the idea is too specific
2013-03-29 22:46:57	sproingie	it would seem inherent to fold
2013-03-29 22:47:08	ChongLi	and thus inhibits parallelism
2013-03-29 22:47:20	sproingie	fold to me is more specific than an arbitrary reduce
2013-03-29 22:47:31	ChongLi	it isn't inherent if you're working with monoids
2013-03-29 22:47:31	sproingie	maybe that's just my reading of it
2013-03-29 22:47:58	sproingie	mplus isn't commutative, so i still see it as inherent
2013-03-29 22:48:16	shachaf	tibbe: I wouldn't object to these sorts of pseudo-laws being added to the documentation.
2013-03-29 22:48:18	Saizan	*mappend
2013-03-29 22:48:33	sproingie	right i'm always mixing them up
2013-03-29 22:48:33	shachaf	Foldable is still pretty awful, though. :-)
2013-03-29 22:48:35	tibbe	shachaf: me neither, docs are good
2013-03-29 22:48:35	Saizan	ChongLi: the ordering doesn't necessarily translate in evaluation order
2013-03-29 22:48:45	Saizan	*into
2013-03-29 22:48:48	ChongLi	it doesn't have to be commutative to be parallelizable
2013-03-29 22:48:49	cmccann	ChongLi: he complained about lack of associativity, not lack of commutativity
2013-03-29 22:49:03	cmccann	so yes
2013-03-29 22:49:06	ChongLi	cmccann: yeah, it wasn't me who brought that up :)
2013-03-29 22:49:07	tibbe	there's also the added confusion that the l and r in fold{l,r} are not about the traversal order
2013-03-29 22:49:21	cmccann	yeah, just confirming
2013-03-29 22:49:22	sproingie	evaluation doesn't have to be in order, but the result should appear to be in order
2013-03-29 22:49:26	tibbe	but about the associativity of the operator
2013-03-29 22:49:29	Saizan	ChongLi: if you only have associativity the order still matters
2013-03-29 22:49:33	otters	okay so executeFile does what I expect
2013-03-29 22:49:50	ChongLi	Saizan: only in the final reduction
2013-03-29 22:49:54	tibbe	it just happens so that fold' is more efficient than foldr' for lists
2013-03-29 22:49:54	cmccann	Saizan: not the order of evaluation
2013-03-29 22:49:57	cmccann	that's the point
2013-03-29 22:49:57	tibbe	foldl'*
2013-03-29 22:49:59	otters	but the connections that the "old" bot had don't close automatically
2013-03-29 22:50:03	otters	it times out after a bit
2013-03-29 22:50:04	Saizan	cmccann: yes, exactly
2013-03-29 22:50:11	sproingie	any general purpose way of evaluating out of order is back to the magical auto-parallelizing Sufficiently Smart Compiler
2013-03-29 22:50:11	<--	silver (~silver@178.120.62.213) has quit (Read error: Connection reset by peer)
2013-03-29 22:50:18	cmccann	the word "order" is being confusingly overloaded here
2013-03-29 22:50:27	otters	so what I should do is disconnect first, THEN call executeFile
2013-03-29 22:50:40	-->	agr (~andre@189.38.144.97) has joined #haskell
2013-03-29 22:51:06	Saizan	ChongLi: we're not talking about evaluation order, but the order the elements appear in the denotation of the result
2013-03-29 22:51:19	ChongLi	Saizan: ah, I was talking about evaluation order
2013-03-29 22:51:34	geekosaur	otters: if you have lost connectivity, doesn't much matter what you do on the client end, server won't see a clean disconnect
2013-03-29 22:51:38	 *	cmccann starts talking about first-order vs. higher-order
2013-03-29 22:51:48	cmccann	just to confuse things further of course
2013-03-29 22:52:03	 *	sproingie calls in a pizza order
2013-03-29 22:52:06	ChongLi	haha
2013-03-29 22:52:06	Saizan	22:48     Saizan : ChongLi: the ordering doesn't necessarily translate into evaluation order <- i was trying to address this confusion from the start
2013-03-29 22:52:22	glguy	otters, you don't *have* to close the connection, you can had the socket file descriptor over to the new bot
2013-03-29 22:52:23	plhk	how do i tell cabal I need .txt file for building?
2013-03-29 22:52:36	plhk	(i use it in TH)
2013-03-29 22:52:45	<--	andyjgill (~andyjgill@dhcp248.ittc.ku.edu) has quit (Quit: andyjgill)
2013-03-29 22:53:02	<--	agr (~andre@189.38.144.97) has left #haskell
2013-03-29 22:53:06	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 22:53:38	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-03-29 22:54:08	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-03-29 22:54:28	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-29 22:54:51	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Quit: WeeChat 0.4.0)
2013-03-29 22:55:08	Radish	ghci can't find my .dll, should i put a copy in the folder the file i'm executing is in?
2013-03-29 22:55:12	ChongLi	wayland/weston forked!
2013-03-29 22:55:24	Radish	or do i need to point it in the direction of the .dll somehow?
2013-03-29 22:55:36	ocharles	ChongLi: ?
2013-03-29 22:55:48	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 22:55:50	ChongLi	wayland is a display server protocol
2013-03-29 22:55:54	ocharles	i know
2013-03-29 22:55:58	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-29 22:55:58	ocharles	what's the forking about?
2013-03-29 22:56:03	ChongLi	northfield/norwood
2013-03-29 22:56:10	ChongLi	http://www.phoronix.com/scan.php?page=news_item&px=MTMzNTY
2013-03-29 22:56:22	ocharles	the ubuntu fork?
2013-03-29 22:56:31	ChongLi	no this is separate
2013-03-29 22:56:35	ocharles	interesting
2013-03-29 22:56:36	 *	ocharles reads
2013-03-29 22:56:37	ChongLi	ubuntu has their own thing called mir
2013-03-29 22:56:53	simpson	Meh.
2013-03-29 22:57:19	ChongLi	meh?
2013-03-29 22:57:20	elliott	this isn't really about haskell :P
2013-03-29 22:57:33	ChongLi	I'm hoping it will be eventually
2013-03-29 22:57:42	ChongLi	a successor to Xmonad
2013-03-29 22:57:50	ChongLi	on the successor to X (whichever one wins)
2013-03-29 22:58:23	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Ping timeout: 255 seconds)
2013-03-29 22:59:14	simpson	Uh, spoilers: X11 will win.
2013-03-29 22:59:23	shachaf	As elliott mentioned, this isn't really on-topic here.
2013-03-29 22:59:25	ChongLi	that's impossible!
2013-03-29 22:59:35	-->	jonaias (~jonaias@189.111.80.20) has joined #haskell
2013-03-29 22:59:44	simpson	IYSS. >:3
2013-03-29 23:00:31	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 264 seconds)
2013-03-29 23:01:17	<--	dnolen (aa95640a@gateway/web/freenode/ip.170.149.100.10) has quit (Ping timeout: 245 seconds)
2013-03-29 23:01:34	-->	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-03-29 23:02:41	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-03-29 23:04:20	<--	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (Quit: This computer has gone to sleep)
2013-03-29 23:04:22	-->	trescenzi (~trescenzi@2620:91:0:163:9d84:34a2:9821:996b) has joined #haskell
2013-03-29 23:06:33	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-03-29 23:06:53	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-29 23:07:33	<--	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (Ping timeout: 240 seconds)
2013-03-29 23:07:57	<--	wi (~wi@541BB0B7.cm-5-4c.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-03-29 23:08:36	<--	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has quit (Remote host closed the connection)
2013-03-29 23:09:09	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Ping timeout: 245 seconds)
2013-03-29 23:10:07	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-03-29 23:10:40	<--	strg (~strg@a89-183-19-204.net-htp.de) has quit (Quit: Linkinus - http://linkinus.com)
2013-03-29 23:11:11	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-29 23:11:19	<--	izym (~izym@1706ds1-aroe.0.fullrate.dk) has quit (Read error: Connection reset by peer)
2013-03-29 23:12:33	<--	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-29 23:14:13	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 240 seconds)
2013-03-29 23:14:29	-->	argiopeweb (~elliot@155.31.73.125) has joined #haskell
2013-03-29 23:15:27	<--	gadjo (~gggg@109.102.72.188) has quit (Quit: Leaving)
2013-03-29 23:16:13	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-29 23:16:33	-->	jcp|u (~alex@192.81.212.241) has joined #haskell
2013-03-29 23:16:48	<--	heruur (~tvh@dslb-188-103-201-034.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-29 23:17:48	<--	trescenzi (~trescenzi@2620:91:0:163:9d84:34a2:9821:996b) has quit (Remote host closed the connection)
2013-03-29 23:20:05	<--	astropirate (~astropira@unaffiliated/astropirate) has quit (Ping timeout: 246 seconds)
2013-03-29 23:20:55	<--	mahogny (~mahogny@m30742.olf.sgsnet.se) has quit (Ping timeout: 264 seconds)
2013-03-29 23:20:57	<--	Dodek (~asdqwe@scheme.qwpx.net) has quit (Quit: leaving)
2013-03-29 23:21:01	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-29 23:21:33	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-29 23:21:44	-->	Dodek (am291698@duch.mimuw.edu.pl) has joined #haskell
2013-03-29 23:21:52	monochrom	I was wrong again. fix without recursion, but needs undefined and STRef:
2013-03-29 23:21:56	hpaste	monochrom annotated “lazy ST example” with “lazy ST implements fix” at http://hpaste.org/63925#a84840
2013-03-29 23:22:07	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-29 23:22:12	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Quit: Leaving)
2013-03-29 23:22:17	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-03-29 23:22:38	-->	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-03-29 23:22:42	monochrom	w00t dolio, you will love this: http://hpaste.org/63925#a84840
2013-03-29 23:23:58	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-29 23:24:08	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: Connection reset by peer)
2013-03-29 23:24:21	<--	hiredman (~hiredman@67-135-45-49.dia.static.qwest.net) has quit (Remote host closed the connection)
2013-03-29 23:24:41	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-03-29 23:25:36	-->	bradleya_ (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-29 23:25:37	djahandarie	Hah
2013-03-29 23:26:13	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-29 23:26:48	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Ping timeout: 245 seconds)
2013-03-29 23:27:44	-->	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has joined #haskell
2013-03-29 23:28:18	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-29 23:29:11	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-03-29 23:29:24	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-03-29 23:29:35	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-03-29 23:30:24	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-03-29 23:30:32	<--	mmm__ (~bark@2001:470:8a52:67:f0d8:bb81:cb85:386c) has quit (Quit: Leaving)
2013-03-29 23:31:03	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-29 23:31:12	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Remote host closed the connection)
2013-03-29 23:32:17	monochrom	to understand recursion, first you must understand lazy ST! :)
2013-03-29 23:32:58	-->	mahogny (~mahogny@m30742.olf.sgsnet.se) has joined #haskell
2013-03-29 23:33:25	<--	mknox (~mknox@8.25.197.25) has quit (Quit: Leaving)
2013-03-29 23:33:33	-->	astropirate (~astropira@184.75.215.98) has joined #haskell
2013-03-29 23:33:33	<--	astropirate (~astropira@184.75.215.98) has quit (Changing host)
2013-03-29 23:33:33	-->	astropirate (~astropira@unaffiliated/astropirate) has joined #haskell
2013-03-29 23:34:12	-->	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has joined #haskell
2013-03-29 23:34:12	<--	Kayexter (6d96476f@gateway/web/freenode/ip.109.150.71.111) has quit (Ping timeout: 245 seconds)
2013-03-29 23:34:26	Saizan	that's even pretty close to what's happening on the heap with the let x = f x in x implementation of fix
2013-03-29 23:35:30	<--	amatsu (~amatsu@125.63.54.161) has quit (Ping timeout: 272 seconds)
2013-03-29 23:36:23	<--	mangoman (~elliott@pool-71-245-113-133.cmdnnj.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-03-29 23:36:26	monochrom	yes, that's exactly how I designed it
2013-03-29 23:36:47	elliott	monochrom: you probably don't need undefined there
2013-03-29 23:36:49	monochrom	it's really "c := f (read c)" in essence.
2013-03-29 23:37:05	elliott	in particular, (return undefined) should work just as well, but I suspect you can do even better...
2013-03-29 23:37:12	-->	amatsu\idle (~amatsu@125.63.54.161) has joined #haskell
2013-03-29 23:37:18	Kyo	@src fix
2013-03-29 23:37:19	lambdabot	fix f = let x = f x in x
2013-03-29 23:37:32	--	amatsu\idle is now known as amatsu
2013-03-29 23:38:04	<--	phischu (~pschuster@p4FD31972.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2013-03-29 23:38:23	Kyo	> fix 5
2013-03-29 23:38:25	lambdabot	  5
2013-03-29 23:38:37	Kyo	> fix (+1)
2013-03-29 23:38:41	lambdabot	  mueval-core: Time limit exceeded
2013-03-29 23:38:52	monochrom	"fix 5" is along the line of "fix (const 'x')", mind you
2013-03-29 23:39:06	-->	`cc` (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has joined #haskell
2013-03-29 23:39:20	monochrom	because lambdabot has a Num instance for functions that translates "5" to "const 5"
2013-03-29 23:39:25	monochrom	example:
2013-03-29 23:39:25	elliott	monochrom: huh, can you implement a memoising fix with ST like that?
2013-03-29 23:39:28	monochrom	> 5 'x'
2013-03-29 23:39:29	lambdabot	  5
2013-03-29 23:39:50	elliott	btw, how did that instance get back in?
2013-03-29 23:39:50	Kyo	fix-> anon recursion? how? show me with fib or fac
2013-03-29 23:39:59	elliott	I thought Cale removed it ages ago.
2013-03-29 23:40:07	elliott	Kyo: fix (\f x -> ...recurse with f, parameter is x...)
2013-03-29 23:40:12	monochrom	Kyo, see my http://www.vex.net/~trebla/haskell/fix.xhtml
2013-03-29 23:40:23	 *	`cc` learning some linq, only way to make c# not ugly
2013-03-29 23:40:49	arkeet	> let fac n = if n == 0 then 1 else n * fac (n-1)   in   fac 5
2013-03-29 23:40:50	lambdabot	  120
2013-03-29 23:40:58	arkeet	> fix (\fac n -> if n == 0 then 1 else n * fac (n-1)) 5
2013-03-29 23:41:00	lambdabot	  120
2013-03-29 23:42:43	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-29 23:42:46	<--	Jeanne-Kamikaze (~Jeanne-Ka@141.230.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-03-29 23:43:21	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-29 23:44:11	<--	stephenjudkins (~textual@c-98-246-155-212.hsd1.or.comcast.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-29 23:44:44	-->	stephenjudkins (~textual@c-98-246-155-212.hsd1.or.comcast.net) has joined #haskell
2013-03-29 23:45:19	<--	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-03-29 23:45:28	`cc`	congrats fix is somewhat twisted to understand
2013-03-29 23:45:56	-->	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has joined #haskell
2013-03-29 23:46:22	`cc`	hmm here it's just a while
2013-03-29 23:46:33	-->	hiredman (~hiredman@67-135-45-49.dia.static.qwest.net) has joined #haskell
2013-03-29 23:47:00	<--	amindfv (~textual@pool-173-69-2-167.prvdri.fios.verizon.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-29 23:47:12	<--	sleepynate (~sleepynat@c-67-167-132-241.hsd1.mi.comcast.net) has quit (Remote host closed the connection)
2013-03-29 23:47:23	-->	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has joined #haskell
2013-03-29 23:48:53	-->	megajosh2 (~megajosh2@96.231.202.10) has joined #haskell
2013-03-29 23:48:53	<--	megajosh2 (~megajosh2@96.231.202.10) has quit (Changing host)
2013-03-29 23:48:53	-->	megajosh2 (~megajosh2@unaffiliated/megajosh2) has joined #haskell
2013-03-29 23:49:55	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-03-29 23:50:20	<--	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has quit (Ping timeout: 258 seconds)
2013-03-29 23:50:34	<--	megajosh2 (~megajosh2@unaffiliated/megajosh2) has quit (Client Quit)
2013-03-29 23:50:48	<--	bradleya_ (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-03-29 23:51:44	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-03-29 23:51:46	lispy	@let unsafeCoerce = fix . (fix id) :: a -> c
2013-03-29 23:51:48	lambdabot	 Defined.
2013-03-29 23:51:56	-->	xenon1 (~xenon@171.7.67.35) has joined #haskell
2013-03-29 23:52:00	lispy	> unsafeCoerce 1 :: String
2013-03-29 23:52:03	lambdabot	  mueval-core: Time limit exceeded
2013-03-29 23:52:37	-->	pib1902 (~pib1902@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-29 23:52:38	<--	pib1902 (~pib1902@your.friendly.media.team.coder.ark-cr.info) has quit (Max SendQ exceeded)
2013-03-29 23:52:52	-->	pib1981 (~pib1981@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-29 23:52:53	<--	pib1981 (~pib1981@your.friendly.media.team.coder.ark-cr.info) has quit (Max SendQ exceeded)
2013-03-29 23:52:57	<--	napping (~brandon@qchost236-242.cs.illinois.edu) has quit (Ping timeout: 276 seconds)
2013-03-29 23:53:11	jmcarthur	huh, i thought cale removed that instance, too
2013-03-29 23:53:22	-->	megajosh2 (~megajosh2@unaffiliated/megajosh2) has joined #haskell
2013-03-29 23:53:23	--	megajosh2 is now known as deviant-garde
2013-03-29 23:53:29	<--	Philonous (~Philonous@dslb-178-000-013-255.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-03-29 23:53:36	<--	saep (~saep@p5B2A1B19.dip.t-dialin.net) has quit (Ping timeout: 264 seconds)
2013-03-29 23:53:38	<--	deviant-garde (~megajosh2@unaffiliated/megajosh2) has quit (Client Quit)
2013-03-29 23:54:03	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-29 23:54:11	elliott	maybe it's an accident?
2013-03-29 23:54:49	-->	pib1902 (~pib1902@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-29 23:55:05	Kyo	> fix ( (0 :) . scanl (+) 1 )
2013-03-29 23:55:08	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-03-29 23:55:18	 *	hackagebot hackage-db 1.5 - provide access to the Hackage database via Data.Map  http://hackage.haskell.org/package/hackage-db-1.5 (PeterSimons)
2013-03-29 23:55:34	<--	stat_vi (~stat@dslb-094-218-237-228.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-03-29 23:56:07	jmcarthur	> fix ( (0 :) . scanl (+) 1 ) !! 100
2013-03-29 23:56:08	lambdabot	  354224848179261915075
2013-03-29 23:56:30	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-29 23:56:30	Kyo	> fix (\f n -> if n == 1 then 1 else n * (f (n-1)) )
2013-03-29 23:56:32	lambdabot	  *Exception: show: No overloading for function
2013-03-29 23:56:46	elliott	how did _that_ instance get in?
2013-03-29 23:56:57	Kyo	> fix (\f n -> if n == 1 then 1 else n * (f (n-1)) 5)
2013-03-29 23:56:59	lambdabot	  Occurs check: cannot construct the infinite type: t0 = a0 -> t0
2013-03-29 23:57:05	<--	dkasak (~dkasak@dh207-56-101.xnet.hr) has quit (Ping timeout: 245 seconds)
2013-03-29 23:57:05	jmcarthur	it's been popping up for me in ghci. not sure what library it is
2013-03-29 23:57:07	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Quit: Computer has gone to sleep.)
2013-03-29 23:57:28	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-03-29 23:57:31	Kyo	> fix (\f n -> if n == 1 then 1 else n * (f (n-1))) 5
2013-03-29 23:57:32	lambdabot	  120
2013-03-29 23:57:46	-->	megajosh2 (~megajosh2@unaffiliated/megajosh2) has joined #haskell
2013-03-29 23:57:48	Kyo	@type fix
2013-03-29 23:57:50	lambdabot	(a -> a) -> a
2013-03-29 23:58:18	-->	saep (~saep@p4FC3F5E0.dip.t-dialin.net) has joined #haskell
2013-03-29 23:58:52	jmcarthur	> (fix `asTypeOf` ?foo) (\f n -> if n == 1 then 1 else n * (f (n-1))) 5
2013-03-29 23:58:53	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-03-29 23:58:53	lambdabot	  mueval-core: internal error: PAP object entered!
2013-03-29 23:58:54	lambdabot	     (GHC version 7.4.2 fo...
2013-03-29 23:58:56	Kyo	so what is to be said about recursion and fixpoints? the function that i wasnt to implement recursively doesnt need fixpoint, or does it?
2013-03-29 23:59:27	Kyo	a function without a fixpoint cant be defined recursively?
2013-03-29 23:59:28	tibbe	@pl flip foldr
2013-03-29 23:59:28	lambdabot	flip foldr
2013-03-29 23:59:43	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-29 23:59:43	tibbe	:t flip foldr
2013-03-29 23:59:45	lambdabot	b -> (a -> b -> b) -> [a] -> b
2013-03-29 23:59:57	monochrom	I don't understand the question, but you can do whatever you like
2013-03-29 23:59:59	jmcarthur	Kyo: i don't understand your question
2013-03-30 00:00:10	tibbe	today I really needed a foldr with the higher order argument last a couple of time
2013-03-30 00:00:34	--	pdxleif is now known as pdxleif_away
2013-03-30 00:00:43	donri	tibbe: that looks more like the maybe/either/"bool" functions
2013-03-30 00:01:03	Kyo	if i want to define a math function f in haskell recursively, does it need to have a fixpoint?
2013-03-30 00:01:04	tibbe	donri: I needed b -> [a] -> (a -> b -> b)
2013-03-30 00:01:10	donri	aha :)
2013-03-30 00:01:17	tibbe	donri: so I can use foldr z xs $ \ x -> <newline>
2013-03-30 00:01:17	jmcarthur	Kyo: why would it?
2013-03-30 00:01:18	-->	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-03-30 00:01:21	tibbe	since the body was large
2013-03-30 00:01:21	donri	yeah
2013-03-30 00:01:21	shachaf	tibbe: Why?
2013-03-30 00:01:27	tibbe	shachaf: big lambda
2013-03-30 00:01:35	tibbe	same reason there's both forM and mapM
2013-03-30 00:01:37	shachaf	Ah.
2013-03-30 00:01:57	donri	maldr and foldr then!
2013-03-30 00:01:57	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-30 00:02:02	shachaf	I,I Λ
2013-03-30 00:02:03	otters	is there a better way besides busy waiting to determine if a TChan is empt?
2013-03-30 00:02:07	otters	empty
2013-03-30 00:02:09	monochrom	yes, it needs to have a fixpoint, every recursion needs a fixpoint
2013-03-30 00:02:15	-->	timtom (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has joined #haskell
2013-03-30 00:02:20	jmcarthur	Kyo: (+100) doesn't have a fixpoint, put at least for peano numerals it can still be defined recursively
2013-03-30 00:02:42	donri	otters: what's wrong with busy waiting!
2013-03-30 00:02:53	<--	megajosh2 (~megajosh2@unaffiliated/megajosh2) has quit (Quit: Changing server)
2013-03-30 00:02:54	<--	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has quit (Ping timeout: 240 seconds)
2013-03-30 00:02:55	shachaf	jmcarthur: ?
2013-03-30 00:02:58	otters	donri: I don't have time for it
2013-03-30 00:03:05	jmcarthur	> fix (+100)
2013-03-30 00:03:06	donri	otters: runtime is smart about retries in stm
2013-03-30 00:03:08	Michael__	If I have a currently deterministic system, which simulates the interaction of "agents" according to certain rules, but I want to introduce a non deterministic agents, a random one, what's the best way to do that? To provide a seed I would have to pass that down throughout the functions which are respnsible for simulating the agents, and make every other agent accept a seed. Is there a better way?
2013-03-30 00:03:09	lambdabot	  mueval-core: Time limit exceeded
2013-03-30 00:03:12	otters	donri: ok
2013-03-30 00:03:17	jmcarthur	no fixpoint
2013-03-30 00:03:18	shachaf	jmcarthur: Oh, I thought you meant with lazy naturals.
2013-03-30 00:03:19	otters	cool, I'll do that then
2013-03-30 00:03:27	donri	otters: so just peekTChan
2013-03-30 00:03:31	shachaf	Besides, ⊥ is a fixed point.
2013-03-30 00:03:39	<--	end3rW (~end3rW@lak-116-192.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-30 00:03:52	<--	path[l] (~vsi@173.252.71.6) has quit (Quit: path[l])
2013-03-30 00:03:57	jmcarthur	ah
2013-03-30 00:04:04	otters	I'd use forever (atomically ...), not the reverse, right
2013-03-30 00:04:07	cschneid	I have two Ints, and want to get a Double with the result of the division
2013-03-30 00:04:11	cschneid	so Int -> Int -> Double
2013-03-30 00:04:37	cschneid	what func does this, OR, how do I convert Int -> Double?
2013-03-30 00:04:39	`cc`	can Linq be seen as a fnctional-like feature?
2013-03-30 00:04:40	monochrom	fromIntegral x / fromIntegral y
2013-03-30 00:04:42	jmcarthur	i was in the "ignore bottom" mode of thought
2013-03-30 00:04:53	monochrom	@quote monochrom fromIntegral
2013-03-30 00:04:53	lambdabot	monochrom says: You've got an Int / But you want Double / Who do you call? / "fromIntegral!"
2013-03-30 00:04:54	donri	otters: you'd use atomically $ ... retry (or peekTChan which retries for you)
2013-03-30 00:04:56	jmcarthur	s/ignore bottom/bottom does not exist/
2013-03-30 00:05:00	otters	wait, I don't need forever
2013-03-30 00:05:03	donri	otters: not sure forever enters into it
2013-03-30 00:05:13	otters	well, I need the reverse of peekTChan
2013-03-30 00:05:21	otters	oh, no I don't
2013-03-30 00:05:23	otters	never mind
2013-03-30 00:05:31	otters	oh, yes I do
2013-03-30 00:05:44	otters	I need to retry if the channel isn't empty, so I guess tryPeekTChan
2013-03-30 00:06:03	cschneid	monochrom: thanks, and back again? Ideally with a rounding? (I think ceil just works)
2013-03-30 00:06:18	<--	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-30 00:06:23	monochrom	there are round, ceil, floor, truncate. pick one.
2013-03-30 00:07:09	donri	otters: isEmptyTChan >>= flip when retry, or something like that
2013-03-30 00:07:20	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Quit: Disappears in a puff of smoke)
2013-03-30 00:07:32	donri	or throw in a "not"
2013-03-30 00:07:51	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-03-30 00:08:36	<--	ski (~ski@c80-216-142-165.bredband.comhem.se) has quit (Ping timeout: 264 seconds)
2013-03-30 00:09:05	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-03-30 00:09:59	donri	otters: i have a feeling if you're waiting for the channel to be empty you're doing something "wrong", as in, there's a better way to do what you actually want
2013-03-30 00:10:16	donri	but i lack experience with stm
2013-03-30 00:10:35	-->	bos_ (~bos@173.252.71.4) has joined #haskell
2013-03-30 00:10:50	<--	qm_ (~Volta@cpe-70-124-195-111.rgv.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-03-30 00:11:03	-->	dkasak (~dkasak@dh207-56-33.xnet.hr) has joined #haskell
2013-03-30 00:12:00	-->	path[l] (~vsi@64.125.189.90) has joined #haskell
2013-03-30 00:12:06	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-03-30 00:12:12	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-03-30 00:12:19	<--	path[l] (~vsi@64.125.189.90) has quit (Client Quit)
2013-03-30 00:13:11	<--	tommd (~tommd@pdx.galois.com) has quit (Remote host closed the connection)
2013-03-30 00:13:30	<--	bos (~bos@173.252.71.1) has quit (Ping timeout: 252 seconds)
2013-03-30 00:13:50	<--	`cc` (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has quit (Quit: Quitte)
2013-03-30 00:14:29	Kyo	> fix (\f n -> if n == 1 then 1 else n * (f (n-1))) 5
2013-03-30 00:14:30	lambdabot	  120
2013-03-30 00:14:51	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-03-30 00:14:55	<--	bos_ (~bos@173.252.71.4) has quit (Ping timeout: 260 seconds)
2013-03-30 00:14:56	Kyo	@src atomically
2013-03-30 00:14:57	lambdabot	Source not found. My brain just exploded
2013-03-30 00:15:08	Kyo	@type atomically
2013-03-30 00:15:09	lambdabot	Not in scope: `atomically'
2013-03-30 00:15:12	-->	ben_d (~muus@c-71-237-161-120.hsd1.or.comcast.net) has joined #haskell
2013-03-30 00:15:26	Kyo	@src fix
2013-03-30 00:15:26	lambdabot	fix f = let x = f x in x
2013-03-30 00:15:50	shachaf	Kyo: You can /msg lambdabot for these sorts of things, by the way.
2013-03-30 00:16:35	--	pdxleif_away is now known as pdxleif
2013-03-30 00:16:43	<--	nh2 (~nh2@149.241.12.113) has quit (Ping timeout: 264 seconds)
2013-03-30 00:16:59	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-03-30 00:17:00	-->	bos (~bos@64.125.189.90) has joined #haskell
2013-03-30 00:18:11	-->	trescenzi (~trescenzi@2620:91:0:163:c957:c863:5d02:b090) has joined #haskell
2013-03-30 00:18:46	-->	qm__ (~Volta@cpe-70-124-195-111.rgv.res.rr.com) has joined #haskell
2013-03-30 00:19:05	<--	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has quit
2013-03-30 00:19:08	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 260 seconds)
2013-03-30 00:19:18	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-30 00:19:35	otters	donri: well, the "reply" function in the bot writes to the channel, and there's a thread watching the channel that actually writes messages to the server
2013-03-30 00:19:45	otters	so I'm trying to make a kind of onExit function
2013-03-30 00:19:52	-->	Paprikachu (~Paprikach@77.116.246.59.wireless.dyn.drei.com) has joined #haskell
2013-03-30 00:20:03	otters	where once all outgoing messages have been sent, it runs callbacks and exits
2013-03-30 00:20:21	-->	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has joined #haskell
2013-03-30 00:22:05	<--	path[l] (~vsi@173.252.71.6) has quit (Ping timeout: 245 seconds)
2013-03-30 00:22:13	<--	bos (~bos@64.125.189.90) has quit (Ping timeout: 245 seconds)
2013-03-30 00:22:22	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-30 00:22:23	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-03-30 00:22:43	<--	trescenzi (~trescenzi@2620:91:0:163:c957:c863:5d02:b090) has quit (Ping timeout: 264 seconds)
2013-03-30 00:23:17	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit
2013-03-30 00:25:19	 *	hackagebot cabal-uninstall 0.1.4 - Uninstall cabal packages  http://hackage.haskell.org/package/cabal-uninstall-0.1.4 (JanChristiansen)
2013-03-30 00:26:24	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-03-30 00:26:43	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 00:28:14	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-30 00:28:27	-->	trescenzi (~trescenzi@148.100.74.117) has joined #haskell
2013-03-30 00:28:42	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (Ping timeout: 256 seconds)
2013-03-30 00:28:55	-->	watermind (~wm@2.80.234.191) has joined #haskell
2013-03-30 00:29:32	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-03-30 00:30:08	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Ping timeout: 245 seconds)
2013-03-30 00:30:36	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Quit: hamishmack)
2013-03-30 00:31:05	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 255 seconds)
2013-03-30 00:31:34	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-03-30 00:33:07	<--	trescenzi (~trescenzi@148.100.74.117) has quit (Ping timeout: 260 seconds)
2013-03-30 00:33:45	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-03-30 00:33:47	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-30 00:33:48	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has left #haskell
2013-03-30 00:34:12	<--	rs234 (~rs234@89.137.4.235) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-03-30 00:34:30	-->	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-03-30 00:35:20	 *	hackagebot names 0.2.1 - Type level names.  http://hackage.haskell.org/package/names-0.2.1 (JulianFleischer)
2013-03-30 00:35:22	 *	hackagebot named-records 0.2 - Flexible records with named fields.  http://hackage.haskell.org/package/named-records-0.2 (JulianFleischer)
2013-03-30 00:35:27	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-03-30 00:35:46	<--	rickeyski-k (~rickeyski@206.217.106.178) has quit (Quit: leaving)
2013-03-30 00:36:20	 *	ocharles blinks at http://hackage.haskell.org/packages/archive/names/0.1/doc/html/Data-Name.html
2013-03-30 00:36:20	skyflash	First time I've had to parse/scan a timestamp string in Haskell.  Libs look complicated and I see old packages like "old-locale" as a dependency of Data.Time.Format (at least according to docs).  What's the official/modern way of doing this?
2013-03-30 00:36:23	<--	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-03-30 00:36:50	skyflash	I'm trying readTime from Data.Time.Format
2013-03-30 00:37:06	<--	mirsal (~mirsal@2001:470:1f09:172d:0:5555:0:1) has quit (Ping timeout: 258 seconds)
2013-03-30 00:37:49	<--	tommd (~tommd@pdx.galois.com) has quit (Remote host closed the connection)
2013-03-30 00:38:51	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-30 00:39:17	-->	mirsal (~mirsal@znc0.irc.he-1.ip6.mirsal.fr) has joined #haskell
2013-03-30 00:39:22	geekosaur	old-locale is correct; it was, shall we say, mis-deprecated. (it was incorrectly considered to be tied to old-time)
2013-03-30 00:39:27	-->	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-03-30 00:39:44	skyflash	hehe.  OK, thanks for putting my mind at ease.
2013-03-30 00:39:59	-->	cognominal (~cognomina@37.160.23.229) has joined #haskell
2013-03-30 00:40:22	 *	hackagebot named-records 0.2.1 - Flexible records with named fields.  http://hackage.haskell.org/package/named-records-0.2.1 (JulianFleischer)
2013-03-30 00:42:05	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-03-30 00:42:39	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-03-30 00:43:07	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-03-30 00:43:38	<--	conal (~conal@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: conal)
2013-03-30 00:43:44	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 00:43:44	-->	EvilPenguin (~EvilPengu@174-28-72-209.albq.qwest.net) has joined #haskell
2013-03-30 00:45:00	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-30 00:45:01	Paprikachu	ohhai
2013-03-30 00:45:20	 *	hackagebot sourcemap 0.1.0.0 - Implementation of source maps as proposed by Google and Mozilla.  http://hackage.haskell.org/package/sourcemap-0.1.0.0 (ChrisDone)
2013-03-30 00:48:05	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-03-30 00:48:44	<--	mr- (~martin@rgnb-5d8625b7.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-03-30 00:48:58	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 258 seconds)
2013-03-30 00:49:22	<--	mrsolo (~mrsolo@64.125.181.92) has quit (Quit: Leaving)
2013-03-30 00:50:08	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-30 00:50:20	 *	hackagebot sourcemap 0.1.0.1 - Implementation of source maps as proposed by Google and Mozilla.  http://hackage.haskell.org/package/sourcemap-0.1.0.1 (ChrisDone)
2013-03-30 00:50:21	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-03-30 00:50:23	 *	hackagebot sourcemap 0.1.0.2 - Implementation of source maps as proposed by Google and Mozilla.  http://hackage.haskell.org/package/sourcemap-0.1.0.2 (ChrisDone)
2013-03-30 00:50:52	<--	tensorpudding (~tensorpud@99.148.199.124) has quit (Ping timeout: 272 seconds)
2013-03-30 00:51:12	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-30 00:52:33	<--	folone__ (~folone@brln-4db804df.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-03-30 00:53:01	-->	fosky (~fosky@ppp118-209-108-218.lns20.mel4.internode.on.net) has joined #haskell
2013-03-30 00:53:20	-->	hsc (~hsc@c-24-18-240-154.hsd1.wa.comcast.net) has joined #haskell
2013-03-30 00:53:23	-->	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has joined #haskell
2013-03-30 00:54:07	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-03-30 00:54:56	-->	tensorpudding (~tensorpud@99.102.68.87) has joined #haskell
2013-03-30 00:56:05	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-30 00:57:32	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 00:57:38	<--	argiopeweb (~elliot@155.31.73.125) has quit (Ping timeout: 245 seconds)
2013-03-30 00:57:52	-->	kyagrd (~kyagrd@ip-64-134-128-60.public.wayport.net) has joined #haskell
2013-03-30 00:58:36	<--	qm__ (~Volta@cpe-70-124-195-111.rgv.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-30 00:59:15	-->	chatsiri_ (~chatsiri_@171.6.183.174) has joined #haskell
2013-03-30 01:00:06	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-30 01:00:08	<--	cognominal (~cognomina@37.160.23.229) has quit (Ping timeout: 245 seconds)
2013-03-30 01:00:20	-->	julmuri (kama@207.204.255.175) has joined #haskell
2013-03-30 01:00:21	 *	hackagebot sourcemap 0.1.0.3 - Implementation of source maps as proposed by Google and Mozilla.  http://hackage.haskell.org/package/sourcemap-0.1.0.3 (ChrisDone)
2013-03-30 01:00:58	beaky	how did they discover that the lambda calculus can be translated to a turing machine?
2013-03-30 01:01:39	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-03-30 01:03:03	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-30 01:03:05	<--	k00mi (~koomi@24.134.205.36) has quit (Quit: WeeChat 0.4.0)
2013-03-30 01:03:08	-->	cognominal (~cognomina@37.160.23.229) has joined #haskell
2013-03-30 01:03:26	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-30 01:03:37	ion	…
2013-03-30 01:03:43	<--	julmac (~kama@q186.ip4.netikka.fi) has quit (Read error: Operation timed out)
2013-03-30 01:03:48	dmwit	So... what package should I look in for a quality Text -> Rational parser?
2013-03-30 01:03:57	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Quit: Lost terminal)
2013-03-30 01:03:59	dmwit	beaky: By thinking about it.
2013-03-30 01:04:01	-->	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has joined #haskell
2013-03-30 01:04:05	beaky	lol
2013-03-30 01:04:11	-->	trescenzi (~trescenzi@148.100.74.117) has joined #haskell
2013-03-30 01:04:13	shachaf	dmwit: As in "123 % 456"?
2013-03-30 01:04:21	DanBurton	The dumb answer is "read Turing's paper on it"
2013-03-30 01:04:23	dmwit	beaky: Seriously. You alternate between trying to do it and trying to prove it can't be done. Eventually you succeed at one or the other.
2013-03-30 01:04:33	dmwit	shachaf: Preferably "123.456".
2013-03-30 01:04:40	shachaf	dmwit: Ah. How about "text"?
2013-03-30 01:04:48	<--	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has left #haskell ("Konversation terminated!")
2013-03-30 01:05:03	shachaf	http://hackage.haskell.org/packages/archive/text/0.11.2.3/doc/html/Data-Text-Read.html http://hackage.haskell.org/packages/archive/text/0.11.2.3/doc/html/Data-Text-Lazy-Read.html
2013-03-30 01:05:06	dmwit	perfect
2013-03-30 01:05:18	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-30 01:05:19	<--	trescenzi (~trescenzi@148.100.74.117) has quit (Remote host closed the connection)
2013-03-30 01:05:19	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 260 seconds)
2013-03-30 01:05:21	 *	hackagebot ssh 0.2.11 - A pure-Haskell SSH server library.  http://hackage.haskell.org/package/ssh-0.2.11 (SimonMichael)
2013-03-30 01:05:31	shachaf	Of course you can't represent all Rationals that way.
2013-03-30 01:06:22	dmwit	indeed
2013-03-30 01:06:31	dmwit	In fact, I suspect that in reality I am being sent a Double.
2013-03-30 01:06:31	-->	julmac (~kama@q186.ip4.netikka.fi) has joined #haskell
2013-03-30 01:06:35	dmwit	But I don't want to take any chances.
2013-03-30 01:07:00	shachaf	(Well, you can represent all rationals that way... But not with the obvious base-10 encoding.)
2013-03-30 01:07:17	-->	xpika (~jrg@1.153.206.1) has joined #haskell
2013-03-30 01:08:53	<--	cognominal (~cognomina@37.160.23.229) has quit (Ping timeout: 255 seconds)
2013-03-30 01:09:47	-->	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has joined #haskell
2013-03-30 01:10:12	<--	Jayrays (~Jayrays@unaffiliated/jayrays) has quit
2013-03-30 01:10:40	slack1256	To me Alternative and MonadPlus fit the same purpose.
2013-03-30 01:10:43	<--	julmuri (kama@207.204.255.175) has quit (Ping timeout: 264 seconds)
2013-03-30 01:10:49	<--	mahogny (~mahogny@m30742.olf.sgsnet.se) has quit (Ping timeout: 245 seconds)
2013-03-30 01:11:06	slack1256	Is there any example of a datatype that can have a MonadPlus instance but no a Alternative?
2013-03-30 01:11:15	slack1256	*an Alternative one?
2013-03-30 01:11:22	<--	collin_ (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-03-30 01:11:31	arkeet	I hope not.
2013-03-30 01:12:26	shachaf	is there any example of a monoid which is not easy?
2013-03-30 01:12:31	arkeet	no
2013-03-30 01:12:45	shachaf	arkeet: Have you noticed how monoids are awful because they're untyped?
2013-03-30 01:12:47	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 260 seconds)
2013-03-30 01:12:56	arkeet	they are?
2013-03-30 01:13:18	DanBurton	shachaf: explain
2013-03-30 01:13:23	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-03-30 01:13:37	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-30 01:13:38	-->	qm_ (~Volta@cpe-70-124-195-111.rgv.res.rr.com) has joined #haskell
2013-03-30 01:14:07	shachaf	You can just mappend any old thing to any old thing. No type safety.
2013-03-30 01:14:20	shachaf	You can't write out the types and then use holes etc. to write a function.
2013-03-30 01:14:45	slack1256	Having separated Alternative MonadPlus classes was a historical accident or a sane decision?
2013-03-30 01:14:46	donri	> mappend "hi" (Sum 5)
2013-03-30 01:14:47	lambdabot	  Couldn't match expected type `[GHC.Types.Char]'
2013-03-30 01:14:48	lambdabot	             with actual ty...
2013-03-30 01:14:51	elliott	slack1256: accident
2013-03-30 01:14:58	Cale	beaky: Well, it was a natural sort of thing to try to do, because both are intended as models of computation. Since they're each pretty expressive, it's not especially hard (at least in comparison to writing other programs in these styles) to construct a lambda term which takes an encoding of a description of a Turing machine, and carries out steps, or a Turing machine which accepts a lambda term on its tape and carrie
2013-03-30 01:14:58	Cale	s out reduction.
2013-03-30 01:15:26	-->	cognominal (~cognomina@37.160.24.179) has joined #haskell
2013-03-30 01:15:30	beaky	ah
2013-03-30 01:16:47	jmcarthur	slack1256: semi-accident. they aren't exactly the same
2013-03-30 01:16:51	-->	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-03-30 01:17:04	jmcarthur	slack1256: MonadPlus has extra laws (except that we can't agree on one of them...)
2013-03-30 01:17:16	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-03-30 01:17:33	elliott	arguably Alternative shouldn't require Applicative.
2013-03-30 01:17:37	elliott	they're sort of dual
2013-03-30 01:17:39	jmcarthur	yeah
2013-03-30 01:17:58	shachaf	What are the Alternative laws?
2013-03-30 01:18:00	jmcarthur	well, independent, at least
2013-03-30 01:18:06	jmcarthur	nothing more than the monoid laws
2013-03-30 01:18:36	jmcarthur	they happen to interact with the applicative laws in interesting ways, but that would be the case regardless of whether it requires applicative
2013-03-30 01:18:46	Dodek	beaky: the actual point is that almost any model of computation you can come up with that is not crippled in an obvious way will be equivalent to turing machines.
2013-03-30 01:18:51	<--	niklasb (~codeslay0@p5B3102AF.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-03-30 01:18:58	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 01:19:02	slack1256	Mmm I hadn't thought about the laws...
2013-03-30 01:19:39	--	pdxleif is now known as pdxleif_away
2013-03-30 01:20:00	-->	Moggle (~chatzilla@S01060014d1c3a9f9.wp.shawcable.net) has joined #haskell
2013-03-30 01:20:17	donri	ArrowPlus! :D
2013-03-30 01:20:37	-->	jcao219 (~jimmy@wikibooks/Jcao219) has joined #haskell
2013-03-30 01:20:46	beaky	@src mappend
2013-03-30 01:20:46	lambdabot	Source not found. BOB says:  You seem to have forgotten your passwd, enter another!
2013-03-30 01:20:53	<--	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Ping timeout: 240 seconds)
2013-03-30 01:21:12	-->	tanakh__ (~tanakh@186240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-30 01:21:12	donri	beaky: depends on the Monoid instance
2013-03-30 01:21:14	<--	cognominal (~cognomina@37.160.24.179) has quit (Ping timeout: 245 seconds)
2013-03-30 01:21:23	beaky	ah
2013-03-30 01:21:41	beaky	:t mappend
2013-03-30 01:21:42	lambdabot	Monoid a => a -> a -> a
2013-03-30 01:22:05	 *	beaky still does not understand monoids
2013-03-30 01:22:17	donri	even though they're so easy?
2013-03-30 01:22:26	Cale	beaky: You might just look at the mathematical definition first
2013-03-30 01:22:56	<--	tanakh_ (~tanakh@218240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 246 seconds)
2013-03-30 01:23:17	Cale	A monoid is a set M together with a function M x M -> M (taking a pair of elements of M and producing some element of M) usually called "multiplication" in a general context, such that the following are true:
2013-03-30 01:23:38	--	clahey is now known as cl_away
2013-03-30 01:23:38	jmcarthur	beaky: a monoid is just a set with an associative binary operation that has an identity. in haskell, the set is the set of values having some type, the identity is mempty, and the binary operation is mappend
2013-03-30 01:23:52	Cale	1) For any a, b, c in M, we have a*(b*c) = (a*b)*c (where * is this multiplication function of course)
2013-03-30 01:24:16	Cale	2) There is some element 1 in M such that for any a in M, we have 1*a = a*1 = a
2013-03-30 01:24:41	<--	dgpratt (~dpratt71@pool-72-73-106-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 256 seconds)
2013-03-30 01:24:55	-->	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has joined #haskell
2013-03-30 01:25:03	cl_away	My definition of monoid is:  A group is a monoid with a two sided inverse.
2013-03-30 01:25:07	--	cl_away is now known as clahey
2013-03-30 01:25:22	 *	hackagebot egison 3.0.0 - An Interpreter for the Programming Language Egison  http://hackage.haskell.org/package/egison-3.0.0 (SatoshiEgi)
2013-03-30 01:25:27	beaky	hmm
2013-03-30 01:25:31	shachaf	What is "a two sided inverse"?
2013-03-30 01:25:40	Philippa	as opposed to left-inverse, right-inverse
2013-03-30 01:25:44	clahey	Right.
2013-03-30 01:25:51	shachaf	Oh, I read that backwards.
2013-03-30 01:26:08	shachaf	clahey: That's a definition of a group, not of a monoid.
2013-03-30 01:26:10	clahey	But now that I think of it, it's not possible to add a left-inverse vs. a right inverse to a monoid.
2013-03-30 01:26:23	clahey	shachaf: It's a definition by removal of axiom?
2013-03-30 01:26:27	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-03-30 01:26:43	ab9rf	clahey: i vaguely recall that if inverses exist then they're two-sided.  but it's been a _long_ time since i did any formal abstract algebra
2013-03-30 01:26:50	clahey	ab9rf: Exactly.
2013-03-30 01:27:02	clahey	ab9rf: At least in an associative algebra.
2013-03-30 01:27:09	shachaf	Well, it's a kind of vague way of putting it. But whatever.
2013-03-30 01:27:19	clahey	shachaf: It's not a serious definition.
2013-03-30 01:27:31	clahey	shachaf: Just helps me as a way to think about things.
2013-03-30 01:27:39	ab9rf	clahey: that makes sense
2013-03-30 01:27:50	beaky	I guess integers are monoids
2013-03-30 01:27:54	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-03-30 01:27:56	ab9rf	beaky: yes
2013-03-30 01:28:10	ab9rf	beaky: integers with addition and also integers with multiplication
2013-03-30 01:28:19	ab9rf	beaky: you need both a set _and_ an operation to talk about a monoid
2013-03-30 01:28:21	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 01:28:25	shachaf	Integers are a monoid, anyway.
2013-03-30 01:28:25	-->	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has joined #haskell
2013-03-30 01:28:36	-->	cognominal (~cognomina@37.160.58.249) has joined #haskell
2013-03-30 01:28:38	clahey	ab9rf: because if l is a left inverse and r is a right inverse, then l = l i= l a r = i r = r
2013-03-30 01:28:49	elliott	shachaf: at least two monoids
2013-03-30 01:28:50	ab9rf	clahey: yeah, i just did that proof in my head too :)
2013-03-30 01:28:52	elliott	!
2013-03-30 01:29:14	shachaf	elliott: Lots more than two.
2013-03-30 01:29:20	elliott	at least seven.
2013-03-30 01:29:23	ab9rf	heh
2013-03-30 01:29:29	beaky	how do typeclasses work?
2013-03-30 01:29:35	-->	k00mi (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has joined #haskell
2013-03-30 01:29:37	clahey	integers with addition are a group (and therefore a monoid)  Integers with multiplication are not a group, but are a monoid.
2013-03-30 01:29:58	clahey	integers are an infinite number of monoids.
2013-03-30 01:30:00	beaky	are they significant in functional programming? or are typclasses some haskell innovation?
2013-03-30 01:30:06	 *	slack1256 never used the applicative interface of monad-transformers, didn't know what he was missing.
2013-03-30 01:30:13	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 240 seconds)
2013-03-30 01:30:18	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-03-30 01:30:49	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-03-30 01:30:59	clahey	For all k => (Z, \a b -> a + b - k) is a monoid with identity k.
2013-03-30 01:30:59	<--	ulfdoz (~mary@p5B38AEAB.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-03-30 01:31:15	-->	julmuri (kama@207.204.255.216) has joined #haskell
2013-03-30 01:31:24	<--	Kyo (~elaineben@h206n2c1o1097.bredband.skanova.com) has quit
2013-03-30 01:31:39	ab9rf	clahey: heh
2013-03-30 01:32:08	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-03-30 01:32:33	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 240 seconds)
2013-03-30 01:32:48	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-03-30 01:32:50	jmcarthur	monoids are just ways to build binary trees whose values are not alterable by rebalancing
2013-03-30 01:33:02	<--	quchen (~david@p54AA428F.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-03-30 01:33:07	--	bcoppens_ is now known as bcoppens
2013-03-30 01:33:38	<--	Reite (~Reite@cF6F28BC3.dhcp.as2116.net) has quit (Ping timeout: 255 seconds)
2013-03-30 01:33:40	clahey	beaky: I'm not sure about my term usage here, but: Actually, one of the things that happens is because functions in typeclasses are only parameterized on the type of the function parameter.
2013-03-30 01:33:44	shachaf	jmcarthur: Also semigroups.
2013-03-30 01:34:01	jmcarthur	more generally, yes
2013-03-30 01:34:13	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has quit (Ping timeout: 240 seconds)
2013-03-30 01:34:13	<--	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Ping timeout: 240 seconds)
2013-03-30 01:34:16	beaky	:t mempty
2013-03-30 01:34:17	lambdabot	Monoid a => a
2013-03-30 01:34:19	clahey	beaky: So even though the integers can be the set for an infinite number of monoids, Integer only has one definition for the typeclass Monoid.
2013-03-30 01:34:19	<--	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has quit (Ping timeout: 256 seconds)
2013-03-30 01:34:24	clahey	If it has any?
2013-03-30 01:34:25	jmcarthur	i thought about adding "possibly-empty" but opted to avoid being too wordy
2013-03-30 01:34:30	clahey	Oh, I remember now.
2013-03-30 01:34:33	clahey	It doesn't have any.
2013-03-30 01:34:59	<--	cognominal (~cognomina@37.160.58.249) has quit (Ping timeout: 245 seconds)
2013-03-30 01:35:01	cmccann	jmcarthur: it took me an embarrassingly long time to notice that binary tree rotations are just applications of the associativity identities
2013-03-30 01:35:05	<--	sepp2k (~sexy@g224103007.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-03-30 01:35:05	-->	cognominal__ (~cognomina@37.161.110.177) has joined #haskell
2013-03-30 01:35:16	clahey	But there are types, Sum and Product, which are defined as newtypes for Integers?
2013-03-30 01:35:19	<--	julmac (~kama@q186.ip4.netikka.fi) has quit (Ping timeout: 264 seconds)
2013-03-30 01:35:28	clahey	And they have Monoid definitions.
2013-03-30 01:35:40	clahey	shachaf: Was that vaguely correct?
2013-03-30 01:35:43	-->	predator217 (~predator1@p50802087.dip.t-dialin.net) has joined #haskell
2013-03-30 01:35:48	-->	AutoHaskellNoobi (AutoHaskel@c-67-169-232-97.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 01:35:51	AutoHaskellNoobi	@rules
2013-03-30 01:35:51	lambdabot	Unknown command, try @list
2013-03-30 01:35:52	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-03-30 01:35:53	AutoHaskellNoobi	!ules
2013-03-30 01:35:53	jmcarthur	clahey: Sum and Product are for any instance of Num, i believe
2013-03-30 01:35:55	AutoHaskellNoobi	!rules
2013-03-30 01:36:07	<--	midfield (~user@70-36-157-176.static.sonic.net) has quit (Ping timeout: 260 seconds)
2013-03-30 01:36:14	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-03-30 01:36:15	clahey	jmcarthur: Oh, they're functors (not Functors)?
2013-03-30 01:36:29	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-30 01:36:54	AutoHaskellNoobi	hi, i have a very noob haskell question if anyone is interested in helping?
2013-03-30 01:36:59	shachaf	I see no reason they couldn't be Functor instances.
2013-03-30 01:37:02	jmcarthur	they are type constructors and possibly should be Monads (or at least it would not be harmful if they were)
2013-03-30 01:37:13	cmccann	the best way to ask a question is to just ask it
2013-03-30 01:37:21	shachaf	cmccann: Innovative.
2013-03-30 01:37:25	cmccann	people will help if they want. they often do.
2013-03-30 01:37:34	clahey	shachaf: I just meant that I meant type constructors and not Functors.
2013-03-30 01:37:44	cmccann	shachaf: yes I am on the cutting edge of conversational technology here
2013-03-30 01:37:51	shachaf	clahey: "functor" with a lowercase f doesn't mean "type constructor"
2013-03-30 01:38:18	clahey	shachaf: "functors in Hask"?
2013-03-30 01:38:20	jmcarthur	clahey: "functor" actually subsumes "Functor"
2013-03-30 01:38:29	clahey	Oh, right.
2013-03-30 01:38:31	clahey	Of course it does.
2013-03-30 01:38:32	AutoHaskellNoobi	cmccann: thanks, i will throw away my question. i started learning haskell today and i am following learn haskell for greater good book. it has following example:
2013-03-30 01:38:34	AutoHaskellNoobi	boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
2013-03-30 01:38:42	jmcarthur	clahey: Functor is only endofunctors in Hask
2013-03-30 01:38:42	AutoHaskellNoobi	when i type this on ghci i get following:
2013-03-30 01:38:46	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 01:38:51	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-30 01:38:53	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-03-30 01:38:54	AutoHaskellNoobi	ghci> boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
2013-03-30 01:38:54	AutoHaskellNoobi	<interactive>:9:14: parse error on input `='
2013-03-30 01:38:54	AutoHaskellNoobi	ghci>
2013-03-30 01:39:02	<--	predator117 (~predator1@p50805A5F.dip.t-dialin.net) has quit (Ping timeout: 255 seconds)
2013-03-30 01:39:10	AutoHaskellNoobi	cant figure out why...
2013-03-30 01:39:12	cmccann	use "let" in GHCi
2013-03-30 01:39:15	nooodl	add "let" before it
2013-03-30 01:39:23	AutoHaskellNoobi	ohh, thanks.
2013-03-30 01:39:30	shachaf	clahey: No, "functor" isn't really related to "type constructor".
2013-03-30 01:40:02	clahey	shachaf: A type constructor is a map in Hask, not a functor?
2013-03-30 01:40:07	clahey	Not necessarily a functor?
2013-03-30 01:40:38	AutoHaskellNoobi	one more question, is there auto complete in ghci? i tried tab, control space, etc... i could nto figure it out.
2013-03-30 01:40:39	shachaf	I guess? I mean, it does map types to other types.
2013-03-30 01:40:44	shachaf	I'm not sure what you're getting at.
2013-03-30 01:40:47	<--	Icewing (~Icewing@unaffiliated/icewing) has quit (Ping timeout: 260 seconds)
2013-03-30 01:40:49	shachaf	AutoHaskellNoobi: Yes, Tab should work.
2013-03-30 01:40:50	clahey	shachaf: I don't either!
2013-03-30 01:40:52	jmcarthur	clahey: a type constructor is just something with kind * -> k
2013-03-30 01:41:01	cmccann	tab works for me
2013-03-30 01:41:02	jmcarthur	clahey: for any k (could be another type constructor)
2013-03-30 01:41:08	jmcarthur	aw man, i wasn't general enough
2013-03-30 01:41:09	<--	kmels_ (~kmels@frbg-4d029404.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-30 01:41:14	shachaf	jmcarthur: How about k -> k'?
2013-03-30 01:41:18	jmcarthur	right
2013-03-30 01:41:25	AutoHaskellNoobi	hmmm, thanks, i am having problems with tab but thats ok.
2013-03-30 01:41:31	AutoHaskellNoobi	take care, thanks again for yourhelp.
2013-03-30 01:41:31	shachaf	I.e. a function!
2013-03-30 01:41:34	jmcarthur	a type constructor can also take other type constructors as arguments
2013-03-30 01:41:49	clahey	Words are hard.
2013-03-30 01:41:53	clahey	I'm going to go to a party.
2013-03-30 01:41:54	jmcarthur	yeah, i should have just left it at type-level function
2013-03-30 01:41:59	clahey	Maybe I'll write some code tonight.
2013-03-30 01:42:09	<--	AutoHaskellNoobi (AutoHaskel@c-67-169-232-97.hsd1.ca.comcast.net) has quit
2013-03-30 01:42:23	clahey	Probably not haskell unless I want to prep for codejam, which would actually be a pretty good idea.
2013-03-30 01:42:29	clahey	I'll talk to you guys later.
2013-03-30 01:42:31	<--	cognominal__ (~cognomina@37.161.110.177) has quit (Ping timeout: 264 seconds)
2013-03-30 01:42:32	--	clahey is now known as cl_away
2013-03-30 01:42:54	-->	spookyfork (~true@bl18-218-233.dsl.telepac.pt) has joined #haskell
2013-03-30 01:43:05	Cale	beaky: type classes are an innovation which happened in Haskell, but aren't necessarily specific to it
2013-03-30 01:43:05	<--	ludamad (~adomurad@dsl-69-171-133-215.acanac.net) has quit (Ping timeout: 255 seconds)
2013-03-30 01:43:10	beaky	> let a = [True, False] in liftM2 (,) a a
2013-03-30 01:43:12	lambdabot	  [(True,True),(True,False),(False,True),(False,False)]
2013-03-30 01:43:13	<--	macrover (~macrover@ip70-180-159-214.lv.lv.cox.net) has quit (Ping timeout: 240 seconds)
2013-03-30 01:43:22	<--	u_quark (~u_quark@athedsl-348885.home.otenet.gr) has quit (Quit: Leaving.)
2013-03-30 01:43:33	-->	u_quark (~u_quark@athedsl-348885.home.otenet.gr) has joined #haskell
2013-03-30 01:43:47	cmccann	hm I think my gtk-based opengl context is working
2013-03-30 01:44:02	cmccann	who needs glut or sdl or that crap, pf
2013-03-30 01:44:28	beaky	> let p = [True, False] in do {a <- p; b <- p; return (a, b) }
2013-03-30 01:44:30	lambdabot	  [(True,True),(True,False),(False,True),(False,False)]
2013-03-30 01:44:37	<--	stephenjudkins (~textual@c-98-246-155-212.hsd1.or.comcast.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-30 01:44:44	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 01:45:15	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-03-30 01:45:55	<--	lennart__ (~lennart@kiel-4d0666b3.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-03-30 01:46:10	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-03-30 01:46:26	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-03-30 01:46:33	-->	Peaker (~Peaker@87.69.60.49.cable.012.net.il) has joined #haskell
2013-03-30 01:47:13	-->	sw2wolf (~czsq888@171.217.2.51) has joined #haskell
2013-03-30 01:47:16	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-03-30 01:47:21	-->	cognominal__ (~cognomina@37.161.238.27) has joined #haskell
2013-03-30 01:48:55	<--	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Quit: adu_)
2013-03-30 01:51:04	<--	ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 258 seconds)
2013-03-30 01:52:35	-->	collin_ (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 01:53:18	<--	xenon1 (~xenon@171.7.67.35) has left #haskell
2013-03-30 01:54:02	-->	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-03-30 01:55:57	<--	ben_d (~muus@c-71-237-161-120.hsd1.or.comcast.net) has quit (Quit: LEE VING)
2013-03-30 01:58:27	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Quit: leaving)
2013-03-30 01:58:32	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-03-30 01:58:56	-->	emmanuelux (~emmanuelu@ch.freedom-ip.com) has joined #haskell
2013-03-30 01:59:32	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-30 02:00:14	-->	sven_ (3ff5db96@gateway/web/freenode/ip.63.245.219.150) has joined #haskell
2013-03-30 02:00:33	 *	hackagebot lambda-toolbox 1.0.1 - An application to work with the lambda calculus (for learning)  http://hackage.haskell.org/package/lambda-toolbox-1.0.1 (JulianFleischer)
2013-03-30 02:00:55	sven_	i'm confused by something very simple
2013-03-30 02:02:04	<--	glguy (~emertens@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-03-30 02:02:07	sven_	if liftA2 :: (a -> b -> c) -> f a -> f b -> f c, and id :: x -> x, then how do you (mechanically) do the substitution to find that (liftA2 id) :: (x -> c) -> f x -> f c
2013-03-30 02:02:11	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 258 seconds)
2013-03-30 02:02:29	-->	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-30 02:02:55	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-03-30 02:02:56	sven_	the types make sense to me but the symbol manipulation rules are confusing me a bit
2013-03-30 02:03:13	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-03-30 02:03:20	shachaf	liftA2 :: (a -> b -> c) -> f a -> f b -> f c
2013-03-30 02:03:23	shachaf	id :: x -> x
2013-03-30 02:03:30	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-03-30 02:03:31	<--	emmanuelux (~emmanuelu@ch.freedom-ip.com) has quit (Read error: Connection reset by peer)
2013-03-30 02:03:34	shachaf	Therefore (x -> x) = (a -> (b -> c))
2013-03-30 02:03:38	shachaf	Therefore x = a, x = b -> c
2013-03-30 02:04:08	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-30 02:04:08	shachaf	So liftA2 :: ((b -> c) -> (b -> c)) -> f (b -> c) -> f b -> f c
2013-03-30 02:04:34	DanBurton	@hoogle (Maybe a) -> (a -> m ()) -> m (Maybe a)
2013-03-30 02:04:34	lambdabot	Data.Traversable forM :: (Traversable t, Monad m) => t a -> (a -> m b) -> m (t b)
2013-03-30 02:04:34	lambdabot	Data.Traversable for :: (Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)
2013-03-30 02:04:34	lambdabot	Data.Traversable mapM :: (Traversable t, Monad m) => (a -> m b) -> t a -> m (t b)
2013-03-30 02:05:52	-->	trescenzi (~trescenzi@148.100.72.202) has joined #haskell
2013-03-30 02:05:56	-->	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-30 02:06:40	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit (Client Quit)
2013-03-30 02:06:58	<--	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has quit (Quit: Lost terminal)
2013-03-30 02:07:29	DanBurton	@type let m >>=<< f = Data.Traversable.forM m (\a -> f a >> pure a) in (>>=<<)
2013-03-30 02:07:31	lambdabot	(Monad m, Applicative m, Traversable t) => t b -> (b -> m a) -> m (t b)
2013-03-30 02:07:53	sven_	schachaf: am I mistaken or is that liftA2 . id?
2013-03-30 02:08:12	sven_	shachaf: that one i understand better
2013-03-30 02:08:13	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Read error: Operation timed out)
2013-03-30 02:08:19	<--	cognominal__ (~cognomina@37.161.238.27) has quit (Ping timeout: 264 seconds)
2013-03-30 02:08:27	<--	gentleben (~gentleben@208.74.182.4.static.etheric.net) has quit (Quit: gentleben)
2013-03-30 02:08:31	<--	watermind (~wm@2.80.234.191) has quit (Read error: Connection reset by peer)
2013-03-30 02:08:32	shachaf	No, that's liftA2 id
2013-03-30 02:08:41	-->	cognominal (~cognomina@37.161.238.27) has joined #haskell
2013-03-30 02:08:44	-->	watermind (~wm@bl19-234-191.dsl.telepac.pt) has joined #haskell
2013-03-30 02:08:47	circle	if you have map f (x:xs) = f x : map f xs, what does the colon character do?
2013-03-30 02:08:48	shachaf	liftA2 . id = liftA2
2013-03-30 02:09:06	-->	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-30 02:09:11	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: NullPointerException)
2013-03-30 02:09:24	geekosaur	both colons are doing pretty much the same thing: (de)constructing a list into (head:tail)
2013-03-30 02:09:36	-->	QinGW (~yaaic@27.128.33.149) has joined #haskell
2013-03-30 02:09:39	sven_	shachaf: this is the type that ghci gives me: (liftA2 id) :: Applicative f => f (b -> c) -> f b -> f c
2013-03-30 02:09:52	sven_	shachaf: is that equivalent to what you wrote in a way that i'm not seeing?
2013-03-30 02:09:54	shachaf	sven_: That's the type that I gave you, too.
2013-03-30 02:09:56	shachaf	Er, right.
2013-03-30 02:10:08	shachaf	liftA2 id :: f (b -> c) -> f b -> f c
2013-03-30 02:10:16	shachaf	liftA2 :: ((b -> c) -> (b -> c)) -> f (b -> c) -> f b -> f c
2013-03-30 02:10:19	<--	trescenzi (~trescenzi@148.100.72.202) has quit (Read error: Operation timed out)
2013-03-30 02:10:24	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-03-30 02:10:28	shachaf	id :: (b -> c) -> (b -> c) -- i.e. x -> x
2013-03-30 02:10:41	sven_	oh wait!
2013-03-30 02:10:45	sven_	now i get it
2013-03-30 02:10:46	sven_	sorry
2013-03-30 02:10:47	-->	k00mi_ (~koomi@dslb-094-217-029-213.pools.arcor-ip.net) has joined #haskell
2013-03-30 02:11:07	geekosaur	circle: do you understand how Haskell lists work? they're really cons lists: [1,2,3,4] is 1:2:3:4:[]
2013-03-30 02:11:39	sven_	you were showing me the type of liftA2 with id substituted in, but before liftA2 was applied to id (so if i remove everything before the first -> at the top level, i get the type ghci returns)
2013-03-30 02:11:46	circle	oh yeah true sorry
2013-03-30 02:11:50	shachaf	Yes.
2013-03-30 02:11:59	shachaf	All I did was unify it.
2013-03-30 02:12:13	shachaf	@ty liftA2 `asAppliedTo` id
2013-03-30 02:12:14	-->	timemage (~user@pool-71-241-132-15.burl.east.myfairpoint.net) has joined #haskell
2013-03-30 02:12:14	lambdabot	Applicative f => ((b -> c) -> b -> c) -> f (b -> c) -> f b -> f c
2013-03-30 02:12:22	sven_	shachaf: thanks. this was really helpful!
2013-03-30 02:12:42	<--	fosky (~fosky@ppp118-209-108-218.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-03-30 02:12:47	<--	tjohnson (~tjohnson@128-193-152-160.ptpg.oregonstate.edu) has quit (Ping timeout: 255 seconds)
2013-03-30 02:13:14	<--	HugoDaniel (~hugo@bl5-18-183.dsl.telepac.pt) has quit (Quit: leaving)
2013-03-30 02:13:33	<--	k00mi (~koomi@dslb-188-105-097-119.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-03-30 02:15:08	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-30 02:15:44	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-03-30 02:15:49	-->	trescenzi (~trescenzi@2620:91:0:163:858a:823:a8e7:acb4) has joined #haskell
2013-03-30 02:16:54	<--	beaky (~beaky@92.96.112.56) has quit (Quit: leaving)
2013-03-30 02:17:07	--	pdxleif_away is now known as pdxleif
2013-03-30 02:17:40	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-30 02:20:19	<--	trescenzi (~trescenzi@2620:91:0:163:858a:823:a8e7:acb4) has quit (Ping timeout: 264 seconds)
2013-03-30 02:21:45	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-03-30 02:22:53	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-30 02:23:23	-->	jkoshy (~jkoshy@117.204.51.184) has joined #haskell
2013-03-30 02:24:52	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Quit: Lost terminal)
2013-03-30 02:25:30	xpika	whats the easiest way to putStrLn "hello world" 5 times?
2013-03-30 02:25:43	-->	fosky (~fosky@ppp118-209-110-118.lns20.mel4.internode.on.net) has joined #haskell
2013-03-30 02:25:46	luite	replicateM 5
2013-03-30 02:25:57	monochrom	replicateM_ 5
2013-03-30 02:26:05	luite	oh good point about the _
2013-03-30 02:26:48	xpika	thankyou
2013-03-30 02:27:21	<--	aCube (~cubce@dslb-088-073-250-149.pools.arcor-ip.net) has quit (Quit: End of battery life.)
2013-03-30 02:27:26	xpika	another question, whats the easiest way to time a function in ghci?
2013-03-30 02:27:35	fryguybob	:set +s ?
2013-03-30 02:27:56	tgeeky	xpika: that is the easiest. A more scientific way is to use criterion.
2013-03-30 02:28:21	<--	shintah (bebble@h-123-169-173.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-03-30 02:28:33	tgeeky	s/scientific/statistical/
2013-03-30 02:29:04	<--	schlicht (~fl@g225052107.adsl.alicedsl.de) has quit (Ping timeout: 246 seconds)
2013-03-30 02:29:19	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-30 02:29:21	-->	lgas (4c7ebb87@gateway/web/freenode/ip.76.126.187.135) has joined #haskell
2013-03-30 02:29:26	<--	watermind (~wm@bl19-234-191.dsl.telepac.pt) has quit (Ping timeout: 255 seconds)
2013-03-30 02:32:18	<--	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-03-30 02:32:24	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-03-30 02:33:12	<--	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (Ping timeout: 252 seconds)
2013-03-30 02:33:52	<--	jkoshy (~jkoshy@117.204.51.184) has quit (Quit: jkoshy)
2013-03-30 02:34:06	<--	tew88 (~tew88@tew88.net) has quit (Ping timeout: 272 seconds)
2013-03-30 02:34:16	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-03-30 02:35:11	-->	v__ (~v@61.173.30.62) has joined #haskell
2013-03-30 02:35:19	<--	cognominal (~cognomina@37.161.238.27) has quit (Ping timeout: 264 seconds)
2013-03-30 02:35:44	-->	jkoshy (~jkoshy@117.204.51.184) has joined #haskell
2013-03-30 02:36:54	-->	watermind (~wm@2.80.234.191) has joined #haskell
2013-03-30 02:37:13	<--	astropirate (~astropira@unaffiliated/astropirate) has quit (Ping timeout: 245 seconds)
2013-03-30 02:37:29	<--	chatsiri_ (~chatsiri_@171.6.183.174) has quit (Ping timeout: 246 seconds)
2013-03-30 02:37:40	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-30 02:38:31	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-03-30 02:38:43	-->	llumac (~llumac@152.host-182-48-141.compassnet.co.nz) has joined #haskell
2013-03-30 02:38:47	--	pdxleif is now known as pdxleif_away
2013-03-30 02:39:48	-->	glguy (~textual@unaffiliated/glguy) has joined #haskell
2013-03-30 02:39:57	lgas	Hi, everyone.  I'm getting "cabal: No test suites enabled. Did you remember to configure with '--enable-tests'?", when I run "cabal test" but I did in fact remember, and it built them, and if I run them from dist/build/test-... they work fine... what am I missing?
2013-03-30 02:40:33	<--	v__ (~v@61.173.30.62) has quit (Ping timeout: 245 seconds)
2013-03-30 02:40:49	shachaf	lgas: You run: cabal configure --enable-tests; cabal build; cabal test ?
2013-03-30 02:41:02	llumac	Hi all, I was wondering if I could get a little help with a problem. Basically I've created two functions, halve which takes a list of ints and gives the first half and second half back as a list, and mix - which takes two sorted lists of ints and sorts them into one list. The problem is to use them together recursively to sort an unsorted list.
2013-03-30 02:41:16	-->	cognominal (~cognomina@37.161.238.27) has joined #haskell
2013-03-30 02:41:35	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-30 02:41:42	llumac	Any pointers would be much appreciated
2013-03-30 02:42:25	shachaf	llumac: Well, it might help to mention where you're having trouble.
2013-03-30 02:42:51	shachaf	(Isn't this the third mergesort we've had in the past few days?)
2013-03-30 02:43:48	lgas	shachaf: yes, I just ran exactly that and it ended with the message about "Did you remember ... --enable-tests"?
2013-03-30 02:43:56	<--	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has quit (Quit: Page closed)
2013-03-30 02:44:02	shachaf	OK.
2013-03-30 02:44:06	shachaf	Then I don't know what's going on.
2013-03-30 02:44:07	-->	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has joined #haskell
2013-03-30 02:44:14	shachaf	Maybe `cabal clean` and try again?
2013-03-30 02:44:23	<--	jkoshy (~jkoshy@117.204.51.184) has quit (Quit: jkoshy)
2013-03-30 02:44:27	<--	ncw (~ncw@host31-54-161-130.range31-54.btcentralplus.com) has quit (Remote host closed the connection)
2013-03-30 02:44:40	llumac	Sure! Basically I understand that if the list is empty, just return the empty list. And if the list has multiple entries you want to recursively halve them until you get single element lists then mix them together to form a sorted list. Does that sound right?
2013-03-30 02:45:06	llumac	I'm rather rusty on the synatax
2013-03-30 02:45:25	shachaf	(Is this homework?)
2013-03-30 02:45:39	llumac	Yes. I'm not asking for a solution, just guidance
2013-03-30 02:45:55	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-03-30 02:46:27	shachaf	What class, out of curisoosity?
2013-03-30 02:46:57	llumac	Programming languages
2013-03-30 02:47:03	shachaf	I mean, where?
2013-03-30 02:47:07	lgas	shachaf: hmm, I swear tried clean before but after trying it again I got errors about missing dependencies at the configure step ... which seems like a strange combination of behaviors to me, but at least I'm on to the next problem now, thanks :)
2013-03-30 02:47:17	shachaf	Anyway, it sounds like you're describing a workable algorithm.
2013-03-30 02:47:26	shachaf	What's the trouble with implementing it?
2013-03-30 02:47:54	shachaf	If you're rusty on the syntax then maybe you should spend some more time on it and come back to this. :-)
2013-03-30 02:48:15	<--	spookyfork (~true@bl18-218-233.dsl.telepac.pt) has quit (Quit: Leaving.)
2013-03-30 02:48:32	cmccann	llumac: you're not overlooking the fact that a 1-element list is always sorted, are you?
2013-03-30 02:49:31	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-03-30 02:50:05	monochrom	http://perl.plover.com/classes/OOPSLA/samples/slide061.html and onwards are pretty relevant
2013-03-30 02:50:06	cmccann	oh wait, you already mentioned that
2013-03-30 02:50:08	<--	cognominal (~cognomina@37.161.238.27) has quit (Ping timeout: 255 seconds)
2013-03-30 02:50:29	cmccann	llumac: it sounds like you pretty much have everything worked out?
2013-03-30 02:50:38	<--	joneshf-laptop (~joneshf@mail.concordusapps.com) has quit (Quit: Leaving)
2013-03-30 02:52:19	-->	astropirate (~astropira@unaffiliated/astropirate) has joined #haskell
2013-03-30 02:52:35	-->	v__ (~v@199.68.198.120) has joined #haskell
2013-03-30 02:52:36	lgas	ok now I'm getting this http://pastie.org/7167981 which says I'm missing these libraries but if I try to install them it says I already have them....
2013-03-30 02:53:05	lgas	and I've been stung by --reinstall before so I know that way madness lies
2013-03-30 02:53:19	<--	sambio (~sambio@190.57.227.109) has quit
2013-03-30 02:53:25	llumac	I think I'm close, maybe I just need to muscle it out. I think jsut voicing my problem has helped a lot. Thanls everyone, I'll give it another go and I'll let you know how I go
2013-03-30 02:53:32	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-30 02:54:03	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Ping timeout: 260 seconds)
2013-03-30 02:54:13	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-03-30 02:54:31	monochrom	does "cabal configure" see the same package database as "cabal-dev" does?
2013-03-30 02:54:43	monochrom	I mean, likely no.
2013-03-30 02:54:59	-->	cognominal (~cognomina@37.161.238.27) has joined #haskell
2013-03-30 02:55:18	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-03-30 02:55:39	monochrom	I mean, you call it "sandbox" because it is normally invisible
2013-03-30 02:55:56	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-30 02:56:12	lgas	ah
2013-03-30 02:56:32	<--	BigTom (~bigtom@225.91-246-213.ippool.namesco.net) has quit (Remote host closed the connection)
2013-03-30 02:57:01	<--	obcode_ (~obcode@ob.cs.hm.edu) has quit (Remote host closed the connection)
2013-03-30 02:57:06	lgas	Yeah, that should be cabal-dev configure, I just fat fingered that.  Usually I am running it out of a makefile instead of the command line which avoids that problem.  Thanks monochrom.
2013-03-30 02:57:48	<--	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 264 seconds)
2013-03-30 02:57:50	lgas	oh but now I'm back to my original problem which is that it builds the tests and I can run them out of dist/ just fine but 'cabal test' still fails
2013-03-30 02:58:00	-->	ecuderpam (rjclarkson@nat/google/x-ywlctlqtyghmayts) has joined #haskell
2013-03-30 02:58:15	<--	kyagrd (~kyagrd@ip-64-134-128-60.public.wayport.net) has quit (Ping timeout: 260 seconds)
2013-03-30 02:58:45	-->	rs234 (~rs234@89.137.4.235) has joined #haskell
2013-03-30 02:59:17	monochrom	do you think "cabal-dev test" works better?
2013-03-30 02:59:22	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-03-30 03:00:02	lgas	I am using 'cabal-dev test'
2013-03-30 03:00:08	lgas	I went back to the makefile this time to be sure
2013-03-30 03:00:37	monochrom	then I don't know
2013-03-30 03:00:41	lgas	this is the Makefile if it helps: https://github.com/lgastako/aldus/blob/master/Makefile
2013-03-30 03:01:22	lgas	and making the "full" target results in everything being built but then the "cabal-dev test" command to fail
2013-03-30 03:01:27	llumac	Huzzah! I cracked it! Thanks everyone. That merge sort link helped me so much.
2013-03-30 03:01:27	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit
2013-03-30 03:01:48	<--	cognominal (~cognomina@37.161.238.27) has quit (Ping timeout: 252 seconds)
2013-03-30 03:01:50	--	ozataman_ is now known as ozataman
2013-03-30 03:02:05	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-30 03:02:32	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-03-30 03:02:32	<--	sven_ (3ff5db96@gateway/web/freenode/ip.63.245.219.150) has quit (Ping timeout: 245 seconds)
2013-03-30 03:02:40	monochrom	haha
2013-03-30 03:02:52	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-30 03:02:53	<--	Tharugrim (~Tharugrim@194-166-78-49.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-03-30 03:03:55	<--	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-30 03:04:13	-->	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has joined #haskell
2013-03-30 03:04:16	-->	eirikur (~eirikur@nova093-255.cust.nova.is) has joined #haskell
2013-03-30 03:06:10	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Client Quit)
2013-03-30 03:06:22	-->	jkoshy (~jkoshy@117.204.51.184) has joined #haskell
2013-03-30 03:07:38	<--	nooodl (~nooodl@91.179.149.218) has quit (Ping timeout: 245 seconds)
2013-03-30 03:07:51	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-30 03:08:37	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Client Quit)
2013-03-30 03:09:39	-->	cognominal (~cognomina@37.161.160.131) has joined #haskell
2013-03-30 03:09:55	-->	JoeyA (~joeyadams@199.168.196.156) has joined #haskell
2013-03-30 03:11:19	-->	eirikur_ (~eirikur@nova093-255.cust.nova.is) has joined #haskell
2013-03-30 03:11:19	<--	eirikur (~eirikur@nova093-255.cust.nova.is) has quit (Read error: Connection reset by peer)
2013-03-30 03:12:05	<--	julmae (~MAXHARRIE@q186.ip4.netikka.fi) has quit (Ping timeout: 256 seconds)
2013-03-30 03:13:31	-->	kevinqcs (~turing@183.209.140.29) has joined #haskell
2013-03-30 03:14:11	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-03-30 03:14:27	<--	QinGW (~yaaic@27.128.33.149) has quit (Ping timeout: 252 seconds)
2013-03-30 03:14:38	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-30 03:14:47	-->	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has joined #haskell
2013-03-30 03:15:07	<--	homo_vitruvius (~mavvam@pool-108-17-82-218.pitbpa.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-30 03:16:50	<--	Urchin[emacs] (~user@unaffiliated/urchin) has quit (Remote host closed the connection)
2013-03-30 03:17:00	<--	jkoshy (~jkoshy@117.204.51.184) has quit (Quit: jkoshy)
2013-03-30 03:17:32	<--	TallerGhostWalt (62bfc0a9@gateway/web/freenode/ip.98.191.192.169) has quit (Ping timeout: 245 seconds)
2013-03-30 03:17:49	<--	black_joe (~Norton@pool-72-73-249-210.cmdnnj.east.verizon.net) has quit (Quit: Lost terminal)
2013-03-30 03:20:29	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: brb)
2013-03-30 03:21:47	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-03-30 03:22:32	<--	eirikur_ (~eirikur@nova093-255.cust.nova.is) has quit (Remote host closed the connection)
2013-03-30 03:22:33	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-03-30 03:23:30	sproingie	even with cabal-dev i get a lot of "this will break existing packages" refusal to install
2013-03-30 03:24:02	<--	maksbotan (~quassel@gentoo/developer/maksbotan) has quit (Ping timeout: 246 seconds)
2013-03-30 03:25:12	-->	maksbotan (~quassel@2a00:11d8:503:858c:226:9eff:fe21:2763) has joined #haskell
2013-03-30 03:25:12	<--	maksbotan (~quassel@2a00:11d8:503:858c:226:9eff:fe21:2763) has quit (Changing host)
2013-03-30 03:25:12	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-03-30 03:28:07	<--	k00mi_ (~koomi@dslb-094-217-029-213.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-30 03:28:10	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-03-30 03:28:16	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-03-30 03:28:39	<--	DanBurton (~DanBurton@204-16-157-170-static.ipnetworksinc.net) has quit (Remote host closed the connection)
2013-03-30 03:30:20	monochrom	because, at the end of the day, cabal-dev just calls cabal with more flags
2013-03-30 03:30:57	sproingie	ayep.  sandboxing really needs to be built in to cabal-install itself
2013-03-30 03:31:29	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Quit: Lost terminal)
2013-03-30 03:31:41	-->	charliesome (~textual@124-148-171-93.dyn.iinet.net.au) has joined #haskell
2013-03-30 03:32:35	<--	Xaratas (~UserNick@brln-4dbaa32b.pool.mediaWays.net) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-03-30 03:33:06	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-30 03:33:21	-->	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-03-30 03:36:31	<--	cognominal (~cognomina@37.161.160.131) has quit (Ping timeout: 260 seconds)
2013-03-30 03:37:07	<--	lgas (4c7ebb87@gateway/web/freenode/ip.76.126.187.135) has quit (Ping timeout: 245 seconds)
2013-03-30 03:37:37	-->	yc4891 (~andrew@112.96.162.87) has joined #haskell
2013-03-30 03:37:40	-->	gertc (~gert@226.105-64-87.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-03-30 03:39:48	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-30 03:40:20	JoeyA	I wrote a package for wrapping a connection in an STM interface; anyone want to critique it?  http://joeyadams.github.com/hs-stm-connection/doc/Control-Concurrent-STM-Connection.html
2013-03-30 03:40:43	-->	jkoshy (~jkoshy@117.204.51.184) has joined #haskell
2013-03-30 03:40:48	--	[[zzz]] is now known as [[zz]]
2013-03-30 03:41:45	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-03-30 03:41:48	-->	paintcan (~user@108.162.180.237) has joined #haskell
2013-03-30 03:42:14	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-03-30 03:42:35	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-03-30 03:42:53	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-30 03:43:24	JoeyA	It works by doing the I/O in forked threads, using bounded channels to pass messages.
2013-03-30 03:44:02	-->	birch__ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has joined #haskell
2013-03-30 03:44:21	<--	apaku (~apaku@hmbg-4d06eaa6.pool.mediaWays.net) has quit (Ping timeout: 248 seconds)
2013-03-30 03:44:57	-->	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-30 03:46:10	-->	noam_ (~noam@213.57.201.130) has joined #haskell
2013-03-30 03:46:17	-->	User_ (User@bzq-109-64-163-95.red.bezeqint.net) has joined #haskell
2013-03-30 03:46:21	-->	Heero` (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has joined #haskell
2013-03-30 03:46:28	-->	qzr_ (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 03:46:44	-->	shachaf_ (~shachaf@li227-219.members.linode.com) has joined #haskell
2013-03-30 03:46:46	-->	cognominal (~cognomina@37.161.95.146) has joined #haskell
2013-03-30 03:46:47	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 03:46:51	<--	shachaf_ (~shachaf@li227-219.members.linode.com) has quit (Changing host)
2013-03-30 03:46:51	-->	shachaf_ (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-03-30 03:47:02	-->	cwraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-03-30 03:47:07	-->	apaku (~apaku@hmbg-5f76ad90.pool.mediaWays.net) has joined #haskell
2013-03-30 03:47:13	<--	shachaf (~shachaf@unaffiliated/shachaf) has quit (Disconnected by services)
2013-03-30 03:47:18	--	shachaf_ is now known as shachaf
2013-03-30 03:47:32	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-03-30 03:47:42	-->	jeff_s2 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has joined #haskell
2013-03-30 03:48:00	-->	bergey` (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-03-30 03:48:23	-->	Tesseraction_a (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-03-30 03:48:33	-->	mattrepl_ (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-03-30 03:48:47	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-30 03:49:10	-->	ttuegel (~quassel@172-2-80-62.lightspeed.dctril.sbcglobal.net) has joined #haskell
2013-03-30 03:49:11	-->	seafood_ (~seafood@sseefried.syd.nicta.com.au) has joined #haskell
2013-03-30 03:50:01	-->	EvanR_ (~erinehart@208.117.200.94) has joined #haskell
2013-03-30 03:50:20	-->	timtom1 (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has joined #haskell
2013-03-30 03:50:34	-->	Eliel (~jojkaart@dyn79-415.yok.fi) has joined #haskell
2013-03-30 03:50:42	-->	jix (~jix@jixco.de) has joined #haskell
2013-03-30 03:51:08	-->	xpika_ (~jrg@1.153.206.1) has joined #haskell
2013-03-30 03:51:10	-->	alshain_ (~alshain@124-171.1-85.cust.bluewin.ch) has joined #haskell
2013-03-30 03:51:16	-->	cognominal__ (~cognomina@37.160.58.244) has joined #haskell
2013-03-30 03:51:28	-->	armlessh1bo (~ahobo@32.97.110.52) has joined #haskell
2013-03-30 03:51:29	<--	cognominal (~cognomina@37.161.95.146) has quit (Ping timeout: 256 seconds)
2013-03-30 03:51:30	-->	Clint_ (~Clint@thumb.scru.org) has joined #haskell
2013-03-30 03:51:31	-->	DigitalK1wi (~kiwi@ip174-74-81-77.om.om.cox.net) has joined #haskell
2013-03-30 03:51:33	-->	tippenei1 (~bo@199.195.252.184) has joined #haskell
2013-03-30 03:51:33	-->	chenwl (d20dd3da@gateway/web/freenode/ip.210.13.211.218) has joined #haskell
2013-03-30 03:51:38	xpika_	is there anyway to execute a script into ghci that exposes bindings that contain the results of IO?
2013-03-30 03:51:40	-->	kallisti_ (~eris@168.28.136.16) has joined #haskell
2013-03-30 03:51:43	-->	bytbox_ (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-03-30 03:51:44	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-03-30 03:51:56	-->	xinming (~xinming@113.248.109.24) has joined #haskell
2013-03-30 03:52:26	-->	tensorpuddin (~tensorpud@108.87.19.193) has joined #haskell
2013-03-30 03:52:41	-->	serialorder (~serialord@c-68-55-227-229.hsd1.md.comcast.net) has joined #haskell
2013-03-30 03:52:50	chenwl	cabal unpack http://well-typed.com/blog/aux/files/cloud-demos.tar.gz && cd distributed-process-demos-0.1.0.0 && cabal configure && cabal build
2013-03-30 03:53:05	chenwl	cabal: Package distributed-process-demos-0.1.0.0 can't be built on this system.
2013-03-30 03:53:22	chenwl	cabal install
2013-03-30 03:53:28	chenwl	cabal: The following packages are likely to be broken by the reinstalls: regex-posix-0.95.1 Use --force-reinstalls if you want to install anyway.
2013-03-30 03:53:45	chenwl	what's wrong?
2013-03-30 03:53:46	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-03-30 03:54:03	chenwl	I cannot build the demo from http://www.well-typed.com/blog/71
2013-03-30 03:54:13	-->	osnr_ (~osnr@corn06.Stanford.EDU) has joined #haskell
2013-03-30 03:54:37	-->	sanemat (~sanemat@12.208.138.210.vmobile.jp) has joined #haskell
2013-03-30 03:54:51	<--	Clint (~Clint@libre.fm/hacker/clint) has quit (Disconnected by services)
2013-03-30 03:54:55	--	Clint_ is now known as Clint
2013-03-30 03:54:58	-->	Valodim_ (~Valodim@mail.mugenguild.com) has joined #haskell
2013-03-30 03:55:03	-->	mechairo` (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-03-30 03:55:07	<--	xinming_ (~xinming@113.248.118.149) has quit (Ping timeout: 264 seconds)
2013-03-30 03:55:08	<--	tensorpudding (~tensorpud@99.102.68.87) has quit (Ping timeout: 245 seconds)
2013-03-30 03:55:08	--	tensorpuddin is now known as tensorpudding
2013-03-30 03:55:37	<--	Clint (~Clint@thumb.scru.org) has quit (Changing host)
2013-03-30 03:55:38	-->	Clint (~Clint@libre.fm/hacker/clint) has joined #haskell
2013-03-30 03:55:54	<--	tomboy64 (~tomboy@unaffiliated/tomboy64) has quit (Client Quit)
2013-03-30 03:55:58	<--	maksbotan (~quassel@gentoo/developer/maksbotan) has quit (*.net *.split)
2013-03-30 03:55:58	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (*.net *.split)
2013-03-30 03:55:58	<--	xpika (~jrg@1.153.206.1) has quit (*.net *.split)
2013-03-30 03:55:58	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	timtom (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has quit (*.net *.split)
2013-03-30 03:55:58	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (*.net *.split)
2013-03-30 03:55:58	<--	[[zz]] (~q@node-6pr.pool-125-25.dynamic.totbb.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (*.net *.split)
2013-03-30 03:55:58	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	DigitalKiwi (~kiwi@ip174-74-81-77.om.om.cox.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Heero (~Heero@unaffiliated/heero) has quit (*.net *.split)
2013-03-30 03:55:58	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	VZakharov (~vovka@placenta.corbina.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	_br_ (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has quit (*.net *.split)
2013-03-30 03:55:58	<--	seafood (~seafood@sseefried.syd.nicta.com.au) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Testos (User@bzq-109-64-163-95.red.bezeqint.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	frio (~frio@p167.pool2.staticadsl.iconz.net.nz) has quit (*.net *.split)
2013-03-30 03:55:58	<--	domingo (~ec2-user@ec2-107-20-87-164.compute-1.amazonaws.com) has quit (*.net *.split)
2013-03-30 03:55:58	<--	majoh (~Sponge_Bo@antiklimax.se) has quit (*.net *.split)
2013-03-30 03:55:58	<--	armlesshobo (~ahobo@32.97.110.52) has quit (*.net *.split)
2013-03-30 03:55:58	<--	ocharles (~ocharles@musicbrainz/user/ocharles) has quit (*.net *.split)
2013-03-30 03:55:58	<--	tippenein (~bo@199.195.252.184) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Eliel_ (~jojkaart@dyn79-415.yok.fi) has quit (*.net *.split)
2013-03-30 03:55:58	<--	jix_ (~jix@jixco.de) has quit (*.net *.split)
2013-03-30 03:55:58	<--	ttuegel_ (~quassel@172-2-80-62.lightspeed.dctril.sbcglobal.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	alshain (~alshain@124-171.1-85.cust.bluewin.ch) has quit (*.net *.split)
2013-03-30 03:55:58	<--	bergey (~user@ip-66-80-90-109.iad.megapath.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (*.net *.split)
2013-03-30 03:55:58	<--	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has quit (*.net *.split)
2013-03-30 03:55:58	<--	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has quit (*.net *.split)
2013-03-30 03:55:58	<--	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	noam (~noam@213.57.201.130) has quit (*.net *.split)
2013-03-30 03:55:58	<--	EvanR (~erinehart@unaffiliated/evanr) has quit (*.net *.split)
2013-03-30 03:55:58	<--	rfw (~rfw@thor.rfw.name) has quit (*.net *.split)
2013-03-30 03:55:58	<--	osnr (~osnr@unaffiliated/osnr) has quit (*.net *.split)
2013-03-30 03:55:58	<--	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has quit (*.net *.split)
2013-03-30 03:55:58	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-03-30 03:55:59	--	Valodim_ is now known as Valodim
2013-03-30 03:55:59	--	mattrepl_ is now known as mattrepl
2013-03-30 03:55:59	--	seafood_ is now known as seafood
2013-03-30 03:56:00	--	alshain_ is now known as alshain
2013-03-30 03:56:26	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-03-30 03:56:29	<--	rs234 (~rs234@89.137.4.235) has quit (Read error: Connection reset by peer)
2013-03-30 03:56:45	-->	ocharles- (~ocharles@li452-125.members.linode.com) has joined #haskell
2013-03-30 03:56:50	-->	domingo (~ec2-user@ec2-107-20-87-164.compute-1.amazonaws.com) has joined #haskell
2013-03-30 03:56:58	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-30 03:58:09	-->	_br_- (~bjoern_fr@static.88-198-57-152.clients.your-server.de) has joined #haskell
2013-03-30 03:59:26	<--	hsc (~hsc@c-24-18-240-154.hsd1.wa.comcast.net) has quit (Ping timeout: 255 seconds)
2013-03-30 03:59:36	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 264 seconds)
2013-03-30 03:59:41	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Quit: Leaving)
2013-03-30 04:00:11	-->	rfw (~rfw@thor.rfw.name) has joined #haskell
2013-03-30 04:00:11	-->	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has joined #haskell
2013-03-30 04:00:11	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-03-30 04:00:11	-->	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-03-30 04:00:11	-->	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has joined #haskell
2013-03-30 04:00:11	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-03-30 04:00:25	-->	MetaCosm_ (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-03-30 04:00:34	<--	cognominal__ (~cognomina@37.160.58.244) has quit (Ping timeout: 256 seconds)
2013-03-30 04:01:06	CodeDmitry	Why so much ddos?
2013-03-30 04:01:53	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2013-03-30 04:01:58	--	MetaCosm_ is now known as MetaCosm
2013-03-30 04:02:11	--	tippenei1 is now known as tippenein
2013-03-30 04:02:16	<--	mastensg (mastensg@dalvik.ping.uio.no) has left #haskell
2013-03-30 04:02:20	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-03-30 04:02:32	-->	majoh (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-03-30 04:02:42	parcs	JoeyA: neat. i think there should be an exception-safe 'withConnection' handler that opens and closes the for you
2013-03-30 04:02:42	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-03-30 04:02:55	-->	frio (~frio@p167.pool2.staticadsl.iconz.net.nz) has joined #haskell
2013-03-30 04:02:59	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-30 04:03:02	-->	kyagrd (~kyagrd@97.65.99.94) has joined #haskell
2013-03-30 04:03:22	-->	[[zz]] (~q@node-6pr.pool-125-25.dynamic.totbb.net) has joined #haskell
2013-03-30 04:03:25	-->	pranavrc (~pranavrc@122.164.157.83) has joined #haskell
2013-03-30 04:03:25	<--	pranavrc (~pranavrc@122.164.157.83) has quit (Changing host)
2013-03-30 04:03:25	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-30 04:03:31	-->	hajimeho_ (~hajimehos@209.118.182.66) has joined #haskell
2013-03-30 04:03:34	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Read error: Connection reset by peer)
2013-03-30 04:03:42	-->	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has joined #haskell
2013-03-30 04:04:44	JoeyA	parcs: Can't the caller do that with bracket?
2013-03-30 04:04:56	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-30 04:05:00	JoeyA	withConnection = bracket (new config backend) close
2013-03-30 04:05:30	JoeyA	err, withConnection config backend = bracket (new config backend) close
2013-03-30 04:06:20	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-30 04:10:13	-->	mgile (~mgile@c-67-190-131-241.hsd1.co.comcast.net) has joined #haskell
2013-03-30 04:11:48	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-03-30 04:11:58	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-03-30 04:12:04	<--	birch__ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has quit (Quit: Leaving)
2013-03-30 04:12:39	<--	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has quit (Quit: Leaving)
2013-03-30 04:13:32	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-03-30 04:13:41	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 248 seconds)
2013-03-30 04:14:08	-->	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has joined #haskell
2013-03-30 04:14:44	--	preflex_ is now known as preflex
2013-03-30 04:15:19	<--	descender (~kaixiong@cm148.omega155.maxonline.com.sg) has quit (Quit: int main() { return *(int*)0; })
2013-03-30 04:15:35	-->	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has joined #haskell
2013-03-30 04:15:52	-->	trescenzi (~trescenzi@2620:91:0:163:f9b7:27c5:b3bf:47e7) has joined #haskell
2013-03-30 04:16:24	<--	sanemat (~sanemat@12.208.138.210.vmobile.jp) has quit (Remote host closed the connection)
2013-03-30 04:16:52	-->	frsoares (~frsoares@189.1.19.70) has joined #haskell
2013-03-30 04:17:19	<--	watermind (~wm@2.80.234.191) has quit (Ping timeout: 264 seconds)
2013-03-30 04:17:51	<--	serialorder (~serialord@c-68-55-227-229.hsd1.md.comcast.net) has quit (Quit: Leaving)
2013-03-30 04:17:56	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Read error: Connection reset by peer)
2013-03-30 04:17:56	<--	sawjig (~sawjig@gateway/tor-sasl/sawjig) has quit (Remote host closed the connection)
2013-03-30 04:17:56	<--	vifanq (~vifanq@gateway/tor-sasl/vifanq) has quit (Write error: Broken pipe)
2013-03-30 04:18:04	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-03-30 04:18:17	<--	mgile (~mgile@c-67-190-131-241.hsd1.co.comcast.net) has quit (Quit: Parting is such sweet sorrow...)
2013-03-30 04:18:21	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-03-30 04:19:05	-->	sawjig (~sawjig@gateway/tor-sasl/sawjig) has joined #haskell
2013-03-30 04:19:06	parcs	yeah, never mind. since there are multiple ways to close a connection it's probably best to omit such a function
2013-03-30 04:19:41	<--	timtom1 (~Thunderbi@dyn1222-94.wlan.ic.ac.uk) has quit (Ping timeout: 255 seconds)
2013-03-30 04:20:19	<--	trescenzi (~trescenzi@2620:91:0:163:f9b7:27c5:b3bf:47e7) has quit (Ping timeout: 264 seconds)
2013-03-30 04:20:26	JoeyA	parcs: actually, 'close' is the only way to close it completely (including freeing the underlying resource).  Unless you count GC.
2013-03-30 04:20:45	<--	stephenjudkins (~textual@c-67-189-34-121.hsd1.or.comcast.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-30 04:20:46	-->	Duffers (~Duffers@host109-150-71-111.range109-150.btcentralplus.com) has joined #haskell
2013-03-30 04:20:52	<--	sw2wolf (~czsq888@171.217.2.51) has quit (Remote host closed the connection)
2013-03-30 04:21:03	JoeyA	even if you call 'bye', you still need to call 'close'.
2013-03-30 04:21:55	-->	descender (~heh@cm148.omega155.maxonline.com.sg) has joined #haskell
2013-03-30 04:22:39	<--	Eduard_Munteanu (~Eduard_Mu@188.25.92.97) has quit (Ping timeout: 252 seconds)
2013-03-30 04:23:13	JoeyA	I wonder if the connection should automatically close itself when there is no more data to send or receive (i.e. the user called 'bye', and ).
2013-03-30 04:23:21	JoeyA	'recv' returned Nothing
2013-03-30 04:27:43	pharaun	JoeyA: this looks like its being treated like a queue of things to send
2013-03-30 04:27:59	<--	Duffers (~Duffers@host109-150-71-111.range109-150.btcentralplus.com) has quit (Quit: leaving)
2013-03-30 04:28:02	pharaun	i wonder how hard it would be to rate-limit how fast you send things?
2013-03-30 04:29:06	JoeyA	pharaun: I didn't have that feature in mind, but you can do that by making backendRecv and backendSend do their own rate limiting.
2013-03-30 04:29:26	JoeyA	My application uses timeouts, but I didn't explicitly include support for those either.
2013-03-30 04:29:38	pharaun	JoeyA: sweet
2013-03-30 04:29:59	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-30 04:30:02	JoeyA	The issue with timeouts (this probably applies to rate limiting, too) is that it doesn't operate on the underlying byte sends.
2013-03-30 04:30:02	pharaun	yeah i can do that in the backend, looks like i can just have it block till its ready to send the next message and then it'll go fetch that
2013-03-30 04:30:14	-->	vifanq (~vifanq@gateway/tor-sasl/vifanq) has joined #haskell
2013-03-30 04:30:21	JoeyA	You usually want the backend methods to parse and unparse messages.
2013-03-30 04:30:43	pharaun	my parsing is kinda big :)
2013-03-30 04:30:55	pharaun	but yeah i could see doing that
2013-03-30 04:30:56	JoeyA	If your message type is ByteString, calling recv over and over to read a really message will deadlock if you do it all in one transaction.
2013-03-30 04:31:00	JoeyA	really big message*
2013-03-30 04:31:07	-->	tew88 (~tew88@tew88.net) has joined #haskell
2013-03-30 04:31:08	<--	luisgabriel (~luisgabri@177.158.98.48) has quit (Quit: Konversation terminated!)
2013-03-30 04:31:19	<--	gertc (~gert@226.105-64-87.adsl-dyn.isp.belgacom.be) has quit (Quit: leaving)
2013-03-30 04:31:44	<--	Philippa (~user@cpc4-clif10-2-0-cust380.12-4.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-03-30 04:31:52	JoeyA	My original plan was to just make send and recv operate on ByteString chunks, but then I realized that.
2013-03-30 04:32:08	<--	qzr_ (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-03-30 04:32:17	<--	kallisti_ (~eris@168.28.136.16) has quit (Ping timeout: 255 seconds)
2013-03-30 04:33:13	<--	guampa (~guampa@unaffiliated/guampa) has quit
2013-03-30 04:33:25	pharaun	ah
2013-03-30 04:33:55	<--	hiratara (~hiratara@i217114.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 260 seconds)
2013-03-30 04:34:00	pharaun	hmm depending, it might work out better for my app to have the parsing being taken care in the backend
2013-03-30 04:34:04	pharaun	i'll have to play with this a little
2013-03-30 04:34:12	<--	chenwl (d20dd3da@gateway/web/freenode/ip.210.13.211.218) has quit (Ping timeout: 245 seconds)
2013-03-30 04:34:13	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 240 seconds)
2013-03-30 04:34:26	JoeyA	https://github.com/joeyadams/hs-stm-connection
2013-03-30 04:34:40	JoeyA	Let me know how it works out.
2013-03-30 04:34:57	pharaun	will do :) probably won't get to work on it right away but it looks like something i can make good use of :D
2013-03-30 04:35:09	pharaun	i am working on a network library api for a service
2013-03-30 04:35:16	-->	Philippa (~user@cpc4-clif10-2-0-cust380.12-4.cable.virginmedia.com) has joined #haskell
2013-03-30 04:36:03	JoeyA	You might consider implementing backend combinators (like rate limiting) with the io-streams package.
2013-03-30 04:36:11	-->	zachk (~hask@unaffiliated/zachk) has joined #haskell
2013-03-30 04:36:29	pharaun	http://hackage.haskell.org/package/io-streams ?
2013-03-30 04:36:32	JoeyA	Yes
2013-03-30 04:36:33	<--	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-03-30 04:37:38	JoeyA	Then turn a pair of io-streams into a Backend using io-streams read and write.
2013-03-30 04:37:53	-->	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has joined #haskell
2013-03-30 04:38:04	JoeyA	Connection isn't itself an io-stream, though, since I didn't implement an unRecv (but I easily could).
2013-03-30 04:38:29	pharaun	since i'm not familiar with io-streams library yet, what's an unRecv?
2013-03-30 04:38:36	JoeyA	It puts back leftovers.
2013-03-30 04:38:40	pharaun	ah
2013-03-30 04:39:02	pharaun	so i can process what i can, then oh i still got some stuff that i can't do anything with yet, i can put it back till next time i loop over to process some more
2013-03-30 04:39:14	JoeyA	Right.
2013-03-30 04:39:37	pharaun	wfm, i've used the conduit packages before
2013-03-30 04:39:43	JoeyA	For example, if you're using the cereal package to serialize/unserialize binary-encoded messages, you can use runGetPartial to parse incrementally.
2013-03-30 04:40:15	JoeyA	When parsing finishes, it returns unused bytes, which you'll want to feed to the subsequent parse.
2013-03-30 04:40:31	-->	hiratara (~hiratara@h220138.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-30 04:41:07	JoeyA	pharaun: I haven't used io-streams myself yet.  It was released very recently.
2013-03-30 04:41:51	JoeyA	I recommended it because it works with plain IO types, so it's easy to turn a pair of streams into a Backend.
2013-03-30 04:42:13	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Ping timeout: 245 seconds)
2013-03-30 04:42:30	<--	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has quit (Quit: Leaving)
2013-03-30 04:42:31	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-03-30 04:43:02	-->	no-n (~no-n@38.241.69.111.dynamic.snap.net.nz) has joined #haskell
2013-03-30 04:43:15	<--	zachk (~hask@unaffiliated/zachk) has quit (Ping timeout: 260 seconds)
2013-03-30 04:43:48	pharaun	aha nice
2013-03-30 04:44:03	pharaun	yeah that's a bonus cos my current interface is just a rough wrap around the normal network api
2013-03-30 04:44:18	pharaun	so yeah this and the io-stream would be pretty easy to incorporate in
2013-03-30 04:46:20	<--	descender (~heh@cm148.omega155.maxonline.com.sg) has quit (Remote host closed the connection)
2013-03-30 04:48:39	-->	Duffers (~Duffers@host109-150-71-111.range109-150.btcentralplus.com) has joined #haskell
2013-03-30 04:48:40	-->	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has joined #haskell
2013-03-30 04:48:59	<--	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has quit (Quit: adu_)
2013-03-30 04:51:14	<--	corruptmemory (~jim@ool-18bbd5b2.static.optonline.net) has quit (Ping timeout: 258 seconds)
2013-03-30 04:52:04	slack1256	I found this in XMonad 'class Typeable a => Message a'
2013-03-30 04:52:14	slack1256	that's it
2013-03-30 04:52:30	JoeyA	slack1256: any instances?
2013-03-30 04:53:05	slack1256	no method, instances are 'Event, SomeMessage' etc
2013-03-30 04:53:09	shachaf	What is the problem?
2013-03-30 04:53:11	JoeyA	That makes sense.  It just requires that you explicitly say instance Message Foo, rather than automatically making all Typeable instances be messages.
2013-03-30 04:53:24	slack1256	but they just do 'instance Message Event'
2013-03-30 04:53:27	JoeyA	So you don't accidentally try to send an 'Int'.
2013-03-30 04:53:31	<--	Duffers (~Duffers@host109-150-71-111.range109-150.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-03-30 04:53:44	slack1256	oh
2013-03-30 04:53:45	JoeyA	or a Chan.  Or a function.
2013-03-30 04:53:48	slack1256	I see
2013-03-30 04:54:08	slack1256	This is the analogous of newtypes for classes
2013-03-30 04:54:09	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 245 seconds)
2013-03-30 04:54:40	slack1256	thanks JoeyA
2013-03-30 04:56:47	--	stelleg is now known as stelleg_away
2013-03-30 04:58:39	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Quit: leaving)
2013-03-30 04:59:20	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 04:59:21	-->	zachk (~hask@pool-96-249-52-59.syrcny.east.verizon.net) has joined #haskell
2013-03-30 05:00:09	<--	slack1256 (~slack@181-160-203-193.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-03-30 05:01:33	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-30 05:02:31	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 05:02:39	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Read error: Connection reset by peer)
2013-03-30 05:03:01	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 05:05:51	<--	paintcan (~user@108.162.180.237) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-30 05:06:29	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-03-30 05:07:38	<--	zachk (~hask@pool-96-249-52-59.syrcny.east.verizon.net) has quit (Ping timeout: 245 seconds)
2013-03-30 05:08:44	-->	znode (~znode@61.237.225.226) has joined #haskell
2013-03-30 05:09:16	<--	vifanq (~vifanq@gateway/tor-sasl/vifanq) has quit (Remote host closed the connection)
2013-03-30 05:10:01	<--	znode (~znode@61.237.225.226) has quit (Remote host closed the connection)
2013-03-30 05:10:54	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-30 05:11:05	-->	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has joined #haskell
2013-03-30 05:11:34	<--	astropirate (~astropira@unaffiliated/astropirate) has quit (Remote host closed the connection)
2013-03-30 05:11:44	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 260 seconds)
2013-03-30 05:11:56	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Remote host closed the connection)
2013-03-30 05:12:24	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Quit: Lost terminal)
2013-03-30 05:14:32	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-30 05:14:51	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-03-30 05:16:00	<--	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has quit (Ping timeout: 252 seconds)
2013-03-30 05:19:30	<--	otto_s_ (~user@cotb-4d05beff.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-03-30 05:20:28	<--	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-30 05:20:51	-->	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has joined #haskell
2013-03-30 05:20:58	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-03-30 05:21:53	<--	yc4891 (~andrew@112.96.162.87) has quit (Ping timeout: 240 seconds)
2013-03-30 05:22:56	-->	otto_s (~user@cotb-4db349ae.pool.mediaWays.net) has joined #haskell
2013-03-30 05:23:14	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-30 05:24:10	-->	yc4891 (~andrew@121.14.98.46) has joined #haskell
2013-03-30 05:24:43	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-03-30 05:24:56	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-03-30 05:25:31	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-30 05:28:11	-->	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has joined #haskell
2013-03-30 05:28:16	<--	kith (~kith@unaffiliated/kith) has quit (Read error: Operation timed out)
2013-03-30 05:28:19	-->	kith_ (~kith@unaffiliated/kith) has joined #haskell
2013-03-30 05:28:19	<--	kmrhb (~kmrhb@dsl-216-221-34-54.mtl.aei.ca) has quit (Quit: kmrhb)
2013-03-30 05:28:41	-->	sw2wolf (~czsq888@171.217.2.51) has joined #haskell
2013-03-30 05:28:53	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 240 seconds)
2013-03-30 05:29:00	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-30 05:30:08	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 245 seconds)
2013-03-30 05:30:23	<--	nule_ (~quassel@adsl-99-102-193-59.dsl.bcvloh.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-03-30 05:30:23	<--	scooty-puff (~andy@65-128-157-133.mpls.qwest.net) has quit (Remote host closed the connection)
2013-03-30 05:32:44	-->	flippo (~frivol@unaffiliated/flippo) has joined #haskell
2013-03-30 05:33:53	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-03-30 05:34:39	-->	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has joined #haskell
2013-03-30 05:34:39	<--	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has quit (Changing host)
2013-03-30 05:34:39	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-30 05:35:17	copumpkin	it'd be nice if haskell had a CleverMonad do notation, where CleverMonad takes maximal applicative subsets, tuples them up, and then makes a single bind
2013-03-30 05:35:26	copumpkin	or something like that :)
2013-03-30 05:35:46	copumpkin	so if I write do x <- foo; y <- bar; z <- bz; case x + y - z of _ -> ...
2013-03-30 05:35:58	copumpkin	it'd pile the x y z into one unit
2013-03-30 05:35:58	<--	BobFunk (~mbc@24.130.34.248) has quit (Ping timeout: 245 seconds)
2013-03-30 05:36:45	<--	centrinia (~exc@adsl-184-36-97-142.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-03-30 05:37:05	shachaf	This is even more extreme than your last proposal!
2013-03-30 05:37:06	elliott	it was pointed out that list comprehensions make pretty decent applicative notation
2013-03-30 05:37:10	elliott	sinec they already have the free "return"
2013-03-30 05:37:18	elliott	you just need to make sure the bindings don't mention each other
2013-03-30 05:37:19	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Quit: Leaving)
2013-03-30 05:37:22	shachaf	Pointed out by me, last time copumpkin was talking about all this.
2013-03-30 05:37:45	copumpkin	shachaf: which was that?
2013-03-30 05:37:46	shachaf	In fact the "zip comprehension" notation doesn't even allow (>>=)s.
2013-03-30 05:38:12	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 05:38:21	copumpkin	anyway, the monad laws mean that my transformation is safe
2013-03-30 05:38:32	copumpkin	and would allow much more interesting static analysis in some cases
2013-03-30 05:38:35	shachaf	copumpkin: http://www.haskell.org/pipermail/haskell-cafe/2011-September/095120.html
2013-03-30 05:38:45	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Quit: ilyanok)
2013-03-30 05:38:49	shachaf	I agree that this proposal is interesting.
2013-03-30 05:38:51	copumpkin	oh I had already proposed that?
2013-03-30 05:38:51	elliott	the applicative not being a superclass of monad laws mean that it isn't safe :P
2013-03-30 05:39:05	copumpkin	man, I'm dumb
2013-03-30 05:39:08	djahandarie	Hahahaha
2013-03-30 05:39:13	shachaf	No, your last proposal was just about relaxing the whole thing to Applicative.
2013-03-30 05:39:17	copumpkin	oh okay
2013-03-30 05:39:19	shachaf	Not bundling things up and all that.
2013-03-30 05:39:40	elliott	f <$> x = [f v | v <- x]
2013-03-30 05:39:54	-->	drumond19 (~drumond19@186.214.75.73) has joined #haskell
2013-03-30 05:40:24	shachaf	I,I f <$> x <*> y = [f v w | v <- x | w <- y]
2013-03-30 05:40:29	shachaf	(Except not.)
2013-03-30 05:41:25	shachaf	copumpkin: This is reminiscent of arrow notation, of course.
2013-03-30 05:41:38	copumpkin	yeah but arrow notation sucks
2013-03-30 05:41:42	shachaf	Yes.
2013-03-30 05:41:44	copumpkin	so it's way better
2013-03-30 05:41:46	shachaf	As do arrows.
2013-03-30 05:41:55	elliott	shachaf: it would be f <$> x <*> y = [f v w | v <- x, w <- y]
2013-03-30 05:42:08	shachaf	elliott: No, the | version could be truly Applicative.
2013-03-30 05:42:13	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 240 seconds)
2013-03-30 05:42:27	shachaf	It doesn't allow | x <- y, z <- x
2013-03-30 05:42:29	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-03-30 05:42:33	copumpkin	oh, max bolingbroke
2013-03-30 05:42:39	elliott	shachaf: ?
2013-03-30 05:42:40	copumpkin	as he is wont to do, proposed what I did
2013-03-30 05:42:41	copumpkin	just now
2013-03-30 05:42:42	copumpkin	I think
2013-03-30 05:42:47	shachaf	Just now?
2013-03-30 05:42:49	elliott	shachaf: that would be inconsistent with the list Applicative
2013-03-30 05:42:51	shachaf	Where?
2013-03-30 05:42:52	copumpkin	http://www.haskell.org/pipermail/haskell-cafe/2011-September/095153.html
2013-03-30 05:42:56	copumpkin	no I mean what I suggested now
2013-03-30 05:42:59	copumpkin	is what he suggested back then
2013-03-30 05:43:00	shachaf	Ah.
2013-03-30 05:43:04	shachaf	elliott: I know, but the list applicative is bad.
2013-03-30 05:43:11	shachaf	So there you go.
2013-03-30 05:43:51	elliott	shachaf: you want the Applicative to be inconsistent with the Monad?
2013-03-30 05:44:01	shachaf	No, I want instances to magically be good.
2013-03-30 05:44:12	shachaf	21:40 <shachaf> (Except not.)
2013-03-30 05:44:42	shachaf	The point is that the zip comprehension notation is consistent with what Applicative lets you do.
2013-03-30 05:44:56	shachaf	And Applicative *is* zippy in a sense.
2013-03-30 05:45:10	cmccann	-XDoWhatShachafWouldWant
2013-03-30 05:45:33	-->	robawt (~robawt@unaffiliated/robawt) has joined #haskell
2013-03-30 05:45:39	shachaf	cmccann: You have gained one rank in "making jokes that involve shachaf".
2013-03-30 05:45:51	sw2wolf	@instances Applicative
2013-03-30 05:45:51	lambdabot	Couldn't find class `Applicative'. Try @instances-importing
2013-03-30 05:45:59	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-30 05:46:00	cmccann	pretty sure I already have like all the ranks in that.
2013-03-30 05:46:18	shachaf	[Foo x y z | x <- char | y <- many whitespace | z <- char]
2013-03-30 05:47:10	-->	pranavrc (~pranavrc@122.164.210.31) has joined #haskell
2013-03-30 05:47:11	<--	pranavrc (~pranavrc@122.164.210.31) has quit (Changing host)
2013-03-30 05:47:11	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-30 05:47:17	<--	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has quit (Quit: Leaving.)
2013-03-30 05:47:44	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-03-30 05:48:49	elliott	shachaf: [MyRec{..} | field1 <- char | field2 <- char]
2013-03-30 05:48:53	elliott	too bad record puns are awful.
2013-03-30 05:48:58	shachaf	copumpkin: Hmm, maybe you can do without the tuple and just pass a partially-applied function directly.
2013-03-30 05:49:00	elliott	but they'd be good if we had lenses, or something.
2013-03-30 05:49:00	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-03-30 05:49:04	shachaf	Or a computation which will then be joined.
2013-03-30 05:49:09	copumpkin	that'd be nice
2013-03-30 05:49:33	<--	jonaias (~jonaias@189.111.80.20) has quit (Quit: Konversation terminated!)
2013-03-30 05:50:30	shachaf	Maybe you could translate it in a pretty straightforward way with join.
2013-03-30 05:50:55	cmccann	yay my incredibly shitty drawing program works!!
2013-03-30 05:50:56	copumpkin	I think I see what you mean
2013-03-30 05:51:40	shachaf	Generate m (m a) and join it, and then simplify return + join
2013-03-30 05:51:43	shachaf	Or something.
2013-03-30 05:52:01	copumpkin	x <- foo; y <- bar; z <- baz; f x y z ===> (\f -> liftA3 f foo bar baz) (\x y z -> f x y z)
2013-03-30 05:52:12	copumpkin	with a join outside
2013-03-30 05:52:30	copumpkin	that could be pretty cute
2013-03-30 05:53:37	<--	Kruppe (~user@CPE602ad0938e9a-CM602ad0938e97.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-03-30 05:55:03	-->	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has joined #haskell
2013-03-30 05:55:11	<--	ilyanok (~ilya@46-127-81-236.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-30 05:55:38	<--	kevinqcs (~turing@183.209.140.29) has quit (Ping timeout: 256 seconds)
2013-03-30 05:56:57	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-03-30 05:57:13	<--	Argue (~Argue@112.209.13.160) has quit (Ping timeout: 240 seconds)
2013-03-30 05:59:27	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-03-30 06:00:58	-->	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has joined #haskell
2013-03-30 06:02:07	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-03-30 06:02:10	<--	JoeyA (~joeyadams@199.168.196.156) has quit (Quit: Leaving)
2013-03-30 06:02:42	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-03-30 06:03:25	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-03-30 06:03:40	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-03-30 06:04:59	shachaf	copumpkin: You can use the monad laws for all sorts of things if you go far enough.
2013-03-30 06:05:12	copumpkin	yup
2013-03-30 06:05:17	shachaf	If you allow inlining things that use do notation.
2013-03-30 06:05:29	shachaf	What's the best you can do with something like this? do x <- a; y <- b; when y (print "y"); z <- c; when (x && z) (print "xz")
2013-03-30 06:07:28	shachaf	I guess this is only relevant when you have multiple <-s in a row.
2013-03-30 06:07:44	shachaf	Or when you have <- and return, liftAn-style, if you
2013-03-30 06:07:48	shachaf	're doing that.
2013-03-30 06:07:56	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-30 06:08:59	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 06:10:16	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-03-30 06:10:20	-->	Henesy (~h3n3sy@adsl-75-23-118-193.dsl.peoril.sbcglobal.net) has joined #haskell
2013-03-30 06:10:25	shachaf	I guess the obvious translation with this scheme is join $ liftA2 (\x y -> when y (print "y") >> join (fmap (\z -> when (x && z) (print "xz")) c)) a b
2013-03-30 06:11:23	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 245 seconds)
2013-03-30 06:11:27	-->	hunter (~hunter@bas10-toronto01-845461566.dsl.bell.ca) has joined #haskell
2013-03-30 06:11:50	--	hunter is now known as Guest73848
2013-03-30 06:12:42	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-30 06:13:03	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-03-30 06:15:34	-->	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-03-30 06:16:28	-->	trescenzi (~trescenzi@2620:91:0:163:74e4:2c28:275c:1a4a) has joined #haskell
2013-03-30 06:16:34	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Read error: Operation timed out)
2013-03-30 06:16:42	-->	AntiSpamMeta_ (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-03-30 06:16:42	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Killed (hubbard.freenode.net (Nickname regained by services)))
2013-03-30 06:16:42	--	AntiSpamMeta_ is now known as AntiSpamMeta
2013-03-30 06:17:02	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-03-30 06:17:25	<--	h_chiro (~h_chiro@p2053-ipbf404kyoto.kyoto.ocn.ne.jp) has quit (Ping timeout: 248 seconds)
2013-03-30 06:17:38	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 245 seconds)
2013-03-30 06:17:51	-->	h_chiro (~h_chiro@p2053-ipbf404kyoto.kyoto.ocn.ne.jp) has joined #haskell
2013-03-30 06:17:57	<--	Jaak (~foo@tartu.cyber.ee) has quit (Ping timeout: 248 seconds)
2013-03-30 06:17:58	<--	Igloo (~igloo@210.99.2.81.in-addr.arpa) has quit (Ping timeout: 248 seconds)
2013-03-30 06:18:10	-->	Igloo (~igloo@210.99.2.81.in-addr.arpa) has joined #haskell
2013-03-30 06:18:13	-->	Jaak (~foo@tartu.cyber.ee) has joined #haskell
2013-03-30 06:18:43	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-03-30 06:19:01	<--	dfletcher (~fletch@drupal.org/user/72475/view) has quit (Ping timeout: 248 seconds)
2013-03-30 06:19:15	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-30 06:19:32	<--	llumac (~llumac@152.host-182-48-141.compassnet.co.nz) has quit (Quit: irc2go)
2013-03-30 06:20:51	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-30 06:20:55	<--	trescenzi (~trescenzi@2620:91:0:163:74e4:2c28:275c:1a4a) has quit (Ping timeout: 264 seconds)
2013-03-30 06:21:53	<--	tgeeky (~tgeeky@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has quit (Quit: leaving)
2013-03-30 06:22:31	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-30 06:22:34	shachaf	copumpkin: I wonder whether you could do this with just rewrite rules.
2013-03-30 06:22:40	shachaf	Kind of silly but maybe you could express it.
2013-03-30 06:22:40	-->	kevinqcs (~turing@183.209.141.162) has joined #haskell
2013-03-30 06:23:08	copumpkin	hmm, maybe!
2013-03-30 06:23:18	shachaf	In phases, (>>=)s to join+fmap, combine join (a <&> (\x -> b <&> (\y -> f x y))) to join (liftM2 (\f x y) a b)
2013-03-30 06:23:30	shachaf	Then maybe turn joins+fmaps back to (>>=)s for efficiency or something.
2013-03-30 06:24:14	shachaf	Even if the rewrite rule system can do it at all, it's a bit of a stretch.
2013-03-30 06:24:21	<--	_janne (dmon@punainen.org) has quit (Ping timeout: 248 seconds)
2013-03-30 06:24:24	copumpkin	yeah
2013-03-30 06:25:19	shachaf	Er, that's (\x y -> f x y)
2013-03-30 06:26:22	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-03-30 06:27:38	-->	_janne (dmon@punainen.org) has joined #haskell
2013-03-30 06:28:34	sw2wolf	@type liftM2
2013-03-30 06:28:35	lambdabot	Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
2013-03-30 06:28:43	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-03-30 06:29:29	-->	thetallguy2 (~beshers@76.89.70.48) has joined #haskell
2013-03-30 06:29:29	<--	thetallguy (~beshers@76.89.70.48) has quit (Read error: Connection reset by peer)
2013-03-30 06:30:53	<--	Henesy (~h3n3sy@adsl-75-23-118-193.dsl.peoril.sbcglobal.net) has quit (Ping timeout: 258 seconds)
2013-03-30 06:31:39	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 06:32:50	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 06:34:59	<--	leoncamel1 (~leoncamel@1.202.5.29) has quit (Quit: WeeChat 0.3.9.2)
2013-03-30 06:35:44	<--	nus-- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-30 06:35:56	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-03-30 06:38:30	<--	kevinqcs (~turing@183.209.141.162) has quit (Ping timeout: 252 seconds)
2013-03-30 06:39:20	-->	kallisti (~eris@168.28.136.20) has joined #haskell
2013-03-30 06:39:20	<--	kallisti (~eris@168.28.136.20) has quit (Changing host)
2013-03-30 06:39:20	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-03-30 06:39:47	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 06:43:07	-->	nus-- (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 06:43:53	<--	hiratara (~hiratara@h220138.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 245 seconds)
2013-03-30 06:44:33	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 252 seconds)
2013-03-30 06:45:49	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 245 seconds)
2013-03-30 06:46:16	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-30 06:46:44	-->	ozataman (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-03-30 06:46:44	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-30 06:46:49	-->	Polish_ (~fosky@ppp118-209-23-179.lns20.mel4.internode.on.net) has joined #haskell
2013-03-30 06:47:46	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-30 06:48:03	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 245 seconds)
2013-03-30 06:48:38	<--	frsoares (~frsoares@189.1.19.70) has quit (Quit: Leaving)
2013-03-30 06:49:10	-->	hiratara (~hiratara@h223020.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-30 06:49:53	<--	fosky (~fosky@ppp118-209-110-118.lns20.mel4.internode.on.net) has quit (Ping timeout: 240 seconds)
2013-03-30 06:50:45	<--	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-03-30 06:50:59	-->	edeast (~chatzilla@24.114.26.62) has joined #haskell
2013-03-30 06:51:25	-->	vifanq (~vifanq@gateway/tor-sasl/vifanq) has joined #haskell
2013-03-30 06:52:53	napping	how does lens work with optional positions?
2013-03-30 06:53:11	edwardk	you mean fields that are only present in some contructors?
2013-03-30 06:53:24	-->	mansgrf (~gynna@79.126.202.99) has joined #haskell
2013-03-30 06:53:33	napping	yeah, something like that. Prism seems to work only with isomorphisms
2013-03-30 06:53:37	<--	mansgrf (~gynna@79.126.202.99) has quit (K-Lined)
2013-03-30 06:54:01	napping	or not exactly isomorphisms, but things where there is no other state
2013-03-30 06:54:08	-->	mansgrf (~gynna@79.126.203.84) has joined #haskell
2013-03-30 06:54:13	edwardk	data Foo = Foo { _bar :: Int } | Baz { _bar :: Int, _quaffle :: Int } | Quux { _quaffle :: Int }; makeLenses ''Foo
2013-03-30 06:54:14	<--	mansgrf (~gynna@79.126.203.84) has quit (Killed (idoru (Spam is off topic on freenode.)))
2013-03-30 06:54:27	<--	Vert (~quassel@94-195-239-197.zone9.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-03-30 06:54:34	edwardk	that will generate two 'traversals' instead of lenses, because in some cases there is no target for the traversal to visit
2013-03-30 06:55:16	edwardk	bar :: Traversal' Foo Int -- and quaffle :: Traversal' Foo Int
2013-03-30 06:55:53	<--	estebistec (~estebiste@72.133.228.205) has quit (Read error: Connection reset by peer)
2013-03-30 06:56:05	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-03-30 06:56:27	edwardk	if you look at the big hierarchy in http://hackage.haskell.org/package/lens you'll see the common superclass of both lens and prism is 'traversal'
2013-03-30 06:57:12	shachaf	I wonder whether there is a law hierarchy or something to go with the lens types hierarchy.
2013-03-30 06:57:27	shachaf	Some metalaws that would let you figure out the lens and prism laws and so on.
2013-03-30 06:58:36	edwardk	the generated code for, say, quaffle, would look like:
2013-03-30 06:58:54	edwardk	quaffle _ (Foo a) = pure (Foo a); quaffle f (Quux a) = Quux <$> f a; quaffle f (Baz i q) = Baz i <$> f q;
2013-03-30 06:59:43	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-03-30 06:59:57	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-03-30 07:00:22	-->	tgeeky (~tgeeky@99-184-20-104.lightspeed.rswlga.sbcglobal.net) has joined #haskell
2013-03-30 07:02:25	napping	what works for reading the field?
2013-03-30 07:02:46	napping	view looks close, if I could stick in a First
2013-03-30 07:03:03	shachaf	preview
2013-03-30 07:03:23	shachaf	(preview uses First.)
2013-03-30 07:03:43	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-30 07:04:10	elliott	aka (^?)
2013-03-30 07:04:39	shachaf	firstOf, on the other hand, does not use First.
2013-03-30 07:05:24	<--	xinming (~xinming@113.248.109.24) has quit (Ping timeout: 245 seconds)
2013-03-30 07:05:26	-->	Kaidelong (~barend@50-78-166-218-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-30 07:05:28	edwardk	preview
2013-03-30 07:05:43	edwardk	equivalently view (pre quaffle)
2013-03-30 07:05:52	edwardk	preview = view . pre (at least morally)
2013-03-30 07:06:05	sw2wolf	:t (.)
2013-03-30 07:06:06	lambdabot	(b -> c) -> (a -> b) -> a -> c
2013-03-30 07:06:08	<--	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has quit (Remote host closed the connection)
2013-03-30 07:06:48	edwardk	> Left 4 ^? _Right
2013-03-30 07:06:50	lambdabot	  Nothing
2013-03-30 07:06:54	edwardk	> Left 4 ^? _Left
2013-03-30 07:06:56	lambdabot	  Just 4
2013-03-30 07:07:02	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-03-30 07:07:04	edwardk	> preview _Left (Left 4)
2013-03-30 07:07:06	lambdabot	  Just 4
2013-03-30 07:07:12	edwardk	> preview traverse [1..10]
2013-03-30 07:07:14	lambdabot	  Just 1
2013-03-30 07:07:17	-->	xinming (~xinming@125.87.81.103) has joined #haskell
2013-03-30 07:07:18	shachaf	@ty (^? _Just)
2013-03-30 07:07:20	lambdabot	Maybe a -> Maybe a
2013-03-30 07:07:51	shachaf	edwardk: Can withMonoid move from examples/ into something actually exported by reflection?
2013-03-30 07:07:59	edwardk	=/
2013-03-30 07:08:09	edwardk	i'm not entirely happy with it as an api choice
2013-03-30 07:08:28	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-03-30 07:08:38	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 07:08:38	edwardk	i realize this makes your foldBy, etc stuff into code duplication
2013-03-30 07:09:16	 *	edwardk decides to go get some sleep.
2013-03-30 07:09:20	shachaf	Well, presumably I'd define them in terms of withMonoid.
2013-03-30 07:09:31	shachaf	I was thinking of just exporting that as well.
2013-03-30 07:09:40	shachaf	But then I thought reflection would make more sense.
2013-03-30 07:09:44	edwardk	well, you can duplicate the code from withMonoid in an Internal module somewhere if you want
2013-03-30 07:09:44	-->	kwos (~kwos@103.5.142.8) has joined #haskell
2013-03-30 07:09:50	edwardk	(well, in lens
2013-03-30 07:09:50	<--	nus-- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-30 07:09:56	shachaf	Right.
2013-03-30 07:10:11	edwardk	in reflection i'd be more leery, since its so darn minimal right now i like to keep it that way
2013-03-30 07:10:38	shachaf	Well, it would be a separate module.
2013-03-30 07:10:43	elliott	so minimal you added another class :(
2013-03-30 07:10:47	shachaf	It doesn't incur any dependencies or anything.
2013-03-30 07:10:47	<--	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-03-30 07:10:55	-->	joneshf-laptop_ (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 07:11:26	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-03-30 07:11:53	edwardk	elliott: i have writers remorse about adding it already ;)
2013-03-30 07:12:09	edwardk	i'll let you convince me it was a bad idea sometime when i've slept
2013-03-30 07:12:13	edwardk	;)
2013-03-30 07:13:13	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-03-30 07:13:14	elliott	it's ok, i'll just spread the word you added something oleg wouldn't have dreamt of implementing :P
2013-03-30 07:13:35	edwardk	the main problem i have with the with monoid thing is it doesn't generalize well. there is the 'nicer in some sense' version with the constraints machinery, etc. but its still a hack =P
2013-03-30 07:13:58	edwardk	heh, he already cringed when i showed him the fast path
2013-03-30 07:14:19	shachaf	I,I achievement unlocked
2013-03-30 07:14:47	sw2wolf	@where hugs
2013-03-30 07:14:47	lambdabot	http://haskell.org/hugs
2013-03-30 07:15:19	elliott	hmm, how doesn't it generalise?
2013-03-30 07:15:57	mm_freak	wow, i didn't know there was such a great xournal clone in haskell
2013-03-30 07:17:31	tgeeky	mm_freak: thank the guy named 'wavewave'
2013-03-30 07:17:57	shachaf	copumpkin: I was going to reply to Bolingbroke's post about it but it was years ago.
2013-03-30 07:18:06	copumpkin	nothing wrong with that
2013-03-30 07:18:07	shachaf	At any rate this isn't too feasible to do right now.
2013-03-30 07:18:15	copumpkin	it might be in idris :)
2013-03-30 07:18:30	mm_freak	it seems like all seriously maintained haskell clone projects quickly overtake the original project they wanted to clone, at least in key aspects…  hledger, hoodle, hakyll, …
2013-03-30 07:18:39	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 252 seconds)
2013-03-30 07:19:16	luite	:)
2013-03-30 07:19:34	luite	i think he also wants to make a web viewer for hoodle, he's contributed some ghcjs code
2013-03-30 07:19:44	mm_freak	great
2013-03-30 07:20:44	<--	jkoshy (~jkoshy@117.204.51.184) has quit (Quit: jkoshy)
2013-03-30 07:20:52	 *	hackagebot bytes 0.5 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.5 (EdwardKmett)
2013-03-30 07:21:14	mm_freak	some day haskell will be the new PHP and idris people trying to convince the mainstream haskell world that haskell is seriously broken =)
2013-03-30 07:21:50	shachaf	I think the mainstream Haskell world agrees that Haskell is broken.
2013-03-30 07:22:02	<--	edeast (~chatzilla@24.114.26.62) has quit (Remote host closed the connection)
2013-03-30 07:22:06	shachaf	By "mainstream Haskell world" I mean people who spend all day complaining on IRC.
2013-03-30 07:22:10	edwardk	wavewave has showed up at hac phi for the last couple of years. good guy
2013-03-30 07:22:19	-->	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has joined #haskell
2013-03-30 07:22:27	shachaf	wavewave was at HacBoston too.
2013-03-30 07:22:51	mm_freak	hehe
2013-03-30 07:22:51	luite	btw can i interest someone here in writing a patch for Cabal/cabal-install that lets me supply extra extensions of files that should be installed alongside the .hi files (same source/dest dirs)? for ghcjs i'd want to add [".js_hi", ".js", ".ji"]
2013-03-30 07:23:20	<--	cardamon (~wintermut@c-24-30-40-161.hsd1.ga.comcast.net) has left #haskell
2013-03-30 07:23:34	-->	fosky (~fosky@ppp118-209-116-244.lns20.mel4.internode.on.net) has joined #haskell
2013-03-30 07:23:50	-->	ndngvr` (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-03-30 07:24:11	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (Ping timeout: 255 seconds)
2013-03-30 07:24:25	<--	Kaidelong (~barend@50-78-166-218-static.hfc.comcastbusiness.net) has quit (Quit: Ex-Chat)
2013-03-30 07:24:48	-->	knightshade (~knightsha@p548CE7E0.dip.t-dialin.net) has joined #haskell
2013-03-30 07:25:42	-->	Kaidelong (~barend@50-78-166-218-static.hfc.comcastbusiness.net) has joined #haskell
2013-03-30 07:25:44	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-03-30 07:26:09	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has quit (Quit: roshan)
2013-03-30 07:26:34	-->	nexx (~SPS-User@dslb-188-108-215-098.pools.arcor-ip.net) has joined #haskell
2013-03-30 07:26:54	<--	Polish_ (~fosky@ppp118-209-23-179.lns20.mel4.internode.on.net) has quit (Ping timeout: 252 seconds)
2013-03-30 07:29:10	luite	meh, no response :(  I'd offer haskell stickers if i hadn't given them all away
2013-03-30 07:29:40	tgeeky	luite: rename your file types to .svg, .png, and use diagrams-haddock
2013-03-30 07:30:19	<--	Targen (~iguana@190.39.199.39) has quit (Remote host closed the connection)
2013-03-30 07:30:27	kwos	Hi all :)
2013-03-30 07:30:52	 *	hackagebot bytes 0.5.1 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.5.1 (EdwardKmett)
2013-03-30 07:30:53	luite	tgeeky: doesn't that require them to be listed in data-files or something?
2013-03-30 07:31:43	edwardk	tgeeky: that just gets you more stuff in the doc dir
2013-03-30 07:32:04	tgeeky	I just wanted to demonstrate that "no response" can be better than a bad response :o
2013-03-30 07:32:08	tgeeky	I didn't think it was magic
2013-03-30 07:32:19	kwos	is there some way to get list of record field names? Say derive from some class C and then have a method fieldNames :: C a => a -> [String]?
2013-03-30 07:32:23	luite	.. or doc dir :) the Cabal lib seems to be rather picky about the files it wants to copy
2013-03-30 07:33:28	<--	dkasak (~dkasak@dh207-56-33.xnet.hr) has quit (Ping timeout: 245 seconds)
2013-03-30 07:33:43	luite	and i guess this should be fixed before 7.8.1 is released otherwise the ghcjs experience will be horrible
2013-03-30 07:34:12	dmwit	kwos: Are you double-plus sure that's what you want?
2013-03-30 07:34:15	edwardk	luite: hrmm. do you need those files, or could you say, cheat and tell ar to add them to the big archive file its building?
2013-03-30 07:34:32	-->	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-03-30 07:34:39	wavewave	hi
2013-03-30 07:34:40	edwardk	luite: then when cabal moves the '.a' file it has your extra crap in it along for the ride
2013-03-30 07:34:49	luite	edwardk: oh i cheat already by letting ghcjs hash the .hi file and copy the other ones in place from a cache directory the next time it needs them
2013-03-30 07:34:55	kwos	dmwit: why wouldn't I want that? What I'm trying to do is to have a nice way of printing [SomeRecord] as a "table" on stdout
2013-03-30 07:35:01	dmwit	wavewave: Somebody was just complimenting your xournal clone. =)
2013-03-30 07:35:15	kwos	dmwit: I'd rather avoid hardcoding column names, that's why I somehow want to get hold of them using some sort of generic mechanism
2013-03-30 07:35:31	edwardk	luite: just thinking outloud re the .a file, not sure how viable the option would be, but it would just carry along the files for the ride
2013-03-30 07:35:45	 *	dmwit nods agreeably towards kwos
2013-03-30 07:35:46	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-03-30 07:35:50	dmwit	kwos: Look into Template Haskell, then.
2013-03-30 07:35:52	wavewave	dmwit: oh? :-)
2013-03-30 07:36:15	kwos	dmwit: yeah, I can definitely do that, but would rather avoid it
2013-03-30 07:36:20	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-30 07:36:37	wavewave	dmwit: hoodle is not xournal-clone any more ;-)
2013-03-30 07:36:48	kwos	dmwit: ideally I'd like to just have deriving (Tabular)
2013-03-30 07:36:49	<--	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-03-30 07:36:50	luite	edwardk: i'm not sure i can do that, i think the ar command is executed by cabal-install after the compiler, so i'm not sure if i have a chance to modify the .ar file (unless i make a wrapper for ar)
2013-03-30 07:36:59	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-03-30 07:37:19	<--	charliesome (~textual@124-148-171-93.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-30 07:37:21	luite	i've done the ar wrapping thing for yesod devel, but i'd rather not :)
2013-03-30 07:37:23	edwardk	wonder if the post build hook gets in at a good enough time that its after that but before it gets installed
2013-03-30 07:37:38	napping	edwardk: ^? , ^.. and .~ with traversals were enough. Maybe view or ^? should be on the diagram
2013-03-30 07:37:54	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 252 seconds)
2013-03-30 07:38:06	edwardk	napping: view is. check Fold
2013-03-30 07:38:06	luite	edwardk: does cabal have a way to have global post build hooks, that you run for all packages?
2013-03-30 07:38:12	edwardk	and Getter
2013-03-30 07:38:19	edwardk	luite: sadly no
2013-03-30 07:38:21	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-30 07:38:24	dmwit	wavewave: =)
2013-03-30 07:39:09	luite	most packages should install with ghcjs unmodified, you may need to add a .js reimplementation of the cbits, using the ccall emulation ffi
2013-03-30 07:39:15	edwardk	napping: if you want to open an issue to add (^?) to the diagram throw one on github.com/ekmett/lens/issues i'll try to remember next time i tweak it
2013-03-30 07:39:18	-->	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 07:39:18	<--	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has quit (Client Quit)
2013-03-30 07:39:22	wavewave	dmwit: with xmonad-like scriptablilty. it will be like emacs of note-taking program.
2013-03-30 07:40:11	napping	oh, view is on there but I didn't realize the m could be a function type
2013-03-30 07:41:53	elliott	the view in the diagram should probably be specialised
2013-03-30 07:41:57	edwardk	napping: yeah thats the subject of about 10 fake signatures in the docs, just not in the quick reference sheet
2013-03-30 07:41:57	elliott	maybe the view in the package too...
2013-03-30 07:42:03	edwardk	=P
2013-03-30 07:42:05	luite	wavewave: i'm just finishing some ffi improvements for the ghcjs new code generator. do you still want canvas bindings, or have you finished som[D[D[D[D[De already?
2013-03-30 07:42:09	 *	elliott has seen it cause inference issues :(
2013-03-30 07:42:22	luite	hm my terminal is borky
2013-03-30 07:42:34	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 07:43:34	wavewave	luite: great! in fact, I had some problem in installing ghcjs a few days ago... so didn't go further yet.
2013-03-30 07:43:41	edwardk	i've seen one rather contrived case that it caused a problem with iirc
2013-03-30 07:44:00	edwardk	that said, i'm disinclined to change it
2013-03-30 07:44:06	luite	wavewave: oh that's kind of expected, the trampoline (master) branch is a bit neglected, the new one can probably take over in not too much time
2013-03-30 07:44:33	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 240 seconds)
2013-03-30 07:44:46	shachaf	hi wavewave
2013-03-30 07:44:55	wavewave	shachaf: hi!
2013-03-30 07:45:20	luite	wavewave: there are some things left, mainly getting the standalone compiler working well enough, which means hacking in some cabal support, improving the ghcjs-pkg and ghcjs-cabal wrappers, and the installation procedure
2013-03-30 07:45:32	shachaf	Are you coming to BayHac in May?
2013-03-30 07:46:03	-->	sanemat (~sanemat@12.208.138.210.vmobile.jp) has joined #haskell
2013-03-30 07:46:04	wavewave	luite: I see. anyway i am watching the project now, so soon I will try it again.
2013-03-30 07:46:38	wavewave	shachaf: I am thinking about it seriously now.
2013-03-30 07:46:53	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 240 seconds)
2013-03-30 07:47:43	wavewave	shachaf: visiting California is so good..
2013-03-30 07:47:51	-->	dkasak (~dkasak@dh207-73-252.xnet.hr) has joined #haskell
2013-03-30 07:47:52	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 256 seconds)
2013-03-30 07:48:45	<--	collin_ (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-03-30 07:48:54	-->	silver (~silver@178.120.62.213) has joined #haskell
2013-03-30 07:48:54	shachaf	Maybe copumpkin wants to come too.
2013-03-30 07:48:54	luite	wavewave: https://github.com/ghcjs/ghcjs-base/blob/master/GHCJS/Foreign.hs / https://github.com/ghcjs/ghcjs/blob/gen2-64-alth/test/ffi/marshalString.hs   <- this is how foreign imports work now
2013-03-30 07:49:21	luite	(JSC should also be supported, if you want generated bindings and cross native/web things)
2013-03-30 07:49:40	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-30 07:49:55	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-30 07:50:11	wavewave	luite: great! looks cool
2013-03-30 07:50:28	napping	edwardk: I'd suggest using the fake signature with (s ->), considering you're already using fake signatures in the diagram
2013-03-30 07:50:40	wavewave	luite: are you in Europe btw?
2013-03-30 07:51:00	luite	yes
2013-03-30 07:51:02	luite	netherlands
2013-03-30 07:51:32	edwardk	napping: i'm willing to consider it. then i get the other side of the questions of how do i read from the environment in a monad transformer stack ;)
2013-03-30 07:51:33	wavewave	I see.
2013-03-30 07:51:38	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-30 07:52:11	wavewave	I am moving to Europe this fall.
2013-03-30 07:52:12	-->	azaq23 (~derivecto@unaffiliated/azaq23) has joined #haskell
2013-03-30 07:52:18	napping	edwardk: considering you are already using fake signatures for things, one sentance before the diagram saying you use simplified signatures wouldn't be amiss
2013-03-30 07:52:22	luite	wavewave: ah, where?
2013-03-30 07:52:32	wavewave	cern, switzerland
2013-03-30 07:52:41	edwardk	sounds good. add it to the issue =)
2013-03-30 07:52:41	luite	oh cool
2013-03-30 07:52:53	<--	dkasak (~dkasak@dh207-73-252.xnet.hr) has quit (Ping timeout: 240 seconds)
2013-03-30 07:54:01	luite	and i'll be jealous that you're much closer to the mountains than me :p
2013-03-30 07:54:11	-->	kaoskorobase (~sk@84.78.195.71) has joined #haskell
2013-03-30 07:54:24	wavewave	shachaf: I feel that I now really want to join in BayHac.. need to persuade my wife now. ;-)
2013-03-30 07:54:58	edwardk	wavewave: no more hac phi for you?
2013-03-30 07:55:21	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-30 07:55:30	wavewave	edwardk: hacphi will be in July this year?
2013-03-30 07:55:36	edwardk	think so
2013-03-30 07:56:01	shachaf	When's the Boston one?
2013-03-30 07:56:03	wavewave	edwardk: I love to go there again.  still need to decide..
2013-03-30 07:56:31	dmwit	I think earlier this year -- early June.
2013-03-30 07:56:39	dmwit	This is probably something I should know.
2013-03-30 07:56:52	edwardk	shachaf: good question. ed yang moved to the wrong coast, so we didn't wind up getting the space arranged this year. i may follow up with akamai and see if we can do something later in the year though rather than in the dead of january
2013-03-30 07:57:37	edwardk	the trick is finding a time when it doesn't collide with icfp, etc.
2013-03-30 07:57:41	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-03-30 07:57:57	edwardk	maybe if we can figure out the icfp schedule and all the workshops it'd be possible to slot it in before or after
2013-03-30 07:57:58	-->	kmels (~kmels@frbg-4d029404.pool.mediaWays.net) has joined #haskell
2013-03-30 07:58:45	napping	edwardk: you've got an issue
2013-03-30 07:59:12	<--	Guest73848 (~hunter@bas10-toronto01-845461566.dsl.bell.ca) has quit (Quit: Lost terminal)
2013-03-30 07:59:21	edwardk	being right before popl was a good fit for us last time, because folks like edwin brady were able to fly in
2013-03-30 07:59:30	edwardk	so many repeating that with icfp would be a good idea
2013-03-30 07:59:33	edwardk	er maybe
2013-03-30 08:00:31	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 264 seconds)
2013-03-30 08:00:59	wavewave	yeah.. last time edwin's talk in boston was great.
2013-03-30 08:01:50	<--	adlan (~adlan@210.195.12.15) has quit (Remote host closed the connection)
2013-03-30 08:02:40	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-03-30 08:04:31	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-03-30 08:07:04	<--	MnO2 (~MnO2@1.34.43.236) has quit (Quit: MnO2)
2013-03-30 08:07:17	-->	fujimura (~fujimura@x232174.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-03-30 08:07:38	<--	kwos (~kwos@103.5.142.8) has quit (Quit: Get MacIrssi - http://www.sysctl.co.uk/projects/macirssi/)
2013-03-30 08:08:02	-->	dkasak (~dkasak@dh207-51-50.xnet.hr) has joined #haskell
2013-03-30 08:08:18	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-03-30 08:13:32	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 08:16:05	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-03-30 08:17:02	-->	trescenzi (~trescenzi@2620:91:0:163:42a:896b:ff5d:292e) has joined #haskell
2013-03-30 08:17:34	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: (quit))
2013-03-30 08:17:54	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 256 seconds)
2013-03-30 08:18:01	-->	Sonarpulse (~user@unaffiliated/sonarpulse) has joined #haskell
2013-03-30 08:18:22	Sonarpulse	so there is a Data.Map both with ghc and hackage, and neither is on the platform>
2013-03-30 08:18:30	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-03-30 08:18:51	Sonarpulse	I guess Data.Map is standard
2013-03-30 08:19:26	shachaf	Data.Map comes from the package "containers"
2013-03-30 08:19:31	--	Watcher7 is now known as Watcher7|off
2013-03-30 08:19:56	Sonarpulse	Data.Map.Lazy says it's also from containers
2013-03-30 08:20:06	Sonarpulse	http://www.haskell.org/ghc/docs/latest/html/libraries/containers/Data-Map-Lazy.html
2013-03-30 08:20:07	shachaf	Yes.
2013-03-30 08:20:24	shachaf	containers comes with GHC. You probably shouldn't upgrade it.
2013-03-30 08:20:24	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 245 seconds)
2013-03-30 08:20:37	Sonarpulse	why don't I have data.map.lazy then?
2013-03-30 08:20:45	Sonarpulse	I can't imagine they would split the package
2013-03-30 08:20:55	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-03-30 08:21:31	<--	trescenzi (~trescenzi@2620:91:0:163:42a:896b:ff5d:292e) has quit (Ping timeout: 264 seconds)
2013-03-30 08:21:42	shachaf	Probably you aren't looking at documentation for the version of containers that you have.
2013-03-30 08:21:57	Sonarpulse	that would make the most sense
2013-03-30 08:22:27	Sonarpulse	I have ubuntu 12.04 repo's GHC
2013-03-30 08:22:32	Sonarpulse	which isn't too bad
2013-03-30 08:22:41	Sonarpulse	sorry 12.10
2013-03-30 08:22:47	Sonarpulse	something  could have changed
2013-03-30 08:22:55	Sonarpulse	:info Data.Map
2013-03-30 08:23:03	Sonarpulse	whoops that wasn't ghci
2013-03-30 08:23:15	shachaf	I recommend finding out which version of containers you have -- maybe with ghc-pkg -- and then looking at the documentation for that version.
2013-03-30 08:24:24	Sonarpulse	sounds like a plan
2013-03-30 08:24:24	Sonarpulse	 
2013-03-30 08:24:25	Sonarpulse	 
2013-03-30 08:24:25	Sonarpulse	 
2013-03-30 08:26:27	Sonarpulse	oh wow
2013-03-30 08:26:29	Sonarpulse	4.2
2013-03-30 08:26:44	Sonarpulse	guess top level number bump for big API change
2013-03-30 08:26:59	shachaf	Probably the API change involved .Lazy!
2013-03-30 08:27:36	Sonarpulse	yup
2013-03-30 08:27:58	Sonarpulse	what exactly is the relationship between cabal and ghc-pkg?
2013-03-30 08:28:40	shachaf	Perhaps http://www.vex.net/~trebla/haskell/sicp.xhtml will help
2013-03-30 08:30:56	Sonarpulse	ok so it's vagly like dpkg vs apt
2013-03-30 08:31:13	shachaf	Not exactly.
2013-03-30 08:31:32	shachaf	Also keep in mind: Cabal is different from cabal-install (the command line program `cabal` is cabal-install).
2013-03-30 08:32:44	-->	rs234 (~rs234@89.137.4.235) has joined #haskell
2013-03-30 08:32:44	Sonarpulse	what do you mean?
2013-03-30 08:32:55	Sonarpulse	I assumed cabal-install is just one of many utilities
2013-03-30 08:33:00	Sonarpulse	and Cabal is the otherall system
2013-03-30 08:33:16	Sonarpulse	I ask in part because I am probably going to switch to NixOS soon
2013-03-30 08:33:35	shachaf	Nix has a whole different system.
2013-03-30 08:33:53	Kaidelong	but there are people working on porting hackage to nix I think
2013-03-30 08:34:09	Kaidelong	so if you want to bypass cabal altogether it might be possible
2013-03-30 08:34:37	-->	crs_ (~crs_@192.210.215.64) has joined #haskell
2013-03-30 08:34:57	Sonarpulse	I mean then I have Nix package manager instead of cabal
2013-03-30 08:35:01	<--	sambio (~sambio@190.57.227.109) has quit (Excess Flood)
2013-03-30 08:35:03	Sonarpulse	but still ghc-pkg?
2013-03-30 08:35:13	Sonarpulse	that would be my assumption
2013-03-30 08:35:24	-->	randomclown (~randomclo@unaffiliated/randomclown) has joined #haskell
2013-03-30 08:35:24	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-03-30 08:35:32	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-03-30 08:35:45	-->	Wizek (~wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-03-30 08:35:46	Sonarpulse	also, back to map, my keys are 32-bit unsigned integers
2013-03-30 08:35:54	randomclown	How do you use ByteString.Builder, I want to concatenate a lot of bytestrings together
2013-03-30 08:36:12	Sonarpulse	I assume IntMap WON'T work then as Int is only guaranteed 28-bits?
2013-03-30 08:36:25	luite	randomclown: mostly through the Monoid instance
2013-03-30 08:36:28	Sonarpulse	or something like that
2013-03-30 08:36:36	luite	randomclown: mconcat a much together, or a <> b <> c
2013-03-30 08:36:41	luite	a bunch
2013-03-30 08:37:22	-->	nimred (~nimred@srv229.dedi64.de) has joined #haskell
2013-03-30 08:37:22	<--	nimred (~nimred@srv229.dedi64.de) has quit (Changing host)
2013-03-30 08:37:22	-->	nimred (~nimred@unaffiliated/nahra) has joined #haskell
2013-03-30 08:37:35	randomclown	On the builders?
2013-03-30 08:37:39	luite	yeah
2013-03-30 08:37:50	randomclown	right ok
2013-03-30 08:38:13	<--	ritek (~dmoctezum@unaffiliated/dmoctezuma) has quit (Ping timeout: 240 seconds)
2013-03-30 08:38:19	<--	nexx (~SPS-User@dslb-188-108-215-098.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-03-30 08:40:21	-->	Nahra (~user@unaffiliated/nahra) has joined #haskell
2013-03-30 08:40:45	-->	ritek (~dmoctezum@unaffiliated/dmoctezuma) has joined #haskell
2013-03-30 08:40:49	<--	techlife (~jimmy@218.59.113.120) has quit (Ping timeout: 245 seconds)
2013-03-30 08:40:55	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-03-30 08:41:42	luite	randomclown: if it doesn't work, ask shachaf for help
2013-03-30 08:41:47	-->	techlife (~jimmy@218.59.113.120) has joined #haskell
2013-03-30 08:41:58	shachaf	help
2013-03-30 08:42:08	shachaf	what did i do this time??
2013-03-30 08:42:17	luite	he needs monoids
2013-03-30 08:42:32	randomclown	nah I got them
2013-03-30 08:42:51	shachaf	Sonarpulse: I think Int is guaranteed by the report to be 30 bits.
2013-03-30 08:43:08	shachaf	Sonarpulse: But in practice with IntMap it's going to be 32 or 64.
2013-03-30 08:43:28	Sonarpulse	should I take the risk? :)
2013-03-30 08:43:30	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-03-30 08:43:54	Sonarpulse	there are the reserved bits for metadata
2013-03-30 08:44:01	Sonarpulse	or is that only pointers
2013-03-30 08:44:21	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 08:44:26	shachaf	GHC gives you the full 32 bits.
2013-03-30 08:44:33	Sonarpulse	OK
2013-03-30 08:44:36	shachaf	Hypothetical other implementations might use 2 bits for other things.
2013-03-30 08:44:52	Sonarpulse	I'll try both ways
2013-03-30 08:45:05	-->	mr- (~martin@rgnb-5d863e02.pool.mediaWays.net) has joined #haskell
2013-03-30 08:45:11	Sonarpulse	my program is IO bound so it probably doesn't matter
2013-03-30 08:45:29	shachaf	copumpkin: Do you have a good toy monad that has a more efficient Applicative instance?
2013-03-30 08:45:43	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-03-30 08:45:49	shachaf	By more efficient I actually mean observably different.
2013-03-30 08:47:18	<--	TravisD (~TravisD@S01060007e9c4da34.ed.shawcable.net) has quit (Quit: TravisD)
2013-03-30 08:48:29	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 246 seconds)
2013-03-30 08:49:50	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-03-30 08:52:40	-->	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has joined #haskell
2013-03-30 08:57:00	<--	arbn (~arbn@auriga.kiwilight.com) has left #haskell
2013-03-30 08:59:38	-->	arbn (~arbn@auriga.kiwilight.com) has joined #haskell
2013-03-30 09:01:07	<--	EvilPenguin (~EvilPengu@174-28-72-209.albq.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-03-30 09:01:16	-->	optimight (~superobje@203.88.154.20) has joined #haskell
2013-03-30 09:02:13	optimight	#chemistry
2013-03-30 09:02:36	optimight	#join chemistry
2013-03-30 09:03:15	arbn	optimight: So, I heard you like Chemistry?
2013-03-30 09:03:19	-->	marcus-aurelius (~quassel@120.Red-81-37-240.dynamicIP.rima-tde.net) has joined #haskell
2013-03-30 09:03:44	Kaidelong	you are probably after the forward slash
2013-03-30 09:03:44	optimight	Nope...     I like haskell
2013-03-30 09:03:50	-->	stat_vi (~stat@dslb-094-218-230-234.pools.arcor-ip.net) has joined #haskell
2013-03-30 09:03:56	optimight	Was here few months back
2013-03-30 09:06:12	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-03-30 09:07:26	-->	Pantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-03-30 09:08:13	<--	xinming (~xinming@125.87.81.103) has quit (Ping timeout: 240 seconds)
2013-03-30 09:10:26	-->	xinming (~xinming@113.248.71.195) has joined #haskell
2013-03-30 09:10:45	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-03-30 09:11:46	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-03-30 09:11:48	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-30 09:15:07	-->	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has joined #haskell
2013-03-30 09:16:43	<--	nxorg8 (~nxor@130.225.245.183) has quit (Ping timeout: 260 seconds)
2013-03-30 09:18:19	<--	Shin-LaC (~LaC@68.65.81.227) has quit (Ping timeout: 245 seconds)
2013-03-30 09:19:13	-->	nxorg8 (~nxor@130.225.245.183) has joined #haskell
2013-03-30 09:19:23	<--	qzr (~qzr@148-158.62-81.cust.bluewin.ch) has quit (Ping timeout: 255 seconds)
2013-03-30 09:20:05	-->	MnO2 (~MnO2@1.34.43.236) has joined #haskell
2013-03-30 09:20:13	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Quit: mattrepl)
2013-03-30 09:20:19	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-03-30 09:20:46	-->	Shin-LaC (~LaC@68.65.81.227) has joined #haskell
2013-03-30 09:21:00	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-03-30 09:21:22	<--	sw2wolf (~czsq888@171.217.2.51) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-03-30 09:21:56	-->	yoodit (~yoodit@5.102.226.200) has joined #haskell
2013-03-30 09:22:05	<--	[mth] (~mth@1.145.192.50) has quit (Ping timeout: 255 seconds)
2013-03-30 09:23:55	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-03-30 09:24:31	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-30 09:25:34	-->	jao (~jao@187.pool85-58-161.dynamic.orange.es) has joined #haskell
2013-03-30 09:25:40	--	jao is now known as Guest43756
2013-03-30 09:25:41	<--	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 255 seconds)
2013-03-30 09:25:50	<--	Guest43756 (~jao@187.pool85-58-161.dynamic.orange.es) has quit (Changing host)
2013-03-30 09:25:50	-->	Guest43756 (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-03-30 09:27:54	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has quit (Ping timeout: 252 seconds)
2013-03-30 09:31:43	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-03-30 09:32:22	-->	miclorb (~miclorb@ppp121-44-81-187.lns20.syd6.internode.on.net) has joined #haskell
2013-03-30 09:35:34	-->	megabeest (~megabeest@i59202.upc-i.chello.nl) has joined #haskell
2013-03-30 09:36:09	<--	megabeest (~megabeest@i59202.upc-i.chello.nl) has quit (Client Quit)
2013-03-30 09:36:29	<--	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has quit (Ping timeout: 255 seconds)
2013-03-30 09:36:48	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-03-30 09:38:26	-->	kallisti (~eris@168.28.136.16) has joined #haskell
2013-03-30 09:38:26	<--	kallisti (~eris@168.28.136.16) has quit (Changing host)
2013-03-30 09:38:26	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-03-30 09:38:36	-->	mikurubeam (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-03-30 09:38:42	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-03-30 09:38:54	<--	jcao219 (~jimmy@wikibooks/Jcao219) has quit (Ping timeout: 252 seconds)
2013-03-30 09:39:15	<--	kyagrd (~kyagrd@97.65.99.94) has quit (Quit: Konversation terminated!)
2013-03-30 09:39:58	-->	cads (~m@c-76-17-110-13.hsd1.ga.comcast.net) has joined #haskell
2013-03-30 09:40:32	<--	Damgaard (~andreas@ip1.c142.obr349.cust.comxnet.dk) has quit (Quit: Leaving.)
2013-03-30 09:40:55	 *	hackagebot shake 0.10.2 - Build system library, like Make, but more accurate dependencies.  http://hackage.haskell.org/package/shake-0.10.2 (NeilMitchell)
2013-03-30 09:41:39	<--	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has quit (Ping timeout: 252 seconds)
2013-03-30 09:41:56	-->	wavewave (~wavewave@141-213-172-075.vpn.umnet.umich.edu) has joined #haskell
2013-03-30 09:42:07	--	irc: disconnected from server
2013-03-30 17:55:16	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-30 17:55:16	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-30 17:55:16	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-30 17:55:16	--	Nicks #haskell: [@ChanServ [[zz]] \rs ]OLI[ __main__ _anona _br_ _flow_ _janne `0660 `bps_ `micro `nand` `ramses aajmakin ab9rf absence acfoltzer Adeon adimit Adios adlan adnap adnauseam aesptux aforemny agumonkey agundry ahf ahkurtz ajhager akahn akamaus akosch akraut akurei alagabes alang alang_ alanz albel727 alcz aleator alejandrogomez alexander__b Alice3 alios alkabetz alnix alpounet alshain AmaBoten Amadiro amathew amatsu amiller amyers anachron anders^^ andrewsw andyjgill aninhumer AntiSpamMeta apaku araujo arbn argiopeweb Argue aristid arkeet arkx armlessh1bo arnihr__ arpunk arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur augustl Axman6 b52 b_jonas bananagram banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens_ bd_ Belgarion0 bens bergey` Betal betawaffle bezik bgamari Bigcheese BigEndian BigTom birkenfeld bitonic blackmirroxx BlastHardcheese BMeph_ bobry boegel bogner Boney Boreeas Botje bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bss03 bstrie bxc_ byorgey ByronJohnson bytbox_ c_wraith cads Cale caleb_9 caligula_ Canar canta canvon carlocci ccasin ccxCZ cdidd ceii celery__ centrinia Cerise certaint1 chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 CodeDmitry cods coeus_ colah comak companion_cube conehead confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck creichert cross crs_ cryon Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley Damgaard dan_johnsin danr dario DarkFox Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander dfletcher_ Digihash DigitalK1wi dilinger_ djahandarie djanatyn dju dkasak dlundy dmarker dmead dmwit dnolen dockside1 Dodek dogmaT dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy drumond19 dsantiago DT` duairc_ dumbhat DustyDingo Dybber dyreshark EarlGray^ earthy ecuderpam edeast edenc edtsech edwardk edwtjo Eelis eff ehamberg Eiam eikke eirikur ejls eL_Bart0 electrogeek elgot Eliel elliott elliottc1ble em emmanuelux end3rW endojelly Enigmagic ent- Eridius ernst erpe Erstarrung estebistec Estrellas etabot ethercrow etrepum EvanR_ eviltwin_ Excureo eyck f8 fabjan faen fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow flippo flori flux folone__ formalcow fotc Franciman freiksenet frio fro0t frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco fumieval Fuuzetsu fxrh gavri gbarboza gbeshers gbluma gcmalloc_ gdeest gdsx_ geekosaur gemelen genisage gereedy gg7 ghorn Ghoul__ gienah Gilly glguy Gothmog_ Gracenotes greymalkin gseitz gspr guerrill1 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd HaltingState hamid hamishmack hanDerPeder harrison heath Heero` Heffalump helgikrs henk hiptobecubic hiratara hiredman hiroakip hiroyuki2 hive-mind horlicks hpaste hpc hpd hrehf hughfdjackson hvr hyko IanKelling ibid icarot Iceland_jack Icewing idnar ido idoru Igloo imphasing implr inr_ int-e integral_ Internet13 ion ique ISF isomorphic iulian ivan\ ivan____ ivan` ixian izym Jaak jabirali jackhill jaimef jamwt JaRoel|4d jaroslaw jaspervdj Jaxan jayne jbauman jcao219 jcp jcp|u jdnavarro jdoliner Jeanne-Kamikaze jedai jeff_s2 Jello_Raptor jercos jfischoff jix jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop_ Jonno_FTW Jonte_ JoshuaA jpeeters JPohlmann jrajav jrib jrockway jrslepak js6i jssanders jtalk jtobin julmuri junsuijin jyyou k00mi k0ral kadoban KaiSforza kakos kallisti kalven KaneTW kaol kaoskorobase Ke kennyd kennyp kerrick ketil Khisanth kini Kinnison KitB_ kith_ kkris kloeri klugez kmels kmicu kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba_ kushal kvey kyle__ labo lahwran lambdabot Laney latermuse latro`a lazard LeaChim lennart__ lenstr leroux Lethalman levi` lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb LucasCampos ludamad luite lulf lusory lzm m3ga m_hyperbolic Maarten_ machisuji magicman majoh maksbotan malorie_ mami marcus-aurelius marienz Martty Masse^^ mateu mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant mendez mephx merijn message144 MetaCosm meyersh miasma midfield mietek mike2 mikecaruso mikeplus64 mikurubeam milessabin milli mimi_vx mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva mlpfim_ mm_freak mmaruseacph2 MnO2 MoALTz mokus mollerstrand Mon_Ouie monique_ monochrom moonlite_ mornfall morolin mortberg Mortchek mrd mrdomino_ MrFenix_ mrkotfw mrshoe mspells mtao mtlatif mullein munro mux myme n_b Nahra Nanar nardul Natch natechan natte ndngvr` neena netj neurocyte neutrality newsham nexx Nickeeh nicoo nighty^ Nik_89 niklasb niko nikola nilg niloc132 Nimatek nimred ninegrid ninzine Nisstyre-laptop nlogax no-n noam_ noj Noldorin noplamodo notdan NougatRillettes nouitfvf Nshag numeral nus nwf nxorg8 obcode ocharles ofan oitnelis OlegYch opqdonut ormaaj Ornedan ortmage orzo osa1 osfameron osnr_ othiym23 otterdam otters otto_s ousado ozataman ozgura PaksAway Palmik Pantoufle pantsman paolino Paprikac_ ParahSail1n ParahSailin parcs PartyKat1e path[l] PatrickRobotham pcapriotti pcl pdxleif_away peddie peltchu pepijndevos perlite petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1902 pigoz pikhq pnielsen popz pqmodn pr predator117 preflex prh pricklypear prinnysocks PrO_OkI profmakx ps-auxw Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ q66 quaestor quchen quicksilver quuxman qwandor qwr qz_ qzr r126l raek RageOfThou raid rainmaker Ralith Raynes Razz rcj_ redjohn reiddraper Rembane RenJuan rexamophone rfw RichyB Rickasaurus rio ritek Riussi rmunroe robawt robbe- robbert rofer roshan rossabaker Rotaerk rs0 rs234 rsimoes rul ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sanemat_ sarfraz saurik sawjig scgilardi schlicht schlumpi schovi schulenburg36 Scott_firebeta Sculptor seafood seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC SHODAN shutdown_-h_now si14 simon___ simpson sipa sirchurchill sjl skp skyflash skyflash_ SLi sm smarter so Soft sohum solarus solirc sonda sopvop sordina3 Sorella SoupEvil spligak_ Spockz sproingie Squid_Tamer srcerer staafl Starfire stat_vi statusfailed steez stelleg_away stepcut stephe stvc suiside_ sully sunfun sunnavy supersym supki sw17ch Swizec sysopfb tahu tamiko tanakh tanakh__ Tarential taruti tavelram__ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tenmilestereo tensorpudding Tesseraction_a tessier_ tew88 tg tgeeky Th0mas Tharugrim The_third_man theDon theorbtwo thetallguy1 thetallguy2 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome tim1 timemage tippenein tjgillies tkd tlaine tmiw TML tntc tobiassjosten tom4939 tomaw tomejaguar tomh_ tomku tomprince ToRA Tordek trescenzi trevize tridactyla trolling tromp_ tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl Twey tzxn3 u_ u_quark ulfdoz Ulrar Urchin urm3l User_ UziMonkey__ v__ Valodim Varakh vehk verrens Vertue vhz_ Vicfred vifanq vikraman vili vmeson vobi Volstvok Vorpal voyd Vq VZakharov_ wagle walter Walther warpy___ Watcher7 waterlaz wavewave wchun wei2912 weie_ wereHamster whaletechno WhereIsMySpoon whoops wi wilfredh williamhc Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii xinming XMunkki_ xnyhps Xorlev xorox90 xplat xrl__ xrq` xunatai xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yoodit YoungFrog yriw yumike zakora Zariel zebr zeiris zenzike_ ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-30 17:55:16	--	Channel #haskell: 1002 nicks (1 op, 0 halfops, 0 voices, 1001 normals)
2013-03-30 17:55:17	--	URL for #haskell: http://www.haskell.org/
2013-03-30 17:55:18	--	Mode #haskell [+CLcnpt]
2013-03-30 17:55:18	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-30 17:55:23	neutrality	They won't give me the password to the thing either -- so no wireless haskell in my crib.
2013-03-30 17:56:25	Botje	neutrality: I have the reverse problem
2013-03-30 17:56:39	Botje	they enabled wireless without my authorization
2013-03-30 17:58:09	neutrality	ha ha ha
2013-03-30 17:58:18	simpson	neutrality: Is it also the modem?
2013-03-30 17:58:24	 *	Kinnison wonders how one allows one's ISP control over the AP/router
2013-03-30 17:58:29	-->	silver (~silver@178.120.91.42) has joined #haskell
2013-03-30 17:58:31	simpson	neutrality: Try searching online; many ISPs have backdoor passwords.
2013-03-30 17:58:33	neutrality	simpson: yes
2013-03-30 17:58:35	<--	nus (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-30 17:58:47	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-30 17:58:48	u_	my old router randomly broke our normal phone service
2013-03-30 17:58:53	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 17:59:22	latermuse	where do you guys live to have such an awful ISP?
2013-03-30 18:00:26	Clint	#haskell-blah
2013-03-30 18:00:46	Philippa	Kinnison: bundling. Especially mandatory
2013-03-30 18:00:49	Philippa	(and -blah)
2013-03-30 18:01:06	-->	LtWorf (~LtWorf@unaffiliated/ltworf) has joined #haskell
2013-03-30 18:01:22	<--	trescenzi (~trescenzi@2620:91:0:163:3045:3672:6d1d:bd5b) has quit (Remote host closed the connection)
2013-03-30 18:01:49	-->	trescenzi (~trescenzi@2620:91:0:163:3045:3672:6d1d:bd5b) has joined #haskell
2013-03-30 18:02:05	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-03-30 18:02:06	<--	Vicfred (~Futaba@187.206.41.231) has quit (Quit: Leaving)
2013-03-30 18:02:07	-->	neill_ (~neill@85.95.116.99) has joined #haskell
2013-03-30 18:02:32	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-03-30 18:03:09	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 18:03:47	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-30 18:04:25	-->	perspectival (~perspecti@163.105.broadband14.iol.cz) has joined #haskell
2013-03-30 18:04:59	-->	trescenz_ (~trescenzi@148.100.73.111) has joined #haskell
2013-03-30 18:05:45	-->	Xaratas (~UserNick@brln-d9ba40a1.pool.mediaWays.net) has joined #haskell
2013-03-30 18:06:02	<--	trescenzi (~trescenzi@2620:91:0:163:3045:3672:6d1d:bd5b) has quit (Ping timeout: 246 seconds)
2013-03-30 18:07:06	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 252 seconds)
2013-03-30 18:08:01	<--	LucasCampos (~lucas@177.17.102.222) has quit (Quit: Leaving.)
2013-03-30 18:08:25	-->	bergmark (~adnam@atmat.net) has joined #haskell
2013-03-30 18:08:50	<--	end3rW (~end3rW@lak-116-54.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-03-30 18:10:17	<--	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has quit (Remote host closed the connection)
2013-03-30 18:11:10	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-03-30 18:11:53	<--	sanemat_ (~sanemat@3.208.138.210.vmobile.jp) has quit (Remote host closed the connection)
2013-03-30 18:12:30	-->	sanemat (~sanemat@3.208.138.210.vmobile.jp) has joined #haskell
2013-03-30 18:12:30	<--	sanemat (~sanemat@3.208.138.210.vmobile.jp) has quit (Read error: Connection reset by peer)
2013-03-30 18:12:37	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-30 18:12:49	neutrality	simpson: good call
2013-03-30 18:13:20	<--	pcl (~pcl@cpe-24-90-29-42.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-30 18:13:27	-->	hiroaki (~hiroaki@77-20-72-92-dynip.superkabel.de) has joined #haskell
2013-03-30 18:13:29	-->	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has joined #haskell
2013-03-30 18:14:12	-->	sanemat (~sanemat@3.208.138.210.vmobile.jp) has joined #haskell
2013-03-30 18:14:13	<--	sanemat (~sanemat@3.208.138.210.vmobile.jp) has quit (Read error: Connection reset by peer)
2013-03-30 18:14:33	<--	jedai (~jedai@ADijon-552-1-67-125.w92-138.abo.wanadoo.fr) has quit (Quit: KVIrc 4.0.4 Insomnia http://www.kvirc.net/)
2013-03-30 18:15:15	<--	edeast (~chatzilla@24.114.26.62) has quit (Ping timeout: 260 seconds)
2013-03-30 18:18:20	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-30 18:18:28	<--	fro0t (~fro0t@1.23.69.46) has quit (Ping timeout: 245 seconds)
2013-03-30 18:18:33	-->	pcl (~pcl@cpe-24-90-29-42.nyc.res.rr.com) has joined #haskell
2013-03-30 18:19:23	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 255 seconds)
2013-03-30 18:21:12	<--	silver (~silver@178.120.91.42) has quit (Read error: Connection reset by peer)
2013-03-30 18:21:50	<--	pib1902 (~pib1902@your.friendly.media.team.coder.ark-cr.info) has quit (Remote host closed the connection)
2013-03-30 18:21:57	<--	pcl (~pcl@cpe-24-90-29-42.nyc.res.rr.com) has quit (Client Quit)
2013-03-30 18:22:05	<--	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has quit (Ping timeout: 255 seconds)
2013-03-30 18:22:44	-->	ecol (~ecol@nodo1.emasivo.net) has joined #haskell
2013-03-30 18:22:54	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 245 seconds)
2013-03-30 18:23:03	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-30 18:23:32	<--	ecol (~ecol@nodo1.emasivo.net) has left #haskell
2013-03-30 18:23:39	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-03-30 18:24:59	<--	jrajav (~jrajav@38.106.200.130) has quit (Quit: I tend to be neutral about apples)
2013-03-30 18:25:15	Spockz	Heffalump: I updated my question a bit with my ultimate goal. Do you have any ideas on how to achieve it?
2013-03-30 18:25:18	Spockz	*them
2013-03-30 18:25:55	-->	martint (~martint@75-119-235-186.dsl.teksavvy.com) has joined #haskell
2013-03-30 18:26:01	-->	silver (~silver@178.121.201.6) has joined #haskell
2013-03-30 18:26:42	-->	adu_ (~ajr@pool-71-191-154-98.washdc.fios.verizon.net) has joined #haskell
2013-03-30 18:27:29	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 245 seconds)
2013-03-30 18:27:45	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-03-30 18:27:58	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-03-30 18:28:08	-->	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has joined #haskell
2013-03-30 18:30:07	<--	wi (~wi@541BB0B7.cm-5-4c.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-03-30 18:30:38	<--	alshain (~alshain@124-171.1-85.cust.bluewin.ch) has quit (Ping timeout: 255 seconds)
2013-03-30 18:31:33	 *	hackagebot highlight-versions 0.1.3.1 - Highlight package versions which differ from the latest  version on Hackage  http://hackage.haskell.org/package/highlight-versions-0.1.3.1 (BrentYorgey)
2013-03-30 18:32:06	-->	__sg__ (~sg@ppp141237046171.access.hol.gr) has joined #haskell
2013-03-30 18:32:08	-->	alshain (~alshain@124-171.1-85.cust.bluewin.ch) has joined #haskell
2013-03-30 18:32:31	-->	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has joined #haskell
2013-03-30 18:34:53	<--	dfletcher_ (~fletch@108-196-222-251.lightspeed.sntcca.sbcglobal.net) has quit (Changing host)
2013-03-30 18:34:53	-->	dfletcher_ (~fletch@drupal.org/user/72475/view) has joined #haskell
2013-03-30 18:34:55	--	dfletcher_ is now known as dfletcher
2013-03-30 18:35:33	<--	asQuirreL (~asQuirreL@149.241.200.238) has quit (Quit: Computer has gone to sleep.)
2013-03-30 18:35:33	--	adu_ is now known as adu
2013-03-30 18:35:47	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-30 18:36:40	-->	pib1929 (~pib1929@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-30 18:36:45	-->	pib1948 (~pib1948@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-30 18:37:04	<--	argiopeweb (~elliot@155.31.73.125) has quit (Quit: Leaving)
2013-03-30 18:37:13	<--	eirikur (~eirikur@nova065-255.cust.nova.is) has quit (Ping timeout: 245 seconds)
2013-03-30 18:37:19	latermuse	ghci keeps giving me a Segmentation fault: 11 error. what does the 11 stand for?
2013-03-30 18:37:27	<--	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-03-30 18:37:28	-->	gabnet (~gabnet@ACaen-652-1-178-82.w86-215.abo.wanadoo.fr) has joined #haskell
2013-03-30 18:37:53	<--	pib1929 (~pib1929@your.friendly.media.team.coder.ark-cr.info) has quit (Remote host closed the connection)
2013-03-30 18:37:54	<--	pib1948 (~pib1948@your.friendly.media.team.coder.ark-cr.info) has quit (Remote host closed the connection)
2013-03-30 18:38:06	--	pepijndevos is now known as pepijn_away
2013-03-30 18:38:06	<--	neill_ (~neill@85.95.116.99) has quit (Quit: neill_)
2013-03-30 18:38:52	sipa	latermuse: it's the number of the signal (SIGSEGV)
2013-03-30 18:38:58	--	pepijn_away is now known as pepijndevos
2013-03-30 18:39:21	-->	neill_ (~neill@85.95.116.99) has joined #haskell
2013-03-30 18:39:25	geekosaur	what are you doing that causes the segfault? what platform?
2013-03-30 18:40:05	<--	neutrality (~user@cpe-68-175-107-229.nyc.res.rr.com) has quit (Ping timeout: 255 seconds)
2013-03-30 18:40:17	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 256 seconds)
2013-03-30 18:40:46	-->	pib1972 (~pib1972@your.friendly.media.team.coder.ark-cr.info) has joined #haskell
2013-03-30 18:41:01	-->	fizruk (~fizruk@83.149.9.52) has joined #haskell
2013-03-30 18:41:34	-->	asQuirreL (~asQuirreL@149.241.200.238) has joined #haskell
2013-03-30 18:41:37	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-03-30 18:41:42	-->	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has joined #haskell
2013-03-30 18:42:05	<--	fizruk (~fizruk@83.149.9.52) has quit (Remote host closed the connection)
2013-03-30 18:42:24	<--	wavewave (~wavewave@141-213-172-156.vpn.umnet.umich.edu) has quit (Read error: Operation timed out)
2013-03-30 18:42:26	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 246 seconds)
2013-03-30 18:42:47	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 246 seconds)
2013-03-30 18:42:59	<--	nus- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-03-30 18:43:16	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 18:43:52	-->	Radish (636746d9@gateway/web/freenode/ip.99.103.70.217) has joined #haskell
2013-03-30 18:44:14	Radish	I've been trying to run a .hs that uses a cabal installed package in ghci
2013-03-30 18:44:43	<--	nexx (~SPS-User@dslb-188-108-215-098.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-03-30 18:44:43	<--	silver (~silver@178.121.201.6) has quit (Read error: Connection reset by peer)
2013-03-30 18:44:49	Radish	the internet says i can use ghci -package foobar
2013-03-30 18:45:07	Radish	but how would i run my .hs with that setting?
2013-03-30 18:45:14	-->	normanrichards (~normanric@mobile-166-137-147-070.mycingular.net) has joined #haskell
2013-03-30 18:45:22	Radish	ghci foo.hs -package bar?
2013-03-30 18:45:26	Radish	or what?
2013-03-30 18:45:44	monochrom	yes
2013-03-30 18:45:52	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-03-30 18:45:53	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-03-30 18:46:04	monochrom	but I don't see why omitting "-package bar" matters
2013-03-30 18:47:15	Radish	it says it can't find the module
2013-03-30 18:47:29	Radish	http://stackoverflow.com/questions/3102164/how-do-i-get-ghci-to-see-packages-i-installed-from-cabal
2013-03-30 18:47:39	Radish	that's someone else's question there
2013-03-30 18:47:55	geekosaur	ghci should see it, unless you have multiple matching packages or something misconfigured
2013-03-30 18:47:56	-->	silver (~silver@178.120.10.133) has joined #haskell
2013-03-30 18:48:10	Radish	how do i back out of ghci and go back into the command prompt?
2013-03-30 18:48:20	<--	nus- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-03-30 18:48:24	monochrom	ok, but someone else's question has someone else's setup and context, and probably his/her setup is broken in the first place.
2013-03-30 18:48:32	-->	eirikur (~eirikur@nova082-255.cust.nova.is) has joined #haskell
2013-03-30 18:48:56	Radish	I used cabal install
2013-03-30 18:48:57	monochrom	:quit
2013-03-30 18:49:02	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-03-30 18:49:13	Radish	it builds but it throws an error when you use main
2013-03-30 18:49:19	--	irc: disconnected from server
2013-03-31 15:41:04	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-03-31 15:41:04	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-03-31 15:41:04	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-03-31 15:41:04	--	Nicks #haskell: [@ChanServ [1]papyrus [[zz]] [mth] \rs ]OLI[ __main__ __sg__ _anona _br_ _flow_ _janne `0660 `bps_ `micro `nand` `ramses aajmakin ab9rf absence acfoltzer Adeon adimit Adios adlan adnap aesptux aforemny AgentM agumonkey agundry ahf ahkurtz ajhager akahn akamaus akosch akraut alagabes alang alang_ alanz albel727 alcz aleator alejandrogomez alexander__b Alice3 alios alkabetz alnix alpounet alshain AmaBoten Amadiro amatsu amiller anachron anders^^ andrewsw aninhumer anRch AntiSpamMeta apaku Apocalisp araujo arcatan Argue aristid arkeet arkx armlessh1bo arnihr__ arpunk2 arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens_ bd_ Belgarion0 bens bergey` bergmark betawaffle bezik bgamari Bigcheese BigEndian BigTom birkenfeld blackmirroxx BlastHardcheese blithe BMeph_ bobry boegel bogner Boney Boreeas Botje_ brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson c_wraith Cale caleb_9 caligula_ Canar canta canvon carlocci ccasin ccxCZ cdidd celery__ Cerise certaint1 chance charliesome chessguy chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle citizen93 cjay cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 CodeDmitry cods colah collin comak companion_cube confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck creichert cross crs_ cryon Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr dario DarkFox Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 Derander descender dfghjklrtyui dfletcher DigitalK1wi dilinger_ djahandarie djanatyn dju dkasak dlundy dmarker DMcGill dmead dmwit dockside1 Dodek dogmaT dolio DolphR domingo dottedmag dqd Draconx Draggor drbean dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT` duairc_ dumbhat DustyDingo Dybber dyreshark EarlGray earthy edenc edon edwtjo Eelis eff ehamberg Eiam eirikur ejls eL_Bart0 electrogeek elgot Eliel elliott elliottc1ble em emmanuelux endojelly Enigmagic ent- Eridius ernst erpe Erstarrung Estrellas etabot ethercrow etrepum EvanR_ EvilPenguin eviltwin_ Excureo eyck f8 fabjan faen fall_ fayden fcr felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow flippo flori flux folone__ formalcow fotc freiksenet frio fro0t frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc_ gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gereedy ghorn gienah Gilly Gothmog_ Gracenotes greymalkin gseitz gspr guerrill1 Guest26164 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hamid hamishmack hanDerPeder harrison heath Heero Heffalump helgikrs henk hiptobecubic hiratara hiredman hiroaki hiroakip hiroyuki2 hive-mind hiyakashi homo_vitruvius horlicks hpaste hpc hpd hrehf hvr hyko IanKelling ibid Iceland_jack Icewing idnar ido idoru Igloo ijp ikeg ilias imphasing implr inr_ int-e integral_ Internet13 ion ique ISF iulian ivan\ ivan` ixian Jaak jabirali jackhill jaimef jamwt JaRoel|4d jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro jdoliner Jeanne-Kamikaze jedai jeff_s2 Jello_Raptor jercos jesyspa jix jlaire jlamothe jlewis jliikka_ jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop_ Jonno_FTW Jonte_ JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtobin julmuri junsuijin jyyou k00mi k0ral KaiSforza kakos kallisti kalven KaneTW kaol Ke kennyd kennyp ketil Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels kmicu kmrhb kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba_ kutta kvey kyle__ Kyo labo lahwran lambdabot Laney latermuse latro`a lazard LeaChim lennart_ lenstr leoncamel leroux Lethalman levi` lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb LucasCampos luite lulf lusory lzm m3ga Maarten_ machisuji magicman majoh maksbotan malorie_ mami mapf marienz Martty Masse^^ mateu mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx merijn MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 mikurubeam milessabin milli milStaja mimi_vx mirsal mixi mjr841 mjrosenb MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand Mon_Ouie monique_ monqy moonlite_ mornfall morolin mortberg Mortchek mrd mrdomino_ MrFenix_ mrkotfw mrshoe mspells mtao mullein munro mux myme n_b Nahra Nanar nardul Natch natte ndngvr` ndonaldson neena netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 Nimatek nimred ninegrid ninzine nlogax no-n noam_ noj noplamodo notdan NougatRillettes nouitfvf Nshag nulloid numeral nus- nwf nxorg8 oab obcode ocharles odj ofan oitnelis Okasu opqdonut ormaaj Ornedan ortmage osfameron osnr_ osxorgate othiym23 otterdam otters otto_s_ ousado ozataman ozgura PaksAway Palmik Pantoufle pantsman Paprikachu ParahSail1n ParahSailin parcs PartyKat1e PatrickRobotham pcapriotti pcl pdxleif_away peddie peltchu pepijndevos perlite petanqk petantik petekaz peterhil pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1972 piezoid pigoz pikhq plhk pnielsen Pods popz pqmodn pr predator117 preflex prh pricklypear prinnysocks profmakx ps-auxw Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ q66 quaestor quchen quicksilver quuxman qwandor qwr qz_ qzr r126l raek RageOfThou raid rainmaker Ralith Raynes Raynos Razz redjohn reiddraper Rembane RenJuan rexamophone rfw RichyB rio Riussi rmunroe robawt robbe- robbert rofer rossabaker rs0 rs234 rsimoes rul ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sarfraz saurik sawjig scgilardi schlicht schlumpi schovi schulenburg36 Scott_firebeta scottj Sculptor seats SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shintah SHODAN shutdown_-h_now si14 silver simon___ simpson sipa sirchurchill sjl skp skyflash skyflash_ SLi sm smarter snoyberg so Soft sohum solarus solirc sopvop sordina3 SoupEvil spacebark spligak_ Spockz sproingie Squid_Tamer srcerer staafl Starfire stat_vi statusfailed steez stelleg stepcut stephe stvc subbyyy suiside_ sully sunfun sunnavy supersym supki Swizec sysopfb tahu takumn tamiko tanakh Tarential taruti tavelram__ tazjin td123 tdammers TDJACR techlife Tehnix_ Tene tenmilestereo tensorpudding Tesseraction_a tessier_ tew88 tg tgeeky Th0mas Tharugrim The_third_man theDon theorbtwo thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome tim1 timemage tippenein tjgillies tkd tlaine tmiw TML tntc tobiassjosten tom4939 tomaw tomejaguar tomku tomprince ToRA Tordek trevize tridactyla trolling tromp_ ts33kr tsou tswett ttuegel tunixman tuv tvaalen twanvl_ Twey typoclass u_quark ulfdoz Ulrar Urchin User_ UziMonkey__ v__ Valodim Varakh vehk verrens Vert vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq VZakharov_ wagle walter Walther warpy___ Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wi wilfredh Will| Wizek wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii XMunkki_ xnyhps Xorlev xpika xplat xrl__ xrq` xunatai xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 YoungFrog yriw yumike Zariel zebr Zeev zeiris zenzike_ ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-03-31 15:41:04	--	Channel #haskell: 956 nicks (1 op, 0 halfops, 0 voices, 955 normals)
2013-03-31 15:41:05	typoclass	> map toLower "LOLcats"
2013-03-31 15:41:05	--	URL for #haskell: http://www.haskell.org/
2013-03-31 15:41:06	--	Mode #haskell [+CLcnpt]
2013-03-31 15:41:06	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-03-31 15:41:06	arkeet	Int and Integer is not a case of this: neither is more general than the other.
2013-03-31 15:41:06	lambdabot	  "lolcats"
2013-03-31 15:41:32	arkeet	however, both can be explicitly converted to any other Num type using fromIntegral.
2013-03-31 15:41:35	liyang	(Or down. It doesn't completely make sense either way I think about it.)
2013-03-31 15:41:36	arkeet	(for instance.)
2013-03-31 15:41:40	typoclass	__sg__: above is an example that in another language might be done with a for loop. in haskell you use the 'map' function, which takes a function that can process one element of the list (here: toLower, which converts one Char), and a list (here: String "LOLcats")
2013-03-31 15:42:09	__sg__	thanks a lot!
2013-03-31 15:42:09	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-03-31 15:42:19	typoclass	__sg__: the 'map' function is not special, it's a beginner-level exercise to reimplement it
2013-03-31 15:43:15	__sg__	elegant and powerful, thanks
2013-03-31 15:43:23	-->	IbnFirnas (uid6178@gateway/web/irccloud.com/x-vdxtggggbywzkimj) has joined #haskell
2013-03-31 15:43:37	-->	perspectival (~perspecti@dnat1-31.alfservis.cz) has joined #haskell
2013-03-31 15:43:48	typoclass	__sg__: oh, just to be clear -- when i say String, it means 'list of Char' :-) those are synonyms
2013-03-31 15:44:33	typoclass	@src map
2013-03-31 15:44:33	lambdabot	map _ []     = []
2013-03-31 15:44:33	lambdabot	map f (x:xs) = f x : map f xs
2013-03-31 15:45:42	typoclass	__sg__: here is the source code of the 'map' function. details aside, but you can see it's short and not complicated. also you can see that it's recursive, because in line 2, 'map' appears on the right-hand side of the "=", meaning we call the 'map' function
2013-03-31 15:46:18	-->	mplang (~michael@c-24-34-188-199.hsd1.ct.comcast.net) has joined #haskell
2013-03-31 15:46:32	<--	fro0t (~fro0t@1.23.70.22) has quit (Ping timeout: 256 seconds)
2013-03-31 15:46:43	<--	Guest26164 (~richard@121.99.114.251) has quit (Quit: irc2go)
2013-03-31 15:46:45	<--	Zeev (~me@109.64.24.117) has quit (Quit:  HydraIRC -> http://www.hydrairc.com <- The professional IRC Client :D)
2013-03-31 15:48:04	__sg__	typoclass: i'm coming from python and trying really hard to "refactor" my programming skills and to think like a haskell programmer
2013-03-31 15:48:11	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 260 seconds)
2013-03-31 15:48:13	__sg__	it's not easy
2013-03-31 15:48:43	-->	tac (4b1cb6d6@gateway/web/freenode/ip.75.28.182.214) has joined #haskell
2013-03-31 15:48:55	-->	execc_13 (~fakir@95-25-26-138.broadband.corbina.ru) has joined #haskell
2013-03-31 15:49:03	nulloid	__sg__, there are other functions, which work on lists, and those would be implemented using a for loop in imperative languages. Such functnios are folds, scans, maps. IIRC these are the mostly used. But they all just recursions in disguise.
2013-03-31 15:49:12	nulloid	I came from python to haskell, too ^
2013-03-31 15:49:16	nulloid	^^
2013-03-31 15:49:17	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-31 15:50:12	nulloid	also, it's not easy really. It took me about a year to get a grasp on the haskell way
2013-03-31 15:50:38	nulloid	(Am I frightening away people with this sentence?)
2013-03-31 15:50:45	merijn	__sg__: Did you use list comprehensions/generators a lot?
2013-03-31 15:51:04	__sg__	merijn: yes
2013-03-31 15:51:10	<--	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has quit (Quit: hello)
2013-03-31 15:51:26	-->	Zeev (~Zeev@109.64.24.117) has joined #haskell
2013-03-31 15:51:30	typoclass	__sg__: right, there's a clear difference :-) but the good news is, you can always ask in here. and getting the hang of the first few haskell idioms isn't difficult
2013-03-31 15:51:44	<--	zorzar (~zorzar@z.futw.eu) has quit (Ping timeout: 252 seconds)
2013-03-31 15:51:46	__sg__	generators are good but they don't seem as classy a solution as lazy evaluation
2013-03-31 15:52:20	__sg__	typoclass: thanks again
2013-03-31 15:52:35	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-03-31 15:52:42	quchen	__sg__: Generators solve a small subclass of problems you can tackle with lazy evaluation.
2013-03-31 15:52:48	quchen	They're not the same.
2013-03-31 15:53:00	nulloid	tht's what i wanted to ask. :D
2013-03-31 15:53:13	nulloid	+1 for mind-reading :D
2013-03-31 15:53:14	merijn	__sg__: Well, that's a good start already, list comprehensions and generators in python map pretty closely to list comprehensions in haskell. Although many people prefer to use map/filter instead of comprehensions
2013-03-31 15:53:18	quchen	Generators are pretty much lazy infinite lists.
2013-03-31 15:53:29	merijn	The translation from comprehension to straight map/filter/etc is pretty easy too
2013-03-31 15:54:01	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-03-31 15:54:27	nulloid	(also, comprehension-like things work in haskell, too)
2013-03-31 15:54:34	__sg__	so the gains in speed must be significant, plus the compiler thing of course
2013-03-31 15:54:35	-->	Digihash (~Digihash@193.190.147.188) has joined #haskell
2013-03-31 15:55:37	-->	Ghoul__ (uid6924@gateway/web/irccloud.com/x-wkvpktlzfgfeydsr) has joined #haskell
2013-03-31 15:56:06	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-03-31 15:56:30	typoclass	> [toLower x | x <- "LOLcats"] -- here is the earlier line rewritten as a list comprehension. the basic form is [... | ...]
2013-03-31 15:56:32	lambdabot	  "lolcats"
2013-03-31 15:57:28	merijn	__sg__: I personally think the best benefit is the type system, tbh
2013-03-31 15:57:53	-->	xorox90_ (uid7069@gateway/web/irccloud.com/x-fwmlgrpzngiowems) has joined #haskell
2013-03-31 15:57:55	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-03-31 15:58:19	arkeet	> map toLower "LOLcats"
2013-03-31 15:58:21	lambdabot	  "lolcats"
2013-03-31 15:58:23	<--	execc_13 (~fakir@95-25-26-138.broadband.corbina.ru) has left #haskell
2013-03-31 15:58:25	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-03-31 15:58:35	-->	inarenvi (~quassel@90.173.202.234) has joined #haskell
2013-03-31 16:01:30	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-03-31 16:01:56	typoclass	merijn: i suspect 'the compiler thing' == 'the type system' ;-)
2013-03-31 16:03:23	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Leaving...)
2013-03-31 16:03:32	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Quit: Quit: Textual IRC Client: www.textualapp.com)
2013-03-31 16:03:37	-->	charlesofarrell (uid7413@gateway/web/irccloud.com/x-vcxrslxgvtwgpulm) has joined #haskell
2013-03-31 16:04:33	nulloid	i suspect"thecompiler thing" == "being a compiled language, rather than interpreted"
2013-03-31 16:04:42	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-03-31 16:04:53	<--	xpika (~jrg@120.155.46.233) has quit (Ping timeout: 240 seconds)
2013-03-31 16:05:04	nulloid	sorry for my lack of spaces :)
2013-03-31 16:05:53	<--	Digihash (~Digihash@193.190.147.188) has quit (Ping timeout: 240 seconds)
2013-03-31 16:06:21	<--	zorzar (~zorzar@z.futw.eu) has quit (Ping timeout: 256 seconds)
2013-03-31 16:06:51	<--	perspectival (~perspecti@dnat1-31.alfservis.cz) has quit (Quit: Leaving.)
2013-03-31 16:07:10	-->	lennart__ (~lennart@kiel-4d0670e6.pool.mediaWays.net) has joined #haskell
2013-03-31 16:07:33	<--	predator117 (~predator1@p508063C7.dip.t-dialin.net) has quit (Ping timeout: 240 seconds)
2013-03-31 16:07:50	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-31 16:08:33	<--	lennart_ (~lennart@kiel-5f7680c8.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-03-31 16:08:35	-->	sonda (~sonda@ppp-181-37.26-151.libero.it) has joined #haskell
2013-03-31 16:08:59	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-03-31 16:09:04	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-03-31 16:09:06	-->	fro0t (~fro0t@1.23.70.22) has joined #haskell
2013-03-31 16:09:21	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-03-31 16:09:37	<--	Pods (0e8b5206@gateway/web/freenode/ip.14.139.82.6) has quit (Ping timeout: 245 seconds)
2013-03-31 16:11:08	<--	DMcGill (~DMcGill@host81-132-251-236.range81-132.btcentralplus.com) has quit (Ping timeout: 272 seconds)
2013-03-31 16:12:31	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-03-31 16:12:38	-->	zakora (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-31 16:13:00	<--	zakora (~zakora@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Client Quit)
2013-03-31 16:13:13	<--	tac (4b1cb6d6@gateway/web/freenode/ip.75.28.182.214) has quit (Quit: Page closed)
2013-03-31 16:13:18	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-31 16:13:33	<--	zorzar (~zorzar@z.futw.eu) has quit (Ping timeout: 240 seconds)
2013-03-31 16:14:03	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Remote host closed the connection)
2013-03-31 16:14:17	-->	kurkale6ka (~kurkale6k@b0fb867e.bb.sky.com) has joined #haskell
2013-03-31 16:14:18	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-03-31 16:14:29	`nand`	a compiler is an interpreter
2013-03-31 16:14:42	-->	xinming (~xinming@113.248.103.146) has joined #haskell
2013-03-31 16:15:12	-->	hajimehoshi (~hajimehos@209.118.182.66) has joined #haskell
2013-03-31 16:15:44	<--	EvilPenguin (~EvilPengu@174-28-72-209.albq.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-03-31 16:15:49	kurkale6ka	Hi, in this example I don't understand why we can pattern match with Left x: http://bpaste.net/show/87952/. Since Either a b is Left a | Right b, Shouldn't Either a be like b -> Right b only
2013-03-31 16:16:05	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-03-31 16:16:12	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 272 seconds)
2013-03-31 16:16:18	mauke	no, 'Either a' is not a type
2013-03-31 16:16:29	arkeet	:t fmap
2013-03-31 16:16:30	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-03-31 16:16:35	arkeet	replace f with "Either a", and you get
2013-03-31 16:16:41	mauke	name conflict
2013-03-31 16:16:42	arkeet	uh
2013-03-31 16:16:44	arkeet	:)
2013-03-31 16:16:47	mauke	let's alpha
2013-03-31 16:16:47	-->	augustl_ (uid10075@gateway/web/irccloud.com/x-cvdjodhytfkpngby) has joined #haskell
2013-03-31 16:16:47	nulloid	'nand', is it? o.o
2013-03-31 16:16:50	arkeet	after alpha-renaming,
2013-03-31 16:16:56	arkeet	(b -> c) -> Either a b -> Either a c
2013-03-31 16:17:24	mauke	kurkale6ka: fmap :: Functor f (x -> y) -> f x -> f y
2013-03-31 16:17:30	mauke	kurkale6ka: the argument in question has type f x
2013-03-31 16:17:35	mauke	kurkale6ka: f = Either a
2013-03-31 16:17:42	mauke	kurkale6ka: thus its type is Either a x
2013-03-31 16:17:49	<--	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has quit (Remote host closed the connection)
2013-03-31 16:18:43	arkeet	I guess x,y is better than b,c.
2013-03-31 16:18:55	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-03-31 16:19:00	mauke	heh
2013-03-31 16:19:04	mauke	except I forgot the =>
2013-03-31 16:19:14	mauke	fmap :: (Functor f) => (x -> y) -> f x -> f y
2013-03-31 16:19:32	-->	tanakh_ (~tanakh@186240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-03-31 16:19:42	`nand`	not starting nondescript single-letter variable names at the beginning of the alphabet? blasphemy!
2013-03-31 16:19:46	-->	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has joined #haskell
2013-03-31 16:20:00	<--	hajimehoshi (~hajimehos@209.118.182.66) has quit (Ping timeout: 272 seconds)
2013-03-31 16:20:12	<--	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has quit (Quit: anRch)
2013-03-31 16:20:27	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-03-31 16:20:42	quchen	:t fmap :: (Functor eats) => (rabbit -> mouse) -> eats rabbit -> eats mouse
2013-03-31 16:20:43	lambdabot	Functor eats => (rabbit -> mouse) -> eats rabbit -> eats mouse
2013-03-31 16:20:54	-->	timtom (~Thunderbi@2001:620:1a0:f:4c05:39bb:a895:5b42) has joined #haskell
2013-03-31 16:21:02	typoclass	kurkale6ka: keep in mind that the instance is Functor (Either a). it isn't Functor (Either a b) or something like that, because that would be impossible
2013-03-31 16:21:29	mauke	`nand`: Functor f => (α -> β) -> f α -> f β
2013-03-31 16:21:40	typoclass	kurkale6ka: it's similar to the instance Functor Maybe: http://www.haskell.org/ghc/docs/6.12.2/html/libraries/base-4.2.0.1/src/Data-Maybe.html#Maybe note how it's Functor Maybe, and not Functor (Maybe a)
2013-03-31 16:21:45	mauke	>implying there's only one alphabet
2013-03-31 16:22:16	parcs	there's only one real alphabet
2013-03-31 16:22:23	arkeet	mauke: you're not doing it enough.
2013-03-31 16:22:26	`nand`	mauke: my statement was polymorphic in which alphabet you actually use
2013-03-31 16:22:32	arkeet	Functor φ => (α -> β) -> φ α -> φ β
2013-03-31 16:22:53	-->	predator117 (~predator1@p508063C7.dip.t-dialin.net) has joined #haskell
2013-03-31 16:22:55	`nand`	transliterate ‘Functor’
2013-03-31 16:22:56	parcs	ascii arrows are for chumps
2013-03-31 16:23:02	-->	perspectival (~perspecti@dnat1-31.alfservis.cz) has joined #haskell
2013-03-31 16:23:04	--	DarkFox is now known as Ox3195
2013-03-31 16:23:33	--	Ox3195 is now known as Ox52342
2013-03-31 16:23:38	mauke	don't make me use 'a', 'l', 'p', 'h'
2013-03-31 16:23:46	-->	mjga (~mjga@aaij149.neoplus.adsl.tpnet.pl) has joined #haskell
2013-03-31 16:24:00	kurkale6ka	Not sure to follow, isn't Either a b a type constructor taking two types? Then isn't Either a a type constructor taking only one type and from Either's definition shouldn't the result be Right b. My question is more about pattern mathing than trying to understand funcors
2013-03-31 16:24:05	kurkale6ka	functors
2013-03-31 16:24:24	--	Ox52342 is now known as DarkFox
2013-03-31 16:24:25	arkeet	kurkale6ka: no, Either is a type constructor taking two types.
2013-03-31 16:24:29	`nand`	id :: א → א -- and I don't know any others
2013-03-31 16:24:33	arkeet	Either a b is what you get after you've already given it two types.
2013-03-31 16:24:47	<--	JaRoel|4d (~jaroel|4d@178-85-196-53.dynamic.upc.nl) has quit (Remote host closed the connection)
2013-03-31 16:24:47	latro`a	Foo a = Either a a is a functor, but a silly one
2013-03-31 16:24:49	-->	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has joined #haskell
2013-03-31 16:24:51	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-03-31 16:24:54	<--	nulloid (nulloid@ip59934dbb.rubicom.hu) has quit (Quit: Leaving)
2013-03-31 16:24:54	latro`a	(that's a type equality)
2013-03-31 16:25:19	arkeet	??
2013-03-31 16:25:24	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-03-31 16:25:29	latro`a	well rather, the specialization of the usual functor is one, and the "treat Left and Right the same" is also one
2013-03-31 16:25:33	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-03-31 16:25:39	arkeet	it's (Bool,a)
2013-03-31 16:25:51	-->	Vertue (uid10621@gateway/web/irccloud.com/x-yihfqgysyuiemoeh) has joined #haskell
2013-03-31 16:26:42	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-03-31 16:27:18	`nand`	Bar a b = Either b a -- is also a functor
2013-03-31 16:27:27	`nand`	Bar a is
2013-03-31 16:27:50	mauke	kurkale6ka: your question seems to be about type definitions
2013-03-31 16:28:11	mauke	kurkale6ka: "Right b" can't be the result of anything
2013-03-31 16:28:28	typoclass	kurkale6ka: well, in the definition of class Functor, you have stuff like "class Functor f where fmap :: ... -> f a -> f b". this means that f (for which your instance used (Either a)) needs to be kind * -> *, meaning it takes one type argument. compare with Maybe, which also has the right kind, so you can define an "instance Functor Maybe"
2013-03-31 16:29:14	mauke	oh, good idea
2013-03-31 16:29:27	mauke	let's switch from Either a to Maybe
2013-03-31 16:29:39	mauke	'Maybe' is not a type, and it does not have a value called 'Nothing'
2013-03-31 16:29:58	<--	[1]papyrus (papyrus@119.199.107.183) has quit (Quit:  HydraIRC -> http://www.hydrairc.com <- The alternative IRC client)
2013-03-31 16:30:12	Philonous	mauke:  Apparently there's some disagreement about whether "Maybe" is a type or not.
2013-03-31 16:30:27	mauke	heh
2013-03-31 16:30:34	arkeet	well the disagreement is about what "type" means.
2013-03-31 16:30:37	mauke	"'Maybe' does not have kind *" then
2013-03-31 16:30:37	-->	mtlatif (uid10708@gateway/web/irccloud.com/x-uptkuastscxxvsbf) has joined #haskell
2013-03-31 16:31:14	ab9rf	i thought that Maybe was an instance constructor
2013-03-31 16:31:18	-->	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-03-31 16:31:31	Philonous	ab9rf:  It's a type constructor
2013-03-31 16:31:35	`nand`	I have no idea what an instance constructor is
2013-03-31 16:31:46	ab9rf	Philonous: Either is a type constructor
2013-03-31 16:31:55	`nand`	so is Maybe
2013-03-31 16:31:56	geekosaur	type constructor. it is of kind * -> *, it takes a type and produces a type
2013-03-31 16:32:11	-->	sw17ch (uid10745@gateway/web/irccloud.com/x-wzdenvfympxxfjfi) has joined #haskell
2013-03-31 16:32:17	geekosaur	Either is also a type constructor, it has a different kind, indicating it takes *two* types
2013-03-31 16:32:23	geekosaur	and produces a type
2013-03-31 16:32:23	ab9rf	Sorry, yes, Maybe is a type cosntructor
2013-03-31 16:32:28	ab9rf	Just and Nothing are the data constructors
2013-03-31 16:32:29	`nand`	I would refer to as ‘type constructor’ anything of kind ‘a -> b’, not necessarily just *
2013-03-31 16:32:31	typoclass	Philonous: who is disagreeing ...? did i make a typo?
2013-03-31 16:32:41	ab9rf	i had a senior moment there
2013-03-31 16:33:13	ab9rf	had Maybe confused with Just
2013-03-31 16:33:20	<--	timtom (~Thunderbi@2001:620:1a0:f:4c05:39bb:a895:5b42) has quit (Ping timeout: 246 seconds)
2013-03-31 16:33:42	--	stelleg is now known as stelleg_away
2013-03-31 16:34:51	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-03-31 16:35:56	Philonous	typoclass:  I'm not sure what you mean, I was just saying that there have been discussions in here about whether type means "Thing with with kind *" or "Things in the type level"
2013-03-31 16:36:02	-->	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has joined #haskell
2013-03-31 16:36:06	-->	trescenzi (~trescenzi@148.100.72.119) has joined #haskell
2013-03-31 16:36:36	typoclass	Philonous: oh i see :-) i thought i had made a typo and written that Maybe is a type
2013-03-31 16:37:39	`nand`	“things in the type level” includes stuff of kind :: * -> Constraint -- or similar as well, I'm not sure I'd be comfortable calling that a ‘type’ mainly for clarity concerns
2013-03-31 16:37:53	Philonous	typoclass:  Oh, then my reply must have seemed terribly sarcastic.
2013-03-31 16:38:06	arkeet	it's a "constraint constructor:
2013-03-31 16:38:07	arkeet	"
2013-03-31 16:38:27	Philonous	`nand`:  I'm afraid I'm not representing the other side of the argument faithfully.
2013-03-31 16:38:38	`nand`	arkeet: following that line of thought, a type constructor would be anything of kind ‘... → ... → ... → *’ ?
2013-03-31 16:38:47	typoclass	Philonous: no, didn't seem sarcastic, i was just worried i'm making an ass of myself again :-)
2013-03-31 16:38:56	arkeet	`nand`: of course.
2013-03-31 16:39:00	<--	inarenvi (~quassel@90.173.202.234) has quit (Ping timeout: 272 seconds)
2013-03-31 16:39:05	`nand`	I think I could live with that
2013-03-31 16:39:14	typoclass	`nand`: the whole Constraint stuff is a fairly new addition, isn't it
2013-03-31 16:39:19	Philonous	typoclass:  Even if you did write that it would be a defensible position.
2013-03-31 16:39:20	`nand`	typoclass: yes
2013-03-31 16:39:30	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-03-31 16:39:30	`nand`	typoclass: and not part of Haskell either
2013-03-31 16:40:03	<--	AgentM (~AgentM@74.64.32.157) has quit (Quit: Leaving.)
2013-03-31 16:40:13	<--	folone__ (~folone@brln-4dbc2928.pool.mediaWays.net) has quit (Quit: Leaving)
2013-03-31 16:40:55	<--	trescenzi (~trescenzi@148.100.72.119) has quit (Ping timeout: 256 seconds)
2013-03-31 16:41:46	typoclass	`nand`: how do you mean 'not part of haskell'? i thought it was the ConstraintKinds extension that arrived with ghc 7.6 (or 7.4?)
2013-03-31 16:41:59	arkeet	it's not part of any haskell standard.
2013-03-31 16:42:09	`nand`	typoclass: GHC extensions are not Haskell :)
2013-03-31 16:43:26	-->	ludamad (~adomurad@dsl-67-55-7-8.acanac.net) has joined #haskell
2013-03-31 16:43:31	typoclass	`nand`: oh ok. fine. i'll count that under 'just trying to be confusing for public amusement' :-)
2013-03-31 16:43:36	Philonous	I wonder how many packages on hackage actually contain Haskell.
2013-03-31 16:43:40	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Quit: Leaving...)
2013-03-31 16:44:20	`nand`	typoclass: well, nomenclature stuff like this is probably best to consider in terms of the actual Haskell standard without fancy extensions
2013-03-31 16:45:16	--	irc: disconnected from server
2013-04-02 10:42:17	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-02 10:42:17	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-02 10:42:17	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-02 10:42:17	--	Nicks #haskell: [@ChanServ [[zz]] ]OLI[ __main__ _anona _flow_ _g _janne `0660 `^_^v `bps `micro `nand` aajmakin ab9rf absence acfoltzer Adeon adimit Adios adlan adnap aforemny agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang alang_ albel727 alcz aleator alejandrogomez alexander__b Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amatsu amiller anachron anders^^ andrewsw aninhumer AntiSpamMeta anyfoo apaku Apes apfel araujo arbn ARCADIVS arcatan argiopeweb args[0] aristid arkeet arkx armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur augustl averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens_ bd_ Belgarion0 ben_d bens bergey` bergmark betawaffle bezik bgamari Bigcheese BigEndian birkenfeld bitonic blackmirroxx BlastHardcheese blithe blz37 BMeph_ BobFunk bobry bogner Boney Boreeas Botje_ bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey bytbox c_wraith cads Cale caleb_9 caligula_ Canar canta canvon ccasin ccxCZ cdh473__ cduez ceii celery__ Cerise certaint1 chance charlesofarrell charliesome chenwl chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods colah_ comak companion_cube confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross crs_ cryon_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr danvet dario DarkFox Dashkal davean davorak dcoutts deavidsedice Deewiant def-lkb_ dennda dented42 Derander descender|2 dfletcher DigitalK1wi dilinger_ dixie djahandarie djcoin dju dkasak dlundy dmarker dmwit dockside1 Dodek dogmaT dolio DolphR domingo donri doomlord doshitan_ dottedmag dqd Draconx Draggor drbean dreixel drek_ drewr drmegahertz dropdrive DrSyzygy_ dsantiago DT` duairc_ dumbhat DustyDingo Dybber dyreshark dysinger eacameron EarlGray earthy edeast edenc edsko edtsech edwardk edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 eldariof electrog1ek elgot Eliel elliott elliottcable em Enigmagic enquora ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot ethercro1 ethercrow etrepum eviltwin_ Excureo eyck f8 fabjan faen fall_ fayden fcr_ felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow flebron floatingman flori flux formalcow fosky fotc Franciman freiksenet frio frontendloader froztbyte fryguybob frz_ ft Fubar^ Fuco fumieval Fuuzetsu fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gereedy ghorn Ghoul__ gienah Gilly glguy Gothmog_ Gracenotes greymalkin gseitz_ gspr guerrill1 Guest34459 Guest62788 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamid hamilyon hamishmack hanDerPeder harrison heath Heffalump helgikrs henk hiptobecubic hiratara hiredman hiroyuki2 hive-mind homo_vitruvius horlicks hpaste hpc hpd hrehf hvr hychen hyko IanKelling ibid IbnFirnas Iceland_jack idnar ido idoru Igloo igstan ijp imphasing implr inr_ int-e integral_ Internet13 ion ique isenmann ISF isomorphic itemad Itkovian iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jaimef jamwt jang JaRoel jaroslaw jaspervdj Jaxan jayne jbauman jbu jcp|u jdnavarro jdoliner jeff_s2 Jello_Raptor jercos Jessin jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte joshthecoder_ JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyyou k0ral kadoban Kaictl kakos kalven KaneTW kaol kaoskorobase kazimir42 kcj Ke kennyd kennyp kerrick ketil kfish Khisanth killy9999 kini Kinnison KitB_ kith kk` kkris kloeri klugez kmels__ kmicu kmrhb kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba_ kushal kvey kyle__ lahwran lambdabot Laney latermuse latro`a_ lattenwald lazard lcfrs LeaChim LeNsTR|away leoncamel leroux Lethalman levi` Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luite Luke lulf lunarjar lusory lzm m3ga Maarten_ machisuji_ magicman mahogny majoh maksbotan malorie_ mami mapreduce marienz Martty Masse^^ mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn message144 MetaCosm meyersh miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjr841 MK_FG mkouhei mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand Mon_Ouie monique_ moonlite_ mornfall morolin mortberg Mortchek mrd MrFenix mrko mrshoe mspells msuszczy mtao mtlatif mullein munro museun mux myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` neena netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola niloc132 Nimatek nimred ninegrid ninzine Nisstyre nlogax no-n noam noj noplamodo notdan NougatRillettes Nshag numeral_ nus nwf oax ocharles ofan OlegYch opqdonut ormaaj Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s ousado ozataman ozgura Paks Palmik Pantoufle ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e path[l] PatrickRobotham pcapriotti pdxleif_away peddie peltchu pepijn_away perlite petanqk peterhil pettter pfoetchen pharaun phaul Philippa Philonous_ PHO_ pib1972 pigoz pikhq piotr plhk plutoniix pnielsen popz pqmodn pr predator117 preflex prh prinnysocks profmakx prophile ps-auxw Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ qrlr quaestor quchen quicksilver quuxman qwandor qwr qz_ r126l raek raid rainmaker Ralith ramses_ RayNbow`TU Raynes Raynos Razz reckler redjohn reggie1 reiddrap- Rembane RenJuan rexamophone rfw rio Riussi rmunroe robawt robbe- robbert roconnor rofer rossabaker Rotaerk rs0 rs234 rsimoes rul_ ryanakca s00pcan s3mi0 s4msung s_quark SaBer saep Sagi saiam Saizan sajith samedhi sanemat_ saurik sawgij scgilardi schlumpi schovi Scott_firebeta seafood seats SegFaultAX sellout seq99 setmeaway2 Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb Shin-LaC shintah SHODAN shutdown_-h_now si14 silver simon___ simpson sipa sirchurchill sjl skp skyflash skyflash_ SLi sm smarter snowylike snoyberg so Soft sohum solarus solirc Sonderblade sopvop sordina3 SoupEvil spacebark spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire statusfailed steez_ stelleg_away stepcut stephe suiside sully sunfun sunnavy supernumeraryshi supersym supki sw17ch sw2wolf synonymous sysopfb t7 tahu takumn tamiko tanakh Taneb Tarential taruti tavelram__ tazjin td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas The_third_man theDon theorbtwo TheRedMood therp thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threeday1onk threesome tim1 tippenein tjgillies tkd tlaine tmiw TML tntc tobiassjosten tom4939 tomaw tomejaguar tomh__ tomku tomprince ToRA Tordek trevize_ tridactyla tromp_ tsou tswett ttuegel tunixman tuv tvaalen Twey Twisol tzxn3 u_quark ulfdoz Urchin User_ UziMonkey__ v Valodim Varakh vehk verrens Vert Vertue vhz_ vikraman vili vmeson vobi Volstvok Vorpal voyd Vq vraid vramana VZakharov_ wagle walter|r Walther warpy Watcher7|off waterlaz wchun wei2912 weie_ wereHamster whaletechno WhereIsMySpoon whoops wilfredh william-s Will| wjlroe wollw wormphlegm wting wto_ wtw wumpus wunki x7_ xaimus xcvii_ xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xpika xplat xrl__ xrq` xunatai xymox yam yan_ yano yansal yeltzooo yezariaely yiannis_1 yoodit YoungFrog yriw yumike zebr Zeev_ zeiris zenzike zhulikas ziman zoktar zomg zorzar Zouppen zwiebel zxq9 zz__ Zzompp]
2013-04-02 10:42:17	--	Channel #haskell: 983 nicks (1 op, 0 halfops, 0 voices, 982 normals)
2013-04-02 10:42:19	--	Mode #haskell [+CLcnpt]
2013-04-02 10:42:19	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-02 10:42:20	--	URL for #haskell: http://www.haskell.org/
2013-04-02 10:42:31	Ralith	perhaps freenode allows for this in its line length announcement
2013-04-02 10:42:46	Ralith	all I know is that I've never seen nor heard of the script failing
2013-04-02 10:42:52	shachaf	Cale: Did you get my message about the quotes file?
2013-04-02 10:42:53	donri	perhaps. i think they have a bunch of spec uncompliant extensions and work arounds
2013-04-02 10:42:54	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-02 10:43:08	Ralith	idk about uncompliant
2013-04-02 10:43:10	<--	bergmark (~adnam@atmat.net) has left #haskell
2013-04-02 10:43:15	<--	noam (~noam@213.57.201.130) has quit (Ping timeout: 260 seconds)
2013-04-02 10:43:23	Ralith	the IRC spec is not terribly constraining
2013-04-02 10:43:38	donri	i remember it saying specifically exactly 512 bytes
2013-04-02 10:43:43	donri	but i could be misremembering :)
2013-04-02 10:43:45	Cale	shachaf: Maybe? No?
2013-04-02 10:44:02	<--	ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-04-02 10:44:05	shachaf	Cale: I sent it via @ask at one point.
2013-04-02 10:44:14	Ralith	donri: it does, iirc.
2013-04-02 10:44:25	shachaf	I wanted to take whatever the latest version of the quotes file that you have is and scan through the logs to add all the missing quotes that were @remembered in #haskell.
2013-04-02 10:44:34	Cale	okay
2013-04-02 10:44:44	donri	you used lambdabot's database to communicate backups for lambdabot's frail database?
2013-04-02 10:44:58	Cale	donri: ?
2013-04-02 10:45:06	Ralith	donri: I meant that networks making a maximum length announcement might incorporate knowledge of the server names.
2013-04-02 10:45:09	donri	shachaf: chrisdone made an export based on his ircbrowse db
2013-04-02 10:45:27	shachaf	donri: Yes, but lambdabot has a lot of quotes that weren't @remembered in this channel.
2013-04-02 10:45:38	shachaf	Some of those are probably gone forever. So it goes.
2013-04-02 10:45:39	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: Muthsera.)
2013-04-02 10:45:42	donri	aha
2013-04-02 10:46:33	-->	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-02 10:47:44	donri	Cale: well the quotes db got lost didn't it? and i've added the same @where thing like 5 times :)
2013-04-02 10:47:47	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-04-02 10:48:01	 *	hackagebot family-tree 0.4.1.0 - A family tree library for the Haskell programming language.  http://hackage.haskell.org/package/family-tree-0.4.1.0 (NathanVanDoorn)
2013-04-02 10:48:02	donri	but we all love lambdabot anyway
2013-04-02 10:48:29	Cale	I don't know, lambdabot's storage seems incredibly unreliable, and it sometimes just zeroes out files without warning
2013-04-02 10:48:38	Cale	I have no idea why
2013-04-02 10:48:50	<--	ijp (~user@host86-168-32-218.range86-168.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-04-02 10:48:58	shachaf	I think publishing the latest lambdabot State somewhere public regularly would be a good thing.
2013-04-02 10:49:08	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 256 seconds)
2013-04-02 10:49:09	shachaf	Well, I guess @tell is part of the lambdabot state...
2013-04-02 10:49:41	Cale	I think maybe someone fixing the way that lambdabot stores state would also be good :P
2013-04-02 10:49:56	quchen	I think Lambdabot's quotes that haven't been @quote-d in the IRC logs are probably forgotten not only in the "it's not in the db" sense.
2013-04-02 10:50:03	shachaf	There are many changes that lambdabot could use.
2013-04-02 10:50:11	shachaf	I don't think fixing the state is even the highest-priority one.
2013-04-02 10:50:12	Cale	Yeah
2013-04-02 10:51:23	-->	folone (~folone@91.102.12.198) has joined #haskell
2013-04-02 10:51:26	-->	cyril_ (cyril@nat/intel/x-zynqfduyfpbkwzua) has joined #haskell
2013-04-02 10:53:59	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-02 10:54:33	yezariaely	slightly OT: Anyone knows of a scientific publication where the advantages/disadvantages of untyped/dynamically typed languages are described and investigated which are often named? (rapid prototyping, lot of testing and such …)
2013-04-02 10:54:50	<--	cmears (~Chris@2001:388:608c:4c58:92b1:1cff:fe72:d0ce) has quit (Read error: Connection reset by peer)
2013-04-02 10:55:24	donri	yezariaely: http://evanfarrer.blogspot.ca/2012/06/unit-testing-isnt-enough-you-need.html
2013-04-02 10:55:42	donri	duno about "scientific"
2013-04-02 10:56:10	donri	oh it links a paper at the bottom
2013-04-02 10:56:10	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-04-02 10:56:26	hiptobecubic	yezariaely, I think you'll have trouble finding a peer reviewed paper about what is essentially a religious war :)
2013-04-02 10:56:54	-->	[mth] (~mth@120.154.144.18) has joined #haskell
2013-04-02 10:57:06	-->	fro0t (~fro0t@1.23.68.89) has joined #haskell
2013-04-02 10:57:07	yezariaely	hiptobecubic: well that is exactly my question ;-) is it a religious war or can the advantage in certain situations be proven ;-)
2013-04-02 10:57:34	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-02 10:57:47	donri	brb
2013-04-02 10:57:48	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Quit: Leaving)
2013-04-02 10:58:06	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-04-02 10:58:24	-->	rafsoaken (~rafsoaken@chello084112142164.3.11.vie.surfer.at) has joined #haskell
2013-04-02 11:00:31	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-04-02 11:00:41	<--	rafsoaken (~rafsoaken@chello084112142164.3.11.vie.surfer.at) has quit (Client Quit)
2013-04-02 11:00:53	yezariaely	donri: thx. The thesis linked at the bottom might be worth a look.
2013-04-02 11:01:24	yezariaely	though it seems to be slightly off focus.
2013-04-02 11:01:37	-->	ari (ari@tuomi.oulu.fi) has joined #haskell
2013-04-02 11:01:53	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 11:02:06	donri	ah yeah i misread your question
2013-04-02 11:02:10	donri	somewhat relevant though
2013-04-02 11:02:51	ari	Where's lambdabot's Expr defined again? I tried to @info it but that wasn't very informative...
2013-04-02 11:03:02	ari	> a + b -- what lets you do this, that is
2013-04-02 11:03:03	lambdabot	  a + b
2013-04-02 11:03:26	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 246 seconds)
2013-04-02 11:03:26	quicksilver	package called numbers I think
2013-04-02 11:03:30	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 11:03:43	quicksilver	nope, that is CReal
2013-04-02 11:03:45	 *	quicksilver tries again
2013-04-02 11:03:50	quchen	ari: SimpleReflect
2013-04-02 11:03:57	-->	kdas_ (kdas@nat/redhat/x-gnbwhasodfarqazr) has joined #haskell
2013-04-02 11:03:57	quicksilver	simple-reflect
2013-04-02 11:04:09	quicksilver	http://hackage.haskell.org/package/simple-reflect-0.3.1
2013-04-02 11:04:21	ari	quchen, quicksilver: ty
2013-04-02 11:04:37	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Ping timeout: 248 seconds)
2013-04-02 11:04:42	<--	roconnor (~roconnor@e120-pool-d89a6fad.brdbnd.voicenetwork.ca) has quit (Ping timeout: 256 seconds)
2013-04-02 11:04:43	quchen	donri: Thanks for the link to the blog post above, seems interesting!
2013-04-02 11:06:13	<--	flori (flori@irc.ping.de) has quit (Quit: leaving)
2013-04-02 11:06:24	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 256 seconds)
2013-04-02 11:06:26	-->	flori (flori@irc.ping.de) has joined #haskell
2013-04-02 11:06:58	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 256 seconds)
2013-04-02 11:07:32	--	kdas_ is now known as kushal
2013-04-02 11:07:42	<--	kushal (kdas@nat/redhat/x-gnbwhasodfarqazr) has quit (Changing host)
2013-04-02 11:07:42	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-04-02 11:08:50	<--	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-02 11:10:32	-->	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has joined #haskell
2013-04-02 11:10:33	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Ping timeout: 240 seconds)
2013-04-02 11:14:32	<--	ozgura (~ozgura@host-2-96-30-184.as13285.net) has quit (Remote host closed the connection)
2013-04-02 11:14:58	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-02 11:15:22	--	certaint1 is now known as certainty
2013-04-02 11:16:37	<--	Internet13 (chat@92.233.64.26) has quit (Quit: Leaving)
2013-04-02 11:17:54	-->	Internet13 (~chatzilla@cpc26-croy20-2-0-cust25.19-2.cable.virginmedia.com) has joined #haskell
2013-04-02 11:17:57	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 248 seconds)
2013-04-02 11:18:32	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-02 11:18:43	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-04-02 11:18:51	-->	arenz (arenz@nat/ibm/x-jutkurxcluyttkbj) has joined #haskell
2013-04-02 11:20:10	--	x7_ is now known as x7
2013-04-02 11:21:16	<--	sw2wolf (~czsq888@171.217.3.80) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-02 11:21:53	-->	etehtsea (~textual@109.205.253.9) has joined #haskell
2013-04-02 11:23:32	--	cyril_ is now known as cyril__
2013-04-02 11:23:38	--	cyril__ is now known as cyril_
2013-04-02 11:24:30	<--	cyril_ (cyril@nat/intel/x-zynqfduyfpbkwzua) has quit (Quit: leaving)
2013-04-02 11:24:48	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Ping timeout: 264 seconds)
2013-04-02 11:25:44	-->	rafsoaken (~rafsoaken@mail.secretarysearch.at) has joined #haskell
2013-04-02 11:27:08	-->	fsef (~fsef@121.99.114.251) has joined #haskell
2013-04-02 11:29:46	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-04-02 11:30:51	<--	Botje_ (~Botje@d51A4033C.access.telenet.be) has quit (Ping timeout: 252 seconds)
2013-04-02 11:31:37	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Read error: Connection reset by peer)
2013-04-02 11:31:45	-->	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-02 11:32:20	-->	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 11:32:29	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 245 seconds)
2013-04-02 11:32:46	-->	heruur (~tvh@dslb-188-102-023-253.pools.arcor-ip.net) has joined #haskell
2013-04-02 11:32:50	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Read error: Connection reset by peer)
2013-04-02 11:33:03	-->	nooodl (~nooodl@91.177.109.136) has joined #haskell
2013-04-02 11:33:25	<--	otend (~otend@c-69-242-188-14.hsd1.mo.comcast.net) has quit (Ping timeout: 248 seconds)
2013-04-02 11:33:40	-->	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 11:33:55	-->	dncr (~dncr@111.193.174.148) has joined #haskell
2013-04-02 11:34:19	-->	morazow (~morazow@gsd111.gsd.inesc-id.pt) has joined #haskell
2013-04-02 11:34:46	<--	u_quark (~u_quark@athedsl-352921.home.otenet.gr) has quit (Quit: Leaving.)
2013-04-02 11:35:01	<--	etehtsea (~textual@109.205.253.9) has quit (Ping timeout: 248 seconds)
2013-04-02 11:35:04	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 11:35:13	dncr	Best way to parse heterogenous JSON data?  It's a list (sometimes of lists.. (etc.)) of integers.  E.g. "[1, [2]]".
2013-04-02 11:36:01	Kinnison	use a JSON parser?
2013-04-02 11:36:11	donri	dncr: see the aeson package
2013-04-02 11:36:18	donri	it defines a sum type of the json types
2013-04-02 11:36:52	quchen	Sum type as in "big Either"?
2013-04-02 11:37:07	dncr	Ah
2013-04-02 11:37:17	-->	jeyb (~jeyb@CPE001cf06a25db-CM7cb21b1799d6.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 11:37:18	dncr	Ae.decode (BSLC.pack "[1, [2]]") :: Maybe [Ae.Value]
2013-04-02 11:37:35	dncr	donri: thank you
2013-04-02 11:37:46	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-04-02 11:38:36	dncr	or more recursion friendly just to go to :: Maybe Ae.Value
2013-04-02 11:38:39	<--	hrehf (~s@p4FDB6189.dip.t-dialin.net) has quit (Quit: bfg)
2013-04-02 11:38:57	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-04-02 11:39:10	-->	kartoffelbrei (~kartoffel@p5497922F.dip0.t-ipconnect.de) has joined #haskell
2013-04-02 11:39:13	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 240 seconds)
2013-04-02 11:39:21	-->	hychen (~hychen@175.41.48.77) has joined #haskell
2013-04-02 11:40:35	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 256 seconds)
2013-04-02 11:40:58	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-04-02 11:40:58	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 11:41:32	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 11:41:35	<--	jeyb (~jeyb@CPE001cf06a25db-CM7cb21b1799d6.cpe.net.cable.rogers.com) has quit (Ping timeout: 246 seconds)
2013-04-02 11:44:04	<--	dncr (~dncr@111.193.174.148) has quit (Quit: leaving)
2013-04-02 11:44:36	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-04-02 11:45:06	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-04-02 11:45:33	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 240 seconds)
2013-04-02 11:45:36	-->	MroiZo (~oizo@94.191.187.193.mobile.3.dk) has joined #haskell
2013-04-02 11:45:41	<--	MroiZo (~oizo@94.191.187.193.mobile.3.dk) has left #haskell
2013-04-02 11:45:57	-->	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has joined #haskell
2013-04-02 11:47:20	<--	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-02 11:47:59	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-04-02 11:47:59	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Client Quit)
2013-04-02 11:48:04	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-04-02 11:48:26	quchen	Is there some easy way of converting a ThreadId to an Int?
2013-04-02 11:48:36	quchen	... or some other integer type at least
2013-04-02 11:50:30	bitonic	jaspervdj: I added this regarding what we talked about yesterday <https://github.com/jaspervdj/hakyll/issues/130>.  I’d do it myself if I had more familiarity with hakyll (which probably will be the case in a bit...)
2013-04-02 11:50:32	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-04-02 11:51:15	kartoffelbrei	quchen: Why do you want that? Besides the only way  can think of is to (ab)use read and show.
2013-04-02 11:52:58	quchen	kartoffelbrei: Right now I basically want to write a nicer way to print it. But beyond that I could imagine it being useful too, e.g. as a RNG seed maybe
2013-04-02 11:53:23	quchen	Provided you want your deterministic RNG to be more deterministic :-)
2013-04-02 11:54:16	bitonic	quchen: you can hack a ThreadId -> Int from the Show instances.  the methods that convert to a CInt are not exported
2013-04-02 11:55:13	-->	noam (~noam@213.57.201.130) has joined #haskell
2013-04-02 11:55:27	<--	mkouhei (~maeda_koh@124x35x68x250.ap124.ftth.ucom.ne.jp) has left #haskell
2013-04-02 11:55:28	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-04-02 11:55:30	<--	fosky (~fosky@ppp118-209-78-45.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-04-02 11:56:03	quchen	bitonic: That's so hacky I'd rather not convert to Int at all ;-)
2013-04-02 11:56:14	bitonic	quchen: which is probably the better idea to begin with.
2013-04-02 11:56:24	quchen	Reminds me of http://new-hackage.haskell.org/package/acme-php
2013-04-02 11:56:37	-->	iago (~iago@gwlmf.di.uminho.pt) has joined #haskell
2013-04-02 12:00:23	-->	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has joined #haskell
2013-04-02 12:00:37	-->	dmos (~dmos@ppp-124-120-132-253.revip2.asianet.co.th) has joined #haskell
2013-04-02 12:01:11	<--	SoupEvil (~jloos@f054173012.adsl.alicedsl.de) has quit (Ping timeout: 246 seconds)
2013-04-02 12:01:13	-->	skchrko (~sk@31.28.233.39) has joined #haskell
2013-04-02 12:01:35	<--	eirikur (~eirikur@136-111-22-46.fiber.hringdu.is) has quit (Remote host closed the connection)
2013-04-02 12:02:12	kartoffelbrei	that's gruesome
2013-04-02 12:02:23	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 12:02:46	-->	piotr_ (~quassel@e178088237.adsl.alicedsl.de) has joined #haskell
2013-04-02 12:03:01	-->	SoupEvil (~jloos@e177165002.adsl.alicedsl.de) has joined #haskell
2013-04-02 12:03:17	<--	piotr (~quassel@e178074165.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-04-02 12:03:45	arkeet	haha, notElem
2013-04-02 12:03:47	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 255 seconds)
2013-04-02 12:05:00	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-04-02 12:05:04	arkeet	cos x = sin (x + 90)
2013-04-02 12:05:07	arkeet	my sides.
2013-04-02 12:05:31	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-04-02 12:05:35	-->	`cc` (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has joined #haskell
2013-04-02 12:06:23	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Read error: Connection reset by peer)
2013-04-02 12:06:28	-->	Gruu_ (~Gruu_@213.211.132.86.static.edpnet.net) has joined #haskell
2013-04-02 12:06:31	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-04-02 12:07:20	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 256 seconds)
2013-04-02 12:07:30	<--	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has quit (Remote host closed the connection)
2013-04-02 12:07:35	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-04-02 12:07:53	-->	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has joined #haskell
2013-04-02 12:08:31	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-04-02 12:08:35	quchen	foldl makes me sad.
2013-04-02 12:09:04	<--	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has quit (Remote host closed the connection)
2013-04-02 12:09:08	quchen	I remember wondering why that's not the way it's defined in the standard, as it is much clearer when I saw it for the first time in LYAH.
2013-04-02 12:09:20	-->	timjb (~timjb@ppp-188-174-99-52.dynamic.mnet-online.de) has joined #haskell
2013-04-02 12:09:21	quchen	foldl' is also glorious in the PHP file :-)
2013-04-02 12:09:25	-->	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has joined #haskell
2013-04-02 12:09:36	<--	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has left #haskell
2013-04-02 12:09:58	-->	Tharugrim (~Tharugrim@80-121-48-145.adsl.highway.telekom.at) has joined #haskell
2013-04-02 12:10:17	<--	tazjin (2971tazjin@server1.bouncer4you.de) has quit (Ping timeout: 264 seconds)
2013-04-02 12:10:23	-->	tazjin_ (2971tazjin@server1.bouncer4you.de) has joined #haskell
2013-04-02 12:10:30	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-04-02 12:10:33	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-04-02 12:10:49	<--	adlan (~adlan@115.85.128.54) has quit (Quit: Leaving)
2013-04-02 12:10:59	-->	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has joined #haskell
2013-04-02 12:11:00	arkeet	quchen: yep
2013-04-02 12:11:00	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-02 12:11:03	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-04-02 12:11:20	jaspervdj	bitonic: thanks for creating the issue, I'm gone skating for the whole day but I'll have a look at it tonight :-)
2013-04-02 12:11:39	-->	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has joined #haskell
2013-04-02 12:11:54	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-02 12:11:57	bitonic	jaspervdj: OK, I’m also having trouble with something else—it seems that after I processed the Agda file I need to re-store it and re-load it to get rid of the metadata, right?
2013-04-02 12:12:06	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-04-02 12:12:06	-->	Guest85044 (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has joined #haskell
2013-04-02 12:12:24	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-04-02 12:13:33	-->	nh2 (~nh2@2001:41d0:1:c648::1) has joined #haskell
2013-04-02 12:14:21	nh2	what does this mean? Unacceptable result type in foreign declaration: IO CInt
2013-04-02 12:14:42	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 12:14:53	nh2	most people seem to fix this by importing CInt(..) (with constructors), but I have that already and still get that error
2013-04-02 12:14:57	dmos	is there an easier way to get this: partition' = (,) <$> id <*> drop 1
2013-04-02 12:15:01	bitonic	nh2: hpaste please
2013-04-02 12:15:34	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-04-02 12:15:52	<--	ulfdoz (~mary@p5B38B4BF.dip.t-dialin.net) has quit (Quit: deprecated)
2013-04-02 12:16:00	jaspervdj	bitonic: could you mail me about this? I have to go now
2013-04-02 12:16:03	dmos	the effect is the same as: take 2 . tails but as a tuple instead of a list
2013-04-02 12:16:05	-->	Dtgr (~user@a88-113-163-59.elisa-laajakaista.fi) has joined #haskell
2013-04-02 12:16:07	bitonic	jaspervdj: sure, thanks
2013-04-02 12:16:12	nh2	bitonic: 1 sec
2013-04-02 12:16:34	-->	haskell_noob (~haskell_n@101.98.129.32) has joined #haskell
2013-04-02 12:16:39	nh2	jaspervdj: I'm in Sg now by the way ;)
2013-04-02 12:18:11	 *	hackagebot named-records 0.3.2 - Flexible records with named fields.  http://hackage.haskell.org/package/named-records-0.3.2 (JulianFleischer)
2013-04-02 12:18:39	-->	alino2 (~nanoujean@109.73.77.250) has joined #haskell
2013-04-02 12:19:44	-->	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has joined #haskell
2013-04-02 12:20:02	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-04-02 12:20:09	jaspervdj	nh2: awesome :-D
2013-04-02 12:20:16	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-04-02 12:21:30	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 256 seconds)
2013-04-02 12:21:32	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Read error: Connection reset by peer)
2013-04-02 12:21:36	-->	aesptux (~aesptux@d393556.seedhost.eu) has joined #haskell
2013-04-02 12:22:20	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-02 12:23:00	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 264 seconds)
2013-04-02 12:23:31	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-02 12:23:59	-->	peterhil` (~peterhil@158.127.31.162) has joined #haskell
2013-04-02 12:24:12	-->	raichoo (~raichoo@i59F6CAB5.versanet.de) has joined #haskell
2013-04-02 12:24:19	bitonic	jaspervdj: you’ve got mail, have fun ehe
2013-04-02 12:24:46	<--	milli (~milli@rasler.acmeps.com) has quit (Quit: Coyote finally caught me)
2013-04-02 12:24:58	-->	t7` (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-02 12:25:20	<--	doomlord (~doomlod@host81-159-234-112.range81-159.btcentralplus.com) has quit (Quit: Leaving)
2013-04-02 12:25:21	-->	milli (~milli@rasler.acmeps.com) has joined #haskell
2013-04-02 12:25:24	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Disconnected by services)
2013-04-02 12:25:36	--	t7` is now known as t7
2013-04-02 12:25:40	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Read error: Connection reset by peer)
2013-04-02 12:25:52	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 12:26:59	-->	ijp (~user@host86-168-32-218.range86-168.btcentralplus.com) has joined #haskell
2013-04-02 12:26:59	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-04-02 12:28:33	<--	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-04-02 12:28:35	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-02 12:29:09	<--	alang_ (~alang@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Ping timeout: 252 seconds)
2013-04-02 12:29:36	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 264 seconds)
2013-04-02 12:29:45	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-04-02 12:29:53	-->	k00mi (~koomi@dslb-188-098-240-031.pools.arcor-ip.net) has joined #haskell
2013-04-02 12:31:02	<--	heruur (~tvh@dslb-188-102-023-253.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-04-02 12:31:11	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-04-02 12:32:49	-->	alang_ (~alang@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-04-02 12:34:14	<--	Taneb (~nathan@host-92-23-117-149.as13285.net) has quit (Ping timeout: 256 seconds)
2013-04-02 12:34:47	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 260 seconds)
2013-04-02 12:35:12	-->	urm3l (~urm3l@HSI-KBW-078-043-223-061.hsi4.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-02 12:35:41	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 12:36:27	-->	fxr (~user@176.42.255.221) has joined #haskell
2013-04-02 12:36:39	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-04-02 12:36:50	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-02 12:37:19	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-02 12:38:09	-->	augur_ (~augur@208.58.5.87) has joined #haskell
2013-04-02 12:38:18	<--	timjb (~timjb@ppp-188-174-99-52.dynamic.mnet-online.de) has quit (Remote host closed the connection)
2013-04-02 12:38:21	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-04-02 12:38:24	<--	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has quit (Quit: Leaving.)
2013-04-02 12:38:32	<--	hajimehoshi (~hajimehos@p840a0e.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-04-02 12:39:33	haskell_noob	anyone wanna try this out? http://hpaste.org/85009
2013-04-02 12:40:14	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-04-02 12:41:33	<--	alang_ (~alang@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Ping timeout: 240 seconds)
2013-04-02 12:41:36	<--	edtsech (~edtsech@194.213.198.34) has quit (Ping timeout: 256 seconds)
2013-04-02 12:42:00	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-04-02 12:43:00	jMCg	I have a build that starts off with cabal-dev clean, then cabal-dev configure and cabal-dev install - the configure step tells me it's missing a bunch of deps: http://apaste.info/hCyT -- how do I make sure they are installed (when running from a Jenkins buildbot)
2013-04-02 12:43:37	--	Guest85044 is now known as niklasb_
2013-04-02 12:43:51	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-04-02 12:45:23	<--	yoodit (~yoodit@93-172-103-130.bb.netvision.net.il) has quit (Read error: Connection reset by peer)
2013-04-02 12:45:43	nh2	bitonic: garbage, I can't make a minimal example - it works there
2013-04-02 12:45:46	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-04-02 12:45:47	-->	yoodit (~yoodit@93-172-103-130.bb.netvision.net.il) has joined #haskell
2013-04-02 12:46:01	nh2	looks like I have some CInt imported without constructors, but I haven't figured out where yet
2013-04-02 12:46:08	-->	blackh (~blackh@91.157.69.111.dynamic.snap.net.nz) has joined #haskell
2013-04-02 12:46:10	bitonic	nh2: annoying.  I don’t have any guesses.  as you probably know you have to import the constructors since... recently
2013-04-02 12:47:00	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-04-02 12:47:42	<--	igstan (~igstan@109.99.235.103) has quit (Quit: igstan)
2013-04-02 12:48:20	<--	hiratara (~hiratara@h223091.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 255 seconds)
2013-04-02 12:48:54	-->	Ulrar (~Ulrar@luwin.ulrar.net) has joined #haskell
2013-04-02 12:50:40	<--	plutoniix (~plutoniix@node-wjr.pool-101-109.dynamic.totbb.net) has quit (Quit: จรลี จรลา)
2013-04-02 12:50:59	<--	hychen (~hychen@175.41.48.77) has quit (Quit: Leaving)
2013-04-02 12:51:04	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Quit: leaving)
2013-04-02 12:51:35	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Ping timeout: 260 seconds)
2013-04-02 12:52:21	nh2	bitonic: ahhh it was the damn hs file not reflecting my changes in the hsc file
2013-04-02 12:52:59	bitonic	nh2: with ‘not reflecting’ you mean that you weren’t processing the .hsc file :P?
2013-04-02 12:53:04	-->	MOMI (uid4868@gateway/web/irccloud.com/x-mulxbdvbbbplcaeu) has joined #haskell
2013-04-02 12:53:08	nh2	yes
2013-04-02 12:53:09	-->	PrO_OkI_ (uid4868@gateway/web/irccloud.com/x-vyuwcbwrqlurccmq) has joined #haskell
2013-04-02 12:53:13	bitonic	ehe.  use cabal son.
2013-04-02 12:53:34	-->	lennart_ (~lennart@kiel-4d067a0c.pool.mediaWays.net) has joined #haskell
2013-04-02 12:53:43	nh2	I'm using ghc-mod / hdevtools
2013-04-02 12:54:00	nh2	it's a bit weird
2013-04-02 12:54:01	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-04-02 12:54:11	bitonic	ghc-mod + hsc + cabal should work
2013-04-02 12:54:15	bitonic	I think
2013-04-02 12:54:19	nh2	I don't have the cabal part
2013-04-02 12:54:25	-->	hiratara (~hiratara@h221035.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-04-02 12:54:28	nh2	before it was complaining and it seemed that it couldn't do it with hsc
2013-04-02 12:54:34	nh2	so I generated all .hs from .hsc
2013-04-02 12:54:42	bitonic	well yeah cabal does that part for you
2013-04-02 12:54:54	bitonic	(don’t know what hdevtools is)
2013-04-02 12:55:28	nh2	the same thing as ghc-mod, but as a daemon and 50 times faster
2013-04-02 12:55:40	-->	alang_ (~alang@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-04-02 12:55:47	-->	typoclass (~typoclass@p4FC932FB.dip.t-dialin.net) has joined #haskell
2013-04-02 12:55:48	nh2	now I remove the compiled hs files and it doesn't complain any more, weird
2013-04-02 12:55:57	bitonic	yeah ghc-mod has a bit of a delay
2013-04-02 12:56:21	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-02 12:56:57	--	DrSyzygy_ is now known as DrSyzygy
2013-04-02 12:56:57	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 12:57:47	-->	eirikur (~eirikur@46-239-208-19.tal.is) has joined #haskell
2013-04-02 12:58:12	nh2	gotta go
2013-04-02 12:58:15	nh2	see you in a bit
2013-04-02 12:58:53	--	nh2 is now known as zz_nh2
2013-04-02 12:59:10	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-04-02 12:59:24	<--	xinming (~xinming@125.87.104.144) has quit (Read error: Connection reset by peer)
2013-04-02 12:59:38	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 246 seconds)
2013-04-02 13:00:01	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-04-02 13:00:48	<--	gereedy (geoff@mania.programmer-monk.net) has quit (Ping timeout: 264 seconds)
2013-04-02 13:01:48	-->	gereedy (geoff@mania.programmer-monk.net) has joined #haskell
2013-04-02 13:02:57	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 13:03:12	-->	xinming (~xinming@125.84.28.203) has joined #haskell
2013-04-02 13:03:15	-->	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-02 13:05:09	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-04-02 13:05:28	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0/20130227155321])
2013-04-02 13:05:48	-->	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-04-02 13:05:49	-->	Henesy (~h3n3sy@75.23.118.193) has joined #haskell
2013-04-02 13:06:55	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-04-02 13:07:32	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-02 13:07:40	-->	eikke (~nicolas@85.255.197.126) has joined #haskell
2013-04-02 13:07:40	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 256 seconds)
2013-04-02 13:08:19	<--	v (~v@199.68.198.120) has quit (Ping timeout: 245 seconds)
2013-04-02 13:08:57	-->	hajimehoshi (~hajimehos@p840a0e.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-02 13:09:17	-->	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has joined #haskell
2013-04-02 13:10:44	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-02 13:11:02	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-02 13:11:02	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Client Quit)
2013-04-02 13:13:30	-->	ramses_ (863ab323@gateway/web/freenode/ip.134.58.179.35) has joined #haskell
2013-04-02 13:14:09	-->	ulfdoz (~mary@p5B38B4BF.dip.t-dialin.net) has joined #haskell
2013-04-02 13:14:41	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-04-02 13:15:54	<--	OlegYch (~OlegYch@212.98.190.221) has quit (Ping timeout: 256 seconds)
2013-04-02 13:17:03	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Remote host closed the connection)
2013-04-02 13:17:08	<--	hajimehoshi (~hajimehos@p840a0e.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 246 seconds)
2013-04-02 13:17:15	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-04-02 13:18:26	<--	alino2 (~nanoujean@109.73.77.250) has quit (Ping timeout: 256 seconds)
2013-04-02 13:19:13	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 13:19:30	<--	jbu (~jbu@adsl-75-11-175-41.dsl.sndg02.sbcglobal.net) has quit (Quit: Leaving)
2013-04-02 13:19:50	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 13:19:58	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-02 13:20:13	-->	Thomyho4 (~thomyho@mnhm-590c01d6.pool.mediaWays.net) has joined #haskell
2013-04-02 13:20:51	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-04-02 13:21:09	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-02 13:21:34	<--	ahihi2 (~transient@cs149054.pp.htv.fi) has quit (Ping timeout: 256 seconds)
2013-04-02 13:22:42	--	threeday1onk is now known as threedaymonk
2013-04-02 13:22:53	-->	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has joined #haskell
2013-04-02 13:23:56	<--	fxr (~user@176.42.255.221) has quit (Remote host closed the connection)
2013-04-02 13:24:07	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 246 seconds)
2013-04-02 13:24:12	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Ping timeout: 264 seconds)
2013-04-02 13:24:27	-->	v (~v@61.173.102.10) has joined #haskell
2013-04-02 13:25:14	-->	Testos (User@109.64.163.95) has joined #haskell
2013-04-02 13:25:28	alexander__b	I don't really get this: groupBy (\x y -> (x > 0) == (y > 0)) [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3] -- the lambda takes two things, but only a list is passed to it
2013-04-02 13:25:41	alexander__b	what is x and what is y?
2013-04-02 13:25:58	nooodl	@type groupBy
2013-04-02 13:25:59	lambdabot	(a -> a -> Bool) -> [a] -> [[a]]
2013-04-02 13:26:01	<--	augur_ (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-04-02 13:26:44	-->	dsadsdasd (~Adium@37.157.191.242) has joined #haskell
2013-04-02 13:26:59	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-04-02 13:27:26	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-02 13:27:29	<--	lcfrs (~lcfrs@50-1-125-99.dsl.dynamic.sonic.net) has quit (Ping timeout: 255 seconds)
2013-04-02 13:27:29	<--	User_ (User@bzq-109-64-163-95.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-04-02 13:27:35	alexander__b	nooodl: I'm sure this is obvious to people who know haskell, but it doesn't become more clear for me by showing me the type definition of groupBy.
2013-04-02 13:27:44	typoclass	> group "Mississipppppi"
2013-04-02 13:27:45	lambdabot	  ["M","i","ss","i","ss","i","ppppp","i"]
2013-04-02 13:27:54	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-04-02 13:27:56	typoclass	alexander__b: it's not *that* obvious
2013-04-02 13:28:11	nooodl	oh yeah i was going to explain it further but i forgot
2013-04-02 13:28:31	quchen	alexander__b: The first parameter of groupBy takes a binary function of the type "when to consider two things equal".
2013-04-02 13:28:35	nooodl	group = groupBy (==)
2013-04-02 13:28:49	typoclass	alexander__b: so, this ^^ is how group works. it groups by using (==), which is a function (a -> a -> Bool). groupBy is similar, but you can pass in your own function to determine what to group by
2013-04-02 13:29:07	quchen	In your case, "\x y -> (x>0) == (y>0)" is a function that considers x and y equal iff they have the same sign.
2013-04-02 13:29:20	alexander__b	yes, but what I'm asking is what is x and what is y?
2013-04-02 13:29:28	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-04-02 13:29:48	quchen	Lambda parameters. Are you familiar with lambda notation?
2013-04-02 13:29:55	alexander__b	when I read " (\x y -> (x > 0) == (y > 0)) [0..10]", I read -- oh a lambda function that takes two parameters. and... one parameter is sent to it.
2013-04-02 13:30:06	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-04-02 13:30:07	typoclass	alexander__b: groupBy will call your function (your lambda) repeatedly with two elements of the list
2013-04-02 13:30:07	alexander__b	quchen: yes. but I probably forgot it from not having the opportunity to look at haskell for a few days now.
2013-04-02 13:30:14	alexander__b	right.
2013-04-02 13:30:17	<--	nooodl (~nooodl@91.177.109.136) has quit (Quit: Leaving)
2013-04-02 13:30:22	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-04-02 13:30:24	alexander__b	I'm not sure I understand why it is implicit that it takes two arguments from the list.
2013-04-02 13:30:32	quchen	You're misreading it. groupBy f list = (groupBy f) list, not groupBy (f list)
2013-04-02 13:30:49	quchen	The lambda isn't applied directly to the list.
2013-04-02 13:31:03	typoclass	alexander__b: don't worry :-) in "groupBy (\x y -> ...) [...]", you have two arguments being passed to a function called groupBy. the second argument is a list, the first argument is a function of 2 arguments
2013-04-02 13:31:06	latermuse	quchen: that lambda is just for checking if both x and y are positive. correct?
2013-04-02 13:31:12	-->	Duffers (~Duffers@host109-149-147-112.range109-149.btcentralplus.com) has joined #haskell
2013-04-02 13:31:12	<--	Itkovian (~Itkovian@b246h214.ugent.be) has quit (Quit: Itkovian)
2013-04-02 13:31:15	merijn	latermuse: Yeah
2013-04-02 13:31:29	quchen	latermuse: No, it checks whether both are simultaneously positive or not positive.
2013-04-02 13:31:32	-->	heruur (~tvh@dslb-188-102-023-253.pools.arcor-ip.net) has joined #haskell
2013-04-02 13:31:34	latermuse	yes
2013-04-02 13:31:40	quchen	latermuse: for example, for -1 and -1, the lambda will be True.
2013-04-02 13:31:46	latermuse	oh neat
2013-04-02 13:31:54	<--	jdnavarro (~danny@49.Red-81-35-219.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-04-02 13:31:58	alexander__b	typoclass: thanks.
2013-04-02 13:32:01	quchen	> (\x y -> (x > 0) == (y > 0) (-1) (-1)
2013-04-02 13:32:02	lambdabot	  <hint>:1:38: parse error (possibly incorrect indentation)
2013-04-02 13:32:03	quchen	> (\x y -> (x > 0) == (y > 0) (1) (-1)
2013-04-02 13:32:05	lambdabot	  <hint>:1:37: parse error (possibly incorrect indentation)
2013-04-02 13:32:09	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 13:32:10	quchen	> (\x y -> (x > 0) == (y > 0)) (-1) (-1)
2013-04-02 13:32:11	lambdabot	  True
2013-04-02 13:32:12	quchen	> (\x y -> (x > 0) == (y > 0)) (1) (-1)
2013-04-02 13:32:14	lambdabot	  False
2013-04-02 13:32:15	quchen	> (\x y -> (x > 0) == (y > 0)) (1) (1)
2013-04-02 13:32:16	lambdabot	  True
2013-04-02 13:32:25	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-04-02 13:32:29	-->	main (~main@203.168.217.87.dynamic.jazztel.es) has joined #haskell
2013-04-02 13:32:32	typoclass	i'd call it "neat" with scare quotes. it's a bit nonobvious if you're not used to boolean logic fiddling
2013-04-02 13:32:58	latermuse	yeah, ive never seen boolean used like that before. its pretty neat though
2013-04-02 13:33:01	typoclass	it's more or less using (==) as a xor operator
2013-04-02 13:33:01	<--	k00mi (~koomi@dslb-188-098-240-031.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.0)
2013-04-02 13:33:06	--	main is now known as DR6
2013-04-02 13:33:12	quchen	:t (==) `on` (>0)
2013-04-02 13:33:14	lambdabot	(Num a, Ord a) => a -> a -> Bool
2013-04-02 13:33:38	quchen	(I'm still looking for a non-"comparing" case where 'on' makes things more readable.)
2013-04-02 13:34:08	<--	DR6 (~main@203.168.217.87.dynamic.jazztel.es) has quit (Client Quit)
2013-04-02 13:34:35	<--	madjestic (~madjestic@bqe219.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-02 13:35:52	killy9999	I just realized I don't understand one fundamental thing about Vectors
2013-04-02 13:36:01	killy9999	what is an unboxed Vector?
2013-04-02 13:36:04	-->	joaopizani (~joaopizan@145.107.81.87) has joined #haskell
2013-04-02 13:36:11	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 13:36:12	killy9999	I mean what exactly is "unboxed" in it?
2013-04-02 13:36:25	merijn	The vector elements
2013-04-02 13:36:42	killy9999	merijn: So let's say I have: Vector Int
2013-04-02 13:36:53	killy9999	the Vector stores Int or Int# ?
2013-04-02 13:37:01	killy9999	s/the/this/
2013-04-02 13:37:15	quchen	Boxed things contain Haskell values; a Haskell value is a box that may have a value in it, or another Haskell value (Thunk), or Bottom, or unicorns. On the other hand, an unboxed value contains exactly its value.
2013-04-02 13:37:29	shachaf	What?
2013-04-02 13:37:51	<--	heruur (~tvh@dslb-188-102-023-253.pools.arcor-ip.net) has quit (Quit: Leaving.)
2013-04-02 13:37:51	quchen	Oh crap, shachaf intervenes, that's a bad sign
2013-04-02 13:38:01	typoclass	> groupBy (\a b -> signum a == signum b) [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3] -- i wonder if this makes it clearer. uses signum from the Num typeclass
2013-04-02 13:38:03	lambdabot	  [[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]
2013-04-02 13:38:05	quchen	Eh, I meant "howdy shachaf, time to learn something for me!" ;-)
2013-04-02 13:38:08	alexander__b	quchen: looking at 'on' now, which is supposed to be very readable. I think it looks quite hideous.
2013-04-02 13:38:21	shachaf	killy9999: Vector Int is an array of pointers to heap-allocated values.
2013-04-02 13:38:41	quchen	alexander__b: On is usually awful. The only case it makes sense is when you pair it with "compare" really.
2013-04-02 13:38:54	shachaf	An unboxed Vector is an array of integer values directly in memory. Like int a[n]; in C.
2013-04-02 13:38:55	typoclass	alexander__b: um, 'on' is a little bit of a tricky one with a specific use case :-) not sure where you heard it's readable
2013-04-02 13:38:59	quchen	alexander__b: e.g. "comparing `on` snd" compares tuples based on their second value
2013-04-02 13:39:02	thirsteh	what am I looking for if I want to build a [bar] from an arbitrary Foo where data Foo { bar :: Bar, childFoos :: [Foo] } ?
2013-04-02 13:39:13	-->	heruur (~tvh@dslb-188-102-023-253.pools.arcor-ip.net) has joined #haskell
2013-04-02 13:39:18	quchen	Eh, "compare `on` snd" it is
2013-04-02 13:39:20	alexander__b	typoclass: «An even clearer way to write equality functions for the By functions is if you import the on function from Data.Function.»
2013-04-02 13:39:26	<--	ari (ari@tuomi.oulu.fi) has left #haskell ("No! I shan't succumb to such fabulousness!")
2013-04-02 13:39:41	quchen	alexander__b: Yeah, ignore that. ;-)
2013-04-02 13:39:43	alexander__b	«groupBy ((==) `on` (> 0)) values [...], Very readable indeed!»
2013-04-02 13:39:57	killy9999	shachaf: then why is it called "Unboxed" ?
2013-04-02 13:40:04	<--	rafsoaken (~rafsoaken@mail.secretarysearch.at) has quit (Quit: rafsoaken)
2013-04-02 13:40:05	<--	Testos (User@109.64.163.95) has quit (Ping timeout: 255 seconds)
2013-04-02 13:40:09	jMCg	Okay, can someone help me out what's missing here: http://apaste.info/1422 ? when I run cabal-dev configure it says here's the dependencies that are missing, but when I cabal-dev install-deps it can't find any -- how is that consistent?
2013-04-02 13:40:25	-->	Testos (User@109.65.225.2) has joined #haskell
2013-04-02 13:40:29	killy9999	if it contains pointers to heap objects then I would call that "boxed"
2013-04-02 13:40:35	typoclass	alexander__b: that's debatable. i have my doubts about that quote
2013-04-02 13:40:45	alexander__b	typoclass: it's from learn you a haskell
2013-04-02 13:41:00	shachaf	killy9999: Yes, that's a boxed vector.
2013-04-02 13:41:06	merijn	tbh I think the version with on is more readable than the lambda
2013-04-02 13:41:09	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 276 seconds)
2013-04-02 13:41:17	merijn	It's a matter of taste, I guess?
2013-04-02 13:41:18	-->	edon (~user@albalug/edon) has joined #haskell
2013-04-02 13:41:25	<--	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-04-02 13:41:37	killy9999	shachaf: but I can declare "Vector Int" for Vector imported from Unboxed module
2013-04-02 13:41:37	latermuse	jMCg: have you tried manually installing dependencies?
2013-04-02 13:41:37	-->	kmels (~kmels@frbg-5f730832.pool.mediaWays.net) has joined #haskell
2013-04-02 13:41:39	thirsteh	I'm guessing something from lenses :)
2013-04-02 13:41:41	-->	ahihi2 (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-04-02 13:41:46	shachaf	killy9999: OK, you didn't specify which Vector.
2013-04-02 13:41:47	killy9999	what do I get then?
2013-04-02 13:41:53	shachaf	Yes, that's an unboxed vector.
2013-04-02 13:42:04	shachaf	You'll have an array of contiguous machine integers in memory.
2013-04-02 13:42:07	-->	onlydnaq (~dna@c-5eeaaa32-74736162.cust.telenor.se) has joined #haskell
2013-04-02 13:42:08	killy9999	and the elements from it are unboxed, that is Int# ?
2013-04-02 13:42:39	-->	etehtsea (~textual@109.205.253.9) has joined #haskell
2013-04-02 13:42:43	shachaf	Sort of, yes.
2013-04-02 13:42:51	jMCg	latermuse: yesno. The problem is that this is running on a buildbot. I want this to be automated.
2013-04-02 13:42:55	<--	reckler (~reckler@ppp118-208-132-105.lns20.bne1.internode.on.net) has quit (Ping timeout: 245 seconds)
2013-04-02 13:43:02	-->	nabilhassein (~nabil@108.72.208.62) has joined #haskell
2013-04-02 13:43:02	<--	nabilhassein (~nabil@108.72.208.62) has quit (Client Quit)
2013-04-02 13:43:03	shachaf	Well, it's possible to implement an unboxed vector thing without every talking about Int# directly. But it's the same idea.
2013-04-02 13:43:05	killy9999	sort of?
2013-04-02 13:43:11	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-04-02 13:43:15	killy9999	hm
2013-04-02 13:43:29	killy9999	you see, I just realized that something is strange when I wrote this code:
2013-04-02 13:43:32	hpaste	killy9999 pasted “Unboxed vectors?” at http://hpaste.org/85034
2013-04-02 13:43:35	typoclass	alexander__b: 'on' comes from the observation that sometimes, you have stuff like "\a b -> aTwoArgumentFunction (something a) (something b)". in these cases, if you want to avoid writing the same "something" twice, they made the shortcut called 'on'
2013-04-02 13:43:40	killy9999	take a look at line 4
2013-04-02 13:43:50	shachaf	killy9999: You probably shouldn't be worrying about Int# yourself.
2013-04-02 13:43:51	onlydnaq	hi, I've been trying to work through olegs finally tagless lecture notes, and I'm running into some problems
2013-04-02 13:44:04	alexander__b	typoclass: I see.
2013-04-02 13:44:07	killy9999	on that line I explicitly unbox an element of the vector, which already should be unboxed!
2013-04-02 13:44:07	shachaf	The fact that it's an unboxed vector doesn't mean that you have to pass Int#s to anything.
2013-04-02 13:44:37	typoclass	alexander__b: so it's fairly specific to this case. but it's somewhat handy, particularly if the "something" is a long complicated expression, and you want to be clear that both times it's exactly the same
2013-04-02 13:44:38	killy9999	let's say I *want* to play with Int# ;)
2013-04-02 13:44:43	shachaf	OK.
2013-04-02 13:44:43	typoclass	@type on
2013-04-02 13:44:45	lambdabot	(b -> b -> c) -> (a -> b) -> a -> a -> c
2013-04-02 13:44:45	-->	OlegYch (~OlegYch@office1.altoros.com) has joined #haskell
2013-04-02 13:44:47	shachaf	Then go for it.
2013-04-02 13:44:58	shachaf	It has little to do with the unboxed vector.
2013-04-02 13:45:03	shachaf	These are two different boxings.
2013-04-02 13:45:17	killy9999	I'm  lost
2013-04-02 13:45:20	alexander__b	BTW they thing I'm having the most trouble not puking over is still reading type signatures.
2013-04-02 13:45:27	killy9999	I *think* I undestand boxing of Int
2013-04-02 13:45:30	shachaf	OK.
2013-04-02 13:45:35	killy9999	but I'm lost about the Vector
2013-04-02 13:45:36	shachaf	Why is you "*want* to play with Int#"?
2013-04-02 13:45:41	alexander__b	s/they/the
2013-04-02 13:45:58	typoclass	alexander__b: ok :-) then let's get the bucket for any emergencies, and maybe we can step through on's signature for exercise
2013-04-02 13:46:09	-->	DR6 (~main@203.168.217.87.dynamic.jazztel.es) has joined #haskell
2013-04-02 13:46:26	alexander__b	typoclass: I get them once I sit down and read them. but just glancing over them makes my brain hate me.
2013-04-02 13:46:30	typoclass	alexander__b: if you look at the type, start on the right-hand side with "a -> a -> c". this means it produces something (c), and gets two things of the same type (a)
2013-04-02 13:46:33	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-04-02 13:46:41	killy9999	shachaf: to get efficient assembly and later figure out how to implement a fusion method that will produce such an assembly without the user worrying about using Int#
2013-04-02 13:46:43	typoclass	alexander__b: i think that's true for everyone
2013-04-02 13:46:54	<--	kosmikus (~kosmikus@luiiise.kosmikus.org) has quit (Quit: leaving)
2013-04-02 13:46:58	quchen	alexander__b: The type signature of "on" is much more readable when you think about what the function does. It's not as straight forward as filter's for example, where you can almost immediately see what the function does.
2013-04-02 13:46:59	yezariaely	I'd like to map a function on all elements of a tuple. Is this somehow possible? fmap show (1,2) didn't work.
2013-04-02 13:47:04	yezariaely	> fmap show (1,2)
2013-04-02 13:47:06	lambdabot	  (1,"2")
2013-04-02 13:47:16	quchen	yezariaely: uncurry
2013-04-02 13:47:17	yezariaely	hmm
2013-04-02 13:47:20	shachaf	killy9999: Do you know about things like CPR analysis?
2013-04-02 13:47:21	quchen	Oh wait no
2013-04-02 13:47:21	yezariaely	ah sure...
2013-04-02 13:47:21	shachaf	@where cpr
2013-04-02 13:47:21	lambdabot	http://research.microsoft.com/en-us/um/people/simonpj/Papers/cpr/index.htm
2013-04-02 13:47:22	yezariaely	thx
2013-04-02 13:47:26	yezariaely	hmm
2013-04-02 13:47:28	onlydnaq	yezariaely: try both from Control.Arrow
2013-04-02 13:47:35	<--	haskell_noob (~haskell_n@101.98.129.32) has quit (Quit: irc2go)
2013-04-02 13:47:37	typoclass	alexander__b: the next element is a function (a -> b). so we can assume that 'on' applies this function on the two 'a' arguments we're giving it. does it make sense so far?
2013-04-02 13:47:41	quchen	yezariaely: Mapping over both elements of a tuple is a little tricky type-wise.
2013-04-02 13:47:43	shachaf	Anyway: These are two unrelated boxings.
2013-04-02 13:47:45	-->	ts33kr (~ts33kr@93.178.246.210) has joined #haskell
2013-04-02 13:47:46	thoughtpolice	killy9999: roughly speaking, Vector pretty much works by using type families (and other things) to specialize particular instances of 'Vector a', for some type 'a'. although a vector may be in memory a contiguous array of integers
2013-04-02 13:48:04	thoughtpolice	foldM' doesn't give you back the unboxed version, it gives you the boxed version (which you can see from looking at the type signature)
2013-04-02 13:48:08	alexander__b	typoclass: yes.
2013-04-02 13:48:18	-->	perspectival (perspectiv@nat/redhat/x-nrkjquwckibucqth) has joined #haskell
2013-04-02 13:48:18	quchen	yezariaely: If the tuple contains two elements of the same type it's straightforward though.
2013-04-02 13:48:26	killy9999	shachaf: I know there is a paper about CPR for Haskel but I haven't read it yet
2013-04-02 13:48:32	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Remote host closed the connection)
2013-04-02 13:48:37	yezariaely	quchen: type is different. Otherwise I just apply show twice.
2013-04-02 13:48:49	yezariaely	my Control.Arrow has no both.
2013-04-02 13:48:54	thoughtpolice	killy9999: in your example, you're not unboxing something already unboxed. foldM' specifically reboxes Int# to Int and gives it back to you
2013-04-02 13:48:58	-->	kosmikus (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-04-02 13:49:02	quchen	both is a lens thing isn't it
2013-04-02 13:49:03	alexander__b	typoclass: well not really because gwargh. it takes two 'a's, then the function is a and operates on a b
2013-04-02 13:49:19	onlydnaq	yezariaely: sorry, forgot the name of it, you're right, it isn't in Control.Arrow
2013-04-02 13:49:29	alexander__b	typoclass: oh right no. now I get it.
2013-04-02 13:49:39	alexander__b	typoclass: I misremembered. too many days without haskell. :-)
2013-04-02 13:49:47	killy9999	thoughtpolice: so despite the type signature "Vector Int", the vector really contains Int#s that are reboxed when needed?
2013-04-02 13:50:11	shachaf	Int# is a concept that exists at a different level from unboxed vectors.
2013-04-02 13:50:30	<--	perspectival (perspectiv@nat/redhat/x-nrkjquwckibucqth) has quit (Client Quit)
2013-04-02 13:50:34	shachaf	You could have unboxed vectors and use them with Ints, or boxed vectors and use them with Int#s.
2013-04-02 13:50:38	typoclass	alexander__b: ok, so the final (left-most) element in the signature is another function (b -> b -> c). it gets passed the two 'b' arguments that we got because we applied the other function twice, to the two 'a' values. what it produces is c, aka the final result of the whole thing
2013-04-02 13:50:38	<--	DR6 (~main@203.168.217.87.dynamic.jazztel.es) has quit (Quit: Lost terminal)
2013-04-02 13:50:45	-->	perspectival (perspectiv@nat/redhat/x-fifylvfknwtushnn) has joined #haskell
2013-04-02 13:50:47	yezariaely	@ty both
2013-04-02 13:50:49	lambdabot	Applicative f => (a -> f b) -> (a, a) -> f (b, b)
2013-04-02 13:50:57	shachaf	An Int# most likely exists in a register, not in memory anywhere. :-)
2013-04-02 13:50:58	yezariaely	> both show (1,2)
2013-04-02 13:51:00	thoughtpolice	well, technically not due to the fact unboxed types have a different kind
2013-04-02 13:51:00	lambdabot	  [('1','2')]
2013-04-02 13:51:07	killy9999	shachaf: so is the boxed vector something like a list?
2013-04-02 13:51:14	yezariaely	> both show (1,2,3)
2013-04-02 13:51:16	lambdabot	  Couldn't match expected type `(a0, a0)'
2013-04-02 13:51:16	lambdabot	             with actual type `(t0,...
2013-04-02 13:51:25	yezariaely	> both show (1,2)
2013-04-02 13:51:26	typoclass	yezariaely: i think you can either use lens, or you can write your own 'both' function
2013-04-02 13:51:27	lambdabot	  [('1','2')]
2013-04-02 13:51:30	shachaf	But the representation of an unboxed vector of Ints is going to be something like "int foo[100];" in C.
2013-04-02 13:51:31	alexander__b	typoclass: it's also a bit confusing reading it from the right.
2013-04-02 13:51:33	yezariaely	why does it return a list?!
2013-04-02 13:51:48	<--	Henesy (~h3n3sy@75.23.118.193) has quit (Ping timeout: 264 seconds)
2013-04-02 13:52:06	-->	realnot (~realnot@host239-50-dynamic.47-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-02 13:52:06	<--	realnot (~realnot@host239-50-dynamic.47-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-04-02 13:52:06	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-04-02 13:52:08	yezariaely	@ty both show (1,2)
2013-04-02 13:52:09	lambdabot	[(Char, Char)]
2013-04-02 13:52:24	shachaf	The representation of a boxed vector of Ints is going to be closer to "struct haskell_int_value_thing *foo[100];"
2013-04-02 13:52:45	shachaf	(Well, maybe closer to haskell_value_thing *, or void *. It doesn't need to know the type.)
2013-04-02 13:52:59	killy9999	looks like I need to read more about Vectors...
2013-04-02 13:53:08	thoughtpolice	killy9999: yes, it will be boxed. but the point shachaf is making is that you don't really *know* about it. the boxing/unboxing is irrelevant, because the Vector interface doesn't *require* you to represent Int as an Int#
2013-04-02 13:53:35	onlydnaq	yezariaely: join (***) (+1) (2, 3)
2013-04-02 13:53:44	thoughtpolice	when you have a 'Vector Int', it's likely a contiguous array of raw integers. but that's not a detail the interface exposes
2013-04-02 13:53:44	typoclass	alexander__b: yeah. you could also look at (b -> b -> c), and then check "where else is a 'b'". i found it clearest to look at it starting at the two 'a' values
2013-04-02 13:54:01	shachaf	"Data.Vector.Unboxed.Vector Int", that is.
2013-04-02 13:54:07	thoughtpolice	yeah
2013-04-02 13:54:11	shachaf	"Data.Vector.Vector Int" is an array of pointers.
2013-04-02 13:54:20	typoclass	alexander__b: to sum up, 'on' is one of the more tricky ones. it takes some figuring out. luckily, there is always #haskell :-)
2013-04-02 13:54:27	shachaf	Note: I've never actually used Vector. Everything I'm saying is a guess.
2013-04-02 13:54:28	thoughtpolice	killy9999: the idea is that fusion, inlining and CPR will basically boil all that stuff down and allow GHC to 'really unbox' things like Int to Int#, later in the compilation stage. hence why it's a relevant optimization
2013-04-02 13:54:38	alexander__b	typoclass: hehe thanks.
2013-04-02 13:54:38	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-02 13:54:45	killy9999	thoughtpolice: I'd like to get below interface
2013-04-02 13:54:59	thoughtpolice	killy9999: and that's why it doesn't matter that foldM gives you an Int, and not an Int# - GHC just takes care of it later
2013-04-02 13:54:59	killy9999	I'm interested with stuff happening under the hood
2013-04-02 13:55:16	onlydnaq	killy9999: do you need an interface for Int#, or do you think you need an interface for Int#
2013-04-02 13:55:24	shachaf	OK, then read the source of Vector, read the source of GHC, read the output of ghc-core.
2013-04-02 13:55:40	onlydnaq	killy9999: before you try to optimize, you should look at the generated core, to see if GHC unboxes what you want it to
2013-04-02 13:56:38	-->	HugoDaniel (~hugo@bl11-214-129.dsl.telepac.pt) has joined #haskell
2013-04-02 13:56:50	killy9999	onlydnaq: I'm basically looking at the assembly
2013-04-02 13:56:54	-->	alistairclark (~alisaircl@109.174.158.82) has joined #haskell
2013-04-02 13:56:59	thoughtpolice	killy9999: i'd recommend reading about stream fusion papers in this case, since they're obviously relevant. CPR analysis is also important here (and in other libraries like bytestring too, of course.) you don't necessarily need to go looking at GHC, but it might help
2013-04-02 13:57:09	thoughtpolice	really most of the important machinery modulo CPR doesn't exist in GHC
2013-04-02 13:57:16	onlydnaq	killy9999: before looking at the assembly, try to look at the generated core
2013-04-02 13:57:22	shachaf	killy9999: If you really want to understand what's going on, you probably shouldn't start with the assembly.
2013-04-02 13:57:23	onlydnaq	killy9999: ghc -O2 -ddump-simpl
2013-04-02 13:57:27	shachaf	You'll miss the forest for the trees, etc.
2013-04-02 13:57:34	shachaf	Read the Core, read the Cmm.
2013-04-02 13:57:38	shachaf	Read the papers (CPR etc.)
2013-04-02 13:57:46	thoughtpolice	yes, having core and C-- is crucial to being able to see what's going on
2013-04-02 13:57:58	killy9999	no, I meant I went through the core level and now I'm looking at the assembly
2013-04-02 13:58:13	shachaf	The Cmm has pretty much all the information in the assembly other than machine-specific details, and also a lot more information about why things are done.
2013-04-02 13:58:15	thoughtpolice	Cmm is probably still a bit better honestly
2013-04-02 13:58:20	killy9999	as for the papers: I haven't read the one about CPR, but I have it printed so will take a look tomorrow
2013-04-02 13:58:20	thoughtpolice	it has much more rich info
2013-04-02 13:58:22	quchen	yezariaely: Here's a working version of "show both tuple elements", but it's far from being pretty: http://hpaste.org/85035
2013-04-02 13:58:23	shachaf	More than a bit better.
2013-04-02 13:58:34	thoughtpolice	fair :)
2013-04-02 13:58:42	 *	hackagebot warp 1.3.8 - A fast, light-weight web server for WAI applications.  http://hackage.haskell.org/package/warp-1.3.8 (MichaelSnoyman)
2013-04-02 13:58:55	thoughtpolice	i can't even remember the last time I looked at GHC-generated assembly
2013-04-02 13:58:59	-->	jameson` (~user@198-84-174-211.cpe.teksavvy.com) has joined #haskell
2013-04-02 13:59:02	thoughtpolice	since i normally just stare at C--
2013-04-02 13:59:21	killy9999	thoughtpolice: what would you recommend to read in order to understand Cmm ?
2013-04-02 13:59:24	thoughtpolice	(the fact I was staring at assembly from the runtime a week ago doesn't count obviously)
2013-04-02 13:59:24	shachaf	I look at it a lot -- or I did when I was optimizing Haskell things -- but only for specific things.
2013-04-02 13:59:34	killy9999	I mean I understand it more or less, because it's something between C and assembly
2013-04-02 13:59:36	onlydnaq	sorry to repeat myself btw, but is anyone familiar with olegs finally tagless paper?
2013-04-02 13:59:45	shachaf	killy9999: The RTS commentary on the GHC wiki has a guide, I think.
2013-04-02 13:59:55	thoughtpolice	the commentary is now out of date :|
2013-04-02 13:59:57	 *	killy9999 checks
2013-04-02 14:00:03	thoughtpolice	since it covers old cmm, which has been eradicated
2013-04-02 14:00:08	thoughtpolice	but most of the same stuff still applies, really
2013-04-02 14:00:11	shachaf	The commentary is always out of date.
2013-04-02 14:00:13	thoughtpolice	just not the data types in the commentary
2013-04-02 14:00:14	-->	carlocci_ (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-04-02 14:00:19	shachaf	It's out of date the day after it's written.
2013-04-02 14:00:40	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Read error: Connection reset by peer)
2013-04-02 14:00:53	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-04-02 14:00:57	thoughtpolice	in [C[Csome cases, no! the debugging guides are all still useful, and nobody has seriously edited those pages for quite a while :P
2013-04-02 14:01:07	shachaf	Oh, it's very useful.
2013-04-02 14:01:10	shachaf	Just out of date.
2013-04-02 14:01:12	-->	k00mi (~koomi@24.134.205.36) has joined #haskell
2013-04-02 14:01:27	thoughtpolice	really? all that GDB goodness still works pretty well for me :)
2013-04-02 14:01:38	killy9999	http://hackage.haskell.org/trac/ghc/wiki/Commentary/Compiler/CmmType
2013-04-02 14:01:46	elliott	thoughtpolice: [C[Csome cases, indeed
2013-04-02 14:01:47	killy9999	I suppose you meant this page?
2013-04-02 14:01:48	shachaf	In my experience there is very little GHC documentation that isn't subtly inconsistent with reality.
2013-04-02 14:01:53	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-04-02 14:01:56	<--	onlydnaq (~dna@c-5eeaaa32-74736162.cust.telenor.se) has quit (Quit: brb)
2013-04-02 14:01:57	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-04-02 14:02:02	killy9999	that has been my experience also...
2013-04-02 14:02:10	-->	schlicht (~fl@lutz.uebb.tu-berlin.de) has joined #haskell
2013-04-02 14:02:14	thoughtpolice	the reality is that GHC has a lot of documentation. and lots of documentation is a pain in the ass to maintain
2013-04-02 14:02:24	shachaf	I agree.
2013-04-02 14:02:54	thoughtpolice	i'm not really sure how to deal with this, but it's been on my mind recently to try and help people get into GHC hacking, since there's been a surge of interest over the past few months
2013-04-02 14:03:05	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-04-02 14:03:14	shachaf	Can you help get me into GHC hacking by implementing all the things I want in GHC for me?
2013-04-02 14:03:18	thoughtpolice	(some of it presumably spurred by JaffaCake leaving MSR, i imagine)
2013-04-02 14:03:24	thoughtpolice	shachaf: :|
2013-04-02 14:03:24	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 14:03:32	-->	`fogus (~fogus@freedom.d-a-s.com) has joined #haskell
2013-04-02 14:03:34	shachaf	Oh well. Worth a try.
2013-04-02 14:03:38	thoughtpolice	will you fix every lens bug?
2013-04-02 14:03:43	shachaf	THERE ARE NO LENS BUGS
2013-04-02 14:03:45	typoclass	i'd guess that big-picture overview documentation doesn't get out of date so quickly?
2013-04-02 14:03:45	killy9999	who is JaffaCake IRL?
2013-04-02 14:03:50	thoughtpolice	killy9999: simon marlow
2013-04-02 14:03:51	shachaf	Simon Marlow.
2013-04-02 14:03:55	killy9999	ah, ok
2013-04-02 14:03:58	shachaf	I should implement that simple GHC extension I proposed.
2013-04-02 14:04:05	killy9999	didn't know that was his nickname :)
2013-04-02 14:04:09	shachaf	#7633
2013-04-02 14:04:17	thoughtpolice	killy9999: he's mostly in #ghc
2013-04-02 14:04:19	shachaf	By "I" I mean thoughtpolice.
2013-04-02 14:04:27	-->	Itkovian (~Itkovian@b246h214.ugent.be) has joined #haskell
2013-04-02 14:04:31	killy9999	anyway, I started hacking on GHC somewhere in December
2013-04-02 14:04:37	thoughtpolice	shachaf: :|
2013-04-02 14:04:38	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 256 seconds)
2013-04-02 14:04:44	alpounet	ghc plugins should also help writing some optimizations
2013-04-02 14:04:49	typoclass	can i please have a ghc extension that turns (doodle _ _ abc) into (\x y -> doodle x y abc)
2013-04-02 14:04:50	killy9999	and I must say that commentary is extremely helpful, even if outdated
2013-04-02 14:04:51	typoclass	:-)
2013-04-02 14:05:00	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 14:05:01	alpounet	like the strict haskell one
2013-04-02 14:05:01	thoughtpolice	the GHC plugin architecture is woefully simplistic right now however.
2013-04-02 14:05:06	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-04-02 14:05:11	thoughtpolice	i've been meaning to get back to working on it and extending it to be more useful
2013-04-02 14:05:16	thoughtpolice	alpounet: yeah, i maintain it :)
2013-04-02 14:05:18	mauke	typoclass: insufficient spec
2013-04-02 14:05:36	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 14:05:44	alpounet	thoughtpolice, I know! i keep pointing people to it, it's not well advertised :p
2013-04-02 14:06:28	thoughtpolice	i'm not really sure why. it was mostly a demo by Max like 5 years ago to just show a trivial pass. i'm not actually convinced it's very useful at this point
2013-04-02 14:06:50	thoughtpolice	that's really why i maintained it, it's about as simple as it gets since it just transforms non-recursive let bindings into cases
2013-04-02 14:06:56	typoclass	shachaf: hey, that #7633 is a great idea
2013-04-02 14:07:01	shachaf	Max Bolingbroke?
2013-04-02 14:07:09	thoughtpolice	the one and only!
2013-04-02 14:07:10	shachaf	imo thoughtpolice should get him onto irc
2013-04-02 14:07:20	alpounet	he comes, every now and then
2013-04-02 14:07:26	alpounet	'batterseapower' I think
2013-04-02 14:07:28	thoughtpolice	shachaf: unlikely. he was on hiatus for several months to write his thesis
2013-04-02 14:07:32	shachaf	preflex: seen batterseapower
2013-04-02 14:07:33	preflex	 Sorry, I haven't seen batterseapower
2013-04-02 14:07:33	ramses_	yezariaely: try "join (***)" if you really want to
2013-04-02 14:07:33	thoughtpolice	and now he's working in finance
2013-04-02 14:07:42	alpounet	only on #ghc
2013-04-02 14:07:43	thoughtpolice	and we all know how -that- goes :P
2013-04-02 14:07:47	ramses_	> (join (***)) (+3) (4,5)
2013-04-02 14:07:48	lambdabot	  (7,8)
2013-04-02 14:07:56	thoughtpolice	although he is still actively hacking GHC. but he's never been much of an IRCer
2013-04-02 14:07:57	alpounet	thoughtpolice, oh he is in finance now?
2013-04-02 14:07:59	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 255 seconds)
2013-04-02 14:08:02	thoughtpolice	i just talk to him through twitter these days
2013-04-02 14:08:08	quchen	ramses_: join will only work on tuples of the same type
2013-04-02 14:08:16	thoughtpolice	alpounet: yes, that's the impression i got. i'm not sure if it's standard chartered or somewhere else
2013-04-02 14:08:21	-->	dawe (~dawe@p5090F923.dip.t-dialin.net) has joined #haskell
2013-04-02 14:08:33	alpounet	hah ok, surprising
2013-04-02 14:08:35	ramses_	quchen: you can only map a function over both components of a tuple if they are the same type
2013-04-02 14:08:43	 *	hackagebot http-reverse-proxy 0.1.1.4 - Reverse proxy HTTP requests, either over raw sockets or with WAI  http://hackage.haskell.org/package/http-reverse-proxy-0.1.1.4 (MichaelSnoyman)
2013-04-02 14:08:49	quchen	ramses_: unless Rank2, yes
2013-04-02 14:08:55	merijn	I campaigned for "both = join (***)" in Control.Arrow on libraries@ but I was denied :(
2013-04-02 14:09:09	quchen	ramses_: He basically had a heterogeneous tuple and wanted to map show over both elements
2013-04-02 14:09:15	typoclass	merijn: urgh. why? sounds handy
2013-04-02 14:09:31	-->	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has joined #haskell
2013-04-02 14:09:32	ramses_	quchen: ah, missed that :)
2013-04-02 14:09:46	quchen	Speaking of mailing list denies, what's the usual policy when you propose something and nobody cares? :-S
2013-04-02 14:10:00	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 256 seconds)
2013-04-02 14:10:01	merijn	typoclass: Not enough people supported the idea and shachaf and edwardk complained that I should just use both from Control.Lens :<
2013-04-02 14:10:07	quchen	Let it die without notice? Write a new mail after the discussion period is over saying "nobody cared"?
2013-04-02 14:10:11	thoughtpolice	quchen: you bring it back up again, and ask for feedback.
2013-04-02 14:10:19	thoughtpolice	or at least, that's what i would do.
2013-04-02 14:10:23	typoclass	merijn: hm ok
2013-04-02 14:10:38	merijn	But both from lens only works on functions :(
2013-04-02 14:10:39	merijn	:t both
2013-04-02 14:10:41	lambdabot	Applicative f => (a -> f b) -> (a, a) -> f (b, b)
2013-04-02 14:11:06	thoughtpolice	shachaf: i do like this bug report!
2013-04-02 14:11:23	thoughtpolice	but unfortunately if i implement it, that means i'll just be reinforcing the idea i'll fix all your GHC woes :(
2013-04-02 14:12:12	elliott	merijn: thankfully nobody uses any other Arrow instances
2013-04-02 14:12:29	elliott	also both works with Kleisli! well, ApplicativeKleisli.
2013-04-02 14:12:36	typoclass	one of these days, i'll check out ghc HEAD and bumble around in the code like an elephant in the china shop
2013-04-02 14:13:02	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-04-02 14:13:12	typoclass	merijn: how do you mean 'only on functions'?
2013-04-02 14:13:14	thoughtpolice	killy9999: oh! and if you want to understand C-- and some of the things the optimizations are doing, i'd perhaps recommend checking out SPJ's Hoopl paper
2013-04-02 14:13:14	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-02 14:13:33	merijn	typoclass: join (***) works on any arrow!
2013-04-02 14:13:50	-->	LAMMJohnson (~ja@user-5af43920.broadband.tesco.net) has joined #haskell
2013-04-02 14:14:03	-->	augur (~augur@129-2-129-24.wireless.umd.edu) has joined #haskell
2013-04-02 14:14:11	typoclass	merijn: mm ok :-/ i don't know any arrows except (->)
2013-04-02 14:14:22	merijn	Wire!
2013-04-02 14:14:41	quchen	Wire?
2013-04-02 14:14:48	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 14:14:54	merijn	@hackage netwire
2013-04-02 14:14:54	lambdabot	http://hackage.haskell.org/package/netwire
2013-04-02 14:15:04	shachaf	thoughtpolice: Which one?
2013-04-02 14:15:09	thoughtpolice	shachaf: #7633
2013-04-02 14:15:11	killy9999	thoughtpolice: Thanks, I will
2013-04-02 14:15:13	quchen	Oh, FRP, I'm out ;-(
2013-04-02 14:15:15	shachaf	Oh, the feature request.
2013-04-02 14:15:29	ramses_	quchen: even if I define a both which takes (forall b. b -> c) as the first parameter, you cannot do "both show" since there is no Show constraint :s
2013-04-02 14:15:33	thoughtpolice	killy9999: http://research.microsoft.com/en-us/um/people/simonpj/papers/c--/hoopl-haskell10.pdf
2013-04-02 14:15:37	shachaf	Yes, it's kind of ridiculous that GHC can't catch this error right now.
2013-04-02 14:15:47	quchen	ramses_: http://hpaste.org/85035
2013-04-02 14:15:50	thoughtpolice	killy9999: the paper is more concerned with hoopl than C--, but it'll give you some insight into how the backend is structured
2013-04-02 14:15:57	thoughtpolice	which should help you when you dig into the source a bit
2013-04-02 14:16:16	ramses_	quchen: that's what I'm saying, you need that Show constriant
2013-04-02 14:16:16	thoughtpolice	(well, in a vague "I know what this type does" sort of way, which is often OK :)
2013-04-02 14:16:38	quchen	ramses_: Ah, that's what you meant. Well, yes.
2013-04-02 14:16:56	ramses_	quchen: you should have a different function for every possible combination of constraints with that approach
2013-04-02 14:17:04	quchen	ramses_: In any case it's not very pretty. first show . second show may be a better solution I guess.
2013-04-02 14:17:29	killy9999	thoughtpolice: it happens that I also have the Hoopl paper printed and waiting to be read :)
2013-04-02 14:17:37	killy9999	I guess I will be busy tomorrow with reading...
2013-04-02 14:18:23	ramses_	quchen: yeah, but then the "join (***)" as a combinator gives the same power without repeating the function :)
2013-04-02 14:18:39	quchen	ramses_: No
2013-04-02 14:18:42	quchen	:t join (***)
2013-04-02 14:18:43	lambdabot	Arrow a => a b c -> a (b, b) (c, c)
2013-04-02 14:18:46	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-04-02 14:19:05	quchen	Maps (b,b) to (c,c), not (a,b) to (c,c)
2013-04-02 14:19:25	quchen	The "show" in "first show . second show" are different :-)
2013-04-02 14:19:36	-->	fxr (~user@176.42.255.221) has joined #haskell
2013-04-02 14:19:37	quchen	Combining them needs the forall business
2013-04-02 14:19:41	ramses_	quchen: can you write a combinator that does that while parametrising the function to be mapped?
2013-04-02 14:19:47	<--	vramana (~chatzilla@103.5.132.50) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-04-02 14:19:59	ramses_	yeah, but that's because you specialise for show
2013-04-02 14:20:11	quchen	"You" as in "quchen"? No. "You" as in "edwardk"? Probably.
2013-04-02 14:20:35	 *	quchen plays canned laughter
2013-04-02 14:20:43	<--	Thomyho4 (~thomyho@mnhm-590c01d6.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-04-02 14:21:53	<--	nus (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-04-02 14:23:21	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-04-02 14:23:28	quchen	ramses_: Yeah, my Monte-Carlo-based approach to writing something like this failed
2013-04-02 14:23:31	-->	lemao (~lemao@177.68.235.158) has joined #haskell
2013-04-02 14:25:12	--	augustl is now known as Guest64100
2013-04-02 14:25:14	`cc`	http://jaspervdj.be/websockets/ is a good choice for a  websocket server?
2013-04-02 14:25:34	ramses_	quchen: hehe :) Is there a generator for random well-typed functions then?
2013-04-02 14:25:42	alpounet	`cc`, yes
2013-04-02 14:25:59	`cc`	thx
2013-04-02 14:26:08	`cc`	my other question
2013-04-02 14:26:19	quchen	ramses_: Yes. Create string, feed to GHC, if error then loop. Biased random coding. :-)
2013-04-02 14:26:25	Rembane	^^
2013-04-02 14:27:30	`cc`	I'm using a (managed) c++ TCP library, how would people here integrate it to haskell (in my case simple websocket server)
2013-04-02 14:28:29	`cc`	it mightt be hard, since the library has event handlers
2013-04-02 14:28:38	ramses_	quchen: that will converge terribly slow..
2013-04-02 14:28:57	quchen	ramses_: that *will converge* terribly slow
2013-04-02 14:29:00	quchen	:-P
2013-04-02 14:29:06	`cc`	the easy way is to make a standalone c++ application tht send udp/tcp messages to haskell
2013-04-02 14:29:46	ramses_	quchen: true, from a theoretic perspective you're fine :)
2013-04-02 14:29:50	`cc`	but if a sort of rpc is possible it could be better
2013-04-02 14:30:34	typoclass	`cc`: a managed c++ tcp library? how do you mean?
2013-04-02 14:30:42	-->	hajimehoshi (~hajimehos@p840a0e.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-02 14:31:20	`cc`	http://stackoverflow.com/questions/114238/difference-between-managed-c-and-c
2013-04-02 14:31:21	-->	grr (~grr@p5B232CBC.dip.t-dialin.net) has joined #haskell
2013-04-02 14:31:27	shachaf	Does "managed" mean .NET?
2013-04-02 14:31:30	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-04-02 14:31:30	<--	kushal (kdas@fedora/kushal) has quit (Quit: Leaving)
2013-04-02 14:31:38	`cc`	a crap invented by microsoft
2013-04-02 14:31:39	shachaf	Looks like it does.
2013-04-02 14:31:51	-->	nus (~nus@unaffiliated/nus) has joined #haskell
2013-04-02 14:31:58	shachaf	Well, you'll have to do it by communicating with .NET, then.
2013-04-02 14:32:03	shachaf	There's probably no simpe direct FFI.
2013-04-02 14:32:13	`cc`	FFI?
2013-04-02 14:32:22	grr	foreign function interface
2013-04-02 14:32:36	shachaf	Oh, and of course "manage C++" is different from "C++/CLI"
2013-04-02 14:32:37	typoclass	`cc`: the ffi is the way that haskell talks to c
2013-04-02 14:32:38	shachaf	d
2013-04-02 14:32:41	shachaf	You're using the former?
2013-04-02 14:33:24	<--	Testos (User@109.65.225.2) has quit (Read error: Connection reset by peer)
2013-04-02 14:33:26	-->	fsvehla (~fsvehla@TK212017097035.teleweb.at) has joined #haskell
2013-04-02 14:33:54	grr	I am looking for a name for `f` in, essentially, `f (x:xs) p = zipWith p (x:xs) xs` (so p would be called with each element and its successor element) Any ideas?
2013-04-02 14:33:56	<--	augur (~augur@129-2-129-24.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-02 14:33:59	<--	fsvehla (~fsvehla@TK212017097035.teleweb.at) has quit (Client Quit)
2013-04-02 14:34:10	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-02 14:34:24	-->	augur (~augur@129-2-129-24.wireless.umd.edu) has joined #haskell
2013-04-02 14:34:28	grr	only thing I've come up with so far is "pairwise", and that doesn't sound very appropriate
2013-04-02 14:34:35	shachaf	@quote zip`ap`tail
2013-04-02 14:34:36	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-04-02 14:34:57	shachaf	> (zipWith (+) <*> tail) [1,2,3,4]
2013-04-02 14:34:58	lambdabot	  [3,5,7]
2013-04-02 14:35:05	byorgey	shachaf beat me to it
2013-04-02 14:35:21	typoclass	grr: pairwise doesn't sound half-bad to me
2013-04-02 14:36:31	grr	Does not convey that the numbers are consecutive in the list
2013-04-02 14:36:47	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 14:36:57	shachaf	Note that "drop 1" may be slightly preferable to "tail".
2013-04-02 14:37:01	typoclass	grr: neighbors, map2, mapAdj, mapAdjacent, mapBy, mapConsecutives, successive
2013-04-02 14:37:21	quchen	grr: All elements in a list are consecutive.
2013-04-02 14:37:32	quchen	Their values need not be. ;-)
2013-04-02 14:37:36	grr	Well, immediately
2013-04-02 14:37:58	shachaf	quchen: Perhaps you should read again.
2013-04-02 14:38:37	quchen	Did. What now?
2013-04-02 14:38:42	grr	typoclass, yeah, that's the direction... looking at google results for 'zip ap tail' now...
2013-04-02 14:39:02	<--	faen (frantk@fran.tk) has quit (Remote host closed the connection)
2013-04-02 14:39:07	shachaf	zip`ap`tail is a joke
2013-04-02 14:39:24	shachaf	It's zipWith f l (tail l)
2013-04-02 14:39:26	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-04-02 14:39:33	shachaf	Which you can write as (zipWith f <*> tail), if you like.
2013-04-02 14:39:43	shachaf	(And ap = (<*>).)
2013-04-02 14:39:47	grr	Yeah but references to it come with name suggestions, like http://stackoverflow.com/questions/2546524/how-do-you-write-the-function-pairs-in-haskell calls it "pairs"
2013-04-02 14:39:48	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Ping timeout: 264 seconds)
2013-04-02 14:40:06	quchen	shachaf: yes, I understand that, but why read again?
2013-04-02 14:40:23	quchen	It's hard to not see something is a joke when it involves gods
2013-04-02 14:40:26	-->	madjestic (~madjestic@95.98.84.199) has joined #haskell
2013-04-02 14:40:37	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 14:40:40	shachaf	quchen: That was directed at grr.
2013-04-02 14:40:50	-->	onlydnaq (~dna@c-5eeaaa32-74736162.cust.telenor.se) has joined #haskell
2013-04-02 14:40:56	grr	http://stackoverflow.com/questions/3774247/what-do-we-call-this-new-higher-order-function calls it "pleat"
2013-04-02 14:41:08	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 246 seconds)
2013-04-02 14:41:10	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 14:41:36	-->	Taneb (~nathan@host-92-23-117-149.as13285.net) has joined #haskell
2013-04-02 14:41:52	shachaf	quchen: What I meant is that "All elements in a list are consecutive." "Their values need not be. ;-)" is both pedantic and irrelevant/wrong, if you want me to clarify.
2013-04-02 14:42:10	-->	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has joined #haskell
2013-04-02 14:42:46	-->	faen (frantk@fran.tk) has joined #haskell
2013-04-02 14:42:56	shachaf	The question was: foo [a,b,c,d] = [f a b, f b c, f c d]; how do I indicate with the name that only elements that are right next to each other are passed to f?
2013-04-02 14:42:56	quchen	Note the smiley. Talk about being pedantic
2013-04-02 14:43:09	mm_freak	can i make :t expand type aliases?
2013-04-02 14:43:12	shachaf	Anyway I'm getting mean or something so I should go to sleep.
2013-04-02 14:43:33	shachaf	mm_freak: I don't know of a way. But you can use :kind!.
2013-04-02 14:43:49	-->	OlegYch9 (~OlegYch@86.57.158.170) has joined #haskell
2013-04-02 14:43:58	mm_freak	thanks
2013-04-02 14:43:59	thoughtpolice	which is only in HEAD :)
2013-04-02 14:44:06	shachaf	No, it's in 7.6
2013-04-02 14:44:07	thoughtpolice	(if i remember correctly, anyway)
2013-04-02 14:44:11	mm_freak	can i make a scoped type operator infixr?
2013-04-02 14:44:17	-->	end3rW (~end3rW@95.131.103.59) has joined #haskell
2013-04-02 14:44:26	shachaf	Scoped type operator?
2013-04-02 14:44:26	thoughtpolice	hm, clearly i've been spending too much time with HEAD. i can't even remember what's old anymore
2013-04-02 14:44:30	mm_freak	type MyType to = X `to` Y `to` Z
2013-04-02 14:44:54	shachaf	Ah. I don't know of a way.
2013-04-02 14:45:01	mm_freak	too bad
2013-04-02 14:45:12	grr	http://stackoverflow.com/a/3774787 also has `pairwise` ... `meld` wouldn't be that bad
2013-04-02 14:45:25	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 248 seconds)
2013-04-02 14:45:36	-->	QinGW2 (~yaaic@124.127.224.4) has joined #haskell
2013-04-02 14:45:51	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-04-02 14:46:45	typoclass	grr: i think my favorite would be map2, to indicate it's dealing with 2-tuples
2013-04-02 14:47:02	typoclass	... or er, uncurried ones. you know what i mean :-)
2013-04-02 14:48:06	<--	OlegYch (~OlegYch@office1.altoros.com) has quit (Ping timeout: 276 seconds)
2013-04-02 14:48:51	arkeet	@quote zip`ap`tail
2013-04-02 14:48:51	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-04-02 14:48:55	grr	map2 seems to be popular for various purposes
2013-04-02 14:49:03	arkeet	oh, someone else did it.
2013-04-02 14:49:20	<--	augur (~augur@129-2-129-24.wireless.umd.edu) has quit (Remote host closed the connection)
2013-04-02 14:49:24	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 264 seconds)
2013-04-02 14:49:52	-->	augur (~augur@129-2-129-24.wireless.umd.edu) has joined #haskell
2013-04-02 14:50:11	-->	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has joined #haskell
2013-04-02 14:52:02	<--	madjestic (~madjestic@95.98.84.199) has quit (Read error: Connection reset by peer)
2013-04-02 14:53:20	<--	Mortchek (~danny@unaffiliated/mortchek) has quit (Quit: leaving)
2013-04-02 14:54:12	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 256 seconds)
2013-04-02 14:54:36	<--	augur (~augur@129-2-129-24.wireless.umd.edu) has quit (Ping timeout: 276 seconds)
2013-04-02 14:54:48	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-04-02 14:54:53	<--	joaopizani (~joaopizan@145.107.81.87) has quit (Ping timeout: 252 seconds)
2013-04-02 14:55:24	<--	eff (~quassel@114.246.177.102) has quit (Ping timeout: 264 seconds)
2013-04-02 14:55:55	-->	rafsoaken (~rafsoaken@mail.secretarysearch.at) has joined #haskell
2013-04-02 14:56:03	-->	XyMa (~user@59.108.40.196) has joined #haskell
2013-04-02 14:57:26	<--	asante (~asante@unaffiliated/asante) has quit (Quit: No Ping reply in 180 seconds.)
2013-04-02 14:57:36	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (Ping timeout: 256 seconds)
2013-04-02 14:57:39	-->	asante (~asante@unaffiliated/asante) has joined #haskell
2013-04-02 14:57:52	<--	jtalk (~quassel@94.181.46.210) has quit (Remote host closed the connection)
2013-04-02 14:58:37	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-04-02 14:59:15	-->	rexim (~rexim@unaffiliated/rexim) has joined #haskell
2013-04-02 14:59:18	<--	eirikur (~eirikur@46-239-208-19.tal.is) has quit (Remote host closed the connection)
2013-04-02 14:59:27	<--	rexim (~rexim@unaffiliated/rexim) has quit (Client Quit)
2013-04-02 14:59:49	<--	xpika (~jrg@120.155.21.185) has quit (Ping timeout: 248 seconds)
2013-04-02 14:59:58	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-04-02 15:01:23	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-04-02 15:01:39	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 245 seconds)
2013-04-02 15:01:43	-->	joaopizani (~joaopizan@145.107.81.87) has joined #haskell
2013-04-02 15:02:48	alexander__b	filter (not . any isSpace) ["this"," ","is"," ","a"," ","test"," ","with"," ","spaces"] -- TOO MANY FUNCTIONS. can someone step me through this in the correct order?\
2013-04-02 15:02:55	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-04-02 15:02:59	-->	rexim (~rexim@unaffiliated/rexim) has joined #haskell
2013-04-02 15:03:08	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-02 15:03:19	alexander__b	the full thing was filter (not . any isSpace) . groupBy (on (==) isSpace) $ "this is a test with spaces" -- for the record.
2013-04-02 15:03:22	-->	u_ (~phillip@75.57.196.73) has joined #haskell
2013-04-02 15:03:22	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 15:03:26	<--	joaopizani (~joaopizan@145.107.81.87) has quit (Client Quit)
2013-04-02 15:03:32	shachaf	Which part don't you know?
2013-04-02 15:03:51	shachaf	Take that part out, replace it with a simpler part. Study it in isolation.
2013-04-02 15:03:57	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 15:03:58	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Quit: Leaving...)
2013-04-02 15:04:02	alexander__b	what happens first. what gets sent where.
2013-04-02 15:04:23	mauke	filter happens first
2013-04-02 15:04:30	-->	andrey_ (~chatzilla@95.72.206.127) has joined #haskell
2013-04-02 15:04:36	-->	awef9e (4a487b96@gateway/web/freenode/ip.74.72.123.150) has joined #haskell
2013-04-02 15:04:42	`cc`	FFI is like Java JNI?
2013-04-02 15:04:53	typoclass	`cc`: yeah, more or less
2013-04-02 15:04:56	-->	jtalk (~quassel@94.181.46.210) has joined #haskell
2013-04-02 15:05:02	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 15:05:12	typoclass	alexander__b: don't worry :-) so, isSpace is clear, right?
2013-04-02 15:05:16	<--	Duffers (~Duffers@host109-149-147-112.range109-149.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-04-02 15:05:16	typoclass	> isSpace 'L'
2013-04-02 15:05:16	<--	Franciman (~quassel@host112-163-dynamic.27-79-r.retail.telecomitalia.it) has quit (Read error: Connection reset by peer)
2013-04-02 15:05:18	`cc`	I'm pretty sure it will fail for .NET C++, but will try
2013-04-02 15:05:18	lambdabot	  False
2013-04-02 15:05:21	typoclass	@type isSpace
2013-04-02 15:05:23	lambdabot	Char -> Bool
2013-04-02 15:05:27	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-04-02 15:05:35	alexander__b	typoclass: yes. and any takes a function that takes something and gives a bool, and a list eventually gives a bool. isSpace is the procedure sent to any.
2013-04-02 15:06:12	alexander__b	not takes a bool and returns a bool. it gets the result from any, I guess. filter filters based on the result from not.
2013-04-02 15:06:26	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-04-02 15:06:44	alexander__b	I could add "I think" to everything I'm saying here, but choose not to for brevity's sake. please don't think I think I know what I'm talking about. ;-)
2013-04-02 15:07:21	<--	jtalk (~quassel@94.181.46.210) has quit (Remote host closed the connection)
2013-04-02 15:07:23	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-02 15:07:44	-->	South (80c0a21c@gateway/web/freenode/ip.128.192.162.28) has joined #haskell
2013-04-02 15:07:57	shachaf	The great part about this is that you can figure out each part on its own.
2013-04-02 15:08:08	shachaf	What's filter BLAH ["this","is",...]?
2013-04-02 15:08:15	shachaf	What's (not . any isSpace)?
2013-04-02 15:08:29	mauke	> filter even [1 .. 10]
2013-04-02 15:08:30	lambdabot	  [2,4,6,8,10]
2013-04-02 15:08:39	shachaf	If you don't know (not . any isSpace), figure out the individual parts: not, any, isSpace, (.)
2013-04-02 15:08:42	typoclass	alexander__b: you're guessing pretty well. (we say function instead of procedure, but that's no big deal.) so, "any isSpace ['a', 'x',' ']" runs the function on each of the list's elements
2013-04-02 15:08:48	-->	Aune (~arne@volac.lysator.liu.se) has joined #haskell
2013-04-02 15:08:50	typoclass	alexander__b: make sense?
2013-04-02 15:08:54	mauke	> filter (\x -> length x > 3) ["this", "is", "not", "sparta"]
2013-04-02 15:08:55	lambdabot	  ["this","sparta"]
2013-04-02 15:08:58	alexander__b	typoclass: right. yes.
2013-04-02 15:09:03	-->	znode (~znode@59.108.118.101) has joined #haskell
2013-04-02 15:09:06	<--	taterbase (~taterbase@63.226.99.118) has quit (Ping timeout: 264 seconds)
2013-04-02 15:09:15	<--	charliesome (~textual@124-168-121-73.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-04-02 15:09:23	-->	vickaita (~vickaita@75-150-152-213-Philadelphia.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 15:09:38	shachaf	(.) is the most important part of (not . any isSpace), if your goal is to learn to read Haskell programs.
2013-04-02 15:09:50	typoclass	alexander__b: good. so as you guessed, this produces a Bool, which is then given into 'not', which just negates it
2013-04-02 15:09:58	-->	knightshade (~knightsha@p548CFF27.dip.t-dialin.net) has joined #haskell
2013-04-02 15:10:00	shachaf	So find out what it means. First off, this is parsed as (not . (any isSpace))
2013-04-02 15:10:04	shachaf	@src (.)
2013-04-02 15:10:05	lambdabot	(f . g) x = f (g x)
2013-04-02 15:10:05	lambdabot	NB: In lambdabot,  (.) = fmap
2013-04-02 15:10:18	shachaf	OK, I'm just messing everything up.
2013-04-02 15:10:20	typoclass	alexander__b: (.) is similar to a pipe in the shell: "cat | grep" is similar to "grep . cat" in haskell
2013-04-02 15:10:22	 *	shachaf goes.
2013-04-02 15:10:32	-->	yacks (~yacks@180.151.36.170) has joined #haskell
2013-04-02 15:11:01	--	niklasb_ is now known as niklasb
2013-04-02 15:11:06	-->	paintcan (~user@66.199.39.230) has joined #haskell
2013-04-02 15:11:10	-->	sanityinc (~user@host31-51-242-164.range31-51.btcentralplus.com) has joined #haskell
2013-04-02 15:11:14	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-04-02 15:11:51	alexander__b	typoclass: I'm just confused over the list of strings I guess. because I've usually used filter on a list like [2,3,6,5,8,77] -- not ["foo", "bar"] -- which is [['f', 'o','o'],['b','a','r']], right?
2013-04-02 15:11:57	grr	`cc`, if you are looking for a way to use .NET APIs from Haskell, there are some things like http://haskell.forkio.com/dotnet
2013-04-02 15:12:09	typoclass	alexander__b: yes exactly, it's a [String], a list of Strings
2013-04-02 15:12:39	<--	ciaranm (~ciaranm@tchaikovsky.exherbo.org) has quit (Read error: Operation timed out)
2013-04-02 15:12:41	typoclass	alexander__b: this means, "filter f" will repeatedly call function f with one String
2013-04-02 15:12:51	alexander__b	typoclass: so it's the use of any that threw me off, being used to using filter to operate on one char/num/whatever at the time, not a list of lists.
2013-04-02 15:12:59	South	alexander__b: Filter will filter strings, not chars, since that's what the list contains one level in
2013-04-02 15:13:16	alexander__b	South: yes.
2013-04-02 15:13:43	-->	eff (~quassel@114.246.103.171) has joined #haskell
2013-04-02 15:14:05	-->	jtalk (~quassel@94.181.46.210) has joined #haskell
2013-04-02 15:14:09	typoclass	alexander__b: yup. "filter f" passes one element of the list into f, expecting that f will give back True or False. here, one element is one String
2013-04-02 15:14:27	-->	ciaranm (~ciaranm@tchaikovsky.exherbo.org) has joined #haskell
2013-04-02 15:14:35	<--	rafsoaken (~rafsoaken@mail.secretarysearch.at) has quit (Quit: rafsoaken)
2013-04-02 15:14:49	alexander__b	which is syntax sugar for a list of chars. I guess the slew of functions made me blind to how isSpace could possibly operate on a list instead of a char, but it's because of any.
2013-04-02 15:15:04	`cc`	grr, thx, the other problem is how to do the notion of event handler in haskell, things like qc->OnDisconnect+=gcnew DisconnectEventHandler(this,&Main::deconnexion); and the callback ;)
2013-04-02 15:15:11	typoclass	alexander__b: yup, exactly :-)
2013-04-02 15:15:12	alexander__b	I just have to get used to reading a bunch of functions and understanding which way what is going.
2013-04-02 15:15:19	typoclass	> isSpace "lolcat" -- gives an error
2013-04-02 15:15:21	lambdabot	  Couldn't match expected type `GHC.Types.Char'
2013-04-02 15:15:21	lambdabot	             with actual type...
2013-04-02 15:15:26	typoclass	> any isSpace "lolcat" -- works
2013-04-02 15:15:28	lambdabot	  False
2013-04-02 15:15:58	typoclass	alexander__b: so it can be confusing at the first glance, but usually you can work through it
2013-04-02 15:16:07	South	alexander__b: It usually helps me when I'm confused to look up all of the type signatures in composed functions to see what each thing is doing
2013-04-02 15:16:26	alexander__b	typoclass: it's kind of when I was learning dvorak. if I had to not use it for a few days, it was a big setback.
2013-04-02 15:16:38	`cc`	for all this, I think I'll run a standalone C++ .net shit, that sends udp (presumably faster than tcp)
2013-04-02 15:16:46	<--	sanemat_ (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-04-02 15:16:51	alexander__b	South: I did that this time, which was why I figured out a big chunk of it. my main confusion was just wtf was going where, what function happened first, etc.
2013-04-02 15:17:03	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-04-02 15:17:12	grr	`cc`, the problem there is probably more the += than the delegate
2013-04-02 15:17:14	South	alexander__b: Cool! :)
2013-04-02 15:17:44	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 15:18:09	typoclass	alexander__b: right, but i bet the time to re-learn stuff after the setback is much less than the time you needed to learn it initially
2013-04-02 15:18:19	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-02 15:18:40	alexander__b	typoclass: of course. if not, I would probably have either hanged myself or stopped haskell long time ago. and also never switched to dvorak. ;-)
2013-04-02 15:18:58	`cc`	grr,  yes the += would have to be converted to pure c++
2013-04-02 15:19:10	-->	MroiZo (~oizo@94.191.187.193.mobile.3.dk) has joined #haskell
2013-04-02 15:20:03	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-02 15:21:12	<--	MOMI (uid4868@gateway/web/irccloud.com/x-mulxbdvbbbplcaeu) has quit (Ping timeout: 264 seconds)
2013-04-02 15:21:14	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Remote host closed the connection)
2013-04-02 15:21:32	<--	sanityinc (~user@host31-51-242-164.range31-51.btcentralplus.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-02 15:21:32	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-04-02 15:22:40	--	zz_nh2 is now known as nh2
2013-04-02 15:23:50	-->	fizbin (~Adium@pool-173-72-88-179.cmdnnj.east.verizon.net) has joined #haskell
2013-04-02 15:24:36	<--	rexim (~rexim@unaffiliated/rexim) has quit (Quit: Leaving)
2013-04-02 15:25:25	-->	rexim (~rexim@unaffiliated/rexim) has joined #haskell
2013-04-02 15:25:27	typoclass	`cc`: i'm curious, why do you need this other managed c++ tcp library, and not the regular one available in haskell?
2013-04-02 15:27:12	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-04-02 15:27:14	`cc`	I'm using a Metatrader library written for .NET
2013-04-02 15:27:34	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 15:28:43	yezariaely	is there a predefined uncurry3 function?
2013-04-02 15:28:59	<--	ulfdoz (~mary@p5B38B4BF.dip.t-dialin.net) has quit (Ping timeout: 255 seconds)
2013-04-02 15:30:05	merijn	I don't think so? but it's trivial to make a lambda for it
2013-04-02 15:30:16	ab9rf	@src uncurry
2013-04-02 15:30:16	lambdabot	uncurry f p = f (fst p) (snd p)
2013-04-02 15:30:40	merijn	:t \f (x, y, z) -> f x y z
2013-04-02 15:30:42	lambdabot	(t1 -> t2 -> t3 -> t) -> (t1, t2, t3) -> t
2013-04-02 15:30:44	yezariaely	just wondering. Otherwise I will change my fundef
2013-04-02 15:30:48	`cc`	typoclass,  reading market quotations from it, and would like to manage them in a haskell websocket server
2013-04-02 15:30:51	yezariaely	thx
2013-04-02 15:31:36	ab9rf	@pl \f (x,y,z) -> f x y z
2013-04-02 15:31:36	lambdabot	(line 1, column 9):
2013-04-02 15:31:37	lambdabot	unexpected "z"
2013-04-02 15:31:37	lambdabot	ambiguous use of a non associative operator
2013-04-02 15:31:45	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-04-02 15:32:20	ab9rf	huh
2013-04-02 15:33:15	geekosaur	 @pl isn't real smart about tuples
2013-04-02 15:33:29	ab9rf	it would seem so ;)
2013-04-02 15:33:39	<--	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has quit (Read error: No route to host)
2013-04-02 15:33:40	geekosaur	it knows what to do with 2-tuples, but anything larger it gets confused
2013-04-02 15:33:52	<--	v (~v@61.173.102.10) has quit (Ping timeout: 256 seconds)
2013-04-02 15:33:55	`cc`	doing 1 program in c++ that send a big bunch of events (by udp let's say) to my haskell program, seems to be a good idea not too slow, I think?
2013-04-02 15:34:41	ab9rf	i can't say i approve of C++
2013-04-02 15:34:54	<--	urm3l (~urm3l@HSI-KBW-078-043-223-061.hsi4.kabel-badenwuerttemberg.de) has quit (Read error: Connection reset by peer)
2013-04-02 15:35:06	`cc`	hehe, no choice unfortunately
2013-04-02 15:35:08	<--	ciaranm (~ciaranm@tchaikovsky.exherbo.org) has quit (Changing host)
2013-04-02 15:35:09	-->	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has joined #haskell
2013-04-02 15:35:21	ab9rf	there are always choices :)
2013-04-02 15:35:45	`cc`	it's a proprietary library, not really possible to reverseengineer
2013-04-02 15:36:33	--	nh2 is now known as zz_nh2
2013-04-02 15:37:00	ousado	I wouldn't use udp if I wanted a reliable transport
2013-04-02 15:37:12	ab9rf	yeah, i don't know why you'd want to use udp
2013-04-02 15:37:16	ab9rf	why not just use the FFI?
2013-04-02 15:37:21	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 15:37:35	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Quit: leaving)
2013-04-02 15:37:43	ab9rf	or if you really want them in different processes, a shared memory segment or a unix-domain socket?
2013-04-02 15:37:58	--	qz_ is now known as qz
2013-04-02 15:38:04	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-04-02 15:38:04	<--	sambio (~sambio@190.57.227.109) has quit (Changing host)
2013-04-02 15:38:04	-->	sambio (~sambio@unaffiliated/sambio) has joined #haskell
2013-04-02 15:38:16	<--	qz (~qz@li272-85.members.linode.com) has quit (Changing host)
2013-04-02 15:38:16	-->	qz (~qz@unaffiliated/quetzal) has joined #haskell
2013-04-02 15:38:49	<--	theDon (~td@141.30.223.187) has quit (Ping timeout: 258 seconds)
2013-04-02 15:38:49	<--	wting (~wting@pool-173-71-48-161.dllstx.fios.verizon.net) has quit (Ping timeout: 258 seconds)
2013-04-02 15:38:53	 *	hackagebot names 0.3.1 - Type level names.  http://hackage.haskell.org/package/names-0.3.1 (JulianFleischer)
2013-04-02 15:39:03	<--	etehtsea (~textual@109.205.253.9) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-04-02 15:39:25	-->	theDon (~td@141.30.223.187) has joined #haskell
2013-04-02 15:40:05	<--	sambio (~sambio@unaffiliated/sambio) has quit (Client Quit)
2013-04-02 15:40:36	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-04-02 15:40:40	-->	wting (~wting@pool-173-71-48-161.dllstx.fios.verizon.net) has joined #haskell
2013-04-02 15:41:05	-->	stat_vi (~stat@dslb-094-218-008-236.pools.arcor-ip.net) has joined #haskell
2013-04-02 15:41:23	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-04-02 15:41:43	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-02 15:41:46	-->	eirikur (~eirikur@46-239-208-19.tal.is) has joined #haskell
2013-04-02 15:42:12	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-04-02 15:42:29	<--	znode (~znode@59.108.118.101) has quit (Remote host closed the connection)
2013-04-02 15:43:05	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-02 15:43:57	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-02 15:44:01	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-04-02 15:44:13	<--	awef9e (4a487b96@gateway/web/freenode/ip.74.72.123.150) has quit (Ping timeout: 245 seconds)
2013-04-02 15:45:09	`cc`	ab9rf, yes hmm on windows, and how would you write such code http://hpaste.org/85038 with FFIs
2013-04-02 15:45:18	-->	jbetzend (~jbetzend@ubi-1-219-130.dhcp.uni-bielefeld.de) has joined #haskell
2013-04-02 15:45:34	--	zz_nh2 is now known as nh2
2013-04-02 15:45:40	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-04-02 15:46:18	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-04-02 15:46:21	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 15:46:53	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 15:47:21	-->	v (~v@199.68.198.120) has joined #haskell
2013-04-02 15:48:31	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-04-02 15:49:39	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 15:50:01	-->	gg7 (~gg7@unaffiliated/gg7) has joined #haskell
2013-04-02 15:51:09	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-02 15:51:39	-->	jeyb (~jeyb@CPE001cf06a25db-CM7cb21b1799d6.cpe.net.cable.rogers.com) has joined #haskell
2013-04-02 15:51:46	-->	otend (~otend@nat-134-193-239-147.nat.umkc.edu) has joined #haskell
2013-04-02 15:51:48	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Ping timeout: 276 seconds)
2013-04-02 15:52:31	-->	dayom (~dayom@cpe-66-108-34-129.nyc.res.rr.com) has joined #haskell
2013-04-02 15:52:40	<--	tlaine (toalla@linux.utu.fi) has left #haskell
2013-04-02 15:53:10	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-02 15:53:54	 *	hackagebot named-records 0.3.3 - Flexible records with named fields.  http://hackage.haskell.org/package/named-records-0.3.3 (JulianFleischer)
2013-04-02 15:53:57	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 15:54:10	hpaste	circle pasted “why” at http://hpaste.org/85039
2013-04-02 15:54:24	circle	that was an example given from my book ^
2013-04-02 15:54:29	circle	I tried it, and it gives an error
2013-04-02 15:54:37	circle	I copied it exactly from the book.
2013-04-02 15:54:46	mauke	what exactly did you do, and what happened?
2013-04-02 15:54:53	finnrobi	can I write a pointfree version of this function? zipWith (
2013-04-02 15:54:57	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-04-02 15:54:57	typoclass	circle: could you click 'annotate' in the paste and add the error messag?
2013-04-02 15:54:58	finnrobi	err, premature return!
2013-04-02 15:55:01	-->	tabolario (~tabolario@23-24-115-229-static.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 15:55:13	typoclass	circle: sometimes books are a little outdated, but it's usually easy to fix
2013-04-02 15:55:27	circle	typoclass: " Couldn't match type `Char' with `(a0, String)'
2013-04-02 15:55:27	circle	"
2013-04-02 15:55:33	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-04-02 15:55:35	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-04-02 15:55:41	mauke	circle: what's the full error message?
2013-04-02 15:55:41	hpaste	circle annotated “why” with “why (annotation)” at http://hpaste.org/85039#a85040
2013-04-02 15:55:54	<--	v (~v@199.68.198.120) has quit (Ping timeout: 264 seconds)
2013-04-02 15:55:57	finnrobi	can I write a pointfree version of this function? zipWith (\x y -> head $ drop x y) [0..] ?
2013-04-02 15:56:06	--	cryon_ is now known as cryon
2013-04-02 15:56:15	mauke	circle: return', not return
2013-04-02 15:56:16	<--	adlan (~adlan@210.195.12.15) has quit (Remote host closed the connection)
2013-04-02 15:56:28	circle	aHH
2013-04-02 15:56:31	circle	damn I' am indiot
2013-04-02 15:56:31	-->	madjestic (~madjestic@95.98.84.199) has joined #haskell
2013-04-02 15:56:32	circle	thank you
2013-04-02 15:56:34	mauke	@pl zipWith (\x y -> head $ drop x y) [0..]
2013-04-02 15:56:34	lambdabot	zipWith ((head .) . drop) [0..]
2013-04-02 15:56:38	<--	sellout (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-04-02 15:56:47	finnrobi	ah
2013-04-02 15:56:47	ab9rf	yes, you can do that :)
2013-04-02 15:56:48	typoclass	circle: don't worry :-) sometimes the easiest things are the hardest to see
2013-04-02 15:56:52	circle	appreciated
2013-04-02 15:57:02	mauke	@pl zipWith (\x y -> y !! x) [0..]
2013-04-02 15:57:03	lambdabot	zipWith (flip (!!)) [0..]
2013-04-02 15:57:08	-->	Sculptor (~Sculptor@89.110.207.174) has joined #haskell
2013-04-02 15:57:08	<--	Sculptor (~Sculptor@89.110.207.174) has quit (Changing host)
2013-04-02 15:57:08	-->	Sculptor (~Sculptor@unaffiliated/sculptor) has joined #haskell
2013-04-02 15:57:39	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 15:57:47	-->	taterbase (~taterbase@63.226.99.118) has joined #haskell
2013-04-02 15:59:00	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-04-02 15:59:12	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-04-02 15:59:21	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Max SendQ exceeded)
2013-04-02 16:00:03	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-04-02 16:00:08	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-04-02 16:00:11	<--	joar (~joar@fsf/member/jwandborg) has quit (Quit: leaving)
2013-04-02 16:01:47	<--	Gruu_ (~Gruu_@213.211.132.86.static.edpnet.net) has quit (Quit: Gruu_)
2013-04-02 16:03:21	<--	LAMMJohnson (~ja@user-5af43920.broadband.tesco.net) has quit (Remote host closed the connection)
2013-04-02 16:03:35	<--	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has quit (Remote host closed the connection)
2013-04-02 16:03:47	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Quit: Lost terminal)
2013-04-02 16:03:58	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-04-02 16:04:09	-->	GOMADWarrior (~Regis@187.65.192.206) has joined #haskell
2013-04-02 16:04:26	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 246 seconds)
2013-04-02 16:04:31	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-04-02 16:04:53	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Ping timeout: 248 seconds)
2013-04-02 16:05:00	<--	yacks (~yacks@180.151.36.170) has quit (Ping timeout: 264 seconds)
2013-04-02 16:05:04	nicoo	> zipWith (flip (!!)) [0..] [0..]
2013-04-02 16:05:06	lambdabot	  No instances for (GHC.Enum.Enum [c0], GHC.Num.Num [c0])
2013-04-02 16:05:06	lambdabot	   arising from a u...
2013-04-02 16:05:28	nicoo	:t zipWith (flip (!!)) [0..]
2013-04-02 16:05:29	lambdabot	[[c]] -> [c]
2013-04-02 16:06:06	-->	roconnor_ (~roconnor@e120-pool-d89a600f.brdbnd.voicenetwork.ca) has joined #haskell
2013-04-02 16:06:55	-->	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has joined #haskell
2013-04-02 16:06:55	<--	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has quit (Changing host)
2013-04-02 16:06:55	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-04-02 16:07:42	<--	akamaus (~akamaus@95.106.8.194) has quit (Read error: Operation timed out)
2013-04-02 16:07:44	-->	yacks (~yacks@180.151.36.170) has joined #haskell
2013-04-02 16:07:53	-->	adlan (~adlan@210.195.12.15) has joined #haskell
2013-04-02 16:09:09	<--	Kuba_ (~jakub@87-239-45-70.ip.gronet.pl) has quit (Remote host closed the connection)
2013-04-02 16:09:12	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-04-02 16:09:18	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-04-02 16:09:55	-->	timthelion (~timothy@134.222.broadband11.iol.cz) has joined #haskell
2013-04-02 16:10:06	<--	seq99 (~user@213.61.73.18) has quit (Read error: Connection reset by peer)
2013-04-02 16:10:08	-->	Eduard_Munteanu (~Eduard_Mu@188.25.7.250) has joined #haskell
2013-04-02 16:11:26	merijn	How do I stop cabal from deleting tmp files? I'm getting a compile error from a C file in my tmp folder, but when cabal finishes that file no longer exists so I can't inspect it
2013-04-02 16:11:27	-->	seq99` (~user@213.61.73.18) has joined #haskell
2013-04-02 16:11:43	<--	South (80c0a21c@gateway/web/freenode/ip.128.192.162.28) has quit (Ping timeout: 245 seconds)
2013-04-02 16:12:08	<--	yansal (4efa8276@gateway/web/freenode/ip.78.250.130.118) has quit (Ping timeout: 245 seconds)
2013-04-02 16:12:34	--	nh2 is now known as zz_nh2
2013-04-02 16:12:37	-->	v (~v@61.173.102.10) has joined #haskell
2013-04-02 16:12:42	<--	yacks (~yacks@180.151.36.170) has quit (Max SendQ exceeded)
2013-04-02 16:12:54	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-02 16:13:05	typoclass	merijn: ctrl-z?
2013-04-02 16:13:08	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-02 16:13:12	merijn	...
2013-04-02 16:13:27	-->	yacks (~yacks@180.151.36.170) has joined #haskell
2013-04-02 16:13:35	merijn	And I should just guess when to stop hit hoping for sheer luck to kick in?
2013-04-02 16:14:05	<--	madjestic (~madjestic@95.98.84.199) has quit (Ping timeout: 252 seconds)
2013-04-02 16:14:10	mauke	is it possible to tell cabal which C compiler to use?
2013-04-02 16:14:38	-->	Guest61545 (~client@173.226.0.114) has joined #haskell
2013-04-02 16:14:51	typoclass	merijn: i admit it's not perfect :-) i was thinking in terms of 'try the easiest thing first'
2013-04-02 16:14:52	merijn	I would hope it just uses CC?
2013-04-02 16:15:51	-->	Kazimuth (~Nautilus@75-147-32-245-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-04-02 16:15:55	merijn	typoclass: I'm trying to figure out which the unix package is breaking on "undeclared typedefs" when compiling under cygwin when all the header files are in fact just fine. Having to guess when to hit ctrl-z is likely to put me in a murderous rage, so I hope you have a more useful suggestion...
2013-04-02 16:15:59	<--	edon (~user@albalug/edon) has quit (Ping timeout: 260 seconds)
2013-04-02 16:16:22	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-04-02 16:16:31	<--	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has quit (Remote host closed the connection)
2013-04-02 16:16:32	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-04-02 16:16:51	-->	MrFenix_ (~JanB@p57A192EB.dip.t-dialin.net) has joined #haskell
2013-04-02 16:17:01	--	Guest34459 is now known as EvanR
2013-04-02 16:17:03	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Quit: Lämnar)
2013-04-02 16:17:04	<--	EvanR (~erinehart@208.117.200.94) has quit (Changing host)
2013-04-02 16:17:04	-->	EvanR (~erinehart@unaffiliated/evanr) has joined #haskell
2013-04-02 16:17:17	timthelion	merijn: you have to hit Ctrl-z because cmd.exe doesn't keep scroll history going back that far?
2013-04-02 16:17:23	<--	niloc132 (~colin@50-80-17-180.client.mchsi.com) has quit (Ping timeout: 246 seconds)
2013-04-02 16:17:24	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-02 16:17:25	-->	johanhil_ (johan@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has joined #haskell
2013-04-02 16:17:48	merijn	timthelion: No, cabal is deleting the temp C files that are erroring on compile
2013-04-02 16:18:05	merijn	I was asking how to stop it from doing that, so I can try to debug wtf is going on
2013-04-02 16:18:11	typoclass	merijn: do you do 'cabal install' or 'cabal unpack' + 'build'? i'd expect that with unpack, it'd keep more of the stuff in dist/
2013-04-02 16:18:16	timthelion	merijn: there is some cabal option to only generate temp files and not continue.
2013-04-02 16:18:32	merijn	I don't even get past cabal configure, because it fails with a "Bad header file HsUnix.h"
2013-04-02 16:18:42	merijn	timthelion: Probably, I was asking what it was
2013-04-02 16:18:52	-->	alanz (~alanz@105-237-37-145.access.mtnbusiness.co.za) has joined #haskell
2013-04-02 16:18:52	Vq	Mount a version controlled filesystem at /tmp
2013-04-02 16:19:01	Vq	:o)
2013-04-02 16:19:05	timthelion	Vq: he's under cygwin
2013-04-02 16:19:06	merijn	Vq: Right...on windows...
2013-04-02 16:19:29	Vq	cyg...win... ?
2013-04-02 16:19:29	timthelion	Vq: there are version controlled file systems?
2013-04-02 16:19:31	--	johanhil_ is now known as johanhil
2013-04-02 16:19:33	typoclass	(i do think unpack was the way i used to check the contents of of what hsc2hs was outputting)
2013-04-02 16:19:36	<--	yacks (~yacks@180.151.36.170) has quit (Ping timeout: 245 seconds)
2013-04-02 16:19:42	merijn	Somehow the HsUnix.h file is thinking some stuff isn't defined properly, whereas my inspection of the system headers shows they're clearly fine :\
2013-04-02 16:19:43	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-04-02 16:19:45	<--	johanhil (johan@c-8453e253.02-2-64736c14.cust.bredbandsbolaget.se) has left #haskell
2013-04-02 16:19:52	-->	RayNbow (~RayNbow@scientia.demon.nl) has joined #haskell
2013-04-02 16:20:00	Vq	timthelion: Yeah, but I wouldn't seriously recommend using them for /tmp
2013-04-02 16:20:10	ab9rf	heh
2013-04-02 16:20:20	<--	MrFenix (~JanB@p57A18D95.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-04-02 16:20:35	-->	ptek (~ptek@anon-175-93.vpn.ipredator.se) has joined #haskell
2013-04-02 16:20:43	mauke	merijn: if you could tell it what to use as a C compiler, you wouldn't need a special option
2013-04-02 16:20:48	<--	bens (~bens@www.typius.net) has quit (Quit: leaving)
2013-04-02 16:21:02	--	numeral_ is now known as numeral
2013-04-02 16:21:03	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 276 seconds)
2013-04-02 16:21:10	merijn	mauke: Why not? I don't expect it's the C compiler that's deleting .c files from tmp...
2013-04-02 16:21:15	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-04-02 16:21:35	mauke	you can just tell it to use a script that copies its input files somewhere safe
2013-04-02 16:21:38	<--	tabolario (~tabolario@23-24-115-229-static.hfc.comcastbusiness.net) has left #haskell
2013-04-02 16:21:43	mauke	then maybe calls the real copmiler
2013-04-02 16:21:57	timthelion	merijn: well, what tmp folder is created by ghc or cygwin to hold the files. Are you sure they aren't in dist/
2013-04-02 16:22:54	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Ping timeout: 245 seconds)
2013-04-02 16:23:15	typoclass	merijn: so, you do cabal configure, and it exits with an error? afaict, cbits/HsUnix.c is included in the package, and include/HsUnix.h is created during cabal configure
2013-04-02 16:23:24	Vq	Since it's on Windows the Ctrl-Z approach isn't actually as far fetched as I first thought.
2013-04-02 16:23:38	Vq	You probably has a relatively large window to hit. :)
2013-04-02 16:23:49	merijn	typoclass: THe header exists, it's just claiming some typedefs aren't defined when they are used
2013-04-02 16:23:55	timthelion	Vq: s/has/have/
2013-04-02 16:24:04	merijn	I want to run gcc with -E to manually inspect what's going on
2013-04-02 16:24:13	merijn	Yay, debugging header file includes \o/
2013-04-02 16:24:23	Vq	timthelion: Realised that as I wrote it, thanks though.
2013-04-02 16:24:23	<--	hiratara (~hiratara@h221035.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 260 seconds)
2013-04-02 16:24:25	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-02 16:24:30	<--	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has quit (Remote host closed the connection)
2013-04-02 16:24:46	merijn	It's claiming some system stuff like __ino64_t and id_t are not defined in the system headers, even though they are and are included
2013-04-02 16:24:52	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-02 16:24:52	<--	edeast (~chatzilla@24.114.26.53) has quit (Ping timeout: 256 seconds)
2013-04-02 16:25:09	typoclass	merijn: oh i see. so you're doing "cabal configure --with-gcc=-E", and cabal deletes gcc's output file?
2013-04-02 16:25:58	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-02 16:26:03	merijn	No, because then autoconf crashes because gcc can't succesfully compile C files
2013-04-02 16:26:10	timthelion	Clearly this file deletion is a sign that we should all use imutable file systems!
2013-04-02 16:26:10	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-04-02 16:26:13	<--	scottj (~scott@206.212.250.58) has left #haskell
2013-04-02 16:26:21	merijn	I just want it to stop deleting shit after it fails to configure :(
2013-04-02 16:26:24	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-04-02 16:26:32	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 16:26:42	-->	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has joined #haskell
2013-04-02 16:26:43	timthelion	merijn: how do you know things are being deleted? is dist/ empty?
2013-04-02 16:26:49	-->	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has joined #haskell
2013-04-02 16:26:56	Vq	rm rm
2013-04-02 16:27:03	timthelion	Vq: :D
2013-04-02 16:27:22	timthelion	Vq: that should be # rm /bin/rm
2013-04-02 16:27:39	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-02 16:27:39	-->	timjb (~timjb@ppp-188-174-99-52.dynamic.mnet-online.de) has joined #haskell
2013-04-02 16:27:42	<--	QinGW2 (~yaaic@124.127.224.4) has quit (Ping timeout: 256 seconds)
2013-04-02 16:27:48	Vq	timthelion: I know :)
2013-04-02 16:28:02	<--	MroiZo (~oizo@94.191.187.193.mobile.3.dk) has quit (Quit: Leaving)
2013-04-02 16:28:04	Vq	timthelion: cabal probably uses the Haskell system API though.
2013-04-02 16:28:10	merijn	timthelion: dist doesn't contain anything beyond setup-config
2013-04-02 16:28:26	-->	sellout- (~Adium@70.96.9.235) has joined #haskell
2013-04-02 16:28:33	merijn	I know it's deleting shit because I see compile errors (I'm running configure with -v3) for files in tmp which aren't there when I look
2013-04-02 16:29:09	-->	hiratara (~hiratara@h223008.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-04-02 16:29:30	geekosaur	um
2013-04-02 16:29:38	-->	sgalante (~sgalante@181.166.154.229) has joined #haskell
2013-04-02 16:29:40	geekosaur	configure creates a lot of temp files and removes them after
2013-04-02 16:29:42	<--	edtsech (~edtsech@194.213.198.34) has quit (Ping timeout: 256 seconds)
2013-04-02 16:29:55	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-04-02 16:30:00	geekosaur	config.log often contains the text of a failing configure test program
2013-04-02 16:30:08	timthelion	merijn: and what does the same command with -v=3 give you?
2013-04-02 16:30:26	geekosaur	(that'a ssuming it's configure based but that would not surprise me)
2013-04-02 16:30:54	timthelion	merijn: oops, sorry. I didn't read your message about using -v3 because I was reading cabal help configure
2013-04-02 16:30:55	typoclass	merijn: i don't know. check config.log. about 3-4 files (e.g. confdefs.h) are present when i hit ctrl-z during the million "checking ..." lines. they are absent when i let cabal finish
2013-04-02 16:31:10	geekosaur	see what I just said
2013-04-02 16:31:15	geekosaur	confdefs.h is created by configure scripts
2013-04-02 16:31:22	geekosaur	autoconf configure, not cabal configure
2013-04-02 16:31:52	<--	qzr (~qzr@46-127-254-3.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-04-02 16:32:02	merijn	The configure errors *after* autoconf finishes
2013-04-02 16:32:13	-->	yacks (~yacks@180.151.36.170) has joined #haskell
2013-04-02 16:32:30	geekosaur	yet you are looking for files that were created by autoconf-style configure
2013-04-02 16:32:41	<--	dsadsdasd (~Adium@37.157.191.242) has quit (Quit: Leaving.)
2013-04-02 16:32:42	geekosaur	confdefs.h is not created, read, managed, or deleted by cabal
2013-04-02 16:33:03	merijn	Who mentioned confdefs.h?
2013-04-02 16:33:09	mauke	geekosaur
2013-04-02 16:33:11	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-04-02 16:33:12	typoclass	merijn: i did
2013-04-02 16:33:22	geekosaur	[02 10:30] <typoclass> merijn: i don't know. check config.log. about 3-4 files (e.g. confdefs.h) are present when i hit ctrl-z during the million "checking ..." lines. they are absent when i let cabal finish
2013-04-02 16:33:23	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-04-02 16:33:24	<--	ptek (~ptek@anon-175-93.vpn.ipredator.se) has quit (Ping timeout: 276 seconds)
2013-04-02 16:33:43	-->	birch__ (~bark@cpe-72-229-1-120.nyc.res.rr.com) has joined #haskell
2013-04-02 16:33:50	typoclass	merijn: anyway, it'd help if you could hpaste cabal's output and the contents config.log
2013-04-02 16:34:22	timthelion	typoclass: he's working on a top secret government project and can't.
2013-04-02 16:34:45	hpaste	test pasted “test” at http://hpaste.org/85042
2013-04-02 16:35:07	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-02 16:35:21	-->	ptek (~ptek@217.64.164.1) has joined #haskell
2013-04-02 16:35:49	hpaste	merijn pasted “cabal configure output” at http://hpaste.org/85043
2013-04-02 16:35:49	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-04-02 16:36:42	hpaste	merijn pasted “config.log” at http://hpaste.org/85044
2013-04-02 16:37:18	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-04-02 16:37:23	<--	grr (~grr@p5B232CBC.dip.t-dialin.net) has quit (Quit: Quit)
2013-04-02 16:37:24	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-04-02 16:37:56	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-02 16:38:00	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-04-02 16:38:38	--	irc: disconnected from server
2013-04-03 13:05:39	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-03 13:05:39	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-03 13:05:39	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-03 13:05:39	--	Nicks #haskell: [@ChanServ [[zz]] ]OLI[ __ghjk __main__ _anona _flow_ _janne _mr `0660 `bps `micro `nand` aajmakin ab9rf absence acfoltzer Adeon adimit Adios adnap aesptux AfC aforemny agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amathew amatsu amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku Apes araujo arbn arcatan arenz argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augustl Aune averell Axman6 aztek b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bentham bergey` betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe blz37 BMeph_ bobry bogner Boney Boreeas bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin_ brixen bstrie bxc_ byorgey ByronJohnson bytbox c_wraith Cale caleb_9 caligula_ Canar canta canvon carlocci_ ccasin ccxCZ cdh473 ceii celery__ Cerise certainty chance charlesofarrell charliesome chatsiri_ chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods colah_ comak companion_cube confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cromain cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavidsedice Deewiant def-_ def-lkb dennda dented42 Derander descender DEVID dfletcher DigitalKiwi dilinger_ dixie djahandarie djcoin dju dkasak dlundy dmarker dmwit dockside1 Dodek dogmaT dolio DolphR domingo doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsadsdasd dsantiago dschoepe DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dyreshark dysinger eacameron1 EarlGray earthy edenc edon edsko edtsech edwtjo Eelis eff efy ehamberg Eiam eikke ejls eL_Bart0 electrog1ek elgot Eliel elliott elliottcable em end3rW endojelly Enigmagic ent- Eotane ericmj Eridius ernst erpe Erstarrung Estrellas etabot ethercro1 ethercrow etrepum eviltwin_ Excureo eyck f8 fabjan faen fairfieldt fayden fcr_ felipe_ fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux folone formalcow fotc freiksenet frio fro0t frontendloader froztbyte fry fryguybob ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly gmaggior Gothmog_ Gracenotes greymalkin gseitz_ gspr guerrill1 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hamid hamishmack hanDerPeder harrison heathjs Heffalump helgikrs henk heruur hiptobecubic hiratara hiredman hiroyuki2 hive-mind hkBst homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar idntfy ido idoru Igloo igstan ikeg imphasing implr inr_ int-e integral_ Internet13 ion ique isenmann ISF isomorphic itemad Itkovian iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt jang JaRoel jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro jdoliner Jello_Raptor jercos jesyspa jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrockway jrslepak js6i jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k00mi k0ral kaictl kakos kalven KaneTW kaol kaoskorobase kazimir42 Ke kennyd kennyp ketil Khisanth killy9999 kini Kinnison KitB_ kith kkris kloeri klugez kmels_ kmels__ kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek kushal kvey kyle__ lahwran lambdabot Laney latro`a lattenwald lazard LeaChim lennart__ LeNsTR leoncamel1 leroux Lethalman Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luite Luke lulf lunarjar lusory lzm m3ga Maarten_ machisuji_ magicman mahogny majoh maksbotan malorie_ mami mapf mapreduce marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn message144 MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjr841 MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom monsieurlu moonlite_ mornfall morolin mortberg mrd MrFenix mrko MroiZo mrshoe mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` ndonaldson neena netj neurocyte newsham nh2 Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 nilsi Nimatek nimred ninegrid ninzine Nisstyre Nisstyre-laptop niteria nlogax no-n noam nobdraisentone noj noplamodo notdan noteventime NougatRillettes Nshag numeral nuncanada nus-- nwf oax obcode ocharles odi ofan opqdonut Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney paintcan Paks Pantoufle ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pdxleif_away peddie peltchu pepijndevos perlite perspectival petanqk peterhil pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1972 pigoz pikhq piotr_ plhk pnielsen popz pqmodn pr pranavrc predator117 preflex prh prinnysocks PrO_OkI_ profmakx prophile ps-auxw ptek Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ qrlr quaestor quchen quicksilver quuxman qwandor qwr qz r126l raek RageOfThou raichoo raid rainmaker Ralith ramses_ RayNbow`TU Raynes Raynos Razz realnot reckler redjohn reggie1 reiddrap- Rembane RenJuan rexamophone rfw RichyB Rickasaurus rio Riussi rmunroe robawt robbe- robbert rofer rs0 rs234 rsimoes ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sanemat saurik sawgij scgilardi schlumpi sclv Scott_firebeta seanmcl seats Sebastien-L SegFaultAX sellout- seq99` setmeaway2 sgalante Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 silver simon___ simpson sipa sirchurchill sjl skchrko ski_ skp skyflash_ SLi sm smarter snoyberg so Soft sohum solarus solirc sopvop sordina3 SoupE spacebark spion spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire statusfailed steez_ stelleg_away stepcut stephe strax_ stvc suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sysopfb t7 tahu takumn tamiko tanakh tanakh_ Taneb Tarential taruti tavelram tazjin td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas The_third_man theDon theorbtwo TheRedMood thetallguy thetallguy1 thirsteh_ ThomasLocke thorkilnaur_ thorsten` thoughtpolice threedaymonk tippenein tjgillies tkd tmiw TML tntc tobiassjosten tom4939 tomaw tomboy64 tomejaguar tomh__ tomku tomprince tootooroo ToRA Tordek trevize_ trh178 tridactyla tromp_ ts33kr tsou tswett ttuegel tufflax tunixman tuv tvaalen Twey typoclass ulfdoz Ulrar Urchin urm3l_ UziMonkey__ v v0|d Valodim Varakh vehk verrens Vert Vertue vhz_ vickaita vikraman vili vmesoff vobi Volstvok Vorpal voyd Vq vraid VZakharov_ wagle walter Walther warpy Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wilfredh williamhc Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii_ xenon xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xpika xplat xrl__ xrq xymox yacks yam yan_ yano yc4891 yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike zebr Zeev Zeev_ zeiris zenzike zhulikas ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ Zzompp]
2013-04-03 13:05:39	--	Channel #haskell: 1010 nicks (1 op, 0 halfops, 0 voices, 1009 normals)
2013-04-03 13:05:39	--	URL for #haskell: http://www.haskell.org/
2013-04-03 13:05:41	--	Mode #haskell [+CLcnpt]
2013-04-03 13:05:41	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-03 13:05:42	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-04-03 13:06:02	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-04-03 13:06:46	-->	hdoshi (~hdoshi@c-67-180-211-122.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 13:06:54	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-04-03 13:07:18	<--	Zeev (~Zeev@bzq-79-181-15-10.red.bezeqint.net) has quit (Ping timeout: 248 seconds)
2013-04-03 13:07:18	-->	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has joined #haskell
2013-04-03 13:07:20	DarkFox	How do you tell ghc to compile using multiple threads?
2013-04-03 13:07:22	DarkFox	cores *
2013-04-03 13:07:36	DarkFox	70-90% of core 1/8
2013-04-03 13:08:14	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-04-03 13:08:41	danr	ghc -threaded
2013-04-03 13:08:46	danr	oh
2013-04-03 13:08:52	Kinnison	http://hackage.haskell.org/trac/ghc/ticket/910
2013-04-03 13:09:03	-->	maltin (~maltin@pisces.uberspace.de) has joined #haskell
2013-04-03 13:09:16	<--	jix (~jix@jixco.de) has quit (Remote host closed the connection)
2013-04-03 13:09:35	DarkFox	What about with cabal?
2013-04-03 13:09:39	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Remote host closed the connection)
2013-04-03 13:09:47	DarkFox	I.e cabal install packageX -?
2013-04-03 13:09:49	Kinnison	cabal -j just does multiple package builds in parallel
2013-04-03 13:09:52	-->	jix (~jix@jixco.de) has joined #haskell
2013-04-03 13:09:56	<--	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-04-03 13:09:57	Kinnison	doesn't help when building a single large package
2013-04-03 13:10:09	<--	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has quit (Read error: Connection timed out)
2013-04-03 13:10:21	Kinnison	if you have one package which has maybe 30 or more modules in it, it can't take advantage of multi-core systems
2013-04-03 13:10:26	<--	v (~v@static.216.226.4.46.clients.your-server.de) has quit (Ping timeout: 245 seconds)
2013-04-03 13:10:27	DarkFox	But many dependancies?
2013-04-03 13:10:39	-->	[mth] (~mth@110.151.55.176) has joined #haskell
2013-04-03 13:10:50	<--	joaopizani (~joaopizan@224pc204.sshunet.nl) has quit (Ping timeout: 252 seconds)
2013-04-03 13:11:15	DarkFox	cabal install -j4 hakyll # Am I running that right?
2013-04-03 13:11:24	DarkFox	To use 4 cores instead of the 1.
2013-04-03 13:11:44	<--	hdoshi (~hdoshi@c-67-180-211-122.hsd1.ca.comcast.net) has quit (Ping timeout: 255 seconds)
2013-04-03 13:11:47	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-04-03 13:11:59	Kinnison	If you want to build in parallel internally, you'd need to write a makefile and not use ghc --make
2013-04-03 13:12:08	-->	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has joined #haskell
2013-04-03 13:12:15	<--	dsadsdasd (~Adium@37.157.191.242) has quit (Quit: Leaving.)
2013-04-03 13:12:22	DarkFox	What does it default to if you just do -j?
2013-04-03 13:12:24	-->	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has joined #haskell
2013-04-03 13:12:25	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-04-03 13:13:30	Kinnison	You can do ghc -M -dep-makefile .depend $(SRCS)
2013-04-03 13:13:49	DarkFox	O.o
2013-04-03 13:13:53	Kinnison	to make a .depend file with the dependency info you would need in order to do an individual ghc invocation per module
2013-04-03 13:13:59	<--	vickaita (~vickaita@pool-173-59-33-130.phlapa.fios.verizon.net) has quit (Ping timeout: 255 seconds)
2013-04-03 13:14:00	Kinnison	But it's very messy
2013-04-03 13:14:28	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-04-03 13:14:35	<--	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has quit (Ping timeout: 260 seconds)
2013-04-03 13:14:39	DarkFox	So. -j doesn't use multiple cores, just compiles multiple things concurrently?
2013-04-03 13:15:58	<--	DEVID (~QALBI2QAL@ip-83-101-79-211.customer.schedom-europe.net) has quit
2013-04-03 13:17:24	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-03 13:18:20	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-04-03 13:19:06	<--	monsieurlu (~monsieurl@163.5.151.104) has quit (Ping timeout: 252 seconds)
2013-04-03 13:20:38	-->	brisbin (~patrick@220.231.27.150) has joined #haskell
2013-04-03 13:20:41	byorgey	DarkFox: it does use multiple cores.
2013-04-03 13:20:55	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-04-03 13:21:17	mm_freak	do you say "suspensible" or "suspendable"?
2013-04-03 13:21:45	hiptobecubic	the latter
2013-04-03 13:21:55	brisbin	quit
2013-04-03 13:22:10	<--	brisbin (~patrick@220.231.27.150) has quit (Client Quit)
2013-04-03 13:22:34	DarkFox	byorgey: I see one core getting the flogging and the rest idle
2013-04-03 13:22:43	mm_freak	thanks
2013-04-03 13:22:53	-->	dsadsdasd (~Adium@37.157.191.242) has joined #haskell
2013-04-03 13:24:25	arkeet	DarkFox: cabal install -j just installs multiple packages in parallel.
2013-04-03 13:24:54	-->	killy9999 (~killy@terminal-1-163.retsat1.com.pl) has joined #haskell
2013-04-03 13:24:56	DarkFox	Yea
2013-04-03 13:25:19	DarkFox	How many at once with -j?
2013-04-03 13:25:31	DarkFox	(default N in -jN
2013-04-03 13:25:33	DarkFox	)
2013-04-03 13:26:18	arkeet	uh
2013-04-03 13:26:23	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-03 13:26:29	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (Quit: -)
2013-04-03 13:26:48	<--	xpika (~jrg@101.172.88.28) has quit (Ping timeout: 252 seconds)
2013-04-03 13:26:51	arkeet	I think it's "as many as it can." I might be confusing it with something else though
2013-04-03 13:27:04	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Ping timeout: 258 seconds)
2013-04-03 13:27:26	DarkFox	Okay :)
2013-04-03 13:27:55	-->	v (~v@61.173.91.86) has joined #haskell
2013-04-03 13:29:01	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-04-03 13:30:31	-->	skyflash (~skyflash@96.53.63.54) has joined #haskell
2013-04-03 13:32:06	-->	monsieurlu (~monsieurl@163.5.191.62) has joined #haskell
2013-04-03 13:32:13	<--	stvc (~smuxi@ame-bb-dsl-505.dsl.airstreamcomm.net) has quit (Ping timeout: 245 seconds)
2013-04-03 13:32:20	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-04-03 13:33:10	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Remote host closed the connection)
2013-04-03 13:33:24	hpaste	Nilsi pasted “Intersection” at http://hpaste.org/85084
2013-04-03 13:33:38	nilsi	What wrong with that one?
2013-04-03 13:33:45	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-04-03 13:33:57	nilsi	Some type problem but can't tell exactly
2013-04-03 13:34:07	nilsi	Couldn't match type `(->) [a0]' with `[]'
2013-04-03 13:34:23	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-04-03 13:34:49	-->	fall_ (fall@betty.countzero.no) has joined #haskell
2013-04-03 13:34:51	-->	vickaita (~vickaita@pool-173-59-33-130.phlapa.fios.verizon.net) has joined #haskell
2013-04-03 13:35:03	<--	skyflash (~skyflash@96.53.63.54) has quit (Ping timeout: 276 seconds)
2013-04-03 13:35:35	ski_	nilsi : sounds like missing or unexpected extra function argument
2013-04-03 13:35:48	 *	ski_ looks at paste
2013-04-03 13:35:48	-->	tacey (~tacey@220.231.27.150) has joined #haskell
2013-04-03 13:36:19	byorgey	nilsi: intersection' takes three arguments, but in the first two cases you are calling it with only two
2013-04-03 13:36:54	<--	tacey (~tacey@220.231.27.150) has quit (Client Quit)
2013-04-03 13:36:57	byorgey	also, note that  intersection' as bs a:result  parses as  (intersection' as bs a) : result.  I assume you instead want  intersection' as bs (a:result) .
2013-04-03 13:36:58	ski_	nilsi : in addition to what byorgey said, you probably intended brackets around the `a:result' in the "equals" case
2013-04-03 13:37:01	--	pepijndevos is now known as pepijn_away
2013-04-03 13:37:26	<--	duosrx (~duosrx@2a01:e35:8b02:46d0:754e:9ebc:2b97:4010) has quit (Remote host closed the connection)
2013-04-03 13:37:31	ski_	note that
2013-04-03 13:37:33	ski_	  intersection' as bs a:result
2013-04-03 13:37:43	ski_	will be parsed as if you had written
2013-04-03 13:37:48	ski_	  (intersection' as bs a):result
2013-04-03 13:37:50	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 255 seconds)
2013-04-03 13:37:59	ski_	which is presumably not what you intended
2013-04-03 13:38:24	<--	Zeev_ (~Zeev@109.64.27.215) has quit (Ping timeout: 260 seconds)
2013-04-03 13:38:26	-->	tacey (~tacey@220.231.27.150) has joined #haskell
2013-04-03 13:38:57	nilsi	byorgey, ski_: ahh, im blind. Thank's guy's not used to the syntax yet
2013-04-03 13:39:40	ski_	nilsi : finally, (a) you might want to use `case compare a b of LT -> ...; GT -> ...; EQ -> ...' instead of the three guards; and (b) consider returning the list of resulting elements directly, instead of using an accumulator argument
2013-04-03 13:39:54	-->	jrajav (~jrajav@71-82-124-223.dhcp.roch.mn.charter.com) has joined #haskell
2013-04-03 13:40:45	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-04-03 13:40:58	ski_	(doing (b) will make your code incremental instead of bulkly : to compute a single element of the resulting list will no longer require a full traversal of the input lists until you hit the empty list for one of them)
2013-04-03 13:41:02	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-04-03 13:41:06	-->	inarenvi (~quassel@90.173.214.149) has joined #haskell
2013-04-03 13:41:11	ski_	(s/bulkly/bulky/)
2013-04-03 13:41:32	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-04-03 13:41:32	nilsi	ski_: Okey, sound definitely better. thanks
2013-04-03 13:42:13	ski_	nilsi : .. also, if you plan on staying, #haskell.se might perhaps also be interesting
2013-04-03 13:42:57	-->	nexx (~SPS-User@dslb-178-003-227-027.pools.arcor-ip.net) has joined #haskell
2013-04-03 13:44:37	FireFly	No-one's said anything in there in quite a while though..
2013-04-03 13:45:41	-->	saysjonathan (~jonathan@cpe-69-204-253-25.nyc.res.rr.com) has joined #haskell
2013-04-03 13:45:47	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-04-03 13:48:31	-->	sebastian_ (~quassel@port-212-202-152-190.static.qsc.de) has joined #haskell
2013-04-03 13:49:11	<--	saysjonathan (~jonathan@cpe-69-204-253-25.nyc.res.rr.com) has quit (Client Quit)
2013-04-03 13:49:37	<--	urm3l_ (~urm3l@HSI-KBW-078-043-223-061.hsi4.kabel-badenwuerttemberg.de) has quit (Read error: Connection reset by peer)
2013-04-03 13:49:47	-->	saysjonathan (~jonathan@cpe-69-204-253-25.nyc.res.rr.com) has joined #haskell
2013-04-03 13:50:01	-->	Thra11 (~thrall@248.64.125.91.dyn.plus.net) has joined #haskell
2013-04-03 13:50:25	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-04-03 13:51:16	<--	vickaita (~vickaita@pool-173-59-33-130.phlapa.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-04-03 13:52:40	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-04-03 13:52:49	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-04-03 13:53:43	-->	madjestic (~madjestic@178.230.125.223) has joined #haskell
2013-04-03 13:54:03	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-04-03 13:54:15	<--	tacey (~tacey@220.231.27.150) has quit (Quit: leaving)
2013-04-03 13:54:16	-->	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has joined #haskell
2013-04-03 13:54:37	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Remote host closed the connection)
2013-04-03 13:54:40	<--	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has quit (Ping timeout: 258 seconds)
2013-04-03 13:55:02	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-03 13:55:32	-->	Zariel (~zariel@li37-84.members.linode.com) has joined #haskell
2013-04-03 13:58:06	-->	eldariof (~CLD@215-134-158-212.static.bluetone.cz) has joined #haskell
2013-04-03 13:59:53	-->	schovi_ (~schovi@194.213.198.34) has joined #haskell
2013-04-03 13:59:53	<--	schovi (~schovi@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-04-03 14:00:33	alexander__b	findKey :: (Eq k) => k -> [(k,v)] -> Maybe v
2013-04-03 14:00:35	alexander__b	findKey key = foldr (\(k,v) acc -> if k == key then Just v else acc) Nothing
2013-04-03 14:01:02	_mr	alexander__b: (you might want to check out "lookup")
2013-04-03 14:01:16	alexander__b	I'm having trouble seeing why the tuple sent as argument becomes the argument to the lambda (in addition to the acc)
2013-04-03 14:01:23	alexander__b	_mr: I know of lookup.
2013-04-03 14:01:35	<--	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has quit (Quit: Leaving.)
2013-04-03 14:01:40	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-03 14:03:00	_mr	The type of foldr is (a -> b -> b) -> b -> [a] -> b
2013-04-03 14:03:01	-->	Duffers (~Duffers@host86-146-27-119.range86-146.btcentralplus.com) has joined #haskell
2013-04-03 14:03:18	_mr	you start out with acc being Nothing
2013-04-03 14:03:44	-->	trescenzi (~trescenzi@2620:91:0:163:9c84:3fcd:7b72:cbf6) has joined #haskell
2013-04-03 14:04:02	alexander__b	yes. I am aware of this. the thing I'm not seeing is how (k,v) gets sent to the lambda function.
2013-04-03 14:04:19	<--	otend (~otend@c-69-242-188-14.hsd1.mo.comcast.net) has quit (Remote host closed the connection)
2013-04-03 14:04:36	_mr	(k,v) is an element of the list, which you go through
2013-04-03 14:04:48	alexander__b	the lambda functions takes (k,v) and acc. how does the (k,v) from the function type signature "get into" the lambda function?
2013-04-03 14:05:06	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-04-03 14:05:13	alexander__b	how am I supposed to be reading this for it to become obvious that the (k,v) in the type definition is the (k,v) in the lambda parameter list?
2013-04-03 14:05:19	_mr	Oh, is it the name that is confusing you?
2013-04-03 14:05:25	arkeet	foldr :: ((k,v) -> Maybe v -> Maybe v) -> Maybe v -> [(k,v)] -> Maybe v
2013-04-03 14:05:55	_mr	You could just have written (\(key', value) -> if key' == key Maybe value...
2013-04-03 14:05:56	alexander__b	_mr: no. it is where the (k,v) parameter in the lambda function comes from.
2013-04-03 14:06:15	arkeet	:t foldr :: ((k,v) -> Maybe v -> Maybe v) -> Maybe v -> [(k,v)] -> Maybe v
2013-04-03 14:06:16	<--	schovi_ (~schovi@194.213.198.34) has quit (Ping timeout: 245 seconds)
2013-04-03 14:06:17	lambdabot	((k, v) -> Maybe v -> Maybe v) -> Maybe v -> [(k, v)] -> Maybe v
2013-04-03 14:06:20	alexander__b	_mr: i.e. where am I telling the lambda function what to use for (k,v)
2013-04-03 14:06:33	arkeet	the value?
2013-04-03 14:06:33	_mr	alexander__b: it's just what foldr does. it expects a function of that type.
2013-04-03 14:06:45	<--	jrajav (~jrajav@71-82-124-223.dhcp.roch.mn.charter.com) has quit (Quit: I tend to be neutral about apples)
2013-04-03 14:06:56	<--	paintcan (~user@108.162.180.237) has quit (Ping timeout: 258 seconds)
2013-04-03 14:07:24	-->	hdoshi (~hdoshi@c-67-180-211-122.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 14:07:40	-->	timthelion (~timothy@94.213.broadband4.iol.cz) has joined #haskell
2013-04-03 14:08:41	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-04-03 14:09:09	alexander__b	_mr: I get what foldr does. what I'm asking is how I'm supposed to read this to understand how the lambda function "knows" what (k,v) is. it is not obvious where this argument comes from. Nothing is given as an argument at the far right, like I would expect. where is (k,v) given?
2013-04-03 14:09:27	timthelion	Is there a library for saving a tree-like structure of (FileName,String) pairs to a directory structure? So I could build the output of my program(a website generator) without IO?
2013-04-03 14:09:36	arkeet	alexander__b: foldr is responsible for that.
2013-04-03 14:09:43	 *	timthelion can obviously code this himself.
2013-04-03 14:09:47	arkeet	@src foldr
2013-04-03 14:09:47	lambdabot	foldr f z []     = z
2013-04-03 14:09:47	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2013-04-03 14:09:54	dmwit	alexander__b: foldr supplies the value of (k,v) by looking at the list
2013-04-03 14:09:55	_mr	alexander__b: do you know about partially applied functions?
2013-04-03 14:10:03	arkeet	or higher order functions.
2013-04-03 14:10:07	dmwit	alexander__b: foldr is the one that calls the lambda you passed in
2013-04-03 14:10:13	alexander__b	_mr: somewhat. I assume that's the magic that's confusing me.
2013-04-03 14:10:29	arkeet	you give foldr the lambda.
2013-04-03 14:10:30	alexander__b	dmwit: yes, I get that foldr calls the lambda.
2013-04-03 14:10:33	arkeet	and then foldr does stuff with it.
2013-04-03 14:10:37	alexander__b	yes.
2013-04-03 14:10:38	_mr	alexander__b: it is the same way as (+1) is a function that takes a number and adds +1 to it
2013-04-03 14:10:43	dmwit	Oh. Can you say again what you don't get, then?
2013-04-03 14:10:50	arkeet	I don't see what this has to do with partially applied functions.
2013-04-03 14:10:51	alexander__b	dmwit: I am asking how the lambda knows about the list, not how foldr knows about the lambda.
2013-04-03 14:11:02	dmwit	alexander__b: The lambda doesn't know about the list.
2013-04-03 14:11:06	dmwit	alexander__b: foldr knows about the list.
2013-04-03 14:11:12	dmwit	alexander__b: But foldr calls the lambda. =)
2013-04-03 14:11:12	alexander__b	dmwit: OK. why?
2013-04-03 14:11:17	arkeet	because you gave it the list.
2013-04-03 14:11:18	alexander__b	dmwit: why does foldr know about the list?
2013-04-03 14:11:23	alexander__b	where?
2013-04-03 14:11:26	arkeet	when you called it.
2013-04-03 14:11:28	dmwit	alexander__b: Because you hand it a list as its last argument.
2013-04-03 14:11:49	dmwit	alexander__b: That is, when you call findKey, you hand findKey a list; findKey hands this list to foldr.
2013-04-03 14:11:51	arkeet	findKey key xs = foldr (\(k,v) acc -> if k == key then Just v else acc) Nothing xs
2013-04-03 14:12:06	<--	hdoshi (~hdoshi@c-67-180-211-122.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-03 14:12:06	alexander__b	arkeet: it doesn't say key xs
2013-04-03 14:12:09	alexander__b	findKey key = foldr (\(k,v) acc -> if k == key then Just v else acc) Nothing
2013-04-03 14:12:18	dmwit	Yep, sneaky, isn't it?
2013-04-03 14:12:30	dmwit	Nevertheless, findKey has a function type, and its type demands an extra list.
2013-04-03 14:12:32	arkeet	sure, instead of writing f x = g x, they just write f = g.
2013-04-03 14:12:32	dmwit	So does foldr's.
2013-04-03 14:12:32	alexander__b	well, this is likely the root of my confusion.
2013-04-03 14:12:56	arkeet	oh, so that's why we're talking about partial application.
2013-04-03 14:13:04	_mr	:-)
2013-04-03 14:13:08	arkeet	let me abbreviate (\(k,v) acc -> if k == key then Just v else acc) as f
2013-04-03 14:13:14	alexander__b	right.
2013-04-03 14:13:19	arkeet	findKey key = foldr f Nothing
2013-04-03 14:13:20	alexander__b	so it could just as well have been,
2013-04-03 14:13:22	alexander__b	findKey key xs = foldr (\(k,v) acc -> if k == key then Just v else acc) Nothing xs
2013-04-03 14:13:27	arkeet	sure.
2013-04-03 14:13:32	arkeet	but when we write   findKey key = foldr f Nothing
2013-04-03 14:13:35	alexander__b	because then I remember/get it. thanks.
2013-04-03 14:13:38	arkeet	what that really means is
2013-04-03 14:13:42	arkeet	findKey key = \x -> foldr f Nothing x
2013-04-03 14:13:55	-->	jang (~jang@cpc9-hawk12-2-0-cust285.aztw.cable.virginmedia.com) has joined #haskell
2013-04-03 14:13:56	mm_freak	is there a nice applicative configuration file library?
2013-04-03 14:14:07	arkeet	that's how behaviour of partially applied functions is defined.
2013-04-03 14:14:20	arkeet	mm_freak: let me know if you find one!
2013-04-03 14:14:24	--	irc: disconnected from server
2013-04-03 15:17:04	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-03 15:17:04	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-03 15:17:04	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-03 15:17:05	--	Nicks #haskell: [@ChanServ [[zz]] ]OLI[ __ghjk _anona _flow_ _janne _mr `0660 `bps `micro `nand` aajmakin ab9rf absence acfoltzer aCube Adeon adimit Adios adnap aesptux AfC aforemny AgentM agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amathew amatsu amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku Apes araujo arbn arcatan arenz argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur augustl Aune averell Axman6 azmenthe aztek b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bentham bergey` betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe blz37 BMeph_ bobry bogner Boney Boreeas bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson bytbox c_wraith Cale caleb_9 caligula_ Canar canta canvon carlocci_ ccasin ccxCZ cdh473 celery__ Cerise certainty chance charlesofarrell charliesome chatsiri_ chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cods colah_ comak companion_cube confound connelly coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cromain cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp d1sp dabradley dan_johnsin danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavidsedice Deewiant def-_ def-lkb dennda dented42 dEPY Derander descender dfletcher DigitalKiwi dilinger_ dixie djahandarie djcoin dju dkasak dlundy dmarker dmwit dockside1 Dodek dogmaT dolio DolphR domingo donri doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsadsdasd dsantiago dschoepe DT` Dtgr duairc_ Duffers dumbhat duosrx DustyDingo Dybber dyreshark dysinger eacameron1 EarlGray earthy edenc edon edsko edtsech_ edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 eldariof electrog1ek elgot Eliel elliott elliottcable em endojelly Enigmagic ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot etehtsea ethercro1 ethercrow etrepum eviltwin_ Excureo eyck f8 fabjan faen fairfieldt fall_ fayden fcr_ felipe_ feliperosa fergusnoble fgomez finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux folone formalcow fotc freiksenet frio fro0t frontendloader froztbyte fry fryguybob ft Fubar^ Fuco Fuuzetsu fxr fxrh gbarboza gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gentleben gereedy gg7 ghorn Ghoul__ gienah Gilly gmaggior Gothmog_ Gracenotes greymalkin gseitz_ gspr guerrill1 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamid hamishmack hanDerPeder harrison heath Heffalump helgikrs henk hiptobecubic hiratara hiredman hiroyuki2 hive-mind hiyakashi hkBst homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar idntfy ido idoru Igloo igstan ikeg imphasing implr inarenvi_ inr_ int-e integral_ Internet13 ion ique isenmann ISF isomorphic itemad Itkovian iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt JaRoel jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro jdoliner Jeanne-Kamikaze Jello_Raptor jercos Jesin jesyspa jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrockway jrslepak js6i jssanders jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k0001 k00mi k0ral kaictl kaikokaur kakos kallisti kalven KaneTW kaol kaoskorobase kartoffelbrei kazimir42 Ke kennyd kennyp ketil Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmels_ kmels__ kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kushal kvey kyle__ lahwran lambdabot Laney latro`a lattenwald lazard LeaChim lemao lennart__ LeNsTR leoncamel2 leroux Lethalman Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luisgabriel luite Luke lulf lunarjar lusory lzm m3ga Maarten_ machisuji_ magicman mahogny majoh maksbotan malorie_ maltin mami mapf mapreduce marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn merijn_ message144 MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli milStaja mimi_vx mimico mirsal mixi mjr841 MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom monqy moonlite_ morazow mornfall morolin mortberg mrd MrFenix mrko MroiZo mrshoe mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` ndonaldson neena netj neurocyte newsham nexx nh2 Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 nilsi Nimatek nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam nobdraisentone noj nomeata noplamodo notdan noteventime NougatRillettes Nshag numeral nuncanada nus-- nwf oax obcode ocharles odi ofan OlegYch opqdonut Ornedan ortmage osfameron othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney Paks pamojarpan Pantoufle ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e pcapriotti pcl pdxleif_away peddie peltchu pepijndevos perlite perspectival petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1972 pigoz pikhq piotr_ plhk pnielsen popz pqmodn pr pranavrc predator117 preflex prh prinnysocks PrO_OkI_ profmakx prophile ps-auxw ptek Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ qrlr quaestor quchen quicksilver quuxman qwandor qwr qz r126l raek RageOfThou raichoo raid rainmaker Ralith ramses_ RayNbow`TU Raynes Raynos Razz realnot redjohn reggie1 reiddrap- Rembane RenJuan rexamophone rfw Rickasaurus rio Riussi rmunroe robawt robbe- robbert rofer roshan RoXtein rs0 rs234 rsimoes ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith saml sanemat saurik sawgij saysjonathan scgilardi schlumpi schovi sclv Scott_firebeta seanmcl seats sebastian_ Sebastien-L SegFaultAX sellout- sepp2k seq99` setmeaway2 sgalante Sgeo sgronblo_ sh shachaf shanse Shapeshifter shepheb shergill Shin-LaC shintah SHODAN shurikas shutdown_-h_now si14 silver simon___ simpson sipa sirchurchill sjl skchrko ski_ skp skyflash_ SLi sm smarter snoyberg so Soft sohum solarus solirc sonda Sonderblade sopvop sordina3 SoupE spacebark spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire statusfailed steez_ stelleg_away stepcut stephe strax_ suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sysopfb t7 tahu tamiko tanakh tanakh_ Taneb Tarential taruti tavelram tazjin td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche The_third_man theDon theorbtwo TheRedMood thetallguy thetallguy1 thirsteh_ ThomasLocke Thomyho4 thorkilnaur_ thorsten` thoughtpolice Thra11 threedaymonk threesome timthelion tippenein tjgillies tkd tmiw TML tntc tobiassjosten tom4939 tomaw tomboy64 tomejaguar tomh__ tomku tomprince tootooroo ToRA Tordek trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tufflax tunixman tuv tvaalen Twey typoclass tzxn3 ulfdoz Ulrar Urchin UziMonkey__ v v0|d Valodim vehk verrens Vert Vertue vhz_ vickaita vikraman vili vmesoff vobi Volstvok Vorpal voyd Vq vraid VZakharov_ wagle walter Walther warpy Watcher7|off waterlaz wchun wei2912 weie wereHamster whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii_ xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl__ xrq xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr Zeev zeiris zenzike ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ Zzompp]
2013-04-03 15:17:05	--	Channel #haskell: 1033 nicks (1 op, 0 halfops, 0 voices, 1032 normals)
2013-04-03 15:17:05	--	URL for #haskell: http://www.haskell.org/
2013-04-03 15:17:06	--	Mode #haskell [+CLcnpt]
2013-04-03 15:17:06	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-03 15:17:06	typoclass	merijn: sure, it's fuzzy
2013-04-03 15:17:32	-->	heruur (~tvh@dslb-188-106-091-087.pools.arcor-ip.net) has joined #haskell
2013-04-03 15:17:48	-->	madjestic (~madjestic@178.230.125.223) has joined #haskell
2013-04-03 15:18:05	merijn	Windows sucks as a dev environment, but if I ever want any code I write to be run by my friends/family I need to somehow be able to build stuff on it...
2013-04-03 15:18:06	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-03 15:18:44	dmwit	That's not quite true. There's always the web-app ruote.
2013-04-03 15:18:45	dmwit	route.
2013-04-03 15:19:00	<--	aztek (~aztek@2a02:6b8:0:2309:e2f8:47ff:fe45:25ea) has quit (Read error: Connection timed out)
2013-04-03 15:19:00	merijn	Yeah...fuck that route
2013-04-03 15:19:06	<--	azmenthe (~patrick@205-178-36-43.c3-0.alc-ubr1.chi-alc.il.cable.rcn.com) has quit (Quit: azmenthe)
2013-04-03 15:19:35	<--	heruur (~tvh@dslb-188-106-091-087.pools.arcor-ip.net) has quit (Read error: Connection reset by peer)
2013-04-03 15:20:01	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-04-03 15:20:08	merijn	That only works for a limited set of programs, and it's not a set I'm interested in
2013-04-03 15:20:17	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Quit: Leaving...)
2013-04-03 15:20:39	-->	monsieurlu (~monsieurl@163.5.171.57) has joined #haskell
2013-04-03 15:21:12	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 15:21:12	<--	chatsiri_ (~chatsiri_@49.48.72.93) has quit (Ping timeout: 264 seconds)
2013-04-03 15:22:17	<--	madjestic (~madjestic@178.230.125.223) has quit (Ping timeout: 252 seconds)
2013-04-03 15:22:17	<--	OlegYch (~OlegYch@80.249.91.117) has quit (Ping timeout: 252 seconds)
2013-04-03 15:22:30	-->	chatsiri_ (~chatsiri_@kuwin-131-9.kuwin.ku.ac.th) has joined #haskell
2013-04-03 15:23:04	mauke	hahaha, oh wow. one of my packages has 147 reverse dependencies
2013-04-03 15:23:10	mauke	I'm popular!
2013-04-03 15:24:00	dmwit	One of your packages is one of my favorite packages. =)
2013-04-03 15:24:19	-->	trescenzi (~trescenzi@2620:91:0:163:6c7b:dcb8:ecf8:11b7) has joined #haskell
2013-04-03 15:24:55	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Read error: No route to host)
2013-04-03 15:25:32	<--	sanemat (~sanemat@p8563f2.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-04-03 15:25:49	-->	cfricke (~cfricke@bas5-toronto47-2925109837.dsl.bell.ca) has joined #haskell
2013-04-03 15:25:50	<--	Zzompp (~foo@h31-3-227-86.host.redstation.co.uk) has quit (Remote host closed the connection)
2013-04-03 15:26:40	-->	williamh_ (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-03 15:26:42	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-04-03 15:27:04	--	williamh_ is now known as Guest16119
2013-04-03 15:27:11	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-04-03 15:28:01	danr	mauke: which one? :)
2013-04-03 15:28:11	-->	madjestic (~madjestic@178.230.125.223) has joined #haskell
2013-04-03 15:28:15	-->	Zzompp (~foo@h31-3-227-86.host.redstation.co.uk) has joined #haskell
2013-04-03 15:28:27	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-03 15:28:38	nomeata	merijn: I have sucessfully ceated gtk apps on linux that run on windows, without ever running windows
2013-04-03 15:28:49	mauke	danr: data-default
2013-04-03 15:29:07	nomeata	merijn: http://www.joachim-breitner.de/archive/screen-message/screen-message-setup-0.18.exe is the windows version of http://packages.debian.org/sid/sm
2013-04-03 15:29:29	nomeata	Ah, I’m on #haskell, not on #debian....
2013-04-03 15:30:48	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 264 seconds)
2013-04-03 15:31:24	<--	Guest16119 (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 276 seconds)
2013-04-03 15:32:34	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-04-03 15:32:44	-->	walter|r (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-04-03 15:32:53	<--	nilg (~user@ALagny-551-1-81-112.w90-35.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-04-03 15:33:00	<--	charliesome (~textual@124-168-116-148.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-04-03 15:33:06	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-04-03 15:33:52	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 246 seconds)
2013-04-03 15:34:11	<--	edon (~user@albalug/edon) has quit (Ping timeout: 245 seconds)
2013-04-03 15:34:52	-->	jtalk (~quassel@94.181.46.210) has joined #haskell
2013-04-03 15:34:55	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-04-03 15:35:04	<--	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has quit (Read error: Operation timed out)
2013-04-03 15:35:21	-->	atriq (~nathan@host-92-30-189-164.as13285.net) has joined #haskell
2013-04-03 15:35:27	-->	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has joined #haskell
2013-04-03 15:35:58	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-03 15:36:20	<--	pcl (~pcl@cpe-68-174-132-160.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-03 15:36:42	-->	dayom (~dayom@rrcs-24-213-164-165.nyc.biz.rr.com) has joined #haskell
2013-04-03 15:37:13	<--	schovi (~schovi@194.213.198.34) has quit (Remote host closed the connection)
2013-04-03 15:37:46	-->	otend (~otend@2610:e0:a040:e097:9113:672a:ebe:be69) has joined #haskell
2013-04-03 15:38:08	-->	pmg420 (~pmg420@a95-93-16-92.cpe.netcabo.pt) has joined #haskell
2013-04-03 15:39:16	<--	v (~v@61.173.91.86) has quit (Ping timeout: 260 seconds)
2013-04-03 15:39:19	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 258 seconds)
2013-04-03 15:40:22	-->	iago (~iago@gwlmf.di.uminho.pt) has joined #haskell
2013-04-03 15:40:31	 *	hackagebot MusicBrainz-libdiscid 0.4.1.0 - Binding to libdiscid by MusicBrainz  http://hackage.haskell.org/package/MusicBrainz-libdiscid-0.4.1.0 (AndreTwupack)
2013-04-03 15:40:55	<--	Duffers (~Duffers@host86-146-27-119.range86-146.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2013-04-03 15:41:18	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-03 15:41:27	-->	v (~v@202.153.186.114) has joined #haskell
2013-04-03 15:41:50	<--	dsadsdasd (~Adium@37.157.191.242) has quit (Quit: Leaving.)
2013-04-03 15:42:01	<--	v (~v@202.153.186.114) has quit (Max SendQ exceeded)
2013-04-03 15:42:22	-->	dsadsdasd (~Adium@37.157.191.242) has joined #haskell
2013-04-03 15:42:34	<--	feliperosa (~felipe@2001:12f0:601:a921:5049:2eb2:52b9:841d) has quit (Quit: Leaving)
2013-04-03 15:42:52	--	irc: disconnected from server
2013-04-03 19:31:10	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-03 19:31:10	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-03 19:31:10	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-03 19:31:10	--	Nicks #haskell: [@ChanServ [[zz]] ]OLI[ ___ghjk __main__ _anona _d3f _flow_ _janne `0660 `^_^v `bps `micro `nand` ab9rf absence accidus acfoltzer aCube Adeon adimit Adios adnap aesptux AfC aforemny agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amatsu amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku Apes Apocalisp araujo arbn arcatan argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn atriq augur augustl Aune averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bentham bergey` betawaffle bezik bgamari bgamari_ bholst Bigcheese BigEndian birkenfeld bitonic blackmirroxx BlastHardcheese blithe blz37 BMeph_ BobFunk bobry bogner Boney Boreeas bos_ bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson bytbox c_wraith Cale caleb_9 caligula_ Canar canta canvon carlocci_ ccasin ccxCZ cdh473 celery__ Cerise certainty cfricke chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` clahey ClaudiusMaximus Clint clog cmccann cmears cmsd2 cmsmcq cods colah_ collin comak companion_cube conehead confound connelly coppro copumpkin cordawyn CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cromain cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dawe dcoutts deavid Deewiant def-_ def-lkb dennda dented42 dEPY Derander dfletcher dgpratt dgvncsz0f DigitalKiwi dilinger_ dixie djahandarie djcoin dju dkasak dlundy_ dmarker DMcGill dmwit dnolen Dodek dogmaT dolio DolphR domingo donri doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dyreshark dysinger eacameron1 EarlGray earthy edenc edon edsko edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 eldariof electrog1ek elgot Eliel elliott elliottcable em endojelly Enigmagic ent- ericmj Eridius erkin ernst erpe Erstarrung Esa|iPhone6 Estrellas etabot etehtsea ethercro1 ethercrow etrepum EvilPenguin eviltwin_ Excureo execc_13 ExternalReality eyck f8 fabjan fairfieldt fall_ fayden fcr_ felipe_ fergusnoble fgomez fihi09 finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux Fnar folone formalcow fotc Franciman freiksenet frio frontendloader froztbyte fry fryguybob ft Fubar^ Fuco FunkyDrummer Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gereedy gg7 ghorn Ghoul__ gienah gilbertw1 Gilly glguy Gothmog_ Gracenotes greymalkin gseitz_ gspr guampa guerrill1 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamishmack hanDerPeder harrison heath Heffalump helgikrs henk Hermit hiratara hiredman hiroyuki2 hive-mind hiyakashi homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack idnar idntfy ido idoru Igloo ijp imphasing implr inarenvi inr_ int-e integral_ Internet13 ion ique ironm isenmann isomorphic iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt jaroslaw jaspervdj Jaxan jayne jb55 jbauman jcp|u jdoliner Jello_Raptor jercos Jesin jesyspa jfischoff jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jmelesky jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte josh__ JoshuaA JPohlmann jrib jrockway jrslepak js6i jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k0001 k00mi k0ral kaictl kakos kalven KaneTW kaol kaoskorobase Ke kennyd kennyp kevinqcs Khisanth kini Kinnison KitB_ kith kiwnix kkris kloeri klugez kmels_ kmels__ kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kvey kyle__ l0p3n lahwran LAMMJohnson Laney latro`a lattenwald lazard LeaChim lemao lennart__ LeNsTR leoncamel2 leroux levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luisgabriel luite_ Luke lulf lunarjar lusory lzm m3ga machisuji_ magicman mahogny majoh maksbotan maltin mami mapf mapreduce marienz Martty MasseR mateu Mathnerd626 mattp__ mattrepl matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn merijn_ message144 MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjr841 MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom moonlite_ morazow mornfall morolin mortberg mrd MrFenix mrko mrshoe mrsolo mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` neena NemesisD netj neurocyte newsham nexx nh2 Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 nilsi Nimatek nimish nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nooodl noplamodo normanrichards notdan NougatRillettes Nshag numeral nuncanada nus-- nuttycom nwf oax obcode ocharles odites ofan Okasu OlegYch opqdonut Ornedan ortmage osfameron othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney paintcan Paks pamojarpan Pantoufle Paprikachu ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pdxleif_away peddie peltchu pepijndevos perlite petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ phyrex1an pib1972 pigoz pikhq piotr_ plhk pmade pnielsen popz pqmodn pr pranavrc predator117 preflex prh prinnysocks PrO_OkI_ profmakx prophile ps-auxw pskirko Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ q66 qrlr quaestor quicksilver quuxman qwandor qwr qz r126l raek raichoo raid rainmaker Ralith_ Rarrikins RayNbow Raynes Raynos Razz realnot redjohn reggie1 reiddrap- Reite Rembane RenJuan rexamophone rfw RichyB rio Riussi rmunroe robawt robbe- robbert roconnor rofer rs0 rs234 rsimoes ryanakca s00pcan S11001001 s4msung s_quark SaBer saep Sagi saiam Saizan sajith samedhi saml saurik sawgij saysjonathan scgilardi schlumpi sclv Scott_firebeta Sculptor seanmcl seats Sebastien-L SegFaultAX seliopou sellout- seq99` setmeaway2 Sgeo sgronblo_ sh shachaf shanse shepheb Shin-LaC shintah SHODAN shutdown_-h_now si14 silver_ simon___ simpson sipa sirchurchill sjl ski_ skp skyflash skyflash_ sleepynate SLi sm smarter snoyberg so Soft sohum solarus solirc sonda sordina3 SoupE spacebark spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire stat_vi statusfailed steez_ stelleg stepcut stephe strax_ suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sysopfb tahu tamiko tanakh tanakh_ Taneb Tarential taruti tavelram tazjin tcsavage td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche Tharugrim The_third_man theDon theorbtwo TheRedMood thetallguy thetallguy1 thirsteh_ Thomyho4 thorkilnaur_ thorsten` thoughtpolice Thra11 threedaymonk threesome timebomb timemage timthelion tippenein tjohnson tkd tmiw TML tntc tobiassjosten tobym tom4939 tomaw tomboy66 tomejaguar tomh__ tomku tommd tomprince tootooroo tootsie ToRA Tordek trescenzi trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tufflax tunixman tuv tvaalen Twey tyler_ tzxn3 u_ ujihisa ulfdoz Ulrar uniquenick Urchin UziMonkey__ v v0|d Valodim vehk verrens Vert Vertue vhz vickaita vikraman vili vmesoff vobi Volstvok Vorpal Vq vraid vramana VZakharov_ wagle walter|r Walther warpy Watcher7|off waterlaz wchun wei2912 weie wereHams1er whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii_ xenon21 xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl__ xrq xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr Zeev zeiris zenzike zhulikas ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ Zzompp]
2013-04-03 19:31:10	--	Channel #haskell: 1046 nicks (1 op, 0 halfops, 0 voices, 1045 normals)
2013-04-03 19:31:10	--	URL for #haskell: http://www.haskell.org/
2013-04-03 19:31:12	--	Mode #haskell [+CLcnpt]
2013-04-03 19:31:12	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-03 19:31:42	--	stelleg is now known as stelleg_away
2013-04-03 19:31:43	--	irc: disconnected from server
2013-04-03 19:32:05	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-03 19:32:05	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-03 19:32:05	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-03 19:32:05	--	Nicks #haskell: [@ChanServ [[zz]] ]OLI[ ___ghjk __main__ _anona _d3f _flow_ _janne `0660 `^_^v `bps `micro `nand` ab9rf absence accidus acfoltzer aCube Adeon adimit Adios adnap aesptux AfC aforemny agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amatsu amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku Apes Apocalisp araujo arbn arcatan argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn atriq augur augustl Aune averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bentham bergey` betawaffle bezik bgamari bgamari_ bholst Bigcheese BigEndian birkenfeld bitonic blackmirroxx BlastHardcheese blithe blz37 BMeph_ BobFunk bobry bogner Boney Boreeas bos_ bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie bxc_ byorgey ByronJohnson bytbox c_wraith Cale caleb_9 caligula_ Canar canta canvon carlocci_ ccasin ccxCZ cdh473 celery__ Cerise certainty cfricke chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` clahey ClaudiusMaximus Clint clog cmccann cmears cmsd2 cmsmcq cods colah_ collin comak companion_cube conehead confound connelly coppro copumpkin cordawyn CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cromain cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dawe dcoutts deavid Deewiant def-_ def-lkb dennda dented42 dEPY Derander dfletcher dgpratt dgvncsz0f DigitalKiwi dilinger_ dixie djahandarie djcoin dju dkasak dlundy_ dmarker DMcGill dmwit dnolen Dodek dogmaT dolio DolphR domingo donri doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dyreshark dysinger eacameron1 EarlGray earthy edenc edon edsko edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 eldariof electrog1ek elgot Eliel elliott elliottcable em endojelly Enigmagic ent- ericmj Eridius erkin ernst erpe Erstarrung Esa|iPhone6 Estrellas etabot etehtsea ethercro1 ethercrow etrepum EvilPenguin eviltwin_ Excureo execc_13 ExternalReality eyck f8 fabjan fairfieldt fall_ fayden fcr_ felipe_ fergusnoble fgomez fihi09 finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux Fnar folone formalcow fotc Franciman freiksenet frio frontendloader froztbyte fry fryguybob ft Fubar^ Fuco FunkyDrummer Fuuzetsu fxr fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gereedy gg7 ghorn Ghoul__ gienah gilbertw1 Gilly glguy Gothmog_ Gracenotes greymalkin gseitz_ gspr guampa guerrill1 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamishmack hanDerPeder harrison heath Heffalump helgikrs henk Hermit hiratara hiredman hiroyuki2 hive-mind hiyakashi homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack idnar idntfy ido idoru Igloo ijp imphasing implr inarenvi inr_ int-e integral_ Internet13 ion ique ironm isenmann isomorphic iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt jaroslaw jaspervdj Jaxan jayne jb55 jbauman jcp|u jdoliner Jello_Raptor jercos Jesin jesyspa jfischoff jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jmelesky jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte josh__ JoshuaA JPohlmann jrib jrockway jrslepak js6i jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k0001 k00mi k0ral kaictl kakos kalven KaneTW kaol kaoskorobase Ke kennyd kennyp kevinqcs Khisanth kini Kinnison KitB_ kith kiwnix kkris kloeri klugez kmels_ kmels__ kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kvey kyle__ l0p3n lahwran LAMMJohnson Laney latro`a lattenwald lazard LeaChim lemao lennart__ LeNsTR leoncamel2 leroux levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luisgabriel luite_ Luke lulf lunarjar lusory lzm m3ga machisuji_ magicman mahogny majoh maksbotan maltin mami mapf mapreduce marienz Martty MasseR mateu Mathnerd626 mattp__ mattrepl matzo_ mauke Maxdamantus mcdonc mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn merijn_ message144 MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjr841 MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom moonlite_ morazow mornfall morolin mortberg mrd MrFenix mrko mrshoe mrsolo mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` neena NemesisD netj neurocyte newsham nexx nh2 Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 nilsi Nimatek nimish nimred ninegrid ninzine Nisstyre niteria nlogax no-n noam noj nooodl noplamodo normanrichards notdan NougatRillettes Nshag numeral nuncanada nus-- nuttycom nwf oax obcode ocharles odites ofan Okasu OlegYch opqdonut Ornedan ortmage osfameron othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney paintcan Paks pamojarpan Pantoufle Paprikachu ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e path[l] pcapriotti pdxleif_away peddie peltchu pepijndevos perlite petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ phyrex1an pib1972 pigoz pikhq piotr_ plhk pmade pnielsen popz pqmodn pr pranavrc predator117 preflex prh prinnysocks PrO_OkI_ profmakx prophile ps-auxw pskirko Ptival ptrf purefn1 puzza007_ pyrtsa pyykkis_ q66 qrlr quaestor quicksilver quuxman qwandor qwr qz r126l raek raichoo raid rainmaker Ralith_ Rarrikins RayNbow Raynes Raynos Razz realnot redjohn reggie1 reiddrap- Reite Rembane RenJuan rexamophone rfw RichyB rio Riussi rmunroe robawt robbe- robbert roconnor rofer rs0 rs234 rsimoes ryanakca s00pcan S11001001 s4msung s_quark SaBer saep Sagi saiam Saizan sajith samedhi saml saurik sawgij saysjonathan scgilardi schlumpi sclv Scott_firebeta Sculptor seanmcl seats Sebastien-L SegFaultAX seliopou sellout- seq99` setmeaway2 Sgeo sgronblo_ sh shachaf shanse shepheb Shin-LaC shintah SHODAN shutdown_-h_now si14 silver_ simon___ simpson sipa sirchurchill sjl ski_ skp skyflash skyflash_ sleepynate SLi sm smarter snoyberg so Soft sohum solarus solirc sonda sordina3 SoupE spacebark spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire stat_vi statusfailed steez_ stelleg_away stepcut stephe strax_ suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sysopfb tahu tamiko tanakh tanakh_ Taneb Tarential taruti tavelram tazjin tcsavage td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche Tharugrim The_third_man theDon theorbtwo TheRedMood thetallguy thetallguy1 thirsteh_ Thomyho4 thorkilnaur_ thorsten` thoughtpolice Thra11 threedaymonk threesome timebomb timemage timthelion tippenein tjohnson tkd tmiw TML tntc tobiassjosten tobym tom4939 tomaw tomboy66 tomejaguar tomh__ tomku tommd tomprince tootooroo tootsie ToRA Tordek trescenzi trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tufflax tunixman tuv tvaalen Twey tyler_ tzxn3 u_ ujihisa ulfdoz Ulrar uniquenick Urchin UziMonkey__ v v0|d Valodim vehk verrens Vert Vertue vhz vickaita vikraman vili vmesoff vobi Volstvok Vorpal Vq vraid vramana VZakharov_ wagle walter|r Walther warpy Watcher7|off waterlaz wchun wei2912 weie wereHams1er whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii_ xenon21 xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl__ xrq xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr Zeev zeiris zenzike zhulikas ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ Zzompp]
2013-04-03 19:32:05	--	Channel #haskell: 1046 nicks (1 op, 0 halfops, 0 voices, 1045 normals)
2013-04-03 19:32:05	--	URL for #haskell: http://www.haskell.org/
2013-04-03 19:32:07	--	Mode #haskell [+CLcnpt]
2013-04-03 19:32:07	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-03 19:32:53	-->	celm (4f72638a@gateway/web/freenode/ip.79.114.99.138) has joined #haskell
2013-04-03 19:33:12	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-04-03 19:33:15	-->	sepp2k (~sexy@g224149014.adsl.alicedsl.de) has joined #haskell
2013-04-03 19:33:35	<--	skyflash_ (~skyflash@remote.symmetrics.com) has quit (Remote host closed the connection)
2013-04-03 19:34:13	-->	iago (~iago@a213-22-41-239.cpe.netcabo.pt) has joined #haskell
2013-04-03 19:34:50	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-04-03 19:34:52	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-04-03 19:35:17	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (Ping timeout: 252 seconds)
2013-04-03 19:35:24	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-04-03 19:35:28	<--	trescenzi (~trescenzi@148.100.77.120) has quit (Remote host closed the connection)
2013-04-03 19:35:48	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-04-03 19:36:03	-->	sambio (~sambio@190.57.227.109) has joined #haskell
2013-04-03 19:36:03	<--	sambio (~sambio@190.57.227.109) has quit (Changing host)
2013-04-03 19:36:03	-->	sambio (~sambio@unaffiliated/sambio) has joined #haskell
2013-04-03 19:36:10	-->	tharper (~tomh@host66-177-dynamic.20-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-03 19:36:10	<--	tharper (~tomh@host66-177-dynamic.20-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-04-03 19:36:10	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-04-03 19:36:19	<--	etehtsea (~textual@109.205.253.9) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-04-03 19:37:13	<--	lennart__ (~lennart@kiel-4d066efb.pool.mediaWays.net) has quit (Read error: Connection reset by peer)
2013-04-03 19:37:17	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-04-03 19:37:31	-->	feliperosa (~felipe@201.80.67.90) has joined #haskell
2013-04-03 19:37:56	<--	timebomb (~tb@arubacs1.louisiana.edu) has quit (Ping timeout: 245 seconds)
2013-04-03 19:38:16	-->	snhmib (~jurjen@AOrleans-251-1-25-62.w90-19.abo.wanadoo.fr) has joined #haskell
2013-04-03 19:38:18	-->	lennart_ (~lennart@kiel-4d066efb.pool.mediaWays.net) has joined #haskell
2013-04-03 19:38:30	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-04-03 19:39:06	<--	timthelion (~timothy@94.213.broadband4.iol.cz) has quit (Ping timeout: 264 seconds)
2013-04-03 19:39:06	feliperosa	arrgh, parallel programming in haskell is so frustrating... What can be the cause of high garbage collection in parallel vector reduction (using (+))?
2013-04-03 19:39:30	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-04-03 19:39:36	-->	enquora (~davidr@S0106602ad083de8c.cg.shawcable.net) has joined #haskell
2013-04-03 19:39:37	<--	jyp (~jyp@58.149.168.130) has quit (Remote host closed the connection)
2013-04-03 19:39:42	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 264 seconds)
2013-04-03 19:39:42	feliperosa	I've tried par & pseq and the Par monad, but either way I get too much garbage collection
2013-04-03 19:39:50	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Client Quit)
2013-04-03 19:40:09	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-04-03 19:40:53	pamojarpan	hello, I'm a newbie with a problem in a haskell program
2013-04-03 19:40:58	pamojarpan	https://docs.google.com/document/d/1o3Uo_OkelsHwtcG2RmWdI6Am6z5mKEoIMQDohpTP9Vk/edit
2013-04-03 19:41:00	pamojarpan	any help?
2013-04-03 19:41:07	-->	fro0t (~fro0t@1.23.64.147) has joined #haskell
2013-04-03 19:41:21	-->	crdueck_ (d810e466@gateway/web/freenode/ip.216.16.228.102) has joined #haskell
2013-04-03 19:42:00	feliperosa	pamojarpan: could you please use hpaste.org? that would make it easier to read
2013-04-03 19:42:08	pamojarpan	of course
2013-04-03 19:42:49	hpaste	pamojarpan pasted “Haskell file reader” at http://hpaste.org/85095
2013-04-03 19:43:22	<--	celm (4f72638a@gateway/web/freenode/ip.79.114.99.138) has quit (Ping timeout: 245 seconds)
2013-04-03 19:44:01	-->	hdoshi (~hdoshi@66.54.159.166) has joined #haskell
2013-04-03 19:44:09	-->	scottj (~scott@206.212.250.58) has joined #haskell
2013-04-03 19:44:11	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-04-03 19:44:15	<--	odites (~quassel@ppp-62-128.29-151.libero.it) has quit (Remote host closed the connection)
2013-04-03 19:44:46	jfischoff	what's the best way to covert a Float to a Double?
2013-04-03 19:45:07	feliperosa	:t toRational
2013-04-03 19:45:19	feliperosa	oh noes, where's he
2013-04-03 19:45:33	jfischoff	okay wasn't sure if there was a better way
2013-04-03 19:46:03	feliperosa	but I guess I'm wrong
2013-04-03 19:46:16	<--	hdoshi (~hdoshi@66.54.159.166) has quit (Read error: Connection reset by peer)
2013-04-03 19:46:29	jfischoff	(fromRational . toRational) was my first thought
2013-04-03 19:46:40	jfischoff	but that seems bad
2013-04-03 19:46:46	-->	brill (~brill@78.156.103.250) has joined #haskell
2013-04-03 19:46:46	feliperosa	oh yeah, that's what I was missing
2013-04-03 19:46:48	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 19:47:00	-->	kbdz (~df@95-37-205-138.dynamic.mts-nn.ru) has joined #haskell
2013-04-03 19:47:00	<--	Jesin (~Jessin_@dhcp123-25.eecs.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-04-03 19:47:25	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 19:47:50	supki	jfischoff: realToFrac (which is fromRational . toRational)
2013-04-03 19:47:54	feliperosa	pamojarpan: The thing is that printSummary gives you IO (), so using map printSummary over a [[Int]] will result in [IO ()]
2013-04-03 19:48:36	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-03 19:48:46	-->	knightshade (~knightsha@p54BC5E2A.dip.t-dialin.net) has joined #haskell
2013-04-03 19:48:56	pamojarpan	how can I solve that?
2013-04-03 19:48:59	-->	hdoshi (~hdoshi@66.54.159.166) has joined #haskell
2013-04-03 19:49:02	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-04-03 19:49:05	pamojarpan	I don't understand Monads pretty well
2013-04-03 19:49:21	<--	hdoshi (~hdoshi@66.54.159.166) has quit (Client Quit)
2013-04-03 19:49:31	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-04-03 19:49:39	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-04-03 19:49:42	-->	hdoshi (~hdoshi@66.54.159.166) has joined #haskell
2013-04-03 19:49:47	kbdz	Hello. Is where a category where types with kind * are objects and type constructors, say *->*, are arrows?
2013-04-03 19:50:08	<--	ExternalReality (~user@38.122.11.254) has quit (Ping timeout: 252 seconds)
2013-04-03 19:51:06	-->	trescenzi (~trescenzi@2620:91:0:163:9010:3dc6:675b:e482) has joined #haskell
2013-04-03 19:51:23	simpson	kbdz: Sorry, I don't quite understand your question.
2013-04-03 19:51:27	-->	narens (~user@n163s130.ntc.blacksburg.shentel.net) has joined #haskell
2013-04-03 19:51:29	feliperosa	pamojarpan: You could use mapM_. That is mapM_ :: (a -> m b) -> [a] -> m (), that would run all your computations and ignore their results (no problem since IO () has no results anyway, just effects)
2013-04-03 19:51:37	ab9rf	indeed, i also failed to parse it
2013-04-03 19:51:54	-->	andrey_ (~chatzilla@95.73.233.33) has joined #haskell
2013-04-03 19:52:32	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 19:52:44	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-04-03 19:52:46	feliperosa	pamojarpan: mapM simply applies the function (a -> m b) to each elem of [a] and gather their results in a list, so their effects are taken as well
2013-04-03 19:53:24	narens	Question: with the lens package I can do (1,2) _1 %~ (+1) to get (2,2), but I'd like to use a monadic function to modify so If i naively do (1,2) _1 %~ (\x -> Just (x+1)) I will get (Just 2,2). But what i really want is Just (2,2)... can it be done?
2013-04-03 19:53:24	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-04-03 19:53:26	<--	dolio (~dolio@gw1.mcgraw-hill.com) has quit (Ping timeout: 252 seconds)
2013-04-03 19:53:29	-->	otend (~otend@2610:e0:a040:e0c5:9113:672a:ebe:be69) has joined #haskell
2013-04-03 19:53:30	-->	gentleben (~gentleben@208.74.182.4.static.etheric.net) has joined #haskell
2013-04-03 19:53:57	otters	Just $ (1,2) _1 %~ 2
2013-04-03 19:54:03	otters	er
2013-04-03 19:54:05	otters	.~
2013-04-03 19:54:13	-->	Palmik (~palmik@man-208-105.pks.muni.cz) has joined #haskell
2013-04-03 19:54:24	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-04-03 19:54:28	pamojarpan	feliperosa: I've changed map to mapM_
2013-04-03 19:54:36	pamojarpan	still the same problem
2013-04-03 19:54:51	narens	otters: eh? I need to modify not just set
2013-04-03 19:54:53	feliperosa	pamojarpan: Not the same, there were 2 problems
2013-04-03 19:55:11	-->	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has joined #haskell
2013-04-03 19:55:29	<--	kaoskorobase (~sk@92.56.206.219) has quit (Quit: kaoskorobase)
2013-04-03 19:55:36	supki	narens:  (1, 2) & _1 (\x -> Just (x + 1))
2013-04-03 19:55:39	feliperosa	pamojarpan: Now you have a problem with the types in parseFile. You see, you're running a IO computation there but not saying that with the types.
2013-04-03 19:55:43	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-03 19:55:46	kbdz	simpson: Types with kind * and functions make up Hask category. Type constructors looks like functions so I wonder do they make up a category too,
2013-04-03 19:55:52	-->	tibbe (tibbe@nat/google/x-zskbizedqtxhbbsg) has joined #haskell
2013-04-03 19:56:11	narens	supki: nice
2013-04-03 19:56:19	narens	supki: how does that work?
2013-04-03 19:56:22	jfischoff	float2Double was what I wanted
2013-04-03 19:56:25	<--	dabradley (~bradley@office.vivisimo.com) has quit (Ping timeout: 240 seconds)
2013-04-03 19:56:28	<--	hdoshi (~hdoshi@66.54.159.166) has quit (Remote host closed the connection)
2013-04-03 19:56:31	jfischoff	in GHC.Float
2013-04-03 19:56:38	simpson	kbdz: IIUC type constructors *are* functions.
2013-04-03 19:56:41	-->	hdoshi (~hdoshi@66.54.159.166) has joined #haskell
2013-04-03 19:56:44	Hafydd	@hoogle float2Double
2013-04-03 19:57:02	<--	snoyberg (~ubuntu@89-139-153-6.bb.netvision.net.il) has left #haskell
2013-04-03 19:57:09	feliperosa	pamojarpan: And you're mixing monad types in that expression too.
2013-04-03 19:57:12	Hafydd	D:
2013-04-03 19:57:16	merijn	narens: Normally you use the Identity functor to get results from a lens like _1, but lens works with any functor. This is just using the Maybe functor instead of the identity one, afaik
2013-04-03 19:57:20	jfischoff	lambdabot is down I think
2013-04-03 19:57:28	jfischoff	@slap
2013-04-03 19:57:50	pamojarpan	feliperosa: so,
2013-04-03 19:57:51	pamojarpan	parseFile:: String -> IO [Int]
2013-04-03 19:57:51	narens	merijn: I knew the lens package is worth all its dependencies!
2013-04-03 19:58:06	merijn	narens: Maybe you want to look at edwardk's lens talk where he shows where these type signatures are coming from
2013-04-03 19:58:17	merijn	It's very interesting, but a bit long :p
2013-04-03 19:58:26	aristid	> (1, 2) & _1 (\x -> Just (x + 1))
2013-04-03 19:58:31	narens	merijn: I have, but only skimmed. It'll take some time to absorb all
2013-04-03 19:58:53	<--	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-03 19:59:11	kbdz	simpson: I do not mean data constructors like Just. I mean types with kind *->*. They aren't functions.
2013-04-03 19:59:15	merijn	aristid: lambdabot is dead :\
2013-04-03 19:59:29	aristid	merijn: NOOOOO
2013-04-03 19:59:52	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-03 20:00:03	-->	tharper (~tomh@host66-177-dynamic.20-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-03 20:00:07	<--	tharper (~tomh@host66-177-dynamic.20-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-04-03 20:00:07	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-04-03 20:00:18	pamojarpan	feliperosa: should I change some let expressions to <-?
2013-04-03 20:00:21	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-04-03 20:00:46	-->	dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-04-03 20:00:55	<--	trescenzi (~trescenzi@2620:91:0:163:9010:3dc6:675b:e482) has quit (Remote host closed the connection)
2013-04-03 20:01:10	-->	FUZxxl (~fuz@d00m.org) has joined #haskell
2013-04-03 20:01:49	feliperosa	pamojarpan: No, but the oposite. You should change <- to let. You see L.readInt has type L.ByteString -> Maybe (Int, L.ByteString) right. So you could first map that then take the list out of the Maybe monad.
2013-04-03 20:01:50	-->	dsadsdasd (~Adium@37.157.191.242) has joined #haskell
2013-04-03 20:01:55	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-04-03 20:02:18	-->	Jesin (~Jessin_@dhcp123-114.eecs.lehigh.edu) has joined #haskell
2013-04-03 20:02:41	feliperosa	pamojarpan: Like mapM L.readInt nums has type Maybe [(Int, L.ByteString)]. So you could case that: case numtupla of { ... }
2013-04-03 20:02:53	-->	hiroakip (~hiroaki@p5B04B67C.dip.t-dialin.net) has joined #haskell
2013-04-03 20:03:01	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-04-03 20:03:31	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-03 20:03:44	<--	lulf (~lulf@li307-13.members.linode.com) has quit (Remote host closed the connection)
2013-04-03 20:03:49	--	Watcher7|off is now known as Watcher7
2013-04-03 20:03:52	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 20:04:09	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-04-03 20:04:37	pamojarpan	feliperosa: I haven't seen case yet
2013-04-03 20:04:51	pamojarpan	feliperosa: and thank you very much
2013-04-03 20:04:58	pamojarpan	feliperosa: :)
2013-04-03 20:04:58	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-04-03 20:05:03	hpaste	feliperosa annotated “Haskell file reader” with “Haskell file reader (annotation)” at http://hpaste.org/85095#a85100
2013-04-03 20:05:09	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-04-03 20:05:19	<--	crdueck_ (d810e466@gateway/web/freenode/ip.216.16.228.102) has quit (Quit: Page closed)
2013-04-03 20:06:22	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-04-03 20:06:23	<--	Zeev (~Zeev@109.65.9.114) has quit (Ping timeout: 245 seconds)
2013-04-03 20:06:36	<--	dsadsdasd (~Adium@37.157.191.242) has quit (Ping timeout: 256 seconds)
2013-04-03 20:06:45	-->	flra (~alexandru@79.114.99.138) has joined #haskell
2013-04-03 20:07:41	--	andrey_ is now known as andrey013
2013-04-03 20:08:36	-->	markov_twain (~markov_tw@180.sub-174-224-135.myvzw.com) has joined #haskell
2013-04-03 20:09:45	feliperosa	Can someone help me with parallel haskell things? rofl, why can't I figure that out. 0.25 s of GC out of 0.33 yay...
2013-04-03 20:10:39	-->	toonces_the_cat (~benjamin@ppp-212-114-183-34.dynamic.mnet-online.de) has joined #haskell
2013-04-03 20:11:16	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 20:11:22	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-03 20:11:35	pamojarpan	feliperosa: more errors, :(
2013-04-03 20:11:57	<--	toonces_the_cat (~benjamin@ppp-212-114-183-34.dynamic.mnet-online.de) has quit (Client Quit)
2013-04-03 20:12:16	narens	feliperosa: what are you trying to do?
2013-04-03 20:12:29	pamojarpan	feliperosa: fromMaybe is the solution, right?
2013-04-03 20:12:46	-->	boegel (~boegel@183.244-242-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-04-03 20:12:55	<--	Esa|iPhone6 (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-04-03 20:12:55	feliperosa	pamojarpan: Not the safest, but would do yes.
2013-04-03 20:13:18	pamojarpan	feliperosa: what do you wanna mean with safest?
2013-04-03 20:13:21	-->	gridaphobe (~gridaphob@128.54.34.248) has joined #haskell
2013-04-03 20:13:30	-->	Esa_ (~esa.syt@108-250-33-79.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-04-03 20:14:05	-->	sethroot (~sethroot@108.71.82.84) has joined #haskell
2013-04-03 20:14:29	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-04-03 20:14:34	clahey	Okay, so I've defined a trifecta parser.
2013-04-03 20:14:37	feliperosa	narens: Well, I trying to learn parallel programming in haskell. I did a program to sum all elements of a vector (from Data.Vector) in parallel (a la divide and conquer) but it's doing a lot of garbage collection and I don't understand why...
2013-04-03 20:14:42	clahey	Or I could change it to be a parsec parser easily enough.
2013-04-03 20:14:46	clahey	How do I run it on a String?
2013-04-03 20:15:01	clahey	The docs only seem to say how to read from a file.
2013-04-03 20:15:18	<--	andrey013 (~chatzilla@95.73.233.33) has quit (Quit: ChatZilla 0.9.90 [Firefox 20.0/20130403010102])
2013-04-03 20:15:26	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 245 seconds)
2013-04-03 20:15:31	<--	morazow (~morazow@gsd102.gsd.inesc-id.pt) has quit (Remote host closed the connection)
2013-04-03 20:15:34	kbdz	I.e. value level constructor "Just" is an arrow in the Hask.
2013-04-03 20:15:34	kbdz	I wonder is where a category there _type level_ constructor Maybe :: * -> * is an arrow.
2013-04-03 20:15:51	feliperosa	pamojarpan: Sry, I misread it. I thought you said fromJust hehe.
2013-04-03 20:16:32	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 255 seconds)
2013-04-03 20:16:45	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-04-03 20:17:12	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-04-03 20:17:28	-->	nade (~nade@daapwireless-pat.uc.edu) has joined #haskell
2013-04-03 20:17:30	merijn	feliperosa: Computation not strict enough, maybe?
2013-04-03 20:17:59	-->	Bwild (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has joined #haskell
2013-04-03 20:18:01	narens	feliperosa: where is the code?
2013-04-03 20:18:01	<--	bos_ (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-03 20:18:05	hpaste	feliperosa pasted “why GC? why?” at http://hpaste.org/85102
2013-04-03 20:18:09	hpaste	pamojarpan revised “Haskell file reader”: “Haskell file reader” at http://hpaste.org/85095
2013-04-03 20:18:24	<--	markov_twain (~markov_tw@180.sub-174-224-135.myvzw.com) has quit (Remote host closed the connection)
2013-04-03 20:18:25	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 20:18:25	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 240 seconds)
2013-04-03 20:18:41	feliperosa	merijn: Maybe, I'll look for that.
2013-04-03 20:18:43	-->	path[l]_ (~vsi@173.252.71.7) has joined #haskell
2013-04-03 20:18:45	magicman	clahey: Text.Trifecta.Parser exports parseString :: Parser a -> Delta -> String -> Result a; No clue what this Delta thing is, though. I haven't used trifecta myself.
2013-04-03 20:19:08	hpaste	pamojarpan revised “Haskell file reader (annotation)”: “test” at http://hpaste.org/85100
2013-04-03 20:19:31	-->	andrey013 (~chatzilla@95.73.233.33) has joined #haskell
2013-04-03 20:19:41	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-04-03 20:19:42	-->	hiroaki (~hiroaki@p5B04B67C.dip.t-dialin.net) has joined #haskell
2013-04-03 20:19:51	<--	path[l] (~vsi@173.252.71.6) has quit (Ping timeout: 252 seconds)
2013-04-03 20:19:51	--	path[l]_ is now known as path[l]
2013-04-03 20:20:09	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-03 20:20:30	<--	tibbe (tibbe@nat/google/x-zskbizedqtxhbbsg) has quit (Ping timeout: 264 seconds)
2013-04-03 20:20:32	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-03 20:20:38	-->	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has joined #haskell
2013-04-03 20:21:06	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-04-03 20:21:16	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-04-03 20:21:17	<--	tootsie (tootsie@109.58.16.55.bredband.tre.se) has quit
2013-04-03 20:21:21	pamojarpan	feliperosa: I have to go, I'll return to this problem in some hours. Thanks for your help.
2013-04-03 20:21:44	feliperosa	pamojarpan: Ok :).
2013-04-03 20:22:04	<--	andrey013 (~chatzilla@95.73.233.33) has quit (Client Quit)
2013-04-03 20:22:18	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 264 seconds)
2013-04-03 20:22:21	-->	andrey013 (~chatzilla@95.73.233.33) has joined #haskell
2013-04-03 20:22:31	clahey	magicman: Huh, it's not listed on http://hackage.haskell.org/packages/archive/trifecta/0.53/doc/html/Text-Trifecta-Parser.html
2013-04-03 20:22:38	<--	kbdz (~df@95-37-205-138.dynamic.mts-nn.ru) has left #haskell
2013-04-03 20:22:56	<--	Jesin (~Jessin_@dhcp123-114.eecs.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-04-03 20:23:10	magicman	Ahh, I was looking at the 1.0 docs.
2013-04-03 20:23:24	<--	accidus (~ohad@bzq-79-181-80-2.red.bezeqint.net) has quit (Remote host closed the connection)
2013-04-03 20:23:30	<--	v (~v@61.173.91.86) has quit (Ping timeout: 264 seconds)
2013-04-03 20:23:59	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-03 20:23:59	-->	v (~v@61.173.91.86) has joined #haskell
2013-04-03 20:23:59	clahey	Which I didn't find with google.  Yeay google!
2013-04-03 20:23:59	hpaste	pamojarpan revised “Haskell file reader (annotation)”: “test” at http://hpaste.org/85100
2013-04-03 20:24:18	--	stelleg_away is now known as stelleg
2013-04-03 20:24:29	<--	joe9 (~user@c-71-236-20-61.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-03 20:24:34	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-04-03 20:25:59	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 255 seconds)
2013-04-03 20:26:06	-->	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-04-03 20:26:12	-->	joe9 (~user@c-71-236-20-61.hsd1.ga.comcast.net) has joined #haskell
2013-04-03 20:26:16	-->	SG11 (~SG23@vpne174.ugent.be) has joined #haskell
2013-04-03 20:26:23	<--	Palmik (~palmik@man-208-105.pks.muni.cz) has quit (Quit: Lost terminal)
2013-04-03 20:26:32	feliperosa	Doing -qg2 doubles production time. Does that mean anything useful?
2013-04-03 20:26:40	<--	mcdonc (~mcdonc@ip72-209-215-142.dc.dc.cox.net) has quit (Quit: Gotsta go)
2013-04-03 20:26:55	<--	vickaita (~vickaita@pool-173-59-33-130.phlapa.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-04-03 20:27:45	feliperosa	Cuts of total memory in use by 2 as reported by -s
2013-04-03 20:27:52	-->	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 20:28:27	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-03 20:29:28	feliperosa	merijn: I thought that put (from Control.Monad.Par) was fully strict and that would help (I'm using Par).
2013-04-03 20:29:52	<--	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has quit (Ping timeout: 258 seconds)
2013-04-03 20:30:00	-->	twopoint718 (~chris@173.229.2.112) has joined #haskell
2013-04-03 20:30:00	<--	twopoint718 (~chris@173.229.2.112) has quit (Changing host)
2013-04-03 20:30:00	-->	twopoint718 (~chris@fsf/member/twopoint718) has joined #haskell
2013-04-03 20:30:06	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 264 seconds)
2013-04-03 20:30:09	-->	darthdeus (~darthdeus@34.211.broadband6.iol.cz) has joined #haskell
2013-04-03 20:31:54	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-03 20:31:59	hpaste	“Anonymous Coward” annotated “why GC? why?” with “why GC? why? (annotation)” at http://hpaste.org/85102#a85106
2013-04-03 20:32:11	--	josh__ is now known as qentrinia
2013-04-03 20:32:24	narens	feliperosa: that would be my take... i did a fixed number slices but that can be changed
2013-04-03 20:32:45	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: When I come back, please tell me in what new ways you have decided to be completely wrong.)
2013-04-03 20:32:56	<--	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-03 20:33:07	-->	cdidd (~cdidd@95-28-11-75.broadband.corbina.ru) has joined #haskell
2013-04-03 20:33:17	danharaj	edwardk: I found a paper that well describes the idea you explained to me yesterday. "Attribute Grammars as a Functional Programming Paradigm"
2013-04-03 20:33:28	edwardk	that sounds right
2013-04-03 20:33:31	edwardk	was it helpful?
2013-04-03 20:33:48	danharaj	edwardk: Yes, but now I am hung up on something, which is probably why I had trouble getting it.
2013-04-03 20:34:25	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-04-03 20:34:47	<--	gentleben (~gentleben@208.74.182.4.static.etheric.net) has quit (Quit: gentleben)
2013-04-03 20:35:02	danharaj	edwardk: This method can compute the root node's attributes by building an annotated tree and then smashing it down with a knot-tie to finish the loop. But I am trying to get the whole annotated tree.
2013-04-03 20:35:21	-->	Ontolog (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-03 20:35:41	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-04-03 20:35:44	<--	joe9 (~user@c-71-236-20-61.hsd1.ga.comcast.net) has quit (Remote host closed the connection)
2013-04-03 20:35:59	Ontolog	is there any difference at all in the semantics of the expressions (null x) and (x == [])?
2013-04-03 20:35:59	-->	tibbe (tibbe@nat/google/x-fejmvpvttigpjrhl) has joined #haskell
2013-04-03 20:36:48	edwardk	oh, i've done that before, so it can be done =)
2013-04-03 20:36:52	<--	Aune (~arne@volac.lysator.liu.se) has quit (Quit: Hath Deprated)
2013-04-03 20:37:14	--	___ghjk is now known as __op
2013-04-03 20:37:19	danharaj	edwardk: I am not sure that is a good explanation of what I am trying to express.
2013-04-03 20:37:20	<--	stelleg (~stelleg@c-174-56-74-242.hsd1.nm.comcast.net) has quit (Ping timeout: 246 seconds)
2013-04-03 20:37:25	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-04-03 20:37:26	feliperosa	narens: Hum, interesting. It got some parallel working
2013-04-03 20:37:33	-->	edeast (~chatzilla@24.114.27.112) has joined #haskell
2013-04-03 20:37:40	Zariel	If I have a module in src/stuff do I need to specify all modules like this in other-modules?  hs-source-dirs: src
2013-04-03 20:37:50	edwardk	i mean i've extracted the tree with a cofree comonad annotating what the values were at each level
2013-04-03 20:37:57	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-04-03 20:38:01	xnyhps	Ontolog: The second one requires Eq on the values of x, the fist one doesn't.
2013-04-03 20:38:21	-->	noteventime (~user@c83-253-73-118.bredband.comhem.se) has joined #haskell
2013-04-03 20:38:24	Ontolog	xnyhps: thanks
2013-04-03 20:39:34	__op	@src null
2013-04-03 20:39:59	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Remote host closed the connection)
2013-04-03 20:39:59	-->	LimitSupremum (823ad8ed@gateway/web/freenode/ip.130.58.216.237) has joined #haskell
2013-04-03 20:40:26	-->	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has joined #haskell
2013-04-03 20:40:50	__op	lambdabot has left (Excess Flood)
2013-04-03 20:40:54	-->	Twisol (~Oddlyoko@wikia/Oddlyoko) has joined #haskell
2013-04-03 20:41:08	-->	mcdonc (~mcdonc@ip72-209-215-142.dc.dc.cox.net) has joined #haskell
2013-04-03 20:41:14	<--	tibbe (tibbe@nat/google/x-fejmvpvttigpjrhl) has quit (Quit: tibbe)
2013-04-03 20:41:18	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-03 20:41:31	-->	joe9 (~user@c-71-236-20-61.hsd1.ga.comcast.net) has joined #haskell
2013-04-03 20:41:38	<--	inarenvi (~quassel@62.32.143.83) has quit (Remote host closed the connection)
2013-04-03 20:41:56	 *	hackagebot Win32-junction-point 0.1 - Support for manipulating NTFS junction points.  http://hackage.haskell.org/package/Win32-junction-point-0.1 (MichaelSteele)
2013-04-03 20:41:57	Ontolog	I have another question about two different operations on lists that seem to be inconsistent in their strictness. (head []) will raise an Exception, while (take 3 [1,2]) returns [1,2]. Given the behavior of head I would expect a function like take to also raise an exception. Or looking at it the other way, head [] could return some kind of null object.
2013-04-03 20:42:06	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 276 seconds)
2013-04-03 20:42:15	-->	nobdraisentone (~nobdraise@93.188.40.242) has joined #haskell
2013-04-03 20:42:17	Ontolog	So can someone explain to me how this is in fact consistent?
2013-04-03 20:42:20	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-04-03 20:42:20	geekosaur	what is null object?
2013-04-03 20:42:28	Ontolog	like in Ruby we have Nil
2013-04-03 20:42:45	 *	geekosaur watches point sail far overhead...
2013-04-03 20:42:48	Ontolog	so doing something like (head []) in Ruby would return nil
2013-04-03 20:42:53	monochrom	there is no null object in haskell
2013-04-03 20:42:56	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-04-03 20:43:10	Ontolog	ok, why not
2013-04-03 20:43:11	monochrom	see http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare
2013-04-03 20:43:56	Ontolog	monochrom: in a nutshell?
2013-04-03 20:44:03	-->	dabradley (~bradley@office.vivisimo.com) has joined #haskell
2013-04-03 20:44:03	monochrom	take and head are not meant to be related. take does what it does: give you a perfectly fine list, even if it's short. head does what it does: give you an element or die trying.
2013-04-03 20:44:05	<--	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has quit (Quit: Do sysadmins have to go down with their server? because I think I am.)
2013-04-03 20:44:08	geekosaur	but to address your actual question: take returns a list, an empty list is consistent with thar
2013-04-03 20:44:22	<--	kmrhb (~kmrhb@dsl-216-221-57-53.mtl.aei.ca) has quit (Quit: kmrhb)
2013-04-03 20:44:34	geekosaur	head returns an a from an [a]. it does not (although some argue it should) return a Maybe a
2013-04-03 20:44:34	-->	kartoffelbrei (~kartoffel@p54962AAE.dip.t-dialin.net) has joined #haskell
2013-04-03 20:45:02	geekosaur	"null object" is not a thing in Haskell. you might want to learn about Haskell's type system.
2013-04-03 20:45:17	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-04-03 20:45:17	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Read error: Connection reset by peer)
2013-04-03 20:45:19	-->	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has joined #haskell
2013-04-03 20:45:20	--	Jello_Raptor is now known as Jello_Rap
2013-04-03 20:45:20	Ontolog	geekosaur: yes, i understand, i want to understand why though
2013-04-03 20:45:25	monochrom	to say that "take and head are not consistent together" is comparing apples and oranges
2013-04-03 20:45:32	Ontolog	geekosaur: just high-level 2 sentence explanation
2013-04-03 20:45:43	geekosaur	note however that head *is* acknowledged to be something of a wart. sadly, we're kinda stuck with it for historical reasons, but we tend to recommend people not use it precisely for that reason.
2013-04-03 20:45:44	Ontolog	monochrom: i see
2013-04-03 20:45:48	<--	tufflax (~tufflax@c213-89-254-181.bredband.comhem.se) has quit (Quit:  HydraIRC -> http://www.hydrairc.com <- \o/)
2013-04-03 20:46:00	Ontolog	geekosaur: what to use instead of head?
2013-04-03 20:46:11	niteria	pattern matching
2013-04-03 20:46:41	Zariel	damnit cabal be helpful
2013-04-03 20:46:55	geekosaur	foo [] = {- some reasonable default -}; foo (x:_) = {- whatever -}
2013-04-03 20:46:59	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-03 20:47:24	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Read error: Connection reset by peer)
2013-04-03 20:47:27	-->	tibbe (tibbe@nat/google/x-kvblbhflajudyizn) has joined #haskell
2013-04-03 20:47:51	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-04-03 20:48:02	fryguybob	> let safeHead (a:_) = Just a; safeHead _ = Nothing in (safeHead [1,2], safeHead [])
2013-04-03 20:48:08	fryguybob	:(
2013-04-03 20:48:34	niteria	(Just 1, Nothing) :D
2013-04-03 20:48:53	Ontolog	oh, Nothing
2013-04-03 20:48:56	-->	folone_ (~folone@brln-4d0cce84.pool.mediaWays.net) has joined #haskell
2013-04-03 20:48:58	Ontolog	so Nothing is null :p
2013-04-03 20:49:04	niteria	it isn't
2013-04-03 20:49:07	Ontolog	yeah i know
2013-04-03 20:49:10	qentrinia	What happened to lambdabot? :(
2013-04-03 20:49:19	fryguybob	Ontolog: Notice the type is different.  That's the important part.
2013-04-03 20:49:21	monochrom	Nothing is not null because Nothing is not pervasive, null is pervasive
2013-04-03 20:49:32	Ontolog	pervasive?
2013-04-03 20:49:33	geekosaur	it's a null that you have to declare support for
2013-04-03 20:49:38	-->	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has joined #haskell
2013-04-03 20:49:38	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-03 20:49:38	<--	tcsavage (~tcsavage@host86-161-249-131.range86-161.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-04-03 20:49:38	-->	tcsavage (~tcsavage@host86-147-148-232.range86-147.btcentralplus.com) has joined #haskell
2013-04-03 20:49:39	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Ping timeout: 245 seconds)
2013-04-03 20:49:43	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-04-03 20:49:46	<--	etabot (~etabot@199.47.72.128) has quit (Ping timeout: 245 seconds)
2013-04-03 20:49:47	geekosaur	(and, thereby, have to handle somehow)
2013-04-03 20:49:52	monochrom	every type has a null, every type does not have a Nothing
2013-04-03 20:50:03	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-03 20:50:03	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-03 20:50:59	Ontolog	oh yeah i shouldn't confused my talk of null with the null operator
2013-04-03 20:50:59	Ontolog	i mean just something that is semantically NULL like in the SQL sense
2013-04-03 20:50:59	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Ping timeout: 252 seconds)
2013-04-03 20:50:59	niteria	undefined is sort of like null
2013-04-03 20:50:59	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-04-03 20:51:25	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-04-03 20:51:26	<--	anRch (~markmilli@ip-64-134-241-109.public.wayport.net) has quit (Quit: anRch)
2013-04-03 20:51:33	<--	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has quit (Remote host closed the connection)
2013-04-03 20:51:34	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 20:51:37	niteria	but with null you can test for nullness
2013-04-03 20:52:04	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-03 20:52:15	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-04-03 20:52:18	danharaj	edwardk: http://hpaste.org/85108 I would like to give `compute` the same signature as synthetic, but I do not see how this representation of attributes allows that.
2013-04-03 20:52:23	<--	Jello_Rap (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has quit (Ping timeout: 246 seconds)
2013-04-03 20:52:37	Ontolog	i just wonder if the behavior of functions like head make the language a bit more verbose than other high-level languages such as ruby or perl
2013-04-03 20:52:45	edwardk	danharaj: i'm going to have to do this offline later
2013-04-03 20:52:48	danharaj	(also I am about 12 sure that I correctly defined compute)
2013-04-03 20:53:02	-->	fro0t2 (~fro0t@1.23.64.147) has joined #haskell
2013-04-03 20:53:06	Ontolog	i guess all the strict typing would do that as well
2013-04-03 20:53:11	danharaj	edwardk: Please do not go out of your way to entertain my questions :)
2013-04-03 20:53:13	niteria	Ontolog: the other way around, you have a Maybe monad
2013-04-03 20:53:23	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-04-03 20:53:28	-->	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has joined #haskell
2013-04-03 20:53:28	edwardk	danharaj: its just that i'm currently pair programming =)
2013-04-03 20:53:29	-->	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has joined #haskell
2013-04-03 20:53:30	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-04-03 20:53:45	niteria	so you don't have to check for nullness on every step
2013-04-03 20:54:21	<--	fro0t (~fro0t@1.23.64.147) has quit (Ping timeout: 245 seconds)
2013-04-03 20:54:50	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 245 seconds)
2013-04-03 20:55:03	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-03 20:55:48	 *	hackagebot yesod-auth-fb 1.5 - Authentication backend for Yesod using Facebook.  http://hackage.haskell.org/package/yesod-auth-fb-1.5 (FelipeLessa)
2013-04-03 20:55:48	 *	hackagebot sscgi 0.1.0 - Simple SCGI Library  http://hackage.haskell.org/package/sscgi-0.1.0 (ChrisForno)
2013-04-03 20:56:43	<--	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-03 20:56:53	clahey	edwardk: What does the delta argument to Text.Trifecta.parseString do?
2013-04-03 20:56:57	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-03 20:56:59	-->	edeast_ (~chatzilla@24.114.27.112) has joined #haskell
2013-04-03 20:57:03	<--	folone_ (~folone@brln-4d0cce84.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-04-03 20:57:06	clahey	edwardk: It seems to be causing the first character of my string to get skipped.
2013-04-03 20:57:12	-->	levi (~user@c-174-52-219-147.hsd1.ut.comcast.net) has joined #haskell
2013-04-03 20:57:18	Ontolog	question about ranges: does [1..1000] immediately allocate memory for all 1000 list positions?
2013-04-03 20:57:19	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-03 20:57:22	clahey	I passed in delta '\0' cause I didn't know what else to pass.
2013-04-03 20:57:42	monochrom	no
2013-04-03 20:57:48	edwardk	clahey: its usually used to give a filename
2013-04-03 20:57:48	edwardk	clahey: what delta are you supplying?
2013-04-03 20:57:59	edwardk	that would skip a char alright =)
2013-04-03 20:58:02	niteria	Ontolog: no it's actually enumFromTo 1 1000
2013-04-03 20:58:15	Ontolog	monochrom: so what if I like drop the 500th element from the list, does it split into two ranges?
2013-04-03 20:58:16	geekosaur	Ontolog, haskell is not strict, in general values are computed when demanded. write your code properly and that would not allocate anything at all...
2013-04-03 20:58:27	Ontolog	geekosaur: i see
2013-04-03 20:58:33	<--	edeast (~chatzilla@24.114.27.112) has quit (Ping timeout: 240 seconds)
2013-04-03 20:58:39	--	edeast_ is now known as edeast
2013-04-03 20:58:42	<--	feliperosa (~felipe@201.80.67.90) has quit (Quit: Leaving)
2013-04-03 20:58:43	edwardk	use mempty or the filename hint
2013-04-03 20:58:47	geekosaur	(stream fusion, it generates a value and consumes it immediatey, no allocation)
2013-04-03 20:59:07	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-03 20:59:11	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-04-03 20:59:16	-->	OlegYch (~OlegYch@80.249.91.117) has joined #haskell
2013-04-03 20:59:20	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-03 20:59:52	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 260 seconds)
2013-04-03 20:59:52	clahey	edwardk: That could use some documentation.
2013-04-03 21:00:03	edwardk	clahey: patch! =)
2013-04-03 21:00:14	edwardk	trifecta in general is completely underdocumented
2013-04-03 21:00:53	<--	tibbe (tibbe@nat/google/x-kvblbhflajudyizn) has quit (Quit: tibbe)
2013-04-03 21:01:07	-->	rdesfo (~ryan@c-75-68-190-48.hsd1.me.comcast.net) has joined #haskell
2013-04-03 21:01:17	-->	trescenzi (~trescenzi@2620:91:0:163:ec2d:ffe1:dab4:f901) has joined #haskell
2013-04-03 21:01:20	-->	hseg (d597308b@gateway/web/freenode/ip.213.151.48.139) has joined #haskell
2013-04-03 21:01:26	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-04-03 21:01:46	<--	RayNbow (~RayNbow@scientia.demon.nl) has quit (Read error: Connection reset by peer)
2013-04-03 21:02:07	<--	Taneb (~nathan@host-92-30-189-164.as13285.net) has quit (Disconnected by services)
2013-04-03 21:02:11	-->	dsadsdasd (~Adium@37.157.191.242) has joined #haskell
2013-04-03 21:02:25	hseg	Is it possible to install the Haskell Platform on a pendrive and use it portably across Windows computers, without needing admin rights on any of the computers?
2013-04-03 21:02:31	-->	Taneb (~nathan@host-92-30-189-164.as13285.net) has joined #haskell
2013-04-03 21:02:48	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-04-03 21:03:06	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-03 21:03:09	<--	Taneb (~nathan@host-92-30-189-164.as13285.net) has quit (Disconnected by services)
2013-04-03 21:03:12	--	atriq is now known as Taneb
2013-04-03 21:03:15	visof	wow haskell now is 1068 users
2013-04-03 21:03:30	<--	tjohnson (~tjohnson@128-193-152-160.ptpg.oregonstate.edu) has quit (Read error: Operation timed out)
2013-04-03 21:03:35	-->	atriq (~nathan@host-92-30-189-164.as13285.net) has joined #haskell
2013-04-03 21:03:49	clahey	edwardk: Fair enough.  :)
2013-04-03 21:03:50	<--	edeast (~chatzilla@24.114.27.112) has quit (Ping timeout: 256 seconds)
2013-04-03 21:04:27	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Quit: Konversation terminated!)
2013-04-03 21:04:44	merijn	I believe edwardk's strategy is to become popular enough that other people will document your stuff for you :p
2013-04-03 21:05:22	edwardk	hseg: possible? probably. easy? don't think so
2013-04-03 21:05:26	<--	trescenzi (~trescenzi@2620:91:0:163:ec2d:ffe1:dab4:f901) has quit (Ping timeout: 245 seconds)
2013-04-03 21:05:27	-->	vickaita (~vickaita@pool-173-59-33-130.phlapa.fios.verizon.net) has joined #haskell
2013-04-03 21:05:33	edwardk	merijn: it seems to be working so far
2013-04-03 21:05:53	<--	Heero (~Heero@unaffiliated/heero) has quit (Ping timeout: 240 seconds)
2013-04-03 21:05:58	hseg	This: http://www.haskell.org/pipermail/wikibook/2012-July/000083.html gives me hope. But there doesn't seem to have been feedback to that.
2013-04-03 21:06:13	edwardk	release all the things with enough instances and types that its obvious that you don't want to try to release another package to compete with me on code quality, then by the time you've finished understanding it you can go and document it ;)
2013-04-03 21:06:18	-->	chester_ (~chester@95-26-236-118.broadband.corbina.ru) has joined #haskell
2013-04-03 21:07:37	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-04-03 21:07:51	-->	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has joined #haskell
2013-04-03 21:08:15	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-04-03 21:08:47	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-03 21:09:02	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-03 21:09:17	-->	fgomez (~Fernando@uwsclient-127-235.uws.ualberta.ca) has joined #haskell
2013-04-03 21:10:04	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 256 seconds)
2013-04-03 21:10:10	<--	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has quit (Quit: Computer has gone to sleep.)
2013-04-03 21:10:53	<--	Taneb (~nathan@host-92-30-189-164.as13285.net) has quit (Disconnected by services)
2013-04-03 21:11:19	-->	Taneb (~nathan@host-92-30-189-164.as13285.net) has joined #haskell
2013-04-03 21:11:26	-->	trescenzi (~trescenzi@2620:91:0:163:d3:28d0:6c72:db55) has joined #haskell
2013-04-03 21:12:57	-->	pricklypear (~pricklype@jpll.ost.sgsnet.se) has joined #haskell
2013-04-03 21:13:19	<--	Taneb (~nathan@host-92-30-189-164.as13285.net) has quit (Remote host closed the connection)
2013-04-03 21:13:20	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-04-03 21:13:27	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-03 21:13:59	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-04-03 21:14:10	-->	arpunk (~user@190.127.28.102) has joined #haskell
2013-04-03 21:14:11	<--	otend (~otend@2610:e0:a040:e0c5:9113:672a:ebe:be69) has quit (Ping timeout: 245 seconds)
2013-04-03 21:14:11	<--	Thomyho4 (~thomyho@mnhm-590c33cf.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-04-03 21:14:14	--	atriq is now known as Taneb
2013-04-03 21:14:32	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Client Quit)
2013-04-03 21:15:07	-->	Thomyho4 (~thomyho@mnhm-590c33cf.pool.mediaWays.net) has joined #haskell
2013-04-03 21:15:22	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-04-03 21:15:47	-->	tcsavage_ (~tcsavage@host86-129-254-251.range86-129.btcentralplus.com) has joined #haskell
2013-04-03 21:15:51	<--	trescenzi (~trescenzi@2620:91:0:163:d3:28d0:6c72:db55) has quit (Ping timeout: 245 seconds)
2013-04-03 21:16:02	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-04-03 21:16:11	-->	faen (frantk@fran.tk) has joined #haskell
2013-04-03 21:16:15	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-03 21:16:25	<--	tcsavage (~tcsavage@host86-147-148-232.range86-147.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-04-03 21:16:25	--	tcsavage_ is now known as tcsavage
2013-04-03 21:16:29	-->	plucas (~plucas@lawn-128-61-40-191.lawn.gatech.edu) has joined #haskell
2013-04-03 21:16:51	--	Taneb is now known as atriq
2013-04-03 21:16:56	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-04-03 21:17:00	<--	andrey013 (~chatzilla@95.73.233.33) has quit (Read error: Operation timed out)
2013-04-03 21:17:22	hseg	What could trip me up in trying to get Haskell to be portable?
2013-04-03 21:17:37	-->	andrey013 (~chatzilla@95.73.233.33) has joined #haskell
2013-04-03 21:18:10	<--	LimitSupremum (823ad8ed@gateway/web/freenode/ip.130.58.216.237) has quit (Quit: Page closed)
2013-04-03 21:18:30	edwardk	portable how?
2013-04-03 21:18:59	<--	Ghoul__ (uid6924@gateway/web/irccloud.com/x-uawxwhpssqhgrmoy) has quit (Ping timeout: 246 seconds)
2013-04-03 21:19:10	<--	PrO_OkI_ (uid4868@gateway/web/irccloud.com/x-vyuwcbwrqlurccmq) has quit (Ping timeout: 256 seconds)
2013-04-03 21:19:15	<--	UziMonkey__ (uid184@gateway/web/irccloud.com/x-ixkambgauevwleok) has quit (Ping timeout: 252 seconds)
2013-04-03 21:19:20	<--	strax_ (uid4099@gateway/web/irccloud.com/x-nkhgcrphwnnaymev) has quit (Ping timeout: 246 seconds)
2013-04-03 21:19:20	<--	si14 (uid2619@gateway/web/irccloud.com/x-vcvldplqhsbmtskf) has quit (Ping timeout: 246 seconds)
2013-04-03 21:19:30	danharaj	Cabal on windows uses appdata iirc.
2013-04-03 21:19:30	danharaj	(As does GHC?)
2013-04-03 21:19:38	<--	Shin-LaC (~LaC@acad55138.wireless.uic.edu) has quit (Quit: Computer has gone to sleep.)
2013-04-03 21:19:54	-->	patheticpat (patheticpa@unaffiliated/patheticpat) has joined #haskell
2013-04-03 21:19:58	<--	mattrepl (~mattrepl@SSID-MASON-SECURE-216.wireless.gmu.edu) has quit (Quit: mattrepl)
2013-04-03 21:20:02	<--	alexsuraci_ (uid1962@gateway/web/irccloud.com/x-xpotgiuotzlapjpc) has quit (Ping timeout: 246 seconds)
2013-04-03 21:20:09	<--	MOMI (uid4868@gateway/web/irccloud.com/x-gwzfjujqwapuuxfq) has quit (Ping timeout: 245 seconds)
2013-04-03 21:20:23	<--	akraut (uid3423@gateway/web/irccloud.com/x-rtaiqorjbrwskgdn) has quit (Ping timeout: 246 seconds)
2013-04-03 21:20:24	dcoutts	see System.Directory.getAppUserDataDirectory "foo"
2013-04-03 21:20:25	<--	mtlatif (uid10708@gateway/web/irccloud.com/x-etjujqzvfdnsvwhq) has quit (Ping timeout: 240 seconds)
2013-04-03 21:20:36	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 264 seconds)
2013-04-03 21:20:50	-->	hseg_ (d597308b@gateway/web/freenode/ip.213.151.48.139) has joined #haskell
2013-04-03 21:20:59	-->	folone_ (~folone@brln-4d0cce84.pool.mediaWays.net) has joined #haskell
2013-04-03 21:20:59	dcoutts	on windows that uses %appdata%/foo on unix it uses ~/.foo
2013-04-03 21:21:09	dcoutts	and cabal uses System.Directory.getAppUserDataDirectory "cabal"
2013-04-03 21:21:59	-->	tjohnson (~tjohnson@208.65.189.194) has joined #haskell
2013-04-03 21:21:59	-->	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has joined #haskell
2013-04-03 21:21:59	<--	gwern (~gwern@pool-108-48-209-65.washdc.east.verizon.net) has quit (Changing host)
2013-04-03 21:21:59	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-04-03 21:21:59	-->	nadirvardar (~nadirvard@208.74.181.201.static.etheric.net) has joined #haskell
2013-04-03 21:21:59	-->	jesyspa_ (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-04-03 21:21:59	<--	augustl (uid10075@gateway/web/irccloud.com/x-rcjjzcyuulohspru) has quit (Ping timeout: 276 seconds)
2013-04-03 21:21:59	hseg_	Hm. Is there any way that I can redirect that?
2013-04-03 21:22:08	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-04-03 21:22:41	-->	ketil_ (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-04-03 21:22:45	-->	gnuwilliam (~william@177.134.100.97) has joined #haskell
2013-04-03 21:22:58	<--	gnuwilliam (~william@177.134.100.97) has left #haskell
2013-04-03 21:23:06	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-04-03 21:23:18	darthdeus	guys, why am i getting this when i run "cabal haddock"? cabal: You need to re-run the 'configure' command. The version of Cabal being
2013-04-03 21:23:18	darthdeus	used has changed (was Cabal-1.16.0.1, now Cabal-1.14.0).
2013-04-03 21:23:33	dcoutts	hseg: for cabal or in general?
2013-04-03 21:23:38	--	irc: disconnected from server
2013-04-04 04:14:49	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-04 04:14:49	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-04 04:14:49	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-04 04:14:50	--	Nicks #haskell: [@ChanServ [[zz]] [mth] [swift]_ ]OLI[ __main__ __op _anona _d3f _flow_ _janne `0660 `bps `micro `nand` ab9rf absence acfoltzer Adeon adimit Adios adlan adnap aesptux afleckenstein aforemny AgentM agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator alejandrogomez alex`` alexander__b alexsuraci_ alios alkabetz alnix alpounet AmaBoten Amadiro amatsu amiller anachron anders^^ andrewsw aninhumer AntiSpamMeta apaku Apes araujo arbn arcatan args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur augustl averell Axman6 b52 b_jonas bananagram banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 ben ben_d bens bergey` betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe blz37 BMeph_ bobry bogner Boney Boreeas bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc_ byorgey ByronJohnson bytbox Cale caleb_9 caligula_ Canar canta canvon carlo_h ccasin ccxCZ cdh473 cdidd ceii celery__ centrinia Cerise certainty chance charlesofarrell chessguy chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra chupish ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmears cmsd2 cmsmcq cods coeus_ colah_ collin comak companion_cube conehead confound connelly coppro copumpkin cordawyn CosmicRa` Counter-Strike CoverSlide cow-orke1 crdueck cross crs_ Cryovat cschneid ctult ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danharaj danr darinmorrison dario DarkFox DarkLinkXXXX Dashkal davean davorak dawe dcoutts deavid Deewiant def-_ def-lkb dennda dented42 Derander descender dfletcher dgvncsz0f DigitalKiwi dilinger_ dixie djahandarie dju dkasak dlundy_ dmarker dmwit Dodek dolio DolphR domingo doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsadsdasd dsantiago DT` Dtgr duairc_ dumbhat DustyDingo Dybber dyreshark dysinger eacameron1 EarlGray earthy edeast edenc Eduard_Munteanu edwardk edwtjo Eelis eff ehamberg Eiam ejls eL_Bart0 electrogeek elgot Eliel elliott elliottcable em endojelly Enigmagic ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot ethercro1 ethercrow etrepum EvilPenguin eviltwin_ Excureo eyck f8 fabjan faen fairfieldt fall_ fayden fcr_ felipe_ fergusnoble fgomez fihi09 finnrobi fionnan FireFly fireglow fizbin flebron floatingman flori flux Fnar folone formalcow fosky fragamus freiksenet frio fro0t frontendloader froztbyte fry fryguybob ft Fubar^ Fuco FunkyDrummer Fuuzetsu FUZxxl fxr fxrh gbarboza gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gereedy gg7 ghorn Ghoul__ gienah Gilly glguy Gothmog_ Gracenotes greymalkin groovy3shoes gseitz_ gspr guampa guerrill1 Guest6687 Guest67399 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hamishmack hanDerPeder harrison heath Heffalump helgikrs Henesy henk Hermit hiptobecubic hiratara hiredman hiroaki hiroakip hiroyuki2 hive-mind homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack idnar idntfy ido idoru Igloo imphasing implr inr_ int-e integral_ Internet13 ion ique ironm isenmann iulian ivan\ ivan` ixian Jaak_ jabirali jackhill jacobw jaimef jamwt janluu JaRoel|4d jaroslaw jaspervdj Jaxan jayne jbauman jcao219 jcp|u jdoliner Jello_Raptor jercos Jesin jesyspa_ jfischoff jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jmelesky jml joachifm joar jocolloman jodaro joe9 JoeHazzers joeyh johnw jon-shape joneshf joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k0ral kadoban kaictl Kaidelong kakos kalven KaneTW kauschovar kcj Ke kennyd kennyp ketil_ kevinqcs kfish Khisanth kini Kinnison KitB_ kith kiwnix kkris klapaucius kloeri klugez kmels kmels_ kmicu Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kvda kvey kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard LeaChim lemao LeNsTR leoncamel2 leroux levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luisgabriel luite_ lunarjar lusory lzm m3ga Maarten_ machisuji_ magicman mahogny majoh maksbotan maltin mami mapf mapreduce marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn message144 MetaCosm meyersh mgsloan mhf miasma miclorb mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mizu_no_oto mjr841 MK_FG mlh mlinksva mm_freak_ mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom monqy moonlite_ mornfall morolin mortberg mrd mrko mrshoe mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b nade nadirvardar Nafai Nahra Nanar nardul narens Natch natechan natte ndngvr` necrobious neena netj neurocyte newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 Nimatek nimish nimred ninegrid ninly ninzine Nisstyre niteria nlogax no-n noam nobdraisentone noj Noldorin noplamodo normanrichards notdan noteventime NougatRillettes Nshag numeral nuncanada nus-- nuttycom nwf oax obcode ocharles ofan OlegYch opqdonut Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s_ ousado ozataman ozgura paddymahoney Paks pamojarpan Pantoufle ParahSail1n ParahSailin parcs PartyKat1e pcapriotti pdxleif peddie peltchu pepijndevos perlite petanqk peterhil pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1972 pigoz pikhq pkrnj plhk pnielsen popz pqmodn pr predator217 preflex prh pricklypear prinnysocks PrO_OkI_ profmakx prophile ps-auxw Ptival ptrf purefn purefn1 puzza007_ pyrtsa pyykkis_ qrlr quaestor quicksilver quuxman qwandor qwr qz r126l raek raid rainmaker Ralith Rarrikins_p Raynes Raynos Razz realnot redjohn reggie1 reiddrap- Rembane RenJuan rexamophone rfw rio Riussi rmunroe robawt robbe- robbert rofer roshan Rotaerk rs0 rsimoes ryanakca ryant5000 s00pcan S11001001 s4msung_ s_quark SaBer saep Sagi saiam Saizan sajith sambio sanemat saurik sawgij scgilardi schlumpi sclv Scott_firebeta Sculptor seats Sebastien-L SegFaultAX sellout- seq99` setmeaway2 Sgeo sgronblo_ sh shachaf shanse shepheb SHODAN shutdown_-h_now si14 simon___ simpson sipa sirchurchill sjl ski_ skp skyflash SLi sm smarter smokey991 so Soft sohum solancile solarus solirc sordina3 Sorella_ SoupE spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire statusfailed steez_ stelleg_ stepcut stephe stepkut strax_ stvc suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sw2wolf Swizec synonymous sysopfb tahu tamiko tanakh tanakh_ Tarential taruti tavelram tazjin td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas The_third_man theDon TheFuzzball theorbtwo TheRedMood thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome timemage tippenein tjohnson tkd tmiw TML tntc tobiassjosten tobym_ tom4939 tomaw tomboy66 tomejaguar tomh__ tomku tommd tomprince tootooroo ToRA Tordek trescenzi trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey Twisol tyler_ tzxn3 u_ Ulrar Urchin UziMonkey__ v v0|d Valodim vehk verrens Vertue vhz vikraman vili vmesoff vobi Volstvok Vorpal Vq vraid VZakharov_ wagle walter|r Walther warpy Watcher7 wchun wei2912 wereHamster whaletechno WhereIsMySpoon whoops williamhc Will| wjlroe wormphlegm wting wto wtw wumpus wunki x7 xaimus xcvii_ xenon21 xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl__ xrq xunatai xymox yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr zeep zeiris zenzike ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ zz_nh2 Zzompp]
2013-04-04 04:14:50	--	Channel #haskell: 1004 nicks (1 op, 0 halfops, 0 voices, 1003 normals)
2013-04-04 04:14:50	--	URL for #haskell: http://www.haskell.org/
2013-04-04 04:14:51	--	Mode #haskell [+CLcnpt]
2013-04-04 04:14:51	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-04 04:15:17	-->	gnuwilliam (~william@177.134.100.97) has joined #haskell
2013-04-04 04:15:51	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-04 04:16:00	<--	jmelesky (~jmelesky@173-164-68-213-Oregon.hfc.comcastbusiness.net) has quit (Quit: Leaving)
2013-04-04 04:16:13	-->	kaol (kaol@piperka.net) has joined #haskell
2013-04-04 04:16:23	Cale	Lazy I/O is not all that unpredictable, and it's not really all that bad in many cases. It's just when you want to have more control over resources (i.e. be concerned about the number of open filehandles for instance) or you really want to handle exceptions well that it really becomes a concern.
2013-04-04 04:17:14	Cale	If you're writing a program whose main business is opening one big file and doing something with the contents, or processing its standard input into some other form, it's not so bad.
2013-04-04 04:17:48	<--	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-04 04:18:00	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-04 04:18:14	-->	latro`a (~Ian@c-68-48-132-195.hsd1.md.comcast.net) has joined #haskell
2013-04-04 04:18:39	<--	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-04-04 04:19:07	<--	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has quit (Ping timeout: 264 seconds)
2013-04-04 04:20:17	<--	fgomez (~Fernando@uws07893usr.uws.ualberta.ca) has quit (Ping timeout: 255 seconds)
2013-04-04 04:20:22	Cale	In fact, jocolloman, you may like to know about interact
2013-04-04 04:20:24	Cale	:t interact
2013-04-04 04:20:27	lambdabot	(String -> String) -> IO ()
2013-04-04 04:20:33	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-04 04:20:42	<--	trescenzi (~trescenzi@2620:91:0:163:79fd:fd8c:bdab:981a) has quit (Remote host closed the connection)
2013-04-04 04:20:54	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-04-04 04:20:55	 *	hackagebot uuid 1.2.10 - For creating, comparing, parsing and printing Universally Unique Identifiers  http://hackage.haskell.org/package/uuid-1.2.10 (AntoineLatter)
2013-04-04 04:21:12	Cale	jocolloman: This produces a program which reads from stdin and writes a function of the input string to stdout, lazily
2013-04-04 04:21:38	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 04:21:41	jocolloman	Cale: Interesting I was unaware of interact
2013-04-04 04:21:53	<--	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has quit (Ping timeout: 240 seconds)
2013-04-04 04:22:29	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-04-04 04:22:29	--	stelleg_ is now known as stelleg_away
2013-04-04 04:23:39	<--	kvda (~kvda@unaffiliated/kvda) has quit (Quit: z____z)
2013-04-04 04:24:25	-->	mynetsurf (~mynetsurf@122.152.141.82) has joined #haskell
2013-04-04 04:24:40	<--	afleckenstein (~andrew@pool-108-28-125-168.washdc.fios.verizon.net) has quit (Quit: Lost terminal)
2013-04-04 04:24:55	-->	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has joined #haskell
2013-04-04 04:25:29	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-04 04:25:39	<--	augur (~augur@c-68-34-26-189.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-04 04:25:44	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-04-04 04:25:55	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-04-04 04:26:00	<--	darinmorrison (~dwm@unaffiliated/darinmorrison) has quit
2013-04-04 04:26:09	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-04-04 04:26:30	-->	synonymous1 (~Adium@149.171.141.40) has joined #haskell
2013-04-04 04:27:41	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-04-04 04:27:52	<--	edeast (~chatzilla@24.114.27.237) has quit (Ping timeout: 260 seconds)
2013-04-04 04:28:00	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-04-04 04:28:23	<--	synonymous (~Adium@sabado.cse.unsw.EDU.AU) has quit (Ping timeout: 255 seconds)
2013-04-04 04:29:49	-->	dysinger_ (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-04-04 04:30:45	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-04 04:31:15	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-04 04:31:35	-->	trescenzi (~trescenzi@2620:91:0:163:bd6c:7346:bf2c:8647) has joined #haskell
2013-04-04 04:32:07	-->	igstan (~igstan@89.36.11.207) has joined #haskell
2013-04-04 04:32:18	<--	igstan (~igstan@89.36.11.207) has quit (Client Quit)
2013-04-04 04:32:32	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-04-04 04:32:32	--	dysinger_ is now known as dysinger
2013-04-04 04:33:02	<--	trescenzi (~trescenzi@2620:91:0:163:bd6c:7346:bf2c:8647) has quit (Remote host closed the connection)
2013-04-04 04:33:22	--	jesyspa_ is now known as jesyspa
2013-04-04 04:34:43	<--	fro0t (~fro0t@1.23.64.147) has quit (Ping timeout: 245 seconds)
2013-04-04 04:36:42	<--	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 264 seconds)
2013-04-04 04:38:36	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-04-04 04:38:56	<--	[swift]_ (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Remote host closed the connection)
2013-04-04 04:38:59	-->	path[l] (~vsi@173.252.71.129) has joined #haskell
2013-04-04 04:39:01	--	stelleg_away is now known as stelleg_
2013-04-04 04:41:03	<--	natechan (~natechan@c-71-56-124-186.hsd1.ga.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-04-04 04:41:08	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-04-04 04:43:51	-->	kristof (~saposcat@225.212-62-69.ftth.swbr.surewest.net) has joined #haskell
2013-04-04 04:43:52	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-04 04:44:05	kristof	Have any of you guys ever wished for first-class types, and with good reason?
2013-04-04 04:44:17	kristof	Not just talking about type instances
2013-04-04 04:44:19	shachaf	I've wished for it with bad reason.
2013-04-04 04:44:23	shachaf	Does that count?
2013-04-04 04:44:25	dmwit	See also: agda.
2013-04-04 04:44:30	kristof	shachaf: no
2013-04-04 04:44:36	kristof	I'm just wondering, out of curiousity.
2013-04-04 04:44:44	kristof	*curiosity
2013-04-04 04:44:56	Cale	kristof: What do you mean by first class types?
2013-04-04 04:45:02	<--	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has quit (Ping timeout: 255 seconds)
2013-04-04 04:45:03	kristof	Cale: I mean types as first class citizens.
2013-04-04 04:45:06	Cale	Dependent types?
2013-04-04 04:45:21	kristof	Dependent types are a great way of introducing first class types, but that's not necessarily the same.
2013-04-04 04:45:29	kristof	I'm just talking about first class types in general.
2013-04-04 04:45:33	<--	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has quit (Quit: hello)
2013-04-04 04:45:52	<--	fizbin (~dtm@pool-173-72-88-179.cmdnnj.east.verizon.net) has quit (Quit: Lost terminal)
2013-04-04 04:45:57	-->	trescenzi (~trescenzi@2620:91:0:163:c86c:4d18:b6d3:1663) has joined #haskell
2013-04-04 04:46:21	kristof	I was thinking, and my non-rigorous academic background is probably faulting enough so that this would never work, but I was thinking about a scenario in which "dirty" types could be generated in haskell during runtime.
2013-04-04 04:46:22	cmccann	kristof: I think that's too much generality to remark on
2013-04-04 04:46:28	kristof	cmccann: Probably.
2013-04-04 04:46:35	<--	trescenzi (~trescenzi@2620:91:0:163:c86c:4d18:b6d3:1663) has quit (Remote host closed the connection)
2013-04-04 04:46:36	Cale	I'm not sure what kind of type system you're thinking of
2013-04-04 04:47:00	cmccann	I'm not seeing what wouldn't be covered under dependent types, stuff like Data/Typeable, or type-level computation like type families
2013-04-04 04:47:02	<--	joe9 (~user@c-71-236-20-61.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-04 04:47:35	dmwit	What is a dirty type?
2013-04-04 04:47:44	Cale	Yeah, that's a decent question :)
2013-04-04 04:47:51	kristof	Anyway, the same way that Haskell separates side effects and purity through the use of monads, "dirty" types could be omitted from Hindley-Milner checking during compilation
2013-04-04 04:48:04	kristof	Simply because first class types ruin HM in general
2013-04-04 04:48:08	Cale	You can already, via polymorphic recursion, have programs which use values of infinitely many types at runtime.
2013-04-04 04:48:09	kristof	Am I correct?
2013-04-04 04:48:17	Cale	(In Haskell 98 even)
2013-04-04 04:48:43	kristof	Polymorphic recursion is not quite the same thing as generating a new type sometime during execution.
2013-04-04 04:48:49	cmccann	GHC haskell long since gave up on all types being inferable
2013-04-04 04:49:17	sproingie	isn't it effectively the halting problem?
2013-04-04 04:49:18	kristof	It still uses the HM type inference algorithm during compile-time, though
2013-04-04 04:49:35	 *	elliott doesn't understand kristof's goals.
2013-04-04 04:49:38	kristof	I'm sorry, I'm all over the place
2013-04-04 04:49:42	Cale	kristof: Types are properties of the program which are verified at compile time.
2013-04-04 04:49:52	kristof	You're right, I don't understand my goals either
2013-04-04 04:49:55	kristof	Cale: In Haskell.
2013-04-04 04:50:07	Cale	Well...
2013-04-04 04:50:09	cmccann	kristof: you probably have a potentially well-defined idea that you don't have the background knowledge to explain clearly :P
2013-04-04 04:50:13	-->	trescenzi (~trescenzi@2620:91:0:163:8cf:e271:6b1a:34c9) has joined #haskell
2013-04-04 04:50:18	sproingie	ghc is the perl regex of type systems :)
2013-04-04 04:50:28	kristof	cmccann: No, I don't think it's well-defined at all, and I most certainly don't have the necessary knowledge.
2013-04-04 04:50:40	kristof	Essentially, the only thing I'm trying to talk about is first-class types.
2013-04-04 04:50:43	Cale	I guess you can redefine what types are, but then you start having to ask why use the word "type" at all.
2013-04-04 04:50:45	sproingie	abuseable in so many happy fun evil ways
2013-04-04 04:50:48	pdxleif	kristof: Check out idris - it looks almost just like haskell, but types are first-class values (no seperate namespaces for types and values)
2013-04-04 04:50:52	kristof	Which dynamic languages have because an untyped lambda calculus can do that.
2013-04-04 04:51:01	kristof	pdxleif: Statically typed:
2013-04-04 04:51:04	kristof	*?
2013-04-04 04:51:12	kristof	I think I've heard of it
2013-04-04 04:51:12	sproingie	pdxleif: i imagine it drops the uppercase-for-types thing then?
2013-04-04 04:51:29	pdxleif	Yep
2013-04-04 04:51:38	kristof	pdxleif: I'll look that up, thank you.
2013-04-04 04:51:44	Cale	uh, no
2013-04-04 04:51:50	sproingie	interesting.  how's idris's runtime performance?
2013-04-04 04:51:52	Cale	Constructors are still uppercase
2013-04-04 04:51:57	Cale	in idris
2013-04-04 04:52:03	-->	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has joined #haskell
2013-04-04 04:52:03	<--	Heero (~Heero@c-98-245-11-181.hsd1.co.comcast.net) has quit (Changing host)
2013-04-04 04:52:03	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-04-04 04:52:07	kristof	I guess what brought this on was that I was thinking about what makes macros nonexistant in Haskell.
2013-04-04 04:52:12	pdxleif	data Person = mkPerson String Int
2013-04-04 04:52:18	Cale	kristof: They exist
2013-04-04 04:52:23	Cale	kristof: See Template Haskell
2013-04-04 04:52:23	dmwit	kristof: idris is just another dependently-typed language. So if you know what dependent types are, and find them lacking compared to your wild imagination, I doubt you will be satisfied with idris.
2013-04-04 04:52:24	cmccann	idris is dependently typed but not trying to be a theorem prover, or something like that, right?
2013-04-04 04:52:24	kristof	Cale: Not in the LISP sense
2013-04-04 04:52:30	sproingie	kristof: TH has macros
2013-04-04 04:52:30	Cale	kristof: See Template Haskell
2013-04-04 04:52:33	kristof	Cale: Template Haskell is only close, as far as I know
2013-04-04 04:52:38	Cale	No, it's macros
2013-04-04 04:52:38	kristof	...but you guys probably know more.
2013-04-04 04:52:40	kristof	Okay.
2013-04-04 04:52:41	dmwit	kristof: (Have you said yet what it is about dependent typing that doesn't live up to your imagination, by the way?)
2013-04-04 04:52:46	cmccann	TH suffers more from Haskell's syntax than its type system.
2013-04-04 04:53:05	sproingie	i've yet to find someone who professes unqualified love for TH
2013-04-04 04:53:18	Cale	Yeah, people don't use TH except when they really really need to because Haskell's syntax is complicated, so generating it at compile time can be sort of awkward.
2013-04-04 04:53:19	kristof	dmwit: I like static typing. And dependent typing messes with HM. My imagination is not a good standard to judge by, in any case.
2013-04-04 04:53:26	<--	mynetsurf (~mynetsurf@122.152.141.82) has quit
2013-04-04 04:53:27	pdxleif	He just gave some lectures on it recently - http://edwinb.wordpress.com/blog/
2013-04-04 04:53:28	simpson	sproingie: Well, they should obviously be importing it qualified. :3
2013-04-04 04:53:31	Cale	But apart from that, it's the exact same idea :P
2013-04-04 04:53:41	sproingie	simpson: Joke.drumfill
2013-04-04 04:53:48	dmwit	kristof: Depedent types are static. Although HM doesn't work as-is, there is still a lot of inference that can be done.
2013-04-04 04:54:00	<--	mhf (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-04 04:54:00	pdxleif	But basically, cabal install idris, then the "idris" command is the equivalent of ghc / ghci
2013-04-04 04:54:15	Cale	kristof: Just about any meaningful extension of HM tends to lose type inference.
2013-04-04 04:54:18	kristof	dmwit: But is there necessarily type-safety? Dependently typed systems can also suffer from a lot of type complexity.
2013-04-04 04:54:26	Cale	kristof: Haskell 98 doesn't even have complete type inference
2013-04-04 04:54:28	cmccann	dmwit: and your second sentence is also true of GHC Haskell
2013-04-04 04:54:34	Cale	(because of type classes)
2013-04-04 04:54:40	kristof	Hmm.
2013-04-04 04:54:41	kristof	I see.
2013-04-04 04:54:51	shachaf	Cale: And polymorphic recursion.
2013-04-04 04:54:57	Cale	Indeed!
2013-04-04 04:54:59	dmwit	kristof: Yes, dependent types are necessarily type-safe. If the compiler accepts your program, it will never go wrong at runtime.
2013-04-04 04:55:12	kristof	I've just been interested in type systems lately, but I don't have that computer scientist background to talk about it. I'm just a mathematician.
2013-04-04 04:55:13	pdxleif	sproingie: I think ranging from a couple times slower to horribly slower than GHC, at the moment.  But he says he thinks it can beat GHC in the future, taking advantage of the extra type information it has to morph execution, etc.
2013-04-04 04:55:27	Cale	kristof: What kind of mathematics? :)
2013-04-04 04:55:35	pdxleif	C backend, w/ recently added Java & JavaScript backends.
2013-04-04 04:55:39	shachaf	dmwit: All you need to do is define "going wrong" as a type error!
2013-04-04 04:55:59	 *	cmccann defines puns as a type error
2013-04-04 04:56:01	kristof	Cale: Mathematical analysis, mostly. But I like like like abstract algebra, and I've, er, been afraid of but wanting to touch on topology as of late
2013-04-04 04:56:20	Cale	kristof: Are you aware of Voevodsky's program, and homotopy type theory?
2013-04-04 04:56:30	kristof	Cale: Neither!
2013-04-04 04:56:37	cmccann	kristof: that's no worse of a starting point for type theory than many branches of computer science
2013-04-04 04:56:37	sproingie	pdxleif: huh, i ought to check it out sometime.  'course, i barely understand *haskell* as it is
2013-04-04 04:56:38	Cale	http://homotopytypetheory.org/
2013-04-04 04:57:04	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-04-04 04:57:07	pdxleif	It's just like haskell, only w/out the cool parts like laziness and type inference.  woo
2013-04-04 04:57:14	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-04-04 04:57:19	sproingie	no type inference?  ow.
2013-04-04 04:57:47	pdxleif	But the compiler can assert that your programs will terminate and not crash.
2013-04-04 04:57:50	kristof	cmccann: Computer science with an emphasis on formal logic and type-theory is probably the best bounding point, I'd think.
2013-04-04 04:58:04	kristof	LISP is based off of the untyped lamda calculus, isn't it?
2013-04-04 04:58:09	cmccann	well yes having a background in type theory is a good place to start from when learning type theory :P
2013-04-04 04:58:12	Cale	kristof: It turns out that Martin-Löf's type system, which was originally constructed from a computational viewpoint can also be interpreted as a system for describing homotopy types.
2013-04-04 04:58:13	sproingie	pdxleif: i thought that was basically impossible for any turing-complete language
2013-04-04 04:58:23	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-04 04:58:29	kristof	Cale: But what's Veovodsky's program?
2013-04-04 04:58:32	stelleg_	sproingie: it is impossible for any turing-complete language
2013-04-04 04:58:36	cmccann	sproingie: turing completeness is overrated
2013-04-04 04:58:39	kristof	oh, it's in there
2013-04-04 04:58:42	Cale	kristof: To use this as a foundations for mathematics :)
2013-04-04 04:58:45	kristof	Cale: Just saw the word
2013-04-04 04:58:56	elliott	depending on your definition of "turing complete"
2013-04-04 04:59:03	stelleg_	see: the halting problem
2013-04-04 04:59:09	cmccann	kristof: and yes, lisps are basically untyped lambda calculus with a few extra bits
2013-04-04 04:59:10	elliott	these languages are not turing complete in the same way haskell cannot do io
2013-04-04 04:59:13	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-04-04 04:59:14	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-04-04 04:59:24	elliott	yet you can easily make such a language that lets you write programs that run forever, just as haskell allows you to do IO
2013-04-04 04:59:27	pdxleif	sproingie: Yeah.  If you stay withing a subset, it can prove things terminate. If you wander outside that, it says "Possible non-termination due to non-decreasing condition in recursion of foo", or something.
2013-04-04 04:59:27	 *	geekosaur is misreading that as Voivodski's program and being amused
2013-04-04 04:59:47	cmccann	elliott: you can also easily write a program that provably halts in a time that vastly exceeds the lifespan of the hardware running it
2013-04-04 05:00:02	elliott	cmccann: sure. but it's good as a proof!
2013-04-04 05:00:18	Cale	So, you can classify homotopy types into levels, where h-level 0 consists of just the contractible space, and then h-level k+1 consists of all the spaces where the space of paths between any pair of points is h-level k
2013-04-04 05:00:24	--	preflex_ is now known as preflex
2013-04-04 05:00:42	sproingie	pdxleif: hm, so as a corollary to proving things halt, i guess such a system could prove that things halt within X amount of time?  could have interesting consequences for realtime
2013-04-04 05:00:47	cmccann	computers aren't real turing machines anyway
2013-04-04 05:00:47	Cale	kristof: and so then h-level 1 consists of the empty space and the contractible space (which can be thought of as truth values)
2013-04-04 05:00:53	elliott	cmccann: it would be interesting to have a language where, not only is it total, but it can only express things below a certain O() or something
2013-04-04 05:00:57	cmccann	they're just finite state machines putting on airs
2013-04-04 05:01:01	elliott	cmccann: but, not in an ad hoc way.
2013-04-04 05:01:10	kristof	Cale: Wait, the empty space and contractible space are thought of as truth values?
2013-04-04 05:01:10	elliott	like, you'd get some kind of weaker form of induction for your types, or something.
2013-04-04 05:01:14	Cale	kristof: and h-level 2 consists of spaces where for any two points, there's either a unique path between them, or no path
2013-04-04 05:01:16	elliott	substructural mumble mumble
2013-04-04 05:01:18	cmccann	elliott: regular expressions? :P
2013-04-04 05:01:22	elliott	this is kind of -blah I guess.
2013-04-04 05:01:23	Cale	kristof: Yeah, like 0 and 1 :)
2013-04-04 05:01:25	elliott	cmccann: with types!!
2013-04-04 05:01:33	pdxleif	sproingie: Hmm... I guess it could keep track of the algorithmic complexity of operations?
2013-04-04 05:01:35	cmccann	oh man static typed regexps that would be great
2013-04-04 05:01:55	<--	noteventime (~user@c83-253-73-118.bredband.comhem.se) has quit (Ping timeout: 260 seconds)
2013-04-04 05:01:57	Cale	(a space with no points, and a space with essentially a unique point, up to homotopy)
2013-04-04 05:02:19	kristof	Cale: Sorry, reading your first comment again. Just wrapping my mind around the relationships between an h-level k and an h-level k+1
2013-04-04 05:02:31	ab9rf	static type regular expressions?
2013-04-04 05:02:45	pdxleif	The author said it can delete chunks of code it know won't run, which actually speeds up compilation, cause it doesn't have to generate code for those parts.
2013-04-04 05:02:48	Cale	kristof: So, h-level 2 is like sets (of contractible components)
2013-04-04 05:02:50	-->	andrew` (~user@2620:91:0:163:dc40:db04:fe41:f2a2) has joined #haskell
2013-04-04 05:02:50	kristof	Cale: Does this relate to categories, in a way?
2013-04-04 05:03:03	<--	andrew` (~user@2620:91:0:163:dc40:db04:fe41:f2a2) has quit (Client Quit)
2013-04-04 05:03:03	Cale	kristof: and then h-level 3 is essentially like groupoids :)
2013-04-04 05:03:05	kristof	I mean, I think it should, but I'm wondering what that relationship might look like
2013-04-04 05:03:17	kristof	oh
2013-04-04 05:03:18	cmccann	elliott: anyway, you almost get something like that automatically with linear types because you basically can't manufacture more data than you're given
2013-04-04 05:03:22	kristof	oh it's starting to make sense
2013-04-04 05:03:30	cmccann	but that doesn't really get you to expressing actual complexity bounds
2013-04-04 05:03:37	kristof	Cale: Wait, so wouldn't that make this more general then categories?
2013-04-04 05:03:37	cmccann	but maybe something similar?
2013-04-04 05:04:07	sproingie	what's more general than categories?
2013-04-04 05:04:11	Cale	kristof: Well, it's perhaps a nice foundational place to build category theory in.
2013-04-04 05:04:16	-->	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-04-04 05:04:17	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-04 05:04:18	kristof	Right
2013-04-04 05:04:22	ab9rf	sproingie: categories?
2013-04-04 05:04:24	shachaf	sproingie: You misunderstand. It'd make it more general, and then categories.
2013-04-04 05:04:34	sproingie	ohhhhh
2013-04-04 05:04:35	Cale	kristof: which also in some way naturally captures logic and set theory
2013-04-04 05:04:37	kristof	sproingie: So that's the answer to your question. H-levels are.
2013-04-04 05:04:45	kristof	Cale: That's really profound, though
2013-04-04 05:04:58	sproingie	shachaf: commas, they're your friend :)
2013-04-04 05:04:59	elliott	cmccann: right
2013-04-04 05:05:06	elliott	cmccann: that's what substructural mumble mumble meant.
2013-04-04 05:05:33	Cale	kristof: and so the really cool thing about this system is that every mathematical statement you make, corresponds to a space, and the truth of that statement corresponds to that space having a point
2013-04-04 05:06:01	kristof	Cale: What do you mean by statement?
2013-04-04 05:06:29	-->	flra (~alexandru@79.114.99.138) has joined #haskell
2013-04-04 05:06:30	-->	joneshf-laptop (~joneshf@c-98-208-37-38.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 05:06:37	Cale	Well, this system they're working on is not unlike first-order logic, with some tweaks.
2013-04-04 05:06:43	<--	flra (~alexandru@79.114.99.138) has quit (Max SendQ exceeded)
2013-04-04 05:06:52	Cale	The types look quite a lot like first order logic statements
2013-04-04 05:06:53	cmccann	elliott: yeah and I'm really not sure where to go from there
2013-04-04 05:06:58	<--	gnuwilliam (~william@177.134.100.97) has quit (Quit: gnuwilliam)
2013-04-04 05:07:05	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-04-04 05:07:11	elliott	cmccann: I guess you'll have to not do that work for me, then.
2013-04-04 05:07:18	kristof	Oh, I see
2013-04-04 05:07:21	kristof	Is there a paper on this?
2013-04-04 05:07:27	<--	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has quit (Client Quit)
2013-04-04 05:07:28	-->	flra (~alexandru@79.114.99.138) has joined #haskell
2013-04-04 05:07:34	cmccann	elliott: I'll put that on my list with all the other stuff I'm not doing for people
2013-04-04 05:07:37	kristof	Cale: Or should I just browse this site a bit?
2013-04-04 05:07:45	kristof	Oh. "The Book".
2013-04-04 05:07:46	-->	gbeshers (~gbeshers@pool-108-12-219-139.prvdri.fios.verizon.net) has joined #haskell
2013-04-04 05:07:47	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-04-04 05:07:52	Cale	With 'and' corresponding to a Cartesian product of spaces, and 'or' corresponding to disjoint union, and 'forall x:A. P(x)' corresponding to a space of fibrations over A
2013-04-04 05:08:24	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-04-04 05:08:55	kristof	I see
2013-04-04 05:09:00	kristof	So what are some applications of this?
2013-04-04 05:09:07	Cale	kristof: and the proofs of the statements are terms in this type system which can also be thought of as programs :)
2013-04-04 05:09:22	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-04-04 05:09:27	kristof	Cale: http://golem.ph.utexas.edu/category/2013/03/category_theory_in_homotopy_ty.html#more
2013-04-04 05:09:28	Cale	(in addition to being points in these spaces)
2013-04-04 05:09:48	<--	luisgabriel (~luisgabri@177.206.180.234.dynamic.adsl.gvt.net.br) has quit (Quit: Konversation terminated!)
2013-04-04 05:09:59	kristof	This is kind of what I was asking
2013-04-04 05:10:26	Cale	Immediate applications? I don't know, but it seems really nice. Certainly Martin-Löf type theory has a lot of features which might be interesting to put into practical programming languages.
2013-04-04 05:10:41	kristof	Aaaah, this is very cool stuff
2013-04-04 05:10:45	Cale	(It's a dependently typed system)
2013-04-04 05:10:55	-->	applicative_ (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has joined #haskell
2013-04-04 05:10:58	kristof	Oh, that reminds me, I need to venture off and research a bit on Idris
2013-04-04 05:11:00	<--	mapreduce (~ricky@varenka.cime.net) has quit (Remote host closed the connection)
2013-04-04 05:11:16	-->	Philonous_ (~Philonous@dslb-178-005-141-198.pools.arcor-ip.net) has joined #haskell
2013-04-04 05:11:41	<--	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-04 05:11:42	Cale	Under "Links" on that site I linked, there's a talk by Awodey and one by Voevodsky which are pretty good, right at the top of the list of links.
2013-04-04 05:11:44	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 05:11:49	-->	g3r (~germanp@181.47.148.80) has joined #haskell
2013-04-04 05:12:06	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 05:12:07	Cale	and... there was another video which is a nice introduction to the sort of things which are being considered
2013-04-04 05:12:33	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 05:12:36	Cale	http://math.andrej.com/2011/12/07/hott-equivalences/
2013-04-04 05:12:37	jfischoff	I'm surprised there isn't a Haskell ADT for the llvm language, or is there and I am missing it somehow?
2013-04-04 05:12:51	-->	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has joined #haskell
2013-04-04 05:13:01	applicative_	theres the llvm library
2013-04-04 05:13:14	Cale	^^ that video may not make perfect sense straight away, but it's actually a fun introduction even if you don't understand quite what the rules of the game being played are
2013-04-04 05:13:24	<--	gg7 (~gg7@unaffiliated/gg7) has quit (Ping timeout: 240 seconds)
2013-04-04 05:13:44	-->	ajhager (~ajhager@108-71-214-22.lightspeed.iplsin.sbcglobal.net) has joined #haskell
2013-04-04 05:14:15	<--	Tarential (~Tarential@li472-156.members.linode.com) has quit (Excess Flood)
2013-04-04 05:14:17	jfischoff	applicative_: which I still getting my head around, but it doesn't seem to have an ADT for the language, but perhaps it offers equivalent power through its interface?
2013-04-04 05:14:33	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-04-04 05:14:36	-->	Tarential (~Tarential@li472-156.members.linode.com) has joined #haskell
2013-04-04 05:14:52	<--	carlo_h (~carlo@a82-29.nat.uq.edu.au) has quit (Quit: Ex-Chat)
2013-04-04 05:14:54	-->	BobFunk_ (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 05:15:00	<--	Philonous (~Philonous@dslb-178-000-238-223.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-04-04 05:15:33	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-04-04 05:15:40	<--	cmsmcq (~cmsmcq@65.19.20.185) has quit (Quit: I'm so ... sleeeepy.)
2013-04-04 05:15:42	-->	edeast (~chatzilla@24.114.27.243) has joined #haskell
2013-04-04 05:15:45	applicative_	http://hackage.haskell.org/packages/archive/llvm/3.0.1.0/doc/html/LLVM-Core.html seems to throw around the language of an ADT.
2013-04-04 05:15:53	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-04-04 05:16:16	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-04-04 05:16:39	Cale	kristof: Oh, I also wanted to say, one of the goals is to construct a foundation for mathematics which wouldn't be so awkward for mathematicians to actually translate things into in practice. Everyone pays lip service to ZFC, but very few people actually translate everything into a form where it could be machine checked.
2013-04-04 05:16:48	-->	cmsmcq (~cmsmcq@65.19.20.185) has joined #haskell
2013-04-04 05:17:05	applicative_	 I'm only familiar with it from once having built Lennart A.s Basic DSL
2013-04-04 05:17:41	cmccann	applicative_: clearly one of the best DSLs ever devised
2013-04-04 05:18:07	kristof	Cale: "I'm going to talk logic, BUT I'm going to write geometry."
2013-04-04 05:18:18	Cale	:)
2013-04-04 05:18:20	kristof	I don't know why, that made me chuckle
2013-04-04 05:18:36	kristof	Cale: ZFC?
2013-04-04 05:18:44	-->	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has joined #haskell
2013-04-04 05:18:50	Cale	Zermelo-Frankel set theory with Choice
2013-04-04 05:18:56	kristof	Ah
2013-04-04 05:19:02	kristof	For... stuff like origin machines?
2013-04-04 05:19:04	Cale	Fraenkel
2013-04-04 05:19:10	kristof	Or am I misinterpreting what you mean by choice
2013-04-04 05:19:13	jfischoff	applicative_: its different then the llvm doc
2013-04-04 05:19:13	kristof	*oracle machines
2013-04-04 05:19:15	<--	EvilPenguin (~EvilPengu@174-28-72-209.albq.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-04-04 05:19:15	Cale	The axiom of choice
2013-04-04 05:19:22	kristof	Oh, that one :P
2013-04-04 05:20:07	Cale	i.e. that the Cartesian product of any family of nonempty sets is nonempty
2013-04-04 05:20:08	<--	dmarker (~dmarker@inet-hqmc02-o.oracle.com) has quit (Remote host closed the connection)
2013-04-04 05:20:11	kristof	Cale: It's funny how computer science is the one field where you get hackers and mathematicians in the same major
2013-04-04 05:20:14	-->	dmarker (~dmarker@inet-hqmc02-o.oracle.com) has joined #haskell
2013-04-04 05:20:15	ab9rf	applicative_: LLVM has an ADT for its IR, but that doesn't necessarily relate closely to any common programminng language
2013-04-04 05:20:24	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 05:20:25	ab9rf	kristof: music
2013-04-04 05:20:40	kristof	ab9rf: There's that, too.
2013-04-04 05:20:42	-->	chatsiri_ (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-04 05:20:48	<--	edeast (~chatzilla@24.114.27.243) has quit (Ping timeout: 256 seconds)
2013-04-04 05:21:11	applicative_	ab9rf: yeah,  I was wondering, not knowing anything about llvm
2013-04-04 05:21:11	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-04 05:21:14	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-04-04 05:21:23	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Remote host closed the connection)
2013-04-04 05:22:20	 *	applicative_ is still recovering from a bunch of lectures of Martin Lof last week. 
2013-04-04 05:22:28	ab9rf	applicative_: normally if you are going to target LLVM you will generate a language-specific ADT from your parser, then transform that into LLVM's IR ADT
2013-04-04 05:22:32	Nafai	Kinnison used LLVM in his BF interpreter in this video http://www.youtube.com/watch?v=G8WW3bGIZFc made me want to look into LLVM more
2013-04-04 05:22:45	-->	Zeev (~Zeev@bzq-79-180-13-78.red.bezeqint.net) has joined #haskell
2013-04-04 05:23:26	<--	jocolloman (~jocolloma@c-68-35-135-154.hsd1.nm.comcast.net) has quit (Quit: Leaving)
2013-04-04 05:23:36	-->	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-04-04 05:23:39	<--	EarlGray (~mitra@195.20.154.2) has quit (Remote host closed the connection)
2013-04-04 05:23:57	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-04-04 05:24:01	-->	j2j (~Thunderbi@96.242.118.105) has joined #haskell
2013-04-04 05:25:23	ab9rf	applicative_: i'm slowly writing a couple of language parsers in haskell, and i will probably end up playing with LLVM at some point
2013-04-04 05:25:44	jfischoff	so there isn't an ADT version of the store instruction
2013-04-04 05:25:48	jfischoff	but there is http://hackage.haskell.org/packages/archive/llvm/3.0.1.0/doc/html/LLVM-Core.html#v:store
2013-04-04 05:25:54	<--	tjohnson (~tjohnson@c-24-21-125-126.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-04-04 05:26:14	jfischoff	but you have to actually give a memory location from your Haskell program
2013-04-04 05:26:39	ab9rf	jfischoff: IDStore?
2013-04-04 05:26:43	 *	sw2wolf the LLVM xmonad works very well ...
2013-04-04 05:26:51	jfischoff	ab9rf: oh!
2013-04-04 05:26:54	<--	kristof (~saposcat@225.212-62-69.ftth.swbr.surewest.net) has left #haskell
2013-04-04 05:27:08	jfischoff	there we go mystery solved
2013-04-04 05:27:22	ab9rf	jfischoff: the hackage docs are a bit sparse, you really need to refer to LLVM's own documentation
2013-04-04 05:27:35	Cale	kristof: Of course, functional programmers are all applied logicians who spend all their time proving boring theorems in interesting ways in an inconsistent intuitionist logic.
2013-04-04 05:27:55	jfischoff	ab9rf: I used a case sensitive search
2013-04-04 05:27:56	cmccann	Cale: that's a good summary.
2013-04-04 05:27:56	ab9rf	Cale: you say that like it's a bad thing
2013-04-04 05:28:00	ab9rf	jfischoff: heh
2013-04-04 05:28:10	Cale	ab9rf: I didn't say it was a bad thing :)
2013-04-04 05:28:15	jfischoff	I knew I was missing something :p
2013-04-04 05:29:02	-->	peterhil (~peterhil@91-157-48-10.elisa-laajakaista.fi) has joined #haskell
2013-04-04 05:29:14	shachaf	Cale: Even the dependent-type functional programmers?
2013-04-04 05:29:15	jfischoff	ab9rf: have you seen Lennarts blog intro. Its pretty cool.
2013-04-04 05:29:19	sw2wolf	@hoogle llvm
2013-04-04 05:29:19	lambdabot	package llvm
2013-04-04 05:29:19	lambdabot	package llvm-extra
2013-04-04 05:29:19	lambdabot	package llvm-ht
2013-04-04 05:29:35	ab9rf	jfischoff: no, i've only read a couple of blog articles about llvm
2013-04-04 05:29:52	jfischoff	http://augustss.blogspot.com/2009/01/llvm-llvm-low-level-virtual-machine-is.html
2013-04-04 05:29:58	Cale	shachaf: Well, those guys often work in consistent intuitionist logics -- at least, the ones who are willing to give up Turing completeness.
2013-04-04 05:30:22	<--	__op (~cyril@ppp-seco11pa2-46-193-137.56.wb.wifirst.net) has quit (Quit: Quitte)
2013-04-04 05:30:26	<--	BobFunk_ (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-04-04 05:32:08	cmccann	pf, it's not like you can't translate any potentially non-terminating computation into one that's productively corecursive
2013-04-04 05:32:22	cmccann	it just may never produce anything interesting before you get tired of checking
2013-04-04 05:32:25	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-04 05:32:25	<--	trescenzi (~trescenzi@2620:91:0:163:8cf:e271:6b1a:34c9) has quit (Remote host closed the connection)
2013-04-04 05:32:50	-->	meiji11 (~user@d75-158-41-148.abhsia.telus.net) has joined #haskell
2013-04-04 05:33:07	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-04-04 05:33:35	ab9rf	jfischoff: hadn't seen this.  thanks.
2013-04-04 05:33:36	<--	sw2wolf (~czsq888@222.209.240.237) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-04 05:33:53	hpaste	a pasted “HiLo” at http://hpaste.org/85132
2013-04-04 05:34:03	applicative_	ab9rf: jfischoff well, your task is in any case to get the Basic package to build again...  I want to write haskell like this ^^^
2013-04-04 05:34:12	hpaste	“jfischoff are you happy now edwardk?” pasted “ghci crash” at http://hpaste.org/85133
2013-04-04 05:34:40	jfischoff	any idea how to prevent that ^^^?
2013-04-04 05:34:55	-->	kmrhb (~kmrhb@dsl-216-221-57-53.mtl.aei.ca) has joined #haskell
2013-04-04 05:35:10	jfischoff	mind you I have two versions of llvm. The llvm package was built against 3.0 and ghc against 3.2
2013-04-04 05:35:23	ab9rf	applicative_: i'm actually working on a Dartmouth BASIC interpreter :)
2013-04-04 05:35:37	jfischoff	applicative_: do you remember why it stopped working?
2013-04-04 05:35:47	<--	meiji11 (~user@d75-158-41-148.abhsia.telus.net) has left #haskell
2013-04-04 05:35:51	-->	neutrality (~user@cpe-108-182-36-141.nyc.res.rr.com) has joined #haskell
2013-04-04 05:35:55	ab9rf	applicative_: but actually writing it within Haskell syntax, probably not going to work :)
2013-04-04 05:36:18	 *	applicative_ tries to figure out what lennart's Num instance can be, for those monadic line numbers
2013-04-04 05:37:32	applicative_	jfischoff: I don't remember it was a while ago I tried it.  It may be mostly haskell-internal problems, like the one his python dsl had with ImpredicativeTypes
2013-04-04 05:37:38	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-04 05:37:45	napping	this looks bad: http://hpaste.org/85134
2013-04-04 05:37:54	<--	circle (~circle@203-219-13-238.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-04-04 05:39:04	jfischoff	applicative_: it would be cool to get that working
2013-04-04 05:39:42	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 05:40:14	napping	am I doing something wrong, or is STM broken?
2013-04-04 05:41:00	neutrality	napping: What is it that main is supposed to do?
2013-04-04 05:42:06	napping	run in parallel two transactions which set atomically one TVar Bool if both are unset, while a parallel thread checks that both don't become set
2013-04-04 05:42:24	Cale	napping: reset' will eventually succeed once both dog and cat are True, and set them both to False
2013-04-04 05:42:27	-->	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has joined #haskell
2013-04-04 05:42:48	Cale	napping: but then you run it again, and nothing will ever set them to True, so it will never succeed
2013-04-04 05:42:50	napping	at -N1 or without -threaded it runs fine, with -N2 or higher it hits the "oops"
2013-04-04 05:43:01	Cale	and GHC detects this, and kills the thread
2013-04-04 05:43:33	napping	ah, that would do it
2013-04-04 05:43:59	napping	atomically oops is finishing on an asynchronous exception rather than an actual problem
2013-04-04 05:44:26	napping	I saw claims GHC's STM could allow write skew
2013-04-04 05:44:57	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Remote host closed the connection)
2013-04-04 05:45:00	<--	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has quit (Quit: chidy)
2013-04-04 05:45:23	<--	g3r (~germanp@181.47.148.80) has quit (Quit: g3r)
2013-04-04 05:45:25	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-04 05:45:45	jfischoff	ab9rf: The ADT for IR doesn't appear to be complete…can't see how to use it create a function ...
2013-04-04 05:46:15	ab9rf	jfischoff: that blog post explains how to create functions
2013-04-04 05:46:40	jfischoff	sure but their adt directly. I would rather just make the adt and pretty print it
2013-04-04 05:46:49	ab9rf	jfischoff: heh, it's not that simple
2013-04-04 05:46:56	ab9rf	jfischoff: the ADT only describes basic blocks
2013-04-04 05:46:56	jfischoff	why not?
2013-04-04 05:47:02	neutrality	napping: I'm not sure what you mean by "STM can also write Skew"
2013-04-04 05:47:03	Cale	napping: Since you're setting dog and cat to True in separate threads, there is a very real chance for oops to complete normally
2013-04-04 05:47:08	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-04-04 05:47:17	ab9rf	jfischoff: i can't answer that. ask the people wh write LLVM :)
2013-04-04 05:47:42	jfischoff	ab9rf: but llvm language has a function construct right?
2013-04-04 05:47:54	Cale	napping: If setDog completes its transaction, and then setCat completes its transaction, and then oops runs, it will finish normally
2013-04-04 05:48:00	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-04 05:48:03	napping	how do both complete?
2013-04-04 05:48:08	ab9rf	jfischoff: there's a createFunction thing, and also defineFunction and newFunction
2013-04-04 05:48:13	Cale	    forkIO (atomically setDog)
2013-04-04 05:48:13	Cale	    forkIO (atomically setCat)
2013-04-04 05:48:18	jfischoff	ab9rf: http://llvm.org/docs/LangRef.html#functions
2013-04-04 05:48:20	ab9rf	setMouse
2013-04-04 05:48:37	<--	Sorella_ (~queen@201.80.212.227) has quit (Quit: (quit))
2013-04-04 05:48:46	ab9rf	let tom = cat, jerry = mouse
2013-04-04 05:49:00	jfischoff	ab9rf: I used the createFunction etc, very cool stuff not how I feel like working.
2013-04-04 05:49:03	Cale	oh, I see, setDog itself has a guard against either being set
2013-04-04 05:49:07	-->	Shin-LaC (~LaC@west2-167-61.wireless.uic.edu) has joined #haskell
2013-04-04 05:49:14	napping	http://hpaste.org/85134
2013-04-04 05:49:17	Cale	okay, sure
2013-04-04 05:49:22	ab9rf	jfischoff: well, you'll have to write a trnslation layer then :)
2013-04-04 05:49:29	napping	here, this drops the retry in reset' and uses a semaphore
2013-04-04 05:49:32	-->	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 05:49:43	napping	now it doesn't get stuck and happily "Tick"s away, but ocassionally reports an oop
2013-04-04 05:49:48	jfischoff	of just flesh out the rest of the ADT I guess
2013-04-04 05:49:50	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-04-04 05:50:00	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Ping timeout: 260 seconds)
2013-04-04 05:50:02	<--	j2j (~Thunderbi@96.242.118.105) has quit (Quit: j2j)
2013-04-04 05:50:20	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Ping timeout: 246 seconds)
2013-04-04 05:50:30	jfischoff	Enigmagic maybe you help me with llvm questions
2013-04-04 05:50:48	Cale	napping: btw, lots = replicateM_
2013-04-04 05:51:07	ab9rf	jfischoff: 'functions' in LLVM are specifically machine-level global code symbols.  they might not correspond to a given's language "function" construct
2013-04-04 05:51:48	jfischoff	ab9rf: that's fine.
2013-04-04 05:52:38	-->	wollw (~wollw@unaffiliated/wollw) has joined #haskell
2013-04-04 05:52:38	<--	groovy3shoes (~cory@cpe-075-177-191-179.nc.res.rr.com) has quit (Quit: Computer has gone to sleep)
2013-04-04 05:52:46	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2013-04-04 05:52:46	<--	kvda (~kvda@unaffiliated/kvda) has quit (Excess Flood)
2013-04-04 05:53:03	jfischoff	I just want to be able to create all the syntactical constructs I can in a module file with a haskell adt
2013-04-04 05:53:11	napping	I thought the transaction log was checked atomically
2013-04-04 05:54:50	Cale	napping: anything you put in atomically should appear to the rest of the system as if it ran completely or not at all.
2013-04-04 05:55:05	Cale	napping: What kind of output are you seeing?
2013-04-04 05:55:13	Cale	I only see Tick printed repeatedly
2013-04-04 05:55:37	napping	did you build -threaded and run with -N2 (>1)
2013-04-04 05:56:23	<--	Zeev (~Zeev@bzq-79-180-13-78.red.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-04-04 05:57:04	Cale	Oh right, ghci behaves differently even though it's built with -threaded.
2013-04-04 05:57:20	napping	http://hpaste.org/85134
2013-04-04 05:57:30	napping	removed the ticks, repeated the test
2013-04-04 05:57:36	Cale	okay, so now I see an "Oh Noes!" before the first Tick
2013-04-04 05:58:02	napping	note it's not rechechecked, if you don't change it like I just pasted
2013-04-04 05:59:04	napping	I don't see how that's possible if things actually run atomically
2013-04-04 05:59:47	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-04-04 05:59:48	Cale	yeah, hmm
2013-04-04 06:00:26	napping	not happening at -N1 and without threaded is also a bad sign
2013-04-04 06:00:30	napping	you are not running 7.8?
2013-04-04 06:00:57	luite_	http://hdiff.luite.com:3000/
2013-04-04 06:00:59	Cale	7.6.2
2013-04-04 06:02:58	Cale	hmm, well this is very interesting
2013-04-04 06:03:33	luite_	oh sorry the graph is not tall enough in firefox
2013-04-04 06:04:00	<--	nade (~nade@daapwireless-pat.uc.edu) has quit (Quit: nade)
2013-04-04 06:04:11	<--	flra (~alexandru@79.114.99.138) has quit (Quit: Leaving.)
2013-04-04 06:04:18	-->	snoyberg (~ubuntu@89-139-153-6.bb.netvision.net.il) has joined #haskell
2013-04-04 06:04:21	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-04 06:04:21	luite_	gave it a fixed height
2013-04-04 06:05:29	-->	wilfredh (uid159@gateway/web/irccloud.com/x-gctakgcoyctdbamm) has joined #haskell
2013-04-04 06:05:45	Cale	luite_: that's cool
2013-04-04 06:06:04	napping	well, I'm out of time for tonight. Didn't see any relevant bugs in a quick search
2013-04-04 06:06:22	Cale	napping: There's definitely something fishy going on here
2013-04-04 06:06:23	<--	Eduard_Munteanu (~Eduard_Mu@188.25.6.139) has quit (Ping timeout: 245 seconds)
2013-04-04 06:06:29	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-04 06:06:42	luite_	Cale: I just hacked the ghcjs scheduler to let it show the heap at every step. I remember you posting similar diagrams somwhere :)
2013-04-04 06:06:54	Cale	yeah
2013-04-04 06:06:57	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Remote host closed the connection)
2013-04-04 06:07:07	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2013-04-04 06:07:07	<--	kvda (~kvda@unaffiliated/kvda) has quit (Excess Flood)
2013-04-04 06:07:08	Cale	also reminiscent of HOPS
2013-04-04 06:07:15	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 252 seconds)
2013-04-04 06:07:27	Cale	http://www.cas.mcmaster.ca/~kahl/HOPS/ANIM/index.html
2013-04-04 06:07:38	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 245 seconds)
2013-04-04 06:07:42	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-04-04 06:07:56	luite_	ah yeah, cool :)
2013-04-04 06:08:47	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-04 06:10:04	luite_	it reduces to nothing because it actually does a print of the result
2013-04-04 06:10:54	luite_	http://hdiff.luite.com:3000/showeval.hs.txt the source
2013-04-04 06:11:20	<--	Twisol (~Oddlyoko@wikia/Oddlyoko) has quit (Quit: Twisol)
2013-04-04 06:12:14	<--	zeep (~zeep@ip70-188-168-96.ri.ri.cox.net) has left #haskell
2013-04-04 06:12:16	monochrom	w00t haskell weekly news!
2013-04-04 06:12:18	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-04-04 06:13:48	<--	ctult (~ctult@65-129-29-31.bois.qwest.net) has quit (Ping timeout: 259 seconds)
2013-04-04 06:13:53	-->	dreixel_ (~dreixel@anon-170-162.vpn.ipredator.se) has joined #haskell
2013-04-04 06:13:59	<--	chupish (17183912@gateway/web/freenode/ip.23.24.57.18) has quit
2013-04-04 06:14:14	-->	elliott_ (elliott@unaffiliated/elliott) has joined #haskell
2013-04-04 06:14:15	-->	XexonixXexillion (~LudvikGal@130.56.82.7) has joined #haskell
2013-04-04 06:14:22	monochrom	@quote shachaf monoids
2013-04-04 06:14:22	lambdabot	shachaf says: edwardk will try to get you addicted to monoids. The first one is always free.
2013-04-04 06:14:25	-->	flx_ (flux@2001:708:310:3430:ec4f:2b5:2b23:1e9d) has joined #haskell
2013-04-04 06:14:26	<--	cmsmcq (~cmsmcq@65.19.20.185) has quit (Quit: I'm so ... sleeeepy.)
2013-04-04 06:14:28	monochrom	hehehe!
2013-04-04 06:14:50	monochrom	haahaha that one is so good!
2013-04-04 06:15:04	-->	acfoltzer_ (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-04-04 06:15:18	carter	was that a real quote?
2013-04-04 06:15:20	-->	floatingman1 (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has joined #haskell
2013-04-04 06:15:33	-->	joeyh_ (~joeyh@2001:41c8:125:49::10) has joined #haskell
2013-04-04 06:15:35	-->	natte_ (~natte@69.55.61.125) has joined #haskell
2013-04-04 06:15:39	Cale	I'm betting it was
2013-04-04 06:15:46	monochrom	not sure what's "real", but let me just say yes
2013-04-04 06:15:46	-->	Adeon_ (~makrillit@109.73.169.52) has joined #haskell
2013-04-04 06:16:03	-->	nayarb (~nayarb@50.23.65.43-static.reverse.softlayer.com) has joined #haskell
2013-04-04 06:16:04	-->	ben_ (~v@dslb-088-066-012-058.pools.arcor-ip.net) has joined #haskell
2013-04-04 06:16:06	-->	gereedy_ (geoff@mania.programmer-monk.net) has joined #haskell
2013-04-04 06:16:07	-->	DarkFox_ (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-04-04 06:16:10	-->	flebron_ (~flebron@216.239.45.74) has joined #haskell
2013-04-04 06:16:14	<--	nimish (~nimish@dynamic-acs-24-112-236-171.zoominternet.net) has quit (Quit: nimish)
2013-04-04 06:16:38	-->	k0ral_ (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has joined #haskell
2013-04-04 06:16:40	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	natte (~natte@69.55.61.125) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	joeyh (~joeyh@2001:41c8:125:49::10) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	brixen (~brixen@li253-247.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	Adeon (~makrillit@109.73.169.52) has quit (Read error: Connection reset by peer)
2013-04-04 06:16:40	<--	gereedy (geoff@mania.programmer-monk.net) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	flux (flux@2001:708:310:3430:e056:6639:5c16:871a) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	ben (~v@dslb-088-066-012-058.pools.arcor-ip.net) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	chance (ecnahc515@osuosl/staff/ecnahc515) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	flebron (~flebron@216.239.45.74) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	Zzompp (~foo@h31-3-227-86.host.redstation.co.uk) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:40	<--	elliott (elliott@unaffiliated/elliott) has quit (Read error: Connection reset by peer)
2013-04-04 06:16:40	<--	sm (~user@li229-222.members.linode.com) has quit (Read error: Connection reset by peer)
2013-04-04 06:16:40	--	acfoltzer_ is now known as acfoltzer
2013-04-04 06:16:41	--	natte_ is now known as natte
2013-04-04 06:16:43	<--	dreixel (~dreixel@anon-170-162.vpn.ipredator.se) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:47	-->	chance_z (~ecnahc515@chancez.net) has joined #haskell
2013-04-04 06:16:50	--	flx_ is now known as flux
2013-04-04 06:16:50	<--	floatingman (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has quit (Ping timeout: 258 seconds)
2013-04-04 06:16:51	<--	saurik (~saurik@carrier.saurik.com) has quit (Ping timeout: 258 seconds)
2013-04-04 06:17:00	<--	kaictl (~wgiokas@unaffiliated/kaisforza) has quit (Read error: Connection reset by peer)
2013-04-04 06:17:02	<--	chance_z (~ecnahc515@chancez.net) has quit (Changing host)
2013-04-04 06:17:02	-->	chance_z (~ecnahc515@osuosl/staff/ecnahc515) has joined #haskell
2013-04-04 06:17:04	-->	KaiSforza (~wgiokas@unaffiliated/kaisforza) has joined #haskell
2013-04-04 06:17:05	--	elliott_ is now known as elliott
2013-04-04 06:17:06	<--	numeral (~numeral@198.23.228.15) has quit (Ping timeout: 258 seconds)
2013-04-04 06:17:06	<--	blithe (~blake@li478-199.members.linode.com) has quit (Ping timeout: 258 seconds)
2013-04-04 06:17:07	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-04 06:17:07	--	chance_z is now known as chance
2013-04-04 06:17:22	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-04 06:17:23	-->	sm_ (~user@li229-222.members.linode.com) has joined #haskell
2013-04-04 06:17:35	-->	numeral_ (~numeral@198.23.228.15) has joined #haskell
2013-04-04 06:17:37	-->	saurik (~saurik@74.208.44.105) has joined #haskell
2013-04-04 06:17:41	-->	blithe (~blake@li478-199.members.linode.com) has joined #haskell
2013-04-04 06:17:44	--	KaiSforza is now known as kaictl
2013-04-04 06:18:13	luite_	Cale: but this is just STG, you can see that in the end the graph grows too much to the right because of the foldl pushing all numbers on the stack
2013-04-04 06:18:16	-->	nighty^ (~nighty@tin51-1-82-226-147-104.fbx.proxad.net) has joined #haskell
2013-04-04 06:18:25	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 06:18:26	--	DarkFox_ is now known as DarkFox
2013-04-04 06:18:30	luite_	i should let it show the stack properly
2013-04-04 06:18:54	<--	xenon21 (~xenon@122.155.36.194) has quit (Quit: Leaving.)
2013-04-04 06:19:12	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Client Quit)
2013-04-04 06:19:20	-->	DarkFox_ (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-04-04 06:19:28	--	DarkFox_ is now known as DarkFox
2013-04-04 06:19:36	<--	techlife (~jimmy@123.130.6.89) has quit (Ping timeout: 245 seconds)
2013-04-04 06:20:33	--	ben_ is now known as ben
2013-04-04 06:21:16	-->	brixen (~brixen@li253-247.members.linode.com) has joined #haskell
2013-04-04 06:21:35	<--	DarkFox (~DarkFox@unaffiliated/darkfox) has quit (Client Quit)
2013-04-04 06:21:50	-->	DarkFox (~DarkFox@unaffiliated/darkfox) has joined #haskell
2013-04-04 06:22:08	-->	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has joined #haskell
2013-04-04 06:22:09	-->	cdh473_ (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 06:22:15	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 06:22:18	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-04-04 06:22:34	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-04-04 06:22:42	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-04-04 06:22:57	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-04 06:24:37	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Read error: Connection reset by peer)
2013-04-04 06:25:51	-->	techlife (~jimmy@123.130.6.89) has joined #haskell
2013-04-04 06:26:01	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-04 06:26:52	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 260 seconds)
2013-04-04 06:27:52	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-04-04 06:30:16	<--	neutrality (~user@cpe-108-182-36-141.nyc.res.rr.com) has quit (Remote host closed the connection)
2013-04-04 06:31:12	-->	neutrality (~user@cpe-108-182-36-141.nyc.res.rr.com) has joined #haskell
2013-04-04 06:32:49	-->	trescenzi (~trescenzi@2620:91:0:163:3ce9:7c81:9143:afa5) has joined #haskell
2013-04-04 06:33:22	-->	fro0t (~fro0t@1.23.67.105) has joined #haskell
2013-04-04 06:35:10	-->	William (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has joined #haskell
2013-04-04 06:35:34	--	William is now known as Guest75025
2013-04-04 06:36:39	neutrality	Cale: do you think that problem nap was asking about could have been done using Control.Concurrent.Async and without a semaphore
2013-04-04 06:37:06	<--	trescenzi (~trescenzi@2620:91:0:163:3ce9:7c81:9143:afa5) has quit (Ping timeout: 245 seconds)
2013-04-04 06:37:18	-->	flebron (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 06:37:54	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-04-04 06:39:02	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 248 seconds)
2013-04-04 06:39:28	Cale	neutrality: I haven't yet bothered to fully understand what was going on there, but if there's a bug in STM, then it could potentially affect many things.
2013-04-04 06:39:28	Cale	async uses STM, so it's possible that a bug in STM would affect it
2013-04-04 06:39:36	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-04 06:39:42	<--	nayarb (~nayarb@50.23.65.43-static.reverse.softlayer.com) has quit (Ping timeout: 264 seconds)
2013-04-04 06:40:13	<--	wilfredh (uid159@gateway/web/irccloud.com/x-gctakgcoyctdbamm) has quit (Ping timeout: 240 seconds)
2013-04-04 06:41:13	<--	mrd (~md@debian/developer/mrd) has quit (Ping timeout: 240 seconds)
2013-04-04 06:41:17	<--	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has quit (Quit: Leaving)
2013-04-04 06:42:02	-->	mrd (~md@50.57.107.153) has joined #haskell
2013-04-04 06:42:02	<--	mrd (~md@50.57.107.153) has quit (Changing host)
2013-04-04 06:42:02	-->	mrd (~md@debian/developer/mrd) has joined #haskell
2013-04-04 06:42:20	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-04 06:42:33	-->	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has joined #haskell
2013-04-04 06:42:56	-->	trescenzi (~trescenzi@2620:91:0:163:4122:fc5e:6ea9:ae98) has joined #haskell
2013-04-04 06:44:07	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 06:44:13	<--	applicative_ (6c1152c6@gateway/web/freenode/ip.108.17.82.198) has quit (Ping timeout: 245 seconds)
2013-04-04 06:45:05	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-04 06:45:45	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Ping timeout: 252 seconds)
2013-04-04 06:46:03	neutrality	skew
2013-04-04 06:46:40	-->	mzero (~markl@m208-18.dsl.rawbw.com) has joined #haskell
2013-04-04 06:47:06	<--	trescenzi (~trescenzi@2620:91:0:163:4122:fc5e:6ea9:ae98) has quit (Ping timeout: 245 seconds)
2013-04-04 06:47:21	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-04-04 06:47:56	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Ping timeout: 252 seconds)
2013-04-04 06:48:23	luite_	http://hdiff.luite.com:3000/ <- hmm, adding the stack doesn't really make it clearer, and the graph drawing lib i use doesn't seem to support fixed positions
2013-04-04 06:48:47	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 260 seconds)
2013-04-04 06:48:55	-->	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has joined #haskell
2013-04-04 06:49:04	-->	nade (~nade@74.215.14.61) has joined #haskell
2013-04-04 06:50:56	-->	rs234 (~rs234@89.137.4.235) has joined #haskell
2013-04-04 06:51:14	<--	nimred (~nimred@unaffiliated/nahra) has quit (Quit: leaving)
2013-04-04 06:52:23	<--	nade (~nade@74.215.14.61) has quit (Client Quit)
2013-04-04 06:53:11	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-04-04 06:53:22	-->	nimred (~nimred@srv229.dedi64.de) has joined #haskell
2013-04-04 06:53:22	<--	nimred (~nimred@srv229.dedi64.de) has quit (Changing host)
2013-04-04 06:53:22	-->	nimred (~nimred@unaffiliated/nahra) has joined #haskell
2013-04-04 06:53:26	<--	nimred (~nimred@unaffiliated/nahra) has quit (Client Quit)
2013-04-04 06:55:20	hpaste	Neutrality annotated “skew?” with “skew? (annotation) (annotation)” at http://hpaste.org/85134#a85143
2013-04-04 06:55:29	<--	ben (~v@dslb-088-066-012-058.pools.arcor-ip.net) has left #haskell
2013-04-04 06:55:35	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-04-04 06:57:51	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-04-04 06:58:32	neutrality	Cale: If your still about, what do you think of that?
2013-04-04 06:58:54	-->	xenon21 (~xenon@122.155.36.226) has joined #haskell
2013-04-04 06:59:10	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-04-04 06:59:12	<--	collin (~collin@c-71-198-130-22.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-04 07:00:00	-->	ozataman_ (~ozataman@pool-173-52-212-8.nycmny.fios.verizon.net) has joined #haskell
2013-04-04 07:00:43	Cale	neutrality: well, that's definitely cleaner -- does it still exhibit the same behaviour?
2013-04-04 07:02:13	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-04-04 07:02:35	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-04-04 07:03:01	<--	Nahra (~user@unaffiliated/nahra) has quit (Remote host closed the connection)
2013-04-04 07:04:06	<--	sambio (~sambio@unaffiliated/sambio) has quit (Read error: Connection reset by peer)
2013-04-04 07:04:16	neutrality	Cale: No -- the second forever loop runs eternally and the first one (the forkIO) does not get a chance to output anything.
2013-04-04 07:04:50	neutrality	Cale: This could be because I ran it in the interpreter and didn't compile it with threading.
2013-04-04 07:05:13	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 240 seconds)
2013-04-04 07:05:39	Cale	neutrality: Oh, you definitely want to compile with -threaded and run with +RTS -N2 to test what we were seeing
2013-04-04 07:06:07	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-04 07:06:08	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Quit: leaving)
2013-04-04 07:06:08	neutrality	Cale: I know, lol.
2013-04-04 07:06:20	-->	RayNbow`TU (~kirika@x208145.tudelft.net) has joined #haskell
2013-04-04 07:06:52	neutrality	Phyrex1an: "phyrexian" was from Magic the Gathering No?
2013-04-04 07:07:12	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-04-04 07:07:14	phyrex1an	yes
2013-04-04 07:07:14	lambdabot	phyrex1an: You have 1 new message. '/msg lambdabot @messages' to read it.
2013-04-04 07:07:40	neutrality	phyrex1an: cool
2013-04-04 07:08:20	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-04-04 07:09:29	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-04-04 07:09:49	-->	def- (~r0q@p548844B0.dip0.t-ipconnect.de) has joined #haskell
2013-04-04 07:13:14	--	stelleg_ is now known as stelleg_away
2013-04-04 07:13:18	<--	def-_ (~r0q@p5488457B.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-04-04 07:13:21	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-04-04 07:13:27	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 258 seconds)
2013-04-04 07:13:36	<--	Ghoul__ (uid6924@gateway/web/irccloud.com/x-hrrikbrptojizhzp) has quit
2013-04-04 07:13:54	-->	Ghoul__ (uid6924@gateway/web/irccloud.com/x-flievurcsxdajhcg) has joined #haskell
2013-04-04 07:14:44	-->	sw2wolf (~czsq888@222.209.240.237) has joined #haskell
2013-04-04 07:15:24	-->	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has joined #haskell
2013-04-04 07:17:59	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-04-04 07:19:06	-->	wessel (wess@cpc11-staf7-2-0-cust4.3-1.cable.virginmedia.com) has joined #haskell
2013-04-04 07:19:11	<--	fro0t (~fro0t@1.23.67.105) has quit (Ping timeout: 245 seconds)
2013-04-04 07:19:32	wessel	Hi
2013-04-04 07:19:40	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-04-04 07:20:06	--	u_ is now known as u_asleep
2013-04-04 07:21:41	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-04-04 07:22:39	--	u_asleep is now known as u_asleep_forreal
2013-04-04 07:22:58	<--	LAMMJohnson (~ja@user-5af43996.broadband.tesco.net) has quit (Remote host closed the connection)
2013-04-04 07:23:01	-->	shintah (bebble@h-151-212.a336.priv.bahnhof.se) has joined #haskell
2013-04-04 07:23:13	<--	xenon21 (~xenon@122.155.36.226) has quit (Ping timeout: 240 seconds)
2013-04-04 07:23:28	--	u_asleep_forreal is now known as u_aspirestobeasl
2013-04-04 07:23:32	<--	wessel (wess@cpc11-staf7-2-0-cust4.3-1.cable.virginmedia.com) has left #haskell
2013-04-04 07:23:38	--	u_aspirestobeasl is now known as u_aspirestosleep
2013-04-04 07:23:48	<--	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has quit (Quit: roshan)
2013-04-04 07:24:14	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 07:24:43	<--	ben_d (~muus@131.252.167.109) has quit (Ping timeout: 245 seconds)
2013-04-04 07:24:44	-->	wess (wess@cpc11-staf7-2-0-cust4.3-1.cable.virginmedia.com) has joined #haskell
2013-04-04 07:25:13	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 240 seconds)
2013-04-04 07:25:22	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-04-04 07:25:59	wess	Any one want to help me with a haskell problem ? :(
2013-04-04 07:26:19	jfischoff	of course!
2013-04-04 07:26:28	jfischoff	just not me ;)
2013-04-04 07:26:30	simpson	wess: Don't ask to ask, just ask.
2013-04-04 07:27:21	wess	I have a list
2013-04-04 07:27:30	wess	with tuples of size 3 in
2013-04-04 07:27:47	wess	how do I create a new list
2013-04-04 07:27:58	Iceland_jack	New list?
2013-04-04 07:28:28	Iceland_jack	Your question is too vague
2013-04-04 07:28:35	wess	it is not the hole question
2013-04-04 07:28:39	wess	Im just thiking how to explain my problem
2013-04-04 07:28:40	ParahSail1n	[(a,b,c)] -> ?
2013-04-04 07:28:41	wess	sorry
2013-04-04 07:29:16	wess	ok so my List looks like this [(Double,[Char], Double, Double)]	
2013-04-04 07:29:19	wess	I want to create a new list
2013-04-04 07:29:25	wess	but the conditions is
2013-04-04 07:29:30	wess	the second double
2013-04-04 07:29:36	wess	i.e. [(Double,[Char], Double<--, Double)]	
2013-04-04 07:29:40	wess	has to be summed
2013-04-04 07:29:43	wess	and if its value is say 10
2013-04-04 07:29:48	wess	stop adding items from the old list
2013-04-04 07:29:49	wess	to the new one
2013-04-04 07:30:07	wess	is that still to vague ?
2013-04-04 07:30:21	Iceland_jack	So a 4-tuple, not a 3-tuple
2013-04-04 07:30:25	wess	yeah
2013-04-04 07:30:29	Iceland_jack	You can use takeWhile
2013-04-04 07:30:51	wess	i tried list comprehension before
2013-04-04 07:30:55	wess	like
2013-04-04 07:31:03	wess	total =   [ (x,y,z,b) | (x,y,z,b) <- sortedData, b + b < 15 ] 	
2013-04-04 07:31:03	Iceland_jack	@ty takeWhile (\(_, _, d, _) -> d /= 10)
2013-04-04 07:31:05	lambdabot	(Eq a, Num a) => [(t, t1, a, t2)] -> [(t, t1, a, t2)]
2013-04-04 07:31:07	wess	but obv that didnt work
2013-04-04 07:31:10	ParahSail1n	sounds like he wants to accumulate a value for his takewhile predicate
2013-04-04 07:31:16	wess	yeah
2013-04-04 07:31:18	<--	jcao219 (jimmy@wikibooks/Jcao219) has quit (Ping timeout: 248 seconds)
2013-04-04 07:31:23	-->	birkenfeld_ (~gbrandl@hammett.srv.pocoo.org) has joined #haskell
2013-04-04 07:31:35	-->	lightquake_ (~lightquak@li363-105.members.linode.com) has joined #haskell
2013-04-04 07:31:37	Iceland_jack	This seems like a very strange way of doing things to me, what are you trying to accomplish?
2013-04-04 07:31:54	Iceland_jack	You probably don't want tuples to store your data
2013-04-04 07:32:04	wess	I have to use a touple
2013-04-04 07:32:09	wess	because I have different data types ?
2013-04-04 07:32:13	-->	cow-orker (~foobar@pogostick.net) has joined #haskell
2013-04-04 07:32:14	-->	frontend1oader (~mst@tomservo.robotrollcall.org) has joined #haskell
2013-04-04 07:32:16	wess	obviously open to suggestions
2013-04-04 07:32:17	simpson	wess: Hm. This isn't homework, right?
2013-04-04 07:32:18	ParahSail1n	wess mix up a scanl with a takeWhile
2013-04-04 07:32:27	Iceland_jack	wess: You can use data to declare a new datatype
2013-04-04 07:32:30	wess	it is homework, but also trying to learn
2013-04-04 07:32:36	wess	its not all my homework
2013-04-04 07:32:40	ParahSail1n	use scanl to accumulate the sum
2013-04-04 07:32:42	-->	williamh_ (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 07:32:54	Iceland_jack	I have no idea what you're trying to model but: data Person = Person Int String
2013-04-04 07:32:54	ParahSail1n	takeWhile to take until predicate
2013-04-04 07:32:59	-->	aforemny_ (~aforemny@209-61-142-12.static.cloud-ips.com) has joined #haskell
2013-04-04 07:33:01	Iceland_jack	could store a person's age + name
2013-04-04 07:33:05	--	williamh_ is now known as Guest25242
2013-04-04 07:33:05	Iceland_jack	instead of (Int, String)
2013-04-04 07:33:06	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 07:33:22	-->	eldariof (~CLD@193.86.243.17) has joined #haskell
2013-04-04 07:33:26	-->	lzm_ (~lzm@69.164.212.33) has joined #haskell
2013-04-04 07:33:27	<--	cdh473_ (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-04 07:33:31	-->	barrucad1 (~barrucadu@carcosa.barrucadu.co.uk) has joined #haskell
2013-04-04 07:33:31	<--	barrucad1 (~barrucadu@carcosa.barrucadu.co.uk) has quit (Changing host)
2013-04-04 07:33:31	-->	barrucad1 (~barrucadu@fsf/member/barrucadu) has joined #haskell
2013-04-04 07:33:32	-->	rs0_ (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has joined #haskell
2013-04-04 07:33:48	<--	guampa (~guampa@unaffiliated/guampa) has quit
2013-04-04 07:33:49	-->	jdoliner_ (~jdoliner@173-228-89-170.dsl.static.sonic.net) has joined #haskell
2013-04-04 07:33:50	<--	barrucadu (~barrucadu@fsf/member/barrucadu) has quit (Disconnected by services)
2013-04-04 07:33:55	--	barrucad1 is now known as barrucadu
2013-04-04 07:34:29	-->	drmegahe1tz (~drmegaher@linuxuser.se) has joined #haskell
2013-04-04 07:34:34	-->	simon__ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has joined #haskell
2013-04-04 07:34:49	-->	connelly_ (~connelly@XVM-FOUR-180.MIT.EDU) has joined #haskell
2013-04-04 07:35:27	<--	xymox (lechuck@unaffiliated/contempt) has quit (Disconnected by services)
2013-04-04 07:35:35	<--	tsinnema (~tsinnema@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Quit: Ex-Chat)
2013-04-04 07:35:39	-->	TheRedMoodie (~TheRedMoo@ti0056a380-dhcp2641.bb.online.no) has joined #haskell
2013-04-04 07:35:45	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-04-04 07:35:48	-->	mysticc_ (~satvikc@202.3.77.213) has joined #haskell
2013-04-04 07:35:49	-->	Licenser_ (~Licenser@82.210.31.101.rev.worldbone.de) has joined #haskell
2013-04-04 07:36:02	<--	ketil_ (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Ping timeout: 255 seconds)
2013-04-04 07:36:03	<--	klapaucius (~klapauciu@59.10.76.78) has quit (Quit: klapaucius)
2013-04-04 07:36:06	<--	paddymahoney (~paddymaho@198-84-186-52.cpe.teksavvy.com) has quit (Read error: Connection reset by peer)
2013-04-04 07:36:07	-->	Liskni_s1 (pytt_l@ackle.nomi.cz) has joined #haskell
2013-04-04 07:36:14	-->	Fuuzetsu_ (~Shana@limol.bath.ac.uk) has joined #haskell
2013-04-04 07:36:27	-->	Slowpoke_Man (chris@pdpc/supporter/active/blasthardcheese) has joined #haskell
2013-04-04 07:36:43	ParahSail1n	@ty \l -> takeWhile (\(x,_) -> x < 10) $ scanl (\(sum, xs) i@(_, _, x, _) -> (sum+x, i:xs)) (0, []) l
2013-04-04 07:36:44	lambdabot	(Num a, Ord a) => [(t, t1, a, t2)] -> [(a, [(t, t1, a, t2)])]
2013-04-04 07:36:55	-->	mami_ (mami@gateway/shell/c-base/x-xhjasyhftmuywiaw) has joined #haskell
2013-04-04 07:37:07	-->	ChongLi_ (~chongli@24.212.141.111) has joined #haskell
2013-04-04 07:37:19	<--	Guest25242 (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 260 seconds)
2013-04-04 07:37:26	Iceland_jack	ParahSail1n: Maybe not give the solution to homework directly
2013-04-04 07:37:38	wess	Thanks
2013-04-04 07:37:40	Iceland_jack	It may be obvious that wess did not come up with that themselves
2013-04-04 07:37:44	wess	im not after the solution
2013-04-04 07:37:47	wess	just want ideas
2013-04-04 07:37:47	-->	alcz_ (~alc@snf-2833.vm.okeanos.grnet.gr) has joined #haskell
2013-04-04 07:37:51	wess	because I have tried so many things now
2013-04-04 07:37:59	ParahSail1n	i dont think i gave him a correct answer
2013-04-04 07:38:03	wess	yeah I dont want anything to complex
2013-04-04 07:38:09	<--	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	lightquake (~lightquak@li363-105.members.linode.com) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	--	birkenfeld_ is now known as birkenfeld
2013-04-04 07:38:09	--	u_aspirestosleep is now known as u_aspirestoshutu
2013-04-04 07:38:09	<--	frontendloader (~mst@tomservo.robotrollcall.org) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	ethercrow (~ethercrow@nat3.academ.org) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	cow-orke1 (~foobar@pogostick.net) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	BlastHardcheese (chris@pdpc/supporter/active/blasthardcheese) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	aforemny (~aforemny@209-61-142-12.static.cloud-ips.com) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	sajith (~sajith@bog.hcoop.net) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	simon___ (~simon@h60n2-kr-a-13.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	drmegahertz (~drmegaher@linuxuser.se) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	jdoliner (~jdoliner@173-228-89-170.dsl.static.sonic.net) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	lzm (~lzm@69.164.212.33) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	--	lightquake_ is now known as lightquake
2013-04-04 07:38:09	<--	TheRedMood (~TheRedMoo@unaffiliated/theredmood) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	connelly (~connelly@XVM-FOUR-180.MIT.EDU) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:09	<--	mysticc (~satvikc@202.3.77.213) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:10	<--	Liskni_si (pytt_l@ackle.nomi.cz) has quit (Remote host closed the connection)
2013-04-04 07:38:10	<--	ericmj (ericmj@h245n6-g-ml-a11.ias.bredband.telia.com) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:10	<--	mami (~mami@server317.vz.syseleven.de) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:12	<--	alcz (~alc@snf-2833.vm.okeanos.grnet.gr) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:12	<--	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:12	<--	ChongLi (~chongli@24.212.141.111) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:12	--	Licenser_ is now known as Licenser
2013-04-04 07:38:13	--	TheRedMoodie is now known as TheRedMood
2013-04-04 07:38:13	<--	TheRedMood (~TheRedMoo@ti0056a380-dhcp2641.bb.online.no) has quit (Changing host)
2013-04-04 07:38:13	-->	TheRedMood (~TheRedMoo@unaffiliated/theredmood) has joined #haskell
2013-04-04 07:38:17	wess	just point me in the right direction
2013-04-04 07:38:19	<--	Dtgr (~user@a88-113-163-59.elisa-laajakaista.fi) has quit (Remote host closed the connection)
2013-04-04 07:38:35	-->	Dtgr (~user@a88-113-163-59.elisa-laajakaista.fi) has joined #haskell
2013-04-04 07:38:36	<--	Fuuzetsu (~Shana@unaffiliated/shanachan) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:36	<--	wormphlegm (~wormphleg@c-24-6-156-103.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-04-04 07:38:42	wess	but thanks
2013-04-04 07:38:42	Iceland_jack	wess: I would start out implementing it in a simple recursive fasion
2013-04-04 07:38:50	-->	wormphlegm (~wormphleg@c-24-6-156-103.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 07:38:50	ParahSail1n	@src scanl
2013-04-04 07:38:51	lambdabot	scanl f q ls = q : case ls of
2013-04-04 07:38:51	lambdabot	    []   -> []
2013-04-04 07:38:51	lambdabot	    x:xs -> scanl f (f q x) xs
2013-04-04 07:38:52	<--	andyjgill (~andyjgill@156.41.124.24.cm.sunflower.com) has quit (Quit: andyjgill)
2013-04-04 07:38:53	-->	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-04 07:38:58	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 07:38:58	wess	takeWhile seems elegant
2013-04-04 07:38:58	Iceland_jack	wess: http://learnyouahaskell.com/recursion ← this may be helpful
2013-04-04 07:38:59	ParahSail1n	you can write all that stuff yourself
2013-04-04 07:39:03	ParahSail1n	@src takeWhile
2013-04-04 07:39:04	lambdabot	takeWhile _ []                 =  []
2013-04-04 07:39:04	lambdabot	takeWhile p (x:xs) | p x       =  x : takeWhile p xs
2013-04-04 07:39:04	lambdabot	                   | otherwise =  []
2013-04-04 07:39:04	wess	been there
2013-04-04 07:39:05	wess	so many times lol
2013-04-04 07:39:15	-->	ericmj (ericmj@h245n6-g-ml-a11.ias.bredband.telia.com) has joined #haskell
2013-04-04 07:39:19	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-04-04 07:39:22	ParahSail1n	and do it better than composing takeWhile and scanl
2013-04-04 07:39:33	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-04-04 07:39:46	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-04 07:40:08	Iceland_jack	‘takeWhile’ does exactly what it says on the tin, ‘scanl’ is a little more involved
2013-04-04 07:40:18	<--	Henesy (~h3n3sy@adsl-75-23-118-193.dsl.peoril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-04-04 07:40:31	mzero	wess - take this as two separate parts: 1) how do you compute the successive sum of the third part of the tuple..... 2) how do you select a part of the list based on that list of successive sums
2013-04-04 07:40:48	neutrality	Cale: if you are still there I don't think there is a way that the program can have both cat and dog set to true at the same time, which is the only way it would print "Oh Noes!" so I don't see how Nappier is getting that output.
2013-04-04 07:41:01	neutrality	But hey. It provided me with some fun.
2013-04-04 07:41:12	mzero	I'd guess that at your level, it would be better, more instructive to NOT learn scanl --- and instead figure out how to write part 1 yourself
2013-04-04 07:41:15	Cale	neutrality: That's the bug that we're discussing
2013-04-04 07:41:24	Iceland_jack	What mzero said
2013-04-04 07:41:30	wess	 mzero I did think of that, but I need to maintain some order in my list
2013-04-04 07:41:38	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 246 seconds)
2013-04-04 07:41:52	mzero	no worries... lists ARE ordered!
2013-04-04 07:41:57	<--	techlife (~jimmy@123.130.6.89) has quit (Ping timeout: 248 seconds)
2013-04-04 07:42:03	neutrality	You see, I don't get that output. The bug is not showing up for me. Is it showing up for you?
2013-04-04 07:42:39	mzero	also - start simple - ignore the tuple....   how would you compute the successive sum (do you understand what I mean by that?) of this list:   [ 4, 5, 8, 1, 4, 0, 3 ]?
2013-04-04 07:42:52	wess	yeah I understand
2013-04-04 07:43:07	mzero	cool - try writing a fucntion to do that - and hpaste it for us
2013-04-04 07:43:11	wess	kk
2013-04-04 07:43:16	mzero	:-)
2013-04-04 07:43:21	Iceland_jack	☺
2013-04-04 07:43:24	wess	i might be a while :P
2013-04-04 07:43:26	wess	but will try
2013-04-04 07:43:32	-->	osa1 (58fff5fc@gateway/web/freenode/ip.88.255.245.252) has joined #haskell
2013-04-04 07:43:32	wess	dnt go to bed !
2013-04-04 07:43:34	mzero	(I'm assuming here you want help understanding .... and won't mind taking it slow, piece by peice)
2013-04-04 07:43:42	wess	I have all day
2013-04-04 07:43:43	wess	:)
2013-04-04 07:43:44	mzero	I'm up for anohter hour!
2013-04-04 07:43:48	mzero	heh
2013-04-04 07:44:28	wess	@ mzero successive sum, you mean the sum of the list right ?
2013-04-04 07:44:32	neutrality	Cale: If you get to the bottom of it please be sure to put it on Haskell reddit or something. I'm interested to hear the result.
2013-04-04 07:44:34	wess	of all elements in the list
2013-04-04 07:44:35	osa1	can anyone give me an example expression that is typeable under a type system with subtyping but not typeable under classic let-polymorphism, and vice versa
2013-04-04 07:44:42	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 07:44:47	mzero	no - I mean I want the sum at each point.
2013-04-04 07:44:48	osa1	um yeah that means two expressions
2013-04-04 07:45:05	wess	ahh
2013-04-04 07:45:09	mzero	so the result for that list would be  [ 4, 9, 17, 18, 22, 22, 25 ]
2013-04-04 07:45:37	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-04 07:45:40	wess	k thnks brb
2013-04-04 07:45:54	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-04 07:46:01	-->	techlife (~jimmy@123.130.6.89) has joined #haskell
2013-04-04 07:46:24	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-04-04 07:46:24	<--	Heero (~Heero@unaffiliated/heero) has quit (Ping timeout: 240 seconds)
2013-04-04 07:46:48	<--	danharaj (~danharaj@ool-457a8edb.dyn.optonline.net) has quit (Quit: ~ Trillian Astra - www.trillian.im ~)
2013-04-04 07:46:53	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-04 07:48:36	-->	kartoffelbrei (~kartoffel@p54962E35.dip.t-dialin.net) has joined #haskell
2013-04-04 07:48:59	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 252 seconds)
2013-04-04 07:49:08	neutrality	Cale: Anyway I am using GHC 7.4.2 with the latest version of STM and I am not seeing the behaviour that nappier is seeing. Hope that helps.
2013-04-04 07:49:23	<--	nadirvardar (~nadirvard@c-71-204-134-236.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-04 07:49:37	Cale	neutrality: okay, cool
2013-04-04 07:49:45	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-04-04 07:49:50	Cale	neutrality: You compiled with -threaded and ran his program with +RTS -N2?
2013-04-04 07:50:36	neutrality	Yes. I compiled both the original program and my cleaned up version and niether showed the buggy behaviour.
2013-04-04 07:52:44	--	Slowpoke_Man is now known as BlastHardcheese
2013-04-04 07:52:50	<--	v (~v@61.173.91.86) has quit (Quit: Leaving)
2013-04-04 07:53:12	shachaf	Welcome to issue 264 of the HWN, an issue covering crowd-sourced bits of information about Haskell from around the web. This issue covers the week of March 17 to 30, 2013.
2013-04-04 07:53:18	shachaf	good week
2013-04-04 07:53:32	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-04-04 07:53:40	cmears	Cale, neutrality: I tried both too with 7.6.2, and didn't see any output at all (is that the correct behaviour?)
2013-04-04 07:53:43	-->	adlan (~adlan@115.85.128.54) has joined #haskell
2013-04-04 07:53:51	mzero	I wish all my weeks had 14 days in 'em
2013-04-04 07:54:09	Cale	cmears: which program did you run exactly?
2013-04-04 07:54:58	-->	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-04-04 07:56:22	<--	sw2wolf (~czsq888@222.209.240.237) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-04 07:56:44	mzero	how ya doin', wess ?
2013-04-04 07:58:01	--	jbauman_ is now known as jbauman
2013-04-04 07:58:05	cmears	Cale, I just tried all four from the hpaste
2013-04-04 07:58:19	<--	BobFunk (~mbc@c-69-181-107-253.hsd1.ca.comcast.net) has quit (Ping timeout: 260 seconds)
2013-04-04 07:58:28	cmears	85140 gives "Tick\nTick\n..."
2013-04-04 07:58:46	cmears	the other three (85134,85141,85143) give no output
2013-04-04 07:59:34	<--	smokey991 (~sean@z65-50-125-116.ips.direcpath.com) has quit (Quit: Leaving)
2013-04-04 08:00:27	Cale	cmears: and you compiled with -threaded and ran with +RTS -N2 on the commandline?
2013-04-04 08:00:33	cmears	That's right
2013-04-04 08:00:36	Cale	huh
2013-04-04 08:00:38	Cale	interesting
2013-04-04 08:00:39	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-04 08:00:54	Cale	I'm using 7.6.2 and I see a bunch of "Oh Noes"
2013-04-04 08:01:49	cmears	with stm-2.4.2, if it makes any difference
2013-04-04 08:02:21	<--	eldariof (~CLD@193.86.243.17) has quit
2013-04-04 08:02:51	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-04 08:03:17	<--	osa1 (58fff5fc@gateway/web/freenode/ip.88.255.245.252) has quit (Quit: Page closed)
2013-04-04 08:03:45	cmears	got an "oh noes" with ghc 7.4.1
2013-04-04 08:03:49	-->	boegel (~boegel@183.244-242-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-04-04 08:03:52	cmears	(with the first program)
2013-04-04 08:04:14	cmears	Actually, all of them give oh noes with ghc 7.4.1
2013-04-04 08:04:49	-->	ThomasLocke (~ThomasLoc@mail.serverbox.dk) has joined #haskell
2013-04-04 08:04:49	<--	ThomasLocke (~ThomasLoc@mail.serverbox.dk) has quit (Changing host)
2013-04-04 08:04:49	-->	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-04-04 08:05:25	-->	nayarb (~nayarb@50-23-113-204.revip2.marketstreetwifi.net) has joined #haskell
2013-04-04 08:07:16	<--	flebron (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-04-04 08:07:23	<--	Apes (~aaron@pleasantops.com) has quit (Quit: Lost terminal)
2013-04-04 08:08:48	luite_	added the STG eval stack  http://hdiff.luite.com:3000/
2013-04-04 08:08:50	-->	marchdown (~marchdown@bl23-16-133.dsl.telepac.pt) has joined #haskell
2013-04-04 08:09:31	-->	Nahra (~user@unaffiliated/nahra) has joined #haskell
2013-04-04 08:10:33	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-04 08:10:49	<--	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has quit (Ping timeout: 256 seconds)
2013-04-04 08:10:57	<--	marchdown (~marchdown@bl23-16-133.dsl.telepac.pt) has quit (Client Quit)
2013-04-04 08:11:10	Cale	luite_: cool!
2013-04-04 08:11:31	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2013-04-04 08:11:31	<--	kvda (~kvda@unaffiliated/kvda) has quit (Excess Flood)
2013-04-04 08:12:04	-->	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has joined #haskell
2013-04-04 08:13:42	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 08:13:45	luite_	Cale: i compiled foldl' now, it's a lot less interesting to watch :)
2013-04-04 08:13:54	-->	sopvop (~lonokhov@213.170.88.44) has joined #haskell
2013-04-04 08:14:26	-->	Apes (~aaron@pleasantops.com) has joined #haskell
2013-04-04 08:15:14	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-04-04 08:15:18	Cale	luite_: I was just noticing that :)
2013-04-04 08:15:28	-->	arenz (~arenz@HSI-KBW-046-005-061-181.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-04 08:16:17	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-04-04 08:16:28	Cale	luite_: try foldr :)
2013-04-04 08:16:41	<--	akamaus (~akamaus@176.104.193.228) has quit (Ping timeout: 245 seconds)
2013-04-04 08:16:57	luite_	should be foldr now
2013-04-04 08:16:58	-->	bluecookies (7cbbad59@gateway/web/freenode/ip.124.187.173.89) has joined #haskell
2013-04-04 08:18:39	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-04-04 08:19:12	Cale	Interesting
2013-04-04 08:19:40	luite_	ghcjs does eager blackholing, so everything on the stack becomes a blackhole immediately
2013-04-04 08:20:20	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2013-04-04 08:20:22	-->	albel727_ (~albel727@unaffiliated/albel727) has joined #haskell
2013-04-04 08:20:25	luite_	(since we don't have control ovr the garbage collector, lazy blackholing doesn't make much sense)
2013-04-04 08:20:53	<--	carter (~textual@cpe-66-108-200-5.nyc.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2013-04-04 08:21:31	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-04 08:22:43	<--	albel727_ (~albel727@unaffiliated/albel727) has quit (Client Quit)
2013-04-04 08:22:57	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-04-04 08:23:03	<--	kartoffelbrei (~kartoffel@p54962E35.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-04-04 08:23:21	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Ping timeout: 245 seconds)
2013-04-04 08:23:44	luite_	sorry for the large js size btw, it's half the base package linked in, I'm still working on reducing ghcjs' output size
2013-04-04 08:24:11	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 252 seconds)
2013-04-04 08:24:32	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-04-04 08:25:14	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-04-04 08:26:00	<--	juhp (~petersen@redhat/juhp) has quit (Ping timeout: 264 seconds)
2013-04-04 08:26:18	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 08:27:33	<--	bluecookies (7cbbad59@gateway/web/freenode/ip.124.187.173.89) has quit (Ping timeout: 245 seconds)
2013-04-04 08:28:00	<--	tensorpudding (~tensorpud@108.87.19.193) has quit (Read error: Connection reset by peer)
2013-04-04 08:28:42	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-04-04 08:29:11	-->	mceier (~mceier@62.61.58.19) has joined #haskell
2013-04-04 08:30:00	<--	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has quit (Changing host)
2013-04-04 08:30:00	-->	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has joined #haskell
2013-04-04 08:31:16	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: +1 (Yes). -1 (No). i (What I have been trying to tell you all along).)
2013-04-04 08:31:22	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-04-04 08:31:29	-->	tensorpudding (~tensorpud@108.87.19.192) has joined #haskell
2013-04-04 08:31:31	<--	zeiris (~amtal@198.144.180.18) has quit (Quit: segfault)
2013-04-04 08:32:26	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-04-04 08:32:26	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-04-04 08:32:26	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-04-04 08:32:31	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-04-04 08:32:49	-->	schovi (~schovi@194.213.198.34) has joined #haskell
2013-04-04 08:32:53	-->	williamh_ (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 08:33:16	--	williamh_ is now known as Guest31593
2013-04-04 08:33:19	-->	kmrhb_ (~kmrhb@dsl-216-221-33-14.mtl.aei.ca) has joined #haskell
2013-04-04 08:35:30	<--	kmrhb (~kmrhb@dsl-216-221-57-53.mtl.aei.ca) has quit (Ping timeout: 264 seconds)
2013-04-04 08:35:30	--	kmrhb_ is now known as kmrhb
2013-04-04 08:36:00	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 08:36:31	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Remote host closed the connection)
2013-04-04 08:36:52	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-04-04 08:36:59	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-04 08:37:09	<--	nus-- (~nus@unaffiliated/nus) has quit (Read error: Connection reset by peer)
2013-04-04 08:37:14	-->	wilfredh (uid159@gateway/web/irccloud.com/x-wdnzrifteodszybm) has joined #haskell
2013-04-04 08:37:14	<--	zhulikas (~zhulikas@213.159.34.100) has quit (Ping timeout: 255 seconds)
2013-04-04 08:37:19	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Read error: Connection reset by peer)
2013-04-04 08:37:24	<--	Guest31593 (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 252 seconds)
2013-04-04 08:37:28	-->	finishingmove (~finishing@dynamic-87-105-134-202.ssp.dialog.net.pl) has joined #haskell
2013-04-04 08:37:39	--	dreixel_ is now known as dreixel
2013-04-04 08:37:42	-->	dkristian (~dkristian@c122-104-142-189.rochd6.qld.optusnet.com.au) has joined #haskell
2013-04-04 08:38:01	finishingmove	can anyone share a reasonable indentation config for Sublime Text 2 (for Haskell syntax naturally) ?
2013-04-04 08:38:04	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-04-04 08:38:39	finishingmove	(or recommend a Haskell IDE / editor that works on Windows and is better than ST2)
2013-04-04 08:39:35	<--	nayarb (~nayarb@50-23-113-204.revip2.marketstreetwifi.net) has quit (Quit: Lost terminal)
2013-04-04 08:40:17	<--	threesome (~threesome@ip-94-113-12-74.net.upcbroadband.cz) has quit (Ping timeout: 256 seconds)
2013-04-04 08:41:02	 *	hackagebot cipher-aes 0.1.8 - Fast AES cipher implementation with advanced mode of operations  http://hackage.haskell.org/package/cipher-aes-0.1.8 (VincentHanquez)
2013-04-04 08:42:59	-->	trescenzi (~trescenzi@2620:91:0:163:ec82:e393:5724:92e9) has joined #haskell
2013-04-04 08:43:20	finishingmove	anyone ?
2013-04-04 08:43:47	<--	centrinia (~exc@adsl-184-36-91-74.asm.bellsouth.net) has quit (Quit: Ex-Chat)
2013-04-04 08:43:56	<--	Adeon_ (~makrillit@109.73.169.52) has quit (Ping timeout: 246 seconds)
2013-04-04 08:44:59	-->	Adeon (~makrillit@109.73.169.52) has joined #haskell
2013-04-04 08:45:16	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 08:45:43	newsham	has anyone built a "traditional" web server (ie. like apache, serves static files, supports options like home dirs, indexing, etc) out of any of the modern haskell web components (ie. like warp)?
2013-04-04 08:46:13	<--	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has quit (Ping timeout: 240 seconds)
2013-04-04 08:47:36	<--	trescenzi (~trescenzi@2620:91:0:163:ec82:e393:5724:92e9) has quit (Ping timeout: 264 seconds)
2013-04-04 08:47:51	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-04 08:48:02	-->	fragamus_ (~fragamus@adsl-71-142-60-12.dsl.scrm01.pacbell.net) has joined #haskell
2013-04-04 08:48:45	fragamus_	is there anyone who understands Uustalu's factorial example
2013-04-04 08:49:19	-->	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has joined #haskell
2013-04-04 08:49:40	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 260 seconds)
2013-04-04 08:49:51	<--	pkrnj (~pkrnj@bas2-montreal47-1279443509.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-04-04 08:52:21	-->	akamaus (~akamaus@95.106.8.194) has joined #haskell
2013-04-04 08:52:50	-->	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has joined #haskell
2013-04-04 08:55:10	-->	andrey013 (~chatzilla@95.73.233.33) has joined #haskell
2013-04-04 08:56:23	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Ping timeout: 245 seconds)
2013-04-04 08:57:18	-->	mononofu (~mononofu@chello062178010088.4.11.vie.surfer.at) has joined #haskell
2013-04-04 08:57:25	<--	neutrality (~user@cpe-108-182-36-141.nyc.res.rr.com) has quit (Remote host closed the connection)
2013-04-04 08:57:38	<--	alex`` (~user@ts1-b-p40.bmts.com) has quit (Ping timeout: 245 seconds)
2013-04-04 08:58:01	fragamus_	Not sure my chat is working can you guys see this
2013-04-04 08:58:14	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 248 seconds)
2013-04-04 08:58:33	fragamus_	Im on iPhone colloquy app
2013-04-04 08:59:00	ousado	yes
2013-04-04 08:59:38	ousado	fragamus_: ^
2013-04-04 09:02:17	finishingmove	guys
2013-04-04 09:02:19	finishingmove	anyone on windows?
2013-04-04 09:02:44	RayNbow`TU	Win7 x64 here
2013-04-04 09:02:52	finishingmove	What IDE do you use?
2013-04-04 09:03:08	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-04-04 09:03:13	finishingmove	(or editor)
2013-04-04 09:03:14	RayNbow`TU	for Haskell I actually use Notepad... :p
2013-04-04 09:03:16	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-04-04 09:03:28	<--	kmels_ (~kmels@frbg-4d029f48.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-04-04 09:03:28	<--	kmels (~kmels@frbg-4d029f48.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-04-04 09:03:33	RayNbow`TU	but then again, I haven't really done large projects in Haskell
2013-04-04 09:03:34	finishingmove	And how do you handle your indentations? Manually or do you have a plugin?
2013-04-04 09:04:06	RayNbow`TU	in case of Haskell, I just do it manually by pressing the spacebar enough times
2013-04-04 09:04:31	finishingmove	that's tedious
2013-04-04 09:04:32	RayNbow`TU	for other languages I'm using Eclipse
2013-04-04 09:04:41	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 255 seconds)
2013-04-04 09:04:45	RayNbow`TU	(I still have to try out the Haskell plugin for Eclipse)
2013-04-04 09:05:25	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Remote host closed the connection)
2013-04-04 09:05:31	<--	kmrhb (~kmrhb@dsl-216-221-33-14.mtl.aei.ca) has quit (Ping timeout: 260 seconds)
2013-04-04 09:05:32	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-04-04 09:06:25	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-04-04 09:09:15	-->	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has joined #haskell
2013-04-04 09:09:41	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-04-04 09:10:04	<--	realnot (~realnot@unaffiliated/realnot) has quit (Quit: Lost terminal)
2013-04-04 09:10:17	-->	stat_vi (~stat@dslb-094-218-008-236.pools.arcor-ip.net) has joined #haskell
2013-04-04 09:11:57	elliott	you generally don't get indentation as deep as in most languages in haskell.
2013-04-04 09:12:03	elliott	so I find pressing the spacebar to be less annoying than you'd expect
2013-04-04 09:12:17	elliott	(and the subtleties of haskell indentation mean that automation can make it take *more* effort.)
2013-04-04 09:14:41	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 09:16:43	<--	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 260 seconds)
2013-04-04 09:17:48	opqdonut	emacs is pretty good with automatic indentation
2013-04-04 09:18:12	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 09:18:12	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-04-04 09:18:27	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 09:19:00	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-04-04 09:19:11	<--	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-04-04 09:20:11	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-04 09:20:59	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-04-04 09:21:16	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 09:21:19	<--	toekutr (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-04-04 09:21:32	<--	fragamus_ (~fragamus@adsl-71-142-60-12.dsl.scrm01.pacbell.net) has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)
2013-04-04 09:22:05	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-04-04 09:22:44	--	numeral_ is now known as numeral
2013-04-04 09:22:45	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-04-04 09:24:18	-->	xpika (~jrg@58.171.26.178) has joined #haskell
2013-04-04 09:24:35	osfameron	spacebar?  I use the <TAB> key (though it emits spaces)
2013-04-04 09:24:49	-->	cduez (~cduez@AMontsouris-651-1-176-29.w90-46.abo.wanadoo.fr) has joined #haskell
2013-04-04 09:24:58	-->	pranavrc (~pranavrc@unaffiliated/pranavrc) has joined #haskell
2013-04-04 09:25:14	-->	MroiZo (~oizo@212.27.0.250.mobile.3.dk) has joined #haskell
2013-04-04 09:25:21	<--	MroiZo (~oizo@212.27.0.250.mobile.3.dk) has quit (Remote host closed the connection)
2013-04-04 09:25:44	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 09:25:56	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-04-04 09:25:57	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-04 09:26:07	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 09:26:24	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 09:26:32	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-04 09:27:47	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-04 09:27:52	<--	rs0_ (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (Quit: leaving)
2013-04-04 09:27:58	-->	piotr (~quassel@e178078206.adsl.alicedsl.de) has joined #haskell
2013-04-04 09:28:05	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-04-04 09:28:27	-->	wtw_ (~wtw@unaffiliated/wtw) has joined #haskell
2013-04-04 09:28:47	-->	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has joined #haskell
2013-04-04 09:30:31	-->	charliesome_ (~textual@124-149-150-23.dyn.iinet.net.au) has joined #haskell
2013-04-04 09:31:30	-->	reckler (~reckler@ppp118-208-22-213.lns20.bne1.internode.on.net) has joined #haskell
2013-04-04 09:31:45	<--	wtw (~wtw@unaffiliated/wtw) has quit (Ping timeout: 248 seconds)
2013-04-04 09:32:07	<--	nobdraisentone (~nobdraise@93.188.40.242) has quit (Read error: Operation timed out)
2013-04-04 09:32:27	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 09:33:02	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 09:33:07	-->	williamh_ (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 09:33:09	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 09:33:15	-->	tomboy64 (~tomboy@unaffiliated/tomboy64) has joined #haskell
2013-04-04 09:33:30	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 09:33:32	--	williamh_ is now known as Guest83266
2013-04-04 09:34:01	-->	kurkale6ka (~kurkale6k@84.19.53.21) has joined #haskell
2013-04-04 09:34:02	<--	tomboy66 (~tomboy@unaffiliated/tomboy64) has quit (Ping timeout: 252 seconds)
2013-04-04 09:34:13	<--	purefn1 (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Ping timeout: 240 seconds)
2013-04-04 09:34:32	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 09:34:38	<--	mzero (~markl@m208-18.dsl.rawbw.com) has quit (Quit: mzero)
2013-04-04 09:34:41	-->	heruur (~tvh@23-146-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-04 09:34:51	kurkale6ka	Hi, why is this (++) <$> Just "johntra" resulting in Just ("johntra"++) and not Just (++"johntra")
2013-04-04 09:34:55	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 09:35:14	kurkale6ka	What's the rule
2013-04-04 09:35:18	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-04-04 09:35:35	<--	VZakharov_ (~vovka@placenta.corbina.net) has quit (Quit: Leaving)
2013-04-04 09:35:48	latermuse	what does the 'c' stand for in the lens type: lens :: (c -> a) -> (c -> a -> c) -> Lens' c a
2013-04-04 09:35:58	latermuse	is it just an ambiguous type like 'a'?
2013-04-04 09:36:14	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Ping timeout: 252 seconds)
2013-04-04 09:36:25	edwardk	probably 'container' or something
2013-04-04 09:36:29	edwardk	:info lens
2013-04-04 09:36:37	edwardk	@ty lens
2013-04-04 09:36:37	-->	JohnBat26 (~Eugene@89.175.77.161) has joined #haskell
2013-04-04 09:36:38	lambdabot	Functor f => (s -> a) -> (s -> b -> t) -> (a -> f b) -> s -> f t
2013-04-04 09:36:43	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-04-04 09:36:47	edwardk	its usually written that way
2013-04-04 09:37:20	edwardk	kurkale6ka: (++) a b = (a ++ b)
2013-04-04 09:37:24	<--	Guest83266 (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 240 seconds)
2013-04-04 09:37:37	<--	no-n (~no-n@95.177.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 248 seconds)
2013-04-04 09:37:46	-->	silver (~silver@178.120.228.10) has joined #haskell
2013-04-04 09:37:47	edwardk	(++) <$> Just "johntra" =  Just ((++) "johntra") = Just ("johntra"++)
2013-04-04 09:37:56	-->	VZakharov (~vovka@placenta.corbina.net) has joined #haskell
2013-04-04 09:38:21	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-04-04 09:38:22	luite_	i copied all three folds to a more permanent location http://hdiff.luite.com/reduce/
2013-04-04 09:38:57	kurkale6ka	edwardk: I get it, thx
2013-04-04 09:39:04	--	charliesome_ is now known as charliesome
2013-04-04 09:40:18	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Ping timeout: 264 seconds)
2013-04-04 09:40:37	-->	kmrhb (~kmrhb@dsl-66-36-138-75.mtl.aei.ca) has joined #haskell
2013-04-04 09:40:46	<--	kurkale6ka (~kurkale6k@84.19.53.21) has left #haskell ("WeeChat 0.3.9.2")
2013-04-04 09:42:28	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-04-04 09:42:34	<--	narens (~user@n163s130.ntc.blacksburg.shentel.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-04 09:42:53	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-04-04 09:43:12	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-04-04 09:43:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-04-04 09:44:13	--	drmegahe1tz is now known as drmegahertz
2013-04-04 09:44:42	<--	heruur (~tvh@23-146-103-86.dynamic.dsl.tng.de) has quit (Quit: Leaving.)
2013-04-04 09:46:40	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-04-04 09:46:53	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-04-04 09:47:01	<--	boegel (~boegel@183.244-242-81.adsl-dyn.isp.belgacom.be) has quit (Quit: Leaving)
2013-04-04 09:47:07	<--	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-04 09:47:43	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-04 09:48:11	-->	kerrick (~kerrick@c-98-207-96-34.hsd1.ca.comcast.net) has joined #haskell
2013-04-04 09:50:00	<--	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-04-04 09:50:58	-->	v (~v@61.173.91.86) has joined #haskell
2013-04-04 09:54:00	-->	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has joined #haskell
2013-04-04 09:54:07	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-04-04 09:55:13	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-04-04 09:55:24	<--	SaaMmY-laptop (~SaaMmY@ppp-61-23.98-62.inwind.it) has left #haskell
2013-04-04 09:55:28	<--	v (~v@61.173.91.86) has quit (Client Quit)
2013-04-04 09:55:32	-->	no-n (~no-n@24.180.69.111.dynamic.snap.net.nz) has joined #haskell
2013-04-04 09:57:06	--	pdxleif is now known as pdxleif_away
2013-04-04 09:58:24	-->	hamid__ (~nithp@5.250.6.36) has joined #haskell
2013-04-04 09:58:29	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-04-04 09:59:08	<--	hamid__ (~nithp@5.250.6.36) has quit (Client Quit)
2013-04-04 10:00:43	-->	amatsu_ (~amatsumag@119.12.23.209) has joined #haskell
2013-04-04 10:01:23	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 255 seconds)
2013-04-04 10:01:24	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 264 seconds)
2013-04-04 10:02:03	-->	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-04 10:02:28	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 10:02:36	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Ping timeout: 264 seconds)
2013-04-04 10:03:49	<--	finishingmove (~finishing@dynamic-87-105-134-202.ssp.dialog.net.pl) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-04 10:04:36	-->	Scabe (~Scabe@CPE-121-223-191-181.lns2.civ.bigpond.net.au) has joined #haskell
2013-04-04 10:04:37	-->	nobdraisentone (~nobdraise@85.235.191.82) has joined #haskell
2013-04-04 10:04:56	Scabe	How would I implement a function which uses this profile:
2013-04-04 10:05:14	Scabe	maybe_divide :: Maybe Integer -> Maybe Integer -> Maybe Integer
2013-04-04 10:05:15	<--	amatsu_ (~amatsumag@119.12.23.209) has quit (Client Quit)
2013-04-04 10:05:24	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Ping timeout: 252 seconds)
2013-04-04 10:05:38	Scabe	and then responds  >maybe_divide (Just 5)(Just 2)
2013-04-04 10:05:40	Scabe	Just 5
2013-04-04 10:05:43	Scabe	I mean Just 2
2013-04-04 10:05:54	-->	ISF (~ivan@187.64.222.221) has joined #haskell
2013-04-04 10:06:24	<--	coeus_ (~coeus@dslb-088-078-014-026.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-04-04 10:06:31	Scabe	>maybe_divide Nothing (Just 1) = Nothing
2013-04-04 10:08:10	mauke	liftA2
2013-04-04 10:08:58	mikeplus64	(or liftM2, but they're identical)
2013-04-04 10:09:18	mikeplus64	you can also explicitly pattern match; maybe_divide (Just x) (Just y) = Just (x / y); maybe_divide _ _ = Nothing
2013-04-04 10:09:18	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 245 seconds)
2013-04-04 10:10:45	-->	ptek (~ptek@217.64.164.1) has joined #haskell
2013-04-04 10:11:04	amatsu	Is there any way to map across a list of lists into one list, without using (++)?
2013-04-04 10:11:21	mikeplus64	concatMap?
2013-04-04 10:12:09	amatsu	mikeplus64: concatMap uses (++) internally.
2013-04-04 10:12:27	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-04-04 10:12:33	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: No route to host)
2013-04-04 10:12:37	mikeplus64	@src (++)
2013-04-04 10:12:37	lambdabot	[]     ++ ys = ys
2013-04-04 10:12:37	lambdabot	(x:xs) ++ ys = x : (xs ++ ys)
2013-04-04 10:12:37	lambdabot	-- OR
2013-04-04 10:12:37	lambdabot	xs ++ ys = foldr (:) ys xs
2013-04-04 10:12:38	<--	cduez (~cduez@AMontsouris-651-1-176-29.w90-46.abo.wanadoo.fr) has quit (Ping timeout: 255 seconds)
2013-04-04 10:12:39	amatsu	I guess as long as I don't strictly evaluate everything the repeated (++) calls shouldn't have a huge impact on performance..
2013-04-04 10:12:50	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 10:12:59	amatsu	oh!
2013-04-04 10:13:11	-->	Aune (~arne@volac.lysator.liu.se) has joined #haskell
2013-04-04 10:13:34	mikeplus64	because of list fusion you might be lucky and the ++ calls fused together when you compile with -O2
2013-04-04 10:13:42	--	Liskni_s1 is now known as Liskni_si
2013-04-04 10:14:11	amatsu	mikeplus64: Alright then, I'll give it a shot, thanks!
2013-04-04 10:14:25	quchen	amatsu: (++) is only bad if you parenthesize it the wrong way.
2013-04-04 10:14:37	quchen	There's nothing wrong with "concat" just because it uses (++).
2013-04-04 10:14:58	<--	ozgura (~ozgura@host-2-96-30-184.as13285.net) has quit (Remote host closed the connection)
2013-04-04 10:15:01	mikeplus64	maybe compile with -ddump-rules-fired or similar, although iirc the rule names are kind of unhelpful
2013-04-04 10:15:13	-->	hrehf (~s@p4FE3AE10.dip.t-dialin.net) has joined #haskell
2013-04-04 10:15:36	quchen	mikeplus64: There's only a handful of rules in Data.List, so if you know the name they're not hard to search for
2013-04-04 10:15:55	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-04 10:16:09	mikeplus64	yeah, but it would still be nice if they were a bit less cryptically named
2013-04-04 10:17:53	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-04 10:17:58	quchen	Oh, nevermind, there are no fusion rules in Data.List.
2013-04-04 10:18:06	quchen	GHC.Base then? :s
2013-04-04 10:18:11	mikeplus64	i suppose
2013-04-04 10:18:12	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 10:18:24	<--	dkristian (~dkristian@c122-104-142-189.rochd6.qld.optusnet.com.au) has left #haskell
2013-04-04 10:18:26	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-04-04 10:18:48	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 10:19:13	quchen	forall xs ys. xs ++ ys = augment (\c n -> foldr c n xs) ys
2013-04-04 10:19:20	quchen	Wonderful! ++ gone.
2013-04-04 10:19:24	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-04-04 10:19:27	quchen	(The rule is named "++".)
2013-04-04 10:19:36	-->	cduez (~cduez@AMontsouris-651-1-176-29.w90-46.abo.wanadoo.fr) has joined #haskell
2013-04-04 10:20:35	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 256 seconds)
2013-04-04 10:21:53	-->	replomikazuv (~replomika@p548CE30A.dip.t-dialin.net) has joined #haskell
2013-04-04 10:21:53	<--	replomikazuv (~replomika@p548CE30A.dip.t-dialin.net) has quit (Client Quit)
2013-04-04 10:21:55	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 10:22:52	-->	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has joined #haskell
2013-04-04 10:23:20	<--	dawe (~dawe@p508A663B.dip.t-dialin.net) has quit (Quit: leaving)
2013-04-04 10:23:27	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-04-04 10:27:07	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-04 10:27:13	<--	no-n (~no-n@24.180.69.111.dynamic.snap.net.nz) has quit (Ping timeout: 248 seconds)
2013-04-04 10:27:40	<--	cduez (~cduez@AMontsouris-651-1-176-29.w90-46.abo.wanadoo.fr) has quit (Quit: bye)
2013-04-04 10:28:30	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 252 seconds)
2013-04-04 10:29:02	-->	seafood (~seafood@48.8.233.220.static.exetel.com.au) has joined #haskell
2013-04-04 10:30:40	-->	ulfdoz (~mary@p5B38BD29.dip.t-dialin.net) has joined #haskell
2013-04-04 10:30:47	-->	Taneb (~nathan@host-92-23-115-199.as13285.net) has joined #haskell
2013-04-04 10:31:09	-->	xenon21 (~xenon@122.155.36.200) has joined #haskell
2013-04-04 10:31:18	<--	agumonkey (~agu@8.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-04-04 10:33:23	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 10:33:50	<--	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2013-04-04 10:33:55	-->	dEPY (~dEPY@46-150-62-58.cable.teleing.net) has joined #haskell
2013-04-04 10:34:24	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 240 seconds)
2013-04-04 10:34:44	-->	ctype_real (~ctype@ec2-23-22-199-114.compute-1.amazonaws.com) has joined #haskell
2013-04-04 10:36:19	-->	ana_ (5fdeef8d@gateway/web/freenode/ip.95.222.239.141) has joined #haskell
2013-04-04 10:36:23	ana_	hi
2013-04-04 10:36:41	<--	synonymous1 (~Adium@149.171.141.40) has quit (Quit: Leaving.)
2013-04-04 10:36:59	<--	miclorb (~miclorb@ppp121-44-27-66.lns20.syd6.internode.on.net) has quit (Remote host closed the connection)
2013-04-04 10:37:00	-->	no-n (~no-n@24.180.69.111.dynamic.snap.net.nz) has joined #haskell
2013-04-04 10:37:11	<--	Maarten_ (~maarten@87.208.219.89) has quit (Quit: Maarten_)
2013-04-04 10:38:02	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 246 seconds)
2013-04-04 10:38:08	ana_	can some one tell me how i can load one of this funktions? i.e. fun1 ? http://nopaste.me/paste/490163254515d3ba8616f6  , i always get  " not in scope" its a example of a friend
2013-04-04 10:39:00	<--	nobdraisentone (~nobdraise@85.235.191.82) has left #haskell
2013-04-04 10:39:14	-->	ParadoxMuffin (~paradoxmu@109-93-84-28.dynamic.isp.telekom.rs) has joined #haskell
2013-04-04 10:39:29	--	Watcher7 is now known as Watcher7|off
2013-04-04 10:39:42	<--	dented42 (~dented42@opengroove.org) has quit (Ping timeout: 264 seconds)
2013-04-04 10:39:43	mauke	ana_: what are you doing and what's the error message?
2013-04-04 10:40:16	-->	Thomyho4 (~thomyho@mnhm-590c13ad.pool.mediaWays.net) has joined #haskell
2013-04-04 10:41:21	quchen	ana_: It may help to format your code so lines aren't longer than 80 characters. I can't read what you've pasted.
2013-04-04 10:41:35	ana_	i just want to load "fun1" i.e. with " fun1 "hello"  , error is  always  somethink like this http://nopaste.me/paste/737869081515d3c9d0ee8f
2013-04-04 10:42:14	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-04-04 10:42:14	quchen	You can use "let" in GHCi to define things. 'let fun1 "hello" = "world"'
2013-04-04 10:43:03	<--	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-04-04 10:43:04	<--	wilfredh (uid159@gateway/web/irccloud.com/x-wdnzrifteodszybm) has quit (Ping timeout: 260 seconds)
2013-04-04 10:43:11	-->	trescenzi (~trescenzi@2620:91:0:163:cd72:5044:13d0:77ca) has joined #haskell
2013-04-04 10:43:15	<--	reiddrap- (~reiddrape@gateway/shell/ircrelay.com/x-uloxzhyvfvtkkkkh) has quit (Quit: IRCRelay - http://ircrelay.com)
2013-04-04 10:43:28	-->	reiddraper (reiddraper@gateway/shell/ircrelay.com/x-ccnnvpgpblnfqlpg) has joined #haskell
2013-04-04 10:43:55	-->	circle (~circle@203-219-13-238.static.tpgi.com.au) has joined #haskell
2013-04-04 10:44:24	mauke	ana_: ok, but what did you do before that?
2013-04-04 10:44:34	-->	dented42 (~dented42@opengroove.org) has joined #haskell
2013-04-04 10:45:17	ana_	oh , i need to learn some basics in hascell, this is e example code, i just need to get the code run, the code is correkt
2013-04-04 10:45:40	ana_	let sems to be fine, now he get the function,, but no putput
2013-04-04 10:45:45	ana_	*output
2013-04-04 10:45:47	-->	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-04 10:46:03	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-04 10:46:07	 *	hackagebot raw-strings-qq 1.0 - Raw string literals for Haskell.  http://hackage.haskell.org/package/raw-strings-qq-1.0 (MikhailGlushenkov)
2013-04-04 10:46:07	quchen	"let" defines the function. You can use it afterwards.
2013-04-04 10:46:10	-->	djcoin (~makina@ip-114.net-89-2-70.rev.numericable.fr) has joined #haskell
2013-04-04 10:46:15	quchen	 let foo = 2
2013-04-04 10:46:16	quchen	 foo
2013-04-04 10:46:18	quchen	 >>> 2
2013-04-04 10:46:47	<--	arenz (~arenz@HSI-KBW-046-005-061-181.hsi8.kabel-badenwuerttemberg.de) has quit (Ping timeout: 246 seconds)
2013-04-04 10:46:53	<--	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has quit (Ping timeout: 240 seconds)
2013-04-04 10:46:58	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-04 10:47:14	-->	ramses_ (863ab323@gateway/web/freenode/ip.134.58.179.35) has joined #haskell
2013-04-04 10:47:24	-->	arenz (~arenz@HSI-KBW-046-005-061-181.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-04 10:47:31	<--	trescenzi (~trescenzi@2620:91:0:163:cd72:5044:13d0:77ca) has quit (Ping timeout: 245 seconds)
2013-04-04 10:47:33	<--	zorzar (~zorzar@z.futw.eu) has quit (Ping timeout: 240 seconds)
2013-04-04 10:49:06	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-04-04 10:49:24	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 10:49:33	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 240 seconds)
2013-04-04 10:49:42	ana_	quchen:  maybe this helps ? http://nopaste.me/paste/751054525515d3e9300cfb
2013-04-04 10:49:43	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-04 10:49:59	<--	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 255 seconds)
2013-04-04 10:50:34	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Remote host closed the connection)
2013-04-04 10:50:34	-->	kaoskorobase (~sk@92.56.206.219) has joined #haskell
2013-04-04 10:50:37	quchen	fun1 is a function.
2013-04-04 10:50:50	quchen	When you type in "fun1" only, GHCi tries to display it.
2013-04-04 10:50:52	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-04-04 10:51:04	quchen	However, there's no way of displaying a function, and that's where the error comes from.
2013-04-04 10:51:11	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (Ping timeout: 252 seconds)
2013-04-04 10:51:17	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-04-04 10:51:18	quchen	What you *can* display are that function's values.
2013-04-04 10:51:40	quchen	i.e. type in 'fun1 "hello"'
2013-04-04 10:51:45	-->	zhulikas (~zhulikas@ip-46-251-50-56.kava.lt) has joined #haskell
2013-04-04 10:51:48	quchen	(Or whatever you've defined fun1 with)
2013-04-04 10:51:58	--	pdxleif_away is now known as pdxleif
2013-04-04 10:53:00	hpaste	quchen pasted “Basic GHCi usage” at http://hpaste.org/85149
2013-04-04 10:53:05	quchen	^ Like this.
2013-04-04 10:53:10	--	pdxleif is now known as pdxleif_away
2013-04-04 10:53:15	-->	swi (~swi@altlinux/developer/swi) has joined #haskell
2013-04-04 10:53:20	<--	dsadsdasd (~Adium@37.157.191.242) has quit (Quit: Leaving.)
2013-04-04 10:53:26	swi	Hello everyone :)
2013-04-04 10:53:33	quchen	Morning :-)
2013-04-04 10:53:54	swi	i have a trouble understanding applicatives. Can someone help me ?
2013-04-04 10:54:01	quchen	Yes.
2013-04-04 10:54:34	-->	ozgura (~ozgura@dyn-207-178.cs.st-andrews.ac.uk) has joined #haskell
2013-04-04 10:55:36	swi	thanks :) i.e. a fmap (or <$>). As i understand fmap is like mpa (well map just a fmap only for lists). So how can i use fmap to apply some function to some list ?
2013-04-04 10:55:46	-->	fantasticsid (~user@216.240.135.173) has joined #haskell
2013-04-04 10:56:02	ramses_	> (+1) <$> [1..10]
2013-04-04 10:56:04	lambdabot	  [2,3,4,5,6,7,8,9,10,11]
2013-04-04 10:56:04	quchen	fmap doesn't need Applicative. fmap is from Functor.
2013-04-04 10:56:09	 *	hackagebot raw-strings-qq 1.0.1 - Raw string literals for Haskell.  http://hackage.haskell.org/package/raw-strings-qq-1.0.1 (MikhailGlushenkov)
2013-04-04 10:56:11	mauke	swi: fmap someFunction someList
2013-04-04 10:56:13	quchen	Applicatives are an extension of Functor.
2013-04-04 10:57:18	<--	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has quit (Remote host closed the connection)
2013-04-04 10:57:20	quchen	swi: For lists, fmap isn't "like" map, fmap *is* map. :-)
2013-04-04 10:57:39	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 10:57:53	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Quit: Lost terminal)
2013-04-04 10:57:59	swi	quchen: seems like i confuse abotu that functor/applicatives/monoids at all :D
2013-04-04 10:58:00	-->	heruur (~tvh@23-146-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-04 10:58:18	<--	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-04-04 10:58:20	quchen	You probably meant "monads" there, not "monoids" :P
2013-04-04 10:58:20	mauke	I love monoids
2013-04-04 10:58:30	ramses_	swi: applicatives are defined by "pure" and "<*>"
2013-04-04 10:58:31	quchen	MAUKE, WHY? TELL US!
2013-04-04 10:58:32	quchen	:-)
2013-04-04 10:58:39	-->	Eduard_Munteanu (~Eduard_Mu@188.25.6.7) has joined #haskell
2013-04-04 10:58:42	swi	quchen: monads, yes
2013-04-04 10:58:45	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-04 10:58:58	mauke	quchen: they're so easy
2013-04-04 10:59:00	ramses_	swi: LYAH explains those three pretty well imho
2013-04-04 10:59:04	ramses_	@where lyah
2013-04-04 10:59:04	lambdabot	http://www.learnyouahaskell.com/
2013-04-04 10:59:35	swi	ramses_: in fact i just end reading LYAH yesterday :(
2013-04-04 10:59:40	quchen	It explains everything well except Reader :s
2013-04-04 11:00:24	<--	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2013-04-04 11:00:31	ramses_	swi: then maybe you should read the chapter on applicatives again, I had to read it a couple of times before everything really sank in
2013-04-04 11:00:52	swi	as i'v read lyah i remeber that fmap, but cant understand it's using with <*>
2013-04-04 11:00:53	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 240 seconds)
2013-04-04 11:01:06	ramses_	swi: they're quite easy once you get them, but they are pretty strange until then
2013-04-04 11:01:41	swi	ramses_: seems like it. this book is written so nice that you read and think 'wow, i catch it!", but a few pages left and you find yourself in 'wtf?' situation :)
2013-04-04 11:01:57	Eduard_Munteanu	That's normal.
2013-04-04 11:02:05	mauke	> [filter isLower, map toUpper] <*> ["Hi", "World"]
2013-04-04 11:02:08	lambdabot	  ["i","orld","HI","WORLD"]
2013-04-04 11:02:15	-->	mgsloan (~mgsloan@c-50-149-84-84.hsd1.wa.comcast.net) has joined #haskell
2013-04-04 11:02:23	ramses_	swi: really, just give that chapter another read, it will give a more cohesive explanation then you'll get here, I think
2013-04-04 11:02:40	ramses_	s/then/than
2013-04-04 11:04:12	swi	mauke: oh that it! it' confused me alot about the fact thet :t for <$> and <*> is the same
2013-04-04 11:04:23	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Ping timeout: 255 seconds)
2013-04-04 11:04:24	swi	well.. allmost
2013-04-04 11:04:34	b_jonas	:t <$>
2013-04-04 11:04:36	lambdabot	parse error on input `<$>'
2013-04-04 11:04:43	Eduard_Munteanu	You mean fmap and (<$>)?
2013-04-04 11:04:43	quchen	swi: That "almost" is crucial :-)
2013-04-04 11:04:43	b_jonas	:t (<$>)
2013-04-04 11:04:44	lambdabot	Functor f => (a -> b) -> f a -> f b
2013-04-04 11:04:48	b_jonas	:t (<*>)
2013-04-04 11:04:49	lambdabot	Applicative f => f (a -> b) -> f a -> f b
2013-04-04 11:04:52	b_jonas	they're no way the same
2013-04-04 11:05:11	ramses_	their f isn't even the same thing
2013-04-04 11:05:27	<--	fantasticsid (~user@216.240.135.173) has quit (Remote host closed the connection)
2013-04-04 11:05:28	<--	xpika (~jrg@58.171.26.178) has quit (Read error: Connection reset by peer)
2013-04-04 11:05:35	-->	xpika (~jrg@58.171.26.178) has joined #haskell
2013-04-04 11:06:17	swi	ramses_: type description sometimes so informative for me
2013-04-04 11:06:44	ramses_	swi: I have trouble parsing that sentence...
2013-04-04 11:07:05	swi	uninformative*
2013-04-04 11:07:22	ramses_	that makes more sense :) You'll get used to it
2013-04-04 11:07:41	quchen	swi: What Functors, Applicatives and Monads *are* are structures that share some common properties. These structures can be found in many places, hence Functors, Applicatives and Monads can do many different things. The main thing when learning them is recognizing those patterns.
2013-04-04 11:08:18	swi	so i need to read this chapter again and again
2013-04-04 11:08:20	quchen	I just played around with Maybe and friends for a couple of months. Spoiler: it becomes crystal clear after a while :-)
2013-04-04 11:08:35	mauke	swi: nah, just start using them somewhere
2013-04-04 11:08:53	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-04-04 11:08:59	mauke	> div 5 2
2013-04-04 11:09:01	lambdabot	  2
2013-04-04 11:09:09	ramses_	swi: at the same time play with them, just reading over and over wont help..
2013-04-04 11:09:09	mauke	> div <$> Just 5 <*> Just 2
2013-04-04 11:09:11	lambdabot	  Just 2
2013-04-04 11:09:27	mauke	> div <$> [5, 10, 7] <*> [2, 3]
2013-04-04 11:09:28	lambdabot	  [2,1,5,3,3,2]
2013-04-04 11:09:29	swi	mauke: i can't figure out where (exclude some artificial examples)
2013-04-04 11:09:59	swi	> div <$> [5,10,7] <* [2,3]
2013-04-04 11:10:00	lambdabot	  *Exception: showList: No overloading for function
2013-04-04 11:10:05	swi	:D
2013-04-04 11:10:11	mauke	:t div <$> [5,10,7] <* [2,3]
2013-04-04 11:10:13	lambdabot	Integral a => [a -> a]
2013-04-04 11:10:18	mauke	a list of functions
2013-04-04 11:10:53	-->	cduez (~cduez@AMontsouris-651-1-176-29.w90-46.abo.wanadoo.fr) has joined #haskell
2013-04-04 11:11:00	mauke	> sequence (div <$> [5,10,7] <* [2,3]) 100
2013-04-04 11:11:01	lambdabot	  [0,0,0,0,0,0]
2013-04-04 11:11:02	quchen	I don't like list much as an example Applicative. I'd recommend using Maybe.
2013-04-04 11:11:04	ramses_	swi: I learned the most about using applicatives from writing a parser for a simple language using only applicative operators, no monadic ones. But that may be a little much, depending on your background
2013-04-04 11:11:08	mauke	> sequence (div <$> [5,10,7] <* [2,3]) 2
2013-04-04 11:11:09	lambdabot	  [2,2,5,5,3,3]
2013-04-04 11:11:24	-->	randomlogin (~randomlog@37.17.113.143) has joined #haskell
2013-04-04 11:11:27	 *	Kinnison doesn't quite see what <* is doing there
2013-04-04 11:11:30	-->	typoclass (~typoclass@p4FC9173B.dip.t-dialin.net) has joined #haskell
2013-04-04 11:11:37	<--	takumn_ (~takumn@161.90.128.210.bf.2iij.net) has quit (Read error: Connection reset by peer)
2013-04-04 11:11:39	mauke	> [5, 10, 7] <* [2,3]
2013-04-04 11:11:39	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-04-04 11:11:40	lambdabot	  [5,5,10,10,7,7]
2013-04-04 11:12:04	-->	takumn (~takumn@161.90.128.210.bf.2iij.net) has joined #haskell
2013-04-04 11:12:06	ramses_	Kinnison: it repeats every operation n times, with n the lenght of the list to its right. Its elements don't matter
2013-04-04 11:12:12	mauke	> [ x | x <- [5, 10, 7], _ <- [2, 3] ]
2013-04-04 11:12:14	lambdabot	  [5,5,10,10,7,7]
2013-04-04 11:12:17	mauke	^
2013-04-04 11:12:19	 *	Kinnison sees
2013-04-04 11:12:28	-->	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-04-04 11:12:51	ramses_	Kinnison: it looks at the effects (number of results in the list) but not the values
2013-04-04 11:12:55	swi	all thoses <* << >> =<< just scare
2013-04-04 11:12:59	quchen	Kinnison: *> is >>: Execute first action, discard result, execute second action. <* is the other way round: execute first action (retain result), execute second action and discard its result.
2013-04-04 11:13:13	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-04-04 11:13:16	Kinnison	quchen: aah, neato, I get it now
2013-04-04 11:13:20	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-04 11:13:56	-->	tanakh__ (~tanakh@186240086111.fj.dyn-bwmx.kddi.ne.jp) has joined #haskell
2013-04-04 11:14:03	swi	ramses_: my background is heavily attached to operation with DB and processing data from them
2013-04-04 11:14:24	<--	tanakh_ (~tanakh@186240086111.fj.dyn-bwmx.kddi.ne.jp) has quit (Ping timeout: 240 seconds)
2013-04-04 11:15:23	quchen	Kinnison: In monadic terms, "m << f = do { x <- m; f; return x }"
2013-04-04 11:15:34	quchen	(<< doesn't actually exist)
2013-04-04 11:15:40	<--	kfish (~conrad@cm84.eta99.maxonline.com.sg) has quit (Quit: Fish!)
2013-04-04 11:16:03	swi	:t (>>)
2013-04-04 11:16:04	lambdabot	Monad m => m a -> m b -> m b
2013-04-04 11:16:08	mauke	select functions.f(args.x) from functions cross join args
2013-04-04 11:16:14	ramses_	it would just be "m << f = do { m; f }", I guess
2013-04-04 11:16:24	ramses_	s/<</>>
2013-04-04 11:16:31	-->	hpd (~hpd@static.6.236.40.188.clients.your-server.de) has joined #haskell
2013-04-04 11:16:41	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 256 seconds)
2013-04-04 11:16:44	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-04 11:16:57	ramses_	ah, wait, I'm being confused!
2013-04-04 11:17:05	 *	swi remember that >> is just like do block (like pipe in linux)
2013-04-04 11:17:18	Kinnison	I thought >>= was more like pipe
2013-04-04 11:17:19	 *	ramses_ goes off to get more coffee
2013-04-04 11:17:28	swi	damn
2013-04-04 11:17:29	quchen	swi: Don't jump to >> and monads yet. You're working on Applicative first. :-P
2013-04-04 11:17:41	Kinnison	quchen: Seems to me that << would be a potentially interesting thing to have :-)
2013-04-04 11:17:45	swi	quchen: seems like i need to work at functor first :D
2013-04-04 11:17:58	Kinnison	swi: Aye, build carefully, functor, applicative, (monoid?), monad
2013-04-04 11:17:59	ramses_	Kinnison: <* is just as good ;)
2013-04-04 11:18:03	quchen	The hierarchy is Functor -> Applicative -> Monad.
2013-04-04 11:18:08	mauke	monoid is not part of the same track
2013-04-04 11:18:09	 *	Kinnison jumped to monad too early and is only now starting to get the underlying stuff
2013-04-04 11:18:13	Kinnison	mauke: ta, I wasn't sure
2013-04-04 11:18:15	Kinnison	ramses_: I guess so
2013-04-04 11:18:21	mauke	monoids are much simpler
2013-04-04 11:18:40	mauke	even easier than Num
2013-04-04 11:18:49	swi	mauke: what is that select functions.f(args.x) from functions cross join args ?
2013-04-04 11:18:49	quchen	Monoids were "why is this even there" simple when I read about them first :-)
2013-04-04 11:19:08	mauke	swi: pseudo-SQL
2013-04-04 11:19:11	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 11:19:23	swi	mauke: surely pseudo :)
2013-04-04 11:19:31	mauke	quchen: you know about Data.Default, right? :-)
2013-04-04 11:19:41	swi	looks like a some orm
2013-04-04 11:19:46	quchen	mauke: No
2013-04-04 11:19:55	mauke	@hackage data-default
2013-04-04 11:19:56	lambdabot	http://hackage.haskell.org/package/data-default
2013-04-04 11:20:39	quchen	swi: So here's something to practice on: You've got a list [1,2,3,4,5]. Make this into [("hello", 1), ("hello", 2), ...] using fmap.
2013-04-04 11:21:06	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-04-04 11:21:13	quchen	mauke: Okay, well that's ummm
2013-04-04 11:21:22	swi	quchen: hm.. interesting :
2013-04-04 11:21:24	quchen	Why is this even there :D
2013-04-04 11:21:24	Lethalman	about Default... why def instead of default? :S
2013-04-04 11:21:32	mauke	Lethalman: 'default' is a keyword
2013-04-04 11:21:39	Lethalman	ah
2013-04-04 11:22:04	mauke	quchen: have you ever written a no-op exception handler?
2013-04-04 11:22:09	Lethalman	good to know, just read about default
2013-04-04 11:22:11	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-04-04 11:22:16	mauke	something like ... `catch` \_ -> return ()
2013-04-04 11:22:24	quchen	mauke: I.e. a catchall?
2013-04-04 11:22:26	-->	niklasb (~codeslay0@dslb-188-098-177-074.pools.arcor-ip.net) has joined #haskell
2013-04-04 11:22:29	mauke	yeah
2013-04-04 11:22:37	Taneb	 Aren't catchalls bad ideas?
2013-04-04 11:22:38	quchen	Yes
2013-04-04 11:22:39	swi	> fmap (\x->("hello",x)) [1,2,3,4,5]
2013-04-04 11:22:40	lambdabot	  [("hello",1),("hello",2),("hello",3),("hello",4),("hello",5)]
2013-04-04 11:22:43	quchen	Taneb: Depends.
2013-04-04 11:22:46	quchen	swi: Nice!
2013-04-04 11:22:52	mauke	quchen: ... `catch` def
2013-04-04 11:23:02	swi	quchen: but i think lambda is not the nicest way :)
2013-04-04 11:23:14	FireFly	So then remove it :p
2013-04-04 11:23:21	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-04-04 11:23:22	mauke	quchen: that's a triple combo using the Default instances of (), IO, and (e ->)
2013-04-04 11:23:32	FireFly	Hm
2013-04-04 11:23:48	quchen	mauke: oooookayyy
2013-04-04 11:23:54	quchen	mauke: Processing ...
2013-04-04 11:24:16	supki	I write these handlers as `mplus` return ()
2013-04-04 11:24:30	mauke	quchen: what's also fairly common is that you have a config record
2013-04-04 11:24:30	-->	RichyB (~richardb@rubberductions.plus.com) has joined #haskell
2013-04-04 11:24:39	quchen	mauke: My Catchall was more complicated, I can tell you that :-D
2013-04-04 11:25:12	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-04-04 11:25:15	mauke	Config{ extraFields = [], caseInsensitive = False, sortOrder = Ascending, ... } or something like that
2013-04-04 11:26:13	mauke	and because users don't want to type out all fields manually, the library provides a default config that can be adapted
2013-04-04 11:26:16	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 245 seconds)
2013-04-04 11:26:21	swi	FireFly: hard to figure it out. fmap apply f to elem of list. but how can i apply tuple?
2013-04-04 11:26:31	mauke	defaultConfig{ sortOrder = Descending }  -- everything else is defaults
2013-04-04 11:26:36	ramses_	@ty (,) -- swi
2013-04-04 11:26:38	lambdabot	a -> b -> (a, b)
2013-04-04 11:27:02	quchen	Makes sense. So how does "`catch` def" work? def = function, so it's `catch` const def. This def is now IO, whose default is presumably "return def", and now def becomes ()?
2013-04-04 11:27:08	ramses_	> (,) "hello" 4
2013-04-04 11:27:10	lambdabot	  ("hello",4)
2013-04-04 11:27:29	ramses_	swi: ^ that should get you started
2013-04-04 11:28:06	mauke	quchen: yes, but I was cheating
2013-04-04 11:28:12	-->	bytbox (~s@srl.student.umd.edu) has joined #haskell
2013-04-04 11:28:22	swi	:t (,)
2013-04-04 11:28:23	lambdabot	a -> b -> (a, b)
2013-04-04 11:28:29	mauke	quchen: it doesn't work as written with the current Control.Exception.catch (you need more type information)
2013-04-04 11:28:36	swi	damn.. all is function! damn! stupid me
2013-04-04 11:28:38	-->	lennart_ (~lennart@kiel-5f77be4e.pool.mediaWays.net) has joined #haskell
2013-04-04 11:28:38	quchen	mauke: Why isn't there a Monad version instance for Default? Seems odd that only IO has a def instance
2013-04-04 11:28:42	<--	sawgij (~sawjig@gateway/tor-sasl/sawjig) has quit (Ping timeout: 276 seconds)
2013-04-04 11:28:47	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-04 11:28:53	quchen	mauke: Hm. Well it's certainly useful to know in any case.
2013-04-04 11:29:09	FireFly	> ("hello",) 4  -- why does this require an extension though? it seems like it'd be unambiguous to me
2013-04-04 11:29:11	lambdabot	  Illegal tuple section: use -XTupleSections
2013-04-04 11:29:14	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-04-04 11:29:21	swi	> fmap ((,) "hello") [1..5]
2013-04-04 11:29:22	lambdabot	  [("hello",1),("hello",2),("hello",3),("hello",4),("hello",5)]
2013-04-04 11:29:30	quchen	FireFly: It's unambiguous, but not part of the standard.
2013-04-04 11:29:31	mauke	quchen: works with catchIOError, though
2013-04-04 11:29:38	FireFly	quchen: ah
2013-04-04 11:29:45	mauke	quchen: Monad is another class, not a type. I can't make it an instance
2013-04-04 11:29:56	quchen	mauke: What's the difference between "IO errors" and normal thrown exceptions by the way?
2013-04-04 11:30:04	mauke	and Haskell doesn't let you say: "use this instance for any type that is also an instance of this other class"
2013-04-04 11:30:07	swi	and i allmost forgot that tuple in haskell not the same as in python :\
2013-04-04 11:30:23	<--	pranavrc (~pranavrc@unaffiliated/pranavrc) has quit (Quit: Ping timeout: ∞)
2013-04-04 11:30:23	mauke	quchen: IO errors are this specific type: http://hackage.haskell.org/packages/archive/base/latest/doc/html/Control-Exception-Base.html#t:IOException
2013-04-04 11:30:31	mauke	quchen: other exceptions are other types
2013-04-04 11:30:55	mauke	some examples on the same page
2013-04-04 11:31:21	quchen	Oh, right.
2013-04-04 11:31:33	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 240 seconds)
2013-04-04 11:31:53	quchen	My confusion came from somewhere else I think: why is there throw and throwIO
2013-04-04 11:31:54	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 240 seconds)
2013-04-04 11:32:22	swi	quchen:  ramses_ thanks a lot :) Going to read that chapter from lyah again and play around a bit :)
2013-04-04 11:32:36	<--	niklasb (~codeslay0@dslb-188-098-177-074.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-04-04 11:33:19	quchen	swi: You've got a 'Just (1,"hello")'. Make this 'Just ("hello",1)' using fmap
2013-04-04 11:33:25	ramses_	swi: np, don't hesitate to come back here if you've got more questions
2013-04-04 11:33:44	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-04 11:34:14	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 11:34:39	<--	ana_ (5fdeef8d@gateway/web/freenode/ip.95.222.239.141) has quit (Quit: Page closed)
2013-04-04 11:34:59	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Ping timeout: 255 seconds)
2013-04-04 11:35:42	-->	cads (~m@c-24-99-19-61.hsd1.ga.comcast.net) has joined #haskell
2013-04-04 11:36:01	-->	Icewing (~Icewing@unaffiliated/icewing) has joined #haskell
2013-04-04 11:37:02	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-04 11:38:18	-->	eikke (~nicolas@dD57738B5.access.telenet.be) has joined #haskell
2013-04-04 11:38:22	-->	inarenvi (~quassel@92.59.128.136) has joined #haskell
2013-04-04 11:38:46	<--	jlaire (~jlaire@80-248-242-78.cust.suomicom.fi) has quit (Ping timeout: 245 seconds)
2013-04-04 11:38:53	<--	edtsech (~edtsech@194.213.198.34) has quit (Ping timeout: 252 seconds)
2013-04-04 11:38:53	<--	bitonic (~user@ppp-232-137.27-151.libero.it) has quit (Ping timeout: 245 seconds)
2013-04-04 11:39:16	-->	madjestic (~madjestic@aamz53.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-04 11:39:34	<--	arenz (~arenz@HSI-KBW-046-005-061-181.hsi8.kabel-badenwuerttemberg.de) has quit (Read error: Connection reset by peer)
2013-04-04 11:40:30	-->	jameswetter (~jameswett@180.92.118.130) has joined #haskell
2013-04-04 11:41:35	<--	hrehf (~s@p4FE3AE10.dip.t-dialin.net) has quit (Quit: bfg)
2013-04-04 11:41:50	xpika	is there a winghci for OSX?
2013-04-04 11:42:14	quchen	The terminal? :s
2013-04-04 11:42:39	-->	RoXtein (~roxtein@di17.di.fct.unl.pt) has joined #haskell
2013-04-04 11:42:49	-->	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-04-04 11:43:17	<--	permagreen (~donovan@204-195-27-175.wavecable.com) has quit (Ping timeout: 252 seconds)
2013-04-04 11:44:14	xpika	quchen: is there a terminal i can get where i can highlight and then replace the text ive clicked on?
2013-04-04 11:45:11	-->	permagreen (~donovan@204-195-27-175.wavecable.com) has joined #haskell
2013-04-04 11:45:33	quchen	Not that I know of
2013-04-04 11:45:57	quchen	But all I've ever used is gnome-terminal, so I'm not the right guy to ask
2013-04-04 11:46:17	-->	arenz (~arenz@HSI-KBW-046-005-061-181.hsi8.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-04 11:46:47	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 11:47:09	typoclass	xpika: you can always hit the cursor up key, which will fetch lines that you earlier entered. you can then edit them. also, try hitting tab after you entered half of a function name, e.g. "conc" + tab should complete it to "concat"
2013-04-04 11:48:02	-->	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has joined #haskell
2013-04-04 11:48:22	quchen	typoclass, xpika: You can even use Bash keys in GHCi. Hit Ctrl+R :-D
2013-04-04 11:48:36	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-04-04 11:50:25	Kneiva	xpika: I use a text editor to modify code and then I just load that file in ghci (eg. :load mytest.hs). And having them both open, it's pretty easy to jump between them.
2013-04-04 11:51:48	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-04-04 11:52:12	<--	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Remote host closed the connection)
2013-04-04 11:52:26	mauke	quchen: throw is like error in that it constructs a "value" of an arbitrary type that throws an exception when evaluated
2013-04-04 11:52:30	Kneiva	and ":reload" or ":r" to refresh that file
2013-04-04 11:52:57	mauke	quchen: throwIO is an IO command for throwing an exception
2013-04-04 11:54:16	-->	MrFenix (~JanB@p57A1AD69.dip.t-dialin.net) has joined #haskell
2013-04-04 11:54:25	<--	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 258 seconds)
2013-04-04 11:54:58	-->	nimred (~nimred@unaffiliated/nahra) has joined #haskell
2013-04-04 11:55:13	quchen	mauke: Oh, so I can see "throwIO" like a "Nothing".
2013-04-04 11:55:20	-->	SoupEvil (~jloos@e177148059.adsl.alicedsl.de) has joined #haskell
2013-04-04 11:55:32	quchen	I can bind it to a variable and it doesn't hurt, but when I perform it it'll crash
2013-04-04 11:55:47	quchen	With that in mind, it's lunch time. :-)
2013-04-04 11:56:47	-->	blueonyx (~blueonyx@unaffiliated/blueonyx) has joined #haskell
2013-04-04 11:57:35	<--	bytbox (~s@srl.student.umd.edu) has quit (Ping timeout: 252 seconds)
2013-04-04 11:57:54	-->	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has joined #haskell
2013-04-04 11:58:24	blueonyx	hi, how can i use pattern guard syntax, when i cant extract data via pattern matching (because of abstract data type)?
2013-04-04 11:58:24	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 11:58:40	<--	SoupE (~jloos@e177169139.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-04-04 11:58:46	-->	jlaire (~jlaire@80-248-241-68.cust.suomicom.fi) has joined #haskell
2013-04-04 11:58:59	-->	jbetzend (~jbetzend@ip-178-202-212-240.unitymediagroup.de) has joined #haskell
2013-04-04 11:58:59	Cale	blueonyx: Well, pattern guards let you match on the result of applying a function.
2013-04-04 11:59:19	blueonyx	my terminology is probably bad here
2013-04-04 11:59:35	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-04 11:59:43	-->	sirsten (54893c3e@gateway/web/freenode/ip.84.137.60.62) has joined #haskell
2013-04-04 11:59:45	<--	sirsten (54893c3e@gateway/web/freenode/ip.84.137.60.62) has left #haskell
2013-04-04 11:59:46	typoclass	blueonyx: do you have an example? (please use hpaste if the code is > 1 line)
2013-04-04 11:59:49	typoclass	@where hpaste
2013-04-04 11:59:49	lambdabot	http://hpaste.org/
2013-04-04 12:00:01	Cale	So, you can apply a function to the value of your abstract data type which produces a result which is possible to pattern match on, hopefully
2013-04-04 12:00:26	hpaste	blueonyx pasted “rewrite for abstract data type” at http://hpaste.org/85154
2013-04-04 12:01:09	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Ping timeout: 248 seconds)
2013-04-04 12:01:13	-->	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-04-04 12:01:26	-->	Maarten_ (~maarten@095-097-231-009.static.chello.nl) has joined #haskell
2013-04-04 12:02:08	blueonyx	typoclass, Cale: i tried a where clause for all | guards, which failed :/
2013-04-04 12:02:54	<--	xpika (~jrg@58.171.26.178) has quit (Ping timeout: 240 seconds)
2013-04-04 12:03:02	Cale	Where's the pattern guard here?
2013-04-04 12:03:14	blueonyx	-pattern then?
2013-04-04 12:03:24	blueonyx	whats the pipe called?
2013-04-04 12:03:31	Cale	oh, that's just a guard
2013-04-04 12:03:35	blueonyx	yea sry
2013-04-04 12:03:35	typoclass	blueonyx: ah :-) yeah, it's called just 'guard' here. a pattern guard is another thing
2013-04-04 12:03:38	Cale	You're just using a normal guard :)
2013-04-04 12:03:46	<--	jlaire (~jlaire@80-248-241-68.cust.suomicom.fi) has quit (Ping timeout: 245 seconds)
2013-04-04 12:04:00	Cale	So, what's the problem with this code?
2013-04-04 12:04:02	blueonyx	my problem is then about "pattern matching" and "guards" k
2013-04-04 12:04:08	Cale	sc can't be compared with 304?
2013-04-04 12:04:11	hamid	haha implementing a stream in strict lanauages like c++ doesn't mean anything at all! i did implemented that and remembered that I don't have lazy evalution. what can i do? :)) it was just a mess.
2013-04-04 12:04:41	blueonyx	Cale: the H.Response is no longer exported, so i have to use record syntax (responseStatus)
2013-04-04 12:04:43	typoclass	blueonyx: by the way, i think in this particular case, you can put the 304 directly in line 1 (HT.Status 304 sm)
2013-04-04 12:04:51	Cale	hamid: Easy! Just implement lazy evaluation. ;)
2013-04-04 12:04:51	-->	piotr_ (~quassel@e178079088.adsl.alicedsl.de) has joined #haskell
2013-04-04 12:05:01	-->	jlaire (~jlaire@80-248-242-78.cust.suomicom.fi) has joined #haskell
2013-04-04 12:05:02	notdan	I don't know, I've implemented streams in Scheme a while ago
2013-04-04 12:05:08	<--	piotr (~quassel@e178078206.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-04-04 12:05:09	notdan	but I bet it's messier in C++
2013-04-04 12:05:43	Cale	blueonyx: aha, then your answer really is to use pattern guards!
2013-04-04 12:05:45	hamid	Cale, it just doesn't feel right :D
2013-04-04 12:06:07	aCube	Streams don't need a lazy language, do they? They're just a step function and a value, aren't they?
2013-04-04 12:06:27	hamid	aCube, streams are infinits.
2013-04-04 12:06:38	hamid	that's the point. how can i use them :P
2013-04-04 12:07:59	hpaste	Cale annotated “rewrite for abstract data type” with “rewrite for abstract data type (annotation)” at http://hpaste.org/85154#a85155
2013-04-04 12:08:09	Cale	blueonyx: ^^
2013-04-04 12:08:34	Cale	blueonyx: That'll work if you stick {-# LANGUAGE PatternGuards #-} at the top of your file
2013-04-04 12:09:04	Cale	blueonyx: you could also just awkwardly use case to match, but the fall-through can be really nice
2013-04-04 12:09:11	<--	jlaire (~jlaire@80-248-242-78.cust.suomicom.fi) has quit (Ping timeout: 245 seconds)
2013-04-04 12:09:57	blueonyx	Cale: yea thanks, but i have forgotten more lines where i test sc, so i need to repeat the pattern guard to extract the status?
2013-04-04 12:10:05	swi	quchen: em.. if i use swap from Data.Tuple it is ok ? :)
2013-04-04 12:10:10	blueonyx	Cale: how about the case to match?
2013-04-04 12:11:02	hpaste	typoclass annotated “rewrite for abstract data type” with “rewrite for abstract data type (annotation)” at http://hpaste.org/85154#a85156
2013-04-04 12:11:11	typoclass	blueonyx: how about this? ^^
2013-04-04 12:11:46	blueonyx	typoclass: still error: no data constructor H.Response :)
2013-04-04 12:11:56	blueonyx	Cale: thanks, found http://www.haskell.org/haskellwiki/Case#Guards
2013-04-04 12:12:01	blueonyx	typoclass: thanks anyhow
2013-04-04 12:12:04	hpaste	Cale annotated “rewrite for abstract data type” with “rewrite for abstract data type (annotation) (annotation)” at http://hpaste.org/85154#a85157
2013-04-04 12:12:34	<--	no-n (~no-n@24.180.69.111.dynamic.snap.net.nz) has quit (Quit: Leaving)
2013-04-04 12:13:16	-->	jdnavarro (~danny@49.Red-81-35-219.dynamicIP.rima-tde.net) has joined #haskell
2013-04-04 12:13:21	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-04-04 12:13:21	-->	k0001 (~k0001@host45.181-1-162.telecom.net.ar) has joined #haskell
2013-04-04 12:13:33	swi	> fmap (Just . swap) Just (1,"hello")
2013-04-04 12:13:35	lambdabot	  Couldn't match expected type `(a0, b0)'
2013-04-04 12:13:35	lambdabot	             with actual type `Data...
2013-04-04 12:13:50	hpaste	typoclass annotated “rewrite for abstract data type” with “rewrite for abstract data type (annotation) (annotation) (annotation)” at http://hpaste.org/85154#a85158
2013-04-04 12:14:20	swi	> fmap (Just . swap) (Just (1,"hello"))
2013-04-04 12:14:22	lambdabot	  Just (Just ("hello",1))
2013-04-04 12:14:38	blueonyx	Cale: ah thats even better, thanks :)
2013-04-04 12:14:59	typoclass	blueonyx: ok, another suggestion ^^. a view pattern (... -> ...) will take an argument, apply apply the left side of the "->" to it, then pattern-match with the right side
2013-04-04 12:15:16	-->	jlaire (~jlaire@ip-87-108-43-54.customer.academica.fi) has joined #haskell
2013-04-04 12:15:42	<--	eikke (~nicolas@dD57738B5.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-04-04 12:16:00	--	mami_ is now known as mami
2013-04-04 12:18:01	Cale	I'm not sure whether I really believe in view patterns
2013-04-04 12:18:23	Cale	I've yet to see them used to actually improve a real piece of code in the wild.
2013-04-04 12:18:35	blueonyx	dito
2013-04-04 12:19:03	Cale	Pattern guards on the other hand, have saved me a lot of trouble in some circumstances
2013-04-04 12:19:13	-->	no-n (~no-n@24.180.69.111.dynamic.snap.net.nz) has joined #haskell
2013-04-04 12:19:13	-->	LAMMJohnson (~ja@user-5af43818.broadband.tesco.net) has joined #haskell
2013-04-04 12:19:25	<--	blueonyx (~blueonyx@unaffiliated/blueonyx) has quit (Quit: leaving)
2013-04-04 12:19:27	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 12:19:50	-->	sawgij (~sawjig@gateway/tor-sasl/sawjig) has joined #haskell
2013-04-04 12:20:24	Cale	They're especially nice in the case that you're doing some type hackery, and using GADTs to carry around evidence that certain types are equal. Pattern guards nicely let you artificially pattern match on things to unpack the type equality constraints you need.
2013-04-04 12:20:38	-->	Palmik (~palmik@man-208-105.pks.muni.cz) has joined #haskell
2013-04-04 12:20:38	--	Palmik is now known as Palmik_
2013-04-04 12:20:45	Eduard_Munteanu	Cale: I found view patterns nice for "pattern-matching" on Seqs
2013-04-04 12:20:52	-->	strebe (~strebe@2001:bf0:c001:30:8990:98dc:eafb:5863) has joined #haskell
2013-04-04 12:21:12	Cale	Eduard_Munteanu: Oh, you're right, that is nice
2013-04-04 12:22:03	-->	mhf (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-04-04 12:22:14	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-04-04 12:22:49	<--	glguy (~textual@unaffiliated/glguy) has quit (Quit: Computer has gone to sleep.)
2013-04-04 12:24:02	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 255 seconds)
2013-04-04 12:24:35	<--	RayNbow`TU (~kirika@x208145.tudelft.net) has quit (Quit: leaving)
2013-04-04 12:26:52	-->	strebe_ (~strebe@2001:bf0:c001:30:d6:45a:7a20:33e3) has joined #haskell
2013-04-04 12:27:17	typoclass	Cale: i've found view patterns cool when you get an argument and use it only once, e.g. passing it to splitAt. a bit heavy on parens, but i hope this example makes sense: "sort' (p:(partition (< p) -> (lesser, greater))) = sort' lesser ++ [p] ++ sort' greater"
2013-04-04 12:27:34	typoclass	... and you're right, i need to look at pattern guards. i've barely ever seen them :-)
2013-04-04 12:27:37	-->	jlaire_ (~jlaire@80-248-242-78.cust.suomicom.fi) has joined #haskell
2013-04-04 12:28:04	-->	apella (~bspiers@igwe35.vub.ac.be) has joined #haskell
2013-04-04 12:28:11	mauke	map _ [] = []; map f ((f -> x) : (map f -> xs)) = x : xs
2013-04-04 12:28:29	-->	mononofu_ (~mononofu@151.236.4.33) has joined #haskell
2013-04-04 12:28:30	<--	jlaire (~jlaire@ip-87-108-43-54.customer.academica.fi) has quit (Ping timeout: 276 seconds)
2013-04-04 12:28:54	<--	strebe (~strebe@2001:bf0:c001:30:8990:98dc:eafb:5863) has quit (Ping timeout: 240 seconds)
2013-04-04 12:29:26	typoclass	mauke: er, that doesn't seem to help :-)
2013-04-04 12:29:29	typoclass	mauke: but it's cute
2013-04-04 12:29:30	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 264 seconds)
2013-04-04 12:31:09	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 12:31:09	 *	hackagebot hmemdb 0.2.0.1 - In-memory relational database  http://hackage.haskell.org/package/hmemdb-0.2.0.1 (MiguelMitrofanov)
2013-04-04 12:32:19	typoclass	quicksort example with pattern guards (i hope that's correct): "sort' (p:xs) | (lesser, greater) <- partition (< p) xs = sort' lesser ++ [p] ++ sort' greater". the difference is, view patterns let you omit the argument name (xs). this is handy if you use it only once anyway. it reduces name clutter
2013-04-04 12:32:21	mm_freak_	snoyberg: hi there…  is it possible/feasible to write an HTTP proxy with WAI?
2013-04-04 12:32:40	<--	mononofu_ (~mononofu@151.236.4.33) has quit (Read error: Connection reset by peer)
2013-04-04 12:33:18	-->	inarenvi_ (~quassel@62.32.140.168) has joined #haskell
2013-04-04 12:33:23	<--	inarenvi (~quassel@92.59.128.136) has quit (Ping timeout: 240 seconds)
2013-04-04 12:33:42	<--	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has quit (Quit: http://quassel-irc.org - Chatee cómodamente donde sea.)
2013-04-04 12:33:42	<--	Taneb (~nathan@host-92-23-115-199.as13285.net) has quit (Ping timeout: 264 seconds)
2013-04-04 12:33:48	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 12:34:44	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Read error: Connection reset by peer)
2013-04-04 12:35:08	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-04 12:35:36	-->	mononofu- (~mononofu@151.236.4.33) has joined #haskell
2013-04-04 12:36:08	Spockz	A while back I looked at HLint and saw that it had some extra Hint files that contained a lot of extra rules. Now I only see Dollar.hs and Generalise.hs and both contain only one rule. Where did all those extra rules go?
2013-04-04 12:36:22	<--	vehk (~vehk@unaffiliated/vehk) has quit (Quit: reboot.)
2013-04-04 12:36:26	<--	mhf (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-04 12:36:27	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-04 12:37:12	-->	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has joined #haskell
2013-04-04 12:37:37	<--	mononofu- (~mononofu@151.236.4.33) has quit (Read error: Connection reset by peer)
2013-04-04 12:37:38	-->	hircus (~hircus@112.109.20.138) has joined #haskell
2013-04-04 12:38:07	<--	adlan (~adlan@115.85.128.54) has quit (Read error: Connection reset by peer)
2013-04-04 12:38:15	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-04 12:38:30	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 258 seconds)
2013-04-04 12:38:33	-->	Taneb (~nathan@host-92-23-115-199.as13285.net) has joined #haskell
2013-04-04 12:38:41	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 12:38:54	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-04-04 12:39:09	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-04-04 12:39:51	-->	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has joined #haskell
2013-04-04 12:40:02	-->	jianmeng (~mengjian@123.138.24.84) has joined #haskell
2013-04-04 12:41:02	<--	madjestic (~madjestic@aamz53.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-04 12:41:02	-->	ijp (~user@host109-151-48-58.range109-151.btcentralplus.com) has joined #haskell
2013-04-04 12:41:50	-->	wilfredh (uid159@gateway/web/irccloud.com/x-vdrzvtpxfdgdrjzc) has joined #haskell
2013-04-04 12:43:14	<--	edtsech (~edtsech@194.213.198.34) has quit (Ping timeout: 252 seconds)
2013-04-04 12:43:31	typoclass	Cale: anyway, thank you for the discussion. i "somehow" liked view patterns, but couldn't articulate why. your doubts made me think it through :-) so thanks
2013-04-04 12:43:47	-->	trescenzi (~trescenzi@2620:91:0:163:dc6a:9f3:5119:76cf) has joined #haskell
2013-04-04 12:44:06	-->	Thra11 (~thrall@139.125.125.91.dyn.plus.net) has joined #haskell
2013-04-04 12:44:07	 *	typoclass hopes he's making sense
2013-04-04 12:44:11	quchen	swi: Using swap is fine. You can also easily implement it yourself.
2013-04-04 12:44:30	quchen	swi: Your "Just" is too much though
2013-04-04 12:44:40	mauke	it's Just too much
2013-04-04 12:45:15	<--	mononofu (~mononofu@chello062178010088.4.11.vie.surfer.at) has quit (Quit: Leaving)
2013-04-04 12:45:20	-->	mononofu (~mononofu@151.236.4.33) has joined #haskell
2013-04-04 12:45:32	<--	jameswetter (~jameswett@180.92.118.130) has quit (Quit: Lost terminal)
2013-04-04 12:45:43	Cale	typoclass: Yeah, that makes sense, though the Data.Sequence example I think is more compelling than the partition one. I'm not sure that I like to see a lot of computation going on inside nestable patterns, at least in this form.
2013-04-04 12:46:10	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-04-04 12:46:28	-->	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-04 12:46:33	-->	t7` (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-04 12:46:41	<--	hiratara (~hiratara@h223008.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 245 seconds)
2013-04-04 12:46:59	<--	notdan (~h@109.163.233.55) has quit (Ping timeout: 255 seconds)
2013-04-04 12:47:22	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 12:47:28	<--	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-04-04 12:47:35	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-04-04 12:47:41	-->	notdan (~h@109.163.233.55) has joined #haskell
2013-04-04 12:47:55	swi	quchen: oops :)
2013-04-04 12:47:56	typoclass	Cale: right. it is heavy on parens, isn't it. i'm sure there's better examples that need only one level of parens
2013-04-04 12:48:09	swi	> fmap swap Just (1,"hello")
2013-04-04 12:48:10	lambdabot	  Couldn't match expected type `(a0, b0)'
2013-04-04 12:48:11	lambdabot	             with actual type `Data...
2013-04-04 12:48:14	 *	typoclass purrs and goes look up Data.Sequence
2013-04-04 12:48:16	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Disconnected by services)
2013-04-04 12:48:20	swi	> fmap (swap) Just (1,"hello")
2013-04-04 12:48:22	lambdabot	  Couldn't match expected type `(a0, b0)'
2013-04-04 12:48:22	lambdabot	             with actual type `Data...
2013-04-04 12:48:24	Cale	typoclass: That example also isn't bad as a pattern guard
2013-04-04 12:48:26	--	t7` is now known as t7
2013-04-04 12:48:26	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-04-04 12:48:28	<--	trescenzi (~trescenzi@2620:91:0:163:dc6a:9f3:5119:76cf) has quit (Ping timeout: 258 seconds)
2013-04-04 12:48:39	swi	ouch
2013-04-04 12:48:44	swi	> fmap (swap) (Just (1,"hello"))
2013-04-04 12:48:46	lambdabot	  Just ("hello",1)
2013-04-04 12:49:17	<--	jlaire_ (~jlaire@80-248-242-78.cust.suomicom.fi) has quit (Ping timeout: 252 seconds)
2013-04-04 12:49:22	Cale	sort (x:xs) | (lesser, greater) <- partition (< x) xs  = sort lesser ++ [x] ++ sort greater
2013-04-04 12:49:49	typoclass	Cale: yup, but that requires the xs name, doesn't it. i'd say the point of view patterns is to reduce clutter from intermediate names
2013-04-04 12:50:35	<--	inarenvi_ (~quassel@62.32.140.168) has quit (Quit: Low Battery)
2013-04-04 12:50:41	<--	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 246 seconds)
2013-04-04 12:51:03	<--	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-04-04 12:51:09	-->	jlaire (~jlaire@ip-87-108-43-54.customer.academica.fi) has joined #haskell
2013-04-04 12:51:15	-->	inarenvi (~quassel@62.32.140.168) has joined #haskell
2013-04-04 12:51:53	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 240 seconds)
2013-04-04 12:51:56	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 255 seconds)
2013-04-04 12:52:14	-->	hiratara (~hiratara@i218156.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-04-04 12:52:23	snoyberg	mm_freak_: i think so, i've certainly written a reverse proxy, and erik's been working on a normal proxy
2013-04-04 12:54:08	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-04-04 12:54:10	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-04-04 12:54:18	<--	ski_ (~na@t-2020-08.studat.chalmers.se) has quit (Ping timeout: 245 seconds)
2013-04-04 12:55:16	-->	etehtsea (~textual@109.205.253.9) has joined #haskell
2013-04-04 12:55:40	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 12:56:37	-->	iago (~iago@gwlmf.di.uminho.pt) has joined #haskell
2013-04-04 12:57:15	quchen	swi: Well done.
2013-04-04 12:57:50	-->	mjga (~mjga@nmr2.nmr.mpibpc.mpg.de) has joined #haskell
2013-04-04 12:57:53	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 240 seconds)
2013-04-04 12:58:03	quchen	swi: Now think about how to fmap a "Just 1" to "Nothing".
2013-04-04 12:58:21	-->	ccc (~macroron@c-66-176-27-122.hsd1.fl.comcast.net) has joined #haskell
2013-04-04 12:58:27	swi	quchen: oops. For what it maybe need ?
2013-04-04 12:58:31	swi	may be*
2013-04-04 12:58:32	quchen	Spoiler: it's a loaded question. :-)
2013-04-04 12:58:52	<--	xinming (~xinming@125.84.28.203) has quit (Read error: Connection reset by peer)
2013-04-04 12:59:08	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-04 12:59:58	-->	xinming (~xinming@113.248.75.140) has joined #haskell
2013-04-04 13:00:30	-->	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has joined #haskell
2013-04-04 13:00:34	mjga	I wonder how to make elegant handling of long list of results that may be Either errors or parse results. It works as long, as I try not to print out errors before processing rest of output: Data.Either.partitionEithers gives stack overflow, because there are so many more correct results (few gigabytes) than errors. Any hints how to avoid this issue?
2013-04-04 13:00:45	swi	> fmap (\x->Nothing) Just 1
2013-04-04 13:00:47	lambdabot	  Nothing
2013-04-04 13:01:13	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 240 seconds)
2013-04-04 13:01:13	-->	nickray (~nickray@unaffiliated/nickray) has joined #haskell
2013-04-04 13:01:20	quchen	There's parentheses missing around "Just 1".
2013-04-04 13:01:29	-->	whald (~trem@2001:4dd0:fbbe:1:a916:a670:7d6c:a306) has joined #haskell
2013-04-04 13:01:36	quchen	What you wrote is "(fmap (\x -> Nothing) Just) 1"
2013-04-04 13:01:58	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 13:02:16	-->	itemad (~user@212.0.102.162) has joined #haskell
2013-04-04 13:02:16	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-04 13:02:17	quchen	> fmap (\x -> Nothing) (Just 1) -- beeeeep
2013-04-04 13:02:18	lambdabot	  Just Nothing
2013-04-04 13:02:41	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-04 13:02:42	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 13:02:42	swi	aah.. i forgot context :)
2013-04-04 13:03:46	quchen	The point is that you can't map a "Just something" to a "Nothing". Can you think of why that would be?
2013-04-04 13:04:08	quchen	(It holds in general that you can't change the structure of a Functor using fmap, not just in case of Maybe)
2013-04-04 13:04:40	quchen	In other words, a Functor/fmap *never* changes the context
2013-04-04 13:04:40	<--	edtsech (~edtsech@194.213.198.34) has quit (Read error: Operation timed out)
2013-04-04 13:05:16	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Quit: Lost terminal)
2013-04-04 13:05:36	<--	yacks (~yacks@180.151.36.168) has quit (Ping timeout: 264 seconds)
2013-04-04 13:06:13	<--	kevinqcs (~turing@183.209.41.69) has quit (Ping timeout: 240 seconds)
2013-04-04 13:06:23	<--	Thomyho4 (~thomyho@mnhm-590c13ad.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-04-04 13:07:08	swi	quchen: hm.. but why it allow it ?
2013-04-04 13:07:18	-->	perspectival (~perspecti@38-217-13-46.tmcz.cz) has joined #haskell
2013-04-04 13:07:57	quchen	Valid instances of Functor need fmap to obey the Functor laws.
2013-04-04 13:08:21	quchen	That's a critical point about Functors (and Applicative etc.): implementations don't only have to have the right type signature, but also obey some laws.
2013-04-04 13:08:37	quchen	In the Functor case, those laws are "fmap id = id" and "fmap (f.g) = fmap f . fmap g".
2013-04-04 13:09:14	quchen	With that in mind, the question still stands :-)
2013-04-04 13:09:27	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-04-04 13:09:37	swi	i dont sure i understand question :(
2013-04-04 13:10:27	quchen	Oh, I just noticed that LYAH talks about functors twice, maybe you're not in the second part yet. That's where the Functor laws are mentioned.
2013-04-04 13:11:20	swi	i remember functors law
2013-04-04 13:11:32	quchen	Oh. Well then - no excuses! ;-D
2013-04-04 13:11:33	swi	i dont understand question (perhaps my bad english)
2013-04-04 13:11:37	quchen	Oh.
2013-04-04 13:11:54	quchen	"Why can't you fmap a Just value to a Nothing value"
2013-04-04 13:12:07	quchen	i.e. why is there no function f to do
2013-04-04 13:12:08	swi	cause it change context
2013-04-04 13:12:16	quchen	fmap f (Just 1) == Nothing
2013-04-04 13:12:28	b_jonas	you use (>>=) to do that
2013-04-04 13:12:40	quchen	b_jonas: We don't have monads yet.
2013-04-04 13:13:16	quchen	swi: That fact is encoded in the functor laws. Can you find it?
2013-04-04 13:13:38	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-04 13:14:13	swi	quchen: you mean 2nd law about fmap (f . g) = fmap f . fmap g ?
2013-04-04 13:14:44	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-04-04 13:14:52	quchen	No. Suppose fmap can change Justs to Nothings, that law doesn't say much about that.
2013-04-04 13:15:08	quchen	if fmap f can do Just -> Nothing, why shouldn't fmap (f.g) be able to
2013-04-04 13:15:17	quchen	It's the first law, fmap id = id.
2013-04-04 13:15:38	-->	joaopizani (~joaopizan@224pc204.sshunet.nl) has joined #haskell
2013-04-04 13:15:42	quchen	id x = x, so id doesn't change the context (it changes nothing at all).
2013-04-04 13:16:02	swi	> fmap id Just 1
2013-04-04 13:16:04	lambdabot	  Just 1
2013-04-04 13:16:04	quchen	But then "fmap id" doesn't change context as well, as stated by the law
2013-04-04 13:16:07	<--	perspectival (~perspecti@38-217-13-46.tmcz.cz) has quit (Quit: Leaving.)
2013-04-04 13:16:11	quchen	Parentheses!
2013-04-04 13:16:13	swi	> id Just 1
2013-04-04 13:16:15	lambdabot	  Just 1
2013-04-04 13:16:15	quchen	> fmap id (Just 1)
2013-04-04 13:16:17	lambdabot	  Just 1
2013-04-04 13:16:41	aCube	> fmap (+3) Just 1
2013-04-04 13:16:43	swi	isnt it the same in this example?
2013-04-04 13:16:43	lambdabot	  No instance for (GHC.Num.Num (Data.Maybe.Maybe a0))
2013-04-04 13:16:43	lambdabot	   arising from a use o...
2013-04-04 13:16:48	aCube	> fmap (+3) (Just 1)
2013-04-04 13:16:49	<--	nickray (~nickray@unaffiliated/nickray) has left #haskell
2013-04-04 13:16:50	lambdabot	  Just 4
2013-04-04 13:16:50	quchen	fmap id Just 1 = (fmap id Just) 1. That's something completely different.
2013-04-04 13:16:56	swi	think i lost something
2013-04-04 13:16:58	quchen	It's coincidence the two have the same result.
2013-04-04 13:17:13	aCube	fmap fromJust Just 3
2013-04-04 13:17:15	aCube	> fmap fromJust Just 3
2013-04-04 13:17:16	lambdabot	  3
2013-04-04 13:17:34	-->	Thomyho4 (~thomyho@mnhm-590c13ad.pool.mediaWays.net) has joined #haskell
2013-04-04 13:17:42	swi	> fromJust Just 3
2013-04-04 13:17:43	lambdabot	  Couldn't match expected type `Data.Maybe.Maybe (t0 -> t1)'
2013-04-04 13:17:43	lambdabot	             wit...
2013-04-04 13:17:53	quchen	aCube: That's not the Maybe, but the function instance of Functor you're using there.
2013-04-04 13:18:01	aCube	quchen: I know :D
2013-04-04 13:18:05	int-e	right. fmap = (.) there
2013-04-04 13:18:10	aCube	> fmap (fmap (+3)) Just 3
2013-04-04 13:18:12	lambdabot	  Just 6
2013-04-04 13:18:15	aCube	:)
2013-04-04 13:18:19	-->	skchrko (~sk@31.28.233.39) has joined #haskell
2013-04-04 13:18:34	int-e	> fmap fmap fmap (+3) Just 3
2013-04-04 13:18:36	lambdabot	  Just 6
2013-04-04 13:18:38	int-e	and so on.
2013-04-04 13:18:47	swi	omg
2013-04-04 13:18:54	quchen	swi: Just ignore that :-P
2013-04-04 13:19:18	-->	robstewartuk (~rob@fluency-gw1.summerhall.co.uk) has joined #haskell
2013-04-04 13:19:24	swi	quchen: somewhere in lyah i saw something like mapping list of func over list of vals...
2013-04-04 13:19:32	swi	it's was scaare
2013-04-04 13:19:51	int-e	> let obfuscate = fmap in obfuscate obfuscate obfuscate (+3) Just 3 -- that's how it should be written
2013-04-04 13:19:52	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 13:19:52	lambdabot	  Just 6
2013-04-04 13:20:01	quchen	m >>= f = \r -> m (f r) r = \r -> (m . f) r r = \r -> (fmap m f) r r = \r -> fmap m f r r
2013-04-04 13:20:04	quchen	Much clearer now!
2013-04-04 13:20:06	<--	jbetzend (~jbetzend@ip-178-202-212-240.unitymediagroup.de) has quit (Ping timeout: 252 seconds)
2013-04-04 13:20:20	quchen	I should've changed m to h and f to u
2013-04-04 13:20:22	int-e	quchen: self-documenting even :)
2013-04-04 13:20:25	quchen	fmap h u r r
2013-04-04 13:20:42	robstewartuk	Are there any rules about defining an executable in a .cabal file combing the hs-source-dirs and main-is arguments? I.e. can I say hs-source-dirs: src and main-is: Foo/Bar/Baz.hs ?
2013-04-04 13:20:46	-->	wttr (~androirc@180.92.118.130) has joined #haskell
2013-04-04 13:21:05	robstewartuk	Or must I say: hs-source-dirs: src/Foo/Bar/ and main-is: Baz.hs ?
2013-04-04 13:21:17	dcoutts_	robstewartuk: easy way to find out :-) try it
2013-04-04 13:21:25	quchen	swi: Lists of functions are just ordinary lists in Haskell. Functions aren't special.
2013-04-04 13:21:46	lattenwald	> [(+3), (*2)] <*> [2 .. 5]
2013-04-04 13:21:47	lambdabot	  [5,6,7,8,4,6,8,10]
2013-04-04 13:21:48	aCube	> zipWith ($) [(+3), (+4), (+5)] [1,2,3,4]
2013-04-04 13:21:48	dcoutts_	robstewartuk: I think it'd probably work either way round
2013-04-04 13:21:49	lambdabot	  [4,6,8]
2013-04-04 13:21:49	lattenwald	scary?
2013-04-04 13:21:50	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-04 13:21:52	quchen	> fmap ($ 3) [(+1), (2*)]
2013-04-04 13:21:53	lambdabot	  [4,6]
2013-04-04 13:22:02	-->	madjestic (~madjestic@aamz53.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-04 13:22:06	-->	Zeev (~Zeev@bzq-79-180-18-175.red.bezeqint.net) has joined #haskell
2013-04-04 13:22:06	dcoutts_	robstewartuk: but I'd go for the first one
2013-04-04 13:22:11	<--	randomlogin (~randomlog@37.17.113.143) has quit (Ping timeout: 246 seconds)
2013-04-04 13:22:17	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 13:22:19	swi	quchen: > [(+3),(*2)] *> [1,2]
2013-04-04 13:22:24	robstewartuk	Wel?l both work, though I'm seeing a very strange behaviour with cloudhaskell executables the first way round (I'm putting a simple example together).
2013-04-04 13:22:34	quchen	swi: That's using Applicatives, you're not at that point yet. :-)
2013-04-04 13:22:47	quchen	(*> is from Applicative)
2013-04-04 13:23:24	swi	quchen: opps. i mean that <*> thing i was scared :)
2013-04-04 13:23:50	swi	doesnt it too much 'sugar' in haskell syntax ?
2013-04-04 13:24:12	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-04-04 13:24:37	int-e	> let (><><><>) = id in succ ><><><> 1 -- it's just infix operators
2013-04-04 13:24:38	lambdabot	  2
2013-04-04 13:25:45	swi	>  let (>=--.) = id succ >=--. 1
2013-04-04 13:25:45	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: No route to host)
2013-04-04 13:25:47	lambdabot	  not an expression: `let (>=--.) = id succ >=--. 1'
2013-04-04 13:25:51	swi	:D
2013-04-04 13:26:07	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 13:26:36	typoclass	swi: so it's not really syntactic sugar built into the haskell language. it's just some libraries that some people wrote
2013-04-04 13:26:40	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-04 13:26:50	<--	zhulikas (~zhulikas@ip-46-251-50-56.kava.lt) has quit (Read error: Connection reset by peer)
2013-04-04 13:27:14	<--	madjestic (~madjestic@aamz53.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-04 13:27:14	-->	zhulikas (~zhulikas@ip-46-251-50-56.kava.lt) has joined #haskell
2013-04-04 13:27:23	swi	typoclass: i know, i mean there is a lot of that infix functions and it's confuse when reading code
2013-04-04 13:28:18	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 13:28:48	no-n	where can I get a list of all the typeclasses?
2013-04-04 13:29:18	mm_freak_	snoyberg: is there any way to get the full request string with WAI?
2013-04-04 13:29:19	FireFly	There's something fishy with ><> ...
2013-04-04 13:29:25	aCube	@where typeclassopedia
2013-04-04 13:29:26	lambdabot	http://www.haskell.org/haskellwiki/Typeclassopedia
2013-04-04 13:29:28	typoclass	swi: that's true :-/ it takes some getting used to
2013-04-04 13:29:35	snoyberg	mm_freak_: you mean path info + query string?
2013-04-04 13:29:36	no-n	thank you aCube
2013-04-04 13:29:45	int-e	FireFly: that was intended :)
2013-04-04 13:29:52	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 258 seconds)
2013-04-04 13:29:56	aCube	that's not all, only the most commonly used ones
2013-04-04 13:29:57	mm_freak_	snoyberg: like when someone requests "GET http://blah:1234/xxx" i particularly need "blah" and 1234
2013-04-04 13:30:12	<--	PrO_OkI_ (uid4868@gateway/web/irccloud.com/x-xvburjjqhkbafdee) has quit (Ping timeout: 264 seconds)
2013-04-04 13:30:26	<--	carlocci (~carlocci@unaffiliated/carlocci) has quit (Ping timeout: 256 seconds)
2013-04-04 13:31:16	typoclass	no-n: the major ones are described in typeclassopedia. i don't think there's a complete list because anyone could define some new typeclasses and put them on hackage, after all
2013-04-04 13:31:35	no-n	ok
2013-04-04 13:31:44	-->	kevinqcs (~turing@223.65.142.128) has joined #haskell
2013-04-04 13:32:04	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-04-04 13:32:07	snoyberg	mm_freak_: serverName and serverPort
2013-04-04 13:32:26	mm_freak_	snoyberg: serverName works, but serverPort returns the proxy server's port, not the requested port
2013-04-04 13:32:28	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-04-04 13:32:56	<--	wttr (~androirc@180.92.118.130) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-04-04 13:33:12	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-04-04 13:33:18	snoyberg	mm_freak_: i think that might be a bug actually
2013-04-04 13:33:37	mm_freak_	oh
2013-04-04 13:33:42	<--	Maarten_ (~maarten@095-097-231-009.static.chello.nl) has quit (Quit: Maarten_)
2013-04-04 13:33:49	snoyberg	mm_freak_: i take that back, the docs *do* make it clear that the current behavior is current
2013-04-04 13:33:57	mm_freak_	i'm using WAI 1.4.0
2013-04-04 13:34:07	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-04 13:34:16	mm_freak_	snoyberg: yes, i know
2013-04-04 13:34:25	mm_freak_	snoyberg: that's why i'm asking =)
2013-04-04 13:34:27	snoyberg	mm_freak_: i've honestly never used either serverName or serverPort in my applications, the current behavior may not be the best
2013-04-04 13:34:54	mm_freak_	yeah, after all you can always refer to the Settings used in runSettings
2013-04-04 13:35:06	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-04-04 13:35:29	-->	dgpratt (~dpratt71@pool-72-65-103-230.ptldme.east.myfairpoint.net) has joined #haskell
2013-04-04 13:35:33	mm_freak_	snoyberg: serverHost and serverPort may not even make sense in some scenarios
2013-04-04 13:35:45	snoyberg	i'd be open to changing that behavior, but it would have to go through a discussion on web-devel
2013-04-04 13:36:07	snoyberg	tbh, i'm not even sure why they're included, since they're so rarely needed
2013-04-04 13:36:22	mm_freak_	sure…  is there a workaround i can use for now?
2013-04-04 13:36:25	snoyberg	it's included in hack, that's probably where i got it from
2013-04-04 13:36:42	snoyberg	i don't think so, besides patching warp locally
2013-04-04 13:36:49	mm_freak_	hmm, ok
2013-04-04 13:36:51	mm_freak_	thanks
2013-04-04 13:37:19	mm_freak_	WAI or warp?  i think this is WAI land?
2013-04-04 13:38:05	<--	strebe_ (~strebe@2001:bf0:c001:30:d6:45a:7a20:33e3) has left #haskell ("Leaving")
2013-04-04 13:38:13	-->	wttr (~jameswett@180.92.118.130) has joined #haskell
2013-04-04 13:38:53	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-04-04 13:40:59	-->	sepp2k (~hungerec@pcclt11.isp.uni-luebeck.de) has joined #haskell
2013-04-04 13:41:34	--	s4msung_ is now known as s4msung
2013-04-04 13:43:30	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-04-04 13:43:55	-->	osa1 (58fff5fc@gateway/web/freenode/ip.88.255.245.252) has joined #haskell
2013-04-04 13:44:00	<--	RoXtein (~roxtein@di17.di.fct.unl.pt) has quit (Ping timeout: 264 seconds)
2013-04-04 13:44:03	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-04-04 13:44:29	osa1	is there a way to catch exceptions like "Prelude.head: empty list" ?
2013-04-04 13:44:39	-->	dimka (~ggg@toje.ws) has joined #haskell
2013-04-04 13:44:42	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-04 13:45:30	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-04-04 13:46:19	danr	osa1: yes... but it's normally not the best practice: http://stackoverflow.com/questions/6088341/haskell-non-exhaustive-pattern-exception
2013-04-04 13:46:47	-->	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-04 13:46:52	aCube	:t listToMaybe
2013-04-04 13:46:53	lambdabot	[a] -> Maybe a
2013-04-04 13:46:56	mapf	is it possible to find out absolute current time using only the 'base'?
2013-04-04 13:46:56	danr	you're probably better off using Maybe
2013-04-04 13:47:07	<--	dgpratt (~dpratt71@pool-72-65-103-230.ptldme.east.myfairpoint.net) has quit (Ping timeout: 258 seconds)
2013-04-04 13:47:17	osa1	ok thanks
2013-04-04 13:47:29	-->	odi (~user@089144206114.atnat0015.highway.a1.net) has joined #haskell
2013-04-04 13:47:57	mapf	I don't want to add dependency for time for my lib.
2013-04-04 13:48:02	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-04 13:48:09	typoclass	osa1: when you use head, it's generally recommended to think twice (or thrice). pattern matching is probably better, it gives you compiler warnings and line numbers at runtime. "case xs of (x:_) -> ... x ..."
2013-04-04 13:48:24	-->	perspectival (perspectiv@nat/redhat/x-xfpoaxuvurkceeuy) has joined #haskell
2013-04-04 13:48:41	<--	etehtsea (~textual@109.205.253.9) has quit (Ping timeout: 252 seconds)
2013-04-04 13:48:47	typoclass	mapf: 'time' is one of the packages like 'base'. they all come with ghc. there should be no problem with having that dependency
2013-04-04 13:48:52	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-04-04 13:49:09	mapf	typoclass: ok, thanks.
2013-04-04 13:49:17	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-04 13:49:23	FireFly	@source listToMaybe
2013-04-04 13:49:23	lambdabot	listToMaybe not available
2013-04-04 13:49:31	FireFly	> listToMaybe [1,2,3]
2013-04-04 13:49:33	lambdabot	  Just 1
2013-04-04 13:49:35	FireFly	ah
2013-04-04 13:50:04	typoclass	FireFly: it has a weird name, but it's just "a variant of head that gives you a Maybe"
2013-04-04 13:50:28	aCube	:t maybeToList
2013-04-04 13:50:30	lambdabot	Maybe a -> [a]
2013-04-04 13:50:37	FireFly	Yeah, I'd just call it maybeHead or something
2013-04-04 13:50:39	FireFly	:\
2013-04-04 13:50:43	supki	> [1,2,3] ^? _head
2013-04-04 13:50:45	lambdabot	  Just 1
2013-04-04 13:50:46	aCube	headMay is in Safe
2013-04-04 13:50:56	aCube	> [1,2,3] ^.. _head
2013-04-04 13:50:58	lambdabot	  [1]
2013-04-04 13:50:58	aCube	:D
2013-04-04 13:51:11	FireFly	> [] ^.. _head
2013-04-04 13:51:13	lambdabot	  []
2013-04-04 13:51:14	typoclass	aCube: somehow i think maybeToList and all those functions are subsumed by something in Data.Foldable, but i don't know
2013-04-04 13:51:26	<--	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 252 seconds)
2013-04-04 13:51:38	-->	gshrikant (~gshrikant@27.251.145.36) has joined #haskell
2013-04-04 13:52:18	<--	gshrikant (~gshrikant@27.251.145.36) has left #haskell
2013-04-04 13:52:20	aCube	> toList $ Just 3
2013-04-04 13:52:22	lambdabot	  Not in scope: `toList'
2013-04-04 13:52:22	lambdabot	 Perhaps you meant one of these:
2013-04-04 13:52:22	lambdabot	   `Data.Foldable.t...
2013-04-04 13:52:27	aCube	> Data.Foldable.toList $ Just 3
2013-04-04 13:52:29	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 258 seconds)
2013-04-04 13:52:29	lambdabot	  [3]
2013-04-04 13:52:48	aCube	:)
2013-04-04 13:52:59	<--	xinming (~xinming@113.248.75.140) has quit (Ping timeout: 246 seconds)
2013-04-04 13:53:16	typoclass	aCube: ah. less complicated than i thought :-)
2013-04-04 13:53:54	aCube	But I don't know of an alternative for listToMaybe
2013-04-04 13:54:14	<--	kushal (kdas@fedora/kushal) has quit (Quit: Leaving)
2013-04-04 13:54:48	-->	edgar_ (~edgar@metal36.ugent.be) has joined #haskell
2013-04-04 13:54:57	<--	mjga (~mjga@nmr2.nmr.mpibpc.mpg.de) has quit (Ping timeout: 276 seconds)
2013-04-04 13:55:02	-->	xinming (~xinming@125.84.31.6) has joined #haskell
2013-04-04 13:55:22	<--	hircus (~hircus@112.109.20.138) has quit (Ping timeout: 256 seconds)
2013-04-04 13:55:27	typoclass	the other day i read someone saying "no you don't need function X, that's just a special case of Data.Foldable.for_". unfortunately i can't remember X but i found it nonobvious and clever
2013-04-04 13:55:43	supki	whenJust
2013-04-04 13:56:04	typoclass	supki: oh wait, that could actually have been it
2013-04-04 13:56:08	aCube	:t whenJust
2013-04-04 13:56:09	lambdabot	Not in scope: `whenJust'
2013-04-04 13:56:13	<--	chatsiri_ (~chatsiri_@49.48.72.93) has quit (Ping timeout: 240 seconds)
2013-04-04 13:56:15	aCube	what's that?
2013-04-04 13:56:18	aCube	fmap?
2013-04-04 13:56:20	<--	seafood (~seafood@48.8.233.220.static.exetel.com.au) has quit (Quit: seafood)
2013-04-04 13:56:27	aCube	or maybe?
2013-04-04 13:56:29	aCube	:t maybe
2013-04-04 13:56:30	lambdabot	b -> (a -> b) -> Maybe a -> b
2013-04-04 13:56:42	<--	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has quit (Ping timeout: 258 seconds)
2013-04-04 13:56:44	aCube	:t for_
2013-04-04 13:56:45	lambdabot	    Not in scope: `for_'
2013-04-04 13:56:45	lambdabot	    Perhaps you meant one of these:
2013-04-04 13:56:45	lambdabot	      `Data.Foldable.for_' (imported from Data.Foldable),
2013-04-04 13:56:49	aCube	:t Data.Foldable.for_
2013-04-04 13:56:50	lambdabot	(Applicative f, Foldable t) => t a -> (a -> f b) -> f ()
2013-04-04 13:56:54	<--	kevinqcs (~turing@223.65.142.128) has quit (Ping timeout: 276 seconds)
2013-04-04 13:57:02	supki	whenJust :: Monad m => Maybe a -> (a -> m b) -> m ()
2013-04-04 13:57:17	-->	Maarten_ (~maarten@095-097-231-009.static.chello.nl) has joined #haskell
2013-04-04 13:57:20	<--	memand (~memand@80-71-135-117.u.parknet.dk) has quit (Quit: C'YA)
2013-04-04 13:57:23	-->	kallisti (~eris@168.28.136.16) has joined #haskell
2013-04-04 13:57:24	<--	kallisti (~eris@168.28.136.16) has quit (Changing host)
2013-04-04 13:57:24	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-04-04 13:57:42	typoclass	aCube: i think this is it http://www.haskell.org/pipermail/libraries/2011-November/017255.html
2013-04-04 13:58:16	aCube	:t flip (maybe (return ()) )
2013-04-04 13:58:18	lambdabot	Monad m => Maybe a -> (a -> m ()) -> m ()
2013-04-04 13:58:22	ijp	are there any known issues with bit shifting on largewords?
2013-04-04 13:58:28	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-04 13:58:33	-->	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-04-04 13:58:34	aCube	Oh, that's the proposed implementation XD
2013-04-04 13:58:35	-->	memand (~memand@80-71-135-117.u.parknet.dk) has joined #haskell
2013-04-04 13:58:41	ijp	I was trying to convert a list of word128 into a list of word8 and vice versa
2013-04-04 13:58:47	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 13:58:53	aCube	:t Data.Foldable.forM_
2013-04-04 13:58:54	lambdabot	(Monad m, Foldable t) => t a -> (a -> m b) -> m ()
2013-04-04 13:58:55	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-04 13:59:05	aCube	oh, neat :)
2013-04-04 13:59:18	<--	Aune (~arne@volac.lysator.liu.se) has quit (Remote host closed the connection)
2013-04-04 13:59:30	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-04-04 14:00:02	quchen	Half of learning Haskell is finding out that your function already exists in some library
2013-04-04 14:00:12	quchen	The other half is "if not, then it's a combination of two" ;-)
2013-04-04 14:00:27	typoclass	afaict, the difference between for_ and forM_ seems to be only the constraint (Applicative vs. Monad)
2013-04-04 14:00:37	supki	:t iforM_
2013-04-04 14:00:39	lambdabot	(Monad m, FoldableWithIndex i t) => t a -> (i -> a -> m b) -> m ()
2013-04-04 14:00:47	aCube	:t for_
2013-04-04 14:00:48	lambdabot	    Not in scope: `for_'
2013-04-04 14:00:48	lambdabot	    Perhaps you meant one of these:
2013-04-04 14:00:48	lambdabot	      `Data.Foldable.for_' (imported from Data.Foldable),
2013-04-04 14:00:49	typoclass	quchen: true :-) but #haskell is an excellent tool for that
2013-04-04 14:00:50	-->	hamilyon (~ashaposhn@94.124.202.202) has joined #haskell
2013-04-04 14:00:55	<--	edtsech (~edtsech@194.213.198.34) has quit (Remote host closed the connection)
2013-04-04 14:01:10	quchen	IRC cloud bot
2013-04-04 14:01:22	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 14:01:32	typoclass	ok, for the first time ever, i'm damn impressed with hoogle. if you put in "Maybe a -> (a -> m b) -> m ()", it finds for_ and forM_
2013-04-04 14:01:54	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 252 seconds)
2013-04-04 14:01:59	quchen	Why is that impressive?
2013-04-04 14:02:07	quchen	Oh, because it finds t = Maybe
2013-04-04 14:02:29	aCube	@hoogle Maybe a -> (a -> m ()) -> m ()
2013-04-04 14:02:29	lambdabot	Prelude (>>=) :: Monad m => m a -> (a -> m b) -> m b
2013-04-04 14:02:29	lambdabot	Control.Monad (>>=) :: Monad m => m a -> (a -> m b) -> m b
2013-04-04 14:02:29	lambdabot	Control.Monad.Instances (>>=) :: Monad m => m a -> (a -> m b) -> m b
2013-04-04 14:02:31	typoclass	quchen: yeah, because t ~ Maybe, and because i kinda expect hoogle to never find anything :-/
2013-04-04 14:02:49	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Client Quit)
2013-04-04 14:02:53	typoclass	aCube: i was using the web thingy
2013-04-04 14:03:01	quchen	typoclass: I usually search by name only, but then it's a crucial tool in my workflow
2013-04-04 14:03:16	-->	odites (~quassel@ppp-62-128.29-151.libero.it) has joined #haskell
2013-04-04 14:03:23	aCube	typoclass: oh right, it finds for_ and forM_ :)
2013-04-04 14:03:25	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Quit: Lost terminal)
2013-04-04 14:03:48	-->	eikke (~nicolas@85.255.197.126) has joined #haskell
2013-04-04 14:03:51	-->	apfel (~apfel@zs1-mgmt.fh-landshut.de) has joined #haskell
2013-04-04 14:04:19	-->	hajimehoshi (~hajimehos@p846976.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-04 14:04:33	<--	edtsech (~edtsech@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-04-04 14:04:35	-->	fizbin (~Adium@pool-173-72-88-179.cmdnnj.east.verizon.net) has joined #haskell
2013-04-04 14:04:45	ijp	hmm, http://article.gmane.org/gmane.comp.lang.haskell.beginners/4253/ suggests there is a bug in them
2013-04-04 14:05:21	-->	end3rW (~end3rW@IP-213188116089.dialin.heagmedianet.de) has joined #haskell
2013-04-04 14:05:38	-->	edtsech (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 14:06:07	<--	end3rW (~end3rW@IP-213188116089.dialin.heagmedianet.de) has quit (Client Quit)
2013-04-04 14:07:11	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-04-04 14:07:17	<--	heruur (~tvh@23-146-103-86.dynamic.dsl.tng.de) has quit (Read error: Connection reset by peer)
2013-04-04 14:07:43	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-04-04 14:07:44	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-04-04 14:08:12	-->	basvandijk (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-04-04 14:08:17	-->	heruur (~tvh@2a00:12d0:a100:9d01:35cf:dfa2:6a7c:6ebf) has joined #haskell
2013-04-04 14:08:23	<--	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 246 seconds)
2013-04-04 14:08:24	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-04-04 14:08:25	<--	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-04-04 14:09:03	-->	Kazimuth (~Nautilus@c-98-229-180-64.hsd1.ma.comcast.net) has joined #haskell
2013-04-04 14:10:24	<--	xinming (~xinming@125.84.31.6) has quit (Ping timeout: 240 seconds)
2013-04-04 14:10:26	<--	takumn (~takumn@161.90.128.210.bf.2iij.net) has quit (Remote host closed the connection)
2013-04-04 14:11:28	-->	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has joined #haskell
2013-04-04 14:11:48	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Ping timeout: 256 seconds)
2013-04-04 14:11:55	typoclass	aCube: it's interesting that you asked about how to write listToMaybe using Data.Foldable. i guess you'd have to have a function converting any Foldable into any other, i.e. (Foldable a, Foldable b) => a x -> b x
2013-04-04 14:12:29	-->	xinming (~xinming@113.248.127.239) has joined #haskell
2013-04-04 14:12:36	<--	otend (~otend@c-69-242-188-14.hsd1.mo.comcast.net) has quit (Ping timeout: 260 seconds)
2013-04-04 14:12:40	typoclass	i bet it's not hard to write
2013-04-04 14:12:45	<--	robstewartuk (~rob@fluency-gw1.summerhall.co.uk) has quit (Quit: robstewartuk)
2013-04-04 14:12:59	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-04-04 14:13:14	typoclass	(that function would of course subsume D.F.toList)
2013-04-04 14:13:47	-->	edtsech_ (~edtsech@194.213.198.34) has joined #haskell
2013-04-04 14:13:47	<--	edtsech (~edtsech@194.213.198.34) has quit (Read error: Connection reset by peer)
2013-04-04 14:14:08	aCube	typoclass: I think that's not possible, that would need something like "Unfoldable" I think :D
2013-04-04 14:15:12	--	irc: disconnected from server
2013-04-04 19:37:01	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-04 19:37:01	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-04 19:37:01	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-04 19:37:02	--	Nicks #haskell: [@ChanServ [[zz]] [mth] ]OLI[ __main__ __xc _anona _d3f _flow_ _janne `0660 `bps `micro `nand` ab9rf absence acfoltzer aCube Adeon adimit Adios adnap aesptux AfC aforemny_ agumonkey agundry ahf ahihi2 ahkurtz ajhager akahn akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ Alice3 alios alkabetz alnix alpounet AmaBoten Amadiro amathew amatsu\idle amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku apella Apes apfel Apocalisp araujo arbn arcatan arenz argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arpunk arthurmaciel arun asante asQuirreL aszlig Athas AtnNn augur augustl averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ Belgarion0 bens bergey` betawaffle bezik bgamari_ bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe Blkt blz37 BMeph_ BobFunk_ bobry bogner Boney Boreeas bradleyayers brainproxy Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc_ byorgey ByronJohnson bytbox c_wraith cads Cale caleb_9 caligula_ Canar canta canvon carlocci ccasin ccxCZ cdh473 celery__ Cerise certainty cfricke chance charlesofarrell chatsiri_ chirpsalot ChongLi_ Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` clahey ClaudiusMaximus Clint clog cmccann cmears cmsd2 cmsmcq cods colah_ collin comak companion_cube confound connelly_ coppro copumpkin cordawyn corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orker crdueck cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danharaj danr danvet dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def- def-lkb dennda dented42 dEPY Derander descender dfletcher dgpratt dgvncsz0f DigitalKiwi dilinger_ dimka dixie djahandarie djcoin dju dkasak dlundy_ dmarker DMcGill dmwit dnolen Dodek dogmaT dolio DolphR domingo donri doshitan_ dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dylukes dyreshark dysinger eacameron EarlGray^ earthy edenc edsko Eduard_Munteanu edwtjo Eelis eff efy ehamberg Eiam ejls eL_Bart0 electrogeek elgot Eliel elliott elliottcable em endojelly Enigmagic enquora ent- ericmj Eridius erkin ernst erpe Erstarrung Estrellas etabot ethercro1 etrepum EvilPenguin eviltwin_ Excureo eyck f8 fabjan faen fairfieldt fall_ fayden fcr_ felipe_ fergusnoble fihi09 finnrobi fionnan FireFly fireglow fizbin flebron_ floatingman1 flori flux fmapE Fnar folone formalcow fragamus Franciman freiksenet frio fro0t frontend1oader froztbyte fry fryguybob fsvehla ft Fubar^ Fuco FunkyDrummer Fuuzetsu_ FUZxxl fxr fxrh gabriel_ gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage genk gentleben gereedy_ gg7 ghorn Ghoul__ gienah gilbertw1 Gilly glguy Gothmog_ Gracenotes greymalkin gridaphobe gseitz_ gspr guampa guerrill1 Guest6687 Guest67399 Guest75025 Guest76523 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hamilyon hamishmack hanDerPeder harrison heath Heffalump helgikrs henk Hermit heruur hiptobecubic hiratara hiredman hiroyuki2 hive-mind hiyakashi homo_vitruvius horlicks hpaste hpc hpd hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar idntfy2 ido idoru Igloo ijp imphasing implr inarenvi inr_ int-e integral_ Internet13 ion ique ironm isenmann iulian ivan\ ivan` ixian Jaak jabirali jackhill jacobw jaimef jamwt janbanan janluu jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro jdoliner_ Jello_Raptor jercos jesyspa jfischoff jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jmelesky jml joachifm joaopizani joar jodaro JoeHazzers joeyh_ johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrajav jrib jrockway jrslepak js6i jssanders jtalk jtannenbaum jtobin juhp julmuri junsuijin jyp jyyou k00mi k0ral_ kadoban kaictl Kaidelong kakos kalven KaneTW kaol kauschovar kazimir42 Ke kennyd kennyp kerrick kevinqcs Khisanth kini Kinnison KitB_ kith kiwnix kkris kloeri klugez kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kushal kvey kyle__ labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard lcfrs LeaChim lemao lennart_ LeNsTR leoncamel2 leroux levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lopexx lpsmith lpvb luisgabriel luite_ lunarjar lzm m0g machisuji_ magicman mahogny majoh maksbotan maltin mami mapf marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mceier mcguitan93 McManiaC mechairo` mefisto` Megant melter memand mendez mephx_ merijn message144 MetaCosm meyersh mgile mgsloan miasma mietek mike2 mikecaruso mikeplus64 mikusp milessabin milli mimi_vx mimico mirsal mixi mizu_no_oto mjr841 MK_FG mktjr mlh mlinksva mm_freak_ MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom monoidal mononofu moonlite_ morazow mornfall morolin mortberg Mortchek mr- mrd MrFenix mrko mrshoe mspells msuszczy mtao mtlatif mullein munro mux myme mysticc n_b nadirvardar Nafai Nahra Nanar nardul Natch natechan natte ndngvr` necrobious neena netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niklasb niko nikola nilg niloc132 Nimatek nimish nimred ninegrid ninly ninzine Nisstyre niteria nlogax no-n noam noj noplamodo notdan NougatRillettes Nshag numeral nuncanada nus- nuttycom nuttycom1 nwf oax obcode ocharles odites odr ofan Okasu OlegYch opqdonut Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s_ ousado ozataman ozataman_ paintcan Paks pala2 Palmik_ pamojarpan Pantoufle paolino Paprikachu ParadoxMuffin ParahSail1n parcs PartyKat1e path[l] pcapriotti pchiusano pdxleif_away peddie peltchu pepijndevos perlite permagreen petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ phyrex1an pib1972 pigoz pikhq piotr_ plhk pmade pnielsen popz pqmodn pr predator217 preflex prh pricklypear prinnysocks PrO_OkI_ profmakx prophile ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ q66 qrlr quaestor quchen quicksilver quuxman qwandor qwr qz r126l raek raichoo raid rainmaker Ralith ramses_ Raynes Raynos Razz redjohn reggie1 reiddraper Reite Rembane rexamophone rfw RichyB rio Riussi rmunroe robawt robbe- robbert roconnor rofer roshan Rotaerk rs234 rsimoes ryanakca ryant5000 s00pcan S11001001 s4msung s_quark SaBer saep Sagi saiam Saizan sajith sambio saml saurik sawgij scgilardi schlumpi schovi sclv Scott_firebeta Sculptor seats Sebastien-L SegFaultAX sellout- setmeaway2 Sgeo sgronblo_ sh shachaf shanse shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 silver simon__ simpson sipa sirchurchill sjl skp skyflash SLi sm smarter snoyberg so Soft sohum solarus solirc sonda sordina3 SoupEvil spion spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire startling stat_vi statusfailed steez_ stelleg stepcut stephe strax stvc suiside sully sunfun sunnavy SuperNoeMan supernumeraryshi supersym supki sw17ch sysopfb tac_ tahu tamiko tanakh tanakh__ Taneb Tarential taruti tavelram tazjin tcsavage td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche tharper Tharugrim The_third_man theDon TheFuzzball theorbtwo TheRedMood thetallguy thetallguy1 thirsteh Thomyho6 thorkilnaur_ thorsten` thoughtpolice Thra11 threedaymonk threesome tibbe timemage tippenein tjohnson tkd tmiw TML tntc tobiassjosten tobym_ tom4939 tomaw tomboy64 tomejaguar tomh__ tomku tommd tomprince tootooroo ToRA Tordek TravisD trescenzi trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl Twey two- tyler_ typoclass tzxn3 u_aspirestoshutu ujihisa ulfdoz Ulrar uniquenick Urchin UziMonkey__ v0|d Valodim vehk verrens Vert Vertue vhz vikraman vili vmesoff vobi Volstvok Vorpal voyd Vq vraid VZakharov wagle Walther warpy Watcher7|off waterlaz wchun wei2912 weie wereHamster wess whaletechno WhereIsMySpoon whoops wilfredh Will| wjlroe wollw wormphlegm wting wto wtw_ wumpus wunki x7 xaimus xcvii_ xenon21 XexonixXexillion xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xrl__ xrq xymox Y_Less yacks yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr Zeev zenzike zhulikas ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ zz_nh2]
2013-04-04 19:37:02	--	Channel #haskell: 1061 nicks (1 op, 0 halfops, 0 voices, 1060 normals)
2013-04-04 19:37:02	--	URL for #haskell: http://www.haskell.org/
2013-04-04 19:37:03	--	Mode #haskell [+CLcnpt]
2013-04-04 19:37:03	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-04 19:37:12	Kaidelong	whereas foldl' always consumes the whole list
2013-04-04 19:37:24	-->	stepkut (~user@c-98-227-180-137.hsd1.il.comcast.net) has joined #haskell
2013-04-04 19:37:36	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-04-04 19:37:49	genk	ramses_ now I've added the comments. can you help?
2013-04-04 19:37:54	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-04-04 19:37:55	<--	Philonous (~Philonous@dslb-178-005-141-198.pools.arcor-ip.net) has quit (Read error: Connection reset by peer)
2013-04-04 19:38:29	parcs	the compiler ought to figure out when to make foldl strict in the accumulator
2013-04-04 19:38:46	ramses_	genk: what's the problem? The first function seems to do what you described?
2013-04-04 19:38:51	Kaidelong	also if the operator you're folding in is a data constructor, you are almost always going to want foldr
2013-04-04 19:38:57	-->	Philonous (~Philonous@dslb-178-005-141-198.pools.arcor-ip.net) has joined #haskell
2013-04-04 19:39:25	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-04-04 19:39:31	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-04-04 19:39:49	monochrom	except when that data constructor has strict fields, and then you want foldl' again
2013-04-04 19:39:49	--	pcapriotti is now known as fpbot
2013-04-04 19:40:09	clahey	Which one does sum use?
2013-04-04 19:40:15	monochrom	and there are exceptions to that exception
2013-04-04 19:40:16	Kaidelong	foldr
2013-04-04 19:40:30	Kaidelong	I believe
2013-04-04 19:40:32	monochrom	in the end, it's going to be like a Taylor series
2013-04-04 19:40:32	parcs	it uses foldl, but the compiler is smart enough to make it strict in the accumulator when it makes sense
2013-04-04 19:40:42	quchen	sum uses neither.
2013-04-04 19:40:50	quchen	http://hackage.haskell.org/packages/archive/base/latest/doc/html/src/Data-List.html#sum
2013-04-04 19:40:50	Kaidelong	@src sum
2013-04-04 19:40:50	lambdabot	sum = foldl (+) 0
2013-04-04 19:40:55	<--	Guest75025 (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has quit (Quit: Leaving)
2013-04-04 19:40:58	-->	sepp2k (~sexy@e179234070.adsl.alicedsl.de) has joined #haskell
2013-04-04 19:41:00	Kaidelong	I stand corrected
2013-04-04 19:41:02	genk	ramses_ i've added a sample input and my desired output
2013-04-04 19:41:03	dmwit	genk: By the way, whatever you did with comments doesn't seem to be showing up here.
2013-04-04 19:41:14	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-04-04 19:41:15	quchen	sum is hardcoded.
2013-04-04 19:41:18	parcs	quchen: which is basically inlined foldl
2013-04-04 19:41:19	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-04 19:41:23	dmwit	genk: Where have you added these?
2013-04-04 19:41:27	quchen	parcs: Yes.
2013-04-04 19:41:33	genk	ramses_ which my code fails to do
2013-04-04 19:41:42	parcs	so it uses foldl
2013-04-04 19:41:49	hpaste	genk revised “findAgent”: “findAgent” at http://hpaste.org/85185
2013-04-04 19:41:59	genk	dmwit sorry here it is again
2013-04-04 19:42:04	-->	ludamad (adomurad@nat/redhat/x-jlvsaynmgnhwabpw) has joined #haskell
2013-04-04 19:42:07	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-04 19:42:18	ludamad	What do you guys recommend I use for a simple http server ?
2013-04-04 19:42:29	ludamad	I do not plan to do anything too htmly, just talk over http
2013-04-04 19:42:45	elliott	warp, or snap's server?
2013-04-04 19:43:13	<--	otend (~otend@2610:e0:a040:e097:d499:d27d:7690:9d64) has quit (Ping timeout: 258 seconds)
2013-04-04 19:44:05	-->	otend (~otend@2610:e0:a040:e097:d499:d27d:7690:9d64) has joined #haskell
2013-04-04 19:44:17	ludamad	elliott: Are those two suggestions, or a question ?
2013-04-04 19:44:23	<--	Taneb (~nathan@host-92-30-190-31.as13285.net) has quit (Ping timeout: 240 seconds)
2013-04-04 19:44:48	-->	Taneb (~nathan@host-92-30-190-31.as13285.net) has joined #haskell
2013-04-04 19:44:50	ramses_	genk: your findall basically outputs all info you need, you just need to transform it a bit, right?
2013-04-04 19:45:06	hpaste	genk revised “findAgent”: “findAgent” at http://hpaste.org/85185
2013-04-04 19:45:07	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-04 19:45:12	typoclass	genk: so, do you actually need those indices directly, or will they be input to some later function? because then you're probably better off just walking through everything with a few 'map's, checking if the element is relevant, and directly doing the "some later function"
2013-04-04 19:45:15	-->	twopoint718 (~chris@fsf/member/twopoint718) has joined #haskell
2013-04-04 19:45:39	ramses_	genk: (btw, your example in the paste misses a parameter for findAll, a one I guess from the desired output)
2013-04-04 19:46:12	elliott	ludamad: two suggestions
2013-04-04 19:46:19	genk	typoclass: i will pass the results to another function which detects if there is a "collision" and removes them accordingly to create a new list
2013-04-04 19:46:33	-->	hiroaki (~hiroaki@p4FCC45B5.dip.t-dialin.net) has joined #haskell
2013-04-04 19:46:40	-->	bscarlet (~bscarlet@static-71-174-103-28.bstnma.fios.verizon.net) has joined #haskell
2013-04-04 19:46:54	genk	ramses_: ah yes, you are right.
2013-04-04 19:47:30	pamojarpan	do you know any collaborative web tool to edit haskell files? Something like hpaste but allowing collaborative edition.
2013-04-04 19:47:41	-->	hiroakip (~hiroaki@p4FCC45B5.dip.t-dialin.net) has joined #haskell
2013-04-04 19:47:53	typoclass	pamojarpan: shapr's thingamajig! what was the name ... ghc live or something?
2013-04-04 19:47:54	ramses_	genk: I haven't really looked at your implementation in detail, but writing a third function to transform the output of findAll into the desired form shouldn't be too hard I think
2013-04-04 19:48:07	ramses_	genk: some filtering and folding should do, I think
2013-04-04 19:48:24	<--	Thomyho6 (~thomyho@mnhm-5f75e666.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-04-04 19:48:43	genk	typoclass: I need indices of the elements since I want to "move" those "Agents" in my map and the easiest way I figured out was to gather their coordinates, apply the movement, and create a new list from the new coordinates.
2013-04-04 19:49:03	-->	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has joined #haskell
2013-04-04 19:49:09	hpaste	“Cathleen Grice” pasted “My loan result” at http://hpaste.org/85188
2013-04-04 19:49:31	-->	edon (~user@albalug/edon) has joined #haskell
2013-04-04 19:49:43	typoclass	genk: right ok. have you looked at the elemIndices function? (hlint actually suggests it, below your paste)
2013-04-04 19:49:45	typoclass	> elemIndices 'l' "lolcats"
2013-04-04 19:49:46	lambdabot	  [0,2]
2013-04-04 19:50:03	-->	klrr (~klrr@88.129.148.152) has joined #haskell
2013-04-04 19:50:35	genk	ramses_: yes, you are right. I finally got to "findAll" but I am stuck there.
2013-04-04 19:50:39	byorgey	ugh hpaste spam
2013-04-04 19:50:53	__xc	> succ maxBound :: Bool == minBound :: Bool
2013-04-04 19:50:55	lambdabot	  <hint>:1:35: parse error on input `::'
2013-04-04 19:51:06	<--	roconnor (~roconnor@e120-pool-d89a75a6.brdbnd.voicenetwork.ca) has quit (Ping timeout: 264 seconds)
2013-04-04 19:51:07	genk	typoclass: yes I also tried that but still it cannot figure out how to locate a primitive element in a list of lists
2013-04-04 19:51:11	klrr	i want to define a type which has a Int, and then two optional parameters(which is of the same type) , how do i do that?
2013-04-04 19:51:16	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-04-04 19:51:18	__xc	> succ (maxBound :: Bool) == (minBound :: Bool)
2013-04-04 19:51:19	lambdabot	  *Exception: Prelude.Enum.Bool.succ: bad argument
2013-04-04 19:51:23	genk	typoclass: elemIndices :: Eq a => a -> [a] -> [Int]
2013-04-04 19:51:26	ramses_	genk: consider combining that with map
2013-04-04 19:51:45	ramses_	:t map . elemIndices
2013-04-04 19:51:46	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-04-04 19:51:47	lambdabot	Eq a => a -> [[a]] -> [[Int]]
2013-04-04 19:51:54	__xc	to me succ opred should loop in the set
2013-04-04 19:52:15	<--	doshitan_ (~doshitan@156.26.238.103) has quit (Ping timeout: 252 seconds)
2013-04-04 19:52:17	-->	gnuwilliam (~william@177.134.99.11) has joined #haskell
2013-04-04 19:52:18	genk	ramses_: i'll try that.
2013-04-04 19:52:19	__xc	like in Z/nZ intger sets
2013-04-04 19:52:24	klrr	i want to define a type which has a Int, and then two optional parameters(which is of the same type) , how do i do that?
2013-04-04 19:52:35	ab9rf	optional parameters?
2013-04-04 19:52:56	<--	otend (~otend@2610:e0:a040:e097:d499:d27d:7690:9d64) has quit (Ping timeout: 245 seconds)
2013-04-04 19:53:02	ab9rf	i'm not sure what you mean, but that sounds like an algebraic type with three (or maybe four) constructors
2013-04-04 19:53:06	typoclass	> map (elemIndices 'l') ["lolcats", "the lolcats"] -- genk, you could start with this
2013-04-04 19:53:07	lambdabot	  [[0,2],[4,6]]
2013-04-04 19:53:28	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-04-04 19:53:31	<--	gnuwilliam (~william@177.134.99.11) has left #haskell
2013-04-04 19:53:35	<--	jfischoff (~jfischoff@108-218-104-77.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-04 19:53:39	typoclass	> zip [0..] "stuff" -- genk, to add indices to a list, giving a list of tuples, use this :-)
2013-04-04 19:53:41	lambdabot	  [(0,'s'),(1,'t'),(2,'u'),(3,'f'),(4,'f')]
2013-04-04 19:53:42	-->	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has joined #haskell
2013-04-04 19:53:51	<--	silver (~silver@178.120.228.10) has quit (Read error: Connection reset by peer)
2013-04-04 19:54:12	<--	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has quit (Ping timeout: 260 seconds)
2013-04-04 19:54:12	parcs	klrr: data Foo a = Foo Int (Maybe a) (Maybe a) perhaps
2013-04-04 19:54:15	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-04-04 19:54:31	ab9rf	parcs: damn you, beat me to it
2013-04-04 19:54:36	klrr	ab9rf: i mean , if the type is named "Test", it is "Test Int Float Float" where the floats doesnt have to be included
2013-04-04 19:54:45	parcs	u snooze u lose
2013-04-04 19:54:46	klrr	parcs: oh that's a good idea
2013-04-04 19:54:47	-->	k0001 (~k0001@host45.181-1-162.telecom.net.ar) has joined #haskell
2013-04-04 19:54:57	genk	typoclass: thanks, I tried zipping before but I ended up starting from 1 for every row. I'll try that now.
2013-04-04 19:55:05	ab9rf	klrr: data Test = Test1 Int | Test2 Int Float | Test3 Int Float Float
2013-04-04 19:55:08	-->	`fogus (~fogus@freedom.d-a-s.com) has joined #haskell
2013-04-04 19:55:23	ab9rf	klrr: but i suspect that parcs' formulation is probably better in the long run
2013-04-04 19:55:32	klrr	ab9rf: that's not what i meant :P
2013-04-04 19:55:35	<--	kevinqcs (~turing@223.65.142.128) has quit (Ping timeout: 246 seconds)
2013-04-04 19:55:35	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 260 seconds)
2013-04-04 19:55:49	ab9rf	klrr: haskell doesn't really have the concept of an "optional argument"
2013-04-04 19:56:00	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-04-04 19:56:05	<--	arpunk (~user@181.151.69.58) has quit (Ping timeout: 252 seconds)
2013-04-04 19:56:08	ab9rf	but it does have optional values :)
2013-04-04 19:56:38	klrr	ab9rf: well, im trying to implement a binary tree, and all nodes doesnt have to have childrens
2013-04-04 19:56:43	genk	typoclass: a little more help, I tried zipping like this before (now with lolcats :)  : zip [1..] (map (elemIndices 'l') ["lolcats", "the lolcats"])
2013-04-04 19:56:50	dmwit	> let f x yss = do { (r, xy) <- zip [0..] yss; (c, y) <- zip [0..] ys; guard (y == x); return (r, c) } in f 'l' ["lolcats", "stuffl"]
2013-04-04 19:56:52	lambdabot	  Not in scope: `ys'
2013-04-04 19:56:52	lambdabot	 Perhaps you meant one of these:
2013-04-04 19:56:52	lambdabot	   `yss' (line 1), `s' ...
2013-04-04 19:57:00	-->	seliopou (~seliopou@ip68-1-178-167.ri.ri.cox.net) has joined #haskell
2013-04-04 19:57:03	dmwit	> let f x yss = do { (r, ys) <- zip [0..] yss; (c, y) <- zip [0..] ys; guard (y == x); return (r, c) } in f 'l' ["lolcats", "stuffl"]
2013-04-04 19:57:05	lambdabot	  [(0,0),(0,2),(1,5)]
2013-04-04 19:57:05	genk	typoclass: it turns:   [(1,[0,2]),(2,[4,6])]
2013-04-04 19:57:08	dmwit	just for fun =P
2013-04-04 19:57:10	ab9rf	klrr: Data.Tree
2013-04-04 19:57:32	klrr	ab9rf: well, im supposed to implement it myself, it's exercise :)
2013-04-04 19:58:06	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-04 19:58:24	<--	trescenzi (~trescenzi@2620:91:0:163:dd1f:86e0:49fd:4640) has quit (Remote host closed the connection)
2013-04-04 19:58:24	-->	ozgura (~ozgura@host-92-16-2-32.as13285.net) has joined #haskell
2013-04-04 19:58:26	ab9rf	klrr: there's lots of different ways to do trees.
2013-04-04 19:58:32	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-04-04 19:58:35	-->	silver (~silver@37.214.109.219) has joined #haskell
2013-04-04 19:58:54	typoclass	genk: yes, so the next task will be to map (or rather concatMap) over that list, creating the final list of indices
2013-04-04 19:59:02	<--	EarlGray^ (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Quit: Konversation terminated!)
2013-04-04 19:59:24	ab9rf	klrr: e.g. do you put labels on all nodes, or only on leafs?
2013-04-04 19:59:34	-->	trescenzi (~trescenzi@148.100.75.33) has joined #haskell
2013-04-04 19:59:36	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 245 seconds)
2013-04-04 20:00:06	genk	:t concatMap
2013-04-04 20:00:08	lambdabot	(a -> [b]) -> [a] -> [b]
2013-04-04 20:00:37	genk	typoclass: let me look at concatMap, I haven't used it before
2013-04-04 20:00:41	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-04-04 20:00:55	klrr	ab9rf: this is the exercise -> http://shuklan.com/haskell/lec05.html#/0/23 , here's my first attempt -> http://hpaste.org/85190 , but it doesnt seem to work, why is that?
2013-04-04 20:01:02	dmwit	?src concatMap
2013-04-04 20:01:03	lambdabot	concatMap f = foldr ((++) . f) []
2013-04-04 20:01:06	dmwit	ugh
2013-04-04 20:01:12	dmwit	concatMap f xs = concat (map f xs)
2013-04-04 20:01:26	typoclass	genk: oh it's just doing map, and concat afterwards
2013-04-04 20:01:28	dmwit	modulo some junk thrown in for efficiency
2013-04-04 20:01:34	aCube	What's the best way to swap two elements in a list?
2013-04-04 20:01:39	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-04-04 20:01:52	 *	hackagebot http-conduit-downloader 1.0.6 - HTTP downloader tailored for web-crawler needs.  http://hackage.haskell.org/package/http-conduit-downloader-1.0.6 (VladimirShabanov)
2013-04-04 20:01:54	dmwit	klrr: Node isn't the name of a type.
2013-04-04 20:01:54	c_wraith	aCube: I generally find some other way to solve the problem. :)
2013-04-04 20:02:20	klrr	dmwit: oh , but why cant i use a type constructor in there?
2013-04-04 20:02:24	c_wraith	aCube: more seriously, [] isn't a good data structure if you need to do things like that.
2013-04-04 20:02:30	dmwit	klrr: I'm not really sure what you're going for with the Child constructor, though, so I can't really say how to fix it.
2013-04-04 20:02:35	<--	dkasak (~dkasak@dh207-44-90.xnet.hr) has quit (Ping timeout: 255 seconds)
2013-04-04 20:02:42	genk	dmwit: I just saw your code, let me try it
2013-04-04 20:02:44	klrr	dmwit: it
2013-04-04 20:02:47	dmwit	klrr: You can (indeed, must) use a type constructor. But Node isn't a type constructor.
2013-04-04 20:02:51	xenon21	klrr: take a look at this -> data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)
2013-04-04 20:02:53	klrr	dmwit: it's supposed to be a binary tree
2013-04-04 20:02:58	typoclass	aCube: cut the list up, then construct another list in the desired order? 'cut up' in the sense of (x:xs) or something
2013-04-04 20:02:59	klrr	dmwit: it's not?
2013-04-04 20:03:03	xenon21	it's from the book LYAH
2013-04-04 20:03:04	Mortchek	klrr, it's a data constructor.
2013-04-04 20:03:14	klrr	xenon21: no i dont wanna cheat sry
2013-04-04 20:03:20	klrr	Mortchek: okey
2013-04-04 20:03:23	dmwit	klrr: Haskell has two completely separate namespaces: type level and value level.
2013-04-04 20:03:24	-->	solancile (~Solancile@c-67-160-38-187.hsd1.wa.comcast.net) has joined #haskell
2013-04-04 20:03:30	dmwit	klrr: Which can be surprising and is easily forgotten.
2013-04-04 20:03:56	dmwit	klrr: Your declaration is (attempting to) creating one new name at the type level (Tree) and two new names at the value level (Node, Child).
2013-04-04 20:04:09	aCube	Oh wait, I really want permutations :)
2013-04-04 20:04:32	klrr	dmwit: can i fix it somehow without rewritting the design of the implemenetation?
2013-04-04 20:04:32	c_wraith	that's easy. Just use Data.List.permutations! :)
2013-04-04 20:04:35	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-04-04 20:04:40	<--	chatsiri_ (~chatsiri_@49.48.72.93) has quit (Quit: leaving)
2013-04-04 20:04:55	dmwit	klrr: I'm sure you can. But like I said, I don't really understand what you want from a Child, so I can't give too much guidance here.
2013-04-04 20:05:00	dmwit	klrr: What is a Child supposed to be?
2013-04-04 20:05:22	c_wraith	I still find the choice of implementation for permutations a bit odd. Choosing the laziest version, rather than the fastest version.. I mean, laziness is good, but so is performance.
2013-04-04 20:05:24	Mortchek	klrr, keep in mind that if you had a Child data constructor, you could construct a free-standing value, not necessarily in a tree, that is a Child. What would that mean?
2013-04-04 20:05:28	dmwit	klrr: Maybe you meant something like data Tree = Node Int (Maybe Tree) (Maybe Tree) ?
2013-04-04 20:05:32	klrr	dmwit: a child is the two nodes below a node
2013-04-04 20:05:39	klrr	or sth
2013-04-04 20:05:43	klrr	i donno actually :P
2013-04-04 20:05:50	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-04 20:06:00	klrr	dmwit: that's nice idea
2013-04-04 20:06:14	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-04-04 20:06:17	klrr	thanks, but it's sad im too stupid to finish exercise wihtout cheating xD
2013-04-04 20:06:39	dmwit	Not at all. Algebraic types take a bit of practice to get used to.
2013-04-04 20:06:44	xenon21	klrr: yeah, but it's alright just for study.
2013-04-04 20:06:52	ramses_	> let f = fmap ((>>= \(a,b) -> map ((,) a) b) . (zip [2..]) . filter (not . null)) . (map . ((map (+1) .) . elemIndices)) in f 'l' ["lolcats", "stuffl"]
2013-04-04 20:06:53	lambdabot	  [(2,1),(2,3),(3,6)]
2013-04-04 20:06:57	-->	kevinqcs (~turing@223.65.190.128) has joined #haskell
2013-04-04 20:06:59	<--	voyd (~voyd@wthack.de) has quit (Remote host closed the connection)
2013-04-04 20:07:05	ramses_	hehe :)
2013-04-04 20:07:13	-->	chatsiri_ (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-04 20:07:34	-->	r_ickard (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-04-04 20:08:03	dmwit	klrr: Take heart, and keep chugging through more and more exercises. That's my 100% proven advice.
2013-04-04 20:08:17	dmwit	SCIENCE
2013-04-04 20:08:26	<--	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has quit (Ping timeout: 255 seconds)
2013-04-04 20:09:18	klrr	:)
2013-04-04 20:10:23	<--	ludamad (adomurad@nat/redhat/x-jlvsaynmgnhwabpw) has quit (Quit: Leaving)
2013-04-04 20:10:40	-->	roconnor (~roconnor@e120-pool-d89a75a6.brdbnd.voicenetwork.ca) has joined #haskell
2013-04-04 20:10:47	<--	path[l] (~vsi@173.252.71.129) has quit (Quit: path[l])
2013-04-04 20:10:51	-->	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has joined #haskell
2013-04-04 20:11:21	xenon21	klrr: i recommend the 8th chapter from LYAH. it explains the type constructor and the value constructor clearly :)
2013-04-04 20:11:35	-->	bitonic (~user@net-93-64-178-246.cust.dsl.vodafone.it) has joined #haskell
2013-04-04 20:11:46	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-04-04 20:12:39	klrr	xenon21: just read it :P
2013-04-04 20:12:43	-->	circ-user-bAgj2 (~circuser-@46.39.227.221) has joined #haskell
2013-04-04 20:12:44	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-04 20:12:46	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 256 seconds)
2013-04-04 20:12:52	klrr	maybe not carefully enough though :/
2013-04-04 20:13:01	<--	fairfieldt (~chatzilla@205.164.11.248) has left #haskell
2013-04-04 20:13:08	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-04 20:14:12	ab9rf	read it again, haskell stuff takes a few passes to fully understand often enough :)
2013-04-04 20:14:30	__xc	why couldn't there be infinite enumerable
2013-04-04 20:14:35	--	circ-user-bAgj2 is now known as kolmodin
2013-04-04 20:14:48	-->	lesile (459e1d10@gateway/web/freenode/ip.69.158.29.16) has joined #haskell
2013-04-04 20:14:53	elliott	there is an infinite Enum instance (Integer), but it has to cheat.
2013-04-04 20:15:02	elliott	in particular, fromEnum
2013-04-04 20:15:03	__xc	{0,1,2} with succ 2 = 0
2013-04-04 20:15:05	mapf	:i hashUnique
2013-04-04 20:15:22	danharaj	I am a horrible person.
2013-04-04 20:15:26	-->	dkasak (~dkasak@dh207-124-200.xnet.hr) has joined #haskell
2013-04-04 20:15:34	typoclass	danharaj: thanks for the heads-up
2013-04-04 20:15:36	danharaj	I made attribute grammars compute breadth first search for me.
2013-04-04 20:16:08	<--	chatsiri_ (~chatsiri_@49.48.72.93) has quit (Quit: leaving)
2013-04-04 20:16:15	__xc	elliott, yes was thinking to other Z/nZ sets
2013-04-04 20:16:15	elliott	__xc: that is explicitly forbidden if you also derive Bounded
2013-04-04 20:16:27	klrr	i dont think the problem is me not understanding types, it's me not understanding *"%¤¤""# binary trees
2013-04-04 20:16:28	-->	chatsiri_ (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-04 20:16:34	elliott	and more generally, goes counter to other Enum instances, and the default methods may behave weirdly, etc. note: I think this is a misdesign, but it's how it is
2013-04-04 20:16:48	elliott	also it's not entirely clear how to interpret a range in that setting
2013-04-04 20:16:53	__xc	yet maxBound in {0,1,2} wouls still return 2
2013-04-04 20:17:10	elliott	then that violates the laws
2013-04-04 20:17:24	elliott	"For any type that is an instance of class Bounded as well as Enum, the following should hold:
2013-04-04 20:17:27	__xc	hmm right
2013-04-04 20:17:27	elliott	The calls succ maxBound and pred minBound should result in a runtime error."
2013-04-04 20:17:29	lesile	hi, i just recieved my assignment. I have to create a online website scheduling system that link in with sms and outlook.. and need a simple guide how to do this.. i.e. use access or mysql and and use xyz and do etc... It's been over 10 years since I touched programming.
2013-04-04 20:17:30	<--	Thra11 (~thrall@46.208.139.20) has quit (Quit: kthxbai)
2013-04-04 20:17:36	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 264 seconds)
2013-04-04 20:17:37	<--	dylukes (~dylukes@150.212.81.185) has quit (Quit: Computer has gone to sleep.)
2013-04-04 20:17:48	quchen	Welcome to #haskell.
2013-04-04 20:17:50	lesile	vb6 was the latest when I grad. colletge
2013-04-04 20:17:57	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-04-04 20:17:59	quchen	This is a Haskell channel.
2013-04-04 20:18:06	armlesshobo	lol
2013-04-04 20:18:06	<--	kevinqcs (~turing@223.65.190.128) has quit (Ping timeout: 252 seconds)
2013-04-04 20:18:06	elliott	__xc: more generally, I think it's expected that succ p > p, and p > pred p, where defined
2013-04-04 20:18:11	-->	Rickasaurus (~quassel@ool-44c0bd65.dyn.optonline.net) has joined #haskell
2013-04-04 20:18:30	klrr	<- me cheated instead
2013-04-04 20:18:35	lesile	quched, haskell is a programming channel right?
2013-04-04 20:18:35	elliott	(though Enum doesn't require Ord either)
2013-04-04 20:18:37	klrr	idiotic but convenient
2013-04-04 20:18:46	elliott	lesile: this channel is specifically about the Haskell functional programming language
2013-04-04 20:18:47	-->	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has joined #haskell
2013-04-04 20:18:50	elliott	not programming in general
2013-04-04 20:18:51	__xc	elliott, yes the Ord relation also, ok thx
2013-04-04 20:18:53	quchen	lesile: #haskell is about programming as much as onions are about cooking.
2013-04-04 20:19:22	xenon21	maybe you could ask at SO :)
2013-04-04 20:19:22	lesile	ic can you give me the irc channell for web programming /development channel?
2013-04-04 20:19:26	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-04-04 20:19:27	armlesshobo	#haskell is about spatulas :P
2013-04-04 20:19:42	lesile	thx in advance quchen
2013-04-04 20:19:43	-->	otend (~otend@134.193.247.177) has joined #haskell
2013-04-04 20:19:45	-->	Williams (~william@139.193.203.184) has joined #haskell
2013-04-04 20:19:48	sproingie	i thought it was about burritos
2013-04-04 20:19:51	<--	ulfdoz (~mary@p5B38BD29.dip.t-dialin.net) has quit (Ping timeout: 260 seconds)
2013-04-04 20:19:55	quchen	lesile: Unfortunately no, but I think you can find references to those online. I haven't been anywhere but in #haskell on Freenode so far.
2013-04-04 20:19:57	-->	dylukes (~dylukes@150.212.81.185) has joined #haskell
2013-04-04 20:20:14	quchen	Maybe check your client's channel list?
2013-04-04 20:20:15	<--	lesile (459e1d10@gateway/web/freenode/ip.69.158.29.16) has quit (Quit: Page closed)
2013-04-04 20:20:16	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-04-04 20:20:23	typoclass	lesile: that seems like a long, elaborate project :-) you might want to start with learning some basic haskell. lyah is a good book available for free
2013-04-04 20:20:26	typoclass	@where lyah
2013-04-04 20:20:26	lambdabot	http://www.learnyouahaskell.com/
2013-04-04 20:20:39	-->	chatsiri1 (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-04 20:20:58	elliott	they left
2013-04-04 20:21:00	<--	dylukes (~dylukes@150.212.81.185) has quit (Client Quit)
2013-04-04 20:21:06	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 264 seconds)
2013-04-04 20:21:12	elliott	but also, I doubt they were planning to do it in Haskell :)
2013-04-04 20:21:22	ChongLi_	just a subtle form of trolling
2013-04-04 20:21:29	__xc	he right I guess
2013-04-04 20:21:40	-->	path[l] (~vsi@173.252.71.6) has joined #haskell
2013-04-04 20:21:52	__xc	there ae numerous of them on SO
2013-04-04 20:22:01	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has left #haskell ("お前は知りすぎた")
2013-04-04 20:22:14	<--	ChongLi_ (~chongli@24.212.141.111) has quit (Quit: leaving)
2013-04-04 20:22:33	klrr	what does fromIntegral do? (didnt get hoogles explaination)
2013-04-04 20:22:33	-->	hallski (~hallski@h-105-124.a226.priv.bahnhof.se) has joined #haskell
2013-04-04 20:22:38	-->	augur (~augur@ip-64-134-66-47.public.wayport.net) has joined #haskell
2013-04-04 20:22:51	-->	ChongLi (~chongli@24.212.141.111) has joined #haskell
2013-04-04 20:22:53	danharaj	:t fromIntegral
2013-04-04 20:22:54	lambdabot	(Integral a, Num b) => a -> b
2013-04-04 20:23:04	otters	klrr: it's numeric type conversion
2013-04-04 20:23:09	danharaj	fromIntegral 1 :: Double
2013-04-04 20:23:09	typoclass	klrr: it's a universal conversion function for numbers
2013-04-04 20:23:10	-->	nouitfvf (~brain@unaffiliated/nouitfvf) has joined #haskell
2013-04-04 20:23:13	danharaj	> fromIntegral 1 :: Double
2013-04-04 20:23:15	lambdabot	  1.0
2013-04-04 20:23:16	-->	dylukes (~dylukes@150.212.81.185) has joined #haskell
2013-04-04 20:23:23	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-04-04 20:23:23	<--	pala2 (~pala@HSI-KBW-134-3-229-202.hsi14.kabel-badenwuerttemberg.de) has quit (Ping timeout: 240 seconds)
2013-04-04 20:23:23	danharaj	> fromIntegral 1 :: Rational
2013-04-04 20:23:25	lambdabot	  1 % 1
2013-04-04 20:23:32	otters	> fromIntegral (2 ^ 64) :: Int
2013-04-04 20:23:34	lambdabot	  0
2013-04-04 20:23:50	klrr	otters: okey, so it what does it do?
2013-04-04 20:23:59	otters	all those things
2013-04-04 20:24:02	__xc	> fromIntegral pi :: Rational
2013-04-04 20:24:04	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-04 20:24:04	lambdabot	   (GHC.Float.Floating a0)...
2013-04-04 20:24:06	<--	Eduard_Munteanu (~Eduard_Mu@188.25.244.59) has quit (Quit: leaving)
2013-04-04 20:24:10	klrr	i dont get it
2013-04-04 20:24:14	otters	klrr: it converts numbers to other types
2013-04-04 20:24:17	klrr	?src fromIntegral
2013-04-04 20:24:18	lambdabot	fromIntegral = fromInteger . toInteger
2013-04-04 20:24:20	-->	Eduard_Munteanu (~Eduard_Mu@188.25.244.59) has joined #haskell
2013-04-04 20:24:21	otters	:t round
2013-04-04 20:24:22	lambdabot	(Integral b, RealFrac a) => a -> b
2013-04-04 20:24:35	hpaste	pamojarpan revised “filenum”: “--” at http://hpaste.org/85160
2013-04-04 20:24:39	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-04 20:24:42	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 252 seconds)
2013-04-04 20:24:51	klrr	otters: so, it take a type and a type and returns the first type as the second?
2013-04-04 20:25:07	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-04-04 20:25:15	otters	in so many words
2013-04-04 20:25:17	-->	Maarten_ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has joined #haskell
2013-04-04 20:25:33	xenon21	:info Integral
2013-04-04 20:25:34	otters	it takes a number in the typeclass Integer and returns a number in the typeclass Num
2013-04-04 20:25:48	<--	roconnor (~roconnor@e120-pool-d89a75a6.brdbnd.voicenetwork.ca) has quit (Ping timeout: 256 seconds)
2013-04-04 20:26:03	klrr	otters: okey, that explains it better :D how do you specify what type it gonna return?
2013-04-04 20:26:33	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-04-04 20:26:37	otters	klrr: normally what you'd use fromIntegral for is, say, if you have an Int and you're passing it to a function that needs a Double
2013-04-04 20:26:41	-->	doshitan_ (~doshitan@156.26.212.85) has joined #haskell
2013-04-04 20:26:59	-->	edtsech (~edtsech@98.193.broadband6.iol.cz) has joined #haskell
2013-04-04 20:27:01	xenon21	:t fromIntegral
2013-04-04 20:27:02	lambdabot	(Integral a, Num b) => a -> b
2013-04-04 20:27:05	otters	that way you can just do yourFunc (fromIntegral someNumber)
2013-04-04 20:27:12	otters	and it magically converts to the equivalent Double
2013-04-04 20:27:17	klrr	now i get it, thanks! :D
2013-04-04 20:27:19	otters	klrr: you can also use an explicit typecast
2013-04-04 20:27:23	otters	> fromIntegral 1 :: Rational
2013-04-04 20:27:24	lambdabot	  1 % 1
2013-04-04 20:27:26	-->	`^_^v (~nycs@ool-4573da18.dyn.optonline.net) has joined #haskell
2013-04-04 20:27:33	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-04 20:27:35	-->	Icarot (~Icarot@199-188-193-9.PUBLIC.monkeybrains.net) has joined #haskell
2013-04-04 20:28:07	-->	andrew (~andrew@host86-165-250-113.range86-165.btcentralplus.com) has joined #haskell
2013-04-04 20:28:19	__xc	 > fromIntegral (1%1) :: Doublel
2013-04-04 20:28:20	-->	Thomyho6 (~thomyho@mnhm-5f75e666.pool.mediaWays.net) has joined #haskell
2013-04-04 20:28:21	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-04-04 20:28:22	andrew	Can anyone tell me why this takes forever to compute?
2013-04-04 20:28:23	andrew	http://hpaste.org/85192
2013-04-04 20:28:27	__xc	> fromIntegral (1%1) :: Double
2013-04-04 20:28:29	lambdabot	  Not in scope: `%'
2013-04-04 20:28:29	lambdabot	 Perhaps you meant `R.%' (imported from Data.Ratio)
2013-04-04 20:28:31	--	andrew is now known as Guest29682
2013-04-04 20:28:48	Guest29682	I know the issue is in my recurrsion I just dont know where
2013-04-04 20:28:49	<--	Zeev (~Zeev@bzq-109-66-43-82.red.bezeqint.net) has quit (Read error: Connection reset by peer)
2013-04-04 20:28:50	otters	> fromIntegral (1 R.% 1) :: Double
2013-04-04 20:28:52	-->	samedhi (~stephen@208.70.28.214) has joined #haskell
2013-04-04 20:28:52	lambdabot	  No instance for (GHC.Real.Integral (GHC.Real.Ratio a0))
2013-04-04 20:28:52	lambdabot	   arising from a u...
2013-04-04 20:28:55	-->	Thomyho7 (~thomyho@mnhm-5f75e666.pool.mediaWays.net) has joined #haskell
2013-04-04 20:29:04	<--	Icarot (~Icarot@199-188-193-9.PUBLIC.monkeybrains.net) has quit (Remote host closed the connection)
2013-04-04 20:29:21	__xc	> fromIntegral 1.0 :: Int
2013-04-04 20:29:23	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-04 20:29:23	lambdabot	   (GHC.Real.Fractional a0...
2013-04-04 20:29:30	Williams	is there an equivalent for converting from double to int?
2013-04-04 20:29:35	otters	:t round
2013-04-04 20:29:36	lambdabot	(Integral b, RealFrac a) => a -> b
2013-04-04 20:29:39	otters	:t truncate
2013-04-04 20:29:40	danharaj	:t truncate
2013-04-04 20:29:40	lambdabot	(Integral b, RealFrac a) => a -> b
2013-04-04 20:29:41	lambdabot	(Integral b, RealFrac a) => a -> b
2013-04-04 20:29:47	otters	:t floor
2013-04-04 20:29:49	lambdabot	(Integral b, RealFrac a) => a -> b
2013-04-04 20:30:05	<--	jdnavarro (~danny@231.Red-79-144-190.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-04-04 20:30:06	Williams	oh of course
2013-04-04 20:30:16	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Client Quit)
2013-04-04 20:30:42	klrr	can someone explain what "it" does , in this scenario : http://shuklan.com/haskell/lec06.html#/0/10 ?
2013-04-04 20:30:45	danharaj	Guest29682: the last case does not ever get checked because the pattern (x,y) matches anything of the form (x, 1000) first.
2013-04-04 20:30:57	danharaj	Guest29682: also you should not use number patterns, use guards instead.
2013-04-04 20:31:17	otters	klrr: "it" is the previous result
2013-04-04 20:31:17	Mortchek	danharaj, what's wrong with number patterns?
2013-04-04 20:31:18	__xc	integral is the family of Int, Int8, Int16, Integer..?
2013-04-04 20:31:25	otters	klrr: in ghci
2013-04-04 20:31:31	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-04-04 20:31:35	-->	noteventime (~user@c83-253-73-118.bredband.comhem.se) has joined #haskell
2013-04-04 20:31:44	Guest29682	danharaj: dohhh
2013-04-04 20:31:54	 *	hackagebot fixed-vector 0.4.0.0 - Generic vectors with statically known size.  http://hackage.haskell.org/package/fixed-vector-0.4.0.0 (AlexeyKhudyakov)
2013-04-04 20:32:13	danharaj	Mortchek: http://stackoverflow.com/questions/3748592/what-are-nk-patterns-and-why-are-they-banned-from-haskell-2010#
2013-04-04 20:32:13	<--	Thomyho7 (~thomyho@mnhm-5f75e666.pool.mediaWays.net) has quit (Read error: Connection reset by peer)
2013-04-04 20:32:17	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-04-04 20:32:24	<--	chatsiri_ (~chatsiri_@49.48.72.93) has quit (Ping timeout: 252 seconds)
2013-04-04 20:32:33	elliott	er?
2013-04-04 20:32:37	elliott	those aren't n+k patterns
2013-04-04 20:32:40	xenon21	Guest29682: try reordering the patterns, the edge condition(the last one) is never going to be evaluated
2013-04-04 20:32:44	elliott	pattern-matching on numeric literals is perfectly fine and not removed at all
2013-04-04 20:32:49	-->	tzh (~xax@c-75-72-233-185.hsd1.mn.comcast.net) has joined #haskell
2013-04-04 20:32:49	-->	etehtsea (~textual@188.134.44.6) has joined #haskell
2013-04-04 20:32:56	<--	chatsiri1 (~chatsiri_@49.48.72.93) has quit (Ping timeout: 260 seconds)
2013-04-04 20:33:03	Mortchek	danharaj, that doesn't answer my question.
2013-04-04 20:33:05	elliott	n+k patterns are of the form "f (n+k) = ..." (for some constant k)
2013-04-04 20:33:24	<--	Thomyho6 (~thomyho@mnhm-5f75e666.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-04-04 20:33:48	danharaj	elliott: matching on numeric literals is kind of poor form imo
2013-04-04 20:33:49	klrr	?src foldl
2013-04-04 20:33:49	lambdabot	foldl f z []     = z
2013-04-04 20:33:49	lambdabot	foldl f z (x:xs) = foldl f (f z x) xs
2013-04-04 20:33:59	danharaj	elliott: it is kind of error prone
2013-04-04 20:34:01	Mortchek	danharaj, but why?
2013-04-04 20:34:03	-->	Zeev (~Zeev@109.67.24.93) has joined #haskell
2013-04-04 20:34:11	genk	typoclass: do you have any time?
2013-04-04 20:34:19	elliott	danharaj: I don't see why... it has a well-defined, simple desugaring in terms of Num and Eq, and is much more readable when dealing with nested patterns
2013-04-04 20:34:24	elliott	do you avoid pattern-matching on Chars too?
2013-04-04 20:34:25	danharaj	Mortchek: Because ordering your pattern matches to get all your cases right is tricky because of the way pattern match fallthrough works.
2013-04-04 20:34:37	hpaste	genk pasted “findAgent2” at http://hpaste.org/85193
2013-04-04 20:34:39	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-04-04 20:34:54	klrr	is foldl like map, but it lets the function in question also take two parameters and also returns the total value, not a list?
2013-04-04 20:35:00	Mortchek	danharaj, you have to order your patterns correctly for *any* type.
2013-04-04 20:35:04	otters	> foldl f [a,b,c]
2013-04-04 20:35:06	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr
2013-04-04 20:35:06	lambdabot	                    [Deb...
2013-04-04 20:35:11	Mortchek	danharaj, I'm wondering what your argument specifically for numbers is.
2013-04-04 20:35:12	otters	> foldl f a [b,c,d]
2013-04-04 20:35:14	lambdabot	  f (f (f a b) c) d
2013-04-04 20:35:29	Mortchek	And using guards doesn't obviate the needs to order your cases correctly.
2013-04-04 20:35:29	genk	map (elemIndices 'l') ["lolcats", "the lolcats"]
2013-04-04 20:35:32	Guest29682	Removed the 0,0 pattern aswell since it was usless
2013-04-04 20:35:34	otters	> foldl (:) [] [1..10]
2013-04-04 20:35:36	lambdabot	  Occurs check: cannot construct the infinite type: a0 = [a0]
2013-04-04 20:35:39	otters	rats
2013-04-04 20:35:44	otters	> foldr (:) [] [1..10]
2013-04-04 20:35:45	lambdabot	  [1,2,3,4,5,6,7,8,9,10]
2013-04-04 20:35:50	genk	> map (elemIndices 'l') ["lolcats", "the lolcats"]
2013-04-04 20:35:51	lambdabot	  [[0,2],[4,6]]
2013-04-04 20:36:06	danharaj	Mortchek: Usually when you are doing numeric stuff you are also going to have guards of the form (x == y) etc. and IMO it is better to have all your conditions listed as guards than have pattern matching on literals and then guards.
2013-04-04 20:36:34	Kaidelong	klrr: map is an example of foldr, actually. Although what you said seems right
2013-04-04 20:36:36	genk	> let f x yss = do { (r, ys) <- zip [0..] yss; (c, y) <- zip [0..] ys; guard (y == x); return (r, c) } in f 'l' ["lolcats", "stuffl"]
2013-04-04 20:36:37	lambdabot	  [(0,0),(0,2),(1,5)]
2013-04-04 20:36:40	--	irc: disconnected from server
2013-04-05 15:00:43	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-05 15:00:43	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-05 15:00:43	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-05 15:00:43	--	Nicks #haskell: [@ChanServ [[zzz]] ]OLI[ __main__ __xc _anona _d3f _flow_ _janne `0660 `bps `micro `nand` ab9rf absence acfoltzer aCube Adeon adimit Adios adnap aesptux Afish afleckenstein aforemny_ agundry ahf ahihi ahkurtz ajhager akahn akamaus akosch akraut alang albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ alios alistairclark alkabetz alnix alpounet AmaBoten Amadiro amathew amatsu amiller anachron anders^^ anderse andrewsw aninhumer AntiSpamMeta apaku apella Apes araujo arbn arcatan argiopeweb args[0] aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas augustl averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bergey` betawaffle bezik bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe blz37 bobry bogner Boney Boreeas bourbaki brainproxy_ Brando753 brandonw brett BrianHV brisbin brixen bstrie Bwild bxc_ byorgey ByronJohnson bytbox c_wraith cads Cale caleb_9 caligula_ Canar canta canvon ccasin ccxCZ cdh473 cdidd cduez ceii celery__ Cerise certainty chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisdone chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmsd2 cods colah_ collin comak companion_cube confound connelly_ coppro copumpkin cordawyn corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orker crdueck cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander descender dfletcher dgpratt DigitalKiwi dilinger_ dimka dixie djahandarie djcoin dju dkasak dlundy_ dm120769 dmwit Dodek dogmaT dolio DolphR domingo doomlord dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago dschoepe DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dyreshark eacameron EarlGray earthy edenc edsko edtsech Eduard_Munteanu edwardk edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 electrogeek elgot Eliel elliott elliottcable em end3rW endojelly Enigmagic ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot etehtsea ethercrow etrepum eviltwin_ Excureo eyck_ f8 fabjan faen fall_ fayden fcr_ felipe_ fergusnoble fgomez fihi09 finnrobi fionnan FireFly fireglow fizbin flebron floatingman1 flori flux Fnar folone formalcow fosky freiksenet frio frontend1oader froztbyte fry fryguybob ft Fubar^ Fuco fumieval FunkyDrummer Fuuzetsu FUZxxl fxrh gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul__ gienah gilbertw1 Gilly glutamate Gothmog_ Gracenotes greymalkin gseitz gspr guerrill1 Guest6687 Guest67399 Guest76523 Guest82962 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamid hamishmack hanDerPeder heath Heffalump helgikrs henk Hermit heruur hiptobecubic hiratara hiredman hiroyuki2 hive-mind hkBst homo_vitruvius horlicks hpaste hpc hpd hseg hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar ido idoru Igloo ikeg imphasing implr inarenvi inr_ int-e integral_ Internet13 ion ique ironm isenmann ISF itemad Itkovian iulian ivan\ ivan` ixian izym Jaak jabirali jackhill jacobw jaimef jamwt janbanan janluu jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro_ jdoliner_ Jeanne-Kamikaze Jello_Raptor jercos jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh_ JohnBat26 johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtannenbaum jtobin julmuri junsuijin jyp jyyou k0001 k00mi_ k0ral_ kadoban kaictl kakos kallisti kalven KaneTW kaol kaoskorobase kauschovar kazimir42 Ke kennyd kennyp kerrick ketil Khisanth kini Kinnison KitB_ kith kkris kloeri klrr klugez kmicu kmrhb Kneiva knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kvey kylcarte kyle__ labo lachenmayer lahwran lambdabot LAMMJohnson Laney latermuse latro`a lattenwald lazard LeaChim lenstr leoncamel2 leroux Lethalman levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luite lunarjar lzm m3ga machisuji_ magicman mahogny majoh maksbotan maltin mami mapf marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mceier mcguitan93 McManiaC mcstar mechairo` mefisto` Megant melter memand mendez mephx_ MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjga mjr841 MK_FG mlh mlinksva mm_freak_ mmaruseacph2 MoALTz mokus mollerstrand MOMI monique_ monochrom mononofu monsieurlu moonlite_ mornfall morolin mortberg Mortchek mr- mrd MrFenix mrko mrshoe MrWoohoo mspells msuszczy mtao mtlatif mullein munro mux My_Hearing myme mysticc n_b Nafai Nahra Nanar nardul Natch natte ndngvr` necrobious neena neothemachine netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 Nimatek nimred ninegrid ninzine Nisstyre-laptop niteria nlogax no-n noam noj noplamodo normanrichards notdan NougatRillettes nouitfvf Nshag nsxt numeral nuncanada nus-- nuttycom nwf oab oax obcode ocharles odr ofan Okasu OlegYch opqdonut Ornedan ortmage osa1__ osfameron otend othiym23 otterdam otters otto_s ousado ozataman ozgura Paks Palmik_ Pantoufle pantsman ParadoxMuffin ParahSail1n parcs PartyKat1e pcapriotti pchiusano pdxleif_away peddie peltchu pepijndevos perlite permagreen perspectival petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ pib1972 pigoz pikhq piotr_ plhk pnielsen popz pqmodn pr predator117 preflex prh pricklypear prinnysocks PrO_OkI_ profmakx prophile ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ q66 qrlr quaestor quchen quicksilver quuxman qwandor qwr qz r126l raek raichoo raid rainmaker Ralith ramses_ Raynes Raynos Razz reckler redjohn reggie1 reiddraper Rembane RenJuan rexamophone rfw RichyB Rickasaurus rio Riussi rmunroe robawt robbe- robbert robstewartuk rofer Rotaerk rs234 rsimoes rsuniev123 ryanakca ryant50001 s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sambio sanemat saurik scgilardi schlumpi schovi seats Sebastien-L SegFaultAX sellout- sepp2k setmeaway Sgeo sgronblo_ sh shachaf shanse Shin-LaC shintah SHODAN shutdown_-h_now si14 silver simon__ simpson sirchurchill sjl skp skyflash SLi sm smarter snowylike snoyberg so Soft sohum solarus solirc sonda Sonderblade sopvop sordina3 SoupE spion_ spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire stat_vi statusfailed steez stelleg_away stepcut stephe strax suiside sully sunfun sunnavy supernumeraryshi supersym supki sw17ch sysopfb t7 tahu tamiko tanakh tanakh__ Taneb Tarential taruti tavelram tazjin td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche The_third_man theDon TheFuzzball theorbtwo TheRedMood thetallguy thetallguy1 thirsteh ThomasLocke thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome timemage timjb tippenein tkd tmiw TML tntc tobiassjosten tom4939 tomaw tomboy64 tomejaguar tomh__ tomku tomprince ToRA Tordek trescenz_ trevize_ tridactyla tromp_ tsou tswett ttuegel tunixman tuv tvaalen Twey tyler tzxn3 u_ Ulrar Urchin Urchin[emacs] UziMonkey__ v0|d Valodim vehk verrens Vert Vertue vhz vikraman vili vmesoff vobi Volstvok Vorpal Vq vraid VZakharov wagle Walther warpy Watcher7|off waterlaz wei2912 weie wereHamster wess whaletechno WhereIsMySpoon whoops wilfredh William__ Will| wjlroe wollw wormphlegm wting wto wtw_ wumpus wunki x7 xaimus xcombelle xcvii_ xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl xrq xunatai xymox Y_Less yacks yam yan_ yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike Zariel zebr Zeev zeiris zenzike ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ zz_nh2]
2013-04-05 15:00:43	--	Channel #haskell: 1005 nicks (1 op, 0 halfops, 0 voices, 1004 normals)
2013-04-05 15:00:44	--	URL for #haskell: http://www.haskell.org/
2013-04-05 15:00:45	--	Mode #haskell [+CLcnpt]
2013-04-05 15:00:45	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-05 15:01:08	Taneb	Is there a way, with ConstraintKinds, make a constraint "c is either equal to or a superclass of Monoid"?
2013-04-05 15:01:19	Taneb	subclass, rather
2013-04-05 15:01:33	quchen	Taneb: (Monoid c)? :-)
2013-04-05 15:01:48	Taneb	quchen, c is of kind Constraint
2013-04-05 15:01:55	quchen	Oh I see
2013-04-05 15:02:05	<--	trescenz_ (~trescenzi@2620:91:0:163:ac7a:b4ec:e906:9f3e) has quit (Remote host closed the connection)
2013-04-05 15:02:11	quchen	(And don't have an answer)
2013-04-05 15:02:40	Taneb	Well, it's of kind * -> Constraint
2013-04-05 15:03:10	<--	isenmann (~isenmann@blackhole.science-computing.de) has quit (Quit: Leaving.)
2013-04-05 15:03:13	-->	pala2 (~pala@HSI-KBW-134-3-229-202.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-05 15:03:15	-->	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has joined #haskell
2013-04-05 15:04:27	-->	andrey013 (~chatzilla@95.73.138.212) has joined #haskell
2013-04-05 15:04:43	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-04-05 15:04:54	aCube	@hoogle Array (i,i) v -> Array i v
2013-04-05 15:04:54	lambdabot	No results found
2013-04-05 15:05:04	aCube	@hoogle Array (i,i) v -> [Array i v]
2013-04-05 15:05:05	lambdabot	No results found
2013-04-05 15:05:10	Taneb	:t ixmap
2013-04-05 15:05:11	lambdabot	(Ix j, Ix i) => (i, i) -> (i -> j) -> Array j e -> Array i e
2013-04-05 15:05:18	Taneb	No, it's not that
2013-04-05 15:05:26	aCube	Is there a function to return all rows of an Array?
2013-04-05 15:05:44	aCube	(and for columns?)
2013-04-05 15:06:31	-->	fumieval_ (~fumieval@110-135-96-96.rev.home.ne.jp) has joined #haskell
2013-04-05 15:07:31	Cale	aCube: there isn't a specific function for that, but it's easy to write
2013-04-05 15:07:41	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-05 15:07:48	<--	fumieval (~fumieval@110-135-96-96.rev.home.ne.jp) has quit (Ping timeout: 256 seconds)
2013-04-05 15:07:52	Cale	(because the array library doesn't actually have a specific notion of rows or columns)
2013-04-05 15:07:59	aCube	Cale: How would one write a function like that? Manually traversing over the indicies?
2013-04-05 15:08:01	-->	aztek (~aztek@dhcp-2-72-ben.yandex.net) has joined #haskell
2013-04-05 15:08:03	Cale	yes
2013-04-05 15:08:47	-->	morazow (~morazow@gsd114.gsd.inesc-id.pt) has joined #haskell
2013-04-05 15:08:53	<--	reckler (~reckler@ppp118-208-130-123.lns20.bne1.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-04-05 15:09:55	Taneb	:t ixmap ((,) (3 :: Int))
2013-04-05 15:09:56	lambdabot	    Couldn't match expected type `(i0, i0)'
2013-04-05 15:09:56	lambdabot	                with actual type `b0 -> (a0, b0)'
2013-04-05 15:09:56	lambdabot	    In the return type of a call of `(,)'
2013-04-05 15:10:05	Taneb	:t ixmap undefined ((,) (3 :: Int))
2013-04-05 15:10:06	lambdabot	Ix i => Array (Int, i) e -> Array i e
2013-04-05 15:10:15	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-04-05 15:10:36	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-04-05 15:11:30	aCube	> splitEvery 10 $ Data.Foldable.toList $ listArray ((1,1), (10,10)) [1..]
2013-04-05 15:11:32	lambdabot	  [[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,...
2013-04-05 15:11:42	klrr	> 1 + 2
2013-04-05 15:11:44	lambdabot	  3
2013-04-05 15:11:47	-->	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-04-05 15:11:52	klrr	> let b = 2
2013-04-05 15:11:54	lambdabot	  not an expression: `let b = 2'
2013-04-05 15:11:59	hseg	Is there a way to import an entire module, and then import one data constructor qualified?
2013-04-05 15:12:08	klrr	> let b = 2 in b+2
2013-04-05 15:12:10	lambdabot	  4
2013-04-05 15:12:21	hseg	s/and then import/such that/
2013-04-05 15:12:30	aCube	hseq: import M hiding (<Constructor>); import qualified M (Constructor) as X
2013-04-05 15:12:46	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-04-05 15:13:08	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-04-05 15:13:16	hseg	So in that case, everything in M except for Constructor will be unqualified, and Constructor can only be accessed as X.Constructor?
2013-04-05 15:13:25	<--	itemad (~user@212.0.102.162) has quit (Remote host closed the connection)
2013-04-05 15:13:32	-->	Zenol (~zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-04-05 15:13:37	aCube	yes
2013-04-05 15:13:37	-->	Thomyho3 (~thomyho@mnhm-4d011c3e.pool.mediaWays.net) has joined #haskell
2013-04-05 15:14:03	hseg	It's a pity that disambiguation isn't done based on types. That would solve my problem, as both of my identifiers have different types.
2013-04-05 15:14:07	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Excess Flood)
2013-04-05 15:14:09	dmj	I'm attempting to print HTML using primitive recursion, and cannot seem to find the right way to align these functions. Any help is appreciated
2013-04-05 15:14:15	hpaste	dmj pasted “Print HTML, Recursion problems” at http://hpaste.org/85242
2013-04-05 15:14:45	-->	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-04-05 15:14:49	-->	totimkopf (~jamesmart@unaffiliated/totimkopf) has joined #haskell
2013-04-05 15:14:51	hseg	i.e. given foo :: A and foo :: B, any occurence of foo is typechecked, and if it can be unified with precisely one of A,B, that instance is bound.
2013-04-05 15:14:52	dmj	esp in the primRecXML portion
2013-04-05 15:15:12	aCube	hseq: You could also define a class Foo a where foo :: a and then instance Foo String where foo = "Hello world"; instance Foo Int where foo = 42
2013-04-05 15:15:25	Zenol	Hi guys. I need your help. I have a function that take an integer and a list of length k, and build a new line of length k. I want this fonction to be called 1 000 000 times, each time with the index and the last computed list. How should I do? I tried a simple recursion bu the stack explode...
2013-04-05 15:16:02	hseg	Right, but that would overcomplicate things.
2013-04-05 15:16:10	hiptobecubic	Zenol, show some code. Paste at hpaste.org
2013-04-05 15:16:23	aCube	hseg: are the types / functions where you need this standard functions?
2013-04-05 15:16:37	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-04-05 15:16:40	quchen	dmj: That code is very haed to read without any comments. Also the lines are very long.
2013-04-05 15:16:55	hseg	In what sense? I'm defining two types with the same data constructor.
2013-04-05 15:17:38	--	Watcher7|off is now known as Watcher7
2013-04-05 15:18:04	aCube	I thought maybe you could use some predefined type classes (like Traversable or something), but in that case you have to use qualified imports if you don't want to rename the constructors
2013-04-05 15:19:04	hseg	Wouldn't make sense, as there is no other sensible name to give the constructor.
2013-04-05 15:19:46	-->	trescenzi (~trescenzi@2620:91:0:163:68b7:3fd:3c7:2cb5) has joined #haskell
2013-04-05 15:20:02	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-04-05 15:20:09	ramses_	Zenol: you could try with until, I'd think that would use constant stack space
2013-04-05 15:20:13	ramses_	:t until
2013-04-05 15:20:15	lambdabot	(a -> Bool) -> (a -> a) -> a -> a
2013-04-05 15:20:17	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-04-05 15:20:24	<--	totimkopf (~jamesmart@unaffiliated/totimkopf) has quit (Quit: leaving)
2013-04-05 15:20:40	<--	amathew (~Adium@cpe-74-73-181-112.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-05 15:20:49	Zenol	ramses_ > http://hpaste.org/85243 :)
2013-04-05 15:20:55	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-04-05 15:21:09	Zenol	ramses_ > I'll try this.
2013-04-05 15:21:19	<--	trescenzi (~trescenzi@2620:91:0:163:68b7:3fd:3c7:2cb5) has quit (Remote host closed the connection)
2013-04-05 15:21:58	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-05 15:22:18	ramses_	Zenol: you probably don't want to explicitly create that huge closure you mention in the comment
2013-04-05 15:22:35	<--	glutamate (6d9ca70c@gateway/web/freenode/ip.109.156.167.12) has quit (Quit: Page closed)
2013-04-05 15:23:04	<--	fosky (~fosky@ppp118-209-78-45.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-04-05 15:23:11	<--	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Ping timeout: 252 seconds)
2013-04-05 15:23:18	hseg	It doesn't make sense that two identifiers with different types are considered indistinct if given the same name.
2013-04-05 15:23:55	hseg	Shouldn't it be possible to distinguish between two identically-named identifiers based on their type?
2013-04-05 15:24:43	-->	marekw2143 (~mwawrzycz@78.133.254.90) has joined #haskell
2013-04-05 15:25:01	-->	fro0t (~fro0t@1.23.67.157) has joined #haskell
2013-04-05 15:25:01	marekw2143	hello, how can I check installed package version in ubuntu ?
2013-04-05 15:25:22	-->	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-04-05 15:25:24	<--	melter (~Melter@2001:4930:116:0:c1ad:cbc9:dc9c:8c2a) has quit (Read error: Connection reset by peer)
2013-04-05 15:25:57	<--	ParadoxMuffin (~paradoxmu@93-86-35-244.dynamic.isp.telekom.rs) has quit (Ping timeout: 248 seconds)
2013-04-05 15:26:15	-->	trescenzi (~trescenzi@2620:91:0:163:95d7:2e30:8462:cc76) has joined #haskell
2013-04-05 15:26:18	ramses_	@faq can Haskell check installed package version in Ubuntu?
2013-04-05 15:26:18	lambdabot	The answer is: Yes! Haskell can do that.
2013-04-05 15:26:21	-->	knightshade (~knightsha@p54BC5CF1.dip.t-dialin.net) has joined #haskell
2013-04-05 15:26:30	ramses_	marekw2143: use Haskell ;)
2013-04-05 15:27:02	<--	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has quit (Ping timeout: 252 seconds)
2013-04-05 15:27:10	<--	doomlord (~doomlod@host86-145-105-56.range86-145.btcentralplus.com) has quit (Quit: Leaving)
2013-04-05 15:27:20	-->	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has joined #haskell
2013-04-05 15:27:32	bartavelle	marekw2143, dpkg -l
2013-04-05 15:27:41	-->	doomlord (~doomlod@host86-145-105-56.range86-145.btcentralplus.com) has joined #haskell
2013-04-05 15:27:45	Clint	@hackage dpkg
2013-04-05 15:27:46	lambdabot	http://hackage.haskell.org/package/dpkg
2013-04-05 15:28:04	-->	Cale (~Cale@CPE00026f8481b6-CM00222d55727d.cpe.net.cable.rogers.com) has joined #haskell
2013-04-05 15:28:14	-->	Breadmonster (4e9ae4b3@gateway/web/freenode/ip.78.154.228.179) has joined #haskell
2013-04-05 15:28:21	Breadmonster	I've been working through LYAH.
2013-04-05 15:28:31	Breadmonster	How do I implement trees in Haskell?
2013-04-05 15:28:55	ramses_	Breadmonster: lyah defines a binary tree somewhere
2013-04-05 15:29:35	hpaste	“slidegossip.com Pusatnya Pencarian Profil Artis, Model dan Talent” pasted “slidegossip.com Pusatnya Pencarian Profil Artis, Model dan Talent” at http://hpaste.org/85244
2013-04-05 15:29:43	hseg	GHCi chokes on the following line: import qualified Syntax.VM  (VMInst(Label)) as VM
2013-04-05 15:29:59	<--	quchen (~david@wthp166d.physik.uni-wuerzburg.de) has quit (Ping timeout: 245 seconds)
2013-04-05 15:30:35	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-04-05 15:31:11	-->	kevinqcs (~turing@183.208.24.25) has joined #haskell
2013-04-05 15:31:33	-->	borderer (~bob@langhaugh.demon.co.uk) has joined #haskell
2013-04-05 15:31:49	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-04-05 15:32:05	Breadmonster	Can Haskell be used for compilers?
2013-04-05 15:32:06	-->	Argue (~Argue@112.209.13.160) has joined #haskell
2013-04-05 15:32:10	<--	dmj (~user@205-178-69-188.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Ping timeout: 256 seconds)
2013-04-05 15:32:26	eikke	Breadmonster: of course
2013-04-05 15:32:27	hseg	What I'm trying to do is import the Label constructor for the VMInst type from the Syntax.VM module, where all references to it must be of the form VM.Label
2013-04-05 15:32:36	-->	bscarlet (~bscarlet@static-71-174-103-28.bstnma.fios.verizon.net) has joined #haskell
2013-04-05 15:32:43	chrisdone	Breadmonster: haskell is especially good for compilers
2013-04-05 15:32:46	ramses_	Breadmonster: GHC is implemented in haskell
2013-04-05 15:33:00	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-04-05 15:33:17	Breadmonster	ramses_: Sure, that's because Haskell is Turing complete.
2013-04-05 15:33:28	Zenol	Out of memory, again...
2013-04-05 15:33:33	Breadmonster	chrisdone: Is it? I can't even figure out how to set up a binary tree, let alone parse.
2013-04-05 15:33:38	hpaste	“keretamini.com pabrik kereta mini no 1. ready stock” pasted “keretamini.com pabrik kereta mini no 1. ready stock” at http://hpaste.org/85245
2013-04-05 15:33:45	hseg	Breadmonster: I'm currently writing a compiler for a Java lookalike in Haskell. It's loads of fun.
2013-04-05 15:33:46	bscarlet	Could anyone out there with Cabal experience tell me if there's a "right" way to convey information from the configuration step to later steps?
2013-04-05 15:34:00	ramses_	Breadmonster: ? of course haskell is turing complete, but they wouldn't implement ghc in haskell if it wasn't suitable for it
2013-04-05 15:34:08	eikke	Breadmonster: actually I'm looking into creating a project to implement an ML-style compiler using Haskell, taking several research topics into account, and using some of the latest GHC features alongside
2013-04-05 15:34:19	-->	lennart_ (~lennart@kiel-5f77be4e.pool.mediaWays.net) has joined #haskell
2013-04-05 15:34:34	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-04-05 15:34:41	hpaste	“Acer Iconia PC tablet dengan Windows 8” pasted “Acer Iconia PC tablet dengan Windows 8” at http://hpaste.org/85246
2013-04-05 15:34:43	ramses_	Zenol: stack or heap?
2013-04-05 15:35:04	chrisdone	Breadmonster: hmm perhaps that's your problem, not haskell's?
2013-04-05 15:35:07	eikke	looks like hpaste suffers from some pastebin-spam-bot?
2013-04-05 15:35:10	hpaste	“Mau Bikin Website + Hosting Murah AbizZ? Ke Rajawebhost.com aja!” pasted “Mau Bikin Website + Hosting Murah AbizZ? Ke Rajawebhost.com aja!” at http://hpaste.org/85247
2013-04-05 15:35:16	chrisdone	eikke: yeah, it is. hang on
2013-04-05 15:35:27	<--	hpaste (~hpaste@unaffiliated/chrisdone) has left #haskell ("Leaving")
2013-04-05 15:35:38	chrisdone	i'll ban the ip
2013-04-05 15:35:57	-->	ulfdoz (~mary@p5B389CBC.dip.t-dialin.net) has joined #haskell
2013-04-05 15:36:06	Zenol	ramses_ > stack.
2013-04-05 15:36:09	dmwit	bscarlet: What later steps?
2013-04-05 15:36:21	hiptobecubic	I don't even understand what these pastes are about
2013-04-05 15:36:27	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 15:36:30	hiptobecubic	bikini's *and* webhosting?
2013-04-05 15:36:32	-->	qzr (~qzr@adsl-89-217-83-144.adslplus.ch) has joined #haskell
2013-04-05 15:36:32	Breadmonster	Okay, can someone guide me through it?
2013-04-05 15:36:37	aCube	> Node 1 [Node 2 [], Node 3 []]
2013-04-05 15:36:39	lambdabot	  Node {rootLabel = 1, subForest = [Node {rootLabel = 2, subForest = []},Node...
2013-04-05 15:36:40	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-04-05 15:36:41	<--	end3rW (~end3rW@lak-115-186.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-04-05 15:36:44	dmwit	bscarlet: Also, what does "right" way mean? It should just be automatic -- there's no choices, really.
2013-04-05 15:36:49	bscarlet	dmwit: build
2013-04-05 15:37:00	Breadmonster	eikke: How do you do parsing? I can't think of something that does parsing without side effects.
2013-04-05 15:37:05	-->	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-04-05 15:37:21	dmwit	bscarlet: Can you make the question a bit more concrete? What problem are you having? What command do you run, what do you expect to happen, what happens instead? etc.
2013-04-05 15:37:38	eikke	Breadmonster: do some reading about parsec or uu-parsinglib
2013-04-05 15:37:38	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Quit: anderse)
2013-04-05 15:37:41	bscarlet	dmwit: I have information that doesn't seem to fit into the types I've got.
2013-04-05 15:37:46	eikke	or alex/happy
2013-04-05 15:38:01	hseg	Breadmonster: By encapsulating the side effects in a monad/applicative instance. Have a look at Parsec.
2013-04-05 15:38:08	dmwit	bscarlet: I see, you are creating a cabal package?
2013-04-05 15:38:33	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-04-05 15:38:34	<--	afleckenstein (~andrew@158.59.241.158) has quit (Quit: Lost terminal)
2013-04-05 15:38:38	chrisdone	ok, bot banned
2013-04-05 15:39:04	bscarlet	dmwit: I'm working on LLVM bindings (more fleshed out than "llvm" on hackage). I want to run "llvm-config", a binary which can emit the various paths needed to build against llvm, and save them for use during building.
2013-04-05 15:39:13	-->	nickray (~nickray@unaffiliated/nickray) has joined #haskell
2013-04-05 15:39:15	bscarlet	dmwit: the problem is a path which doesn't belong in a flag.
2013-04-05 15:39:22	Breadmonster	eikke: Isn't parsec like yacc?
2013-04-05 15:39:26	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-05 15:39:30	chrisdone	Breadmonster: haskell's more 'controlled side effects' than 'no side-effects'
2013-04-05 15:39:32	--	amatsu is now known as amatsu\idle
2013-04-05 15:39:49	<--	monsieurlu (~monsieurl@163.5.191.53) has quit (Ping timeout: 248 seconds)
2013-04-05 15:39:50	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 15:39:54	<--	andrey013 (~chatzilla@95.73.138.212) has quit (Read error: Operation timed out)
2013-04-05 15:39:58	Zenol	ramses_ > The whole code is here, if you wan't to have a look. It's pretty short and most of the code is just a uninteresting probabilistic calc. http://hpaste.org/85250
2013-04-05 15:40:07	hseg	No. Happy ~ yacc. Parsec is a parser combinator library - it allows you to combine smaller parsers into larger ones.
2013-04-05 15:40:13	eikke	bscarlet: you could check how bos/llvm does it
2013-04-05 15:40:19	-->	takemitsu (~kazuki@77-23-88-24-dynip.superkabel.de) has joined #haskell
2013-04-05 15:40:33	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-04-05 15:40:34	Breadmonster	Okay.
2013-04-05 15:40:36	-->	agumonkey (~agu@8.158.70.86.rev.sfr.net) has joined #haskell
2013-04-05 15:41:32	eikke	bscarlet: care to share what you intend to change compared to bos/llvm (next to 'make sure it works with latest LLVMs')?
2013-04-05 15:41:46	bscarlet	eikke: it uses autoconf, which I'm currently trying to avoid.
2013-04-05 15:41:52	-->	andrey013 (~chatzilla@95.73.138.212) has joined #haskell
2013-04-05 15:42:09	-->	end3rW (~end3rW@lak-115-186.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-04-05 15:42:30	bscarlet	eikke: Just to make sure of myself, by bos/llvm, you mean Brian O'Sullivan's package "llvm" on hackage, right?
2013-04-05 15:42:31	-->	timebomb (~tb@x0006r1116626.louisiana.edu) has joined #haskell
2013-04-05 15:42:32	-->	grandtheftR (~Adium@c-98-207-106-13.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 15:42:38	eikke	yes
2013-04-05 15:42:57	eikke	(or github.com/bos/llvm, hence)
2013-04-05 15:43:11	--	Watcher7 is now known as Watcher7|off
2013-04-05 15:43:16	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-05 15:43:26	<--	borderer (~bob@langhaugh.demon.co.uk) has quit (Quit: leaving)
2013-04-05 15:43:38	-->	`ramses (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-04-05 15:44:00	<--	ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-04-05 15:44:33	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 276 seconds)
2013-04-05 15:44:41	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-04-05 15:45:27	Zenol	How could the stack grow so much? Is it the use of list?
2013-04-05 15:46:02	<--	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-04-05 15:46:28	-->	wttr (~jameswett@180.92.118.130) has joined #haskell
2013-04-05 15:46:34	dmwit	bscarlet: Probably the simplest thing is to write a custom Setup.hs that generates a file with whatever extra data you need, and reference this file as necessary during the build.
2013-04-05 15:47:12	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-04-05 15:47:29	<--	etehtsea (~textual@93.185.184.116) has quit (Ping timeout: 256 seconds)
2013-04-05 15:47:38	dmwit	Zenol: I don't know the context, but typically a large stack is the result of too much laziness.
2013-04-05 15:47:58	bscarlet	eikke: That package has some interesting weaknesses: Firstly, because it attempts to use Haskell's typechecking to validate pointer math, it's actually impossible to emit some programs. Secondly it's a fairly thin lair on top of LLVM's interface, so it passes a whole lot of awkwardness of LLVMs c/c++ api structure through. Thirdly it (and LLVM's current C bindings) don't address consuming LLVM, only producing it. I've built
2013-04-05 15:47:59	bscarlet	pure haskell ADT to represent an LLVM module, and written all the goop to convert it to and from LLVM c++ objects.
2013-04-05 15:48:34	chrisdone	Zenol: 'stack' grows from function application. a lazy value is more or less a box that contains more function application, and more laziness. if your code is producing a bunch of laziness, stack overflow's likely. even x+y is a lazy value. (x+y)+z is one more layer of laziness. ghc does strictness analysis, but only in specific cases
2013-04-05 15:49:00	eikke	bscarlet: interesting
2013-04-05 15:49:28	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-05 15:49:30	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-04-05 15:49:42	<--	lachenmayer (~lachenmay@p5492E994.dip.t-dialin.net) has quit (Quit: lachenmayer)
2013-04-05 15:49:44	<--	andrey013 (~chatzilla@95.73.138.212) has quit (Read error: Operation timed out)
2013-04-05 15:50:00	<--	fro0t (~fro0t@1.23.67.157) has quit (Ping timeout: 256 seconds)
2013-04-05 15:50:03	-->	guampa (~guampa@unaffiliated/guampa) has joined #haskell
2013-04-05 15:50:09	chrisdone	Zenol: from a quick look, sum could be the problem, that's not strict in the addition
2013-04-05 15:50:17	chrisdone	(iirc)
2013-04-05 15:50:19	dmwit	Zenol: Personally, I suspect this use of until.
2013-04-05 15:50:27	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-04-05 15:50:35	dmwit	You're building an k-deep thunk which only gets forced at the very end.
2013-04-05 15:50:43	-->	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 15:50:46	-->	fro0t (~fro0t@1.23.67.157) has joined #haskell
2013-04-05 15:50:46	Zenol	dwit > I was using a simple recusion before, and that's why I tryed with until.
2013-04-05 15:50:49	<--	gilbertw1 (~gilbertw1@108-239-26-86.lightspeed.chtnsc.sbcglobal.net) has quit (Quit: Leaving...)
2013-04-05 15:50:53	chrisdone	where's until from?
2013-04-05 15:50:56	chrisdone	@src until
2013-04-05 15:50:57	lambdabot	until p f x | p x       = x
2013-04-05 15:50:57	lambdabot	            | otherwise = until p f (f x)
2013-04-05 15:51:25	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-05 15:51:26	chrisdone	well i be damned. how long's that been there?
2013-04-05 15:51:37	dmwit	Zenol: Shipping your recursion out to somebody else doesn't suddenly make your recursion strict...
2013-04-05 15:51:49	bscarlet	dmwit: Could I interpret that very loosely to mean that if information doesn't have an obvious place to live inside the Cabal datatypes, I should roll my own serialization/deserialization to carry it from one step to another? I was optimistically hoping there was some generic mechanism that did it for me. (Perhaps that'd require undesirable extensions (RankNTypes or such)).
2013-04-05 15:51:53	<--	marekw2143 (~mwawrzycz@78.133.254.90) has quit (Quit: Leaving)
2013-04-05 15:51:54	-->	zmoazeni (~zmoazeni@50-57-89-129.static.cloud-ips.com) has joined #haskell
2013-04-05 15:52:19	dmwit	bscarlet: It depends very much on what the information is. Generating header files (for example) and #include'ing them is very common.
2013-04-05 15:52:39	-->	chatsiri_ (~chatsiri_@kuwin-131-6.kuwin.ku.ac.th) has joined #haskell
2013-04-05 15:52:45	-->	chatsiri1 (~chatsiri_@kuwin-131-6.kuwin.ku.ac.th) has joined #haskell
2013-04-05 15:52:51	zmoazeni	Hi folks, I'm trying to install the "hoogle" cabal, but I'm running into a dependency issue. I'm trying to grok what the real issue is without much success https://gist.github.com/zmoazeni/bd9dec6fd5dc74f36940
2013-04-05 15:52:55	dmwit	Others may have better advice, too. I'm not an expert. But I'm here. =P
2013-04-05 15:53:01	bscarlet	eikke: My aim is to make using LLVM for a compiler backend or for JIT as simple as one might naively wish it to be.
2013-04-05 15:53:04	<--	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-04-05 15:53:19	Zenol	The sum is over 4 values (made with zipWith) :/
2013-04-05 15:53:31	chrisdone	Zenol: ah, ok
2013-04-05 15:53:38	zmoazeni	resourcet needs mtl (≥2.0 & <2.2) and parsec doesn't seem to have a restriction on mtl. I'm not sure why I'm getting this error
2013-04-05 15:53:39	Zenol	http://hpaste.org/85251 Here is what I was doing at the begining.
2013-04-05 15:53:43	eikke	bscarlet: then I'd be very interested since I intend to use LLVM as a target for my ML thing :) (and having issues with bos/llvm not building without patches lately, or working at all)
2013-04-05 15:54:04	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-04-05 15:54:32	chrisdone	Zenol: well until is strict in its application. so it may be these: (m + 1, 0 : 0 : compute_next_step k (m+1) l)
2013-04-05 15:54:33	hseg	Is there a way to make GHC disambiguate between identifiers based on type? i.e. foo :: Int is distinct from foo :: Char, and both can exist in the same scope
2013-04-05 15:54:37	<--	ryant50001 (~ryan@cpe-67-247-9-63.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-04-05 15:54:56	dmwit	zmoazeni: Your installed version of parsec depends on your installed version of mtl.
2013-04-05 15:55:07	dmwit	hseg: Yes, that is what typeclasses are.
2013-04-05 15:55:27	-->	Maarten_ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has joined #haskell
2013-04-05 15:55:28	bscarlet	dmwit: Being here is a fantastic qualification as far as I'm concerned at the moment. My particular information is a path for use as an (DY)LD_LIBRARY_PATH, which needs to be available not only when producing final executables, but when running hsc2hs intermediate executables also.
2013-04-05 15:55:31	-->	natechan (~natechan@50-192-61-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 15:55:36	chrisdone	Zenol: if you have 10000 interations, then your m + 1 will be a thunk like
2013-04-05 15:55:36	chrisdone	> "(m + " ++ cycle "1) "
2013-04-05 15:55:39	lambdabot	  "(m + 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) 1) ...
2013-04-05 15:55:42	-->	andrey013 (~chatzilla@95.73.138.212) has joined #haskell
2013-04-05 15:55:56	dmwit	chrisdone: My bet is the problem is in the other half of the tuple.
2013-04-05 15:55:58	hseg	I don't see how I can solve the problem using typeclasses.
2013-04-05 15:56:00	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 264 seconds)
2013-04-05 15:56:07	--	amatsu\idle is now known as amatsu
2013-04-05 15:56:09	zmoazeni	dmwit: Sorry, trying to understand. I have both "Installed versions: 3.1.2, 3.1.3" and according to http://hackage.haskell.org/package/parsec-3.1.3 it doesn't have any version requirements on mtl
2013-04-05 15:56:09	dmwit	chrisdone: The first half is getting forced by the predicate in until; the second half isn't.
2013-04-05 15:56:14	quicksilver	chrisdone: (where your first '(' is an infinite number of very thin (s pressed together ;)
2013-04-05 15:56:23	Zenol	 I want to apply 1 000 000 times the function compte_next_step on a list (each time with the right m values from 1 to 1 000 000. I don't know how to do it well.
2013-04-05 15:56:24	chrisdone	dmwit: on the recursion part, yeah
2013-04-05 15:56:27	chrisdone	quicksilver: yeah =p
2013-04-05 15:56:32	hseg	Basically, I have two data constructors named identically, for two different types.
2013-04-05 15:56:38	chrisdone	dmwit: good call =)
2013-04-05 15:56:45	quicksilver	chrisdone: it's really hard to put those in place without tearing, I find.
2013-04-05 15:56:48	-->	t7 (~tommo@mailgate.ips-international.com) has joined #haskell
2013-04-05 15:56:52	dmwit	zmoazeni: Haskell is statically linked. Your installation of parsec is therefore dependent on exactly one version of mtl, regardless of what Hackage says about what versions you can choose to link it to when you build it.
2013-04-05 15:57:25	Zenol	In imperativ language it should be a simple for to compute the next array from the previous one, but here I'm stick with recursion that seems to not being optimised as a tail rec...
2013-04-05 15:57:41	dmwit	hseg: Data constructors can be part of a type class by turning on associated types.
2013-04-05 15:57:42	zmoazeni	dmwit: Oh I see. So even though parsec.cabal doesn't require a specific version of mtl, it gets locked down when I install (and it becomes linked)
2013-04-05 15:57:53	dmwit	zmoazeni: correct
2013-04-05 15:57:55	chrisdone	quicksilver: quality infinite parentheses are harder to find these days
2013-04-05 15:58:01	dcoutts	zmoazeni: no, that's not how it works
2013-04-05 15:58:13	bscarlet	eikke: Well, I've got enough working that you'd probably be able to use what I've got, but I've still got to get it rolled up into a Cabal package that works for someone other than me. In the (unfortunately indefinite) meantime, there are some forks of bos/llvm on github that might help you.
2013-04-05 15:58:28	dcoutts	zmoazeni: well, yes installed ones need specific things, but cabal can look at source versions and rebuild if necessary
2013-04-05 15:58:48	dmwit	Oh yeah, we didn't get to the "how to fix it" part yet. =P
2013-04-05 15:58:48	zmoazeni	dcoutts: Any reason why cabal isn't rebuilding in this case? I would assume it should be able to
2013-04-05 15:59:06	eikke	bscarlet: I know about those, but it's a pita to work that way :) I hope bos finds some maintenance time soon'ish to get things in shape again
2013-04-05 15:59:16	dcoutts	zmoazeni: can you run with --max-backjumps=-1 and see if the log looks any different?
2013-04-05 15:59:23	zmoazeni	dcoutts: sure. trying now.
2013-04-05 15:59:33	dmwit	bscarlet: Hm, tricky.
2013-04-05 15:59:49	quicksilver	dmwit: (I hesitate to insert asides into this, but static linking is neither here nor there. Even if the libraries were dynamically linked, the knowledge of each other's ABI would be compiled in; haskell libraries don't have stable ABIs in that sense)
2013-04-05 16:00:17	bscarlet	dmwit: What's tricky? Passing my information, or the generic mechanism I wish I had?
2013-04-05 16:00:28	dmwit	quicksilver: Aha. I was nervous about the "statically linked" part of my explanation. I'm interested to learn that the same situation would happen with dynamically linked world.
2013-04-05 16:00:29	<--	izym (~izym@82.211.222.212) has quit (Ping timeout: 255 seconds)
2013-04-05 16:00:31	hseg	I don't get it. I have data A = A | S; data B = B | S. How do I make GHC disambiguate between S :: A and S :: B ?
2013-04-05 16:00:40	dmwit	bscarlet: Needing to pass things to hsc2hs is tricky.
2013-04-05 16:00:42	dmwit	I think.
2013-04-05 16:00:57	dmwit	Because cabal does magic with a few particular preprocessors.
2013-04-05 16:01:00	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-04-05 16:01:05	Taneb	hseg, you don't
2013-04-05 16:01:13	quicksilver	dmwit: for example, a constant might be fully inlined. Even in a dynamically linked library. That's just the most trivial example, but the point is that GHC compilation couples tightly.
2013-04-05 16:01:14	zmoazeni	dcoutts: Looks like this will work https://gist.github.com/zmoazeni/edfbf9e7c465c1732434 not sure why leveldb would be broken, but I can dig into that - is this because a "dependency of my dependency" needs updating and by default it doesn't dig that far?
2013-04-05 16:01:14	Taneb	Put them in different modules and qualify
2013-04-05 16:01:53	hseg	I tried. GHC choked on the following line: import qualified Syntax.VM  (VMInst(Label)) as VM
2013-04-05 16:02:07	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-05 16:02:14	hseg	Something about 'as' being unexpected
2013-04-05 16:02:20	dcoutts	zmoazeni: it does look like that'll work.
2013-04-05 16:02:32	<--	kevinqcs (~turing@183.208.24.25) has quit (Ping timeout: 245 seconds)
2013-04-05 16:02:35	dmwit	hseg: Right, I think qualified imports can't specify an import list.
2013-04-05 16:02:39	-->	narens (~user@2001:468:c80:4391:225:d3ff:fec9:1a71) has joined #haskell
2013-04-05 16:03:01	dcoutts	zmoazeni: so here the solution was above the default search size, so it reported the initial error
2013-04-05 16:03:12	narens	question: what library do I use if I want a mutable bytestring?
2013-04-05 16:03:30	dcoutts	narens: array or vector
2013-04-05 16:03:38	dcoutts	both have mutable versions
2013-04-05 16:03:44	<--	t7 (~tommo@mailgate.ips-international.com) has quit (Quit: Leaving)
2013-04-05 16:03:48	bscarlet	dmwit: Ah. Yes. Cabal does a bit more magic that I, personally, like. I have successfully gotten information to hs2hsc by setting an environment variable to a hardcoded variable at the beginning of the build hook. It's getting the information from the configure step to there that's giving me trouble.
2013-04-05 16:03:51	hseg	OK. Now I have more fun problems
2013-04-05 16:03:59	narens	dcoutts: but I want to have a bytestring after mutating
2013-04-05 16:04:06	bscarlet	dmwit: s/hardcoded variable/hardcoded value/
2013-04-05 16:04:12	narens	dcoutts: is there a way to freeze vector into a bytestring?
2013-04-05 16:04:26	supki	hseg: import qualified M as N (...)  not  import qualified M (...) as N
2013-04-05 16:04:26	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-04-05 16:04:32	zmoazeni	dcoutts, dmwit thanks a bunch. that would have taken me forever
2013-04-05 16:04:44	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-04-05 16:04:47	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-04-05 16:04:55	dcoutts	narens: then you have to convert or copy. You might be able to do it without copying if you use a foreign array
2013-04-05 16:05:06	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-04-05 16:05:11	dcoutts	narens: or if you do something much more ugly and low level
2013-04-05 16:05:11	dmwit	bscarlet: I'm not sure, but I think extra-lib-dirs and include-dirs get passed on to preprocessors.
2013-04-05 16:05:17	Taneb	@djinn ((a -> r) -> r) -> (a -> (b -> r) -> r) -> (b -> r) -> r
2013-04-05 16:05:17	lambdabot	f a b c = a (\ d -> b d c)
2013-04-05 16:05:18	dmwit	bscarlet: (The documentation at least seems to suggest this.)
2013-04-05 16:05:27	dmwit	bscarlet: So perhaps you can use the API to set those during configure...?
2013-04-05 16:05:36	-->	etehtsea (~textual@93.185.184.116) has joined #haskell
2013-04-05 16:05:38	narens	dcoutts: that's crazy... why!!! The reason i need bystring is because all the hashing libraries i can find work on bytestring
2013-04-05 16:05:38	dmwit	oops, fire drill, gotta run
2013-04-05 16:05:41	dmwit	ask dcoutts, he's the expert
2013-04-05 16:05:55	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-05 16:06:26	bscarlet	dmwit: Those don't get used in quite the right place.
2013-04-05 16:06:38	dcoutts	narens: are you just trying to build one efficiently?
2013-04-05 16:06:54	-->	paintcan (~user@66.199.39.230) has joined #haskell
2013-04-05 16:06:56	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-05 16:07:08	narens	dcoutts: I want to do a simply swap of two word positions in a bytestring... like i can do in a mutable vector
2013-04-05 16:07:16	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-04-05 16:07:17	<--	predator117 (~predator1@p50806E09.dip.t-dialin.net) has quit (Ping timeout: 256 seconds)
2013-04-05 16:07:23	dcoutts	narens: starting with a bytestring?
2013-04-05 16:07:31	narens	dcoutts: yes
2013-04-05 16:07:34	<--	chrisdone (~cin@unaffiliated/chrisdone) has quit (Ping timeout: 256 seconds)
2013-04-05 16:07:42	dcoutts	narens: then you have to do it by copying anyway
2013-04-05 16:07:50	-->	metaweta (43a1d74a@gateway/web/freenode/ip.67.161.215.74) has joined #haskell
2013-04-05 16:07:50	dcoutts	mutablity will not help you
2013-04-05 16:07:51	bscarlet	dmwit: extra-lib-dirs can get hsc2hs to find the libraries during linking, the problem is when the hsc2hs binary runs to produce the haskell code.
2013-04-05 16:07:54	eikke	narens: you might be able to use unsafePackAddressLen to create a bytestring from an addr/pointer, and get a pointer from your unboxed vector somehow
2013-04-05 16:07:59	--	k00mi_ is now known as k00mi
2013-04-05 16:08:01	<--	qzr (~qzr@adsl-89-217-83-144.adslplus.ch) has quit (Remote host closed the connection)
2013-04-05 16:08:19	Zenol	How to write {type data; for (i = 0 ; i < n; i++) {data = somework(i, data);}} in haskell? Isn't it {apply_somework 0 = data; apply_somework n = somework n (apply_somework (n-1))} ?
2013-04-05 16:08:23	narens	that's messed up... why this lack of orthogonality?
2013-04-05 16:08:38	dcoutts	narens: because if your output has to be a bytestring (immutable) and your input is a bytestring (immutable) then you can only do that by copying
2013-04-05 16:08:54	dcoutts	even if we provided a separate mutable bytestring type
2013-04-05 16:08:55	metaweta	Hi.  I'm very new to Haskell and Scala and have been tasked with getting Oleg's generic zippers working under Scala
2013-04-05 16:09:01	eikke	narens: using Vector.Storable & unsafeToForeignPtr0
2013-04-05 16:09:05	dcoutts	you'd still have to pay one copy
2013-04-05 16:09:06	metaweta	In this line: f a = shift (\k -> return $ Z a (k . maybe a id))
2013-04-05 16:09:25	dcoutts	narens: I suggest you build the result bytestring using the new builder, that will be efficient
2013-04-05 16:09:42	narens	dcoutts: the only other way is to use usafeconvert of bytestring to cstring and modify that ... but i'd lose ref transparency
2013-04-05 16:10:00	dcoutts	narens: that would break the immutability of the type, so don't do that
2013-04-05 16:10:03	metaweta	it uses "maybe"; that's not the type constructor.  What is it?
2013-04-05 16:10:14	<--	klrr (~klrr@88.129.146.181) has quit (Remote host closed the connection)
2013-04-05 16:10:22	geekosaur	it "un-Maybe"s
2013-04-05 16:10:23	-->	sellout- (~Adium@70.96.9.235) has joined #haskell
2013-04-05 16:10:39	geekosaur	you provide a thing to do to a Just and a default if it's Nothing
2013-04-05 16:10:41	geekosaur	:t maybe
2013-04-05 16:10:43	lambdabot	b -> (a -> b) -> Maybe a -> b
2013-04-05 16:10:47	dcoutts	narens: take a look at the bytestring builder monoid, that lets you make new bytestrings efficiently
2013-04-05 16:10:49	bscarlet	dmwit: Anyway, I think you've convinced me to try just running the llvm-config binary again at the beginning of the build. It's barely more than a file with the necessary information in it anyway.
2013-04-05 16:11:09	metaweta	Ah, it's scala's getOrElse.  Thanks!
2013-04-05 16:11:11	narens	dcoutts: well, i personally like the vector package for this kind of manipulation but I just don't want to convert vector to bytestring just to hash it...unless that conversion is done lazily then it might be okay
2013-04-05 16:11:34	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-04-05 16:11:36	<--	metaweta (43a1d74a@gateway/web/freenode/ip.67.161.215.74) has left #haskell
2013-04-05 16:12:06	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-04-05 16:12:06	<--	akamaus (~akamaus@95.106.8.194) has quit (Ping timeout: 256 seconds)
2013-04-05 16:12:13	<--	andrey013 (~chatzilla@95.73.138.212) has quit (Read error: Operation timed out)
2013-04-05 16:12:20	eikke	narens: there was someone working on a bytestring version based on unboxed word8 vectors
2013-04-05 16:12:24	eikke	@hackage vector-bytestring
2013-04-05 16:12:24	lambdabot	http://hackage.haskell.org/package/vector-bytestring
2013-04-05 16:12:52	-->	andrey013 (~chatzilla@95.73.138.212) has joined #haskell
2013-04-05 16:13:24	<--	cdh473 (~cdh473@50.96.92.32) has quit (Read error: Connection reset by peer)
2013-04-05 16:13:24	<--	etehtsea (~textual@93.185.184.116) has quit (Ping timeout: 264 seconds)
2013-04-05 16:13:24	narens	thanks, I think converting vector to bytestring should be just fine since that process doesn't need to allocate any space for my case since it will be consumed lazily anyhow.
2013-04-05 16:13:44	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-05 16:13:47	-->	cdh473 (~cdh473@50.96.92.32) has joined #haskell
2013-04-05 16:14:44	-->	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has joined #haskell
2013-04-05 16:15:02	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-04-05 16:15:04	<--	narens (~user@2001:468:c80:4391:225:d3ff:fec9:1a71) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-05 16:15:52	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Quit: Konversation terminated!)
2013-04-05 16:15:57	Zenol	Again, Maybe it's because I'm using list, and as they are lazy, to build the last one, at has to go through the 1 000 000 list I was talking about, and that's too much thunks...
2013-04-05 16:16:27	-->	aib (~marvin@unaffiliated/aib42) has joined #haskell
2013-04-05 16:16:31	-->	tazjin_ (~tazjin@80.239.169.202) has joined #haskell
2013-04-05 16:17:23	<--	tazjin (2971tazjin@server1.bouncer4you.de) has quit (Quit: -)(- If you can't see the fnords, they can't eat you.)
2013-04-05 16:17:35	--	tazjin_ is now known as tazjin
2013-04-05 16:17:38	Breadmonster	What's the difference between let and where?
2013-04-05 16:17:52	-->	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-04-05 16:18:15	-->	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has joined #haskell
2013-04-05 16:18:32	bscarlet	Breadmonster: http://www.haskell.org/haskellwiki/Let_vs._Where
2013-04-05 16:19:05	-->	jao (~jao@92.57.234.47) has joined #haskell
2013-04-05 16:19:22	<--	jao (~jao@92.57.234.47) has quit (Changing host)
2013-04-05 16:19:22	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2013-04-05 16:20:02	<--	fro0t (~fro0t@1.23.67.157) has quit (Ping timeout: 256 seconds)
2013-04-05 16:20:31	-->	luisgabriel (~luisgabri@187.59.246.215) has joined #haskell
2013-04-05 16:21:42	-->	inad922 (~inad925@93.93.84.85) has joined #haskell
2013-04-05 16:21:58	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-04-05 16:22:51	-->	carlocci (~carlocci@unaffiliated/carlocci) has joined #haskell
2013-04-05 16:23:02	-->	shallowthought (~gsofficia@c-67-180-87-9.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 16:23:52	-->	predator117 (~predator1@p50806E09.dip.t-dialin.net) has joined #haskell
2013-04-05 16:24:34	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-04-05 16:24:53	dmwit	Zenol: Yes, I believe that description is accurate.
2013-04-05 16:25:50	dmwit	Zenol: You might like to write deepSeqIterate or something like that. e.g.
2013-04-05 16:26:05	<--	zmoazeni (~zmoazeni@50-57-89-129.static.cloud-ips.com) has left #haskell
2013-04-05 16:26:27	-->	Kaidelong (~Kaidelong@184-77-231-133.war.clearwire-wmx.net) has joined #haskell
2013-04-05 16:26:34	aCube	also, C     time      82.8% :O
2013-04-05 16:26:38	aCube	also, GC     time      82.8% :O
2013-04-05 16:26:44	dmwit	:t let strictify xs@(x:_) = x `deepSeq` xs in \f x -> strictify (iterate f x)
2013-04-05 16:26:46	lambdabot	    Not in scope: `deepSeq'
2013-04-05 16:26:46	lambdabot	    Perhaps you meant `rdeepseq' (imported from Control.Parallel.Strategies)
2013-04-05 16:26:55	dmwit	:t rdeepseq
2013-04-05 16:26:56	lambdabot	NFData a => Strategy a
2013-04-05 16:26:59	dmwit	:t deepseq
2013-04-05 16:27:00	lambdabot	    Not in scope: `deepseq'
2013-04-05 16:27:00	lambdabot	    Perhaps you meant `rdeepseq' (imported from Control.Parallel.Strategies)
2013-04-05 16:27:01	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-04-05 16:27:03	dmwit	?hoogle deepseq
2013-04-05 16:27:04	lambdabot	Control.DeepSeq module Control.DeepSeq
2013-04-05 16:27:04	lambdabot	Control.DeepSeq deepseq :: NFData a => a -> b -> b
2013-04-05 16:27:04	lambdabot	package deepseq
2013-04-05 16:27:09	<--	end3rW (~end3rW@lak-115-186.wohnheime.ruhr-uni-bochum.de) has quit (Quit: end3rW)
2013-04-05 16:27:12	-->	jianmeng (~mengjian@123.138.36.108) has joined #haskell
2013-04-05 16:27:18	<--	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has quit (Remote host closed the connection)
2013-04-05 16:27:20	Zenol	NFData?
2013-04-05 16:27:22	dmwit	:t let strictify xs@(x:_) = x `Control.DeepSeq.deepseq` xs in \f x -> strictify (iterate f x)
2013-04-05 16:27:23	lambdabot	NFData a => (a -> a) -> a -> [a]
2013-04-05 16:27:35	Zenol	Maybe just using some non-lazy list?
2013-04-05 16:27:38	dmwit	NFData is data that can be evaluated to normal-form.
2013-04-05 16:28:00	dmwit	No, the laziness of the values contained in the iteration is not the really important thing here.
2013-04-05 16:28:07	-->	Pranz (~Pranz@h181n2-b2-a31.ias.bredband.telia.com) has joined #haskell
2013-04-05 16:28:07	dmwit	The laziness of the iteration itself is the problem.
2013-04-05 16:28:20	-->	edon (~user@albalug/edon) has joined #haskell
2013-04-05 16:28:26	dmwit	I guess that's not 100% accurate.
2013-04-05 16:28:34	dmwit	The laziness of the values contained in the iteration matters, too.
2013-04-05 16:28:53	 *	hackagebot cmdargs 0.10.3 - Command line argument processing  http://hackage.haskell.org/package/cmdargs-0.10.3 (NeilMitchell)
2013-04-05 16:28:56	dmwit	Oh, that's a crappy strictify, too.
2013-04-05 16:29:05	Zenol	It's the laziness of the values and the iteration together?
2013-04-05 16:29:12	<--	takemitsu (~kazuki@77-23-88-24-dynip.superkabel.de) has quit (Quit: Lost terminal)
2013-04-05 16:29:19	dmwit	:t let strictify (x:xs) = x `seq` (x:strictify xs) in \f x -> strictify (iterate f x)
2013-04-05 16:29:21	lambdabot	(a -> a) -> a -> [a]
2013-04-05 16:29:21	<--	Eotane (~Eotane@210-84-4-251.dyn.iinet.net.au) has quit (Quit: Konversation terminated!)
2013-04-05 16:29:33	dmwit	Zenol: yeah
2013-04-05 16:29:39	dmwit	:t let strictify (x:xs) = x `deepseq` (x:strictify xs) in \f x -> strictify (iterate f x)
2013-04-05 16:29:41	lambdabot	    Not in scope: `deepseq'
2013-04-05 16:29:41	lambdabot	    Perhaps you meant `rdeepseq' (imported from Control.Parallel.Strategies)
2013-04-05 16:29:45	 *	dmwit sighs
2013-04-05 16:29:47	dmwit	You get the idea.
2013-04-05 16:29:52	-->	ARCADIVS (~RMM@71-8-56-164.dhcp.leds.al.charter.com) has joined #haskell
2013-04-05 16:30:17	<--	sopvop (~lonokhov@213.170.88.44) has quit (Quit: Leaving.)
2013-04-05 16:30:30	<--	snoyberg (~ubuntu@89-139-153-6.bb.netvision.net.il) has left #haskell
2013-04-05 16:30:52	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-04-05 16:31:10	Zenol	And, it's easy to remov the "laziness" using something that will make sure something was evaluated bofore semething else?
2013-04-05 16:31:34	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-04-05 16:31:47	dmwit	Sure.
2013-04-05 16:32:16	Zenol	Actualy, I'm a beginner at haskell, I don't know what you can/can't do x)
2013-04-05 16:32:30	dmwit	=)
2013-04-05 16:32:46	shallowthought	to paraphrase zombocom... you can do anything with haskell
2013-04-05 16:32:53	dmwit	Anyway, yes, I suggest you use a strict iteration like the one above, and skip "until" entirely.
2013-04-05 16:33:23	-->	gilbertw1 (~gilbertw1@64.20.30.66) has joined #haskell
2013-04-05 16:33:33	-->	Ontolog (~ontolog@71-95-193-50.dhcp.mtpk.ca.charter.com) has joined #haskell
2013-04-05 16:33:35	-->	Zeev_ (~Zeev@bzq-79-180-24-93.red.bezeqint.net) has joined #haskell
2013-04-05 16:33:45	<--	nickray (~nickray@unaffiliated/nickray) has left #haskell
2013-04-05 16:34:22	-->	mugenken (~mugenken@p5B3ED518.dip.t-dialin.net) has joined #haskell
2013-04-05 16:34:27	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-04-05 16:34:51	-->	dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-04-05 16:35:05	<--	eff (~quassel@114.246.103.171) has quit (Ping timeout: 256 seconds)
2013-04-05 16:35:13	Zenol	not sure to understand how to use it ...
2013-04-05 16:35:37	-->	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has joined #haskell
2013-04-05 16:35:38	dmwit	> iterate (*2) 1 !! 30
2013-04-05 16:35:40	lambdabot	  1073741824
2013-04-05 16:36:00	<--	Zeev (~Zeev@bzq-79-180-31-5.red.bezeqint.net) has quit (Ping timeout: 260 seconds)
2013-04-05 16:36:34	dmwit	That iterates the step function (*2) 30 times starting at 1.
2013-04-05 16:36:46	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 16:37:06	hseg	I'm getting a Non type-variable argument in the constraint error in the following code:
2013-04-05 16:37:09	hpaste	hseg pasted “Type signature woes” at http://hpaste.org/85255
2013-04-05 16:37:27	-->	cognominal (~cognomina@37.160.43.166) has joined #haskell
2013-04-05 16:37:31	dmwit	> let strictify (x:xs) = x `Control.DeepSeq.deepseq` (x:strictify xs) in strictify (iterate (*2) 1) !! 30 -- same, but each iteration is strict
2013-04-05 16:37:33	lambdabot	  Not in scope: `Control.DeepSeq.deepseq'
2013-04-05 16:37:38	dmwit	yes =)
2013-04-05 16:37:55	<--	tazjin (~tazjin@80.239.169.202) has quit (Ping timeout: 256 seconds)
2013-04-05 16:38:08	-->	nuttycom1 (~Adium@70-91-169-68-BusName-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 16:38:25	dmwit	hseg: The error should suggest the correct fix here.
2013-04-05 16:38:48	<--	yogurt_truck (~yogurt_tr@190.191.224.63) has quit (Remote host closed the connection)
2013-04-05 16:38:49	dmwit	Like, the error literally contains a suggestion which is also the correct fix.
2013-04-05 16:38:55	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-04-05 16:38:56	hseg	It's suggesting FlexibleContexts. But I have no idea what that is nor why what I wrote is wrong.
2013-04-05 16:39:16	dmwit	To use an extension, add {-# LANGUAGE FlexibleContexts #-} at the top of your file.
2013-04-05 16:39:19	-->	fro0t (~fro0t@1.23.67.157) has joined #haskell
2013-04-05 16:39:35	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-04-05 16:39:37	dmwit	The reason what you wrote is wrong is nothing deep; there's just a stupid syntactic constraint on Haskell that was put in place before it was known how hard typeclasses would be to implement.
2013-04-05 16:39:46	-->	seliopou (~seliopou@wsip-184-180-43-195.ri.ri.cox.net) has joined #haskell
2013-04-05 16:39:47	--	jdnavarro_ is now known as jdnavarro
2013-04-05 16:39:50	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Client Quit)
2013-04-05 16:40:11	<--	netj (~netj@128.12.159.221) has quit (Ping timeout: 260 seconds)
2013-04-05 16:40:12	<--	Ontolog (~ontolog@71-95-193-50.dhcp.mtpk.ca.charter.com) has quit (Remote host closed the connection)
2013-04-05 16:40:18	dmwit	(It turns out it wasn't too hard, and so GHC relaxed this constraint. But it's not in the standard, so you have to explicitly ask for the relaxed version.)
2013-04-05 16:40:29	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 16:41:18	hseg	OK. From looking around, it's basically because I used a non-type variable as a parameter to one of the typeclasses?
2013-04-05 16:41:23	-->	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has joined #haskell
2013-04-05 16:41:26	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 255 seconds)
2013-04-05 16:41:54	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-04-05 16:42:09	-->	eff (~quassel@114.246.103.171) has joined #haskell
2013-04-05 16:42:27	-->	etehtsea (~textual@93.185.184.116) has joined #haskell
2013-04-05 16:42:34	dmwit	correct
2013-04-05 16:43:09	hseg	Seems like a rather arbitrary restriction to place on the constraints, as you already noted.
2013-04-05 16:43:37	quicksilver	it's not actualy arbitrary
2013-04-05 16:43:44	quicksilver	it just turned out to be shortsighted :)
2013-04-05 16:44:07	quicksilver	a fairly simple view of polymorphism suggested that "all useful instances" would naturally take a particular simple form
2013-04-05 16:44:11	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 245 seconds)
2013-04-05 16:44:12	-->	shepheb (~bsshephe@bas1-jockvale05-1176150554.dsl.bell.ca) has joined #haskell
2013-04-05 16:44:21	quicksilver	because of the universal properties of polymorphism
2013-04-05 16:44:29	<--	stat_vi (~stat@dslb-094-218-236-234.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-04-05 16:44:29	-->	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 16:44:44	-->	stat_vi (~stat@dslb-094-218-236-234.pools.arcor-ip.net) has joined #haskell
2013-04-05 16:44:46	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-05 16:44:49	quicksilver	but various changes to the language since then, and just interesting programming ideas, proved that actually plenty of useful instances don't take that form after all.
2013-04-05 16:44:50	-->	gabriel__ (~gabriel@r190-134-6-152.dialup.adsl.anteldata.net.uy) has joined #haskell
2013-04-05 16:44:53	dolio	It's almost exactly like limiting yourself to one level of matching in each case statement.
2013-04-05 16:44:53	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 248 seconds)
2013-04-05 16:45:17	dolio	Except that you can't nest the matches with type classes.
2013-04-05 16:45:26	dolio	Which makes it a lot more inconvenient.
2013-04-05 16:45:38	-->	netj (~netj@128.12.159.221) has joined #haskell
2013-04-05 16:46:06	quicksilver	you hit the problems much much more often with MPTCs though
2013-04-05 16:46:14	quicksilver	and they didn't have MPTCs when they were making the rule.
2013-04-05 16:46:25	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-04-05 16:46:29	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-04-05 16:46:43	-->	edeast (~chatzilla@d50-93-103-58.abhsia.telus.net) has joined #haskell
2013-04-05 16:46:55	quicksilver	(well, I'm conflating FlexibleContraints and FlexibleInstances in my head a bit - they're related restrictions)
2013-04-05 16:48:01	<--	r126l (~ruwin126@120.142.9.17) has quit (Quit: leaving)
2013-04-05 16:48:03	<--	shallowthought (~gsofficia@c-67-180-87-9.hsd1.ca.comcast.net) has left #haskell
2013-04-05 16:48:05	jdnavarro	I have a simple zipper for manipulating rose trees that lets me do anything I need to do efficiently
2013-04-05 16:48:10	-->	sgkim126l (~sgkim126@120.142.9.17) has joined #haskell
2013-04-05 16:48:22	<--	cognominal (~cognomina@37.160.43.166) has quit (Ping timeout: 245 seconds)
2013-04-05 16:48:49	jdnavarro	but the rose trees I need to work on are huge and won't fit in memory, is there any way to use a zipper with data stored in disk?
2013-04-05 16:49:50	-->	rul (~rul@163.10.42.228) has joined #haskell
2013-04-05 16:49:54	jdnavarro	should I just avoid the zipper pattern in this case and go with a key-value store?
2013-04-05 16:50:02	dmwit	http://hackage.haskell.org/package/swapper ?
2013-04-05 16:51:31	<--	xcombelle (~xcombelle@AToulouse-551-1-119-16.w92-156.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-04-05 16:52:11	-->	gwern (~gwern@pool-108-48-211-153.washdc.east.verizon.net) has joined #haskell
2013-04-05 16:52:12	<--	gwern (~gwern@pool-108-48-211-153.washdc.east.verizon.net) has quit (Changing host)
2013-04-05 16:52:12	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-04-05 16:52:16	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-04-05 16:52:26	--	`ramses is now known as ramses_
2013-04-05 16:52:43	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-04-05 16:54:04	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.0)
2013-04-05 16:54:10	-->	cognominal (~cognomina@37.160.62.39) has joined #haskell
2013-04-05 16:54:29	<--	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-05 16:54:37	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-04-05 16:54:45	jdnavarro	dmwit, swapper looks like what I want, unfortunately it has obsolete dependencies
2013-04-05 16:54:53	dmwit	ah, dang
2013-04-05 16:55:08	dmwit	You could try just bumping the numbers. If it builds, it probably still works.
2013-04-05 16:56:40	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-05 16:56:59	jdnavarro	I'll try that and have a look to the code, it looks like it's trying to solve the same problem I have
2013-04-05 16:57:02	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-04-05 16:57:58	<--	raichoo (~raichoo@b2b-5-10-182-138.unitymedia.biz) has quit (Quit: leaving)
2013-04-05 16:57:59	-->	callen (~callen@unaffiliated/callen) has joined #haskell
2013-04-05 16:58:54	-->	ExternalReality (~user@38.122.11.254) has joined #haskell
2013-04-05 16:59:00	<--	chatsiri1 (~chatsiri_@kuwin-131-6.kuwin.ku.ac.th) has quit (Ping timeout: 264 seconds)
2013-04-05 16:59:26	<--	chatsiri_ (~chatsiri_@kuwin-131-6.kuwin.ku.ac.th) has quit (Ping timeout: 255 seconds)
2013-04-05 16:59:28	-->	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 17:00:08	<--	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has quit (Ping timeout: 245 seconds)
2013-04-05 17:00:23	-->	realnot (~realnot@host251-53-dynamic.52-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-05 17:00:23	<--	realnot (~realnot@host251-53-dynamic.52-79-r.retail.telecomitalia.it) has quit (Changing host)
2013-04-05 17:00:23	-->	realnot (~realnot@unaffiliated/realnot) has joined #haskell
2013-04-05 17:00:26	<--	timjb (~timjb@ppp-93-104-171-132.dynamic.mnet-online.de) has quit (Remote host closed the connection)
2013-04-05 17:00:32	-->	chatsiri_ (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-05 17:00:39	hseg	OK, thanks a lot guys. Need to go.
2013-04-05 17:01:07	<--	grandtheftR (~Adium@c-98-207-106-13.hsd1.ca.comcast.net) has quit (Quit: Leaving.)
2013-04-05 17:01:16	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-04-05 17:01:21	-->	chatsiri1 (~chatsiri_@49.48.72.93) has joined #haskell
2013-04-05 17:01:42	<--	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has quit (Ping timeout: 245 seconds)
2013-04-05 17:01:53	-->	walter|r (~walter@c-75-73-211-125.hsd1.mn.comcast.net) has joined #haskell
2013-04-05 17:03:58	<--	heruur (~tvh@2a00:12d0:a100:9f01:70a8:87ac:5253:641b) has quit (Ping timeout: 246 seconds)
2013-04-05 17:04:30	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-04-05 17:05:03	<--	hseg (5f567bf1@gateway/web/freenode/ip.95.86.123.241) has quit (Ping timeout: 245 seconds)
2013-04-05 17:06:47	<--	cognominal (~cognomina@37.160.62.39) has quit (Ping timeout: 256 seconds)
2013-04-05 17:06:55	-->	stepkut (~user@c-98-227-180-137.hsd1.il.comcast.net) has joined #haskell
2013-04-05 17:06:57	-->	feliperosa (~felipe@2001:12f0:601:a921:314e:fe18:8155:3b97) has joined #haskell
2013-04-05 17:07:06	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Leaving...)
2013-04-05 17:07:30	<--	kaoskorobase (~sk@92.56.206.219) has quit (Read error: Connection reset by peer)
2013-04-05 17:07:39	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-04-05 17:07:45	-->	fmapE (~fmapE@2001:18e8:2:10f4:c441:242f:458f:58a3) has joined #haskell
2013-04-05 17:07:45	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-04-05 17:08:26	<--	timemage (~user@pool-71-241-214-49.port.east.myfairpoint.net) has quit (Ping timeout: 255 seconds)
2013-04-05 17:08:31	-->	cognominal (~cognomina@37.160.62.39) has joined #haskell
2013-04-05 17:09:07	Zenol	dwit > Thanks, I think it's working :)
2013-04-05 17:09:10	<--	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has quit (Remote host closed the connection)
2013-04-05 17:09:30	-->	kaoskorobase (~sk@92.56.206.219) has joined #haskell
2013-04-05 17:09:30	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-04-05 17:09:59	<--	kaoskorobase (~sk@92.56.206.219) has quit (Remote host closed the connection)
2013-04-05 17:10:05	-->	nadirvardar (~nadirvard@208.74.181.201.static.etheric.net) has joined #haskell
2013-04-05 17:10:09	-->	PaulVisschers (~PaulVissc@62.140.132.91) has joined #haskell
2013-04-05 17:10:09	<--	PaulVisschers (~PaulVissc@62.140.132.91) has quit (Client Quit)
2013-04-05 17:10:11	-->	sipa1024 (~pw@2a02:348:5e:5a29::1) has joined #haskell
2013-04-05 17:10:15	--	irc: disconnected from server
2013-04-05 18:18:32	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-05 18:18:32	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-05 18:18:32	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-05 18:18:32	--	Nicks #haskell: [@ChanServ [[zzz]] \rs ]OLI[ __main__ __xc _anona _d3f _janne `0660 `^_^v `bps `micro `nand` ab9rf absence acfoltzer aCube Adeon adimit Adios adnap aesptux Afish aforemny_ agumonkey agundry ahf ahihi ahkurtz aib ajhager akahn akosch akraut alang alanz albel727 alcz aleator alejandrogomez alexander__b alexsuraci_ alios alkabetz alnix alpounet alszar AmaBoten Amadiro amathew amatsu\idle amiller anachron anders^^ andrewsw andrey013 aninhumer anRch AntiSpamMeta apaku apella Apes Apocalisp araujo arbn ARCADIVS arcatan argiopeweb args[0] Argue aristid arkeet arkx arlinius armlesshobo arnihr__ arthurmaciel arun asante asQuirreL aszlig Athas augur augustl averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ beckerb Belgarion0 bens bergey` betawaffle bezik bholst Bigcheese BigEndian birkenfeld blackmirroxx BlastHardcheese blithe blz37 bobry bogner Boney Boreeas bos brainproxy_ Brando753 brandonw brett BrianHV brisbin brixen bscarlet bstrie Bwild bxc_ byorgey ByronJohnson bytbox c_wraith cads Cale caleb_9 caligula_ callen Canar canta canvon carbonCofiber carlocci ccasin ccxCZ cdh473 cdidd ceii celery__ Cerise certainty cfricke chance charlesofarrell chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmccann cmsd2 cmsmcq cods colah_ comak companion_cube conehead confound connelly_ coppro copumpkin cordawyn corruptmemory CosmicRa` Counter-Strike CoverSlide cow-orker crdueck cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-snp dabradley dan_johnsin danr dario DarkFox DarkLinkXXXX Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander descender dfletcher dgpratt dgvncsz0f DigitalKiwi dilinger_ dimka dixie djahandarie dju dkasak dlundy_ dm120769 dmwit Dodek dogmaT dolio DolphR domingo donri doomlord dottedmag dqd Draconx Draggor drbean DrCode dreixel drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT` Dtgr duairc_ dumbhat duosrx DustyDingo Dybber dyreshark eacameron EarlGray earthy edeast edenc edon Eduard_Munteanu edwtjo Eelis eff ehamberg Eiam eikke ejls eL_Bart0 eldariof electrogeek elgot Eliel elliott elliottcable em endojelly Enigmagic enquora ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot etehtsea ethercrow etrepum EvilPenguin eviltwin_ Excureo ExternalReality eyck_ f8 fabjan faen fall_ fayden fcr_ felipe_ fergusnoble fgomez fihi09 finnrobi fionnan FireFly fireglow fizbin flebron floatingman1 flori flux fmapE Fnar folone formalcow freiksenet frio fro0t frontend1oader froztbyte fry fryguybob ft Fubar^ Fuco FunkyDrummer Fuuzetsu FUZxxl fxrh gabriel__ gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gemelen genisage gentleben gereedy ghorn Ghoul__ gienah gilbertw1 Gilly glguy Gothmog_ Gracenotes grandtheftR greymalkin gseitz gspr guampa guerrill1 Guest6687 Guest76523 Guest82962 Guest84888 Gunni guymann gwern h_chiro hachiya hackagebot Hafydd hajimehoshi hamishmack hanDerPeder harrison heath Heero Heffalump helgikrs henk Hermit hiptobecubic hiratara hiredman hiroyuki2 hive-mind hiyakashi homo_vitruvius horlicks hpaste hpc hpd hrehf hvr hyko IanKelling ibid IbnFirnas Iceland_jack Icewing idnar ido idoru Igloo imphasing implr inad922 inarenvi_ inr_ int-e integral_ Internet13 ion ique ironm ISF Itkovian iulian ivan\ ivan` ixian izym Jaak jabirali jackhill jacobw jaimef Jambato jamwt janbanan janluu jao JaRoel|4d jaroslaw jaspervdj Jaxan jayne jbauman jcp|u jdnavarro jdoliner_ Jeanne-Kamikaze Jello_Raptor jercos jfischoff jianmeng jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro joe9 JoeHazzers joeyh_ johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrockway jrslepak jssanders jtalk jtannenbaum jtobin julmuri junsuijin jyp jyyou k0001 k0ral_ kadoban kaictl Kaidelong kakos kallisti kalven KaneTW kaol kaoskorobase kartoffelbrei kauschovar kazimir42 Ke kennyd kennyp kerrick Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmicu kmrhb Kneiva knightshade knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kushal kvey kylcarte kyle__ labo lahwran lambdabot LAMMJohnson Laney latermuse latro`a lattenwald lazard lcfrs LeaChim lennart_ lenstr leoncamel2 leroux Lethalman levi Licenser lightquake linduxed Liskni_si lispy liszt liyang lokydor_ lopex lpsmith lpvb luite lunarjar lzm m3ga Maarten_ machisuji_ madjestic magicman mahogny majoh maksbotan maltin mami mapf marienz Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mceier mcguitan93 McManiaC mcstar mechairo` mefisto` Megant mendez mephx_ merijn MetaCosm meyersh mgile mgsloan mhd miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico mirsal mixi mjga mjr841 MK_FG mlh mlinksva mm_freak_ mmaruseacph2 MoALTz mokus mollerstrand MOMI monique_ monochrom mononofu moonlite_ morazow mornfall morolin mortberg Mortchek mrd MrFenix mrko mrshoe MrWoohoo mspells mtao mtlatif mugenken mullein munro mux My_Hearing myme mysticc n_b nadirvardar Nafai Nahra Nanar nardul Natch natechan natte ndngvr` necrobious neena neothemachine netj neurocyte newsham nexx Nickeeh nicoo nighty^ Nik_89 niklasb niko nikola nilg niloc132 nilsi Nimatek nimred ninegrid ninzine Nisstyre-laptop niteria nlogax no-n noam noj noplamodo notdan NougatRillettes nouitfvf Nshag nsxt numeral nuncanada nus-- nuttycom nuttycom1 nwf oab oax obcode ocharles odr ofan Okasu OlegYch opqdonut Ornedan ortmage osfameron otend othiym23 otterdam otters otto_s ousado ozataman ozataman_ paintcan Paks pala2 Palmik_ pamojarpan Pantoufle pantsman ParadoxMuffin ParahSail1n ParahSailin parcs PartyKat1e pcapriotti pchiusano pdxleif_away peddie peltchu pepijndevos perlite permagreen perspectival petanqk peterhil petermw pettter pfoetchen pharaun phaul Philippa Philonous PHO_ phyrex1an pib1972 pigoz pikhq piotr_ plhk pmade pnielsen popz pqmodn pr Pranz predator117 preflex prh pricklypear prinnysocks PrO_OkI_ profmakx prophile ps-auxw Ptival ptrf purefn puzza007_ pyrtsa pyykkis_ q66 qrlr quaestor quicksilver quuxman qwandor qwr qz raek raichoo raid rainmaker Ralith ramses_ Raynes Raynos Razz realnot redjohn reggie1 reiddraper Reite Rembane RenJuan rexamophone rfw RichyB Rickasaurus rio Riussi rmunroe robawt robbe- robbert robstewartuk roconnor rofer Rotaerk_ rs234 rsimoes rsuniev123 rul ryanakca s00pcan s4msung s_quark SaBer saep Sagi saiam Saizan sajith sambio saml sanemat saurik scgilardi schlumpi schovi Sculptor seats Sebastien-L SegFaultAX seliopou sellout- sepp2k setmeaway Sgeo sgkim126l sgronblo_ sh shachaf shanse shepheb shergill Shin-LaC shintah SHODAN shutdown_-h_now si14 silver simon__ simpson sipa sirchurchill sjl skchrko skeet70 skp skyflash sleepynate SLi sm smarter so Soft sohum solarus solirc sonda sordina3 soulofpeace SoupE spion_ spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire startling stat_vi statusfailed steez stelleg_away stepcut stephe stepkut suiside sully sunfun sunnavy supernumeraryshi supersym supki sw17ch Swizec sysopfb system64 tac tahu takumn tamiko tanakh tanakh__ Tarential taruti tavelram td123 tdammers TDJACR techlife Tehnix tensorpudding Tesseraction tessier_ tew88 tg tgeeky Th0mas thalassarche tharper Tharugrim The_third_man theDon TheFuzzball theorbtwo TheRedMood thetallguy thetallguy1 thirsteh thorkilnaur_ thorsten` thoughtpolice threedaymonk threesome timebomb timemage tippenein tkd tmiw TML tntc tobiassjosten tobym tom4939 tomaw tomboy64 tomejaguar tomh__ tomku tommd tomprince ToRA Tordek trevize_ tridactyla tromp_ tsinnema tsou tswett ttuegel tunixman tuv tvaalen twanvl twanvl_ Twey tyler tzxn3 u_ ulfdoz Ulrar uniquenick Urchin Urchin[emacs] UziMonkey__ v0|d Valodim vehk verrens Vert Vertue vhz vikraman vili vmesoff vobi Volstvok Vorpal Vq vraid VZakharov wagle walter|r Walther warpy Watcher7|off waterlaz wei2912 weie wereHamster wess whaletechno WhereIsMySpoon whoops wilfredh William__ Will| wjlroe wollw wormphlegm wting wto wttr wtw_ wumpus wunki x7 xaimus xcvii_ xenon21 xinming xj54y XMunkki_ xnyhps Xorlev xorox90__ xplat xrl xrq xunatai xymox yam yan_ yano yeltzooo yezariaely yiannis_1 yriw yumike Zariel zebr Zeev__ zeiris Zenol zenzike ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz__ zz_nh2]
2013-04-05 18:18:32	--	Channel #haskell: 1053 nicks (1 op, 0 halfops, 0 voices, 1052 normals)
2013-04-05 18:18:33	--	URL for #haskell: http://www.haskell.org/
2013-04-05 18:18:34	--	Mode #haskell [+CLcnpt]
2013-04-05 18:18:34	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-05 18:18:37	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-04-05 18:18:54	-->	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has joined #haskell
2013-04-05 18:18:57	Philippa	isn't that usually another way of saying computable?
2013-04-05 18:19:15	Mortchek	Is it?
2013-04-05 18:19:20	 *	Mortchek doesn't know.
2013-04-05 18:19:45	dmwit	Yes, it is. Some other comments about your question:
2013-04-05 18:19:51	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (Excess Flood)
2013-04-05 18:20:05	-->	MetaCosm (~MetaCosm@li247-27.members.linode.com) has joined #haskell
2013-04-05 18:20:06	<--	MetaCosm (~MetaCosm@li247-27.members.linode.com) has quit (Changing host)
2013-04-05 18:20:06	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-04-05 18:20:08	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (Excess Flood)
2013-04-05 18:20:27	<--	vraid (~vraid@host-95-199-136-8.mobileonline.telia.com) has quit (Read error: Connection reset by peer)
2013-04-05 18:20:34	dmwit	Rice's Theorem is an intensional one. It's asking about a property of Turing machines, not a property of functions. Iterating over every mapping is not iterating over every Turing machine.
2013-04-05 18:20:44	<--	mysticc (~satvikc@202.3.77.213) has quit (Ping timeout: 256 seconds)
2013-04-05 18:20:48	-->	MetaCosm (~MetaCosm@li247-27.members.linode.com) has joined #haskell
2013-04-05 18:20:48	<--	MetaCosm (~MetaCosm@li247-27.members.linode.com) has quit (Changing host)
2013-04-05 18:20:48	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-04-05 18:20:49	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (Excess Flood)
2013-04-05 18:21:00	dmwit	And, anyway, the domains and codomains involved if we were to talk about things in that way aren't finite.
2013-04-05 18:21:20	dmwit	s/aren't/aren't necessarily/
2013-04-05 18:21:43	Mortchek	Sure, we're talking about potentially infinite domains, which means the method I proposed of comparing for equality wouldn't work for *all* functions.
2013-04-05 18:22:23	dmwit	Please refer back to complaint one. =)
2013-04-05 18:22:40	Mortchek	Yep.
2013-04-05 18:23:41	int-e	dmwit: But it's both extensional and intensional. The properties that it talks about are defined extensionally; if two programs define the same function, they should either both have the property or both not have it.
2013-04-05 18:23:47	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-04-05 18:23:48	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 276 seconds)
2013-04-05 18:23:59	int-e	excluding properties like "this turing machine has an odd number of states."
2013-04-05 18:24:08	<--	Ralith (~ralith@S010678cd8e745fa7.vc.shawcable.net) has quit (Ping timeout: 252 seconds)
2013-04-05 18:24:18	dmwit	You're right. My wording was a bit sloppy.
2013-04-05 18:24:22	-->	quchen (~david@p54AA36AA.dip.t-dialin.net) has joined #haskell
2013-04-05 18:24:31	Cale	Well, if you want to be picky in that particular way, then equality comparison of *functions* is something which isn't necessarily even a computational consideration, because functions are part of our mathematical model of the behaviour of these programs, and there might not be a notion of what's computable which really applies out there.
2013-04-05 18:24:53	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 18:25:20	-->	mattrepl (~mattrepl@pool-71-163-43-88.washdc.fios.verizon.net) has joined #haskell
2013-04-05 18:26:00	Mortchek	What's a model that's almost a Turing machine but for which you can assert whether it halts?
2013-04-05 18:26:49	hpaste	Jambato pasted “ ” at http://hpaste.org/85259
2013-04-05 18:26:55	<--	mapf (~user@5.254.180.254) has quit (Remote host closed the connection)
2013-04-05 18:26:58	<--	xinming (~xinming@125.82.198.96) has quit (Ping timeout: 256 seconds)
2013-04-05 18:27:12	-->	TheMG (~Sam@host217-42-192-56.range217-42.btcentralplus.com) has joined #haskell
2013-04-05 18:27:13	Jambato	I feel like I put too much stateful things in there
2013-04-05 18:27:25	-->	xinming (~xinming@125.82.198.96) has joined #haskell
2013-04-05 18:27:52	TheMG	what's a good word for the type of function you give map?
2013-04-05 18:27:53	Jambato	how can I update nested state monadic values?
2013-04-05 18:27:58	<--	jdnavarro (~danny@233.Red-88-0-7.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-04-05 18:28:04	-->	RayNbow (~RayNbow@scientia.demon.nl) has joined #haskell
2013-04-05 18:28:08	dmwit	TheMG: "function"?
2013-04-05 18:28:15	Jambato	TheMG: Functor?
2013-04-05 18:28:22	Mortchek	@type map
2013-04-05 18:28:24	lambdabot	(a -> b) -> [a] -> [b]
2013-04-05 18:28:24	dmwit	(You can give map *any* function. What do you mean?)
2013-04-05 18:28:24	-->	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has joined #haskell
2013-04-05 18:28:27	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 260 seconds)
2013-04-05 18:28:32	Mortchek	The first argument to map is any function whatsoever
2013-04-05 18:28:41	Mortchek	That's literally the most general case of function
2013-04-05 18:28:51	TheMG	in the same way you might call the function given to filter "predicate"
2013-04-05 18:28:52	-->	trescenzi (~trescenzi@2620:91:0:163:717d:1ec8:6797:1fd5) has joined #haskell
2013-04-05 18:28:58	 *	hackagebot git-annex 4.20130405 - manage files with git, without checking their contents into git  http://hackage.haskell.org/package/git-annex-4.20130405 (JoeyHess)
2013-04-05 18:29:04	Mortchek	"mapper", perhaps?
2013-04-05 18:29:11	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-04-05 18:29:24	geekosaur	sounds like someone may not have figured out the pointof "functional" in "functional language"
2013-04-05 18:29:24	TheMG	is there not already a word for this? i feel like there's a word
2013-04-05 18:29:28	dmwit	TheMG: Right, but "the function given to filter" is more specific than "the function given to map".
2013-04-05 18:29:37	geekosaur	there are words for it... in languages where it is not a first class operation
2013-04-05 18:29:46	TheMG	such as?
2013-04-05 18:29:48	geekosaur	s/in/for/
2013-04-05 18:30:07	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Remote host closed the connection)
2013-04-05 18:30:22	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-04-05 18:30:26	dmwit	Seriously, just call it a function. There's no better word for it.
2013-04-05 18:30:53	-->	mugenken_ (~mugenken@p5B3EDB1D.dip.t-dialin.net) has joined #haskell
2013-04-05 18:30:56	geekosaur	but, I'm not sure which aspect of it you're trying to capture. it's a function. it may be a partially applied function or a section or a lambda
2013-04-05 18:31:13	TheMG	the aspect of it being given to map
2013-04-05 18:31:15	Cale	Jambato: map *itself* is half of a functor
2013-04-05 18:31:22	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-05 18:31:25	<--	skeet70 (~skeet70@host-174-45-125-43.bzm-mt.client.bresnan.net) has quit (Quit: Computer has gone to sleep.)
2013-04-05 18:31:31	hiptobecubic	TheMG, it makes "map" a higher order function?
2013-04-05 18:31:33	Cale	Jambato: (the other half being the list type constructor)
2013-04-05 18:31:34	hiptobecubic	maybe that's it?
2013-04-05 18:31:36	<--	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has quit (Ping timeout: 276 seconds)
2013-04-05 18:31:55	Cale	Jambato: but the parameter to map isn't a functor, it's just a function.
2013-04-05 18:31:55	hiptobecubic	TheMG, in C++, the function given to map would be called a 'functor'. But that's just because they are idiots.
2013-04-05 18:31:56	geekosaur	in objective C you would usually use a block
2013-04-05 18:31:58	TheMG	i think functor is the closest there is
2013-04-05 18:32:14	<--	eikke (~nicolas@78-20-0-121.access.telenet.be) has quit (Read error: Operation timed out)
2013-04-05 18:32:15	dmwit	Mortchek: That's a good question. I can't think of any where the decision procedure isn't the trivial "always return True" one.
2013-04-05 18:32:35	<--	wttr (~jameswett@180.92.118.130) has quit (Ping timeout: 255 seconds)
2013-04-05 18:32:54	Cale	TheMG: Calling representations of functions "functors" is a horrible practice because it directly conflicts with the common notion of functor from mathematics
2013-04-05 18:33:01	-->	mapf (~user@5.254.180.254) has joined #haskell
2013-04-05 18:33:17	Mortchek	Like the language that computes the result of adding numbers together :) halts(1+2) = True, halts(3+8+10) = True, halts(_) = True
2013-04-05 18:33:18	dmwit	Mortchek: Except perhaps the HQ9+ machine. ;-)
2013-04-05 18:33:37	Mortchek	Haven't heard of that, I shall look it up.
2013-04-05 18:33:41	<--	mugenken (~mugenken@p5B3ED518.dip.t-dialin.net) has quit (Ping timeout: 248 seconds)
2013-04-05 18:33:59	Mortchek	Ahaha, nice.
2013-04-05 18:34:10	dmwit	Mortchek: HQ9+ has four commands, h (print "hello world"), q (be a quine), 9 (print "99 bottles of beer"), and + (infinitely increase an accumulator).
2013-04-05 18:34:25	dmwit	halts s = '+' `elem` s
2013-04-05 18:34:26	dmwit	;-)
2013-04-05 18:34:46	-->	machisuji (~machisuji@2a01:4f8:162:22c6::2) has joined #haskell
2013-04-05 18:34:48	-->	mr- (~martin@rgnb-5d8787a6.pool.mediaWays.net) has joined #haskell
2013-04-05 18:34:50	<--	kartoffelbrei (~kartoffel@p54978ED9.dip0.t-ipconnect.de) has quit (Ping timeout: 255 seconds)
2013-04-05 18:35:01	<--	inarenvi_ (~quassel@92.59.151.141) has quit (Quit: Low Battery)
2013-04-05 18:35:12	Mortchek	dmwit, that's partial. :P
2013-04-05 18:35:13	<--	latermuse (~ron@112.201.145.213) has quit (Ping timeout: 256 seconds)
2013-04-05 18:35:15	Mortchek	halts(10) = ?
2013-04-05 18:35:21	Mortchek	Wait no
2013-04-05 18:35:25	Mortchek	s/partial/incorrect/
2013-04-05 18:35:31	Jambato	Cale: ah yeah. misunderstood what TheMG asked
2013-04-05 18:35:36	Jambato	my bad
2013-04-05 18:35:43	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 18:35:54	dmwit	> let halts s = '+' `elem` s in halts "10"
2013-04-05 18:35:55	quchen	It's total for finite programs
2013-04-05 18:35:56	lambdabot	  False
2013-04-05 18:36:00	geekosaur	halts _ = "answer hazy, ask again later"
2013-04-05 18:36:15	dmwit	Mortchek: You're right, it should be notElem.
2013-04-05 18:36:22	dmwit	> let halts s = '+' `notElem` s in halts "10"
2013-04-05 18:36:23	lambdabot	  True
2013-04-05 18:36:32	dmwit	There we go. Looks perfectly cromulent to me.
2013-04-05 18:36:51	<--	anRch (~markmilli@pool-108-20-103-151.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-04-05 18:36:54	Mortchek	The language I described halts regardless of the program's contents, as long as the program is well formed.
2013-04-05 18:37:22	-->	gg7 (~gg7@unaffiliated/gg7) has joined #haskell
2013-04-05 18:37:30	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 18:37:32	dmwit	The language I described halts exactly when '+' is in the program's contents.
2013-04-05 18:37:37	dmwit	Your move, Mortchek.
2013-04-05 18:37:50	Mortchek	Oh I see, we were describing separate languages. :P
2013-04-05 18:38:10	-->	Eldariof-ru (~CLD@pppoe-210-78-dyn-sr.volgaline.ru) has joined #haskell
2013-04-05 18:38:18	Mortchek	Well, trying to describe.
2013-04-05 18:38:32	Mortchek	("describing" was true regardless)
2013-04-05 18:39:20	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-04-05 18:39:45	Mortchek	> let run s | '+' `elem` s -> True | _ -> run s in run "foo"
2013-04-05 18:39:46	lambdabot	  <hint>:1:26: parse error on input `->'
2013-04-05 18:40:03	Mortchek	Oh woop
2013-04-05 18:40:09	Mortchek	> let run s | '+' `elem` s = True | _ = run s in run "foo"
2013-04-05 18:40:11	lambdabot	  Pattern syntax in expression context: _
2013-04-05 18:40:18	Mortchek	I am silly.
2013-04-05 18:40:23	Mortchek	> let run s | '+' `elem` s = True | otherwise = run s in run "foo"
2013-04-05 18:40:25	dmwit	let _ = otherwise
2013-04-05 18:40:27	lambdabot	  mueval-core: Time limit exceeded
2013-04-05 18:40:29	Mortchek	\o/
2013-04-05 18:41:28	-->	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has joined #haskell
2013-04-05 18:41:39	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-04-05 18:41:43	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 18:41:45	<--	eldariof (~CLD@pppoe-214-41-dyn-sr.volgaline.ru) has quit (Ping timeout: 252 seconds)
2013-04-05 18:41:51	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-05 18:42:19	<--	machisuji (~machisuji@2a01:4f8:162:22c6::2) has quit (Remote host closed the connection)
2013-04-05 18:42:37	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-05 18:43:14	<--	mugenken_ (~mugenken@p5B3EDB1D.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-04-05 18:44:10	<--	walter|r (~walter@c-75-73-211-125.hsd1.mn.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-04-05 18:44:27	-->	machisuji (~machisuji@2a01:4f8:162:22c6::2) has joined #haskell
2013-04-05 18:44:30	-->	end3rW (~end3rW@lak-117-236.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-04-05 18:44:44	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-04-05 18:44:49	-->	arpunk (~user@181.151.69.58) has joined #haskell
2013-04-05 18:44:53	<--	stepkut (~user@c-98-227-180-137.hsd1.il.comcast.net) has quit (Ping timeout: 248 seconds)
2013-04-05 18:45:13	-->	adek (~adek@5.134.64.87) has joined #haskell
2013-04-05 18:45:43	-->	k00mi (~koomi@24.134.205.36) has joined #haskell
2013-04-05 18:45:50	-->	wabash (~n@unaffiliated/wabash) has joined #haskell
2013-04-05 18:45:59	-->	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has joined #haskell
2013-04-05 18:45:59	wabash	Holy shit.
2013-04-05 18:46:03	adek	I have enumerated type qualified imported. When I try to do [Q.A..Q.Z] it fails to compile. When I do [(Q.A)..(Q.Z)] its ok, but hlint complains about parenthasis. Can it be done better?
2013-04-05 18:46:07	wabash	How did this channel get so many people???
2013-04-05 18:46:13	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 258 seconds)
2013-04-05 18:46:14	<--	mceier (~mceier@77-252-246-25.ip.netia.com.pl) has quit (Quit: leaving)
2013-04-05 18:46:14	wabash	It was like 500 people 3 years ago.
2013-04-05 18:46:19	oab	most are trolls
2013-04-05 18:46:43	oab	^^
2013-04-05 18:47:01	<--	Jambato (~le@auv95-1-82-241-80-196.fbx.proxad.net) has quit (Quit: leaving)
2013-04-05 18:47:07	wabash	haha
2013-04-05 18:47:07	geekosaur	[Q.A .. Q.Z] ?
2013-04-05 18:47:11	-->	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has joined #haskell
2013-04-05 18:47:13	wabash	Wish I knew Haskell!
2013-04-05 18:47:14	wabash	:)
2013-04-05 18:47:20	wabash	How is the job market in Haskell?
2013-04-05 18:47:20	Mortchek	@where lyah
2013-04-05 18:47:20	lambdabot	http://www.learnyouahaskell.com/
2013-04-05 18:47:40	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-04-05 18:47:41	-->	vraid (~vraid@host-95-199-156-183.mobileonline.telia.com) has joined #haskell
2013-04-05 18:48:09	adek	geekosaur: So easy.. Thanks!
2013-04-05 18:48:18	<--	mhd (~mhd@80-71-135-7.u.parknet.dk) has left #haskell ("so long")
2013-04-05 18:48:22	--	tac is now known as tac-for-lunch
2013-04-05 18:48:33	oab	Well at least there are some. Would be nice with more. The market will be flooded with haskell jobs any time now.
2013-04-05 18:48:43	oab	Surely.
2013-04-05 18:48:53	wabash	hehe
2013-04-05 18:48:55	wabash	cool thanks.
2013-04-05 18:49:09	quchen	oab: Flooded?
2013-04-05 18:49:11	glguy	oab: Got any hot stock market tips?
2013-04-05 18:49:16	quchen	Why's that
2013-04-05 18:49:30	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-04-05 18:49:38	<--	pchiusano (c62d1214@gateway/web/freenode/ip.198.45.18.20) has quit (Ping timeout: 245 seconds)
2013-04-05 18:49:38	-->	ijp (~user@host109-151-48-114.range109-151.btcentralplus.com) has joined #haskell
2013-04-05 18:49:38	oab	Well Haskell has 3 web frameworks now
2013-04-05 18:49:41	oab	or more
2013-04-05 18:49:56	oab	Any minute now everyone will start using them :)
2013-04-05 18:50:01	jfischoff	any idea why when a coworker runs an executable I wrote he is getting the error: warning Could not find object file … /libHSrts.a(darwin64.o) ?
2013-04-05 18:50:10	quchen	Not sure if joking
2013-04-05 18:50:20	oab	Well they ought to anyway
2013-04-05 18:50:32	-->	skeet70 (~skeet70@newaruba2.msu.montana.edu) has joined #haskell
2013-04-05 18:50:32	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-04-05 18:50:40	adek	jfischoff: He doesn't have library your binary is linking to?
2013-04-05 18:50:52	geekosaur	jfischoff, are you using ghc-lib / hint in there?
2013-04-05 18:51:04	jfischoff	I don't think so...
2013-04-05 18:51:08	<--	wabash (~n@unaffiliated/wabash) has left #haskell
2013-04-05 18:51:17	jfischoff	GHC.float
2013-04-05 18:51:28	-->	collin (~collin@50-196-169-45-static.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 18:51:33	<--	soulofpeace (~soulofpea@175.156.217.109) has quit (Ping timeout: 240 seconds)
2013-04-05 18:51:46	jfischoff	I thought the GHC runtime was bundled with the app?
2013-04-05 18:51:55	geekosaur	adek: that's a member of a *static* archive, it should not be needed at runtime
2013-04-05 18:51:57	-->	Zeev_ (~Zeev@109.67.22.13) has joined #haskell
2013-04-05 18:52:09	geekosaur	unless it's being run under a debugger which is trying to load symbols
2013-04-05 18:52:24	jfischoff	ah
2013-04-05 18:52:34	-->	strax (uid4099@gateway/web/irccloud.com/x-qiuzaogwslftuflm) has joined #haskell
2013-04-05 18:52:40	geekosaur	(or unless this is older AIX, but that's kinda its own punishment)
2013-04-05 18:52:49	armlesshobo	I really wish hackage would specify if the package can be built for dynamic linking.
2013-04-05 18:52:53	jfischoff	the app was set faulting so I had him run it under gdb to get more info
2013-04-05 18:53:01	jfischoff	so that is not the issue
2013-04-05 18:53:30	<--	system64 (~system64@202.78.175.199) has quit (Quit: Computer has gone to sleep.)
2013-04-05 18:53:35	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-05 18:53:39	-->	Zeev (~Zeev@109.67.9.37) has joined #haskell
2013-04-05 18:54:06	-->	heruur (~tvh@143-159-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-05 18:54:08	<--	heruur (~tvh@143-159-103-86.dynamic.dsl.tng.de) has quit (Read error: Connection reset by peer)
2013-04-05 18:54:18	-->	gridaphobe (~gridaphob@128.54.43.6) has joined #haskell
2013-04-05 18:54:23	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-04-05 18:54:23	<--	Eldariof-ru (~CLD@pppoe-210-78-dyn-sr.volgaline.ru) has quit (Read error: Operation timed out)
2013-04-05 18:54:34	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Remote host closed the connection)
2013-04-05 18:54:38	<--	timebomb (~tb@x0006r1116626.louisiana.edu) has quit (Ping timeout: 255 seconds)
2013-04-05 18:55:25	<--	Zeev__ (~Zeev@bzq-79-179-23-24.red.bezeqint.net) has quit (Ping timeout: 258 seconds)
2013-04-05 18:55:30	-->	Eldariof-ru (~CLD@188.168.245.165) has joined #haskell
2013-04-05 18:55:35	<--	kaoskorobase (~sk@92.56.206.219) has quit (Quit: kaoskorobase)
2013-04-05 18:56:05	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-05 18:56:05	-->	hiroaki (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-05 18:56:16	<--	Itkovian (~Itkovian@188.189.68.195) has quit (Quit: Itkovian)
2013-04-05 18:56:34	<--	Zeev_ (~Zeev@109.67.22.13) has quit (Ping timeout: 258 seconds)
2013-04-05 18:56:37	geekosaur	oh, so this is the float/double issue on OS X, sounds like.
2013-04-05 18:56:41	geekosaur	not a problem with your code
2013-04-05 18:57:01	jfischoff	really?
2013-04-05 18:57:13	<--	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has quit (Client Quit)
2013-04-05 18:57:21	geekosaur	or was that mentionof GHC.Float spurious?
2013-04-05 18:57:30	jfischoff	probably spurious
2013-04-05 18:57:51	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-05 18:58:03	jfischoff	what is the float/double issue though?
2013-04-05 18:58:15	-->	ujihisa (~ujihisa@owls-1.van.hootops.com) has joined #haskell
2013-04-05 18:58:48	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 18:59:17	-->	jmelesky (~jmelesky@173-164-68-213-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 18:59:43	-->	Ontolog (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 18:59:53	-->	luisgabriel (~luisgabri@187.59.246.215) has joined #haskell
2013-04-05 18:59:53	geekosaur	lemme see if I can find the bug
2013-04-05 19:00:48	<--	ExternalReality (~user@38.122.11.254) has quit (Ping timeout: 264 seconds)
2013-04-05 19:02:39	geekosaur	http://hackage.haskell.org/trac/ghc/ticket/7043 appears to be the bug they're using as the reference (various other bug reports are closed as dups of it)
2013-04-05 19:02:39	-->	tootsie (tootsie@37.250.165.62.bredband.tre.se) has joined #haskell
2013-04-05 19:03:20	<--	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-05 19:03:40	-->	Paprikachu (~Paprikach@bcn52.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 19:03:49	-->	centrinia (~exc@107-208-218-105.lightspeed.tukrga.sbcglobal.net) has joined #haskell
2013-04-05 19:04:28	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 19:04:37	<--	janbanan (~naj@niklas.vth.sgsnet.se) has quit (Ping timeout: 245 seconds)
2013-04-05 19:05:57	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-05 19:05:59	--	spion_ is now known as spion
2013-04-05 19:06:40	<--	harrison (~quassel@li89-226.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-04-05 19:06:44	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-04-05 19:07:05	<--	grandtheftR (~Adium@200.sub-70-211-76.myvzw.com) has quit (Quit: Leaving.)
2013-04-05 19:08:42	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 252 seconds)
2013-04-05 19:08:47	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Ping timeout: 245 seconds)
2013-04-05 19:08:53	-->	ramkrsna (ramkrsna@nat/redhat/x-klfzyuehelpvcqph) has joined #haskell
2013-04-05 19:08:53	<--	ramkrsna (ramkrsna@nat/redhat/x-klfzyuehelpvcqph) has quit (Changing host)
2013-04-05 19:08:53	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-04-05 19:09:38	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 19:09:39	<--	bos (~bos@c-98-207-92-149.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-04-05 19:09:47	<--	arpunk (~user@181.151.69.58) has quit (Ping timeout: 256 seconds)
2013-04-05 19:10:48	<--	sanemat (~sanemat@p855c4b.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-04-05 19:10:50	<--	k0001 (~k0001@host45.181-1-162.telecom.net.ar) has quit (Ping timeout: 255 seconds)
2013-04-05 19:11:05	-->	tjohnson (~tjohnson@128-193-152-160.ptpg.oregonstate.edu) has joined #haskell
2013-04-05 19:11:10	<--	duosrx (~duosrx@46-90-190-109.dsl.ovh.fr) has quit (Remote host closed the connection)
2013-04-05 19:11:13	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-04-05 19:11:27	-->	ski_ (~na@t-2020-08.studat.chalmers.se) has joined #haskell
2013-04-05 19:11:41	-->	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has joined #haskell
2013-04-05 19:12:04	<--	js6i (~zeus@89-68-153-169.dynamic.chello.pl) has quit (Max SendQ exceeded)
2013-04-05 19:12:55	-->	osa1_ (~omer@88.242.150.172) has joined #haskell
2013-04-05 19:13:05	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-05 19:13:19	<--	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has quit (Ping timeout: 245 seconds)
2013-04-05 19:13:22	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-05 19:13:52	<--	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has quit (Remote host closed the connection)
2013-04-05 19:13:59	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-05 19:14:06	-->	root____6 (~root@117.195.10.172) has joined #haskell
2013-04-05 19:14:09	<--	Eduard_Munteanu (~Eduard_Mu@188.25.245.27) has quit (Ping timeout: 245 seconds)
2013-04-05 19:14:17	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Client Quit)
2013-04-05 19:14:35	<--	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-05 19:14:37	-->	[swift] (~swift@75-101-60-167.dsl.static.sonic.net) has joined #haskell
2013-04-05 19:14:56	root____6	Hello , can anyone respond to my query regarding Haskell dynamic module loading
2013-04-05 19:15:04	-->	harrison (~quassel@li89-226.members.linode.com) has joined #haskell
2013-04-05 19:15:08	simpson	root____6: One sec, looking for it.
2013-04-05 19:15:20	root____6	http://stackoverflow.com/questions/15824756/ghc-7-4-2-dynamically-calling-modules
2013-04-05 19:15:24	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-05 19:15:25	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-05 19:15:29	simpson	Oh, you hadn't asked yet.
2013-04-05 19:15:44	-->	_flow_ (flo@star.freakempire.de) has joined #haskell
2013-04-05 19:15:52	[swift]	so is it me or is cabal configure --enable-executable-profiling broken on the current haskell platform?
2013-04-05 19:16:00	<--	cdidd (~cdidd@95-24-115-60.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-04-05 19:16:01	simpson	root____6: Well, let's take a step back. Why do you want this?
2013-04-05 19:16:05	tootsie	Hello. I'm learning sockets. I wrote a simple protocol on top of TCP to handle message framing(sent the length of the message first in the stream) and it works. But I'm a little confused on what a port really is. How is this mapped to something physically? And how is it resolved what data belongs to which socket if you have several connections on the same address and port? It all comes down
2013-04-05 19:16:05	tootsie	to the same physical connection right?
2013-04-05 19:16:05	<--	inad922 (~inad925@93.93.84.85) has quit (Quit: Leaving)
2013-04-05 19:16:06	fryguybob	@tell napping I reported the issue you pasted with STM here: http://hackage.haskell.org/trac/ghc/ticket/7815
2013-04-05 19:16:06	lambdabot	Consider it noted.
2013-04-05 19:16:37	simpson	tootsie: In TCP and UDP, the port is merely a number.
2013-04-05 19:16:51	simpson	tootsie: It doesn't have any physical equivalent.
2013-04-05 19:17:20	--	cl_away is now known as clahey
2013-04-05 19:17:36	simpson	tootsie: As for your second question...you're talking about a server, right? You've listened on a port, and now you have many connections on that port?
2013-04-05 19:17:47	tootsie	I know it is represented by a number but how is that possible. since TCP is just a stream how can data be sent to a specific port?
2013-04-05 19:17:55	tootsie	or socket rather
2013-04-05 19:17:57	root____6	I want to load Modules and invoke from configuration files for some  framework implementation
2013-04-05 19:18:02	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 258 seconds)
2013-04-05 19:18:10	tootsie	simpson: yes a server
2013-04-05 19:18:15	root____6	yes
2013-04-05 19:18:19	simpson	tootsie: Underneath the stream, TCP sends a lot of framing data, including the port numbers.
2013-04-05 19:18:28	-->	grandtheftR (~Adium@4.53.129.190) has joined #haskell
2013-04-05 19:18:29	<--	stelleg_away (~stelleg@c-174-56-74-242.hsd1.nm.comcast.net) has quit (Ping timeout: 248 seconds)
2013-04-05 19:18:45	simpson	root____6: Sounds complex. Why not start with something simpler?
2013-04-05 19:18:51	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-05 19:18:58	root____6	:)
2013-04-05 19:19:12	simpson	tootsie: So, a single socket connection is determined by five things: Source IP, source port, destination IP, destination port, and protocol.
2013-04-05 19:19:42	<--	nuttycom (~nuttycom@184-99-240-118.hlrn.qwest.net) has quit (Ping timeout: 252 seconds)
2013-04-05 19:19:43	simpson	tootsie: Since the clients all have different IPs and are connecting on different ports, it's not hard for your networking layer (the kernel) to keep connections separate.
2013-04-05 19:19:52	-->	Ontolog_ (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 19:20:18	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-04-05 19:20:26	-->	bitonic (~user@ppp-232-137.27-151.libero.it) has joined #haskell
2013-04-05 19:20:36	-->	memand (~memand@0x4dd74f01.adsl.cybercity.dk) has joined #haskell
2013-04-05 19:20:59	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-04-05 19:21:16	<--	memand (~memand@0x4dd74f01.adsl.cybercity.dk) has quit (Client Quit)
2013-04-05 19:21:20	<--	rsuniev123 (~textual@212.140.174.166) has quit (Quit: Computer has gone to sleep.)
2013-04-05 19:21:41	root____6	is it something very difficult ? I tried to boil down the issue to simplest possible, calling a one liner function,
2013-04-05 19:22:24	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-05 19:22:45	<--	osa1_ (~omer@88.242.150.172) has quit (Ping timeout: 248 seconds)
2013-04-05 19:22:46	<--	jianmeng (~mengjian@123.138.36.108) has quit (Quit: Leaving.)
2013-04-05 19:22:55	simpson	root____6: Maybe http://stackoverflow.com/questions/9198140/ghc-api-how-to-dynamically-load-haskell-code-from-a-compiled-module-using-ghc will help.
2013-04-05 19:22:55	-->	osa1 (~omer@176.237.230.236) has joined #haskell
2013-04-05 19:23:01	<--	Ontolog (~ontolog@mail1.attinteractive.com) has quit (Ping timeout: 258 seconds)
2013-04-05 19:23:05	simpson	root____6: Also, there's the hint package if you want to *compile* code dynamically.
2013-04-05 19:24:15	<--	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has quit (Ping timeout: 276 seconds)
2013-04-05 19:24:15	<--	ousado (~ousado@unaffiliated/ousado) has quit (Ping timeout: 276 seconds)
2013-04-05 19:25:33	<--	izym (~izym@82.211.222.212) has quit (Ping timeout: 276 seconds)
2013-04-05 19:25:52	-->	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has joined #haskell
2013-04-05 19:26:15	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-04-05 19:26:20	-->	ousado (~ousado@unaffiliated/ousado) has joined #haskell
2013-04-05 19:26:20	-->	sellout-1 (~Adium@70.96.9.235) has joined #haskell
2013-04-05 19:26:28	<--	folone (~folone@91.102.12.198) has quit (Quit: Leaving)
2013-04-05 19:27:27	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-04-05 19:27:30	-->	bos (~bos@173.252.71.129) has joined #haskell
2013-04-05 19:27:37	<--	gilbertw1 (~gilbertw1@64.20.30.66) has quit (Quit: Leaving...)
2013-04-05 19:27:42	-->	dmac (~Adium@12.207.22.242) has joined #haskell
2013-04-05 19:27:43	-->	walter|r (~walter@c-75-73-211-125.hsd1.mn.comcast.net) has joined #haskell
2013-04-05 19:27:57	<--	sleepynate (~sleepynat@199.16.190.194) has quit (Remote host closed the connection)
2013-04-05 19:28:10	<--	sellout- (~Adium@70.96.9.235) has quit (Ping timeout: 256 seconds)
2013-04-05 19:28:23	-->	idntfy (~idntfy@109.106.158.128) has joined #haskell
2013-04-05 19:30:02	<--	edeast (~chatzilla@d50-93-103-58.abhsia.telus.net) has quit (Ping timeout: 245 seconds)
2013-04-05 19:30:16	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 19:30:24	-->	mvj4 (~d@78.47.152.189) has joined #haskell
2013-04-05 19:30:30	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-05 19:30:31	<--	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has quit (Ping timeout: 264 seconds)
2013-04-05 19:30:39	<--	mvj4 (~d@78.47.152.189) has left #haskell
2013-04-05 19:30:57	tootsie	simpson: all my clients are from one computer so should have the same IP. they also connect tot he same port id. im using python on the client side and i dont hand it a port nbr.,.
2013-04-05 19:31:21	-->	Thra11 (~thrall@92.114.112.87.dyn.plus.net) has joined #haskell
2013-04-05 19:31:30	simpson	tootsie: Your lowest level of socket stuff (deep inside libc) automatically picks a super-high free port.
2013-04-05 19:31:38	lightquake	I need a one-to-many map that's easily invertible; is there something like that in the libraries?
2013-04-05 19:31:40	simpson	tootsie: Use netstat on your client computer.
2013-04-05 19:31:59	geekosaur	when you accept a connection it is given an ephemeral port number. you might want to study how sockets work in general
2013-04-05 19:32:14	<--	etehtsea (~textual@93.185.184.116) has quit (Read error: Connection reset by peer)
2013-04-05 19:32:21	-->	gilbertw1 (~gilbertw1@64.20.30.66) has joined #haskell
2013-04-05 19:32:39	<--	mjga (~m@77-21-74-138-dynip.superkabel.de) has quit (Quit: Farewell)
2013-04-05 19:33:17	-->	smilefreak (~sfk@125-237-126-198.jetstream.xtra.co.nz) has joined #haskell
2013-04-05 19:33:26	tootsie	simpson: ok ty. very helpful answers.
2013-04-05 19:33:41	simpson	tootsie: Sure.
2013-04-05 19:33:44	-->	memand (~memand@0x4dd74f01.adsl.cybercity.dk) has joined #haskell
2013-04-05 19:33:47	<--	trescenzi (~trescenzi@2620:91:0:163:717d:1ec8:6797:1fd5) has quit (Remote host closed the connection)
2013-04-05 19:34:14	-->	sleepynate (~sleepynat@199.16.190.194) has joined #haskell
2013-04-05 19:34:39	-->	mvj4 (~d@78.47.152.189) has joined #haskell
2013-04-05 19:34:53	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Ping timeout: 258 seconds)
2013-04-05 19:36:12	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 252 seconds)
2013-04-05 19:37:54	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 19:38:32	-->	lemao (~lemao@187.67.222.39) has joined #haskell
2013-04-05 19:40:20	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-05 19:40:23	<--	fgomez (~Fernando@uwsclient-127-232.uws.ualberta.ca) has quit (Ping timeout: 256 seconds)
2013-04-05 19:40:51	<--	andrey013 (~chatzilla@95.73.138.212) has quit (Quit: ChatZilla 0.9.90 [Firefox 20.0/20130403010102])
2013-04-05 19:41:04	<--	klugez (kluge@xob.kapsi.fi) has quit (Quit: Changing server)
2013-04-05 19:41:53	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-04-05 19:42:09	-->	klugez (kluge@xob.kapsi.fi) has joined #haskell
2013-04-05 19:43:49	<--	neothemachine (~neoaaaaa@89-186-137-212.dynamic.primacom.net) has quit
2013-04-05 19:43:51	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 19:44:19	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-04-05 19:45:28	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Quit: Konversation terminated!)
2013-04-05 19:45:57	<--	plucas (~plucas@c-24-98-197-10.hsd1.ga.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-05 19:46:10	<--	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has quit (Remote host closed the connection)
2013-04-05 19:46:13	<--	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (Ping timeout: 248 seconds)
2013-04-05 19:46:24	-->	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has joined #haskell
2013-04-05 19:46:34	<--	S11001001 (~sirian@c-98-217-68-27.hsd1.ma.comcast.net) has quit (Changing host)
2013-04-05 19:46:34	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-04-05 19:46:34	<--	walter|r (~walter@c-75-73-211-125.hsd1.mn.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-04-05 19:47:27	-->	Ontolog (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 19:47:40	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-04-05 19:48:10	-->	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-04-05 19:48:25	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-04-05 19:48:47	-->	inarenvi (~quassel@90.173.200.241) has joined #haskell
2013-04-05 19:49:17	-->	fgomez (~Fernando@uwsclient-144-29.uws.ualberta.ca) has joined #haskell
2013-04-05 19:49:38	<--	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has quit (Client Quit)
2013-04-05 19:49:48	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-04-05 19:50:01	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 256 seconds)
2013-04-05 19:50:29	-->	mrsolo (~mrsolo@64.125.181.92) has joined #haskell
2013-04-05 19:50:47	-->	edeast (~chatzilla@24.114.26.211) has joined #haskell
2013-04-05 19:50:57	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-05 19:51:14	<--	Ontolog_ (~ontolog@mail1.attinteractive.com) has quit (Ping timeout: 245 seconds)
2013-04-05 19:51:24	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-04-05 19:52:24	<--	tg (~irc@2001:738:2001:2078:0:215:11:82) has quit (Ping timeout: 264 seconds)
2013-04-05 19:53:23	root____6	simpson: thanks but I have written exactly as stated in SO question you referenced , also regarding hint package, I am not sure if we can load precompiled modules using that ?, I see examples which load onlly from source
2013-04-05 19:53:28	-->	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has joined #haskell
2013-04-05 19:53:31	<--	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has left #haskell
2013-04-05 19:53:39	simpson	root____6: hint is a Haskell INTerpreter.
2013-04-05 19:53:41	<--	Ontolog (~ontolog@mail1.attinteractive.com) has quit (Ping timeout: 248 seconds)
2013-04-05 19:54:06	simpson	root____6: Anyway, my question would still be: If you're gonna compile the code, and you have all the code, why does it need to be dynamically loaded?
2013-04-05 19:55:01	<--	ousado (~ousado@unaffiliated/ousado) has quit (Ping timeout: 245 seconds)
2013-04-05 19:56:53	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 248 seconds)
2013-04-05 19:57:07	root____6	simpson: I am designing a framework which reads the congiguration file and loads the modules without their source
2013-04-05 19:57:11	<--	DMcGill (~DMcGill@cpc9-clif10-2-0-cust206.12-4.cable.virginmedia.com) has quit (Quit: Leaving)
2013-04-05 19:57:38	<--	edeast (~chatzilla@24.114.26.211) has quit (Ping timeout: 255 seconds)
2013-04-05 19:57:44	-->	Ontolog (~ontolog@12.186.229.40) has joined #haskell
2013-04-05 19:57:46	-->	ousado (~ousado@unaffiliated/ousado) has joined #haskell
2013-04-05 19:57:56	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-04-05 19:57:57	root____6	simpson: the TestModule I have written onlly for testing
2013-04-05 19:58:25	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-05 19:58:39	<--	gilbertw1 (~gilbertw1@64.20.30.66) has quit (Quit: Leaving...)
2013-04-05 19:58:51	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-05 19:58:56	simpson	root____6: I'm guessing you're coming from Rails- or Django-land?
2013-04-05 19:59:00	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-05 19:59:30	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-05 19:59:31	root____6	simpson: :) I am java programmer
2013-04-05 19:59:32	<--	robstewartuk (~rob@fluency-gw1.summerhall.co.uk) has left #haskell
2013-04-05 19:59:41	simpson	root____6: Ah.
2013-04-05 19:59:50	--	sellout-1 is now known as sellout
2013-04-05 20:00:10	simpson	Well, this isn't very Haskelly, but best of luck. I can't think of much that will help besides going and reading GHC's docs about those functions.
2013-04-05 20:00:14	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:00:53	-->	tg (~irc@2001:738:2001:2078:0:215:11:82) has joined #haskell
2013-04-05 20:00:55	gentleben	there is a haskell plugins thing floating around somewhere that allows loading
2013-04-05 20:02:48	<--	xj54y (~xj54y@24.56.225.79) has quit (Quit: Leaving.)
2013-04-05 20:03:05	-->	xcombelle (~xcombelle@AToulouse-551-1-119-16.w92-156.abo.wanadoo.fr) has joined #haskell
2013-04-05 20:04:13	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-04-05 20:04:18	lispy	hsplugins
2013-04-05 20:04:28	lispy	(sometimes just known as plugins)
2013-04-05 20:04:47	<--	bos (~bos@173.252.71.129) has quit (Ping timeout: 258 seconds)
2013-04-05 20:05:36	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:05:50	<--	doomlord (~doomlod@host86-145-105-56.range86-145.btcentralplus.com) has quit (Read error: Connection reset by peer)
2013-04-05 20:05:50	tootsie	simpson: why is TCP implemented as a stream and not as packages? if the info is already there, why not use it? what is the advantage of it?7
2013-04-05 20:06:30	simpson	tootsie: I'm not sure what you mean by "packages". Are you talking about datagrams?
2013-04-05 20:06:41	tootsie	yes
2013-04-05 20:06:45	simpson	tootsie: TCP provides a stream because a stream is a useful abstraction.
2013-04-05 20:06:48	geekosaur	I think (a) they mean packets (b) they need to read Stevens
2013-04-05 20:07:05	<--	fgomez (~Fernando@uwsclient-144-29.uws.ualberta.ca) has quit (Ping timeout: 258 seconds)
2013-04-05 20:07:23	<--	skeet70 (~skeet70@newaruba2.msu.montana.edu) has quit (Ping timeout: 246 seconds)
2013-04-05 20:07:57	<--	maltin (~maltin@pisces.uberspace.de) has left #haskell
2013-04-05 20:08:04	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Remote host closed the connection)
2013-04-05 20:08:26	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-04-05 20:09:06	<--	guampa (~guampa@unaffiliated/guampa) has quit
2013-04-05 20:09:43	<--	RichyB (~richardb@rubberductions.plus.com) has quit (Ping timeout: 260 seconds)
2013-04-05 20:09:50	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-04-05 20:10:11	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-05 20:10:41	<--	yacks (~yacks@180.151.36.168) has quit (Max SendQ exceeded)
2013-04-05 20:10:53	-->	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has joined #haskell
2013-04-05 20:10:58	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 256 seconds)
2013-04-05 20:11:23	<--	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-05 20:11:46	-->	tauli (~tauli@e182221028.adsl.alicedsl.de) has joined #haskell
2013-04-05 20:11:58	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:12:17	-->	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has joined #haskell
2013-04-05 20:12:36	-->	fgomez (~Fernando@uwsclient-227-237.uws.ualberta.ca) has joined #haskell
2013-04-05 20:13:23	-->	hmm (62cea665@gateway/web/freenode/ip.98.206.166.101) has joined #haskell
2013-04-05 20:13:34	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-05 20:13:47	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-04-05 20:14:02	-->	gilbertw1 (~gilbertw1@64.20.30.66) has joined #haskell
2013-04-05 20:14:03	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2013-04-05 20:14:09	<--	leoncamel2 (~leoncamel@124.126.171.114) has quit (Ping timeout: 252 seconds)
2013-04-05 20:14:26	<--	hmm (62cea665@gateway/web/freenode/ip.98.206.166.101) has quit (Client Quit)
2013-04-05 20:15:27	--	kryft is now known as ellifft
2013-04-05 20:15:33	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-04-05 20:15:45	-->	Thomyho3 (~thomyho@mnhm-4d011c3e.pool.mediaWays.net) has joined #haskell
2013-04-05 20:16:00	-->	stephenjudkins (~textual@174-25-114-217.ptld.qwest.net) has joined #haskell
2013-04-05 20:16:27	-->	boegel (~boegel@183.244-242-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-04-05 20:17:01	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-05 20:17:38	<--	skchrko (~sk@130.255.129.64) has quit (Quit: .)
2013-04-05 20:18:16	<--	Argue (~Argue@112.209.13.160) has quit (Quit: Leaving)
2013-04-05 20:18:20	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 256 seconds)
2013-04-05 20:18:31	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Ping timeout: 264 seconds)
2013-04-05 20:18:42	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-04-05 20:19:01	-->	doomlord (~doomlod@host86-145-105-56.range86-145.btcentralplus.com) has joined #haskell
2013-04-05 20:19:04	-->	akamaus (~akamaus@176.104.193.228) has joined #haskell
2013-04-05 20:19:27	<--	Ontolog (~ontolog@12.186.229.40) has quit (Remote host closed the connection)
2013-04-05 20:19:42	-->	anRch (~markmilli@ip-64-134-68-164.public.wayport.net) has joined #haskell
2013-04-05 20:19:44	<--	Pranz (~Pranz@h181n2-b2-a31.ias.bredband.telia.com) has quit (Ping timeout: 256 seconds)
2013-04-05 20:21:11	<--	q66 (~q66@213.191.105.214) has quit (Remote host closed the connection)
2013-04-05 20:21:12	<--	osa1 (~omer@176.237.230.236) has quit (Ping timeout: 264 seconds)
2013-04-05 20:21:26	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Ping timeout: 256 seconds)
2013-04-05 20:21:34	-->	Ontolog (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 20:22:03	<--	TheMG (~Sam@host217-42-192-56.range217-42.btcentralplus.com) has left #haskell
2013-04-05 20:22:11	-->	osa1_ (~omer@88.242.150.172) has joined #haskell
2013-04-05 20:22:15	-->	Ontolog_ (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 20:22:31	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-04-05 20:22:37	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-05 20:22:54	-->	rrckrd (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-04-05 20:23:50	-->	Twisol (~Oddlyoko@cpe-76-166-195-41.socal.res.rr.com) has joined #haskell
2013-04-05 20:23:50	<--	Twisol (~Oddlyoko@cpe-76-166-195-41.socal.res.rr.com) has quit (Changing host)
2013-04-05 20:23:50	-->	Twisol (~Oddlyoko@wikia/Oddlyoko) has joined #haskell
2013-04-05 20:25:52	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-04-05 20:26:15	<--	Ontolog (~ontolog@mail1.attinteractive.com) has quit (Ping timeout: 252 seconds)
2013-04-05 20:27:18	<--	osa1_ (~omer@88.242.150.172) has quit (Ping timeout: 276 seconds)
2013-04-05 20:28:07	<--	sellout (~Adium@70.96.9.235) has quit (Quit: Leaving.)
2013-04-05 20:28:43	<--	shutdown_-h_now (~arjan@nova.helix-nebula.org) has quit (Remote host closed the connection)
2013-04-05 20:28:48	<--	dented42 (~dented42@opengroove.org) has quit (Ping timeout: 256 seconds)
2013-04-05 20:28:56	<--	edon (~user@albalug/edon) has quit (Ping timeout: 258 seconds)
2013-04-05 20:29:01	tootsie	http://www.amazon.com/UNIX-Network-Programming-Networking-Sockets/dp/013490012X
2013-04-05 20:29:10	tootsie	geekosaur ^^ that one i assume?
2013-04-05 20:29:33	<--	root____6 (~root@117.195.10.172) has quit (Ping timeout: 252 seconds)
2013-04-05 20:29:44	geekosaur	yes
2013-04-05 20:30:06	geekosaur	although for an overview of concepts instead of programming details you may want TCP/IP Illustrated
2013-04-05 20:30:56	tootsie	tanenbaum any good for learning tcp/ip?
2013-04-05 20:31:16	-->	BobFunk (~mbc@76.14.64.156) has joined #haskell
2013-04-05 20:31:19	-->	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has joined #haskell
2013-04-05 20:32:04	--	pdxleif_away is now known as pdxleif
2013-04-05 20:32:42	-->	hattusili_III (~quassel@black-171-066.rh.uchicago.edu) has joined #haskell
2013-04-05 20:33:26	-->	eikke (~nicolas@78-20-0-121.access.telenet.be) has joined #haskell
2013-04-05 20:33:36	-->	osa1_ (~omer@176.237.230.236) has joined #haskell
2013-04-05 20:33:36	geekosaur	Most of Tanenbaum's stuff is more about designing networking than about details of existing protocols (e.g. original Minix preferred Tanenbaum's own Amoeba protocol to TCP/IP)
2013-04-05 20:33:39	-->	dented42 (~dented42@opengroove.org) has joined #haskell
2013-04-05 20:33:47	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (Excess Flood)
2013-04-05 20:33:48	lispy	if you just need an introduction, Beej is decent: http://beej.us/guide/bgnet/
2013-04-05 20:34:02	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-04-05 20:34:37	-->	shutdown_-h_now (~arjan@nova.helix-nebula.org) has joined #haskell
2013-04-05 20:34:52	-->	stelleg_away (~stelleg@c-174-56-74-242.hsd1.nm.comcast.net) has joined #haskell
2013-04-05 20:35:33	-->	Luke (~lhoersten@160.79.132.254) has joined #haskell
2013-04-05 20:35:50	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-04-05 20:36:19	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-05 20:36:31	<--	BobFunk (~mbc@76.14.64.156) has quit (Ping timeout: 264 seconds)
2013-04-05 20:38:08	<--	takumn (~takumn@KD182249106057.au-net.ne.jp) has quit (Remote host closed the connection)
2013-04-05 20:38:17	-->	joker_89 (~ircap@unaffiliated/joker-89/x-0901110) has joined #haskell
2013-04-05 20:38:24	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:38:34	--	tac-for-lunch is now known as tac
2013-04-05 20:38:43	joker_89	hi i have a tuple (X,Y), how can i apply muy fuction to the both elements of the tuple like (*2)
2013-04-05 20:38:48	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-04-05 20:38:52	joker_89	and the result (2*X,2*Y)
2013-04-05 20:39:36	-->	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has joined #haskell
2013-04-05 20:39:42	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-04-05 20:40:09	glguy	joker_89: just like you wrote. There isn't a standard function for doing that. If you are using the lens library you can use the "both" function
2013-04-05 20:40:32	glguy	?type over both (*2)
2013-04-05 20:40:33	lambdabot	Num b => (b, b) -> (b, b)
2013-04-05 20:40:40	eikke	:t \f (a, b) -> (f a, f b)
2013-04-05 20:40:41	lambdabot	(t -> t1) -> (t, t) -> (t1, t1)
2013-04-05 20:40:52	elliott	or join (***) from Control.Arrow works too
2013-04-05 20:41:07	-->	Franciman (~quassel@host112-163-dynamic.27-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-05 20:41:51	glguy	elliott: if you're writing one-liners for #haskell, at least :-p
2013-04-05 20:42:00	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Remote host closed the connection)
2013-04-05 20:42:01	<--	sambio (~sambio@unaffiliated/sambio) has quit
2013-04-05 20:42:04	elliott	I've defined both = join (***) locally before
2013-04-05 20:42:09	elliott	before lens
2013-04-05 20:42:38	-->	yacks (~yacks@180.151.36.168) has joined #haskell
2013-04-05 20:43:02	<--	grandtheftR (~Adium@4.53.129.190) has quit (Quit: Leaving.)
2013-04-05 20:43:08	<--	mapf (~user@5.254.180.254) has quit (Remote host closed the connection)
2013-04-05 20:43:17	<--	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has quit (Ping timeout: 256 seconds)
2013-04-05 20:43:21	<--	hiroaki (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has quit (Ping timeout: 245 seconds)
2013-04-05 20:43:22	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-04-05 20:43:32	<--	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has quit (Ping timeout: 255 seconds)
2013-04-05 20:43:32	<--	paintcan (~user@66.199.39.230) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-05 20:43:52	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:44:17	-->	trescenzi (~trescenzi@148.100.74.75) has joined #haskell
2013-04-05 20:44:24	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-05 20:45:42	-->	path[l] (~vsi@75-144-16-93-sffolsom.ca.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 20:46:09	-->	Jesin (~Jessin_@Dyn156243.cc.lehigh.edu) has joined #haskell
2013-04-05 20:46:22	<--	[swift] (~swift@75-101-60-167.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-04-05 20:46:34	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-05 20:46:35	-->	hiroaki (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-05 20:47:28	-->	Itkovian (~Itkovian@vpnf010.ugent.be) has joined #haskell
2013-04-05 20:47:43	<--	Zeev (~Zeev@109.67.9.37) has quit (Ping timeout: 258 seconds)
2013-04-05 20:48:21	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-04-05 20:48:45	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 276 seconds)
2013-04-05 20:49:23	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-04-05 20:49:24	<--	trescenzi (~trescenzi@148.100.74.75) has quit (Ping timeout: 276 seconds)
2013-04-05 20:50:08	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 20:51:49	-->	OlegYch (~OlegYch@193.151.42.213) has joined #haskell
2013-04-05 20:52:49	-->	Shou (~Shou@81.191.185.181) has joined #haskell
2013-04-05 20:53:01	<--	anRch (~markmilli@ip-64-134-68-164.public.wayport.net) has quit (Quit: anRch)
2013-04-05 20:53:07	-->	edon (~user@albalug/edon) has joined #haskell
2013-04-05 20:53:36	<--	pzuraq (~pzuraq@eduroam-253-100.ucsc.edu) has quit (Remote host closed the connection)
2013-04-05 20:53:36	-->	Taneb (~nathan@host-92-23-129-213.as13285.net) has joined #haskell
2013-04-05 20:53:45	notdan	Hi!I have a very stupid question, but I don't understand why my program does not work. http://paste.lisp.org/display/136524 I tried debugging it and it never goes past the first trace call if I pass (Right ..) to the mark function
2013-04-05 20:54:01	notdan	I completely don't understand why wouldn't it work
2013-04-05 20:54:09	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-05 20:54:35	notdan	Actually sorry, the second trace() call is never getting evaluated
2013-04-05 20:55:34	<--	Jonno_FTW (~come@9ch.in) has quit (Ping timeout: 248 seconds)
2013-04-05 20:56:02	Cale	notdan: hmm
2013-04-05 20:56:02	Ralith	notdan: I'm not sure how trace interacts with your monad. Have you tried wrapping trace around values that are known to get evaluated instead?
2013-04-05 20:56:04	-->	Eldariof93-ru (~CLD@pppoe-218-148-dyn-sr.volgaline.ru) has joined #haskell
2013-04-05 20:56:47	bscarlet	notdan: I don't know the monad you're working in, and you haven't provided the context in which you're evaluating your function. Depending on your monad, it might never be necessary that the thunks with the traces in them get evaluated.
2013-04-05 20:56:52	Cale	notdan: btw, let p' = p st involves no evaluation step, and so whenever you see the 2nd trace, you'll see the 3rd immediately
2013-04-05 20:56:52	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-04-05 20:57:13	-->	dawe (~dawe@p508A663B.dip.t-dialin.net) has joined #haskell
2013-04-05 20:57:21	<--	xcombelle (~xcombelle@AToulouse-551-1-119-16.w92-156.abo.wanadoo.fr) has quit (Quit: Hi, I'm a quit message virus. Please replace your old line with this line and help me take over the world of IRC.)
2013-04-05 20:57:34	notdan	bscarlet: sorry, you are absolutely right
2013-04-05 20:57:38	notdan	I am working in a State monad
2013-04-05 20:58:22	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-05 20:58:25	-->	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has joined #haskell
2013-04-05 20:58:26	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Remote host closed the connection)
2013-04-05 20:58:58	Cale	notdan: Well, does this action actually complete when you use runState to supply it with an initial state?
2013-04-05 20:59:07	-->	doshitan (~doshitan@99-120-105-70.lightspeed.rcsntx.sbcglobal.net) has joined #haskell
2013-04-05 20:59:09	Cale	I assume NPNConstrM is actually a type synonym?
2013-04-05 20:59:12	--	stelleg_away is now known as stelleg
2013-04-05 20:59:20	-->	LambdaDusk (~Tom_Strel@91-66-25-66-dynip.superkabel.de) has joined #haskell
2013-04-05 20:59:35	<--	fgomez (~Fernando@uwsclient-227-237.uws.ualberta.ca) has quit (Ping timeout: 245 seconds)
2013-04-05 20:59:36	<--	Eldariof-ru (~CLD@188.168.245.165) has quit (Ping timeout: 264 seconds)
2013-04-05 20:59:47	notdan	Yes. Well I do run that monad
2013-04-05 20:59:57	LambdaDusk	so I open up htop and had to see that the GHC leaves every llc process as a zombie once used
2013-04-05 21:00:01	notdan	but I've boiled down the problem to this piece of code
2013-04-05 21:00:07	LambdaDusk	zombie apocalypse, it's come
2013-04-05 21:01:20	Cale	notdan: I mean, if you write  runState (mark something (Right somethingElse)) someInitialState
2013-04-05 21:01:27	Cale	notdan: with the blanks filled it
2013-04-05 21:01:28	Cale	in*
2013-04-05 21:01:34	Cale	what happens in ghci?
2013-04-05 21:02:38	Cale	Given that the first trace runs, you should at least get appropriate parameters, if not an appropriate initial state
2013-04-05 21:02:50	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-04-05 21:02:55	Cale	I honestly don't see how this code could be problematic on its own
2013-04-05 21:03:06	<--	cmsmcq (~cmsmcq@65.19.20.185) has quit (Ping timeout: 256 seconds)
2013-04-05 21:04:18	Cale	However, building up a map like this could result in some shitty performance when you finally take the map out and you have a million inserts to calculate before you can look up whatever it is, assuming that you never do lookups while the algorithm builds it.
2013-04-05 21:04:57	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 21:05:06	Cale	(stack overflows could happen at that point, and in the meantime, multiple inserts to the same key will build up on the heap)
2013-04-05 21:05:17	-->	araujo (~araujo@190.73.45.171) has joined #haskell
2013-04-05 21:05:18	<--	araujo (~araujo@190.73.45.171) has quit (Changing host)
2013-04-05 21:05:18	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-04-05 21:05:29	Cale	But that's mostly performance related stuff
2013-04-05 21:05:44	Cale	rather than "the program stops running without a message here" stuff
2013-04-05 21:05:59	-->	Ontolog (~ontolog@mail1.attinteractive.com) has joined #haskell
2013-04-05 21:06:06	notdan	Yeah, you are right
2013-04-05 21:06:20	notdan	I keep forgetting about the downsides of non-strict evaluation
2013-04-05 21:06:36	Cale	It's mostly okay if you're aware of it :)
2013-04-05 21:06:41	notdan	I guess I have to add strictness annotations to the 'put' thing?
2013-04-05 21:07:00	notdan	I am actually terrible at understanding how Haskell evaluation works
2013-04-05 21:07:01	Cale	yeah, you could even just p' `seq` put ...
2013-04-05 21:07:11	notdan	I know it's more complicated than call-by-name
2013-04-05 21:07:25	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-04-05 21:07:50	monochrom	it is not more complicated than call-by-name. unless, "complicated" is subjective
2013-04-05 21:07:55	Cale	which will at least force the Map to be evaluated, which since Map is strict in the keys, will force the inserts to actually be evaluated
2013-04-05 21:08:22	<--	Eldariof93-ru (~CLD@pppoe-218-148-dyn-sr.volgaline.ru) has quit (Read error: Operation timed out)
2013-04-05 21:09:11	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 258 seconds)
2013-04-05 21:09:13	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-04-05 21:09:20	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-05 21:09:21	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-05 21:09:23	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-04-05 21:09:45	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-05 21:09:51	-->	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-04-05 21:09:54	<--	Ontolog_ (~ontolog@mail1.attinteractive.com) has quit (Ping timeout: 256 seconds)
2013-04-05 21:11:53	-->	dylukes (~dylukes@c-98-236-69-114.hsd1.pa.comcast.net) has joined #haskell
2013-04-05 21:12:01	monochrom	call-by-name is an adequate assumption, until you have to ask:
2013-04-05 21:12:04	-->	Paprikac_ (~Paprikach@bcn52.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 21:12:07	monochrom	in "x = 0 : x" and "print (take 10 x)", does it generate 10 cons cells (and discards them right away), or 1 cons cell.
2013-04-05 21:12:09	-->	cmsmcq (~cmsmcq@65.19.20.185) has joined #haskell
2013-04-05 21:12:10	<--	SHODAN (~shozan@c-08b7e253.011-86-73746f30.cust.bredbandsbolaget.se) has quit (Quit: No Ping reply in 180 seconds.)
2013-04-05 21:12:15	-->	SHODAN (~shozan@c-08b7e253.011-86-73746f30.cust.bredbandsbolaget.se) has joined #haskell
2013-04-05 21:12:15	<--	adek (~adek@5.134.64.87) has quit (Ping timeout: 258 seconds)
2013-04-05 21:13:28	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-04-05 21:13:40	<--	fro0t (~fro0t@1.23.67.157) has quit (Ping timeout: 256 seconds)
2013-04-05 21:13:47	-->	Eldariof93-ru (~CLD@pppoe-215-183-dyn-sr.volgaline.ru) has joined #haskell
2013-04-05 21:13:48	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-05 21:13:53	<--	Paprikachu (~Paprikach@bcn52.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 256 seconds)
2013-04-05 21:13:59	<--	LambdaDusk (~Tom_Strel@91-66-25-66-dynip.superkabel.de) has left #haskell
2013-04-05 21:15:34	<--	mcstar (~mcstar@adsl-89-132-22-75.monradsl.monornet.hu) has quit (Quit: mcstar)
2013-04-05 21:17:50	<--	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-04-05 21:17:55	-->	etehtsea (~textual@188.134.44.6) has joined #haskell
2013-04-05 21:18:29	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 248 seconds)
2013-04-05 21:21:05	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-04-05 21:21:35	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-04-05 21:22:32	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-04-05 21:22:42	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-05 21:23:46	<--	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has quit (Quit: Rated M for MANLY)
2013-04-05 21:24:00	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-04-05 21:24:42	-->	plucas (~plucas@c-24-98-196-250.hsd1.ga.comcast.net) has joined #haskell
2013-04-05 21:26:03	nexx	Is proudness about "side-effect-free-free" the "I'm proud that I cannot calculate" of programmers? https://github.com/hayeah/rantly
2013-04-05 21:26:18	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-05 21:26:21	-->	ymasory (~ymasory@c-98-234-180-76.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 21:26:22	<--	inarenvi (~quassel@90.173.200.241) has quit (Ping timeout: 256 seconds)
2013-04-05 21:27:00	Eelis	nexx: heh
2013-04-05 21:27:10	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-05 21:27:44	Philonous	nexx:  I think he's joking
2013-04-05 21:27:51	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-04-05 21:28:25	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-04-05 21:28:47	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-05 21:29:20	-->	trescenzi (~trescenzi@2620:91:0:163:7144:1ba3:839d:c2b3) has joined #haskell
2013-04-05 21:29:22	<--	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has quit (Ping timeout: 256 seconds)
2013-04-05 21:29:30	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-04-05 21:29:37	-->	inarenvi (~quassel@92.59.136.101) has joined #haskell
2013-04-05 21:29:51	-->	William_ (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has joined #haskell
2013-04-05 21:30:57	-->	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has joined #haskell
2013-04-05 21:31:10	hiptobecubic	I don't know, it seems like something that someone who doesn't do "alien mathematics" would say
2013-04-05 21:31:14	-->	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has joined #haskell
2013-04-05 21:31:18	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Quit: leaving)
2013-04-05 21:31:18	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-05 21:31:19	-->	Xaratas (~Nick@brln-4d0ce9e8.pool.mediaWays.net) has joined #haskell
2013-04-05 21:31:40	-->	k0001 (~k0001@host22.200-117-32.telecom.net.ar) has joined #haskell
2013-04-05 21:31:47	nexx	I think it is intended to be funny but also to be true
2013-04-05 21:32:17	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-05 21:32:24	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 21:32:25	nexx	at least sort of
2013-04-05 21:32:40	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-05 21:33:23	<--	alanz (~alanz@105-236-193-59.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-04-05 21:34:04	<--	bos (~bos@2620:0:1cfe:28:3e07:54ff:fe06:a85e) has quit (Remote host closed the connection)
2013-04-05 21:34:20	-->	Rogach (uid6398@gateway/web/irccloud.com/x-dcibfekjicbaevhk) has joined #haskell
2013-04-05 21:34:29	hiptobecubic	I think it's right in line with the usual sentiment of "Immutability is great and all, but some of us need to actually write real programs that actually do things," that is so popular.
2013-04-05 21:34:31	<--	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-05 21:34:45	Rogach	Hello! Is there some cli arg to ghci, that will permit me to :load some file automatically?
2013-04-05 21:34:57	hiptobecubic	Rogach, ghci <file>
2013-04-05 21:35:00	<--	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has quit (Ping timeout: 245 seconds)
2013-04-05 21:35:12	-->	BobFunk (~mbc@24.130.34.248) has joined #haskell
2013-04-05 21:35:38	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Ping timeout: 258 seconds)
2013-04-05 21:35:44	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-04-05 21:35:46	-->	heruur (~tvh@2a00:12d0:a100:9f01:70a8:87ac:5253:641b) has joined #haskell
2013-04-05 21:36:04	Rogach	hiptobecubic: Thanks!
2013-04-05 21:36:13	hiptobecubic	Rogach, you're welcome.
2013-04-05 21:36:26	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Read error: Connection reset by peer)
2013-04-05 21:36:50	pala2	I'm currently learning about η-conversion: http://en.wikipedia.org/wiki/Lambda_calculus#.CE.B7-conversion . But I don't get what it means, that "x must not be a free variable in f"?  What about this example: λx. x  and  λx. f z x   η-equivalent?
2013-04-05 21:37:01	-->	augur (~augur@129-2-129-34.wireless.umd.edu) has joined #haskell
2013-04-05 21:37:05	__xc	is it possible to do some evaluations over (in)finite set: like x = x^2 on [0,1]
2013-04-05 21:37:09	-->	smerz (~smerz@a177088.upc-a.chello.nl) has joined #haskell
2013-04-05 21:37:11	<--	k00mi (~koomi@24.134.205.36) has quit (Read error: Connection reset by peer)
2013-04-05 21:37:22	__xc	hmm any
2013-04-05 21:37:27	__xc	:t any
2013-04-05 21:37:28	hiptobecubic	pala2, if it's free that means it's not the argument
2013-04-05 21:37:28	lambdabot	(a -> Bool) -> [a] -> Bool
2013-04-05 21:37:44	simpson	__xc: Well, what makes this different from a map?
2013-04-05 21:37:49	hiptobecubic	pala2, \x.xy  has y free, for example
2013-04-05 21:38:01	simpson	> map (\x -> x * x) [0..] -- __xc
2013-04-05 21:38:03	lambdabot	  [0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,...
2013-04-05 21:38:11	__xc	simpson, and fold it at the end with &
2013-04-05 21:38:30	__xc	yes was thinking with Boolean return
2013-04-05 21:38:45	simpson	__xc: Oh.
2013-04-05 21:38:50	__xc	'predicate'
2013-04-05 21:38:52	Xaratas	I have a function like this: if something then return a list else return an empty list for type correctness, is there a common way to modify such cases? currently i would throw away the empty lists with a filter, but i would feel better not to generate them at all
2013-04-05 21:38:57	__xc	if it's the right term
2013-04-05 21:39:00	quchen	> any (> 10) [0..]
2013-04-05 21:39:02	lambdabot	  True
2013-04-05 21:39:06	hiptobecubic	__xc, if you're asking for an enumeration of an uncountably infinite set like [0,1], then I don't think haskell is your biggest problem.
2013-04-05 21:39:09	simpson	> any odd [0..]
2013-04-05 21:39:11	lambdabot	  True
2013-04-05 21:39:36	-->	ijp` (~user@host86-184-183-5.range86-184.btcentralplus.com) has joined #haskell
2013-04-05 21:39:46	<--	jyp (~jyp@58.149.168.130) has quit (Remote host closed the connection)
2013-04-05 21:39:53	<--	gridaphobe (~gridaphob@128.54.43.6) has quit (Remote host closed the connection)
2013-04-05 21:40:20	pala2	hiptobecubic: And where I know that f is binding x in my example? f isn't defined anywhere...
2013-04-05 21:40:58	__xc	something like "each (\x -> (x < x+1) [0..]"
2013-04-05 21:41:16	<--	joker_89 (~ircap@unaffiliated/joker-89/x-0901110) has quit (Quit:  IRcap  8.6 )
2013-04-05 21:41:39	tootsie	the type IO () cant be assigned right? like a <- someIO()_returning_function ?
2013-04-05 21:41:41	quchen	That won't terminate.
2013-04-05 21:41:55	-->	k00mi (~koomi@24.134.205.36) has joined #haskell
2013-04-05 21:42:01	hiptobecubic	pala2, your example is  \x.(f z) x, because it associates to the left. So it's equivalent to just (f z) i think.
2013-04-05 21:42:09	<--	ijp (~user@host109-151-48-114.range109-151.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-04-05 21:42:42	Cale	tootsie: If you have an IO action of type IO (IO Integer), and you run it, then the result will have type IO Integer
2013-04-05 21:42:43	quchen	tootsie: You can do that. IO is just some monad like all the others.
2013-04-05 21:42:47	simpson	tootsie: You can certainly draw from IO (), but you're just gonna get a ().
2013-04-05 21:42:51	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 21:42:52	quchen	It's special on the inside.
2013-04-05 21:43:03	<--	heruur (~tvh@2a00:12d0:a100:9f01:70a8:87ac:5253:641b) has quit (Quit: Leaving.)
2013-04-05 21:43:04	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-04-05 21:43:12	__xc	> fold (&) $ any (>0) [1..10]
2013-04-05 21:43:14	lambdabot	  Couldn't match expected type `a0 -> b0'
2013-04-05 21:43:14	lambdabot	             with actual type `GHC....
2013-04-05 21:43:14	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-04-05 21:43:18	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-04-05 21:43:29	-->	skeet70 (~skeet70@153.90.102.200) has joined #haskell
2013-04-05 21:43:37	hiptobecubic	__xc, any returns a bool. you cannot fold over that.
2013-04-05 21:43:37	__xc	> fold (&) $ map (>0) [1..10]
2013-04-05 21:43:39	lambdabot	  Couldn't match expected type `a0 -> b0' with actual type `[b1]'
2013-04-05 21:43:48	Cale	tootsie: If you have a function which produces an IO action, of type IO (), then you can apply it to parameters and run the resulting value of type IO (), and you'll get an empty tuple as the result.
2013-04-05 21:43:52	__xc	yes ouch
2013-04-05 21:44:02	-->	ozgura (~ozgura@host-89-240-254-213.as13285.net) has joined #haskell
2013-04-05 21:44:07	hiptobecubic	:t fold
2013-04-05 21:44:08	lambdabot	(Foldable t, Monoid m) => t m -> m
2013-04-05 21:44:17	simpson	:t and
2013-04-05 21:44:19	lambdabot	[Bool] -> Bool
2013-04-05 21:44:21	-->	typoclass (~typoclass@p4FC93C10.dip.t-dialin.net) has joined #haskell
2013-04-05 21:44:32	ab9rf	vots all dis?
2013-04-05 21:44:41	simpson	> and $ map (< 10) [0..]
2013-04-05 21:44:42	lambdabot	  False
2013-04-05 21:44:44	hiptobecubic	> fold (words "Here we go!")
2013-04-05 21:44:45	lambdabot	  "Herewego!"
2013-04-05 21:44:48	ab9rf	@src and
2013-04-05 21:44:48	simpson	__xc: ^^
2013-04-05 21:44:48	lambdabot	and   =  foldr (&&) True
2013-04-05 21:45:12	-->	heruur (~tvh@143-159-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-05 21:45:17	tootsie	to use UDP i just create a socket and then use send sock addr ?
2013-04-05 21:45:27	__xc	> fold (+) [1,2,3,4,5]
2013-04-05 21:45:29	lambdabot	  No instances for (GHC.Num.Num [t0],
2013-04-05 21:45:29	lambdabot	                   Data.Foldable.Foldab...
2013-04-05 21:45:40	__xc	wtf it's the example http://www.haskell.org/haskellwiki/Fold
2013-04-05 21:45:50	ab9rf	__xc: fold only takes one argument
2013-04-05 21:46:10	__xc	hmm
2013-04-05 21:46:35	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-05 21:46:36	hiptobecubic	__xc, fold assumes you have a monoid in a traversable data structure. Monoids, by definition, already have their (+) defined, it wouldn't make sense to pass it in again.
2013-04-05 21:46:41	quchen	> fold (Just 1)
2013-04-05 21:46:43	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-05 21:46:43	lambdabot	   (GHC.Num.Num a0)
2013-04-05 21:46:43	lambdabot	     a...
2013-04-05 21:46:57	hiptobecubic	Numbers can be monoids in more than one way
2013-04-05 21:46:57	<--	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has quit (Read error: Connection reset by peer)
2013-04-05 21:47:06	quchen	Yeah :-(
2013-04-05 21:47:07	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 252 seconds)
2013-04-05 21:47:08	hiptobecubic	fold (map Sum [0..10])
2013-04-05 21:47:09	hiptobecubic	fold (map Sum [0..10])
2013-04-05 21:47:15	hiptobecubic	> fold (map Sum [0..10]) -- oops :)
2013-04-05 21:47:17	lambdabot	  Sum {getSum = 55}
2013-04-05 21:47:18	quchen	> fold (Just (Sum 1))
2013-04-05 21:47:19	lambdabot	  Sum {getSum = 1}
2013-04-05 21:47:22	-->	takumn (~takumn@pa3ac68.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-04-05 21:47:29	__xc	:t foldl
2013-04-05 21:47:30	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-04-05 21:47:49	hiptobecubic	__xc, there is a *great* package called simplereflect to help you visualize this stuff
2013-04-05 21:47:59	__xc	k
2013-04-05 21:48:07	hiptobecubic	> foldr f 0 [x,y,z]
2013-04-05 21:48:09	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-05 21:48:09	lambdabot	   (GHC.Num.Num a0)
2013-04-05 21:48:09	lambdabot	     a...
2013-04-05 21:48:13	hiptobecubic	damnit. :D
2013-04-05 21:48:22	hiptobecubic	> foldr f 0 [x,y,z] :: Expr   --crosses fingers
2013-04-05 21:48:24	lambdabot	  f x (f y (f z 0))
2013-04-05 21:48:28	osa1_	is there a toList function for IOVector ?
2013-04-05 21:48:31	hiptobecubic	there we go.
2013-04-05 21:48:39	__xc	http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29 is not bad maybe also
2013-04-05 21:49:05	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 21:49:13	hiptobecubic	ah yes. Are those Cale's diagrams?
2013-04-05 21:49:31	-->	LambdaDusk (~Tom_Strel@91-66-25-66-dynip.superkabel.de) has joined #haskell
2013-04-05 21:49:50	-->	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has joined #haskell
2013-04-05 21:49:50	-->	dmj (~user@wireless-219-200.uchicago.edu) has joined #haskell
2013-04-05 21:49:56	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-04-05 21:50:01	LambdaDusk	anyone knows of a pre-built ghc-7.6 for the raspberry?
2013-04-05 21:50:14	quchen	LambdaDusk: Nope.
2013-04-05 21:50:19	dmj	How do I import modules into an .lhs file? like import Data.Char (isLower)
2013-04-05 21:50:23	quchen	LambdaDusk: Gave up and used Raspbian's 7.4.1
2013-04-05 21:50:54	hiptobecubic	dmj, the same way you do anything in an lhs file i think
2013-04-05 21:51:02	<--	nuttycom1 (~Adium@70-91-169-68-BusName-Colorado.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-04-05 21:51:12	hiptobecubic	If i recall, ghc just throws out the parts that aren't code and then runs it normally
2013-04-05 21:51:55	<--	Maarten_ (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has quit (Quit: Maarten_)
2013-04-05 21:52:29	-->	sambio (~sambio@unaffiliated/sambio) has joined #haskell
2013-04-05 21:52:37	<--	crs_ (~crs_@192.210.215.64) has quit (Ping timeout: 256 seconds)
2013-04-05 21:53:09	<--	skeet70 (~skeet70@153.90.102.200) has quit (Quit: Computer has gone to sleep.)
2013-04-05 21:53:12	LambdaDusk	quchen: Which lacks ghci
2013-04-05 21:53:28	-->	bgamari (~bgamari@pool-72-79-233-211.spfdma.east.verizon.net) has joined #haskell
2013-04-05 21:53:29	LambdaDusk	quchen: which seems to come wiht 7.4.2
2013-04-05 21:53:31	-->	grandtheftR (~Adium@4.53.129.190) has joined #haskell
2013-04-05 21:53:31	<--	sepp2k (~hungerec@pcclt11.isp.uni-luebeck.de) has quit (Remote host closed the connection)
2013-04-05 21:53:33	quchen	LambdaDusk: Yes.
2013-04-05 21:53:43	quchen	LambdaDusk: Why do you need GHCi though?
2013-04-05 21:54:01	quchen	You'd hardly develop on the RasPi directly would you
2013-04-05 21:54:09	dmj	hiptobecubic: In the .lhs I do \begin{code} import Data.List (isLower) countLower = length . filter isLower \end{code}
2013-04-05 21:54:18	LambdaDusk	quchen: then profunctors packages says "no dice without ghci, sucker"
2013-04-05 21:54:23	quchen	Write a scp script and let that do the deployment
2013-04-05 21:54:34	dmj	"Not in scope 'isLower'"
2013-04-05 21:54:35	quchen	LambdaDusk: Oh.
2013-04-05 21:54:46	dmwit	dmj: isLower is in Data.Char, not Data.List
2013-04-05 21:55:07	LambdaDusk	quchen: also I for some reason prefer to compile on the target machine
2013-04-05 21:55:10	-->	Feuerbach (~feuerbach@80.90.234.112) has joined #haskell
2013-04-05 21:55:31	hiptobecubic	dmj, this is a nice resource:  http://holumbus.fh-wedel.de/hayoo/hayoo.html?query=isLower
2013-04-05 21:55:32	dmj	dmwit: Sorry about that yea, I have it in Data.Char. I get now "parse error on import"
2013-04-05 21:55:34	-->	IcePenance (~IcePenanc@50.23.115.104-static.reverse.softlayer.com) has joined #haskell
2013-04-05 21:55:41	<--	nilg (~user@ALagny-551-1-81-112.w90-35.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-04-05 21:55:43	-->	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-04-05 21:55:53	dmj	don't all imprts have to be at the top and below the module declaration?
2013-04-05 21:55:56	dmwit	dmj: Paste a complete file to hpaste. What you wrote there works for me, after inserting newlines.
2013-04-05 21:55:57	quchen	LambdaDusk: Oh sure you compile on the raspi
2013-04-05 21:55:59	dmwit	?hpaste
2013-04-05 21:56:00	lambdabot	Haskell pastebin: http://hpaste.org/
2013-04-05 21:56:15	quchen	LambdaDusk: But you can develop locally and then upload+compile
2013-04-05 21:56:20	dmj	lol I know isLower is in Data.Char. I just don't know how .lhs files work
2013-04-05 21:56:33	quchen	LambdaDusk: That or get GHC to compile on the RasPi :\
2013-04-05 21:56:45	-->	jrajav (~jrajav@198.179.137.210) has joined #haskell
2013-04-05 21:57:01	tgeeky	dmj: literate haskell essentially ignores everything not in bird tracks >
2013-04-05 21:57:17	dmwit	tgeeky: or \begin{code}/\end{code}
2013-04-05 21:57:28	tgeeky	dmwit: ^ yes, that too, which I forget.
2013-04-05 21:57:32	tgeeky	dmj: ^
2013-04-05 21:57:34	LambdaDusk	quchen: Am doing that now... it's been on it for 2 hours but it is almost done with the first package
2013-04-05 21:58:01	quchen	LambdaDusk: Haha. Make sure to tell me how long it took :D
2013-04-05 21:58:01	LambdaDusk	and it leaves llc as zombies
2013-04-05 21:58:03	-->	bashyal (~bashyal@ec2-54-245-100-167.us-west-2.compute.amazonaws.com) has joined #haskell
2013-04-05 21:58:10	quchen	Afterwards: compile platform
2013-04-05 21:58:19	quchen	And Lens :D
2013-04-05 21:58:20	dmj	tgeeky: Do .lhs files need to imports at the top of the file or can your intersperse throughout the file?
2013-04-05 21:58:22	<--	heruur (~tvh@143-159-103-86.dynamic.dsl.tng.de) has quit (Ping timeout: 245 seconds)
2013-04-05 21:58:37	dmwit	dmj: .lhs files have the same rules as .hs ones in that regard.
2013-04-05 21:58:38	dmj	I assume at the top
2013-04-05 21:58:47	dmj	dmwit: k thanks
2013-04-05 21:58:54	dmwit	dmj: .lhs files have all the same rules for everything as .hs files; except that where the code occurs must be in code blocks or bird tracks.
2013-04-05 21:58:54	<--	morazow (~morazow@gsd114.gsd.inesc-id.pt) has quit (Ping timeout: 256 seconds)
2013-04-05 21:58:56	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-05 21:59:10	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-05 21:59:21	tootsie	i understand udp is unreliable over the internet but what about a closed environment? sure it doesnt guarantee deliviery which sound adangerous fro critical applications but lets say you have some closed industrial network, could you reliably just use UDP then?
2013-04-05 21:59:23	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 260 seconds)
2013-04-05 21:59:54	--	ijp` is now known as ijp
2013-04-05 22:00:01	-->	BigTom (~bigtom@22.85-246-213.ippool.namesco.net) has joined #haskell
2013-04-05 22:00:38	stephenjudkins	tootsie: unsure why this question is here, but packet loss is critical for congestion control. ethernet is designed to drop packets; dropped packets are the only way TCP knows to back off.
2013-04-05 22:00:44	LambdaDusk	quchen: after it went through cabal just now, it seems good
2013-04-05 22:00:48	-->	Guest80285 (~crs_@192.210.215.64) has joined #haskell
2013-04-05 22:00:48	dmj	> :i (&&)
2013-04-05 22:00:50	lambdabot	  <hint>:1:1: parse error on input `:'
2013-04-05 22:01:04	dmwit	\bot doesn't have an analog to :i.
2013-04-05 22:01:10	-->	adzeitor (~adzeitor@31.207.159.115) has joined #haskell
2013-04-05 22:01:29	simpson	tootsie: *Because* UDP is not guaranteed, your kernel is probably prepared to drop UDP traffic if it has too many packets waiting to leave.
2013-04-05 22:01:31	-->	yogurt_truck (~yogurt_tr@190.191.224.63) has joined #haskell
2013-04-05 22:01:41	simpson	tootsie: UDP is never reliable.
2013-04-05 22:01:59	<--	William_ (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has quit (Quit: Leaving)
2013-04-05 22:02:12	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2013-04-05 22:02:27	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: leaving)
2013-04-05 22:02:31	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-05 22:03:43	LambdaDusk	quchen I actually do all this to find out  if GLFW can start a gl app without X
2013-04-05 22:04:01	typoclass	tootsie: it depends on your application. if you can stand losing a few packets, udp is a choice. (suppose it has to do with updating a value every second, and suppose it's no big deal if some updates are lost, it'll just mean that the displayed value momentarily is a little older than usual)
2013-04-05 22:04:35	__xc	> foldl (++) "" "haskell"
2013-04-05 22:04:37	lambdabot	  Couldn't match expected type `[GHC.Types.Char]'
2013-04-05 22:04:37	lambdabot	             with actual ty...
2013-04-05 22:04:48	typoclass	tootsie: it's different if you're loading a web page or a zip file over http, you wouldn't want to lose some parts at the beginning, because then the entire file would be corrupted
2013-04-05 22:04:51	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-04-05 22:04:52	sproingie	stephenjudkins: tcp can lower window sizes and delay acks to back off as well
2013-04-05 22:04:56	geekosaur	streaming is a good exple, usually more important to stay in sync than to lose some packets
2013-04-05 22:05:06	tootsie	ok, ty. so i was told in school, and i probably misunderstood, by a gang of programmers working as consultants(they were here to talk about working as an engineer) that they were usign UDP as a protocol for an application where they were steering a wagon load things in and out of a factory. Sounds like a poor match...?
2013-04-05 22:05:23	sproingie	i wouldn't design an industrial control protocol on UDP, no
2013-04-05 22:05:29	__xc	> foldl (++) [""] "haskell"
2013-04-05 22:05:30	lambdabot	  Couldn't match expected type `[[GHC.Types.Char]]'
2013-04-05 22:05:30	lambdabot	             with actual ...
2013-04-05 22:05:31	sproingie	not without reinventing all the reliability mechanisms of TCP
2013-04-05 22:05:46	typoclass	tootsie: who knows what they were doing ...
2013-04-05 22:06:02	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 256 seconds)
2013-04-05 22:06:05	geekosaur	it depends. you probably want to flush any buffered stuff in that case, which tcp won't do
2013-04-05 22:06:15	<--	ramkrsna (ramkrsna@unaffiliated/ramkrsna) has quit (Quit: Leaving)
2013-04-05 22:06:22	sproingie	SCTP would be pretty ideal but it seems to have gone nowhere
2013-04-05 22:06:38	hiptobecubic	:t (++)
2013-04-05 22:06:39	lambdabot	Monoid m => m -> m -> m
2013-04-05 22:06:42	<--	hrehf (~s@p4FE3B029.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-04-05 22:06:42	hiptobecubic	ugh
2013-04-05 22:06:47	sproingie	caleskell
2013-04-05 22:06:47	quchen	Nope.avi
2013-04-05 22:07:09	stephenjudkins	sproingie: true. but unless I am mistaken, if a TCP connection has negotiated a certain speed, then the connection becomes more congested, dropped packets are necessary for the connection to renegotiate down.
2013-04-05 22:07:11	LambdaDusk	@vixen
2013-04-05 22:07:11	lambdabot	Politics would be a helluva good business if it weren't for the goddamned people.
2013-04-05 22:07:24	typoclass	tootsie: imho, the key thing is that the protocol is designed for it. geekosaur brought up streaming video or audio. if the video thingy is designed to handle lost packets, then great, run it over udp
2013-04-05 22:07:24	hiptobecubic	__xc, you are folding over a string there
2013-04-05 22:07:25	LambdaDusk	meh
2013-04-05 22:07:33	sproingie	stephenjudkins: there's also ECN, though it's hard to rely on that
2013-04-05 22:07:35	hiptobecubic	__xc, so the arguments to (++) will be....?
2013-04-05 22:07:44	tootsie	ok,ty
2013-04-05 22:07:51	-->	jfischoff (~jfischoff@108-218-104-77.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-05 22:08:03	stephenjudkins	the bittorrent folks had issues with TCP, so they wrote their own reliable, ordered protocol layered on top of UDP: http://en.wikipedia.org/wiki/Micro_Transport_Protocol
2013-04-05 22:08:17	-->	message144 (~message14@pool-71-119-66-69.lsanca.fios.verizon.net) has joined #haskell
2013-04-05 22:08:17	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-04-05 22:08:38	sproingie	there's nothing wrong with making new protocols on top of UDP, just make sure that what you're reinventing isn't TCP
2013-04-05 22:08:45	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 22:08:46	<--	Zenol (~zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-04-05 22:09:01	stephenjudkins	sproingie: or that you have a very good understand of why TCP isn't the right choice for you, and how you would do it better.
2013-04-05 22:09:07	pala2	hiptobecubic: hmmm.... What about if we let f=\z.(1+x)?   x is a free variable here then. So there is a special f for which my example ["λx. x  and  λx. f z x   η-equivalent?"] isn't η-equivalent?
2013-04-05 22:09:08	__xc	 > foldl (flip cons) [] "haskell"
2013-04-05 22:09:09	sproingie	i suspect the BT folks could have done fine with TCP on some platforms, but not others
2013-04-05 22:09:21	__xc	> foldl (flip cons) [] "haskell"
2013-04-05 22:09:22	lambdabot	  "lleksah"
2013-04-05 22:09:29	hiptobecubic	pala2, that's a different x
2013-04-05 22:09:33	__xc	(reverse..)
2013-04-05 22:09:34	<--	dmj (~user@wireless-219-200.uchicago.edu) has quit (Ping timeout: 245 seconds)
2013-04-05 22:09:54	hiptobecubic	pala2, oh i see what you're doing.
2013-04-05 22:10:18	stephenjudkins	i'd love to see a TCP stack implemented in a relatively pure FP language
2013-04-05 22:10:22	sproingie	stephenjudkins: usually the problem is approached with all the intellectual rigor of a minecraft hacker
2013-04-05 22:10:35	simpson	sproingie: I resent that.
2013-04-05 22:10:35	hiptobecubic	pala2, that's what they mean when they say "does not appear free"
2013-04-05 22:10:38	sproingie	"TCP is slow LOL"
2013-04-05 22:10:45	hiptobecubic	pala2, in that example. x appears free in f
2013-04-05 22:10:59	hiptobecubic	pala2, so (f z) will not be equivalent to \x. f z x
2013-04-05 22:11:03	stephenjudkins	of course galois did it: http://hackage.haskell.org/package/hans
2013-04-05 22:11:06	hiptobecubic	because that x changes f
2013-04-05 22:11:17	<--	stephenjudkins (~textual@174-25-114-217.ptld.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-04-05 22:11:18	__xc	hiptobecubic, well for foldl ok, but if I make foldr works on "haskell" the I will start to understand better
2013-04-05 22:11:36	quchen	> foldr (:) [] "haskell"
2013-04-05 22:11:36	-->	gridaphobe (~gridaphob@128.54.43.6) has joined #haskell
2013-04-05 22:11:38	lambdabot	  "haskell"
2013-04-05 22:11:38	sproingie	simpson: hey if you're a minecraft hacker, i suspect you're even more keenly aware of the median skill of much of the community
2013-04-05 22:11:51	__xc	quchen, damn you
2013-04-05 22:11:53	--	Watcher7|off is now known as Watcher7
2013-04-05 22:11:57	__xc	;)
2013-04-05 22:12:07	sproingie	simpson: this channel would i suspect self-select above the median
2013-04-05 22:12:16	quchen	__xc: It's not a very spectacular thing to do ;-)
2013-04-05 22:12:21	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-04-05 22:12:25	quchen	Sorry, didn't think I'd spoil something with that
2013-04-05 22:13:02	hiptobecubic	__xc, you could try to implement foldl with foldr.
2013-04-05 22:13:04	<--	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has quit (Read error: Connection reset by peer)
2013-04-05 22:13:15	simpson	sproingie: I wrote Bravo and it has haunted me ever since. :3
2013-04-05 22:13:25	typoclass	sproingie: yes, but everyone thinks they are hugely better than the median
2013-04-05 22:13:26	__xc	@src foldr
2013-04-05 22:13:26	lambdabot	foldr f z []     = z
2013-04-05 22:13:27	lambdabot	foldr f z (x:xs) = f x (foldr f z xs)
2013-04-05 22:13:30	hiptobecubic	but that's relatively a difficult one, I think.
2013-04-05 22:13:33	-->	dmj (~user@wireless-219-200.uchicago.edu) has joined #haskell
2013-04-05 22:13:33	quchen	hiptobecubic: Yeah that'll teach him
2013-04-05 22:13:39	quchen	Double meaning intended
2013-04-05 22:13:39	<--	path[l] (~vsi@75-144-16-93-sffolsom.ca.hfc.comcastbusiness.net) has quit (Quit: path[l])
2013-04-05 22:13:44	hiptobecubic	:D
2013-04-05 22:13:58	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-05 22:14:07	 *	hackagebot linux-mount 0.1.0.0 - Mount and unmount filesystems  http://hackage.haskell.org/package/linux-mount-0.1.0.0 (NicolaSquartini)
2013-04-05 22:14:10	__xc	I wish google understood "hoogle foldr" directly
2013-04-05 22:14:22	quchen	It's a fairly useful thing to understand though hiptobecubic
2013-04-05 22:14:34	tdammers	__xc: duckduckgo does
2013-04-05 22:14:34	quchen	But not something to do as an exercise
2013-04-05 22:14:45	sproingie	typoclass: i think i'm in the minority who knows they're a worse than average driver.  my self-evaluation skills must be above average ;)
2013-04-05 22:14:47	__xc	well "haskell foldr" does it
2013-04-05 22:14:48	hiptobecubic	i have it as a keyword search already
2013-04-05 22:14:50	edwardk	I have a function, it looks a lot like log but it isn't. Lets call it lag: lag(x) = logBase 2 (x / lag(x))
2013-04-05 22:14:53	Xaratas	ok permutations [1,5,9] are 6 elements, i want the not mirrored part. So only 3, nice would be take 3 (correctSortedpermutations [1,5,9]), but i have no idea
2013-04-05 22:14:55	tdammers	at least if you prepend a !
2013-04-05 22:14:56	edwardk	I can't solve for it analytically, but i can solve for it numerically. Has anyone seen it before? It is slightly below log for any given input and as x goes to infinity it converges towards log.
2013-04-05 22:14:57	<--	kennyd (~kennyd@93-138-159-90.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-04-05 22:15:19	tdammers	https://duckduckgo.com/bang.html
2013-04-05 22:15:21	edwardk	> let n = 2^32 in iterate (\y -> logBase 2 (n / y)) 1 !! 30
2013-04-05 22:15:22	lambdabot	  27.232730275033873
2013-04-05 22:15:28	<--	samedhi (~stephen@76.14.74.147) has quit (Quit: samedhi)
2013-04-05 22:15:35	__xc	tdammers, seen it once, but I'm can't really switch between 2 search engine
2013-04-05 22:15:39	edwardk	any ideas?
2013-04-05 22:15:45	tdammers	__xc: you don't have to
2013-04-05 22:15:50	-->	carter (~textual@rrcs-50-74-58-122.nyc.biz.rr.com) has joined #haskell
2013-04-05 22:15:55	edwardk	it arises when i start calculating some recurrences involving optimal search and insert times in analytics
2013-04-05 22:15:58	<--	gridaphobe (~gridaphob@128.54.43.6) has quit (Remote host closed the connection)
2013-04-05 22:16:04	edwardk	I've just never seen it before
2013-04-05 22:16:08	tdammers	there's also !g for google
2013-04-05 22:16:15	<--	alszar (alszar@nat/rackspace/x-apsbpbikjxfmczyg) has quit (Ping timeout: 252 seconds)
2013-04-05 22:16:23	quchen	edwardk: Looks like Lambert W business
2013-04-05 22:16:24	rrckrd	i just realized that the meaning of life, 42, is actually sex and more than sex (sex is swedish for six and more than sex is 7). Does that explain the swedish sin?
2013-04-05 22:16:25	-->	purefn (~rwallace@ip68-3-25-148.ph.ph.cox.net) has joined #haskell
2013-04-05 22:16:48	<--	LambdaDusk (~Tom_Strel@91-66-25-66-dynip.superkabel.de) has left #haskell
2013-04-05 22:16:54	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-05 22:16:57	edwardk	quchen: hrmm
2013-04-05 22:17:03	simpson	rrckrd: Please be on-topic.
2013-04-05 22:17:09	tootsie	are sockets non blocking by default?
2013-04-05 22:17:19	sproingie	i'd hope not
2013-04-05 22:17:29	rrckrd	sorry simpson
2013-04-05 22:17:43	elliott	tootsie: the runtime system uses non-blocking IO under the hood, but exposes a blocking threaded interface to the language
2013-04-05 22:17:44	tootsie	https://groups.google.com/forum/?fromgroups=#!topic/haskell-cafe/aqaoEDt7auY
2013-04-05 22:17:46	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-04-05 22:17:52	simpson	tootsie: Sockets block. You are expected to use forkIO threads in order to do multiple things at once.
2013-04-05 22:18:12	arkeet	or possibly some abstraction over forkIO.
2013-04-05 22:18:17	-->	gridaphobe (~gridaphob@128.54.43.6) has joined #haskell
2013-04-05 22:18:41	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 256 seconds)
2013-04-05 22:19:04	-->	Wuzzy (~Wuzzy@p549FB65A.dip.t-dialin.net) has joined #haskell
2013-04-05 22:19:07	 *	hackagebot mount 0.2.1 - Mounts and umounts filesystems  http://hackage.haskell.org/package/mount-0.2.1 (NicolaSquartini)
2013-04-05 22:19:09	 *	hackagebot linux-mount 0.1.0.1 - Mount and unmount filesystems  http://hackage.haskell.org/package/linux-mount-0.1.0.1 (NicolaSquartini)
2013-04-05 22:19:23	<--	dmj (~user@wireless-219-200.uchicago.edu) has quit (Ping timeout: 255 seconds)
2013-04-05 22:19:28	rrckrd	what is the best way to learn haskell for a relatively smart non-programmer? I found the 'learn a haskell for a greater good' and the 99 haskell problems
2013-04-05 22:19:48	edwardk	quchen: basically it arose when i started considering what i could do if i only sorted my tables down to chunks that are of some polylog(n) size and then just appended it to the chunk. then insert is O(log (N/f(N)))  and search os O(log (N/f(N)) + f(N))   in the latter if f is log then that comes out to log (N/log N) + log N but then the second term dominates. To balance them I want log (N/f(N)) = f(N)
2013-04-05 22:19:56	osfameron	rrckrd: those sound like a good start
2013-04-05 22:20:05	edwardk	i'm fully expecting the result to be trivial
2013-04-05 22:20:07	hiptobecubic	rrckrd, this question is on SO
2013-04-05 22:20:14	edwardk	i just got stumped by never having seen it before
2013-04-05 22:20:19	-->	bos (~bos@173.252.71.2) has joined #haskell
2013-04-05 22:20:23	<--	nimred (~nimred@unaffiliated/nahra) has quit (Quit: leaving)
2013-04-05 22:20:38	-->	kylcarte_ (~kcarter@pdx.galois.com) has joined #haskell
2013-04-05 22:20:38	-->	kennyd (~kennyd@78-1-185-51.adsl.net.t-com.hr) has joined #haskell
2013-04-05 22:20:50	edwardk	quchen: so then i started just calculating examples numerically
2013-04-05 22:20:51	rrckrd	i want to learn haskell, but strange enough, I don't know why I want to learn haskell
2013-04-05 22:20:54	hiptobecubic	rrckrd, http://stackoverflow.com/questions/1012573/getting-started-with-haskell
2013-04-05 22:20:57	typoclass	rrckrd: yup, that's a good start
2013-04-05 22:21:10	ciaranm	edwardk: it's probably in sedgewick and flajolet's book, which i don't have with me
2013-04-05 22:21:11	typoclass	rrckrd: well, it'll broaden your mind :-)
2013-04-05 22:21:20	ab9rf	or flatten it
2013-04-05 22:21:20	edwardk	@let lag n = iterate (\y -> logBase 2 (n / y)) 1 !! 30
2013-04-05 22:21:21	quchen	edwardk: /q'd you
2013-04-05 22:21:23	lambdabot	 Defined.
2013-04-05 22:22:05	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-05 22:22:09	rrckrd	thanks for the reminder hiptobe^3
2013-04-05 22:22:24	edwardk	from quchen's query: f(x) = LambertW(e^x * x * log(2)) / log(2)    -- that looks right actually
2013-04-05 22:22:35	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-04-05 22:22:50	rrckrd	getting into recursive thinking took a while, and that is not even a start\
2013-04-05 22:22:56	<--	kylcarte (~kcarter@pdx.galois.com) has quit (Ping timeout: 245 seconds)
2013-04-05 22:23:19	-->	nilg (~user@ALagny-551-1-81-112.w90-35.abo.wanadoo.fr) has joined #haskell
2013-04-05 22:23:26	rrckrd	so I started getting into recursive thinking
2013-04-05 22:23:26	<--	Lethalman (~lethal@ppp-47-7.28-151.libero.it) has quit (Remote host closed the connection)
2013-04-05 22:23:39	-->	sepp2k (~sexy@g224150094.adsl.alicedsl.de) has joined #haskell
2013-04-05 22:24:42	-->	nuttycom (~Adium@c-98-245-166-237.hsd1.co.comcast.net) has joined #haskell
2013-04-05 22:25:03	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-04-05 22:25:18	--	boegel is now known as boegel|zzz
2013-04-05 22:26:15	<--	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has quit (Ping timeout: 276 seconds)
2013-04-05 22:26:26	-->	kadoban (~kadoban@ip98-165-177-158.ph.ph.cox.net) has joined #haskell
2013-04-05 22:27:12	-->	kmels (~kmels@frbg-5d84eace.pool.mediaWays.net) has joined #haskell
2013-04-05 22:27:20	-->	fgomez (~Fernando@d198-166-25-157.abhsia.telus.net) has joined #haskell
2013-04-05 22:27:24	rrckrd	i find mathematics fascinating and beautiful, especially complex things that can be written tersely. haskell seems to be similar. Have anyone here drawn a fractal with haskell? Is that within reach for newbie?
2013-04-05 22:27:29	<--	vraid (~vraid@host-95-199-156-183.mobileonline.telia.com) has quit (Ping timeout: 255 seconds)
2013-04-05 22:27:48	quchen	rrckrd: Verily.
2013-04-05 22:27:56	quchen	rrckrd: The hard part is basically the output. :-)
2013-04-05 22:28:09	quchen	rrckrd: But then in what language is Mandelbrot difficult
2013-04-05 22:28:13	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-04-05 22:28:22	<--	mr- (~martin@rgnb-5d8787a6.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-04-05 22:28:35	rrckrd	quechen: yes, no side effects, that is the good thing, wasn
2013-04-05 22:28:43	-->	samedhi (~stephen@76.14.74.147) has joined #haskell
2013-04-05 22:28:51	tootsie	@src when
2013-04-05 22:28:52	lambdabot	when p s = if p then s else return ()
2013-04-05 22:28:55	-->	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has joined #haskell
2013-04-05 22:29:01	ab9rf	quchen: brainfuck.
2013-04-05 22:29:17	 *	hackagebot halipeto 2.4.1 - Haskell Static Web Page Generator  http://hackage.haskell.org/package/halipeto-2.4.1 (PeterSimons)
2013-04-05 22:29:25	<--	Baughn (~svein@tsugumi.brage.info) has quit (Ping timeout: 248 seconds)
2013-04-05 22:29:30	quchen	ab9rf: Brainfuck *is* a fractal.
2013-04-05 22:29:35	elliott	quchen: https://github.com/isomorphism/esoteric-fractals/blob/master/Make/Makefile
2013-04-05 22:29:37	<--	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has quit (Ping timeout: 245 seconds)
2013-04-05 22:29:39	<--	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has quit (Quit: Leaving)
2013-04-05 22:29:42	ab9rf	quchen: and then there's malbolge
2013-04-05 22:29:42	hiptobecubic	malbolge?
2013-04-05 22:29:43	-->	Zenol (~zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-04-05 22:29:51	hiptobecubic	malbolge is excellent
2013-04-05 22:30:11	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-05 22:30:11	quchen	malbolge is silly. INTERCAL is excellent.
2013-04-05 22:30:14	rrckrd	quechen: I have actually never written a program to generate a fractal, but the algorithm seems simple: for all pixels - map them to numbers and calculate how many iterations it takes to divergate or color it black if it converges
2013-04-05 22:30:21	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 22:30:31	-->	tac (266a8ff8@gateway/web/freenode/ip.38.106.143.248) has joined #haskell
2013-04-05 22:30:32	quchen	rrckrd: Yes, that's basically it for Mandelbrot
2013-04-05 22:30:33	typoclass	rrckrd: it's not really math, but i like how terse it can be when you write quicksort in haskell: http://hpaste.org/85268
2013-04-05 22:30:43	arkeet	I don't like quicksort :(
2013-04-05 22:30:45	ab9rf	typoclass: that's not really quicksort
2013-04-05 22:30:46	hiptobecubic	is that the 'not really quicksort' quicksort?
2013-04-05 22:31:13	<--	cads (~m@c-24-99-19-61.hsd1.ga.comcast.net) has quit (Ping timeout: 258 seconds)
2013-04-05 22:31:17	-->	aztek (~aztek@95-25-95-39.broadband.corbina.ru) has joined #haskell
2013-04-05 22:31:22	sproingie	quicksort is defined as an in-place sort
2013-04-05 22:31:31	quchen	That *is* quicksort. For singly linked lists.
2013-04-05 22:31:52	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-05 22:31:59	Philonous	Oh, is it this time again?
2013-04-05 22:32:04	ab9rf	indeed
2013-04-05 22:32:10	ab9rf	time for the weekly quicksort debate
2013-04-05 22:32:15	ab9rf	popcorn, anyone?
2013-04-05 22:32:20	hiptobecubic	please
2013-04-05 22:32:31	__xc	> sort "haskell"
2013-04-05 22:32:33	lambdabot	  "aehklls"
2013-04-05 22:33:04	typoclass	in my opinion, it's tersely written and a sort. i don't know if it can be called quicksort, and i don't think it's very important
2013-04-05 22:33:09	rrckrd	typoclass: elegant
2013-04-05 22:33:22	-->	qnikst (~qnikst@gentoo/developer/qnikst) has joined #haskell
2013-04-05 22:33:31	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-04-05 22:33:38	--	ellifft is now known as kryft
2013-04-05 22:33:53	<--	RenJuan (~juan@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Remote host closed the connection)
2013-04-05 22:33:54	rrckrd	since it's friday. shouldnt quantum computers be really quick at sorting?
2013-04-05 22:34:01	<--	qnikst (~qnikst@gentoo/developer/qnikst) has left #haskell
2013-04-05 22:34:08	 *	hackagebot chuchu 0.4.3 - Behaviour Driven Development like Cucumber for Haskell  http://hackage.haskell.org/package/chuchu-0.4.3 (FelipeLessa)
2013-04-05 22:34:10	 *	hackagebot hopenssl 1.6.2 - FFI bindings to OpenSSL's EVP digest interface  http://hackage.haskell.org/package/hopenssl-1.6.2 (PeterSimons)
2013-04-05 22:34:22	Rotaerk_	hmm in a type family, if I have:  class C a b where { data D a :: * }
2013-04-05 22:34:24	<--	rul (~rul@163.10.42.228) has quit (Ping timeout: 252 seconds)
2013-04-05 22:34:32	Xaratas	rrckrd: only on mondays
2013-04-05 22:34:36	Rotaerk_	what are the implications of excluding the "b" from the declaration of D
2013-04-05 22:35:16	Rotaerk_	at first I thought maybe it's the same for all instances of C that share the same a, but that doesn't make sense..
2013-04-05 22:35:52	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-05 22:35:57	<--	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has quit (Quit: hello)
2013-04-05 22:36:14	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Ping timeout: 245 seconds)
2013-04-05 22:36:19	rrckrd	Xaratas: great, then it works on any day. Since mondays in one place can be tuesday or a sunday elsewhere. The same is true for both sundays and tuesdays
2013-04-05 22:36:24	arkeet	Rotaerk_: you will get an error if you try to define multiple instances for the same a
2013-04-05 22:36:26	-->	vraid (~vraid@host-95-199-150-26.mobileonline.telia.com) has joined #haskell
2013-04-05 22:36:36	tdammers	it does fit wikipedia's description of quicksort
2013-04-05 22:36:44	Rotaerk_	ah
2013-04-05 22:36:48	Rotaerk_	k, thanks
2013-04-05 22:37:10	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 256 seconds)
2013-04-05 22:37:16	__xc	http://www.youtube.com/watch?v=FBWeO2HYEc0 I'd propose Haskell erlang and company rather
2013-04-05 22:37:46	typoclass	tdammers: yeah it seems to say "quicksort can be implemented with an in-place thingy"
2013-04-05 22:38:24	<--	izym (~izym@82.211.222.212) has quit (Quit: leaving)
2013-04-05 22:38:54	-->	cromain (~chris@ALille-555-1-127-163.w90-7.abo.wanadoo.fr) has joined #haskell
2013-04-05 22:38:55	<--	Taneb (~nathan@host-92-23-129-213.as13285.net) has quit (Ping timeout: 264 seconds)
2013-04-05 22:39:02	-->	melter (~Melter@2001:4930:116:0:40f7:9403:1446:3bc3) has joined #haskell
2013-04-05 22:39:09	 *	hackagebot hsemail 1.7.6 - Internet Message Parsers  http://hackage.haskell.org/package/hsemail-1.7.6 (PeterSimons)
2013-04-05 22:39:09	<--	dylukes (~dylukes@c-98-236-69-114.hsd1.pa.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-04-05 22:39:10	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-05 22:39:16	<--	doomlord (~doomlod@host86-145-105-56.range86-145.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-04-05 22:39:30	-->	safinaskar (~user@188.44.56.155) has joined #haskell
2013-04-05 22:39:57	Xaratas	ok, how to get the not mirrored permutations of a list?
2013-04-05 22:40:11	int-e	"not mirrored"?
2013-04-05 22:40:24	-->	doomlord (~doomlod@host86-171-15-196.range86-171.btcentralplus.com) has joined #haskell
2013-04-05 22:40:27	int-e	maybe an example would help
2013-04-05 22:40:33	Xaratas	throw in [1,5,9], get [1,9,5]
2013-04-05 22:40:40	Xaratas	but not [9,5,1]
2013-04-05 22:40:47	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-05 22:40:50	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-05 22:41:08	Xaratas	> permutations [1,5,9]
2013-04-05 22:41:08	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Read error: Connection reset by peer)
2013-04-05 22:41:09	lambdabot	  [[1,5,9],[5,1,9],[9,5,1],[5,9,1],[9,1,5],[1,9,5]]
2013-04-05 22:41:17	arkeet	Rotaerk_: well, really you could have tested this yourself :p
2013-04-05 22:41:22	Xaratas	of these 6 only 3 are "not mirroed"
2013-04-05 22:41:31	arkeet	what does "mirrored" mean?
2013-04-05 22:41:32	-->	skyflash_ (~skyflash@206.172.31.228) has joined #haskell
2013-04-05 22:41:35	int-e	> map reverse . tail . permutations $ [2,3,4]
2013-04-05 22:41:37	lambdabot	  [[4,2,3],[2,3,4],[2,4,3],[3,2,4],[3,4,2]]
2013-04-05 22:41:49	int-e	Xaratas: just that?
2013-04-05 22:41:53	ab9rf	Xaratas: you need to defined "not mirrored"
2013-04-05 22:41:54	Xaratas	but i could not easily do "take 3 (permutations x)
2013-04-05 22:41:56	-->	rul (~rul@163.10.42.228) has joined #haskell
2013-04-05 22:42:12	-->	ijp` (~user@host86-184-183-126.range86-184.btcentralplus.com) has joined #haskell
2013-04-05 22:42:34	Xaratas	4,2,3 is the mirror of 3,2,4
2013-04-05 22:42:35	simpson	> filter (\xs -> reverse xs \= xs) $ permutations [1,5,9]
2013-04-05 22:42:36	lambdabot	  Not in scope: `\='
2013-04-05 22:42:36	lambdabot	 Perhaps you meant one of these:
2013-04-05 22:42:37	lambdabot	   `/=' (imported from ...
2013-04-05 22:42:47	simpson	> filter (\xs -> reverse xs /= xs) $ permutations [1,5,9] -- doh
2013-04-05 22:42:49	lambdabot	  [[1,5,9],[5,1,9],[9,5,1],[5,9,1],[9,1,5],[1,9,5]]
2013-04-05 22:42:49	hiptobecubic	only take one of palindromes
2013-04-05 22:42:54	tootsie	name an interesting protocol to implement in haskell. a bigger one. preferrably one that hasnt been done
2013-04-05 22:42:58	-->	Taneb (~nathan@host-92-23-129-213.as13285.net) has joined #haskell
2013-04-05 22:42:59	simpson	Oh, wait, I see. Derp.
2013-04-05 22:43:00	int-e	Xaratas: so which of 4,2,3 or 3,2,4 do you want?
2013-04-05 22:43:02	ion	tootsie: Skype
2013-04-05 22:43:11	hiptobecubic	ion, :D
2013-04-05 22:43:12	parcs	> nubBy ((==) <*> reverse) $ permutations [1,5,9]
2013-04-05 22:43:13	lambdabot	  Couldn't match expected type `a0 -> GHC.Types.Bool'
2013-04-05 22:43:13	lambdabot	             with actua...
2013-04-05 22:43:31	Xaratas	any one ist good, i would prefer the lower one but it should not matter for my programm
2013-04-05 22:43:32	arkeet	> nubBy ((==) . reverse) $ permutations [1,5,9]
2013-04-05 22:43:34	lambdabot	  [[1,5,9],[5,1,9],[5,9,1]]
2013-04-05 22:43:36	tootsie	ion: i was just reading on VoIP!
2013-04-05 22:43:38	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 22:43:44	simpson	Xaratas: What are you using these for?
2013-04-05 22:43:46	int-e	> filter (\xs -> reverse xs < xs) . permutations $ [2,3,4]
2013-04-05 22:43:48	lambdabot	  [[4,3,2],[3,4,2],[4,2,3]]
2013-04-05 22:43:51	-->	Baughn (~svein@tsugumi.brage.info) has joined #haskell
2013-04-05 22:43:53	<--	Rogach (uid6398@gateway/web/irccloud.com/x-dcibfekjicbaevhk) has left #haskell
2013-04-05 22:43:53	-->	trone (~sim@host78-26-dynamic.58-82-r.retail.telecomitalia.it) has joined #haskell
2013-04-05 22:44:05	tootsie	ion: haskell woudlnt be to slow? does programming lang even matter with internet network code ?
2013-04-05 22:44:09	 *	hackagebot streamproc 1.6.2 - Stream Processer Arrow  http://hackage.haskell.org/package/streamproc-1.6.2 (PeterSimons)
2013-04-05 22:44:09	arkeet	> filter (\xs -> reverse xs < xs) . permutations $ [2,2,2]
2013-04-05 22:44:11	lambdabot	  []
2013-04-05 22:44:12	-->	frsoares (~frsoares@todas-as-redes-ext.cin.ufpe.br) has joined #haskell
2013-04-05 22:44:13	parcs	int-e: nice
2013-04-05 22:44:14	-->	justin-gooch (~Justin@c-68-61-157-76.hsd1.mi.comcast.net) has joined #haskell
2013-04-05 22:44:18	arkeet	> nubBy ((==) . reverse) $ permutations [2,2,2]
2013-04-05 22:44:18	Rotaerk_	arkeet, hmm true
2013-04-05 22:44:20	lambdabot	  [[2,2,2]]
2013-04-05 22:44:21	Rotaerk_	sorry
2013-04-05 22:44:21	hiptobecubic	tootsie, haskell isn't slow, first of all. Secondly, no.
2013-04-05 22:44:27	Xaratas	i am calculationg magic squares and want to get rid of the mirroed squares to speed up the algo in the first place
2013-04-05 22:44:37	int-e	I guess that should be <= :-)
2013-04-05 22:44:38	<--	ijp (~user@host86-184-183-5.range86-184.btcentralplus.com) has quit (Ping timeout: 258 seconds)
2013-04-05 22:44:44	rrckrd	Xaratas
2013-04-05 22:44:46	<--	justin-gooch (~Justin@c-68-61-157-76.hsd1.mi.comcast.net) has left #haskell
2013-04-05 22:44:46	int-e	(to make it work for singleton lists)
2013-04-05 22:44:50	--	ijp` is now known as ijp
2013-04-05 22:44:59	rrckrd	Xaratas: are you doing Project euler problems?\
2013-04-05 22:45:03	arkeet	yeah, I'd go with <=
2013-04-05 22:45:06	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-04-05 22:45:08	__xc	tootsie, good luck with the 300 pages of rfc
2013-04-05 22:45:14	Xaratas	rrckrd: no
2013-04-05 22:45:33	tootsie	rfc=?
2013-04-05 22:45:36	Xaratas	rrckrd: the magic square thing is yust for learning a little haskell
2013-04-05 22:45:51	hiptobecubic	tootsie, miserably boring spec
2013-04-05 22:45:58	hiptobecubic	mbs
2013-04-05 22:46:05	edwardk	> lag (2^32)
2013-04-05 22:46:06	lambdabot	  27.232730275033873
2013-04-05 22:46:19	tootsie	the spec is 300 pages?
2013-04-05 22:46:21	ion	“<hiptobecubic> ion, :D” – more like “D:” given that it’s proprietary in the first place and not reverse-engineered yet.
2013-04-05 22:46:24	arkeet	> filter (\xs -> head xs <= last xs) . permutations $ [1,2,3]
2013-04-05 22:46:25	lambdabot	  [[1,2,3],[2,1,3],[1,3,2]]
2013-04-05 22:46:25	rrckrd	Xaratas: ah! that is what makes learning programming fun. Solving problems. Haskell seems to be very adept at that
2013-04-05 22:46:39	hiptobecubic	ion, that makes it even better.
2013-04-05 22:46:41	<--	Taneb (~nathan@host-92-23-129-213.as13285.net) has quit (Read error: Connection reset by peer)
2013-04-05 22:46:42	ion	@type lag
2013-04-05 22:46:43	lambdabot	Floating a => a -> a
2013-04-05 22:46:45	int-e	arkeet: heh, I just typed that, too\
2013-04-05 22:46:46	arkeet	heh
2013-04-05 22:47:03	arkeet	> filter (\xs -> head xs <= last xs) . permutations $ [] -- oops
2013-04-05 22:47:04	lambdabot	  *Exception: Prelude.head: empty list
2013-04-05 22:47:16	ion	> map (lag . (10^)) [0..]
2013-04-05 22:47:18	lambdabot	  [-Infinity,2.1905956819481687,4.480270387268562,7.131565480963866,9.9701038...
2013-04-05 22:47:20	Xaratas	> filter (\xs -> head xs <= last xs) . permutations $ [1,2,15,16]
2013-04-05 22:47:22	lambdabot	  [[1,2,15,16],[2,1,15,16],[15,2,1,16],[2,15,1,16],[15,1,2,16],[1,15,2,16],[1...
2013-04-05 22:47:27	<--	k0001 (~k0001@host22.200-117-32.telecom.net.ar) has quit (Ping timeout: 260 seconds)
2013-04-05 22:47:29	arkeet	> length it
2013-04-05 22:47:30	__xc	whole networking is a pain of protocols, that's why the SDN /openflow could be great
2013-04-05 22:47:31	lambdabot	  Not in scope: `it'
2013-04-05 22:47:31	lambdabot	 Perhaps you meant one of these:
2013-04-05 22:47:31	lambdabot	   `id' (imported from ...
2013-04-05 22:47:45	hiptobecubic	> map sort . filter ((==) . reverse) . permutations # [1,2,15,16]
2013-04-05 22:47:47	lambdabot	  Not in scope: `#'
2013-04-05 22:47:47	<--	William__ (~William@108-85-16-151.lightspeed.gnvlsc.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-04-05 22:47:51	hiptobecubic	> map sort . filter ((==) . reverse) . permutations $ [1,2,15,16]
2013-04-05 22:47:53	lambdabot	  Couldn't match expected type `GHC.Types.Bool'
2013-04-05 22:47:53	lambdabot	             with actual type...
2013-04-05 22:47:53	-->	Taneb (~nathan@host-92-23-133-91.as13285.net) has joined #haskell
2013-04-05 22:47:58	hiptobecubic	damn
2013-04-05 22:47:59	arkeet	hiptobecubic: uh no :)
2013-04-05 22:48:00	edwardk	> lag (2^20)
2013-04-05 22:48:02	lambdabot	  16.0
2013-04-05 22:48:12	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Ping timeout: 264 seconds)
2013-04-05 22:48:16	arkeet	hiptobecubic: why would you sorting the permuted lists?
2013-04-05 22:48:19	arkeet	er, sort.
2013-04-05 22:48:33	<--	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has quit (Quit: gabor)
2013-04-05 22:48:35	hiptobecubic	arkeet, for beauty
2013-04-05 22:48:37	-->	scriptor (~Scriptor@ext.corp.bitshelter.com) has joined #haskell
2013-04-05 22:48:43	hiptobecubic	the most important aspect of programming
2013-04-05 22:48:45	arkeet	but you'll just get a bunch of copies of the same list.
2013-04-05 22:48:52	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-04-05 22:49:05	rrckrd	hipt2b^3: that's a perfetly good reason
2013-04-05 22:49:37	 *	elliott wonders what that "t" is doing.
2013-04-05 22:49:38	hiptobecubic	arkeet, well sure. Function follows form, I always say.
2013-04-05 22:49:46	armlesshobo	hiptobecubic: vanity is a deadly sin.
2013-04-05 22:49:50	armlesshobo	i think
2013-04-05 22:50:03	<--	Feuerbach (~feuerbach@80.90.234.112) has quit (Quit: roots, bloody roots)
2013-04-05 22:50:04	hiptobecubic	armlesshobo, you're thinking of tax evasion
2013-04-05 22:50:09	tootsie	the skype spec is 300 pages? is there a voip spec?
2013-04-05 22:50:14	armlesshobo	hiptobecubic: ah, my bad. always mix the two up
2013-04-05 22:50:15	hiptobecubic	tootsie, there is no skype spec
2013-04-05 22:50:27	Xaratas	hm, beauty, yes there i have an other thing of code
2013-04-05 22:50:31	-->	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has joined #haskell
2013-04-05 22:50:39	Xaratas	that could need it
2013-04-05 22:50:44	<--	fizbin (~Adium@pool-173-72-88-179.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-04-05 22:50:46	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 258 seconds)
2013-04-05 22:51:01	-->	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 22:51:01	arkeet	hmm
2013-04-05 22:51:04	-->	ben_d (~muus@c-71-236-155-211.hsd1.or.comcast.net) has joined #haskell
2013-04-05 22:51:08	arkeet	there must be a nice way to generate all the even permutations.
2013-04-05 22:51:15	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Ping timeout: 245 seconds)
2013-04-05 22:51:20	hiptobecubic	'even'?
2013-04-05 22:51:24	tootsie	what spec is 300 pages?
2013-04-05 22:51:35	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-04-05 22:51:47	rrckrd	|
2013-04-05 22:51:52	arkeet	http://en.wikipedia.org/wiki/Even_permutation
2013-04-05 22:51:55	__xc	> nub "aazza"
2013-04-05 22:51:57	lambdabot	  "az"
2013-04-05 22:52:00	<--	Taneb (~nathan@host-92-23-133-91.as13285.net) has quit (Read error: Operation timed out)
2013-04-05 22:52:15	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 276 seconds)
2013-04-05 22:52:52	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 22:52:52	hiptobecubic	arkeet, well this is new to me
2013-04-05 22:53:39	<--	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has quit (Ping timeout: 252 seconds)
2013-04-05 22:53:47	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: Brain.sys has encountered a problem and needs to close. We are sorry for the inconvenience.)
2013-04-05 22:53:51	hpaste	Xaratas pasted “Permutation search” at http://hpaste.org/85270
2013-04-05 22:53:58	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-05 22:54:15	arkeet	a nice definition: the parity of a permutation is the determinant of the corresponding linear map that permutes the coordinates
2013-04-05 22:54:18	-->	Jambato (~le@auv95-1-82-241-80-196.fbx.proxad.net) has joined #haskell
2013-04-05 22:54:30	__xc	> nub $ map sort $ permutations [1..3]
2013-04-05 22:54:31	<--	Baughn (~svein@tsugumi.brage.info) has quit (Ping timeout: 264 seconds)
2013-04-05 22:54:31	lambdabot	  [[1,2,3]]
2013-04-05 22:54:32	arkeet	well, the sign
2013-04-05 22:54:42	hiptobecubic	yes, that's by far the most intuitive way to think about this....
2013-04-05 22:54:57	Xaratas	so here i have many [[]] in the result, but i would have more beauty if they were not generated at all
2013-04-05 22:54:58	arkeet	why not?
2013-04-05 22:55:02	arkeet	a transposition is just a reflection.
2013-04-05 22:55:07	arkeet	reflections have determinant -1
2013-04-05 22:55:15	-->	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has joined #haskell
2013-04-05 22:55:17	meyersh	> :t (..)
2013-04-05 22:55:19	lambdabot	  <hint>:1:1: parse error on input `:'
2013-04-05 22:55:22	-->	Ralith (~ralith@d142-058-094-182.wireless.sfu.ca) has joined #haskell
2013-04-05 22:55:30	<--	aib (~marvin@unaffiliated/aib42) has quit (Quit: So long and thanks for all the fish.)
2013-04-05 22:55:43	<--	Paprikac_ (~Paprikach@bcn52.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 246 seconds)
2013-04-05 22:55:45	<--	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has quit (Client Quit)
2013-04-05 22:55:58	<--	aztek (~aztek@95-25-95-39.broadband.corbina.ru) has quit (Quit: aztek)
2013-04-05 22:55:58	hiptobecubic	arkeet, that is true yes. But I hadn't considered it.
2013-04-05 22:56:01	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-05 22:56:04	<--	gridaphobe (~gridaphob@128.54.43.6) has quit (Read error: Connection reset by peer)
2013-04-05 22:56:08	__xc	(PigNose a) => a -> a
2013-04-05 22:57:07	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-05 22:57:52	<--	sleepynate (~sleepynat@199.16.190.194) has quit (Remote host closed the connection)
2013-04-05 22:58:27	arkeet	ok, I'll stop myself before I start talking about exterior products and stuff.
2013-04-05 22:58:36	int-e	> let perm p [] = [[] | p]; perm p xs = go p xs [] where { go _ [] _ = []; go p (x:xs) ys = map (x:) (perm p (reverse ys ++ xs)) ++ go (not p) xs (x:ys) } in perm True [1,2,3] -- too clumsy?
2013-04-05 22:58:38	lambdabot	  [[1,2,3],[2,3,1],[3,1,2]]
2013-04-05 22:58:39	-->	jameson` (~user@198-84-174-211.cpe.teksavvy.com) has joined #haskell
2013-04-05 22:59:17	arkeet	@let perm p [] = [[] | p]; perm p xs = go p xs [] where { go _ [] _ = []; go p (x:xs) ys = map (x:) (perm p (reverse ys ++ xs)) ++ go (not p) xs (x:ys) }
2013-04-05 22:59:19	lambdabot	 Defined.
2013-04-05 22:59:21	quchen	__xc: nub is quite slow, but requires only Eq. If you have Ord, use "map head . group . sort"
2013-04-05 22:59:34	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Read error: Connection reset by peer)
2013-04-05 22:59:38	-->	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has joined #haskell
2013-04-05 22:59:40	hiptobecubic	Isn't there a hamming hammond hammy something distance function that computes the transpositions in two lists?
2013-04-05 22:59:41	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-04-05 22:59:51	hiptobecubic	filter by odd . that
2013-04-05 22:59:56	arkeet	int-e: so what's it supposed to do?
2013-04-05 23:00:11	ab9rf	:t that
2013-04-05 23:00:13	lambdabot	Not in scope: `that'
2013-04-05 23:00:18	int-e	arkeet: perm True = even; perm False = odd permutations
2013-04-05 23:00:19	ab9rf	ok, didn't think so
2013-04-05 23:00:26	arkeet	right.
2013-04-05 23:00:28	pala2	thanks hiptobecubic, got that now ;-)
2013-04-05 23:00:33	<--	rrckrd (~dell@c-66cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 240 seconds)
2013-04-05 23:01:31	arkeet	@where select
2013-04-05 23:01:32	lambdabot	select [] = []; select (x:xs) = (x,xs) : (map.fmap) (x:) (select xs)
2013-04-05 23:01:36	arkeet	@@ @let @where select
2013-04-05 23:01:38	lambdabot	 Defined.
2013-04-05 23:01:59	arkeet	hmm, not quite.
2013-04-05 23:02:20	-->	luksow (~luke@user-31-175-252-30.play-internet.pl) has joined #haskell
2013-04-05 23:02:42	Xaratas	oO
2013-04-05 23:02:51	<--	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has quit (Quit: [BX] Outwit. Outplay. Outlast. Survivor BitchX.)
2013-04-05 23:02:58	arkeet	> select [1..4]
2013-04-05 23:03:00	lambdabot	  [(1,[2,3,4]),(2,[1,3,4]),(3,[1,2,4]),(4,[1,2,3])]
2013-04-05 23:03:04	-->	strebe (~strebe@p549B6186.dip0.t-ipconnect.de) has joined #haskell
2013-04-05 23:03:17	<--	ParadoxMuffin (~paradoxmu@93-86-35-244.dynamic.isp.telekom.rs) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-05 23:03:47	int-e	ah you can zip that with cycle [True,False] :)
2013-04-05 23:03:53	<--	carbonCofiber (~anonymous@dslb-092-076-105-100.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-04-05 23:04:29	<--	ido (~ido@pdpc/supporter/student/ido) has quit (Quit: leaving)
2013-04-05 23:04:39	<--	nadirvardar (~nadirvard@208.74.181.201.static.etheric.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-04-05 23:05:20	hiptobecubic	or filter on (odd . fst)
2013-04-05 23:05:22	Xaratas	int-e: how the hell?
2013-04-05 23:05:36	<--	Eldariof93-ru (~CLD@pppoe-215-183-dyn-sr.volgaline.ru) has quit
2013-04-05 23:06:04	-->	carbonCofiber (~anonymous@tmo-103-139.customers.d1-online.com) has joined #haskell
2013-04-05 23:06:31	int-e	> let perm p [] = [[] | p]; perm p xs = concat [map (x':) (perm p' xs') | (p', (x', xs')) <- zip (cycle [p, not p]) (select xs)] in perm True [1,2,3]
2013-04-05 23:06:33	lambdabot	  [[1,2,3],[2,3,1],[3,1,2]]
2013-04-05 23:06:48	arkeet	I'd rather use False for even.
2013-04-05 23:07:03	Xaratas	interesting observation: all 4 nomirrorpermutate versions result in a different set
2013-04-05 23:07:08	<--	ijp (~user@host86-184-183-126.range86-184.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-04-05 23:07:20	<--	inarenvi (~quassel@92.59.136.101) has quit (Remote host closed the connection)
2013-04-05 23:07:24	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Ping timeout: 252 seconds)
2013-04-05 23:07:48	tootsie	> take 10 $ scanr (+) 0 [0..]
2013-04-05 23:07:50	lambdabot	  [*Exception: stack overflow
2013-04-05 23:07:53	arkeet	@let selectS [] = []; selectS (x:xs) = ((1,x),xs) : map ((first.first) negate . second (x:)) (selectS xs)
2013-04-05 23:07:55	tootsie	> take 10 $ scanl (+) 0 [0..]
2013-04-05 23:07:55	lambdabot	 Defined.
2013-04-05 23:07:56	lambdabot	  [0,0,1,3,6,10,15,21,28,36]
2013-04-05 23:07:56	arkeet	> selectS [1..4]
2013-04-05 23:07:57	<--	carbonCofiber (~anonymous@tmo-103-139.customers.d1-online.com) has quit (Remote host closed the connection)
2013-04-05 23:07:57	<--	Tharugrim (~Tharugrim@178-190-254-44.adsl.highway.telekom.at) has quit (Quit: WeeChat 0.4.0)
2013-04-05 23:07:59	lambdabot	  [((1,1),[2,3,4]),((-1,2),[1,3,4]),((1,3),[1,2,4]),((-1,4),[1,2,3])]
2013-04-05 23:08:19	-->	carbonCofiber (~anonymous@tmo-103-139.customers.d1-online.com) has joined #haskell
2013-04-05 23:08:37	int-e	Xaratas: note that [1,2,3,4] and [4,3,2,1] are both even permutations. so generating even permutations does not solve your problem.
2013-04-05 23:08:49	-->	fasta2 (~fasta@zonnebloem.demon.nl) has joined #haskell
2013-04-05 23:08:49	<--	fasta2 (~fasta@zonnebloem.demon.nl) has quit (Read error: Connection reset by peer)
2013-04-05 23:09:12	-->	dagnachew (~dagnachew@bas1-montreal30-2925416620.dsl.bell.ca) has joined #haskell
2013-04-05 23:09:21	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-04-05 23:09:47	<--	Franciman (~quassel@host112-163-dynamic.27-79-r.retail.telecomitalia.it) has quit (Remote host closed the connection)
2013-04-05 23:10:11	-->	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has joined #haskell
2013-04-05 23:10:28	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-04-05 23:10:36	__xc	quchen, yes I know intersecting, and.. on lists is much more efficient after sorting, thx
2013-04-05 23:10:54	<--	reggie1 (~rperry@sea02-v600-nat.marchex.com) has quit (Remote host closed the connection)
2013-04-05 23:11:02	-->	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 23:11:04	<--	luksow (~luke@user-31-175-252-30.play-internet.pl) has quit (Remote host closed the connection)
2013-04-05 23:11:09	tootsie	@src scanl
2013-04-05 23:11:09	lambdabot	scanl f q ls = q : case ls of
2013-04-05 23:11:09	lambdabot	    []   -> []
2013-04-05 23:11:10	lambdabot	    x:xs -> scanl f (f q x) xs
2013-04-05 23:11:48	tootsie	@src scanr
2013-04-05 23:11:48	lambdabot	scanr _ q0 []     =  [q0]
2013-04-05 23:11:48	lambdabot	scanr f q0 (x:xs) =  f x q : qs
2013-04-05 23:11:48	lambdabot	    where qs@(q:_) = scanr f q0 xs
2013-04-05 23:11:58	<--	eikke (~nicolas@78-20-0-121.access.telenet.be) has quit (Ping timeout: 256 seconds)
2013-04-05 23:12:07	<--	Itkovian (~Itkovian@vpnf010.ugent.be) has quit (Quit: Itkovian)
2013-04-05 23:12:13	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 240 seconds)
2013-04-05 23:12:16	-->	luksow (~luke@user-31-175-252-30.play-internet.pl) has joined #haskell
2013-04-05 23:12:19	<--	trescenzi (~trescenzi@2620:91:0:163:7144:1ba3:839d:c2b3) has quit (Remote host closed the connection)
2013-04-05 23:12:31	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: Leaving)
2013-04-05 23:12:31	<--	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-05 23:13:23	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-04-05 23:13:30	-->	eikke (~nicolas@78-20-0-121.access.telenet.be) has joined #haskell
2013-04-05 23:13:47	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-04-05 23:13:49	tootsie	> let fibs = scanl (+) 0 (1:fibs) in take 5 $ fibs
2013-04-05 23:13:50	lambdabot	  [0,1,1,2,3]
2013-04-05 23:13:56	tootsie	> let fibs = scanl (+) 0 (1:fibs) in take 10 $ fibs
2013-04-05 23:13:58	lambdabot	  [0,1,1,2,3,5,8,13,21,34]
2013-04-05 23:13:59	arkeet	there, permutations with signs
2013-04-05 23:14:09	tootsie	2src iterate
2013-04-05 23:14:13	tootsie	@src iterate
2013-04-05 23:14:13	lambdabot	iterate f x =  x : iterate f (f x)
2013-04-05 23:14:14	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-05 23:14:31	arkeet	@let permsWithSign l = let n = length l in map (product . map fst &&& map snd) $ replicateM n (StateT selectS) `evalStateT` l
2013-04-05 23:14:31	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-04-05 23:14:45	tootsie	> take 5 $ iterate (+1) 10
2013-04-05 23:14:47	lambdabot	  [10,11,12,13,14]
2013-04-05 23:14:49	arkeet	@let permsWithSign l = let n = length l in map (product . map fst &&& map snd) . evalStateT l $ replicateM n (StateT selectS)
2013-04-05 23:14:49	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-04-05 23:14:52	<--	carbonCofiber (~anonymous@tmo-103-139.customers.d1-online.com) has quit (Remote host closed the connection)
2013-04-05 23:14:55	arkeet	where?
2013-04-05 23:15:07	arkeet	@let permsWithSign l = let n = length l in (map (product . map fst &&& map snd) . evalStateT l $ replicateM n (StateT selectS))
2013-04-05 23:15:07	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-04-05 23:15:08	-->	dnolen (~user@cpe-74-64-61-245.nyc.res.rr.com) has joined #haskell
2013-04-05 23:15:15	arkeet	what?
2013-04-05 23:15:25	int-e	. vs &&&, I guess?
2013-04-05 23:15:30	<--	strebe (~strebe@p549B6186.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2013-04-05 23:15:33	<--	luksow (~luke@user-31-175-252-30.play-internet.pl) has quit (Remote host closed the connection)
2013-04-05 23:15:36	<--	safinaskar (~user@188.44.56.155) has quit (Remote host closed the connection)
2013-04-05 23:15:52	-->	Paprikac_ (~Paprikach@aggw251.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-05 23:15:52	int-e	> ?a . ?b &&& ?c
2013-04-05 23:15:54	lambdabot	  mueval-core: internal error: PAP object entered!
2013-04-05 23:15:54	lambdabot	     (GHC version 7.4.2 fo...
2013-04-05 23:15:59	int-e	what!
2013-04-05 23:16:04	<--	Palmik_ (~palmik@man-208-105.pks.muni.cz) has quit (Quit: Lost terminal)
2013-04-05 23:16:05	<--	dolio (~dolio@gw1.mcgraw-hill.com) has quit (Ping timeout: 255 seconds)
2013-04-05 23:16:27	arkeet	> 5
2013-04-05 23:16:33	lambdabot	  5
2013-04-05 23:16:42	arkeet	@ty ?a . ?b &&& ?c
2013-04-05 23:16:47	lambdabot	(?a::b1 -> c, ?b::b -> b1, ?c::b -> c') => b -> (c, c')
2013-04-05 23:16:53	ski_	@wn PAP
2013-04-05 23:16:53	lambdabot	*** "pap" wn "WordNet (r) 3.0 (2006)"
2013-04-05 23:16:53	lambdabot	pap
2013-04-05 23:16:55	lambdabot	    n 1: worthless or oversimplified ideas [syn: {pap}, {pablum}]
2013-04-05 23:16:57	lambdabot	    2: a diet that does not require chewing; advised for those with
2013-04-05 23:16:59	lambdabot	       intestinal disorders [syn: {soft diet}, {pap}, {spoon food}]
2013-04-05 23:17:01	lambdabot	    3: the small projection of a mammary gland [syn: {nipple},
2013-04-05 23:17:03	lambdabot	       {mammilla}, {mamilla}, {pap}, {teat}, {tit}]
2013-04-05 23:17:25	arkeet	@let permsWithSign l = map (product . map fst &&& map snd) $ replicateM (length l) (StateT selectS) `evalStateT` l
2013-04-05 23:17:25	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-04-05 23:17:25	int-e	"Partial APplication"
2013-04-05 23:17:42	arkeet	@let permsWithSign l = map ((product . map fst) &&& map snd) $ replicateM (length l) (StateT selectS) `evalStateT` l
2013-04-05 23:17:44	lambdabot	 Defined.
2013-04-05 23:17:49	arkeet	well uh ok
2013-04-05 23:17:54	arkeet	> permsWithSign [1..3]
2013-04-05 23:17:55	ab9rf	i like parp better
2013-04-05 23:17:58	lambdabot	  [(1,[1,2,3]),(-1,[1,3,2]),(-1,[2,1,3]),(1,[2,3,1]),(1,[3,1,2]),(-1,[3,2,1])]
2013-04-05 23:18:28	-->	reckler (~reckler@ppp118-208-131-232.lns20.bne1.internode.on.net) has joined #haskell
2013-04-05 23:18:35	arkeet	> permsWithSign [1..3] ^.. folded . filtered ((==1) . fst) . _2
2013-04-05 23:18:35	<--	jrajav (~jrajav@198.179.137.210) has quit (Quit: I tend to be neutral about apples)
2013-04-05 23:18:37	lambdabot	  [[1,2,3],[2,3,1],[3,1,2]]
2013-04-05 23:18:44	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-04-05 23:18:46	armlesshobo	@wn lin
2013-04-05 23:18:46	lambdabot	*** "lin" wn "WordNet (r) 3.0 (2006)"
2013-04-05 23:18:46	lambdabot	Lin
2013-04-05 23:18:46	lambdabot	    n 1: United States sculptor and architect whose public works
2013-04-05 23:18:46	lambdabot	         include the memorial to veterans of the Vietnam War in
2013-04-05 23:18:46	lambdabot	         Washington (born in 1959) [syn: {Lin}, {Maya Lin}]
2013-04-05 23:18:49	<--	Xaratas (~Nick@brln-4d0ce9e8.pool.mediaWays.net) has quit (Read error: Connection reset by peer)
2013-04-05 23:18:51	arkeet	> permsWithSign [1..4] ^.. folded . filtered ((==1) . fst) . _2
2013-04-05 23:18:54	lambdabot	  [[1,2,3,4],[1,3,4,2],[1,4,2,3],[2,1,4,3],[2,3,1,4],[2,4,3,1],[3,1,2,4],[3,2...
2013-04-05 23:19:01	-->	Xaratas (~Nick@brln-4d0ce9e8.pool.mediaWays.net) has joined #haskell
2013-04-05 23:19:02	<--	plucas (~plucas@c-24-98-196-250.hsd1.ga.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-05 23:19:16	Xaratas	?
2013-04-05 23:19:22	arkeet	?
2013-04-05 23:19:24	armlesshobo	?
2013-04-05 23:19:32	arkeet	??
2013-04-05 23:19:40	Xaratas	what was this?
2013-04-05 23:19:46	arkeet	you disconnected.
2013-04-05 23:19:52	int-e	@kind (->)
2013-04-05 23:19:53	lambdabot	* -> * -> *
2013-04-05 23:20:02	<--	knightshade (~knightsha@p54BC5CF1.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-04-05 23:20:13	<--	eikke (~nicolas@78-20-0-121.access.telenet.be) has quit (Ping timeout: 240 seconds)
2013-04-05 23:20:23	arkeet	I don't understand why lambdabot thought that was ambiguous.
2013-04-05 23:20:25	Xaratas	strange, only on freenode
2013-04-05 23:20:30	<--	gabor (~heisenbug@p54940F0E.dip.t-dialin.net) has quit (Quit: gabor)
2013-04-05 23:20:33	arkeet	infixr 9 . and infixr 3 &&&
2013-04-05 23:20:38	int-e	@type (.)
2013-04-05 23:20:40	lambdabot	(b -> c) -> (a -> b) -> a -> c
2013-04-05 23:20:50	arkeet	@let what = (.) in what
2013-04-05 23:20:50	lambdabot	  Parse error: in
2013-04-05 23:20:52	arkeet	:t what
2013-04-05 23:20:53	lambdabot	Not in scope: `what'
2013-04-05 23:20:54	arkeet	@let what = (.)
2013-04-05 23:20:56	lambdabot	 Defined.
2013-04-05 23:20:56	arkeet	:t what
2013-04-05 23:20:58	lambdabot	(b -> c) -> (a -> b) -> a -> c
2013-04-05 23:21:00	arkeet	hmm.
2013-04-05 23:21:02	-->	kiwnix (~egarcia@unaffiliated/kiwnix) has joined #haskell
2013-04-05 23:21:04	-->	knightshade (~knightsha@p54BC5CF1.dip.t-dialin.net) has joined #haskell
2013-04-05 23:21:27	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Read error: Operation timed out)
2013-04-05 23:21:48	-->	LAMMJohn1on (~ja@user-5af432a9.broadband.tesco.net) has joined #haskell
2013-04-05 23:21:56	<--	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-04-05 23:21:59	arkeet	oh sure, I don't have to generate all permutations and then filter by the even ones.
2013-04-05 23:22:08	-->	germanp (~germanp@181.47.148.80) has joined #haskell
2013-04-05 23:22:19	-->	eikke (~nicolas@78-20-0-121.access.telenet.be) has joined #haskell
2013-04-05 23:22:53	-->	sellout- (~Adium@c-71-56-237-160.hsd1.co.comcast.net) has joined #haskell
2013-04-05 23:23:37	Xaratas	hm
2013-04-05 23:23:44	<--	luisgabriel (~luisgabri@187.59.246.215) has quit (Ping timeout: 258 seconds)
2013-04-05 23:23:51	Xaratas	@hoogle selectS
2013-04-05 23:23:52	lambdabot	No results found
2013-04-05 23:23:54	<--	LAMMJohnson (~ja@user-5af431e8.broadband.tesco.net) has quit (Ping timeout: 252 seconds)
2013-04-05 23:23:56	Xaratas	:(
2013-04-05 23:24:10	 *	hackagebot hsdns-cache 1.0.2 - Caching asynchronous DNS resolver.  http://hackage.haskell.org/package/hsdns-cache-1.0.2 (VladimirShabanov)
2013-04-05 23:24:12	ski_	looking for ?
2013-04-05 23:24:13	<--	Thomyho3 (~thomyho@mnhm-4d011c3e.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-04-05 23:24:22	-->	luisgabriel (~luisgabri@187.59.246.215) has joined #haskell
2013-04-05 23:24:28	Xaratas	yes, and google is no help too
2013-04-05 23:24:56	ski_	what was `selectS' supposed to do, i meant ?
2013-04-05 23:25:26	-->	vlatkoB (~vlatko@188.129.50.110) has joined #haskell
2013-04-05 23:25:29	-->	apwb (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-04-05 23:25:32	-->	xxen (~SPS-User@dslb-188-108-223-036.pools.arcor-ip.net) has joined #haskell
2013-04-05 23:25:37	-->	Natch_r (~Natch@c-fecee155.25-4-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-04-05 23:25:44	-->	bscarlet_ (~bscarlet@static-71-174-103-28.bstnma.fios.verizon.net) has joined #haskell
2013-04-05 23:25:49	-->	stephenjudkins (~textual@75-164-246-205.ptld.qwest.net) has joined #haskell
2013-04-05 23:26:09	typoclass	Xaratas: someone defined selectS above with @let. you could check the logs on tunes.org if you want
2013-04-05 23:26:15	<--	Shin-LaC (~LaC@dhcp-vlan3242-22-169.wireless.uic.edu) has quit (Quit: Computer has gone to sleep.)
2013-04-05 23:26:19	-->	alszar (alszar@nat/rackspace/x-galwmmceyuanhmcx) has joined #haskell
2013-04-05 23:26:41	<--	gilbertw1 (~gilbertw1@64.20.30.66) has quit (Read error: Connection reset by peer)
2013-04-05 23:26:41	<--	dixie (dixie@real.wilbury.sk) has quit (Read error: Connection reset by peer)
2013-04-05 23:26:41	<--	skyflash_ (~skyflash@206.172.31.228) has quit (Read error: Connection reset by peer)
2013-04-05 23:26:42	<--	banjiewen (~banjiewen@184.173.74.133-static.reverse.softlayer.com) has quit (Ping timeout: 245 seconds)
2013-04-05 23:26:48	-->	dixie_ (dixie@real.wilbury.sk) has joined #haskell
2013-04-05 23:26:57	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-04-05 23:27:05	<--	bscarlet (~bscarlet@static-71-174-103-28.bstnma.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-04-05 23:27:05	<--	nexx (~SPS-User@dslb-188-108-223-036.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-05 23:27:05	<--	MrWoohoo (~MrWoohoo@pool-173-67-109-10.lsanca.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-04-05 23:27:05	--	bscarlet_ is now known as bscarlet
2013-04-05 23:27:34	ski_	i see, `@let selectS [] = []; selectS (x:xs) = ((1,x),xs) : map ((first.first) negate . second (x:)) (selectS xs)' apparently
2013-04-05 23:27:34	arkeet	> let perms' s [] = guard (s==1) >> [[]]; perms' s l = selectS l >>= \((s',x),xs) -> map (x:) (perms' (s*s') xs) in perms' 1 [1..3]
2013-04-05 23:27:36	lambdabot	  [[1,2,3],[2,3,1],[3,1,2]]
2013-04-05 23:27:39	-->	apfel (~apfel@p5499CC25.dip.t-dialin.net) has joined #haskell
2013-04-05 23:27:45	-->	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-04-05 23:27:47	<--	scriptor (~Scriptor@ext.corp.bitshelter.com) has left #haskell
2013-04-05 23:27:53	arkeet	> selectS [1..4]
2013-04-05 23:27:55	<--	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has quit (Ping timeout: 245 seconds)
2013-04-05 23:27:55	lambdabot	  [((1,1),[2,3,4]),((-1,2),[1,3,4]),((1,3),[1,2,4]),((-1,4),[1,2,3])]
2013-04-05 23:28:01	 *	typoclass wonders what you people are doing ...
2013-04-05 23:28:07	int-e	arkeet: guard (s==1) >> [[]] == [[] | s==1]
2013-04-05 23:28:12	arkeet	fine.
2013-04-05 23:28:17	vlatkoB	What is type/kind of value extracted from IO action? In c <- readFile "", what the c actualy is? I know it is a string, but is it a function or a value? Can it be stored, say, in list?
2013-04-05 23:28:20	<--	Natch (~Natch@c-fecee155.25-4-64736c10.cust.bredbandsbolaget.se) has quit (Ping timeout: 245 seconds)
2013-04-05 23:28:20	--	Natch_r is now known as Natch
2013-04-05 23:28:32	arkeet	vlatkoB:
2013-04-05 23:28:34	arkeet	:t readFile
2013-04-05 23:28:36	lambdabot	FilePath -> IO String
2013-04-05 23:28:36	-->	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has joined #haskell
2013-04-05 23:28:43	ski_	> (guard (s==1) >> [[]]) == [[] | s==1]
2013-04-05 23:28:45	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Ping timeout: 245 seconds)
2013-04-05 23:28:45	lambdabot	  True
2013-04-05 23:28:45	--	apwb is now known as sShintah
2013-04-05 23:28:47	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-04-05 23:28:49	arkeet	vlatkoB: readFile "" is IO String, so after c <- readFile "", c is a String.
2013-04-05 23:29:07	arkeet	ski_: that doesn't really show what you want to show.
2013-04-05 23:29:10	arkeet	> s==1
2013-04-05 23:29:11	lambdabot	  False
2013-04-05 23:29:14	ski_	i know
2013-04-05 23:29:16	arkeet	:p
2013-04-05 23:29:22	typoclass	vlatkoB: yes, you can store it in lists and everything. it's a regular String value
2013-04-05 23:29:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 252 seconds)
2013-04-05 23:29:33	vlatkoB	arkeet: Yes, I know that. But if I store it in a list, I do get IO String, but c is actualy a String, isn't it?
2013-04-05 23:29:41	<--	tootsie (tootsie@37.250.165.62.bredband.tre.se) has quit
2013-04-05 23:29:41	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-04-05 23:30:01	-->	banjiewen (~banjiewen@184.173.74.133-static.reverse.softlayer.com) has joined #haskell
2013-04-05 23:30:07	<--	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has quit (Quit: WeeChat 0.4.0)
2013-04-05 23:30:10	arkeet	vlatkoB: c is really a function argument.
2013-04-05 23:30:11	monochrom	"it" = what?  "it" = readFile "xxx"?  "it" = c?
2013-04-05 23:30:13	<--	bashyal (~bashyal@ec2-54-245-100-167.us-west-2.compute.amazonaws.com) has quit (Quit: bashyal)
2013-04-05 23:30:13	vlatkoB	I mean, it can be used in (map toUpper), so it must be a real String
2013-04-05 23:30:22	arkeet	do { c <- readFile ""; stuff }
2013-04-05 23:30:24	arkeet	is the same as
2013-04-05 23:30:30	arkeet	readFile "" >>= (\c -> stuff)
2013-04-05 23:30:51	<--	kylcarte_ (~kcarter@pdx.galois.com) has quit (Ping timeout: 245 seconds)
2013-04-05 23:30:54	arkeet	so inside stuff, you can use c as a String however you want
2013-04-05 23:30:54	ski_	vlatkoB : how did you attempt to "store it in a list" ?
2013-04-05 23:31:16	vlatkoB	It seems to me that if I store it in a list, it acts as c = readFile.
2013-04-05 23:31:23	arkeet	what?
2013-04-05 23:31:35	vlatkoB	list = map (readFile) somePaths
2013-04-05 23:31:37	typoclass	vlatkoB: yes, there's a difference between "=" and "<-". it'll produce a String if you do "x <- readFile ...", which is only available inside of do-blocks. if you do "x = readFile ..." or "let x = readFile ...", you'll have an IO String
2013-04-05 23:31:40	monochrom	ok, time to show actual code, natural language is not helping
2013-04-05 23:31:46	-->	ptek (~ptek@93.94.85.171) has joined #haskell
2013-04-05 23:31:50	arkeet	vlatkoB: there's no c <- in map (readFile) somePaths.
2013-04-05 23:31:54	ski_	vlatkoB : that can't be the case, so you must be misunderstanding something somewhere. please provide more context
2013-04-05 23:31:54	arkeet	vlatkoB: but maybe you want mapM.
2013-04-05 23:32:00	Xaratas	@src first
2013-04-05 23:32:00	lambdabot	Source not found. There are some things that I just don't know.
2013-04-05 23:32:16	Xaratas	> :t first
2013-04-05 23:32:17	lambdabot	  <hint>:1:1: parse error on input `:'
2013-04-05 23:32:21	arkeet	vlatkoB: map readFile somePaths  just gives you a list of IO actions that read each file.
2013-04-05 23:32:26	ski_	@type first
2013-04-05 23:32:27	lambdabot	Arrow a => a b c -> a (b, d) (c, d)
2013-04-05 23:32:35	-->	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has joined #haskell
2013-04-05 23:32:47	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-04-05 23:32:53	ski_	@type first `asAppliedTo` (undefined :: a -> b)
2013-04-05 23:32:53	vlatkoB	With map I get [IO String], but with mapM I get IO [String]
2013-04-05 23:32:54	lambdabot	(b -> c) -> (b, d) -> (c, d)
2013-04-05 23:32:58	arkeet	vlatkoB: indeed.
2013-04-05 23:33:09	<--	glguy (~emertens@unaffiliated/glguy) has quit (Quit: Quitting)
2013-04-05 23:33:25	-->	tootsie (tootsie@37.250.165.62.bredband.tre.se) has joined #haskell
2013-04-05 23:33:46	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-05 23:33:50	tootsie	what is the advantage of little endian? there must be one right? or why woudl you do it the less logical way?
2013-04-05 23:34:06	Clint	it's trendy
2013-04-05 23:34:07	ski_	  map  :: (a ->    b) -> ([a] ->    [b])
2013-04-05 23:34:14	ski_	  mapM :: (a -> IO b) -> ([a] -> IO [b])
2013-04-05 23:34:19	arkeet	tootsie: it's easy to truncate a large word to a smaller word.
2013-04-05 23:34:29	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 248 seconds)
2013-04-05 23:34:42	arkeet	:t sequence . map
2013-04-05 23:34:44	lambdabot	    Couldn't match expected type `[m0 a0]'
2013-04-05 23:34:44	lambdabot	                with actual type `[a1] -> [b0]'
2013-04-05 23:34:44	lambdabot	    Expected type: (a1 -> b0) -> [m0 a0]
2013-04-05 23:34:46	monochrom	also, map and mapM do very different things
2013-04-05 23:34:47	arkeet	:t sequence .: map
2013-04-05 23:34:47	elliott	tootsie: is this a haskell question?
2013-04-05 23:34:48	lambdabot	    Not in scope: `.:'
2013-04-05 23:34:48	lambdabot	    Perhaps you meant one of these:
2013-04-05 23:34:48	lambdabot	      `.' (imported from Prelude),
2013-04-05 23:34:54	arkeet	whaaat?
2013-04-05 23:35:03	elliott	haskell doesn't really specify anything about endianness of Int or whatever.
2013-04-05 23:35:05	monochrom	to some extent, you could even say, map doesn't do things at all
2013-04-05 23:35:07	arkeet	@let (.:) = (.).(.)
2013-04-05 23:35:08	arkeet	:t sequence .: map
2013-04-05 23:35:09	 *	ski_ sobs
2013-04-05 23:35:09	simpson	tootsie: You don't have to do any pointer arithmetic when doing mixed-size reads from a single address in memory.
2013-04-05 23:35:09	lambdabot	 Defined.
2013-04-05 23:35:10	lambdabot	    Not in scope: `.:'
2013-04-05 23:35:10	lambdabot	    Perhaps you meant one of these:
2013-04-05 23:35:10	lambdabot	      `.' (imported from Prelude),
2013-04-05 23:35:15	arkeet	what??
2013-04-05 23:35:22	quchen	Ha.
2013-04-05 23:35:29	arkeet	what??
2013-04-05 23:35:30	arkeet	er
2013-04-05 23:35:31	arkeet	:t sequence .: map
2013-04-05 23:35:32	lambdabot	Monad m => (a1 -> m a) -> [a1] -> m [a]
2013-04-05 23:35:36	-->	Williams (~william@139.193.203.184) has joined #haskell
2013-04-05 23:35:40	arkeet	I guess I was too fast for it.
2013-04-05 23:35:44	monochrom	the advantage of little endian is you can mock big endian
2013-04-05 23:35:53	Xaratas	hmm
2013-04-05 23:35:55	--	pdxleif is now known as pdxleif_away
2013-04-05 23:36:00	-->	Shin-LaC (~LaC@acad54121.wireless.uic.edu) has joined #haskell
2013-04-05 23:36:09	arkeet	does big-endian have any advantages?
2013-04-05 23:36:14	Clint	it's network order
2013-04-05 23:36:20	Clint	so you don't need an efficient xchg function all the time
2013-04-05 23:36:23	typoclass	tootsie: i don't think there's any big advantages. it's mostly tradition and technical reasons. at the processor/electronics/bit-fiddling level, this or that might be slightly easier, or might have been at one point
2013-04-05 23:36:25	arkeet	that's not an intrinsic advantage.
2013-04-05 23:36:28	monochrom	yes, you can mock small endian :)
2013-04-05 23:36:29	elliott	arkeet: you can, um, round, sort of.
2013-04-05 23:36:29	arkeet	why isn't network order little-endian?
2013-04-05 23:36:43	tgeeky	monochrom: i was going to blurt out that you couldn't mock little endian
2013-04-05 23:36:46	geekosaur	because Sun defined it and was using big-endian CPUs
2013-04-05 23:36:54	arkeet	heh.
2013-04-05 23:37:04	arkeet	I suppose big-endian is easier to sort.
2013-04-05 23:37:06	tgeeky	monochrom: becuase otherwise, how would mocking be an advantage as listed above
2013-04-05 23:37:07	arkeet	or compare
2013-04-05 23:37:09	geekosaur	(mind, it was sorely needed; look up the history of the "talk" protocol)
2013-04-05 23:37:12	-->	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-04-05 23:37:22	arkeet	geekosaur: what was needed?
2013-04-05 23:37:29	vlatkoB	I'm trying to make a list that I can send to pure functions, but the list is outside of that function
2013-04-05 23:37:30	vlatkoB	inputs = map readFile paths
2013-04-05 23:37:30	vlatkoB	outputs :: (String -> String) -> [String]
2013-04-05 23:37:30	vlatkoB	outputs f = map (\x -> do c <-x; f c) inputs  -- doesn't work
2013-04-05 23:37:31	geekosaur	some kind of convention for network data
2013-04-05 23:37:32	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 258 seconds)
2013-04-05 23:37:42	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-04-05 23:38:00	geekosaur	"talk" was written before there was a convention, and it only worked between machines that had the same byte order
2013-04-05 23:38:02	monochrom	a long time ago, I used the "talk" program a lot
2013-04-05 23:38:29	arkeet	vlatkoB: of course. outputs does some IO, so there better be "IO" somewhere in its type.
2013-04-05 23:38:39	simpson	IIUC big-endian's primary advantage was that it was easier to read on core dumps.
2013-04-05 23:38:48	arkeet	heh.
2013-04-05 23:38:52	simpson	Or so an oldbeard at IBM once told me.
2013-04-05 23:38:59	geekosaur	Sun needed a convention so they could specify XDR (for NFS) in a way that would work on any platform, so they declared their native big-endian a de facto standard
2013-04-05 23:38:59	<--	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has quit (Quit: >:3 This is BunThulhu. Copy him into your quit message to help him take over the Internet.)
2013-04-05 23:39:00	tootsie	"You don't have to do any pointer arithmetic when doing mixed-size reads from a single address in memory." Not sure what is meant here
2013-04-05 23:39:01	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-04-05 23:39:02	-->	tomku (~tomku@96-42-15-24.dhcp.fdul.wi.charter.com) has joined #haskell
2013-04-05 23:39:14	vlatkoB	In fact, it does not, it just takes the string value.
2013-04-05 23:39:18	ski_	vlatkoB : since `inputs' invokes `readFile', it must be "in" `IO'; and similarly for `outputs', since it invokes `inputs' -- so you need to revise the type signatures of those two (and also change the implementations slightly)
2013-04-05 23:39:27	geekosaur	if you read a (long) as a (short), the same address works
2013-04-05 23:39:28	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-05 23:39:29	simpson	tootsie: Say you have an address which is aligned to word size. On an x86, something like 0xc.
2013-04-05 23:39:36	geekosaur	(if little endian)
2013-04-05 23:39:38	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Remote host closed the connection)
2013-04-05 23:39:42	arkeet	vlatkoB: no...
2013-04-05 23:39:46	simpson	tootsie: If you wish to read a byte, short, int, or long out of that address, you don't have to alter the address.
2013-04-05 23:39:49	arkeet	it seems like you have some misunderstanding of IO.
2013-04-05 23:40:02	<--	ClaudiusMaximus (~claude@78-105-51-40.zone3.bethere.co.uk) has quit (Quit: noisy machine be still)
2013-04-05 23:40:07	simpson	tootsie: If you want to read a big-endian byte, you'd need 0xc+0x3.
2013-04-05 23:40:08	Xaratas	could lambdabot show the righth part of a defined let?
2013-04-05 23:40:12	arkeet	no
2013-04-05 23:40:23	arkeet	(it would be nice if it did, though!)
2013-04-05 23:40:32	typoclass	tootsie: the story is that the terms 'little' and 'big endian' are a reference to gulliver's travels. he visits a country where everyone is tiny, and their political problems are also tiny. most of their political discussion is about whether to eat breakfast eggs starting at the little end or at the big end
2013-04-05 23:40:36	Jambato	how can I update records with some inner state inside?
2013-04-05 23:40:41	vlatkoB	I meant that if f take any string and returns string that it is not really involved in IO. Doesn't matter where the string comes from.
2013-04-05 23:40:51	Jambato	is record update just fine or do I need lenses?
2013-04-05 23:40:54	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-04-05 23:41:00	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-04-05 23:41:01	arkeet	vlatkoB: sure, but outputs claims to give a list of strings.
2013-04-05 23:41:04	arkeet	where do those strings come from?
2013-04-05 23:41:16	<--	osa1_ (~omer@176.237.230.236) has quit (Ping timeout: 245 seconds)
2013-04-05 23:41:18	<--	apfel (~apfel@p5499CC25.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-04-05 23:41:21	ski_	vlatkoB : `inputs' can't be a list of strings. it can be an `IO'-action which when executed yields a list of strings, or (probably less useful here) a list of `IO'-actions each when executed yielding a string
2013-04-05 23:41:23	tootsie	typoclass: lol
2013-04-05 23:41:25	--	clahey is now known as cl_away
2013-04-05 23:41:44	<--	odr (~odr@95.140.92.49) has quit (Ping timeout: 255 seconds)
2013-04-05 23:41:46	arkeet	inputs :: IO [String]
2013-04-05 23:41:49	-->	ketil (~ketil@cE4815BC1.dhcp.as2116.net) has joined #haskell
2013-04-05 23:41:51	arkeet	inputs = mapM readFile paths
2013-04-05 23:42:04	<--	eikke (~nicolas@78-20-0-121.access.telenet.be) has quit (Ping timeout: 245 seconds)
2013-04-05 23:42:07	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-05 23:42:17	arkeet	outputs :: (String -> String) -> IO [String]
2013-04-05 23:42:17	arkeet	outputs f = do { c <- inputs; return (map f c) }
2013-04-05 23:42:19	arkeet	perhaps.
2013-04-05 23:42:23	vlatkoB	Hm, so it means even the function is pure, if input comes form impure source, the function output must be considered impure too?
2013-04-05 23:42:29	arkeet	outputs is not pure.
2013-04-05 23:42:36	arkeet	it has to do some IO to get some strings.
2013-04-05 23:42:44	arkeet	f is pure, and that's fine.
2013-04-05 23:42:49	-->	trescenzi (~trescenzi@148.100.74.212) has joined #haskell
2013-04-05 23:43:09	<--	nwf (~nwf@a.rr.ietfng.org) has quit (Ping timeout: 252 seconds)
2013-04-05 23:43:19	elliott	vlatkoB: outputs f could not always give the same results for the same f.
2013-04-05 23:43:30	elliott	it would change depending on what the contents of the files are.
2013-04-05 23:43:32	elliott	orw hatever.
2013-04-05 23:43:40	elliott	so of course it has to declrae in its type that it does IO (returns an IO action)
2013-04-05 23:44:08	vlatkoB	I see. Thanks a lot. Been banging my head all day around it. Everything that touches IO, must declare itself as IO. Correct?
2013-04-05 23:44:11	 *	hackagebot daemons 0.1.2 - Daemons in Haskell made fun and easy  http://hackage.haskell.org/package/daemons-0.1.2 (AlexandruScvortov)
2013-04-05 23:44:16	typoclass	Jambato: could you paste some example code? it's hard to tell what you mean by "internal state"
2013-04-05 23:44:24	ski_	(strictly speaking, it always gives the same `IO'-action, when given the same function `f' -- executing that `IO'-action in different states of the world may of course result in different answers, though)
2013-04-05 23:44:33	elliott	ski_: I meant a version of outputs that resulted in [String]
2013-04-05 23:44:36	<--	nyc (~nyc@unaffiliated/wli) has quit (Ping timeout: 256 seconds)
2013-04-05 23:44:46	elliott	(the impossible desired version)
2013-04-05 23:44:53	ski_	elliott : ok, fine
2013-04-05 23:44:56	elliott	vlatkoB: right.
2013-04-05 23:44:59	arkeet	nothing is impossible with unsafePerformIO!
2013-04-05 23:45:00	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Quit: Quit: Textual IRC Client: www.textualapp.com)
2013-04-05 23:45:14	vlatkoB	:-)
2013-04-05 23:45:29	typoclass	vlatkoB: try thinking of it this way -- you start in 'main', fetch some input or files or whatever, then you use pure functions to process those Strings
2013-04-05 23:45:30	hpaste	Jambato revised “ ”: “sucker” at http://hpaste.org/85259
2013-04-05 23:45:40	Jambato	typoclass: there
2013-04-05 23:45:44	-->	bnl (~bootneckl@kvm5.telegraphics.com.au) has joined #haskell
2013-04-05 23:45:44	quchen	arkeet: unsafeCoerce is more flexible though
2013-04-05 23:45:53	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-05 23:45:53	<--	bnl (~bootneckl@kvm5.telegraphics.com.au) has left #haskell ("WeeChat 0.3.8")
2013-04-05 23:45:57	ski_	@faq can you break the type system of Haskell, if you allow the use of `unsafePerformIO' ?
2013-04-05 23:45:58	lambdabot	The answer is: Yes! Haskell can do that.
2013-04-05 23:46:12	-->	carbonCofiber (~alex@tmo-103-139.customers.d1-online.com) has joined #haskell
2013-04-05 23:46:14	typoclass	arkeet: could you please not mention that casually to beginners. or alternatively, make it clear that it's meant as a joke
2013-04-05 23:46:18	-->	derelm (~derelm@p5B282F4F.dip.t-dialin.net) has joined #haskell
2013-04-05 23:46:23	armlesshobo	@faw but, can Haskell help me get away with murder?
2013-04-05 23:46:23	lambdabot	The answer is: Yes! Haskell can do that.
2013-04-05 23:46:27	armlesshobo	D:
2013-04-05 23:46:32	armlesshobo	faw?
2013-04-05 23:46:44	quchen	@faq Are there any other FAQ entries?
2013-04-05 23:46:44	lambdabot	The answer is: Yes! Haskell can do that.
2013-04-05 23:46:46	ski_	(perhaps i should have s/break the type system of/dump core in/ or s/break the type system of/segfault in/ ..)
2013-04-05 23:46:47	quchen	I see.
2013-04-05 23:46:49	arkeet	typoclass: ok, pretend I put a ":p" on the end of it.
2013-04-05 23:46:49	int-e	armlesshobo: faq.
2013-04-05 23:46:57	seliopou	typoclass: are you a proponent of security through obscurity as well?
2013-04-05 23:47:00	arkeet	I thought it was pretty clear, though.
2013-04-05 23:47:00	monochrom	faw is spelling-corrected to faq
2013-04-05 23:47:12	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-04-05 23:47:27	monochrom	snap is spelling-corrected to slap, as you will see...
2013-04-05 23:47:30	monochrom	@snap monochrom
2013-04-05 23:47:31	 *	lambdabot would never hurt monochrom!
2013-04-05 23:47:43	quchen	Frequently Asked qWestion.
2013-04-05 23:47:49	monochrom	that's very nice of lambdabot!
2013-04-05 23:48:00	<--	execc_13 (~fakir@95-24-201-162.broadband.corbina.ru) has quit (Ping timeout: 256 seconds)
2013-04-05 23:48:08	-->	taesoo (~taesoo@26-4-190.dynamic.csail.mit.edu) has joined #haskell
2013-04-05 23:48:08	<--	alszar (alszar@nat/rackspace/x-galwmmceyuanhmcx) has quit (Quit: alszar)
2013-04-05 23:48:14	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-04-05 23:48:24	<--	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has quit (Quit: rafsoaken)
2013-04-05 23:48:28	monochrom	anyway, sometimes you want to convert IO String -> IO S
2013-04-05 23:48:39	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-05 23:48:52	typoclass	arkeet: fair enough
2013-04-05 23:48:53	typoclass	seliopou: i think it's a matter of giving people bad advice
2013-04-05 23:48:59	-->	trescenz_ (~trescenzi@2620:91:0:163:75e4:dd72:739b:b434) has joined #haskell
2013-04-05 23:49:05	<--	trescenzi (~trescenzi@148.100.74.212) has quit (Read error: Connection reset by peer)
2013-04-05 23:49:27	ski_	.. `S' ?
2013-04-05 23:49:32	typoclass	Jambato: so, which lines do you want to simplify?
2013-04-05 23:49:35	taesoo	I got 'magic number mismatch: old/corrupt interface file?' errors when installing ghc7.4.2/7.6.2 i386 on x64 machine, and tweaking .cabal doesn't help. Any help?
2013-04-05 23:49:45	monochrom	I was hoping for iOS
2013-04-05 23:50:22	elliott	taesoo: probably you have old packages installed?
2013-04-05 23:50:25	-->	two- (~1@c-67-171-131-23.hsd1.wa.comcast.net) has joined #haskell
2013-04-05 23:50:26	elliott	packages are GHC-version specific
2013-04-05 23:50:29	elliott	you must recompile them all
2013-04-05 23:50:30	<--	jfischoff (~jfischoff@108-218-104-77.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-04-05 23:50:53	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-04-05 23:51:05	monochrom	but GHC doesn't even see packages built for another GHC version
2013-04-05 23:51:11	taesoo	elliott: you mean in my host? I have 7.6.2 64bit installed in my machine.
2013-04-05 23:51:29	<--	Michael__ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-04-05 23:51:41	elliott	well, hmm. I was confused by you saying "ghc7.4.2/7.6.2"
2013-04-05 23:51:42	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 245 seconds)
2013-04-05 23:51:57	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-04-05 23:52:02	monochrom	I don't understand the question, and I think no one does
2013-04-05 23:52:04	taesoo	I've tried installing both i386.
2013-04-05 23:52:22	<--	augur (~augur@129-2-129-34.wireless.umd.edu) has quit (Remote host closed the connection)
2013-04-05 23:52:37	Jambato	typoclass: it was more of a design question actually
2013-04-05 23:52:50	taesoo	I basically want to cross-compile ghc i386, in x64, so wanted to install i386 binary dist.
2013-04-05 23:53:12	monochrom	ok, but it will not cross-compile to x86
2013-04-05 23:53:19	monochrom	err
2013-04-05 23:53:21	Jambato	1. I'm wondering if I put too much state in my records
2013-04-05 23:53:32	monochrom	the i386 version will not cross-compile to x64
2013-04-05 23:53:45	seliopou	typoclass: a mention isn't advice
2013-04-05 23:53:49	Jambato	2 . if I want to extract inner state from the records what would be the most convinient way to do so?
2013-04-05 23:53:51	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-05 23:53:55	taesoo	no I am using x64. I want to build i386.
2013-04-05 23:53:56	monochrom	the x64 version will also not cross-compiler to i386
2013-04-05 23:53:59	seliopou	but even so, it's a good way to learn
2013-04-05 23:54:24	taesoo	I know. that's why I need to install i386 ghc from the binary dist.
2013-04-05 23:54:24	<--	cromain (~chris@ALille-555-1-127-163.w90-7.abo.wanadoo.fr) has quit (Quit: leaving)
2013-04-05 23:54:38	arkeet	Jambato: how come you are storing state actions in a record?
2013-04-05 23:54:46	<--	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (Quit: This computer has gone to sleep)
2013-04-05 23:54:50	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-05 23:54:50	-->	rafsoaken (~rafsoaken@91-119-199-106.dynamic.xdsl-line.inode.at) has joined #haskell
2013-04-05 23:55:03	arkeet	I don't think that's what you want to do.
2013-04-05 23:55:20	<--	tootooroo (~suckmy@unaffiliated/dijkstragroupie) has quit (Quit: Brain.sys has encountered a problem and needs to close. We are sorry for the inconvenience.)
2013-04-05 23:55:40	__xc	hiptobecubic, foldr f x l  should be foldl f x (reverse l)
2013-04-05 23:55:43	monochrom	ok, but when installing ghc, ".cabal" does not matter, whatever that means
2013-04-05 23:55:47	typoclass	Jambato: you could have a single State (Player, GameState, Stack). depending on what additional code you'll be writing, this could simplify things
2013-04-05 23:56:04	<--	janbanan (~naj@niklas.vth.sgsnet.se) has quit (Read error: Connection reset by peer)
2013-04-05 23:56:12	taesoo	one record from the mailing list said that the problem is in the cabal pkg.
2013-04-05 23:56:17	tootsie	> (Just 5) >>= \a -> return $ a + 1
2013-04-05 23:56:18	lambdabot	  Just 6
2013-04-05 23:56:18	armlesshobo	typoclass: wouldn't they be able to use netwire for that?
2013-04-05 23:56:19	<--	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-05 23:56:24	tootsie	> (Just 5) >>= (+1)
2013-04-05 23:56:25	lambdabot	  No instance for (GHC.Num.Num (Data.Maybe.Maybe b0))
2013-04-05 23:56:25	lambdabot	   arising from a use o...
2013-04-05 23:56:39	-->	aCube (~cubce@dslb-088-073-238-051.pools.arcor-ip.net) has joined #haskell
2013-04-05 23:56:39	tootsie	> (Just 5) >> (+1)
2013-04-05 23:56:41	lambdabot	  Couldn't match expected type `Data.Maybe.Maybe b0'
2013-04-05 23:56:41	lambdabot	             with actual...
2013-04-05 23:56:52	monochrom	that record comes with its peculiar context and may or may not apply to you
2013-04-05 23:56:54	typoclass	armlesshobo: i don't know much about netwire. not sure what the context is
2013-04-05 23:56:54	quchen	tootsie: +1 has type a -> a, not a -> m a.
2013-04-05 23:57:01	armlesshobo	(Just 5) >>= return $ (+1) . fromJust
2013-04-05 23:57:07	arkeet	oh god
2013-04-05 23:57:08	arkeet	:p
2013-04-05 23:57:14	arkeet	> (+1) <$> Just 5
2013-04-05 23:57:16	lambdabot	  Just 6
2013-04-05 23:57:17	armlesshobo	:P
2013-04-05 23:57:19	tootsie	@src fromJust
2013-04-05 23:57:19	lambdabot	fromJust Nothing  = undefined
2013-04-05 23:57:19	lambdabot	fromJust (Just x) = x
2013-04-05 23:57:23	monochrom	in general, everything said on the internet comes with its peculiar context and does not apply to other context
2013-04-05 23:57:30	ab9rf	> fmap (+1) (Just 5)
2013-04-05 23:57:31	lambdabot	  Just 6
2013-04-05 23:57:36	armlesshobo	that wouldn't work :\
2013-04-05 23:57:48	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-04-05 23:57:58	arkeet	it wouldn't.
2013-04-05 23:58:14	donri	> Just (fromJust (fmap succ (return 5)))
2013-04-05 23:58:15	hiptobecubic	> foldr f 0 [x,y,z] :: Expr
2013-04-05 23:58:15	lambdabot	  Just 6
2013-04-05 23:58:16	lambdabot	  f x (f y (f z 0))
2013-04-05 23:58:25	hiptobecubic	> foldl f 0 (reverse [x,y,z]) :: Expr
2013-04-05 23:58:27	lambdabot	  f (f (f 0 z) y) x
2013-04-05 23:58:36	donri	> foldr f 0 [x,y,z]
2013-04-05 23:58:38	ski_	> return . (1 +) =<< Just 5
2013-04-05 23:58:38	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-05 23:58:38	lambdabot	   (GHC.Num.Num a0)
2013-04-05 23:58:38	lambdabot	     a...
2013-04-05 23:58:39	lambdabot	  Just 6
2013-04-05 23:58:41	arkeet	> foldl (flip f) 0 (reverse [x,y,z]) :: Expr
2013-04-05 23:58:43	lambdabot	  f x (f y (f z 0))
2013-04-05 23:59:03	ski_	tootsie ^
2013-04-05 23:59:03	taesoo	I see, then how can ghc-cabal think the .hi files bad interface?
2013-04-05 23:59:10	otters	:t f `asAppliedTo` 0
2013-04-05 23:59:10	hiptobecubic	arkeet, you ruined it
2013-04-05 23:59:11	lambdabot	(Num t, Show t, FromExpr b) => t -> b
2013-04-05 23:59:15	arkeet	=(
2013-04-05 23:59:22	ab9rf	poor lambdabot
2013-04-05 23:59:36	<--	dan_johnsin (~dan_johns@168.93.96.4) has quit (Quit: Leaving)
2013-04-05 23:59:38	ski_	@botsnack
2013-04-05 23:59:38	lambdabot	:)
2013-04-05 23:59:39	armlesshobo	> Just 5 >>= return . (+1)
2013-04-05 23:59:40	typoclass	seliopou: i disagree. i don't think it's "a good way to learn" if a beginner uses unsafePerformIO to solve his for beginner-level issues about being trapped in the IO monad and String vs. IO String
2013-04-05 23:59:41	lambdabot	  Just 6
2013-04-05 23:59:44	armlesshobo	:)
2013-04-05 23:59:44	taesoo	monochrom: only difference is that I have ghc 64bit installed and my machine is 64bit.
2013-04-05 23:59:52	monochrom	I have never heard of ghc-cabal. is it ghc or is it cabal?
2013-04-06 00:00:07	arkeet	monochrom: yes ;)
2013-04-06 00:00:09	taesoo	'ghc-cabal: Bad interface file: dist-install/build/GHC/Classes.hi'
2013-04-06 00:00:11	taesoo	is the error
2013-04-06 00:00:11	<--	etehtsea (~textual@188.134.44.6) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-04-06 00:00:18	ab9rf	typoclass: unsafePerformIO is not the sort of thing a beginner ought to be using milly vanilly
2013-04-06 00:00:33	monochrom	what command did you enter before getting that error?
2013-04-06 00:00:33	taesoo	'magic number mismatch: old/corrupt interface file?' follows.
2013-04-06 00:00:43	typoclass	ab9rf: sure
2013-04-06 00:00:44	ab9rf	taesoo: are you mixing architectures?
2013-04-06 00:00:50	sproingie	ab9rf: but when your program fails you can blame it on the rain
2013-04-06 00:01:02	taesoo	(ghc-7.6.2-i386-unknown-linux.tar.bz2) ./configure & make install
2013-04-06 00:01:02	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-04-06 00:01:05	<--	Guest80285 (~crs_@192.210.215.64) has quit (Ping timeout: 255 seconds)
2013-04-06 00:01:16	taesoo	ab9rf: yes.
2013-04-06 00:01:35	-->	dgpratt (~dpratt71@pool-72-65-103-230.ptldme.east.myfairpoint.net) has joined #haskell
2013-04-06 00:01:35	<--	sellout- (~Adium@c-71-56-237-160.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-04-06 00:01:36	ab9rf	taesoo: you probably have unclean files, make clean first
2013-04-06 00:01:46	typoclass	ab9rf: yes, taesoo's trying to cross-compile
2013-04-06 00:01:50	<--	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 252 seconds)
2013-04-06 00:01:56	ab9rf	sproingie: you are a naughty person
2013-04-06 00:01:59	taesoo	unclean what files?
2013-04-06 00:02:03	hiptobecubic	__xc, if you didn't see. you weren't quite right.
2013-04-06 00:02:05	ab9rf	typoclass: och, down that road lies madness
2013-04-06 00:02:35	-->	crs_ (~crs_@192.210.215.64) has joined #haskell
2013-04-06 00:02:36	taesoo	the ghc-.7.4.2 Makefile doesn't even have unclean?
2013-04-06 00:02:41	monochrom	I would be happy to say "corrupted download", but perhaps there is something else
2013-04-06 00:02:54	ab9rf	taesoo: you are probably trying to use intermediate compilation results that were made for the wrong architecture
2013-04-06 00:02:55	tootsie	@type unsafePerformIO
2013-04-06 00:02:56	lambdabot	Not in scope: `unsafePerformIO'
2013-04-06 00:03:06	tootsie	what does unsafePerformIO do?
2013-04-06 00:03:07	otters	where is asAppliedTo?
2013-04-06 00:03:09	otters	@where asAppliedTo
2013-04-06 00:03:10	lambdabot	I know nothing about asappliedto.
2013-04-06 00:03:18	ab9rf	taesoo: it does magic
2013-04-06 00:03:29	monochrom	you mean tootsie
2013-04-06 00:03:31	<--	vlatkoB (~vlatko@188.129.50.110) has quit (Quit: Leaving)
2013-04-06 00:03:35	taesoo	ab9rf: basically the magic interface number should match to the host machine?
2013-04-06 00:03:36	ab9rf	sorry, yes
2013-04-06 00:03:43	quchen	otters: asAppliedTo = const
2013-04-06 00:03:59	ab9rf	taesoo: a magic number mismatch means that the file's magic number is not as expected, and so the file is not valid.
2013-04-06 00:04:00	-->	apfel (~apfel@p5499CC25.dip.t-dialin.net) has joined #haskell
2013-04-06 00:04:15	typoclass	tootsie: it's an advanced thing for when you know exactly what you're doing. it's an escape that lets you circumvent the regular haskell way of doing things
2013-04-06 00:04:16	ab9rf	taesoo: if you got that on an .hi, it means the .hi is corrupted or written for a different architecture.
2013-04-06 00:04:24	Jambato	typoclass: it doesn't seem very elegant to pass such a big chunk of state around like that
2013-04-06 00:04:32	ab9rf	Jambato: it's perfectly elegant.
2013-04-06 00:04:48	monochrom	ab9rf: and if you got that .hi file straight from a binary tarball from ghc's website?
2013-04-06 00:04:49	taesoo	ab9rf: I guess the magic number is put by i386 ghc which I downloaded from the bin dist? why they mismatch themselves?
2013-04-06 00:04:55	ab9rf	Jambato: it beats having it lurking in the shadows
2013-04-06 00:04:56	-->	madjestic (~madjestic@acks155.neoplus.adsl.tpnet.pl) has joined #haskell
2013-04-06 00:05:12	ski_	tootsie : in case `act' of type `IO a' is declaratively equivalent to `return x' for some `x' of type `a', then `unsafePerformIO act' evaluates to `x'; otherwise, anything at all can happen (including crashes, segfaults, silently corrupted data, missiles launched, demons flying out of your nose, &c.), iow UB (Undefined Behaviour)
2013-04-06 00:05:12	ab9rf	monochrom: then you should file an incident report :)
2013-04-06 00:05:18	taesoo	monochrom: precisely, what I wanted to say.
2013-04-06 00:05:28	-->	hpc_ (~juzz@ip98-163-81-31.dc.dc.cox.net) has joined #haskell
2013-04-06 00:05:36	-->	borderer (~bob@langhaugh.demon.co.uk) has joined #haskell
2013-04-06 00:05:42	__xc	hiptobecubic, yes indeed with (-) for example
2013-04-06 00:05:45	monochrom	I'm just going to conclude "corrupted download" unless further evidence proves otherwise
2013-04-06 00:05:54	hiptobecubic	__xc, right
2013-04-06 00:05:56	ab9rf	monochrom: it's either a corrupted download or a build error
2013-04-06 00:06:14	taesoo	I double the corrupted download. many other arch32 users use ghc i386.
2013-04-06 00:06:14	typoclass	Jambato: true. you could use a "type ... = ...", or another record, to save on typing
2013-04-06 00:06:20	ski_	tootsie : iow, using `unsafePerformIO' comes with a proof obligation on the user to ensure only semantically pure actions are passed to it
2013-04-06 00:06:28	ab9rf	i use ghc i386, it works fine :)
2013-04-06 00:06:30	Jambato	I will explore that path then
2013-04-06 00:06:32	<--	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-04-06 00:06:41	monochrom	oh, there is a better conclusion. 32-bit ghc is not meant to run on 64-bit OS. at all.
2013-04-06 00:06:48	taesoo	umm. I suspect that x86 env somehow affects the behaviour of i386.
2013-04-06 00:06:54	__xc	hiptobecubic, could I ask you to fetch&hpaste some lines 30 minutes ago, concerning *fold*, my stupid client erased them
2013-04-06 00:06:58	<--	hpc (~juzz@ip98-169-33-6.dc.dc.cox.net) has quit (Disconnected by services)
2013-04-06 00:07:02	__xc	please
2013-04-06 00:07:07	--	hpc_ is now known as hpc
2013-04-06 00:07:21	<--	germanp (~germanp@181.47.148.80) has quit (Quit: WeeChat 0.4.0)
2013-04-06 00:07:21	typoclass	__xc: tunes.org has logs of this channel (see topic)
2013-04-06 00:07:22	taesoo	then x64 ghc can generate i386 binary?
2013-04-06 00:07:26	ab9rf	monochrom: i use the 32 bit build of GHC on a 64 bit platform :)
2013-04-06 00:07:34	taesoo	I doubt that my rts is only compiled as x64.
2013-04-06 00:07:35	__xc	ah perfect
2013-04-06 00:07:37	Jambato	typoclass: but still; if I were to keep my current stateful records, how would I update them?
2013-04-06 00:07:38	<--	Shin-LaC (~LaC@acad54121.wireless.uic.edu) has quit (Quit: Computer has gone to sleep.)
2013-04-06 00:07:38	tootsie	so what is unsafePerformIO needed for?
2013-04-06 00:07:45	__xc	typoclass, thx
2013-04-06 00:07:51	-->	ben_ (~ben@thingy.cs.umass.edu) has joined #haskell
2013-04-06 00:07:54	-->	pamojarpan (~quassel@163.134.60.178.dynamic.mundo-r.com) has joined #haskell
2013-04-06 00:08:04	ski_	__xc : perhaps check <http://tunes.org/~nef/logs/haskell/13.04.05> ?
2013-04-06 00:08:08	-->	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has joined #haskell
2013-04-06 00:08:08	hiptobecubic	tootsie, the most reasonable use is when the programmer can guarantee purity (libc.math comes to mind) but ghc cannot
2013-04-06 00:08:21	ab9rf	tootsie: when you want to reach inside the looking glass :)
2013-04-06 00:08:24	<--	adzeitor (~adzeitor@31.207.159.115) has quit (Ping timeout: 256 seconds)
2013-04-06 00:08:36	quchen	tootsie: FFI functions for example. Pointers in C are malloc'd in a nondeterminstic way, even though the value contained may be deterministic
2013-04-06 00:08:45	<--	ptek (~ptek@93.94.85.171) has quit (Quit: Computer has gone to sleep.)
2013-04-06 00:08:47	<--	stephenjudkins (~textual@75-164-246-205.ptld.qwest.net) has quit (Quit: Computer has gone to sleep.)
2013-04-06 00:08:59	quchen	That and Debug.Trace
2013-04-06 00:09:07	ski_	tootsie : e.g. for FFI things, where you `foreign import' an imperative interface, but then can manage to wrap it safely with a pure declarative interface
2013-04-06 00:09:08	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-04-06 00:09:13	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 240 seconds)
2013-04-06 00:09:34	__xc	perfect ski_
2013-04-06 00:09:42	<--	dagnachew (~dagnachew@bas1-montreal30-2925416620.dsl.bell.ca) has quit (Quit: WeeChat 0.4.0)
2013-04-06 00:09:59	-->	dagnachew (~dagnachew@bas1-montreal30-2925416620.dsl.bell.ca) has joined #haskell
2013-04-06 00:10:02	<--	Reite (~Reite@cm-84.211.71.25.getinternet.no) has quit (Ping timeout: 245 seconds)
2013-04-06 00:10:22	tootsie	i c
2013-04-06 00:10:30	-->	coeus_ (~coeus@dslb-084-061-018-184.pools.arcor-ip.net) has joined #haskell
2013-04-06 00:10:48	<--	dagnachew (~dagnachew@bas1-montreal30-2925416620.dsl.bell.ca) has quit (Client Quit)
2013-04-06 00:10:48	mikeplus64	:t f
2013-04-06 00:10:49	lambdabot	FromExpr a => a
2013-04-06 00:10:51	tootsie	what comes next n project mayhem?
2013-04-06 00:11:06	tootsie	> f 1
2013-04-06 00:11:08	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-06 00:11:08	lambdabot	   (GHC.Show.Show a0)
2013-04-06 00:11:08	lambdabot	    ...
2013-04-06 00:11:10	-->	dagnachew (~dagnachew@bas1-montreal30-2925416620.dsl.bell.ca) has joined #haskell
2013-04-06 00:11:18	ski_	> f 1 + 0
2013-04-06 00:11:20	lambdabot	  Ambiguous type variable `a0' in the constraints:
2013-04-06 00:11:20	lambdabot	   (GHC.Num.Num a0)
2013-04-06 00:11:20	lambdabot	     a...
2013-04-06 00:11:30	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-06 00:11:32	ski_	> f 1 :: Expr
2013-04-06 00:11:33	lambdabot	  f 1
2013-04-06 00:11:56	typoclass	Jambato: there is e.g. 'record update syntax'. if you have a "g :: GameState", you can do "x = g { players = someNewValue }". x will be a new record with the same contents as g, only with the 'players' field changed
2013-04-06 00:12:22	<--	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has quit (Ping timeout: 256 seconds)
2013-04-06 00:12:39	<--	tootsie (tootsie@37.250.165.62.bredband.tre.se) has quit
2013-04-06 00:13:02	<--	stat_vi (~stat@dslb-094-218-236-234.pools.arcor-ip.net) has quit (Quit: Lost terminal)
2013-04-06 00:13:12	taesoo	ah! while 'make install', it invoted my cc without -m32 flag (by the way, I don't know why they need cc to install)
2013-04-06 00:13:14	<--	xenon21 (~xenon@122.155.36.154) has quit (Quit: Leaving.)
2013-04-06 00:14:01	<--	plhk (~plhk@urban.v12.su) has quit (Quit: WeeChat 0.3.6)
2013-04-06 00:14:05	<--	RayNbow (~RayNbow@scientia.demon.nl) has quit (Read error: Connection reset by peer)
2013-04-06 00:14:26	-->	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has joined #haskell
2013-04-06 00:14:59	-->	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has joined #haskell
2013-04-06 00:15:38	-->	alszar (~alszar@99-126-113-172.lightspeed.snantx.sbcglobal.net) has joined #haskell
2013-04-06 00:16:28	taesoo	so "CFLAGS=-m32 ./configure --prefix=bla" works!
2013-04-06 00:16:44	typoclass	taesoo: how strange!
2013-04-06 00:17:13	<--	trescenz_ (~trescenzi@2620:91:0:163:75e4:dd72:739b:b434) has quit (Remote host closed the connection)
2013-04-06 00:17:14	<--	silver (~silver@37.214.96.7) has quit (Read error: Connection reset by peer)
2013-04-06 00:17:18	<--	mgile (~mgile@74-92-220-177-Colorado.hfc.comcastbusiness.net) has quit (Quit: Parting is such sweet sorrow...)
2013-04-06 00:17:22	<--	ben_d (~muus@c-71-236-155-211.hsd1.or.comcast.net) has quit (Quit: LEE VING)
2013-04-06 00:18:15	<--	Zenol (~zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Remote host closed the connection)
2013-04-06 00:18:25	taesoo	also to cross-compile i386, I need to add extra args like, ./bin/ghc -optc-m32 -opta-m32 -optl-m32 x.hs
2013-04-06 00:18:35	taesoo	but it works hehe
2013-04-06 00:18:47	<--	williamhc (~williamhc@bas7-toronto01-1177859304.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-04-06 00:19:49	-->	tootsie (tootsie@37.250.165.62.bredband.tre.se) has joined #haskell
2013-04-06 00:21:29	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-04-06 00:21:33	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-06 00:21:34	-->	EarlGray (~mitra@cl-148.led-01.ru.sixxs.net) has joined #haskell
2013-04-06 00:21:55	thirsteh	is there a way to get multiline string literals without using Template Haskell? (I know you can use unlines or \n\ -> \, but I'd like to be able to copy-paste some text, a la Lisp strings or Python """foo\nbar"""
2013-04-06 00:21:59	armlesshobo	check self `before` wreck self
2013-04-06 00:22:27	<--	tobym (~tobym@static-98-116-12-94.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-04-06 00:22:30	<--	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-04-06 00:22:34	thirsteh	if not, is there some simple TH module for this?
2013-04-06 00:22:41	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Quit: leaving)
2013-04-06 00:22:51	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-04-06 00:23:00	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-04-06 00:23:02	-->	NemesisD (~NemesisD@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-04-06 00:23:12	thirsteh	(plus points if it's compatible with IsString/OverloadedStrings)
2013-04-06 00:23:42	<--	vramana (~chatzilla@103.5.132.50) has left #haskell
2013-04-06 00:24:03	quchen	thirsteh: Not that I know of. Batch edit all the lines to include "++" in your editor?
2013-04-06 00:24:05	-->	ikeg (~ikeg@64.119.30.125.dy.iij4u.or.jp) has joined #haskell
2013-04-06 00:24:05	ski_	> "\ \"
2013-04-06 00:24:07	lambdabot	  ""
2013-04-06 00:24:08	supki	@hackage string-quote
2013-04-06 00:24:09	lambdabot	http://hackage.haskell.org/package/string-quote
2013-04-06 00:24:25	supki	thirsteh: this, perhaps? ^
2013-04-06 00:24:31	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Ping timeout: 264 seconds)
2013-04-06 00:24:32	<--	BigTom (~bigtom@22.85-246-213.ippool.namesco.net) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-06 00:24:35	monochrom	thirsteh: string-quote or string-qq, I don't know the difference
2013-04-06 00:24:40	thirsteh	yes, that looks exactly like what I want, thanks!
2013-04-06 00:25:30	-->	milStaja (~milStaja@KHP059139243021.ppp-bb.dion.ne.jp) has joined #haskell
2013-04-06 00:25:33	monochrom	the user-side just needs QuasiQuotes
2013-04-06 00:25:46	thirsteh	perfect
2013-04-06 00:25:55	--	irc: disconnected from server
2013-04-07 11:09:54	-->	supersym (~supersym@5418DBD7.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-04-07 11:09:54	--	Topic for #haskell is "["Haskell Platform 2012.4: http://bit.ly/Clv5r ","GHC 7.6.2 http://v.gd/oXnqjU ","Paste code/errors: http://hpaste.org/new/haskell ","Haskell News: http://reddit.com/r/haskell ","The Haskell programming language http://haskell.org ","Logs: http://bit.ly/5mwtRQ ","If Hackage is down, try: http://hdiff.luite.com "]"
2013-04-07 11:09:54	--	Topic set by monochrom on Tue, 29 Jan 2013 18:36:42
2013-04-07 11:09:54	--	Nicks #haskell: [@ChanServ [[zz]] \rs ]OLI[ __main__ __xc _anona _d3f _flow_ _janne `0660 `bps `micro ab9rf absence acfoltzer Adeon adimit adnap adzeitor aesptux Afish aforemny_ agumonkey agundry ahf ahihi ahkurtz ajhager akahn akraut alang alanz albel727 alcz aleator alejandrogomez alek_b_ alexander__b alios alkabetz alnix alpounet AmaBoten Amadiro amathew amatsu\idle amiller anachron anders^^ andrewsw aninhumer AntiSpamMeta apaku apella Apes araujo arbn arcatan args[0] Argue aristid arkeet arkx arlinius armlessh1bo arnihr__ arpunk` arun asante asQuirreL aszlig Athas augur_ augustl averell Axman6 b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bcoppens bd_ Belgarion0 ben_d bens bergey` betawaffle bezik bgamari bholst Bigcheese BigEndian birkenfeld bitonic BlastHardcheese blithe blz37 BMeph bobry boegel bogner Boney Boreeas Botje bradleyayers brainproxy Brando753 brandonw bretolius brett BrianHV brisbin brixen bstrie Bwild bxc_ byorgey ByronJohnson c_wraith cads Cale caleb_9 caligula_ callen Canar canta canvon ccasin ccxCZ cdh473 cdidd ceii celery__ centrinia Cerise certainty chance charlesofarrell charliesome chidy chirpsalot ChongLi Chousuke chr1s chrisirc_ chrra ciaranm CindyLinz circle cjay cjh` cl_away ClaudiusMaximus Clint clog cmsd2 cods coeus_ cognominal colah_ comak companion_cube confound connelly_ coppro copumpkin CosmicRa` Counter-Strike CoverSlide cow-orker cross crs_ Cryovat cschneid ctype_real cwvh1 cynick cyphase d-q-d d-snp dabradley danr danvet dario DarkFox DarkLinkXXXX darthdeus Dashkal davean davorak dcoutts deavid Deewiant def-lkb dennda dented42 dEPY Derander_ descender dfletcher DigitalKiwi dilinger dimka dixie_ djahandarie dju dkasak dlundy_ dmarker dmwit Dodek dolio DolphR domingo DORNER dottedmag Draconx Draggor DrChaos DrCode dreixel_ drek_ drewr drmegahertz dropdrive DrSyzygy dsantiago DT` Dtgr dumbhat DustyDingo Dybber dyreshark dysinger eacameron EarlGray earthy edenc edsko edwardk edwtjo Eelis eff ehamberg ejls eL_Bart0 electrogeek elgot Eliel elliott elliottcable em endojelly Enigmagic ent- ericmj Eridius ernst erpe Erstarrung Estrellas etabot ethercrow etrepum EvilPenguin eviltwin_ eyck f8 fabjan faen fall_ fayden fcr_ felipe_ fengshaun fergusnoble fgomez fihi09 finnrobi FireFly fireglow flebron flebron_ floatingman1 flori flra flux Fnar formalcow fosky fpbot freiksenet frio fro0t frontendloader froztbyte fry fryguybob fsvehla ft Fubar^ Fuco Fuuzetsu FUZxxl fxrh gabor gbarboza gbeshers gbluma gcmalloc gdeest gdsx_ geekosaur gehmehgeh gemelen genisage gentleben gereedy ghorn Ghoul__ gienah Gilly gmaggior Gothmog_ Gracenotes greymalkin gseitz gspr guerrill1 Guest33520 Guest76523 Guest84888 Guest92249 Gunni guymann gwern h_chiro hachiya hackagebot hackedy Hafydd hajimeho_ hallski hamid hamishmack hanDerPeder harrison hattusili_III heath Heffalump helgikrs henk Hermit hiptobecubic hiratara hiredman hiro3 hiroyuki2 hive-mind horlicks hpaste hpc hpd hughfdjackson hvr hyko IanKelling ibid IbnFirnas Iceland_jack IcePenance Icewing idnar ido idoru Igloo ikeg imphasing implr inarenvi inr int-e integral_ Internet13 ion ique ironm ISF isomorphic iulian ivan\ ivan` ixian Jaak jabirali jackhill jaimef jamwt janluu JaRoel|4d jaroslaw jaspervdj Jaxan jayne jbauman jcp jcp|u jdoliner_ Jello_Raptor jercos jix jlaire jlamothe jlewis jliikka jlouis jmcarthur jMCg jml joachifm joaopizani joar jodaro JoeHazzers joeyh_ johnw jon-shape joneshf joneshf-laptop joni6128 Jonno_FTW Jonte JoshuaA JPohlmann jrib jrslepak jssanders jtalk jtannenbaum julmuri junsuijin jyyou k0ral_ kadoban kaictl kakos kalven KaneTW kaol kaoskorobase kartoffelbrei kcj Ke kennyd kennyp kerrick ketil Khisanth kini Kinnison KitB_ kith kkris kloeri klugez kmicu Kneiva kniu knyppeldynan knz koala_man koninkje_away kosmikus kqr kranius krig kryft kshannon ktosiek Kuba kvey labo lahwran lambdabot LAMMJohnson Laney latro`a lattenwald lazard LeaChim lemao lenstr leoncamel2 leroux levi lewis1711 Licenser lightquake linduxed Liskni_si lispy liszt litherum liyang lopex lpsmith lpvb luite Luke lunarjar m0g m3ga Maarten__ machisuji machisuji_ magicman mahogny majoh maksbotan mami mapf marienz martinalex Martty MasseR mateu Mathnerd626 mattp__ matzo_ mauke Maxdamantus mceier mcguitan93 McManiaC mechairo` mefisto` Megant memand mendez mephx_ merijn MetaCosm meyersh mgsloan miasma mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx_ mimico mirsal MithrilTuxedo mixi mjr841 MK_FG mlh mlinksva mm_freak mmaruseacph2 MoALTz mokus mollerstrand MOMI Mon_Ouie monique_ monochrom mononofu moonlite_ mornfall morolin mortberg Mortchek mpiechotka mrd MrFenix_ mrko mrshoe mtao mtlatif mullein munro mux mvj4 mxweas myme mysticc n_b Nafai Nahra Nanar nand` nardul Natch natte ndngvr` ndonaldson neena netj neurocyte neutrino_ newsham Nickeeh nicoo nighty^ Nik_89 niko nikola nilg niloc132 Nimatek ninegrid ninzine Nisstyre-laptop niteria nlogax no-n[1] noam noj noplamodo normanrichards notdan NougatRillettes nouitfvf Nshag numeral nuncanada nus-- nuttycom nuttycom1 nwf nyc oax obcode ocharles odr ofan Okasu OlegYch3 opqdonut ormaaj orn Ornedan ortmage osa1__ osfameron otend othiym23 otterdam otters otto_s ousado ozataman ozgura_ Paks pantsman paolino Paprikac_ ParadoxMuffin ParahSail1n parcs PartyKat1e PatrickRobotham pdxleif_away peddie peltchu pepijndevos perlite perspectival petanqk peterhil pettter pharaun phaul Philippa Philonous PHO_ pib1972 pigoz pikhq piotr__ PixelCrumbs plhk pnielsen popz porco pqmodn pr predator117 preflex prh prinnysocks PrO_OkI_ profmakx prophile ps-auxw Ptival ptrf purefn puzza007_ pw_ pyacks pyrtsa pyykkis_ qrlr quaestor quicksilver quuxman qwandor qwr qz raek raid rainmaker Ralith RayNbow Raynes Raynos Razz realnot reckler reiddraper Reite Rembane_ RenJuan rexamophone rfw Rickasaurus rio_ Riussi rmunroe robawt robbe- robbert rofer Rotaerk rs0 rs234 rsuniev123 rul ryanakca s4msung s_quark SaBer sacundim saep Sagi saiam Saizan sajith saurik scgilardi schlumpi schovi sclv Sculptor Sculptor_ seats SegFaultAX sellout- Sgeo sgronblo_ sh shachaf shanse shepheb shergill Shin-LaC shintah SHODAN Shou shutdown_-h_now si14 simon_ simpson sipa sirchurchill sjl ski_ skp skuggi skyflash SLi sm smarter snoyberg so Soft sohum solarus solirc Sonderblade sordina3 SoupEvil spacebark spligak_ Spockz sproingie Squid_Tamer srcerer sShintah Starfire startling statusfailed steez stelleg_away stepcut stephe strax suiside sully sunfun sunnavy supernumeraryshi supersym supki sw17ch Swizec synonymous1 sysopfb tahu takumn tamiko tanakh Taneb Tarential taruti tavelram td123 tdammers techlife Tehnix tensorpudding Tesseraction_y tessier_ tew88 tg tgeeky Th0mas thalassarche tharper The_third_man theDon TheFuzzball theorbtwo TheRedMood thetallguy thetallguy2 thirsteh ThomasLocke thorkilnaur_ thorsten1 thorsten` thoughtpolice threedaymonk threesome timemage timjb timthelion tippenein tkd tmiw TML tntc tobiassjosten tom4939 tomaw tomboy65 tomejaguar tomh__ tomku tomprince tootooroo ToRA Tordek totimkopf trevize_ tridactyla tromp_ trone tsinnema tsou tswett ttuegel tunixman tuv tvaalen Twey Twisol tyler typoclass u_ ulfdoz Ulrar unK_ Urchin uvelichitel UziMonkey__ v v0|d Valodim vehk verrens Vert Vertue vhz vikraman vili vmesoff vobi Volstvok Vorpal voyd vpopov Vq vraid VZakharov wagle Walther warpy Watcher7|off waterlaz wchun wei2912 weie_ wereHamster WhereIsMySpoon whoops wilfredh WillB william-s William_ wjlroe wollw wormphlegm wting wto wtw_ wumpus wunki x7 xaimus xcvii xenon21 xeodou XexonixXexillion xinming_ XMunkki_ xnyhps Xorlev xorox90__ xplat xrl xrq xunatai xymox yam yan_ yano yeltzooo yezariaely yiannis_1 yogurt_truck yriw yumike zakora Zariel zebr zeiris zenzike ziman zoktar zomg zorzar Zouppen zw01 zwiebel zxq9 zz_nh2]
2013-04-07 11:09:54	--	Channel #haskell: 985 nicks (1 op, 0 halfops, 0 voices, 984 normals)
2013-04-07 11:09:54	--	URL for #haskell: http://www.haskell.org/
2013-04-07 11:09:56	--	Mode #haskell [+CLcnpt]
2013-04-07 11:09:56	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-04-07 11:10:44	<--	Sculptor (~Sculptor@unaffiliated/sculptor) has quit (Ping timeout: 256 seconds)
2013-04-07 11:11:51	-->	anderse (~anderself@c83-248-64-25.bredband.comhem.se) has joined #haskell
2013-04-07 11:12:24	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 260 seconds)
2013-04-07 11:12:38	<--	timthelion (~timothy@94.213.broadband4.iol.cz) has quit (Ping timeout: 248 seconds)
2013-04-07 11:15:19	-->	vramana (~chatzilla@103.5.132.50) has joined #haskell
2013-04-07 11:15:30	<--	xcvii (~baja@95.170.86.156) has quit (Remote host closed the connection)
2013-04-07 11:15:36	hpaste	“http://johanesgultom.blogspot.com/2013/04/konsumen-cerdas-paham-perlindungan.html” pasted “Konsumen cerdas paham perlindungan konsumen” at http://hpaste.org/85346
2013-04-07 11:15:37	-->	xcvii (~baja@95.170.86.156) has joined #haskell
2013-04-07 11:15:46	<--	kaoskorobase (~kaoskorob@84.78.195.71) has quit (Quit: kaoskorobase)
2013-04-07 11:15:53	-->	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has joined #haskell
2013-04-07 11:17:39	<--	knyppeldynan (~kristina@c213-89-19-165.bredband.comhem.se) has quit (Remote host closed the connection)
2013-04-07 11:18:27	<--	centrinia (~exc@107-208-218-105.lightspeed.tukrga.sbcglobal.net) has quit (Quit: Ex-Chat)
2013-04-07 11:20:51	<--	xcvii (~baja@95.170.86.156) has quit (Ping timeout: 252 seconds)
2013-04-07 11:21:09	-->	hiroakip (~hiroaki@ip-5-147-122-136.unitymediagroup.de) has joined #haskell
2013-04-07 11:21:27	-->	xcvii (~baja@95.170.86.156) has joined #haskell
2013-04-07 11:22:39	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-04-07 11:23:09	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-04-07 11:24:44	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-04-07 11:26:43	<--	xeodou (d2165522@gateway/web/freenode/ip.210.22.85.34) has quit (Quit: Page closed)
2013-04-07 11:27:08	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-07 11:27:12	-->	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-04-07 11:28:52	<--	Guest92249 (~programme@178.186.175.177) has quit (Ping timeout: 256 seconds)
2013-04-07 11:29:17	-->	knightshade (~knightsha@p548CF5AD.dip.t-dialin.net) has joined #haskell
2013-04-07 11:29:49	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Read error: Connection reset by peer)
2013-04-07 11:30:26	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-07 11:31:46	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-04-07 11:32:31	<--	vramana (~chatzilla@103.5.132.50) has quit (Ping timeout: 245 seconds)
2013-04-07 11:32:49	<--	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-04-07 11:33:02	-->	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has joined #haskell
2013-04-07 11:33:04	 *	hackagebot terminal-progress-bar 0.0.1.2 - A simple progress bar in the terminal  http://hackage.haskell.org/package/terminal-progress-bar-0.0.1.2 (PetrRockai)
2013-04-07 11:33:32	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-07 11:34:35	shachaf	Do you need initial-progress-bar to make that useful?
2013-04-07 11:35:06	<--	fro0t (~fro0t@1.23.67.95) has quit (Ping timeout: 256 seconds)
2013-04-07 11:35:13	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Read error: Operation timed out)
2013-04-07 11:36:08	Saizan	do you have an initial to use it with?
2013-04-07 11:38:54	--	PixelCrumbs is now known as OresomeBot_
2013-04-07 11:38:55	aristid	somehow an initial look at hmemdb makes me think it's not that performant.
2013-04-07 11:39:07	--	OresomeBot_ is now known as PixelCrumbs
2013-04-07 11:39:35	aristid	which is a totally unjustified opinion based on how little information i've used to obtain it :D
2013-04-07 11:39:48	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 264 seconds)
2013-04-07 11:39:49	-->	sarfraz (~sarfraz@bny93-1-81-57-144-245.fbx.proxad.net) has joined #haskell
2013-04-07 11:39:55	aristid	but... tabContent :: TVar (M.Map Integer (TVar (Maybe r))),
2013-04-07 11:40:44	-->	osxorgate (~osxorgate@82-168-113-55.ip.telfort.nl) has joined #haskell
2013-04-07 11:41:18	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-04-07 11:41:41	-->	yamhih (~yamhih@113.96.157.180) has joined #haskell
2013-04-07 11:42:23	-->	programmer (~programme@178.187.16-202.xdsl.ab.ru) has joined #haskell
2013-04-07 11:42:37	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-04-07 11:42:37	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-04-07 11:42:37	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-04-07 11:42:46	--	programmer is now known as Guest27287
2013-04-07 11:43:04	 *	hackagebot terminal-progress-bar 0.0.1.3 - A simple progress bar in the terminal  http://hackage.haskell.org/package/terminal-progress-bar-0.0.1.3 (PetrRockai)
2013-04-07 11:43:41	-->	knyppeldynan (~kristina@c213-89-19-165.bredband.comhem.se) has joined #haskell
2013-04-07 11:43:54	--	\rs is now known as \s
2013-04-07 11:43:59	--	\s is now known as \a
2013-04-07 11:44:01	-->	[mth] (~mth@1.147.246.0) has joined #haskell
2013-04-07 11:44:02	--	\a is now known as \c
2013-04-07 11:44:03	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Quit: gabor)
2013-04-07 11:44:11	--	\c is now known as \d
2013-04-07 11:44:19	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-07 11:44:19	<--	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has quit (Read error: Connection reset by peer)
2013-04-07 11:44:25	-->	edon (~user@albalug/edon) has joined #haskell
2013-04-07 11:44:42	-->	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has joined #haskell
2013-04-07 11:45:12	--	\d is now known as \q
2013-04-07 11:45:14	-->	jlseagull (~jonathan@31-122.obr.ftth.internl.net) has joined #haskell
2013-04-07 11:46:14	<--	cognominal (~cognomina@37.161.195.144) has quit (Read error: Connection reset by peer)
2013-04-07 11:46:24	-->	io2 (~io2@unaffiliated/io2) has joined #haskell
2013-04-07 11:46:50	<--	yamhih (~yamhih@113.96.157.180) has left #haskell
2013-04-07 11:47:47	<--	Taneb (~nathan@host-92-30-193-133.as13285.net) has quit (Quit: Leaving)
2013-04-07 11:47:51	<--	bitonic (~user@176.27.234.82) has quit (Ping timeout: 260 seconds)
2013-04-07 11:48:33	-->	cognominal (~cognomina@37.161.195.144) has joined #haskell
2013-04-07 11:49:27	-->	eldariof (~CLD@pppoe-215-183-dyn-sr.volgaline.ru) has joined #haskell
2013-04-07 11:49:36	<--	sh (~sh@uiharu.memespace.net) has quit (Remote host closed the connection)
2013-04-07 11:49:53	-->	sh (~sh@uiharu.memespace.net) has joined #haskell
2013-04-07 11:49:59	-->	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has joined #haskell
2013-04-07 11:50:41	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-04-07 11:51:24	-->	SoupE (~jloos@e177154131.adsl.alicedsl.de) has joined #haskell
2013-04-07 11:51:35	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-04-07 11:52:40	arkeet	what I don't get is why it depends on base-unicode-symbols.
2013-04-07 11:53:09	shachaf	Because it uses ℤ
2013-04-07 11:53:34	arkeet	yes, why?
2013-04-07 11:53:34	arkeet	:p
2013-04-07 11:53:37	no-n[1]	is there a haskell equivalent to "from Module import function as func"?
2013-04-07 11:53:44	-->	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has joined #haskell
2013-04-07 11:53:49	arkeet	no
2013-04-07 11:53:53	osfameron	arkeet: because ZZ would be too easy to type?
2013-04-07 11:53:54	no-n[1]	ok
2013-04-07 11:54:35	<--	SoupEvil (~jloos@e177164198.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-04-07 11:54:36	<--	startling (~user@2602:306:37ff:e210:21b:63ff:fec8:d7b8) has quit (Ping timeout: 245 seconds)
2013-04-07 11:54:48	elliott	arkeet: base-unicode-symbols is actually Latin for show-off
2013-04-07 11:55:14	arkeet	I'm sleepy.
2013-04-07 11:55:35	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-04-07 11:56:06	-->	pfoetchen (~pfoetchen@dslb-178-007-001-087.pools.arcor-ip.net) has joined #haskell
2013-04-07 11:57:00	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-04-07 11:57:04	-->	xnoise (~cristian@070-132-165-046.ip-addr.inexio.net) has joined #haskell
2013-04-07 11:57:51	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 276 seconds)
2013-04-07 11:58:18	-->	hrehf (~s@p4FE3AA5F.dip.t-dialin.net) has joined #haskell
2013-04-07 11:58:38	ion	no-n: Not per se, but you can import a module qualified and then define a value that calls something the module exports.
2013-04-07 11:58:51	ion	But that may not be worth the trouble.
2013-04-07 11:59:48	xnoise	hello
2013-04-07 12:01:16	<--	ben_d (~muus@c-71-193-220-192.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-07 12:02:29	typoclass	xnoise: hi
2013-04-07 12:03:19	xnoise	i am just starting learning haskell, but i am getting a little chills because of the math involved in some more complex constructs
2013-04-07 12:03:29	xnoise	later on
2013-04-07 12:04:01	xnoise	so far, is pretty simple and easy to understand. Any ideea wether i should start olooking over math, and if so, where would one start?
2013-04-07 12:04:40	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-04-07 12:04:40	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-04-07 12:04:40	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-04-07 12:04:51	arkeet	I don't think it's exactly necessary
2013-04-07 12:05:04	<--	Twisol (~Oddlyoko@wikia/Oddlyoko) has quit (Quit: Twisol)
2013-04-07 12:05:22	elliott	xnoise: what mathematics are you referring to?
2013-04-07 12:05:30	xnoise	well, i keep hearing about mon
2013-04-07 12:05:36	xnoise	ads, monoids and so om
2013-04-07 12:05:49	xnoise	sorry, new kb
2013-04-07 12:06:05	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-07 12:06:09	shachaf	Nah, don't worry about that.
2013-04-07 12:06:27	arkeet	to the programmer, those are just abstractions of common patterns.
2013-04-07 12:06:28	typoclass	xnoise: it depends on what you mean by math, but in my personal opinion, it's not necessary
2013-04-07 12:06:33	xnoise	and in general haskell does not look like your general variety of programming language
2013-04-07 12:06:46	xnoise	ok :)
2013-04-07 12:06:52	xnoise	thanks
2013-04-07 12:06:53	-->	Okasu_ (~1@217.118.78.37) has joined #haskell
2013-04-07 12:07:03	arkeet	mathematicians are interested in them for different reasons, so I don't know how much you'd get out of learning the math.
2013-04-07 12:07:26	xnoise	ok, thank you for the answers
2013-04-07 12:07:43	<--	Okasu (~1@unaffiliated/okasu) has quit (Ping timeout: 264 seconds)
2013-04-07 12:07:52	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-04-07 12:07:52	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-04-07 12:07:52	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-04-07 12:08:20	-->	piotr (~quassel@e178096155.adsl.alicedsl.de) has joined #haskell
2013-04-07 12:08:51	<--	piotr__ (~quassel@e178095184.adsl.alicedsl.de) has quit (Ping timeout: 252 seconds)
2013-04-07 12:09:26	typoclass	xnoise: roughly, a monoid is s a thing to which you can append. for example, there's a monoid instance for lists
2013-04-07 12:10:00	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-07 12:10:15	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-04-07 12:10:48	xnoise	the thing is i got a little scared, looking through some more advanced presentations and so on in which alot is being discussed in really abstract terms. Learn you a haskell does a pretty nice job so far of keeping things simple
2013-04-07 12:10:50	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 12:11:02	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-04-07 12:11:19	xnoise	i haven't yet reached monads, i am barely playing with functions, let bindings and so on at the moment
2013-04-07 12:11:41	<--	adzeitor (~adzeitor@31.207.217.181) has quit (Ping timeout: 245 seconds)
2013-04-07 12:11:45	typoclass	xnoise: i think it may help if you just treat it as "weird names". it's nothing magical. Monad is a typeclass with three or four functions in it; there's various instances of the typeclass; it's used in some places in the standard library; there's a bit of haskell syntax ("do blocks") which is translated into function calls of this typeclass
2013-04-07 12:11:48	xnoise	just wanted to know wether i should also keep in mind some math for the future
2013-04-07 12:12:05	shachaf	The term "monoid" isn't particularly more abstract than the term "abstract base class" or something.
2013-04-07 12:12:13	xnoise	ok, i will do so
2013-04-07 12:12:22	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-07 12:12:46	xnoise	@shachaf : never thought at terms like that :)
2013-04-07 12:12:46	lambdabot	Unknown command, try @list
2013-04-07 12:13:19	-->	eikke (~nicolas@d8D86B9FD.access.telenet.be) has joined #haskell
2013-04-07 12:13:26	typoclass	shachaf: i'm not sure about that
2013-04-07 12:14:55	shachaf	I mostly just picked that term because it has the word "abstract" in it and has the right kind. :-)
2013-04-07 12:15:42	<--	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has quit (Quit: chidy)
2013-04-07 12:16:39	-->	vlatkoB (~vlatko@188.129.49.15) has joined #haskell
2013-04-07 12:17:05	<--	schovi (~schovi@ip-89-176-244-70.net.upcbroadband.cz) has quit (Remote host closed the connection)
2013-04-07 12:17:06	vlatkoB	 be wrong with this?
2013-04-07 12:17:06	vlatkoB	yap :: IO [String] -> IO ()
2013-04-07 12:17:06	vlatkoB	yap xs = do s <- xs; mapM_ putStrLn s
2013-04-07 12:17:15	-->	sanemat (~sanemat@153.208.138.210.vmobile.jp) has joined #haskell
2013-04-07 12:17:31	vlatkoB	What would ...
2013-04-07 12:17:52	shachaf	vlatkoB: You tell us!
2013-04-07 12:17:55	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-04-07 12:18:39	vlatkoB	Isn't s [String]?
2013-04-07 12:18:57	-->	nuttycom2 (~Adium@71-212-131-195.hlrn.qwest.net) has joined #haskell
2013-04-07 12:19:05	Adeon	yes, s is [String]
2013-04-07 12:19:06	Philonous	vlatkoB:  Sounds right
2013-04-07 12:19:26	vlatkoB	I'm getting "No instance for (Show (IO [String] -> IO ()))"
2013-04-07 12:19:36	<--	nuttycom1 (~Adium@71-208-227-85.hlrn.qwest.net) has quit (Ping timeout: 245 seconds)
2013-04-07 12:19:42	shachaf	What are you trying to do with it?
2013-04-07 12:19:45	<--	porco (~porco@218.30.180.179) has quit (Quit: Linkinus - http://linkinus.com)
2013-04-07 12:19:51	shachaf	It's a function. You can't print a function.
2013-04-07 12:20:11	vlatkoB	Just to print each String in its own line.
2013-04-07 12:20:22	shachaf	Which string?
2013-04-07 12:20:22	-->	nuttycom1 (~nuttycom@71-212-131-195.hlrn.qwest.net) has joined #haskell
2013-04-07 12:20:28	<--	nuttycom (~nuttycom@71-208-227-85.hlrn.qwest.net) has quit (Ping timeout: 256 seconds)
2013-04-07 12:20:29	vlatkoB	But it is not a function, s is [String]
2013-04-07 12:20:37	Philonous	vlatkoB:  The definition is right, you're using it wrong. The error is at the call site
2013-04-07 12:21:09	vlatkoB	What is "call site"?
2013-04-07 12:21:21	Adeon	the place where you use that definition
2013-04-07 12:21:25	ion	xnoise: (Math, not Haskell) 0+a = a; a+0 = a; (a+b)+c = a+(b+c). (Ditto) 1·a = a, a·1 = a, (a·b)·c = a·(b·c). (Haskell) [] ++ as == as; as ++ [] == as; (as ++ bs) ++ cs == as ++ (bs ++ cs). A monoid means the common part among these (and many others): an identity element (e.g. 0 or []), an associative operation (e.g. + or (++)) and the three laws.
2013-04-07 12:23:14	vlatkoB	I'm testing it from GHCI
2013-04-07 12:23:43	Philonous	vlatkoB:  Can you paste the line you're using for that?
2013-04-07 12:23:48	xnoise	ion: does not look so complicated, might be one of the simplest explanations i have read so far
2013-04-07 12:23:53	xnoise	thanks
2013-04-07 12:25:04	<--	mpiechotka (~mpiechotk@178-36-63-68.adsl.inetia.pl) has quit (Read error: Operation timed out)
2013-04-07 12:25:49	ion	xnoise: Haskell calls the identity element “mempty”, and the operation “mappend” which also has the alias (<>).
2013-04-07 12:26:27	<--	flebron (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-04-07 12:26:33	ion	> mempty <> mempty <> "hello" <> mempty <> "jelly"
2013-04-07 12:26:35	lambdabot	  "hellojelly"
2013-04-07 12:26:44	-->	k00mi (~koomi@dslb-178-007-030-133.pools.arcor-ip.net) has joined #haskell
2013-04-07 12:27:09	ion	> sortBy (comparing length <> compare) cake
2013-04-07 12:27:10	-->	q66 (~q66@213.191.105.214) has joined #haskell
2013-04-07 12:27:11	lambdabot	  ["Alpha resins.","Cranial caps.","Four large eggs.","Fish shaped dirt.","On...
2013-04-07 12:27:36	vlatkoB	Uf, I can't believe what I did. I've been changing the function so much that I forgot to add the parameter (IO [String]). It's working correctly. Thanks for "call site". :-)
2013-04-07 12:27:49	-->	timthelion (~timothy@94.213.broadband4.iol.cz) has joined #haskell
2013-04-07 12:27:59	arkeet	:t mconcat
2013-04-07 12:28:01	lambdabot	Monoid a => [a] -> a
2013-04-07 12:28:03	<--	timjb (~timjb@ppp-93-104-162-213.dynamic.mnet-online.de) has quit (Remote host closed the connection)
2013-04-07 12:28:12	arkeet	:t foldMap
2013-04-07 12:28:13	lambdabot	(Foldable t, Monoid m) => (a -> m) -> t a -> m
2013-04-07 12:28:18	niteria	> mempty :: Ordering
2013-04-07 12:28:19	lambdabot	  EQ
2013-04-07 12:28:27	niteria	nice
2013-04-07 12:28:29	-->	gadjo (~gggg@109.102.72.188) has joined #haskell
2013-04-07 12:28:46	arkeet	EQ <> y = y; x <> _ = x
2013-04-07 12:28:52	arkeet	er
2013-04-07 12:28:54	arkeet	yeah.
2013-04-07 12:28:57	<--	eikke (~nicolas@d8D86B9FD.access.telenet.be) has quit (Read error: Operation timed out)
2013-04-07 12:29:20	elliott	weird instance
2013-04-07 12:29:22	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-04-07 12:29:28	arkeet	useful instance.
2013-04-07 12:29:43	arkeet	compare (a,b) (c,d) = compare a c <> compare b d
2013-04-07 12:29:47	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-04-07 12:29:54	ion	Are there others that make sense for Ordering?
2013-04-07 12:29:55	--	rio_ is now known as rio
2013-04-07 12:30:56	Philonous	ion:  The right-biased version?
2013-04-07 12:31:09	-->	vlatko_ (~vlatko@188.129.49.47) has joined #haskell
2013-04-07 12:31:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 12:31:28	arkeet	sure, the dual monoid.
2013-04-07 12:31:35	-->	mr- (~martin@rgnb-5d879eaf.pool.mediaWays.net) has joined #haskell
2013-04-07 12:32:14	niteria	> True <> False
2013-04-07 12:32:16	lambdabot	  No instance for (Data.Monoid.Monoid GHC.Types.Bool)
2013-04-07 12:32:16	lambdabot	   arising from a use o...
2013-04-07 12:32:25	elliott	you could also privilege LT or GT instead of EQ, presumably
2013-04-07 12:32:26	ion	That makes as much sense as a right-biased version for Any and All as well. I’d say less than the left-biased one to be a useful default.
2013-04-07 12:32:33	<--	kennyd (~kennyd@93-141-84-63.adsl.net.t-com.hr) has quit (Ping timeout: 248 seconds)
2013-04-07 12:32:43	arkeet	niteria: there are Any and All monoids wrapping Bool
2013-04-07 12:33:29	-->	janbanan (~naj@niklas.vth.sgsnet.se) has joined #haskell
2013-04-07 12:33:29	-->	dogmaT (~dogmat@ip-94-112-150-164.net.upcbroadband.cz) has joined #haskell
2013-04-07 12:33:46	arkeet	> Any True <> Any False
2013-04-07 12:33:47	lambdabot	  Any {getAny = True}
2013-04-07 12:33:49	arkeet	> All True <> All False
2013-04-07 12:33:51	lambdabot	  All {getAll = False}
2013-04-07 12:33:55	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-04-07 12:34:08	arkeet	> foldMap Any [True,False]
2013-04-07 12:34:10	lambdabot	  Any {getAny = True}
2013-04-07 12:34:22	arkeet	> anyOf folded [True,False]
2013-04-07 12:34:24	lambdabot	  Couldn't match expected type `(->) b0' with actual type `[]'
2013-04-07 12:34:30	arkeet	huh?
2013-04-07 12:34:33	arkeet	:t anyOf
2013-04-07 12:34:35	lambdabot	Profunctor p => Accessing p Any s t a b -> p a Bool -> s -> Bool
2013-04-07 12:34:42	<--	vlatkoB (~vlatko@188.129.49.15) has quit (Ping timeout: 252 seconds)
2013-04-07 12:34:44	arkeet	right.
2013-04-07 12:34:48	elliott	:t andOf
2013-04-07 12:34:49	arkeet	> orOf folded [True,False]
2013-04-07 12:34:49	lambdabot	Getting All s t Bool b -> s -> Bool
2013-04-07 12:34:51	lambdabot	  True
2013-04-07 12:35:27	<--	pfoetchen (~pfoetchen@dslb-178-007-001-087.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-04-07 12:36:29	timthelion	> any id [True,False] -- How are monoids superior?
2013-04-07 12:36:31	lambdabot	  True
2013-04-07 12:36:31	-->	niklasb (~codeslay0@nat-wh-hadi.rz.uni-karlsruhe.de) has joined #haskell
2013-04-07 12:36:54	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-07 12:37:10	-->	kennyd (~kennyd@93-138-101-79.adsl.net.t-com.hr) has joined #haskell
2013-04-07 12:37:47	ion	timthelion: Ask beaky.
2013-04-07 12:38:07	timthelion	It seems to me, that almost every type could have an almost infinite number of monoid instances. But how is that better than just applying monoidic functions to the types? I can define an infinite number of a->a->a s for a given a. But that's what functions are for, I don't need a typeclass to tell me that.
2013-04-07 12:39:39	arkeet	but the difference is
2013-04-07 12:39:40	-->	pfoetchen (~pfoetchen@dslb-178-007-001-087.pools.arcor-ip.net) has joined #haskell
2013-04-07 12:39:40	arkeet	monoids are easy.
2013-04-07 12:39:52	timthelion	arkeet: where as functions are hard?
2013-04-07 12:39:53	niteria	monoids have properties
2013-04-07 12:39:57	<--	jlseagull (~jonathan@31-122.obr.ftth.internl.net) has left #haskell ("Leaving")
2013-04-07 12:40:02	-->	bradleyayers (~brad@ppp201-252.static.internode.on.net) has joined #haskell
2013-04-07 12:40:18	timthelion	niteria: yet monoidic functions have the same properties.
2013-04-07 12:40:19	arkeet	> foldMap Sum [1..5]
2013-04-07 12:40:21	lambdabot	  Sum {getSum = 15}
2013-04-07 12:40:36	timthelion	interesting
2013-04-07 12:40:45	timthelion	ish
2013-04-07 12:40:46	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 252 seconds)
2013-04-07 12:40:54	arkeet	> foldMap show [1..5]
2013-04-07 12:40:56	lambdabot	  "12345"
2013-04-07 12:41:15	niteria	timthelion: you can express this properties in the code by constraining on a typeclass
2013-04-07 12:41:15	timthelion	:t foldMap
2013-04-07 12:41:17	lambdabot	(Foldable t, Monoid m) => (a -> m) -> t a -> m
2013-04-07 12:41:18	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 252 seconds)
2013-04-07 12:41:55	niteria	s/this/those
2013-04-07 12:42:14	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-07 12:42:22	-->	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has joined #haskell
2013-04-07 12:42:42	 *	timthelion hopes it doesn't lead to such idiocy as we see with the list monad.
2013-04-07 12:42:47	<--	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has quit (Remote host closed the connection)
2013-04-07 12:42:52	ion	> runWriterT $ do tell "hello"; x <- lift [0..5]; tell (", " ++ show x ++ " jelly"); return x
2013-04-07 12:42:54	lambdabot	  [(0,"hello, 0 jelly"),(1,"hello, 1 jelly"),(2,"hello, 2 jelly"),(3,"hello, ...
2013-04-07 12:43:10	niteria	timthelion: where's the idiocy with list monad?
2013-04-07 12:43:11	-->	quchen (~david@p54AA1B37.dip.t-dialin.net) has joined #haskell
2013-04-07 12:43:21	timthelion	niteria: poorly named complex behavior
2013-04-07 12:43:31	timthelion	is bad design
2013-04-07 12:43:35	arkeet	:t WriterT
2013-04-07 12:43:36	lambdabot	m (a, w) -> WriterT w m a
2013-04-07 12:43:49	arkeet	right.
2013-04-07 12:44:34	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 12:44:36	<--	Jonno_FTW (~come@9ch.in) has quit (Ping timeout: 245 seconds)
2013-04-07 12:44:55	-->	timjb (~timjb@ppp-93-104-162-213.dynamic.mnet-online.de) has joined #haskell
2013-04-07 12:44:58	timthelion	niteria: since the monad instance for list is not unique, there is no way to predict what the given instance will do without reading the source code(as it's behavior is not described by either it's type(Monadic) or it's name (bind)
2013-04-07 12:45:03	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Read error: Connection reset by peer)
2013-04-07 12:45:06	arkeet	it isn't?
2013-04-07 12:45:38	arkeet	in what other reasonable way could list be a monad?
2013-04-07 12:45:50	niteria	there are 2 sensible instances: nondeterminism and maybe
2013-04-07 12:45:50	-->	Catbuntu (~catbuntu@unaffiliated/ls-mft) has joined #haskell
2013-04-07 12:45:50	[mth]	wat? What other law abiding implementation is there?
2013-04-07 12:46:05	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 255 seconds)
2013-04-07 12:46:07	<--	notdan (~h@109.163.233.55) has quit (Ping timeout: 258 seconds)
2013-04-07 12:46:14	elliott	why have typeclasses at all, if you won't accept that an instance can be the most generally useful or only reasonable one?
2013-04-07 12:46:33	elliott	passing around monad triple objects by hand isn't my idea of fun, personally
2013-04-07 12:46:41	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-04-07 12:46:43	niteria	and there's already a Maybe monad
2013-04-07 12:46:44	-->	notdan (~h@109.163.233.55) has joined #haskell
2013-04-07 12:46:50	elliott	and I don't see why to single out [] here
2013-04-07 12:46:54	<--	fosky (~fosky@ppp118-209-78-45.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-04-07 12:47:20	elliott	niteria: I don't quite see what you mean by Maybe
2013-04-07 12:47:24	niteria	and by sensible I mean law abiding
2013-04-07 12:47:27	arkeet	me either.
2013-04-07 12:47:30	elliott	the instance i am thinking you might be thinking of would violate (>>= return) = id
2013-04-07 12:47:32	timthelion	elliott: well Maybe is rather clear in it's behavior. But tell me that the code for monadic list cross product is clear...
2013-04-07 12:47:38	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-07 12:47:41	arkeet	what would join do for this other instance?
2013-04-07 12:47:57	elliott	timthelion: I find it perfectly clear because I understand the list monad. sure, Maybe is simpler. Maybe is a simpler type than []
2013-04-07 12:47:58	ion	timthelion: Can i tell you that? The code for monadic list cross product is clear.
2013-04-07 12:48:13	arkeet	:t liftM2 (,)
2013-04-07 12:48:15	lambdabot	Monad m => m a1 -> m a2 -> m (a1, a2)
2013-04-07 12:48:17	arkeet	this?
2013-04-07 12:48:22	elliott	thankfully, Haskell doesn't shy away from powerful, succint, meaningful concepts, even if they may cause confusion at first sight: everyone has to learn
2013-04-07 12:48:35	elliott	certainly [] is a lot less of a mind-bender than Cont or whatever.
2013-04-07 12:48:36	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Quit: Leaving)
2013-04-07 12:49:33	-->	chrisdone (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-04-07 12:49:46	<--	edsko (~edsko@79.97.126.24) has quit (Quit: This computer has gone to sleep)
2013-04-07 12:50:14	 *	timthelion would not use it in production code.
2013-04-07 12:50:27	timthelion	the list monad that is
2013-04-07 12:50:32	elliott	ok. you're missing out
2013-04-07 12:50:41	arkeet	:t select
2013-04-07 12:50:42	lambdabot	[t] -> [(t, [t])]
2013-04-07 12:50:49	chrisdone	timthelion: why?
2013-04-07 12:51:07	mauke	timthelion: would you use list comprehensions?
2013-04-07 12:51:10	ion	timthelion: It seems to be so useful that e.g. Python included something with pretty much the exact semantics of the list monad.
2013-04-07 12:51:12	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-07 12:51:13	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-07 12:51:16	<--	pfoetchen (~pfoetchen@dslb-178-007-001-087.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-07 12:51:32	timthelion	ion: yes, but what did they name it?
2013-04-07 12:51:40	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Client Quit)
2013-04-07 12:51:42	arkeet	"list comprehensions"
2013-04-07 12:51:45	chrisdone	yeah well list comprehensions are specially optimized by ghc
2013-04-07 12:51:45	ion	timthelion: How is that relevant?
2013-04-07 12:51:48	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-04-07 12:51:56	elliott	the list monad does not actually have a name.
2013-04-07 12:52:05	elliott	you can think "the list monad" is a bad term to describe the semantics of the instance Monad []
2013-04-07 12:52:12	-->	bitonic (~user@dyn1220-246.wlan.ic.ac.uk) has joined #haskell
2013-04-07 12:52:17	elliott	but if the problem was with the terminology, there would be no reason to avoid that (unnamed) instance in production code.
2013-04-07 12:52:33	-->	flebron (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has joined #haskell
2013-04-07 12:52:37	timthelion	chrisdone: It seems to me, that code should be easilly read without having to be knowledgable of the semantics of the API used. The names of things should be enough to understand what they do.
2013-04-07 12:53:09	arkeet	I think most people with a reasonable amount of experience with haskell would know what the list monad is.
2013-04-07 12:53:47	 *	typoclass . o O ( this could equally well defend AbstractFactoryVisitorFactory ;-) "thankfully, java doesn't shy away from powerful, succint, meaningful concepts, even if they may cause confusion at first sight: everyone has to learn" )
2013-04-07 12:54:00	mauke	typoclass: >succinct
2013-04-07 12:54:19	chrisdone	timthelion: well i guess that discards monads and monoids and arithmetic operations
2013-04-07 12:54:23	typoclass	mauke: not my problem
2013-04-07 12:54:31	niteria	that's like not using folds if you come from imperative background
2013-04-07 12:54:44	mauke	timthelion: that's nonsense
2013-04-07 12:55:00	lewis1711	who doesn't use folds? C# even has them. python, ruby... I mean come on. let's all fold
2013-04-07 12:55:03	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 276 seconds)
2013-04-07 12:55:12	 *	chrisdone glances around nervously
2013-04-07 12:55:13	-->	BigTom (~bigtom@213.246.114.89) has joined #haskell
2013-04-07 12:55:13	arkeet	people use folds  there?
2013-04-07 12:55:16	chrisdone	… I … I fold
2013-04-07 12:55:25	mauke	perl has a foldl but it's called reduce
2013-04-07 12:55:37	chrisdone	scheme and common lisp have reduce too
2013-04-07 12:55:59	 *	timthelion thinks that map and fold are such core features that anyone should know them, but a given typeclass instance for a given type is not.
2013-04-07 12:56:04	<--	xunatai (~xunatai@c-24-21-140-153.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-07 12:56:15	arkeet	even for something in the Prelude?
2013-04-07 12:56:29	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-04-07 12:56:29	<--	chrisdone (~chrisdone@unaffiliated/chrisdone) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-04-07 12:56:48	mauke	timthelion: so foldr is "obvious" but (==) is not?
2013-04-07 12:56:59	timthelion	arkeet: well you do have a point there.
2013-04-07 12:57:17	lewis1711	I think the folds are only in srf1 for scheme.. but that's ot
2013-04-07 12:57:35	timthelion	mauke: well the Eq instances are all very clearly unique. So there is no need to learn them at all.
2013-04-07 12:57:42	mauke	huh?
2013-04-07 12:57:52	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-07 12:57:53	timthelion	Just like functor instances, are very easy to learn, since they are all unique.
2013-04-07 12:57:58	mauke	what do you mean by "unique"?
2013-04-07 12:58:19	timthelion	mauke: there is only one correct Eq instance for a given type.
2013-04-07 12:58:26	<--	sanemat (~sanemat@153.208.138.210.vmobile.jp) has quit (Remote host closed the connection)
2013-04-07 12:58:26	Philonous	timthelion:  Hardly
2013-04-07 12:58:35	mauke	timthelion: define "correct"
2013-04-07 12:58:36	-->	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has joined #haskell
2013-04-07 12:58:36	elliott	that's not true, if you e.g. hide constructors of the type or such to maintain data abstraction
2013-04-07 12:58:41	typoclass	timthelion: i agree on the point that haskell can be hard to read because sometimes, you have to do type inference in your head to figure out if this "fmap f" relates to a Maybe or a list or what
2013-04-07 12:58:49	timthelion	Philonous: if the behavior is different from determining value equality than it is wrong.
2013-04-07 12:58:55	elliott	if (==) was always completely strict structural equality, it would have much more limited use
2013-04-07 12:59:14	elliott	timthelion: even if you cannot distinguish x,y if x == y from outside the module in which the type is defined?
2013-04-07 12:59:25	mauke	timthelion: define "value equality"
2013-04-07 12:59:25	-->	heruur (~tvh@2a00:12d0:a100:a101:304d:10ef:6ba4:4696) has joined #haskell
2013-04-07 12:59:29	timthelion	elliott: it is true that the implementations may vary, but that doesn't mean they are not unique in their behavior.
2013-04-07 12:59:34	elliott	being able to do optimisation thanks to module abstraction is a good thing
2013-04-07 13:00:10	elliott	timthelion: huh? I'm saying there are reasonable examples of Eq instances not being unique
2013-04-07 13:00:41	timthelion	mauke: Ok if v1 == v2 then for f :: a -> b f v1 == f v2
2013-04-07 13:00:41	arkeet	why are we talking about Eq?
2013-04-07 13:00:41	Philonous	timthelion:  Eq instance take equivalent representation of values into account. Take for example Ratio. The semantics of those values isn't intrinsic to the type
2013-04-07 13:00:56	mauke	timthelion: <<loop>>
2013-04-07 13:01:04	elliott	oh, Rational is a good example.
2013-04-07 13:01:07	elliott	mine were all uglier.
2013-04-07 13:01:23	<--	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has quit (Remote host closed the connection)
2013-04-07 13:01:56	timthelion	arkeet: well since someone claimed that if I don't like Monad instances since they are non transparent in their behavior, than somehow that means my logic also applies to Eq(which is transparent in it's behavior)
2013-04-07 13:01:59	kryft	You might also want to have different kinds of equality depending on context
2013-04-07 13:02:18	-->	end3rW (~end3rW@lak-175-242.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-04-07 13:02:42	timthelion	kryft: that's a very stupid thing to do in with typeclass instances though, since in haskell type clases are not fist class and thus cannot be "chosen" by context.
2013-04-07 13:02:57	 *	elliott thinks the definition of "transparent" here is equivalent to "familiar"
2013-04-07 13:03:08	<--	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2013-04-07 13:03:12	mauke	timthelion: no, you said "map and fold are such core features that anyone should know them, but a given typeclass instance for a given type is not."
2013-04-07 13:03:13	arkeet	timthelion: typeclass instances are no less transparent than function definitions
2013-04-07 13:03:15	kryft	Uh, what I said was badly phrased
2013-04-07 13:03:28	-->	finishingmove (~finishing@78.9.155.175) has joined #haskell
2013-04-07 13:03:30	<--	lcfrs (~lcfrs@50-1-125-82.dsl.dynamic.sonic.net) has quit (Ping timeout: 276 seconds)
2013-04-07 13:04:02	timthelion	kryft: but it still holds, that if you want multiple typeclass instances you need to patch GHC first.
2013-04-07 13:04:11	<--	JaRoel|4d (~jaroel|4d@2001:980:7133:1:c90c:a815:ba2d:7fd9) has quit (Ping timeout: 245 seconds)
2013-04-07 13:04:23	-->	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has joined #haskell
2013-04-07 13:04:57	<--	vlatko_ (~vlatko@188.129.49.47) has quit (Quit: Leaving)
2013-04-07 13:05:50	timthelion	mauke: that doesn't mean that some typeclass instances are not completely clear and need no exception to my rule about clarity.
2013-04-07 13:05:55	kryft	I just meant that there can be several different feasible definitions of 'equality' depending on what you're doing. The statement "there is only one valid Eq instance for a given type" sounded like "given a type, there can only be one reasonable way of defining Eq", which I don't think is true, but maybe I misinterpreted the sentence due to proto-migraine haze and ignorance :)
2013-04-07 13:06:22	kryft	s/defining Eq/defining what equality means for this type
2013-04-07 13:06:22	-->	monqy (~help@pool-98-108-214-230.snloca.dsl-w.verizon.net) has joined #haskell
2013-04-07 13:06:32	niteria	if you want multiple instances you just wrap in a newtype
2013-04-07 13:06:39	timthelion	kryft: it is still true, that the other Eq instances would be "wrong" enough that they wouldn't belong in a library.
2013-04-07 13:06:55	<--	ulfdoz (~mary@p5B38BB2F.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-04-07 13:07:08	-->	jacobw (~jacobw@unaffiliated/jacobw) has joined #haskell
2013-04-07 13:07:27	timthelion	kryft: Since if two things are Eq they should be Equal, that is, they should behave the same in all cases.
2013-04-07 13:07:47	mauke	timthelion: but you can't deduce behavior from the type definition alone
2013-04-07 13:08:20	timthelion	mauke: That is true, unlike with Functor, you can make a mistake in defining Eq.
2013-04-07 13:08:37	mauke	I can also make a mistake with Functor
2013-04-07 13:08:41	timthelion	mauke: but I can also define "reverse" incorectly, and that wouldn't make the name any less clear.
2013-04-07 13:08:49	timthelion	mauke: try :D
2013-04-07 13:08:50	elliott	instance Functor [] where fmap _ _ = []
2013-04-07 13:09:04	elliott	instance Functor [] where fmap f xs = concatMap (\x -> [f x, f x]) xs
2013-04-07 13:09:09	mauke	instance Functor [] where fmap f (x : xs) = [f x, f x]
2013-04-07 13:09:12	elliott	there are many ways to screw up a Functor instance
2013-04-07 13:09:28	 *	timthelion is surprised.
2013-04-07 13:09:37	elliott	i am also surprised
2013-04-07 13:09:43	mauke	instance Functor IO where fmap f x = do x; r <- x; return (f x)
2013-04-07 13:10:01	 *	timthelion was under the impression that functor was truely unique based on the free theorums rule
2013-04-07 13:10:11	elliott	of course these all violate the functor laws.
2013-04-07 13:10:18	mauke	I am not constrained by theorems or laws when writing code
2013-04-07 13:10:20	<--	fsvehla (~fsvehla@h081217181184.dyn.cm.kabsi.at) has quit (Quit: fsvehla)
2013-04-07 13:10:37	elliott	well, you are constrained by free theorems.
2013-04-07 13:10:39	-->	eyebloom (~eyebloom@user-387gm2l.cable.mindspring.com) has joined #haskell
2013-04-07 13:10:45	mauke	unsafePerformIO
2013-04-07 13:10:47	elliott	but f id = id of course doesn't hold for all functions
2013-04-07 13:11:04	elliott	mauke: well, i think that would obviously be inadmissable in context :P
2013-04-07 13:11:12	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Read error: Connection reset by peer)
2013-04-07 13:11:13	typoclass	well laws are a convention between humans. ghc doesn't know about them or check them
2013-04-07 13:11:14	mauke	instance Functor [] where fmap _ [] = []; fmap f (x : xs) = (: map f xs) $! (f x)
2013-04-07 13:11:23	-->	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-07 13:11:36	-->	bsrkaditya (7aa95558@gateway/web/freenode/ip.122.169.85.88) has joined #haskell
2013-04-07 13:12:23	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-07 13:12:48	<--	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-04-07 13:12:48	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-04-07 13:12:51	bsrkaditya	Hi, is there an equivalent of accumArray for map? ie, I am looking for a function of type Ord k => (a -> b -> a) -> a -> [(k,b)] -> M.Map k a
2013-04-07 13:13:50	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-07 13:14:10	<--	em (~em@unaffiliated/emma) has quit (Ping timeout: 245 seconds)
2013-04-07 13:15:19	typoclass	timthelion: i think we do need improved haddocks. stuff should be easier to look up, and we need more meaningful explanations. there are some good resources on the web (e.g. typeclassopedia), but they're not linked to from any of the haddocks. so, i agree on the point that haskell is not particularly well discoverable
2013-04-07 13:15:25	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 13:15:26	<--	reckler (~reckler@ppp118-208-39-187.lns20.bne1.internode.on.net) has quit (Ping timeout: 245 seconds)
2013-04-07 13:15:27	<--	Jonno_FTW (~come@9ch.in) has quit (Ping timeout: 256 seconds)
2013-04-07 13:15:50	timthelion	typoclass: functions are easy enough to look up.
2013-04-07 13:16:10	timthelion	typoclass: it's just type class instances of non unique type classes that give me trouble.
2013-04-07 13:16:23	-->	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-04-07 13:16:32	<--	vpopov (~happylife@dyn-32-176.fttbee.kis.ru) has quit (Ping timeout: 260 seconds)
2013-04-07 13:16:33	elliott	bsrkaditya: perhaps mapAccum + fromList or something will accomplish what you want?
2013-04-07 13:16:40	elliott	I admit I don't remember exactly what acumArray does
2013-04-07 13:17:58	-->	jkoshy (~jkoshy@122.167.118.165) has joined #haskell
2013-04-07 13:18:25	bsrkaditya	what does mapAccum do?
2013-04-07 13:18:45	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 245 seconds)
2013-04-07 13:19:06	<--	snoyberg (~ubuntu@89-139-153-6.bb.netvision.net.il) has quit (Ping timeout: 276 seconds)
2013-04-07 13:19:07	elliott	see http://hackage.haskell.org/packages/archive/containers/0.5.2.1/doc/html/Data-Map-Lazy.html#v:mapAccum
2013-04-07 13:19:33	<--	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-04-07 13:19:36	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-04-07 13:20:00	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-04-07 13:22:34	<--	sh (~sh@uiharu.memespace.net) has quit (Remote host closed the connection)
2013-04-07 13:22:47	-->	snoyberg (~ubuntu@89-139-153-6.bb.netvision.net.il) has joined #haskell
2013-04-07 13:22:50	-->	sh (~sh@uiharu.memespace.net) has joined #haskell
2013-04-07 13:25:13	<--	darthdeus (~darthdeus@c-2ec20ffa-74736162.cust.telenor.se) has left #haskell ("Linkinus - http://linkinus.com")
2013-04-07 13:25:26	-->	Franciman (~quassel@host111-5-dynamic.23-79-r.retail.telecomitalia.it) has joined #haskell
2013-04-07 13:26:47	<--	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has quit (Ping timeout: 246 seconds)
2013-04-07 13:27:36	<--	bsrkaditya (7aa95558@gateway/web/freenode/ip.122.169.85.88) has quit (Quit: Page closed)
2013-04-07 13:30:33	-->	mpiechotka (~mpiechotk@178-36-63-68.adsl.inetia.pl) has joined #haskell
2013-04-07 13:30:45	-->	staafl (~staafl@95-42-19-2.btc-net.bg) has joined #haskell
2013-04-07 13:35:02	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Read error: Connection reset by peer)
2013-04-07 13:35:05	<--	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has quit (Read error: Operation timed out)
2013-04-07 13:35:16	<--	Paprikac_ (~Paprikach@178.115.251.81.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-04-07 13:35:24	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-04-07 13:36:02	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 13:36:50	<--	fireglow (fireglow@unaffiliated/fireglow) has quit (Ping timeout: 252 seconds)
2013-04-07 13:38:56	<--	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has quit (Quit: Leaving)
2013-04-07 13:39:01	-->	setmeaway (stemearay@118.45.149.119) has joined #haskell
2013-04-07 13:39:08	-->	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has joined #haskell
2013-04-07 13:40:00	<--	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has quit (Changing host)
2013-04-07 13:40:00	-->	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has joined #haskell
2013-04-07 13:40:11	-->	fireglow (fireglow@unaffiliated/fireglow) has joined #haskell
2013-04-07 13:41:14	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-04-07 13:43:02	-->	mars-92 (~makis@athedsl-147061.home.otenet.gr) has joined #haskell
2013-04-07 13:43:46	--	PixelCrumbs is now known as Pixel_Zzzzz
2013-04-07 13:43:48	<--	Pixel_Zzzzz (~pixelcrum@unaffiliated/pixelcrumbs) has quit (Remote host closed the connection)
2013-04-07 13:44:57	<--	litherum (~litherum@c-24-19-135-10.hsd1.wa.comcast.net) has quit (Quit: litherum)
2013-04-07 13:45:33	<--	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-04-07 13:45:56	<--	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has quit (Ping timeout: 260 seconds)
2013-04-07 13:46:29	-->	emmanuelux (~emmanuelu@vau92-2-82-228-217-1.fbx.proxad.net) has joined #haskell
2013-04-07 13:47:10	-->	__main__ (~main@c-67-180-22-241.hsd1.ca.comcast.net) has joined #haskell
2013-04-07 13:48:06	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 13:48:52	-->	ceii (~ceii@13-130.105-92.cust.bluewin.ch) has joined #haskell
2013-04-07 13:51:16	<--	bitonic (~user@dyn1220-246.wlan.ic.ac.uk) has quit (Ping timeout: 245 seconds)
2013-04-07 13:51:40	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-07 13:51:54	<--	cognominal (~cognomina@37.161.195.144) has quit (Ping timeout: 252 seconds)
2013-04-07 13:52:43	-->	rexim (~rexim@unaffiliated/rexim) has joined #haskell
2013-04-07 13:52:55	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Quit: gabor)
2013-04-07 13:53:12	no-n[1]	is there are function somewhere that pads a string up with '0's to become a given length?
2013-04-07 13:53:22	no-n[1]	guess it would be easy to make
2013-04-07 13:53:54	<--	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has quit (Ping timeout: 252 seconds)
2013-04-07 13:54:08	mauke	printf?
2013-04-07 13:56:03	-->	adzeitor (~adzeitor@31.207.214.18) has joined #haskell
2013-04-07 13:56:09	-->	noam_ (~noam@213.57.201.130) has joined #haskell
2013-04-07 13:57:06	-->	em (~em@unaffiliated/emma) has joined #haskell
2013-04-07 13:57:41	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 257 seconds)
2013-04-07 13:58:01	-->	cognominal (~cognomina@37.160.46.180) has joined #haskell
2013-04-07 13:58:05	-->	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has joined #haskell
2013-04-07 13:58:17	<--	finishingmove (~finishing@78.9.155.175) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-07 13:58:30	<--	snowylike (~sn@91-67-171-156-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-04-07 13:59:24	-->	`^_^v (~nycs@ool-4573da18.dyn.optonline.net) has joined #haskell
2013-04-07 13:59:30	<--	nilsi (~nilsi@c83-253-22-138.bredband.comhem.se) has quit (Remote host closed the connection)
2013-04-07 13:59:36	<--	noam (~noam@213.57.201.130) has quit (Ping timeout: 264 seconds)
2013-04-07 14:00:01	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Ping timeout: 245 seconds)
2013-04-07 14:00:17	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-07 14:01:03	-->	zhulikas (~zhulikas@213.159.34.100) has joined #haskell
2013-04-07 14:01:47	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 260 seconds)
2013-04-07 14:01:55	-->	msuszczy (~martin@85.69.182.79) has joined #haskell
2013-04-07 14:02:14	-->	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has joined #haskell
2013-04-07 14:02:19	<--	PatrickRobotham (~chatzilla@CPE-120-147-161-38.gdiv1.vic.bigpond.net.au) has quit (Ping timeout: 264 seconds)
2013-04-07 14:02:37	-->	pala2 (~pala@HSI-KBW-134-3-229-202.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-04-07 14:03:19	-->	Afish (PARAPET@chips.ds16.agh.edu.pl) has joined #haskell
2013-04-07 14:05:44	-->	s_kilk (~shane@host81-152-130-140.range81-152.btcentralplus.com) has joined #haskell
2013-04-07 14:06:36	-->	nh2 (~nh2@119.75.27.50) has joined #haskell
2013-04-07 14:06:44	typoclass	> let pad c n = head . dropWhile ((< n) . length) . iterate (c :) in pad 'x' 6 "u" -- no-n[1]: don't know of one in the standard library, but you could use an infinite list ...
2013-04-07 14:06:46	lambdabot	  "xxxxxu"
2013-04-07 14:07:41	typoclass	hm, doesn't even need to be a Char, could be a String
2013-04-07 14:07:48	-->	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has joined #haskell
2013-04-07 14:08:17	no-n[1]	ah, that's interesting
2013-04-07 14:08:54	-->	bitonic (~user@dyn1216-117.wlan.ic.ac.uk) has joined #haskell
2013-04-07 14:09:50	int-e	dropWhile ((< n) . length) --> drop (n - length xs)  will be faster (xs being the third argument to pad)
2013-04-07 14:10:20	<--	quchen (~david@p54AA1B37.dip.t-dialin.net) has quit (Read error: Operation timed out)
2013-04-07 14:11:44	-->	nexx (~SPS-User@dslb-178-011-254-029.pools.arcor-ip.net) has joined #haskell
2013-04-07 14:12:01	-->	PaulVisschers (~PaulVissc@77-172-95-247.ip.telfort.nl) has joined #haskell
2013-04-07 14:12:05	<--	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-04-07 14:12:06	niteria	> let pad n = reverse . take n . (++ replicate n 'x') . reverse in pad 10 "str"
2013-04-07 14:12:08	lambdabot	  "xxxxxxxstr"
2013-04-07 14:12:41	arkeet	reversing twice is eeevil.
2013-04-07 14:12:42	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-04-07 14:12:59	niteria	and dropWhile on length isn
2013-04-07 14:13:03	niteria	isn't?
2013-04-07 14:13:06	arkeet	it's less evil.
2013-04-07 14:13:30	-->	feliperosa (~felipe@201.4.183.246) has joined #haskell
2013-04-07 14:13:33	-->	silver (~silver@37.215.137.246) has joined #haskell
2013-04-07 14:14:26	int-e	I tend to disagree. It's a subtle way to introduce quadratic runtime into a function that should obviously finish in linear time.
2013-04-07 14:14:28	arkeet	> let pad n s = replicate (n - length s) 'x' ++ s in pad 10 "str"
2013-04-07 14:14:30	lambdabot	  "xxxxxxxstr"
2013-04-07 14:14:39	-->	smerz (~smerz@a177088.upc-a.chello.nl) has joined #haskell
2013-04-07 14:14:45	int-e	arkeet: of course :)
2013-04-07 14:14:53	-->	adlan (~adlan@210.195.9.29) has joined #haskell
2013-04-07 14:14:55	no-n[1]	oh, yeah :)
2013-04-07 14:15:03	arkeet	oh, I didn't actually read int-e's thing.
2013-04-07 14:15:04	niteria	that's a lot better
2013-04-07 14:15:15	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-04-07 14:15:16	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-04-07 14:15:16	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-04-07 14:15:26	arkeet	> replicate (-1) 'a'
2013-04-07 14:15:28	lambdabot	  ""
2013-04-07 14:15:31	arkeet	ok cool.
2013-04-07 14:15:39	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 14:16:16	-->	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has joined #haskell
2013-04-07 14:16:24	arkeet	would be nicer if it worked on infinite lists.
2013-04-07 14:16:47	niteria	what's the length of infinite list?
2013-04-07 14:16:57	-->	ramses_ (~ramses@cl-1301.bru-01.be.sixxs.net) has joined #haskell
2013-04-07 14:16:59	int-e	> let pad n c s = replicate (n - length (take n s)) c ++ s in pad 10 'x' (repeat 'a')
2013-04-07 14:17:01	<--	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has quit (Quit: Leaving)
2013-04-07 14:17:02	lambdabot	  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...
2013-04-07 14:17:05	no-n[1]	niteria: 4
2013-04-07 14:17:11	<--	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has quit (Ping timeout: 260 seconds)
2013-04-07 14:17:21	-->	RichyB (~richardb@cpc10-hawk12-2-0-cust457.aztw.cable.virginmedia.com) has joined #haskell
2013-04-07 14:17:40	arkeet	int-e: oh, alright.
2013-04-07 14:17:59	-->	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has joined #haskell
2013-04-07 14:18:07	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (Ping timeout: 260 seconds)
2013-04-07 14:19:05	-->	izym (~izym@82.211.222.212) has joined #haskell
2013-04-07 14:19:26	-->	hughfdjackson (~hughfdjac@unaffiliated/hughfdjackson) has joined #haskell
2013-04-07 14:19:26	<--	hiro3 (~hiro@p210079202073.cnh.ne.jp) has quit (Ping timeout: 256 seconds)
2013-04-07 14:20:01	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-04-07 14:23:00	<--	sh (~sh@uiharu.memespace.net) has quit (Remote host closed the connection)
2013-04-07 14:23:17	-->	sh (~sh@uiharu.memespace.net) has joined #haskell
2013-04-07 14:23:36	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-04-07 14:25:31	-->	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has joined #haskell
2013-04-07 14:25:40	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Client Quit)
2013-04-07 14:25:50	<--	sh (~sh@uiharu.memespace.net) has quit (Remote host closed the connection)
2013-04-07 14:25:57	--	amatsu\idle is now known as amatsu
2013-04-07 14:26:06	-->	sh (~sh@uiharu.memespace.net) has joined #haskell
2013-04-07 14:26:07	-->	ahihi (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-04-07 14:26:45	<--	Guest27287 (~programme@178.187.16-202.xdsl.ab.ru) has quit (Ping timeout: 248 seconds)
2013-04-07 14:26:51	-->	Y_Less (Y_Less@90.193.117.25) has joined #haskell
2013-04-07 14:28:12	-->	qzr (~qzr@adsl-89-217-111-126.adslplus.ch) has joined #haskell
2013-04-07 14:28:17	<--	ndngvr` (~ndngvr@bcaec5e83086.click-network.com) has quit (Ping timeout: 256 seconds)
2013-04-07 14:29:00	<--	jkoshy (~jkoshy@122.167.118.165) has quit (Quit: jkoshy)
2013-04-07 14:30:22	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-04-07 14:30:49	-->	Thra11 (~thrall@92.114.112.87.dyn.plus.net) has joined #haskell
2013-04-07 14:31:18	typoclass	int-e: as far as i can tell, it doesn't seem to be faster http://hpaste.org/85350. it seems to be the same
2013-04-07 14:32:42	int-e	typoclass: in that program, p 'x' 999 "u" is a constant and gets floated out; it's only evaluated once.
2013-04-07 14:33:09	int-e	typoclass: (floated out of the mapM loop at least. which should be mapM_ but never mind.)
2013-04-07 14:34:39	int-e	> let pad c n = head . dropWhile ((< n) . length) . iterate (c :); pad' c n xs = head . drop (n - length xs) . iterate (c :) $ xs in take 10 $ pad' 'x' 1000000 "a"
2013-04-07 14:34:41	lambdabot	  "xxxxxxxxxx"
2013-04-07 14:34:45	int-e	> let pad c n = head . dropWhile ((< n) . length) . iterate (c :); pad' c n xs = head . drop (n - length xs) . iterate (c :) $ xs in take 10 $ pad 'x' 1000000 "a"
2013-04-07 14:34:49	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:35:18	arkeet	you should use something like criterion for benchmarking.
2013-04-07 14:35:51	int-e	yeah, but this is asymptotic complexity ... no benchmarking required :)
2013-04-07 14:35:55	<--	Afish (PARAPET@chips.ds16.agh.edu.pl) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-04-07 14:36:34	int-e	(Not for telling the difference between O(n) and O(n^2) with reasonably small constant factors at least.)
2013-04-07 14:36:41	__xc	> (show pi) !! 50
2013-04-07 14:36:43	lambdabot	  *Exception: Prelude.(!!): index too large
2013-04-07 14:36:47	arkeet	fine
2013-04-07 14:36:55	arkeet	> (show (pi :: CReal)) !! 50
2013-04-07 14:36:57	lambdabot	  *Exception: Prelude.(!!): index too large
2013-04-07 14:37:00	arkeet	er right.
2013-04-07 14:37:04	arkeet	> pi :: CReal
2013-04-07 14:37:06	lambdabot	  3.1415926535897932384626433832795028841972
2013-04-07 14:37:18	__xc	Real -> 32
2013-04-07 14:37:23	niteria	:t (!!)
2013-04-07 14:37:24	lambdabot	[a] -> Int -> a
2013-04-07 14:37:43	arkeet	> showCReal 100 pi
2013-04-07 14:37:45	lambdabot	  "3.141592653589793238462643383279502884197169399375105820974944592307816406...
2013-04-07 14:37:48	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-04-07 14:38:21	niteria	for a moment I thought it was some typeclassy thing, a lot of things are indexable
2013-04-07 14:38:32	<--	s_kilk (~shane@host81-152-130-140.range81-152.btcentralplus.com) has quit (Quit: Leaving)
2013-04-07 14:38:33	__xc	> (showCReal 100 pi) !! 40
2013-04-07 14:38:35	lambdabot	  '7'
2013-04-07 14:38:48	__xc	> (showCReal 100 pi) !! 90
2013-04-07 14:38:50	lambdabot	  '2'
2013-04-07 14:38:53	<--	heruur (~tvh@2a00:12d0:a100:a101:304d:10ef:6ba4:4696) has quit (Ping timeout: 246 seconds)
2013-04-07 14:39:05	__xc	interesting..
2013-04-07 14:39:05	arkeet	> (showCReal 1000000 pi) !! 100
2013-04-07 14:39:09	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:39:11	arkeet	not lazy, then.
2013-04-07 14:39:31	arkeet	> head $ showCReal 1000000 pi
2013-04-07 14:39:35	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:39:41	__xc	maybe it works on ghci
2013-04-07 14:39:52	-->	Guest27287 (~programme@176.50.56.68) has joined #haskell
2013-04-07 14:40:01	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-07 14:40:21	<--	xenon21 (~xenon@122.155.36.177) has quit (Read error: Connection reset by peer)
2013-04-07 14:40:22	<--	typoclass (~typoclass@p4FC93030.dip.t-dialin.net) has quit (Quit: Leaving.)
2013-04-07 14:40:38	int-e	> head $ showCReal 1000000 (37/39)
2013-04-07 14:40:42	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:41:07	__xc	weird
2013-04-07 14:41:13	-->	aCube (~cubce@dslb-178-012-202-161.pools.arcor-ip.net) has joined #haskell
2013-04-07 14:41:20	-->	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has joined #haskell
2013-04-07 14:41:26	latro`a	lambdabot's time limit is rather stringent
2013-04-07 14:41:55	arkeet	> showCReal 1 pi
2013-04-07 14:41:57	lambdabot	  "3.1"
2013-04-07 14:42:05	__xc	@src showCReal
2013-04-07 14:42:05	lambdabot	Source not found. The more you drive -- the dumber you get.
2013-04-07 14:42:19	latro`a	@src is extremely limited
2013-04-07 14:42:19	lambdabot	Source not found. My mind is going. I can feel it.
2013-04-07 14:42:20	<--	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has quit (Remote host closed the connection)
2013-04-07 14:42:27	-->	predator117 (~predator1@p50804C4B.dip.t-dialin.net) has joined #haskell
2013-04-07 14:42:27	int-e	> showCReal 3 pi -- 1 or 2?
2013-04-07 14:42:29	lambdabot	  "3.142"
2013-04-07 14:42:32	-->	peterjoel (~peterjoel@host109-152-188-129.range109-152.btcentralplus.com) has joined #haskell
2013-04-07 14:42:41	arkeet	@let blah [] ys = ys; blah (x:xs) (_:ys) = x : blah xs ys
2013-04-07 14:42:43	lambdabot	 Defined.
2013-04-07 14:42:49	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 14:42:55	arkeet	> foldr1 blah (map (showCReal ?? pi) [1..])
2013-04-07 14:42:59	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:43:01	arkeet	hmm
2013-04-07 14:43:22	arkeet	@let blah [] ys = ys; blah (x:xs) ~(_:ys) = x : blah xs ys
2013-04-07 14:43:23	lambdabot	 <local>:17:1:
2013-04-07 14:43:23	lambdabot	     Warning: Pattern match(es) are overlapped
2013-04-07 14:43:23	lambdabot	              I...
2013-04-07 14:43:25	arkeet	right.
2013-04-07 14:43:26	<--	v (~v@199.68.198.120) has quit (Ping timeout: 246 seconds)
2013-04-07 14:43:26	arkeet	@undefine
2013-04-07 14:43:28	arkeet	@let blah [] ys = ys; blah (x:xs) ~(_:ys) = x : blah xs ys
2013-04-07 14:43:30	lambdabot	 Defined.
2013-04-07 14:43:33	arkeet	> foldr1 blah (map (showCReal ?? pi) [1..])
2013-04-07 14:43:37	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 14:43:53	latro`a	:t (??)
2013-04-07 14:43:55	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-04-07 14:43:58	-->	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has joined #haskell
2013-04-07 14:44:02	arkeet	oh heh it doesn't work anyway.
2013-04-07 14:44:04	arkeet	?? is infix flip
2013-04-07 14:44:04	lambdabot	 is infix flip
2013-04-07 14:44:44	latro`a	flip generalizes to Functor, OK, TIL
2013-04-07 14:44:53	-->	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has joined #haskell
2013-04-07 14:45:04	arkeet	@let blah' [x] ys = ys; blah' (x:xs) ~(_:ys) = x : blah' xs ys
2013-04-07 14:45:06	lambdabot	 Defined.
2013-04-07 14:46:50	arkeet	@let lazyShowCReal n x = foldr1 blah' (map (showCReal ?? pi) [0..])
2013-04-07 14:46:52	lambdabot	 Defined.
2013-04-07 14:46:53	niteria	?? is nice, is it packaged somewhere?
2013-04-07 14:46:53	lambdabot	Plugin `compose' failed with: Unknown command: ""
2013-04-07 14:46:56	arkeet	it's in lens
2013-04-07 14:47:06	arkeet	oops
2013-04-07 14:47:13	arkeet	@let foo x = foldr1 blah' (map (showCReal ?? pi) [0..])
2013-04-07 14:47:15	lambdabot	 Defined.
2013-04-07 14:47:18	niteria	of course, everything is in lens
2013-04-07 14:47:19	arkeet	I'm really dumb.
2013-04-07 14:47:20	arkeet	@undefine
2013-04-07 14:47:27	arkeet	@let blah [_] ys = ys; blah (x:xs) ~(_:ys) = x : blah xs ys
2013-04-07 14:47:29	lambdabot	 Defined.
2013-04-07 14:47:38	int-e	> take 20 $ let blah ((x:_):xss) = x : blah (map tail xss) in blah (map (showCReal ?? pi) [1..])
2013-04-07 14:47:39	arkeet	@let lazyShowCReal x = foldr1 blah (map (showCReal ?? x) [0..])
2013-04-07 14:47:40	lambdabot	  "3.141592653589793238"
2013-04-07 14:47:40	lambdabot	 Defined.
2013-04-07 14:47:53	arkeet	> take 20 $ lazyShowCReal pi
2013-04-07 14:47:55	lambdabot	  "3.141592653589793238"
2013-04-07 14:48:08	arkeet	lazy and slow :P
2013-04-07 14:48:29	arkeet	@let lazyShowCReal' x = foldr1 blah (map (showCReal ?? x) (iterate (*2) 1))
2013-04-07 14:48:31	lambdabot	 Defined.
2013-04-07 14:48:32	arkeet	> take 20 $ lazyShowCReal' pi
2013-04-07 14:48:34	lambdabot	  "3.141592653589793238"
2013-04-07 14:49:36	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-04-07 14:49:41	arkeet	> lazyShowCReal' pi
2013-04-07 14:49:42	<--	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has quit (Ping timeout: 248 seconds)
2013-04-07 14:49:43	lambdabot	  "3.141592653589793238462643383279502884197169399375105820974944592307816406...
2013-04-07 14:49:54	arkeet	> lazyShowCReal' pi !! 1000
2013-04-07 14:49:56	lambdabot	  '8'
2013-04-07 14:50:08	niteria	nice, lazyfication with log n overhead
2013-04-07 14:50:35	<--	lewis1711 (~chatzilla@122-59-194-155.jetstream.xtra.co.nz) has quit (Quit: ChatZilla 0.9.90 [Firefox 19.0.2/20130307122351])
2013-04-07 14:51:09	-->	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has joined #haskell
2013-04-07 14:51:34	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 14:51:58	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-04-07 14:52:04	-->	Thomyho4 (~thomyho@mnhm-590c126d.pool.mediaWays.net) has joined #haskell
2013-04-07 14:52:21	-->	AfC (~andrew@gateway.syd.operationaldynamics.com) has joined #haskell
2013-04-07 14:52:27	<--	flebron (~flebron@c-76-102-255-42.hsd1.ca.comcast.net) has quit
2013-04-07 14:53:10	<--	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has quit (Client Quit)
2013-04-07 14:54:02	<--	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has quit (Remote host closed the connection)
2013-04-07 14:54:39	-->	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has joined #haskell
2013-04-07 14:55:08	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-07 14:55:09	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Read error: Operation timed out)
2013-04-07 14:55:17	<--	feliperosa (~felipe@201.4.183.246) has quit (Quit: Leaving)
2013-04-07 14:55:27	<--	Guest27287 (~programme@176.50.56.68) has quit (Read error: Operation timed out)
2013-04-07 14:55:38	dario	@ty (>>>)
2013-04-07 14:55:39	lambdabot	Control.Category.Category cat => cat a b -> cat b c -> cat a c
2013-04-07 14:58:30	-->	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has joined #haskell
2013-04-07 14:58:31	-->	heruur (~tvh@239-156-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-07 14:59:13	-->	JaRoel (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 14:59:16	<--	LK4D4 (~LK4D4@2002:c35d:cf2c:2::2102) has left #haskell
2013-04-07 14:59:53	int-e	Hmm, CReal gets really slow at computing pi for more than 10k digits.
2013-04-07 15:00:32	-->	v (~v@199.68.198.120) has joined #haskell
2013-04-07 15:00:46	arkeet	ah, creal computes pi as 16 arctan(1/5) - 4 arctan(1/239(
2013-04-07 15:00:47	arkeet	)
2013-04-07 15:00:59	-->	RageOfThou (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has joined #haskell
2013-04-07 15:01:19	<--	fireglow (fireglow@unaffiliated/fireglow) has quit (Ping timeout: 240 seconds)
2013-04-07 15:01:21	arkeet	which it does by a power series
2013-04-07 15:01:35	-->	Jambato (~le@auv95-1-82-241-80-196.fbx.proxad.net) has joined #haskell
2013-04-07 15:01:42	arkeet	so it's probably quadratic time or so
2013-04-07 15:02:09	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-04-07 15:02:10	<--	mars-92 (~makis@athedsl-147061.home.otenet.gr) has quit (Quit: leaving)
2013-04-07 15:02:29	<--	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has quit (Ping timeout: 248 seconds)
2013-04-07 15:02:34	int-e	arkeet: but still I think your lazyShowCReal' is wrong with probability 1, because the second-to-last digit of each chunk is incorrect with probability 1/20. (namly when rounding up a last digit that is 0)
2013-04-07 15:02:52	arkeet	oh, I didn
2013-04-07 15:02:55	arkeet	't know that.
2013-04-07 15:02:59	int-e	... that is 9
2013-04-07 15:03:04	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 256 seconds)
2013-04-07 15:03:14	-->	tzxn3 (~tzxn3@cpc14-mapp11-2-0-cust125.12-4.cable.virginmedia.com) has joined #haskell
2013-04-07 15:03:15	int-e	(who put 0 right next to 9 on the keyboard anyway?)
2013-04-07 15:03:32	__xc	> lazyShowCReal' pi !! 100000
2013-04-07 15:03:34	arkeet	or hadn't thought of it.
2013-04-07 15:03:36	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:03:51	__xc	> lazyShowCReal' pi !! 10000
2013-04-07 15:03:54	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:04:09	-->	ndngvr (~ndngvr@131.191.89.46) has joined #haskell
2013-04-07 15:04:11	arkeet	> drop 750 $ showCReal 770 pi
2013-04-07 15:04:12	lambdabot	  "6051870721134999999837"
2013-04-07 15:04:18	<--	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has quit (Quit: Leaving...)
2013-04-07 15:04:18	arkeet	> drop 750 $ showCReal 767 pi
2013-04-07 15:04:20	lambdabot	  "6051870721135"
2013-04-07 15:04:22	arkeet	heh.
2013-04-07 15:04:33	-->	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has joined #haskell
2013-04-07 15:04:36	<--	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has quit (Changing host)
2013-04-07 15:04:37	-->	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has joined #haskell
2013-04-07 15:04:43	<--	FunkyDrummer (~RageOfTho@cable-77-221-21-70.dynamic.telemach.ba) has quit (Ping timeout: 264 seconds)
2013-04-07 15:04:47	-->	fireglow (fireglow@unaffiliated/fireglow) has joined #haskell
2013-04-07 15:05:04	__xc	99999, pi is irregular there
2013-04-07 15:06:16	<--	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Quit: Quit: Textual IRC Client: www.textualapp.com)
2013-04-07 15:06:24	arkeet	I smiled when I learned about that the first time.
2013-04-07 15:07:21	-->	tcrayford (tcrayford@gateway/shell/ircrelay.com/x-scvevppcdueklymp) has joined #haskell
2013-04-07 15:07:49	int-e	arkeet: but you can use it to fool people; the first 32768 characters are correct at least; I'm not patient enough to push the calculation further.
2013-04-07 15:07:58	arkeet	haha
2013-04-07 15:08:39	-->	fro0t (~fro0t@1.23.67.95) has joined #haskell
2013-04-07 15:08:41	arkeet	> lazyShowCReal pi
2013-04-07 15:08:43	__xc	my password is a sequance of pi, so I don't forget it, no jk
2013-04-07 15:08:45	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:08:49	arkeet	bah
2013-04-07 15:08:54	arkeet	> tale 50 $  lazyShowCReal pi
2013-04-07 15:08:55	lambdabot	  Not in scope: `tale'
2013-04-07 15:08:56	lambdabot	 Perhaps you meant one of these:
2013-04-07 15:08:56	lambdabot	   `take' (imported f...
2013-04-07 15:08:59	__xc	that's why I asked you about pi
2013-04-07 15:08:59	arkeet	> take 50 $  lazyShowCReal pi
2013-04-07 15:09:01	__xc	hehe
2013-04-07 15:09:01	int-e	__xc: so it's 99999?
2013-04-07 15:09:01	lambdabot	  "3.141592653589793238462643383279502884197169399375"
2013-04-07 15:09:06	__xc	lol
2013-04-07 15:09:11	arkeet	well those are correct, hm
2013-04-07 15:09:16	-->	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has joined #haskell
2013-04-07 15:09:29	-->	Guest27287 (~programme@178.186.162-106.xdsl.ab.ru) has joined #haskell
2013-04-07 15:09:34	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Client Quit)
2013-04-07 15:09:36	arkeet	oh yeah, it could only go wrong if there's a 99 that's rounded up.
2013-04-07 15:09:48	__xc	no it is between the 10000th and 10008 digit of pi
2013-04-07 15:09:50	arkeet	because it doesn't write trailing zeros
2013-04-07 15:10:00	-->	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has joined #haskell
2013-04-07 15:10:06	-->	dawe (~dawe@koln-4d0d1471.pool.mediaWays.net) has joined #haskell
2013-04-07 15:10:13	arkeet	__xc: you better change your password now
2013-04-07 15:10:21	arkeet	:p
2013-04-07 15:10:21	__xc	:))
2013-04-07 15:11:27	arkeet	I have a couple random-looking passwords derived from nonsense phrases, and the rest I have a password manager for.
2013-04-07 15:11:32	arkeet	but I guess that's -blah.
2013-04-07 15:11:34	int-e	arkeet: oh. then it's actually correct
2013-04-07 15:11:49	arkeet	int-e: oh, so it is.
2013-04-07 15:11:52	int-e	arkeet: because when 99 gets rounded up, 2 digits are truncated, and so on.
2013-04-07 15:11:53	-->	fredmorcos (~fmorcos@cm56-238-233.liwest.at) has joined #haskell
2013-04-07 15:12:08	int-e	wow
2013-04-07 15:12:09	arkeet	cool =)
2013-04-07 15:12:13	-->	estebistec (~estebiste@174.34.1.240.reverse.socket.net) has joined #haskell
2013-04-07 15:12:27	arkeet	> lazyShowCReal 1
2013-04-07 15:12:31	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:12:34	arkeet	heh.
2013-04-07 15:12:43	<--	floatingman1 (~dnewman@c-69-137-90-245.hsd1.tn.comcast.net) has quit (Read error: Connection reset by peer)
2013-04-07 15:12:51	arkeet	> lazyShowCReal' (1 - 1/10^100)
2013-04-07 15:12:55	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:13:00	arkeet	> lazyShowCReal' (1 - 1/10^10)
2013-04-07 15:13:04	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:13:08	arkeet	> showCReal 100 (1 - 1/10^10)
2013-04-07 15:13:10	lambdabot	  "0.9999999999"
2013-04-07 15:13:14	arkeet	right.
2013-04-07 15:13:17	arkeet	> lazyShowCReal' (1 - 1/10^1000)
2013-04-07 15:13:21	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:13:30	arkeet	> lazyShowCReal' (1 - 1/10^2000)
2013-04-07 15:13:34	lambdabot	  mueval-core: Time limit exceeded
2013-04-07 15:13:45	dario	lower exponent, not higher..
2013-04-07 15:13:46	__xc	"this is my strong password"
2013-04-07 15:14:02	arkeet	dario: no, lambdabot takes 1024 characters or so from show
2013-04-07 15:14:14	<--	ndngvr (~ndngvr@131.191.89.46) has quit (Ping timeout: 246 seconds)
2013-04-07 15:14:14	arkeet	so it will fail if it loops before generating that many
2013-04-07 15:14:31	arkeet	> showCReal 2000 (1 - 1/10^2000)
2013-04-07 15:14:34	lambdabot	  "0.999999999999999999999999999999999999999999999999999999999999999999999999...
2013-04-07 15:14:38	dario	so time has nothing to do with it?
2013-04-07 15:14:39	arkeet	> showCReal 1999 (1 - 1/10^2000)
2013-04-07 15:14:41	lambdabot	  "1.0"
2013-04-07 15:14:58	arkeet	dario: it loops if we ask for too many digits.
2013-04-07 15:15:17	arkeet	anyway, that's something to fix.
2013-04-07 15:15:18	<--	mapf (~user@5.254.180.254) has quit (Ping timeout: 252 seconds)
2013-04-07 15:15:23	arkeet	but I guess we can't fix it.
2013-04-07 15:15:24	dario	"loops" as in doesn't terminate within 1024 characters?
2013-04-07 15:15:29	arkeet	yeah
2013-04-07 15:15:32	arkeet	er
2013-04-07 15:15:48	arkeet	well it has to do with how lazyShowCReal works.
2013-04-07 15:15:54	<--	v (~v@199.68.198.120) has quit (Ping timeout: 256 seconds)
2013-04-07 15:16:00	<--	vili (~vili@cpe-76-189-126-223.neo.res.rr.com) has quit (Ping timeout: 258 seconds)
2013-04-07 15:16:02	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 15:16:10	int-e	> showCReal 1999 (1 - 5.2/10^2000)
2013-04-07 15:16:12	lambdabot	  "1.0"
2013-04-07 15:17:02	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 256 seconds)
2013-04-07 15:17:05	int-e	> showCReal 1999 (1 - 5.3/10^2000)
2013-04-07 15:17:08	lambdabot	  "0.999999999999999999999999999999999999999999999999999999999999999999999999...
2013-04-07 15:17:15	<--	RenJuan (~juan@cpe-76-180-168-166.buffalo.res.rr.com) has left #haskell
2013-04-07 15:17:17	-->	phischu (~pschuster@p4FD309D4.dip0.t-ipconnect.de) has joined #haskell
2013-04-07 15:17:20	arkeet	I don't get it.
2013-04-07 15:17:27	-->	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has joined #haskell
2013-04-07 15:17:42	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-04-07 15:17:45	<--	mmaruseacph2 (~mihai@swarm.cs.pub.ro) has quit (Remote host closed the connection)
2013-04-07 15:17:48	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-04-07 15:17:48	arkeet	why does it do that?
2013-04-07 15:18:09	int-e	It's rounding incorrectly, but that's to be expected, since one cannot pinpoint computable reals exactly.
2013-04-07 15:18:28	arkeet	hm
2013-04-07 15:18:34	<--	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has quit (Read error: Connection reset by peer)
2013-04-07 15:18:34	int-e	so the comparison to 1 - 5/10^2000 (in this case) cannot be exact.
2013-04-07 15:18:35	-->	bananagram (~bot@c-98-198-236-112.hsd1.tx.comcast.net) has joined #haskell
2013-04-07 15:18:48	-->	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has joined #haskell
2013-04-07 15:18:52	arkeet	> showCReal 19 (1 - 5.3/10^20)
2013-04-07 15:18:53	lambdabot	  "0.9999999999999999999"
2013-04-07 15:18:54	arkeet	> showCReal 19 (1 - 5.2/10^20)
2013-04-07 15:18:55	<--	qzr (~qzr@adsl-89-217-111-126.adslplus.ch) has quit (Remote host closed the connection)
2013-04-07 15:18:56	lambdabot	  "0.9999999999999999999"
2013-04-07 15:19:00	arkeet	> showCReal 19 (1 - 5.01/10^20)
2013-04-07 15:19:01	-->	Arnar (~arnarb@li187-148.members.linode.com) has joined #haskell
2013-04-07 15:19:01	lambdabot	  "0.9999999999999999999"
2013-04-07 15:19:06	arkeet	well whatever.
2013-04-07 15:19:22	-->	Kruppe (~user@CPE602ad0938e9a-CM602ad0938e97.cpe.net.cable.rogers.com) has joined #haskell
2013-04-07 15:19:23	-->	boccato (~boccato@201.87.106.41) has joined #haskell
2013-04-07 15:19:37	--	no-n[1] is now known as no-n[2]
2013-04-07 15:20:23	int-e	> showCReal 19 (1 - 4.99 / 10^20) -- going wrong in the other direction here
2013-04-07 15:20:24	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-04-07 15:20:25	lambdabot	  "0.9999999999999999999"
2013-04-07 15:20:34	arkeet	heh
2013-04-07 15:20:39	-->	jianmeng (~mengjian@123.138.39.31) has joined #haskell
2013-04-07 15:22:06	-->	Sorella (~queen@201.80.212.227) has joined #haskell
2013-04-07 15:22:54	-->	sepp2k (~sepp2k@64pc60.pools.uni-luebeck.de) has joined #haskell
2013-04-07 15:23:00	<--	Arnar (~arnarb@li187-148.members.linode.com) has quit (Remote host closed the connection)
2013-04-07 15:23:02	<--	bradleyayers (~brad@ppp201-252.static.internode.on.net) has quit (Remote host closed the connection)
2013-04-07 15:23:24	-->	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has joined #haskell
2013-04-07 15:23:52	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Client Quit)
2013-04-07 15:24:29	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-04-07 15:24:36	<--	fro0t (~fro0t@1.23.67.95) has quit (Ping timeout: 256 seconds)
2013-04-07 15:25:00	<--	lachenmayer (~lachenmay@p5492E538.dip.t-dialin.net) has quit (Quit: lachenmayer)
2013-04-07 15:27:48	<--	leoncamel2 (~leoncamel@124.126.171.114) has quit (Ping timeout: 256 seconds)
2013-04-07 15:27:54	-->	groovy2shoes (~cory@unaffiliated/groovebot) has joined #haskell
2013-04-07 15:28:20	-->	hseg (5f567ee9@gateway/web/freenode/ip.95.86.126.233) has joined #haskell
2013-04-07 15:29:23	-->	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has joined #haskell
2013-04-07 15:29:24	hseg	Trying to install HLint. Getting the error pasted below. How do I diagnose, and how do I fix?
2013-04-07 15:29:26	hpaste	hseg pasted “Errors” at http://hpaste.org/85354
2013-04-07 15:29:44	-->	latermuse (~ron@112.201.145.213) has joined #haskell
2013-04-07 15:29:51	-->	jutaro (~jutaro@p5DDB272F.dip.t-dialin.net) has joined #haskell
2013-04-07 15:30:31	finnrobi	I'm trying to create a clone of wc using System.Console.CmdArgs (learning purposes) and I want to preserve the semantics that the argument '-' means stdin. Just passing it in on argv makes CmdArgs complain, but what I think I want to do is to just pass it through as a positional parameter (adding it to my [FilePath] field). Is this possible?
2013-04-07 15:32:05	arkeet	hseg: you should show the rest of the build log.
2013-04-07 15:32:09	__xc	hseg, install these packages?
2013-04-07 15:32:32	arkeet	hseg: sounds like hashable might be broken? what does `ghc-pkg check` say?
2013-04-07 15:32:34	hseg	Hashable is installed. At least, in GHCi, import Data.Hashable doesn't give me errors
2013-04-07 15:32:38	arkeet	hmm
2013-04-07 15:32:42	supki	that looks like linker error?
2013-04-07 15:32:53	arkeet	hseg: but do you have multiple versions of hashable installed?
2013-04-07 15:33:29	hseg	Don't think so. Multiple versions of GHC, though...
2013-04-07 15:33:32	arkeet	hseg: anyway, you should show the rest of the build log.
2013-04-07 15:33:38	arkeet	hm...
2013-04-07 15:33:47	no-n[2]	does programming ever make your mind feel weird?
2013-04-07 15:33:48	__xc	ah this is your cabal error?
2013-04-07 15:33:59	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 252 seconds)
2013-04-07 15:34:17	hseg	Yes. This is the tail end of the error, after all the "Building foo" lines
2013-04-07 15:34:26	__xc	k
2013-04-07 15:34:30	-->	v (~v@61.173.101.195) has joined #haskell
2013-04-07 15:35:00	hseg	Is there any way I can uninstall GHC 7.6 and make cabal remove all packages compiled with it? That way I'll have one GHC on my system.
2013-04-07 15:35:03	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-04-07 15:35:04	arkeet	hseg: you should show the rest of it.
2013-04-07 15:35:29	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 15:35:49	hpaste	hseg annotated “Errors” with “Full log” at http://hpaste.org/85354#a85355
2013-04-07 15:35:55	supki	hseg: are you sure you can use anything from hashable after you import it?
2013-04-07 15:36:26	arkeet	right, ghci doesn't link until you actually use something from the module.
2013-04-07 15:36:46	arkeet	hseg: what does ghc-pkg check say?
2013-04-07 15:36:52	hseg	Typechecking works. Actually evaluating stuff, not so much
2013-04-07 15:37:24	-->	k0001 (~k0001@host144.186-125-147.telecom.net.ar) has joined #haskell
2013-04-07 15:37:24	hpaste	hseg annotated “Errors” with “ghc-pkg check” at http://hpaste.org/85354#a85356
2013-04-07 15:37:53	arkeet	nothing broken according to it.
2013-04-07 15:38:02	arkeet	but maybe a reinstall of hashable would fix it anyway?
2013-04-07 15:38:49	-->	s_kilk (~shane@host81-152-130-140.range81-152.btcentralplus.com) has joined #haskell
2013-04-07 15:38:55	<--	JaRoel (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 264 seconds)
2013-04-07 15:39:09	<--	kniu (~kniu@c-67-160-8-163.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-04-07 15:39:20	supki	https://github.com/tibbe/hashable/issues/46
2013-04-07 15:39:20	hpaste	hseg pasted “Warnings from cabal on cabal install hashable --reinstall” at http://hpaste.org/85357
2013-04-07 15:39:34	--	amatsu is now known as amatsu\idle
2013-04-07 15:39:47	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-04-07 15:39:59	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-07 15:40:25	<--	heruur (~tvh@239-156-103-86.dynamic.dsl.tng.de) has quit (Ping timeout: 245 seconds)
2013-04-07 15:40:25	<--	aCube (~cubce@dslb-178-012-202-161.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-04-07 15:40:53	<--	dkasak (~dkasak@dh207-110-199.xnet.hr) has quit (Quit: WeeChat 0.4.0)
2013-04-07 15:44:26	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 256 seconds)
2013-04-07 15:44:51	-->	kk` (~kk@unaffiliated/kk/x-5380134) has joined #haskell
2013-04-07 15:45:14	-->	dkasak (~dkasak@dh207-110-199.xnet.hr) has joined #haskell
2013-04-07 15:45:26	-->	sambio (~sambio@unaffiliated/sambio) has joined #haskell
2013-04-07 15:45:53	hseg	Should I reinstall despite the warnings?
2013-04-07 15:46:09	timthelion	hseg: it depends on what you are reinstalling
2013-04-07 15:46:30	timthelion	libraries that depend on a library must also be reinstalled so as to not risk type conflicts
2013-04-07 15:46:33	hseg	hashable. The warnings cabal gave are posted here: http://hpaste.org/85357
2013-04-07 15:46:52	supki	hseg: issue I linked to explains the details, I doubt reinstalling will help
2013-04-07 15:47:08	<--	sambio (~sambio@unaffiliated/sambio) has quit (Client Quit)
2013-04-07 15:47:21	hseg	OK, how do I downgrade?
2013-04-07 15:47:37	timthelion	hseg: you would have to reinstall many things, since everything that rellies on conduit would have to be reintstalled as well.
2013-04-07 15:47:54	supki	hseg: anyway, after you reinstall hashable, all packages that depend on it are broken, and you should reinstall them too
2013-04-07 15:47:55	<--	cognominal (~cognomina@37.160.46.180) has quit (Read error: Connection reset by peer)
2013-04-07 15:48:12	-->	sonda (~sonda@adsl-ull-195-200.50-151.net24.it) has joined #haskell
2013-04-07 15:48:21	timthelion	hseg: well, that's not a downgrade, what you try to do their is replace a package with the same version of itself(for the purpose of patching for example)
2013-04-07 15:49:22	hseg	You're confusing me. What do I need to do? From the bug report, I understand the latest hashable doesn't work under windows, and that I should use 1.1
2013-04-07 15:49:54	timthelion	hseg: well you wouldn't want to reinstall 1.2 then, you would want to uninstall 1.2 and then install 1.1
2013-04-07 15:50:08	hseg	OK. How do I do that?
2013-04-07 15:50:19	hseg	AFAICT, cabal can't uninstall stuff
2013-04-07 15:50:38	timthelion	hseg: good question.
2013-04-07 15:50:44	-->	fro0t (~fro0t@1.23.67.95) has joined #haskell
2013-04-07 15:51:07	nh2	dependency hell is ... well, hell
2013-04-07 15:51:25	timthelion	https://github.com/haskell/cabal/issues/373
2013-04-07 15:51:33	hseg	:-) Seriously though, this is one *messed-up* system.
2013-04-07 15:51:42	timthelion	hseg: yes it is
2013-04-07 15:51:51	<--	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-04-07 15:52:29	hpc	i vote that you clear your .ghc directory, `cabal install cabal-dev`, and use that for your projects
2013-04-07 15:52:31	timthelion	hseg: there is a list somewhere of things that are fucked up in haskell.  I think it goes "cabal, cross module typeclass instances, data constructor namespacing"
2013-04-07 15:52:57	hseg	The first and last I can attest to being bitten by personally.
2013-04-07 15:53:24	timthelion	hpc: Does that require reinstalling everything for each package you work on?
2013-04-07 15:54:01	timthelion	hpc: it still wouldn't help him, because if he reinstalls everything, he'll just end up with the up-to-date but bad 1.2 version.
2013-04-07 15:54:02	hpc	cabal-dev sandboxes whatever you invoke it on
2013-04-07 15:54:09	hpc	ah
2013-04-07 15:54:31	-->	kmels_ (~kmels@frbg-4d0285e4.pool.mediaWays.net) has joined #haskell
2013-04-07 15:54:56	 *	timthelion would sugest downloading arch linux and installing that, but perhaps this isn't the time.
2013-04-07 15:55:02	hseg	How about I uninstall the Haskell Platform and start over?
2013-04-07 15:55:06	-->	Entroacceptor (~mad@unserver.de) has joined #haskell
2013-04-07 15:55:24	 *	hseg would love to use haskell under linux, but doesn't have his own computer.
2013-04-07 15:55:36	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 15:55:37	-->	bentham (~bentham@pool-108-8-231-234.spfdma.east.verizon.net) has joined #haskell
2013-04-07 15:55:37	timthelion	hseg: yes, that is what you should do, but FIRST you must figure out how to blacklist hashtable v 1.2
2013-04-07 15:55:39	<--	jutaro (~jutaro@p5DDB272F.dip.t-dialin.net) has quit (Quit: jutaro)
2013-04-07 15:55:46	hseg	BTW, how good is the pacman-cabal interoperability?
2013-04-07 15:56:02	<--	charliesome (~textual@124-168-119-180.dyn.iinet.net.au) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-04-07 15:56:07	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (Remote host closed the connection)
2013-04-07 15:56:14	timthelion	hseg: I just use cabal for everything and don't install any haskell libs through pacman
2013-04-07 15:56:19	hpc	hseg: i would trust absolutely nothing that comes from another package manager
2013-04-07 15:56:34	adzeitor	> let pad n s = drop (length $  zip (replicate n '_') s) (replicate n '_')  ++ s in pad 10 "hello"
2013-04-07 15:56:36	lambdabot	  "_____hello"
2013-04-07 15:56:38	hseg	I assume you mean blacklisting hashtable under windows for the second attempt?
2013-04-07 15:56:42	-->	vasili111 (kvirc@5.178.198.228) has joined #haskell
2013-04-07 15:56:56	adzeitor	> let pad n s = drop (length $  zip (replicate n '_') s) (replicate n '_')  ++ s in take 20 $ pad 10 (repeat 'A')
2013-04-07 15:56:57	lambdabot	  "AAAAAAAAAAAAAAAAAAAA"
2013-04-07 15:57:04	timthelion	hseg: just blacklist a specific version of hashtag under windows for the seccond attempt
2013-04-07 15:57:14	-->	grandtheftR (~Adium@c-98-207-106-13.hsd1.ca.comcast.net) has joined #haskell
2013-04-07 15:57:20	<--	vasili111 (kvirc@5.178.198.228) has left #haskell ("Once you know what it is you want to be true, instinct is a very useful device for enabling you to know that it is")
2013-04-07 15:57:21	-->	cognominal (~cognomina@37.160.46.180) has joined #haskell
2013-04-07 15:57:24	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-04-07 15:57:28	<--	Guest27287 (~programme@178.186.162-106.xdsl.ab.ru) has quit (Read error: Operation timed out)
2013-04-07 15:57:28	-->	hallski (~hallski@c83-251-213-66.bredband.comhem.se) has joined #haskell
2013-04-07 15:57:30	hseg	hpc: Yes and no. Using a single package manager for the entire system allows you to know to what package each file belongs, etc etc.
2013-04-07 15:58:52	hseg	Can't find how to blacklist packages.
2013-04-07 15:59:00	timthelion	hseg: you can't
2013-04-07 15:59:10	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-07 15:59:17	hseg	So how am I going to write/test my code?
2013-04-07 15:59:31	adzeitor	> let pad n s = drop (length $ take n s) (replicate n '_')  ++ s in take 20 $ pad 10 (repeat 'A')
2013-04-07 15:59:33	lambdabot	  "AAAAAAAAAAAAAAAAAAAA"
2013-04-07 15:59:45	jmcarthur	hseg: the main problem with using pacman is that you can only have one version of a package installed at a time
2013-04-07 15:59:52	<--	sh (~sh@uiharu.memespace.net) has quit (Remote host closed the connection)
2013-04-07 15:59:58	timthelion	hseg: I would download 1.1, modify it's version to be 1.2, --force-reinstall over 1.2, keeping a list of packages that relied upon 1.2. Then --force-reinstall those, untill I had --force-reinstalled the whole system.
2013-04-07 16:00:02	-->	edsko (~edsko@79.97.126.24) has joined #haskell
2013-04-07 16:00:06	jmcarthur	hseg: and when you upgrade packages that others depend on, they *all* have to be upgraded
2013-04-07 16:00:09	-->	sh (~sh@uiharu.memespace.net) has joined #haskell
2013-04-07 16:00:30	jmcarthur	hseg: this is especially problematic if you aren't maintaining all of those packages because then you are at the mercy of others to upgrade everything at once
2013-04-07 16:00:37	 *	hseg curls up in a small corner, frightened out of his wits
2013-04-07 16:00:38	supki	timthelion: why not  cabal install whatever --constraint='hashable==1.1' --force-reinstalls ?
2013-04-07 16:00:44	timthelion	hseg: and by modify it's version I mean edit the cabal file
2013-04-07 16:01:03	jmcarthur	hseg: so i, too, recommend just using cabal for most haskell packages
2013-04-07 16:01:37	timthelion	supki: is that possible? I don't really know, I just saw https://github.com/haskell/cabal/issues/373 here that you cannot blacklist so I thought up a hack.
2013-04-07 16:02:22	timthelion	supki: you can always back up ~/.ghc and ~/.cabal first
2013-04-07 16:02:24	hseg	tl;dr cabal is buggy; since ghc is statically linked and performs x-package optimizations most ways of using a package manager from a distro are broken for ghc. HELL
2013-04-07 16:02:59	timthelion	supki: that was meant for hseg actually
2013-04-07 16:03:17	niteria	@where sicp
2013-04-07 16:03:17	lambdabot	http://mitpress.mit.edu/sicp/ | http://swiss.csail.mit.edu/classes/6.001/abelson-sussman-lectures/ | http://www.vex.net/~trebla/haskell/sicp.xhtml | "Storage and Identification of Cabalized Packages"
2013-04-07 16:03:18	-->	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has joined #haskell
2013-04-07 16:03:33	supki	timthelion: well, --constraint is certainly possible :]
2013-04-07 16:03:49	hseg	I read it.
2013-04-07 16:03:57	niteria	sicp should mention cabal-dev or hsenv
2013-04-07 16:04:26	timthelion	niteria: cabal-dev doesn't help here sadly :/
2013-04-07 16:04:27	jmcarthur	hseg: it has little to do with static linking
2013-04-07 16:04:32	<--	ISF (~ivan@187.64.222.221) has quit (Ping timeout: 255 seconds)
2013-04-07 16:04:54	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-04-07 16:04:59	jmcarthur	hseg: it's just that libraries from one version to the next are not source compatible
2013-04-07 16:05:00	-->	dnolen (~user@cpe-74-64-32-223.nyc.res.rr.com) has joined #haskell
2013-04-07 16:05:06	jmcarthur	err
2013-04-07 16:05:09	jmcarthur	s/source/binary/
2013-04-07 16:05:13	hseg	actually, it does. x-package optimization means it's hard to construct packages which are portable across machines
2013-04-07 16:05:25	jmcarthur	hseg: even with dynamic linking you have the same problem
2013-04-07 16:05:34	jmcarthur	hseg: (and we do have such a feature)
2013-04-07 16:05:40	-->	z1y (~pi@115.78.238.203) has joined #haskell
2013-04-07 16:06:00	jmcarthur	and yes it is in large part due to all the optimizations
2013-04-07 16:06:05	niteria	doesn't 1. cabal install bare minimum; 2. don't install anything from your distro's package manager 3. use cabal-dev solve all the problems?
2013-04-07 16:06:23	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-07 16:06:32	-->	roshan (~roshan@S0106001e583084e2.ed.shawcable.net) has joined #haskell
2013-04-07 16:06:33	jmcarthur	niteria: that would be reasonable, but honestly i rarely use cabal-dev. most of the time cabal does just fine
2013-04-07 16:06:38	hseg	Right. I meant x-package optimization, which causes hard dependencies on versions of libraries that were defined as soft dependencies in the first place?
2013-04-07 16:06:43	<--	z1y (~pi@115.78.238.203) has left #haskell ("ISON zipp0")
2013-04-07 16:07:05	<--	subbyyy (~win@cpe-24-165-118-58.cinci.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-04-07 16:07:11	jmcarthur	hseg: they are soft dependencies at the source level and hard dependencies at the binary level
2013-04-07 16:07:28	-->	heruur (~tvh@239-156-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-07 16:07:48	jmcarthur	hseg: from what i hear, gentoo does pretty well here, since it can automatically rebuild reverse deps when you upgrade a haskell package
2013-04-07 16:08:11	jmcarthur	but even that seems like it could be frustrating since you still only have one version installed at a time
2013-04-07 16:08:22	timthelion	jmcarthur: cool. but why did we have to wait for some python folks to write a package manager for haskell ;)
2013-04-07 16:08:30	jmcarthur	timthelion: huh?
2013-04-07 16:08:40	<--	AfC (~andrew@gateway.syd.operationaldynamics.com) has quit (Quit: Leaving.)
2013-04-07 16:08:42	jmcarthur	haskell shouldn't need a package manager at all
2013-04-07 16:08:46	timthelion	jmcarthur: isn't gentoos package manager written in python?
2013-04-07 16:09:08	jmcarthur	timthelion: but what does that have to do with anything?
2013-04-07 16:09:38	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-04-07 16:09:42	timthelion	jmcarthur: ruby has gems, perl has CPAN, python has ??? . it seems most languages that actually have a module system have a method of installing new modules.
2013-04-07 16:09:54	-->	Afish (~Miranda@chips.ds16.agh.edu.pl) has joined #haskell
2013-04-07 16:10:03	jmcarthur	timthelion: i think for a haskell dev cabal is superior. for a mere user of haskell packages, most existing package managers do fine
2013-04-07 16:10:08	elliott	does GHC actually do cross-package optimisation?
2013-04-07 16:10:13	elliott	I mean, beyond the basic .hi stuff
2013-04-07 16:10:14	-->	LRuffati (~earendil@2-233-160-32.ip218.fastwebnet.it) has joined #haskell
2013-04-07 16:10:17	timthelion	jmcarthur: it seems to me, that as little as possible should be done in a distro-specific way, that's all
2013-04-07 16:10:24	jmcarthur	elliott: most of that is the basic .hi stuff
2013-04-07 16:10:25	hseg	timthelion: python has setuptools
2013-04-07 16:10:33	jmcarthur	timthelion: cabal is that
2013-04-07 16:10:48	jmcarthur	because it's not a package manager
2013-04-07 16:11:04	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-04-07 16:11:18	arkeet	maybe there should be a package manager!
2013-04-07 16:11:29	 *	timthelion longs for the day when we all compile to asm.js bytecode and pass html files around and never have to worry about package mangement or security.
2013-04-07 16:11:32	jmcarthur	once you have a package manager, you are basically already trying to replicate the functionality of a distro's package manager, which is silly
2013-04-07 16:11:35	hseg	I give up. Uninstalling all of the Haskell stuff here, and going to start afresh tomorrow.
2013-04-07 16:11:44	arkeet	my distro can't manage stuff in ~/.ghc
2013-04-07 16:11:57	<--	heruur (~tvh@239-156-103-86.dynamic.dsl.tng.de) has quit (Ping timeout: 252 seconds)
2013-04-07 16:12:00	jmcarthur	get a nicer distro? or just use cabal!
2013-04-07 16:12:01	arkeet	well, its package manager.
2013-04-07 16:12:14	arkeet	what distro does?
2013-04-07 16:12:23	arkeet	cabal isn't very good at removing/upgrading
2013-04-07 16:12:28	jmcarthur	there are distros that allow you to manage installations in your home
2013-04-07 16:12:37	jmcarthur	all i can think of right now is nix, but i know there are others
2013-04-07 16:12:48	arkeet	but nix is nix. :p
2013-04-07 16:12:55	jmcarthur	well, nix the package manager and nixos because it uses nix)
2013-04-07 16:13:01	hseg	Meaning? It looks quite nice
2013-04-07 16:13:21	jmcarthur	i don't believe this is unique to nix
2013-04-07 16:13:24	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-04-07 16:13:30	<--	Thra11 (~thrall@92.114.112.87.dyn.plus.net) has quit (Quit: kthxbai)
2013-04-07 16:13:46	timthelion	hseg: if you have slackware, then you can choose your pacage manager. You can choose nix(not sure how this is different from installing nixos)
2013-04-07 16:14:08	jmcarthur	you can use nix with any distro, really
2013-04-07 16:14:08	-->	Guest27287 (~programme@178.187.66-76.xdsl.ab.ru) has joined #haskell
2013-04-07 16:14:22	-->	Thra11 (~thrall@92.114.112.87.dyn.plus.net) has joined #haskell
2013-04-07 16:14:30	jmcarthur	although it will typically be sandboxed away
2013-04-07 16:14:31	timthelion	jmcarthur: but what would be the point
2013-04-07 16:14:37	jmcarthur	to try it out
2013-04-07 16:14:51	-->	cognominal__ (~cognomina@37.161.44.190) has joined #haskell
2013-04-07 16:14:53	<--	cognominal (~cognomina@37.160.46.180) has quit (Ping timeout: 252 seconds)
2013-04-07 16:14:59	<--	LRuffati (~earendil@2-233-160-32.ip218.fastwebnet.it) has quit (Quit: Leaving)
2013-04-07 16:15:05	jmcarthur	you can use portage similarly, with other distros, even other operating systems
2013-04-07 16:15:07	-->	kmrhb (~kmrhb@dsl-66-36-141-233.mtl.aei.ca) has joined #haskell
2013-04-07 16:15:58	-->	jerry66 (jerry66@79.126.223.38) has joined #haskell
2013-04-07 16:16:01	jerry66	http://www.reddit.com/r/xadultxmoviesxdating/comments/1buoth/german_amateur_girl_loves_anal/
2013-04-07 16:16:01	<--	jerry66 (jerry66@79.126.223.38) has quit (Killed (idoru (Spam is off topic on freenode.)))
2013-04-07 16:16:10	jmcarthur	thanks jerry66
2013-04-07 16:16:14	<--	Okasu_ (~1@217.118.78.37) has quit (Ping timeout: 255 seconds)
2013-04-07 16:16:19	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 16:16:36	 *	timthelion wonders how much more disk space would be used if we just kept statically linked single file installs for all applications. No more dependencies, everything self sufficient.
2013-04-07 16:16:59	Kinnison	it's less of a space issue these days than it was
2013-04-07 16:17:05	Kinnison	but it's more of a security issue than ever
2013-04-07 16:17:06	geekosaur	that's fine for applications, but most things are libraries
2013-04-07 16:17:15	timthelion	Kinnison: why is it a security issue?
2013-04-07 16:17:31	jmcarthur	geekosaur: non-devs wouldn't even need all those libraries installed, of course
2013-04-07 16:17:34	timthelion	geekosaur: but those libraries would be statically linked into the applications
2013-04-07 16:17:36	Kinnison	If you have a security update in a library, it's harder to update every app linked to it, rather than just update the lib
2013-04-07 16:17:38	geekosaur	have to rebuild everything impacted if a security issue is found in a dependency
2013-04-07 16:17:43	hseg	timthelion: Because an update to a library isn't propagated to the clients that way
2013-04-07 16:17:52	timthelion	geekosaur: true, that is a problem.
2013-04-07 16:18:14	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-04-07 16:18:14	 *	hackagebot dynamic-loader 0.0 - lightweight loader of GHC-based modules or packages  http://hackage.haskell.org/package/dynamic-loader-0.0 (GaborGreif)
2013-04-07 16:18:22	int-e	so for distributions, we'd have a bandwidth problem
2013-04-07 16:18:30	arkeet	not to mention that there's a reason shared libraries are called that.
2013-04-07 16:18:47	<--	kmrhb (~kmrhb@dsl-66-36-141-233.mtl.aei.ca) has quit (Client Quit)
2013-04-07 16:18:54	jmcarthur	shared libraries don't just save hd space. they also save memory
2013-04-07 16:18:57	-->	kmrhb (~kmrhb@dsl-66-36-141-233.mtl.aei.ca) has joined #haskell
2013-04-07 16:18:58	geekosaur	also note that applications are already largely statically linked with ghc (except on a small handful of platforms). and the problem we are trying to solve is at the level of building packages with library deps, i.e. at the very level that needs to work for static linking apps to provide any benefit
2013-04-07 16:18:59	timthelion	perhaps we could make it so that applications would declare dependencies on startup, and the distro would look those dependencies up in a blacklist, and refuse to launch apps with banned dependencies.
2013-04-07 16:19:00	<--	kmrhb (~kmrhb@dsl-66-36-141-233.mtl.aei.ca) has quit (Client Quit)
2013-04-07 16:19:01	arkeet	exactly
2013-04-07 16:20:23	hseg	perhaps we could compile everything to some bytecode, and distribute the bytecodes. Then, there would be binary that would be generated on first usage with all the optimizations.
2013-04-07 16:20:24	<--	tenmilestereo (~tnmlstr@w-70.cust-13055.ip.static.uno.uk.net) has quit (Ping timeout: 260 seconds)
2013-04-07 16:20:31	timthelion	I would like to get to the point, where each user has an applications folder in his home, and each application is a single file.  Don't like an application? simply deleted.  No instalation needed.
2013-04-07 16:20:33	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-04-07 16:20:50	Kinnison	I always figured that we went with static linking so much with haskell for a combination of 'People can barely maintain an API from point release to point release, let alone an ABI' and also 'whole program optimisation really matters for Haskell'
2013-04-07 16:20:54	arkeet	hseg: would it be called java?
2013-04-07 16:21:17	-->	kmrhb (~kmrhb@dsl-66-36-141-233.mtl.aei.ca) has joined #haskell
2013-04-07 16:21:19	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-04-07 16:21:20	<--	rsuniev123 (~rsuniev12@host86-132-70-180.range86-132.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-04-07 16:21:29	int-e	timthelion: it's not just shared libraries. applications come with data files and documentation
2013-04-07 16:21:46	<--	inarenvi (~quassel@92.59.134.137) has quit (Remote host closed the connection)
2013-04-07 16:21:47	k0001	Guys, do you know of any companies that would hire someone to work remotely doing some functional programming?
2013-04-07 16:21:53	hseg	:-D It would allow for the packages to be independent, and one could remove the binaries without introducing breakage.
2013-04-07 16:21:53	timthelion	arkeet: well, the problem with java, in the early days, is that Sun failled to maintain compatibility between VMs, thus making java the antithesis of it's own goal.
2013-04-07 16:21:58	jmcarthur	int-e: for that, at least, the os x bundle idiom is... okay...
2013-04-07 16:22:29	hseg	k0001: CUFP
2013-04-07 16:23:18	<--	xnoise (~cristian@070-132-165-046.ip-addr.inexio.net) has quit (Remote host closed the connection)
2013-04-07 16:23:20	jmcarthur	Kinnison: i agree
2013-04-07 16:23:24	hseg	Think a cached JIT with the usual optimizations GHC does, and the cache can be cleared.
2013-04-07 16:23:43	jmcarthur	Kinnison: however, we do still have dynamic linking, but it still lacks many of the benefits of dynamic linking
2013-04-07 16:23:48	timthelion	hseg: what is the point of JIT
2013-04-07 16:24:41	hseg	As in, you would have the in-package optimizations compile to some IR, and then on first run you would have cross-package optimizations generate a cached binary.
2013-04-07 16:24:43	-->	rsuniev123 (~textual@host86-132-70-180.range86-132.btcentralplus.com) has joined #haskell
2013-04-07 16:24:46	-->	ulfdoz (~mary@p5B38BB2F.dip.t-dialin.net) has joined #haskell
2013-04-07 16:24:49	hseg	s/JIT/IR/
2013-04-07 16:25:15	timthelion	hseg: why on first run, rather than on EXECUTABLE(not library) compile time?
2013-04-07 16:25:46	int-e	hseg: what problem are you trying to solve?
2013-04-07 16:26:05	<--	anRch (~markmilli@ip-64-134-243-177.public.wayport.net) has quit (Quit: anRch)
2013-04-07 16:26:22	hseg	timthelion: In the case of executables, full static linking with whole program optimisation could work. But for libraries, I'd rather have them independent
2013-04-07 16:27:22	hseg	int-e: That under status quo, when a package gets installed, whole program optimisation bleeds code of the dependencies into the package, thus creating a hard dependency on that specific version
2013-04-07 16:28:33	<--	aavogt (~aavogt@uwpr3net-129-97-248-69.dynamic.uwaterloo.ca) has quit (Quit: WeeChat 0.3.7)
2013-04-07 16:29:14	-->	hherhold (~user@172.15.25.25) has joined #haskell
2013-04-07 16:29:41	k0001	hseg: thanks. I'll look in more detail there.
2013-04-07 16:32:31	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-04-07 16:32:54	hseg	Anyhow, need to go. Thanks guys!
2013-04-07 16:32:56	<--	hseg (5f567ee9@gateway/web/freenode/ip.95.86.126.233) has quit
2013-04-07 16:33:12	<--	estebistec (~estebiste@174.34.1.240.reverse.socket.net) has quit (Remote host closed the connection)
2013-04-07 16:34:34	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Itkovian)
2013-04-07 16:35:30	<--	mirsal (~mirsal@znc0.irc.he-1.ip6.mirsal.fr) has quit (Changing host)
2013-04-07 16:35:30	-->	mirsal (~mirsal@videolan/developer/Mirsal) has joined #haskell
2013-04-07 16:36:10	<--	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-04-07 16:36:36	-->	cognominal (~cognomina@37.161.176.83) has joined #haskell
2013-04-07 16:36:40	<--	cognominal__ (~cognomina@37.161.44.190) has quit (Ping timeout: 245 seconds)
2013-04-07 16:37:13	-->	zakora (~NC@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-04-07 16:37:29	Kinnison	jmcarthur: Aye, it's hard
2013-04-07 16:37:36	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-04-07 16:37:49	-->	Jeanne-Kamikaze (~Jeanne-Ka@217.249.223.87.dynamic.jazztel.es) has joined #haskell
2013-04-07 16:38:43	-->	nus- (~nus@unaffiliated/nus) has joined #haskell
2013-04-07 16:38:50	-->	tomberek (78583167@gateway/web/freenode/ip.120.88.49.103) has joined #haskell
2013-04-07 16:39:05	<--	hiyakashi (~hiyakashi@p4025-ipbf3204marunouchi.tokyo.ocn.ne.jp) has quit (Quit: お前は知りすぎた)
2013-04-07 16:39:43	-->	chidy (~chidimuor@host86-179-205-63.range86-179.btcentralplus.com) has joined #haskell
2013-04-07 16:40:34	-->	snhmib (~jurjen@AOrleans-251-1-48-64.w90-20.abo.wanadoo.fr) has joined #haskell
2013-04-07 16:40:44	-->	skyflash_ (~skyflash@96.53.63.54) has joined #haskell
2013-04-07 16:42:01	-->	kartoffe` (~user@p54962C0A.dip.t-dialin.net) has joined #haskell
2013-04-07 16:42:21	-->	Zeev (~Zeev@bzq-79-183-19-6.red.bezeqint.net) has joined #haskell
2013-04-07 16:42:28	<--	boccato (~boccato@201.87.106.41) has quit (Remote host closed the connection)
2013-04-07 16:42:44	<--	nus-- (~nus@unaffiliated/nus) has quit (Ping timeout: 252 seconds)
2013-04-07 16:43:23	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-04-07 16:44:24	<--	cads (~m@c-24-99-19-61.hsd1.ga.comcast.net) has quit (Ping timeout: 252 seconds)
2013-04-07 16:44:25	-->	iago (~iago@a213-22-41-239.cpe.netcabo.pt) has joined #haskell
2013-04-07 16:44:28	-->	pc__ (~pc__@car06-1-82-232-87-187.fbx.proxad.net) has joined #haskell
2013-04-07 16:44:54	<--	skyflash_ (~skyflash@96.53.63.54) has quit (Ping timeout: 248 seconds)
2013-04-07 16:45:12	-->	LudvikGalois (~LudvikGal@130.56.82.7) has joined #haskell
2013-04-07 16:45:26	<--	kartoffelbrei (~user@p549616D1.dip.t-dialin.net) has quit (Ping timeout: 245 seconds)
2013-04-07 16:46:09	-->	Sevki (~Sevki@cpc22-newc15-2-0-cust33.16-2.cable.virginmedia.com) has joined #haskell
2013-04-07 16:48:32	<--	groovy2shoes (~cory@unaffiliated/groovebot) has quit (Quit: Computer has gone to sleep)
2013-04-07 16:48:40	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-04-07 16:48:45	-->	klrr (~klrr@88.129.144.229) has joined #haskell
2013-04-07 16:49:28	<--	jpeeters (~Adium@cha28-2-88-170-128-140.fbx.proxad.net) has quit (Quit: Leaving.)
2013-04-07 16:49:52	--	Sculptor_ is now known as Sculptor
2013-04-07 16:51:45	-->	leoncamel2 (~leoncamel@124.126.171.114) has joined #haskell
2013-04-07 16:51:54	klrr	how do i implement "symbol?" (scheme function) in haskell?
2013-04-07 16:52:46	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Quit: Lost terminal)
2013-04-07 16:52:47	totimkopf	Hello, how would I write this http://hpaste.org/85360 as a let expression?
2013-04-07 16:52:58	-->	boccato (~boccato@201.87.106.41) has joined #haskell
2013-04-07 16:54:44	totimkopf	I tried this: let maximum' [] = error "maximum empty list!"; maximum' [x] = x; maximum' (x:xs) = max x (maximum' xs) in [2,5,1]
2013-04-07 16:54:46	geekosaur	I don't understand the question. you want to replace that with something involving a let? (not really possible) you want to use that in a let instead of at top level? (that just works)
2013-04-07 16:55:00	geekosaur	need braces if all on one line, I think
2013-04-07 16:55:07	-->	jutaro (~jutaro@p5DDB272F.dip.t-dialin.net) has joined #haskell
2013-04-07 16:55:16	geekosaur	but the full error message from your attempt would help
2013-04-07 16:55:39	klrr	totimkopf: what's a let expression, you mean like let stuff in expression?
2013-04-07 16:55:44	totimkopf	right
2013-04-07 16:55:58	supki	> let maximum' [] = error "maximum empty list!"; maximum' [x] = x; maximum' (x:xs) = max x (maximum' xs) in [2,5,1]
2013-04-07 16:56:00	lambdabot	  [2,5,1]
2013-04-07 16:56:00	klrr	why would you even want to do that?
2013-04-07 16:56:03	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-04-07 16:56:16	totimkopf	stepeval is complaining : step _: Not implemented: List [Lit (Int 2),Lit (int 5),Lit (Int1)]
2013-04-07 16:56:22	totimkopf	(for stepeval)
2013-04-07 16:56:41	geekosaur	that sounds like you actually have a different problem, then
2013-04-07 16:56:48	totimkopf	my brain has a tough time computing recursion so I use stepeval as a crutch
2013-04-07 16:56:52	-->	heruur (~tvh@239-156-103-86.dynamic.dsl.tng.de) has joined #haskell
2013-04-07 16:57:11	-->	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has joined #haskell
2013-04-07 16:57:22	geekosaur	so it actually worked but your stepeval is not capable of handling the result for some reason
2013-04-07 16:57:27	-->	ivar_ (~ivar@69.165.206.172) has joined #haskell
2013-04-07 16:57:35	<--	gabor (~heisenbug@p549438CC.dip.t-dialin.net) has quit (Client Quit)
2013-04-07 16:58:04	totimkopf	geekosaur, let me try with braces
2013-04-07 16:58:11	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-04-07 16:58:27	geekosaur	braces won't help
2013-04-07 16:58:34	totimkopf	oh
2013-04-07 16:58:36	geekosaur	braces would help if it were a syntax error
2013-04-07 16:58:47	geekosaur	this is not a syntax error, this is a problem with your stepeval
2013-04-07 16:58:52	totimkopf	I guess it is a shortcoming of stepeval then
2013-04-07 16:59:05	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-04-07 16:59:08	<--	XexonixXexillion (82384735@gateway/web/freenode/ip.130.56.71.53) has quit (Quit: Page closed)
2013-04-07 16:59:49	<--	LudvikGalois (~LudvikGal@130.56.82.7) has quit (Remote host closed the connection)
2013-04-07 17:00:20	-->	wolong (wolong@naphaso.com) has joined #haskell
2013-04-07 17:01:14	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-04-07 17:01:39	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-07 17:01:49	-->	morazow (~morazow@92.36.136.95.rev.vodafone.pt) has joined #haskell
2013-04-07 17:02:38	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-04-07 17:02:41	tomberek	what linux distro seems to be best suited for haskell hacking noawdays?
2013-04-07 17:03:16	<--	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-04-07 17:03:22	<--	io2 (~io2@unaffiliated/io2) has quit
2013-04-07 17:03:39	-->	chessguy (~chessguy@pool-96-241-233-170.washdc.fios.verizon.net) has joined #haskell
2013-04-07 17:04:00	<--	pyacks (~yacks@180.151.36.168) has quit (Ping timeout: 276 seconds)
2013-04-07 17:04:04	-->	aesptux_ (~aesptux@89.141.6.156.dyn.user.ono.com) has joined #haskell
2013-04-07 17:04:07	<--	bitonic (~user@dyn1216-117.wlan.ic.ac.uk) has quit (Remote host closed the connection)
2013-04-07 17:04:20	Sonderblade	tomberek: all are good
2013-04-07 17:04:21	-->	bitonic (~user@dyn1216-117.wlan.ic.ac.uk) has joined #haskell
2013-04-07 17:04:47	<--	eyebloom (~eyebloom@user-387gm2l.cable.mindspring.com) has quit (Quit: eyebloom)
2013-04-07 17:05:14	tomberek	sonderblade: i ran in to dependency problems a while back, so was wondering what he current status was
2013-04-07 17:05:36	-->	jcao219 (jimmy@wikibooks/Jcao219) has joined #haskell
2013-04-07 17:06:52	Sonderblade	tomberek: haskell has its own package management system called cabal so it mostly doesnt matter what linux distro you choose
2013-04-07 17:07:14	hherhold	does anybody use command-line darcs anymore?
2013-04-07 17:07:27	hherhold	cabal install darcs with the latest haskell platform fails
2013-04-07 17:07:29	tomberek	yes, thanks.... nevermind
2013-04-07 17:07:40	hpaste	aesptux pasted “Digital Root” at http://hpaste.org/85361
2013-04-07 17:08:07	aesptux_	Why is this code http://hpaste.org/85361 somewhat recursive?
2013-04-07 17:08:36	ab9rf	"somewhat recursive"?  is that like somewhat pregnant?
2013-04-07 17:08:56	ab9rf	that code is not recursive
2013-04-07 17:09:51	aesptux_	Digital root of 31337 is 8. Because 3+1+3+3+7 = 17 and 1+7 = 8. Shoudn't that code output 17?
2013-04-07 17:10:20	geekosaur	do you understand modulus
2013-04-07 17:10:21	geekosaur	?
2013-04-07 17:10:41	aesptux_	I understand the basics
2013-04-07 17:10:41	<--	Guest27287 (~programme@178.187.66-76.xdsl.ab.ru) has quit (Ping timeout: 255 seconds)
2013-04-07 17:10:47	<--	fireglow (fireglow@unaffiliated/fireglow) has quit (Ping timeout: 252 seconds)
2013-04-07 17:10:57	<--	s_kilk (~shane@host81-152-130-140.range81-152.btcentralplus.com) has quit (Quit: Leaving)
2013-04-07 17:11:03	<--	birkenfeld (~gbrandl@pdpc/supporter/student/birkenfeld) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-04-07 17:11:05	geekosaur	apparently not, since the most basic thing about it is that if you are going modulus n, the result will never be >= n
2013-04-07 17:11:10	-->	fro0t2 (~fro0t@1.23.67.95) has joined #haskell
2013-04-07 17:11:23	geekosaur	so mod ... 9 can never return 9, 10, 17, 65535, ...
2013-04-07 17:11:32	ab9rf	aesptux_: the key is that the digital root of a positive integer is merely its modulus in the Z9 ring, with 9 replacing 0.
2013-04-07 17:11:54	<--	hherhold (~user@172.15.25.25) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-04-07 17:11:55	-->	fireglow (fireglow@unaffiliated/fireglow) has joined #haskell
2013-04-07 17:12:00	Hafydd	The fact that it is "modulo" and not "modulus" is even more basic.
2013-04-07 17:12:07	geekosaur	you might also take a hint from the fact that there is no addition in there at all
2013-04-07 17:12:32	<--	msuszczy (~martin@85.69.182.79) has quit (Ping timeout: 256 seconds)
2013-04-07 17:12:38	-->	birkenfeld (~gbrandl@hammett.srv.pocoo.org) has joined #haskell
2013-04-07 17:13:26	ab9rf	that code is strictly incorrect in that it reports the wrong digital root for 0 (and for negative numbers, although digital root is not well-defined for negative numbers)
2013-04-07 17:13:30	-->	ParahSailin (~ropoctl@unaffiliated/parahsailin) has joined #haskell
2013-04-07 17:13:48	 *	geekosaur speaks a language where the operator is "modulus" and "modulo" refers to its application; "modulo" is not itself the name of an operator.
2013-04-07 17:13:58	<--	fro0t (~fro0t@1.23.67.95) has quit (Ping timeout: 256 seconds)
2013-04-07 17:14:12	aesptux_	Oh I see... now i understand, didn't knew about that property of modulus
2013-04-07 17:14:24	-->	JaRoel (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 17:14:36	ab9rf	aesptux_: the wikipedia page you linked in the paste explains why it works.
2013-04-07 17:14:46	-->	sandybatman (~user@101.214.182.190) has joined #haskell
2013-04-07 17:15:30	aesptux_	ab9rf: What would be a proper way to handle 0? pattern matching? (as you imagine I'm fairly new to haskell)
2013-04-07 17:15:40	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 256 seconds)
2013-04-07 17:15:45	totimkopf	since I'm having issues with stepeval, could someone someone write the steps in parantheses of the maximum' function, please
2013-04-07 17:16:15	totimkopf	oops, s/someone someone/ someone
2013-04-07 17:16:15	ab9rf	aesptux_: that's one way, certainly
2013-04-07 17:16:37	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Read error: Operation timed out)
2013-04-07 17:16:44	-->	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-04-07 17:16:47	ab9rf	aesptux_: it's really the only way since all of the other ways to do branching devolve to pattern matching at some level
2013-04-07 17:16:49	-->	bytbox (~s@129-2-129-85.wireless.umd.edu) has joined #haskell
2013-04-07 17:17:00	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Ping timeout: 276 seconds)
2013-04-07 17:17:14	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-04-07 17:17:19	-->	uvelichitel (~uvelichit@ip254-156.200.109.crimea.com) has joined #haskell
2013-04-07 17:17:21	totimkopf	http://hpaste.org/85360
2013-04-07 17:17:32	aesptux_	ab9rf: Ok, thanks for all the help
2013-04-07 17:17:38	Hafydd	That's a bit demented, because the "modulus" in modular arithmetic is the right-hand argument of the residue function.
2013-04-07 17:17:45	<--	peterjoel (~peterjoel@host109-152-188-129.range109-152.btcentralplus.com) has quit (Quit: Leaving.)
2013-04-07 17:17:56	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-04-07 17:18:07	Hafydd	It's like saying "6 denominator 3 = 2"
2013-04-07 17:18:25	ab9rf	there's a lot of weird baggage around the modulus operator because of the multiple meanings it has within abstract algebra
2013-04-07 17:18:34	geekosaur	^^
2013-04-07 17:18:42	geekosaur	it is strange, but them's the breaks
2013-04-07 17:18:56	<--	ivar_ (~ivar@69.165.206.172) has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)
2013-04-07 17:19:04	<--	JaRoel (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 256 seconds)
2013-04-07 17:19:07	ab9rf	this only comes up when dealing with anal-retentive mathematicians
2013-04-07 17:19:18	Hafydd	I refuse to accept it.
2013-04-07 17:19:42	totimkopf	maximum' [2,5,1]: max 2 ( maximum' [5,1] ( max 5 ( maximum' [1] ) ) )   <--does this look right?
2013-04-07 17:20:15	<--	tomberek (78583167@gateway/web/freenode/ip.120.88.49.103) has quit (Quit: Page closed)
2013-04-07 17:20:24	-->	Rotaerk_ (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has joined #haskell
2013-04-07 17:21:09	-->	XexonixXexillion (82384735@gateway/web/freenode/ip.130.56.71.53) has joined #haskell
2013-04-07 17:21:20	<--	dmac (~Adium@75-149-33-130-SFBA.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-04-07 17:21:52	<--	bytbox (~s@129-2-129-85.wireless.umd.edu) has quit (Quit: Lost terminal)
2013-04-07 17:21:58	ab9rf	right for what?
2013-04-07 17:22:10	<--	boccato (~boccato@201.87.106.41) has quit (Remote host closed the connection)
2013-04-07 17:22:30	totimkopf	right for swapping out the parantheses for real values..
2013-04-07 17:23:04	-->	Guest27287 (~programme@178.187.79.214) has joined #haskell
2013-04-07 17:23:09	-->	wavewave (~wavewave@108-228-209-108.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-04-07 17:23:25	-->	chester_ (~chester@95-24-140-97.broadband.corbina.ru) has joined #haskell
2013-04-07 17:23:34	<--	Catbuntu (~catbuntu@unaffiliated/ls-mft) has quit (Read error: Connection reset by peer)
2013-04-07 17:23:47	totimkopf	ab9rf: I'm just trying to work out the recursion in "steps"
2013-04-07 17:24:09	-->	crdueck (~cdk@24.212.219.10) has joined #haskell
2013-04-07 17:24:20	<--	Rotaerk (~BlahBlahB@c-174-54-255-117.hsd1.pa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-04-07 17:24:30	-->	kevinqcs (~turing@183.209.140.177) has joined #haskell
2013-04-07 17:25:06	-->	mintsoup (~mintsoup@c-98-245-69-209.hsd1.co.comcast.net) has joined #haskell
2013-04-07 17:25:33	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (Ping timeout: 245 seconds)
2013-04-07 17:25:48	-->	mornfall (~mornfall@88.83.241.14) has joined #haskell
2013-04-07 17:25:48	<--	mornfall (~mornfall@88.83.241.14) has quit (Changing host)
2013-04-07 17:25:48	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-04-07 17:26:09	-->	qzr (~qzr@adsl-89-217-111-126.adslplus.ch) has joined #haskell
2013-04-07 17:26:14	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-04-07 17:26:27	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
