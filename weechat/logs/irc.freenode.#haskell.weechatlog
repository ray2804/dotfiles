2013-08-30 22:40:55	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-08-30 22:40:55	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-08-30 22:40:55	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-08-30 22:40:55	--	Nicks #haskell: [@ChanServ [swift] \q __main__ _br_ _flow_ _janne _justjust `0660 `^_^v `bps a11235 ab9rf absence acfoltzer acomar_ acowley Adeon adimit Adios adlan adnap aess aford aforemny agundry ahf ahihi akahn akiress akraut albel727 aleator alej alexander__b alexsdutton AlexWebr Alice3 allsystemsarego almondjelly aloiscochard alpounet alvdav Amadiro Amanas amatsu anachron andares anders^^ andrewsw anhall aninhumer anRch AntiSpamMeta aoh apaku Apocalisp apples applicative araujo arbn arborist arcatan arenz aristid arkeet arkx arlinius arnsholt arpunk asante asjo aszlig Athas augur aupiff averell Axman6 aztek b0c1 b2coutts b52 b_jonas bananagram banjiewen barrucadu bartavelle basdirks_ Baughn bbee bbloom bcoppens bcw bd_ bduc Belgarion0 benj_ bennofs bens bentrevor bergey Bergle_1 bergmark betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitonic` bitraten blackdog blast_hardcheese BlastHardcheese Blkt BMeph bobry bobthenameless bogner bogner_ Boney Boreeas bos bqp brainproxy Brando753 brandonw breck7 brendan brett BrianHV briden brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild bxc byorgey ByronJohnson c_14 cads cajla Cale caleb_9 caligula callen canissimia canta carp carter ccasin ccxCZ cdidd cdk centrinia Cerise cfricke charlesofarrell_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrra ciaranm CindyLinz cjay clahey ClaudiusMaximus Clint clog cmsd2 codesoup CODEtaku cods coeus_ colah companion_cube conehead confound copton_ copumpkin CosmicRay Counter-Strike cow-orker Croms cronject cross crs_ cruxeternus Cryovat cschneid cynick cyphase d-snp_ d3lxa dabradley dacc dan64 DanBurton danharaj danr dario^CIP DarkFox DarkNFoxy Dashkal davean davidt davorak dcoutts de-Vri-es deavid Deewiant def-lkb deggis demolithion Desheng2 destiny dexter2 DexterLB dfan dgpratt dgvncsz0f DigitalKiwi dilinger_ dino- divarvel dixie djahandarie djcoin dju dlundy dmp1ce dmwit Dodek dogmaT dolio DolphR donri doomlord doomlord_ doshitan dpwright dqd Draconx Draggor drbean DrCode drdo dreixel drewr drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dumael dustin10 dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dysinger dyspeptics15 eacameron earthy eataix ecc ecube edk Edoxile Eduard_Munteanu edwtjo eeezkil eevar eff_ ehamberg ehd eis_ ejls eL_Bart0 electrogeek elgot Eliel Elision elliott Enigmagic ent epsylon epta ericmathison ericmj ericmoritz Eridius erkin ernst erochester ersran9 Erstarrung es917 etrepum EvanR EvilPenguin Excedrin Excureo exobit eyck Ezku ezrios f8l fabjan fall_ farn felipe_ fergusnoble fijimunkii fikusz finnrobi FireFly fl00r flazz_gone flori_ flux fogus|gone fran FreakyPe1guin FreeFull frontendloader froztbyte fry fryguybob ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gambogi gbarboza gbeshers gbluma_ gdeest gds geal geekosaur gehmehgeh gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 glguy gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes greymalkin gridaphobe gseitz gthorslund guampa guerrilla Guest19190 Guest22019 Guest80998 Guest92121 Guest98659 Gunni guymann h4199 h_chiro_ haasn hackagebot Hafydd hamilyon hamishmack hannese hape01 Hardolaf hashcat hc hdevalence heath heruur hexagoxel hfaafb hiptobecubic hiratara hiredman hive-mind hkj horlicks hoverbear hpc hpd hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack identity idnar ido idoru Igloo inarru inr int-e integral Internet13 io2 ioanel ion ipuustin ircbrowse iron_houzi ismlages isomorphic isomorphismes iulian ivan\ ivan` j2j Jaak jackhill jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jaspervdj Jaxan jayne jayprich jb55 jbauman jbomo jchild jcp jdegoes jdoles jdoliner Jeanne-Kamikaze jeff_s1 Jello_Raptor Jesin JesuZ jfischoff jhh jibi jix jkpl jlewis jliikka jlouis jmbto jmcarthur jmct jml joachifm joar jobstijl JobV jodaro joe9 joefiorini joehillen joelteon joeyh johnw joneshf-work jonke Jonno_FTW jonsmock jonsterling joogi jorick JPohlmann jrd0 jrib jroesch jrslepak junsuijin juuhaa jyyou jzelinskie jzl k0001 k00mi k0ral k4nar Kabaka_ Kaini kakos KaneTW kaol katis kav kaw kayloos Ke kekimmo kerrick ketil kfreds Khady Khisanth killy9999 kini Kinnison KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man kobain Kobata kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft kshannon kstuart kttm kubrat Kuraitou kxra KyleCloud lahwran lambdabot lambdanaut Laney latro`a_ lattenwald LazinCajun Lefeni Lemmih lenstr leroux levi Licenser lieven_ lightquake linduxed linux_noob_666 liori Liskni_si lispy liszt litherum liyang ljhms ljos lokydor lopex lpaste lpsmith luite lukexi lulf lunarjar lurkorg lusory M-ou-se m0g m3ga maattdd machisuji machisuji_ macron madjestic magicman Maior majoh mak` make_sense maksbotan malorie_ mami mannyv mantovani maoe mapreduce marienz martinalex Martty MasseR matheus23 mattp_ mauke mavam Maxdamantus maximumsteve Mayzie mbrock mcbonz mceier McManiaC mcstar mcw09 mechairoi mee mel- melter mendez mephx meretrix merijn mero MetaCosm mgaare mgsloan miasma michaf mietek MigoMipo mike2 mikeplus32 milessabin MileyCyrus milli mimi_vx mimico__ MindlessDrone mirsal mixi mjo_ mjrosenb MK_FG mkiefel mkrull mlamari_ mlh mlinksva mm_freak_ mmaruseacph2 mmathis mnbernstein MoALTz mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes MouseTheLuckyDog Mowah mr- mrd MrFahrenheit mroman mrowe_away mrpantoufle MrRacoon mrshoe mrsolo MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4 mxf myme n-dolio n00dle Nahra napping Natch ndngvr ndrei NeatBasis necroyeti neektza1 NemesisD neptunepink Neqoxec neurocyte newbie__ newsham Nickeeh nicoo Nik05 nik_89 niko nikola nilg` nilsi_ Nimatek nimish ninegrid ninzine Nisstyre niteria nkpart nlogax noam noddy Noldorin nominolo nooodl nopcode_ noplamodo normanrichards notdan Nshag nuttycom1 nwf nxorg8 obcode Obfuscate ocharles Odd_Bloke ofan og Okasu oldmanstan OlegYch oleo ollehar opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s_ otulp ousado Ov3rload Pad^ paddymahoney palaga palmje pantech pantsman ParahSailin ParaSa1lin parcs path[l] pcapriotti peddie peltchu Pengoo pentace perlite petanqk petantik pfoetchen pharaun phienone philipde` Philonous Phlogistique PHO_ phryk phst` pi8029 PiepScuim pikhq pjstadig Plex- plhk plucas pnielsen Polarina popx poucet pqmodn pr Pranz predator117 preflex profmakx prophile Proteumus prototrout ps-auxw Ptival purefn puzza007 pygospa pyrtsa pyykkis_ q66 Quadrescence quaestor quicksilver qwandor qz_ raft raichoo raid Ralith Rarrikins rasmusto Raynes Raynos Razz reactormonk redjohn ReinH reinoud Reisen Reite relrod Rembane resnik RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb roconnor rpenguin_ rs0 RThinker Rutger`_ ryanakca ryant5000 s00pcan s4msung s4muel s_quark sababa SaBer saep Sagi saiam saiam^ Saizan sajith saml samrat satshaba1 satshabad saurik SBauer scanlonman schlumpi_ schoppenhauer schroedinbug sclv sclv_ scooty-puff scottschecter scripty scshunt Sculptor sdx23 seantallen SegFaultAX sellout- seschwar sferry_ Sgeo sgso shachaf shajra shanse shelf shennyg shepheb shergill shesek Shin-LaC shintah shiona SHODAN Shou si14 silasm simon simukis_ sinclair|net sipa SirChurchill sirspazzolot sj4nz skchrko ski skulls skypers sleepybug sleepynate SLi slobo sm smarter so sohum solancile solarus solirc solrize solution Sonarpulse sordina Sorella SoupEvil sp3ctum Spaceghost spaceships Spockz SpyrosTr_ Squid_Tamer squimmy srcerer ssbr ssttudder Starfire_ stass statusfailed steamboat stelleg stepcut stevej stiell stomp strmpnk_ stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supki Svedrin swistak35 Swizec swook` sxn tahu TallerGhostWalt talzeus talzeus_ Tamae tamiko Taneb Tarential Targen tarmo taruti tauli tauntaun tavelram taylorgb_ tazjin tcrayford td123 tdammers Tehnix tehroflmaoer Tekerson tel Tene tensorpudding tero- tertl3 Tesseraction tessier tew88 tg Th0mas tharper_ thealanwattsriot theDon TheFuzzball theorbtwo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice thr33strikes threedaymonk thunderrd tibbe tiffany tiksa timemage Tinned_Tuna tippenein TML tobyo2 tolt tomaw tomboy64 tomejaguar tomh- tommd tomprince torkjak totte tpsinnem tragalo Tribal tridactyla trism tromp__ troydm ts33kr tsou ttm tudalex tufflax tulcod tunixman turiya Twey twn tych0 tylergillies_ u_ udevd udoprog ulfdoz Ulrar uniquenick upgrayeddd uu1101 valdyn Valodim ve vehk Veltas Vertue viktech vili vivekrai vmeson vnz vobi void64 Vorpal voxpopuli vpm Vq vsayer vvv wagle Walther WanderingMonad warpy Watcher7 waterlaz watermind weie wereHamster whaletechno WhereIsMySpoon wilfredh willb1 Will| wimpunk Wizek wole wolfnn wollw wormphlegm WraithM wto wtw wunki Wuzzy xaimus xenocons xenophon xinming XMunkki_ xnyhps Xorlev xorox90 xplat xplat_ xRamses xye xymox Y-Less yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yogert yogurt_truck YoungFrog yriw ystael ysuzuki zaiste zammy zaphar_ps Zariel zcourts zebr zeiris_ Zenol zenoli zenzike zero7 zerokarmaleft zett_zelett ziman zoktar zomg zorzar zrot zw01]
2013-08-30 22:40:55	--	Channel #haskell: 1166 nicks (1 op, 0 halfops, 0 voices, 1165 normals)
2013-08-30 22:40:58	--	Mode #haskell [+CLcnpt]
2013-08-30 22:40:58	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-08-30 22:41:04	--	URL for #haskell: http://www.haskell.org/
2013-08-30 22:41:20	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-08-30 22:42:00	mcstar	omg, around 2006 #haskell had 3000 nicks?
2013-08-30 22:42:16	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-08-30 22:42:30	<--	steamboat (~sehrlich@c-76-17-123-250.hsd1.ga.comcast.net) has quit (Quit: Leaving.)
2013-08-30 22:42:43	ski	not that i recall
2013-08-30 22:42:48	-->	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has joined #haskell
2013-08-30 22:42:55	Cale	mcstar: More like around 300
2013-08-30 22:42:59	WraithM	Source?
2013-08-30 22:43:09	mcstar	SPJ presentation, there's a bar-chart
2013-08-30 22:43:16	Cale	The nick counter has only gone up
2013-08-30 22:43:23	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-30 22:43:26	mcstar	its hard to understand what he says
2013-08-30 22:44:05	mcstar	'at any moment there was a couple hundred users logged in' thats what he says
2013-08-30 22:44:05	Cale	oh, maybe 3000 unique nicks, rather than concurrent
2013-08-30 22:44:14	Zenol	Is use c >>= (\b' -> b .= b') simplifiable?
2013-08-30 22:44:26	mcstar	for the whole year, ok
2013-08-30 22:44:45	Cale	Well, you could write (b .=) =<< c
2013-08-30 22:45:14	Cale	Not sure if clearer
2013-08-30 22:45:21	Eduard_Munteanu	It's a bubble. :P
2013-08-30 22:45:34	Zenol	er, yeh. I was hopping there was on operator so that i can write c ???? b :/
2013-08-30 22:45:45	Cale	Well, what's .=?
2013-08-30 22:45:58	<--	reinoud (~reinoud@aardappel.xs4all.nl) has quit (Quit: Leaving.)
2013-08-30 22:46:02	ski	Zenol : define `c ???? b = (b .=) =<< c' ?
2013-08-30 22:46:18	Zenol	Cale: Len's .= operator (.~ but in a state monad)
2013-08-30 22:47:08	Cale	Oh, right. I tend to not use lens' infix operators.
2013-08-30 22:47:19	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-30 22:47:29	Cale	I wouldn't be too surprised if it had something for that...
2013-08-30 22:48:10	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-08-30 22:48:19	Cale	There is <~
2013-08-30 22:48:47	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-08-30 22:48:58	Cale	(<~) :: MonadState s m => ASetter s s a b -> m b -> m ()
2013-08-30 22:49:25	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-08-30 22:49:37	Cale	So perhaps  b <~ c  is what you want.
2013-08-30 22:49:43	Zenol	Cale:  (b <~ use c) yeh, thanks :D
2013-08-30 22:49:45	Cale	yeah
2013-08-30 22:49:54	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-08-30 22:50:33	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-08-30 22:50:48	monochrom	3000 nicks is a lot of nicks :)
2013-08-30 22:50:50	<--	bcw (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-30 22:51:12	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-08-30 22:51:39	<--	scripty (~scripty@117.192.183.64) has quit (Quit: Leaving)
2013-08-30 22:52:26	Cale	Many of them were a secret bot run by dons to occasionally join the channel with a nick that hadn't appeared before. ;)
2013-08-30 22:52:45	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-08-30 22:52:59	Cale	But yeah, it's interesting to see how many non-idlers there are.
2013-08-30 22:53:07	thr33strikes	is there a command in haskell that will let me manipulate the names of files that is not OS specific?
2013-08-30 22:53:22	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-08-30 22:53:28	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-08-30 22:53:32	Cale	renameFile :: FilePath -> FilePath -> IO ()
2013-08-30 22:53:39	sm	from the filepath package
2013-08-30 22:53:42	Cale	In System.Directory
2013-08-30 22:53:52	Cale	Which is in directory
2013-08-30 22:53:54	sm	oh, and the directory package
2013-08-30 22:53:55	-->	Riccardo (82f58947@gateway/web/freenode/ip.130.245.137.71) has joined #haskell
2013-08-30 22:54:15	thr33strikes	I thougth that was OS specific?  I'll re-read thanks for the info
2013-08-30 22:54:23	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-08-30 22:54:29	Cale	Everything in System.Directory is OS agnostic
2013-08-30 22:54:34	monochrom	module System.FilePath is fairly OS-independent. the package name is filepath. comes with Haskell Platform.
2013-08-30 22:54:35	sm	which is awesome
2013-08-30 22:54:39	Cale	Which is why the module is a little anemic
2013-08-30 22:54:49	monochrom	example: </> does the right thing
2013-08-30 22:54:51	 *	sm loves OS agnostic
2013-08-30 22:55:00	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-30 22:55:15	Eduard_Munteanu	Am I supposed to use Parsec for arranging input / doing a first pass over data, like splitting things into lines and fields?
2013-08-30 22:55:41	Cale	Eduard_Munteanu: You certainly can, and it wouldn't be too much of an abuse
2013-08-30 22:56:00	Cale	Eduard_Munteanu: For anything more complicated than what you can handle easily with lines/words
2013-08-30 22:56:05	Eduard_Munteanu	I see... would I just call 'parse' again on the result for the next pass though?
2013-08-30 22:56:09	monochrom	I don't know about "supposed". it is your call, not mine.
2013-08-30 22:56:23	Eduard_Munteanu	Yeah, it is more complicated after that.
2013-08-30 22:56:56	Eduard_Munteanu	Bah, I want HList. :)
2013-08-30 22:57:08	-->	Guest44651 (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has joined #haskell
2013-08-30 22:57:13	<--	newbie__ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 22:57:30	Eduard_Munteanu	Or dependent types.
2013-08-30 22:57:35	Cale	Eduard_Munteanu: It's up to you whether to nest your use of parsec like that. Parsec is capable of handling streams of tokens of an arbitrary type if you want to tokenise first, though many people will avoid a separate tokenising pass.
2013-08-30 22:57:53	<--	jchild (~textual@rrcs-50-75-181-175.nys.biz.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-30 22:58:15	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 22:58:16	monochrom	"the solution depends on the problem"
2013-08-30 22:58:31	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-08-30 22:58:31	<--	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has quit (Ping timeout: 246 seconds)
2013-08-30 22:58:37	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-08-30 22:58:59	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-08-30 22:59:13	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-08-30 22:59:18	Eduard_Munteanu	I'm parsing records with colon-separated fields. The first field dictates the type of what follows, but any given field can have different stuff in it depending on that.
2013-08-30 22:59:28	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-30 22:59:58	Riccardo	I'm using "cabal-dev ghci" to try out a few functions from my haskell project. I also have some extra imports in ~/.ghci for stuff that i often and up using (e.g. monads, pretty print). however, cabal-dev wants me to put the related packages in build-depends. can I avoid that?
2013-08-30 23:00:00	Eduard_Munteanu	Also the order of the records (lines/rows) is important.
2013-08-30 23:00:06	tdammers	hmm, you could probably split the input into "tokens" (fields) easily without parsec
2013-08-30 23:00:18	Sonarpulse	what do you all think the chances are that Haskell gets dependant types within the next decade?
2013-08-30 23:00:21	Eduard_Munteanu	tdammers: that's what I first did, yeah
2013-08-30 23:00:23	mm_freak_	http://hackage.haskell.org/package/acme-schoenfinkel
2013-08-30 23:00:25	mm_freak_	i had to =)
2013-08-30 23:00:35	Kinnison	You're a bad person.
2013-08-30 23:00:38	monochrom	two-pass maximizes programmer sanity. one-pass maximizes execution efficiency. choose your poison.
2013-08-30 23:01:01	Eduard_Munteanu	I have to group lines into logical units before parsing.
2013-08-30 23:01:18	mm_freak_	but it's actually a type class:  class (Category cat) => Schoenfinkel cat
2013-08-30 23:01:20	Ralith	with sufficiently clever abstractions you can write one-pass as if it were two-pass
2013-08-30 23:01:25	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Quit: Leaving)
2013-08-30 23:01:29	-->	NiceOneBrah (~niceonebr@173.247.206.226) has joined #haskell
2013-08-30 23:01:29	Eduard_Munteanu	Anyway my concern is I need a big function calling a bunch of parsers, and then fill a record type.
2013-08-30 23:01:36	mm_freak_	schoen :: cat (a, b) c -> cat a (cat b c)
2013-08-30 23:01:37	<--	anRch (~markmilli@173-9-87-73-NewEngland.hfc.comcastbusiness.net) has quit (Quit: anRch)
2013-08-30 23:01:38	haasn	mm_freak_: I like these names, they're pretty (sorry)
2013-08-30 23:01:45	Cale	Well, you don't lose *much* sanity avoiding the tokenising pass with a parser combinator library, because you build parsers for each of your tokens, and then use those.
2013-08-30 23:01:47	mm_freak_	they're schön =)
2013-08-30 23:01:50	Eduard_Munteanu	Ralith: maybe it does do fusion
2013-08-30 23:02:04	monochrom	haha mm_freak_
2013-08-30 23:02:17	haasn	mm_freak_: but why ‘oe’? :)
2013-08-30 23:02:29	haasn	this is an acme-package, after all
2013-08-30 23:02:39	-->	xBsd (~xBsd@h195-91-233-2.ln.rinet.ru) has joined #haskell
2013-08-30 23:02:39	Cale	haasn: Because ö is a little hard to type, I guess.
2013-08-30 23:02:53	Cale	(unless you have a keyboard layout which has it directly)
2013-08-30 23:02:54	Eduard_Munteanu	It's a bit annoying because I have to map certain properties to certain fields of a certain record
2013-08-30 23:02:55	-->	mxc (~maxcan@199.21.86.2) has joined #haskell
2013-08-30 23:03:00	mm_freak_	haasn: there are unicode variants if you prefer
2013-08-30 23:03:13	mm_freak_	that's why it needs ConstraintKinds
2013-08-30 23:03:15	<--	ioanel (~Thunderbi@188.25.17.113) has quit (Quit: ioanel)
2013-08-30 23:03:19	mm_freak_	type Schönfinkel = Schoenfinkel
2013-08-30 23:03:19	mm_freak_	=)
2013-08-30 23:03:23	monochrom	yeah, it comes with both schoen and schön
2013-08-30 23:03:25	haasn	heh
2013-08-30 23:03:33	haasn	awesome
2013-08-30 23:03:34	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-08-30 23:03:42	<--	path[l] (~vsi@173.252.71.3) has quit (Ping timeout: 264 seconds)
2013-08-30 23:03:47	<--	erochester (~erocheste@d-199-247-40.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-08-30 23:04:02	monochrom	BUT! it doesn't have Control.Category.Schönfinkel
2013-08-30 23:04:09	haasn	schön/hässlich
2013-08-30 23:04:14	mm_freak_	it even comes with a test suite to show that curry = schoen =P
2013-08-30 23:04:22	<--	eis_ (~eis@109.197.218.46) has quit (Read error: Connection reset by peer)
2013-08-30 23:04:34	haasn	in this model, schön should be uncurry
2013-08-30 23:04:36	haasn	clearly
2013-08-30 23:04:37	 *	hackagebot acme-schoenfinkel 0.1.0 - Proper names for curry and uncurry  http://hackage.haskell.org/package/acme-schoenfinkel-0.1.0 (ErtugrulSoeylemez)
2013-08-30 23:04:39	haasn	I mean uh
2013-08-30 23:04:41	haasn	curry
2013-08-30 23:04:45	-->	eis_ (~eis@109.197.218.46) has joined #haskell
2013-08-30 23:04:47	mm_freak_	monochrom: i didn't want to mess up the file system of people =P
2013-08-30 23:05:17	 *	Kinnison notes that hub.darcs.net doesn't set the encoding to utf8 on the pages it sends
2013-08-30 23:05:24	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-08-30 23:05:24	Eduard_Munteanu	I keep wishing to design a combinator to take a field number and parse it into various types.
2013-08-30 23:05:27	Kinnison	""SchÃ¶nfinkelization""
2013-08-30 23:05:31	monochrom	iso-8859-1 die die die
2013-08-30 23:05:31	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:05:41	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Client Quit)
2013-08-30 23:05:57	-->	ham1 (~ham1@87.115.15.49) has joined #haskell
2013-08-30 23:06:05	Eduard_Munteanu	I think I should do a more extensive first-pass.
2013-08-30 23:06:12	<--	ham1 (~ham1@87.115.15.49) has left #haskell
2013-08-30 23:06:15	 *	monochrom told firefox to default to utf-8
2013-08-30 23:06:20	haasn	Kinnison: the page is actually set to UTF-8 for me
2013-08-30 23:06:26	haasn	it looks like an encoding error server side, oh no
2013-08-30 23:06:27	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-30 23:06:39	Kinnison	oh well, oops
2013-08-30 23:06:42	mauke	WTF-8
2013-08-30 23:06:47	Eduard_Munteanu	Heh.
2013-08-30 23:07:06	<--	tazjin (~tazjin@c80-216-5-83.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-30 23:07:36	haasn	or perhaps a client-side error on mm_freak_'s end?
2013-08-30 23:07:51	monochrom	the http header has "Content-Type: text/html; charset=utf-8" alright
2013-08-30 23:08:11	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-08-30 23:08:12	lispy	Also, I like that the unicode charaters break the syntax highlighting
2013-08-30 23:08:16	lispy	http://hub.darcs.net/ertes/acme-schoenfinkel/browse/Control/Category/Schoenfinkel.hs
2013-08-30 23:08:18	monochrom	emphasis: the http header, I do not mean the html code
2013-08-30 23:08:19	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-30 23:08:28	haasn	http://hub.darcs.net/nand/test-repo
2013-08-30 23:08:31	haasn	works fine for me
2013-08-30 23:08:35	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-08-30 23:08:50	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-08-30 23:09:07	 *	monochrom hugs his home-brew program based on the HTTP library
2013-08-30 23:09:30	mm_freak_	sm: -highlight-
2013-08-30 23:10:08	haasn	(oh, I've made the repo public now so you can access it and confirm it works for you too)
2013-08-30 23:10:16	mm_freak_	http://hackage.haskell.org/package/acme-schoenfinkel
2013-08-30 23:10:20	<--	xinming (~xinming@125.82.196.167) has quit (Ping timeout: 256 seconds)
2013-08-30 23:10:21	mm_freak_	includes 'hässlich' now
2013-08-30 23:10:27	mm_freak_	and tests the unicode versions as well
2013-08-30 23:10:44	monochrom	you are to be congratulated! XD
2013-08-30 23:10:56	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-30 23:11:05	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 23:11:08	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-30 23:11:13	haasn	great, now I can use it without moral issues
2013-08-30 23:11:15	<--	Guest44651 (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has quit (Read error: Operation timed out)
2013-08-30 23:11:25	monochrom	remember to update the bounds on base when a future GHC comes out!
2013-08-30 23:11:29	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-30 23:11:33	<--	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-08-30 23:11:41	sm	mm_freak_: ?
2013-08-30 23:12:00	-->	xinming (~xinming@125.82.198.43) has joined #haskell
2013-08-30 23:12:07	mm_freak_	sm: darcshub does not handle unicode properly via SSH
2013-08-30 23:12:22	<--	totte (~totte@unaffiliated/totte) has quit (Read error: Operation timed out)
2013-08-30 23:12:27	tdammers	darcshub doesn't handle unicode properly via http either
2013-08-30 23:12:33	mm_freak_	sm: ssh ertes@hub.darcs.net init acme-schoenfinkel "Schönfinkelization package: proper names for curry and uncurry."
2013-08-30 23:12:35	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:12:38	turiya	how do I remove an element at a specific location in a list? Does using take and drop copy the list twice unnecessarily?
2013-08-30 23:12:40	ibotty	tdammers: i noticed as well
2013-08-30 23:12:49	mm_freak_	i fixed it now via web interface
2013-08-30 23:12:59	tdammers	also, I'd like to see `häßlich` as well
2013-08-30 23:13:04	monochrom	darcs was written when GHC did not support utf-8. can't be helped.
2013-08-30 23:13:09	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 248 seconds)
2013-08-30 23:13:10	sm	rats.. patches welcome
2013-08-30 23:13:11	mm_freak_	tdammers: that's no longer proper german =)
2013-08-30 23:13:12	haasn	http://hub.darcs.net/nand/test-repo2 confirm
2013-08-30 23:13:14	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:13:19	tdammers	it was in the days of good Moses
2013-08-30 23:13:27	ski	turiya : `take n &&& drop n = splitAt n'
2013-08-30 23:13:45	<--	alvdav (~quassel@I63-5O.static.anw.at) has quit (Ping timeout: 245 seconds)
2013-08-30 23:13:51	mm_freak_	turiya: it doesn't copy twice, but it traverses twice
2013-08-30 23:13:52	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-30 23:13:53	joelteon	@pl \n -> take n &&& drop n
2013-08-30 23:13:56	lambdabot	liftM2 (&&&) take drop
2013-08-30 23:13:56	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-30 23:14:05	ski	@botsmack
2013-08-30 23:14:05	lambdabot	:)
2013-08-30 23:14:06	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-30 23:14:23	ibotty	@pl-resume
2013-08-30 23:14:24	monochrom	turiya: it will copy the first portion of the list, but should be just once if you do it right. also, use splitAt, it will traverse the list just once, but same amount of copying
2013-08-30 23:14:28	dmwit	turiya: Answer: you don't remove an element at a specific location in a list.
2013-08-30 23:14:29	lambdabot	liftM2 (&&&) take drop
2013-08-30 23:14:29	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-30 23:14:31	ibotty	(what should it do?)
2013-08-30 23:14:36	joelteon	ibotty: @pl is fucked atm
2013-08-30 23:14:38	 *	hackagebot acme-schoenfinkel 0.1.1 - Proper names for curry and uncurry  http://hackage.haskell.org/package/acme-schoenfinkel-0.1.1 (ErtugrulSoeylemez)
2013-08-30 23:14:39	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:14:40	 *	hackagebot xmlgen 0.6.0.0 - Fast XML generation library  http://hackage.haskell.org/package/xmlgen-0.6.0.0 (StefanWehr)
2013-08-30 23:14:56	monochrom	for better results, consider using a different approach altogether
2013-08-30 23:15:07	dmwit	ibotty: It should not claim it got suspended.
2013-08-30 23:15:29	dmwit	Oh, that Ertugrul. Such a joker.
2013-08-30 23:15:41	ibotty	joelteon: what about splitAt
2013-08-30 23:15:45	mm_freak_	dmwit: that's me =P
2013-08-30 23:15:55	<--	simukis_ (~simukis_@78.63.244.234) has quit (Ping timeout: 260 seconds)
2013-08-30 23:15:55	 *	dmwit waves
2013-08-30 23:16:00	lispy	monochrom: I thought the real problem with darcs and unicode is that storing arbitrary text content is not 100% compatible with encodings.
2013-08-30 23:16:04	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-08-30 23:16:10	applicative	omg this is awesome. i want it in base!
2013-08-30 23:16:11	-->	ShaneCurran (~shane@orchestra/user/TechieShane) has joined #haskell
2013-08-30 23:16:11	lispy	monochrom: I'm trying to tihnk of how to explain...
2013-08-30 23:16:35	<--	ShaneCurran (~shane@orchestra/user/TechieShane) has quit (Excess Flood)
2013-08-30 23:16:36	dmwit	Storing text content in your RCS when the filesystem only knows bytes is a recipe for disaster, yes.
2013-08-30 23:16:41	monochrom	do you mean, darcs cannot know which encoding you want to use, for each file?
2013-08-30 23:16:45	lispy	monochrom: Maybe this example helps, someone creates a file in one encoding and someone submits a patch in a different encoding (but for that existing file)
2013-08-30 23:17:13	mm_freak_	does darcs even need to know for text files?
2013-08-30 23:17:14	dmwit	s/is a recipe/seems like a recipe/
2013-08-30 23:17:18	Kinnison	anything other than utf8 should just be banned (for interchange)
2013-08-30 23:17:19	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-08-30 23:17:21	lispy	Also, unix path names don't have encoding info stored anywhere
2013-08-30 23:17:25	tel	applicative aw, I'm not sure if I like the new name for generalization purposes or wish it dependended on strict pair
2013-08-30 23:17:25	dmwit	mm_freak_: It does patches by line. So yes.
2013-08-30 23:17:38	mm_freak_	dmwit: it does patches by line, so no
2013-08-30 23:17:43	Heffalump	dmwit: not really, because a line break is a line break
2013-08-30 23:17:47	Heffalump	it needs to know for metadata
2013-08-30 23:17:49	dmwit	mm_freak_: You're not thinking big enough. =)
2013-08-30 23:17:49	applicative	tel I agree, of course people complain about the use of lazy pairs for Arrow too.
2013-08-30 23:17:58	<--	SpyrosTr_ (~spyrostri@ppp089210054071.access.hol.gr) has quit (Remote host closed the connection)
2013-08-30 23:18:08	applicative	tel: so mm_freak_ is just repeating all the old mistakes ;)
2013-08-30 23:18:13	mm_freak_	dmwit: if my acme-schoenfinkel package proves anything, it is that i do think big enough =P
2013-08-30 23:18:16	tel	ha
2013-08-30 23:18:19	dmwit	When I write my file in UTF-32 I'll be laughing at your UTF-8 based line detection into my sleeve.
2013-08-30 23:18:25	-->	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has joined #haskell
2013-08-30 23:18:29	 *	monochrom has a cunning plan!
2013-08-30 23:18:36	mm_freak_	schoen :: (Schoenfinkel cat) => cat (a, b) c -> cat a (cat b c)
2013-08-30 23:18:37	mm_freak_	=P
2013-08-30 23:18:45	Kinnison	dmwit: I don't want your steenky patches
2013-08-30 23:18:48	monochrom	mm_freak_: for each function, provide both a strict version and a non-strict version :)
2013-08-30 23:18:51	applicative	Control.Category.Schoenfinkel.Strict
2013-08-30 23:18:55	mm_freak_	lol
2013-08-30 23:18:55	tel	bahaha
2013-08-30 23:18:58	dmwit	err
2013-08-30 23:19:00	 *	monochrom has a more cunning plan!
2013-08-30 23:19:05	dmwit	That's a rooky error. I meant UCS-32 of course.
2013-08-30 23:19:06	tel	or overload it on Field1 and Field2?
2013-08-30 23:19:09	-->	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has joined #haskell
2013-08-30 23:19:12	<--	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-08-30 23:19:16	applicative	tel, that's it!
2013-08-30 23:19:18	Kinnison	dmwit: that's more like it
2013-08-30 23:19:21	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Read error: Connection reset by peer)
2013-08-30 23:19:22	dmwit	UCS-4?
2013-08-30 23:19:22	tel	yessss
2013-08-30 23:19:23	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-30 23:19:26	dmwit	crap, I'm really making a hash of it
2013-08-30 23:19:28	monochrom	mm_freak_: for each function, add a Bool parameter for strictness :)
2013-08-30 23:19:33	Kinnison	UCS-32 sounds awesome
2013-08-30 23:19:36	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:19:45	tel	monochrom oh. that's.
2013-08-30 23:19:46	mm_freak_	feel free to send patches or do pull-requests =P
2013-08-30 23:19:48	Kinnison	256 bit character codes
2013-08-30 23:19:54	tel	monochrom geniusterrible
2013-08-30 23:19:54	lispy	UCS-32: File encodings bloat edition :)
2013-08-30 23:20:03	Kinnison	One character SHA-256 hashes :-)
2013-08-30 23:20:24	lispy	We should have unicode points for x86 instructions
2013-08-30 23:20:28	applicative	i give up on the Field2 plan, it's too horrifying
2013-08-30 23:20:30	dmwit	Heffalump: I'm not 100% sure I understood your point.
2013-08-30 23:20:39	mm_freak_	WrappedSchoenfinkel does make a point, though =)
2013-08-30 23:20:46	lispy	so you could embed instructions in plaintext (yay?!)
2013-08-30 23:20:53	mm_freak_	every ArrowApply is a Schoenfinkel
2013-08-30 23:21:02	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-08-30 23:21:20	Heffalump	I did jump into the middle of the conversation, but I thought you were talking about darcs and encoding
2013-08-30 23:21:23	mm_freak_	should rename it to WrappedArrowApply though
2013-08-30 23:21:33	dmwit	Heffalump: Yes, I think we were. And so?
2013-08-30 23:21:56	ibotty	something different: i like to use GOA in ghci, is it possible to use it even within cabal repl or cabal-dev ghci? without installing in the cabal sandbox, that is
2013-08-30 23:22:00	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Remote host closed the connection)
2013-08-30 23:22:01	Heffalump	so I was saying that I don't think the encoding matters for detecting line-endings
2013-08-30 23:22:12	dmwit	I think it does.
2013-08-30 23:22:19	<--	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-08-30 23:22:29	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-08-30 23:22:35	tel	:t f <$> view _1 <*> view _2
2013-08-30 23:22:36	lambdabot	(Show b1, Show b2, Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1, FromExpr b) => f b
2013-08-30 23:22:40	tel	ooh
2013-08-30 23:22:42	-->	gordon_ (gordon@nano.smar.fi) has joined #haskell
2013-08-30 23:22:42	dmwit	To be somewhat obtuse about it, I choose EBCDIC as my encoding.
2013-08-30 23:22:43	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-30 23:22:44	lispy	I thought droundy told me that there are some pathelogical normalization cases for line-endings but that he deemed them sufficiently esoteric(?) to ignore them?
2013-08-30 23:22:47	-->	totte (~totte@unaffiliated/totte) has joined #haskell
2013-08-30 23:22:47	<--	Riccardo (82f58947@gateway/web/freenode/ip.130.245.137.71) has quit (Quit: Page closed)
2013-08-30 23:22:48	gordon_	hello!
2013-08-30 23:22:55	<--	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has quit (Ping timeout: 260 seconds)
2013-08-30 23:23:00	gordon_	I've got a question about some IDE for haskell
2013-08-30 23:23:05	gordon_	what are you guys using ?
2013-08-30 23:23:07	Heffalump	dmwit: ah, ok
2013-08-30 23:23:14	lispy	gordon_: I use vim and emacs
2013-08-30 23:23:19	lispy	gordon_: not IDEs exactly
2013-08-30 23:23:26	dmwit	Heffalump: But not even being obtuse, UTF-16 is weird enough that it probably matters.
2013-08-30 23:23:29	Heffalump	I'm with droundy on that :-)
2013-08-30 23:23:29	gordon_	lispy: something more IDE-like ?
2013-08-30 23:23:30	haasn	mm_freak_: oh god
2013-08-30 23:23:31	shanse	vim and emacs?
2013-08-30 23:23:32	-->	poppingtonic (~poppingto@212.49.88.103) has joined #haskell
2013-08-30 23:23:34	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (Quit: ZNC - http://znc.in)
2013-08-30 23:23:36	gordon_	ok..
2013-08-30 23:23:39	lispy	gordon_: FPcomplete is making an IDE. It's web based. I think it's in a closed beta.
2013-08-30 23:23:41	Heffalump	dmwit: hmm, point
2013-08-30 23:23:44	acowley	gordon_: emacs with ghc-mod
2013-08-30 23:23:44	tel	applicative there's no way to write schoen with Field1 Field2, right? Because we need the two constraints together to make a prism
2013-08-30 23:23:44	lispy	gordon_: eclipseFP?
2013-08-30 23:23:52	haasn	mm_freak_: this bug goes all the way back to SSH.Util, which has fromLBS :: LBS.ByteString -> String; fromLBS = map (toEnum . fromIntegral) . LBS.unpack
2013-08-30 23:23:53	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-08-30 23:23:57	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-08-30 23:24:13	mm_freak_	haasn: that information may be useful to sm
2013-08-30 23:24:16	mm_freak_	sm: -highlight again-
2013-08-30 23:24:18	lispy	gordon_: http://eclipsefp.github.io/install.html
2013-08-30 23:24:23	gordon_	lispy: I'm not quite fan of eclipse
2013-08-30 23:24:26	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 23:24:32	gordon_	it likes to freeze after while
2013-08-30 23:24:33	tel	haasn whoa
2013-08-30 23:24:34	lispy	gordon_: You're making this difficult :)
2013-08-30 23:24:41	lispy	gordon_: what do you mean by IDE
2013-08-30 23:24:46	gordon_	lispy: well it's hard to beat intellij you know...
2013-08-30 23:24:50	lispy	gordon_: what would be your ideal IDE?
2013-08-30 23:24:58	gordon_	lispy: intellij for haskell :)
2013-08-30 23:25:00	lispy	hmmm
2013-08-30 23:25:01	-->	anachrome (~lily@adsl-69-183-229-127.dsl.wlfrct.sbcglobal.net) has joined #haskell
2013-08-30 23:25:03	gordon_	or qt creator
2013-08-30 23:25:03	ibotty	whut?
2013-08-30 23:25:23	gordon_	but now I'm looking for something fast
2013-08-30 23:25:30	gordon_	with some kind of code completion
2013-08-30 23:25:33	lispy	gordon_: have you tried tihs? https://code.google.com/p/ideah/
2013-08-30 23:25:41	sm	haasn: that would be great to drop in an issue at http://hub.darcs.net/simon/darcsden/issues
2013-08-30 23:25:56	lispy	vim has completeion
2013-08-30 23:26:00	haasn	sm: sure thing
2013-08-30 23:26:02	lispy	(so does emacs)
2013-08-30 23:26:04	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-08-30 23:26:06	gordon_	hm
2013-08-30 23:26:08	-->	mauke_ (~mauke@p3m/member/mauke) has joined #haskell
2013-08-30 23:26:09	sm	as for rendering of unicode, that may be a highlighting-kate issue
2013-08-30 23:26:13	-->	diadara__ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:26:13	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Client Quit)
2013-08-30 23:26:19	gordon_	I will use vim then
2013-08-30 23:26:20	mm_freak_	sm: that actually works
2013-08-30 23:26:28	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-30 23:26:29	gordon_	since I'm using it as text editor
2013-08-30 23:26:49	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-08-30 23:26:49	sm	mm_freak_: I did see the color changing unexpectedly at non-ascii chars
2013-08-30 23:26:58	<--	bwr (~bwr@69.71.1.1) has quit (Quit: :q)
2013-08-30 23:26:59	mm_freak_	gordon_: intelli* is difficult in haskell
2013-08-30 23:27:15	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-08-30 23:27:18	mm_freak_	sm: oh ok…  at least in the README.md it works
2013-08-30 23:27:26	gordon_	mm_freak_: this is why I asked here
2013-08-30 23:27:34	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Read error: Connection reset by peer)
2013-08-30 23:27:34	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-30 23:27:39	gordon_	I would like to learn something functional
2013-08-30 23:27:47	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-08-30 23:27:49	gordon_	I will probably use scala in the end
2013-08-30 23:27:58	gordon_	but haskell is somehow 'pure functional'
2013-08-30 23:28:01	--	preflex_ is now known as preflex
2013-08-30 23:28:04	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-08-30 23:28:06	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-08-30 23:28:08	joelteon	heh, scala
2013-08-30 23:28:10	gordon_	so would like to learn good practices
2013-08-30 23:28:21	mm_freak_	gordon_: scala and haskell have little in common actually
2013-08-30 23:28:38	mm_freak_	haskell actually ruined me for scala =)
2013-08-30 23:28:40	lispy	if you're just learning the basics then hopefully the choice of ide/editor doesn't matter yet
2013-08-30 23:28:40	monochrom	good practice regarding which editor to use?!
2013-08-30 23:28:42	<--	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has quit (Ping timeout: 256 seconds)
2013-08-30 23:28:42	<--	heruur (~tvh@2a00:12d0:a101:6f01:5eff:35ff:fe06:c201) has quit (Ping timeout: 264 seconds)
2013-08-30 23:28:43	gordon_	mm_freak_: it's about paradigm
2013-08-30 23:28:49	gordon_	monochrom: nah
2013-08-30 23:28:51	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 23:28:54	sm	thanks haasn
2013-08-30 23:28:57	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 23:28:59	monochrom	ok that's better
2013-08-30 23:29:02	-->	heruur (~tvh@2a00:12d0:a101:6f01:223:14ff:fe98:9164) has joined #haskell
2013-08-30 23:29:08	<--	diadara__ (~diadara@115.249.18.25) has quit (Client Quit)
2013-08-30 23:29:11	<--	Taneb (~nathan@host-92-23-115-247.as13285.net) has quit (Quit: Leaving)
2013-08-30 23:29:13	mm_freak_	gordon_: start with something that doesn't get in the way of your learning experience
2013-08-30 23:29:15	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-08-30 23:29:17	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:29:19	<--	eeezkil (~eeezkil@unaffiliated/eeezkil) has quit (Quit: ^D)
2013-08-30 23:29:22	lispy	notepad.exe
2013-08-30 23:29:30	mm_freak_	in other words, don't waste your time trying to find a "good IDE", because there is none
2013-08-30 23:29:30	gordon_	mm_freak_: this is what I'm looking for
2013-08-30 23:29:36	mm_freak_	most of us just use a text editor like emacs or vim
2013-08-30 23:29:36	applicative	here's a typical passage of frege that people like van heijenoort associate with currying http://www.scribd.com/doc/118467145/gottlob-frege-m-furth-translator-the-basic-laws-of-arithmetic-exposition-of-the-system#page=155
2013-08-30 23:29:38	dmwit	lispy: ...run in Wine
2013-08-30 23:29:39	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-08-30 23:29:46	gordon_	ok
2013-08-30 23:29:49	gordon_	so I will get kate ;0
2013-08-30 23:29:51	gordon_	;)
2013-08-30 23:30:05	monochrom	throw a die to choose between Haskell, OCaml, F#, Scala, whatever you think up. or learn them all.
2013-08-30 23:30:16	dmwit	"go with your heart"
2013-08-30 23:30:20	mm_freak_	gordon_: that's fine…  all you really need is an editor with a built-in command to trigger compilation =)
2013-08-30 23:30:24	-->	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-30 23:30:24	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-08-30 23:30:31	mm_freak_	IIRC kate has that
2013-08-30 23:30:37	ibotty	but hdevtools integration is great
2013-08-30 23:30:39	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-08-30 23:30:42	 *	lispy uses split windows/tmux and has a shell in one window and vim in the other
2013-08-30 23:30:46	mm_freak_	what is hdevtools?
2013-08-30 23:30:50	<--	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has quit (Ping timeout: 245 seconds)
2013-08-30 23:30:52	--	mauke_ is now known as mauke
2013-08-30 23:30:57	ibotty	ghcmod, but faster
2013-08-30 23:31:02	mm_freak_	what is ghcmod?
2013-08-30 23:31:06	ibotty	:D
2013-08-30 23:31:09	monochrom	well, dmwit, in this case, due to lack of information, the heart says nothing. when this happens, I go with the die instead. it's in fact probabilistically better than asking stranger's opinion
2013-08-30 23:31:09	lispy	full screen terminals. I use the finest that the 1970s had to offer.
2013-08-30 23:31:16	 *	applicative uses pico-mod
2013-08-30 23:31:24	ibotty	ghc running in the background, constantly compiling your code
2013-08-30 23:31:26	ibotty	:D
2013-08-30 23:31:29	applicative	and hdev-nano
2013-08-30 23:31:33	mm_freak_	ah
2013-08-30 23:31:34	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-30 23:31:47	mm_freak_	what's that good for?
2013-08-30 23:31:52	dmwit	heart... runs on information?
2013-08-30 23:32:07	ibotty	it's great. an instance after saving, i see type errors
2013-08-30 23:32:21	mm_freak_	i see…  that would probably slow me down =)
2013-08-30 23:32:21	monochrom	like, until the day your brain has a USB 3.0 port and you can upload your brain for a full analysis, my opinion of what you should do is pretty irrelevant to what's best for you. seriously.
2013-08-30 23:32:27	mm_freak_	i often write pages of code before compiling
2013-08-30 23:32:48	-->	path[l] (~vsi@173.252.71.3) has joined #haskell
2013-08-30 23:32:59	haasn	monochrom: if a die is better than asking a stranger's opinion then just ask a stranger's opinion and do the opposite of what they suggest?
2013-08-30 23:33:09	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:33:10	-->	shahn (~shahn@f052129092.adsl.alicedsl.de) has joined #haskell
2013-08-30 23:33:14	donri	mm_freak_: in vim hdevtools can be used for inspecting types of [sub]expressions, inspect the :info of an identifier, get compilation errors and warnings on save next to the line numbers
2013-08-30 23:33:19	 *	applicative hadn't realized there'd been *so much work* on haskell.nanorc lately! https://github.com/serialhex/nano-highlight/blob/master/haskell.nanorc
2013-08-30 23:33:20	<--	scooty-puff (~andy@216.161.30.26) has quit (Ping timeout: 245 seconds)
2013-08-30 23:33:33	dmwit	haasn: Does that work when there are more than two choices?
2013-08-30 23:33:39	mm_freak_	donri: thanks, that sounds much more useful
2013-08-30 23:33:42	donri	mm_freak_: the type inspection is particularly cool
2013-08-30 23:33:48	ibotty	it's the same that ghci uses, so no
2013-08-30 23:33:53	donri	mm_freak_: especially with -fdefer-type-errors
2013-08-30 23:34:02	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-08-30 23:34:05	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:34:08	mm_freak_	i think i've never used that flag
2013-08-30 23:34:18	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (Ping timeout: 264 seconds)
2013-08-30 23:34:20	dmwit	haasn: ...hm, I guess rolling a die among the choices not suggested by a stranger is still better than rolling a die among all choices.
2013-08-30 23:34:24	donri	mm_freak_: yeah it's much less usable without editor integration
2013-08-30 23:34:44	mm_freak_	what i'd really like is something like agda's emacs mode
2013-08-30 23:35:00	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 245 seconds)
2013-08-30 23:35:03	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:35:06	<--	diadara (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-30 23:35:12	donri	yeah, can't wait for vim support for type holes, although i guess they're far from what agda provides
2013-08-30 23:35:15	mm_freak_	with holes, case splitting, inference, etc.
2013-08-30 23:35:35	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-08-30 23:35:53	tel	vim is getting type holes?
2013-08-30 23:36:09	dmwit	No, GHC is.
2013-08-30 23:36:10	tel	I would jump the emacs ship in a second
2013-08-30 23:36:11	mm_freak_	vim already has a bit type hole i think =P
2013-08-30 23:36:13	tel	oh, yes
2013-08-30 23:36:16	<--	sxn (~sxn@mnch-4d047838.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-08-30 23:36:21	mm_freak_	s/bit/big/
2013-08-30 23:36:26	tel	ha
2013-08-30 23:36:31	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-30 23:36:41	-->	danilo2 (b2257576@gateway/web/freenode/ip.178.37.117.118) has joined #haskell
2013-08-30 23:36:48	tel	every time I use agda mode and then go back to Haskell I find myself C-c C-c'ing cases
2013-08-30 23:36:57	tel	that's easily my favorite
2013-08-30 23:37:29	mm_freak_	mine is C-c C-l together with holes
2013-08-30 23:37:51	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-30 23:37:51	mm_freak_	combined with C-c C-f and C-c C-a
2013-08-30 23:38:03	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-30 23:38:41	danilo2	What would you use to achive this effect: I've got a list of Strings and a Monad State function "getName" (we can use it like: newname <- getName). And I want to "zip" this string list with new generated names, so it would be something like [("a", "name1"), ("b", "name2"), ...]. Is there any simple and nice method to do it?
2013-08-30 23:38:42	--	hdevalence is now known as hdevalence|away
2013-08-30 23:38:58	tel	agsy is nice, but I tend to feel it only ever has me by about 3 seconds
2013-08-30 23:38:59	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-08-30 23:39:00	<--	Ov3rload (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has quit (Quit: Ov3rload)
2013-08-30 23:39:12	tel	either I can give enough information for myself to figure it out or agsy can't either
2013-08-30 23:39:19	tel	but it does type for me
2013-08-30 23:39:23	<--	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has quit (Remote host closed the connection)
2013-08-30 23:39:32	<--	cdidd (~cdidd@128-68-18-47.broadband.corbina.ru) has quit (Ping timeout: 268 seconds)
2013-08-30 23:39:49	-->	cdidd (~cdidd@128-68-19-30.broadband.corbina.ru) has joined #haskell
2013-08-30 23:40:32	-->	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has joined #haskell
2013-08-30 23:41:20	monochrom	danilo2: I may write my own recursion. if forced to not write my own recursion (but why?), I may absue zipWithM
2013-08-30 23:41:40	<--	phst` (~user@ppp-46-244-219-155.dynamic.mnet-online.de) has quit (Ping timeout: 245 seconds)
2013-08-30 23:41:46	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-08-30 23:42:42	monochrom	zipWithM (\a _ -> do{b<-getName; return(a,b)} ) the_string_list (repeat ())
2013-08-30 23:42:44	tel	danilo2 mapM (Data.Traversable.sequence . (return . id &&& getName))
2013-08-30 23:43:09	monochrom	oh, mapM is simpler
2013-08-30 23:43:10	tel	or monochrom's it's much actually simpler
2013-08-30 23:43:14	tel	haha
2013-08-30 23:43:20	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Read error: Connection reset by peer)
2013-08-30 23:43:25	gordon_	ok guys
2013-08-30 23:43:28	gordon_	thanks for help
2013-08-30 23:43:33	gordon_	may come back later
2013-08-30 23:43:36	gordon_	take care
2013-08-30 23:43:39	monochrom	mine is more complicated due to (repeat ()) only to ignore it
2013-08-30 23:43:39	<--	gordon_ (gordon@nano.smar.fi) has left #haskell ("WeeChat 0.4.1")
2013-08-30 23:43:46	tel	okay, use mapM and don't use control arrow tricks, that'd be my actual suggestion ; )
2013-08-30 23:43:53	danilo2	monochrom, tel: Thank you. I'm going to try it :) monochrom: I wanted simply to know the easiest solution. I do not want to create my own recursions if there is a solution ;)
2013-08-30 23:43:57	-->	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has joined #haskell
2013-08-30 23:44:29	tel	danilo2 gl :)
2013-08-30 23:44:29	monochrom	yeah, combine mapM with my lambda adapted. mapM (\a -> do{b<-getName; return(a,b)})
2013-08-30 23:44:35	tel	nice
2013-08-30 23:44:38	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-08-30 23:45:02	danilo2	tel, monochrom: Ok I will :) btw - what is "&&&" ?
2013-08-30 23:45:05	tel	I do like control arrow tricks a lot
2013-08-30 23:45:23	monochrom	&&& helps you make tuples from functions
2013-08-30 23:45:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-30 23:45:25	tel	danilo2 "fanout", it takes to functions like (a -> b) and (a -> c) and turns them into (a -> (b, c))
2013-08-30 23:45:26	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-30 23:45:29	tel	:t (&&&)
2013-08-30 23:45:30	lambdabot	Arrow a => a b c -> a b c' -> a b (c, c')
2013-08-30 23:45:43	mm_freak_	:t liftA2 (,)
2013-08-30 23:45:44	lambdabot	Applicative f => f a -> f b -> f (a, b)
2013-08-30 23:45:48	monochrom	> (sin &&& abs) (-4.1)
2013-08-30 23:45:49	lambdabot	  (0.8182771110644103,4.1)
2013-08-30 23:46:03	mm_freak_	> liftA2 (,) sin abs (-4.1)
2013-08-30 23:46:04	lambdabot	  (0.8182771110644103,4.1)
2013-08-30 23:46:36	danilo2	Oh, thats nice :) Thank you :)
2013-08-30 23:46:36	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:4d00:e79a:249d:93cd) has joined #haskell
2013-08-30 23:46:39	mm_freak_	works better in theses cases:  arr (unschoen f) . (g &&& h)
2013-08-30 23:46:42	<--	ystael (~ystael@64.206.121.41) has quit (Ping timeout: 264 seconds)
2013-08-30 23:46:44	mm_freak_	liftA2 f g h
2013-08-30 23:47:11	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-08-30 23:47:19	tel	mm_freak_ unschoen. : )
2013-08-30 23:47:26	tel	it makes me happy
2013-08-30 23:47:30	mm_freak_	=)
2013-08-30 23:48:10	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-30 23:48:19	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-08-30 23:48:37	<--	make_sense (~make_sens@178.124.126.144) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-30 23:48:40	-->	ivoscc (~ivo@190.40.183.198) has joined #haskell
2013-08-30 23:48:53	<--	maattdd (~matthieu@wpa037066.Wireless.McGill.CA) has quit (Ping timeout: 248 seconds)
2013-08-30 23:48:57	applicative	(|sin,abs|) (-4.1)
2013-08-30 23:49:03	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-30 23:49:07	-->	DMcGill (~DMcGill@host-78-151-20-102.as13285.net) has joined #haskell
2013-08-30 23:49:15	mm_freak_	suggested by someone named applicative =)
2013-08-30 23:49:35	applicative	i'm still worried about these lazy pairs!
2013-08-30 23:49:54	monochrom	use a Bool parameter to control strictness
2013-08-30 23:49:56	tel	we could at least write unshoen f as f <$> view _1 <*> view _2
2013-08-30 23:50:18	tel	I'm still plugging away at how to get schoen from it
2013-08-30 23:50:22	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-08-30 23:50:28	applicative	@type \f ->  f <$> view _1 <*> view _2
2013-08-30 23:50:29	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:50:35	<--	turiya (~turiya@14.99.84.16) has quit (Quit: Leaving)
2013-08-30 23:50:45	mm_freak_	monochrom: that's blind
2013-08-30 23:50:48	applicative	:(
2013-08-30 23:50:52	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-30 23:50:53	mm_freak_	data Strict = Strict | Nonstrict
2013-08-30 23:51:08	mm_freak_	newtype Strict = Strict { runStrict :: Bool }
2013-08-30 23:51:09	monochrom	oh, that's better
2013-08-30 23:51:09	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-08-30 23:51:18	applicative	hah
2013-08-30 23:51:26	tel	:)
2013-08-30 23:51:29	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-30 23:51:31	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-30 23:51:46	monochrom	in fact, why don't I suggest this:
2013-08-30 23:51:47	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:51:50	tel	:t \f -> f <$> view _1 <*> view _2
2013-08-30 23:51:50	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:51:52	applicative	the newtype associates strictness with truth
2013-08-30 23:51:52	tel	@type \f -> f <$> view _1 <*> view _2
2013-08-30 23:51:53	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:51:58	mm_freak_	a more serious note i do sometimes use Alternative+Foldable as a Bool replacement
2013-08-30 23:52:07	monochrom	use an Int parameter to control strictness. now you really have no clue which number means what :)
2013-08-30 23:52:21	mm_freak_	monochrom: do you have a clue with Bool?
2013-08-30 23:52:31	tel	monochrom I think we should keep with the theme and use the german words for strict/unstrict
2013-08-30 23:52:35	applicative	strict, very strict , very very strict
2013-08-30 23:52:36	tel	or true/false
2013-08-30 23:52:40	tel	whichever is more clear
2013-08-30 23:52:41	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-30 23:52:46	monochrom	no, but Bool means fewer experiments to discover the meaning
2013-08-30 23:53:17	mm_freak_	the bits in the Int may specify the strictness on particular arguments
2013-08-30 23:53:32	mm_freak_	f 3 ⊥ x = ⊥
2013-08-30 23:53:34	tel	data Strictly = StrictA | StrictB | Strict2
2013-08-30 23:54:05	tel	then use Maybe Strictly
2013-08-30 23:54:13	mm_freak_	f 3 ⊥ y = f 3 x ⊥ = ⊥
2013-08-30 23:54:20	mm_freak_	f 1 ⊥ y = ⊥
2013-08-30 23:54:27	mm_freak_	f 2 x ⊥ = ⊥
2013-08-30 23:54:33	monochrom	this is excellent
2013-08-30 23:54:48	-->	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has joined #haskell
2013-08-30 23:54:50	mm_freak_	use Integer for functions with more than 30 arguments
2013-08-30 23:55:21	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-30 23:55:26	applicative	the german for 'lazy evaluation' seems to be 'lazy evaluation'
2013-08-30 23:55:38	applicative	Bedarfsauswertung
2013-08-30 23:55:50	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 245 seconds)
2013-08-30 23:55:50	mm_freak_	applicative: faule auswertung
2013-08-30 23:55:51	tel	nicht strikt
2013-08-30 23:55:58	mm_freak_	tel: no, that's not the same thing
2013-08-30 23:56:24	tel	I don't know german, I just like the rhyme :)
2013-08-30 23:56:26	applicative	i was thinking we would translate 'call by value' as something like
2013-08-30 23:56:34	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-08-30 23:56:36	applicative	Wertauswertung
2013-08-30 23:56:46	tel	ooh
2013-08-30 23:56:47	applicative	making a hash of this...
2013-08-30 23:57:23	haasn	I just use “lazy Evaluation”. I don't write very good german
2013-08-30 23:57:31	mm_freak_	tel: it's not a rhyme in german =)
2013-08-30 23:57:40	tel	aw
2013-08-30 23:58:05	mm_freak_	applicative: aufruf mit/durch/via wert
2013-08-30 23:58:18	monochrom	I don't know German. I'm too lazy.
2013-08-30 23:58:42	monochrom	(Ich bin über lazy?)
2013-08-30 23:58:49	mm_freak_	ubarlazy
2013-08-30 23:58:52	monochrom	(Ichbinüberlazy?)
2013-08-30 23:59:08	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-30 23:59:22	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-08-30 23:59:23	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-08-31 00:00:14	<--	ljos (~bjarte@tunnel-32-84.vpn.uib.no) has quit (Ping timeout: 264 seconds)
2013-08-31 00:00:22	absence	does haskel have a bit scan / find first 0/1 function somewhere in the libs? (like the bsf/bsr x86 instruction)
2013-08-31 00:00:29	absence	haskell*
2013-08-31 00:00:37	<--	eff_ (~quassel@123.122.71.85) has quit (Ping timeout: 248 seconds)
2013-08-31 00:00:37	<--	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-08-31 00:01:09	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 00:01:22	monochrom	anyway, Oleg et al's "extensible effects" is pretty mind-blowing. but it has a drawback. you now have to write like "v :: Int <- ask" or other ways of really nailing the type of v to Int, or whatever type you want. because the type of "ask" is too general to tell the type-inferrer
2013-08-31 00:01:54	-->	eff_ (~quassel@123.122.71.85) has joined #haskell
2013-08-31 00:01:59	-->	ulfdoz_ (~mary@p5B38BCD6.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 00:02:02	mm_freak_	absence: no, but you can define it easily in terms of Data.Bits combinators
2013-08-31 00:02:12	<--	nik_89 (~nik_89@unaffiliated/nniro) has quit (Remote host closed the connection)
2013-08-31 00:02:28	monochrom	in fact, it gets better. local ((1::Int) +) (do .. v::Int <- ask ...)  both type annotations are necessary
2013-08-31 00:03:15	ParahSailin	absence: yes i did something with those instructions
2013-08-31 00:03:21	<--	cfricke (~cfricke@96.45.197.22) has quit (Ping timeout: 245 seconds)
2013-08-31 00:03:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-08-31 00:03:38	-->	eyolfson (~eyolfson@laforge.cs.uwaterloo.ca) has joined #haskell
2013-08-31 00:03:42	<--	xBsd (~xBsd@h195-91-233-2.ln.rinet.ru) has quit
2013-08-31 00:03:58	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-31 00:04:36	<--	ulfdoz (~mary@p5B389C35.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-08-31 00:04:36	--	ulfdoz_ is now known as ulfdoz
2013-08-31 00:04:44	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-08-31 00:05:20	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 00:05:51	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-08-31 00:06:06	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-08-31 00:06:07	ParahSailin	my mistake, that was the popcnt primop that is in there
2013-08-31 00:06:08	<--	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has quit (Read error: Connection reset by peer)
2013-08-31 00:06:31	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Remote host closed the connection)
2013-08-31 00:06:33	chrisdone	monochrom: what do you think of Disciple?
2013-08-31 00:06:49	chrisdone	and its effect typing
2013-08-31 00:06:50	monochrom	I don't know. haven't looked.
2013-08-31 00:07:46	-->	apeiros (~apeiros@77-58-115-64.dclient.hispeed.ch) has joined #haskell
2013-08-31 00:07:55	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-08-31 00:07:57	<--	apeiros (~apeiros@77-58-115-64.dclient.hispeed.ch) has left #haskell
2013-08-31 00:08:05	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-31 00:08:31	<--	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 00:08:34	absence	ParahSailin, mm_freak_: ok no problem, i'll define my own. thanks!
2013-08-31 00:08:49	chrisdone	monochrom: dude it's ace
2013-08-31 00:08:58	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 00:08:59	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-08-31 00:09:11	<--	ulfdoz (~mary@p5B38BCD6.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-08-31 00:09:17	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:09:18	haasn	> lengthOf (takingWhile not bits) 512
2013-08-31 00:09:19	lambdabot	  9
2013-08-31 00:09:30	monochrom	can a free monad be made a MonadFix? what restriction on the functor is sufficient? or is it hopeless?
2013-08-31 00:09:32	-->	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has joined #haskell
2013-08-31 00:09:44	<--	stevej (~stevej@162-205-176-51.lightspeed.sntcca.sbcglobal.net) has quit (Quit: invalid pointer/painter)
2013-08-31 00:09:47	<--	tcrayford (tcrayford@gateway/shell/ircrelay.com/x-fyiirmrkbzaeetgh) has left #haskell ("Linkinus - http://linkinus.com")
2013-08-31 00:09:49	bootcode	g'night
2013-08-31 00:09:50	haasn	absence: like this? ^
2013-08-31 00:09:50	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-08-31 00:10:36	applicative	"If the intel bsf and bsr instructions ever become GHC primops, this code should be reimplemented using these."
2013-08-31 00:10:44	applicative	says Data.IntSet
2013-08-31 00:10:51	bootcode	i have plain text + some line/col based regions, which I would like to convert to fancy highlighted html. Anyone aware of a suitable library?
2013-08-31 00:11:12	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 00:11:16	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-08-31 00:11:33	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-08-31 00:11:35	ParahSailin	absence: here's how you make a primop http://ghc.haskell.org/trac/ghc/ticket/5413
2013-08-31 00:11:35	ski	`bsf' ?
2013-08-31 00:11:38	chrisdone	bootcode: how do you want to highlight the plain text?
2013-08-31 00:11:55	mm_freak_	monochrom: pretty much hopeless
2013-08-31 00:12:16	mm_freak_	the proper answer is:  we don't know how to do it
2013-08-31 00:12:20	applicative	bit scan forward
2013-08-31 00:12:22	bootcode	chrisdone: with custom spans with ids, will plug some js in them
2013-08-31 00:12:23	newbie_	a question about lens. In http://pastebin.com/QThQMd1s, how do i use strike?
2013-08-31 00:12:30	mauke	The paste QThQMd1s has been copied to http://lpaste.net/92340
2013-08-31 00:12:42	ski	applicative : so `bsr' isn't "branch to subroutine" then ?
2013-08-31 00:12:49	Th0mas	I'm having a bit of trouble understanding the functioning of (>>). What determines that it executes the first argument before the second? I can understand why this works with (>>=) where the second argument depends on the return value of the first, but with (>>) it doesn't. Could anyone explain?
2013-08-31 00:12:51	<--	matheus23 (~quassel@p4FDF262A.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-08-31 00:12:52	chrisdone	bootcode: so what does f "hello world" output?
2013-08-31 00:12:52	applicative	I'm not seeing a lot of progress on that one ParahSailin
2013-08-31 00:13:10	applicative	> f "hello world"
2013-08-31 00:13:11	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr a0)
2013-08-31 00:13:11	lambdabot	   arising from a us...
2013-08-31 00:13:13	newbie_	i mean, execStateT strike initialState must be modified to take new arg
2013-08-31 00:13:13	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Read error: Operation timed out)
2013-08-31 00:13:20	<--	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has quit (Ping timeout: 245 seconds)
2013-08-31 00:13:34	Heffalump	Th0mas: there's no particular guarantee, it just depends on the monad
2013-08-31 00:13:42	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-08-31 00:13:43	monochrom	Th0mas: it depends on the monad. for IO, it executes left-to-right because IO says so
2013-08-31 00:13:56	Heffalump	m1 >> m2 is no different from m1 >>= \_ -> m2, in any case
2013-08-31 00:14:22	Heffalump	but consider the Maybe monad
2013-08-31 00:14:26	Th0mas	Hm, alright, but how is that implemented inside of IO then?
2013-08-31 00:14:31	monochrom	for examples of right-to-left, see my http://lpaste.net/41790/ and http://lpaste.net/63925
2013-08-31 00:14:32	-->	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has joined #haskell
2013-08-31 00:14:35	Chousuke	Th0mas: magic :p
2013-08-31 00:14:42	<--	LazinCajun (~LazinCaju@c-71-56-1-128.hsd1.ga.comcast.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 00:14:44	Heffalump	that will also force left->right evaluation at least to the point of checkign that the left-hand argument is None or Some.
2013-08-31 00:14:46	bootcode	chrisdone: assuming I have regions A:[0,3) and B:[6,8) it outputs "<span id="A">hel</span>lo <span id="B">wo</span>rld"
2013-08-31 00:14:55	Heffalump	I mean Just or Nothing (sorry, too much F#...)
2013-08-31 00:15:05	applicative	i assume >> is separately implemented for IO, so that it can mean approximately, "and then"
2013-08-31 00:15:05	ski	Th0mas : `IO' is a primitive, just like `Int' or `Float'
2013-08-31 00:15:06	monochrom	IO is implemented by the compiler making up object code
2013-08-31 00:15:11	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Ping timeout: 260 seconds)
2013-08-31 00:15:32	monochrom	and the compiler obviously chooses to invent object code that does left-to-right
2013-08-31 00:15:43	bootcode	chrisdone: I don't have problem implementing it, just though worth a question to deduplicate effort
2013-08-31 00:16:01	chrisdone	bootcode: hm, nope, don't know of such function
2013-08-31 00:16:09	Cale	applicative: It wouldn't have to be separately implemented, but it might be
2013-08-31 00:16:21	bootcode	chrisdone: np, thanks
2013-08-31 00:16:39	applicative	Cale: of course. iobind is implemented so as to mean 'and then, with the result...'
2013-08-31 00:16:40	Cale	applicative: Even with the hacky implementation that GHC uses, the data dependencies will keep things straight.
2013-08-31 00:17:27	chrisdone	bootcode: that might be a nice function to package =) applyTransformations :: [(Int,Int,Text -> Text)] -> Text -> Text
2013-08-31 00:17:36	 *	applicative only believes in the ajhc's implementation of io since it's guaranteed to be truly opaque 
2013-08-31 00:17:42	Th0mas	ski, monochrom, Heffalump: Ah alright, kinda makes sense. So are there more of these magic monads? I assume you can't do this with monads implemented in Haskell?
2013-08-31 00:17:53	monochrom	ST
2013-08-31 00:17:56	chrisdone	applicative: 'believe in'?
2013-08-31 00:18:10	monochrom	STM (unrelated to ST)
2013-08-31 00:18:30	<--	xplat_ (~james@67.205.253.80) has quit (Ping timeout: 264 seconds)
2013-08-31 00:18:34	monochrom	if you write your own monad, you can make it do whatever you want
2013-08-31 00:18:36	<--	eyolfson (~eyolfson@laforge.cs.uwaterloo.ca) has left #haskell ("WeeChat 0.4.1")
2013-08-31 00:18:56	-->	kingugo (~kingugo@196.46.245.50) has joined #haskell
2013-08-31 00:19:04	applicative	chrisdone: what, you believe in Hugs' IO?
2013-08-31 00:19:12	monochrom	including left-to-right, right-to-left, and there-and-back-again
2013-08-31 00:19:17	Th0mas	monochrom: Even if you implement it in Haskell? Doesn't it all boil down to some piece of "magic" in the end?
2013-08-31 00:19:18	chrisdone	applicative:  i don't know, it depends what 'believe in' means
2013-08-31 00:19:24	mm_freak_	out-and-back-in
2013-08-31 00:19:32	<--	kingugo (~kingugo@196.46.245.50) has quit (Client Quit)
2013-08-31 00:19:36	haasn	Identity
2013-08-31 00:19:40	monochrom	(indeed, logicT is there-and-back-again. it is exactly for trying and backtracking)
2013-08-31 00:19:56	applicative	http://ogi.altocumulus.org/~hallgren/Programatica/tools/pfe.cgi?Hugs.Prelude#tIO
2013-08-31 00:19:57	chrisdone	applicative: is it like Luke, I believe in you, or like I believe in Santa Claus, or what?
2013-08-31 00:20:26	-->	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 00:20:27	applicative	chrisdone: I mean, I avoid these disputes by pointing out that there are diverse implementations
2013-08-31 00:20:34	mm_freak_	Free, Coroutine and ContinueT are out-and-back-in
2013-08-31 00:20:37	monochrom	no, a lot of monads are just very complex pure functions. they are still pure functions. they are just complex enough you want to put a simpler monadic face in front
2013-08-31 00:20:41	applicative	ghc, I believe in you!
2013-08-31 00:21:01	-->	Patchou (~Tamae@mna75-1-81-57-129-31.fbx.proxad.net) has joined #haskell
2013-08-31 00:21:14	monochrom	for example Control.Monad.State.Strict (left-to-right) and Control.Monad.State.Lazy (right-to-left).
2013-08-31 00:21:15	<--	carp (5c1e45c9@gateway/web/freenode/ip.92.30.69.201) has left #haskell
2013-08-31 00:21:27	mm_freak_	ContT can also do mark-and-return
2013-08-31 00:21:30	tel	Th0mas Usually there end up being roughly two steps—you build the monad that models whatever kind of effect you want and then you interpret it into whatever magic monads have the runtime effects you want
2013-08-31 00:21:30	<--	shahn (~shahn@f052129092.adsl.alicedsl.de) has quit (Quit: Konversation terminated!)
2013-08-31 00:21:38	monochrom	guess what, they're both s -> (s, a). (or s -> (a,s), I forgot which, doesn't matter)
2013-08-31 00:22:02	mm_freak_	monochrom: memorize "sas" =)
2013-08-31 00:22:07	mm_freak_	s -> (a, s)
2013-08-31 00:22:17	Th0mas	monochrom: Interesting, still can't quite bend my mind around it though, I'll look into those definitions
2013-08-31 00:22:17	chrisdone	monochrom: we need named tuples like trex =)
2013-08-31 00:22:22	mm_freak_	or check random's type
2013-08-31 00:22:24	mm_freak_	:t random
2013-08-31 00:22:25	lambdabot	(RandomGen g, Random a) => g -> (a, g)
2013-08-31 00:22:28	Cale	applicative: It *looks* like they're doing something similar, though I'm entirely unfamiliar with ajhc: https://github.com/ajhc/ajhc/blob/arafura/lib/jhc-prim/Jhc/Prim/IO.hs
2013-08-31 00:22:30	chrisdone	s -> (state::s,value::a)
2013-08-31 00:23:06	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 00:23:06	tel	Th0mas try reading about free monads, http://www.haskellforall.com/2012/07/purify-code-using-free-monads.html
2013-08-31 00:23:06	mm_freak_	random's interface is almost made for state monads
2013-08-31 00:23:13	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 00:23:34	<--	Tamae (~Tamae@mna75-1-81-57-129-31.fbx.proxad.net) has quit (Ping timeout: 246 seconds)
2013-08-31 00:23:36	Cale	It would be nice to see a compiler which attempted a representation of IO actions which didn't rely on polluting the meaning of type level (->)
2013-08-31 00:23:49	ski	applicative : "ajhc" ?
2013-08-31 00:23:53	monochrom	the problem with "mnemonic: sas" is: why is it not "mnemonic: ssa" :)
2013-08-31 00:24:07	Cale	ski: http://ajhc.metasepi.org/
2013-08-31 00:24:12	Th0mas	tel: Thanks, will read that
2013-08-31 00:24:30	applicative	ski i was just fiddling with it earlier https://github.com/ajhc/ajhc
2013-08-31 00:24:34	<--	jayprich (~jayprich@unaffiliated/jayprich) has quit (Ping timeout: 256 seconds)
2013-08-31 00:24:46	applicative	amazingly it builds without a hitch
2013-08-31 00:24:51	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-08-31 00:24:53	chrisdone	cale: https://github.com/chrisdone/fore#translating-to-javascript =p
2013-08-31 00:25:25	applicative	ski: it makes a very nice, small 'hello world' which i'm sure you were much asking after
2013-08-31 00:25:47	<--	xRamses (~xRamses@194-166-73-195.adsl.highway.telekom.at) has quit (Ping timeout: 268 seconds)
2013-08-31 00:25:58	chrisdone	cale: https://github.com/chrisdone/fore/blob/master/js/instances.js#L68
2013-08-31 00:26:00	applicative	did mm_freak_ say ssa or sas?
2013-08-31 00:26:06	mm_freak_	monochrom: because it fits with other things =)
2013-08-31 00:26:11	bos	lenses. zomg.
2013-08-31 00:26:17	ski	applicative : hm, not sure that i was asking after anything ?
2013-08-31 00:26:18	applicative	@type unfoldr
2013-08-31 00:26:19	lambdabot	(b -> Maybe (a, b)) -> b -> [a]
2013-08-31 00:26:29	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 00:27:00	ski	monochrom : the way to recall `s -> (s, a)' vs. `s -> (a,s)' is that it's the wrong one
2013-08-31 00:27:07	applicative	bos they're great just stick to the main three combinators
2013-08-31 00:27:26	bos	applicative: i have no idea how i'd figure out what the main combinators are
2013-08-31 00:27:26	c_wraith	I still think unfoldr is an incredibly awkward type!
2013-08-31 00:27:38	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 00:27:59	ski	chrisdone : Trex :)
2013-08-31 00:28:10	mm_freak_	> unfoldr (Just . randomR (0, 9)) (mkStdGen 0)
2013-08-31 00:28:11	chrisdone	ski: yay someone else who likes it =)
2013-08-31 00:28:11	lambdabot	  [5,5,5,0,2,9,3,3,3,8,5,2,4,2,6,7,2,3,7,4,4,8,2,7,8,1,2,1,3,2,9,4,5,6,2,2,2,...
2013-08-31 00:28:14	Cale	(,) s is itself a functor, and so it would be much nicer to use s -> (s,a), but for whatever reason, mtl doesn't.
2013-08-31 00:28:17	FreeFull	:t state random
2013-08-31 00:28:23	lambdabot	(MonadState s m, RandomGen s, Random a) => m a
2013-08-31 00:28:44	applicative	> (True,False) ^. _1
2013-08-31 00:28:46	lambdabot	  True
2013-08-31 00:28:48	ski	chrisdone : now if only we could have lightweight variants as well (OCaml calls them "polymorphic variants") or at least positional variants ..
2013-08-31 00:28:53	applicative	there's one combinator bos ^^^
2013-08-31 00:29:03	chrisdone	ski: what's that?
2013-08-31 00:29:03	mm_freak_	Cale: s -> (s, a) would be more sensible, but then you would have to swap everything else all the time
2013-08-31 00:29:17	Cale	mm_freak_: You mean, in existing code
2013-08-31 00:29:29	mm_freak_	Cale: in existing libraries
2013-08-31 00:29:32	mm_freak_	for example 'random'
2013-08-31 00:29:36	mm_freak_	:t state random
2013-08-31 00:29:37	lambdabot	(MonadState s m, RandomGen s, Random a) => m a
2013-08-31 00:29:39	 *	hackagebot hspec-expectations 0.3.3 - Catchy combinators for HUnit  http://hackage.haskell.org/package/hspec-expectations-0.3.3 (SimonHengel)
2013-08-31 00:29:45	applicative	> _1 .~ "California" $ (1,2)
2013-08-31 00:29:46	lambdabot	  ("California",2)
2013-08-31 00:29:51	applicative	theres the other ^^ bos
2013-08-31 00:29:53	Cale	right, well, it's obviously in the wrong order in random as well
2013-08-31 00:30:04	ski	chrisdone : so you can say `foo :: Blah -> (forward :: X | back :: Y | stay :: Z)' or whatever
2013-08-31 00:30:13	bos	applicative: i'm trying to figure out how to use lenses from a state monad to transform part of the state
2013-08-31 00:30:30	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-08-31 00:30:31	applicative	easy
2013-08-31 00:30:31	donri	bos: the "=" operators
2013-08-31 00:30:36	tel	applicative bos or for the combinator shy: view and set
2013-08-31 00:30:41	donri	:t (.=)
2013-08-31 00:30:42	lambdabot	MonadState s m => ASetter s s a b -> b -> m ()
2013-08-31 00:30:45	ski	chrisdone : when you don't want to either use `Either's (possibly nesting them, or say `Either3',&c.) nor having to define a new type for a one- or two-off use case
2013-08-31 00:30:49	chrisdone	ski: as a sum type?
2013-08-31 00:30:52	ski	yes
2013-08-31 00:30:53	chrisdone	ski: nice =)
2013-08-31 00:30:54	applicative	> runState (_1 += 1 ) (1,"California")
2013-08-31 00:30:55	lambdabot	  ((),(2,"California"))
2013-08-31 00:31:04	chrisdone	ski: that would indeed be cool
2013-08-31 00:31:22	-->	pootler (~merv.hamm@94.198.124.172) has joined #haskell
2013-08-31 00:31:23	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-08-31 00:31:24	<--	MigoMipo (~MigoMipo@84-217-193-174.tn.glocalnet.net) has quit (Quit: Leaving)
2013-08-31 00:31:31	bos	applicative: ah, found http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html
2013-08-31 00:31:32	Cale	chrisdone: That's pretty reasonable-looking
2013-08-31 00:31:38	ski	chrisdone : see <http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual006.html#toc36> for OCaml's take on that (including some subtyping stuff as well)
2013-08-31 00:31:41	applicative	> runState (_1 += 1 ; _2 %= reverse ) (1,"California")
2013-08-31 00:31:42	lambdabot	  <hint>:1:19: parse error on input `;'
2013-08-31 00:31:46	applicative	uho
2013-08-31 00:31:56	applicative	> runState (do {_1 += 1 ; _2 %= reverse }) (1,"California")
2013-08-31 00:31:57	lambdabot	  ((),(2,"ainrofilaC"))
2013-08-31 00:31:59	chrisdone	cale: although i suppose it's based on GHC, so the (->) abuse already happened by this point
2013-08-31 00:32:02	bos	applicative: ver' nice
2013-08-31 00:32:28	donri	bos: https://github.com/ekmett/lens/blob/master/examples/Pong.hs
2013-08-31 00:32:29	tel	bos the Pong example is pretty nice for state updating lenses
2013-08-31 00:32:30	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-08-31 00:32:31	applicative	> runState (do {_1 += 1 ; _2._1 %= reverse }) (1,(True,"California"))
2013-08-31 00:32:32	lambdabot	  Couldn't match type `GHC.Types.Bool' with `[a0]'
2013-08-31 00:32:32	tel	donri :)
2013-08-31 00:32:35	applicative	oops
2013-08-31 00:32:43	chrisdone	ski: so much cool stuff in ocaml
2013-08-31 00:32:44	applicative	> runState (do {_1 += 1 ; _2._2 %= reverse }) (1,(True,"California"))
2013-08-31 00:32:46	lambdabot	  ((),(2,(True,"ainrofilaC")))
2013-08-31 00:32:58	bos	donri: thanks
2013-08-31 00:33:03	tel	checkBounds uses (^.) (%=) (+=) (*=)
2013-08-31 00:33:12	ski	chrisdone : yeah, i try to keep an eye on the MLs (and Scheme)
2013-08-31 00:33:18	 *	monochrom needs a backtracking monad to search in github source trees
2013-08-31 00:33:22	-->	myname_ (~yyetim@sat.ee.Princeton.EDU) has joined #haskell
2013-08-31 00:33:24	applicative	yes that pong of haasn s is better than most tutorials
2013-08-31 00:33:44	ski	monochrom : the `Back' button doesn't work ?
2013-08-31 00:33:51	ski	monochrom : try the `Clone' button ?
2013-08-31 00:33:51	donri	chrisdone: did you see https://www.google-melange.com/gsoc/project/google/gsoc2013/adamgundry/23001
2013-08-31 00:33:53	chrisdone	ski: i also saw a while back the partially applied named function arguments which was interesting
2013-08-31 00:33:55	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-08-31 00:34:06	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 00:34:08	ski	chrisdone : what was that ?
2013-08-31 00:34:22	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 00:34:24	FreeFull	> flip runState (mkStdGen 0) $ sequence . repeat 10 $ state random
2013-08-31 00:34:25	lambdabot	  Couldn't match expected type `m0 a2
2013-08-31 00:34:25	lambdabot	                               -> [Cont...
2013-08-31 00:34:39	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 00:34:40	monochrom	the 'back' button works
2013-08-31 00:34:40	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-08-31 00:35:11	<--	bitonic` (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Read error: Operation timed out)
2013-08-31 00:35:14	leroux	Is there anything like <$> but for allow IO?
2013-08-31 00:35:20	chrisdone	donri: nope
2013-08-31 00:35:23	ski	leroux : with what type ?
2013-08-31 00:35:29	leroux	Umm, so a Maybe.
2013-08-31 00:35:39	monochrom	Hug's IO is cool, it's almost Codensity of the free monad you expect, except for this Obj type
2013-08-31 00:35:47	FreeFull	> flip runState (mkStdGen 0) . sequence . replicate 10 $ state random
2013-08-31 00:35:48	lambdabot	  ([2092838931,-2143208520,2034827062,-1587933427,-1272503422,316817438,20070...
2013-08-31 00:35:58	ski	@type (<$>) :: (a -> b) -> (IO a -> IO b)
2013-08-31 00:35:59	lambdabot	(a -> b) -> IO a -> IO b
2013-08-31 00:36:09	tel	leroux IO is a Functor, so read <$> getLine works
2013-08-31 00:36:11	<--	xinming (~xinming@125.82.198.43) has quit (Ping timeout: 260 seconds)
2013-08-31 00:36:16	ski	leroux : do you want `(a -> Maybe b) -> (IO a -> IO (Maybe b))' ?
2013-08-31 00:36:19	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-31 00:36:24	chrisdone	ski: i don't remember the syntax, but it was something like: let f :: foo:Int -> bar:Char -> () = …;  and then f bar:'a' would have type foo:Char -> ()
2013-08-31 00:36:40	chrisdone	ski: similar to keyword args in lisp, but you could partially apply them
2013-08-31 00:36:59	leroux	Umm. I need `(a -> IO b) -> Maybe a -> b`.
2013-08-31 00:37:01	leroux	Something like that.
2013-08-31 00:37:02	FreeFull	leroux: You can do all possible IO using <$> and join
2013-08-31 00:37:08	leroux	I can do thsi with cases.
2013-08-31 00:37:09	FreeFull	Ah
2013-08-31 00:37:21	FreeFull	No, you can't do that
2013-08-31 00:37:21	leroux	I did, but I'd rather find a better way to do it.
2013-08-31 00:37:27	leroux	Oh.
2013-08-31 00:37:28	-->	nasarde (~user@OL203-132.fibertel.com.ar) has joined #haskell
2013-08-31 00:37:31	leroux	So, just stick with using a case?
2013-08-31 00:37:33	FreeFull	You could if it was IO b at the end
2013-08-31 00:37:41	leroux	Sure, IO b at the end.
2013-08-31 00:37:44	leroux	I'm doing this in a do.
2013-08-31 00:37:47	leroux	Sorry about that.
2013-08-31 00:37:50	-->	xinming (~xinming@125.87.84.67) has joined #haskell
2013-08-31 00:38:01	augur	byorgey: :)
2013-08-31 00:38:09	FreeFull	What do you want to happen if the function is given Nothing?
2013-08-31 00:38:18	leroux	I need to it return Nothing.
2013-08-31 00:38:20	chrisdone	donri: i quite liked spj's proposal, good to see this guy is going to do that
2013-08-31 00:38:20	monochrom	my question too. what if Nothing
2013-08-31 00:38:32	leroux	I'll paste my code, one sec.
2013-08-31 00:38:42	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 00:39:00	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-08-31 00:39:03	chrisdone	ski: (i really don't know ocaml, so sorry if that syntax is completely ass-backwards)
2013-08-31 00:39:09	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 00:39:10	mm_freak_	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:39:19	FreeFull	mm_freak_: I just wrote that
2013-08-31 00:39:34	<--	lurkorg (~alex@145.255.244.150) has quit (Quit: Leaving.)
2013-08-31 00:39:40	mm_freak_	FreeFull: didn't see it
2013-08-31 00:39:47	FreeFull	mm_freak_: I didn't send it before you did
2013-08-31 00:39:53	mm_freak_	ah =)
2013-08-31 00:39:56	mm_freak_	haha =P
2013-08-31 00:40:02	FreeFull	=P
2013-08-31 00:40:36	FreeFull	:t fmap (undefined :: a -> IO b) Nothing
2013-08-31 00:40:37	lambdabot	Maybe (IO b)
2013-08-31 00:40:38	<--	ski (~md9slj@t-2020-07.studat.chalmers.se) has quit (Ping timeout: 240 seconds)
2013-08-31 00:40:41	FreeFull	Hmm
2013-08-31 00:40:53	leroux	mm_freak_: Yeah, I need that.
2013-08-31 00:41:06	leroux	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:07	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Read error: Connection reset by peer)
2013-08-31 00:41:13	mm_freak_	:t T.traverse :: (a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:14	lambdabot	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:22	leroux	Ahh, cool.
2013-08-31 00:41:29	monochrom	God
2013-08-31 00:41:31	mm_freak_	import Data.Traversable (traverse)
2013-08-31 00:41:32	FreeFull	mm_freak_: There probably is some other way too
2013-08-31 00:41:43	<--	tel (~tel@209.249.230.2) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 00:42:02	myname_	what libraries do you prefer for data crunching on large text files? PCRE? ByteString? FFI?
2013-08-31 00:42:08	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 00:42:19	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 00:42:21	mm_freak_	myname_: depends on the type of data crunching
2013-08-31 00:42:23	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:42:33	myname_	just big text files with floats and ints in them
2013-08-31 00:42:44	mm_freak_	myname_: that doesn't really answer the question
2013-08-31 00:42:52	myname_	i mean in the general sense
2013-08-31 00:42:56	myname_	let's say
2013-08-31 00:43:12	lpaste	leroux pasted “No title” at http://lpaste.net/92341
2013-08-31 00:43:15	myname_	i want to add some numbers that start with a particular string
2013-08-31 00:43:21	chrisdone	the general sense is the problem, the choice depends on the particular
2013-08-31 00:43:24	myname_	and multiply with some other string
2013-08-31 00:43:39	leroux	FreeFull: mm_freak_: http://lpaste.net/92341
2013-08-31 00:43:43	mm_freak_	myname_: this is really two steps:  the parsing and the handling
2013-08-31 00:43:55	leroux	Going to try traverse now.
2013-08-31 00:43:59	myname_	yes, for parsing, i can simply use String with regular expr
2013-08-31 00:44:05	myname_	but that is very slow
2013-08-31 00:44:34	myname_	or i can use ByteString's, but in the end the code looks too cluttered
2013-08-31 00:44:35	<--	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 00:44:44	bos	ok, code converted to lenses and StateT in not too much time, whew
2013-08-31 00:44:51	mm_freak_	myname_: for a small command line application it's easiest to use a lazy Text
2013-08-31 00:44:53	myname_	i was wondering if other people had experience
2013-08-31 00:44:54	chrisdone	if it's binary, or near binary, it can be ByteString with parsec with binary, cereal or attoparsec, or bytestring-based regexps. if it's text, you can use parsec with Text
2013-08-31 00:45:12	mm_freak_	attoparsec is fine if the grammar is more complicated than that
2013-08-31 00:45:33	myname_	i realized bytestring has integer parsing
2013-08-31 00:45:36	myname_	but not float parsing
2013-08-31 00:45:42	-->	rckrd (~root@c-03cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-08-31 00:45:45	mm_freak_	ByteString is a bad idea for text
2013-08-31 00:45:47	myname_	what would be easiest to parse floats?
2013-08-31 00:46:00	mm_freak_	the "easiest" in the literal sense is 'read'
2013-08-31 00:46:11	mm_freak_	> read "1.5e10" :: Double
2013-08-31 00:46:12	chrisdone	the text package has various number parsers
2013-08-31 00:46:12	lambdabot	  1.5e10
2013-08-31 00:46:14	myname_	definitely, but "read" is very slow
2013-08-31 00:46:15	chrisdone	http://hackage.haskell.org/packages/archive/text/0.11.3.1/doc/html/Data-Text-Read.html
2013-08-31 00:46:22	myname_	on text
2013-08-31 00:46:35	myname_	if the text had integers
2013-08-31 00:46:45	myname_	i would definitely use bytestring, which is significantly faster
2013-08-31 00:46:56	myname_	but with floats in them, do i have to write my own parser?
2013-08-31 00:46:57	mm_freak_	myname_: first find a good package for parsing numbers…  then my personal way would be to embed the parser in a pipes Pipe
2013-08-31 00:47:33	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 00:47:44	myname_	is there a reason why bytestring doesn't support float parsing?
2013-08-31 00:47:44	bos	myname_: if you need to parse doubles very efficiently, use the double-conversion package
2013-08-31 00:47:47	mm_freak_	myname_: and no, ByteString is not significantly faster than Text
2013-08-31 00:47:59	myname_	i've tried several things
2013-08-31 00:48:02	bos	myname_: parsing doubles is very very complicated
2013-08-31 00:48:03	myname_	it worked pretty fast for me
2013-08-31 00:48:04	mm_freak_	it's slightly faster and the difference will be shadowed by I/O speed
2013-08-31 00:48:07	myname_	about 5x
2013-08-31 00:48:13	--	clahey is now known as cl_away
2013-08-31 00:48:26	mm_freak_	5x compared to what?
2013-08-31 00:48:30	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 264 seconds)
2013-08-31 00:48:30	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-08-31 00:48:40	shachaf	bos: Is that a UPS pun of some sort?
2013-08-31 00:48:42	myname_	read with regular strings
2013-08-31 00:48:51	bos	shachaf: what?
2013-08-31 00:48:51	mm_freak_	myname_: again, i'm talking about Text, not String
2013-08-31 00:48:58	shachaf	"double conversion". I guess not.
2013-08-31 00:48:59	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-08-31 00:49:03	monochrom	String is known to be fat and slow
2013-08-31 00:49:10	<--	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has quit (Ping timeout: 256 seconds)
2013-08-31 00:49:14	<--	sferry_ (~samuel@143.226.94.218) has quit (Quit: This computer has gone to sleep)
2013-08-31 00:49:51	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 00:49:57	<--	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has quit (Quit: WeeChat 0.4.0)
2013-08-31 00:50:28	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-08-31 00:50:35	applicative	can i tell "ghc -e" to bring a module in scope?
2013-08-31 00:50:42	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 00:50:46	myname_	i hadn't seen Text in use before!
2013-08-31 00:50:55	myname_	is it as general as String
2013-08-31 00:50:55	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-08-31 00:50:58	chrisdone	yes
2013-08-31 00:50:59	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 00:51:10	chrisdone	everyone serious uses text these days
2013-08-31 00:51:17	mm_freak_	myname_: strict Text is not, but lazy Text is
2013-08-31 00:51:27	-->	desc|zenbook (~heh@120.141.196.237) has joined #haskell
2013-08-31 00:51:30	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 00:51:33	myname_	with Double, Int parsing, and support for regular expression libraries?
2013-08-31 00:51:37	mm_freak_	i think lazy Text and String are isomorphic
2013-08-31 00:51:44	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 240 seconds)
2013-08-31 00:51:52	myname_	nice
2013-08-31 00:51:55	mm_freak_	myname_: not sure what library to use for Double parsing, but otherwise yes
2013-08-31 00:52:16	chrisdone	i suppose it depends on the doubles in question
2013-08-31 00:52:17	bos	mm_freak_: text
2013-08-31 00:52:22	<--	kttm (~kttm@p57954141.dip0.t-ipconnect.de) has quit (Quit: leaving)
2013-08-31 00:52:44	chrisdone	if you know that the format ahead of time is trivial in all cases, your parser can be straight-forward
2013-08-31 00:52:47	mm_freak_	Data.Text.Read
2013-08-31 00:52:48	mm_freak_	hah!
2013-08-31 00:52:51	mm_freak_	bos: thanks =)
2013-08-31 00:52:53	myname_	so is there no function that would do: read :: String -> Double
2013-08-31 00:52:59	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-08-31 00:53:04	myname_	oh the read
2013-08-31 00:53:06	myname_	ok
2013-08-31 00:53:19	chrisdone	i kinda linked that above
2013-08-31 00:53:20	applicative	https://github.com/bos/text/blob/master/Data/Text/Read.hs
2013-08-31 00:53:21	shachaf	mm_freak_: Nearly.
2013-08-31 00:53:25	<--	sm (~user@li229-222.members.linode.com) has quit (Remote host closed the connection)
2013-08-31 00:53:30	shachaf	Well, it depends on what you mean by isomorphic.
2013-08-31 00:53:43	shachaf	There's a bijection, of course, but Text can't hold the same Chars as String.
2013-08-31 00:53:45	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-08-31 00:53:45	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-08-31 00:53:57	shachaf	(In particular a String can have the invalid UTF-16 codepoints like U+D800.)
2013-08-31 00:54:01	bos	that's because String and Char are in a state of sin
2013-08-31 00:54:04	<--	jdegoes (~jdegoes@70-91-169-68-BusName-Colorado.hfc.comcastbusiness.net) has quit (Quit: jdegoes)
2013-08-31 00:54:10	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-08-31 00:54:15	mm_freak_	shachaf: can it?  how?
2013-08-31 00:54:19	shachaf	> '\xd800'
2013-08-31 00:54:20	lambdabot	  '\55296'
2013-08-31 00:54:21	myname_	are there any tutorials on Text on the wikis?
2013-08-31 00:54:22	shachaf	bos: Agreed.
2013-08-31 00:54:32	mm_freak_	> T.singleton '\xd800'
2013-08-31 00:54:33	lambdabot	  Not in scope: `T.singleton'
2013-08-31 00:54:33	lambdabot	 Perhaps you meant one of these:
2013-08-31 00:54:33	lambdabot	   `M.singleto...
2013-08-31 00:54:36	bos	"sortamorphic"
2013-08-31 00:54:37	 *	applicative had not thought Char had undone so many
2013-08-31 00:54:39	mm_freak_	> Data.Text.singleton '\xd800'
2013-08-31 00:54:40	lambdabot	  Not in scope: `Data.Text.singleton'
2013-08-31 00:54:41	chrisdone	myname_: the documentation is insufficient?
2013-08-31 00:54:46	myname_	i saw many on regular String's and some for performance on ByteStrings but not for Text
2013-08-31 00:55:03	shachaf	lambdabot doesn't import Text. :-(
2013-08-31 00:55:04	bos	myname_: it has almost the same API
2013-08-31 00:55:14	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 00:55:21	mm_freak_	shachaf: that's accepted here in GHCi
2013-08-31 00:55:21	shachaf	Anyway, Text uses UTF-16, so it can't directly represent these.
2013-08-31 00:55:26	shachaf	mm_freak_: "accepted" how?
2013-08-31 00:55:28	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 00:55:37	mm_freak_	it gives nonsense back though
2013-08-31 00:55:42	mm_freak_	"\65533"
2013-08-31 00:55:42	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 00:55:51	shachaf	Right.
2013-08-31 00:55:54	bos	that's not nonsense, it's the unicode replacement character
2013-08-31 00:55:56	myname_	is it as similar as simply replacing ":: String" with ":: Text"?
2013-08-31 00:56:08	monochrom	applicative: I tried a few things unsuccessfully. you probably have to make do with the like of ghc -e "Data.Char.chr 120"
2013-08-31 00:56:12	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-08-31 00:56:14	mm_freak_	myname_: not really…  you use Text almost like you use ByteString
2013-08-31 00:56:15	chrisdone	bos: text's is 3x nicer because it has fromStrict/toStrict
2013-08-31 00:56:19	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 00:56:24	mm_freak_	import qualified Data.Text as T
2013-08-31 00:56:27	<--	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:56:40	applicative	with {-#LANGUAGE OverloadedStrings #-} and the usual qualified imports its'a little like that myname_
2013-08-31 00:56:41	lispy	I thought ByteString had thos enow
2013-08-31 00:56:58	applicative	it does
2013-08-31 00:57:00	lispy	@hoogle fromStrict
2013-08-31 00:57:01	lambdabot	Data.ByteString.Lazy fromStrict :: ByteString -> ByteString
2013-08-31 00:57:01	lambdabot	Data.ByteString.Lazy.Char8 fromStrict :: ByteString -> ByteString
2013-08-31 00:57:01	lambdabot	Data.Text.Lazy fromStrict :: Text -> Text
2013-08-31 00:57:06	shachaf	Pray, Mr. O'Sullivan, if you put into the Text wrong figures, will the right answers come out?
2013-08-31 00:57:07	chrisdone	oh, seems that bytestring has them
2013-08-31 00:57:07	mm_freak_	myname_: to make your life easier follow applicative's suggestion and also use the Monoid interface
2013-08-31 00:57:09	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:57:11	chrisdone	yeah
2013-08-31 00:57:19	mm_freak_	> "abc" <> "def"
2013-08-31 00:57:20	lambdabot	  "abcdef"
2013-08-31 00:57:23	mm_freak_	works with Text as well
2013-08-31 00:57:34	<--	pantech (~pantech@178-191-40-119.adsl.highway.telekom.at) has quit (Quit: Verlassend)
2013-08-31 00:57:35	bos	the "<>" operator is pronounched "fishsticks"
2013-08-31 00:57:35	myname_	ok, i guess i'll need to try a few examples
2013-08-31 00:57:39	monochrom	haha shachaf
2013-08-31 00:57:39	lispy	> text "abc" <> text "def"
2013-08-31 00:57:40	lambdabot	  abcdef
2013-08-31 00:57:45	myname_	thanks!
2013-08-31 00:57:47	mm_freak_	:t text
2013-08-31 00:57:48	lambdabot	String -> Doc
2013-08-31 00:57:54	myname_	so how do i upvote again?
2013-08-31 00:57:58	bos	we need a "><>" operator too
2013-08-31 00:58:00	chrisdone	lispy: it used to kill me inside using fromChunks/toChunks
2013-08-31 00:58:04	leroux	How should I simplify this? http://lpaste.net/92341
2013-08-31 00:58:06	mm_freak_	myname_: nickname++
2013-08-31 00:58:08	myname_	mm_freak_++
2013-08-31 00:58:19	mm_freak_	@karma c
2013-08-31 00:58:19	lambdabot	c has a karma of 1
2013-08-31 00:58:21	lispy	chrisdone: Yeah, and it was poorly motivated
2013-08-31 00:58:28	myname_	applicative++
2013-08-31 00:58:30	mm_freak_	c++ hasn't been written?
2013-08-31 00:58:33	mm_freak_	@karma c
2013-08-31 00:58:33	lambdabot	c has a karma of 1
2013-08-31 00:58:36	Iceland_jack	bos: Yes we need more operators whose function cannot be inferred by their names! :)
2013-08-31 00:58:37	mcstar	i bet bos deserves a ++ too
2013-08-31 00:58:38	lispy	chrisdone: It was an intentional omission to get people to not ping-pong between the two
2013-08-31 00:58:45	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Read error: No route to host)
2013-08-31 00:59:10	mm_freak_	myname_: most of us don't really care about virtual karma though =)
2013-08-31 00:59:16	FreeFull	bos: I always pronounced <> mappend
2013-08-31 00:59:22	chrisdone	lispy: understandable
2013-08-31 00:59:28	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-08-31 00:59:31	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 00:59:34	monochrom	bos++
2013-08-31 00:59:38	mm_freak_	mm_freak_--
2013-08-31 00:59:41	mm_freak_	mm_freak++
2013-08-31 00:59:59	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:00:05	applicative	'mappend' is so horrible i'll take any operator
2013-08-31 01:00:09	lispy	at one point java++ was an easter egg that would decrease your karma :)
2013-08-31 01:00:19	lispy	?karma c
2013-08-31 01:00:19	lambdabot	c has a karma of 1
2013-08-31 01:00:40	mm_freak_	@karma C++
2013-08-31 01:00:40	lambdabot	C++ has a karma of -2
2013-08-31 01:00:42	mm_freak_	@karma C
2013-08-31 01:00:42	lambdabot	C has a karma of 1
2013-08-31 01:00:45	mm_freak_	lol
2013-08-31 01:00:47	applicative	i used to write (<>)=mappend; o = mempty but of course it was untenable
2013-08-31 01:00:48	--	DarkFox is now known as darknfoxx
2013-08-31 01:00:52	--	DarkNFoxy is now known as DarkFox
2013-08-31 01:00:56	<--	myname_ (~yyetim@sat.ee.Princeton.EDU) has quit (Quit: Lost terminal)
2013-08-31 01:00:59	--	darknfoxx is now known as DarkNFoxy
2013-08-31 01:01:05	mm_freak_	how come C++ has a lower karma than C?
2013-08-31 01:01:17	lispy	mm_freak_: have you used it? :)
2013-08-31 01:01:23	applicative	hahahahaha
2013-08-31 01:01:24	mm_freak_	lispy: sure
2013-08-31 01:01:27	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-08-31 01:01:31	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 01:01:35	applicative	lispy++
2013-08-31 01:01:59	monochrom	applicative: consider ^|{-><< :)
2013-08-31 01:02:13	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 01:02:15	mm_freak_	while both are a pain, C++ is less of a pain than C =)
2013-08-31 01:02:17	monochrom	err, I have an invalid { there. nevermind
2013-08-31 01:02:58	lispy	mm_freak_: I'd rather use C sparingly and when I need it and then skip over C++ for some proper high level language when I don't actually need C
2013-08-31 01:03:11	applicative	'unterminated {-' is the error ...
2013-08-31 01:03:20	lpaste	chrisdone annotated “No title” with “leroux” at http://lpaste.net/92341#a92343
2013-08-31 01:03:20	-->	chord (322f530e@gateway/web/freenode/ip.50.47.83.14) has joined #haskell
2013-08-31 01:03:30	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:4d00:e79a:249d:93cd) has quit (Ping timeout: 264 seconds)
2013-08-31 01:03:41	chord	why isn't haskell dominating against erlang, clojure, lisp, etc.
2013-08-31 01:03:53	applicative	it crushes them all
2013-08-31 01:03:54	monochrom	why do I care
2013-08-31 01:04:07	lispy	chord: please elaborate
2013-08-31 01:04:14	applicative	chord: have you ever looked at any erlang???
2013-08-31 01:04:19	Iceland_jack	No please don't, we don't need a language war
2013-08-31 01:04:19	leroux	chrisdone: Thanks! I got it down to 4 lines with traverse... but now I'll use what you pasted.
2013-08-31 01:04:23	monochrom	but to answer: it surely dominates. in my home directory.
2013-08-31 01:04:25	<--	shintah (bebble@h-123-170-194.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-08-31 01:04:28	leroux	chrisdone++
2013-08-31 01:04:37	 *	chrisdone beams
2013-08-31 01:04:40	-->	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has joined #haskell
2013-08-31 01:04:59	chord	you guys agree theres going to be a revival of functional programming because of multicore?
2013-08-31 01:05:05	chord	so which language will riseL?
2013-08-31 01:05:15	chrisdone	a revival implies there was a death
2013-08-31 01:05:24	chrisdone	and some kind of life in the past
2013-08-31 01:05:25	monochrom	I declare this off-topic.
2013-08-31 01:05:29	lispy	I think the revival has already started and I don't think multicore will play the role that has been hyped
2013-08-31 01:05:46	lispy	good point, #haskell-blah?
2013-08-31 01:06:14	mcstar	#haskell-functional-revival
2013-08-31 01:06:15	fylwind	nominolo: thanks for creating the account :)
2013-08-31 01:06:17	applicative	chord: anyway we love those other languages you mention.
2013-08-31 01:06:21	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:06:43	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-08-31 01:07:08	<--	napping (~brandon@qchost236-138.cs.illinois.edu) has quit (Quit: leaving)
2013-08-31 01:07:12	-->	tel (~tel@c-71-206-33-51.hsd1.md.comcast.net) has joined #haskell
2013-08-31 01:07:14	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-08-31 01:07:25	chord	if you need high multicore performance which language do you use
2013-08-31 01:07:35	mcstar	c++ + openmp
2013-08-31 01:07:42	<--	heruur (~tvh@2a00:12d0:a101:6f01:223:14ff:fe98:9164) has quit (Ping timeout: 264 seconds)
2013-08-31 01:07:46	lispy	I have friends that code in erlang and they're good people. Very hard working.
2013-08-31 01:07:55	chrisdone	lispy: lol
2013-08-31 01:07:57	c_wraith	lispy: that sounds like an insult
2013-08-31 01:07:57	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 01:08:13	chrisdone	lispy: "i'm not languagist, hell, some of my _friends_ are erlang programmers!"
2013-08-31 01:08:14	chord	mcstar really we still sticking with C++?
2013-08-31 01:08:21	mcstar	i am
2013-08-31 01:08:22	lispy	chrisdone: :)
2013-08-31 01:08:23	<--	hexagoxel (~hexagoxel@kiel-5f77b653.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:09:14	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-08-31 01:09:33	applicative	chord, I use erlang then http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&lang=ghc&lang2=erlang&data=u64q
2013-08-31 01:09:35	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-08-31 01:09:53	-->	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 01:10:01	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:10:07	chord	mcstar give me an answer that doesn't requier c++ pain
2013-08-31 01:10:35	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-08-31 01:10:59	mcstar	pain?
2013-08-31 01:11:03	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 01:11:19	chord	you like C++ ?
2013-08-31 01:11:22	fylwind	it is kinda painful after using a language like haskell
2013-08-31 01:11:28	-->	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 01:11:32	mcstar	yes, more or less
2013-08-31 01:11:37	chord	WOW
2013-08-31 01:11:41	applicative	dunno that c++ is looking pretty good, its like almost 3x as fast as haskell and oh so safe http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&lang=ghc&lang2=gpp&data=u64q
2013-08-31 01:11:45	lispy	I've given up on explaining why I use haskell in terms of technical reasons. These days I simply tell people, "I enjoy programming in Haskell." Yes, it's that simple. Programming with haskell is enjoyable.
2013-08-31 01:11:47	<--	litherum (~Adium@2620:149:4:1b01:2d59:1365:a9cf:e96) has quit (Quit: Leaving.)
2013-08-31 01:11:58	applicative	it's beautiful
2013-08-31 01:12:05	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 01:12:19	applicative	it's unbelievable, really.
2013-08-31 01:12:31	mm_freak_	lispy: problem is that you can't use haskell everywhere
2013-08-31 01:12:42	mm_freak_	when i have a choice between C and C++, i choose C++
2013-08-31 01:12:51	lpaste	chrisdone annotated “No title” with “golfing” at http://lpaste.net/92341#a92344
2013-08-31 01:13:21	lispy	mm_freak_: When it comes down to C or C++ for me I usually don't get to choose :)
2013-08-31 01:13:25	mcstar	i really think the 'one language to rule them all' attitude is counterproductive
2013-08-31 01:13:31	[swift]	i find that a conversation about the benefits and drawbacks of haskell is not much fun unless the other person is familiar with some sort of ML-like language or at least some sort of lisp
2013-08-31 01:13:35	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-08-31 01:13:54	applicative	one idris to rule them all
2013-08-31 01:13:59	mm_freak_	mcstar: but haskell currently rules them all, as long as you can compile it to the target architecture =P
2013-08-31 01:14:00	-->	litherum (~Adium@2620:149:4:1b01:c09:6649:b470:14b4) has joined #haskell
2013-08-31 01:14:00	Sonarpulse	^ YES
2013-08-31 01:14:04	Sonarpulse	idris
2013-08-31 01:14:06	chrisdone	idchris
2013-08-31 01:14:10	chrisdone	:3
2013-08-31 01:14:20	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 01:14:24	lispy	idchris :: Chris -> Chris
2013-08-31 01:14:26	mm_freak_	idris has the potential to rule them all, but it doesn't yet =)
2013-08-31 01:14:29	chrisdone	:p
2013-08-31 01:14:30	FreeFull	Lisp is very far from the ML world
2013-08-31 01:14:40	<--	ivoscc (~ivo@190.40.183.198) has quit (Ping timeout: 256 seconds)
2013-08-31 01:14:55	Sonarpulse	I asked earlier, do you all think Haskell will have dependant types in 10 years?
2013-08-31 01:14:57	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 01:14:59	chrisdone	lisp belongs in the python, ruby camp
2013-08-31 01:15:00	chord	so why do people choose lisp or erlang over haskell?
2013-08-31 01:15:01	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 01:15:01	<--	wolfnn (~wolfnn@90.24.131.251) has quit (Ping timeout: 245 seconds)
2013-08-31 01:15:05	mm_freak_	Sonarpulse: unlikely
2013-08-31 01:15:11	chrisdone	chord: they do?
2013-08-31 01:15:14	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 01:15:17	applicative	they do??
2013-08-31 01:15:19	mcstar	'who knows such things? only the Oracle'
2013-08-31 01:15:25	mm_freak_	chord: erlang has a problem domain haskell currently doesn't solve
2013-08-31 01:15:31	FreeFull	chrisdone: Lisp isn't really like python or ruby either
2013-08-31 01:15:36	Sonarpulse	distributed process?
2013-08-31 01:15:37	mm_freak_	but why people choose lisp?  no idea
2013-08-31 01:15:40	mm_freak_	ask paul graham
2013-08-31 01:15:52	fylwind	do you include "scheme" under lisp?
2013-08-31 01:16:01	chrisdone	Sonarpulse: i presume you mean full dependent types, not limited or some subset. it could have them today, but do you want full dependent types?
2013-08-31 01:16:08	Sonarpulse	I feel idris and agda and epigram will pull haskell in that direction
2013-08-31 01:16:10	mm_freak_	fylwind: i referred to common lisp
2013-08-31 01:16:10	lispy	It was fun to have abit of off-topic discussion, but we should probably get back to Haskell.
2013-08-31 01:16:11	chirpsalot	mm_freak_: if you want to implement a language lispy ones are great :P
2013-08-31 01:16:19	Sonarpulse	lest Haskell go the fate of OCaml
2013-08-31 01:16:27	mm_freak_	chirpsalot: eager/strict lispy ones are
2013-08-31 01:16:29	fylwind	mm_freak_: ah, the uglier of the siblings :)
2013-08-31 01:16:30	FreeFull	Scheme is more lisp than lisp
2013-08-31 01:16:32	mcstar	ppl just want to program their algorithms, irrespective or typing, and they dont care much about ahead-of-time verfication
2013-08-31 01:16:41	mcstar	of*
2013-08-31 01:16:43	thr33strikes	just installed cabal and did an update, will that alone give me access to the module System
2013-08-31 01:16:46	chrisdone	FreeFull: lisp is far more similar to python and ruby than ml
2013-08-31 01:16:49	chord	mcstar until it deletes your harddrive
2013-08-31 01:16:59	mcstar	haskell can do that too
2013-08-31 01:17:05	applicative	emacs --execute "(print (+ 1 2 3))"
2013-08-31 01:17:08	lispy	thr33strikes: You mean access to hackage?
2013-08-31 01:17:11	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-08-31 01:17:15	mm_freak_	in fact GHC used to delete your source file when you had a type error
2013-08-31 01:17:16	FreeFull	chrisdone: I'd say it simply stands on its own
2013-08-31 01:17:20	chrisdone	FreeFull: dynamically, strongly typed, imperative, interpreted culture
2013-08-31 01:17:29	mm_freak_	http://www.reddit.com/r/haskell/comments/127emo/brian_osullivans_favorite_bug_in_ghc/
2013-08-31 01:17:36	thr33strikes	does hackage include the System module?
2013-08-31 01:17:43	chrisdone	FreeFull: the only differences i can think of is the syntax and macrology culture. can you think of other differences?
2013-08-31 01:17:55	applicative	thr33strikes: I think you are looking at an old tutorial?
2013-08-31 01:17:58	mm_freak_	thr33strikes: there is no System module
2013-08-31 01:17:58	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 01:18:05	FreeFull	thr33strikes: System was part of haskell 98 but isn't in the newer standard
2013-08-31 01:18:12	-->	wavewave (2efdbc23@gateway/web/freenode/ip.46.253.188.35) has joined #haskell
2013-08-31 01:18:12	chirpsalot	mm_freak_: it was just so offended that you would feed it such an ill-typed program :).
2013-08-31 01:18:20	thr33strikes	what took it's place?
2013-08-31 01:18:21	lispy	thr33strikes: ah, I misunderstood your question.
2013-08-31 01:18:27	mm_freak_	=)
2013-08-31 01:18:31	applicative	thr33strikes: I think it's broken up
2013-08-31 01:18:35	-->	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has joined #haskell
2013-08-31 01:18:37	lispy	thr33strikes: what thing do you need from System? We can use hoogle to find it
2013-08-31 01:18:41	lispy	?hoogle getArgs
2013-08-31 01:18:41	lambdabot	System.Environment getArgs :: IO [String]
2013-08-31 01:18:41	lambdabot	System.Posix.Env.ByteString getArgs :: IO [ByteString]
2013-08-31 01:18:41	lambdabot	Graphics.UI.GLUT.Initialization getArgsAndInitialize :: IO (String, [String])
2013-08-31 01:18:45	<--	Croms (~dv@92.109.224.112) has quit (Ping timeout: 245 seconds)
2013-08-31 01:18:45	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 245 seconds)
2013-08-31 01:18:45	leroux	chrisdone: How can I change it from [a] to a?
2013-08-31 01:18:48	applicative	thr33strikes: if you specify haskell 98 it will understand you
2013-08-31 01:18:49	leroux	I don't need that forM...
2013-08-31 01:18:56	chrisdone	leroux: `it'?
2013-08-31 01:18:59	leroux	Uhh.
2013-08-31 01:19:02	-->	ecube_ (~ecube@unaffiliated/ecube) has joined #haskell
2013-08-31 01:19:02	leroux	http://lpaste.net/92341#a92343
2013-08-31 01:19:04	wavewave	hi
2013-08-31 01:19:20	applicative	thr33strikes: what is the module your are looking at, that imports System? can you paste it?
2013-08-31 01:19:21	leroux	file is a Maybe FilePath
2013-08-31 01:19:25	chrisdone	leroux: ?
2013-08-31 01:19:29	applicative	hi wavewave
2013-08-31 01:19:31	chrisdone	mhm
2013-08-31 01:19:38	mm_freak_	leroux: if you need a specific piece of functionality it is always a good idea to write its type first
2013-08-31 01:19:43	mm_freak_	is [a] -> a what you want?
2013-08-31 01:19:52	wavewave	applicative: hi hi
2013-08-31 01:19:53	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-31 01:19:54	chrisdone	@djinn [a] -> a
2013-08-31 01:19:54	lambdabot	Error: Undefined type []
2013-08-31 01:19:59	chrisdone	bah, always forget about that
2013-08-31 01:20:05	--	ecube_ is now known as ecube
2013-08-31 01:20:05	chrisdone	djinn, learn some more stuff
2013-08-31 01:20:15	mm_freak_	let him figure out himself what's wrong with the type =)
2013-08-31 01:20:22	mcstar	:t head
2013-08-31 01:20:22	lambdabot	[a] -> a
2013-08-31 01:20:27	mcstar	thats a nice one
2013-08-31 01:20:29	leroux	Not head...
2013-08-31 01:20:34	mm_freak_	mcstar: call "spoiler alert" first
2013-08-31 01:20:37	chrisdone	mm_freak_: “that is why you will fail”
2013-08-31 01:20:40	mcstar	oh
2013-08-31 01:20:42	Sonarpulse	chrisdrone: does idris have "full dependent types"
2013-08-31 01:20:43	lispy	Tip for anyone using chrome: You can make a shortcut so that tying 'h foo' in the address bar does a hoogle search. In settings manage search engines and add an entry like this: http://www.haskell.org/hoogle/?hoogle=%s
2013-08-31 01:20:50	mm_freak_	Sonarpulse: yes
2013-08-31 01:20:52	applicative	Sonarpulse: !!!!
2013-08-31 01:20:53	thr33strikes	I was trying to use System.Directory
2013-08-31 01:20:59	Sonarpulse	just checking....
2013-08-31 01:21:05	geekosaur	thr33strikes, you already have it, but it's not accessible by default. You can force the comp-iler into haskell98 mode and then you'd have System. But then you'll have trouble using modern Haskell modules
2013-08-31 01:21:21	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 01:21:27	alexander__b	stephan boyer's functional programming intro with "fython" are quite nice
2013-08-31 01:21:32	applicative	ah, so you figured it out thr33strikes ?
2013-08-31 01:21:36	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-08-31 01:21:36	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-08-31 01:21:44	<--	tibbe (tibbe@nat/google/x-lrggyzhlzqihoyaw) has quit (Quit: tibbe)
2013-08-31 01:21:50	alexander__b	implements Maybe, List and Writer in a python-like language to help you understand them (and monads in general). I approve.
2013-08-31 01:21:53	fylwind	there's a quirk with the chrome search: if you type a search with the wRonG cAsing once, chrome will remember it and use it every time
2013-08-31 01:22:00	geekosaur	yeh
2013-08-31 01:22:14	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 01:22:15	chrisdone	Sonarpulse: there's a tension between the type system being powerful and not requiring you to provide it with proofs
2013-08-31 01:22:22	Sonarpulse	Sure
2013-08-31 01:22:23	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-08-31 01:22:31	thr33strikes	I'd like to stay modern but I was looking for a portable way to rename files within a directory
2013-08-31 01:22:51	Sonarpulse	I would say keep "System F Haskell" and "System FC Haskell"  as langauge subsets
2013-08-31 01:22:58	Sonarpulse	for those that really care about type inference
2013-08-31 01:22:59	thr33strikes	I could sit here and hack away at it but I'm sure it's an easy lib command
2013-08-31 01:23:04	lispy	fylwind: heh
2013-08-31 01:23:06	mm_freak_	my experience with agda is that you don't really have to /write/ type signatures…  you only tell, "here is the type signature, figure out its content", and most of the time it works
2013-08-31 01:23:10	lpaste	leroux pasted “filePerms” at http://lpaste.net/92345
2013-08-31 01:23:18	applicative	thr33strikes: you can just give the modules the name of the files and they will compile together thr33strikes
2013-08-31 01:23:22	mm_freak_	idris might follow a similar path as soon as we have a good emacs mode for it =)
2013-08-31 01:23:34	chrisdone	don't tempt me
2013-08-31 01:23:35	leroux	chrisdone: If you could, take a look at filePerms.
2013-08-31 01:23:43	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 01:23:44	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:23:51	lispy	mm_freak_: you put holes in the type signatures?
2013-08-31 01:23:58	lispy	mm_freak_: is that what you mean?
2013-08-31 01:24:00	 *	applicative started using idris first to escape emacs
2013-08-31 01:24:07	mm_freak_	lispy: either that or this:  f : _ → _ → _
2013-08-31 01:24:13	 *	applicative then realized it was better anyway
2013-08-31 01:24:38	mm_freak_	depending on whther i'm planning to write the type signature or just leave it with placeholders
2013-08-31 01:25:04	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 01:25:06	lispy	mm_freak_: oh, I hadn't thought of using wild cards. So then can you C-c C-. f <RET> to find out the type of f?
2013-08-31 01:25:14	<--	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 01:25:14	mm_freak_	applicative: depending on what you mean by "better"
2013-08-31 01:25:18	mm_freak_	agda is better for theorem proving
2013-08-31 01:25:22	fl00r	is there a way to zip two lists but keep the rest of the longer one?
2013-08-31 01:25:24	Sonarpulse	Did the idris people ever plan on forking GHC instead of writing their own compiler?
2013-08-31 01:25:27	thr33strikes	seemed like the System.Directory was easy to use already,  I'm sure there is a good reason why it was removed.  I'm just too new to know why, can anyone answer?
2013-08-31 01:25:52	applicative	agda does have any 'theorem proving' support
2013-08-31 01:25:55	applicative	doesnt
2013-08-31 01:26:02	chord	you guys need to work on GHC to make it generate code that beats C++ in the benchmarks
2013-08-31 01:26:12	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 01:26:12	mm_freak_	lispy: what does that command do?
2013-08-31 01:26:20	mcstar	't <== f means "apply f with arguments such that it returns a value of type t"' omg, witchcraft
2013-08-31 01:26:26	applicative	Sonarpulse: the compiler is totally different; it already writes java javascript you name it
2013-08-31 01:26:38	Sonarpulse	as target langauge?
2013-08-31 01:26:45	Sonarpulse	interesting
2013-08-31 01:26:54	applicative	mm_freak_: idris is *way* better for actual 'theorem proving'
2013-08-31 01:27:01	Sonarpulse	well my point is there if Idris does become the one lanague to rule them all
2013-08-31 01:27:02	ion	java{,script}
2013-08-31 01:27:06	applicative	i don't actually see any use for agda at all
2013-08-31 01:27:15	Sonarpulse	it would be a shame to throw away all the work that went into GHC
2013-08-31 01:27:23	applicative	except for -without-K
2013-08-31 01:27:35	mm_freak_	applicative: does it allow coinductive proofs?
2013-08-31 01:27:47	-->	Beetny (~Beetny@ppp118-208-158-9.lns20.bne1.internode.on.net) has joined #haskell
2013-08-31 01:27:51	-->	ryant50001 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-31 01:27:55	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 01:28:08	mm_freak_	i mean proper coinduction using codata or guards…  coinduction that doesn't allow you to prove false
2013-08-31 01:28:12	lispy	mm_freak_: Isn't that the command that normalizes a term?
2013-08-31 01:28:30	applicative	codata are built into idris from the bottom up
2013-08-31 01:28:31	mm_freak_	lispy: i don't know…  the set of commands i use is very limited =)
2013-08-31 01:28:48	mm_freak_	applicative: that's not the question
2013-08-31 01:28:49	lispy	mm_freak_: what I'm trying to ask is: if you do that trick with _ then is there a way to ask agda to tell you what it inferred?
2013-08-31 01:28:58	mietek	Failed to install cryptocipher-0.3.1
2013-08-31 01:29:04	mietek	Anyone else?
2013-08-31 01:29:16	mm_freak_	lispy: good question…  i don't think so
2013-08-31 01:29:22	mm_freak_	well, yes
2013-08-31 01:29:25	mm_freak_	you can ask for the type of f
2013-08-31 01:29:43	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-08-31 01:29:45	 *	lispy should just try it
2013-08-31 01:30:04	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-08-31 01:30:16	mm_freak_	lispy: agda2-infer-type-toplevel
2013-08-31 01:30:24	mm_freak_	but it seems like it's not bound by default
2013-08-31 01:30:26	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 01:30:26	mietek	http://hackage.haskell.org/packages/archive/cryptocipher/0.3.1/logs/failure/ghc-7.4
2013-08-31 01:30:35	mietek	I'm in cabal hell again
2013-08-31 01:30:43	applicative	mm_freak_: define a function Stream a -> Stream a, where codata Stream a = Cons a (Stream a)
2013-08-31 01:30:47	<--	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has quit (Quit: Page closed)
2013-08-31 01:31:00	mietek	And this time, it's due to trying to install git-annex from a completely blank slate
2013-08-31 01:31:38	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:32:22	lispy	mm_freak_: C-c C-d
2013-08-31 01:32:27	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Quit: Leaving...)
2013-08-31 01:32:31	lispy	but it's just telling me f's type is metavariables
2013-08-31 01:32:54	<--	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 264 seconds)
2013-08-31 01:33:22	thr33strikes	am I forced to use the old System.Directory if I need to manipulate directory names
2013-08-31 01:33:24	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 01:33:31	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-08-31 01:33:42	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:35:02	mm_freak_	applicative: (xs : Stream Nat) -> AllEven xs -> AllEven (map (+ 2) xs)
2013-08-31 01:35:10	mm_freak_	would you trust such a proof in idris?
2013-08-31 01:35:16	geekosaur	thr33strikes, you were a little unclear before. System.Directory is current
2013-08-31 01:35:25	geekosaur	everything used to be jumbled into System before
2013-08-31 01:35:56	geekosaur	http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/directory-1.2.0.1/System-Directory.html
2013-08-31 01:36:03	thr33strikes	thanks
2013-08-31 01:36:10	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-08-31 01:36:13	jfischoff	what steps does cabal take to build with profiling when there is template haskell? I need to recreate the logic in make, anyone have an example make file that does a profiling build?
2013-08-31 01:37:49	-->	tyfighter (~tyfighter@c-98-210-65-59.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 01:37:57	monochrom	I think cabal just calls ghc with -prof -fauto-prof etc
2013-08-31 01:38:08	geekosaur	use cabal -v3 to watch what it does?
2013-08-31 01:38:13	-->	jodaro1 (~Adium@64.156.167.128) has joined #haskell
2013-08-31 01:38:32	monochrom	but yeah use cabal -v3 or maybe -v2 or -v1 to see for real
2013-08-31 01:39:01	-->	predator217 (~predator1@p50803C88.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 01:39:11	<--	DMcGill (~DMcGill@host-78-151-20-102.as13285.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:39:17	chrisdone	@let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just))
2013-08-31 01:39:17	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-08-31 01:39:33	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder
2013-08-31 01:39:33	lambdabot	(a1 -> a1 -> a) -> [a1] -> [a1] -> ([a], [a1])
2013-08-31 01:39:52	chrisdone	fl00r: behold, my creation
2013-08-31 01:39:56	chrisdone	ψ(｀∇´)ψ
2013-08-31 01:39:58	fl00r	holy...
2013-08-31 01:40:00	jfischoff	cool thanks guys
2013-08-31 01:40:03	 *	applicative is working on AllEven but must go, mm_freak_ 
2013-08-31 01:40:12	monochrom	you are to be congratulated. what does it do anyway? :)
2013-08-31 01:40:13	arkeet	you're a monster
2013-08-31 01:40:23	arkeet	> zipRemainder (,) [1,2] [3,4,5,6]
2013-08-31 01:40:23	mm_freak_	applicative: i'm not asking whether you can write the proof in idris — you can
2013-08-31 01:40:24	lambdabot	  Not in scope: `zipRemainder'
2013-08-31 01:40:30	chrisdone	> curry ((catMaybes.map(uncurry (liftM2 (,)))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) [1,2,3] [1,2,3,4,5]
2013-08-31 01:40:30	mm_freak_	applicative: i'm asking whether you can /trust/ the proof
2013-08-31 01:40:31	lambdabot	  ([(1,1),(2,2),(3,3)],[4,5])
2013-08-31 01:40:37	mm_freak_	applicative: because you can certainly prove false in idris
2013-08-31 01:40:47	arkeet	chrisdone: now make it work with two different input types
2013-08-31 01:41:03	fl00r	it's going to take me 2 hours to figure what it's doing
2013-08-31 01:41:04	fl00r	haha
2013-08-31 01:41:16	fl00r	impressive
2013-08-31 01:41:16	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Ping timeout: 245 seconds)
2013-08-31 01:41:24	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Read error: Connection reset by peer)
2013-08-31 01:41:29	applicative	mm_freak_: oh, thats what you're worried about; i would hope it wasn't so conservative you couldn't prove false every few minutes
2013-08-31 01:41:31	 *	monochrom likes the tone of "this software looks awesome! what problem does it solve anyway?"
2013-08-31 01:41:42	arkeet	@let import Data.These
2013-08-31 01:41:43	lambdabot	 .L.hs:102:1:
2013-08-31 01:41:43	lambdabot	     Failed to load interface for `Data.These'
2013-08-31 01:41:43	lambdabot	     Perhaps you...
2013-08-31 01:41:44	arkeet	=(
2013-08-31 01:42:06	monochrom	Perhaps you mean: Data.This, Data.That, Data.Those
2013-08-31 01:42:19	fylwind	what's ψ(｀∇´)ψ for?
2013-08-31 01:42:21	<--	NemesisD (~michael@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Quit: rage)
2013-08-31 01:42:24	mm_freak_	applicative: idris requires you to enable the termination checker, which is very conservative
2013-08-31 01:42:35	mm_freak_	applicative: my fear is that it may not handle coinductive proofs properly
2013-08-31 01:42:36	chrisdone	this is a common problem, there must be a zipWithRemainder thingie somewhere
2013-08-31 01:42:53	arkeet	chrisdone: check out Data.Align
2013-08-31 01:42:57	<--	predator117 (~predator1@p508027E6.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-08-31 01:43:03	applicative	mm_freak_: the track record of agda and coq can hardly be better ;)
2013-08-31 01:43:22	arkeet	not quite the same, perhaps
2013-08-31 01:43:30	mm_freak_	applicative: the difference is that idris doesn't even try ;)
2013-08-31 01:43:34	arkeet	alignWith :: (These a b -> c) -> f a -> f b -> f c
2013-08-31 01:43:40	applicative	mm_freak_: i have *much* more confidence in the principal developer
2013-08-31 01:43:47	mm_freak_	if you can prove false in agda, it's a major bug
2013-08-31 01:44:01	mm_freak_	in fact it will immediately become the highest priority bug
2013-08-31 01:44:25	mm_freak_	that's basically the difference between a "proof assistant" and a "programming language with dependent types" =)
2013-08-31 01:44:26	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in f
2013-08-31 01:44:26	lambdabot	FromExpr a => a
2013-08-31 01:44:33	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder
2013-08-31 01:44:34	lambdabot	(a1 -> a2 -> a) -> [a1] -> [a2] -> ([a], [a2])
2013-08-31 01:44:41	 *	hackagebot kevin 0.10.0 - a dAmn  IRC proxy  http://hackage.haskell.org/package/kevin-0.10.0 (JoelTaylor)
2013-08-31 01:44:46	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 01:44:49	arkeet	now what if I have more a1s than a2s
2013-08-31 01:44:53	applicative	mm_freak_: this is truly absurd but I must go
2013-08-31 01:44:57	chrisdone	arkeet: the same-type restriction acme from the on (&&) isJust
2013-08-31 01:45:01	monochrom	there hasn't been a prove-false incident for a long time, isn't that right?
2013-08-31 01:45:13	mm_freak_	monochrom: as far as i know, yes
2013-08-31 01:45:15	mm_freak_	applicative: have fun =)
2013-08-31 01:45:20	fl00r	i feel less embarrassed that i couldn't figure out how to do it now
2013-08-31 01:45:36	mcstar	it is way easier than chrisdone suggests
2013-08-31 01:45:41	-->	tac (~tac-tics@2602:306:bdb4:5100:cc7b:a920:f37c:78e3) has joined #haskell
2013-08-31 01:45:41	mcstar	you should just write it yourself
2013-08-31 01:45:42	monochrom	that's good to hear and more than good enough for me
2013-08-31 01:45:54	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-08-31 01:46:04	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 01:46:15	mm_freak_	i think the last bug was because of a collapsed universe
2013-08-31 01:46:19	mm_freak_	i.e. Type : Type
2013-08-31 01:46:32	mm_freak_	or rather Set : Set in agda terms
2013-08-31 01:46:54	chrisdone	fl00r: yeah i'm just messing around. a simple fold or basic recursion would give you the solution in short time
2013-08-31 01:46:54	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-08-31 01:47:16	fl00r	ok cool
2013-08-31 01:47:23	fl00r	thanks!
2013-08-31 01:47:38	deech	Hi all, I'm trying to get my Haskell library to statically link against a C library but so far have been unsuccessful. The output of `cabal build` is here: https://gist.github.com/deech/6395316
2013-08-31 01:48:07	mm_freak_	fl00r: what would be the type of such a function anyway?
2013-08-31 01:48:18	mm_freak_	because "keep the longer suffix" doesn't seem to make sense to me
2013-08-31 01:48:39	tel	arkeet isn't it just `partitionThese . align`?
2013-08-31 01:48:40	<--	Targen (~iguana@190.38.156.156) has quit (Ping timeout: 256 seconds)
2013-08-31 01:48:41	mcstar	([(a,a)],[a])
2013-08-31 01:49:21	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:49:25	fl00r	well i was thinking something like [a] -> [b] -> ([(a, b)], [a], [b])
2013-08-31 01:49:40	chrisdone	@data These a b = This a | That b | These a b
2013-08-31 01:49:40	lambdabot	Unknown command, try @list
2013-08-31 01:49:41	 *	hackagebot damnpacket 0.1.0.2 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.0.2 (JoelTaylor)
2013-08-31 01:49:50	chrisdone	what was the syntax
2013-08-31 01:49:58	arkeet	fl00r: that is (partitionTHese .) . align
2013-08-31 01:49:58	jmcarthur	fl00r: might as well be   [a] -> [b] -> ([(a,b)], Either [a] [b])
2013-08-31 01:50:12	geekosaur	"@let data ..."
2013-08-31 01:50:18	chrisdone	@let data These a b = This a | That b | These a b
2013-08-31 01:50:18	lambdabot	 Defined.
2013-08-31 01:50:21	chrisdone	kewl
2013-08-31 01:50:26	-->	edwardk_ (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 01:50:39	mm_freak_	:t \xs ys -> let zs = zip xs ys; n = length zs in (zs, drop n xs, drop n ys)
2013-08-31 01:50:40	lambdabot	[a] -> [a1] -> ([(a, a1)], [a], [a1])
2013-08-31 01:50:47	mm_freak_	write it properly though =)
2013-08-31 01:50:48	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-08-31 01:50:50	tel	arkeet I'm getting non-exhaustive patterns in partitionThese though
2013-08-31 01:50:54	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 01:50:55	--	edwardk_ is now known as edwardk
2013-08-31 01:50:59	arkeet	@let align xs [] = This <$> xs; align [] ys = That <$> ys; align (x:xs) (y:ys) = These x y : align xs ys
2013-08-31 01:50:59	lambdabot	 Defined.
2013-08-31 01:51:14	arkeet	tel: that's a bug!
2013-08-31 01:51:24	tel	!!
2013-08-31 01:51:29	fl00r	awesome...definitely will be able to figure it out now
2013-08-31 01:51:33	fl00r	thanks, everyone
2013-08-31 01:51:34	tel	this was just pulled from hackage
2013-08-31 01:51:37	chrisdone	mm_freak_: eww named variables =p
2013-08-31 01:51:40	arkeet	it's a bug in these!
2013-08-31 01:51:48	tel	arket :(
2013-08-31 01:51:52	tel	arkeet :(
2013-08-31 01:51:54	mm_freak_	chrisdone: eww arrows ;)
2013-08-31 01:51:57	chrisdone	needs moar golf
2013-08-31 01:52:00	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:52:12	jmcarthur	this is commonly desired enough that there should be a standard function for some variant of this
2013-08-31 01:52:16	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:52:21	mm_freak_	chrisdone: the named variables are for sharing
2013-08-31 01:52:21	arkeet	partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:25	arkeet	@let partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:26	lambdabot	 Defined.
2013-08-31 01:52:29	arkeet	oh crap.
2013-08-31 01:52:29	arkeet	I can't type.
2013-08-31 01:52:31	arkeet	@Undefine
2013-08-31 01:52:31	lambdabot	Undefined.
2013-08-31 01:52:32	tel	hah, I was just doing that
2013-08-31 01:52:33	 *	chrisdone golf claps to get everyone in the mood
2013-08-31 01:52:35	chrisdone	https://www.youtube.com/watch?v=sTHHjTV5PL0
2013-08-31 01:52:35	arkeet	@let partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:36	lambdabot	 .L.hs:143:17: Not in scope: data constructor `These'
2013-08-31 01:52:36	lambdabot	 
2013-08-31 01:52:36	lambdabot	 .L.hs:145:17: Not in...
2013-08-31 01:52:41	arkeet	@let partitionThese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:41	lambdabot	 .L.hs:143:17: Not in scope: data constructor `These'
2013-08-31 01:52:41	lambdabot	 
2013-08-31 01:52:41	lambdabot	 .L.hs:145:17: Not in...
2013-08-31 01:52:47	arkeet	ooops.
2013-08-31 01:52:49	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 01:53:00	arkeet	@let data These a b = This a | That b | These a b deriving (Eq,Show)
2013-08-31 01:53:01	lambdabot	 Defined.
2013-08-31 01:53:03	geekosaur	heh
2013-08-31 01:53:05	arkeet	@let align xs [] = This <$> xs; align [] ys = That <$> ys; align (x:xs) (y:ys) = These x y : align xs ys
2013-08-31 01:53:05	lambdabot	 Defined.
2013-08-31 01:53:08	arkeet	@let partitionThese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:53:09	lambdabot	 Defined.
2013-08-31 01:53:16	arkeet	:t (partitionThese.).align
2013-08-31 01:53:17	lambdabot	[a] -> [a1] -> ([(a, a1)], ([a], [a1]))
2013-08-31 01:53:18	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has left #haskell
2013-08-31 01:53:21	tel	@let (.:) = (.).(.)
2013-08-31 01:53:22	lambdabot	 Defined.
2013-08-31 01:53:26	tel	partitionThese .: align
2013-08-31 01:53:29	tel	:t partitionThese .: align
2013-08-31 01:53:29	lambdabot	[a] -> [a1] -> ([(a, a1)], ([a], [a1]))
2013-08-31 01:53:30	tel	:P
2013-08-31 01:53:45	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-08-31 01:53:53	arkeet	:t \f -> first (fmap f) . (partitionThese.) . align
2013-08-31 01:53:53	lambdabot	    Couldn't match type `(f0 a0, d0)'
2013-08-31 01:53:53	lambdabot	                  with `[a10] -> ([(a1, a10)], ([a1], [a10]))'
2013-08-31 01:53:53	lambdabot	    Expected type: ([a10] -> ([(a1, a10)], ([a1], [a10])))
2013-08-31 01:53:59	chrisdone	poor fl00r. i asked #haskell and all i got was this lousy lambdabot tshirt
2013-08-31 01:54:04	tel	> (partitionThese .: align) [1,2,3] [1,2]
2013-08-31 01:54:07	lambdabot	  ([(1,1),(2,2)],([3],[]))
2013-08-31 01:54:07	fl00r	haha
2013-08-31 01:54:13	arkeet	:t \f -> (first (fmap f) . partitionThese .) . align
2013-08-31 01:54:14	lambdabot	    The operator `.' [infixr 9] of a section
2013-08-31 01:54:14	lambdabot	        must have lower precedence than that of the operand,
2013-08-31 01:54:14	lambdabot	          namely `.' [infixr 9]
2013-08-31 01:54:16	arkeet	afggh
2013-08-31 01:54:23	arkeet	:t \f -> (first (fmap f) . partitionThese) .: align
2013-08-31 01:54:23	lambdabot	((a, a1) -> b) -> [a] -> [a1] -> ([b], ([a], [a1]))
2013-08-31 01:54:33	mm_freak_	ok, this is annoying…  i'm returning to my editor =)
2013-08-31 01:54:35	arkeet	:t \f -> (first (fmap $ curry f) . partitionThese) .: align
2013-08-31 01:54:36	lambdabot	(((a, a1), b) -> c) -> [a] -> [a1] -> ([b -> c], ([a], [a1]))
2013-08-31 01:54:39	arkeet	nope.
2013-08-31 01:54:41	 *	hackagebot damnpacket 0.1.0.3 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.0.3 (JoelTaylor)
2013-08-31 01:54:45	arkeet	:t \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:54:45	lambdabot	(a -> a1 -> b) -> [a] -> [a1] -> ([b], ([a], [a1]))
2013-08-31 01:54:57	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 01:55:07	chrisdone	arkeet: take your fail to /msg lambdabot, only great success may be displayed herein =p
2013-08-31 01:55:13	arkeet	but I'm done.
2013-08-31 01:55:25	<--	tel (~tel@c-71-206-33-51.hsd1.md.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 01:55:29	chrisdone	that's what she said
2013-08-31 01:55:33	jmcarthur	but you named f
2013-08-31 01:55:35	 *	chrisdone regrets
2013-08-31 01:55:37	<--	Eduard_Munteanu (~EduardMun@188.25.6.153) has quit (Ping timeout: 246 seconds)
2013-08-31 01:55:44	jmcarthur	chrisdone: fail
2013-08-31 01:55:46	chrisdone	jmcarthur: hahaha
2013-08-31 01:56:02	chrisdone	@unpl \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:56:02	lambdabot	\ f -> (\ c -> first (fmap (uncurry f)) (partitionThese c)) .: align
2013-08-31 01:56:07	chrisdone	@pl \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:56:10	lambdabot	(.: align) . flip ((.) . first . (fmap $) . uncurry) partitionThese
2013-08-31 01:56:10	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-31 01:56:20	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:56:28	arkeet	@let zipRemainder f = (partitionEithers .) . zipWIth (\a b -> maybe (Left b) (Right . (f ?? b)) a) . (++ repeat Nothing) . map Just
2013-08-31 01:56:29	lambdabot	 .L.hs:160:7:
2013-08-31 01:56:29	lambdabot	     Not in scope: `zipWIth'
2013-08-31 01:56:29	lambdabot	     Perhaps you meant one of thes...
2013-08-31 01:56:32	arkeet	....
2013-08-31 01:56:36	chrisdone	arkeet: no fail!
2013-08-31 01:56:37	arkeet	@let zipRemainder f = (partitionEithers .) . zipWith (\a b -> maybe (Left b) (Right . (f ?? b)) a) . (++ repeat Nothing) . map Just
2013-08-31 01:56:38	lambdabot	 Defined.
2013-08-31 01:56:40	arkeet	:P
2013-08-31 01:56:42	arkeet	:t zipRemainder
2013-08-31 01:56:43	lambdabot	(a -> a1 -> b) -> [a] -> [a1] -> ([a1], [b])
2013-08-31 01:56:48	<--	anachrome (~lily@adsl-69-183-229-127.dsl.wlfrct.sbcglobal.net) has quit (Quit: gonna do something other than listen to stars)
2013-08-31 01:56:50	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-08-31 01:57:00	jmcarthur	...
2013-08-31 01:57:03	jmcarthur	fail
2013-08-31 01:57:05	jmcarthur	try again
2013-08-31 01:57:08	jmcarthur	elsewhere
2013-08-31 01:57:09	arkeet	no
2013-08-31 01:57:09	chrisdone	yeah, that only takes the second list
2013-08-31 01:57:16	chrisdone	only an idea would make a function taht does that
2013-08-31 01:57:17	chrisdone	<_<
2013-08-31 01:57:21	arkeet	chrisdone: and I suppose yours did something else.
2013-08-31 01:57:23	chrisdone	> _>
2013-08-31 01:57:24	lambdabot	  <hint>:1:3:
2013-08-31 01:57:24	lambdabot	     parse error (possibly incorrect indentation or mismatched ...
2013-08-31 01:57:31	ezrios	hah
2013-08-31 01:58:18	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-08-31 01:58:27	arkeet	@let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just))
2013-08-31 01:58:27	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-08-31 01:58:52	arkeet	er?
2013-08-31 01:59:26	arkeet	> let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder' (,) [1,2] [3..6]
2013-08-31 01:59:27	lambdabot	  ([(1,3),(2,4)],[5,6])
2013-08-31 01:59:44	arkeet	> let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder' (,) [1..4] [5..6]
2013-08-31 01:59:45	lambdabot	  ([(1,5),(2,6)],[])
2013-08-31 01:59:57	arkeet	yeah, same as mine.
2013-08-31 01:59:58	chrisdone	i like that you had to run it to be sure =)
2013-08-31 02:00:13	mcstar	> let zipret xs ys = (zip (take m xs) (take m ys), if d > 0 then drop d xs else drop d ys) where l1 = length xs; l2 = length ys; d = l1-l2; m = min l1 l2 in zipret [1,2,3] [4,3,5,4,3,2]
2013-08-31 02:00:14	lambdabot	  ([(1,4),(2,3),(3,5)],[4,3,5,4,3,2])
2013-08-31 02:00:15	arkeet	well, I didn't even try to understand it except by looking at the type.
2013-08-31 02:00:27	arkeet	eww, length
2013-08-31 02:00:42	arkeet	eww, Int
2013-08-31 02:01:02	nooodl	isn't that supposed to return ([(1,4),(2,3),(3,5)],[4,3,2])
2013-08-31 02:01:19	arkeet	he got d wrong.
2013-08-31 02:01:28	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-08-31 02:01:35	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:01:36	mcstar	(negate d)
2013-08-31 02:01:37	arkeet	perhaps if he used abs...
2013-08-31 02:01:57	mcstar	sry, its late
2013-08-31 02:02:36	arkeet	but still, length =(
2013-08-31 02:02:49	mcstar	i didnt want to write out a recursive function
2013-08-31 02:02:55	-->	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has joined #haskell
2013-08-31 02:03:10	arkeet	you could have used lazy nats
2013-08-31 02:03:16	mcstar	thats fl00r's homework :)
2013-08-31 02:03:24	arkeet	where length = void, (-) = (\\), and so on
2013-08-31 02:03:39	arkeet	take = zipWith (const id)
2013-08-31 02:03:57	arkeet	min = zipWith const, as well.
2013-08-31 02:04:00	fl00r	i didn't know data.these existed...there's some cool stuff in there
2013-08-31 02:04:04	-->	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has joined #haskell
2013-08-31 02:04:04	chrisdone	drop = unsafePerformIO (system "xeyes&killall life")
2013-08-31 02:04:11	arkeet	haha
2013-08-31 02:04:19	<--	RThinker (~yegor@176.102.17.117) has quit (Quit: Leaving.)
2013-08-31 02:04:25	nooodl	http://codepad.org/RuUhDEKN is this valid
2013-08-31 02:04:25	<--	talzeus (~studybot_@113.37.230.101) has quit (Read error: Connection reset by peer)
2013-08-31 02:04:40	chrisdone	hehe, that url sounds like a street fighter move
2013-08-31 02:04:42	 *	hackagebot handa-gdata 0.6.7 - Library and command-line utility for accessing Google services and APIs.  http://hackage.haskell.org/package/handa-gdata-0.6.7 (BrianBush)
2013-08-31 02:05:36	chrisdone	nooodl: pretty fly for a nooodl guy
2013-08-31 02:06:15	monochrom	I love xeyes
2013-08-31 02:06:16	mcstar	2 am, bb
2013-08-31 02:06:31	edwardk	chrisdone: hah!
2013-08-31 02:06:32	chrisdone	monochrom: me2
2013-08-31 02:06:46	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit (Quit: normanrichards)
2013-08-31 02:06:52	chord	you guys ever make a game with haskell?
2013-08-31 02:07:28	<--	tibbe (~tibbe@207.198.105.20) has quit (Quit: tibbe)
2013-08-31 02:07:40	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-08-31 02:07:44	arkeet	ok, sent a pull request for these.
2013-08-31 02:07:44	ski_	chrisdone : yeah, that's OCaml's labels, described at the same page as the polymorphic variants link i mentioned above
2013-08-31 02:08:12	chrisdone	aha
2013-08-31 02:08:32	edwardk	Arkeet good it'll fix those haddocks too!
2013-08-31 02:09:09	arkeet	??
2013-08-31 02:09:26	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 02:09:33	chrisdone	elliott: wonder if we can get `these' in lambdabot =]
2013-08-31 02:09:40	edwardk	The ones on hackage were built back when haddock had a bug/ bad interaction w GHC API
2013-08-31 02:09:41	arkeet	^
2013-08-31 02:09:49	arkeet	edwardk: ah, so just a new upload will fix it.
2013-08-31 02:09:59	edwardk	Yeah
2013-08-31 02:10:01	elliott	chrisdone: one second, have to deal with something else first.
2013-08-31 02:10:22	--	Mode #haskell [+o elliott] by ChanServ
2013-08-31 02:10:25	--	Mode #haskell [+b *!*322f530e@*.50.47.83.14] by elliott
2013-08-31 02:10:25	<--	elliott has kicked chord (chord)
2013-08-31 02:10:28	chrisdone	elliott: didn't mean immediately, just a suggestion for your `copious free time' =)
2013-08-31 02:10:30	--	Mode #haskell [+b chord!*@*] by elliott
2013-08-31 02:10:33	--	Mode #haskell [-o elliott] by elliott
2013-08-31 02:10:39	elliott	okay, now I'll start considering it.
2013-08-31 02:10:39	arkeet	hm, what did chord do?
2013-08-31 02:10:49	arkeet	or was he one of those persistent trolls
2013-08-31 02:10:54	elliott	arkeet: get banned for doing exactly what you see in /lastlog chord
2013-08-31 02:10:55	elliott	twice.
2013-08-31 02:10:59	elliott	or more.
2013-08-31 02:11:02	<--	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-08-31 02:11:09	Fuuzetsu	edwardk: what Haddock bug?
2013-08-31 02:11:14	monochrom	elliott has long memory :)
2013-08-31 02:11:14	arkeet	ah, I see.
2013-08-31 02:11:16	<--	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has quit (Ping timeout: 264 seconds)
2013-08-31 02:11:16	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-08-31 02:11:19	arkeet	the name sounds familiar anyway.
2013-08-31 02:11:26	elliott	edwardk was too reasonable for chord the first time so they had to troll about bitcoin or something to finally get banned :p
2013-08-31 02:11:28	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-31 02:11:41	chrisdone	documentation of trollery http://ircbrowse.net/browse/haskell?q=chord
2013-08-31 02:11:52	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 02:12:05	monochrom	chrisdone + elliott = big brother is watching you! :)
2013-08-31 02:12:13	tel	kill them with kindness..?
2013-08-31 02:12:27	monochrom	Departments of Truth and Love :)
2013-08-31 02:12:32	edwardk	Fuuzetsu: It was including lots of 'administrative' instance requirements in the haddocks, making them scary
2013-08-31 02:12:35	elliott	you don't need kindness for ban evasion :)
2013-08-31 02:12:38	chrisdone	2+2=5
2013-08-31 02:12:47	chrisdone	(…with the appropriate Num instance)
2013-08-31 02:12:59	edwardk	Things that it already had, so the instances looked way worse than they were
2013-08-31 02:13:02	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-08-31 02:13:06	<--	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 02:13:08	monochrom	(or just hide Prelude's (+) and define your own)
2013-08-31 02:13:19	c_wraith	> let 2 + 2 = 3.997 in 2 + 2
2013-08-31 02:13:21	lambdabot	  3.997
2013-08-31 02:13:36	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 02:13:45	Fuuzetsu	edwardk: Is it fixed? Is there a ticket?
2013-08-31 02:13:46	chrisdone	monochrom: import O'Brien ((+))
2013-08-31 02:13:57	edwardk	Long fixed, and there was
2013-08-31 02:13:59	<--	jodaro1 (~Adium@64.156.167.128) has left #haskell
2013-08-31 02:14:01	tel	monochrom does that go into the whole "How to Write Maintainable Haskell Code" bit?
2013-08-31 02:14:12	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-08-31 02:14:15	<--	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-08-31 02:14:40	elliott	chrisdone: looks like these fails to be Safe Haskell going by the haddocks
2013-08-31 02:14:48	chrisdone	ah
2013-08-31 02:14:51	elliott	though that may be the fault of a dependency and upload time and not true if I installed it now
2013-08-31 02:14:57	arkeet	huh hmm.
2013-08-31 02:15:01	arkeet	I'm looking at the lenses in these.
2013-08-31 02:15:09	elliott	it goes to show how little people care about Safe Haskell that everything is broken in it
2013-08-31 02:15:17	<--	zammy (~sammy@62.98.83.53) has quit (Remote host closed the connection)
2013-08-31 02:15:18	<--	ryant50001 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 02:15:27	arkeet	why isn't here = _This and there = _That, and havit be a type-changing prism?
2013-08-31 02:15:45	edwardk	Safety is a nice goal, but overrated
2013-08-31 02:15:46	arkeet	oh wait never mind...
2013-08-31 02:15:48	monochrom	Safe Haskell is fairly new. people need time to adapt.
2013-08-31 02:15:56	arkeet	because These.
2013-08-31 02:16:09	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit (Read error: Operation timed out)
2013-08-31 02:16:11	edwardk	That and it is too easy to screw up
2013-08-31 02:16:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 02:16:26	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 02:16:35	 *	arkeet considers what the Monad instance for These is
2013-08-31 02:16:35	edwardk	I wish saying Trustworthy was setting a floor rather than lowering Safe to Trustworthy
2013-08-31 02:16:38	elliott	monochrom: I tend to see support for Safe HAskell regressing :/
2013-08-31 02:16:44	<--	Amanas (~Amanas@c-24-128-204-226.hsd1.ma.comcast.net) has left #haskell ("Leaving")
2013-08-31 02:16:57	chrisdone	edwardk: i really want to spend a weekend porting ndm's `catch' to ghc
2013-08-31 02:17:16	monochrom	but I predict: in the long run, more people will care about Safe Haskell than about getting more Haskell libs to work on Windows!
2013-08-31 02:17:30	edwardk	Sounds fun, chrisdone
2013-08-31 02:17:34	chrisdone	monochrom: ha
2013-08-31 02:17:54	arkeet	yeah, I guess it's what I expected.
2013-08-31 02:17:54	edwardk	They already do
2013-08-31 02:18:07	<--	xymox (lechuck@unaffiliated/contempt) has quit (Ping timeout: 240 seconds)
2013-08-31 02:18:25	 *	arkeet ponders whether it's lawful
2013-08-31 02:18:36	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 02:20:20	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-08-31 02:20:24	Sonarpulse	edwardk, is bytes supposed to eventually replace binary and serial?
2013-08-31 02:20:30	<--	jdoliner (~jdoliner@173-228-89-104.dsl.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-08-31 02:21:10	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-08-31 02:21:25	edwardk	Sonarpulse: It is so I can avoid duplicating code to work with both
2013-08-31 02:21:40	edwardk	Also it let me avoid the annoying list encodings in each
2013-08-31 02:22:29	<--	Ralith (~ralith@66.114.129.162) has quit (Ping timeout: 248 seconds)
2013-08-31 02:22:32	Sonarpulse	ok
2013-08-31 02:22:53	<--	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-08-31 02:23:02	Sonarpulse	The fact it does both so nicely is great evidence how redundant they are
2013-08-31 02:23:07	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-08-31 02:23:35	glguy	binary is converging with cereal
2013-08-31 02:23:46	tel	glguy is one slated to eat the other?
2013-08-31 02:23:50	<--	tyfighter (~tyfighter@c-98-210-65-59.hsd1.ca.comcast.net) has quit (Quit: tyfighter)
2013-08-31 02:23:53	glguy	I don't think so
2013-08-31 02:23:55	Sonarpulse	crossing fingers...
2013-08-31 02:24:01	edwardk	glguy: Well, bytes is just a thin compatibility shim over both
2013-08-31 02:24:12	ski_	leroux : .. did you manage to get something working ?
2013-08-31 02:24:13	glguy	I'm just explaining why they are so similar now
2013-08-31 02:24:13	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 02:24:18	edwardk	Yeah
2013-08-31 02:24:51	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 02:24:52	leroux	ski_: http://ghc.haskell.org/trac/ghc/attachment/ticket/2184/0001-Fix-2184.-findExecutable-checks-if-the-file-actually.patch
2013-08-31 02:25:00	tel	Is there any guidance on how to pick between them even? I once thought it was a lazy/strict thing, but I think even that's been equilibriated?
2013-08-31 02:25:06	Sonarpulse	the overlap between those two just makes me feels so OCD
2013-08-31 02:25:27	edwardk	Tel: it's lazy vs strict still
2013-08-31 02:25:28	glguy	f.s.v.o OCD
2013-08-31 02:25:37	tel	ok
2013-08-31 02:25:50	glguy	You can run binary on strict stuff now with the incremental run functions
2013-08-31 02:26:04	glguy	and cereal's "Put" functionality isn't different from binary's
2013-08-31 02:27:06	edwardk	I'm not wedded to keeping bytes if binary has fully subsumed the other. It came about pragmatically I needed both instances for stuff in the old analytics code base
2013-08-31 02:27:46	-->	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has joined #haskell
2013-08-31 02:28:06	ski_	leroux : the last lines looks like an instance of `(>>=)' for `Maybe'
2013-08-31 02:28:40	glguy	the only thing I'm aware of that binary is missing that cereal has is "isolate" and "label"
2013-08-31 02:28:42	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 02:28:51	leroux	ski_: You're right.
2013-08-31 02:29:15	tel	glguy what does label even do?
2013-08-31 02:29:32	glguy	labels a sub parser to help you figure out parse errors
2013-08-31 02:29:37	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 02:29:41	glguy	you get a stack trace when something goes wrong
2013-08-31 02:29:44	tel	oh
2013-08-31 02:30:08	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 02:30:10	edwardk	What'll probably happen is when I tackle semi indexed binary, I'll do that in bytes.
2013-08-31 02:30:12	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 02:30:47	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 02:31:18	<--	cdidd (~cdidd@128-68-19-30.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 02:31:23	tel	edwardk do you have semi-indexed json somewhere already? or was that just a joke on reddit?
2013-08-31 02:31:26	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Client Quit)
2013-08-31 02:31:45	edwardk	It's not a joke, but it isn't on hackage yet
2013-08-31 02:31:56	tel	ah
2013-08-31 02:32:09	tel	very cool :)
2013-08-31 02:32:20	glguy	What is "semi-indexed"?
2013-08-31 02:32:30	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:32:34	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 02:32:43	edwardk	It needs more succinct indexed dictionary code than I have now. Ddarius volunteered to help With that
2013-08-31 02:32:56	edwardk	@google semi indexed semi structured
2013-08-31 02:32:58	tel	glguy partial indexing of serialized data
2013-08-31 02:32:59	lambdabot	http://www.di.unipi.it/~ottavian/files/semi_index_cikm.pdf
2013-08-31 02:32:59	lambdabot	Title: Semi-Indexing Semi-Structured Data in Tiny Space
2013-08-31 02:33:07	-->	morvism (~morvism@adsl-99-127-27-151.dsl.wlfrct.sbcglobal.net) has joined #haskell
2013-08-31 02:33:10	edwardk	That describes a version for Jason
2013-08-31 02:33:14	edwardk	Er json
2013-08-31 02:33:26	tel	edwardk ipad is like a foreign accent
2013-08-31 02:33:29	<--	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has quit (Remote host closed the connection)
2013-08-31 02:34:11	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-08-31 02:34:13	edwardk	Yeah
2013-08-31 02:34:39	-->	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 02:34:46	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-08-31 02:35:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 02:35:30	<--	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-08-31 02:35:37	-->	cdidd (~cdidd@128-68-19-241.broadband.corbina.ru) has joined #haskell
2013-08-31 02:35:49	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:36:01	thr33strikes	I'm trying to use this command to list things in a directory,  listDirectory :: FilePath -> IO [FilePath]
2013-08-31 02:36:03	edwardk	glguy: Build an index that is ~3-5% of the document size that you can build fast enough to accelerate a query you're doing on the fly rather than parse and query, but which you can also store
2013-08-31 02:36:04	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:36:30	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-08-31 02:36:42	thr33strikes	I have it written in a file with ext .hs
2013-08-31 02:36:44	glguy	You compute the index structure once and store it?
2013-08-31 02:36:48	edwardk	glguy: I have a variant that covers data.binary as well which makes it so you only pay to deserialize the parts you look at via mmap
2013-08-31 02:36:51	edwardk	You can
2013-08-31 02:36:54	-->	Moataz-E (~Moataz-E@cnat159.wlan.net.ed.ac.uk) has joined #haskell
2013-08-31 02:36:58	thr33strikes	why won't it run?
2013-08-31 02:36:59	<--	cdidd (~cdidd@128-68-19-241.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 02:37:00	edwardk	But even on the fly it is a win
2013-08-31 02:37:15	edwardk	And you can compress the doc chunk wise after indexing
2013-08-31 02:37:15	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Remote host closed the connection)
2013-08-31 02:37:42	tel	thr33strikes can you put your code up on a paste site like http://lpaste.net/
2013-08-31 02:37:52	edwardk	Take say a 340k json doc to a 10k index and 42k block store that queries 2-3x faster than the original
2013-08-31 02:37:55	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Client Quit)
2013-08-31 02:37:59	thr33strikes	sure
2013-08-31 02:38:11	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:38:11	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 02:38:17	-->	xpika (~jrg@58.171.21.27) has joined #haskell
2013-08-31 02:38:28	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:38:55	ski_	leroux : `return (perms >>= \p -> guard (executable p) >> return p)', i suppose
2013-08-31 02:39:08	-->	cdidd (~cdidd@95-24-229-144.broadband.corbina.ru) has joined #haskell
2013-08-31 02:39:13	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:39:17	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 02:39:30	lpaste	thr33strikes pasted “Newbie” at http://lpaste.net/92350
2013-08-31 02:39:41	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 02:40:10	edwardk	glguy: With the binary variant you can make a lazy expression that jumps around the index on the binary in succinct extra space
2013-08-31 02:40:42	FreeFull	thr33strikes: Where are you getting listDirectory from? I can't find it, but there is getDirectoryContents with the same type signature in System.Directory
2013-08-31 02:40:46	glguy	edwardk: do you need a class of non-failing parsers for it to work out?
2013-08-31 02:40:52	edwardk	Now O(1) to get to your nth child for an ADT
2013-08-31 02:41:01	-->	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has joined #haskell
2013-08-31 02:41:20	thr33strikes	from system-fileio
2013-08-31 02:41:26	edwardk	no you can semi index a parser too! But it works well for Binary given the unfailing aspect
2013-08-31 02:41:27	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 268 seconds)
2013-08-31 02:41:30	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 02:41:33	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:41:59	tel	thr33strikes you should try using it in an interpreter like ghci, what you've written is only the type, not a program that will run
2013-08-31 02:42:07	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-08-31 02:42:38	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-08-31 02:42:40	edwardk	with parsing it is particularly interesting because the recognizer builds the semi index, which i can flesh out with an AST
2013-08-31 02:42:56	levi	edwardk: You haven't happened to have written a reversible binary protocol parser suitable for context-sensitive packet decoding, have you?
2013-08-31 02:43:32	edwardk	Normally parsing blows up memory usage e.g. 20x, this way it blows up 1.1x, then you pay for what you look at
2013-08-31 02:43:48	edwardk	levi: Not recently
2013-08-31 02:44:02	thr33strikes	my ghci has prelude> is that ok?
2013-08-31 02:44:08	FreeFull	thr33strikes: A full program using that module would be something like       import Filesystem; main = mapM_ print (listDirectory ".")
2013-08-31 02:44:21	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-08-31 02:44:34	FreeFull	In GHCi, you can do   import Filesystem       and then     listDirectory "your directory"
2013-08-31 02:44:44	FreeFull	"." is the current directory
2013-08-31 02:44:45	levi	edwardk: Old stuff that's out there somewhere is fine with me, even if it's bitrotted. But if there's nothing handy, that's fine too.
2013-08-31 02:45:14	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:45:29	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:45:38	edwardk	levi: Nothing handy/usable
2013-08-31 02:45:44	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-08-31 02:46:23	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 02:46:42	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-08-31 02:47:02	<--	shesek (~shesek@IGLD-84-228-157-55.inter.net.il) has quit (Ping timeout: 264 seconds)
2013-08-31 02:47:19	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-08-31 02:47:48	thr33strikes	Freefull I just tried what you said and the module loaded but when I called list.Directory i received a not in scope error
2013-08-31 02:48:35	tel	anyone have any recommended reading for DSEL examples? I'm thinking of Hudak's stuff, the diagrams/monoids paper, financial contracts, &c.
2013-08-31 02:48:43	-->	mm_freak (~milch@pD9F92BBB.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 02:48:44	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 02:49:00	glguy	edwardk: and is any of this on your github?
2013-08-31 02:49:02	<--	path[l] (~vsi@173.252.71.3) has quit (Quit: path[l])
2013-08-31 02:49:15	levi	edwardk: Having done it before, do you have a 1-sentence summary of the approach you used?
2013-08-31 02:49:15	edwardk	Not yet
2013-08-31 02:49:17	<--	Squid_Tamer (~s@198.23.138.21) has quit (Remote host closed the connection)
2013-08-31 02:49:18	<--	zett_zelett (~zett_zele@p5DE798BF.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-08-31 02:49:38	-->	litherum1 (~Adium@156.39.10.22) has joined #haskell
2013-08-31 02:49:41	<--	watermind (~wm@2.80.250.44) has quit (Quit: Konversation terminated!)
2013-08-31 02:49:46	edwardk	Levi at the time I cared about protocol recognition from fragments while losing surrounding context often
2013-08-31 02:50:01	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:40	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:40	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:48	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 02:52:11	-->	ye_ (~ye@nyufwa-wlessauthclients-07.natpool.nyu.edu) has joined #haskell
2013-08-31 02:52:20	<--	fl00r (~fl00r@216.70.153.210) has left #haskell ("Leaving")
2013-08-31 02:52:27	<--	morvism (~morvism@adsl-99-127-27-151.dsl.wlfrct.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:52:29	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-08-31 02:52:35	<--	mm_freak_ (~milch@p5DD05A2D.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-08-31 02:52:39	levi	I don't have that problem at the moment; I'm mostly just wishing for a nice way to write protocol parsers/printers. I have some vague ideas and some inspiration to work from, but meanwhile I just have a mess of Data.Binary instances.
2013-08-31 02:52:50	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Read error: Connection reset by peer)
2013-08-31 02:53:00	<--	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has quit (Read error: Operation timed out)
2013-08-31 02:53:23	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:53:26	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:53:26	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:53:28	<--	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Ping timeout: 240 seconds)
2013-08-31 02:53:30	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-08-31 02:53:49	<--	es917 (~es@149.142.141.102) has quit (Quit: es917)
2013-08-31 02:53:52	edwardk	I leave protocols to a former life. I never want to sit there staring at packets again ;)
2013-08-31 02:54:37	danharaj	edwardk: would you know how I can use parametricity to guarantee quantified functions on GADT-defined functors are natural?
2013-08-31 02:54:47	danharaj	I am not good with free theorem
2013-08-31 02:55:23	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 02:55:26	enthropy	are people aware of a cleaner/better way to propagate type information when pretending that polymorphic functions are first-class?
2013-08-31 02:55:27	edwardk	danharaj: Let me talk about that at a computer later :)
2013-08-31 02:55:28	enthropy	http://code.haskell.org/~aavogt/HList/docs/HList/Data-HList-FakePrelude.html
2013-08-31 02:55:34	danharaj	ok cool
2013-08-31 02:56:07	danharaj	I finally have all the pieces of understanding I need and now I need to make parametricity do all the dirty work for me ;)
2013-08-31 02:57:29	danharaj	edwardk: the key to all of it is that FinSet -> * is the free cartesian monoidal closed category generated from 1 object. It inherits a cartesian product from FinSet^Op via Day Convolution but also gets a nonsymmetric monoidal structure from its free object status as it is isomorphic to its own endofunctor category. This second monoidal structure is what variable substitution is all about.
2013-08-31 02:58:12	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:58:24	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:58:28	<--	shepheb (~bsshephe@bas1-jockvale05-3096537925.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-08-31 02:58:29	<--	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-08-31 02:58:40	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:58:54	danharaj	A monoid object in that category is a cartesian operad, and also gives rise to a relative monad on *. I'm sure the relation to left modules and Maybe on * will fall out when I implement all this jazz formally in detail.
2013-08-31 02:59:14	-->	ology (~gene@67.204.140.157) has joined #haskell
2013-08-31 02:59:19	-->	path[l] (~vsi@173.252.71.3) has joined #haskell
2013-08-31 02:59:22	<--	ssbr (~ssbr@python/site-packages/ssbr) has quit (Quit: ZNC - http://znc.in)
2013-08-31 02:59:36	-->	shepheb (~bsshephe@bas1-jockvale05-3096537563.dsl.bell.ca) has joined #haskell
2013-08-31 02:59:40	mm_freak	could anyone tell me how i go from Exp Int to Exp DIM2 in accelerate?  i want to duplicate the given coordinate
2013-08-31 02:59:47	mm_freak	15 -> Z :. 15 :. 15
2013-08-31 03:00:18	-->	Croms (~dv@92.109.224.112) has joined #haskell
2013-08-31 03:00:56	lpaste	thr33strikes revised “Newbie”: “Baby Step” at http://lpaste.net/92350
2013-08-31 03:01:08	levi	I know what *almost* all those words meant now, at least at a surface level.
2013-08-31 03:01:19	levi	What they meant together... that's another story.
2013-08-31 03:01:43	qz_	is there any idiomatic way to process sequences with lookahead/skip? say i have list of strings and need to merge strings starting with 'A' with next string
2013-08-31 03:02:29	<--	nilsi_ (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-08-31 03:02:45	<--	path[l] (~vsi@173.252.71.3) has quit (Client Quit)
2013-08-31 03:02:52	mm_freak	qz_: one way is foldr on tails
2013-08-31 03:03:04	-->	nilsi (~nilsi@46.165.220.223) has joined #haskell
2013-08-31 03:03:13	<--	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 03:03:22	mm_freak	qz_: otherwise it's probably easiest to just write a recursive function
2013-08-31 03:03:38	qz_	mm_freak: i can do merging this way, but how to skip then?
2013-08-31 03:03:47	-->	oldthird (~oldthird@24-246-13-189.cable.teksavvy.com) has joined #haskell
2013-08-31 03:03:56	mm_freak	qz_: f (x:xs) | not (p x) = f xs
2013-08-31 03:04:01	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 03:04:07	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 260 seconds)
2013-08-31 03:04:27	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Remote host closed the connection)
2013-08-31 03:04:30	mm_freak	with the fold:  f x xs | not (p x) = xs
2013-08-31 03:04:40	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-08-31 03:04:50	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-08-31 03:05:04	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 03:05:17	mm_freak	accelerate is a bit hard to work with =/
2013-08-31 03:05:49	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Colloquy for iPad - http://colloquy.mobi)
2013-08-31 03:05:58	qz_	uh, accelerate is overkill for that
2013-08-31 03:06:29	mm_freak	qz_: no, that wasn't related to your question =)
2013-08-31 03:06:33	-->	Alpha64_ (~Alpha64@190.191.162.115) has joined #haskell
2013-08-31 03:06:38	qz_	oh
2013-08-31 03:06:47	mm_freak	i'm trying to write a simple accelerate program, but right now can't figure out even simple things
2013-08-31 03:06:57	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 03:07:05	<--	ve (~a@vortis.xen.tardis.ed.ac.uk) has quit (Ping timeout: 245 seconds)
2013-08-31 03:07:17	<--	Moataz-E (~Moataz-E@cnat159.wlan.net.ed.ac.uk) has quit (Ping timeout: 248 seconds)
2013-08-31 03:07:51	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-08-31 03:08:49	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-08-31 03:08:55	-->	nilsi_ (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 03:10:05	-->	dazed_and_amused (~jon@174-20-165-192.mpls.qwest.net) has joined #haskell
2013-08-31 03:10:11	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-08-31 03:11:33	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 03:11:54	<--	nilsi (~nilsi@46.165.220.223) has quit (Ping timeout: 264 seconds)
2013-08-31 03:12:32	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:13:16	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 03:14:32	--	GaelanAintAround is now known as Gaelan
2013-08-31 03:15:33	k00mi	mm_freak: marlow's book has a section on accelerate
2013-08-31 03:15:55	<--	NiceOneBrah (~niceonebr@173.247.206.226) has quit (Remote host closed the connection)
2013-08-31 03:16:07	<--	path[l] (~vsi@173.252.71.189) has quit (Read error: Connection reset by peer)
2013-08-31 03:16:48	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 03:17:05	<--	bennofs (~benno@dslb-088-073-195-148.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-08-31 03:17:30	<--	ormaaj (~ormaaj@97-116-0-235.mpls.qwest.net) has quit (Ping timeout: 264 seconds)
2013-08-31 03:17:32	lpaste	thr33strikes pasted “Works in ghci but not as a script file...” at http://lpaste.net/92352
2013-08-31 03:17:55	-->	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has joined #haskell
2013-08-31 03:17:58	arkeet	thr33strikes: yeah, tha'ts not a complete program
2013-08-31 03:18:02	arkeet	:p
2013-08-31 03:18:09	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: This computer has gone to sleep)
2013-08-31 03:18:14	arkeet	ghci lets you evaluate expressions
2013-08-31 03:18:20	arkeet	.hs files have to contain declarations
2013-08-31 03:18:38	ski_	thr33strikes : `main = print =<< getCurrentDirectory'
2013-08-31 03:18:41	arkeet	e.g. main = getCurrentDirectory >>= putStrLn
2013-08-31 03:18:43	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-08-31 03:19:13	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 03:19:23	thr33strikes	ghci makes it so easy
2013-08-31 03:19:28	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 03:20:09	<--	mxc (~maxcan@199.21.86.2) has quit (Quit: mxc)
2013-08-31 03:20:21	arkeet	I don't know what you were expecting.
2013-08-31 03:21:08	arkeet	ghci takes expressions (or IO actions), evaluates (or runs) them, and prints the results.
2013-08-31 03:21:11	arkeet	that's particular to ghci.
2013-08-31 03:21:20	-->	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has joined #haskell
2013-08-31 03:21:27	arkeet	i.e. it's a REPL
2013-08-31 03:21:29	ski_	thr33strikes : (simplifying somewhat) in a Haskell source file you write declarations, in the interactor (GHCi,Hugs,&c.) you write expressions
2013-08-31 03:21:36	monochrom	did you know: just a year ago, "import System.Directory" was illegal in ghci
2013-08-31 03:21:40	<--	joehillen (~joe@38.104.125.2) has quit (Ping timeout: 245 seconds)
2013-08-31 03:21:50	arkeet	monochrom: it was? I'm pretty sure I used ghci a year ago and that worked fine.
2013-08-31 03:21:59	monochrom	then make it 2 years
2013-08-31 03:22:03	arkeet	or 2.
2013-08-31 03:22:12	monochrom	then make it 3 years
2013-08-31 03:22:12	arkeet	but I believe that at some point it didn't work.
2013-08-31 03:22:18	ski_	make it `n' years ago, for `n' a natural number
2013-08-31 03:22:24	thr33strikes	lol
2013-08-31 03:22:37	FreeFull	monochrom: What about :m System.Directory
2013-08-31 03:22:48	ski_	FreeFull: always worked (afaik)
2013-08-31 03:22:48	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 03:22:51	monochrom	that has always existed
2013-08-31 03:22:55	arkeet	thr33strikes: anyway, the stuff that you type into ghci and the stuff that goes into a .hs file are different.
2013-08-31 03:22:55	heatsink	Bullies were tazing her?!
2013-08-31 03:23:01	ski_	(in GHCi, i.e. -- doesn't work in Hugs)
2013-08-31 03:23:02	heatsink	nm, wrong window
2013-08-31 03:23:10	arkeet	thr33strikes: something like LYAH should explain the difference.
2013-08-31 03:23:42	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 03:23:45	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 03:24:09	<--	wavewave (2efdbc23@gateway/web/freenode/ip.46.253.188.35) has quit (Ping timeout: 250 seconds)
2013-08-31 03:24:13	ski_	thr33strikes : in a source file you mostly put things you tell the computer (definitions), in the interactor you mostly put things you ask the computer (expressions to evaluate, expressions to ask what type they have,&c.)
2013-08-31 03:24:37	ski_	(incidentally, the same pattern is true of common Prolog systems)
2013-08-31 03:24:42	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 03:24:47	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-08-31 03:25:05	monochrom	I understand your expectation from elsewhere. in both Python and SML, the input to REPL and the input to editor can be identical.
2013-08-31 03:25:06	FreeFull	thr33strikes: Have you ever used any other programming language?
2013-08-31 03:25:30	ski_	monochrom : true
2013-08-31 03:25:33	monochrom	you can ask, so why not ghc too. and I can answer: you didn't pay enough money to make it happen.
2013-08-31 03:25:52	heatsink	Isn't GHCI's prompt supposed to be a do block?
2013-08-31 03:26:01	ski_	heatsink : sortof, yes
2013-08-31 03:26:03	arkeet	sort of.
2013-08-31 03:26:13	FreeFull	sort of, in IO
2013-08-31 03:26:13	arkeet	5 isn't the kind of statement you'd put in a do block, though
2013-08-31 03:26:17	monochrom	even "import MMM" in ghci was a recent Google SoC project IIRC
2013-08-31 03:26:21	heatsink	oh, right
2013-08-31 03:26:29	arkeet	there's an implicit "print" then
2013-08-31 03:26:43	FreeFull	I assume data and such came along with import
2013-08-31 03:27:03	monochrom	yeah, a bunch of declarations were from that project
2013-08-31 03:27:08	thoughtpolice	i think 'import Foo.Bar' happened in like 7.0, and full GHCi declaration syntax happened in 7.2
2013-08-31 03:27:12	-->	ormaaj (~ormaaj@97-116-119-35.mpls.qwest.net) has joined #haskell
2013-08-31 03:27:16	thoughtpolice	because 'import' i know for a fact was supported first
2013-08-31 03:27:34	thoughtpolice	and before that we just had :m+
2013-08-31 03:27:38	geekosaur	import was added in 7.4, data in 7.6, IIRC
2013-08-31 03:27:47	joelteon	I remember when import was added
2013-08-31 03:27:47	geekosaur	and 7.4.1's import was a bit buggy
2013-08-31 03:27:49	monochrom	thoughtpolice follows GHC development closely. trust him more than me
2013-08-31 03:27:51	thoughtpolice	ah, maybe that was it
2013-08-31 03:27:51	joelteon	those were dark days
2013-08-31 03:28:16	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 03:28:29	-->	tikhon (~user@adsl-75-36-188-216.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-08-31 03:28:37	FreeFull	Next step, make pragmas work
2013-08-31 03:28:43	thoughtpolice	geekosaur: ah, we're both wrong!
2013-08-31 03:28:59	thoughtpolice	the full top-level declaration syntax was actually 7.4.1, it seems
2013-08-31 03:29:02	enthropy	there's some multi-line input support too
2013-08-31 03:29:10	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 03:29:11	enthropy	but probably nobody uses it
2013-08-31 03:29:15	ski_	yea, `:{ ... :}'
2013-08-31 03:29:23	arkeet	or :set +m
2013-08-31 03:29:30	<--	arborist (~arborist@e182017161.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-08-31 03:29:40	arkeet	and -m
2013-08-31 03:29:49	thoughtpolice	hvr uses it :)
2013-08-31 03:29:50	FreeFull	:{ :}  is only useful for .ghci files
2013-08-31 03:30:04	arkeet	er...
2013-08-31 03:30:07	thoughtpolice	i speculate it may tie into some emacs mode functionality, though
2013-08-31 03:30:08	-->	contorted (~androirc@adsl-184-43-6-206.bgk.bellsouth.net) has joined #haskell
2013-08-31 03:30:13	thoughtpolice	he's submitted a few patches for multiline recently
2013-08-31 03:30:19	FreeFull	Since the code still ends up parsed as it if was on one line
2013-08-31 03:30:25	arkeet	yeah.
2013-08-31 03:30:30	 *	enthropy thought the line-editing was better
2013-08-31 03:30:47	enthropy	FreeFull: a long time ago it used to be
2013-08-31 03:31:01	FreeFull	When did it change?
2013-08-31 03:31:11	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:31:28	FreeFull	Because for me it still is as if it was on one line
2013-08-31 03:31:31	thr33strikes	Freefull: I was learning Python but stopped because I thought Haskell was more interesting
2013-08-31 03:31:41	tel	there needs to be a nice way to define a type and an implementation separately
2013-08-31 03:31:42	thoughtpolice	it changed when full top level syntax was added to GHCi. you can do ":{\ndata Foo\ndata Bar:}" for example which would otherwise be a parse error
2013-08-31 03:31:43	ski_	hm, i recall in the OCaml GUI toplevel, you'd send input by `C-RET', and you could edit previous rows of unsent input
2013-08-31 03:31:44	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-08-31 03:31:51	enthropy	FreeFull: I have a patch dated "Thu Apr 29 13:02:46 EDT 2010"
2013-08-31 03:31:56	FreeFull	thr33strikes: Well, Haskell is more interesting
2013-08-31 03:31:59	ski_	tel : how do you mean ?
2013-08-31 03:32:00	enthropy	http://ghc.haskell.org/trac/ghc/ticket/3984
2013-08-31 03:32:13	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-08-31 03:32:19	FreeFull	enthropy: Which still isn't in current ghc stable
2013-08-31 03:32:27	tel	ski_ I want to be able to let-define fns with constrained types
2013-08-31 03:32:54	<--	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 03:32:59	arkeet	let f :: ...; f ... = ...
2013-08-31 03:32:59	ski_	tel : like `let idBool :: Bool -> Bool; idBool b = b' ?
2013-08-31 03:33:10	mm_freak	k00mi: i've read that one
2013-08-31 03:33:16	FreeFull	enthropy: Nevermind, it didn't work because I didn't use a do
2013-08-31 03:33:19	tel	ooh.
2013-08-31 03:33:38	mm_freak	k00mi: it doesn't explain how to solve my current problem though
2013-08-31 03:33:39	tel	I wasn't aware that worked—
2013-08-31 03:33:57	ski_	tel : also with `{'s and `}'s, if you really want to
2013-08-31 03:34:00	thr33strikes	I was told that for some learning a functional language from the beggining would be easier because I wouldn't have bad habits
2013-08-31 03:34:05	enthropy	the line-editing didn't get done because haskeline didn't/doesn't? support that very well
2013-08-31 03:34:22	tel	ski_ I'd been trying with multiline mode, but didn't know how to do the lets
2013-08-31 03:34:24	ski_	tel : and of course you can separate multiple defining equations for `idBool' with `;'
2013-08-31 03:34:29	monochrom	not so much bad habits as prejudice
2013-08-31 03:34:37	thr33strikes	ic
2013-08-31 03:34:41	FreeFull	thr33strikes: .hs files behave differently from the GHCi prompt
2013-08-31 03:34:51	FreeFull	As others have already said
2013-08-31 03:35:09	thr33strikes	I read that earlier today but didn't remember exactly what the book was trying to get at
2013-08-31 03:35:14	tel	nifty
2013-08-31 03:35:23	<--	dazed_and_amused (~jon@174-20-165-192.mpls.qwest.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 03:35:32	tel	is it possible to do that with :{ :}
2013-08-31 03:35:58	thr33strikes	with python I learned a lot more when I just jumped in and tryied to build something
2013-08-31 03:36:08	<--	glguy (~glguy@unaffiliated/glguy) has quit (Quit: Sleeping)
2013-08-31 03:36:14	ski_	@let idBool :: Bool -> Bool; idBool b = b; idBool _ = error "unhandled case in `idBool'"
2013-08-31 03:36:15	lambdabot	 .L.hs:153:1: Warning:
2013-08-31 03:36:15	lambdabot	     Pattern match(es) are overlapped
2013-08-31 03:36:15	lambdabot	     In an equat...
2013-08-31 03:36:31	thr33strikes	I know now I need to go back and look at some of the syntax a little more when using the .hs files
2013-08-31 03:36:32	ski_	heh
2013-08-31 03:36:41	arkeet	thr33strikes: you should get used to using .hs files :)
2013-08-31 03:36:50	thr33strikes	yea lol
2013-08-31 03:37:00	arkeet	it's good to put a bunch of declarations into a .hs file, and then load that into ghci
2013-08-31 03:37:03	arkeet	to poke around
2013-08-31 03:37:05	tel	thr33strikes I usually write my ideas in a .hs file and load them in ghci with :r
2013-08-31 03:37:08	<--	ology (~gene@67.204.140.157) has quit (Quit: Twas bryllyg, and ye slythy toves did gyre and gymble in ye wabe)
2013-08-31 03:37:09	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 03:37:10	tel	yeah, what arkeet said
2013-08-31 03:37:11	tel	: )
2013-08-31 03:37:14	FreeFull	ski_: I wonder if there is any case where the pattern matches overlap, but not completely
2013-08-31 03:37:22	<--	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 03:37:22	arkeet	much easier than trying to write a big function definition within ghci.
2013-08-31 03:37:40	thr33strikes	writing for me is slow now because I'm trying to learn VIM as well
2013-08-31 03:37:48	ski_	thr33strikes : typically one edits the source file a bit, then tries to load it into the interactor, going back to fix type errors if any, then try out some example uses of the definitions in the source from the interactor, then back again
2013-08-31 03:37:55	FreeFull	ski_: That is, there are values that only match one of the two, for both, but there are some that match both
2013-08-31 03:38:06	monochrom	I am totally not thrilled about being able to write a whole program in a REPL. I mean, you are welcome to do it, but I couldn't care less. what happens if I'm 90% done and someone pulls the plug?
2013-08-31 03:38:24	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-08-31 03:38:39	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 260 seconds)
2013-08-31 03:38:54	thr33strikes	that's what I was originally doing but I got stuck with trying to use the System.Directory library
2013-08-31 03:39:01	ski_	thr33strikes : while something like vim or emacs may be quite helpful in the long run, it may perhaps be a bit much to both learn it and Haskell. if you have a favorite text editor, you could use it for the while, while learning the basics of Haskell
2013-08-31 03:39:07	monochrom	therefore, I always type into a file and save anyway. then try a few tests in REPL. advanced REPL features are irrelevant.
2013-08-31 03:39:08	tel	monochrom I mostly do it when I've loaded some intermediate data that I'm playing along with
2013-08-31 03:39:09	FreeFull	monochrom: There isn't a convienient way to save the code you write into ghci anyway
2013-08-31 03:39:16	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 03:39:17	tel	because repl reloads kill local state
2013-08-31 03:39:17	<--	contorted (~androirc@adsl-184-43-6-206.bgk.bellsouth.net) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-08-31 03:39:28	monochrom	speaking of which, Python's REPL of reloading/refreshing sucks
2013-08-31 03:39:32	ski_	FreeFull : `(True,_)' vs. `(_,True)' ?
2013-08-31 03:39:36	arkeet	monochrom: heh.
2013-08-31 03:39:38	FreeFull	monochrom: But it is nice to have advanced features when you are just messing around because you don't know what exactly to do yet
2013-08-31 03:39:44	tel	monochrom yesss..
2013-08-31 03:39:49	tel	ugh
2013-08-31 03:39:52	FreeFull	ski_: That would work
2013-08-31 03:40:00	thr33strikes	I'm getting the hang of vim but I think of it as the first time I started actually typing
2013-08-31 03:40:13	thr33strikes	it was brutal for me then but after a while it became second nature
2013-08-31 03:40:16	FreeFull	> case (True, True) of (True,_) -> 'a'; (_,True) -> 'b'
2013-08-31 03:40:18	lambdabot	  'a'
2013-08-31 03:40:27	FreeFull	ski_: Seems it doesn't warn on that
2013-08-31 03:40:33	ski_	@let por True _ = True; por _ True = True; por False False = False
2013-08-31 03:40:34	lambdabot	 Defined.
2013-08-31 03:40:34	thr33strikes	everyday I learn a little more
2013-08-31 03:40:50	ski_	FreeFull : well, it ought to
2013-08-31 03:40:57	monochrom	FreeFull: I mess around with the help of a file. it's even better, the file is a log of all things I try
2013-08-31 03:41:00	thr33strikes	I equate it to video games lol and anything to do with muscle memory
2013-08-31 03:41:13	thr33strikes	repetition is best for me
2013-08-31 03:42:03	FreeFull	monochrom: Usually I am actually writing something so I have a file loaded into ghci anyway
2013-08-31 03:42:05	ski_	FreeFull : one thing that i appreciate about the MLs is that overlapped patterns is an error and inexhaustive patterns is a noisy warning
2013-08-31 03:42:12	tel	thr33strikes I definitely find that to be the case with vim and emacs. They're quite complex, but when you learn them well their way of thinking gets "in your fingers"
2013-08-31 03:42:14	FreeFull	And test in the REPL as I write
2013-08-31 03:42:52	monochrom	yes that's what I do too
2013-08-31 03:42:57	ski_	thr33strikes : of course it's your call whether to try both at the same time or not. just mentioning the option
2013-08-31 03:42:57	<--	MileyCyrus (~doctor_wh@208.154.19.95.dynamic.jazztel.es) has quit (Quit: Me'n vaig)
2013-08-31 03:43:01	FreeFull	> case (True, True) of (True,_) -> 'a'; (True,True) -> 'b'
2013-08-31 03:43:02	lambdabot	  mueval-core: UnknownError "GHC returned a result but said: [GhcError {errMs...
2013-08-31 03:43:06	thr33strikes	I haven't tried emacs yet
2013-08-31 03:43:31	thr33strikes	I don't mind the advice
2013-08-31 03:43:35	thr33strikes	that's why I'm here
2013-08-31 03:43:47	monochrom	the point is: you totally don't need "REPL can accept complete program raw" for real work
2013-08-31 03:43:50	thr33strikes	just think of me as putty to be molded lol
2013-08-31 03:44:12	arkeet	vim is good :)
2013-08-31 03:44:32	monochrom	it's a much overrated gimmick for beginners who use such gimmick for maybe 2 weeks
2013-08-31 03:44:40	FreeFull	monochrom: There is a context switch between the REPL and the editor, people don't like that
2013-08-31 03:44:45	-->	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has joined #haskell
2013-08-31 03:44:52	FreeFull	I guess that's why some people work with the REPL built into their editor
2013-08-31 03:45:00	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 03:45:05	ski_	thr33strikes : i find emacs relatively nice, but i hear vim is good as well
2013-08-31 03:45:07	<--	nilsi_ (~nilsi@183.245.65.242) has quit (Read error: Connection reset by peer)
2013-08-31 03:45:10	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Remote host closed the connection)
2013-08-31 03:45:23	thr33strikes	have any of you used a different keyboard layout I have a friend who like dvorky, or something like that
2013-08-31 03:45:43	FreeFull	monochrom: Sometimes you want to do a one-off thing to test something and don't want to make a file only to delete it afterwards
2013-08-31 03:45:45	<--	xinming (~xinming@125.87.84.67) has quit (Ping timeout: 256 seconds)
2013-08-31 03:46:02	ski_	thr33strikes : .. oh. i first read your "putty" as "PuTTY"
2013-08-31 03:46:06	ski_	@wn putty
2013-08-31 03:46:07	lambdabot	*** "putty" wn "WordNet (r) 3.0 (2006)"
2013-08-31 03:46:07	lambdabot	putty
2013-08-31 03:46:07	lambdabot	    n 1: a dough-like mixture of whiting and boiled linseed oil;
2013-08-31 03:46:07	lambdabot	         used especially to patch woodwork or secure panes of glass
2013-08-31 03:46:07	lambdabot	    v 1: apply putty in order to fix or fill; "putty the window
2013-08-31 03:46:09	lambdabot	         sash"
2013-08-31 03:46:19	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:46:20	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 03:46:38	thr33strikes	better word would have been clay
2013-08-31 03:46:49	FreeFull	arkeet: What do you think about emacs + evil?
2013-08-31 03:46:53	-->	yucht (~miles@nat-oitwireless-outside-vapornet3-d-168.Princeton.EDU) has joined #haskell
2013-08-31 03:47:16	ski_	FreeFull : with GNU Screen, the context switch is only a `^A^A' away (or `^A^I' if you display both interactor and editor at the same time)
2013-08-31 03:47:20	thr33strikes	arkeet: evil?
2013-08-31 03:47:22	-->	xinming (~xinming@125.82.205.253) has joined #haskell
2013-08-31 03:47:48	ski_	@google emacs evil
2013-08-31 03:47:48	lambdabot	http://www.emacswiki.org/emacs/Evil
2013-08-31 03:47:49	lambdabot	Title: EmacsWiki: Evil
2013-08-31 03:47:54	<--	tauli (~tauli@e182221028.adsl.alicedsl.de) has quit (Quit: tauli)
2013-08-31 03:47:55	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-08-31 03:47:59	<--	yucht (~miles@nat-oitwireless-outside-vapornet3-d-168.Princeton.EDU) has quit (Client Quit)
2013-08-31 03:48:13	FreeFull	ski_: Don't forget having to reload the repl too, and potentially losing your repl-local definitions
2013-08-31 03:48:30	ski_	thr33strikes : it's an Emacs "mode" for emulating some of the basic keybindings of vi, iiuc
2013-08-31 03:48:42	ski_	FreeFull : true
2013-08-31 03:48:57	-->	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has joined #haskell
2013-08-31 03:49:32	-->	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has joined #haskell
2013-08-31 03:50:11	FreeFull	ski_: I think it does a lot more than basic keybindings
2013-08-31 03:50:33	ski_	thr33strikes : re different keyboard layout, i happen to have moved my `0' key to the left of the `1' key ..
2013-08-31 03:50:46	ski_	FreeFull : probably. i don't know details
2013-08-31 03:50:47	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 03:51:18	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 03:51:23	-->	solrize (~solrize@unaffiliated/solrize) has joined #haskell
2013-08-31 03:52:06	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 264 seconds)
2013-08-31 03:52:08	thr33strikes	can anyone recommend a great beginners haskell books?  The ones I've been finding go more into the explanation of functional programming vs the hands on coding.
2013-08-31 03:52:32	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-08-31 03:52:43	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:52:54	arkeet	thr33strikes: LYAH
2013-08-31 03:52:56	arkeet	@where lyah
2013-08-31 03:52:56	lambdabot	http://www.learnyouahaskell.com/
2013-08-31 03:52:58	ski_	(and also i have moved my left `Ctrl' key to the left of the `a' key, as i believe is common amongst Emacs users)
2013-08-31 03:53:15	arkeet	ski_: I did that and I'm not an emacs user.
2013-08-31 03:53:19	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 03:53:22	ski_	thr33strikes : ooc, which ones have you been finding ?
2013-08-31 03:53:29	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-08-31 03:53:44	FreeFull	ski_: Apparently doesn't do ex mode though
2013-08-31 03:54:02	-->	CaptainK (~CaptainK@181.179.77.190) has joined #haskell
2013-08-31 03:54:12	ski_	arkeet : well, i didn't say "only" :) -- may i inquire as to your reasons ?
2013-08-31 03:54:19	ski_	FreeFull : which ?
2013-08-31 03:54:31	thr33strikes	I was actually reading that today
2013-08-31 03:54:47	arkeet	ski_: well, a couple.
2013-08-31 03:54:52	 *	ski_ has chatted some with someone who uses `ex' to code
2013-08-31 03:54:58	thr33strikes	it was the best of the bunch
2013-08-31 03:54:58	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-08-31 03:55:05	arkeet	it's generally easier to reach, the real left ctrl key on my laptop is tiny, and I hate accidentally pressing caps lock.
2013-08-31 03:55:27	<--	apaku (~apaku@x2f12313.dyn.telefonica.de) has quit (Ping timeout: 260 seconds)
2013-08-31 03:55:31	haasn	I'm randomly getting mandelbrot: thread blocked indefinitely in an MVar operation when working with repa-devil
2013-08-31 03:55:36	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:55:56	haasn	I have absolutely *no* idea what causes it. It seems to either happen, or not, depending on arbitrary changes I make to the code
2013-08-31 03:56:27	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-08-31 03:56:42	-->	apaku (~apaku@x2f0aa7f.dyn.telefonica.de) has joined #haskell
2013-08-31 03:56:49	thr33strikes	ski: not sure what you're asking
2013-08-31 03:56:51	monochrom	"the devil is in the MVars" :)
2013-08-31 03:56:58	slack1256	heh
2013-08-31 03:57:13	haasn	http://bpaste.net/show/127922/
2013-08-31 03:57:16	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 03:57:17	haasn	maybe somebody can figure out what's wrong?
2013-08-31 03:57:27	arkeet	step 1: use lpaste
2013-08-31 03:57:27	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 03:57:28	arkeet	;)
2013-08-31 03:57:31	haasn	I used the exact same ‘render’ function, with one minor change (V2 instead of a tuple) in another program
2013-08-31 03:57:33	haasn	and it worked fine
2013-08-31 03:57:39	arkeet	what's the problem?
2013-08-31 03:57:44	ski_	thr33strikes : which Haskell beginner books you had been finding (that go more into the explanations of functional programming than hand-on-coding)
2013-08-31 03:57:46	arkeet	step 0: include the error message
2013-08-31 03:57:52	haasn	arkeet: “<<loop>> thread blocked indefinitely in an MVar operation”
2013-08-31 03:57:57	haasn	I just said that
2013-08-31 03:57:58	FreeFull	ski_: evil
2013-08-31 03:58:06	arkeet	oh.
2013-08-31 03:58:12	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-08-31 03:58:15	arkeet	oh, I don't know anything about repa-devil.
2013-08-31 03:58:29	arkeet	sounds like a bug.
2013-08-31 03:58:30	haasn	I'll try another repa representation
2013-08-31 03:58:37	haasn	I can't think of any other explanation for it
2013-08-31 03:58:44	haasn	if I remove the (x `seq`) bit it works
2013-08-31 03:58:59	Ralith	haasn: because your weirdass /. operator is a loop, probably
2013-08-31 03:59:01	thr33strikes	Ski_: Programming in Haskell by Graham Hutton
2013-08-31 03:59:29	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:59:46	thr33strikes	Ski_: it just be me though because I'm new
2013-08-31 03:59:50	monochrom	oh! is it because /. wants non-strict but you make trivial too strict?
2013-08-31 04:00:17	ski_	thr33strikes : if you're new to functional programming, such explanations may also be helpful. that being said, you could come back later to that when you know the basics of the language
2013-08-31 04:00:34	thr33strikes	Ski_:yes I was thinking the same thing
2013-08-31 04:00:54	haasn	monochrom: maybe? heh; I tried adding ! to both arguments of /. and now I just get a good old endless loop
2013-08-31 04:00:59	haasn	no <<loop>> even
2013-08-31 04:01:27	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 04:01:32	thr33strikes	Ski_: I jumped into Perarls of functional Algoriths by Richard Bird and that was definitely over my head
2013-08-31 04:01:54	ski_	thr33strikes : different people learn best in different ways, and different people may have different goals. if you fell LYAH is more helpful atm, go for it. just keep in mind that there may be deeper lessons that may be harder to grasp, but that may still be worthwhile to grok
2013-08-31 04:01:58	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-08-31 04:02:01	haasn	hmm; I changed the type to :: Int -> Int -> Double -- and got the same error as before, <<loop>>
2013-08-31 04:02:03	ski_	thr33strikes : *nod*
2013-08-31 04:02:13	haasn	this is really weirding me out right now. nothing makes sense
2013-08-31 04:02:20	haasn	the sky is falling etc.
2013-08-31 04:02:22	<--	CaptainK (~CaptainK@181.179.77.190) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-08-31 04:02:37	Ralith	haasn: your /. is defined as a loop. How many times do I need to repeat myself?
2013-08-31 04:02:44	haasn	oh!
2013-08-31 04:02:50	Ralith	:P
2013-08-31 04:02:58	haasn	I typo'd / as /.
2013-08-31 04:03:01	ski_	FreeFull : ok
2013-08-31 04:03:03	arkeet	haha
2013-08-31 04:03:04	Ralith	thought that might be it
2013-08-31 04:03:08	<--	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has left #haskell ("Konversation terminated!")
2013-08-31 04:03:15	monochrom	oh damn. I missed that too
2013-08-31 04:03:44	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-08-31 04:03:50	<--	flebron (~flebron@190.18.146.246) has quit
2013-08-31 04:03:52	monochrom	so, keep the seq, fix /.
2013-08-31 04:04:19	thr33strikes	Ski_: The more I go over the harder subjects eventually I usually have an ahhhaaa moment and it just clicks
2013-08-31 04:04:26	monochrom	also, answer: as many times as /. loops? :)
2013-08-31 04:04:32	tel	Is there a package with a lazy sorted data type?
2013-08-31 04:04:33	 *	ski_ nods
2013-08-31 04:04:59	Ralith	tel: how would that be distinct from sorting a list?
2013-08-31 04:05:06	thr33strikes	I'll just be laying in bed or doing something and its like a light comes on
2013-08-31 04:05:18	thr33strikes	may take days but it's great when it happens
2013-08-31 04:05:22	 *	ski_ knows the feeling
2013-08-31 04:05:24	arkeet	thr33strikes: may take weeks
2013-08-31 04:05:25	tel	I want to get out the smallest thing before the whole list is sorted
2013-08-31 04:05:26	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-31 04:05:32	arkeet	tel: then
2013-08-31 04:05:35	-->	xl (~xl@123.113.159.146) has joined #haskell
2013-08-31 04:05:36	arkeet	just do that
2013-08-31 04:05:37	arkeet	sort is lazy
2013-08-31 04:05:41	arkeet	iirc
2013-08-31 04:05:47	tel	oh
2013-08-31 04:06:06	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-08-31 04:06:26	tel	I figured it would be some kind of quicksort thing—where I just need bubble
2013-08-31 04:06:38	arkeet	hm, maybe not
2013-08-31 04:06:45	monochrom	eventually I will have to show you how, e.g., "maximum (sort xs)" is linear time because of some laziness
2013-08-31 04:06:51	thr33strikes	this is a hobby for me so my "goal" in a sense is to reach those ahhaa moments
2013-08-31 04:07:01	monochrom	err, sorry, "take 1 (sort xs)"
2013-08-31 04:07:15	arkeet	for which implementation of sort?
2013-08-31 04:07:17	FreeFull	tel: fold with min
2013-08-31 04:07:24	monochrom	for the one that comes with GHC
2013-08-31 04:07:35	<--	nilsi (~nilsi@183.245.65.242) has quit (Ping timeout: 260 seconds)
2013-08-31 04:07:42	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 04:07:47	monochrom	or generally most merge sorts
2013-08-31 04:07:49	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Quit: Computer has gone to sleep.)
2013-08-31 04:08:09	FreeFull	tel: Will be O(n) rather than O(n log n)
2013-08-31 04:08:12	tel	I didn't expect that to hold! interesting
2013-08-31 04:08:24	thr33strikes	did any of you have to read LYAH more than once?
2013-08-31 04:08:33	ski_	i remember reading chapter after chapter of "Haskell: The Craft of Functional Programming", thinking "hm, how i can do anything without loops and assignment. .. hm, ok, i can do simple things, but more complex stuff ? .. ok, but surely I/O ? .." -- and also other lights lit up in the process
2013-08-31 04:08:45	arkeet	monochrom: it doesn't seem to be lazy enough here.
2013-08-31 04:08:49	FreeFull	thr33strikes: I mixed things up for myself
2013-08-31 04:08:59	arkeet	head (sort [1..10000000]) is as expensive as length
2013-08-31 04:09:09	arkeet	7.4.2 though
2013-08-31 04:09:12	thr33strikes	Freefull: how so?
2013-08-31 04:09:23	monochrom	that is linear, and I did promise linear
2013-08-31 04:09:30	arkeet	length of sort, I mean.
2013-08-31 04:09:47	arkeet	one sec
2013-08-31 04:09:47	FreeFull	thr33strikes: There are other materials than LYAH out there. I personally tend to read documentation and articles about things
2013-08-31 04:09:49	monochrom	oh, then I will have to investigate later
2013-08-31 04:10:01	FreeFull	And eventually you'll be advanced enough that LYAH won't be useful anymore
2013-08-31 04:10:16	FreeFull	It is great to get you started though
2013-08-31 04:10:20	<--	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:10:33	tel	hm, there's a wealth of information in the source it turns out
2013-08-31 04:10:39	-->	ve (~a@vortis.xen.tardis.ed.ac.uk) has joined #haskell
2013-08-31 04:10:54	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:11:10	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 04:11:50	thr33strikes	Ski: that's pretty much how I feel, my big question is how is the code structured, it seems like it's easy to create spaghetti code.  I know you'll all educate me in that regard as to why its not though.
2013-08-31 04:11:53	leroux	thr33strikes: https://gist.github.com/leroux/6395804
2013-08-31 04:11:58	FreeFull	monochrom: I wonder if  take 1 . sort    would be linear with my homegrown mergesort
2013-08-31 04:12:15	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-08-31 04:12:21	monochrom	it most likely will be. this one is very hard to screw up :)
2013-08-31 04:13:00	arkeet	yeah, same result in 7.6.3
2013-08-31 04:13:10	arkeet	ghc screwed it up; so can you!
2013-08-31 04:13:35	thr33strikes	Leroux thanks
2013-08-31 04:13:44	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 256 seconds)
2013-08-31 04:14:00	leroux	I should probably add a few of those to the haskell-wiki.
2013-08-31 04:14:03	tel	hah
2013-08-31 04:14:08	monochrom	at some point, they switched the sorting algorithm. it was merge sort years ago. the current algorithm is faster in practice, but looks less like merge sort, I still don't exactly know what it is
2013-08-31 04:14:16	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-08-31 04:14:24	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 04:14:26	tel	monochrom yeah.. I'm trying to figure it out
2013-08-31 04:14:35	tel	probably ought to take a look at the paper referenced
2013-08-31 04:14:35	monochrom	try going back to 6.12 :)
2013-08-31 04:14:54	arkeet	I don't have that :)
2013-08-31 04:15:14	-->	croyd (637f3640@gateway/web/freenode/ip.99.127.54.64) has joined #haskell
2013-08-31 04:16:01	<--	litherum1 (~Adium@156.39.10.22) has quit (Quit: Leaving.)
2013-08-31 04:16:33	ski_	thr33strikes : it's possible to write unreadable code, yes. one tries to fight that partially by abstracting out common patterns (refactoring is simplified by the absence of side-effects)
2013-08-31 04:16:52	<--	void64 (~luke@37.214.9.42) has quit (Read error: Operation timed out)
2013-08-31 04:17:12	ski_	thr33strikes : though it's possibly to go overboard with abstraction that isn't warranted by either existing code or code that one would otherwise have to write
2013-08-31 04:18:00	ski_	thr33strikes : still, there are certain patterns of structuring code that are common
2013-08-31 04:18:53	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 268 seconds)
2013-08-31 04:19:01	-->	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has joined #haskell
2013-08-31 04:19:54	ski_	monochrom : is it still a merge sort, or something else ?
2013-08-31 04:20:04	thr33strikes	ski_: I haven't written or seen enough code to recognize them though
2013-08-31 04:20:05	ski_	(if merge sort, bottom-up or top-down ?=
2013-08-31 04:20:07	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 04:20:07	ski_	)
2013-08-31 04:20:20	--	flazz_gone is now known as flazz
2013-08-31 04:21:04	ski_	thr33strikes : a quite common one is to write a "wrapper" function that is responsible for any "initialization" ior "finalization" of a "worker" function that does the main work
2013-08-31 04:21:30	haasn	wait, why does instance Num (Complex a) require RealFloat a!?
2013-08-31 04:21:41	monochrom	with merge sort, you can reason like this approximately: take 1 (mergesort xs) ends up looking like a single-elimination tournament.
2013-08-31 04:21:43	haasn	As far as I can tell there are no operations being used in the instance that would require such a heavy constraint
2013-08-31 04:21:46	haasn	it excludes, for example, Fixed
2013-08-31 04:21:53	haasn	ah, http://hackage.haskell.org/package/complex-generic
2013-08-31 04:22:29	thr33strikes	ski_: I've understood that to be a OOP type pattern, it holds true for functional programming as well?
2013-08-31 04:22:40	ski_	and writing such a worker in accumulator-passing-style isn't that uncommon (though it's more common in the strict FPLs. due to non-strictness, Haskell can often get away (efficiently) with non-tail-recursive formulations where a strict language would want tail-recursion, usually by accumulator)
2013-08-31 04:22:43	thr33strikes	ski_: Can you explain why?
2013-08-31 04:22:53	ski_	thr33strikes : why what ?
2013-08-31 04:23:06	FreeFull	How do I make sure my sort' gets evaluated without using its output?
2013-08-31 04:23:22	ski_	FreeFull : `seq' ?
2013-08-31 04:23:38	-->	shrekster (~small@c-24-18-241-158.hsd1.wa.comcast.net) has joined #haskell
2013-08-31 04:23:42	ski_	FreeFull : or, if in `IO' monad, try `evaluate'
2013-08-31 04:23:55	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:24:05	ski_	@type Control.Exception.evaluate
2013-08-31 04:24:06	lambdabot	a -> IO a
2013-08-31 04:24:22	FreeFull	ski_: seq stops on the first outermost constructor it finds so it wouldn't do
2013-08-31 04:24:24	monochrom	must you avoid using its output? because, frankly, seq and evaluate count as using its output, too
2013-08-31 04:24:31	thr33strikes	I've understood that to be a OOP type pattern, it holds true   . `^_^v
2013-08-31 04:24:32	thr33strikes	                         | for functional programming as well?
2013-08-31 04:24:51	FreeFull	monochrom: Well, I basically don't want the data to leave the program because that's slow
2013-08-31 04:24:54	monochrom	and "evaluate (length (sort' xs))" counts as using even more
2013-08-31 04:25:17	ski_	FreeFull : then either try something like `rnf', or write a custom forcer ?
2013-08-31 04:25:29	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 04:25:30	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 04:25:34	monochrom	"evaluate (rnf (sort' xs))" is also good
2013-08-31 04:25:53	monochrom	let me just say I don't understand your definition of "use"
2013-08-31 04:26:00	FreeFull	I want to compare the speed difference between     sort' xs    and    take 1 . sort xs'
2013-08-31 04:26:03	monochrom	mathematical definition
2013-08-31 04:26:22	arkeet	FreeFull: for benchmarking, you may be interested in criterion :)
2013-08-31 04:26:25	FreeFull	monochrom: By use I meant write to a file or to the screen
2013-08-31 04:26:26	thr33strikes	ski: so you're saying there are patterns in functional programming just like there are in other pardigms.
2013-08-31 04:26:35	monochrom	then "evaluate (rnf (sort' xs))" and "evaluate (rnf (take 1 (sort' xs]"
2013-08-31 04:26:36	ski_	thr33strikes : hm, i wasn't aware that worker-wrapper was that common in OOP (any language ?), but ok
2013-08-31 04:26:47	-->	binroot (~binroot@ip98-169-217-175.dc.dc.cox.net) has joined #haskell
2013-08-31 04:26:49	ski_	thr33strikes : to some extent, yes
2013-08-31 04:26:51	monochrom	where ] is the lisp ] hehe
2013-08-31 04:27:53	ski_	thr33strikes : however, to some extent, patterns in OOP will in some cases not be needed in (typical) FP. iow those OOP patterns exist because of inabilities to abstract or express more directly what is desired
2013-08-31 04:27:55	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-31 04:28:14	thr33strikes	ic
2013-08-31 04:28:18	ski_	monochrom ;)
2013-08-31 04:28:30	monochrom	or you can say, those patterns are used in FP more often but with trivial syntax, even no syntax
2013-08-31 04:29:02	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:29:02	thr33strikes	ski_: what was the hardest concept for you to grasp when you initially started learning FP?
2013-08-31 04:29:12	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 04:29:17	monochrom	"mapM_ c xs" can be described as either "uses the Command pattern" or "eliminates the Command pattern"
2013-08-31 04:29:33	ski_	hm, hard to say (was more than 10 years ago)
2013-08-31 04:29:35	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Ping timeout: 245 seconds)
2013-08-31 04:30:07	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 04:30:08	ski_	thr33strikes : the pervasive use of recursion is certainly a common stumbling-block, though
2013-08-31 04:30:11	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-08-31 04:31:16	shachaf	monochrom: How do I use the Comonad pattern?
2013-08-31 04:31:34	monochrom	I don't know yet
2013-08-31 04:31:34	thr33strikes	when you say pervasive do programmers unwittingly use recursion too much or not enough?
2013-08-31 04:32:11	FreeFull	Ok, I tried it out, and with take 1 it is measurably faster than without
2013-08-31 04:32:15	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 04:32:17	FreeFull	Noticeably even
2013-08-31 04:32:19	monochrom	\∩/
2013-08-31 04:32:19	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 04:32:21	arkeet	I think he just means figuring out how to write things using recursion.
2013-08-31 04:32:37	arkeet	instead of e.g. loops like you would in some other languages.
2013-08-31 04:32:39	ski_	thr33strikes : programmers who (solely) use imperative programming languages tend to under-use recursion (of course there are exceptions, people who understand the benefits and costs of it)
2013-08-31 04:33:03	<--	nooodl (~nooodl@91.176.171.15) has quit (Quit: Ik ga weg)
2013-08-31 04:33:09	<--	tolt (~Kevin@209.65.15.42) has quit (Ping timeout: 248 seconds)
2013-08-31 04:33:31	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:33:40	FreeFull	shachaf: extract and extend your code
2013-08-31 04:33:57	arkeet	I guess beginner FPers might have a tendency to do explicit recursion instead of e.g. using a fold
2013-08-31 04:34:14	-->	ksf (~ksf@d086145.adsl.hansenet.de) has joined #haskell
2013-08-31 04:34:36	ski_	which i think is helpful for later understanding the point of recursion combinators like folds
2013-08-31 04:34:39	-->	tolt (~Kevin@209.65.15.42) has joined #haskell
2013-08-31 04:34:47	arkeet	sure.
2013-08-31 04:35:25	ski_	(just like using some `goto's or `jmp's/`bne's could be useful to better appreciate structured programming constructs=
2013-08-31 04:35:32	ski_	)
2013-08-31 04:35:35	<--	codesoup (~codesoup@69-196-177-207.dsl.teksavvy.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:35:52	<--	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-08-31 04:35:55	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 04:36:04	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-08-31 04:36:15	FreeFull	I don't understand anymore how people can make new programming languages where you don't have simple lambdas
2013-08-31 04:36:22	FreeFull	By simple I mean easy
2013-08-31 04:36:58	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 256 seconds)
2013-08-31 04:37:12	thr33strikes	is it mandatory that I learn lambda calculus to fully grasp FP?
2013-08-31 04:37:24	FreeFull	thr33strikes: Nope
2013-08-31 04:37:30	<--	tac (~tac-tics@2602:306:bdb4:5100:cc7b:a920:f37c:78e3) has quit (Ping timeout: 245 seconds)
2013-08-31 04:37:35	arkeet	there's not much to learn about lambda calculus.
2013-08-31 04:37:50	 *	ski_ . o O ( "Sacrificing the calf of flexibility on the altar of reliability" by Peter J. Denning in 1976 at <http://dl.acm.org/citation.cfm?id=807704> )
2013-08-31 04:38:24	FreeFull	thr33strikes: If you really want you could learn about System F, but I wouldn't do that until you're an advanced haskeller
2013-08-31 04:38:37	 *	arkeet hasn't learned about System F
2013-08-31 04:38:43	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Quit: leaving)
2013-08-31 04:38:49	arkeet	I should probably pick up a copy of TaPL at some point.
2013-08-31 04:38:58	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:39:44	thr33strikes	it's almost 5am here
2013-08-31 04:39:52	thr33strikes	goodnight all and thanks for the info
2013-08-31 04:39:56	FreeFull	Almost 4am here
2013-08-31 04:40:03	FreeFull	We really should go to bed earlier =P
2013-08-31 04:40:05	thr33strikes	I'll be back tomorrow after some readying and coding
2013-08-31 04:40:07	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Client Quit)
2013-08-31 04:40:21	<--	thr33strikes (~wontez@ltea-047-066-086-113.pools.arcor-ip.net) has left #haskell ("WeeChat 0.3.8")
2013-08-31 04:40:23	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:40:26	FreeFull	I should have been asleep hours ago
2013-08-31 04:40:32	FreeFull	This isn't good for my health
2013-08-31 04:41:34	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-08-31 04:41:34	edwardk	FreeFull: bah. i'm still walking around. you'll be fine ;)
2013-08-31 04:41:36	haasn	Ralith/monochrom: Runs fine now http://hub.darcs.net/nand/mandelbrot/browse/mandelbrot.hs  and the output is beautiful http://hub.darcs.net/nand/mandelbrot/raw/mandelbrot.png :)
2013-08-31 04:41:41	haasn	runs in about 0.130ms on my machine
2013-08-31 04:41:42	FreeFull	ski_: Sometimes when you're writing C, goto is the best thing to use
2013-08-31 04:41:50	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-08-31 04:41:52	haasn	edwardk: I have a lensy version of the mandelbrot function but it's like 5x slower ;)
2013-08-31 04:42:02	FreeFull	edwardk: Humans are meant to be diurnal =P
2013-08-31 04:42:18	edwardk	haasn: sad
2013-08-31 04:42:28	FreeFull	haasn: Make it faster
2013-08-31 04:42:33	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Client Quit)
2013-08-31 04:42:34	ski_	FreeFull: yes, partly because of not getting guarantees about tail-calls (though GCC gives you some with `-fsibling-calls', at least=
2013-08-31 04:42:36	edwardk	haasn: link?
2013-08-31 04:42:38	ski_	)
2013-08-31 04:42:38	edwardk	oh
2013-08-31 04:42:48	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:42:48	-->	codesoup (~codesoup@69-165-142-157.dsl.teksavvy.com) has joined #haskell
2013-08-31 04:42:50	ski_	here's a quote from the above paper :
2013-08-31 04:42:53	haasn	edwardk: iterate (\z -> z^2+c) ^? taking 100 folded.filtered diverges.asIndex
2013-08-31 04:43:01	FreeFull	ski_: I meant for handling failure
2013-08-31 04:43:03	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 04:43:04	haasn	returns the number of steps until it diverges, if any
2013-08-31 04:43:05	ski_	  The term “flexibility” is usually used to denote the existence of a range of choices available to a programmer or implementor -- the more choice, the better the flexibility. Flexibility is sometimes referred to as “generality”. Because it is frequently presented in the desirable terms, “delaying the binding of virtual objects to their realisations”,
2013-08-31 04:43:07	haasn	capped at 100 arbitrarily
2013-08-31 04:43:22	ski_	  increased flexibility has generally been considered a fatted calf of great succulence, sought voraciously and in the hope that the increased complexity that invariably attends it can be kept under control. In recent years, the wisdom of this quest has been called into question, for flexibility without discipline appears contrary to the plans of the god of reliability.
2013-08-31 04:43:28	haasn	  where diverges (r:+i) = r^2 + r^2 > 4 -- or diverges = (>2) . magnitude
2013-08-31 04:43:28	ski_	  (An automobile with independent steering mechanisms for both front wheels is more flexible but less disciplined than an ordinary one. It is mainly of metaphysical interest, offensive to the god of safe highways.)
2013-08-31 04:43:36	edwardk	haasn: i wonder if i could get that to run on fpcomplete
2013-08-31 04:43:46	haasn	the repa stuff?
2013-08-31 04:43:51	edwardk	haasn: yeah
2013-08-31 04:44:14	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-08-31 04:44:26	FreeFull	ski_: Believe it or not, there is some C code that is actually better with goto than with any looping/conditional construct or recursion
2013-08-31 04:44:49	tibbe	edwardk: is mapM = traversable going to become a reality in 7.8?
2013-08-31 04:44:50	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-08-31 04:44:50	ski_	FreeFull : i believe it
2013-08-31 04:44:58	arkeet	traverse*
2013-08-31 04:45:01	FreeFull	The Linux kernel makes good use of goto
2013-08-31 04:45:15	ski_	FreeFull : C being a "portable assembler" is a long way from the truth
2013-08-31 04:45:16	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 04:45:17	arkeet	I like having the _option_ to use goto.
2013-08-31 04:45:24	haasn	arkeet: Data.Traversable.mapM I'd guess; then again, we have Applicative => Monad now right?
2013-08-31 04:45:27	edwardk	tibbe: i think the plan was for 7.8 to just include warnings if you don't have Applicative instances for your Monads, then 7.10 to make the jump with a bunch of other stuff
2013-08-31 04:45:36	FreeFull	ski_: Nothing to do with assembler
2013-08-31 04:45:37	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-08-31 04:45:37	edwardk	or did we already get the refactoring patch in for 7.8?
2013-08-31 04:45:38	haasn	oh, right, 7.10
2013-08-31 04:45:41	tibbe	edwardk: ah
2013-08-31 04:45:44	FreeFull	Just the goto being the cleanest thing
2013-08-31 04:45:48	tibbe	edwardk: not sure, I thought we did
2013-08-31 04:46:00	edwardk	tibbe: i haven't run HEAD since it would have gone in if it is
2013-08-31 04:46:09	ski_	FreeFull : it has to do with it, due to the lack of flexible (and preferably compsable) ways of expressing what you want
2013-08-31 04:46:12	tibbe	edwardk: but the warning is probably good, but then we should fix mapM for 7.10 (if I'm right to believe that it doesn't break any code)
2013-08-31 04:46:12	edwardk	tibbe: i should get more on top of this
2013-08-31 04:46:27	tibbe	edwardk: me too, too little time as usual
2013-08-31 04:46:38	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-31 04:46:49	FreeFull	ski_: Well, sure, in Haskell you could just have some higher level thing that handles failure
2013-08-31 04:47:04	edwardk	tibbe: it'll be fine. 7.10 is going to do a lot of generalization. replacing the old mapM in Prelude, etc.
2013-08-31 04:47:07	ski_	FreeFull : the control flow of logic programming languages can't easily be encoded in plain C, e.g.
2013-08-31 04:47:26	edwardk	tibbe: minimizing the constraints is pretty much the least worrying thing on the radar
2013-08-31 04:47:34	tibbe	edwardk: that would be neat I think (given that we're doing Applicative => Monad)
2013-08-31 04:47:36	edwardk	the main concern is ensuring we don't lose foldr/build fusion
2013-08-31 04:47:56	elliott	is foldr itself getting generalised?
2013-08-31 04:47:56	tibbe	edwardk: I realized a while back that a strict mapM (or traverse) needs Monad though. I was a bit surprised at first.
2013-08-31 04:47:58	elliott	that iwll be so weird.
2013-08-31 04:47:58	edwardk	once we have that niggling concern out of the way, the rest of it is pretty much 'do the obvious stuff'
2013-08-31 04:48:01	elliott	*will
2013-08-31 04:48:21	tibbe	edwardk: who will make sure that fusion etc still works with generalized foldr?
2013-08-31 04:48:25	edwardk	tibbe: yeah i have a <$!> combinator for strict fmap that needs monad.
2013-08-31 04:48:38	tibbe	edwardk: me too (in cassava)
2013-08-31 04:48:47	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 04:48:57	<--	WanderingMonad (~principii@71-37-133-106.spkn.qwest.net) has quit (Remote host closed the connection)
2013-08-31 04:49:07	tibbe	edwardk: I went on a crush-all-the-thunks bash one day to get the memory usage down to the absolute minimum needed to hold the result
2013-08-31 04:49:12	ski_	edwardk,tibbe : hm, how does strictness here entail monads ? (related to the strictness monad in any way ?)
2013-08-31 04:49:17	edwardk	tibbe: well, we're going to try to plug the committee in a bit better into the mainline ghc dev process with 7.9, especially now that simon and igloo have moved on
2013-08-31 04:49:24	tibbe	edwardk: you can get quite a few thunks with the standard fmap, traverse, etc combinators
2013-08-31 04:49:38	tibbe	ski_: you need to look at the value to force it
2013-08-31 04:49:41	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Remote host closed the connection)
2013-08-31 04:50:00	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 04:50:01	tibbe	ski_: monad has (a -> m b) so you can force it before the next action
2013-08-31 04:50:03	<--	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:50:18	tibbe	edwardk: sounds good
2013-08-31 04:50:20	edwardk	so once 7.9 ramps up we'll try to get a version of things running with full AMP + Foldable/Traversable/Monoid generalization as early as possible, and see if any of the concerns about foldr/build are founded
2013-08-31 04:50:30	-->	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has joined #haskell
2013-08-31 04:50:38	ski_	tibbe : and when is it useful ?
2013-08-31 04:50:39	 *	tibbe needs to make a hashable, unordered-containers, containers, cabal, and cassava release the next few weeks
2013-08-31 04:50:49	tibbe	ski_: if you don't want thunks
2013-08-31 04:50:53	tel	foldable/traversable/monoid generalization is also slated for 7.10?
2013-08-31 04:50:56	edwardk	At least half the committee will be in Boston for ICFP. Dan and I live here, byorgey is nearby, etc.
2013-08-31 04:51:01	edwardk	tel: yeah
2013-08-31 04:51:13	tel	nice!
2013-08-31 04:51:15	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 245 seconds)
2013-08-31 04:51:24	tibbe	edwardk: I will be at haskell symposium and the haskell symposium
2013-08-31 04:51:38	ski_	tibbe : are you talking about `mapM'/`mapA' in some cases being strict like this, or a separate combinator (perhaps named `mapM') ?
2013-08-31 04:51:46	tibbe	edwardk: I took 2.5 months off work and I can't take another full week for icfp
2013-08-31 04:51:49	-->	Desheng3 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 04:52:04	tibbe	ski_: I made a separate strict mapM and fmap for that purpose
2013-08-31 04:52:09	ski_	ok
2013-08-31 04:52:12	edwardk	tibbe: btw- i've been working on trying to get a usable "cache oblivious lookahead array" -- which will give us an 'unboxed array-like Data.Map with amortized B-Tree asymptotics' haven't gotten the insert performance down to Map times yet though
2013-08-31 04:52:25	tibbe	ski_: this was in the context that we can now have mapM = traverse with only an Applicative constraint
2013-08-31 04:52:30	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 04:52:39	tibbe	edwardk: interesting
2013-08-31 04:52:49	ski_	tibbe : ok. i'm not seeing how that relates to the strictness, though
2013-08-31 04:52:51	tibbe	edwardk: what do you think about <$!>, traverse', etc in base btw?
2013-08-31 04:52:52	edwardk	tibbe: its not a Data.Map plug-in replacement though, it'd be very much its own beast, but it does have the benefit of being completely cache oblivious
2013-08-31 04:53:04	tibbe	ski_: try to write a strict mapM with only an Applicative constraint
2013-08-31 04:53:19	tibbe	edwardk: we should write a type class for maps
2013-08-31 04:53:21	edwardk	I'd be in favor of <$!> easily.   traverse' is an interesting prospect. i'd want to sit down and do some laws
2013-08-31 04:53:35	tibbe	edwardk: so both Data.Map, Data.HashMap can be an instance. We can do it with constraint kinds I think.
2013-08-31 04:53:46	tibbe	edwardk: that'd be great
2013-08-31 04:53:48	ski_	tibbe : so the strict version of `mapM' needs `Monad' -- anything else ?
2013-08-31 04:53:54	tibbe	edwardk: instead of everyone rolling their own
2013-08-31 04:53:59	tibbe	ski_: just Monad
2013-08-31 04:54:00	edwardk	the hell of such a typeclass is that you have to choose what to put in it, and the type extensions are sad =(
2013-08-31 04:54:00	elliott	I don't think you need ConstraintKinds, just MPTCs
2013-08-31 04:54:09	elliott	well, maybe ConstraintKinds is less fiddly.
2013-08-31 04:54:12	tibbe	ski_: I was initially surprise about this insight (that you need Monad)
2013-08-31 04:54:19	elliott	huge typeclasses are horrifying though
2013-08-31 04:54:25	ski_	tibbe : i mean, anything else being the lesson/point of this, than that realization ?
2013-08-31 04:54:32	tibbe	elliott: you need the type class constrain in there somewhere
2013-08-31 04:54:39	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-08-31 04:55:01	edwardk	tibbe: the strictness-needs-a-monad thing has been the only reason i've been considering something like a monadic traversal for lens
2013-08-31 04:55:05	tibbe	a benefit of such a type class would be that you can create new containers without writing 100 functions (many can be given for free with default impls)
2013-08-31 04:55:09	arkeet	I don't know how you'd do it with MPTCs.
2013-08-31 04:55:11	FreeFull	edwardk: Mathematical laws are so much nicer than legal laws
2013-08-31 04:55:13	edwardk	because that seems to be the only 'correct' monadic travrsal
2013-08-31 04:55:13	tibbe	edwardk: ah
2013-08-31 04:55:16	-->	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-31 04:55:27	tibbe	edwardk: right
2013-08-31 04:55:37	elliott	tibbe: it can go in the instance if you use an mptc
2013-08-31 04:55:46	elliott	but I guess key-polymorphic stuff gets a little uglier
2013-08-31 04:56:02	tibbe	elliott: I haven't seen a design with MPTC that I liked
2013-08-31 04:56:07	ski_	@remember FreeFull Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:07	lambdabot	I will remember.
2013-08-31 04:56:16	edwardk	elliott: the main thing i don't want to lose is the ability to have polymorphic recursion through a map.
2013-08-31 04:56:21	FreeFull	@quote FreeFull
2013-08-31 04:56:21	lambdabot	FreeFull says: Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:24	FreeFull	@quote FreeFull
2013-08-31 04:56:24	lambdabot	FreeFull says: Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:29	ski_	@quote
2013-08-31 04:56:29	lambdabot	EvanLaforge says: Then we can tell them about how we had to walk in the snow both ways uphill fighting space leaks with bare hands while they just have to read about it.
2013-08-31 04:56:32	edwardk	i use that all over the place
2013-08-31 04:56:35	FreeFull	I swear there was a different quote with me
2013-08-31 04:56:35	arkeet	I wouldn't mind if traverse' laws only gave definedness relations instead of actual equality
2013-08-31 04:57:02	edwardk	tibbe: i suppose if we do traverse' then fmap' is also in order
2013-08-31 04:57:04	arkeet	<= is almost as good as =
2013-08-31 04:57:13	FreeFull	Seems not
2013-08-31 04:57:16	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 04:57:33	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-08-31 04:57:39	FreeFull	arkeet: < is almost as good as <=
2013-08-31 04:57:40	edwardk	arkeet: ah for reasoning in the presence of bottoms?
2013-08-31 04:57:49	arkeet	yes
2013-08-31 04:58:00	tibbe	edwardk: yeah
2013-08-31 04:58:12	-->	ISF (~ivan@201.82.138.219) has joined #haskell
2013-08-31 04:58:14	FreeFull	4 am, sleep time
2013-08-31 04:58:20	ski_	night, FreeFull
2013-08-31 04:58:36	arkeet	FreeFull: no, = => <= but <= =/> <
2013-08-31 04:59:03	arkeet	=>
2013-08-31 04:59:07	edwardk	tibbe: remind me if i don't bring up the topic again after 7.9 starts up, because i want to make sure i remember and we haven't set up a core libraries committee issue tracker. either that or email core-libraries-committee@haskell.org about this issue.
2013-08-31 04:59:26	tibbe	edwardk: file a ticket! :)
2013-08-31 04:59:30	edwardk	tibbe: but i think the strict traversals are a very good idea
2013-08-31 04:59:31	tibbe	edwardk: CC both of us
2013-08-31 04:59:35	edwardk	heh
2013-08-31 04:59:38	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 04:59:52	tibbe	edwardk: file it on the ghc tracker for now
2013-08-31 04:59:53	FreeFull	arkeet: But   x <= y  ==  x < succ y
2013-08-31 05:00:04	tibbe	edwardk: my memory is terrible
2013-08-31 05:00:09	edwardk	likewise ;)
2013-08-31 05:00:15	edwardk	who are you again? =)
2013-08-31 05:00:30	arkeet	FreeFull: (a) that's only true of like integers, and (b) I'm talking about a different <=
2013-08-31 05:00:55	FreeFull	I might be talking about a different succ
2013-08-31 05:01:14	arkeet	ok, so what's succ on the rational numbers?
2013-08-31 05:01:18	ski_	there is no generic `succ' in domain theory
2013-08-31 05:01:33	arkeet	or, well, a partial order
2013-08-31 05:01:41	edwardk	tibbe: also did you see the post in the matrix multiplication series that talked about a bit twidling hack that may make some operations in IntMap go faster?
2013-08-31 05:01:43	<--	Desheng3 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 05:01:48	FreeFull	arkeet: Clearly adding an infinitinessal
2013-08-31 05:01:56	tibbe	edwardk: hehe
2013-08-31 05:02:00	FreeFull	For rationals
2013-08-31 05:02:06	edwardk	tibbe: i've had zero time to benchmark it, but from a logical perspective it can pay off
2013-08-31 05:02:08	arkeet	FreeFull: I give you a poset {a,b,c} defined by a < b and a < c
2013-08-31 05:02:11	arkeet	what is succ a?
2013-08-31 05:02:14	tibbe	edwardk: I didn't see it but someone mentioned it
2013-08-31 05:02:16	edwardk	https://www.fpcomplete.com/user/edwardk/revisiting-matrix-multiplication/part-4
2013-08-31 05:02:21	tibbe	edwardk: haven't had time to look I'm afraid
2013-08-31 05:02:34	FreeFull	arkeet: Well, that's a good point
2013-08-31 05:02:34	edwardk	basically it replaces the Prefix/Mask combo with the pair of the least and greatest entries in the map
2013-08-31 05:02:57	FreeFull	arkeet: succ a is some x such that a < x
2013-08-31 05:03:02	edwardk	and then uses the fact that a < b && a < xor a b    can be used to compare two integers by the position that their msb is at, rather than their full value.
2013-08-31 05:03:03	arkeet	which one?
2013-08-31 05:03:15	edwardk	that is enough to tell you which of the 6 cases intmap ever deals with you're in.
2013-08-31 05:03:17	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-31 05:03:26	arkeet	anyway, my point is that usually <= is more useful.
2013-08-31 05:03:29	edwardk	but now you have not only the msbs, but more information about the rest of the bits
2013-08-31 05:03:39	FreeFull	arkeet: I can't really dig my way out of this one
2013-08-31 05:03:41	-->	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has joined #haskell
2013-08-31 05:03:44	arkeet	:p
2013-08-31 05:03:52	ski_	FreeFull : `succ a' ought to be the unique `b' such that there is no `x' with `a < x /\ x < b' -- but such a `b' needn't exist -- and there may also be more than one such `b'
2013-08-31 05:03:54	edwardk	so you can quickly reject things that are outside of the range when searching or deleting
2013-08-31 05:03:57	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 05:04:03	<--	hiratara (~hiratara@h222123.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 260 seconds)
2013-08-31 05:04:04	arkeet	or no such b
2013-08-31 05:04:14	ski_	(which i said :)
2013-08-31 05:04:17	tibbe	edwardk: interesting, would be worth a benchmark
2013-08-31 05:04:17	arkeet	oh.
2013-08-31 05:04:22	edwardk	it gives faster rejections for deleting things that are missing or failed lookups, because it can happen way up the tree
2013-08-31 05:04:24	arkeet	> succ True
2013-08-31 05:04:25	lambdabot	  *Exception: Prelude.Enum.Bool.succ: bad argument
2013-08-31 05:04:32	edwardk	and you get easy access to the minimum and maximum key in the intmap
2013-08-31 05:04:43	FreeFull	> succ Eq
2013-08-31 05:04:44	lambdabot	  Not in scope: data constructor `Eq'
2013-08-31 05:04:44	lambdabot	 Perhaps you meant `EQ' (imported from ...
2013-08-31 05:04:47	FreeFull	> succ EQ
2013-08-31 05:04:47	edwardk	which means the common 'max key + 1' operations for IntMap become cheaper
2013-08-31 05:04:48	lambdabot	  GT
2013-08-31 05:04:56	arkeet	> iterate succ LT
2013-08-31 05:04:57	lambdabot	  [LT,EQ,GT,*Exception: Prelude.Enum.Ordering.succ: bad argument
2013-08-31 05:05:09	-->	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has joined #haskell
2013-08-31 05:05:19	tibbe	edwardk: I'm ashamed to say that I user pointer equality in unordered-containers to avoid allocation altogether if nothing was deleted
2013-08-31 05:05:21	edwardk	tibbe: i posted it with a call for benchmarks but nobody has descended into the criterion mines yt ;)
2013-08-31 05:05:28	FreeFull	There ought be a typeclass for circular orderings
2013-08-31 05:05:37	<--	breck7 (~breck7@c-98-210-196-114.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 05:05:41	-->	void64 (~luke@37.17.114.54) has joined #haskell
2013-08-31 05:05:42	edwardk	tibbe: i'm not above that. i'd be willing to see it in Data.Map too =P
2013-08-31 05:06:22	monochrom	FreeFull: lambda is intrinsically hard with: (take a breath, it's mouthful) mutable variables where both lvalue and rvalue use the same name. example: var v; ... (\x -> x+v)  do you want that "v" to refer to "the value at the time this lambda is built" or "do the dereference when the lambda is used"?  at the end, it's a bikeshed colour debate, or you have to add extra syntax to disambiguate.
2013-08-31 05:06:26	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 05:06:29	edwardk	lens is pushing 130 or so unsafe coerces at this point. i can't stand on moral high ground =P
2013-08-31 05:06:39	tibbe	edwardk: we could do it there, haven't gotten around to it. It makes delete >2x faster for misses
2013-08-31 05:06:53	-->	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has joined #haskell
2013-08-31 05:06:54	tibbe	edwardk: as there is no allocation
2013-08-31 05:06:57	edwardk	yeah
2013-08-31 05:07:00	haasn	does anybody know if gpipe still works? (ie. with updated packages / 7.6) I would be interested in writing pixel shaders using it
2013-08-31 05:07:12	haasn	maybe write a toy media player using it and hs-ffmpeg or whatever :P
2013-08-31 05:07:34	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 05:07:40	FreeFull	monochrom: I didn't think of mutability
2013-08-31 05:07:41	edwardk	so if i were to hypothetically head off and bang out a patch for it, you'd be favorably inclined?
2013-08-31 05:07:57	FreeFull	monochrom: Pure programming languages are making me forget
2013-08-31 05:07:58	ski_	monochrom : whence ?
2013-08-31 05:08:14	FreeFull	Anyway, SLEEP
2013-08-31 05:08:21	FreeFull	Maybe I'll dream of Haskell
2013-08-31 05:08:23	monochrom	now, look at Haskell. you have to first do "p <- v". now you have two names. you can write either (\x -> x+p) or (\x -> ... v ... too lazy to write). you know what the code wants at a glance.
2013-08-31 05:08:43	arkeet	monochrom: I think the former is the only one that makes sense.
2013-08-31 05:08:45	--	Gaelan is now known as GaelanAintAround
2013-08-31 05:08:48	arkeet	the one where it captures the value.
2013-08-31 05:08:53	arkeet	:c
2013-08-31 05:09:13	monochrom	SML is a similar story, with a different notation.
2013-08-31 05:09:23	tibbe	edwardk: sure
2013-08-31 05:09:32	tibbe	edwardk: you can look at unordered-containers
2013-08-31 05:09:38	FreeFull	arkeet: It captures a value either way
2013-08-31 05:09:47	edwardk	anyways the main things i'd expect my msb comparison trick to pay off for would be hedge unions, false deletes and false searches, it otherwise turns a couple of masks and ands and compares into 2-3 xors and compares
2013-08-31 05:09:48	arkeet	the value at the time the lambda is made.
2013-08-31 05:09:48	tibbe	edwardk: where I have ptrEq = reallyUnsafePtrEquality ;)
2013-08-31 05:09:54	edwardk	heh
2013-08-31 05:10:03	tibbe	edwardk: much shorter
2013-08-31 05:10:07	-->	Philonous_ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has joined #haskell
2013-08-31 05:10:09	tibbe	edwardk: gotta go I'm afraid, ttyl
2013-08-31 05:10:19	edwardk	i'll keep chasing after getting the COLA down to something fast enough to compete with you
2013-08-31 05:10:28	tibbe	cool
2013-08-31 05:10:33	edwardk	right now its 3x slower but contiguous storage for inserts, searches should be faster though
2013-08-31 05:10:35	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-08-31 05:10:57	-->	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-08-31 05:10:57	-->	ssbr (~ssbr@198.144.189.184) has joined #haskell
2013-08-31 05:11:03	--	ssbr is now known as Guest53958
2013-08-31 05:11:09	<--	Philonous (~Philonous@dslb-188-106-143-163.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-08-31 05:11:20	<--	Guest53958 (~ssbr@198.144.189.184) has quit (Changing host)
2013-08-31 05:11:20	-->	Guest53958 (~ssbr@python/site-packages/ssbr) has joined #haskell
2013-08-31 05:11:40	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 05:11:53	--	Guest53958 is now known as ssbr`
2013-08-31 05:12:13	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 05:12:21	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-08-31 05:12:33	Ralith	haasn: congrats
2013-08-31 05:14:04	<--	ye_ (~ye@nyufwa-wlessauthclients-07.natpool.nyu.edu) has quit (Remote host closed the connection)
2013-08-31 05:15:36	-->	kooga (~kooga@142.6.30.125.dy.iij4u.or.jp) has joined #haskell
2013-08-31 05:15:41	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 05:18:50	-->	generic (~generic@p5798F435.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 05:20:23	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 05:21:56	joelteon	why doesn't hClose happen immediately?
2013-08-31 05:22:08	joelteon	it returns but the handle isn't *actually* closed
2013-08-31 05:22:12	joelteon	until someone tries to write to it
2013-08-31 05:22:15	<--	shanse (~generic@p57B2D332.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-08-31 05:22:16	--	generic is now known as shanse
2013-08-31 05:22:19	-->	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 05:22:52	-->	stacky (18905d58@gateway/web/freenode/ip.24.144.93.88) has joined #haskell
2013-08-31 05:23:01	m3ga	joelteon: that is just one of the many problems with lazy I/O
2013-08-31 05:23:14	joelteon	well, can I force it?
2013-08-31 05:23:16	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Quit: leaving)
2013-08-31 05:23:18	<--	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:23:32	-->	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has joined #haskell
2013-08-31 05:24:14	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:24:23	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-08-31 05:24:26	m3ga	joelteon: not possible to force it as far as i know. solution is to use one of iteratee/enumerator/conduit/pipe/stream-io/machines libraries
2013-08-31 05:24:52	m3ga	i prefer conduit myself, mainly because it is used in yesod.
2013-08-31 05:24:56	Cale	joelteon: The handle will be closed automatically when the entire file is finished being read, or when the garbage collector collects it.
2013-08-31 05:25:09	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 05:25:35	Cale	You give up direct control over the handle when you apply hGetContents.
2013-08-31 05:26:01	Cale	(I'm assuming you're talking about hGetContents)
2013-08-31 05:26:24	ski_	joelteon : you should not `hClose' a handle passed to `hGetContents'
2013-08-31 05:26:46	arkeet	lazy IO =(
2013-08-31 05:26:49	Cale	If you want direct control over the handle, don't use lazy hGetContents. One of the easiest ways to avoid using lazy hGetContents is just to use the strict one from Data.Text or Data.ByteString
2013-08-31 05:26:54	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:26:56	joelteon	oh, I use hGetChar
2013-08-31 05:27:07	joelteon	does that count?
2013-08-31 05:27:13	Cale	If you're using hGetChar, you're allowed to apply hClose yourself.
2013-08-31 05:27:34	<--	tikhon (~user@adsl-75-36-188-216.dsl.pltn13.sbcglobal.net) has quit (Read error: Operation timed out)
2013-08-31 05:27:42	joelteon	Right, well, the question was how do I make it close the handle when hClose returns
2013-08-31 05:27:43	-->	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has joined #haskell
2013-08-31 05:27:55	Cale	That... that's what hClose does.
2013-08-31 05:27:58	ski_	Cale : i'd expect the strict ones apply `hClose' themselves as well ?
2013-08-31 05:28:22	-->	otto_s (~user@cotb-4d05b9dc.pool.mediaWays.net) has joined #haskell
2013-08-31 05:28:35	Cale	ski_: yeah
2013-08-31 05:28:41	joelteon	ok
2013-08-31 05:28:46	joelteon	well that's the source of my question then
2013-08-31 05:29:05	Cale	joelteon: The only thing that hClose does is to close the handle it's applied to.
2013-08-31 05:29:06	arkeet	why do you think it doesn't close?
2013-08-31 05:29:15	joelteon	ok, everybody just hang on a minute
2013-08-31 05:29:22	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-31 05:29:29	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-08-31 05:29:55	 *	hackagebot bytes 0.11.1 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.11.1 (EdwardKmett)
2013-08-31 05:30:10	joelteon	aha
2013-08-31 05:30:11	ski_	(imo, applying `hClose' to a handle that has been passed to `hGetContents' should either be an error, or do nothing)
2013-08-31 05:30:12	geekosaur	I didn;t think the lazy I/O thing had anything to do with it...
2013-08-31 05:30:14	joelteon	oh, hClose is actually hanging
2013-08-31 05:30:18	joelteon	it's not returning
2013-08-31 05:30:29	joelteon	I had it at the end of a do block so I didn't realize
2013-08-31 05:30:52	ski_	perhaps some code would be in order at this point
2013-08-31 05:30:52	geekosaur	what do you have open on the handle?
2013-08-31 05:31:08	joelteon	a connection to an IRC client
2013-08-31 05:31:36	joelteon	hClose returns when the client attemps to send a PING command (after a few seconds)
2013-08-31 05:31:39	-->	dennylin93 (~dennylin9@cnmc.tw) has joined #haskell
2013-08-31 05:31:40	<--	otto_s_ (~user@cotb-4db3410c.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:32:15	arkeet	are you actually waiting for input?
2013-08-31 05:32:17	geekosaur	I am tempted to say something has the socket locked in the I/O manager
2013-08-31 05:32:31	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 245 seconds)
2013-08-31 05:32:32	arkeet	code would be good.
2013-08-31 05:32:38	geekosaur	^^
2013-08-31 05:32:40	joelteon	this is a pretty complex app
2013-08-31 05:32:44	joelteon	so I'll try to make a simplified version
2013-08-31 05:32:54	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-08-31 05:33:02	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-08-31 05:33:05	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 05:33:43	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Read error: Operation timed out)
2013-08-31 05:33:46	<--	binroot (~binroot@ip98-169-217-175.dc.dc.cox.net) has quit
2013-08-31 05:33:57	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-08-31 05:34:01	-->	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has joined #haskell
2013-08-31 05:34:09	<--	kooga (~kooga@142.6.30.125.dy.iij4u.or.jp) has left #haskell (".")
2013-08-31 05:34:20	<--	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has quit (Remote host closed the connection)
2013-08-31 05:34:45	-->	recycle (~recycle@2600:1012:b00b:6271:f98d:9c1e:7831:7da6) has joined #haskell
2013-08-31 05:34:46	-->	lemao (~lemao@2a02:200:1fff:5:750d:9f77:d553:9bb5) has joined #haskell
2013-08-31 05:34:54	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-08-31 05:36:33	<--	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-08-31 05:38:10	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 05:38:24	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-08-31 05:38:30	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:38:39	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell
2013-08-31 05:39:04	-->	luksow (~luke@apn-46-169-89-177.dynamic.gprs.plus.pl) has joined #haskell
2013-08-31 05:39:10	<--	oleo (~oleo@xdsl-78-35-166-200.netcologne.de) has quit (Ping timeout: 245 seconds)
2013-08-31 05:39:30	<--	lemao (~lemao@2a02:200:1fff:5:750d:9f77:d553:9bb5) has quit (Ping timeout: 264 seconds)
2013-08-31 05:39:59	-->	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has joined #haskell
2013-08-31 05:41:00	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-08-31 05:41:02	<--	path[l] (~vsi@173.252.71.189) has quit (Read error: Connection reset by peer)
2013-08-31 05:42:12	-->	Desheng3 (~Desheng@166.181.67.245) has joined #haskell
2013-08-31 05:42:17	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:42:34	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-08-31 05:43:10	<--	Croms (~dv@92.109.224.112) has quit (Quit: Croms)
2013-08-31 05:43:29	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-08-31 05:43:49	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 05:45:30	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 05:46:39	edwardk	haasn: iterate (\z -> z^2+c) ^? taking 100 folded.filtered diverges.asIndex   can probably use iterated
2013-08-31 05:46:41	edwardk	:t iterated
2013-08-31 05:46:51	edwardk	:t Control.Lens.iterated
2013-08-31 05:46:52	lambdabot	(Applicative f, Contravariant f) => (a -> a) -> (a -> f a) -> a -> f a
2013-08-31 05:47:08	edwardk	so then you can move that over to the right
2013-08-31 05:47:50	edwardk	taking 100 (iterated $ \z -> z^c+c).filtered diverges.asIndex
2013-08-31 05:49:17	<--	void64 (~luke@37.17.114.54) has quit (Ping timeout: 256 seconds)
2013-08-31 05:49:26	<--	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-08-31 05:50:03	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 05:50:18	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 05:50:32	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 05:50:54	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-08-31 05:51:05	-->	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 05:51:16	joelteon	here we go
2013-08-31 05:51:18	joelteon	https://gist.github.com/joelteon/6396126
2013-08-31 05:51:39	joelteon	I'm guessing it's because the reading thread is blocking it
2013-08-31 05:54:00	<--	nasarde (~user@OL203-132.fibertel.com.ar) has quit (Remote host closed the connection)
2013-08-31 05:54:13	-->	nasarde (~user@OL203-132.fibertel.com.ar) has joined #haskell
2013-08-31 05:54:27	joelteon	-threaded doesn't help
2013-08-31 05:56:05	<--	nasarde (~user@OL203-132.fibertel.com.ar) has quit (Client Quit)
2013-08-31 05:58:06	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 05:58:44	ski_	edwardk : contravariant applicative ?
2013-08-31 05:59:01	edwardk	contravariant + applicative = monoid
2013-08-31 05:59:08	edwardk	the argument is necessarily phantom
2013-08-31 05:59:25	ski_	`Contravariant' being contravariant functor ?
2013-08-31 05:59:30	edwardk	:t contramap absurd
2013-08-31 05:59:31	lambdabot	Not in scope: `absurd'
2013-08-31 05:59:35	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:59:37	edwardk	:t fmap Data.Void.absurd
2013-08-31 05:59:38	lambdabot	Functor f => f Data.Void.Void -> f b
2013-08-31 05:59:41	edwardk	:t contramap Data.Void.absurd
2013-08-31 05:59:42	lambdabot	Contravariant f => f b -> f Data.Void.Void
2013-08-31 05:59:48	edwardk	:t contramap Data.Void.absurd . fmap Data.Void.absurd
2013-08-31 05:59:49	lambdabot	(Functor f, Contravariant f) => f Data.Void.Void -> f Data.Void.Void
2013-08-31 05:59:56	edwardk	:t fmap Data.Void.absurd . contramap Data.Void.absurd
2013-08-31 05:59:57	lambdabot	(Functor f, Contravariant f) => f b1 -> f b
2013-08-31 06:00:08	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 06:00:08	shachaf	:t contramap (const ()) . fmap (const ())
2013-08-31 06:00:10	joelteon	don't all empty data decls have inhabitants?
2013-08-31 06:00:11	lambdabot	(Functor f, Contravariant f) => f a1 -> f a
2013-08-31 06:00:13	edwardk	so the argument can be freely changed to anything you want
2013-08-31 06:00:15	joelteon	zero* inhabitants
2013-08-31 06:00:33	edwardk	joelteon: the logic works here even if you invert and go to () instead.
2013-08-31 06:00:39	shachaf	() is just as valid as Void there.
2013-08-31 06:00:40	edwardk	going through Void is just clearer
2013-08-31 06:00:47	joelteon	yeah, but I mean the existence of Void itself
2013-08-31 06:00:52	<--	Bergle_1 (~berg@101.165.6.203) has left #haskell
2013-08-31 06:00:57	 *	shachaf sighs at multi-second latency.
2013-08-31 06:01:10	joelteon	is Void just a package that exports an empty data declaration and some helpers?
2013-08-31 06:01:19	edwardk	joelteon: we often 'pretend' when playing with haskell as a category. we use Void as the placeholder for the uninhabited data type that would exist if we didn't have all the other nice things
2013-08-31 06:01:19	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 06:01:24	edwardk	joelteon yes
2013-08-31 06:01:33	joelteon	ohhhhhhhhhhhhhhhhhhhhhhhh
2013-08-31 06:01:50	joelteon	ok, I thought it was doing some deep type-level magic or something
2013-08-31 06:02:07	 *	ski_ used `killThread :: SystemM Void' in a monad for cooperative threads
2013-08-31 06:02:13	edwardk	joelteon: Void is a placeholder for a canonical uninhabited data type. we often need a name for it, so it gives you a canonical one to pick
2013-08-31 06:02:20	joelteon	ok neat
2013-08-31 06:02:22	edwardk	its like saying () is the unit data type
2013-08-31 06:02:28	joelteon	that makes much more sense
2013-08-31 06:02:38	edwardk	we could make our own data Unit = Unit  -- but it'd be tedius and cripple interoperability
2013-08-31 06:02:51	-->	yogert (~Adium@74.83.24.51) has joined #haskell
2013-08-31 06:02:58	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:03:19	<--	luksow (~luke@apn-46-169-89-177.dynamic.gprs.plus.pl) has quit (Ping timeout: 260 seconds)
2013-08-31 06:03:28	edwardk	i tend to return things like 'IO a' for absurd results, and when i accept them accept Foo Void when i require that it not give me any
2013-08-31 06:03:44	edwardk	that way i don't have to cast with 'absurd' administratively.
2013-08-31 06:04:20	shachaf	In edwardkland _|_ is a "nice thing"
2013-08-31 06:04:52	edwardk	shachaf: fix is nice, hylo is nice, etc.
2013-08-31 06:04:58	ski_	(hm, "kland" sounds mildly dutch in my ears ..)
2013-08-31 06:05:50	-->	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has joined #haskell
2013-08-31 06:06:46	ski_	edwardk : and similarly accept things like `IO a' for trivial (monadic) inputs, while return things like `IO ()' for trivial results ?
2013-08-31 06:06:57	edwardk	yep
2013-08-31 06:07:50	edwardk	it avoids similar administrative () <$ 's
2013-08-31 06:08:03	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:08:07	ski_	hm .. i wonder whether one could state any similar rules-of-thumb for `(,)' and `Either'
2013-08-31 06:08:11	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 06:08:27	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-08-31 06:08:35	<--	pentace (~user@p5B14C91A.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-08-31 06:09:59	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Quit: Ex-Chat)
2013-08-31 06:10:14	ski_	instead of `IO (Either a b)', return `forall c. (a -> IO c) -> (b -> IO c) -> IO c' or what ?
2013-08-31 06:10:27	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 06:10:52	ski_	or perhaps just `forall c. (a -> c) -> (b -> c) -> IO c'
2013-08-31 06:11:41	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 06:12:42	<--	cads (~m@adsl-208-61-1-166.asm.bellsouth.net) has quit (Ping timeout: 276 seconds)
2013-08-31 06:12:44	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-08-31 06:12:46	ski_	edwardk : though i think i wouldn't overly mind having to do `() <$ ...' (or `_ <- ...') for actual results being ignored
2013-08-31 06:13:02	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 06:13:26	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 06:13:33	-->	eduardo (~user@177.32.67.203) has joined #haskell
2013-08-31 06:13:47	joelteon	also, does anyone have an idea as to how to solve my problem?
2013-08-31 06:15:49	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:16:09	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 06:16:40	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 268 seconds)
2013-08-31 06:17:30	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-08-31 06:17:52	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 06:17:56	<--	eduardo (~user@177.32.67.203) has quit (Ping timeout: 245 seconds)
2013-08-31 06:18:49	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 06:18:57	edwardk	ski_: i don't like the operational performance aspect of it, and its quite annoying in a parser to have to choose between having common leaf level parsers for keywords or chars having to return a useful result or not
2013-08-31 06:19:41	-->	lesur (~lesur@n220246167052.netvigator.com) has joined #haskell
2013-08-31 06:19:47	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 06:20:00	<--	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-08-31 06:20:34	<--	lesur (~lesur@n220246167052.netvigator.com) has quit (Remote host closed the connection)
2013-08-31 06:20:40	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 06:20:41	edwardk	() <$ is only free if the compiler knows the exact monad/functor being used and has a place to insert the change
2013-08-31 06:21:20	ski_	or can do something `CoYoneda'-like i suppose
2013-08-31 06:21:57	ski_	(not following the keywords vs. chars, though)
2013-08-31 06:22:23	ski_	monochrom : re "mutable variables where both lvalue and rvalue use the same name", how about "Work with pointers is simple, no need to dereference or getting address, all this is automatically inserted. Example: $int** ptrptr; $int i = ptrptr; - here in i = ptrptr; is automatical double dereferencing a pointer." at <http://ya-lang.com/> ?
2013-08-31 06:22:24	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 06:22:55	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Ping timeout: 245 seconds)
2013-08-31 06:24:15	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Read error: Operation timed out)
2013-08-31 06:24:23	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 06:24:40	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 06:25:01	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-08-31 06:25:17	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:25:42	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 264 seconds)
2013-08-31 06:26:20	<--	tel (~tel@71.206.43.93) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 06:26:39	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 06:26:40	monochrom	answer: Dunning-Kruger effect on people who invent languages
2013-08-31 06:27:27	joelteon	oh hey, pipes-safe fixes the problem
2013-08-31 06:28:53	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 248 seconds)
2013-08-31 06:29:24	<--	recycle (~recycle@2600:1012:b00b:6271:f98d:9c1e:7831:7da6) has quit (Remote host closed the connection)
2013-08-31 06:29:51	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-08-31 06:30:01	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-08-31 06:30:10	<--	mno2_ (~mno2@1.34.43.236) has quit (Quit: mno2_)
2013-08-31 06:30:38	monochrom	joelteon: I am not impressed with one thread doing hgetchar and another thread doing hclose. IMO no one is supposed to do that. in any case, currently, hclose hangs because hgetchar starts first and is in progress. I call it "not meant to be solved".
2013-08-31 06:30:51	joelteon	ok
2013-08-31 06:30:54	joelteon	what should I do instead
2013-08-31 06:31:09	monochrom	use killThread first
2013-08-31 06:31:23	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-08-31 06:31:33	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 06:32:23	-->	a_ (~a@115-64-96-169.static.tpgi.com.au) has joined #haskell
2013-08-31 06:32:46	-->	tac (~tac-tics@2602:306:bdb4:5100:84b4:e111:4ba2:2344) has joined #haskell
2013-08-31 06:33:03	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Quit: leaving)
2013-08-31 06:33:16	monochrom	Handle uses MVars to store its states precisely because you people abuse it like this
2013-08-31 06:33:39	monochrom	IOW hgetchar has acquired a lock and hclose is waiting on it
2013-08-31 06:34:00	monochrom	I feel really offended. irrationally. don't mind me.
2013-08-31 06:35:07	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-08-31 06:35:09	<--	stacky (18905d58@gateway/web/freenode/ip.24.144.93.88) has quit (Quit: Page closed)
2013-08-31 06:36:25	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-08-31 06:37:05	-->	arquebus (~frath@c-107-3-164-239.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:37:36	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Quit: quit)
2013-08-31 06:38:08	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 06:39:18	-->	pratz (~pratz@122.179.148.23) has joined #haskell
2013-08-31 06:39:27	<--	Wuzzy (~Wuzzy@p549FBF3F.dip0.t-ipconnect.de) has quit (Quit: Wuzzy)
2013-08-31 06:39:30	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 06:40:11	<--	a_ (~a@115-64-96-169.static.tpgi.com.au) has quit (Quit: Leaving)
2013-08-31 06:42:28	-->	joachifm_ (~joachifm@66.37-191-130.fiber.lynet.no) has joined #haskell
2013-08-31 06:42:41	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 06:43:31	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-08-31 06:43:55	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Client Quit)
2013-08-31 06:44:19	<--	joachifm (~joachifm@ulrik.uio.no) has quit (Disconnected by services)
2013-08-31 06:44:59	--	joachifm_ is now known as joachifm
2013-08-31 06:45:12	<--	arquebus (~frath@c-107-3-164-239.hsd1.ca.comcast.net) has quit (Quit: Konversation terminated!)
2013-08-31 06:46:56	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 06:48:02	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-08-31 06:48:12	-->	tearful (~user@67.51.113.178) has joined #haskell
2013-08-31 06:48:42	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 264 seconds)
2013-08-31 06:49:02	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 240 seconds)
2013-08-31 06:49:45	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-08-31 06:51:02	-->	ntus1017 (~ntus1017@123.21.91.156) has joined #haskell
2013-08-31 06:51:12	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 06:51:33	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-31 06:51:37	joelteon	o_o
2013-08-31 06:52:09	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 240 seconds)
2013-08-31 06:52:33	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-08-31 06:53:36	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:54:20	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:54:27	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-08-31 06:54:28	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Ping timeout: 264 seconds)
2013-08-31 06:54:29	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:54:34	Sonarpulse	Is there anyways to do an existentail type like
2013-08-31 06:54:58	 *	hackagebot cryptohash 0.10.0 - collection of crypto hashes, fast, pure and practical  http://hackage.haskell.org/package/cryptohash-0.10.0 (VincentHanquez)
2013-08-31 06:55:13	Sonarpulse	data X Constraint = forall a. Constraint a => X a
2013-08-31 06:55:18	-->	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has joined #haskell
2013-08-31 06:55:32	<--	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has quit (Client Quit)
2013-08-31 06:55:47	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 06:55:59	-->	[[zz]] (~q@node-o34.pool-101-108.dynamic.totbb.net) has joined #haskell
2013-08-31 06:56:04	<--	pratz (~pratz@122.179.148.23) has quit (Remote host closed the connection)
2013-08-31 06:56:43	<--	ntus1017 (~ntus1017@123.21.91.156) has quit (Remote host closed the connection)
2013-08-31 06:57:23	-->	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has joined #haskell
2013-08-31 07:00:07	ski_	Sonarpulse : try with `constraint' instead of `Constraint' ?
2013-08-31 07:00:19	Sonarpulse	http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/constraint-kind.html
2013-08-31 07:00:21	Sonarpulse	relevant?
2013-08-31 07:00:29	Sonarpulse	if so, I think i got it
2013-08-31 07:00:38	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-08-31 07:00:47	ski_	or else try `data X constraint where MkX :: constraint a => a -> X constraint'
2013-08-31 07:01:01	ski_	yes, you need the constraint kind extension
2013-08-31 07:01:06	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-08-31 07:01:12	<--	joachifm (~joachifm@66.37-191-130.fiber.lynet.no) has quit (Quit: leaving)
2013-08-31 07:02:05	<--	tac (~tac-tics@2602:306:bdb4:5100:84b4:e111:4ba2:2344) has quit (Ping timeout: 245 seconds)
2013-08-31 07:05:01	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-08-31 07:06:04	-->	typeclassy (~user@ool-435124b5.dyn.optonline.net) has joined #haskell
2013-08-31 07:07:05	Sonarpulse	thanks ski_
2013-08-31 07:07:07	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 07:07:29	<--	yogert (~Adium@74.83.24.51) has quit (Quit: Leaving.)
2013-08-31 07:08:25	-->	ersran9_ (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 07:08:35	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-08-31 07:08:39	-->	void64 (~luke@37.17.112.226) has joined #haskell
2013-08-31 07:09:07	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 07:09:26	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 07:09:35	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Ping timeout: 245 seconds)
2013-08-31 07:10:17	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-08-31 07:10:33	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-08-31 07:10:39	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-08-31 07:11:55	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 07:12:12	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 07:12:46	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-08-31 07:14:13	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 07:16:24	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 07:16:40	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 07:17:13	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Ping timeout: 245 seconds)
2013-08-31 07:18:06	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 264 seconds)
2013-08-31 07:18:32	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 07:18:38	-->	ioanel (~Thunderbi@188.25.11.158) has joined #haskell
2013-08-31 07:18:40	<--	MoALTz (~no@host86-137-42-235.range86-137.btcentralplus.com) has quit (Quit: Leaving)
2013-08-31 07:20:53	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 07:20:58	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 07:21:05	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 07:21:13	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-08-31 07:21:39	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-08-31 07:23:53	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-08-31 07:24:08	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 07:25:36	-->	lemao (~lemao@46-253-188-36.dynamic.monzoon.net) has joined #haskell
2013-08-31 07:26:13	<--	ksf (~ksf@d086145.adsl.hansenet.de) has quit (Quit: Leaving)
2013-08-31 07:26:21	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 268 seconds)
2013-08-31 07:26:40	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 245 seconds)
2013-08-31 07:28:45	<--	Jesin (~Jessin_@Dyn157039.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-08-31 07:30:36	<--	void64 (~luke@37.17.112.226) has quit (Ping timeout: 240 seconds)
2013-08-31 07:32:31	<--	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has quit (Ping timeout: 268 seconds)
2013-08-31 07:38:01	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-08-31 07:39:40	-->	cleek (~cleek@187.191.31.157) has joined #haskell
2013-08-31 07:39:45	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 07:40:00	 *	hackagebot crypto-random 0.0.1 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.1 (VincentHanquez)
2013-08-31 07:40:10	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Quit: Pozdrav)
2013-08-31 07:40:33	jfischoff	are there any functor like type classes that work with types of kind: (* -> *) -> (* -> *) -> * -> * ?
2013-08-31 07:41:50	-->	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:42:27	<--	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 07:42:41	-->	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:43:30	<--	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 07:44:09	<--	croyd (637f3640@gateway/web/freenode/ip.99.127.54.64) has quit (Ping timeout: 250 seconds)
2013-08-31 07:44:09	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:46:03	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Read error: No route to host)
2013-08-31 07:48:41	<--	blackdog (~blackdog@static.211.106.9.5.clients.your-server.de) has left #haskell
2013-08-31 07:48:51	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 07:50:35	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 07:51:58	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 07:52:03	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-08-31 07:53:03	-->	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has joined #haskell
2013-08-31 07:55:12	<--	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has quit (Quit: Leaving)
2013-08-31 07:55:58	-->	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has joined #haskell
2013-08-31 07:57:11	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 07:57:12	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Quit: leaving)
2013-08-31 07:57:24	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 07:58:15	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 07:58:29	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-08-31 07:59:38	-->	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-31 07:59:41	<--	cleek (~cleek@187.191.31.157) has quit (Quit: Saliendo)
2013-08-31 07:59:54	-->	Taneb (~nathan@host-92-23-115-247.as13285.net) has joined #haskell
2013-08-31 07:59:58	-->	ananthakumaran (~Adium@117.192.135.70) has joined #haskell
2013-08-31 08:00:02	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:00:25	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:00:41	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 08:02:03	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:02:06	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:05:24	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 08:05:42	-->	cleek_ (~cleek-hq@187.191.31.157) has joined #haskell
2013-08-31 08:05:45	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 08:06:24	bootcode	is there a way to set a type context on an associated type synonym?
2013-08-31 08:06:42	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:06:42	<--	lemao (~lemao@46-253-188-36.dynamic.monzoon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 08:07:05	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 08:07:36	bootcode	class HasLength a where type Length a ... -- want to have constraint Num (Length a)
2013-08-31 08:07:44	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 08:08:37	-->	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has joined #haskell
2013-08-31 08:08:45	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-08-31 08:08:49	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-08-31 08:09:36	-->	bitonic` (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-08-31 08:09:58	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:10:00	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-08-31 08:10:00	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:13:18	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 08:13:29	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 08:14:25	dmwit	bootcode: You can put it in the context of the instance declaration.
2013-08-31 08:14:28	mm_freak	Data.Data.Data allows to extract values, right?
2013-08-31 08:14:53	dmwit	bootcode: ...or the class declaration if you want.
2013-08-31 08:14:57	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Quit: corkexaminer)
2013-08-31 08:15:04	dmwit	class Num (Length a) => HasLength a where type Length a
2013-08-31 08:15:15	mm_freak	which requires FlexibleContexts
2013-08-31 08:15:26	dmwit	Hm, does it? =)
2013-08-31 08:15:30	mm_freak	yeah
2013-08-31 08:15:42	dmwit	okay =)
2013-08-31 08:15:54	dmwit	If you've gone all the way to TypeFamilies, though, FlexibleContexts shouldn't bother you.
2013-08-31 08:15:55	mm_freak	type families, despite being elegant, are often awkward to work with
2013-08-31 08:16:02	mm_freak	sometimes so awkward that i go back to fundeps
2013-08-31 08:16:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-08-31 08:16:50	mm_freak	well, associated types, not type families in general
2013-08-31 08:17:12	dmwit	associated types are GHC's greatest lie =P
2013-08-31 08:17:15	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 08:17:35	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 08:17:53	-->	fylwind_ (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has joined #haskell
2013-08-31 08:17:58	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-08-31 08:20:15	bootcode	dmwit: thank you
2013-08-31 08:20:16	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-31 08:20:48	<--	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-08-31 08:21:03	-->	zett_zelett (~zett_zele@p5DE7AC83.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 08:21:42	<--	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has quit (Ping timeout: 264 seconds)
2013-08-31 08:21:51	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-08-31 08:22:23	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:22:25	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Client Quit)
2013-08-31 08:22:48	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 08:22:49	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-08-31 08:23:05	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-08-31 08:23:25	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 08:23:40	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 08:24:14	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Quit: leaving)
2013-08-31 08:24:29	<--	Alpha64_ (~Alpha64@190.191.162.115) has quit (Quit: Leaving)
2013-08-31 08:24:32	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has quit (Read error: Connection reset by peer)
2013-08-31 08:24:37	<--	typeclassy (~user@ool-435124b5.dyn.optonline.net) has quit (Ping timeout: 248 seconds)
2013-08-31 08:24:38	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-31 08:24:42	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-08-31 08:26:35	mm_freak	what's a good, ideally short english word for "continuous event"?  like an explosion, which stretches over a time interval
2013-08-31 08:26:51	joelteon	o_o
2013-08-31 08:27:06	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 08:27:16	-->	tov (~tov@eecs-login.seas.harvard.edu) has joined #haskell
2013-08-31 08:27:27	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Read error: Connection reset by peer)
2013-08-31 08:27:38	fylwind_	transition?
2013-08-31 08:27:55	--	fylwind_ is now known as fylwind
2013-08-31 08:27:56	bootcode	dmwit: if I have context (HasLength a) on a function, it won't automatically take up the (Num (Length a)) constraint? Error message seems to indicate this.
2013-08-31 08:28:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 08:28:51	-->	recycle (~recycle@cpe-76-88-36-147.san.res.rr.com) has joined #haskell
2013-08-31 08:28:55	mm_freak	ok, think of a real function defined only for a finite interval
2013-08-31 08:28:57	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-08-31 08:29:01	dmwit	?quote dmwit first.three
2013-08-31 08:29:01	lambdabot	dmwit says: Type families are not injective. Your first three inscrutable error messages with type families in them will be because you don't understand this rule.
2013-08-31 08:29:10	mm_freak	like the half circle: \x -> sqrt (1 - x^2)
2013-08-31 08:29:23	mm_freak	and now consider the horizontal axis to be time
2013-08-31 08:29:31	mm_freak	is there a good short name for those kinds of functions?
2013-08-31 08:29:35	dmwit	bootcode: But that's just a guess. Post your code and error and we'll check if that's really the problem.
2013-08-31 08:30:02	-->	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 08:30:27	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 08:30:37	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-08-31 08:30:37	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-08-31 08:30:37	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 08:30:42	-->	fl00r (~fl00r@pool-71-189-238-151.lsanca.fios.verizon.net) has joined #haskell
2013-08-31 08:30:57	mm_freak	or think of morse code, which is not discrete blips, but continuous peeps
2013-08-31 08:31:11	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Quit: WeeChat 0.4.1)
2013-08-31 08:31:12	 *	ski_ is only thinking of "wavelet"
2013-08-31 08:31:43	mm_freak	it may be Time -> Maybe String instead of Time -> Maybe Double =)
2013-08-31 08:32:09	<--	Taneb (~nathan@host-92-23-115-247.as13285.net) has quit (Quit: Leaving)
2013-08-31 08:32:32	mm_freak	Event is appropriate, but already used =/
2013-08-31 08:32:37	bootcode	dmwit: That property needs some study from me indeed. The error was caused by having the fun take (Length a) as arg, but I didn't specify the HasLength context.
2013-08-31 08:33:03	bootcode	dmwit: Thought the context is kind of implicit, given that `Length a` doesn't have an actual value otherwise
2013-08-31 08:34:03	<--	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Ping timeout: 260 seconds)
2013-08-31 08:34:48	dmwit	bootcode: Yes, the problem is that knowing what type "Length a" is doesn't tell you anything about what type "a" is.
2013-08-31 08:34:54	<--	oldthird (~oldthird@24-246-13-189.cable.teksavvy.com) has quit (Quit: Leaving)
2013-08-31 08:35:25	<--	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has quit (Ping timeout: 268 seconds)
2013-08-31 08:35:26	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 245 seconds)
2013-08-31 08:36:01	<--	hoverbear (~andrew@unaffiliated/hoverbear) has quit (Quit: hoverbear)
2013-08-31 08:37:10	Sonarpulse	If you don't need isEmpty, unGet, or multiple readers (and fairness), which is better: TChan or Chan?
2013-08-31 08:37:39	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (Ping timeout: 276 seconds)
2013-08-31 08:37:55	dmwit	bootcode: ...and, not to put too fine a point on it, one must know what type "a" is to know how to construct the "Num" dictionary for "Length a" (in GHC's implementation of type classes).
2013-08-31 08:38:54	dmwit	Sonarpulse: TChan has all the advantages of STM. Chan has all the advantages of no STM.
2013-08-31 08:39:20	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: P00f.)
2013-08-31 08:39:43	Sonarpulse	I am making a game (including engine)
2013-08-31 08:39:48	dmwit	Advantages of STM: everything is composable. Advantages of no STM: no transaction overhead, different wakeup policy might be exploitable.
2013-08-31 08:39:57	Sonarpulse	ok
2013-08-31 08:40:17	Sonarpulse	my plan is to have a graphics, networking, input, and sound loop/master thread/ sort of act
2013-08-31 08:40:30	Sonarpulse	each has a FIFO inbox, like an actor
2013-08-31 08:40:47	Sonarpulse	but also access to a big glob of shared state
2013-08-31 08:41:03	Sonarpulse	some of which uses STM, some of which is just wild west IORefs
2013-08-31 08:41:10	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 08:41:28	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell
2013-08-31 08:41:37	Sonarpulse	No idea if this is a good plan, but it sounds kinda neat and symmetrical.
2013-08-31 08:42:05	Sonarpulse	I guess CHan is better. the master threads might delegate to worker threads, and then fairness is probably good
2013-08-31 08:42:09	u_	what's a good explanation of huet's higher-order unification alg?
2013-08-31 08:42:15	Sonarpulse	thanks
2013-08-31 08:42:19	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-08-31 08:42:35	dmwit	Hrm. Is fairness one of Chan's promises?
2013-08-31 08:42:41	dmwit	Doesn't sound right.
2013-08-31 08:42:54	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 08:44:16	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:44:47	dmwit	Okay. Fairness probably comes about anyway from MVar's FIFO promises.
2013-08-31 08:45:07	 *	hackagebot set-cover 0.0.1 - Solve exact set cover problems like Sudoku, 8 Queens, Soma Cube, Tetris Cube  http://hackage.haskell.org/package/set-cover-0.0.1 (HenningThielemann)
2013-08-31 08:45:25	<--	ioanel (~Thunderbi@188.25.11.158) has quit (Remote host closed the connection)
2013-08-31 08:46:04	-->	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has joined #haskell
2013-08-31 08:46:15	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-08-31 08:46:28	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 08:47:05	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:47:09	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-08-31 08:48:42	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Client Quit)
2013-08-31 08:49:02	<--	tel (~tel@71.206.43.93) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 08:50:26	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-08-31 08:51:12	-->	teodor98 (~teodor@92.80.39.229) has joined #haskell
2013-08-31 08:53:40	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (Ping timeout: 256 seconds)
2013-08-31 08:53:40	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-08-31 08:55:49	<--	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has quit (Read error: Operation timed out)
2013-08-31 09:00:23	--	irc: disconnected from server
2013-08-31 09:00:47	-->	supersymmetry (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-08-31 09:00:47	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-08-31 09:00:47	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-08-31 09:00:47	--	Nicks #haskell: [@ChanServ [[zz]] [swift] \q __main__ _br_ _flow_ _janne `0660 `^_^v `bps a11235 ab9rf absence acfoltzer Adeon adimit Adios adlan adnap aford aforemny agundry ahf ahihi akahn akiress akraut albel727 aleator alej alexander__b alexsdutton AlexWebr almondjelly aloiscochard alpounet Amadiro amatsu anachron ananthakumaran andares anders^^ andrewsw anhall aninhumer AntiSpamMeta aoh apaku apples applicative araujo arbn arcatan Argue aristid arkeet arkx arlinius arnsholt arpunk asante asjo aszlig Athas augur aupiff averell Axman6 aztek b0c1 b2coutts b52 b_jonas banjiewen barrucadu bartavelle basdirks1 basdirks_ Baughn bbee bbloom bcoppens bd_ bduc Beetny Belgarion0 benj_ bens bentrevor bergey bergmark Betal betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitonic` bitraten blast_hardcheese BlastHardcheese Blkt BMeph bobry bobthenameless bogner bogner_ Boney bootcode Boreeas bqp brainproxy Brando753 brandonw brendan brett BrianHV briden brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild Bwild_ bxc byorgey ByronJohnson c_14 cajla Cale caleb_9 caligula callen canissimia canta carter ccasin ccxCZ cdidd cdk ceii centrinia Cerise chairs_ charlesofarrell_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus cleek_ Clint clog cmsd2 codesoup CODEtaku cods coeus_ colah companion_cube conal confound copton_ copumpkin corkexaminer CosmicRay Counter-Strike cow-orker cronject cross crs_ cruxeternus Cryovat cschneid cynick cynick_ cyphase d-snp_ d3lxa dabradley dacc dan64 danilo2 danr dario^CIP DarkFox DarkNFoxy Dashkal davean davidt davorak dcoutts deavid Deewiant def-lkb deggis demolithion dennylin93 desc|zenbook Desheng3 destiny dexter2 DexterLB dfan DigitalKiwi dilinger_ dino- divarvel dixie djahandarie dju dlundy dmp1ce dmwit Dodek dogmaT dolio DolphR doomlord doomlord__ doshitan dpwright dqd Draconx Draggor drbean DrCode drdo dreixel drewr drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dumael dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dyspeptics15 eacameron earthy eataix ecc ecube edk Edoxile edwardk edwtjo eevar eff_ eff__ ehamberg ehd eis_ ejls eL_Bart0 electrogeek elgot Eliel Elision elliott elton_ Enigmagic ent enthropy epsylon epta ericmathison ericmj Eridius ernst ersran9_ Erstarrung etrepum EvanR Excedrin Excureo eyck Ezku ezrios f8l fabjan fall_ farn felipe_ fergusnoble fijimunkii fikusz finnrobi FireFly fl00r flazz flori_ flux fmapE fogus|gone fosky fran FreakyPe1guin FreeFull frontendloader froztbyte fry fryguybob ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gambogi gbarboza gbeshers gbluma gbluma_ gdeest gds geal geekosaur gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes greymalkin gridaphobe gseitz gthorslund guerrilla Guest19190 Guest22019 Guest53212 Guest80998 Guest92121 Guest98659 Gunni guymann h_chiro_ haasn hackagebot Hafydd hamilyon hamishmack hape01 Hardolaf hashcat hc hdevalence|away heath Heffalump hfaafb hiptobecubic hiratara hiredman hive-mind horlicks hpc hpd hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack identity idnar ido idoru Igloo inarru inr int-e integral Internet13 ion ipuustin ircbrowse iron_houzi ISF ismlages isomorphismes iulian iulian_ ivan\ ivan` Jaak jack_rabbit jackhill jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jascase901 jaspervdj Jaxan jayne jb55 jbauman jbomo jcp jdegoes jdoles jeff_s1 Jello_Raptor JesuZ jhh jix jkpl jlewis jliikka jlouis jmcarthur jmct jml joar jobstijl jodaro joe9 joefiorini joelteon joeyh johnw joneshf-laptop joneshf-work jonke Jonno_FTW jonsmock jonsterling joogi JPohlmann jrd0 jrib jroesch jrslepak junsuijin juuhaa jyyou jzelinskie jzl k0001 k00mi k0ral k4nar Kabaka_ kakos kamatsu KaneTW kaol katis kav kaw kcj Ke kekimmo kerrick ketil kfreds Khady Khisanth killy9999 kini Kinnison KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man Kobata kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft kshannon kstuart kubrat kubrat_ Kuraitou Kuraitou_ kxra KyleCloud lahwran lambdabot Laney latro`a_ lattenwald Lefeni Lemmih lenstr leroux levi Licenser lieven_ lightquake linduxed liori Liskni_si lispy liszt litherum liyang ljhms lokydor lopex lpaste lpsmith luite lukexi lulf lunarjar lusory M-ou-se m0g m3ga machisuji machisuji_ macron magicman Maior majoh mak` maksbotan malorie_ mami mannyv mantovani maoe mapreduce marienz markov_twain martinalex Martty MasseR mattp_ mauke mavam Maxdamantus maximums1eve maximumsteve maxter Mayzie mbrock mcbonz mceier McManiaC mcw09 mechairoi mee mel- melter mendez mephx MercurialAlchemi meretrix mero MetaCosm mgaare mgsloan miasma michaf mietek mike2 mikeplus32 milessabin milli mimi_vx mimico__ mirsal mixi mjo_ mjrosenb mjs2600 MK_FG mkiefel mkrull mlamari_ mlh mlinksva mm_freak mmaruseacph2 mmathis mnbernstein mno2_ mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes MouseTheLuckyDog Mowah mr- mrcheeks mrd mroman mrowe_away mrpantoufle MrRacoon mrshoe mrsolo MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4 mxf myme n-dolio n00dle nabilhassein Nahra Natch ndngvr ndonaldson NeatBasis necroyeti neektza1 neptunepink Neqoxec neurocyte newsham Nickeeh nicoo Nik05 niko nikola nilg` Nimatek ninegrid ninzine nkpart nlogax noam noddy noddy2OOO nominolo nopcode_ noplamodo normanrichards notdan Nshag nuttycom1 nwf nxorg8 Obfuscate Obfuscate` ocharles Odd_Bloke ofan og oldmanst1n oldmanstan OlegYch oleo opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s otulp ousado Pad^ paddymahoney palaga palmje ParahSailin ParaSa1lin parcs Patchou path[l] pcapriotti peddie peltchu Pengoo perlite petanqk petantik pfoetchen phar pharaun phienone philipde` Philonous_ phischu Phlogistique PHO_ phryk pi8029 PiepScuim pikhq pjstadig Plex- plhk pnielsen Polarina pootler poppingtonic popx poucet pqmodn pr predator217 preflex profmakx prophile Proteumus prototrout ps-auxw Ptival Ptival_ purefn puzza007 pxqr pygospa pyrtsa pyykkis_ Quadrescence quaestor quicksilver qwandor qz_ raft raid Ralith Rarrikins rasmusto Raynes Raynos Razz rckrd reactormonk recycle redjohn ReinH Reisen relrod Rembane RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb roconnor roconnor_ rpenguin_ rs0 Rutger`_ ryanakca ryant5000 s00pcan s4msung s4muel s_quark sababa SaBer saep Sagi saiam saiam^ Saizan sajith samrat satshaba1 satshabad saurik schlumpi_ schoppenhauer schroedinbug sclv sclv_ scottschecter scshunt Sculptor Sculptor_ sdx23 sdx32 seantallen SegFaultAX sellout- senthilkumarv Sgeo sgso shachaf shajra shanse shelf shennyg shepheb shergill Shin-LaC shiona SHODAN Shou shrekster si14 silasm simon simukis_ sinclair|net sipa SirChurchill sirspazzolot Sixmsj skchrko ski_ skulls skypers slack1256 sleepybug SLi slobo sm smarter so sohum solancile solarus solirc solrize solution sordina SoupEvil sp3ctum Spaceghost spaceships Spockz squimmy srcerer ssbr` ssttudder Starfire_ stass statusfailed stelleg stepcut stiell stomp strmpnk_ stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supersymmetry supki Svedrin swistak35 Swizec swook` tahu TallerGhostWalt talzeus_ tamiko Tarential tarmo taruti tauntaun tavelram taylorgb_ td123 tdammers TDJACR tearful Tehnix tehroflmaoer Tekerson Tene tensorpudding teodor98 tero- tertl3 Tesseraction tessier tew88 tg Th0mas theDon theorbtwo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice threedaymonk thunderrd timemage Tinned_Tuna tippenein TML tobyo2 tolt tomaw tomboy64 tomejaguar tomh- tomh-_ tomprince torkjak totte tov tpsinnem tragalo Tribal tridactyla tromp__ troydm tsou ttm tudalex tulcod tunixman Twey twn tych0 tylergillies_ u_ udevd udoprog Ulrar upgrayeddd uu1101 valdyn Valodim ve vehk Veltas Vertue vili vili_ vivekrai vmeson vnz vobi Vorpal voxpopuli vpm Vq vsayer vvv wagle Walther warpy Watcher7 waterlaz weie_ wereHamster whaletechno WhereIsMySpoon wilfredh willb1 Will| wimpunk Wizek wole wollw wormphlegm wto wtw wunki xaimus xenocons xenophon xinming xl XMunkki_ xnyhps Xorlev xorox90 xpika xplat xye xymox yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yogurt_truck yopikh YoungFrog yriw ystael ysuzuki zaiste zaphar_ps Zariel zcourts zebr zeiris_ zenoli zenzike zero7 zerokarmaleft zett_zelett zhulikas ziman zoktar zomg zorzar zrot zw01]
2013-08-31 09:00:47	--	Channel #haskell: 1074 nicks (1 op, 0 halfops, 0 voices, 1073 normals)
2013-08-31 09:00:47	--	URL for #haskell: http://www.haskell.org/
2013-08-31 09:00:50	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (Disconnected by services)
2013-08-31 09:00:59	--	Kuraitou_ is now known as Kuraitou
2013-08-31 09:01:00	<--	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	sdx23 (~sdx23@unaffiliated/sdx23) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	noddy (~self@numm.org) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	maximumsteve (~alf_pog@ip68-107-99-90.sd.sd.cox.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	Bwild (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	oldmanstan (~glesica@goto10line.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:01	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	iulian (iulian@ubuntu/member/iulian) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	-->	BMeph_ (BMeph@ip68-7-212-2.sd.sd.cox.net) has joined #haskell
2013-08-31 09:01:03	-->	tessier_ (~treed@216.105.40.125) has joined #haskell
2013-08-31 09:01:04	--	Mode #haskell [+CLcnpt]
2013-08-31 09:01:04	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-08-31 09:01:08	<--	tessier_ (~treed@216.105.40.125) has quit (Changing host)
2013-08-31 09:01:08	-->	tessier_ (~treed@kernel-panic/copilotco) has joined #haskell
2013-08-31 09:01:51	-->	axiom (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-08-31 09:02:02	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell
2013-08-31 09:02:10	-->	adlan_ (~AAFR@aafr.me) has joined #haskell
2013-08-31 09:02:21	-->	mshroyer_ (~mshroyer@legolas.paleogene.net) has joined #haskell
2013-08-31 09:02:38	-->	Rarrikin1 (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-08-31 09:02:46	-->	kryft_ (kryft@kapsi.fi) has joined #haskell
2013-08-31 09:02:55	-->	kshannon_ (~kris@kris.shannon.id.au) has joined #haskell
2013-08-31 09:02:57	-->	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has joined #haskell
2013-08-31 09:03:07	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 09:03:26	-->	jyyou_ (~jyyou@Plaslab.cs.nctu.edu.tw) has joined #haskell
2013-08-31 09:03:27	<--	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has quit (Read error: Connection reset by peer)
2013-08-31 09:03:29	-->	akraut_ (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has joined #haskell
2013-08-31 09:03:37	-->	knyppeld1nan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-08-31 09:03:42	-->	kwos (~kwos@103.5.142.6) has joined #haskell
2013-08-31 09:03:49	kwos	hi all!
2013-08-31 09:03:50	-->	Philonous__ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has joined #haskell
2013-08-31 09:03:57	-->	tensorpuddin (~tensorpud@99.148.203.65) has joined #haskell
2013-08-31 09:04:23	-->	kanibe_ (~yo@alamentin-551-1-66-27.w90-31.abo.wanadoo.fr) has joined #haskell
2013-08-31 09:04:35	-->	MrRacoon_ (suthere@reaver.cat.pdx.edu) has joined #haskell
2013-08-31 09:04:37	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 248 seconds)
2013-08-31 09:04:43	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 09:04:43	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 09:04:52	<--	kanibe_ (~yo@alamentin-551-1-66-27.w90-31.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-08-31 09:04:59	-->	kitallis (~kitallis@122.166.176.62) has joined #haskell
2013-08-31 09:05:00	<--	zett_zelett (~zett_zele@p5DE7AC83.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-08-31 09:05:05	-->	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-08-31 09:05:15	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-08-31 09:05:33	-->	MOMI_ (uid4868@gateway/web/irccloud.com/x-apbxuwjcuckighzo) has joined #haskell
2013-08-31 09:05:52	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:05:54	-->	maoe1 (~maoe@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-08-31 09:06:06	yopikh	kwos: hi one
2013-08-31 09:06:06	kwos	is there some standard library for testing numerical computations?
2013-08-31 09:06:11	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 09:06:40	-->	kav_ (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-08-31 09:06:43	-->	pi8030 (~pi8027@www2480uf.sakura.ne.jp) has joined #haskell
2013-08-31 09:06:47	kwos	I wonder what's the best way to compare results of interpolation with the actual function
2013-08-31 09:07:01	kwos	since obviously they will disagree a tiny bit in some places
2013-08-31 09:07:13	-->	clog_ (~nef@bespin.org) has joined #haskell
2013-08-31 09:07:27	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Connection reset by peer)
2013-08-31 09:07:48	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 09:07:59	kwos	oh, QuickCheck has something (~==?) :: (AEq a, Show a) => a -> a -> Result
2013-08-31 09:08:39	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 09:09:56	-->	edon (~user@albalug/edon) has joined #haskell
2013-08-31 09:10:07	kwos	yopikh: yo!
2013-08-31 09:10:08	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 09:10:30	kwos	too damn hot to go out, time to write some Haskell :)
2013-08-31 09:11:09	-->	k00mi_ (~koomi@pictor.uberspace.de) has joined #haskell
2013-08-31 09:11:11	-->	ceii_ (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 09:11:14	-->	Vorpal_ (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-08-31 09:11:24	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-08-31 09:11:24	<--	ananthakumaran (~Adium@117.192.135.70) has quit (*.net *.split)
2013-08-31 09:11:24	<--	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Philonous_ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has quit (*.net *.split)
2013-08-31 09:11:24	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	eff_ (~quassel@123.122.71.85) has quit (*.net *.split)
2013-08-31 09:11:24	<--	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Sculptor (~Sculptor@89.110.199.224) has quit (*.net *.split)
2013-08-31 09:11:24	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	roconnor (~roconnor@e120-pool-d89a7e29.brdbnd.voicenetwork.ca) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (*.net *.split)
2013-08-31 09:11:25	<--	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	michaf (~phar@v22010096862397599.yourvserver.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (*.net *.split)
2013-08-31 09:11:25	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (*.net *.split)
2013-08-31 09:11:25	<--	xenophon (~his_shado@64.124.65.162) has quit (*.net *.split)
2013-08-31 09:11:25	<--	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (*.net *.split)
2013-08-31 09:11:25	<--	td123 (~thomas-dz@archlinux/developer/td123) has quit (*.net *.split)
2013-08-31 09:11:25	<--	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	adlan (~AAFR@aafr.me) has quit (*.net *.split)
2013-08-31 09:11:25	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (*.net *.split)
2013-08-31 09:11:25	<--	Vorpal (~Vorpal@unaffiliated/vorpal) has quit (*.net *.split)
2013-08-31 09:11:25	<--	tensorpudding (~tensorpud@99.148.203.65) has quit (*.net *.split)
2013-08-31 09:11:25	<--	pi8029 (~pi8027@www2480uf.sakura.ne.jp) has quit (*.net *.split)
2013-08-31 09:11:25	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (*.net *.split)
2013-08-31 09:11:25	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-08-31 09:11:25	<--	plhk (~plhk@urban.v12.su) has quit (*.net *.split)
2013-08-31 09:11:25	<--	MOMI (uid4868@gateway/web/irccloud.com/x-hnfppbmhfzqzpaer) has quit (*.net *.split)
2013-08-31 09:11:26	<--	tomh- (uid501@gateway/web/irccloud.com/x-wmdrklhcyetyebly) has quit (*.net *.split)
2013-08-31 09:11:26	<--	k00mi (~koomi@pictor.uberspace.de) has quit (*.net *.split)
2013-08-31 09:11:26	<--	majoh (~Sponge_Bo@antiklimax.se) has quit (*.net *.split)
2013-08-31 09:11:26	<--	Obfuscate (~keii@unaffiliated/obfuscate) has quit (*.net *.split)
2013-08-31 09:11:26	<--	Ptival (~Ptival@goto.ucsd.edu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	kubrat (uid12741@gateway/web/irccloud.com/x-oyebatjfpurgkfmu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	akraut (uid3423@gateway/web/irccloud.com/x-uxwbxfnxhtihuans) has quit (*.net *.split)
2013-08-31 09:11:26	<--	shennyg (uid4021@gateway/web/irccloud.com/x-tsxzanjbwpyrfyjf) has quit (*.net *.split)
2013-08-31 09:11:26	<--	tomprince (~tomprince@socrates.hocat.ca) has quit (*.net *.split)
2013-08-31 09:11:26	<--	clog (~nef@bespin.org) has quit (*.net *.split)
2013-08-31 09:11:26	<--	mshroyer (~mshroyer@legolas.paleogene.net) has quit (*.net *.split)
2013-08-31 09:11:26	<--	neektza1 (~neektza@marvin.kset.org) has quit (*.net *.split)
2013-08-31 09:11:26	<--	MrRacoon (suthere@reaver.cat.pdx.edu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	jyyou (~jyyou@Plaslab.cs.nctu.edu.tw) has quit (*.net *.split)
2013-08-31 09:11:26	<--	jrib (~jrib@upstream/dev/jrib) has quit (*.net *.split)
2013-08-31 09:11:26	<--	kshannon (~kris@kris.shannon.id.au) has quit (*.net *.split)
2013-08-31 09:11:26	<--	gbluma_ (~gbluma@ec2-50-17-204-222.compute-1.amazonaws.com) has quit (*.net *.split)
2013-08-31 09:11:27	<--	strmpnk_ (strmpnk@gateway/shell/ircrelay.com/x-offscltpowhztkne) has quit (*.net *.split)
2013-08-31 09:11:27	<--	tessier (~treed@kernel-panic/copilotco) has quit (*.net *.split)
2013-08-31 09:11:27	<--	kryft (kryft@kapsi.fi) has quit (*.net *.split)
2013-08-31 09:11:27	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:11:27	--	tensorpuddin is now known as tensorpudding
2013-08-31 09:11:41	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 245 seconds)
2013-08-31 09:11:44	-->	jrib (~jrib@upstream/dev/jrib) has joined #haskell
2013-08-31 09:11:45	-->	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has joined #haskell
2013-08-31 09:11:51	-->	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has joined #haskell
2013-08-31 09:11:52	--	MOMI_ is now known as MOMI
2013-08-31 09:11:59	--	kubrat_ is now known as kubrat
2013-08-31 09:12:01	-->	neektza1 (~neektza@marvin.kset.org) has joined #haskell
2013-08-31 09:12:07	--	akraut_ is now known as akraut
2013-08-31 09:12:11	--	tomh-_ is now known as tomh-
2013-08-31 09:12:25	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 268 seconds)
2013-08-31 09:12:29	--	kubrat is now known as Guest66158
2013-08-31 09:12:39	<--	desc|zenbook (~heh@120.141.196.237) has quit (Ping timeout: 240 seconds)
2013-08-31 09:12:46	-->	cyphase_ (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-08-31 09:12:51	--	knyppeld1nan is now known as knyppeldynan
2013-08-31 09:12:55	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-31 09:12:56	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 09:13:30	-->	dalaing (~dalaing@124-170-121-31.dyn.iinet.net.au) has joined #haskell
2013-08-31 09:14:34	-->	heruur (~tvh@2a00:12d0:a101:7001:223:14ff:fe98:9164) has joined #haskell
2013-08-31 09:14:39	<--	dreixel (~dreixel@host81-132-84-228.range81-132.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-08-31 09:14:51	-->	dreixel (~dreixel@host86-155-212-216.range86-155.btcentralplus.com) has joined #haskell
2013-08-31 09:15:21	<--	ceii_ (~ceii@43-65.1-85.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-08-31 09:16:00	<--	Internet13 (chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has quit (Ping timeout: 276 seconds)
2013-08-31 09:16:01	<--	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has quit (Quit: leaving)
2013-08-31 09:16:03	-->	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 09:16:13	-->	lq (~user@115.238.153.244) has joined #haskell
2013-08-31 09:17:15	-->	tavelram__ (~tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-08-31 09:17:15	-->	ananthakumaran (~Adium@117.192.135.70) has joined #haskell
2013-08-31 09:17:15	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 09:17:15	-->	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 09:17:15	-->	td123 (~thomas-dz@archlinux/developer/td123) has joined #haskell
2013-08-31 09:17:15	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-08-31 09:17:15	-->	tomprince (~tomprince@socrates.hocat.ca) has joined #haskell
2013-08-31 09:17:18	-->	turiya (~turiya@14.96.74.172) has joined #haskell
2013-08-31 09:17:56	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 09:18:00	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 09:18:37	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-08-31 09:18:40	--	gpampara_off is now known as gpampara
2013-08-31 09:18:51	-->	Internet13 (chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has joined #haskell
2013-08-31 09:20:19	turiya	for printing the list [0..512*512-1], the total alloc = 52,669,024 bytes. The total memory needed for storing the list is 512*512*8 = 2,097,152 bytes. Why is the total alloc much more than this? Is it due to the printing?
2013-08-31 09:20:52	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 09:22:27	pxqr	any http lib to encode/decode requests and responses?
2013-08-31 09:23:11	pxqr	http-types do not provide request and response types
2013-08-31 09:23:14	-->	newbie (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 09:23:28	newbie	hello
2013-08-31 09:23:36	pxqr	while the HTTP package do not allow "*" in start-line
2013-08-31 09:23:38	--	newbie is now known as Guest43682
2013-08-31 09:23:59	Guest43682	with x:xs i say head plus list
2013-08-31 09:25:02	augur	turiya: how are you calculating that
2013-08-31 09:25:07	pxqr	turiya: did you specify -O2?
2013-08-31 09:25:48	Guest43682	but how can i say list plus tail? It should work like addToList e (xs:s)
2013-08-31 09:25:51	turiya	i used the -prof and -fprof-auto and ran with +RTS -p
2013-08-31 09:25:53	augur	turiya: that is to say, elaborate on why you think 512*512*8 makes sense
2013-08-31 09:25:56	turiya	i did specify O2
2013-08-31 09:25:58	<--	fl00r (~fl00r@pool-71-189-238-151.lsanca.fios.verizon.net) has quit (Remote host closed the connection)
2013-08-31 09:26:05	pxqr	list additionaly takes around 3 words per elem
2013-08-31 09:26:27	-->	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 09:26:33	pxqr	+ unboxed Int take one 2 words
2013-08-31 09:26:39	turiya	oh.. the list length is 512*512 and eight bytes for storing each element
2013-08-31 09:26:59	ski_	Guest43682 : "tail" is always a list. perhaps you meant "list (i.e. init) plus last" ?
2013-08-31 09:27:11	pxqr	turiya: 3 + 2 = 5 words per element
2013-08-31 09:27:14	ski_	> (init &&& last) "list"
2013-08-31 09:27:15	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 09:27:17	lambdabot	  ("lis",'t')
2013-08-31 09:27:25	Guest43682	ski_: yes, for recursion
2013-08-31 09:27:29	turiya	pxqr: why 3+2?
2013-08-31 09:27:29	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:27:43	Guest43682	addToList e [] = [e]
2013-08-31 09:27:59	Guest43682	addToList e (xs:x) = some_logic
2013-08-31 09:28:04	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 09:28:05	ski_	Guest43682 : in general, that's a bad idea (it's inefficient -- if you want this, either initially reverse the list, or use another data structure=
2013-08-31 09:28:11	<--	normanrichards (~normanric@70.114.215.220) has quit (Quit: normanrichards)
2013-08-31 09:28:26	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 09:28:47	ski_	given a non-empty list, you can directly access its head (first element) and tail (list of all the rest of the elements, possibly zero of them)
2013-08-31 09:29:11	ski_	you can't directly access the last element, nor the list of the initial elements (all but the last element)
2013-08-31 09:29:21	augur	Guest43682: you might also want to consider whether you need access to both ends of the list
2013-08-31 09:29:30	ski_	the only way to reach those is by going *via* the "head plus tail" representation
2013-08-31 09:29:32	-->	allsystemsarego (~allsystem@5-12-37-127.residential.rdsnet.ro) has joined #haskell
2013-08-31 09:29:32	<--	allsystemsarego (~allsystem@5-12-37-127.residential.rdsnet.ro) has quit (Changing host)
2013-08-31 09:29:32	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-08-31 09:29:34	augur	if the answer is no, then you should just treat the whole list as "backwards"
2013-08-31 09:29:38	turiya	what is the amount of memory required to store a list of size n (Ints)
2013-08-31 09:30:06	pxqr	[1,2] = {:#, head_ptr = {Int#, 1#}, tail_ptr = {:#, head_ptr = { Int#, 2# }, tail_ptr = { []# } }}
2013-08-31 09:30:08	augur	turiya: going by what pxqr said, 5n words
2013-08-31 09:30:29	augur	whatever a word is here
2013-08-31 09:30:30	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 09:30:43	Kinnison	s/word/pointer/
2013-08-31 09:30:51	Guest43682	ski_: well, i'll try queue then
2013-08-31 09:31:07	Guest43682	ski_: thought list is two-sided
2013-08-31 09:31:09	Kinnison	In essence, it's hardware and implementation dependent
2013-08-31 09:31:19	ski_	Guest43682: btw, wb from earlier
2013-08-31 09:31:40	Guest43682	ski_: wb?
2013-08-31 09:31:41	turiya	i see, so the remaining is the overhead for printing
2013-08-31 09:31:43	ski_	the standard "list" type in Haskell is singly-linked lists
2013-08-31 09:31:52	ski_	Guest43682 : meaning "welcome back"
2013-08-31 09:31:58	Guest43682	ski_: ah =)
2013-08-31 09:32:00	augur	Kinnison: indeed, but that maps to some hardware specific thing in this case :)
2013-08-31 09:32:09	<--	lq (~user@115.238.153.244) has quit (Ping timeout: 268 seconds)
2013-08-31 09:32:21	augur	using pxqr's numbers, turiya's system has words of length 40.1832763671875
2013-08-31 09:32:32	ski_	Guest43682 : but also see what augur said, in case you missed it
2013-08-31 09:32:52	pxqr	augur: well, we can floor that to 40 :)
2013-08-31 09:32:53	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 248 seconds)
2013-08-31 09:32:53	augur	which suggests he's on a 32 bit-word system, and the extra overhead is from the printing
2013-08-31 09:32:55	turiya	is there a way to check word size in haskell
2013-08-31 09:33:18	augur	pxqr: do systems ever use non-2^n memory content sizes?
2013-08-31 09:33:18	-->	lq (~user@115.238.153.243) has joined #haskell
2013-08-31 09:33:25	Guest43682	ski_: i need only access from end of list. But reversing is bad idea, due to performance
2013-08-31 09:33:28	Quadrescence	36 bits!
2013-08-31 09:34:27	pxqr	augur: I don't know; do you mean something like data Foo = Foo {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8   ?
2013-08-31 09:34:27	ski_	Guest43682: why is reversing bad, if you only do it once (or maybe twice) ?
2013-08-31 09:35:21	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 09:35:25	augur	pxqr: i mean it seems unlikely that any memory manufacturer is mapping each address to a non-2^n-sized location in memory
2013-08-31 09:35:46	--	gpampara is now known as gpampara_off
2013-08-31 09:35:47	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-31 09:35:51	ski_	Guest43682: are you attempting to write an incremental algorithm ? iow one which can process through a list without the whole list needing to fit in memory at any one time ?
2013-08-31 09:36:03	--	kryft_ is now known as kryft
2013-08-31 09:36:10	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:36:11	Guest43682	ski_: in algorithm, i add many elements, and every time i will reverse this list, so the number of reversions is much more then 2
2013-08-31 09:36:16	ski_	Guest43682: where is the list coming from ?
2013-08-31 09:36:38	ski_	Guest43682 : why reverse every time you add elements ?
2013-08-31 09:36:46	ski_	do you need to add both to front and back ?
2013-08-31 09:36:50	ski_	or only to back end ?
2013-08-31 09:36:54	<--	u_ (~phillip@adsl-75-57-168-247.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-08-31 09:37:05	Guest43682	ski_: in fact, i have next task. A list (let it be list) is like [(1, 2), (3, 4), (10, 20)]
2013-08-31 09:37:24	 *	ski_ awaits an answer :)
2013-08-31 09:37:32	pxqr	augur: i don't know;
2013-08-31 09:37:33	turiya	i have 20% alloc for the list in the main and the rest should be for printing then? this means that more memory has been allocated for printing than to generate the list
2013-08-31 09:37:49	Guest43682	ski_ when i add new element (Double, Double), it must stay between two nearest points
2013-08-31 09:38:00	mauke	Guest43682: why?
2013-08-31 09:38:03	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-31 09:38:14	ski_	Guest43682 : do you only need to add elements at the end ?
2013-08-31 09:38:26	Guest43682	ski_: e.g. add (6, 8) -> [(1, 2), (3, 4), (6, 8), (10, 20)]
2013-08-31 09:38:35	ski_	hm, ok
2013-08-31 09:38:47	ski_	that looks like insert-in-sorted-list
2013-08-31 09:38:54	Guest43682	ski_: yes
2013-08-31 09:39:15	ski_	so then another data structure would be better than a list
2013-08-31 09:39:25	Guest43682	ski_: and inner pairs never intersects
2013-08-31 09:39:29	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 09:39:33	ski_	a `Set', e.g.
2013-08-31 09:39:53	Guest43682	ski_:, yes, i'm googling about queues, found a good post on SO
2013-08-31 09:40:12	ski_	(if you want to implement it yourself, try some variant of search trees)
2013-08-31 09:40:16	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:41:09	<--	diadara_ (~diadara@115.249.18.25) has quit (Client Quit)
2013-08-31 09:41:14	ski_	queues are probably not good (unless perhaps if you mean priority queues)
2013-08-31 09:41:28	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:41:34	Guest43682	ski_: its basics, so should be already implemented
2013-08-31 09:41:44	ski_	queues typically have efficient adding to one end and removing from the other end (and perhaps also vice versa)
2013-08-31 09:41:53	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 09:41:54	-->	Taneb (~nathan@host-92-23-115-247.as13285.net) has joined #haskell
2013-08-31 09:41:56	ski_	while you seem to be wanting to insert in order
2013-08-31 09:42:01	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-08-31 09:42:08	turiya	augur:  (52,669,704 * 0.2) / (512*512*5) = 0.8 < 1 (the 0.2 is for the 20% alloc for the list), so may be the whole list is not stored in memory then?
2013-08-31 09:42:19	<--	teodor98 (~teodor@92.80.39.229) has quit (Read error: Operation timed out)
2013-08-31 09:42:21	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 09:42:30	augur	turiya: who knows!
2013-08-31 09:43:05	Guest43682	ski_: an ideal variant would be (xs:x), but it is impossible
2013-08-31 09:43:52	turiya	so, it is hard to understand where memory is being used..
2013-08-31 09:45:10	 *	hackagebot crypto-random 0.0.2 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.2 (VincentHanquez)
2013-08-31 09:45:24	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 09:48:09	 *	ski_ idly wonders why `ViewPatterns' aren't enabled in lambdabot
2013-08-31 09:48:48	ski_	Guest43682 : `((init &&& last) -> (xs,x))' would work, but you don't want it
2013-08-31 09:49:06	ski_	(because it's inefficient)
2013-08-31 09:50:08	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 09:50:21	<--	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-08-31 09:50:26	-->	sjoerd_visscher (~sjoerd_vi@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 09:50:38	-->	teodor98 (~teodor@92.80.39.229) has joined #haskell
2013-08-31 09:50:51	<--	ersran9_ (~quassel@unaffiliated/ersran9) has quit (Remote host closed the connection)
2013-08-31 09:52:40	pxqr	> 512*512 * 5 * 8 + 512 * 512 * 7 * 2 * 8
2013-08-31 09:52:41	lambdabot	  39845888
2013-08-31 09:52:58	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 09:53:23	augur	> 512*512*5*32
2013-08-31 09:53:24	lambdabot	  41943040
2013-08-31 09:53:55	Guest43682	ski_: well, i do another thing. I reverse list from beginning. So not [(1, 2), (3, 4), (10, 20)] but [(20, 10) ,(4, 3), (2, 1)]
2013-08-31 09:54:20	Guest43682	ski_: then seems like i can work with simple list
2013-08-31 09:54:23	pxqr	maybe show takes 7 chars per number
2013-08-31 09:54:29	ski_	well, it won't help if you want to add stuff into the middle of it
2013-08-31 09:54:32	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 09:54:50	Guest43682	ski_: i ll show a code a bit later
2013-08-31 09:54:50	adnap	Why does isEOF block?
2013-08-31 09:54:56	adnap	after calling getLine
2013-08-31 09:55:13	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 09:56:46	mauke	so it can tell you whether it's reached the end of the file
2013-08-31 09:57:37	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 09:59:10	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 09:59:16	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 09:59:22	lpaste	adnap pasted “eof block” at http://lpaste.net/92356
2013-08-31 09:59:25	-->	elediaz (~eleazar@90.173.211.6) has joined #haskell
2013-08-31 10:00:11	adnap	mauke: If I type something which does not contain EOF and press enter, why should isEOF block?
2013-08-31 10:00:25	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 10:00:54	pxqr	when blah (return ()) makes no sense
2013-08-31 10:01:16	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-08-31 10:01:45	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 10:02:03	mauke	adnap: "contain EOF" makes no sense
2013-08-31 10:02:04	adnap	pxqr: It could also be when (not eof) loop
2013-08-31 10:02:16	ski_	adnap: the `when' won't do what you probably intended it to do
2013-08-31 10:02:21	adnap	mauke: When I press enter and not CTRL+D
2013-08-31 10:02:35	adnap	ski_: It seems to
2013-08-31 10:02:35	mauke	where/when?
2013-08-31 10:02:49	mauke	and yeah, you're not actually using eof anywhere
2013-08-31 10:02:56	adnap	wtf
2013-08-31 10:03:01	adnap	isEOF
2013-08-31 10:03:09	adnap	...is in there
2013-08-31 10:03:10	mauke	whole sentences, please
2013-08-31 10:03:25	adnap	What do you mean I'm "not actually using eof"?
2013-08-31 10:03:33	ski_	adnap `when (...) $ return ()' is equal to `return ()' (assuming `...' isn't bottom)
2013-08-31 10:03:35	mauke	what I said
2013-08-31 10:03:51	mauke	the value of eof has no effect on the behavior of the program
2013-08-31 10:04:13	adnap	I thought when does the IO when the first argument is True
2013-08-31 10:04:17	knz	hi all
2013-08-31 10:04:17	mauke	correct
2013-08-31 10:04:41	ski_	adnap : you are probably misunderstanding the effect of `return ()'
2013-08-31 10:04:45	knz	maybe dumb question: I have a function "rgb2gray f ix = f1 (rgb f ix)" which types properly; but "rgb2gray = f1 . rgb" doesn't
2013-08-31 10:04:55	adnap	ski_: Yes
2013-08-31 10:04:55	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (Ping timeout: 246 seconds)
2013-08-31 10:04:58	Guest43682	ski_: well, indeed, that didn't help. I really need insert into sorted list
2013-08-31 10:05:00	ski_	`return ()' is simply an `IO'-action that does nothing interesting
2013-08-31 10:05:01	adnap	ski_: I forgot that return doesn't exit the program
2013-08-31 10:05:01	knz	what am I missing?
2013-08-31 10:05:15	-->	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has joined #haskell
2013-08-31 10:05:15	mauke	knz: rgb2gray f = f1 . rgb f
2013-08-31 10:05:18	adnap	I will change it to "when (not eof) loop"
2013-08-31 10:05:22	pxqr	misunderstanding could be shrinked to just return using QC terms
2013-08-31 10:05:29	ski_	in particular, `return ()' does not "cause the containing function to return" (whatever that would mean here)
2013-08-31 10:05:37	mauke	knz: rgb2gray = (f1 .) . rgb
2013-08-31 10:05:57	ski_	adnap : that's better. `unless eof loop' would also work, in case you prefer that
2013-08-31 10:06:15	-->	wavewave (513fb702@gateway/web/freenode/ip.81.63.183.2) has joined #haskell
2013-08-31 10:06:22	knz	mauke: aha
2013-08-31 10:06:29	<--	tearful (~user@67.51.113.178) has quit (Ping timeout: 248 seconds)
2013-08-31 10:06:34	ski_	  rgb2gray f ix = f1 (rgb f ix)
2013-08-31 10:06:41	ski_	  rgb2gray f ix = f1 ((rgb f) ix)
2013-08-31 10:06:50	ski_	  rgb2gray f ix = (f1 . rgb f) ix
2013-08-31 10:06:56	ski_	  rgb2gray f = f1 . rgb f
2013-08-31 10:07:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 10:07:04	ski_	  rgb2gray f = (f1 .) (rgb f)
2013-08-31 10:07:05	pxqr	> :i :.
2013-08-31 10:07:06	lambdabot	  <hint>:1:1: parse error on input `:'
2013-08-31 10:07:11	ski_	  rgb2gray f = ((f1 .) . rgb) f
2013-08-31 10:07:15	pxqr	@ty :.
2013-08-31 10:07:15	ski_	  rgb2gray = (f1 .) . rgb
2013-08-31 10:07:16	lambdabot	parse error on input `:.'
2013-08-31 10:07:25	-->	zammy (~sammy@ppp-53-83.98-62.inwind.it) has joined #haskell
2013-08-31 10:07:29	ski_	@type (.:)
2013-08-31 10:07:30	lambdabot	(b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
2013-08-31 10:07:42	pxqr	yep
2013-08-31 10:08:07	-->	what-is-this (4c15709a@gateway/web/freenode/ip.76.21.112.154) has joined #haskell
2013-08-31 10:08:11	knz	wut
2013-08-31 10:08:12	<--	epta (~yep@toje.ws) has quit (Quit: leaving)
2013-08-31 10:08:30	ski_	knz : if you use `infixr 9; (.:) = (.) . (.)' (or defined as `(f . g) x y = f (g x y)', if you prefer), you get `rgb2gray = f1 .: rgb'
2013-08-31 10:08:31	-->	epta (~yep@toje.ws) has joined #haskell
2013-08-31 10:08:33	lpaste	adnap annotated “eof block” with “eof block (annotation)” at http://lpaste.net/92356#a92358
2013-08-31 10:08:45	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-08-31 10:08:54	adnap	I still don't understand why the first line is not printed right away
2013-08-31 10:09:13	ski_	knz : did you follow the above step-by-step refactoring of the `rgb2gray' definition ?
2013-08-31 10:09:19	<--	Guest43682 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 10:09:33	mauke	adnap: because null (f x) has to evaluate f x before it can return a result
2013-08-31 10:09:35	arkeet	adnap: huh? it's waiting for getLine
2013-08-31 10:09:36	knz	ski_: yeah, ut I had missed the definition of .:
2013-08-31 10:09:42	-->	teodor98_ (~teodor@109.97.143.123) has joined #haskell
2013-08-31 10:09:55	adnap	mauke: null?
2013-08-31 10:09:59	ski_	knz : if you want to, i can continue from above
2013-08-31 10:10:00	what-is-this	Hi all, I'm trying to model continuations that call the provided function exactly once (well, perhaps these objects are not continuations).. does anything like this exist?
2013-08-31 10:10:02	ski_	  rgb2gray = (f1 .) . rgb
2013-08-31 10:10:04	adnap	arkeet: I mean after I type something and press enter
2013-08-31 10:10:10	knz	ski_: it's fine, I got that
2013-08-31 10:10:12	knz	(and it works)
2013-08-31 10:10:13	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 10:10:15	ski_	  rgb2gray = (.) f1 . rgb
2013-08-31 10:10:16	mauke	adnap: what programming languages do you know?
2013-08-31 10:10:23	ski_	  rgb2gray = (.) ((.) f1) rgb
2013-08-31 10:10:26	adnap	mauke: C, C++, Java, and Haskell
2013-08-31 10:10:32	ski_	  rgb2gray = ((.) . (.)) f1 rgb
2013-08-31 10:10:36	ski_	  rgb2gray = (.:) f1 rgb
2013-08-31 10:10:39	mauke	adnap: not Haskell if you don't know null
2013-08-31 10:10:40	ski_	  rgb2gray = f1 .: rgb
2013-08-31 10:10:51	adnap	mauke: null checks if a list is empty, right?
2013-08-31 10:10:54	mauke	yes
2013-08-31 10:10:58	knz	more general question: is there an operator (or is it possible to define one) which captures this pattern generally?
2013-08-31 10:11:02	adnap	mauke: I don't know why you mentioned it. It's not in my code
2013-08-31 10:11:03	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-08-31 10:11:06	mauke	and isEOF checks whether you've reached the end of an IO stream
2013-08-31 10:11:13	mauke	it's analogous
2013-08-31 10:11:18	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-08-31 10:11:20	adnap	mauke: Please don't pick on me
2013-08-31 10:11:25	ski_	knz : so, the basic answer to why your original attempt didn't work is that `.' only "transmits one argument into the right function"
2013-08-31 10:11:26	pxqr	knz: dot rule?
2013-08-31 10:11:28	-->	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 10:11:37	mauke	adnap: please don't play dumb
2013-08-31 10:11:42	adnap	mauke: I'm not
2013-08-31 10:11:44	knz	like if I have f :: a->b and g :: x->y->...->a, have some syntax f OP g that has type x->y->..->b ?
2013-08-31 10:11:45	ski_	knz : see the definition of the `.:' operator above
2013-08-31 10:11:47	mauke	adnap: me neither
2013-08-31 10:11:48	<--	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-08-31 10:11:57	mauke	a list is either empty or a cons of an element and the rest of the list
2013-08-31 10:12:04	-->	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has joined #haskell
2013-08-31 10:12:07	mauke	an IO stream is either at EOF or contains a Char and the rest of the stream
2013-08-31 10:12:21	<--	teodor98 (~teodor@92.80.39.229) has quit (Ping timeout: 248 seconds)
2013-08-31 10:12:29	ski_	knz : oh, you mean for any number of curried arguments -- i don't think so, at least not without scary (well) type class stuff
2013-08-31 10:12:38	knz	o
2013-08-31 10:12:39	knz	k
2013-08-31 10:12:48	mauke	now, how can isEOF tell which it is?
2013-08-31 10:14:16	what-is-this	anyone? basically, Cont' :: (a -> m r) -> m r; but the argument can be called exactly once - anything like this or similar?
2013-08-31 10:14:20	adnap	mauke: isEOF could look at the last character that was buffered and base the result on that
2013-08-31 10:14:34	mauke	adnap: how would that help?
2013-08-31 10:14:43	mauke	also, what do you mean by buffered?
2013-08-31 10:15:02	adnap	mauke: Because then when I type "hello" and press enter, isEOF would know based on those actions that EOF has not been reached yet
2013-08-31 10:15:09	mauke	how would it know?
2013-08-31 10:15:10	Kinnison	If the stream is stdin fr.ex. then the process won't get any more bytes after the enter
2013-08-31 10:15:15	Kinnison	the read() would block
2013-08-31 10:15:18	Kinnison	thus isEOF() would block
2013-08-31 10:15:25	-->	lemao (~lemao@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:15:32	Kinnison	because it cannot find another character or the EOF indicator until read() returns
2013-08-31 10:15:38	mauke	adnap: getLine would consume "hello\n", and then isEOF has an unknown stream
2013-08-31 10:15:55	adnap	mauke: isEOF could look at \n : unknown stream
2013-08-31 10:16:00	mauke	there is no \n
2013-08-31 10:16:05	mauke	getLine has already consumed it
2013-08-31 10:16:16	Kinnison	indeedy
2013-08-31 10:16:54	adnap	What does Ctrl + d do?
2013-08-31 10:17:05	mauke	sends a virtual EOF, effectively
2013-08-31 10:17:12	adnap	Is that a characteR?
2013-08-31 10:17:14	mauke	no
2013-08-31 10:17:30	adnap	How does isEOF know that a stream is empty?
2013-08-31 10:17:38	Kinnison	because read() returns zero
2013-08-31 10:17:44	mauke	how does null know a list is empty?
2013-08-31 10:17:48	mauke	[] isn't an element
2013-08-31 10:18:10	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 10:18:36	adnap	I guess I don't know how to make my program do what I want. I guess I will make it exit when one types "quit" or something
2013-08-31 10:18:49	mauke	what do you want it to do?
2013-08-31 10:18:55	ski_	what-is-this : perhaps try "Linear Continuation-Passing" and "Linearly Used Continuations" at <http://www.cs.bham.ac.uk/~hxt/research/hayo-thielecke-publications.shtml> by Hayo Thielecke et al. ?
2013-08-31 10:19:08	adnap	I just want it to print lines that were read immediately after enter is pressed, and stop immediately after Ctrl + D is pressed
2013-08-31 10:19:16	adnap	(d
2013-08-31 10:19:17	adnap	*d
2013-08-31 10:19:28	-->	Thra11 (~Thra11@200.248.90.146.dyn.plus.net) has joined #haskell
2013-08-31 10:19:44	mauke	loop = eof <- isEOF; when (not eof) $ do s <- getLine; putStrLn s; loop
2013-08-31 10:20:10	 *	hackagebot crypto-numbers 0.2.0 - Cryptographic numbers: functions and algorithms  http://hackage.haskell.org/package/crypto-numbers-0.2.0 (VincentHanquez)
2013-08-31 10:20:12	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 10:20:16	adnap	mauke: Thanks. I didn't think of that
2013-08-31 10:20:18	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 10:20:18	pharaun	pxqr: if you find a http library for encoding/decode requests/responses i would be interested in it :)
2013-08-31 10:20:31	Kinnison	getContents >>= putStr
2013-08-31 10:20:31	mauke	you can tell your original structure can't be right because it doesn't handle empty input
2013-08-31 10:20:45	mauke	also, I normally wouldn't use isEOF
2013-08-31 10:20:47	adnap	I don't understand
2013-08-31 10:21:00	mauke	adnap: what if there are 0 lines?
2013-08-31 10:21:05	pxqr	http-types seems like near that I need, but there are no request/response types
2013-08-31 10:21:05	mauke	your original code always calls getLine
2013-08-31 10:21:14	pxqr	just headers, methods etc
2013-08-31 10:21:14	adnap	mauke: Then wouldn't EOF be reached immediately?
2013-08-31 10:21:19	mauke	adnap: yes
2013-08-31 10:21:22	what-is-this	ski_: that looks promising - Do you think it can be enforced at the type level though? A cursory glance seems to indicate that they prove equivalence between general continuations and linear continuations.
2013-08-31 10:21:25	mauke	that's the problem
2013-08-31 10:21:31	adnap	Oh, getLine blocks?
2013-08-31 10:21:35	adnap	If there is no input?
2013-08-31 10:21:38	mauke	no
2013-08-31 10:21:43	mauke	how would that make sense?
2013-08-31 10:21:49	pxqr	pharaun: however I think I'll just use http-types
2013-08-31 10:21:54	ski_	what-is-this : i suspect not, if you mean by the type level in Haskell
2013-08-31 10:21:57	<--	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-08-31 10:22:02	adnap	What is wrong with calling getLine first if there are 0 lines?
2013-08-31 10:22:07	mauke	"read a line. if you've reached the end of the file, block forever"
2013-08-31 10:22:19	Kinnison	adnap: If you're just experimenting and want something which reads lines, runs a function over them, writes the result out, etc.  then look at interact
2013-08-31 10:22:23	Kinnison	@hoogle interact
2013-08-31 10:22:23	lambdabot	Prelude interact :: (String -> String) -> IO ()
2013-08-31 10:22:23	lambdabot	System.IO interact :: (String -> String) -> IO ()
2013-08-31 10:22:23	lambdabot	Data.ByteString interact :: (ByteString -> ByteString) -> IO ()
2013-08-31 10:22:28	adnap	Kinnison: I don't
2013-08-31 10:22:31	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 10:22:33	Kinnison	aah okay
2013-08-31 10:22:36	what-is-this	ski_: I see. Do you think this requires dependent types? (I've a similar question, which I'm pretty sure would require dependent types.)
2013-08-31 10:22:36	mauke	adnap: what could it possibly do?
2013-08-31 10:22:40	pharaun	pxqr: fair enough :)
2013-08-31 10:22:43	adnap	mauke: What is "it"?
2013-08-31 10:22:49	pharaun	i'll dig into http-types then
2013-08-31 10:22:50	mauke	I mean, I know what it actually does, but what choice does it have? (it = getLine)
2013-08-31 10:22:57	ski_	what-is-this : no. i think it requires linear types
2013-08-31 10:23:09	adnap	mauke: I don't know how to answer these questions. They're rhetorical
2013-08-31 10:23:24	mauke	they're not
2013-08-31 10:23:24	Kinnison	adnap: Your code has a bug -- if the input is empty, then getLine will throw an exception
2013-08-31 10:23:33	adnap	Kinnison: Thank you
2013-08-31 10:23:39	Kinnison	adnap: Always check the exit case first
2013-08-31 10:23:55	adnap	Kinnison: I didn't know getLine did that, and I'm reading from standard in, so I wouldn't know how to specify no input
2013-08-31 10:24:05	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Ping timeout: 248 seconds)
2013-08-31 10:24:06	Kinnison	< /dev/null
2013-08-31 10:24:09	Kinnison	is an obvious way
2013-08-31 10:24:12	what-is-this	ski_: "linear types", TIL
2013-08-31 10:24:15	mauke	or press ctrl-d
2013-08-31 10:24:19	Kinnison	indeed
2013-08-31 10:24:27	knz	mauke, ski_: http://pastebin.com/fVjDw7CY -- thanks!
2013-08-31 10:24:32	mauke	The paste fVjDw7CY has been copied to http://lpaste.net/92360
2013-08-31 10:24:38	-->	eeezkil (~eeezkil@unaffiliated/eeezkil) has joined #haskell
2013-08-31 10:24:42	mauke	some possible choices: it could throw an IO exception (this is what it actually does), call 'error', or return an empty string
2013-08-31 10:24:45	adnap	Pressing Ctrl-d exits the program. Perhaps I didn't realize that...
2013-08-31 10:24:49	mauke	or your suggestion: it could simply not return, blocking forever
2013-08-31 10:24:53	<--	cleek_ (~cleek-hq@187.191.31.157) has quit (Quit: Saliendo)
2013-08-31 10:24:57	adnap	Is "eof.hs: <stdin>: hGetLine: end of file" an error?
2013-08-31 10:25:03	mauke	it's an exception
2013-08-31 10:25:11	 *	hackagebot crypto-pubkey 0.2.0 - Public Key cryptography  http://hackage.haskell.org/package/crypto-pubkey-0.2.0 (VincentHanquez)
2013-08-31 10:25:13	 *	hackagebot cprng-aes 0.5.0 - Crypto Pseudo Random Number Generator using AES in counter mode.  http://hackage.haskell.org/package/cprng-aes-0.5.0 (VincentHanquez)
2013-08-31 10:25:14	ski_	what-is-this : alternatively, you could try to settle for a dynamic check on the use-once (though that is probably bound to degrade to just use-at-most-once, see e.g. `call/1c', e.g. mentioned at <http://lists.gnu.org/archive/html/guile-devel/2001-03/msg00030.html>)
2013-08-31 10:25:17	mauke	or rather, the result of not catching the exception
2013-08-31 10:25:19	adnap	Okay
2013-08-31 10:25:25	mauke	you get an error message on stderr and the program exits
2013-08-31 10:25:32	--	Vorpal_ is now known as Vorpal
2013-08-31 10:26:21	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 10:26:47	ski_	what-is-this : linear types comes from linear logic, via the Curry-Howard correspondence
2013-08-31 10:27:57	ski_	what-is-this : also note that linear types are distinct from uniqueness types as in Clean and Mercury (which ensures that you can sometimes safely use update-in-place to construct a new value from an old one, since there are no other references to the old one)
2013-08-31 10:27:58	-->	sudoku (d953ae87@gateway/web/freenode/ip.217.83.174.135) has joined #haskell
2013-08-31 10:28:18	-->	newbie2_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 10:28:55	ski_	what-is-this : iirc, Wadler has some paper re linear types
2013-08-31 10:29:29	what-is-this	ski_: yep, "linear types can change the world" by him seems quite accessible.
2013-08-31 10:29:29	ski_	(though possibly also mentions (confuses with ?) uniqueness types)
2013-08-31 10:29:30	<--	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has quit (Ping timeout: 268 seconds)
2013-08-31 10:29:31	<--	Sculptor_ (~Sculptor@89.110.199.224) has quit (Quit: Одлазим)
2013-08-31 10:29:47	newbie2_	well, insert from Data.List helped me. I'm not sure about good O( ), but i can later change adding
2013-08-31 10:30:01	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-08-31 10:30:11	 *	hackagebot tls 1.1.3 - TLS/SSL protocol native implementation (Server and Client)  http://hackage.haskell.org/package/tls-1.1.3 (VincentHanquez)
2013-08-31 10:30:35	ski_	what-is-this : for uniqueness types, check out Clean (the other lazy functional language), and Mercury (the logic/functional language with a static mode and determinism system (in addition to type system))
2013-08-31 10:30:59	<--	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 10:31:08	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 10:31:37	-->	corkexaminer (~chrisdorn@178.111.151.90) has joined #haskell
2013-08-31 10:32:11	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 10:32:28	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 10:32:59	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 10:33:02	pxqr	hm, tls package seems pretty mature, does there are native https lib based on the tls?
2013-08-31 10:33:21	<--	danilo2 (b2257576@gateway/web/freenode/ip.178.37.117.118) has quit (Quit: Page closed)
2013-08-31 10:33:28	--	iulian_ is now known as iulian
2013-08-31 10:33:36	<--	iulian (iulian@d67-193-152-156.home3.cgocable.net) has quit (Changing host)
2013-08-31 10:33:36	-->	iulian (iulian@ubuntu/member/iulian) has joined #haskell
2013-08-31 10:34:00	<--	sudoku (d953ae87@gateway/web/freenode/ip.217.83.174.135) has quit (Quit: Page closed)
2013-08-31 10:34:01	<--	wole (~wole@88-105-53-125.dynamic.dsl.as9105.com) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-08-31 10:35:26	-->	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has joined #haskell
2013-08-31 10:35:55	what-is-this	ski_: thanks for the pointers! linear types seems exactly the thing I want - though I'll probably need more time to completely grok it.
2013-08-31 10:35:57	<--	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has quit (Client Quit)
2013-08-31 10:38:07	-->	make_sense (~make_sens@178.124.126.144) has joined #haskell
2013-08-31 10:38:30	<--	Desheng3 (~Desheng@166.181.67.245) has quit (Ping timeout: 256 seconds)
2013-08-31 10:38:34	-->	wole (~wole@88-105-53-125.dynamic.dsl.as9105.com) has joined #haskell
2013-08-31 10:39:14	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 10:39:34	<--	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has quit (Ping timeout: 246 seconds)
2013-08-31 10:40:48	-->	ioanel (~Thunderbi@188.25.9.126) has joined #haskell
2013-08-31 10:41:06	ski_	what-is-this : see <http://www.mercurylang.org/> and <http://wiki.clean.cs.ru.nl/Clean> for those two languages
2013-08-31 10:41:17	-->	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has joined #haskell
2013-08-31 10:41:54	<--	teodor98_ (~teodor@109.97.143.123) has quit (Ping timeout: 264 seconds)
2013-08-31 10:42:47	ski_	what-is-this : also lolli <http://www.lix.polytechnique.fr/~dale/lolli/>, a(n intuitionistic) linear-logic based logic programming language might be interesting (also see <http://www.cs.rmit.edu.au/lygon/> for a take on classical linear logic)
2013-08-31 10:42:48	-->	SoupE (~jloos@f055007221.adsl.alicedsl.de) has joined #haskell
2013-08-31 10:43:24	ski_	what-is-this : .. are you familiar with any logic programming language or technique ?
2013-08-31 10:44:09	newbie2_	one more newbie question. In http://pastebin.com/QThQMd1s, how do i use strike with damage parameter?
2013-08-31 10:44:10	mauke	The paste QThQMd1s has been copied to http://lpaste.net/92361
2013-08-31 10:44:15	what-is-this	ski_: no, unfortunately.
2013-08-31 10:44:51	<--	lurkorg (~alex@145.255.244.150) has quit (Quit: Leaving.)
2013-08-31 10:45:11	ski_	what-is-this : then it would possibly be simplest to start with Prolog
2013-08-31 10:45:11	 *	hackagebot tls 1.1.4 - TLS/SSL protocol native implementation (Server and Client)  http://hackage.haskell.org/package/tls-1.1.4 (VincentHanquez)
2013-08-31 10:45:13	-->	dcoutts_ (~dcoutts@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:45:13	<--	dcoutts_ (~dcoutts@cust.static.81-63-183-2.swisscomdata.ch) has quit (Changing host)
2013-08-31 10:45:13	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-08-31 10:45:13	 *	hackagebot tls-extra 0.6.5 - TLS extra default values and helpers  http://hackage.haskell.org/package/tls-extra-0.6.5 (VincentHanquez)
2013-08-31 10:45:26	ski_	there's a ##prolog channel here. there's also a #mercury channel
2013-08-31 10:45:53	-->	RThinker (~yegor@176.102.17.117) has joined #haskell
2013-08-31 10:46:07	<--	SoupEvil (~jloos@f049092198.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 10:46:20	what-is-this	ski_: prolog is certainly very high up on my should-learn-someday list. I was hoping though that I might be able to model this linear type construction somehow in haskell (since that's the thing I'm currently trying to learn).
2013-08-31 10:46:27	newbie2_	execStateT strike 100 initialState fails
2013-08-31 10:47:05	ski_	what-is-this : yes, the logic programming aspects of it are distinct (but related to) the typing aspects of it
2013-08-31 10:47:45	what-is-this	ski_: unfortunately, not being even slightly acquainted with type systems, I can't even tell at a glance whether what I want is even possible in haskell! perhaps I should invest more time in learning basics of type systems - any pointers to how does one go about learning type systems and type inference?
2013-08-31 10:47:58	ski_	newbie2_ : just guessing here, perhaps you meant `execStateT (strike 100) initialState' ?
2013-08-31 10:48:00	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 268 seconds)
2013-08-31 10:48:27	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-08-31 10:48:44	 *	ski_ looks at the paste
2013-08-31 10:48:56	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-08-31 10:49:15	newbie2_	ski_: yes, thanks
2013-08-31 10:49:16	-->	Desheng2 (~Desheng@166.181.67.245) has joined #haskell
2013-08-31 10:49:18	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 264 seconds)
2013-08-31 10:49:23	ski_	newbie2_ : `d do ...' ?
2013-08-31 10:49:24	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-08-31 10:50:11	 *	hackagebot tls-debug 0.2.5 - Set of programs for TLS testing and debugging  http://hackage.haskell.org/package/tls-debug-0.2.5 (VincentHanquez)
2013-08-31 10:50:48	newbie2_	ski_: and one more question : is it possible to remove IO this code?
2013-08-31 10:50:49	-->	solrize (~solrize@unaffiliated/solrize) has joined #haskell
2013-08-31 10:51:06	newbie2_	ski_: and one more question : is it possible to remove IO _from_ this code?
2013-08-31 10:51:48	ski_	what-is-this : you could try "Polymorphic Type Inference" by Michael Schwartzbach in 1995-03 at <http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/TYPE/typeinf.pdf>, istr it being relatively easy-going
2013-08-31 10:51:53	-->	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has joined #haskell
2013-08-31 10:52:13	ski_	what-is-this : as to linear types, i suspect you can't have them in Haskell without extending the type system
2013-08-31 10:52:26	newbie2_	ski_: StateT requires a monad, so can i put some empty one?
2013-08-31 10:52:49	ski_	newbie2_ : it uses `putStrLn', so no, you can't remove `IO' from it
2013-08-31 10:53:04	arkeet	you might be able to move it elsewhere, though!
2013-08-31 10:53:09	newbie2_	ski_: forgot, ofc without that line
2013-08-31 10:53:21	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-31 10:53:26	newbie2_	ski_: just health -=
2013-08-31 10:53:32	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 10:53:37	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:53:40	ski_	then you could have `StateT Game Identity ()' or `State Game ()' e.g.
2013-08-31 10:53:49	what-is-this	ski_: wow, that tutorial seems awesome,  thanks!
2013-08-31 10:53:49	arkeet	or Monad m => StateT Game m ()
2013-08-31 10:53:53	ski_	yes
2013-08-31 10:54:16	ski_	or `MonadState Game m => Damage -> m ()'
2013-08-31 10:54:18	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 10:54:44	arkeet	or that yeah
2013-08-31 10:54:44	ski_	(obviously `Damage ->' would be present in some place in the earlier alternatives, as well=
2013-08-31 10:54:47	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 10:54:47	ski_	)
2013-08-31 10:54:48	mm_freak	type IShouldReallyUseFunctionalReactiveProgrammingBecauseGlobalStateBasedGamesSuckT = StateT Game
2013-08-31 10:54:56	arkeet	:p
2013-08-31 10:55:34	ski_	i thought the point of the state monad was to not have global state ;P
2013-08-31 10:55:41	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 10:55:45	-->	Desheng3 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 10:55:52	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 10:56:04	<--	Desheng2 (~Desheng@166.181.67.245) has quit (Ping timeout: 256 seconds)
2013-08-31 10:56:17	newbie2_	well when i have smth like a game, there is no way except State Monad to code it, isn't it?
2013-08-31 10:56:24	arkeet	false!
2013-08-31 10:56:28	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-08-31 10:56:41	arkeet	let mm_freak tell you about frp.
2013-08-31 10:56:47	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 10:57:00	knz	another question: how can I explicitly import the constructor ":." from Data.Array.Repa.Index? (http://hackage.haskell.org/packages/archive/repa/3.2.2.3/doc/html/Data-Array-Repa-Index.html)
2013-08-31 10:57:00	arkeet	I probably should have a look at netwire at some point.
2013-08-31 10:57:16	knz	I try to write import Data.Array.Repa.Index (:.) but that does not work
2013-08-31 10:57:18	arkeet	knz: import blah ((:.))
2013-08-31 10:57:22	knz	nope
2013-08-31 10:57:24	arkeet	yes
2013-08-31 10:57:26	arkeet	double parentheses
2013-08-31 10:57:38	arkeet	because "(:.)" is the name of the thing you're importing.
2013-08-31 10:57:50	mm_freak	ski_: StateT is global state
2013-08-31 10:57:59	mm_freak	when used in a game
2013-08-31 10:58:01	knz	arkeet: it's a constructor, not a function
2013-08-31 10:58:04	knz	t.hs:18:8: Not in scope: data constructor `:.'
2013-08-31 10:58:05	arkeet	I know!
2013-08-31 10:58:05	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 10:58:16	arkeet	ah. that imports the type, I guess.
2013-08-31 10:58:20	arkeet	((:.)(..))
2013-08-31 10:58:20	arkeet	;)
2013-08-31 10:58:21	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 245 seconds)
2013-08-31 10:58:30	ski_	newbie2_ : e.g. instead of a state-monad, you *could* use plain explicit state-passing/threading-style, as per "What the hell are Monads?" by Noel Winstanley in 1999 at <http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html> (before the monadic stuff is introduced)
2013-08-31 10:58:40	mm_freak	knz: ((:.)(:.))
2013-08-31 10:58:41	<--	corkexaminer (~chrisdorn@178.111.151.90) has quit (Ping timeout: 256 seconds)
2013-08-31 10:58:46	mm_freak	knz: ((:.)((:.)))
2013-08-31 10:58:49	knz	this syntax is awful :)
2013-08-31 10:58:53	mm_freak	a bit awkward, yeah
2013-08-31 10:58:58	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 10:59:00	ski_	mm_freak : depends on how far the state "reaches", no ?
2013-08-31 10:59:04	knz	:t (..)
2013-08-31 10:59:05	lambdabot	parse error on input `..'
2013-08-31 10:59:13	ski_	(though i agree with you in some sense)
2013-08-31 10:59:15	arkeet	import Module (Foo(..)) imports Foo and all its constructors.
2013-08-31 10:59:20	knz	aha
2013-08-31 10:59:21	knz	k
2013-08-31 10:59:21	knz	thx
2013-08-31 10:59:24	-->	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has joined #haskell
2013-08-31 10:59:31	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 10:59:32	mm_freak	ski_: in a game it probably reaches very far =)
2013-08-31 10:59:46	mm_freak	likely over the entire application, but in the best case over a game session
2013-08-31 10:59:54	mm_freak	the latter isn't much of an improvement
2013-08-31 10:59:59	adnap	Well this is fun:
2013-08-31 11:00:06	adnap	>   [Act: 1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]  [1|(status)   2|(msgs)     3|#haskell   4|##japanese 5|#japa~utf8 6|#gentoo    7|#gentoo-ja   ]   [8|#anime     9|#hask~blah 0|##club~ntu q|#wanikani  w|##physics  e|#BDS~unity r|#darcs       ]   [t|#fsf       y|##law      u|##cars     i|##ele~nics o|#grub      p|##crypto   a|#ratpoison   ]
2013-08-31 11:00:07	lambdabot	  Not in scope: data constructor `Act'Not in scope: `status'
2013-08-31 11:00:08	lambdabot	 Perhaps you mea...
2013-08-31 11:00:17	adnap	Err, woops
2013-08-31 11:00:18	adnap	lol
2013-08-31 11:00:19	arkeet	what
2013-08-31 11:00:24	adnap	pted.
2013-08-31 11:00:31	adnap	> let f, g :: Int -> Int; f x = g x; g x = f x in f 2
2013-08-31 11:00:34	ski_	mm_freak : i just attempting to argue that you probably *could* localize the state in it quite some more
2013-08-31 11:00:37	Ghoul_	I find that every time I go to write a real world thing I start with a state transformer
2013-08-31 11:00:38	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:00:51	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 11:00:57	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-08-31 11:01:00	adnap	I always get screwed over by the middle-click
2013-08-31 11:01:04	Ghoul_	and then realize I need a pipe transformer or something, so I wrap that in. Then I need IO, so I refractor that. Then I need EitherT or Error or something like that
2013-08-31 11:01:15	Ghoul_	and a few days of development later I have a 5-trans stack :(
2013-08-31 11:01:17	<--	kwos (~kwos@103.5.142.6) has quit (Quit: Computer has gone to sleep)
2013-08-31 11:01:21	arkeet	adnap: so what's fun?
2013-08-31 11:01:26	arkeet	oh.
2013-08-31 11:01:27	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-08-31 11:01:29	adnap	arkeet: I was being sarcastic
2013-08-31 11:01:32	arkeet	that's not very surprising.
2013-08-31 11:01:33	arkeet	:p
2013-08-31 11:01:45	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:02:19	arkeet	mm_freak: is there a good introduction to netwire somewhere?
2013-08-31 11:02:20	adnap	arkeet: Well, this is "malicious". Even a safe module could write this
2013-08-31 11:02:31	arkeet	> fix id
2013-08-31 11:02:35	arkeet	adnap: and?
2013-08-31 11:02:36	ski_	Ghoul_ : with or without any `ContT' in it ?
2013-08-31 11:02:38	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:02:39	mm_freak	ski_: assuming that all the game objects depend on each other, there is really only one way to localize:  automata and proper data dependencies
2013-08-31 11:02:46	mm_freak	ski_: from there it's a small step to FRP =)
2013-08-31 11:03:06	<--	Desheng3 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:03:06	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 264 seconds)
2013-08-31 11:03:08	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Remote host closed the connection)
2013-08-31 11:03:11	mm_freak	arkeet: the netwire 5 tutorial is quite decent, but not finished yet
2013-08-31 11:03:11	<--	simukis_ (~simukis_@78.63.244.234) has quit (Remote host closed the connection)
2013-08-31 11:03:15	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 11:03:22	mm_freak	arkeet: http://hub.darcs.net/ertes/netwire
2013-08-31 11:03:32	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 11:03:36	arkeet	thanks
2013-08-31 11:03:41	arkeet	netwire 5, you say.
2013-08-31 11:03:43	Ghoul_	ski_: I don't use ContT, I've never learnt about it
2013-08-31 11:03:50	mm_freak	yeah =)
2013-08-31 11:03:53	mm_freak	it's not on hackage yet
2013-08-31 11:03:53	<--	Sagi (maarten@gateway/utwente.nl/session) has quit (Ping timeout: 240 seconds)
2013-08-31 11:04:03	mm_freak	the API is still not stabilized
2013-08-31 11:04:21	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 256 seconds)
2013-08-31 11:04:24	ski_	mm_freak : i think that's probably the case -- but you could possibly have lots of transforms of `State s' stuff into automata ?
2013-08-31 11:04:37	<--	roconnor_ (~roconnor@e120-pool-d89a7e29.brdbnd.voicenetwork.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 11:04:38	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-08-31 11:04:51	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 11:05:10	ski_	Ghoul_ : then you haven't had real fun with monad transformer stacks yet :)
2013-08-31 11:05:16	 *	hackagebot crypto-random 0.0.3 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.3 (VincentHanquez)
2013-08-31 11:05:29	mm_freak	ski_: local state transforms are pretty much what automata are, but with one important difference:  the state is invisible from outside
2013-08-31 11:05:31	-->	quchen (~quchen@port-92-195-112-6.dynamic.qsc.de) has joined #haskell
2013-08-31 11:05:33	adnap	arkeet: Could I write a program that tries to get a result from a function and gives up if the result is not returned in a certain amount of time?
2013-08-31 11:05:42	mm_freak	data Auto a b = forall s. Auto s ((a, s) -> (b, s))
2013-08-31 11:05:47	arkeet	adnap: lambdabot does it!
2013-08-31 11:06:11	ski_	mm_freak : ok, which is basically a synchonous stream processor
2013-08-31 11:06:19	mm_freak	ski_: exactly
2013-08-31 11:06:31	adnap	arkeet: Well, if my program interprets functions, I need some way to protect against functions which never return a result
2013-08-31 11:06:38	ski_	  data SSP a b = GetPut (a -> (b,SSP a b))
2013-08-31 11:06:38	arkeet	adnap: lambdabot does it!
2013-08-31 11:06:44	mm_freak	this is the usual definition, which is easier to work with:  newtype Auto a b = Auto (a -> (b, Auto a b))
2013-08-31 11:06:54	mm_freak	you can find it in 'arrows', 'machines' and some other libraries
2013-08-31 11:07:04	mm_freak	also yampa's SF is pretty close to it
2013-08-31 11:07:07	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-08-31 11:07:18	adnap	arkeet: Do you think what I suggested is a good way, or is there a way to tell that a function is not doing anything productive for simple cases like the one I posted?
2013-08-31 11:07:29	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 11:07:43	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 11:07:45	arkeet	adnap: I missed your suggestion
2013-08-31 11:07:49	<--	what-is-this (4c15709a@gateway/web/freenode/ip.76.21.112.154) has quit (Ping timeout: 250 seconds)
2013-08-31 11:07:51	ski_	mm_freak : Fudgets are also related (though asynchronous, and with hidden I/O channels)
2013-08-31 11:07:54	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 264 seconds)
2013-08-31 11:08:04	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 11:08:19	adnap	arkeet: Try to call the function and throw some kind of error/exception if the function does not return a result within some interval of time
2013-08-31 11:08:30	<--	bduc (~bduc@bduc.org) has quit (Quit: Reconnecting)
2013-08-31 11:08:31	augur	ski_: what an interesting type
2013-08-31 11:08:32	-->	Toxaris (~default@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 11:08:34	arkeet	adnap: well, lambdabot does that.
2013-08-31 11:08:37	-->	bduc (~bduc@bduc.org) has joined #haskell
2013-08-31 11:08:46	mm_freak	ski_: for games you want to make this abstraction as lightweight as possible…  Auto is a thin layer around regular haskell functions
2013-08-31 11:08:47	ski_	augur : `SSP' ?
2013-08-31 11:08:50	augur	ski_: yeah
2013-08-31 11:08:51	augur	hmm
2013-08-31 11:09:01	adnap	arkeet: Well, I don't know if lambdabot is as good as it gets
2013-08-31 11:09:07	arkeet	I don't know either.
2013-08-31 11:09:11	adnap	Okay
2013-08-31 11:09:14	augur	data SSP a b = SSP { get :: a -> b, put :: a -> SSP a b }
2013-08-31 11:09:15	arkeet	I can't think of any way to do better, though.
2013-08-31 11:09:27	adnap	> let f, g :: Int -> Int; f x = g x; g x = f x in f 2
2013-08-31 11:09:34	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:09:38	mm_freak	augur: s/put/next/
2013-08-31 11:09:42	adnap	It seems like this should be detectable by analysis
2013-08-31 11:09:46	augur	mm_freak: even better!
2013-08-31 11:09:56	ski_	  data ASP a b = Get (a -> ASP a b) | Put b (ASP a b)
2013-08-31 11:10:01	augur	coalgebras! :D
2013-08-31 11:10:40	augur	at least i THINK this is a coalgebra. hmm
2013-08-31 11:10:42	mm_freak	add a time argument and you've got yampa's SF
2013-08-31 11:10:44	augur	is it?
2013-08-31 11:10:49	<--	skulls (~user@gateway/tor-sasl/skulls) has quit (Ping timeout: 240 seconds)
2013-08-31 11:10:56	mm_freak	newtype SF a b = SF (DTime -> a -> (b, SF a b))
2013-08-31 11:11:06	mm_freak	timeDelta :: DTime
2013-08-31 11:11:27	augur	it feels kinda coalgebraic
2013-08-31 11:11:36	ski_	augur,mm_freak : <ftp://ftp.cpsc.ucalgary.ca/pub/projects/charity/examples/misc/proc.ch> at <http://pll.cpsc.ucalgary.ca/charity1/www/home.html> is also basically the same thing
2013-08-31 11:11:47	<--	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has quit (Quit: q+)
2013-08-31 11:12:38	-->	wolfnn (~wolfnn@90.24.131.251) has joined #haskell
2013-08-31 11:12:47	ski_	adnap : detecting that in general is equivalent to solving the halting problem
2013-08-31 11:13:10	adnap	ski_: I know
2013-08-31 11:13:14	<--	elediaz (~eleazar@90.173.211.6) has quit (Quit: Saliendo)
2013-08-31 11:13:19	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-08-31 11:13:31	ski_	adnap : however, in some cases GHC can detect it using "blackholing", and then it prints something like "<loop>"
2013-08-31 11:13:48	adnap	ski_: The example I posted seems simple to detect
2013-08-31 11:13:56	ski_	(detecting when forcing a thunk wants to force the same thunk)
2013-08-31 11:14:08	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-08-31 11:14:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:14:37	-->	mjo (~mjo@82-68-90-198.dsl.in-addr.zen.co.uk) has joined #haskell
2013-08-31 11:14:45	ski_	augur : your variant is (more or less) coalgebraic, at least
2013-08-31 11:15:17	 *	hackagebot crypto-random 0.0.4 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.4 (VincentHanquez)
2013-08-31 11:15:31	ski_	  SSP a b = b ^ a * SSP a b ^ a
2013-08-31 11:16:04	-->	patrick_ (~patrick@24-52-232-230.cable.teksavvy.com) has joined #haskell
2013-08-31 11:16:04	ski_	augur : hm, i suppose we want some concept corresponding to "polynomial functor", maybe ?
2013-08-31 11:16:35	augur	ski_: well, its the fix of   SSPF a b x = a -> (b,x) ofcourse
2013-08-31 11:16:51	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-08-31 11:16:59	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-08-31 11:17:03	ski_	yes, the question is whether `a ->' there would be allowed
2013-08-31 11:17:21	ski_	(in the Charity `proc', they do that via exponentials=
2013-08-31 11:17:22	ski_	)
2013-08-31 11:17:30	<--	codesoup (~codesoup@69-165-142-157.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-08-31 11:17:30	augur	i think that makes it non-coalgebraic
2013-08-31 11:18:09	ski_	is `T = A + T^B' algebraic ?
2013-08-31 11:18:10	augur	because a coalgebra is an f :: a -> f a
2013-08-31 11:18:22	augur	ski_: well its not an algebra!
2013-08-31 11:18:23	ski_	(where `A' and `B' are constants)
2013-08-31 11:18:38	ski_	it's a polynomial functor
2013-08-31 11:18:39	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 11:18:57	augur	ski_: maybe, but that doesnt make it a coalgebra :)
2013-08-31 11:19:20	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 11:19:26	ski_	well, the issue there was algebraic, not coalgebraic
2013-08-31 11:19:36	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-08-31 11:20:15	<--	dalaing (~dalaing@124-170-121-31.dyn.iinet.net.au) has quit (Quit: Leaving.)
2013-08-31 11:20:18	ski_	`<X,f>' is an `F'-algebra when `f : F X --> X'
2013-08-31 11:20:22	-->	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has joined #haskell
2013-08-31 11:20:37	ski_	(anarchic `F'-algebra, i.e.=
2013-08-31 11:21:50	ski_	augur : do you want any restrictions placed on the functor `F' ?
2013-08-31 11:22:48	augur	ski_: i dont want anything
2013-08-31 11:22:57	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-08-31 11:22:58	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-08-31 11:23:01	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Quit: Pozdrav)
2013-08-31 11:23:59	ski_	augur : it's not clear to me if you want to be talking about `F'-algebras or something else
2013-08-31 11:24:14	ski_	perhaps universal algebra stuff ?
2013-08-31 11:24:40	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-08-31 11:24:52	augur	ski_: i dont want anything :)
2013-08-31 11:24:53	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:26:07	ski_	hm, iiuc, universal algebras only have polynomial functors (with natural numbers as exponents)
2013-08-31 11:26:37	ski_	augur : what is wrong with you !?
2013-08-31 11:27:07	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-08-31 11:27:20	augur	:(
2013-08-31 11:28:00	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 11:28:00	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-08-31 11:28:10	-->	skulls (~user@gateway/tor-sasl/skulls) has joined #haskell
2013-08-31 11:29:08	ski_	anyway, you seemed to want to determine whether `SSP' was coalgebraic
2013-08-31 11:29:10	arkeet	!?
2013-08-31 11:29:47	augur	^!?
2013-08-31 11:29:49	ski_	so i was wondering in which sense you intended that term
2013-08-31 11:29:52	newbie2_	if i have smth like tetris with already done list of blocks, should i use state or it is better to use pure functionality?
2013-08-31 11:30:10	 *	ski_ hands augur some linear logic exponentials to play with
2013-08-31 11:30:13	augur	ski_: oh, i just meant it looked like a coalgebra sort of
2013-08-31 11:31:04	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 11:31:34	newbie2_	in fact, there is no global states. But my field have same layers, which number increases with new blocks. So, what can you advise me to do?
2013-08-31 11:31:47	haasn	edwardk: iterated needs to be made an indexed traversal
2013-08-31 11:31:50	haasn	then it would work
2013-08-31 11:32:04	<--	Beetny (~Beetny@ppp118-208-158-9.lns20.bne1.internode.on.net) has quit (Ping timeout: 240 seconds)
2013-08-31 11:32:07	haasn	indexed fold, even
2013-08-31 11:32:25	-->	Pimms (~Pimms@host86-166-165-37.range86-166.btcentralplus.com) has joined #haskell
2013-08-31 11:32:29	-->	Transhumanist (~Transhuma@ppp121-45-209-95.lns20.cbr1.internode.on.net) has joined #haskell
2013-08-31 11:33:02	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 240 seconds)
2013-08-31 11:33:33	<--	Pimms (~Pimms@host86-166-165-37.range86-166.btcentralplus.com) has left #haskell
2013-08-31 11:33:56	 *	ski_ . o O ( "Clean Game Library" <http://cleangl.sourceforge.net/> )
2013-08-31 11:34:18	<--	patrick_ (~patrick@24-52-232-230.cable.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-08-31 11:35:55	augur	hmm
2013-08-31 11:36:09	augur	data ZeroF :: * where
2013-08-31 11:36:15	augur	er, sorry
2013-08-31 11:36:21	augur	data ZeroF :: * -> * where
2013-08-31 11:36:28	augur	how do you write a functor instance for this?
2013-08-31 11:36:52	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 11:36:53	augur	it's obviously a functor, with fmap being ALMOST the identity
2013-08-31 11:36:59	augur	but the types wont line up for the identity
2013-08-31 11:37:03	augur	so you couldnt do fmap x = x
2013-08-31 11:37:06	<--	pootler (~merv.hamm@94.198.124.172) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:34	<--	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-08-31 11:38:54	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:58	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-08-31 11:39:05	<--	epta (~yep@toje.ws) has quit (Quit: leaving)
2013-08-31 11:39:06	augur	i /guess/ you could do fmap x = undefined, because the only way itll get called is with a non-terminative value anyway
2013-08-31 11:39:09	augur	terminating*
2013-08-31 11:39:15	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 11:39:22	augur	but that seems hacky
2013-08-31 11:39:29	augur	oh if only we had absurd patterns!
2013-08-31 11:39:29	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 11:39:38	-->	pootler (~merv.hamm@94.198.124.172) has joined #haskell
2013-08-31 11:40:53	augur	ofcourse, type ZeroF = Const Zero works just as well, so im just being silly, but
2013-08-31 11:42:14	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:42:36	-->	Eduard_Munteanu (~EduardMun@188.25.244.142) has joined #haskell
2013-08-31 11:44:17	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-08-31 11:44:54	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 264 seconds)
2013-08-31 11:45:49	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 11:45:51	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-31 11:45:58	<--	diadara_ (~diadara@115.249.18.25) has quit (Ping timeout: 245 seconds)
2013-08-31 11:46:27	augur	ok question
2013-08-31 11:47:47	augur	first some context: when showing that   Store a b  ~  forall f. Functor f => (a -> f a) -> f b  , we can reason as follows
2013-08-31 11:48:03	-->	MK_FG (~MK_FG@188.226.62.174) has joined #haskell
2013-08-31 11:48:03	<--	MK_FG (~MK_FG@188.226.62.174) has quit (Changing host)
2013-08-31 11:48:03	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-08-31 11:48:57	augur	we cant just store a b, because not every functor lets us inject into it, we cant store an f b because we dont know the functor, so all we can do is somehow use fmap as  fmap h :: f c -> f b  for some c
2013-08-31 11:49:22	-->	nooodl (~nooodl@91.176.171.15) has joined #haskell
2013-08-31 11:49:33	augur	but f c yields a similar problem, so our only recourse is to try c = a and h :: a -> b
2013-08-31 11:50:03	<--	wollw (davidshere@75-101-23-161.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-08-31 11:50:09	augur	then we just need to supply an a, and we can get from a to f a to f b
2013-08-31 11:50:16	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-08-31 11:50:18	-->	jzl_ (~JzL@ec2-54-221-254-160.compute-1.amazonaws.com) has joined #haskell
2013-08-31 11:50:28	augur	this seems kind of forced by the fact that we're polymorphic on f.
2013-08-31 11:50:38	augur	does this emerge from the usual free theorems?
2013-08-31 11:51:25	augur	i cant imagine how it would, but i dont know. free theorems usually are about polymorphism over types not functors
2013-08-31 11:51:36	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-08-31 11:52:10	augur	sorry, i think thats actually that b -> Store a b is iso to that. whatever. you get the question :P
2013-08-31 11:52:18	ski_	augur `fmap f z = case z of {}' ?
2013-08-31 11:52:36	augur	ski_: hmm! maybe that would work yeah
2013-08-31 11:52:42	augur	lovely!
2013-08-31 11:52:52	<--	flebron (~flebron@190.18.146.246) has quit
2013-08-31 11:52:53	ski_	you'll need a recent extension, i think
2013-08-31 11:52:56	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 11:53:10	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-08-31 11:53:12	ski_	(obviously `EmptyDataDecls' ought to have supported this from the start)
2013-08-31 11:54:06	<--	jzl (~JzL@ec2-54-221-211-179.compute-1.amazonaws.com) has quit (Ping timeout: 264 seconds)
2013-08-31 11:55:17	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-08-31 11:55:18	 *	hackagebot hspec-meta 1.7.1 - A version of Hspec which is used to test Hspec itself  http://hackage.haskell.org/package/hspec-meta-1.7.1 (SimonHengel)
2013-08-31 11:55:38	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 11:55:46	joelteon	how do you test hspec-meta?
2013-08-31 11:55:51	<--	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 245 seconds)
2013-08-31 11:56:13	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 11:56:43	ski_	@free foo :: Functor f => (a -> f a) -> f b
2013-08-31 11:56:43	lambdabot	Extra stuff at end of line
2013-08-31 11:56:47	ski_	@free foo :: (a -> f a) -> f b
2013-08-31 11:56:47	lambdabot	Plugin `free' failed with: src/Lambdabot/Plugin/Haskell/Free/Type.hs:(152,17)-(160,45): Non-exhaustive patterns in case
2013-08-31 11:56:53	ski_	@free foo :: (forall a b. (a -> b) -> (f a -> f b)) -> (a -> f a) -> f b
2013-08-31 11:56:53	lambdabot	Plugin `free' failed with: src/Lambdabot/Plugin/Haskell/Free/Type.hs:(152,17)-(160,45): Non-exhaustive patterns in case
2013-08-31 11:57:16	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 246 seconds)
2013-08-31 11:57:18	-->	ts33kr (~ts33kr@193.108.171.89) has joined #haskell
2013-08-31 11:58:53	ski_	@free f :: [a] -> Maybe (a,a)
2013-08-31 11:58:53	lambdabot	$map_Maybe ($map_Pair g g) . f = f . $map g
2013-08-31 11:59:36	ski_	@free x :: Bool
2013-08-31 11:59:36	lambdabot	x = x
2013-08-31 11:59:40	ski_	@free x :: Maybe a
2013-08-31 11:59:41	lambdabot	$map_Maybe f x = x
2013-08-31 11:59:48	-->	xwl (~user@182.48.101.22) has joined #haskell
2013-08-31 12:00:06	<--	Thra11 (~Thra11@200.248.90.146.dyn.plus.net) has quit (Ping timeout: 264 seconds)
2013-08-31 12:00:18	 *	hackagebot io-streams 1.1.1.0 - Simple, composable, and easy-to-use stream I/O  http://hackage.haskell.org/package/io-streams-1.1.1.0 (GregoryCollins)
2013-08-31 12:00:20	 *	hackagebot hspec 1.7.1 - Behavior-Driven Development for Haskell  http://hackage.haskell.org/package/hspec-1.7.1 (SimonHengel)
2013-08-31 12:00:22	 *	hackagebot HTF 0.11.0.0 - The Haskell Test Framework  http://hackage.haskell.org/package/HTF-0.11.0.0 (StefanWehr)
2013-08-31 12:01:05	--	jzl_ is now known as jzl
2013-08-31 12:01:29	 *	ski_ tries to recall how to derive the free stuff
2013-08-31 12:01:41	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 12:01:53	-->	Soft (~soft@dyn58-80.yok.fi) has joined #haskell
2013-08-31 12:01:53	--	Soft is now known as Soft-
2013-08-31 12:02:21	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 12:02:29	-->	matheus23 (~quassel@p4FDF3159.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 12:02:31	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-08-31 12:05:37	-->	babu` (~user@122.172.245.2) has joined #haskell
2013-08-31 12:05:57	-->	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has joined #haskell
2013-08-31 12:06:40	-->	Bluuu (~a@unaffiliated/bluuu) has joined #haskell
2013-08-31 12:07:22	-->	tpsinnem (~tpsinnem@a91-156-149-49.elisa-laajakaista.fi) has joined #haskell
2013-08-31 12:07:29	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-08-31 12:07:33	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Ping timeout: 248 seconds)
2013-08-31 12:08:11	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-08-31 12:08:15	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 12:11:00	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 12:12:17	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-08-31 12:15:16	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 12:16:49	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-08-31 12:17:06	-->	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-08-31 12:19:09	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 12:19:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 245 seconds)
2013-08-31 12:19:29	<--	Transhumanist (~Transhuma@ppp121-45-209-95.lns20.cbr1.internode.on.net) has quit (Quit: KVIrc 4.1.3 Equilibrium http://www.kvirc.net/)
2013-08-31 12:19:29	-->	peter_zfs (~a@130.43.66.138.dsl.dyn.forthnet.gr) has joined #haskell
2013-08-31 12:20:30	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 268 seconds)
2013-08-31 12:20:41	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-08-31 12:20:42	-->	epta (~yep@toje.ws) has joined #haskell
2013-08-31 12:21:15	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-08-31 12:21:54	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-08-31 12:22:13	Ghoul_	ski_: is ContT useful or un-useful in making transformer stacks easier to manage?
2013-08-31 12:22:42	arkeet	neither. but it makes your transformer stack more awesome :>D
2013-08-31 12:22:58	arkeet	(I don't understand ContT.)
2013-08-31 12:23:11	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-08-31 12:23:19	-->	ashnur (~ashnur@79.117.78.147) has joined #haskell
2013-08-31 12:23:33	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-08-31 12:23:35	jophish	Yo yo yo
2013-08-31 12:23:50	mm_freak	Ghoul_: if you imagine your sequence of computations as a directed graph, ContT basically allows you to pick any subtree of it and stick it to anywhere (where the types match)
2013-08-31 12:24:09	jophish	I'm writing a compiler for a small functional language with a similar syntax to haskell (Using Language.Haskell.Exts to parse it in fact).
2013-08-31 12:24:53	mm_freak	Ghoul_: two of the simplest things you can implement with it is 'goto', 'continue' and 'break' from imperative languages
2013-08-31 12:25:03	mm_freak	s/two/three/
2013-08-31 12:25:03	Ghoul_	Oh, so it's basically lego
2013-08-31 12:25:17	jophish	I'm planning to use Hindley–Milner for the internal representation. Where can people recommend looking for something similar to a Haskell->HM compiler
2013-08-31 12:25:18	newbie2_	in_line :: Integer -> [(Integer, Integer)] -> Integer -- returns 1 if integer is in one of tuples, otherwise 0. Note that tuples are sorted and not intersected
2013-08-31 12:25:18	 *	hackagebot xmlgen 0.6.1.0 - Fast XML generation library  http://hackage.haskell.org/package/xmlgen-0.6.1.0 (StefanWehr)
2013-08-31 12:25:22	mm_freak	lego for programs, yeah =)
2013-08-31 12:25:27	jophish	I don't think GHC uses HM any more
2013-08-31 12:25:27	newbie2_	what is the fasted way to do that?
2013-08-31 12:25:35	Ghoul_	That's cool I guess
2013-08-31 12:25:40	Ghoul_	is there a performance impact?
2013-08-31 12:25:54	<--	xwl (~user@182.48.101.22) has quit (Remote host closed the connection)
2013-08-31 12:25:58	mm_freak	newbie2_: a recursive function
2013-08-31 12:26:07	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-08-31 12:26:11	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 12:26:22	newbie2_	mm_freak: tuples are sorted, can i use it somehow?
2013-08-31 12:26:26	mm_freak	Ghoul_: ContT performs CPS transformation, which usually gives you even higher performance =)
2013-08-31 12:26:43	-->	Desheng2 (~Desheng@166.182.67.48) has joined #haskell
2013-08-31 12:26:45	mm_freak	Ghoul_: that's the main purpose of Codensity, which is ContT with the continuation effects hidden
2013-08-31 12:27:00	newbie2_	mm_freak: intuition says that exists O(1) algo
2013-08-31 12:27:04	mm_freak	newbie2_: you can use it to break early
2013-08-31 12:27:11	mm_freak	no, definitely not O(1)
2013-08-31 12:27:14	Ghoul_	Sounds cool
2013-08-31 12:27:15	mm_freak	it's still O(n)
2013-08-31 12:27:30	mm_freak	newbie2_: you may want to use Data.Set instead
2013-08-31 12:27:45	-->	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 12:28:08	mm_freak	Ghoul_: once the enthusiasm is over you will realize that you don't really need ContT for anything =)
2013-08-31 12:28:26	mm_freak	Ghoul_: but it's cool to try out =)
2013-08-31 12:28:36	mm_freak	Ghoul_: in fact the best way to understand ContT is to implement it yourself
2013-08-31 12:28:36	Ghoul_	I'm trying to imagine how this "higher performance" thing will work
2013-08-31 12:28:41	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-08-31 12:29:03	Ghoul_	I'm familiar with CPS but I can't imagine how it's going to make tightly knit code faster by lego-izing it
2013-08-31 12:29:23	mm_freak	Ghoul_: it gets rid of some memory operations
2013-08-31 12:29:29	mm_freak	consider a CPSed Either
2013-08-31 12:29:46	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 12:30:00	mm_freak	type Either e a = forall c. (e -> c) -> (a -> c) -> c
2013-08-31 12:30:25	mm_freak	when you apply this function it just calls the proper function right away…  it does not compare a tag in memory
2013-08-31 12:31:13	mm_freak	in general you won't notice much of a difference, but there are some algorithms where CPS can boost performance quite a bit
2013-08-31 12:31:13	Ghoul_	okay.
2013-08-31 12:31:15	<--	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-08-31 12:31:33	<--	babu` (~user@122.172.245.2) has quit (Read error: Connection reset by peer)
2013-08-31 12:31:53	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 12:32:03	-->	Feuerbach (~feuerbach@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 12:32:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 12:32:31	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-08-31 12:32:53	mm_freak	one huge drawback of ContT and related monad transformers is that it kills MonadFix
2013-08-31 12:34:30	-->	Beetny (~Beetny@ppp118-208-31-97.lns20.bne1.internode.on.net) has joined #haskell
2013-08-31 12:34:37	<--	bwr (~bwr@69.71.1.1) has quit (Quit: :q)
2013-08-31 12:35:24	-->	jarlg (~jarlg@c-178-73-207-244.anonymous.at.anonine.com) has joined #haskell
2013-08-31 12:35:35	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 12:36:13	-->	dropster (~Kim@0x3ec6efe6.inet.dsl.telianet.dk) has joined #haskell
2013-08-31 12:36:14	<--	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has quit (Quit: Lost terminal)
2013-08-31 12:37:03	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-08-31 12:39:18	Ghoul_	oh god
2013-08-31 12:39:24	Ghoul_	its horrifically confusing to read code that uses it
2013-08-31 12:39:52	-->	Lethalman (~lethal@ppp-249-30.28-151.libero.it) has joined #haskell
2013-08-31 12:40:21	aristid	ContT? just gotta link this: http://blog.sigfpe.com/2008/12/mother-of-all-monads.html
2013-08-31 12:41:18	-->	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has joined #haskell
2013-08-31 12:42:31	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 12:42:47	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-08-31 12:43:06	Ghoul_	thanks'
2013-08-31 12:43:19	<--	Jonno_FTW (~come@150.101.97.171) has quit (Ping timeout: 268 seconds)
2013-08-31 12:43:24	Ghoul_	hmm, typo, or I could really mean thanks-prime
2013-08-31 12:43:29	Ghoul_	an alternate extra strict variant of thanks
2013-08-31 12:43:52	aristid	surely you meant dthanks/dt
2013-08-31 12:44:02	-->	shintah (bebble@h-226-30.a336.priv.bahnhof.se) has joined #haskell
2013-08-31 12:44:16	arkeet	aristid: lol
2013-08-31 12:44:18	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 12:44:38	Ghoul_	lol
2013-08-31 12:44:47	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 260 seconds)
2013-08-31 12:44:48	-->	kallisti (~adam@c-24-99-220-130.hsd1.ga.comcast.net) has joined #haskell
2013-08-31 12:46:14	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 12:46:26	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-08-31 12:46:31	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 12:46:59	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-08-31 12:47:13	ski_	Ghoul_ : as i said, `ContT' is fun
2013-08-31 12:47:34	<--	Feuerbach (~feuerbach@cust.static.81-63-183-2.swisscomdata.ch) has left #haskell ("bye")
2013-08-31 12:47:37	newbie2_	can you give examples of usage RBTree?
2013-08-31 12:47:48	newbie2_	i mean syntax
2013-08-31 12:47:55	ski_	aristid : that must be equal to `hanks', right ?
2013-08-31 12:48:26	-->	Kiryx (~Kiryx@178.183.255.102.dsl.dynamic.t-mobile.pl) has joined #haskell
2013-08-31 12:48:36	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-08-31 12:49:03	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-08-31 12:49:49	<--	ashnur (~ashnur@79.117.78.147) has quit (Quit: WeeChat 0.4.1)
2013-08-31 12:50:14	-->	xwl (~user@182.48.101.22) has joined #haskell
2013-08-31 12:50:20	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 12:50:31	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-08-31 12:51:21	Ghoul_	ContT StateT sounds like fun fun fun
2013-08-31 12:51:30	<--	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Quit: Leaving)
2013-08-31 12:52:35	Ghoul_	now, the way to cheat thinking of real applications, now that I know how it works, is to hop on gist.github.com and search for ContT and let the knowledge flow in :P
2013-08-31 12:52:38	-->	zbcm (~zbcm@58.169.107.43) has joined #haskell
2013-08-31 12:53:17	newbie2_	and can i mao in RBTree?
2013-08-31 12:53:19	newbie2_	*map
2013-08-31 12:54:06	ski_	who broke `unmtl' ?
2013-08-31 12:54:14	ski_	@unmtl ReaderT r (WriterT w m) a
2013-08-31 12:54:14	lambdabot	r -> (WriterT w m) a
2013-08-31 12:55:07	ski_	newbie2_ : not sure how `RBTree' is defined ..
2013-08-31 12:55:19	 *	hackagebot network-multicast 0.0.9 - Simple multicast library  http://hackage.haskell.org/package/network-multicast-0.0.9 (AudreyTang)
2013-08-31 12:55:45	newbie2_	data RBTree a = Node Color a !(RBTree a) !(RBTree a) | Leaf    	-- Defined in `Data.Tree.RBTree'
2013-08-31 12:56:21	ski_	replace each value `x' of type `a' with `f x', where `f' is the function to map over it
2013-08-31 12:57:56	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 12:58:14	-->	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 12:59:27	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 12:59:54	<--	RThinker (~yegor@176.102.17.117) has quit (Quit: Leaving.)
2013-08-31 13:00:03	<--	newbie2_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 13:00:19	 *	hackagebot genprog 0.1.0.2 - Genetic programming library  http://hackage.haskell.org/package/genprog-0.1.0.2 (JanSnajder)
2013-08-31 13:00:53	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-08-31 13:01:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 13:01:09	<--	make_sense (~make_sens@178.124.126.144) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 13:05:26	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 240 seconds)
2013-08-31 13:06:02	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 13:06:14	<--	xwl (~user@182.48.101.22) has quit (Remote host closed the connection)
2013-08-31 13:07:03	<--	vijaykiran (~user@80.113.145.6) has quit (Ping timeout: 260 seconds)
2013-08-31 13:09:36	<--	arborist (~arborist@e182017126.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-08-31 13:11:02	-->	RThinker (~yegor@176.102.17.117) has joined #haskell
2013-08-31 13:11:10	-->	bennofs (~benno@dslb-088-073-195-148.pools.arcor-ip.net) has joined #haskell
2013-08-31 13:11:47	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-08-31 13:13:27	-->	soulofpeace (~soulofpea@175.156.232.233) has joined #haskell
2013-08-31 13:14:59	-->	ykm (~ykm@38.snat-111-91-51.hns.net.in) has joined #haskell
2013-08-31 13:15:45	<--	dropster (~Kim@0x3ec6efe6.inet.dsl.telianet.dk) has quit (Quit: Leaving.)
2013-08-31 13:16:00	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 268 seconds)
2013-08-31 13:16:10	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-08-31 13:17:31	<--	tpsinnem (~tpsinnem@a91-156-149-49.elisa-laajakaista.fi) has quit (Ping timeout: 245 seconds)
2013-08-31 13:17:37	<--	clog_ (~nef@bespin.org) has quit (Quit: ^C)
2013-08-31 13:17:49	-->	clog (~nef@bespin.org) has joined #haskell
2013-08-31 13:18:04	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-08-31 13:18:18	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:18:51	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-08-31 13:19:30	bmm	Hi. I'm trying to use the Lazy bytestring to murmur-hash a file per chunk. But I keep getting a Data.ByteString.Internal.ByteString where murmur-hash expects a Data.ByteString. How can I deal with that?
2013-08-31 13:19:33	-->	tauli (~tauli@p5B149BFD.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 13:19:38	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 13:19:54	donri	bmm: they're the same thing
2013-08-31 13:20:07	lpaste	bmm pasted “Not working murmurhash of a file” at http://lpaste.net/92362
2013-08-31 13:20:51	donri	bmm: paste error please :)
2013-08-31 13:21:08	bmm	donri: ok, will paste...
2013-08-31 13:21:13	ski_	hm, is there any composition type present in lambdabot ?
2013-08-31 13:21:32	lpaste	bmm annotated “Not working murmurhash of a file” with “Not working murmurhash of a file (annotation)” at http://lpaste.net/92362#a92363
2013-08-31 13:21:32	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 13:21:35	Ghoul_	what does this do
2013-08-31 13:21:38	Ghoul_	fullTree (pred -> n) = do ...
2013-08-31 13:22:03	Ghoul_	particularly, the (pred -> n) thing. Never seen anything like that before
2013-08-31 13:22:04	mm_freak	Ghoul_: it's a view pattern
2013-08-31 13:22:15	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 13:22:21	mm_freak	same as:  fullTree n' | n <- pred n' = …
2013-08-31 13:22:35	mm_freak	or:  fullTree n' = let n = pred n' in …
2013-08-31 13:22:36	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 13:23:20	bmm	donri: added the error to the paste earlier. If they are the same, I'm probably missing some kind of import, because I would expect the Bytestring instance of Hashable from the murmur library to be picked up.
2013-08-31 13:23:45	Ghoul_	oh wow
2013-08-31 13:23:47	Ghoul_	thats pretty cool
2013-08-31 13:23:49	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 13:24:00	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-08-31 13:24:06	mm_freak	Ghoul_: it requires an extension though…  i use lets and pattern guards
2013-08-31 13:24:11	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 13:24:15	donri	bmm: yes it has those instances, which suggests you might have multiple versions of some packages installed. try: ghc-pkg list bytestring
2013-08-31 13:24:25	Ghoul_	extensions aren't scary
2013-08-31 13:24:41	Ghoul_	imho haskell 2010 is seriously lacking some type level stuff
2013-08-31 13:24:56	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: This computer has gone to sleep)
2013-08-31 13:24:58	Ghoul_	Like, we have to pull out extensions even to implement a lot of prelude in a *nice* way
2013-08-31 13:25:18	bmm	donri: Ah, so I do! I thought cabal-dev would fix that, but I'll try a complete clean of cabal-dev and try again. Thanks for the tip!
2013-08-31 13:25:37	Ghoul_	Although it gets worrying when there's a longer list of extensions than module exports in your code :P
2013-08-31 13:25:49	donri	bmm: with cabal-dev i think you need to use "cabal-dev ghc-pkg"
2013-08-31 13:25:53	<--	xl (~xl@123.113.159.146) has left #haskell
2013-08-31 13:26:15	donri	also cabal-dev is still subject to the global package db
2013-08-31 13:26:43	-->	znode (~znode@14.117.30.140) has joined #haskell
2013-08-31 13:27:37	bmm	donri: did a complete clean and that fixed it! I used cabal-dev to install a newer version of bytestring earlier and that probably caused the problem. Thanks! I would have never caught that.
2013-08-31 13:27:41	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 13:27:44	mm_freak	Ghoul_: even my acme package from yesterday, single module, uses two extensions =)
2013-08-31 13:28:14	donri	bmm: i don't recommend upgrading core packages
2013-08-31 13:28:45	donri	bmm: actually i'd suggest putting "constraint: bytestring installed" (etc for all core packages, maybe even platform) in ~/.cabal/config
2013-08-31 13:29:27	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 260 seconds)
2013-08-31 13:29:41	donri	bmm: http://www.vex.net/~trebla/haskell/haskell-platform.xhtml#correction
2013-08-31 13:29:57	bmm	donri: I had to because I wanted a "chunks" function of the 0.10 which was not in 0.9. "rm -rf cabal-dev; cabal-dev install etc..." seems to fix it all. I'll look up the link you sent now.
2013-08-31 13:30:26	donri	bmm: well it's real messy to upgrade ghc's core libraries without upgrading ghc
2013-08-31 13:30:29	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 13:30:54	donri	bmm: if you want bytestring .10 upgrade ghc/platform
2013-08-31 13:31:17	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-08-31 13:32:00	bmm	donri: I decided that I want a full laptop os upgrade to go with it, and the full laptop upgrade is still putting me of ;) Maybe next weekend :D
2013-08-31 13:32:12	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 13:32:28	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 13:34:14	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 13:34:35	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 13:34:50	newbie2	what type should i use to cover Integer, Double and Rational?
2013-08-31 13:35:20	lpaste	valyagolev pasted “parse error” at http://lpaste.net/92364
2013-08-31 13:35:21	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 13:35:22	valyagolev	hey guys, I'm trying Arrows and getting parse error, can you tell me what I'm doing wrong?
2013-08-31 13:35:25	 *	hackagebot miniutter 0.4.2 - Simple English clause creation from arbitrary words.  http://hackage.haskell.org/package/miniutter-0.4.2 (MikolajKonarski)
2013-08-31 13:35:48	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 13:35:52	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 13:36:11	valyagolev	nm! forgot -XArrows
2013-08-31 13:36:15	hari_	One of the things, I've noticed as a beginner is that tutorials in haskell tend to get complicated very quickly after the first couple of chapters.
2013-08-31 13:36:52	Eduard_Munteanu	Can you invert a parser in Parsec?
2013-08-31 13:37:00	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-08-31 13:37:10	hari_	I mean, I hit a road block in this chapter: http://en.wikibooks.org/wiki/Haskell/YAHT/Type_advanced
2013-08-31 13:37:52	Eduard_Munteanu	i.e. given a parser, apply it and if it succeeds back out, and if it fails consume the input and return what has been consumed.
2013-08-31 13:38:25	-->	zett_zelett (~zett_zele@62.217.41.192) has joined #haskell
2013-08-31 13:38:26	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-08-31 13:38:30	Eduard_Munteanu	hari_: what exactly?
2013-08-31 13:38:46	hari_	I could not understand the difference between type class and new type.
2013-08-31 13:38:58	<--	jarlg (~jarlg@c-178-73-207-244.anonymous.at.anonine.com) has quit (Read error: Operation timed out)
2013-08-31 13:39:26	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 13:39:41	Eduard_Munteanu	hari_: they're in a whole different category. Newtypes are types, while typeclasses are like sets of types with a common interface.
2013-08-31 13:39:54	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 13:39:56	<--	yacks (~py@103.6.159.99) has quit (Quit: Leaving)
2013-08-31 13:39:58	-->	kwos (~kwos@240.91.30.125.dy.iij4u.or.jp) has joined #haskell
2013-08-31 13:40:16	hari_	How does newtype differ from data?
2013-08-31 13:40:25	 *	hackagebot algebraic-classes 0.5 - Conversions between algebraic classes and F-algebras.  http://hackage.haskell.org/package/algebraic-classes-0.5 (SjoerdVisscher)
2013-08-31 13:40:39	Eduard_Munteanu	hari_: it only contains one value
2013-08-31 13:40:39	hpc	hari_: a newtype is restricted to one constructor of one field
2013-08-31 13:40:47	hpc	hari_: and it is the "same size" as the field
2013-08-31 13:41:11	hpc	hari_: so for instance, with "data Foo = Foo ()", Foo has the following distinct values
2013-08-31 13:41:14	Eduard_Munteanu	hari_: it is also represented more efficiently, since unlike data it does no packing/unpacking at runtime
2013-08-31 13:41:14	hpc	undefined
2013-08-31 13:41:15	hpc	Foo undefined
2013-08-31 13:41:17	hpc	Foo ()
2013-08-31 13:41:30	hpc	hari_: if it's a newtype, (Foo undefined) is semantically the same as undefined
2013-08-31 13:41:40	hari_	you mean newtype holds only one value?
2013-08-31 13:41:49	hpc	yes
2013-08-31 13:42:01	Eduard_Munteanu	hari_: that value can be a tuple or something else though
2013-08-31 13:42:47	hari_	I have trouble grasping the concept of isomorphic mentioned in the tutorial
2013-08-31 13:43:01	<--	zett_zelett (~zett_zele@62.217.41.192) has quit (Ping timeout: 256 seconds)
2013-08-31 13:43:14	hpc	isomorphic is fancy greek for "same shape"
2013-08-31 13:43:17	Eduard_Munteanu	hari_: isomorphic ~ "same shape". It means two types are equivalent.
2013-08-31 13:43:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 13:43:32	hpc	in very non-mathematical language, it means you can go back and forth between A and B
2013-08-31 13:43:40	hiptobecubic	hari_, in boring, possibly imprecise terms it means you can convert between them without losing anything
2013-08-31 13:43:42	hpc	without any "changes"
2013-08-31 13:43:51	hari_	OK
2013-08-31 13:44:02	hiptobecubic	bool <-> int, are not, for example
2013-08-31 13:44:09	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 13:44:15	Eduard_Munteanu	E.g. data Foo a = Baz | Bar a  is isomorphic to  data Maybe a = Nothing | Just a
2013-08-31 13:44:23	hari_	So according to the tutorial, MyInt and Int are identical, except for that I define the ordering in MyInt
2013-08-31 13:45:00	kaw	Hey, I'm getting a bunch of errors about not being able to match "bytestring-0.9.2.1:Data.ByteString.Lazy.Internal.ByteString" with "Data.ByteString.Lazy.Internal.ByteString" -- what might cause this? Is there something wrong with my code or with my package installations?
2013-08-31 13:45:01	jdoles	hiptobecubic: bool and int could be isomorphic by mapping all even values to true and all odd values to false.
2013-08-31 13:45:13	hari_	Hmm,,,
2013-08-31 13:45:21	<--	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has quit
2013-08-31 13:45:25	 *	hackagebot free-functors 0.6 - Provides free functors that are adjoint to functors that forget class constraints.  http://hackage.haskell.org/package/free-functors-0.6 (SjoerdVisscher)
2013-08-31 13:45:43	hiptobecubic	jdoles, isn't that just a mapping? Not an isomorphism? How do you recover your int?
2013-08-31 13:45:44	Eduard_Munteanu	jdoles: that would only work for an infinitely countable Bool
2013-08-31 13:45:46	hpc	kaw: that's happening when you try to cabal-install?
2013-08-31 13:45:47	hari_	Maybe a is used to define functions that can return either Just a or nothing, right?
2013-08-31 13:45:57	hpc	likely going to be just a versions issue
2013-08-31 13:46:01	hiptobecubic	jdoles, Eduard_Munteanu, yes you'd need int -> [bool] or something
2013-08-31 13:46:02	kaw	hpc: No, it's happening when I try to ghc --make my program
2013-08-31 13:46:07	hpc	hmm
2013-08-31 13:46:26	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-08-31 13:46:37	Eduard_Munteanu	hari_: yeah... you could also say functions which can fail.
2013-08-31 13:46:42	hpc	if it happened to me i would just re-install; that's beyond my ability to actually fix
2013-08-31 13:46:43	<--	arborist (~arborist@e182017126.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 13:46:46	hari_	OK
2013-08-31 13:46:49	hiptobecubic	kaw, anytime ghc gives me version numbers of packages, i have always borked my packages
2013-08-31 13:46:58	hari_	Understood.
2013-08-31 13:47:23	kaw	Ironically it's happening after I tried to clear out everything and reinstall because of another package problem
2013-08-31 13:47:32	kaw	So how do I do that properly, what should I clear exactly?
2013-08-31 13:47:39	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 260 seconds)
2013-08-31 13:47:45	hiptobecubic	you have two bytestrings installed i would guess? One older and one more recent and it's getting confused? I'm not particularly well versed in this, i just screw it up a lot
2013-08-31 13:47:58	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 13:48:09	Eduard_Munteanu	kaw: what did you clear?
2013-08-31 13:48:17	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-08-31 13:48:21	kaw	~/.ghc and ~/.cabal
2013-08-31 13:48:28	Eduard_Munteanu	That's fine. :/
2013-08-31 13:48:32	hpc	did you install any packages --global?
2013-08-31 13:48:34	Eduard_Munteanu	Well, unless you did --global installs.
2013-08-31 13:48:46	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:48:48	hiptobecubic	kaw, make a cabal file for your program and use cabal-dev :)
2013-08-31 13:48:49	hari_	How does one automatically reply to a person in XChat without typing the name fully?
2013-08-31 13:48:53	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-08-31 13:48:58	<--	longqm (~longqm@219.224.160.186) has quit (Quit: Leaving)
2013-08-31 13:48:58	hpc	hari_: start typing and press tab
2013-08-31 13:49:01	hiptobecubic	hari_, most IRC clients have tab completion
2013-08-31 13:49:04	hpc	h<tab> -> hari_
2013-08-31 13:49:05	kaw	Would that happen only if I explicitly passed --global, or would it happen automatically if I ran cabal as root?
2013-08-31 13:49:21	hari_	hpc,  thanks
2013-08-31 13:49:22	kaw	I'm pretty sure I haven't done the former but I have done the latter
2013-08-31 13:49:30	hpc	kaw: if you ran cabal as root, it would go into root's ~/.ghc and ~/.cabal
2013-08-31 13:49:37	hpc	which is usually /root
2013-08-31 13:49:52	kaw	Ooh, true. I'll try to delete those
2013-08-31 13:50:17	hpc	however, if you are installing conflicting things as root locally, then running things as a normal user
2013-08-31 13:50:20	hpc	those shouldn't interact
2013-08-31 13:50:31	hari_	is it permitted to ask how you folks first got into Haskell and how you became proficient with it?
2013-08-31 13:50:33	hiptobecubic	kaw, also i can't recommend running cabal (or anything else)  as root if you have no idea what it does :)
2013-08-31 13:50:42	-->	bmm_ (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:50:44	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Client Quit)
2013-08-31 13:50:53	hari_	And what motivated you to learn?
2013-08-31 13:50:59	kaw	Heh, I know, I know. I've been flailing a bit with this packageing stuff, honestly
2013-08-31 13:51:03	kaw	packaging*
2013-08-31 13:51:21	hpc	hari_: i saw someone write an entire webserver in 60 lines with no depends but TCP
2013-08-31 13:51:27	hpc	hari_: and then thought "i must learn this"
2013-08-31 13:51:44	hari_	hpc, wow, webserver in 60 lines of code... amazing
2013-08-31 13:52:10	hpc	i have since written mostly just ridiculous code
2013-08-31 13:52:19	hpc	acme-packages and stuff
2013-08-31 13:52:28	hiptobecubic	hari_, chasing wikipedia links starting at set theory. "Proficient" is too strong a word.
2013-08-31 13:52:37	<--	soulofpeace (~soulofpea@175.156.232.233) has quit (Ping timeout: 248 seconds)
2013-08-31 13:52:47	donri	or you can write a web server in a few hundred lines of code with some dependencies and serve some 450 000 requests per second with ghc HEAD ;)
2013-08-31 13:52:57	hari_	hiptobecubic, I find it so interesting to know how people discover things to learn
2013-08-31 13:53:00	kaw	Hm, no, it looks like nothing has been installed to /root
2013-08-31 13:53:39	<--	poppingtonic (~poppingto@212.49.88.103) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-31 13:53:40	kaw	Using -v it seems clear that when I sudo cabal it installs to my own home directory, possibly with the wrong permissions, I don't know
2013-08-31 13:53:47	<--	sclv_ (c62d1326@gateway/web/freenode/ip.198.45.19.38) has quit (Ping timeout: 250 seconds)
2013-08-31 13:54:05	newbie2	Couldn't match type `Integer' with `GHC.Real.Ratio Integer'. How can i fix that?
2013-08-31 13:54:11	Eduard_Munteanu	hari_: funnily I've seen someone blogging about it, the first thought was "oh, another PHP/Ruby...". But a quick visit to Wikipedia proved that *very* wrong. :)
2013-08-31 13:54:17	hpc	newbie2: can you paste your code?
2013-08-31 13:54:19	hpc	@hpaste
2013-08-31 13:54:19	lambdabot	Haskell pastebin: http://lpaste.net/
2013-08-31 13:54:41	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 13:54:52	hpc	newbie2: without knowing anything at all about your code, it kind of looks like you are trying to use modulo?
2013-08-31 13:54:55	hari_	Eduard_Munteanu, I also read about functional programming and then was interested in Haskell.
2013-08-31 13:54:57	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 13:55:02	Eduard_Munteanu	Anyway I found purity and other things quite motivational just by being weird. :)
2013-08-31 13:55:08	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-08-31 13:55:16	hari_	Not sure why I chose Haskell, though. Maybe because it was deemed "tough" to learn and also because it has a nice name. :)
2013-08-31 13:55:23	newbie2	hpc: just changed all my Integer type to Rational
2013-08-31 13:55:35	-->	ashnur (~ashnur@79.117.78.0) has joined #haskell
2013-08-31 13:55:36	zomg	Best article on type families: "Type Families and Pokemon"
2013-08-31 13:55:44	zomg	That was some brilliant execution in that one.
2013-08-31 13:55:45	zomg	:D
2013-08-31 13:57:23	newbie2	http://lpaste.net/92365
2013-08-31 13:57:42	newbie2	and when i type 4, for example, it blames me
2013-08-31 13:58:19	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-08-31 13:58:20	donri	:t 4 :: Rational
2013-08-31 13:58:21	lambdabot	Rational
2013-08-31 13:58:58	hpc	what's the body of the function?
2013-08-31 13:59:24	hari_	In classifying programming languages, where exactly does "functional" fall into? Is it at a level higher than Object Oriented and procedural? I assume "imperative" is used as a generic term for OOP and procedural
2013-08-31 13:59:40	-->	kofno_ (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 14:00:21	hpc	hari_: they're different styles, not really levels
2013-08-31 14:00:37	donri	hari_: http://www.info.ucl.ac.be/~pvr/paradigms.html :p
2013-08-31 14:00:47	zomg	the level of abstraction would probably depend on the libraries being used
2013-08-31 14:00:58	hpc	so to take an extreme example, assembly language
2013-08-31 14:01:01	<--	zbcm (~zbcm@58.169.107.43) has quit (Ping timeout: 268 seconds)
2013-08-31 14:01:03	hpc	is very low-level and procedural
2013-08-31 14:01:08	zomg	though maybe FP languages inherently have a higher level abstraction
2013-08-31 14:01:10	hpc	but not all procedural languages are low-level
2013-08-31 14:01:21	<--	nilsi (~nilsi@183.245.65.242) has quit (Read error: Connection reset by peer)
2013-08-31 14:01:25	hpc	and the reduceron is a theoretical cpu with a functional assembly language
2013-08-31 14:01:42	hari_	I forgot about "Declarative" paradigm :)
2013-08-31 14:01:49	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 14:01:51	hari_	Yes, I find that chart very interesitng.
2013-08-31 14:02:24	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 14:02:40	hari_	donri, Must take the time to digest that!
2013-08-31 14:03:04	-->	cads (~m@adsl-208-61-1-166.asm.bellsouth.net) has joined #haskell
2013-08-31 14:03:27	donri	hm there should be a version for type systems too somewhere...
2013-08-31 14:04:23	newbie2	:t 4
2013-08-31 14:04:23	lambdabot	Num a => a
2013-08-31 14:05:26	hari_	:t 4.0
2013-08-31 14:05:27	lambdabot	Fractional a => a
2013-08-31 14:05:29	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 14:05:52	hari_	:t (4/3)
2013-08-31 14:05:52	lambdabot	Fractional a => a
2013-08-31 14:06:09	ski_	"Declarative" is often construed to include both "Functional" and "Logic"
2013-08-31 14:06:38	Eduard_Munteanu	I wonder if SQL fits in any of those two.
2013-08-31 14:07:00	hari_	I wonder why C++ isn't on that chart.
2013-08-31 14:07:02	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 14:07:11	donri	hari_: http://james-iry.blogspot.com/2010/05/types-la-chart.html
2013-08-31 14:07:11	hpc	C++ /is/ the chart
2013-08-31 14:07:22	companion_cube	SQL is some bastard logic programming
2013-08-31 14:07:47	aristid	companion_cube: no, it's bastard relational algebra:)
2013-08-31 14:07:56	companion_cube	which is a subset of logic ;)
2013-08-31 14:08:02	Eduard_Munteanu	C++ is a weird language.
2013-08-31 14:08:04	companion_cube	it's basically non recursive datalog
2013-08-31 14:08:23	Ghoul_	oooh pred/succ simulates n+k patterns
2013-08-31 14:08:25	Ghoul_	tats cool
2013-08-31 14:08:26	aristid	companion_cube: i believe relational algebra can do some things that datalog can't, but i might be mistaken
2013-08-31 14:08:43	Ghoul_	w/ ViewPatterns, sorry, should have mentioned that
2013-08-31 14:08:44	ski_	Eduard_Munteanu : SQL is sortof a logic/relational programming language
2013-08-31 14:08:45	companion_cube	right, maybe you need to add aggregates
2013-08-31 14:09:39	-->	GaXo (~other@94.25.229.71) has joined #haskell
2013-08-31 14:09:57	aristid	companion_cube: aggregates are not a primitive operation in relational algebra:)
2013-08-31 14:10:11	-->	fredmorcos (~fredmorco@46.218.17.109.rev.sfr.net) has joined #haskell
2013-08-31 14:10:13	-->	chatsiri_ (~chatsiri_@kuwinwpa-139-51.kuwin.ku.ac.th) has joined #haskell
2013-08-31 14:10:15	GaXo	Hello, i'm trying to use Data.Graph and i wonder is there some visualisation tool for Graph ADT?
2013-08-31 14:10:19	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-08-31 14:10:21	companion_cube	but you cannot encode them, right?
2013-08-31 14:10:35	companion_cube	you need to add them as a primitive to get some features of SQL
2013-08-31 14:10:40	hari_	I had a nephew drop in and ask for help with C++ and I was stumped. The worst part is that, in our schools, they still use Borland Turbo C++ on DOS.
2013-08-31 14:10:46	companion_cube	apart from that, pure relational algebra should be less powerful than datalog
2013-08-31 14:10:55	hpc	wow, borland
2013-08-31 14:10:55	ski_	SQL,Datalog and other deductive database languages are based on a bottom-up sets-at-a-time interpretation of relational/logic programming, rather than the top-down tuple-at-a-time interpretation employed in languages like Prolog,Mercury,Oz,Goedel,Curry,Escher
2013-08-31 14:10:55	aristid	companion_cube: yeah but i was comparing relational algebra and datalog, not SQL and datalog
2013-08-31 14:10:59	tomejaguar	Here is a cool category theory approach to relational algebra: http://arxiv.org/pdf/1305.0297v1
2013-08-31 14:11:15	GaXo	By visualisation i mean (Graph -> IO ()) and within that IO i want either save pictuare of nodes in graph or display it.
2013-08-31 14:11:30	companion_cube	ski_: Datalog doesn't presuppose a top down or bottom up approach
2013-08-31 14:11:32	companion_cube	both are valid
2013-08-31 14:11:33	hpc	tomejaguar: can't tell if snarxiv... :P
2013-08-31 14:11:52	companion_cube	aristid: so I think datalog encompasses relational algebra
2013-08-31 14:12:19	-->	latermuse (~ron@112.201.131.21) has joined #haskell
2013-08-31 14:12:44	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-08-31 14:12:45	tomejaguar	hpc: why, does it sound weird?
2013-08-31 14:12:46	ski_	companion_cube : ok, but i was under the impression that bottom-up was the main intended approach
2013-08-31 14:13:02	Eduard_Munteanu	hari_: same thing here usually... at least when I was in highschool
2013-08-31 14:13:16	--	k00mi_ is now known as k00mi
2013-08-31 14:13:16	aristid	companion_cube: hmm maybe
2013-08-31 14:13:22	ski_	(i know that it is possible to mix the two in the same system)
2013-08-31 14:13:22	hpc	tomejaguar: mostly "operad"
2013-08-31 14:13:37	aristid	companion_cube: and if you then extend datalog with aggregates, you can do everything that SQL can? MWAHAHAHA
2013-08-31 14:13:44	tomejaguar	An operad is a perfectly cromulent category theory gadget
2013-08-31 14:13:51	companion_cube	ski_: not always, for instance, datalog with negation is usually done with top-down
2013-08-31 14:13:57	companion_cube	(I think)
2013-08-31 14:14:12	companion_cube	top-down with tabbling, that is
2013-08-31 14:14:13	 *	Eduard_Munteanu hands out passes to ##categorytheory for everybody :D
2013-08-31 14:14:19	--	kofno_ is now known as kofno
2013-08-31 14:14:21	aristid	companion_cube: i guess a problem is that there isn't ONE datalog, eh?
2013-08-31 14:14:23	companion_cube	aristid: I don't know, there are also subqueries ^^
2013-08-31 14:14:25	aristid	datalog without negation
2013-08-31 14:14:29	hari_	Eduard_Munteanu, haha, they refuse to even use python in our schools for teaching
2013-08-31 14:14:30	<--	vijaykiran (~user@80.113.145.6) has quit (Ping timeout: 264 seconds)
2013-08-31 14:14:42	companion_cube	aristid: well, datalog is a logic language, so you can have several approaches
2013-08-31 14:14:48	fredmorcos	I have a couple of statements I made up after going through Monads in LYAH. I'd like to make sure they're somewhat correct. Is it okay to just toss them here?
2013-08-31 14:14:49	aristid	companion_cube: how are subqueries not possible in relational algebra? (which you said is a subset of what datalog can do)
2013-08-31 14:14:50	Eduard_Munteanu	Not that you need one, but it earns you a free Yoneda shake. :P
2013-08-31 14:15:07	aristid	companion_cube: datalog without negation isn't just a different approach, it's strictly less powerful
2013-08-31 14:15:14	GaXo	Trying Data.GraphViz with Data.Graph but i'm getting: No instance for (Data.Graph.Inductive.Graph.Graph GHC.Arr.Array) for (graphToDot nonClusteredParams g) where g is Graph. Can you help me?
2013-08-31 14:15:23	companion_cube	aristid: I'm just not sure it can be reduced cleanly to something without subqueries
2013-08-31 14:15:28	ski_	companion_cube : hm, i thought one required stratification, and then interpreted `p,not q' by set difference ?
2013-08-31 14:15:29	companion_cube	aristid: but how? What is less powerful?
2013-08-31 14:15:39	aristid	companion_cube: datalog without negation.
2013-08-31 14:15:44	Ghoul_	I found this benchmark on gist. It benchmarks CPS, ConstT and regular construction of a tree. CPS/ConstT are about 3 magnitudes faster than the regular construction and I can't figure out why http://lpaste.net/92366
2013-08-31 14:15:47	hiptobecubic	ineda shake too
2013-08-31 14:15:53	companion_cube	aristid: oh, like differences? right
2013-08-31 14:15:55	mjboa	hey can anyone enlighten me? What does fix from Data.Function do? Specifically, I'm trying to understand the defition of Iteratee in Data.Enumerator
2013-08-31 14:16:03	Eduard_Munteanu	hari_: yes, I think it's definitely not the best language to teach first. Especially since they never intend to teach any low-level or hw-specific stuff.
2013-08-31 14:16:08	companion_cube	but datalog with negation doesn't necessarily require stratification
2013-08-31 14:16:14	companion_cube	just the existence of stable models
2013-08-31 14:16:19	mjboa	also confusing me is the use of ($ m0) in the definition for bind for Iteratee
2013-08-31 14:16:26	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 14:16:29	Eduard_Munteanu	mjboa: link?
2013-08-31 14:16:36	mjboa	http://hackage.haskell.org/packages/archive/enumerator/0.4.19/doc/html/src/Data-Enumerator-Internal.html
2013-08-31 14:16:45	aristid	companion_cube: yes... so that's where there are even different datalogs even if you have negation
2013-08-31 14:16:45	companion_cube	http://www.sciencedirect.com/science/article/pii/0743106694000285  for instance
2013-08-31 14:16:50	hari_	Eduard_Munteanu, I agree. C++ put me off OOP for a long time
2013-08-31 14:17:00	hari_	Even now I am prejudiced against OOP
2013-08-31 14:17:24	mjboa	all in the definition of bind for Iteratee a m
2013-08-31 14:18:13	-->	nexx (nexx@dslb-188-108-102-080.pools.arcor-ip.net) has joined #haskell
2013-08-31 14:18:13	<--	nexx (nexx@dslb-188-108-102-080.pools.arcor-ip.net) has quit (Changing host)
2013-08-31 14:18:13	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-08-31 14:18:40	Eduard_Munteanu	mjboa: it's (fix $ do ...) then you apply m0 to that.
2013-08-31 14:18:41	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-08-31 14:18:48	Eduard_Munteanu	s/do//
2013-08-31 14:18:58	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 14:19:12	Eduard_Munteanu	mjboa: you do understand the ($ m0) section, right?
2013-08-31 14:19:18	mjboa	not really
2013-08-31 14:19:22	ski_	mjboa : `fix $ \bind m -> ..bind..m..' is the same as `let bind m = ..bind..m.. in bind'
2013-08-31 14:19:24	mjboa	i mean it's reversed somehow
2013-08-31 14:19:32	hpc	mjboa: you know what ($) is?
2013-08-31 14:19:34	-->	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has joined #haskell
2013-08-31 14:19:36	hpc	@src ($)
2013-08-31 14:19:36	lambdabot	f $ x = f x
2013-08-31 14:19:36	mjboa	yea
2013-08-31 14:19:42	hpc	so take (flip ($))
2013-08-31 14:19:47	Eduard_Munteanu	:t ($ ?x)
2013-08-31 14:19:48	lambdabot	(?x::a) => (a -> b) -> b
2013-08-31 14:19:50	hpc	which is (x # f = f x)
2013-08-31 14:19:54	hpc	and then partially apply it to x
2013-08-31 14:20:03	mjboa	ok got that
2013-08-31 14:20:13	Eduard_Munteanu	:t (+ 3)
2013-08-31 14:20:14	hpc	now you have something of type (a -> b) -> b
2013-08-31 14:20:14	lambdabot	Num a => a -> a
2013-08-31 14:20:24	Taneb	Huh
2013-08-31 14:20:29	ski_	mjboa : and `($ m0) fix $ \bind m -> ..bind..m..' is the same as `let bind m = ..bind..m.. in bind m0'
2013-08-31 14:20:29	hpc	which is a function that takes a function from (a -> b), then applies an a to it
2013-08-31 14:20:37	Taneb	Github + Literate haskell + CPP doesn't mix well
2013-08-31 14:20:38	hpc	specifically the one you partially applied
2013-08-31 14:20:49	hpc	@let foo = ($ 10)
2013-08-31 14:20:50	lambdabot	 Defined.
2013-08-31 14:20:59	hpc	> foo (+ 13)
2013-08-31 14:21:04	Eduard_Munteanu	They chose to do that because the right side of fix is taken up by the definition itself.
2013-08-31 14:21:05	lambdabot	  23
2013-08-31 14:21:09	ski_	(er s/fix/$ fix/ in what i last said)
2013-08-31 14:21:10	hpc	> foo (* 6)
2013-08-31 14:21:11	aegis__	hey! could someone explain me how this code actually works: http://lpaste.net/7073542533552275456 ? I have an intuition on how it works but I don't understand why it doesn't get stuck as fib needs fib to build one more element of the list why itself needs fib which..
2013-08-31 14:21:13	Taneb	It seems like it's interpreting #ifdef as a header
2013-08-31 14:21:14	lambdabot	  60
2013-08-31 14:21:38	hpc	aegis__: okay, so
2013-08-31 14:21:42	companion_cube	ski_: even with stratified negation, I think datalog is more powerful than relational algebra
2013-08-31 14:21:49	hpc	aegis__: we begin with fib = 1 : 1 : <thunk>
2013-08-31 14:21:52	companion_cube	(you can do set difference with negation)
2013-08-31 14:22:02	hpc	aegis__: we force the first two elements, and nothing really happens
2013-08-31 14:22:13	mjboa	so what does fix do?
2013-08-31 14:22:14	ski_	companion_cube : hm, did i imply otherwise ?
2013-08-31 14:22:17	companion_cube	no
2013-08-31 14:22:18	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-08-31 14:22:19	hpc	aegis__: now we force the next element, which is the head of (zip fib (tail fib))
2013-08-31 14:22:31	aegis__	hpc: so far so good, which is (1, 1)
2013-08-31 14:22:35	hpc	aegis__: so fib = 1 : 1 : <thunk> and tail fib = 1 : <thunk>
2013-08-31 14:22:42	Ghoul_	aegis__: theres a major win here with laziness
2013-08-31 14:22:52	hpc	aegis__: so we follow the definition of zip, which is to get (1, 1) yes
2013-08-31 14:22:54	mjboa	is it like a recursive let or something?
2013-08-31 14:22:55	Ghoul_	the first 2 elements are certain, and after that, they are only generated on-demand
2013-08-31 14:22:56	hpc	and add them to get two
2013-08-31 14:22:57	GaXo	Mayb i should not use Data.Graph.
2013-08-31 14:23:03	hpc	now fib = 1 : 1 : 2 : <thunk>
2013-08-31 14:23:09	GaXo	What do recomend me for graphs in haskell?
2013-08-31 14:23:10	companion_cube	ski_: but thanks, that made things clearer in my head about why negation is necessary
2013-08-31 14:23:19	<--	latermuse (~ron@112.201.131.21) has quit (Quit: pissed off)
2013-08-31 14:23:21	hpc	we force the next element of that thunk, which is 1 + 2
2013-08-31 14:23:28	-->	Wuzzy (~Wuzzy@p549FB8EB.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 14:23:30	hpc	because tail fib = 1 : 2 : <thunk>
2013-08-31 14:23:35	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-08-31 14:23:52	hpc	there should really be an animation for this
2013-08-31 14:24:01	Eduard_Munteanu	mjboa: it lets one write recursive definitions without explicit recursion. E.g. fix $ \f -> ... f something  gives you something like   foo = ... foo something
2013-08-31 14:24:08	Eduard_Munteanu	:t fix
2013-08-31 14:24:09	lambdabot	(a -> a) -> a
2013-08-31 14:24:25	<--	cronject (~cronject@46.7.62.22) has quit (Read error: Connection reset by peer)
2013-08-31 14:24:29	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Ping timeout: 240 seconds)
2013-08-31 14:24:51	aegis__	hpc: that's the part I am confused about; how did 2 get pushed to the result of fib? I mean, we are building a sequence in the first call to fib but the call to fib in the list comprehension is "another call", building another sequence, no? (I migh tbe unclear here --')
2013-08-31 14:24:51	Eduard_Munteanu	> fix (1:)
2013-08-31 14:24:52	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-08-31 14:25:04	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-08-31 14:25:31	ski_	companion_cube : is necessary for what ?
2013-08-31 14:25:36	Eduard_Munteanu	fix (1:) = fix (\recurse -> 1:recurse)
2013-08-31 14:25:41	<--	Beetny (~Beetny@ppp118-208-31-97.lns20.bne1.internode.on.net) has quit (Ping timeout: 268 seconds)
2013-08-31 14:25:41	Eduard_Munteanu	@src fix
2013-08-31 14:25:41	lambdabot	fix f = let x = f x in x
2013-08-31 14:26:16	int-e	Ghoul_: This is analogous to constructing lists: The 'Tree' version is akin to constructing a list of length n by appending n singleton lists; the CPS version is analogous to using a difference list.
2013-08-31 14:26:16	Eduard_Munteanu	That's a little complicated though.
2013-08-31 14:26:20	ski_	hpc : please, fibonacci begins with `0' :)
2013-08-31 14:26:20	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 14:26:24	companion_cube	ski_: I mean, datalog without negation isn't powerful enough, if it cannot simulate relational algebra
2013-08-31 14:26:27	Eduard_Munteanu	fix f = f (fix f)   is easier to comprehend.
2013-08-31 14:26:36	ski_	ok
2013-08-31 14:26:45	-->	ecr (~Thunderbi@205.175.97.165) has joined #haskell
2013-08-31 14:27:04	<--	ecr (~Thunderbi@205.175.97.165) has quit (Client Quit)
2013-08-31 14:27:07	ski_	  fix f = x where x = f x  -- is the version i prefer to read
2013-08-31 14:27:13	mjboa	alright i think im slowly comprehending it, thanks
2013-08-31 14:27:23	ski_	> fix (0 :)
2013-08-31 14:27:24	lambdabot	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
2013-08-31 14:27:27	<--	GaXo (~other@94.25.229.71) has quit (Quit: leaving)
2013-08-31 14:27:46	int-e	Ghoul_: in particular, fullTree n will create n root nodes (and later traverse them), while the CPS version constructs only one.
2013-08-31 14:27:49	hpc	aegis__: getting into implementation details would be that fib is modified in place
2013-08-31 14:28:07	ski_	> (`fix` 12) $ \fib n -> case n of 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2)
2013-08-31 14:28:08	lambdabot	  144
2013-08-31 14:28:17	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-08-31 14:28:21	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-08-31 14:28:27	hpc	aegis__: every instance of "fib" in the definition is shared, so evaluating part of one leaves it evaluated for all of them
2013-08-31 14:28:29	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-08-31 14:28:39	Kaini	Why is there no zipWithM_ with the function as last parameter?
2013-08-31 14:28:39	hpc	but even without the sharing you would just have a really slow fib
2013-08-31 14:28:44	int-e	Ghoul_: I guess the comment in the beginning says that fullTree n is O(n^2) and the other two versions are O(n). That's precisely what happens.
2013-08-31 14:28:54	Eduard_Munteanu	> ($ 12) $ fix $ \fib n -> case n of 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2)
2013-08-31 14:28:55	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 14:28:55	lambdabot	  144
2013-08-31 14:28:59	aegis__	hpc: ok, so there is really only one instance of the result of fib
2013-08-31 14:29:04	hpc	yeah
2013-08-31 14:29:25	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-31 14:29:28	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Remote host closed the connection)
2013-08-31 14:29:40	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 14:29:41	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-08-31 14:29:42	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-08-31 14:29:53	aegis__	hpc: is there a name for this "property" ? I mean, if I want to check how another language treats this kind of sitution
2013-08-31 14:29:54	Eduard_Munteanu	Kaini: that'd be nice, yeah... like forM is for mapM.
2013-08-31 14:30:25	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-08-31 14:30:27	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 14:30:30	hpc	aegis__: "sharing" is what you probably want
2013-08-31 14:31:04	Eduard_Munteanu	aegis__: also "memoization"
2013-08-31 14:31:18	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 14:31:31	aegis__	hpc: ok, thanks a lot for your explanations, it's much clearer now :-)
2013-08-31 14:32:03	hpc	aegis__: sharing isn't really important to the definition, btw
2013-08-31 14:32:03	Eduard_Munteanu	aegis__: though it's specific to non-strict languages, otherwise the order of evaluation is already fixed.
2013-08-31 14:32:11	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-08-31 14:32:15	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 14:32:20	mjboa	let f x = x + 1
2013-08-31 14:32:22	hpc	all it does is make it faster
2013-08-31 14:32:30	mjboa	how can I understand the type ($ f)
2013-08-31 14:32:33	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 14:32:57	Eduard_Munteanu	mjboa: ($ f) means "apply f to something (as an argument)"
2013-08-31 14:33:24	hpc	mjboa: to expand it out completely, ($ f) g = g (\x -> x + 1)
2013-08-31 14:33:42	aegis__	Eduard_Munteanu: makes sense
2013-08-31 14:34:09	bmm_	I'm getting a space overflow I don't understand. http://lpaste.net/92367 Should I create an issue for the murmur-hash library?
2013-08-31 14:34:09	mjboa	so it's (flip $) f?
2013-08-31 14:34:16	hpc	yes
2013-08-31 14:34:24	Eduard_Munteanu	(flip ($)) f
2013-08-31 14:34:42	hpc	all sections work that way
2013-08-31 14:34:48	hpc	(+ 5) = flip (+) 5
2013-08-31 14:35:03	mjboa	Eduard_Munteanu: that's where i was stuck, didn't put the parenthesis around the $
2013-08-31 14:35:06	mjboa	thanks
2013-08-31 14:35:08	hpc	(- 5) = negative 5 -- minus is kind of a silly one
2013-08-31 14:35:15	-->	_d3f (~gnu@ip-static-94-242-252-66.as5577.net) has joined #haskell
2013-08-31 14:35:23	Eduard_Munteanu	:t (flip $) ?f
2013-08-31 14:35:23	lambdabot	(?f::a -> b -> c) => b -> a -> c
2013-08-31 14:35:28	Eduard_Munteanu	:t (flip ($)) ?f
2013-08-31 14:35:29	lambdabot	(?f::b) => (b -> c) -> c
2013-08-31 14:35:34	aegis__	hpc: erm it might not be that part I was confused about then; what I mean is that when you have fib = 1 : 1 : 2 : [a+b, (a, b) <- zip fib (tail fib)], how does the list comprehension draws (1,2) out of it? how does it get access to this 2 we just pushed? if there is only one instance of the result of fib it makes sense but then it's not only a matter of speed; the function wouldn't work without it
2013-08-31 14:35:44	ski_	aegis__ : also, "memoization/tabling of functions" is a different thing
2013-08-31 14:36:01	Eduard_Munteanu	(flip $) f = flip $ f = flip f
2013-08-31 14:36:17	<--	nilsi (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-08-31 14:36:26	-->	tommi (~tommi@dynamic-adsl-78-13-79-92.clienti.tiscali.it) has joined #haskell
2013-08-31 14:36:30	mjboa	Eduard_Munteanu: is the ? there something for lambdabot? never seen that syntax before
2013-08-31 14:36:33	--	cynick_ is now known as cynick
2013-08-31 14:36:34	tommi	!list
2013-08-31 14:36:35	monochrom	tommi: http://lpaste.net
2013-08-31 14:36:49	-->	nilsi (~nilsi@46.165.220.223) has joined #haskell
2013-08-31 14:36:56	Eduard_Munteanu	mjboa: it's for implicit parameters, I'm misusing it to introduce and ask for f's type.
2013-08-31 14:36:57	-->	shesek (~shesek@IGLD-84-228-157-55.inter.net.il) has joined #haskell
2013-08-31 14:37:07	<--	bmm_ (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Quit: Ex-Chat)
2013-08-31 14:37:17	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 14:37:21	<--	tommi (~tommi@dynamic-adsl-78-13-79-92.clienti.tiscali.it) has left #haskell
2013-08-31 14:37:35	Eduard_Munteanu	mjboa: so it's not a lambdabot thing, it's a GHC Haskell thing
2013-08-31 14:37:40	-->	Sculptor (~Sculptor@89.110.199.224) has joined #haskell
2013-08-31 14:37:58	<--	noam (~noam@213.57.201.130) has quit (Read error: Connection reset by peer)
2013-08-31 14:38:06	ski_	aegis__ `fib = 1 : 1 : 2 : [a+b, (a, b) <- zip fib (tail fib)]' is equivalent to `fib = 1 : fib2; fib2 = 1 : fib3; fib3 = 2 : fib4; fib4 = [a+b, (a, b) <- zip fib (tail fib)]'
2013-08-31 14:38:11	aegis__	mjboa: 7.8.3 http://www.haskell.org/ghc/docs/6.12.1/html/users_guide/other-type-extensions.html
2013-08-31 14:38:11	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-08-31 14:39:17	aegis__	ski_: light bulb, thanks !
2013-08-31 14:39:22	ski_	aegis__ : then `fib4 = [a+b | (a, b) <- zip fib (tail fib)]', in the presence of the other definitions are equivalent to `fib4 = [a+b | (a, b) <- zip (1:1:2:fib4) (tail (1:1:2:fib4))]'
2013-08-31 14:39:32	ski_	which is equivalent to `fib4 = [a+b | (a, b) <-'
2013-08-31 14:39:34	ski_	er
2013-08-31 14:39:42	ski_	`fib4 = [a+b | (a, b) <-'
2013-08-31 14:39:46	 *	ski_ sighs
2013-08-31 14:39:53	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 14:40:29	ski_	which is equivalent to `fib4 = [a+b | (a,b) <- zip (1:1:2:fib4) (1:2:fib4)]'
2013-08-31 14:40:46	<--	fredmorcos (~fredmorco@46.218.17.109.rev.sfr.net) has quit (Quit: Leaving)
2013-08-31 14:40:59	ski_	which is equivalent to `fib4 = (1 + 1) : (1 + 2) : [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:09	ski_	which is equivalent to `fib4 = 2 : 3 : [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:19	aegis__	ski_: you can stop there, the expansion made it clear :p thanks
2013-08-31 14:41:28	ski_	which is equivalent to `fib4 = 2 : fib5; fib5 = 3 : fib6; fib6 = [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:31	ski_	&c.
2013-08-31 14:41:48	<--	kitallis (~kitallis@122.166.176.62) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 14:41:50	donri	fibs = 0 : 1 : (zipWith (+) <*> tail) fibs
2013-08-31 14:42:58	ski_	aegis__ : it would be enough here to provide the first two values initially (outside the list comprehension) -- noting that one usually starts with `0',`1' rather than `1',`1', that'd be `fibs = 0 : 1 : zipWith (+) fibs (tail fibs)'
2013-08-31 14:43:05	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 14:43:54	arkeet	if you provide more than two, it's wrong.
2013-08-31 14:43:57	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-08-31 14:43:58	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 14:44:00	mjboa	I want to practice more with haskell but I find myself starved of ideas or worthwhile projects. What can I write that will lead me to a deeper understanding of haskell and possibly also creating something useful along the way?
2013-08-31 14:44:05	donri	@quote aztec
2013-08-31 14:44:05	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-08-31 14:44:06	arkeet	> fix $ \fibs -> 1:1:2:zipWith (+) fibs (tail fibs)
2013-08-31 14:44:07	lambdabot	  [1,1,2,2,3,4,5,7,9,12,16,21,28,37,49,65,86,114,151,200,265,351,465,616,816,...
2013-08-31 14:44:07	-->	CaptainK (~CaptainK@181.178.232.51) has joined #haskell
2013-08-31 14:44:09	ski_	aegis__ : so, due to "memoization of values", we so to speak get "internal names" generated for each list node, and so the whole generation "chases its own tail"
2013-08-31 14:44:11	arkeet	not very fibby.
2013-08-31 14:44:26	<--	Lethalman (~lethal@ppp-249-30.28-151.libero.it) has quit (Ping timeout: 256 seconds)
2013-08-31 14:44:37	deech	Does c2hs allow me to write custom functions to process enumerations?
2013-08-31 14:44:45	Ghoul_	int-e: thanks I /think/ I have some understanding now
2013-08-31 14:45:03	mjboa	How do i get to that point to where I can contribute to GHC for example? It seems like there's an enormous gap between reading Learn you a haskell/real world haskell and contributing to GHC or writing a useful library
2013-08-31 14:45:09	arkeet	> fix $ \fibs -> 1:1:1:1:1:zipWith (+) fibs (tail fibs)
2013-08-31 14:45:11	lambdabot	  [1,1,1,1,1,2,2,2,2,3,4,4,4,5,7,8,8,9,12,15,16,17,21,27,31,33,38,48,58,64,71...
2013-08-31 14:45:35	ski_	aegis__ : and what arkeet says
2013-08-31 14:45:55	<--	Bluuu (~a@unaffiliated/bluuu) has quit (Ping timeout: 256 seconds)
2013-08-31 14:46:00	arkeet	but yes, starting with 0,1 is good.
2013-08-31 14:46:15	<--	yopikh (~mand@79.175.167.200) has quit (Remote host closed the connection)
2013-08-31 14:46:26	arkeet	F_0 = 0, etc.
2013-08-31 14:46:48	zomg	mjboa: what do you code in other languages than haskell?
2013-08-31 14:47:04	ion	I thought everyone knows the Fibonacci sequence begins with -144, 89.
2013-08-31 14:47:05	arkeet	@localtime
2013-08-31 14:47:05	lambdabot	Local time for arkeet is 土 8月 31 05:46:03 2013
2013-08-31 14:47:07	arkeet	oops.
2013-08-31 14:47:31	mjboa	python
2013-08-31 14:47:38	arkeet	what do you do in python?
2013-08-31 14:47:47	mjboa	not much honestly
2013-08-31 14:47:51	mjboa	mostly mess around
2013-08-31 14:48:03	zomg	what was the reason you learned haskell (or the reason you learned python for that matter)
2013-08-31 14:48:21	mjboa	python initially because of django
2013-08-31 14:48:24	donri	> fix ((0:1:).(zipWith(+)`ap`tail))
2013-08-31 14:48:25	lambdabot	  The operator `:' [infixr 5] of a section
2013-08-31 14:48:25	lambdabot	     must have lower precedence th...
2013-08-31 14:48:36	-->	GaXo (~other@94.25.229.71) has joined #haskell
2013-08-31 14:48:36	donri	> fix ((0:).(1:).(zipWith(+)`ap`tail))
2013-08-31 14:48:38	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:48:42	GaXo	Hello?
2013-08-31 14:48:52	zomg	mjboa: well, you could do web apps with haskell then. A variety of nice libs are available for that
2013-08-31 14:49:10	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 245 seconds)
2013-08-31 14:49:12	mjboa	im a second year comp sci student now, had haskell in a programming course. found it fascinating
2013-08-31 14:49:16	arkeet	donri: why not <*> instead of `ap`
2013-08-31 14:49:29	donri	arkeet: because aztec :(
2013-08-31 14:49:30	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 240 seconds)
2013-08-31 14:49:32	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Ping timeout: 256 seconds)
2013-08-31 14:49:37	Eduard_Munteanu	How do you invert Parsec parsers? I'm having difficulty seeing how you take care not to overlap parsers.
2013-08-31 14:49:37	arkeet	but one character
2013-08-31 14:49:38	donri	but With destroys it
2013-08-31 14:49:39	GaXo	I want to represent my datastructure as graph and then visualize it. What library do you guys recommend?
2013-08-31 14:49:44	mjboa	been tying to understand category theory, type inference etc ever since
2013-08-31 14:49:47	arkeet	@quote zip`ap`tail
2013-08-31 14:49:47	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-08-31 14:50:04	mjboa	i find it much more compelling than python
2013-08-31 14:50:09	zomg	mjboa: yeah that's the reason I'm using haskell as well, it's more interesting than the other languages I know
2013-08-31 14:50:20	Eduard_Munteanu	GaXo: diagrams?
2013-08-31 14:50:23	donri	> fix((0:).(1:).(zipWith(+)<*>tail))
2013-08-31 14:50:24	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:50:25	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 14:50:28	Eduard_Munteanu	GaXo: I mean the 'diagrams' package.
2013-08-31 14:50:31	Eduard_Munteanu	@hackage diagrams
2013-08-31 14:50:31	lambdabot	http://hackage.haskell.org/package/diagrams
2013-08-31 14:50:35	donri	> fix((0:).(1:).zipWith(+)<*>tail)
2013-08-31 14:50:36	lambdabot	  Couldn't match type `[c0] -> [c0]' with `[a0]'
2013-08-31 14:50:36	lambdabot	 Expected type: [c0] -> [a0]...
2013-08-31 14:50:42	zomg	mjboa: when I was starting haskell I really just took whatever ideas I wanted to code and instead of using whatever else I knew I just tried doing it in haskell =)
2013-08-31 14:50:44	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-08-31 14:51:01	nooodl	> fix$(0:).(1:).(zipWith(+)<*>tail)
2013-08-31 14:51:02	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:51:16	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 245 seconds)
2013-08-31 14:51:35	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-31 14:51:48	mjboa	like what? all the random stuff i think of seems to have been done already and 100 times better at that and then i get the feeling im wasting my time
2013-08-31 14:52:21	GaXo	Eduard_Munteanu: Uh, sorry, visualising isn't purpose but a nice to have thing. Main aspects of desired graph library should be performance and it should be possible to store something in vertices.
2013-08-31 14:52:26	-->	hualet_deepin (~user@183.94.4.120) has joined #haskell
2013-08-31 14:52:31	ski_	> fix ((0 :) . scanl (+) 1)
2013-08-31 14:52:32	Eduard_Munteanu	Oh.
2013-08-31 14:52:35	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:52:53	zomg	mjboa: well it's hard to say what would be compelling for you, but I'd imagine there's some reason why you're studying compsci and languages
2013-08-31 14:52:56	<--	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 245 seconds)
2013-08-31 14:53:03	GaXo	Data.Graph from containers is fine but lacking ease of visalisation and graph ops.
2013-08-31 14:53:16	<--	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-08-31 14:53:18	zomg	mjboa: I'd honestly just do whatever seems to be fun and interesting and not worry about if it has been done before or not. You'll learn something along the way for sure
2013-08-31 14:53:39	-->	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-08-31 14:53:41	mjboa	true
2013-08-31 14:54:40	GaXo	It's truly great to make graph easy as graphFromEdges' [(tile :: myCustomADT, 1 :: Int, [1])]. And FGL seems to be dead long ago...
2013-08-31 14:55:02	GaXo	Any FGL gurus around?
2013-08-31 14:55:10	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Remote host closed the connection)
2013-08-31 14:55:22	GaXo	What these labels(LNode, LVertex) are about?
2013-08-31 14:55:36	GaXo	Does main purose of labels is to store custom info?
2013-08-31 14:55:43	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 14:55:54	Ghoul_	int-e: so, could I say simply, that the tree is "double lazy" ?
2013-08-31 14:56:35	-->	Lethalman (~lethal@ppp-117-6.28-151.libero.it) has joined #haskell
2013-08-31 14:56:38	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 14:57:10	-->	alem0lars (~alem0lars@87.19.244.180) has joined #haskell
2013-08-31 14:57:11	ski_	preflex: xseen ddarius
2013-08-31 14:57:13	preflex	 ddarius was last seen on freenode/#haskell 364 days, 3 hours, 54 minutes and 10 seconds ago, saying: > let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 "hello, world"
2013-08-31 14:57:17	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 14:57:21	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-08-31 14:57:21	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-08-31 14:57:37	arkeet	> let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 "hello, world"
2013-08-31 14:57:38	lambdabot	  "hell, wold"
2013-08-31 14:57:49	arkeet	> let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 [0..]
2013-08-31 14:57:50	lambdabot	  [0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,20,21,22,23,25,26,27,28,30,31,32,3...
2013-08-31 14:57:58	arkeet	ah.
2013-08-31 14:58:49	GaXo	Well, FGL seems to be very odd library.
2013-08-31 14:59:01	GaXo	Why on earth i'm forced to label edges?
2013-08-31 14:59:25	<--	nilsi (~nilsi@46.165.220.223) has quit (Remote host closed the connection)
2013-08-31 14:59:36	int-e	Ghoul_: maybe, you'd have to explain what you mean by that.
2013-08-31 15:00:01	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Ping timeout: 245 seconds)
2013-08-31 15:00:50	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (Quit: Moving server)
2013-08-31 15:00:52	<--	rckrd (~root@c-03cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 256 seconds)
2013-08-31 15:00:58	-->	glosoli (~glosoli@78-56-153-115.static.zebra.lt) has joined #haskell
2013-08-31 15:01:04	<--	glosoli (~glosoli@78-56-153-115.static.zebra.lt) has quit (Changing host)
2013-08-31 15:01:04	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-08-31 15:01:26	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 256 seconds)
2013-08-31 15:01:34	Ghoul_	sorry I think I understood it wrong
2013-08-31 15:01:41	-->	nilsi_ (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 15:01:53	Ghoul_	im having a hard time understanding how they behave differently because they look like they should produce the same structure
2013-08-31 15:02:44	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-08-31 15:03:46	<--	hualet_deepin (~user@183.94.4.120) has quit (Read error: Connection reset by peer)
2013-08-31 15:04:06	<--	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-08-31 15:04:39	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 260 seconds)
2013-08-31 15:04:52	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Quit: Ex-Chat)
2013-08-31 15:05:01	-->	stulli (~stulli@e180007005.adsl.alicedsl.de) has joined #haskell
2013-08-31 15:05:04	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 15:05:04	<--	GaXo (~other@94.25.229.71) has quit (Quit: leaving)
2013-08-31 15:06:12	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 15:06:15	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2013-08-31 15:06:21	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-08-31 15:06:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-08-31 15:06:54	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-08-31 15:07:16	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-08-31 15:07:16	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:07:30	<--	Lethalman (~lethal@ppp-117-6.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-08-31 15:08:31	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:09:35	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 15:10:43	<--	RThinker (~yegor@176.102.17.117) has quit (Ping timeout: 260 seconds)
2013-08-31 15:11:51	-->	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has joined #haskell
2013-08-31 15:13:52	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 15:14:08	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-08-31 15:14:24	<--	chatsiri_ (~chatsiri_@kuwinwpa-139-51.kuwin.ku.ac.th) has quit (Ping timeout: 268 seconds)
2013-08-31 15:14:25	-->	pgiarrusso (~pgiarruss@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 15:15:25	<--	CaptainK (~CaptainK@181.178.232.51) has quit (Read error: Connection reset by peer)
2013-08-31 15:15:36	-->	CaptainK (~CaptainK@181.178.232.51) has joined #haskell
2013-08-31 15:15:36	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:15:45	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:16:02	Eduard_Munteanu	Hm, I think I figured it out: isNot = manyTill anyToken . try . (eof <|>)
2013-08-31 15:16:33	-->	mena (~mena@asgard.tauri.hu) has joined #haskell
2013-08-31 15:16:36	-->	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 15:16:39	<--	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-08-31 15:16:54	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:17:03	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:17:03	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:17:09	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 15:17:33	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:17:59	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-08-31 15:18:39	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Ping timeout: 260 seconds)
2013-08-31 15:18:43	Eduard_Munteanu	Then sepBy could be something nicer like  sepBy' sep = sepBy (isNot sep) sep
2013-08-31 15:18:52	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 15:19:37	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-08-31 15:19:37	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-08-31 15:19:43	Eduard_Munteanu	Needs a better name than isNot though.
2013-08-31 15:21:29	-->	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 15:21:32	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Client Quit)
2013-08-31 15:21:41	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 15:23:32	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 15:25:24	-->	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has joined #haskell
2013-08-31 15:25:32	 *	hackagebot final 0.1 - utility to add extra safety to monadic returns  http://hackage.haskell.org/package/final-0.1 (GergelyRisko)
2013-08-31 15:25:51	<--	edon (~user@albalug/edon) has quit (Ping timeout: 245 seconds)
2013-08-31 15:26:11	-->	RThinker (~yegor@176.102.5.205) has joined #haskell
2013-08-31 15:26:15	-->	migge (~marc@ip-130-180-117-113.unitymediagroup.de) has joined #haskell
2013-08-31 15:26:24	<--	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-08-31 15:26:29	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 15:27:19	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-08-31 15:27:30	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 15:29:31	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 15:29:38	<--	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Client Quit)
2013-08-31 15:30:37	-->	nik_89 (~nik_89@unaffiliated/nniro) has joined #haskell
2013-08-31 15:30:43	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-08-31 15:32:03	<--	migge (~marc@ip-130-180-117-113.unitymediagroup.de) has quit (Quit: Ex-Chat)
2013-08-31 15:33:23	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 15:33:49	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 15:33:53	turiya	hi
2013-08-31 15:34:47	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-08-31 15:34:53	hari_	I actually find the wikipedia page on monad to be a pretty sound explanation of the concept. Seems like I am beginning to get a feel for the idea
2013-08-31 15:35:07	turiya	i am trying to use Data.Graph.Inductive.Graph but dont understand how to create a graph. The Graph is a type class so the type of my Graph should be Graph Gr, however this gives me an error
2013-08-31 15:35:08	-->	make_sense (~make_sens@178.124.126.144) has joined #haskell
2013-08-31 15:35:42	turiya	Predicate `Graph Gr' used as a type
2013-08-31 15:35:48	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 15:35:53	-->	phst` (~user@ppp-46-244-219-155.dynamic.mnet-online.de) has joined #haskell
2013-08-31 15:37:43	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 15:39:08	-->	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has joined #haskell
2013-08-31 15:39:44	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 15:40:15	aegis__	turiya: you can't use a typeclass as a type constructor
2013-08-31 15:40:27	aegis__	:k Eq
2013-08-31 15:40:27	lambdabot	* -> Constraint
2013-08-31 15:40:50	aegis__	:k Maybe
2013-08-31 15:40:50	lambdabot	* -> *
2013-08-31 15:40:55	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-08-31 15:41:28	turiya	aegis__ : aha, thanks
2013-08-31 15:41:40	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 245 seconds)
2013-08-31 15:41:40	turiya	it worked now
2013-08-31 15:42:10	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-31 15:42:19	Vendethiel	Is there a way to get a function as value ? ala Function1
2013-08-31 15:42:24	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 15:43:09	-->	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has joined #haskell
2013-08-31 15:43:23	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 15:45:28	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 246 seconds)
2013-08-31 15:45:53	haasn	is there a good way to write :: Foldable f => f a -> Tree a -- such that the resulting tree is as balanced as possible, and preserves the fold order?
2013-08-31 15:46:19	-->	talzeus (~studybot_@ai126248154025.9.tss.access-internet.ne.jp) has joined #haskell
2013-08-31 15:46:49	haasn	or [a] -> Tree a, really
2013-08-31 15:46:59	donri	Vendethiel: a function is a value
2013-08-31 15:47:05	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 15:47:21	Vendethiel	donri: yeah but it automatically gets called, doesn't it ?
2013-08-31 15:47:27	donri	type Function a b = a -> b
2013-08-31 15:47:29	donri	Vendethiel: no
2013-08-31 15:47:46	Vendethiel	mmh ok
2013-08-31 15:47:48	Jaxan	Vendethiel: it can only be called if there are arguments to call it with
2013-08-31 15:47:51	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-08-31 15:48:03	donri	Vendethiel: only if you apply it to an argument and its evaluation is forced
2013-08-31 15:48:05	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-08-31 15:48:08	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-08-31 15:48:09	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-08-31 15:48:10	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 15:48:13	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 15:49:10	Jaxan	> length [\n -> n+1, \n -> n*2]
2013-08-31 15:49:11	lambdabot	  2
2013-08-31 15:49:38	-->	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has joined #haskell
2013-08-31 15:49:45	Jaxan	Vendethiel: in this example a list of functions is used, but the functions arent called
2013-08-31 15:50:57	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-08-31 15:51:03	-->	talzeus__ (~studybot_@u911106.xgsnuf71.imtp.tachikawa.mopera.net) has joined #haskell
2013-08-31 15:52:00	-->	petrus (~petrus@unaffiliated/petrus) has joined #haskell
2013-08-31 15:52:31	<--	SLi (sliedes@lakka.kapsi.fi) has quit (Remote host closed the connection)
2013-08-31 15:52:59	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 15:53:15	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 15:53:28	<--	talzeus (~studybot_@ai126248154025.9.tss.access-internet.ne.jp) has quit (Ping timeout: 245 seconds)
2013-08-31 15:53:35	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 15:54:17	-->	void64 (~luke@37.17.113.245) has joined #haskell
2013-08-31 15:55:15	meretrix	Say I have "data X = A | B", "data Data = { x :: X, y :: Int }", and "data Pair = Pair Data Data".  Is there any way to constrain the Pair constructor to require the first argument has "x == A" and the second has "x == B"?
2013-08-31 15:55:36	meretrix	Is this a case where I need GADT?
2013-08-31 15:56:00	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 15:56:30	-->	desc|zenbook (~heh@120.141.196.237) has joined #haskell
2013-08-31 15:56:48	-->	ski (~md9slj@t-2020-07.studat.chalmers.se) has joined #haskell
2013-08-31 15:56:54	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 15:57:21	aegis__	meretrix: that wouldn't make much sense I believe; A and B are data constructors, not types
2013-08-31 15:57:34	-->	SLi (sliedes@lakka.kapsi.fi) has joined #haskell
2013-08-31 15:57:44	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-08-31 15:57:59	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 15:58:24	-->	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has joined #haskell
2013-08-31 15:58:40	-->	mjs2600 (~mjs2600@west-7b-pat-1.oit.duke.edu) has joined #haskell
2013-08-31 15:58:57	-->	edon (~user@albalug/edon) has joined #haskell
2013-08-31 15:59:30	donri	data A; data B; data Data x = Data { x :: x, y :: Int }; data Pair = Pair (Data A) (Data B)
2013-08-31 15:59:30	<--	_d3f (~gnu@ip-static-94-242-252-66.as5577.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 15:59:53	donri	actually
2013-08-31 16:00:07	donri	data Data x = Data { y :: Int }
2013-08-31 16:00:28	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-08-31 16:01:26	meretrix	Ok, I guess that makes sense. So A and B become types.
2013-08-31 16:01:27	donri	data Data x where DataA :: Int -> Data A; DataB :: Int -> Data B
2013-08-31 16:02:06	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 16:02:29	<--	simukis_ (~simukis_@78.63.244.234) has quit (Read error: Operation timed out)
2013-08-31 16:02:29	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-08-31 16:02:55	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 16:02:59	<--	mjs2600 (~mjs2600@west-7b-pat-1.oit.duke.edu) has quit (Ping timeout: 256 seconds)
2013-08-31 16:03:00	donri	but not sure this justifies a gadt though, data A = A; data Data x = Data { x :: x, y :: Int} -- now DataA == Data A
2013-08-31 16:03:02	<--	petrus (~petrus@unaffiliated/petrus) has quit (Quit: WeeChat 0.4.1)
2013-08-31 16:03:03	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-31 16:03:41	<--	CaptainK (~CaptainK@181.178.232.51) has quit (Read error: Connection reset by peer)
2013-08-31 16:04:11	hpc	that's just an ordinary ADT with record syntax
2013-08-31 16:04:11	-->	scripty (~scripty@117.192.172.178) has joined #haskell
2013-08-31 16:04:27	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-08-31 16:04:59	-->	u_ (~phillip@adsl-75-57-168-247.dsl.emhril.sbcglobal.net) has joined #haskell
2013-08-31 16:05:01	donri	exactly
2013-08-31 16:05:05	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 16:05:44	-->	CaptainK (~CaptainK@181.38.17.90) has joined #haskell
2013-08-31 16:06:05	-->	ele_ (~quassel@90.173.233.56) has joined #haskell
2013-08-31 16:08:05	<--	CaptainK (~CaptainK@181.38.17.90) has quit (Read error: Connection reset by peer)
2013-08-31 16:08:32	<--	sjoerd_visscher (~sjoerd_vi@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 240 seconds)
2013-08-31 16:08:57	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-08-31 16:08:59	<--	wavewave (513fb702@gateway/web/freenode/ip.81.63.183.2) has quit (Ping timeout: 250 seconds)
2013-08-31 16:09:03	-->	breck7 (~breck7@75-144-246-6-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 16:09:38	-->	sjoerd_visscher (~sjoerd_vi@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 16:10:18	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-08-31 16:10:18	<--	lemao (~lemao@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-08-31 16:10:27	<--	Toxaris (~default@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 260 seconds)
2013-08-31 16:10:34	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 256 seconds)
2013-08-31 16:10:44	-->	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 16:11:23	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 16:11:30	<--	eis_ (~eis@109.197.218.46) has quit (Ping timeout: 264 seconds)
2013-08-31 16:11:34	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-08-31 16:11:50	-->	nilg (~user@77.70.2.229) has joined #haskell
2013-08-31 16:11:58	-->	dropster (~Kim@62.198.239.230) has joined #haskell
2013-08-31 16:12:16	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 16:13:06	<--	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-08-31 16:13:20	ski_	  data A = MkA; data B = MkB
2013-08-31 16:13:23	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 16:13:28	ski_	  data Data :: * -> *
2013-08-31 16:13:30	ski_	    where
2013-08-31 16:13:38	ski_	    DataA {y :: Int} :: Data A
2013-08-31 16:13:46	ski_	    DataB {y :: Int} :: Data B}
2013-08-31 16:13:50	ski_	  data Pair = MkPair (forall a. a -> Data a)
2013-08-31 16:14:18	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 264 seconds)
2013-08-31 16:14:39	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 16:14:39	ski_	hm, actually, the last one doesn't work
2013-08-31 16:14:59	donri	also i think they're changing record gadt syntax
2013-08-31 16:15:02	-->	refried_ (~refried_@166.205.66.195) has joined #haskell
2013-08-31 16:15:04	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-08-31 16:15:07	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Ping timeout: 260 seconds)
2013-08-31 16:15:07	ski_	donri : to what ?
2013-08-31 16:15:08	-->	choccow (~user@p5067-ipbfp302sizuokaden.shizuoka.ocn.ne.jp) has joined #haskell
2013-08-31 16:15:10	<--	ykm (~ykm@38.snat-111-91-51.hns.net.in) has quit (Quit: Leaving.)
2013-08-31 16:15:13	donri	but again, i don't think you need a gadt in this simple case
2013-08-31 16:15:23	 *	haasn wonders how many people actually genuinely use the operators like <.&.~ in lens
2013-08-31 16:15:33	 *	hackagebot aws 0.8.0 - Amazon Web Services (AWS) for Haskell  http://hackage.haskell.org/package/aws-0.8.0 (AristidBreitkreuz)
2013-08-31 16:15:35	-->	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 16:15:35	 *	hackagebot algebraic-classes 0.5.1 - Conversions between algebraic classes and F-algebras.  http://hackage.haskell.org/package/algebraic-classes-0.5.1 (SjoerdVisscher)
2013-08-31 16:15:36	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 16:16:03	<--	refried_ (~refried_@166.205.66.195) has quit (Client Quit)
2013-08-31 16:16:52	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 16:16:55	aristid	(almost exactly one year after 0.7.0, aws 0.8.0 is out :D)
2013-08-31 16:17:04	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 16:17:30	aristid	how long does hackage need these days to get to build packages?:)
2013-08-31 16:17:45	<--	turiya (~turiya@14.96.74.172) has quit (Quit: Leaving)
2013-08-31 16:17:49	deech	What is the recommended way of binding a C enum to Haskell? In the binding I'm working on the enum isn't exhaustive and numbers are being cast to it in different parts of the code.
2013-08-31 16:17:49	donri	ski_: https://github.com/ghc/ghc/commit/9fc2778cf20990524b13705a519b0c337ad197fe  -- not sure if it was already deprecated though
2013-08-31 16:18:06	Makoryu	I heard somewhere that GHC doesn't know how to represent enumerable datatypes as plain ints. Is this still true?
2013-08-31 16:18:13	<--	Desheng2 (~Desheng@166.182.67.48) has quit (Ping timeout: 248 seconds)
2013-08-31 16:18:31	aristid	is it possible that hackage doesn't do any builds anymore? :(
2013-08-31 16:18:36	<--	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 16:18:44	donri	aristid: it has to to build docs
2013-08-31 16:19:00	Makoryu	deech: Ouch. In that situation I think I'd use a layer of indirection that "translates" the C values to a Haskell type that only represents legal states
2013-08-31 16:19:14	aristid	donri: hm
2013-08-31 16:19:23	-->	Itay (~quassel@IGLD-84-229-14-111.inter.net.il) has joined #haskell
2013-08-31 16:19:27	-->	druznek (~druznek@2-230-53-80.ip200.fastwebnet.it) has joined #haskell
2013-08-31 16:19:31	aristid	donri: it's just that all the What's new packages have no docs/no built tag
2013-08-31 16:20:13	donri	aristid: the bottom ones do for me...
2013-08-31 16:20:28	<--	void64 (~luke@37.17.113.245) has quit (Ping timeout: 246 seconds)
2013-08-31 16:20:29	<--	matheus23 (~quassel@p4FDF3159.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-08-31 16:20:43	deech	Makoryu: How do you mean?
2013-08-31 16:20:52	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 16:20:52	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 16:21:13	aristid	donri: hmm either i was blind or they are being built as we speak:)
2013-08-31 16:21:29	Eduard_Munteanu	Hm... why aren't empty declarations allowed for newtypes?
2013-08-31 16:21:44	donri	aristid: actually only the top three ones haven't built yet
2013-08-31 16:21:56	donri	aristid: i think it builds stuff every few hours
2013-08-31 16:21:58	Makoryu	deech: Well, I'd write a datatype describing what the enum is supposed to represent, and then only allow access to the C version via functions that can translate back and forth between those formats
2013-08-31 16:22:11	-->	kitallis (~kitallis@122.166.176.62) has joined #haskell
2013-08-31 16:22:16	Makoryu	Eduard_Munteanu: Because of the way newtypes allocate storage
2013-08-31 16:22:16	aristid	donri: this one is a bit older and also not built, hm: http://hackage.haskell.org/package/tls-debug-0.2.5
2013-08-31 16:22:31	Eduard_Munteanu	Makoryu: how do you mean?
2013-08-31 16:22:31	donri	aristid: not a lib
2013-08-31 16:22:37	deech	Makoryu: Ah. Thanks!
2013-08-31 16:22:43	Makoryu	Eduard_Munteanu: Don't think of them like datatypes. Think of them as opaque type synonyms
2013-08-31 16:22:58	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 16:23:05	-->	joachifm (~joachifm@ulrik.uio.no) has joined #haskell
2013-08-31 16:23:18	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 264 seconds)
2013-08-31 16:23:27	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-08-31 16:23:30	Eduard_Munteanu	Makoryu: well, yes... and IMO newtype VoidN ~ newtype VoidN' = VoidN' Void    where data Void
2013-08-31 16:23:41	donri	what would an empty newtype even *mean*
2013-08-31 16:23:42	Eduard_Munteanu	Actually they're the same thing, not just ~
2013-08-31 16:23:44	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Remote host closed the connection)
2013-08-31 16:23:51	Makoryu	deech: I dunno if that's the right thing to do *in this case* but as a rule of thumb you should have "gatekeepers" like that between non-Haskell (dirty) types and typesafe stuff
2013-08-31 16:23:53	donri	newtype wraps an existing type
2013-08-31 16:24:10	<--	Tarential (~Tarential@li421-205.members.linode.com) has quit (Excess Flood)
2013-08-31 16:24:21	Makoryu	Eduard_Munteanu: Newtypes are lifted
2013-08-31 16:24:23	Eduard_Munteanu	It means only bottom inhabits it.
2013-08-31 16:24:29	Makoryu	IIRC
2013-08-31 16:24:33	-->	Tarential (~Tarential@li421-205.members.linode.com) has joined #haskell
2013-08-31 16:24:40	-->	lemao (~lemao@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 16:24:42	Makoryu	So it does generate extra thunks
2013-08-31 16:24:54	Eduard_Munteanu	I thought it wasn't supposed to.
2013-08-31 16:24:55	donri	Eduard_Munteanu: but what type does it wrap? i suppose we could have a syntax for wrapping a type without a value constructor...
2013-08-31 16:25:01	Makoryu	Maybe I'm remembering wrong
2013-08-31 16:25:14	Eduard_Munteanu	donri: it doesn't need to wrap a type.
2013-08-31 16:25:16	donri	newtype Empty :: Void, or something
2013-08-31 16:25:17	Makoryu	At any rate you can only use newtype to wrap existing types, even if they're Void
2013-08-31 16:25:34	donri	which might let you derive instances or something
2013-08-31 16:25:41	--	irc: disconnected from server
2013-09-02 01:34:24	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-02 01:34:24	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-09-02 01:34:24	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-09-02 01:34:25	--	Nicks #haskell: [@ChanServ [[zzzz]] [swift] \q _1126 __main__ __userna1 _br_ _flow_ _janne _justjust `0660 `^_^v `bps `Jake` a11235 ab9rf abglanz absence acfoltzer Adeon adimit Adios adlan_ Admiral-Bell adnap aess AfC aford aforemny agundry ahf ahihi akahn akiress akraut akurei_ albel727 aleator alej alexander__b alexsdutton AlexWebr Alice3 aloiscochard alpounet Amadiro amathew amatsu amindfv anachron andares anders^^ andrewsw anhall aninhumer AntiSpamMeta aoh apaku apfelbox Apocalisp apples applicative araujo arbn arbn1 arcatan aristid arke arkeet arkx arlinius arnsholt arpunk asante ashnur asjo aszlig Athas augur aupiff averell axiom Azel b0c1 b2coutts b52 b_jonas banjiewen barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ bduc Belgarion0 benj_ bens bentrevor bergmark betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitraten BlankVerse blast_hardcheese BlastHardcheese Blkt BMeph_ bobry bobthenameless bogner bogner_ Boney Boreeas bqp brainproxy Brando753 brandonw brendan brett BrianHV brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild_ bxc Bynbo7 byorgey ByronJohnson bytbox c_14 c_wraith cajla Cale caleb_9 caligula callen canta CaptainLex carter ccasin ccxCZ ceii centrinia Cerise charlesofarrell_ chatsiri_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrishart chrra ciaranm CindyLin1 circle_ cjay ClaudiusMaximus Clint clog cmsd2 codesoup CODEtaku cods cognominal colah companion_cube confound copton_ copumpkin CosmicRay Counter-Strike cow-orker cronject cross crs_ cruxeternus Cryovat cschneid cynick cyphase_ d-snp d3lxa dabradley dacc dan64 danharaj danr dario^CIP DarkFox DarkNFoxy darthdeu Dashkal davean davidt davorak dcoutts de-Vri-es deavid debo deech Deewiant def-lkb deggis demolithion Demos dennylin93 destiny dexter2 DexterLB dfan dgpratt diadara DigitalKiwi dilinger_ divarvel dixie djahandarie dju dlundy dmp1ce dmwit Dodek dogmaT dolio doomlord doomlord_ doshitan dpwright dqd Draconx Draggor drbean DrCode drdo drewr DRiKE drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dumael dustinswan DustyDin1o dwcook dwierenga dwins Dybber dyreshark dyspeptics15 eacameron earthy eataix ecube edk Edoxile edwardk edwtjo eevar eff_ ehamberg ehd ejls ekipan eL_Bart0 electrogeek elgot Eliel Elision elliott ellipsis Enigmagic ent epsylon epta ericmathison ericmj Eridius erisco erkin ernst Erstarrung etrepum EvanR Excedrin Excurio eyck Ezku ezrios fabjan fall_ farn favonia felipe_ fergusnoble fijimunkii fikusz finnrobi FireFly flazz_gone flebron flori_ flux fmapE fogus|gone foxnorth fran FreakyPe1guin FreeFull fridim_ frontendloader froztbyte fry fryguybob ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gbarboza gbeshers gbluma gdeest gds geal geekosaur gemelen gentleben geoffh geofft_adium gereedy ggherdov ggreg ghorn Ghoul_ gilbertw1 gnoel Gothmog_ go|dfish gpampara Gracenotes greymalkin gridaphobe gseitz gthorslund guerrilla Guest19190 Guest53212 Guest66158 Guest80998 Guest92121 Guest98659 Gunni guymann h4199 haasn hackagebot Hafydd hajimeho_ hamilyon hamishmack hape01 Hardolaf hashcat hattusili_III hc hdevalence|away heath Heffalump helgikrs hfaafb hiptobecubic hiratara hiredman hive-mind hiyakashi hkj Hodapp horlicks hpc hpd HugoDaniel hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack icz identity idnar ido idoru Igloo ijp inarru inr int-e integral Internet13 io2 ion ipuustin ircbrowse iron_houzi ISF ismlages isomorphic isomorphismes Itkovian iulian ivan\ ivan` ivanacostarubio Jaak jack_rabbit jackhill jackp jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jascase901 jaspervdj javax Jaxan jayne jb55 jbauman jcp jdegoes jdoles jeff_s1 Jello_Raptor Jesin JesuZ jhh jix jkpl jlamothe jlewis jliikka jlouis jmcarthur jmct jml joachifm joar jodaro joefiorini joelteon joeyh johnw joneshf-laptop joneshf-work Jonno_FTW jonsmock jonsterling joogi JPohlmann jrd0 jrib jroesch jrslepak junsuijin juuhaa jyyou jzelinskie jzl k0001 k00mi k0ral k4nar Kabaka_ kakos kallisti KaneTW kaol Katayo katis kaw Ke kekimmo Kelet keseldude kevinqcs kfreds Khady Khisanth killy9999 kini Kinnison Kiryx KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man Kobata kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft ksf kshannon_ kstuart ktosiek Kuraitou kxra KyleCloud lahwran lambdabot LAMMJohn1on Laney latro`a lattenwald Lefeni Lemmih lenstr leroux Letchik levi Licenser lieven_ lightquake linduxed liori Liskni_si lispy liszt litherum liyang ljhms lokydor lopex lpaste lpsmith lq luite lukexi luksow lulf lunarjar lusory M-ou-se m0g maattdd machisuji machisuji_ macron madjestic magicman Maior mak` Makoryu maksbotan malorie_ mami mannyv mantovani manung maoe1 marienz Martty MasseR mattp_ mauke mavam Maxdamantus maximums1eve Mayzie mbrock mceier mcw09 mechairoi mee mel- melter mena mendez mephx MercurialAlchemi meretrix merijn mero MetaCosm mgaare mgsloan miasma miclorb mietek mike2 mikeplus64 milessabin milli mimi_vx mimico__ mirsal mixi mizu_no_oto mjo mjo_ mjrosenb mjs2600 MK_FG mkiefel mkrull mlamari mlh mlinksva mm_freak_ mmaruseacph2 mmathis mnbernstein MoALTz mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes MouseTheLuckyDog Mowah mr- mrcheeks mrd mrkotfw mroman mrowe mrpantoufle MrRacoon_ mrshoe MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4 mxf myme n00dle Nahra Natch ndngvr NeatBasis necroyeti neektza1 NemesisD neptunepink Neqoxec neurocyte newsham nexx Nickeeh nicoo Nik05 nik_89 niko nikola nilg Nimatek ninegrid ninzine Nisstyre nkpart nlogax noam noddy2OOO Noldorin nopcode_ noplamodo notdan noteventime Nshag nwf nxorg8 obcode Obfuscate ocharles Odd_Bloke ofan og oldmanst1n OlegYch6 oleo opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s_ otulp Pad^ paddymahoney palaga palmje ParahSailin ParaSa1lin parcs Patchou paz pcapriotti peddie peltchu Pengoo pentace perlite perspectival petanqk petantik pfoetchen phar pharaun phienone philipde` Philonous Phlogistique PHO_ pi8030 pierreghz pikhq PJBoy pjstadig Plex- plhk pnielsen Polarina pootler poppingtonic popx poucet pqmodn pr Pranz predator117 preflex profmakx prophile Proteumus prototrout ps-auxw pseudolio Ptival pure purefn puzza007 pygospa pyrtsa pyykkis_ q66 Quadrescence quaestor quicksilver qwandor qz_ raft RageOfThou raid Ralith Rarrikins rasmusto Raynes Raynos Razz reactormonk redjohn ReinH Reisen relrod Rembane RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb roconnor rodrigovidal rpenguin_ rs0 Rutger` ryanakca ryant5000 s00pcan s4muel s_quark sababa SaBer saep saiam saiam^ Saizan sajith samrat sansor_ satc satshaba1 satshabad saurik SBauer scaldwell schlumpi_ schoppenhauer schroedinbug sclv scottschecter scshunt Sculptor sdx32 seantallen SegFaultAX sellout- sferry_ Sgeo sgso shachaf shajra shanse shelf shennyg shepheb Shin-LaC shiona shmup SHODAN si14 simon sipa SirChurchill sirspazzolot ski skulls skypers sleepybug SLi slobo sm smarter smith_ smlgs so Soft- sohum solancile solarus solirc solution Sonarpulse sordina Sorella SoupEvil sp3ctum Spaceghost spaceships Spockz squimmy srcerer ssbr` ssttudder Starfire_ stass statusfailed stelleg stepcut stiell stomp strax strmpnk stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supki Svedrin swistak35 Swizec swook` sxn tahu TallerGhostWalt talzeus talzeus_ tamiko Tarential Targen tarmo taruti tauntaun tavelram taylorgb_ td123 tdammers Tehnix tehroflmaoer Tekerson tel Tene tensorpudding tero- Tesseraction tessier_ tew88 tg Th0mas The_third_man theDon theorbtwo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice thr33strikes threedaymonk thunderrd tiffany tikhon tiksa timemage Tinned_Tuna tippenein tko TML tomaw tomejaguar tomh- tommd tomprince torkjak totte tragalo Tribal tridactyla trism Tritlo tromp__ troydm tsou tudalex tufflax tulcod tunixman twanvl_ Twey twn tych0 tylergillies_ u_ udevd udoprog Ulrar Umschwung upgrayeddd uu1101 valdyn Valodim ve vehk Veltas Vendethiel Vertue viktech vili_ vivekrai vmeson vnz vobi void64 voxpopuli Vq vsayer vvv wagle wakIII Walther warpy Watcher7 waterlaz wchun weie wereHamster whaletechno wilfredh willb1 Will| wimpunk wolfnn wollw wormphlegm wto wtw wunki Wuzzy xaimus xenocons xexonixxexillion xinming XMunkki_ xnyhps Xorlev xorox90 xplat xye xymox Y_Less yacks yam yan_ Yaniel yano Yawgmoth Ycros ye_ yeltzooo yogurt_truck yriw ysuzuki zacts zaiste zammy zaphar_ps zbcm zcourts zebr zeiris_ zenoli zenzike zero7 zerokarmaleft zerowaitstate zett_zelett ziman zoktar zomg zorzar zrot zw01]
2013-09-02 01:34:25	--	Channel #haskell: 1094 nicks (1 op, 0 halfops, 0 voices, 1093 normals)
2013-09-02 01:34:25	--	URL for #haskell: http://www.haskell.org/
2013-09-02 01:34:25	-->	pgiarrusso (~pgiarruss@dslb-084-059-072-081.pools.arcor-ip.net) has joined #haskell
2013-09-02 01:34:26	--	Mode #haskell [+CLcnpt]
2013-09-02 01:34:26	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-09-02 01:34:36	geekosaur	so would either of you experts like to say something useful *to Haskell programmers*?
2013-09-02 01:34:47	 *	applicative in his youth learn to use 'transparent' and 'opaque' only as modifying 'context'
2013-09-02 01:34:49	mm_freak_	augur: given an expression expr with a free variable x, does (expr, x) count as a context?
2013-09-02 01:35:08	-->	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has joined #haskell
2013-09-02 01:35:08	augur	mm_freak_: no, i would avoid conflating holes with variables
2013-09-02 01:35:28	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-02 01:35:28	<--	miclorb (~textual@101.170.128.249) has quit (Quit: miclorb)
2013-09-02 01:35:43	-->	cdidd (~cdidd@128-68-18-76.broadband.corbina.ru) has joined #haskell
2013-09-02 01:35:53	mm_freak_	augur: ok, say x = y → f x = f y…  how do you express this in terms of referential transparency?
2013-09-02 01:35:57	ekipan	is that a quote from somewhere, Kelet?
2013-09-02 01:35:59	applicative	"'believes that ...' generates an opaque context" was the way the jargon worked
2013-09-02 01:36:09	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-02 01:36:12	augur	mm_freak_: i wouldnt. its not a fact about referential transparency
2013-09-02 01:36:14	ekipan	the first two sentences
2013-09-02 01:36:27	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 01:36:29	Kelet	ekipan, More or less from the last answer here: http://stackoverflow.com/questions/4865616/purity-vs-referential-transparency
2013-09-02 01:36:32	applicative	mm_freak_: easy: it is the claim that 'f ...' is transparent
2013-09-02 01:36:43	augur	no applicative thats not true
2013-09-02 01:36:47	-->	floatingman (~dnewman@c-68-47-207-131.hsd1.tn.comcast.net) has joined #haskell
2013-09-02 01:36:49	mm_freak_	hmm
2013-09-02 01:36:51	augur	its a claim that f respects =
2013-09-02 01:37:03	applicative	x = y -> Jones believes that x is wise -> Jones believes that y is wise, is a bad generalization
2013-09-02 01:37:32	mm_freak_	conclusion:  i'll stop using the term "referential transparency" in the future =)
2013-09-02 01:37:33	augur	mm_freak_: x = y -> f x = f y is just a statement that f respects =
2013-09-02 01:37:44	augur	if this is true about all f's, then it means = is a congruence
2013-09-02 01:37:52	applicative	augur: exactly, the mathematical jargon about a transformation 'respecting' some equivalence is a more abstract version of what quine was doing
2013-09-02 01:38:06	monochrom	I am not an expert (yeah right), but I have a useful suggestion. stop using the word "referential transparency" and its derivative.
2013-09-02 01:38:08	augur	applicative: no, its really not
2013-09-02 01:38:26	augur	applicative: quine, and his antecendents, were talking about expressions, period. not functions, etc.
2013-09-02 01:38:27	applicative	augur: oh, whats the diff? i was trying the suggestion out
2013-09-02 01:38:39	applicative	augur: of course thats true yes
2013-09-02 01:38:41	ekipan	how about "warm, fuzzy, property of contexts"? :P
2013-09-02 01:38:42	augur	and thats a hugely important thing, because this is about how languages relate to their semantics
2013-09-02 01:38:52	augur	NOT about the semantics in isolation
2013-09-02 01:39:03	<--	dgpratt (~dpratt71@pool-72-65-109-226.ptldme.east.myfairpoint.net) has quit (Quit: Leaving)
2013-09-02 01:39:21	augur	monochrom: how about we just use it correctly? :P
2013-09-02 01:39:32	<--	predator117 (~predator1@p5080282E.dip0.t-ipconnect.de) has quit (Ping timeout: 241 seconds)
2013-09-02 01:39:36	mm_freak_	augur: the correct usage doesn't seem very useful to programmers
2013-09-02 01:39:40	augur	applicative: this is why im wary of saying f is reftrans
2013-09-02 01:39:42	applicative	augur: I still think i might be able to make something of what i said above, but i see, yes
2013-09-02 01:39:49	monochrom	the problem is that people argue over what is "correctly".
2013-09-02 01:40:00	augur	applicative: what you said makes sense, but its not ref trans :)
2013-09-02 01:40:10	augur	monochrom: "correctly" is an adverb, duh
2013-09-02 01:40:17	augur	(bam! referential transparency joke!)
2013-09-02 01:40:25	applicative	augur: my point was you need something like a concept of 'identity' of 'x = y', then in certain contexts it carries over, others not
2013-09-02 01:40:34	 *	geekosaur is waiting for one of our experts to suggest something that is actualy useful to new haskell programmers, since apparently it is no longer permissible to use this one
2013-09-02 01:40:42	augur	mm_freak_: so? the orrect usage of "purple" isnt either
2013-09-02 01:40:49	augur	should we redefine purple to mean something useful to programmers?
2013-09-02 01:40:51	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2013-09-02 01:40:56	augur	or should programmers just use the words that are useful to them?
2013-09-02 01:41:10	applicative	it would good to find some useful words
2013-09-02 01:41:15	mm_freak_	augur: that's not the point…  it must be easier to explain "does not have side effects"
2013-09-02 01:41:25	geekosaur	but of course it;s jusrt wrong to try to teach them what they need to know, they need math degrees before they're allowed to think about it apparentlu
2013-09-02 01:41:28	applicative	'side effects' means nil.
2013-09-02 01:41:28	augur	applicative: it would be useful for people to be precise about what they want to express too :)
2013-09-02 01:41:42	Iceland_jack	Levels of snark, rising
2013-09-02 01:42:09	augur	mm_freak_: transparency and sideeffects are distinct notions, except maybe to some people like CCShan, who's i think tried to interpret one as the other? i dont know.
2013-09-02 01:42:09	ekipan	precision requires study, i.e. work
2013-09-02 01:42:12	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-02 01:42:14	ekipan	and I am far too lazy for that
2013-09-02 01:42:31	monochrom	I am a bit cynical and pessimistic. programmers already use the word "function" wrong.
2013-09-02 01:42:45	ekipan	indeed!
2013-09-02 01:42:51	Iceland_jack	monochrom: wrong ≠ differently from mathematics
2013-09-02 01:43:04	applicative	when i first learned about the cs jargon 'side effects' i thought, man this is nonsense; now i think it even more so.
2013-09-02 01:43:10	augur	monochrom: yeah. well. that term has existed outside of math since before math, so thats a harder one to justify
2013-09-02 01:43:27	applicative	it is based on the experience of throwing a print statement in the middle of some loop and the like
2013-09-02 01:43:39	mm_freak_	programmers used to use the proper term for what they call "function" today
2013-09-02 01:43:42	mm_freak_	"procedure"
2013-09-02 01:43:48	augur	applicative: part of the problem is that noone gives semantics for imperative languages
2013-09-02 01:43:56	mm_freak_	also haskell programmers use the word "method" wrong
2013-09-02 01:44:02	augur	so all they can talk about is "side effects", etc.
2013-09-02 01:44:06	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-02 01:44:08	ekipan	it has been fashionable to call them "methods" as well
2013-09-02 01:45:30	applicative	Debug.trace is a sort of model of the source of the idea of a 'side effect'; it is doubtful that such a concept could take us very far.
2013-09-02 01:45:33	mm_freak_	in fact most programmers for most languages get "method" wrong, but i think it's worse in haskell than in other languages
2013-09-02 01:46:03	arke	I've got several fuctions that take a record and returns a new record with only one member different; is there a "clean" way to do this without writing out all record members every time?
2013-09-02 01:46:06	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:f577:9252:a791:1796) has quit (Ping timeout: 264 seconds)
2013-09-02 01:46:06	<--	Jesin (~Jessin_@Dyn140006.cc.lehigh.edu) has quit (Ping timeout: 264 seconds)
2013-09-02 01:46:16	augur	but my earlier point about x++ and x+1 is important. i think that clarifies another reason why i think the expression level usage is just wrong.
2013-09-02 01:46:20	mm_freak_	arke: two clean ways
2013-09-02 01:46:22	applicative	is my operating system a 'side effect'
2013-09-02 01:46:30	mm_freak_	arke: f x = x { field = y }
2013-09-02 01:46:38	mm_freak_	arke: the second clean way is using lenses
2013-09-02 01:46:46	mm_freak_	f = field .~ y
2013-09-02 01:47:05	 *	applicative is the wisest haskeller on #haskell, for he knows that he knows nothing
2013-09-02 01:47:14	<--	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has quit (Quit: Konversation terminated!)
2013-09-02 01:47:30	-->	predator117 (~predator1@p50802FDB.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 01:47:46	ekipan	am I wiser if I know more nothing?
2013-09-02 01:48:16	<--	zammy (~sammy@ppp-53-83.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-02 01:48:25	applicative	yes
2013-09-02 01:48:37	applicative	as you you know you know more nothing
2013-09-02 01:48:41	<--	jackp (~Jack@pool-173-61-150-129.cmdnnj.fios.verizon.net) has left #haskell
2013-09-02 01:49:11	 *	monochrom disputes applicative. monochrom is wiser, for he can actual suggest wise tautologies, such as "the solution depends on the problem" and "the more you know, the more you know"
2013-09-02 01:49:13	ekipan	oh I definitely know more nothing, but I'm not sure how much more nothing I know that I know, so maybe I'm not wiser after all
2013-09-02 01:49:15	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-02 01:49:35	applicative	unlike the dogmatic windbags who tells that e.g. monads arent containers, since obviously the picture is of limited utility
2013-09-02 01:49:53	arke	mm_freak_: ooh, lenses are new to me. The first way is what I was looking for, but the second thing I may have to use as an excuse to procrastinate on what I'm trying to do. Thanks!
2013-09-02 01:50:13	applicative	monochrom: the more you know the greater your vanity, and the stupider and more vicious you become
2013-09-02 01:50:14	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (Ping timeout: 240 seconds)
2013-09-02 01:50:25	edwardk	arke: there is video! and there are many online tutorials for lens
2013-09-02 01:50:58	edwardk	arke: lens is a pretty deep rabbit hole though, so be warned. =)
2013-09-02 01:51:22	applicative	hah http://www.slideshare.net/fullscreen/terriko/how-does-biology-explain-the-low-numbers-of-women-in-cs-hint-it-doesnt/24
2013-09-02 01:51:30	augur	applicative: monads are totally containers, in an abstract sense :)
2013-09-02 01:51:36	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-02 01:51:48	<--	pgiarrusso (~pgiarruss@dslb-084-059-072-081.pools.arcor-ip.net) has quit (Quit: pgiarrusso)
2013-09-02 01:51:54	monochrom	you had me scared. until I saw "hint it doesn't"
2013-09-02 01:52:03	-->	Dawgmatix (~user@pool-100-1-31-214.nwrknj.fios.verizon.net) has joined #haskell
2013-09-02 01:52:03	applicative	augur: oh really? the authorities on haskell call you a corrupt moron if you say that
2013-09-02 01:52:11	<--	kevinqcs (~turing@183.209.141.191) has quit (Remote host closed the connection)
2013-09-02 01:52:20	augur	the authorities being copumpkin, in this case
2013-09-02 01:52:31	augur	which is ok :P
2013-09-02 01:52:44	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-02 01:52:53	monochrom	"monads are containers" is at about the same level as "survival of the fittest"
2013-09-02 01:53:12	augur	the authorities on haskell seem to lack any understanding of pedagogy. quite a common thing among programmers. "just read the code! it explains itself!"
2013-09-02 01:53:41	monochrom	i.e., but what are containers? answer: monads. but what is fittest? answer: survival.
2013-09-02 01:53:44	applicative	this one has a certain charm in the context, though it isn't meant seriously monochrom http://www.slideshare.net/fullscreen/terriko/how-does-biology-explain-the-low-numbers-of-women-in-cs-hint-it-doesnt/14
2013-09-02 01:53:45	joelteon	@pl \(a,b) -> f a >>= \a1 -> f b >>= \b1 -> return (a1,b1)
2013-09-02 01:53:45	lambdabot	uncurry ((. (flip (fmap . (,)) . f)) . (>>=) . f)
2013-09-02 01:53:51	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-02 01:53:54	joelteon	I need a mapM that works on a tuple instead
2013-09-02 01:54:16	mm_freak_	"monads are containers" is at about the same level as "functions are referentially transparent"
2013-09-02 01:54:19	mm_freak_	=)
2013-09-02 01:54:21	augur	monochrom: there should ofcourse always be the caveat "not really", but intuitions are important, despite what copumpkin wants to say from atop his learned mountain
2013-09-02 01:54:23	applicative	if monads can be trees with grafting, why not containers?
2013-09-02 01:54:34	copumpkin	o.O
2013-09-02 01:54:40	--	centrinia is now known as |-O-O-|
2013-09-02 01:54:45	augur	thats right, copumpkin, im lookin at you
2013-09-02 01:54:45	copumpkin	so either we suck at pedagogy or we say monads are containers?
2013-09-02 01:55:07	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-02 01:55:08	augur	no, im saying you _do_ suck a pedagogy. :P
2013-09-02 01:55:17	arke	edwardk: I'm not even at the part where I do anything with monads yet, so maybe I should wait a few days before diving in :)
2013-09-02 01:55:22	 *	applicative doesnt care for containers either, but the snide superior people have even to offer
2013-09-02 01:55:26	<--	zett_zelett (~zett_zele@p5DE7BA04.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-02 01:55:27	applicative	even less
2013-09-02 01:55:29	edwardk	arke: safe bet =)
2013-09-02 01:55:49	augur	copumpkin: you're in good company tho, so its ok
2013-09-02 01:55:50	arkeet	monads are quotients of free monads.
2013-09-02 01:56:08	monochrom	copumpkin: why not both? we suck at pedagogy and we say monads are containers :)
2013-09-02 01:56:10	arke	(I'm picking it up quicker than I had feared though; looking good so far)
2013-09-02 01:56:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-02 01:56:38	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-02 01:56:53	applicative	when 'monad' is used in connection with a type system with constructors, there is more material available that in a purely category theoretic approach. the latter tends to destroy understanding in haskell.
2013-09-02 01:57:02	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-02 01:57:04	augur	the best metaphor for monads i think is the monads-as-computations metaphor, but im not sure any one metaphor is perfect for pedagogy
2013-09-02 01:57:29	 *	applicative attempts to assign content to 'computation' 
2013-09-02 01:57:39	augur	applicative: :)
2013-09-02 01:57:43	 *	haasn also likes the ‘computation’ metaphor more than others
2013-09-02 01:57:46	arkeet	I ate breakfast today. was that a computation?
2013-09-02 01:57:50	augur	the point of analogies and metaphors is to bootstrap on existing intuitions
2013-09-02 01:57:54	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 01:57:55	 *	monochrom has a cunning plan!
2013-09-02 01:57:59	-->	pkrnj (~pkrnj@bas2-montreal47-1279446954.dsl.bell.ca) has joined #haskell
2013-09-02 01:58:03	<--	zerowaitstate (~dwaites@adsl-75-23-43-147.dsl.lgvwtx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-02 01:58:03	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-09-02 01:58:05	augur	even if noone knows what computation "really" is, thats irrelevant
2013-09-02 01:58:07	haasn	arkeet: was it a monad?
2013-09-02 01:58:14	monochrom	"computation" means Applicative. therefore, a monad is a computation, yes.
2013-09-02 01:58:15	augur	its the intuition we're targeting, not the One True Meaning
2013-09-02 01:58:16	applicative	'computation' seems to have been introduced by moggi ... out of desperation
2013-09-02 01:58:23	arkeet	haasn: I don't know!
2013-09-02 01:59:02	augur	applicative: it was out of pedagogical utility, i suspect.
2013-09-02 01:59:08	ekipan	a monad is a functor plus return and bind, such that the monad laws hold.
2013-09-02 01:59:16	<--	CaptainLex (~kvirc@174-20-73-117.mpls.qwest.net) has quit (Ping timeout: 246 seconds)
2013-09-02 01:59:37	augur	ekipan: you should change your name to copumpkin2
2013-09-02 01:59:49	mm_freak_	i wonder how you explain Cont as a container
2013-09-02 01:59:49	monochrom	therefore, the sentence "applicative attempts to assign content to 'computation' " is true :)
2013-09-02 02:00:00	<--	ljhms (~jms@nl109-141-60.student.uu.se) has quit (Ping timeout: 245 seconds)
2013-09-02 02:00:22	ekipan	well, someone asked for a definition, not an explanation :)
2013-09-02 02:00:24	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Client Quit)
2013-09-02 02:00:32	mm_freak_	and how you explain Unit in terms of "computation"
2013-09-02 02:00:38	augur	monochrom: you dont. you choose your battles wisely
2013-09-02 02:00:46	applicative	augur: my point, if there was one, was that he gave it content in the context; basically the explanation was 'different forms of computation' are 'different monads' ; but 'monads are really computations' thus becomes 'computations are computations; monads are monads' which is not an explanation
2013-09-02 02:00:55	mm_freak_	there is no metaphor to rule them all
2013-09-02 02:00:56	augur	er, mm_freak_ ^
2013-09-02 02:01:02	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-09-02 02:01:23	-->	Jesin (~Jessin_@Dyn157039.cc.lehigh.edu) has joined #haskell
2013-09-02 02:01:28	applicative	Cont is a perfectly good container; first you have to be come practiced at view a function Int -> a as a container of an a
2013-09-02 02:01:30	augur	mm_freak_: i mean, you can force it. its not too bad. but at some level you just dont explain, you just say you're going to think of it that way
2013-09-02 02:01:38	augur	which is what we actually do
2013-09-02 02:01:42	augur	i mean, when we write something like
2013-09-02 02:01:46	augur	k $ \x -> m
2013-09-02 02:01:56	augur	with the continuation k
2013-09-02 02:02:00	arkeet	but really, has anyone tried writing a monad tutorial that first describes the universal examples (e.g. free monads) and then observes that all monads are quotients of such things.
2013-09-02 02:02:03	arkeet	it would probably be awful.
2013-09-02 02:02:04	augur	we think of it as feeding a value in for x
2013-09-02 02:02:22	augur	sure it doesnt HAVE to do that, but thats how we think of it, to deal with the practical issue of actually writing programs
2013-09-02 02:02:25	applicative	first you must become practiced at viewing 'Int -> a' as a varying a
2013-09-02 02:02:36	<--	Jesin (~Jessin_@Dyn157039.cc.lehigh.edu) has quit (Remote host closed the connection)
2013-09-02 02:02:36	mm_freak_	applicative: complete the sentence:  "the container Cont . const contains …"
2013-09-02 02:02:46	augur	applicative: also know as a generalized element :)
2013-09-02 02:02:50	monochrom	free monad seems to be a rather recent trend. wait one more year for a monad tutorial that starts with free monad
2013-09-02 02:02:59	augur	heaven forbid we use the intuitions that the mathematicians themselves have!
2013-09-02 02:03:09	applicative	exactly augur; i'm sure generalized elements will be attacked by mm_freak_ as well
2013-09-02 02:03:32	mm_freak_	now introduce labels and goto in terms of Cont, complete the sentence: "goto contains …"
2013-09-02 02:03:51	applicative	what is the concrete type?
2013-09-02 02:03:52	roconnor	Cont doesn't meet the tradition definiton of a container (of being isomorphic to a polynomial functor)
2013-09-02 02:03:54	augur	mm_freak_: you're missing the point of an analogy
2013-09-02 02:04:07	mm_freak_	no, i'm not =)
2013-09-02 02:04:07	augur	roconnor: different notion of container
2013-09-02 02:04:11	mm_freak_	i use analogies all the time
2013-09-02 02:04:12	applicative	roconnor: that's a perfectly good account of container too
2013-09-02 02:04:14	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-09-02 02:04:16	augur	mm_freak_: yes, you definitely are
2013-09-02 02:04:22	monochrom	goto contains magic :)
2013-09-02 02:04:28	applicative	roconnor: taken up from the naive use of container in typed programming languages
2013-09-02 02:04:31	mm_freak_	augur: no, i'm not
2013-09-02 02:04:45	augur	those questions are pointless. you're taking the analogy beyond its intended domain of applicability
2013-09-02 02:05:31	applicative	monads are kinda like polynomial functors; lets start out tutorial with that 'intuition'; it wouldnt be so bad
2013-09-02 02:06:10	mm_freak_	augur: yes, i'm doing that on purpose, because metaphors build a bad/constrained intuition about monads, and beginners struggle with that
2013-09-02 02:06:26	mm_freak_	you can think of monads in terms of a metaphor, but you shouldn't introduce them that way
2013-09-02 02:06:28	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 02:06:31	augur	mm_freak_: beginners struggle with the "real" definition even more so.
2013-09-02 02:06:37	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 02:06:42	<--	xinming (~xinming@125.87.100.53) has quit (Ping timeout: 264 seconds)
2013-09-02 02:06:48	mm_freak_	augur: not if you explain monads the way you should:  by example
2013-09-02 02:06:52	applicative	the evidence for this is nil, mm_freak_
2013-09-02 02:07:02	augur	mm_freak_: yes if you explain it that way
2013-09-02 02:07:12	applicative	whats wrong with 'monads are trees with grafting'
2013-09-02 02:07:39	monochrom	that's just free monads. but ok.
2013-09-02 02:07:41	mm_freak_	applicative: well, not all monads are free monads =)
2013-09-02 02:07:59	augur	the problem ofcourse is that the plethora of monad tutorials was also pedagogically bad
2013-09-02 02:08:06	augur	its not ENOUGH to simply say
2013-09-02 02:08:11	augur	monads are (sorta) containers
2013-09-02 02:08:23	-->	xinming (~xinming@125.84.30.98) has joined #haskell
2013-09-02 02:08:35	augur	you have to say that, and then some.
2013-09-02 02:08:36	-->	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-02 02:08:48	augur	but few monad tutorials ever did the latter part.
2013-09-02 02:09:50	applicative	do cats have four legs and a tail?
2013-09-02 02:10:05	applicative	i mean mm_freak_ do cats have four legs and a tail?
2013-09-02 02:10:20	mm_freak_	applicative: i don't know
2013-09-02 02:10:45	applicative	you're not going to make any progress in pedagogy with that attitude
2013-09-02 02:10:49	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 02:11:51	ekipan	as someone who already *has* something of an intuition, I wonder why more tutorials don't start with Functor and work the way up
2013-09-02 02:12:06	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-09-02 02:12:07	applicative	the attacks on the 'container analogy', which I don't care for, have all rationality of NO CATS DONT HAVE FOUR LEGS ONLY SOME OF THEM DO: FOUR LEGGED CATS ARE A SPECIAL CASE WE SHOULDNT GETS TO FOCUS ON THEM,
2013-09-02 02:12:21	applicative	they should know right away about legless manx cats too
2013-09-02 02:12:25	ekipan	like this: http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html
2013-09-02 02:12:31	augur	applicative: part of the problem also is that people want to write things that are like.. three pages long maybe?
2013-09-02 02:12:46	applicative	of course
2013-09-02 02:12:46	monochrom	ekipan: I think it is related to: why there aren't tutorials dedicated to Functor
2013-09-02 02:12:46	augur	but most of these ideas require 10 pages or more to properly teach
2013-09-02 02:12:47	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-02 02:13:01	applicative	monochrom: a functor is kind of like a container ...
2013-09-02 02:13:10	ekipan	though that one is guilty of the common mistake of conflating "monad/functor" with actions of them
2013-09-02 02:13:18	monochrom	and I think the answer overall is: Functor is not mysterious enough
2013-09-02 02:13:30	mm_freak_	applicative: the same pedagogy that allows you to teach about cats does not work for everything…  my point is really that you shouldn't start an introduction to monads with: "monads are …"
2013-09-02 02:13:30	applicative	you go in with your function, and you swap everything out.
2013-09-02 02:13:36	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-09-02 02:13:40	<--	HugoDaniel (~hugo@bl11-42-99.dsl.telepac.pt) has quit (Quit: leaving)
2013-09-02 02:13:47	applicative	no one says that, where is an example?
2013-09-02 02:13:53	augur	applicative: ive had to write a lens tutorial because slogging through the lens literature for good intuitions has been a pain in the ass. same for iteratees
2013-09-02 02:14:18	augur	applicative: monads are burritos!
2013-09-02 02:14:21	wollw	I stopped feeling so intimidated by Monads etc when I stopped thinking of them as anything other than a typeclass with some rules.
2013-09-02 02:14:32	applicative	good work wollw
2013-09-02 02:14:33	edwardk	lenses are for space suits!
2013-09-02 02:14:51	edwardk	wollw: smart way to think about them
2013-09-02 02:14:55	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 260 seconds)
2013-09-02 02:14:55	monochrom	people really like to blog about their opinion on mysterious things. the less they know, the more they want to blog about it.
2013-09-02 02:15:03	danharaj	what ghci command lists imported names
2013-09-02 02:15:03	mm_freak_	applicative: the idea is to let people build their own metaphors by looking at a number of examples
2013-09-02 02:15:06	applicative	the only real difficulty about monads is the same for functor, its grasping (*->*) in the context of an infinite type system
2013-09-02 02:15:10	spaceships	monads are spaceships in the saucer category
2013-09-02 02:15:16	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-02 02:15:21	mm_freak_	applicative: that approach has worked very well in my workshops
2013-09-02 02:15:50	applicative	mm_freak_: no, the #haskell conformists who attach these attempts have a quite different agenda
2013-09-02 02:16:01	applicative	who attack these attempts, e.g.
2013-09-02 02:16:06	applicative	container analogies
2013-09-02 02:16:13	danharaj	agdenga: what agda enthusiasts have
2013-09-02 02:16:19	augur	mm_freak_: throwing examples at people is the worst way to achieve anything
2013-09-02 02:16:24	augur	you need examples, but just examples, without a good mental framework, is useless
2013-09-02 02:16:43	pharaun	i never found those blogs on monad to be helpful at all
2013-09-02 02:16:57	augur	danharaj: i have an agdenda :D
2013-09-02 02:17:00	 *	applicative suspects augur may actually have managed to teach something to someone
2013-09-02 02:17:03	pharaun	what helped was looking at the mathmatical notation then trying them out and playing with them then go from there, boom!
2013-09-02 02:17:05	augur	pharaun: they do such :)
2013-09-02 02:17:07	augur	suck*
2013-09-02 02:17:13	danharaj	an agdenda is a pull request to an agda repo on github
2013-09-02 02:17:14	augur	i should write a monad tutorial!
2013-09-02 02:17:21	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-02 02:17:33	danharaj	alternatively, an extension to agda
2013-09-02 02:17:34	-->	m_ke (~m_ke@cpe-108-182-20-11.nyc.res.rr.com) has joined #haskell
2013-09-02 02:17:41	applicative	agda is off topic
2013-09-02 02:17:45	augur	i actually came to understand monads from watching Catsters about 40 times
2013-09-02 02:18:03	monochrom	yikes, 40 times is many, many times
2013-09-02 02:18:04	 *	applicative just thought he's say that to use the customary device of the #haskell conformists
2013-09-02 02:18:09	augur	not 40 literally, monochrom
2013-09-02 02:18:16	augur	but i think ive watched like 10 times? dunno. its just fun, so
2013-09-02 02:18:23	mm_freak_	augur: assuming that i'm a complete idiot is also not a good way to get any point across in a subjective discussion
2013-09-02 02:18:38	mm_freak_	augur: i know very well that simply putting examples on the table does not work
2013-09-02 02:19:26	applicative	mm_freak_: i don't see why not; thats your attitude to everyone, so it must be a legitimate attitude on #haskell
2013-09-02 02:19:53	mm_freak_	ok, i'll shut up now
2013-09-02 02:20:03	-->	jevankovich (62d1e6dc@gateway/web/freenode/ip.98.209.230.220) has joined #haskell
2013-09-02 02:20:07	-->	mno2 (~mno2@wlan66.cc.ntu.edu.tw) has joined #haskell
2013-09-02 02:22:06	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-02 02:22:10	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Ping timeout: 268 seconds)
2013-09-02 02:22:11	 *	edwardk comes in, notices folks with claws out, and goes away
2013-09-02 02:22:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-02 02:22:27	Admiral-Bell	:q
2013-09-02 02:22:31	<--	Admiral-Bell (~greg@c-98-210-147-238.hsd1.ca.comcast.net) has quit (Quit: leaving)
2013-09-02 02:22:39	-->	chrishart_ (18065c30@gateway/web/freenode/ip.24.6.92.48) has joined #haskell
2013-09-02 02:22:58	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-09-02 02:23:04	-->	augur_ (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-02 02:23:07	chrishart_	@pl \(a,b) -> (b,a)
2013-09-02 02:23:10	lambdabot	ap (flip (,) . fst) snd
2013-09-02 02:23:10	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-02 02:23:19	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Read error: Connection reset by peer)
2013-09-02 02:23:25	mm_freak_	:t liftA2 (,) snd fst
2013-09-02 02:23:27	lambdabot	(a, b) -> (b, a)
2013-09-02 02:23:41	augur_	stupid crummy internet connection
2013-09-02 02:23:42	tikhon	Catsters? I must be missing something.
2013-09-02 02:23:56	augur_	tikhon: its a youtube series on category theory
2013-09-02 02:24:01	tikhon	aha
2013-09-02 02:24:21	applicative	oh you don't know them. some of its a little rough as i remember, but uniformly charming
2013-09-02 02:24:22	tikhon	seems like it could be quite interesting
2013-09-02 02:24:31	applicative	or well-spirited or something
2013-09-02 02:24:46	chrishart_	@pl \x -> y . f x
2013-09-02 02:24:46	lambdabot	(y .) . f
2013-09-02 02:24:46	applicative	the eckman hilton clock is the best
2013-09-02 02:24:54	augur_	tikhon: edsko's map is best
2013-09-02 02:24:59	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 02:25:15	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 02:25:23	augur_	https://www.scss.tcd.ie/Edsko.de.Vries/ct/catsters/linear.php
2013-09-02 02:26:17	augur_	adjunctions were another beast of a concept for me
2013-09-02 02:26:29	augur_	im still not sure i understand them, but
2013-09-02 02:26:32	-->	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has joined #haskell
2013-09-02 02:26:47	augur_	bootstrapping my way into categorical logic helped a bit there, oddly
2013-09-02 02:27:42	applicative	just the first 10 of http://www.youtube.com/watch?v=Rjdo-RWQVIY give the spirit of the thing tikhon
2013-09-02 02:27:47	applicative	10 seconds rather
2013-09-02 02:28:17	augur_	TODAY we're going to talk about ~
2013-09-02 02:28:28	monochrom	MONADS!
2013-09-02 02:28:30	augur_	i think im going to try to start each class with that
2013-09-02 02:28:50	applicative	okay, up to the gasp at 23 sec.
2013-09-02 02:29:01	monochrom	hehe
2013-09-02 02:29:18	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 245 seconds)
2013-09-02 02:29:23	augur_	eugenia is also obsessed with baking
2013-09-02 02:29:30	-->	startling (~startling@162-225-240-170.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-02 02:29:33	augur_	she did a whole video on how to make the perfect scone
2013-09-02 02:29:37	augur_	and developed a FORMULA!
2013-09-02 02:30:07	applicative	Chang's Scone Lemma has been widely applied
2013-09-02 02:30:10	augur_	shes silly
2013-09-02 02:30:14	augur_	Cheng*
2013-09-02 02:30:20	applicative	CHeng's
2013-09-02 02:30:23	pharaun	edwardk: just declaw those folks or put one of these on them -> http://catgroomingcharlotte.com/wp-content/uploads/2011/09/declaw-soft-paws-claws.jpg
2013-09-02 02:30:47	<--	jevankovich (62d1e6dc@gateway/web/freenode/ip.98.209.230.220) has quit (Ping timeout: 250 seconds)
2013-09-02 02:30:58	edwardk	pharaun: putting those on seems like a great way to lose a lot of blood. plus i think augur has teeth ;)
2013-09-02 02:31:13	augur_	om nom nom
2013-09-02 02:31:36	applicative	oh, what happened to the om nom combinators. i confess i found them irresistible
2013-09-02 02:31:40	Rarrikins	Man, chalkboards are the work of Satan.
2013-09-02 02:31:46	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-02 02:31:53	augur_	chalk boards are the One True Way to explain things
2013-09-02 02:31:54	edwardk	augur_: i still pretty much start all my blog posts that way. "today i want to talk about … "
2013-09-02 02:32:01	applicative	oh i love teaching with old chalkboards and big railroad chalk
2013-09-02 02:32:11	applicative	i feel like i earned my pay covered in dust
2013-09-02 02:32:16	-->	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has joined #haskell
2013-09-02 02:32:18	Rarrikins	I hate the feel of chalk, so watching this video is reminding me of it.
2013-09-02 02:32:19	augur_	i want to find good sidewalk chalk sized chalk
2013-09-02 02:32:30	augur_	like the stuff used in the SICP videos
2013-09-02 02:32:36	augur_	need a nice big eraser too
2013-09-02 02:32:54	pharaun	edwardk: http://2.bp.blogspot.com/_U72qXmrHPj4/SnQDlmrN7-I/AAAAAAAAAbQ/zvBtqjLEaGg/s400/chainglove.jpg which is why these exists :)
2013-09-02 02:33:02	applicative	sidewalk chalk is bad for boards augur look up 'railroad chalk' (I think) i made my deparment get a 10 year supply
2013-09-02 02:33:08	<--	slobo (~slobo@mx1.svarog.ca) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-02 02:33:12	augur_	applicative: ill give it a look!
2013-09-02 02:33:17	pharaun	applicative: there's different kind of chalks?
2013-09-02 02:33:20	augur_	sidewalk chalk doesnt erase. its horrible. :(
2013-09-02 02:33:20	-->	xpika (~jrg@1.154.54.83) has joined #haskell
2013-09-02 02:33:22	danharaj	yes
2013-09-02 02:33:24	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 02:33:34	danharaj	I learned the difference between chalks when I got my blackboard a few years ago
2013-09-02 02:33:52	applicative	augur_: yes, don't use it, use the stuff it's a cheap imitation of
2013-09-02 02:33:56	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 02:33:57	dpwright	I have a concurrency situation I'm working with, and I'm wondering which of haskell's various concurrency constructs are the best fit for this situation
2013-09-02 02:34:06	augur_	applicative: hah
2013-09-02 02:34:52	applicative	http://www.amazon.com/Dixon-88819-White-Railroad-Chalk/dp/B004ZWTW1M/ref=pd_sim_sbs_op_1
2013-09-02 02:34:56	-->	slobo (~slobo@mx1.svarog.ca) has joined #haskell
2013-09-02 02:35:13	pharaun	oh neat
2013-09-02 02:35:19	applicative	note the commentator says *this is what Harvard uses* so it must be good ;)
2013-09-02 02:35:23	dpwright	I'm using the FFI to interface with a piece of hardware using a C library provided by the vendor, and essentially there are three threads per unit: one which polls the hardware for new events, one which polls the hardware for new log output, and the last one reads commands from the user, passes them to the hardware, waits for returned log output, and passes that back out to the user
2013-09-02 02:35:27	pharaun	applicative: ha
2013-09-02 02:35:30	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 256 seconds)
2013-09-02 02:35:46	augur_	applicative: i think thats what they use at MIT too
2013-09-02 02:35:56	pharaun	 they still use blackboards there?
2013-09-02 02:36:07	pharaun	i thought most folks were on whiteboards now days, my univ were all whiteboard
2013-09-02 02:36:10	augur_	everyone still uses blackboards!
2013-09-02 02:36:18	augur_	the only people who use whiteboards are weirdos
2013-09-02 02:36:37	dpwright	the thing is, one of the events that might happen on the event thread is DISCONNECT, and if that event is fired I want to be able to shut down the other threads before they have the opportunity to call any of the C functions that interface with the hardware (because their handles are no longer valid after a DISCONNECT event)
2013-09-02 02:36:41	applicative	i reject Satan and all his works and all his whiteboards and powerpoints
2013-09-02 02:36:46	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 02:36:48	Rarrikins	Lies!
2013-09-02 02:36:55	-->	Shou (~sister@81.191.185.181) has joined #haskell
2013-09-02 02:37:47	dpwright	the simplest thing seems to be just store the other thread ids on the event thread, and use them to kill those threads as soon as I get the event -- but I'm a little concerned as to what would happen if those threads were in the middle of an FFI call when I did that, what would happen to the memory, etc...
2013-09-02 02:38:03	tikhon	at the last place I worked, they just treated their walls so you could use them as whiteboards; it was pretty nice
2013-09-02 02:38:18	augur_	tikhon: its easy to do that
2013-09-02 02:38:26	augur_	you just buy a bunch of plastic and tape it up!
2013-09-02 02:38:56	<--	slobo (~slobo@mx1.svarog.ca) has quit (Client Quit)
2013-09-02 02:39:06	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-02 02:39:06	augur_	i once made an ad hoc whiteboard with some plexiglass and a piece of paper
2013-09-02 02:39:18	-->	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has joined #haskell
2013-09-02 02:39:20	-->	slobo (~slobo@mx1.svarog.ca) has joined #haskell
2013-09-02 02:39:27	--	Taslem is now known as Guest93292
2013-09-02 02:39:34	<--	wolfnn (~wolfnn@90.24.131.251) has quit (Read error: Operation timed out)
2013-09-02 02:39:45	<--	Guest93292 (320472e7@gateway/web/freenode/ip.50.4.114.231) has left #haskell
2013-09-02 02:39:56	applicative	where's the FFI masters?
2013-09-02 02:40:03	dpwright	does anybody have any insight into what is a good construct to use in this sort of situation?  Killing the thread / making use of exceptions seems somewhat messy, but I guess it is simple...
2013-09-02 02:40:14	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-02 02:43:18	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 02:44:19	<--	chatsiri_ (~chatsiri_@14.207.185.164) has quit (Ping timeout: 260 seconds)
2013-09-02 02:45:06	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-02 02:45:33	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-02 02:47:06	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-02 02:47:46	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-02 02:47:49	-->	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has joined #haskell
2013-09-02 02:48:20	mm_freak_	dpwright: that raises one question
2013-09-02 02:49:00	-->	mm_freak (~milch@p5DD05CE2.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 02:49:05	mm_freak	dpwright: that raises one question
2013-09-02 02:49:11	dpwright	mm_freak: What's that?
2013-09-02 02:49:22	mm_freak	let's call the event thread E, log thread L and UI thread I
2013-09-02 02:49:42	mm_freak	a disconnect event occurs, but L is still reading…  what happens?
2013-09-02 02:50:18	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-02 02:50:33	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-02 02:50:53	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 02:51:06	<--	zomg (~jani@jjh.fi) has quit (Ping timeout: 264 seconds)
2013-09-02 02:51:14	-->	zomg (~jani@jjh.fi) has joined #haskell
2013-09-02 02:51:21	Rarrikins	zomg!
2013-09-02 02:51:31	dpwright	mm_freak: That is a good question.  I presume the library I'm interfacing with is thread-safe to some degree, since both the pollEvent and pollLog functions are blocking, so it seems there's no other way to use it than to put them on multiple threads
2013-09-02 02:51:38	--	zomg is now known as Guest62960
2013-09-02 02:51:42	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-02 02:51:43	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-02 02:52:00	dpwright	pollLog can return an error code, so my guess is that is what would happen, but the documentation isn't that great so I can't be sure without trying it out...
2013-09-02 02:52:00	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 02:52:18	<--	ofan (~ofan@unaffiliated/ofan) has quit (Ping timeout: 264 seconds)
2013-09-02 02:52:19	mm_freak	dpwright: so you should try it…  if you get an error, you can make L shut itself down
2013-09-02 02:52:22	dpwright	(it just says "returns a negative number if there's an error, otherwise it returns the length of the log" sort of thing
2013-09-02 02:52:53	<--	mm_freak_ (~milch@p5DD0446B.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2013-09-02 02:52:54	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Ping timeout: 264 seconds)
2013-09-02 02:52:55	mm_freak	in any case, this seems to be an actor application
2013-09-02 02:53:08	<--	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has quit (Remote host closed the connection)
2013-09-02 02:53:19	<--	poppingtonic (~poppingto@212.49.88.108) has quit (Remote host closed the connection)
2013-09-02 02:53:26	dpwright	mm_freak: Actually yeah, if the other threads just return error codes in that case it's easy!
2013-09-02 02:53:28	-->	ofan (~ofan@unaffiliated/ofan) has joined #haskell
2013-09-02 02:53:36	-->	gpampara (~gpampara@174.136.1.66) has joined #haskell
2013-09-02 02:53:41	dpwright	I did wonder about making an erlang-style supervisor or something
2013-09-02 02:53:49	dpwright	but thought that might be overkill
2013-09-02 02:54:09	mm_freak	no, that's how i would do it
2013-09-02 02:54:14	mm_freak	STM makes this really easy
2013-09-02 02:54:49	<--	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has quit (Remote host closed the connection)
2013-09-02 02:55:08	-->	morvism (~morvism@c-65-96-168-135.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 02:55:20	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-02 02:55:58	mm_freak	if the UI reads from the terminal you have to do it that way anyway, because conceptually reads from a Handle are all blocking in haskell
2013-09-02 02:56:11	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-02 02:56:16	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-02 02:56:27	dpwright	right
2013-09-02 02:56:59	dpwright	yeah, I'm using STM channels to communicate between the UI (the actual UI) and the thread that handles sending commands / receiving data from the device
2013-09-02 02:57:06	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-02 02:57:33	mm_freak	you could also check out pipes-concurrency
2013-09-02 02:57:46	dpwright	ooh!
2013-09-02 02:57:50	mm_freak	it handles graceful shutdown for you
2013-09-02 02:58:07	dpwright	I'm using pipes-network for the UI (which is over TCP), so that might be a good fit
2013-09-02 02:58:33	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 268 seconds)
2013-09-02 02:58:55	joefiorini	is there a mostly defacto standard way to do secure password hashing in Haskell? looking at http://hackage.haskell.org/packages/archive/pwstore-fast/1.0/doc/html/Crypto-PasswordStore.html but want to make sure there isn't something more common first.
2013-09-02 02:59:04	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-02 02:59:15	mm_freak	joefiorini: that's the common library
2013-09-02 02:59:25	joefiorini	mm_freak: thanks!
2013-09-02 02:59:44	joefiorini	it was the first result on google, so I figured
2013-09-02 02:59:51	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-02 03:00:10	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-02 03:00:15	mm_freak	there are some lower level libraries for e.g. PBKDF2 or scrypt, but i suggest just using pwstore-fast
2013-09-02 03:00:52	joefiorini	sounds good to me
2013-09-02 03:00:56	<--	nilsi (~nilsi@183.245.65.242) has quit (Read error: Connection reset by peer)
2013-09-02 03:00:58	-->	zerowaitstate (~dwaites@75.23.43.147) has joined #haskell
2013-09-02 03:01:06	Rarrikins	joefiorini: There's also http://hackage.haskell.org/packages/archive/bcrypt/0.0.3/doc/html/Crypto-BCrypt.html if you like bcrypt.
2013-09-02 03:01:16	mm_freak	you don't like bcrypt
2013-09-02 03:01:24	roconnor	PBKDF2 / scrypt is key stretching which I suppose is a kind of hashing.
2013-09-02 03:01:24	<--	sansor_ (~yyetim@sat.ee.Princeton.EDU) has quit (Quit: leaving)
2013-09-02 03:01:26	-->	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 03:01:29	Rarrikins	Why don't you like bcrypt?
2013-09-02 03:01:52	-->	begriffs (~j@c-71-202-44-241.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 03:01:54	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-09-02 03:02:20	mm_freak	PBKDF2 has a security guarantee, scrypt quickly grows in circuit complexity when implemented in hardware
2013-09-02 03:02:25	mm_freak	bcrypt has neither of these features
2013-09-02 03:02:39	begriffs	Is it common for people on mac to use cabal to manage their packages?
2013-09-02 03:02:48	<--	guymann (~c@unaffiliated/guymann) has quit (Quit: exit(EXIT_FAILURE);)
2013-09-02 03:03:19	mm_freak	roconnor: hashing with salt and some computation time to slow down bruteforce attacks
2013-09-02 03:03:26	joefiorini	begriffs: I do, are you coming from another language/dev environment?
2013-09-02 03:03:35	geekosaur	macs are annoying enough to build stuff for that if you can get your haskell platform and packages from macports / homebrew, it's probably a good idea
2013-09-02 03:03:46	begriffs	joefiorini: I'm coming from Ruby and its gems. I've got homebrew.
2013-09-02 03:03:49	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-09-02 03:03:52	scaldwell	homebrew seems the most popular
2013-09-02 03:03:59	-->	guymann (~c@unaffiliated/guymann) has joined #haskell
2013-09-02 03:04:11	joefiorini	begriffs: I used homebrew to install ghc & haskell-platform, I think
2013-09-02 03:04:18	applicative	begriffs: yes, what is the alternative?
2013-09-02 03:04:23	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-02 03:04:36	joefiorini	begriffs: yeah, then I use cabal-dev to manage packaes
2013-09-02 03:04:37	<--	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 248 seconds)
2013-09-02 03:04:38	joefiorini	packages*
2013-09-02 03:04:46	applicative	begriffs: i oppose getting ghc/haskell platform from homebrew, but i think my grounds may be out of date
2013-09-02 03:04:50	roconnor	mm_freak: what is the security guarntee of PBKDF2?
2013-09-02 03:05:01	joefiorini	applicative: what are your grounds?
2013-09-02 03:05:11	<--	nilsi (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-09-02 03:05:24	mm_freak	roconnor: IIRC if the hash function is a PRF, PBKDF2 is also a PRF
2013-09-02 03:05:32	applicative	joefiorini: all attempts to get things linked to c-libraries were a torture.
2013-09-02 03:05:40	mm_freak	in other words, it is no weaker than the hash function used
2013-09-02 03:05:42	roconnor	PRF?
2013-09-02 03:05:49	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-09-02 03:05:50	mm_freak	pseudo-random function, a theoretical concept
2013-09-02 03:05:52	applicative	but maybe it works better now; in general homebrew+haskell seems to work better
2013-09-02 03:05:56	joefiorini	applicative: I haven't had that problem yet; I assume I've used SOMETHING that links to a C library
2013-09-02 03:05:59	begriffs	applicative I'm running into issues with cabal/hsenv. Tried erasing all my packages and starting again, but it's pretty weird. I'm working on a Yesod web app and doing cabal install is trying to load incompatible versions of things I think.
2013-09-02 03:06:13	<--	erisco (~erisco@198-91-210-150.cpe.distributel.net) has quit (Quit: Leaving)
2013-09-02 03:06:15	joefiorini	begriffs: try cabal-dev instead of hsenv
2013-09-02 03:06:19	roconnor	mm_freak: thanks
2013-09-02 03:06:25	joefiorini	the workflow will be build into cabal soon
2013-09-02 03:06:56	joefiorini	begriffs: I ran into that exact same problem, and switched to cabal-dev and haven't had it since
2013-09-02 03:07:03	 *	applicative in a fraudulent attempt at avant-guardism has been using cabal sandbox for a month or two
2013-09-02 03:07:03	begriffs	So just cabal install cabal-dev then cabal-dev install?
2013-09-02 03:07:06	mm_freak	roconnor: note that PRFs don't exist on a computer, but these guarantees are strong indicators that a higher order function on a secure hash function is itself a secure hash function
2013-09-02 03:07:11	joefiorini	begriffs: yep
2013-09-02 03:07:25	joefiorini	then you'll use cabal-dev instead of cabal
2013-09-02 03:07:36	begriffs	What is cabal-dev exactly? Vs cabal that is
2013-09-02 03:07:44	joefiorini	it installs deps locally
2013-09-02 03:07:50	roconnor	mm_freak: really?  Surely there is some interpretation where PRFs exist.
2013-09-02 03:07:51	Makoryu	begriffs: Package sandboxing
2013-09-02 03:07:53	joefiorini	kind like doing bundle install --path vendor/bundle
2013-09-02 03:08:07	mm_freak	roconnor: PRFs would need infinite storage
2013-09-02 03:08:14	<--	nexx (nexx@unaffiliated/xxen) has quit (Ping timeout: 240 seconds)
2013-09-02 03:08:23	joefiorini	only downside I've seen so far is I have to point runhaskell at my packages dir (runhaskell -package-db=cabal-dev/packages-7.6.3.conf src/Main.hs)
2013-09-02 03:09:00	joefiorini	and installs take longer since you have to install dependencies fresh in every project
2013-09-02 03:09:17	joefiorini	but it's not bad
2013-09-02 03:09:41	begriffs	joefiorini: I haven't seen runhaskell before. is that like ghc?
2013-09-02 03:10:14	joefiorini	begriffs: it's like an interpreted way of running your code, probably nice for one coming from ruby
2013-09-02 03:10:40	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-02 03:10:45	joefiorini	does runhaskell compile code or is it actually interpreted?
2013-09-02 03:11:00	begriffs	Do you use runhaskell rather than ghci?
2013-09-02 03:11:07	joefiorini	sometimes
2013-09-02 03:11:28	joefiorini	it's very nice coming from Ruby & JavaScript workflows
2013-09-02 03:11:50	Makoryu	Huh
2013-09-02 03:11:55	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-02 03:12:00	Makoryu	Can you do a hashbang trick
2013-09-02 03:12:02	Makoryu	With runhaskell
2013-09-02 03:12:06	joefiorini	but I can't say much beyond that, haven't gotten far enough into a project yet :)
2013-09-02 03:12:20	<--	nilsi (~nilsi@183.245.65.242) has quit (Ping timeout: 256 seconds)
2013-09-02 03:12:30	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-02 03:12:33	joefiorini	Makoryu: interesting question
2013-09-02 03:12:42	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-02 03:12:43	<--	zerowaitstate (~dwaites@75.23.43.147) has quit (Quit: Leaving)
2013-09-02 03:12:45	geekosaur	for your purposes it's interpreted. I think runhaskell specifically supports hashbang
2013-09-02 03:12:49	geekosaur	without a trick
2013-09-02 03:13:01	Makoryu	I'm gonna try that right now
2013-09-02 03:13:05	joefiorini	me too :)
2013-09-02 03:13:12	geekosaur	back before cabal-install it was not unusua for Setup.hs to start with a hashbang
2013-09-02 03:14:09	joefiorini	Makoryu: worked for me
2013-09-02 03:14:16	applicative	begriffs: http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html
2013-09-02 03:14:26	-->	Vicfred (~Vicfred@189.232.30.93) has joined #haskell
2013-09-02 03:14:31	applicative	begriffs http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html
2013-09-02 03:14:40	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-02 03:14:48	Makoryu	joefiorini: I told it to print "Hello, world" and it printed "SIE SIND DAS ESSEN UND WIR SIND DIE JÄGER"
2013-09-02 03:14:51	joefiorini	applicative: how would I know when 1.18 is released?
2013-09-02 03:14:54	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 264 seconds)
2013-09-02 03:14:56	Makoryu	I think my path is messed up
2013-09-02 03:15:02	joefiorini	Makoryu: you've got problems :)
2013-09-02 03:15:22	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 03:15:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-02 03:15:25	applicative	and to install tibbe has arranged this: cabal install http://johantibell.com/files/Cabal-1.18.0-rc2.tar.gz http://johantibell.com/files/cabal-install-1.18.0-rc2.tar.gz
2013-09-02 03:15:28	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-02 03:15:45	Makoryu	Ah, yes, that's how that got there
2013-09-02 03:16:06	begriffs	applicative: so you would recommend using cabal sandboxes rather than cabal-dev?
2013-09-02 03:16:27	-->	zRecursive (~czsq888@171.214.172.29) has joined #haskell
2013-09-02 03:16:38	applicative	begriffs: I only had minimal experience with cabal-dev but i think the answer has to be yes.
2013-09-02 03:16:41	<--	morvism (~morvism@c-65-96-168-135.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-02 03:16:59	joefiorini	begriffs: applicative: I'll try it too
2013-09-02 03:17:55	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-09-02 03:17:55	--	augur_ is now known as augur
2013-09-02 03:18:12	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-09-02 03:18:21	-->	nabilhas` (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-02 03:18:32	-->	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has joined #haskell
2013-09-02 03:18:46	<--	nabilhas` (~user@ool-4a582b9e.dyn.optonline.net) has quit (Client Quit)
2013-09-02 03:18:54	applicative	it's amazing really
2013-09-02 03:18:54	applicative	i upgraded yesterday or the day before to the rc2 version, and 'cabal repl' is too wonderful
2013-09-02 03:18:54	applicative	it could use more tutorials, but i never found a decent one for cabal dev and Mikhail G has said a fair amount on his blog
2013-09-02 03:18:54	applicative	but i think cabal dev already had nice emacs integration and stuff so I cant profess to weigh the imponderables
2013-09-02 03:19:02	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-02 03:19:37	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-02 03:19:42	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-02 03:20:03	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-02 03:20:05	joefiorini	what's cabal repl do? Launch ghci?
2013-09-02 03:22:02	-->	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has joined #haskell
2013-09-02 03:23:50	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-02 03:23:58	Fuuzetsu	it's like cabal-dev ghci
2013-09-02 03:23:58	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 03:24:14	<--	zacts (~zacts@unaffiliated/zacts) has quit (Read error: Connection reset by peer)
2013-09-02 03:24:15	Fuuzetsu	It launches GHCi confined to your sandbox (cabal sandbox init)
2013-09-02 03:24:30	Fuuzetsu	Well, confined is not the right term…
2013-09-02 03:24:45	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-02 03:25:02	<--	wakIII (~wakIII@63.252.64.209) has quit (Ping timeout: 240 seconds)
2013-09-02 03:25:24	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 03:27:30	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-02 03:27:32	joelteon	@pl \x -> f x (g x)
2013-09-02 03:27:32	lambdabot	ap f g
2013-09-02 03:27:36	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Client Quit)
2013-09-02 03:27:39	joelteon	@pl \x -> f (g x) x
2013-09-02 03:27:39	lambdabot	f =<< g
2013-09-02 03:27:42	<--	hashcat (~chatzilla@27.242.178.241) has quit (Ping timeout: 264 seconds)
2013-09-02 03:27:43	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-02 03:27:51	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-02 03:28:14	<--	Tritlo (~Tritlo@46.182.185.55) has quit (Ping timeout: 240 seconds)
2013-09-02 03:28:16	joefiorini	applicative: thanks for the links, installing to my sandbox now
2013-09-02 03:28:59	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-02 03:29:32	applicative	oh, hope it works; it was as simple as tibbe's command yesterday
2013-09-02 03:30:06	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-02 03:30:10	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 03:32:36	-->	gpampara_off (~gpampara@174.136.1.66) has joined #haskell
2013-09-02 03:32:38	--	gpampara_off is now known as gpampara
2013-09-02 03:32:41	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 03:33:14	-->	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-02 03:34:14	begriffs	applicative: after installing cabal 1.18 it still reports being cabal-install version 1.16.0.2
2013-09-02 03:34:24	begriffs	Do I have to change my path?
2013-09-02 03:34:26	applicative	begriffs: yes
2013-09-02 03:34:54	begriffs	Not sure where to find it.
2013-09-02 03:35:04	applicative	if the old cabal-install was in /usr/bin . the new one is in ~/.cabal/bin or wherever they go on your machine
2013-09-02 03:35:08	applicative	what os are you using?
2013-09-02 03:35:11	begriffs	mac
2013-09-02 03:35:25	<--	mcw09 (~jack@2602:306:32a1:4810:4d07:259f:73b7:cc20) has quit (Ping timeout: 245 seconds)
2013-09-02 03:35:28	-->	bigos (187225e7@gateway/web/freenode/ip.24.114.37.231) has joined #haskell
2013-09-02 03:35:36	begriffs	Ohh, found it: ~/Library/Haskell/ghc-7.6.3/lib/cabal-install-1.18.0/bin
2013-09-02 03:35:48	Fuuzetsu	You should be able to download it from git and then ‘cabal install Cabal/ cabal-install/’ it.
2013-09-02 03:35:56	Fuuzetsu	Ah, there you go then.
2013-09-02 03:36:00	applicative	but it will also be in  ~/Library/Haskell/ghc-7.6.3/bin or something
2013-09-02 03:36:08	<--	RageOfThou (~RageOfTho@77.221.25.95) has quit (Ping timeout: 256 seconds)
2013-09-02 03:36:19	begriffs	afk. Thanks for the help guys.
2013-09-02 03:36:45	<--	begriffs (~j@c-71-202-44-241.hsd1.ca.comcast.net) has quit (Quit: begriffs)
2013-09-02 03:37:09	applicative	the haskell platform for mac decided to follow the method used for python and so on, so it's not in step with linuxes anymore where everything is in .cabal/blah in your home directory
2013-09-02 03:37:31	-->	charliesome (~root@202-129-124-155.perm.iinet.net.au) has joined #haskell
2013-09-02 03:38:43	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Remote host closed the connection)
2013-09-02 03:38:56	<--	m_ke (~m_ke@cpe-108-182-20-11.nyc.res.rr.com) has quit (Quit: m_ke)
2013-09-02 03:39:20	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-09-02 03:39:24	-->	drbean (~drbean@113.196.171.151) has joined #haskell
2013-09-02 03:40:00	-->	alcuadrado (~alcuadrad@unaffiliated/alcuadrado) has joined #haskell
2013-09-02 03:40:17	alcuadrado	is import Data.List or import List correct?
2013-09-02 03:40:27	Fuuzetsu	Data.List
2013-09-02 03:41:05	applicative	import List is an older style that can only be used with unpleasant further adjustments
2013-09-02 03:41:36	-->	hashcat (~chatzilla@27.243.21.241) has joined #haskell
2013-09-02 03:41:56	alcuadrado	good to know
2013-09-02 03:42:05	alcuadrado	that's exactly what I needed
2013-09-02 03:42:19	alcuadrado	a teacher gave me some code full of import List
2013-09-02 03:42:26	alcuadrado	and stuff like that
2013-09-02 03:42:36	alcuadrado	now I had an argument to complaint about that :P
2013-09-02 03:42:36	applicative	its a little more complicated with old code that has import System and import IO
2013-09-02 03:42:53	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Remote host closed the connection)
2013-09-02 03:43:16	Fuuzetsu	I bet he has to use Hugs.
2013-09-02 03:43:17	alcuadrado	but any modern implementation would understand import Data.List, right?
2013-09-02 03:43:22	applicative	yes.
2013-09-02 03:43:26	alcuadrado	no I don't have to
2013-09-02 03:43:31	joefiorini	with cabal 1.18, is there an easy way to use runhaskell without manually specifying -package-db path?
2013-09-02 03:43:36	alcuadrado	we can choose ghc
2013-09-02 03:43:37	applicative	even Hugs permits it, but it will except List without a hitch.
2013-09-02 03:43:43	applicative	accept rather
2013-09-02 03:43:46	alcuadrado	probably the teacher uses Hugs
2013-09-02 03:44:26	applicative	you can do it with ghc too, but you need to specify 'haskell98' which i woulnd't know how to do in a complicated scenario
2013-09-02 03:45:02	<--	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-09-02 03:45:03	alcuadrado	I fixed all the imports already
2013-09-02 03:45:18	alcuadrado	I just needed a point for doing that
2013-09-02 03:45:28	applicative	Monad goes to Control.Monad , IO to System.IO , System is a little more broken up I think.
2013-09-02 03:45:30	-->	dimday (~amcvega@50.23.115.111) has joined #haskell
2013-09-02 03:45:47	<--	scaldwell (~croyd@99-127-54-64.lightspeed.austtx.sbcglobal.net) has left #haskell
2013-09-02 03:45:52	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-02 03:46:13	applicative	if you have ghc you have docs somewhere that link all the base libraries, it'll be pretty clear if you find something else like this
2013-09-02 03:46:15	-->	croyd (~croyd@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-02 03:46:49	applicative	oh here they are http://www.haskell.org/ghc/docs/latest/html/libraries/base/
2013-09-02 03:47:17	applicative	Foreign is still called Foreign, that's why I'm so afraid of it
2013-09-02 03:48:08	-->	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has joined #haskell
2013-09-02 03:48:16	alcuadrado	haha thanks
2013-09-02 03:48:49	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 03:50:46	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 03:51:04	-->	soulofpeace (~soulofpea@119.75.11.250) has joined #haskell
2013-09-02 03:51:18	Kelet	Would it be reasonable to say that Turing Machines are to imperative languages as Lambda Calculus is to functional languages?
2013-09-02 03:51:34	<--	drbean (~drbean@113.196.171.151) has quit (Quit: ZNC - http://znc.in)
2013-09-02 03:51:34	Kelet	Or is that overgeneralizing too far
2013-09-02 03:51:54	Fuuzetsu	That's certainly the first time I hear it put this way…
2013-09-02 03:52:00	<--	apaku (~apaku@x2f100ab.dyn.telefonica.de) has quit (Ping timeout: 256 seconds)
2013-09-02 03:52:06	 *	hackagebot diagrams-haddock 0.1.2.0 - Preprocessor for embedding diagrams in Haddock documentation  http://hackage.haskell.org/package/diagrams-haddock-0.1.2.0 (BrentYorgey)
2013-09-02 03:52:20	applicative	theres something in it, isn't there, as long as its stated as a wilful blur
2013-09-02 03:52:27	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 03:52:34	applicative	the Pope of my Church is Alonzo!
2013-09-02 03:52:41	byorgey	Kelet: yes, I think it is reasonable.
2013-09-02 03:53:01	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-02 03:53:50	-->	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has joined #haskell
2013-09-02 03:54:05	-->	apaku (~apaku@x2f0a0c6.dyn.telefonica.de) has joined #haskell
2013-09-02 03:54:50	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-02 03:57:43	-->	poppingtonic (~poppingto@212.49.88.108) has joined #haskell
2013-09-02 03:58:03	<--	luksow (~luke@apn-95-41-101-74.dynamic.gprs.plus.pl) has quit (Ping timeout: 260 seconds)
2013-09-02 03:58:47	<--	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-02 04:00:13	--	mrowe is now known as mrowe_away
2013-09-02 04:00:23	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-02 04:01:10	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-02 04:04:28	--	mrowe_away is now known as mrowe
2013-09-02 04:05:30	<--	ivanacostarubio (~ivan@189.221.144.10.cable.dyn.cableonline.com.mx) has quit (Quit: ivanacostarubio)
2013-09-02 04:06:56	<--	timemage (~user@unaffiliated/timemage) has quit (Disconnected by services)
2013-09-02 04:07:05	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-02 04:07:58	-->	ivanacostarubio (~ivan@189.221.144.10.cable.dyn.cableonline.com.mx) has joined #haskell
2013-09-02 04:09:09	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (Read error: No route to host)
2013-09-02 04:09:22	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-09-02 04:09:55	<--	pkrnj (~pkrnj@bas2-montreal47-1279446954.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-09-02 04:09:58	-->	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has joined #haskell
2013-09-02 04:10:42	-->	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has joined #haskell
2013-09-02 04:10:59	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-09-02 04:11:38	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-02 04:11:52	<--	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has quit (Client Quit)
2013-09-02 04:13:18	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-02 04:14:45	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-02 04:15:15	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-09-02 04:15:26	<--	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has quit (Ping timeout: 245 seconds)
2013-09-02 04:18:36	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-02 04:19:20	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Ping timeout: 268 seconds)
2013-09-02 04:19:58	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-02 04:21:06	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-02 04:21:16	-->	aupiff_ (~rib@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-02 04:21:39	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-02 04:21:39	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-02 04:21:40	<--	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has quit (Quit: miclorb)
2013-09-02 04:21:50	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-02 04:22:16	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 04:22:32	-->	vmesons (~quassel@128.224.252.2) has joined #haskell
2013-09-02 04:22:53	<--	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-09-02 04:23:33	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-09-02 04:24:18	<--	vmeson (~quassel@128.224.252.2) has quit (Ping timeout: 276 seconds)
2013-09-02 04:25:14	<--	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has quit (Quit: begriffs)
2013-09-02 04:25:46	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-02 04:26:49	-->	xl (~xl@123.113.159.146) has joined #haskell
2013-09-02 04:26:52	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-02 04:27:53	-->	tyfighter (~tyfighter@c-71-202-65-83.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 04:28:28	<--	vmesons (~quassel@128.224.252.2) has quit (Ping timeout: 245 seconds)
2013-09-02 04:29:00	-->	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has joined #haskell
2013-09-02 04:29:15	<--	timemage (~user@unaffiliated/timemage) has quit (Quit: .)
2013-09-02 04:29:36	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-02 04:29:43	lpaste	gfredericks pasted “gfredericks' config” at http://lpaste.net/92421
2013-09-02 04:30:44	heatsink	So I'm reading the gnuplot documentation
2013-09-02 04:30:53	heatsink	and it's amazing how versatile this type T is
2013-09-02 04:31:29	-->	amosr (~amos@149.171.231.162) has joined #haskell
2013-09-02 04:32:43	mietek	@hoogle Int -> [a] -> [[a]]
2013-09-02 04:32:43	lambdabot	Prelude drop :: Int -> [a] -> [a]
2013-09-02 04:32:44	lambdabot	Data.List drop :: Int -> [a] -> [a]
2013-09-02 04:32:44	lambdabot	Prelude take :: Int -> [a] -> [a]
2013-09-02 04:32:51	mietek	@hoogle chunks
2013-09-02 04:32:51	lambdabot	package chunks
2013-09-02 04:32:51	lambdabot	Data.Text chunksOf :: Int -> Text -> [Text]
2013-09-02 04:32:52	lambdabot	Data.Text.Lazy chunksOf :: Int64 -> Text -> [Text]
2013-09-02 04:33:04	mietek	Where was the generic chunks function?
2013-09-02 04:34:22	heatsink	Data.List.Split
2013-09-02 04:34:42	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 264 seconds)
2013-09-02 04:35:19	<--	darthdeu (~darthdeus@194.228.13.148) has quit (Quit: Leaving...)
2013-09-02 04:35:27	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-02 04:35:33	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 04:35:40	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 04:37:06	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-02 04:37:18	<--	timemage (~user@unaffiliated/timemage) has quit (Ping timeout: 264 seconds)
2013-09-02 04:37:45	<--	aupiff (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has quit (Quit: leaving)
2013-09-02 04:39:32	mstksg	is persistent's "update" unsafe?  what happens when my data store rejects an update to a unique field?
2013-09-02 04:40:03	-->	mcw09 (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-02 04:40:12	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 04:40:18	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 04:40:37	-->	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 04:42:22	-->	vmeson (~quassel@128.224.252.2) has joined #haskell
2013-09-02 04:42:37	<--	chrishart_ (18065c30@gateway/web/freenode/ip.24.6.92.48) has quit (Quit: Page closed)
2013-09-02 04:42:48	<--	chrishart (18065c30@gateway/web/freenode/ip.24.6.92.48) has quit (Quit: Page closed)
2013-09-02 04:44:06	Ghoul_	I'm getting a bit confused with short circuiting in foldr
2013-09-02 04:44:17	meretrix	mstksg: I believe it throws an exception, which you can choose to handle.
2013-09-02 04:44:52	Ghoul_	hmm, nevermind. I had a question but I don't really anymore
2013-09-02 04:44:55	-->	bennylope (~bennylope@li323-29.members.linode.com) has joined #haskell
2013-09-02 04:45:04	mstksg	meretrix: ah, thanks.  i guess there's no built in updateUnique that returns a Maybe?
2013-09-02 04:45:42	-->	SrPx (~SrPx@177.133.128.167) has joined #haskell
2013-09-02 04:46:05	SrPx	Is there a way to code in Haskell using S-Expressions and macros?
2013-09-02 04:46:10	-->	chatsiri_ (~chatsiri_@158.108.142.164) has joined #haskell
2013-09-02 04:46:17	meretrix	mstksg: Not that I know of, but you could easily write your own Maybe wrapper.
2013-09-02 04:46:46	heatsink	SrPx, try Data.AttoLisp
2013-09-02 04:47:19	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-02 04:47:31	mietek	heatsink: thanks
2013-09-02 04:47:32	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-02 04:48:15	heatsink	@hoogle comparing
2013-09-02 04:48:15	lambdabot	Data.Ord comparing :: Ord a => (b -> a) -> b -> b -> Ordering
2013-09-02 04:49:31	SrPx	heaeh ok
2013-09-02 04:49:43	SrPx	heatsink: well ok. thanks!
2013-09-02 04:49:54	<--	mcw09 (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-02 04:50:16	<--	arke (~f2@bespin.org) has quit (Quit: Lost terminal)
2013-09-02 04:50:18	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-02 04:51:00	<--	amindfv (~user@pool-100-2-173-16.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-02 04:51:19	-->	mcw09 (~jack@2602:306:32a1:4810:4d07:259f:73b7:cc20) has joined #haskell
2013-09-02 04:51:36	mstksg	meretrix: do you think they would be looking for a patch?
2013-09-02 04:52:14	mstksg	i'm new to this whole open source culture thing, not sure what is proper ettiquette
2013-09-02 04:52:18	mstksg	or behavior
2013-09-02 04:52:41	<--	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-02 04:53:23	-->	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-02 04:53:28	startling	SrPx: there used to be something called "Liskell" but the domain has apparently expired and I bet it's bitrotted pretty badly.
2013-09-02 04:53:50	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-02 04:54:11	SrPx	that is an awesome name.
2013-09-02 04:54:35	startling	there's a paper: http://clemens.endorphin.org/ILC07-Liskell-draft.pdf
2013-09-02 04:54:59	<--	codesoup (~codesoup@76-10-180-45.dsl.teksavvy.com) has quit (Ping timeout: 260 seconds)
2013-09-02 04:55:29	<--	aupiff_ (~rib@c-68-41-44-228.hsd1.mi.comcast.net) has quit (Quit: leaving)
2013-09-02 04:55:53	-->	morvism (~morvism@c-65-96-168-135.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 04:56:04	meretrix	mstksg: Perhaps. The persistent packages are part of the yesod framework, so I would start by asking on the mailing list: https://groups.google.com/forum/#!forum/yesodweb
2013-09-02 04:56:18	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-02 04:56:33	meretrix	For smaller packages, I would just create a github issue or contact the maintainer by email.
2013-09-02 04:56:38	<--	mcw09 (~jack@2602:306:32a1:4810:4d07:259f:73b7:cc20) has quit (Ping timeout: 264 seconds)
2013-09-02 04:56:49	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 04:57:38	SrPx	startling: I was already reading and loving it
2013-09-02 04:57:40	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-02 04:57:42	<--	bennylope (~bennylope@li323-29.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-09-02 04:59:40	-->	darthdeus (~darthdeus@194.228.13.148) has joined #haskell
2013-09-02 04:59:53	mstksg	meretrix: thanks for the advice
2013-09-02 05:02:23	-->	codesoup (~codesoup@69-165-163-1.dsl.teksavvy.com) has joined #haskell
2013-09-02 05:03:02	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 05:03:07	-->	mcw09 (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-02 05:05:10	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-02 05:05:59	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-02 05:06:25	-->	tov (~tov@eecs-login.seas.harvard.edu) has joined #haskell
2013-09-02 05:06:26	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 05:06:41	<--	xymox (lechuck@unaffiliated/contempt) has quit (Ping timeout: 245 seconds)
2013-09-02 05:06:42	mm_freak	i'd like to see unionMap in Data.Set
2013-09-02 05:06:50	mm_freak	it corresponds to concatMap for lists
2013-09-02 05:06:56	-->	slack1256 (~slack@181-160-214-106.baf.movistar.cl) has joined #haskell
2013-09-02 05:06:59	-->	csakatoku (~csakatoku@em119-72-198-53.pool.e-mobile.ne.jp) has joined #haskell
2013-09-02 05:07:07	mm_freak	unionMap :: (Ord a, Ord b) => (a -> Set b) -> Set a -> Set b
2013-09-02 05:07:36	-->	Philonous_ (~Philonous@dslb-092-078-089-018.pools.arcor-ip.net) has joined #haskell
2013-09-02 05:07:48	<--	Dawgmatix (~user@pool-100-1-31-214.nwrknj.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-02 05:08:22	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-09-02 05:09:12	Ghoul_	@pl (\n -> snd p == n)
2013-09-02 05:09:13	lambdabot	(snd p ==)
2013-09-02 05:09:29	Ghoul_	@pl (\p -> snd p == n)
2013-09-02 05:09:32	lambdabot	flip ((==) . snd) n
2013-09-02 05:09:32	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-02 05:11:13	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 05:11:16	<--	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-09-02 05:11:45	<--	Philonous (~Philonous@dslb-178-005-055-079.pools.arcor-ip.net) has quit (Ping timeout: 268 seconds)
2013-09-02 05:11:50	Ghoul_	Tekmo: luv'ya and your work
2013-09-02 05:11:59	Tekmo	Thanks! :)
2013-09-02 05:12:02	-->	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has joined #haskell
2013-09-02 05:12:14	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 05:12:31	begriffs	Anyone ever have trouble installing crypto-random-0.0.4? I'm seeing the rror "no such instruction: `rdrand %rcx'"
2013-09-02 05:12:32	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 05:12:55	<--	morvism (~morvism@c-65-96-168-135.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 05:12:56	begriffs	Trying to install on OS X.
2013-09-02 05:13:59	<--	mcw09 (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-02 05:15:33	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2013-09-02 05:15:50	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-02 05:16:16	-->	generic (~generic@p57B2D5CE.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 05:17:05	Ghoul_	I need to optimize this list comprehension. Any ideas? [x * y | x <- [100..999], y <- [100..999], palin $ x * y]
2013-09-02 05:17:26	Ghoul_	I would like to be able to move the x * y into a common expression, but I can't figure out how.
2013-09-02 05:17:26	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 05:17:45	amosr	"z <- x * y" ?
2013-09-02 05:17:55	slack1256	this
2013-09-02 05:17:58	<--	zRecursive (~czsq888@171.214.172.29) has quit (Remote host closed the connection)
2013-09-02 05:18:05	Ghoul_	I thought I tried that, but I got a angry type error
2013-09-02 05:18:10	Ghoul_	I must've made a typo
2013-09-02 05:18:13	Makoryu	z <- [x * y]?
2013-09-02 05:18:28	amosr	oh right
2013-09-02 05:18:33	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 05:19:00	Ghoul_	that did the trick
2013-09-02 05:19:03	Ghoul_	thanks :)
2013-09-02 05:19:11	<--	shanse (~generic@p5798FCD0.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-02 05:19:12	--	generic is now known as shanse
2013-09-02 05:19:21	Makoryu	Ghoul_: I'm pretty sure most of the overhead there will be just churning through the lists, though, so there may be more work ahead of you
2013-09-02 05:19:25	Ghoul_	I'm unsure what constitutes which parts of the comprehension are lists or inner parts though
2013-09-02 05:19:37	Makoryu	What do you mean
2013-09-02 05:19:51	slack1256	I don't think saving a multiplication makes up for the costs of [x
2013-09-02 05:19:55	slack1256	I don't think saving a multiplication makes up for the costs of [x * y]
2013-09-02 05:20:05	scshunt	on top of that, shouldn't memoization take care of that anyway?
2013-09-02 05:20:18	Ghoul_	I can cut a multiplication out
2013-09-02 05:20:30	Ghoul_	but I cant wrap it around in my head
2013-09-02 05:20:36	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 05:20:46	slack1256	scshunt: there is no automatic memoization on haskell
2013-09-02 05:20:50	scshunt	Ghoul_: what do you mean you're unsure about what?
2013-09-02 05:21:05	tikhon	scshunt: GHC won't memoize x * y like that
2013-09-02 05:21:11	Tekmo	Note that z <- [x * y] is the same thing as let z = x * y
2013-09-02 05:21:12	Ghoul_	Yes, I'm unsure which parts of a list comprehension are lists and which parts are values
2013-09-02 05:21:13	Ghoul_	like
2013-09-02 05:21:14	amosr	if it's not being fused away, try data.vector, or write it as a recursive loop
2013-09-02 05:21:19	Ghoul_	[z | x <- [100..999], y <- [100..999], z <- [x * y], palin z]
2013-09-02 05:21:29	Tekmo	Can't you just write `let z = x * y`?
2013-09-02 05:21:42	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-02 05:21:43	Ghoul_	the `palin z` part operates with my values, but the z <- part errors out unless its a list
2013-09-02 05:21:46	-->	mrsolo_ (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 05:21:47	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-02 05:21:57	<--	bigos (187225e7@gateway/web/freenode/ip.24.114.37.231) has quit (Ping timeout: 250 seconds)
2013-09-02 05:22:00	<--	mrsolo_ (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-02 05:22:00	roboguy_	if ghc automatically memoized everything that would use a ton of memory
2013-09-02 05:22:09	Ghoul_	That didn't make sense.. sorry. Forget it, thanks for the help :)
2013-09-02 05:22:20	Tekmo	> [ z | x <- [1..3], y <- [1..3], let z = x * y, z < 5]
2013-09-02 05:22:21	lambdabot	  [1,2,3,2,4,3]
2013-09-02 05:22:28	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-02 05:22:33	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-09-02 05:22:35	Ghoul_	o-O didn't know you could do  that
2013-09-02 05:22:38	-->	mrsolo_ (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 05:22:44	tikhon	Tekmo: I suspect people don't guess that you can use a let statement inside a list comprehension
2013-09-02 05:23:07	Tekmo	The easy way to remember this is that a list comprehension is (basically) the same thing as the list monad
2013-09-02 05:23:16	tikhon	In general, I've found Haskell syntax allows me to do things that I assumed it wouldn't—it's more thorough and uniform than I expected
2013-09-02 05:23:23	Tekmo	So you can use a `let` within it the same way you would within a `do` block
2013-09-02 05:23:32	Tekmo	It's equivalent to:
2013-09-02 05:23:33	Ghoul_	cool!
2013-09-02 05:23:49	Tekmo	do { x <- [1..3]; y <- [1..3]; let z = x * y; guard (z < 5); return z }
2013-09-02 05:24:18	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 05:24:22	<--	lq (~user@115.238.153.243) has quit (Ping timeout: 256 seconds)
2013-09-02 05:24:25	Tekmo	> do { x <- [1..3]; y <- [1..3]; let z = x * y; guard (z < 5); return z }
2013-09-02 05:24:26	lambdabot	  <hint>:1:60: parse error on input `;'
2013-09-02 05:24:43	<--	roconnor (~roconnor@e120-pool-d89a7fdd.brdbnd.voicenetwork.ca) has quit (Ping timeout: 246 seconds)
2013-09-02 05:24:49	Tekmo	> do { x <- [1..3]; y <- [1..3]; let z = x * y; guard (z < 5); return z; }
2013-09-02 05:24:50	lambdabot	  <hint>:1:60: parse error on input `;'
2013-09-02 05:24:55	Tekmo	Hmm
2013-09-02 05:25:14	Ghoul_	odd.
2013-09-02 05:25:18	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-02 05:25:58	Tekmo	> do { x <- [1..3]; y <- [1..3]; let { z = x * y }; guard (z < 5); return z }
2013-09-02 05:25:59	lambdabot	  [1,2,3,2,4,3]
2013-09-02 05:26:00	slack1256	do { x <- [1..3]; y <- [1..3]; let z = x * y; guard (z < 5); return z }
2013-09-02 05:26:05	-->	otto_s (~user@cotb-d9ba9aa2.pool.mediaWays.net) has joined #haskell
2013-09-02 05:26:11	Tekmo	It needed brackets around the `let` for some reason
2013-09-02 05:26:41	scshunt	where "some reason" is that they are necessary in inline code?
2013-09-02 05:26:48	Tekmo	Yeah
2013-09-02 05:26:59	Tekmo	It can't know that the next statements aren't part of the let block
2013-09-02 05:27:23	slack1256	do { x <- [1..3]; y <- [1..3]; let {z = x * y; hommie = 5}; guard (z < 5); return z }
2013-09-02 05:28:10	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-02 05:28:17	slack1256	> do { x <- [1..3]; y <- [1..3]; let {z = x * y; hommie = 5}; guard (z < 5); return z }
2013-09-02 05:28:18	lambdabot	  [1,2,3,2,4,3]
2013-09-02 05:28:48	<--	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has quit (Quit: begriffs)
2013-09-02 05:28:59	<--	slack1256 (~slack@181-160-214-106.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-02 05:29:31	<--	otto_s_ (~user@cotb-4db35f40.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-09-02 05:30:05	Ghoul_	Anyone who cares may find the final optimized expression interesting
2013-09-02 05:30:06	Ghoul_	[z | x <- [100..999], y <- [x..999], let z = x * y, palin z]
2013-09-02 05:30:21	Ghoul_	y <- [x..999] took a bit of thinking to do :P
2013-09-02 05:30:52	Tekmo	Is this from Project Euler?
2013-09-02 05:31:00	Ghoul_	heh
2013-09-02 05:31:03	Ghoul_	yes, its #4
2013-09-02 05:31:04	Tekmo	:)
2013-09-02 05:31:26	-->	aupiff (~rib@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-02 05:31:36	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-09-02 05:31:46	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-02 05:31:54	Tekmo	The nice thing about project Euler is that it teaches you that you can optimize a problem a whole lot just by spending more time thinking about it
2013-09-02 05:32:13	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 05:32:19	Ghoul_	my solution http://lpaste.net/7557688951012589568
2013-09-02 05:32:35	Ghoul_	and yes, I spend more time optimizing my thing to get under the "1 second rule" than solving the problem :)
2013-09-02 05:32:47	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-09-02 05:33:04	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-09-02 05:33:13	Ghoul_	laziness makes solving P.E so easy
2013-09-02 05:33:44	Tekmo	It also makes memoization really easy, too
2013-09-02 05:33:53	tikhon	1 second? I thought the rule was 1 minute...
2013-09-02 05:33:58	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 05:33:58	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-02 05:34:08	Ghoul_	heh, I can't imagine how anyone would do 415 in a second
2013-09-02 05:34:13	Ghoul_	you're probably right
2013-09-02 05:34:23	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-02 05:34:37	Tekmo	Actually, I think 415 is doable in a second
2013-09-02 05:34:39	Hodapp	that's a point that I sometimes cannot get across to people who just want to use whatever language can push the fastest raw numbers
2013-09-02 05:34:40	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-02 05:35:28	Hodapp	if a language gives you a clearer view of a problem, you might be able to see some high-level optimizations that give order-of-magnitude improvements
2013-09-02 05:35:34	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 246 seconds)
2013-09-02 05:35:47	Ghoul_	Tekmo: really?
2013-09-02 05:35:49	Ghoul_	the titanic one?
2013-09-02 05:35:58	-->	scripty (~scripty@117.221.124.217) has joined #haskell
2013-09-02 05:35:59	Ghoul_	I made a solution with a friend and ours has been running on a VPS for 2 months now
2013-09-02 05:36:05	Cale	Ghoul_: btw, that implementation of palin is slower for me than  palin p = let s = show p in s == reverse s
2013-09-02 05:36:05	Tekmo	I'm not sure, but I don't see any obvious reason why not
2013-09-02 05:36:07	Ghoul_	we hope to get an answer soon..
2013-09-02 05:36:14	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-09-02 05:36:16	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Client Quit)
2013-09-02 05:36:23	Tekmo	Haha
2013-09-02 05:36:24	Ghoul_	Cale: :\ is it?
2013-09-02 05:36:28	Tekmo	It shouldn't take 2 months
2013-09-02 05:36:39	Tekmo	All the problems are designed to take seconds to compute
2013-09-02 05:37:02	Cale	Ghoul_: Your version takes ~0.22s, while the show/reverse version takes ~0.07s on my machine
2013-09-02 05:37:09	Cale	(when compiled with -O2)
2013-09-02 05:37:11	Ghoul_	aw
2013-09-02 05:37:15	-->	lcfrs_ (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 05:37:22	Ghoul_	Oh well
2013-09-02 05:37:27	Ghoul_	I tried not to touch the lexical stuff
2013-09-02 05:37:36	Ghoul_	I dont like dealing with lexical things, and that was my downfall here
2013-09-02 05:37:56	Cale	well, maybe we could approach it in a similar way
2013-09-02 05:38:45	<--	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has quit (Ping timeout: 245 seconds)
2013-09-02 05:38:49	Hodapp	why is "literate Haskell" not a concept I see elsewhere?
2013-09-02 05:39:02	Ghoul_	maybe if I took a log10 to find how many digits, and then split the number in 1 or 2 maths operations (if that's possible) and compared them
2013-09-02 05:39:15	tikhon	Hodapp: because elsewhere it's just "literate programming" :P
2013-09-02 05:39:46	tikhon	literate programming was originally invented by Knuth, I believe—quite a long time ago
2013-09-02 05:40:01	Hodapp	"Haskell is one of the few languages that provides native features to support literate programming. Haskell is one of the few languages that provides native features to support literate programming.", to quoth Haskellwiki
2013-09-02 05:40:03	tikhon	I've seen examples in other languages, but it never caught on
2013-09-02 05:40:18	heatsink	The documentation in the Gnuplot module is terrible.  Can someone suggest a tutorial or something?
2013-09-02 05:40:24	Hodapp	wait, why'd that paste twice? blah
2013-09-02 05:40:25	tikhon	Ah, well, there are some external tools you can use for other languages even if they don't support it natively
2013-09-02 05:40:28	heatsink	> must name every data type "T"
2013-09-02 05:40:28	<--	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has quit (Quit: The garbage collector got me)
2013-09-02 05:40:29	lambdabot	  <hint>:1:17: parse error on input `data'
2013-09-02 05:40:34	-->	kamatsu (~Adium@vampire.ertos.nicta.com.au) has joined #haskell
2013-09-02 05:40:47	Demos	honestly it adds another step to the build process and many people have found javadoc style documentation to be a little easer, that said the TeX source "book" is really quite something
2013-09-02 05:41:10	tikhon	with any decent build system, another step should not be a big issue
2013-09-02 05:41:17	Hodapp	well, with Javadoc style it's still code-that-contains-documentation, not the other way around
2013-09-02 05:41:21	tikhon	of course, I have never seen a "decent build system" in the wild...
2013-09-02 05:41:32	Cale	Ghoul_: if we define digits 0 = []; digits x = v : digits u where (u,v) = quotRem x 10 -- and use that instead of show, it takes ~0.14s
2013-09-02 05:41:37	Hodapp	I've used CMake, it is... well, a build system
2013-09-02 05:41:50	<--	mrsolo_ (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-02 05:41:52	<--	tiksa (~tiksa@93-87-107-94.dynamic.isp.telekom.rs) has quit (Quit: Pozdrav)
2013-09-02 05:41:54	Cale	Ghoul_: Given that show is probably highly optimised, that's not bad.
2013-09-02 05:42:09	Demos	cmake is the best build system I have ever used, that is not saying much
2013-09-02 05:42:17	Hodapp	what I'm used to at $day_jerb for a build system is Visual Studio 2008
2013-09-02 05:42:21	<--	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has quit (Quit: ihm1)
2013-09-02 05:42:26	Hodapp	where the fact that it can build at all is something of a miracle
2013-09-02 05:42:45	tikhon	The one I've spent the most time with was OMake; it was... not great.
2013-09-02 05:42:52	-->	kylcarte (~kcarter@66.165.63.38) has joined #haskell
2013-09-02 05:42:55	Hodapp	sneeze during a build, and you get errors about precompiled headers
2013-09-02 05:43:15	-->	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has joined #haskell
2013-09-02 05:43:20	Ghoul_	hmm
2013-09-02 05:43:26	Cale	Hodapp: I'm really not sure why other languages haven't picked up on the whole literate thing. It's really convenient to be able to have blog and mailing list posts in HTML which can be saved as .lhs files and executed directly
2013-09-02 05:43:36	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 276 seconds)
2013-09-02 05:43:41	Cale	(or in plain text of course)
2013-09-02 05:43:44	tikhon	I have a lot of hope for embedded build DSLs like Shake, but I've never actually used them in practice.
2013-09-02 05:44:00	Cale	and of course, the ability to have LaTeX documents which are also programs is pretty nice too :)
2013-09-02 05:44:08	Ghoul_	:t quotRem
2013-09-02 05:44:09	lambdabot	Integral a => a -> a -> (a, a)
2013-09-02 05:44:15	Hodapp	The thing with CMake is that even if it's a farking mess, just having most of the setup be in flat text files is amazingly helpful because of advanced features like "copy and paste" and handling modularity your own way.
2013-09-02 05:44:16	Cale	quotRem 473892 10
2013-09-02 05:44:18	Cale	> quotRem 473892 10
2013-09-02 05:44:19	lambdabot	  (47389,2)
2013-09-02 05:44:27	Cale	quotient and remainder
2013-09-02 05:44:30	Cale	there's also
2013-09-02 05:44:30	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: G'night everynyan~!)
2013-09-02 05:44:34	Cale	> divMod 473892 10
2013-09-02 05:44:35	lambdabot	  (47389,2)
2013-09-02 05:44:41	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-02 05:44:46	Cale	it's the same as quotRem when both the arguments are positive
2013-09-02 05:45:06	Cale	divMod is actually more often the thing you want, but it's ever-so-slightly slower
2013-09-02 05:45:08	Demos	I have seen no evidence that building c++ code is a problem domain with a "clean" solution
2013-09-02 05:45:11	Hodapp	If I want to duplicate a specific module in CMake, I copy the file and change a few names. If I want to duplicate a specific module in a Visual Studio build... uhm, well, I guess I can write a Python script to walk the XML, find the GUIDs, regenerate them, and change a bunch of the filenames, and then it MIGHT work
2013-09-02 05:45:22	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 246 seconds)
2013-09-02 05:45:29	Cale	(because quot/rem are typically what gets implemented in hardware)
2013-09-02 05:45:31	Hodapp	Demos: I have seen no evidence that doing anything with C++ code is ever a "clean" solution
2013-09-02 05:45:42	tikhon	Why is copy and paste suddenly good for code reuse if you're working on your build system?
2013-09-02 05:46:01	tikhon	I mean, sure, it's probably easier than XML, but it's still very sub-par.
2013-09-02 05:46:43	Hodapp	tikhon: It's a lot easier than walking a maze in a GUI, and often times when you are copying-and-pasting you'll start to see what can be factored out so that you don't need duplication of it.
2013-09-02 05:46:50	<--	lcfrs_ (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has quit (Read error: Connection reset by peer)
2013-09-02 05:46:51	tikhon	A makefile is a program, like any other; why not use a real programming language, with its own features for abstraction and modularity instead?
2013-09-02 05:46:52	<--	Sgeo (~quassel@2002:ad03:4ea6:0:5c1a:41ab:b630:530b) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-02 05:47:07	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-02 05:47:10	Demos	cmake is kinda a real programming language
2013-09-02 05:47:12	Demos	kinda
2013-09-02 05:47:14	Hodapp	kinda.
2013-09-02 05:47:15	-->	Sgeo (~quassel@2002:ad03:4ea6:0:5c1a:41ab:b630:530b) has joined #haskell
2013-09-02 05:47:16	tikhon	Oh yes, I agree it's much nicer than using an IDE or something for your build.
2013-09-02 05:47:27	-->	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 05:47:38	Demos	the thing is I want to use the language that I am building to write my build scripts
2013-09-02 05:47:46	tikhon	It's a programming language with rather limited expressiveness.
2013-09-02 05:47:50	<--	xl (~xl@123.113.159.146) has quit (Ping timeout: 240 seconds)
2013-09-02 05:48:00	Hodapp	but for "why not use a real programming language": sometimes declarative languages can be preferable here
2013-09-02 05:48:09	heatsink	There is shake
2013-09-02 05:48:12	tikhon	That's why we have a nice DSL in Haskell or OCaml for it.
2013-09-02 05:48:25	Demos	I mean they could provide a DSL written in c++, kinda, with enought templates
2013-09-02 05:48:30	tikhon	I'm not suggesting a C++-based build-system, but mostly because I don't suggest C++ for anything :D.
2013-09-02 05:48:37	Hodapp	well of course Haskell has a nice DSL for it :P
2013-09-02 05:48:50	Hodapp	I'm just reporting my experiences when I've worked with CMake
2013-09-02 05:49:06	Demos	a language that compiles to C may be a good choice for cmakeish build systems
2013-09-02 05:49:25	Hodapp	and how, even if it's not the cleanest solution, it's a far cry from how it feels like trying to fold laundry with boxing gloves on when I want to do anything in VS's build system
2013-09-02 05:49:41	ReinH	Not sure why you need a turing complete language to write a build system
2013-09-02 05:50:00	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-02 05:50:17	ReinH	or why "a real programming langauge" is automatically better than... what... a "fake" one?
2013-09-02 05:50:19	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-02 05:50:19	tikhon	ReinH: it doesn't have to be Turing-complete per se, but it *does* need good facilities for abstraction and reuse.
2013-09-02 05:50:43	ReinH	why?
2013-09-02 05:50:46	tikhon	In Haskell, we already know how to write code that's elegant, easy to follow and modular; why reinvent all that for a build system?
2013-09-02 05:51:08	ReinH	what kind of abstraction and reuse do you expect to get out of the equivalent of a makefile?
2013-09-02 05:51:10	Demos	honestly I think that having the language impose some kind of organization on libraries and source files helps
2013-09-02 05:51:12	tikhon	So you don't end up with a gigantic file full of slightly-modified, copy paste build code
2013-09-02 05:51:21	Tekmo	ReinH: I think you underestimate the utility of this abstraction
2013-09-02 05:51:25	-->	tac (~tac-tics@2602:306:bdb4:5100:e144:cd9a:3c37:2799) has joined #haskell
2013-09-02 05:51:30	Tekmo	ReinH: This can be used to automate more than just build systems
2013-09-02 05:51:30	<--	alcuadrado (~alcuadrad@unaffiliated/alcuadrado) has quit (Ping timeout: 264 seconds)
2013-09-02 05:51:39	Tekmo	ReinH: It's a general reactive paradigm
2013-09-02 05:51:53	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-02 05:52:02	ReinH	Tekmo: Oh, I appreciate the paradigm
2013-09-02 05:52:19	ReinH	I'm talking about build systems
2013-09-02 05:52:23	<--	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has quit (Ping timeout: 260 seconds)
2013-09-02 05:52:54	tikhon	The last place I worked, each time you wanted to build functions against C code or use a preprocessor, you basically ended up copying and pasting the build code from some other project and tinkering with it until it worked for your particular project. I think much of this could have been avoided with a nice edsl for the build system instead of the make-like atrocity they used.
2013-09-02 05:53:02	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 240 seconds)
2013-09-02 05:53:11	ReinH	I don't think you need "a real programming langauge" to obtain abstraction and code reuse
2013-09-02 05:53:24	tikhon	ReinH: Well, Make certainly doesn't give it to us.
2013-09-02 05:53:29	Tekmo	ReinH: C++ can always benefit from a better build system
2013-09-02 05:53:44	tikhon	And why try inventing a new language when we already have a perfectly good one available?
2013-09-02 05:53:46	ReinH	Puppet language has excellent abstraction and reuse, for instance
2013-09-02 05:53:47	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-02 05:53:52	Cale	In practice, it seems you need more than just a real programming language to obtain abstraction and code reuse.
2013-09-02 05:54:13	Hodapp	Tekmo: If the build system is going to be used as a crutch, I dunno...
2013-09-02 05:54:26	Cale	(at least, more than a tiny fraction of what you might like to have in that regard...)
2013-09-02 05:54:27	tikhon	Yeah. Which is why you want a real programming language with a nice DSL for build-specific functionality.
2013-09-02 05:54:37	Hodapp	Cale: Having *less* than a real programming language doesn't mean you can't have abstraction and code reuse.
2013-09-02 05:54:47	Demos	what you want is build specific functionality
2013-09-02 05:55:00	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-02 05:55:00	Demos	*less build specific functionality
2013-09-02 05:55:29	tikhon	besides, just because you're embedded in a general-purpose language does not mean your code can't be declarative
2013-09-02 05:56:19	ReinH	Build systems are a very small domain compared to a general purpose programming language
2013-09-02 05:56:27	tikhon	yes, sure
2013-09-02 05:56:54	tikhon	but essentially *every* domain you ever care about is small compared to that
2013-09-02 05:56:55	<--	void64 (~luke@178.122.126.198) has quit (Ping timeout: 246 seconds)
2013-09-02 05:56:58	Tekmo	I mean, don't you get a kick out of finding a really elegant way to solve a problem?
2013-09-02 05:57:05	<--	charliesome (~root@202-129-124-155.perm.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 05:57:06	ReinH	Can you imagine telling sysadmins "Ok, our build system is an embedded Haskell DSL so you have to learn Haskell if you want to manage our infrastructure"?
2013-09-02 05:57:12	ReinH	seriously?
2013-09-02 05:57:19	tikhon	Well, I could imagine it with OCaml
2013-09-02 05:57:29	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 05:57:31	tikhon	because that's exactly what the company I was talking about did
2013-09-02 05:57:51	tikhon	besides, learning a Haskell DSL is no worse than learning Make
2013-09-02 05:57:58	Demos	just don't tell them it is haskell
2013-09-02 05:58:10	Tekmo	ReinH: While I don't think Shake is simple enough to make such an argument, I believe that something more elegant than Shake could appeal to non-Haskell programmers
2013-09-02 05:58:10	ReinH	If they can use it without know it's haskell
2013-09-02 05:58:13	ReinH	then it doesn't need to be haskell
2013-09-02 05:58:17	ReinH	obviously
2013-09-02 05:58:20	ReinH	*knowing
2013-09-02 05:58:21	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 05:58:24	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-02 05:58:40	<--	maattdd (~matthieu@65.95.34.189) has quit (Ping timeout: 240 seconds)
2013-09-02 05:59:12	pharaun	shake n' bake :)
2013-09-02 05:59:36	ReinH	Tekmo: Twerk.
2013-09-02 05:59:39	<--	Umschwung (5ee05f77@gateway/web/freenode/ip.94.224.95.119) has quit (Ping timeout: 250 seconds)
2013-09-02 05:59:45	tikhon	If they're working at a Haskell company, they're going to encounter Haskell in other places too; they'll have to pick up at least a basic proficiency.
2013-09-02 05:59:49	 *	Hodapp glares at ReinH
2013-09-02 06:00:00	ReinH	Hodapp: #yolo
2013-09-02 06:00:03	carter	yup
2013-09-02 06:00:10	-->	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has joined #haskell
2013-09-02 06:00:16	-->	xl (~xl@114.254.148.6) has joined #haskell
2013-09-02 06:00:19	carter	tikhon: i'm actually going to likely be trying to use shake for a bunch of stuff soon
2013-09-02 06:00:24	Hodapp	I heard the, "We have to use C++ here, because we have no change of finding anyone who knows how to use $better_language!"
2013-09-02 06:00:34	tikhon	carter: ooh, I'd love to hear about your experiences with it
2013-09-02 06:00:46	carter	tikhon i do too
2013-09-02 06:01:02	Hodapp	then it turned out practically no one for hire knew C++ either
2013-09-02 06:01:11	-->	tpsinnem (~tpsinnem@85-76-180-0-nat.elisa-mobile.fi) has joined #haskell
2013-09-02 06:01:17	carter	tikhon: : Enigmagic  has a cool bit of shake code https://github.com/alphaHeavy/shake-install
2013-09-02 06:01:29	Tekmo	Ghoul_: I've made a bit more progress on problem 415
2013-09-02 06:01:35	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-02 06:01:38	ReinH	I am not arguing that a build system in Haskell wouldn't be useful
2013-09-02 06:01:41	tikhon	carter: Oh, do they use it for everything?
2013-09-02 06:01:58	heatsink	Hodapp, do you mean they've written C++ before but their understanding is flawed and less complete than they think?
2013-09-02 06:02:04	carter	by what i've heard them say publically, yes, though i'm not privy to what they do in practice
2013-09-02 06:02:11	tikhon	I was wondering what real Haskell companies use to build their code.
2013-09-02 06:02:23	tikhon	I guess cabal just doesn't cut it...
2013-09-02 06:02:25	carter	depends on how good their engineers are honestly
2013-09-02 06:02:35	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-02 06:02:35	Tekmo	What's wrong with cabal?
2013-09-02 06:02:39	carter	tikhon: apparently you really really want a nice SMT solver for cabal when things get large
2013-09-02 06:02:55	carter	wrt the version plans
2013-09-02 06:02:56	Hodapp	heatsink: No - just that no one who claimed to know C++ seemed to be looking for a job.
2013-09-02 06:02:56	ReinH	tikhon: building the code is honestly the least interesting part
2013-09-02 06:03:11	carter	ReinH: at scale its an interesting problem again
2013-09-02 06:03:12	heatsink	Tekmo, cabal is tightly tied to the way typical Haskell programs are built
2013-09-02 06:03:15	Ghoul_	Tekmo: I have one that works if you wanna see it
2013-09-02 06:03:20	tikhon	ReinH: Yes. So why do we give that a whole different language while everything else gets to be the same?
2013-09-02 06:03:22	Ghoul_	but I dont have enough ram to run the fast sieve <_<
2013-09-02 06:03:24	m3ga	Tekmo: cabal is way slower than Make, Make is better at building specific target
2013-09-02 06:03:30	<--	tac (~tac-tics@2602:306:bdb4:5100:e144:cd9a:3c37:2799) has quit (Quit: Leaving)
2013-09-02 06:03:30	tikhon	(well, almost everything else)
2013-09-02 06:03:31	carter	Ghoul_: example of what?
2013-09-02 06:03:34	Ghoul_	so it swaps to a really slow n^2 sieve and takes forever
2013-09-02 06:03:40	ReinH	carter: not really. It's just tedious.
2013-09-02 06:03:41	Tekmo	Ghoul_: Well, I'll tell you how I think you can speed it up a lot
2013-09-02 06:03:45	heatsink	Hodapp, interesting.  I thought C++ was just behind Java in terms of how many people used it.
2013-09-02 06:03:49	carter	ReinH what is?
2013-09-02 06:03:51	Cale	Presently the way that GHC works iiuc is that you can have at most one installed package-version combination per package.
2013-09-02 06:03:52	Ghoul_	theres a O(n) way of finding it
2013-09-02 06:03:53	<--	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 06:04:01	Ghoul_	bt it requires a gigapentahellavalot of ram
2013-09-02 06:04:02	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-02 06:04:07	ReinH	carter: build systems for compiling code "at scale"
2013-09-02 06:04:10	tikhon	For what it's worth, I think most standalone DSLs should be embedded instead. Like SQL, for example.
2013-09-02 06:04:14	Tekmo	Ghoul_: You can do better than O(n), I think
2013-09-02 06:04:23	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 06:04:24	ReinH	The compiler has already done all the interesting bits
2013-09-02 06:04:27	heatsink	tikhon, I think that was the idea behind LINQ
2013-09-02 06:04:31	carter	ReinH : distributed systems are tedious too
2013-09-02 06:04:31	Hodapp	heatsink: it's lost some ground, I think
2013-09-02 06:04:39	Tekmo	Ghoul_: It should be O(# of prime factors of n), I think
2013-09-02 06:04:40	Hodapp	heatsink: C, Java, and maybe C# surpassed it
2013-09-02 06:04:40	tikhon	And LINQ is pretty brilliant
2013-09-02 06:04:42	Cale	and that creates issues because of conflicts between the choices of versions that various packages are built against
2013-09-02 06:04:54	ReinH	carter: I'm not really sure what you're getting at.
2013-09-02 06:04:56	tikhon	Hodapp: what do you mean?
2013-09-02 06:05:05	carter	ReinH if you have 1mm loc
2013-09-02 06:05:10	Hodapp	tikhon: in terms of demand for coders
2013-09-02 06:05:12	carter	you dont want to do the build on a single machine
2013-09-02 06:05:19	tikhon	Hodapp: oh, I thought you were talking about LINQ
2013-09-02 06:05:25	carter	you want to do a parallel distributed batch job
2013-09-02 06:05:35	carter	that does incremental rebuilds on a cluster or something
2013-09-02 06:05:36	Cale	But the alternative is possibly just as bad -- you end up building potentially combinatorially many versions of the same package-version.
2013-09-02 06:05:38	Ghoul_	hm.
2013-09-02 06:05:44	Tekmo	Ghoul_: No wait, it's O(largest prime factor of n)
2013-09-02 06:05:50	Cale	Though, that's not so much a cabal-specific thing.
2013-09-02 06:05:53	ReinH	carter: right, it's a map reduce problem, which is a bit more interesting
2013-09-02 06:05:56	ReinH	but still mostly tedious :p
2013-09-02 06:06:06	carter	its not a map reduce problem
2013-09-02 06:06:09	carter	not at alllll
2013-09-02 06:06:14	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 06:06:27	tikhon	My biggest problem with Cabal has always been with non-Haskell dependencies
2013-09-02 06:06:28	Hodapp	oh god, somebody dropped the MR bomb
2013-09-02 06:06:42	ReinH	carter: sure it is, once you get past the topo sort
2013-09-02 06:06:44	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-02 06:06:46	tikhon	I imagine that's another reason to have a custom in-house build system instead
2013-09-02 06:07:00	Tekmo	Ghoul_: No, it's better than that.  Probably around O(log n)
2013-09-02 06:07:11	carter	ReinH : yes, but then you're going to have it be slower
2013-09-02 06:07:24	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 06:07:29	carter	tikhon: yeah, actually a number of industiral HS places would love cabal to get better instead
2013-09-02 06:08:03	Tekmo	Yeah, it's a big pain when cabal depends on a package
2013-09-02 06:08:11	tikhon	Unfortunately, as ReinH pointed out, it really isn't a very glamorous problem to solve :(
2013-09-02 06:08:19	carter	idk....
2013-09-02 06:08:24	carter	its a pretty far reaching problem
2013-09-02 06:08:29	ReinH	any build system worth its salt already lets you specify dependencies
2013-09-02 06:08:29	carter	and no one knows how to do it well
2013-09-02 06:08:36	<--	Vicfred (~Vicfred@189.232.30.93) has quit (Remote host closed the connection)
2013-09-02 06:09:05	ReinH	once you have the graph, there is a lot of prior art for finding partial orderings and so on
2013-09-02 06:09:09	tikhon	Yeah, but it's purely infrastructure. And while it's indubitability useful and important, it's still not terribly exciting or glamorous.
2013-09-02 06:09:21	ReinH	it's a big problem
2013-09-02 06:09:25	ReinH	it's just not a very interesting one
2013-09-02 06:09:32	ReinH	it's very well understood
2013-09-02 06:09:55	carter	which is?
2013-09-02 06:10:26	ReinH	carter: algorithms for operating on directed acyclic graphs
2013-09-02 06:10:27	dmj`	ss
2013-09-02 06:10:30	carter	oh yeah
2013-09-02 06:10:32	carter	thats understood
2013-09-02 06:10:34	dmj`	disregard that
2013-09-02 06:10:35	Tekmo	No, the algorithms are not the interesting part
2013-09-02 06:10:38	ReinH	it's a pretty well explored space
2013-09-02 06:10:39	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-02 06:10:41	Tekmo	The interesting part is making things composable
2013-09-02 06:10:52	carter	having good build systems without gobs of manpower is the hard part
2013-09-02 06:11:22	ReinH	you can take your DAG of compilation dependencies, do a topo sort to obtain a partial ordering, and then distribute that
2013-09-02 06:11:28	-->	DoritosMan (~DoritosMa@99-112-201-33.lightspeed.hstntx.sbcglobal.net) has joined #haskell
2013-09-02 06:11:31	-->	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has joined #haskell
2013-09-02 06:11:42	carter	you've skipped the tricky parts
2013-09-02 06:11:53	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-02 06:11:53	Tekmo	What are the tricky parts?
2013-09-02 06:11:58	ReinH	which tricky parts?
2013-09-02 06:12:01	carter	how to get that next week
2013-09-02 06:12:09	ReinH	throw more machines at it, typically
2013-09-02 06:12:09	carter	:)
2013-09-02 06:12:11	carter	yes
2013-09-02 06:12:17	ReinH	that's why it's boring :)
2013-09-02 06:12:28	carter	the tricky part is making that somethign you could easily do with cabal
2013-09-02 06:12:36	ReinH	oh, but I'm not trying to do that :p
2013-09-02 06:12:49	Tekmo	Just forget cabal for a second
2013-09-02 06:12:53	carter	ok
2013-09-02 06:12:53	Ghoul_	I wonder if pipes can be implemented with something like ContT for speed
2013-09-02 06:12:58	Tekmo	Let's think about things in really abstract terms
2013-09-02 06:13:07	carter	Ghoul_: though that was the point of machiners
2013-09-02 06:13:10	carter	@hackage machines
2013-09-02 06:13:10	lambdabot	http://hackage.haskell.org/package/machines
2013-09-02 06:13:21	ReinH	you can already use reactivity to make re-compilation more efficient
2013-09-02 06:13:34	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-02 06:13:37	Tekmo	Ghoul_: `pipes` is probably faster than `machines`
2013-09-02 06:13:40	ReinH	even in a system as simple as redo, you can do some version of that
2013-09-02 06:13:41	Ghoul_	woah thats confusing to look at
2013-09-02 06:13:54	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-02 06:13:57	ReinH	which, btw, uses a real programming langauge
2013-09-02 06:13:59	Ghoul_	pipes is certainly much easier too, but honestly, pipes-network needs a rewrite or something
2013-09-02 06:14:03	ReinH	to the extent that shell is a real programming langauge :p
2013-09-02 06:14:07	Tekmo	Ghoul_: The reason I prefer non-CPS style is that any time you have a performance bottle-neck you can optimize it using rewrite ruls
2013-09-02 06:14:14	Tekmo	You can't do that optimization when you use CPS style
2013-09-02 06:14:19	carter	Tekmo you can;t?
2013-09-02 06:14:21	carter	really?
2013-09-02 06:14:26	carter	why not?
2013-09-02 06:14:29	Tekmo	It's very difficult to get rewrite rules to fire on CPS patterns
2013-09-02 06:14:31	carter	just harder to get the rules to fire?
2013-09-02 06:14:34	carter	huh
2013-09-02 06:14:39	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-02 06:14:41	carter	are there any trac tickets on that?
2013-09-02 06:14:46	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 06:14:50	Tekmo	I have no idea
2013-09-02 06:15:01	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-02 06:15:07	-->	charliesome (~root@202-129-124-155.perm.iinet.net.au) has joined #haskell
2013-09-02 06:15:09	carter	cause if you have any good toy examples of that
2013-09-02 06:15:13	carter	i'd love to throw that on trac
2013-09-02 06:15:15	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 260 seconds)
2013-09-02 06:15:22	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-02 06:15:43	Tekmo	Hmmm, let me see what I can throw together
2013-09-02 06:15:48	carter	lately my appraoch to all the "nice things we'd like ghc to have" statements is "lets come up with an example and throw it on trac"
2013-09-02 06:15:50	carter	yay!
2013-09-02 06:15:50	<--	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has quit (Ping timeout: 245 seconds)
2013-09-02 06:15:50	carter	:)
2013-09-02 06:15:52	-->	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has joined #haskell
2013-09-02 06:16:59	carter	Tekmo thats a ticket worth writing
2013-09-02 06:17:08	carter	(assuming you can cook up a good toy examples)
2013-09-02 06:17:10	Tekmo	Give me just a second
2013-09-02 06:17:29	carter	kk
2013-09-02 06:17:30	carter	no presure
2013-09-02 06:17:33	carter	i'm just enthusing
2013-09-02 06:17:38	Tekmo	:)
2013-09-02 06:17:42	carter	tikhon back out west?
2013-09-02 06:17:58	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-02 06:18:13	-->	jfischoff (~jfischoff@66.140.190.154) has joined #haskell
2013-09-02 06:18:14	<--	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has quit (Client Quit)
2013-09-02 06:18:18	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-02 06:18:34	tikhon	Yeah, back in the Bay Area
2013-09-02 06:18:59	<--	fogus|gone (~fogus@freedom.d-a-s.com) has quit (Ping timeout: 260 seconds)
2013-09-02 06:19:08	carter	hehe
2013-09-02 06:19:24	carter	my sister's doing IP focused law school in the bay area
2013-09-02 06:19:36	tikhon	oh, that's good
2013-09-02 06:19:39	carter	yeah
2013-09-02 06:19:45	carter	and she's had years of dealing with me
2013-09-02 06:19:45	tikhon	I think we have several law schools around
2013-09-02 06:19:54	carter	berkeley's is pretty good i hear
2013-09-02 06:20:02	tikhon	and I'm guessing IP is a pretty popular subject in the area
2013-09-02 06:20:12	carter	tikhon: so i figure, years of dealing with me == she can handle any techy folks well
2013-09-02 06:20:40	<--	mno2 (~mno2@wlan66.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-02 06:21:18	startling	carter: you're your sister? that must be confusing.
2013-09-02 06:21:29	carter	nope
2013-09-02 06:21:31	carter	i'm saying
2013-09-02 06:21:36	-->	W|cKeD (~Fatwreck@184.75.223.154) has joined #haskell
2013-09-02 06:21:39	<--	DoritosMan (~DoritosMa@99-112-201-33.lightspeed.hstntx.sbcglobal.net) has quit (Quit: MacBook has gone to sleep)
2013-09-02 06:21:48	carter	my sister has had years of dealing with me, a loud, obnoxious computer scientist
2013-09-02 06:21:55	startling	"years of dealing with (me == she) [...]" ;)
2013-09-02 06:22:11	carter	read "===" as implies
2013-09-02 06:22:20	carter	natural language magic infix
2013-09-02 06:22:24	carter	like in scala or something
2013-09-02 06:22:37	tikhon	If it's natural language, you don't have to specify that it's magic :)
2013-09-02 06:22:47	carter	true
2013-09-02 06:23:25	carter	actually, its pretty funny, prior to going to college, my sisters thought all comptuer scientists were like me....
2013-09-02 06:23:35	carter	boy were they suprised
2013-09-02 06:23:41	carter	*egad were they surprised
2013-09-02 06:23:45	<--	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 06:23:45	<--	codesoup (~codesoup@69-165-163-1.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-09-02 06:24:11	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 06:24:47	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-02 06:26:13	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-09-02 06:26:35	-->	emiliano1 (~emiliano@194.123.128.201) has joined #haskell
2013-09-02 06:26:51	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-02 06:27:13	carter	anyways: tikhon does hackage have any bsd3 sat/smt solver bindings that are fast?
2013-09-02 06:27:20	carter	(i figure you'd know)
2013-09-02 06:27:30	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-02 06:27:33	tikhon	I doubt the bindings have that much effect on how fast it is
2013-09-02 06:27:37	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 06:27:38	tikhon	that's mostly going to depend on the solver
2013-09-02 06:27:51	carter	yes
2013-09-02 06:28:06	--	CindyLin1 is now known as CindyLinz
2013-09-02 06:28:06	tikhon	I've only really used sbv which is under the BSD3 license
2013-09-02 06:28:10	<--	Sculptor (~Sculptor@89.110.199.224) has quit (Quit: Одлазим)
2013-09-02 06:28:15	carter	i mean: is there a fast, bsd/apache solver, which has bsd haskell bindings
2013-09-02 06:28:18	tikhon	ah
2013-09-02 06:28:19	tikhon	well
2013-09-02 06:28:25	carter	or mit
2013-09-02 06:28:28	tikhon	depends on what you want to do, I suppose
2013-09-02 06:28:41	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 06:28:42	carter	good thing i've not thought that far :)
2013-09-02 06:28:44	tikhon	z3 has a stupid license, but that's what most people seem to use
2013-09-02 06:28:46	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Client Quit)
2013-09-02 06:28:53	tikhon	well, people in academia
2013-09-02 06:28:55	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-02 06:29:10	carter	yeah
2013-09-02 06:29:24	tikhon	If you want to do bitvector stuff, boolector is good
2013-09-02 06:29:37	tikhon	it's GPL
2013-09-02 06:29:38	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-02 06:29:43	-->	krey_ (~krey@cpe-142-136-123-38.socal.res.rr.com) has joined #haskell
2013-09-02 06:29:44	carter	v2?
2013-09-02 06:29:46	tikhon	but if you're just using it as a solver, that shouldn't matter
2013-09-02 06:29:56	carter	yeah
2013-09-02 06:29:58	carter	 i guess so
2013-09-02 06:30:02	tikhon	it's just like a compiler
2013-09-02 06:30:02	carter	isn't there that NYU one too?
2013-09-02 06:30:11	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-09-02 06:30:13	--	Raynes is now known as solson
2013-09-02 06:30:14	tikhon	I mean, it *is* a compiler (or an interpreter), really
2013-09-02 06:30:16	carter	http://cvc4.cs.nyu.edu/web/
2013-09-02 06:30:18	tikhon	Yeah
2013-09-02 06:30:21	tikhon	I don't know much about that one
2013-09-02 06:30:23	--	solson is now known as Raynes
2013-09-02 06:30:44	tikhon	the stuff I've been playing around with mostly used bitvectors
2013-09-02 06:30:46	carter	yak shaving time :)
2013-09-02 06:30:53	krey_	o/, I remember reading about someone using the free group monad in haskell for something vaguely useful. do you guys have any ideas?
2013-09-02 06:30:56	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-09-02 06:31:09	-->	Gentlecat_ (~Roman@79.105.224.65) has joined #haskell
2013-09-02 06:31:14	carter	free monad or free *group* monad
2013-09-02 06:31:18	carter	i know about one
2013-09-02 06:31:19	carter	not the other
2013-09-02 06:31:32	-->	codesoup (~codesoup@69-165-163-1.dsl.teksavvy.com) has joined #haskell
2013-09-02 06:31:51	Tekmo	carter: I just tested it and the rule firing actually worked this time
2013-09-02 06:31:57	carter	k
2013-09-02 06:32:02	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 06:32:04	carter	care to share the example?
2013-09-02 06:32:09	Tekmo	Yeah, it's really simple
2013-09-02 06:32:15	Tekmo	{-# RULES "map" map (\x -> x) = id #-
2013-09-02 06:32:28	carter	hrmm
2013-09-02 06:32:45	augur	Tekmo!
2013-09-02 06:32:49	Tekmo	augur: Hi!
2013-09-02 06:32:54	carter	maybe a better example would be the CPS analoge of map f . map g == map (f. g)
2013-09-02 06:32:56	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-02 06:33:04	augur	Tekmo: you owe me a readthrough of my iteratees tutorial :)
2013-09-02 06:33:09	Tekmo	The one I like to test is the associativity law
2013-09-02 06:33:10	augur	or at least the partial tutorial
2013-09-02 06:33:16	Tekmo	for a category
2013-09-02 06:33:26	Tekmo	augur: Which one is it?
2013-09-02 06:33:30	augur	http://www.purelytheoretical.com/programming/iteratees.txt
2013-09-02 06:33:35	-->	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has joined #haskell
2013-09-02 06:33:37	carter	Tekmo which ?
2013-09-02 06:33:39	-->	znode (~znode@61.143.60.83) has joined #haskell
2013-09-02 06:34:04	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 06:34:12	carter	tikhon : http://hackage.haskell.org/packages/archive/sbv/2.9/doc/html/Data-SBV-Bridge-CVC4.html wooot!
2013-09-02 06:34:13	tikhon	carter: you might also want to look at edwardk's ersatz: https://github.com/ekmett/ersatz
2013-09-02 06:34:14	<--	__userna1 (~test@vpn-na-east.corp.salesforce.com) has quit (Ping timeout: 240 seconds)
2013-09-02 06:34:15	Tekmo	carter: I mean the rule: (f . g) . h = f . (g . h)
2013-09-02 06:34:16	<--	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-02 06:34:20	carter	ok
2013-09-02 06:34:30	Tekmo	carter: I tried using the equivalent optimization rule for `pipes` a while ago and never got it to fire
2013-09-02 06:34:42	Tekmo	Give me a second while I read augur's post
2013-09-02 06:34:45	carter	k
2013-09-02 06:34:48	edwardk	heya Tekmo
2013-09-02 06:34:51	Tekmo	Hey!
2013-09-02 06:34:53	augur	Tekmo: you dont have to read it right away
2013-09-02 06:34:54	carter	any "good" example of rules not fire
2013-09-02 06:34:59	carter	might still be a handy ticket to file
2013-09-02 06:35:02	carter	tikhon you're right
2013-09-02 06:35:06	carter	@hackage ersatz
2013-09-02 06:35:06	lambdabot	http://hackage.haskell.org/package/ersatz
2013-09-02 06:35:10	edwardk	did you see the 'tekmo's folds are better than mine' angle in the new automata post?
2013-09-02 06:35:13	carter	i'm out of date on erstatze
2013-09-02 06:35:17	Tekmo	I did :)
2013-09-02 06:35:19	carter	edwardk you said that?
2013-09-02 06:35:21	carter	@hackage foldl
2013-09-02 06:35:21	lambdabot	http://hackage.haskell.org/package/foldl
2013-09-02 06:35:23	edwardk	pretty much
2013-09-02 06:35:26	Moggle	I have something of an interesting problem: I am using an existential data type, and want to automatically derive Read for it. Is there any easy solution for this?
2013-09-02 06:35:29	<--	kamatsu (~Adium@vampire.ertos.nicta.com.au) has quit (Quit: Leaving.)
2013-09-02 06:35:35	edwardk	Fold is faster than Moore
2013-09-02 06:35:39	Tekmo	However, I found an interesting variation on the fold type that is a category
2013-09-02 06:35:40	carter	edwardk: does it subsume multipass?
2013-09-02 06:35:46	carter	or should multipass steal foldl?
2013-09-02 06:35:51	Tekmo	Unfortunately, I lost my notes on it :(
2013-09-02 06:35:55	krey_	I found it! http://blog.sigfpe.com/2007/06/monads-from-algebra-and-the-gray-code.html but it's not as interesting as I'd hoped
2013-09-02 06:36:06	carter	Tekmo: is that rule in your repo history?
2013-09-02 06:36:08	Tekmo	Oh, it was not only a category, but an arrow, too
2013-09-02 06:36:12	Tekmo	carter: No
2013-09-02 06:36:13	edwardk	carter: no, it just urges me to consider explicitly adding the seed parameter to machines' implementation of moore
2013-09-02 06:36:14	startling	Moggle, existential quantification? It's not possible in general.
2013-09-02 06:36:23	<--	geofft_adium (~Adium@home.pointlesstopology.com) has quit (Quit: Leaving.)
2013-09-02 06:36:25	carter	the fusion rule?
2013-09-02 06:36:27	-->	kamatsu (~Adium@2402:1800:4000:2:30e8:56e6:30a7:c24b) has joined #haskell
2013-09-02 06:36:29	-->	ananthakumaran (~Adium@117.192.147.65) has joined #haskell
2013-09-02 06:36:33	edwardk	Tekmo: did you find mealy basically?
2013-09-02 06:36:42	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-02 06:36:42	Tekmo	carter: The only rules that I've ever committed are the ones that are currently in the code base
2013-09-02 06:36:48	carter	ok
2013-09-02 06:36:50	Tekmo	edwardk: What's the type of mealy?
2013-09-02 06:36:57	carter	darn
2013-09-02 06:37:03	carter	well, if you reconstruct it at som epoit
2013-09-02 06:37:13	Moggle	startling: pity, I suspected that.
2013-09-02 06:37:15	edwardk	Tekmo: if you 'roll' moore a bit you get newtype Mealy a b = Mealy { runMealy :: a -> (b, Mealy a b) }
2013-09-02 06:37:18	tikhon	startling: couldn't you do it if the existential variable has the appropriate constraints?
2013-09-02 06:37:34	<--	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has quit (Quit: miclorb)
2013-09-02 06:37:36	edwardk	a moore machine has a value for each state, a mealy machine has labels attached to the transitions
2013-09-02 06:38:06	startling	Moggle, if you'd care to show the specific code you have, though, it might be possible
2013-09-02 06:38:09	startling	tikhon: yeah.
2013-09-02 06:38:09	edwardk	moore gives you a beautiful comonad, etc. mealy gives you an arrow
2013-09-02 06:38:20	Tekmo	edwardk: Yeah, that looks about right.  It was basically like a scan
2013-09-02 06:38:21	Moggle	startling: give me a bit here
2013-09-02 06:38:21	<--	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Quit: leaving)
2013-09-02 06:38:30	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 06:38:39	-->	gpampara_off (~gpampara@174.136.1.66) has joined #haskell
2013-09-02 06:38:41	edwardk	Tekmo: yeah i have both of those in machines, they are pretty fundamental old school automata
2013-09-02 06:38:41	--	gpampara_off is now known as gpampara
2013-09-02 06:38:52	tikhon	Moggle: try using standalone deriving
2013-09-02 06:38:56	-->	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has joined #haskell
2013-09-02 06:39:21	edwardk	in theory there is a similar existential hack to take apart mealy like we can take apart moore to get an existential parameter on its own
2013-09-02 06:39:38	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-02 06:39:43	edwardk	but it sadly doesn't give rise to the 'resumable hmac' trick
2013-09-02 06:40:03	Tekmo	edwardk: Well, the one I had was decomposed like `Fold`
2013-09-02 06:40:06	<--	sferry_ (~samuel@143.226.94.218) has quit (Quit: This computer has gone to sleep)
2013-09-02 06:40:08	edwardk	yeah
2013-09-02 06:40:15	-->	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has joined #haskell
2013-09-02 06:40:21	edwardk	i had something similar for mealy once upon a time
2013-09-02 06:40:52	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-02 06:41:23	<--	ashnur (~ashnur@79.117.75.140) has quit (Ping timeout: 245 seconds)
2013-09-02 06:41:31	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 06:41:36	-->	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has joined #haskell
2013-09-02 06:41:55	Tekmo	augur: I notice you don't mention that the iteratee forms a monad
2013-09-02 06:42:16	augur	Tekmo: im still wrapping my head around them ;P
2013-09-02 06:43:01	Tekmo	augur: One simple way to describe an iteratee is to just call it a fold
2013-09-02 06:43:05	lpaste	Moggle pasted “No title” at http://lpaste.net/92425
2013-09-02 06:43:14	Moggle	startling: tha
2013-09-02 06:43:15	<--	thunderrd (~thunderrd@119.42.75.158) has quit (Ping timeout: 260 seconds)
2013-09-02 06:43:15	Moggle	that
2013-09-02 06:43:33	<--	Sonarpulse (~user@138.16.38.207) has quit (Remote host closed the connection)
2013-09-02 06:43:37	Moggle	is the general idea
2013-09-02 06:43:37	-->	tac (~tac-tics@2602:306:bdb4:5100:e144:cd9a:3c37:2799) has joined #haskell
2013-09-02 06:43:38	augur	Tekmo: that's all good and well except that doesnt really help to understand whats up with iteratees
2013-09-02 06:43:41	Tekmo	augur: You give it a stream of values and it computes a single result (whatever is in the `Halt`/`Done`)
2013-09-02 06:43:42	Moggle	though you did say specific code, which is a huge mess.
2013-09-02 06:43:50	<--	ekipan (4cd4e1e8@gateway/web/freenode/ip.76.212.225.232) has quit (Quit: Page closed)
2013-09-02 06:43:57	Moggle	A/B/C can all be deriving read of course
2013-09-02 06:44:18	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 245 seconds)
2013-09-02 06:44:39	startling	oh, no, I don't think it's possible at all, because read is return-type polymorphic
2013-09-02 06:44:44	Tekmo	augur: What's the main point that you want to convey?
2013-09-02 06:44:56	augur	Tekmo: what they are and how they work
2013-09-02 06:45:08	startling	there's no general mechanism to list the types a string may be validly read as, you know?
2013-09-02 06:45:18	tikhon	Moggle: I don't think that would work unless class E_ had Read as a superclass or something
2013-09-02 06:45:21	-->	Munksgaard (~philip@80-71-132-106.u.parknet.dk) has joined #haskell
2013-09-02 06:45:27	tikhon	after all, what if you add another type to E_?
2013-09-02 06:45:31	startling	tikhon: I think it's more complicated than that.
2013-09-02 06:45:44	tikhon	yeah, it probably is
2013-09-02 06:45:48	tikhon	I'd have to think about it a bit
2013-09-02 06:45:51	elliott	edwardk: your post never defines less for Moore
2013-09-02 06:45:58	startling	since we can't see a string and list what types it is.
2013-09-02 06:46:00	edwardk	it makes it a field accessor
2013-09-02 06:46:07	startling	*what types it can be read as.
2013-09-02 06:46:26	edwardk	oh
2013-09-02 06:46:26	<--	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-02 06:46:28	startling	Moggle, you can do it with Show (given the Show constraint on the hidden type) but not with Read, I think.
2013-09-02 06:46:32	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (Ping timeout: 256 seconds)
2013-09-02 06:46:33	edwardk	yeah i guess i don't o that in the definitions i show
2013-09-02 06:46:35	Tekmo	augur: So technically state is not intrinsic to the iteratee
2013-09-02 06:46:46	Tekmo	augur: Your iteratees behave like state machins because you pass around a state argument
2013-09-02 06:46:51	edwardk	fixing
2013-09-02 06:47:03	augur	Tekmo: nope, most of my iteratees dont have a state argument :)
2013-09-02 06:47:05	augur	well
2013-09-02 06:47:10	Tekmo	augur: adder does, for example
2013-09-02 06:47:10	augur	most of the examples, rather
2013-09-02 06:47:25	Moggle	startling: That seems like an odd restriction
2013-09-02 06:47:31	augur	the running example is a stateless iteratee
2013-09-02 06:47:37	augur	(well, a finite state iteratee, but...)
2013-09-02 06:47:53	Tekmo	augur: You are also using "implicit state" by switching between different iteratees
2013-09-02 06:47:58	Moggle	although i guess read's polymorphic type doesn't help much
2013-09-02 06:47:59	startling	Moggle, well, say you have a string. how do you decide what type to read it as?
2013-09-02 06:48:02	edwardk	elliott: fixed
2013-09-02 06:48:09	Tekmo	i.e. `q1''` switching to `q0''` and vice versa
2013-09-02 06:48:14	Moggle	startling: specify it
2013-09-02 06:48:42	Moggle	startling: I guess I see the problem.
2013-09-02 06:48:42	startling	Moggle, right. you could specify it in the Read instance for E, but I assume that's not what you want.
2013-09-02 06:48:43	edwardk	augur: link to your description? the statement form sounds like "It" from trifecta
2013-09-02 06:48:45	Tekmo	augur: This is no different than defining a single `q0` that takes a `Bool` state parameter that it threads through the computation
2013-09-02 06:48:59	augur	Tekmo: yeah probably true.
2013-09-02 06:49:02	augur	edwardk: http://www.purelytheoretical.com/programming/iteratees.txt
2013-09-02 06:49:30	augur	Tekmo: im not sure that people will get the impression that this is about some sort of state thing, but
2013-09-02 06:49:42	Tekmo	augur: The distinguishing feature of iteratees is that they can block and wait for an anonymous source of input
2013-09-02 06:50:09	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-02 06:50:10	elliott	edwardk: yay.
2013-09-02 06:50:17	augur	Tekmo: im not sure what you mean by "block"
2013-09-02 06:50:22	Tekmo	edwardk: I had an idea I wanted to run by you regarding machnes
2013-09-02 06:50:24	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 06:50:35	mm_freak	my lpaste post disappeared…
2013-09-02 06:50:36	Tekmo	edwardk: How many machines form `Arrow`s and `ArrowChoice`s?
2013-09-02 06:50:38	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 06:50:39	edwardk	elliott: anyways, sadly your favorite moore rep lost to tekmo's in the benchmark-off
2013-09-02 06:51:02	edwardk	Tekmo: well, mealy is arrow and possbly arrowchoice
2013-09-02 06:51:05	<--	krey_ (~krey@cpe-142-136-123-38.socal.res.rr.com) has quit (Quit: Leaving)
2013-09-02 06:51:10	mm_freak	Mealy is ArrowChoice
2013-09-02 06:51:19	edwardk	moore gets the comonad instead
2013-09-02 06:51:25	Tekmo	The reason why is that I've been working on a general framework for something FRP-like
2013-09-02 06:51:33	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-09-02 06:51:34	elliott	edwardk: someone should make GHC treat it better.
2013-09-02 06:51:34	Tekmo	It has three basic components
2013-09-02 06:51:41	mm_freak	edwardk: Mealy is also ArrowLoop, btw
2013-09-02 06:51:47	mm_freak	and that's a very useful instance
2013-09-02 06:51:49	edwardk	mm_freak: did i omit the instance?
2013-09-02 06:51:58	mm_freak	yeah
2013-09-02 06:52:00	augur	Tekmo: ?
2013-09-02 06:52:10	edwardk	mm_freak: patch! =0
2013-09-02 06:52:36	Tekmo	augur: I mean the `Next` constructor.  Each time you reach a `Next` you suspend the computation until you receive an argument
2013-09-02 06:52:45	augur	oh, sure
2013-09-02 06:52:56	<--	tac (~tac-tics@2602:306:bdb4:5100:e144:cd9a:3c37:2799) has quit (Quit: Leaving)
2013-09-02 06:53:16	mm_freak	edwardk: loop (Mealy f) = Mealy $ \x -> let ((y, d), m) = f (x, d) in (y, m)
2013-09-02 06:53:17	<--	pentace (~user@p4FEEEB21.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-02 06:53:21	mm_freak	that should work
2013-09-02 06:53:30	-->	eyebloom (~eyebloom@pool-71-183-130-8.nycmny.east.verizon.net) has joined #haskell
2013-09-02 06:53:30	edwardk	mm_freak: i'll push it in. brb
2013-09-02 06:53:33	shachaf	elliott: I think maybe you'd end up with a sort of unfold-fusion.
2013-09-02 06:54:00	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Quit: This computer has gone to sleep)
2013-09-02 06:54:03	Moggle	I don't suppose it's possible to serialize functions in general, is it?
2013-09-02 06:54:12	<--	circle_ (~circle@203-219-13-238.static.tpgi.com.au) has quit (Quit: Leaving)
2013-09-02 06:54:18	Tekmo	edwardk: The reason `foldl` does so well is because it decomposes the fields
2013-09-02 06:54:21	mm_freak	edwardk: newtype MealyT m a b = MealyT { runMealyT :: a -> m (b, MealyT m a b) }
2013-09-02 06:54:23	Tekmo	edwardk: I found this is true of a lot of libraries
2013-09-02 06:54:26	Moggle	I mean obviously you'll have issues serializing something closure-ish but perhaps if the function was 'static' then there would be issues?
2013-09-02 06:54:27	opqdonut	Moggle: that's what compilation does ;)
2013-09-02 06:54:32	mm_freak	that one has:  MonadFix m => ArrowLoop (MealyT m)
2013-09-02 06:54:34	Tekmo	edwardk: If you take out the recursion, ghc does an amazing job of optimization
2013-09-02 06:54:41	Tekmo	edwardk: It's the same principle behind stream fusion
2013-09-02 06:54:45	mm_freak	and MealyT is a lot more useful than Mealy =)
2013-09-02 06:54:55	<--	oleo (~oleo@xdsl-78-35-132-113.netcologne.de) has quit (Ping timeout: 260 seconds)
2013-09-02 06:54:58	tikhon	Moggle: I don't know about doing it "in general", but Cloud Haskell has something like that for transmitting closures over the wire
2013-09-02 06:55:10	mm_freak	finally put a "Maybe" in front of the 'b' and you've got Wire =P
2013-09-02 06:55:12	Moggle	tikhon: interesting! i will look into this
2013-09-02 06:55:20	<--	scripty (~scripty@117.221.124.217) has quit (Read error: Connection reset by peer)
2013-09-02 06:55:40	-->	thunderrd (~thunderrd@119.42.75.158) has joined #haskell
2013-09-02 06:55:52	edwardk	Tekmo: yeah. i'm doing something similar with a form of 'matrix fusion' in my toy tensors project and it works really well
2013-09-02 06:56:05	-->	oleo (~oleo@xdsl-84-44-209-29.netcologne.de) has joined #haskell
2013-09-02 06:56:06	Tekmo	edwardk: The one thing I've learned is that `ghc` is terrible at optimizing recursive code
2013-09-02 06:56:21	edwardk	mm_freak: i've been meaning to add the transformer versions of that and Moore
2013-09-02 06:56:23	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Read error: Connection reset by peer)
2013-09-02 06:56:26	mm_freak	Tekmo: GHC is much better at optimizing corecursive code
2013-09-02 06:56:46	startling	Moggle: well, there's ways to cheat using Typeable, Data, et
2013-09-02 06:56:46	Tekmo	mm_freak: You mean like stream fusion?
2013-09-02 06:56:47	startling	c
2013-09-02 06:56:51	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-09-02 06:56:56	mm_freak	in fact i had a problem, where a Stream unfold/fold performed better for me than the straightforward recursive search
2013-09-02 06:56:59	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-02 06:57:04	mm_freak	Tekmo: no, regular Stream deconstruction
2013-09-02 06:57:10	augur	Tekmo: what would you suggest is a better example of a non-stateful iteratee
2013-09-02 06:57:23	Tekmo	mm_freak: Maybe I have the wrong name for it
2013-09-02 06:57:32	Moggle	startling: Is this cheating particularly awkward?
2013-09-02 06:57:44	mm_freak	Tekmo: stream folds and unfolds…  GHC seems to deal very well with these
2013-09-02 06:57:49	Tekmo	augur: Well, there are no interesting examples of non-stateful iteratees if you don't use effects
2013-09-02 06:58:04	Tekmo	augur: It's only when you make it a monad transformer that you have useful non-stateful iteratees
2013-09-02 06:58:06	<--	Demos (~Demos@westquad-148080.reshall.umich.edu) has quit (Read error: Connection reset by peer)
2013-09-02 06:58:19	augur	Tekmo: then quite complaining! :p
2013-09-02 06:58:21	augur	quit*
2013-09-02 06:58:23	Tekmo	augur: :)
2013-09-02 06:58:29	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-02 06:58:36	edwardk	mm_freak: my local machines repo is a bit fubared, but i do intend to fix up mealy with the monad transformer and maybe even moore as a comonad transformer
2013-09-02 06:58:36	mm_freak	Tekmo: that's basically why pipes performs so well =)
2013-09-02 06:59:00	Tekmo	mm_freak: Actually, `pipes` is horrible for GHC's optimizer
2013-09-02 06:59:06	augur	Tekmo: i dont even understand the monadc ones yet, so i cant write that portion of the tutorial. i just wanted to write something that expressed my current understanding
2013-09-02 06:59:14	edwardk	mm_freak: sadly any form of fusion that needs a tree-like construction, or non-linear usage pattern and it fail miserably
2013-09-02 06:59:27	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-02 06:59:35	carter	edwardk: does anyone have good examples of this lying around
2013-09-02 06:59:36	Tekmo	mm_freak: `pipes` only performs well because of rewrite rules.
2013-09-02 06:59:41	mm_freak	Tekmo: yes, but that has little to do with the recursion…  adding a few SPECIALIZEs improved code performance a lot for me
2013-09-02 06:59:49	carter	would be cool to have ghc trac ticket about those fusion needs
2013-09-02 06:59:50	edwardk	carter: the matrix stuff i talked to you about the other day
2013-09-02 06:59:51	carter	and the rules
2013-09-02 06:59:53	carter	ok
2013-09-02 07:00:00	edwardk	carter: but i don't know that it is _possible_ is the key
2013-09-02 07:00:01	carter	GHC couldn't fuse it well/
2013-09-02 07:00:01	<--	jfischoff (~jfischoff@66.140.190.154) has quit (Quit: jfischoff)
2013-09-02 07:00:04	carter	ok
2013-09-02 07:00:05	carter	well
2013-09-02 07:00:05	Tekmo	mm_freak: Interesting
2013-09-02 07:00:11	edwardk	so i can't really say its a bug =)
2013-09-02 07:00:13	carter	then its a research problem!
2013-09-02 07:00:18	carter	edwardk is it still in the repo?
2013-09-02 07:00:19	mm_freak	Tekmo: to a point where the monadic binding was the most expensive part
2013-09-02 07:00:21	carter	or in the history?
2013-09-02 07:00:22	edwardk	when i'm not able to figure out something better it could do
2013-09-02 07:00:26	edwardk	its not in a repo i've put up
2013-09-02 07:00:29	carter	ok
2013-09-02 07:00:34	-->	RayNbow`TU (~kirika@131.180.203.117) has joined #haskell
2013-09-02 07:00:36	Tekmo	augur: You should also make the code a little more readable
2013-09-02 07:00:46	Tekmo	augur: Do you have syntax highlighting turned on?
2013-09-02 07:00:47	augur	Tekmo: how do you mean
2013-09-02 07:00:47	edwardk	you might find a sketch of a Tensors.hs at the start of the structures repo history
2013-09-02 07:00:49	carter	edwardk: if you push it to a "bad fusion dont' touch this" branch, i'll write a trac ticket
2013-09-02 07:00:54	augur	Tekmo: er??
2013-09-02 07:00:56	carter	and pull out the example codes
2013-09-02 07:00:59	edwardk	but its going to be its own thing
2013-09-02 07:01:01	carter	to nerd snipe someone for ghc
2013-09-02 07:01:02	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-02 07:01:02	mm_freak	edwardk: currently i'm not using machines…  i just can't find a use case for it
2013-09-02 07:01:03	augur	its a txt file
2013-09-02 07:01:06	carter	ok
2013-09-02 07:01:11	edwardk	i don't have it in a state i'd want it cited in a ticket
2013-09-02 07:01:15	edwardk	mm_freak: fair nuff
2013-09-02 07:01:20	mm_freak	edwardk: either not powerful enough or already solved by pipes/netwire =)
2013-09-02 07:01:24	-->	desc|zenbook (~heh@210.186.159.187) has joined #haskell
2013-09-02 07:01:24	carter	ok
2013-09-02 07:01:38	Tekmo	augur: Maybe it's the font I'm using to view the text file
2013-09-02 07:01:41	edwardk	mm_freak: then i'll carry on my own merry way ;)
2013-09-02 07:01:50	carter	edwardk enough people are talking about having bad fusion / rewrites are fragile examples that I wanna write a ghc trac ticket
2013-09-02 07:01:54	Tekmo	augur: The primes are very hard to see, so the state transitions are difficult for my eyes to follow
2013-09-02 07:02:04	mm_freak	edwardk: also i find that i'm already depending on your libraries too much =P
2013-09-02 07:02:09	augur	Tekmo: that's weird
2013-09-02 07:02:13	edwardk	carter: its a 500 line example litered with poly kinds that doesn't compile.
2013-09-02 07:02:14	-->	phryk (~phryk@static.39.216.9.176.clients.your-server.de) has joined #haskell
2013-09-02 07:02:16	edwardk	its not trac'able
2013-09-02 07:02:18	carter	ok
2013-09-02 07:02:24	Tekmo	I think we ca nget a simple one for this rewrite rule
2013-09-02 07:02:25	carter	is there a way to clean it up
2013-09-02 07:02:27	mm_freak	even toy project usually import Data.Semigroup or Data.Profunctor
2013-09-02 07:02:36	carter	Tekmo?
2013-09-02 07:02:39	Tekmo	{-# RULES "assoc" forall f g h . (f . g) . h = f . (g . h) #-}
2013-09-02 07:02:42	-->	akurei__ (~akurei@lak-29-213.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-02 07:02:46	<--	Wuzzy (~Wuzzy@p549FA2F8.dip0.t-ipconnect.de) has quit (Quit: Wuzzy)
2013-09-02 07:03:01	carter	thats hard to fire?
2013-09-02 07:03:08	Tekmo	carter: Let me check
2013-09-02 07:03:10	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Connection reset by peer)
2013-09-02 07:03:12	edwardk	carter: i'm not planning on thinking about it, as i have enough trouble fitting the whole tensors project in my head let alone letting it serve multiple masters ;)
2013-09-02 07:03:18	carter	ok
2013-09-02 07:03:22	carter	fineeee
2013-09-02 07:03:23	carter	:)
2013-09-02 07:03:25	<--	akurei_ (~akurei@lak-67-183.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 246 seconds)
2013-09-02 07:03:31	-->	isenmann (~isenmann@blackhole.science-computing.de) has joined #haskell
2013-09-02 07:03:34	-->	mno2 (~mno2@wlan73.cc.ntu.edu.tw) has joined #haskell
2013-09-02 07:03:35	carter	edwardk: , this is the tensors stuff, not the sparse stuff, go tit
2013-09-02 07:03:36	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 07:03:36	startling	would that be a performance improvement in general? why?
2013-09-02 07:03:42	carter	startling which what?
2013-09-02 07:03:47	carter	startling: hows the goog?
2013-09-02 07:03:53	amosr	Tekmo: do you have (.) NOINLINE or some later phase for that ?
2013-09-02 07:03:54	startling	{-# RULES "assoc" forall f g h . (f . g) . h = f . (g . h) #-}
2013-09-02 07:03:54	edwardk	yeah
2013-09-02 07:04:04	startling	carter, I've only just responded
2013-09-02 07:04:07	carter	oh
2013-09-02 07:04:10	Tekmo	Nope, never mind
2013-09-02 07:04:12	Tekmo	That rule fired, too
2013-09-02 07:04:25	startling	oh, I see, I read it backwards.
2013-09-02 07:04:26	carter	what would the cp's version of the map fusion rule?
2013-09-02 07:04:37	startling	f . (g . h) is less nesty than (f . g) . h
2013-09-02 07:04:47	carter	why's that?
2013-09-02 07:04:48	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Read error: Operation timed out)
2013-09-02 07:04:56	carter	for streams i could see that
2013-09-02 07:05:05	startling	oh, wait, no it's not.
2013-09-02 07:05:11	startling	I read it backwards backwards.
2013-09-02 07:05:17	Tekmo	Maybe GHC's rewrite rule firings have improved since the last time I checked
2013-09-02 07:05:22	carter	ok
2013-09-02 07:05:25	carter	well
2013-09-02 07:05:25	shachaf	Compare to join . join vs. join . fmap join
2013-09-02 07:05:27	mm_freak	for regular functions you want to left-associate (.)
2013-09-02 07:05:31	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-09-02 07:05:45	shachaf	Anyway, I don't think rules are the right approach to that for the most part.
2013-09-02 07:05:52	carter	for which?
2013-09-02 07:05:59	amosr	I remember having an issue with operator sections in rewrite rules before
2013-09-02 07:06:01	edwardk	reassociations
2013-09-02 07:06:08	shachaf	I don't even know what people are talking about right now, actually.
2013-09-02 07:06:14	startling	mm_freak: right, since otherwise you need a stackish thing
2013-09-02 07:06:36	carter	shachaf: some folks were saying "i have fusion rewrite rules that are hard to fire!"
2013-09-02 07:06:45	carter	and i'm like "i want examples that make sense so i can put it on ghc trac"
2013-09-02 07:07:12	carter	mwahah
2013-09-02 07:07:29	shachaf	carter: I had an example along these lines a while ago that was really hard to get GHC to fire.
2013-09-02 07:07:34	-->	emiliano1_ (~emiliano@216.155.131.69) has joined #haskell
2013-09-02 07:07:39	carter	oh?
2013-09-02 07:07:40	shachaf	But actually it was something I wouldn't even expect GHC to do.
2013-09-02 07:07:45	mm_freak	well, there are some cases, where right-associated (.) works better
2013-09-02 07:07:45	carter	does it still live somehere?
2013-09-02 07:07:53	mm_freak	const x . (g . h)
2013-09-02 07:07:54	shachaf	Never mind that.
2013-09-02 07:08:07	shachaf	You'd need something more powerful than RULES for what I was after.
2013-09-02 07:08:14	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-02 07:08:17	mm_freak	but if all functions are strict, left-associated (.) works better
2013-09-02 07:08:17	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-09-02 07:08:33	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-09-02 07:08:40	carter	shachaf thats ok
2013-09-02 07:08:45	carter	still worth documenting!
2013-09-02 07:08:50	shachaf	Nah.
2013-09-02 07:08:57	 *	shachaf is on the train right now anyway. Disappearing in a moment.
2013-09-02 07:09:01	carter	ok
2013-09-02 07:09:01	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-02 07:09:02	<--	emiliano1 (~emiliano@194.123.128.201) has quit (Ping timeout: 240 seconds)
2013-09-02 07:09:02	--	emiliano1_ is now known as emiliano1
2013-09-02 07:09:09	<--	u_ (~phillip@75.57.168.247) has quit (Remote host closed the connection)
2013-09-02 07:09:11	Tekmo	augur: I don't see any other obvious problems with the text
2013-09-02 07:09:15	carter	shachaf : i mean, theres eg repa4 which is going full compiler plugin
2013-09-02 07:09:30	mm_freak	> foldr (.) id (const 3 : repeat id) 15
2013-09-02 07:09:31	lambdabot	  3
2013-09-02 07:09:46	carter	woulbe be intersting / perhaps useful to have something thats not quite full compiler plugin
2013-09-02 07:10:27	Tekmo	I feel like there needs to be a simpler and more portable version of repa for accessing unboxed vectors using multidimensional indices
2013-09-02 07:10:35	amosr	am I missing something? why do you care about associativity of (.), aren't you just better off making sure it inlines?
2013-09-02 07:10:48	-->	dmj`` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-02 07:10:52	carter	Tekmo: oh
2013-09-02 07:10:56	-->	abhiranjan (7aa9d89d@gateway/web/freenode/ip.122.169.216.157) has joined #haskell
2013-09-02 07:11:02	carter	Tekmo: i'll be finally releasing that this month :)
2013-09-02 07:11:05	mm_freak	Tekmo: which part of repa do you want?  parallelism or shapes?
2013-09-02 07:11:08	carter	shaps
2013-09-02 07:11:10	Tekmo	carter: What is it called?
2013-09-02 07:11:14	Tekmo	mm_freak: None
2013-09-02 07:11:17	carter	its not released yet
2013-09-02 07:11:23	Tekmo	mm_freak: I just want unboxed vectors + multi-dimensional indices
2013-09-02 07:11:29	augur	Tekmo: im primarily concerned with how well it conveys the idea behind iteratees
2013-09-02 07:11:32	carter	Tekmo: plus more than just row major :)
2013-09-02 07:11:50	<--	yacks (~py@103.6.159.99) has quit (Read error: Operation timed out)
2013-09-02 07:12:09	augur	Tekmo: how does it feel? a nice, easy way to slip into iteratees? or forced and obtuse?
2013-09-02 07:12:12	mm_freak	Tekmo: multidimensional indices a la Ix instead of repa shapes?
2013-09-02 07:12:38	Tekmo	augur: I think it is good the way it is
2013-09-02 07:12:52	Tekmo	augur: You have to remember than any single way of writing about it will never hit the mark for your entire audience
2013-09-02 07:13:03	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-02 07:13:13	Tekmo	augur: Usually different people will have a different concept that will help them leap the gap
2013-09-02 07:13:35	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-09-02 07:13:38	Tekmo	augur: I think that some people will definitely get the metaphor in terms of state machines and that's good enough for the scope of this article
2013-09-02 07:13:38	carter	mm_freak: repa has a pretty nice idea for rank
2013-09-02 07:13:45	carter	but … only has one memory layout!
2013-09-02 07:13:47	carter	ish
2013-09-02 07:13:49	mm_freak	carter: i know, but Tekmo seems to disagree =)
2013-09-02 07:13:50	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-09-02 07:13:53	Tekmo	mm_freak: I'm fine with either Ix or repa shapes
2013-09-02 07:13:56	-->	zRecursive (~czsq888@110.188.66.221) has joined #haskell
2013-09-02 07:14:02	carter	its the rest of repa thats the issue :)
2013-09-02 07:14:08	carter	its not general enough
2013-09-02 07:14:11	carter	its a great research lib
2013-09-02 07:14:24	Tekmo	augur: There is a rule of thumb that people will only take away one thing, maybe, from any post you write
2013-09-02 07:14:29	Tekmo	augur: So you should only say one thing
2013-09-02 07:14:46	Tekmo	augur: And write now what you have is pretty good.  You have a very clear story about state machines
2013-09-02 07:15:04	Tekmo	*right now
2013-09-02 07:15:07	mm_freak	Tekmo: vectors with repa shapes may be easy to get, although Ix may be more powerful and already provides all you need to put a layer around Vector
2013-09-02 07:15:18	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-02 07:15:20	mm_freak	with a simpler interface you won't get the parallelism though
2013-09-02 07:15:27	Tekmo	mm_freak: I don't care about parallelism
2013-09-02 07:15:56	Tekmo	mm_freak: I just want C-style multi-dimensional arrays
2013-09-02 07:16:02	Moggle	Uh, what's the easiest way to have a sort of 'extensible' data type that is serializable?
2013-09-02 07:16:08	mm_freak	Tekmo: oh, you have those
2013-09-02 07:16:10	carter	Tekmo messaged yah
2013-09-02 07:16:13	mm_freak	Vector (Vector a)
2013-09-02 07:16:17	Tekmo	mm_freak: Nope
2013-09-02 07:16:19	Moggle	Existential data types are close to ideal but can't be easily serialized.
2013-09-02 07:16:22	Tekmo	mm_freak: The outer vector is not boxed
2013-09-02 07:16:24	carter	Tekmo slices?
2013-09-02 07:16:25	Tekmo	mm_freak: That's the problem
2013-09-02 07:16:31	Tekmo	*not unboxed
2013-09-02 07:16:32	carter	what do you mean?
2013-09-02 07:16:41	carter	ohhhh
2013-09-02 07:16:43	carter	repa does that
2013-09-02 07:16:45	Tekmo	Right
2013-09-02 07:16:49	Tekmo	But that's the issue I originally raise
2013-09-02 07:16:53	carter	yeah
2013-09-02 07:16:56	Tekmo	I want something like repa, but more portable
2013-09-02 07:16:56	mm_freak	Tekmo: that's not really a fundamental problem…  it's rather a missing feature
2013-09-02 07:17:02	carter	portable in what sense?
2013-09-02 07:17:08	Tekmo	Sorry, I mean simpler
2013-09-02 07:17:11	Tekmo	and less experimental
2013-09-02 07:17:13	carter	mm_freak: actually its a deeper design problem than that
2013-09-02 07:17:21	carter	Tekmo: well, you mean imperative apit too?
2013-09-02 07:17:22	carter	:)
2013-09-02 07:17:29	mm_freak	well, yeah
2013-09-02 07:17:33	<--	croyd (~croyd@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-02 07:17:37	Tekmo	carter: No, I'm fine with something like `vector`
2013-09-02 07:17:39	carter	yes
2013-09-02 07:17:41	mm_freak	vectors don't encode their length in their type
2013-09-02 07:17:46	mm_freak	if they did, it would be easy
2013-09-02 07:17:48	Tekmo	Really I just want multi-dimensional interface to unboxed vectors
2013-09-02 07:17:53	carter	yeah
2013-09-02 07:18:01	carter	Tekmo: what did you say no to?
2013-09-02 07:18:06	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-02 07:18:07	carter	vector has an imperative api...
2013-09-02 07:18:12	carter	along with the functional
2013-09-02 07:18:17	mm_freak	Tekmo: anyway, repa really just lacks many 'vector' operations…  it's not really more complicated
2013-09-02 07:18:17	Tekmo	carter: I was saying No to `Vector (Vector a)`
2013-09-02 07:18:23	carter	oh yea that sucks
2013-09-02 07:18:25	carter	agreed
2013-09-02 07:18:36	Tekmo	Really, boxed vectors are useless
2013-09-02 07:18:39	carter	the bed and breakfast lib made me froth from the mouth in bad locality rage
2013-09-02 07:18:41	Tekmo	Except for memoization
2013-09-02 07:18:44	Tekmo	They rock for memoization
2013-09-02 07:18:45	-->	danharaj (~Adium@2002:457a:8edb:0:4135:3f4:e8da:a466) has joined #haskell
2013-09-02 07:18:52	carter	or if you want to try a tiny matrix with rationals
2013-09-02 07:19:03	<--	eyebloom (~eyebloom@pool-71-183-130-8.nycmny.east.verizon.net) has quit (Quit: eyebloom)
2013-09-02 07:19:06	carter	to sanity check your math works
2013-09-02 07:19:16	mm_freak	Tekmo: they rock for other things, too…  boxed vectors are sometimes a good replacement for Seq
2013-09-02 07:19:17	carter	(assuming you don't need transcendental functions or square roots)
2013-09-02 07:19:21	Tekmo	Yeah, it also bothers me that there is no `Int`/`Integer` matrix library
2013-09-02 07:19:23	-->	lemao (~lemao@2a02:200:1fff:5:c519:c018:219:2475) has joined #haskell
2013-09-02 07:19:41	carter	Tekmo: that gets into needing better num type classes though
2013-09-02 07:19:47	carter	slippery slope!
2013-09-02 07:20:03	mm_freak	Tekmo: the 'linear' library can do a lot with integer vectors/matrices
2013-09-02 07:20:03	Tekmo	carter: Well, you don't have to use the `Num` class
2013-09-02 07:20:04	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-02 07:20:10	Tekmo	carter: I don't mind custom operators
2013-09-02 07:20:21	<--	pootler (~merv.hamm@94.198.124.172) has quit (Ping timeout: 256 seconds)
2013-09-02 07:20:23	<--	emiliano1 (~emiliano@216.155.131.69) has quit (Ping timeout: 240 seconds)
2013-09-02 07:20:25	carter	Tekmo: 'm trying to not yak shave tooooo much before release
2013-09-02 07:20:32	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-02 07:20:42	mm_freak	but it's not really a linear algebra library…  it's more a vector/matrix arithmetic library
2013-09-02 07:20:51	carter	which ?
2013-09-02 07:20:55	mm_freak	carter: linear
2013-09-02 07:21:06	-->	emiliano1 (~emiliano@194.123.128.201) has joined #haskell
2013-09-02 07:21:07	carter	mm_freak: its more what edwardk  wanted for writing games library :)
2013-09-02 07:21:19	-->	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has joined #haskell
2013-09-02 07:21:19	Tekmo	Speaking of which, has anybody ever written up this post of Russell O'Connor's: http://r6.ca/blog/20110808T035622Z.html
2013-09-02 07:21:33	mm_freak	carter: yeah, which is pretty much vector/matrix arithmetic =)
2013-09-02 07:21:46	carter	and solvers for 3x3 asnd 4x4 matrices
2013-09-02 07:21:48	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 07:21:54	mm_freak	also the type classes in 'linear' have some weaknesses compared to conal's vector-space library
2013-09-02 07:22:07	edwardk	linear exists because i had a dozen people ask me to port out the stuff i had in physics
2013-09-02 07:22:08	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-02 07:22:17	 *	hackagebot crypto-random 0.0.5 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.5 (VincentHanquez)
2013-09-02 07:22:56	edwardk	you can't give certain types instances, yes. linear was written for a smaller domain, and one where the inability to write those instances was a feature.
2013-09-02 07:23:02	carter	mm_freak how so?
2013-09-02 07:23:05	edwardk	its slowly drifting away from that as folks add sparse vector spaces
2013-09-02 07:23:10	mm_freak	carter: what edwardk said
2013-09-02 07:23:38	<--	danharaj (~Adium@2002:457a:8edb:0:4135:3f4:e8da:a466) has quit (Ping timeout: 264 seconds)
2013-09-02 07:23:47	carter	Tekmo: point being, i'll be releasing soething that *includes* what you want
2013-09-02 07:23:49	mm_freak	carter: example:  with vector-space you can write this instance:  instance (VectorSpace b) => VectorSpace (F b)
2013-09-02 07:23:54	carter	ok
2013-09-02 07:24:04	carter	where F is what?
2013-09-02 07:24:09	mm_freak	some functor of your choice
2013-09-02 07:24:14	carter	@hackage vector-space
2013-09-02 07:24:14	lambdabot	http://hackage.haskell.org/package/vector-space
2013-09-02 07:24:33	mm_freak	so you can write x ^+^ y instead of liftA2 (^+^) x y
2013-09-02 07:24:37	edwardk	linear is based on the observation that every vector space is a free vector space, and so can be put into the form (e -> r), so we find a representable functor that has representation e, so that (e -> r) ~ f r, then we capture memoization. this doesn't capture unboxed vector spaces though
2013-09-02 07:24:42	carter	mm_freak: so i actually disagre with that design in the performance case
2013-09-02 07:24:49	carter	or at least, i have a different sort of functorality
2013-09-02 07:24:50	carter	ish
2013-09-02 07:25:00	carter	yeah
2013-09-02 07:25:00	mm_freak	carter: performance of linear is fine
2013-09-02 07:25:13	carter	for things that aren't meant to be using blas, yes :)
2013-09-02 07:25:17	carter	i'm competing against blas!
2013-09-02 07:25:28	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 246 seconds)
2013-09-02 07:25:30	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-02 07:25:35	edwardk	carter: linear was used to back my edsl for generating gpu code. it works fine for sufficiently deep embeddings =P
2013-09-02 07:25:39	carter	ok
2013-09-02 07:25:41	carter	yeup!
2013-09-02 07:25:43	carter	agree with that
2013-09-02 07:25:51	carter	its a great DSL for simd
2013-09-02 07:26:01	mm_freak	Taneb: liftA2 is used in the context of Wire, not the underlying monad (that would be a type error)
2013-09-02 07:26:03	carter	i was planning on doing that .....
2013-09-02 07:26:07	carter	but anyways
2013-09-02 07:26:08	carter	yeah
2013-09-02 07:26:19	edwardk	the problem i was having was every time i turned around someone had crippled their linear algebra libraries by focusing on 'optimizations' like unboxing that made it impossible for me to use the library for actually doing anything deep
2013-09-02 07:26:19	Taneb	mm_freak, ah, right
2013-09-02 07:26:28	edwardk	so i went back and started over from representability
2013-09-02 07:26:32	mm_freak	Taneb: where you can't actually use liftM2 =)
2013-09-02 07:26:33	<--	ananthakumaran (~Adium@117.192.147.65) has quit (Quit: Leaving.)
2013-09-02 07:26:51	Taneb	mm_freak, stupid me for not seeing that
2013-09-02 07:26:54	Tekmo	carter: What is your library called?
2013-09-02 07:26:56	Taneb	It feels so obvious now
2013-09-02 07:27:11	carter	Teckmo: its not released yet
2013-09-02 07:27:18	carter	also look at the priv msg
2013-09-02 07:27:30	-->	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has joined #haskell
2013-09-02 07:27:44	carter	Tekmo: get the mesage?
2013-09-02 07:27:49	Tekmo	carter: I'm not sure
2013-09-02 07:28:00	carter	did you get a message from me or not?
2013-09-02 07:28:06	Tekmo	I'm not sure :)
2013-09-02 07:28:07	-->	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has joined #haskell
2013-09-02 07:28:10	Tekmo	I'm still new to using irc
2013-09-02 07:28:12	carter	ok
2013-09-02 07:28:20	carter	are you using a gui client like textual?
2013-09-02 07:28:30	carter	(thats what i use, and i think a bunch of others here use)
2013-09-02 07:28:37	Tekmo	irssi
2013-09-02 07:29:01	carter	a private message looks like a channel
2013-09-02 07:29:03	carter	or "query"
2013-09-02 07:29:14	Tekmo	Found it
2013-09-02 07:29:16	Tekmo	It's Alt-3
2013-09-02 07:29:29	<--	darthdeus (~darthdeus@194.228.13.148) has quit (Quit: Leaving...)
2013-09-02 07:29:31	-->	shintah (bebble@h-136-135.a336.priv.bahnhof.se) has joined #haskell
2013-09-02 07:29:52	Taneb	mm_freak, would you mind if I continue working on a library that's very similar to netwire, but different enough to be its own thing (barely)?
2013-09-02 07:30:02	begriffs	Has anyone else ever reached a state of despair trying to fix Haskell dependencies? Is this just a rite of passage? How do I wipe all traces of the haskell platform, cabal, hsenv, and cabal-dev from my system to try a fresh start? Is there a script for this?
2013-09-02 07:30:05	mm_freak	Taneb: why would i mind?
2013-09-02 07:30:08	-->	eldariof (~CLD@pppoe-196-161-dyn-sr.volgaline.ru) has joined #haskell
2013-09-02 07:30:21	startling	begriffs: rm -rf ~/.ghc
2013-09-02 07:30:23	<--	W|cKeD (~Fatwreck@184.75.223.154) has quit (Ping timeout: 260 seconds)
2013-09-02 07:30:26	<--	estebistec (~estebiste@72.133.228.205) has quit (Remote host closed the connection)
2013-09-02 07:30:39	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-02 07:30:40	Taneb	mm_freak, it feels like I'm encroaching on your territory somewhat, and I'd rather have your permission
2013-09-02 07:30:58	<--	andares (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-02 07:31:02	mm_freak	Taneb: FRP is not my territory…  it's conal's and i encroached on it already =P
2013-09-02 07:31:50	mm_freak	Taneb: but that makes me curious…  may i ask what you're working on?
2013-09-02 07:32:13	Taneb	mm_freak, https://github.com/Taneb/Bolt
2013-09-02 07:32:15	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 260 seconds)
2013-09-02 07:32:40	dmj``	begriffs: are you using osx or linux?
2013-09-02 07:32:42	mm_freak	"FRP library inspired by (ripping off) netwire"
2013-09-02 07:32:43	mm_freak	=)
2013-09-02 07:32:50	Taneb	The main differences are that I use a different Alternative instance, and have laxer constraints on things where you've used Monad because of AMP
2013-09-02 07:33:00	Taneb	Well, because of AMP not happening yet
2013-09-02 07:33:07	Taneb	mm_freak, hey, at least I'm honest
2013-09-02 07:33:12	mm_freak	AMP?
2013-09-02 07:33:25	Tekmo	Applicative Monad Proposal
2013-09-02 07:33:50	dmj``	begriffs: I use this, sudo /Library/Haskell/bin/uninstall-hs all --remove
2013-09-02 07:33:59	dmj``	begriffs: on osx
2013-09-02 07:34:01	arkeet	I thought it was called FAM.
2013-09-02 07:34:19	Taneb	arkeet, both are used, I think
2013-09-02 07:34:25	begriffs	dmj``: yeah I'm on os x. I'll try that, thank you!
2013-09-02 07:34:25	startling	PAM, if you're french.
2013-09-02 07:34:28	arkeet	I don't like either, fwiw
2013-09-02 07:34:33	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-02 07:34:48	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-02 07:35:46	dmj``	begriffs: np
2013-09-02 07:35:51	mm_freak	Taneb: i see the different Alternative instance…  why did you choose that one?
2013-09-02 07:35:54	<--	Azel (~Thunderbi@2a02-8420-41f9-8700-ddae-0554-294b-8b7e.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-09-02 07:36:04	arkeet	I think both are a case of UAS.
2013-09-02 07:36:12	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-02 07:36:18	Taneb	mm_freak, because it made sense and the other one's still there in the ArrowPlus
2013-09-02 07:36:40	Taneb	To me it felt obvious, I don't know
2013-09-02 07:36:42	--	dmj`` is now known as dmj`
2013-09-02 07:37:14	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-02 07:37:15	joneshf-laptop	is there a typesafe way to write a function that takes a list of length two to a 2-tuple that also wont make ghc complain about non-exhaustive pattern matching?
2013-09-02 07:37:17	 *	hackagebot timeplot 1.0.22 - A tool for visualizing time series from log files.  http://hackage.haskell.org/package/timeplot-1.0.22 (EugeneKirpichov)
2013-09-02 07:37:33	joneshf-laptop	i mean, aside from having a case for everything else just throwing an exception
2013-09-02 07:37:40	-->	ioanel (~Thunderbi@188.25.8.236) has joined #haskell
2013-09-02 07:37:51	arkeet	joneshf-laptop: there is no way to express "list of length two" in the type system.
2013-09-02 07:38:01	mm_freak	Taneb: not sure where i would use it…  if the underlying functor gets an 'empty' your only choice is to start over, resetting to the previous state
2013-09-02 07:38:05	arkeet	unless you want to use a different list type.
2013-09-02 07:38:18	-->	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has joined #haskell
2013-09-02 07:38:23	tikhon	or an external extension like liquid types
2013-09-02 07:38:36	Taneb	mm_freak, true, but it's still a valid instance
2013-09-02 07:38:55	mm_freak	Taneb: also (<|>) is the main choice operator to me…  i provide ArrowZero and ArrowPlus mainly for the sake of completeness
2013-09-02 07:39:00	joneshf-laptop	hmm, that's disappointing
2013-09-02 07:39:05	Tekmo	arkeet: type List2 a = (a, a)
2013-09-02 07:39:19	arkeet	Tekmo: that counts as using a different list type :p
2013-09-02 07:39:23	arkeet	and it would be better as a newtype or data anyway.
2013-09-02 07:39:30	tikhon	joneshf-laptop: it's exactly the same reason you can't have a typesafe function that takes even numbers
2013-09-02 07:39:41	Taneb	mm_freak, actually, if the underlying functor recieves "empty" you can (<|>) it
2013-09-02 07:39:50	joneshf-laptop	tikhon: what reason is that?
2013-09-02 07:39:50	-->	mbuf (user@nat/redhat/x-cieigizohwwesffk) has joined #haskell
2013-09-02 07:39:56	<--	SBauer (~SBauer@68.229.91.95) has quit (Remote host closed the connection)
2013-09-02 07:40:33	aleator	"commitAndReleaseBuffer: invalid argument (invalid character)" really makes for a great morning.. :/
2013-09-02 07:40:36	tikhon	joneshf-laptop: types can't normally depend on runtime values
2013-09-02 07:40:40	Tekmo	arkeet: :)
2013-09-02 07:40:47	tikhon	in Haskell
2013-09-02 07:41:00	mm_freak	Taneb: it's an unfortunate instance…  consider x <|> y where x is empty every other instant
2013-09-02 07:41:01	<--	yacks (~py@103.6.159.99) has quit (Quit: Leaving)
2013-09-02 07:41:02	<--	kallisti (~adam@c-24-99-220-130.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-02 07:41:08	mm_freak	Taneb: time will now run half as fast for y
2013-09-02 07:41:12	joneshf-laptop	hmm
2013-09-02 07:41:29	Taneb	mm_freak, I think I account for that, but I'm not sure
2013-09-02 07:41:39	mm_freak	Taneb: you don't account for that
2013-09-02 07:41:46	Taneb	At the very least I know how to account for it
2013-09-02 07:41:58	mm_freak	Taneb: then you know more than me =)
2013-09-02 07:42:20	mm_freak	because you can't observe 'empty' in terms of Alternative
2013-09-02 07:42:35	mm_freak	so you don't know when to accumulate and when to pass
2013-09-02 07:42:49	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-09-02 07:43:01	mm_freak	Taneb: and that makes sense…  just check the Alternative instance of Maybe
2013-09-02 07:43:01	Taneb	mm_freak, good point
2013-09-02 07:43:05	mm_freak	Just x <|> _ = Just x
2013-09-02 07:43:22	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-09-02 07:43:23	dwcook	Is there a generally recommended natural number type to use?
2013-09-02 07:43:40	<--	tdammers (~tobias@unaffiliated/tdammers) has quit (Read error: Operation timed out)
2013-09-02 07:43:43	mm_freak	dwcook: what properties do you want?
2013-09-02 07:43:50	dwcook	mm_freak, basically, non-negative integers.
2013-09-02 07:43:59	dwcook	Statically assured, if possible.
2013-09-02 07:44:24	mm_freak	dwcook: fast (like Integer) or flexible (like [()])?
2013-09-02 07:44:24	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-02 07:44:48	Fuuzetsu	Why not use TypeNats?
2013-09-02 07:44:51	dwcook	mm_freak, I don't care about performance, I would prefer correctness.
2013-09-02 07:44:55	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-02 07:45:13	mm_freak	Fuuzetsu: because they are type-level
2013-09-02 07:45:40	arkeet	dwcook: coq/agda is that way -->
2013-09-02 07:45:42	Fuuzetsu	people still have values in their programs?
2013-09-02 07:45:42	arkeet	;)
2013-09-02 07:45:44	elliott	dwcook: use the nats package
2013-09-02 07:45:45	mm_freak	dwcook: i'd just write a wrapper around Integer…  something like that likely exists on hackage
2013-09-02 07:45:50	elliott	edwardk approved.
2013-09-02 07:45:52	arkeet	wrappers are fine.
2013-09-02 07:45:59	Taneb	@djinn (a -> b -> c) -> (x -> y -> z) -> (a, x) -> (b, y) -> (c, z)
2013-09-02 07:45:59	lambdabot	f a b (c, d) (e, f) = (a c e, b d f)
2013-09-02 07:46:13	mm_freak	dwcook: you won't get any static guarantees though
2013-09-02 07:46:17	Taneb	arkeet, as elliott said...
2013-09-02 07:46:19	Taneb	@hackage nats
2013-09-02 07:46:19	lambdabot	http://hackage.haskell.org/package/nats
2013-09-02 07:46:24	mm_freak	but you will get run-time errors, which is better than nothing
2013-09-02 07:46:35	arkeet	yes
2013-09-02 07:46:46	dwcook	Not in the mood to learn Agda just for this, so I will try the nats package. Thanks. :)
2013-09-02 07:46:49	<--	emiliano1 (~emiliano@194.123.128.201) has quit (Quit: emiliano1)
2013-09-02 07:46:56	arkeet	nats is a wrapper around Integer.
2013-09-02 07:47:12	<--	otulp (~otulp@cm-84.209.90.171.getinternet.no) has quit (Read error: Connection reset by peer)
2013-09-02 07:47:26	-->	sopvop (~lonokhov@213.170.88.43) has joined #haskell
2013-09-02 07:47:40	-->	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has joined #haskell
2013-09-02 07:47:41	Taneb	Damn, the function I want is in bifunctors
2013-09-02 07:47:47	-->	ousado (~ousado@unaffiliated/ousado) has joined #haskell
2013-09-02 07:47:52	dwcook	mm_freak, actually, [()] is pretty tempting. Is there an already written wrapper for that that provides Num?
2013-09-02 07:47:59	Taneb	But I don't really want to incur the dependency
2013-09-02 07:48:12	mm_freak	dwcook: if you want that, you should really define this:  data Nat = Zero | Succ Nat
2013-09-02 07:48:17	elliott	if you use [()] I'll cry.
2013-09-02 07:48:19	arkeet	the only advantage [()] gives you is laziness.
2013-09-02 07:48:39	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-02 07:48:56	mm_freak	dwcook: it's a good type for what it does do…  what it doesn't to is arithmetic with even moderately large numbers =)
2013-09-02 07:49:04	dwcook	mm_freak, haha, fair enough.
2013-09-02 07:49:15	dwcook	My values will be maybe as great as the tens, anyway.
2013-09-02 07:49:17	mm_freak	500000*500000 might actually take a few minutes ;)
2013-09-02 07:49:24	<--	Letchik (~CrabMan@h86-62-100-131.ln.rinet.ru) has quit (Read error: Connection reset by peer)
2013-09-02 07:49:37	<--	Munksgaard (~philip@80-71-132-106.u.parknet.dk) has quit (Ping timeout: 246 seconds)
2013-09-02 07:49:52	Taneb	(clearly the correct way is newtype CNat = CNat {forall a. (a -> a) -> a -> a} :P)
2013-09-02 07:50:17	mm_freak	Taneb: if just that weren't a syntax error =P
2013-09-02 07:50:30	Taneb	mm_freak, shh you
2013-09-02 07:50:38	-->	W|cKeD (~Fatwreck@184.75.214.58) has joined #haskell
2013-09-02 07:50:55	-->	emiliano1 (~emiliano@194.123.128.201) has joined #haskell
2013-09-02 07:51:37	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-02 07:52:17	 *	hackagebot bytes 0.11.4 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.11.4 (EdwardKmett)
2013-09-02 07:52:31	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-02 07:52:42	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 07:52:52	-->	otulp (~otulp@cm-84.209.90.171.getinternet.no) has joined #haskell
2013-09-02 07:52:54	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 07:52:58	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-02 07:53:28	<--	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-09-02 07:53:46	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-02 07:53:48	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-02 07:54:57	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-02 07:55:14	<--	lemao (~lemao@2a02:200:1fff:5:c519:c018:219:2475) has quit (Remote host closed the connection)
2013-09-02 07:55:42	-->	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-02 07:56:28	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 07:56:35	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Client Quit)
2013-09-02 07:57:32	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 07:57:38	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-02 07:58:33	<--	emiliano1 (~emiliano@194.123.128.201) has quit (Quit: emiliano1)
2013-09-02 07:58:56	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-02 08:00:46	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-02 08:01:21	-->	emiliano1 (~emiliano@194.123.128.201) has joined #haskell
2013-09-02 08:01:29	<--	Targen (~iguana@190.73.206.135) has quit (Read error: Connection reset by peer)
2013-09-02 08:01:59	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-02 08:02:17	-->	make_sense (~make_sens@178.124.116.35) has joined #haskell
2013-09-02 08:02:38	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-09-02 08:03:13	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-02 08:03:52	--	gpampara is now known as gpampara_off
2013-09-02 08:03:55	Taneb	mm_freak, now that you've pointed it out, I think my Alternative instance is broken after the first instant anyway
2013-09-02 08:05:01	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 08:05:20	<--	pierreghz (~krux@125.84-136-217.adsl-dyn.isp.belgacom.be) has quit (Read error: Connection reset by peer)
2013-09-02 08:05:35	-->	MitchW_ (~MitchW@124.168.213.184) has joined #haskell
2013-09-02 08:06:02	Taneb	Oh, I think it still obeys the Alternative laws
2013-09-02 08:06:28	startling	newtype CNat = CNat (forall a. (a -> a) -> a -> IO a)
2013-09-02 08:06:33	startling	otherwise it's just Nat
2013-09-02 08:07:22	<--	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has quit (Quit: Leaving)
2013-09-02 08:07:36	<--	wimpunk (~wimpunk@anon-38-182.vpn.ipredator.se) has quit (Disconnected by services)
2013-09-02 08:08:27	mm_freak	i just had a minor epiphany
2013-09-02 08:08:34	-->	FalconKirtaran2 (~FalconKir@anon-38-182.vpn.ipredator.se) has joined #haskell
2013-09-02 08:08:34	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-02 08:08:38	mm_freak	netwire is a general stream fuser…
2013-09-02 08:09:18	<--	emiliano1 (~emiliano@194.123.128.201) has quit (Quit: emiliano1)
2013-09-02 08:10:17	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-02 08:10:26	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Ping timeout: 245 seconds)
2013-09-02 08:10:29	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-02 08:10:58	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 245 seconds)
2013-09-02 08:11:02	-->	tarrasch (~arash@elodia.olf.sgsnet.se) has joined #haskell
2013-09-02 08:11:20	-->	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has joined #haskell
2013-09-02 08:11:45	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 08:12:02	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-02 08:13:04	<--	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has quit (Ping timeout: 246 seconds)
2013-09-02 08:15:07	Vertue	Do anyone know how to convert a sql varbinary to string in haskell?
2013-09-02 08:15:29	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-02 08:16:13	<--	ystael (~ystael@pool-108-20-246-106.bstnma.east.verizon.net) has quit (Ping timeout: 246 seconds)
2013-09-02 08:17:30	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 245 seconds)
2013-09-02 08:18:34	--	gpampara_off is now known as gpampara
2013-09-02 08:19:00	-->	Munksgaard (~philip@shop3.diku.dk) has joined #haskell
2013-09-02 08:19:04	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 241 seconds)
2013-09-02 08:19:15	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 08:19:31	-->	eis_ (~eis@109.197.218.46) has joined #haskell
2013-09-02 08:20:10	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 08:20:19	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Quit: Konversation terminated!)
2013-09-02 08:20:39	<--	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has quit (Quit: begriffs)
2013-09-02 08:20:50	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 245 seconds)
2013-09-02 08:21:05	<--	znode (~znode@61.143.60.83) has quit (Remote host closed the connection)
2013-09-02 08:23:17	<--	mno2 (~mno2@wlan73.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-02 08:24:14	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-09-02 08:24:36	-->	ill_logic (ada4f629@gateway/web/freenode/ip.173.164.246.41) has joined #haskell
2013-09-02 08:24:56	<--	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has quit (Quit: leaving)
2013-09-02 08:25:20	ill_logic	Hello Haskell people. I have a question. I am looking at: http://hackage.haskell.org/packages/archive/http-streams/0.6.0.2/doc/html/Network-Http-Client.html I did cabal update, cabal install http-streams, to make sure I have the latest version.
2013-09-02 08:25:32	ill_logic	However the example does not work.
2013-09-02 08:25:41	ill_logic	Couldn't match expected type `Hostname' with actual type `[Char]'
2013-09-02 08:25:50	ill_logic	i got a similar thing when I tried the shortcut version with "get"
2013-09-02 08:25:54	ill_logic	except it wanted a URL
2013-09-02 08:26:01	ill_logic	rather than a Hostname
2013-09-02 08:26:18	<--	zbcm (~zbcm@147.41.7.17) has quit (Quit: Leaving)
2013-09-02 08:26:41	ill_logic	I see that Hostname is defined as Bytestring. Well, I imported that. I even tried explicitly casting ("www.example.com" :: Hostname) and it still complains that it's a [Char]
2013-09-02 08:27:44	Moggle	bytestrings are not chars
2013-09-02 08:27:48	mauke	haskell has no casts
2013-09-02 08:27:54	-->	tailcalled (~tailcalle@78.111.169.50) has joined #haskell
2013-09-02 08:27:56	<--	W|cKeD (~Fatwreck@184.75.214.58) has quit (Quit: Leaving)
2013-09-02 08:28:00	Moggle	you _can_ do the stringlike GHC thing i believe
2013-09-02 08:28:45	tikhon	ill_logic: enable the OverloadedStrings extension
2013-09-02 08:28:48	Moggle	uh, try {-# LANGUAGE OverloadedStrings #-}
2013-09-02 08:28:54	tikhon	it makes string literals behave just like numeric literals
2013-09-02 08:29:13	mauke	:-(
2013-09-02 08:29:24	mauke	you could at least use S.pack
2013-09-02 08:29:24	ill_logic	tikhon: Excellent, does the trick. Thank you!
2013-09-02 08:29:35	ill_logic	I will try S.pack
2013-09-02 08:29:41	mauke	import qualified Data.ByteString.Char8 as S
2013-09-02 08:29:41	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-02 08:29:48	mauke	(but it's still slightly evil)
2013-09-02 08:30:02	ill_logic	If that works, I will inform Mr. http-streams to fix their examples with one or the other. i guess preferably the latter.
2013-09-02 08:30:09	ill_logic	why is it evil?
2013-09-02 08:30:24	-->	mno2 (~mno2@wl043.cc.ntu.edu.tw) has joined #haskell
2013-09-02 08:30:28	mauke	because it pretends ByteStrings are strings
2013-09-02 08:30:30	ill_logic	(they also forgot to import Data.Maybe...)
2013-09-02 08:30:35	<--	Ralith (~ralith@c-24-22-231-160.hsd1.wa.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 08:30:41	ill_logic	S.pack changes it explicitly though right?
2013-09-02 08:30:45	-->	pootler (~merv.hamm@46.18.9.33) has joined #haskell
2013-09-02 08:30:46	ill_logic	what does that pretend?
2013-09-02 08:30:47	mauke	String can contain any unicode character
2013-09-02 08:30:55	mauke	ByteString contains bytes
2013-09-02 08:31:44	mauke	I don't know what pack "é" does but it'll either abort the program or return garbage
2013-09-02 08:31:52	tikhon	so something like "ሴ" will be weird
2013-09-02 08:32:02	mauke	well, pack "€" is probably a better example
2013-09-02 08:32:27	dpwright	Data.Text provides a load of functions to convert between encodings, and I think is generally preferred to ByteString these days (right?)
2013-09-02 08:32:56	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-09-02 08:33:24	tikhon	Text and Bytestring do different things
2013-09-02 08:33:45	tikhon	it doesn't make sense to prefer one or the other because they're largely orthogonal
2013-09-02 08:34:02	<--	ihm1 (~izzy@ool-44c4b351.dyn.optonline.net) has quit (Quit: ihm1)
2013-09-02 08:34:05	dpwright	for texty stuff, then
2013-09-02 08:34:12	tikhon	Use Text if you're dealing with something that is text semantically
2013-09-02 08:34:31	dpwright	I was given to believe that there was a time, before Text was written, when bytestring was the go-to for any fast string-like processing, including texty stuff
2013-09-02 08:34:33	tikhon	and Bytestring for binary data
2013-09-02 08:34:49	dpwright	and that's why it shows up in a lot of books/tutorials/etc
2013-09-02 08:34:52	-->	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-09-02 08:35:14	tikhon	seems plausible
2013-09-02 08:35:41	tikhon	honestly, I just use String for everything, but I never do anything where the string code is a bottleneck
2013-09-02 08:36:00	startling	yeah. it's silly to optimize preemptively.
2013-09-02 08:36:23	startling	especially in cases like ByteString, where your optimization might be semantically wrong.
2013-09-02 08:36:29	<--	Gentlecat_ (~Roman@79.105.224.65) has quit (Read error: Connection reset by peer)
2013-09-02 08:36:59	<--	tyfighter (~tyfighter@c-71-202-65-83.hsd1.ca.comcast.net) has quit (Quit: tyfighter)
2013-09-02 08:37:15	Dodek	do you also feel that hackage has a very long response time?
2013-09-02 08:37:28	-->	csakatok_ (~csakatoku@em119-72-198-239.pool.e-mobile.ne.jp) has joined #haskell
2013-09-02 08:38:13	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-02 08:38:32	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-02 08:39:01	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Client Quit)
2013-09-02 08:39:47	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-02 08:40:11	<--	mno2 (~mno2@wl043.cc.ntu.edu.tw) has quit (Read error: Connection reset by peer)
2013-09-02 08:40:15	<--	csakatoku (~csakatoku@em119-72-198-53.pool.e-mobile.ne.jp) has quit (Ping timeout: 256 seconds)
2013-09-02 08:40:40	-->	mno2 (~mno2@wl043.cc.ntu.edu.tw) has joined #haskell
2013-09-02 08:40:44	-->	dropster (~Kim@port284.ds1-oebr.adsl.cybercity.dk) has joined #haskell
2013-09-02 08:41:28	<--	SrPx (~SrPx@177.133.128.167) has quit (Quit: SrPx)
2013-09-02 08:41:30	<--	sxn (~sxn@mnch-4d0db188.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-02 08:41:59	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-02 08:43:06	-->	darthdeus (~darthdeus@2a00:1028:8384:7746:b540:fc:e797:d40f) has joined #haskell
2013-09-02 08:43:10	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 246 seconds)
2013-09-02 08:43:43	sopvop	is -XImpredicativeTypes ok?
2013-09-02 08:43:59	dmwit	Does it do something helpful for you?
2013-09-02 08:44:01	<--	kylcarte (~kcarter@66.165.63.38) has quit (Quit: Lost terminal)
2013-09-02 08:44:53	sopvop	Hm, it seems some other extension has turned it on
2013-09-02 08:44:57	sopvop	nvm
2013-09-02 08:45:05	dmwit	Are you sure?
2013-09-02 08:45:32	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-02 08:45:36	-->	wolfnn (~wolfnn@90.24.131.251) has joined #haskell
2013-09-02 08:45:42	sopvop	Well, it compiled
2013-09-02 08:45:51	<--	eis_ (~eis@109.197.218.46) has quit (Ping timeout: 245 seconds)
2013-09-02 08:46:05	dmwit	My understanding is that ImpredicativeTypes doesn't do anything in modern GHCs.
2013-09-02 08:46:11	-->	tomboy65 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-02 08:46:16	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-02 08:46:35	sopvop	Hm. Oh, It seems I've misinterpreted docs.
2013-09-02 08:46:43	-->	nooodl (~nooodl@38.152-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-02 08:46:49	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-02 08:47:08	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 08:47:15	sopvop	Which one allows me to  foo :: ( forall a . [a]->[a]) -> ...   and use that foralled function on different types of lists?
2013-09-02 08:47:17	-->	PatrickRobotham (80fa2007@gateway/web/freenode/ip.128.250.32.7) has joined #haskell
2013-09-02 08:47:22	sopvop	inside foo
2013-09-02 08:47:24	dmwit	RankNTypes
2013-09-02 08:47:32	sopvop	Ok then :)
2013-09-02 08:47:40	dmwit	(Rank2Types is probably enough. But they do the same thing anyway.)
2013-09-02 08:47:51	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 260 seconds)
2013-09-02 08:49:02	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 240 seconds)
2013-09-02 08:49:34	dmwit	Okay, I'm wrong.
2013-09-02 08:49:39	dmwit	ImpredicativeTypes still does something.
2013-09-02 08:49:55	dmwit	But if you don't need it, avoiding it is better. =)
2013-09-02 08:50:10	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-02 08:50:16	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-02 08:51:03	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-02 08:51:18	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-02 08:51:53	sopvop	avoid extensions at all costs?
2013-09-02 08:52:01	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-09-02 08:52:22	dmwit	heh
2013-09-02 08:52:43	startling	avoid costs
2013-09-02 08:52:52	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-02 08:53:39	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-02 08:53:44	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 08:54:53	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-02 08:55:42	dmwit	Interesting. I really don't understand what GHC is thinking here.
2013-09-02 08:55:51	<--	LAMMJohn1on (~ja@user-5af43df5.broadband.tesco.net) has quit (Remote host closed the connection)
2013-09-02 08:56:05	-->	dansamo2 (~root@14.47.214.26) has joined #haskell
2013-09-02 08:57:55	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-02 08:58:05	lpaste	dmwit pasted “GHC's actual type matches my type signature... but it's still a type error” at http://lpaste.net/92431
2013-09-02 08:59:34	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-02 08:59:58	<--	Fuuzetsu (~Shana@fsf/member/Fuuzetsu) has quit (Ping timeout: 240 seconds)
2013-09-02 08:59:59	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-02 09:00:14	-->	blackman123 (~user@185.6.244.226) has joined #haskell
2013-09-02 09:00:14	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Ping timeout: 240 seconds)
2013-09-02 09:00:16	<--	a11235 (~a11235@unaffiliated/a11235) has quit (Ping timeout: 256 seconds)
2013-09-02 09:00:19	dmwit	Maybe worth a StackOverflow post.
2013-09-02 09:00:23	<--	ericmj (~ericmj@198.211.118.116) has quit (Ping timeout: 240 seconds)
2013-09-02 09:00:25	<--	arkx (~aku@eagleflow.fi) has quit (Ping timeout: 245 seconds)
2013-09-02 09:01:02	<--	manung (~manung@ool-44c25842.dyn.optonline.net) has quit (Quit: manung)
2013-09-02 09:01:11	-->	arkx (~aku@eagleflow.fi) has joined #haskell
2013-09-02 09:01:18	-->	a11235 (~a11235@198.199.126.154) has joined #haskell
2013-09-02 09:01:22	<--	a11235 (~a11235@198.199.126.154) has quit (Changing host)
2013-09-02 09:01:22	-->	a11235 (~a11235@unaffiliated/a11235) has joined #haskell
2013-09-02 09:01:52	-->	Fuuzetsu (~Shana@37.139.11.195) has joined #haskell
2013-09-02 09:01:59	--	Fuuzetsu is now known as Guest12456
2013-09-02 09:02:07	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-02 09:02:21	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-02 09:02:27	-->	canissimia (canissimia@unaffiliated/canissimia) has joined #haskell
2013-09-02 09:02:32	-->	ericmj (~ericmj@198.211.118.116) has joined #haskell
2013-09-02 09:02:47	-->	maxter (~maxter@sundownness.lullaby.volia.net) has joined #haskell
2013-09-02 09:02:55	<--	Guest12456 (~Shana@37.139.11.195) has quit (Changing host)
2013-09-02 09:02:55	-->	Guest12456 (~Shana@fsf/member/Fuuzetsu) has joined #haskell
2013-09-02 09:03:00	<--	dumael (dalamar@cube.netsoc.tcd.ie) has quit (Remote host closed the connection)
2013-09-02 09:03:11	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-09-02 09:03:12	--	Guest12456 is now known as Fuuzetsu`
2013-09-02 09:03:16	--	Fuuzetsu` is now known as Fuuzetsu
2013-09-02 09:04:07	<--	mno2 (~mno2@wl043.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-02 09:04:26	-->	skchrko (~sk@109.110.72.216) has joined #haskell
2013-09-02 09:04:47	-->	hsyl20 (~shenry@193.50.110.239) has joined #haskell
2013-09-02 09:04:52	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-09-02 09:05:48	-->	pkrnj (~pkrnj@bas2-montreal47-1279446954.dsl.bell.ca) has joined #haskell
2013-09-02 09:05:58	ill_logic	thanks for your help all, btw
2013-09-02 09:06:04	-->	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has joined #haskell
2013-09-02 09:07:04	-->	maxter_ (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-02 09:07:06	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Remote host closed the connection)
2013-09-02 09:07:30	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 09:07:55	-->	_emm_ (~Emmanuel_@178.157.253.142) has joined #haskell
2013-09-02 09:09:31	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-02 09:09:48	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 09:10:22	-->	zett_zelett (~zett_zele@p5DE79149.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 09:10:26	<--	maxter (~maxter@sundownness.lullaby.volia.net) has quit (Ping timeout: 245 seconds)
2013-09-02 09:10:38	-->	mno2 (~mno2@wlan23.cc.ntu.edu.tw) has joined #haskell
2013-09-02 09:10:40	-->	tazjin (~tazjin@2a01:2b0:3041:3018:f173:3786:3324:9f4e) has joined #haskell
2013-09-02 09:10:42	<--	pootler (~merv.hamm@46.18.9.33) has quit (Quit: Lost terminal)
2013-09-02 09:11:54	<--	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-09-02 09:12:10	-->	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has joined #haskell
2013-09-02 09:13:10	<--	pkrnj (~pkrnj@bas2-montreal47-1279446954.dsl.bell.ca) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-02 09:13:55	dmwit	Hm. What's the etiquette for when you want to ask something on SO, and an old, identical post has upvoted answers that don't actually answer the question?
2013-09-02 09:14:14	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 240 seconds)
2013-09-02 09:14:57	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-02 09:15:01	-->	madjestic (~madjestic@31.20.82.94) has joined #haskell
2013-09-02 09:15:30	Gracenotes	not sure what the etiquette is, but people tend to ask things again
2013-09-02 09:15:37	Gracenotes	maybe ask the diff of what was not answered
2013-09-02 09:15:55	elliott	dmwit: bounty
2013-09-02 09:16:03	dmwit	elliott: ah!
2013-09-02 09:16:13	dmwit	An actual use for these useless points.
2013-09-02 09:16:14	dmwit	good idea
2013-09-02 09:16:31	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 256 seconds)
2013-09-02 09:17:20	Taneb	mm_freak, with my Alternative instance, and your example, for a start how can it fail half the time?
2013-09-02 09:17:23	 *	hackagebot ajhc 0.8.0.8 - Haskell compiler that produce binary through C language  http://hackage.haskell.org/package/ajhc-0.8.0.8 (KiwamuOkabe)
2013-09-02 09:17:29	Taneb	If it's Nothing there's no way forward
2013-09-02 09:17:30	<--	hashcat (~chatzilla@27.243.21.241) has quit (Ping timeout: 264 seconds)
2013-09-02 09:18:06	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 09:18:31	Taneb	Secondly, with the Maybe Alternative it just branches once, based on the first evaluation
2013-09-02 09:18:57	Taneb	If the left branch is Nothing, it goes onto the Right branch forever, otherwise it sticks with the left branch
2013-09-02 09:19:20	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 09:19:44	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 09:20:51	Ghoul_	choCombinators :: CollectedHo
2013-09-02 09:20:56	Ghoul_	Those collected ho's~
2013-09-02 09:22:47	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 09:23:26	-->	]OLI[ (~oli@raven.linux.ox.ac.uk) has joined #haskell
2013-09-02 09:23:53	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2013-09-02 09:23:56	-->	hkBst (~marijn@gentoo/developer/hkbst) has joined #haskell
2013-09-02 09:23:57	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-02 09:24:13	Vertue	Do anyone know how to convert a sql varbinary to string in haskell?
2013-09-02 09:24:18	<--	eldariof (~CLD@pppoe-196-161-dyn-sr.volgaline.ru) has quit (Ping timeout: 245 seconds)
2013-09-02 09:24:22	<--	lattenwald (~qalex@185.6.245.156) has quit (Remote host closed the connection)
2013-09-02 09:24:40	Vertue	I am trying to get some information out of a xml serialisation from a sql database
2013-09-02 09:24:40	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-02 09:24:41	<--	]OLI[ (~oli@raven.linux.ox.ac.uk) has left #haskell
2013-09-02 09:24:49	-->	]OLI[ (~oli@raven.linux.ox.ac.uk) has joined #haskell
2013-09-02 09:24:56	Vertue	one of the fields is a serialised varbinary
2013-09-02 09:25:29	<--	PatrickRobotham (80fa2007@gateway/web/freenode/ip.128.250.32.7) has quit (Quit: Page closed)
2013-09-02 09:25:30	Vertue	I tried to use the encoding library but not having much luck.
2013-09-02 09:25:58	-->	heruur (~tvh@2a00:12d0:a101:7801:223:14ff:fe98:9164) has joined #haskell
2013-09-02 09:26:19	Vertue	Part of the problem is that I can't figure out how to cast the text from the xml to bytestring without any coversion
2013-09-02 09:26:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-02 09:27:16	-->	lattenwald (~qalex@185.6.245.156) has joined #haskell
2013-09-02 09:27:52	-->	pantech (~pantech@88-117-43-116.adsl.highway.telekom.at) has joined #haskell
2013-09-02 09:30:00	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-02 09:31:17	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 09:31:52	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-02 09:32:23	<--	madjestic (~madjestic@31.20.82.94) has quit (Ping timeout: 240 seconds)
2013-09-02 09:32:25	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-02 09:32:56	-->	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has joined #haskell
2013-09-02 09:33:08	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 09:33:44	-->	madjestic (~madjestic@31.20.82.94) has joined #haskell
2013-09-02 09:34:08	-->	Beetny (~Beetny@ppp118-208-44-67.lns20.bne1.internode.on.net) has joined #haskell
2013-09-02 09:35:05	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 09:35:27	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Client Quit)
2013-09-02 09:35:47	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 09:36:35	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-02 09:36:48	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-02 09:36:55	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-02 09:37:30	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-02 09:38:53	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-02 09:39:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-02 09:41:06	mm_freak	Taneb: in netwire 4 terms:  holdFor 0.5 (periodically 1)
2013-09-02 09:41:17	--	Kabaka_ is now known as Kabaka
2013-09-02 09:41:21	mm_freak	but it's rather the underlying functor's empty we're interested in here
2013-09-02 09:41:21	Taneb	mm_freak, that wasn't your example, though
2013-09-02 09:41:41	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-09-02 09:41:42	Taneb	Having the underlying functor being empty could be a nice way to halt a program
2013-09-02 09:41:42	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-09-02 09:41:48	mm_freak	given w1 <|> w2, w1 is empty every other instant…  for example it checks whether the current time is even
2013-09-02 09:41:53	<--	madjestic (~madjestic@31.20.82.94) has quit (Ping timeout: 240 seconds)
2013-09-02 09:42:05	<--	nooodl (~nooodl@38.152-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 245 seconds)
2013-09-02 09:42:06	mm_freak	that's not a nice way to halt a program =)
2013-09-02 09:42:08	Taneb	mm_freak, if the time is odd, w1 can't continue
2013-09-02 09:42:25	 *	hackagebot network-multicast 0.0.10 - Simple multicast library  http://hackage.haskell.org/package/network-multicast-0.0.10 (AudreyTang)
2013-09-02 09:42:29	mm_freak	yes, w1 will then be empty, allowing w2 to run
2013-09-02 09:42:39	-->	JohnBat26 (~Eugene@89.175.77.172) has joined #haskell
2013-09-02 09:42:50	Taneb	It allows w2 to run, never checking w1 again
2013-09-02 09:42:50	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-09-02 09:42:52	mm_freak	however, in the even seconds w1 ran, so w2 was ignored, so it couldn't switch to a later state
2013-09-02 09:43:01	mm_freak	you don't know that
2013-09-02 09:43:01	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 09:43:05	Taneb	If w1 ever ran, w2 won't be
2013-09-02 09:43:09	Taneb	Yes I do
2013-09-02 09:43:50	mm_freak	myBolt = Bolt $ \_ _ -> do b <- randomIO; if b then empty else return (Right (), myBolt)
2013-09-02 09:44:24	mm_freak	oh, i understand now…  your (<|>) doesn't even combine the wires
2013-09-02 09:44:27	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 09:44:29	Taneb	Yeah
2013-09-02 09:44:39	mm_freak	check out (-->) in netwire
2013-09-02 09:44:57	-->	ts33kr (~ts33kr@193.34.60.110) has joined #haskell
2013-09-02 09:45:02	mm_freak	that one is the clean variant of this =)
2013-09-02 09:45:09	mm_freak	w1 . for 3 --> w2
2013-09-02 09:45:23	mm_freak	w1 for three seconds, then w2
2013-09-02 09:45:31	mm_freak	forgets w1 after switching
2013-09-02 09:45:34	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-02 09:45:52	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-02 09:46:14	-->	ashnur (~ashnur@79.117.80.167) has joined #haskell
2013-09-02 09:46:16	Taneb	But with my (<|>), w1 <|> w2 (with the Maybe underlying functor) will forget w1 if w1 is Nothing, and will forget w2 if w1 isn't nothing
2013-09-02 09:46:49	<--	zRecursive (~czsq888@110.188.66.221) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-02 09:47:03	Taneb	It could be more useful with the [] functor, possibly
2013-09-02 09:47:18	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 09:47:19	mm_freak	i know…  i have tried all this and it's practically redundant
2013-09-02 09:47:36	Taneb	mm_freak, changing the topic can I ask what  you think of ocharles' netwire blog posts?
2013-09-02 09:47:38	<--	amosr (~amos@149.171.231.162) has quit (Quit: amosr)
2013-09-02 09:47:41	mm_freak	also netwire's (<|>) preserves left-catch (netwire 4) or left-distributivity (netwire 5) in relation to Applicative
2013-09-02 09:47:54	mm_freak	i think they are great…  not perfect, but great =)
2013-09-02 09:48:11	mm_freak	netwire 5 will pretty much force his articles to be perfect ;)
2013-09-02 09:49:40	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-02 09:50:55	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-02 09:51:29	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-02 09:51:43	mm_freak	the new (<|>) has a number of very desirable properties
2013-09-02 09:52:02	mm_freak	a . (b <|> c) = a . b <|> a . c
2013-09-02 09:52:15	-->	matson (~matson@jabam.lepovirta.org) has joined #haskell
2013-09-02 09:52:15	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 260 seconds)
2013-09-02 09:52:30	mm_freak	(a <|> b) . c = a . c <|> b . c
2013-09-02 09:52:45	<--	miclorb (~textual@ppp121-44-6-1.lns20.syd6.internode.on.net) has quit
2013-09-02 09:52:49	mm_freak	a <*> (b <|> c) = a <*> b <|> a <*> c
2013-09-02 09:52:54	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 264 seconds)
2013-09-02 09:53:01	mm_freak	very useful for reasoning
2013-09-02 09:53:08	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-02 09:53:20	Ghoul_	oh wow
2013-09-02 09:53:27	Ghoul_	(a <|> b) . c is really cool
2013-09-02 09:53:46	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-02 09:54:16	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 09:55:12	<--	yogurt_truck (~yogurt_tr@190.191.224.63) has quit (Remote host closed the connection)
2013-09-02 09:55:38	-->	t7 (~chatzilla@chaucer.kent.ac.uk) has joined #haskell
2013-09-02 09:57:03	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 09:57:14	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-02 09:58:56	-->	peterhil (~peterhil@158.127.31.162) has joined #haskell
2013-09-02 09:59:47	-->	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has joined #haskell
2013-09-02 10:01:00	-->	pierreghz (~krux@147.96-245-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-02 10:01:32	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-02 10:01:59	-->	zammy (~sammy@ppp-53-83.98-62.inwind.it) has joined #haskell
2013-09-02 10:02:15	<--	ashnur (~ashnur@79.117.80.167) has quit (Read error: Operation timed out)
2013-09-02 10:02:54	<--	destiny (~ircguy@93.190.3.226) has quit (Ping timeout: 264 seconds)
2013-09-02 10:02:56	-->	lennart__ (~hexagoxel@kiel-5f77b125.pool.mediaWays.net) has joined #haskell
2013-09-02 10:03:28	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 10:03:28	-->	asQuirreL (~asQuirreL@31.221.100.202) has joined #haskell
2013-09-02 10:04:18	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 245 seconds)
2013-09-02 10:04:24	-->	talzeus__ (~studybot_@101.110.31.120) has joined #haskell
2013-09-02 10:05:02	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 10:05:47	<--	abhiranjan (7aa9d89d@gateway/web/freenode/ip.122.169.216.157) has quit (Ping timeout: 250 seconds)
2013-09-02 10:07:55	<--	dwcook (~danny@unaffiliated/dwcook) has quit (Quit: zZz)
2013-09-02 10:08:38	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-09-02 10:09:35	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-09-02 10:09:51	<--	dixie (dixie@real.wilbury.sk) has quit (Read error: Connection reset by peer)
2013-09-02 10:09:59	-->	dixie (dixie@real.wilbury.sk) has joined #haskell
2013-09-02 10:10:35	-->	pootler (~merv.hamm@84.203.201.73) has joined #haskell
2013-09-02 10:10:47	-->	eikke (~nicolas@78-20-0-121.access.telenet.be) has joined #haskell
2013-09-02 10:11:43	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Ping timeout: 246 seconds)
2013-09-02 10:11:45	<--	ill_logic (ada4f629@gateway/web/freenode/ip.173.164.246.41) has quit (Quit: Page closed)
2013-09-02 10:13:48	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 240 seconds)
2013-09-02 10:14:15	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-02 10:15:50	<--	Katayo (~Kat@66.188.106.130) has quit (Read error: Connection reset by peer)
2013-09-02 10:16:02	-->	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has joined #haskell
2013-09-02 10:16:05	<--	thr33strikes (~wontez@ltea-047-066-019-033.pools.arcor-ip.net) has left #haskell ("WeeChat 0.3.8")
2013-09-02 10:16:14	-->	thr33strikes (~wontez@ltea-047-066-019-033.pools.arcor-ip.net) has joined #haskell
2013-09-02 10:16:53	-->	beardtree (~dan@gateway/tor-sasl/beardtree) has joined #haskell
2013-09-02 10:16:54	-->	mv-- (~mv--@p4FDFD373.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 10:17:07	beardtree	If I reverse the same list twice, will any reversing happen runtime?
2013-09-02 10:17:10	-->	lemao (~lemao@80-254-69-42.dynamic.monzoon.net) has joined #haskell
2013-09-02 10:17:44	dmwit	yes
2013-09-02 10:17:51	beardtree	Thanks
2013-09-02 10:17:52	<--	beardtree (~dan@gateway/tor-sasl/beardtree) has left #haskell
2013-09-02 10:18:03	Jaxan	> reverse . reverse $ [1..]
2013-09-02 10:18:12	lambdabot	 Terminated
2013-09-02 10:19:47	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-09-02 10:19:58	-->	Kaini (~kaini@212095007023.public.telering.at) has joined #haskell
2013-09-02 10:19:58	<--	Kaini (~kaini@212095007023.public.telering.at) has quit (Changing host)
2013-09-02 10:19:58	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-02 10:20:17	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 10:20:30	<--	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-02 10:21:10	<--	tailcalled (~tailcalle@78.111.169.50) has quit (Ping timeout: 246 seconds)
2013-09-02 10:21:17	Moggle	huh, would you even want that to be optimized?
2013-09-02 10:21:29	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-02 10:21:31	Moggle	i guess you sort of would, but optimizations should not result in different behaviors
2013-09-02 10:21:42	Moggle	an interesting problem
2013-09-02 10:21:42	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-02 10:21:53	Moggle	that only occurs due to laziness
2013-09-02 10:22:40	-->	visof (~visof@197.161.65.28) has joined #haskell
2013-09-02 10:23:03	-->	hari_ (~hari@117.193.58.92) has joined #haskell
2013-09-02 10:23:21	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-02 10:23:51	lpaste	Hari pasted “No title” at http://lpaste.net/92433
2013-09-02 10:24:50	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-09-02 10:24:59	hari_	I want to know, if at all, if the above pseudocode grammar is a good parsing engine for a Text->HTML converter
2013-09-02 10:25:05	<--	tikhon (~user@adsl-75-36-188-216.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-02 10:25:18	-->	tailcalled (~tailcalle@78.111.169.50) has joined #haskell
2013-09-02 10:25:59	-->	madjestic (~madjestic@31.20.82.94) has joined #haskell
2013-09-02 10:26:25	<--	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Ping timeout: 246 seconds)
2013-09-02 10:26:38	-->	kb (~kb@85.255.197.126) has joined #haskell
2013-09-02 10:27:01	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-02 10:27:08	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-02 10:27:24	-->	pgiarrusso (~pgiarruss@dslb-084-059-072-081.pools.arcor-ip.net) has joined #haskell
2013-09-02 10:27:24	-->	ashnur (~ashnur@79.117.76.115) has joined #haskell
2013-09-02 10:27:27	<--	kb (~kb@85.255.197.126) has quit (Client Quit)
2013-09-02 10:27:32	-->	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has joined #haskell
2013-09-02 10:29:38	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 264 seconds)
2013-09-02 10:29:52	-->	daniel-s (~daniel-s@2001:388:608c:4c40:a8da:af4:db0a:e6ab) has joined #haskell
2013-09-02 10:30:04	daniel-s	Hi, I have a question about functional programming.
2013-09-02 10:30:13	daniel-s	(not specific to Haskell)
2013-09-02 10:30:35	-->	StahlGrau (~pg@port-92-195-93-110.dynamic.qsc.de) has joined #haskell
2013-09-02 10:30:37	-->	uvelichitel (~uvelichit@88.155.188.161) has joined #haskell
2013-09-02 10:30:43	daniel-s	If I have a dictionary, I want a function that takes a reference to that dictionary and adds a value to it.
2013-09-02 10:30:58	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-02 10:31:05	daniel-s	If I want to do this in a functional way, I think I need to create a deep copy, then add a value to the deep copy and return it.
2013-09-02 10:31:16	daniel-s	Is that how I'm supposed to do this? It seems very inefficient.
2013-09-02 10:31:18	-->	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-02 10:31:31	-->	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has joined #haskell
2013-09-02 10:32:07	elliott	no, you can share substructures
2013-09-02 10:32:30	elliott	laziness can also make this more efficient
2013-09-02 10:33:10	<--	StahlGrau (~pg@port-92-195-93-110.dynamic.qsc.de) has quit (Client Quit)
2013-09-02 10:33:13	ciaranm	also functional doesn't imply immutable
2013-09-02 10:33:56	-->	arenz (arenz@nat/ibm/x-jhjdxifrlssiyzyo) has joined #haskell
2013-09-02 10:34:11	<--	lemao (~lemao@80-254-69-42.dynamic.monzoon.net) has quit (Remote host closed the connection)
2013-09-02 10:34:45	daniel-s	ciaranm: OK. I thought it did. Isn't that why Haskell doesn't let you change any parameters a function takes?
2013-09-02 10:34:54	hari_	I wanted to know if this pseudo-grammar definition seems sane for a text document parser http://lpaste.net/92433
2013-09-02 10:34:56	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 10:35:46	ciaranm	daniel-s: not really
2013-09-02 10:36:11	Ghoul_	anyone have a copy of `Listlessness is better than laziness: Lazy evaluation and garbage collection at compile time (1984)` by Philip Wadler ?
2013-09-02 10:36:13	-->	nominolo (~nominolo@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-02 10:36:19	ciaranm	daniel-s: the point is that effects are explicit
2013-09-02 10:36:19	<--	ivanacostarubio (~ivan@189.221.144.10.cable.dyn.cableonline.com.mx) has quit (Quit: ivanacostarubio)
2013-09-02 10:37:04	ciaranm	anyone have a copy of a paper by Wadler that doesn't have an amusing title?
2013-09-02 10:37:32	Ghoul_	I don't get it.
2013-09-02 10:38:09	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-02 10:38:38	<--	tailcalled (~tailcalle@78.111.169.50) has quit (Ping timeout: 264 seconds)
2013-09-02 10:39:26	mm_freak	daniel-s: it is rather important whether this is a scheme question or a haskell question
2013-09-02 10:39:35	mm_freak	so this is not an FP question in general
2013-09-02 10:39:47	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-09-02 10:39:56	-->	lemao (~lemao@80-254-69-42.dynamic.monzoon.net) has joined #haskell
2013-09-02 10:40:02	ciaranm	there's no such thing as "functional programming"
2013-09-02 10:40:05	<--	maksbotan (~quassel@gentoo/developer/maksbotan) has quit (Ping timeout: 246 seconds)
2013-09-02 10:40:14	-->	SoupE (~jloos@g227151194.adsl.alicedsl.de) has joined #haskell
2013-09-02 10:40:18	daniel-s	mm_freak: Well, I'm writing something in Python
2013-09-02 10:40:23	Ghoul_	Thats why all the conferences are abbreviated with FP, right?
2013-09-02 10:40:42	mm_freak	daniel-s: in python you would handle this very differently, more the way you would handle it in scheme
2013-09-02 10:41:03	mm_freak	daniel-s: in python, while your dictionary itself is likely going to be mutable, you can use higher order functions to work with it
2013-09-02 10:41:07	<--	SoupEvil (~jloos@g227156166.adsl.alicedsl.de) has quit (Read error: Operation timed out)
2013-09-02 10:41:13	mm_freak	for example to map a function over all elements
2013-09-02 10:42:22	mm_freak	daniel-s: there is also a style, which seems unique to haskell and usually requires immutability:  algebraic programming…  you identify your design patterns with known algebraic structures (most notably monoids) and design your operations based on them
2013-09-02 10:42:42	mm_freak	daniel-s: dictionaries form a monoid with the empty dictionary and the union operation
2013-09-02 10:43:01	daniel-s	I'm in the process of learning about Haskell. I somehow stumbled across it while trying to figure out a problem to the way all of my code was designed. I'm trying to start writing things using smaller, more easily testable components.
2013-09-02 10:43:09	daniel-s	I think I like the "style" of Haskell.
2013-09-02 10:43:39	<--	charliesome (~root@202-129-124-155.perm.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 10:44:28	mm_freak	daniel-s: the problem is, sharing of substructures is quite natural in haskell, so these patterns are elegant to express…  in most other languages you will have to implement sharing explicitly and make sure you don't get it wrong
2013-09-02 10:44:49	mm_freak	that's why immutable data structures aren't very common outside of haskell
2013-09-02 10:44:51	jdoles	What exactly is elegant about this? https://www.fpcomplete.com/user/edwardk/cellular-automata/part-2
2013-09-02 10:45:28	-->	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-02 10:45:54	jdoles	I'd think that almost nobody would know what a profunctor is, if I asked them, regardless of the public, perhaps excluding Mr. Kmett himself.
2013-09-02 10:46:03	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-02 10:46:10	elliott	I know what a profunctor is.
2013-09-02 10:46:23	elliott	in fact, anyone who knows how lens works knows what a profunctor is.
2013-09-02 10:46:52	quchen	jdoles: Even if you don't know what a profunctor is, you can explain what a Profunctor is to a beginner Haskell programmer in 5 minutes.
2013-09-02 10:46:52	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-02 10:46:54	elliott	in fact, the article links to two resources on profunctors.
2013-09-02 10:47:09	<--	talzeus__ (~studybot_@101.110.31.120) has quit (Ping timeout: 240 seconds)
2013-09-02 10:47:19	mm_freak	jdoles: i know what a profunctor is
2013-09-02 10:47:25	ciaranm	a beginner Haskell programmer in 5 minutes, or an experienced Java programmer in 2 years
2013-09-02 10:47:30	mm_freak	jdoles: and i use them quite a lot actually
2013-09-02 10:47:44	mm_freak	and i don'
2013-09-02 10:47:48	mm_freak	and i don't use lenses much =)
2013-09-02 10:47:52	tarrasch	jdoles, You have to be pro to know what a profunctor is ;p (I have no idea myself)
2013-09-02 10:47:52	jdoles	Explaining the entire program takes 10 seconds. 5 minutes is already 30 times that.
2013-09-02 10:47:53	mm_freak	so yes, they have uses outside of lens
2013-09-02 10:47:58	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-02 10:48:04	elliott	jdoles: I'm not really sure what your point is here.
2013-09-02 10:48:13	jdoles	My point is that these abstractions are useless.
2013-09-02 10:48:22	mm_freak	jdoles: your point is invalid
2013-09-02 10:48:28	jdoles	The abstraction of an automaton is useful.
2013-09-02 10:48:32	jdoles	The abstraction
2013-09-02 10:48:40	jdoles	of rendering a graph is also useful.
2013-09-02 10:48:53	Ghoul_	You . re . a . little . bit . pointless
2013-09-02 10:49:01	elliott	I use these abstractions. so I disagree.
2013-09-02 10:49:10	elliott	but you just sound trolly here, frankly
2013-09-02 10:49:18	jdoles	But all the other names giving to arbitrary compositions of functions and types exponentially becomes more useless.
2013-09-02 10:49:29	elliott	you could have at least picked a more complicated and less useful abstraction to criticise than profunctors :P
2013-09-02 10:49:39	mm_freak	jdoles: they are not useless, they just have a steeper learning curve
2013-09-02 10:49:40	elliott	god knows edwardk has plenty in some of his libraries :)
2013-09-02 10:50:07	mm_freak	jdoles: if you don't want to climb it, feel free not to use them
2013-09-02 10:50:11	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-09-02 10:50:21	hari_	Could anybody let me know if this pseudo-grammar seems all right for a text-document (with tags) parser? http://lpaste.net/92433
2013-09-02 10:50:24	elliott	ohh, I remember you...
2013-09-02 10:50:29	elliott	2013-07-29.log:10:33:36 <jdoles> quchen: if Haskell was so high-performance and even a bit relevant, it would have something which destroyed Eigen.
2013-09-02 10:50:39	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Remote host closed the connection)
2013-09-02 10:50:52	mm_freak	luckily #haskell is impossible to troll
2013-09-02 10:50:58	<--	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 245 seconds)
2013-09-02 10:51:00	ciaranm	challenge accepted!
2013-09-02 10:51:02	quchen	mm_freak: inb4 that chatlog etc
2013-09-02 10:51:18	jdoles	I can write the same program without using these advanced concepts. I consider using more complex concepts to have higher maintenance costs.
2013-09-02 10:51:25	elliott	it seems like every time you've been in this channel you've either criticised random aspects of haskell unproductively or accused others of trolling :p
2013-09-02 10:51:36	mm_freak	jdoles: higher learning costs, much lower maintainance costs
2013-09-02 10:51:39	jdoles	You apparently think it is cheaper to use such advanced concepts.
2013-09-02 10:51:48	mm_freak	the maintainance and communication costs are exactly what justifies these concepts
2013-09-02 10:51:57	jdoles	I would like to see why it would possibly be the case that it is cheaper.
2013-09-02 10:51:59	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-02 10:52:01	elliott	mm_freak: #haskell is pretty easy to troll in my experience, actually
2013-09-02 10:52:02	quchen	I like how Lens is a counterexample to everything that has been wrongly said in the last 5 minutes.
2013-09-02 10:52:33	jdoles	The problem which lens solves can be solved without profunctors too.
2013-09-02 10:52:59	quchen	Proof of work?
2013-09-02 10:53:01	ciaranm	every problem that can be solved can be solved using the lambda calculus. what's your point?
2013-09-02 10:53:02	jdoles	Just because you can name a concept and express it, doesn't mean it is worth doing so.
2013-09-02 10:53:10	mm_freak	jdoles: if you solve it the way lens does, you would invent a structure and call it MappableFromBothDirections
2013-09-02 10:53:12	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-02 10:53:16	<--	mv-- (~mv--@p4FDFD373.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-02 10:53:23	elliott	you're just arguing with people pointlessly here.
2013-09-02 10:53:29	mm_freak	jdoles: Profunctor is just a shorter name and people familiar with the term can recognize it and immediately know what it means =)
2013-09-02 10:53:35	elliott	what is the goal, to convince everyone to stop using a useful API because you don't like it?
2013-09-02 10:54:09	-->	fosky_ (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has joined #haskell
2013-09-02 10:54:17	Ghoul_	Trolling so well that you could prove the reactions are turing complete
2013-09-02 10:54:20	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 10:54:48	mm_freak	jdoles: my suggestion for your future career: don't use haskell =)
2013-09-02 10:55:01	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 245 seconds)
2013-09-02 10:55:20	jdoles	mm_freak: let's say I write a program to generate all possible types and all possible relations between types. Would you argue that all of these structures warrant a name?
2013-09-02 10:55:23	hari_	I believe most modern programming languages can solve most problems. The only thing is which languages are suited to what domains. Haskell seems like a research ground for many advanced techniques of programming not explored in others, so I think one is bound to get more advanced and sometimes useless abstractions
2013-09-02 10:55:35	mm_freak	jdoles: no
2013-09-02 10:55:35	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 10:55:52	<--	dimday (~amcvega@50.23.115.111) has quit (Ping timeout: 256 seconds)
2013-09-02 10:55:52	<--	tarrasch (~arash@elodia.olf.sgsnet.se) has left #haskell ("Leaving")
2013-09-02 10:55:54	jdoles	mm_freak: then why would these particular ones (same with the zylo prefixed one) warrant one?
2013-09-02 10:56:15	mm_freak	jdoles: because they capture a set of useful laws
2013-09-02 10:56:29	elliott	zygohistomorphic prepromorphisms are (a) completely unrelated to profunctors (they are not even the same type of abstraction) and (b) a joke.
2013-09-02 10:56:36	ciaranm	you give something a name when it shows up often enough that you get bored repeating a long definition over and over again
2013-09-02 10:56:40	elliott	you're arguing against things nobody has said.
2013-09-02 10:56:45	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 10:56:49	jdoles	mm_freak: a compiler could also rediscover those laws.
2013-09-02 10:57:00	jdoles	mm_freak: that way no user would have to know of their names.
2013-09-02 10:57:16	<--	lemao (~lemao@80-254-69-42.dynamic.monzoon.net) has quit (Remote host closed the connection)
2013-09-02 10:57:18	Ghoul_	Maybe someone should start a wiki page with names that aren't taken, like, Cozylomonoprofunctornoid
2013-09-02 10:57:23	mm_freak	jdoles: even if the compiler could check them, it couldn't define them
2013-09-02 10:57:34	Ghoul_	Then it's easier to give these things names without accidentally reallocating them
2013-09-02 10:57:55	mm_freak	jdoles: would you say that monoids are useless?
2013-09-02 10:58:09	Sonderblade	jdoles: id like to see you write that cellular automata example in a better way without using profunctors :)
2013-09-02 10:58:27	arkeet	a monoid is nothing but a free monoid monad algebra.
2013-09-02 10:58:38	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 240 seconds)
2013-09-02 10:58:41	ciaranm	Ghoul_: ncatlab.org, hth
2013-09-02 10:58:46	arkeet	=p
2013-09-02 10:58:50	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Leaving...)
2013-09-02 10:59:18	hari_	Would like some help with this pseudo-grammar - whether it seems OK or not for a simple text-document parsing  http://lpaste.net/92433
2013-09-02 10:59:44	Ghoul_	So many words
2013-09-02 11:00:13	--	Philonous_ is now known as Philonous
2013-09-02 11:00:50	mm_freak	hari_: not exactly answering your question, but you may want to check out pandoc
2013-09-02 11:01:08	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-02 11:01:18	-->	gustavn (~Gustav@31.210.251.9) has joined #haskell
2013-09-02 11:01:27	osfameron	that definition of profunctors is quite dense
2013-09-02 11:01:28	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-09-02 11:01:49	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-09-02 11:01:51	-->	egork8n (~egor.kuro@77.232.56.194) has joined #haskell
2013-09-02 11:02:06	<--	kamatsu (~Adium@2402:1800:4000:2:30e8:56e6:30a7:c24b) has quit (Quit: Leaving.)
2013-09-02 11:02:07	hari_	mm_freak, I agree, but I wanted a small project to learn some concepts, so thought about writing a simple text document parser myself
2013-09-02 11:03:17	-->	hashcat (~chatzilla@27.242.245.43) has joined #haskell
2013-09-02 11:03:21	mm_freak	i understood profunctors by looking at the type class
2013-09-02 11:03:21	mm_freak	and by realizing, "ok, what i have here is not a bifunctor, so what could it be?"…  then i found profunctors =)
2013-09-02 11:03:36	gustavn	I'm trying to use the Bullet physics bindings with Haskell. But when trying to run my program through GHCi, it says: "can't load .so/.DLL for: BulletSoftBody.dll (addDLL: could not load DLL)
2013-09-02 11:03:36	gustavn	". I'm on Windows if it matters.
2013-09-02 11:03:38	quchen	Is a cofree comonad a "co-(free monad)", i.e. the analogon to a free monad in the co world?
2013-09-02 11:03:40	mm_freak	hari_: seems reasonable…  in that case you should probably just try
2013-09-02 11:04:03	elliott	Cofree is just a free comonad, I think.
2013-09-02 11:04:15	hari_	mm_freak, thanks. Yes, I was trying to wrap my head around the Parsec and attoparsec modules. But still not comfortable with them.
2013-09-02 11:04:26	mm_freak	IIRC there is actually a difference between free and cofree
2013-09-02 11:04:41	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-02 11:05:27	-->	charliesome (~root@ppp118-209-88-234.lns20.mel4.internode.on.net) has joined #haskell
2013-09-02 11:06:27	<--	chatsiri_ (~chatsiri_@158.108.142.164) has quit (Ping timeout: 260 seconds)
2013-09-02 11:06:49	-->	mv-- (~mv--@p4FDFD373.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 11:06:59	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 11:07:22	<--	pierreghz (~krux@147.96-245-81.adsl-dyn.isp.belgacom.be) has quit (Read error: Connection reset by peer)
2013-09-02 11:07:31	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 245 seconds)
2013-09-02 11:08:10	<--	mv-- (~mv--@p4FDFD373.dip0.t-ipconnect.de) has quit (Client Quit)
2013-09-02 11:08:25	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 11:08:25	gustavn	Anyone?
2013-09-02 11:08:29	-->	davidbe (c2083402@gateway/web/freenode/ip.194.8.52.2) has joined #haskell
2013-09-02 11:08:30	<--	dansamo2 (~root@14.47.214.26) has quit (Ping timeout: 264 seconds)
2013-09-02 11:08:47	-->	LAMMJohnson (~ja@user-5af43df5.broadband.tesco.net) has joined #haskell
2013-09-02 11:09:29	<--	hari_ (~hari@117.193.58.92) has left #haskell ("Ex-Chat")
2013-09-02 11:09:41	ciaranm	free and cofree are different. free is a left adjoint to forget, cofree is a right adjoint. or possibly the other way around.
2013-09-02 11:09:43	Cale	gustavn: Do you have the C library installed?
2013-09-02 11:09:51	arkeet	ciaranm: that's right :)
2013-09-02 11:10:07	Cale	gustavn: It seems to be saying that it can't find the .dll for the library that the binding binds to.
2013-09-02 11:10:11	-->	fsvehla (~fsvehla@TK212017097035.teleweb.at) has joined #haskell
2013-09-02 11:10:26	gustavn	Cale: Yes. When I installed the bindings "cabal install bullet", it didn't find it at first. I then used --extra-include-dirs and --extra-lib-dirs to point it to the right folder.
2013-09-02 11:10:33	mm_freak	anyway, in a sense Free : Cofree = Coproduct : Product
2013-09-02 11:10:35	<--	davidbe (c2083402@gateway/web/freenode/ip.194.8.52.2) has left #haskell
2013-09-02 11:10:53	mm_freak	you will notice that Cofree is a product, while Free is a sum
2013-09-02 11:10:54	-->	pierreghz (~krux@180.68-247-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-02 11:11:07	gustavn	Cale: The library was compiled with VS2012, because it produced the only format that it seemed to recognize. One thing though, Bullet is a static library and shouldn't have any DLLs...
2013-09-02 11:11:56	pqmodn	mm_freak: is Either a coproduct?
2013-09-02 11:13:04	Cale	gustavn: hmm...
2013-09-02 11:13:11	arkeet	pqmodn: yeah
2013-09-02 11:13:36	gustavn	Cale: Probably forgot to mention something important: it works when I compile it with GHC and then run the executable, but it gives me this error when running in GHCi or using runhaskell
2013-09-02 11:13:49	Cale	ah, okay
2013-09-02 11:13:58	Cale	Well, that's hopeful at least
2013-09-02 11:14:20	pqmodn	arkeet: thanks, slowly starting to click
2013-09-02 11:14:38	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Ping timeout: 264 seconds)
2013-09-02 11:15:18	Vertue	Do anyone know how to convert a sql varbinary to string in haskell?
2013-09-02 11:15:40	-->	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has joined #haskell
2013-09-02 11:15:40	<--	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has quit (Client Quit)
2013-09-02 11:16:03	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-09-02 11:16:15	gustavn	Cale: Yeah, so it seems that GHCi *thinks* that BulletSoftBody.lib has an associated dll but it doesn't.
2013-09-02 11:16:26	-->	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has joined #haskell
2013-09-02 11:16:28	augur	mm_freak: whats cofree :o
2013-09-02 11:16:28	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-02 11:16:30	Vertue	I am trying to get some information out of a xml serialisation from a sql database, one of the fields is a serialised varbinary. I tried to use the encoding library but not having much luck. Part of the problem is that I can't figure out how to cast the text from the xml to bytestring without any conversion
2013-09-02 11:16:41	mm_freak	pqmodn: Either a b = a + b
2013-09-02 11:17:00	mm_freak	augur: i don't know, sorry…  i just remember reading that there is a difference =)
2013-09-02 11:17:01	pqmodn	mm_freak: and (a,b) = a * b ?
2013-09-02 11:17:05	mm_freak	pqmodn: yeah
2013-09-02 11:17:16	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 11:18:20	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-09-02 11:19:23	danr	augur: it's the dual concept http://ncatlab.org/nlab/show/free+functor
2013-09-02 11:19:31	augur	danr: ;P
2013-09-02 11:20:00	danr	obviously :p
2013-09-02 11:20:03	<--	ndrei (~avo@83.142.149.227) has quit (Read error: Operation timed out)
2013-09-02 11:20:42	-->	jonkri (~jonkri@host-95-195-149-161.mobileonline.telia.com) has joined #haskell
2013-09-02 11:20:42	<--	jonkri (~jonkri@host-95-195-149-161.mobileonline.telia.com) has quit (Changing host)
2013-09-02 11:20:42	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-02 11:20:44	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 11:21:11	<--	ashnur (~ashnur@79.117.76.115) has quit (Quit: WeeChat 0.4.1)
2013-09-02 11:21:31	-->	ashnur (~ashnur@79.117.88.155) has joined #haskell
2013-09-02 11:21:40	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Client Quit)
2013-09-02 11:23:33	-->	hiroakip (~hiroaki@p54A6A380.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 11:23:51	divyansr	join #hasgeek
2013-09-02 11:24:35	<--	tazjin (~tazjin@2a01:2b0:3041:3018:f173:3786:3324:9f4e) has quit (Ping timeout: 245 seconds)
2013-09-02 11:24:39	-->	chatsiri_ (~chatsiri_@158.108.142.164) has joined #haskell
2013-09-02 11:25:08	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2013-09-02 11:25:51	<--	fsvehla (~fsvehla@TK212017097035.teleweb.at) has quit (Read error: Connection reset by peer)
2013-09-02 11:26:25	-->	fsvehla (~fsvehla@TK212017097035.teleweb.at) has joined #haskell
2013-09-02 11:26:50	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 11:27:41	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-02 11:28:02	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 11:28:23	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 11:28:48	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-09-02 11:29:10	<--	uvelichitel (~uvelichit@88.155.188.161) has quit (Ping timeout: 245 seconds)
2013-09-02 11:29:41	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-02 11:30:19	<--	gustavn (~Gustav@31.210.251.9) has quit (Read error: Connection reset by peer)
2013-09-02 11:30:32	-->	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has joined #haskell
2013-09-02 11:31:02	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 240 seconds)
2013-09-02 11:31:16	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 245 seconds)
2013-09-02 11:31:34	--	`Jake` is now known as NNOTM
2013-09-02 11:34:15	mroman	Need help :(
2013-09-02 11:34:25	mroman	I have a cycle in my type synonym declarations.
2013-09-02 11:35:04	-->	heikkih (~hhulkko@backport.reaktor.fi) has joined #haskell
2013-09-02 11:35:15	-->	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-02 11:35:32	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-02 11:35:34	<--	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has quit (Read error: Operation timed out)
2013-09-02 11:36:01	mroman	type Foo = Map String Bar
2013-09-02 11:36:06	mroman	type Bar = (Foo, Foo)
2013-09-02 11:36:19	-->	kludge` (~comet@173.11.101.153) has joined #haskell
2013-09-02 11:36:22	<--	kludge` (~comet@173.11.101.153) has quit (Changing host)
2013-09-02 11:36:22	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-02 11:36:59	quchen	mroman: Having circular types is to the compiler like having circular definitions at execution (minus laziness) I think.
2013-09-02 11:37:19	donri	mroman: newtype
2013-09-02 11:37:44	-->	chaterz (Nerdwolrd@unaffiliated/chaterz) has joined #haskell
2013-09-02 11:37:49	<--	xinming (~xinming@125.84.30.98) has quit (Ping timeout: 246 seconds)
2013-09-02 11:37:53	mroman	Yeah well
2013-09-02 11:38:04	chaterz	hello
2013-09-02 11:38:06	-->	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 11:38:11	<--	ivan\ (~ivan@unaffiliated/ivan/x-000001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-02 11:38:14	mroman	I have a Type for my StateT Stufff
2013-09-02 11:38:31	mroman	which contains a Map of Functions
2013-09-02 11:38:44	mroman	whose type is that StateT stuff
2013-09-02 11:38:45	quchen	mroman: Maybe you should post your code.
2013-09-02 11:38:53	<--	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 11:39:10	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 11:39:41	mroman	quchen: http://codepad.org/rmZenObs
2013-09-02 11:39:55	-->	xinming (~xinming@113.248.74.40) has joined #haskell
2013-09-02 11:41:41	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 245 seconds)
2013-09-02 11:42:08	quchen	mroman: That's not enough to judge whether there may be a better type representation for what you're trying to accomplish. Anyway, as donri mentioned, you can use a newtype to break the cycle.
2013-09-02 11:42:14	<--	Munksgaard (~philip@shop3.diku.dk) has quit (Ping timeout: 264 seconds)
2013-09-02 11:42:47	Taneb	mroman, one or both of them needs to be a newtype
2013-09-02 11:42:53	quchen	I wouldn't recommend using 'type' too much anyway, it makes error messages odd and generally isn't as typesafe as using newtype/data.
2013-09-02 11:42:57	Taneb	I would make Bar "data Bar = Bar Foo Foo"
2013-09-02 11:43:36	mroman	ic
2013-09-02 11:43:38	-->	tazjin (~tazjin@2a01:2b0:3041:3018:d5f3:57a3:3a96:fc87) has joined #haskell
2013-09-02 11:43:42	<--	poppingtonic (~poppingto@212.49.88.108) has quit (Ping timeout: 264 seconds)
2013-09-02 11:43:43	b__	Is GeneralizedNewtypeDeriving bad/unsafe?
2013-09-02 11:44:01	b__	I want Foo Decimal to be an instance of Num
2013-09-02 11:44:02	donri	b__: in current ghc yes
2013-09-02 11:44:11	b__	data Foo = Foo Decimal *
2013-09-02 11:44:27	donri	that won't work anyway, only newtypes
2013-09-02 11:44:29	-->	poppingtonic (~poppingto@212.49.88.108) has joined #haskell
2013-09-02 11:44:33	mroman	Making MahouVerbs a data works
2013-09-02 11:44:35	b__	yeah sorry, newtype*
2013-09-02 11:44:36	b__	:|
2013-09-02 11:44:42	-->	boegel (~boegel@hpcbunny.ugent.be) has joined #haskell
2013-09-02 11:44:54	donri	but it's mostly safeish for simple uses
2013-09-02 11:45:03	donri	it breaks down when combined with things like type families
2013-09-02 11:45:09	b__	okay
2013-09-02 11:45:10	donri	fixed in ghc HEAD
2013-09-02 11:45:55	-->	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-02 11:45:58	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Ping timeout: 245 seconds)
2013-09-02 11:46:03	-->	boegel|work (~boegel@ca60c171.ugent.be) has joined #haskell
2013-09-02 11:46:13	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-02 11:46:37	donri	b__: if you're interested http://typesandkinds.wordpress.com/2013/08/15/roles-a-new-feature-of-ghc/
2013-09-02 11:46:45	b__	For newtype Foo = Foo Decimal, I want a function (Decimal -> Decimal) -> Foo -> Foo, do I have to write it myself (as opposed to there being something like fmap for types like these)?
2013-09-02 11:46:55	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Read error: Operation timed out)
2013-09-02 11:47:05	b__	donri: thanks
2013-09-02 11:47:42	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 11:47:42	donri	b__: you could use lens and makeIso to get something like "over foo f"
2013-09-02 11:48:25	b__	ah right, my lens-fu is rusty, but that makes sense
2013-09-02 11:49:09	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 11:49:11	supki	or  newtype Bar a = Bar a; type Foo = Bar Decimal  then derive Functor for Bar with -XDeriveFunctor and use fmap :)
2013-09-02 11:49:12	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Max SendQ exceeded)
2013-09-02 11:49:24	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 11:49:52	--	Mortomes is now known as MortyPinkman
2013-09-02 11:50:02	b__	yeah thought of that
2013-09-02 11:50:14	<--	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 240 seconds)
2013-09-02 11:50:18	b__	but that's pretty ugly
2013-09-02 11:50:39	donri	> over enum (+10) "hello"
2013-09-02 11:50:41	lambdabot	  Couldn't match type `GHC.Types.Int' with `[GHC.Types.Char]'
2013-09-02 11:50:41	lambdabot	 Expected type:...
2013-09-02 11:50:43	donri	:(
2013-09-02 11:51:07	donri	> over (from enum) (+10) "hello"
2013-09-02 11:51:09	lambdabot	  No instance for (GHC.Enum.Enum [GHC.Types.Char])
2013-09-02 11:51:09	lambdabot	   arising from a use of `...
2013-09-02 11:51:32	donri	> over (from enum . folded) (+10) "hello"
2013-09-02 11:51:33	lambdabot	  Couldn't match type `f0 a0' with `GHC.Types.Int'
2013-09-02 11:51:33	lambdabot	 Expected type: (a0 -> Con...
2013-09-02 11:51:35	chrisdone	b__: that's pretty much what the iso abstrasction in lens is for. you need an isomorphism between Foo and Decimal
2013-09-02 11:51:37	chrisdone	donri: stop failing
2013-09-02 11:51:40	donri	:(
2013-09-02 11:51:42	b__	chrisdone: yeah
2013-09-02 11:51:50	<--	peterhil (~peterhil@158.127.31.162) has quit (Ping timeout: 264 seconds)
2013-09-02 11:51:54	donri	> over (from enum . traverse) (+10) "hello"
2013-09-02 11:51:55	lambdabot	  Couldn't match type `t0 a0' with `GHC.Types.Int'
2013-09-02 11:51:55	lambdabot	 Expected type: (a0 -> Con...
2013-09-02 11:52:02	b__	I'll go with an Iso
2013-09-02 11:52:08	 *	donri goes for some morning coffee
2013-09-02 11:52:46	supki	> over (traverse . from enum) (+ 10) "hello"
2013-09-02 11:52:48	lambdabot	  "rovvy"
2013-09-02 11:53:48	donri	> under (traverse.enum) (+10) "hello"
2013-09-02 11:53:49	lambdabot	  Couldn't match type `t0 a0 -> f0 (t0 b0)'
2013-09-02 11:53:49	lambdabot	               with `Control.Lens...
2013-09-02 11:54:54	-->	guest82 (~username@108.172.54.251) has joined #haskell
2013-09-02 11:54:58	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 11:55:37	-->	LAMMJohn1on (~ja@user-5af43382.broadband.tesco.net) has joined #haskell
2013-09-02 11:56:14	donri	b__: so anyway more line "over (from foo)" or "under foo"
2013-09-02 11:56:27	chrisdone	:t over
2013-09-02 11:56:28	lambdabot	Profunctor p => Setting p s t a b -> p a b -> s -> t
2013-09-02 11:56:51	donri	:t (%~)
2013-09-02 11:56:52	lambdabot	Profunctor p => Setting p s t a b -> p a b -> s -> t
2013-09-02 11:57:08	chrisdone	yeah, useless type without being able to query on the class and subtypes
2013-09-02 11:57:15	-->	void64 (~luke@37.212.119.97) has joined #haskell
2013-09-02 11:57:31	arkeet	:t over `asAppliedTo` both
2013-09-02 11:57:32	lambdabot	Setting (->) (a, a) (b, b) a b -> (a -> b) -> (a, a) -> (b, b)
2013-09-02 11:57:37	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-02 11:58:17	-->	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-02 11:58:24	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-02 11:58:40	arkeet	:t over `asAppliedTo` mapped
2013-09-02 11:58:43	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 260 seconds)
2013-09-02 11:58:48	arkeet	...
2013-09-02 11:58:50	arkeet	:t over `asAppliedTo` traverse
2013-09-02 11:58:54	<--	LAMMJohnson (~ja@user-5af43df5.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-02 11:58:55	arkeet	....
2013-09-02 11:59:03	lambdabot	Functor f => Setting (->) (f a) (f b) a b -> (a -> b) -> f a -> f b
2013-09-02 11:59:03	lambdabot	Traversable t => Setting (->) (t a) (t b) a b -> (a -> b) -> t a -> t b
2013-09-02 11:59:09	donri	@botsnack
2013-09-02 11:59:11	lambdabot	:)
2013-09-02 11:59:20	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-02 11:59:39	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-02 12:01:05	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-02 12:01:55	-->	saidan (~saidan@akemi.com.au) has joined #haskell
2013-09-02 12:02:12	-->	dimday (~amcvega@114.108.252.168) has joined #haskell
2013-09-02 12:02:31	-->	kb (~kb@85.255.197.126) has joined #haskell
2013-09-02 12:02:51	<--	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 240 seconds)
2013-09-02 12:04:04	mr-	:t asAppliedTo
2013-09-02 12:04:05	lambdabot	(a -> b) -> a -> a -> b
2013-09-02 12:04:37	-->	ivan\ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-09-02 12:04:54	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 12:05:02	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-02 12:05:28	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-02 12:05:57	-->	Okasu (~1@94.25.229.98) has joined #haskell
2013-09-02 12:05:57	<--	Okasu (~1@94.25.229.98) has quit (Changing host)
2013-09-02 12:05:57	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-02 12:06:38	<--	dimday (~amcvega@114.108.252.168) has quit (Ping timeout: 240 seconds)
2013-09-02 12:06:39	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 12:09:10	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Ping timeout: 245 seconds)
2013-09-02 12:09:12	<--	lennart__ (~hexagoxel@kiel-5f77b125.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-09-02 12:09:21	-->	dimday (~amcvega@114.108.252.168) has joined #haskell
2013-09-02 12:09:36	-->	laurence_day (80f3ec03@gateway/web/freenode/ip.128.243.236.3) has joined #haskell
2013-09-02 12:09:43	<--	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has quit (Ping timeout: 250 seconds)
2013-09-02 12:11:09	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 12:11:48	-->	erisco (~erisco@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-02 12:11:58	erisco	what exactly is this type class here? http://hackage.haskell.org/packages/archive/generator/0.5.1/doc/html/Data-List-Class.html#t:List
2013-09-02 12:12:12	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: Leaving)
2013-09-02 12:12:46	erisco	by calling it "List" I would guess a generalization of [], but the contraints of MonadPlus and Monad (I don't know what ItemM is) do not make sense
2013-09-02 12:13:15	erisco	> [1,2,3] >>= (:[])
2013-09-02 12:13:16	lambdabot	  [1,2,3]
2013-09-02 12:13:31	erisco	> [1,2,3] >>= (:[9,9,9])
2013-09-02 12:13:32	lambdabot	  [1,9,9,9,2,9,9,9,3,9,9,9]
2013-09-02 12:13:44	erisco	figured as much... this is an overstatement of what [] requires
2013-09-02 12:14:04	<--	mno2 (~mno2@wlan23.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-02 12:14:47	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 12:15:15	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 12:15:18	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Max SendQ exceeded)
2013-09-02 12:15:31	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 12:15:50	<--	dimday (~amcvega@114.108.252.168) has quit (Ping timeout: 245 seconds)
2013-09-02 12:16:39	erisco	> cons 2 (Just 5)
2013-09-02 12:16:40	lambdabot	  No instance for (Control.Lens.Cons.Cons
2013-09-02 12:16:40	lambdabot	                    Control.Lens.In...
2013-09-02 12:16:47	erisco	:t cons
2013-09-02 12:17:02	supki	@ty Control.Lens.cons
2013-09-02 12:17:03	lambdabot	Cons Control.Lens.Internal.Review.Reviewed Identity s s a a => a -> s -> s
2013-09-02 12:17:10	erisco	not the one I want :(
2013-09-02 12:17:11	supki	hth
2013-09-02 12:17:35	erisco	> Data.List.Class.cons 2 (Just 5)
2013-09-02 12:17:36	lambdabot	  Not in scope: `Data.List.Class.cons'
2013-09-02 12:17:49	erisco	> Data.List.Class.List.cons 2 (Just 5)
2013-09-02 12:17:51	lambdabot	  Not in scope: `Data.List.Class.List.cons'
2013-09-02 12:17:58	erisco	I don't know how to qualify it. bleh.
2013-09-02 12:18:04	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-02 12:18:08	donri	it doesn't have all of hackage
2013-09-02 12:18:11	supki	I don't think lambdabot has it at all
2013-09-02 12:18:49	erisco	I'm curious about this Data.List.Class is all
2013-09-02 12:20:08	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-02 12:20:36	erisco	a class which supposedly has a valid instance for Maybe cannot be a class that captures the properties of []
2013-09-02 12:20:56	erisco	but maybe "List" is being pulled from elsewhere
2013-09-02 12:21:06	<--	ashnur (~ashnur@79.117.88.155) has quit (Ping timeout: 264 seconds)
2013-09-02 12:21:16	-->	danharaj (~Adium@2002:457a:8edb:0:a53d:869:c13f:4a71) has joined #haskell
2013-09-02 12:21:35	 *	erisco sighs
2013-09-02 12:22:13	erisco	trying to find out how I don't need to rewrite my code to use an abstraction on [] merely so I can sometimes have a list with length :P
2013-09-02 12:22:22	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-02 12:22:41	donri	Maybe is just [] with no more than one element
2013-09-02 12:22:58	erisco	which is not the same as [], as I was saying
2013-09-02 12:23:19	erisco	if you write an algorithm for [], then you can't use that class as an abstraction
2013-09-02 12:23:22	erisco	it would be erroneous
2013-09-02 12:24:16	donri	that's often the case with these classes without theoretical grounds ;)
2013-09-02 12:24:22	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-02 12:24:38	erisco	"without theoretical grounds" what do you mean?
2013-09-02 12:24:50	-->	uvelichitel (~uvelichit@37.73.192.86) has joined #haskell
2013-09-02 12:24:54	donri	no formal laws
2013-09-02 12:25:37	erisco	right, well perhaps their meaning of List is different *shrug*
2013-09-02 12:25:41	-->	peterhil (~peterhil@158.127.31.162) has joined #haskell
2013-09-02 12:25:50	<--	danharaj (~Adium@2002:457a:8edb:0:a53d:869:c13f:4a71) has quit (Ping timeout: 245 seconds)
2013-09-02 12:26:23	donri	i took it to mean "list like", like the ListLike package, but haven't studied either closely
2013-09-02 12:26:54	erisco	mm I think the term "Stack" is fairly accurate
2013-09-02 12:27:40	 *	hackagebot labyrinth 0.3.0.0 - A complicated turn-based game  http://hackage.haskell.org/package/labyrinth-0.3.0.0 (AlexeyKotlyarov)
2013-09-02 12:27:58	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-02 12:28:03	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 12:28:08	-->	implementation (~impl@unaffiliated/implementation) has joined #haskell
2013-09-02 12:28:08	augur	donri: no formal laws just means no laws at all!
2013-09-02 12:28:13	augur	and thats a perfectly fine class :)
2013-09-02 12:28:37	augur	remember, every monad is a raw monad!
2013-09-02 12:29:01	augur	~ but not every raw monad is a monad ~
2013-09-02 12:29:17	erisco	augur, what does this mean?
2013-09-02 12:29:22	erisco	"raw monad"?
2013-09-02 12:29:31	augur	monad minus the laws
2013-09-02 12:29:31	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 12:29:35	<--	tazjin (~tazjin@2a01:2b0:3041:3018:d5f3:57a3:3a96:fc87) has quit (Ping timeout: 245 seconds)
2013-09-02 12:29:42	augur	so haskell monads, because there are no enorceable laws in haskell
2013-09-02 12:29:54	augur	as opposed to, say, agda monads, which are True Monads
2013-09-02 12:30:51	augur	you literally cant write an agda monad that doesnt obey the monad laws
2013-09-02 12:30:56	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 12:31:10	erisco	augur, lack of compiler enforcement is not entirely a fair assessment
2013-09-02 12:31:24	augur	erisco: who's assessing?
2013-09-02 12:31:26	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-02 12:31:35	erisco	"no enforceable laws"
2013-09-02 12:31:51	augur	thats just a statement of fact about haskell
2013-09-02 12:32:10	<--	charliesome (~root@ppp118-209-88-234.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 12:32:15	erisco	yes... in the most literal of senses :)
2013-09-02 12:32:37	augur	haskell doesnt reeeaaally have monads, it just hopes you wont break the laws. but there's nothing wrong with breaking them, provided you dont rely on them
2013-09-02 12:32:55	augur	im not sure if haskell does anything that actually relies on the monad laws being satisfied. maybe it does.
2013-09-02 12:33:14	laurence_day	you're hurting the equational reasoning part of me ;_;
2013-09-02 12:33:22	augur	laurence_day: why?
2013-09-02 12:34:07	<--	lcfrs (~lcfrs@50-1-125-2.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-09-02 12:34:09	laurence_day	just my own nitpickiness about monads having to be correct: you're right of course
2013-09-02 12:34:12	-->	Avukat (~judge@37.155.166.204) has joined #haskell
2013-09-02 12:34:20	laurence_day	you don't lose anything if they don't work
2013-09-02 12:34:25	laurence_day	i like the word 'quasimonadic' for that
2013-09-02 12:34:27	laurence_day	:)
2013-09-02 12:34:42	augur	laurence_day: your nitpickiness is correct, just not enforcedly so in haskell
2013-09-02 12:34:49	laurence_day	touché
2013-09-02 12:35:15	erisco	augur the logic machine
2013-09-02 12:35:26	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-02 12:35:27	augur	in a sense, by using the monad type class you're declaring that you've done your proofs and checked, but thats a promise you make to the community, not to haskell
2013-09-02 12:35:47	laurence_day	aye, sure
2013-09-02 12:35:55	erisco	augur, slightly different topic, but I wager you'd have some insight...
2013-09-02 12:35:59	augur	violating the monad laws in haskell is "technically ok", but socially disreputable
2013-09-02 12:36:03	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-02 12:36:19	augur	sort of like burping loudly!
2013-09-02 12:36:23	-->	chexxor_netbook (~chexxor@114-43-138-88.dynamic.hinet.net) has joined #haskell
2013-09-02 12:36:33	augur	its not "immoral" but its certainly not something you do in polite company
2013-09-02 12:36:48	laurence_day	ergo my equational reasoning comment: i've burnt myself many times by doing things in what i thought was a monad and been stopped short
2013-09-02 12:36:48	laurence_day	Heh
2013-09-02 12:36:56	-->	charliesome (~root@ppp118-209-88-234.lns20.mel4.internode.on.net) has joined #haskell
2013-09-02 12:37:26	erisco	augur, I need an abstraction of [], evidently, so I started on this: http://lpaste.net/92439  but under "missing stuff" there are a couple things I don't know how to even logically state
2013-09-02 12:37:31	<--	longqm (~longqm@219.224.160.186) has quit (Ping timeout: 245 seconds)
2013-09-02 12:37:40	 *	hackagebot bytes 0.11.5 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.11.5 (EdwardKmett)
2013-09-02 12:37:53	<--	madjestic (~madjestic@31.20.82.94) has quit (Ping timeout: 240 seconds)
2013-09-02 12:38:07	erisco	augur, is there some sort of induction required?
2013-09-02 12:38:17	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 12:38:18	augur	what do you mean
2013-09-02 12:38:54	augur	also i think your laws are shady
2013-09-02 12:39:07	erisco	I can't seem to state those properties other than by saying there exists an n \in N such that n applications of oust (unpacking from the Maybe and tuple, of course) will yield x
2013-09-02 12:39:08	augur	well, depending on what oust is "meant" to do
2013-09-02 12:39:33	-->	ashnur (~ashnur@79.117.73.210) has joined #haskell
2013-09-02 12:39:34	erisco	augur, supposed to be the pattern match (x:xs)
2013-09-02 12:39:45	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 12:39:46	augur	oh ok
2013-09-02 12:40:18	augur	why dont you just say you have a type thats iso to lists?
2013-09-02 12:40:23	-->	paul_85 (~paul@58-6-94-173.dyn.iinet.net.au) has joined #haskell
2013-09-02 12:40:30	erisco	because what does that mean? :s
2013-09-02 12:40:36	augur	it seems like you want listy behavior, but not necessarily listy representation
2013-09-02 12:40:38	<--	chatsiri_ (~chatsiri_@158.108.142.164) has quit (Ping timeout: 240 seconds)
2013-09-02 12:40:56	augur	doesnt it tho? it seems like every Collection can be turned into a list
2013-09-02 12:40:59	augur	and vice versa
2013-09-02 12:41:01	augur	in an isomorphic way
2013-09-02 12:41:05	erisco	augur, yes. in fact because I want a "list with length" ie an O(1) length operation
2013-09-02 12:41:07	-->	madjestic (~madjestic@31.20.82.94) has joined #haskell
2013-09-02 12:41:09	-->	stianhj (~stian@89.11.19.16) has joined #haskell
2013-09-02 12:41:34	augur	erisco: ok, so just say its iso to list
2013-09-02 12:41:50	erisco	augur, yes that would be a consequence of having no more or less properties than list, I would think
2013-09-02 12:41:58	erisco	augur, is list well defined somewhere else?
2013-09-02 12:42:01	donri	for what value of "collection" though? Set is lossy
2013-09-02 12:42:05	augur	erisco: i dont know what you mean tho
2013-09-02 12:42:11	augur	defined somewhere else?
2013-09-02 12:42:34	augur	class Functor f => IsoFunctor f where toList :: f a -> [a] ; fromList :: [a] -> f a
2013-09-02 12:42:45	augur	with laws toList.fromList = id ; fromList.toList = id
2013-09-02 12:43:18	erisco	augur, that seems reasonable
2013-09-02 12:43:29	augur	you can loosen that somewhat to just the first one if you want to allow trees to be members
2013-09-02 12:43:30	<--	ashnur (~ashnur@79.117.73.210) has quit (Client Quit)
2013-09-02 12:43:33	erisco	augur, so I suppose then what I am doing is simply describing facts of list
2013-09-02 12:43:52	<--	talzeus (~studybot_@101.110.31.120) has quit (Remote host closed the connection)
2013-09-02 12:43:58	erisco	but no... wait
2013-09-02 12:44:13	augur	trees have more structure than lists, so they can be used wherever you use lists, essentially, except the roundtrip through lists isnt an iso because you're canonicalizing
2013-09-02 12:44:56	erisco	how does a function to convert to and from [] guarantee that when I convert from [] that the new data structure adheres to all the laws of []?
2013-09-02 12:45:15	augur	there are no guarantees in haskell. thats up to the user of the type class
2013-09-02 12:45:29	erisco	even theoretically
2013-09-02 12:45:41	augur	i dont know what you mean
2013-09-02 12:45:43	erisco	for example
2013-09-02 12:45:48	augur	functions dont guarantee anything
2013-09-02 12:45:53	augur	either they have the property or they dont
2013-09-02 12:45:54	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-02 12:46:09	augur	if they dont, they dont
2013-09-02 12:46:10	-->	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has joined #haskell
2013-09-02 12:46:15	augur	if they do they do
2013-09-02 12:46:16	hiptobecubic	what are the laws of []
2013-09-02 12:46:28	erisco	hiptobecubic, dunno was working on that
2013-09-02 12:46:47	erisco	augur, I agree that a function in Haskell does not guarantee anything
2013-09-02 12:46:49	-->	dkordic (~danilo@93-87-124-217.dynamic.isp.telekom.rs) has joined #haskell
2013-09-02 12:46:49	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 12:46:56	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-02 12:47:10	augur	erisco: you can i think essentially just reduce it to laws about vacant, into, and oust, i think.
2013-09-02 12:47:15	erisco	augur, however, I am talking about the written documentation for what it ought to guarantee
2013-09-02 12:47:16	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-09-02 12:47:18	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 264 seconds)
2013-09-02 12:47:25	augur	erisco: yes but thats what i just said
2013-09-02 12:47:37	augur	you specify it as an iso
2013-09-02 12:47:44	erisco	okay, I understand
2013-09-02 12:47:46	erisco	but
2013-09-02 12:47:46	hiptobecubic	if you want it to behave like [], why not use []?
2013-09-02 12:48:05	augur	hiptobecubic: he wants to have more flexibility with representations
2013-09-02 12:48:09	augur	such as manifest length
2013-09-02 12:48:21	erisco	(that is important for the big-O of my program)
2013-09-02 12:48:35	hiptobecubic	so you don't want [], then, which can be infinite
2013-09-02 12:49:28	-->	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-02 12:49:41	augur	length ofcourse can be indexed, so if you used a vector instead you can just read off the length, but haskell doesnt have true vectors. you'd need to use SHE to get that feature
2013-09-02 12:49:54	augur	erisco: you could ofcourse just use (Int,[a]) :)
2013-09-02 12:49:56	erisco	hiptobecubic, so can a list with length
2013-09-02 12:50:02	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 12:50:09	augur	but im not sure why you want to create a type class, erisco
2013-09-02 12:50:09	<--	fosky_ (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Ping timeout: 256 seconds)
2013-09-02 12:50:29	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 12:50:54	erisco	augur, I'll worry about that, but I want to ask
2013-09-02 12:50:56	b__	@pl pva i n f = sum [pv i x f | x <- [0..n]]
2013-09-02 12:50:59	lambdabot	pva = id (fix (const (((sum .) .) . flip (flip . (flip .) . (((:) .) .) . flip ((.) . flip . ((<-) .) . flip (flip . ((|) .) . flip pv x) x) (enumFromTo 0)) [])))
2013-09-02 12:50:59	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-02 12:51:10	b__	insanity
2013-09-02 12:51:13	hiptobecubic	so you want length to be O(1), but _|_ if the collection is infinite?
2013-09-02 12:51:14	erisco	augur, if iso with list means toList and fromList as you stated
2013-09-02 12:51:32	erisco	augur, how does that say anything about what I get out of fromList?
2013-09-02 12:51:43	erisco	because it seems to say nothing
2013-09-02 12:52:30	erisco	"iso with list" may mean losslessly convertible from and back to a list, by the id laws you stated
2013-09-02 12:52:43	augur	erisco: it says nothing specific. it does say, however, that you can turn it back into a list without any information loss.
2013-09-02 12:53:09	erisco	correct, which means that if I depend on the properties of [] then the only thing iso lets me do is convert back to []
2013-09-02 12:53:18	erisco	so I never can use the other representation
2013-09-02 12:53:20	augur	but as a consequence, you get that there must exist some functions that work just like the ones you're interested in, by virtue of the iso
2013-09-02 12:53:28	augur	erisco: why cant you use the other representation?
2013-09-02 12:53:37	erisco	because it doesn't have to behave like []
2013-09-02 12:53:42	augur	no it doesnt
2013-09-02 12:53:42	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 12:53:46	<--	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 246 seconds)
2013-09-02 12:53:47	augur	but so what?
2013-09-02 12:54:00	augur	just because it doesnt HAVE TO doesnt mean it CANT
2013-09-02 12:54:01	erisco	and by "doesn't have to" I don't mean "haskell can't throw a compiler error if it doesn't"
2013-09-02 12:54:10	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 245 seconds)
2013-09-02 12:54:19	erisco	I mean there is nothing stated theoretically by iso that would require such a thing
2013-09-02 12:54:29	augur	thats correct
2013-09-02 12:54:43	augur	i mean, to some extent there is, via the iso
2013-09-02 12:54:50	augur	but that doesnt mean its efficient to use the iso for that
2013-09-02 12:55:10	erisco	okay, so
2013-09-02 12:55:13	augur	there is, for instance, a head-like function by composition:   head.toList
2013-09-02 12:55:20	augur	and a tail-like function   tail.toList
2013-09-02 12:55:21	augur	etc etc
2013-09-02 12:55:38	augur	but this is why im asking why you want a type class in the first place
2013-09-02 12:55:59	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 12:56:05	erisco	if I had a function which currently worked on [], and I wanted to generalize, I would instead accept something iso to list, operate on the list, then iso back
2013-09-02 12:56:34	erisco	is that the picture?
2013-09-02 12:56:58	augur	thats one way of doing things, yes. its not efficient, obviously, but its guaranteed to work.
2013-09-02 12:57:19	erisco	I agree that will work. However, yes, I lose exactly the efficiency I am requiring
2013-09-02 12:57:40	augur	list-y type classes dont give you the efficiency you require either, however.
2013-09-02 12:57:43	donri	erisco: depending on the operation you could possibly generalize to some of Functor, Foldable, Traversable
2013-09-02 12:57:46	augur	all they do is specify an interface
2013-09-02 12:58:10	augur	erisco: what you seem to want to do is invent your own type, and then merely prove that it's iso to lists
2013-09-02 12:58:14	<--	pgiarrusso (~pgiarruss@dslb-084-059-072-081.pools.arcor-ip.net) has quit (Quit: pgiarrusso)
2013-09-02 12:58:15	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-02 12:58:16	augur	you dont need a typeclass for this, you just do it.
2013-09-02 12:58:32	erisco	augur, correct, however if an algorithm is written to operate on that interface, and I supply the instance, then I know the additional properties of the instance will still be held
2013-09-02 12:58:37	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 12:59:04	augur	erisco: you dont need to use a typeclass for any of this
2013-09-02 12:59:09	erisco	how is it merely just proof of iso to list? did we not just agree how it isn't that?
2013-09-02 12:59:16	-->	Eduard_Munteanu (~EduardMun@188.25.245.23) has joined #haskell
2013-09-02 12:59:23	augur	no, a proof of isomorphism is not the IsoFunctor class i described
2013-09-02 12:59:42	erisco	okay
2013-09-02 12:59:47	augur	the class i described was a cheap way to state very generically that something is iso
2013-09-02 12:59:57	augur	but you seem to merely want to know that the thing you're implementing is iso
2013-09-02 13:00:15	augur	you want to invent LengthTaggedList and you want to know that it's "basically just a list"
2013-09-02 13:00:26	augur	so just do that
2013-09-02 13:00:36	augur	invent the type, and show that its basically just a list
2013-09-02 13:00:45	augur	that is, exhibit an isomorphism
2013-09-02 13:00:51	<--	laurence_day (80f3ec03@gateway/web/freenode/ip.128.243.236.3) has quit (Ping timeout: 250 seconds)
2013-09-02 13:00:52	erisco	augur, how does this not miss the point we just discussed?
2013-09-02 13:01:03	erisco	that is, if I want to write algorithms generic to the representation
2013-09-02 13:01:09	mm_freak	Applicative ((:[]) + liftM* or repeat+zipWith), Alternative ([]/++), Functor (map), Foldable (foldr/foldl), Monad (concatMap), Traversable (mapM), …
2013-09-02 13:01:14	jdoles	Does http://ipwnstudios.com/ still exist?
2013-09-02 13:01:36	mm_freak	erisco: see what operations you use and how you can generalize them…  the list above might help
2013-09-02 13:01:49	augur	erisco: aha, thats what you want to do? write something generically over all listy things? well then you cant guarantee the efficiency you seek to guarantee.
2013-09-02 13:01:54	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-02 13:02:08	augur	erisco: if you want to be generic, then you must be generic over really stupid implementations
2013-09-02 13:02:11	erisco	augur, perhaps proving isomorphism is all I need for my list of laws, but your assertion that I do not need a type class is a different matter
2013-09-02 13:02:24	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-02 13:02:29	augur	erisco: you need a typeclass if you want genericity over the algo, this is true
2013-09-02 13:02:48	erisco	"cannot guarantee the efficiency you seek to guarantee" why?
2013-09-02 13:03:05	mm_freak	erisco: if you require isomorphism to [], you should just write a list algorithm to begin with
2013-09-02 13:03:13	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-02 13:03:17	jdoles	If you want efficiency, why would you write it in Haskell to begin with?
2013-09-02 13:03:18	augur	but that genericity costs you your desired efficiency. or at least it makes it arbitrarily dependent on the implementation
2013-09-02 13:03:25	mm_freak	erisco: a generalized type signature will not make your algorithm more general and likely less efficient
2013-09-02 13:03:27	erisco	if I write genericTails which works on any listy thing, and I give it the listy thing of "list with length", then I know the length of the list can be determined in O(1)
2013-09-02 13:03:41	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-09-02 13:03:45	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 245 seconds)
2013-09-02 13:03:49	erisco	jdoles, this is big-O, not just coefficients
2013-09-02 13:03:58	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-02 13:04:05	augur	erisco: only for that particular implementation
2013-09-02 13:04:14	erisco	augur, yes but that is the point!
2013-09-02 13:04:17	augur	but you dont need type classes to do that
2013-09-02 13:04:21	erisco	why
2013-09-02 13:04:24	augur	why why
2013-09-02 13:04:25	<--	longqm (~longqm@219.224.160.186) has quit (Read error: Connection timed out)
2013-09-02 13:04:27	<--	asQuirreL (~asQuirreL@31.221.100.202) has quit (Quit: Computer has gone to sleep.)
2013-09-02 13:04:35	<--	void64 (~luke@37.212.119.97) has quit (Ping timeout: 245 seconds)
2013-09-02 13:04:39	augur	you dont need type classes to make lists-with-length
2013-09-02 13:04:50	erisco	agreed
2013-09-02 13:04:59	erisco	I can duplicate the functions
2013-09-02 13:05:05	erisco	I can have listWithLengthTails, and so on
2013-09-02 13:05:06	augur	type classes let you abstract an interface, thats all.
2013-09-02 13:05:12	erisco	that is stupid though
2013-09-02 13:05:15	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 13:05:21	jdoles	erisco: why is that stupid?
2013-09-02 13:05:21	augur	how is that stupid
2013-09-02 13:05:23	osfameron	jdoles: efficiency compared to what?  I tend to write perl/python day-to-day, so rewriting in Haskell would (very likely) be more efficient ;-)
2013-09-02 13:05:49	erisco	if this is the crux of why you say I don't need it, then I won't bother arguing further :P
2013-09-02 13:05:51	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-02 13:05:53	jdoles	osfameron: compared to optimized C++.
2013-09-02 13:06:03	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 13:06:12	augur	erisco: dont blame me for your lack of understanding of your own problem >_>
2013-09-02 13:06:14	<--	fsvehla (~fsvehla@TK212017097035.teleweb.at) has quit (Quit: fsvehla)
2013-09-02 13:06:30	erisco	that isn't blame
2013-09-02 13:06:46	jdoles	osfameron: in principle Haskell should be faster than C++ (there is more information about the static behaviour of the program available), but somehow it isn't.
2013-09-02 13:06:48	erisco	I don't know how to explain how duplicating functions is not stupid
2013-09-02 13:06:53	<--	madjestic (~madjestic@31.20.82.94) has quit (Ping timeout: 240 seconds)
2013-09-02 13:07:12	erisco	or is stupid rather
2013-09-02 13:07:20	jdoles	osfameron: and in the end, all that matters is how fast a given correct program can be obtained with a given desired performance level.
2013-09-02 13:07:22	mm_freak	jdoles: haskell actually beats optimized C/C++ for some operations
2013-09-02 13:07:30	augur	erisco: duplication functions is stupid indeed, but if you're only ever going to use them for one particular instance of the class, there's no duplication
2013-09-02 13:07:38	osfameron	there is a very limited set of tasks that I would write C++ for.  Actually, Arduino programming is pretty much it.
2013-09-02 13:07:48	jdoles	Let me refer to the Eigen library again.
2013-09-02 13:07:48	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 13:08:13	augur	you write them once. either they're generic and apply to any listy thing, and you get what you get, efficient or not, or you write them specialized to the efficient type you want to use
2013-09-02 13:08:14	-->	matheus23 (~quassel@p4FDF3563.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 13:08:18	jdoles	Additionally, there is a severe lack of programs written in Haskell, which doesn't do much good for its credibility.
2013-09-02 13:08:37	mm_freak	jdoles: not a lack of programs — a lack of users
2013-09-02 13:08:41	augur	if you're only ever going to care about your efficient type, then there is no point in using a type class
2013-09-02 13:08:41	sipa	the same was once true for C
2013-09-02 13:08:42	jdoles	Even OCaml has more financial backing than Haskell.
2013-09-02 13:08:55	erisco	augur, okay. thanks for your help :)
2013-09-02 13:09:00	mm_freak	financial backing is meaningless
2013-09-02 13:09:01	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-02 13:09:07	-->	hexagoxel (~hexagoxel@pc230153.eduroam.uni-kiel.de) has joined #haskell
2013-09-02 13:09:19	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 13:09:19	<--	xl (~xl@114.254.148.6) has left #haskell
2013-09-02 13:09:22	sipa	jdoles: Oracle also has more financial backing than postgresql
2013-09-02 13:09:42	augur	erisco: anyway, if you insist on doing the typeclass thing anyway, all you need are the laws about fake-nil and fake-cons
2013-09-02 13:09:43	jdoles	sipa: Oracle is only backed by one party.
2013-09-02 13:09:48	jdoles	sipa: so, that's not the same.
2013-09-02 13:09:54	-->	fsdfsd (~judge@37.155.188.167) has joined #haskell
2013-09-02 13:09:57	augur	erisco: and your fake-case
2013-09-02 13:10:05	sipa	ok
2013-09-02 13:10:06	erisco	augur, sorry what are these things?
2013-09-02 13:10:14	mm_freak	jdoles: PHP has a lot more financial backing than haskell
2013-09-02 13:10:18	mm_freak	so PHP is better?
2013-09-02 13:10:27	jdoles	mm_freak: PHP is better for some things, yes.
2013-09-02 13:10:40	mm_freak	jdoles: broken guestbooks, what else?
2013-09-02 13:10:43	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-02 13:10:47	sipa	lol
2013-09-02 13:10:51	kranius	:)
2013-09-02 13:10:59	jdoles	Extremely low-cost, low-quality simple web application creation.
2013-09-02 13:11:04	erisco	augur, fake-nil as in vacant, fake-cons as in into, and fake-case as in?
2013-09-02 13:11:11	augur	that is to say,  oust vacant == Nothing ; oust (x `into` xs) == Just (x,xs)
2013-09-02 13:11:11	jdoles	(for which there happens to be a lot of demand)
2013-09-02 13:11:21	edwardk	jdoles: I'll just say this, my experience with Haskell's efficiency does not match up with your assessment. I've written, shipped and sold production quality software written in Haskell and had it blow the doors off the nearest hand-written laboriously tuned C/C++ equivalent, because Haskell let me work smarter, not harder and ship better algorithms.
2013-09-02 13:11:22	jdoles	Nobody is interested in perfection.
2013-09-02 13:11:27	mm_freak	jdoles: ok, you have a point there…  haskell does not support the low-quality aspect =)
2013-09-02 13:11:33	<--	Avukat (~judge@37.155.166.204) has quit (Ping timeout: 240 seconds)
2013-09-02 13:11:34	osfameron	I dislike PHP as much as the next programming language snob, but there are some extremely complex, high quality apps with great UIs written with PHP
2013-09-02 13:11:53	Maior	oh another language war, yay
2013-09-02 13:11:59	erisco	augur, you can reduce the 5 laws I have currently stated into three?
2013-09-02 13:12:00	Maxdamantus	Is Facebook still written in PHP?
2013-09-02 13:12:15	jdoles	edwardk: do you have any pretty pictures of your work or is it all classified?
2013-09-02 13:12:16	-->	janua (~janua@nat-123-249.guardian.co.uk) has joined #haskell
2013-09-02 13:12:17	mm_freak	Maxdamantus: well, in what they call "hiphop"
2013-09-02 13:12:22	mm_freak	a compiled PHP dialect
2013-09-02 13:12:28	jdoles	edwardk: besides your articles, that is.
2013-09-02 13:12:31	augur	erisco: into two. those are the defining laws of lists.
2013-09-02 13:12:43	<--	nilsi (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-09-02 13:12:48	edwardk	Most of what I do winds up classified ;)
2013-09-02 13:13:02	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-09-02 13:13:09	edwardk	Well, not as classified as when I was a defense contractor =)
2013-09-02 13:13:14	jdoles	edwardk: how much do you charge?
2013-09-02 13:13:17	erisco	augur, okay I will try and derive the others I stated from them :) cool. what about "missing stuff"?
2013-09-02 13:13:17	-->	nilsi (~nilsi@46.165.220.223) has joined #haskell
2013-09-02 13:13:30	-->	Sorella (~quildreen@201.80.214.167) has joined #haskell
2013-09-02 13:13:30	<--	Sorella (~quildreen@201.80.214.167) has quit (Changing host)
2013-09-02 13:13:30	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-02 13:13:36	mm_freak	"enough"
2013-09-02 13:13:38	jdoles	Some people charge 800$ and also put it on their website, so there is nothing to be ashamed of.
2013-09-02 13:13:43	augur	erisco: deriving them probably wont be easy, but its unnecessary to do so
2013-09-02 13:13:48	erisco	augur, I'm really clueless on how to establish those facts... and both are definitely true for []
2013-09-02 13:13:58	-->	srh_ (~sam@c-98-234-179-222.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 13:14:00	jdoles	(per hour)
2013-09-02 13:14:08	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 13:14:13	edwardk	I don't tend to do hourly work.
2013-09-02 13:14:20	erisco	augur, agreed, but that would be taking you on word ;) rather I just want to see how the redundancy of what I did comes in
2013-09-02 13:14:27	augur	erisco: within can be eliminated entirely, you realize.
2013-09-02 13:14:29	erisco	augur, this is the first time I've tried to establish such a thing
2013-09-02 13:14:33	augur	its definable in terms of oust
2013-09-02 13:14:35	-->	nilsi_ (~nilsi@183.245.65.242) has joined #haskell
2013-09-02 13:14:43	erisco	augur, according to you, yes, I'll look at that indeed
2013-09-02 13:14:51	augur	so you can just get rid of it
2013-09-02 13:14:53	edwardk	I tend to write something big in a domain and sell it off once and for all.
2013-09-02 13:15:04	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 13:15:11	jdoles	edwardk: and where do you get the domain knowledge?
2013-09-02 13:15:13	erisco	augur, then "missing stuff" kinda vanishes it seems
2013-09-02 13:15:18	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-02 13:15:21	jdoles	edwardk: or even that there is demand for whatever you are writing?
2013-09-02 13:15:47	edwardk	jdoles: I collect degrees and have a pretty wide-ranging technical background
2013-09-02 13:15:49	erisco	augur, I guess you would rather define the operation of "within" using just oust and into, yeah? then you'd prove the "missing stuff" based off the definition of "within"
2013-09-02 13:15:51	augur	specifically   within y fxs = case oust fxs of { Nothing -> False ; Just (x,fxs') -> x == y || within y fxs' }
2013-09-02 13:15:53	erisco	augur, that is my guess
2013-09-02 13:16:12	augur	erisco: this is just the normal elem definition but strung through your oust case gadget
2013-09-02 13:16:15	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-09-02 13:16:24	jdoles	edwardk: the second question is the more interesting one, I suppose. It's not that hard to learn useful parts of a domain.
2013-09-02 13:16:31	erisco	augur, right, and through such a definition I can prove "missing stuff"
2013-09-02 13:16:48	erisco	augur, right? excellent :D
2013-09-02 13:16:57	augur	erisco: there's nothing left to prove. within _is_ repeated use of oust.
2013-09-02 13:17:04	<--	soulofpeace (~soulofpea@119.75.11.250) has quit (Ping timeout: 268 seconds)
2013-09-02 13:17:09	erisco	yes, even better point ^.^
2013-09-02 13:17:26	augur	btw, erisco
2013-09-02 13:17:31	erisco	hm?
2013-09-02 13:17:56	<--	nilsi (~nilsi@46.165.220.223) has quit (Ping timeout: 245 seconds)
2013-09-02 13:18:10	-->	h007 (~pt114@lxphd02.macs.hw.ac.uk) has joined #haskell
2013-09-02 13:18:13	augur	there is a library that is, smuggly, called Sexy Prelude, i think, which has done all of this already.
2013-09-02 13:18:43	augur	they abstracted all of the prelude library into type classes instead of rigid data types
2013-09-02 13:18:47	erisco	https://github.com/DanBurton/sexy ?
2013-09-02 13:19:05	augur	oh, no, i think its classy prelude, actually
2013-09-02 13:19:07	edwardk	As for knowing about demand, I do a lot of work on parallel/work-stealing algorithms, cache-oblivious structures, Bayesian models, automatic differentiation comes up in my code in tons of places, GPGPU work, movie-style Metropolis light transport and general mathematics. The things I write tend to be applicable across a wide-array of domains in general and then in graphics in particular, because that was an early love of mine.
2013-09-02 13:19:26	-->	madjestic (~madjestic@188.91.94.26) has joined #haskell
2013-09-02 13:19:30	augur	who knows. there's a video on it, erisco. lemme find it.
2013-09-02 13:19:47	erisco	augur, I'm all for this already being done :D
2013-09-02 13:19:54	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 264 seconds)
2013-09-02 13:19:59	augur	the idea tho was to make the normal definitions work on genericized types so that you can write JS using haskell
2013-09-02 13:20:20	augur	ah no, erisco, it's AwesomePrelude
2013-09-02 13:20:20	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 13:20:25	augur	http://vimeo.com/9351844
2013-09-02 13:20:50	augur	anyway, erisco, ultimately what makes a type what it is is two things:
2013-09-02 13:20:58	augur	the constructors, and the case analysis
2013-09-02 13:21:03	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-02 13:21:26	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 13:21:33	augur	you've smuggled in the case analysis for lists by way of Maybe and pairs, but you ought to avoid that and just use the essential structure of the case operation
2013-09-02 13:21:36	augur	which is this:
2013-09-02 13:21:46	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 13:21:57	erisco	something did seem unsatisfying about that
2013-09-02 13:22:02	h007	can someone tell me what is wrong with this random tree generation code? http://pastebin.com/cWZxNC1z
2013-09-02 13:22:07	mauke	The paste cWZxNC1z has been copied to http://lpaste.net/92440
2013-09-02 13:22:10	augur	listCase :: [a] -> r -> (a -> [a] -> r) -> r
2013-09-02 13:22:12	h007	it just halts
2013-09-02 13:22:16	-->	tryhr (53082efe@gateway/web/freenode/ip.83.8.46.254) has joined #haskell
2013-09-02 13:22:20	augur	listCase [] nilCase consCase = nilCase
2013-09-02 13:22:28	augur	listCase (x:xs) nilCase consCase = consCase x xs
2013-09-02 13:22:39	-->	adiq (~adiq@unaffiliated/adiq) has joined #haskell
2013-09-02 13:22:46	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 13:22:59	<--	adiq (~adiq@unaffiliated/adiq) has left #haskell
2013-09-02 13:23:14	tryhr	سمَـَّوُوُحخ ̷̴̐خ ̷̴̐خ ̷̴̐خ امارتيخ ̷̴̐خ
2013-09-02 13:23:14	<--	tryhr (53082efe@gateway/web/freenode/ip.83.8.46.254) has quit (Killed (idoru (Spam is off topic on freenode.)))
2013-09-02 13:23:15	<--	mjo (~mjo@82-68-90-198.dsl.in-addr.zen.co.uk) has quit (Remote host closed the connection)
2013-09-02 13:23:15	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Remote host closed the connection)
2013-09-02 13:23:15	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Remote host closed the connection)
2013-09-02 13:23:16	<--	csakatok_ (~csakatoku@em119-72-198-239.pool.e-mobile.ne.jp) has quit (Remote host closed the connection)
2013-09-02 13:23:16	h007	i based my on the code here: http://byorgey.wordpress.com/2013/04/25/random-binary-trees-with-a-size-limited-critical-boltzmann-sampler-2/ which works for binary tree, but when i add more nodes, it halts
2013-09-02 13:23:16	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Remote host closed the connection)
2013-09-02 13:23:17	<--	jonsmock (~jonsmock@c-174-60-102-51.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-02 13:23:18	-->	dimday (~amcvega@50.23.115.113) has joined #haskell
2013-09-02 13:23:23	augur	those are the laws you want to obey, erisco
2013-09-02 13:23:27	augur	!ops
2013-09-02 13:23:29	jdoles	Bye Apple users.
2013-09-02 13:23:31	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-02 13:23:33	-->	Gentlecat (~Roman@79.105.224.65) has joined #haskell
2013-09-02 13:23:37	-->	csakatoku (~csakatoku@em119-72-198-239.pool.e-mobile.ne.jp) has joined #haskell
2013-09-02 13:23:42	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 13:23:45	<--	codesoup (~codesoup@69-165-163-1.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-09-02 13:23:47	augur	jdoles: im on a mac :D
2013-09-02 13:23:53	augur	erisco: so what you want is this class:
2013-09-02 13:24:13	jdoles	augur: why aren't you gone then?
2013-09-02 13:24:17	erisco	augur, actually it is on the video poster you linked to :P
2013-09-02 13:24:17	augur	jdoles: magic
2013-09-02 13:24:27	augur	erisco: their version is SLIGHTLY different
2013-09-02 13:24:28	augur	but
2013-09-02 13:24:30	sipa	why would he...?
2013-09-02 13:24:43	jdoles	augur: perhaps you use a command line irc client.
2013-09-02 13:24:48	augur	sipa: that text tryhr posted is toxic
2013-09-02 13:24:53	<--	n00dle (~n00dle@unaffiliated/n00dle) has quit (Ping timeout: 240 seconds)
2013-09-02 13:24:55	augur	jdoles: nope, limechat
2013-09-02 13:25:05	jdoles	augur: is that GTK?
2013-09-02 13:25:05	augur	class Listish f where   nil :: f a   ;   cons :: a -> f a -> f a
2013-09-02 13:25:14	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Remote host closed the connection)
2013-09-02 13:25:16	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-02 13:25:19	h007	mauke: thanks, any help with the code?
2013-09-02 13:25:30	augur	;   caseListish :: f a -> r -> (a -> f a -> r) -> r
2013-09-02 13:25:30	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-02 13:25:45	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-09-02 13:25:55	augur	erisco: with the laws   caseListish nil n c = n ; caseListish (cons x xs) n c = c x xs
2013-09-02 13:26:15	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 245 seconds)
2013-09-02 13:26:22	-->	n00dle (~n00dle@unaffiliated/n00dle) has joined #haskell
2013-09-02 13:26:30	augur	erisco: you should get this pattern down, because this is THE definition of an ADT.
2013-09-02 13:26:57	erisco	sorry, do you mean this is how ADTs are defined?
2013-09-02 13:27:01	h007	help fixing this tree generation code? http://lpaste.net/92440 anyone? it works and fails randomly
2013-09-02 13:27:14	<--	Jonno_FTW (~come@9ch.in) has quit (Ping timeout: 240 seconds)
2013-09-02 13:27:14	<--	Beetny (~Beetny@ppp118-208-44-67.lns20.bne1.internode.on.net) has quit (Ping timeout: 264 seconds)
2013-09-02 13:27:18	augur	erisco: yes, basically, all ADTs are nothing but this notion: constructors + case analysis
2013-09-02 13:27:24	augur	actually technically its constructors + fold
2013-09-02 13:27:33	erisco	yum yum :)
2013-09-02 13:27:41	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-02 13:27:43	augur	but thats reconstructible from the case usually
2013-09-02 13:27:53	augur	i forget what you need to do that. maybe ambient recursion?
2013-09-02 13:28:02	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-09-02 13:28:07	erisco	augur, these are some delicious things to learn... I still have to look at the listCase and grok what it is doing
2013-09-02 13:28:13	erisco	but I've copied it down
2013-09-02 13:28:23	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-02 13:28:25	augur	erisco: listCase is doing .. case analysis for lists!
2013-09-02 13:28:32	augur	look at this explicit case expression for lists:
2013-09-02 13:28:32	erisco	yes.. thanks.. :P
2013-09-02 13:28:36	mr-	h007: how does it fail?
2013-09-02 13:28:43	erisco	well you keep typing stuff so I haven't looked deeply yet :P
2013-09-02 13:28:46	erisco	give me a minute
2013-09-02 13:29:00	augur	case l of { [] -> n ; (x:xs) -> m }
2013-09-02 13:29:04	h007	just freezes, no output
2013-09-02 13:29:12	augur	x and xs are free in m, so really we might as well just say
2013-09-02 13:29:23	mr-	h007: oh, because it does not terminate
2013-09-02 13:29:23	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Remote host closed the connection)
2013-09-02 13:29:23	<--	madjestic (~madjestic@188.91.94.26) has quit (Ping timeout: 240 seconds)
2013-09-02 13:29:25	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-02 13:29:32	h007	mr-: if you try it in ghci you'll se
2013-09-02 13:29:45	h007	mr-: yes
2013-09-02 13:29:48	augur	case l of { [] -> n ; (x:xs) -> c x xs } where c is a closed function (ie no free vars)
2013-09-02 13:30:06	mr-	h007: it does not fail, it just creates a huge tree
2013-09-02 13:30:07	Cale	h007: the expected size of the generated tree is infinite
2013-09-02 13:30:15	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 13:30:15	erisco	augur, hang on for a second
2013-09-02 13:30:20	augur	erisco: holding
2013-09-02 13:30:20	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-02 13:30:26	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-02 13:30:31	augur	edwardk: wabisabi
2013-09-02 13:30:36	h007	right, how can i specify a max depth?
2013-09-02 13:30:38	-->	adiq (~adiq@unaffiliated/adiq) has joined #haskell
2013-09-02 13:30:43	erisco	augur, you said    listCase [] nilCase consCase = nilCase; listCase (x:xs) nilCase consCase = consCase x xs
2013-09-02 13:30:45	edwardk	i think augur finally snapped
2013-09-02 13:30:49	<--	adiq (~adiq@unaffiliated/adiq) has left #haskell
2013-09-02 13:30:57	mr-	h007: you could give it another parameter
2013-09-02 13:30:59	augur	edwardk: it wasnt me! D:
2013-09-02 13:31:07	erisco	but nilCase is constant between the two, with only the pattern match on the list changing
2013-09-02 13:31:07	augur	erisco: yep
2013-09-02 13:31:11	erisco	and consCase
2013-09-02 13:31:13	erisco	:s
2013-09-02 13:31:15	augur	erisco: yes it is!
2013-09-02 13:31:21	erisco	ohh
2013-09-02 13:31:23	erisco	right
2013-09-02 13:31:24	Cale	h007: take the depth as a parameter to the function
2013-09-02 13:31:30	erisco	it is returning the argument... silly me
2013-09-02 13:31:30	Cale	h007: (the max depth)
2013-09-02 13:31:32	augur	nilCase is what you do when the list is []
2013-09-02 13:31:33	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 13:31:37	Cale	h007: if it's 0, then you have to produce a leaf
2013-09-02 13:31:40	<--	pierreghz (~krux@180.68-247-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 245 seconds)
2013-09-02 13:31:45	augur	obviously you dont need any more information about [] since you know everything there is to know about it
2013-09-02 13:31:45	erisco	for some reason the thing on the right wasn't pairing with the thing on the left in my head
2013-09-02 13:31:56	-->	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-02 13:32:03	augur	etc for the cons case
2013-09-02 13:32:14	h007	Cale/mr-: let me try change it in lpaste directly
2013-09-02 13:32:24	augur	erisco: the point is, what defines an ADT is its constructor-case interaction.
2013-09-02 13:33:07	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-09-02 13:33:48	-->	pierreghz (~krux@69.85-247-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-02 13:33:48	augur	all else is irrelevant, so as long as you do that, you're fine. you can do it with just lambdas, if you're cheeky, and that gives you whats called a scott encoding.
2013-09-02 13:34:10	augur	erisco: scott encodings being one standard way of coding lists in the untyped LC, provided you have ambient recursion.
2013-09-02 13:34:45	erisco	I am still stuck on figuring out what listCase does... ie why someone would call such a function
2013-09-02 13:34:48	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 13:34:56	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 13:35:35	augur	erisco: its just how you do case analysis
2013-09-02 13:35:37	h007	Cale/mr-:  doesn't seem to work. could you have a look at the changes i made? http://lpaste.net/92440
2013-09-02 13:35:46	augur	haskell has case analysis built in, so listCase is not primitive
2013-09-02 13:36:00	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 13:36:07	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 13:37:05	augur	erisco: but what makes that possible is that underneath, haskell knows how to do case analysis based on an ADTs definitions. well what if you dont have a fixed definition, you just know the constructors?
2013-09-02 13:37:09	augur	then what makes it list-y?
2013-09-02 13:37:13	<--	bitonic (~user@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 245 seconds)
2013-09-02 13:37:23	Cale	h007: that seems to work here
2013-09-02 13:37:27	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-02 13:37:31	augur	that it case analyses like a list, of course. but you cant write a generic case for it. instead you write your own case, and you show that it's list-like via those equations
2013-09-02 13:37:33	mr-	h007: looks good, but I would prefer to pattern match, personally
2013-09-02 13:37:43	h007	Cale: it doesn't print anything on screen for me
2013-09-02 13:37:44	Cale	h007: at least, it's depth-limited. The distribution of trees that you get is really awkward still of course.
2013-09-02 13:37:59	Cale	h007: Add  "deriving Show"  to the definition of Tree
2013-09-02 13:38:24	mr-	h007: to make it a little more fancy, you could vary the probability for branching depending on the depth :-)
2013-09-02 13:38:33	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 13:38:36	augur	erisco: so caseListish lets you write programs like this:   sumListish xs = caseListist xs 0 (\x xs -> x + sumListish xs)
2013-09-02 13:38:38	h007	Cale: thanks, it works. I wonder why it didn't give me an error for that
2013-09-02 13:38:41	-->	luksow (~luke@apn-95-41-101-74.dynamic.gprs.plus.pl) has joined #haskell
2013-09-02 13:38:46	Cale	Because it's not an error
2013-09-02 13:38:49	erisco	augur, okay so what I'll do is make the class and then try and instance it for []
2013-09-02 13:38:55	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-02 13:38:59	h007	mr-: please show me how
2013-09-02 13:39:02	erisco	augur, to see how it works... then write an algorithm such as length for it
2013-09-02 13:39:11	erisco	there is an air of mystery at the moment :)
2013-09-02 13:39:12	augur	erisco: you can add some illudicating comments if you want:   caseListish xs {- [] -> -} 0   {- cons -} (\x xs -> x + sumListish xs)
2013-09-02 13:39:19	erisco	Haskell has clearly spoiled me
2013-09-02 13:39:25	Cale	Well, it would be an error to try to print a Tree without a Show instance
2013-09-02 13:39:40	augur	erisco: you just write it like you write case, except with extra noise instead.
2013-09-02 13:39:40	<--	lurkorg (~alex@145.255.244.150) has left #haskell
2013-09-02 13:39:42	augur	length is easy
2013-09-02 13:39:55	Cale	but if you run an IO action on the GHCi prompt and there's no Show instance for the result, or if the result has type (), then it doesn't try to print anything.
2013-09-02 13:39:55	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-02 13:39:55	erisco	good, I might be able to figure it out then :P
2013-09-02 13:40:13	Cale	In the old days, the behaviour was more consistent: it just didn't print the results of IO actions at all.
2013-09-02 13:40:18	augur	lengthListish xs = caseListish xs 0 (\x xs -> 1 + lengthListish xs)
2013-09-02 13:40:34	h007	Cale: ok i get it
2013-09-02 13:40:43	b_jonas	doesn't that have the problem that it's not tail recursive?
2013-09-02 13:40:56	augur	0 is the length of an empty listish, and if the listish thing isnt empty and is instead cons x xs (different xs!), then the result is just the recursive length + 1
2013-09-02 13:41:14	augur	erisco: it might be good to practice turning pattern matching defs into case defs, for known types
2013-09-02 13:41:17	augur	instead of
2013-09-02 13:41:25	augur	length [] = 0 ; length (x:xs) = 1 + length xs
2013-09-02 13:41:27	augur	write it with case
2013-09-02 13:41:34	augur	length xs = ...
2013-09-02 13:41:47	erisco	hold your horses man :D
2013-09-02 13:42:24	-->	briennetheblue (1f3407b4@gateway/web/freenode/ip.31.52.7.180) has joined #haskell
2013-09-02 13:42:44	erisco	and also what is confusing up front is that the Listy class involves [] in the function signatures
2013-09-02 13:42:46	augur	erisco: just remember: an ADT is constructors + case. and conveniently, the case is directly determined by the constructors.
2013-09-02 13:42:55	augur	erisco: does it? where.
2013-09-02 13:43:16	augur	erisco: not in the version i gave!
2013-09-02 13:43:21	erisco	you said listCase :: [a] -> r -> (a -> [a] -> r) -> r   right?
2013-09-02 13:43:50	erisco	oh
2013-09-02 13:43:53	erisco	caseListish :: f a -> r -> (a -> f a -> r) -> r
2013-09-02 13:43:54	<--	Gentlecat (~Roman@79.105.224.65) has quit (Ping timeout: 264 seconds)
2013-09-02 13:44:17	erisco	okay that helps things along a bit :P so let me just try and instance this for [] so I can get up to speed
2013-09-02 13:44:22	erisco	I'll let you know when
2013-09-02 13:44:39	erisco	okay? :) I appreciate the help but I don't want to waste your time by not being able to follow what you are saying next
2013-09-02 13:45:29	augur	erisco: fun fact: all of this is derivable automatically from type defs. in fact, in a Real Language like agda, you can make type defs first class and define this all once and for all, parametric over every data declaration!
2013-09-02 13:45:36	augur	a single case function to rule them all!
2013-09-02 13:45:44	augur	but i digress
2013-09-02 13:46:03	augur	erisco: try playing this same game with other familiar types, tho.
2013-09-02 13:46:04	<--	maxter_ (~maxter@gaffeless.chaperon.volia.net) has quit (Quit: Konversation terminated!)
2013-09-02 13:46:17	augur	constructors + case + equations
2013-09-02 13:46:58	augur	bool and nat and maybe are good things to prod for baby steps to list, if you prefer.
2013-09-02 13:47:46	augur	erisco: remember, the point is this: what makes a value what it is, is what you can do with it, which is ultimately just one case or another.
2013-09-02 13:47:49	 *	hackagebot chesshs 0.1.1 - Simple library for validating chess moves and parsing PGN files  http://hackage.haskell.org/package/chesshs-0.1.1 (ArnoVanLumig)
2013-09-02 13:47:51	 *	hackagebot twentefp 0.4.2 - Lab Assignments Environment at Univeriteit Twente  http://hackage.haskell.org/package/twentefp-0.4.2 (ChristiaanBaaij)
2013-09-02 13:47:56	-->	tazjin (~tazjin@2a01:2b0:3041:3018:3031:e93c:4bdd:b6a4) has joined #haskell
2013-09-02 13:48:07	augur	what males nil nil? that you know its nil. what makes cons cons? that you know its cons (and what the head and tail therefore are)
2013-09-02 13:48:35	augur	makes**
2013-09-02 13:48:39	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-09-02 13:48:52	augur	your intuitions about Maybe (a, f a) were exactly correct, but that might be hard to generalize to other types, which is a good intuition to have imo
2013-09-02 13:48:59	h007	mr-: this doesn't seem to work quite well http://lpaste.net/92440
2013-09-02 13:49:24	<--	skchrko (~sk@109.110.72.216) has quit (Quit: Leaving)
2013-09-02 13:49:58	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-02 13:50:07	mr-	h007: you have got the logic the wrong way round.
2013-09-02 13:50:30	-->	asQuirreL (~asQuirreL@31.221.100.202) has joined #haskell
2013-09-02 13:51:01	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-02 13:51:42	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-02 13:51:43	haasn	“Real Language like agda”
2013-09-02 13:51:44	 *	haasn chuckles
2013-09-02 13:52:00	augur	haasn: :)
2013-09-02 13:52:35	augur	haasn: i was gonna say Epigram 2 but i figured that would be pushing it :p
2013-09-02 13:53:02	mr-	h007: I think I would do it a bit like that: http://lpaste.net/92444
2013-09-02 13:53:20	augur	haasn: i used to dream in the lambda calculus
2013-09-02 13:53:31	haasn	isn't epigram 2 not yet finished
2013-09-02 13:53:31	augur	then i learned haskell and dreamt in the polymorphic lambda calculus
2013-09-02 13:53:46	h007	mr-: thanks, much cleaner
2013-09-02 13:53:47	augur	(haasn: and never will be, hence why its funny!)
2013-09-02 13:53:56	augur	then i learned agda and dreamt in the dependently typed LC
2013-09-02 13:54:24	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Remote host closed the connection)
2013-09-02 13:54:24	augur	then i learned (about) epigram 2, and now i dream in the skyhooks-to-infinity self-hosting DTLC :D
2013-09-02 13:54:27	haasn	heh
2013-09-02 13:54:35	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 245 seconds)
2013-09-02 13:54:36	haasn	you make me want to learn epigram
2013-09-02 13:54:40	-->	pgiarrusso (~pgiarruss@ma1238.Mathematik.Uni-Marburg.DE) has joined #haskell
2013-09-02 13:55:06	haasn	but I fear learning a dependently typed language will make it it just as frustrating to write Haskell as learning Haskell makes it frustrating to write, say, C#
2013-09-02 13:55:07	augur	haasn: you first have to become a grumpy irishman
2013-09-02 13:55:08	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-02 13:55:16	augur	oh man, haasn, that is so true
2013-09-02 13:55:20	augur	you have no idea
2013-09-02 13:55:24	haasn	I kind of don't want to spoil it for myself :)
2013-09-02 13:55:28	augur	programming in agda has ruined me
2013-09-02 13:55:37	augur	interactive coding is the most amazing thing to ever happen ever
2013-09-02 13:55:51	<--	hiroakip (~hiroaki@p54A6A380.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-02 13:55:55	augur	and the crummy hacks that we have for haskell just aint enough
2013-09-02 13:56:09	-->	Vei1 (~other@94.25.229.98) has joined #haskell
2013-09-02 13:56:11	Vei1	hi
2013-09-02 13:56:17	Vei1	why can't i
2013-09-02 13:56:21	Vei1	> (-1) 2
2013-09-02 13:56:22	lambdabot	  Could not deduce (GHC.Num.Num (GHC.Integer.Type.Integer -> t))
2013-09-02 13:56:22	lambdabot	   arising f...
2013-09-02 13:56:24	Vei1	but can
2013-09-02 13:56:29	Vei1	> (+1) 2
2013-09-02 13:56:30	lambdabot	  3
2013-09-02 13:56:32	Vei1	?
2013-09-02 13:56:40	augur	vehk: -1 in that position is interpreted as negation, not subtraction
2013-09-02 13:56:41	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-02 13:56:43	mkramer	http://lpaste.net/92446
2013-09-02 13:56:45	augur	> (- 1) 2
2013-09-02 13:56:46	lambdabot	  Could not deduce (GHC.Num.Num (GHC.Integer.Type.Integer -> t))
2013-09-02 13:56:46	lambdabot	   arising f...
2013-09-02 13:56:47	danr	> (subtract 1) 2
2013-09-02 13:56:48	lambdabot	  1
2013-09-02 13:56:56	mkramer	:t replicateM_
2013-09-02 13:56:57	lambdabot	Monad m => Int -> m a -> m ()
2013-09-02 13:57:02	Vei1	augur, danr: ah, thanks.
2013-09-02 13:57:04	danr	@type (-1)
2013-09-02 13:57:05	lambdabot	Num a => a
2013-09-02 13:57:07	danr	@type (subtract 1)
2013-09-02 13:57:08	lambdabot	Num a => a -> a
2013-09-02 13:57:11	augur	any time a - shows up before a single number like that, haskell things its a negative number
2013-09-02 13:57:14	mkramer	replicateM_ stubbornly takes an Int, but I want to an Integer number of replications
2013-09-02 13:57:32	danr	@hoogle genericReplicate
2013-09-02 13:57:38	danr	:(
2013-09-02 13:57:43	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-02 13:57:45	lambdabot	Data.List genericReplicate :: Integral i => i -> a -> [a]
2013-09-02 13:58:34	-->	HugoDaniel (~hugo@193.136.113.58) has joined #haskell
2013-09-02 13:58:37	<--	tomboy65 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-02 13:58:52	mkramer	Anything for replicateM?
2013-09-02 13:59:05	apfelbox	You can do ((-) 1) 2, but the order of the arguments is the other way round as you would think ;-)
2013-09-02 14:00:40	mr-	> ((-1) 1) 2
2013-09-02 14:00:41	lambdabot	  Could not deduce (GHC.Num.Num
2013-09-02 14:00:42	lambdabot	                     (GHC.Integer.Type.Intege...
2013-09-02 14:00:43	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-02 14:00:51	mr-	> ((-) 1) 2
2013-09-02 14:00:52	lambdabot	  -1
2013-09-02 14:01:32	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-02 14:01:45	--	[[zzzz]] is now known as [[zz]]
2013-09-02 14:01:58	-->	tiksa (~tiksa@77-46-233-197.dynamic.isp.telekom.rs) has joined #haskell
2013-09-02 14:02:09	Rarrikins	> (subtract 1) 2
2013-09-02 14:02:10	lambdabot	  1
2013-09-02 14:02:23	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-02 14:02:23	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 14:02:45	-->	soulofpeace (~soulofpea@175.156.232.233) has joined #haskell
2013-09-02 14:03:25	-->	void64 (~luke@37.17.115.92) has joined #haskell
2013-09-02 14:03:41	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 14:03:50	-->	CaptainK (~CaptainK@181.38.21.210) has joined #haskell
2013-09-02 14:03:52	<--	fsdfsd (~judge@37.155.188.167) has quit
2013-09-02 14:04:20	Vei1	mr-: At least it shorter than subtract.
2013-09-02 14:04:48	augur	erisco: when you're brave enough, or have solved the bool-nat-maybe trio: http://lpaste.net/92447
2013-09-02 14:05:33	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-02 14:05:34	mkramer	danr: Got it! sequence_ . genericReplicate
2013-09-02 14:05:44	mkramer	thank you
2013-09-02 14:06:14	<--	tpsinnem (~tpsinnem@85-76-180-0-nat.elisa-mobile.fi) has quit (Read error: Connection reset by peer)
2013-09-02 14:06:48	apfelbox	augur ((-) e) = \x -> x - e
2013-09-02 14:06:50	-->	derelm (~derelm@p4FCEFEAF.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 14:07:00	apfelbox	or use subtract ;-)
2013-09-02 14:07:08	augur	apfelbox: :)
2013-09-02 14:07:17	danr	mkramer: nice!
2013-09-02 14:07:18	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Read error: Connection reset by peer)
2013-09-02 14:07:20	 *	augur makes apfelkuchen
2013-09-02 14:07:37	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 14:08:07	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-02 14:08:26	danr	augur: what's the point of these typeclasses with only one instance?
2013-09-02 14:08:49	-->	ananthakumaran (~Adium@122.178.203.210) has joined #haskell
2013-09-02 14:09:08	augur	danr: which where
2013-09-02 14:10:06	-->	destiny (~ircguy@93.190.3.226) has joined #haskell
2013-09-02 14:10:12	danr	augur: boot-nat-maybe trio
2013-09-02 14:10:19	augur	oh, in the link?
2013-09-02 14:10:37	augur	answers to the little puzzles for erisco
2013-09-02 14:10:49	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-02 14:10:52	augur	im going to annotate with some magic :)
2013-09-02 14:10:58	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-02 14:11:41	-->	Pip (~Pip__@unaffiliated/pip) has joined #haskell
2013-09-02 14:12:15	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-02 14:12:42	augur	danr, erisco: annotated with our favorite warp core engineer!
2013-09-02 14:12:45	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-02 14:12:50	<--	desc|zenbook (~heh@210.186.159.187) has quit (Ping timeout: 264 seconds)
2013-09-02 14:13:17	haasn	(of course, these type classes are superseded by lenses ;)
2013-09-02 14:13:38	danr	augur: mr. church-encoder
2013-09-02 14:13:55	augur	scott encoder
2013-09-02 14:13:56	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-02 14:14:17	augur	haasn: are they? i dont think they are
2013-09-02 14:14:37	<--	lattenwald (~qalex@185.6.245.156) has quit (Ping timeout: 246 seconds)
2013-09-02 14:14:38	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-02 14:14:43	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 14:14:54	-->	jbracker (~quassel@m-116.informatik.uni-kiel.de) has joined #haskell
2013-09-02 14:15:09	augur	danr: but the point is that erisco wanted to know how to convey the idea of being list-like, so i finally caved and gave him a typeclassy thing like he wanted, because he's stubborn :P
2013-09-02 14:15:39	erisco	augur, only because that is what you people require to get any information out :P
2013-09-02 14:15:44	haasn	augur: well eg. Listish can be had with lens's class Cons and a Prism' (l a) () -- or something
2013-09-02 14:15:52	-->	CapitanK (~CaptainK@181.179.102.234) has joined #haskell
2013-09-02 14:15:55	<--	CaptainK (~CaptainK@181.38.21.210) has quit (Ping timeout: 260 seconds)
2013-09-02 14:16:01	erisco	augur, first I have to weave through the lasers of "well why are you doing that?"
2013-09-02 14:16:16	augur	erisco: you probably dont need this, but you insisted. and anyway, once i remembered the "right" answer, i decided it was better for you to really get this anyway, because its far too cool
2013-09-02 14:16:23	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-09-02 14:16:23	augur	for your purposes, feh, its pointless
2013-09-02 14:16:27	augur	but for KNOWLEDGE
2013-09-02 14:16:29	augur	its damn sexy
2013-09-02 14:16:38	erisco	you do not know what I am using this for
2013-09-02 14:16:51	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 260 seconds)
2013-09-02 14:16:57	augur	haasn: oh well sure, if you use some built ins
2013-09-02 14:17:02	<--	boegel (~boegel@hpcbunny.ugent.be) has quit (Ping timeout: 264 seconds)
2013-09-02 14:17:07	augur	but that defeats the purpose of this exercise
2013-09-02 14:17:18	augur	erisco: you said you were trying to implement some silly algorithm yadda yadda blah blah
2013-09-02 14:17:26	erisco	lol
2013-09-02 14:17:37	-->	boegel (~boegel@gast073b.ugent.be) has joined #haskell
2013-09-02 14:18:06	augur	algorithms are for weirdos who want to actually DO stuff!
2013-09-02 14:19:52	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 246 seconds)
2013-09-02 14:21:06	<--	longqm (~longqm@219.224.160.186) has quit (Ping timeout: 264 seconds)
2013-09-02 14:21:06	<--	LAMMJohn1on (~ja@user-5af43382.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-02 14:21:14	quchen	Algorithms are for weirdos who want to have the computer DO stuff instead of themselves.
2013-09-02 14:21:24	<--	CapitanK (~CaptainK@181.179.102.234) has quit (Ping timeout: 256 seconds)
2013-09-02 14:21:40	<--	mbuf (user@nat/redhat/x-cieigizohwwesffk) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-02 14:21:41	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 14:22:17	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 14:22:47	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-02 14:23:28	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-02 14:24:05	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 14:24:12	augur	erisco: if you can grok this fact about what an ADT "is", youll be ahead of a lot of people in understanding the truth of FP
2013-09-02 14:24:21	<--	csakatoku (~csakatoku@em119-72-198-239.pool.e-mobile.ne.jp) has quit (Remote host closed the connection)
2013-09-02 14:25:09	-->	rgr (~user@e182084222.adsl.alicedsl.de) has joined #haskell
2013-09-02 14:26:13	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-02 14:26:15	<--	soulofpeace (~soulofpea@175.156.232.233) has quit (Ping timeout: 245 seconds)
2013-09-02 14:26:35	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 241 seconds)
2013-09-02 14:26:51	hiptobecubic	what the hell is going on with this bool-nat-maybe trio?
2013-09-02 14:27:01	haasn	augur: (I was only half-serious)
2013-09-02 14:27:03	 *	hiptobecubic isn't ahead of anyone
2013-09-02 14:27:04	haasn	also wow that message took a long time to deliver
2013-09-02 14:27:08	haasn	my internet just cut out for about 10 minutes
2013-09-02 14:27:33	hpc	hiptobecubic: it's exactly what it looks like; a ridiculous solution to a non-problem
2013-09-02 14:27:40	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-02 14:28:00	augur	hiptobecubic: what do you mean? :D
2013-09-02 14:28:04	-->	lattenwald (~qalex@185.6.245.156) has joined #haskell
2013-09-02 14:28:27	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-02 14:28:30	hiptobecubic	hpc, augur what problem are they solving? What's up with Scott? Why did anyone write any of this?
2013-09-02 14:28:40	augur	hpc: indeed. well, its a non-problem in some sense. i mean, i guess if you REALLY want to abstract the notion of list, you do it like this, and then just provide generic isos, but
2013-09-02 14:29:05	augur	hiptobecubic: erisco wanted to know what it really meant to be a list in a generic, type-classy, interface-only way
2013-09-02 14:29:16	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 240 seconds)
2013-09-02 14:29:21	osfameron	quchen: algorithms are for people who don't know how to buy ram
2013-09-02 14:29:37	hiptobecubic	or time travel
2013-09-02 14:29:40	augur	so i gave him an explanation, after some tooth-pulling, together with instantiations for the normal types, and some loopy scott encoding versions to show its a magical notion
2013-09-02 14:29:54	hiptobecubic	augur, oh scott encoding is a "thing"
2013-09-02 14:29:55	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-09-02 14:29:57	hiptobecubic	I didn't know
2013-09-02 14:30:09	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-09-02 14:30:28	augur	hiptobecubic: yeah. its how you implement these things in an LC with only lambda terms and primitive recursion
2013-09-02 14:30:49	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-02 14:30:55	augur	presumably you'd want names in there somewhere to make the primitive recursion elegant, but you can do without it.
2013-09-02 14:31:31	-->	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has joined #haskell
2013-09-02 14:31:41	augur	i wonder if scott + ycombinator is sufficient, or would you need to really do church encodings, i wonder
2013-09-02 14:32:46	augur	i should be cheeky and implement the LC this way
2013-09-02 14:32:52	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 14:32:52	augur	just to blow eriscos mind :)
2013-09-02 14:33:31	-->	RageOfThou (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-02 14:34:07	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Ping timeout: 260 seconds)
2013-09-02 14:34:16	augur	scott and church encodings seem daunting when they're not explained properly. it took me years to really understand them
2013-09-02 14:34:22	mm_freak	repa http://lpaste.net/92449 vs. accelerate+CUDA http://lpaste.net/92450
2013-09-02 14:34:31	mm_freak	if anyone cares to compare repa and accelerate =)
2013-09-02 14:34:34	<--	nilg (~user@77.70.2.229) has quit (Remote host closed the connection)
2013-09-02 14:34:56	mm_freak	repa version needs 21s, accelerate version 800ms
2013-09-02 14:35:23	mm_freak	repa on quadcore, accelerate on geforce GTX 550
2013-09-02 14:35:36	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-02 14:36:02	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 14:36:03	mm_freak	wait, repa version needs 6.7 secs when parallelized…  my bad =)
2013-09-02 14:36:10	b__	Why are Doubles used for currency, even in good papers? Just laziness?
2013-09-02 14:36:19	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-02 14:37:01	-->	soulofpeace (~soulofpea@175.156.232.233) has joined #haskell
2013-09-02 14:37:13	<--	Vei1 (~other@94.25.229.98) has quit (Quit: leaving)
2013-09-02 14:38:12	hiptobecubic	b__, because that's not what they are focused on and it will cloud the understanding of lay people?
2013-09-02 14:38:25	b__	hiptobecubic: sounds plausible
2013-09-02 14:38:33	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 14:39:09	mm_freak	i'm amazed about how well accelerate works despite being purely functional
2013-09-02 14:39:46	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-02 14:40:21	<--	Pip (~Pip__@unaffiliated/pip) has quit (Remote host closed the connection)
2013-09-02 14:41:02	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-02 14:41:45	hiptobecubic	mm_freak, i think they use skeleton code, yes?
2013-09-02 14:41:58	mm_freak	hiptobecubic: i don't know how they do it
2013-09-02 14:42:09	hiptobecubic	i think that's it, i'd have to read the paper again
2013-09-02 14:42:21	hiptobecubic	I remember it being something like various skeleton kernels that they plug your code into
2013-09-02 14:42:30	mm_freak	that would make sense
2013-09-02 14:42:56	mm_freak	but i remember the dark days using CUDA's hybrid language, where you would have to come up with good parameters
2013-09-02 14:43:06	 *	hiptobecubic still uses it
2013-09-02 14:43:11	--	Guest66158 is now known as kubrat
2013-09-02 14:43:24	hiptobecubic	It's quickly becoming unnecessary for all but the dirtiest stuff, thank god
2013-09-02 14:44:10	hiptobecubic	python's @cuda decorator practically lets you just write normal python syntax
2013-09-02 14:44:20	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-02 14:44:54	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-09-02 14:44:56	<--	Targen (~iguana@190.73.206.135) has quit (Read error: Operation timed out)
2013-09-02 14:45:00	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Ping timeout: 245 seconds)
2013-09-02 14:45:23	hiptobecubic	and numba *does* let you work with normal numpy. These are bright days for gpu computing. I will be thrilled when haskell's libs become a little less in the way
2013-09-02 14:45:29	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-02 14:45:32	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 14:46:37	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-02 14:47:18	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 14:47:30	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-02 14:47:39	<--	xinming (~xinming@113.248.74.40) has quit (Ping timeout: 260 seconds)
2013-09-02 14:48:03	-->	PatrickRobotham (~chatzilla@CPE-120-147-165-35.gdiv1.vic.bigpond.net.au) has joined #haskell
2013-09-02 14:48:04	erisco	hpc, haters gunna hate
2013-09-02 14:48:21	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-09-02 14:48:43	augur	erisco: how you doin there
2013-09-02 14:48:51	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-02 14:48:52	erisco	went out to get a coffee
2013-09-02 14:49:01	-->	CoffinJoe (c8c6de32@gateway/web/freenode/ip.200.198.222.50) has joined #haskell
2013-09-02 14:49:14	hiptobecubic	It seems like you should be able to translate haskell reasonably well to thrust template-style expressions, but what do i know
2013-09-02 14:49:16	-->	xinming (~xinming@113.248.98.47) has joined #haskell
2013-09-02 14:49:28	augur	mm coffee
2013-09-02 14:49:37	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-02 14:49:39	hiptobecubic	then you have to generate C++ though :(
2013-09-02 14:49:48	mm_freak	hiptobecubic: i understand the need for an expression EDSL for GPU code in haskell
2013-09-02 14:49:56	<--	make_sense (~make_sens@178.124.116.35) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-02 14:49:59	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 14:50:03	mm_freak	you're not going to write GPU code in regular haskell
2013-09-02 14:50:12	hiptobecubic	mm_freak, yes of course
2013-09-02 14:50:19	hiptobecubic	mm_freak, have you played with thrust at all?
2013-09-02 14:50:34	hiptobecubic	It tries to bring a lot of <functional> over to the gpu
2013-09-02 14:50:41	<--	McManiaC (~mcmaniac@nils.cc) has quit (Remote host closed the connection)
2013-09-02 14:50:46	mm_freak	nope, never heard of it
2013-09-02 14:50:56	hiptobecubic	It's a major headache to use, but if you are just generating it it might not be terrible
2013-09-02 14:51:01	-->	earspliT (~earsplit@141.0.37.50) has joined #haskell
2013-09-02 14:51:02	erisco	augur, ah the slides were describing a wrapper on lists weren't they
2013-09-02 14:51:15	augur	erisco: the AwesomePrelude ones were, yeah
2013-09-02 14:51:18	hiptobecubic	mm_freak, https://github.com/thrust/thrust
2013-09-02 14:51:24	augur	but they give the gist of it
2013-09-02 14:51:46	--	earspliT is now known as dij0t
2013-09-02 14:51:55	hiptobecubic	mm_freak, so you get expressions like   int x = thrust::reduce(d_vec.begin(), d_vec.end(), 0, thrust::plus<int>());
2013-09-02 14:52:16	-->	dcoutts_ (~dcoutts@p57A007AC.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 14:52:16	<--	dcoutts_ (~dcoutts@p57A007AC.dip0.t-ipconnect.de) has quit (Changing host)
2013-09-02 14:52:16	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-02 14:52:20	hiptobecubic	which is pretty directly related to fold
2013-09-02 14:52:41	mm_freak	hiptobecubic: omg
2013-09-02 14:52:45	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-02 14:52:50	mm_freak	i'll see how far i get with accelerate =)
2013-09-02 14:53:05	mm_freak	thrust doesn't seem to be something i want to use
2013-09-02 14:53:14	hiptobecubic	mm_freak, i didn't say it was pretty :)  But at least it's not totally at odds with the functional paradigm
2013-09-02 14:54:19	mm_freak	yet i'm not sure when i would want to use it
2013-09-02 14:54:42	<--	soulofpeace (~soulofpea@175.156.232.233) has quit (Ping timeout: 264 seconds)
2013-09-02 14:54:53	hiptobecubic	I'm not talking about end users using it really. I mean as a way to get the ugly parts of generating gpu code for free
2013-09-02 14:55:09	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-02 14:55:23	mm_freak	ah, now i get it
2013-09-02 14:55:37	hiptobecubic	as in a compiler for Haskell -> thrust for some useful part of your code
2013-09-02 14:55:45	mm_freak	well, you certainly have a point, but that would mean an additional dependency
2013-09-02 14:56:02	mm_freak	not sure if that's appropriate given that the templates are probably rather small
2013-09-02 14:56:02	hiptobecubic	if you have cuda installed you have thrust automatically. nvidia adopted it
2013-09-02 14:56:07	mm_freak	ah
2013-09-02 14:56:09	mm_freak	i see
2013-09-02 14:56:21	mm_freak	well, i noticed that accelerate requires CUDA >= 5
2013-09-02 14:56:27	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-09-02 14:56:40	hiptobecubic	the trick, as always, will be figuring out how to manage persistent values on the gpu
2013-09-02 14:56:47	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-02 14:56:57	hiptobecubic	that's recent though. accelerate has been around for at least a few years i think
2013-09-02 14:57:16	hiptobecubic	they are just pushing along to the newest version because there are so many useful features tacked on every time
2013-09-02 14:57:53	hiptobecubic	You couldn't even link separate cuda modules together until recently. they just recommended compiling all your cuda code as one giant blob.
2013-09-02 14:58:35	erisco	augur, so is 'list' around just to assert the laws?
2013-09-02 14:58:53	mm_freak	ugly
2013-09-02 14:58:55	augur	erisco: where what
2013-09-02 14:59:07	mm_freak	i wonder when accelerate will get (useful) OpenCL support
2013-09-02 14:59:23	hiptobecubic	foldr f z v = thrust::reduce(v_.begin(), v_.end(), z, f_maker()) or something
2013-09-02 14:59:24	erisco	augur, sorry you called it 'caseListish'
2013-09-02 14:59:35	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-02 14:59:42	hiptobecubic	mm_freak, i emailed about that last year. it was a small project that was more or less abandoned unfortunately :/
2013-09-02 14:59:43	mm_freak	in any case, i'm very pleased…  combine distributed-process + repa + accelerate and build your own supercomputer
2013-09-02 15:00:09	mm_freak	hiptobecubic: yeah, i noticed
2013-09-02 15:00:21	hiptobecubic	no one is working on it now
2013-09-02 15:00:58	<--	Lemmih (~lemmih@37.157.250.50) has quit (Ping timeout: 245 seconds)
2013-09-02 15:01:10	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-02 15:01:22	erisco	augur, oh, no, I see
2013-09-02 15:01:26	<--	paul_85 (~paul@58-6-94-173.dyn.iinet.net.au) has quit (Ping timeout: 264 seconds)
2013-09-02 15:01:32	erisco	augur, it gives you a way to pattern match
2013-09-02 15:01:41	augur	erisco: exactly
2013-09-02 15:01:42	<--	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-02 15:01:48	erisco	I was mistakenly thinking you'd only give nil or cons to caseListish
2013-09-02 15:01:58	augur	if you abolish primitive pattern matching, you need to make up for it
2013-09-02 15:02:07	-->	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-02 15:02:15	augur	some languages actually do it all this way
2013-09-02 15:02:30	augur	so epigram 2, for instance, in some abstract sense, does exactly this
2013-09-02 15:02:38	augur	that is to say, it has exactly these equations under the hood
2013-09-02 15:02:44	augur	and it uses them for rewriting
2013-09-02 15:03:05	augur	and really, in some sense, haskell does this too, but a bit more abstractly, by giving you a generic pattern matching system
2013-09-02 15:03:26	-->	dEPy (~dEPy@46-150-62-58.cable.teleing.net) has joined #haskell
2013-09-02 15:03:29	erisco	which doesn't apply to type classes
2013-09-02 15:03:31	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-02 15:03:36	erisco	but this scheme does
2013-09-02 15:03:42	augur	erisco: well
2013-09-02 15:03:44	augur	lets be clear
2013-09-02 15:03:52	augur	you can pattern match on some things that are Listish
2013-09-02 15:03:53	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-02 15:03:59	augur	but not with the listish pseudoconstructors
2013-09-02 15:04:01	augur	so you cant do
2013-09-02 15:04:03	-->	ksf_ (~ksf@d067078.adsl.hansenet.de) has joined #haskell
2013-09-02 15:04:08	augur	foo (cons x xs) = ...
2013-09-02 15:04:40	-->	LAMMJohnson (~ja@user-5af43875.broadband.tesco.net) has joined #haskell
2013-09-02 15:04:42	-->	xwl (~user@182.48.101.22) has joined #haskell
2013-09-02 15:04:54	erisco	that is what I meant. a type which is listish can be pattern matched, but any type which is listish cannot
2013-09-02 15:04:57	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 240 seconds)
2013-09-02 15:05:00	augur	erisco: the scott encodings show a case where you cant do it at all, tho.
2013-09-02 15:05:05	augur	because its functions all the way down
2013-09-02 15:05:11	erisco	like turtles?
2013-09-02 15:05:18	augur	:)
2013-09-02 15:05:26	<--	ksf (~ksf@d032172.adsl.hansenet.de) has quit (Ping timeout: 245 seconds)
2013-09-02 15:05:56	augur	erisco: but notice, there is a dreadfully awful pattern here: the case for each thing is defined in the blindingly obvious way for the "real" types
2013-09-02 15:06:14	erisco	so?
2013-09-02 15:06:36	augur	so what thats telling you is that haskell's ADTs are more or less "just" this, at some level
2013-09-02 15:07:03	augur	and that haskell is itself just using ADTs + case/pattern matching to hide these very implementation details
2013-09-02 15:07:04	erisco	when you say ADT I might not be understand what you are saying
2013-09-02 15:07:07	-->	shahn (~shahn@188-194-135-84-dynip.superkabel.de) has joined #haskell
2013-09-02 15:07:12	augur	for all we know, haskell's ADTs are just sugar for scott encodings!
2013-09-02 15:07:13	<--	Targen (~iguana@190.73.206.135) has quit (Ping timeout: 245 seconds)
2013-09-02 15:07:27	augur	ADTs, the things you write beginning with "data"
2013-09-02 15:07:32	<--	poppingtonic (~poppingto@212.49.88.108) has quit (Read error: Connection reset by peer)
2013-09-02 15:07:49	erisco	okay, I've always seen this term with the additional assumption that constructors are hidden
2013-09-02 15:07:56	<--	chexxor_netbook (~chexxor@114-43-138-88.dynamic.hinet.net) has quit (Ping timeout: 245 seconds)
2013-09-02 15:08:13	augur	erisco: sure. the "true" constructors are hidden, in that we cant see what they really are.
2013-09-02 15:08:13	-->	FlaviusFelix (~quassel@dD57762C6.access.telenet.be) has joined #haskell
2013-09-02 15:08:22	augur	so how do we know they're not scott encodings? or something else? we dont!
2013-09-02 15:08:26	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-02 15:08:30	erisco	right
2013-09-02 15:08:31	-->	poppingtonic (~poppingto@212.49.88.108) has joined #haskell
2013-09-02 15:09:30	<--	BlankVerse (~pankajm@202.3.77.238) has quit (Quit: leaving)
2013-09-02 15:10:04	-->	desc|zenbook (~heh@210.186.159.187) has joined #haskell
2013-09-02 15:10:45	erisco	augur, you know what the next thing is, right?
2013-09-02 15:11:17	augur	erisco: nope :D
2013-09-02 15:11:38	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-02 15:11:52	erisco	do you expect me to tie an algorithm for length directly to the representation?
2013-09-02 15:11:53	erisco	:)
2013-09-02 15:12:11	erisco	its type classes all the way up
2013-09-02 15:12:23	augur	erisco: well, the generic length algo doesnt need to be
2013-09-02 15:12:24	-->	pgiarrusso_ (~pgiarruss@mwla480.WLAN.Uni-Marburg.DE) has joined #haskell
2013-09-02 15:12:28	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 15:12:38	erisco	no, I do not mean having Num instead of Int
2013-09-02 15:12:45	augur	but your special, efficient length algo will need to be. there is no "generic representation-specific" one
2013-09-02 15:13:21	augur	this class abstracts listiness, not representation-specific algos.
2013-09-02 15:13:30	erisco	yes exactly
2013-09-02 15:13:43	erisco	and the algorithm for length on a listy is O(n)
2013-09-02 15:13:54	<--	pgiarrusso (~pgiarruss@ma1238.Mathematik.Uni-Marburg.DE) has quit (Ping timeout: 264 seconds)
2013-09-02 15:13:54	--	pgiarrusso_ is now known as pgiarrusso
2013-09-02 15:13:56	augur	oh its not O(n) no
2013-09-02 15:14:08	augur	it depends entirely on your implementation
2013-09-02 15:14:11	erisco	true
2013-09-02 15:14:14	-->	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has joined #haskell
2013-09-02 15:14:20	augur	because youll be casing and stuff, and if all of that is nasty, then so is length
2013-09-02 15:14:25	augur	now you can ofcourse add further class methods for things like length, so that you can make those generic as well
2013-09-02 15:14:27	erisco	ish?
2013-09-02 15:14:31	erisco	I mean, how can it not be?
2013-09-02 15:14:38	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-02 15:14:54	erisco	what other approach than pattern matching on cons can you do?
2013-09-02 15:15:14	augur	erisco: its more that your particular defs might not be so clean
2013-09-02 15:15:16	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-02 15:15:28	erisco	you mean the uncons might not be O(1)?
2013-09-02 15:15:32	erisco	okay, yes, agreed
2013-09-02 15:15:44	augur	cons might not be O(1) either
2013-09-02 15:15:48	erisco	yes
2013-09-02 15:15:49	erisco	but
2013-09-02 15:15:52	augur	i mean, maybe there's a theorem here
2013-09-02 15:15:54	augur	i dont know
2013-09-02 15:16:02	augur	i wouldnt expect it to be O(n) just off the bat
2013-09-02 15:16:03	erisco	when we talk about the complexity of a sort algorithm
2013-09-02 15:16:15	erisco	it assumes the comparison is O(1). if it isn't that is an additional consideration
2013-09-02 15:16:22	augur	anyway, if you want to make length a listish method as well, thats fine
2013-09-02 15:16:27	erisco	so length is O(n) wrt the number of cons pattern matches required
2013-09-02 15:16:31	augur	but you're adding more to it than just list structure now
2013-09-02 15:16:40	erisco	no
2013-09-02 15:16:43	erisco	no no
2013-09-02 15:16:58	erisco	this is the essence I really wanted to see all along
2013-09-02 15:17:25	augur	im not sure that adding length would really be problematic. you'd just want to also then have some laws like
2013-09-02 15:17:43	augur	length nil = 0 ; length (cons x xs) = 1 + length xs
2013-09-02 15:17:47	erisco	sure but then it isn't listy :) it is listy + something, which is what I'd be after now then
2013-09-02 15:17:53	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-02 15:18:02	augur	and if that happens to be true ANd youve implemented it in O(1) time, fine
2013-09-02 15:18:03	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-02 15:18:07	b__	hiptobecubic: (about Double to represent currency in papers and tutorials...) there is almost never a disclaimer that this is "an awful idea", whereas if you ask here in #haskell, the badness is exclaimed by a choir of 20
2013-09-02 15:18:17	erisco	we can only assess complexity wrt the interface
2013-09-02 15:18:18	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-02 15:18:26	erisco	this is true regardless of your complexity analysis method
2013-09-02 15:18:37	erisco	you are assuming that some underlying thing or another is behaving a certain way
2013-09-02 15:18:49	augur	erisco: sure, but what im saying is, the interface itself might not be constant for any given operation
2013-09-02 15:18:51	Maior	b__: er what? go work in finance ;P
2013-09-02 15:18:54	augur	cons x xs might not be constant time
2013-09-02 15:19:01	erisco	agreed
2013-09-02 15:19:09	erisco	it can vary depending on the instance, absolutely
2013-09-02 15:19:14	b__	Maior: care to elaborate? ^^
2013-09-02 15:19:17	hiptobecubic	b__, true. I'm sure there is a strong establishment of people using double's regularly now.
2013-09-02 15:19:24	augur	so we're talking about a very flexible notion of O(n) which i think is invalid for complexity reasoning
2013-09-02 15:19:40	erisco	I don't
2013-09-02 15:19:49	augur	well you should think more about it
2013-09-02 15:19:55	erisco	I'm not an authority on the theory, but I haven't been convinced of a compelling case why not
2013-09-02 15:19:57	<--	longqm (~longqm@219.224.160.186) has quit (Ping timeout: 240 seconds)
2013-09-02 15:19:58	Maior	b__: I'm new to Haskell, but everywhere I've ever seen someone try to use floating point for currency, others have told them they're crazy and to not...
2013-09-02 15:20:11	hiptobecubic	b__, I will say, at the bank I was at, doubles were used for everything except the accounting itself. All the pricing algorithms etc were just simulations so fixed point arith wasn't what you wanted
2013-09-02 15:20:16	-->	ksf__ (~ksf@d031015.adsl.hansenet.de) has joined #haskell
2013-09-02 15:20:22	int-e	augur: you can always talk about doing O(n) foo operations.
2013-09-02 15:20:23	augur	erisco: well, usual complexity reasoning assumes that you have some well-defined cost metrics on the basic operations involved
2013-09-02 15:20:46	b__	hiptobecubic: ok, interesting
2013-09-02 15:20:51	erisco	augur, yes, and the interface is not where those operations/implementations are :)
2013-09-02 15:20:58	-->	CapitanK (~CaptainK@181.179.80.218) has joined #haskell
2013-09-02 15:21:15	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 245 seconds)
2013-09-02 15:21:16	erisco	augur, and even looking at the implementation, there are underlying factors to that as well
2013-09-02 15:21:37	augur	erisco: yes but its no fair saying that it's O(n) if your operations dont give you some constant factor
2013-09-02 15:21:38	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-02 15:21:39	erisco	"length for listy is O(n) assuming blah and blah is O(1)" is not unreasonable
2013-09-02 15:21:43	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 260 seconds)
2013-09-02 15:21:54	erisco	any more than saying "assuming malloc is usually O(1) this algorithm is O(n)"
2013-09-02 15:22:15	erisco	augur, implication. I don't need to doubleback on any claim
2013-09-02 15:22:16	augur	erisco: but my point is that "blah is O(1)" isn't a given
2013-09-02 15:22:22	b__	hiptobecubic: the lack of precision was generally not a problem?
2013-09-02 15:22:30	erisco	that is why IF this is O(1) THEN this follows
2013-09-02 15:22:43	augur	if "blah" is "nil and cons are constant time" fine
2013-09-02 15:22:45	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-02 15:22:52	augur	but what if they're not? i dont know.
2013-09-02 15:23:10	erisco	then the claim doesn't follow
2013-09-02 15:23:17	Kaini	I've a function :: StateT s IO (), could I somehow "partially apply" the state, that I get a function' :: IO (), which I can subsequently pass into anotherFunction :: IO () -> IO () as callback? Or am I forced to change anotherFunction to :: StateT s IO () -> StateT s IO () (Which means that I need huge amounts of liftIOs)
2013-09-02 15:23:17	erisco	simple
2013-09-02 15:23:19	-->	manung (~manung@ool-44c25842.dyn.optonline.net) has joined #haskell
2013-09-02 15:23:21	<--	ksf_ (~ksf@d067078.adsl.hansenet.de) has quit (Ping timeout: 245 seconds)
2013-09-02 15:23:32	augur	erisco: indeed. so you cant reason without these extra, non-given assumptions
2013-09-02 15:23:35	augur	anyway, i should sleep
2013-09-02 15:23:37	augur	night!
2013-09-02 15:23:42	erisco	yes you can
2013-09-02 15:23:47	erisco	don't be silly :)
2013-09-02 15:24:13	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-02 15:24:14	erisco	g'night thanks for the help
2013-09-02 15:24:16	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-09-02 15:24:22	augur	erisco: you can reduce it to maybe O(n) primitive operations, but not to O(n) actual time
2013-09-02 15:24:35	augur	and those are very different concepts
2013-09-02 15:24:45	erisco	do you realize the number of assumptions it takes to claim something is O(n) real time?
2013-09-02 15:25:06	augur	erisco: sure, but so what?
2013-09-02 15:25:17	erisco	so there is no reason we can't play the same game
2013-09-02 15:25:18	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-02 15:25:34	augur	i mean, i can be perverse and make my cons the normal cons, but with a 2^n forced delay
2013-09-02 15:25:43	erisco	yes! you can!
2013-09-02 15:25:43	<--	pgiarrusso (~pgiarruss@mwla480.WLAN.Uni-Marburg.DE) has quit (Quit: pgiarrusso)
2013-09-02 15:25:55	augur	cons x xs = wait (2^n) then return x:xs
2013-09-02 15:26:01	augur	now you dont have O(n) time!
2013-09-02 15:26:01	erisco	and I can take your proven O(n) algorithm and run it on my OS with a forced O(2^n) delay
2013-09-02 15:26:09	augur	you just have O(n) steps, or something.
2013-09-02 15:26:11	erisco	yes
2013-09-02 15:26:16	erisco	that is what big-O is based on
2013-09-02 15:26:23	augur	eh..
2013-09-02 15:26:32	augur	i dont think thats the case
2013-09-02 15:26:37	hiptobecubic	b__, well when you are working with very large and very small numbers, double *saves* your precision. It's hard to represent 1e-16 in fixed point arithmetic but you might need it if you are integrating over a large probability density or something
2013-09-02 15:26:37	augur	but whatever, im going to sleep. :P
2013-09-02 15:26:46	erisco	mm, I'd take a look if you are unsure. I'm sure :)
2013-09-02 15:27:11	hiptobecubic	b__, also, these simulations can already take days. using bignumber libraries is just not an option
2013-09-02 15:27:25	<--	akurei__ (~akurei@lak-29-213.wohnheime.ruhr-uni-bochum.de) has quit (Remote host closed the connection)
2013-09-02 15:27:50	-->	fsvehla (~fsvehla@chello084112185050.3.11.vie.surfer.at) has joined #haskell
2013-09-02 15:28:02	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-02 15:31:18	<--	LAMMJohnson (~ja@user-5af43875.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-02 15:31:33	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-09-02 15:31:56	-->	ksf (~ksf@e177040055.adsl.alicedsl.de) has joined #haskell
2013-09-02 15:33:21	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 15:33:38	<--	ksf (~ksf@e177040055.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-09-02 15:33:49	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-02 15:33:53	<--	ksf__ (~ksf@d031015.adsl.hansenet.de) has quit (Ping timeout: 245 seconds)
2013-09-02 15:34:27	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 15:34:29	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-02 15:34:39	-->	dgpratt (~dpratt71@pool-72-65-109-226.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-02 15:37:29	-->	hari_ (~hari@117.193.58.92) has joined #haskell
2013-09-02 15:38:05	hari_	:data Token = Token String
2013-09-02 15:38:09	-->	hiroakip (~hiroaki@p54A6A380.dip0.t-ipconnect.de) has joined #haskell
2013-09-02 15:41:38	hari_	When I define myfunc (Token s)  = s in ghci it gives a parser error on =
2013-09-02 15:42:44	Twey	hari_: GHCi is basically a big do-block.  You need to use ‘let’ if you want to define stuff.
2013-09-02 15:43:03	hari_	Twey, thanks.
2013-09-02 15:43:42	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell
2013-09-02 15:43:58	jdoles	If Haskell is so productive, why isn't ghci a real Haskell interpreter after more than a decade?
2013-09-02 15:44:30	--	Mode #haskell [+o elliott] by ChanServ
2013-09-02 15:44:38	@elliott	jdoles: please quit the blatant trolling
2013-09-02 15:44:58	@elliott	you've been banned before, no excuse, it's ridiculous.
2013-09-02 15:46:03	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-02 15:46:10	jdoles	elliott: it seems ridiculous to continue to say that Haskell is so productive when nobody can't even work out a working interpreter in a short timeframe.
2013-09-02 15:46:11	b__	hiptobecubic: thanks
2013-09-02 15:46:38	jdoles	elliott: but, if you feel that someone showing you a mirror should be banned, then go right ahead.
2013-09-02 15:46:43	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-02 15:46:48	mbrock	haha
2013-09-02 15:47:02	@elliott	ok.
2013-09-02 15:47:04	--	Mode #haskell [+b $a:jdoles] by elliott
2013-09-02 15:47:06	<--	elliott has kicked jdoles (jdoles)
2013-09-02 15:47:06	b__	jdoles, where do I buy http://themagicwarehouse.com/az7082.jpg ?
2013-09-02 15:47:08	--	Mode #haskell [-o elliott] by elliott
2013-09-02 15:47:10	hari_	One doubt. I had the impression that let is used for binding a name to an expression's result.
2013-09-02 15:47:36	hari_	How come it is also used to define functions?
2013-09-02 15:47:54	fryguybob	elliott looks in the mirror and likes what he sees.
2013-09-02 15:47:55	mbrock	just a little syntactic sugar
2013-09-02 15:48:02	b__	"The Mirror Laughs When Anyone Looks Into It"!
2013-09-02 15:48:29	-->	azcodex (~azcodex_@5.Red-83-53-206.dynamicIP.rima-tde.net) has joined #haskell
2013-09-02 15:48:33	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-02 15:49:18	<--	PatrickRobotham (~chatzilla@CPE-120-147-165-35.gdiv1.vic.bigpond.net.au) has quit (Ping timeout: 240 seconds)
2013-09-02 15:49:33	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-02 15:49:37	-->	HugoDani1l (~hugo@elab.fcsh.unl.pt) has joined #haskell
2013-09-02 15:49:37	hari_	OK, need to look up haskell docs for the keyword meanings
2013-09-02 15:49:55	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-02 15:50:47	mbrock	you could see "let X = Y" as meaning "make it so that X means Y", and then "let f x = x + 1" means "make it so that f x means x + 1" which makes sense
2013-09-02 15:50:49	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-02 15:51:02	<--	RageOfThou (~RageOfTho@77.221.25.95) has quit (Quit: Leaving)
2013-09-02 15:51:16	b__	hiptobecubic: I won't be doing extremely expensive computations, but I guess Doubles are still practical. As long as there are no major discrepancies between fixed and floating point calculations
2013-09-02 15:51:24	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-02 15:51:57	-->	Zariel (~zariel@li37-84.members.linode.com) has joined #haskell
2013-09-02 15:52:00	hari_	mbrock, thanks for the explanation
2013-09-02 15:52:11	<--	longqm (~longqm@219.224.160.186) has quit (Read error: Connection timed out)
2013-09-02 15:52:26	-->	pgiarrusso (~pgiarruss@mwla081.WLAN.Uni-Marburg.DE) has joined #haskell
2013-09-02 15:52:26	<--	pgiarrusso (~pgiarruss@mwla081.WLAN.Uni-Marburg.DE) has quit (Client Quit)
2013-09-02 15:52:44	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 15:53:49	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-09-02 15:53:57	mbrock	np!
2013-09-02 15:54:22	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 246 seconds)
2013-09-02 15:55:21	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-02 15:55:32	hiptobecubic	b__, well what are you doing? If you are doing account balancing then used fixed. If you are doing "computational finance" which is basically physics with different names for things then things are done in double precision
2013-09-02 15:55:51	<--	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has quit (Read error: Operation timed out)
2013-09-02 15:56:58	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-02 15:57:36	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-02 15:58:19	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-02 15:59:32	<--	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-09-02 16:00:41	-->	akegalj (~akegalj@93-138-108-97.adsl.net.t-com.hr) has joined #haskell
2013-09-02 16:01:04	akegalj	i cant figure out what is Typeable class used for?
2013-09-02 16:01:04	-->	eyebloom (~eye@74.sub-174-239-0.myvzw.com) has joined #haskell
2013-09-02 16:01:39	elliott	runtime type information / dynamic typing type stuff
2013-09-02 16:01:52	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-02 16:02:20	hari_	suppose I use a function that returns Maybe String, what is the quick way to extract the value from the Maybe type?
2013-09-02 16:02:54	quchen	:t Data.Maybe.fromMaybe -- hari_
2013-09-02 16:02:55	akegalj	hari_: fromMaybe
2013-09-02 16:02:55	lambdabot	a -> Maybe a -> a
2013-09-02 16:03:02	b__	hiptobecubic: thanks for clearing that up :)
2013-09-02 16:03:11	quchen	> fromMaybe 0 (Just 10)
2013-09-02 16:03:12	lambdabot	  10
2013-09-02 16:03:14	quchen	> fromMaybe 0 Nothing
2013-09-02 16:03:15	lambdabot	  0
2013-09-02 16:03:22	b__	I'm doing both, but I should probably seperate them
2013-09-02 16:03:22	hari_	quchen, and akegalj : thanks
2013-09-02 16:03:52	hari_	I should really get back to reading. I keep forgetting everything I learn when jump to a new concept.
2013-09-02 16:03:56	eyebloom	Can anyone explain why 'lets' are part of most core languages? I understand the need for letrecs but most plain lets seem to just be simultaneous abstraction and application.
2013-09-02 16:04:09	akegalj	elliott: what do i get when declaring something with Typeable. I can't see advantages of it :/
2013-09-02 16:04:17	dmwit	eyebloom: let is more polymorphic than lambda
2013-09-02 16:04:26	dmwit	> let x = 3 in (x, x) :: (Int, Double)
2013-09-02 16:04:27	lambdabot	  (3,3.0)
2013-09-02 16:04:31	hiptobecubic	b__, definitely separate them. The accounting side is important and shouldn't be mixed up
2013-09-02 16:04:38	dmwit	> (\x -> (x, x)) 3 :: (Int, Double)
2013-09-02 16:04:39	lambdabot	  Couldn't match type `GHC.Types.Int' with `GHC.Types.Double'
2013-09-02 16:04:39	lambdabot	 Expected type:...
2013-09-02 16:05:16	b__	hiptobecubic: okay. thanks :)
2013-09-02 16:05:22	haasn	> getLine
2013-09-02 16:05:23	lambdabot	  <IO [Char]>
2013-09-02 16:05:24	haasn	^- uses Typeable
2013-09-02 16:05:25	eikke	akegalj: see the docs of Data.Typeable and Data.Dynamic
2013-09-02 16:05:29	eyebloom	I see. Do you think that is the main reason?
2013-09-02 16:06:03	dmwit	yes =)
2013-09-02 16:06:18	eikke	haasn: huh?
2013-09-02 16:06:18	haasn	wait, I'm having a look at Data.Typeable right now; gcast :: (Typeable a, Typeable b) => c a -> Maybe (c b) -- isn't this blatantly unsafe when c is a type family?
2013-09-02 16:06:19	akegalj	eikke: ok, i will read it
2013-09-02 16:06:38	haasn	eikke: instance Typeable a => Show (IO a) -- for lambdabot
2013-09-02 16:06:47	dmwit	haasn: I don't think type variables ever get instantiated to families.
2013-09-02 16:07:00	haasn	dmwit: oh, right
2013-09-02 16:07:03	eikke	haasn: aah, like that, OK
2013-09-02 16:07:05	haasn	that makes sense
2013-09-02 16:07:32	eikke	haasn: I thought you implied getLine uses Typeable-functionality somehow
2013-09-02 16:07:50	haasn	not at all, sorry :)
2013-09-02 16:08:00	<--	[[zz]] (~q@node-490.pool-125-25.dynamic.totbb.net) has quit (Remote host closed the connection)
2013-09-02 16:08:07	-->	josephle (~joseph_h_@c-24-2-127-67.hsd1.pa.comcast.net) has joined #haskell
2013-09-02 16:08:12	-->	jff (~jff@90.221.54.226) has joined #haskell
2013-09-02 16:08:14	eyebloom	dmwit: Thanks. I finished reading "Types and Programming Languages" a few months ago and I was wondering if anyone could recommend another good book on this topic?
2013-09-02 16:08:17	eikke	akegalj: note in GHC 7.8, Typeable1/2/... will no longer exist, things changed around a bit
2013-09-02 16:08:28	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-02 16:08:50	-->	anRch (~markmilli@ip-64-134-47-159.public.wayport.net) has joined #haskell
2013-09-02 16:09:30	erisco	why is this notation invalid Haskell?   class (Integral b, Listish f b) => Countish (f b) where
2013-09-02 16:09:41	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-02 16:10:56	haasn	erisco: if you're referring to http://lpaste.net/92447 it's because Listish only has one parameter
2013-09-02 16:11:01	McManiaC	erisco: you usually define dependencies for class instances
2013-09-02 16:11:04	dmwit	erisco: Perhaps you'd like class (...) => Countish f b where
2013-09-02 16:11:16	-->	Sculptor (~Sculptor@89.110.199.224) has joined #haskell
2013-09-02 16:11:17	McManiaC	oh
2013-09-02 16:11:20	Sculptor	oh? hi
2013-09-02 16:11:27	josephle	eyebloom: Practical Foundations for Programming Languages by Bob Harper if you want a slightly different take on the basics, Advanced Topics in Types and Programming Languages to see some more interesting stuff
2013-09-02 16:11:32	haasn	erisco: in which case you'd want class (Integral b, Listish f) => Countish (f b) -- or whatever
2013-09-02 16:11:34	McManiaC	erisco: did you mean Listish (f b) ?
2013-09-02 16:12:07	erisco	Countish is kind * -> * -> * and Listish is * -> *
2013-09-02 16:12:20	erisco	the extra * on Countish is the Inegtral
2013-09-02 16:12:27	-->	chatsiri_ (~chatsiri_@14.207.185.164) has joined #haskell
2013-09-02 16:12:33	dmwit	erisco: I'm sure you meant Countish is kind * -> * -> Constraint and Listish is * -> Constraint...
2013-09-02 16:13:19	dmwit	erisco: If that's the case, then you're really hosed, because you've asked f to be a type, but you're trying to hand Listish two types.
2013-09-02 16:13:33	dmwit	erisco: So perhaps you even meant Countish is kind (* -> *) -> * -> Constraint...?
2013-09-02 16:13:34	erisco	no just one
2013-09-02 16:14:08	-->	simukis_ (~simukis_@78.59.206.206) has joined #haskell
2013-09-02 16:14:11	erisco	if Listish is * -> *, then I'd expect * -> * -> * can be Listish provided I supply one type
2013-09-02 16:14:12	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-02 16:14:19	erisco	which is what I did
2013-09-02 16:14:23	-->	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has joined #haskell
2013-09-02 16:14:30	<--	hashcat (~chatzilla@27.242.245.43) has quit (Ping timeout: 264 seconds)
2013-09-02 16:14:43	dmwit	erisco: If you expect f :: * -> * -> *, then f cannot be an argument to Countish :: * -> * -> Constraint.
2013-09-02 16:14:45	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-02 16:14:47	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Quit: leaving)
2013-09-02 16:15:26	haasn	erisco: are you referring to http://lpaste.net/92447 ?
2013-09-02 16:15:34	haasn	the Listish there has kind (* -> *) -> Constraint
2013-09-02 16:15:36	erisco	haasn, yes
2013-09-02 16:15:39	dmwit	erisco: (...and I'm pretty sure all arguments to class declarations have to be type variables.)
2013-09-02 16:15:47	haasn	which means ‘f’ has kind * -> *
2013-09-02 16:16:05	haasn	and your definition would work, given Countish :: * -> Constraint
2013-09-02 16:16:10	haasn	I mean, my definition
2013-09-02 16:16:31	<--	vijaykiran (~user@gateway.finalist.com) has quit (Remote host closed the connection)
2013-09-02 16:16:47	<--	longqm (~longqm@219.224.160.186) has quit (Ping timeout: 260 seconds)
2013-09-02 16:17:40	<--	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has quit (Quit: Lost terminal)
2013-09-02 16:17:47	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 16:17:53	eyebloom	josephle: Thanks
2013-09-02 16:18:31	<--	simukis_ (~simukis_@78.59.206.206) has quit (Ping timeout: 246 seconds)
2013-09-02 16:19:04	-->	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has joined #haskell
2013-09-02 16:19:08	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-02 16:19:12	haasn	oh
2013-09-02 16:19:15	haasn	whoops
2013-09-02 16:19:24	haasn	I thought were were meaning ‘instance’ not ‘class’ sorry
2013-09-02 16:19:28	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-02 16:19:46	haasn	it would be class Countish x; instance (Integral b, Listish f) => Countish (f b)
2013-09-02 16:19:51	erisco	maybe this makes my intent clearer
2013-09-02 16:19:57	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-02 16:20:03	erisco	(Integral b, Listish (f b)) => Countish f
2013-09-02 16:21:07	dmwit	haasn: Again, the RHS of the => is almost certainly going to have to be Countish f b
2013-09-02 16:21:40	haasn	both work, as far as being valid Haskell is concerned
2013-09-02 16:22:01	erisco	this is perplexing
2013-09-02 16:22:15	haasn	I think it would be a lot easier if erisco told us what he actually wants to achieve
2013-09-02 16:22:17	dmwit	haasn: No, they don't. =)
2013-09-02 16:22:31	erisco	haasn, I can't be much clearer than the pseudo code
2013-09-02 16:22:33	dmwit	haasn: (Perhaps you're confusing class declarations and instance declarations again!)
2013-09-02 16:22:52	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-02 16:22:55	mbrock	what operations do you want for Countish?
2013-09-02 16:23:13	haasn	GHCi accepts “class Listish (f :: * -> *); class Countish x; instance (Integral b, Listish f) => Countish (f b)”
2013-09-02 16:23:16	-->	hashcat (~chatzilla@218-166-239-132.dynamic.hinet.net) has joined #haskell
2013-09-02 16:23:20	haasn	meaning it's valid Haskell O.o
2013-09-02 16:23:22	-->	eyebloom_ (~eyebloom@pool-71-183-130-8.nycmny.east.verizon.net) has joined #haskell
2013-09-02 16:23:26	-->	Targen (~iguana@190.38.156.156) has joined #haskell
2013-09-02 16:23:32	dmwit	haasn: That's an *instance*.
2013-09-02 16:23:50	dmwit	Oh, you suggested to use it as an instance.
2013-09-02 16:23:52	dmwit	Well. Okay.
2013-09-02 16:24:00	Eduard_Munteanu	Hmmm... what happens if a typeclass member has a constraint which cannot be satisfied for a particular instance? Does GHC stop telling you to define it?
2013-09-02 16:24:05	dmwit	But if there's only ever going to be one instance, why bother making a class...?
2013-09-02 16:24:08	<--	CapitanK (~CaptainK@181.179.80.218) has quit (Read error: Connection reset by peer)
2013-09-02 16:24:09	haasn	and I thought you were responding to my suggestion to use it as an instance :P
2013-09-02 16:24:14	Eduard_Munteanu	I mean, does GHC do anything special?
2013-09-02 16:24:18	haasn	yeah fair point. I really don't know what erisco is doing
2013-09-02 16:24:35	erisco	(Integral b, Listish f) => Countish f b   is certainly not what I want
2013-09-02 16:24:54	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Quit: Leaving.)
2013-09-02 16:25:04	Eduard_Munteanu	I think I want a constraint-level negation.
2013-09-02 16:25:21	dmwit	Eduard_Munteanu: Maybe you want closed type families!
2013-09-02 16:25:31	<--	xpika (~jrg@1.154.54.83) has quit (Ping timeout: 246 seconds)
2013-09-02 16:25:37	Eduard_Munteanu	dmwit: you mean I should just use a GADT?
2013-09-02 16:25:39	erisco	'f' for Listish is * -> *.  'g' for Countish is * -> * -> *. therefore, 'g b' should be * -> *, and therefore 'g b' can be Listish
2013-09-02 16:25:40	-->	estebistec (~estebiste@72.133.228.205) has joined #haskell
2013-09-02 16:26:00	<--	Sculptor (~Sculptor@89.110.199.224) has quit (Quit: Одлазим)
2013-09-02 16:26:06	Eduard_Munteanu	Not sure what closed type families are otherwise.
2013-09-02 16:26:24	dmwit	Eduard_Munteanu: Closed type families are a new extension, only available in HEAD at the moment.
2013-09-02 16:26:44	erisco	if this is confusing then I don't know what else to say
2013-09-02 16:26:48	Eduard_Munteanu	dmwit: hmm... so is it like a GADT except it does automatic resolution like typeclasses?
2013-09-02 16:26:58	Eduard_Munteanu	I'm only guessing.
2013-09-02 16:27:21	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-02 16:27:28	dmwit	Hm. I don't think it's very like a GADT. It's like a type family, except you can write overlapping clauses and they're resolved in order.
2013-09-02 16:27:46	mbrock	erisco: if you give an example of an operation you want the class to have, perhaps someone can show how to implement it in another way
2013-09-02 16:27:50	dmwit	e.g. type family Isn'tBool where instance Isn'tBool Bool = False; instance Isn'tBool a = True
2013-09-02 16:27:51	Eduard_Munteanu	Oh hm. That seems useful.
2013-09-02 16:27:58	Eduard_Munteanu	Haha...
2013-09-02 16:28:09	Eduard_Munteanu	That's a lot like type functions (literally) in Agda.
2013-09-02 16:28:23	dmwit	This looks a bit like negating the (a ~ Bool) constraint, which is why I suggested it.
2013-09-02 16:28:32	dmwit	Perhaps it can be used for whatever it is you are wishing to negate, as well.
2013-09-02 16:28:43	Eduard_Munteanu	I was implementing a type-level Maybe.
2013-09-02 16:28:49	haasn	yeah, a class declaration on its own is usually rather useless (until you start mixing in MPTCs and FunDeps)
2013-09-02 16:29:05	Eduard_Munteanu	And wasn't sure how to do a 'maybe'-like decider.
2013-09-02 16:29:14	-->	StahlGrau (~pg@port-92-195-93-110.dynamic.qsc.de) has joined #haskell
2013-09-02 16:29:20	-->	nexx (nexx@dslb-188-108-180-239.pools.arcor-ip.net) has joined #haskell
2013-09-02 16:29:20	<--	nexx (nexx@dslb-188-108-180-239.pools.arcor-ip.net) has quit (Changing host)
2013-09-02 16:29:20	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-02 16:29:32	<--	RayNbow`TU (~kirika@131.180.203.117) has quit (Quit: leaving)
2013-09-02 16:29:39	haasn	closed type families are a blessing
2013-09-02 16:29:40	erisco	mbrock: length :: f b a -> b
2013-09-02 16:29:51	haasn	I had to switch to ghc 7.7 when implementing my units library :P
2013-09-02 16:30:17	hari_	>map toTitle "this is a test"
2013-09-02 16:30:18	dmwit	erisco: What if you just write class Countish f where length :: f b a -> b -- ?
2013-09-02 16:30:18	ocharles	haasn: units library?
2013-09-02 16:30:21	erisco	mbrock, seems I might use  (Integral b) => f a -> b
2013-09-02 16:30:39	haasn	ocharles: http://hub.darcs.net/nand/units
2013-09-02 16:31:16	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-02 16:31:37	mbrock	erisco: that sounds like it should be possible
2013-09-02 16:31:40	ocharles	haasn: but there are already some of these libraries, what's new?
2013-09-02 16:32:18	ocharles	oh, yours is probably one I'm thinking of
2013-09-02 16:32:18	ocharles	since it's been in dev since 2012
2013-09-02 16:32:24	<--	jff (~jff@90.221.54.226) has left #haskell
2013-09-02 16:32:29	hari_	\map toTitle "this is a test"
2013-09-02 16:32:38	hari_	\ map toTitle "this is a test"
2013-09-02 16:32:40	<--	yacks (~py@103.6.159.99) has quit (Ping timeout: 260 seconds)
2013-09-02 16:32:41	haasn	ocharles: I'm not sure what's new or not; I implemented this as a fun project to get experience working with type families
2013-09-02 16:32:45	dmwit	hari_: > is the right character. But you need a space.
2013-09-02 16:32:54	hari_	> map toTitle "this is a test"
2013-09-02 16:32:55	lambdabot	  "THIS IS A TEST"
2013-09-02 16:33:02	haasn	plus, it's handy in physics class :)
2013-09-02 16:33:07	hari_	dmwit, thanks.
2013-09-02 16:33:07	ocharles	haasn: :)
2013-09-02 16:33:31	haasn	ocharles: one of the main things it provides is a very clean API, I guess; since it uses neat typeoperators instead of confusing MPTCs and stuff
2013-09-02 16:33:43	ocharles	haasn: have you thought about offering Iso's between units?
2013-09-02 16:33:55	haasn	ocharles: 30 meter / 5 second :: Double :@ Meter/Second -- type can be inferred, of course
2013-09-02 16:34:11	ocharles	that is nice :)
2013-09-02 16:34:24	haasn	ocharles: I haven't touched the library since the programming competition I entered it in :P
2013-09-02 16:34:28	-->	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has joined #haskell
2013-09-02 16:34:40	ocharles	haasn: Maybe I'll have a play about adding more edwardk dependencies to it and seeing what happens ;)
2013-09-02 16:35:22	-->	_boegel_ (~boegel@hpcbunny.ugent.be) has joined #haskell
2013-09-02 16:35:24	haasn	feel free, if you really care then I might as well upload the local changes that I have on my netbook
2013-09-02 16:35:26	Eduard_Munteanu	I think this will do though... class (TyMaybe t a) => TyMaybeDecide n j t a where; instance TyMaybeDecide n j TyNothing n where; instance TyMaybeDecide n j (TyJust a) (j a) where
2013-09-02 16:35:35	<--	peterhil (~peterhil@158.127.31.162) has quit (Quit: Must not waste too much time here...)
2013-09-02 16:35:48	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Read error: Connection reset by peer)
2013-09-02 16:36:13	ocharles	haasn: just an idea, truth be told I'm not sure i'll get round to it
2013-09-02 16:36:16	ocharles	at least not for a while
2013-09-02 16:36:37	haasn	faire nough
2013-09-02 16:36:41	<--	boegel (~boegel@gast073b.ugent.be) has quit (Ping timeout: 245 seconds)
2013-09-02 16:36:48	<--	shahn (~shahn@188-194-135-84-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-09-02 16:37:06	<--	eyebloom (~eye@74.sub-174-239-0.myvzw.com) has quit (Quit: Colloquy for iPhone - http://colloquy.mobi)
2013-09-02 16:37:06	--	eyebloom_ is now known as eyebloom
2013-09-02 16:37:10	haasn	also no guarantees it's easy to build, I ran it using some GHC 7.7 from december 2012
2013-09-02 16:37:23	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-02 16:37:48	ocharles	I don't have GHC > 7.6 yet, because the GHC HEAD expression in NixOS is broken
2013-09-02 16:37:54	-->	jff (~jff@90.221.54.226) has joined #haskell
2013-09-02 16:37:56	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-02 16:38:22	 *	hackagebot friendly-time 0.3 - Print time information in friendly ways  http://hackage.haskell.org/package/friendly-time-0.3 (PatrickBrisbin)
2013-09-02 16:38:29	<--	dgpratt (~dpratt71@pool-72-65-109-226.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-09-02 16:38:43	-->	turduks (~ghfdgfdqg@bzq-79-179-206-224.red.bezeqint.net) has joined #haskell
2013-09-02 16:38:47	epta	ocharles: you are using nixos as a desktop os?
2013-09-02 16:38:56	<--	jff (~jff@90.221.54.226) has quit (Quit: leaving)
2013-09-02 16:38:59	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-02 16:39:01	haasn	ocharles: http://hub.darcs.net/nand/units/browse/src/Units/SI.hs line 88 could be changed to an Iso I guess
2013-09-02 16:39:18	-->	node-067 (~hastur@12.228.56.2) has joined #haskell
2013-09-02 16:39:26	<--	turduks (~ghfdgfdqg@bzq-79-179-206-224.red.bezeqint.net) has quit (Client Quit)
2013-09-02 16:39:52	erisco	mbrock, that definition seems troublesome
2013-09-02 16:40:09	hari_	One of the difficulties I have encountered in learning Haskell is understanding syntax, the type system and libraries come in the way of learning the primitive concepts.
2013-09-02 16:40:15	erisco	it requires the implementor be able to return any Integral type
2013-09-02 16:41:03	<--	void64 (~luke@37.17.115.92) has quit (Ping timeout: 260 seconds)
2013-09-02 16:41:39	-->	dgpratt (~dpratt71@pool-72-65-109-226.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-02 16:41:46	-->	turduks (~ghfdgfdqg@bzq-79-179-206-224.red.bezeqint.net) has joined #haskell
2013-09-02 16:41:53	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-02 16:42:01	<--	turduks (~ghfdgfdqg@bzq-79-179-206-224.red.bezeqint.net) has quit (Client Quit)
2013-09-02 16:42:27	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-02 16:42:29	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-02 16:42:59	hari_	Every time I try to grasp a new concept, the syntax complexity or something in the type system, I feel like I hit a road block and need to go back.
2013-09-02 16:43:00	ocharles	epta: yea
2013-09-02 16:43:44	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-02 16:43:51	<--	Rutger` (~devbin@nelisvanaalst.demon.nl) has quit (Read error: Connection reset by peer)
2013-09-02 16:43:54	erisco	dmwit, this is fine, and is what I had, but the Listish constraint is lost
2013-09-02 16:44:00	hari_	And many tutorials seem to use monads a lot. Example, every parser implementation seems to be monadic.
2013-09-02 16:44:18	<--	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has quit (Remote host closed the connection)
2013-09-02 16:44:33	ciaranm	parsers as monads is beauty
2013-09-02 16:44:38	hari_	It kind of hinders my learning the basics when I try to solve a problem in my own mind in a functional way.
2013-09-02 16:44:42	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-02 16:44:46	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-09-02 16:45:12	Eduard_Munteanu	Actually I need one more type variable for the result.
2013-09-02 16:45:24	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-02 16:45:38	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-09-02 16:45:52	erisco	can you only constrain the class type to another class with the same... type arity?
2013-09-02 16:45:54	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-02 16:46:06	<--	hkBst (~marijn@gentoo/developer/hkbst) has quit (Quit: Konversation terminated!)
2013-09-02 16:46:11	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 260 seconds)
2013-09-02 16:46:24	hari_	ciaranm, I am not against monads in particular, though they make my head ache trying to figure them out. The ony thing is that I am somebody who likes to get down to the primitives in order to understand concepts.
2013-09-02 16:47:34	-->	roconnor (~roconnor@e120-pool-d89a7155.brdbnd.voicenetwork.ca) has joined #haskell
2013-09-02 16:47:38	-->	Sculptor (~Sculptor@89.110.199.224) has joined #haskell
2013-09-02 16:47:49	hari_	I am yet to understand the Haskell "primitives" fully. And what is why concepts like monads seem beyond my reach. Problem is, there seem to be no tutorial that doesn't use monads at some point. Especially for the non-trivial problems
2013-09-02 16:47:56	-->	kevinqcs (~turing@183.209.141.191) has joined #haskell
2013-09-02 16:47:57	<--	kevinqcs (~turing@183.209.141.191) has quit (Max SendQ exceeded)
2013-09-02 16:47:57	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-09-02 16:48:17	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-09-02 16:48:30	<--	longqm (~longqm@219.224.160.186) has quit (Read error: Connection timed out)
2013-09-02 16:48:55	geekosaur	you should not be trying to figure them out yet if you're new to haskell. really
2013-09-02 16:48:57	-->	Rutger` (~devbin@nelisvanaalst.demon.nl) has joined #haskell
2013-09-02 16:49:02	hari_	I agree that it is not good to reinvent the wheel, but I am somebody who needs to "re-invent" in order to learn a concept fully. This is where I face difficulties finding a good reference.
2013-09-02 16:49:03	ciaranm	hari_: monads are a primitive. or rather, functors are a primitive.
2013-09-02 16:49:04	-->	kevinqcs (~turing@183.209.141.191) has joined #haskell
2013-09-02 16:49:06	erisco	IO is overrated
2013-09-02 16:49:08	geekosaur	you can only develop an intuition for them by *using* them
2013-09-02 16:49:11	<--	kevinqcs (~turing@183.209.141.191) has quit (Max SendQ exceeded)
2013-09-02 16:49:36	allsystemsarego	hi all, http://lpaste.net/92451 please code-review my custom XML parser
2013-09-02 16:49:41	ciaranm	i dunno. my intuition for monads came from learning category theory.
2013-09-02 16:49:52	Tekmo	hari_: The primitive `IO` commands all map to FFI calls or GHC built-ins
2013-09-02 16:49:56	-->	kevinqcs (~turing@183.209.141.191) has joined #haskell
2013-09-02 16:50:03	<--	kevinqcs (~turing@183.209.141.191) has quit (Max SendQ exceeded)
2013-09-02 16:50:06	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-02 16:50:11	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-02 16:50:21	hari_	I don't have a mathematics background though.
2013-09-02 16:50:29	Tekmo	hari_: You don't need one
2013-09-02 16:50:35	-->	kevinqcs (~turing@183.209.141.191) has joined #haskell
2013-09-02 16:50:41	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-09-02 16:51:32	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-09-02 16:51:32	<--	zammy (~sammy@ppp-53-83.98-62.inwind.it) has quit (Read error: Operation timed out)
2013-09-02 16:51:38	Rarrikins	hari_: Are you using do notation with them?
2013-09-02 16:51:38	hari_	Not sure if I am making myself understood in the context.
2013-09-02 16:52:05	hari_	do notation for?
2013-09-02 16:52:10	Rarrikins	hari_: For using a monad.
2013-09-02 16:52:16	-->	nooodl (~nooodl@38.152-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-02 16:52:16	Tekmo	hari_: What's your specific question about `IO`?
2013-09-02 16:52:25	hari_	Not about IO.
2013-09-02 16:52:42	geekosaur	ciaranm, that's using them, just in a CT context instead of a Haskell one :)
2013-09-02 16:53:00	Tekmo	So, as far as Haskell primitives go, there are three basic primitive concepts
2013-09-02 16:53:08	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-02 16:53:09	Tekmo	Lambdas, case statements, and type classes
2013-09-02 16:53:09	hari_	My question was, how do I grasp functional programming and the type system independently so that I can advance?
2013-09-02 16:53:23	erisco	by not starting with monads
2013-09-02 16:53:32	ciaranm	haskell's type system fits on a t-shirt
2013-09-02 16:53:37	Tekmo	I think you need a more specific question
2013-09-02 16:53:54	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-02 16:54:04	hari_	OK, I wanted to figure out how to write a basic parsing without using monads, but couldn't find any tutorial
2013-09-02 16:54:18	erisco	hari_, you are in luck. I just wrote a paper on parsing :)
2013-09-02 16:54:21	haasn	ciaranm: got any examples? :)
2013-09-02 16:54:27	hari_	I do understand parsing
2013-09-02 16:54:31	erisco	hari_, you do not need monads
2013-09-02 16:54:38	Tekmo	Yeah, you don't need monads
2013-09-02 16:54:42	hari_	erisco, it certainly seems a popular topic in haskell. :)
2013-09-02 16:54:43	erisco	hari_, you just need functions
2013-09-02 16:54:57	Tekmo	The simplest type of parser I can think of is:
2013-09-02 16:54:59	ciaranm	haasn: http://mumble.net/~campbell/images/HM-t-shirt.png
2013-09-02 16:55:06	Tekmo	type Parser a = String -> Maybe (a, String)
2013-09-02 16:55:18	erisco	hari_, well don't conflate issues. if you want to learn monads, then learn monads. if you want to learn Haskell as a beginner, don't start with an advanced topic such as monads
2013-09-02 16:55:25	erisco	if you want to make a parser, you don't need monads
2013-09-02 16:55:29	erisco	I would know ;)
2013-09-02 16:55:40	<--	dimday (~amcvega@50.23.115.113) has quit (Quit: Leaving.)
2013-09-02 16:55:48	ciaranm	you don't need monads, but a parser without monads is like a spaceship without a holodeck
2013-09-02 16:55:50	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (Ping timeout: 245 seconds)
2013-09-02 16:55:51	hari_	erisco, isn't the parsec and attoparsec monad based?
2013-09-02 16:55:51	haasn	ciaranm: heh :)
2013-09-02 16:55:58	haasn	saved for future use
2013-09-02 16:55:58	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-02 16:56:12	erisco	hari_, things aren't "monad based" per se
2013-09-02 16:56:13	<--	mno2_ (~mno2@1.34.43.236) has quit (Quit: mno2_)
2013-09-02 16:56:16	Tekmo	hari_: That's a function which takes a `String` to parse and then either: A) returns `Nothing` if the parse fails, or B) Returns a parsed value of type `a` along with the unconsumed leftovers
2013-09-02 16:56:22	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-02 16:56:40	erisco	hari_, monad is not a dependency like a library. it is like an interface you can express computations with
2013-09-02 16:56:40	<--	kb (~kb@85.255.197.126) has quit (Quit: leaving)
2013-09-02 16:56:54	hari_	erisco, ok.
2013-09-02 16:56:54	Tekmo	Here's an example of a parser which consumes the first character of the input and never fails:
2013-09-02 16:57:00	--	irc: disconnected from server
2013-09-03 16:24:20	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-03 16:24:20	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-09-03 16:24:20	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-09-03 16:24:20	--	Nicks #haskell: [@ChanServ [[zz]] [swift] \q ]OLI[ _1126 __main__ __username__ _br_ _emm_ _flow_ _janne _justjust `0660 `^_^v `bps `fogus a11235 ab9rf abglanz absence acfoltzer Adeon adimit adinapoli Adios adlan_ adnap aess aford aforemny agundry ahf ahihi akahn akiress akraut akurei alang albel727 aleator alej alexander__b alexsdutton AlexWebr Alice3 allsystemsarego aloiscochard alpounet Amadiro amatsu amyers anachron ananthakumaran andares anders^^ andrewsw anhall aninhumer anRch AntiSpamMeta aoh apaku apfelbox_ apples araujo arbn arbn1 arcatan arenz Argue aristid arkeet arkx arlinius arnsholt arpunk asante asjo asQuirreL aszlig Athas augur averell axiom azcodex-away aztek b0c1 b2coutts b52 b__ b_jonas banjiewen barrucadu bartavelle Baughn bawr bbee bbloom bcoppens bd_ bduc Belgarion0 benj_ bennofs bens bentrevor bergmark betawaffle bethebunny bezik bgamari Bigcheese BigEndian bigos bind biscarch bitraten blast_hardcheese BlastHardcheese Blkt Bluuu blz37 BMeph_ bobry bobthenameless boegel|work bogner bogner_ Boney_ boothead Boreeas bqp brainproxy Brando753 brandonw brendan brett BrianHV brisbin brixen bscarlet bsmt bstrie bunzen burp_ Bwild_ bxc Bynbo7 byorgey ByronJohnson bytbox c_14 c_wraith cads cajla Cale caleb_9 caligula callen canissimia canta carter ccasin ccxCZ cdidd cdk ceii Cerise charlesofarrell_ charliesome chaterz chatsiri_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrra chuzz ciaranm CindyLinz cinimod cjay ClaudiusMaximus Clint clog cmsd2 CODEtaku cods cognominal colah companion_cube conal confound copton_ copumpkin CosmicRay Counter-Strike cow-orker cronject cross croyd crs_ cruxeternus Cryovat cschneid cynick cyphase_ d-snp d3lxa dabradley dacc dan64 danharaj daniel-s danr danvet dario^CIP DarkFox DarkNFoxy darthdeus Dashkal davean davidt davorak dcoutts dcoutts_ ddinh de-Vri-es deavid debo Deewiant def-lkb deggis demolithion dennylin93 desc|zenbook destiny dexter2 DexterLB dfan dgpratt dgvncsz0f dibblego DigitalKiwi dilinger_ divarvel dixie djahandarie djcoin dju dkordic dlundy dmp1ce dmwit Dodek dogmaT dolio donri doomlord doomlord_ doshitan dpwright dqd Draconx Draggor DrCode drdo drewr DRiKE drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dyspeptics15 eacameron earthy eataix eb4890 eci ecube edk Edoxile edsko Eduard_Munteanu edwtjo eevar eff__ egork8n ehamberg ehd eikke_ ejls eL_Bart0 electrogeek elgot Eliel Elision elliott em Endeg Enigmagic ent enthropy epsylon epta ericmj ericmoritz Eridius|korea erisco ernst erochester Erstarrung etrepum evancz EvanR Excedrin Excurio eyck eyebloom Ezku ezrios f8l fabjan FalconKirtaran2 fall_ farn favonia felipe_ fergusnoble fiddlerwoaroof fijimunkii fikusz finnrobi FireFly fizruk flazz floatingman flori_ flux fmapE folone foobot foxnorth FreakyPe1guin FreeFull frontendloader froztbyte fry fryguybob ft Fubar^ funfunctor Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gbarboza gbeshers gbluma gdeest gds geal geekosaur gemelen gentleben Gentlecat_ geoffh gereedy ggherdov ggreg ghorn Ghoul_ gilbertw1 glosoli gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes greymalkin gridaphobe gseitz gthorslund guerrilla Guest19190 Guest53212 Guest80998 guest821 Guest98659 Gunni guymann gws haasn hackagebot Hafydd hamishmack hannese hape01 Hardolaf hattusili_III_ hdevalence|away heath Heero Heffalump heikkih helgikrs heruur hexagoxel hfaafb hiptobecubic hiratara hiredman hive-mind hiyakashi hkj Hodapp horlicks hpc hpd hsyl20 hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack icz identity idnar ido idoru Igloo implementation inarru inr int-e integral Internet13 ioanel ion ipuustin ircbrowse iron_houzi isenmann ismlages isomorphic isomorphismes iulian ivan\ ivan` Jaak jackhill jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jaspervdj javax Jaxan jayne jb55 jbauman jbomo jcp jdegoes Jeanne-Kamikaze jeff_s1 Jello_Raptor JesuZ jesyspa jhh jibi jix jkpl jlamothe jlewis jliikka jlouis jmcarthur jmct jml joachifm joar JobV jodaro joefiorini joelb joelteon joeyh JohnBat26 johnw joneshf-laptop joneshf-work jonke jonkri Jonno_FTW jonsmock jonsterling joogi jophish jorick JPohlmann jrd0 jrib jroesch jrslepak juhp juiko junsuijin juuhaa jyyou jzelinskie jzl k00mi k0ral k4nar Kabaka Kaini kakos kamatsu KaneTW kaol katis kav kaw kazimir42 Ke kekimmo Kelet kerrick kfreds Khady Khisanth killy9999 kini Kinnison Kiryx KitB kizzx2 kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man Kobata kofno kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft ksh kshannon_ kstuart ktosiek kubrat Kuraitou kxra KyleCloud l0p3n lahwran lambdabot lambdanaut Laney latermuse latro`a lattenwald Lefeni lemao Lemmih LeNsTR leroux Lethalman levi Licenser lieven_ lightquake linduxed linux_noob_666 liori Liskni_si lispy liszt litherum liyang lokydor lopex lpaste lpsmith luite lukexi luksow lulf lunarjar lusory M-ou-se m0g m3ga machisuji machisuji_ macron magicman Maior mak` maksbotan malorie_ mami mannyv mantovani manung maoe1 marienz markcw Martty MasseR matheus23 matson mattp_ mauke mavam Maxdamantus maximums1eve maxter Mayzie mbrock mceier McManiaC mechairoi MedDev mee mel- melter mena mendez mephx meretrix merijn mero MetaCosm mgaare mgile mgsloan miasma mietek mike2 mikeplus64 milessabin milli miloshadzic mimi_vx mimico__ MindlessDrone mirari mirsal mischov MitchW mixi mizu_no_oto mjo_ mjrosenb MK_FG mkiefel mkrull mlamari mlh mlinksva mm_freak_ mmaruseacph2 mmathis mnbernstein mno2 MoALTz mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes_ MouseTheLuckyDog Mowah mr- mrd MrFahrenheit mrkotfw mroman mrowe mrpantoufle MrRacoon_ mrshoe MrWoohoo mshroyer mstksg msuszczy munro mux mviljamaa mvj4 mxf myme n00dle Nahra Natch ndngvr ndrei NeatBasis necroyeti neektza1 neptunepink Neqoxec neurocyte newsham Nickeeh nicoo Nik05 nik_89 niko nikola Nimatek ninegrid ninzine Nisstyre nkpart nlogax nneko001__ NNOTM no7hing noam noddy2OOO nominolo_ nopcode_ noplamodo notdan Nshag nullcone nwf nxorg8 obcode Obfuscate ocharles Odd_Bloke ofan og Okasu oldmanst1n OlegYch oleo opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s_ otulp ousado Ov3rload1 Pad^ paddymahoney palaga Palmik palmje pantech Paprikachu ParahSailin ParaSa1lin parcs_ Patchou paullik paz pcapriotti peddie peltchu Pengoo perlite perspectival petanqk petantik peterhil petermw pfoetchen phar pharaun phienone philipde` Philonous Phlogistique PHO_ phryk pi8030 pierreghz pikhq pjstadig plains Plex- plhk pmade pnielsen Polarina pootler popx poucet pqmodn pr Pranz predator217 preflex profmakx prophile Proteumus prototrout ps-auxw pseudolio Ptival pure purefn puzza007 pygospa pyrtsa pyykkis_ q66 quaestor quchen quicksilver qwandor qz_ raft raichoo raid Ralith rasmusto Raynes Raynos Razz reactormonk redjohn ReinH Reisen relrod Rembane RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb RoXtein rpenguin_ rs0 Rutger` ryanakca ryant5000 s00pcan s4msung s4muel s_quark sababa SaBer saep saep1 saiam saiam^ Saizan sajith saml samrat satc satshaba1 satshabad saurik schlumpi_ schoppenhauer schroedinbug sclv scottschecter scripty scshunt sdx32 seantallen Sebastien-L SegFaultAX sellout- seschwar sferry sgso shachaf shajra Shaladdle shanse shelf shennyg shepheb shesek Shin-LaC shiona shmup SHODAN Shou si14 simon sipa SirChurchill sirspazzolot skchrko ski skypers sleepynate SLi slobo sm smarter smith_ smlgs so Soft sohum solancile solarus solirc solution Sonderblade sondove sopvop sordina Sorella soulofpe1ce SoupEvil sp3ctum Spaceghost spaceships spion Spockz squimmy srcerer ssbr` sShintah ssttudder Starfire_ startling stass statusfailed stelleg stepcut stianhj stiell stomp strax strmpnk stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supki Svedrin swistak35 Swizec t7 tahu TallerGhostWalt talzeus talzeus_ tamiko Taneb Tarential tarmo taruti tauntaun tavelram taylorgb_ td123 tdammers Tehnix tehroflmaoer Tekerson tel Tene tensorpudding tero- Tesseraction tessier_ tew88 tg Th0mas The_third_man thealanwattsriot theDon theorbtwo TheSpectre thetallguy thetallguy1 thillux thirsteh ThomasLocke thomassgn thorkilnaur thorsten` thoughtpolice thr33strikes threedaymonk thunderrd tiffany tiksa timemage Tinned_Tuna tinyghost tippenein tko tolt tomaw tomboy64 tomejaguar tomh- tomprince torkjak totte tov tpsinnem transfinite Tribal tridactyla tromp__ troydm ts33kr tsou tudalex tulcod tunixman Twey twn tych0 tylergillies_ u_ udevd udoprog Ulrar upgrayeddd uu1101 uvelichitel valdyn Valodim ve vehk Velpoman Veltas Vendethiel Vertue vijaykiran viktech vili_ visof vivekrai vmeson vnz vobi voxpopuli Vq vsayer vvv wagle walter Walther warpy Watcher7 waterlaz wchun weie wereHamster whaletechno wilfredh willb1 Will| Wizek wolfnn wollw wormphlegm WraithM wting wto wtw wunki Wuzzy xaimus xenocons xinming XMunkki_ xnyhps Xorlev xorox90 xplat xplat_ xwl xye xymox yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yitz yogsototh yogurt_truck yriw ystael ysuzuki Zagaba zaiste zammy zaphar_ps Zariel zcourts zebr zeiris Zenol zenoli zenzike zero7 zerokarmaleft zeroXten zhulikas ziman znode zoktar zomg zorzar zrot zw01]
2013-09-03 16:24:20	--	Channel #haskell: 1173 nicks (1 op, 0 halfops, 0 voices, 1172 normals)
2013-09-03 16:24:21	--	URL for #haskell: http://www.haskell.org/
2013-09-03 16:24:22	--	Mode #haskell [+CLcnpt]
2013-09-03 16:24:22	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-09-03 16:24:33	<--	manung (~manung@ool-44c25842.dyn.optonline.net) has quit (Quit: manung)
2013-09-03 16:24:38	-->	shahn (~shahn@188-194-135-84-dynip.superkabel.de) has joined #haskell
2013-09-03 16:24:43	-->	kevinqcs (~turing@223.65.141.17) has joined #haskell
2013-09-03 16:24:51	<--	kevinqcs (~turing@223.65.141.17) has quit (Max SendQ exceeded)
2013-09-03 16:25:33	-->	kevinqcs (~turing@223.65.141.17) has joined #haskell
2013-09-03 16:25:41	<--	kevinqcs (~turing@223.65.141.17) has quit (Max SendQ exceeded)
2013-09-03 16:25:57	<--	heruur (~tvh@2a00:12d0:a101:7d01:223:14ff:fe98:9164) has quit (Read error: Connection reset by peer)
2013-09-03 16:25:59	<--	latermuse (~ron@112.201.131.21) has quit (Quit: meow)
2013-09-03 16:26:19	-->	Itkovian (~Itkovian@b244h242.ugent.be) has joined #haskell
2013-09-03 16:26:23	thirsteh	Pardon the stupid question, but: If I do BC.putStrLn (where BC is Data.ByteString.Char8) followed by B.somethingElse, will that first action have removed non-ASCII characters from the ByteString, or does it only print the ASCII characters (and B.somethingElse will work as expected)? Also, is this the same behavior for the Lazy equivalents (i.e. when forcing a lazy bytestring with ByteString.Lazy.Char8)?
2013-09-03 16:26:24	<--	ndrei (~avo@LPoitiers-156-86-23-91.w193-248.abo.wanadoo.fr) has quit (Ping timeout: 260 seconds)
2013-09-03 16:26:36	-->	heruur (~tvh@2a00:12d0:a101:7d01:5eff:35ff:fe06:c201) has joined #haskell
2013-09-03 16:26:40	-->	kevinqcs (~turing@223.65.189.17) has joined #haskell
2013-09-03 16:26:43	-->	LAMMJohnson (~ja@user-5af43d28.broadband.tesco.net) has joined #haskell
2013-09-03 16:26:47	<--	kevinqcs (~turing@223.65.189.17) has quit (Max SendQ exceeded)
2013-09-03 16:27:06	<--	arenz (arenz@nat/ibm/x-edxeifoglbzyhvrg) has quit (Ping timeout: 264 seconds)
2013-09-03 16:27:39	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-03 16:27:41	Ghoul_	ByteString is only Char8 afaik
2013-09-03 16:27:48	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-03 16:27:52	Ghoul_	You need to use Data.Text for things that dont fit in a Char8
2013-09-03 16:27:56	merijn	Ghoul_: Char8 is not a thing
2013-09-03 16:27:58	-->	kevinqcs (~turing@223.65.141.17) has joined #haskell
2013-09-03 16:28:01	merijn	Ghoul_: ByteString is just bytes
2013-09-03 16:28:07	-->	sclv_ (c62d135f@gateway/web/freenode/ip.198.45.19.95) has joined #haskell
2013-09-03 16:28:09	thirsteh	bytestring is any sequence of bytes. I'm wondering if forcing one with a Char8 function removes non-ASCII bytes
2013-09-03 16:28:17	Ghoul_	Eh, my bad, I was just reading what he wrote
2013-09-03 16:28:28	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-03 16:28:39	elliott	thirsteh: values don't change. question answered :)
2013-09-03 16:28:42	merijn	thirsteh: The correct answer is: Don't use Data.ByteString.Char8
2013-09-03 16:29:11	geekosaur	it doesn;t remove them, IIRC, it truncates them
2013-09-03 16:29:16	merijn	It exists for only one reason: Simple interaction with C/network protocols abusing it's IsString instance for OverloadedStrings
2013-09-03 16:29:18	geekosaur	which is pretty much never what you want
2013-09-03 16:29:20	<--	peterhil (~peterhil@158.127.31.162) has quit (Quit: Must not waste too much time here...)
2013-09-03 16:29:23	cschneid	merijn: the use of bytestring.char8 is when the algorithm is really a byte/bit based algo, and you're not thinking of the contents as strings?
2013-09-03 16:29:34	thirsteh	geekosaur: exactly. so B.somethingElse will effectively break after I've done BC.putStrLn for debugging purposes
2013-09-03 16:29:47	merijn	cschneid: No, the *only* value of BS.Char8 is the IsString instance
2013-09-03 16:29:55	thirsteh	elliott: I want to believe you, but is that really true for bytestrings?
2013-09-03 16:29:59	merijn	cschneid: It's *just* a ByteString
2013-09-03 16:30:00	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-03 16:30:10	thirsteh	merijn: I just wanna spit out the string without encoding to Text first, or unpacking to string
2013-09-03 16:30:12	cschneid	ahh, I get what you're saying, not the char8 version, just the normal ByteString
2013-09-03 16:30:21	merijn	cschneid: So the *only* usecase is specifying ByteString values as string literals
2013-09-03 16:30:21	elliott	thirsteh: it is true for every single value unless you use unsafe operations (and even then it's difficult to make a value actually change).
2013-09-03 16:30:36	thirsteh	elliott: I'm implying that bytestring uses unsafePerformIO/other unsafe array operations
2013-09-03 16:30:37	merijn	thirsteh: So just use the show instance?
2013-09-03 16:30:39	elliott	in other words, if you see a value changing in a Haskell program, either you're being naughty, or there is a bug somewhere.
2013-09-03 16:30:52	elliott	thirsteh: yes, but that does not mean the API it exports is unsafe
2013-09-03 16:30:58	<--	luksow (~luke@aemj118.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 245 seconds)
2013-09-03 16:31:06	elliott	it would be disowned if it did what you asked :)
2013-09-03 16:31:16	thirsteh	elliott: And I'm asking if that is really true when you have a BS with non-ASCII, and do BC.putStrLn followed by B.somethingElse that expects more than just ASCII
2013-09-03 16:31:22	-->	Arkantos (~arkantos@77.245.65.162) has joined #haskell
2013-09-03 16:31:23	<--	xplat_ (~james@67.205.253.80) has quit (Ping timeout: 240 seconds)
2013-09-03 16:31:26	thirsteh	if you are 100% sure it is, I'll be satisfied with that
2013-09-03 16:31:31	thirsteh	merijn: good point, hadn't thought of that
2013-09-03 16:31:37	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-09-03 16:31:38	thirsteh	but I assume that's just B.unpack?
2013-09-03 16:31:40	elliott	you could test, if you want to be absolutely sure :p
2013-09-03 16:31:54	merijn	thirsteh: Yes, although writing a pretty print for ByteString is trivial
2013-09-03 16:32:00	<--	heruur (~tvh@2a00:12d0:a101:7d01:5eff:35ff:fe06:c201) has quit (Ping timeout: 260 seconds)
2013-09-03 16:32:39	<--	Gentlecat_ (~Roman@79.105.216.138) has quit (Ping timeout: 264 seconds)
2013-09-03 16:32:57	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-03 16:33:06	<--	sferry (~samuel@atheme/member/samferry) has quit (Read error: Connection reset by peer)
2013-09-03 16:33:32	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-03 16:33:32	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-03 16:33:33	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-03 16:33:36	<--	evancz (~user@199-83-220-37.PUBLIC.monkeybrains.net) has quit (Remote host closed the connection)
2013-09-03 16:34:52	-->	luksow (~luke@aemj118.neoplus.adsl.tpnet.pl) has joined #haskell
2013-09-03 16:35:16	<--	Tene (~tene@poipu/supporter/slacker/tene) has quit (Ping timeout: 264 seconds)
2013-09-03 16:35:23	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 240 seconds)
2013-09-03 16:35:35	<--	ByronJohnson (~Byron@unaffiliated/bob0) has quit (Ping timeout: 260 seconds)
2013-09-03 16:36:05	zeroXten	why is the Bool type a member of Enum?
2013-09-03 16:36:10	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-03 16:36:39	zeroXten	[True .. False] returns [] and succ True fails
2013-09-03 16:36:41	t7	because one can enumerate all of its values
2013-09-03 16:36:49	Cale	> [False..]
2013-09-03 16:36:50	lambdabot	  <hint>:1:9: parse error on input `]'
2013-09-03 16:36:54	Cale	> [False .. ]
2013-09-03 16:36:55	lambdabot	  [False,True]
2013-09-03 16:37:00	Cale	> [False, True]
2013-09-03 16:37:01	lambdabot	  [False,True]
2013-09-03 16:37:06	Cale	> fromEnum False
2013-09-03 16:37:07	lambdabot	  0
2013-09-03 16:37:08	Zenol	How should I do to re-export the ! operator from Data.Vector in my Stuff module ? (In first case, supposing I'm exporting everything defined in the module, and second case when I export only a part of the stuff defined.)
2013-09-03 16:37:09	Cale	> fromEnum True
2013-09-03 16:37:09	-->	xplat_ (~james@67.205.253.80) has joined #haskell
2013-09-03 16:37:10	lambdabot	  1
2013-09-03 16:37:26	zeroXten	Cale: ah ok, makes sense I guess
2013-09-03 16:37:33	haasn	> (0::Word8) ^.. bits.from enum
2013-09-03 16:37:34	lambdabot	  [0,0,0,0,0,0,0,0]
2013-09-03 16:37:35	Cale	zeroXten: It's just the derived instance
2013-09-03 16:37:41	haasn	> (73::Word8) ^.. bits.from enum
2013-09-03 16:37:43	lambdabot	  [1,0,0,1,0,0,1,0]
2013-09-03 16:37:51	haasn	how cute
2013-09-03 16:38:11	cschneid	what, that word8 trickery is cool. Now if I only I understood lenses :)
2013-09-03 16:38:18	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-03 16:38:21	Cale	zeroXten: It's not particularly essential, but it's more or less 5 characters of additional code to have it in the Prelude and fromEnum at least can be useful at times.
2013-09-03 16:38:33	zeroXten	yeah
2013-09-03 16:38:43	zeroXten	and whats with needing spaces around ".."?
2013-09-03 16:38:43	levi	thirsteh: The truncation that occurs in ByteString.Char8 is only during *construction* if you make one from a string literal that contains non-ASCII characters.
2013-09-03 16:38:48	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-03 16:39:11	Cale	zeroXten: It's because . is also a module path separator, and False starts with an uppercase letter, so it looks like it could be a module name
2013-09-03 16:39:20	zeroXten	right
2013-09-03 16:39:21	Cale	> [False ..]
2013-09-03 16:39:22	lambdabot	  [False,True]
2013-09-03 16:39:22	zeroXten	thanks
2013-09-03 16:39:35	<--	akurei (~akurei@7c141399b8d62217.eduroam.ipv6.ruhr-uni-bochum.de) has quit (Ping timeout: 245 seconds)
2013-09-03 16:40:03	donri	> enumFrom minBound :: [Bool]
2013-09-03 16:40:05	lambdabot	  [False,True]
2013-09-03 16:40:08	<--	luksow (~luke@aemj118.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 245 seconds)
2013-09-03 16:40:33	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-03 16:40:54	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-03 16:40:57	-->	luksow (~luke@afbh203.neoplus.adsl.tpnet.pl) has joined #haskell
2013-09-03 16:41:03	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-03 16:41:08	<--	sferry_ (~samuel@143.226.94.218) has quit (Max SendQ exceeded)
2013-09-03 16:41:32	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-03 16:42:17	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-09-03 16:42:21	quchen	> [()..] -- ♥
2013-09-03 16:42:22	lambdabot	  [()]
2013-09-03 16:43:10	saml	> succ ()
2013-09-03 16:43:12	lambdabot	  *Exception: Prelude.Enum.().succ: bad argument
2013-09-03 16:43:24	-->	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-09-03 16:43:26	saml	> [bottom]
2013-09-03 16:43:26	<--	sferry (~samuel@atheme/member/samferry) has quit (Ping timeout: 240 seconds)
2013-09-03 16:43:27	lambdabot	  Not in scope: `bottom'
2013-09-03 16:43:41	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-09-03 16:43:43	-->	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-03 16:44:31	<--	anRch (~markmilli@209.248.26.203) has quit (Quit: anRch)
2013-09-03 16:45:05	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Remote host closed the connection)
2013-09-03 16:45:11	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-03 16:45:19	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-03 16:45:51	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 260 seconds)
2013-09-03 16:46:29	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-03 16:46:36	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 16:46:46	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-03 16:47:03	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-03 16:47:07	quchen	saml: succ maxBound undefined. And if you want to have bottom, use "let x = x in x" for example. Or "undefined".
2013-09-03 16:47:27	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-03 16:47:38	<--	znode (~znode@119.132.60.23) has quit (Ping timeout: 245 seconds)
2013-09-03 16:47:42	saml	> [undefined .. ] -- ♥
2013-09-03 16:47:43	lambdabot	  *Exception: Prelude.undefined
2013-09-03 16:48:25	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-03 16:48:37	<--	ananthakumaran (~Adium@122.178.203.210) has quit (Quit: Leaving.)
2013-09-03 16:48:52	-->	jff (~jff@152.105.135.215) has joined #haskell
2013-09-03 16:48:54	RichyB	> map fromEnum "♥"
2013-09-03 16:48:55	lambdabot	  [9829]
2013-09-03 16:49:35	-->	nooodl (~nooodl@38.152-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-03 16:49:44	-->	Pullphinger (~Pullphing@12.40.23.68) has joined #haskell
2013-09-03 16:49:44	<--	conal (~textual@50-200-68-220-static.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-03 16:50:35	cschneid	@src bits
2013-09-03 16:50:35	lambdabot	Source not found. Sorry about this, I know it's a bit silly.
2013-09-03 16:50:48	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-03 16:50:55	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 256 seconds)
2013-09-03 16:50:55	cschneid	where does the `bits` function come from in this:  (73::Word8) ^.. bits.from enum
2013-09-03 16:51:08	<--	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-03 16:51:41	-->	glguy (~glguy@unaffiliated/glguy) has joined #haskell
2013-09-03 16:51:47	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-03 16:51:59	levi	Data.Bits, maybe?
2013-09-03 16:52:11	cschneid	levi: yeah, I looked and it's not in that. hoogle didn't point me anywhere useful
2013-09-03 16:52:22	klugez	cschneid: Data.Bits.Lens
2013-09-03 16:52:51	levi	Ahh, yeah.
2013-09-03 16:53:03	cschneid	klugez: ahh cool
2013-09-03 16:53:16	cschneid	that's a fairly standard naming scheme, where lens helpers live under the data in a submodule .Lens?
2013-09-03 16:53:48	Iceland_jack	cschneid: Yes
2013-09-03 16:53:48	-->	atn34 (~atn34@nat-128-84-124-0-344.cit.cornell.edu) has joined #haskell
2013-09-03 16:54:09	-->	heruur (~tvh@2a00:12d0:a101:7d01:223:14ff:fe98:9164) has joined #haskell
2013-09-03 16:54:23	<--	jff (~jff@152.105.135.215) has quit (Quit: leaving)
2013-09-03 16:54:52	-->	jrajav (~jrajav@198.179.137.12) has joined #haskell
2013-09-03 16:55:11	erisco	is there a profiling program that will evaluate my function with increasing input lengths and make a graph?
2013-09-03 16:55:15	<--	hannese (lol@dhcp-238-234.nomad.chalmers.se) has quit
2013-09-03 16:55:17	thirsteh	levi: Okay, I think I understand that. So as long as I just have a B.ByteString, BC does nothing, but if it's ambiguous/type-inferred to BC.ByteString, or explicitly a BC.ByteString, I'll be in trouble
2013-09-03 16:55:26	<--	yogurt_truck (~yogurt_tr@190.191.224.63) has quit (Remote host closed the connection)
2013-09-03 16:55:53	-->	hiroakip (~hiroaki@37.83.12.119) has joined #haskell
2013-09-03 16:55:59	thirsteh	in my case I'm using websockets which will return all kinds of bytestrings/texts, but from your description it sounds like I will be fine if I do s <- getTextData :: IO B.ByteString, then BC.putStrLn s and B.somethingElse s
2013-09-03 16:56:09	cschneid	erisco: if there isn't, that sounds cool. Lean on quickcheck's generating ability perhaps?
2013-09-03 16:56:36	<--	atn34 (~atn34@nat-128-84-124-0-344.cit.cornell.edu) has left #haskell
2013-09-03 16:56:56	Iceland_jack	erisco: You can check out Criterion and use the output of that to create data points?
2013-09-03 16:57:01	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 16:57:14	-->	wontez (~wontez@ltea-047-066-024-147.pools.arcor-ip.net) has joined #haskell
2013-09-03 16:57:22	-->	jff (~jff@152.105.135.215) has joined #haskell
2013-09-03 16:57:30	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 245 seconds)
2013-09-03 16:58:56	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-09-03 16:59:03	-->	nilsi (~nilsi@218.11.176.42) has joined #haskell
2013-09-03 16:59:38	<--	thr33strikes (~wontez@ltea-047-066-019-033.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-09-03 16:59:40	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-03 16:59:44	<--	satc (~smuxi@202.3.77.239) has quit (Ping timeout: 246 seconds)
2013-09-03 16:59:46	fylwind	@pl f x = g (q x) (h x)
2013-09-03 16:59:47	lambdabot	f = liftM2 g q h
2013-09-03 16:59:48	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-09-03 16:59:55	<--	scripty (~scripty@117.192.166.173) has quit (Quit: Leaving)
2013-09-03 17:00:03	-->	tibbe (~tibbe@207.198.105.19) has joined #haskell
2013-09-03 17:00:44	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 240 seconds)
2013-09-03 17:00:52	<--	jrajav (~jrajav@198.179.137.12) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-09-03 17:01:03	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-03 17:01:47	levi	thirsteh: If a ByteString is given to you from a network socket, it won't be constructed from a String literal in your program, and thus will not be truncated. ByteString.Char8 does not define its own type, it just defines a 'fromString' that truncates characters to Char8.
2013-09-03 17:02:04	-->	S11001001 (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-09-03 17:02:04	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-09-03 17:02:04	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-03 17:02:33	<--	stianhj (~stian@89.11.19.16) has quit (Quit: leaving)
2013-09-03 17:02:45	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-03 17:03:03	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-03 17:03:12	<--	aztek (~aztek@188.134.42.97) has quit (Remote host closed the connection)
2013-09-03 17:03:28	erisco	well that all sounds too complicated so I just did it manually
2013-09-03 17:03:32	levi	thirsteh: When you write a string literal in your program and you're using -XOverloadedStrings, what actually gets put in your program is 'fromString "string literal"' and thus your string literals can be converted to other string-like types, much in the same way that numeric literals can get converted to various numeric types.
2013-09-03 17:03:32	<--	chatsiri_ (~chatsiri_@14.207.185.164) has quit (Quit: leaving)
2013-09-03 17:03:34	quicksilver	levi: (and a different 'pack' and 'unpack' and possibly a couple of others)
2013-09-03 17:03:36	erisco	and counted the number of times the cursor counted on the terminal :)
2013-09-03 17:03:41	erisco	cursor flashed
2013-09-03 17:03:45	<--	t7 (~chatzilla@chaucer.kent.ac.uk) has quit (Quit: burn, and im going home)
2013-09-03 17:03:57	<--	glguy (~glguy@unaffiliated/glguy) has quit (Quit: Sleeping)
2013-09-03 17:04:08	erisco	expecting O(n^2logn) and can at least see the O(n^2) part. logn is a bit invisible :P
2013-09-03 17:04:23	erisco	stupid sorts have to be nlogn
2013-09-03 17:04:39	-->	glguy (~glguy@unaffiliated/glguy) has joined #haskell
2013-09-03 17:04:44	 *	hackagebot containers 0.5.3.0 - Assorted concrete container types  http://hackage.haskell.org/package/containers-0.5.3.0 (JohanTibell)
2013-09-03 17:04:54	<--	glguy (~glguy@unaffiliated/glguy) has quit (Client Quit)
2013-09-03 17:05:16	<--	fizruk (~fizruk@109.74.138.26) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-03 17:05:19	Zenol	thanks to lens I can merge 20 LD opcode to only two functions ... \ o / Magic :)
2013-09-03 17:05:20	-->	aztek (~aztek@188.134.42.97) has joined #haskell
2013-09-03 17:05:39	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-03 17:06:00	erisco	don't want to start counting longer than a minute though :(
2013-09-03 17:06:04	erisco	need more data pionts
2013-09-03 17:06:09	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-03 17:06:30	-->	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-03 17:06:42	edwardk	Zenol: =)
2013-09-03 17:06:45	<--	xplat_ (~james@67.205.253.80) has quit (Ping timeout: 248 seconds)
2013-09-03 17:07:05	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 245 seconds)
2013-09-03 17:07:22	quicksilver	erisco: experimentally observing the logn part is very hard on real systems
2013-09-03 17:07:33	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-03 17:07:37	erisco	yeah
2013-09-03 17:08:15	<--	predator217 (~predator1@p50802D3A.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-09-03 17:08:19	erisco	with only a few data points a cubic curve fits better, but I'm fairly sure it is quadratic... guess I'll be spending the rest of the day trying to figure out how criterion works
2013-09-03 17:08:30	<--	mxc (~maxcan@204.14.159.15) has quit (Client Quit)
2013-09-03 17:08:38	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (Ping timeout: 264 seconds)
2013-09-03 17:08:49	-->	predator117 (~predator1@p50802D3A.dip0.t-ipconnect.de) has joined #haskell
2013-09-03 17:09:08	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-03 17:09:15	cschneid	erisco: please write a blog post when done?  I'd be rather interested
2013-09-03 17:09:32	erisco	I don't have a blog... and what is so exciting about bench marking?
2013-09-03 17:09:41	erisco	in fact I am rather scared if bench marking in haskell is this foreign
2013-09-03 17:10:08	-->	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has joined #haskell
2013-09-03 17:10:15	erisco	imma just trying to make parsing faster
2013-09-03 17:10:35	<--	xinming (~xinming@113.248.72.208) has quit (Ping timeout: 260 seconds)
2013-09-03 17:10:43	thirsteh	levi: thanks, makes sense. websockets uses isstring, so I just have to add a B.ByteString type annotation
2013-09-03 17:11:10	mkramer	I'm trying to get an infinite stream of random Word32's. I just read System.Random, and it seem to be telling me that I need to roll my own instance of RandomGen…is that right?
2013-09-03 17:11:13	cschneid	erisco: the fact that it hasn't been talked about apparently. And generally I'm trying to learn haskell + the environment around it. This is one of those things you've gotta know eventually
2013-09-03 17:11:28	erisco	blogging takes too much time :(
2013-09-03 17:11:29	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-09-03 17:11:45	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-03 17:11:54	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-03 17:11:57	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-03 17:12:20	-->	xinming (~xinming@125.82.198.146) has joined #haskell
2013-09-03 17:13:02	<--	Ralith (~ralith@216.162.199.202) has quit (Ping timeout: 240 seconds)
2013-09-03 17:13:19	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-03 17:13:22	cschneid	erisco: yeah. I have a blog that I'm going to start documenting my learning of Snap on. It sure does take time to get going and do.
2013-09-03 17:14:24	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-03 17:14:41	merijn	blah
2013-09-03 17:15:02	merijn	Debug.Trace needs "traceM :: Monad m => String -> m ()"
2013-09-03 17:15:05	-->	[]D|s3L[] (~dio@host16-34-dynamic.16-87-r.retail.telecomitalia.it) has joined #haskell
2013-09-03 17:15:36	<--	ndrei (~avo@83.142.149.227) has quit (Read error: Connection reset by peer)
2013-09-03 17:16:08	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-03 17:16:31	-->	exicer (~exicer@host109-157-102-51.range109-157.btcentralplus.com) has joined #haskell
2013-09-03 17:16:48	<--	hiroakip (~hiroaki@37.83.12.119) has quit (Ping timeout: 260 seconds)
2013-09-03 17:16:56	d3lxa	question: if I have a type MyT = A|B derving (Show,Read,Enum) then define an instance (Show a, Enum a) => ToJSON, why won't it be used for MyT, do I have to write deriving (ToJSON) or what?
2013-09-03 17:17:20	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 17:17:26	<--	arpunk (none@190.84.40.17) has quit (Ping timeout: 240 seconds)
2013-09-03 17:17:55	thirsteh	levi: I guess websockets never actually has a String representation like you said, but not sure what kind of magic goes on there if you expect a Char8 BS. Anyway, I get it now
2013-09-03 17:17:59	<--	yogsototh (~yogsototh@2a01:e35:2e4f:7e90:6864:c1b3:2403:2477) has left #haskell
2013-09-03 17:18:25	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Read error: Operation timed out)
2013-09-03 17:18:41	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:19:12	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-03 17:19:16	<--	mirari (~mirari@daimi-pat.daimi.au.dk) has quit (Read error: Connection reset by peer)
2013-09-03 17:19:44	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-09-03 17:19:52	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-03 17:19:59	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-03 17:20:20	merijn	thirsteh: There is no such thing as a "Char8 BS"
2013-09-03 17:20:26	merijn	There is only "ByteString"
2013-09-03 17:20:33	merijn	(Well, lazy/strict versions, but anyway)
2013-09-03 17:20:38	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-03 17:20:45	<--	[]D|s3L[] (~dio@host16-34-dynamic.16-87-r.retail.telecomitalia.it) has quit (Quit: Leaving...)
2013-09-03 17:20:50	ParahSailin	d3lxa: you might be able to do it by deriving (Generic)
2013-09-03 17:20:59	merijn	Data.ByteString.Char8 is just a module exporting evil functions that you should not touch
2013-09-03 17:21:41	<--	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 248 seconds)
2013-09-03 17:21:48	<--	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Ping timeout: 268 seconds)
2013-09-03 17:22:01	<--	Itkovian (~Itkovian@b244h242.ugent.be) has quit (Quit: Zzzzz ...)
2013-09-03 17:22:27	merijn	Additionally it exports the vile IsString for ByteString that makes OverloadedStrings "work", the only valid usecase for that instance is working with C functions/network protocols where string literals are nice but that do not have an encoding (i.e. HTTP, FTP, SMTP, etc.)
2013-09-03 17:22:35	<--	simukis_ (~simukis_@78.63.244.234) has quit (Remote host closed the connection)
2013-09-03 17:22:37	<--	ndrei (~avo@83.142.149.227) has quit (Read error: Connection reset by peer)
2013-09-03 17:22:39	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-03 17:22:53	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-03 17:22:56	--	flazz is now known as flazz_gone
2013-09-03 17:22:56	<--	zcourts (~zcourts@diag-2-2.rdg.ac.uk) has quit (Ping timeout: 245 seconds)
2013-09-03 17:23:11	-->	dustin10 (~dustin10@2001:4870:600a:500::2) has joined #haskell
2013-09-03 17:23:11	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-09-03 17:23:16	thirsteh	merijn: okay, I guess there's no chance truncation happens in my case then
2013-09-03 17:23:17	-->	sxn (~sxn@mnch-4d04660d.pool.mediaWays.net) has joined #haskell
2013-09-03 17:23:19	merijn	There is no such thing as a Char8 datatype and there is not other implementation of ByteString
2013-09-03 17:23:23	-->	refold (~gman@h-129-27.a258.priv.bahnhof.se) has joined #haskell
2013-09-03 17:23:30	d3lxa	ParahSailin: is that the only way? shouldn't haskell use my instance without special things?
2013-09-03 17:23:46	thirsteh	if the truncation only ever happens in fromString (String -> ByteString)
2013-09-03 17:24:01	thirsteh	unless websockets does something very silly, which I doubt
2013-09-03 17:24:13	-->	blebla (~blebla@77-58-38-133.dclient.hispeed.ch) has joined #haskell
2013-09-03 17:24:24	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-03 17:24:55	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-03 17:25:19	-->	roconnor (~roconnor@e120-pool-d89a63c1.brdbnd.voicenetwork.ca) has joined #haskell
2013-09-03 17:25:35	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-03 17:25:51	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-03 17:25:53	-->	mxc (~maxcan@199.21.86.2) has joined #haskell
2013-09-03 17:26:15	<--	aztek (~aztek@188.134.42.97) has quit (Remote host closed the connection)
2013-09-03 17:26:34	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Connection timed out)
2013-09-03 17:26:37	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-09-03 17:26:46	geekosaur	"websockets does something very silly" all the time... oh wait you meant the haskell interface :p
2013-09-03 17:27:03	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-03 17:27:16	merijn	geekosaur: Isn't the entire notion of websockets silly?
2013-09-03 17:27:38	-->	aztek (~aztek@188.134.42.97) has joined #haskell
2013-09-03 17:28:02	<--	Arkantos (~arkantos@77.245.65.162) has quit (Quit: Self-derezzing...)
2013-09-03 17:28:07	geekosaur	not entirely. it's an inexplicable answer to a real question
2013-09-03 17:28:22	-->	Arkantos (~arkantos@77.245.65.162) has joined #haskell
2013-09-03 17:28:48	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-03 17:28:54	<--	shahn (~shahn@188-194-135-84-dynip.superkabel.de) has quit (Ping timeout: 264 seconds)
2013-09-03 17:28:54	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-03 17:28:57	merijn	geekosaur: I posit that the question is silly in the first place
2013-09-03 17:29:07	<--	tibbe (~tibbe@207.198.105.19) has quit (Quit: tibbe)
2013-09-03 17:29:12	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-03 17:29:20	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-09-03 17:29:20	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-03 17:29:23	-->	kylcarte (~kcarter@66.165.63.38) has joined #haskell
2013-09-03 17:29:56	<--	Jonno_FTW (~come@9ch.in) has quit (Remote host closed the connection)
2013-09-03 17:30:00	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-03 17:30:03	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-03 17:30:18	exicer	How can I use cabal to view all of my installed packages ?
2013-09-03 17:30:32	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-09-03 17:30:50	bergmark	exicer: ghc-pkg list
2013-09-03 17:30:51	<--	visof (~visof@unaffiliated/visof) has quit (Ping timeout: 245 seconds)
2013-09-03 17:30:54	geekosaur	exicer, typicaly you don't. ghc-pkg list
2013-09-03 17:31:07	dcoutts_	exicer: it's not very good at that at the moment, have to use the lower level tool
2013-09-03 17:31:12	merijn	"ghc-pkg list" only shows installed libraries
2013-09-03 17:31:13	geekosaur	cabal isn't so much a package anager as an installation helper
2013-09-03 17:31:26	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 240 seconds)
2013-09-03 17:31:31	dcoutts_	exicer: that said, there is cabal list --installed
2013-09-03 17:31:33	-->	kitallis (~kitallis@122.178.211.105) has joined #haskell
2013-09-03 17:31:42	--	flazz_gone is now known as flazz
2013-09-03 17:32:05	dcoutts_	geekosaur: we were working on uninstall support at the hackathon :-)
2013-09-03 17:32:30	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-03 17:32:45	ParahSailin	d3lxa: just tried this: data Derp = Dorp | Hodor | Foo deriving (Typeable, Data); import Data.Aeson.Generic; toJSON Dorp gives you String "Dorp"
2013-09-03 17:32:46	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-03 17:33:10	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-03 17:33:11	-->	tibbe (tibbe@nat/google/x-ndjvacxhofljurig) has joined #haskell
2013-09-03 17:33:36	-->	shreesh (~shreesh@209.104.235.1) has joined #haskell
2013-09-03 17:33:43	-->	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has joined #haskell
2013-09-03 17:33:46	<--	soulofpe1ce (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Read error: Connection reset by peer)
2013-09-03 17:33:55	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 260 seconds)
2013-09-03 17:34:17	exicer	So if I have a broken package using ghc-pkg check, what can I do ?
2013-09-03 17:34:27	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-03 17:34:31	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-03 17:34:43	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Quit: leaving)
2013-09-03 17:34:53	-->	martinalex_ (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-03 17:34:59	ParahSailin	delete .ghc, re-do everything
2013-09-03 17:35:06	<--	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:c817:1864:b68a:4ce2) has quit (Remote host closed the connection)
2013-09-03 17:35:17	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:35:21	mroman	exicer: unregister it?
2013-09-03 17:35:22	bergmark	you can ghc-pkg unregister too
2013-09-03 17:35:30	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-03 17:35:38	-->	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:c817:1864:b68a:4ce2) has joined #haskell
2013-09-03 17:35:40	mroman	I've just had to do that today to get Network.CGI to install
2013-09-03 17:35:45	<--	Apocalisp (~textual@173-14-185-169-NewEngland.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-03 17:35:47	<--	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has quit (Ping timeout: 260 seconds)
2013-09-03 17:35:52	<--	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Ping timeout: 264 seconds)
2013-09-03 17:36:04	mroman	something about parsec shadowing parsec
2013-09-03 17:36:24	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2013-09-03 17:36:32	exicer	Okay, cool. Seems like unregister works.. what does it actually do though ?
2013-09-03 17:36:40	exicer	Just remove it from the ghc's list  ?
2013-09-03 17:36:44	-->	Freddy___ (53e3116f@gateway/web/freenode/ip.83.227.17.111) has joined #haskell
2013-09-03 17:36:50	geekosaur	yes
2013-09-03 17:36:50	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Ping timeout: 264 seconds)
2013-09-03 17:36:50	<--	guest821 (~username@108.172.54.251) has quit (Ping timeout: 264 seconds)
2013-09-03 17:36:56	spaceships	what is (<$) used for?
2013-09-03 17:37:03	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-03 17:37:03	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-03 17:37:04	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-03 17:37:04	exicer	So if it was a thing installed by cabal, how can I remove the actual file /
2013-09-03 17:37:06	mroman	@type (<$)
2013-09-03 17:37:07	lambdabot	Functor f => a -> f b -> f a
2013-09-03 17:37:14	<--	nilsi (~nilsi@218.11.176.42) has quit (Remote host closed the connection)
2013-09-03 17:37:27	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-03 17:37:34	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Client Quit)
2013-09-03 17:37:41	-->	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has joined #haskell
2013-09-03 17:37:48	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:37:50	int-e	spaceships: in a parser you might do something like  Keyword <$ string "keyword"
2013-09-03 17:37:50	<--	shreesh (~shreesh@209.104.235.1) has quit (Remote host closed the connection)
2013-09-03 17:37:55	spaceships	steal somethings container?
2013-09-03 17:38:00	-->	chidy (~chidy@199.253.246.1) has joined #haskell
2013-09-03 17:38:04	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Client Quit)
2013-09-03 17:38:05	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-03 17:38:06	-->	shreesh (~shreesh@209.104.235.1) has joined #haskell
2013-09-03 17:38:07	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-03 17:38:07	mroman	It's usually fmap . const
2013-09-03 17:38:26	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:38:28	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 245 seconds)
2013-09-03 17:38:41	ParahSailin	@src (<$)
2013-09-03 17:38:41	lambdabot	(<$) = (<$>) . const
2013-09-03 17:39:02	<--	sferry_ (~samuel@143.226.94.218) has quit (Ping timeout: 240 seconds)
2013-09-03 17:39:17	<--	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Ping timeout: 248 seconds)
2013-09-03 17:39:18	-->	agumonkey (~agu@253.158.70.86.rev.sfr.net) has joined #haskell
2013-09-03 17:39:24	d3lxa	ParahSailin: thx, I'm looking if it works as I expect
2013-09-03 17:39:28	mroman	spaceships: i.e (<$) 3 (Just 5) overwrites the 5 with 3
2013-09-03 17:39:49	 *	hackagebot module-management 0.17 - Clean up module imports, split and merge modules  http://hackage.haskell.org/package/module-management-0.17 (DavidFox)
2013-09-03 17:39:50	donri	`a <$ m` is a bit like `m >> return a`
2013-09-03 17:39:55	-->	babu` (~user@122.167.221.227) has joined #haskell
2013-09-03 17:40:00	<--	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:c817:1864:b68a:4ce2) has quit (Ping timeout: 245 seconds)
2013-09-03 17:40:03	int-e	but the question was "what's it for", not "what does it do".
2013-09-03 17:40:12	spaceships	donri: oh, interesting
2013-09-03 17:40:15	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-03 17:41:10	<--	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has quit (Read error: Operation timed out)
2013-09-03 17:41:12	-->	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has joined #haskell
2013-09-03 17:41:14	-->	bgilbert (~textual@64.20.30.66) has joined #haskell
2013-09-03 17:41:14	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-03 17:41:39	-->	fizruk (~fizruk@79.165.40.18) has joined #haskell
2013-09-03 17:41:43	geekosaur	think of it this way: in a parser, you may want to parse '(', expression, ')', return the expression. <$ lets you combine the expression parser with parsing the closing paren, while returning the result of the expression parser and without having to capture the expression parser's result separately
2013-09-03 17:42:10	ion	geekosaur: Are you thinking of (<*)?
2013-09-03 17:42:14	mkramer	Is there typeclass for "data that has a well-defined byte-length"? I.e., "things that sizeof() work work on in C?"
2013-09-03 17:42:16	geekosaur	maybe
2013-09-03 17:42:31	geekosaur	I think I have the concept, maybe not the literal application thereof
2013-09-03 17:42:38	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 256 seconds)
2013-09-03 17:42:47	erisco	geekosaur, I use <* and *> for this... not sure how the fmap helps =\
2013-09-03 17:42:54	spaceships	ah, very cool. thanks all for assistance
2013-09-03 17:43:09	-->	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has joined #haskell
2013-09-03 17:43:18	geekosaur	mkramer, native haskell representations don't have that concept. Foreign.Storable does
2013-09-03 17:43:45	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-09-03 17:44:06	spaceships	there is an instance for Monad ((->) r) in Data.Functor: how do you use it?
2013-09-03 17:44:07	-->	chatsiri_ (~chatsiri_@14.207.185.164) has joined #haskell
2013-09-03 17:44:08	-->	Itkovian (~Itkovian@188.189.78.175) has joined #haskell
2013-09-03 17:44:13	quicksilver	geekosaur: arguably bounded integral types have a natural notion of bit length, but we don't make it particularly accessible
2013-09-03 17:44:27	quicksilver	geekosaur: no doubt the bit field magic in lens can open it up
2013-09-03 17:44:36	mkramer	There's no way to ask Word how many bytes long it is?
2013-09-03 17:44:40	mkramer	@ geekosaur
2013-09-03 17:44:43	<--	Jonno_FTW (~come@9ch.in) has quit (Remote host closed the connection)
2013-09-03 17:44:52	mkramer	Oh, yeah
2013-09-03 17:44:53	mkramer	Storable
2013-09-03 17:44:56	mkramer	that's the class I wanted! thanks
2013-09-03 17:45:05	quicksilver	mkramer: bitSize
2013-09-03 17:45:20	quicksilver	> bitSize (42 :: Word)
2013-09-03 17:45:22	lambdabot	  32
2013-09-03 17:45:27	quicksilver	> bitSize (42 :: Word8)
2013-09-03 17:45:28	lambdabot	  8
2013-09-03 17:45:35	quicksilver	> bitSize (42 :: Word64)
2013-09-03 17:45:36	lambdabot	  64
2013-09-03 17:46:13	geekosaur	which is from Data.Bits
2013-09-03 17:46:14	-->	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:5d83:cba9:519e:a2fe) has joined #haskell
2013-09-03 17:46:16	<--	tiksa (~tiksa@178-222-70-254.dynamic.isp.telekom.rs) has quit (Ping timeout: 245 seconds)
2013-09-03 17:46:36	quicksilver	of course this is a *representational* promise
2013-09-03 17:46:43	quicksilver	(Word8s might still be stored in 64 bits of memory)
2013-09-03 17:46:54	donri	a <$ m = pure a <* m
2013-09-03 17:46:57	quicksilver	it's just about the values the type is allowed to hold
2013-09-03 17:47:07	geekosaur	I kinda don't think of those as truly native, so much as intended for interfacing with other stuff
2013-09-03 17:47:21	quicksilver	they're just a bunch of constants in the end
2013-09-03 17:47:22	fizbin	There's no way to get djinn to play nicely with things that are a functor, is there?
2013-09-03 17:47:42	quicksilver	although you could in fact do something by taking the base-2 logarithm of maxBound - minBound
2013-09-03 17:47:43	geekosaur	of course ultimately that leads to the rant over whether Int should exist :)
2013-09-03 17:47:52	-->	mightybyte (~mightybyt@199.47.72.31) has joined #haskell
2013-09-03 17:47:52	merijn	ugh
2013-09-03 17:47:57	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-03 17:48:06	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 17:48:10	merijn	Not only does pipes-4 use a datatype called Void, it's actually exported from the main module >.<
2013-09-03 17:48:22	stelleg	I'm having an issue with two event threads interfering with eachother, despite trying both forkIO and forkOS with the -threaded ghc flag, anyone have any suggestions before I start digging in with threadscope?
2013-09-03 17:48:23	<--	luksow (~luke@afbh203.neoplus.adsl.tpnet.pl) has quit (Ping timeout: 260 seconds)
2013-09-03 17:48:29	mkramer	thanks
2013-09-03 17:48:38	merijn	stelleg: Define "interfering with eachother"
2013-09-03 17:48:54	-->	luksow (~luke@afbh203.neoplus.adsl.tpnet.pl) has joined #haskell
2013-09-03 17:48:56	merijn	That's kinda the point of threads...
2013-09-03 17:49:23	haasn	edwardk: do we have an iso for Show/Read?
2013-09-03 17:49:42	stelleg	merijn: one is a v4l2 event listener and one is jack audio, and they work fine independently but when the v4l2 is running it kills the jack audio
2013-09-03 17:49:43	elliott	merijn: it's because void isn't in the platform apparently
2013-09-03 17:49:48	d3lxa	ParahSailin: I don't know but it seems it doesn't play well with Yesod TH, but I'm wondering why can't I write my general instance like this http://sprunge.us/KdIX ?
2013-09-03 17:49:49	elliott	despite the fact that pipes isn't either :p
2013-09-03 17:49:56	elliott	it was called X before but apparently clashing with void is better...
2013-09-03 17:49:59	merijn	elliott: I know, but then they should name it differently
2013-09-03 17:50:13	-->	raichoo (~raichoo@i59F6CC1B.versanet.de) has joined #haskell
2013-09-03 17:50:14	stelleg	merijn: cant really say more until i start digging deeper
2013-09-03 17:50:14	edwardk	haasn: there is a _Show prism in head
2013-09-03 17:50:26	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-03 17:50:43	merijn	stelleg: What does "kills the jack audio" mean?
2013-09-03 17:50:45	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Quit: leaving)
2013-09-03 17:50:59	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 256 seconds)
2013-09-03 17:51:01	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:51:08	merijn	elliott: W00t!
2013-09-03 17:51:09	stelleg	merijn: jack zombifies it because it isn't responding
2013-09-03 17:51:13	merijn	elliott: Whining works!
2013-09-03 17:51:16	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Read error: Connection reset by peer)
2013-09-03 17:51:20	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Client Quit)
2013-09-03 17:51:21	-->	amathew1 (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-03 17:51:24	merijn	elliott: Just got this reply from Tekmo: "Alright, I will change it to use `Data.Void`.  Can you submit a pull request for this?"
2013-09-03 17:51:28	<--	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Quit: brb)
2013-09-03 17:51:50	<--	implementation (~impl@unaffiliated/implementation) has quit (Ping timeout: 264 seconds)
2013-09-03 17:52:29	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-03 17:52:35	<--	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-03 17:52:39	<--	Itkovian (~Itkovian@188.189.78.175) has quit (Read error: Connection reset by peer)
2013-09-03 17:52:43	-->	ntus1017 (~ntus1017@123.21.91.156) has joined #haskell
2013-09-03 17:52:48	<--	mightybyte (~mightybyt@199.47.72.31) has left #haskell
2013-09-03 17:52:55	erisco	ffs
2013-09-03 17:53:03	<--	yacks (~py@103.6.159.99) has quit (Ping timeout: 245 seconds)
2013-09-03 17:53:06	erisco	on windows anything I compile immediately locks (the output binary)
2013-09-03 17:53:12	erisco	on ghc this means the linker always fails -.-
2013-09-03 17:53:32	erisco	no idea why
2013-09-03 17:53:33	<--	tibbe (tibbe@nat/google/x-ndjvacxhofljurig) has quit (Quit: tibbe)
2013-09-03 17:53:44	-->	jrajav (~jrajav@198.179.137.12) has joined #haskell
2013-09-03 17:53:58	edwardk	merijn: what wasn't using Void?
2013-09-03 17:54:15	merijn	edwardk: pipes-4
2013-09-03 17:54:18	mroman	weird folder security settings?
2013-09-03 17:54:19	edwardk	ah
2013-09-03 17:54:26	edwardk	had his own?
2013-09-03 17:54:29	merijn	edwardk: I think you warned about that
2013-09-03 17:54:32	<--	babu` (~user@122.167.221.227) has quit (Ping timeout: 256 seconds)
2013-09-03 17:54:36	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:54:36	merijn	oh, wait
2013-09-03 17:54:38	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-03 17:54:42	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-03 17:54:46	merijn	No, you warned about the potential problem of Proxy
2013-09-03 17:54:47	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-03 17:54:48	<--	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has quit (Client Quit)
2013-09-03 17:54:51	edwardk	yeah
2013-09-03 17:55:07	edwardk	personally i think the Proxy issue is going to bite him hard, but hey
2013-09-03 17:55:10	merijn	edwardk: Yeah, it used to have "data X" but changed to "data Void", which of course breaks all my stuff using Data.Void >.>
2013-09-03 17:55:14	edwardk	who uses Data.Typeable ;)
2013-09-03 17:55:33	merijn	edwardk: What's a sensible bound to pick for the void package?
2013-09-03 17:55:42	merijn	Just ">=0.6"?
2013-09-03 17:55:45	edwardk	they almost all work
2013-09-03 17:55:51	edwardk	the corner cases just got refined
2013-09-03 17:56:03	edwardk	yeah
2013-09-03 17:56:16	-->	crvs (~crvs@bl13-105-111.dsl.telepac.pt) has joined #haskell
2013-09-03 17:56:19	edwardk	it amazes me how many cases have been worth ironing out with void
2013-09-03 17:56:32	-->	implementation (~impl@unaffiliated/implementation) has joined #haskell
2013-09-03 17:56:45	edwardk	i've been meaning to write up an article showcasing the ins and outs of maintaning the simplest possible package
2013-09-03 17:56:48	elliott	I opened up issues for both Proxy and Void but he closed both of them :p
2013-09-03 17:56:49	edwardk	holding up void as an example
2013-09-03 17:56:56	donri	merijn: what, does it also have a Data.Void module?
2013-09-03 17:56:57	-->	xcthulhu (~xcthulhu@c-98-220-235-232.hsd1.il.comcast.net) has joined #haskell
2013-09-03 17:56:58	edwardk	of a package that has one data type with no inhabitants
2013-09-03 17:57:03	-->	elediaz_ (~quassel@90.173.201.101) has joined #haskell
2013-09-03 17:57:05	ocharles	edwardk: what's the Proxy issue?
2013-09-03 17:57:06	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 245 seconds)
2013-09-03 17:57:09	elliott	edwardk: I like how the Show instance was terrible for ages
2013-09-03 17:57:44	edwardk	ocharles: just that Data.Proxy starts being exported (needlessly) by Data.Typeable, so anyone who imports Data.Typeable and his stuff will have a conflict. likely leading some users to leave off Typeable or have to deal with lots of qualified noise.
2013-09-03 17:57:48	merijn	donri: No, it defines "data Void" in Pipes.Core
2013-09-03 17:57:54	donri	merijn: so?
2013-09-03 17:58:02	edwardk	elliott: Void (Void (Void...
2013-09-03 17:58:06	merijn	donri: That collides if you use Data.Void anywhere
2013-09-03 17:58:06	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-03 17:58:12	donri	merijn: how?
2013-09-03 17:58:16	-->	tiksa (~tiksa@178-222-70-254.dynamic.isp.telekom.rs) has joined #haskell
2013-09-03 17:58:20	ocharles	edwardk: ah, ok
2013-09-03 17:58:27	merijn	donri: "Ambiguous occurrence `Void'"?
2013-09-03 17:58:30	edwardk	merijn: same name, same purpose, needless difference
2013-09-03 17:58:31	ocharles	edwardk: most users won't import Proxy
2013-09-03 17:58:31	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-03 17:58:37	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Quit: leaving)
2013-09-03 17:58:40	ocharles	edwardk: that's now in Pipes.Core, which is more... specialist
2013-09-03 17:58:41	edwardk	ocharles: importing Data.Typeable brings it in
2013-09-03 17:58:47	edwardk	oh that one
2013-09-03 17:58:47	donri	merijn: oh, you want open and non-qualified imports :p
2013-09-03 17:58:53	tomejaguar	Surely there should still be an X type alias.  X was nice
2013-09-03 17:58:55	haasn	mapMOf_ _Left looks a bit disgusting
2013-09-03 17:59:01	haasn	I think void . _Left might be preferred :P
2013-09-03 17:59:01	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-03 17:59:07	edwardk	haasn: heh
2013-09-03 17:59:17	donri	hey let's make sure we can import all of hackage unqualified in a single module with no clashes
2013-09-03 17:59:20	-->	nuttycom (~nuttycom@c-67-176-62-171.hsd1.co.comcast.net) has joined #haskell
2013-09-03 17:59:20	edwardk	:t void _Left
2013-09-03 17:59:21	lambdabot	(Applicative f, Choice p) => p a (f b) -> ()
2013-09-03 17:59:25	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-03 17:59:30	<--	Mortomes_ (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 264 seconds)
2013-09-03 17:59:30	haasn	:t void . _Left print
2013-09-03 17:59:31	lambdabot	Show a => Either a c -> IO ()
2013-09-03 17:59:33	haasn	that's what I meant
2013-09-03 17:59:34	edwardk	:t void . _Left
2013-09-03 17:59:35	lambdabot	(Functor (p (Either a c)), Applicative f, Choice p) => p a (f b) -> p (Either a c) ()
2013-09-03 17:59:37	-->	tibbe (tibbe@nat/google/x-hcngnjutnbisbggi) has joined #haskell
2013-09-03 17:59:42	merijn	ocharles: Proxy is exported from Pipes now, afaict
2013-09-03 17:59:48	haasn	:t void .: _Left
2013-09-03 17:59:49	lambdabot	    Not in scope: `.:'
2013-09-03 17:59:49	lambdabot	    Perhaps you meant one of these:
2013-09-03 17:59:49	lambdabot	      `.' (imported from Data.Function),
2013-09-03 17:59:50	haasn	:(
2013-09-03 17:59:56	merijn	ocharles: Not just Pipes.Core
2013-09-03 17:59:56	haasn	how long until we get .: into Control.Lens
2013-09-03 18:00:03	edwardk	haasn: after i die
2013-09-03 18:00:06	ocharles	merijn: oh, hmm
2013-09-03 18:00:10	haasn	edwardk: sounds like a plan!
2013-09-03 18:00:11	ocharles	merijn: that seem unnecessary
2013-09-03 18:00:14	edwardk	ack!
2013-09-03 18:00:23	haasn	where is _Show?
2013-09-03 18:00:34	ocharles	haasn: don't steal .: :(
2013-09-03 18:00:38	ocharles	lens already stole .>
2013-09-03 18:00:43	 *	ocharles shakes a fist
2013-09-03 18:00:47	-->	mumps_ (c05c5e17@gateway/web/freenode/ip.192.92.94.23) has joined #haskell
2013-09-03 18:00:49	edwardk	haasn: Control.Lens.Proxy
2013-09-03 18:00:58	ciaranm	.: is fmap fmap fmap !
2013-09-03 18:01:07	erisco	whoo running criterion already :D
2013-09-03 18:01:07	haasn	I don't have that module
2013-09-03 18:01:09	haasn	I'm on HEAD
2013-09-03 18:01:11	haasn	what's wrong?
2013-09-03 18:01:13	edwardk	er
2013-09-03 18:01:15	edwardk	Prism
2013-09-03 18:01:16	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-03 18:01:18	erisco	will take an hour or so for the bench to complete I imagine
2013-09-03 18:01:19	edwardk	=)
2013-09-03 18:01:19	haasn	oh
2013-09-03 18:01:25	edwardk	sorry all this proxy talk primed me
2013-09-03 18:01:34	haasn	I still don't have _Show
2013-09-03 18:01:50	-->	tisaro (~user@dslb-178-009-003-053.pools.arcor-ip.net) has joined #haskell
2013-09-03 18:01:59	Eduard_Munteanu	It's unclear to me what "you can only call TH splices from another module" really means. Can module A call some helpers in module B, then feed the results to a TH function in B?
2013-09-03 18:02:05	shachaf	.: is usually a bad idea.
2013-09-03 18:02:43	ciaranm	what if someone put a Functor inside your Functor so you can Functor while you Functor?
2013-09-03 18:02:52	tomejaguar	What's .: in this case?
2013-09-03 18:02:59	shachaf	(.) . (.)
2013-09-03 18:03:08	ciaranm	fmap fmap fmap
2013-09-03 18:03:19	shachaf	concatMap = concat .: map, and so on
2013-09-03 18:03:22	tomejaguar	Why's it a bad idea?
2013-09-03 18:03:27	tomejaguar	I use it every day.
2013-09-03 18:03:29	Eduard_Munteanu	imagefmap :P
2013-09-03 18:03:29	int-e	@type (<<<)
2013-09-03 18:03:30	lambdabot	Category cat => cat b c -> cat a b -> cat a c
2013-09-03 18:03:31	scshunt	Eduard_Munteanu: yes
2013-09-03 18:03:35	haasn	edwardk: I'm guessing we also don't have anything for words/unwords yet either do we?
2013-09-03 18:03:42	merijn	My new MO is to not have my code work around libraries, but just beat maintainers into modifying their libraries to suit me :)
2013-09-03 18:03:44	scshunt	Eduard_Munteanu: it refers to the actual module in which the splice occurs
2013-09-03 18:03:46	-->	Neqoxec (~Neqoxec@8-12.ptpg.oregonstate.edu) has joined #haskell
2013-09-03 18:03:47	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-03 18:03:51	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-03 18:03:58	edwardk	haasn; best it can be is a fold unless you want unsafety
2013-09-03 18:04:01	<--	chidy (~chidy@199.253.246.1) has quit (Read error: Connection reset by peer)
2013-09-03 18:04:06	Eduard_Munteanu	Ah.
2013-09-03 18:04:08	edwardk	there is one for that in Data.List.Split.Lens i think
2013-09-03 18:04:11	Eduard_Munteanu	Thanks.
2013-09-03 18:04:12	-->	erochester1 (~erocheste@137.54.15.178) has joined #haskell
2013-09-03 18:04:17	haasn	edwardk: I'm writing a (somewhat silly) function along the lines of:
2013-09-03 18:04:19	haasn	> "foo bar bat 0" & iso words unwords._last.prism' show readMaybe +~ 1
2013-09-03 18:04:20	lambdabot	  Not in scope: `readMaybe'
2013-09-03 18:04:21	<--	martinalex_ (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Ping timeout: 268 seconds)
2013-09-03 18:04:25	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Read error: Connection reset by peer)
2013-09-03 18:04:26	haasn	yuck, but it returns "foo bar bat 1"
2013-09-03 18:04:31	-->	chidy (~chidy@199.253.246.1) has joined #haskell
2013-09-03 18:04:42	haasn	@let readMaybe s = case reads s of [(a,"")] -> Just a; _ -> Nothing
2013-09-03 18:04:43	lambdabot	 Defined.
2013-09-03 18:04:43	--	erochester1 is now known as erochester
2013-09-03 18:04:44	haasn	> "foo bar bat 0" & iso words unwords._last.prism' show readMaybe +~ 1
2013-09-03 18:04:51	ocharles	haasn: doesn't 'words' throw away multiiple spaces?
2013-09-03 18:04:51	lambdabot	  "foo bar bat 1"
2013-09-03 18:04:56	haasn	ocharles: it does, it's not a true iso
2013-09-03 18:04:58	ocharles	> words "hello    world"
2013-09-03 18:04:59	lambdabot	  ["hello","world"]
2013-09-03 18:05:01	ocharles	ok
2013-09-03 18:05:03	-->	akurei (~akurei@lak-31-107.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-03 18:05:05	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Remote host closed the connection)
2013-09-03 18:05:41	haasn	ocharles: that aside, it's also not a true traversal either because you can eg. do (.~ "foo bar")
2013-09-03 18:05:54	haasn	even if you keep track of the number of spaces
2013-09-03 18:05:55	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Client Quit)
2013-09-03 18:06:05	zeroXten	are there any efficieny gains in using _ rather than some random name?
2013-09-03 18:06:11	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-03 18:06:16	edwardk	no
2013-09-03 18:06:17	donri	tomejaguar: http://hackage.haskell.org/packages/archive/composition/1.0.1.0/doc/html/Data-Composition.html ;)
2013-09-03 18:06:19	zeroXten	k
2013-09-03 18:06:21	quicksilver	haasn: isn't there some kind of punishment for people who use 'iso' on things which aren't actual isos?
2013-09-03 18:06:28	zeroXten	didn't think so
2013-09-03 18:06:28	int-e	compilation might be a teeny bit faster ;)
2013-09-03 18:06:30	quicksilver	zeroXten: you avoid a warning about an unusual variable name, perhaps?
2013-09-03 18:06:31	edwardk	just no warning under Wall
2013-09-03 18:06:35	quicksilver	unused.
2013-09-03 18:07:02	--	azcodex-away is now known as azcodex
2013-09-03 18:07:03	donri	edwardk himself uses iso for things that aren't ;)
2013-09-03 18:07:08	edwardk	quicksilver: the lens police come for you. its 30 days community service writing lens documentation
2013-09-03 18:07:22	 *	ocharles deletes his illegal Prisms
2013-09-03 18:07:24	 *	ocharles whistles
2013-09-03 18:07:29	quicksilver	I call cruel and unusual punishment
2013-09-03 18:07:31	satc	Is there a zipWith for ByteString which returns a ByteString. I dont want to first generate [Word8] and then pack that to get a ByteString?
2013-09-03 18:07:33	zeroXten	i guess if it sees a variable is unused, it wouldn't allocate memory anyway or something
2013-09-03 18:07:45	ocharles	on that note, have you given adjunctions in lensanymore thought, edwardk?
2013-09-03 18:07:47	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-03 18:07:50	ocharles	i think it was adjunctions anyway...
2013-09-03 18:08:02	<--	JohnBat26 (~Eugene@89.175.77.172) has quit (Ping timeout: 264 seconds)
2013-09-03 18:08:03	edwardk	ocharles: i've forgotten the context
2013-09-03 18:08:06	ocharles	Such as going from String -> MyData via parsec, and back with a formatter
2013-09-03 18:08:06	quicksilver	zeroXten: right, unusued variables generate no code even if they appear to be used
2013-09-03 18:08:12	edwardk	oh
2013-09-03 18:08:14	edwardk	improper lenses
2013-09-03 18:08:18	satc	@hoogle (Word8 -> Word8 -> Word8) -> ByteString -> ByteString -> ByteString
2013-09-03 18:08:19	edwardk	on sided inverses
2013-09-03 18:08:19	lambdabot	No results found
2013-09-03 18:08:19	edwardk	yes
2013-09-03 18:08:21	erisco	never mind I don't know what criterion is doing at all :(
2013-09-03 18:08:25	ocharles	it's not quite a legal Prism unless the parsed string has already been pretty printed
2013-09-03 18:08:31	tomejaguar	donri: I know it.  I don't know why shachaf thinks it is usually a bad idea.
2013-09-03 18:08:33	edwardk	but we haven't added type aliases or documentation about them
2013-09-03 18:08:37	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Client Quit)
2013-09-03 18:08:46	quicksilver	> let a = "no code generated"; b = a ++ " for me neither" in 0
2013-09-03 18:08:47	lambdabot	  0
2013-09-03 18:08:50	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-03 18:08:53	edwardk	i sent an email to snoyman that i may reformulate and put on the wiki about improper lens-likes
2013-09-03 18:09:04	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-03 18:09:07	<--	chidy (~chidy@199.253.246.1) has quit (Ping timeout: 256 seconds)
2013-09-03 18:09:09	ocharles	edwardk: oh, so lens has some support for this already?
2013-09-03 18:09:18	edwardk	ocharles: yes, operationally nothing goes wrong
2013-09-03 18:09:25	edwardk	you can use all the lens combinators with your improper lenses
2013-09-03 18:09:29	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-03 18:09:32	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-03 18:09:35	ocharles	oh right, so i just shouldn't care about the fact I break the laws
2013-09-03 18:09:40	edwardk	there are just two 'sub-families' of them, that if you mix you lose access to the second law completely
2013-09-03 18:09:53	edwardk	well, you should care, because it makes reasoning about fusion harder
2013-09-03 18:10:00	edwardk	but not for operational reasons
2013-09-03 18:10:11	ocharles	i see
2013-09-03 18:11:23	haasn	just wrote a trivial self-modifying algorithm using hint and lenses, excellent
2013-09-03 18:11:23	edwardk	we do everything in all our combinators in lens 'fully fused', so you may get some unexpected results if you expected some intermediate states that just don't happen
2013-09-03 18:11:31	edwardk	hah
2013-09-03 18:11:45	haasn	to expand on this idea though it would be great if we had lenses for Haskell source trees, eg. as parsed by haskell-src-exts
2013-09-03 18:11:49	edwardk	reminds me of screen clearing on a c64 back in the day ;)
2013-09-03 18:11:51	haasn	then we could *really* start using lenses to modify haskell code
2013-09-03 18:11:54	-->	quchen (~quchen@p54AA0E93.dip0.t-ipconnect.de) has joined #haskell
2013-09-03 18:12:13	edwardk	haasn: i nominate you to write haskell-src-exts-lens
2013-09-03 18:12:19	donri	i recently used lenses to generate quickcheck tests for polymorphic properties using TH
2013-09-03 18:12:23	tomejaguar	edwardk: what do you mean by 'fully fused' here?
2013-09-03 18:12:24	haasn	so much effort :(
2013-09-03 18:12:36	-->	blume (~tani@g225048221.adsl.alicedsl.de) has joined #haskell
2013-09-03 18:12:40	-->	makos_ (~makos@koln-4d0b5d8d.pool.mediaWays.net) has joined #haskell
2013-09-03 18:12:49	scshunt	we need a lens-lift that lifts a lens to act on ASTs
2013-09-03 18:12:55	edwardk	tomejaguar: meaning we don't tend to call view, then use (.~) or something when we can merge that together into a (%~) in one pass
2013-09-03 18:13:02	scshunt	for TH
2013-09-03 18:13:04	lpaste	haasn pasted “self-modifying algorithm” at http://lpaste.net/92517
2013-09-03 18:13:06	ocharles	anyone know if Antoine Latter (aslatter) is on irc under another alias?
2013-09-03 18:13:22	-->	ortmage (ortmage@nat/google/x-ratauexiuvphlpyq) has joined #haskell
2013-09-03 18:13:27	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-09-03 18:13:35	<--	cfricke (~cfricke@96.45.197.22) has quit (Read error: Connection reset by peer)
2013-09-03 18:13:42	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-03 18:14:03	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-09-03 18:14:20	haasn	ideally line 8 of this should read something like _LetBody._3._2._Literal +~ 1 -- or whatever for _2, _1, the idea here is that they represent the parameters of the application
2013-09-03 18:14:21	<--	sxn (~sxn@mnch-4d04660d.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-09-03 18:14:29	edwardk	haasn now turn that into a quine!
2013-09-03 18:14:30	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-03 18:14:50	-->	Targen (~iguana@190.38.144.87) has joined #haskell
2013-09-03 18:14:51	haasn	a trivial transformation afaik
2013-09-03 18:14:56	edwardk	sure
2013-09-03 18:15:03	edwardk	but sexier
2013-09-03 18:15:13	-->	Itkovian (~Itkovian@188.189.78.175) has joined #haskell
2013-09-03 18:15:18	erisco	blog says there is -k http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/
2013-09-03 18:15:19	<--	elediaz_ (~quassel@90.173.201.101) has quit (Quit: http://quassel-irc.org - Chatee cómodamente donde sea.)
2013-09-03 18:15:20	erisco	there is no -k
2013-09-03 18:15:22	<--	ThomasLocke (~ThomasLoc@pdpc/supporter/active/thomaslocke) has quit (Read error: Operation timed out)
2013-09-03 18:15:55	haasn	edwardk: now I need to hack lensy fizzbuzz into it and post it as the wildest haskell fizzbuzz on the net :)
2013-09-03 18:16:06	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-09-03 18:16:15	 *	quicksilver still finds _3, _2 etc ugly. Maybe absinthe would make my heart grow fonder.
2013-09-03 18:16:22	<--	djcoin (~djcoin@178.23.142.88.rev.sfr.net) has quit (Quit: WeeChat 0.4.0)
2013-09-03 18:16:27	-->	marr (~ccc@78.8.182.67) has joined #haskell
2013-09-03 18:16:57	mkramer	Why is my C++ version of this function cleaner and easier to understand than my Haskell version? http://lpaste.net/92518
2013-09-03 18:17:17	haasn	I don't understand the C++ version of your function, so that's already subjective
2013-09-03 18:17:23	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-03 18:17:37	<--	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has quit
2013-09-03 18:17:46	-->	DaveS (DaveS@c-67-172-211-11.hsd1.va.comcast.net) has joined #haskell
2013-09-03 18:17:51	<--	DaveS (DaveS@c-67-172-211-11.hsd1.va.comcast.net) has quit (Changing host)
2013-09-03 18:17:51	-->	DaveS (DaveS@unaffiliated/daves) has joined #haskell
2013-09-03 18:18:05	<--	saep1 (~saep@p5B2A08F1.dip0.t-ipconnect.de) has quit (Quit: WeeChat 0.4.1)
2013-09-03 18:18:05	haasn	I don't even understand the Haskell version. :(
2013-09-03 18:18:52	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 18:19:00	-->	Thra11 (~Thra11@31.185.212.32) has joined #haskell
2013-09-03 18:19:01	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Quit: Sto andando via)
2013-09-03 18:19:02	erisco	mkramer, if your question is how to "select a type" in Haskell, then you can explicitly specify the type of an expression with '::'
2013-09-03 18:19:07	erisco	> maxBound :: Int
2013-09-03 18:19:08	lambdabot	  2147483647
2013-09-03 18:19:10	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-03 18:19:10	erisco	is an example
2013-09-03 18:19:25	bartavelle	what does "I can't live in the Get and Put monads of Data.Binary, because the file comes from a foreign system." mean ?
2013-09-03 18:19:26	Zenol	mkramer: I think you are looking after classes.
2013-09-03 18:19:47	erisco	if you need to get the variable from your function signature into your function definition, look at the scoped type variables extension
2013-09-03 18:20:00	<--	no7hing (~anonymous@62.217.45.66) has quit (Quit: no7hing)
2013-09-03 18:20:25	erisco	there is no need to use a type inhabitant to do this
2013-09-03 18:20:43	mkramer	scoped type variables
2013-09-03 18:20:44	quicksilver	erisco: but he happens to have one and it's reasonably clear to use it.
2013-09-03 18:20:47	mkramer	It sounds promising
2013-09-03 18:20:57	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-03 18:21:05	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp141.bu.edu) has joined #haskell
2013-09-03 18:21:05	erisco	maybe not to mkramer :)
2013-09-03 18:21:12	quicksilver	looks to me like that the main reason the C++ 'seems' simpler is because you're assuming the C++ ABI
2013-09-03 18:21:23	mkramer	Well, I don't want to say "0 :: Word32" when I really mean "Word32"
2013-09-03 18:21:34	quicksilver	in other words, because you are hardcoding the fact that the binary layout in the file is the same as the in-memory layout of a variable
2013-09-03 18:21:51	quicksilver	which is because you chose your file format to match the way your C++ compiler puts stuff in memory
2013-09-03 18:22:02	quicksilver	and that's why the reinterpet_cast<char*> works
2013-09-03 18:22:20	quicksilver	haskell forces you to be explicit about which order the bytes are laid out in the file
2013-09-03 18:22:24	mkramer	all true
2013-09-03 18:22:27	quicksilver	which makes you endian-independent.
2013-09-03 18:22:34	mkramer	also true
2013-09-03 18:22:38	<--	Itkovian (~Itkovian@188.189.78.175) has quit (Quit: Zzzzz ...)
2013-09-03 18:22:38	bartavelle	and compiler / flags dependant
2013-09-03 18:22:41	bartavelle	(for padding)
2013-09-03 18:22:42	<--	LeNsTR (~lenstr@master.qs.biz) has quit (Changing host)
2013-09-03 18:22:42	-->	LeNsTR (~lenstr@unaffiliated/lenstr) has joined #haskell
2013-09-03 18:22:55	quicksilver	that little detail aside I think the two bits of code are pretty similar in complexity
2013-09-03 18:22:59	quicksilver	subjective, as someone said
2013-09-03 18:23:28	<--	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-03 18:23:29	--	LeNsTR is now known as lenstr
2013-09-03 18:23:39	mkramer	So, passing a type inhabitant would be a normal way to do this?
2013-09-03 18:23:39	lpaste	merijn pasted “Tail recursion?” at http://lpaste.net/92519
2013-09-03 18:23:45	boothead	hi folks, can someone remind me how to express that then I (SomeClass a) => I mean it throughout the function for all as?
2013-09-03 18:24:04	<--	Shou (~sister@81.191.185.181) has quit (Quit: meow meow meow)
2013-09-03 18:24:07	boothead	scoped type variables?
2013-09-03 18:24:09	mkramer	bartavelle: it's not compiler/flags dependent
2013-09-03 18:24:10	merijn	Right, I'm assuming the example just pasted is rather inefficient, due to the lack of tail recursion, but is that actually right?
2013-09-03 18:24:20	-->	hiroakip (~hiroaki@37.82.131.10) has joined #haskell
2013-09-03 18:24:25	merijn	And if so, is there a way to make it tail recursive in a way that doesn't suck?
2013-09-03 18:24:51	erisco	boothead, maybe?
2013-09-03 18:25:00	<--	luksow (~luke@afbh203.neoplus.adsl.tpnet.pl) has quit (Quit: Wychodzi)
2013-09-03 18:25:04	merijn	Or maybe not so much inefficient as it might cause stackoverflows
2013-09-03 18:25:19	<--	blume (~tani@g225048221.adsl.alicedsl.de) has quit (Ping timeout: 268 seconds)
2013-09-03 18:25:28	Eduard_Munteanu	boothead: you'll just have to ensure you mean the same 'a', either with ScopedTypeVariables or asTypeOf.
2013-09-03 18:25:33	merijn	boothead: SCTV is the only way to refer to type variables in your main type signature, so probably that
2013-09-03 18:25:39	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-03 18:25:40	bartavelle	mkramer, structure packing, and even order of fields, is totally compiler/flags independant
2013-09-03 18:25:45	boothead	thanks guys
2013-09-03 18:25:58	bartavelle	mkramer, if you are using simpler stuff you are probably ok
2013-09-03 18:26:05	bartavelle	err
2013-09-03 18:26:09	bartavelle	dependant
2013-09-03 18:26:20	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:26:22	-->	Mortomes_ (~Mortomes_@92-108-125-137.dynamic.upc.nl) has joined #haskell
2013-09-03 18:26:26	<--	Mortomes_ (~Mortomes_@92-108-125-137.dynamic.upc.nl) has quit (Changing host)
2013-09-03 18:26:26	-->	Mortomes_ (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-03 18:26:39	mkramer	really? A uint_32_t is allowed to have different memory representations in different compilers?
2013-09-03 18:26:45	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-03 18:26:52	bartavelle	a struct
2013-09-03 18:26:54	mkramer	I am/was pretty sure that it's well defined
2013-09-03 18:27:04	Zenol	mkramer: indieness is architecture dependent.
2013-09-03 18:27:06	merijn	mkramer: Also, yes
2013-09-03 18:27:10	mkramer	I know Endianness
2013-09-03 18:27:18	merijn	mkramer: Fun example, there exist platforms with 32bit char
2013-09-03 18:27:27	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-03 18:27:40	merijn	You wouldn't believe how much code crashes on *that* :)
2013-09-03 18:27:55	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-03 18:28:02	mkramer	I'm only planning to use this with fixed-width types
2013-09-03 18:28:14	geekosaur	different compilers can and do pack struct-s in different ways. this is why you'll often see #pragma pack(n) or equivalent in struct definitions in system headers to try to tell varios compilers how the OS expects the struct to work
2013-09-03 18:28:17	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-03 18:28:23	levi	merijn: I had a DSP-using coworker come to me with some really weird questions due to 32-bit chars. :)
2013-09-03 18:28:26	mkramer	Both the Haskell version and the C++ version choke on different endianness
2013-09-03 18:28:45	merijn	levi: Silly programmers that don't bother to read the C spec :p
2013-09-03 18:28:55	satc	Is there a monadic version of mapAccum ?
2013-09-03 18:29:02	mkramer	Heh, a 32-bit char is unbelievable
2013-09-03 18:29:07	mkramer	that's not even C++
2013-09-03 18:29:12	mkramer	that's just out of spec
2013-09-03 18:29:15	merijn	mkramer: It is not
2013-09-03 18:29:16	levi	mkramer: Uh, no.
2013-09-03 18:29:26	merijn	mkramer: The C spec only specifies that char is *at least* 8 bits
2013-09-03 18:29:47	levi	mkramer: The definitions of char and byte for the C language are not what you might think.
2013-09-03 18:29:50	merijn	mkramer: Some embedded systems can only address values at 4 byte word granularity
2013-09-03 18:29:51	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:29:53	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:30:02	merijn	The spec was designed with things like these in mind
2013-09-03 18:30:09	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:30:12	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:30:23	Zenol	merijn: silly proc designer which have 32bits char :p
2013-09-03 18:30:24	WraithM	satc: No, I don't think so.
2013-09-03 18:30:26	 *	geekosaur sends mkramer a KL10... 9-bit "byte"s (depending on the compiler of course)
2013-09-03 18:30:27	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:30:29	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:30:43	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:30:45	mkramer	I had no idea
2013-09-03 18:30:46	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:30:50	levi	Zenol: They're not silly at all.
2013-09-03 18:31:00	Zenol	levi: I'm jocking.
2013-09-03 18:31:01	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:31:03	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:31:07	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-03 18:31:13	erisco	how is char a processor concept?
2013-09-03 18:31:17	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:31:20	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:31:33	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 248 seconds)
2013-09-03 18:31:36	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:31:38	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:31:42	<--	perspectival (perspectiv@nat/redhat/x-wxxrakkmfstpflrw) has quit (Quit: Leaving.)
2013-09-03 18:31:47	merijn	mkramer: The spec doesn't even specify whether char is signed or unsigned
2013-09-03 18:31:49	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-03 18:31:52	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:31:54	<--	ananthakumaran (~Adium@117.202.23.210) has quit (Max SendQ exceeded)
2013-09-03 18:31:57	levi	It's not, really, but the processor concept of 'smallest addressable memory unit' happens to define the meaning of 'byte' and 'char' in C.
2013-09-03 18:32:01	merijn	mkramer: Only that the ascii values are positive
2013-09-03 18:32:12	erisco	levi, I see
2013-09-03 18:32:14	-->	ananthakumaran (~Adium@117.202.23.210) has joined #haskell
2013-09-03 18:32:42	erisco	levi, I guess you pay for definitions based on performance
2013-09-03 18:32:52	levi	This is why people who want to be precise tend to use words like 'octet' when referring to 8-bit quantities.
2013-09-03 18:32:55	mkramer	That I did know, so I don't find that suprising
2013-09-03 18:33:12	mkramer	In my mind, char == Word8, not Word
2013-09-03 18:33:21	erisco	levi, what is wrong with "byte"?
2013-09-03 18:33:22	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-03 18:33:23	mkramer	But no longer!
2013-09-03 18:33:23	levi	erisco: DSPs are rather specialized processors.
2013-09-03 18:33:42	<--	hiroakip (~hiroaki@37.82.131.10) has quit (Ping timeout: 264 seconds)
2013-09-03 18:33:46	<--	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-03 18:33:55	levi	erisco: The problem with using 'byte' should be clear to you.
2013-09-03 18:34:01	erisco	no, it isn't
2013-09-03 18:34:02	merijn	mkramer: The more C you know, the less convinced you get that you actually know C! :)
2013-09-03 18:34:05	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-03 18:34:16	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-03 18:34:21	levi	erisco: Well, 'byte' doesn't always mean '8 bits'.
2013-09-03 18:34:22	eevar	am I right in assuming that the runtime doesn't like blocking ffi calls, and would be the thing interrupting them? unsafe vs. safe didn't seem to matter much, except adding 10s to my benchmarks
2013-09-03 18:34:22	-->	adnap (~adnap@70.112.164.154) has joined #haskell
2013-09-03 18:34:31	erisco	if byte means smallest addressable unit, then sure, but byte = 8 bits is fine
2013-09-03 18:34:35	<--	makos_ (~makos@koln-4d0b5d8d.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-09-03 18:34:41	fizbin	If I have (a <$> b <$> pure st <*> c), is there any way to simplify that using properties of <$> and pure?
2013-09-03 18:34:46	erisco	levi, maybe in C land
2013-09-03 18:34:47	Sculptor	yo
2013-09-03 18:35:06	levi	erisco: It doesn't *always* mean 8 bits *anywhere*.  But 'octet' does always mean 8 bits.
2013-09-03 18:35:11	joelteon	:t \a b c d -> a <$> b <$> pure c <*> d
2013-09-03 18:35:12	lambdabot	Applicative f => (a2 -> a -> b) -> (a1 -> a2) -> a1 -> f a -> f b
2013-09-03 18:35:19	erisco	levi, who defined byte?
2013-09-03 18:35:22	merijn	eevar: The runtime doesn't preempt/unschedule threads that run foreign calls, they get moved to a a separate "foreign call" pthread
2013-09-03 18:35:23	joelteon	:t \a b c d -> a <$> b <$> c <$> d
2013-09-03 18:35:24	lambdabot	Functor f => (a2 -> b) -> (a1 -> a2) -> (a -> a1) -> f a -> f b
2013-09-03 18:35:29	joelteon	oh no, that isn't the same
2013-09-03 18:35:43	-->	yogurt_truck (~yogurt_tr@190.191.224.63) has joined #haskell
2013-09-03 18:35:48	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-09-03 18:35:48	levi	erisco: I don't know. There exist *varying* definitions. Which is my point.
2013-09-03 18:35:49	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-09-03 18:35:57	erisco	mm
2013-09-03 18:36:08	Saizan	fizbin: f <$> pure x = pure (f x)
2013-09-03 18:36:11	ParahSailin	bytes for harddrive manufacturers is only 7.96 bits
2013-09-03 18:36:12	doomlord	byte  means 8bits for such a large % of software that other uses should be renamed :) i'm happy to lose char
2013-09-03 18:36:15	merijn	eevar: The nicer solution would be to use non-blocking calls and block inside the runtime, but if you can't then blocking is ok
2013-09-03 18:36:17	erisco	well b8 or bit8 then
2013-09-03 18:36:26	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-03 18:36:42	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:36:43	ParahSailin	> log 250 / log 2
2013-09-03 18:36:44	lambdabot	  7.965784284662087
2013-09-03 18:36:55	eevar	merijn: i'm receiving EINTR from somewhere. did find a workaround, using threadWaitRead/Write, but I'd like to know what is actually going on
2013-09-03 18:36:56	merijn	eevar: safe/unsafe informs the runtime whether it should consider functions to be "side-effecting" one of the two (I forget which) treats a function as pure and may result in less overhead when calling it
2013-09-03 18:37:02	Saizan	fizbin: in the end that's (a (b st) <$> d)
2013-09-03 18:37:02	<--	boothead (~ben@109.204.60.110) has quit (Ping timeout: 256 seconds)
2013-09-03 18:37:02	joelteon	> log 256 / log 2
2013-09-03 18:37:03	lambdabot	  8.0
2013-09-03 18:37:03	quchen	7.87! ParahSailin, don't try to fool us!
2013-09-03 18:37:04	doomlord	u8 s8  int8 i guess these are all same or less chars to write out
2013-09-03 18:37:20	quchen	(And that should've been a 9 there.)
2013-09-03 18:37:23	merijn	eevar: EINTR happens if you make a blocking OS call and the process receives a posix signal
2013-09-03 18:37:24	levi	erisco: If you look back at computing history, you'll see that the near-universal 8-bitness of bytes is a somewhat recent thing.
2013-09-03 18:37:26	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Client Quit)
2013-09-03 18:37:28	-->	joehillen (~joe@38.104.125.2) has joined #haskell
2013-09-03 18:37:30	<--	shepheb (~bsshephe@bas1-jockvale05-3096539193.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-09-03 18:37:33	<--	mumps_ (c05c5e17@gateway/web/freenode/ip.192.92.94.23) has quit (Quit: Page closed)
2013-09-03 18:37:35	fizbin	Saizan: Yeah, that's what I started with...
2013-09-03 18:37:36	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-03 18:37:51	merijn	eevar: I think the runtime uses SIGALRM for scheduling? (not 100% sure), the delivery of SIGALRM might interrupt blocking OS calls
2013-09-03 18:37:52	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:37:58	levi	erisco: Also, you should not confuse 'the majority of PC software' with 'the majority of software'.
2013-09-03 18:37:59	geekosaur	yes
2013-09-03 18:38:09	<--	tibbe (tibbe@nat/google/x-hcngnjutnbisbggi) has quit (Quit: tibbe)
2013-09-03 18:38:10	lpaste	oio pasted “Helo with thus” at http://lpaste.net/92520
2013-09-03 18:38:17	merijn	eevar: Any other signals like SIGINT, SIGUSR1/2, etc can do the same
2013-09-03 18:38:25	_oio_	someone help me with that ?
2013-09-03 18:38:35	levi	There's a *lot* of code written for embedded systems, where hardware varies a lot more than it does in PCs.
2013-09-03 18:38:43	merijn	eevar: That's basically the smae behaviour as you'd get when writing plain C
2013-09-03 18:38:50	<--	amathew1 (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-09-03 18:38:58	eevar	merijn: think my strace contains a SIGVTALRM before the EINTR, yea
2013-09-03 18:39:08	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-03 18:39:10	<--	FZ (23093dcb@gateway/web/freenode/ip.35.9.61.203) has quit (Quit: Page closed)
2013-09-03 18:39:21	Eduard_Munteanu	Hm... if a function takes Map A B it's guaranteed the A's are unique. If it takes Map A B and Map B C then A's are unique and the B's in the second map are unique. Any way to get A's and B's completely unique? Map A (Map B C) doesn't cut it.
2013-09-03 18:39:21	merijn	eevar: Well, there you go, then. The EINTR is a kernel thing, not a runtime thing
2013-09-03 18:39:28	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Client Quit)
2013-09-03 18:39:33	quchen	_oio_: What do you want your program to do, what is the program output, what do you expect that snippet to do?
2013-09-03 18:39:48	<--	xcthulhu (~xcthulhu@c-98-220-235-232.hsd1.il.comcast.net) has quit (Quit: xcthulhu)
2013-09-03 18:39:50	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:40:01	eevar	merijn: okies, thanks
2013-09-03 18:40:03	quchen	Don't call your variables "nm" because that's not very easy to read ;-)
2013-09-03 18:40:10	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-03 18:40:14	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 240 seconds)
2013-09-03 18:40:28	_oio_	take random names from the tree
2013-09-03 18:40:47	-->	Ralith (~ralith@66.114.129.162) has joined #haskell
2013-09-03 18:40:48	merijn	I'm guessing this can stack overflow due to the lack of tail recursion: http://lpaste.net/92519 is there a nice way to make it tail recursive?
2013-09-03 18:40:57	merijn	eevar: For more details you might wanna read up on posix signals
2013-09-03 18:40:58	Eduard_Munteanu	Hm, I wonder about. Map (Map A B) C
2013-09-03 18:41:06	merijn	eevar: And/or interruptible system calls
2013-09-03 18:41:08	-->	pavonia (~user@p5B14CDBE.dip0.t-ipconnect.de) has joined #haskell
2013-09-03 18:41:37	Zenol	merijn: getMessage :: [Message] -> Get Message ?
2013-09-03 18:41:49	eevar	merijn: it is kindof runtime related too, though, if the runtime depends on signals for scheduling?
2013-09-03 18:42:02	quchen	_oio_: That answers (presumably) one of my questions.
2013-09-03 18:42:09	quchen	There are two more.
2013-09-03 18:42:09	Eduard_Munteanu	Map A B is unique and A is unique, so B should be too. Well, assuming there's is a suitable and compatible Ord on maps.
2013-09-03 18:42:37	Zenol	merijn: err, Message -> Get Message,  and return $ getMessage (Message (val:ms) m) ?
2013-09-03 18:42:40	Eduard_Munteanu	Or maybe not. *overheats*
2013-09-03 18:42:47	-->	recycle_ (~recycle@198-24-198-253.static-ip.telepacific.net) has joined #haskell
2013-09-03 18:42:56	Zenol	merijn: And you can rename getMessage getMessageAux and getMessage = getMessageAux []
2013-09-03 18:42:59	merijn	Zenol: And where does ms come from there?
2013-09-03 18:43:22	merijn	Zenol: Your approach reverses the list ordering
2013-09-03 18:43:28	eevar	merijn: either way, thanks
2013-09-03 18:43:31	<--	talzeus (~studybot_@113.37.230.101) has quit (Read error: Connection reset by peer)
2013-09-03 18:43:32	merijn	Zenol: Or does an O(n) traversal of the list
2013-09-03 18:43:36	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 260 seconds)
2013-09-03 18:43:47	_oio_	quchen: is for study you have to remember the leafs of the branch
2013-09-03 18:43:53	merijn	eevar: Ok, a little bit of the runtime, then. But the runtime won't help you further understand how to deal with things ;)
2013-09-03 18:44:04	satc	How to convert unfoldrN :: Int -> (a -> Maybe (Word8, a)) -> a -> (ByteString, Maybe a) to unfoldrNM :: monad m => Int -> (a -> m (Maybe (Word8, a))) -> a -> m (ByteString, Maybe a)
2013-09-03 18:44:07	<--	sopvop (~lonokhov@213.170.88.43) has quit (Quit: Leaving.)
2013-09-03 18:44:17	Zenol	merijn: Oh. So concatenate at the over return, and just replace the second one by a getMessage call.
2013-09-03 18:44:22	_oio_	quchen: or the root of the branch
2013-09-03 18:44:24	Eduard_Munteanu	compare (M.fromList [(1, 'a')]) (M.fromList [(1, 'b')])
2013-09-03 18:44:27	Eduard_Munteanu	> compare (M.fromList [(1, 'a')]) (M.fromList [(1, 'b')])
2013-09-03 18:44:28	lambdabot	  LT
2013-09-03 18:44:52	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-03 18:45:03	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-03 18:45:05	merijn	Zenol: Yeah, but I was trying to figure out a nice way to do the concatenate
2013-09-03 18:45:07	Eduard_Munteanu	I guess that does.
2013-09-03 18:45:16	merijn	Zenol: I had an earlier attempt, but the code was horrifically unreadable
2013-09-03 18:45:37	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-03 18:45:43	-->	hiroakip (~hiroaki@37.83.34.4) has joined #haskell
2013-09-03 18:46:00	<--	kylcarte (~kcarter@66.165.63.38) has quit (Quit: Lost terminal)
2013-09-03 18:46:22	Eduard_Munteanu	Actually not really, a map could be different if only some components in the "codomain" match.
2013-09-03 18:46:47	skypers	hey
2013-09-03 18:46:54	Eduard_Munteanu	Hi, skypers.
2013-09-03 18:46:56	skypers	does someone can test something for me?
2013-09-03 18:47:04	skypers	I’d like to know if jhc’s worth to install
2013-09-03 18:47:08	quchen	_oio_: We don't understand what your program does or should do, and you haven't told us what the problem is. It's very hard to give good advice based on that.
2013-09-03 18:47:16	skypers	I write small executables
2013-09-03 18:47:22	Eduard_Munteanu	skypers: depends on your purpose
2013-09-03 18:47:23	skypers	and it’s a pity I can’t use Haskell
2013-09-03 18:47:27	-->	mmaruseacph42 (9e796b72@gateway/web/freenode/ip.158.121.107.114) has joined #haskell
2013-09-03 18:47:32	skypers	Eduard_Munteanu: I write 64k demo
2013-09-03 18:47:36	skypers	with GHC
2013-09-03 18:47:41	Eduard_Munteanu	skypers: you can do that
2013-09-03 18:47:42	monochrom	jhc is small. it should be worth to install.
2013-09-03 18:47:49	skypers	it’s just impossible to write an intro with it
2013-09-03 18:47:51	elliott	ajhc is more active than jhc proper these days, AIUI.
2013-09-03 18:47:51	skypers	seriously?
2013-09-03 18:48:00	skypers	I mean
2013-09-03 18:48:03	Eduard_Munteanu	skypers: mind GHC links things statically by default
2013-09-03 18:48:12	haasn	map (v:) . f . map tail -- can't this be done with lenses somehow?
2013-09-03 18:48:15	skypers	Eduard_Munteanu: I mean
2013-09-03 18:48:16	Eduard_Munteanu	With dynamic linking it should be a lot more reasonable.
2013-09-03 18:48:21	skypers	Eduard_Munteanu: yeah yeah but
2013-09-03 18:48:25	skypers	we need a RT lib
2013-09-03 18:48:36	skypers	for Haskell
2013-09-03 18:48:45	elliott	haasn: traverse._head or such
2013-09-03 18:48:54	Eduard_Munteanu	skypers: well you need a libc for C too, and that's big as well :)
2013-09-03 18:49:03	haasn	(note that (v:) . tail is an isomorphism here)
2013-09-03 18:49:12	skypers	yeah but libc is quite standard everywhere
2013-09-03 18:49:21	Eduard_Munteanu	Yeah.
2013-09-03 18:49:23	_oio_	quchen: takes a conceptual from a txt based on indentation converts that to Tree String from Data.Tree then it slects a random part from that tree the user has guess the leafs of the bracnh asked or the root of that branch
2013-09-03 18:49:26	<--	Vendethiel (~Vendethie@172.102.116.78.rev.sfr.net) has quit (Quit: q+)
2013-09-03 18:49:29	skypers	the programs I wrote MUST be usable on a freshly installed OS
2013-09-03 18:49:33	haasn	elliott: well traverse._tail would do it if it was ‘map f’ and not f
2013-09-03 18:49:37	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 18:49:37	haasn	elliott: maybe partsOf (traverse._tail)
2013-09-03 18:50:04	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-03 18:50:09	haasn	yeah, indeed that's it
2013-09-03 18:50:15	merijn	Zenol: I guess my question can be generalised to "how do I use monadic actions to tail recursively build a list without my coding becoming unreadable?"
2013-09-03 18:50:19	skypers	Eduard_Munteanu: if ajhc adds a huge runtime library, it’s not worth it :(
2013-09-03 18:50:21	<--	RoXtein (~roxtein@di18.di.fct.unl.pt) has quit (Quit: Leaving)
2013-09-03 18:50:29	skypers	I want static linking, but small one
2013-09-03 18:50:30	Eduard_Munteanu	skypers: that sort of excludes Haskell solely on the reason it's not popular, because people don't complain about the Python interpreter being too big :)
2013-09-03 18:50:39	skypers	yeah
2013-09-03 18:51:09	elliott	ajhc makes small standalone executables, is my understanding
2013-09-03 18:51:11	elliott	but you should try it
2013-09-03 18:51:28	Eduard_Munteanu	JHC might do that but mind performance isn't on par with GHC by a long shot, IIRC.
2013-09-03 18:52:15	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-03 18:52:15	<--	Freddy___ (53e3116f@gateway/web/freenode/ip.83.227.17.111) has quit (Ping timeout: 250 seconds)
2013-09-03 18:52:15	skypers	what do you mean?
2013-09-03 18:52:21	Zenol	merijn: they should be a datastructur wich allow "pushing on the tail" and can be easily converted to list, no?
2013-09-03 18:52:24	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-03 18:52:25	skypers	GHC is far away better in term of perf?
2013-09-03 18:52:38	-->	ecr (~Thunderbi@2620:101:8003:200:15a1:db72:d03e:153d) has joined #haskell
2013-09-03 18:52:41	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-03 18:52:42	Eduard_Munteanu	skypers: AFAIR it's the only option if you care a bit about speed :)
2013-09-03 18:52:43	lpaste	Zenol annotated “Tail recursion?” with “Tail recursion? (annotation)” at http://lpaste.net/92519#a92521
2013-09-03 18:52:54	skypers	arf
2013-09-03 18:52:56	<--	hiroakip (~hiroaki@37.83.34.4) has quit (Ping timeout: 260 seconds)
2013-09-03 18:52:56	skypers	:)
2013-09-03 18:52:57	Zenol	merijn: Is it still the same function?
2013-09-03 18:52:59	Eduard_Munteanu	Which may or might not be a problem.
2013-09-03 18:53:04	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-03 18:53:05	Eduard_Munteanu	*may not
2013-09-03 18:53:22	Eduard_Munteanu	skypers: what is your application?
2013-09-03 18:53:31	skypers	Eduard_Munteanu: a 64k intro
2013-09-03 18:53:32	joelteon	what happens if you install two libraries that provide the same module?
2013-09-03 18:53:33	skypers	I’m a demomaker
2013-09-03 18:53:36	skypers	for now
2013-09-03 18:53:39	skypers	I use C++
2013-09-03 18:53:45	skypers	sometimes ASM
2013-09-03 18:53:47	Eduard_Munteanu	skypers: mm, does it involve fancy graphics or... ?
2013-09-03 18:53:52	skypers	yeah
2013-09-03 18:54:06	skypers	and music :)
2013-09-03 18:54:11	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:54:11	<--	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-03 18:54:14	skypers	I wrote two ones
2013-09-03 18:54:15	monochrom	joelteon: you will get ambiguity. unless you use options to tell ghc or ghci to suppress one library
2013-09-03 18:54:19	DaveS	Ahh good ol demoscene
2013-09-03 18:54:24	skypers	2 minutes long
2013-09-03 18:54:28	skypers	40kB
2013-09-03 18:54:29	<--	davean (~davean@vervet.isomerica.net) has quit (Ping timeout: 248 seconds)
2013-09-03 18:54:40	skypers	so well
2013-09-03 18:54:44	monochrom	skypers: please press enter less often
2013-09-03 18:54:46	skypers	I’d love to write my intro in Haskell
2013-09-03 18:54:50	skypers	(yeah sorry)
2013-09-03 18:55:01	skypers	but Haskell runtime is far away to heavy for such a task
2013-09-03 18:55:04	DaveS	Haskell not really a good platform for that
2013-09-03 18:55:05	lpaste	haasn pasted “Radix sort with lenses” at http://lpaste.net/92522
2013-09-03 18:55:14	-->	xcthulhu (~xcthulhu@wireless-165-124-128-66.nuwlan.northwestern.edu) has joined #haskell
2013-09-03 18:55:19	skypers	DaveS: unfortunately yeah…
2013-09-03 18:55:21	-->	mobileblue (~mobileblu@dslb-094-217-243-017.pools.arcor-ip.net) has joined #haskell
2013-09-03 18:55:41	-->	etehtsea (~kes@188.134.44.6) has joined #haskell
2013-09-03 18:55:45	DaveS	Isn't the whole point of 64k intros to carefully craft each instruction or somesuch
2013-09-03 18:55:48	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-09-03 18:55:51	-->	davean (~davean@vervet.isomerica.net) has joined #haskell
2013-09-03 18:56:02	<--	nominolo_ (~nominolo@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-09-03 18:56:09	merijn	Zenol: Yeah, I guess I was hoping to do it without the reverse, though. OTOH, it might just not matter
2013-09-03 18:56:09	skypers	DaveS: kinda, but mor
2013-09-03 18:56:09	skypers	e
2013-09-03 18:56:10	erisco	this criterion library is buggy as all get out mang
2013-09-03 18:56:12	haasn	oh, the first case is unnecessary, neat
2013-09-03 18:56:17	<--	cronject (~cronject@46.7.62.22) has quit (Read error: Connection reset by peer)
2013-09-03 18:56:18	<--	jff (~jff@152.105.135.215) has quit (Ping timeout: 256 seconds)
2013-09-03 18:56:26	Zenol	merijn: For the revers, I think you can use something else than list, and then use romList
2013-09-03 18:56:29	Eduard_Munteanu	skypers: lines count is a better and probably more fair target for just about any high-level language, rather than code size per se.
2013-09-03 18:56:32	merijn	Zenol: I'll just use the reverse one until I get around to benchmarking, I guess
2013-09-03 18:56:42	-->	markcw (~jack@128.135.100.110) has joined #haskell
2013-09-03 18:56:52	<--	agumonkey (~agu@253.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-09-03 18:56:54	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-03 18:56:57	<--	jrajav (~jrajav@198.179.137.12) has quit (Quit: phunq, sandwich store loop, WHAT NO UNIVERSE)
2013-09-03 18:57:04	skypers	Eduard_Munteanu: sure
2013-09-03 18:57:06	skypers	but heh
2013-09-03 18:57:10	skypers	I don’t make rules :)
2013-09-03 18:57:16	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-03 18:57:16	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-03 18:57:19	merijn	anyhoo
2013-09-03 18:57:21	merijn	time to go home
2013-09-03 18:57:25	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-03 18:57:38	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-03 18:57:52	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-03 18:58:04	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-03 18:58:10	lpaste	haasn annotated “Radix sort with lenses” with “Radix sort with lenses (annotation)” at http://lpaste.net/92522#a92523
2013-09-03 18:58:15	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-09-03 18:58:20	-->	tibbe (tibbe@nat/google/x-mkxbhacooggmyajt) has joined #haskell
2013-09-03 18:58:21	Eduard_Munteanu	skypers: there's 'atom' which can be used to generate C code for embedded targets. Perhaps you can approach it that way.
2013-09-03 18:58:22	haasn	there, much cleaner. :) could be a one-liner if it fit into 80col
2013-09-03 18:58:40	skypers	EvilPenguin: Haskell to C ?
2013-09-03 18:58:49	-->	CatMtKing (~CatMtKing@ed-uluka.dyn.ucr.edu) has joined #haskell
2013-09-03 18:58:52	Eduard_Munteanu	I guess you meant Eduard_Munteanu.
2013-09-03 18:58:56	skypers	yeah sorry :D
2013-09-03 18:58:59	Eduard_Munteanu	skypers: yes
2013-09-03 18:59:00	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-03 18:59:02	<--	blebla (~blebla@77-58-38-133.dclient.hispeed.ch) has quit (Quit: WeeChat 0.3.8)
2013-09-03 18:59:04	EvilPenguin	skypers: yes
2013-09-03 18:59:05	Zenol	aren't they any "reversed list" data structure in haskell? Something you append at the end, and that can be converted to a list efficiently ?
2013-09-03 18:59:10	Eduard_Munteanu	Heh.
2013-09-03 18:59:14	skypers	I’ll look forward for it for sure!
2013-09-03 18:59:21	skypers	Zenol: DList
2013-09-03 18:59:22	Eduard_Munteanu	Zenol: Seq
2013-09-03 18:59:31	skypers	Data.DList
2013-09-03 18:59:35	Eduard_Munteanu	Zenol: also a plain list
2013-09-03 18:59:39	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-03 18:59:44	Eduard_Munteanu	Zenol: reversing it once isn't a big deal
2013-09-03 18:59:58	skypers	Eduard_Munteanu: plain list are not the correct approach for that
2013-09-03 19:00:05	skypers	difference lists are
2013-09-03 19:00:07	skypers	so, DList
2013-09-03 19:00:10	Eduard_Munteanu	You can cons to it normally so it doesn't take the penalty every time.
2013-09-03 19:00:15	elliott	reversing a list is fine
2013-09-03 19:00:19	elliott	as long as you don't do it much.
2013-09-03 19:00:33	-->	Driscoll (~ben@199.21.234.7) has joined #haskell
2013-09-03 19:00:37	haasn	DList is when you need to be able to append to either side efficiently
2013-09-03 19:00:44	haasn	is useful*
2013-09-03 19:00:45	skypers	Zenol: http://hackage.haskell.org/packages/archive/dlist/0.3/doc/html/Data-DList.html
2013-09-03 19:00:52	Eduard_Munteanu	Sort of what Seq does too.
2013-09-03 19:00:58	skypers	:)
2013-09-03 19:01:01	<--	croyd (~croyd@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-03 19:01:01	DaveS	Is DList like a doubly-linked list?
2013-09-03 19:01:02	Eduard_Munteanu	(which is a tree in fact)
2013-09-03 19:01:06	Eduard_Munteanu	No.
2013-09-03 19:01:08	skypers	no
2013-09-03 19:01:09	<--	reactormonk (~reactormo@70.114.140.168) has left #haskell ("WeeChat 0.4.0")
2013-09-03 19:01:14	haasn	no, DList is like a list with all the (++) associated to the right
2013-09-03 19:01:18	<--	akurei (~akurei@lak-31-107.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 264 seconds)
2013-09-03 19:01:21	skypers	it’s just a way to get a O(1) (++)
2013-09-03 19:01:23	haasn	DList a = [a] -> [a]
2013-09-03 19:02:05	haasn	roughly speaking
2013-09-03 19:02:17	haasn	toList $ (fromList a ++ fromList b) ++ fromList c
2013-09-03 19:02:21	haasn	= a ++ (b ++ c)
2013-09-03 19:02:23	-->	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has joined #haskell
2013-09-03 19:02:45	skypers	isn’t it something like
2013-09-03 19:02:53	skypers	toList l = l []
2013-09-03 19:03:02	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 248 seconds)
2013-09-03 19:03:08	haasn	yes
2013-09-03 19:03:13	<--	kitallis (~kitallis@122.178.211.105) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-03 19:03:14	skypers	so tricky :)
2013-09-03 19:03:16	haasn	and fromList = (++)
2013-09-03 19:03:29	haasn	with (++) for DList being (.)
2013-09-03 19:03:31	ParahSailin	@src Dlist
2013-09-03 19:03:31	lambdabot	Source not found. There are some things that I just don't know.
2013-09-03 19:03:36	-->	james-ubc (~james@dhcp-206-87-197-245.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-03 19:04:06	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-03 19:04:19	arkeet	@hoogle dlist
2013-09-03 19:04:20	lambdabot	Text.Html dlist :: Html -> Html
2013-09-03 19:04:20	lambdabot	Text.XHtml.Strict dlist :: Html -> Html
2013-09-03 19:04:20	lambdabot	Text.XHtml.Frameset dlist :: Html -> Html
2013-09-03 19:04:23	arkeet	:|
2013-09-03 19:04:25	arkeet	@hoogle DList
2013-09-03 19:04:25	lambdabot	Text.Html dlist :: Html -> Html
2013-09-03 19:04:26	lambdabot	Text.XHtml.Strict dlist :: Html -> Html
2013-09-03 19:04:26	lambdabot	Text.XHtml.Frameset dlist :: Html -> Html
2013-09-03 19:04:41	-->	__userna1 (~test@vpn-na-east.corp.salesforce.com) has joined #haskell
2013-09-03 19:05:22	haasn	@hackage dlist
2013-09-03 19:05:22	lambdabot	http://hackage.haskell.org/package/dlist
2013-09-03 19:05:25	Zenol	Both Sequence and DList provide snoc / |>. So, which one would be better (used as snoc snoc snoc toList) than only one reverse? (none? ^^)
2013-09-03 19:05:33	<--	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has quit (Ping timeout: 245 seconds)
2013-09-03 19:05:51	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Ping timeout: 260 seconds)
2013-09-03 19:05:54	<--	egork8n (~egor.kuro@77.232.56.194) has quit (Quit: Leaving.)
2013-09-03 19:06:02	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-09-03 19:06:06	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-03 19:06:08	erisco	never mind.... can't get this bench marking library to stay stable long enough to get any results
2013-09-03 19:06:45	<--	ts33kr (~ts33kr@193.34.60.110) has quit (Quit: Computer has gone to sleep.)
2013-09-03 19:06:45	<--	__username__ (~test@vpn-na-east.corp.salesforce.com) has quit (Ping timeout: 248 seconds)
2013-09-03 19:06:53	 *	arnsholt had to look up what snoc does *hangs head*
2013-09-03 19:07:01	arnsholt	Obvious, in retrospect
2013-09-03 19:08:06	yitz	arnsholt: even more obvious in tcepsorter.
2013-09-03 19:08:26	quchen	Zenol: DList works fairly well when you want a list, and the write/read phases are clearly separated.
2013-09-03 19:08:35	quchen	Zenol: Also it's just a lot simpler than Sequence.
2013-09-03 19:09:12	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-03 19:09:18	-->	vk (~chatzilla@12.248.108.202) has joined #haskell
2013-09-03 19:09:26	<--	hsyl20 (~shenry@193.50.110.239) has quit (Read error: Operation timed out)
2013-09-03 19:09:42	<--	diadara (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-03 19:10:04	<--	vk (~chatzilla@12.248.108.202) has quit (Remote host closed the connection)
2013-09-03 19:10:08	<--	skchrko (~sk@109.110.72.216) has quit (Quit: Leaving)
2013-09-03 19:10:18	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Quit: This computer has gone to sleep)
2013-09-03 19:10:23	<--	xcthulhu (~xcthulhu@wireless-165-124-128-66.nuwlan.northwestern.edu) has quit (Quit: xcthulhu)
2013-09-03 19:10:24	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-03 19:10:25	<--	Guest98659 (Biohazard@biohazard.tropicraft.net) has quit (Ping timeout: 245 seconds)
2013-09-03 19:10:57	<--	OlegYch (~OlegYch@86.57.158.170) has quit (Ping timeout: 268 seconds)
2013-09-03 19:11:07	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-03 19:11:44	<--	tdammers (~tobias@unaffiliated/tdammers) has quit (Quit: leaving)
2013-09-03 19:12:23	--	wontez is now known as thr33strikes
2013-09-03 19:12:32	tisaro	Is it possible to tell if a network handle needs Windows-style newlines?
2013-09-03 19:13:35	-->	tdammers (~tobias@unaffiliated/tdammers) has joined #haskell
2013-09-03 19:13:46	lpaste	oio pasted “How can i make a tree out of this” at http://lpaste.net/92524
2013-09-03 19:13:59	thr33strikes	Is it possible to filter getDirectoryContents?
2013-09-03 19:14:04	-->	saep1 (~saep@p5B2A08F1.dip0.t-ipconnect.de) has joined #haskell
2013-09-03 19:14:40	tisaro	If that was directed at me, I'm afraid I don't see what the two have in common.
2013-09-03 19:14:48	-->	vk (~chatzilla@12.248.108.202) has joined #haskell
2013-09-03 19:14:56	 *	hackagebot http-conduit 1.9.4.5 - HTTP client package with conduit interface and HTTPS support.  http://hackage.haskell.org/package/http-conduit-1.9.4.5 (MichaelSnoyman)
2013-09-03 19:15:01	geekosaur	fmap a filter function over it?
2013-09-03 19:15:25	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-03 19:15:37	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-03 19:15:37	thr33strikes	geekosaur: was that response for me?
2013-09-03 19:15:44	geekosaur	yes
2013-09-03 19:15:49	<--	mno2 (~mno2@1.34.43.236) has quit (Client Quit)
2013-09-03 19:15:54	thr33strikes	ok I'll give it a try
2013-09-03 19:15:56	thr33strikes	thanks
2013-09-03 19:16:06	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-03 19:17:16	-->	elediaz_ (~quassel@90.173.201.101) has joined #haskell
2013-09-03 19:17:29	<--	quchen (~quchen@p54AA0E93.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-03 19:17:36	-->	mr413 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-09-03 19:18:47	mr413	Hello. I have a function f :: RegExp -> RegExp -> Maybe String, that takes two regexps and returns a string, that is valid for both regexps, or nothing. Any suggestions?
2013-09-03 19:19:00	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-03 19:19:33	<--	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:5d83:cba9:519e:a2fe) has quit (Remote host closed the connection)
2013-09-03 19:19:52	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-03 19:20:00	<--	dkordic (~danilo@93-87-124-217.dynamic.isp.telekom.rs) has quit (Quit: Ex-Chat)
2013-09-03 19:20:17	Ankhers	Is it returning the entire string, or just a subset of it based on the regex?
2013-09-03 19:20:23	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-03 19:20:24	<--	Driscoll (~ben@199.21.234.7) has quit (Remote host closed the connection)
2013-09-03 19:20:27	-->	litherum1 (~Adium@99-100-26-128.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-03 19:20:28	satc	Is there any advantage of using Builder to Build Strict ByteString from Building a list and then packing?
2013-09-03 19:20:38	geekosaur	you have, or you want someone to write for you? and had you considered that the general case is not actually possible?
2013-09-03 19:20:41	mr413	Ankhers: entire string
2013-09-03 19:20:47	<--	Targen (~iguana@190.38.144.87) has quit (Ping timeout: 260 seconds)
2013-09-03 19:20:52	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-03 19:21:07	mr413	geekosaur: I want to get some ideas, how to do that
2013-09-03 19:21:15	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 260 seconds)
2013-09-03 19:21:45	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-03 19:21:46	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-09-03 19:22:13	thr33strikes	geekosaur:  fmap and map are interchangeable right?
2013-09-03 19:22:31	geekosaur	not 100%, no; fmap is more general
2013-09-03 19:22:40	mr413	geekosaur: yes, i know about the halting problem
2013-09-03 19:22:59	--	irc: disconnected from server
2013-09-07 03:59:51	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-07 03:59:51	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-09-07 03:59:51	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-09-07 03:59:51	--	Nicks #haskell: [@Cale @ChanServ [[zzz]] [JJ]Albert [swift] \q ]OLI[ _1126 __main__ _br_ _d3f _flow_ _janne _justjust `0660 `^_^v `bps a11235 ab9rf absence acfoltzer acowley Adeon adimit Adios adlan_ adnap aess aford aforemny AgentM agumonkey agundry ahf ahihi ahill-89 akahn akamch_` akiress akraut akurei__ aleator alej alexander__b AleXoundOS alexsdutton AlexWebr aloiscochard alpounet alszar alvdav Amadiro amatsu amosr anachron AnalogFile andares anders^^ andrewsw anhall aninhumer AntiSpamMeta aoh apaku Apocalisp apples araujo arbn arbn1 arcatan aristid arkeet arkx arlinius arnsholt artyomkazak asante asjo Asterfield aszlig Athas averell axiom b0c1 b2coutts b52 b_jonas banannagram banjiewen banseljaj barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ bduc beckerb Beetny Belgarion0 benmachine bens bentrevor bergmark Betal betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitraten blast_hardcheese BlastHardcheese Blkt blz37 BMeph bobry bobthenameless boegel|work bogner bogner_ bondar Boney Boreeas bqp brainproxy Brando753 brandonw brendan brett BrianHV brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild_ bxc Bynbo7 byorgey ByronJohnson bytbox c_14 c_wraith cads cajla caligula callen canissimia canta CaptainK CaptainLex carter ccasin ccxCZ cdidd cdk cdxr Cerise charlesofarrell_ chaterz chatsiri_ cheezey chexxor chexxor_netbook chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdotcode_ chrisyoung chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus Clint clog cmsd2 codesoup CODEtaku cods cognominal__ colah companion_cube confound copton copumpkin CosmicRay Counter-Strike Cromulent cronject cross crs_ cruxeternus Cryovat cschneid cynick cyphase d-snp d3lxa dabradley dacc dan64 danharaj daniel-s_ danr dario^CIP DarkNFoxy Dashkal davean davidt davorak dcoutts ddinh de-Vri-es deavid Deewiant def-lkb deggis demolithion dennylin93 Desheng3 destiny dexter2 DexterLB dgpratt DigitalKiwi dilinger_ divarvel dixie djahandarie dju dkordic dlundy dmp1ce Dodek dogmaT doomlord_ doshitan dpwright dqd Draconx|Laptop Draggor DrCode drdo drewr DRiKE drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dysinger eacameron1 earthy eataix eb4890 eci ecube edk Edoxile edwtjo eevar effy ehamberg ehd ejls eL_Bart0 electrogeek elgot Eliel Elision elliott ellipsis em Enigmagic ent enthropy epsylon epta ericmathison ericmj Eridius|korea ernst Erstarrung estultic1a etabot etrepum Excedrin Excureo eyck Ezku f8l fabjan FalconKirtaran2 fall_ farn favonia felipe_ felipecortez fergusnoble fiddlerwoaroof fijimunk1i fikusz fimad finishingmove finnrobi FireFly fixme fizruk flazz_gone floatingman flori_ flux fmapE fosky foxnorth fran FreakyPe1guin FreeFull frontendloader froztbyte fryguybob fser ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind gbarboza gbeshers gdeest gds geal geekosaur gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 gnoel Gothmog_ go|dfish gpampara_off Gracenotes grazs gridaphobe gseitz gthorslund guampa Guest2098 Guest66650 Guest96413 Gunni gusto guymann haasn hackagebot Hafydd hamilyon hamishmack hape01 Hardolaf hc heath Heffalump heikkih helgikrs hellome hfaafb hiptobecubic hiratara hiredman hiroakip hive-mind hiyakashi hkj Hodapp horlicks hpaste hpc hpd hvr ibab ibid IbnFirnas ibotty Iceland_jack identity idnar ido idoru iemejia iemejia_ Igloo ihm1 Ikarus inarru inr int-e integral Internet13 ion ipuustin ircbrowse iron_houzi ISF ismlages isomorphic isomorphismes iulian ivan\ ivan` j2j Jaak jack_rabbit jackhill jaepark jaimef jamesaanderson jamwt jang janiczek_ janinge jascase901 jaspervd1 javax Jaxan jayne jb55 jbauman_ jcp jdoliner jeff_s1 Jello_Raptor Jesin JesuZ jfischoff jhh jix jkoppel jkpl jlamothe jlewis jliikka jlouis jmcarthur jmct jml joachifm joaopizani joar JobV jodaro joe9 joefiorini joelteon joeyh johnbender johnw joneshf-laptop joneshf-work jonke Jonno_FTW jonsmock jonsterling joogi jophish JPohlmann jrd0 jrib jroesch jrslepak jssanders julmae junsuijin juuhaa jyyou jzelinskie k00mi k0ral k4nar Kabaka kakos KaneTW kaol katis kav kaw kcj Ke kekimmo Kelet kennyp kerrick kevinqcs kfreds Khady Khisanth killy9999 kini kinigitz Kinnison KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knyppeldynan knz koala_man kobain Kobata_ kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft ksf kshannon_ kstuart ktosiek Kuraitou kxra KyleCloud lahwran lambdabot lambdaTerrorist Laney latro`a_ lattenwald Lefeni leifw lemao Lemmih lenstr leroux levi Licenser lieven_ lightquake linduxed linux_noob_666 liori Liskni_si lispy liszt liyang lokydor lopex lpsmith luite lukexi lulf lunarjar M-ou-se m0g machisuji machisuji_ macron magicman Maior mak` Makoryu maksbotan malorie_ mami mannyv mantovani maoe mapour marienz markov_twain Martty MasseR matson matthavener mattp_ mattswe mauke mavam Maxdamantus Mayzie mbrock McManiaC mechairoi MedDev mee mel- melter mena mendez mephx meretrix mero MetaCosm mgaare mgsloan miasma michael__ mietek mike2 mikecaruso mikeplus64 milessabin milli mimi_vx mimico__ minimalis mirsal mischov MitchW mixi mjo_ mjrosenb MK_FG mkiefel mkrull mlh mlinksva mm_freak mmaruseacph2 mmathis MoALTz mobileblue mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall mortberg Mortomes_ MouseTheLuckyDog Mowah mr- mrd MrFahrenheit mrkotfw mroman mrowe_away mrpantoufle MrRacoon mrshoe MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4_ mxf myme n-dolio n00dle Nahra nanothief nasarde Natch natte ndngvr NeatBasis necroyeti neektza1 NemesisD neptunepink neurocyte newsham NiceOneBrah Nickeeh nicoo Nik05 nik_89 niko nikola nilsi Nimatek nimish ninegrid ninzine Nisstyre niteria nitin2 nkpart nlogax noam noddy2OOO Noldorin nominolo nooodl nopcode_ noplamodo notdan Nshag nullcone nuttycom nwf nxorg8 Obfuscate ocharles Odd_Bloke ofan og oldmanst1n OlegYch oleo onur opqdonut OrangeDu1k ormaaj Ornedan orospakr ortmage osa1 osfameron osnr othiym23 otterdam otto_s_ otulp ousado Pad^ paddymahoney palmje Paprikachu ParahSailin ParaSa1lin parcs_ path[l] pavonia paz pcapriotti peddie peltchu Pengoo perlite perspectival petanqk petantik pfoetchen phar pharaun phienone philipde` Philonous Phlogistique PHO_ phryk pi8027 pierreghz pikhq pjstadig plains Platyhelminth Plex- plhk plucas pnielsen Polarina pootler popx poucet pqmodn pr predator117 preflex profmakx prophile Proteumus prototrout ps-auxw Ptival purefn puzza007 pyrtsa pyykkis_ q66 Quadrescence quicksilver qwandor qz_ raft raichoo raid Ralith rasmusto Raynes Raynos Razz redjohn ReinH Reisen relrod Rembane RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi rnons robbert` robinbb rodrigovidal rpenguin rs0 Rutger` ryanakca s00pcan s4msung s4muel s_quark sababa SaBer saep saiam saiam^ Saizan sajith samrat satc satshaba1 satshabad saurik SBauer schlumpi_ schoppenhauer schroedinbug sclv sclv_ scolobb scottschecter scshunt seantallen SegFaultAX seggy segmond sellout- seynb sferry Sgeo sgso shachaf Shaladdle shanse shelf shennyg shepheb Shin-LaC shiona SHODAN Shou shrekster si14 simon SingingBoyo sipa SirChurchill sirspazzolot sj4nz skchrko ski skypers SLi slobo sm smarter smith_ smlgs so Soft sohum solancile solarus solirc sondove sordina SoupE sp3ctum Spaceghost spaceships Spockz squimmy srcerer srhb ssbr ssttudder Starfire_ startling stass statusfailed stelleg stepcut stepkut stevejb stiell stomp strax strmpnk structuralist stvc suiside sunfun Sunhay sunnavy SuperNoeMan supersym supki Svedrin swistak35 Swizec sxn tabemann tac tahu tamiko Tarential taruti tauli tauntaun tavelram taylorgb_ td123 tdammers TDJACR Tehnix tehroflmaoer Tekerson tel Tene tensorpudding tero- tertl3 Tesseraction tessier tew88- tg Th0mas The_third_man theDon theorbtwo TheRealPygo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice threedaymonk thunderrd tiffany tiksa timemage Tinned_Tuna tinyghost tippenein tko toltolt tomaw tomboy64 tomejaguar tomh- tomprince Tordek torkjak totte tov tpsinnem transfinite Tribal tridactyla trism tromp troydm tsou tudalex tulcod tunixman turnersr Twey twn tych0 tylergillies_ u_ udevd udoprog Ulrar upgrayeddd uu1101 uvelichitel valdyn Valodim vehk Veltas Vertue viktech vili visof vivekrai vmeson vnz vobi Vorpal Vq vsayer vvv wagle wak Walther warpy Watcher7 waterlaz watermind wchun weie_ whaletechno white-ribboner31 WhoD wilfredh willb1 Will| wollw wontez2 wormphlegm wting wto wunki xaimus xenophon xinming XMunkki_ xnyhps Xorlev xorox90 xplat xye xymox yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yfyf yogurt_truck yriw ystael ystael_ ysuzuki zacts zaiste zaphar_ps Zariel zarul zebr zeiris zenoli zenzike zero7 zerokarmaleft zeroXten ziman zoktar zomg zrot zw01 zxq9]
2013-09-07 03:59:51	--	Channel #haskell: 1102 nicks (2 ops, 0 halfops, 0 voices, 1100 normals)
2013-09-07 03:59:52	--	URL for #haskell: http://www.haskell.org/
2013-09-07 03:59:54	--	Mode #haskell [+CLcnpt]
2013-09-07 03:59:54	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-09-07 03:59:58	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-07 04:00:33	<--	ystael (~ystael@pool-108-20-254-6.bstnma.east.verizon.net) has quit (Disconnected by services)
2013-09-07 04:00:40	--	ystael_ is now known as ystael
2013-09-07 04:01:05	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Remote host closed the connection)
2013-09-07 04:01:59	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-07 04:02:10	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-07 04:02:21	hpaste	enthropy pasted “hopencv referential transparency breach?” at http://lpaste.net/92671
2013-09-07 04:02:58	enthropy	hmm, acowley is gone
2013-09-07 04:03:39	<--	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has quit (Remote host closed the connection)
2013-09-07 04:03:44	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 04:04:08	enthropy	but maybe somebody else can suggest why I am having repeated frames with that code
2013-09-07 04:04:22	-->	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has joined #haskell
2013-09-07 04:04:27	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Remote host closed the connection)
2013-09-07 04:04:44	-->	amathew (~Adium@141.sub-70-208-70.myvzw.com) has joined #haskell
2013-09-07 04:05:19	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-07 04:05:24	danilo2	Hi! How can I in Haskell use both IO and MaybeT monad? I want to do something like "runIO (runMaybeT f)". I simply want to use IO monad with other monad transformers in stack.
2013-09-07 04:05:26	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 04:05:47	copumpkin	there is no runIO
2013-09-07 04:05:55	copumpkin	MaybeT IO should be fine though
2013-09-07 04:06:13	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 04:06:27	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-09-07 04:07:08	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-07 04:07:38	<--	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Quit: WeeChat 0.4.1)
2013-09-07 04:07:38	-->	zarul[afk] (~zarul@175.142.180.80) has joined #haskell
2013-09-07 04:07:43	<--	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-07 04:07:54	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 240 seconds)
2013-09-07 04:08:14	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Disconnected by services)
2013-09-07 04:08:35	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 04:08:49	danilo2	copumpkin: Could you please look at this small example please?: http://lpaste.net/92673
2013-09-07 04:08:52	<--	chirpsalot (~Chirps@unaffiliated/chirpsalot) has quit (Ping timeout: 264 seconds)
2013-09-07 04:09:34	-->	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-07 04:09:46	<--	zarul[afk] (~zarul@175.142.180.80) has quit (Read error: Connection reset by peer)
2013-09-07 04:09:58	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-07 04:10:06	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-07 04:10:11	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-07 04:10:48	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-07 04:10:50	<--	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has quit (Ping timeout: 245 seconds)
2013-09-07 04:10:55	<--	uvelichitel (~uvelichit@37.73.214.108) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-07 04:11:35	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (Quit: Working as programmed)
2013-09-07 04:11:42	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-07 04:11:47	niteria	what are .p_o files?
2013-09-07 04:12:05	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-07 04:12:19	jmcarthur	niteria: they are for profiling
2013-09-07 04:12:19	startling	:t runMaybeT
2013-09-07 04:12:20	lambdabot	Not in scope: `runMaybeT'
2013-09-07 04:12:31	arkeet	@let import Control.Monad.Trans.Maybe
2013-09-07 04:12:32	lambdabot	 Defined.
2013-09-07 04:12:35	arkeet	:t runMaybeT
2013-09-07 04:12:35	lambdabot	MaybeT m a -> m (Maybe a)
2013-09-07 04:12:37	danilo2	startling: Control.Monad.Trans.Maybe
2013-09-07 04:12:41	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (Remote host closed the connection)
2013-09-07 04:12:56	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-07 04:13:09	danilo2	startling: its in mtl
2013-09-07 04:13:15	<--	amathew (~Adium@141.sub-70-208-70.myvzw.com) has quit (Quit: Leaving.)
2013-09-07 04:13:37	<--	NiceOneBrah (~niceonebr@173.247.206.226) has quit (Remote host closed the connection)
2013-09-07 04:13:53	startling	danilo2: I'm aware. I was showing you the type.
2013-09-07 04:14:09	-->	litherum (~Litherum@17.114.106.18) has joined #haskell
2013-09-07 04:14:13	startling	:t :t \x -> runMaybeT (x :: MaybeT IO Int)
2013-09-07 04:14:14	lambdabot	parse error on input `:'
2013-09-07 04:14:20	startling	:t \x -> runMaybeT (x :: MaybeT IO Int)
2013-09-07 04:14:20	lambdabot	MaybeT IO Int -> IO (Maybe Int)
2013-09-07 04:14:36	arkeet	:t runMaybeT `asAppliedTo` (undefined :: MaybeT IO Int)
2013-09-07 04:14:37	lambdabot	MaybeT IO Int -> IO (Maybe Int)
2013-09-07 04:14:50	<--	litherum (~Litherum@17.114.106.18) has quit (Client Quit)
2013-09-07 04:15:01	danilo2	lambdabot: Hm, ok, I'm testing it :)
2013-09-07 04:15:02	startling	:t asAppliedTo
2013-09-07 04:15:03	lambdabot	(a -> b) -> a -> a -> b
2013-09-07 04:15:34	--	Mortomes_ is now known as Mortomesleeping
2013-09-07 04:15:35	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Read error: Connection reset by peer)
2013-09-07 04:16:10	-->	zbcm (~zbcm@CPE-60-231-179-161.lns4.dav.bigpond.net.au) has joined #haskell
2013-09-07 04:16:11	<--	watermind (~wm@bl19-223-243.dsl.telepac.pt) has quit (Read error: Connection reset by peer)
2013-09-07 04:16:16	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 04:16:19	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-07 04:16:39	startling	danilo2, you could define runIO = id :: IO (Maybe a) -> IO (Maybe a) if you like. ;)
2013-09-07 04:16:44	<--	dgpratt (~dpratt71@pool-72-65-103-18.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-09-07 04:16:55	<--	geekosaur (allbery@dreamshell.ttuttle.net) has quit (Excess Flood)
2013-09-07 04:17:04	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 268 seconds)
2013-09-07 04:17:16	copumpkin	runIO = return . unsafePerformIO
2013-09-07 04:17:21	copumpkin	safe! >_>
2013-09-07 04:17:46	-->	geekosaur (allbery@dreamshell.ttuttle.net) has joined #haskell
2013-09-07 04:18:00	arkeet	<_<
2013-09-07 04:18:03	danilo2	startling, copumpkin - I'm trying to use it with runRWS and runMaybeT, maybe it will work :) Thank you :)
2013-09-07 04:18:08	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-07 04:18:08	thoughtpolice	kindaSortaMaybeSafeIO
2013-09-07 04:18:19	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-07 04:18:20	copumpkin	unsafeExtraleaveIO
2013-09-07 04:18:30	arkeet	unsafeLeaveIO
2013-09-07 04:18:34	startling	unsafePerformIO . return
2013-09-07 04:18:57	danilo2	but isnt unsafeperformio unsafe? :)
2013-09-07 04:19:24	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-07 04:19:28	startling	danilo2, we're joking around. sorry if that wasn't clear.
2013-09-07 04:20:00	<--	path[l] (~vsi@72.51.35.51) has quit (Ping timeout: 245 seconds)
2013-09-07 04:20:12	danilo2	startling: ah ok :) hehe :)
2013-09-07 04:20:13	Makoryu	Both mtl and transformers have ErrorT stuff
2013-09-07 04:20:19	Makoryu	Which makes actual sense to use?
2013-09-07 04:21:22	arkeet	neither. use EitherT instead.
2013-09-07 04:21:22	arkeet	;)
2013-09-07 04:21:27	startling	Makoryu, mtl just reexports transformers' stuff.
2013-09-07 04:21:33	Makoryu	startling: Gotcha
2013-09-07 04:21:37	startling	but yeah, EitherT is often what you want.
2013-09-07 04:21:44	<--	mobileblue (~mobileblu@dslb-188-098-123-025.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-07 04:21:46	Makoryu	What's the main difference
2013-09-07 04:21:56	Makoryu	I mean
2013-09-07 04:22:01	arkeet	ErrorT has an annoying Error constraint on the e type.
2013-09-07 04:22:03	startling	ErrorT needs an "Error" instance for any sanity
2013-09-07 04:22:05	Makoryu	Obviously ErrorT can have other implementations
2013-09-07 04:22:24	startling	and Error requires you to be able to make an error out of any string.
2013-09-07 04:22:35	startling	:t strMsg
2013-09-07 04:22:35	Makoryu	Control.Monad.Trans.Either?
2013-09-07 04:22:36	lambdabot	Error a => String -> a
2013-09-07 04:22:43	Makoryu	startling: I expected to be able to do that anyway
2013-09-07 04:22:45	arkeet	yes, from the either package.
2013-09-07 04:22:59	startling	Makoryu: ok! Then maybe ErrorT works fine for you.
2013-09-07 04:23:00	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 04:23:07	Makoryu	Hmm
2013-09-07 04:23:27	-->	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has joined #haskell
2013-09-07 04:23:36	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 04:23:49	danilo2	startling: I'm trying but cannot get it working (the IO stuff). Could you please look here and tell me - what should I change to make it working?: http://lpaste.net/92673
2013-09-07 04:23:53	startling	I wonder why ml does reexports like that.
2013-09-07 04:24:10	startling	(historical reasons, probably?)
2013-09-07 04:24:54	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-07 04:25:16	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-07 04:25:16	arkeet	hm.
2013-09-07 04:25:16	arkeet	EitherT should totally be a Bifunctor.
2013-09-07 04:25:16	arkeet	and so on.
2013-09-07 04:25:29	startling	danilo2: you might need to add a type signature for 'f'.
2013-09-07 04:25:40	-->	mobileblue (~mobileblu@dslb-188-098-116-041.pools.arcor-ip.net) has joined #haskell
2013-09-07 04:25:50	startling	danilo2: (btw, NoState is ())
2013-09-07 04:26:07	-->	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-07 04:26:11	-->	charliesome (~root@118.209.75.254) has joined #haskell
2013-09-07 04:26:40	startling	oh, no, I see.
2013-09-07 04:26:48	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 04:27:00	startling	you want a few lifts, or liftIO if the right instances exist (I forget whether they do)
2013-09-07 04:27:12	<--	ihm1 (~izzy@ip-64-134-45-10.public.wayport.net) has quit (Quit: ihm1)
2013-09-07 04:27:16	startling	before line 10, that is.
2013-09-07 04:27:59	-->	james-ubc (~james@dhcp-206-87-192-211.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-07 04:28:07	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-09-07 04:28:16	danilo2	startling: Thank you for the tip with NoState = (). hmm I'm trying with the lifts, but still no success :(
2013-09-07 04:28:47	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 245 seconds)
2013-09-07 04:29:03	startling	danilo2, import Control.Monad.IO.Class and try liftIO $ print "!!!"
2013-09-07 04:29:25	arkeet	maybe you need RWST.
2013-09-07 04:29:35	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-07 04:29:38	startling	oh, that too.
2013-09-07 04:29:42	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (Quit: Working as programmed)
2013-09-07 04:29:44	danilo2	arkeet: If I use RWST I would need something like runIO
2013-09-07 04:29:53	arkeet	you mean runRWST?
2013-09-07 04:29:55	startling	danilo2: no.
2013-09-07 04:30:01	startling	danilo2, oh
2013-09-07 04:30:05	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-07 04:30:10	startling	runIO while you're in IO is just >>=.
2013-09-07 04:30:18	danilo2	startling: I've imported used liftIO - still not working
2013-09-07 04:30:45	startling	danilo2, you also need (a, b, c) <- runRWST (runMaybeT f) 0 NoState on line 14
2013-09-07 04:31:00	startling	I guess "join" is runIO in this case.
2013-09-07 04:31:07	<--	ISF (~ivan@201.82.138.219) has quit (Ping timeout: 264 seconds)
2013-09-07 04:31:10	danilo2	startling: It works!
2013-09-07 04:31:15	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 04:31:19	startling	danilo2, do you understand why?
2013-09-07 04:31:19	danilo2	startling: hmm, but why we need liftIO there?
2013-09-07 04:31:31	startling	danilo2, because MaybeT is not IO.
2013-09-07 04:31:32	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-07 04:31:38	startling	well, MaybeT IO is not IO.
2013-09-07 04:31:44	danilo2	startling: yes, yes I see the point of using (a,b,c) <-  ... in IO Monad -its clear now to me
2013-09-07 04:31:51	arkeet	neither is RWST r w s (MaybeT IO)
2013-09-07 04:31:52	danilo2	a,b,c) <- : but i do not yet see the point of liftIO
2013-09-07 04:31:56	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-07 04:32:05	startling	danilo2, well, what's the type of 'f'?
2013-09-07 04:32:05	arkeet	print "!!!" has type IO ().
2013-09-07 04:32:13	arkeet	f cannot have type IO ().
2013-09-07 04:32:19	startling	:t liftIO
2013-09-07 04:32:20	lambdabot	MonadIO m => IO a -> m a
2013-09-07 04:32:30	danilo2	ah ok! thats clear :)
2013-09-07 04:32:35	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-07 04:32:36	danilo2	thank you for the help!
2013-09-07 04:32:38	arkeet	you should ask it ofr the type of f.
2013-09-07 04:32:54	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-07 04:32:54	arkeet	it's probably something like MaybeT (RWST Integer String NoState IO)
2013-09-07 04:32:59	arkeet	 ()
2013-09-07 04:33:06	arkeet	which is not IO ().
2013-09-07 04:33:29	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (Quit: Working as programmed)
2013-09-07 04:33:51	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-07 04:34:07	danilo2	arkeet, startling: but why print is defined like this? look - I can use "tell" without lift - and it works in both MaybeT, and RWST (and Writer of course).
2013-09-07 04:34:42	arkeet	well, sure, someone could have made it print :: (Show a, MonadIO m) => a -> m ()
2013-09-07 04:34:52	danilo2	arkeet, startling: or maybe my question was wrong - why we need to lift print if we do not need to lift f.e. tell ?
2013-09-07 04:34:53	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 04:35:06	startling	:t tell
2013-09-07 04:35:07	lambdabot	MonadWriter w m => w -> m ()
2013-09-07 04:35:09	startling	:t print
2013-09-07 04:35:11	lambdabot	Show a => a -> IO ()
2013-09-07 04:35:11	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-07 04:35:24	arkeet	the only reason I can think of for not making the type of something more general is because that usually makes type inference not work as nicely.
2013-09-07 04:35:28	startling	the dumb answer is "MonadIO is not in the Prelude and print is"
2013-09-07 04:35:36	arkeet	well, sure.
2013-09-07 04:35:41	danilo2	startling: so I understand the limitation is only the type in definition of print?
2013-09-07 04:35:49	startling	danilo2, well, the definition of print.
2013-09-07 04:36:08	danilo2	startling: ok, thank you :)
2013-09-07 04:36:11	<--	bytbox (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has quit (Ping timeout: 268 seconds)
2013-09-07 04:36:33	-->	bytbox (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has joined #haskell
2013-09-07 04:36:38	-->	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has joined #haskell
2013-09-07 04:37:04	<--	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has quit (Client Quit)
2013-09-07 04:37:23	-->	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has joined #haskell
2013-09-07 04:37:31	danilo2	startling: Ok one more simple question :D Is it ok to define my own print? Or it is something ugly :D (as print = liftIO . Prelude.print)?
2013-09-07 04:37:50	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Ping timeout: 240 seconds)
2013-09-07 04:37:52	startling	danilo2: no reason not to just use liftIO . print there, is there?
2013-09-07 04:38:34	danilo2	startling: maybe you're right, but it is not very elegant to me :)
2013-09-07 04:38:41	arkeet	http://www.reddit.com/r/haskell/comments/1jjkbr/is_there_any_reason_to_use_io_over_monadio_m_m/
2013-09-07 04:39:01	<--	Desheng3 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-07 04:39:26	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Client Quit)
2013-09-07 04:39:26	<--	nooodl (~nooodl@81.241.175.225) has quit (Ping timeout: 240 seconds)
2013-09-07 04:39:36	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-09-07 04:39:49	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-07 04:40:28	danilo2	arkeet: thanks :)
2013-09-07 04:40:52	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-07 04:41:37	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-07 04:41:51	-->	jens1 (~jens@177.137.140.2) has joined #haskell
2013-09-07 04:43:03	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 04:44:31	<--	jophish (500492a3@gateway/web/freenode/ip.80.4.146.163) has quit (Ping timeout: 250 seconds)
2013-09-07 04:46:38	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-07 04:47:03	CaptainK	@spell agnostic
2013-09-07 04:47:04	lambdabot	agnostic
2013-09-07 04:47:47	<--	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has quit
2013-09-07 04:48:38	startling	CaptainK, you should renick to Captainλx.λy.x
2013-09-07 04:48:42	<--	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 04:49:16	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 04:49:26	-->	slack1256 (~slack@181-160-193-224.baf.movistar.cl) has joined #haskell
2013-09-07 04:49:35	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-07 04:50:16	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-07 04:50:18	CaptainK	:P
2013-09-07 04:50:24	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-07 04:50:24	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-07 04:50:39	zomg	Oh, I did not know John Resig was a Haskeller
2013-09-07 04:50:54	zomg	This is assuming jeresig is the same person I'm thinking he is of course
2013-09-07 04:51:31	startling	I thought he was just a mod on every fricking subreddit
2013-09-07 04:51:31	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-07 04:51:39	zomg	That's possible too I guess =)
2013-09-07 04:52:17	-->	Doug201 (~Dogu201@cpe-72-229-63-216.nyc.res.rr.com) has joined #haskell
2013-09-07 04:53:30	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-07 04:54:57	-->	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-07 04:55:16	<--	Doug201 (~Dogu201@cpe-72-229-63-216.nyc.res.rr.com) has left #haskell
2013-09-07 04:56:07	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-09-07 04:56:44	<--	ddinh (~David@70.231.145.202) has quit (Ping timeout: 260 seconds)
2013-09-07 04:56:51	-->	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-09-07 04:57:10	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Ping timeout: 248 seconds)
2013-09-07 05:00:53	<--	tauli (~tauli@e182221028.adsl.alicedsl.de) has quit (Quit: tauli)
2013-09-07 05:01:20	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 05:01:33	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 05:01:45	-->	Philonous_ (~Philonous@dslb-178-000-236-076.pools.arcor-ip.net) has joined #haskell
2013-09-07 05:02:52	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-07 05:03:07	-->	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has joined #haskell
2013-09-07 05:03:31	<--	james-ubc (~james@dhcp-206-87-192-211.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-07 05:04:07	<--	mxc (~maxcan@204.14.159.15) has quit (Client Quit)
2013-09-07 05:04:21	<--	silasm (~silas@sjs-mh-wifi-1-1-lc-int.sjsu.edu) has quit (Quit: Leaving)
2013-09-07 05:04:33	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-07 05:04:37	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-07 05:04:54	<--	mxc (~maxcan@204.14.159.15) has quit (Client Quit)
2013-09-07 05:05:10	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Ping timeout: 240 seconds)
2013-09-07 05:05:23	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-09-07 05:05:42	<--	Philonous (~Philonous@dslb-088-072-071-231.pools.arcor-ip.net) has quit (Ping timeout: 248 seconds)
2013-09-07 05:06:21	-->	otto_s (~user@cotb-4d05bb97.pool.mediaWays.net) has joined #haskell
2013-09-07 05:07:40	Makoryu	Hmm
2013-09-07 05:07:42	Makoryu	@paste
2013-09-07 05:07:42	lambdabot	Haskell pastebin: http://lpaste.net/
2013-09-07 05:07:50	<--	turnersr (~turnersr@162.17.208.26) has quit (Quit: Leaving)
2013-09-07 05:07:56	-->	ddinh (~David@70.231.145.202) has joined #haskell
2013-09-07 05:08:05	<--	rnons (~rnons@183.152.60.69) has quit (Read error: Connection reset by peer)
2013-09-07 05:08:57	<--	mxc (~maxcan@204.14.159.15) has quit (Client Quit)
2013-09-07 05:09:35	<--	otto_s_ (~user@cotb-4db34bf9.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-09-07 05:10:27	hpaste	Makoryu pasted “No title” at http://lpaste.net/92678
2013-09-07 05:10:35	Makoryu	Is there a less terrible way to write this
2013-09-07 05:10:38	<--	jens1 (~jens@177.137.140.2) has quit (Quit: WeeChat 0.4.1)
2013-09-07 05:10:40	Makoryu	Or an existing function I should use
2013-09-07 05:11:03	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 260 seconds)
2013-09-07 05:11:26	-->	generic (~generic@p57B2C5FE.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 05:12:18	-->	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has joined #haskell
2013-09-07 05:13:43	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 05:14:36	<--	shanse (~generic@p57B2CC22.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-07 05:14:37	--	generic is now known as shanse
2013-09-07 05:14:48	-->	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 05:14:50	<--	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 05:15:05	-->	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 05:16:44	niteria	Makoryu: maybe some version of union can help you
2013-09-07 05:16:58	niteria	http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html#v:union
2013-09-07 05:17:18	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-07 05:17:20	Makoryu	Yeah... I'm trying to decide how I would put these to work
2013-09-07 05:18:15	-->	silasm (~silas@107.38.224.138) has joined #haskell
2013-09-07 05:19:04	<--	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 05:19:25	-->	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 05:20:34	-->	jgross_ (~jgross@dr-wily.mit.edu) has joined #haskell
2013-09-07 05:20:37	<--	silasm (~silas@107.38.224.138) has quit (Client Quit)
2013-09-07 05:20:50	<--	alex___ (~alex@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-07 05:20:59	-->	silasm (~silas@107.38.224.138) has joined #haskell
2013-09-07 05:21:09	-->	alex___ (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 05:21:16	niteria	I don't think you can use them, there's no way of bubbling up inability to unify
2013-09-07 05:21:49	jgross_	Is there a way to load a module and then evaluate code in that module, from the command line?
2013-09-07 05:21:51	Makoryu	I'd have to do something like Map k foo -> Map k (Maybe foo)
2013-09-07 05:22:01	Makoryu	And then see if anything failed there
2013-09-07 05:22:07	Makoryu	Which is ridiculous
2013-09-07 05:22:36	Makoryu	At least I can make this more generic though
2013-09-07 05:22:53	-->	phserr (~phserr@189-81-36-222.user.veloxzone.com.br) has joined #haskell
2013-09-07 05:23:00	niteria	there's mergeWithKey, that looks generic enough for your case
2013-09-07 05:23:34	 *	hackagebot combinator-interactive 0.1.1 - SKI Combinator interpreter  http://hackage.haskell.org/package/combinator-interactive-0.1.1 (FumiakiKinoshita)
2013-09-07 05:23:53	<--	phserr (~phserr@189-81-36-222.user.veloxzone.com.br) has quit (Client Quit)
2013-09-07 05:24:14	niteria	jgross_: what do you mean by evaluate code in module? you can always call main from ghci
2013-09-07 05:24:31	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-09-07 05:24:37	geekosaur	I wonder if jgross_ wants ghc -e
2013-09-07 05:25:13	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-09-07 05:25:23	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-07 05:26:10	<--	ystael (~ystael@pool-108-20-254-6.bstnma.east.verizon.net) has quit (Quit: leaving)
2013-09-07 05:27:38	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-07 05:27:44	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 246 seconds)
2013-09-07 05:28:10	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (Remote host closed the connection)
2013-09-07 05:28:50	--	preflex_ is now known as preflex
2013-09-07 05:29:19	Makoryu	@pl \x y -> do { xys <- f x y; xyss <- g xs ys; return (xys : xyss); }
2013-09-07 05:29:19	lambdabot	(line 1, column 12):
2013-09-07 05:29:20	lambdabot	unexpected '{'
2013-09-07 05:29:20	lambdabot	expecting variable, "(", operator or end of input
2013-09-07 05:29:37	Makoryu	Wait
2013-09-07 05:29:39	Makoryu	Dang
2013-09-07 05:30:02	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-07 05:30:11	jgross_	geekosaur: Yes, I want ghc -e.	But also something else, so it knows about things in my file.  If I define "foo" in "bar.hs", what do I want instead of "ghc -e 'foo'"?
2013-09-07 05:30:25	enthropy	you can add multiple -e flags
2013-09-07 05:30:41	enthropy	 ghc -e "import Foo" -e "print somethingFromFoo"
2013-09-07 05:31:02	geekosaur	although `bar.hs` won't probably work for that...
2013-09-07 05:31:24	Makoryu	@pl \a b -> (k, a) : b
2013-09-07 05:31:25	lambdabot	(:) . (,) k
2013-09-07 05:32:05	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Ping timeout: 245 seconds)
2013-09-07 05:32:10	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-07 05:33:16	jgross_	Yeah, it's telling me parse error on bar, and could not find module Bar on Bar.
2013-09-07 05:33:34	 *	hackagebot pandoc-types 1.12 - Types for representing a structured document  http://hackage.haskell.org/package/pandoc-types-1.12 (JohnMacFarlane)
2013-09-07 05:34:50	<--	lukexi (~lukexi@75.101.60.164) has quit (Quit: lukexi)
2013-09-07 05:35:16	-->	wbruce (~wbruce@c-98-246-217-110.hsd1.or.comcast.net) has joined #haskell
2013-09-07 05:35:18	liyang	Shurely there's a canonical library (or two) to work with GHC.TypeLits? Anyone?
2013-09-07 05:35:37	<--	cl_away (~clahey@208.91.2.2) has quit (Ping timeout: 241 seconds)
2013-09-07 05:36:02	-->	cl_away (~clahey@208.91.2.2) has joined #haskell
2013-09-07 05:36:06	geekosaur	jgross_, you may need to use hint, or maybe play ugly games with ./.ghci
2013-09-07 05:36:08	edwardk	liyang: what do you want to do with them?
2013-09-07 05:36:16	enthropy	they are used in some places
2013-09-07 05:36:17	edwardk	liyang: i abuse them here and there
2013-09-07 05:36:19	-->	[[zzzz]] (~q@node-tok.pool-125-24.dynamic.totbb.net) has joined #haskell
2013-09-07 05:36:23	enthropy	say for labels in vinyl and HList
2013-09-07 05:36:35	edwardk	liyang: e.g. reflection supplies instances for them so they can be used as reflections of the numbers, ec.
2013-09-07 05:36:37	<--	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-09-07 05:36:52	edwardk	to match up with their behavior through SingI, etc.
2013-09-07 05:36:54	hpaste	Makoryu revised “No title”: “No title” at http://lpaste.net/92678
2013-09-07 05:36:56	liyang	edwardk: I'm not sure yet. Fixed-point arithmetic library for example. As things stand there aren't even type instances for (+) &c.
2013-09-07 05:36:57	<--	wbruce (~wbruce@c-98-246-217-110.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 05:37:01	-->	wbruce_ (~wbruce@c-98-246-217-110.hsd1.or.comcast.net) has joined #haskell
2013-09-07 05:37:03	Makoryu	This is as good as I can do, probably
2013-09-07 05:37:07	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Quit: WeeChat 0.3.7)
2013-09-07 05:37:14	Makoryu	Well
2013-09-07 05:37:17	edwardk	liyang: without a working type family for (+), etc. they are kinda useless
2013-09-07 05:37:32	Makoryu	(I guess I could make "go" its own list merge thing)
2013-09-07 05:37:34	-->	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-07 05:37:41	liyang	right, and I'm surprised they're not provided.
2013-09-07 05:37:47	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-07 05:37:51	edwardk	liyang: that is why it is still work in progress
2013-09-07 05:37:56	edwardk	the solver for all that is off in a branch
2013-09-07 05:38:04	liyang	Oh. :<
2013-09-07 05:38:52	liyang	The "Source Code" links are all broken on http://ghc.haskell.org/trac/ghc/wiki/TypeNats
2013-09-07 05:39:00	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-07 05:39:18	<--	[[zzz]] (~q@node-pen.pool-180-180.dynamic.totbb.net) has quit (Ping timeout: 248 seconds)
2013-09-07 05:39:38	<--	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has quit (Remote host closed the connection)
2013-09-07 05:39:51	<--	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-07 05:40:14	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-07 05:40:15	Fuuzetsu	Is there an example of using Data.Data anywhere?
2013-09-07 05:40:25	Fuuzetsu	It's kind of hard to search for.
2013-09-07 05:42:07	shachaf	everywhere in SYB
2013-09-07 05:42:11	liyang	I was also half-wondering if anyone had gotten around to implementing binary (rather than unary) numbers in Agda yet.
2013-09-07 05:42:28	<--	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-09-07 05:42:35	Fuuzetsu	shachaf: SYB?
2013-09-07 05:42:36	-->	gnuvince (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-07 05:42:44	shachaf	A library.
2013-09-07 05:42:45	Fuuzetsu	Ah, nvm got it
2013-09-07 05:42:45	shachaf	@where syb
2013-09-07 05:42:46	lambdabot	<http://www.haskell.org/haskellwiki/Scrap_your_boilerplate>,<http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/>,<http://homepages.cwi.nl/~ralf/syb2/>,<http://homepages.cwi.nl/~ralf/
2013-09-07 05:42:46	lambdabot	syb3/>
2013-09-07 05:42:48	Fuuzetsu	Thanks
2013-09-07 05:42:56	shachaf	The joke is that it exports a function named "everywhere".
2013-09-07 05:43:04	shachaf	But it's also used everywhere.
2013-09-07 05:43:27	shachaf	SPJ's slides are a straightforward introduction.
2013-09-07 05:43:35	shachaf	http://research.microsoft.com/en-us/um/people/simonpj/papers/hmap/
2013-09-07 05:44:03	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-09-07 05:44:37	jgross_	ghc -e "import Bar" bar.hs works, if I have "module Bar where" in Bar.hs.
2013-09-07 05:46:09	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-07 05:46:18	<--	oleo (~oleo@xdsl-87-79-250-206.netcologne.de) has quit (Ping timeout: 264 seconds)
2013-09-07 05:46:29	-->	oleo (~oleo@xdsl-78-35-145-193.netcologne.de) has joined #haskell
2013-09-07 05:46:43	<--	artyomkazak (~artyomkaz@94.25.229.87) has quit (Ping timeout: 264 seconds)
2013-09-07 05:47:41	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-07 05:48:20	<--	silasm (~silas@107.38.224.138) has quit (Ping timeout: 268 seconds)
2013-09-07 05:48:49	sordina	Hey!
2013-09-07 05:49:08	sordina	What's a good way to build bytestrings from bits?
2013-09-07 05:49:14	-->	silasm (~silas@107.38.74.197) has joined #haskell
2013-09-07 05:49:23	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-07 05:50:31	ParaSa1lin	Data.Bits has bit twiddling functions
2013-09-07 05:50:45	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 05:51:48	startling	sordina, build a list of Char8 first
2013-09-07 05:51:53	<--	jgross_ (~jgross@dr-wily.mit.edu) has left #haskell
2013-09-07 05:53:19	<--	alex___ (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 05:53:26	shachaf	startling: :-(
2013-09-07 05:53:41	sordina	startling: Are there any good funcitons of the form [Bool] -> Char8 / Word8?
2013-09-07 05:53:46	shachaf	Char8 isn't a type, and if it was a type, you shouldn't use it.
2013-09-07 05:53:48	<--	CaptainK (~CaptainK@181.179.96.33) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-07 05:53:48	geekosaur	wtf is Char8
2013-09-07 05:54:05	startling	ugh, sorry, Word8
2013-09-07 05:54:29	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-07 05:54:48	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-09-07 05:55:03	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-07 05:55:22	<--	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has quit (Ping timeout: 276 seconds)
2013-09-07 05:57:22	<--	slack1256 (~slack@181-160-193-224.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-07 05:59:52	-->	Philonous__ (~Philonous@dslb-188-106-138-223.pools.arcor-ip.net) has joined #haskell
2013-09-07 06:00:16	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 06:00:34	<--	structuralist (~structura@50-197-184-65-static.hfc.comcastbusiness.net) has quit
2013-09-07 06:01:08	<--	finishingmove (~finishing@178-222-171-51.dynamic.isp.telekom.rs) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-07 06:01:44	lispy	geekosaur: there is a Char8 module
2013-09-07 06:02:01	lispy	in bytestring
2013-09-07 06:02:33	Taneb	But there is no Char8 type
2013-09-07 06:02:40	lispy	right
2013-09-07 06:02:53	lispy	but geekosaur asked what Char8 is
2013-09-07 06:03:01	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 06:03:40	geekosaur	yes, but someone suggested making a "list of Char8"
2013-09-07 06:03:51	<--	Philonous_ (~Philonous@dslb-178-000-236-076.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-09-07 06:03:53	geekosaur	in order to build a ByteString from it
2013-09-07 06:05:25	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-09-07 06:07:17	startling	(me)
2013-09-07 06:07:20	startling	(I meant Word8)
2013-09-07 06:07:27	<--	ddinh (~David@70.231.145.202) has quit (Ping timeout: 268 seconds)
2013-09-07 06:09:31	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-07 06:09:56	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-07 06:10:28	sordina	startling, geekosaur: Something like this? https://gist.github.com/sordina/6472761
2013-09-07 06:11:18	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 06:12:37	<--	charliesome (~root@118.209.75.254) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 06:12:41	startling	looks good.
2013-09-07 06:13:07	--	Kobata_ is now known as Kobata
2013-09-07 06:13:12	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-07 06:13:18	<--	adlan_ (~AAFR@aafr.me) has quit (Quit: ZNC - http://znc.in)
2013-09-07 06:13:41	-->	adlan (~AAFR@aafr.me) has joined #haskell
2013-09-07 06:13:47	-->	flippo (~frivol@unaffiliated/flippo) has joined #haskell
2013-09-07 06:13:57	edwardk	At about 100k entries the COLA is currently hovering about 5x faster than Data.Map.
2013-09-07 06:14:20	sordina	I would have thought there would be a library with this functionality somewhere...
2013-09-07 06:16:20	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-07 06:17:28	bscarlet	edwardk: 5x faster doing what?
2013-09-07 06:18:05	edwardk	bscarlet: right now inserting, some lookups
2013-09-07 06:18:20	edwardk	looking for better benchmarks
2013-09-07 06:18:41	edwardk	github.com/ekmett/structures feel free to pull, benchmark, test/beat/hammer on it
2013-09-07 06:19:02	bscarlet	edwardk: what are you using for your contiguous storage?
2013-09-07 06:19:17	edwardk	vector
2013-09-07 06:19:29	-->	ksf_ (~ksf@d041238.adsl.hansenet.de) has joined #haskell
2013-09-07 06:19:32	edwardk	it has has a class that can be used to select the 'best' vector for a given type
2013-09-07 06:19:51	edwardk	and all writes to the vectors are done sequentially
2013-09-07 06:19:56	edwardk	so they stream nicely
2013-09-07 06:20:07	edwardk	it gets to use stream fusion when copying data across
2013-09-07 06:20:18	<--	zbcm (~zbcm@CPE-60-231-179-161.lns4.dav.bigpond.net.au) has quit (Quit: Leaving)
2013-09-07 06:20:35	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 260 seconds)
2013-09-07 06:20:44	bscarlet	any way to used mapped storage for more permanent data?
2013-09-07 06:20:49	edwardk	absolutely
2013-09-07 06:20:53	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-07 06:21:04	edwardk	the vectors could be Storable vectors
2013-09-07 06:21:17	edwardk	and they could be mmap'ed in
2013-09-07 06:21:41	edwardk	my current goal is to just make this simple simple version as fast as i can
2013-09-07 06:21:42	-->	ayhid (~ayhid@197.162.39.2) has joined #haskell
2013-09-07 06:21:45	edwardk	then play with variants, deletes, etc.
2013-09-07 06:21:48	bscarlet	sure.
2013-09-07 06:21:58	<--	ksf (~ksf@d031031.adsl.hansenet.de) has quit (Ping timeout: 248 seconds)
2013-09-07 06:23:05	<--	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Quit: leaving)
2013-09-07 06:23:12	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 06:23:39	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-07 06:23:46	pharaun	finally got rid of all ascii-ism in my code
2013-09-07 06:23:56	pharaun	trickier than expected
2013-09-07 06:24:07	-->	hdevalence|away (hdevalence@gateway/shell/kde/x-mqezppsttmsrcusb) has joined #haskell
2013-09-07 06:24:51	ayhid	should I use leksah or go for eclipseFP ? I usually use Vim + ghci + tmux, but that isn't a perfect setup ?
2013-09-07 06:25:08	edwardk	for a better mixed persistence story more of the stratified b-tree tricks can be used. that could also be used to just make an 'MVCC' Map, where you can explicitly make versions and continue on with tem
2013-09-07 06:25:45	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-07 06:26:10	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-07 06:26:35	-->	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has joined #haskell
2013-09-07 06:26:42	<--	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has quit (Changing host)
2013-09-07 06:26:43	-->	DaveS (~DaveS@unaffiliated/daves) has joined #haskell
2013-09-07 06:26:48	<--	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-07 06:27:50	--	hdevalence|away is now known as hdevalence
2013-09-07 06:28:56	-->	turnersr (~turnersr@pool-71-178-107-104.washdc.east.verizon.net) has joined #haskell
2013-09-07 06:28:57	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-07 06:29:08	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-07 06:30:17	bscarlet	edwardk: If more tricks could be used, can you easily enumerate which you currently aren't using but think you might, the better that I might understand more precisely what you're doing?
2013-09-07 06:30:47	edwardk	bscarlet: what i'm doing now is i replaced the fractional cascade with bloom filters
2013-09-07 06:30:53	edwardk	that sped things up a lot
2013-09-07 06:31:10	ayhid	^ ?
2013-09-07 06:31:22	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-07 06:31:41	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (Quit: NO CARRIER)
2013-09-07 06:31:45	bscarlet	edwardk: neat
2013-09-07 06:32:02	edwardk	i also replaced the binary counter with a skew binary counter
2013-09-07 06:32:07	edwardk	so every merge only every carries once
2013-09-07 06:32:10	edwardk	that was the critical difference
2013-09-07 06:32:29	pharaun	skew binary counter, never heard of one, looking it up
2013-09-07 06:32:30	edwardk	i've been trying out in the 4-cola branch ways to say that instead of working through one insert + merge pair at a time what we should do is merge 2 vector pairs at a time, doing the second one in parallel via spark if it is big enough to warrant sparking
2013-09-07 06:32:46	bscarlet	skew binary counter? like a gray code?
2013-09-07 06:33:07	<--	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-07 06:33:11	edwardk	pharaun: http://www.cl.cam.ac.uk/teaching/2004/IntroFuncProg/lecture08.html
2013-09-07 06:33:25	pharaun	edwardk: heh i arrived at that just a few moment ago :)
2013-09-07 06:33:33	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 06:33:37	edwardk	bscalet: make a number system where your digits are worth 2^(k+1)-1    1,3,7,15,31,...
2013-09-07 06:34:02	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-07 06:34:10	edwardk	bscarlet: now, you're allowed 0s and 1s, and a single '2' as your digits, but the 2 just be at the least significant non-0 entry if it is present
2013-09-07 06:34:15	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 06:34:22	edwardk	0,1,2,10,11,12,20,100...
2013-09-07 06:34:29	pharaun	edwardk: does this really actually make a difference, well if you are doing the binary number manually but wouldn't the hardware take care of it?
2013-09-07 06:34:42	edwardk	under this system increasing by one never carries more than one place
2013-09-07 06:35:00	edwardk	pharaun: the 'counter' here is representing enormous arrays
2013-09-07 06:35:26	edwardk	pharaun: the usual use of skew binary counting as a data structure is a skew binary random access list
2013-09-07 06:35:28	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-07 06:35:31	pharaun	ahh
2013-09-07 06:36:01	edwardk	you have a linked list of complete trees, and you're willing to have 2 trees of the same height only if they are the first two trees in your list, and after that they must all be of increasing height
2013-09-07 06:36:08	bscarlet	edwardk: what were you doing when you had multiple carries? I'm used to systems where lots of carrying would be good because it'd mean a single n-way merge.
2013-09-07 06:36:26	<--	banannagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-07 06:36:39	edwardk	you can merge two complete trees of the same height into one of the next larger height, so adding 1 to a '2' means making a new tree of the next larger size
2013-09-07 06:36:44	edwardk	bscarlet: that was my intuition here as well
2013-09-07 06:36:58	bscarlet	not so much, then? Hmm.
2013-09-07 06:36:58	edwardk	but it turns out to be bad for haskell in that the fusion can't fire so it doesn't get all unboxed.
2013-09-07 06:37:04	bscarlet	ah!
2013-09-07 06:37:17	edwardk	here the pattern is simple enough that vector stream fusion can go off
2013-09-07 06:37:23	<--	Asterfield (~josh@dhcp-0-18-e7-e2-d4-73.cpe.mountaincable.net) has quit (Quit: Konversation terminated!)
2013-09-07 06:37:32	edwardk	every insert results in at most one merge
2013-09-07 06:37:43	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Ping timeout: 264 seconds)
2013-09-07 06:37:56	Fuuzetsu	How can I pass Haddock options to cabal-dev/cabal-install? There's --with-haddock but I don't see any docs on passing any haddock flags.
2013-09-07 06:38:03	edwardk	but it is a funny 1-lement + 2 streams merge
2013-09-07 06:38:03	<--	silasm (~silas@107.38.74.197) has quit (Ping timeout: 264 seconds)
2013-09-07 06:38:48	-->	jfischoff_ (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 06:39:05	bscarlet	So n-way might be better in principle, but not under the constraints of using fusion in vectors for your merging? (i.e. if I want to jit my own merges or something I shouldn't necessarily learn from this)?
2013-09-07 06:39:11	pharaun	edwardk: no way to provoke/force it to fusion?
2013-09-07 06:39:17	edwardk	bscarlet: https://github.com/ekmett/structures/blob/master/src/Data/Vector/Map.hs#L128 is the insert
2013-09-07 06:39:28	edwardk	pharaun: i tried more complex trees, i tried lots of variants
2013-09-07 06:39:44	edwardk	it might be somthing that with some llvm craziness we could jit into something sexy
2013-09-07 06:40:02	edwardk	bscarlet: the theory says a 4-cola should b more or less ideal
2013-09-07 06:40:24	edwardk	like https://github.com/ekmett/structures/blob/4-cola/src/Data/Vector/Map.hs#L139 but stronger because it should do a 4-way merge not 2 2-way merges
2013-09-07 06:40:52	-->	fosky_ (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has joined #haskell
2013-09-07 06:40:54	-->	slack1256 (~slack@181-160-193-224.baf.movistar.cl) has joined #haskell
2013-09-07 06:41:00	edwardk	sadly that doesn't seem to pay out right now
2013-09-07 06:41:42	-->	chirpsalot (~Chirps@unaffiliated/chirpsalot) has joined #haskell
2013-09-07 06:41:46	carter	edwardk bscarlet : for Nway merges, the series fusion repa4 stuff + the accelerate fan-in fusion stuff may be relevant
2013-09-07 06:41:51	bscarlet	The day I have enough tooling built up to manage any such llvm craziness in ~4 lines I will be very happy indeed.
2013-09-07 06:42:03	carter	but you basically need a compiler plugin to do such
2013-09-07 06:42:14	edwardk	nicely all this logic is very compact and it is all contained in the insert function for now, so it gives us lots of room to play with knobs
2013-09-07 06:42:24	edwardk	it used to be spread out across a bunch of functions
2013-09-07 06:42:32	carter	cool!
2013-09-07 06:42:43	edwardk	carter: did you see this since it started beating Map?
2013-09-07 06:42:57	carter	edwardk see which?
2013-09-07 06:43:03	carter	just read the scrollback
2013-09-07 06:43:04	edwardk	the not-quite-cola
2013-09-07 06:43:10	carter	that you got shit fast with blooms?
2013-09-07 06:43:21	edwardk	5-8x faster for inserts at 100k+
2013-09-07 06:43:23	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (Quit: Working as programmed)
2013-09-07 06:43:24	bscarlet	edwardk: 7up?
2013-09-07 06:43:39	edwardk	and it should get faster with scale
2013-09-07 06:43:43	edwardk	7up?
2013-09-07 06:43:45	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-07 06:43:53	carter	100k > l2 right?
2013-09-07 06:43:56	bscarlet	edwardk: the un-cola. sorry.
2013-09-07 06:44:04	edwardk	bscarlet: ahahahaha
2013-09-07 06:44:20	edwardk	carter: pretty sure it thrashes a lot more than l2 by then
2013-09-07 06:44:41	<--	fosky_ (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Client Quit)
2013-09-07 06:45:05	carter	so basically on large enough sizes, the locality gain of being able to have cachelines be useful overwins the administrative constant factors vs map?
2013-09-07 06:45:09	edwardk	been trying to come up with a good name for this thing. i'm just calling it a vector map for now
2013-09-07 06:45:21	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-07 06:45:26	edwardk	well it starts pulling away from map below 1k entries
2013-09-07 06:45:30	carter	oh
2013-09-07 06:45:31	carter	ok
2013-09-07 06:45:34	edwardk	i didn't find the cross-over point
2013-09-07 06:45:43	edwardk	benchmarks start around there =)
2013-09-07 06:45:43	carter	its faster at 1k?
2013-09-07 06:45:45	carter	ok
2013-09-07 06:45:46	edwardk	yeah
2013-09-07 06:45:50	edwardk	3x or so
2013-09-07 06:45:59	bscarlet	edwardk: how big are your entries?
2013-09-07 06:46:05	edwardk	Ints
2013-09-07 06:46:16	carter	so its a bulk insertable map with good locality
2013-09-07 06:46:18	edwardk	feel free to throw more benchmarks at it
2013-09-07 06:46:26	carter	sweet
2013-09-07 06:46:38	edwardk	and where you should be able to do range scans efficiently
2013-09-07 06:46:50	carter	so like a db
2013-09-07 06:46:51	-->	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has joined #haskell
2013-09-07 06:46:52	carter	but smaller
2013-09-07 06:46:53	carter	:)
2013-09-07 06:46:54	edwardk	yep
2013-09-07 06:46:58	bscarlet	why smaller?
2013-09-07 06:47:02	edwardk	it is a COLA for all intents and purposes
2013-09-07 06:47:07	carter	less code :)]
2013-09-07 06:47:10	carter	:)
2013-09-07 06:47:14	edwardk	so b-tree comparable
2013-09-07 06:47:14	Fuuzetsu	It was --haddock-options.
2013-09-07 06:47:36	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-07 06:47:47	-->	k0001 (~k0001@host97.190-138-114.telecom.net.ar) has joined #haskell
2013-09-07 06:47:56	carter	now we just need to figure out the deletes!
2013-09-07 06:48:03	carter	and filters
2013-09-07 06:48:05	carter	right?
2013-09-07 06:48:05	edwardk	couple options.
2013-09-07 06:48:15	carter	oh?
2013-09-07 06:48:25	edwardk	we can insert a bitmap, or we can allow for a set of keys we're deleting as just another vector in our level
2013-09-07 06:48:37	edwardk	that is probably easier than the bitmap
2013-09-07 06:48:42	-->	rnons (~rnons@183.152.60.69) has joined #haskell
2013-09-07 06:49:05	carter	insert a bitmap?
2013-09-07 06:49:16	carter	oh and drop them the next time we merge
2013-09-07 06:49:24	-->	gabriel__ (~gabriel@r190-134-99-81.dialup.adsl.anteldata.net.uy) has joined #haskell
2013-09-07 06:49:38	carter	and have an accilary compact with a threshold that does it
2013-09-07 06:49:41	carter	*ancillary
2013-09-07 06:49:45	carter	too
2013-09-07 06:49:47	edwardk	the bitvector would be things that are deletes, so we don't check them in the next file
2013-09-07 06:49:48	carter	right?
2013-09-07 06:49:49	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-07 06:49:53	carter	yeah
2013-09-07 06:49:58	edwardk	and when we merge they cancel out
2013-09-07 06:50:20	carter	the bitvector gets washed
2013-09-07 06:50:23	edwardk	done right they can be updates by doing a delete and insert in the same vector
2013-09-07 06:50:27	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-07 06:50:36	edwardk	the bitvector is probably too much adminstrative overhead comparably
2013-09-07 06:50:48	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 06:50:48	carter	why does https://github.com/ekmett/structures/blob/master/src/Data/Vector/Bloom/Mutable.hs#L49 have Int16max?
2013-09-07 06:50:48	-->	davidsd (~davidsd@4.31.70.22) has joined #haskell
2013-09-07 06:50:49	--	jfischoff_ is now known as jfischoff
2013-09-07 06:50:57	edwardk	that would make inserts slower though, because to do it right you'd want to make the inserts do a lookup first
2013-09-07 06:51:10	edwardk	that means that i have to force my lazy bloom filters more often
2013-09-07 06:51:24	edwardk	since right now if you insert 100k entries and then lookup i don't start making blooms until the last second
2013-09-07 06:51:25	carter	which done right?
2013-09-07 06:51:42	carter	how're you using the blooms btw?
2013-09-07 06:51:43	edwardk	to do deletes
2013-09-07 06:51:51	edwardk	the blooms replace the fractional cascading
2013-09-07 06:52:07	carter	how so?
2013-09-07 06:52:16	edwardk	phone handy?
2013-09-07 06:52:26	carter	sure
2013-09-07 06:52:28	carter	gimme a minute
2013-09-07 06:52:29	bscarlet	edwardk: hey!
2013-09-07 06:52:30	edwardk	ring when free
2013-09-07 06:52:40	bscarlet	I'd like to hear this too...
2013-09-07 06:52:52	edwardk	ok, gimme a phone number and i'll conference you =P
2013-09-07 06:53:20	 *	startling wants to join in
2013-09-07 06:54:19	<--	gabriel__ (~gabriel@r190-134-99-81.dialup.adsl.anteldata.net.uy) has quit (Ping timeout: 268 seconds)
2013-09-07 06:54:46	<--	etabot (~etabot@199.47.72.31) has quit (Ping timeout: 240 seconds)
2013-09-07 06:54:47	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 240 seconds)
2013-09-07 06:54:47	carter	are you bringing marshmellows?
2013-09-07 06:55:11	leroux	Skype sounds handy at a time like this.
2013-09-07 06:55:19	leroux	carter: I'm out of marshmallows....
2013-09-07 06:55:32	edwardk	ok, maybe a google hangout makes more sense
2013-09-07 06:55:50	-->	julmac (~no@141.255.164.91) has joined #haskell
2013-09-07 06:56:28	startling	ha
2013-09-07 06:57:10	-->	nycs (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-09-07 06:57:15	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell
2013-09-07 06:57:40	-->	poucet_ (~chris@li23-146.members.linode.com) has joined #haskell
2013-09-07 06:57:44	-->	Gracenotes_ (~person@192.241.203.42) has joined #haskell
2013-09-07 06:57:45	-->	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 06:57:45	-->	junsuiji1 (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-09-07 06:57:57	<--	Polarina (~polarina@wesnoth/translator/Polarina) has quit (Quit: Ex-Chat)
2013-09-07 06:58:06	-->	ziman_ (~ziman@functor.sk) has joined #haskell
2013-09-07 06:58:07	-->	Sorcy (ycros@gnaw.ycros.org) has joined #haskell
2013-09-07 06:58:11	-->	hiredman_ (~hiredman@volyova.ec2.thelastcitadel.com) has joined #haskell
2013-09-07 06:58:11	-->	driek (~drk@whiff.xentower.nl) has joined #haskell
2013-09-07 06:58:14	<--	pavonia (~user@p54B9EBCF.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-07 06:58:20	-->	cruxeter1us (cruxtech@secspeed.com) has joined #haskell
2013-09-07 06:58:23	-->	Saeppel (~saep@185.7.198.1) has joined #haskell
2013-09-07 06:58:24	-->	peltchu_ (~xel@pi.xel.fi) has joined #haskell
2013-09-07 06:59:09	-->	scripty (~scripty@117.192.170.227) has joined #haskell
2013-09-07 06:59:26	<--	wagle (~wagle@static-50-43-34-150.bvtn.or.frontiernet.net) has quit (Ping timeout: 246 seconds)
2013-09-07 06:59:50	<--	julmae (~no@141.255.164.77) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-07 06:59:50	<--	saep (~saep@185.7.198.1) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	poucet (~chris@li23-146.members.linode.com) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	junsuijin (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	mattswe (uid4809@gateway/web/irccloud.com/x-izfcnwxkynivyijb) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	Gracenotes (~person@192.241.203.42) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	`^_^v (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-07 06:59:50	<--	cruxeternus (cruxtech@secspeed.com) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:50	<--	hiredman (~hiredman@volyova.ec2.thelastcitadel.com) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	DRiKE (~drk@whiff.xentower.nl) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	arbn (~arbn@unaffiliated/arbn) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	ziman (~ziman@195.210.28.236) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	peltchu (~xel@pi.xel.fi) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	Ycros (ycros@gnaw.ycros.org) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-07 06:59:51	<--	hellome (~lua@192.73.239.25) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	Nahra (~Nahra@unaffiliated/nahra) has quit (Ping timeout: 240 seconds)
2013-09-07 06:59:51	<--	relrod (relrod@redhat/relrod) has quit (Ping timeout: 240 seconds)
2013-09-07 07:00:07	-->	Nahra (~Nahra@unaffiliated/nahra) has joined #haskell
2013-09-07 07:00:11	carter	https://plus.google.com/hangouts/_/799584d5a34e04c0ed587fc325521be551b95952?hl=en might work?
2013-09-07 07:00:13	-->	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has joined #haskell
2013-09-07 07:00:37	-->	relrod (relrod@nat/redhat/x-dxvwrbtixfdbofho) has joined #haskell
2013-09-07 07:00:38	<--	relrod (relrod@nat/redhat/x-dxvwrbtixfdbofho) has quit (Changing host)
2013-09-07 07:00:38	-->	relrod (relrod@redhat/relrod) has joined #haskell
2013-09-07 07:00:39	<--	dixie (dixie@real.wilbury.sk) has quit (Ping timeout: 240 seconds)
2013-09-07 07:00:51	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Quit: leaving)
2013-09-07 07:00:54	--	Sorcy is now known as Ycros
2013-09-07 07:00:59	-->	dixie (dixie@real.wilbury.sk) has joined #haskell
2013-09-07 07:01:06	carter	bscarlet startling  try joining?
2013-09-07 07:01:15	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-07 07:01:44	carter	leroux: we can't see or hear you
2013-09-07 07:01:44	leroux	I disabled my audio and video.
2013-09-07 07:01:50	<--	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 07:01:54	leroux	Just here to listen in.
2013-09-07 07:01:56	carter	ahh lurking
2013-09-07 07:02:02	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-07 07:02:34	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-07 07:02:38	shachaf	What's that?
2013-09-07 07:02:51	h4199	click it and find out
2013-09-07 07:03:06	carter	its edwardk explaining structures :)
2013-09-07 07:03:07	edwardk	shachaf: chatting about the COLA stuff
2013-09-07 07:04:24	-->	wagle (~wagle@static-50-43-34-150.bvtn.or.frontiernet.net) has joined #haskell
2013-09-07 07:04:41	<--	effy (~quassel@123.122.69.65) has quit (Ping timeout: 256 seconds)
2013-09-07 07:04:47	Taneb	I may also lurk
2013-09-07 07:05:38	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-07 07:05:48	<--	pierreghz (~krux@115.102-245-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 256 seconds)
2013-09-07 07:07:03	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-07 07:07:30	-->	pierreghz (~krux@91.179.58.155) has joined #haskell
2013-09-07 07:07:30	shachaf	Hmm, my connection isn't good enough to lurk.
2013-09-07 07:07:32	carter	joint!
2013-09-07 07:07:33	-->	mlamari (~quassel@cpe-70-112-159-86.austin.res.rr.com) has joined #haskell
2013-09-07 07:07:34	carter	*joint
2013-09-07 07:07:37	carter	*join
2013-09-07 07:08:09	mlamari	Does getDirectoryContents potentially leak some resource if its result is not read to the end?  (lazy io)?
2013-09-07 07:08:16	-->	eff__ (~quassel@114.252.55.221) has joined #haskell
2013-09-07 07:09:29	-->	zcourts (~zcourts@176.254.253.235) has joined #haskell
2013-09-07 07:09:42	mm_freak	mlamari: that one isn't lazy as far as i know
2013-09-07 07:10:27	<--	DaveS (~DaveS@unaffiliated/daves) has quit (Ping timeout: 264 seconds)
2013-09-07 07:11:05	-->	eff____ (~quassel@114.246.100.143) has joined #haskell
2013-09-07 07:11:14	Taneb	Looking at the video conference, do I need a beard to be a Haskell hacker?
2013-09-07 07:11:49	<--	sababa (~sababa@unaffiliated/sababa) has quit (Quit: brb)
2013-09-07 07:12:09	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 07:12:13	--	gpampara_off is now known as gpampara
2013-09-07 07:13:14	-->	sababa (~sababa@unaffiliated/sababa) has joined #haskell
2013-09-07 07:13:22	<--	satc (~smuxi@202.3.77.239) has quit (Ping timeout: 276 seconds)
2013-09-07 07:13:40	<--	eff__ (~quassel@114.252.55.221) has quit (Ping timeout: 264 seconds)
2013-09-07 07:13:43	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 07:13:49	-->	Grey_Fox2 (~chatzilla@120.147.148.171) has joined #haskell
2013-09-07 07:13:58	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-07 07:14:21	<--	Platyhelminth (~Platyhelm@unaffiliated/platyhelminth) has quit (Quit: Leaving)
2013-09-07 07:14:51	-->	eff__ (~quassel@222.129.234.40) has joined #haskell
2013-09-07 07:15:21	<--	brendan (~brendan@zakopane.cs.ubc.ca) has quit (Remote host closed the connection)
2013-09-07 07:15:50	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Ping timeout: 240 seconds)
2013-09-07 07:16:15	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-07 07:17:39	<--	eff____ (~quassel@114.246.100.143) has quit (Ping timeout: 264 seconds)
2013-09-07 07:18:07	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-07 07:18:56	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 07:19:09	<--	ayhid (~ayhid@197.162.39.2) has quit (Quit: Leaving)
2013-09-07 07:19:48	<--	sababa (~sababa@unaffiliated/sababa) has quit (Max SendQ exceeded)
2013-09-07 07:22:44	-->	sababa (~sababa@unaffiliated/sababa) has joined #haskell
2013-09-07 07:23:21	carter	Taneb not really :P
2013-09-07 07:23:45	startling	that comes later.
2013-09-07 07:23:55	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 268 seconds)
2013-09-07 07:23:59	Taneb	Good, facial hair looks awful on me :P
2013-09-07 07:24:17	startling	Facial hair is so uncomfortable. Also I hate shaving. Catch-22.
2013-09-07 07:24:30	Taneb	I probably ought to change my profile pic to something more "professional" some time in the next 5 years
2013-09-07 07:25:06	carter	startling shave the neck, problem solved
2013-09-07 07:25:16	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-07 07:25:20	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-07 07:25:27	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-07 07:25:52	Taneb	carter, but the neck is the most annoying bit to shave!
2013-09-07 07:26:28	-->	eff___ (~quassel@222.131.154.131) has joined #haskell
2013-09-07 07:27:15	<--	eff__ (~quassel@222.129.234.40) has quit (Ping timeout: 264 seconds)
2013-09-07 07:27:27	td123	startling: I heard facial hair grows on you after a week
2013-09-07 07:27:42	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-07 07:28:12	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-07 07:28:24	startling	td123: more like 36 hours
2013-09-07 07:29:10	<--	segmond (~segmond@99.102.148.255) has quit (Ping timeout: 245 seconds)
2013-09-07 07:30:10	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-09-07 07:31:27	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 264 seconds)
2013-09-07 07:31:40	<--	zcourts (~zcourts@176.254.253.235) has quit (Ping timeout: 240 seconds)
2013-09-07 07:32:12	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-07 07:32:14	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-07 07:32:50	-->	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-09-07 07:34:24	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 268 seconds)
2013-09-07 07:36:52	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-07 07:37:43	<--	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-07 07:38:00	-->	determinant_ (~determina@183.83.58.77) has joined #haskell
2013-09-07 07:38:28	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Quit: Leaving)
2013-09-07 07:38:50	-->	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has joined #haskell
2013-09-07 07:39:41	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-07 07:39:47	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-07 07:40:22	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-07 07:40:37	-->	nilsi (~nilsi@61.172.24.42) has joined #haskell
2013-09-07 07:43:17	<--	slack1256 (~slack@181-160-193-224.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-07 07:44:17	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 07:45:22	-->	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-07 07:46:18	<--	tibbe (~tibbe@207.198.105.20) has quit (Quit: tibbe)
2013-09-07 07:47:32	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-07 07:48:06	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-07 07:48:06	-->	nilsi (~nilsi@61.172.24.42) has joined #haskell
2013-09-07 07:48:35	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 07:48:38	<--	flippo (~frivol@unaffiliated/flippo) has quit (Quit: Reality reasserts itself sooner or later.)
2013-09-07 07:48:54	 *	hackagebot llvm-general-pure 3.2.8.1 - Pure Haskell LLVM functionality (no FFI).  http://hackage.haskell.org/package/llvm-general-pure-3.2.8.1 (BenjaminScarlet)
2013-09-07 07:48:55	 *	hackagebot llvm-general-pure 3.3.8.1 - Pure Haskell LLVM functionality (no FFI).  http://hackage.haskell.org/package/llvm-general-pure-3.3.8.1 (BenjaminScarlet)
2013-09-07 07:51:17	<--	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has quit (Ping timeout: 250 seconds)
2013-09-07 07:52:55	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-07 07:53:54	 *	hackagebot llvm-general 3.2.8.1 - General purpose LLVM bindings  http://hackage.haskell.org/package/llvm-general-3.2.8.1 (BenjaminScarlet)
2013-09-07 07:53:56	 *	hackagebot llvm-general 3.3.8.1 - General purpose LLVM bindings  http://hackage.haskell.org/package/llvm-general-3.3.8.1 (BenjaminScarlet)
2013-09-07 07:54:51	<--	chatsiri_ (~chatsiri_@171.6.174.58) has quit (Ping timeout: 260 seconds)
2013-09-07 07:55:31	<--	u_ (~phillip@adsl-75-57-179-17.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 07:56:01	<--	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has left #haskell
2013-09-07 07:56:11	-->	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has joined #haskell
2013-09-07 07:57:22	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-07 07:58:45	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-07 07:58:55	<--	tac (~tac-tics@2602:306:bdb4:5100:608e:37d6:b0da:3af7) has quit (Quit: Leaving)
2013-09-07 08:00:10	-->	ystael (~ystael@pool-108-20-254-6.bstnma.east.verizon.net) has joined #haskell
2013-09-07 08:01:06	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-07 08:02:49	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 08:04:13	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-07 08:05:17	<--	ystael (~ystael@pool-108-20-254-6.bstnma.east.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-07 08:06:23	<--	schlaftier (~daniel@5.158.182.23) has quit (Read error: Operation timed out)
2013-09-07 08:08:45	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Ping timeout: 245 seconds)
2013-09-07 08:09:06	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-07 08:09:48	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-07 08:12:38	<--	davidsd (~davidsd@4.31.70.22) has quit (Ping timeout: 268 seconds)
2013-09-07 08:12:51	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 264 seconds)
2013-09-07 08:12:59	-->	davidsd (~davidsd@4.31.70.22) has joined #haskell
2013-09-07 08:13:07	<--	turnersr (~turnersr@pool-71-178-107-104.washdc.east.verizon.net) has quit (Quit: Leaving)
2013-09-07 08:13:09	<--	Grey_Fox2 (~chatzilla@120.147.148.171) has quit (Ping timeout: 276 seconds)
2013-09-07 08:15:57	<--	alszar (~alszar@99-126-113-172.lightspeed.snantx.sbcglobal.net) has quit (Quit: alszar)
2013-09-07 08:19:05	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-07 08:19:51	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 08:20:03	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-07 08:22:40	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-09-07 08:23:28	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 260 seconds)
2013-09-07 08:25:08	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-07 08:26:12	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-09-07 08:26:24	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-07 08:26:25	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-07 08:27:12	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 260 seconds)
2013-09-07 08:29:29	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 08:29:50	-->	tooxie (~paranoid@g225065226.adsl.alicedsl.de) has joined #haskell
2013-09-07 08:31:51	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-07 08:32:37	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-07 08:33:18	<--	visof (~visof@unaffiliated/visof) has quit (Ping timeout: 276 seconds)
2013-09-07 08:33:31	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 08:35:05	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 08:35:37	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-07 08:35:39	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 264 seconds)
2013-09-07 08:35:40	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 08:35:50	<--	shrekster (~small@c-24-18-241-158.hsd1.wa.comcast.net) has quit (Quit: Leaving.)
2013-09-07 08:37:06	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-07 08:38:04	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-07 08:40:36	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-07 08:40:42	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 240 seconds)
2013-09-07 08:40:55	NemesisD	i'm trying to benchmark 2 algorithms with a bunch of data lazily loaded from disk
2013-09-07 08:41:35	NemesisD	but the problem is that by the second algorithm, the data would presumably all be evaluated
2013-09-07 08:42:05	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 245 seconds)
2013-09-07 08:42:24	<--	davidsd (~davidsd@4.31.70.22) has quit (Quit: davidsd)
2013-09-07 08:42:55	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-07 08:43:24	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-07 08:43:27	scripty	installed haskell , it took a long time :)
2013-09-07 08:43:35	-->	lions (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has joined #haskell
2013-09-07 08:43:47	<--	lions (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has left #haskell
2013-09-07 08:44:20	arkeet	NemesisD: using criterion?
2013-09-07 08:45:05	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-07 08:45:37	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-09-07 08:46:56	NemesisD	arkeet: will the pure coombinators take care of laziness-fairness there?
2013-09-07 08:47:04	NemesisD	i'm assuming it duplicates the thunks or something?
2013-09-07 08:47:11	arkeet	??
2013-09-07 08:49:00	NemesisD	so i load a bunch of data lazily from a file, it us unevaluated. i run 2 tests against that data and use "nf" to evaluate it to normal form
2013-09-07 08:49:27	NemesisD	i'm trying to ensure the second test gets unevaluated input data just like the first one so the comparison is fair
2013-09-07 08:50:04	<--	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-07 08:50:07	arkeet	can't you just load the data once for each run?
2013-09-07 08:51:27	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 08:52:14	NemesisD	i guess so..
2013-09-07 08:52:37	<--	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 08:52:56	-->	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 08:53:30	-->	arbn (~arbn@unaffiliated/arbn) has joined #haskell
2013-09-07 08:54:07	arkeet	or, if it fits in memory, load it and fully evaluate it before doing any runs.
2013-09-07 08:54:07	scripty	Can Haskell be first Language ?
2013-09-07 08:54:10	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 245 seconds)
2013-09-07 08:54:42	-->	sweeney (uid4809@gateway/web/irccloud.com/x-rnpvaozkjavyikag) has joined #haskell
2013-09-07 08:54:52	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 08:55:03	arkeet	NemesisD: and if it didn't fit in memory, you wouldn't be able to hold onto the same lazy result anyway, since it wouldn't be GC'd
2013-09-07 08:55:09	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-07 08:55:47	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-07 08:55:47	arkeet	lazy IO makes me sad. =(
2013-09-07 08:55:48	--	functorfun is now known as funfunctor
2013-09-07 08:55:49	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-09-07 08:56:08	<--	tabemann (~travisb@adsl-68-248-230-12.dsl.milwwi.ameritech.net) has quit (Ping timeout: 260 seconds)
2013-09-07 08:56:30	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-07 08:56:55	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-07 08:57:16	-->	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-09-07 08:58:44	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-07 08:59:06	<--	yogurt_truck (~yogurt_tr@190.191.224.63) has quit (Remote host closed the connection)
2013-09-07 08:59:08	<--	sferry (~samuel@atheme/member/samferry) has quit (Read error: Connection reset by peer)
2013-09-07 08:59:10	roboguy_	scripty: sure
2013-09-07 08:59:30	<--	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-07 08:59:38	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-07 08:59:38	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-07 08:59:38	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-07 09:00:13	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-07 09:00:20	<--	sferry (~samuel@atheme/member/samferry) has quit (Max SendQ exceeded)
2013-09-07 09:00:43	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-07 09:01:19	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 09:01:21	<--	jaepark (~jaepark@14.52.217.22) has quit (Quit: Konversation terminated!)
2013-09-07 09:01:40	<--	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-07 09:01:51	-->	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-07 09:02:34	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-07 09:02:35	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 268 seconds)
2013-09-07 09:03:28	-->	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has joined #haskell
2013-09-07 09:03:40	<--	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has quit (Quit: Leaving)
2013-09-07 09:05:56	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-07 09:06:04	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 09:08:20	-->	tabemann (~travisb@76.199.154.165) has joined #haskell
2013-09-07 09:08:26	-->	wontez3 (~wontez@ltea-047-066-044-237.pools.arcor-ip.net) has joined #haskell
2013-09-07 09:09:26	<--	wontez2 (~wontez@ltea-047-066-068-239.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-09-07 09:09:28	<--	scripty (~scripty@117.192.170.227) has quit (Ping timeout: 264 seconds)
2013-09-07 09:09:57	-->	scripty (~scripty@117.192.170.227) has joined #haskell
2013-09-07 09:12:23	<--	wontez3 (~wontez@ltea-047-066-044-237.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-09-07 09:13:34	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-07 09:14:24	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-07 09:14:24	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 09:14:32	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-07 09:14:39	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 260 seconds)
2013-09-07 09:15:49	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-07 09:15:57	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-07 09:16:03	-->	nilsi (~nilsi@61.172.24.42) has joined #haskell
2013-09-07 09:16:10	-->	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 09:17:37	-->	ioanel (~Thunderbi@188.25.18.143) has joined #haskell
2013-09-07 09:20:12	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Remote host closed the connection)
2013-09-07 09:21:25	shelf	scripty: http://www.cse.unsw.edu.au/~chak/papers/intro-computing.pdf
2013-09-07 09:22:05	<--	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has quit (Ping timeout: 245 seconds)
2013-09-07 09:22:07	<--	determinant_ (~determina@183.83.58.77) has quit (Ping timeout: 260 seconds)
2013-09-07 09:22:33	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-07 09:24:52	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 09:25:17	-->	erthalion (~erthalion@176.196.18.81) has joined #haskell
2013-09-07 09:25:29	<--	erthalion (~erthalion@176.196.18.81) has quit (Client Quit)
2013-09-07 09:26:44	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 09:26:51	--	hdevalence is now known as hdevalence|away
2013-09-07 09:27:46	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-07 09:27:57	-->	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has joined #haskell
2013-09-07 09:28:50	<--	hdevalence|away (hdevalence@gateway/shell/kde/x-mqezppsttmsrcusb) has quit (Quit: ZNC - http://znc.in)
2013-09-07 09:30:07	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-07 09:32:22	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 09:33:49	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-07 09:35:20	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-07 09:35:22	-->	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-07 09:36:09	-->	chester_ (~chester@95-25-129-196.broadband.corbina.ru) has joined #haskell
2013-09-07 09:38:14	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 256 seconds)
2013-09-07 09:40:14	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-07 09:41:30	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-07 09:42:03	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-07 09:42:29	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-09-07 09:44:04	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-07 09:44:16	-->	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-07 09:44:17	-->	functorfun (~functorfu@CPE-121-217-222-117.lnse3.cht.bigpond.net.au) has joined #haskell
2013-09-07 09:44:19	--	functorfun is now known as funfunctor
2013-09-07 09:44:23	<--	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has quit (Client Quit)
2013-09-07 09:44:31	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 09:46:23	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-07 09:48:24	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 09:49:06	 *	hackagebot crypto-random 0.0.6 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.6 (VincentHanquez)
2013-09-07 09:49:15	-->	ashnur (~ashnur@79.117.69.143) has joined #haskell
2013-09-07 09:49:22	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 09:49:36	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-07 09:49:59	-->	gpampara (~gpampara@174.136.1.66) has joined #haskell
2013-09-07 09:50:31	-->	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 09:52:55	<--	k0001 (~k0001@host97.190-138-114.telecom.net.ar) has quit (Ping timeout: 245 seconds)
2013-09-07 09:53:49	-->	exicer (~exicer@host86-144-167-201.range86-144.btcentralplus.com) has joined #haskell
2013-09-07 09:53:51	-->	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has joined #haskell
2013-09-07 09:54:16	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 09:54:22	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-07 09:56:26	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-07 09:58:54	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-07 09:58:57	-->	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has joined #haskell
2013-09-07 09:59:20	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 246 seconds)
2013-09-07 09:59:45	<--	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has quit (Quit: leaving)
2013-09-07 10:00:03	-->	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has joined #haskell
2013-09-07 10:00:03	-->	d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-09-07 10:00:24	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-07 10:00:33	<--	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has quit (Ping timeout: 268 seconds)
2013-09-07 10:00:47	<--	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has quit (Client Quit)
2013-09-07 10:01:01	-->	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has joined #haskell
2013-09-07 10:01:13	-->	shintah (bebble@h-123-173-252.a336.priv.bahnhof.se) has joined #haskell
2013-09-07 10:01:40	-->	jorick (~kciroj@94-224-181-103.access.telenet.be) has joined #haskell
2013-09-07 10:01:41	<--	jorick (~kciroj@94-224-181-103.access.telenet.be) has quit (Changing host)
2013-09-07 10:01:41	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-07 10:03:41	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 10:05:33	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-07 10:05:46	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 10:06:03	-->	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has joined #haskell
2013-09-07 10:06:15	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-09-07 10:08:39	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-09-07 10:09:07	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-07 10:10:07	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (Ping timeout: 264 seconds)
2013-09-07 10:10:30	-->	gpampara (~gpampara@174.136.1.66) has joined #haskell
2013-09-07 10:10:32	<--	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-07 10:11:11	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Quit: A good programmer is someone who always looks both ways before crossing a one-way street)
2013-09-07 10:12:39	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 10:13:38	-->	wuttf (5c142d23@gateway/web/freenode/ip.92.20.45.35) has joined #haskell
2013-09-07 10:14:16	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-07 10:14:18	wuttf	any haskell hackers here who would happily join a project but have no idea which?
2013-09-07 10:14:18	<--	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 10:14:41	Taneb	wuttf, what project are you advertising?
2013-09-07 10:15:28	wuttf	umm, not trying to advertise really, i wanna get someone to code with, im open to any projects
2013-09-07 10:15:39	wuttf	i have some pet projects but most of them are shit though :D
2013-09-07 10:16:02	-->	julmae (~no@q186.ip4.netikka.fi) has joined #haskell
2013-09-07 10:16:20	-->	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 10:16:20	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-07 10:16:40	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Ping timeout: 245 seconds)
2013-09-07 10:16:49	wuttf	never had the pleasure to hack with someone. I could join some projects but most of them look intimidating for me :D
2013-09-07 10:16:54	<--	gpampara (~gpampara@174.136.1.66) has quit (Ping timeout: 264 seconds)
2013-09-07 10:17:02	wuttf	Taneb: in hs at least
2013-09-07 10:18:00	-->	gpampara (~gpampara@174.136.1.66) has joined #haskell
2013-09-07 10:18:15	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 264 seconds)
2013-09-07 10:18:20	<--	julmac (~no@141.255.164.91) has quit (Ping timeout: 245 seconds)
2013-09-07 10:18:51	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 25.0a2/20130825004001])
2013-09-07 10:18:58	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-07 10:19:05	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-07 10:19:06	Taneb	What's your favourite pet project?
2013-09-07 10:19:49	-->	Grey_Fox2 (~chatzilla@120.147.148.171) has joined #haskell
2013-09-07 10:20:42	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 10:21:33	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-07 10:21:44	Taneb	wuttf, ?
2013-09-07 10:21:45	wuttf	Taneb: Ehh hard question. Im writing a web toolkit for my newbies to try to get them on hs. Probably that
2013-09-07 10:21:59	wuttf	but im not really working on it, so big task
2013-09-07 10:22:02	wuttf	:D
2013-09-07 10:22:24	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-07 10:22:25	<--	pierreghz (~krux@91.179.58.155) has quit (Ping timeout: 240 seconds)
2013-09-07 10:22:28	Taneb	Well, if you're interests are in web, check out Hapstack, Snap, Yesod, maybe Scotty?
2013-09-07 10:22:32	-->	jfischoff (~jfischoff@66.140.190.154) has joined #haskell
2013-09-07 10:23:07	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-07 10:23:18	wuttf	hmm
2013-09-07 10:23:35	pharaun	osm
2013-09-07 10:23:50	pharaun	sorry, isn't scotty unmaint now? but if wuttf want to pick up on that, that could be neat
2013-09-07 10:24:01	<--	scripty (~scripty@117.192.170.227) has quit (Quit: Leaving)
2013-09-07 10:24:07	wuttf	lemme check scotty
2013-09-07 10:24:08	wuttf	a minute
2013-09-07 10:24:20	zomg	I think just plain warp is pretty easy to work with
2013-09-07 10:24:25	-->	pierreghz (~krux@12.79-247-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-07 10:24:29	zomg	It is a bit lower level though
2013-09-07 10:25:25	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 10:25:42	wuttf	hm what I did is to write thin wrappers around db drivers, wai etc, which all uses the same map type, modeled after JavaScript objects, so newcomers can have a full stack without
2013-09-07 10:25:53	wuttf	dealing with a lot of different types
2013-09-07 10:26:08	wuttf	somethign like that would be my idea
2013-09-07 10:26:10	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 10:27:25	kuribas	In "f x | x < 5 = 2", is f strict in x?
2013-09-07 10:28:09	-->	maxiepoo_ (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 10:28:20	johnw	> let f x | x < 5 = 2 in f undefined
2013-09-07 10:28:21	lambdabot	  *Exception: Prelude.undefined
2013-09-07 10:28:24	johnw	seems so
2013-09-07 10:28:44	kuribas	Does ghc know when a function is strict in nf?
2013-09-07 10:28:58	kuribas	That it evaluates a whole list for example.
2013-09-07 10:29:11	johnw	i don't follow
2013-09-07 10:29:28	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 10:29:28	--	maxiepoo_ is now known as maxiepoo
2013-09-07 10:30:00	kuribas	For example "f a b c = sum [a, b, c]".  Will ghc figure out f is strict in a, b and c?
2013-09-07 10:30:24	johnw	based on that definition, f is not strict in any argument
2013-09-07 10:30:54	johnw	because it can return the sum call without evaluating the arguments
2013-09-07 10:31:04	kuribas	> let f a b c = sum [a, b, c] in f undefined 2 3
2013-09-07 10:31:05	lambdabot	  *Exception: Prelude.undefined
2013-09-07 10:31:16	kuribas	It's strict...
2013-09-07 10:31:17	johnw	that's happening due to an implicit print
2013-09-07 10:31:31	johnw	you're calling f, then evaluating the return value in order to print it
2013-09-07 10:31:42	johnw	f isn't strict, it's lambdabot forcing the evaluation of the return value
2013-09-07 10:32:21	kuribas	johnw: That's also true of the first function.
2013-09-07 10:32:29	johnw	> let f a b c = sum [a, b, c] in length $ f undefined 2 3
2013-09-07 10:32:31	lambdabot	  No instance for (GHC.Num.Num [a0]) arising from a use of `f'
2013-09-07 10:32:32	lambdabot	 Possible fix:...
2013-09-07 10:32:35	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Ping timeout: 260 seconds)
2013-09-07 10:32:38	wuttf	is there a generic zero value for types?
2013-09-07 10:33:07	johnw	kuribas: in the former case, it was forced by the <, which happened before f returned
2013-09-07 10:33:43	wuttf	I want to   Maybe a -> (a, Bool)
2013-09-07 10:33:52	<--	jfischoff (~jfischoff@66.140.190.154) has quit (Quit: jfischoff)
2013-09-07 10:33:54	wuttf	where Bool is False in case of Nothing and True in case of just
2013-09-07 10:34:24	johnw	> let f a b c = sum [a, b, c] in length [f undefined 2 3]
2013-09-07 10:34:25	lambdabot	  1
2013-09-07 10:34:30	johnw	> let f !a b c = sum [a, b, c] in length [f undefined 2 3]
2013-09-07 10:34:31	lambdabot	  1
2013-09-07 10:35:19	kuribas	> let f x | x < 5 = 2 in length [f undefined 2 3]
2013-09-07 10:35:21	lambdabot	  No instance for (GHC.Num.Num a2) arising from the literal `3'
2013-09-07 10:35:22	lambdabot	 The type var...
2013-09-07 10:35:23	johnw	hmm.. in that case it's not even going to call f
2013-09-07 10:35:33	kuribas	> let f x | x < 5 = 2 in length [(f 2) undefined 2 3]
2013-09-07 10:35:34	lambdabot	  No instance for (GHC.Num.Num a3) arising from the literal `3'
2013-09-07 10:35:35	lambdabot	 The type var...
2013-09-07 10:35:50	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 245 seconds)
2013-09-07 10:35:55	kuribas	> let f x | x < 5 = 2 in length [f 2, undefined, 2, 3]
2013-09-07 10:35:56	lambdabot	  4
2013-09-07 10:36:03	kuribas	johnw: Which is my point.
2013-09-07 10:36:05	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-07 10:36:15	johnw	i just said that f isn't evaluated in that example
2013-09-07 10:36:23	-->	krivenok (5d649386@gateway/web/freenode/ip.93.100.147.134) has joined #haskell
2013-09-07 10:36:27	johnw	f is strict if it evaluates its arguments
2013-09-07 10:36:32	johnw	your first function did, your second didn't
2013-09-07 10:36:42	kuribas	Yes it does.
2013-09-07 10:36:52	johnw	how so?
2013-09-07 10:36:59	kuribas	sum is strict in it's elements.
2013-09-07 10:37:08	johnw	but f doesn't call sum
2013-09-07 10:37:08	kuribas	> sum [undefined, 1, 2]
2013-09-07 10:37:09	lambdabot	  *Exception: Prelude.undefined
2013-09-07 10:37:11	johnw	it returns a call to sum
2013-09-07 10:37:31	kuribas	That doesn't make sense for me.
2013-09-07 10:38:08	-->	nova_ (~nova@catv-86-101-199-145.catv.broadband.hu) has joined #haskell
2013-09-07 10:38:11	johnw	f doesn't need to evaluate a, b or c in order to return the call to sum using a, b and c
2013-09-07 10:38:23	johnw	so any strictness you're observing here relates to sum, not f
2013-09-07 10:39:05	-->	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-09-07 10:40:26	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 240 seconds)
2013-09-07 10:40:51	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-09-07 10:41:06	kuribas	What's the definition of strict?
2013-09-07 10:41:21	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-07 10:41:40	johnw	"A function f is said to be strict if, when applied to a nonterminating expression, it also fails to terminate."
2013-09-07 10:41:56	kuribas	Then my function is strict.
2013-09-07 10:42:01	johnw	i guess it is
2013-09-07 10:42:03	-->	SoupEvil (~jloos@g225196088.adsl.alicedsl.de) has joined #haskell
2013-09-07 10:42:28	kuribas	because f _|_ b c = _|_
2013-09-07 10:42:55	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-07 10:43:11	-->	yfyf (~yfyf@wcw-stud-239-204.wireless.uva.nl) has joined #haskell
2013-09-07 10:43:44	krivenok	Hello folks. I've just started learning haskell and implemented starightforward solution for euler project problem #401. My solution "looks" fine for me, but answer is wrong, so I guess I misunderstand something. Could you please look at my script (http://pastebin.com/G7sxTH2P) and point me to the right direction?
2013-09-07 10:43:55	mauke	The paste G7sxTH2P has been copied to http://lpaste.net/92685
2013-09-07 10:43:58	<--	kofno (~ryan@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-07 10:44:17	johnw	kuribas: another website says, "A strict function is a function whose arguments are evaluated before the body is."
2013-09-07 10:44:24	johnw	according to that definition, f is not strict
2013-09-07 10:44:35	kuribas	yes
2013-09-07 10:45:26	<--	SoupE (~jloos@f048157229.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-09-07 10:46:26	johnw	but I think an argument can be made here that your f is operationally equivalent to a strict function, even if perhaps it is not strict by definition (in that it doesn't evaluate its arguments, it simply yields a value which, when itself evaluation, will always force the evaluation of those arguments)
2013-09-07 10:46:37	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-07 10:46:52	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-09-07 10:47:13	-->	uvelichitel (~uvelichit@37.73.198.67) has joined #haskell
2013-09-07 10:48:28	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-07 10:48:32	<--	td123 (~thomas-dz@archlinux/developer/td123) has quit (Quit: WeeChat 0.4.1)
2013-09-07 10:48:38	kuribas	In any case, my question is if ghc will consider the second function as strict?
2013-09-07 10:48:57	johnw	I'm sorry to confuse the matter then; I don't know the answer to that question
2013-09-07 10:49:15	-->	Paprikac_ (~Paprikach@178.113.40.195.wireless.dyn.drei.com) has joined #haskell
2013-09-07 10:49:40	kuribas	johnw: According to this, the second f is strict: http://en.wikibooks.org/wiki/Haskell/Denotational_semantics#Strict_Functions
2013-09-07 10:49:50	mero	hi, profiling a program revealed that it spends about 50% of the time in "make" defined here: http://lpaste.net/92686 I figure this will improve when switching from String to Data.Text or ByteString.. or is there another problem with these two functions?
2013-09-07 10:50:19	<--	funfunctor (~functorfu@CPE-121-217-222-117.lnse3.cht.bigpond.net.au) has quit (Ping timeout: 260 seconds)
2013-09-07 10:50:25	-->	ijp (~user@host81-155-29-103.range81-155.btcentralplus.com) has joined #haskell
2013-09-07 10:50:43	johnw	kuribas: ok, thanks for pointing that out
2013-09-07 10:50:46	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 256 seconds)
2013-09-07 10:50:57	<--	ijp (~user@host81-155-29-103.range81-155.btcentralplus.com) has left #haskell
2013-09-07 10:51:07	<--	Paprikachu (~Paprikach@178.113.56.61.wireless.dyn.drei.com) has quit (Ping timeout: 264 seconds)
2013-09-07 10:51:14	hiptobecubic	krivenok, I would say that you probably missed the point of this problem and that haskell's lazy eval makes it unfairly easy
2013-09-07 10:52:05	-->	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has joined #haskell
2013-09-07 10:52:11	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-07 10:52:20	kuribas	johnw: Though it only says something about one argument functions.
2013-09-07 10:52:21	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 10:52:32	-->	bitonic` (~user@ppp-188-144.27-151.libero.it) has joined #haskell
2013-09-07 10:52:33	-->	determinant_ (~determina@2001:4898:7020:301a:e516:bd37:9388:947f) has joined #haskell
2013-09-07 10:52:35	johnw	it later generalizes
2013-09-07 10:52:48	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-09-07 10:52:50	kuribas	Ah, yes.
2013-09-07 10:53:01	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-07 10:53:21	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-07 10:53:54	krivenok	hiptobecubic: yep, implementing it in haskell should be easy, but my program doesn't produce correct result. honestly, I have no idea where the bug is...
2013-09-07 10:54:24	<--	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-07 10:55:09	ski	> let f a b c = sum [a, b, c] in f undefined 2 3 `seq` ()  -- no implicit `print'
2013-09-07 10:55:11	lambdabot	  *Exception: Prelude.undefined
2013-09-07 10:55:27	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-07 10:57:28	<--	LAMMJohnson (~ja@user-5af4328f.broadband.tesco.net) has quit (Ping timeout: 260 seconds)
2013-09-07 10:57:46	<--	m0g (~mog@88.191.117.112) has quit (Quit: leaving)
2013-09-07 10:58:11	-->	m0g (~mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 10:58:19	-->	madjestic (~madjestic@31.21.253.66) has joined #haskell
2013-09-07 10:59:55	-->	ts33kr (~ts33kr@193.34.60.110) has joined #haskell
2013-09-07 10:59:55	<--	m0g (~mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 11:00:36	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 11:02:15	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Remote host closed the connection)
2013-09-07 11:02:19	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 11:02:49	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-07 11:03:25	mm_freak	ocharles: http://lpaste.net/92687
2013-09-07 11:03:32	mm_freak	a simple clock drawn using netwire-gloss
2013-09-07 11:03:51	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 11:06:06	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-07 11:06:07	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 11:06:19	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 11:06:40	kuribas	So a function can be strict even when it doesn't evaluate it's arguments.
2013-09-07 11:06:56	kuribas	for example f a b = undefined.
2013-09-07 11:07:17	mm_freak	kuribas: yes
2013-09-07 11:08:10	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-07 11:08:38	<--	otulp (~otulp@cm-84.209.90.171.getinternet.no) has quit (Ping timeout: 246 seconds)
2013-09-07 11:08:45	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-07 11:08:59	mm_freak	ocharles: http://hub.darcs.net/ertes/netwire-gloss
2013-09-07 11:09:22	-->	eleazar (~quassel@90.173.198.48) has joined #haskell
2013-09-07 11:09:47	--	eleazar is now known as Guest45476
2013-09-07 11:10:18	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-07 11:10:21	--	Guest45476 is now known as elediaz
2013-09-07 11:10:33	-->	otulp (~otulp@cm-84.209.90.171.getinternet.no) has joined #haskell
2013-09-07 11:10:43	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 264 seconds)
2013-09-07 11:10:54	<--	elediaz (~quassel@90.173.198.48) has quit (Remote host closed the connection)
2013-09-07 11:14:13	 *	hackagebot google-mail-filters 0.0.1.0 - Write GMail filters and output to importable XML  http://hackage.haskell.org/package/google-mail-filters-0.0.1.0 (LiyangHu)
2013-09-07 11:16:13	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-07 11:16:27	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 264 seconds)
2013-09-07 11:16:45	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-07 11:16:54	-->	julmac (~no@141.255.164.89) has joined #haskell
2013-09-07 11:18:11	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 11:18:38	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-07 11:18:57	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-07 11:19:27	<--	julmae (~no@q186.ip4.netikka.fi) has quit (Ping timeout: 264 seconds)
2013-09-07 11:20:16	<--	nova_ (~nova@catv-86-101-199-145.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-07 11:20:39	-->	hrehf (~s@krlh-5f71c4dc.pool.mediaWays.net) has joined #haskell
2013-09-07 11:20:55	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-07 11:21:03	-->	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-07 11:21:11	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-07 11:21:27	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 240 seconds)
2013-09-07 11:21:48	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-07 11:22:43	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-07 11:23:30	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-07 11:23:48	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 268 seconds)
2013-09-07 11:23:51	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 11:24:10	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 11:24:25	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 268 seconds)
2013-09-07 11:26:18	-->	artyomkazak (~artyomkaz@94.25.229.87) has joined #haskell
2013-09-07 11:26:19	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 11:26:36	-->	zh217 (~zh217@li428-181.members.linode.com) has joined #haskell
2013-09-07 11:27:03	-->	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has joined #haskell
2013-09-07 11:27:41	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-07 11:27:41	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-09-07 11:27:41	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 11:28:01	<--	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has quit (Quit: jkoppel)
2013-09-07 11:28:48	-->	zcourts (~zcourts@176.254.253.235) has joined #haskell
2013-09-07 11:29:43	-->	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has joined #haskell
2013-09-07 11:30:58	<--	ts33kr (~ts33kr@193.34.60.110) has quit (Quit: Computer has gone to sleep.)
2013-09-07 11:31:24	-->	ts33kr (~ts33kr@193.34.60.110) has joined #haskell
2013-09-07 11:33:27	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-07 11:33:30	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-07 11:33:43	-->	peterhil (~peterhil@dsl-hkibrasgw3-58c02b-45.dhcp.inet.fi) has joined #haskell
2013-09-07 11:33:58	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 248 seconds)
2013-09-07 11:35:38	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 11:35:40	<--	madjestic (~madjestic@31.21.253.66) has quit (Read error: Connection reset by peer)
2013-09-07 11:38:02	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-07 11:38:51	<--	ts33kr (~ts33kr@193.34.60.110) has quit (Ping timeout: 260 seconds)
2013-09-07 11:38:58	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-07 11:39:28	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 264 seconds)
2013-09-07 11:39:32	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-07 11:41:04	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 11:41:44	-->	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 11:42:22	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-07 11:42:30	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-07 11:42:52	-->	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has joined #haskell
2013-09-07 11:43:18	<--	tooxie (~paranoid@g225065226.adsl.alicedsl.de) has quit (Quit: Leaving)
2013-09-07 11:44:06	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-07 11:44:15	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-07 11:44:22	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-07 11:44:49	-->	matheus23 (~quassel@p4FDF2504.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 11:44:57	<--	krivenok (5d649386@gateway/web/freenode/ip.93.100.147.134) has quit (Quit: Page closed)
2013-09-07 11:45:12	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-07 11:45:40	<--	Grey_Fox2 (~chatzilla@120.147.148.171) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-07 11:46:17	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-07 11:46:49	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-07 11:47:43	<--	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has quit (Quit: jkoppel)
2013-09-07 11:47:49	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-07 11:48:08	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 11:48:24	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 11:48:37	-->	zbcm (~zbcm@CPE-60-231-179-161.lns4.dav.bigpond.net.au) has joined #haskell
2013-09-07 11:49:18	wuttf	How efficient is the Data.Text type?
2013-09-07 11:49:24	pharaun	hah i was going to write a package like ^
2013-09-07 11:49:28	pharaun	guess someone beat me to it :)
2013-09-07 11:50:35	donri	wuttf: ETOOBROADQUESTION
2013-09-07 11:50:47	wuttf	donri: lulz
2013-09-07 11:50:59	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-07 11:51:03	wuttf	donri: is it bad if I use it for http responses instead of lazybytestrings?
2013-09-07 11:51:11	wuttf	donri: i guess a sane http response is no more than half a meg
2013-09-07 11:51:14	donri	wuttf: it's a utf16 bytestring with stream fusion
2013-09-07 11:51:33	wuttf	donri: so in the order of 1-2 megs? okay to use it?
2013-09-07 11:51:43	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-07 11:51:49	donri	wuttf: certainly. there's lazy text too btw.
2013-09-07 11:52:19	wuttf	donri: no worries probably i will return JSONs anyway
2013-09-07 11:52:26	wuttf	donri: and those are small
2013-09-07 11:52:29	donri	wuttf: what type of response? if the response is data text would likely be wrong
2013-09-07 11:52:43	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 11:53:02	wuttf	donri: u mean in cas eof binary or sumtin like that?
2013-09-07 11:53:16	donri	wuttf: for json you probably want to use say aeson and then render it to a bytestring with the appropriate content-type
2013-09-07 11:53:47	wuttf	donri: ahh okay
2013-09-07 11:53:53	wuttf	donri: sticking with bytestrings then
2013-09-07 11:54:15	donri	wuttf: just make sure you send the right content type :) aeson is utf-8
2013-09-07 11:55:15	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 268 seconds)
2013-09-07 11:55:28	wuttf	donri: ahh I see
2013-09-07 11:55:32	-->	quchen (~quchen@84.170.6.221) has joined #haskell
2013-09-07 11:55:38	wuttf	donri: shit!
2013-09-07 11:55:45	donri	wuttf: anyway you can't actually send Text over the wire so whatever you do it's gonna get sent as a bytestring, sort of. the important thing to consider is the encoding.
2013-09-07 11:56:00	wuttf	minute bruv
2013-09-07 11:56:03	donri	Text is a mirage, an abstraction
2013-09-07 11:56:29	-->	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has joined #haskell
2013-09-07 11:56:35	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-07 11:56:37	-->	u_ (~phillip@adsl-75-57-179-17.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-07 11:56:44	wuttf	donri: i totally get you
2013-09-07 11:56:50	donri	but if you're working with "human" text, you should probably use Text internally
2013-09-07 11:57:12	donri	working with bytestring for human text is like processing xml without a parser
2013-09-07 11:57:56	<--	peterhil (~peterhil@dsl-hkibrasgw3-58c02b-45.dhcp.inet.fi) has quit (Read error: Operation timed out)
2013-09-07 11:58:52	wuttf	donri: I use regexes to parse xml
2013-09-07 11:58:59	wuttf	donri: just kidding :D
2013-09-07 11:59:04	donri	wuttf: the door is that way ->
2013-09-07 11:59:15	<--	zh217 (~zh217@li428-181.members.linode.com) has quit (Quit: zh217)
2013-09-07 11:59:18	-->	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has joined #haskell
2013-09-07 11:59:38	merijn	donri: Wait...utf16? Where is that said? I thought it was some other more efficient encoding
2013-09-07 11:59:55	<--	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has quit (Ping timeout: 264 seconds)
2013-09-07 12:00:40	<--	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has quit (Client Quit)
2013-09-07 12:00:50	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 245 seconds)
2013-09-07 12:01:04	<--	zcourts (~zcourts@176.254.253.235) has quit (Ping timeout: 264 seconds)
2013-09-07 12:01:13	<--	wbruce_ (~wbruce@c-98-246-217-110.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2013-09-07 12:01:25	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-07 12:01:35	<--	rnons (~rnons@183.152.60.69) has quit (Read error: Connection reset by peer)
2013-09-07 12:01:51	<--	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Remote host closed the connection)
2013-09-07 12:01:53	mm_freak	merijn: what would be more efficient?
2013-09-07 12:02:12	donri	merijn: http://hackage.haskell.org/packages/archive/text/0.11.3.1/doc/html/Data-Text-Foreign.html#g:1
2013-09-07 12:03:16	<--	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has quit (Ping timeout: 268 seconds)
2013-09-07 12:03:17	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 12:03:24	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-09-07 12:03:35	donri	merijn: jasper did a gsoc for utf-8 but it didn't get merged http://jaspervdj.be/posts/2011-08-19-text-utf8-the-aftermath.html
2013-09-07 12:04:26	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-09-07 12:05:14	mm_freak	merijn: btw, you may be interested in that, too:  http://lpaste.net/92687
2013-09-07 12:05:25	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Read error: Connection reset by peer)
2013-09-07 12:05:46	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-07 12:05:47	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-07 12:06:03	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-07 12:07:10	Lethalman	mm_freak, nice
2013-09-07 12:07:56	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-07 12:08:03	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 264 seconds)
2013-09-07 12:08:05	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Read error: Connection reset by peer)
2013-09-07 12:08:06	Lethalman	mm_freak, shouldn't hours be 3600 though? :P
2013-09-07 12:08:25	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Quit: amosr)
2013-09-07 12:09:14	<--	statusfailed (~statusfai@statusfailed.com) has quit (Quit: leaving)
2013-09-07 12:09:39	-->	visof (~visof@41.130.70.208) has joined #haskell
2013-09-07 12:10:02	-->	Awall (~genesis@124.115.173.228) has joined #haskell
2013-09-07 12:10:23	<--	Awall (~genesis@124.115.173.228) has quit (Client Quit)
2013-09-07 12:10:47	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-07 12:11:17	mm_freak	Lethalman: see the annotation =)
2013-09-07 12:11:20	-->	sf (~sf@statusfailed.com) has joined #haskell
2013-09-07 12:11:20	<--	sf (~sf@statusfailed.com) has quit (Client Quit)
2013-09-07 12:11:46	Lethalman	ah
2013-09-07 12:12:04	mm_freak	i could write this much simpler, but i wanted to demonstrate events
2013-09-07 12:12:07	-->	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has joined #haskell
2013-09-07 12:13:13	-->	statusfailed (~statusfai@statusfailed.com) has joined #haskell
2013-09-07 12:13:27	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-07 12:15:12	-->	eriksensei (~eriksense@546b12fd.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-07 12:15:37	<--	hrehf (~s@krlh-5f71c4dc.pool.mediaWays.net) has quit (Quit: bfg)
2013-09-07 12:16:36	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-07 12:16:53	-->	timblechmann (~quassel@91-119-96-207.dynamic.xdsl-line.inode.at) has joined #haskell
2013-09-07 12:17:05	<--	b0c1 (b0c1@javaportal.hu) has quit (Remote host closed the connection)
2013-09-07 12:18:05	-->	nh2 (~niklas@r002213.203112.miinet.jp) has joined #haskell
2013-09-07 12:18:12	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 260 seconds)
2013-09-07 12:18:31	hpaste	tm pasted “No title” at http://lpaste.net/2560525490305630208
2013-09-07 12:18:37	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 12:19:14	timblechmann	hi, i'm trying to get into haskell, but have some troubles with passing string arguments ... see http://lpaste.net/2560525490305630208
2013-09-07 12:19:38	timblechmann	passing a string as argument works fine, but trying to concatenate causes an error ...
2013-09-07 12:19:53	timblechmann	probably a stupid newbie problem
2013-09-07 12:19:53	timblechmann	any idea?
2013-09-07 12:19:57	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Read error: Operation timed out)
2013-09-07 12:19:57	<--	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has quit (Quit: Leaving)
2013-09-07 12:20:08	danr	timblechmann: does it say that ++ is ambiguous? (either from Data.Tex or Prelude)
2013-09-07 12:20:17	danr	the newbie problem is that you haven't written what error you got :)
2013-09-07 12:20:30	<--	totte (~totte@unaffiliated/totte) has quit (Quit: Bye!)
2013-09-07 12:20:32	<--	codesoup (~codesoup@69-196-172-93.dsl.teksavvy.com) has quit (Ping timeout: 268 seconds)
2013-09-07 12:21:02	timblechmann	danr: sry for that: Couldn't match expected type `Data.Text.Internal.Text with actual type `[a0]'
2013-09-07 12:22:13	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-07 12:22:39	merijn	mm_freak: Well, utf-8 for one
2013-09-07 12:22:51	-->	maxter_ (~maxter@sundownness.lullaby.volia.net) has joined #haskell
2013-09-07 12:22:55	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-07 12:23:07	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Read error: Connection reset by peer)
2013-09-07 12:23:10	merijn	mm_freak: Neat, I'll check it out :)
2013-09-07 12:23:17	-->	maxter__ (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 12:23:36	timblechmann	danr: so from my understanding, it expects a Text, but receives a function? maybe i somehow have to evaluate it explicitly?
2013-09-07 12:23:37	-->	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has joined #haskell
2013-09-07 12:23:47	danr	oh
2013-09-07 12:23:54	danr	timblechmann: you forgot to write do after verbosely $
2013-09-07 12:24:05	<--	milessabin (~miles@private.milessabin.com) has quit (Quit: Konversation terminated!)
2013-09-07 12:24:24	ski	@hoogle Text -> Text -> Text
2013-09-07 12:24:24	lambdabot	Data.Text append :: Text -> Text -> Text
2013-09-07 12:24:25	lambdabot	Data.Text.Lazy append :: Text -> Text -> Text
2013-09-07 12:24:25	lambdabot	Data.Text.Lazy.Internal chunk :: Text -> Text -> Text
2013-09-07 12:24:35	Zenol	timblechmann: [a0] is "a list of something"
2013-09-07 12:24:46	mm_freak	merijn: UTF-8 is only faster for english
2013-09-07 12:24:54	mm_freak	for pretty much every other language it's slower
2013-09-07 12:24:57	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-09-07 12:25:13	Zenol	timblechmann: It expect a Data.Text but received a [Char]. One way is to "pack" your string into Text (Data.Text pack)
2013-09-07 12:25:22	mm_freak	merijn: see the article donri linked
2013-09-07 12:25:29	timblechmann	danr: ok, that's from reducing the test case
2013-09-07 12:26:17	timblechmann	Zenol: ok, let me see
2013-09-07 12:26:26	mm_freak	timblechmann: i suggest that you try without OverloadedStrings for now
2013-09-07 12:26:48	mm_freak	timblechmann: that makes the error messages more beginner-friendly and helps you understand where what kind of argument is expected and where conversion needs to occur
2013-09-07 12:27:02	timblechmann	mm_freak: i see
2013-09-07 12:27:05	<--	maxter_ (~maxter@sundownness.lullaby.volia.net) has quit (Ping timeout: 245 seconds)
2013-09-07 12:27:11	danr	what's with this default magic? I've never had to use the default keyword
2013-09-07 12:27:30	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-09-07 12:27:43	mm_freak	danr: it makes Text the default for string literals
2013-09-07 12:27:54	mm_freak	in combination with OverloadedStrings
2013-09-07 12:28:00	-->	artyomkazak1 (~artyomkaz@host-75-159-66-217.spbmts.ru) has joined #haskell
2013-09-07 12:28:02	mm_freak	you don't really need it
2013-09-07 12:28:27	danr	mm_freak: I see
2013-09-07 12:28:43	<--	artyomkazak (~artyomkaz@94.25.229.87) has quit (Ping timeout: 264 seconds)
2013-09-07 12:28:45	danr	mm_freak: so this only applies when the type cannot be inferred?
2013-09-07 12:28:49	mm_freak	not sure what the shelly tutorial suggests to use though =)
2013-09-07 12:29:02	danr	it's on the top of the documentation here: http://hackage.haskell.org/packages/archive/shelly/1.3.0.7/doc/html/Shelly.html
2013-09-07 12:29:23	mm_freak	danr: when the inferred type is ambiguous…  i don't know the exact resolving rules though
2013-09-07 12:29:32	mm_freak	it's really the same as this:
2013-09-07 12:29:34	mm_freak	> 2 + 3
2013-09-07 12:29:35	lambdabot	  5
2013-09-07 12:29:52	danr	mm_freak: yeah, I'm with you
2013-09-07 12:29:55	mm_freak	the type of that expression is polymorphic and ambiguous…  defaulting just arbitrarily picks Integer for convenience
2013-09-07 12:30:00	mm_freak	:t 2 + 3
2013-09-07 12:30:01	lambdabot	Num a => a
2013-09-07 12:30:23	-->	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 12:31:03	<--	FreakyPe1guin (~FreakyPen@sv0.famkaufmann.info) has quit (Ping timeout: 248 seconds)
2013-09-07 12:31:56	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-07 12:32:42	timblechmann	danr, mm_freak: afaict OverloadedStrings simplifies the use of shelly ... that's why it is suggested
2013-09-07 12:32:42	<--	Paprikac_ (~Paprikach@178.113.40.195.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-07 12:33:21	mm_freak	timblechmann: it simplifies the use of pretty much any library that uses non-String types heavily
2013-09-07 12:33:31	timblechmann	mm_freak: :)
2013-09-07 12:33:58	ski	timblechmann : you could probably use `append' instead of `(++)' .. or make the latter an alias of the former
2013-09-07 12:34:21	mm_freak	import Data.Monoid and use (<>)
2013-09-07 12:34:49	ski	.. or that
2013-09-07 12:35:38	-->	eldariof (~CLD@188.168.234.54) has joined #haskell
2013-09-07 12:36:06	timblechmann	mm_freak, ski: append did not help (Data.Text.Internal.Text vs Text) ... Monoid and <> seem to work, though
2013-09-07 12:36:18	timblechmann	note to myself: figure out what it does
2013-09-07 12:36:35	-->	rnons (~rnons@183.152.60.69) has joined #haskell
2013-09-07 12:36:40	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 245 seconds)
2013-09-07 12:36:48	mm_freak	timblechmann: (<>) is about the most general "append" you can get
2013-09-07 12:37:00	-->	FreakyPenguin (~FreakyPen@sv0.famkaufmann.info) has joined #haskell
2013-09-07 12:37:17	timblechmann	mm_freak: i see
2013-09-07 12:37:30	mm_freak	here is a witness for how general it is:
2013-09-07 12:37:37	mm_freak	> (id <> reverse) "abc"
2013-09-07 12:37:37	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-07 12:37:39	lambdabot	  "abccba"
2013-09-07 12:37:40	mm_freak	=)
2013-09-07 12:38:02	Zenol	?!
2013-09-07 12:38:03	lambdabot	Maybe you meant: v @ ? .
2013-09-07 12:38:26	Zenol	What does <> on a -> a ?
2013-09-07 12:38:33	mm_freak	if b is a monoid, then a -> b is also a monoid
2013-09-07 12:38:39	mm_freak	(f <> g) x = f x <> g x
2013-09-07 12:38:48	Zenol	:o
2013-09-07 12:38:52	Zenol	Ok :)
2013-09-07 12:39:01	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 12:39:09	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 12:39:29	Zenol	Yeh, the same way {f : E -> R} have a sum, product, etc.
2013-09-07 12:39:38	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (Quit: WeeChat 0.4.2-rc1)
2013-09-07 12:40:51	mm_freak	i don't understand that
2013-09-07 12:40:59	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-07 12:41:12	--	Philonous__ is now known as Philonous
2013-09-07 12:41:41	mm_freak	ah, yes
2013-09-07 12:41:44	Zenol	r, the right writing would be {f | f : E --> IR} where IR is the set of real numbers, E an arbitrary set, and f a function.
2013-09-07 12:41:49	mm_freak	> (sin + 2*cos) 15
2013-09-07 12:41:49	lambdabot	  No instance for (GHC.Show.Show a0)
2013-09-07 12:41:50	lambdabot	   arising from a use of `M240218564.sho...
2013-09-07 12:41:58	mm_freak	> (sin + 2*cos) 15 :: Double
2013-09-07 12:41:59	lambdabot	  No instance for (GHC.Num.Num
2013-09-07 12:41:59	lambdabot	                    (GHC.Types.Double -> GHC.T...
2013-09-07 12:42:12	mm_freak	oh, apparently it was removed
2013-09-07 12:42:27	mm_freak	> liftA2 (\x y -> x + 2*y) sin cos 15
2013-09-07 12:42:28	lambdabot	  -0.8690879855605258
2013-09-07 12:42:51	mm_freak	and yeah, (<>) = liftA2 (<>)
2013-09-07 12:43:34	-->	Paprikachu (~Paprikach@178.113.40.195.wireless.dyn.drei.com) has joined #haskell
2013-09-07 12:43:52	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 12:43:53	-->	thr33strikes (~wontez@ltea-047-066-097-021.pools.arcor-ip.net) has joined #haskell
2013-09-07 12:44:20	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-07 12:45:18	-->	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has joined #haskell
2013-09-07 12:46:16	<--	earthy (~arthurvl@illipe.xs4all.nl) has quit (Quit: tijd voor reboot)
2013-09-07 12:47:06	Ghoul_	:( lots of discussion on leftToMaybe and isLeft and things, but no sign of a `bool` in sight
2013-09-07 12:47:19	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 12:48:16	Zenol	Ghoul_: You mean Bool -> a -> Maybe a ?
2013-09-07 12:48:31	donri	a -> a -> Bool -> a, please
2013-09-07 12:48:33	Ghoul_	Bool -> a -> a -> a
2013-09-07 12:48:36	Ghoul_	or something like that
2013-09-07 12:48:41	Ghoul_	what donri suggested
2013-09-07 12:48:59	Ghoul_	basically short-hand if that doesn't look so ridiculous
2013-09-07 12:49:37	donri	it composes better and is consistent with the other catamorphisms like maybe and either and the fold functions
2013-09-07 12:49:37	mm_freak	maybe the mistake is to use Bool in the first place
2013-09-07 12:51:09	-->	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-07 12:51:18	mm_freak	:t F.foldr . const . const
2013-09-07 12:51:19	lambdabot	Foldable t => b -> b -> t a -> b
2013-09-07 12:51:29	mm_freak	there is your a -> a -> Bool -> a
2013-09-07 12:51:52	Zenol	@let ifte v1 v2 t = if t then v1 else v2
2013-09-07 12:51:54	lambdabot	 Defined.
2013-09-07 12:52:04	Zenol	> 3 `ifte` 5 $ True
2013-09-07 12:52:09	lambdabot	  3
2013-09-07 12:52:20	Zenol	seams cool.
2013-09-07 12:52:48	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Remote host closed the connection)
2013-09-07 12:54:18	<--	eldariof (~CLD@188.168.234.54) has quit (Ping timeout: 256 seconds)
2013-09-07 12:54:24	Ghoul_	mm_freak: why don't you like it?
2013-09-07 12:54:37	mm_freak	because i don't like Bool in general
2013-09-07 12:55:06	mm_freak	Ghoul_: here is a good explanation: http://existentialtype.wordpress.com/2011/03/15/boolean-blindness/
2013-09-07 12:55:25	<--	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-09-07 12:55:33	<--	maxter__ (~maxter@gaffeless.chaperon.volia.net) has quit (Quit: Konversation terminated!)
2013-09-07 12:56:46	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-07 12:57:29	donri	> (F.foldr . const . const) 1 2 False
2013-09-07 12:57:31	lambdabot	  Couldn't match expected type `t0 a0'
2013-09-07 12:57:31	lambdabot	             with actual type `GHC.Typ...
2013-09-07 12:58:15	Ghoul_	its all nice and stuff to say that we shouldn't have it because it's better to not cobble information and blah blah
2013-09-07 12:58:22	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 12:58:31	Ghoul_	but its honestly a PITA when you need it
2013-09-07 12:58:42	Ghoul_	inline-if's look terrible and/or mucl up indentation
2013-09-07 12:58:44	Ghoul_	*muck
2013-09-07 12:58:45	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-09-07 12:59:12	-->	artyomkazak (~artyomkaz@94.25.229.91) has joined #haskell
2013-09-07 12:59:25	donri	and doesn't compose pointfree
2013-09-07 12:59:47	Ghoul_	they're trying to fix that with lambda if and lambda case
2013-09-07 12:59:54	Ghoul_	but they look pretty wierd imho
2013-09-07 13:00:03	merijn	Ghoul_: You probably meant MultiwayIf?
2013-09-07 13:00:05	-->	Grey_Fox2 (~chatzilla@120.147.148.171) has joined #haskell
2013-09-07 13:00:16	mm_freak	Ghoul_: the point is that you don't really need booleans in most cases
2013-09-07 13:00:19	merijn	There is no lambda if, unless I missed something really major
2013-09-07 13:00:31	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-07 13:00:32	donri	haha yeah lets add LambdaIf instead of `bool`
2013-09-07 13:00:33	Ghoul_	I saw on trac a thing in development to allow something like this
2013-09-07 13:00:36	-->	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-07 13:00:43	Ghoul_	(if then 1 else 2) True
2013-09-07 13:00:53	Ghoul_	(or something along those lines. Let me hunt it down)
2013-09-07 13:00:58	merijn	maybe, but that doesn't exist atm
2013-09-07 13:01:04	merijn	unlike lambda case, which does exist
2013-09-07 13:01:07	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-07 13:01:14	<--	artyomkazak1 (~artyomkaz@host-75-159-66-217.spbmts.ru) has quit (Ping timeout: 268 seconds)
2013-09-07 13:01:21	mm_freak	if we ever get Bool out of the Prelude, i wouldn't miss it for a second =)
2013-09-07 13:01:57	Ghoul_	how do you do a foldUntil or dropWhile without bool?
2013-09-07 13:02:10	mm_freak	Ghoul_: let me pick a simpler example: (==)
2013-09-07 13:02:26	mm_freak	(==) :: (Alternative f, Eq a) => a -> a -> f a
2013-09-07 13:02:44	mm_freak	if x and y are equal, the result is pure x, otherwise empty
2013-09-07 13:02:59	Zenol	Question. How would you do, without bolean, to select the value 3 if v1 is the same as v2, and 4 if v1 is not the same as v2.
2013-09-07 13:03:04	Zenol	So, without == or /=.
2013-09-07 13:03:32	Ghoul_	That would increase the entry level to haskell by like.. more than it is already
2013-09-07 13:03:35	mm_freak	Zenol: you need an equality function, but you don't need Bool
2013-09-07 13:03:42	mm_freak	Ghoul_: sure
2013-09-07 13:03:57	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-07 13:04:00	Ghoul_	okay ,what if you need to compare two "bools" without bools?
2013-09-07 13:04:08	Zenol	oh, that what you just wrote
2013-09-07 13:04:13	mm_freak	Ghoul_: example?
2013-09-07 13:04:19	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Ping timeout: 268 seconds)
2013-09-07 13:04:31	--	Grey_Fox2 is now known as PatrickRobotham
2013-09-07 13:04:32	Ghoul_	f | (a || b) == (c | d)
2013-09-07 13:04:40	Ghoul_	where a and b are the same but c and d are another type
2013-09-07 13:04:49	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-07 13:04:52	Ghoul_	err, I did that terribly
2013-09-07 13:04:55	mm_freak	Ghoul_: (||) = (<|>)
2013-09-07 13:04:57	Ghoul_	make the || and | =='s
2013-09-07 13:05:10	mm_freak	you need Alternative to construct and combine these things and Foldable to do the 'if'
2013-09-07 13:05:25	Ghoul_	This signature aint' gonna work
2013-09-07 13:05:25	Ghoul_	(==) :: (Alternative f, Eq a) => a -> a -> f a
2013-09-07 13:05:26	mm_freak	the major difference is that now the result has a meaning
2013-09-07 13:05:33	mm_freak	why not?
2013-09-07 13:05:50	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-07 13:05:50	-->	hashcat (~chatzilla@27.243.142.215) has joined #haskell
2013-09-07 13:05:52	Ghoul_	a -> a, but they'll be different a's from the f a
2013-09-07 13:05:59	mm_freak	huh?
2013-09-07 13:06:05	Ghoul_	And what meaning does it have that bool doesn't carry?
2013-09-07 13:06:43	mm_freak	'x == y' is the singular value that represents both x and y
2013-09-07 13:06:49	Zenol	then (v1 == v2) <$ 3 <|> 4 ?
2013-09-07 13:06:50	mm_freak	if that is not possible, it is empty
2013-09-07 13:06:56	mm_freak	it's a very sensible notion
2013-09-07 13:07:00	Zenol	(with your alternative ==)
2013-09-07 13:07:07	Ghoul_	How is that useful though?
2013-09-07 13:07:08	Ghoul_	at all.
2013-09-07 13:07:27	mm_freak	Ghoul_: it's useful in the same way we make a difference between ByteString and Text
2013-09-07 13:07:43	mm_freak	most languages don't and in those languages it bites you from time to time
2013-09-07 13:07:58	Ghoul_	can you give an example where it would be useful?
2013-09-07 13:08:11	mm_freak	Ghoul_: what is your definition of "useful"?
2013-09-07 13:08:21	-->	Gentlecat (~Roman@79.105.224.224) has joined #haskell
2013-09-07 13:08:26	donri	cf structural vs nominative typing
2013-09-07 13:08:44	donri	but that argument extends to using any "standard" types really...
2013-09-07 13:08:49	mm_freak	Ghoul_: if you don't consider type-safety to be useful, you're really in the wrong channel
2013-09-07 13:09:21	-->	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has joined #haskell
2013-09-07 13:09:31	Ghoul_	but type safety isn't useful for predicates because I might want to do something completely independent of the types of the things I previously compared
2013-09-07 13:09:33	danr	the door is ...
2013-09-07 13:09:34	donri	i tend to prefer data PostStatus = Published | Draft over { published :: Bool }, anyway
2013-09-07 13:09:46	mm_freak	Ghoul_: you can
2013-09-07 13:10:25	Ghoul_	Meh, anyway, it would probably be too hard for the optimizer
2013-09-07 13:10:31	Ghoul_	I still punt for bool
2013-09-07 13:10:38	mm_freak	donri: i tend to prefer:  published :: (Alternative f) => Post -> f Post
2013-09-07 13:10:51	mm_freak	donri: then i can just use traverse/mapM
2013-09-07 13:10:52	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-07 13:10:59	mm_freak	less bool, more convenience
2013-09-07 13:11:00	-->	totte (~totte@unaffiliated/totte) has joined #haskell
2013-09-07 13:11:43	mm_freak	Ghoul_: you're really just searching for reasons to justify your conviction
2013-09-07 13:11:51	mm_freak	desparately even
2013-09-07 13:12:04	Ghoul_	I guess this would still require some sort of Bool functor anyway?
2013-09-07 13:12:12	mm_freak	Ghoul_: what do you mean?
2013-09-07 13:12:34	donri	mm_freak: published = filtered (has (status . _Published))  -- ;)
2013-09-07 13:12:44	mm_freak	=P
2013-09-07 13:13:24	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-07 13:13:40	<--	Gentlecat (~Roman@79.105.224.224) has quit (Ping timeout: 264 seconds)
2013-09-07 13:13:46	Ghoul_	so what does `some (1 == 2)` return?
2013-09-07 13:14:12	mm_freak	Ghoul_: depends on the functor
2013-09-07 13:14:28	 *	hackagebot labyrinth 0.4.1.0 - A complicated turn-based game  http://hackage.haskell.org/package/labyrinth-0.4.1.0 (AlexeyKotlyarov)
2013-09-07 13:14:28	-->	crvs (~crvs@bl10-211-135.dsl.telepac.pt) has joined #haskell
2013-09-07 13:14:40	paolino	is there a class for default values like a  half Monoid
2013-09-07 13:14:41	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 13:14:42	paolino	?
2013-09-07 13:14:57	merijn	Data.Default :)
2013-09-07 13:15:02	Ghoul_	Maybe I should go do a phd in something computer science
2013-09-07 13:15:03	mm_freak	paolino: you want mempty sans mappend?
2013-09-07 13:15:07	Ghoul_	so I can compare things in haskell
2013-09-07 13:15:23	mm_freak	Ghoul_: not necessary…  i don't have anything close to a ph.d. ;)
2013-09-07 13:15:29	merijn	@hackage data-default
2013-09-07 13:15:30	paolino	mm_freak, if it makes any sense :-)
2013-09-07 13:15:30	lambdabot	http://hackage.haskell.org/package/data-default
2013-09-07 13:15:40	Ghoul_	What are you going to tell the students who take haskell for like 4 months in intro to comp. sci?
2013-09-07 13:15:43	mm_freak	paolino: i think it's called a pointed set
2013-09-07 13:15:52	mm_freak	paolino: but it's not really a useful concept =)
2013-09-07 13:15:56	Ghoul_	That comparing things is waaay over their head
2013-09-07 13:16:37	mm_freak	Ghoul_: it isn't really complicated…  just pick f = Maybe
2013-09-07 13:16:54	mm_freak	"unlike in other languages, when the values are equal you get Just their value, otherwise you get Nothing"
2013-09-07 13:17:08	mm_freak	then explain how to combine and fold Maybes
2013-09-07 13:17:39	mm_freak	and how these operations correspond to the usual boolean operators
2013-09-07 13:17:57	Ghoul_	that means comparable types have to be combinable right?
2013-09-07 13:18:02	Ghoul_	so then they have to be monoids..?
2013-09-07 13:18:08	mm_freak	no
2013-09-07 13:18:31	mm_freak	class Eq a where (==) :: (Alternative f) => a -> a -> f a
2013-09-07 13:18:47	donri	requiring Alternative for Eq is a bit ...
2013-09-07 13:18:59	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-07 13:19:01	mm_freak	this will also teach you a valuable lesson about 'not' =)
2013-09-07 13:19:03	donri	oh wait nevermind
2013-09-07 13:19:35	mm_freak	'not' is one of the weirdest functions from a theoretical standpoint
2013-09-07 13:20:01	mm_freak	and that's why defining a 'not' in this case is not as trivial as for Bool
2013-09-07 13:20:07	FreeFull	mm_freak: That's a weird definition for Eq
2013-09-07 13:20:30	paolino	merijn, that one, I thought it had a place in the categorism
2013-09-07 13:20:40	Ghoul_	well, maybe you can propose this for haskell 2050
2013-09-07 13:20:59	paolino	mm_freak, it seems Pointed is for (* -> *) kinds
2013-09-07 13:21:16	mm_freak	paolino: yes, Pointed doesn't denote pointed sets
2013-09-07 13:21:21	donri	paolino: Pointed is not "pointed sets"
2013-09-07 13:21:29	Ghoul_	*today* we have Bool types, and as much as they might be a wart, *today* it would be nice to have `bool`
2013-09-07 13:21:46	Ghoul_	I don't think Bool will go any time soon
2013-09-07 13:21:51	paolino	I should have guessed
2013-09-07 13:22:28	mm_freak	i should perhaps write prelude-without-bool =)
2013-09-07 13:22:35	<--	rnons (~rnons@183.152.60.69) has quit (Read error: No route to host)
2013-09-07 13:23:02	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 13:23:06	donri	mm_freak: call it unconditional-love
2013-09-07 13:23:13	mm_freak	hehe
2013-09-07 13:23:24	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-07 13:23:27	-->	hrehf (~s@krlh-5f713ca0.pool.mediaWays.net) has joined #haskell
2013-09-07 13:23:57	Ghoul_	mm_freak: I would be open to trying it out
2013-09-07 13:24:09	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Ping timeout: 240 seconds)
2013-09-07 13:24:14	Ghoul_	It certainly doesn't sound *bad*
2013-09-07 13:24:18	Ghoul_	What happens to things like guards?
2013-09-07 13:24:30	mm_freak	Ghoul_: some functions disappear, most notably 'filter'
2013-09-07 13:24:33	mm_freak	it becomes concatMap
2013-09-07 13:24:47	mm_freak	:t concatMap
2013-09-07 13:24:48	lambdabot	(a -> [b]) -> [a] -> [b]
2013-09-07 13:24:56	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 13:25:00	mm_freak	see how this function is readily compatible with my Alternative-Eq
2013-09-07 13:25:48	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-07 13:26:25	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-07 13:26:25	thr33strikes	this is called a type? compareWithHundred :: (Num a, Ord a) => a -> Ordering
2013-09-07 13:26:34	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-07 13:26:38	paolino	a signature
2013-09-07 13:26:57	paolino	name :: type
2013-09-07 13:27:04	mm_freak	Ghoul_: guard becomes:  require :: (Foldable f, MonadPlus m) => f a -> m a
2013-09-07 13:27:19	thr33strikes	the signature defines the function?
2013-09-07 13:27:23	Ghoul_	m-m-monads
2013-09-07 13:27:26	-->	kamatsu1 (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-07 13:27:29	donri	so "and" becomes sequence with Maybe? what is "or"?
2013-09-07 13:27:31	Ghoul_	so now our guards run over Identity...?
2013-09-07 13:27:36	<--	kamatsu1 (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Client Quit)
2013-09-07 13:27:52	paolino	thr33strikes, it sign the function interface
2013-09-07 13:27:57	mm_freak	donri: "and" is (<*>), "or" is (<|>)
2013-09-07 13:28:12	donri	ah so asum
2013-09-07 13:28:36	paolino	thr33strikes, telling what must go in and what will come out
2013-09-07 13:28:48	donri	mm_freak: (note i said and/or, not &&
2013-09-07 13:28:48	Ghoul_	You'd need a smarter compiler to get speed out of this.
2013-09-07 13:28:52	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-07 13:28:54	donri	mm_freak: (note i said and/or, not &&/||)
2013-09-07 13:29:00	mm_freak	oh
2013-09-07 13:29:03	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-09-07 13:29:03	thr33strikes	telling the function interface what must go in and come out?
2013-09-07 13:29:38	Zenol	mm_freak: and what become /= ?
2013-09-07 13:29:49	paolino	compareWithHundred is willing to accept a value of type a
2013-09-07 13:29:54	donri	Zenol: _Nothing ;)
2013-09-07 13:29:57	mm_freak	let me just write a simple example
2013-09-07 13:30:06	mm_freak	that should answer all questions =)
2013-09-07 13:30:10	paolino	and compute a value of type Ordering
2013-09-07 13:30:38	paolino	given a *implements* Num and Ord class
2013-09-07 13:30:44	Zenol	mm_freak: since now we can hide prelud, did you think of rewriting all the boolean stuff with such functions? (So that it can be tested and see if it's really cool, or not so) ?
2013-09-07 13:31:56	paolino	thr33strikes, the function is defined somewhere else
2013-09-07 13:32:10	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 13:32:29	Zenol	donri: I don't know what means _Nothing :s
2013-09-07 13:32:58	paolino	using compareWithHundred = ....
2013-09-07 13:33:02	donri	:t _Nothing
2013-09-07 13:33:14	donri	:t _Nothing
2013-09-07 13:33:19	donri	silly bot
2013-09-07 13:33:29	paolino	that's nothing
2013-09-07 13:33:51	donri	Zenol: it's a prism that traverses unit on Nothing
2013-09-07 13:34:05	thr33strikes	compareWithHundred = compare 100 this would be the definition of the function then?
2013-09-07 13:34:13	paolino	yes
2013-09-07 13:34:16	Zenol	donri: prism and traverses are word that I can't understand now x)
2013-09-07 13:34:30	donri	Zenol: lens :)
2013-09-07 13:34:57	thr33strikes	do you always have to provide a signature to use a function?
2013-09-07 13:35:02	paolino	:t compare
2013-09-07 13:35:05	lambdabot	Ord a => a -> a -> Ordering
2013-09-07 13:35:07	Ghoul_	paolino: going to want to mention why the arguments are missing maybe
2013-09-07 13:35:12	merijn	thr33strikes: You almost never have to provide a signature to use a function
2013-09-07 13:35:26	merijn	thr33strikes: But your fellow coders may lynch you if you don't
2013-09-07 13:35:46	paolino	thr33strikes, it's very good to do it
2013-09-07 13:35:52	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-07 13:35:55	thr33strikes	merijn why do you say that
2013-09-07 13:36:04	paolino	and required in some cases
2013-09-07 13:36:15	merijn	thr33strikes: Because I have no clue what you're doing if there's no types to tell me :)
2013-09-07 13:36:23	thr33strikes	ic
2013-09-07 13:36:32	donri	thr33strikes: you rarely need to provide type signatures, but it's considered good practice to do so for top-level definitions
2013-09-07 13:36:39	<--	visof (~visof@41.130.70.208) has quit (Changing host)
2013-09-07 13:36:39	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-09-07 13:36:43	Ghoul_	mm_freak: would your plan involve adding a type other than Maybe
2013-09-07 13:36:46	hpaste	tm pasted “No title” at http://lpaste.net/2813309286615089152
2013-09-07 13:36:52	Ghoul_	or would all the bools essentially become Maybe
2013-09-07 13:36:57	thr33strikes	what
2013-09-07 13:37:00	thr33strikes	sorry
2013-09-07 13:37:08	Zenol	donri: could you write a short example with _Nothing?
2013-09-07 13:37:14	donri	thr33strikes: it can function as (checked!) documentation, it can tell you when your expectations are wrong, it can prevent inferring a more general type than you wanted
2013-09-07 13:37:18	timblechmann	another probably very stupid newbie error: http://lpaste.net/2813309286615089152
2013-09-07 13:37:21	thr33strikes	what is considered top level and what's the alternative bottom lvl
2013-09-07 13:37:25	merijn	thr33strikes: For example, yesterday we had someone with a question about some code not working and when I looked at his paste with no types, I would have to manually figure out what types everything was.
2013-09-07 13:37:37	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 268 seconds)
2013-09-07 13:37:44	mm_freak	Ghoul_: bools would become Alternatives
2013-09-07 13:37:46	timblechmann	trying to apply a function on a list of tuples
2013-09-07 13:37:52	mm_freak	i'm still writing the example code
2013-09-07 13:37:57	merijn	thr33strikes: top level means definitions at the file level, rather than local definitions in let or where clauses
2013-09-07 13:37:59	Ghoul_	ok
2013-09-07 13:38:00	mm_freak	figuring out 'not' right now =)
2013-09-07 13:38:11	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Read error: Connection reset by peer)
2013-09-07 13:38:12	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Write error: Broken pipe)
2013-09-07 13:38:12	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Write error: Broken pipe)
2013-09-07 13:38:36	thr33strikes	got it
2013-09-07 13:38:43	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 13:38:49	merijn	thr33strikes: For example https://github.com/merijn/posix-pty/blob/master/System/Posix/Pty.hs#L110
2013-09-07 13:38:54	donri	:t Nothing ^! _Nothing . act (const (putStrLn "got Nothing"))
2013-09-07 13:38:56	lambdabot	IO ()
2013-09-07 13:39:02	paolino	timblechmann, you need mapM_ instead of map, but I never saw the error
2013-09-07 13:39:04	donri	but i wasn't too serious about _Nothing
2013-09-07 13:39:08	merijn	thr33strikes: tryReadPty is top level, the ptyClosed and can'tHappen things are *not* top level
2013-09-07 13:39:10	Zenol	:t mapM
2013-09-07 13:39:11	lambdabot	Monad m => (a -> m b) -> [a] -> m [b]
2013-09-07 13:39:22	Zenol	:t print
2013-09-07 13:39:24	lambdabot	Show a => a -> IO ()
2013-09-07 13:39:34	Zenol	:t mapM print
2013-09-07 13:39:35	lambdabot	Show a => [a] -> IO [()]
2013-09-07 13:39:45	merijn	Zenol: You probably want mapM_
2013-09-07 13:39:52	timblechmann	paolino:  ah, thanks ...
2013-09-07 13:40:00	merijn	:t mapM_
2013-09-07 13:40:01	lambdabot	Monad m => (a -> m b) -> [a] -> m ()
2013-09-07 13:40:02	Zenol	merijn: merijn It's for timblechmann  :)
2013-09-07 13:40:04	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 13:40:20	merijn	mapM_ throws away the result list, saving memory
2013-09-07 13:40:28	Ghoul_	mm_freak: I'm gonna pop out for a bit. If you finish that example can you query it to me or something?
2013-09-07 13:40:36	mm_freak	not :: (Alternative g, Foldable f) => f a -> g ()
2013-09-07 13:40:36	mm_freak	not = F.foldr (\_ _ -> empty) (pure ())
2013-09-07 13:40:41	mm_freak	that's my current version
2013-09-07 13:40:42	mm_freak	but it sucks
2013-09-07 13:40:45	-->	S_J (S_J@m83-180-189-246.cust.tele2.se) has joined #haskell
2013-09-07 13:40:50	ski	s/throws away/refrains from constructing/
2013-09-07 13:40:51	thr33strikes	thanks I see it now
2013-09-07 13:41:04	<--	mlamari (~quassel@cpe-70-112-159-86.austin.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-07 13:41:05	Zenol	merijn: oh, ok, I didn't know it was more effecient (though that if you don't use the IO [()] it was skiped)
2013-09-07 13:41:19	mm_freak	Ghoul_: sure
2013-09-07 13:41:21	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-07 13:41:24	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Quit: Leaving)
2013-09-07 13:41:24	Ghoul_	thanks
2013-09-07 13:41:27	Ghoul_	can't wait. brb
2013-09-07 13:41:44	merijn	Zenol: If you never use the "IO [()]" it is skipped, but if you do run it, the list gets made
2013-09-07 13:41:54	timblechmann	mm_freak: Zenol, merijn, paolino: thanks a lot for the help, btw ... haskell is quite different to the other languages that i know, so the first steps are a bit  hard
2013-09-07 13:42:15	mm_freak	timblechmann: be brave, it pays off =)
2013-09-07 13:42:24	merijn	timblechmann: Don't worry, everyone here had the same struggle at first :)
2013-09-07 13:42:35	mm_freak	but there is a very important downside to haskell
2013-09-07 13:42:41	mm_freak	it ruins you for most other languages
2013-09-07 13:42:50	merijn	timblechmann: It took me 4 different attempts at starting to learn haskell before it stuck for good :p
2013-09-07 13:42:52	-->	b0bbi10 (~me@e179113087.adsl.alicedsl.de) has joined #haskell
2013-09-07 13:42:56	<--	b0bbi10 (~me@e179113087.adsl.alicedsl.de) has left #haskell
2013-09-07 13:43:01	thr33strikes	when you're building your own functions it's always best to add a signature and when it's something out of the library like tail there is no need?
2013-09-07 13:43:02	paolino	same here
2013-09-07 13:43:05	S_J	So if you want to write an application protocol on top of TCP there are certain problems that alywas need to be solved. 1. timeouts/keep-alive. 2. determine what a message is, using for example a delimiter or sending the size of the msg in the first byte.     Is there some haskell module that solves this?
2013-09-07 13:43:43	mm_freak	where was that strange girl metaphor for haskell again?
2013-09-07 13:43:43	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 13:43:45	<--	hrehf (~s@krlh-5f713ca0.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-09-07 13:43:57	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-07 13:44:01	donri	mm_freak: http://www.xent.com/pipermail/fork/Week-of-Mon-20070219/044101.html
2013-09-07 13:44:04	paolino	tail is already defined with its signature
2013-09-07 13:44:14	paolino	@src tail
2013-09-07 13:44:14	lambdabot	tail (_:xs) = xs
2013-09-07 13:44:15	lambdabot	tail []     = undefined
2013-09-07 13:44:20	timblechmann	mm_freak, merijn: well every new language changes the way of thinking ... which is good ...
2013-09-07 13:44:20	paolino	:t tail
2013-09-07 13:44:21	mm_freak	yeah =)
2013-09-07 13:44:21	lambdabot	[a] -> [a]
2013-09-07 13:44:43	mm_freak	donri: yeah, that's the one =)
2013-09-07 13:44:44	donri	thr33strikes: we don't normally put signatures inside "expressions" or on "local definitions"
2013-09-07 13:44:54	-->	hari_ (~hari@117.193.58.74) has joined #haskell
2013-09-07 13:44:54	merijn	thr33strikes: The type inference can figure out 90% of all the types, but annotating your own functions with types is considered good practice for 2 reasons: 1) to check the code you wrote has the right type (i.e. stops you from writing code that compiles but isn't what you intended) and 2) documentation for other programmers
2013-09-07 13:45:07	hari_	What exactly is this "encodeFloat" function for?
2013-09-07 13:45:17	hari_	from Prelude
2013-09-07 13:45:20	hpc	also, writing your own type signatures makes the errors nicer sometimes
2013-09-07 13:45:22	merijn	:t encodeFloat
2013-09-07 13:45:23	lambdabot	RealFloat a => Integer -> Int -> a
2013-09-07 13:45:37	merijn	> encodeFloat 10 20
2013-09-07 13:45:38	lambdabot	  1.048576e7
2013-09-07 13:45:47	merijn	heh
2013-09-07 13:45:52	merijn	Ok, no clue :p
2013-09-07 13:45:55	hari_	> encodeFloat 2 2
2013-09-07 13:45:56	lambdabot	  8.0
2013-09-07 13:46:00	hari_	> encodeFloat 2 1
2013-09-07 13:46:01	lambdabot	  4.0
2013-09-07 13:46:28	hpc	> encodeFloat 1 2
2013-09-07 13:46:30	lambdabot	  4.0
2013-09-07 13:46:38	hari_	There was no documentation for that function.
2013-09-07 13:46:44	merijn	hari_: Yes there is
2013-09-07 13:46:47	paolino	thr33strikes, and you can write the signature of an obvious function and let it undefined till later and work on another part using it
2013-09-07 13:46:50	merijn	hari_: http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:encodeFloat
2013-09-07 13:47:22	kuribas	And infered types can be more general, but less efficient.
2013-09-07 13:47:22	Zenol	donri:  mm_freak: Haha, I'd better don't show that to my girl :)
2013-09-07 13:47:38	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-07 13:47:44	hpc	> encodeFloat 1 1
2013-09-07 13:47:45	lambdabot	  2.0
2013-09-07 13:48:00	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-07 13:48:03	--	functorfun is now known as funfunctor
2013-09-07 13:48:36	hpc	RealFloat is a pretty hardcore class
2013-09-07 13:49:09	Zenol	2^a eb ?
2013-09-07 13:49:16	<--	uvelichitel (~uvelichit@37.73.198.67) has quit (Ping timeout: 256 seconds)
2013-09-07 13:49:18	Zenol	> ecodeFloat 0 1
2013-09-07 13:49:21	lambdabot	  Not in scope: `ecodeFloat'
2013-09-07 13:49:22	lambdabot	 Perhaps you meant one of these:
2013-09-07 13:49:22	lambdabot	   `decodeFloat...
2013-09-07 13:49:23	mm_freak	Zenol: that Alternative-Eq just reminded me of it =)
2013-09-07 13:49:23	Zenol	> encodeFloat 0 1
2013-09-07 13:49:24	lambdabot	  0.0
2013-09-07 13:49:29	Zenol	> encodeFloat 1 0
2013-09-07 13:49:31	lambdabot	  1.0
2013-09-07 13:49:31	hari_	merijn, thanks. Seems a bit complicated.
2013-09-07 13:49:33	Zenol	> encodeFloat 42 0
2013-09-07 13:49:35	lambdabot	  42.0
2013-09-07 13:49:39	Zenol	> encodeFloat 42 1
2013-09-07 13:49:41	lambdabot	  84.0
2013-09-07 13:49:47	Zenol	> encodeFloat 42 -1
2013-09-07 13:49:49	lambdabot	  No instance for (Data.Typeable.Internal.Typeable a0)
2013-09-07 13:49:50	lambdabot	   arising from a use ...
2013-09-07 13:49:59	S_J	So if you want to write an application protocol on top of TCP there are certain problems that alywas need to be solved. 1. timeouts/keep-alive. 2. determine what a message is, using for example a delimiter or sending the size of the msg in the first byte.     Is there some haskell module that solves this?
2013-09-07 13:50:01	Zenol	err. I'd better stop flooding here.
2013-09-07 13:50:14	S_J	^^ i guess that is that what pythons twisted does?
2013-09-07 13:50:20	-->	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-09-07 13:51:21	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Read error: Operation timed out)
2013-09-07 13:51:49	hpc	typically the way you separate a stream into messages is on a newline
2013-09-07 13:52:14	hpc	(or '\0' if you are in a binary format)
2013-09-07 13:52:45	hpc	the rest i am not really sure if there's a module for
2013-09-07 13:52:49	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-07 13:52:49	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-09-07 13:52:49	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 13:53:13	mm_freak	http://www.xent.com/pipermail/fork/Week-of-Mon-20070219/044109.html
2013-09-07 13:53:14	mm_freak	lol
2013-09-07 13:53:21	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 13:54:12	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 13:54:28	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 13:54:29	--	rishabhjain_ is now known as rishabhjain
2013-09-07 13:54:39	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-07 13:55:03	-->	Eduard_Munteanu (~EduardMun@188.25.244.142) has joined #haskell
2013-09-07 13:56:08	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-09-07 13:57:06	-->	makos_ (~makos@koln-5d816e78.pool.mediaWays.net) has joined #haskell
2013-09-07 13:57:37	-->	chatsiri_ (~chatsiri_@171.6.174.58) has joined #haskell
2013-09-07 13:58:06	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-07 13:59:28	<--	kushal (kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-07 13:59:49	-->	kevinqcs1 (~turing@183.209.53.5) has joined #haskell
2013-09-07 14:00:27	<--	MoALTz (~no@host86-142-125-80.range86-142.btcentralplus.com) has quit (Quit: bbl)
2013-09-07 14:00:27	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-07 14:00:38	<--	kevinqcs (~turing@183.209.41.170) has quit (Ping timeout: 248 seconds)
2013-09-07 14:01:03	<--	quchen (~quchen@84.170.6.221) has quit (Ping timeout: 268 seconds)
2013-09-07 14:01:04	hari_	> significand 12
2013-09-07 14:01:05	lambdabot	  0.75
2013-09-07 14:01:18	S_J	@type significand
2013-09-07 14:01:19	lambdabot	RealFloat a => a -> a
2013-09-07 14:01:23	-->	uvelichitel (~uvelichit@37.73.247.162) has joined #haskell
2013-09-07 14:01:24	S_J	> significand 1
2013-09-07 14:01:25	lambdabot	  0.5
2013-09-07 14:01:28	S_J	> significand 2
2013-09-07 14:01:29	lambdabot	  0.5
2013-09-07 14:01:34	S_J	?
2013-09-07 14:01:37	S_J	what does thta do?
2013-09-07 14:01:42	S_J	@src significand
2013-09-07 14:01:43	lambdabot	Source not found. And you call yourself a Rocket Scientist!
2013-09-07 14:02:47	hari_	S_J, I am not sure. Trying to figure it out myself
2013-09-07 14:02:55	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Read error: Connection reset by peer)
2013-09-07 14:03:10	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 14:03:31	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 14:04:11	S_J	> map significand [-5,5]
2013-09-07 14:04:12	lambdabot	  [-0.625,0.625]
2013-09-07 14:04:15	S_J	> map significand [-5..5]
2013-09-07 14:04:16	lambdabot	  [-0.625,-0.5,-0.75,-0.5,-0.5,0.0,0.5,0.5,0.75,0.5,0.625]
2013-09-07 14:04:20	<--	nh2 (~niklas@r002213.203112.miinet.jp) has left #haskell
2013-09-07 14:04:36	S_J	> map significand [0,10,20,30]
2013-09-07 14:04:37	lambdabot	  [0.0,0.625,0.625,0.9375]
2013-09-07 14:04:47	S_J	> map significand [0,10,20,30,40,50,60]
2013-09-07 14:04:48	lambdabot	  [0.0,0.625,0.625,0.9375,0.625,0.78125,0.9375]
2013-09-07 14:05:05	hari_	The documentation says "The first component of decodeFloat, scaled to lie in the open interval (-1,1), either 0.0 or of absolute value >= 1/b, where b is the floating-point radix. The behaviour is unspecified on infinite or NaN values. "
2013-09-07 14:05:50	<--	visof (~visof@unaffiliated/visof) has quit (Read error: Operation timed out)
2013-09-07 14:06:47	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 260 seconds)
2013-09-07 14:07:10	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-07 14:07:16	hari_	I was checking out the Prelude just wondering what those functions are doing in Prelude.
2013-09-07 14:07:18	hiptobecubic	S_J, are you familiar with floating point representation?
2013-09-07 14:07:26	hiptobecubic	in memory i mean
2013-09-07 14:08:27	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 268 seconds)
2013-09-07 14:09:09	<--	wuttf (5c142d23@gateway/web/freenode/ip.92.20.45.35) has quit (Ping timeout: 250 seconds)
2013-09-07 14:09:18	hiptobecubic	S_J, hari_, http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
2013-09-07 14:09:28	<--	ksf_ (~ksf@d041238.adsl.hansenet.de) has quit (Remote host closed the connection)
2013-09-07 14:09:51	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 14:09:56	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 14:10:04	hari_	hiptobecubic, thanks for the link.
2013-09-07 14:10:16	hiptobecubic	hari_, no problem. It's a good read, if a little dense
2013-09-07 14:10:16	<--	JesuZ (~jesuz87@88.192.95.197) has quit (Read error: Connection reset by peer)
2013-09-07 14:10:28	-->	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-07 14:10:39	-->	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has joined #haskell
2013-09-07 14:10:58	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-07 14:11:32	-->	CaptainK (~CaptainK@181.179.102.89) has joined #haskell
2013-09-07 14:11:50	hiptobecubic	S_J, hari_, a little less terse maybe: http://floating-point-gui.de/
2013-09-07 14:12:29	Ghoul_	mm_freak: I think I get your thing a little better now
2013-09-07 14:12:52	Ghoul_	since if a == b, then you can just turn that into Just a, since a == b anyway, and the same for all the other alternatives
2013-09-07 14:13:02	Ghoul_	It didn't click before
2013-09-07 14:13:07	hari_	hiptobecubic, yes, FP arithmetic has always been a kind of black box to me. (and I guess to a lot of others as well)
2013-09-07 14:13:11	Ghoul_	I was worried about how to combine the things and just confused myself
2013-09-07 14:13:12	mm_freak	Ghoul_: not working on it right now, but i still have to figure out a sensible 'not'
2013-09-07 14:13:14	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Quit: Ex-Chat)
2013-09-07 14:13:39	hiptobecubic	hari_, the second like i gave is much more clear i think
2013-09-07 14:13:45	hiptobecubic	especially under "Number formats"
2013-09-07 14:14:11	-->	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-07 14:14:18	hari_	hiptobecubic, yes, reading that one now.
2013-09-07 14:15:12	S_J	I read in some version of Network.Socket that send and recv does not work as intended, true?
2013-09-07 14:15:17	S_J	cant find it again
2013-09-07 14:15:48	-->	azcodex (~azcodex_@43.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-07 14:16:24	Ghoul_	mm_freak: why does that `not` suck?
2013-09-07 14:16:32	Ghoul_	because it uses the unit?
2013-09-07 14:16:48	-->	isBEKaml (~user@unaffiliated/isbekaml) has joined #haskell
2013-09-07 14:17:08	mm_freak	Ghoul_: consider (==) :: (Alternative f) => a -> a -> f a
2013-09-07 14:17:12	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-07 14:17:28	mm_freak	the resulting value may be in some sense a witness that the two values are equal
2013-09-07 14:18:07	mm_freak	now you can't have straightforward f a -> f a for 'not', because that would make the witness meaningless again, bringing us back to Bool
2013-09-07 14:18:18	Ghoul_	`not` doesn't really make sense then
2013-09-07 14:18:23	Ghoul_	probably need something more sane
2013-09-07 14:18:24	-->	OlegYch6 (~OlegYch@213.184.238.131) has joined #haskell
2013-09-07 14:18:28	mm_freak	yeah
2013-09-07 14:18:35	aristid	mm_freak: go look at the agda standard library.
2013-09-07 14:18:52	mm_freak	aristid: sure, i'd just use propositional equality or something like that in agda
2013-09-07 14:18:52	aristid	mm_freak: i think the type you want is Dec
2013-09-07 14:18:58	mm_freak	but haskell lacks the type system for that
2013-09-07 14:19:13	aristid	but you don't want to give up just yet?
2013-09-07 14:19:19	-->	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 14:19:36	mm_freak	no…  i'll think about it this evening
2013-09-07 14:20:02	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-07 14:20:13	<--	OlegYch (~OlegYch@213.184.238.131) has quit (Read error: Operation timed out)
2013-09-07 14:20:52	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 14:21:16	S_J	Sockets: one send always sends everything right? but a single receive can receive everything from a byte to the whole emssage...?
2013-09-07 14:22:17	mm_freak	S_J: at least with the high level interface, yes
2013-09-07 14:22:32	mm_freak	that is when you have Handle, not Socket
2013-09-07 14:22:56	 *	ski . o O ( `f a -> f ()' )
2013-09-07 14:23:14	mm_freak	S_J: indeed, for Socket that's not guaranteed
2013-09-07 14:23:31	mm_freak	ski: that's what i have right now
2013-09-07 14:23:42	mm_freak	except that i have f a -> g ()
2013-09-07 14:23:52	<--	azcodex (~azcodex_@43.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Ping timeout: 264 seconds)
2013-09-07 14:23:53	-->	zh217 (~zh217@li428-181.members.linode.com) has joined #haskell
2013-09-07 14:23:55	ski	aye
2013-09-07 14:24:03	S_J	talkign Socket. send=everythung, recv=1byte_to_everything. correct? and for high level interface you can send and receive in one call?
2013-09-07 14:24:11	-->	u__ (~phillip@adsl-75-57-174-213.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-07 14:24:11	-->	visof (~visof@41.130.70.208) has joined #haskell
2013-09-07 14:24:15	ski	negation-as-failure isn't so nice :/
2013-09-07 14:24:24	S_J	Network.Socket is lacking in comments. it is pretty bad
2013-09-07 14:24:46	mm_freak	S_J: no
2013-09-07 14:24:50	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-09-07 14:24:56	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-07 14:24:58	mm_freak	S_J: it's actually documented in Network.Socket
2013-09-07 14:25:07	mm_freak	you have to make sure that you sent everything
2013-09-07 14:25:26	mm_freak	'send' returns the number of bytes sent, and as such corresponds to the C function 'send'
2013-09-07 14:25:31	Ghoul_	kazyness + sockets are hellish
2013-09-07 14:25:33	Ghoul_	*lazy
2013-09-07 14:25:37	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-07 14:26:16	<--	u_ (~phillip@adsl-75-57-179-17.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 14:26:47	S_J	http://hackage.haskell.org/packages/archive/network/2.2.1.7/doc/html/Network-Socket.html
2013-09-07 14:26:56	S_J	do i have the wrong docs?
2013-09-07 14:27:19	<--	RThinker (~yegor@77.47.204.159) has quit (Quit: Leaving.)
2013-09-07 14:27:19	-->	RThinker1 (~yegor@77.47.204.159) has joined #haskell
2013-09-07 14:27:32	FreeFull	S_J: You have to look at the source code to see the comments
2013-09-07 14:27:38	mm_freak	no, you don't
2013-09-07 14:27:42	Ghoul_	S_J: http://hackage.haskell.org/package/network-2.4.1.2
2013-09-07 14:27:50	Ghoul_	you should consider network-simple
2013-09-07 14:27:59	Ghoul_	it's a higher high level interface
2013-09-07 14:28:00	mm_freak	or simply Network instead of Network.Socket
2013-09-07 14:28:11	S_J	yeah have it now. how can I see local version fo my modules?
2013-09-07 14:28:17	S_J	liek versionof Network.Socket
2013-09-07 14:28:26	mm_freak	S_J: cabal info network
2013-09-07 14:28:32	S_J	I want the low-level
2013-09-07 14:29:08	Ghoul_	how come? performance?
2013-09-07 14:29:25	mm_freak	S_J: you don't usually use the low level interface in haskell…  if you don't want to use the Handle-based interface, there are many stream processing abstractions that don't require you to get headaches
2013-09-07 14:29:34	mm_freak	like pipes-network
2013-09-07 14:29:40	Ghoul_	+1 for pipes-network
2013-09-07 14:29:50	Ghoul_	laziness over the low level interface drives you batty
2013-09-07 14:29:56	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Remote host closed the connection)
2013-09-07 14:30:10	-->	davidsd (~davidsd@4.31.70.22) has joined #haskell
2013-09-07 14:30:15	S_J	so to send properly, id have to get the siz ewof my message. then send one byte at a time until all is sent? i mean at leats id have to be able to index it somehow
2013-09-07 14:30:16	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 14:30:29	<--	isBEKaml (~user@unaffiliated/isbekaml) has quit (Quit: Quitting)
2013-09-07 14:30:34	Ghoul_	You shouldn't have to
2013-09-07 14:30:50	Ghoul_	You can send the whole thing at once
2013-09-07 14:31:11	Ghoul_	although working with Ptr's are a little unsafe
2013-09-07 14:31:31	Ghoul_	try Network.Socket.ByteString for things you want to work out the box
2013-09-07 14:31:43	<--	hashcat (~chatzilla@27.243.142.215) has quit (Ping timeout: 264 seconds)
2013-09-07 14:31:51	FreeFull	S_J: Nah, you could try to send the whole message, see how much was sent, drop that much of the message and repeat until the message is empty
2013-09-07 14:32:12	FreeFull	Or just use some higher level library
2013-09-07 14:32:17	Ghoul_	and once again, network-simple removes the need to do hundreds of lines of boilerplate to get a connection open. It doesn't abstract send or recv though, only the connection stuff, so it's still equally performant
2013-09-07 14:32:23	S_J	yes but working on lists seems poor, inefficient
2013-09-07 14:32:30	mm_freak	S_J: it is
2013-09-07 14:32:35	mm_freak	again, don't use Network.Socket
2013-09-07 14:33:04	-->	jackp (~Jack@pool-173-61-150-129.cmdnnj.fios.verizon.net) has joined #haskell
2013-09-07 14:34:02	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-07 14:34:07	<--	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-09-07 14:34:48	mm_freak	using String for networking is not only inefficient…  it's wrong
2013-09-07 14:35:00	<--	CaptainK (~CaptainK@181.179.102.89) has quit (Read error: Connection reset by peer)
2013-09-07 14:35:00	-->	azcodex (~azcodex_@43.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-07 14:35:22	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-07 14:35:57	<--	edon (~user@albalug/edon) has quit (Ping timeout: 265 seconds)
2013-09-07 14:36:11	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 14:36:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 14:36:47	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 14:37:35	FreeFull	mm_freak: I agree
2013-09-07 14:37:40	Ghoul_	hGetBuf/hPutBuf for speed
2013-09-07 14:37:56	FreeFull	Bytestring is what should be used on the lower level
2013-09-07 14:37:58	S_J	well the thing is i wanted to use the low level stuff to learn more about sockets, but maybe that is not so meaningful
2013-09-07 14:38:03	Ghoul_	or sendBuf/recvBuf
2013-09-07 14:38:26	<--	hari_ (~hari@117.193.58.74) has left #haskell ("Ex-Chat")
2013-09-07 14:38:48	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-07 14:38:57	S_J	what i eventually want to do is write a sql database and you would connect to it via sockets. So Im figuring out the socket stuff now.
2013-09-07 14:39:08	mm_freak	S_J: it's really just a thin layer around the awkward C API
2013-09-07 14:39:18	mm_freak	Network.Socket that is
2013-09-07 14:39:30	-->	talzeus (~studybot_@softbank221103169115.bbtec.net) has joined #haskell
2013-09-07 14:39:33	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 240 seconds)
2013-09-07 14:39:35	mm_freak	there is almost no value in knowing these details
2013-09-07 14:39:59	mm_freak	S_J: for serious applications in haskell you would use one of the high performance streaming abstractions
2013-09-07 14:40:00	S_J	so what would you recommend for the above, a protocol for communicating with a sql db, pipes?
2013-09-07 14:40:05	mm_freak	pipes, conduit, enumerator, etc.
2013-09-07 14:40:13	mm_freak	my personal recommendation is pipes
2013-09-07 14:40:13	<--	Argue (~Argue@112.209.122.237) has quit (Ping timeout: 240 seconds)
2013-09-07 14:40:28	Ghoul_	pipes is the fastest and lightest
2013-09-07 14:40:43	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-07 14:40:45	--	bitonic` is now known as bitonic
2013-09-07 14:41:01	Ghoul_	theres more stuff on hackage for conduit though, pipes is newer
2013-09-07 14:41:41	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Quit: leaving)
2013-09-07 14:41:50	-->	pygospa (~Pygosceli@kiel-4d066593.pool.mediaWays.net) has joined #haskell
2013-09-07 14:41:58	-->	CaptainK (~CaptainK@181.179.44.178) has joined #haskell
2013-09-07 14:42:01	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-09-07 14:43:48	S_J	what are the pros cons of rach? why do you recommend pipes?
2013-09-07 14:44:21	-->	erisco (~erisco@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-07 14:44:37	 *	hackagebot crypto-random 0.0.7 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.7 (VincentHanquez)
2013-09-07 14:45:02	<--	eriksensei (~eriksense@546b12fd.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-07 14:45:06	<--	TheRealPygo (~Pygosceli@kiel-d9bfcd8b.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-09-07 14:45:18	Ghoul_	pipes is fast and maintained really well by Tekmo (hes writing a new version right now). It's in greater flux though and things change faster
2013-09-07 14:45:57	Ghoul_	conduit isn't *dead*, but it doesn't change that much. I think the one guy is working on yesod right now. Theres tons of stuff on hackage for conduit though, so you can basically do anything by pulling in whateverhere-conduit
2013-09-07 14:45:58	S_J	but oleg is agenius!
2013-09-07 14:47:18	mm_freak	S_J: if you're referring to iteratees, they are almost no longer used
2013-09-07 14:47:27	mm_freak	pipes is both fast and theoretically sound
2013-09-07 14:47:49	mm_freak	conduit does not provide the same soundness, but it's also fast and allows resuming
2013-09-07 14:47:50	donri	and then there's machines ;)
2013-09-07 14:50:13	-->	hrehf (~s@krlh-4d02bb17.pool.mediaWays.net) has joined #haskell
2013-09-07 14:50:16	<--	hrehf (~s@krlh-4d02bb17.pool.mediaWays.net) has quit (Read error: Connection reset by peer)
2013-09-07 14:51:34	ParaSa1lin	i think pipes doesnt have any ready system for bytestrings and attoparsec
2013-09-07 14:51:57	Ghoul_	ParaSa1lin: theres pipes-bytestring, pipes-network and pipes-attoparsec/pipes-binary
2013-09-07 14:52:19	ParaSa1lin	in 4.0 rc?
2013-09-07 14:52:27	Ghoul_	*right now* for 3
2013-09-07 14:52:30	S_J	gabriel gonzales == tecmo?
2013-09-07 14:52:36	Ghoul_	but also in 4 because k0001 updated them a few days ago
2013-09-07 14:52:40	Ghoul_	yes
2013-09-07 14:53:15	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-07 14:53:29	ParaSa1lin	i checked yesterday, the pipes-extra package is built against prehistoric version of pipes, no?
2013-09-07 14:53:43	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Quit: leaving)
2013-09-07 14:53:51	Ghoul_	uh, idk. I've never had to use it.
2013-09-07 14:54:05	<--	CaptainK (~CaptainK@181.179.44.178) has quit (Ping timeout: 268 seconds)
2013-09-07 14:54:25	ParaSa1lin	right
2013-09-07 14:54:33	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-07 14:54:45	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-07 14:55:22	Ghoul_	when I use pipes I just pull in pipes and pipes-whatever
2013-09-07 14:55:28	Ghoul_	where whatever is usually network, binary or both.
2013-09-07 14:55:41	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 14:55:46	Ghoul_	it all clicks together and the packages export the necessary glue automatically
2013-09-07 14:55:56	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 268 seconds)
2013-09-07 14:56:24	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-07 14:56:46	mm_freak	ParaSa1lin: see pipes-parse
2013-09-07 14:57:04	ParaSa1lin	mm_freak, right i saw that yesterday
2013-09-07 14:57:05	<--	kinigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has left #haskell
2013-09-07 14:57:30	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-09-07 14:57:31	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-07 14:57:32	ParaSa1lin	but nothing for bytestring
2013-09-07 14:57:35	exicer	So, on OSX where are the default places haskell is installed to? I need to completely remove and start again...
2013-09-07 14:57:47	ParaSa1lin	until i guess 4.0 gets released
2013-09-07 14:59:04	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-07 14:59:11	mm_freak	ParaSa1lin: it's not based on any particular stream type
2013-09-07 14:59:23	ParaSa1lin	mm_freak, i realize that
2013-09-07 14:59:26	mm_freak	you can use it with ByteString, Text, String, whatever you need
2013-09-07 14:59:29	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-07 14:59:48	ParaSa1lin	mm_freak, there is nothing right now that will read a file into a Producer of bytestrings
2013-09-07 15:00:38	ParaSa1lin	so rather than dick around outside cabal, yesterday i just ended up going with io-streams
2013-09-07 15:01:37	merijn	exicer: There is an uninstall script if you installed Platform
2013-09-07 15:01:40	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-07 15:01:44	merijn	exicer: Lemme check the location
2013-09-07 15:01:54	-->	Hat_and_Cloak (~quassel@180.234.65.152) has joined #haskell
2013-09-07 15:02:38	merijn	exicer: /Library/Frameworks/GHC.framework/Versions/Current/Tools/ has a shell script called "Uninstaller", that should properly purge things
2013-09-07 15:02:50	exicer	Cool, thanks
2013-09-07 15:03:45	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 15:04:04	<--	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-07 15:06:24	mm_freak	ParaSa1lin: i actually started a pipes-bytestring, then discovered that tekmo is writing one himself, and right now both seem stalled =)
2013-09-07 15:06:43	mm_freak	i'll wait for pipes 4 before i give it another shot
2013-09-07 15:07:01	mm_freak	because all that upstream nonsense will become invisible
2013-09-07 15:07:08	merijn	mm_freak: No, pipes-4 had a release candidate this week
2013-09-07 15:07:14	merijn	mm_freak: The release should be any day now
2013-09-07 15:07:29	merijn	Unless someone finds critical bug it should be done atm
2013-09-07 15:07:43	<--	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-07 15:08:01	merijn	The pipes-4 API so far seems significantly nicer and elegant than the previous one
2013-09-07 15:08:30	merijn	So unless you have an odd definition of stalled... ;)
2013-09-07 15:09:03	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 15:09:04	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 15:09:20	merijn	mm_freak: Main reason for the long wait is that they're attempting to have the entire pipes ecosystem compatible and up to date before release, i.e. stuff like pipes-safe, pipes-parse, etc.
2013-09-07 15:09:30	<--	thunderrd (~thunderrd@119.42.79.49) has quit (Quit: If it wasn't written down, it didn't happen...)
2013-09-07 15:09:42	mm_freak	yeah, i saw the post
2013-09-07 15:09:57	mm_freak	and i'm talking about pipes-bytestring
2013-09-07 15:10:03	mm_freak	not pipes ;)
2013-09-07 15:10:44	jon_r	hi, is it possible to use regex's in guard conditions?
2013-09-07 15:11:15	-->	CaptainK (~CaptainK@181.179.56.90) has joined #haskell
2013-09-07 15:11:39	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Quit: Konversation terminated!)
2013-09-07 15:12:32	merijn	jon_r: You can use arbitrary functions in guards, so yes
2013-09-07 15:13:19	-->	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has joined #haskell
2013-09-07 15:14:09	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-09-07 15:14:09	<--	RThinker1 (~yegor@77.47.204.159) has quit (Quit: Leaving.)
2013-09-07 15:14:21	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-07 15:14:40	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-07 15:18:08	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-07 15:18:48	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-07 15:19:41	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-09-07 15:19:46	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-07 15:20:20	S_J	when is the release for the new pipes scheduled?
2013-09-07 15:20:21	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Write error: Broken pipe)
2013-09-07 15:20:32	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-07 15:20:36	donri	jon_r: you can even use regex in patterns with rex!
2013-09-07 15:20:38	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-07 15:20:50	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-07 15:21:15	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-07 15:22:20	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 15:22:20	mroman	How can I ensure I/O order?
2013-09-07 15:22:21	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-07 15:22:32	mroman	specifically: putStr "foo: " + getLine
2013-09-07 15:22:46	donri	mroman: the monad enforces order
2013-09-07 15:22:51	mroman	well it should
2013-09-07 15:22:54	mroman	stil
2013-09-07 15:22:59	mroman	the getLine comes before foo
2013-09-07 15:23:15	mroman	maybe flush
2013-09-07 15:23:24	donri	mroman: your example doesn't type check
2013-09-07 15:23:25	-->	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-07 15:23:25	merijn	mroman: In the IO monad any side effects left of >>= are guaranteed to happen before anything on the right
2013-09-07 15:23:38	mroman	done
2013-09-07 15:23:40	mroman	hFlush stdout
2013-09-07 15:23:57	merijn	mroman: I was about to ask whether the issue was putStr not printing :)
2013-09-07 15:24:04	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-07 15:24:04	donri	yes, stdout is normally line buffered
2013-09-07 15:24:05	mroman	Yeah
2013-09-07 15:24:11	merijn	mroman: Yeah, you need to either use hFlush or hSetBuffering
2013-09-07 15:24:14	mroman	I just figured out that was a stupid question :)
2013-09-07 15:24:26	jon_r	how can I make a haskell regex match an entire string ignoring newlines
2013-09-07 15:25:32	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (Ping timeout: 268 seconds)
2013-09-07 15:25:39	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 260 seconds)
2013-09-07 15:26:17	<--	CaptainK (~CaptainK@181.179.56.90) has quit (Read error: Connection reset by peer)
2013-09-07 15:26:27	onur	http://fotogaleri.ntvmsnbc.com/haydarpasaya-bogazici-stadi.html
2013-09-07 15:26:37	onur	opps
2013-09-07 15:26:44	onur	damn putty sorry
2013-09-07 15:27:15	--	eff___ is now known as effy
2013-09-07 15:28:05	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Quit: rishabhjain_)
2013-09-07 15:28:09	sordina	Why are fingertrees based on monoids rather than semigroups?
2013-09-07 15:28:10	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-07 15:28:30	-->	Wuzzy (~Wuzzy@p549FBDFB.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 15:29:15	-->	CaptainK (~CaptainK@181.178.233.217) has joined #haskell
2013-09-07 15:29:40	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-07 15:29:52	merijn	sordina: Well, why not?
2013-09-07 15:30:09	-->	lemao_ (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-09-07 15:30:25	<--	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-07 15:30:25	<--	CaptainK (~CaptainK@181.178.233.217) has quit (Read error: Connection reset by peer)
2013-09-07 15:30:58	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-09-07 15:31:30	sordina	merijn: Is there somewhere where mempty is required?
2013-09-07 15:31:34	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-07 15:31:45	elliott	empty tree?
2013-09-07 15:32:19	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 15:32:24	haasn	@ask edwardk In tables, how does traversal order work? I want to traverse things according to their insertion order, but ideally also traverse them according to their key order (with another key)
2013-09-07 15:32:24	lambdabot	Consider it noted.
2013-09-07 15:32:41	-->	watermind (~wm@bl19-223-243.dsl.telepac.pt) has joined #haskell
2013-09-07 15:33:05	sordina	elliott: mm true, but it seems like a large impact in order to accomodate an empty tree.
2013-09-07 15:33:25	donri	haasn: possibly you need to use autoincrement to get "insertion order"
2013-09-07 15:33:36	Taneb	haasn, I believe it goes by order of primary key
2013-09-07 15:33:47	sordina	I'm just exploring the concept for the first time, so I might be way off base :)
2013-09-07 15:34:12	haasn	yes, I could live with having an (unused) primary key that dictates insertion order and then just traverse things according to their secondary keys and stuff depending on which elements I want to query
2013-09-07 15:34:26	<--	mimico__ (uid2554@gateway/web/irccloud.com/x-zralgxjvzvpzayhu) has quit (Quit: Connection closed for inactivity)
2013-09-07 15:34:35	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-09-07 15:34:43	 *	hackagebot libvorbis 0.1.0.0 - Haskell binding for libvorbis, for decoding Ogg Vorbis audio files  http://hackage.haskell.org/package/libvorbis-0.1.0.0 (StephenBlackheath)
2013-09-07 15:34:47	donri	sordina: one obvious reason is monoid is in base, semigroups aren't
2013-09-07 15:34:50	-->	JaRoel|4d (~jaroel|4d@2001:980:7133:1:70f4:f027:624a:c437) has joined #haskell
2013-09-07 15:35:11	sordina	donri: that's actually a really good point
2013-09-07 15:35:23	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-07 15:35:25	elliott	sordina: monoids are nicer than semigroups
2013-09-07 15:35:29	elliott	they have more structure.
2013-09-07 15:35:35	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 241 seconds)
2013-09-07 15:35:36	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 15:35:37	donri	of course, semigroup *should* be in base...
2013-09-07 15:35:39	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-07 15:35:40	elliott	so I don't think you need much of a reason to want to use them :)
2013-09-07 15:35:45	donri	the Monoid Maybe instance is just silly
2013-09-07 15:36:23	<--	Beetny (~Beetny@ppp118-208-25-231.lns20.bne1.internode.on.net) has quit (Ping timeout: 260 seconds)
2013-09-07 15:36:23	FreeFull	You can make any semigroup a into a Monoid (Maybe a)
2013-09-07 15:36:40	donri	FreeFull: but what base does is make any monoid into a monoid :P
2013-09-07 15:36:53	FreeFull	donri: Yeah, because there aren't any semigroups =P
2013-09-07 15:37:00	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 15:37:15	sordina	elliott: isn't less structure nicer in general?
2013-09-07 15:37:20	-->	amosr (~amos@28.30.233.220.static.exetel.com.au) has joined #haskell
2013-09-07 15:37:20	donri	FreeFull: which was my point exactly...
2013-09-07 15:37:28	<--	uvelichitel (~uvelichit@37.73.247.162) has quit (Ping timeout: 260 seconds)
2013-09-07 15:38:04	elliott	sordina: nah. magmas are boring.
2013-09-07 15:38:06	elliott	laws are nice.
2013-09-07 15:38:11	donri	sordina: define "nicer". more things can be semigroups, but you can do more things with a monoid.
2013-09-07 15:38:14	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-07 15:38:16	FreeFull	donri: I didn't even read what you wrote about the monoid maybe instance until now
2013-09-07 15:38:17	elliott	of course, more things can be semigroups; if you have no real need for mempty then it's nice to be able to use them
2013-09-07 15:38:44	elliott	but here mempty is the natural equivalent of a natural base case (empty tree)
2013-09-07 15:38:49	elliott	it fits well.
2013-09-07 15:38:57	elliott	consider tracking the size of the tree or whatever. natural base case.
2013-09-07 15:38:59	sordina	elliott, donri: yes I mean nicer as in more permissive.
2013-09-07 15:39:15	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 15:39:15	elliott	and you can always lift a semigroup to a monoid
2013-09-07 15:39:24	elliott	giving you a special value representing that base case of the empty tree.
2013-09-07 15:39:40	FreeFull	Some trees can't be empty
2013-09-07 15:40:34	jon_r	dumb q, but can i call a function without importing a module?
2013-09-07 15:40:37	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-07 15:40:43	jon_r	e.g. Data.String.endswith
2013-09-07 15:41:12	Taneb	The extra power granted by group over monoid isn't very useful in Haskell, as far as I can see
2013-09-07 15:41:21	donri	jon_r: you can with a flag that is on by default in ghci but not ghc/cabal
2013-09-07 15:41:29	sordina	But if you have a seigroup label that's lifted into a monoid then your tree becomes (FT (Maybe SemiGroup tag) value), which has a conceptual overhead, as opposed to (Maybe FT (Semigroup tag)) if you needed an 'empty' tree.
2013-09-07 15:41:37	donri	jon_r: it's probably a bad idea to use outside ghci
2013-09-07 15:41:41	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 15:41:44	sordina	(excuse the loosey goosey typeclass constructors)
2013-09-07 15:41:58	jon_r	so I have a string, I want to run ends with on it, so I have to import Data.String into my modules namespace?
2013-09-07 15:42:22	FreeFull	jon_r: You could only import the function you want
2013-09-07 15:42:29	FreeFull	But you do have to import
2013-09-07 15:42:38	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 15:42:44	FreeFull	For example,   import Data.String (endswith)
2013-09-07 15:43:33	FreeFull	The one caveat is that this will also import all typeclass instances from the module
2013-09-07 15:44:01	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-07 15:44:01	donri	there is no such function in Data.String though
2013-09-07 15:44:11	sordina	I guess I'm advocating lifting the tree instead of the tag.
2013-09-07 15:44:13	<--	mno2 (~mno2@1.34.43.236) has quit (Read error: Connection reset by peer)
2013-09-07 15:44:51	FreeFull	donri: Yeah, just using jon_r's example
2013-09-07 15:45:01	elliott	sordina: that doesn't work
2013-09-07 15:45:02	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-07 15:45:04	elliott	because subtrees can be empty too.
2013-09-07 15:45:04	donri	who i was talking to :)
2013-09-07 15:45:09	elliott	or, well.
2013-09-07 15:45:11	elliott	eh.
2013-09-07 15:45:32	jon_r	does anyone know what the equivalent of /\A\s+\Z/ is in haskell? I can't make \A \Z work
2013-09-07 15:45:46	FreeFull	There is a difference between having an empty subtree and having no subtree
2013-09-07 15:45:54	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-07 15:46:07	FreeFull	jon_r: You probably need \\ rather than \
2013-09-07 15:46:14	Iceland_jack	jon_r: Do you mean in strings? You need "\\A" for \A
2013-09-07 15:46:17	jon_r	well yes
2013-09-07 15:46:19	-->	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has joined #haskell
2013-09-07 15:46:27	jon_r	but I still can't make it work
2013-09-07 15:46:27	sordina	elliott: Ah. That must be what I'm missing. What is the purpose of an empty subtree?
2013-09-07 15:46:43	jon_r	e.g. message =~ "\\A\\s+$"
2013-09-07 15:46:47	FreeFull	jon_r: Which regex package are you using?
2013-09-07 15:46:53	elliott	I think I've gotten myself confused.
2013-09-07 15:46:57	jon_r	Text.Regex.Posix
2013-09-07 15:46:59	elliott	but anyway monoids are nice. identity laws are good to have. :P
2013-09-07 15:47:14	elliott	you could try writing semigroup finger trees and compare yourself
2013-09-07 15:47:26	jon_r	Text.Regex.Posix
2013-09-07 15:47:34	elliott	sordina: http://apfelmus.nfshost.com/articles/monoid-fingertree.html
2013-09-07 15:47:39	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 264 seconds)
2013-09-07 15:47:46	sordina	haha I just did in a little huffman encoder that's why I asked.
2013-09-07 15:47:56	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-07 15:48:05	elliott	sordina: "search" there uses mempty fwiw, you can see how it fits naturally
2013-09-07 15:48:11	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-07 15:48:13	elliott	also what I said about the empty trees was nonsense.
2013-09-07 15:48:16	elliott	but that's a really good article.
2013-09-07 15:49:50	sordina	Cool :) apfelmus always has such great posts.
2013-09-07 15:49:56	-->	akurei (~akurei@lak-115-135.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-07 15:50:03	<--	akurei__ (~akurei@31.193.12.99) has quit (Ping timeout: 264 seconds)
2013-09-07 15:50:43	sordina	https://gist.github.com/sordina/6475250 is the toy example I was putting together.
2013-09-07 15:51:23	FreeFull	elliott: I think most if not all trees won't be monoids but will be semigroups, and all forests will be monoids
2013-09-07 15:51:37	-->	kushal (~kdas@114.143.164.105) has joined #haskell
2013-09-07 15:51:42	<--	kushal (~kdas@114.143.164.105) has quit (Changing host)
2013-09-07 15:51:42	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-07 15:52:07	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-07 15:52:50	FreeFull	elliott: Actually, that's not true
2013-09-07 15:53:14	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-07 15:53:33	FreeFull	Trees are semigroups if their elements are part of a semigroup
2013-09-07 15:53:55	<--	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 15:55:02	-->	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has joined #haskell
2013-09-07 15:55:08	<--	thr33strikes (~wontez@ltea-047-066-097-021.pools.arcor-ip.net) has quit (Ping timeout: 268 seconds)
2013-09-07 15:55:49	FreeFull	The monoid instance for Forests I'm thinking on is probably the same that you would declare for ZipList
2013-09-07 15:56:01	<--	timemage (~user@unaffiliated/timemage) has quit (Read error: Operation timed out)
2013-09-07 15:56:42	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-07 15:56:49	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-07 15:57:52	sordina	FreeFull: Interesting
2013-09-07 15:58:17	-->	thr33strikes (~wontez@ltea-047-066-017-071.pools.arcor-ip.net) has joined #haskell
2013-09-07 15:58:56	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-07 15:59:13	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Quit: amosr)
2013-09-07 15:59:33	FreeFull	@let instance Monoid a => Monoid (ZipList a) where mempty = ZipList []; mappend (ZipList []) (ZipList []) = ZipList []; mappend (ZipList xs) (ZipList []) = ZipList xs; mappend (ZipList []) (ZipList ys) = ZipList ys; mappend (ZipList (x:xs)) (ZipList (y:ys)) = ZipList (mappend x y : mappend (ZipList xs) (ZipList ys))
2013-09-07 15:59:34	lambdabot	 .L.hs:155:45:
2013-09-07 15:59:34	lambdabot	     Couldn't match expected type `[a]' with actual type `ZipL...
2013-09-07 15:59:46	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-07 15:59:56	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-07 16:01:04	-->	gabriel__ (~gabriel@r190-134-100-10.dialup.adsl.anteldata.net.uy) has joined #haskell
2013-09-07 16:01:22	<--	Hat_and_Cloak (~quassel@180.234.65.152) has left #haskell ("http://quassel-irc.org - Chat comfortably. Anywhere.")
2013-09-07 16:03:06	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-07 16:03:07	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-07 16:03:10	FreeFull	@und
2013-09-07 16:03:10	lambdabot	Maybe you meant: undefine undo
2013-09-07 16:03:12	FreeFull	@undef
2013-09-07 16:03:12	lambdabot	Undefined.
2013-09-07 16:03:21	FreeFull	@let instance Monoid a => Monoid (ZipList a) where mempty = ZipList []; mappend (ZipList []) (ZipList []) = ZipList []; mappend (ZipList xs) (ZipList []) = ZipList xs; mappend (ZipList []) (ZipList ys) = ZipList ys; mappend (ZipList (x:xs)) (ZipList (y:ys)) = ZipList (mappend x y : getZipList (mappend (ZipList xs) (ZipList ys)))
2013-09-07 16:03:22	lambdabot	 Defined.
2013-09-07 16:03:55	FreeFull	map getSum $ getZipList $ ZipList [Sum 1,Sum 2,Sum 3] <> ZipList [Sum 5] <> mempty
2013-09-07 16:03:59	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-07 16:04:03	FreeFull	> map getSum $ getZipList $ ZipList [Sum 1,Sum 2,Sum 3] <> ZipList [Sum 5] <> mempty
2013-09-07 16:04:06	lambdabot	  [6,2,3]
2013-09-07 16:04:15	FreeFull	I do think it satisfies the monoid laws
2013-09-07 16:04:51	FreeFull	The Monoid a restraint can of course be changed to Semigroup a
2013-09-07 16:06:26	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 261 seconds)
2013-09-07 16:06:49	S_J	so anyone good with pipes. i have been shopping and im back to write a simple client/server with pipes to start with. do I need to give credentials? while i might want that eventually I just want to run a connection for now
2013-09-07 16:07:53	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-07 16:08:35	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 16:08:43	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-07 16:08:49	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:08:58	FreeFull	@undef
2013-09-07 16:08:58	lambdabot	Undefined.
2013-09-07 16:09:10	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-07 16:09:11	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:09:47	paolino	:t view
2013-09-07 16:09:48	lambdabot	MonadReader s m => Getting a s a -> m a
2013-09-07 16:10:10	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:10:15	paolino	this seems monadic , but I can use it in pure code
2013-09-07 16:10:37	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-07 16:11:05	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 16:11:14	paolino	:t \l -> (+1) . view l
2013-09-07 16:11:15	lambdabot	Num a1 => Getting a1 a a1 -> a -> a1
2013-09-07 16:11:19	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-07 16:12:07	merijn	Anyone know if it's possible to make pandoc's rST mode support \begin{code} style literate haskell?
2013-09-07 16:12:10	S_J	http://hackage.haskell.org/packages/archive/pipes-network/0.5.1.0/doc/html/Control-Proxy-TCP.html
2013-09-07 16:12:14	merijn	I really dislike Bird-style
2013-09-07 16:12:18	S_J	 serve (Host "127.0.0.1") "8000" $ (connectionSocket, remoteAddr) -> do
2013-09-07 16:12:23	S_J	whats with the -> ?
2013-09-07 16:12:34	merijn	paolino: It's because "r ->" is a monad :)
2013-09-07 16:12:37	S_J	i get parse error
2013-09-07 16:12:46	hpc	missing a lambda, i think
2013-09-07 16:12:56	S_J	r?
2013-09-07 16:12:58	hpc	what's the type of serve?
2013-09-07 16:13:11	paolino	merijn, where is the runReader ?
2013-09-07 16:13:12	-->	tilde (~tilde@host201-191-dynamic.23-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-07 16:13:14	startling	:t liftM (+ 1) view -- paolino
2013-09-07 16:13:15	lambdabot	(Num (m a), MonadReader s m) => Getting a s a -> m a
2013-09-07 16:13:16	<--	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-07 16:13:23	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-07 16:13:30	merijn	paolino: Presumably hidden in the lens operators
2013-09-07 16:13:47	merijn	:t (.~)
2013-09-07 16:13:49	lambdabot	ASetter s t a b -> b -> s -> t
2013-09-07 16:14:05	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-07 16:14:11	merijn	:t view _2
2013-09-07 16:14:12	lambdabot	(MonadReader s m, Field2 s s b b) => m b
2013-09-07 16:14:20	merijn	:t (view _2 .~)
2013-09-07 16:14:20	lambdabot	Field2 (a -> Mutator b) (a -> Mutator b) (s -> Mutator t) (s -> Mutator t) => b -> s -> t
2013-09-07 16:14:23	startling	paolino, there's no runReader. "view" works for any MonadReader x m. x -> anything is a MonadReader x m => m anything
2013-09-07 16:14:35	paolino	but the view returns a monadic value , I'm supposed to run it
2013-09-07 16:14:49	merijn	paolino: You're overthinking
2013-09-07 16:14:54	merijn	paolino: Forget that it is a monad
2013-09-07 16:15:01	startling	:t view traverse
2013-09-07 16:15:01	lambdabot	(Traversable t, Monoid a, MonadReader (t a) m) => m a
2013-09-07 16:15:12	merijn	paolino: functions are monads, you don't worry about how to run those, no?
2013-09-07 16:15:26	swistak35	Hi, is there a way to some dynamic programming, like convert Strings to Modules? I have imported some qualified modules, and I would like to have them in a list, and collectively run some method "foo" from them, and gather the results to another list. Is it possible?
2013-09-07 16:15:27	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (Ping timeout: 240 seconds)
2013-09-07 16:15:29	<--	timemage (~user@unaffiliated/timemage) has quit (Ping timeout: 268 seconds)
2013-09-07 16:16:15	Chousuke	swistak35: can you not just make a list of the functions you want to apply?
2013-09-07 16:16:17	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 16:16:23	startling	:t view _1 `asAppliedTo` (1, 2)
2013-09-07 16:16:24	lambdabot	(Num t, Num t1) => (t, t1) -> t
2013-09-07 16:16:25	swistak35	Except keeping all "foo" methods in a list, because I want also to run other "bar" method, so I would have to maintain two different lists (but it's still fine solution which I will use, but it doesn't look nice)
2013-09-07 16:16:28	swistak35	Chousuke: ^
2013-09-07 16:16:45	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-07 16:16:47	Chousuke	hmm
2013-09-07 16:17:03	<--	determinant_ (~determina@2001:4898:7020:301a:e516:bd37:9388:947f) has quit (Ping timeout: 264 seconds)
2013-09-07 16:17:20	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:17:22	swistak35	There would be only two lists, so it isn't that hard, but if there's a way to make it more clear I would like to know : )
2013-09-07 16:17:27	Chousuke	if you need to do that with a whole bunch of methods, you could make a record of functions
2013-09-07 16:17:54	Chousuke	I don't think you can treat a module as a first-class value
2013-09-07 16:17:55	<--	[[zzzz]] (~q@node-tok.pool-125-24.dynamic.totbb.net) has quit (Ping timeout: 245 seconds)
2013-09-07 16:18:04	paolino	startling I appreciate but there is a gap from here to there
2013-09-07 16:18:05	Chousuke	and involving Strings in any way sounds evil
2013-09-07 16:18:25	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:18:25	swistak35	Chousuke: okay, thank you : )
2013-09-07 16:18:26	-->	soulofpeace (~soulofpea@cm136.gamma162.maxonline.com.sg) has joined #haskell
2013-09-07 16:18:43	<--	talzeus (~studybot_@softbank221103169115.bbtec.net) has quit (Remote host closed the connection)
2013-09-07 16:19:17	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:19:18	merijn	paolino: By applying it as a function GHC infers you're using the "(->) r" monad of MonadReader
2013-09-07 16:19:24	paolino	startling, for sure the m there is not a datatype
2013-09-07 16:19:55	paolino	so it's a typesynonyminstance ?
2013-09-07 16:20:00	merijn	what?
2013-09-07 16:20:05	paolino	the m
2013-09-07 16:20:06	-->	[[zzzz]] (~q@node-tok.pool-125-24.dynamic.totbb.net) has joined #haskell
2013-09-07 16:20:10	-->	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has joined #haskell
2013-09-07 16:20:16	Chousuke	the m is a type variable?
2013-09-07 16:20:23	merijn	Why do you think typesynonyminstance is remotely relevant?
2013-09-07 16:20:23	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:20:27	-->	thunderrd (~thunderrd@119.42.79.49) has joined #haskell
2013-09-07 16:20:35	merijn	m is just a type variable
2013-09-07 16:20:37	paolino	because I don't unwrap it
2013-09-07 16:20:37	Chousuke	still sounds like overthinking
2013-09-07 16:20:51	merijn	paolino: There's nothing to unwrap
2013-09-07 16:21:29	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-07 16:21:31	Ghoul_	@where exercises
2013-09-07 16:21:31	lambdabot	http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems http://www.reddit.com/r/dailyprogrammer/ http://www.reddit.com/r/programmingchallenges/
2013-09-07 16:21:32	paolino	so it's not a Monad instance for a datatype
2013-09-07 16:21:33	merijn	> return 5 $ 3
2013-09-07 16:21:34	lambdabot	  5
2013-09-07 16:21:35	S_J	hpc: http://hackage.haskell.org/packages/archive/pipes-network/0.5.1.0/doc/html/Control-Proxy-TCP.html
2013-09-07 16:21:46	merijn	:t return 5
2013-09-07 16:21:47	lambdabot	(Monad m, Num a) => m a
2013-09-07 16:21:59	merijn	paolino: It's doing the exact same as that
2013-09-07 16:22:07	S_J	serve :: HostPreference	-> ServiceName -> ((Socket, SockAddr) -> IO ())	-> IO ()
2013-09-07 16:22:42	merijn	"return 5 :: Monad m => m Int", if I apply "m Int" to a Char, then logically m must be "(->) Char"
2013-09-07 16:22:43	hpc	S_J: yeah, definitely missing a lambda
2013-09-07 16:22:50	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:23:03	merijn	paolino: Which means "m Int" must be "(->) Char Int" == "Char -> Int"
2013-09-07 16:23:08	merijn	> return 5 $ 'a'
2013-09-07 16:23:09	lambdabot	  5
2013-09-07 16:23:12	hpc	it should be serve "whatever" "whatever" $ (x,y) -> do ...
2013-09-07 16:23:14	-->	petapetapeta (~quassel@130.225.165.43) has joined #haskell
2013-09-07 16:23:19	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-07 16:23:28	hpc	er, dammit
2013-09-07 16:23:31	hpc	it should be serve "whatever" "whatever" $ \(x,y) -> do ...
2013-09-07 16:23:39	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:23:58	merijn	paolino: Typeclass instances are for types, there is no requirement that said type is an ADT
2013-09-07 16:24:34	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 16:24:37	<--	RThinker (~yegor@77.47.204.159) has quit (Quit: Leaving.)
2013-09-07 16:24:40	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:24:44	paolino	ok, then why view is so generalized ?
2013-09-07 16:24:46	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-07 16:25:04	<--	toltolt (~Kevin@209.65.15.42) has quit (Ping timeout: 260 seconds)
2013-09-07 16:25:11	haasn	@tell edwardk there's so much boilerplate in Tabular; wouldn't it be possible to auto-derive most of it via TH?
2013-09-07 16:25:11	lambdabot	Consider it noted.
2013-09-07 16:25:13	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-07 16:25:16	<--	RThinker (~yegor@77.47.204.159) has quit (Client Quit)
2013-09-07 16:25:25	paolino	:t (^.)
2013-09-07 16:25:26	lambdabot	s -> Getting a s a -> a
2013-09-07 16:25:38	paolino	:t flip (^.)
2013-09-07 16:25:39	lambdabot	Getting c a c -> a -> c
2013-09-07 16:25:41	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-07 16:25:44	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-07 16:25:45	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:26:11	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-07 16:26:15	paolino	:t view :: Getting c a c -> a -> c
2013-09-07 16:26:16	lambdabot	Getting c a c -> a -> c
2013-09-07 16:26:30	<--	zh217 (~zh217@li428-181.members.linode.com) has quit (Quit: zh217)
2013-09-07 16:26:33	supki	paolino: to use it in ReaderT
2013-09-07 16:26:45	paolino	ah
2013-09-07 16:26:48	-->	tolt (~Kevin@209.65.15.42) has joined #haskell
2013-09-07 16:27:14	paolino	I get this for free for every function, Ic
2013-09-07 16:27:33	<--	akurei (~akurei@lak-115-135.wohnheime.ruhr-uni-bochum.de) has quit (Quit: Konversation terminated!)
2013-09-07 16:28:07	-->	talzeus (~studybot_@softbank221103169115.bbtec.net) has joined #haskell
2013-09-07 16:28:34	paolino	it's good that we don't write any pure function of 2 args like that
2013-09-07 16:28:52	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 16:28:55	paolino	any signature
2013-09-07 16:29:04	Ghoul_	S_J: change $ to $\
2013-09-07 16:29:32	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:29:37	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:29:40	hpc	:t ($\)
2013-09-07 16:29:41	lambdabot	    Not in scope: `$\'
2013-09-07 16:29:42	lambdabot	    Perhaps you meant one of these:
2013-09-07 16:29:42	lambdabot	      `$' (imported from Data.Function), `$!' (imported from Prelude),
2013-09-07 16:29:53	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:29:56	Ghoul_	uh, add a space.
2013-09-07 16:30:01	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 16:30:04	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 16:30:05	--	rishabhjain_ is now known as rishabhjain
2013-09-07 16:30:28	Ghoul_	 serve (Host "127.0.0.1") "8000" $ \(connectionSocket, remoteAddr) -> do
2013-09-07 16:30:36	<--	gabriel__ (~gabriel@r190-134-100-10.dialup.adsl.anteldata.net.uy) has quit (Ping timeout: 240 seconds)
2013-09-07 16:30:38	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 16:30:41	paolino	btw thanks, some stuff is difficult to settle in my head
2013-09-07 16:30:45	Ghoul_	also, I recommend you probably change (Host ...) to just HostAny
2013-09-07 16:31:28	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-07 16:31:38	paolino	:t fmap 5 6
2013-09-07 16:31:39	lambdabot	(Functor f, Num (a -> b), Num (f a)) => f b
2013-09-07 16:32:12	<--	RThinker (~yegor@77.47.204.159) has quit (Quit: Leaving.)
2013-09-07 16:32:14	-->	RThinker1 (~yegor@77.47.204.159) has joined #haskell
2013-09-07 16:32:16	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 16:32:17	hpc	Ghoul_: explicitly setting the host is a good sanity check
2013-09-07 16:32:29	hpc	in case you make it publicly visible or something
2013-09-07 16:32:31	merijn	Right, time to improve the world one tiny step at a time...
2013-09-07 16:33:05	hpc	merijn: can you start with how long it takes to download a steam game? ;)
2013-09-07 16:33:06	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-07 16:33:14	merijn	hpc: It's pretty fast here
2013-09-07 16:33:16	Ghoul_	hpc: I don't do that because it means I can test it on both an ipv4 and an ipv6 config
2013-09-07 16:33:25	S_J	so im on windows, pipes work there to? I need to do withSocketsDo, how do I do that with the serve function inpipes?
2013-09-07 16:33:25	merijn	hpc: My UK cable might be sucky, but I did get 3MB/s
2013-09-07 16:33:40	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-07 16:33:42	hpc	Ghoul_: well yeah, i wouldn't use an IP either, but limiting to "localhost" would be better
2013-09-07 16:33:50	Ghoul_	S_J: just add it to main
2013-09-07 16:33:56	Ghoul_	main = withSocketsDo $ regular stuff..
2013-09-07 16:33:59	merijn	hpc: I was more thinking along the lines of "add support for latex style literate haskell to pandoc's rST engine"
2013-09-07 16:34:10	merijn	hpc: Because Bird-style sucks!
2013-09-07 16:34:21	hpc	but bird is the word!
2013-09-07 16:34:43	<--	azcodex (~azcodex_@43.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Ping timeout: 260 seconds)
2013-09-07 16:35:43	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-09-07 16:35:56	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-07 16:35:59	merijn	Semi-related, why does hdevtools only produce useful typing info if a package is installed :(
2013-09-07 16:36:02	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 16:36:10	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-07 16:36:13	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 16:36:31	deech	Hi all, I'm currently working on an FFI binding. Are enum's the only way to get c2hs to translate `#define`'s?
2013-09-07 16:37:08	-->	kurisumasu (~chris@201.80.214.167) has joined #haskell
2013-09-07 16:37:30	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Ping timeout: 240 seconds)
2013-09-07 16:37:53	<--	yopikh (~mand@79.175.167.200) has quit (Remote host closed the connection)
2013-09-07 16:38:00	<--	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-07 16:39:09	merijn	deech: So you want to make #define things available as haskell values?
2013-09-07 16:39:23	--	Mortomesleeping is now known as Mortomes
2013-09-07 16:40:07	merijn	deech: Not sure how to do that using c2hs, but GHC's new capi FFI lets you import #define values using the normal "foreign import" stuff
2013-09-07 16:40:13	merijn	deech: See this example: https://github.com/merijn/posix-pty/blob/master/System/Posix/Pty.hs#L224-L235
2013-09-07 16:40:42	merijn	Well... "new" :p
2013-09-07 16:40:58	solirc	Hackage down?
2013-09-07 16:41:13	Taneb	Hehe, I just successfully wrote a program in Haskell with a GUI
2013-09-07 16:41:17	Taneb	I feel like a god among me
2013-09-07 16:41:19	Taneb	n
2013-09-07 16:41:27	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-07 16:41:37	solirc	Luckily there is still http://new-new-hackage.haskell.org/
2013-09-07 16:41:55	Taneb	It's just a little thing for converting celcius and fahrenheit
2013-09-07 16:42:02	Taneb	And it crashes if it can't read the text-box
2013-09-07 16:42:24	merijn	What's this error mean? "Could not find module `Paths_pandoc` it is a hidden module in the package `pandoc-1.11.1'"
2013-09-07 16:42:55	Clint	it means you're trying to import a hidden module?
2013-09-07 16:42:57	hpc	merijn: it means there's probably a reason it didn't want you using pandoc-1.11.1
2013-09-07 16:43:04	hpc	any other output?
2013-09-07 16:43:09	<--	Soft (~soft@unaffiliated/soft) has quit (Quit: WeeChat 0.4.2-dev)
2013-09-07 16:43:27	-->	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has joined #haskell
2013-09-07 16:43:40	<--	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-07 16:43:58	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 16:44:03	-->	gnuvince (~vince@199.192.237.218) has joined #haskell
2013-09-07 16:44:05	<--	gnuvince (~vince@199.192.237.218) has quit (Changing host)
2013-09-07 16:44:05	-->	gnuvince (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-07 16:44:57	deech	merijn: That's awesome. How recent is this change?
2013-09-07 16:45:10	merijn	hpc: Well, I'm trying to get hdevtools to typecheck the uninstalled pandoc stuff
2013-09-07 16:45:25	merijn	deech: Dunno exactly, it's not *that* recent/new, I think
2013-09-07 16:45:39	deech	merijn: And also, is there some reason not to mark those import "pure"?
2013-09-07 16:46:02	merijn	deech: Oh wait, yes it is that new >.<
2013-09-07 16:46:03	paolino	is hdiff.luite.com ever down ?
2013-09-07 16:46:07	merijn	It's in the 7.6 release notes
2013-09-07 16:46:22	deech	merijn: Ah.
2013-09-07 16:46:32	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 16:46:33	-->	scripty (~scripty@117.192.170.227) has joined #haskell
2013-09-07 16:46:38	merijn	deech: "unsafe" is marking them pure :)
2013-09-07 16:46:53	deech	merijn: Really?! Crap, I've been wasting my time.
2013-09-07 16:47:00	merijn	deech: unsafe means "import this in an unsafe way" not "import something unsafe"
2013-09-07 16:48:00	supki	merijn: Paths_pandoc is cabal-generated module, the error means they for some reason have included it in .cabal file
2013-09-07 16:48:02	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-07 16:48:06	--	functorfun is now known as funfunctor
2013-09-07 16:48:08	deech	merijn: I thought "pure" did a thing where the call is only made once because you're saying the results' always the same.
2013-09-07 16:48:09	S_J	if i want to run a connection over http, what lib would i use?
2013-09-07 16:48:39	-->	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-07 16:48:45	-->	tiksa_ (~tiksa@109-92-245-42.dynamic.isp.telekom.rs) has joined #haskell
2013-09-07 16:49:17	merijn	deech: I think the following things apply "safe" means C can call back into haskell, but has more overhead, "unsafe" is unsafe if you call back into haskell, but less overhead
2013-09-07 16:49:22	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-07 16:49:27	<--	tiksa_ (~tiksa@109-92-245-42.dynamic.isp.telekom.rs) has quit (Client Quit)
2013-09-07 16:49:29	-->	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has joined #haskell
2013-09-07 16:49:46	merijn	deech: If the type doesn't return IO GHC treats it as pure
2013-09-07 16:49:46	deech	merijn: Thanks.
2013-09-07 16:49:55	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-07 16:50:08	merijn	deech: So "unsafe" and "Word8" is basically a constant (or should be)
2013-09-07 16:50:28	merijn	I'm not entirely sure about that, but someone will presumably correct me if I'm not correct :p
2013-09-07 16:50:49	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-07 16:51:51	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-07 16:53:05	-->	determinant_ (~determina@183.83.58.77) has joined #haskell
2013-09-07 16:53:39	-->	agumonkey (~agu@170.158.70.86.rev.sfr.net) has joined #haskell
2013-09-07 16:54:29	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-07 16:54:59	statusfailed	Hackage is down!? everybody panic!
2013-09-07 16:55:40	<--	kurisumasu (~chris@201.80.214.167) has quit (Quit: Au revoir)
2013-09-07 16:55:51	-->	wavewave (808dea3e@gateway/web/freenode/ip.128.141.234.62) has joined #haskell
2013-09-07 16:56:30	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-09-07 16:57:15	<--	arcatan (arcatan@hilla.kapsi.fi) has quit (Quit: THE ONLY RULE IS A GIGANTIC METEORITE AND WE'RE ALL GOING TO DIE)
2013-09-07 16:57:25	-->	elediaz (~quassel@92.59.146.201) has joined #haskell
2013-09-07 16:57:47	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Remote host closed the connection)
2013-09-07 16:57:53	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-07 16:58:08	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-07 16:58:23	<--	talzeus (~studybot_@softbank221103169115.bbtec.net) has quit (Remote host closed the connection)
2013-09-07 16:58:56	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 16:59:10	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2013-09-07 17:00:08	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-07 17:00:48	<--	LAMMJohnson (~ja@user-5af439a1.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-07 17:00:58	-->	LAMMJohnson (~ja@user-5af4340a.broadband.tesco.net) has joined #haskell
2013-09-07 17:01:04	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-07 17:01:36	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Remote host closed the connection)
2013-09-07 17:01:39	mkramer	are the hackage doc pages down?
2013-09-07 17:01:42	AnalogFile	yup, Hackage down for me too
2013-09-07 17:02:06	sclv	we're swapping a drive
2013-09-07 17:02:12	sclv	expect 1/2 hour of downtime
2013-09-07 17:02:14	mkramer	<3
2013-09-07 17:02:17	<--	ashnur (~ashnur@79.117.69.143) has quit (Quit: WeeChat 0.4.1)
2013-09-07 17:02:27	<--	wavewave (808dea3e@gateway/web/freenode/ip.128.141.234.62) has quit (Quit: Page closed)
2013-09-07 17:02:36	-->	ecube (~ecube@unaffiliated/ecube) has joined #haskell
2013-09-07 17:02:55	merijn	I should've kept track of that, I just nuked a bunch of packages >.<
2013-09-07 17:03:13	statusfailed	merijn: it was you!!
2013-09-07 17:03:24	-->	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has joined #haskell
2013-09-07 17:03:30	statusfailed	oh wait I just read sclv's comment :P
2013-09-07 17:03:39	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-07 17:03:50	-->	juiko_ (~juiko@pc-141-163-120-200.cm.vtr.net) has joined #haskell
2013-09-07 17:04:49	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 17:05:19	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-07 17:06:03	<--	soulofpeace (~soulofpea@cm136.gamma162.maxonline.com.sg) has quit (Ping timeout: 268 seconds)
2013-09-07 17:06:24	kuribas	Does hackage build the documentation automatically?
2013-09-07 17:06:36	merijn	kuribas: Yes, if possible
2013-09-07 17:06:54	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-07 17:07:17	merijn	kuribas: Haddock requires that the package can be build to produce documentation, so packages that don't build on hackage have no online documentation (see for example the haskell-zeromq package and other things relying on C libraries)
2013-09-07 17:07:17	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-07 17:07:29	dfan	I just wrote a little helper function that has to already exist somewhere, but hoogling didn't turn up anything
2013-09-07 17:07:33	dfan	onlyIf :: Bool -> Maybe a -> Maybe a
2013-09-07 17:07:38	dfan	onlyIf b x = if b then x else Nothing
2013-09-07 17:07:51	dfan	Is there a more idiomatic way to write that logic?
2013-09-07 17:07:53	<--	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 17:08:12	Iceland_jack	lookds like guard
2013-09-07 17:08:14	Iceland_jack	@ty guard
2013-09-07 17:08:15	lambdabot	MonadPlus m => Bool -> m ()
2013-09-07 17:08:17	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 17:08:40	Iceland_jack	> do guard True; Just "hello!"
2013-09-07 17:08:42	lambdabot	  Just "hello!"
2013-09-07 17:08:43	Iceland_jack	> do guard False; Just "hello!"
2013-09-07 17:08:44	lambdabot	  Nothing
2013-09-07 17:09:09	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Quit: Leaving)
2013-09-07 17:09:10	Iceland_jack	> do guard True; "hello!"
2013-09-07 17:09:12	lambdabot	  "hello!"
2013-09-07 17:09:15	Iceland_jack	> do guard False; "hello!"
2013-09-07 17:09:15	lambdabot	  ""
2013-09-07 17:09:17	applicative	there must be something more compact?
2013-09-07 17:09:19	applicative	hm
2013-09-07 17:09:20	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-07 17:09:24	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 17:09:28	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 264 seconds)
2013-09-07 17:09:29	-->	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has joined #haskell
2013-09-07 17:09:33	-->	lusory (~lusory@42.60.25.228) has joined #haskell
2013-09-07 17:09:37	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 240 seconds)
2013-09-07 17:09:47	-->	elediaz_ (~quassel@62.32.138.131) has joined #haskell
2013-09-07 17:09:58	Iceland_jack	I mean it depends on what dfan actually wants to do, maybe they're looking for something like ‘unless’
2013-09-07 17:10:29	<--	elediaz (~quassel@92.59.146.201) has quit (Ping timeout: 261 seconds)
2013-09-07 17:10:40	dfan	> Hmm, I would prefer to avoid dropping into do's and semicolons, but maybe that is what people do
2013-09-07 17:10:41	Iceland_jack	It's hard to tell without further context
2013-09-07 17:10:42	lambdabot	  <hint>:1:4: parse error on input `,'
2013-09-07 17:10:53	kuribas	merijn: So basicly, when cabal haddock works, it should show up on hackage.
2013-09-07 17:10:57	dfan	and guard True >>= \_ -> Just "foo" is too ugly for words
2013-09-07 17:10:58	<--	Twey (~Twey@unaffiliated/twey) has quit (Excess Flood)
2013-09-07 17:11:13	elliott	guard true >> Just "foo"
2013-09-07 17:11:17	applicative	[x | x <- mthing , bool] :: MonadPlus m => Bool -> m b -> m b
2013-09-07 17:11:23	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-07 17:11:24	Iceland_jack	Nothing wrong with do-notation..
2013-09-07 17:11:34	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-07 17:11:35	dfan	elliott: Aha!
2013-09-07 17:11:58	applicative	kuribas: certainly thats the theory; with all the linking to the rest of hackage
2013-09-07 17:12:18	kuribas	Ok, I'll cross my fingers :)
2013-09-07 17:12:29	merijn	kuribas: Yes
2013-09-07 17:12:44	merijn	kuribas: Keep in mind that hoogle doesn't index all of them, though
2013-09-07 17:12:47	dfan	I think I like elliott's solution the best
2013-09-07 17:12:47	-->	Twey (~Twey@unaffiliated/twey) has joined #haskell
2013-09-07 17:12:54	elliott	I suggest not writing guard True though :)
2013-09-07 17:13:34	merijn	elliott: That's totes useful!
2013-09-07 17:13:43	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-07 17:14:07	kuribas	merijn: If my documentation shows up, that's already good!
2013-09-07 17:14:11	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-07 17:14:50	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-07 17:15:14	merijn	Speaking of which
2013-09-07 17:15:51	merijn	Is it possible to generate "stand-alone" documentation? i.e. like my local documentation, but linking to hackage rather than locally?
2013-09-07 17:16:18	merijn	That'd let me upload my (not-building) docs somewhere else
2013-09-07 17:17:28	danr	is there some function to look through type synonyms in template haskell?
2013-09-07 17:17:59	danr	oh, found one by Lennart
2013-09-07 17:18:15	<--	mirsal (~mirsal@videolan/developer/Mirsal) has quit (Ping timeout: 264 seconds)
2013-09-07 17:18:30	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 17:18:31	applicative	dfan: i think defined
2013-09-07 17:18:55	applicative	let dfan bool = if bool then Just id else Nothing in dfan True <*> Just 1
2013-09-07 17:19:00	<--	mobileblue (~mobileblu@dslb-188-098-116-041.pools.arcor-ip.net) has quit (Ping timeout: 268 seconds)
2013-09-07 17:19:03	applicative	> let dfan bool = if bool then Just id else Nothing in dfan True <*> Just 1
2013-09-07 17:19:05	lambdabot	  Just 1
2013-09-07 17:19:05	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 17:19:17	applicative	> let dfan bool = if bool then Just id else Nothing in dfan False <*> Just 1
2013-09-07 17:19:19	lambdabot	  Nothing
2013-09-07 17:19:27	<--	cdidd (~cdidd@89-178-206-241.broadband.corbina.ru) has quit (Ping timeout: 264 seconds)
2013-09-07 17:20:23	applicative	and so on. I think this problem hasn't been solved yet.
2013-09-07 17:21:00	-->	mobileblue (~mobileblu@dslb-094-218-073-219.pools.arcor-ip.net) has joined #haskell
2013-09-07 17:21:36	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (Quit: -)
2013-09-07 17:21:51	<--	azm (~x@unaffiliated/azm) has left #haskell ("Leaving")
2013-09-07 17:23:36	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-09-07 17:23:52	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 264 seconds)
2013-09-07 17:23:56	<--	petapetapeta (~quassel@130.225.165.43) has quit (Ping timeout: 268 seconds)
2013-09-07 17:24:19	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-07 17:24:38	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-07 17:24:43	applicative	> let assertZ p = if p then return () else mzero in assertZ True *> Just 1
2013-09-07 17:24:44	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-07 17:24:45	lambdabot	  Just 1
2013-09-07 17:24:45	dfan	I am happy with 'guard myTest >>' but I can see how <*> can read nicely to Haskellers
2013-09-07 17:24:51	applicative	> let assertZ p = if p then return () else mzero in assertZ False *> Just 1
2013-09-07 17:24:53	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 17:24:54	lambdabot	  Nothing
2013-09-07 17:24:54	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Ping timeout: 246 seconds)
2013-09-07 17:25:20	applicative	oh okay, Control.Errors has a function assertMay that specialized assertZ there
2013-09-07 17:25:55	applicative	Control.Error I mean.  Actually, thats sort of what you mean, no?
2013-09-07 17:26:01	-->	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has joined #haskell
2013-09-07 17:26:57	<--	S_J (S_J@m83-180-189-246.cust.tele2.se) has quit (Read error: Connection reset by peer)
2013-09-07 17:27:03	applicative	of course, assertMay bool *>  and guard bool >> are pretty similar ...
2013-09-07 17:27:45	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-09-07 17:27:45	applicative	but the former is just so much swanker ;)
2013-09-07 17:28:01	-->	S_J (S_J@m83-180-189-246.cust.tele2.se) has joined #haskell
2013-09-07 17:28:27	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 17:29:04	-->	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-07 17:30:05	-->	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has joined #haskell
2013-09-07 17:30:24	dfan	Here is a use case: I am checking to see whether an incomplete hand of cards can end up being a flush, given the available remaining cards, but only if the hand so far is all of one suit
2013-09-07 17:30:33	danilo2	Does anybody have seen such behaviour before? : I'm running "cabal update" and getting the error: "Downloading the latest package list from hackage.haskell.org \n cabal: does not exist"
2013-09-07 17:30:34	dfan	The latter is my guard condition
2013-09-07 17:30:50	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-09-07 17:30:53	applicative	hackage is down? danilo2
2013-09-07 17:31:11	applicative	allegedly just for an hour or so
2013-09-07 17:31:16	dfan	guard flushPossible >> (L.find (rankAvail st xs) ranks) >>= (\r -> Just $ groupScore Flush + xr + yr + r)
2013-09-07 17:31:17	dfan	 
2013-09-07 17:31:27	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 17:31:29	-->	nbouscal (~nbouscal@pool-72-89-172-52.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 17:31:29	dfan	is what it looks like now, which I'm happy enough with
2013-09-07 17:31:32	applicative	if desperate you can use luite's site, danilo2
2013-09-07 17:31:45	danilo2	applicative: ah you're right. But the error message is not informative :)
2013-09-07 17:31:46	merijn	danilo2: Hackage is down for maintenance
2013-09-07 17:31:51	merijn	applicative: 20-30 mins more like
2013-09-07 17:32:06	-->	cdidd (~cdidd@95-26-119-8.broadband.corbina.ru) has joined #haskell
2013-09-07 17:32:19	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-07 17:32:21	merijn	applicative: They're slotting a new disk into the RAID mirror, one of the disks is dying
2013-09-07 17:32:25	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-07 17:32:40	danilo2	applicative: Luite has a mirror of hackage somewhere? What is the luite's site?
2013-09-07 17:33:03	merijn	@where mirror
2013-09-07 17:33:04	lambdabot	see hackage-mirror
2013-09-07 17:33:04	applicative	http://hdiff.luite.com/cgit/errors/tree/Control/Error.hs
2013-09-07 17:33:06	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-07 17:33:09	merijn	@where hackage-mirror
2013-09-07 17:33:09	lambdabot	remote-repo: hdiff.luite.com:http://hdiff.luite.com/packages/archive/
2013-09-07 17:33:13	applicative	oh that's a particular module t
2013-09-07 17:33:30	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 17:33:40	applicative	put what merijn says in your .cabal/config file, and you can toggle between it and hackage; the solution has downsides but few
2013-09-07 17:33:44	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-07 17:34:25	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 268 seconds)
2013-09-07 17:34:28	-->	heha (d2ba73ba@gateway/web/freenode/ip.210.186.115.186) has joined #haskell
2013-09-07 17:34:36	danilo2	applicative: thank you! :) Could you please give me a hint how to tell cabal to use it? I was searching right now for any information but didnt find anything useful :(
2013-09-07 17:34:49	heha	hi all, newbie here
2013-09-07 17:35:02	applicative	open $HOME/.cabal/config on unix
2013-09-07 17:35:13	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 17:35:28	applicative	danilo2: that is, edit it; I'm not sure where it is on windows.
2013-09-07 17:35:36	-->	uvelichitel (~uvelichit@37.73.200.106) has joined #haskell
2013-09-07 17:35:41	applicative	oh wait, with os x - orthodox platform it may be elsewhere too
2013-09-07 17:35:41	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 17:35:46	applicative	hi heha
2013-09-07 17:35:47	danilo2	applicative: Ok! I've got it :) I do not use windows :)
2013-09-07 17:35:48	-->	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2013-09-07 17:35:53	geekosaur	os x puts it in the same place and uses it to redirect everything else
2013-09-07 17:36:03	applicative	so you'll see a line just like the one merijn typed
2013-09-07 17:36:14	applicative	comment it, and add merijns
2013-09-07 17:36:19	applicative	wait lambdabot typed it
2013-09-07 17:36:25	applicative	@where hackage-mirror
2013-09-07 17:36:25	lambdabot	remote-repo: hdiff.luite.com:http://hdiff.luite.com/packages/archive/
2013-09-07 17:36:40	danilo2	applicative, merijn: I got it :) thank you very much! :)
2013-09-07 17:36:42	applicative	or is the syntax wrong
2013-09-07 17:36:45	-->	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has joined #haskell
2013-09-07 17:36:55	applicative	then do cabal update again
2013-09-07 17:37:02	danilo2	ok :)
2013-09-07 17:37:12	heha	i would like to use haskell for COM automation, but the current version (com-1.2.3.1) failed to build...
2013-09-07 17:37:14	geekosaur	it's the right syntax
2013-09-07 17:37:16	<--	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has quit (Quit: tcsavage)
2013-09-07 17:37:40	applicative	it might be more sensible to be patient in the present case, but the solution is worth knowing, so you can toggle between them on worse days
2013-09-07 17:37:49	-->	hiroakip (~hiroaki@p5DC637E3.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 17:38:13	 *	ski doesn't know about COM
2013-09-07 17:39:10	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-07 17:39:49	applicative	hah, google thinks that the top directory for the com package is in Indonesian
2013-09-07 17:39:57	-->	xinming_ (~xinming@125.82.207.57) has joined #haskell
2013-09-07 17:40:00	applicative	http://hdiff.luite.com/cgit/com/tree/
2013-09-07 17:40:28	applicative	maybe google translate could translate haskell into haskell, by inlining the definitions for us
2013-09-07 17:40:45	<--	nbouscal (~nbouscal@pool-72-89-172-52.nycmny.fios.verizon.net) has quit (Quit: Computer has commenced electric sheep tracking protocol.)
2013-09-07 17:40:47	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 17:40:49	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-07 17:40:59	kier	I think google translate should be able to translate Indonesian into Haskell
2013-09-07 17:41:05	-->	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has joined #haskell
2013-09-07 17:41:14	<--	erisco (~erisco@198-91-210-150.cpe.distributel.net) has left #haskell ("Leaving")
2013-09-07 17:41:23	-->	erisco (~erisco@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-07 17:41:32	applicative	heha: is the error something horrible and com-ish, or a specific haskell error?
2013-09-07 17:41:36	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 256 seconds)
2013-09-07 17:41:39	-->	donri (~dag@78-69-90-154-no194.tbcn.telia.com) has joined #haskell
2013-09-07 17:41:40	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-07 17:41:41	<--	donri (~dag@78-69-90-154-no194.tbcn.telia.com) has quit (Changing host)
2013-09-07 17:41:41	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-09-07 17:42:07	applicative	heha: it looks like it was uploaded in the last year; i dimly remember someone working with it not too many months back
2013-09-07 17:42:31	-->	anRch (~markmilli@23.30.182.241) has joined #haskell
2013-09-07 17:42:39	heha	anyone using com package? does it works?
2013-09-07 17:43:02	<--	xinming (~xinming@113.248.88.83) has quit (Ping timeout: 248 seconds)
2013-09-07 17:43:02	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 17:43:16	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-07 17:43:16	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-07 17:43:21	ski	perhaps if you stay, someone later will have an idea
2013-09-07 17:43:24	applicative	it has no dependencies on hackage but thats maybe not to surprising; it would end up in user executables
2013-09-07 17:43:27	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-07 17:43:30	-->	Gentlecat (~Roman@79.105.224.224) has joined #haskell
2013-09-07 17:43:48	applicative	heha: the community is in dire need of windows knowledgeable people, which may or may not alarm you to hear
2013-09-07 17:43:49	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-07 17:44:11	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-07 17:44:13	<--	rnons (~rnons@183.152.58.163) has quit (Read error: No route to host)
2013-09-07 17:44:24	<--	Soft (~soft@unaffiliated/soft) has quit (Quit: WeeChat 0.4.2-dev)
2013-09-07 17:44:29	heha	applicative, there is quite a lot of warnings and errors...
2013-09-07 17:44:32	applicative	heha: the compiler people know what they are doing with windows the rest of us ...
2013-09-07 17:44:49	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell
2013-09-07 17:44:52	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-07 17:44:53	applicative	heha: warnings are to be expected; what is the last error before failure
2013-09-07 17:44:59	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 17:45:18	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 17:45:18	--	rishabhjain_ is now known as rishabhjain
2013-09-07 17:45:21	heha	System\Win32\Com\Automation\TypeLib.hs:2823:1:     Unacceptable argument type in foreign declaration: Ptr ()     When checking declaration:       foreign import stdcall safe "dynamic" prim_System_Win32_Com_Automation_TypeLib_afterTypeChange          :: Ptr ()            -> Ptr ()               -> Int32 -> Ptr (ITypeInfo a) -> Ptr WideString -> IO Int32
2013-09-07 17:45:49	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 240 seconds)
2013-09-07 17:45:53	heha	sorry, simply paste here the error
2013-09-07 17:46:09	applicative	right this violates more recent rules, doesn't it?
2013-09-07 17:46:31	heha	i think so, maybe it works in older ghc...
2013-09-07 17:47:02	geekosaur	I think it requires extra imports now, yeh
2013-09-07 17:47:11	joelteon	darn, hackage is down again
2013-09-07 17:47:18	applicative	is that what this error is?  I thought it was about ffi
2013-09-07 17:47:25	applicative	@hackage-mirror
2013-09-07 17:47:25	lambdabot	Unknown command, try @list
2013-09-07 17:47:26	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-07 17:47:27	-->	__S__J__ (S_J@m83-180-189-246.cust.tele2.se) has joined #haskell
2013-09-07 17:47:31	applicative	@where hackage-mirror
2013-09-07 17:47:32	lambdabot	remote-repo: hdiff.luite.com:http://hdiff.luite.com/packages/archive/
2013-09-07 17:47:34	joelteon	sweet
2013-09-07 17:48:04	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-09-07 17:48:16	merijn	joelteon: It's offline to get a dying disk replaced, should come back up any moment now
2013-09-07 17:48:24	<--	S_J (S_J@m83-180-189-246.cust.tele2.se) has quit (Ping timeout: 256 seconds)
2013-09-07 17:48:25	joelteon	oh, good
2013-09-07 17:48:46	heha	this is the last one
2013-09-07 17:48:54	--	estultic1a is now known as estulticia
2013-09-07 17:49:14	ParaSa1lin	anyone have a mirror of hackage docs?
2013-09-07 17:49:16	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-07 17:49:19	FreeFull	What would be an example of an idiomatic Haskell codebase? Want to show some Haskell to someone who never saw any
2013-09-07 17:49:53	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-07 17:50:28	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-07 17:50:43	applicative	somehow i cant trust a function like prim_System_Win32_Com_Automation_TypeLib_requestTypeChange
2013-09-07 17:51:25	merijn	ParaSa1lin: You can make cabal install local copies of docs for all your packages
2013-09-07 17:51:35	merijn	FreeFull: xmonad?
2013-09-07 17:51:41	joelteon	have any of you guys used rex? it looks really neat, but operates on String
2013-09-07 17:51:42	merijn	FreeFull: Pandoc?
2013-09-07 17:51:52	applicative	heha: the line in question has a different number in http://hdiff.luite.com/cgit/com/tree/System/Win32/Com/Automation/TypeLib.hs
2013-09-07 17:51:53	ParaSa1lin	merijn, well i know that
2013-09-07 17:51:59	heha	or is there any alternative package for COM automation?
2013-09-07 17:52:22	applicative	FreeFull: Pandoc is actually a good example, or would if not so gigantic now
2013-09-07 17:52:35	FreeFull	merijn: I'm a bit worried that X11 is ugly and the ugliness is infectious
2013-09-07 17:52:35	-->	td123 (~thomas-dz@archlinux/developer/td123) has joined #haskell
2013-09-07 17:52:37	applicative	or maybe gigantic code base is what you want i guess
2013-09-07 17:52:45	FreeFull	applicative: Well, one file will do
2013-09-07 17:53:11	enthropy	 mapM_ g =<< replicateM n f   ===  replicateM_ n (g =<< f)  -- this is not required, but what can we say about the `a' in `f :: m a' if it does hold?
2013-09-07 17:53:49	FreeFull	Is Hackage down?
2013-09-07 17:53:53	joelteon	yep
2013-09-07 17:55:02	joelteon	Anybody know if there's a module like text-format for ByteStrings?
2013-09-07 17:55:05	ParaSa1lin	that should be a lambdabot feature, responding to "is hackage down"
2013-09-07 17:55:21	enthropy	@faq is close enough?
2013-09-07 17:55:22	lambdabot	The answer is: Yes! Haskell can do that.
2013-09-07 17:55:23	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-07 17:55:23	donri	joelteon: i'm not sure that makes sense
2013-09-07 17:55:30	joelteon	?
2013-09-07 17:55:43	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-07 17:55:44	<--	chuzz (~user@unaffiliated/chuzz) has quit (Quit: Leaving)
2013-09-07 17:55:44	joelteon	why not
2013-09-07 17:55:49	donri	joelteon: bytes don't have such structure
2013-09-07 17:55:50	heha	not sure, but my local version is 1.2.3.1
2013-09-07 17:55:55	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-07 17:56:39	applicative	FreeFull: maybe it's dumb but to keep with this idea https://github.com/jgm/pandoc-types/blob/master/Text/Pandoc/Definition.hs combined with say https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Readers/Markdown.hs and e.g. https://github.com/jgm/pandoc/blob/master/src/Text/Pandoc/Writers/Docx.hs
2013-09-07 17:57:05	joelteon	ok
2013-09-07 17:57:12	<--	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has quit (Quit: Page closed)
2013-09-07 17:57:23	-->	diadara (~diadara@49.202.208.97) has joined #haskell
2013-09-07 17:57:38	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-07 17:58:16	ski	enthropy : not sure why you expect to be able to say something about `a'
2013-09-07 17:58:52	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Ping timeout: 260 seconds)
2013-09-07 17:59:24	ParaSa1lin	hm hackage back up, or i have some pages cached
2013-09-07 17:59:45	merijn	No, looks like it's back up
2013-09-07 18:01:22	enthropy	ski: if it's like Int or Integer rather than an IORef
2013-09-07 18:01:27	<--	ktosiek (~ktosiek@46.22.173.54) has quit (Quit: No Ping reply in 210 seconds.)
2013-09-07 18:01:39	applicative	heha: what happens if you replace import Foreign.Ptr (Ptr, castPtr)
2013-09-07 18:01:43	applicative	heha: with import Foreign.Ptr (Ptr, castPtr)
2013-09-07 18:01:52	applicative	heha: with import Foreign.Ptr (Ptr(..), castPtr) rather
2013-09-07 18:01:58	applicative	in the offending module
2013-09-07 18:02:02	enthropy	things that can't be changed by some IO
2013-09-07 18:02:17	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-07 18:02:19	<--	artyomkazak (~artyomkaz@94.25.229.91) has quit (Ping timeout: 240 seconds)
2013-09-07 18:03:00	elliott	IORefs never change
2013-09-07 18:03:02	elliott	they always point to the same thing
2013-09-07 18:03:10	ski	enthropy : i think one sufficient condition is `forall y. liftM2 (,) f (g y) = (flip . liftM2 . flip) (,) f (g y)'
2013-09-07 18:03:11	elliott	consider this, you can also use an Int to identify a file handle which you track in a map in IO
2013-09-07 18:03:26	ParaSa1lin	hm, looks like hxt's parser's arrow instance is just defined in terms of monadic functions
2013-09-07 18:03:29	elliott	you never "change" the Int when you use it to cause effects; same for IORef
2013-09-07 18:03:49	merijn	Is the current lambdabot source on github?
2013-09-07 18:03:50	-->	gavri (~gavri@223.182.17.220) has joined #haskell
2013-09-07 18:04:00	merijn	Specifically I'm mostly interested in the quote file :p
2013-09-07 18:04:03	gavri	how do I share objects in haskell?
2013-09-07 18:04:03	deech	I'm converting C enums into Haskell datatypes. What's the best way of dealing with 2 enumerations that have the same numerical value?
2013-09-07 18:04:17	-->	madjestic (~madjestic@31.187.172.247) has joined #haskell
2013-09-07 18:04:19	ski	(yes, conceptually, `IORef's can be thought of as array/map indices/keys -- the actual state is carried around "inside" `IO')
2013-09-07 18:04:20	gavri	for example, if I have a constructor that takes in no arguments called Empty
2013-09-07 18:04:20	joelteon	> foldr f a [b,c,d]
2013-09-07 18:04:21	lambdabot	  f b (f c (f d a))
2013-09-07 18:04:25	merijn	gavri: What do you mean by 'share'? And what do you mean by 'objects'?
2013-09-07 18:04:27	<--	uvelichitel (~uvelichit@37.73.200.106) has quit (Ping timeout: 264 seconds)
2013-09-07 18:04:33	gavri	and would like to share just one Empty object
2013-09-07 18:04:33	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-07 18:04:35	joelteon	> foldr ($ a) [b,c,d]
2013-09-07 18:04:35	<--	tilde (~tilde@host201-191-dynamic.23-79-r.retail.telecomitalia.it) has quit (Ping timeout: 245 seconds)
2013-09-07 18:04:36	lambdabot	  No instance for (Data.Typeable.Internal.Typeable
2013-09-07 18:04:36	lambdabot	                    Debug....
2013-09-07 18:04:46	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-07 18:04:47	kuribas	Can I have more than one cathegory in cabal?
2013-09-07 18:04:50	elliott	ski: I think it's a common source of confusion to imagine Haskell as having certain kinds of special "mutable values"
2013-09-07 18:04:59	gavri	assuming a tree datastructure, with the usual meanings of Bin and Empty
2013-09-07 18:05:08	merijn	gavri: Constructors with no argument are by definition shared
2013-09-07 18:05:08	elliott	rather than an "external" mutable state that is never reflected in terms of actual Haskell values
2013-09-07 18:05:09	gavri	when I do a (Bin 5 Empty Empty)
2013-09-07 18:05:12	elliott	(inside of IO)
2013-09-07 18:05:14	gavri	oh ok, thanks
2013-09-07 18:05:20	gavri	what about constructors with parameters?
2013-09-07 18:05:21	ski	> map ($ a) [f,g,h]     :: [Expr]
2013-09-07 18:05:23	lambdabot	  [f a,g a,h a]
2013-09-07 18:05:31	ski	elliott : yes
2013-09-07 18:05:40	gavri	how do I share objects created through constructors with parameters?
2013-09-07 18:05:47	merijn	gavri: Those are only guaranteed to be shared if you do it explicitly
2013-09-07 18:05:47	joelteon	isn't there a function somewhere a -> [a -> a] -> a
2013-09-07 18:05:59	ski	elliott : i'm not really happy with people saying "this is pure and that is impure", either
2013-09-07 18:06:00	merijn	gavri: GHC *may* optimise to share, but that's not guaranteed
2013-09-07 18:06:00	kuribas	deech: fromEnum
2013-09-07 18:06:11	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 18:06:22	scshunt	joelteon: that seems to me to be an unlikely library function type
2013-09-07 18:06:27	merijn	gavri: You can guarantee it using something like "let t = Bin 5 Empty Empty in Bin 1 t t"
2013-09-07 18:06:27	gavri	how do I share them explicitly? if I invoke a function that returns these objects, the returned objects are not shared, right?
2013-09-07 18:06:41	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-09-07 18:06:44	joelteon	rats
2013-09-07 18:06:46	gavri	oh cool
2013-09-07 18:06:57	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 18:06:58	merijn	gavri: i.e. ghc guarantees that it will only ever compute named values once
2013-09-07 18:07:01	gavri	let and where clause defined functions are only invoked once?
2013-09-07 18:07:06	ski	elliott : even though `RealWorld -> (RealWorld,a)' has limitations, i think it's useful for realizing this ..
2013-09-07 18:07:18	merijn	gavri: If they evaluate to values, then yes
2013-09-07 18:07:21	gavri	how are named values different from function definitions?
2013-09-07 18:07:22	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-07 18:07:29	gavri	I guess these are dumb questions
2013-09-07 18:07:31	enthropy	deech: usually one of the labels is the prefered one, so  fromEnum 5 = TheNewerLabelThatIsEqualTo5ForC
2013-09-07 18:07:33	jmcarthur	gavri: where desugars to let, and let is how we explicitly define sharing
2013-09-07 18:07:35	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 18:07:36	gavri	is there a reference I could read?
2013-09-07 18:07:41	kuribas	joelteon: foldl (.) ?
2013-09-07 18:07:41	jmcarthur	gavri: functions are values
2013-09-07 18:07:42	elliott	ski: yes, I'm okay with referring to things in IO as impure/effectful/etc. as long as you also admit the same for State etc. and do it in a principled manner
2013-09-07 18:07:47	elliott	otherwise so much confusion abounds
2013-09-07 18:07:54	 *	ski nods
2013-09-07 18:07:57	scshunt	joelteon: if you added a Monoid constraint to a, then that would be fine... it's just foo a = mconcat . map ($ a)
2013-09-07 18:07:58	applicative	kuribas: yes:  Category: Control, Acme, Game
2013-09-07 18:08:02	ski	(though i prefer to say "effectful")
2013-09-07 18:08:03	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 18:08:03	<--	hilo (~aupiff@108-213-212-80.lightspeed.clmboh.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 18:08:07	gavri	if a let defined function takes in a parameter
2013-09-07 18:08:12	merijn	gavri: Well, I meant that if you have "let f = .. in Bin 1 (f 10) (f 10)" ghc doesn't guarantee "f 10" is only computed once
2013-09-07 18:08:15	deech	enthropy: Did you toEnum 5?
2013-09-07 18:08:18	kuribas	applicative: Ah, I see.
2013-09-07 18:08:20	enthropy	maybe
2013-09-07 18:08:22	elliott	ski: IO does break semantics though, so there's that :(
2013-09-07 18:08:22	gavri	oh yeah
2013-09-07 18:08:24	joelteon	> foldr (.) [a,b,c,d]
2013-09-07 18:08:25	lambdabot	  Couldn't match expected type `a0 -> b0'
2013-09-07 18:08:25	lambdabot	             with actual type `[Deb...
2013-09-07 18:08:26	gavri	it doesn't, right?
2013-09-07 18:08:30	merijn	gavri: GHC *may* optimise it to only evaluate functions once, but it's not guaranteed
2013-09-07 18:08:31	gavri	so how do I ensure that it does?
2013-09-07 18:08:31	ski	elliott : which semantics ?
2013-09-07 18:08:38	merijn	gavri: Actually, in some case it can figure that out
2013-09-07 18:08:40	gavri	it's one of the exercises in okasaki's book
2013-09-07 18:08:43	merijn	gavri: Just name the result
2013-09-07 18:08:45	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 245 seconds)
2013-09-07 18:08:46	jmcarthur	gavri: let x = f 10 in ...
2013-09-07 18:08:50	applicative	kuribas: oh here's a typical example https://github.com/Gabriel439/Haskell-Pipes-Concurrency-Library/blob/master/pipes-concurrency.cabal#L26
2013-09-07 18:08:57	merijn	gavri: "let x = f 10 in Bin 1 x x"
2013-09-07 18:08:57	-->	Gentlecat_ (~Roman@79.105.223.70) has joined #haskell
2013-09-07 18:09:05	kuribas	applicative: ok, thanks.
2013-09-07 18:09:11	deech	enthropy: Then I get overlapping enum warnings on the fromEnum side. Do you know how to turn off warnings locally?
2013-09-07 18:09:17	gavri	so there is a difference between functions that take no parameters from functions that take parameters when it comes to whether the return values are memoized or not?
2013-09-07 18:09:21	applicative	kuribas: he should add Game because of the tutorial, it occurs to me...
2013-09-07 18:09:33	jmcarthur	gavri: note that *sometimes* ghc will perform common subexpression elimination, but this is not to be depended on (and it's somewhat rare anyway)
2013-09-07 18:09:36	merijn	gavri: Think of names as pointers/references to values. When the runtime looks up the value and it's not computed, it will be. If the value is already computed it will just use it
2013-09-07 18:09:44	ski	gavri : there are no functions that take no parameters. every function takes exactly one parameter
2013-09-07 18:09:44	jmcarthur	gavri: it's not the same thing as memoization
2013-09-07 18:09:56	elliott	ski: e.g., can observe sharing, can distinguish _|_s
2013-09-07 18:09:58	enthropy	deech: you mean for the enum instance generated by c2hs?
2013-09-07 18:09:59	gavri	merijin, and that isn't guaranteed either?
2013-09-07 18:10:08	merijn	@google Conal Elliot Everything is a function
2013-09-07 18:10:10	lambdabot	http://conal.net/blog/posts/everything-is-a-function-in-haskell
2013-09-07 18:10:10	lambdabot	Title: Conal Elliott » “Everything is a function” in Haskell?
2013-09-07 18:10:15	deech	enthropy: yes, or even by hand.
2013-09-07 18:10:19	elliott	merijn: two ts! two ts!!!!
2013-09-07 18:10:31	jmcarthur	gavri: it's exactly as in any other language. if you define an intermediate value in a strict language, it's only evaluated once, not twice. however, if you do this in the body of a function and apply the function twice, the work in the body of the function can still happen twice
2013-09-07 18:10:31	merijn	elliott: It's not even your name!
2013-09-07 18:10:31	elliott	I should set up a script to correct people on conal's and my name.
2013-09-07 18:10:37	applicative	in the primitive lambda calculus everything really was a function
2013-09-07 18:10:48	enthropy	deech: well there's no point in having two clauses   toEnum 1 = .. ; toEnum 1 = ..
2013-09-07 18:10:59	elliott	merijn: but I want people to keep assuming I'm Conal.
2013-09-07 18:11:00	gavri	an intermediate value here == function with no arguments?
2013-09-07 18:11:00	ski	elliott : i think you can "explain away" that as due to indeterminacy (though this isn't then very accurate)
2013-09-07 18:11:01	kuribas	joelteon: flip (foldl (.) id)
2013-09-07 18:11:04	elliott	merijn: makes 'em listen
2013-09-07 18:11:11	deech	enthropy: You're right. Dumb question.
2013-09-07 18:11:11	hpc	elliott: it should have a very low probability of correcting in the opposite direction
2013-09-07 18:11:15	hpc	fur fun
2013-09-07 18:11:25	elliott	ski: right, probably IO works out if you just let its semantics be completely nondeterministic...
2013-09-07 18:11:27	hpc	*o
2013-09-07 18:11:39	<--	Gentlecat (~Roman@79.105.224.224) has quit (Ping timeout: 264 seconds)
2013-09-07 18:11:43	jmcarthur	gavri: in haskell, a value is either a function or it is not. all functions in haskell have one argument
2013-09-07 18:11:43	enthropy	elliott: that's a good argument for saying you can't say anything about the `a'
2013-09-07 18:11:48	applicative	elliott: you don't say 'denotational' and 'meaning' enough; you'll never pass the turing-conal test
2013-09-07 18:11:55	gavri	oh ok
2013-09-07 18:11:56	gavri	got it
2013-09-07 18:12:05	elliott	I talk about meaning a lot. I try to slip it in subtly when trying to get newbies to think about their types.
2013-09-07 18:12:11	-->	ddinh (~David@70.231.145.202) has joined #haskell
2013-09-07 18:12:19	elliott	the CPOs are hidden away behind the curtain.
2013-09-07 18:12:23	ski	enthropy : i still didn't get why you thought you could say something about `a'
2013-09-07 18:12:31	elliott	by the way, what is "a"?
2013-09-07 18:12:39	merijn	gavri: You should read that blog post, btw :)
2013-09-07 18:12:46	enthropy	elliott: the result of f
2013-09-07 18:12:54	jmcarthur	gavri: a "function with no arguments" might make sense when you are thinking in some sort of abstraction (the same one that allows us to talk about functions of more than one argument), but when talking about just haskell it is, in the most pedantic sense, nonsensical
2013-09-07 18:12:58	ski	elliott : "mapM_ g =<< replicateM n f   ===  replicateM_ n (g =<< f)  -- this is not required, but what can we say about the `a' in `f :: m a' if it does hold?"
2013-09-07 18:12:59	enthropy	 > mapM_ g =<< replicateM n f   ===  replicateM_ n (g =<< f) -- recall
2013-09-07 18:13:01	merijn	gavri: It should explain why there is no such thing as "function with no arguments" :)
2013-09-07 18:13:05	applicative	a :: *, probably; there's an assertion
2013-09-07 18:13:12	dmj`	I'm trying to add SSL to Scotty. Was wondering if someone could comment if I have the right approach?
2013-09-07 18:13:14	dmj`	https://github.com/xich/scotty/pull/43
2013-09-07 18:13:15	elliott	ah. my answer is nothing
2013-09-07 18:13:16	merijn	jmcarthur: It's usually quicker to just link to the Conal blogpost :)
2013-09-07 18:13:20	gavri	thanks, everybody
2013-09-07 18:13:22	elliott	my proof is parametricity
2013-09-07 18:13:27	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 264 seconds)
2013-09-07 18:13:28	ski	applicative : which is self-evident ;)
2013-09-07 18:13:32	<--	Argue (~Argue@112.209.122.237) has quit (Quit: Leaving)
2013-09-07 18:13:34	gavri	I'm reading the blog post
2013-09-07 18:13:43	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 264 seconds)
2013-09-07 18:13:52	applicative	ski: like all the best assertions, upon proper reflection
2013-09-07 18:13:56	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-07 18:13:58	ski	<ski> enthropy : i think one sufficient condition is `forall y. liftM2 (,) f (g y) = (flip . liftM2 . flip) (,) f (g y)'
2013-09-07 18:14:08	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-07 18:14:24	-->	tncardoso (~thiago@177.97.212.46) has joined #haskell
2013-09-07 18:14:31	enthropy	yep, if you can change the order of effects you can go from   f f f f f f g g g g g g   to  f g f g f g
2013-09-07 18:14:40	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-07 18:14:47	ski	yes
2013-09-07 18:14:52	enthropy	*and have the same result
2013-09-07 18:14:58	ski	so if you know `f' and `g y' commute, you're safe
2013-09-07 18:15:34	applicative	enthropy: is this like the constrain on 'MonadZip'?
2013-09-07 18:15:50	<--	zbcm (~zbcm@CPE-60-231-179-161.lns4.dav.bigpond.net.au) has quit (Ping timeout: 245 seconds)
2013-09-07 18:16:12	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-09-07 18:16:15	-->	Zamarok_ (~Zamarok@129-2-129-154.wireless.umd.edu) has joined #haskell
2013-09-07 18:16:43	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-09-07 18:16:49	heha	applicative, try that, but still the same error when build
2013-09-07 18:17:02	--	u__ is now known as u_
2013-09-07 18:17:21	applicative	grrrr, heha
2013-09-07 18:17:26	applicative	enthropy: https://github.com/ghc/packages-base/blob/master/Control/Monad/Zip.hs#L29
2013-09-07 18:17:38	ersran9	Is there a good resource for understanding how functions actually behave as functors and applicatives?
2013-09-07 18:17:54	dmj`	@lyah
2013-09-07 18:17:54	lambdabot	Unknown command, try @list
2013-09-07 18:17:57	-->	normanrichards (~normanric@mobile-166-147-065-244.mycingular.net) has joined #haskell
2013-09-07 18:18:04	dmj`	@where lyah
2013-09-07 18:18:04	lambdabot	http://www.learnyouahaskell.com/
2013-09-07 18:18:37	applicative	ersran9: 'actually behave'?  you mean, how do you use fmap and <*> and so on?
2013-09-07 18:18:50	<--	chexxor_netbook (~chexxor@114-43-140-26.dynamic.hinet.net) has quit (Ping timeout: 268 seconds)
2013-09-07 18:18:51	ersran9	dmj`: yes, I've read that. I have an intuition of how they work with types like Maybe, lists etc. I just can't actually extend that intuition to (-> r)
2013-09-07 18:19:01	ersran9	applicative: like, how do I think about it
2013-09-07 18:19:22	merijn	ersran9: I think the best way would be to first try to implement fmap and then look at the real source
2013-09-07 18:19:23	hpc	ersran9: if it helps, (r ->) is the same as Reader r
2013-09-07 18:19:39	applicative	ersran9: the Functor idea is so abstract that you wont be able to form an image, except about the symbols or graphs or other representations
2013-09-07 18:19:56	merijn	ersran9: The Functor instance for "(->) r" is not very hard to implement, so trying to write it is good exercise
2013-09-07 18:20:16	applicative	data Blank a = Blank; instance Functor Blank where fmap f Blank = Blank
2013-09-07 18:20:20	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 18:20:23	ersran9	merijn: hmm. okay I think I'll try that out
2013-09-07 18:20:28	dmj`	ersran9: In haskell you are mapping algebraic structure onto computation.
2013-09-07 18:20:29	elliott	applicative: I think the key is that functor eventually becomes a kind of foundation that you can form images on top of.
2013-09-07 18:20:39	<--	exicer (~exicer@host86-144-167-201.range86-144.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-07 18:20:43	applicative	data Vanilla a = Vanilla a ; instance Functor Vanilla where fmap f (Vanilla a) = Vanilla (f a_
2013-09-07 18:20:46	applicative	data Vanilla a = Vanilla a ; instance Functor Vanilla where fmap f (Vanilla a) = Vanilla (f a)
2013-09-07 18:20:52	elliott	where before you might have been able to imagine things in terms of physical objects like containers, or things you know operationally like side-effects, or such, you can start thinking about functors instead.
2013-09-07 18:20:55	applicative	elliott: yes
2013-09-07 18:20:56	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-07 18:20:59	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 18:21:04	elliott	at least I would like to believe I have developed this kind of intuition
2013-09-07 18:21:16	applicative	try to get an intuition for what is meant by 'is'
2013-09-07 18:21:17	ersran9	elliott: exactly! I think I have that container model in my head.
2013-09-07 18:21:34	elliott	ersran9: right. it's probably time to grow out of it :)
2013-09-07 18:22:02	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Read error: Connection reset by peer)
2013-09-07 18:22:05	applicative	it works really well for all the examples except the most crucial ones
2013-09-07 18:22:10	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-07 18:22:17	ersran9	elliott: yes, exactly my question. What would be the way to move forward to develop a more generic intuition?
2013-09-07 18:22:22	<--	diadara (~diadara@49.202.208.97) has quit (Read error: Connection reset by peer)
2013-09-07 18:22:23	gavri	so I have another related question, if I I have a let definition say "let x = f 5", this object pointed to by x is a single object that is shared in a single invocation of this function or is it shared across invocations?
2013-09-07 18:22:28	<--	normanrichards (~normanric@mobile-166-147-065-244.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-07 18:22:28	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Quit: leaving)
2013-09-07 18:22:56	gavri	in invocations of the function inside which this let is used, I mean. not talking about the function "f"
2013-09-07 18:23:26	dmj`	ersran9: Have you tried the typeclassopedia?
2013-09-07 18:23:28	applicative	> let f = (+1) in let x = f 5 in x + x + x
2013-09-07 18:23:29	lambdabot	  18
2013-09-07 18:23:30	elliott	ersran9: I don't know. try thinking of types and whether they can be Functors, trying to write the instances for them. try seeing what you can do with the interface and what it means in terms of various instances.
2013-09-07 18:23:34	elliott	and yes, read the Typeclassopedia.
2013-09-07 18:23:39	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-07 18:23:47	elliott	if you bang your head against the idea enough it'll click.
2013-09-07 18:23:51	ersran9	dmj`: not yet, probably its time for me to attempt to read it
2013-09-07 18:23:55	applicative	^^^ gavri for sure it doesn't recalculate x 3 times for x + x + x
2013-09-07 18:24:04	merijn	argh
2013-09-07 18:24:06	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-09-07 18:24:16	enthropy	applicative: seems quite similar
2013-09-07 18:24:20	merijn	Nothing as annoying as not being able to load modules in ghci to figure out what's going wrong with your types :(
2013-09-07 18:24:23	 *	merijn kicks pandoc
2013-09-07 18:24:24	<--	crvs (~crvs@bl10-211-135.dsl.telepac.pt) has quit (Remote host closed the connection)
2013-09-07 18:24:35	ersran9	elliott: aha, nice. Looks like I got a whole night of banging head in front of me. Thanks guys!
2013-09-07 18:25:00	<--	f8l (~f8l@83.238.59.68) has quit (Read error: Operation timed out)
2013-09-07 18:25:22	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-07 18:26:01	applicative	merijn: cabal repl inside pandoc?
2013-09-07 18:26:02	gavri	I mean for a function definition like this: squareAndTriple n = let x = (n * n) in (3 * x)
2013-09-07 18:26:24	<--	madjestic (~madjestic@31.187.172.247) has quit (Ping timeout: 240 seconds)
2013-09-07 18:26:42	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-07 18:26:47	gavri	if I call squareAndTriple(5) once, (5 * 5) is only executed once
2013-09-07 18:26:57	gavri	but if I call it twice, it's executed twice, right?
2013-09-07 18:27:00	enthropy	gavri: Debug.Trace.trace can help with seeing when things are evaluated
2013-09-07 18:27:13	danr	Any good name suggestions for a TH library that generates fmap, foldMap and traverse for arbitrary-aritied functors? (http://lpaste.net/92697)
2013-09-07 18:27:23	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-07 18:27:32	applicative	merijn: if i remember it was the gruesome use of Paths_Pandoc that made it such  a trial; but cabal repl is supposed to handle this
2013-09-07 18:27:38	gavri	enthropy: that would show me ghc's behaviour right, including optimizations?
2013-09-07 18:27:46	gavri	I'd like to know haskell's rules
2013-09-07 18:27:59	dmj`	gavri: squareAndTriple = (*3) . (^2)
2013-09-07 18:28:07	elliott	haskell has no rules here
2013-09-07 18:28:09	enthropy	or effects of things like -XNoMonomorphismRestriction, or having type variables left over in a type signature
2013-09-07 18:28:12	monochrom	haskell's rules say nothing about this
2013-09-07 18:28:12	elliott	implementations can evaluate however they want to
2013-09-07 18:28:32	monochrom	haskell's rules say only what answer you get, not how many steps or what steps.
2013-09-07 18:28:39	applicative	there are no rules in Haskell, only {#-RULES-#}
2013-09-07 18:28:59	gavri	ok, thanks again, everybody
2013-09-07 18:29:10	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-07 18:29:14	-->	k0001 (~k0001@host97.190-138-114.telecom.net.ar) has joined #haskell
2013-09-07 18:29:37	merijn	eeeeewww
2013-09-07 18:29:49	merijn	pandoc uses DatatypeContexts....
2013-09-07 18:30:32	-->	exicer (~exicer@86.161.139.220) has joined #haskell
2013-09-07 18:30:35	-->	dreixel (~dreixel@host86-157-151-83.range86-157.btcentralplus.com) has joined #haskell
2013-09-07 18:30:38	merijn	applicative: What is "cabal repl"?
2013-09-07 18:30:53	applicative	its in cabal-1.18  merijn
2013-09-07 18:30:54	-->	zcourts (~zcourts@176.248.12.165) has joined #haskell
2013-09-07 18:31:04	applicative	i can't say i understand all the ins and outs of it
2013-09-07 18:31:08	merijn	Guess I first have to upgrade cabal then...
2013-09-07 18:31:15	hpaste	thr33strikes pasted “how would I run this as a script instead of ghci?” at http://lpaste.net/92699
2013-09-07 18:31:23	merijn	I forgot, do I need to unregister the old cabal-install before updating?
2013-09-07 18:31:32	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-07 18:31:54	thr33strikes	i tried main = do
2013-09-07 18:31:56	enthropy	elliott, ski: still going back to my original question, other languages have the concept of a "value type" or a "reference type". This is not a useful way to talk/think about the properties of the f and g you expect to come across?
2013-09-07 18:31:59	applicative	merijn: you might rename it for the moment if its in ~/.cabal/bin, since it will be overwritten by itself
2013-09-07 18:32:16	elliott	enthropy: yes, in haskell all types contain unchanging values
2013-09-07 18:32:21	elliott	possibly implemented with references, but this matters only for performance
2013-09-07 18:32:54	elliott	we have things that create the illusion of mutability -- State, where the catch is that we *vary* the values we are looking at -- and things that allow access to external mutability -- like IO
2013-09-07 18:32:59	elliott	but the values themselves never change.
2013-09-07 18:33:15	elliott	IO is best thought of a communication with, say, a C program that has a mutable store and file IO capabilities.
2013-09-07 18:33:25	-->	Kuraitou (~kuraitou@unaffiliated/kuraitou) has joined #haskell
2013-09-07 18:33:29	elliott	also known as the runtime system :)
2013-09-07 18:33:51	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-09-07 18:34:43	-->	uvelichitel (~uvelichit@37.73.252.136) has joined #haskell
2013-09-07 18:34:44	applicative	thinking of IO that way, is surely basically a mental illness; but never mind....
2013-09-07 18:35:12	enthropy	one example I recently struggled with http://lpaste.net/92671
2013-09-07 18:35:14	gavri	is it correct to say that if I create an object out of a constructor that takes in no arguments multiple times, multiple objects may or may not be created, but if I have a top level definition say "let empty = Empty" and use "empty" in all of my function definitions, then compiler/runtime is forced to use the same object?
2013-09-07 18:35:28	merijn	applicative: "cabal repl" seems intended to work with sandboxes, which is not what I have
2013-09-07 18:35:32	dmj`	ersran9: Think of Maybe and List as computational contexts. Maybe is a context for computations that can fail (or return  single value), list is one for non-determinism (computations that can have multiple results). When you use a functor you are modifying the values inside of this context in such a way that the functor laws for composition and identity are upheld. The container analogy breaks down when you begin using fmap on
2013-09-07 18:35:32	dmj`	non-container like things, like functions. Look at the State monad instance for functor and you'll see.
2013-09-07 18:35:55	merijn	gavri: "let" is an error at the top level, but yes, if you use "empty = Empty" at the top level, it's guaranteed to be just one value
2013-09-07 18:36:14	merijn	gavri: Although in the case of constructors with no arguments, that already happens automatically
2013-09-07 18:36:27	applicative	merijn: yes, but thats because you havent been using cabal-1.18?
2013-09-07 18:36:50	-->	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has joined #haskell
2013-09-07 18:36:51	gavri	yeah, but the top level definition is haskell being haskell and the empty constructor being a single object is ghc optimizing?
2013-09-07 18:36:56	gavri	or have I got that wrong?
2013-09-07 18:37:06	applicative	merijn: just a sec, i dont have it on this machine , or not quite
2013-09-07 18:37:28	merijn	applicative: I'm installing it now, but my problem is that I can't load the code due to some modules not being found
2013-09-07 18:37:44	applicative	merijn: which ones?
2013-09-07 18:37:45	merijn	applicative: I don't see how sandboxes (or tools for working with sandboxes) help with that?
2013-09-07 18:37:50	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-07 18:37:52	applicative	what are missing?
2013-09-07 18:38:15	merijn	applicative: The Paths one (which I fixed by adding dist/build/autogen to my search path) currently it's giving syntax errors on CPP macros :\
2013-09-07 18:38:33	<--	tabemann (~travisb@76.199.154.165) has quit (Ping timeout: 268 seconds)
2013-09-07 18:38:36	ersran9	dmj`: hmm. okay I'm gonna try and forget boxes and keep that in mind. I guess it takes time :(
2013-09-07 18:38:39	merijn	Right now I just manually nuked all the compatibility macros to get it to load
2013-09-07 18:39:25	merijn	Which is slightly undesirable
2013-09-07 18:39:57	enthropy	there is a way to get those to run with ghci
2013-09-07 18:40:08	merijn	elliott: You're maintaing lambdabot atm, right? Is there a reasonably up to date dump of her quotes file somewhere?
2013-09-07 18:40:15	enthropy	you have to make it look at something else inside dist/build/autogen
2013-09-07 18:40:36	merijn	enthropy: You're referring to the Paths bit?
2013-09-07 18:40:47	elliott	merijn: there isn't. I could look into providing one
2013-09-07 18:40:47	merijn	enthropy: I just mentioned I already fixed that :>
2013-09-07 18:40:55	enthropy	no the cabal_macros.h
2013-09-07 18:41:06	elliott	merijn: you can grep the tunes.org logs for @remember and ?remember of course
2013-09-07 18:41:20	merijn	elliott: The quote I'm looking for is ancient, I think
2013-09-07 18:41:24	-->	m_ke (~m_ke@cpe-108-182-20-11.nyc.res.rr.com) has joined #haskell
2013-09-07 18:41:37	<--	m_ke (~m_ke@cpe-108-182-20-11.nyc.res.rr.com) has quit (Client Quit)
2013-09-07 18:41:38	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-07 18:41:46	-->	discoloda (6bd31e6e@gateway/web/freenode/ip.107.211.30.110) has joined #haskell
2013-09-07 18:42:13	thr33strikes	I'm reading Leaernyouahaskell but most of the examples are written for ghci.  I'm having a hard time using the correct syntax in an actual script.  Can someone help me fill in the blanks?  Is there another tutorial that explains this using examples written as scripts?
2013-09-07 18:42:33	dmj`	ersran9: it does, and the plot only thickens as you go. Write a bunch of code. Do the typeclassopedia. My 2 cents.
2013-09-07 18:42:39	ski	merijn : what was the quote about ?
2013-09-07 18:42:40	<--	oleo (~oleo@xdsl-78-35-145-193.netcologne.de) has quit (Read error: Operation timed out)
2013-09-07 18:42:57	elliott	thr33strikes: my personal recommendation is to embrace ghci for a while
2013-09-07 18:43:03	merijn	thr33strikes: There's not really a notion of a "script" a haskell file is set of top level definitions and a "main :: IO ()" definition
2013-09-07 18:43:12	dmj`	thr33strikes: what text editor are you accustomed to?
2013-09-07 18:43:23	thr33strikes	vi
2013-09-07 18:43:26	merijn	thr33strikes: I'm guessing your main issue is that editing in ghci sucks?
2013-09-07 18:43:27	-->	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has joined #haskell
2013-09-07 18:44:01	merijn	thr33strikes: You can load files into ghci using ":l filename.hs", it will load all definitions in that file into ghci and ":r" will reload any changed files from within ghci
2013-09-07 18:44:14	dmj`	can vim do send-to-repl (C-c C-l) like emacs?
2013-09-07 18:44:24	merijn	ski: getting stuff out of IO
2013-09-07 18:44:40	thr33strikes	I'll resend an example I posted a little earlier
2013-09-07 18:44:45	merijn	dmj`: Yes, but I never bothered with it, I tend to use tmux, vim in one half, ghci in the other and then just run ":r"
2013-09-07 18:44:48	ski	@quote /bin/ls
2013-09-07 18:44:48	lambdabot	shachaf says: getLine :: IO String contains a String in the same way that /bin/ls contains a list of files
2013-09-07 18:44:57	ski	merijn : some other one ?
2013-09-07 18:44:57	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 276 seconds)
2013-09-07 18:44:59	merijn	ski: Not the one, I know that one by heart
2013-09-07 18:45:04	hpaste	thr33strikes revised “how would I run this as a script instead of ghci?”: “resubmit” at http://lpaste.net/92699
2013-09-07 18:45:13	ski	merijn : any words you recall ?
2013-09-07 18:45:14	applicative	merijn: yes, pandoc is killing my cabal repl inobscure ways; everything else works.
2013-09-07 18:45:19	enthropy	merijn: about the preprocessor macros http://stackoverflow.com/questions/12546757/how-do-i-use-cabals-min-version-and-other-macros-with-ghci
2013-09-07 18:45:26	-->	dacav (~dacav@c-4f66b0f3-74736162.cust.telenor.se) has joined #haskell
2013-09-07 18:45:32	ersran9	dmj`: I'm going to do that. Thank you for your help!
2013-09-07 18:45:35	merijn	ski: Some, but the problem is that IO has way to many hits in terms of words like "version"
2013-09-07 18:45:39	enthropy	merijn: arguably this could all be set in a .ghci file inside the pandoc repo
2013-09-07 18:45:52	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 18:45:55	ski	"version" ?
2013-09-07 18:45:58	merijn	thr33strikes: What you you mean by "run that as a script"?
2013-09-07 18:46:01	dmj`	ersran9: no problem, look forward to seeing your progress
2013-09-07 18:46:14	merijn	ski: the io in version matches if you just search for IO in lambdabot >.>
2013-09-07 18:46:15	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-07 18:46:19	merijn	@quote IO
2013-09-07 18:46:19	lambdabot	Cale says: One can create powerful abstractions in C++ in much the same way that a woman can produce a child. It's possible, and people do it, but it takes hours of labour and is extremely painful.
2013-09-07 18:46:23	thr33strikes	I mean compile it and run it using the ./filename command
2013-09-07 18:46:43	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 18:46:46	kuribas	hackage says that I shouldn't use unallocated top level name.  I use Math.Bernstein for bernstein polynomials, Geom2D for geometry functions, and Geom2D.CubicBezier for cubic beziers.  Is that ok?
2013-09-07 18:46:48	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 18:47:03	dmj`	merijn: lol
2013-09-07 18:47:07	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-07 18:47:13	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-07 18:47:15	kuribas	I could prepend Data...
2013-09-07 18:47:17	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 18:47:37	supki	@quote \bIO\b
2013-09-07 18:47:38	lambdabot	monopoly says: do not exist IO. go directly to the REPL, do not pass any parameters or continuations
2013-09-07 18:47:39	dmj`	thr33strikes: you can sort of run your .hs file as script if you add #!/usr/bin/runghc at the top
2013-09-07 18:47:43	merijn	thr33strikes: I annotated a minimal working sample: http://lpaste.net/92699
2013-09-07 18:47:59	merijn	thr33strikes: You can do "ghc filename.hs" to compile that and run the result
2013-09-07 18:48:14	 *	merijn thwaps dmj` with a newspaper
2013-09-07 18:48:30	dmj`	:)
2013-09-07 18:48:40	merijn	thr33strikes: And what dmj` meant to say was "you can add #!/usr/bin/env runhaskell at the top of your file"
2013-09-07 18:48:53	dmj`	yea that =P
2013-09-07 18:48:55	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-07 18:48:56	applicative	threedaymonk: that will be much faster if you compile with ghc -O2 ;)
2013-09-07 18:49:03	merijn	dmj`: Using any shebang that doesn't use /usr/bin/env is ground for justified lynching
2013-09-07 18:49:16	NemesisD	i think i'm going to need to build an old version of cabal during this transition period
2013-09-07 18:49:20	gavri	haskell made the first part of the sharing subtrees exercise much easier than I expected it would be https://raw.github.com/gavri/okasaki-exercises-solutions/master/e2.5-sharing-subtrees.hs I hope I haven't missed anything
2013-09-07 18:49:22	applicative	oopp thr33strikes /= threedaymonk
2013-09-07 18:49:45	merijn	thr33strikes: Basically, my version uses "readLn" to read an Int from stdin and then uses "putStrLn" to print the result to stdout
2013-09-07 18:51:03	thr33strikes	how does ghci actually help you write a working program if the syntax is different when you got to put it in a file?
2013-09-07 18:51:07	merijn	1.18 gives me "cabal repl: unknown command"
2013-09-07 18:51:11	dmj`	merijn: duly noted
2013-09-07 18:51:31	merijn	thr33strikes: How is the syntax different?
2013-09-07 18:51:31	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 18:51:32	jmcarthur	gavri: there "where empty = Empty" part is unnecessary
2013-09-07 18:51:34	gavri	I guess laziness helped me there, right? it wouldn't have been as easy if haskell was strict
2013-09-07 18:51:42	jmcarthur	gavri: Empty is just a constant anyway
2013-09-07 18:51:50	gavri	oh ok
2013-09-07 18:51:54	gavri	I finally understood that
2013-09-07 18:51:56	jmcarthur	gavri: i don't think laziness has anything to do with it in this case
2013-09-07 18:52:07	thr33strikes	there's a term I can't remember right now
2013-09-07 18:52:11	gavri	constructors are functions, except the constructor that takes in no arguments
2013-09-07 18:52:12	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-07 18:52:16	thr33strikes	code that doesn't interact with the real world
2013-09-07 18:52:20	jmcarthur	gavri: well, actually, it kind of does if you want to be pedantic maybe...
2013-09-07 18:52:40	gavri	didn't laziness help? that function goes top down and an object was shared at each level
2013-09-07 18:52:42	jmcarthur	gavri: the difference between lazy evaluation and call-by-name is that laziness adds sharing
2013-09-07 18:52:50	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-07 18:52:53	dmj`	thr33strikes: It lets you test your functions on the fly, ensure stuff compiles. No different that irb and python repl in concept
2013-09-07 18:52:54	gavri	I'd have to go bottom up in a strict language
2013-09-07 18:52:58	jmcarthur	gavri: but laziness adds no sharing over normal strict evaluation, normally
2013-09-07 18:53:01	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-07 18:53:32	thr33strikes	dmj: but once you hit enter it's gone correct?
2013-09-07 18:53:34	gavri	in this case it made the function definition simpler, right?
2013-09-07 18:53:40	applicative	merijn: unfortunately, as far as I can tell I do need a sandbox ; then cabal repl works fine
2013-09-07 18:53:50	jmcarthur	gavri: right. in a strict language you would just define a value  child = complete x (d - 1)  and then make your result   Bin x child child
2013-09-07 18:53:54	__S__J__	whats up with the (->) syntax? can you show me a aworking example?
2013-09-07 18:54:00	applicative	merijn: how to manage things so that half of hackage isn't built inside the directory, I dont know
2013-09-07 18:54:03	supki	merijn: if you have dist directory you need to rerun cabal configure before cabal repl
2013-09-07 18:54:16	jmcarthur	gavri: it would have to evaluate the subtree before being able to return, so laziness allows you to avoid that potentially, but that's not really related to sharing
2013-09-07 18:54:43	gavri	ok, I think I get it
2013-09-07 18:54:48	-->	briennetheblue (1f3407b4@gateway/web/freenode/ip.31.52.7.180) has joined #haskell
2013-09-07 18:54:59	__S__J__	nm
2013-09-07 18:55:00	jmcarthur	gavri: however, laziness *can* make it possible to share some recursive definitions where strict evaluation without special support for this would require you to evaluate more at each recursive step
2013-09-07 18:55:15	applicative	merijn: i can even ask it to execute Paths_pandoc.getBinDir
2013-09-07 18:55:16	jmcarthur	gavri: but that's a tricky thing that i don't think you should quite explore yet
2013-09-07 18:55:16	__S__J__	can someone look at my pipes problem above?
2013-09-07 18:55:22	gavri	it didn't help in this case though, right?
2013-09-07 18:55:27	jmcarthur	gavri: right
2013-09-07 18:55:27	dmj`	thr33strikes: It's gone when you close the repl. When you hit enter its stored in memory and can be retrieved and used.
2013-09-07 18:55:28	gavri	I don't know why I thought laziness helped
2013-09-07 18:55:41	__S__J__	http://lpaste.net/92700 <- pipes problem
2013-09-07 18:55:52	merijn	applicative: This seems to help: http://stackoverflow.com/questions/12546757/how-do-i-use-cabals-min-version-and-other-macros-with-ghci
2013-09-07 18:55:53	jmcarthur	gavri: you just aren't used to thinking about laziness yet. this is normal
2013-09-07 18:55:59	gavri	also am I right in saying that constructors that take in arguments are functions and those that don't are not?
2013-09-07 18:56:07	-->	zhak7 (~zhak7@cac94-6-82-232-187-33.fbx.proxad.net) has joined #haskell
2013-09-07 18:56:12	merijn	gavri: Yes
2013-09-07 18:56:13	jmcarthur	yes
2013-09-07 18:56:14	merijn	:t Nothing
2013-09-07 18:56:15	lambdabot	Maybe a
2013-09-07 18:56:17	merijn	:t Just
2013-09-07 18:56:17	lambdabot	a -> Maybe a
2013-09-07 18:56:25	ski	merijn : .. oh
2013-09-07 18:56:52	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 18:56:53	<--	scripty (~scripty@117.192.170.227) has quit (Ping timeout: 264 seconds)
2013-09-07 18:56:59	thr33strikes	merijn: the example you sent me shows pure code in the first few lines and then code that interacts with the realworld in the next?
2013-09-07 18:57:00	gavri	that should have come up somewhere. I've read a couple of introductory haskell books :D
2013-09-07 18:57:06	gavri	I guess it's deducible
2013-09-07 18:57:09	<--	anRch (~markmilli@23.30.182.241) has quit (Quit: anRch)
2013-09-07 18:57:11	gavri	but I never made the connections
2013-09-07 18:57:27	jmcarthur	i agree that this should be made more clear in beginner material
2013-09-07 18:57:37	jmcarthur	especially since in some languages this is not true
2013-09-07 18:57:38	<--	yacks (~py@103.6.159.103) has quit (Ping timeout: 246 seconds)
2013-09-07 18:58:01	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-07 18:58:07	zhak7	Hi all
2013-09-07 18:58:41	jmcarthur	every time somebody says that i secretly wish that all 1149 people in here would say hello
2013-09-07 18:58:49	zhak7	lol
2013-09-07 18:58:51	monochrom	hello
2013-09-07 18:59:03	monochrom	hello
2013-09-07 18:59:13	zhak7	I'm new to Haskell
2013-09-07 18:59:17	monochrom	(I'm trying to make up for the other thousand people!)
2013-09-07 18:59:19	enthropy	jmcarthur: better yet, start greeting each of the other 1149
2013-09-07 18:59:26	enthropy	-1
2013-09-07 18:59:37	jmcarthur	> product [1..1149]
2013-09-07 18:59:37	lambdabot	  170857757720368524417015333097405790116210616836486436151687652960380992731...
2013-09-07 18:59:38	merijn	thr33strikes: Yes, basically haskell code has a "main" action of type "IO ()" that is run when your program is run. It is very similar to the "main" function in C/C++/whatever
2013-09-07 18:59:48	jmcarthur	err
2013-09-07 18:59:50	jmcarthur	no
2013-09-07 19:00:02	enthropy	> 1149 * 1148
2013-09-07 19:00:03	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 19:00:04	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 19:00:05	lambdabot	  1319052
2013-09-07 19:00:11	jmcarthur	yeah
2013-09-07 19:00:15	monochrom	it is, indeed, why some IRC netiquette says: "don't say hello that easily when someone joins".
2013-09-07 19:00:28	jmcarthur	assuming both say hello to each other
2013-09-07 19:00:46	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-07 19:01:17	monochrom	at first the advice looks rude. but imagine even just 50 people saying hello just because someone joins. it's going to be epic
2013-09-07 19:01:22	<--	uvelichitel (~uvelichit@37.73.252.136) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-07 19:01:27	zhak7	Nobody forces everyone to say hello, I'm just polite ;)
2013-09-07 19:01:30	jmcarthur	very welcoming though!
2013-09-07 19:01:49	-->	uvelichitel (~uvelichit@37.73.252.136) has joined #haskell
2013-09-07 19:02:03	ski	enthropy : consider `type M a = State (Int,Int) a; type RefInt = Bool; readRef :: RefInt -> M Int; readRef False = gets fst; readRef True = gets snd; writeRef :: RefInt -> Int -> M (); writeRef False m = modify enthropy : consider `type M a = State (Int,Int) a; type RefInt = Bool; readRef :: RefInt -> M Int; readRef False = gets fst; readRef True = gets snd; writeRef :: RefInt -> Int -> M (); writeRef False m = modify (first (const m)); writeRef 
2013-09-07 19:02:09	monochrom	oh, the joiner himself/herself saying hello is totally cool, no problem there :)
2013-09-07 19:02:27	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-07 19:02:27	zhak7	hah :D
2013-09-07 19:02:28	ski	hm, suspected cut off ".. writeRef False m = modify (first (const m)); writeRef True n = modify (second (const n)); evalM :: Int -> Int -> M a -> a; evalM m n ma = evalState ma (m,n)'"
2013-09-07 19:03:11	<--	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has quit (Remote host closed the connection)
2013-09-07 19:04:03	-->	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has joined #haskell
2013-09-07 19:04:03	enthropy	that's a lot to consider
2013-09-07 19:04:04	__S__J__	http://lpaste.net/92700 <- pipes problem, can someone explain how to fix the type problem?
2013-09-07 19:04:16	ski	enthropy : now, a `RefInt' here *behaves* like if it was an `IORef Int', i.e. like a "reference type" -- but in actuality it's just a (boolean) index into a collection (a pair, here) -- the `RefInt' itself doesn't contain the data stored "behind" it, that data is secretly passed along inside the `M' monad
2013-09-07 19:05:25	 *	hackagebot threepenny-gui 0.3.0.0 - GUI framework that uses the web browser as a display.  http://hackage.haskell.org/package/threepenny-gui-0.3.0.0 (HeinrichApfelmus)
2013-09-07 19:05:26	copumpkin	ski: that much code seems more suited to a paste :P
2013-09-07 19:05:27	 *	hackagebot cubicbezier 0.1.0 - Efficient manipulating of 2D cubic bezier curves.  http://hackage.haskell.org/package/cubicbezier-0.1.0 (KristofBastiaensen)
2013-09-07 19:05:36	copumpkin	ski: just for pedagogical reasons :)
2013-09-07 19:05:40	ski	enthropy : the main difference with `IORef' is that (a) here you can't allocate new references dynamically (so there's only two of them, even); and (b) here you can actually "go back in time" and try another state-update, since there is an `evalM' function (unlike for `IO')
2013-09-07 19:05:45	applicative	__S__J__: this is complicated; for starters you might install the new pipes-platform which will be hackaged today or tomorrow.
2013-09-07 19:05:45	copumpkin	oh, it's duplicated
2013-09-07 19:06:07	ski	copumpkin : yeah, i didn't realize it was so long
2013-09-07 19:06:12	-->	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has joined #haskell
2013-09-07 19:06:14	elliott	ski: it isn't
2013-09-07 19:06:14	ski	.. oh, so it is
2013-09-07 19:06:16	elliott	you just repeated your message
2013-09-07 19:06:26	-->	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has joined #haskell
2013-09-07 19:06:37	 *	ski hangs head in shame
2013-09-07 19:06:43	copumpkin	:)
2013-09-07 19:07:10	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-07 19:07:19	applicative	__S__J__: https://github.com/Gabriel439/pipes-platform you will also need https://github.com/k0001/network-simple
2013-09-07 19:07:49	monochrom	new catchy thing to say: an IORef Int contains an Int in the same sense as an IO Int contains an Int
2013-09-07 19:07:55	<--	gavri (~gavri@223.182.17.220) has quit (Ping timeout: 245 seconds)
2013-09-07 19:08:02	jmcarthur	uh
2013-09-07 19:08:10	elliott	monochrom: but how do you get the IORef out?
2013-09-07 19:08:20	<--	__S__J__ (S_J@m83-180-189-246.cust.tele2.se) has quit (Ping timeout: 245 seconds)
2013-09-07 19:08:28	monochrom	that's the realm of ConstraintKinds!
2013-09-07 19:08:40	ski	why ?
2013-09-07 19:08:49	monochrom	err, no, oops
2013-09-07 19:08:56	enthropy	IORef just has kind * -> *
2013-09-07 19:08:58	jmcarthur	that statement can be taken a couple different ways
2013-09-07 19:09:03	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-07 19:09:05	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-07 19:09:20	edwardk	elliott: by forking repeatedly and scribbling to all the addresses in the heap in separate copies of the process one at a time until the answer changes
2013-09-07 19:09:54	jmcarthur	since in the operational sense, it *does* contain an Int, although perhaps denotationally it does not. i guess the denotation of a reference requires some environment.
2013-09-07 19:10:05	-->	elediaz (~quassel@90.173.195.55) has joined #haskell
2013-09-07 19:10:12	elliott	I don't think IORef Int operationally contains an Int
2013-09-07 19:10:14	elliott	it contains an address
2013-09-07 19:10:19	elliott	well.
2013-09-07 19:10:26	elliott	okay, so does Int
2013-09-07 19:10:35	elliott	or whatever. "contains" is an operationally weird phrase.
2013-09-07 19:10:37	monochrom	it was a joke. please don't take it seriously. :)
2013-09-07 19:10:42	jmcarthur	we typically think of indirection as containing, but the mutability makes it weird
2013-09-07 19:10:45	discoloda	can I get a little help with a little library? https://gist.github.com/discoloda/6477331
2013-09-07 19:10:55	jmcarthur	monochrom: i was not, but that doesn't not make it less interesting
2013-09-07 19:10:56	elliott	yes, operationally Strings change too
2013-09-07 19:11:00	thr33strikes	merijn: that makes so much more sense now. thanks for the example.
2013-09-07 19:11:01	elliott	to become evaluated
2013-09-07 19:11:05	-->	gavri (~gavri@223.182.17.220) has joined #haskell
2013-09-07 19:11:16	jmcarthur	*doesn't make
2013-09-07 19:11:17	<--	makos_ (~makos@koln-5d816e78.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-07 19:11:19	<--	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-07 19:11:19	<--	elediaz_ (~quassel@62.32.138.131) has quit (Ping timeout: 264 seconds)
2013-09-07 19:11:48	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-07 19:11:52	-->	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has joined #haskell
2013-09-07 19:11:53	merijn	thr33strikes: FWIW, as I mentioned before, if you just want to play with things in ghci while writing in an editor you can load external files into ghci and run the code from there
2013-09-07 19:12:00	applicative	merijn: yes, but all this is taken care of by cabal sandbox init; cabal configure; cabal repl
2013-09-07 19:12:11	monochrom	if you take it seriously, I think you can do it both ways. ski shows how to make RefInt not contain an Int. but you could do it another way, and make RefInt contain an Int.
2013-09-07 19:12:17	merijn	applicative: Is it? Why?
2013-09-07 19:12:29	merijn	applicative: Why does cabal do that for sandboxes but not for non-sandboxes?
2013-09-07 19:12:35	applicative	merijn: i'm busily all over pandoc
2013-09-07 19:12:52	applicative	merijn: i think we just don't enough about how to use it -- or its an issue to raise
2013-09-07 19:12:55	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Ping timeout: 260 seconds)
2013-09-07 19:12:55	monochrom	but I like the denotational story
2013-09-07 19:12:59	merijn	I managed to get it to load using that SO answer and -idist/build/autogen already, btw
2013-09-07 19:13:00	jmcarthur	ah, i didn't realize that made sense in context. i had ignored ski's code because it looked long
2013-09-07 19:13:17	<--	gavri (~gavri@223.182.17.220) has left #haskell
2013-09-07 19:13:20	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-07 19:13:23	merijn	Fingers crossed my newly compiling pandoc actually works rather than crashing due to me introducing a silly bug :>
2013-09-07 19:13:36	elliott	monochrom: ski's RefInt contains a pointer too
2013-09-07 19:13:38	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 19:14:04	jmcarthur	yeah, i also like the denotational story, but you have to admit that the claim that IORef Int contains no Int sounds pretty confusing ;)
2013-09-07 19:14:08	 *	applicative didn't need black magic to open Paths_pandoc and find out where the executable had been installed in his sandbox
2013-09-07 19:14:09	monochrom	it's really a pointer.
2013-09-07 19:14:30	merijn	applicative: I wasn't interested in executables?
2013-09-07 19:14:40	thr33strikes	merijn:  I'll try to become more comfortable with running code either way.  My hurdle right now is my lack of knowledge and everyday because of people like you and this channel I'm getting a little smarter.
2013-09-07 19:14:41	applicative	merijn: that was an example
2013-09-07 19:14:46	merijn	applicative: I wanted to load a module into ghci to check out some types/make hdevtools work
2013-09-07 19:15:07	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 19:15:15	applicative	right, so my example of loading a module into ghci was loading Paths_pandoc
2013-09-07 19:15:25	 *	hackagebot genifunctors 0.1.0.0 - Generate generalized fmap, foldMap and traverse  http://hackage.haskell.org/package/genifunctors-0.1.0.0 (DanRosen)
2013-09-07 19:15:51	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-07 19:16:02	<--	anRch (~markmilli@static-71-184-226-33.bstnma.fios.verizon.net) has quit (Client Quit)
2013-09-07 19:16:48	jmcarthur	i suppose no (T a) where a is invariant will contain an a
2013-09-07 19:16:59	monochrom	I think in real life we cut some slack on imperative programmers (there are so many afterall, and even I am one of them) and agree to say: if you have a pointer/address to an Int, you already say the pointer contains an Int, even though denotationally you still have to look up the environment
2013-09-07 19:17:02	-->	normanrichards (~normanric@mobile-166-147-065-244.mycingular.net) has joined #haskell
2013-09-07 19:17:04	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 19:17:19	elliott	jmcarthur: yep. covariant: "does not contain negative uses" contravariant: "does not contain positive uses" invariant: "does not contain positive or negative uses"
2013-09-07 19:17:21	jmcarthur	so for that reason i think IORef is less interesting than IO in this respect
2013-09-07 19:17:26	applicative	merijn: which i did by doing cabal repl; > import Paths_pandoc ; > :browse ; etc
2013-09-07 19:17:27	jmcarthur	since IO is covariant
2013-09-07 19:17:28	elliott	er
2013-09-07 19:17:33	elliott	jmcarthur: sorry, that is not what invariant is
2013-09-07 19:17:39	dmj`	thr33strikes: sublime text 2 is also quick and dirty for writing/compiling haskell. Install it, then install the sublime-haskell package, set your build system to haskell, define a main function, Apple+B to compile, and bob's your uncle.
2013-09-07 19:17:39	elliott	at least in the terminology lensy folk use
2013-09-07 19:17:40	watermind	Here's an idea/question... why not be able to declare constructors in classes, and then define in instance declarations?
2013-09-07 19:17:40	elliott	we call that anyvariant
2013-09-07 19:17:46	elliott	invariant is Endo
2013-09-07 19:18:09	jmcarthur	elliott: invariant is just neither covariant nor contravariant
2013-09-07 19:18:10	edwardk	anyvariant = phantom, easily changed
2013-09-07 19:18:16	watermind	that way we could use pattern matching with class polymorphism
2013-09-07 19:18:32	enthropy	watermind: you know about associated types / type families?
2013-09-07 19:18:33	edwardk	"both covariant and contravariant"
2013-09-07 19:18:40	jmcarthur	err
2013-09-07 19:18:42	jmcarthur	right
2013-09-07 19:18:48	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-07 19:18:51	watermind	enthropy: I know about type families, not associated types
2013-09-07 19:19:05	<--	amathew (~Adium@184.152.8.103) has quit (Quit: Leaving.)
2013-09-07 19:19:09	enthropy	well you can put a data family inside a class
2013-09-07 19:19:39	watermind	enthropy: hmm yes I've looked at that before, and even used it... let me refresh my memory
2013-09-07 19:19:41	<--	Gentlecat_ (~Roman@79.105.223.70) has quit (Ping timeout: 264 seconds)
2013-09-07 19:20:10	enthropy	I guess the actual data that you make the instance of the data family has to be declared somewhere else
2013-09-07 19:20:17	ski	@remember monochrom new catchy thing to say: an IORef Int contains an Int in the same sense as an IO Int contains an Int
2013-09-07 19:20:18	lambdabot	Good to know.
2013-09-07 19:20:23	watermind	enthropy: I'm remembering, so you could use different data structures for different instances
2013-09-07 19:20:26	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-07 19:20:26	 *	hackagebot boomerang 1.4.0 - Library for invertible parsing and printing  http://hackage.haskell.org/package/boomerang-1.4.0 (JeremyShaw)
2013-09-07 19:20:36	monochrom	yikes
2013-09-07 19:20:50	ski	HHOS, and all that
2013-09-07 19:20:51	watermind	enthropy: still not sure how that helps in this case though?
2013-09-07 19:21:01	<--	LAMMJohnson (~ja@user-5af4340a.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-07 19:21:11	elliott	jmcarthur: invariant requires both ways to map (so *can* contain covariant "a"s)
2013-09-07 19:21:19	elliott	anyvariant requires neither way, or equivalently provides both ways to map
2013-09-07 19:21:22	elliott	so cannot contain any "a"
2013-09-07 19:21:29	shachaf	I approve of the word "phantom".
2013-09-07 19:21:37	shachaf	I never liked "anyvariant".
2013-09-07 19:21:50	-->	bytbox_ (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has joined #haskell
2013-09-07 19:21:52	<--	bytbox (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has quit (Read error: Connection reset by peer)
2013-09-07 19:21:56	ski	how about "avariant" ?
2013-09-07 19:22:02	enthropy	watermind: I dunno, it's the closest thing to your suggestion I know
2013-09-07 19:22:05	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 245 seconds)
2013-09-07 19:22:08	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-07 19:22:25	monochrom	phantariant
2013-09-07 19:22:29	shachaf	Why not "phantom"? That word is already in use and amounts to the same thing.
2013-09-07 19:22:43	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-07 19:22:47	<--	white-ribboner31 (~white-rib@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Quit: white-ribboner31)
2013-09-07 19:22:57	elliott	how about + for covariant, - for contravariant, ± for phantom?
2013-09-07 19:23:00	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-07 19:23:06	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-07 19:23:14	elliott	er, not for phantom, for invariant
2013-09-07 19:23:20	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (Ping timeout: 260 seconds)
2013-09-07 19:23:41	elliott	and then something for phantom.
2013-09-07 19:23:45	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-07 19:23:47	shachaf	∓ for phantom, obviously
2013-09-07 19:24:10	monochrom	+_+  :)
2013-09-07 19:24:10	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (Ping timeout: 245 seconds)
2013-09-07 19:24:17	shachaf	0 for phantom
2013-09-07 19:24:31	elliott	yes, I was considering 0
2013-09-07 19:24:49	monochrom	0 is nice
2013-09-07 19:25:11	elliott	there should be a standard symbol for numbers without sign.
2013-09-07 19:25:13	elliott	then you could use that
2013-09-07 19:25:14	shachaf	What about a notation for strict positivity?
2013-09-07 19:25:15	watermind	enthropy: http://lpaste.net/92705
2013-09-07 19:25:20	watermind	^ an example of what I mean
2013-09-07 19:25:55	-->	specklessness70 (~speckless@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 19:25:55	watermind	the idea is that if you could declare constructors in classes then you could use pattern matching when together with class polymorphism
2013-09-07 19:25:57	shachaf	＋, clearly.
2013-09-07 19:26:30	watermind	it's seems like a pretty simple extension
2013-09-07 19:26:38	elliott	strict positivity is a weird notion.
2013-09-07 19:26:40	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Client Quit)
2013-09-07 19:26:55	watermind	and it would make some code simpler, and allow for more type safety and better warnings/error messages
2013-09-07 19:27:12	monochrom	the "strict" just means "not 0"
2013-09-07 19:27:30	shachaf	Next, edwardk can come up with a notation for colavariant types.
2013-09-07 19:28:25	shachaf	monochrom: I don't think a "strictly positive" type is related to that.
2013-09-07 19:28:30	elliott	is pepsi a colavariant?
2013-09-07 19:28:32	edwardk	actually. funny you should mention that. the tensors library i'm playing with lets me talk about tensors with  superscripts and subscripts as 'modes' or as distinguishing data from codata.
2013-09-07 19:28:51	edwardk	but it all comes down to wanting to smash these things together into a variant of the cola… in morton order
2013-09-07 19:28:53	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Read error: Operation timed out)
2013-09-07 19:28:54	edwardk	we'll see if it works
2013-09-07 19:29:01	watermind	hmmm let me see
2013-09-07 19:29:06	edwardk	there is a more coherent exposition than that
2013-09-07 19:29:16	edwardk	but notationally things look like string diagrams
2013-09-07 19:29:19	<--	zcourts (~zcourts@176.248.12.165) has quit (Ping timeout: 264 seconds)
2013-09-07 19:29:29	elliott	edwardk: I like how you just mash together a bunch of concepts and force them to help each other.
2013-09-07 19:29:37	elliott	"alright, let's have tensors, codata, and morton order"
2013-09-07 19:29:45	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-07 19:30:17	monochrom	"one variant to rule them all, in the dark lands of morton order"...
2013-09-07 19:30:39	monochrom	or perhaps s/variant/cola/
2013-09-07 19:30:41	edwardk	well, by using the string diagram i get a nice notation, superscripts are codata/inputs, subscripts are results, tables and tensors are the same in this view, and my matrix multiplier works even for n-way multiplies/n-way joins so i get a 'planless' join structure.
2013-09-07 19:31:04	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 19:31:09	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 19:31:13	<--	heha (d2ba73ba@gateway/web/freenode/ip.210.186.115.186) has quit (Quit: Page closed)
2013-09-07 19:31:17	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-07 19:31:30	-->	codesoup (~codesoup@206-248-156-70.dsl.teksavvy.com) has joined #haskell
2013-09-07 19:31:31	edwardk	then in the string diagram i let you make arbitrary forks and you can form cups as 'joins', and we can have tables as tensors with only subscripts, and table-valued functions as tensors that have some superscripts
2013-09-07 19:31:42	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 240 seconds)
2013-09-07 19:31:48	<--	Martty (~martty@lion.puttynuts.com) has quit (Ping timeout: 245 seconds)
2013-09-07 19:32:11	edwardk	the results are produced in my funny morton order. if you have something with all superscripts it acts like a filter. with a mix of super and subscripts it acts like a function, with all subscripts it acts like a table.
2013-09-07 19:32:12	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 260 seconds)
2013-09-07 19:32:29	<--	dacav (~dacav@c-4f66b0f3-74736162.cust.telenor.se) has left #haskell ("Bye")
2013-09-07 19:32:33	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-07 19:32:39	BMeph	edwardk: You do know, don't you...
2013-09-07 19:32:55	edwardk	we can't form a 'cap', but we can take a table of possible inputs, .g. a range, and wire it up to an input of a predicate, and take another table of possible inputs and wire it up to the other input, then fork those wires and read out the answers
2013-09-07 19:32:59	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 19:33:00	BMeph	edwardk: ..that you cannot simply waltz into morton order? ;p
2013-09-07 19:33:13	monochrom	haha
2013-09-07 19:33:22	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 240 seconds)
2013-09-07 19:33:45	edwardk	and all of the results can be produced interleaved in morton order using the join trick…. and i'm working on ways to upgrade the cola to provide the catenable form i need to make my matrix multiplier fast
2013-09-07 19:34:07	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-07 19:34:10	<--	grazs (~g@89.221.241.91) has quit (Ping timeout: 245 seconds)
2013-09-07 19:34:12	-->	S1100100` (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 19:34:24	monochrom	"one simply unsafeInterleaveIO into Morton order" http://lpaste.net/77457
2013-09-07 19:34:32	<--	tertl3 (~William@75.139.64.89) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-09-07 19:34:40	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-07 19:34:55	thr33strikes	does ghci ignore main?
2013-09-07 19:35:07	monochrom	no
2013-09-07 19:35:10	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-07 19:35:15	edwardk	on thought is to take the cola and use it as part of a larger structure. build an interval map out of say a finger tree where the entries are sorted vectors with bloom filters, and say that we never want more than log n intervals to overlap at any position, then i can search for a point by doing a lookup on the interval map, filtering the selection down, and then searching the hits.
2013-09-07 19:35:39	edwardk	doing cola-style joins to preserve the interval map invariant, but then concatenation is orders of magnitude cheaper
2013-09-07 19:35:53	edwardk	that means that the cola forms the basis for my tables/relations/tensors
2013-09-07 19:35:59	-->	tac (~tac-tics@2602:306:bdb4:5100:21ce:7b5b:5b8b:efdb) has joined #haskell
2013-09-07 19:35:59	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Ping timeout: 260 seconds)
2013-09-07 19:36:03	edwardk	but its complicated enough that i probably will never finish it
2013-09-07 19:36:21	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-07 19:36:22	-->	Drew__ (81617c83@gateway/web/freenode/ip.129.97.124.131) has joined #haskell
2013-09-07 19:36:32	<--	normanrichards (~normanric@mobile-166-147-065-244.mycingular.net) has quit
2013-09-07 19:36:37	merijn	thr33strikes: Define "ignore" it doesn't automatically run main, but if you type "main" or ":main" it will execute it
2013-09-07 19:37:02	-->	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has joined #haskell
2013-09-07 19:38:04	edwardk	one of the reasons the matrix multiply series has stalled is that i've been working on getting the cola into a suitable form, so i can talk about things about a step behind actually implementing them
2013-09-07 19:38:18	edwardk	now that it beats map i can start polishing it up
2013-09-07 19:38:35	-->	Martty (~martty@2607:fd50:1:91b0::eb1c:1115) has joined #haskell
2013-09-07 19:38:50	thr33strikes	ok that explains it
2013-09-07 19:38:52	-->	hdevalence|away (hdevalence@gateway/shell/kde/x-yqbgatcxuacouhst) has joined #haskell
2013-09-07 19:39:17	-->	tertl3 (~William@75.139.64.89) has joined #haskell
2013-09-07 19:39:22	<--	tertl3 (~William@75.139.64.89) has quit (Client Quit)
2013-09-07 19:39:25	ski	enthropy : did you get my point ? or should i paste and reexplain ?
2013-09-07 19:39:42	thr33strikes	doesn't automatically run it because of laziness?
2013-09-07 19:40:00	<--	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has quit (Ping timeout: 245 seconds)
2013-09-07 19:40:04	monochrom	no. because I don't want it run.
2013-09-07 19:40:18	merijn	thr33strikes: No, mostly because it's really inconvenient to execute a program everytime you reload when you're loading an executable into ghci :p
2013-09-07 19:40:26	enthropy	ski: I think I got it
2013-09-07 19:40:30	thr33strikes	ok
2013-09-07 19:40:40	-->	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has joined #haskell
2013-09-07 19:40:59	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-09-07 19:41:03	hpaste	enthropy pasted “watermind” at http://lpaste.net/92706
2013-09-07 19:41:03	merijn	thr33strikes: Imagine a program that spends 5 minutes working on your disk and you just wanted to check the type of a function, executing it would be really annoying
2013-09-07 19:41:14	enthropy	watermind: maybe that is "close enough"?
2013-09-07 19:41:58	-->	bss03 (~bss@76-220-103-20.lightspeed.fyvlar.sbcglobal.net) has joined #haskell
2013-09-07 19:42:12	--	hdevalence|away is now known as hdevalence
2013-09-07 19:43:20	ski	enthropy : the main point is that, conceptually speaking, an `IORef a' does in no way contain a `a' value -- it just acts like an array index (in reality a memory address) into some array (the heap) that is separately passed around (implicitly in both the `IO' and the `M' case. in the `IO' you can't get at it at all)
2013-09-07 19:43:29	bss03	Anything in haskell-platform for length-indexed container type family?  Like: Vector 7 Int?
2013-09-07 19:43:40	<--	Martty (~martty@2607:fd50:1:91b0::eb1c:1115) has quit (Remote host closed the connection)
2013-09-07 19:44:33	-->	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has joined #haskell
2013-09-07 19:44:43	--	hdevalence is now known as hdevalence|away
2013-09-07 19:44:52	watermind	enthropy: yeap, I was leaning towards that kind of solution (i.e. use another type to convert to and from and pattern match)...
2013-09-07 19:44:57	<--	zhak7 (~zhak7@cac94-6-82-232-187-33.fbx.proxad.net) has quit (Quit: Lost terminal)
2013-09-07 19:45:03	johnw	bss03: no, but repa will do that
2013-09-07 19:45:08	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-07 19:45:18	watermind	enthropy: mapList f (toC -> Con x xs)  -- ??
2013-09-07 19:45:36	enthropy	watermind: -XViewPatterns
2013-09-07 19:45:44	merijn	Pffft, why does my code refuse to work if I make blind changes in a codebase I don't know >.>
2013-09-07 19:45:46	watermind	enthropy: need to check those... never heard of them
2013-09-07 19:46:09	enthropy	there's not much to them
2013-09-07 19:46:12	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-07 19:46:19	bss03	johnw: Thanks.  I knew about Repa, but I think that's overkill for this project.  I'll just use a non-length-indexed type family.
2013-09-07 19:46:28	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-07 19:46:33	watermind	enthropy: ohhhh so this exists, I had no idea
2013-09-07 19:46:48	<--	k0001 (~k0001@host97.190-138-114.telecom.net.ar) has quit (Quit: leaving)
2013-09-07 19:47:02	-->	chidy (~chidy@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 19:47:18	merijn	Is there a way to temporarily disable building of profiled libraries and docs from the command line?
2013-09-07 19:47:20	<--	Drew__ (81617c83@gateway/web/freenode/ip.129.97.124.131) has quit (Quit: Page closed)
2013-09-07 19:47:29	-->	RylandAlmanza (~RylandAlm@c-76-105-244-177.hsd1.or.comcast.net) has joined #haskell
2013-09-07 19:47:30	<--	RylandAlmanza (~RylandAlm@c-76-105-244-177.hsd1.or.comcast.net) has quit (Changing host)
2013-09-07 19:47:30	-->	RylandAlmanza (~RylandAlm@unaffiliated/rylandalmanza) has joined #haskell
2013-09-07 19:47:44	johnw	--disable-library-profiling
2013-09-07 19:47:52	monochrom	--disable-documentation
2013-09-07 19:47:56	merijn	\o/
2013-09-07 19:48:24	merijn	johnw: I'm assuming there's a similar --disable-executable-profiling?
2013-09-07 19:48:27	<--	jkpl (~jkpl@jabam.lepovirta.org) has left #haskell ("bye.")
2013-09-07 19:48:28	-->	agumonkey (~agu@170.158.70.86.rev.sfr.net) has joined #haskell
2013-09-07 19:48:33	johnw	give the man a cookie!
2013-09-07 19:48:33	-->	travisb (~travisb@adsl-68-248-227-96.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-07 19:49:04	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-07 19:49:11	merijn	i r smrt
2013-09-07 19:49:12	enthropy	watermind: maybe you would be interested in writing your functions in terms of types from GHC.Generics instead
2013-09-07 19:49:20	 *	bss03 Cookie-Set: heresYourCookie
2013-09-07 19:49:30	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-07 19:49:32	enthropy	since then the  to/from code will be automated if people ask for it
2013-09-07 19:49:34	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-07 19:49:43	<--	otulp (~otulp@cm-84.209.90.171.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-09-07 19:50:03	<--	pierreghz (~krux@12.79-247-81.adsl-dyn.isp.belgacom.be) has quit (Read error: Connection reset by peer)
2013-09-07 19:50:06	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (Client Quit)
2013-09-07 19:50:39	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 264 seconds)
2013-09-07 19:50:43	-->	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has joined #haskell
2013-09-07 19:51:02	merijn	hmmm
2013-09-07 19:51:16	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 19:51:17	watermind	enthropy: I understand the suggestion, but I don't think so...
2013-09-07 19:51:18	bss03	Is Data.Graph directed or undirected?  I think the documentation is ambiguous on this point.
2013-09-07 19:51:26	merijn	Why don't we add Debug.Trace.trace to Prelude so you don't have to continually add/remove the Debug.Trace import?
2013-09-07 19:51:27	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-07 19:51:29	-->	LAMMJohnson (~ja@user-5af4388e.broadband.tesco.net) has joined #haskell
2013-09-07 19:51:32	-->	krivenok (5d649386@gateway/web/freenode/ip.93.100.147.134) has joined #haskell
2013-09-07 19:51:46	-->	gavri (~gavri@223.238.184.153) has joined #haskell
2013-09-07 19:51:47	watermind	enthropy: this was just an example... I was trying to move towards what ML languages offer with their modules
2013-09-07 19:52:07	<--	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 19:52:09	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-07 19:52:26	-->	pierreghz (~krux@91.179.27.135) has joined #haskell
2013-09-07 19:52:38	watermind	this isn't quite the same, but it does help working with abstractions
2013-09-07 19:52:43	gavri	given a list, how do I apply them as arguments to a function. for example, assuming that there is no "sum" function, how do I use + to add up the two elements in the two element list [4, 5]?
2013-09-07 19:52:52	dmj`	Added warp-tls to Scotty. Hoping for feedback from warp people. Tried to base off flask.
2013-09-07 19:52:53	dmj`	https://github.com/xich/scotty/pull/43
2013-09-07 19:53:00	elliott	gavri: foldr or foldl'
2013-09-07 19:53:03	elliott	> foldr f z [a,b,c,d]
2013-09-07 19:53:04	lambdabot	  f a (f b (f c (f d z)))
2013-09-07 19:53:07	bss03	dmj: Data.List.foldl' 0 (+)
2013-09-07 19:53:08	-->	rodrigov_ (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-07 19:53:09	elliott	> foldr (+) 0 [a,b,c,d]
2013-09-07 19:53:10	lambdabot	  a + (b + (c + (d + 0)))
2013-09-07 19:53:11	--	nopcode_ is now known as nopcode
2013-09-07 19:53:15	elliott	> foldl f z [a,b,c,d]
2013-09-07 19:53:16	lambdabot	  f (f (f (f z a) b) c) d
2013-09-07 19:53:19	elliott	> foldl (+) 0 [a,b,c,d]
2013-09-07 19:53:20	lambdabot	  0 + a + b + c + d
2013-09-07 19:53:21	gavri	I was hoping for something more concise than that :/
2013-09-07 19:53:23	elliott	(but you want foldl' for strictness when summing)
2013-09-07 19:53:35	elliott	gavri: "foldl' (+) 0" isn't much longer than "sum"...
2013-09-07 19:53:39	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Max SendQ exceeded)
2013-09-07 19:54:01	bss03	dmj: foldr1 (+) ?
2013-09-07 19:54:13	gavri	I guess it doesn't look so great in the context of the actual code I'm writing
2013-09-07 19:54:35	gavri	it doesn't feel like I'm folding anything
2013-09-07 19:54:42	elliott	gavri: why not just write sum...?
2013-09-07 19:54:46	begriffs	Can anyone help me debug this type error? I am trying to use postgresql-simple and the simplest example fails:  do { conn <- connect defaultConnectInfo; query conn "select 2 + 2" }. It wants "IO b0" but it is getting "q0 -> IO [r0]". Does query take another argument that the example in the docs isn't telling me about?
2013-09-07 19:54:46	gavri	because they just happen to be two arguments to a function
2013-09-07 19:54:51	bss03	gavri: If you are reducing a list, you are doing a fold.
2013-09-07 19:54:52	gavri	that happen to be in an array
2013-09-07 19:54:56	elliott	ok, well, what is the actual code?
2013-09-07 19:55:00	johnw	I think he wants something like "apply" from Lisp?
2013-09-07 19:55:03	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-07 19:55:10	watermind	enthropy: now I just wish we could have multiple instances for the same types, one of them being the default one, and the possibility of opening alternative instances in a certain scope
2013-09-07 19:55:23	gavri	johnw: yeah, I finally made the connection
2013-09-07 19:55:26	gavri	that's what I want really
2013-09-07 19:55:30	johnw	apply is just a fold ;)
2013-09-07 19:55:34	elliott	you can't have that, sorry :)
2013-09-07 19:55:36	elliott	it doesn't have a type.
2013-09-07 19:55:46	elliott	but I'd like to ask again the actual function and list involved here
2013-09-07 19:55:50	<--	LAMMJohnson (~ja@user-5af4388e.broadband.tesco.net) has quit (Ping timeout: 245 seconds)
2013-09-07 19:56:03	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 264 seconds)
2013-09-07 19:56:06	-->	jorick (~kciroj@94-224-181-103.access.telenet.be) has joined #haskell
2013-09-07 19:56:06	<--	jorick (~kciroj@94-224-181-103.access.telenet.be) has quit (Changing host)
2013-09-07 19:56:06	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-07 19:56:22	bss03	alliot: Well, it doesn't have a "simple" type.  I'm pretty sure you can dependently type it. :P
2013-09-07 19:56:33	merijn	That moment you realise you just spent an hour debugging functionality and it turns out cabal just wasn't updating the symlink to your binary >.>
2013-09-07 19:56:39	gavri	elliott: I'll link to it in a couple of minutes
2013-09-07 19:56:53	-->	pavonia (~user@p54B9F97F.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 19:56:56	-->	ozataman (~ozataman@pool-108-41-231-51.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 19:57:43	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Quit: Lost terminal)
2013-09-07 19:58:02	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-07 19:58:29	jmcarthur	haskell can type apply, but it isn't as simple as fold
2013-09-07 19:58:30	erisco	> foldr (:) [] [1..10]
2013-09-07 19:58:32	lambdabot	  [1,2,3,4,5,6,7,8,9,10]
2013-09-07 19:58:46	gavri	elliott: https://gist.github.com/gavri/6477749/raw/7e9c831bb76df9b937c14ec8e5e06e364d923b96/gistfile1.hs
2013-09-07 19:58:53	erisco	reduced to a list! :)
2013-09-07 19:59:00	jmcarthur	and it can't just use a simple list. it needs to have more rich types
2013-09-07 19:59:00	gavri	so I wanted to simplify that using map
2013-09-07 19:59:04	bss03	jmcarther: It involes HList for the arguments and some weird typeclass for the function, yeah.
2013-09-07 19:59:20	gavri	and realized that after the simplification, I had a list of two elements
2013-09-07 19:59:21	jmcarthur	or some alternative to HList, but yes, that's the general idea
2013-09-07 19:59:30	gavri	that I wanted to apply to the Bin constructor
2013-09-07 19:59:38	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-09-07 19:59:41	gavri	to (Bin x) actually
2013-09-07 19:59:53	jmcarthur	gavri: why a list instead of a tuple?
2013-09-07 19:59:55	elliott	gavri: split should return a tuple, not a list
2013-09-07 20:00:02	jmcarthur	gavri: with a tuple, you could just use uncurry
2013-09-07 20:00:03	elliott	in fact incomplete assumes it does
2013-09-07 20:00:04	jmcarthur	:t uncurry
2013-09-07 20:00:05	lambdabot	(a -> b -> c) -> (a, b) -> c
2013-09-07 20:00:09	<--	tov (~tov@eecs-login.seas.harvard.edu) has quit (Quit: leaving)
2013-09-07 20:00:10	gavri	thanks a lot
2013-09-07 20:01:09	-->	segmond (~segmond@adsl-108-67-101-30.dsl.sfldmi.sbcglobal.net) has joined #haskell
2013-09-07 20:01:09	applicative	begriffs: did you figure it out; there are two 'query' functions one in mysql and one in mysql-simple https://www.fpcomplete.com/hoogle?q=query&env=ghc-7.4.2-stable-13.09
2013-09-07 20:01:15	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-07 20:01:19	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-07 20:01:57	bss03	If I have a function I want to specialize, and I want the specialization to have a separate name, I just do something like:
2013-09-07 20:02:01	-->	tov (~tov@eecs-login.seas.harvard.edu) has joined #haskell
2013-09-07 20:02:24	-->	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has joined #haskell
2013-09-07 20:02:41	bss03	g :: (Num n) => n -> Foo; f :: Int -> foo; g = {- stuff here -}; {-# SPECIALIZE g Int #-}; f = g;
2013-09-07 20:03:04	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-07 20:03:18	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Remote host closed the connection)
2013-09-07 20:03:32	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 20:04:06	-->	boblu (~boblu@h22n4-far-a12.ias.bredband.telia.com) has joined #haskell
2013-09-07 20:04:11	xplat	if i want to deserialize an ADT from a serialization format defined by another language's runtime (ocaml here), which binary serialization library should i use?  binary, cereal or something else?
2013-09-07 20:04:30	gavri	a stupid thing to do, I know, but is there a reason there can't be a version of uncurry that acts on lists? it would have limited use and would be strictly a subset of what uncurry does, but I'm helping that the answer to this this question would help me gain a better understanding of types in haskell
2013-09-07 20:04:32	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 20:04:34	begriffs	applicative: I'm using the one from postgresql-simple though
2013-09-07 20:04:47	gavri	*hoping
2013-09-07 20:05:06	xplat	gavri: there's no such thing as a variadic function for it to curry/uncurry into
2013-09-07 20:05:15	gavri	oh
2013-09-07 20:05:17	gavri	got it
2013-09-07 20:05:18	merijn	xplat: binary or cereal should both work, their very similar
2013-09-07 20:05:33	merijn	xplat: Juse use the Get monad to specify the deserialisation
2013-09-07 20:06:47	xplat	gavri: if you stretched things you could say foldl is similar to an uncurry for lists, though
2013-09-07 20:07:01	xplat	merijn: ah, thanks
2013-09-07 20:08:02	gavri	damn, there's a specific kind of pleasure I get from learning haskell that I don't get from learning other programming languages
2013-09-07 20:08:20	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-07 20:08:31	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-07 20:08:35	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 20:08:54	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Quit: "μ", said the cow)
2013-09-07 20:08:58	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-07 20:09:10	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-07 20:09:10	johnw	being able to think like a mathematician rather than like a computer?
2013-09-07 20:09:24	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Client Quit)
2013-09-07 20:10:03	<--	rodrigov_ (~rodrigovi@201.37.47.64) has quit (Ping timeout: 240 seconds)
2013-09-07 20:10:33	 *	hackagebot web-routes-boomerang 0.28.0 - Library for maintaining correctness and composability of URLs within an application.  http://hackage.haskell.org/package/web-routes-boomerang-0.28.0 (JeremyShaw)
2013-09-07 20:10:59	gavri	maybe, but I don't think pure math without being able to run it on a computer would make me feel so great either
2013-09-07 20:11:18	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-09-07 20:11:38	johnw	Mathematica has been around for a long time
2013-09-07 20:12:06	begriffs	applicative:  oh query_
2013-09-07 20:12:24	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp135.bu.edu) has joined #haskell
2013-09-07 20:12:31	gavri	never used mathematica. does it have file/device IO etc?
2013-09-07 20:12:36	-->	wontez (~wontez@ltea-047-066-103-099.pools.arcor-ip.net) has joined #haskell
2013-09-07 20:12:53	merijn	gavri: It has file IO
2013-09-07 20:13:15	joelteon	I'm still getting 404s when I try to upload packages, but hackage looks up
2013-09-07 20:13:25	<--	thr33strikes (~wontez@ltea-047-066-017-071.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-07 20:13:27	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 20:13:36	<--	[[zzzz]] (~q@node-tok.pool-125-24.dynamic.totbb.net) has quit (Read error: Connection reset by peer)
2013-09-07 20:13:45	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-07 20:14:04	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 20:14:39	begriffs	What's up with these functions that end in underscore, like query_ and forM_ ? Does that signify something?
2013-09-07 20:14:50	johnw	that the return value is ignored
2013-09-07 20:15:02	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 20:15:02	<--	zenoli (~pk@109.201.154.154) has quit (Ping timeout: 248 seconds)
2013-09-07 20:15:02	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 20:15:12	johnw	it means the function returns Monad m => m (), typically
2013-09-07 20:15:19	johnw	and so it can optimize for that case
2013-09-07 20:15:19	donri	begriffs: you get the effects (m) but the value (a) is empty (())
2013-09-07 20:15:33	 *	hackagebot data-fresh 0.2013.250 - An interface for generating fresh values  http://hackage.haskell.org/package/data-fresh-0.2013.250 (StijnVanDrongelen)
2013-09-07 20:15:51	<--	chidy (~chidy@host86-180-156-36.range86-180.btcentralplus.com) has quit (Remote host closed the connection)
2013-09-07 20:15:58	-->	artyomkazak (~artyomkaz@94.25.229.91) has joined #haskell
2013-09-07 20:16:23	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 240 seconds)
2013-09-07 20:16:30	applicative	it makes a big difference with eg sequence and sequence_ if i remember
2013-09-07 20:16:41	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-09-07 20:17:14	-->	S_J (S_J@m90-129-92-203.cust.tele2.se) has joined #haskell
2013-09-07 20:17:28	dmj`	@src sequence_
2013-09-07 20:17:28	lambdabot	sequence_ ms = foldr (>>) (return ()) ms
2013-09-07 20:17:40	S_J	http://lpaste.net/92708 <- can someone help me with pipes
2013-09-07 20:17:41	ski	(the value is trivial)
2013-09-07 20:17:42	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (Ping timeout: 248 seconds)
2013-09-07 20:17:50	S_J	i cant figure out what i need to do
2013-09-07 20:18:47	donri	begriffs: but, doesn't seem like postgresql-simple follows this convention here
2013-09-07 20:18:52	<--	ddinh (~David@70.231.145.202) has quit (Ping timeout: 260 seconds)
2013-09-07 20:19:03	S_J	socketWriteD it has a very weird return type
2013-09-07 20:19:10	<--	Martty (~martty@lion.puttynuts.com) has quit (Ping timeout: 245 seconds)
2013-09-07 20:19:28	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 264 seconds)
2013-09-07 20:19:28	<--	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-07 20:19:28	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 20:20:19	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 20:20:20	applicative	S_J: yes it isn't in IO to get it to type check you'd need to add lift$ to getLine and to the last line
2013-09-07 20:20:23	wontez	can you apply a pattern to IO functions?
2013-09-07 20:20:24	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-09-07 20:20:33	 *	hackagebot damnpacket 0.1.1 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.1 (JoelTaylor)
2013-09-07 20:20:40	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-07 20:20:45	<--	artyomkazak (~artyomkaz@94.25.229.91) has quit (Ping timeout: 260 seconds)
2013-09-07 20:20:51	<--	yfyf (~yfyf@wcw-stud-239-204.wireless.uva.nl) has quit (Ping timeout: 245 seconds)
2013-09-07 20:21:00	--	wontez is now known as threestrikes
2013-09-07 20:21:01	applicative	S_J: however, I doubt this is what you want. it is likely that you are looking for a pipes combination involving socketWriteD
2013-09-07 20:21:08	<--	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has quit (Quit: tcsavage)
2013-09-07 20:21:08	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 20:21:16	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-09-07 20:21:19	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 20:21:27	applicative	S_J: well wait, maybe not
2013-09-07 20:22:09	<--	gavri (~gavri@223.238.184.153) has quit (Ping timeout: 268 seconds)
2013-09-07 20:22:13	ski	threestrikes : it's not clear what you mean
2013-09-07 20:22:20	erisco	:t coalesce
2013-09-07 20:22:21	lambdabot	Not in scope: `coalesce'
2013-09-07 20:22:30	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-07 20:22:41	ski	@wn coalesce
2013-09-07 20:22:43	lambdabot	*** "coalesce" wn "WordNet (r) 3.0 (2006)"
2013-09-07 20:22:43	lambdabot	coalesce
2013-09-07 20:22:43	lambdabot	    v 1: mix together different elements; "The colors blend well"
2013-09-07 20:22:43	lambdabot	         [syn: {blend}, {flux}, {mix}, {conflate}, {commingle},
2013-09-07 20:22:43	lambdabot	         {immix}, {fuse}, {coalesce}, {meld}, {combine}, {merge}]
2013-09-07 20:22:45	lambdabot	    2: fuse or cause to grow together
2013-09-07 20:22:52	-->	rmrf (~rmrf@183.81.114.18) has joined #haskell
2013-09-07 20:23:09	-->	artyomkazak (~artyomkaz@94.25.229.91) has joined #haskell
2013-09-07 20:23:16	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-09-07 20:23:17	threestrikes	ski: is it possible to filter a function like getCurrentDirectory for only files of a certain type?
2013-09-07 20:23:25	threestrikes	ski: or extension
2013-09-07 20:23:30	ski	@hoogle getCurrentDirectory
2013-09-07 20:23:31	lambdabot	System.Directory getCurrentDirectory :: IO FilePath
2013-09-07 20:23:33	ski	isn't a function
2013-09-07 20:23:42	ski	it's an `IO'-action
2013-09-07 20:24:16	threestrikes	ohh ok I thought an IO action was a function
2013-09-07 20:24:36	ski	no
2013-09-07 20:24:43	merijn	I'll take the upcoming discussion as a hint to get back to writing my "IO as Programs" explanation that I was procrastinating from
2013-09-07 20:24:44	threestrikes	more reading lol
2013-09-07 20:24:48	S_J	applicative: i want to write and read to a socket...using pipes
2013-09-07 20:24:49	ski	functions in Haskell always takes an argument (exactly one argument)
2013-09-07 20:24:52	ski	@type getDirectoryContents
2013-09-07 20:24:53	lambdabot	Not in scope: `getDirectoryContents'
2013-09-07 20:24:58	ski	@hoogle getDirectoryContents
2013-09-07 20:24:59	lambdabot	System.Directory getDirectoryContents :: FilePath -> IO [FilePath]
2013-09-07 20:26:07	ski	threestrikes : after applying `getDirectoryContents' to e.g. the directory path you get by executing `getCurrentDirectory', and then executing the resulting `IO'-action, you could filter the resulting list of file (including directory) names that you get as a result
2013-09-07 20:26:13	threestrikes	@hoogle filepath
2013-09-07 20:26:13	lambdabot	Prelude type FilePath = String
2013-09-07 20:26:13	lambdabot	System.IO type FilePath = String
2013-09-07 20:26:13	lambdabot	System.FilePath.Windows type FilePath = String
2013-09-07 20:26:16	threestrikes	wow
2013-09-07 20:26:31	threestrikes	lambdabot :)
2013-09-07 20:26:39	applicative	S_J: this typechecks but isn't what you want yet http://lpaste.net/92709
2013-09-07 20:26:46	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-07 20:27:03	-->	makos_ (~makos@koln-5d816e78.pool.mediaWays.net) has joined #haskell
2013-09-07 20:27:19	applicative	S_J: all the lines in a do block be in the same idiom, or 'monad'; in this case some 'proxy'
2013-09-07 20:27:51	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-07 20:28:16	edwardk	ok, what is the nicest way folks can think of to split a list into runs that are monotone increasing?
2013-09-07 20:28:38	-->	otulp (~otulp@cm-84.209.82.197.getinternet.no) has joined #haskell
2013-09-07 20:28:44	johnw	edwardk: a fold should be pretty easy?
2013-09-07 20:29:05	edwardk	johnw: should be, but i figured i'd ask as it is 5-levels deeper than the problem i care about =)
2013-09-07 20:29:10	johnw	ah
2013-09-07 20:29:14	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 20:29:28	S_J	applicative: so what do i want then?
2013-09-07 20:29:29	napping	what do you mean by "nicest"?
2013-09-07 20:29:29	tromp	fold would be quadratic time?!
2013-09-07 20:29:45	edwardk	i'm also looking for a linear tim solution if possible
2013-09-07 20:29:50	threestrikes	ski: I think I  did that using dirContent <- getDirectoryContents
2013-09-07 20:29:54	tromp	oh, only a leftfold is
2013-09-07 20:29:57	napping	that's more or less how Data.List.sort starts, if you want something efficient
2013-09-07 20:30:00	S_J	I cant IO and socketWriteD in the same do block?
2013-09-07 20:30:03	edwardk	bonus points if you can have it emit vectors rather than lists.
2013-09-07 20:30:06	threestrikes	ski: is this correct?
2013-09-07 20:30:14	<--	raft (~raft@5.178.71.77) has quit (Read error: Operation timed out)
2013-09-07 20:30:28	edwardk	napping: nicest in the sense that it doesn't have bad asymptotics and the code is obviously correct
2013-09-07 20:30:44	edwardk	good constant factors would be nice as well
2013-09-07 20:30:59	edwardk	as this will form a key part in fromList for the COLA
2013-09-07 20:31:34	enthropy	"obviously correct" shouldn't be that important, since the specification is pretty easy to check
2013-09-07 20:31:38	-->	gavri (~gavri@223.237.36.224) has joined #haskell
2013-09-07 20:31:49	tromp	an rfold just has to stick next element in front of first list, or prepended as singleton list
2013-09-07 20:31:50	edwardk	basically i have code that can insert monotone increasing vectors into the cola in a big fell swoop, doing minimal merging, but i need to get them out of the initial list
2013-09-07 20:31:56	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 20:32:29	ski	threestrikes : your `dirContents' is now a list of file paths, that you can filter, e.g. using `filter' or a list comprehension
2013-09-07 20:32:48	enthropy	 prop_splitRuns1 xs = xs == concat (splitRuns xs);  prop_splitRuns2 xs = all (\run -> and $ zipWith (<) run (drop 1)) (splitRuns xs)
2013-09-07 20:33:11	edwardk	hence why this was something just above trivial but anoying to have to deal with along the way =)
2013-09-07 20:33:12	enthropy	 prop_splitRuns1 xs = xs == concat (splitRuns xs);  prop_splitRuns2 xs = all (\run -> and $ zipWith (<) run (drop 1 run)) (splitRuns xs)
2013-09-07 20:33:28	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-07 20:33:30	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has left #haskell
2013-09-07 20:33:48	ski	edwardk : .. idly wondering whether one could delay inserting and batch after a while, and whether that would be worth it
2013-09-07 20:33:49	tromp	whenever i read "streaming B-tree" i can't help but think of "screaming B-tree"
2013-09-07 20:33:57	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-07 20:33:58	threestrikes	ski: How do I know what the list type consists of once I send the data to dirContents?  Does it continue to be IO?
2013-09-07 20:33:58	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-07 20:34:04	edwardk	 ski: thats basically what i'm doing with these runs themselves
2013-09-07 20:34:05	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-07 20:34:07	-->	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 20:34:24	edwardk	tromp: well, its finally screaming. now i want it to support more operations ;)
2013-09-07 20:34:44	edwardk	so i started in on split and union
2013-09-07 20:34:51	ski	threestrikes : `getDirectoryContents dirPath' is an `IO [FilePath], but after `dirContent <- getDirectoryContents dirPath', `dirContent' is a plain `[FilePath]', no `IO' left in it
2013-09-07 20:35:00	<--	otulp (~otulp@cm-84.209.82.197.getinternet.no) has quit (Ping timeout: 256 seconds)
2013-09-07 20:35:17	ski	edwardk : yeah, thinking about individual, iterated, "insert" calls
2013-09-07 20:35:24	-->	ghost124 (~edwlan@c-69-136-228-69.hsd1.md.comcast.net) has joined #haskell
2013-09-07 20:35:31	tromp	edwardk, is there a good Judy-tree impl for haskell?
2013-09-07 20:35:42	edwardk	insert itself does a lot of that, but i'm trying to get the whole vectors at a time rather than elementwise inserts
2013-09-07 20:35:45	threestrikes	ski: and when the IO drops it's considered "pure"?
2013-09-07 20:35:55	edwardk	since i seem to have hit a performance cap with that approach
2013-09-07 20:35:58	<--	ghost124 (~edwlan@c-69-136-228-69.hsd1.md.comcast.net) has quit (Client Quit)
2013-09-07 20:36:19	johnw	> let f x (b,xs@(y:ys)) = if x > b then (x,[x]:xs) else (x,(x:y):ys) in snd $ foldr f (0,[[]]) [4,5,6,1,2,7,8,6]
2013-09-07 20:36:20	lambdabot	  [[4,5,6],[1,2,7,8],[6],[]]
2013-09-07 20:36:32	edwardk	tromp: funny you should ask. ciao marcelo wrote some back in 2006. i first came into this channel to ask about them, since audreyt was his mentor
2013-09-07 20:36:47	edwardk	tromp: but its an external binding, not a reimplementation
2013-09-07 20:36:47	napping	edwardk: I think a little mutual recursion wouldn't be bad.
2013-09-07 20:36:48	applicative	S_J: you can IO and Pipe in the same do block with the appropriate attunement of lifts.
2013-09-07 20:36:54	edwardk	and i have no idea if they are still working
2013-09-07 20:36:57	-->	otulp (~otulp@cm-84.209.82.197.getinternet.no) has joined #haskell
2013-09-07 20:36:59	applicative	S_J: here is another piece of your puzzle http://lpaste.net/92710
2013-09-07 20:37:22	edwardk	napping: i'm happy to outsource this function, i just want it to be fast. let me commit what i have
2013-09-07 20:37:41	edwardk	right now i'm just using  fromList xs = List.foldl' (\m (k,v) -> insert k v m) empty xs
2013-09-07 20:37:48	edwardk	which should probably be a foldr
2013-09-07 20:37:50	tromp	do you know how Judy trees compare to Data.Map in benchmarks?
2013-09-07 20:38:04	edwardk	tromp: well Data.Map is crippled by having to support all versions for all time
2013-09-07 20:38:12	threestrikes	ski: to be more specific, when the IO is no longer a part of FilePath the dirContent can be considered a part of pure code with no side effects?
2013-09-07 20:38:15	edwardk	tromp: so its not exactly a fair fight
2013-09-07 20:38:27	kqr1	threestrikes, not really
2013-09-07 20:38:29	ski	threestrikes : when the `IO' drops the action is considered "done", you're left with the result of executing it. the effects of executing it have already been realized
2013-09-07 20:38:41	edwardk	the COLA i have here cheats a bit too ;)
2013-09-07 20:38:42	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 276 seconds)
2013-09-07 20:38:50	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-07 20:38:53	kqr1	threestrikes, dirContent is a pure value, yes, but it is still "trapped" in an IO function, sort of
2013-09-07 20:38:56	-->	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has joined #haskell
2013-09-07 20:39:20	ski	threestrikes : Haskell doesn't have side-effects at all. but yes, you can say that there's no *effects* (specifically I/O-effects) left, since they have been performed
2013-09-07 20:39:49	threestrikes	ok
2013-09-07 20:39:51	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-09-07 20:39:56	threestrikes	o
2013-09-07 20:39:57	-->	hrehf (~s@krlh-4d02bb17.pool.mediaWays.net) has joined #haskell
2013-09-07 20:40:00	tromp	Ok, so I should ask about Array.ST vs Judy instead
2013-09-07 20:40:00	kqr1	threestrikes, i.e. you have to do `dirContent <- getDirectoryContents' in an IO function, but then for the rest of that function `dirContent' is a pure value
2013-09-07 20:40:06	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Ping timeout: 256 seconds)
2013-09-07 20:40:23	edwardk	then judy will stomp it
2013-09-07 20:40:25	ski	threestrikes : if we said `getDirectoryContents :: FilePath -> [FilePath]', *then* this would be *side*-effectful (doing I/O effects without declaring them in the interface / type signature, iow doing those effects on the *side*)
2013-09-07 20:40:47	tromp	because Array is only for very dense arrays?
2013-09-07 20:40:54	ski	threestrikes : however, keeping track of the `IO' explicitly in the type means that we're not *hiding* the effects, so they're not *side*-effects
2013-09-07 20:40:58	applicative	S_J: this will be about 1/40,000th the labor tomorrow when the new pipes libraries come out
2013-09-07 20:41:36	ski	threestrikes : in particular, this means that we know that when there's no `IO' hiding in the type, then there's no I/O-effects
2013-09-07 20:41:42	kqr1	applicative, pipes-4.0.0 is the new pipes?
2013-09-07 20:41:55	<--	otulp (~otulp@cm-84.209.82.197.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-09-07 20:42:06	threestrikes	ski: gotcha
2013-09-07 20:42:28	-->	testingok (~benny@99.46.210.178) has joined #haskell
2013-09-07 20:42:32	applicative	kqr1: yes
2013-09-07 20:42:45	S_J	apples: really, TOMORROW?
2013-09-07 20:42:53	ski	threestrikes : in this way, one of the points of using monads to model effects is that we can *refrain* from using a monad, and then we know that the operation won't perform the associated effects (unlike in say C++ where any function call may do I/O or state effects, and may throw an exception -- all this without declaring this in the interface)
2013-09-07 20:42:54	S_J	lol apples->applicative
2013-09-07 20:43:13	edwardk	tromp: yeah. and judy is scarily dense
2013-09-07 20:43:14	-->	otulp (~otulp@cm-84.209.82.197.getinternet.no) has joined #haskell
2013-09-07 20:43:16	hpaste	monochrom annotated “example” with “example implemented (Haskell 98!)” at http://lpaste.net/92705#a92711
2013-09-07 20:43:34	monochrom	watermind: http://lpaste.net/92705#a92711
2013-09-07 20:44:05	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (Ping timeout: 256 seconds)
2013-09-07 20:44:33	tromp	5
2013-09-07 20:44:37	tromp	wrong window:(
2013-09-07 20:44:41	-->	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has joined #haskell
2013-09-07 20:44:49	S_J	Does Parsec work on bytestrings?
2013-09-07 20:44:50	monochrom	/win vista
2013-09-07 20:45:06	S_J	or rather, Can parsed work on bytestrings?
2013-09-07 20:45:24	monochrom	yes
2013-09-07 20:45:25	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-07 20:45:29	<--	begriffs (~j@50-0-204-77.dsl.static.sonic.net) has quit (Quit: begriffs)
2013-09-07 20:45:31	danilo2	Maybe this is strage question - but is it possible to not load Prelude in any file? I know I can use "import qualified Prelude as Prelude" - but is it possible to prevent Haskell from loading it in any file of my library? (ina cabal config etc?)
2013-09-07 20:45:35	S_J	applicative: ty but I still dont get how to use the Proxy/serve stuff with withSocketsDo
2013-09-07 20:45:41	johnw	NoImplicitPrelude
2013-09-07 20:45:52	monochrom	see my http://www.vex.net/~trebla/haskell/parsec-generally.xhtml#text
2013-09-07 20:45:57	-->	elediaz_ (~quassel@92.59.135.148) has joined #haskell
2013-09-07 20:45:58	johnw	put that in an extensions block in your cabal file
2013-09-07 20:46:05	johnw	I think it's language-extensions:
2013-09-07 20:46:20	jmcarthur	this (and a few minor variations i have explored recently) is the only example i know about of a lambda calculus syntax which only permits normal form terms. does anybody know of any others, particularly ones in which eta-conversion is sound? http://www.cs.yale.edu/homes/hudak/CS430F07/Programs/LCInterpreterWithSolns.txt
2013-09-07 20:46:21	<--	elediaz (~quassel@90.173.195.55) has quit (Ping timeout: 256 seconds)
2013-09-07 20:46:35	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-07 20:46:52	danilo2	johnw: thank you! And maybe is there a way to load my custom Prelude in each file? (replacing the built in?)
2013-09-07 20:47:28	jmcarthur	it's the eta normal form requirement that is making it difficult for me to invent my own
2013-09-07 20:47:43	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-07 20:47:44	johnw	danilo2: for that you'll need to just import
2013-09-07 20:47:57	danilo2	johnw: Ok, thank you :)
2013-09-07 20:48:17	<--	krivenok (5d649386@gateway/web/freenode/ip.93.100.147.134) has quit (Quit: Page closed)
2013-09-07 20:48:19	merijn	danilo2: NoImplicitPrelude extension and enable the package wide using the cabal extension syntax
2013-09-07 20:48:28	merijn	oh, curse johnw's speed
2013-09-07 20:49:16	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-07 20:49:35	kqr1	danilo2, -XNoImplicitPrelude
2013-09-07 20:49:51	napping	jmcarthur: is that eta-long?
2013-09-07 20:50:18	kqr1	danilo2, or, on a per-file basis, {-# LANGUAGE NoImplicitPrelude #-} followed by import YourPrelude
2013-09-07 20:50:34	 *	hackagebot damnpacket 0.1.2 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.2 (JoelTaylor)
2013-09-07 20:50:38	-->	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has joined #haskell
2013-09-07 20:51:01	jmcarthur	napping: you just gave me a very helpful keyword
2013-09-07 20:51:06	kqr1	oh i'm way late to the party there
2013-09-07 20:51:20	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-07 20:51:50	napping	jmcarthur: there may be some normalization by evaluation things done in Agda you could look at
2013-09-07 20:51:53	jmcarthur	napping: it looks like i'm looking for a syntax for canonical terms, which is beta-normal + eta-long
2013-09-07 20:52:05	<--	xinming_ (~xinming@125.82.207.57) has quit (Ping timeout: 264 seconds)
2013-09-07 20:52:14	napping	okay, then you do have types, to know how long to make the etas
2013-09-07 20:52:25	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Quit: Leaving)
2013-09-07 20:52:32	-->	qwer (576d1f27@gateway/web/freenode/ip.87.109.31.39) has joined #haskell
2013-09-07 20:52:41	khyperia	Question: I want to display an image in a window (aka make a mandelbrot renderer). What's the easiest way to do that? I've only ever done console programs before.
2013-09-07 20:52:42	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-07 20:52:51	-->	zenoli (~pk@109.201.154.145) has joined #haskell
2013-09-07 20:53:02	jmcarthur	ah, i didn't realize that required types. it did in fact run into a problem which i would not have had without types, but i thought maybe i wasn't being imaginative enough
2013-09-07 20:53:06	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp135.bu.edu) has quit (Quit: leaving)
2013-09-07 20:53:08	-->	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has joined #haskell
2013-09-07 20:53:13	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-07 20:53:26	jmcarthur	i realize i am probably a little fuzzy
2013-09-07 20:53:28	-->	xinming (~xinming@125.82.207.24) has joined #haskell
2013-09-07 20:53:43	napping	jmcarthur: you can't tell if you want f, or \x -> f x, or \x y -> f x y etc without types
2013-09-07 20:53:55	jmcarthur	right
2013-09-07 20:53:57	-->	dacav (~dacav@c-4f66b0f3-74736162.cust.telenor.se) has joined #haskell
2013-09-07 20:54:00	jmcarthur	that makes sense
2013-09-07 20:54:10	jmcarthur	i have found LF type theory
2013-09-07 20:54:12	napping	otoh, without types you can write diverging expessions, so you couldn't give a total "apply" operation
2013-09-07 20:54:16	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-07 20:54:17	<--	gavri (~gavri@223.237.36.224) has quit (Ping timeout: 256 seconds)
2013-09-07 20:55:10	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-07 20:55:24	<--	jackp (~Jack@pool-173-61-150-129.cmdnnj.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-07 20:55:37	jmcarthur	nice http://twelf.org/wiki/Hereditary_substitution_for_the_STLC
2013-09-07 20:55:45	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-07 20:55:54	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 20:55:59	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 20:56:06	monochrom	@tell watermind http://lpaste.net/92705#a92711
2013-09-07 20:56:07	lambdabot	Consider it noted.
2013-09-07 20:56:16	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 20:57:03	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-07 20:57:05	ParaSa1lin	@hoogle (//>)
2013-09-07 20:57:06	lambdabot	No results found
2013-09-07 20:57:07	jmcarthur	napping: hmm. is there a reason eta-long is preferred over... "eta-short"?
2013-09-07 20:57:09	<--	boblu (~boblu@h22n4-far-a12.ias.bredband.telia.com) has quit (Ping timeout: 260 seconds)
2013-09-07 20:57:31	inkjetunito	good evening. in general, is compiled haskell faster than (interpreted) python?
2013-09-07 20:57:41	byorgey	inkjetunito: yes.
2013-09-07 20:57:42	jmcarthur	inkjetunito: far far far faster
2013-09-07 20:57:45	elliott	jmcarthur: knowing that a value of a function type is always a lambda is arguably simpler
2013-09-07 20:57:45	napping	I'm not really sure, perhaps just beacuse every term of type A -> B starts then with a lambda binding something of type A
2013-09-07 20:57:49	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-07 20:57:59	inkjetunito	byorgey, jmcarthur: great.
2013-09-07 20:58:08	elliott	inkjetunito: yes but you can easily construct badly-written test programs that turn out slower than python ones because the latter spends 90% of their time in highly-optimised C library functions
2013-09-07 20:58:11	napping	inkjetunito: with some possible execptions if you're leaning heavily on functions actually implemented in C
2013-09-07 20:58:39	elliott	haskell's performance should not disappoint at all once experienced with the language and GHC, though, especially if python is already adequate for your purposes
2013-09-07 20:58:40	napping	In particular if you're mostly doing fairly straightforward string munging, Python seems to come out pretty fast
2013-09-07 20:58:48	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-07 20:58:53	byorgey	khyperia: I suggest the  gloss  and  gloss-raster  packages.
2013-09-07 20:58:59	-->	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has joined #haskell
2013-09-07 20:59:18	khyperia	alright, thanks
2013-09-07 20:59:39	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 20:59:49	S_J	how would you represent a game board in haskell? Data.map?
2013-09-07 20:59:55	jmcarthur	inkjetunito: yeah i agree with the caveats the other answerers have said
2013-09-07 21:00:00	S_J	i always found arrays a real hassle to work with
2013-09-07 21:00:17	jmcarthur	S_J: i have represented game boards in many different ways. it depends on what i need to be able to do with it
2013-09-07 21:00:23	johnw	there's a library for working with game boards in Haskell, actually
2013-09-07 21:00:29	jmcarthur	johnw: oh interesting
2013-09-07 21:00:47	bss03	S_J: I suppose it depends.  I tend to use a Data.Map.Map or some IArray implementation.
2013-09-07 21:00:58	khyperia	Is there a way to write "\x -> x - 2" in the style of "(operator value)"? When I write (-2) it gets interpreted as negative two, but ((-) 2) doesn't work either, since (/ 2) /= ((/) 2)
2013-09-07 21:01:05	elliott	khyperia: (subtract 2)
2013-09-07 21:01:05	inkjetunito	elliott, napping: thanks
2013-09-07 21:01:10	khyperia	ah, thanks
2013-09-07 21:01:11	johnw	http://hackage.haskell.org/package/grid
2013-09-07 21:01:12	bss03	S_J: I've also just seen it represented as a list of moves.
2013-09-07 21:01:12	<--	yacks (~py@103.6.159.103) has quit (Read error: Connection reset by peer)
2013-09-07 21:01:13	elliott	khyperia: it's gross; we're sorry.
2013-09-07 21:01:15	<--	qwer (576d1f27@gateway/web/freenode/ip.87.109.31.39) has quit (Ping timeout: 250 seconds)
2013-09-07 21:01:21	bss03	(subtract 2)
2013-09-07 21:01:28	jmcarthur	khyperia: this is a little special case in haskell syntax that many of us don't really like
2013-09-07 21:01:38	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-07 21:02:33	erisco	> (flip (-) $ 2) 1
2013-09-07 21:02:34	lambdabot	  -1
2013-09-07 21:02:58	jmcarthur	johnw: that library looks fantastic
2013-09-07 21:03:15	khyperia	that's... really verbose and confusing, erisco, heh.
2013-09-07 21:03:20	S_J	Map.map?
2013-09-07 21:03:26	erisco	> flip (-) $ 2 $ 1
2013-09-07 21:03:26	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-07 21:03:28	lambdabot	  Could not deduce (GHC.Num.Num (GHC.Integer.Type.Integer -> c))
2013-09-07 21:03:28	lambdabot	   arising f...
2013-09-07 21:03:32	erisco	oh right :(
2013-09-07 21:03:34	inkjetunito	i'm mostly interested in haskell because it seems to have a good collection of libraries and it's (hopefully) faster than python on numeric operations
2013-09-07 21:04:01	erisco	khyperia, eh we tried
2013-09-07 21:04:04	jmcarthur	S_J: the library johnw just linked to looks like it basically has everything i ever rolled on my own
2013-09-07 21:04:07	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (Ping timeout: 264 seconds)
2013-09-07 21:04:18	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 21:04:26	edwardk	so no great insight on elegant conversions to runs?
2013-09-07 21:04:37	-->	tuxie_ (~paranoid@g225065226.adsl.alicedsl.de) has joined #haskell
2013-09-07 21:04:40	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-07 21:04:40	monochrom	I like how it also has hexagonal tiles
2013-09-07 21:04:42	edwardk	> groupBy (<) [1,2,3,4,3,4,2,1,4]
2013-09-07 21:04:42	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Read error: Connection reset by peer)
2013-09-07 21:04:43	lambdabot	  [[1,2,3,4,3,4,2],[1,4]]
2013-09-07 21:04:45	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 21:04:46	-->	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has joined #haskell
2013-09-07 21:04:53	edwardk	oh its based on the first
2013-09-07 21:05:03	-->	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has joined #haskell
2013-09-07 21:05:11	monochrom	and toroidal, hehe
2013-09-07 21:05:16	napping	yep. Not sure you'll do better than something like let run acc limit l@(x:xs) | limit <= x = run (x:acc) x xs; run acc _ l = (reverse acc,l)
2013-09-07 21:05:21	jmcarthur	monochrom: and how it's well documented
2013-09-07 21:05:29	napping	let runs l = unfoldr (\l -> case l of [] -> Nothing; (x:xs) -> Just (run [x] x xs)) l
2013-09-07 21:05:29	monochrom	play Pac Man on hexagonal toroidal maps!
2013-09-07 21:05:38	napping	except building up a vector rather than reversed list
2013-09-07 21:05:56	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 268 seconds)
2013-09-07 21:05:57	<--	exicer (~exicer@86.161.139.220) has quit (Quit: Lost terminal)
2013-09-07 21:06:03	applicative	S_J: here is something like what you seem to have intended http://lpaste.net/92712 the bytestringiness is seeming a little precipitate
2013-09-07 21:06:11	napping	though turning the whole list into a vector and extracting subvectors by offset might better amortize costs of growing
2013-09-07 21:06:49	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-09-07 21:06:51	edwardk	napping: hrmm. ok, next challenge i guess, accreting the lengths of the little vectors so they can be built with fromListN
2013-09-07 21:06:54	jmcarthur	S_J: btw, here's another relevant library which by design is compatible with any game board type you can probably come up with: http://hackage.haskell.org/package/astar
2013-09-07 21:07:02	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-07 21:07:23	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-07 21:07:26	edwardk	and we can build the vector in reverse so the reversing step isn't needed if we do it right
2013-09-07 21:07:47	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-07 21:08:03	edwardk	basically i'm looking for Ord k => [k] -> [Vector k]
2013-09-07 21:08:29	S_J	how do I generate a value from the uniform distribution [0,1] ?
2013-09-07 21:09:06	napping	edwardk: should this be lazy? parallel?
2013-09-07 21:09:21	bss03	S_J: Are you fine with [0, 1) ?
2013-09-07 21:09:33	edwardk	:t randomR (0,1 :: Double) (mkStdGen 1)
2013-09-07 21:09:34	lambdabot	(Double, StdGen)
2013-09-07 21:09:36	-->	eriksensei (~eriksense@f104019.upc-f.chello.nl) has joined #haskell
2013-09-07 21:09:37	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-07 21:09:37	bss03	@hoogle randomRIO
2013-09-07 21:09:37	lambdabot	System.Random randomRIO :: Random a => (a, a) -> IO a
2013-09-07 21:09:38	edwardk	> randomR (0,1 :: Double) (mkStdGen 1)
2013-09-07 21:09:39	lambdabot	  (6.440633872506418e-2,545291967 2103410263)
2013-09-07 21:09:57	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 21:10:00	edwardk	> fst $ randomR (0,1 :: Double) (mkStdGen 1) -- chosen by fair die roll
2013-09-07 21:10:01	lambdabot	  6.440633872506418e-2
2013-09-07 21:10:05	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 21:10:27	monochrom	I thought 4 was the number chosen by fair die roll
2013-09-07 21:10:38	bss03	monochrom: 7, here.
2013-09-07 21:10:47	erisco	monochrom, it was rolled again to make it more random
2013-09-07 21:11:28	-->	earthy (~arthurvl@illipe.xs4all.nl) has joined #haskell
2013-09-07 21:11:28	monochrom	7 is beyond fair die. it's fairy die. :)
2013-09-07 21:11:42	danilo2	kqr1, merijn : Thanks - It works beautfully :)
2013-09-07 21:11:51	-->	raft (~raft@5.178.71.77) has joined #haskell
2013-09-07 21:12:06	<--	testingok (~benny@99.46.210.178) has quit (Ping timeout: 268 seconds)
2013-09-07 21:12:28	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 21:12:29	bss03	astar doesn't seem to be relevant and the grid isn't quite haxagonal: http://www.codecup.nl/rules_poly-y.php :(
2013-09-07 21:12:32	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-07 21:12:36	johnw	danilo2: :(
2013-09-07 21:12:49	johnw	first to answer, first to be forgotten
2013-09-07 21:12:51	<--	eriksensei (~eriksense@f104019.upc-f.chello.nl) has quit (Client Quit)
2013-09-07 21:13:27	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 21:13:45	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-07 21:13:47	merijn	johnw: In your face! :p
2013-09-07 21:14:09	monochrom	on the opposite side, Chinese Kungfu stories like to do this: two persons compete in die rolling, winning condition is getting the lowest number. first person rolls and gets 1. second person rolls so hard, and possibly with some Kungfu, that the die is powdered, it's a 0, win.
2013-09-07 21:14:10	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-09-07 21:14:29	johnw	curse this alacritous flesh
2013-09-07 21:15:03	danilo2	johnw: You've answered it faster than I asked for it :D But of course - thank you very much for your help! Indeed - you were first and after I got your answer I managed to solve the problem :)
2013-09-07 21:16:18	<--	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has quit (Quit: Page closed)
2013-09-07 21:16:24	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp135.bu.edu) has joined #haskell
2013-09-07 21:16:58	--	gpampara is now known as gpampara_off
2013-09-07 21:17:00	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-07 21:17:36	--	Nisstyre-laptop is now known as nisstyre
2013-09-07 21:17:41	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 21:17:43	-->	zhak7 (~zhak7@cac94-6-82-232-187-33.fbx.proxad.net) has joined #haskell
2013-09-07 21:17:56	-->	lambdakind (~lambdakin@cpe-66-69-139-187.sw.res.rr.com) has joined #haskell
2013-09-07 21:17:59	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Ping timeout: 260 seconds)
2013-09-07 21:19:07	-->	LAMMJohnson (~ja@90.244.60.15) has joined #haskell
2013-09-07 21:19:11	<--	dacav (~dacav@c-4f66b0f3-74736162.cust.telenor.se) has left #haskell
2013-09-07 21:20:31	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-07 21:21:36	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 21:21:48	watermind	monochrom: yes I understand we can do that... I was thinking of ways to make abstraction simpler and less error prone
2013-09-07 21:21:53	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-07 21:22:15	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-07 21:22:17	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-07 21:22:37	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 21:22:48	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-07 21:22:53	<--	zhak7 (~zhak7@cac94-6-82-232-187-33.fbx.proxad.net) has quit (Quit: leaving)
2013-09-07 21:23:16	-->	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has joined #haskell
2013-09-07 21:23:33	SrPx	Hey guys I'm desperate for an incremental topological sorting lib again, anyone? http://www.reddit.com/r/haskell/comments/1lwguh/is_there_any_incremental_topological_sorting/
2013-09-07 21:25:21	-->	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has joined #haskell
2013-09-07 21:25:34	jmcarthur	napping: alright, thanks. your help guided me to hereditary substitution, for which there is a goldmine of what i was looking for.
2013-09-07 21:25:40	aristid	 SrPx unlikely that it already exists, although you could search hackage. why not just implement the algorithms you found in those papers though?
2013-09-07 21:26:01	SrPx	aristid: because it is hard :/
2013-09-07 21:26:05	<--	bytbox_ (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has quit (Ping timeout: 240 seconds)
2013-09-07 21:26:08	SrPx	as in, would take a lot of time
2013-09-07 21:26:11	<--	stevejb (~user@50.46.156.116) has quit (Read error: Connection reset by peer)
2013-09-07 21:26:24	SrPx	the simple is easy, I've just done it in another language. but it is not as fast
2013-09-07 21:26:44	aristid	SrPx: and are you sure sorting a mere 1000 elements 30 times per second is a big problem?
2013-09-07 21:27:27	-->	bytbox (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has joined #haskell
2013-09-07 21:27:32	aristid	hmm i guess topological sorting will be less efficient than regular sorting
2013-09-07 21:27:58	edwardk	napping: parallel would be good, but i'm mostly just looking for the generation of the vectors.
2013-09-07 21:27:58	SrPx	yes, a lot! at least it was the bottleneck of my game, making it unplayeble in slower machines. I changed it to incremental and not it is not the bottleneck anymore, it is the graphics engine. but still, if I'm going to port it to haskell it would be really sweet if I had the right lib to do it
2013-09-07 21:28:08	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-07 21:28:14	SrPx	aristid: eh it is necessary for the effect
2013-09-07 21:28:21	jmcarthur	SrPx: another way to get the same effect would be to just use a z buffer when rendering
2013-09-07 21:28:50	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-07 21:29:20	<--	makos_ (~makos@koln-5d816e78.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-09-07 21:29:25	<--	chatsiri_ (~chatsiri_@171.6.174.58) has quit (Ping timeout: 256 seconds)
2013-09-07 21:29:49	jmcarthur	SrPx: unless you need alpha translucency or other fancy blending i suppose
2013-09-07 21:29:51	-->	mp (maciej@hell.cx) has joined #haskell
2013-09-07 21:29:53	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 21:29:53	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 21:30:23	-->	ashnur (~ashnur@79.117.69.143) has joined #haskell
2013-09-07 21:30:31	<--	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-07 21:30:41	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 21:31:04	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-07 21:31:12	SrPx	jmcarthur: hard to deretmine what z-index to attribute to each pixel of the sprite, though. i guess. not sure. but yea, i will try that
2013-09-07 21:31:17	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-07 21:31:26	mp	hi, how do I find (debug?) which function reads my lazy list?
2013-09-07 21:31:30	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-07 21:31:43	SrPx	jmcarthur: actually not quite. yea i guess that is the way to go. let me see
2013-09-07 21:31:49	jmcarthur	SrPx: a nice thing about the z buffer is it allows you to use shapes which with topological sort would require you to break into smaller pieces
2013-09-07 21:32:10	S_J	socketReadS: Less than the specified maximum number of bytes might be received at once. //// I thought pipes abstracted this annoying problem.
2013-09-07 21:32:16	SrPx	ok I guess this problem is solved
2013-09-07 21:32:19	SrPx	thamks
2013-09-07 21:32:27	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-07 21:33:08	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 21:33:34	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-07 21:33:59	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 21:34:00	SrPx	does anyone know about the state of art in haskell -> js translation? can it be almost as fast as js already?
2013-09-07 21:34:00	khyperia	is there a way to convert a Num to an Int? toInteger is the closest thing that I've found, but still way off track.
2013-09-07 21:34:07	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-07 21:34:18	SrPx	(i'm asking because the faq doesn't splicity say if those solutions are already practical)
2013-09-07 21:34:41	SrPx	explicit
2013-09-07 21:34:49	byorgey	SrPx: the state of the art consists of fay, ghcjs, and haste (in alphabetical order)
2013-09-07 21:34:54	td123	KyleCloud: 1 :: Int ?
2013-09-07 21:35:03	byorgey	they seem quite practical.  People use them.
2013-09-07 21:35:22	<--	davidsd (~davidsd@4.31.70.22) has quit (Quit: davidsd)
2013-09-07 21:35:25	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-07 21:35:38	SrPx	byorgey: and in performance order? (:
2013-09-07 21:36:25	byorgey	SrPx: I have no idea.  And besides, comparing performance is pretty meaningless since they all support different subsets of Haskell, do different things well and poorly, etc.
2013-09-07 21:37:14	k00mi	KyleCloud: does it have to be any Num, or is Integral enough?
2013-09-07 21:37:21	k00mi	uh, khyperia I mean
2013-09-07 21:37:38	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-07 21:37:40	khyperia	Integral is probably fine.
2013-09-07 21:37:46	aristid	byorgey: i suppose ghcjs' subset of haskell is the most complete?
2013-09-07 21:37:47	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-07 21:37:57	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 21:38:17	k00mi	khyperia: fromIntegral, then
2013-09-07 21:38:22	khyperia	right
2013-09-07 21:38:33	donri	SrPx: probably you should bet on ghcjs at least in the long run. but i think it's also the most optimized right now, too. i think fay wins in some cases due to being stupid :P
2013-09-07 21:38:41	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 21:38:53	merijn	Right, I need some newbie and expert proof readers for an article I'm working on explaining IO
2013-09-07 21:39:03	S_J	socketReadS wants () as 3rd param, what is that?
2013-09-07 21:39:36	applicative	S_J: again, it will be gone tomorrow.
2013-09-07 21:39:37	donri	luite: was that the case?
2013-09-07 21:39:37	merijn	Please don't reddit/whatever the link for now, as I plan to polish it and rehost on my own website once it's sufficiently done: https://gist.github.com/merijn/6478573
2013-09-07 21:39:58	applicative	S_J: meanwhile the previous question is answered in the newer pipes-network
2013-09-07 21:40:00	merijn	(also, There's at least one section I haven't gotten around to writing)
2013-09-07 21:40:30	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-07 21:40:38	merijn	Any feedback on grammar/style/content is welcome
2013-09-07 21:41:01	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit (Client Quit)
2013-09-07 21:41:01	applicative	S_J: see functions like this? https://github.com/k0001/pipes-network/blob/master/src/Pipes/Network/TCP.hs#L113
2013-09-07 21:41:09	elliott	merijn: you have seen the wiki Introduction to IO, right?
2013-09-07 21:41:13	elliott	(didn't read past the title :p)
2013-09-07 21:41:34	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-07 21:41:37	byorgey	aristid: yes, that's my understanding
2013-09-07 21:41:55	byorgey	in order of haskell subset completeness it goes  ghcjs > haste > fay
2013-09-07 21:43:19	-->	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-07 21:43:19	aristid	i wasn't even aware of haste
2013-09-07 21:43:21	merijn	elliott: Yeah, but I wanted to work on a slightly more elaborate intuition, including making use of first class IO
2013-09-07 21:43:25	donri	ghcjs has historically been the hardest to install, but that's been improving a lot (but i don't know how complete this progress is)
2013-09-07 21:43:30	merijn	elliott: Although I haven't gotten around to that yet
2013-09-07 21:43:32	luite	donri: what case?
2013-09-07 21:43:38	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-07 21:43:42	luite	donri: the basic ghcjs patch has been merged in ghc 7.8
2013-09-07 21:44:02	donri	luite: that ghcjs wins most benchmarks and is the most optimized, but that fay wins in some cases due to being stupid :)
2013-09-07 21:44:07	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-07 21:44:09	k00mi	merijn: IO type *constructor*, if you want to be thorough
2013-09-07 21:44:10	luite	but not yet the hooks thing (we can do without, but then we'd have to copy/paste lots of ghc source into ghcjs)
2013-09-07 21:44:19	luite	donri: oh i did some comparisons where ghcjs won indeed
2013-09-07 21:44:21	merijn	elliott: The wiki intro is more focussed on a sort of quick start guide
2013-09-07 21:44:35	merijn	k00mi: That's correct, but also useless info :)
2013-09-07 21:44:40	S_J	pipes has made by life 200 times more difficult so far
2013-09-07 21:44:48	luite	donri: but fay currently converts direct tailcalls into loops, ghcjs doesn't do that yet, so fay would probably win there
2013-09-07 21:44:50	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-07 21:44:51	elliott	you could opt to not use pipes.
2013-09-07 21:44:56	merijn	k00mi: Knowing that it's a type constructor doesn't tell you much about what it is :)
2013-09-07 21:44:57	S_J	is there a new version coming out tomorrow for real and is it easier to use?
2013-09-07 21:45:05	luite	fay also wins in code size since the non-concurrent ghcjs runtime is not ready yet
2013-09-07 21:45:06	S_J	because I dont see the charm of it so far
2013-09-07 21:45:09	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-07 21:45:09	khyperia	I'm very dumb and not understanding of types... but is there a "Integral a => Int -> a" function? (opposite of my earlier question)
2013-09-07 21:45:18	jmcarthur	merijn: "Haskell's IO type (note: type, not IO
2013-09-07 21:45:20	luite	khyperia: fromIntegral
2013-09-07 21:45:21	johnw	S_J: you may find conduit a bit simpler
2013-09-07 21:45:23	jmcarthur	gah copied a newline
2013-09-07 21:45:34	khyperia	oh god I'm an idiot
2013-09-07 21:45:36	k0001	S_J: Yes, it's going out tomorrow. The “charm” is that it is compatible with pipes-4.0.0 :)
2013-09-07 21:45:36	 *	hackagebot hexpat-lens 0.0.3 - Lenses for Hexpat.  http://hackage.haskell.org/package/hexpat-lens-0.0.3 (JosephAbrahamson)
2013-09-07 21:46:07	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-07 21:46:11	applicative	oh k0001 is here; tell S_J not to use the old pipes-network
2013-09-07 21:46:15	luite	donri: also i redid the base libs installation prodedure so it's a lot simpler :)
2013-09-07 21:46:18	jmcarthur	merijn: "Haskell's IO type (note: type, not IO monad!)"... if you want to be pedantic, IO is really a type constructor. some colloquially call type constructors types, but then again, some colloquially call IO a monad
2013-09-07 21:46:30	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-07 21:46:36	merijn	jmcarthur: I'm not referring to the type constructor, though
2013-09-07 21:46:39	tel	merijn, I don't like the personification of GHC… I'm guilty of it myself sometimes, but it really sets up the idea of "fighting" with the compiler instead of working with it :s
2013-09-07 21:46:41	k00mi	merijn: sure, neither does saying it's a type (and that's not even true!)
2013-09-07 21:46:43	edwardk	tel++ hexpat-lens
2013-09-07 21:46:46	merijn	jmcarthur: I'm referring to "IO a"
2013-09-07 21:46:47	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 21:46:56	merijn	tel: Which personification of GHC?
2013-09-07 21:46:57	donri	luite: cool. bbl dinner :) anyway it was SrPx who was asking about hs->js and performance
2013-09-07 21:47:04	tel	edwardk modeled on lens-aeson :D
2013-09-07 21:47:04	applicative	aw johnw, pipes-4 is *so* much simpler than that layer cake conduit stuff ;)
2013-09-07 21:47:04	jmcarthur	merijn: ah, then i would talk about an (IO a) rather than an (IO)
2013-09-07 21:47:18	tel	merjin "GHC's subtle way" "it's mad at you"
2013-09-07 21:47:27	<--	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-09-07 21:47:33	johnw	applicative: it really didn't look that way to me reading the mailing list posts
2013-09-07 21:47:33	merijn	tel: Ah
2013-09-07 21:47:34	<--	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has quit (Quit: Verlassend)
2013-09-07 21:47:39	-->	hashcat (~chatzilla@27.243.142.215) has joined #haskell
2013-09-07 21:47:39	johnw	upstream operators, downstream operators, etc.
2013-09-07 21:47:50	-->	pyx (~pyx@unaffiliated/pyx) has joined #haskell
2013-09-07 21:47:53	merijn	tel: "GHC's helpful attempt at informing you, you dun goofed" ;)
2013-09-07 21:47:57	luite	SrPx: oh, in most cases plain JS will be faster still, since haskell relies a lot of immutable data, doing much more allocation than JS
2013-09-07 21:47:59	tel	merijn, haha
2013-09-07 21:48:00	applicative	john, all gone.
2013-09-07 21:48:12	luite	SrPx: and JS engines aren't tuned for very fast allocation of lots of mem
2013-09-07 21:48:17	k0001	S_J: Tomorrow, new versions the following packages will be released together: pipes, pipes-safe, pipes-concurrency, pipes-parse, pipes-network, pipes-binary, pipes-zlib and pipes-attoparsec. If you are starting something today, prefer to use whatever is on my GitHub or Gabriel439's :)
2013-09-07 21:48:24	applicative	johnw: all gone ... until you open the forbidden modules
2013-09-07 21:48:24	merijn	k00mi: I disagree, with the notion that IO is not a type
2013-09-07 21:48:50	tel	merijn, I keep trying to write that kind of stuff like "GHC is too stupid to see the logic of your ways" but… that's pretty patronizing
2013-09-07 21:48:52	luite	SrPx: but you can write some of your code in JS, directly in a foreign import if needed, with GHCJS
2013-09-07 21:48:53	jmcarthur	you mean to address me?
2013-09-07 21:48:58	applicative	IO as program fragments?
2013-09-07 21:49:18	merijn	applicative: The title/section tiles suck
2013-09-07 21:49:21	k00mi	merijn: if we talk about IO :: * -> *, then you're wrong
2013-09-07 21:49:21	applicative	where by a program we mean something like a text
2013-09-07 21:49:26	luite	SrPx: and some code (where GHC unboxes things) will already be pretty fast
2013-09-07 21:49:28	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-07 21:49:29	haasn	writing TH code is always such dense work, it ends up taking an hour to produce a few lines
2013-09-07 21:49:30	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Ping timeout: 240 seconds)
2013-09-07 21:49:34	haasn	do I just suck at TH?
2013-09-07 21:49:35	tel	merijn, many people reject purity because they feel their programs have internal logic and it's more of a communication breakdown with GHC, I feel
2013-09-07 21:49:38	merijn	applicative: I figured I best just start writing instead of obsessing over tiles for years
2013-09-07 21:49:41	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-07 21:49:44	<--	pyx (~pyx@unaffiliated/pyx) has quit (Client Quit)
2013-09-07 21:50:02	merijn	applicative: I can obsess over those after actually finishing a basic draft :p
2013-09-07 21:50:06	-->	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has joined #haskell
2013-09-07 21:50:16	merijn	k00mi: In what sense?
2013-09-07 21:50:21	jmcarthur	merijn: i will grant that calling things of kind (* -> *) is not totally uncommon. this also probably isn't the place to argue about that, since it's not the point you are trying to make in the tutorial anyway. however, since some people will nonetheless be taught that IO is not a type, i think those people will find your language confusing
2013-09-07 21:50:36	 *	hackagebot gnutls 0.1.5 - Bindings for GNU libgnutls  http://hackage.haskell.org/package/gnutls-0.1.5 (JohnMillikin)
2013-09-07 21:50:42	jmcarthur	*i will grant that calling things of kind (* -> *) a type is not totally uncommon
2013-09-07 21:50:50	tel	merijn, but I like the conversational mode
2013-09-07 21:50:59	merijn	jmcarthur: Yeah, I'll rework it, because apparently everyone has already complained about it ;)
2013-09-07 21:51:11	<--	Zamarok_ (~Zamarok@129-2-129-154.wireless.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-07 21:51:14	merijn	tel: That's because I prefer lecturing on IRC to writing prose :)
2013-09-07 21:51:29	merijn	So I figured I'd just roll with it
2013-09-07 21:51:45	k00mi	merijn: what jmcarthur said, something of kind * is a type, * -> * is not
2013-09-07 21:51:47	-->	Zamarok_ (~Zamarok@129-2-129-154.wireless.umd.edu) has joined #haskell
2013-09-07 21:51:59	applicative	merijn: there was an elaborate post some years ago saying the occupants of IO x were 'little C programs' that get glued together by >>= etc
2013-09-07 21:52:01	Ralith	that is my understanding as well
2013-09-07 21:52:18	tel	merijn, there's a lot of space there to sort of inchworm someone's logic toward better notions of IO/purity, so I think it's not a bad mode
2013-09-07 21:52:58	merijn	applicative: There also was reverse post proving that C was a purely functional language ;)
2013-09-07 21:53:08	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 21:53:18	tel	jmcarthur merijn: maybe take some tricks from roconnor's IO-is-not-a-monad post?
2013-09-07 21:54:01	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-07 21:54:15	tel	http://r6.ca/blog/20110520T220201Z.html
2013-09-07 21:54:27	simon	@pl \(x,y) -> x * 10 + y
2013-09-07 21:54:31	lambdabot	ap (((+) . (* 10)) . fst) snd
2013-09-07 21:54:31	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-07 21:54:46	simon	@pl-resume
2013-09-07 21:54:48	-->	juliohm (~julio@unaffiliated/juliohm) has joined #haskell
2013-09-07 21:54:52	lambdabot	ap (((+) . (* 10)) . fst) snd
2013-09-07 21:54:52	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-07 21:54:54	applicative	but thats just more nonsense, roconnor's post.  it delays the real problem by turning IO into a type that needs an interpreter run on it.
2013-09-07 21:55:10	td123	I am trying to write a test for a function https://github.com/gostrc/hs-spotify/commit/4390a5b56f2f097f201a105050c16bf145d7f611 but when I run cabal test, I get module Bindings.Spotify.Toplist does not export sp_toplist_region
2013-09-07 21:55:19	td123	I'm kind of stumped
2013-09-07 21:55:27	merijn	tel: Yeah, that post is interesting in its own way, but not in a "how do I quickly get an intuition for IO" way :)
2013-09-07 21:56:04	jmcarthur	i also agree that roconnor's approach is not the kind that will resonate with beginners
2013-09-07 21:56:06	tel	merijn, yeah, I don't think it applies directly, but some of the logic is useful for sidestepping the monad/IO-as-a-type parts
2013-09-07 21:56:35	jmcarthur	you mean talking about I/O instead of IO?
2013-09-07 21:56:35	merijn	tel: Which I also find lacking in the wiki bit by Cale. This text so far is mostly a slightly more elaborate rephrasing of the wiki, but I'm also working on some stuff on first class IO to show how we can do neat things you'd normally need Lisp macro's for using first class IO
2013-09-07 21:56:49	applicative	these tutorials are a disaster.  i recommend reading Peyton Jones instead
2013-09-07 21:56:59	merijn	jmcarthur: Yeah, I think inserting a / at the beginning will help :)
2013-09-07 21:57:13	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-07 21:57:15	tel	merijn ifM :)
2013-09-07 21:57:21	tel	.. or really just if
2013-09-07 21:57:23	merijn	applicative: What in particular do you object to in my text?
2013-09-07 21:57:30	merijn	tel: I was gonna go with if or &&, yes
2013-09-07 21:57:49	applicative	im thinking of roconnor at the moment: "IO is kind of like RWS () [Instruction Register] Location a"
2013-09-07 21:58:03	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 21:58:16	<--	diadara_ (~diadara@115.249.18.25) has quit (Ping timeout: 260 seconds)
2013-09-07 21:58:17	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-07 21:58:22	tel	applicative hah, I don't think I prefaced roconnor's post well. It's not a good beginner tutorial
2013-09-07 21:58:25	merijn	applicative: Sure, but roconnor's post is not meant to be a newbie post
2013-09-07 21:58:53	merijn	applicative: He wrote it by request from Conal, who is interested in denotational semantics
2013-09-07 21:58:54	<--	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has quit (Quit: Konversation terminated!)
2013-09-07 21:58:55	tel	applicative but I think it's good to separate out "monad" from "sequence of operations"
2013-09-07 21:58:56	applicative	my objection is that its worse than false
2013-09-07 21:59:05	merijn	applicative: And the question whether IO is a monad is an open question
2013-09-07 21:59:10	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-09-07 21:59:16	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-07 21:59:22	S_J	how can I generate a list of 100 IO Ints?
2013-09-07 21:59:33	tel	S_J map return [1..100]
2013-09-07 21:59:37	S_J	uniform01 :: IO Int, how can i get a 100 of it?
2013-09-07 21:59:50	merijn	:t replicateM
2013-09-07 21:59:51	lambdabot	Monad m => Int -> m a -> m [a]
2013-09-07 21:59:51	tel	S_J ah, replicateM 100 uniform01
2013-09-07 22:00:06	<--	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has quit (Remote host closed the connection)
2013-09-07 22:00:22	merijn	applicative: Not all posts have to be written for newbies :)
2013-09-07 22:00:22	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-07 22:00:25	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 22:01:04	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp135.bu.edu) has quit (Quit: leaving)
2013-09-07 22:01:04	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 260 seconds)
2013-09-07 22:01:09	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 22:01:09	<--	discoloda (6bd31e6e@gateway/web/freenode/ip.107.211.30.110) has quit (Quit: Page closed)
2013-09-07 22:02:00	applicative	if all questions are put onto an interpreter function or even a so-called 'run time system', absolutely nothing is explained
2013-09-07 22:02:12	merijn	applicative: He's not trying to explain
2013-09-07 22:02:25	merijn	applicative: Or rather, he is, but a different question :)
2013-09-07 22:02:50	merijn	applicative: i.e. the question "is IO a monad?" not "what is IO?" or "how does IO work?" or "how should I think about IO?"
2013-09-07 22:02:55	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-07 22:03:10	<--	paullik (~paullik@unaffiliated/paullik) has quit (Read error: Operation timed out)
2013-09-07 22:03:15	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:03:15	<--	sellout- (~Adium@c-98-245-92-119.hsd1.co.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:03:28	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-07 22:03:30	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-07 22:04:15	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-07 22:04:39	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-07 22:05:37	 *	hackagebot Twofish 0.3.2 - An implementation of the Twofish Symmetric-key cipher.  http://hackage.haskell.org/package/Twofish-0.3.2 (RonLeisti)
2013-09-07 22:05:39	 *	hackagebot here 1.2.2 - Here docs & interpolated strings via quasiquotation  http://hackage.haskell.org/package/here-1.2.2 (TaylorHedberg)
2013-09-07 22:05:47	inkjetunito	haskell seems to fill the gap very well. i first tried filling it with common lisp, but it was missing the wheel
2013-09-07 22:05:55	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 22:05:55	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-07 22:06:15	applicative	i have read this many times; my conviction, which I wont press at the moment, is that it is poison
2013-09-07 22:07:40	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:08:06	-->	s1eepyn4te (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 22:08:15	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-07 22:08:53	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 22:09:12	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 22:09:15	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-07 22:09:28	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-07 22:09:42	--	S1100100` is now known as S11001001
2013-09-07 22:09:42	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-07 22:09:45	khyperia	.... okay. Wow. Haskell noob here, I just spent three hours coding a thing, ran it for the first time just now, worked 100% no bugs.
2013-09-07 22:09:45	-->	hrefchef (~BlackHunt@pool-72-73-253-159.cmdnnj.east.verizon.net) has joined #haskell
2013-09-07 22:09:46	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-07 22:09:46	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-07 22:09:48	-->	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has joined #haskell
2013-09-07 22:09:55	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 22:10:45	applicative	khyperia: you are going far beyond our usual advertising slogans ;)
2013-09-07 22:11:05	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-09-07 22:11:27	applicative	these aren't "the very first thing you write workds" but "when you write it once and it works" or something like that
2013-09-07 22:11:44	khyperia	I know it's commonly said bugs in functional are hard to make, but... wow. It's something different to actually experience it.
2013-09-07 22:11:53	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-07 22:11:56	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 22:12:06	erisco	okay maybe I am just not as fortunate
2013-09-07 22:12:09	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-07 22:12:15	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:12:49	applicative	khyperia: but dont you feel like you need a stiff drink after dealing with horrible typechecker thingy or whatever they call it?
2013-09-07 22:13:09	<--	wak (~wak@63.252.64.209) has quit (Quit: Leaving)
2013-09-07 22:13:11	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 22:13:14	khyperia	... what?
2013-09-07 22:13:54	applicative	just kidding
2013-09-07 22:13:58	h4199	I think he nailed all his types too, right khyperia?
2013-09-07 22:14:02	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 22:14:11	khyperia	... right?
2013-09-07 22:14:17	khyperia	Sure. Let's go with sure.
2013-09-07 22:14:37	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Client Quit)
2013-09-07 22:14:48	h4199	did everything compile the first time you tried?
2013-09-07 22:14:53	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 22:14:54	khyperia	yep
2013-09-07 22:15:19	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-07 22:15:30	khyperia	then again, I'm using eclipsefp, which gives pre-compile errors.
2013-09-07 22:15:38	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-07 22:16:32	applicative	ow wow
2013-09-07 22:17:04	 *	applicative thinks, no *way* i'm learning eclipsefp though
2013-09-07 22:17:24	S_J	is there a function split :: Int -> [a] -> [[a]] that splits a lists every X elements?
2013-09-07 22:17:29	hrefchef	So, I'm having some trouble with a haywire library I made. Parts of it cannot see other parts. I drew the directory structure here with the error codes I get: http://i.imgur.com/pBWW0Nh.png
2013-09-07 22:17:45	h4199	Data.List.Split
2013-09-07 22:17:56	erisco	S_J, http://www.haskell.org/hoogle/?hoogle=Int+-%3E+%5Ba%5D+-%3E+%5B%5Ba%5D%5D
2013-09-07 22:18:00	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-07 22:18:12	applicative	boy is that a confusing image hrefchef
2013-09-07 22:18:15	hrefchef	Does anyone know why some source files aren't available to others? I can't figure it out. Files in the "Cannot find" directories work, while other files in the same dir don't work.
2013-09-07 22:18:37	hrefchef	applicative: If you'd rather look at the actual directory, I have it here: https://www.dropbox.com/s/9bx3a04zhq2xeh9/Mirror.tar.gz
2013-09-07 22:18:42	erisco	S_J, does not look to be
2013-09-07 22:18:48	hrefchef	Trying to compile the "Mirror.hs" source file.
2013-09-07 22:18:58	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-07 22:19:08	h4199	S_J http://hackage.haskell.org/packages/archive/split/0.2.2/doc/html/Data-List-Split.html "chunksOf"
2013-09-07 22:19:10	applicative	is Mirror.hs inside the Cookbook directory?
2013-09-07 22:19:18	hrefchef	applicative: It's not.
2013-09-07 22:19:23	applicative	sorry forget that
2013-09-07 22:19:24	erisco	:t chunksOf
2013-09-07 22:19:25	hrefchef	One level above it.
2013-09-07 22:19:25	lambdabot	Int -> [e] -> [[e]]
2013-09-07 22:19:33	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-07 22:19:35	erisco	on Hoogle it says Int -> Text -> [Text]
2013-09-07 22:19:57	-->	adrako (57a1c309@gateway/web/freenode/ip.87.161.195.9) has joined #haskell
2013-09-07 22:20:10	erisco	> chunksOf 2 [1..10]
2013-09-07 22:20:12	lambdabot	  [[1,2],[3,4],[5,6],[7,8],[9,10]]
2013-09-07 22:20:15	applicative	hrefchef: have you considered running cabal init and having done with using ghc directly for make - ing
2013-09-07 22:20:15	erisco	mm okay
2013-09-07 22:20:28	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: qqQ)
2013-09-07 22:20:35	threestrikes	splitAt :: Int -> [a] -> ([a], [a]) -- can this be changed to split an element at a character?
2013-09-07 22:20:39	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:21:00	hrefchef	applicative: I haven't ever used Cabal, but I could look into it. For a library like this a cabal packge is a good idea.
2013-09-07 22:21:07	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-07 22:21:11	erisco	threestrikes, (takeWhile etc, dropWhile etc)
2013-09-07 22:21:12	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a1f:84a4:7d96:c0de:bade:2d20) has joined #haskell
2013-09-07 22:21:18	hrefchef	As a beginner I was afraid cabal would screw this up worse than it is.
2013-09-07 22:21:21	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 22:21:25	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (Quit: WeeChat 0.3.8)
2013-09-07 22:21:26	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-07 22:21:43	applicative	hrefchef: do the modules have the proper names internally? does Cookbook/Ingredients/Lists/Modify.hs call itself Cookbook.Ingredients.Lists.Modify internally?
2013-09-07 22:22:06	h4199	threestrikes, have you looked a break?
2013-09-07 22:22:13	h4199	:t break
2013-09-07 22:22:14	erisco	http://www.haskell.org/hoogle/?hoogle=%28a+-%3E+bool%29+-%3E+%5Ba%5D+-%3E+%28%5Ba%5D%2C%5Ba%5D%29
2013-09-07 22:22:14	lambdabot	(a -> Bool) -> [a] -> ([a], [a])
2013-09-07 22:22:21	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-07 22:22:24	threestrikes	h4199: no I havn't
2013-09-07 22:22:28	hrefchef	applicative: All do, yeah. It used to work from within ghc as well. It's just when a file include it that problems come up.
2013-09-07 22:22:29	erisco	> break (=='a') "haylo world"
2013-09-07 22:22:30	lambdabot	  ("h","aylo world")
2013-09-07 22:22:31	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Read error: Operation timed out)
2013-09-07 22:22:38	erisco	> span (=='a') "haylo world"
2013-09-07 22:22:39	joelteon	:t breakChar
2013-09-07 22:22:39	lambdabot	Not in scope: `breakChar'
2013-09-07 22:22:40	lambdabot	  ("","haylo world")
2013-09-07 22:22:42	threestrikes	@hoogle break
2013-09-07 22:22:42	lambdabot	Prelude break :: (a -> Bool) -> [a] -> ([a], [a])
2013-09-07 22:22:42	lambdabot	Data.List break :: (a -> Bool) -> [a] -> ([a], [a])
2013-09-07 22:22:42	lambdabot	Data.ByteString.Char8 break :: (Char -> Bool) -> ByteString -> (ByteString, ByteString)
2013-09-07 22:22:50	<--	rmrf (~rmrf@183.81.114.18) has quit (Quit: Leaving.)
2013-09-07 22:22:50	erisco	> partition (=='a') "haylo world"
2013-09-07 22:22:52	lambdabot	  ("a","hylo world")
2013-09-07 22:23:06	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-07 22:23:15	hrefchef	I am going to make a cabal package and come back if it doesn't get fixed.
2013-09-07 22:23:22	erisco	letmehooglethatforyou.org where is this? :)
2013-09-07 22:23:26	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-07 22:23:27	<--	elediaz_ (~quassel@92.59.135.148) has quit (Read error: Connection reset by peer)
2013-09-07 22:23:28	erisco	need to raise awareness
2013-09-07 22:24:15	applicative	hrefchef: maybe it's obvious what wrong, but its hard without the directories. If you do cabal init, and try to specify 'executable Mirror' or something, you might find out something...
2013-09-07 22:24:20	geekosaur	please don't. lmgtfy is horribly condescending
2013-09-07 22:24:44	johnw	geekosaur++
2013-09-07 22:24:52	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-07 22:24:54	erisco	what?
2013-09-07 22:25:04	erisco	did not realize it was offensive
2013-09-07 22:25:09	elliott	did you know lambdabot has a lmgtfy command? I made a sad face when I discovered it.
2013-09-07 22:25:16	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Remote host closed the connection)
2013-09-07 22:25:37	 *	hackagebot currency 0.1.0.0 - Types representing standard and non-standard currencies  http://hackage.haskell.org/package/currency-0.1.0.0 (StephenWeber)
2013-09-07 22:25:43	-->	abrahamd (~joey@108-91-85-94.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-07 22:25:47	-->	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has joined #haskell
2013-09-07 22:26:08	h4199	threestrikes: you might also want to look at splitWhen
2013-09-07 22:26:13	h4199	> splitWhen (<0) [1,3,-4,5,7,-9,0,2] == [[1,3],[5,7],[0,2]]
2013-09-07 22:26:15	lambdabot	  True
2013-09-07 22:26:19	applicative	i think erisco meant really that hoogle should be better known
2013-09-07 22:26:24	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Remote host closed the connection)
2013-09-07 22:26:39	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-07 22:26:56	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-07 22:27:00	applicative	certainly the jazzy https://www.fpcomplete.com/hoogle should be better known
2013-09-07 22:27:10	threestrikes	@hoogle splitWhen
2013-09-07 22:27:11	lambdabot	No results found
2013-09-07 22:27:43	h4199	http://hackage.haskell.org/packages/archive/split/0.2.2/doc/html/Data-List-Split.html , third function down
2013-09-07 22:27:49	sm	nice, I'm glad fpcomplete is working on hoogle
2013-09-07 22:27:53	sm	johnw++
2013-09-07 22:28:22	applicative	its so much better now
2013-09-07 22:28:25	johnw	\o/
2013-09-07 22:28:27	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a1f:84a4:7d96:c0de:bade:2d20) has quit (Ping timeout: 264 seconds)
2013-09-07 22:28:34	-->	mgccl (827efffb@gateway/web/freenode/ip.130.126.255.251) has joined #haskell
2013-09-07 22:28:48	applicative	johnw: on the other hand ...
2013-09-07 22:28:59	applicative	... that may not be saying much.
2013-09-07 22:29:07	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 22:29:09	applicative	so i'll say, it's WAY WAY better
2013-09-07 22:29:23	<--	CaptainLex (~kvirc@174-20-73-117.mpls.qwest.net) has quit (Ping timeout: 246 seconds)
2013-09-07 22:30:10	mgccl	I have a list Ord a=>[a], I want to apply a function f only to the maximum of this list. any clever approaches? I'm thinking of zipping this list with the index, and maximum result the index, then I apply f to only that index.
2013-09-07 22:30:27	erisco	:t max
2013-09-07 22:30:28	lambdabot	Ord a => a -> a -> a
2013-09-07 22:30:45	erisco	> foldr max 0 [1..10]
2013-09-07 22:30:46	lambdabot	  10
2013-09-07 22:30:53	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Quit: leaving)
2013-09-07 22:30:59	johnw	i've actually done a bit of work to move Hoogle's database into SQLite, if anyone is interested in taking that over; doesn't look like we're going to be using it for a while
2013-09-07 22:31:03	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-07 22:31:11	erisco	mgccl, is that along the lines of what you want?
2013-09-07 22:31:24	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-07 22:31:44	applicative	mgccl erisco, doesn't he want to find the maximum and change it at the same time?
2013-09-07 22:31:46	h4199	erisco: he wants to apply f to the max, while keeping the list intact
2013-09-07 22:32:08	mgccl	erisco: h4199 got it.
2013-09-07 22:32:31	johnw	that might actually be a correct use of the Tardis monad
2013-09-07 22:32:39	<--	yacks (~py@103.6.159.103) has quit (Read error: Operation timed out)
2013-09-07 22:32:42	applicative	@type maxView
2013-09-07 22:32:42	lambdabot	    Not in scope: `maxView'
2013-09-07 22:32:43	lambdabot	    Perhaps you meant one of these:
2013-09-07 22:32:43	lambdabot	      `IM.maxView' (imported from Data.IntMap),
2013-09-07 22:32:45	johnw	since you need to apply an action in the "past" based on a result from the "future"
2013-09-07 22:32:48	applicative	@type Set.maxView
2013-09-07 22:32:49	lambdabot	Couldn't find qualified module.
2013-09-07 22:32:52	applicative	bah.
2013-09-07 22:33:14	<--	perlite (~perlite@114-36-239-103.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-07 22:33:24	erisco	mgccl, replace the updated element with a map
2013-09-07 22:33:44	merijn	johnw: Does that mean I will have a way to merge my local Hoogle databases and not run out of memory while doing so? :>
2013-09-07 22:33:55	mgccl	johnw: woah... mind blown...
2013-09-07 22:33:57	johnw	merijn: i already have a way for you to do that
2013-09-07 22:33:57	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Client Quit)
2013-09-07 22:34:00	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-07 22:34:01	johnw	merijn: cabal install rehoo
2013-09-07 22:34:05	applicative	mgccl: if you had a Set not a list, maxView myset would return Just (themaximum, therest) so it would just be a question of insert (f themaximum) therest
2013-09-07 22:34:13	-->	Beetny (~Beetny@ppp118-208-26-249.lns20.bne1.internode.on.net) has joined #haskell
2013-09-07 22:34:13	johnw	cd to your hoogle/databases directory
2013-09-07 22:34:17	johnw	run: rehoo -j4 -c64 .
2013-09-07 22:34:27	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-07 22:34:45	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Client Quit)
2013-09-07 22:35:04	mgccl	erisco: ahh that works.
2013-09-07 22:35:20	-->	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has joined #haskell
2013-09-07 22:35:31	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-07 22:35:32	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Quit: Byez...SeeSoon!EnjoyTheSilence)
2013-09-07 22:35:34	erisco	mgccl, it is kind of painfully inefficient but, alas, these are immutable lists
2013-09-07 22:35:59	merijn	johnw: You told me about that before, that still crashed for me last time
2013-09-07 22:36:08	johnw	hmm
2013-09-07 22:36:08	merijn	johnw: Even with really small settings
2013-09-07 22:36:14	mgccl	applicative: i see, I could also write a maxView for lists, (begin, themax, rest)...
2013-09-07 22:36:18	johnw	oh yeah, i kind of remember that
2013-09-07 22:36:39	h4199	mgccl: is the maximum unique? If not how did you want to handle that?
2013-09-07 22:37:14	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-07 22:37:18	erisco	> let { l = [4,3,2,5,4,6,4,3]; sl = sort l; f = (+100); } in f (head sl) : tail sl
2013-09-07 22:37:19	lambdabot	  [102,3,3,4,4,4,5,6]
2013-09-07 22:37:20	applicative	mgccl: i cant see how to manage this in one pass.
2013-09-07 22:37:30	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-07 22:37:30	erisco	mgccl, something like that too, if you can change ordering
2013-09-07 22:39:55	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 22:40:40	mgccl	applicative: 1 pass might be possible... I will return when I figure that out...
2013-09-07 22:40:43	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:41:21	<--	Zamarok_ (~Zamarok@129-2-129-154.wireless.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-07 22:41:40	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 245 seconds)
2013-09-07 22:42:02	applicative	> let rectify f xs = let mx = maximum xs ; g x = if x == mx then f x else x in map g xs in rectify (+1) [2,3,5,5,1] -- is disgusting
2013-09-07 22:42:03	lambdabot	  [2,3,6,6,1]
2013-09-07 22:42:42	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-07 22:42:50	erisco	mgccl, you do not know until the end of the list what the maximum is. at that point, it is too late to pluck it out without another pass
2013-09-07 22:42:56	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-07 22:44:17	erisco	mgccl, unless you always pluck out what is currently the highest value
2013-09-07 22:44:38	erisco	which will reorder your list... so if that is alright, then perhaps :) the mapped element will be tail inserted
2013-09-07 22:44:48	-->	lions (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has joined #haskell
2013-09-07 22:45:04	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-07 22:45:06	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-07 22:45:13	lions	part
2013-09-07 22:45:14	<--	lions (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has left #haskell
2013-09-07 22:45:20	<--	segmond (~segmond@adsl-108-67-101-30.dsl.sfldmi.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-07 22:45:58	<--	s1eepyn4te (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-07 22:46:17	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 22:46:27	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-09-07 22:46:44	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-07 22:47:25	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-07 22:48:08	khyperia	What about this: Do a recursive expansion on the list, keeping track of the maximum as you go through it. Then, when you're unwinding, if the current value equals the maximum (which you return from the recursive call), apply f to it.
2013-09-07 22:48:11	k0001	I feel guilty running `rm -rf cabal-dev; cabal sandbox init` everyehere. cabal-dev has made my life so much pleasant until now! But I guess its time has come...
2013-09-07 22:48:35	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 22:48:39	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-07 22:49:05	-->	gentleben (~gentleben@12.250.97.26) has joined #haskell
2013-09-07 22:49:08	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-07 22:49:15	applicative	k0001: have you found some major things missing yet? i never used cabal-dev
2013-09-07 22:49:28	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 241 seconds)
2013-09-07 22:49:29	applicative	for more than a few minutes
2013-09-07 22:49:41	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-07 22:49:52	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-09-07 22:50:20	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-07 22:50:54	threestrikes	is it possible to go from FilePath to String and back again?
2013-09-07 22:50:58	applicative	the trouble with cabal sandbox init is that i now have 10 completely compiled copies of le monde eduard kmett on my system
2013-09-07 22:51:06	applicative	threestrikes: couldn't be easier ;)
2013-09-07 22:51:10	applicative	id
2013-09-07 22:51:17	applicative	and to go back, id
2013-09-07 22:51:19	h4199	:t FilePath
2013-09-07 22:51:20	lambdabot	Not in scope: data constructor `FilePath'
2013-09-07 22:51:26	h4199	:t Filepath
2013-09-07 22:51:27	lambdabot	Not in scope: data constructor `Filepath'
2013-09-07 22:51:31	h4199	gah
2013-09-07 22:51:32	applicative	threestrikes: do :i Filepath in ghci
2013-09-07 22:51:39	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-07 22:51:39	geekosaur	@src FilePath
2013-09-07 22:51:39	lambdabot	type FilePath = String
2013-09-07 22:51:40	applicative	@info FilePath
2013-09-07 22:51:40	lambdabot	FilePath
2013-09-07 22:51:41	<--	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has quit (Read error: Connection reset by peer)
2013-09-07 22:51:48	applicative	ah there we are
2013-09-07 22:51:52	erisco	mgccl, wanna see my answer?
2013-09-07 22:51:58	applicative	geekosaur++ as usual
2013-09-07 22:52:34	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Client Quit)
2013-09-07 22:52:36	S_J	why do I get [(),()...] when i do mapM print xs ?
2013-09-07 22:52:43	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 260 seconds)
2013-09-07 22:52:48	-->	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has joined #haskell
2013-09-07 22:52:54	h4199	:t print
2013-09-07 22:52:55	applicative	threestrikes: there are other FilePathlike types around, but the usual one is just another name for String.
2013-09-07 22:52:55	lambdabot	Show a => a -> IO ()
2013-09-07 22:52:59	threestrikes	@src getDirectoryContents
2013-09-07 22:52:59	lambdabot	Source not found. Your mind just hasn't been the same since the electro-shock, has it?
2013-09-07 22:53:04	Clint	:t mapM print
2013-09-07 22:53:05	geekosaur	because mapM gives you the result, which in this case you don;t care about. try mapM_
2013-09-07 22:53:05	lambdabot	Show a => [a] -> IO [()]
2013-09-07 22:53:11	h4199	S_J because it returns
2013-09-07 22:53:14	h4199	()
2013-09-07 22:53:19	threestrikes	ic
2013-09-07 22:53:33	h4199	if you don't care about the contents you can just use mapM_
2013-09-07 22:53:39	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-07 22:53:43	h4199	:t mapM_
2013-09-07 22:53:44	lambdabot	Monad m => (a -> m b) -> [a] -> m ()
2013-09-07 22:53:48	threestrikes	@hoogle getDirectoryContents
2013-09-07 22:53:48	lambdabot	System.Directory getDirectoryContents :: FilePath -> IO [FilePath]
2013-09-07 22:54:11	mgccl	erisco: okey. I was just typing up a one pass version of the maximum thing.
2013-09-07 22:54:17	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-07 22:54:21	applicative	> let goo :: FilePath -> FilePath ; goo = reverse in goo "hello"
2013-09-07 22:54:22	lambdabot	  "olleh"
2013-09-07 22:54:25	erisco	mgccl, yeah that is what I made too
2013-09-07 22:54:36	geekosaur	even if @src had getDirectoryContents it wouldn;t be very enlightening since it's just a wrapper around FFI calls to the dirent functions
2013-09-07 22:54:40	mgccl	erisco: http://lpaste.net/92714
2013-09-07 22:54:50	geekosaur	(on posixlikes at least)
2013-09-07 22:55:16	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-07 22:55:19	erisco	mgccl, http://lpaste.net/92715
2013-09-07 22:55:30	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-07 22:55:38	-->	testingok (~benny@99-46-210-178.lightspeed.hstntx.sbcglobal.net) has joined #haskell
2013-09-07 22:55:59	<--	d3f (~gnu@ip-static-94-242-252-67.as5577.net) has quit (Quit: WeeChat 0.4.1)
2013-09-07 22:56:03	<--	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has quit (Read error: Operation timed out)
2013-09-07 22:56:15	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-07 22:56:16	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-07 22:56:28	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 22:56:29	-->	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has joined #haskell
2013-09-07 22:57:10	-->	maxiepoo_ (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-07 22:57:15	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-07 22:57:15	td123	found out the problem
2013-09-07 22:57:15	--	maxiepoo_ is now known as maxiepoo
2013-09-07 22:57:21	td123	cabal does not run hsc2hs
2013-09-07 22:57:24	td123	doh
2013-09-07 22:57:28	k0001	applicative: not really. I mean, I'm not a `cabal-dev` expert; all I did was `cabal-dev {configure,build,install,install-deps}`, and then I used it together with `cabal-meta` when I needed to install unreleased versions of some dependencies (`cabal-meta --dev install`), and that's all. So far, cabal sandboxes solve all those problems for me.
2013-09-07 22:57:41	-->	_d3f (~gnu@46.183.216.234) has joined #haskell
2013-09-07 22:58:18	mgccl	erisco: I see, so if order doesn't matter than this works well.
2013-09-07 22:58:24	johnw	mgccl: https://gist.github.com/6479230
2013-09-07 22:58:38	erisco	mgccl, well there isn't anything else you can do for a one pass
2013-09-07 22:58:48	erisco	mgccl, for the reason I said
2013-09-07 22:58:51	DigitalKiwi	td123: for shame
2013-09-07 22:59:18	td123	oh hey DK, didn't know you hung out in #hs
2013-09-07 22:59:24	johnw	that is single pass
2013-09-07 22:59:30	-->	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-07 22:59:39	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-07 22:59:44	johnw	you don't even need Tardis for that, just the reversed state monad
2013-09-07 22:59:48	<--	testingok (~benny@99-46-210-178.lightspeed.hstntx.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-07 22:59:55	<--	simukis_ (~simukis_@78.63.244.234) has quit (Ping timeout: 264 seconds)
2013-09-07 22:59:59	jkoppel	"cabal haddock --executables" keeps failing with "haddock: failed to parse haddock prologue from file: dist/doc/html/myprogram/myprogram/haddock-prolog84346.txt"
2013-09-07 23:00:02	DigitalKiwi	td123: someday I may even learn :)
2013-09-07 23:00:13	-->	SBox (~stefano@unaffiliated/sbox) has joined #haskell
2013-09-07 23:00:20	erisco	johnw, I am unconvinced... how does it operate?
2013-09-07 23:00:21	jkoppel	Why might it be doing that?
2013-09-07 23:00:23	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 23:00:55	johnw	erisco: it uses the stack as a virtual list, which as it collapses back down, carries the maximum value back through all the previous iterations
2013-09-07 23:01:00	johnw	so I think effectively it's two-pass
2013-09-07 23:01:12	merijn	Why do I always cut myself on the bleeding edge :(
2013-09-07 23:01:13	johnw	one through the list on the heap, and one through this virtual list on the stack
2013-09-07 23:01:22	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-07 23:01:26	-->	shft_ (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-07 23:01:26	<--	shft_ (~shft@94.41.72.34.dynamic.ufanet.ru) has left #haskell
2013-09-07 23:01:30	johnw	but you get to write the code as if it was one pass, and in fact the code can only *observe* a single pass
2013-09-07 23:01:43	erisco	two passes is two passes =\
2013-09-07 23:01:44	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-07 23:01:46	mgccl	maybe we can define "effective one pass" if this code use O(1) extra memory.
2013-09-07 23:01:58	johnw	erisco: operationally, yes
2013-09-07 23:02:02	erisco	well
2013-09-07 23:02:09	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 23:02:11	johnw	the nice thing about using the reversed state monad here is that the code itself cannot take advantage of two passes
2013-09-07 23:02:28	johnw	you get to restrict what the code can do to exactly what you mean
2013-09-07 23:02:34	merijn	johnw: That seems inefficient, you can do the thing in a single pass
2013-09-07 23:02:36	erisco	granted, but I'm not sure what was the effect mgccl was after ... an interesting idea though
2013-09-07 23:02:50	johnw	merijn: how?
2013-09-07 23:03:10	merijn	oh, hmm, maybe you're right
2013-09-07 23:03:32	merijn	Because'd you need to compare against the result to see if you're currently at the place to update
2013-09-07 23:03:37	johnw	right
2013-09-07 23:03:50	johnw	the best you can do is to maintain an index for the largest thing you've seen so far, and then use (!!)
2013-09-07 23:03:53	applicative	did mgccl 's other function work, apart from glaring nontotality; I didnt notice the critique
2013-09-07 23:03:56	erisco	mgccl, if you reverse, that is a pass over the list
2013-09-07 23:03:59	johnw	at least then the second pass doesn't always need to go all the way to the end
2013-09-07 23:04:04	merijn	gah, I fixed pandoc to do what I want, only to run into Hakyll not supporting the newest pandoc version :(
2013-09-07 23:04:29	johnw	let me benchmark this tardis version against naive two-pass
2013-09-07 23:04:52	mgccl	erisco: yes, I'm now convinced there is no way to get over the 2 pass...
2013-09-07 23:05:32	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 263 seconds)
2013-09-07 23:05:33	erisco	mgccl, not for arbitrary list lengths. there is of course an algorithm for fixed lengths
2013-09-07 23:05:39	<--	ulfdoz (~mary@p5B38BBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-07 23:05:46	khyperia	but there is a way to have the second pass be "as you're coming back up from the end of the list"
2013-09-07 23:07:06	erisco	and if you can give up order preservation... well hey :)
2013-09-07 23:07:09	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-07 23:07:48	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 257 seconds)
2013-09-07 23:07:48	<--	RylandAlmanza (~RylandAlm@unaffiliated/rylandalmanza) has quit (Ping timeout: 240 seconds)
2013-09-07 23:08:18	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-09-07 23:08:53	<--	minimalis (~ben@unaffiliated/minimalis) has left #haskell
2013-09-07 23:09:36	<--	bethebunny (~stefannl@216.239.45.222) has quit (Ping timeout: 245 seconds)
2013-09-07 23:09:43	johnw	ok, the tardis version is crazy faster
2013-09-07 23:09:48	johnw	7us vs. 418us
2013-09-07 23:09:55	johnw	oh, wait
2013-09-07 23:09:58	johnw	7us vs. 418ns
2013-09-07 23:10:00	johnw	not faster
2013-09-07 23:10:05	johnw	crazy slower
2013-09-07 23:10:14	johnw	like 20x slower
2013-09-07 23:10:26	johnw	trying with -O2
2013-09-07 23:10:35	johnw	same
2013-09-07 23:10:38	 *	hackagebot currency 0.2.0.0 - Types representing standard and non-standard currencies  http://hackage.haskell.org/package/currency-0.2.0.0 (StephenWeber)
2013-09-07 23:10:56	-->	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has joined #haskell
2013-09-07 23:11:07	erisco	johnw, what about the one pass? :)
2013-09-07 23:11:14	johnw	where was that code?
2013-09-07 23:11:18	erisco	http://lpaste.net/92715
2013-09-07 23:11:27	erisco	we can see if giving up order is a worthwhile tradeoff
2013-09-07 23:12:17	johnw	tardis 4.7us naive 267ns mapmax 167ns
2013-09-07 23:12:45	erisco	what is naive? does it use !!?
2013-09-07 23:12:49	johnw	btw, my naive is: let x = maximum xs in map (\y -> if y == x then f y else y) xs
2013-09-07 23:12:59	erisco	ah
2013-09-07 23:13:01	johnw	since tardis also applies the function to equal maximum members
2013-09-07 23:13:06	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-07 23:13:23	-->	l1ons (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has joined #haskell
2013-09-07 23:13:36	-->	osa1 (~omer@32.137.73.148) has joined #haskell
2013-09-07 23:13:38	erisco	so the one pass saves you the time of a cache miss roughly
2013-09-07 23:13:48	<--	osa1 (~omer@32.137.73.148) has quit (Client Quit)
2013-09-07 23:13:49	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-07 23:13:51	erisco	not a huge win
2013-09-07 23:14:19	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 264 seconds)
2013-09-07 23:14:36	johnw	oh well, that's a bummer that tardis is so much slower :(
2013-09-07 23:14:48	johnw	back to work
2013-09-07 23:14:54	erisco	I suppose ghc couldn't grind through its abstractions?
2013-09-07 23:15:12	monochrom	wait, tardis can afford to be slower because it can always go back in time
2013-09-07 23:15:18	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-07 23:15:46	<--	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-07 23:16:03	johnw	erisco: it piles on the lambdas, unfortunately, and in this case I don't think it can elide them
2013-09-07 23:16:10	monochrom	also, latest Cartesian Closed Comics: http://ro-che.info/ccc/21.html
2013-09-07 23:16:52	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-09-07 23:16:59	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 260 seconds)
2013-09-07 23:17:29	johnw	heh
2013-09-07 23:19:17	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-07 23:19:29	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Quit: Leaving)
2013-09-07 23:19:45	<--	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has quit (Ping timeout: 268 seconds)
2013-09-07 23:20:01	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-07 23:20:22	<--	determinant_ (~determina@183.83.58.77) has quit (Ping timeout: 268 seconds)
2013-09-07 23:21:55	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-07 23:22:15	-->	mavzuna (~mavzuna@unaffiliated/mavzuna) has joined #haskell
2013-09-07 23:22:34	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-07 23:23:03	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-07 23:23:21	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-07 23:23:45	donri	say once that happens though, would it break anything to say sequence = sequenceA using the Applicative constraint?
2013-09-07 23:24:05	-->	ttuegel (~quassel@172-2-80-62.lightspeed.dctril.sbcglobal.net) has joined #haskell
2013-09-07 23:24:17	<--	jibi (~jibi@77.42.48.122) has quit (Client Quit)
2013-09-07 23:24:33	donri	i sort of wish lift was called fmap and we could have lift2 = liftA2 etc
2013-09-07 23:24:35	<--	kuribas (~user@d54C430B0.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-07 23:24:41	<--	sxn (~sxn@mnch-5d86c13b.pool.mediaWays.net) has quit (Ping timeout: 268 seconds)
2013-09-07 23:24:45	donri	uh, fmap was called lift
2013-09-07 23:25:14	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Quit: Leaving)
2013-09-07 23:25:47	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-07 23:26:47	erisco	can you create a circular reference in Haskell?
2013-09-07 23:27:14	erisco	seems like any attempt would just result in a copy where the circle would normally close
2013-09-07 23:27:18	monochrom	yes. like this? x = 0:x
2013-09-07 23:27:38	S_J	so you can use record syntax to get getters. what about setters?
2013-09-07 23:27:41	bss03	cycle l = l : cycle l
2013-09-07 23:27:44	bss03	@src cycle
2013-09-07 23:27:44	lambdabot	cycle [] = undefined
2013-09-07 23:27:44	lambdabot	cycle xs = xs' where xs' = xs ++ xs'
2013-09-07 23:27:59	pavonia	see also http://www.haskell.org/haskellwiki/Tying_the_Knot
2013-09-07 23:27:59	geekosaur	also see http://www.haskell.org/haskellwiki/Tying_the_Knot
2013-09-07 23:27:59	donri	S_J: you get record update syntax, but that's it
2013-09-07 23:28:01	geekosaur	heh
2013-09-07 23:28:02	erisco	S_J, records are immutable... but for instance you can do      myrecord { myField = newValue }
2013-09-07 23:28:08	bss03	S_J you can use record update syntax.
2013-09-07 23:28:49	monochrom	circular binary tree (assume suitable data declaration): t = Branch t t  (it's t's all the way down)
2013-09-07 23:29:06	<--	SBox (~stefano@unaffiliated/sbox) has left #haskell ("Ex-Chat")
2013-09-07 23:29:47	<--	tncardoso (~thiago@177.97.212.46) has quit (Remote host closed the connection)
2013-09-07 23:29:53	erisco	monochrom, across scopes though?
2013-09-07 23:29:55	bss03	Infitie Rose Tree, very Knotty: t = cycle [t]
2013-09-07 23:30:02	donri	@src repeat
2013-09-07 23:30:03	lambdabot	repeat x = xs where xs = x : xs
2013-09-07 23:30:11	donri	might've been what you wanted, bss03
2013-09-07 23:30:11	monochrom	what is "across scope"?
2013-09-07 23:30:39	 *	hackagebot data-fresh 0.2013.250.1 - Interface and functor transformers for fresh values  http://hackage.haskell.org/package/data-fresh-0.2013.250.1 (StijnVanDrongelen)
2013-09-07 23:30:55	monochrom	better yet, what is the actual concrete thing you want?
2013-09-07 23:30:56	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-07 23:31:28	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-09-07 23:32:06	DigitalKiwi	monochrom: http://ro-che.info/ccc/13.html hahaha
2013-09-07 23:32:35	monochrom	yeah, CCC is fun
2013-09-07 23:32:46	-->	CaptainK (~CaptainK@181.179.46.229) has joined #haskell
2013-09-07 23:32:54	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-07 23:33:00	<--	juliohm (~julio@unaffiliated/juliohm) has quit (Quit: Leaving)
2013-09-07 23:34:01	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-07 23:36:14	<--	hrehf (~s@krlh-4d02bb17.pool.mediaWays.net) has quit (Quit: bfg)
2013-09-07 23:36:29	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-07 23:36:30	-->	banannagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-07 23:36:38	<--	AleXoundOS (~AleXoundO@broadband-46-188-47-142.2com.net) has quit (Remote host closed the connection)
2013-09-07 23:37:03	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 260 seconds)
2013-09-07 23:37:35	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-07 23:37:51	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-07 23:38:49	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-07 23:38:52	<--	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has quit (Ping timeout: 264 seconds)
2013-09-07 23:38:53	<--	visof (~visof@41.130.70.208) has quit (Excess Flood)
2013-09-07 23:39:16	-->	visof (~visof@41.130.70.208) has joined #haskell
2013-09-07 23:39:28	<--	juiko_ (~juiko@pc-141-163-120-200.cm.vtr.net) has quit (Ping timeout: 264 seconds)
2013-09-07 23:39:29	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 268 seconds)
2013-09-07 23:39:34	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-07 23:39:51	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-07 23:40:12	-->	Gaelan (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-07 23:40:17	DigitalKiwi	03 was funny I like the halting problem
2013-09-07 23:41:26	-->	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-07 23:42:29	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 23:42:50	<--	rfw (rfw@thor.rfw.name) has quit (Quit: WeeChat 0.3.7)
2013-09-07 23:43:09	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-07 23:43:33	<--	valyagolev (~valyagole@109.205.248.1) has quit (Client Quit)
2013-09-07 23:45:00	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 23:45:07	-->	Rc43 (4fad5042@gateway/web/freenode/ip.79.173.80.66) has joined #haskell
2013-09-07 23:45:17	-->	Platyhelminth (~Platyhelm@unaffiliated/platyhelminth) has joined #haskell
2013-09-07 23:45:34	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 23:46:27	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-07 23:46:33	Zenol	http://ro-che.info/ccc/21.html haha this one is really funny :)
2013-09-07 23:48:19	Rc43	Hi, guys.
2013-09-07 23:48:22	-->	s1eepyn4te (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-07 23:48:25	--	hdevalence|away is now known as hdevalence
2013-09-07 23:48:27	Rc43	Can anybody look my question? http://stackoverflow.com/questions/18678197/haskell-ghc-cps-and-performace-time
2013-09-07 23:48:40	Rc43	(Please answer on SO, not here.)
2013-09-07 23:50:15	pavonia	What is CPS?
2013-09-07 23:50:32	DigitalKiwi	child protective services
2013-09-07 23:50:37	<--	Gaelan (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Quit: Bye!)
2013-09-07 23:50:45	geekosaur	continuation passing style?
2013-09-07 23:50:49	Zenol	continuation passing style.
2013-09-07 23:50:50	bss03	Continuation Passing Style
2013-09-07 23:51:06	Taneb	continuation passing Style!
2013-09-07 23:51:06	-->	Luke2 (~luke@c-67-184-182-187.hsd1.il.comcast.net) has joined #haskell
2013-09-07 23:51:24	<--	l1ons (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has left #haskell ("WeeChat 0.4.1")
2013-09-07 23:51:25	donri	collaborative pseudonym studies
2013-09-07 23:51:28	DigitalKiwi	not on first page of google == doesn't exist
2013-09-07 23:51:59	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (Ping timeout: 246 seconds)
2013-09-07 23:52:32	-->	Ox6abe (~ox6abe@tx-74-5-99-114.dhcp.embarqhsd.net) has joined #haskell
2013-09-07 23:52:53	monochrom	donri wins :)
2013-09-07 23:52:59	--	travisb is now known as tabemann
2013-09-07 23:53:00	Rc43	DigitalKiwi, I think it is because of google's user customizations. I have CPS on the first page (think because I often enter FP queries).
2013-09-07 23:53:29	Rc43	DigitalKiwi, (I mean continuation pasing style meaning of CPS)
2013-09-07 23:53:53	<--	matheus23 (~quassel@p4FDF2504.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-07 23:53:54	DigitalKiwi	so you're saying I have child protective services on first page because I abuse my children!? D:
2013-09-07 23:54:03	-->	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has joined #haskell
2013-09-07 23:54:09	<--	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has quit (Ping timeout: 250 seconds)
2013-09-07 23:54:23	ski	Clockmaker Pressor Stockfish
2013-09-07 23:54:47	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-07 23:54:58	<--	gentleben (~gentleben@12.250.97.26) has quit (Quit: gentleben)
2013-09-07 23:55:04	<--	Luke2 (~luke@c-67-184-182-187.hsd1.il.comcast.net) has quit (Client Quit)
2013-09-07 23:55:10	monochrom	I am not convinced that tail recursion and avoiding stack etc etc are efficiency measures.
2013-09-07 23:55:23	-->	Luke (~luke@c-67-184-182-187.hsd1.il.comcast.net) has joined #haskell
2013-09-07 23:55:23	--	Luke is now known as Luke2
2013-09-07 23:55:24	Rc43	DigitalKiwi, :D
2013-09-07 23:55:28	monochrom	"avoiding stack" = "blowing heap"
2013-09-07 23:55:38	<--	adrako (57a1c309@gateway/web/freenode/ip.87.161.195.9) has quit (Quit: Page closed)
2013-09-07 23:56:07	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-07 23:56:11	tabemann	the reason to avoid the stack is because generally you have far more heap than you have stack available
2013-09-07 23:56:19	Rc43	monochrom, doesn't tail recursion use stack instead of heap? Why are you talking about avoiding stack then?
2013-09-07 23:56:27	<--	Luke2 (~luke@c-67-184-182-187.hsd1.il.comcast.net) has quit (Client Quit)
2013-09-07 23:56:38	monochrom	no
2013-09-07 23:56:42	Rc43	monochrom, aaah, you mean stack frames replacement
2013-09-07 23:56:51	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-07 23:56:51	tabemann	and as for tail recursion, I have to disagree (even though laziness in Haskell often obviates tail recursion)
2013-09-07 23:56:54	-->	Luke (~luke@c-67-184-182-187.hsd1.il.comcast.net) has joined #haskell
2013-09-07 23:56:54	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has left #haskell
2013-09-07 23:57:49	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-07 23:57:50	Saizan	there are lot of variables to consider in a lazy language, the only general answer is "it depends"
2013-09-07 23:57:55	<--	artyomkazak (~artyomkaz@94.25.229.91) has quit (Ping timeout: 245 seconds)
2013-09-07 23:57:58	-->	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has joined #haskell
2013-09-07 23:58:09	Saizan	also in ghc the stack is really only artifically limited
2013-09-07 23:58:25	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-07 23:58:41	monochrom	we are recently starting to talk about raising or removing the stack limit, because it has been set artificially low
2013-09-07 23:58:57	Saizan	but tail recursion is still nice when you'd be strict on the result of the recursive call anyway, otherwise it can make things slower
2013-09-07 23:59:01	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-07 23:59:11	<--	s1eepyn4te (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-07 23:59:15	monochrom	(a program that uses 8M stack and 800M heap is not more efficient than a program that uses 800M stack and 8M heap)
2013-09-07 23:59:19	Saizan	(infinitely slower sometimes)
2013-09-07 23:59:35	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-08 00:00:09	monochrom	as for tail recursions, some tail recursions give you O(1)-space algorithms, counting both stack and heap. if you can do that, that is cool, I have no complaint.
2013-09-08 00:00:10	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-08 00:00:20	ski	tail recursion is sometimes useful for encoding an algorithm as an iterative process
2013-09-08 00:00:33	ski	there can also be other ways of achieving this
2013-09-08 00:00:39	 *	hackagebot openexchangerates 0.1.0.0 - Fetch exchange rates from OpenExchangeRates.org  http://hackage.haskell.org/package/openexchangerates-0.1.0.0 (StephenWeber)
2013-09-08 00:00:44	monochrom	but some other tail recursions, notably CPS techniques, merely change O(n)-stack to O(n)-heap. I question you what have you saved.
2013-09-08 00:00:46	-->	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has joined #haskell
2013-09-08 00:00:51	ski	indeed
2013-09-08 00:01:26	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Client Quit)
2013-09-08 00:01:28	-->	red_ (~red@150.108.239.39) has joined #haskell
2013-09-08 00:01:43	jmcarthur	apart from stack overflows, of course, when your runtime artificially limits you
2013-09-08 00:01:45	ski	(so in those cases you'd not get an iterative process, even though using tail recurtsion)
2013-09-08 00:01:58	ski	(s/recurtsion/recursion/)
2013-09-08 00:02:04	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-08 00:02:11	Saizan	yeah, CPS can still boost performance, but in other ways
2013-09-08 00:02:13	monochrom	use +RTS -K800M -M8M -RTS to obtain heap overflow faster
2013-09-08 00:02:17	 *	ski nods
2013-09-08 00:02:19	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 00:02:38	ski	(e.g. you can encode semi-tail-calls via CPS)
2013-09-08 00:02:50	red_	what is the best way to get two numbers out of the following string "33 22" ?
2013-09-08 00:02:57	-->	maximveksler (~maximveks@64-71-17-180.static.wiline.com) has joined #haskell
2013-09-08 00:03:07	monochrom	see also http://ghc.haskell.org/trac/ghc/ticket/8189
2013-09-08 00:03:33	Saizan	> map read . words $ "33 22" :: [Int]
2013-09-08 00:03:35	lambdabot	  [33,22]
2013-09-08 00:03:45	<--	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-09-08 00:03:56	Saizan	that's going to fail horribly if the string is malformed though
2013-09-08 00:04:03	Saizan	> map read . words $ "3z 22" :: [Int]
2013-09-08 00:04:04	red_	i know it's not 'type conversion' but is it bad practice to use ::[Int] within a fcn?
2013-09-08 00:04:04	lambdabot	  [*Exception: Prelude.read: no parse
2013-09-08 00:04:05	monochrom	and my message http://www.haskell.org/pipermail/haskell-cafe/2013-August/108580.html
2013-09-08 00:04:26	Rc43	Saizan, how does it boost performance?
2013-09-08 00:04:34	Saizan	red_: nope, sometimes you just need it
2013-09-08 00:04:44	red_	k thanks
2013-09-08 00:04:55	ski	> do let {s0 = "33 22"}; (m,s1) <- (reads :: ReadS Int) s0; (n,s2) <- (reads :: ReadS Int) s1; return ((m,n),s2)
2013-09-08 00:04:56	lambdabot	  [((33,22),"")]
2013-09-08 00:05:03	<--	Baughn (~svein@tsugumi.brage.info) has quit (Ping timeout: 260 seconds)
2013-09-08 00:05:10	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (Ping timeout: 240 seconds)
2013-09-08 00:05:23	--	banannagram is now known as bananagram
2013-09-08 00:05:34	Saizan	Rc43: for example it can help reassociating uses of (>>=) to the right, which helps a lot for free monads
2013-09-08 00:05:45	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-08 00:06:00	ski	> replicateM 2 (StateT (reads :: ReadS Int)) `runStateT` "33 22"
2013-09-08 00:06:01	lambdabot	  [([33,22],"")]
2013-09-08 00:06:18	ski	red_ : is one alternative
2013-09-08 00:06:22	-->	Baughn (~svein@tsugumi.brage.info) has joined #haskell
2013-09-08 00:06:58	monochrom	CPS or codensity really reduces costs of free monads. in some cases from O(n^2) to O(n). that is a good use.
2013-09-08 00:07:00	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (Ping timeout: 256 seconds)
2013-09-08 00:07:04	red_	ski: state monad is not my friend yet
2013-09-08 00:07:16	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-09-08 00:07:33	ski	red_ : using type ascriptions are not bad practice. sometimes the context isn't enough to determine what some intermediate type should be, so a type ascription can tell the system what you intended
2013-09-08 00:07:42	<--	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has quit (Excess Flood)
2013-09-08 00:07:54	-->	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has joined #haskell
2013-09-08 00:08:05	ski	red_ : note that those are not "casts" nor "coercions"; you can't use them to assign a type to an expression that the system wouldn't have allowed anyway
2013-09-08 00:08:16	ski	red_ : ok, so read the list monad version (first one)
2013-09-08 00:08:17	<--	RThinker1 (~yegor@77.47.204.159) has quit (Read error: Operation timed out)
2013-09-08 00:08:38	ski	`reads' returns a list of possible parses (in most cases, there's either one parse, or no parse (so parse error))
2013-09-08 00:09:11	<--	jkoppel (~jkoppel@c-98-234-184-221.hsd1.ca.comcast.net) has quit (Quit: jkoppel)
2013-09-08 00:09:51	red_	readS is a context for Int, where is it defined? what is it?
2013-09-08 00:10:12	ski	(if you prefer, you can rewrite the former version as a list comprehension)
2013-09-08 00:10:32	ski	`readS' is one thing (a function). `ReadS' is another thing (a type)
2013-09-08 00:10:44	ski	@type readS
2013-09-08 00:10:45	lambdabot	    Not in scope: `readS'
2013-09-08 00:10:45	lambdabot	    Perhaps you meant one of these:
2013-09-08 00:10:45	lambdabot	      `read' (imported from Prelude), `reads' (imported from Prelude)
2013-09-08 00:10:46	bss03	@hoogle ReadS
2013-09-08 00:10:46	lambdabot	Prelude type ReadS a = String -> [(a, String)]
2013-09-08 00:10:46	lambdabot	Text.ParserCombinators.ReadP type ReadS a = String -> [(a, String)]
2013-09-08 00:10:47	lambdabot	Text.Read type ReadS a = String -> [(a, String)]
2013-09-08 00:10:49	ski	er
2013-09-08 00:10:50	ski	@type reads
2013-09-08 00:10:51	-->	DanielDiaz (~dhelta@80.31.224.3) has joined #haskell
2013-09-08 00:10:51	lambdabot	Read a => ReadS a
2013-09-08 00:10:55	-->	azcodex (~azcodex_@202.red-80-29-72.adsl.static.ccgg.telefonica.net) has joined #haskell
2013-09-08 00:10:57	ski	which is the same as
2013-09-08 00:11:05	geekosaur	http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/haskell2010-1.1.1.0/Prelude.html#t:ReadS
2013-09-08 00:11:06	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-09-08 00:11:07	ski	  reads :: Read a => String -> [(s,String)]
2013-09-08 00:11:10	red_	yeah I meant the type
2013-09-08 00:11:18	ski	given the definition of the type `ReadS'
2013-09-08 00:11:29	ski	  type ReadS a = String -> [(a, String)]  -- as `hoogle' gave above
2013-09-08 00:11:51	-->	T__T (~kw3st@c-24-23-132-165.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 00:12:18	ski	the intension is that the function gets a string of all input, except the one to the left "of the current position" (which has already been consumed)
2013-09-08 00:12:39	ski	and it'll return a parsed value of type `a', and the rest of the input string, so that parsing can continue with that
2013-09-08 00:12:54	<--	amatsu (~amatsumag@125.63.54.35) has quit (Ping timeout: 248 seconds)
2013-09-08 00:13:11	ski	however, because a parse can fail (and in general, succeed in more than one way), we give a list of pairs of `a'-result and rest-of-string
2013-09-08 00:13:36	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-08 00:14:00	-->	Ceryn (~Ceryn@petardo.dk) has joined #haskell
2013-09-08 00:14:38	<--	CaptainK (~CaptainK@181.179.46.229) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 00:15:00	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-08 00:15:03	red_	ski: thanks, very helpful'
2013-09-08 00:15:34	monochrom	red_: see my http://www.vex.net/~trebla/haskell/reads.xhtml
2013-09-08 00:16:42	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 00:16:54	<--	eyck (~eyck@nat08.nowanet.pl) has quit (Ping timeout: 264 seconds)
2013-09-08 00:17:08	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-08 00:17:28	-->	eyck (~eyck@nat08.nowanet.pl) has joined #haskell
2013-09-08 00:17:35	erisco	seems tedious to coalesce a list of records [Record]. Say I want to merge all Record where myField has the same property
2013-09-08 00:17:41	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 00:17:51	-->	otulp_ (~otulp@cm-84.209.90.171.getinternet.no) has joined #haskell
2013-09-08 00:18:18	erisco	foldr (aggregateF) defaultRecord . groupBy (propEq) . sortBy (propCmp)
2013-09-08 00:18:23	<--	shintah (bebble@h-123-173-252.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-09-08 00:18:44	-->	cinema (~cinema@dan75-1-89-82-138-66.dsl.sta.abo.bbox.fr) has joined #haskell
2013-09-08 00:19:07	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 00:19:14	<--	red_ (~red@150.108.239.39) has left #haskell
2013-09-08 00:19:30	<--	briennetheblue (1f3407b4@gateway/web/freenode/ip.31.52.7.180) has quit (Quit: Page closed)
2013-09-08 00:19:50	erisco	I can take out propEq as a case of propCmp
2013-09-08 00:19:53	-->	chrisdotcode__ (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 00:20:00	<--	chrisdotcode__ (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-08 00:20:08	<--	otulp (~otulp@cm-84.209.82.197.getinternet.no) has quit (Ping timeout: 260 seconds)
2013-09-08 00:20:08	--	otulp_ is now known as otulp
2013-09-08 00:20:16	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-08 00:20:17	<--	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has quit (Read error: Connection reset by peer)
2013-09-08 00:20:20	-->	chrisdotcode__ (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 00:22:19	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-08 00:22:19	ski	@let readSum :: ReadS Expr; readSum = \s0 -> [(n,s2) | (m,s1) <- reads s0 , (n,s2) <- return' (fromInteger m) s1 ] where return' m = \s1 -> (m,s1) : [(o,s4) | ("+",s2) <- lex s1 , (n,s3) <- readSum s2 , (o,s4) <- return' (m + n) s3 ]
2013-09-08 00:22:20	lambdabot	 Defined.
2013-09-08 00:22:24	erisco	:t foldr'
2013-09-08 00:22:25	lambdabot	    Not in scope: foldr'
2013-09-08 00:22:25	lambdabot	    Perhaps you meant one of these:
2013-09-08 00:22:25	lambdabot	      BS.foldr' (imported from Data.ByteString),
2013-09-08 00:22:28	ski	> readSum "2 + 3 + 4"
2013-09-08 00:22:29	erisco	:t foldr2
2013-09-08 00:22:30	lambdabot	    Not in scope: `foldr2'
2013-09-08 00:22:31	lambdabot	    Perhaps you meant one of these:
2013-09-08 00:22:31	lambdabot	      `foldr' (imported from Data.List),
2013-09-08 00:22:32	lambdabot	  [(2," + 3 + 4"),(2 + 3," + 4"),(2 + 3 + 4,""),(2 + (3 + 4),"")]
2013-09-08 00:22:43	ski	> [n | (n,"") <- readSum "2 + 3 + 4"]
2013-09-08 00:22:48	lambdabot	  [2 + 3 + 4,2 + (3 + 4)]
2013-09-08 00:22:49	erisco	> foldr1 (+) [1,2,3]
2013-09-08 00:22:50	ski	> [n | (n,"") <- readSum "2 + 3 + 5 + 7"]
2013-09-08 00:22:51	lambdabot	  6
2013-09-08 00:22:53	lambdabot	  [2 + 3 + 5 + 7,2 + 3 + (5 + 7),2 + (3 + 5) + 7,2 + (3 + 5 + 7),2 + (3 + (5 ...
2013-09-08 00:23:11	ski	oh, red_ left ..
2013-09-08 00:23:57	ski	> length [n | (n,"") <- readSum "2 + 3 + 5 + 7"]
2013-09-08 00:24:01	lambdabot	  5
2013-09-08 00:24:30	<--	_d3f (~gnu@46.183.216.234) has quit (Ping timeout: 268 seconds)
2013-09-08 00:24:30	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-08 00:24:46	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-08 00:25:32	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-09-08 00:25:37	-->	Demos (~Demos@westquad-149252.reshall.umich.edu) has joined #haskell
2013-09-08 00:26:11	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-09-08 00:26:59	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 260 seconds)
2013-09-08 00:27:00	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-08 00:30:18	-->	red_ (~red@150.108.239.39) has joined #haskell
2013-09-08 00:31:07	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-09-08 00:31:10	red_	ok another easy question ? i want to apply a fcn relating the first and second elements in a [[Int]] like [[1,2],[2,3],[4,4]]
2013-09-08 00:31:15	red_	i tried lambdas but it did not work
2013-09-08 00:31:17	<--	tuxie_ (~paranoid@g225065226.adsl.alicedsl.de) has quit (Read error: Operation timed out)
2013-09-08 00:31:45	red_	> map (\x -> \y -> x -y) [[1,2],[3,4]]
2013-09-08 00:31:46	NemesisD	i'm comparing 2 algorithms 1 that uses a parallel strat and one that doesn't using criterion. i'm using 'nf' on the sequential one to fully evaluate the result
2013-09-08 00:31:46	lambdabot	  No instance for (Data.Typeable.Internal.Typeable t0)
2013-09-08 00:31:46	lambdabot	   arising from a use ...
2013-09-08 00:31:48	<--	maximveksler (~maximveks@64-71-17-180.static.wiline.com) has quit (Ping timeout: 260 seconds)
2013-09-08 00:32:22	leroux	> map (\[x, y] -> x - y) [[1,2],[3,4]]
2013-09-08 00:32:23	lambdabot	  [-1,-1]
2013-09-08 00:32:27	red_	durrrrrr
2013-09-08 00:32:29	red_	thank you
2013-09-08 00:32:31	<--	schlaftier (~daniel@5.158.182.23) has quit (Ping timeout: 268 seconds)
2013-09-08 00:32:37	NemesisD	but on the parallel one i'm using parMap rdeepseq $ thefunction, am i correct that i don't need to use 'nf' from criterion in thise canse and whnf will do?
2013-09-08 00:32:41	-->	anRch (~markmilli@ip-64-134-47-159.public.wayport.net) has joined #haskell
2013-09-08 00:32:51	leroux	No problem, red_.
2013-09-08 00:33:00	NemesisD	i'm thinking that nf is double-evaluating the result and inflating the runtime
2013-09-08 00:33:01	<--	Caztiel (~me@unaffiliated/caztiel) has quit (Ping timeout: 256 seconds)
2013-09-08 00:33:52	NemesisD	and perhaps a better quesion: is there a smarter way to tell if my benchmark is actually fully evaluating my data?
2013-09-08 00:34:06	ski	red_ : an example :
2013-09-08 00:34:14	ski	> [n | (n,"") <- readSum "2 + 3 + 5"]
2013-09-08 00:34:18	lambdabot	  [2 + 3 + 5,2 + (3 + 5)]
2013-09-08 00:34:20	ski	> [n | (n,"") <- readSum "2 + 3 + 5 + 7"]
2013-09-08 00:34:24	lambdabot	  [2 + 3 + 5 + 7,2 + 3 + (5 + 7),2 + (3 + 5) + 7,2 + (3 + 5 + 7),2 + (3 + (5 ...
2013-09-08 00:34:32	ski	this is ambiguous parsing
2013-09-08 00:35:25	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-09-08 00:35:41	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 00:35:44	ski	(note that `2 + 3 + 5' there really means `(2 + 3) + 5', it's just that `show' omits the brackets when printing them on the left like that)
2013-09-08 00:35:59	red_	ambiguous because there are multiple directions on the parse tree?
2013-09-08 00:36:06	--	hdevalence is now known as hdevalence|away
2013-09-08 00:38:48	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 260 seconds)
2013-09-08 00:38:59	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-08 00:39:02	Peaker	do FFI import declarations allow ST types as well as IO types?
2013-09-08 00:41:01	red_	:t sort
2013-09-08 00:41:03	lambdabot	Ord a => [a] -> [a]
2013-09-08 00:41:09	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 268 seconds)
2013-09-08 00:41:44	red_	:t sortBy
2013-09-08 00:41:45	lambdabot	(a -> a -> Ordering) -> [a] -> [a]
2013-09-08 00:41:55	Rc43	How to save continuation before using callCC?
2013-09-08 00:42:12	DigitalKiwi	is there a bot with seen still
2013-09-08 00:42:18	DigitalKiwi	or anyone seen glguy lately...
2013-09-08 00:42:33	enthropy	preflex: xseen DigitalKiwi
2013-09-08 00:42:35	preflex	 DigitalKiwi was last seen on freenode/#haskell 16 seconds ago, saying: or anyone seen glguy lately...
2013-09-08 00:42:55	-->	ivoscc (~ivo@190.235.219.16) has joined #haskell
2013-09-08 00:43:00	DigitalKiwi	preflex: xseen glguy
2013-09-08 00:43:01	preflex	 glguy was last seen on freenode/#haskell 7 days, 21 hours and 54 minutes ago, saying: edwardk: and is any of this on your github?
2013-09-08 00:43:11	red_	aaand another dumb question : how do i sort a list of lists by the first elem of the internal lists --> [[1,_,_],[2,_,_],...] ?
2013-09-08 00:43:14	DigitalKiwi	aww :<
2013-09-08 00:43:35	DigitalKiwi	thanks
2013-09-08 00:43:55	ParaSa1lin	@ty sortBy (comparing head)
2013-09-08 00:43:56	lambdabot	Ord a => [[a]] -> [[a]]
2013-09-08 00:44:03	enthropy	red_: sort already does that, except it'll be different for ties
2013-09-08 00:44:19	red_	enthropy: sort is lexicographic, no?
2013-09-08 00:44:31	ParaSa1lin	@src sort
2013-09-08 00:44:31	lambdabot	sort = sortBy compare
2013-09-08 00:44:37	-->	mirari (~mirari@84.238.89.163) has joined #haskell
2013-09-08 00:44:37	ParaSa1lin	@src [] compare
2013-09-08 00:44:38	lambdabot	Source not found. It can only be attributed to human error.
2013-09-08 00:44:43	ParaSa1lin	@src compare
2013-09-08 00:44:43	lambdabot	compare x y | x == y    = EQ
2013-09-08 00:44:43	lambdabot	            | x <= y    = LT
2013-09-08 00:44:43	lambdabot	            | otherwise = GT
2013-09-08 00:44:59	<--	tcsavage (~tcsavage@host81-152-96-103.range81-152.btcentralplus.com) has left #haskell
2013-09-08 00:45:02	red_	kthnks
2013-09-08 00:45:04	enthropy	red_: yes, which is the same as comparing the first element
2013-09-08 00:45:09	monochrom	Rc43: I don't think it can be done? callCC is how you get at and save a continuation
2013-09-08 00:45:11	enthropy	if all the first elements are different
2013-09-08 00:45:12	ski	Peaker : not to my knowledle -- you could probably use `unsafeIOToST', though
2013-09-08 00:45:25	<--	ivoscc (~ivo@190.235.219.16) has quit (Client Quit)
2013-09-08 00:45:33	ParaSa1lin	@src [] (<=)
2013-09-08 00:45:33	lambdabot	Source not found. Take a stress pill and think things over.
2013-09-08 00:45:41	 *	hackagebot hspec 1.7.2 - Behavior-Driven Development for Haskell  http://hackage.haskell.org/package/hspec-1.7.2 (SimonHengel)
2013-09-08 00:45:43	 *	hackagebot hspec-meta 1.7.2 - A version of Hspec which is used to test Hspec itself  http://hackage.haskell.org/package/hspec-meta-1.7.2 (SimonHengel)
2013-09-08 00:45:43	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 00:45:49	ParaSa1lin	@src [] (<)
2013-09-08 00:45:49	lambdabot	Source not found. My mind is going. I can feel it.
2013-09-08 00:45:52	ParaSa1lin	@src [] (>)
2013-09-08 00:45:53	lambdabot	Source not found.
2013-09-08 00:46:00	ski	Rc43 : if you have `Cont o' or `ContT o m', you could unwrap with `runContT' and grab it that way
2013-09-08 00:46:04	Rc43	monochrom, I thought that callCC will return value to the point that we have set already, like setjmp/longjump in C.
2013-09-08 00:46:30	S_J	@hoogle String->[String
2013-09-08 00:46:30	lambdabot	Parse error:
2013-09-08 00:46:30	lambdabot	  String->[String
2013-09-08 00:46:30	lambdabot	          ^
2013-09-08 00:46:31	S_J	@hoogle String->[String]
2013-09-08 00:46:32	lambdabot	Prelude lines :: String -> [String]
2013-09-08 00:46:32	lambdabot	Data.List lines :: String -> [String]
2013-09-08 00:46:32	lambdabot	Data.String lines :: String -> [String]
2013-09-08 00:46:51	<--	yano (yano@freenode/staff/yano) has quit (Read error: Connection reset by peer)
2013-09-08 00:47:06	jmcarthur	Rc43: the function argument that callCC passes to its argument is its continuation
2013-09-08 00:47:08	-->	maximveksler (~maximveks@50-204-67-228-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 00:48:03	monochrom	callCC (\k -> ... k is the continuation you can save now ...)   this does not conflict with what you said
2013-09-08 00:48:03	<--	transfinite (~ecc@unaffiliated/transfinite) has quit (Ping timeout: 245 seconds)
2013-09-08 00:48:10	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-08 00:48:11	jmcarthur	Rc43:   x <- callCC $ \k -> foo        -- k is callCC's continuation, and x is the thing you ultimately apply k to in foo
2013-09-08 00:48:32	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-08 00:48:54	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 00:49:15	monochrom	see my http://www.vex.net/~trebla/haskell/cont-monad.xhtml , has examples of leaking out that k for future use
2013-09-08 00:49:17	-->	estultic1a (~estultici@190.149.65.168) has joined #haskell
2013-09-08 00:49:57	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-08 00:50:07	<--	Rc43 (4fad5042@gateway/web/freenode/ip.79.173.80.66) has quit (Quit: Page closed)
2013-09-08 00:50:19	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-09-08 00:50:31	-->	transfinite (~ecc@unaffiliated/transfinite) has joined #haskell
2013-09-08 00:51:04	monochrom	if you go so far as to save it in a mutable variable and use it some time later, way outside that callCC where it came from, you can pull many, many stuns.
2013-09-08 00:51:45	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-08 00:52:27	<--	estulticia (~estultici@unaffiliated/estulticia) has quit (Ping timeout: 264 seconds)
2013-09-08 00:52:48	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 00:52:53	<--	estultic1a (~estultici@190.149.65.168) has quit (Changing host)
2013-09-08 00:52:54	-->	estultic1a (~estultici@unaffiliated/estulticia) has joined #haskell
2013-09-08 00:52:55	--	estultic1a is now known as estulticia
2013-09-08 00:53:16	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 264 seconds)
2013-09-08 00:53:45	-->	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has joined #haskell
2013-09-08 00:54:22	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 00:54:55	DigitalKiwi	what do you think of http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours (caveat, what do you think of it for someone that doesn't know scheme)
2013-09-08 00:55:08	<--	chrisdotcode__ (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-08 00:55:35	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-09-08 00:55:54	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-08 00:56:08	-->	madjestic (~madjestic@31.187.172.247) has joined #haskell
2013-09-08 00:57:11	<--	lambdakind (~lambdakin@cpe-66-69-139-187.sw.res.rr.com) has quit (Remote host closed the connection)
2013-09-08 00:57:32	NemesisD	anyone have experience with the performances characteristics of containers' Data.Map.Strict vs Data.HashMap.Strict
2013-09-08 00:58:07	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 00:58:09	NemesisD	they seem to have the same complexity for the most part
2013-09-08 00:58:13	ent	DigitalKiwi: i've only gone through the first few chapters but so far, lack of scheme knowledge doesn't seem to be a problem
2013-09-08 00:58:25	-->	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has joined #haskell
2013-09-08 00:58:52	NemesisD	and actually, IntSet would work here
2013-09-08 00:59:43	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-08 01:00:20	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-08 01:00:21	NemesisD	intset claims to be especially good at unions
2013-09-08 01:00:24	-->	giulia12 (~giulia@114.216.213.195) has joined #haskell
2013-09-08 01:00:28	giulia12	Hellooooooooooo!!!
2013-09-08 01:00:32	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 01:00:35	giulia12	hello :)
2013-09-08 01:01:51	NemesisD	hi
2013-09-08 01:02:24	Peaker	NemesisD: if you're after performance and don't need a persistent data structure, my https://github.com/Peaker/small_hash is faster than IntMap or any other Haskell option I benchmarked it against
2013-09-08 01:02:46	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Quit: Pozdrav)
2013-09-08 01:03:04	NemesisD	Peaker: got something up on hackage?
2013-09-08 01:03:15	<--	red_ (~red@150.108.239.39) has quit (Ping timeout: 264 seconds)
2013-09-08 01:03:16	bss03	Peaker: I don't see any haskell there.
2013-09-08 01:03:30	Peaker	https://github.com/Peaker/small_hash_hs is the Haskell binding to it
2013-09-08 01:03:35	Peaker	NemesisD: nope
2013-09-08 01:03:48	NemesisD	that's not gonna work for me
2013-09-08 01:03:48	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-08 01:03:56	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 01:04:29	NemesisD	trying to keep this reasonably easy to build and package
2013-09-08 01:04:48	Peaker	maybe I ought to put it on hackage at some point
2013-09-08 01:04:50	DigitalKiwi	ent: what about the other aspects of it
2013-09-08 01:05:15	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 01:05:19	edwardk	NemesisD: clearly you should adopt the bleeding edge and use my unreleased structures library ;)
2013-09-08 01:05:23	<--	chester_ (~chester@95-25-129-196.broadband.corbina.ru) has quit (Quit: Leaving.)
2013-09-08 01:05:25	<--	uvelichitel (~uvelichit@37.73.252.136) has quit (Ping timeout: 245 seconds)
2013-09-08 01:05:32	edwardk	that'll make packaging easy! ;)
2013-09-08 01:06:02	<--	azcodex (~azcodex_@202.red-80-29-72.adsl.static.ccgg.telefonica.net) has quit (Quit: azcodex)
2013-09-08 01:06:15	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-08 01:06:15	<--	thunderrd (~thunderrd@119.42.79.49) has quit (Ping timeout: 264 seconds)
2013-09-08 01:06:18	ent	DigitalKiwi: It seems pretty nice
2013-09-08 01:06:32	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 240 seconds)
2013-09-08 01:06:50	ent	DigitalKiwi: I think it's a lot more interesting than the toy projects in real world haskell
2013-09-08 01:09:17	<--	mirari (~mirari@84.238.89.163) has quit
2013-09-08 01:10:22	NemesisD	lol
2013-09-08 01:11:00	<--	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 01:11:40	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 01:13:05	--	hdevalence|away is now known as hdevalence
2013-09-08 01:13:05	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-08 01:13:43	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (Read error: Connection reset by peer)
2013-09-08 01:15:55	bss03	Is there a lens construct that's equivalent to b -> a and (a -> b -> Maybe a OR b -> Maybe a)?
2013-09-08 01:16:06	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-08 01:16:14	shachaf	What does that OR mean?
2013-09-08 01:16:29	bss03	Well, in this case I don't need the first a.
2013-09-08 01:16:57	shachaf	Maybe you should describe what these things are.
2013-09-08 01:17:26	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 01:17:47	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-08 01:17:52	Fuuzetsu	Is there a nice way of bundling a cabal package inside of a package? I want to test cross-package linking in Haddock but in the same time I don't want to rely on the developer having any package documentation already on his system. The idea is to put our internal package in the Haddock test dependencies and use that.
2013-09-08 01:18:05	Fuuzetsu	at the same time*
2013-09-08 01:18:17	-->	thunderrd (~thunderrd@119.42.79.179) has joined #haskell
2013-09-08 01:18:31	-->	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has joined #haskell
2013-09-08 01:18:35	<--	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-09-08 01:19:09	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-09-08 01:19:27	dwcook	If I'm using a TVar inside of IO, is it okay just to use the IO versions of the functions as much as possible? In that case, why are there no IO versions of write or modify?
2013-09-08 01:19:38	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-08 01:19:55	Peaker	dwcook: atomically a >> atomically b   is not the same as   atomically (a >> b)
2013-09-08 01:20:20	dwcook	Peaker, okay, noted. Why are the IO versions provided then?
2013-09-08 01:20:24	-->	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has joined #haskell
2013-09-08 01:20:25	shachaf	dwcook: The IO versions of newTVar etc. exist because sometimes using an STM transaction is a problem.
2013-09-08 01:20:26	SrPx	donri: luite byorgey sorry, I had to quit. reading
2013-09-08 01:20:34	Peaker	shachaf: when?
2013-09-08 01:20:35	dwcook	shachaf, example?
2013-09-08 01:20:51	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-08 01:20:55	shachaf	For example, when you're using unsafePerformIO and want to avoid nested transactions.
2013-09-08 01:20:59	Peaker	dwcook: I think you'd want to think about the needed atomicity whenever you use STM. So the IO variants detract from that
2013-09-08 01:21:02	shachaf	For the whole "global variable" trick.
2013-09-08 01:21:08	fryguybob	dwcook: If you are only working with a single TVar you can atomically do something with it more efficiently then a full transaction can.
2013-09-08 01:21:39	<--	S_J (S_J@m90-129-92-203.cust.tele2.se) has quit
2013-09-08 01:22:01	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-08 01:22:25	-->	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has joined #haskell
2013-09-08 01:22:47	dwcook	I actually haven't put much thought into the concurrency properties my program will need. Currently I'm having several threads read from a single variable, but soon I'll need to let the clients affect the world. I was thinking of using TChans for that.
2013-09-08 01:23:00	dwcook	Namely, have a single thread read all the "input" channels and change the world based on them.
2013-09-08 01:23:04	dwcook	Does that sound sane?
2013-09-08 01:23:05	merijn	dwcook: newTVarIO lets you use unsafePerformIO to have a top level TVar
2013-09-08 01:23:22	-->	RylandAlmanza (~RylandAlm@unaffiliated/rylandalmanza) has joined #haskell
2013-09-08 01:23:29	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-08 01:23:31	-->	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-08 01:23:31	merijn	dwcook: Yeah, that's sounds perfectly reasonable
2013-09-08 01:23:35	SrPx	luite: byorgey hmm I see! I was thinking in porting an application from JS to Haskell but I'd like to be able to work on the Haskell version while still being able to keep the browser one up-to-date. as in, I want to start coding in haskell only
2013-09-08 01:23:40	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (Quit: ZNC - http://znc.in)
2013-09-08 01:24:26	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-09-08 01:24:29	dwcook	Okay, good, thanks.
2013-09-08 01:25:08	dwcook	Thanks everyone – I'll have to figure out how the transactions will work.
2013-09-08 01:25:34	<--	anRch (~markmilli@ip-64-134-47-159.public.wayport.net) has quit (Quit: anRch)
2013-09-08 01:25:35	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Quit: leaving)
2013-09-08 01:25:40	NemesisD	hmm doing some benchmarking, seems like strict hashmaps with int keys do a better job at unions than intmaps
2013-09-08 01:26:39	-->	uvelichitel (~uvelichit@37.73.246.238) has joined #haskell
2013-09-08 01:28:07	<--	transfinite (~ecc@unaffiliated/transfinite) has quit (Ping timeout: 264 seconds)
2013-09-08 01:28:10	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-08 01:28:51	-->	imm33_ (~imm33@174-29-194-67.hlrn.qwest.net) has joined #haskell
2013-09-08 01:28:57	imm33_	hello everry 1
2013-09-08 01:29:11	imm33_	hello says ariana
2013-09-08 01:29:23	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (Quit: ZNC - http://znc.in)
2013-09-08 01:29:28	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-08 01:29:29	haasn	How can I construct my own IOExceptions?
2013-09-08 01:29:34	-->	predator217 (~predator1@p508029DD.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 01:29:55	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Read error: Operation timed out)
2013-09-08 01:30:03	<--	ismlages (~ismlages@212.174.109.55) has quit (Remote host closed the connection)
2013-09-08 01:30:05	NemesisD	you're definitely going to need to take a Sith initiate oath to do that
2013-09-08 01:30:18	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-08 01:30:26	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 01:30:26	merijn	haasn: mkIOError
2013-09-08 01:30:29	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-08 01:30:45	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 01:30:50	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Quit: Bye!)
2013-09-08 01:31:16	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-09-08 01:32:20	haasn	hmm
2013-09-08 01:32:37	haasn	while it seems to work, handling_ _IOException won't pick it up :(
2013-09-08 01:32:38	<--	Luke (~luke@c-67-184-182-187.hsd1.il.comcast.net) has quit (Quit: Luke)
2013-09-08 01:32:47	haasn	even if I loosen to handling_ id (aka. SomeException)
2013-09-08 01:32:50	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-08 01:32:55	<--	predator117 (~predator1@p50803F94.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-08 01:34:40	<--	yano (yano@freenode/staff/yano) has quit (Ping timeout: 624 seconds)
2013-09-08 01:35:28	-->	luksow (~luke@dslb-094-223-095-085.pools.arcor-ip.net) has joined #haskell
2013-09-08 01:35:43	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 01:35:43	 *	hackagebot pipes 4.0.0 - Compositional pipelines  http://hackage.haskell.org/package/pipes-4.0.0 (GabrielGonzalez)
2013-09-08 01:35:45	 *	hackagebot pipes-safe 2.0.0 - Safety for the pipes ecosystem  http://hackage.haskell.org/package/pipes-safe-2.0.0 (GabrielGonzalez)
2013-09-08 01:35:47	 *	hackagebot pipes-parse 2.0.0 - Parsing infrastructure for the pipes ecosystem  http://hackage.haskell.org/package/pipes-parse-2.0.0 (GabrielGonzalez)
2013-09-08 01:35:49	 *	hackagebot pipes-concurrency 2.0.0 - Concurrency for the pipes ecosystem  http://hackage.haskell.org/package/pipes-concurrency-2.0.0 (GabrielGonzalez)
2013-09-08 01:35:51	merijn	\o/
2013-09-08 01:35:59	Tekmo	:)
2013-09-08 01:36:28	-->	Wuzzy2 (~Wuzzy@p549FAC02.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 01:36:31	spaceships	what can "fix" be used for?
2013-09-08 01:36:32	h4199	Does this make it official??
2013-09-08 01:36:34	Tekmo	Yes
2013-09-08 01:36:36	Tekmo	It's official
2013-09-08 01:36:42	dwcook	spaceships, recursion
2013-09-08 01:36:43	merijn	spaceships: Any recursion
2013-09-08 01:36:45	k0001	Woo hoo!!
2013-09-08 01:36:51	shachaf	merijn: Even polymorphic recursion?
2013-09-08 01:36:55	Tekmo	I'm just polishing the announcement post for tomorrow
2013-09-08 01:36:57	h4199	Congratulations
2013-09-08 01:37:01	Tekmo	Thanks :)
2013-09-08 01:37:07	merijn	shachaf: shush
2013-09-08 01:37:11	k0001	Tekmo: I'll just go ahead and push mine too.
2013-09-08 01:37:14	Tekmo	k0001: Alright
2013-09-08 01:37:16	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 01:37:21	merijn	shachaf: It could, if it weren't for haskell's silly type system!
2013-09-08 01:37:23	shachaf	merijn: That's a real question. Can fix be used for polymorphic recursion?
2013-09-08 01:37:29	shachaf	Or can you make another function which can?
2013-09-08 01:37:30	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 245 seconds)
2013-09-08 01:37:32	haasn	Tekmo: now we need an update to pipes-network so I can scrap this stupid server I'm working on and rewrite it in a more sane environment
2013-09-08 01:37:40	Tekmo	haasn: He's updating it right now
2013-09-08 01:37:48	haasn	excellent
2013-09-08 01:37:50	dwcook	So is that announcement of pipes like Christmas come early or something?
2013-09-08 01:37:54	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-09-08 01:37:54	Tekmo	k0001 is the maintainer of it and he's pushing it to Hackage right now
2013-09-08 01:38:01	Tekmo	haha
2013-09-08 01:38:06	merijn	shachaf: Actually, I'm not sure, and it's past 12 on Saturday so I can't be arsed thinking about it :)
2013-09-08 01:38:12	wavewave	hi
2013-09-08 01:38:16	spaceships	can i have a simple example of the use of fix?
2013-09-08 01:38:18	Tekmo	Hi
2013-09-08 01:38:23	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-08 01:38:24	<--	madjestic (~madjestic@31.187.172.247) has quit (Ping timeout: 240 seconds)
2013-09-08 01:38:26	merijn	> fix error
2013-09-08 01:38:27	lambdabot	  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *E...
2013-09-08 01:38:28	dwcook	> fix (1 :)
2013-09-08 01:38:29	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-09-08 01:38:33	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 01:38:44	Tekmo	spaceships: The most common use of `fix` is if you don't want to define an intermediate recursive helper function
2013-09-08 01:38:57	Tekmo	spaceships: Let's use `dwcook`'s function as an example
2013-09-08 01:38:58	wavewave	Tekmo: good to see you ;-D
2013-09-08 01:39:03	Tekmo	wavewave: You, too! :)
2013-09-08 01:39:13	Tekmo	spaceships: Without `fix` you would write something like:
2013-09-08 01:39:18	haasn	Tekmo: how long will it take? :P I want to write an example of a simple chat server for this guy, right about now
2013-09-08 01:39:29	startling	the most common use of "fix" is not using it.
2013-09-08 01:39:29	Tekmo	spaceships: let ones = 1:ones in ones
2013-09-08 01:39:30	haasn	don't tell me I have to use network-conduit instead :)
2013-09-08 01:39:31	<--	Wuzzy (~Wuzzy@p549FBDFB.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-08 01:39:59	Tekmo	haasn: As soon as Hackage accepts his upload
2013-09-08 01:40:00	spaceships	Tekmo: ah, okay. recursion without a base case?
2013-09-08 01:40:06	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-09-08 01:40:07	Tekmo	spaceships: It can have a base case
2013-09-08 01:40:20	Tekmo	spaceships: The trick is to make the function lazy so that the recursion stops after some point
2013-09-08 01:40:30	shachaf	Any kind of recursion at all. It's quite barbaric.
2013-09-08 01:40:48	-->	joelb (~textual@user-64-9-235-52.googlewifi.com) has joined #haskell
2013-09-08 01:40:55	startling	> fix (const "spaceships")
2013-09-08 01:40:56	lambdabot	  "spaceships"
2013-09-08 01:41:12	Tekmo	spaceships: The reason `startling`'s example works is because:
2013-09-08 01:41:25	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 01:41:48	haasn	Tekmo: great! /me waits patiently
2013-09-08 01:41:51	Tekmo	fix (\_ -> "spaceships") = (\_ -> "spaceships") (fix (\_ -> "spaceships")) = "spaceships"
2013-09-08 01:42:11	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-08 01:42:18	spaceships	okay, it ignores the recursive argument
2013-09-08 01:42:19	dwcook	By the way, often it's more convenient to use an already defined function. For example, if you want an infinite list of 1's, you can just
2013-09-08 01:42:23	dwcook	> repeat 1
2013-09-08 01:42:24	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-09-08 01:42:28	k0001	haasn: I'm just checking that everything builds fine locally, and then I'll upload it. Say, 20 minutes.
2013-09-08 01:42:34	Tekmo	spaceships: Right.  The recursion bottoms out when it stops using the argument
2013-09-08 01:42:36	haasn	k0001: alright
2013-09-08 01:42:38	amyers	Anyone have any advice on using Data.Graph from containers vs Data.Graph.Inductive from fgl?
2013-09-08 01:43:00	Tekmo	I use `Data.Graph`
2013-09-08 01:43:02	haasn	k0001: I think it'll be faster for me to just build your library from git, assuming it works
2013-09-08 01:43:03	spaceships	Tekmo: thanks for your help
2013-09-08 01:43:06	startling	Data.Graph from containers has always been a pain for me. I don't know anything about the other one.
2013-09-08 01:43:08	Tekmo	spaceships: You're welcome!
2013-09-08 01:43:27	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: No route to host)
2013-09-08 01:43:33	shachaf	fix of a strict function is quite boring.
2013-09-08 01:43:43	shachaf	Since the least fixed point is always ⊥.
2013-09-08 01:43:59	amyers	There's a lot more stuff in fgl but the API seems a bit more complicated
2013-09-08 01:43:59	<--	ioanel (~Thunderbi@188.25.18.143) has quit (Remote host closed the connection)
2013-09-08 01:44:04	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-08 01:44:43	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-08 01:44:44	k0001	haasn: sure, that will work.
2013-09-08 01:45:39	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 01:45:51	amyers	Tekmo: Have you had good experiences with Data.Graph?
2013-09-08 01:46:17	mgccl	I can't believe I can use guard on tuples... I thought it suppose to only work on functions...
2013-09-08 01:46:28	Tekmo	amyers: Yes
2013-09-08 01:46:44	Tekmo	The big problem is that it doesn't have many functions
2013-09-08 01:46:50	Tekmo	You have to roll most of your own graph functions
2013-09-08 01:47:00	mgccl	like this, http://lpaste.net/92718
2013-09-08 01:47:07	amyers	Tekmo: Yeah, that's what made fgl look attractive, there is way more stuff already defined
2013-09-08 01:47:13	wavewave	The original paper on Data.Graph is very classic. I love the paper.
2013-09-08 01:47:56	amyers	You can use guards anywhere you pattern match right?
2013-09-08 01:47:58	Tekmo	The main reason I rejected `fgl` way back was mainly because it was obvious from studying the source code that there was little attention to performance
2013-09-08 01:47:59	wavewave	Structuring Depth First search in haskell by King and Launchbury
2013-09-08 01:48:18	amyers	Tekmo: Ah, that's good to know
2013-09-08 01:48:31	amyers	Tekmo: That will almost certainly be important for me
2013-09-08 01:48:51	amyers	Tekmo: How is memory footprint for Data.Graph?
2013-09-08 01:49:16	<--	pierreghz (~krux@91.179.27.135) has quit (Quit: leaving)
2013-09-08 01:49:16	<--	imm33_ (~imm33@174-29-194-67.hlrn.qwest.net) has quit (Remote host closed the connection)
2013-09-08 01:49:18	Tekmo	amyers: It's really small
2013-09-08 01:49:20	-->	transfinite (~ecc@unaffiliated/transfinite) has joined #haskell
2013-09-08 01:49:38	Tekmo	It's just an adjacency list representation
2013-09-08 01:49:44	amyers	Ah, Good.  My use case I will have several thousand with <= 1k nodes
2013-09-08 01:49:53	Tekmo	i.e. `Array Vertex [Vertex]`
2013-09-08 01:49:55	-->	pierreghz (~krux@91.179.27.135) has joined #haskell
2013-09-08 01:50:02	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-09-08 01:50:38	amyers	so updates are expensive?  |V|?
2013-09-08 01:50:43	 *	hackagebot pipes-network 0.6.0 - Use network sockets together with the pipes library.  http://hackage.haskell.org/package/pipes-network-0.6.0 (RenzoCarbonara)
2013-09-08 01:50:58	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 01:51:00	k0001	haasn: there you go :)
2013-09-08 01:51:20	wavewave	amyers: see this paper on the algorithm of Data.Graph :    http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.2591&rep=rep1&type=pdf
2013-09-08 01:51:25	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-08 01:51:49	amyers	odd ... It says I have exceeded my daily download allowance ....
2013-09-08 01:51:51	Tekmo	amyers: It depends on the time complexity of update for `Array`.  I forgot what that is
2013-09-08 01:52:01	amyers	I haven't been on citeseer in a couple days ...
2013-09-08 01:52:07	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 264 seconds)
2013-09-08 01:52:18	amyers	Tekmo: Yeah, that's what I'm unfamiliar with as well
2013-09-08 01:52:34	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-08 01:52:35	Tekmo	amyers: In my case the graph was static so it didn't matter for me
2013-09-08 01:52:47	amyers	Tekmo: Mine are as well, I was just curious
2013-09-08 01:53:06	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-08 01:53:19	amyers	Tekmo: Okay, I will use Data.Graph for now, thanks for the info
2013-09-08 01:53:26	Tekmo	You're welcome
2013-09-08 01:53:44	amyers	wavewave: Thanks, I can get to the paper if I copy the link out of my irc client into the browser.  I'll check it out
2013-09-08 01:54:00	<--	pierreghz (~krux@91.179.27.135) has quit (Client Quit)
2013-09-08 01:54:17	wavewave	amyers: you're welcome.
2013-09-08 01:54:24	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 01:54:52	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 01:55:22	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-08 01:55:28	haasn	k0001: thanks
2013-09-08 01:55:41	wavewave	I love the paper, since it has a proof for the correctness of strongly connected component algorithm by using equational reasoning.
2013-09-08 01:56:07	wavewave	that's quite difficult in imperative algorithm description.
2013-09-08 01:56:22	amyers	That's cool
2013-09-08 01:56:40	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-08 01:56:44	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 01:56:46	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-08 01:57:08	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-08 01:58:09	haasn	oh no!
2013-09-08 01:58:11	wavewave	btw, we need to improve Data.Graph by using more efficient data type..
2013-09-08 01:58:11	<--	T__T (~kw3st@c-24-23-132-165.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-08 01:58:23	haasn	lens-9999 requires <exceptions-0.3
2013-09-08 01:58:25	<--	cinema (~cinema@dan75-1-89-82-138-66.dsl.sta.abo.bbox.fr) has quit (Quit: Leaving)
2013-09-08 01:58:38	haasn	but network-simple requires exceptions >=0.3.2 :(
2013-09-08 01:58:45	wavewave	it's still quite the same as the original paper
2013-09-08 01:58:51	haasn	this is the part where I want to throw everything away and switch to NixOS..
2013-09-08 01:58:58	edwardk	haasn: did we just not bump the lens head dep on exceptions?
2013-09-08 01:59:11	haasn	possible, the ebuild must be outdated
2013-09-08 01:59:12	applicative	oh hi Tekmo
2013-09-08 01:59:18	edwardk	haasn: feel free to bump it
2013-09-08 01:59:21	edwardk	it should be fine
2013-09-08 01:59:28	edwardk	heya tekmo
2013-09-08 01:59:28	<--	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-08 01:59:51	k0001	haasn edwardk if that's not the case, I can try running network-simple with a lower version of exceptions and see what happens.
2013-09-08 02:00:05	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-08 02:00:19	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 260 seconds)
2013-09-08 02:00:37	applicative	nice precis of the docs k0001
2013-09-08 02:00:42	applicative	i mean http://monoid.k0001.org/haskell/Pipes/
2013-09-08 02:00:52	edwardk	k0001: well, i wrote both lens and exceptions, and we don't use anything particularly exotic out of exceptions in lens, the only thing that may have to change is a couple of deps may have to pull it stuff from the .Pure module
2013-09-08 02:01:22	fiddlerwoaroof	is it possible to say "not of type x" with pattern matching?
2013-09-08 02:01:49	fiddlerwoaroof	i.e. foo !(String a) = a
2013-09-08 02:02:00	haasn	you can't pattern match on types
2013-09-08 02:02:06	applicative	where ! means not?
2013-09-08 02:02:09	fiddlerwoaroof	yeah
2013-09-08 02:02:09	wavewave	fiddlerwoaroof: process x first then use _
2013-09-08 02:02:21	wavewave	ah.. type?
2013-09-08 02:02:23	applicative	it's hard with or without pattern matching.
2013-09-08 02:02:27	startling	fiddlerwoaroof: you can't do it with pattern matching.
2013-09-08 02:02:39	<--	ktosiek (~ktosiek@46.22.173.54) has quit (Ping timeout: 260 seconds)
2013-09-08 02:02:41	startling	I feel like one of those new extensions all the cool kids are using can do it.
2013-09-08 02:03:02	applicative	fiddlerwoaroof: but i think if people know more about the context, they will know what to do
2013-09-08 02:03:08	wavewave	does it make sense by the way?
2013-09-08 02:03:19	k0001	edwardk: I think that it might still be a good idea to lower the network-simple's dependency on exceptions, if possible. I confess that I didn't try running it with a lower version, but I don't do anything fancy with it so I expect it should work.
2013-09-08 02:03:23	startling	fiddlerwoaroof: if it seems like something you need, you're probably wrong.
2013-09-08 02:03:29	fiddlerwoaroof	wavewave: yeah, but it wouldn't work here.
2013-09-08 02:03:35	-->	pierreghz (~krux@91.179.27.135) has joined #haskell
2013-09-08 02:03:43	fiddlerwoaroof	at least, not that I can see
2013-09-08 02:03:48	Tekmo	applicative edwardk: Hi!
2013-09-08 02:04:01	wavewave	fiddlerwoaroof: what's the type of foo?
2013-09-08 02:04:04	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-08 02:04:12	edwardk	Tekmo: did some more fiddling with those folds
2013-09-08 02:04:27	Tekmo	edwardk: What did you come up with?
2013-09-08 02:04:32	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-08 02:04:39	k0001	applicative: gotta love standalone-haddock!
2013-09-08 02:04:48	applicative	Tekmo: he's gone completely foldmad, worse than you!
2013-09-08 02:04:52	Tekmo	edwardk: You need to check out this issue on `foldl`: https://github.com/Gabriel439/Haskell-Foldl-Library/pull/3
2013-09-08 02:04:54	--	swistak35 is now known as swistak36
2013-09-08 02:04:59	Tekmo	edwardk: It has a lot of stuff you might be interested in
2013-09-08 02:05:07	edwardk	i wound up with comonads for L, R, M and L' folds. the comonad for M is rather different than the others, but i have a notion of folding homomorphisms between them
2013-09-08 02:05:19	wavewave	fiddlerwoaroof: probably you're using existential type now?
2013-09-08 02:05:44	edwardk	Tekmo: nice. i should be able to cleanly adapt those
2013-09-08 02:05:55	-->	imm33 (~imm33@174-29-194-67.hlrn.qwest.net) has joined #haskell
2013-09-08 02:06:24	hpaste	fiddlerwoaroof pasted “No title” at http://lpaste.net/92720
2013-09-08 02:06:29	edwardk	Tekmo: a lot of them overlap with th fact that i can drive my foldings off of lens-style folds though, so using prefixOf or postfixOf or runOf with a specified fold can also do the filtering out there
2013-09-08 02:06:31	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 02:06:51	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-08 02:07:23	Tekmo	edwardk: Is there a way to convert a `foldl` fold to a lens fold or does that require making it use the original `Monoid` approach?
2013-09-08 02:07:27	fiddlerwoaroof	the code I pasted has overlapping cases, and I'd like to de-overlap the first one by saying something like (type1, !type2) -> ...
2013-09-08 02:08:00	fiddlerwoaroof	wavewave: I don't think so, because I'm not sure what that means.
2013-09-08 02:08:05	wavewave	fiddlerwoaroof: how about creating  a function like 'typeOf'
2013-09-08 02:08:38	hpaste	fiddlerwoaroof revised “No title”: “No title” at http://lpaste.net/92720
2013-09-08 02:08:39	wavewave	fiddlerwoaroof: case (typeOf arg1, typeOf arg2) of ...
2013-09-08 02:08:45	edwardk	well a Fold is the thing that picks the targets, a `foldl` fold/"Beautiful Folding"  fold is what i'm calling a Folding, which is an iteratee-like thing it describes what to do with it. what i have is something for each folding typ that defines how to run it over a Fold.
2013-09-08 02:09:08	wavewave	and typeOf :: ArgType -> SimpleTypeRepresentation
2013-09-08 02:09:09	edwardk	for the L' case this means doing a Foldable-style foldl' which is unfortunate
2013-09-08 02:09:16	shachaf	edwardk: Hey, lens already uses the name Folding.
2013-09-08 02:09:19	applicative	fiddlerwoaroof: whatever it is thats going, the first case will always match the rest arent read
2013-09-08 02:09:29	Tekmo	edwardk: Keep in mind that if you need `foldl` to make any changes, just ask
2013-09-08 02:09:37	Tekmo	edwardk: I'm not stabilizing the API just yet
2013-09-08 02:09:41	<--	bitonic (~user@ppp-188-144.27-151.libero.it) has quit (Read error: Operation timed out)
2013-09-08 02:09:53	applicative	fiddlerwoaroof: the type1 type2 of the top level binding are not used in the case statement, but shadowed
2013-09-08 02:09:53	edwardk	Tekmo: well, what i have is rather… idiosyncratic ;)
2013-09-08 02:09:57	Tekmo	edwardk: Haha
2013-09-08 02:10:08	Tekmo	edwardk: I'm still holding out for the `Arrow` and `ArrowChoice` fold
2013-09-08 02:10:23	Tekmo	edwardk: It's just that every time I think I have it I find out I'm wrong
2013-09-08 02:10:30	wavewave	fiddlerwoaroof: what is the type of arg1, arg2?
2013-09-08 02:10:48	edwardk	Tekmo: interestingly i do have a Monad for my foldings that gives you a leaky-but-legal multipass algorithm support
2013-09-08 02:10:58	<--	imm33 (~imm33@174-29-194-67.hlrn.qwest.net) has quit (Remote host closed the connection)
2013-09-08 02:11:02	 *	applicative is convinced that L / Foldl is and idea that is doomed never to be properly implemented because the implementer goes mad with generalizations before completing it
2013-09-08 02:11:09	applicative	an idea
2013-09-08 02:11:14	wavewave	need to be some kind of sum type.
2013-09-08 02:11:21	Tekmo	I think the one true way is whatever way forms `Arrow` and `ArrowChoice`
2013-09-08 02:11:22	fiddlerwoaroof	They will be LispVala from the "write your own scheme" wiki book.
2013-09-08 02:11:28	fiddlerwoaroof	^ wavewave
2013-09-08 02:11:47	wavewave	data ArgType  = IntType Int | DoubleType Double | StringType String
2013-09-08 02:11:51	wavewave	for example
2013-09-08 02:11:53	fiddlerwoaroof	yeah
2013-09-08 02:11:54	edwardk	well, I get a 'Choice' -- which is basically 'ProfunctorChoice' the Arrow version requires you to be in 'Mealy' form rather than Moore form
2013-09-08 02:12:09	edwardk	i have both lying around but the Moore form is cleanly resumable as a Comonad.
2013-09-08 02:12:21	wavewave	then you can pattern-match .
2013-09-08 02:12:24	edwardk	which lets me do things like start a crc32 run it for a while, then feed it more input
2013-09-08 02:12:24	fiddlerwoaroof	The bit of code I'm working on is for wrapping Prelude functions for scheme type-checking
2013-09-08 02:12:26	Tekmo	edwardk: The problem I get when I try the `Mealy` form is that my encoding is not a true `Category` unless you assume that the `Fold` is consumed in exactly one way
2013-09-08 02:12:38	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-08 02:12:44	edwardk	prefix [3,4] (prefix [1,2] crc32)
2013-09-08 02:13:01	wavewave	case (arg1,arg2) of (IntType x1, IntType x2) -> blahblah ; (DoubleType x1, DoubleType x2) -> blahblah ; ..
2013-09-08 02:13:08	edwardk	i care more about the comonad than the category as the comonad captures resumption
2013-09-08 02:13:15	Tekmo	applicative: If you want you can always write your own fold library
2013-09-08 02:13:17	edwardk	but mealy is also useful in its own right
2013-09-08 02:13:32	Tekmo	I want the `Arrow` and `ArrowChoice` for FRP
2013-09-08 02:13:36	edwardk	sure
2013-09-08 02:13:42	edwardk	mealy is definitely more FRP-like
2013-09-08 02:13:56	edwardk	moore strikes me as a better balance for HMAC-like things
2013-09-08 02:14:05	-->	crocket (~crocket@unaffiliated/crocket) has joined #haskell
2013-09-08 02:14:27	crocket	How does haskell handle modules these days?
2013-09-08 02:14:28	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-08 02:14:31	wavewave	fiddlerwoaroof: then all absurd case will be   _ -> Left "error"
2013-09-08 02:14:42	-->	chatsiri_ (~chatsiri_@171.6.174.58) has joined #haskell
2013-09-08 02:14:48	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 02:14:54	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-08 02:15:22	fiddlerwoaroof	wavewave: I realize I could do it that way, but then I'd have to write a bunch of nearly identical code for +,-,*, etc..
2013-09-08 02:15:42	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-08 02:15:44	 *	hackagebot pipes-binary 0.2.0 - Encode and decode binary streams using the pipes and binary libraries.  http://hackage.haskell.org/package/pipes-binary-0.2.0 (RenzoCarbonara)
2013-09-08 02:15:47	wavewave	fiddlerwoaroof: you can parameterize the function
2013-09-08 02:16:19	fiddlerwoaroof	wavewave: I'm not sure what that means (I'm relatively new to Haskell)
2013-09-08 02:16:31	wavewave	fiddlerwoaroof: hmm you already parameterize it using op as a parameter of your function.
2013-09-08 02:16:45	fiddlerwoaroof	ah, I see
2013-09-08 02:17:08	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (Client Quit)
2013-09-08 02:17:20	applicative	Tekmo: there's not too much to write, it is a matter of communication. Conal already took it into his head and then ... generalized http://conal.net/blog/posts/another-lovely-example-of-type-class-morphisms and 30 other posts
2013-09-08 02:17:42	Tekmo	applicative: Is there anything wrong with the `foldl` library?
2013-09-08 02:17:42	<--	giulia12 (~giulia@114.216.213.195) has left #haskell
2013-09-08 02:17:43	wavewave	fiddlerwoaroof: so.. just try. I think you already got what you want almost.
2013-09-08 02:17:50	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 02:17:56	fiddlerwoaroof	thanks, I'll work on it.
2013-09-08 02:18:12	wavewave	:)
2013-09-08 02:18:34	-->	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has joined #haskell
2013-09-08 02:18:48	applicative	Tekmo: no, i like it as it is, or more or less. Then i would favor more theoretical ones like edwards or what you are contemplating
2013-09-08 02:19:16	wavewave	fiddlerwoaroof: probably you may need extra type class constraint.
2013-09-08 02:19:35	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 02:19:36	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-08 02:19:48	applicative	my thought is that this idea has been around forever and people keep failing at a focussed and optimized presentation of the core idea, which would put it among the abcs of haskell  see the smashing success of http://hackage.haskell.org/package/ZipFold which took the air out of the room for some time
2013-09-08 02:19:58	wavewave	wrap2 :: (Num a) => (a -> a-> a) -> ArgType -> ArgType -> ArgType
2013-09-08 02:20:14	wavewave	depending on what constraints you want for 'op'
2013-09-08 02:20:19	k00mi	I'm surprised this works: "readLn :: (MonadIO m) => (Read a) => Producer' a m ()"
2013-09-08 02:20:33	k00mi	is it any different from (MonadIO m, Read a) => ?
2013-09-08 02:20:34	Tekmo	applicative: I never even knew about the `ZipFold` package before
2013-09-08 02:20:37	shachaf	k00mi: No.
2013-09-08 02:20:44	 *	hackagebot pipes-attoparsec 0.3.0 - Attoparsec and Pipes integration.  http://hackage.haskell.org/package/pipes-attoparsec-0.3.0 (RenzoCarbonara)
2013-09-08 02:20:47	shachaf	k00mi: It's also not valid in Haskell 2010, but GHC allows it.
2013-09-08 02:20:59	k00mi	ah, ok
2013-09-08 02:21:03	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-08 02:21:16	applicative	Tekmo: I wasn't thinking you did; but that it is a warning ;)
2013-09-08 02:21:19	wavewave	k00mi, shachaf: I wasn't aware of it. ;-)
2013-09-08 02:21:20	shachaf	k00mi: It even allows C a => Foo -> D a => Bar -> ...
2013-09-08 02:21:30	wavewave	cool
2013-09-08 02:21:31	Tekmo	applicative: haha
2013-09-08 02:21:41	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 02:21:45	Tekmo	applicative: The difference between me and Conal is that I take the time to promote the use of libraries
2013-09-08 02:21:46	<--	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has quit (Client Quit)
2013-09-08 02:22:00	<--	mgccl (827efffb@gateway/web/freenode/ip.130.126.255.251) has quit (Quit: Page closed)
2013-09-08 02:22:04	applicative	Tekmo: there are several really excellent posts about it by Conal; he promoted it into his version of excessive generality
2013-09-08 02:22:10	k00mi	shachaf: huh, I don't even know what behavior to expect from that
2013-09-08 02:22:18	edwardk	Tekmo: anyways, i just pushed folds to hackage. i don't want to step on your toes in this area, but i needed it for another project, and i need more than just left folds
2013-09-08 02:22:29	Tekmo	edwardk: I don't mind at all
2013-09-08 02:22:36	applicative	Tekmo: they predate your interest, but i would think the series of conal posts linked above were among the most widely read in their day
2013-09-08 02:22:40	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-08 02:22:47	edwardk	Tekmo feel free to steal any of my instances or laws
2013-09-08 02:22:54	Tekmo	edwardk: Will do ;)
2013-09-08 02:22:58	startling	I like ClassA a => ClassB b => c style better than parens; I only stopped using it because people laughed at me.
2013-09-08 02:23:05	edwardk	Tekmo: the comonad for M is quite interestingly different than the ones for L and R
2013-09-08 02:23:21	edwardk	and yet it supports the notion of a folding homomorphism just as well
2013-09-08 02:23:52	edwardk	notably when using 'M' you can 'prefix' or 'postfix' data on either side without leaking memory but with L or R you have to leak for one or the other
2013-09-08 02:24:09	edwardk	and it drops out as an emergent property of just reading the fold type off as other comonads
2013-09-08 02:24:10	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Client Quit)
2013-09-08 02:24:33	edwardk	my first attempt at M was wrong, as it made an illegal monoid for foldMap!
2013-09-08 02:24:33	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-08 02:25:04	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-09-08 02:25:16	startling	Neat. You don't often find illegal monoids.
2013-09-08 02:25:36	copumpkin	we need the monoid police
2013-09-08 02:25:44	 *	hackagebot folds 0.1 - Beautiful Folding  http://hackage.haskell.org/package/folds-0.1 (EdwardKmett)
2013-09-08 02:25:46	Tekmo	applicative: Here is the problem: http://packdeps.haskellers.com/reverse/ZipFold
2013-09-08 02:25:48	edwardk	startling: it was replacing the 'seed' with the result of the first fold. so using the comonad was making up a "monoid" where "mempty" was the previous tree!
2013-09-08 02:25:52	shachaf	startling: Hey, I made a maximally illegal monoid!
2013-09-08 02:25:59	shachaf	It's useful.
2013-09-08 02:26:16	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 264 seconds)
2013-09-08 02:26:28	 *	startling waits for hackage docs to be generated
2013-09-08 02:26:34	startling	shachaf, what does that look like?
2013-09-08 02:26:42	Tekmo	I noticed that Hackage uploading is much faster now
2013-09-08 02:26:49	startling	(what is "maximally illegal"?)
2013-09-08 02:26:55	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 260 seconds)
2013-09-08 02:27:03	sclv	we have raid one and one drive failed
2013-09-08 02:27:05	shachaf	I just mean that it breaks all the laws. Which I guess is pretty common for illegal monoids.
2013-09-08 02:27:12	startling	shachaf: oh, heh
2013-09-08 02:27:18	shachaf	> a <> b <> c
2013-09-08 02:27:19	lambdabot	  a <> b <> c
2013-09-08 02:27:23	benmachine	shachaf: heh, I was hoping something more dramatic
2013-09-08 02:27:24	shachaf	> (a <> b) <> c
2013-09-08 02:27:25	lambdabot	  (a <> b) <> c
2013-09-08 02:27:31	sclv	so we swapped it this morning, and then when we rebooted it fscked which took a while
2013-09-08 02:27:32	benmachine	like, every element is an identity except for mempty
2013-09-08 02:27:34	shachaf	> a <> mempty
2013-09-08 02:27:35	lambdabot	  a <> mempty
2013-09-08 02:27:42	sclv	and then copied stuff over to the other drive to resync
2013-09-08 02:27:42	startling	shachaf: oh, right.
2013-09-08 02:27:42	shachaf	benmachine: That would be a pretty good monoid.
2013-09-08 02:27:45	haasn	:t a
2013-09-08 02:27:46	lambdabot	Expr
2013-09-08 02:27:48	haasn	oh boy
2013-09-08 02:27:49	applicative	but it's so hard to make an illegal monoid
2013-09-08 02:27:51	benmachine	or there are only two inhabitants and (a <> b) <> c and a <> (b <> c) are always opposite ones
2013-09-08 02:28:03	sclv	but possibly it was just rebooting the box that cleaned up speed -- it had been up forever
2013-09-08 02:28:04	shachaf	benmachine: You could also break the closure law.
2013-09-08 02:28:08	shachaf	benmachine: But that's tricky in Haskell.
2013-09-08 02:28:09	benmachine	applicative: that's not entiiirely true
2013-09-08 02:28:14	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-08 02:28:17	startling	haasn, it's http://hackage.haskell.org/package/simple-reflect
2013-09-08 02:28:24	benmachine	shachaf: indeed. sometimes I don't see closure stated as a law, it's implicit in the types
2013-09-08 02:28:26	jmcarthur	shachaf: some might say if the result is _|_ when neither argument is _|_ then you have broken it
2013-09-08 02:28:34	benmachine	some might say that!
2013-09-08 02:28:37	<--	Eduard_Munteanu (~EduardMun@188.25.244.142) has quit (Read error: Operation timed out)
2013-09-08 02:28:41	elliott	I would say that.
2013-09-08 02:28:44	haasn	startling: yeah I didn't know Expr had a Monoid instance
2013-09-08 02:28:53	startling	shachaf: no one should parse show strings anyway.
2013-09-08 02:29:03	shachaf	Expr's Monoid instance is great.
2013-09-08 02:29:15	elliott	data Argh = Mon | Oid; instance Monoid Argh where mempty = Mon; mappend Mon _ = Mon; mappend _ Mon = Mon; mappend _ _ = undefined
2013-09-08 02:29:15	startling	> f >>= return
2013-09-08 02:29:16	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr (m0 b0))
2013-09-08 02:29:17	lambdabot	   arising from...
2013-09-08 02:29:27	applicative	Tekmo: did I mention before that foldls like 'all' and so on need a bit of a warning, since of course they are like using 'all' in ML or something
2013-09-08 02:29:41	shachaf	> foldMap (\x -> var [x]) (S.fromList "abcdef")
2013-09-08 02:29:42	lambdabot	  (((((mempty <> a) <> mempty) <> b) <> (mempty <> c) <> mempty) <> d) <> (me...
2013-09-08 02:29:44	shachaf	Just look at that!
2013-09-08 02:29:56	shachaf	Fortunately I got Milan to fix it.
2013-09-08 02:29:58	jmcarthur	to support Monoid properly i guess Expr would have to just be a free monoid... which leads to the idea that ideally Expr would be a "free everything"
2013-09-08 02:30:00	benmachine	applicative: in what way?
2013-09-08 02:30:11	applicative	benmachine: in what way what?
2013-09-08 02:30:21	shachaf	jmcarthur: I like that Expr exposes parenthesization and memptys.
2013-09-08 02:30:25	benmachine	applicative: all in ML
2013-09-08 02:30:34	jmcarthur	yeah that is quite nice :)
2013-09-08 02:30:40	shachaf	Or, at least, I like that something does it.
2013-09-08 02:30:40	benmachine	applicative: sorry, just curious
2013-09-08 02:30:47	shachaf	Which is why I wrote the magma thing.
2013-09-08 02:30:47	applicative	benmachine: it's just that it will continue to apply the predicate to the elements of the list even after it has failed
2013-09-08 02:30:58	benmachine	applicative: I don't think an ML all need do that necessarily
2013-09-08 02:31:08	applicative	benmachine: of course you can escape it
2013-09-08 02:31:28	jmcarthur	:t var
2013-09-08 02:31:29	lambdabot	String -> Expr
2013-09-08 02:31:31	benmachine	applicative: yeah, you just have to do so explicitly instead of reusing general fold combinators
2013-09-08 02:31:43	benmachine	unless they're fold combinators with an escape hatch
2013-09-08 02:31:54	applicative	fold (all even) [1,2,2,2,2,2,2,2,2,2,2] will apply even to the whole list, which isn't so bad with even
2013-09-08 02:32:05	jmcarthur	> mconcat $ foldMap (\x -> [var [x]]) (S.fromList "abcdef")
2013-09-08 02:32:06	lambdabot	  a <> b <> c <> d <> e <> f <> mempty
2013-09-08 02:32:08	benmachine	blink blink
2013-09-08 02:32:14	applicative	benmachine: i mean the fold in the foldl library
2013-09-08 02:32:14	benmachine	what type does all have?
2013-09-08 02:32:15	jmcarthur	aw, still shows mempty of course
2013-09-08 02:32:23	jmcarthur	was trying to recover the monoid laws that way
2013-09-08 02:32:37	shachaf	Well, it does sort of obey the monoid laws that way.
2013-09-08 02:32:44	shachaf	It'll always show exactly one mempty at the end.
2013-09-08 02:32:47	jmcarthur	i guess. everything is terminated with mempty
2013-09-08 02:33:03	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-08 02:33:10	jmcarthur	mm, that isn't true
2013-09-08 02:33:10	shachaf	λ> foldMap N (S.fromList [1,2,3,4,5,6])
2013-09-08 02:33:10	shachaf	(((((ε ◇ N 1) ◇ ε) ◇ N 2) ◇ ((ε ◇ N 3) ◇ ε)) ◇ N 4) ◇ ((ε ◇ N 5) ◇ ((ε ◇ N 6) ◇ ε))
2013-09-08 02:33:24	jmcarthur	ah, yes it is
2013-09-08 02:33:26	jmcarthur	i fooled myself
2013-09-08 02:33:57	shachaf	jmcarthur: And you are the easiest person to fool!
2013-09-08 02:34:00	shachaf	(So I hear.)
2013-09-08 02:34:21	<--	luksow (~luke@dslb-094-223-095-085.pools.arcor-ip.net) has quit (Quit: Wychodzi)
2013-09-08 02:34:23	jmcarthur	i probably said that
2013-09-08 02:34:28	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 02:34:48	shachaf	I think Feynman said that.
2013-09-08 02:34:50	shachaf	I don't know.
2013-09-08 02:35:16	jmcarthur	Feynman said jmcarthur is the easiest person to fool?
2013-09-08 02:35:44	 *	hackagebot pipes-zlib 0.3.0 - Zlib compression and decompression for Pipes streams  http://hackage.haskell.org/package/pipes-zlib-0.3.0 (RenzoCarbonara)
2013-09-08 02:35:52	shachaf	He said that "you are the easiest person to fool".
2013-09-08 02:35:56	chirpsalot	jmcarthur: that would be a bad sign. :P
2013-09-08 02:36:16	shachaf	Maybe I should've used capture-avoiding substitution or something there.
2013-09-08 02:37:25	benmachine	use-mention distinct on "you"
2013-09-08 02:37:34	benmachine	+ion
2013-09-08 02:37:37	benmachine	ion: not you
2013-09-08 02:38:31	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 02:38:53	<--	abrahamd (~joey@108-91-85-94.lightspeed.cicril.sbcglobal.net) has quit (Quit: Leaving)
2013-09-08 02:38:54	<--	Platyhelminth (~Platyhelm@unaffiliated/platyhelminth) has quit (Quit: Leaving)
2013-09-08 02:39:36	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-08 02:42:12	-->	ekipan (4cd4e3ee@gateway/web/freenode/ip.76.212.227.238) has joined #haskell
2013-09-08 02:44:16	fiddlerwoaroof	does haskell have anything like virtualenv in python?
2013-09-08 02:44:21	Tekmo	hsenv
2013-09-08 02:44:27	Tekmo	and cabal sandbox now
2013-09-08 02:45:22	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-08 02:45:24	geekosaur	note that those provide different levels of sandboxing; cabal sandbox lets you sandbox packages, hsenv sandboxes entire compiler installations
2013-09-08 02:46:00	-->	CaptainK (~CaptainK@181.179.34.172) has joined #haskell
2013-09-08 02:46:22	fiddlerwoaroof	thanks, hsenv looks like what I was looking for.
2013-09-08 02:48:15	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 240 seconds)
2013-09-08 02:48:53	<--	Ox6abe (~ox6abe@tx-74-5-99-114.dhcp.embarqhsd.net) has quit (Remote host closed the connection)
2013-09-08 02:49:31	<--	joelb (~textual@user-64-9-235-52.googlewifi.com) has quit (Quit: Computer has gone to sleep.)
2013-09-08 02:50:39	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 268 seconds)
2013-09-08 02:50:56	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-08 02:51:10	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-08 02:51:57	-->	mm_freak_ (~milch@p5DD05079.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 02:52:16	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 02:52:33	<--	uvelichitel (~uvelichit@37.73.246.238) has quit (Remote host closed the connection)
2013-09-08 02:53:15	<--	mm_freak (~milch@p5DD0541F.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-08 02:53:59	<--	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has quit (Ping timeout: 250 seconds)
2013-09-08 02:54:14	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 02:54:18	-->	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has joined #haskell
2013-09-08 02:55:24	<--	mavzuna (~mavzuna@unaffiliated/mavzuna) has left #haskell
2013-09-08 02:56:06	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Remote host closed the connection)
2013-09-08 02:56:20	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-08 02:56:28	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 02:56:55	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-08 02:56:56	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 02:58:16	<--	CaptainK (~CaptainK@181.179.34.172) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 03:00:51	<--	crocket (~crocket@unaffiliated/crocket) has left #haskell ("Leaving")
2013-09-08 03:01:21	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-09-08 03:01:24	-->	eriksensei1 (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 03:01:26	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 03:02:27	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 03:05:45	 *	hackagebot pipes-aeson 0.2.0 - Encode and decode JSON streams using Aeson and Pipes.  http://hackage.haskell.org/package/pipes-aeson-0.2.0 (RenzoCarbonara)
2013-09-08 03:06:57	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Read error: Operation timed out)
2013-09-08 03:09:44	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 03:09:46	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-08 03:10:20	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-08 03:11:30	<--	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has quit (Read error: Operation timed out)
2013-09-08 03:11:41	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-08 03:12:27	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-08 03:12:27	<--	eriksensei1 (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-08 03:12:28	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-09-08 03:12:37	<--	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has quit (Ping timeout: 250 seconds)
2013-09-08 03:12:41	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-08 03:13:03	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-08 03:13:09	-->	markcw (~jack@2601:d:1680:3a9:6c63:c533:a799:c782) has joined #haskell
2013-09-08 03:13:54	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 03:14:24	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-08 03:15:02	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 03:15:49	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 03:16:36	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-08 03:16:36	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Client Quit)
2013-09-08 03:17:01	pharaun	nice bunch of pipes-x stuff coming in :)
2013-09-08 03:18:03	<--	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-08 03:18:20	<--	markcw (~jack@2601:d:1680:3a9:6c63:c533:a799:c782) has quit (Ping timeout: 245 seconds)
2013-09-08 03:18:51	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-08 03:19:35	-->	tim (~quassel@91-119-129-43.dynamic.xdsl-line.inode.at) has joined #haskell
2013-09-08 03:19:56	<--	timblechmann (~quassel@91-119-96-207.dynamic.xdsl-line.inode.at) has quit (Ping timeout: 240 seconds)
2013-09-08 03:19:59	-->	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 03:20:44	<--	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has quit (Ping timeout: 260 seconds)
2013-09-08 03:20:59	pharaun	what ever happened to hackage 2?
2013-09-08 03:21:32	geekosaur	slowly progressing
2013-09-08 03:21:46	geekosaur	http://new-hackage.haskell.org is a thing
2013-09-08 03:21:52	geekosaur	dunno how often they sync it
2013-09-08 03:22:09	pharaun	yeah i just tried it, i noticed and its down so that's what made me ask :)
2013-09-08 03:22:22	Demos	it is still down, geez
2013-09-08 03:22:32	sm	http://new-new-hackage.haskell.org/ is up (at the moment)
2013-09-08 03:22:34	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 03:22:40	pharaun	new-new? :)
2013-09-08 03:22:40	geekosaur	oy
2013-09-08 03:22:45	sm	don't ask
2013-09-08 03:22:52	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-08 03:23:01	pharaun	oh its beta now
2013-09-08 03:23:03	startling	pharaun, newer than old-new, akak new
2013-09-08 03:23:07	geekosaur	o.O
2013-09-08 03:23:36	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-08 03:23:38	shachaf	Just skip ahead to fix-new-hackage.haskell.org
2013-09-08 03:23:51	<--	maximveksler (~maximveks@50-204-67-228-static.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-09-08 03:23:57	-->	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has joined #haskell
2013-09-08 03:24:12	startling	turns out naming subdomains in a time-sensitive way is a bad idea.
2013-09-08 03:24:29	-->	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has joined #haskell
2013-09-08 03:25:13	pharaun	you can "register" an account, that's nice
2013-09-08 03:25:29	pharaun	just recently requested hackage access so that's how i noticed the new thing
2013-09-08 03:26:23	pharaun	oh they're hoping to switch to new around the icfp
2013-09-08 03:26:31	pharaun	that's pretty soon
2013-09-08 03:26:59	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 03:27:06	joelteon	it hasn't sent my email yet :(
2013-09-08 03:28:45	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Quit: Bye!)
2013-09-08 03:28:56	<--	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-08 03:29:03	<--	apaku (~apaku@x2f115d8.dyn.telefonica.de) has quit (Ping timeout: 264 seconds)
2013-09-08 03:29:16	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-08 03:29:32	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Quit: Leaving)
2013-09-08 03:29:44	-->	apaku (~apaku@x2f11e4b.dyn.telefonica.de) has joined #haskell
2013-09-08 03:30:09	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 03:30:53	-->	james111111 (~james1111@173-23-175-149.client.mchsi.com) has joined #haskell
2013-09-08 03:30:59	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-08 03:31:15	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-08 03:31:28	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-08 03:31:32	jfischoff	what flag do I pass to ghci to increase the stack size?
2013-09-08 03:32:02	jfischoff	oh I see nv
2013-09-08 03:32:11	<--	james111111 (~james1111@173-23-175-149.client.mchsi.com) has left #haskell
2013-09-08 03:32:15	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 260 seconds)
2013-09-08 03:32:40	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 03:33:40	-->	red_ (~red@184.152.11.142) has joined #haskell
2013-09-08 03:33:52	<--	Demos (~Demos@westquad-149252.reshall.umich.edu) has quit (Quit: Demos)
2013-09-08 03:34:50	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Quit: quit)
2013-09-08 03:35:36	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-08 03:36:03	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 03:36:07	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (Quit: leaving)
2013-09-08 03:36:11	-->	chexxor_netbook (~chexxor@114-43-140-26.dynamic.hinet.net) has joined #haskell
2013-09-08 03:38:08	-->	path[l] (~vsi@c-98-234-187-247.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 03:38:44	<--	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Read error: Connection reset by peer)
2013-09-08 03:39:44	-->	maximveksler (~maximveks@50-204-67-228-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 03:39:52	-->	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-08 03:40:04	-->	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has joined #haskell
2013-09-08 03:40:06	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-08 03:40:08	SrPx	Any reason Haskell doesn't allow for the conventional (λx.x*x) LC syntax? :(
2013-09-08 03:40:43	<--	tefter (~tefter@87.250.40.232) has quit (Remote host closed the connection)
2013-09-08 03:40:46	 *	hackagebot cabal-audit 0.3.0.0 - Check how up-to-date your .cabal dependencies are.  http://hackage.haskell.org/package/cabal-audit-0.3.0.0 (JoelTaylor)
2013-09-08 03:41:52	-->	talzeus (~studybot_@softbank221103169115.bbtec.net) has joined #haskell
2013-09-08 03:43:14	geekosaur	because haskell allows identifiers to use non-ascii symbols. λ is a Greek letter
2013-09-08 03:43:29	geekosaur	note *letter*, not "convenient symbol for you to appropriate"
2013-09-08 03:43:36	ekipan	if you insist on lambda, why not also the middle dot instead of the asterisk for mulitplication?
2013-09-08 03:43:53	ekipan	ascii is usable by everyone at least
2013-09-08 03:44:03	sm	joelteon: hi, is cabal-audit better than packdeps ?
2013-09-08 03:44:05	-->	Heero (~Heero@c-98-232-98-240.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 03:44:05	<--	Heero (~Heero@c-98-232-98-240.hsd1.wa.comcast.net) has quit (Changing host)
2013-09-08 03:44:05	-->	Heero (~Heero@unaffiliated/heero) has joined #haskell
2013-09-08 03:44:50	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-08 03:45:46	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-08 03:45:57	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Ping timeout: 240 seconds)
2013-09-08 03:46:11	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-08 03:46:26	startling	there might be a lambda codepoint for math.
2013-09-08 03:46:28	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-08 03:46:58	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-08 03:47:19	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-08 03:47:40	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 03:48:11	geekosaur	there might be one now, there wasn't in older revisions of unicode and font support is always diey
2013-09-08 03:48:14	geekosaur	*dicey
2013-09-08 03:48:14	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 03:48:29	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Read error: Connection reset by peer)
2013-09-08 03:49:01	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-08 03:49:26	<--	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has quit (Ping timeout: 248 seconds)
2013-09-08 03:49:31	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-08 03:49:43	-->	u__ (~phillip@adsl-75-57-171-214.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 03:51:24	-->	JobV1 (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 03:51:58	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-08 03:52:04	<--	JobV1 (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-09-08 03:52:42	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 03:52:43	<--	u_ (~phillip@adsl-75-57-174-213.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-08 03:52:56	<--	Heero (~Heero@unaffiliated/heero) has quit (Quit: Leaving)
2013-09-08 03:53:28	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-08 03:54:17	-->	scripty (~scripty@117.192.161.224) has joined #haskell
2013-09-08 03:54:51	<--	k0001 (~k0001@host5.186-125-116.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-09-08 03:55:25	red_	am i here
2013-09-08 03:55:30	copumpkin	nope
2013-09-08 03:55:34	copumpkin	only I am here
2013-09-08 03:55:38	ahill-89	There's a deep metaphysical question for you.
2013-09-08 03:56:03	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Ping timeout: 264 seconds)
2013-09-08 03:56:09	SrPx	hm ok
2013-09-08 03:56:35	red_	if i have a list [1..7], is there an obvious fcn i'm overlooking to perform some fcn in this order (1*(1*2)*(1*2*3)*(1*2*3*4)) etc?
2013-09-08 03:56:42	scripty	5/=5  : False ? I thought i'll get error
2013-09-08 03:56:51	red_	this seems like it should be very obvious
2013-09-08 03:57:02	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-08 03:57:08	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 260 seconds)
2013-09-08 03:57:47	ekipan	> inits "abcd"
2013-09-08 03:57:47	lambdabot	  ["","a","ab","abc","abcd"]
2013-09-08 03:57:56	geekosaur	scripty, why?
2013-09-08 03:57:57	erisco	@pl \x y -> compare x y == EQ
2013-09-08 03:58:00	lambdabot	flip (flip . ((==) .) . compare) EQ
2013-09-08 03:58:01	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-08 03:58:14	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-08 03:58:37	scripty	geekosaur , the left hand must be variable right ?
2013-09-08 03:58:48	geekosaur	no?
2013-09-08 03:58:54	scripty	num+=7;
2013-09-08 03:59:06	scripty	I dont understand
2013-09-08 03:59:07	geekosaur	errrr
2013-09-08 03:59:15	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-08 03:59:21	geekosaur	haskell doesn;t have "variables" in the sense implied by that
2013-09-08 03:59:25	ahill-89	:t (/=)
2013-09-08 03:59:26	lambdabot	Eq a => a -> a -> Bool
2013-09-08 03:59:35	geekosaur	and /= is what C-like languages call !=
2013-09-08 03:59:36	ekipan	 (/=) is the "not equal" operator, spelled != in various other languages
2013-09-08 04:00:05	jfischoff	red_: product $ map product $ inits [1..7]
2013-09-08 04:00:23	-->	gabriel__ (~gabriel@r186-51-56-169.static.adinet.com.uy) has joined #haskell
2013-09-08 04:00:52	erisco	> product . map product . inits $ [1..7]
2013-09-08 04:00:53	scripty	OMG! peculiar i though it was compound operator
2013-09-08 04:00:53	lambdabot	  125411328000
2013-09-08 04:01:06	startling	OH. hahaha
2013-09-08 04:01:07	erisco	jfischoff, hey I like dollar too but
2013-09-08 04:01:26	geekosaur	you wont find C's op= operators in Haskell because they imply variables of a kind Haskell doesn't have
2013-09-08 04:01:34	jfischoff	erisco: dollar is easier for beginners
2013-09-08 04:01:53	shachaf	Well, except when you implement them yourself. But you shouldn't worry about that yet.
2013-09-08 04:01:56	-->	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has joined #haskell
2013-09-08 04:01:57	geekosaur	(not directly at least; there are IORefs and such but those can't be used quite as blithely as C and friends toss around op=)
2013-09-08 04:01:57	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-08 04:01:57	startling	scripty, in any case, 5 / 5 isn't an error ...
2013-09-08 04:02:02	-->	Gentlecat__ (~Roman@79.105.223.70) has joined #haskell
2013-09-08 04:02:15	ekipan	ref *= x = modifyIORef (* x) ref
2013-09-08 04:03:01	geekosaur	startling, that's not the point. in C-like languages, x /= y means divide x by y and store result in x
2013-09-08 04:03:18	shachaf	:t (+=)
2013-09-08 04:03:19	lambdabot	(Num a, MonadState s m) => ASetter' s a -> a -> m ()
2013-09-08 04:03:21	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-08 04:03:26	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Client Quit)
2013-09-08 04:03:47	startling	geekosaur, why would 5 /= 5 ever be an error? because '5' isn't a variable?
2013-09-08 04:04:04	geekosaur	see what I just said
2013-09-08 04:04:09	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-08 04:04:15	geekosaur	in C it's an error because the thing on the left is not an "lvalue"
2013-09-08 04:04:22	<--	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Read error: Connection reset by peer)
2013-09-08 04:04:30	geekosaur	5 /= 5, in C-like languages, is something like: 5 = 5 / 5
2013-09-08 04:04:32	startling	yes, I know.
2013-09-08 04:04:37	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-08 04:04:48	geekosaur	which is why someone expecting C-like syntax would expect 5 /= 5 to be an error
2013-09-08 04:05:00	<--	scripty (~scripty@117.192.161.224) has quit (Read error: Connection reset by peer)
2013-09-08 04:05:03	<--	DanielDiaz (~dhelta@80.31.224.3) has left #haskell
2013-09-08 04:05:22	-->	scripty (~scripty@117.192.161.224) has joined #haskell
2013-09-08 04:05:38	startling	I guess my mistake is imagining a haskell-like language where (/=) is divide-assign and interpreting scripty's question in terms of that.
2013-09-08 04:05:39	-->	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-08 04:05:41	<--	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has quit (Quit: leaving)
2013-09-08 04:05:53	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-08 04:05:57	-->	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has joined #haskell
2013-09-08 04:06:40	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2013-09-08 04:06:42	shachaf	lens calls it (//=)
2013-09-08 04:06:56	ekipan	you'd have to make 5 be an assignable-to thing, which I suppose you could do with an appropriate Num instance
2013-09-08 04:07:31	ekipan	perhaps *inappropriate* would describe it better
2013-09-08 04:07:41	startling	instance Num (Lens' a b) where ...
2013-09-08 04:07:48	shachaf	> (`runState` (20,"hi")) $ do { _1 //= 10; _2.mapped %= toUpper }
2013-09-08 04:07:50	lambdabot	  ((),(2.0,"HI"))
2013-09-08 04:08:14	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-08 04:09:37	<--	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 240 seconds)
2013-09-08 04:10:52	 *	hackagebot folds 0.2 - Beautiful Folding  http://hackage.haskell.org/package/folds-0.2 (EdwardKmett)
2013-09-08 04:11:43	startling	the hackage docs for 0.1 aren't even ready yet. :'(
2013-09-08 04:12:08	-->	james111111 (~james1111@173-23-175-149.client.mchsi.com) has joined #haskell
2013-09-08 04:12:40	shachaf	http://ekmett.github.io/folds/
2013-09-08 04:13:12	<--	james111111 (~james1111@173-23-175-149.client.mchsi.com) has left #haskell
2013-09-08 04:13:26	erisco	:t foldr1
2013-09-08 04:13:27	lambdabot	(a -> a -> a) -> [a] -> a
2013-09-08 04:14:15	erisco	@pl \x y -> compare (f x) (f y)
2013-09-08 04:14:19	lambdabot	flip ((.) . compare . f) f
2013-09-08 04:14:19	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-08 04:14:59	ekipan	@src on
2013-09-08 04:15:00	lambdabot	(*) `on` f = \x y -> f x * f y
2013-09-08 04:15:14	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-08 04:15:35	-->	jfischoff_ (~jfischoff@66.140.190.154) has joined #haskell
2013-09-08 04:16:34	red_	command for flattening a list?
2013-09-08 04:16:48	red_	:t flatM
2013-09-08 04:16:49	lambdabot	Not in scope: `flatM'
2013-09-08 04:16:51	<--	gabriel__ (~gabriel@r186-51-56-169.static.adinet.com.uy) has quit (Ping timeout: 256 seconds)
2013-09-08 04:16:58	ekipan	@hoogle [[a]] -> [a]
2013-09-08 04:16:58	lambdabot	Prelude concat :: [[a]] -> [a]
2013-09-08 04:16:58	lambdabot	Data.List concat :: [[a]] -> [a]
2013-09-08 04:16:58	lambdabot	Data.List intercalate :: [a] -> [[a]] -> [a]
2013-09-08 04:16:59	erisco	red_, what do you mean by flatten?
2013-09-08 04:17:10	red_	Just Just x = Just x
2013-09-08 04:17:18	red_	[[1],[2]] = [1,2]
2013-09-08 04:17:22	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-08 04:17:23	--	functorfun is now known as funfunctor
2013-09-08 04:17:27	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 04:17:39	-->	katachrome (~lily@harr033-0701-dhcp216.bu.edu) has joined #haskell
2013-09-08 04:17:42	ekipan	@type join
2013-09-08 04:17:43	lambdabot	Monad m => m (m a) -> m a
2013-09-08 04:17:45	erisco	red_, as ekipan pointed out, you'll want to check Hoogle for questions like these
2013-09-08 04:18:08	<--	anachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Ping timeout: 258 seconds)
2013-09-08 04:18:12	SrPx	why this doesnt work? :/ `x [] = []; main = do putStrLn $ show (x [])`
2013-09-08 04:18:15	red_	ok thanks .. i have yet to realize how helpful hoogle can be . but i guess you can learn a lot form knowing a type signature
2013-09-08 04:18:50	SrPx	show "testing the bot"
2013-09-08 04:18:58	erisco	red_, some things. there is not a single way to go from [[a]] to [a]
2013-09-08 04:18:58	SrPx	lambdabot: help
2013-09-08 04:19:05	SrPx	grr.
2013-09-08 04:19:09	ekipan	> let x [] = [] in show (x [])
2013-09-08 04:19:10	lambdabot	  "[]"
2013-09-08 04:19:11	red_	erisco: surely
2013-09-08 04:19:24	SrPx	why it doesn't work here...?!
2013-09-08 04:19:29	scripty	>
2013-09-08 04:19:56	ekipan	@paste it, it's probably a simple syntax error
2013-09-08 04:19:57	lambdabot	Haskell pastebin: http://lpaste.net/
2013-09-08 04:19:58	SrPx	I mean, the code
2013-09-08 04:20:11	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-08 04:20:29	SrPx	http://lpaste.net/92722
2013-09-08 04:21:53	<--	erisco (~erisco@198-91-210-150.cpe.distributel.net) has quit (Quit: Leaving)
2013-09-08 04:22:11	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 260 seconds)
2013-09-08 04:23:47	ekipan	it's saying it doesn't know which "show" function to use
2013-09-08 04:23:50	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-09-08 04:24:15	ekipan	the empty list could be of any element type, try fixing its type with an annotation
2013-09-08 04:24:34	ekipan	presumably lambdabot has more type defaulting
2013-09-08 04:24:53	ekipan	> let x [] = [] in show (x ([]::[Char]))
2013-09-08 04:24:54	lambdabot	  "[]"
2013-09-08 04:25:02	<--	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-09-08 04:25:55	<--	tolt (~Kevin@209.65.15.42) has quit (Ping timeout: 256 seconds)
2013-09-08 04:26:15	-->	rodrigov_ (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-08 04:26:28	ekipan	> let x [] = [] in show (x [] :: [Char])
2013-09-08 04:26:29	lambdabot	  "\"\""
2013-09-08 04:26:41	-->	tolt (~Kevin@209.65.15.42) has joined #haskell
2013-09-08 04:27:05	<--	tabemann (~travisb@adsl-68-248-227-96.dsl.milwwi.ameritech.net) has quit (Ping timeout: 245 seconds)
2013-09-08 04:27:22	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-08 04:28:12	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-08 04:28:30	ekipan	hmm, how DOES one ask lambdabot which type she defaults in an > subexpression?
2013-09-08 04:28:40	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 264 seconds)
2013-09-08 04:28:52	SrPx	... :|
2013-09-08 04:28:53	SrPx	okay
2013-09-08 04:28:58	-->	refold (~gman@h-129-27.a258.priv.bahnhof.se) has joined #haskell
2013-09-08 04:29:06	SrPx	also, how do I ":t" on Haskell? (not on lambdabot nor the repl)
2013-09-08 04:29:13	SrPx	:t [2,3]
2013-09-08 04:29:13	ekipan	@type ()
2013-09-08 04:29:14	lambdabot	Num t => [t]
2013-09-08 04:29:14	lambdabot	()
2013-09-08 04:29:15	arkeet	SrPx: you don't.
2013-09-08 04:29:20	SrPx	ekipan: thanks
2013-09-08 04:29:23	SrPx	arkeet: why?
2013-09-08 04:29:47	arkeet	what exactly do you mean?
2013-09-08 04:29:53	geekosaur	what would :t do in a program?
2013-09-08 04:29:53	SrPx	ekipan: no, it doesn't work?
2013-09-08 04:30:04	ekipan	I misread your message
2013-09-08 04:30:09	SrPx	geekosaur: return a string representing the type of the expression?
2013-09-08 04:30:16	SrPx	exactly as lambdabot does
2013-09-08 04:30:22	enthropy	> typeOf ()
2013-09-08 04:30:23	lambdabot	  ()
2013-09-08 04:30:29	arkeet	> typeOf id
2013-09-08 04:30:30	lambdabot	  No instance for (Data.Typeable.Internal.Typeable a0)
2013-09-08 04:30:30	lambdabot	   arising from a use ...
2013-09-08 04:30:32	ekipan	> show (typeOf ())
2013-09-08 04:30:33	lambdabot	  "()"
2013-09-08 04:30:36	startling	:t typeOf
2013-09-08 04:30:37	lambdabot	Typeable a => a -> TypeRep
2013-09-08 04:30:49	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-08 04:30:58	SrPx	arkeet: not in cope
2013-09-08 04:30:58	geekosaur	if it's a program, the type is known at compile time so it would be something of a no-op.
2013-09-08 04:31:00	SrPx	scope*
2013-09-08 04:31:05	startling	SrPx, haskell is not dependently typed!
2013-09-08 04:31:06	geekosaur	Data.Typeable
2013-09-08 04:31:08	ekipan	@hoogle Typeable
2013-09-08 04:31:08	lambdabot	Data.Typeable module Data.Typeable
2013-09-08 04:31:08	lambdabot	Data.Typeable class Typeable a
2013-09-08 04:31:08	lambdabot	Data.Typeable class Typeable1 t
2013-09-08 04:31:11	arkeet	SrPx: it's a Typeable thing. but it's very limited.
2013-09-08 04:31:18	elliott	typeOf is not an answer here.
2013-09-08 04:31:22	arkeet	only works on Typeable instances, and doesn't do polymorphic things. so ^
2013-09-08 04:31:27	elliott	it doesn't even give useful polymorphism info or anything
2013-09-08 04:31:31	-->	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-08 04:31:54	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-08 04:31:56	red_	>[(a,b) | a <- [1..10], b <-[10..1]]
2013-09-08 04:32:00	arkeet	I don't know if there's some TH way of doing it.
2013-09-08 04:32:07	arkeet	red_: needs a space after >
2013-09-08 04:32:16	arkeet	> [10..1]
2013-09-08 04:32:18	lambdabot	  []
2013-09-08 04:32:20	red_	> [(a,b) | a <- [1..10], b <-[10..1]]
2013-09-08 04:32:22	lambdabot	  []
2013-09-08 04:32:31	arkeet	> [10,9..1]
2013-09-08 04:32:32	ekipan	> [10..1]
2013-09-08 04:32:33	lambdabot	  [10,9,8,7,6,5,4,3,2,1]
2013-09-08 04:32:33	lambdabot	  can't find file: L.hs
2013-09-08 04:32:34	enthropy	arkeet: reify 'x  will sometimes have something to say about the type of x
2013-09-08 04:32:36	red_	oh durrr
2013-09-08 04:32:41	red_	10,9
2013-09-08 04:32:42	red_	thx
2013-09-08 04:33:01	enthropy	it will if the thing is imported from another module
2013-09-08 04:33:40	-->	[JJ]Albert (443a5adf@gateway/web/freenode/ip.68.58.90.223) has joined #haskell
2013-09-08 04:33:41	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 04:34:03	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-08 04:34:06	<--	scripty (~scripty@117.192.161.224) has quit (Read error: Connection reset by peer)
2013-09-08 04:34:07	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-09-08 04:34:28	<--	startling (~startling@162-225-240-170.lightspeed.cicril.sbcglobal.net) has quit (Quit: leaving)
2013-09-08 04:35:22	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 04:35:23	--	jfischoff_ is now known as jfischoff
2013-09-08 04:35:47	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-08 04:36:11	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-08 04:37:35	-->	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has joined #haskell
2013-09-08 04:38:03	NemesisD	are tuplesections considered harmless
2013-09-08 04:38:15	<--	Gentlecat__ (~Roman@79.105.223.70) has quit (Read error: Connection reset by peer)
2013-09-08 04:38:53	-->	tabemann (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-08 04:39:12	red_	ok i have a list [a1,a2,a3,a4,..] and i want the following (a1*a1 then (a1+a2)*a2 then (a1+a2+a3)*a3, etc.  i know i can use inits to get the successive sums, but i need to 'access' the original list.  is this mutual recursion? is this way easy?
2013-09-08 04:39:27	haasn	NemesisD: yes, but they can get slightly unreadable at times
2013-09-08 04:39:42	elliott	red_: access howso?
2013-09-08 04:40:01	haasn	red_: zipWith (*) xs (map sum (tails xs))
2013-09-08 04:40:04	haasn	I think
2013-09-08 04:40:11	red_	in an imperative mindset ,, I am multiplying a3 by the sum of what came before it
2013-09-08 04:40:17	haasn	> let xs = [a,b,c] in zipWith (*) xs (map sum (tails xs))
2013-09-08 04:40:17	lambdabot	  [a * (0 + a + b + c),b * (0 + b + c),c * (0 + c)]
2013-09-08 04:40:40	haasn	> let xs = [a,b,c] in zipWith (*) xs (map sum (inits xs))
2013-09-08 04:40:41	lambdabot	  [a * 0,b * (0 + a),c * (0 + a + b)]
2013-09-08 04:40:52	-->	ihm1_ (~izzy@cpe-72-225-231-212.nyc.res.rr.com) has joined #haskell
2013-09-08 04:40:59	haasn	well you get the idea
2013-09-08 04:41:00	<--	RylandAlmanza (~RylandAlm@unaffiliated/rylandalmanza) has quit (Quit: Lost terminal)
2013-09-08 04:41:16	red_	i WILL get the idea when i spend 5 minutes staring at it
2013-09-08 04:41:18	red_	:)
2013-09-08 04:41:38	ekipan	> zipWith (*) [a, b, c] [d, e, f]
2013-09-08 04:41:39	lambdabot	  [a * d,b * e,c * f]
2013-09-08 04:41:47	<--	[JJ]Albert (443a5adf@gateway/web/freenode/ip.68.58.90.223) has left #haskell
2013-09-08 04:43:30	<--	mobileblue (~mobileblu@dslb-094-218-073-219.pools.arcor-ip.net) has quit (Ping timeout: 268 seconds)
2013-09-08 04:43:32	<--	katachrome (~lily@harr033-0701-dhcp216.bu.edu) has quit (Quit: leaving)
2013-09-08 04:43:36	shachaf	Why map sum . inits and not scanl?
2013-09-08 04:43:40	shachaf	(Or actually scanl1 in this case.)
2013-09-08 04:43:56	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 04:44:03	<--	ihm1 (~izzy@107.14.54.0) has quit (Ping timeout: 264 seconds)
2013-09-08 04:44:03	--	ihm1_ is now known as ihm1
2013-09-08 04:44:07	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Ping timeout: 260 seconds)
2013-09-08 04:44:07	haasn	because I don't have scanl in my active memory!
2013-09-08 04:44:14	red_	:t scanl
2013-09-08 04:44:16	lambdabot	(a -> b -> a) -> a -> [b] -> [a]
2013-09-08 04:44:17	-->	mobileblue (~mobileblu@dslb-094-218-066-149.pools.arcor-ip.net) has joined #haskell
2013-09-08 04:44:19	haasn	> let xs = [a,b,c] in zipWith (*) xs (scanl1 (+) xs)
2013-09-08 04:44:20	lambdabot	  [a * a,b * (a + b),c * (a + b + c)]
2013-09-08 04:44:25	haasn	shachaf++
2013-09-08 04:44:35	red_	i like that
2013-09-08 04:44:45	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 04:44:58	elliott	> (zipWith (*) <*> scanl1 (+)) [a,b,c]
2013-09-08 04:44:59	lambdabot	  [a * a,b * (a + b),c * (a + b + c)]
2013-09-08 04:45:11	-->	jzl (~jzl@ec2-23-21-191-143.compute-1.amazonaws.com) has joined #haskell
2013-09-08 04:45:16	SrPx	how to get the element before tail?
2013-09-08 04:45:30	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-08 04:45:32	shachaf	I veto elliott's @plification.
2013-09-08 04:45:45	<--	watermind (~wm@bl19-223-243.dsl.telepac.pt) has quit (Quit: Konversation terminated!)
2013-09-08 04:45:50	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-08 04:46:01	copumpkin	SrPx: tail . init
2013-09-08 04:46:14	copumpkin	oh wait
2013-09-08 04:46:16	copumpkin	last . init
2013-09-08 04:46:19	copumpkin	I think that's what you're talking about?
2013-09-08 04:46:38	ekipan	> (last . init) "abcde"
2013-09-08 04:46:38	lambdabot	  'd'
2013-09-08 04:46:59	SrPx	good one, thanks
2013-09-08 04:47:08	haasn	> "abcde"^?reversed.ix 1
2013-09-08 04:47:10	lambdabot	  Just 'd'
2013-09-08 04:47:20	shachaf	If you keep guessing what people mean, they'll never learn to express themselves clearly!
2013-09-08 04:48:23	SrPx	> take 10 x where x = 0 : 1 : init x
2013-09-08 04:48:24	lambdabot	  <hint>:1:11: parse error on input `where'
2013-09-08 04:48:48	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (Quit: Ik ga weg)
2013-09-08 04:48:49	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-08 04:49:19	SrPx	> let x = 0 : 1 : init x in take 10 x
2013-09-08 04:49:19	lambdabot	  [0,1,0,1,0,1,0,1,0,1]
2013-09-08 04:49:41	SrPx	> let x = 0 : 1 : (tail . init) x in take 10 x
2013-09-08 04:49:49	lambdabot	  mueval-core: Time limit exceeded
2013-09-08 04:50:14	ekipan	init on an infinite list is still infinite, and thus has no last
2013-09-08 04:50:15	<--	talzeus (~studybot_@softbank221103169115.bbtec.net) has quit (Remote host closed the connection)
2013-09-08 04:50:30	ekipan	erm wait
2013-09-08 04:51:03	haasn	‘init’ on an infinite list is effectively ‘id’
2013-09-08 04:51:24	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-08 04:51:25	copumpkin	> let x = 0 : 1 : tail x in take 10 x
2013-09-08 04:51:26	lambdabot	  [0,1,1,1,1,1,1,1,1,1]
2013-09-08 04:51:34	copumpkin	hashcat: not quite, it seems :)
2013-09-08 04:51:37	copumpkin	haasn
2013-09-08 04:51:47	haasn	> let x = 0 : 1 : init (tail x) in take 10 x
2013-09-08 04:51:54	lambdabot	  mueval-core: Time limit exceeded
2013-09-08 04:52:01	 *	haasn scratches head
2013-09-08 04:52:15	copumpkin	you need to think about how productive it is
2013-09-08 04:52:26	haasn	@src init
2013-09-08 04:52:26	lambdabot	init [x]    = []
2013-09-08 04:52:26	lambdabot	init (x:xs) = x : init xs
2013-09-08 04:52:26	lambdabot	init []     = undefined
2013-09-08 04:52:27	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-08 04:52:45	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-08 04:52:56	haasn	> let x = 0 : 1 : 2 : tail (init x) in take 10 x
2013-09-08 04:52:57	lambdabot	  [0,1,2,1,2,1,2,1,2,1]
2013-09-08 04:53:13	copumpkin	so it forces two levels down
2013-09-08 04:53:19	<--	red_ (~red@184.152.11.142) has quit (Quit: leaving)
2013-09-08 04:53:24	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Quit: cekilicy)
2013-09-08 04:53:49	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Quit: Bye!)
2013-09-08 04:54:02	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-08 04:55:04	<--	ihm1 (~izzy@cpe-72-225-231-212.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-08 04:55:07	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-08 04:55:09	--	u__ is now known as u_
2013-09-08 04:55:22	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 04:55:47	-->	ihm1 (~izzy@cpe-72-225-231-212.nyc.res.rr.com) has joined #haskell
2013-09-08 04:55:56	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-08 04:56:02	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-08 04:57:16	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-09-08 04:57:51	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-08 05:00:36	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-08 05:00:59	SrPx	oh it makes sense.
2013-09-08 05:01:06	SrPx	thanks
2013-09-08 05:01:39	 *	SrPx is amused with the fact you can refer to a variable inside itself
2013-09-08 05:02:05	haasn	recursion is pretty standard
2013-09-08 05:03:40	ekipan	> cycle "lo"
2013-09-08 05:03:41	lambdabot	  "lololololololololololololololololololololololololololololololololololololo...
2013-09-08 05:03:45	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 05:04:44	ekipan	@src cycle
2013-09-08 05:04:45	lambdabot	cycle [] = undefined
2013-09-08 05:04:45	lambdabot	cycle xs = xs' where xs' = xs ++ xs'
2013-09-08 05:04:56	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-08 05:04:57	SrPx	Is there a function that takes a list and returns every consecutive pair / triple? eg f [0,1,2,3,4] == [[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1]]
2013-09-08 05:05:07	-->	otto_s_ (~user@cotb-4db35db8.pool.mediaWays.net) has joined #haskell
2013-09-08 05:05:34	ekipan	> (map (take 2) . tails) "abcdefg"
2013-09-08 05:05:35	lambdabot	  ["ab","bc","cd","de","ef","fg","g",""]
2013-09-08 05:05:49	haasn	> zipWith drop [0..] (repeat (cycle [0..4]))
2013-09-08 05:05:50	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-08 05:05:50	lambdabot	  [[0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,0,1...
2013-09-08 05:05:55	haasn	oh
2013-09-08 05:06:06	<--	refold (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Quit: leaving)
2013-09-08 05:06:16	haasn	> zipWith (\n -> take 3 . drop n) [0..] (repeat (cycle [0..4]))
2013-09-08 05:06:17	lambdabot	  [[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1],[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4...
2013-09-08 05:06:26	haasn	there's probably a better solution :)
2013-09-08 05:06:33	shachaf	> (\l -> zipWith const (map (take 3) (tails (cycle l))) l) "abcdefg"
2013-09-08 05:06:34	lambdabot	  ["abc","bcd","cde","def","efg","fga","gab"]
2013-09-08 05:07:02	SrPx	ekipan: wat. you are mapping `((take 2) . tails)` to a list? `((take 2) . tails)` of 'a' makes no sense.
2013-09-08 05:07:12	SrPx	wait, tails. let me check that function
2013-09-08 05:07:17	<--	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has quit (Ping timeout: 256 seconds)
2013-09-08 05:07:22	shachaf	But on the other hand why am I helping? It won't help.
2013-09-08 05:07:23	ekipan	(map (take 2)) . tails
2013-09-08 05:07:31	ekipan	function application has highest precedence
2013-09-08 05:07:37	ekipan	over all other operators
2013-09-08 05:07:39	<--	shachaf (~shachaf@unaffiliated/shachaf) has left #haskell
2013-09-08 05:07:41	haasn	> let xs = [0..4] zipWith (\n -> take 3 . drop n) [0..] (cycle <$> xs <$ xs)
2013-09-08 05:07:42	lambdabot	  not an expression: `let xs = [0..4] zipWith (\n -> take 3 . drop n) [0..] (...
2013-09-08 05:07:47	haasn	> let xs = [0..4] in zipWith (\n -> take 3 . drop n) [0..] (cycle <$> xs <$ xs)
2013-09-08 05:07:48	SrPx	schahow not?
2013-09-08 05:07:48	lambdabot	  No instance for (GHC.Show.Show a0)
2013-09-08 05:07:48	lambdabot	   arising from a use of `M1091162098.sh...
2013-09-08 05:07:54	haasn	> let xs = [0..4] in zipWith (\n -> take 3 . drop n) [0..] (cycle <$> (xs <$ xs))
2013-09-08 05:07:55	lambdabot	  [[0,1,2],[1,2,3],[2,3,4],[3,4,0],[4,0,1]]
2013-09-08 05:08:02	SrPx	shachaf: how not?
2013-09-08 05:08:03	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-08 05:08:18	-->	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-08 05:08:23	SrPx	he quit :/
2013-09-08 05:08:52	<--	otto_s (~user@cotb-4d05bb97.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-08 05:09:35	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-08 05:10:03	-->	generic (~generic@p57B2DC10.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 05:10:04	SrPx	haasn: (=
2013-09-08 05:10:10	haasn	somebody remind me about what the difference between *> and >> is for Monads
2013-09-08 05:11:10	SrPx	haasn: too complex to me though. <$> and <$...
2013-09-08 05:11:43	-->	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has joined #haskell
2013-09-08 05:12:07	enthropy	haasn: the Applicative <*> doesn't have to be the same as Monad ap
2013-09-08 05:12:16	applicative	is there one to speak of     (*>) = liftA2 (const id)
2013-09-08 05:12:24	ekipan	if it isn't the same, I'd call that a bug
2013-09-08 05:12:26	enthropy	but I don't think base has anything like that
2013-09-08 05:12:27	haasn	enthropy: are you sure?
2013-09-08 05:12:53	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 05:12:54	<--	jfischoff (~jfischoff@66.140.190.154) has quit (Quit: jfischoff)
2013-09-08 05:13:04	ekipan	the fact that Monad doesn't descend from Applicative is a bug in the standard, for which work is being done to correct
2013-09-08 05:13:25	enthropy	haasn: it would be legal to have ZipList be what you get for lists
2013-09-08 05:13:27	<--	xinming (~xinming@125.82.207.24) has quit (Ping timeout: 264 seconds)
2013-09-08 05:13:40	<--	shanse (~generic@p57B2C5FE.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-09-08 05:13:41	--	generic is now known as shanse
2013-09-08 05:13:57	-->	xinming (~xinming@125.82.207.24) has joined #haskell
2013-09-08 05:14:05	-->	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-08 05:14:11	applicative	enthropy: but ap wouldn't typically be involved in an implementation of >>
2013-09-08 05:15:00	haasn	enthropy: ZipList can't be made a Monad though
2013-09-08 05:15:35	applicative	> getZipList $ pure 'a'
2013-09-08 05:15:37	lambdabot	  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...
2013-09-08 05:15:53	enthropy	haasn: so?
2013-09-08 05:15:56	applicative	sure it can, it just cant use return = pure
2013-09-08 05:16:18	haasn	it can? show me an implementation of Monad (ZipList a) that satisfies all the monad laws
2013-09-08 05:16:25	applicative	and will violate the protocol that the monad instance agree with the applicative instance with ap = <*> etc
2013-09-08 05:16:34	haasn	oh
2013-09-08 05:16:42	haasn	yes of course, by using the regular [] instance on it
2013-09-08 05:16:42	applicative	instance Monad ZipList where return = ZipList .return
2013-09-08 05:17:00	haasn	right; but isn't it a law that return = pure ?
2013-09-08 05:17:09	applicative	haasn: it's amazing how many people are under a magical illusion about this. it's like a dream
2013-09-08 05:17:24	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-08 05:17:27	applicative	haasn: a law of what, the monad class? or the applicative class?
2013-09-08 05:17:33	geekosaur	haasn: `appicative` there is of the oppinion that haskell's applicative is a complete and utter lie
2013-09-08 05:17:52	applicative	not at, I just oppose bullshit
2013-09-08 05:17:57	geekosaur	and that he(?) alone is competent to tell the world what  valid applicative is
2013-09-08 05:18:33	applicative	geekosaur: you just saw it happen above; haasn is a very competent haskeller
2013-09-08 05:18:34	SrPx	hey, just wondering, is [a] a sugar for (list a) ?
2013-09-08 05:18:36	haasn	aren't we getting Applicative as a superclass of Monad in 7.8 or 7.10? In which case it would be a Monad law
2013-09-08 05:18:38	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-08 05:18:56	tabemann	[a] is sugar for [] a
2013-09-08 05:18:58	scshunt	the fact that pure = return follows from the uniqueness of functor and the monad laws
2013-09-08 05:19:05	applicative	haasn, well, its a question what it would be a law of.
2013-09-08 05:19:07	haasn	tabemann: or a:[], depending
2013-09-08 05:19:25	SrPx	tabemann: [] is a type?
2013-09-08 05:19:25	applicative	scshunt: what is pure?
2013-09-08 05:19:36	tabemann	SrPx: [] is a type of kind * -> *
2013-09-08 05:19:40	scshunt	:t pure
2013-09-08 05:19:41	lambdabot	Applicative f => a -> f a
2013-09-08 05:19:43	SrPx	* ?
2013-09-08 05:19:50	scshunt	erm, right
2013-09-08 05:20:01	ekipan	> 1 : [] :: [] Int -- first brackets is the nil int list, second is the type constructor of list types
2013-09-08 05:20:03	lambdabot	  [1]
2013-09-08 05:20:08	scshunt	confusing pure and fmap
2013-09-08 05:20:26	SrPx	.. eh
2013-09-08 05:20:34	scshunt	what I should have said is that for every monad instance, there exists an applicative instance with pure = return, and this can be determined from the monad laws
2013-09-08 05:20:40	tabemann	SrPx: okay, knowing what * means requires knowing about kinds
2013-09-08 05:20:44	applicative	there is a unique functor instance given the functor laws; there is a unique-up-to-isomorphism monad instance, if i understand; but applicative doesn't decide things in the same way
2013-09-08 05:20:45	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 05:20:58	-->	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 05:20:59	<--	maximveksler (~maximveks@50-204-67-228-static.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-09-08 05:21:02	SrPx	tabemann: ok, if it is advanced I'll not jump steps
2013-09-08 05:21:12	applicative	scshunt: yes pure = return ; <*> = ap of course
2013-09-08 05:21:13	scshunt	so it makes a lot of sense for Applicative => Monad
2013-09-08 05:21:18	<--	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2013-09-08 05:21:22	tabemann	SrPx: basically, a type constructor that takes one argument is kind * -> *
2013-09-08 05:21:34	tabemann	whereas a type constructor that takes no arguments is kind *
2013-09-08 05:21:53	ekipan	it's just another way to say the same thing ([] Int) and [Int] are both the type "list of ints"
2013-09-08 05:21:59	applicative	it's totally optional as far as the laws go.  the reason it makes sense is that the Monad class doesn't permit independent optimization of fmap and <*>
2013-09-08 05:22:24	enthropy	@hoogle WrappedMonad
2013-09-08 05:22:24	lambdabot	Control.Applicative newtype WrappedMonad m a
2013-09-08 05:22:32	applicative	liftM and ap aren't methods of Monad
2013-09-08 05:22:33	SrPx	tabemann: this makes some sense but many concepts are missing
2013-09-08 05:23:07	SrPx	I can make my own type, foo, and then have a "foo of lists of ints"?
2013-09-08 05:23:33	applicative	this is the reason why Functor => Applicative => Monad is necessary
2013-09-08 05:23:35	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-09-08 05:23:37	ekipan	data Foo a = {- put data constructors here -} -- then sure you can have Foo [Int]
2013-09-08 05:23:45	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-08 05:24:17	SrPx	How does it map to c++? (sorry but the last time I worked with types was C++)
2013-09-08 05:24:19	ekipan	(type names which begin with lowercase letters are type variables)
2013-09-08 05:24:20	haasn	applicative: I thought the main reason was to save us from having to type out all those darned (Functor f) constraints ¬_¬
2013-09-08 05:24:28	SrPx	oh OK
2013-09-08 05:24:49	applicative	if we only used Monad, as oleg used to recommend, we wouldn't have a problem ;)
2013-09-08 05:24:55	SrPx	ekipan: is that syntax or convention?
2013-09-08 05:25:03	<--	codesoup (~codesoup@206-248-156-70.dsl.teksavvy.com) has quit (Read error: Connection reset by peer)
2013-09-08 05:25:10	ekipan	syntax
2013-09-08 05:25:20	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-08 05:25:22	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Quit: box shutting down...)
2013-09-08 05:25:31	ekipan	datatypes you define must begin with a capital letter
2013-09-08 05:25:57	haasn	or a :
2013-09-08 05:26:04	ekipan	(or a colon for symbol names, yes)
2013-09-08 05:26:24	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 266 seconds)
2013-09-08 05:26:32	--	preflex_ is now known as preflex
2013-09-08 05:27:09	SrPx	OK (:
2013-09-08 05:27:22	ekipan	the list type constructor is just a special case that can be written cirumfix
2013-09-08 05:27:30	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 05:27:32	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 05:27:54	-->	functorfun (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has joined #haskell
2013-09-08 05:27:55	--	functorfun is now known as funfunctor
2013-09-08 05:28:01	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-09-08 05:28:27	ekipan	circum
2013-09-08 05:28:27	<--	fiddlerwoaroof (~edwlan@c-69-136-228-69.hsd1.md.comcast.net) has quit (Quit: leaving)
2013-09-08 05:30:23	<--	ihm1 (~izzy@cpe-72-225-231-212.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-08 05:30:49	-->	segmond (~segmond@108.67.101.30) has joined #haskell
2013-09-08 05:31:23	SrPx	ok!
2013-09-08 05:32:31	<--	funfunctor (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has quit (Ping timeout: 245 seconds)
2013-09-08 05:33:51	-->	codesoup (~codesoup@69-165-138-68.dsl.teksavvy.com) has joined #haskell
2013-09-08 05:34:17	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Ping timeout: 246 seconds)
2013-09-08 05:34:31	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 05:34:34	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 05:36:37	-->	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has joined #haskell
2013-09-08 05:37:24	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-08 05:37:53	joelteon	:t (a =<<) . b
2013-09-08 05:37:54	lambdabot	    Couldn't match expected type `a1 -> m0 b0' with actual type `Expr'
2013-09-08 05:37:54	lambdabot	    In the first argument of `(=<<)', namely `a'
2013-09-08 05:37:54	lambdabot	    In the first argument of `(.)', namely `(a =<<)'
2013-09-08 05:37:56	joelteon	wohops
2013-09-08 05:38:01	joelteon	:t \a b -> (a =<<) . b
2013-09-08 05:38:02	lambdabot	Monad m => (a1 -> m b) -> (a -> m a1) -> a -> m b
2013-09-08 05:38:06	joelteon	oh so that's just (<=<)
2013-09-08 05:39:00	<--	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 05:39:18	<--	path[l] (~vsi@c-98-234-187-247.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-08 05:39:27	-->	functorfun (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has joined #haskell
2013-09-08 05:39:53	--	functorfun is now known as funfunctor
2013-09-08 05:40:17	-->	path[l] (~vsi@c-98-234-187-247.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 05:40:40	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 05:41:21	applicative	reddit wants to know 'Why use Monads for IO?" I wonder how many monads IO :: * -> * is?
2013-09-08 05:41:35	carter	??
2013-09-08 05:41:52	joelteon	it's gotta be at least 4
2013-09-08 05:41:56	applicative	the plural just seems uncanny
2013-09-08 05:42:14	applicative	though of course there are all the instances of MonadIO , for example, so it can be made sense of
2013-09-08 05:42:22	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-08 05:42:43	applicative	joelteon: yeah, i use for, putChar, getChar and two others
2013-09-08 05:42:50	applicative	four, rather; bah
2013-09-08 05:44:05	applicative	putChar, getChar, return and forkIO are the only monads I use for IO
2013-09-08 05:44:06	haasn	Codensity IO
2013-09-08 05:44:15	haasn	Codensity (Codensity IO)
2013-09-08 05:44:18	haasn	...
2013-09-08 05:44:29	elliott	Fix2 Codensity IO
2013-09-08 05:44:57	joelteon	mapM putChar myStr
2013-09-08 05:45:16	joelteon	:t iterate
2013-09-08 05:45:17	lambdabot	(a -> a) -> a -> [a]
2013-09-08 05:45:22	applicative	mapM_ and avoid the pain
2013-09-08 05:45:33	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-08 05:45:34	<--	path[l] (~vsi@c-98-234-187-247.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-08 05:45:47	joelteon	> head $ iterate (+1) 0
2013-09-08 05:45:48	lambdabot	  0
2013-09-08 05:46:00	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-08 05:46:06	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: G'night everynyan~!)
2013-09-08 05:46:20	joelteon	@let iterateM f s = fmap (s:) (f s >>= iterateM f)
2013-09-08 05:46:21	lambdabot	 Defined.
2013-09-08 05:46:27	joelteon	:t iterateM
2013-09-08 05:46:28	lambdabot	(Monad f, Functor f) => (a -> f a) -> a -> f [a]
2013-09-08 05:46:30	joelteon	woohoo
2013-09-08 05:46:43	<--	funfunctor (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has quit (Ping timeout: 264 seconds)
2013-09-08 05:46:46	applicative	:t iterateM show
2013-09-08 05:46:47	lambdabot	Char -> [[Char]]
2013-09-08 05:46:55	joelteon	could remove the Functor constraint, but there's really no reason Functor shouldn't be a superclass of Monad :(
2013-09-08 05:46:59	applicative	> iterateM show 'a'
2013-09-08 05:47:04	lambdabot	  *Exception: stack overflow
2013-09-08 05:47:05	applicative	hahah
2013-09-08 05:47:09	joelteon	> fmap head $ iterateM show 'a'
2013-09-08 05:47:14	lambdabot	  "*Exception: stack overflow
2013-09-08 05:47:25	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-08 05:47:30	applicative	joelteon: that couldn't be clearer yes, since there's no option for Functor instances, given the stated laws
2013-09-08 05:47:53	<--	canissimia (~canissimi@unaffiliated/canissimia) has quit (Quit: Leaving)
2013-09-08 05:47:54	haasn	iterateM won't work for a very large number of interesting monads
2013-09-08 05:47:56	haasn	afaik
2013-09-08 05:48:06	elliott	try lazy state.
2013-09-08 05:48:11	elliott	or writer.
2013-09-08 05:48:30	<--	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has quit (Quit: Ov3rload1)
2013-09-08 05:48:33	haasn	> execWriter $ iterateM tell "a"
2013-09-08 05:48:34	lambdabot	  Couldn't match expected type `()'
2013-09-08 05:48:34	lambdabot	             with actual type `[GHC.Types...
2013-09-08 05:48:45	haasn	oh
2013-09-08 05:48:52	joelteon	I don't know if it's possible to make iterateM ever yield a value
2013-09-08 05:48:54	haasn	> execWriter $ iterateM tell () -- hehe
2013-09-08 05:48:58	lambdabot	  ()
2013-09-08 05:49:06	joelteon	ok, so there is
2013-09-08 05:49:14	haasn	> runWriter $ iterateM tell ()
2013-09-08 05:49:17	lambdabot	  ([(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(),(...
2013-09-08 05:49:18	applicative	@pl iterateM f s = fmap (s:) (f s >>= iterateM f)
2013-09-08 05:49:22	lambdabot	iterateM = fix ((liftM2 fmap (:) .) . liftM2 flip ((>>=) .))
2013-09-08 05:49:23	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-08 05:49:23	joelteon	oo so it is
2013-09-08 05:49:27	joelteon	hang on i'll do it
2013-09-08 05:49:29	applicative	blech
2013-09-08 05:49:29	joelteon	i have a functioning pl
2013-09-08 05:49:49	joelteon	iterateM = fix ((liftM2 fmap (:) .) . liftM2 flip ((>>=) .))
2013-09-08 05:49:53	joelteon	oh, so lambdabot was right
2013-09-08 05:49:54	applicative	oh nice writer example
2013-09-08 05:50:34	haasn	> execWriter $ iterateM (\x -> tell x >> return x) "hmm"
2013-09-08 05:50:38	lambdabot	  "hmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhm...
2013-09-08 05:50:53	joelteon	:t \x -> tell x <$ x
2013-09-08 05:50:54	lambdabot	(Functor f, MonadWriter (f b) m) => f b -> f (m ())
2013-09-08 05:50:59	joelteon	oh, right
2013-09-08 05:51:00	haasn	x <$ tell x
2013-09-08 05:51:06	joelteon	yeah i got it backwards
2013-09-08 05:51:14	joelteon	:t (<$) <*> tell
2013-09-08 05:51:14	lambdabot	(Functor f, MonadWriter a f) => a -> f a
2013-09-08 05:51:29	haasn	<$ is like a confused <3
2013-09-08 05:51:34	joelteon	> execWrite $ iterateM ((<$) <*> tell) "hmm"
2013-09-08 05:51:35	lambdabot	  Not in scope: `execWrite'
2013-09-08 05:51:36	lambdabot	 Perhaps you meant one of these:
2013-09-08 05:51:36	lambdabot	   `execWriter' ...
2013-09-08 05:51:39	joelteon	> execWriter $ iterateM ((<$) <*> tell) "hmm"
2013-09-08 05:51:43	lambdabot	  "hmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhmmhm...
2013-09-08 05:51:48	joelteon	man I love using <*> on functions
2013-09-08 05:51:59	haasn	I love writing unreadable code, too
2013-09-08 05:52:01	joelteon	yeah
2013-09-08 05:52:08	joelteon	i don't do it in library code, but it's entertaining
2013-09-08 05:52:18	haasn	it's why I'm such a big fan of lens :)
2013-09-08 05:52:26	applicative	you're corrupting youth!!
2013-09-08 05:52:28	joelteon	well, if you say so
2013-09-08 05:52:35	joelteon	lens seems readable
2013-09-08 05:52:43	edwardk	if it was hard to write it should be hard to read!
2013-09-08 05:52:47	applicative	as long as you don't make a type violation
2013-09-08 05:52:51	joelteon	yeah
2013-09-08 05:52:53	<--	chexxor_netbook (~chexxor@114-43-140-26.dynamic.hinet.net) has quit (Ping timeout: 260 seconds)
2013-09-08 05:52:54	joelteon	but if you do that you're dumb
2013-09-08 05:52:57	joelteon	i never make mistakes
2013-09-08 05:53:11	joelteon	type checkers are for the weak
2013-09-08 05:53:32	applicative	i was going to say, why bother not making mistakes all the time, when you have a typechecker
2013-09-08 05:53:46	edwardk	lens is a community building tool. you either understand the error messages perfectly or it drives you to IRC to find someone who does
2013-09-08 05:53:53	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-08 05:54:00	applicative	hah
2013-09-08 05:54:11	Tekmo	edwardk: So is anybody ever going to work on a GHC extension to use type synonyms to simplify inferred types?
2013-09-08 05:54:16	haasn	it helps to read the derivation and stuff
2013-09-08 05:54:18	Tekmo	I feel like that's something both of our libraries would benefit from
2013-09-08 05:54:23	edwardk	Tekmo: go for it =)
2013-09-08 05:54:32	applicative	they're a nightmare but, as Mrs Thatcher used to say, there is no alternative
2013-09-08 05:54:39	Tekmo	edwardk: I just might, but it has to wait until after I graduate
2013-09-08 05:54:40	edwardk	Tekmo: i started getting the scans to work. found the appropriate one for semigroup reducers as well
2013-09-08 05:54:43	haasn	Tekmo: I assume it would be a bit tricky to to work out the exact semantics
2013-09-08 05:54:48	joelteon	is it possible to do that?
2013-09-08 05:55:18	applicative	Tekmo: surely it would be hard?
2013-09-08 05:55:27	Tekmo	haasn: The idea I had in mind is that it would be applied as a pass after the type is inferred
2013-09-08 05:55:36	haasn	it seems outright silly to try and apply in-scope type synonyms in reverse in general, it would make more sense to try and keep track of existing type synonyms and avoid expanding them as much as possible
2013-09-08 05:55:46	applicative	maybe if you could make them something like a newtype-for-purposes-of-error-messages
2013-09-08 05:55:56	Tekmo	haasn: No, I came to the conclusion that trying to preserve type synonyms throughout the process would not work
2013-09-08 05:56:10	Tekmo	haasn: The only realistic way to do it is as a single pass after the type has been inferred
2013-09-08 05:56:27	elliott	you have to track synonyms originally used
2013-09-08 05:56:31	elliott	lest you replace String with FilePath
2013-09-08 05:56:31	Tekmo	No
2013-09-08 05:56:37	Tekmo	The idea is that you don't track synonyms originally used
2013-09-08 05:56:39	haasn	Tekmo: I think one compromise would be to keep track of all type synonyms involved throughout the entire type checking process of that type, and then only try to reverse from that pool
2013-09-08 05:56:40	applicative	what if there are several synonymns available
2013-09-08 05:56:42	Tekmo	You also don't always apply type synonyms
2013-09-08 05:56:44	Tekmo	It's specifically opt in
2013-09-08 05:56:45	-->	kallisti (~eris@c-24-99-220-130.hsd1.ga.comcast.net) has joined #haskell
2013-09-08 05:56:45	<--	kallisti (~eris@c-24-99-220-130.hsd1.ga.comcast.net) has quit (Changing host)
2013-09-08 05:56:45	-->	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has joined #haskell
2013-09-08 05:56:51	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Remote host closed the connection)
2013-09-08 05:56:59	Tekmo	You add an annotation to a type synonym that just enables it and gives the type synonym a priority
2013-09-08 05:57:09	Tekmo	For example:
2013-09-08 05:57:12	elliott	but it should be able to identify FilePaths.
2013-09-08 05:57:16	Tekmo	{-# STICK Producer 10 #-}
2013-09-08 05:57:26	elliott	it shouldn't be hard to take note of all the type synonyms actually used in the source code and simply restrict the choice to those at the end
2013-09-08 05:57:28	Tekmo	No, I don't think you want to enable it for `FilePath`s
2013-09-08 05:57:43	Tekmo	Or perhaps the end user is responsible for enabling them, not the library writer
2013-09-08 05:57:46	-->	bsrk (4a7d3f21@gateway/web/freenode/ip.74.125.63.33) has joined #haskell
2013-09-08 05:58:04	Tekmo	Anyway, the point is that once you enable it that type synonym gets some priority as indicated in the PRAGMA
2013-09-08 05:58:05	applicative	readFile :: FilePath -> IO FilePath
2013-09-08 05:58:17	jon_r	can anyone point me to the docs for `all` googling for it is impossible...
2013-09-08 05:58:18	Tekmo	That's exactly why you don't want to enable it for FilePath
2013-09-08 05:58:25	Tekmo	jon_r: Use hoogle
2013-09-08 05:58:28	bsrk	How do I know if a port is being used by some process or not? (in haskell, not command line)
2013-09-08 05:58:31	Tekmo	http://www.haskell.org/hoogle/
2013-09-08 05:58:33	<--	wak (~wak@63.252.64.209) has quit (Remote host closed the connection)
2013-09-08 05:58:36	Tekmo	You can use that to search for Haskell functions
2013-09-08 05:58:42	jon_r	hattip
2013-09-08 05:58:46	Tekmo	Hayoo is also great, too:
2013-09-08 05:58:47	Tekmo	http://holumbus.fh-wedel.de/hayoo/hayoo.html
2013-09-08 05:58:54	Tekmo	Hayoo has more comprehensive coverage by default
2013-09-08 05:58:56	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 05:58:56	SrPx	let f x = 2, g x = 3 in (f 0) + (g 0)
2013-09-08 05:58:59	applicative	jon_r: https://www.fpcomplete.com/hoogle?q=all&env=ghc-7.4.2-stable-13.09 is a little jazzier
2013-09-08 05:59:03	SrPx	> let f x = 2, g x = 3 in (f 0) + (g 0)
2013-09-08 05:59:04	lambdabot	  <hint>:1:12: parse error on input `,'
2013-09-08 05:59:10	ekipan	semicolons, SrPx
2013-09-08 05:59:12	SrPx	> let f x = 2 and g x = 3 in (f 0) + (g 0)
2013-09-08 05:59:12	lambdabot	  <hint>:1:21: parse error on input `='
2013-09-08 05:59:17	applicative	jon_r: why i left your query on the url i dont know
2013-09-08 05:59:19	SrPx	> let f x = 2; g x = 3 in (f 0) + (g 0)
2013-09-08 05:59:20	lambdabot	  5
2013-09-08 05:59:46	SrPx	ekipan: thanks. They work as expression aggregators?
2013-09-08 05:59:54	-->	Guest38417 (43d5da4a@gateway/web/freenode/ip.67.213.218.74) has joined #haskell
2013-09-08 05:59:57	ekipan	they seperate declarations
2013-09-08 06:00:01	Guest38417	haskell is a piece of fucking shit
2013-09-08 06:00:05	Guest38417	fucking nigger_ bitch
2013-09-08 06:00:08	ekipan	(and expressions in do blocks)
2013-09-08 06:00:10	Guest38417	fuck off faggits
2013-09-08 06:00:13	jon_r	is there an easy way to return false if the list is empty?
2013-09-08 06:00:14	Guest38417	FUCK HASKELL
2013-09-08 06:00:16	Guest38417	MOTHERFUCKERS
2013-09-08 06:00:17	applicative	grrrr
2013-09-08 06:00:21	--	Mode #haskell [+o edwardk] by ChanServ
2013-09-08 06:00:23	Tekmo	jon_r: not . null
2013-09-08 06:00:24	Guest38417	FUCK U
2013-09-08 06:00:25	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 245 seconds)
2013-09-08 06:00:25	Guest38417	FAGGIT
2013-09-08 06:00:26	--	Mode #haskell [+b *!43d5da4a@gateway/web/freenode/ip.67.213.218.74] by edwardk
2013-09-08 06:00:26	<--	edwardk has kicked Guest38417 (Your behavior is not conducive to the desired environment.)
2013-09-08 06:00:33	Tekmo	Thanks
2013-09-08 06:00:56	jon_r	Tekmo is there an easy way to combine that with an all :)
2013-09-08 06:01:00	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-08 06:01:01	applicative	jon_r: null
2013-09-08 06:01:09	applicative	oh Tekmo said, jon_r
2013-09-08 06:01:18	Tekmo	jon_r: You mean an `all` that special cases the empty list to return False instead of True?
2013-09-08 06:01:24	ekipan	the grammar says that declarations in a let block are enclosed in braces seperated by semicolons, SrPx
2013-09-08 06:01:31	ekipan	but you can use layout to omit them
2013-09-08 06:01:39	SrPx	Okay, ekipan . Thanks
2013-09-08 06:01:50	SrPx	> let shift n l = drop n l ++ take n l; consecs l = take (length l) $ [take 2 l] ++ consecs (shift 1 l); rule1 a = (head a) + (last a); step l = map rule1 $ consecs l; a = [0,0,0,0,0,0,1] : map step a in a !! 6
2013-09-08 06:01:51	lambdabot	  [1,6,15,20,15,6,1]
2013-09-08 06:01:55	SrPx	look I've grow a pascal triangle o.o
2013-09-08 06:02:18	@edwardk	Tekmo: is your version of Mealy of the form: data L1 a b = forall c. L1 (c -> b) (c -> a -> c) (a -> c)   or something else?
2013-09-08 06:02:20	jon_r	Tekmo pretty much, I'm currently using pattern matching on a separate function
2013-09-08 06:02:33	applicative	edwardk: you're still @edwardk
2013-09-08 06:02:38	applicative	not that it matters.
2013-09-08 06:02:50	@edwardk	applicative: i tend to stay 'loaded' for about 10 minutes after the first spammer, JIC
2013-09-08 06:02:55	Tekmo	edwardk: The latest version I tried was (a -> x, x -> x -> x, b -> x), but that didn't work
2013-09-08 06:02:55	-->	fl00r (~fl00r@pool-98-112-185-33.lsanca.fios.verizon.net) has joined #haskell
2013-09-08 06:02:56	@edwardk	applicative: it takes too long to switch
2013-09-08 06:02:59	applicative	oh, i see, probably sensible
2013-09-08 06:03:19	 *	elliott nostalgically remembers that one day when the spammers just wouldn't go away
2013-09-08 06:03:23	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 256 seconds)
2013-09-08 06:03:34	Tekmo	edwardk: Or just: (Monoid x) => (a -> x, x -> b)
2013-09-08 06:03:34	applicative	it's monochrom i think who characteristically forgets
2013-09-08 06:03:55	@edwardk	Tekmo: well, the monoid version is stronger. that is the M folding I have now.
2013-09-08 06:03:59	@edwardk	its too strong though.
2013-09-08 06:04:06	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-08 06:04:15	Tekmo	edwardk: Let me briefly review your `folds` package.  One second
2013-09-08 06:04:26	@edwardk	I have the (a -> x) (x -> x -> x) (b -> x) folding
2013-09-08 06:04:37	@edwardk	let me put up new haddocks on github
2013-09-08 06:04:37	Tekmo	edwardk: Yea, that's exactly what I had
2013-09-08 06:04:43	@edwardk	the one on hackage is a bit behind
2013-09-08 06:04:50	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-08 06:04:51	-->	mimico__ (uid2554@gateway/web/irccloud.com/x-gehmvygmeqmpfmuw) has joined #haskell
2013-09-08 06:04:53	@edwardk	http://ekmett.github.io/folds/
2013-09-08 06:04:58	 *	haasn remembers the day when services went down and somebody decided to de-op absolutely everybody as soon as ChanServ joined the channel again
2013-09-08 06:05:10	@edwardk	L1, M1 and R1 are the mealy-likes.
2013-09-08 06:05:33	haasn	so what's this business behind ‘fold’ and friends anyway? What's the motivating use case?
2013-09-08 06:05:36	@edwardk	L1 is a left folding mealy machine, M1 is a semigroup reducer and R1 is a reversed mealy machine for right folds. ideally i'd have an L1'
2013-09-08 06:05:52	@edwardk	haasn: well, for me its mostly for dealing with HMACs and streaming statistical folds
2013-09-08 06:05:59	Tekmo	haasn: See this post: http://www.haskellforall.com/2013/08/composable-streaming-folds.html
2013-09-08 06:06:04	haasn	thanks
2013-09-08 06:06:08	haasn	I'll have a read when I wake up
2013-09-08 06:06:11	Tekmo	Alright
2013-09-08 06:06:15	@edwardk	Tekmo: you're aware of the original: http://squing.blogspot.com/2008/11/beautiful-folding.html right?
2013-09-08 06:06:34	Tekmo	edwardk: Yeah, somebody already pointed that out to me
2013-09-08 06:06:35	joelteon	i wonder what kind of person sits there on a saturday night and thinks
2013-09-08 06:06:39	joelteon	"hey, i'll troll #haskell"
2013-09-08 06:06:41	Tekmo	edwardk: That was what inspired the current formulation
2013-09-08 06:06:49	@edwardk	Tekmo: just making sure =)
2013-09-08 06:06:56	<--	wak (~wak@63.252.64.209) has quit (Read error: Connection reset by peer)
2013-09-08 06:07:02	Tekmo	edwardk: And applicative pointed out Conal's version to me, too
2013-09-08 06:07:12	@edwardk	Tekmo: basically i'm just going through and defining all the instances
2013-09-08 06:07:25	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-08 06:07:25	Tekmo	I still feel like there should be one *right* one
2013-09-08 06:07:29	@edwardk	there turn out to be a lot of legal instances and it is quite the sort of mental puzzle I like
2013-09-08 06:07:29	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-08 06:07:39	kallisti	hm, when was catch removed from Prelude?
2013-09-08 06:07:39	@edwardk	they are good at different things
2013-09-08 06:07:49	@edwardk	7.6 or so
2013-09-08 06:08:05	kallisti	ah. I'm still using 7.4
2013-09-08 06:08:11	Tekmo	kallisti: base-4.6, I think
2013-09-08 06:08:18	-->	ni291187 (~u931732@99-46-210-178.lightspeed.hstntx.sbcglobal.net) has joined #haskell
2013-09-08 06:08:18	SrPx	guys, I think I've made an optimized 2^n function
2013-09-08 06:08:24	SrPx	> foo = let shift n l = drop n l ++ take n l; consecs l = take (length l) $ [take 2 l] ++ consecs (shift 1 l); rule1 a = (head a) + (last a); step l = map rule1 $ consecs l; a = ((take 100 (repeat 0)) ++ [1]) : map step a; pow2 n = sum $ last $ take (n+1) a in pow2 8
2013-09-08 06:08:25	lambdabot	  <hint>:1:5: parse error on input `='
2013-09-08 06:08:40	applicative	i have the mad plan of rewriting a pile of the statistics library with Foldl's.
2013-09-08 06:08:49	SrPx	> let shift n l = drop n l ++ take n l; consecs l = take (length l) $ [take 2 l] ++ consecs (shift 1 l); rule1 a = (head a) + (last a); step l = map rule1 $ consecs l; a = ((take 100 (repeat 0)) ++ [1]) : map step a; pow2 n = sum $ last $ take (n+1) a in pow2 8
2013-09-08 06:08:50	lambdabot	  256
2013-09-08 06:08:52	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 06:08:55	SrPx	:D where do I submit it
2013-09-08 06:08:55	Tekmo	SrPx: Isn't the optimized version to do exponentiation by squaring?
2013-09-08 06:08:57	Tekmo	:)
2013-09-08 06:08:58	applicative	bos preens himself telling us that some Vector Double -> Double function 'uses only one pass'
2013-09-08 06:09:08	applicative	but what if I want to apply three of them to one vector, etc
2013-09-08 06:09:14	<--	ttuegel (~quassel@172-2-80-62.lightspeed.dctril.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-08 06:09:14	SrPx	Tekmo: no, my version is much faster I've tested it
2013-09-08 06:09:30	<--	amathew (~Adium@184.152.8.103) has quit (Quit: Leaving.)
2013-09-08 06:09:36	kallisti	so what should I do instead of "hiding (catch)" to make my code work on both 7.4 and 7.6?
2013-09-08 06:09:46	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-08 06:09:47	@edwardk	L' can avoid leaking, M can do searches and doesn't leak when it has content bolted on from either side, R can deal with (:) and [] without reassociating, L1 and L1' are mealy machines so they work so long as you feed them a non-empty container worth of content, M1 is a semigroup reducer which I have a lot of backlogged theory for, R1 is like a slowed down foldr1
2013-09-08 06:09:54	Tekmo	kallisti: You need a CPP pragma to guard it
2013-09-08 06:10:00	Tekmo	kallisti: I'll find an example for you
2013-09-08 06:10:08	kallisti	don't worry I know how to do that
2013-09-08 06:10:14	kallisti	I was just hoping I wouldn't :P
2013-09-08 06:10:19	applicative	kallisti: um, one possibility is import qualified Control.Exception as Ex and use Ex.catch instead
2013-09-08 06:10:27	Tekmo	The other option is to not use `catch` :)
2013-09-08 06:10:29	@edwardk	baically L vs. R comes down to whether prefixing or postfixing content leaks memory
2013-09-08 06:10:41	applicative	kallisti: the 'literature' seems to use a variety of maneouvers
2013-09-08 06:11:11	applicative	kallisti: right, don't use catch use the errors library ;)
2013-09-08 06:11:15	@edwardk	kallisti: either CPP pragma it, explicitly enumerate the imports from Prelude rather than the things you hide, or avoid catch entirely or import Control.Exception as E and use E.catch when you use it
2013-09-08 06:11:35	-->	[JJ]Albert_ (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-08 06:11:47	@edwardk	Tekmo: i may go through and do a naming pass once i figure out what all the things i want to work with here ;)
2013-09-08 06:11:49	-->	AleXoundOS (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-08 06:11:52	--	[JJ]Albert_ is now known as [JJ]Albert
2013-09-08 06:11:59	kallisti	I think I'll qualify catch. seems like the simplest solution
2013-09-08 06:12:05	applicative	kallisti: as you can see, there is agreement that there are hundreds of options, though most of them are how you import Control.Exception qualified
2013-09-08 06:12:25	kallisti	I'm using Control.Exception.Lifted actually, but it's the same principle
2013-09-08 06:12:44	enthropy	kallisti: import Prelude hiding (catch) -- works with ghc-7.6.2 here
2013-09-08 06:12:58	enthropy	even though catch isn't exported by that Prelude
2013-09-08 06:13:12	Tekmo	I think edwardk's suggestion of using a qualified `catch` is probably the best
2013-09-08 06:13:28	applicative	hey that was my suggestion! boo hoo
2013-09-08 06:13:29	haasn	edwardk: is Control.Exception.Lens compatible with both 7.6 and 7.4?
2013-09-08 06:13:38	kallisti	enthropy: I wonder if that's special cased, because hiding an undefined symbol from any other module would result in an error.
2013-09-08 06:13:42	@edwardk	enthropy: if you turn on -Wall does it complain?
2013-09-08 06:13:50	enthropy	yes it's a warning
2013-09-08 06:13:50	@edwardk	haasn: yes
2013-09-08 06:14:12	-->	jfischoff_ (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 06:14:13	@edwardk	enthropy: just making sure =)
2013-09-08 06:14:25	enthropy	it used to be an error, but to keep from breaking so much code that has hiding (catch) it's a warning
2013-09-08 06:14:29	applicative	enthropy I think 'hiding (catch)' actually broke stuff for a bit but they had to make it warning again.
2013-09-08 06:14:33	@edwardk	exactly
2013-09-08 06:14:41	@edwardk	that was my recollection fro the 7.6 switch over
2013-09-08 06:14:51	enthropy	rather hiding (somethingNotActuallyExported) -- is only a warning now
2013-09-08 06:14:52	@edwardk	because as an error it caused little things like cabal to die
2013-09-08 06:15:06	@edwardk	because old cabal generated code included the hiding (catch)
2013-09-08 06:15:18	applicative	haha
2013-09-08 06:15:36	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-08 06:17:42	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-08 06:17:52	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-08 06:18:24	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 06:19:02	applicative	Tekmo: I meant to add earlier that I think the secret advantage of your foldl library over other things like it was the sensible decision to export a pile of already written Foldl's
2013-09-08 06:19:42	Tekmo	applicative: Thanks!
2013-09-08 06:19:46	haasn	including batteries has been lens' success strategy
2013-09-08 06:20:11	@edwardk	applicative: i definitely agree
2013-09-08 06:20:20	Tekmo	Well, the thing about lenses is that the lenses for your own types matter more
2013-09-08 06:20:20	Tekmo	With the exception of exceptions
2013-09-08 06:20:22	Tekmo	That's one thing where you need lots of prisms built in
2013-09-08 06:20:24	applicative	Tekmo: did i mention, it should have a separate average or mean; there is the question of the numerator overflowing
2013-09-08 06:20:43	applicative	despite this being the poster child for the foldl-in-amber idea
2013-09-08 06:20:48	haasn	Tekmo: speak for yourself, lens' standard library of lenses have been absolutely irreplaceable when it comes to IRC and GHCi golfing :)
2013-09-08 06:21:18	Tekmo	haasn: Haha
2013-09-08 06:21:26	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Read error: Operation timed out)
2013-09-08 06:21:28	Tekmo	haasn: Lens is THE irc library
2013-09-08 06:21:33	@edwardk	i've been trying to formulate a version of those common folds that can work with the class driving the folds that i have. the problem with two things being parametric, one producing and one consuming arises. so i have to either make fixed type versions of all the folds or make fixed type versions of the applicators
2013-09-08 06:21:39	haasn	Tekmo: s/irc//
2013-09-08 06:21:54	Tekmo	applicative: What do you mean about overflowing?  You mean providing separate ones for `Double` and `Integer`?
2013-09-08 06:22:19	applicative	no, its just the obvious point that sum xs may make no sense, though average xs does
2013-09-08 06:22:39	@edwardk	Tekmo: just that the naive sum xs / count xs overflows pretty easily
2013-09-08 06:22:58	Tekmo	edwardk: The point is that you don't compute it that way
2013-09-08 06:23:12	Tekmo	edwardk: You use `(/) <$> sum <*> genericLength`
2013-09-08 06:23:37	Hafydd	In what context does sum xs not make sense when average xs does?
2013-09-08 06:23:39	Tekmo	edwardk: `foldl` doesn't even expose a way to do it the naive way
2013-09-08 06:23:47	Tekmo	^ Hafydd
2013-09-08 06:24:02	@edwardk	um, that works for relatively small data sets, it even works for the most part for sums, but when you start moving up to higher moments they explode faster and faster
2013-09-08 06:24:15	Tekmo	edwardk: I don't understand what you are referring to
2013-09-08 06:24:30	-->	shachaf (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-09-08 06:24:35	applicative	wait maybe were confused let me try it with the foldl lib if its on here
2013-09-08 06:24:42	@edwardk	computing varances as a running total of sum of squares naively is a great way to lose all your numerical precision.
2013-09-08 06:24:49	Tekmo	This was like the entire motivation behind `foldl`: computing `average` correctly
2013-09-08 06:24:52	Tekmo	http://www.haskellforall.com/2013/08/composable-streaming-folds.html
2013-09-08 06:24:54	@edwardk	computing skewnesses and kurtoses get worse
2013-09-08 06:24:57	@edwardk	sure
2013-09-08 06:25:01	@edwardk	its just charmingly naive
2013-09-08 06:25:20	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-08 06:25:41	<--	kini (kini@unaffiliated/kini) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-08 06:25:41	Tekmo	So what about kurtosis causes problems?
2013-09-08 06:25:46	Hafydd	Tekmo: are you trying indicate that the answer to my question is above?
2013-09-08 06:26:01	-->	kini (kini@unaffiliated/kini) has joined #haskell
2013-09-08 06:26:03	Tekmo	Hafydd: I meant that I agreed with your statement
2013-09-08 06:26:08	Hafydd	Oh.
2013-09-08 06:26:16	@edwardk	take some numbers with reasonable ranges. now the sums of squares of them have bigger dynamic ranges, right?
2013-09-08 06:26:23	@edwardk	the sums of cubes gets even bigger
2013-09-08 06:26:30	@edwardk	the sums of fourth powers...
2013-09-08 06:26:44	<--	ni291187 (~u931732@99-46-210-178.lightspeed.hstntx.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 06:26:47	@edwardk	as you mov to higher and higher statistical moments you are getting bigger and bigger numbers with wild cancellations
2013-09-08 06:27:12	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 06:27:19	Tekmo	Are you saying that `foldl` is numerically unstable?
2013-09-08 06:27:27	@edwardk	this is why we have robust one pass algorithms like terriberry's algorithm
2013-09-08 06:27:37	@edwardk	i'm saying i wouldn't use it to chew through a lot of variances
2013-09-08 06:27:46	SrPx	oh my... Haskell is even more awesome than I thought, and I considered it pretty awesome ...
2013-09-08 06:28:24	h4199	SrPx, what have you disovered?
2013-09-08 06:28:37	@edwardk	there do exist perfectly good monoids (Terriberry's) and there is a perfectly good left fold (Chan's) but adding up and dividing isn't that
2013-09-08 06:28:52	carter	this is for floating point usage right?
2013-09-08 06:28:53	@edwardk	in fact you can do full on kahan summation as a left fold
2013-09-08 06:28:56	@edwardk	sure
2013-09-08 06:29:03	@edwardk	so destroying your significand is a real concern
2013-09-08 06:29:25	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-08 06:29:26	Tekmo	Ok, I just read the Wikipedia page on this.  I get it now
2013-09-08 06:29:31	<--	bsrk (4a7d3f21@gateway/web/freenode/ip.74.125.63.33) has quit (Quit: Page closed)
2013-09-08 06:29:38	Tekmo	In case others are interested, the relevant page is this:
2013-09-08 06:29:39	Tekmo	http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
2013-09-08 06:29:43	@edwardk	ou get 53 bits of it. so say you have a 20 bit dynamic range in your content, sum of squares now uses 40 bits of significand, sum of cubes wants 60. so you're truncated. sum of 4th powers uses 80.
2013-09-08 06:30:06	-->	joehillen (~joe@71-84-132-57.dhcp.knwc.wa.charter.com) has joined #haskell
2013-09-08 06:30:14	@edwardk	Tekmo: i have code for a pretty robust moments monoid that does kurtoses, etc
2013-09-08 06:30:32	@edwardk	i also have 'compensated' which makes it so you can basically ignore the issue =P
2013-09-08 06:31:31	@edwardk	as for the 20 bits of dynamic range, that isn't much to ask for given that you get it even if you add up something like 1s… when you deal with a million (2^20th) of them!
2013-09-08 06:31:51	@edwardk	if you do a billion numbers, 2^30th dynamic range means the sum of squares won't even fit
2013-09-08 06:32:07	<--	jfischoff_ (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff_)
2013-09-08 06:32:16	applicative	Tekmo: right, with the foldl library F.fold (div <$> F.sum <*> F.length) [1..2^32] = -2147483648
2013-09-08 06:32:35	Tekmo	applicative: Use `Integer` and `genericLength`
2013-09-08 06:32:52	applicative	Tekmo: right, but there is also an answer for Int and Double
2013-09-08 06:33:40	applicative	i hadn't known about edwardk having worked on such things but the statistics library has tons of foldls like this only it misexports them and mostly miswrites them
2013-09-08 06:33:53	@edwardk	Integer is an answer for some data sets, but often i have a big bag of doubles. round tripping through rational and making the code 100x slower isn't really viable =)
2013-09-08 06:34:10	-->	latermuse (~ron@112.201.152.193) has joined #haskell
2013-09-08 06:34:10	<--	joehillen (~joe@71-84-132-57.dhcp.knwc.wa.charter.com) has quit (Ping timeout: 245 seconds)
2013-09-08 06:34:12	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 06:34:16	@edwardk	applicative: i've been talking with carter about spending some time doing statistical-folds
2013-09-08 06:34:24	Tekmo	edwardk: Well, if somebody contributes the cold for the smart statistics I will accept the pull request
2013-09-08 06:34:29	Tekmo	*contributes the code
2013-09-08 06:34:31	applicative	oh really, that was the scheme i was advancing
2013-09-08 06:34:32	@edwardk	that's one of the reasons why i put the package out there
2013-09-08 06:34:34	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-08 06:34:34	-->	joehillen (~joe@71-84-132-57.dhcp.knwc.wa.charter.com) has joined #haskell
2013-09-08 06:35:01	@edwardk	Tekmo: mostly just wanted to make you aware of the issue
2013-09-08 06:35:01	carter	first i need to finish yak shaving on ghc having nice primops :)
2013-09-08 06:35:02	applicative	Tekmo: I was thinking of just pulling a bunch from the statistics library
2013-09-08 06:35:19	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2013-09-08 06:35:27	carter	Tekmo: a bunch of nice algs by edwardk  are in the multipass lib
2013-09-08 06:35:28	h4199	applicative: which are wrong?
2013-09-08 06:35:31	applicative	carter: stick with that, if you know what you're doing ;)
2013-09-08 06:35:39	Tekmo	I don't even know where to begin with navigating the `statistics` library
2013-09-08 06:35:50	carter	its huge and takes while to compile
2013-09-08 06:35:54	carter	and its bos's take on things
2013-09-08 06:35:57	applicative	h4199: oh what did i say was wrong?
2013-09-08 06:36:07	h4199	parts of the stats lib
2013-09-08 06:36:14	Tekmo	Also, if it's written by bos then I don't trust it
2013-09-08 06:36:15	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 06:36:18	applicative	Tekmo: yeah I know, its sort of bos's secret world
2013-09-08 06:36:21	carter	Tekmo oh?
2013-09-08 06:36:23	@edwardk	it is best to have a working knowledge of statistics when going in and looking at the statistics package =)
2013-09-08 06:36:24	Tekmo	I'm pretty sure his criterion has a ton of statistical bugs in it
2013-09-08 06:36:29	carter	Tekmo YUP
2013-09-08 06:36:31	carter	i've hit them
2013-09-08 06:36:40	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 245 seconds)
2013-09-08 06:36:41	carter	it crashs if you only do 2-3 samples
2013-09-08 06:36:52	@edwardk	carter: well, lots of things aren't defined down there
2013-09-08 06:36:53	Tekmo	Here, let me pull up an example I brought up on his repository
2013-09-08 06:37:00	applicative	his expertise is elsewhere, we're supposed to file bug reports
2013-09-08 06:37:15	@edwardk	carter: but yes, it should be more careful about calculating undefined moments
2013-09-08 06:37:18	-->	ddinh (~David@70.231.145.202) has joined #haskell
2013-09-08 06:37:27	carter	applicative i like the edwardk  approach "gave me a solid pull request: you get commit bit"
2013-09-08 06:37:30	@edwardk	applicative: well, he is quite responsive to pull requests
2013-09-08 06:37:37	Tekmo	Here: https://github.com/bos/criterion/issues/11#issuecomment-15376537
2013-09-08 06:38:02	@edwardk	they merged my beta distribution into the statistics package from my order-statistics package before i even asked ;)
2013-09-08 06:38:16	carter	didyou get push powers on it then?
2013-09-08 06:38:21	SrPx	> let f 0 = 0; f (a+1) = a in f 3
2013-09-08 06:38:22	lambdabot	  <hint>:1:17: Parse error in pattern: a + 1
2013-09-08 06:38:27	SrPx	okay, I guess I was expering too much
2013-09-08 06:38:37	carter	n+k patterns are bad too
2013-09-08 06:38:56	carter	Tekmo: i'm yak shaving having nice prefetch intrinsics
2013-09-08 06:39:03	SrPx	does patterns work for something other than "a:b"?
2013-09-08 06:39:18	<--	joehillen (~joe@71-84-132-57.dhcp.knwc.wa.charter.com) has quit (Ping timeout: 276 seconds)
2013-09-08 06:39:33	@edwardk	carter: nah
2013-09-08 06:39:35	applicative	hm, the issue is closed without a clear account of the resolution it seems tekmo
2013-09-08 06:39:40	carter	shame
2013-09-08 06:39:43	joelteon	ooo, pipes 4.0 is out
2013-09-08 06:39:47	carter	joelteon yes
2013-09-08 06:39:55	applicative	is my memory wrong that he wrote the statistics library first for the sake of criterion?
2013-09-08 06:40:06	Tekmo	carter: There is a distinct pleasure about code going hyper-fast
2013-09-08 06:40:09	@edwardk	applicative: afaik
2013-09-08 06:40:10	ekipan	> case lookup 2 [(1,'a'), (2,'b')] of Just x -> x
2013-09-08 06:40:12	lambdabot	  'b'
2013-09-08 06:40:46	joelteon	time to port
2013-09-08 06:41:16	applicative	Tekmo: in any case, I was recommending e.g. Statistics.Sample as exporting a bunch of stuff that should have been foldls-in-amber https://github.com/bos/statistics/blob/master/Statistics/Sample.hs
2013-09-08 06:41:17	@edwardk	i'm hoping carter's prefetches help out with small COLAs in structures.
2013-09-08 06:41:22	ekipan	> case lookup 3 [(1,'a'), (2,'b')] of Just x -> x; Nothing -> '\u2639'
2013-09-08 06:41:23	lambdabot	  <hint>:1:63:
2013-09-08 06:41:23	lambdabot	     lexical error in string/character literal at character 'u'
2013-09-08 06:41:46	@edwardk	it trounces data map on inserts for large enough maps, but loses for lookups
2013-09-08 06:41:50	carter	edwardk: well, that plus the local linear scans
2013-09-08 06:41:50	applicative	Tekmo: and the cases where div <$> sum <*> length become pretty clear in the discussion there and elsewhere
2013-09-08 06:41:54	@edwardk	carter: yeah
2013-09-08 06:41:56	carter	edwardk: i may ahve to mod it to do pairs of ops
2013-09-08 06:42:08	Tekmo	applicative: What is this "in amber" thing? :)
2013-09-08 06:42:13	carter	because the whole point of the prefetches is to accelerate the binary search work
2013-09-08 06:42:29	applicative	Foldl op seed out is a 'foldl' in amber
2013-09-08 06:42:37	@edwardk	Tekmo: just more or less 'captured in the moment'
2013-09-08 06:42:40	carter	and while the ffi will be < 5-10ns, that could still slow things down
2013-09-08 06:42:41	applicative	sorry, it's and edwardk contagion i took to
2013-09-08 06:42:48	applicative	i'm misusing it presumably
2013-09-08 06:43:03	@edwardk	Tekmo: i referred to an M a b   as a 'foldMap in amber' in the haddocks for folds
2013-09-08 06:43:13	Tekmo	Oh, I get it! :)
2013-09-08 06:43:36	applicative	i should have spoken of e.g. a reified foldl or something, edwards idea is more fancy
2013-09-08 06:44:14	applicative	Statistics.Sample ought to be exporting reified Foldls rather than Vector a -> a functions
2013-09-08 06:44:26	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-08 06:44:28	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 06:44:36	@edwardk	applicative: did you see all the let folds for adler32 and the crc variants i had in folds before ripping them out?
2013-09-08 06:44:36	applicative	if i want both samples, by hypothesis, i have to apply the function twice, his way.
2013-09-08 06:44:41	@edwardk	er left
2013-09-08 06:45:01	applicative	edwardk: yes somewhere i saw them
2013-09-08 06:45:24	<--	Wuzzy2 (~Wuzzy@p549FAC02.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-08 06:46:08	applicative	Tekmo: i was saying to edwardk the module is especially uncanny since the L'/Foldl concept is barely below the surface in Statistics.Sample
2013-09-08 06:46:18	@edwardk	yeah
2013-09-08 06:46:29	applicative	i think you will have more respect for him when you observe this
2013-09-08 06:46:32	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 06:47:48	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 06:47:52	Tekmo	I have respect for him, just not for that particular library :)
2013-09-08 06:47:53	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-08 06:47:54	-->	structuralist (~structura@50-197-184-65-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 06:48:04	applicative	even the specifically existential character of the type; he defines several types in passing for specific funcions
2013-09-08 06:48:30	applicative	Tekmo: yeah i think the library is okay, it has just has too pretentious a title
2013-09-08 06:48:36	applicative	it should be, criterion-common
2013-09-08 06:48:51	-->	scripty (~scripty@117.192.161.224) has joined #haskell
2013-09-08 06:48:59	Tekmo	I don't mind pretentious titles
2013-09-08 06:49:11	applicative	oh i hadn't noticed ;)
2013-09-08 06:49:14	Tekmo	:)
2013-09-08 06:49:23	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-08 06:49:49	@edwardk	heh
2013-09-08 06:49:58	@edwardk	can't say that i can complain about that aspect either ;)
2013-09-08 06:50:00	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 06:50:15	Tekmo	Well, *somebody* has to take that name
2013-09-08 06:50:21	@edwardk	=)
2013-09-08 06:50:22	Tekmo	:)
2013-09-08 06:50:35	<--	segmond (~segmond@108.67.101.30) has quit (Ping timeout: 260 seconds)
2013-09-08 06:50:39	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-09-08 06:53:24	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-08 06:53:59	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 06:53:59	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-08 06:56:05	carter	who's going to take tubes
2013-09-08 06:56:11	carter	thats what I wanna know
2013-09-08 06:56:23	carter	maybe that should be for the next big networking lib
2013-09-08 06:56:30	Tekmo	Senator Ted Stevents
2013-09-08 06:56:32	Tekmo	*Stevens
2013-09-08 06:56:34	carter	its just a series of tubes right? :P
2013-09-08 06:56:38	carter	hehe
2013-09-08 06:57:02	carter	i may take tubes if i ever do a networking library and i want a silly name
2013-09-08 06:57:02	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 06:57:15	Tekmo	`tubular-1.0.0`
2013-09-08 06:57:17	shachaf	I'll wait for capillaries.
2013-09-08 06:57:31	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-08 06:57:57	carter	shachaf: that'll be for bluetooth and zigbee and such
2013-09-08 06:58:45	Tekmo	Also, I think somebody already had dibs on collapsible-fabric-pet-tunnel
2013-09-08 06:59:39	<--	pavonia (~user@p54B9F97F.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-08 06:59:42	carter	ooooo
2013-09-08 06:59:45	carter	whats that one for?
2013-09-08 06:59:51	Tekmo	It's a joke :)
2013-09-08 06:59:52	carter	a childrens FRP lib?
2013-09-08 07:00:03	carter	i know, i was trying to push it further
2013-09-08 07:00:06	Tekmo	:)
2013-09-08 07:00:30	applicative	Tekmo: maybe if the above was put thus: there ought to be a 'mean' in Foldl that i can run on an unboxed vector; bos has one only he can't express it
2013-09-08 07:00:44	<--	tac (~tac-tics@2602:306:bdb4:5100:21ce:7b5b:5b8b:efdb) has quit (Quit: Leaving)
2013-09-08 07:00:46	carter	but yeah, onething i've learned is that its general best to make your *.Internal.* modules exposed, for the power users
2013-09-08 07:00:56	 *	hackagebot folds 0.3 - Beautiful Folding  http://hackage.haskell.org/package/folds-0.3 (EdwardKmett)
2013-09-08 07:00:58	 *	hackagebot hackage-proxy 0.2.0.0 - Provide a proxy for Hackage which modifies responses in some way.  http://hackage.haskell.org/package/hackage-proxy-0.2.0.0 (MichaelSnoyman)
2013-09-08 07:01:00	 *	hackagebot http-reverse-proxy 0.2.1.1 - Reverse proxy HTTP requests, either over raw sockets or with WAI  http://hackage.haskell.org/package/http-reverse-proxy-0.2.1.1 (MichaelSnoyman)
2013-09-08 07:01:02	 *	hackagebot project-template 0.1.3.1 - Specify Haskell project templates and generate files  http://hackage.haskell.org/package/project-template-0.1.3.1 (MichaelSnoyman)
2013-09-08 07:01:04	 *	hackagebot cabal-install 1.18.0.1 - The command-line interface for Cabal and Hackage.  http://hackage.haskell.org/package/cabal-install-1.18.0.1 (JohanTibell)
2013-09-08 07:01:04	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-08 07:01:09	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-08 07:01:23	@edwardk	carter: the joke around the office for days before i shipped machines was that it should be called tubes
2013-09-08 07:01:33	carter	ok
2013-09-08 07:01:33	Tekmo	applicative: So I guess my question is how do you compute `mean` in finite precision in a numerically stable way?
2013-09-08 07:01:43	carter	noted
2013-09-08 07:01:53	shachaf	tibbe: Uh oh. Should I upgrade?
2013-09-08 07:02:01	@edwardk	tekmo: take the first level of chan's algorithm
2013-09-08 07:02:07	Tekmo	edwardk: I loved the `Appliance` type class in `machines`
2013-09-08 07:02:11	@edwardk	Tekmo: hah
2013-09-08 07:02:18	tibbe	shachaf: only if you're having issues
2013-09-08 07:02:26	carter	which issues?
2013-09-08 07:02:30	shachaf	OK.
2013-09-08 07:02:31	applicative	Tekmo: yes, i take it there are technical answers, that wont be ideally beautiful, but can in fact be packaged as Foldl's and used just fine in e.g (,,,) <$> mean <*> ... etc
2013-09-08 07:02:32	--	gpampara_off is now known as gpampara
2013-09-08 07:02:33	tibbe	shachaf: I believe the issue was due to how HP on OS X uses non-default Cabal install dirs
2013-09-08 07:02:39	carter	yup!
2013-09-08 07:02:39	-->	k0001 (~k0001@host130.190-137-207.telecom.net.ar) has joined #haskell
2013-09-08 07:02:41	shachaf	Ah.
2013-09-08 07:02:56	carter	i fixed mine up
2013-09-08 07:03:08	carter	i had some weird other linking errors i couldn't repro easily though
2013-09-08 07:03:24	-->	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has joined #haskell
2013-09-08 07:04:01	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 07:04:20	applicative	Tekmo: how icky is the 'Welford' mean here https://github.com/bos/statistics/blob/master/Statistics/Sample.hs#L70
2013-09-08 07:04:24	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-08 07:04:42	Tekmo	applicative: I found the algorithm edwardk referred to on the wikipedia page
2013-09-08 07:05:00	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 245 seconds)
2013-09-08 07:05:06	applicative	ah. I prefer bos to wikipedia
2013-09-08 07:05:31	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 260 seconds)
2013-09-08 07:05:35	applicative	anyway, the harmonic mean is better, if only by dint of its name
2013-09-08 07:05:53	-->	functorfun (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has joined #haskell
2013-09-08 07:06:25	applicative	carter: do you know a lot of statistical nonsense, or sense rather?
2013-09-08 07:06:35	carter	sometimes
2013-09-08 07:06:54	carter	or at least the prior says "carter believes he does, though somtimes i have to look things up "
2013-09-08 07:06:58	-->	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 07:06:59	<--	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-08 07:07:11	-->	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 07:07:14	<--	KirinDave (~kirindave@c-67-169-91-85.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-08 07:07:26	carter	applicative is there a question to be asked?
2013-09-08 07:08:06	carter	Tekmo the wikipedia version is easier to read than the bos one for sure
2013-09-08 07:08:10	applicative	carter: no, I was just thinking about the question of a proper expression of some of these things as Foldls/L's etc, who could vet them if not write them, so to say
2013-09-08 07:08:21	carter	edwardk knows a lot
2013-09-08 07:08:22	<--	functorfun (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has quit (Read error: Connection reset by peer)
2013-09-08 07:08:22	applicative	no way, the bos one is in Haskel
2013-09-08 07:08:31	applicative	Haskell even
2013-09-08 07:08:46	carter	applicative: the thing is, once you're in floating point land
2013-09-08 07:08:51	carter	rather than exact numbers
2013-09-08 07:08:59	carter	the answer often turns into "it depends"
2013-09-08 07:09:17	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-08 07:09:19	applicative	i was about to intervene ... 'dont say it...'
2013-09-08 07:09:29	<--	bondar (~bondar@197.156.132.62) has quit (Ping timeout: 246 seconds)
2013-09-08 07:09:37	carter	eh?
2013-09-08 07:09:44	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-08 07:09:45	applicative	carter: about floating points
2013-09-08 07:09:51	carter	tough
2013-09-08 07:09:51	@edwardk	welford's algorithm should just be level 1 of chan's
2013-09-08 07:09:58	applicative	anyway, forget the above, i was just collecting information
2013-09-08 07:10:03	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 241 seconds)
2013-09-08 07:10:16	<--	ystael (~ystael@pool-108-20-244-157.bstnma.east.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-08 07:10:27	carter	edwardk: yeah looks that way
2013-09-08 07:10:54	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-08 07:11:00	tel	oh: Chan-the-person's
2013-09-08 07:11:04	@edwardk	if you dig through old patches on github.com/analytics/analytics you'll find my moments comonad. i don't think it got split out into the analytics diaspora when the project refocused
2013-09-08 07:11:15	tel	I got worried you were looking into parallel moment calculations
2013-09-08 07:11:28	carter	tel no 4chan
2013-09-08 07:11:30	carter	:P
2013-09-08 07:11:34	applicative	i wish i could join some scientific project for a year or two as assistant haskell crank and figure out what is really needed for some of these things
2013-09-08 07:11:43	carter	applicative do it!
2013-09-08 07:11:45	@edwardk	tel: no, that very thing
2013-09-08 07:12:07	carter	applicative write gpu codes in haskell
2013-09-08 07:12:09	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-08 07:12:14	@edwardk	tel: i have a whole bunch of stuff for parallel moment calculations =P
2013-09-08 07:12:19	Tekmo	applicative: Scientists produce the shittiest code
2013-09-08 07:12:27	tel	Tekmo++
2013-09-08 07:12:28	@edwardk	and various other summary data
2013-09-08 07:12:35	tel	edwardk is this in analytics?
2013-09-08 07:12:45	Tekmo	The problem is that everybody in science is horribly underpaid
2013-09-08 07:12:47	@edwardk	tel: it was. if you go back enough patches you'll find a moments monoid
2013-09-08 07:12:50	Tekmo	So all the good programmers just leave
2013-09-08 07:12:55	applicative	yes, but if we had an impossibly beautiful and impossible clear and perfect etc. pile of libraries etc etc
2013-09-08 07:13:00	tel	edwardk ah ah, secret stuff
2013-09-08 07:13:05	applicative	they wouldn't care...
2013-09-08 07:13:32	tel	edwardk I may look that up. I have some NUTS code that I want to revisit soon and all this fold stuff would plug into it nicely
2013-09-08 07:13:38	carter	Tekmo: plus everyone gets all esoteric to exoticify their research
2013-09-08 07:13:47	carter	tel ooooo
2013-09-08 07:13:49	@edwardk	tel: hamitonian monte carlo?
2013-09-08 07:13:51	tel	yup
2013-09-08 07:13:58	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 268 seconds)
2013-09-08 07:14:01	@edwardk	tel: nice. i'm currently NDA'd out of that space =(
2013-09-08 07:14:01	carter	tel you do realize edwardk  spent time hacking on that?
2013-09-08 07:14:04	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 260 seconds)
2013-09-08 07:14:07	tel	:(
2013-09-08 07:14:20	carter	nda'd in exchange for money though!
2013-09-08 07:14:23	carter	(right?)
2013-09-08 07:14:32	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-08 07:14:38	carter	though i guess thats the only nda's anyone shoudl do, right?
2013-09-08 07:14:59	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 07:15:15	applicative	tel, you don't need this information form carter; it's a priori knowledge
2013-09-08 07:15:26	applicative	i should go; good luck with the Pipes-4 inauguration Tekmo!
2013-09-08 07:15:31	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-08 07:15:31	Tekmo	Thank you!
2013-09-08 07:15:38	<--	applicative (~mthompso@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Quit: Lost terminal)
2013-09-08 07:15:39	@edwardk	tel: https://github.com/analytics/analytics/blob/1788912c838f8070b374e0a6effa1283c9ae9195/src/Data/Analytics/Numeric/Moments.hs appears to have some of the moment calculations in it
2013-09-08 07:15:49	-->	ykm (~ykm@38.snat-111-91-51.hns.net.in) has joined #haskell
2013-09-08 07:15:50	tel	I have just so many old cruddy BUGS scripts from darker days—Stan is really nice but, obviously it not being in Haskell is a problem
2013-09-08 07:15:51	@edwardk	carter: yes =)
2013-09-08 07:15:51	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 07:16:02	tel	oh! It's sunday—pipes-4!
2013-09-08 07:16:12	@edwardk	tel: we should talk monte carlo some time
2013-09-08 07:16:22	tel	edwardk I'd love to :)
2013-09-08 07:16:27	@edwardk	not many people in the haskell space who knows what NUTS is
2013-09-08 07:16:32	Tekmo	tel: Yeah, it was a slightly early release
2013-09-08 07:16:33	@edwardk	bgamari and a few others
2013-09-08 07:17:03	Tekmo	edwardk: That's not a very Google-friendly name
2013-09-08 07:17:14	@edwardk	No U-Turn Sampling Hamiltonian Monte Carlo
2013-09-08 07:17:32	tel	from Andrew Gelman out of Columbia
2013-09-08 07:17:33	@edwardk	it is a trick by a student of gelman's to make it so you don't have to tune how far your hamitonian monte carlo sampler goes
2013-09-08 07:17:42	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-08 07:18:11	tel	that stuff totally dominated my undergrad, then I stepped away in grad school toward speech processing
2013-09-08 07:18:16	<--	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 07:18:21	@edwardk	ou can combine it with nesterov's dual averaging to tune the step size, and the Riemann manifold hamiltonian monte carlo stuff to tune the 'flick' strength and you have more or less a parameter free HMC.
2013-09-08 07:18:26	carter	i really wanna resume playing with MCMC sometimeee
2013-09-08 07:18:46	<--	ykm (~ykm@38.snat-111-91-51.hns.net.in) has quit (Quit: Leaving.)
2013-09-08 07:19:12	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-08 07:19:20	@edwardk	basically the RMHMC approach may not always be cost effective inverting that tensor is O(n^3) in general, but it makes it so you don't have any parameters left, which is gorgeous
2013-09-08 07:19:53	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-08 07:19:57	SrPx	> 2^0.5
2013-09-08 07:19:58	lambdabot	  Could not deduce (GHC.Real.Integral b0)
2013-09-08 07:19:58	lambdabot	   arising from a use of `GHC.Real....
2013-09-08 07:19:59	SrPx	?
2013-09-08 07:20:06	Tekmo	2**0.5
2013-09-08 07:20:11	SrPx	Ty
2013-09-08 07:20:20	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 07:20:22	Tekmo	> 2**0.5
2013-09-08 07:20:24	lambdabot	  1.4142135623730951
2013-09-08 07:20:28	SrPx	(What is the ^ for then?)
2013-09-08 07:20:30	Tekmo	(^) requres an integral exponent
2013-09-08 07:20:33	tel	(while also just generally being HMC so you don't get terrible convergence problems :)
2013-09-08 07:20:42	@edwardk	tel: yeah
2013-09-08 07:20:43	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 240 seconds)
2013-09-08 07:20:47	SrPx	HMC?
2013-09-08 07:20:51	Tekmo	I'm guessing because it presumably uses a more efficient exponentiation-by-squaring
2013-09-08 07:20:56	@edwardk	hamiltonian monte carlo
2013-09-08 07:21:11	SrPx	... oh, sure. I know those words
2013-09-08 07:21:25	tel	normal monte carlo does hill climbing based essentially just on position
2013-09-08 07:21:30	<--	latermuse (~ron@112.201.152.193) has quit (Quit: leaving)
2013-09-08 07:21:36	tel	hamilltonian adds in a momentum term
2013-09-08 07:21:47	-->	latermuse (~ron@112.201.152.193) has joined #haskell
2013-09-08 07:21:52	-->	morazow (~morazow@p548A5F98.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 07:21:57	@edwardk	http://www.cs.utoronto.ca/~radford/ftp/ham-mcmc.pdf is probably the best intro
2013-09-08 07:22:18	<--	latermuse (~ron@112.201.152.193) has left #haskell
2013-09-08 07:22:38	tel	the momentum makes your sampler less likely to get "stuck" in narrow parts of your parameter space
2013-09-08 07:23:16	@edwardk	basically normally what you do to do MCMC, is you try to draw independent random samples from a distribution using some way to get correlated samples. you find some point on the distribution which has non-zero probability density. then you apply some kind of perturbation of candidate selection function to it subject to certain conditions about symmetry and you accept 'better' positions (with higher density) all the time, and
2013-09-08 07:23:16	@edwardk	 'down hill moves' some of the time
2013-09-08 07:23:23	joelteon	does ghci have a command for expanding type synonyms?
2013-09-08 07:23:32	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-08 07:23:37	Tekmo	joelteon: Try `:i TypeSynonym`
2013-09-08 07:24:17	@edwardk	if you take a snap shot of your moves every so often, it moves like a stop motion video, and you see the point jumping around the distribution. there is a whole study of how often to sample, etc. but the idea stays the same. this is metropolis hastings.
2013-09-08 07:24:33	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-08 07:24:54	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Quit: Leaving)
2013-09-08 07:25:05	@edwardk	it is used to sample from a probability density function you don't know the full c.d.f for. e.g. you know something proportional to the p.d.f but not the actual constant needed to normalize it to a c.d.f.
2013-09-08 07:25:36	@edwardk	now if you know a bit more about the distribution than just the value of the p.d.f for a given point you can do more. the first optimization you can do is use the derivative of the p.d.f at a given point
2013-09-08 07:26:04	@edwardk	if you know that (well, the derivative of the thing you have that is proportional to the p.d.f) then you can use it to bias your samples uphill to get better accept rates
2013-09-08 07:26:17	@edwardk	this gives you MALA, or the metropolis adjusted Langevin algorithm, but it kinda sucks
2013-09-08 07:26:22	tel	(and if you've been automatically computing it all along… :)
2013-09-08 07:26:28	@edwardk	it works a little bit better than knowing nothing
2013-09-08 07:26:41	@edwardk	and if you have automatic differentiation.. then its free =)
2013-09-08 07:26:44	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-08 07:27:02	@edwardk	HMC works differently, what we do is try to make 'big moves' that have high acceptance probability
2013-09-08 07:27:07	Tekmo	You know, this is why libraries exist
2013-09-08 07:27:20	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-08 07:27:42	@edwardk	the main problem you have with MCMC in general is the curse of dimensionality, if you're making a bunch of random moves, lots of them will be fighting your forward progress moving you back the way you came.
2013-09-08 07:27:54	@edwardk	and it can be very hard to cross a long thin valley
2013-09-08 07:28:28	@edwardk	so what HMC does is replace your position, with a position and a momentum, it picks the momentum randomly instead of the new destination randomly
2013-09-08 07:28:31	dwcook	Are there operations in some module supporting a container that, equivalently, either imposes a unique restriction on a list or adds order to a set?
2013-09-08 07:28:44	dwcook	s/unique/uniqueness/
2013-09-08 07:28:46	<--	scripty (~scripty@117.192.161.224) has quit (Read error: Connection reset by peer)
2013-09-08 07:29:09	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-08 07:29:10	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-08 07:29:18	@edwardk	then it runs a hamiltonian simulation of a frictionless pick skittering around on your function (suitably turned upside down and logarithmed). this means you'll shoot down into peaks (now valleys) and come out the other side after some amount of time
2013-09-08 07:29:26	Tekmo	dwcook: `Data.Set` from `containers` requires that all elements are unique and also keeps them sorted
2013-09-08 07:29:52	<--	morazow (~morazow@p548A5F98.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-08 07:29:53	@edwardk	but most of the time you'll be a just a bit lower than when you went in, the hamiltonian simulation makes it so when you go down you keep all that energy
2013-09-08 07:29:57	@edwardk	s you'll come back up
2013-09-08 07:30:34	Tekmo	edwardk: So in other words, it simulates a ball rolling around with no friction or any other dissipative force?
2013-09-08 07:30:34	@edwardk	the first way to do this used some fixed number of steps, say 150 steps, and some fixed sizes you had to guess at for the steps, in some made up notion of time that was bolted on side-ways to the model
2013-09-08 07:30:39	Tekmo	edwardk: But with some element of randomness?
2013-09-08 07:30:40	dwcook	Tekmo, oh good, I was unaware that imposed order. Sounds perfect. Thanks.
2013-09-08 07:30:45	@edwardk	tel: feel free to fix up what i'm saying if i tell any obvious fips
2013-09-08 07:30:48	@edwardk	er fibs
2013-09-08 07:30:49	Tekmo	dwcook: You're welcome!
2013-09-08 07:30:57	--	hdevalence is now known as hdevalence|away
2013-09-08 07:31:01	-->	morazow (~morazow@p548A5F98.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 07:31:02	tel	edwardk semi-afk but it sounds great so far ;)
2013-09-08 07:31:20	dwcook	Tekmo, woops, sorry, I both misunderstood what you meant and didn't full state the problem.
2013-09-08 07:31:20	@edwardk	Tekmo: yeah. basically we 'flick' the sample every so often and see where it goes, then accept or reject the new position the same old way
2013-09-08 07:31:33	Tekmo	edwardk: I understand how normal monte-carlo works
2013-09-08 07:31:33	dwcook	I want to impose an *arbitrary* order, not based on the type itself.
2013-09-08 07:31:36	@edwardk	and we just look at it after a while
2013-09-08 07:31:58	@edwardk	now, we still had some magic 150 steps constant in our system
2013-09-08 07:32:07	@edwardk	NUTS is a way to eliminate that
2013-09-08 07:32:23	joelteon	ok, pipes-4.0 is confusing so far
2013-09-08 07:32:27	Tekmo	dwcook: I usually hack around this by wrapping the elements in a newtype with a custom `Ord` instance
2013-09-08 07:32:36	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-08 07:32:42	AfC	Tekmo: congrats on pipes-4.0
2013-09-08 07:32:43	@edwardk	what it does is turn this into a 'slice sampling' problem, by basically building a tree up from the current position along the direction we've selected as our momentum, but to remove bias it builds the tree randomly forward or back at each step
2013-09-08 07:32:48	Tekmo	AfC: Thanks!
2013-09-08 07:32:48	joelteon	Tekmo: pipes is awesome
2013-09-08 07:32:52	pharaun	pipes 4.0 is the stable api now?
2013-09-08 07:32:54	@edwardk	doubling in size each level
2013-09-08 07:32:57	Tekmo	joelteon: Thank you :)
2013-09-08 07:33:00	Tekmo	pharaun: Yes
2013-09-08 07:33:01	joelteon	Tekmo: can i badger you incessantly over the next few hours?
2013-09-08 07:33:01	AfC	pharaun: yes
2013-09-08 07:33:02	pharaun	i remember reading while it was on 3.0ish
2013-09-08 07:33:05	Tekmo	joelteon: Yes
2013-09-08 07:33:08	joelteon	ok
2013-09-08 07:33:10	joelteon	thanks
2013-09-08 07:33:14	pharaun	Tekmo: sweet! hella yes i'm going to give this a shot then :)
2013-09-08 07:33:19	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-08 07:33:21	pharaun	i just hope the http part isn't too tricky to do
2013-09-08 07:33:37	Tekmo	Are you Silicoid from /r/haskell?
2013-09-08 07:33:37	@edwardk	and it looks for when the vectors at the end points of the tree would be heading in opposite directions
2013-09-08 07:33:52	@edwardk	that means you'd have turned around and started skittering back down a valley towards where you came from
2013-09-08 07:34:05	@edwardk	so the path after that point would be partially redundant with how you got there
2013-09-08 07:34:20	@edwardk	so NUTS then slice samples the tree so far, picking a point along the way
2013-09-08 07:34:32	@edwardk	and it can do so without introducing bias
2013-09-08 07:34:34	@edwardk	its quite clever
2013-09-08 07:36:17	@edwardk	anyways, that is what NUTS is
2013-09-08 07:36:24	tel	the whole tree-sampling bit for volume preservation is fantastic
2013-09-08 07:36:51	<--	dexter2 (~dexter3@71-212-130-174.hlrn.qwest.net) has quit (Read error: Connection reset by peer)
2013-09-08 07:37:01	<--	wak (~wak@63.252.64.209) has quit (Read error: Connection reset by peer)
2013-09-08 07:37:08	enthropy	dwcook: if you have  (Map a Int, Map Int a),   with Int being the index into the list `a' being your values that might be able to do what you ask for
2013-09-08 07:37:17	pharaun	Tekmo: me? i'm not :)
2013-09-08 07:37:21	@edwardk	i'm a big fan of NUTS based HMC for big continuous models
2013-09-08 07:37:35	enthropy	ixset on hackage has that kind of representation, but maybe there are alternatives
2013-09-08 07:37:35	Tekmo	pharaun: Oh, I was just asking because somebody on /r/haskell named Silicoid was asking about http stuff, too
2013-09-08 07:37:36	@edwardk	like the ones that come up in metropolis light transport
2013-09-08 07:37:37	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-08 07:37:40	pharaun	ahh
2013-09-08 07:37:44	-->	dexter2 (~dexter3@71-212-130-174.hlrn.qwest.net) has joined #haskell
2013-09-08 07:38:12	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-08 07:38:21	pharaun	Tekmo: basically i've been using http-conduit for bunch of streaming/downloading stuff and i was looking at the pipes api and i really liked the api and yeah. I'm going to have to try to do an equivalent in pipes :) (re http)
2013-09-08 07:38:46	Tekmo	So I can point out one `pipes` idiom which is unique
2013-09-08 07:39:02	Tekmo	Other streaming libraries can use this idiom, but I haven't seen them do it yet
2013-09-08 07:39:18	Tekmo	It's the trick that `pipes-parse` does for subdividing streams using `FreeT`
2013-09-08 07:39:35	carter	does it relate to being able to ask how much to get fed?
2013-09-08 07:39:38	tel	edwardk I'd never heard of metropolis light transport
2013-09-08 07:39:40	Tekmo	carter: No
2013-09-08 07:39:47	dwcook	enthropy, I think for the sake of simplicity and just getting it working, I'm just going to use a list and do a membership check on insert, for now.
2013-09-08 07:39:48	tel	edwardk I've always used this stuff for big gnarly graphical models
2013-09-08 07:39:52	-->	augur (~augur@129-2-129-33.wireless.umd.edu) has joined #haskell
2013-09-08 07:40:24	dwcook	If I need something fancier later, I can adopt it without changing the interface, probably.
2013-09-08 07:40:28	@edwardk	metropolis light transport is basically one of the main reasons why i learned bayesian statistics
2013-09-08 07:40:50	h4199	wait, edward, the algorithm "frictionless momentums" down a valley and up to the other side the NUTS stops it from "falling back in", how is that case handled when NUTS is not employed?
2013-09-08 07:40:50	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-08 07:40:50	@edwardk	that and that pesky wanting to graduate thing later
2013-09-08 07:40:54	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-08 07:41:00	Tekmo	pharaun: Anyway, the best place to begin is Andrew Cowie's `http-streams` library
2013-09-08 07:41:02	 *	hackagebot conduit 1.0.7.4 - Streaming data processing library.  http://hackage.haskell.org/package/conduit-1.0.7.4 (MichaelSnoyman)
2013-09-08 07:41:04	 *	hackagebot conduit-extra 0.1.0 - Experimental helper functions for conduit.  http://hackage.haskell.org/package/conduit-extra-0.1.0 (MichaelSnoyman)
2013-09-08 07:41:12	@edwardk	h4199: by cutting off at some point and picking some point along the path
2013-09-08 07:41:15	tel	edwardk do you have a ref on it? Or just the siggraph paper?
2013-09-08 07:41:16	<--	oleo (~oleo@xdsl-78-35-177-226.netcologne.de) has quit (Read error: Operation timed out)
2013-09-08 07:41:21	h4199	ah, k
2013-09-08 07:41:38	carter	@hackage http-streams
2013-09-08 07:41:38	lambdabot	http://hackage.haskell.org/package/http-streams
2013-09-08 07:41:49	@edwardk	tel: i have lots of references, but they maybe should go off channel
2013-09-08 07:41:59	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-08 07:42:07	carter	edwardk tel its on topic for #haskell-numerics :)
2013-09-08 07:42:11	-->	oleo (~oleo@xdsl-78-35-143-92.netcologne.de) has joined #haskell
2013-09-08 07:42:17	tel	MCMC tuning is especially painful since it's non-deterministic and sometimes hard to measure whether it's working "well" or not
2013-09-08 07:42:50	carter	except when you can prove quantitative convergence… which sin't with the intersting models right?
2013-09-08 07:43:00	tel	edwardk we can move it, though I'm probably sleeping soon so any deeper talk will be another night :)
2013-09-08 07:43:11	@edwardk	tel: lets pick up another time then
2013-09-08 07:43:21	tel	lets :)
2013-09-08 07:43:36	carter	i should wander off t
2013-09-08 07:43:38	carter	night all!
2013-09-08 07:43:44	Tekmo	Good night
2013-09-08 07:43:48	tel	g'night :)
2013-09-08 07:43:53	@edwardk	I have to drive up to new hampshire tomorrow stupidly early, so i'm frantically pushing out code before i forget =)
2013-09-08 07:43:59	carter	ick
2013-09-08 07:44:01	carter	enjoy
2013-09-08 07:44:04	<--	ashnur (~ashnur@79.117.69.143) has quit (Quit: WeeChat 0.4.1)
2013-09-08 07:44:23	tel	and Tekmo, congrats on the pipes rollout
2013-09-08 07:44:26	pharaun	Tekmo: thanks for the pointer :)
2013-09-08 07:44:38	Tekmo	pharaun: You're welcome!
2013-09-08 07:44:40	Tekmo	tel: Thanks :)
2013-09-08 07:44:50	carter	Tekmo what tel said
2013-09-08 07:44:55	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-08 07:45:01	Tekmo	carter: Thank you!
2013-09-08 07:45:05	carter	Tekmo: though you know i've been a lurker on pipes developement for 1-2 years now?
2013-09-08 07:45:14	carter	even the pipes-core stuff too
2013-09-08 07:45:15	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Ping timeout: 264 seconds)
2013-09-08 07:45:16	Tekmo	carter: I know
2013-09-08 07:45:27	Tekmo	carter: I remember you commenting way back on one of the earliest releases
2013-09-08 07:45:28	<--	chatsiri_ (~chatsiri_@171.6.174.58) has quit (Quit: leaving)
2013-09-08 07:45:40	carter	"something thats not iterateees, OMG"
2013-09-08 07:45:43	carter	probably, right?
2013-09-08 07:46:01	carter	then conduits followed suit around then?
2013-09-08 07:46:02	 *	hackagebot project-template 0.1.3.2 - Specify Haskell project templates and generate files  http://hackage.haskell.org/package/project-template-0.1.3.2 (MichaelSnoyman)
2013-09-08 07:46:04	 *	hackagebot resourcet 0.4.8 - Deterministic allocation and freeing of scarce resources.  http://hackage.haskell.org/package/resourcet-0.4.8 (MichaelSnoyman)
2013-09-08 07:46:05	Tekmo	It was some question about the old push composition
2013-09-08 07:46:06	 *	hackagebot cprng-aes 0.5.2 - Crypto Pseudo Random Number Generator using AES in counter mode.  http://hackage.haskell.org/package/cprng-aes-0.5.2 (VincentHanquez)
2013-09-08 07:46:13	carter	oh push vs pull
2013-09-08 07:46:21	carter	and trying to understand semantics
2013-09-08 07:46:25	Tekmo	carter: Yeah
2013-09-08 07:46:37	pharaun	hah thanks carter i was about to go search hackage for that one (http-streams)
2013-09-08 07:46:55	Tekmo	pharaun: You will also want to check out `pipes-bytestring`: https://github.com/Gabriel439/Haskell-Pipes-ByteString-Library
2013-09-08 07:46:56	carter	the @hackage  package-name command rocks
2013-09-08 07:47:04	Tekmo	pharaun: However, I can't complete that until after I graduate
2013-09-08 07:47:11	pharaun	course load?
2013-09-08 07:47:11	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 07:47:18	Tekmo	I'm writing up my thesis
2013-09-08 07:47:20	carter	phd thesis load
2013-09-08 07:47:22	Tekmo	Yeah
2013-09-08 07:47:22	pharaun	ahh
2013-09-08 07:47:28	pharaun	oof, best of luck!
2013-09-08 07:47:32	Tekmo	Thanks :)
2013-09-08 07:48:35	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-08 07:48:57	<--	tel (~tel@71.206.43.93) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-08 07:49:21	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 07:49:24	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Quit: Pozdrav)
2013-09-08 07:49:35	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-08 07:50:57	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 07:51:02	 *	hackagebot cereal-conduit 0.7.1 - Turn Data.Serialize Gets and Puts into Sources, Sinks, and Conduits  http://hackage.haskell.org/package/cereal-conduit-0.7.1 (MylesMaxfield)
2013-09-08 07:51:04	 *	hackagebot crypto-numbers 0.2.1 - Cryptographic numbers: functions and algorithms  http://hackage.haskell.org/package/crypto-numbers-0.2.1 (VincentHanquez)
2013-09-08 07:58:03	threestrikes	@hoogle filepath
2013-09-08 07:58:03	lambdabot	Prelude type FilePath = String
2013-09-08 07:58:03	lambdabot	System.IO type FilePath = String
2013-09-08 07:58:03	lambdabot	System.FilePath.Windows type FilePath = String
2013-09-08 07:58:08	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 246 seconds)
2013-09-08 07:58:48	<--	ekipan (4cd4e3ee@gateway/web/freenode/ip.76.212.227.238) has quit (Quit: Page closed)
2013-09-08 08:01:33	-->	sxn (~sxn@mnch-5d86c13b.pool.mediaWays.net) has joined #haskell
2013-09-08 08:01:53	-->	hari_ (~hari@117.193.43.136) has joined #haskell
2013-09-08 08:03:52	<--	hiroakip (~hiroaki@p5DC637E3.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-08 08:03:58	-->	litherum (~Adium@c-98-207-92-11.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 08:04:07	<--	visof (~visof@41.130.70.208) has quit (Ping timeout: 264 seconds)
2013-09-08 08:04:34	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 08:04:43	threestrikes	@hoogle elem
2013-09-08 08:04:43	lambdabot	Prelude elem :: Eq a => a -> [a] -> Bool
2013-09-08 08:04:44	lambdabot	Data.List elem :: Eq a => a -> [a] -> Bool
2013-09-08 08:04:44	lambdabot	Data.Foldable elem :: (Foldable t, Eq a) => a -> t a -> Bool
2013-09-08 08:04:45	-->	noam_ (~noam@213.57.201.130) has joined #haskell
2013-09-08 08:04:48	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-08 08:05:05	threestrikes	@hoogle filter
2013-09-08 08:05:06	lambdabot	Prelude filter :: (a -> Bool) -> [a] -> [a]
2013-09-08 08:05:06	lambdabot	Data.List filter :: (a -> Bool) -> [a] -> [a]
2013-09-08 08:05:06	lambdabot	Control.Monad filterM :: Monad m => (a -> m Bool) -> [a] -> m [a]
2013-09-08 08:05:56	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-08 08:06:22	enthropy	do other people use the haskellmode for vim?
2013-09-08 08:07:04	enthropy	does :DocIndex also stop calculating when the output fills up?
2013-09-08 08:07:17	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 08:07:18	<--	noam (~noam@213.57.201.130) has quit (Ping timeout: 264 seconds)
2013-09-08 08:07:43	 *	enthropy guesses this is a vim issue
2013-09-08 08:07:44	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-08 08:07:59	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-09-08 08:09:28	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 264 seconds)
2013-09-08 08:11:25	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 08:11:41	leroux	enthropy: I just ran it and it seems like it takes a bit of time to finish.
2013-09-08 08:11:46	leroux	Took about 15sec for me.
2013-09-08 08:13:32	<--	litherum (~Adium@c-98-207-92-11.hsd1.ca.comcast.net) has quit (Quit: Leaving.)
2013-09-08 08:14:03	hari_	Would love some feedback on this: http://harishankar.org/blog/entry.php/musings-on-functional-programming-and-haskell
2013-09-08 08:14:12	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-08 08:14:51	-->	scripty (~scripty@117.192.161.224) has joined #haskell
2013-09-08 08:15:11	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 08:15:27	leroux	hari_: Reading it now.
2013-09-08 08:15:41	enthropy	leroux: yes it takes a long time. But the hundreds of lines about "populating g:haddock_index from haddock index files in" just scrolled by?
2013-09-08 08:16:23	enthropy	in my case it got stuck after one page and needed to be told to move on (space or page down)
2013-09-08 08:16:25	leroux	enthropy: Initially it looked like it was completely stopped, but then suddenly it `less`'s everything.
2013-09-08 08:16:33	leroux	enthropy: That means it's done.
2013-09-08 08:16:50	enthropy	or I just commented out the echo lines
2013-09-08 08:17:24	-->	talzeus (~studybot_@u847193.xgsnun4.imtp.tachikawa.mopera.net) has joined #haskell
2013-09-08 08:17:25	-->	hiroakip (~hiroaki@p5DC628D4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 08:17:40	-->	noam (~noam@213.57.201.130) has joined #haskell
2013-09-08 08:17:44	leroux	I get all the populating lines.
2013-09-08 08:18:01	hari_	leroux, thanks.
2013-09-08 08:18:44	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 08:19:25	leroux	hari_: No pun intended in "All said and done, FP, especially as viewed through the lens of Haskell, is tough."?
2013-09-08 08:19:35	<--	noam_ (~noam@213.57.201.130) has quit (Ping timeout: 245 seconds)
2013-09-08 08:20:05	<--	rfw (~rfw@heimdall.rfw.name) has quit (Quit: WeeChat 0.4.1)
2013-09-08 08:20:27	leroux	hari_: It looks great.
2013-09-08 08:20:44	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-08 08:20:48	leroux	You can gather more feedback on the haskell reddit.
2013-09-08 08:20:52	hari_	leroux, no pun intended.
2013-09-08 08:20:56	pharaun	hari_: i liked the article its a nice one
2013-09-08 08:21:20	hari_	pharaun, thanks.
2013-09-08 08:22:06	hari_	I think the problem about "unfamiliar problem domain" is one reason I discovered that FP is tough
2013-09-08 08:22:16	<--	callen (~callen@198.199.80.102) has quit (Changing host)
2013-09-08 08:22:17	-->	callen (~callen@unaffiliated/callen) has joined #haskell
2013-09-08 08:22:31	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-08 08:22:38	pharaun	one thing i've found that is helpful sometime it to implement projects you've done in other language as a way to compare
2013-09-08 08:22:40	<--	rfw (~rfw@heimdall.rfw.name) has quit (Client Quit)
2013-09-08 08:22:50	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-08 08:22:50	pharaun	or are already familiar with that domain so you can focus on learning the fp/haskell stuff
2013-09-08 08:22:54	hari_	pharaun, yes.
2013-09-08 08:23:11	hari_	RWH has a chapter on reading barcode from an image.
2013-09-08 08:23:15	<--	talzeus (~studybot_@u847193.xgsnun4.imtp.tachikawa.mopera.net) has quit (Remote host closed the connection)
2013-09-08 08:23:36	hari_	That is kind of where I found it extremely tough to follow along.
2013-09-08 08:23:44	<--	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-08 08:23:59	-->	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has joined #haskell
2013-09-08 08:24:14	shachaf	@quote kmc incompatible
2013-09-08 08:24:14	lambdabot	kmc says: Haskell is a language where the community observes that there are 50 incompatible error handling monads, and the response is 50 incompatible packages for generically handling all error
2013-09-08 08:24:14	lambdabot	handling monads
2013-09-08 08:24:36	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Quit: WeeChat 0.3.7)
2013-09-08 08:25:04	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 08:25:31	pharaun	hari_: yeah i wasn't a fan of that chapter myself *shrugs* was able to manage it but yeah
2013-09-08 08:25:52	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-08 08:26:06	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-08 08:26:23	fylwind	what's the command to look at intermediate Haskell and/or C code when compiling w/ -O ?
2013-09-08 08:26:24	hari_	pharaun, RWH is a good book, but later chapters are quite densely packed.
2013-09-08 08:26:54	-->	hxn1248 (~Vincent@cpe-173-175-120-156.satx.res.rr.com) has joined #haskell
2013-09-08 08:27:14	<--	hxn1248 (~Vincent@cpe-173-175-120-156.satx.res.rr.com) has left #haskell
2013-09-08 08:27:58	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-08 08:29:16	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-08 08:29:25	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 240 seconds)
2013-09-08 08:30:05	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-08 08:30:26	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-08 08:32:56	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 260 seconds)
2013-09-08 08:33:11	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Read error: Operation timed out)
2013-09-08 08:33:33	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-08 08:33:59	-->	znode (~znode@119.132.61.87) has joined #haskell
2013-09-08 08:36:03	 *	hackagebot tls 1.1.5 - TLS/SSL protocol native implementation (Server and Client)  http://hackage.haskell.org/package/tls-1.1.5 (VincentHanquez)
2013-09-08 08:37:21	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 08:39:25	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 08:40:37	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: No route to host)
2013-09-08 08:40:47	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-08 08:41:03	 *	hackagebot cipher-blowfish 0.0.2 - Blowfish cipher  http://hackage.haskell.org/package/cipher-blowfish-0.0.2 (VincentHanquez)
2013-09-08 08:41:26	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-08 08:41:39	<--	dyreshark (~dyreshark@198.199.76.106) has quit (Quit: I dont know what went wrong!)
2013-09-08 08:41:58	-->	tac (~tac-tics@2602:306:bdb4:5100:d528:1566:ead4:eaa5) has joined #haskell
2013-09-08 08:42:33	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-08 08:43:24	-->	dyreshark (~dyreshark@198.199.76.106) has joined #haskell
2013-09-08 08:43:31	-->	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 08:43:45	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 240 seconds)
2013-09-08 08:43:55	threestrikes	can this "let containsExtension w (ws,_) = w `elem` ws) be written with w being any character I want?
2013-09-08 08:44:11	Taneb	Yeah
2013-09-08 08:44:13	--	gpampara is now known as gpampara_off
2013-09-08 08:44:13	<--	structuralist (~structura@50-197-184-65-static.hfc.comcastbusiness.net) has quit
2013-09-08 08:45:05	Taneb	You could even say "containsExtension wow_Haskell_is_cool (ws,_) = wow_Haskell_is_cool `elem` w" if you wanted
2013-09-08 08:45:08	-->	talzeus (~studybot_@u847193.xgsnun4.imtp.tachikawa.mopera.net) has joined #haskell
2013-09-08 08:45:19	Taneb	But that is awful style
2013-09-08 08:45:33	shachaf	Taneb: Wait, multi-character names?
2013-09-08 08:45:37	shachaf	Is that a new extension?
2013-09-08 08:45:50	Taneb	shachaf, I think it was added in GHC 7.6
2013-09-08 08:46:02	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-08 08:46:03	 *	hackagebot cipher-des 0.0.4 - DES and 3DES primitives  http://hackage.haskell.org/package/cipher-des-0.0.4 (VincentHanquez)
2013-09-08 08:46:19	Taneb	threestrikes, just to be clear, shachaf was joking there
2013-09-08 08:46:28	shachaf	Anyway, yes. Talking about how cool Haskell is in your Haskell code is considered bad style.
2013-09-08 08:47:19	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (Ping timeout: 264 seconds)
2013-09-08 08:47:39	threestrikes	ic
2013-09-08 08:47:47	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 08:48:06	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 240 seconds)
2013-09-08 08:48:06	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-08 08:48:28	<--	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-09-08 08:48:48	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-08 08:50:43	<--	znode (~znode@119.132.61.87) has quit (Remote host closed the connection)
2013-09-08 08:51:15	-->	znode (~znode@173-252-253-154.genericreverse.com) has joined #haskell
2013-09-08 08:52:55	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 245 seconds)
2013-09-08 08:55:11	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-08 08:55:35	<--	wak (~wak@63.252.64.209) has quit (Remote host closed the connection)
2013-09-08 08:55:39	-->	Shaladdle_ (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-08 08:55:42	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 08:55:54	<--	Shaladdle_ (~Shaladdle@50.94.94.219) has left #haskell
2013-09-08 08:56:23	<--	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has quit (Quit: WeeChat 0.4.1)
2013-09-08 08:56:46	-->	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has joined #haskell
2013-09-08 08:57:20	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-08 08:57:34	-->	_d3f (~gnu@46.183.216.234) has joined #haskell
2013-09-08 08:57:57	<--	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has quit (Client Quit)
2013-09-08 08:58:12	SrPx	Hmm so I'm looking through Data.Vector and it seems like it beats lists on pretty much all functions (in O complexity), so why are functions the standard structure?
2013-09-08 08:58:17	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-08 08:58:52	-->	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has joined #haskell
2013-09-08 08:59:20	jfischoff	are you asking why use []?
2013-09-08 08:59:27	Taneb	SrPx, lists are easier to define (MUCH easier), have quicker cons, and allow for infinite lists
2013-09-08 08:59:44	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 08:59:45	<--	tim (~quassel@91-119-129-43.dynamic.xdsl-line.inode.at) has quit (Read error: Connection reset by peer)
2013-09-08 09:00:07	nisstyre	SrPx: a linked list is useful in many ways, in other situations a vector is more appropriate
2013-09-08 09:00:22	nisstyre	IIRC there is an OverloadedLists extension coming that would allow you to use [] for vectors
2013-09-08 09:00:44	Taneb	nisstyre, I think that's coming in 7.8, not out  yet
2013-09-08 09:00:44	nisstyre	might already be in the latest ghc
2013-09-08 09:00:49	nisstyre	oh ok
2013-09-08 09:01:45	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 09:01:52	-->	znode_ (~znode@119.132.61.87) has joined #haskell
2013-09-08 09:03:12	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-08 09:04:05	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 09:04:26	<--	znode (~znode@173-252-253-154.genericreverse.com) has quit (Ping timeout: 240 seconds)
2013-09-08 09:04:39	-->	petapetapeta (~quassel@130.225.165.43) has joined #haskell
2013-09-08 09:05:16	<--	wak (~wak@63.252.64.209) has quit (Read error: Connection reset by peer)
2013-09-08 09:05:16	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-09-08 09:05:27	-->	wak (~wak@63.252.64.209) has joined #haskell
2013-09-08 09:05:54	SrPx	nisstyre: Taneb ah it makes sense
2013-09-08 09:06:06	Taneb	:)
2013-09-08 09:06:37	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-08 09:06:59	<--	rodrigov_ (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-09-08 09:08:07	-->	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has joined #haskell
2013-09-08 09:08:49	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 09:12:13	-->	maxiepoo_ (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 09:13:07	-->	ulfdoz (~mary@p5B38A3CC.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 09:13:40	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 09:13:41	--	maxiepoo_ is now known as maxiepoo
2013-09-08 09:14:00	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-08 09:14:23	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-08 09:15:27	<--	Beetny (~Beetny@ppp118-208-26-249.lns20.bne1.internode.on.net) has quit (Ping timeout: 268 seconds)
2013-09-08 09:17:59	<--	talzeus (~studybot_@u847193.xgsnun4.imtp.tachikawa.mopera.net) has quit (Remote host closed the connection)
2013-09-08 09:19:12	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 09:19:27	<--	tac (~tac-tics@2602:306:bdb4:5100:d528:1566:ead4:eaa5) has quit (Ping timeout: 264 seconds)
2013-09-08 09:21:22	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-08 09:23:34	<--	hari_ (~hari@117.193.43.136) has left #haskell ("Ex-Chat")
2013-09-08 09:23:53	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-08 09:24:43	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-08 09:26:15	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-08 09:26:15	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-09-08 09:26:15	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-08 09:26:32	-->	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has joined #haskell
2013-09-08 09:26:34	-->	araujo (~araujo@190.73.45.171) has joined #haskell
2013-09-08 09:26:45	<--	araujo (~araujo@190.73.45.171) has quit (Changing host)
2013-09-08 09:26:45	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-08 09:26:48	<--	u_ (~phillip@adsl-75-57-171-214.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 09:27:10	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 268 seconds)
2013-09-08 09:27:24	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 09:27:50	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-08 09:28:45	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-08 09:29:50	johnw	SrPx: lists go together well with laziness, and sharing due to immutability
2013-09-08 09:31:21	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Ping timeout: 256 seconds)
2013-09-08 09:31:44	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 260 seconds)
2013-09-08 09:32:01	joelteon	damn, Tekmo is gone
2013-09-08 09:32:06	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 268 seconds)
2013-09-08 09:32:09	joelteon	has anybody used pipes 4 yet?
2013-09-08 09:32:15	pharaun	not me, not yet
2013-09-08 09:32:18	pharaun	whats up?
2013-09-08 09:32:36	joelteon	i'm trying to figure out whether tryIO and liftP have both been replaced by lift
2013-09-08 09:32:40	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-08 09:33:32	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 09:33:57	<--	ddinh (~David@70.231.145.202) has quit (Ping timeout: 268 seconds)
2013-09-08 09:34:38	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-08 09:34:45	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-08 09:35:15	pharaun	i don't see liftp or tryio
2013-09-08 09:35:47	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-08 09:35:54	-->	Puffton (~Puffton@s213-103-201-120.cust.tele2.se) has joined #haskell
2013-09-08 09:36:05	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-08 09:36:41	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-09-08 09:37:09	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-08 09:37:27	jfischoff	pipes 4 looks likes a serious improvement
2013-09-08 09:37:34	joelteon	they're in the older pipes and pipes-safe respectively
2013-09-08 09:37:41	joelteon	tryIO was the function you wrapped around every single IO call
2013-09-08 09:38:59	joelteon	also, the whole runEitherK thing seems to have been scrapped, which is a pity
2013-09-08 09:39:26	johnw	what did runEitherK do?
2013-09-08 09:40:47	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-08 09:40:50	<--	simukis_ (~simukis_@78.63.244.234) has quit (Read error: Connection reset by peer)
2013-09-08 09:41:15	joelteon	ran an ExceptionP proxy and returned Right result or Left exception
2013-09-08 09:41:25	joelteon	also there's no StateP monad transformer anymore
2013-09-08 09:41:29	-->	elediaz (~quassel@90.173.195.59) has joined #haskell
2013-09-08 09:41:51	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-09-08 09:42:06	-->	talzeus_ (~studybot_@113.37.230.101) has joined #haskell
2013-09-08 09:42:23	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-08 09:43:15	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-09-08 09:43:28	-->	mikelmikelmikel (~michael@d110-33-176-174.sun801.vic.optusnet.com.au) has joined #haskell
2013-09-08 09:45:48	<--	rnons (~rnons@183.152.58.163) has quit (Quit: WeeChat 0.4.1)
2013-09-08 09:46:01	joelteon	but on the plus side, there's no StateP monad transformer anymore!
2013-09-08 09:46:10	-->	scripty_ (~scripty@95.141.29.54) has joined #haskell
2013-09-08 09:46:17	<--	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has quit (Ping timeout: 268 seconds)
2013-09-08 09:47:26	SrPx	many functions on the docs are missing their O() complexity :(
2013-09-08 09:47:54	joelteon	heh
2013-09-08 09:48:01	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-08 09:48:21	joelteon	lifts everywhere
2013-09-08 09:48:29	pharaun	SrPx: O(scary) :)
2013-09-08 09:49:00	<--	scripty (~scripty@117.192.161.224) has quit (Ping timeout: 260 seconds)
2013-09-08 09:49:12	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-08 09:49:29	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 256 seconds)
2013-09-08 09:50:38	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-08 09:52:27	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 264 seconds)
2013-09-08 09:52:50	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-08 09:53:10	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-08 09:55:57	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-08 10:00:31	<--	tero- (~tero@core.feriko.fi) has quit (Ping timeout: 264 seconds)
2013-09-08 10:00:38	<--	mikelmikelmikel (~michael@d110-33-176-174.sun801.vic.optusnet.com.au) has quit (Quit: WeeChat 0.4.1)
2013-09-08 10:01:13	-->	tero- (~tero@core.feriko.fi) has joined #haskell
2013-09-08 10:01:32	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 10:01:32	pharaun	joelteon: the tutorial are all saying lift
2013-09-08 10:01:51	pharaun	even for io func
2013-09-08 10:01:53	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Quit: leaving)
2013-09-08 10:02:17	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 10:04:09	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 10:04:09	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-08 10:05:17	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-08 10:05:55	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-08 10:06:54	-->	tim (~quassel@91-119-129-43.dynamic.xdsl-line.inode.at) has joined #haskell
2013-09-08 10:07:12	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-08 10:09:14	-->	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has joined #haskell
2013-09-08 10:10:21	<--	augur (~augur@129-2-129-33.wireless.umd.edu) has quit (Remote host closed the connection)
2013-09-08 10:12:31	<--	hiratara (~hiratara@i219047.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 264 seconds)
2013-09-08 10:13:20	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-08 10:13:48	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 10:17:00	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-08 10:17:34	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-08 10:17:40	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 10:18:11	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 10:18:12	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-09-08 10:18:21	<--	LAMMJohnson (~ja@90.244.60.15) has quit (Ping timeout: 268 seconds)
2013-09-08 10:18:24	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-08 10:18:42	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 10:18:43	-->	hiratara (~hiratara@g037021.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-09-08 10:19:05	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-08 10:19:22	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 10:19:38	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 10:19:50	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-08 10:20:03	absence	when running cabal sandbox init i end up with a corrupt 00-index.tar so fail and suggest i run cabal update. when i do, the download is skipped because remote and local files match. the non-sandboxed 00-index.tar is fine and not corrupted. anyone know what could be wrong?
2013-09-08 10:20:29	absence	"so installs fail"
2013-09-08 10:20:31	absence	sorry
2013-09-08 10:21:46	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 10:21:56	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-08 10:22:23	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-08 10:22:29	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 10:23:28	-->	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has joined #haskell
2013-09-08 10:23:28	<--	paullik (~paullik@unaffiliated/paullik) has quit (Read error: Connection reset by peer)
2013-09-08 10:23:45	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-08 10:23:59	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-08 10:24:13	-->	zbcm (~zbcm@147.69.182.184) has joined #haskell
2013-09-08 10:24:31	<--	k0001 (~k0001@host130.190-137-207.telecom.net.ar) has quit (Ping timeout: 268 seconds)
2013-09-08 10:25:18	-->	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-08 10:25:40	-->	tac (~tac-tics@2602:306:bdb4:5100:c5a:ffa0:f454:a2a0) has joined #haskell
2013-09-08 10:25:47	-->	bitonic (~user@ppp-188-144.27-151.libero.it) has joined #haskell
2013-09-08 10:26:03	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-08 10:28:13	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-09-08 10:29:01	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-08 10:29:17	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-08 10:29:48	-->	Kaini (~kaini@078132019103.public.t-mobile.at) has joined #haskell
2013-09-08 10:29:48	<--	Kaini (~kaini@078132019103.public.t-mobile.at) has quit (Changing host)
2013-09-08 10:29:48	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-08 10:29:51	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-08 10:30:29	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 241 seconds)
2013-09-08 10:30:34	<--	sm (~user@li229-222.members.linode.com) has quit (Read error: Operation timed out)
2013-09-08 10:31:54	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 10:31:57	<--	scripty_ (~scripty@95.141.29.54) has quit (Quit: Leaving)
2013-09-08 10:31:58	<--	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 10:32:12	joelteon	well, that's neat
2013-09-08 10:32:15	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (Ping timeout: 240 seconds)
2013-09-08 10:32:16	joelteon	lot of lifting, but ok
2013-09-08 10:32:23	joelteon	what I don't really get now is how bracket works
2013-09-08 10:32:29	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 246 seconds)
2013-09-08 10:32:37	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-08 10:32:40	<--	Tarential (~Tarential@li421-205.members.linode.com) has quit (Ping timeout: 276 seconds)
2013-09-08 10:32:50	<--	hfaafb (~hfaafb@misadventuregames.com) has quit (Ping timeout: 246 seconds)
2013-09-08 10:33:02	<--	arkeet (arkeet@unaffiliated/arkeet) has quit (Ping timeout: 240 seconds)
2013-09-08 10:33:03	<--	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has quit (Ping timeout: 240 seconds)
2013-09-08 10:33:10	<--	shachaf (~shachaf@unaffiliated/shachaf) has quit (Ping timeout: 256 seconds)
2013-09-08 10:33:11	<--	Eridius|korea (~kevin@unaffiliated/eridius) has quit (Ping timeout: 246 seconds)
2013-09-08 10:33:15	<--	rfw (~rfw@heimdall.rfw.name) has quit (Ping timeout: 264 seconds)
2013-09-08 10:33:20	<--	mee (~mee@li94-42.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-09-08 10:33:41	<--	munro (~ryan@node-2.0x0539.org) has quit (Ping timeout: 256 seconds)
2013-09-08 10:33:46	<--	dilinger_ (~dilinger@lunge.queued.net) has quit (Ping timeout: 268 seconds)
2013-09-08 10:33:47	<--	rasmusto (~trasmuss@li519-146.members.linode.com) has quit (Remote host closed the connection)
2013-09-08 10:33:48	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 260 seconds)
2013-09-08 10:34:07	<--	hashcat (~chatzilla@27.243.142.215) has quit (Ping timeout: 264 seconds)
2013-09-08 10:34:15	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Read error: Operation timed out)
2013-09-08 10:34:22	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 10:34:38	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-09-08 10:34:39	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-09-08 10:34:40	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-09-08 10:34:40	-->	Eridius|korea (~kevin@unaffiliated/eridius) has joined #haskell
2013-09-08 10:34:44	<--	ReinH (~reinh@li14-106.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-09-08 10:34:44	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 10:34:55	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-09-08 10:35:01	-->	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-09-08 10:35:08	-->	rasmusto (~trasmuss@li519-146.members.linode.com) has joined #haskell
2013-09-08 10:35:09	-->	arkeet (arkeet@unaffiliated/arkeet) has joined #haskell
2013-09-08 10:35:11	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-09-08 10:35:14	-->	ReinH (~reinh@li14-106.members.linode.com) has joined #haskell
2013-09-08 10:35:24	<--	eataix (~eataix@unaffiliated/eataix) has quit (Ping timeout: 240 seconds)
2013-09-08 10:35:39	Ghoul_	Hey, that's a cool idea
2013-09-08 10:35:42	Ghoul_	a complexity analyzer that works on complexity annotations
2013-09-08 10:36:00	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 10:36:09	-->	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has joined #haskell
2013-09-08 10:36:20	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-08 10:36:30	-->	eataix (~eataix@unaffiliated/eataix) has joined #haskell
2013-09-08 10:36:38	-->	Tarential (~Tarential@li421-205.members.linode.com) has joined #haskell
2013-09-08 10:36:51	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-08 10:36:52	-->	mee (~mee@li94-42.members.linode.com) has joined #haskell
2013-09-08 10:37:16	--	mee is now known as Guest74748
2013-09-08 10:37:22	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-09-08 10:37:39	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-09-08 10:38:10	-->	hrehf (~s@krlh-4d02bed0.pool.mediaWays.net) has joined #haskell
2013-09-08 10:38:19	<--	hrehf (~s@krlh-4d02bed0.pool.mediaWays.net) has quit (Client Quit)
2013-09-08 10:38:32	-->	augur_ (~augur@208.58.5.87) has joined #haskell
2013-09-08 10:38:44	-->	shachaf (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-09-08 10:38:49	-->	hfaafb (~hfaafb@misadventuregames.com) has joined #haskell
2013-09-08 10:38:56	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 259 seconds)
2013-09-08 10:39:29	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-08 10:40:55	-->	SoupE (~jloos@f055201003.adsl.alicedsl.de) has joined #haskell
2013-09-08 10:41:38	<--	augur_ (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-08 10:41:42	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 10:41:56	-->	tuxie_ (~paranoid@g229050001.adsl.alicedsl.de) has joined #haskell
2013-09-08 10:43:05	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-08 10:43:07	<--	wavewave (~wavewave@AAnnecy-651-1-244-223.w86-209.abo.wanadoo.fr) has quit (Ping timeout: 264 seconds)
2013-09-08 10:43:22	<--	MOMI (uid4868@gateway/web/irccloud.com/x-zsxuksipredphzxm) has quit (Quit: Connection closed for inactivity)
2013-09-08 10:43:22	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-08 10:43:37	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Client Quit)
2013-09-08 10:43:38	-->	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has joined #haskell
2013-09-08 10:44:00	<--	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 10:44:08	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-08 10:44:16	<--	SoupEvil (~jloos@g225196088.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-08 10:45:32	joelteon	ok so far with pipes 4, I feel like I'm using lift a LOT
2013-09-08 10:47:17	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-08 10:48:04	<--	fl00r (~fl00r@pool-98-112-185-33.lsanca.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-08 10:48:38	-->	determinant_ (~determina@183.83.58.77) has joined #haskell
2013-09-08 10:49:28	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-08 10:49:33	<--	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 10:49:44	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 10:49:53	-->	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has joined #haskell
2013-09-08 10:51:28	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 10:51:47	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-08 10:52:05	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 246 seconds)
2013-09-08 10:52:10	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-08 10:52:10	<--	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has quit (Client Quit)
2013-09-08 10:52:10	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-08 10:52:16	<--	Paprikachu (~Paprikach@178.113.40.195.wireless.dyn.drei.com) has quit (Ping timeout: 268 seconds)
2013-09-08 10:53:02	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-08 10:53:13	--	fran is now known as fcr
2013-09-08 10:53:16	--	fcr is now known as fran
2013-09-08 10:54:40	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 10:55:03	<--	znode_ (~znode@119.132.61.87) has quit (Remote host closed the connection)
2013-09-08 10:55:23	-->	agumonkey (~agu@170.158.70.86.rev.sfr.net) has joined #haskell
2013-09-08 10:55:34	-->	wavewave (~wavewave@141-213-168-218.vpn.umnet.umich.edu) has joined #haskell
2013-09-08 10:55:37	-->	znode (~znode@119.132.61.87) has joined #haskell
2013-09-08 10:56:15	-->	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has joined #haskell
2013-09-08 10:57:11	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 240 seconds)
2013-09-08 10:57:15	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 10:57:24	AfC	joelteon: there's a pattern around that (can't tell you what it is off-hand, but I recall it came up on the mailing list).
2013-09-08 10:57:57	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-08 10:58:04	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 260 seconds)
2013-09-08 10:58:14	mroman	The mysql-simple example is broken
2013-09-08 10:58:26	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-08 10:58:27	mroman	at least for me.
2013-09-08 10:58:38	mroman	LongLong is incompatible with Int
2013-09-08 10:58:46	mroman	(but Integer isn't)
2013-09-08 10:58:58	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell
2013-09-08 10:59:40	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-08 10:59:57	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-08 11:00:19	mroman	on the other hand
2013-09-08 11:00:28	mroman	mysql-simple can't just return String data?
2013-09-08 11:00:32	joelteon	shouldn't "Base (Proxy Void () () Packet (SafeT (StateT s IO)))" reduce to "Base IO"?
2013-09-08 11:00:43	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-08 11:00:55	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 11:01:58	--	gpampara_off is now known as gpampara
2013-09-08 11:02:52	 *	hackagebot yesod-auth 1.2.2 - Authentication for Yesod.  http://hackage.haskell.org/package/yesod-auth-1.2.2 (MichaelSnoyman)
2013-09-08 11:02:54	mroman	ah. hqsl it is, then.
2013-09-08 11:02:54	 *	hackagebot yesod-bin 1.2.3 - The yesod helper executable.  http://hackage.haskell.org/package/yesod-bin-1.2.3 (MichaelSnoyman)
2013-09-08 11:02:56	 *	hackagebot yesod-core 1.2.4.1 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-core-1.2.4.1 (MichaelSnoyman)
2013-09-08 11:02:58	 *	hackagebot yesod-form 1.3.2 - Form handling support for Yesod Web Framework  http://hackage.haskell.org/package/yesod-form-1.3.2 (MichaelSnoyman)
2013-09-08 11:03:50	<--	znode (~znode@119.132.61.87) has quit (Remote host closed the connection)
2013-09-08 11:04:22	<--	rnons (~rnons@183.152.58.163) has quit (Read error: No route to host)
2013-09-08 11:05:43	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 11:06:59	joelteon	i feel like it should
2013-09-08 11:07:53	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 11:09:07	kuribas	Is the information on parallel haskell from "Real World Haskell" still relevant?
2013-09-08 11:09:32	kuribas	I have found this newer book: http://chimera.labs.oreilly.com/books/1230000000929/index.html
2013-09-08 11:09:54	AfC	kuribas: Simon Marlow has just about finished a textbook on parallel and concurrent haskell; having seen some of that material when it was in draft I'd say it's excellent.
2013-09-08 11:10:07	tac	kuribas: In general, RWH is somewhat out of date
2013-09-08 11:10:10	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-08 11:10:10	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (Ping timeout: 240 seconds)
2013-09-08 11:10:14	satc	I have a array of 256 Word8 elements. The only operation I want to support is to look element at index i (which is also a Word8). Right now I have defined it as a function (using pattern matching). Will representing it as ByteString or Vector will provide faster lookup.
2013-09-08 11:10:15	AfC	Ah, there you go
2013-09-08 11:10:18	kuribas	AfC: That's the second book I linked.
2013-09-08 11:10:22	tac	kuribas: You're better off looking at the new Concurrency and Parallelism book
2013-09-08 11:10:30	kuribas	ok
2013-09-08 11:10:31	AfC	Well yes, buy that, then
2013-09-08 11:10:40	<--	yano (yano@freenode/staff/yano) has quit (Ping timeout: 624 seconds)
2013-09-08 11:10:56	-->	dialelo (~dialelo@158.85-85-64.dynamic.clientes.euskaltel.es) has joined #haskell
2013-09-08 11:10:58	kuribas	I've bought to many books lately, I was still deciding if I should buy it :)
2013-09-08 11:11:42	<--	dialelo (~dialelo@158.85-85-64.dynamic.clientes.euskaltel.es) has quit (Client Quit)
2013-09-08 11:11:54	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-08 11:12:18	<--	xinming (~xinming@125.82.207.24) has quit (Read error: Connection reset by peer)
2013-09-08 11:12:23	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 260 seconds)
2013-09-08 11:12:28	<--	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-08 11:12:40	-->	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-08 11:14:05	joelteon	how do you lift an IO action into Base?
2013-09-08 11:14:13	joelteon	in pipes 4, that is
2013-09-08 11:14:23	johnw	kuribas: it's very well worth it
2013-09-08 11:14:23	joelteon	pipes-safe 2, actually
2013-09-08 11:14:41	johnw	and not just for reading about concurrency, but about exception safety also
2013-09-08 11:15:19	<--	WhoD (kvirc@host86-170-6-233.range86-170.btcentralplus.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 11:15:32	-->	xinming (~xinming@113.248.66.41) has joined #haskell
2013-09-08 11:15:36	-->	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has joined #haskell
2013-09-08 11:17:48	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-08 11:17:51	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-09-08 11:18:30	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-08 11:18:55	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-08 11:19:55	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-08 11:21:31	<--	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has quit (Ping timeout: 264 seconds)
2013-09-08 11:24:11	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 11:25:27	<--	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (Quit: leaving)
2013-09-08 11:25:32	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-08 11:25:48	-->	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has joined #haskell
2013-09-08 11:29:02	-->	artyomkazak (~artyomkaz@94.25.229.91) has joined #haskell
2013-09-08 11:29:52	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-08 11:33:35	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-08 11:33:38	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-08 11:33:48	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-09-08 11:34:12	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Client Quit)
2013-09-08 11:34:32	-->	fxr (~user@78.187.102.63) has joined #haskell
2013-09-08 11:34:44	-->	matheus23 (~quassel@p4FDF3293.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 11:35:50	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-08 11:36:06	<--	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 11:36:51	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Ping timeout: 264 seconds)
2013-09-08 11:39:55	-->	elediaz_ (~quassel@92.59.147.86) has joined #haskell
2013-09-08 11:40:27	<--	elediaz (~quassel@90.173.195.59) has quit (Ping timeout: 264 seconds)
2013-09-08 11:40:32	<--	artyomkazak (~artyomkaz@94.25.229.91) has quit (Ping timeout: 260 seconds)
2013-09-08 11:41:03	<--	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has quit (Ping timeout: 264 seconds)
2013-09-08 11:41:50	kuribas	ok
2013-09-08 11:42:17	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-08 11:42:35	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Quit: Pozdrav)
2013-09-08 11:42:55	-->	carlo_au (~carlo@ppp118-208-78-52.lns20.bne4.internode.on.net) has joined #haskell
2013-09-08 11:44:50	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 11:45:10	-->	noam_ (~noam@213.57.201.130) has joined #haskell
2013-09-08 11:45:13	SrPx	> data Vec a = (Num a) => Vec a a a
2013-09-08 11:45:15	lambdabot	  <hint>:1:1: parse error on input `data'
2013-09-08 11:46:20	--	swistak36 is now known as swistak35
2013-09-08 11:46:32	<--	Peaker (~eyal@87.69.111.138) has quit (Ping timeout: 268 seconds)
2013-09-08 11:47:32	-->	madjestic (~madjestic@31.187.172.247) has joined #haskell
2013-09-08 11:47:35	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-08 11:47:52	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (Ping timeout: 264 seconds)
2013-09-08 11:48:10	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-09-08 11:48:17	-->	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has joined #haskell
2013-09-08 11:48:20	<--	noam (~noam@213.57.201.130) has quit (Ping timeout: 245 seconds)
2013-09-08 11:48:59	Taneb	SrPx, constraints in a data type are deprecated and widely considered a misfeature
2013-09-08 11:49:12	SrPx	Taneb: )=
2013-09-08 11:49:19	<--	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-08 11:49:23	SrPx	okay
2013-09-08 11:49:28	-->	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-08 11:49:37	SrPx	Taneb: are you aware of a Vector 3D implementation? I can't find it
2013-09-08 11:49:43	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 260 seconds)
2013-09-08 11:49:46	Taneb	Try the "linear" package
2013-09-08 11:49:48	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-08 11:49:58	SrPx	okay, thanks!
2013-09-08 11:50:31	-->	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-09-08 11:50:53	SrPx	perfect. I'd like to understand why it uses !a, though
2013-09-08 11:51:15	-->	artyomkazak (~artyomkaz@host-120-152-66-217.spbmts.ru) has joined #haskell
2013-09-08 11:51:51	nh2	what's the best way to convert a Storable.Vector Word8 to ByteString? Can I just unsafeCoerce or is there a nicer function?
2013-09-08 11:52:48	Taneb	SrPx, that just means it's stricter
2013-09-08 11:52:53	 *	hackagebot boomerang 1.3.4.1 - Library for invertible parsing and printing  http://hackage.haskell.org/package/boomerang-1.3.4.1 (DagOdenhall)
2013-09-08 11:53:01	Taneb	It provides a stronger guarantee that you have all of a vector
2013-09-08 11:53:17	-->	shintah (bebble@h-243-43.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 11:54:43	-->	functorfun (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has joined #haskell
2013-09-08 11:54:44	--	functorfun is now known as funfunctor
2013-09-08 11:55:55	<--	carlo_au (~carlo@ppp118-208-78-52.lns20.bne4.internode.on.net) has quit (Quit: Ex-Chat)
2013-09-08 11:56:34	SrPx	Taneb: I know, I just don't know what it is for
2013-09-08 11:57:22	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 11:58:42	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-08 12:00:03	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 12:01:04	-->	teuffy (b252868c@gateway/web/freenode/ip.178.82.134.140) has joined #haskell
2013-09-08 12:01:39	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-08 12:01:42	-->	guardianx (fruit@124.148.25.110) has joined #haskell
2013-09-08 12:02:06	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 12:02:53	-->	hrehf (~s@krlh-4d02bed0.pool.mediaWays.net) has joined #haskell
2013-09-08 12:03:58	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Read error: Connection reset by peer)
2013-09-08 12:05:10	-->	xexonixxexillion (~Adium@130.56.82.66) has joined #haskell
2013-09-08 12:05:27	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Read error: Connection reset by peer)
2013-09-08 12:05:47	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-08 12:06:08	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 256 seconds)
2013-09-08 12:06:51	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 264 seconds)
2013-09-08 12:07:21	<--	teuffy (b252868c@gateway/web/freenode/ip.178.82.134.140) has quit (Ping timeout: 250 seconds)
2013-09-08 12:07:56	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 12:08:09	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-08 12:08:10	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Read error: Connection reset by peer)
2013-09-08 12:08:47	<--	cdidd (~cdidd@95-26-119-8.broadband.corbina.ru) has quit (Read error: Connection reset by peer)
2013-09-08 12:08:59	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-09-08 12:09:07	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 12:09:20	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 12:10:38	mstksg	is persistent's "update" unsafe?  what happens when my data store rejects an update to a unique field?
2013-09-08 12:10:46	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-08 12:10:54	<--	determinant_ (~determina@183.83.58.77) has quit (Ping timeout: 260 seconds)
2013-09-08 12:10:54	<--	madjestic (~madjestic@31.187.172.247) has quit (Ping timeout: 240 seconds)
2013-09-08 12:10:55	-->	cdidd (~cdidd@128-68-139-216.broadband.corbina.ru) has joined #haskell
2013-09-08 12:11:39	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 12:12:13	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-08 12:12:30	-->	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has joined #haskell
2013-09-08 12:12:34	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 12:12:59	-->	determinant_ (~determina@183.83.58.77) has joined #haskell
2013-09-08 12:13:58	-->	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has joined #haskell
2013-09-08 12:14:27	<--	petapetapeta (~quassel@130.225.165.43) has quit (Ping timeout: 260 seconds)
2013-09-08 12:14:44	-->	carlo_au (~carlo@ppp118-208-78-52.lns20.bne4.internode.on.net) has joined #haskell
2013-09-08 12:15:12	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-08 12:16:03	-->	teuffy (b252868c@gateway/web/freenode/ip.178.82.134.140) has joined #haskell
2013-09-08 12:16:59	-->	petapetapeta (~quassel@130.225.165.43) has joined #haskell
2013-09-08 12:17:22	-->	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has joined #haskell
2013-09-08 12:18:03	-->	whore (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-08 12:18:30	<--	teuffy (b252868c@gateway/web/freenode/ip.178.82.134.140) has quit (Client Quit)
2013-09-08 12:18:36	<--	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 12:18:48	donri	mstksg: i doubt it's "unsafe" in the sense usually reserved for that word in haskell code, but it might throw an exception, i guess
2013-09-08 12:18:48	-->	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has joined #haskell
2013-09-08 12:20:18	-->	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 12:20:29	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-09-08 12:21:08	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 260 seconds)
2013-09-08 12:21:27	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 260 seconds)
2013-09-08 12:21:39	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 12:23:23	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-08 12:24:14	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-08 12:24:53	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-08 12:25:02	<--	stelleg (~stelleg@68.35.148.72) has quit (Ping timeout: 240 seconds)
2013-09-08 12:25:04	<--	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-09-08 12:25:07	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-09-08 12:25:33	<--	tefter (~tefter@87.250.40.232) has quit (Ping timeout: 240 seconds)
2013-09-08 12:25:56	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-08 12:27:32	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-08 12:28:19	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 12:28:50	<--	guardianx (fruit@124.148.25.110) has quit (Remote host closed the connection)
2013-09-08 12:29:03	-->	guardianx (fruit@124.148.25.110) has joined #haskell
2013-09-08 12:29:07	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-08 12:29:44	-->	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has joined #haskell
2013-09-08 12:29:47	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-08 12:30:12	-->	ismlages (~ismlages@212.174.109.55) has joined #haskell
2013-09-08 12:30:31	-->	stelleg (~stelleg@c-68-35-148-72.hsd1.nm.comcast.net) has joined #haskell
2013-09-08 12:30:51	<--	zxq9 (~ceverett@FL1-119-244-165-183.okn.mesh.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-08 12:31:11	<--	SrPx (b185ff44@gateway/web/freenode/ip.177.133.255.68) has quit (Ping timeout: 250 seconds)
2013-09-08 12:31:32	-->	Rc43 (4fad5042@gateway/web/freenode/ip.79.173.80.66) has joined #haskell
2013-09-08 12:31:39	Rc43	Hi, folks.
2013-09-08 12:32:07	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 256 seconds)
2013-09-08 12:32:11	<--	wavewave (~wavewave@141-213-168-218.vpn.umnet.umich.edu) has quit (Ping timeout: 260 seconds)
2013-09-08 12:32:37	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-09-08 12:32:39	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-08 12:33:03	-->	LAMMJohnson (~ja@user-5af43c0f.broadband.tesco.net) has joined #haskell
2013-09-08 12:33:23	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-08 12:33:24	Rc43	Is it ok to use such code for forcing evaluation (for avoiding compiler from optimize code to just return "Done.")?
2013-09-08 12:33:26	Rc43	`main = putStrLn $ foldl (\_ _ -> "Done.") undefined $ map func_I_want_to_test [1..100]'
2013-09-08 12:33:34	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-08 12:33:48	Rc43	I don't want print it, because printing takes time and benchmark will be incorrect.
2013-09-08 12:34:05	<--	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-08 12:34:06	arkeet	Rc43: that won't evaluate anything in the list.
2013-09-08 12:34:58	arkeet	if you want to benchmark things, try using criterion
2013-09-08 12:35:20	arkeet	for forcing evaluation, you should probably know about seq.
2013-09-08 12:35:26	arkeet	:t seq
2013-09-08 12:35:26	lambdabot	a -> b -> b
2013-09-08 12:36:04	donri	or rather deepseq if it's a list, meaning nf rather than whnf with criterion
2013-09-08 12:36:20	-->	Pip (~Pip__@unaffiliated/pip) has joined #haskell
2013-09-08 12:36:34	Rc43	arkeet, hm, I tried such way to force yesterday and it seems there were pauses when I increased length of list ...
2013-09-08 12:36:36	arkeet	:t foldr seq ()
2013-09-08 12:36:37	lambdabot	[a] -> ()
2013-09-08 12:36:56	Rc43	arkeet, may be because I placed list with test data in the other object, so ghc couldn't optimize it ...
2013-09-08 12:37:24	-->	Peaker (~eyal@46.19.81.98) has joined #haskell
2013-09-08 12:37:34	kuribas	Do you normally increase a package version number after release or before?
2013-09-08 12:39:46	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-08 12:40:33	Rc43	arkeet, foldr seq didn't help, may be I use it incorrectly
2013-09-08 12:40:42	arkeet	> foldr seq () [undefined]
2013-09-08 12:40:44	lambdabot	  *Exception: Prelude.undefined
2013-09-08 12:40:55	arkeet	Rc43: well, seq only evaluates to whnf
2013-09-08 12:41:39	kuribas	Rc43: Try force from DeepSeq
2013-09-08 12:41:46	kuribas	:t force
2013-09-08 12:41:46	lambdabot	Not in scope: `force'
2013-09-08 12:42:16	absence	has anyone tried the new pipes-binary yet? decode and decodeGet return StateT and i'm a bit confused about how to hook them up with other pipes
2013-09-08 12:42:22	donri	no, just use criterion via 'nf' :p
2013-09-08 12:42:24	arkeet	well, mostly you should understand what you're doing.
2013-09-08 12:42:32	Rc43	arkeet, How to write `main' function with this evaluation via `foldr seq'? I tried "let _ = foldr seq () $ map func_to_test [1..100] ; putStrLn "\Done.\"", it seems to be optimized to just "putStrLn \"Done.\""
2013-09-08 12:42:43	arkeet	:/
2013-09-08 12:42:58	arkeet	that won't evaluate anything.
2013-09-08 12:43:17	arkeet	> let 1 = 2 in ()
2013-09-08 12:43:18	lambdabot	  ()
2013-09-08 12:43:43	arkeet	but if you're benchmarking, you really ought to be using criterion.
2013-09-08 12:43:55	donri	it's not even an optimization, it's just the evaluation strategy
2013-09-08 12:44:07	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-08 12:44:25	--	gpampara is now known as gpampara_off
2013-09-08 12:45:02	arkeet	Rc43: let _ = ... does nothing at all.
2013-09-08 12:45:31	Rc43	arkeet, ok, how to write main with forcing?
2013-09-08 12:45:53	Rc43	Place (putStrLn "Done.") inside of foldr?
2013-09-08 12:46:17	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-08 12:46:22	arkeet	no.
2013-09-08 12:47:04	arkeet	if you want to force something in IO, you can use evaluate.
2013-09-08 12:47:05	arkeet	:t evaluate
2013-09-08 12:47:11	lambdabot	a -> IO a
2013-09-08 12:47:12	arkeet	but if you're benchmarking, you really should be using criterion.
2013-09-08 12:47:22	donri	Rc43: import Criterion.Main; main = defaultMain [ bench "func" $ nf func [1..100] ]
2013-09-08 12:47:43	Rc43	arkeet, seems to be OK, thank you.
2013-09-08 12:47:48	Kaini	@pl \(v, _) -> not (v subject)
2013-09-08 12:47:50	Rc43	I will look at Criterion, too.
2013-09-08 12:47:52	lambdabot	ap ((const . not . ($ subject)) . fst) snd
2013-09-08 12:47:54	lambdabot	optimization suspended, use @pl-resume to continue.
2013-09-08 12:47:54	<--	Peaker (~eyal@46.19.81.98) has quit (Ping timeout: 264 seconds)
2013-09-08 12:48:18	donri	Rc43: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html
2013-09-08 12:48:30	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-08 12:48:35	Rc43	kuribas, somehow deepseq works in ghci, but no if I compile code, tells that no NFData instance.
2013-09-08 12:48:36	<--	tac (~tac-tics@2602:306:bdb4:5100:c5a:ffa0:f454:a2a0) has quit (Quit: Leaving)
2013-09-08 12:49:10	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 12:49:39	-->	chuzz (~user@host168-102-dynamic.14-87-r.retail.telecomitalia.it) has joined #haskell
2013-09-08 12:49:40	<--	chuzz (~user@host168-102-dynamic.14-87-r.retail.telecomitalia.it) has quit (Changing host)
2013-09-08 12:49:40	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-08 12:49:44	arkeet	you're probably doing something different then.
2013-09-08 12:49:51	arkeet	between ghci and your compiled code.
2013-09-08 12:49:52	donri	Rc43: are you trying deepseq on the same data in both cases?
2013-09-08 12:50:23	donri	it's possible you have an orphan instance imported in ghci but it's more likely you're trying it on different data
2013-09-08 12:50:50	Rc43	donri, I will check again now
2013-09-08 12:51:13	Rc43	arkeet, `evaluate' didn't force
2013-09-08 12:51:41	donri	Rc43: if you deepseq a container, every type contained in it (recursively) has to have an NFData instance
2013-09-08 12:52:11	arkeet	Rc43: evaluate only evaluates to whnf, i.e. the top level constructor in whatever data you're doing.
2013-09-08 12:52:13	donri	Rc43: 'evaluate' forces the WHNF; deepseq forces the NF
2013-09-08 12:52:14	arkeet	likewise for seq.
2013-09-08 12:52:23	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 12:52:30	arkeet	so if you seq a list, it'll only evaluate far enough to tell whether the list is empty or not.
2013-09-08 12:52:33	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 240 seconds)
2013-09-08 12:52:39	Rc43	arkeet, aah, ye, already understood that
2013-09-08 12:52:40	arkeet	(i.e. whether it's using the [] or (:) constructor)
2013-09-08 12:52:51	<--	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-08 12:53:08	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-08 12:53:19	donri	Rc43: see the link i gave you; it explains whnf and nf nicely
2013-09-08 12:53:27	-->	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-08 12:54:07	Rc43	donri, data is same, but I think I got why it complains; just ghci assumes that result list is of ints, but ghc don't know about result type, because I didn't type it
2013-09-08 12:55:05	Rc43	Ye, now it works.
2013-09-08 12:55:10	Rc43	Thanks, guys.
2013-09-08 12:55:21	Rc43	I used `evaluate' and `deepseq'.
2013-09-08 12:56:08	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-08 12:56:09	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 12:56:14	donri	not sure that'll do what you want but ok
2013-09-08 12:56:25	donri	just-use-criterion ;) it's really good
2013-09-08 12:56:49	donri	it measures outliers and such
2013-09-08 12:56:50	Rc43	donri, ye, I will look; just want to know how to do same thing without any tools
2013-09-08 12:57:09	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Client Quit)
2013-09-08 12:57:42	-->	watermind (~wm@2.80.223.243) has joined #haskell
2013-09-08 12:58:25	watermind	just noticed Real World Haskell has a chapter on STM
2013-09-08 12:59:04	watermind	I thought STM was pretty new, is RWH (online version) being regularly updated? Or am I wrong about STM being that new?
2013-09-08 12:59:33	mauke	STM isn't that new
2013-09-08 12:59:49	watermind	right
2013-09-08 12:59:50	donri	watermind: the first version of stm on hackage is from 2006
2013-09-08 12:59:52	donri	and that's 2.1
2013-09-08 12:59:59	arkeet	STM isn't all that new.
2013-09-08 13:00:11	-->	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has joined #haskell
2013-09-08 13:00:13	donri	and probably ghc had stm stuff before we had an stm package
2013-09-08 13:00:15	arkeet	the stm paper is from 2005.
2013-09-08 13:00:59	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-08 13:01:09	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 268 seconds)
2013-09-08 13:01:26	watermind	right... I thoguht it was much more recent for some reason
2013-09-08 13:02:21	jack_rabbit	Is there any project that's widely used that is written in haskell, outside the haskell community?
2013-09-08 13:02:23	donri	i guess it was sort of new during the "boom" back when pugs had people discovering haskell and RWH was being written
2013-09-08 13:02:38	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-09-08 13:02:52	donri	jack_rabbit: darcs, xmonad
2013-09-08 13:02:55	arkeet	right, RWH was published in 2008.
2013-09-08 13:03:09	arkeet	darcs is widely used outside the haskell community? ;)
2013-09-08 13:03:15	donri	jack_rabbit: facebook uses haskell internally i think...
2013-09-08 13:03:47	watermind	xmonad is widely used?
2013-09-08 13:03:52	-->	jang1 (~granjan@212.183.128.64) has joined #haskell
2013-09-08 13:04:08	donri	for a tiling WM, certainly
2013-09-08 13:04:11	jack_rabbit	donri, If facebook uses haskell internally, I'd love to work for facebook.
2013-09-08 13:04:30	watermind	I have to try a tiling WM someday to see what the fuss is all about
2013-09-08 13:04:43	donri	jack_rabbit: they've been hiring the brightest minds in the haskell community, don't get your hopes up to work on those projects ;)
2013-09-08 13:05:07	-->	cheryl (~user@123.67.1.150) has joined #haskell
2013-09-08 13:05:16	watermind	another question, is parsec the parser of choice these days? or is there one?
2013-09-08 13:05:25	<--	ziman_ (~ziman@functor.sk) has quit (Ping timeout: 245 seconds)
2013-09-08 13:05:31	donri	depends what you're parsing
2013-09-08 13:05:51	arkeet	(alternatives: attoparsec, trifecta, )
2013-09-08 13:06:26	watermind	say, some simple programming language, or logic
2013-09-08 13:06:31	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-09-08 13:06:50	jack_rabbit	donri, I'm probably not among the brightest haskell developers. In fact, I'm still a beginner. However, the fact that an institution uses haskell is inspiring.
2013-09-08 13:06:59	donri	possibly for a programming language you want trifecta
2013-09-08 13:07:06	donri	unless the emphasis was on "simple"
2013-09-08 13:07:22	-->	nooodl_ (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-08 13:07:25	watermind	donri: is there some sort of flowchart for this? :P
2013-09-08 13:07:31	donri	:)
2013-09-08 13:08:20	donri	attoparsec gives you high performance for low-level protocol parsing, at the expense of useful error messages and look-ahead (IIRC)
2013-09-08 13:08:29	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-08 13:08:53	donri	trifecta gives you ultra super powers with colorful error messages on the terminal with support for turning a parser into a syntax highlighter
2013-09-08 13:09:07	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-08 13:09:12	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 260 seconds)
2013-09-08 13:09:41	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 13:09:42	merijn	donri: tbh, in my experience so far cereal/binary are nicer than attoparsec in terms of actually parsing low level stuff
2013-09-08 13:10:06	Ghoul_	trifecta is super cool
2013-09-08 13:10:10	donri	parsec is the slowest but sort of the "gold standard" and has better errors than attoparsec (but possibly not as good as trifecta)
2013-09-08 13:10:25	-->	wojtekM_ (~user@78.9.7.170) has joined #haskell
2013-09-08 13:10:25	watermind	donri: I see, pretty cool
2013-09-08 13:10:30	Ghoul_	parsec is in my experience realllly slow
2013-09-08 13:10:32	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Quit: leaving)
2013-09-08 13:10:36	kuribas	Should I {-# INLINE -#} small functions that are exported from my module?
2013-09-08 13:10:36	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 260 seconds)
2013-09-08 13:10:44	donri	merijn: yeah, probably, maybe depends on exactly *how* low level?
2013-09-08 13:10:45	Ghoul_	I once wrote and optimized a parser in it that took milliseconds to parse 400 lines..
2013-09-08 13:10:48	merijn	jack_rabbit: I know that both Standard Chartered Bank, S&P Capital and some other financial firms use Haskell internally
2013-09-08 13:10:52	--	nooodl_ is now known as nooodl
2013-09-08 13:10:54	donri	kuribas: nah
2013-09-08 13:11:02	wojtekM_	Hello list! I have a question, again...
2013-09-08 13:11:10	kuribas	donri: Does haskell do cross module inlining?
2013-09-08 13:11:16	donri	kuribas: small functions get inlined anyway. INLINABLE can be useful though
2013-09-08 13:11:17	<--	Rc43 (4fad5042@gateway/web/freenode/ip.79.173.80.66) has quit (Quit: Page closed)
2013-09-08 13:11:18	<--	carlo_au (~carlo@ppp118-208-78-52.lns20.bne4.internode.on.net) has quit (Quit: Leaving)
2013-09-08 13:11:21	merijn	donri: Well, attoparsec is lacking things as obvious as "parse flexible length value inside fixed width field"
2013-09-08 13:11:34	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-08 13:11:42	arkeet	kuribas: I think it does if you use {-# INLINE #-}
2013-09-08 13:11:42	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-08 13:11:42	kuribas	For example: (Point x1 y1) ^+^ (Point x2 y2) = Point (x1+x2) (y1+y2)
2013-09-08 13:11:45	merijn	donri: For example, when I had to parse a null padded string inside a 20 byte field, that was really annoying
2013-09-08 13:11:58	arkeet	this is why lens inlines all the things.
2013-09-08 13:12:02	merijn	donri: It's also the main reason I use cereal now, as in binary that was pretty obnoxious too
2013-09-08 13:12:03	wojtekM_	data My = A | B, is it possible to limit the type a function yields to be always A?
2013-09-08 13:12:33	-->	ziman (~ziman@functor.sk) has joined #haskell
2013-09-08 13:12:42	kuribas	wojtekM_: no
2013-09-08 13:12:45	merijn	jack_rabbit: The big "problem" is that the companies that are making lots of money writing haskell aren't the popular web2.0 fads that everyone is writing about
2013-09-08 13:12:47	donri	merijn: yeah that sounds like the sort of thing binary and cereal are better for
2013-09-08 13:12:56	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 13:13:03	kuribas	wojtekM_: A function "a -> My" can return A or B
2013-09-08 13:13:21	donri	merijn: i.e. binary data :p presumably attoparsec is for ASCII or something like that
2013-09-08 13:13:45	merijn	jack_rabbit: I talked to a guy whose company had a 100k LOC of ActionScript3 to Flash compiler written in Haskell and they were doing quite well selling it.
2013-09-08 13:13:48	wojtekM_	kuribas: even if I know that a function always gives A, I cannot write it down?
2013-09-08 13:13:49	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-09-08 13:13:56	wojtekM_	kuribas: Well, okay
2013-09-08 13:13:59	donri	merijn: or do you think binary/cereal are better suited than attoparsec for things like http, json...?
2013-09-08 13:13:59	merijn	jack_rabbit: When you start looking around, lots of people use haskell, but no one is talking about it ;)
2013-09-08 13:14:07	merijn	donri: I guess?
2013-09-08 13:14:09	kuribas	wojtekM_: Not in that type.  You can make a new type for it.
2013-09-08 13:14:21	donri	merijn: you guess, which part? :)
2013-09-08 13:14:35	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-08 13:14:53	<--	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has quit (Ping timeout: 264 seconds)
2013-09-08 13:15:01	wojtekM_	kuribas: Okay, thanks
2013-09-08 13:15:10	arkeet	wojtekM_: you can maek another type, say, OnlyA, and then write a function OnlyA -> My
2013-09-08 13:15:26	merijn	donri: Well, so far my experience seems to say that attoparsec is good for parsing complex collections of atoms, but not so good at structured data
2013-09-08 13:15:34	merijn	donri: cereal/binary seem better at structured data
2013-09-08 13:15:35	arkeet	(and maybe you want to be able to go back: My -> Maybe OnlyA.)
2013-09-08 13:15:45	arkeet	(and then you use a prism.)
2013-09-08 13:15:57	merijn	i.e. "20 int32_t followed by a String of length x"a
2013-09-08 13:16:03	jack_rabbit	merijn, I think you're simplifying things, but it is comforting to see people using haskell.
2013-09-08 13:16:15	donri	merijn: yeah that sounds like a good assessment
2013-09-08 13:16:26	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-08 13:16:34	merijn	jack_rabbit: Well, I'm not saying *everyone* is using it, but more people that you would naively expect :)
2013-09-08 13:17:55	 *	hackagebot hamlet 1.1.7.2 - Haml-like template files that are compile-time checked  http://hackage.haskell.org/package/hamlet-1.1.7.2 (MichaelSnoyman)
2013-09-08 13:17:57	 *	hackagebot shakespeare 1.2.0 - A toolkit for making compile-time interpolated templates  http://hackage.haskell.org/package/shakespeare-1.2.0 (MichaelSnoyman)
2013-09-08 13:17:59	 *	hackagebot shakespeare-css 1.0.6.3 - Stick your haskell variables into css at compile time.  http://hackage.haskell.org/package/shakespeare-css-1.0.6.3 (MichaelSnoyman)
2013-09-08 13:18:01	 *	hackagebot shakespeare-i18n 1.0.0.4 - A type-based approach to internationalization.  http://hackage.haskell.org/package/shakespeare-i18n-1.0.0.4 (MichaelSnoyman)
2013-09-08 13:18:05	merijn	donri: The problem is, if you have 50/50 mix of atoms/data than both suck :p
2013-09-08 13:18:05	 *	hackagebot shakespeare-js 1.2.0 - Stick your haskell variables into javascript/coffeescript at compile time.  http://hackage.haskell.org/package/shakespeare-js-1.2.0 (MichaelSnoyman)
2013-09-08 13:18:19	donri	kuribas: i would suggest not using INLINE unless you know why, and to use INLINABLE on polymorphic public functions, and *maybe* also on monomorphic functions if you really want to. and use GHC.Exts.inline internally on calls to your own INLINABLE functions
2013-09-08 13:18:40	-->	KorriX (~korri@users.v-lo.krakow.pl) has joined #haskell
2013-09-08 13:18:42	donri	merijn: i can imagine :/
2013-09-08 13:18:44	-->	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has joined #haskell
2013-09-08 13:19:25	kuribas	donri: Does ghc do inlining cross modules?  For example my vector addition function:
2013-09-08 13:19:26	donri	kuribas: (but do benchmark; inlining can actually severely hurt performance in many cases)
2013-09-08 13:19:27	kuribas	(Point x1 y1) ^+^ (Point x2 y2) = Point (x1+x2) (y1+y2)
2013-09-08 13:19:59	<--	wak (~wak@63.252.64.209) has quit (Remote host closed the connection)
2013-09-08 13:19:59	merijn	kuribas: The answer is "sometimes"
2013-09-08 13:20:07	donri	kuribas: IIUC it will expose small functions for cross-module/package inlining, yes
2013-09-08 13:20:39	donri	kuribas: INLINE basically says "inline this, all the time, everywhere, unconditionally" (almost)
2013-09-08 13:20:52	kuribas	donri: So declaring a small function INLINABLE doesn't make much difference.
2013-09-08 13:20:58	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-08 13:20:58	donri	kuribas: INLINABLE says "expose this for inlining in the interface file"
2013-09-08 13:21:03	nh2	new-hackage down?
2013-09-08 13:21:29	donri	kuribas: which makes it possible to get type specialization in downstream consumer code or explicitly inline it at the call site with GHC.Exts.inline
2013-09-08 13:21:50	donri	kuribas: for small functions, neither pragma should matter no
2013-09-08 13:22:07	arkeet	well, it would if you're using it in another module.
2013-09-08 13:22:20	kuribas	arkeet: That's my question actually.
2013-09-08 13:22:25	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-09-08 13:22:53	donri	i don't think cross-module matters for small functions
2013-09-08 13:23:02	donri	note that base doesn't INLINE all the things
2013-09-08 13:23:05	 *	hackagebot shakespeare-text 1.0.0.7 - Interpolation with quasi-quotation: put variables strings  http://hackage.haskell.org/package/shakespeare-text-1.0.0.7 (MichaelSnoyman)
2013-09-08 13:23:05	donri	also see http://neilmitchell.blogspot.se/2011/06/inline-pragmas-in-safe-library.html
2013-09-08 13:23:07	 *	hackagebot yesod-platform 1.2.4 - Meta package for Yesod  http://hackage.haskell.org/package/yesod-platform-1.2.4 (MichaelSnoyman)
2013-09-08 13:23:08	arkeet	note that lens does INLINE all the things
2013-09-08 13:23:09	 *	hackagebot netpbm 1.0.0 - Loading PBM, PGM, PPM image files  http://hackage.haskell.org/package/netpbm-1.0.0 (NiklasHambuechen)
2013-09-08 13:23:27	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 13:23:29	arkeet	look at core to be sure
2013-09-08 13:23:33	donri	quite
2013-09-08 13:23:36	kuribas	donri: I think it matters especially for small functions.
2013-09-08 13:23:43	arkeet	indeed.
2013-09-08 13:23:46	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-08 13:23:50	kuribas	"Without INLINABLE, GHC will omit the definition from the interface file if it is too big. If some other function got inlined into the right-hand-side, this could easily push it over the limit."
2013-09-08 13:23:59	kuribas	http://stackoverflow.com/questions/9709823/is-there-any-reason-not-to-use-the-inlinable-pragma-for-a-function
2013-09-08 13:23:59	arkeet	"if it is too big" hmm
2013-09-08 13:24:08	arkeet	what's the threshold?
2013-09-08 13:24:26	<--	guardianx (fruit@124.148.25.110) has quit (Remote host closed the connection)
2013-09-08 13:24:28	donri	the threshold can be set with -f flags
2013-09-08 13:25:03	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-08 13:25:04	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-08 13:25:04	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-08 13:25:12	<--	codesoup (~codesoup@69-165-138-68.dsl.teksavvy.com) has quit (Ping timeout: 268 seconds)
2013-09-08 13:25:45	donri	it does of course depend on the code, what option is the best
2013-09-08 13:26:02	donri	in lens' case, it's built up by lots and lots of really small but highly polymorphic functions
2013-09-08 13:26:08	kuribas	I guess my vector addition will definitely be inlined.
2013-09-08 13:26:11	<--	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Quit: Leaving.)
2013-09-08 13:26:20	-->	erthalion (~erthalion@176.196.18.81) has joined #haskell
2013-09-08 13:26:27	arkeet	lots of lens code disappears after inlining.
2013-09-08 13:26:43	arkeet	shachaf makes sure of that.
2013-09-08 13:27:05	<--	erthalion (~erthalion@176.196.18.81) has quit (Client Quit)
2013-09-08 13:27:12	donri	but i recently had a case where trying INLINE on everything worsened the performance considerably
2013-09-08 13:27:22	donri	it's not a silver bullet
2013-09-08 13:27:42	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-08 13:28:11	fylwind	wouldn't excessive INLINEs cause higher instruction cache misses?
2013-09-08 13:28:34	donri	something like that, yes
2013-09-08 13:28:43	donri	the ghc user guide says something about that
2013-09-08 13:29:39	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 264 seconds)
2013-09-08 13:30:06	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-08 13:30:35	<--	yacks (~py@103.6.159.103) has quit (Ping timeout: 240 seconds)
2013-09-08 13:30:37	<--	jroesch (~jared@chips.whatbox.ca) has quit (Quit: ZNC - http://znc.in)
2013-09-08 13:32:07	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-08 13:32:40	-->	erochester (~erocheste@cpe-071-076-229-182.triad.res.rr.com) has joined #haskell
2013-09-08 13:32:50	Ghoul_	is there a way to detect if a program is running on windows?
2013-09-08 13:32:54	<--	erochester (~erocheste@cpe-071-076-229-182.triad.res.rr.com) has quit (Client Quit)
2013-09-08 13:32:59	Ghoul_	prefferably without the preprocessor, so, at runtime
2013-09-08 13:33:03	donri	> System.Info.os
2013-09-08 13:33:05	lambdabot	  Not in scope: `System.Info.os'
2013-09-08 13:33:10	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-08 13:33:41	donri	it's in base
2013-09-08 13:33:45	Ghoul_	oh, cool
2013-09-08 13:33:46	Ghoul_	thanks
2013-09-08 13:34:16	<--	KorriX (~korri@users.v-lo.krakow.pl) has quit (Quit: leaving)
2013-09-08 13:34:28	Ghoul_	how can I load a thing registered in ghc-pkg into ghci?
2013-09-08 13:35:10	Ghoul_	:module + System.Info, awesome :)
2013-09-08 13:36:44	-->	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-09-08 13:36:53	noteventime	Ghoul_: If you have a resent-ish version you can also use the standard import syntax
2013-09-08 13:39:01	-->	yesthisisuser (~chatzilla@41.222.181.155) has joined #haskell
2013-09-08 13:39:23	<--	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has quit (Ping timeout: 268 seconds)
2013-09-08 13:39:47	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-08 13:40:47	<--	jang1 (~granjan@212.183.128.64) has quit (Quit: Leaving.)
2013-09-08 13:40:49	-->	jarlg (~jarlg@c-178-73-201-246.anonymous.at.anonine.com) has joined #haskell
2013-09-08 13:41:09	hpaste	Kaini pasted “How to generalize this?” at http://lpaste.net/92738
2013-09-08 13:41:12	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-08 13:41:44	Kaini	How could I define this functions in a "elegant" way? http://lpaste.net/92738
2013-09-08 13:42:40	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 13:43:04	yesthisisuser	I'm playing around with HaskellDB. Does anyone know if there is a way to do a SQL LAST_INSERT_ID query?
2013-09-08 13:43:50	mauke	(,,) <$> apiAskParam p1 <*> apiAskParam p2 <*> apiAskParam p3
2013-09-08 13:44:05	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-09-08 13:44:50	-->	elediaz (~quassel@90.173.212.151) has joined #haskell
2013-09-08 13:45:16	donri	sequenceOf each $ each %~ apiAskParam  -- possibly :p
2013-09-08 13:45:24	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-08 13:45:27	<--	elediaz_ (~quassel@92.59.147.86) has quit (Ping timeout: 260 seconds)
2013-09-08 13:45:33	Kaini	huh?
2013-09-08 13:45:39	donri	uh maybe s/$/./
2013-09-08 13:46:09	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-08 13:46:56	-->	tiksa (~tiksa@gateway/tor-sasl/tiksa) has joined #haskell
2013-09-08 13:47:44	donri	Kaini: mauke used Control.Applicative from the base package; I used Control.Lens from the lens package
2013-09-08 13:47:50	Kaini	Ah
2013-09-08 13:47:52	Kaini	Control.Lens
2013-09-08 13:47:59	Kaini	I was looking for it right now
2013-09-08 13:48:13	Kaini	And there is no way to remove the 2 3 4 5 verions of the function?
2013-09-08 13:48:23	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-08 13:48:24	Kaini	Maybe some newtype foo?
2013-09-08 13:48:33	donri	Kaini: my version does that, if it works
2013-09-08 13:48:35	donri	(didn't test)
2013-09-08 13:49:11	<--	zbcm (~zbcm@147.69.182.184) has quit (Ping timeout: 260 seconds)
2013-09-08 13:49:20	Kaini	I'll try it :) Thanks
2013-09-08 13:49:55	<--	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 13:50:04	<--	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Quit: Leaving.)
2013-09-08 13:50:20	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 13:51:25	-->	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has joined #haskell
2013-09-08 13:51:30	-->	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has joined #haskell
2013-09-08 13:52:05	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Leaving...)
2013-09-08 13:52:34	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-08 13:54:28	<--	Pip (~Pip__@unaffiliated/pip) has quit (Ping timeout: 264 seconds)
2013-09-08 13:54:51	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-08 13:57:40	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-08 13:59:16	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 14:00:03	-->	fredmorcos (~fredmorco@cm56-209-5.liwest.at) has joined #haskell
2013-09-08 14:00:05	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-08 14:02:21	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-08 14:02:49	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-08 14:04:45	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-08 14:04:46	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-09-08 14:04:47	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-08 14:04:50	-->	Eduard_Munteanu (~EduardMun@188.25.92.116) has joined #haskell
2013-09-08 14:05:55	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 14:06:10	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 14:06:43	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-08 14:07:01	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 14:07:53	<--	ndonaldson (~nic@61.69.24.113) has quit (Ping timeout: 256 seconds)
2013-09-08 14:07:56	 *	hackagebot yesod 1.2.2.1 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-1.2.2.1 (MichaelSnoyman)
2013-09-08 14:07:57	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Remote host closed the connection)
2013-09-08 14:07:58	 *	hackagebot yesod-auth 1.2.2.1 - Authentication for Yesod.  http://hackage.haskell.org/package/yesod-auth-1.2.2.1 (MichaelSnoyman)
2013-09-08 14:08:00	 *	hackagebot yesod-bin 1.2.3.1 - The yesod helper executable.  http://hackage.haskell.org/package/yesod-bin-1.2.3.1 (MichaelSnoyman)
2013-09-08 14:08:02	 *	hackagebot yesod-core 1.2.4.2 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-core-1.2.4.2 (MichaelSnoyman)
2013-09-08 14:08:02	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-08 14:08:04	 *	hackagebot yesod-form 1.3.2.1 - Form handling support for Yesod Web Framework  http://hackage.haskell.org/package/yesod-form-1.3.2.1 (MichaelSnoyman)
2013-09-08 14:08:11	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-08 14:08:46	-->	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has joined #haskell
2013-09-08 14:09:10	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-08 14:11:58	-->	tertl3 (~William@75.139.64.89) has joined #haskell
2013-09-08 14:12:16	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 240 seconds)
2013-09-08 14:13:25	-->	t4nk734 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-09-08 14:14:14	t4nk734	hello
2013-09-08 14:14:40	FreeFull	Hi
2013-09-08 14:14:59	t4nk734	i want to use in Haskell some mutable arrays, like in python (i mean, i can say arr[1] <op> 2)
2013-09-08 14:15:09	t4nk734	can you give me keywords to google for?
2013-09-08 14:15:19	<--	jarlg (~jarlg@c-178-73-201-246.anonymous.at.anonine.com) has quit (Quit: WeeChat 0.4.0)
2013-09-08 14:15:25	t4nk734	for example, for chess board
2013-09-08 14:15:31	-->	rgr (~user@g224129178.adsl.alicedsl.de) has joined #haskell
2013-09-08 14:15:41	t4nk734	where i have 8x8 array with different states
2013-09-08 14:16:10	fredmorcos	is it possible for the runtime+compiler to automatically parallelize all pure code?
2013-09-08 14:16:15	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 14:16:16	Eduard_Munteanu	t4nk734: see the 'vector' or 'array' packages, they both provide mutable arrays
2013-09-08 14:16:21	-->	AleXoundOS_ (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-08 14:16:26	t4nk734	Eduard_Munteanu: thanks =)
2013-09-08 14:17:20	Eduard_Munteanu	t4nk734: http://www.haskell.org/haskellwiki/Arrays
2013-09-08 14:17:42	FreeFull	t4nk734: You might not need a mutable array though, returning a new array with a change is often enough. Mutable arrays are mostly just for performance
2013-09-08 14:17:50	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 14:19:11	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Ping timeout: 245 seconds)
2013-09-08 14:19:24	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-08 14:19:40	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 260 seconds)
2013-09-08 14:19:54	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-08 14:20:00	Eduard_Munteanu	fredmorcos: there have been attempts to do that, but it tends to be difficult to decide whether something's worth parallelizing. As for a midway approach look at DPH.
2013-09-08 14:20:00	kuribas	fredmorcos: Not at this moment: http://chimera.labs.oreilly.com/books/1230000000929/index.html
2013-09-08 14:20:28	-->	ndonaldson (~nic@pa49-181-170-149.pa.nsw.optusnet.com.au) has joined #haskell
2013-09-08 14:20:49	<--	t4nk734 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-09-08 14:21:00	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 14:21:06	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-08 14:21:15	fredmorcos	Eduard_Munteanu, I think the Cilk (work-stealing) scheduler may be a very good fit
2013-09-08 14:21:39	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-08 14:21:51	<--	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has quit (Ping timeout: 264 seconds)
2013-09-08 14:22:24	<--	rgr (~user@g224129178.adsl.alicedsl.de) has quit (Ping timeout: 240 seconds)
2013-09-08 14:22:37	Eduard_Munteanu	It might be easier for JIT-ed code since profile-based code generation is less inconvenient there.
2013-09-08 14:22:56	 *	hackagebot yesod-bin 1.2.3.2 - The yesod helper executable.  http://hackage.haskell.org/package/yesod-bin-1.2.3.2 (MichaelSnoyman)
2013-09-08 14:23:13	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-08 14:23:17	-->	epsilonhalbe (~epsilonha@178.115.132.30.wireless.dyn.drei.com) has joined #haskell
2013-09-08 14:23:22	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-08 14:23:25	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-09-08 14:23:30	-->	_arjun (3d0c7252@gateway/web/freenode/ip.61.12.114.82) has joined #haskell
2013-09-08 14:23:35	Eduard_Munteanu	Actually I wonder if GHC can do profile-based optimizations.
2013-09-08 14:23:42	-->	ISF (~ivan@201.82.138.219) has joined #haskell
2013-09-08 14:23:49	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-08 14:24:14	fylwind	so why is GHC called the "Glorious" Glasgow Haskell Compiler? :)
2013-09-08 14:24:55	-->	zakora (~textual@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-09-08 14:25:16	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Ping timeout: 240 seconds)
2013-09-08 14:26:15	<--	yesthisisuser (~chatzilla@41.222.181.155) has quit (Ping timeout: 245 seconds)
2013-09-08 14:26:39	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-08 14:27:00	-->	hexagoxel (~hexagoxel@kiel-4d06658c.pool.mediaWays.net) has joined #haskell
2013-09-08 14:27:45	<--	_arjun (3d0c7252@gateway/web/freenode/ip.61.12.114.82) has quit (Ping timeout: 250 seconds)
2013-09-08 14:27:56	 *	hackagebot yesod-platform 1.2.4.1 - Meta package for Yesod  http://hackage.haskell.org/package/yesod-platform-1.2.4.1 (MichaelSnoyman)
2013-09-08 14:28:23	Ghoul_	Eduard_Munteanu: I know for certain the NCG won't do it
2013-09-08 14:28:59	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 14:29:22	Ghoul_	LLVM probably does it (or at least, there's a branch or in-dev version that does?), and you might be able to *hack* it to work using command line options through ghc into llvm
2013-09-08 14:29:25	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (Ping timeout: 256 seconds)
2013-09-08 14:29:26	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 14:29:28	<--	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has quit (Ping timeout: 261 seconds)
2013-09-08 14:29:55	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-09-08 14:29:55	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 14:30:52	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-08 14:31:53	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-08 14:32:41	-->	CaptainK (~CaptainK@181.179.61.136) has joined #haskell
2013-09-08 14:33:34	<--	zakora (~textual@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-08 14:33:43	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-08 14:34:18	<--	tim (~quassel@91-119-129-43.dynamic.xdsl-line.inode.at) has quit (Remote host closed the connection)
2013-09-08 14:34:19	-->	zakora (~textual@tok69-4-82-236-111-173.fbx.proxad.net) has joined #haskell
2013-09-08 14:35:03	<--	epsilonhalbe (~epsilonha@178.115.132.30.wireless.dyn.drei.com) has quit (Ping timeout: 264 seconds)
2013-09-08 14:35:10	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-08 14:35:49	<--	zakora (~textual@tok69-4-82-236-111-173.fbx.proxad.net) has quit (Client Quit)
2013-09-08 14:35:55	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 264 seconds)
2013-09-08 14:37:52	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Read error: Connection reset by peer)
2013-09-08 14:37:55	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 256 seconds)
2013-09-08 14:41:25	<--	pygospa (~Pygosceli@kiel-4d066593.pool.mediaWays.net) has quit (Disconnected by services)
2013-09-08 14:41:35	-->	TheRealPygo (~Pygosceli@kiel-d9bfc4b0.pool.mediaWays.net) has joined #haskell
2013-09-08 14:43:05	Eduard_Munteanu	I see.
2013-09-08 14:43:30	-->	exicer (~exicer@host81-149-102-120.in-addr.btopenworld.com) has joined #haskell
2013-09-08 14:43:57	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-08 14:44:58	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 14:46:48	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-08 14:48:17	<--	charliesome (~root@124-148-189-45.dyn.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 14:48:45	-->	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-08 14:49:43	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-08 14:50:56	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-09-08 14:51:15	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 14:51:49	<--	fredmorcos (~fredmorco@cm56-209-5.liwest.at) has quit (Quit: Leaving)
2013-09-08 14:52:20	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-08 14:56:19	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-09-08 14:56:55	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Ping timeout: 264 seconds)
2013-09-08 14:58:10	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-08 14:58:30	-->	mjboa (~mike@c-98-221-215-199.hsd1.nj.comcast.net) has joined #haskell
2013-09-08 14:59:20	<--	funfunctor (~functorfu@c211-30-236-14.wavrl3.nsw.optusnet.com.au) has quit (Ping timeout: 260 seconds)
2013-09-08 15:00:02	-->	CapitanK (~CaptainK@181.179.79.225) has joined #haskell
2013-09-08 15:01:30	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-09-08 15:01:59	<--	CaptainK (~CaptainK@181.179.61.136) has quit (Ping timeout: 260 seconds)
2013-09-08 15:02:10	jmcarthur	i would have pointed out to fredmorcos that ghc already provides very convenient work stealing queues
2013-09-08 15:02:31	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 15:02:40	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 15:02:41	-->	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-08 15:02:46	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-08 15:02:57	<--	Peaker (~eyal@87.69.111.138) has quit (Ping timeout: 240 seconds)
2013-09-08 15:03:22	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-08 15:03:50	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-09-08 15:04:01	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-08 15:04:12	-->	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has joined #haskell
2013-09-08 15:04:53	-->	salva (~salva@net-188-216-164-94.cust.dsl.vodafone.it) has joined #haskell
2013-09-08 15:05:09	salva	list
2013-09-08 15:05:17	<--	salva (~salva@net-188-216-164-94.cust.dsl.vodafone.it) has left #haskell
2013-09-08 15:05:36	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-08 15:05:56	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 264 seconds)
2013-09-08 15:06:04	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Client Quit)
2013-09-08 15:06:15	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 15:07:05	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 15:07:44	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-08 15:08:03	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-08 15:08:36	<--	CapitanK (~CaptainK@181.179.79.225) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 15:08:42	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-08 15:08:52	<--	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-08 15:09:09	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 15:10:17	<--	mjboa (~mike@c-98-221-215-199.hsd1.nj.comcast.net) has quit (Quit: leaving)
2013-09-08 15:11:23	-->	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has joined #haskell
2013-09-08 15:11:48	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-08 15:11:59	-->	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has joined #haskell
2013-09-08 15:12:30	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 268 seconds)
2013-09-08 15:12:41	<--	cheryl (~user@123.67.1.150) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-08 15:12:44	-->	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has joined #haskell
2013-09-08 15:14:02	paolino	hello , is there a specific channel for questions on gtk bindings ?
2013-09-08 15:14:21	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 15:14:26	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-08 15:16:01	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-09-08 15:16:12	<--	tefter (~tefter@87.250.40.232) has quit (Remote host closed the connection)
2013-09-08 15:17:27	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-08 15:19:41	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 15:20:27	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-08 15:21:52	-->	jackp (~Jack@pool-173-61-150-129.cmdnnj.fios.verizon.net) has joined #haskell
2013-09-08 15:21:59	<--	tertl3 (~William@75.139.64.89) has quit (Quit: Going offline, see ya! (www.adiirc.com))
2013-09-08 15:22:03	<--	yopikh (~mand@79.175.167.200) has quit (Quit: leaving)
2013-09-08 15:22:59	<--	bitonic (~user@ppp-188-144.27-151.libero.it) has quit (Ping timeout: 268 seconds)
2013-09-08 15:24:06	-->	serban (serban@notromania.com) has joined #haskell
2013-09-08 15:24:37	-->	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has joined #haskell
2013-09-08 15:24:53	serban	Hi, I'm using EclipseFP plugin and would like to have tab completion in console when running/using haskell. Is that possible?
2013-09-08 15:25:39	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-08 15:25:49	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-08 15:26:17	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 15:26:20	<--	c_14 (~c_14@unaffiliated/c-14/x-8913907) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:20	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-08 15:26:20	<--	FreeFull (~freefull@defocus/sausage-lover) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:20	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-08 15:26:30	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-08 15:26:30	<--	liori (~liori@slarti.exroot.org) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:31	<--	hc (hc@public.chaos.hg.tu-darmstadt.de) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:31	<--	jaspervd1 (~jaspervdj@jaspervdj.be) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:31	<--	shiona (shiona@shiona.tontut.fi) has quit (Ping timeout: 264 seconds)
2013-09-08 15:26:39	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-09-08 15:26:41	-->	hc (hc@public.chaos.hg.tu-darmstadt.de) has joined #haskell
2013-09-08 15:26:46	-->	shiona (shiona@shiona.tontut.fi) has joined #haskell
2013-09-08 15:26:55	-->	liori (~liori@slarti.exroot.org) has joined #haskell
2013-09-08 15:26:57	<--	ndonaldson (~nic@pa49-181-170-149.pa.nsw.optusnet.com.au) has quit (Quit: Leaving)
2013-09-08 15:27:07	<--	go|dfish (goldfish@nat/dcunetworkingsociety/x-mrcpohkhedltvqkw) has quit (Ping timeout: 264 seconds)
2013-09-08 15:27:16	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2013-09-08 15:27:36	-->	c_14 (~c_14@unaffiliated/c-14/x-8913907) has joined #haskell
2013-09-08 15:27:43	<--	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has quit (Ping timeout: 264 seconds)
2013-09-08 15:28:18	-->	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has joined #haskell
2013-09-08 15:28:28	-->	u_ (~phillip@adsl-76-202-255-123.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 15:28:29	-->	go|dfish (goldfish@nat/dcunetworkingsociety/x-jfwdsjjzqmzplavb) has joined #haskell
2013-09-08 15:28:41	<--	u_ (~phillip@adsl-76-202-255-123.dsl.emhril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-08 15:29:26	-->	u_ (~phillip@adsl-76-202-255-123.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 15:29:49	<--	rnons (~rnons@183.152.58.163) has quit (Read error: No route to host)
2013-09-08 15:29:56	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-09-08 15:29:56	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 15:30:03	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-08 15:30:10	<--	simukis_ (~simukis_@78.63.244.234) has quit (Ping timeout: 260 seconds)
2013-09-08 15:30:33	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-08 15:30:34	--	functorfun is now known as funfunctor
2013-09-08 15:31:03	-->	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-08 15:31:37	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 268 seconds)
2013-09-08 15:33:13	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 15:33:40	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-08 15:34:50	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-08 15:36:12	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Excess Flood)
2013-09-08 15:36:25	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 15:36:28	-->	debo (~anonymous@69-165-141-163.dsl.teksavvy.com) has joined #haskell
2013-09-08 15:36:49	<--	debo (~anonymous@69-165-141-163.dsl.teksavvy.com) has quit (Client Quit)
2013-09-08 15:37:01	mroman	oh man
2013-09-08 15:37:17	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-08 15:37:54	mroman	my installation is still broken
2013-09-08 15:37:59	mroman	it says web-encodings is installed
2013-09-08 15:38:05	-->	Guest21945 (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 15:38:05	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-08 15:38:07	mroman	but import Web.Encodings is still missing
2013-09-08 15:38:12	<--	Guest21945 (~idk@h-35-6.a336.priv.bahnhof.se) has left #haskell
2013-09-08 15:38:25	mroman	can I remove EVERYTHING except the compiler and reinstall eveything through cabal?
2013-09-08 15:38:53	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-08 15:39:01	-->	rgr (~user@g224129178.adsl.alicedsl.de) has joined #haskell
2013-09-08 15:39:31	<--	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has quit (Ping timeout: 264 seconds)
2013-09-08 15:39:32	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-08 15:40:30	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-08 15:41:27	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-08 15:41:32	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Remote host closed the connection)
2013-09-08 15:42:10	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Ping timeout: 240 seconds)
2013-09-08 15:42:17	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-08 15:42:29	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-08 15:42:32	-->	tailcalled (~tailcalle@93-167-214-175-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-08 15:42:58	 *	hackagebot lens 3.9.1 - Lenses, Folds and Traversals  http://hackage.haskell.org/package/lens-3.9.1 (EdwardKmett)
2013-09-08 15:43:05	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Remote host closed the connection)
2013-09-08 15:43:34	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-08 15:43:40	<--	Paprikachu (~Paprikach@77.117.74.35.wireless.dyn.drei.com) has quit (Ping timeout: 260 seconds)
2013-09-08 15:44:24	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-09-08 15:44:28	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 15:44:47	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-08 15:47:19	-->	Guest21945 (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 15:47:56	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 245 seconds)
2013-09-08 15:50:25	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 245 seconds)
2013-09-08 15:50:26	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-08 15:50:27	<--	thunderrd (~thunderrd@119.42.79.179) has quit (Remote host closed the connection)
2013-09-08 15:50:54	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-08 15:51:14	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-08 15:51:27	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-08 15:51:27	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-08 15:51:27	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-08 15:51:31	mroman	system.directory is apparentely broken
2013-09-08 15:52:04	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-08 15:52:25	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 15:52:58	 *	hackagebot integration 0.2 - Fast robust numeric integration via tanh-sinh quadrature  http://hackage.haskell.org/package/integration-0.2 (EdwardKmett)
2013-09-08 15:53:13	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-08 15:54:18	mroman	What's the successor of web-encodings
2013-09-08 15:54:22	mroman	it's obsolete on hackage
2013-09-08 15:56:06	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 15:56:14	niteria	@where paste
2013-09-08 15:56:14	lambdabot	http://lpaste.net/new/haskell
2013-09-08 15:56:18	-->	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-09-08 15:56:44	--	Guest21945 is now known as nulvinge
2013-09-08 15:57:06	hpaste	niteria pasted “unexpected strictness annotation” at http://lpaste.net/92739
2013-09-08 15:57:15	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 15:57:17	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-08 15:57:19	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-08 15:57:21	niteria	why can't I do !Map.Map on line 30?
2013-09-08 15:57:25	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 15:58:19	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 240 seconds)
2013-09-08 15:58:24	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-09-08 15:58:42	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 15:58:55	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 260 seconds)
2013-09-08 15:59:24	<--	rgr (~user@g224129178.adsl.alicedsl.de) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-08 15:59:38	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-08 16:00:51	<--	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 16:01:21	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-08 16:01:31	k00mi	niteria: try putting the ! in front of the paren
2013-09-08 16:01:44	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: leaving)
2013-09-08 16:01:57	-->	idk (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 16:02:08	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 16:02:13	-->	davorb-cellphone (~davorb-ce@194.47.245.35) has joined #haskell
2013-09-08 16:02:16	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 16:02:21	--	idk is now known as Guest19580
2013-09-08 16:02:29	merijn	mroman: How is System.Directory broken?
2013-09-08 16:02:39	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-08 16:02:40	<--	Guest19580 (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Client Quit)
2013-09-08 16:03:09	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-09-08 16:03:18	-->	nulvinge (~idk@46.59.35.6) has joined #haskell
2013-09-08 16:03:21	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 16:03:31	<--	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-08 16:03:57	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-08 16:04:00	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-08 16:04:03	-->	anRch (~markmilli@173-9-87-73-NewEngland.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 16:04:11	mroman	merijn: There's no Prelude.catch
2013-09-08 16:04:19	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 16:04:23	niteria	k00mi: same error
2013-09-08 16:04:26	k00mi	niteria: actually, I don't think you can have a ! there at all
2013-09-08 16:04:36	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 16:04:37	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 256 seconds)
2013-09-08 16:04:47	epta	 http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-rpar-rseq where are these `time: 0.00s' came from? > The first timestamp is printed when the rpar/rseq fragment returns, and the second timestamp is printed when the last calculation finishes
2013-09-08 16:04:52	epta	But how?
2013-09-08 16:05:16	mroman	I can't install squat anymore
2013-09-08 16:05:16	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-08 16:05:16	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Ping timeout: 264 seconds)
2013-09-08 16:05:19	mroman	everything is broken
2013-09-08 16:06:00	k00mi	niteria: you can only annotate fields in constructors
2013-09-08 16:06:01	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-08 16:06:24	<--	bytbox (~s@seas.0395.apng.wireless-pennnet.upenn.edu) has quit (Remote host closed the connection)
2013-09-08 16:06:45	niteria	docs for MVar suggest strict-concurrency, but it fails to install
2013-09-08 16:06:45	-->	CaptainLex (~kvirc@174-20-73-117.mpls.qwest.net) has joined #haskell
2013-09-08 16:07:17	merijn	mroman: Are you by any chance building 1.2.0.0 with 7.4?
2013-09-08 16:08:03	merijn	mroman: Or really just which GHC and which version of directory? Sounds like your using a version that's too old with a compiler that's to new or vice versa
2013-09-08 16:08:16	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-09-08 16:08:38	mroman	i also get linker errors :(
2013-09-08 16:08:59	merijn	mroman: The way to nuke your install (on linux) is "rm -rf ~/.ghc"
2013-09-08 16:09:12	kuribas	arkeet: Isn't the derivative of tan = 1/cos^2 x?
2013-09-08 16:09:27	donri	epta: see rpar.hs in http://hackage.haskell.org/package/parconc-examples
2013-09-08 16:09:46	merijn	mroman: For future reference, the correct way to unregister a packge is "ghc-pkg unregister pkg-name"
2013-09-08 16:09:55	mroman	http://codepad.org/bvV2gkBK
2013-09-08 16:09:59	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-08 16:10:30	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-09-08 16:10:58	merijn	mroman: How did you install things? Platform? Or some distro's package manager?
2013-09-08 16:11:21	-->	bestzdneirf (petterrav@2001:470:6bd1::) has joined #haskell
2013-09-08 16:11:37	mroman	make install for ghc-7.6.3 and cabal
2013-09-08 16:12:04	mroman	and the platform
2013-09-08 16:12:18	mroman	but I deleted ~./caba/lib and  ~/.ghc
2013-09-08 16:12:24	mroman	and then did make install for ghc again
2013-09-08 16:12:36	-->	nulvinge_ (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 16:12:36	<--	nulvinge_ (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Client Quit)
2013-09-08 16:12:38	mroman	and installed the rest through ~/.cabal/bin/cabal
2013-09-08 16:12:38	<--	nulvinge (~idk@46.59.35.6) has quit (Quit: leaving)
2013-09-08 16:13:10	merijn	Curious
2013-09-08 16:13:18	-->	jonkri (~jonkri@94.234.185.225) has joined #haskell
2013-09-08 16:13:19	<--	jonkri (~jonkri@94.234.185.225) has quit (Changing host)
2013-09-08 16:13:19	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-08 16:13:20	merijn	Did it ask to do reinstall/forced installs?
2013-09-08 16:13:27	epta	donri: thanks, forgot about it
2013-09-08 16:13:41	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-08 16:13:41	mroman	merijn: not after i deleted everything
2013-09-08 16:13:43	mroman	before, yes
2013-09-08 16:13:48	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 16:14:16	-->	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 16:14:31	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Client Quit)
2013-09-08 16:14:40	mroman	there are currently two versions of bytestring installed
2013-09-08 16:14:51	-->	dialelo (~dialelo@77.209.106.193) has joined #haskell
2013-09-08 16:15:17	-->	guilhon (~guilhon@187.114.117.100) has joined #haskell
2013-09-08 16:15:17	mroman	some package requires an older version of bytestring
2013-09-08 16:15:24	<--	dialelo (~dialelo@77.209.106.193) has quit (Client Quit)
2013-09-08 16:15:39	merijn	reinstall/forced install are usually one way trips into breakage town, and as cabal says you shouldn't do them unless you know what you're doing
2013-09-08 16:15:50	watermind	so ":i Data.Aeson.Types.Internal.Parser"  results in "Failed to load interface for `Data.Aeson.Types.Internal   it is a hidden module in the package `aeson-0.6.1.0'"
2013-09-08 16:15:52	merijn	mroman: Yeah, there's no real way to fix that, other than nuke it and start over
2013-09-08 16:16:33	watermind	I don't see how that makes sense... the type Data.Aeson.Types.Internal  is exposed since it is used in e.g. (.:)
2013-09-08 16:16:53	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-08 16:16:56	mroman	merijn: I already tried that :)
2013-09-08 16:16:58	watermind	also looking at http://hackage.haskell.org/packages/archive/aeson/0.6.1.0/doc/html/src/Data-Aeson-Types-Internal.html it seems to be exported
2013-09-08 16:17:20	donri	watermind: the module itself isn't "exposed", though
2013-09-08 16:17:26	donri	watermind: maybe you want Data.Aeson.Parser
2013-09-08 16:17:32	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-08 16:17:40	mroman	the unix package for example requires bytestring-0.9.2.1
2013-09-08 16:17:45	mroman	and cgi requires 10.0.2
2013-09-08 16:17:48	watermind	donri: right I see
2013-09-08 16:17:59	 *	hackagebot keter 1.0.1 - Web application deployment manager, focusing on Haskell web frameworks  http://hackage.haskell.org/package/keter-1.0.1 (MichaelSnoyman)
2013-09-08 16:17:59	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-08 16:18:00	mroman	also
2013-09-08 16:18:01	-->	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has joined #haskell
2013-09-08 16:18:06	mroman	that error only occurrs with runghc
2013-09-08 16:18:07	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-08 16:18:13	mroman	compiling and ghci itself works apparentely
2013-09-08 16:18:28	donri	watermind: or Data.Aeson.Types
2013-09-08 16:18:32	watermind	donri: but the type of (.:) is   ... -> aeson-0.6.1.0:Data.Aeson.Types.Internal.Parser a
2013-09-08 16:18:49	mroman	but i still wonder what to use for web.encodings
2013-09-08 16:18:56	donri	watermind: Data.Aeson.Types exports the Parser type
2013-09-08 16:19:06	merijn	mroman: Well, either you need to downgrade your cgi version to one that works with an older bytestring, or you can do "cabal unpack unix", edit the cabal file to use a newer bytestring version and install that. Usually the upper limits are rather conservative and it will "Just Work", although sometimes it requires some fixing to be compatible again
2013-09-08 16:19:07	<--	yano (yano@freenode/staff/yano) has quit (Remote host closed the connection)
2013-09-08 16:19:17	<--	AleXoundOS_ (~AleXoundO@188.244.39.153) has quit (Quit: Leaving)
2013-09-08 16:19:38	wojtekM_	Is it possible to have a type local to function scope?
2013-09-08 16:19:52	mroman	I thought using different versions of the same package is possible?
2013-09-08 16:19:54	watermind	donri: I understand, but then why is the type in GHCi displyed as aeson-0.6.1.0:Data.Aeson.Types.Internal.Parser a ? rather than  Data.Aeson.Types which is exporting Parser?
2013-09-08 16:20:05	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-08 16:20:09	donri	watermind: because that's where it's actually defined
2013-09-08 16:20:25	statusfailed	Are there any good lisp tutorials with a more theoretical bent?
2013-09-08 16:20:26	Makoryu	mroman: You can have different versions installed alongside each other. But when loading and linking them, one would replace the other
2013-09-08 16:20:30	-->	normanrichards (~normanric@64.221.15.242.ptr.us.xo.net) has joined #haskell
2013-09-08 16:20:48	watermind	donri: hmm this is the kind of info I'd expect to get on further inspection, e.g. with :i type
2013-09-08 16:21:00	merijn	Makoryu: That won't work if he has two libraries using different versions in the same program
2013-09-08 16:21:31	-->	scripty (~scripty@117.221.121.26) has joined #haskell
2013-09-08 16:21:45	<--	AleXoundOS (~AleXoundO@188.244.39.153) has quit (Quit: Leaving)
2013-09-08 16:21:50	merijn	mroman: It is, but if they're different bytestrings and your program has two different versions of bytestrings flowing through it, that won't work
2013-09-08 16:21:53	donri	watermind: agreed, it could be better. but you can import the same thing from multiple places though (if they re-export) so it has to call *some* module the canonical place. so it uses the defining module for that.
2013-09-08 16:21:55	Makoryu	merijn: Sorry, should have been clear. The reason you can't do that is because *if* this was allowed, one *would* replace the other, or other bad things would happen
2013-09-08 16:21:58	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 16:22:03	wojtekM_	f = let type A = Int in 3
2013-09-08 16:22:05	wojtekM_	?
2013-09-08 16:22:05	mroman	hm
2013-09-08 16:22:07	-->	AleXoundOS (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-08 16:22:09	mroman	ghci is broken, too
2013-09-08 16:22:10	<--	elediaz (~quassel@90.173.212.151) has quit (Remote host closed the connection)
2013-09-08 16:22:30	mroman	but compiling still works :D
2013-09-08 16:22:33	statusfailed	ooh, "Chaitin the Unknowable" seems to be in the right area
2013-09-08 16:22:45	mroman	yet
2013-09-08 16:22:57	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-08 16:23:38	kuribas	arkeet: Never mind.
2013-09-08 16:23:59	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-08 16:23:59	watermind	donri: so you're saying GHCi opts for reducing every type to some canonical representation and always uses that, am I understanding correctly?
2013-09-08 16:24:11	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-08 16:25:21	watermind	I can see how that helps recognizing if two types/modules/whatever are the same... but it complicates being able to actually referring to them and gathering more info
2013-09-08 16:25:38	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Remote host closed the connection)
2013-09-08 16:25:49	Makoryu	(http://hackage.haskell.org/packages/archive/graphviz/2999.16.0.0/doc/html/src/Data-GraphViz-Attributes-Complete.html <- This took ages to compile on my machine but I have no idea why.)
2013-09-08 16:25:51	merijn	donri: It only displays like that for types that aren't directly imported, I think
2013-09-08 16:25:54	merijn	eh
2013-09-08 16:25:58	merijn	s/donri/watermind
2013-09-08 16:26:08	watermind	merijn: right
2013-09-08 16:26:23	-->	scripty_ (~scripty@79.141.160.64) has joined #haskell
2013-09-08 16:26:27	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-08 16:26:35	-->	CaptainK (~CaptainK@181.178.235.106) has joined #haskell
2013-09-08 16:26:38	merijn	wojtekM_: And what would you do with A in that example?
2013-09-08 16:27:21	watermind	is there an easy way in such cases to tell where the type is being imported from, rather than where it is originally defined?
2013-09-08 16:27:28	<--	scripty (~scripty@117.221.121.26) has quit (Ping timeout: 264 seconds)
2013-09-08 16:27:59	 *	hackagebot markdown 0.1.6.1 - Convert Markdown to HTML, with XSS protection  http://hackage.haskell.org/package/markdown-0.1.6.1 (MichaelSnoyman)
2013-09-08 16:28:30	-->	danald (~danald@e179071204.adsl.alicedsl.de) has joined #haskell
2013-09-08 16:29:00	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-08 16:30:40	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-08 16:30:51	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-08 16:31:02	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-08 16:31:11	-->	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has joined #haskell
2013-09-08 16:31:57	wojtekM_	merijn: I need to instantiate a parser within a parser. For some reason, this litle one can not be part of the big one
2013-09-08 16:32:02	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 16:32:27	<--	CaptainK (~CaptainK@181.178.235.106) has quit (Read error: Connection reset by peer)
2013-09-08 16:32:56	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-08 16:33:50	merijn	wojtekM_: And what does the type have to do with that?
2013-09-08 16:34:25	watermind	it's not just me who gets confused with this,  define,    f x = (.:) x  , then use ghc-mod M-t to fill in the type signature, and the resulting type is not valid
2013-09-08 16:35:08	<--	determinant_ (~determina@183.83.58.77) has quit (Ping timeout: 268 seconds)
2013-09-08 16:35:34	--	latro`a_ is now known as latro`a
2013-09-08 16:35:50	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-08 16:35:50	wojtekM_	merijn: my big parser is: type Parser = ParsecT ByteString TheState IO
2013-09-08 16:36:21	wojtekM_	merijn: my little I want to be just: type Parser = ParsecT ByteString TheState IO
2013-09-08 16:37:02	merijn	Those have the same type?
2013-09-08 16:37:03	wojtekM_	merijn: I can find my way around, but I just wanted to know if something like type local to function exists. I guess the answer is no
2013-09-08 16:37:18	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 16:37:27	wojtekM_	merijn: different types
2013-09-08 16:37:46	Makoryu	wojtekM_: Are they different ByteStrings, or...?
2013-09-08 16:38:11	Makoryu	If by "TheState" you mean the same state representation for both of them, I don't see the difference
2013-09-08 16:38:19	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-08 16:38:38	<--	xexonixxexillion (~Adium@130.56.82.66) has quit (Remote host closed the connection)
2013-09-08 16:38:53	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-08 16:39:08	-->	morazow_ (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 16:40:28	wojtekM_	I neeed to read length, then read a string of the length, memoize the string in TheState, and then finally parse the string
2013-09-08 16:40:32	-->	red___ (~red@184.152.11.142) has joined #haskell
2013-09-08 16:40:43	-->	CaptainK (~CaptainK@181.179.50.58) has joined #haskell
2013-09-08 16:40:58	-->	nilsi (~nilsi@46.246.22.15) has joined #haskell
2013-09-08 16:41:59	wojtekM_	I can analyze the string ad-hoc, or use regex, but the most elegant way would be to run a small internal parser on it
2013-09-08 16:42:15	<--	normanrichards (~normanric@64.221.15.242.ptr.us.xo.net) has quit (Ping timeout: 264 seconds)
2013-09-08 16:42:21	wojtekM_	but the string has already been consumed
2013-09-08 16:42:27	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-08 16:42:31	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-08 16:42:51	<--	morazow (~morazow@p548A5F98.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-08 16:42:52	<--	CaptainK (~CaptainK@181.179.50.58) has quit (Read error: Connection reset by peer)
2013-09-08 16:43:45	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 16:44:43	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 16:45:26	wojtekM_	and I didn't want to pollute the namespace with the small parser type, as it is only going to bemeaningful within a small scope
2013-09-08 16:45:33	<--	kallisti (~eris@wikipedia/The-Prophet-Wizard-of-the-Crayon-Cake) has quit (Quit: Lost terminal)
2013-09-08 16:46:16	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-08 16:46:22	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-08 16:46:28	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 16:46:49	-->	ihm1_ (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-08 16:46:49	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-08 16:46:50	--	ihm1_ is now known as ihm1
2013-09-08 16:47:31	merijn	Why not just write out the full type if you're only gonna use it once?
2013-09-08 16:48:00	 *	hackagebot yaml 0.8.5 - Support for parsing and rendering YAML documents.  http://hackage.haskell.org/package/yaml-0.8.5 (MichaelSnoyman)
2013-09-08 16:48:39	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Read error: Operation timed out)
2013-09-08 16:49:25	wojtekM_	Uhm, because... ;-)
2013-09-08 16:49:37	wojtekM_	Okay, thanks!
2013-09-08 16:50:25	<--	tefter (~tefter@87.250.40.232) has quit (Remote host closed the connection)
2013-09-08 16:50:28	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 16:51:07	-->	AndChat740025 (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 16:51:12	<--	guilhon (~guilhon@187.114.117.100) has quit (Quit: Leaving...)
2013-09-08 16:52:10	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-08 16:52:39	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-08 16:53:00	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 16:53:20	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-08 16:53:58	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 16:54:41	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 16:55:29	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 16:56:51	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 16:56:52	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 16:58:06	-->	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has joined #haskell
2013-09-08 16:58:32	-->	shesek (~shesek@77.125.151.48) has joined #haskell
2013-09-08 16:58:36	-->	kobain_ (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-08 16:58:37	<--	kobain_ (~kobian@unaffiliated/kobain) has quit (Remote host closed the connection)
2013-09-08 16:58:43	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 16:59:03	<--	kobain (~kobian@unaffiliated/kobain) has quit (Ping timeout: 256 seconds)
2013-09-08 16:59:37	-->	guilhon (~guilhon@187.114.117.100) has joined #haskell
2013-09-08 17:00:15	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 17:01:18	-->	riley__ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-08 17:01:37	<--	AndChat740025 (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has quit (Quit: Bye)
2013-09-08 17:01:47	-->	babalone (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 17:03:00	 *	hackagebot wai-extra 1.3.4.5 - Provides some basic WAI handlers and middleware.  http://hackage.haskell.org/package/wai-extra-1.3.4.5 (MichaelSnoyman)
2013-09-08 17:03:04	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Quit: Byez...SeeSoon!EnjoyTheSilence)
2013-09-08 17:03:28	<--	exicer (~exicer@host81-149-102-120.in-addr.btopenworld.com) has quit (Ping timeout: 264 seconds)
2013-09-08 17:04:08	<--	phienone (~ph@nappo.lnet.fi) has quit (Ping timeout: 246 seconds)
2013-09-08 17:04:14	red___	how do i truncate (/) on Float?
2013-09-08 17:04:48	red___	[2.0833334e-2,2.0,96.0]
2013-09-08 17:05:04	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Read error: Operation timed out)
2013-09-08 17:06:11	<--	scripty_ (~scripty@79.141.160.64) has quit (Read error: Connection reset by peer)
2013-09-08 17:06:12	red___	> let x = [2.0,96.0] in ((\[fst,scnd] -> (fst / scnd)) x : x)
2013-09-08 17:06:13	lambdabot	  [2.0833333333333332e-2,2.0,96.0]
2013-09-08 17:06:30	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-08 17:06:30	-->	scripty (~scripty@79.141.160.64) has joined #haskell
2013-09-08 17:06:34	wojtekM_	merijn: It turned out that I don't even have to write down the type at all.
2013-09-08 17:08:40	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Ping timeout: 256 seconds)
2013-09-08 17:10:46	-->	estultic1a (~estultici@190.149.65.168) has joined #haskell
2013-09-08 17:10:48	--	Taneb is now known as Tanneb
2013-09-08 17:11:14	--	Tanneb is now known as Taneb
2013-09-08 17:12:14	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-08 17:12:49	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-08 17:13:14	<--	CaptainLex (~kvirc@174-20-73-117.mpls.qwest.net) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-08 17:13:21	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-08 17:13:29	riley__	If I have a list of 'State a ()' and I want to evaluate them all and get the final state out, how do I do it?
2013-09-08 17:13:59	<--	estulticia (~estultici@unaffiliated/estulticia) has quit (Ping timeout: 268 seconds)
2013-09-08 17:14:13	-->	burp_ (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-08 17:14:36	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-08 17:14:49	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Ping timeout: 240 seconds)
2013-09-08 17:15:06	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 17:15:21	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-08 17:15:39	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 17:16:04	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2013-09-08 17:16:05	paolino	:t State
2013-09-08 17:16:06	lambdabot	    Not in scope: data constructor `State'
2013-09-08 17:16:06	lambdabot	    Perhaps you meant `StateT' (imported from Control.Monad.State)
2013-09-08 17:16:10	bjorkintosh	so here's a question.
2013-09-08 17:16:39	bjorkintosh	since it is possible to use the lambda symbol as a prompt, why is it that we still type <= when we could be typing the neater symbol?
2013-09-08 17:17:02	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 17:17:26	<--	morazow_ (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-08 17:17:37	Taneb	bjorkintosh, most people don't have the neater symbol on their keyboards
2013-09-08 17:17:39	bergmark	for the same reason you wrote "the neater symbol" rather than actually typing it? :)
2013-09-08 17:17:47	bjorkintosh	hahahah
2013-09-08 17:17:57	bjorkintosh	touche(')
2013-09-08 17:17:59	Taneb	@hackage base-unicode-symbols
2013-09-08 17:17:59	lambdabot	http://hackage.haskell.org/package/base-unicode-symbols
2013-09-08 17:18:17	bjorkintosh	does ghc understand the unicode symbols?
2013-09-08 17:18:28	bergmark	bjorkintosh: yes
2013-09-08 17:18:34	bjorkintosh	hmm. nice.
2013-09-08 17:18:37	Taneb	It parses them but doesn't associate them with the ASCII versions
2013-09-08 17:18:46	hpc	the haskell specification says they must be understood
2013-09-08 17:18:46	Taneb	But check out that package I just linked
2013-09-08 17:18:55	-->	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 17:19:06	bjorkintosh	Taneb, is it included in the haskell-platform?
2013-09-08 17:19:12	Taneb	No
2013-09-08 17:19:24	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-08 17:19:31	-->	ksf (~ksf@d033138.adsl.hansenet.de) has joined #haskell
2013-09-08 17:19:37	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-08 17:20:01	bjorkintosh	okay.
2013-09-08 17:20:09	bjorkintosh	that would be neat.
2013-09-08 17:20:10	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 17:20:35	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 260 seconds)
2013-09-08 17:20:40	<--	anRch (~markmilli@173-9-87-73-NewEngland.hfc.comcastbusiness.net) has quit (Quit: anRch)
2013-09-08 17:21:58	-->	determinant_ (~determina@183.83.58.77) has joined #haskell
2013-09-08 17:21:58	Taneb	"cabal install base-unicode-symbols --enable-documentation --haddock-hyperlink-source"
2013-09-08 17:22:10	<--	nilsi (~nilsi@46.246.22.15) has quit (Remote host closed the connection)
2013-09-08 17:22:28	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-08 17:22:28	-->	nilsi (~nilsi@61.172.24.42) has joined #haskell
2013-09-08 17:22:33	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-08 17:22:34	paolino	:t sequence_ :: [State a ()] -> State a () -- riley__
2013-09-08 17:22:34	lambdabot	[State a ()] -> State a ()
2013-09-08 17:22:56	bjorkintosh	cabal update first, man.
2013-09-08 17:23:01	bjorkintosh	always update first.
2013-09-08 17:23:13	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-08 17:23:25	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-08 17:24:04	bjorkintosh	that was fast.
2013-09-08 17:24:31	<--	artyomkazak (~artyomkaz@host-120-152-66-217.spbmts.ru) has quit (Ping timeout: 264 seconds)
2013-09-08 17:24:33	merijn	Does anyone know how to stop hdevtools from choking on a runhaskell shebang?
2013-09-08 17:24:34	-->	markcw (~jack@2601:d:1680:3a9:6c63:c533:a799:c782) has joined #haskell
2013-09-08 17:24:35	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 17:25:06	riley__	Perfect! Thanks. Kept trying to compose w/ (>>) but failed.
2013-09-08 17:25:06	merijn	bjorkintosh: I would actually recommend not cabal updating unless strictly necessary for some new package you need
2013-09-08 17:25:08	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-09-08 17:25:24	Taneb	bjorkintosh, that library only depends on base and hasn't been changed in over a year. You can get away without cabal updating with it
2013-09-08 17:25:42	bjorkintosh	ah i see.
2013-09-08 17:26:06	bjorkintosh	it is not possible to tab complete hackage names?
2013-09-08 17:26:09	merijn	I try to update as little as possible after installing platform, seems to keep things nice and stable
2013-09-08 17:26:19	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Ping timeout: 268 seconds)
2013-09-08 17:26:28	bjorkintosh	ye gads i might have goofed on that one.
2013-09-08 17:26:39	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 264 seconds)
2013-09-08 17:26:56	geekosaur	bjorkintosh, I doubt anyone has assembled a bash-completion package for it
2013-09-08 17:27:15	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-08 17:27:17	Tekmo	bjorkintosh: It use to tab complete, if I remember correctly, but it was really slow
2013-09-08 17:27:33	<--	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has quit (Ping timeout: 268 seconds)
2013-09-08 17:27:38	Tekmo	bjorkintosh: So I would always regret hitting tab by mistake
2013-09-08 17:27:40	<--	lemao_ (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 17:27:54	bjorkintosh	oh i see.
2013-09-08 17:28:11	deech	I'm trying to write Storable instances for two datatypes where one contains the other: https://gist.github.com/deech/6485616. Unfortunately I'm getting compiler errors. Any help is appreciated.
2013-09-08 17:28:25	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-08 17:28:44	Tekmo	I think `cabal update` is safe as long as you know how to maintain your package database, meaning that you know how to unregister packages and remove conflicts
2013-09-08 17:28:59	-->	nilsi (~nilsi@5.254.150.81) has joined #haskell
2013-09-08 17:30:19	donri	Tekmo: how far is pipes-bytestring from a release?
2013-09-08 17:30:31	Tekmo	donri: A couple of months
2013-09-08 17:30:35	Tekmo	donri: I need to graduate first
2013-09-08 17:30:39	donri	:)
2013-09-08 17:30:41	Tekmo	:)
2013-09-08 17:30:42	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-08 17:30:46	Tekmo	There are still a few things missing
2013-09-08 17:30:56	Tekmo	The important missing bits are splitter functions in the style of `pipes-parse`
2013-09-08 17:31:07	merijn	Tekmo: Graduation is overrated! :p
2013-09-08 17:31:09	Tekmo	:)
2013-09-08 17:31:23	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-08 17:31:24	<--	n00dle (~n00dle@unaffiliated/n00dle) has quit (Ping timeout: 240 seconds)
2013-09-08 17:31:28	-->	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-08 17:31:56	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 17:32:17	haasn	what's the deal with the Int parameter on everything in pipes-network?
2013-09-08 17:32:22	-->	exicer (~exicer@host86-147-11-129.range86-147.btcentralplus.com) has joined #haskell
2013-09-08 17:32:25	haasn	I thought explicit buffering would be abstracted out by the interface
2013-09-08 17:32:48	haasn	or am I misunderstanding how things work? I just want to more or less lazily process lines the user sends me, without using actual lazy IO
2013-09-08 17:33:15	<--	Spockz (~alessandr@thalion.alessandrovermeulen.me) has quit (Remote host closed the connection)
2013-09-08 17:33:40	Tekmo	haasn: I'm not entirely sure
2013-09-08 17:35:24	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Read error: Connection reset by peer)
2013-09-08 17:35:33	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 17:35:57	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 17:36:02	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 17:36:04	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-08 17:36:22	-->	normanrichards (~normanric@mobile-166-147-065-115.mycingular.net) has joined #haskell
2013-09-08 17:36:34	-->	bitonic (~user@ppp-188-144.27-151.libero.it) has joined #haskell
2013-09-08 17:37:03	-->	alessand1o (~alessandr@thalion.alessandrovermeulen.me) has joined #haskell
2013-09-08 17:37:22	Tekmo	deech: What does the #pointer declaration do?
2013-09-08 17:37:54	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-08 17:38:01	 *	hackagebot xml-hamlet 0.4.0.5 - Hamlet-style quasiquoter for XML content  http://hackage.haskell.org/package/xml-hamlet-0.4.0.5 (MichaelSnoyman)
2013-09-08 17:38:46	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-09-08 17:38:55	Tekmo	deech: Are you using `c2hs`?
2013-09-08 17:38:57	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 17:40:16	deech	Tekmo: yes. I've updated the gist with the generated output.
2013-09-08 17:40:17	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-08 17:40:52	Tekmo	deech: Have you tried `hsc2hs`?  `cabal` integrates with that to automatically run `hsc2hs` on any `*.hsc` files
2013-09-08 17:41:09	merijn	Or even better
2013-09-08 17:41:11	merijn	c2hsc
2013-09-08 17:41:16	--	alessand1o is now known as Spockz
2013-09-08 17:41:21	merijn	Which parses C files and generates hsc from them :)
2013-09-08 17:41:35	Tekmo	Seriously?
2013-09-08 17:42:01	Tekmo	Wow, that's really useful
2013-09-08 17:42:02	merijn	Yes
2013-09-08 17:42:03	deech	Tekmo: No I've haven't tried that.
2013-09-08 17:42:21	<--	riley__ (~riley@75-170-137-73.desm.qwest.net) has quit (Quit: Goodbye)
2013-09-08 17:42:31	<--	bitonic (~user@ppp-188-144.27-151.libero.it) has quit (Ping timeout: 260 seconds)
2013-09-08 17:42:41	deech	merijn: Does c2hsc have hooks to allow me to control naming?
2013-09-08 17:42:46	monochrom	Taneb, bjorkintosh: you forgot --enable-library-profiling
2013-09-08 17:42:49	merijn	Tekmo: It's not flawless, it doesn't get really complex C headers/files completely right, but if you're lucky it does all the work, and if you're unlucky it does *most* of the works
2013-09-08 17:42:55	donri	i think c2hs is supposed to be integrated with cabal too somehow
2013-09-08 17:43:02	 *	hackagebot cookbook 0.1.0.0 - A silver-platter library in Haskell.  http://hackage.haskell.org/package/cookbook-0.1.0.0 (NatePisarski)
2013-09-08 17:43:15	merijn	deech: It doesn't have any hooks atm, it's just a binary
2013-09-08 17:43:19	donri	merijn: i guess i'm really unlucky then because i couldn't get it to do anything :p
2013-09-08 17:43:21	deech	I have c2hs integrated with Cabal,just add it to the `build-tools` flag.
2013-09-08 17:43:47	merijn	deech: I manually hooked c2hsc into cabal: https://github.com/merijn/SNet2.0/blob/master/Setup.hs
2013-09-08 17:43:51	watermind	to perform substitutions of variables in AST's, is it common to abstract the structure of the Var field and use a monad instance?
2013-09-08 17:43:59	-->	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has joined #haskell
2013-09-08 17:44:01	-->	fft (~fft@69.159.167.10) has joined #haskell
2013-09-08 17:44:10	<--	eb4890 (~hhh@2001:470:1f09:18c8:e89d:151c:4bc9:fd68) has quit (Ping timeout: 245 seconds)
2013-09-08 17:44:19	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 17:44:36	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has left #haskell
2013-09-08 17:44:54	Tekmo	I think so.  Isn't there some paper about doing this?
2013-09-08 17:44:59	watermind	and then  ast >>= subst_fun
2013-09-08 17:45:11	watermind	Tekmo: I don't know...
2013-09-08 17:45:12	-->	bitonic (~user@ppp-188-144.27-151.libero.it) has joined #haskell
2013-09-08 17:45:29	<--	nilsi (~nilsi@5.254.150.81) has quit (Ping timeout: 256 seconds)
2013-09-08 17:45:33	Tekmo	Well, I found this: http://blog.sigfpe.com/2006/11/variable-substitution-gives.html
2013-09-08 17:45:34	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-08 17:45:44	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-08 17:45:44	<--	rnons (~rnons@183.152.58.163) has quit (Read error: Connection reset by peer)
2013-09-08 17:46:21	<--	scripty (~scripty@79.141.160.64) has quit (Read error: Connection reset by peer)
2013-09-08 17:46:46	-->	scripty (~scripty@79.141.160.64) has joined #haskell
2013-09-08 17:47:02	<--	edsko (~edsko@80.111.60.101) has quit (Quit: This computer has gone to sleep)
2013-09-08 17:47:19	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-09-08 17:47:29	donri	what kind of substitution? https://www.fpcomplete.com/user/edwardk/bound
2013-09-08 17:48:03	 *	hackagebot cookbook 0.1.1.0 - An independent library of common haskell operations.  http://hackage.haskell.org/package/cookbook-0.1.1.0 (NatePisarski)
2013-09-08 17:48:23	jmcarthur	watermind: it is pretty common
2013-09-08 17:48:28	watermind	Tekmo: thanks, I didn't knwo about this paper
2013-09-08 17:48:35	watermind	know*
2013-09-08 17:48:46	Tekmo	Yeah, the post mentions the paper by Uustalu and Venee
2013-09-08 17:48:51	jmcarthur	watermind: i highly recommend looking at the bound library donri linked
2013-09-08 17:49:05	jmcarthur	watermind: if you need scoping, at least
2013-09-08 17:49:27	jmcarthur	ah, he linked a tutorial instead of a library, but whatever :)
2013-09-08 17:49:40	<--	bitonic (~user@ppp-188-144.27-151.libero.it) has quit (Ping timeout: 260 seconds)
2013-09-08 17:49:51	watermind	donri: jmcarthur: thanks... oh the number of my "to read" articles by  Edward is starting to pile up
2013-09-08 17:49:52	donri	it's a tutorial for a library :)
2013-09-08 17:50:07	<--	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (Ping timeout: 250 seconds)
2013-09-08 17:50:41	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 17:51:08	<--	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has quit (Read error: No route to host)
2013-09-08 17:51:09	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 17:53:20	<--	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has quit (Quit: pgiarrusso)
2013-09-08 17:53:51	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-08 17:53:58	--	hdevalence|away is now known as hdevalence
2013-09-08 17:54:13	-->	nilsi (~nilsi@61.172.24.42) has joined #haskell
2013-09-08 17:54:17	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-09-08 17:54:31	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 17:55:02	--	hdevalence is now known as hdevalence|away
2013-09-08 17:55:07	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 260 seconds)
2013-09-08 17:55:49	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2013-09-08 17:55:56	-->	erisco (~erisco@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-08 17:56:25	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-09-08 17:56:42	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-08 17:56:45	-->	n00dle (~n00dle@unaffiliated/n00dle) has joined #haskell
2013-09-08 17:57:57	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-08 17:59:09	-->	ahill-89 (~xander@99.36.41.91) has joined #haskell
2013-09-08 18:00:33	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-08 18:00:41	<--	shesek (~shesek@77.125.151.48) has quit (Write error: Broken pipe)
2013-09-08 18:00:45	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has left #haskell
2013-09-08 18:02:30	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Ping timeout: 256 seconds)
2013-09-08 18:02:52	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 18:03:06	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 18:03:20	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 18:03:38	bennofs	context reduction stack overflow :O
2013-09-08 18:04:08	<--	ahill-89 (~xander@99.36.41.91) has quit (Ping timeout: 260 seconds)
2013-09-08 18:04:40	deech	What's the best way to bind a C array if the length is unknown?
2013-09-08 18:05:52	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 18:06:00	Makoryu	deech: Unknown at compile time, or unknown at runtime?
2013-09-08 18:06:23	-->	eldariof (~CLD@188.168.234.54) has joined #haskell
2013-09-08 18:06:41	-->	ahill-89 (~xander@99.36.41.91) has joined #haskell
2013-09-08 18:06:42	donri	there's peekArray0 or something like that for arrays with a terminator
2013-09-08 18:06:43	deech	Makoryu: Unknown at compile time, it's just a A* which I want to marshall in to [A].
2013-09-08 18:07:09	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-08 18:07:31	--	sm is now known as sm-afk
2013-09-08 18:07:35	-->	thunderrd (~thunderrd@119.42.79.179) has joined #haskell
2013-09-08 18:07:36	merijn	Foreigun.Util.Marshall
2013-09-08 18:07:41	Tekmo	deech: Then you need some other value to store length or a sentinel value to terminate the array like \0
2013-09-08 18:07:54	merijn	wait, my bad, wrong name
2013-09-08 18:08:17	deech	Can't I just keep iterating the pointer by some offset until it points to nothing?
2013-09-08 18:08:20	merijn	Foreign.Marhsall and Foreign.Marshall.Array
2013-09-08 18:08:20	-->	qwitwa (~josh@host86-148-39-111.range86-148.btcentralplus.com) has joined #haskell
2013-09-08 18:08:25	<--	hiroakip (~hiroaki@p5DC628D4.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-08 18:08:27	donri	deech: that doesn't make sense though
2013-09-08 18:08:30	merijn	deech: "points to nothing", wut?
2013-09-08 18:08:33	monochrom	force the C side to tell you length
2013-09-08 18:08:43	donri	deech: this is why buffer overflows are a security problem you know
2013-09-08 18:08:45	merijn	deech: What do you envision "points to nothing" to mean?
2013-09-08 18:09:07	Tekmo	deech: He means using a sentinel value that terminates the array
2013-09-08 18:09:13	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Read error: Connection reset by peer)
2013-09-08 18:09:16	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-08 18:09:17	-->	phyrex1an1 (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-08 18:09:17	<--	phyrex1an1 (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Client Quit)
2013-09-08 18:09:20	Tekmo	deech: However, I'd recommend storing the length alongside the array
2013-09-08 18:09:21	deech	Right, like a NULL.
2013-09-08 18:09:23	donri	deech: try peekArray nullPtr
2013-09-08 18:09:31	merijn	Pointers always point to something, unfortunately that something may not be something you're allowed to see
2013-09-08 18:09:32	donri	deech: uh, peekArray* nullPtr
2013-09-08 18:09:35	Tekmo	Like donri said, it's less secure to use a null value to terminate the array
2013-09-08 18:09:36	donri	deech: uh, peekArray0 nullPtr
2013-09-08 18:09:36	donri	gah
2013-09-08 18:09:41	donri	what's wrong with me
2013-09-08 18:09:43	deech	I'm not using the right terminology. I'm a C newbie.
2013-09-08 18:09:48	tpsinnem	hey -- is there a name for a tree structure, where each leaf is associated with a numerical value, and each internal node is associated with the sum of the values of its children?
2013-09-08 18:09:48	merijn	deech: Then you need to be sure the array is terminated with NULL, is it?
2013-09-08 18:09:49	Makoryu	Oh boy
2013-09-08 18:10:03	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-08 18:10:05	red___	if i want to build a graph, is IntMap a good choice..especially if i want to pull out edges with least weight?
2013-09-08 18:10:14	<--	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has quit (Read error: Operation timed out)
2013-09-08 18:10:29	deech	merijn: I don't know. I'd have to check the source. Right now it's just a pointer to the start of the array.
2013-09-08 18:10:39	deech	Makoryu: We all have to start somewhere.
2013-09-08 18:10:51	merijn	deech: There is only two ways to find the end of an array in C: 1) store the length in an int 2) have the last element be a fixed value
2013-09-08 18:10:51	Tekmo	red___: Why not `Data.Graph`?
2013-09-08 18:10:54	Makoryu	deech: Not a problem. Just note that C arrays don't know how long they are
2013-09-08 18:11:02	red___	Tekmo: because i don't know about that !
2013-09-08 18:11:07	Tekmo	red___: :)
2013-09-08 18:11:08	Makoryu	deech: They're nude pointers
2013-09-08 18:11:10	-->	Zearen (~zearen@c-98-239-129-128.hsd1.pa.comcast.net) has joined #haskell
2013-09-08 18:11:11	deech	Makoryu: Understood.
2013-09-08 18:11:14	merijn	deech: If you're not sure about 2), then 1) is the only option, which means you need to be told how long it is
2013-09-08 18:11:34	-->	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has joined #haskell
2013-09-08 18:11:44	deech	merijn: Great. Thanks! I'll try to make that happen.
2013-09-08 18:12:04	-->	Tritlo (~Tritlo@85-220-91-44.dsl.dynamic.simnet.is) has joined #haskell
2013-09-08 18:12:13	Makoryu	deech: If the C data structure was instead a linked list, and you could guarantee that the last node would point to NULL, then you *could* iterate it in the way you suggested
2013-09-08 18:12:16	<--	nilsi (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-08 18:12:31	<--	markcw (~jack@2601:d:1680:3a9:6c63:c533:a799:c782) has quit (Ping timeout: 264 seconds)
2013-09-08 18:12:57	merijn	deech: Foreign.Marshall.Array has functions for dealing with both options
2013-09-08 18:13:16	Zearen	Is there an existing "reverse semaphore" like structure for Haskell ?  I mean, I could code one up in about an hour, but there's no reason to repeat work.
2013-09-08 18:13:52	Zearen	I mean, QSemN exists, but it isn't as nice as it could be for what I'm trying to do.
2013-09-08 18:14:04	deech	merijn, Makoryu : Thanks!
2013-09-08 18:15:10	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2013-09-08 18:15:11	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 18:15:15	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-08 18:15:29	Tekmo	Zearen: So what is the problem with QSemN?
2013-09-08 18:15:39	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-08 18:16:21	<--	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has quit (Quit: WeeChat 0.4.1)
2013-09-08 18:16:22	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 18:17:16	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 264 seconds)
2013-09-08 18:17:37	<--	u_ (~phillip@adsl-76-202-255-123.dsl.emhril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-08 18:17:51	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-09-08 18:18:08	Zearen	I have to write a custom reverseSignal using peekAvail
2013-09-08 18:18:24	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-08 18:18:52	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-09-08 18:19:11	Zearen	So the logic is I have a bunch of threads entering a section, and I don't want other logic to continue until they've all completed.
2013-09-08 18:19:33	Zearen	Typically you'd use a join, but I can't do that here.
2013-09-08 18:19:37	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-08 18:19:42	<--	sferry (~samuel@atheme/member/samferry) has quit (Quit: This computer has gone to sleep)
2013-09-08 18:20:58	jmcarthur	you mean you want to have one thread waiting on all the others to finish before continuing?
2013-09-08 18:21:25	Zearen	Yes.  But this thread may or may not exist
2013-09-08 18:21:37	jmcarthur	the first thing that comes to mind is to use a TVar with a count of the threads that are still running and just have the waiting thread wait until the count reaches zero
2013-09-08 18:21:49	jmcarthur	stm is good for these kinds of retry loops
2013-09-08 18:22:01	-->	Redz (~red@89.204.138.106) has joined #haskell
2013-09-08 18:22:41	jmcarthur	atomically $ do { n <- readTVar tvar; unless (n == 0) retry }
2013-09-08 18:23:43	Zearen	Yes, that's exactly what I would do if a package doesn't already exist; I was just making sure I wasn't missing some obvious.
2013-09-08 18:23:54	jmcarthur	another possibility
2013-09-08 18:23:57	jmcarthur	use the async library
2013-09-08 18:24:03	jmcarthur	and just wait on the whole set of jobs
2013-09-08 18:24:12	jmcarthur	that would be even more straightforward i guess
2013-09-08 18:24:40	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 18:24:55	Tekmo	Zearen: Using `async` you would write:
2013-09-08 18:25:13	Tekmo	as <- replicateM n $ async someThread
2013-09-08 18:25:15	Tekmo	mapM_ wait as
2013-09-08 18:25:16	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-08 18:25:21	Zearen	It would if I had access to the threads; the threads are callbacks.
2013-09-08 18:25:27	-->	u_ (~phillip@adsl-75-57-180-244.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 18:25:27	<--	normanrichards (~normanric@mobile-166-147-065-115.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-08 18:25:33	-->	Gentlecat (~Roman@79.105.226.37) has joined #haskell
2013-09-08 18:25:40	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-09-08 18:25:45	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 18:25:46	jmcarthur	if they are callbacks then do you even know how many there will be?
2013-09-08 18:25:52	Zearen	No
2013-09-08 18:26:03	jmcarthur	ah, then neither of our suggestions will work
2013-09-08 18:26:09	Tekmo	I would just roll this yourself
2013-09-08 18:26:10	-->	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has joined #haskell
2013-09-08 18:26:19	<--	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-08 18:26:26	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-08 18:26:30	jmcarthur	i'm not even sure your problem is well specified, now
2013-09-08 18:26:35	Zearen	Ok, that's what I was checking.  Thanks.
2013-09-08 18:26:45	jmcarthur	i don't know what it means for an unknown set of callbacks to "finish"
2013-09-08 18:26:58	Tekmo	jmcarthur: I think he means that the callbacks would signal some event
2013-09-08 18:27:11	Tekmo	jmcarthur: And after N events have been signaled he can begin some other computation
2013-09-08 18:27:18	jmcarthur	ah
2013-09-08 18:27:24	Tekmo	Oh
2013-09-08 18:27:26	Tekmo	Hold on
2013-09-08 18:27:26	jmcarthur	the stm suggestion could work in that case, if so
2013-09-08 18:27:29	Zearen	Welll
2013-09-08 18:27:35	Tekmo	Zearen: Did you check Control.Concurrent.STM.TSem?
2013-09-08 18:27:46	Zearen	Let me give it a look
2013-09-08 18:28:55	Zearen	That seems like a regular Semaphore.
2013-09-08 18:29:12	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Client Quit)
2013-09-08 18:29:33	Tekmo	Why do you need a reverse semaphore?
2013-09-08 18:29:39	Tekmo	Aren't you just waiting for N tasks to complete?
2013-09-08 18:29:45	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 18:30:35	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-08 18:30:39	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-08 18:30:45	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-08 18:31:53	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-08 18:31:54	Zearen	What I want to do is have each callback increment when entering, and decrement when leaving.  The rest of the logic can continue  when the count is 0
2013-09-08 18:32:03	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-08 18:32:31	Tekmo	Yeah, this is a very small amount of code to write
2013-09-08 18:32:33	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell
2013-09-08 18:32:37	Tekmo	You can very easily write this up
2013-09-08 18:32:37	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-08 18:33:23	Zearen	Yup, I just didn't want to hand write and have someone say, "Well, why didn't you just use x"
2013-09-08 18:33:35	Zearen	Thanks.
2013-09-08 18:33:46	Tekmo	You're welcome
2013-09-08 18:35:35	jmcarthur	Zearen: if the waiting thread runs before any callbacks run, it should just go ahead and run to completion?
2013-09-08 18:35:47	jmcarthur	Zearen: this is what would happen if no callback has incremented that counter yet
2013-09-08 18:35:49	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 18:36:01	Tekmo	You can fix that really easily by just adding an additional `Bool` Tvar
2013-09-08 18:36:24	Tekmo	and then only flipping it after the first thread acquires the semaphore
2013-09-08 18:36:40	Zearen	The waiting thread is started asynchronously
2013-09-08 18:36:50	Tekmo	Of course, then there is the problem if that thread finishes before the next one begins
2013-09-08 18:37:05	Tekmo	Oh, then you just keep a separate `TVar Int`
2013-09-08 18:37:07	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-08 18:37:14	<--	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Ping timeout: 268 seconds)
2013-09-08 18:37:20	Tekmo	You keep track of how many threads have acquired the semaphore ever
2013-09-08 18:37:27	jmcarthur	getting complicated, Tekmo :P
2013-09-08 18:37:32	Tekmo	No, it works!
2013-09-08 18:37:36	Tekmo	You wait on two things:
2013-09-08 18:37:46	Tekmo	* Have N threads ever acquired the semaphore
2013-09-08 18:37:53	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-08 18:37:54	jmcarthur	i believe you. just saying... this is no longer quite so trivial to reason about
2013-09-08 18:37:57	Tekmo	* Are there currently 0 threads that are acquiring you
2013-09-08 18:38:02	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 18:38:30	Tekmo	Maybe a more intuitive way to frame it is like this
2013-09-08 18:38:34	Tekmo	You're waiting on N tasks to complete
2013-09-08 18:38:54	Tekmo	Which is the same thing as saying "I'm waiting for N tasks to begin and N tasks to end"
2013-09-08 18:39:06	Tekmo	So you keep track of how many times they begin and how many times they end
2013-09-08 18:39:20	Tekmo	Once they both reach N you are done
2013-09-08 18:39:28	jmcarthur	ah, just two counters that never decrement. when they are equal you can run
2013-09-08 18:39:40	Tekmo	When they are N you can run
2013-09-08 18:39:44	<--	Argue (~Argue@112.209.122.237) has quit (Quit: Leaving)
2013-09-08 18:39:46	jmcarthur	i thought we didn't know what N is
2013-09-08 18:39:46	Tekmo	i.e. both counters = N
2013-09-08 18:40:09	Zearen	The callbacks are responses to server input.  The waiting thread is a call to gracefully stop the server.
2013-09-08 18:40:15	jmcarthur	ah!
2013-09-08 18:40:16	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 18:40:18	jmcarthur	that helps
2013-09-08 18:40:28	jmcarthur	so really one counter is fine
2013-09-08 18:40:40	jmcarthur	you can only kill when it's zero
2013-09-08 18:40:54	Zearen	Yup, that's the idea.
2013-09-08 18:41:13	Zearen	I thought something like that may already exist.
2013-09-08 18:42:37	-->	blume (~tani@e179169204.adsl.alicedsl.de) has joined #haskell
2013-09-08 18:42:57	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 18:43:37	-->	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has joined #haskell
2013-09-08 18:45:31	-->	james111111 (~james1111@h66-173-71-114.mntimn.dedicated.static.tds.net) has joined #haskell
2013-09-08 18:45:31	-->	dlnx` (~dlnx@hackerspace.pl) has joined #haskell
2013-09-08 18:45:43	-->	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-08 18:45:48	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-08 18:46:10	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-08 18:46:58	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-08 18:47:02	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 18:47:05	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 18:47:06	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-08 18:47:58	red___	:t fromListWith
2013-09-08 18:47:59	lambdabot	    Not in scope: `fromListWith'
2013-09-08 18:47:59	lambdabot	    Perhaps you meant one of these:
2013-09-08 18:47:59	lambdabot	      `IM.fromListWith' (imported from Data.IntMap),
2013-09-08 18:48:09	red___	:t IM.fromListWith
2013-09-08 18:48:10	lambdabot	(a -> a -> a) -> [(IM.Key, a)] -> IM.IntMap a
2013-09-08 18:50:18	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 18:50:19	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 18:50:34	-->	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 18:50:40	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 18:51:00	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-08 18:51:23	-->	x00Y00x (b294e2eb@gateway/web/freenode/ip.178.148.226.235) has joined #haskell
2013-09-08 18:52:03	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-08 18:52:52	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-08 18:52:53	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-08 18:53:12	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 18:53:59	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-09-08 18:54:15	<--	JaRoel|4d (~jaroel|4d@2001:980:7133:1:70f4:f027:624a:c437) has quit (Ping timeout: 264 seconds)
2013-09-08 18:55:52	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 18:55:55	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Read error: Connection reset by peer)
2013-09-08 18:55:58	<--	x00Y00x (b294e2eb@gateway/web/freenode/ip.178.148.226.235) has quit (Client Quit)
2013-09-08 18:56:04	-->	edvo (~edvo@tmo-111-88.customers.d1-online.com) has joined #haskell
2013-09-08 18:56:08	-->	u__ (~phillip@adsl-75-57-182-209.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 18:56:49	<--	yacks (~py@103.6.159.103) has quit (Quit: Leaving)
2013-09-08 18:56:54	<--	u_ (~phillip@adsl-75-57-180-244.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-08 18:57:04	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-08 18:57:13	-->	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 18:57:58	-->	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has joined #haskell
2013-09-08 18:58:28	-->	Thomas (~Thomas___@c-24-7-113-8.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 18:58:30	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-08 18:58:51	--	Thomas is now known as Guest73672
2013-09-08 18:59:07	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-08 18:59:09	ocharles	mm_freak_: good work with all the netwire progress!
2013-09-08 18:59:15	ocharles	will have chance to take a look tonight
2013-09-08 18:59:19	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-08 19:00:44	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-08 19:00:46	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 19:00:55	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 260 seconds)
2013-09-08 19:01:02	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-08 19:01:32	<--	u__ (~phillip@adsl-75-57-182-209.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-08 19:01:32	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:01:35	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:01:49	-->	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-09-08 19:02:19	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-08 19:03:24	<--	guilhon (~guilhon@187.114.117.100) has quit (Ping timeout: 240 seconds)
2013-09-08 19:03:51	<--	RThinker (~yegor@77.47.204.159) has quit (Quit: Leaving.)
2013-09-08 19:03:55	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-08 19:04:02	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-08 19:04:14	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-08 19:05:05	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 19:05:52	ocharles	mm_freak_: that clock is beautiful :)
2013-09-08 19:05:54	Guest73672	@let poop = "~..o8o..~"
2013-09-08 19:05:55	lambdabot	 Defined.
2013-09-08 19:05:57	-->	gnuvince (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-08 19:06:06	-->	satvik (~satc@202.3.77.239) has joined #haskell
2013-09-08 19:06:17	gnuvince	Can anyone explain the pipe syntax in the code at page 6 of http://www.cs.virginia.edu/~wh5a/personal/Transformers.pdf ?
2013-09-08 19:06:22	ocharles	mm_freak_: though i'm curious what 'notYet' is needed for
2013-09-08 19:06:33	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 19:06:34	<--	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 19:06:49	-->	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has joined #haskell
2013-09-08 19:08:11	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 19:08:16	edvo	gnuvince: you mean "Monad Error e m | m -> e"? That are functional dependencies. http://www.haskell.org/haskellwiki/Functional_dependencies
2013-09-08 19:08:23	Guest73672	@let diarrhea = replicate100 poop
2013-09-08 19:08:23	lambdabot	 .L.hs:139:12:
2013-09-08 19:08:24	lambdabot	     Not in scope: `replicate100'
2013-09-08 19:08:24	lambdabot	     Perhaps you meant one o...
2013-09-08 19:08:30	Guest73672	@let diarrhea = replicate 100 poop
2013-09-08 19:08:30	lambdabot	 .L.hs:139:26:
2013-09-08 19:08:30	lambdabot	     Not in scope: `poop'
2013-09-08 19:08:30	lambdabot	     Perhaps you meant `loop' (impor...
2013-09-08 19:08:35	gnuvince	edvo: that's what I meant; thanks for the link!
2013-09-08 19:09:31	mauke	Guest73672: ?
2013-09-08 19:09:41	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-09-08 19:10:02	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-08 19:10:24	Guest73672	@let throwAgainstWall = const "SPLAT!"
2013-09-08 19:10:24	lambdabot	 Defined.
2013-09-08 19:10:30	<--	tiksa (~tiksa@gateway/tor-sasl/tiksa) has quit (Ping timeout: 240 seconds)
2013-09-08 19:10:38	Guest73672	> throwAgainstWall poop
2013-09-08 19:10:39	lambdabot	  Not in scope: `poop'
2013-09-08 19:10:39	lambdabot	 Perhaps you meant `loop' (imported from Control.Arrow)
2013-09-08 19:10:43	gnuvince	edvo: in the example in the link you provided, class Mult a b c | a b -> c where ..., does that mean that c needs to be an a or a b?
2013-09-08 19:10:52	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-08 19:10:53	mauke	Guest73672: could you please stop that?
2013-09-08 19:11:01	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 19:11:03	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 264 seconds)
2013-09-08 19:11:11	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-08 19:11:20	edvo	gnuvince: it means that c is uniquely defined by a and b
2013-09-08 19:11:28	mm_freak_	ocharles: 'periodic 1' occurs at 0, 1, 2, 3, 4, …
2013-09-08 19:11:39	mm_freak_	ocharles: notYet forgets the first occurrence
2013-09-08 19:11:49	mm_freak_	notYet . periodic 1 occurs at 1, 2, 3, 4, …
2013-09-08 19:11:54	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 19:12:21	ocharles	mm_freak_: ah, i see
2013-09-08 19:12:22	<--	ihm1_ (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:12:27	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-08 19:12:31	satvik	can some one explain this. type of binary tree is fix point of equation bt = 1 + bt * bt
2013-09-08 19:12:32	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:12:36	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 19:12:38	ocharles	but doesn't 0 mean 12 o'clock?
2013-09-08 19:12:53	<--	Guest73672 (~Thomas___@c-24-7-113-8.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-09-08 19:12:57	ocharles	mm_freak_: i would have thought you would have wanted to go 0-59 and cycle
2013-09-08 19:13:33	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-08 19:13:46	ocharles	mm_freak_: in fact, defining the clock in terms of "at :: [Time] -> [Event]" might also be nice
2013-09-08 19:13:51	ocharles	seconds every 1 second, minutes every 60
2013-09-08 19:13:52	ocharles	etc
2013-09-08 19:13:56	mm_freak_	ocharles: that's what i do
2013-09-08 19:14:18	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 19:14:37	mm_freak_	sumE . notYet . periodic 1 . 1 denotes [(0, 0), (1, 1), (2, 2), (3, 3), …
2013-09-08 19:14:37	FreeFull	There seem to be two monoid instances for ZipList
2013-09-08 19:14:42	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 19:14:43	<--	markcw (~jack@c-50-172-80-168.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 19:14:44	FreeFull	A discardy one and a keepy one
2013-09-08 19:14:51	mm_freak_	ocharles: if you picture Event as [(Time, a)]
2013-09-08 19:15:09	<--	Shou (~sister@81.191.185.181) has quit (Quit: meow meow meow)
2013-09-08 19:15:12	ocharles	mm_freak_: hm, how does event at t=0 get value 0? because sumE on NotEvent = 0?
2013-09-08 19:15:15	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Remote host closed the connection)
2013-09-08 19:15:24	<--	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 19:15:29	-->	markcw (~jack@2601:d:1680:3a9:5d2:2df3:65f5:bf99) has joined #haskell
2013-09-08 19:16:07	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-08 19:16:10	FreeFull	For the keepy one, mempty = ZipList; for the discardey, mempty = ZipList (cycle mempty)
2013-09-08 19:16:14	geekosaur	satvik: that equation is equivalent to the Haskell type: data Tree a = Leaf a | Branch (Tree a) (Tree a). 1 is a value; + is Haskell's |, * indicates "parameters" to a constructor (might be easier to think of it as: a * a is like (a,a) in Haskell)
2013-09-08 19:16:15	mm_freak_	ocharles: oh, sorry
2013-09-08 19:16:18	mm_freak_	it starts at (1, 1)
2013-09-08 19:16:29	mm_freak_	ocharles: and then comes hold <|> 0
2013-09-08 19:16:30	FreeFull	Which would be mempty = mempty : mempty   if : was ZipList's constructor
2013-09-08 19:16:43	ocharles	mm_freak_: ah yes
2013-09-08 19:17:19	<--	Redz (~red@89.204.138.106) has quit (Ping timeout: 268 seconds)
2013-09-08 19:17:34	-->	shesek (~shesek@IGLD-84-228-1-112.inter.net.il) has joined #haskell
2013-09-08 19:17:51	geekosaur	satvik, in some sense this is like calculus derivatives applied to types. constants become 0, variables become constants, types become variables
2013-09-08 19:17:55	-->	julmae (~no@141.255.164.89) has joined #haskell
2013-09-08 19:18:36	mm_freak_	mempty = pure mempty
2013-09-08 19:18:42	mm_freak_	mappend = liftA2 mappend
2013-09-08 19:18:48	-->	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has joined #haskell
2013-09-08 19:19:06	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 19:19:08	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-08 19:19:15	danilo2	Hello! :) Is there any way to write the following expression nicer (I mean simplier, more pure, etc): mapM f classes >>= mapM g ? :)
2013-09-08 19:19:39	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-08 19:19:54	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Connection timed out)
2013-09-08 19:20:04	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-08 19:20:15	aleator	danilo2: Perhaps mapM (f>=>g)?
2013-09-08 19:20:19	<--	julmac (~no@141.255.164.89) has quit (Ping timeout: 264 seconds)
2013-09-08 19:20:31	aleator	danilo2: But this depends on the context.
2013-09-08 19:20:56	FreeFull	:t \f g -> mapM (f >=> g)
2013-09-08 19:20:57	danilo2	aleator: I was looking for something like that
2013-09-08 19:20:57	lambdabot	Monad m => (a -> m b1) -> (b1 -> m b) -> [a] -> m [b]
2013-09-08 19:21:01	bergmark	danilo2: the only way to make that purer is to make f and g purer
2013-09-08 19:21:02	satvik	geekosaur thanks for that. I wanted to know how fix point comes into picture.
2013-09-08 19:21:21	aleator	danilo2: But depending on which monad, this might not be the same.
2013-09-08 19:21:28	<--	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has quit (Ping timeout: 264 seconds)
2013-09-08 19:21:30	geekosaur	that's because bt is onb both sides of the =
2013-09-08 19:21:35	geekosaur	so we have a type which "depends on" itself
2013-09-08 19:21:44	danilo2	bergmark: I know, maybe pure was wrong word - this has to be monadic, so the aleator 's solution is very nice :)
2013-09-08 19:21:46	-->	canissimia (~canissimi@unaffiliated/canissimia) has joined #haskell
2013-09-08 19:21:59	geekosaur	this is a form of recursion, and is how a single equation can describe a type which can expand arbitrarily
2013-09-08 19:22:19	<--	james111111 (~james1111@h66-173-71-114.mntimn.dedicated.static.tds.net) has left #haskell
2013-09-08 19:22:37	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-09-08 19:22:59	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 19:23:00	ParaSa1lin	just checking my understanding, foldr (+) 0 is not constant space?
2013-09-08 19:23:02	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-08 19:23:11	-->	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has joined #haskell
2013-09-08 19:23:12	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:23:18	FreeFull	ParaSa1lin: Yes, because (+) is strict in both arguments
2013-09-08 19:23:24	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:23:30	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Quit: s/Kabaka//)
2013-09-08 19:23:40	quchen	It still builds up an O(n) thunk
2013-09-08 19:23:50	-->	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has joined #haskell
2013-09-08 19:23:51	FreeFull	ParaSa1lin: You probably want  foldl' (+) 0
2013-09-08 19:23:57	ParaSa1lin	im not sure why tekmo uses foldr in Data.Fold then
2013-09-08 19:24:03	geekosaur	just expand the equation into itself where a `bt` appears. so: bt = 1 + (1 + bt * bt) * (1 + bt * bt) = 1 + (1 + (1 + bt * bt) * bt) * (1 + bt * bt), etc. as the tree grows. the type is unbounded because you can substitute back in forever
2013-09-08 19:24:10	skypers	hey
2013-09-08 19:24:28	geekosaur	this describes the growth of a binary tree
2013-09-08 19:24:30	skypers	what libs exist for GUI in Haskell?
2013-09-08 19:24:36	-->	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has joined #haskell
2013-09-08 19:24:46	FreeFull	ParaSa1lin: It might be the Num instance tekmo uses has a different strictness for (+)
2013-09-08 19:25:10	ParaSa1lin	http://hackage.haskell.org/packages/archive/foldl/1.0.0/doc/html/src/Control-Foldl.html#fold
2013-09-08 19:25:14	Zearen	In case curiousity exists: https://gist.github.com/zearen-wover/6486622
2013-09-08 19:25:40	satvik	geekosaur thanks
2013-09-08 19:25:53	ParaSa1lin	help me understand why he defines fold in terms of foldr
2013-09-08 19:26:11	mm_freak_	ParaSa1lin: whether foldr (+) is constant space depends on how and with what type you use it
2013-09-08 19:26:15	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-08 19:26:22	-->	CaptainK (~CaptainK@181.179.87.147) has joined #haskell
2013-09-08 19:26:26	mm_freak_	ParaSa1lin: for example it's constant space for this type:  data Nat = Zero | Succ Nat
2013-09-08 19:26:38	ParaSa1lin	right, or for foldr (:)
2013-09-08 19:26:46	-->	vpetro (~textual@137.122.203.130) has joined #haskell
2013-09-08 19:27:07	mm_freak_	ParaSa1lin: the rule of thumb is:  check the strictness of the folding function
2013-09-08 19:27:23	deech	Has anyone who's used the fficxx know how it handles overloaded functions?
2013-09-08 19:27:33	Tekmo	Oh
2013-09-08 19:27:41	Tekmo	The reason I use `foldr` is to trigger `fold/build` fusion
2013-09-08 19:27:47	deech	Or if any more documentation exists.
2013-09-08 19:27:49	geekosaur	skypers: wxhaskell, gtk2hs, and OpenGL are the lower level libraries; you can program them "procedurally" or you can (try to) make use of various FRP interfaces built on top of them for something more "Haskelly", although FRP is still evolving
2013-09-08 19:27:55	<--	markcw (~jack@2601:d:1680:3a9:5d2:2df3:65f5:bf99) has quit (Ping timeout: 245 seconds)
2013-09-08 19:28:07	Tekmo	`foldr` still runs in constant space
2013-09-08 19:28:09	skypers	geekosaur: I see
2013-09-08 19:28:11	skypers	I don’t like Qt…
2013-09-08 19:28:26	skypers	geekosaur: do you think it’s simple to design GUI interfaces in FPL?
2013-09-08 19:28:27	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-08 19:28:30	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 19:28:36	geekosaur	the Qt bindings exist but I don't think they've been updated and last I heard they didn't play well with recent ghc or recent Qt
2013-09-08 19:28:47	geekosaur	which is why I didn't mention them
2013-09-08 19:29:02	deech	skypers: Heinrich Apfelmus just released a web-based FRP GUI library. http://apfelmus.nfshost.com/blog/2013/09/07-threepenny-gui-0-3.html
2013-09-08 19:29:42	-->	wereSheep (bc3fac67@gateway/web/freenode/ip.188.63.172.103) has joined #haskell
2013-09-08 19:29:51	skypers	ok, I see
2013-09-08 19:29:52	ParaSa1lin	o hey, Tekmo, so using the Fold on a strict "reducing" function would be bad idea?
2013-09-08 19:29:54	skypers	but hm I meant
2013-09-08 19:29:58	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 19:30:03	geekosaur	skypers, you can program wx or gtk or opengl pretty much the same way you can in other languages, although that's double-edged because it feels like you're forcing haskell to be a procedural language. FRP is more functional-like, but as I said is still evolving
2013-09-08 19:30:10	skypers	is GUI development compatible with FPL approach?
2013-09-08 19:30:41	skypers	geekosaur: yeah, I’m writing stuff in Haskell and OpenGL
2013-09-08 19:30:44	wereSheep	I installed a package with 'cabal install'. I don't want it anymore, how do I get rid of it?
2013-09-08 19:30:49	mm_freak_	skypers: the mistake many people make is to have a big "GUI" box to put everything into, but there are many different kinds of GUIs and there are different abstractions to capture them
2013-09-08 19:30:52	skypers	cabal remove wereSheep
2013-09-08 19:30:58	skypers	ah
2013-09-08 19:30:59	skypers	no
2013-09-08 19:31:05	skypers	ghc-pkg i think
2013-09-08 19:31:09	skypers	ghc-pkg remove
2013-09-08 19:31:13	skypers	or something like that
2013-09-08 19:31:24	skypers	19:30 < mm_freak_> skypers: the mistake many people make is to have a big "GUI" box to put everything into, but there are many different kinds of GUIs and there are different abstractions to capture them
2013-09-08 19:31:24	mm_freak_	wereSheep: you can unregister it using ghc-pkg, but that doesn't remove the installed files
2013-09-08 19:31:28	skypers	so fraking true.
2013-09-08 19:31:30	geekosaur	how "easy" it is depends on how familiar you are with the underlying toolkit (for the lower level ones) and how well you do with monadic programming (low level) or whatever methodology your chosen FRP stack uses
2013-09-08 19:31:33	-->	Redz (~red@82.113.106.12) has joined #haskell
2013-09-08 19:31:33	skypers	that’s why I don’t like Qt
2013-09-08 19:31:41	wereSheep	so.. rm -rf ~/.ghc then?
2013-09-08 19:31:52	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-09-08 19:31:55	skypers	it breaks C++’s std things
2013-09-08 19:32:09	skypers	with all those shits like QString and so on
2013-09-08 19:32:10	mm_freak_	skypers: fundamentally there is little difference between Qt, GTK+ and wx
2013-09-08 19:32:24	mm_freak_	skypers: "fundamentally" as in "abstraction-wise"
2013-09-08 19:32:24	skypers	mm_freak_: you mean, technically?
2013-09-08 19:32:29	skypers	I see
2013-09-08 19:32:35	wereSheep	and ~/.cabal for good measure as well...
2013-09-08 19:32:40	Tekmo	ParaSa1lin: What example did you have in mind?
2013-09-08 19:32:50	geekosaur	they all do pretty much the same thing and their high level behavior is similar. implementation details differ of course
2013-09-08 19:33:00	mm_freak_	skypers: currently the best abstraction for GUIs we know is FRP
2013-09-08 19:33:06	-->	tel (~tel@209.249.230.2) has joined #haskell
2013-09-08 19:33:27	jmcarthur	that's a pretty strong claim for frp
2013-09-08 19:33:31	skypers	FRP stands for… what?
2013-09-08 19:33:38	mm_freak_	skypers: Functional Reactive Programming
2013-09-08 19:33:44	ParaSa1lin	Tekmo, like summation, though i havent looked at how you define that Fold
2013-09-08 19:33:59	jmcarthur	i would s/best abstraction/abstraction with the most potential/
2013-09-08 19:34:04	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:34:06	aleator	mm_freak_: Can you put FRP in a nutshell for me?
2013-09-08 19:34:13	mm_freak_	skypers: FRP allows you to express GUIs declaratively, no text field updates, no event handlers, etc.
2013-09-08 19:34:17	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 19:34:18	ParaSa1lin	L.sum would not be constant space, right?
2013-09-08 19:34:21	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:34:59	Tekmo	ParaSa1lin: There is a `sum` fold defined as: `sum = Fold (+) 0 id`
2013-09-08 19:35:00	skypers	mm_freak_: I wonder how it works
2013-09-08 19:35:09	Tekmo	ParaSa1lin: Note that you don't need to enforce strictness in the definition
2013-09-08 19:35:09	skypers	sounds great to get rid of event handlers
2013-09-08 19:35:23	Tekmo	ParaSa1lin: The `fold` function takes care of keeping the accumulator WHNF strict for you
2013-09-08 19:35:37	Tekmo	ParaSa1lin: I know that it doesn't look like that because it uses `foldr`, but it actually does
2013-09-08 19:35:43	<--	wereSheep (bc3fac67@gateway/web/freenode/ip.188.63.172.103) has quit (Quit: Page closed)
2013-09-08 19:35:56	skypers	mm_freak_: does FRP stand for “Functional Reactive Programing”?
2013-09-08 19:36:03	Tekmo	ParaSa1lin: It's a trick recommended to me by several people and also the same trick that `Data.Foldable` uses for `foldl'`
2013-09-08 19:36:12	Tekmo	skypers: Yes
2013-09-08 19:36:13	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 19:36:16	ParaSa1lin	Tekmo, yeah im having trouble seeing that
2013-09-08 19:36:17	mm_freak_	skypers: you capture GUI elements as time-varying values and treat them like all other first class values
2013-09-08 19:36:26	Tekmo	ParaSa1lin: Yeah, it was hard for me to understand, too
2013-09-08 19:36:45	mm_freak_	skypers: then you have events, which denotationally are discrete points in time possibly with a value attached to each point
2013-09-08 19:36:53	jmcarthur	aleator, skypers: in FRP, you compose time-dependent values. that's the nutshell explanation
2013-09-08 19:37:04	Tekmo	ParaSa1lin: Really you just have to work through it slowly in order for it to click
2013-09-08 19:37:09	skypers	I see
2013-09-08 19:37:17	jmcarthur	aleator: this is as opposed to stuff like imperative-style callbacks, etc.
2013-09-08 19:37:20	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has left #haskell
2013-09-08 19:37:22	ParaSa1lin	Tekmo, im thinking about doing an applicative xml pull parser for pipes
2013-09-08 19:37:23	mm_freak_	skypers: but explanations don't really help much…  you should really just try it out
2013-09-08 19:37:32	skypers	yeah
2013-09-08 19:37:35	Tekmo	ParaSa1lin: Cool!
2013-09-08 19:37:39	skypers	just another question
2013-09-08 19:37:42	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-08 19:37:54	Tekmo	ParaSa1lin: So what was the user-facing API you had in mind?
2013-09-08 19:38:08	<--	Hexagenic (~Hexagenic@h201n5-vrr-d2.ias.bredband.telia.com) has quit (Quit: WeeChat 0.4.1)
2013-09-08 19:38:11	skypers	I live in France and Haskell is not really spread across companies
2013-09-08 19:38:12	-->	gustavn (~Gustav@31.210.251.9) has joined #haskell
2013-09-08 19:38:22	skypers	what’s about in america / england / wherever?
2013-09-08 19:38:28	ParaSa1lin	Tekmo, i was thinking about making combinator operators similar to xpath symbols
2013-09-08 19:38:31	skypers	I mean in industry
2013-09-08 19:38:35	danilo2	Could somebody tell me please, what can Arrows in Haskell do, which Monads cannot? I 've read some Arrow tutorials and everything so far could be made simply using some functions and monads. Is it something more than a "syntactic sugar"? :)
2013-09-08 19:38:41	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Read error: Operation timed out)
2013-09-08 19:38:45	skypers	I’d love getting wired to write haskell programs
2013-09-08 19:39:08	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-08 19:39:17	jmcarthur	danilo2: it's the other way around. monads can do things arrows cannot
2013-09-08 19:39:19	ParaSa1lin	Tekmo, similar to what hxt does, but not insane like hxt
2013-09-08 19:39:37	Tekmo	I'm still new to xml, so give me a second to Google these terms :)
2013-09-08 19:39:40	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-08 19:40:03	jmcarthur	danilo2: monads can determine what future effects to perform based on past results. arrows give you a more static program structure.
2013-09-08 19:40:05	danilo2	jmcarthur: according to wiki (http://www.haskell.org/haskellwiki/Arrow): "They can do everything monads can do, and more"
2013-09-08 19:40:22	Tekmo	ParaSa1lin: So my understanding is that an xpath is like a way to navigate an XML structure
2013-09-08 19:40:31	geekosaur	true or false depending on how you look at things
2013-09-08 19:40:33	ParaSa1lin	Tekmo, you're academic?
2013-09-08 19:40:35	jmcarthur	danilo2: that's either wrong or looking at it dually
2013-09-08 19:40:45	-->	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-08 19:41:00	Tekmo	ParaSa1lin: I'm a grad student in bioinformatics
2013-09-08 19:41:23	ParaSa1lin	Tekmo, huh, im in industry bioinformatics
2013-09-08 19:41:27	Tekmo	ParaSa1lin: Really?
2013-09-08 19:41:31	-->	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-08 19:41:31	Tekmo	ParaSa1lin: What do you work on?
2013-09-08 19:41:37	-->	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has joined #haskell
2013-09-08 19:41:43	ParaSa1lin	Tekmo, so i deal with xml crunching on occasion
2013-09-08 19:41:46	Tekmo	:)
2013-09-08 19:41:52	<--	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has quit (Client Quit)
2013-09-08 19:41:55	Tekmo	Most of the crunching I do is of CSVs
2013-09-08 19:42:06	jmcarthur	danilo2: there are more instances of Arrow possible than of Monad, which is sometimes what people mean when they say one type class is more powerful than another. however, if you have only an instance of Monad for type A and only an instance of Arrow for type B, you can do more with A then with B
2013-09-08 19:42:13	danilo2	jmcarthur: that's strange - I've found this sentrence in few places. Like: (http://www.haskell.org/arrows/) "They serve much the same purpose as monads [...] but are more general", or: "Arrows, or Freyd-categories, are a generalization of Monads."
2013-09-08 19:42:14	mm_freak_	danilo2: my favorite arrow is (and has to be) this one:  newtype Auto m a b = Auto (a -> m (b, Auto m a b))
2013-09-08 19:42:23	elliott	danilo2: "general" means nothing
2013-09-08 19:42:27	jmcarthur	danilo2: those are correct. arrows are a generalization of monads
2013-09-08 19:42:34	elliott	power is about consumer vs. producer
2013-09-08 19:42:36	<--	kushal (~kdas@fedora/kushal) has quit (Ping timeout: 268 seconds)
2013-09-08 19:42:38	mm_freak_	danilo2: it allows you to compose locally stateful components without one giant StateT of all the individual states
2013-09-08 19:42:38	ParaSa1lin	Tekerson, yeah i work for a company that does lots of random client projects, so it's something different every time
2013-09-08 19:42:39	jmcarthur	danilo2: "more general" means "there are more things which are arrows"
2013-09-08 19:42:40	elliott	let's say you are producing instances for a type
2013-09-08 19:42:52	ParaSa1lin	Tekmo, ups
2013-09-08 19:42:52	elliott	then Arrow is more general than Monad, you can instantiate Arrow when maybe you couldn't Monad
2013-09-08 19:42:58	elliott	let's say you are using instances for a type
2013-09-08 19:43:03	elliott	then Monad is more powerful than Arrow, it lets you do more
2013-09-08 19:43:08	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 19:43:10	-->	pavonia (~user@p5B14C5C4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 19:43:14	elliott	increase in power on one side is the same as a decrease on the other side
2013-09-08 19:43:20	ParaSa1lin	Tekmo, ncbi does a lot of databases in xml so unfortunately i have to work with xml
2013-09-08 19:43:20	<--	Gentlecat (~Roman@79.105.226.37) has quit (Ping timeout: 245 seconds)
2013-09-08 19:43:21	-->	Desheng (~Desheng@166.181.66.148) has joined #haskell
2013-09-08 19:43:22	Tekmo	ParaSa1lin: So you really want to study `pipes-parse` in this case
2013-09-08 19:43:22	elliott	therefore, "more general", "more powerful" etc. are all but meaningless
2013-09-08 19:43:26	mstksg	Tekmo: yes, xpath is similar to the idea of css selectors, if you've ever done any web development
2013-09-08 19:43:29	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2013-09-08 19:43:34	Tekmo	ParaSa1lin: I have
2013-09-08 19:43:36	elliott	I think this is one of the most important things to understand about abstraction
2013-09-08 19:43:37	mstksg	only they are more powerful in that they can be numbered, etc.
2013-09-08 19:43:38	mm_freak_	danilo2: this type is not inherently non-monadic though…  it's actually possible to make it a monad, but the Monad instance would be practically useless
2013-09-08 19:43:40	Tekmo	Oops
2013-09-08 19:43:42	Tekmo	mstksg: I have
2013-09-08 19:43:52	elliott	the more fancy things you can do with it -- the harder it will be to provide and the less general it will be
2013-09-08 19:43:57	merijn	They're just tree traversals...
2013-09-08 19:44:02	Tekmo	ParaSa1lin: So the trick with `pipes` is very similar to the xpath you are proposing
2013-09-08 19:44:02	elliott	the simpler and easier to provide it is -- the less useful it will be to use
2013-09-08 19:44:07	danilo2	jmcarthur, mm_freak_, elliot: Ok, thank you. I need to read more about them and learn them more deeply to see the differences more clear.
2013-09-08 19:44:11	Tekmo	ParaSa1lin: You model your XML file as an effectful data structure
2013-09-08 19:44:12	jmcarthur	elliott: conventionally, at least, "more general" means more instances are possible, and "more powerful" means more power is available from each instance.
2013-09-08 19:44:17	ClaudiusMaximus	monads can do more than arrows (eg dynamic branching), but you can do more with arrows than monads (eg static analysis) - as far as i understand it
2013-09-08 19:44:21	jmcarthur	although it's not used 100% consistently
2013-09-08 19:44:26	elliott	jmcarthur: I would be happy if people actually stuck to that :)
2013-09-08 19:44:31	elliott	but in my experience, they don't
2013-09-08 19:44:32	ParaSa1lin	Tekmo, you mean generate a dom?
2013-09-08 19:44:38	Tekmo	ParaSa1lin: Yeah, sort of
2013-09-08 19:44:39	-->	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has joined #haskell
2013-09-08 19:44:41	elliott	and also they seemingly tend not to realise that "more general" = "less powerful"
2013-09-08 19:44:47	elliott	and "more powerful" = "less general"
2013-09-08 19:44:54	Tekmo	ParaSa1lin: The idea is that you generate a DOM that only lets you traverse the file linearly
2013-09-08 19:44:55	jmcarthur	yeah
2013-09-08 19:44:58	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:45:03	ahill-89	Tekmo: It almost sound like you're describing a SAX parser.
2013-09-08 19:45:09	sshack	elliott: Unless you're referring to turing machines.
2013-09-08 19:45:12	Tekmo	ahill-89: Let me google that.  Hold on
2013-09-08 19:45:14	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:45:20	ParaSa1lin	Tekmo, i was going to do it sax style where i would make a Producer of "Events"
2013-09-08 19:45:25	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-08 19:45:27	jmcarthur	maybe if we s/powerful/specialized/ the relationship with generality is more clear
2013-09-08 19:45:30	Tekmo	ParaSa1lin: Yeah, that's the right idea
2013-09-08 19:45:34	mm_freak_	danilo2: as an exercise write the following state monad type:  data State s a = State { usesPut :: Bool, runState :: s -> (s, a) }
2013-09-08 19:45:45	Tekmo	ParaSa1lin: See `pipes-parse`, which also shows you how to use `FreeT` to group or sub-divide streams of events
2013-09-08 19:45:48	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-08 19:45:53	Tekmo	ParaSa1lin: In case you have a nested data structure
2013-09-08 19:45:59	ParaSa1lin	Tekmo, hm i will
2013-09-08 19:46:00	<--	RThinker (~yegor@77.47.204.159) has quit (Read error: Operation timed out)
2013-09-08 19:46:00	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell
2013-09-08 19:46:03	mm_freak_	danilo2: the 'usesPut' flag should be True, if the computation uses 'put'
2013-09-08 19:46:14	mm_freak_	usesPut (put 15) = True
2013-09-08 19:46:33	mm_freak_	usesPut (return "blah") = False
2013-09-08 19:46:34	Tekmo	ParaSa1lin: You should also study Oliver Charles' `pipes-tar` which uses the same idea to group a TAR stream into files
2013-09-08 19:46:43	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 19:46:47	Tekmo	https://github.com/ocharles/pipes-tar
2013-09-08 19:47:02	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-08 19:47:14	-->	kanishka (~chatzilla@c-71-234-170-219.hsd1.vt.comcast.net) has joined #haskell
2013-09-08 19:47:21	ocharles	ParaSa1lin: that's http://github.com/ocharles/pipes-tar
2013-09-08 19:47:22	ocharles	:)
2013-09-08 19:47:34	Tekmo	Hey, Oliver!
2013-09-08 19:47:42	ocharles	ahoi! congrats on the release :)
2013-09-08 19:47:50	danilo2	elliott,jmcarthur : than you for the clarification
2013-09-08 19:47:52	Tekmo	ahill-89: Yes, it's exactly like SAX
2013-09-08 19:48:01	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 19:48:04	jmcarthur	elliott: more general doesn't *always* mean less powerful though. e.g. indexed monads vs. monads
2013-09-08 19:48:05	-->	CapitanK (~CaptainK@181.38.16.58) has joined #haskell
2013-09-08 19:48:06	danilo2	mm_freak_: Ok - I'll try it
2013-09-08 19:48:06	danilo2	:)
2013-09-08 19:48:07	<--	CaptainK (~CaptainK@181.179.87.147) has quit (Read error: Connection reset by peer)
2013-09-08 19:48:12	ocharles	Tekmo: nixos stuff submitted, so should all be in nix soon
2013-09-08 19:48:13	<--	satvik (~satc@202.3.77.239) has quit (Quit: qicr for android: faster and better)
2013-09-08 19:48:32	elliott	jmcarthur: yeah, I think it depends exactly how you define "provide" vs. "use" and stuff in context
2013-09-08 19:48:49	jmcarthur	yeah
2013-09-08 19:49:18	mm_freak_	danilo2: actually you can even write a simpler one:  newtype Reader e a = Reader { usesEnv :: Bool, runReader :: e -> a }
2013-09-08 19:49:32	-->	artyomkazak (~artyomkaz@94.25.228.16) has joined #haskell
2013-09-08 19:49:39	mm_freak_	usesEnv should be true, if the function refers to its environment
2013-09-08 19:49:57	mm_freak_	try to write a Monad instance for this one
2013-09-08 19:50:15	hiptobecubic	has anyone used haskell to read/show a webcam?
2013-09-08 19:50:36	hiptobecubic	let me rephrase, has anyone here done that? Or can suggest where to start looking for it
2013-09-08 19:50:39	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-08 19:51:02	zomg	hiptobecubic: might be easiest if you can find a library to interface with the OS's video capture mechanism
2013-09-08 19:51:18	hiptobecubic	v4l in linux, i suppose
2013-09-08 19:51:29	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 260 seconds)
2013-09-08 19:51:29	<--	earthy (~arthurvl@illipe.xs4all.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 19:51:41	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 245 seconds)
2013-09-08 19:51:45	ocharles	hiptobecubic: there was a application for using haskell to correct your posture posted to r/haskell at some point
2013-09-08 19:51:49	zomg	Yeah don't really know about how it works in *nix but at least on Windows there's an OS level feature for camera feeds I'm pretty certain.
2013-09-08 19:52:12	hiptobecubic	ocharles, oh... right. i remember seeing that awhile ago. thanks i'll look for it
2013-09-08 19:52:17	danilo2	mm_freak_ - I want to know If i understand correclty - your example with custom State s a (I'll stick with state, because I know better how state works in Haskell whan reader) - should be my custom monad?
2013-09-08 19:52:21	hiptobecubic	i found this as well http://hackage.haskell.org/packages/archive/bindings-linux-videodev2/0.1/doc/html/Bindings-Linux-VideoDev2.html
2013-09-08 19:52:53	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-08 19:53:17	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-08 19:53:20	<--	oleo (~oleo@xdsl-78-35-143-92.netcologne.de) has quit (Ping timeout: 257 seconds)
2013-09-08 19:53:27	-->	oleo (~oleo@xdsl-78-35-176-124.netcologne.de) has joined #haskell
2013-09-08 19:54:06	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 19:54:26	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-08 19:54:28	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-08 19:54:28	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 264 seconds)
2013-09-08 19:55:17	-->	hellome (~lua@192.73.239.25) has joined #haskell
2013-09-08 19:55:29	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-08 19:56:06	<--	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 19:56:06	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 19:56:08	-->	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has joined #haskell
2013-09-08 19:56:08	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 19:56:12	<--	hellome (~lua@192.73.239.25) has quit (Read error: Connection reset by peer)
2013-09-08 19:56:32	-->	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-08 19:56:32	-->	hellome (~lua@192.73.239.25) has joined #haskell
2013-09-08 19:56:38	-->	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-08 19:57:10	-->	jroesch (~jared@chips.whatbox.ca) has joined #haskell
2013-09-08 19:57:23	<--	__main__ (~main@50.240.210.73) has quit (Ping timeout: 246 seconds)
2013-09-08 19:57:27	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 19:57:40	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Remote host closed the connection)
2013-09-08 19:57:53	-->	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has joined #haskell
2013-09-08 19:58:08	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-08 19:58:18	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-08 19:58:24	ParaSa1lin	Tekmo, ah yes i see foldl' in Foldable is the same as your fold, but i still dont get it
2013-09-08 19:58:29	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Quit: Leaving.)
2013-09-08 19:58:45	ReinH	Tekmo: hai
2013-09-08 19:58:57	Tekmo	ReinH: Hi!
2013-09-08 19:59:24	Tekmo	ParaSa1lin: Like all problems, start with a simple example, like a list of length 2
2013-09-08 19:59:29	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-08 19:59:38	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-08 19:59:39	Tekmo	ParaSa1lin: So let's imagine that we are folding the list [1, 2]
2013-09-08 19:59:52	ParaSa1lin	ok ill try to work it out on paper
2013-09-08 20:00:09	Tekmo	ParaSa1lin: `foldr cons nil xs` basically replaces all (:)'s with cons and all []'s with nil
2013-09-08 20:00:18	shachaf	First, understand an example with a list of length 0. Then, assume that you understand an example with a list of length n, and use it to understand an example with a list of length n+1.
2013-09-08 20:00:22	<--	AleXoundOS (~AleXoundO@188.244.39.153) has quit (Quit: Leaving)
2013-09-08 20:00:39	Tekmo	ParaSa1lin: So if we expand out [1, 2], we get (:) 1 ((:) 2 [])
2013-09-08 20:00:43	<--	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Client Quit)
2013-09-08 20:00:52	Tekmo	ParaSa1lin: So if we run `foldr cons nil` on that list we get:
2013-09-08 20:00:58	Tekmo	ParaSa1lin: cons 1 (cons 2 nil)
2013-09-08 20:01:06	-->	wereSheep (bc3fac67@gateway/web/freenode/ip.188.63.172.103) has joined #haskell
2013-09-08 20:01:08	Tekmo	ParaSa1lin: Now let's look at the specific `cons` and `nil` that this `foldr` is using
2013-09-08 20:01:12	ParaSa1lin	Tekmo, right, we want lazy for (:), but i dont understand how it would be constant space for (+)
2013-09-08 20:01:20	-->	sferry (~samuel@173-23-232-28.client.mchsi.com) has joined #haskell
2013-09-08 20:01:21	<--	sferry (~samuel@173-23-232-28.client.mchsi.com) has quit (Changing host)
2013-09-08 20:01:21	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-08 20:01:46	Tekmo	ParaSa1lin: So in this case the `cons` is our `step'` function and `nil` is `id
2013-09-08 20:01:52	Tekmo	ParaSa1lin: So we get:
2013-09-08 20:01:56	mm_freak_	danilo2: yes
2013-09-08 20:02:04	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-08 20:02:06	mm_freak_	danilo2: the exercise is:  write a Monad instance for that type
2013-09-08 20:02:09	Tekmo	ParaSa1lin: step' 1 (step' 2 id)
2013-09-08 20:02:17	mm_freak_	danilo2: you will fail, but i want you to see why =)
2013-09-08 20:02:20	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 268 seconds)
2013-09-08 20:02:41	Tekmo	Now, technically the entire thing is: `foldr step' id [1, 2] begin`, so let's also insert the `begin` at the end
2013-09-08 20:02:55	Tekmo	ParaSa1lin: step' 1 (step' 2 id) begin
2013-09-08 20:03:02	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-08 20:03:10	Tekmo	ParaSa1lin: Now let's expando ut the definition of `step'`
2013-09-08 20:03:18	Tekmo	ParaSa1lin: step' x k z = k $! step z x
2013-09-08 20:03:31	Tekmo	ParaSa1lin: In the context of our list, that first `step'` will expand out to
2013-09-08 20:03:42	Tekmo	x = 1
2013-09-08 20:03:46	-->	AleXoundOS (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-08 20:03:52	Tekmo	k = step' 2 id
2013-09-08 20:03:52	Tekmo	z = begin
2013-09-08 20:04:02	<--	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-08 20:04:07	wereSheep	pressing ^C while in `cabal repl` and a :main is running kills the repl instead of interrupting the actual application. Is that intentional?
2013-09-08 20:04:10	Tekmo	k $! step z x = step' 2 id $! step begin 1
2013-09-08 20:04:12	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 20:04:26	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-08 20:04:27	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-08 20:04:30	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-08 20:04:32	Tekmo	ParaSa1lin: Now we expand the next `step'`
2013-09-08 20:04:38	Tekmo	x = 2
2013-09-08 20:04:42	Tekmo	k = id
2013-09-08 20:04:44	Tekmo	z = step begin 1
2013-09-08 20:04:49	-->	phienone_ (~ph@nappo.lnet.fi) has joined #haskell
2013-09-08 20:04:52	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-08 20:04:52	danilo2	mm_frak_ - ok but how it should be used? I understand that you want to see something like: runState (\x -> do put 15) should return the usesPut somehow? or where this usesPut should be used? (I'm sorry for this maybe silly queston, but I do not completely see the usage you want)
2013-09-08 20:05:39	Tekmo	k $! step z x = id $! step (step begin 1) 2
2013-09-08 20:05:56	-->	markcw (~jack@c-67-167-203-152.hsd1.il.comcast.net) has joined #haskell
2013-09-08 20:05:57	Tekmo	Notice that `step begin 1` was strictly evaluated by the previous step
2013-09-08 20:06:09	Tekmo	And now once we apply `step ... 2` to that we strictly evaluate it again
2013-09-08 20:06:21	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Remote host closed the connection)
2013-09-08 20:06:26	Tekmo	And in this case we're done
2013-09-08 20:06:34	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-08 20:06:35	mm_freak_	danilo2: the type of usesPut is:  usesPut :: State s a -> Bool
2013-09-08 20:06:37	inkjetunito	a-ha. the downside of Haskell must be long compile times :p
2013-09-08 20:06:41	-->	sj4nz (~simon_jan@98.156.105.243) has joined #haskell
2013-09-08 20:06:41	danilo2	mm_freak_: you've written as an example "usesPut (return "blah") = False" - but the types does not match - coudl you please explain the usage of such custom monad I should write? :)
2013-09-08 20:06:44	<--	ihm1_ (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 20:06:53	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 20:06:58	-->	felipecortez (~felipecor@189.124.230.5) has joined #haskell
2013-09-08 20:06:58	Tekmo	ParaSa1lin: So the end result is we compute `step (step begin 1) 2`, strictly evaluating each sub-result along the way
2013-09-08 20:06:59	danilo2	mm_freak_: ah ok :)
2013-09-08 20:07:13	<--	sj4nz (~simon_jan@98.156.105.243) has left #haskell
2013-09-08 20:07:18	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-08 20:07:29	mm_freak_	danilo2: its usage is pretty much the same as regular state monads, but with one additional feature:  you can ask without running the computation whether it changes its state long the way
2013-09-08 20:07:31	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-08 20:07:35	mm_freak_	(potentially)
2013-09-08 20:08:02	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-08 20:08:26	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 240 seconds)
2013-09-08 20:09:09	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-08 20:09:22	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-08 20:09:40	-->	snearch (~snearch@brln-4d0c7a50.pool.mediaWays.net) has joined #haskell
2013-09-08 20:10:08	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-08 20:10:13	-->	Thomas (~Thomas___@c-24-7-113-8.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 20:10:21	<--	Thomas (~Thomas___@c-24-7-113-8.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-08 20:10:33	<--	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has quit (Remote host closed the connection)
2013-09-08 20:10:35	mkramer	what does O(n\c)/ mean, e.g. in the documentation for Data.ByteString.Lazy#drop
2013-09-08 20:11:11	mkramer	That means it's n in the number of bytes to drop?
2013-09-08 20:12:01	mkramer	or that it might need to fill a new buffer chunk?
2013-09-08 20:12:05	kanishka	What a typical circumstance you find yourself using  (Data.Functor's) <$ ?
2013-09-08 20:12:07	monochrom	it is O(n/c). n is number of bytes. c is number of bytes per chunk, usually 64KB
2013-09-08 20:12:26	hpaste	enthropy pasted “is there a par mapM_?” at http://lpaste.net/92745
2013-09-08 20:12:28	-->	trinithis (~trinithis@c-24-7-113-8.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 20:12:32	monochrom	"O(n\c)/" is a typo
2013-09-08 20:12:36	fryguybob	O(n\c)/ is when this guy \o/ gets stuck in O(n)
2013-09-08 20:12:39	danilo2	mm_freak_: Mybe I am wrong, but this is not possible, because each computaton depends on the previous ones result, so we cannot execute something "in the middle", without exeuting the whole code
2013-09-08 20:12:40	hpc	kanishka: i would expect mostly in parsers
2013-09-08 20:12:42	-->	execut3 (~shesek@IGLD-84-228-91-224.inter.net.il) has joined #haskell
2013-09-08 20:13:04	mkramer	oh, so it's warning me that it filling buffer chunks is amortized over this operation
2013-09-08 20:13:17	monochrom	I don't know about that
2013-09-08 20:13:20	mm_freak_	danilo2: exactly
2013-09-08 20:13:29	mm_freak_	danilo2: and that's where arrows come in =)
2013-09-08 20:13:38	monochrom	I don't think any amount of big-O or n/c is enough to say either way
2013-09-08 20:13:49	mm_freak_	danilo2: the usesPut flag is a static piece of information
2013-09-08 20:14:01	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-08 20:14:10	danilo2	mm_freak_ - great, so we can do with arrows **everything**, as with monads? Or does they have some downsides?
2013-09-08 20:14:20	monochrom	but n/c is written because some people may refuse to take c as constant
2013-09-08 20:14:31	-->	sj4nz (~simon_jan@98.156.105.243) has joined #haskell
2013-09-08 20:14:36	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Client Quit)
2013-09-08 20:14:39	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-09-08 20:14:40	<--	shesek (~shesek@IGLD-84-228-1-112.inter.net.il) has quit (Ping timeout: 268 seconds)
2013-09-08 20:14:42	mm_freak_	danilo2: the arrow interface is less powerful, meaning that it is more general
2013-09-08 20:14:55	mm_freak_	danilo2: just like Functor is less powerful than Monad, but more general
2013-09-08 20:15:12	staafl	mm_freak_, define "powerful"
2013-09-08 20:15:13	monochrom	but it's amazing how humans can "read between the lines" where there is nothing to read, and make things up
2013-09-08 20:15:20	trinithis	Say I have the type (a b). I know (a) is a higher kinded type, but is there a specific name for this type of type?
2013-09-08 20:15:29	monochrom	today is probably a prime-numbered day
2013-09-08 20:15:36	<--	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has quit (Remote host closed the connection)
2013-09-08 20:15:42	mm_freak_	danilo2: next exercise…  you know that you can't write a Monad instance…  try to write an Applicative instance
2013-09-08 20:15:48	mm_freak_	staafl: less expressive
2013-09-08 20:15:51	-->	dubsg (~dubsg@2601:9:5b00:10d:9cc8:99ce:34dc:80e3) has joined #haskell
2013-09-08 20:15:58	geekosaur	heh
2013-09-08 20:16:07	staafl	mm_freak_, that's an interesting definition
2013-09-08 20:16:11	danilo2	mm_freak_: Ok, I'm simply searching for an example where arrows can do something monads cannot (like the example with the satate - I would love to see its arrows implementation)
2013-09-08 20:16:26	mm_freak_	danilo2: we're getting there
2013-09-08 20:16:33	mm_freak_	danilo2: write the Applicative instance
2013-09-08 20:16:50	<--	CapitanK (~CaptainK@181.38.16.58) has quit (Read error: Connection reset by peer)
2013-09-08 20:17:05	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 20:17:15	danilo2	mm_freak_: heh :D Ok I'll try. I know it would be possible (or I suppose so), but give me a moment :)
2013-09-08 20:17:31	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Operation timed out)
2013-09-08 20:17:54	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 20:17:54	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 20:17:55	--	ihm1_ is now known as ihm1
2013-09-08 20:18:09	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-09-08 20:18:10	<--	wereSheep (bc3fac67@gateway/web/freenode/ip.188.63.172.103) has quit (Quit: Page closed)
2013-09-08 20:18:52	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-08 20:18:56	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-08 20:19:14	kanishka	hpc: can't imagine the example, but I'll keep it in back of my mind
2013-09-08 20:19:24	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-08 20:19:39	ParaSa1lin	Tekmo, hm, this seems to be good explanation http://stackoverflow.com/questions/6172004/writing-foldl-using-foldr
2013-09-08 20:19:49	<--	gustavn (~Gustav@31.210.251.9) has quit (Quit: Leaving)
2013-09-08 20:20:01	Tekmo	ParaSa1lin: Yeah, that one is good
2013-09-08 20:20:13	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-08 20:21:22	danilo2	mm_freak_: Do I understand good the usage of such instane? Do you want to see    usesPut(pure () <$> put <*> pure 15) to return True?
2013-09-08 20:22:36	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-08 20:22:42	mm_freak_	danilo2: does it use 'put'?
2013-09-08 20:22:43	<--	ulfdoz (~mary@p5B38A3CC.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-08 20:23:06	mm_freak_	danilo2: (i'll ignore the type error)
2013-09-08 20:23:19	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 20:23:29	danilo2	mm_freak_: Yeah, I see there is a type error. Wait a minute :)
2013-09-08 20:23:53	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-08 20:24:02	<--	_d3f (~gnu@46.183.216.234) has quit (Read error: Operation timed out)
2013-09-08 20:24:03	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-08 20:24:15	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-08 20:24:29	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 20:24:58	Tekmo	danilo2: Well, think about some simple equations that this must satisfy
2013-09-08 20:25:06	Tekmo	danilo2: Obviously: usesPut (put x) = True
2013-09-08 20:25:11	<--	scripty (~scripty@79.141.160.64) has quit (Read error: Connection reset by peer)
2013-09-08 20:25:17	Tekmo	danilo2: Similarly: usesPut (pure x) = False
2013-09-08 20:25:33	Tekmo	danilo2: And: usesPut get = False
2013-09-08 20:25:52	Tekmo	danilo2: So now that we have the base cases, let's consider the recursive case
2013-09-08 20:25:57	tpsinnem	is there a package that might implement various basic dependent types on top of the singletons package or some such?
2013-09-08 20:26:03	Tekmo	danilo2: usesPut (f <*> x) = ?
2013-09-08 20:26:07	tpsinnem	like 'Vect' etc
2013-09-08 20:26:25	-->	tac (~tac-tics@2602:306:bdb4:5100:805:d090:8e0c:4725) has joined #haskell
2013-09-08 20:26:35	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-09-08 20:27:53	hpaste	enthropy annotated “is there a par mapM_?” with “is there a par mapM_? (annotation)” at http://lpaste.net/92745#a92746
2013-09-08 20:27:54	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-08 20:27:56	-->	shesek (~shesek@87.68.18.255.cable.012.net.il) has joined #haskell
2013-09-08 20:27:56	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-09-08 20:28:08	danilo2	Tekmo: Ok usesPut (f <*> x) = usesPut f || usesPut x , BUT the problem for me right now is other - how we would use the "put" in applicative style - will it be something like "pure () <$ put 15" ?
2013-09-08 20:28:11	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-09-08 20:28:28	mm_freak_	danilo2: ignore that problem for now
2013-09-08 20:28:33	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 20:28:44	-->	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has joined #haskell
2013-09-08 20:29:04	-->	l1ons (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has joined #haskell
2013-09-08 20:29:10	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 20:29:16	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-08 20:29:19	mm_freak_	let's have a working Applicative, then we will explore its (quite limited) expressive power
2013-09-08 20:29:28	danilo2	mm_freak_, Tekmo, ok, but - how would you define "usesPut (put x) = True" - put is a function, we cannot pattern match over function as far as I know
2013-09-08 20:29:44	<--	artyomkazak (~artyomkaz@94.25.228.16) has quit (Ping timeout: 260 seconds)
2013-09-08 20:29:48	Tekmo	danilo2: You assume that put is a function, but it might not be
2013-09-08 20:29:58	Tekmo	I mean, `put` might be a function
2013-09-08 20:30:01	mm_freak_	danilo2: put s = State True (\_ -> (s, ()))
2013-09-08 20:30:01	Tekmo	But, `put x` might not be
2013-09-08 20:30:20	nitin2	Does anyone know a Haskell introduction based on algebra?
2013-09-08 20:30:31	<--	execut3 (~shesek@IGLD-84-228-91-224.inter.net.il) has quit (Ping timeout: 260 seconds)
2013-09-08 20:30:32	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-08 20:30:34	danilo2	mm_freak_, Tekmo: Ah ok, brb
2013-09-08 20:30:35	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-08 20:30:43	mm_freak_	danilo2: remember that usesPut is not a function you write…  it's a field of the State constructor
2013-09-08 20:31:04	edvo	In http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/ it says that the numbers of values of type `a -> b` is b^a. This seems plausible I have some problems when `a ~ Void`. For instance the number of values of type `Void -> Bool` should be 2^0 = 1. But what is this only function of this type then?
2013-09-08 20:31:27	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 20:31:50	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-08 20:32:01	-->	stolaruk (~stolaruk@99-73-150-159.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-08 20:32:04	Tekmo	absurd
2013-09-08 20:32:12	Tekmo	absurd :: Void -> a
2013-09-08 20:32:25	danilo2	mm_freak_: I know :) brb
2013-09-08 20:32:49	edvo	I can see at least two functions: const True and const False. But I guess this is not meant here.
2013-09-08 20:33:00	erisco	:t iterate
2013-09-08 20:33:01	mm_freak_	edvo: it's the empty function
2013-09-08 20:33:02	lambdabot	(a -> a) -> a -> [a]
2013-09-08 20:33:14	edvo	Mathematically it would be an empty set
2013-09-08 20:33:16	mm_freak_	edvo: the empty function is such that you can't actually call it
2013-09-08 20:33:25	mm_freak_	because you can't construct its argument
2013-09-08 20:33:37	edvo	I see
2013-09-08 20:33:39	mm_freak_	note that we pretend that bottom does not exist
2013-09-08 20:33:42	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-08 20:34:00	monochrom	yes, the empty set represents the unique function from Void to Bool
2013-09-08 20:34:06	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-08 20:34:17	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-08 20:34:21	edvo	So const True and const False are actually the same in this case, because they have the same output for each possible argument
2013-09-08 20:34:31	edvo	makes sense, thank you
2013-09-08 20:34:37	mm_freak_	edvo: yeah, you could look at it that way
2013-09-08 20:35:30	stolaruk	I just finished reading LYAH and I'm thinking about writing a text adventure game. Any advice on how I might handle state?
2013-09-08 20:35:38	<--	fft (~fft@69.159.167.10) has quit (Quit: fft)
2013-09-08 20:36:02	<--	snearch (~snearch@brln-4d0c7a50.pool.mediaWays.net) has quit (Quit: Verlassend)
2013-09-08 20:36:04	ocharles	stolaruk: two suggestions - one is "just thread it!", and the other is "use a State monad".
2013-09-08 20:36:05	mm_freak_	stolaruk: as a haskell beginner you should probably just use recursion
2013-09-08 20:36:42	ocharles	stolaruk: in the first part, i mostly mean that you return whatever values some other function needs
2013-09-08 20:36:44	ocharles	and pass it all explictly
2013-09-08 20:37:17	mm_freak_	stolaruk: to put it differently, model your game as a function
2013-09-08 20:37:26	stolaruk	mm_freak_: I don't understand, how can recursion be used to handle state
2013-09-08 20:37:32	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 20:37:45	mm_freak_	stolaruk: f currentState = … f newState …
2013-09-08 20:37:47	stolaruk	ocharles: so like pass around a World thing or something like that
2013-09-08 20:37:48	leroux	stolaruk: You pass the state around.
2013-09-08 20:37:51	aristid	Tekmo: earlier today, xplat mentioned to me that he doesn't like putback based parsing, which the current pipes-parse is also an example of, he would prefer something like peek/consume. did you consider that alternative design approach when designing pipes-parse?
2013-09-08 20:37:52	Tekmo	stolaruk: Simple example is a function that prints an increasing list of numbers
2013-09-08 20:38:08	Tekmo	stolaruk: printAllTheThings n = print n >> printAllTheThings (n + 1)
2013-09-08 20:38:20	ocharles	stolaruk: not the whole world, just whatever things need
2013-09-08 20:38:22	ion	Generalized: succ n
2013-09-08 20:38:30	stolaruk	ok
2013-09-08 20:38:37	<--	alvdav (~quassel@I63-5O.static.anw.at) has quit (Read error: Operation timed out)
2013-09-08 20:38:41	Tekmo	aristid: What is the semantic difference between those two alternatives?
2013-09-08 20:38:46	<--	felipecortez (~felipecor@189.124.230.5) has quit (Remote host closed the connection)
2013-09-08 20:38:49	ion	Safer: [n..]
2013-09-08 20:39:02	mm_freak_	stolaruk: a state "change" really just denotes calling a function with a different argument
2013-09-08 20:39:09	aristid	Tekmo: well for example it is possible to put back thing that were never in the input.
2013-09-08 20:39:21	monochrom	stolaruk: do you find my http://lpaste.net/52480 useful?
2013-09-08 20:39:24	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 20:39:24	Tekmo	aristid: I consider that fine
2013-09-08 20:39:35	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 20:39:39	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 20:39:43	Tekmo	aristid: `pipes-parse` does not assign a meaning to the producer stored in the `StateT`
2013-09-08 20:39:51	-->	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has joined #haskell
2013-09-08 20:39:53	stolaruk	monochrom: I'm checking it out now
2013-09-08 20:39:55	bennofs	Is it possible / a good idea to use netwire for GUIs?
2013-09-08 20:40:35	mm_freak_	bennofs: what kind of GUI?
2013-09-08 20:40:39	aristid	Tekmo: hum i'm not the best guy to argue the merits of non-putback parsing, i'm just curious
2013-09-08 20:40:44	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-09-08 20:40:49	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Client Quit)
2013-09-08 20:40:52	Tekmo	aristid: Besides, all the pushback stuff is just an implementation aid on the road to implementing the truly useful things like the high-level functions of `Producer`s
2013-09-08 20:41:21	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 20:41:24	Tekmo	aristid: Things like `groupBy` and `splitOn` are the true high-level interface
2013-09-08 20:42:15	stolaruk	monochrom: Yes I see, that's cool!
2013-09-08 20:42:22	-->	ulfdoz (~mary@p5B38A3CC.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 20:42:47	bennofs	mm_freak_: I was thinking about writting a QML-based GUI (QML is a language to write Qt applications).
2013-09-08 20:42:52	aristid	Tekmo: and those don't expose any StateT stuff but are just functions of Producers anyways? fair enough
2013-09-08 20:42:57	Tekmo	aristid: Right
2013-09-08 20:43:04	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 20:43:12	Tekmo	aristid: StateT is just an implementer's concern on the way to implementing those functions
2013-09-08 20:43:12	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-08 20:43:14	mm_freak_	bennofs: the current major version of netwire is unsuitable for widget-based UIs…  you'll have to wait for netwire 5
2013-09-08 20:43:25	aristid	Tekmo: hum possibly stupid question... might functions of Consumers also be workable?
2013-09-08 20:43:46	Tekmo	aristid: I think so
2013-09-08 20:43:50	dissipate_	haskell noob here. is haskell considered good for systems programming?
2013-09-08 20:44:03	aristid	Tekmo: but functions of Producer make for the more natural API interface?
2013-09-08 20:44:05	mm_freak_	bennofs: it's mostly reader for use though, so you can get the repository and experiment with it:  http://hub.darcs.net/ertes/netwire
2013-09-08 20:44:07	jmcarthur	dissipate_: define systems programming
2013-09-08 20:44:18	Tekmo	aristid: Yeah, I prefer to model things as data structures rather than folds
2013-09-08 20:44:24	mm_freak_	reader?
2013-09-08 20:44:27	mm_freak_	ready
2013-09-08 20:44:27	aristid	Tekmo: well i suppose in iteratee land everything is done with functions of consumers, so it must be possible
2013-09-08 20:44:40	mm_freak_	i've been programming haskell for too long…
2013-09-08 20:44:48	Tekmo	aristid: Also, the emphasis on functions of `Producer`s is going to be more natural for people coming from a language with generators
2013-09-08 20:44:49	dissipate_	jmcarthur, something that includes low level memory management and hardware interrupts and IO
2013-09-08 20:44:54	aristid	mm_freak_: you're the guy who actually likes iteratees, right? :P
2013-09-08 20:45:18	luite	is it possible to build the test suite program with cabal, without running it?
2013-09-08 20:45:36	mm_freak_	aristid: i wouldn't use them, but i like their elegance
2013-09-08 20:45:40	<--	nomeata (nobody@nomeata.de) has quit (Quit: Client exiting)
2013-09-08 20:45:42	jmcarthur	dissipate_: you can use haskell DSLs to generate C for stuff like that, but running a ghc-generated binary in the environment is likely to be not worth that hassle
2013-09-08 20:45:51	jmcarthur	*in that environment
2013-09-08 20:45:55	aristid	mm_freak_: what would you actually use then? oO
2013-09-08 20:46:12	mm_freak_	aristid: pipes
2013-09-08 20:46:25	dissipate_	jmcarthur, i see. thanks for the info.
2013-09-08 20:46:28	aristid	mm_freak_: good answer ;)
2013-09-08 20:46:33	mbrock	dissipate_: check out House, it's more of a research project but you might find it interesting: http://programatica.cs.pdx.edu/House/
2013-09-08 20:46:40	ion	dissipate: I’m going to use Rust for a project on an Arm system for which Haskell might sadly not be appropriate.
2013-09-08 20:46:41	aristid	mm_freak_: i suppose that's more out of ecosystem concerns?
2013-09-08 20:47:00	dissipate_	ion, so Rust is good for systems programming?
2013-09-08 20:47:07	aristid	ion: does rust have ARM support already?
2013-09-08 20:47:13	mm_freak_	aristid: not really
2013-09-08 20:47:21	ion	aristid: Yes
2013-09-08 20:47:24	ion	:-P
2013-09-08 20:47:28	ion	At least it worksforme™
2013-09-08 20:47:29	mm_freak_	ecosystemwise the enumerator library is still superior
2013-09-08 20:47:47	aristid	it wouldn't be good for prices of stuff i suppose but i kinda want intel to win in the mobile space so i don't need to worry about compilers supporting non-x86 :>
2013-09-08 20:47:48	mm_freak_	and conduit even more
2013-09-08 20:48:26	aristid	mm_freak_: ok so you like iteratees but prefer pipes out of non-ecosystem reasons. which are those reasons?
2013-09-08 20:48:27	-->	CapitanK (~CaptainK@181.179.33.101) has joined #haskell
2013-09-08 20:48:40	mm_freak_	aristid: elegance and speed =)
2013-09-08 20:48:45	<--	tac (~tac-tics@2602:306:bdb4:5100:805:d090:8e0c:4725) has quit (Ping timeout: 245 seconds)
2013-09-08 20:48:47	elliott	conduit surely beats enumerator for ecosystem
2013-09-08 20:48:57	mm_freak_	although iteratees probably outperform pipes
2013-09-08 20:49:26	dissipate_	ion, is Rust a replacement for C or C++?
2013-09-08 20:49:40	Hannibal_Smith	Non performance critical C++
2013-09-08 20:49:47	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Quit: leaving)
2013-09-08 20:49:57	ion	dissipate: It’s a lower-level language that provides more safety guarantees than, say, C or C++, and easy IPC between lightweight, supervised threads inspired by Erlang. There’s per-thread garbage collection and you can choose avoid GC altogether where appropriate. Those are the main reasons why i’m going to use it.
2013-09-08 20:50:00	 *	aristid hopes Tekmo gets pipes to a state where snoyman is convinced to change conduit to be a small wrapper around pipes :D
2013-09-08 20:50:17	--	sm-afk is now known as sm
2013-09-08 20:50:17	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 20:50:23	dissipate_	mbrock, thanks for that link. i'll check that out.
2013-09-08 20:50:25	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 20:50:43	stolaruk	Ppl are talking a lot about Rust
2013-09-08 20:50:47	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 240 seconds)
2013-09-08 20:50:49	dissipate_	ion, how does it compare to golang?
2013-09-08 20:51:08	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-08 20:51:14	mm_freak_	aristid: add predefined combinators for yielding and resuming
2013-09-08 20:51:18	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-09-08 20:51:29	mm_freak_	that's michael's main complaint about pipes
2013-09-08 20:51:37	sclv	golang and rust are v. different approaches
2013-09-08 20:51:53	<--	tel (~tel@209.249.230.2) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-08 20:51:53	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Client Quit)
2013-09-08 20:51:53	aristid	mm_freak_: the "exception handling" concerns are already out of the way?
2013-09-08 20:52:00	sclv	go is about making c more modern and syntactically lightweight + having concurrency
2013-09-08 20:52:02	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-08 20:52:03	Hannibal_Smith	Haskell solves concurrency problem, much better than Go, or Rust
2013-09-08 20:52:04	ion	dissipate: For one, AFAIU Rust provides more safety guarantees.
2013-09-08 20:52:15	merijn	aristid: I dunno what they were, but the new pipes-safe has new and nicer exception handling
2013-09-08 20:52:26	sclv	rust is really about memory safety and low level systems design
2013-09-08 20:52:30	aristid	merijn: without masking exceptions!
2013-09-08 20:52:33	Redz	if i want something like
2013-09-08 20:52:34	Redz	data TilList a b = TlNode a (TilList a b) | TlEnd b
2013-09-08 20:52:34	Redz	what should i look for?
2013-09-08 20:52:40	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-08 20:52:42	erisco	monochrom, I suppose what I meant was
2013-09-08 20:52:54	<--	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has quit (Ping timeout: 268 seconds)
2013-09-08 20:53:01	sclv	the 'aim' of rust is to write code one would reach for C++ for more, while the 'aim' of go is to write code one would reach for C for, in my opinion
2013-09-08 20:53:01	dissipate_	ion, ever try Racket?
2013-09-08 20:53:04	edvo	pipes-safe has a very nice interface, but does not provide prompt finalization in all cases, as far as i know
2013-09-08 20:53:05	merijn	aristid: Right not it masks exceptions, except in await/yield, so you can still get interrupted, just not in the middle of something
2013-09-08 20:53:07	 *	hackagebot hole 0.1 - Higher kinded type removal  http://hackage.haskell.org/package/hole-0.1 (ThomasEding)
2013-09-08 20:53:09	 *	hackagebot hole 0.1.1 - Higher kinded type removal  http://hackage.haskell.org/package/hole-0.1.1 (ThomasEding)
2013-09-08 20:53:10	mm_freak_	aristid: not sure, haven't tried the latest pipes-safe yet
2013-09-08 20:53:26	danilo2	mm_freak_: Ok,could you give me a hint what would be the equivalent of fmap over State s a ?
2013-09-08 20:53:27	ion	dissipate: Not so far.
2013-09-08 20:53:32	NemesisD	i'm playing around a bit with benchmarking and sparks. what would be the best way to parallelize a naive, recursive fibonnaci solver?
2013-09-08 20:53:33	mm_freak_	but in any case you can always put a ResourceT below proxies
2013-09-08 20:53:41	erisco	monochrom, say I make a map. in a mutable world, I can update the thing being mapped and all is well. however, here, I need to update the thing, remove the old thing from the map, and put in the new one
2013-09-08 20:53:46	mm_freak_	NemesisD: 'par'
2013-09-08 20:53:51	<--	petapetapeta (~quassel@130.225.165.43) has quit (Read error: Connection reset by peer)
2013-09-08 20:53:54	dissipate_	ion, http://docs.racket-lang.org/more/
2013-09-08 20:54:01	NemesisD	in my testing using par and pseq i see a lot of fizzled sparks and it runs twice as slow as the non parallelized one
2013-09-08 20:54:16	mm_freak_	danilo2: fmap f (State ch g) = State ch (\s -> …)
2013-09-08 20:54:17	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-08 20:54:38	edvo	mm_freak_: i have not tried, but i am not sure if this will help. the main problem is premature termination
2013-09-08 20:54:48	aristid	merijn: oh i thought it doesn't mask anymore? i guess i must have misread
2013-09-08 20:54:57	mm_freak_	NemesisD: make sure you use sharing
2013-09-08 20:55:12	mm_freak_	NemesisD: fib n = let x = fib (n - 1); y = fib (n - 2) in x `par` y `pseq` x + y
2013-09-08 20:55:13	<--	sj4nz (~simon_jan@98.156.105.243) has left #haskell
2013-09-08 20:55:57	-->	akurei (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-08 20:55:57	mm_freak_	NemesisD: as a side note you can't parallelize the memoizing fib function
2013-09-08 20:55:58	<--	CapitanK (~CaptainK@181.179.33.101) has quit (Read error: Connection reset by peer)
2013-09-08 20:56:00	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-08 20:56:11	hpaste	NemesisD pasted “Naive fib parallel” at http://lpaste.net/92747
2013-09-08 20:56:18	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 20:56:24	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-08 20:57:12	mm_freak_	NemesisD: that should work
2013-09-08 20:57:23	supki	Redz: that looks like Free ((,) a) b, see free package
2013-09-08 20:57:55	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-08 20:58:00	NemesisD	mm_freak_: yeah it works. compiled with ghc --make -O2 -threaded -rtsopts, running with +RTS -N4 it seems about twice as slow for the fib of 40 than the sequential version
2013-09-08 20:58:02	-->	blume_ (~tani@e179134032.adsl.alicedsl.de) has joined #haskell
2013-09-08 20:58:15	-->	CapitanK (~CaptainK@181.179.102.88) has joined #haskell
2013-09-08 20:58:34	dwcook	Is it possible to limit stack space so I don't accidentally freeze up my whole system due to a programming error?
2013-09-08 20:58:43	<--	Tritlo (~Tritlo@85-220-91-44.dsl.dynamic.simnet.is) has quit (Ping timeout: 264 seconds)
2013-09-08 20:58:54	elliott	it comes pre-limited
2013-09-08 20:58:56	geekosaur	stack is rarely the problem, it's already pretty limited by default
2013-09-08 20:59:06	geekosaur	perhaps you want to limit the heap?
2013-09-08 20:59:11	merijn	aristid: Oh wait, it doesn't use mask, no. I misremembered
2013-09-08 20:59:14	dwcook	Hmm, well I accidentally let a bunch of thunks build up and it froze up my system for a bit
2013-09-08 20:59:15	<--	amathew (~Adium@184.152.8.103) has quit (Quit: Leaving.)
2013-09-08 20:59:25	geekosaur	(remember haskell does not work like other languages, stack doesn't do what you think)
2013-09-08 20:59:27	merijn	aristid: Relevant quote: "Note that the MonadCatch instance for Proxy provides weaker versions of mask and uninterruptibleMask that do not completely prevent asynchronous exceptions. Instead, they provide a weaker guarantee that asynchronous exceptions will only occur during awaits or yields and nowhere else."
2013-09-08 20:59:31	dwcook	Noted
2013-09-08 20:59:46	mm_freak_	NemesisD: can't confirm that
2013-09-08 20:59:48	dwcook	Basically, I applied modifyTVar a bunch of times without reading it, and I believe that is what caused it
2013-09-08 21:00:06	mm_freak_	NemesisD: needs 10.3 secs with one thread, 3.3 secs with four threads for me
2013-09-08 21:00:18	mm_freak_	397% CPU utilization
2013-09-08 21:00:28	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 264 seconds)
2013-09-08 21:00:51	<--	shesek (~shesek@87.68.18.255.cable.012.net.il) has quit (Ping timeout: 260 seconds)
2013-09-08 21:00:57	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-08 21:01:05	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-08 21:01:08	dwcook	Okay yay, using modifyTVar' relieves that
2013-09-08 21:01:11	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 21:01:15	Redz	supki: thank you, i'll take a look at.
2013-09-08 21:01:19	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:01:24	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-08 21:01:40	<--	blume (~tani@e179169204.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-08 21:01:53	-->	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has joined #haskell
2013-09-08 21:01:53	dwcook	Would accumulating a super huge Integer value would have a similar problem?
2013-09-08 21:02:09	aristid	merijn: so you were _effectively_ right, just not in the implementation?
2013-09-08 21:02:34	merijn	aristid: No, read carefully, that's the behaviour of explicitly using mask/uninterruptibleMask
2013-09-08 21:02:43	mm_freak_	NemesisD: see my annotation
2013-09-08 21:02:49	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-08 21:02:50	merijn	aristid: bracket, finally, et al. don't mask
2013-09-08 21:02:50	aristid	merijn: oh.
2013-09-08 21:03:17	-->	artyomkazak (~artyomkaz@94.25.228.16) has joined #haskell
2013-09-08 21:03:22	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 21:03:25	identity	I've been forced to learn python for school, and after using haskell for so long it just feels .. thrown together, without the rigid type system
2013-09-08 21:03:27	merijn	Which is a much nicer API to work with
2013-09-08 21:03:29	NemesisD	mm_freak_: what's the significant difference there? using integers?
2013-09-08 21:03:36	mm_freak_	NemesisD: no, works for Int to
2013-09-08 21:03:40	monochrom	dwcook: if you want to limit, limit heap. (stack is already limited to 8MB.) +RTS -M1M -RTS  (1MB heap)
2013-09-08 21:03:42	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 21:03:50	mm_freak_	NemesisD: although unlikely the difference may be 'where' vs. 'let'
2013-09-08 21:04:07	<--	determinant_ (~determina@183.83.58.77) has quit (Ping timeout: 260 seconds)
2013-09-08 21:04:12	dwcook	monochrom, that will prevent tons of thunks from building up?
2013-09-08 21:04:14	 *	monochrom is declaring war at stack limits
2013-09-08 21:04:27	monochrom	that will abort your program
2013-09-08 21:04:44	 *	monochrom is also declaring war at unlimited heap
2013-09-08 21:04:46	dwcook	I figured, but does that have to do with thunks?
2013-09-08 21:04:55	monochrom	yes
2013-09-08 21:04:59	dwcook	Okay, cool. Thanks.
2013-09-08 21:05:24	dwcook	What does the stack do, then?
2013-09-08 21:05:29	mm_freak_	NemesisD: works with 'where' as well for me
2013-09-08 21:05:41	geekosaur	it's a pattern match stack, not a call stack. thunks build up on the heap
2013-09-08 21:05:50	-->	konundra (~eunoia7@ec24.uo.earlham.edu) has joined #haskell
2013-09-08 21:05:51	dwcook	Oh, I see.
2013-09-08 21:06:06	geekosaur	mostly
2013-09-08 21:06:09	mm_freak_	NemesisD: my concern was that your x and y may be polymorphic, but that's not actually possible
2013-09-08 21:06:16	-->	tel (~tel@209.249.230.2) has joined #haskell
2013-09-08 21:06:18	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-08 21:06:37	mm_freak_	also the proper type signature is probably this:  fib :: Int -> Integer
2013-09-08 21:06:46	<--	akurei (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has quit (Read error: Operation timed out)
2013-09-08 21:06:51	mm_freak_	it doubles the performance for me
2013-09-08 21:06:53	monochrom	when you do 1+(2+(3+(4+..., you build 1+(2+(3+(4+... on the heap. then you traverse it with the help of the stack (for bread crumbs)
2013-09-08 21:06:55	NemesisD	mm_freak_: your version runs in 21.66 seconds for me. 8.34 when typesig is Int -> Int
2013-09-08 21:07:02	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-08 21:07:04	geekosaur	procedural intuitions about stack vs. heap don't work so well in a non-strict language
2013-09-08 21:07:30	Targen	I just stumbled into something odd in lens-xml.  The signature for the (./) combinator is `Plated a => Traversal s t a a -> Traversal a a u v -> Traversal s t u v`, where each Traversal is universal in the Applicative: `type Traversal s t a b = Applicative f => (a -> f b) -> s -> f t`.  This restricts its usability as the combined traversals cannot have additional constraints!  Anyone run into this?
2013-09-08 21:07:42	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 21:07:46	monochrom	the same story goes for (...(1+2)+3)+4)+...
2013-09-08 21:08:13	danilo2	mm_freak_: I'm sorry that I'm making it so long, but I'm trying and testing around. I hope I'll finish it shortly :)
2013-09-08 21:08:16	mm_freak_	NemesisD: GHC 7.6.3 on i5
2013-09-08 21:08:27	mm_freak_	danilo2: take your time
2013-09-08 21:08:29	monochrom	therefore, both foldr(+) and foldl(+) use both O(n) heap and O(n) stack
2013-09-08 21:08:37	edvo	Ok I have tried. Using ResourceT in pipes also does not protect from premature termination and might miss prompt finalization (the same way that SafeT does)
2013-09-08 21:08:47	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 21:08:50	bjorkintosh	holy crap. when did this channel become so popular?
2013-09-08 21:09:05	bjorkintosh	there're 1172 characters here!
2013-09-08 21:09:05	Makoryu	Last week
2013-09-08 21:09:07	bjorkintosh	ah.
2013-09-08 21:09:09	Tekmo	edvo: The way you get prmopt finalization is to use `runSafeP`
2013-09-08 21:09:20	Taneb	bjorkintosh, it's been one of the largest channels on Freenode for a while now
2013-09-08 21:09:23	-->	akurei (~akurei@31.193.12.99) has joined #haskell
2013-09-08 21:09:33	bjorkintosh	weird!
2013-09-08 21:09:45	Tekmo	edvo: Whenever you run a `SafeT` block any dropped finalizers get called
2013-09-08 21:09:48	erisco	we'll have to open #haskell-meta just so people can talk about how awesome #haskell is
2013-09-08 21:09:50	edvo	Tekmo: yes I know. thats why I was saying in all cases
2013-09-08 21:09:56	NemesisD	mm_freak_: if i'm using Int -> Int, it runs in 8.34s for me, If I swap out your pars for x + y, runs in 4.2s. compiled with --make -threaded -O2 -rtsopts, run with +RTS -N4, GHC 7.6.3, i5 2520M @ 2.5ghz
2013-09-08 21:09:58	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-08 21:09:58	Targen	Pure functional languages and ancient chat technology clearly go hand-in-hand.
2013-09-08 21:10:10	merijn	bjorkintosh: When I started coming here (I'm guessing 3-4 years ago?) there were already 660+ users at any time
2013-09-08 21:10:15	Taneb	Targen, I think the Python channel is larger :P
2013-09-08 21:10:32	edvo	Tekmo: simple code: runSafeT . runEffect $ for (each file) $ \f -> readFile f >-> P.take 1 >-> P.stdoutLn
2013-09-08 21:10:35	Targen	Taneb: That’s unfair!  Their community is huge. ;)
2013-09-08 21:10:46	edvo	when the file has more than one line it is closed at the very end
2013-09-08 21:10:51	Taneb	Targen, yeah, but out community is awesome
2013-09-08 21:10:53	Tekmo	edvo: Change that to:
2013-09-08 21:11:02	bjorkintosh	yeah the python channel is bigger, but that is because there are several 1000s more python programmers.
2013-09-08 21:11:08	bjorkintosh	but i think this is everyone.
2013-09-08 21:11:09	Tekmo	edvo: runEffect $ for (each file) $ \f -> runSafeP $ readFile ...
2013-09-08 21:11:16	mm_freak_	NemesisD: ah, you mean the non-sparked version vs. the sparked one
2013-09-08 21:11:25	bjorkintosh	hello everyone.
2013-09-08 21:11:31	mm_freak_	NemesisD: that's actually reasonable, because you're creating lots and lots of microsparks
2013-09-08 21:11:44	NemesisD	mm_freak_: so is the granularity too small/variable?
2013-09-08 21:11:49	Taneb	bjorkintosh, there are almost 13k subscribers to the haskell subreddit
2013-09-08 21:11:52	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-08 21:11:55	mm_freak_	NemesisD: it works much better, if you parallelize only to a certain level…  let me try
2013-09-08 21:11:58	bjorkintosh	whoa!
2013-09-08 21:12:02	donri	SafeT first!
2013-09-08 21:12:05	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 21:12:06	edvo	Tekmo: yes, that works. But that requires manual intervention. As I understood, conduit provides prompt finalization under all circumstances.
2013-09-08 21:12:08	bjorkintosh	so there must be interesting work getting done in haskell.
2013-09-08 21:12:11	mm_freak_	NemesisD: too small…  par has no problem with variable granularity
2013-09-08 21:12:20	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:12:31	Tekmo	edvo: Are you sure about that?
2013-09-08 21:12:37	edvo	Tekmo: no
2013-09-08 21:12:44	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 21:12:57	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-08 21:13:00	Targen	langpop.com has some very interesting data.  There’s an enormous gap for Haskell between their metrics for use and discussion.
2013-09-08 21:13:03	edvo	I can try, though
2013-09-08 21:13:17	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-08 21:13:23	dissipate_	bjorkintosh, but how many of those python 'programmers' are real programmers?
2013-09-08 21:13:26	-->	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has joined #haskell
2013-09-08 21:13:50	mm_freak_	NemesisD: indeed, limited depth works very well
2013-09-08 21:13:53	Tekmo	edvo: So the reason I don't do what `conduit` does is for a few reasons
2013-09-08 21:13:59	dissipate_	bjorkintosh, a lot of the python 'programmers' i have run into are more like python scriptors
2013-09-08 21:14:04	bjorkintosh	dissipate_, they get paid to copy-paste. but they get paid regardless :)
2013-09-08 21:14:07	Tekmo	edvo: First, it's not associative, meaning that the order of finalizers changes depending on how you group things
2013-09-08 21:14:20	bjorkintosh	will i get paid to write haskell? not muy likely.
2013-09-08 21:14:20	dissipate_	bjorkintosh, cargo cult programming?
2013-09-08 21:14:24	Tekmo	edvo: The second reason is that the way conduit formulates it only works with one type of composition operator
2013-09-08 21:14:28	bjorkintosh	sure.
2013-09-08 21:14:30	merijn	dissipate_, bjorkintosh: THis is starting to go off-topic and flamey for no good reason
2013-09-08 21:14:36	mm_freak_	NemesisD: http://lpaste.net/92747
2013-09-08 21:14:39	<--	markcw (~jack@c-67-167-203-152.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 21:14:41	mm_freak_	see annotation
2013-09-08 21:14:49	Tekmo	edvo: With pipes you can safely single step pipes or use other combinators (ie. `for` and `(>~)`) and finalization works correctly
2013-09-08 21:14:50	bjorkintosh	you're right.
2013-09-08 21:14:52	monochrom	merijn++
2013-09-08 21:15:04	Tekmo	edvo: Whereas teh conduit approach means you must restrict yourself only to using one type of composition operator
2013-09-08 21:15:08	 *	monochrom is a complex programmer, not a real programmer
2013-09-08 21:15:19	merijn	monochrom: Anything for that sweet, sweet karma!
2013-09-08 21:15:21	mm_freak_	NemesisD: this version runs in 2.3 secs with one thread and 0.7 secs with four threads
2013-09-08 21:15:23	dissipate_	monochrom, what's a 'complex' programmer?
2013-09-08 21:15:31	nitin2	Does anyone know a Haskell introduction based on algebra?
2013-09-08 21:15:31	merijn	dissipate_: It's a joke :)
2013-09-08 21:15:37	merijn	dissipate_: complex vs real numbers
2013-09-08 21:15:40	monochrom	has a real part and an imaginary part
2013-09-08 21:15:46	bjorkintosh	nitin2, i know of one based on discrete mathematics.
2013-09-08 21:15:55	monochrom	think of the "imaginary part" as "knows theories"
2013-09-08 21:15:56	<--	tailcalled (~tailcalle@93-167-214-175-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 260 seconds)
2013-09-08 21:16:02	Targen	monochrom: I believe that’s called schizophrenia. ;)
2013-09-08 21:16:03	dissipate_	monochrom, that's a good one. :D
2013-09-08 21:16:08	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-08 21:16:09	inkjetunito	ghci is very nice, but is there an alternative with syntax highlighting and possibly even more editing aids?
2013-09-08 21:16:09	bjorkintosh	it is a good one.
2013-09-08 21:16:11	bjorkintosh	very good.
2013-09-08 21:16:19	bjorkintosh	inkjetunito, emacs.
2013-09-08 21:16:36	inkjetunito	bjorkintosh: thanks
2013-09-08 21:16:39	bjorkintosh	you normally write your code in an editor.
2013-09-08 21:16:43	NemesisD	mm_freak_: so what do you initially pass in as the first arg, which i'm assuming is depth
2013-09-08 21:16:47	edvo	Tekmo: don't get me wrong. I like the pipe API way more than conduit's. But that seems to be a disadvantage and I wonder if we could do better in pipes. We only need to run finalizers right after a premature termination
2013-09-08 21:16:49	bjorkintosh	it is a compiled language, afterall.
2013-09-08 21:16:58	zomg	emaghcs? =)
2013-09-08 21:17:04	bjorkintosh	sure.
2013-09-08 21:17:09	edvo	Tekmo: that is, we need to be able to
2013-09-08 21:17:11	inkjetunito	bjorkintosh: yeah, i do, but now in the learning phase i like quickly trying things out
2013-09-08 21:17:22	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-08 21:17:22	mm_freak_	NemesisD: 10
2013-09-08 21:17:30	zomg	I just use tmux, I can have a split terminal between ghci and vim
2013-09-08 21:18:08	 *	hackagebot cyclotomic 0.4 - A subfield of the complex numbers for exact calculation.  http://hackage.haskell.org/package/cyclotomic-0.4 (ScottWalck)
2013-09-08 21:18:09	mm_freak_	NemesisD: made another annotation that gets along without the extra argument
2013-09-08 21:18:18	Tekmo	edvo: Believe me, I've tried variations on what you propose and all of them have subtle flaws, flaws which are present in `conduit`
2013-09-08 21:18:22	mm_freak_	NemesisD: same running time
2013-09-08 21:18:32	<--	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has quit (Quit: Leaving...)
2013-09-08 21:18:34	-->	fractalizator (~fractaliz@e179047036.adsl.alicedsl.de) has joined #haskell
2013-09-08 21:18:38	<--	fractalizator (~fractaliz@e179047036.adsl.alicedsl.de) has left #haskell
2013-09-08 21:18:43	<--	kanishka (~chatzilla@c-71-234-170-219.hsd1.vt.comcast.net) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0/20130803193343])
2013-09-08 21:18:45	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2013-09-08 21:19:01	Targen	There are a few tricks to get syntax highlighting in GHCi output, but nothing too spectacular, last I checked.  Mostly just hooks that postprocess `show` output, so it’s not too reliable.
2013-09-08 21:19:02	<--	kuribas (~user@d54C430B0.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-08 21:19:07	Tekmo	edvo: Let me find an old conduit issue to demonstrate what I'm talking about
2013-09-08 21:19:09	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-08 21:19:22	Tekmo	edvo: https://github.com/snoyberg/conduit/pull/57
2013-09-08 21:19:28	-->	tac (~tac-tics@2602:306:bdb4:5100:21ab:149e:7886:87d3) has joined #haskell
2013-09-08 21:19:38	NemesisD	mm_freak_: thanks! that sure does make a pretty threadscope graph
2013-09-08 21:19:49	bjorkintosh	does haskell have decent QT hooks?
2013-09-08 21:19:59	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-08 21:20:10	-->	shesek (~shesek@87.68.18.255.cable.012.net.il) has joined #haskell
2013-09-08 21:20:32	Tekmo	edvo: To give you a higher-level answer to your question, the only way to get this 100% right and avoid the problems that `conduit` has is to use much more advanced type machinery like indexed monads, which is a huge pain
2013-09-08 21:20:34	inkjetunito	Targen: thanks
2013-09-08 21:20:35	NemesisD	i started down this road after watching a screencast where someone made a parallel fibonacci solver in elixer (erlang derivative) and ruby. was flabberghasted at how much machinery they used for it
2013-09-08 21:20:44	-->	agumonkey (~agu@170.158.70.86.rev.sfr.net) has joined #haskell
2013-09-08 21:20:53	Tekmo	edvo: So I decided it was easier to ask the user to place the `runSafeP` correctly than it was to teach them how to use indexed monads and override `do` notation
2013-09-08 21:21:09	edvo	Tekmo: I think you are right
2013-09-08 21:21:10	bjorkintosh	NemesisD, what do you mean by machinery?
2013-09-08 21:21:19	bjorkintosh	was it too many lines of code?
2013-09-08 21:21:38	mm_freak_	NemesisD: well, a proper memoizing/streaming fibonacci computer can't really be parallelized
2013-09-08 21:21:59	mm_freak_	and it's asymptotically faster than this naive version
2013-09-08 21:22:09	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 21:22:11	edvo	Tekmo: when I understand snoyberg correctly in the last comment, different design decisions have been taken. I actually agree, that associativity is more important than prompt finalization
2013-09-08 21:22:40	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-08 21:22:50	mm_freak_	i love the cases when you can parallelize an algorithm by replacing a 'map' by 'parMap rdeepseq' =)
2013-09-08 21:22:51	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-08 21:23:15	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:23:15	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 21:23:15	--	ihm1_ is now known as ihm1
2013-09-08 21:23:40	-->	earthy (~arthurvl@illipe.xs4all.nl) has joined #haskell
2013-09-08 21:23:48	hpaste	NemesisD pasted “erlang-in-ruby fibonacci solver o_O” at http://lpaste.net/92752
2013-09-08 21:24:09	mm_freak_	wow, that's really ugly
2013-09-08 21:24:14	danilo2	mm_freak_: I've got one problem - it seems so simple, but I simply getting type error - why this applicative instance does not work?: http://lpaste.net/92751
2013-09-08 21:24:20	<--	tero- (~tero@core.feriko.fi) has quit (Ping timeout: 260 seconds)
2013-09-08 21:24:25	mm_freak_	but they don't have lazy evaluation, so they can't really have 'par' either
2013-09-08 21:24:32	Tekmo	edvo: Associativity matters particularly in ensuring proper ordering of finalization
2013-09-08 21:24:45	<--	stolaruk (~stolaruk@99-73-150-159.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 21:24:46	Tekmo	edvo: Which matters for ensuring proper nesting of resource acquisition
2013-09-08 21:24:48	NemesisD	some of the machinery there is for benchmarking but it seems like he may have just been doing a rote translation of the erlang verison, which really probably shouldn't have been that verbose either
2013-09-08 21:25:02	-->	tero- (~tero@core.feriko.fi) has joined #haskell
2013-09-08 21:25:07	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 21:25:23	-->	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has joined #haskell
2013-09-08 21:25:24	mm_freak_	danilo2: because you simply can't express (<*>) in terms of fmap =)
2013-09-08 21:25:27	Targen	mm_freak_: I did a 5 minute demo of that at work a few days ago.  It’s a superb tool for convincing people of the merits of Haskell — the managers are used to Java, so they were quite shocked at how easy it was to parallelize! :)
2013-09-08 21:26:05	merijn	Man, I wish the time between fixing a bug in a program/library and actually being able to use the result wouldn't take so long >.<
2013-09-08 21:26:10	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-08 21:26:12	<--	red___ (~red@184.152.11.142) has quit (Ping timeout: 268 seconds)
2013-09-08 21:26:13	monochrom	"one doesn't simply fmap into Applicative"? :)
2013-09-08 21:26:21	bjorkintosh	Targen, but how many things are actually amenable to parallelization?
2013-09-08 21:26:39	monochrom	but I wonder what the Bool is doing there
2013-09-08 21:26:54	Targen	bjorkintosh: That’s a fantastically complex question there ;)
2013-09-08 21:27:06	mm_freak_	Targen: yeah, parallelism, in particular data parallelism, is one of haskell's killer features
2013-09-08 21:27:17	mm_freak_	and it's really impossible to have in most other languages
2013-09-08 21:27:22	Targen	I was caught off-guard when they asked if I could do the same with IO computations.  Thank god for async!
2013-09-08 21:27:23	<--	trinithis (~trinithis@c-24-7-113-8.hsd1.ca.comcast.net) has quit (Quit: Leaving)
2013-09-08 21:27:29	NemesisD	pur code can be pretty darn nice to parallelize. it is really easy to benchmark
2013-09-08 21:27:31	merijn	mm_freak_: My supervisor would strongly disagree with you
2013-09-08 21:27:31	edvo	Tekmo: I see, thank you very much
2013-09-08 21:27:37	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 252 seconds)
2013-09-08 21:27:38	Tekmo	edvo: You're welcome!
2013-09-08 21:27:43	bjorkintosh	mm_freak_, impossible? erlang scoffs at you!
2013-09-08 21:27:47	bjorkintosh	(and java too)
2013-09-08 21:27:53	bjorkintosh	don't hit me!
2013-09-08 21:27:55	mm_freak_	bjorkintosh: data parallelism
2013-09-08 21:28:01	tel	Tekmo, how far along is pipes-bytestring on your github? I want to get a lazy bytestring out of pipes-concurrency
2013-09-08 21:28:01	merijn	mm_freak_: He gets really grumpy if you say Haskell is good at data parallelism
2013-09-08 21:28:05	bjorkintosh	data parallelism.
2013-09-08 21:28:17	mm_freak_	bjorkintosh: you have a data structure and you want to evaluate it in parallel…  that is a meaningless concept in erlang
2013-09-08 21:28:20	merijn	bjorkintosh: Erlang is terrible at data parallelism
2013-09-08 21:28:23	Tekmo	tel: It's usable.  The only reason I haven't published it is that it's missing splitters in the style of `pipes-parse`
2013-09-08 21:28:24	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-08 21:28:29	bjorkintosh	hmm.
2013-09-08 21:28:30	Tekmo	tel: i.e. a function like:
2013-09-08 21:28:32	bjorkintosh	TIL!
2013-09-08 21:28:38	mm_freak_	merijn: what would be his favorite then?
2013-09-08 21:28:43	Tekmo	tel: chunksOf :: Int -> Producer ByteString m r -> FreeT (Producer ByteString m) m r
2013-09-08 21:28:53	-->	gustavn (~Gustav@31.210.251.9) has joined #haskell
2013-09-08 21:29:07	merijn	mm_freak_: Well, he's working on his own purely functional language for data parallel array/matrix computation, so he might be a little biased ;)
2013-09-08 21:29:19	<--	makos__ (~makos@koln-4d0dcc95.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-09-08 21:29:20	mm_freak_	merijn: i see =)
2013-09-08 21:29:20	Tekmo	tel: Here is what I'll do.  I'll open issues on Github for all the features from `pipes-bytestring` that I think are missing and if people flesh those out then I will publish it
2013-09-08 21:29:23	merijn	mm_freak_: To be fair, they're far better at numeric code than haskell
2013-09-08 21:29:48	mm_freak_	merijn: well, if he is designing his language for that domain, then i'm sure it is
2013-09-08 21:29:49	bjorkintosh	merijn, what is far better at numeric code?
2013-09-08 21:29:52	tel	Tekmo, I'm booked right now, but with a list like that I'd be more than happy to take a crack at some issues next week
2013-09-08 21:29:54	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-08 21:29:56	merijn	mm_freak_: Too bad that, lacking ADTs and other stuff, they suck at everything else atm ;)
2013-09-08 21:29:59	Tekmo	tel: Alright
2013-09-08 21:30:00	Targen	Does DPH get along with type classes yet?  I haven’t checked in about a year.
2013-09-08 21:30:08	tel	Tekmo, though I'll try out the library as-is right now
2013-09-08 21:30:21	Tekmo	tel: It will compile and work
2013-09-08 21:30:23	<--	phienone_ (~ph@nappo.lnet.fi) has quit (Quit: Lost terminal)
2013-09-08 21:30:29	Tekmo	tel: It builds and has most of what you will need
2013-09-08 21:30:49	mm_freak_	merijn: but then he should probably give repa/accelerate a shot =)
2013-09-08 21:30:50	mm_freak_	but it sounds like he would be quite familiar with repa
2013-09-08 21:30:51	merijn	bjorkintosh: SAC (Single Assignment C)
2013-09-08 21:31:01	bjorkintosh	ah.
2013-09-08 21:31:25	mm_freak_	i still have to try yarr
2013-09-08 21:31:41	tel	Tekmo, What I'd love, and I don't think I saw it previously, would be a (Lazy.ByteString -> Lazy.ByteString) -> Pipe Strict.ByteString Strict.ByteString m r
2013-09-08 21:31:55	merijn	mm_freak_: We were at IFL, I believe someone was doing Cholesky using repa and was about 2 orders of magnitude slower than their SAC Cholesky stuff
2013-09-08 21:32:01	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-08 21:32:13	mm_freak_	i've been told that yarr has the potential to outperform repa, which i doubt
2013-09-08 21:32:16	<--	CapitanK (~CaptainK@181.179.102.88) has quit (Ping timeout: 264 seconds)
2013-09-08 21:32:17	-->	CaptainK (~CaptainK@181.179.102.88) has joined #haskell
2013-09-08 21:32:22	aristid	mm_freak_: what's yarr?
2013-09-08 21:32:25	Tekmo	tel: That is tricky
2013-09-08 21:32:32	mm_freak_	another regular parallel array library
2013-09-08 21:32:33	aristid	@hackage yarr
2013-09-08 21:32:33	lambdabot	http://hackage.haskell.org/package/yarr
2013-09-08 21:32:38	Tekmo	tel: You'd have to use unsafeInterleaveIO to get that to work
2013-09-08 21:32:48	-->	determinant_ (~determina@183.83.58.169) has joined #haskell
2013-09-08 21:32:50	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-08 21:33:00	<--	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has quit (Read error: Connection reset by peer)
2013-09-08 21:33:36	tel	Tekmo Really? I'm not super familiar with LBS internals, but I thought they were pure?
2013-09-08 21:33:39	tel	purish
2013-09-08 21:33:42	Tekmo	tel: They are
2013-09-08 21:33:46	mm_freak_	merijn: well, repa needs to be written idiomatically…  for example don't construct an unboxed array you don't need…  that's a common beginner mistake
2013-09-08 21:33:50	-->	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has joined #haskell
2013-09-08 21:33:51	Tekmo	tel: But that function's semantics are not
2013-09-08 21:33:59	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 21:34:10	Tekmo	tel: Try to implement the function and you will see what I mean
2013-09-08 21:34:18	aristid	mm_freak_: it appears Yarr has no scans either :D
2013-09-08 21:34:34	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:34:48	mm_freak_	aristid: it probably has unfolds
2013-09-08 21:34:48	tel	Tekmo, hm, alright, maybe I'll get to the point where I can take a look at bytestring issues more quickly than I thought :)
2013-09-08 21:34:57	merijn	mm_freak_: If you're presenting a paper on high-performance haskell I'm assuming it's written as proper repa code :)
2013-09-08 21:35:16	mm_freak_	merijn: i'd hope so =)
2013-09-08 21:35:17	aristid	mm_freak_: i was saddened when i learned that repa has deliberately no scans at all:)
2013-09-08 21:35:33	mm_freak_	aristid: it too has unfolds
2013-09-08 21:35:38	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 21:35:53	mm_freak_	you don't need scans for vectors…  they are useful for lists
2013-09-08 21:35:58	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-08 21:36:10	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-08 21:36:30	mm_freak_	the problem with scans is that they are inherently sequential
2013-09-08 21:36:39	<--	CaptainK (~CaptainK@181.179.102.88) has quit (Read error: Connection reset by peer)
2013-09-08 21:36:41	aristid	mm_freak_: you don't need scans?!
2013-09-08 21:36:54	mm_freak_	you don't /want/ scans ;)
2013-09-08 21:37:00	aristid	mm_freak_: i don't want scans?!
2013-09-08 21:37:06	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 21:37:09	shachaf	Didn't conal have that thing about parallelizing some types of scans?
2013-09-08 21:37:24	mm_freak_	aristid: general scans destroy your parallelism
2013-09-08 21:37:24	aristid	accelerate can parallelize associative scans.
2013-09-08 21:38:09	aristid	mm_freak_: i imagine if you have a problem that requires a scan, it won't care about your parallelism
2013-09-08 21:38:30	aristid	mm_freak_: i don't find unfolds in repa btw
2013-09-08 21:38:39	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 264 seconds)
2013-09-08 21:38:39	<--	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-09-08 21:39:11	-->	sferry_ (~samuel@173-23-232-28.client.mchsi.com) has joined #haskell
2013-09-08 21:39:15	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-08 21:39:24	mm_freak_	aristid: indeed, repa doesn't have unfolds
2013-09-08 21:39:34	mm_freak_	you should try to express your array using fromFunction
2013-09-08 21:39:35	<--	paullik1 (~paullik@5-15-250-117.residential.rdsnet.ro) has quit (Ping timeout: 245 seconds)
2013-09-08 21:39:46	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-08 21:39:56	mm_freak_	unless you have a ready-made vector, in which case you would use fromUnboxed
2013-09-08 21:40:41	mm_freak_	if you really want to unfold, you can use fromListUnboxed
2013-09-08 21:41:08	mm_freak_	what bothers me most about all the regular parallel array libraries is that they insist on unboxed vectors
2013-09-08 21:41:09	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Ping timeout: 240 seconds)
2013-09-08 21:41:27	danilo2	mm_freak_: http://lpaste.net/92753 :))))))
2013-09-08 21:41:32	Tekmo	What's wrong with unboxed vectors?
2013-09-08 21:41:49	mm_freak_	Tekmo: sometimes you want to parallelize Integer vectors ;)
2013-09-08 21:41:50	<--	sferry (~samuel@atheme/member/samferry) has quit (Ping timeout: 240 seconds)
2013-09-08 21:42:12	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Quit: Leaving)
2013-09-08 21:42:17	Tekmo	mm_freak_: The problem is that boxed vectors are pretty nasty to work with
2013-09-08 21:42:22	Tekmo	They leak space like crazy
2013-09-08 21:42:27	ReinH	woo, second episode of the haskell cast is a wrap!
2013-09-08 21:42:48	h4199	ReinH is it already up?
2013-09-08 21:42:56	ReinH	h4199: a wrap as in we just finished recording :D
2013-09-08 21:43:16	h4199	What did you talk about this week?
2013-09-08 21:43:17	aristid	Tekmo: they leak space? how so?
2013-09-08 21:43:37	ReinH	aristid: "leak" may not be the most correct term
2013-09-08 21:43:40	mm_freak_	danilo2: seems correct, except that i would write it like this:  State chf ff <*> State chx fx = State (chf || chx) (\s -> let (s', f) = ff s; (s'', x) = fx s' in (s'', f x))
2013-09-08 21:44:08	danilo2	mm_freak_: of course
2013-09-08 21:44:19	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 21:44:19	Tekmo	aristid: You can't do a long-running series of mutations on them (in either ST or IO) without them leaking space
2013-09-08 21:44:27	ReinH	Tekmo: orly
2013-09-08 21:44:32	Tekmo	That's my experience
2013-09-08 21:44:34	danilo2	mm_freak_: Thank you for this, really. I have seen something very interestung by this exmple!
2013-09-08 21:44:34	ReinH	so actual leaks?
2013-09-08 21:44:38	ReinH	not just heap explosion?
2013-09-08 21:44:39	Tekmo	Yes, space leaks
2013-09-08 21:44:43	ReinH	wow :/
2013-09-08 21:44:48	aristid	Tekmo: why?
2013-09-08 21:44:48	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 21:44:57	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 21:44:58	mm_freak_	Tekmo: no, they don't leak space…  it's just that all the usual lazy evaluation effects apply
2013-09-08 21:44:58	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-09-08 21:44:58	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-08 21:44:58	Tekmo	So let me give the example I had in mind
2013-09-08 21:44:58	danilo2	mm_freak_: Ok so I understand the arrows re like applicative style ?
2013-09-08 21:45:04	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:45:13	ReinH	Tekmo: I thought you were referring to boxed + laziness
2013-09-08 21:45:15	Tekmo	I was writing a pipe that was binning results from its input into a vector
2013-09-08 21:45:36	Tekmo	I tried out four permutations:
2013-09-08 21:45:46	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-09-08 21:45:47	Tekmo	Boxed + IO
2013-09-08 21:45:48	mm_freak_	Tekmo: if you say that unboxed vectors are fine but boxed vectors suck, then by extension most haskell types suck ;)
2013-09-08 21:45:50	Tekmo	Boxed + ST
2013-09-08 21:45:51	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 261 seconds)
2013-09-08 21:45:57	Tekmo	Sorry, 6 permutations
2013-09-08 21:46:06	Tekmo	basically {Boxed,Unboxed,Storable}x{ST,IO}
2013-09-08 21:46:15	Tekmo	And I also employed every strictness trick in the inner loop
2013-09-08 21:46:19	-->	iLoop (~iLoop@unaffiliated/iloop) has joined #haskell
2013-09-08 21:46:24	Tekmo	I made sure everything was strictly evaluated
2013-09-08 21:46:30	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-08 21:46:36	Tekmo	And the results were quite decisive
2013-09-08 21:46:40	mm_freak_	danilo2: no…  now try to express a function of this type:  putResult :: State s s -> State s ()
2013-09-08 21:46:44	Tekmo	Unboxed and Storable *always* ran in constant space
2013-09-08 21:46:52	Tekmo	Boxed never ran in constant space and always leaked
2013-09-08 21:46:57	ReinH	Tekmo: o_O
2013-09-08 21:47:06	aristid	Tekmo: sounds like a bug?
2013-09-08 21:47:16	mm_freak_	danilo2: it should 'put' the result of the argument action
2013-09-08 21:47:19	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 21:47:20	ReinH	space leaks do sound like a bug
2013-09-08 21:47:37	ReinH	Tekmo: what do you mean when you say "leaked"?
2013-09-08 21:47:48	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-08 21:47:52	Tekmo	The heap profile grew
2013-09-08 21:47:59	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-08 21:48:04	Tekmo	and it ran damn slow, too
2013-09-08 21:48:42	danilo2	mm_freak_: ok
2013-09-08 21:48:49	<--	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has quit (Ping timeout: 240 seconds)
2013-09-08 21:49:01	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-08 21:49:19	-->	red___ (~red@184.152.11.142) has joined #haskell
2013-09-08 21:49:50	red___	i am having trouble thinking about Data.Graph, can anyone point to a resource that would help me (other than hackage)?
2013-09-08 21:49:57	-->	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has joined #haskell
2013-09-08 21:50:04	red___	functional data structures blow my mind
2013-09-08 21:50:09	Tekmo	red___: How familiar are you with graphs in general?
2013-09-08 21:50:15	<--	sxn (~sxn@mnch-5d86c13b.pool.mediaWays.net) has quit (Ping timeout: 268 seconds)
2013-09-08 21:50:15	red___	Tekmo: pretty familiar
2013-09-08 21:50:17	danilo2	mm_freak_: Shouldnt the signature be: putResult :: State s s -> State () s ?
2013-09-08 21:50:31	Tekmo	red___: Data.Graph is an adjacency list representation of a graph
2013-09-08 21:50:34	@Cale	red___: Just plain Data.Graph?
2013-09-08 21:50:36	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-08 21:50:45	@Cale	Or are you talking about FGL?
2013-09-08 21:50:45	-->	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has joined #haskell
2013-09-08 21:50:50	-->	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has joined #haskell
2013-09-08 21:50:55	red___	Tekmo: so just a list of pairs?
2013-09-08 21:50:56	<--	jackp (~Jack@pool-173-61-150-129.cmdnnj.fios.verizon.net) has quit (Quit: Leaving)
2013-09-08 21:51:01	@Cale	(whose modules all start with Data.Graph, but it doesn't take Data.Graph itself)
2013-09-08 21:51:18	red___	Tekmo: my graph is weighted...is that a problem? i'd like to key the pairs by their weight
2013-09-08 21:51:20	Tekmo	red___: If you fully expand out the `Graph` type synonym you get `Array Vertex [Vertex]`
2013-09-08 21:51:20	mm_freak_	danilo2: what would be the result of a function with that type?
2013-09-08 21:51:29	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-08 21:51:41	Tekmo	red___: No, it's not a problem.  You just keep a separate `vector` mapping `Edge`s to weights
2013-09-08 21:51:53	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-09-08 21:51:57	mm_freak_	Tekmo: i don't buy your argument against boxed vectors, simply because they work for me ;)
2013-09-08 21:52:11	Tekmo	mm_freak_: Let me see if I can produce the case that triggered this
2013-09-08 21:52:19	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-08 21:52:25	<--	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has quit (Read error: No route to host)
2013-09-08 21:52:35	mm_freak_	Tekmo: for a legitimate usage of boxed vectors see my 'instinct' library
2013-09-08 21:52:35	@Cale	red___: Usually I find that when I need a graph, I don't end up bothering with most of the graph libraries... of course, it depends on what sort of things you need, but usually something like Map Vertex (Set Vertex) or  Map Vertex (Map Vertex Weight) will work nicely.
2013-09-08 21:52:44	red___	Tekmo: the type synonym helps .. i am trying to imp a haskell version of prim and it is harder than i thought it would be
2013-09-08 21:52:59	-->	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has joined #haskell
2013-09-08 21:53:06	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-08 21:53:13	Tekmo	red___: What do you mean by prim?
2013-09-08 21:53:19	red___	Cale: thanks, i am pulled toward intmap, maybe mapping a weight to a pair of edges?
2013-09-08 21:53:24	red___	Tekmo: prim's MST
2013-09-08 21:54:13	@Cale	red___: Er, perhaps you mean mapping pairs of vertices to weights?
2013-09-08 21:54:15	mm_freak_	Tekmo: i calculate the activations of a neural network using a boxed vector…  the backprop learning algorithm makes heavy use of boxed vectors and runs in constant space until a certain minimum error is reached
2013-09-08 21:54:29	red___	Cale: :) yep
2013-09-08 21:54:31	-->	twopoint718 (~chris@68-185-171-116.dhcp.mdsn.wi.charter.com) has joined #haskell
2013-09-08 21:54:31	<--	twopoint718 (~chris@68-185-171-116.dhcp.mdsn.wi.charter.com) has quit (Changing host)
2013-09-08 21:54:31	-->	twopoint718 (~chris@fsf/member/twopoint718) has joined #haskell
2013-09-08 21:54:33	@Cale	red___: Map (Vertex, Vertex) Weight  would work
2013-09-08 21:54:57	@Cale	red___: However, it might not be ideal, since you're usually going to be interested in the *neighbours* of a given vertex
2013-09-08 21:55:04	Tekmo	mm_freak_: Just give me a second
2013-09-08 21:55:28	ReinH	red___: you need an efficient way to get the edges for a vertex and the weight for an edge
2013-09-08 21:55:33	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 283 seconds)
2013-09-08 21:55:36	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-08 21:55:45	<--	ihm1 (~izzy@107.14.54.0) has quit (Write error: Connection reset by peer)
2013-09-08 21:55:51	<--	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-09-08 21:55:56	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 21:55:56	ReinH	preferably both at the same time
2013-09-08 21:56:03	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-08 21:56:13	ReinH	Map Vertex (Map Vertex Weight) would work
2013-09-08 21:56:16	mm_freak_	Tekmo: you may be interested in this article: http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html
2013-09-08 21:56:22	red___	in any other language I would use a priority queue and be done with it, i think
2013-09-08 21:56:25	Tekmo	I'm already well aware of that technique
2013-09-08 21:56:25	@Cale	red___: So, it might be better to split that up into  Map Vertex (Map Vertex Weight),  i.e. you have a map from vertices u to maps which have a key/value pair (v,w) when there is an arc u -> v with weight w.
2013-09-08 21:56:35	Tekmo	Other than vectors I'm quite good at removing space leaks from code
2013-09-08 21:56:54	@Cale	red___: You could absolutely use a priority queue here.
2013-09-08 21:56:55	mm_freak_	well, the article is about not introducing them in the first place =)
2013-09-08 21:57:01	ReinH	red___: you could use a priority queue here as well but it might be nice to build the algorithm more directly first
2013-09-08 21:57:19	red___	where is priority queue?
2013-09-08 21:57:22	@Cale	red___: But I thought you were talking about your graph representation.
2013-09-08 21:57:30	@Cale	red___: I like the PSQueue package myself.
2013-09-08 21:57:37	Tekmo	mm_freak_: Also, keep in mind that if it were a flaw in the way I wrote it, it would have also leaked for unboxed and storable vectors, too
2013-09-08 21:57:38	monochrom	me too
2013-09-08 21:57:40	ReinH	red___: there are a number of them with different properties
2013-09-08 21:57:55	<--	konundra (~eunoia7@ec24.uo.earlham.edu) has quit (Ping timeout: 245 seconds)
2013-09-08 21:58:01	red___	Cale: i guess I was talking about both graph representation and a dstruct to keep 'explored edges' in Prim's MSt
2013-09-08 21:58:34	ReinH	red___: start with the simplest thing that could possibly work while you're learning
2013-09-08 21:58:34	mm_freak_	Tekmo: not at all…  it's easy enough to build unevaluated expressions using boxed vectors, whereas it's impossible for unboxed/storable ones
2013-09-08 21:58:48	ReinH	i.e. type ExploredVertices = Set Vertex
2013-09-08 21:58:57	red___	ReinH: good advice
2013-09-08 21:59:01	@Cale	red___: If I were implementing Prim's algorithm, I would probably make my implementation independent of the graph representation by taking parameters which were functions for querying the graph structure.
2013-09-08 21:59:05	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-08 21:59:06	Tekmo	mm_freak_: But int his case I made sure to fully evaluate each term being stored in the vector
2013-09-08 21:59:09	ReinH	red___: later on you can add performance improvements incrementally
2013-09-08 21:59:16	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-08 21:59:22	mm_freak_	Tekmo: so you suspect that i
2013-09-08 21:59:28	mm_freak_	Tekmo: so you suspect that it's a bug in vector?
2013-09-08 21:59:29	<--	shesek (~shesek@87.68.18.255.cable.012.net.il) has quit (Read error: No route to host)
2013-09-08 21:59:31	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-08 21:59:32	@Cale	red___: For example, see the type of my A* implementation here: http://hackage.haskell.org/packages/archive/astar/0.2.1/doc/html/Data-Graph-AStar.html
2013-09-08 21:59:35	ReinH	red___: type Graph = Map Vertex (Map Vertex Weight)
2013-09-08 21:59:43	Tekmo	mm_freak_: Just give me a second to repeat the scenario that triggered this for me
2013-09-08 21:59:51	Tekmo	mm_freak_: I need to make sure that it still happens
2013-09-08 21:59:51	mm_freak_	ok
2013-09-08 21:59:54	red___	ooh A*, classic!
2013-09-08 22:00:10	ReinH	red___: now, make a singleton set from a vertex in Graph to kick start your algorithm
2013-09-08 22:00:40	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-08 22:00:53	red___	ReinH: that is helpful, I think I will try that avenue first
2013-09-08 22:00:57	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 22:01:00	<--	tel (~tel@209.249.230.2) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-08 22:01:06	@Cale	red___: I use PSQueue as my priority queue internally there
2013-09-08 22:01:17	-->	shesek (~shesek@87.68.18.255.cable.012.net.il) has joined #haskell
2013-09-08 22:02:00	ReinH	red___: if you look up a bunch of (Map Vertex Weight) based on the vertices in your ExploredVertices, you can union them together with min and then find the min key of the resulting map
2013-09-08 22:02:10	ReinH	that is the new vertice that you add to explored vertices
2013-09-08 22:02:24	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-08 22:02:29	@Cale	the new vertex*
2013-09-08 22:02:31	@Cale	;)
2013-09-08 22:02:32	ReinH	or you can min each and then min that result, or you can do it as a fold, etc
2013-09-08 22:02:39	ReinH	Cale: whoops
2013-09-08 22:02:40	monochrom	damn english
2013-09-08 22:02:54	red___	vertice
2013-09-08 22:03:20	red___	way better
2013-09-08 22:03:26	ReinH	vertice is more principled :p
2013-09-08 22:03:31	@Cale	"vertexes" is acceptable, but "vertice" is a bit off :)
2013-09-08 22:03:36	ReinH	Cale: shush
2013-09-08 22:04:02	red___	precipexes
2013-09-08 22:04:05	red___	ok thanks, channel
2013-09-08 22:04:52	ReinH	red___: the point is that you can take advantage of algebraic properties of maps and integers to do most of the work for you :)
2013-09-08 22:04:56	ReinH	(and sets)
2013-09-08 22:05:28	danilo2	mm_freak_: here you go: http://lpaste.net/92753 :)
2013-09-08 22:05:33	-->	VABAV (b00e885e@gateway/web/freenode/ip.176.14.136.94) has joined #haskell
2013-09-08 22:05:45	ReinH	Tekmo: I am disconcerted by this reported space leak in Vector :)
2013-09-08 22:06:02	ReinH	do you have a reproducible test case yet?
2013-09-08 22:06:12	Tekmo	That's what I'm writing up right now
2013-09-08 22:06:32	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 22:06:35	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 22:06:45	ReinH	cool :)
2013-09-08 22:10:43	-->	waterlaz_ (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-09-08 22:10:44	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 22:10:44	Tekmo	So far it looks like it is not working
2013-09-08 22:10:45	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-08 22:10:45	VABAV	Hello to everybody! Can anybody help me to understand what exercise 2 of chapter 5 of Real World Haskell suggests to implement?
2013-09-08 22:10:45	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 22:10:45	Tekmo	Maybe I was using a bugged version of vector at the time
2013-09-08 22:10:46	<--	red___ (~red@184.152.11.142) has quit (Quit: leaving)
2013-09-08 22:10:46	VABAV	Also, how to implement this efficiently?
2013-09-08 22:10:47	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: qQQ)
2013-09-08 22:10:47	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-08 22:10:47	<--	jayne (~jayne@freenode/staff/jayne) has quit (Read error: Connection reset by peer)
2013-09-08 22:10:47	<--	Counter-Strike (~abc@mailsh7.xs4all.nl) has quit (Ping timeout: 245 seconds)
2013-09-08 22:10:47	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Ping timeout: 245 seconds)
2013-09-08 22:10:47	<--	necroyeti (~rthc@phire.org) has quit (Ping timeout: 245 seconds)
2013-09-08 22:10:47	<--	jamwt (~jamwt@67.228.22.122) has quit (Ping timeout: 245 seconds)
2013-09-08 22:10:47	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Read error: Connection reset by peer)
2013-09-08 22:10:48	<--	FireFly (~firefly@oftn/member/FireFly) has quit (Ping timeout: 245 seconds)
2013-09-08 22:11:15	<--	DustyDin1o (~nonamen@atommuell.mum.jku.at) has quit (Read error: Connection reset by peer)
2013-09-08 22:12:14	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-09-08 22:12:26	<--	lenstr (~lenstr@unaffiliated/lenstr) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-09-08 22:12:26	<--	smith_ (smith@gateway/shell/anapnea.net/x-cyryjeendgqbjgbl) has quit (Remote host closed the connection)
2013-09-08 22:12:35	-->	smith_ (smith@gateway/shell/anapnea.net/session) has joined #haskell
2013-09-08 22:12:54	danilo2	mm_freak_: wait it does not work as supposed to
2013-09-08 22:12:55	Tekmo	Huh
2013-09-08 22:12:55	Tekmo	It works now
2013-09-08 22:12:55	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-08 22:12:55	Tekmo	I will go ahead and lpaste the code
2013-09-08 22:12:55	<--	tuxie_ (~paranoid@g229050001.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-08 22:12:55	<--	hrehf (~s@krlh-4d02bed0.pool.mediaWays.net) has quit (Quit: bfg)
2013-09-08 22:12:55	Tekmo	Well, that's good news, then!
2013-09-08 22:12:55	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-08 22:12:56	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 241 seconds)
2013-09-08 22:12:56	mm_freak_	danilo2: it does
2013-09-08 22:12:56	Tekmo	http://lpaste.net/92755
2013-09-08 22:12:56	VABAV	Or this chat is not for questions by newbies? :-(
2013-09-08 22:12:57	Tekmo	It is for questions by newbies! :)
2013-09-08 22:12:57	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.1)
2013-09-08 22:12:57	<--	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-09-08 22:12:57	<--	artyomkazak (~artyomkaz@94.25.228.16) has quit (Ping timeout: 241 seconds)
2013-09-08 22:12:57	@Cale	VABAV: Perhaps you'd care to remind us what that exercise says, or link it?
2013-09-08 22:12:58	mm_freak_	Tekmo: that would most likely have been a bug in the RTS, not in vector, because vectors really just store thunk pointers
2013-09-08 22:12:58	Tekmo	Which one is the exercise?
2013-09-08 22:12:58	<--	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has quit (Remote host closed the connection)
2013-09-08 22:12:58	-->	DustyDingo (~nonamen@atommuell.mum.jku.at) has joined #haskell
2013-09-08 22:12:58	Tekmo	mm_freak_: Well, either way it is fixed now
2013-09-08 22:12:58	Tekmo	Now I can go back to using boxed vectors again!
2013-09-08 22:12:58	VABAV	Sure, http://book.realworldhaskell.org/read/writing-a-library-working-with-json-data.html, then search for "Exercises"
2013-09-08 22:12:58	@Cale	"The asInt_fold function uses error, so its callers cannot handle errors. Rewrite it to fix this problem"
2013-09-08 22:12:58	ion	> [(-1)**0.5, sqrt (-1)] :: [Complex Double]
2013-09-08 22:12:58	lambdabot	  [6.123031769111886e-17 :+ (-1.0),(-0.0) :+ 1.0]
2013-09-08 22:12:58	@Cale	That one?
2013-09-08 22:12:59	-->	necroyet1 (~rthc@phire.org) has joined #haskell
2013-09-08 22:13:04	-->	zbeasnyy (~mornfall@88.83.241.14) has joined #haskell
2013-09-08 22:13:10	-->	jamwt1 (~jamwt@sherlock.jamwt.com) has joined #haskell
2013-09-08 22:13:15	ReinH	TL;DR: basically everything is a fold.
2013-09-08 22:13:15	ReinH	red___: btw, relevant to your interests: http://stackoverflow.com/questions/6976559/comparison-of-priority-queue-implementations-in-haskell
2013-09-08 22:13:15	ReinH	A bit surprised that dons didn't answer it but still useful ;)
2013-09-08 22:13:15	ReinH	red___: also of interest is the fact that prim's algo computes a fixed point of the inner traversal loop
2013-09-08 22:13:16	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-08 22:13:46	ReinH	awww he's gone :(
2013-09-08 22:13:46	danilo2	mm_freak_: Ok, whats next? (I'm still thinking about the usage of previous one)
2013-09-08 22:13:51	<--	smith_ (smith@gateway/shell/anapnea.net/session) has quit (Changing host)
2013-09-08 22:13:51	-->	smith_ (smith@gateway/shell/anapnea.net/x-oszkadvxtulmvdps) has joined #haskell
2013-09-08 22:13:51	-->	Effilry (~firefly@oftn/member/FireFly) has joined #haskell
2013-09-08 22:13:52	@Cale	VABAV: It wants you to use Either to handle errors, so if the function parses an Int successfully, it should produce Right x where x is an Int, and if not, it should produce Left s where s is a String explaining why it failed.
2013-09-08 22:14:06	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 256 seconds)
2013-09-08 22:14:10	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 22:14:16	<--	determinant_ (~determina@183.83.58.169) has quit (Ping timeout: 264 seconds)
2013-09-08 22:14:17	<--	simukis_ (~simukis_@78.63.244.234) has quit (Ping timeout: 264 seconds)
2013-09-08 22:14:26	-->	LeNsTR (~lenstr@master.qs.biz) has joined #haskell
2013-09-08 22:14:26	--	zbeasnyy is now known as mornfall
2013-09-08 22:14:28	<--	mornfall (~mornfall@88.83.241.14) has quit (Changing host)
2013-09-08 22:14:29	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-09-08 22:14:30	-->	artyomkazak (~artyomkaz@94.25.228.16) has joined #haskell
2013-09-08 22:14:36	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 22:14:47	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-09-08 22:15:02	--	Effilry is now known as FireFly
2013-09-08 22:15:10	-->	Counter-Strike (~abc@mailsh7.xs4all.nl) has joined #haskell
2013-09-08 22:16:43	@Cale	VABAV: according to the comments there, it seems that Either hasn't been introduced yet, so that might be a bit of an oversight on the authors' part. Regardless, Either is a pretty simple type to understand. It's defined as  data Either a b = Left a | Right b
2013-09-08 22:16:53	mm_freak_	danilo2: now try to express putResult using only the applicative interface
2013-09-08 22:16:56	<--	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has quit (Ping timeout: 256 seconds)
2013-09-08 22:17:07	VABAV	@Cale:  Are we  talking about the same? Copy-pasting the text of exercise, just a moment...
2013-09-08 22:17:08	lambdabot	Unknown command, try @list
2013-09-08 22:17:11	-->	allsystemsarego (~allsystem@188.25.130.226) has joined #haskell
2013-09-08 22:17:11	<--	allsystemsarego (~allsystem@188.25.130.226) has quit (Changing host)
2013-09-08 22:17:11	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-09-08 22:17:21	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-08 22:17:21	mm_freak_	danilo2: you must not take apart State values
2013-09-08 22:17:37	VABAV	Our pretty printer does not take nesting into account. Whenever we open parentheses, braces, or brackets, any lines that follow should be indented so that they are aligned with the opening character until a matching closing character is encountered. Add support for nesting, with a controllable amount of indentation.
2013-09-08 22:17:37	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 22:17:43	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 22:18:09	 *	hackagebot digestive-functors-heist 0.8.0.0 - Heist frontend for the digestive-functors library  http://hackage.haskell.org/package/digestive-functors-heist-0.8.0.0 (JasperVanDerJeugt)
2013-09-08 22:18:11	VABAV	"nest :: Int -> Doc -> Doc"
2013-09-08 22:18:11	mm_freak_	danilo2: i have to go now, but i'll be back in about two hours
2013-09-08 22:18:17	@Cale	ah, okay
2013-09-08 22:18:28	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-08 22:18:30	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-08 22:18:37	@Cale	I must've found my way to a different exercises section somehow
2013-09-08 22:18:51	-->	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-08 22:18:57	mm_freak_	danilo2: in any case you will fail to solve the task, so what is missing is a way to compose State computations
2013-09-08 22:19:12	VABAV	With that link i gave?? Sorry then.
2013-09-08 22:19:22	@Cale	Yeah, I dunno what happened
2013-09-08 22:19:33	mm_freak_	danilo2: since the monadic interface is not possible you would extend State to this type:  data State s a b = State Bool ((s, a) -> (s, b))
2013-09-08 22:19:34	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-08 22:19:50	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-08 22:19:59	-->	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has joined #haskell
2013-09-08 22:20:00	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-08 22:20:01	mm_freak_	danilo2: this type is an arrow and gives you back the ability to pass values from one computation to another
2013-09-08 22:20:32	<--	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-09-08 22:20:38	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-08 22:20:57	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-08 22:21:25	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-08 22:22:04	VABAV	Anyway it seems to answer my question the chapter must be read at least a little bit. So, who read Real World Haskell, Chapter 5? It's about writing pretty-printer library for JSON.
2013-09-08 22:22:14	@Cale	VABAV: okay, so the goal there is to be able to have blocks which are indented to a certain column, so as to be able to line up subsequent lines when you have a list or map structure that's being split across many lines.
2013-09-08 22:22:27	<--	tac (~tac-tics@2602:306:bdb4:5100:21ab:149e:7886:87d3) has quit (Ping timeout: 264 seconds)
2013-09-08 22:22:35	danilo2	mm_freak_: Ok, thank you - I'll think about it :)
2013-09-08 22:23:05	danilo2	mm_freak_: Sometimes things are very very simple, but its hard to see the simplest thing keeping you back from the solution heh :)
2013-09-08 22:23:09	 *	hackagebot HaRe 0.7.0.2 - the Haskell Refactorer.  http://hackage.haskell.org/package/HaRe-0.7.0.2 (AlanZimmerman)
2013-09-08 22:23:29	@Cale	You'll see in the ghci example they have there, a representation of a JObject:
2013-09-08 22:23:33	VABAV	@Cale: Okay, but what if my JSON on the input just does not contain a line after a opening delimiter?
2013-09-08 22:23:33	lambdabot	Unknown command, try @list
2013-09-08 22:23:34	@Cale	ghci> putStrLn (pretty 10 value)
2013-09-08 22:23:34	@Cale	{"f": 1.0,
2013-09-08 22:23:34	@Cale	"q": true
2013-09-08 22:23:34	@Cale	}
2013-09-08 22:23:48	@Cale	It would be nice if the "q" actually lined up with the "f"
2013-09-08 22:24:29	VABAV	But then whats an Int parameter?
2013-09-08 22:24:44	@Cale	and for that, you'll need to add something to the representation of Doc to express the idea that you're in a block starting in a given column
2013-09-08 22:24:47	<--	ulfdoz (~mary@p5B38A3CC.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2013-09-08 22:25:39	VABAV	So, you mean, another data constructor? Because that were my thoughts :-)
2013-09-08 22:25:40	@Cale	Or, a block which has been indented by a specific number of characters relative to the next enclosing block
2013-09-08 22:25:42	@Cale	yeah
2013-09-08 22:26:00	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Quit: leaving)
2013-09-08 22:26:34	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-08 22:27:06	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-08 22:27:19	VABAV	That's the problem for a kind of guy who i am, actually :-) I see 'write a function' and assume --- "don't touch anything else!" :-(
2013-09-08 22:27:23	@Cale	In fact, I think it would be possible to do without the Int parameter, if you wanted to just make the nested bit set its indentation based on the current position in the line.
2013-09-08 22:27:40	<--	edvo (~edvo@tmo-111-88.customers.d1-online.com) has quit (Quit: Leaving)
2013-09-08 22:28:02	<--	l1ons (~lions@bas1-burlington02-3096729158.dsl.bell.ca) has left #haskell ("WeeChat 0.4.1")
2013-09-08 22:28:09	 *	hackagebot data-fresh 0.2013.251.0 - Interface and functor transformers for fresh values  http://hackage.haskell.org/package/data-fresh-0.2013.251.0 (StijnVanDrongelen)
2013-09-08 22:28:13	@Cale	(Though, that would require more changes to the rendering algorithm, because it doesn't keep track of that position at present)
2013-09-08 22:28:24	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-08 22:28:24	<--	ihm1_ (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 22:28:27	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-08 22:28:33	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-08 22:28:36	VABAV	Yeah, that's the point where i think you understand it differently than what i think authors meant.
2013-09-08 22:28:38	@Cale	or, oh, the pretty one does
2013-09-08 22:28:40	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 22:28:50	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (Ping timeout: 240 seconds)
2013-09-08 22:29:14	@Cale	The overall goal is to be able to print things like:
2013-09-08 22:29:21	@Cale	[["hello",
2013-09-08 22:29:31	<--	whore (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 260 seconds)
2013-09-08 22:29:38	@Cale	  "there"],
2013-09-08 22:29:45	@Cale	 ["this",
2013-09-08 22:29:48	@Cale	  "is",
2013-09-08 22:29:52	<--	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-08 22:29:53	@Cale	  "nested"]]
2013-09-08 22:30:03	danilo2	mm_freak_: Ahhh!! I found the error ! You see, I've implemented put as: put a = State True (\b -> (b,a)) and it was wrong. Because of that I was sitting and scratching my head, because some types was wrong... Now everything is clear ...
2013-09-08 22:30:04	@Cale	Or some variation thereof
2013-09-08 22:30:11	VABAV	Why not like that?
2013-09-08 22:30:15	VABAV	[[
2013-09-08 22:30:22	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-08 22:30:28	VABAV	    "hello"
2013-09-08 22:30:31	@Cale	The important thing being the amount of whitespace at the start of each of those lines
2013-09-08 22:30:32	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-08 22:30:32	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-08 22:30:32	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-08 22:30:39	-->	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has joined #haskell
2013-09-08 22:30:43	VABAV	]]
2013-09-08 22:30:49	-->	riley__ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-08 22:30:53	@Cale	(making subsequent elements of the lists line up vertically)
2013-09-08 22:30:53	danilo2	mm_freak_: It was implementewd as "normal put" And your state class has got flipped arguments compared to state from Haskell :)
2013-09-08 22:31:12	VABAV	That's where Int parameter makes sence.
2013-09-08 22:31:12	@Cale	Or, imagine prettyprinting Haskell source code
2013-09-08 22:31:26	@Cale	You'd want all the lines in a 'where' block to start in the same column
2013-09-08 22:31:41	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 22:31:59	@Cale	So, you'd need some way to represent the notion that a Doc was a block of code which all must be indented together.
2013-09-08 22:32:33	@Cale	i.e. all lines must start on the same column (regardless of which column that is)
2013-09-08 22:32:52	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-09-08 22:33:00	@Cale	You could include an Int parameter to say that it has to be indented by a specific amount, or you could set the amount of indentation based on where you started the block.
2013-09-08 22:33:06	VABAV	Yeah! And then i do want to my function be so smart to figure out how much to indent the code in subsequent lines all by itself!
2013-09-08 22:33:18	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-08 22:33:37	<--	edsko (~edsko@80.111.60.101) has quit (Quit: This computer has gone to sleep)
2013-09-08 22:33:56	-->	anachrome (~lily@155.41.101.144) has joined #haskell
2013-09-08 22:34:14	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 22:34:19	VABAV	Are you assuming it meant to be recursive?
2013-09-08 22:34:31	danilo2	mm_freak_: Because I made an error on the beginning, It was hard for me to get forward. Than you once again for everythink :)
2013-09-08 22:34:36	VABAV	*was meant
2013-09-08 22:34:39	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-08 22:34:45	<--	ksf (~ksf@d033138.adsl.hansenet.de) has quit (Quit: Leaving)
2013-09-08 22:35:08	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Connection reset by peer)
2013-09-08 22:36:12	<--	jlamothe (~jlamothe@jlamothe.net) has quit (Ping timeout: 256 seconds)
2013-09-08 22:36:49	VABAV	Little bit confused, sorry. I'll take a look at prettyfied JSON in that chapter...
2013-09-08 22:36:56	--	riley__ is now known as riley_
2013-09-08 22:37:15	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-08 22:37:40	<--	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-08 22:37:43	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 264 seconds)
2013-09-08 22:37:44	<--	estultic1a (~estultici@190.149.65.168) has quit (Ping timeout: 268 seconds)
2013-09-08 22:39:28	<--	blume_ (~tani@e179134032.adsl.alicedsl.de) has quit (Quit: Lost terminal)
2013-09-08 22:39:29	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 22:39:33	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-08 22:39:41	VABAV	How do you think, how crazy is the idea to contact authors? And what is the easiest way to do it?
2013-09-08 22:40:27	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 264 seconds)
2013-09-08 22:40:56	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-08 22:41:25	@Cale	It's not that crazy... they used to hang out here a little more often than they do these days...
2013-09-08 22:41:45	@Cale	But you'd probably find it easier to use email
2013-09-08 22:41:52	<--	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has left #haskell ("Leaving")
2013-09-08 22:42:05	h4199	what is lambdabot's last seen command?
2013-09-08 22:42:21	elliott	it doesn't have one
2013-09-08 22:42:22	elliott	but preflex does
2013-09-08 22:42:24	elliott	preflex: xseen h4199
2013-09-08 22:42:25	preflex	 h4199 was last seen on freenode/#haskell 19 seconds ago, saying: what is lambdabot's last seen command?
2013-09-08 22:42:25	-->	tacpacpoc (~tacpacpoc@chello080109040009.8.14.vie.surfer.at) has joined #haskell
2013-09-08 22:42:30	@Cale	Don Stewart's email is  dons00 (at) gmail.com
2013-09-08 22:42:33	VABAV	But it must be a hard task to get their emails or am i worng?
2013-09-08 22:42:41	h4199	preflex: xseen bos
2013-09-08 22:42:41	preflex	 bos was last seen on freenode/#haskell 8 days, 21 hours, 44 minutes and 43 seconds ago, saying: we need a "><>" operator too
2013-09-08 22:43:05	<--	iLoop (~iLoop@unaffiliated/iloop) has quit (Quit: Leaving...)
2013-09-08 22:43:06	VABAV	Oh! Thanks a lot!!! :-)))
2013-09-08 22:43:09	-->	jlamothe (~jlamothe@jlamothe.net) has joined #haskell
2013-09-08 22:43:28	monochrom	on twitter, he's "donsbot" :)
2013-09-08 22:43:33	--	jlamothe is now known as Guest72668
2013-09-08 22:43:36	@Cale	and Bryan O'Sullivan is bos (at) serpentine.com
2013-09-08 22:43:42	 *	tacpacpoc the best game REAL GOLD : http://www.goldentowns.com?i=7386
2013-09-08 22:43:43	<--	tacpacpoc (~tacpacpoc@chello080109040009.8.14.vie.surfer.at) has quit (Killed (idoru (Spam is off topic on freenode.)))
2013-09-08 22:43:46	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-08 22:43:59	h4199	VABAV: and bos in this channel when he is around
2013-09-08 22:44:25	@Cale	I wonder why dons never shows up anymore
2013-09-08 22:44:43	monochrom	it would be cool if bos's email were boss@gmail.com or something :)
2013-09-08 22:44:50	-->	Polarina (~polarina@115-109-22-46.fiber.hringdu.is) has joined #haskell
2013-09-08 22:44:54	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 22:45:09	monochrom	because as I always like to say, "he's chartered by a bank" :)
2013-09-08 22:45:09	<--	Polarina (~polarina@115-109-22-46.fiber.hringdu.is) has quit (Changing host)
2013-09-08 22:45:10	-->	Polarina (~polarina@wesnoth/translator/Polarina) has joined #haskell
2013-09-08 22:45:28	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-08 22:45:48	<--	sferry_ (~samuel@173-23-232-28.client.mchsi.com) has quit (Quit: This computer has gone to sleep)
2013-09-08 22:45:55	merijn	Cale: To busy taking pictures of sunsets/-rises ;)
2013-09-08 22:46:01	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-08 22:46:10	-->	martinalex (~quassel@dslb-094-220-195-023.pools.arcor-ip.net) has joined #haskell
2013-09-08 22:46:29	monochrom	but even those pictures are getting old, no? there haven't been new pictures for a while
2013-09-08 22:46:40	<--	eldariof (~CLD@188.168.234.54) has quit (Ping timeout: 264 seconds)
2013-09-08 22:46:55	monochrom	I say, he's chartered by either a bank or a significant other
2013-09-08 22:47:39	aristid	monochrom: there must be some kind of standard chartering agreement or so.
2013-09-08 22:47:49	monochrom	hehehe
2013-09-08 22:47:59	 *	copumpkin slaps aristid and monochrom 
2013-09-08 22:48:01	VABAV	Thanks again, Cale!
2013-09-08 22:48:11	<--	matheus23 (~quassel@p4FDF3293.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-08 22:48:17	<--	burp_ (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-08 22:49:16	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 260 seconds)
2013-09-08 22:49:25	aristid	monochrom: now we need to find stupid puns about copumpkin's situation.
2013-09-08 22:49:28	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-08 22:49:31	copumpkin	lol
2013-09-08 22:49:38	copumpkin	I'm still around!
2013-09-08 22:49:40	donri	it's interesting how fast these spammers get killed, but their messages not blocked?
2013-09-08 22:50:20	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-08 22:50:21	<--	ihm1_ (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 22:50:23	copumpkin	donri: I don't think the ircd has facilities for pre-filtering messages, but they can probably monitor them easily
2013-09-08 22:50:26	<--	gustavn (~Gustav@31.210.251.9) has quit (Quit: Leaving)
2013-09-08 22:50:29	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 22:50:44	monochrom	I already found one last year's halloween, aristid. http://www.vex.net/~trebla/photo/unorganized/pumpkin-catmorphism.jpg
2013-09-08 22:50:44	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-08 22:51:00	copumpkin	aww
2013-09-08 22:51:15	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-09-08 22:51:16	monochrom	oh, copumpkin's situation, not copumpkin's nick. I'll have to think again.
2013-09-08 22:51:28	monochrom	what is the situation? I don't even know that.
2013-09-08 22:51:34	copumpkin	me neither!
2013-09-08 22:51:35	-->	tac (~tac-tics@38.115.166.202) has joined #haskell
2013-09-08 22:51:38	<--	martinalex (~quassel@dslb-094-220-195-023.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-08 22:51:46	monochrom	is it some kind of connection with Galois?
2013-09-08 22:51:51	<--	Guest72668 (~jlamothe@jlamothe.net) has quit (Ping timeout: 264 seconds)
2013-09-08 22:51:51	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-08 22:51:52	aristid	monochrom: those pumpkin kittehs are cute though
2013-09-08 22:51:58	copumpkin	lol
2013-09-08 22:52:13	-->	jlamothe_ (~jlamothe@jlamothe.net) has joined #haskell
2013-09-08 22:52:16	aristid	monochrom: iirc copumpkin is trimming hedges these days or something like that
2013-09-08 22:52:29	aristid	i know i know... TERRIBLE.
2013-09-08 22:52:41	copumpkin	#haskell-terriblepuns
2013-09-08 22:53:00	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Read error: Operation timed out)
2013-09-08 22:53:02	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-09-08 22:53:11	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-08 22:54:30	merijn	Apparently everyone cool is working in finance nowadays >.>
2013-09-08 22:54:50	aristid	merijn: that's not true! i'm not cool and i also work in finance.
2013-09-08 22:54:58	copumpkin	lol
2013-09-08 22:55:09	copumpkin	aristid fails at logic at least
2013-09-08 22:55:11	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 260 seconds)
2013-09-08 22:55:11	monochrom	they are trying to cause a financial collapse and transition to communism
2013-09-08 22:55:17	jmcarthur	lol
2013-09-08 22:55:22	copumpkin	yeah, look at jmc
2013-09-08 22:55:25	copumpkin	jmcarthur that is
2013-09-08 22:55:31	copumpkin	he's the worst!
2013-09-08 22:55:35	aristid	copumpkin: :( sometimes logic needs to be bended a bit for the sake of a terrible pun.
2013-09-08 22:55:37	merijn	aristid: I was about to remark "Which makes it doubly sad that Jane Street told me 'not interested', as that means I'm not cool..." :p
2013-09-08 22:55:39	jmcarthur	yeah that guy sucks
2013-09-08 22:55:43	copumpkin	of all the financiers around here, he's the closest to wall street
2013-09-08 22:56:00	 *	copumpkin shakes his head
2013-09-08 22:56:35	copumpkin	http://en.wikipedia.org/wiki/Financier_(cake)
2013-09-08 22:57:07	merijn	Someone rich should just pay me to work on Haskell infrastructure fulltime, I hear new-hackage still needs work :p
2013-09-08 22:57:08	monochrom	I love cakes. they're so sweety.
2013-09-08 22:57:38	aristid	copumpkin: so english wikipedia says it's a cake not to be confused with pastry... and french wikipedia says "est une pâtisserie" :D
2013-09-08 22:57:48	companion_cube	maybe communism wouldn't be so bad
2013-09-08 22:57:50	copumpkin	terrible
2013-09-08 22:57:58	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 22:58:01	-->	ekipan (4b1375b0@gateway/web/freenode/ip.75.19.117.176) has joined #haskell
2013-09-08 22:58:08	<--	edon (~user@albalug/edon) has quit (Ping timeout: 260 seconds)
2013-09-08 22:58:29	companion_cube	why so?
2013-09-08 22:58:32	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-08 22:58:32	ReinH	merijn: hai
2013-09-08 22:58:36	Targen	Nowdays I can’t distinguish random comments from subtle puns on some new sort of lens I don’t know about.  Is a «sweety» some generalization of bazaars?
2013-09-08 22:58:46	edwardk	=)
2013-09-08 22:59:07	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-09-08 22:59:14	merijn	ReinH: Is that a confirmation or an offer to give me money? :P
2013-09-08 22:59:20	monochrom	no, sweety is just to rhyme with lazy, e.g., "I love haskell, it's so lazy"
2013-09-08 22:59:32	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 22:59:48	@Cale	Monoids.
2013-09-08 22:59:48	aristid	monochrom: it might rhyme better if the first line hadn't been confined to your head
2013-09-08 22:59:53	monochrom	(please don't take it too seriously and lecture me on non-strictness vs laziness)
2013-09-08 22:59:55	-->	amathew (~Adium@cpe-72-225-174-99.nyc.res.rr.com) has joined #haskell
2013-09-08 23:00:00	<--	amathew (~Adium@cpe-72-225-174-99.nyc.res.rr.com) has left #haskell
2013-09-08 23:00:21	monochrom	it is not confined to my head. it has appeared in this channel before
2013-09-08 23:00:29	aristid	hmm
2013-09-08 23:00:30	ReinH	companion_cube: but affirming a disjunct is FUN ;)
2013-09-08 23:00:32	ReinH	er
2013-09-08 23:00:35	ReinH	copumpkin: ^
2013-09-08 23:00:39	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2013-09-08 23:00:43	aristid	monochrom: somehow i didn't make the association to they monoids joke.
2013-09-08 23:00:46	aristid	*the
2013-09-08 23:00:48	monochrom	you may also have heard shachaf saying, "I love monochrom, he's so lazy"
2013-09-08 23:01:03	aristid	no:)
2013-09-08 23:01:03	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 23:01:23	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:01:25	Targen	edwardk: Hi!  Do you have a second to look at a curious bit of lens-xml?  I’m about to file a bug report, but my lens-fu is weak so I may be asking for something unreasonable re: the laws by which everything must abide...
2013-09-08 23:01:33	aristid	monochrom: why are you tip-toeing around it like this? just say it! "i love monoids. they are so easy!"
2013-09-08 23:01:50	edwardk	Targen: hop on #haskell-lens and ask there, even if i wind up too busy there should be someone
2013-09-08 23:01:50	monochrom	because I don't love monoids
2013-09-08 23:02:05	aristid	monochrom: why don't you love monoids?
2013-09-08 23:02:07	h4199	I'm just confused now, mind's getting hazy?... or perhaps the chat here is simply crazy?
2013-09-08 23:02:08	Targen	Ah, there’s another channel.  Great, thanks!
2013-09-08 23:02:11	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-08 23:02:26	monochrom	because they are too easy. or too hard. I don't know which. depends on how you look at it.
2013-09-08 23:02:37	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 23:02:44	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-08 23:02:46	<--	AleXoundOS (~AleXoundO@188.244.39.153) has quit (Remote host closed the connection)
2013-09-08 23:03:07	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-08 23:03:24	donri	i love women, they're so easy. ok this joke clearly doesn't scale.
2013-09-08 23:03:44	 *	aristid finds the tab with this again: http://www.vex.net/~trebla/photo/unorganized/pumpkin-catmorphism.jpg
2013-09-08 23:03:48	copumpkin	o.O
2013-09-08 23:03:59	-->	AleXoundOS (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-08 23:04:00	<--	ihm1 (~izzy@107.14.54.0) has quit (Client Quit)
2013-09-08 23:04:06	h4199	donri: please me, but please don't finish that thought in channel
2013-09-08 23:04:15	<--	VABAV (b00e885e@gateway/web/freenode/ip.176.14.136.94) has left #haskell
2013-09-08 23:04:17	copumpkin	take it to #haskell-blah, but preferably nowhere
2013-09-08 23:04:22	copumpkin	:)
2013-09-08 23:04:25	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-08 23:04:29	donri	yeah agreed
2013-09-08 23:05:27	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-08 23:05:42	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-08 23:06:04	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-08 23:06:12	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Ping timeout: 266 seconds)
2013-09-08 23:06:53	<--	akiress (~weechat@pdpc/supporter/student/akiress) has quit (Quit: WeeChat 0.4.1)
2013-09-08 23:07:12	dwcook	If I define type Foo = Num a => a and let a = 1 :: Foo, I expect a + (2 :: Integer) to be a type error because I thought Foo wouldn't let me pick a more specific type. Why is it not an error?
2013-09-08 23:07:17	-->	akiress (~weechat@pdpc/supporter/student/akiress) has joined #haskell
2013-09-08 23:07:25	monochrom	I love big-Omega, it's so hardy. (Hardy and Littlewood introduced it.)
2013-09-08 23:07:30	merijn	donri: Are you secretly a male supermodel to come up with that one? :p
2013-09-08 23:07:32	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:07:41	shachaf	dwcook: That signature has an implicit forall that should probably be explicit.
2013-09-08 23:08:04	<--	ihm1 (~izzy@107.14.54.0) has quit (Client Quit)
2013-09-08 23:08:07	<--	riley_ (~riley@75-170-137-73.desm.qwest.net) has quit (Quit: Goodbye)
2013-09-08 23:08:19	-->	akurei_ (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-08 23:08:24	donri	merijn: nah, but you do get a lot of unwanted female attention as a gay male :p
2013-09-08 23:08:52	<--	akurei (~akurei@31.193.12.99) has quit (Ping timeout: 260 seconds)
2013-09-08 23:09:18	dwcook	shachaf, same result with type Foo = forall a. Num a => a. What am I missing?
2013-09-08 23:09:25	monochrom	eliminate all Foo to see what's really going on
2013-09-08 23:09:31	<--	artyomkazak (~artyomkaz@94.25.228.16) has quit (Ping timeout: 264 seconds)
2013-09-08 23:09:44	monochrom	a :: Num a => a; a = 1
2013-09-08 23:09:45	shachaf	dwcook: Nothing -- this is expected behavior.
2013-09-08 23:10:04	monochrom	a + (2 :: Integer) will not be a type error
2013-09-08 23:10:08	dwcook	I mean to say, what am I misunderstanding that causes me to expect the wrong thing?
2013-09-08 23:10:25	copumpkin	dwcook: forall means that your value must be valid for all possible `a`s
2013-09-08 23:10:30	copumpkin	dwcook: you're saying it's exactly one of them
2013-09-08 23:10:33	dwcook	Oh, maybe I should figure out what the expression as a whole has as its type.
2013-09-08 23:10:34	copumpkin	which is not forall
2013-09-08 23:10:49	donri	dwcook: polymorphism would be useless if you couldn't specialize it to a concrete type later :)
2013-09-08 23:11:13	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-08 23:11:14	aristid	there's of course data Foo = forall a. Foo a
2013-09-08 23:11:18	dwcook	I was trying to have a type whose contents could only be used as a Num, not as a more specific type such as Integer.
2013-09-08 23:11:25	copumpkin	dwcook: the main thing to understand about polymorphism and the like is who makes the decisions. In your forall case, the caller gets to choose what type it wants, and you need to be able to provide it. You're trying to choose for the caller
2013-09-08 23:11:35	aristid	dwcook: that makes little sense i'm afraid :)
2013-09-08 23:11:39	-->	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-08 23:12:02	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-08 23:12:34	aristid	dwcook: it is the definition of Num a => a that any Num instance can be used.
2013-09-08 23:12:40	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:12:40	dwcook	Oh. Woops. I think it was the fact that I used a type *synonym*.
2013-09-08 23:12:51	dwcook	That was what I was confused about.
2013-09-08 23:13:20	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-08 23:13:25	monochrom	eliminate all type synonyms to see what's going on
2013-09-08 23:14:01	dwcook	Okay, I see what was going on now. For some reason I used type when I wanted newtype.
2013-09-08 23:14:07	shachaf	#define FOO (forall a. Num a => a)
2013-09-08 23:14:41	joelteon	Anybody know how to lift an IO action into the Base monad in pipes-safe 2?
2013-09-08 23:14:48	dwcook	Or maybe not even that.
2013-09-08 23:14:56	donri	joelteon: not liftIO?
2013-09-08 23:15:09	monochrom	it is unclear to me how useful is "a type that could only be used as a Num, not as a specific type"
2013-09-08 23:15:29	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-08 23:15:32	dwcook	monochrom, as an exercise, mostly.
2013-09-08 23:16:19	copumpkin	back when Num implied Show, it might have been more useful
2013-09-08 23:16:28	donri	problem with Num is all methods give you back an "a" so you can't really do anything with it
2013-09-08 23:16:32	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (Ping timeout: 241 seconds)
2013-09-08 23:16:34	copumpkin	forcing yourself to only use a certain interface can be interesting
2013-09-08 23:16:43	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 264 seconds)
2013-09-08 23:17:12	joelteon	uh oh, now the IO -> Base problem went away and I have a different one entirely
2013-09-08 23:17:54	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Quit: mikecaruso)
2013-09-08 23:18:17	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-08 23:18:21	dwcook	Yeah, I am discovering that Num doesn't seem to be that useful a constraint on existential types. I appear to have no means of saying "the contents should be the same type", which makes it kind of useless.
2013-09-08 23:18:32	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-08 23:18:43	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-08 23:18:45	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-08 23:19:03	shachaf	Much of the time when people think they want existential types, they actually don't.
2013-09-08 23:19:12	copumpkin	dwcook: existentials can be useful for ensuring uniqueness, but you want a typeclass/interface that's designed especially for that kind of usage
2013-09-08 23:19:14	merijn	@where existential-antipattern
2013-09-08 23:19:14	lambdabot	"Haskell Antipattern: Existential Typeclass" by Luke Palmer at <http://lukepalmer.wordpress.com/2010/01/24/haskell-antipattern-existential-typeclass/>
2013-09-08 23:19:16	copumpkin	and Num isn't that
2013-09-08 23:19:16	-->	CaptainK (~CaptainK@181.179.84.96) has joined #haskell
2013-09-08 23:19:18	jmcarthur	and sometimes they actually want universal types
2013-09-08 23:19:20	merijn	dwcook: Read that
2013-09-08 23:19:23	dwcook	I've read that blog post.
2013-09-08 23:19:26	merijn	ah
2013-09-08 23:19:30	merijn	nvm then :p
2013-09-08 23:19:37	dwcook	I simply wanted to get a feel for how existential types work, not for use in anything.
2013-09-08 23:19:46	<--	tylergillies_ (uid3033@gateway/web/irccloud.com/x-naofjdvpwvenkizh) has left #haskell
2013-09-08 23:20:02	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: sleep)
2013-09-08 23:20:22	merijn	The only usecase I've found for existentialtypes is together with Typeable to force my will upon the compiler when working with GADTs/TypeFamilies hijinks
2013-09-08 23:20:34	jmcarthur	i actually disagree that that's an antipattern.
2013-09-08 23:20:37	donri	sort of the whole point of an existential is that you *can* have different types for an "a"
2013-09-08 23:20:38	-->	nexx (nexx@dslb-188-096-163-202.pools.arcor-ip.net) has joined #haskell
2013-09-08 23:20:38	<--	nexx (nexx@dslb-188-096-163-202.pools.arcor-ip.net) has quit (Changing host)
2013-09-08 23:20:38	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-08 23:20:48	monochrom	SomeException is a good example of existential type
2013-09-08 23:20:52	jmcarthur	but i would whole heartedly agree than most people that do it are not understanding something
2013-09-08 23:20:58	jmcarthur	*that most
2013-09-08 23:21:04	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-08 23:21:21	<--	CaptainK (~CaptainK@181.179.84.96) has quit (Client Quit)
2013-09-08 23:21:26	merijn	jmcarthur: How is that *not* an antipattern?
2013-09-08 23:21:27	shachaf	I don't tell people that they shouldn't use existential types. But I tell them that they should understand the alternatives before they do.
2013-09-08 23:21:36	-->	CaptainK (~CaptainK@181.179.84.96) has joined #haskell
2013-09-08 23:21:37	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 23:21:48	merijn	jmcarthur: In almost all cases the non-existential approach is strictly better
2013-09-08 23:21:52	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:21:53	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-08 23:21:58	dwcook	Have you ever seen a legitimate usage of existentials that was better in some way than the alternatives?
2013-09-08 23:22:11	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-09-08 23:22:14	monochrom	in general, for an existential type to be useful, it must come with good getters. because the getters are all that you can get from an existential value
2013-09-08 23:22:32	jmcarthur	merijn: monochrom just said better what i was about to say
2013-09-08 23:22:39	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-08 23:22:58	<--	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-09-08 23:23:22	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 268 seconds)
2013-09-08 23:23:24	<--	CaptainK (~CaptainK@181.179.84.96) has quit (Read error: Connection reset by peer)
2013-09-08 23:23:41	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-08 23:23:41	merijn	jmcarthur: Then maybe you misunderstood the blogpost? It wasn't saying "existential types are antipattern", but a specific use of existential types (as for example illustrated by the the Widget example) is
2013-09-08 23:23:44	monochrom	if you throw in Typeable, you can maybe cut some corners on getters, because you can downcast to specific types and then you can do more.
2013-09-08 23:24:20	-->	amathew (~Adium@cpe-72-225-174-99.nyc.res.rr.com) has joined #haskell
2013-09-08 23:24:57	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-08 23:25:13	donri	is there a clean alternative to existentials for "extensible interfaces"? for example test-framework/tasty seem to use existentials; how would they look without it?
2013-09-08 23:25:14	monochrom	in OO languages, you always have Typeable. this is why you can make every type existential and be very careless about providing good getters
2013-09-08 23:25:25	jmcarthur	merijn: he named the antipattern "existential typeclass"
2013-09-08 23:25:30	jmcarthur	pretty general sounding to me
2013-09-08 23:25:45	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-08 23:26:00	FreeFull	https://news.ycombinator.com/item?id=6349837   How's this for an explanation of monads? Have I done something wrong?
2013-09-08 23:26:41	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-08 23:27:16	-->	anRch (~markmilli@ip-64-134-47-159.public.wayport.net) has joined #haskell
2013-09-08 23:27:22	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-09-08 23:27:24	merijn	jmcarthur: Sure, but the alternative is "Antipattern: Existential typeclass, except that one time where you know what you're doing"
2013-09-08 23:27:31	jmcarthur	donri: data type a la carte is worth looking into (but it becomes a bit unweildly in practice, IMO). i prefer oleg-style final encodings, which allow to extend functionality by simply instantiating more type classes.
2013-09-08 23:27:32	monochrom	gain some, lose some. Typeable means you gain type-case, and lose parametricity.
2013-09-08 23:27:45	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-08 23:27:47	@Cale	FreeFull: Why'd you decide to rename things?
2013-09-08 23:27:55	spaceships	writing foldMap in terms of traverse -- I feel as if I am cheating by using Writer to turn it into a list and then mappend over that...
2013-09-08 23:28:13	-->	madjestic (~madjestic@31.21.136.58) has joined #haskell
2013-09-08 23:28:28	jmcarthur	spaceships: doesn't seem like cheating to me
2013-09-08 23:28:44	@Cale	Oh, I suppose return is taken :P
2013-09-08 23:28:45	spaceships	jmcarthur: okay, thanks I'll move on ;)
2013-09-08 23:28:46	jmcarthur	spaceships: you are aware that there is a standard implementation for this, right?
2013-09-08 23:28:50	monochrom	parametricity means, for example: if I give you joy :: a -> [a], then you need only one test case to discover its entire behaviour. if your test shows that joy () = [(),()], then you know that for all x of all types, joy x = [x,x].
2013-09-08 23:29:05	jmcarthur	:t foldMapDefault
2013-09-08 23:29:05	lambdabot	    Not in scope: `foldMapDefault'
2013-09-08 23:29:06	lambdabot	    Perhaps you meant one of these:
2013-09-08 23:29:06	lambdabot	      `T.foldMapDefault' (imported from Data.Traversable),
2013-09-08 23:29:06	FreeFull	Cale: I thought return was a confusing name in terms of what it actually does, and collapse is also slightly more intuitive than join
2013-09-08 23:29:10	jmcarthur	:t T.foldMapDefault
2013-09-08 23:29:11	lambdabot	(Traversable t, Monoid m) => (a -> m) -> t a -> m
2013-09-08 23:29:16	monochrom	sad :: Typeable a => a -> [a]  does not allow you to conclude the same thing
2013-09-08 23:29:18	spaceships	jmcarthur: oh, cool, i'll check out the source for that !
2013-09-08 23:29:32	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 268 seconds)
2013-09-08 23:29:34	FreeFull	Cale: also you can't use return as a function name if the language already has it as a reserved word
2013-09-08 23:29:37	merijn	monochrom: Mostly I use Typeable with existential when I already have the type encoded elsewhere using GADTs/typefamilies and just need a way to convince GHC of the fact that I do know ;)
2013-09-08 23:29:40	donri	foldMapDefault f = getConst . traverse (Const . f)
2013-09-08 23:29:50	@Cale	return v is an action which does nothing except to return v
2013-09-08 23:29:51	Makoryu	FreeFull: The real problem with "understanding" monads has nothing to do with understanding the kinds of things that can be monads, and everything to do with understanding the kinds of operations that can be done on monads, and the kinds of operations that can be done on those operations
2013-09-08 23:29:53	jmcarthur	spaceships: it's basically like what you were doing, but just using something simpler than Writer
2013-09-08 23:30:07	niteria	@hoogle a -> (a,a)
2013-09-08 23:30:07	lambdabot	System.Random split :: RandomGen g => g -> (g, g)
2013-09-08 23:30:07	lambdabot	Network.BufferType buf_span :: BufferOp a -> (Char -> Bool) -> a -> (a, a)
2013-09-08 23:30:07	lambdabot	Network.BufferType buf_splitAt :: BufferOp a -> Int -> a -> (a, a)
2013-09-08 23:30:20	monochrom	precisely because sad can do type-case. it can do: if the parameter is Int, I'll give you [x-1, x+1, x], tee hee hee!
2013-09-08 23:30:25	-->	toddaaro (~toddaaro@opprobrio.us) has joined #haskell
2013-09-08 23:30:40	spaceships	jmcarthur: cool. checking out!
2013-09-08 23:30:41	niteria	@pl \x -> (x,x)
2013-09-08 23:30:41	lambdabot	join (,)
2013-09-08 23:30:41	@Cale	I think most people struggle not with the monad abstraction, but with the examples, which for many people will be the first serious examples of functional programming many beginners will come across.
2013-09-08 23:31:00	@Cale	er, that was redundant, but you get what I'm saying :P
2013-09-08 23:31:01	spaceships	donri: that's cute. need 10min to grok though ;)
2013-09-08 23:31:03	merijn	Cale++
2013-09-08 23:31:19	merijn	So many people trip not on monads, but on typeclasses and type signatures
2013-09-08 23:31:23	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 268 seconds)
2013-09-08 23:31:30	jmcarthur	monochrom: oof... aren't we getting Typeable for every type by default soon? do you know if we will still have to add Typeable constraints if we use it, or is this going the way of seq?
2013-09-08 23:31:30	@Cale	I mean things like the implementation of the State monad.
2013-09-08 23:31:58	@Cale	Most people won't be used to the idea of manipulating functions in quite that way when they come to that.
2013-09-08 23:32:22	<--	Yaniel (yaniel@evo.paivola.fi) has quit (Ping timeout: 248 seconds)
2013-09-08 23:32:28	FreeFull	You can't do monads without higher order functions
2013-09-08 23:32:28	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 23:32:32	joelteon	GHC, I love you, but sometimes your type inference really bones me
2013-09-08 23:32:35	monochrom	to save the day, the constraint "Typeable a" is still not automatic. if you see joy :: a -> [a], you still know that Typeable is not being used, even though a supports Typeable.
2013-09-08 23:32:39	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 23:32:42	jmcarthur	yay!
2013-09-08 23:32:43	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:32:55	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-08 23:32:55	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 245 seconds)
2013-09-08 23:33:01	toddaaro	hello, anyone able to help with a cabal problem on ubuntu 13.04 (there must be so many asking about that in this channel...). I successfully installed from source: apt-get for 7.6.2, make install on 7.6.3, make install on the haskell platform. I was then able to do cabal update, so I did a fresh install of cabal to get the updated version, then I added ~/.cabal/bin to my path, and now all cabal operations fail with "cabal: ghc: missing -B<dir> option"
2013-09-08 23:33:04	shachaf	Cale: You should configure your IRC client to show you when you're +o.
2013-09-08 23:33:17	@Cale	shachaf: It is configured to show this
2013-09-08 23:33:22	shachaf	Oh.
2013-09-08 23:33:37	jmcarthur	why you waving your ops around?
2013-09-08 23:33:45	@Cale	I don't know why I'm +o at the moment.
2013-09-08 23:33:59	-->	Yaniel (yaniel@evo.paivola.fi) has joined #haskell
2013-09-08 23:34:01	donri	Cale: it sure looks manly, though!
2013-09-08 23:34:10	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-08 23:34:14	FreeFull	Cale: The person has stated before in comments that they did not want a Haskelly explanation of monads
2013-09-08 23:34:21	--	Mode #haskell [-o Cale] by Cale
2013-09-08 23:34:34	Cale	FreeFull: I don't believe that the idea is all that useful in most other programming languages.
2013-09-08 23:34:41	-->	Sonarpulse (~user@unaffiliated/sonarpulse) has joined #haskell
2013-09-08 23:34:46	copumpkin	I have some quote in lambdabot with a non-haskelly definition of monads
2013-09-08 23:34:47	Cale	Apart from languages with type systems which are about as powerful as Haskell's
2013-09-08 23:35:06	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-08 23:35:10	FreeFull	Yeah, having a good type system and do notation helps a lot
2013-09-08 23:35:16	Cale	The reason is that in order to be a useful abstraction, you need to be able to write code which will generically work in any monad.
2013-09-08 23:35:17	<--	amathew (~Adium@cpe-72-225-174-99.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-08 23:35:27	erisco	I have [A] and each A has [B]. I want to uniquely number all A and B ... zip [1..] bs is the basic approach for one list
2013-09-08 23:35:28	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-08 23:35:38	FreeFull	Automatic polymorphism
2013-09-08 23:35:41	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-08 23:36:12	Cale	and in order to do that, you need to be able to have code which is polymorphic in its result type -- which is hard for most OO languages, and pretty much impossible for anything dynamically typed
2013-09-08 23:36:32	Cale	i.e. where you select the monad instance based on how the code is used
2013-09-08 23:36:40	Cale	This is mandatory because of the type of return
2013-09-08 23:36:49	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-08 23:37:07	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-08 23:37:09	Cale	return :: (Monad m) => a -> m a -- this has an m in its result type which can't be determined from the parameter you give it, only from the context in which it's used.
2013-09-08 23:37:16	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-08 23:37:38	dwcook	@type return ()
2013-09-08 23:37:39	lambdabot	Monad m => m ()
2013-09-08 23:37:51	FreeFull	That isn't something you get in Java I think
2013-09-08 23:37:57	copumpkin	or Scala
2013-09-08 23:37:59	dwcook	@type return () ++ []
2013-09-08 23:37:59	lambdabot	[()]
2013-09-08 23:38:13	Cale	You'll want things like sequence to be polymorphic too, on account of the fact that they're written using return and bind.
2013-09-08 23:38:16	FreeFull	Scala does have monads
2013-09-08 23:38:31	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 23:38:39	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 264 seconds)
2013-09-08 23:38:40	-->	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has joined #haskell
2013-09-08 23:38:42	Cale	So, basically, you need type (constructor) classes
2013-09-08 23:38:45	copumpkin	sure, but you can't make something like return that works right
2013-09-08 23:38:48	copumpkin	you always need to annotate it
2013-09-08 23:38:54	<--	madjestic (~madjestic@31.21.136.58) has quit (Ping timeout: 240 seconds)
2013-09-08 23:39:05	monochrom	Look at "Maybe Int". many languages now are polymorphic in the Int position, "Maybe t". few languages are polymorphic in the Maybe position, "m Int". this is why monad is less usable in most languages
2013-09-08 23:39:06	FreeFull	Typeclasses or something equivalent
2013-09-08 23:39:24	copumpkin	the thing that most people cite as being equivalent isn't really
2013-09-08 23:39:32	<--	exicer (~exicer@host86-147-11-129.range86-147.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2013-09-08 23:39:33	copumpkin	it gives a decent approximation for simple use cases
2013-09-08 23:39:52	Cale	Most implementations of "monad" in languages other than Haskell are either useless or horribly awkward, or both.
2013-09-08 23:40:24	monochrom	at this level we are not even getting into what kind of polymorphism (like type class? like Java class?)
2013-09-08 23:40:27	<--	anachrome (~lily@155.41.101.144) has quit (Ping timeout: 264 seconds)
2013-09-08 23:40:38	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 268 seconds)
2013-09-08 23:40:46	Cale	Yeah, monochrom has a good point there
2013-09-08 23:40:53	monochrom	just merely which position can be polymorphic
2013-09-08 23:40:56	<--	danald (~danald@e179071204.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-09-08 23:40:58	<--	RThinker (~yegor@77.47.204.159) has quit (Read error: Connection reset by peer)
2013-09-08 23:41:20	<--	chuzz (~user@unaffiliated/chuzz) has quit (Quit: Leaving)
2013-09-08 23:41:42	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-08 23:41:50	Cale	It's rare enough to be able to write anything which is polymorphic over a type which has a type parameter, let alone being able to abstract over such things which support a given interface.
2013-09-08 23:42:10	donri	even haskell doesn't *quite* have "monads", though, does it
2013-09-08 23:42:12	toddaaro	anyone able to help with my "cabal: ghc: missing -B<dir> option" problem? that is the result of nearly all cabal commands
2013-09-08 23:42:28	Cale	donri: It does have monads on Hask.
2013-09-08 23:42:40	Cale	(i.e. on the category of Haskell types and functions)
2013-09-08 23:42:44	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-08 23:42:57	spaceships	so in foldMap with traverse: there is no need for mappend because (<*>), used to collect side effects, for Const is mappend?
2013-09-08 23:42:58	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-09-08 23:43:01	-->	exicer (~exicer@host31-54-39-44.range31-54.btcentralplus.com) has joined #haskell
2013-09-08 23:43:07	aristid	donri: to step that game up a bit: try finding a way to claim that Agda doesn't have monads :)
2013-09-08 23:43:15	FreeFull	donri: It has endofunctors on Hask and some of those are monads
2013-09-08 23:43:20	Sonarpulse	If the Networking package uses all the crazy GHC IO manager features, why does it attempt to mimick the posix sockets API?
2013-09-08 23:43:21	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 23:43:35	donri	aristid: well that's what i'm thinking of. haskell doesn't enforce the laws.
2013-09-08 23:43:36	geekosaur	toddaaro, do you by any chance have a $PATH pointing at the ghc lib directory?
2013-09-08 23:43:37	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:43:43	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 268 seconds)
2013-09-08 23:43:48	geekosaur	(don't do that, you can't run the stuff in there directly for the most part)
2013-09-08 23:43:50	aristid	FreeFull: endofunctors on Hask are things that have kind * -> *?
2013-09-08 23:43:53	Cale	FreeFull: Here's my monad tutorial which is really secretly aimed at people who write monad tutorials: http://www.haskell.org/haskellwiki/Monads_as_computation
2013-09-08 23:44:06	toddaaro	geekosaur: yes I do, is that what does this? is there a different directory I should point at for the executables?
2013-09-08 23:44:12	shachaf	aristid: Things which are (or can be made) instances of Functor.
2013-09-08 23:44:20	donri	the monad tutorial tutorial
2013-09-08 23:44:28	aristid	donri: oh i thought you referred to it being limited to one category
2013-09-08 23:44:28	donri	monads are like tutorials, you can have tutorials on them
2013-09-08 23:44:30	aristid	shachaf: ah
2013-09-08 23:44:41	geekosaur	there should be an actual bin directory somewhere. it contains scripts which run the actual ghc binary with options telling it where things live (so that it can be relocated easily)
2013-09-08 23:44:47	toddaaro	geekosaur: well, I thought I did, I've got "/usr/local/lib/ghc-7.6.3"
2013-09-08 23:44:55	Cale	FreeFull: It is important to express the reason why we want to be able to identify the structures which support these operations: so that we get access to a library of functions which operate in an arbitrary monad.
2013-09-08 23:44:57	geekosaur	so it should be in /usr/local/bin
2013-09-08 23:44:59	toddaaro	geekosaur: ok, I'll try that, thanks a bunch!
2013-09-08 23:45:37	Cale	Without that conclusion, that we get all the stuff in Control.Monad for free without having to write it by hand, being able to identify what's a monad is pretty pointless.
2013-09-08 23:45:39	FreeFull	Cale: Yeah, you're right
2013-09-08 23:45:43	toddaaro	geekosaur: yep, fixed the issue
2013-09-08 23:45:52	geekosaur	if you look in there, ghc will be a shell script which sets a bunch of options to tell ghc where its guts are
2013-09-08 23:45:54	aristid	i must have missed the change when (<$) became a method of Functor oO
2013-09-08 23:46:11	FreeFull	I don't know how to turn that from something someone wouldn't even try to understand to something that will be easy
2013-09-08 23:46:24	jmcarthur	we also can have monads on (* -> *) -> (* -> *), etc.
2013-09-08 23:46:30	FreeFull	:t (<$)
2013-09-08 23:46:31	lambdabot	Functor f => a -> f b -> f a
2013-09-08 23:46:41	aristid	jmcarthur: in haskell? they'd not be instance of Monad though then?:)
2013-09-08 23:46:44	FreeFull	:t fmap const
2013-09-08 23:46:45	lambdabot	Functor f => f a -> f (b -> a)
2013-09-08 23:46:51	jmcarthur	aristid: no, a different type class
2013-09-08 23:46:55	-->	marchdown (~marchdown@91.200.224.77) has joined #haskell
2013-09-08 23:46:56	FreeFull	:t \a -> fmap (const a)
2013-09-08 23:46:57	lambdabot	Functor f => b -> f a -> f b
2013-09-08 23:47:03	jmcarthur	aristid: but that type class can generalize to a lot of other kinds through PolyKinds
2013-09-08 23:47:10	FreeFull	aristid: There, same type
2013-09-08 23:47:19	<--	Desheng (~Desheng@166.181.66.148) has quit (Ping timeout: 264 seconds)
2013-09-08 23:47:20	jmcarthur	aristid: basically anything of the form   (k -> *) -> (k -> *)
2013-09-08 23:47:28	aristid	FreeFull: ?
2013-09-08 23:47:33	jmcarthur	err
2013-09-08 23:47:39	Sonarpulse	I would understand if it was just a bunch of wrappers over the C
2013-09-08 23:47:41	jmcarthur	yeah that's right
2013-09-08 23:47:49	Sonarpulse	but it isn't at all.
2013-09-08 23:47:50	aristid	jmcarthur: sounds like something useful
2013-09-08 23:47:54	jmcarthur	it is!
2013-09-08 23:48:00	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-08 23:48:14	jmcarthur	(this is one of the definitions of indexed monads, btw)
2013-09-08 23:48:20	jmcarthur	(one of the more general ones)
2013-09-08 23:48:39	aristid	jmcarthur: you should make your own streaming I/O library with that and become rich and famous.
2013-09-08 23:48:44	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-08 23:48:49	jmcarthur	i'll pass
2013-09-08 23:48:57	jmcarthur	well, on the streaming library part :)
2013-09-08 23:49:07	aristid	:)
2013-09-08 23:49:15	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-08 23:49:16	Cale	FreeFull: My general approach is that if you don't want to learn either Haskell (or some other functional language with a powerful type system), or category theory, then there's not much point in bothering to try to understand what the monad abstraction is about, and you just shouldn't bother with it.
2013-09-08 23:49:28	jmcarthur	aristid: Tekmo's index-core actually is what i was just talking about
2013-09-08 23:49:44	aristid	jmcarthur: oh i wasn't aware of that
2013-09-08 23:49:54	jmcarthur	or one implementation of it
2013-09-08 23:50:08	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-08 23:50:09	Cale	It's a nice abstraction, but it's really not such a *huge* deal, and most programming languages aren't really able to take advantage of it.
2013-09-08 23:50:09	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-08 23:50:10	Twey	> zip [1 ..] $ as >>= ap (fmap . (,)) getBs -- erisco
2013-09-08 23:50:11	FreeFull	Ok, which languages do monads properly?   Arguably Haskell, Unarguably Agda, Idris?
2013-09-08 23:50:11	lambdabot	  Not in scope: `as'
2013-09-08 23:50:11	lambdabot	 Perhaps you meant one of these:
2013-09-08 23:50:11	lambdabot	   `a' (imported from D...
2013-09-08 23:50:14	jmcarthur	aristid: it's not polykinded though :(
2013-09-08 23:50:17	Twey	Er, silly me
2013-09-08 23:50:20	jmcarthur	aristid: but it should be
2013-09-08 23:50:32	Cale	FreeFull: Haskell does a better job than Idris and Coq, imo.
2013-09-08 23:50:42	companion_cube	OCaml can deal with monads, one at a time
2013-09-08 23:50:42	Cale	I don't know about the details with Agda.
2013-09-08 23:50:52	hiptobecubic	Why is it arguable for haskell?
2013-09-08 23:50:52	aristid	jmcarthur: pull request it. https://github.com/Gabriel439/Haskell-Index-Core-Library
2013-09-08 23:51:01	jmcarthur	companion_cube: ocaml's not very good at it, IMO
2013-09-08 23:51:02	Twey	Cale: Better than Idris how, exactly?
2013-09-08 23:51:04	FreeFull	hiptobecubic: Because Haskell doesn't check the laws hold
2013-09-08 23:51:06	erisco	Twey, what is ap?
2013-09-08 23:51:06	haasn	Haskell does Monad properly :)
2013-09-08 23:51:10	Cale	(The instance selection mechanism for typeclasses in Idris and Coq is flaky)
2013-09-08 23:51:18	Twey	erisco: ap is the Schönfinkel operator
2013-09-08 23:51:20	jmcarthur	Cale: agda is not much better than ocaml in this respect
2013-09-08 23:51:23	companion_cube	jmcarthur: not, but it does the job (see the monadic future libraries)
2013-09-08 23:51:23	haasn	FreeFull: oh, yes
2013-09-08 23:51:24	erisco	:t ap
2013-09-08 23:51:24	hiptobecubic	FreeFull, doesn't that restrict you to dependent types?
2013-09-08 23:51:25	lambdabot	Monad m => m (a -> b) -> m a -> m b
2013-09-08 23:51:30	Twey	(on functions)
2013-09-08 23:51:44	haasn	FreeFull: also haskell doesn't do a very good job of encoding arbitrary monads, only monads that are injective endofunctors over Hask or w/e
2013-09-08 23:51:44	erisco	ah
2013-09-08 23:51:52	aristid	jmcarthur: because agda doesn't have proper type classes?
2013-09-08 23:51:53	dwcook	Why is STM limited to GHC?
2013-09-08 23:52:01	dwcook	In practice, is this an issue?
2013-09-08 23:52:02	jmcarthur	companion_cube: if i can't write a decently usable polymorphic traverse, i'm not very happy with it
2013-09-08 23:52:08	aristid	dwcook: it's not limited to GHC oO
2013-09-08 23:52:09	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-08 23:52:15	Cale	haasn: Well, monads are endofunctors (usually, unless explicitly generalised)
2013-09-08 23:52:33	dwcook	Perhaps I was misled by this description: TChan: Transactional channels (GHC only)
2013-09-08 23:52:35	companion_cube	jmcarthur: it's not as convenient as hskell, but the abstraction is still definitely worth it
2013-09-08 23:52:44	Cale	I don't believe they'd have to be injective ones -- it's just a little tricky to express type constructors which aren't injective in Haskell.
2013-09-08 23:52:44	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-09-08 23:52:45	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-08 23:52:52	jmcarthur	aristid: well, type classes are one way to save it, sure. i think instance arguments could help, but i don't have the experience with them to say, and the standard library doesn't encourage them for monads yet anyway
2013-09-08 23:53:06	Cale	But the Monad typeclass should work fine even if the type constructor isn't injective.
2013-09-08 23:53:19	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2013-09-08 23:53:19	<--	myme (~myme@djent.myme.no) has quit (Ping timeout: 264 seconds)
2013-09-08 23:53:20	aristid	jmcarthur: the standard library monads in agda are also lawless :/
2013-09-08 23:53:41	jmcarthur	aristid: yeah, pretty disappointing there
2013-09-08 23:53:44	aristid	jmcarthur: the instance argument stuff is fairly limited btw
2013-09-08 23:53:46	merijn	dwcook: STM is limited to GHC because no other Haskell compiler has implemented STM at the moment
2013-09-08 23:53:49	Cale	Yeah, I suppose one downside to the encoding of monads in Haskell is that we can't represent the laws
2013-09-08 23:53:57	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-08 23:53:59	Cale	while in Coq or Idris, they can
2013-09-08 23:54:06	jmcarthur	aristid: yeah, i can't imagine instance arguments being all that great
2013-09-08 23:54:10	merijn	dwcook: on the other hand, no one tries to use a compiler other than GHC for production code atm either
2013-09-08 23:54:12	haasn	Cale: Hmm. Can type- or data families be instances of typeclasses (eg. Monad)?
2013-09-08 23:54:17	<--	ihm1 (~izzy@107.14.54.0) has quit (Read error: Connection reset by peer)
2013-09-08 23:54:21	shachaf	jmcarthur: Most #haskell arguments aren't all that great.
2013-09-08 23:54:23	aristid	dwcook: no other haskell compiler is also really used by anybody at the moment. other than maybe the subset-of-haskell-to-javascript compilers.
2013-09-08 23:54:27	merijn	Well, except for Standard Chartered who implemented their own compiler :p
2013-09-08 23:54:28	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-09-08 23:54:31	-->	ihm1 (~izzy@107.14.54.0) has joined #haskell
2013-09-08 23:54:33	dwcook	Hmm, I see.
2013-09-08 23:54:34	Cale	haasn: Should be possible. Closed ones would do better.
2013-09-08 23:54:38	shachaf	Oh, I guess that'd be #agda. Oh well.
2013-09-08 23:54:46	dwcook	Why are there projects like HUGS? Did they just happen to never get popular?
2013-09-08 23:54:53	merijn	aristid: Wrong, apparently the majority of Standard Chartered's code is now their own strict Haskell dialect
2013-09-08 23:55:00	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-08 23:55:01	aristid	merijn: meh.
2013-09-08 23:55:10	jmcarthur	dwcook: hugs is pretty old, and used to be more popular than it is now
2013-09-08 23:55:12	Cale	dwcook: Hugs used to be more popular
2013-09-08 23:55:22	fryguybob	dwcook: GHC's STM has support in the runtime system, so it isn't just a matter of building a haskell library with another compiler.
2013-09-08 23:55:30	merijn	dwcook: Hugs was veyr popular, at some point people just stopped maintaining it
2013-09-08 23:55:36	merijn	dwcook: Also, most of the stuff that made hugs popular was stolen by ghc(i) :p
2013-09-08 23:55:37	Cale	But it's written in C which means that Haskell programmers aren't *really* going to want to maintain it ;)
2013-09-08 23:55:39	<--	lemao (~lemao@99-50-209-18.lightspeed.wlfrct.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-08 23:55:44	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Remote host closed the connection)
2013-09-08 23:55:48	watermind	jmcarthur: companion_cube: quite frankly I wouldn't say haskell is great at dealing with multiple monads either - although I've yet to read the recent paper on Extensible Effects (that seems interesting)
2013-09-08 23:55:49	aristid	merijn: sounds more like a haskell-inspired language than haskell if it's strict:)
2013-09-08 23:55:51	dwcook	Heheh.
2013-09-08 23:55:57	jmcarthur	merijn: SC's implementation has some really cool features, too!
2013-09-08 23:56:21	jmcarthur	watermind: i think the extensible effects stuff is way overblown, and i think haskell monads are underrated ;)
2013-09-08 23:56:34	aristid	monad transformers ftw :P
2013-09-08 23:56:40	Twey	jmcarthur: Overblown why?
2013-09-08 23:59:26	FreeFull	What are the non-lazy ways of implementing non-strictness?
2013-09-09 00:03:02	-->	Saizan_ (~saizan@li265-65.members.linode.com) has joined #haskell
2013-09-09 00:03:07	-->	jkarlson (jkarlson@kosh.org.aalto.fi) has joined #haskell
2013-09-09 00:03:09	-->	squimmy_ (tim1@mussel.ucc.gu.uwa.edu.au) has joined #haskell
2013-09-09 00:03:12	-->	Tekerson_ (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has joined #haskell
2013-09-09 00:05:48	-->	ihm1_ (~izzy@107.14.54.0) has joined #haskell
2013-09-09 00:06:12	-->	ttm (~The_third@coucousylvain.tocards.net) has joined #haskell
2013-09-09 00:06:25	<--	ihm1_ (~izzy@107.14.54.0) has quit (Client Quit)
2013-09-09 00:07:31	<--	lightquake (~lightquak@li363-105.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Boney (~paul@ppp118-209-98-12.lns20.mel4.internode.on.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	boegel|work (~boegel@ca60c171.ugent.be) has quit (*.net *.split)
2013-09-09 00:07:31	<--	frontendloader (~mst@tomservo.robotrollcall.org) has quit (*.net *.split)
2013-09-09 00:07:31	<--	ejls (~Epsilon01@mszy.fr) has quit (*.net *.split)
2013-09-09 00:07:31	<--	pcapriotti (~paolo@176.248.81.35) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Dashkal (~dashkal@unaffiliated/dashkal) has quit (*.net *.split)
2013-09-09 00:07:31	<--	ccasin (~ccasin@GRW565-3.cis.upenn.edu) has quit (*.net *.split)
2013-09-09 00:07:31	<--	squimmy (tim1@mussel.ucc.gu.uwa.edu.au) has quit (*.net *.split)
2013-09-09 00:07:31	<--	knz (~kena@82-170-42-189.ip.telfort.nl) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Saizan (~saizan@li265-65.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	luite (~luite@luite.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	chrisbuchholz (~chrisbuch@li189-30.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	crs_ (~crs_@192.210.215.64) has quit (*.net *.split)
2013-09-09 00:07:31	<--	tehroflmaoer (~tehroflma@199.101.99.208) has quit (*.net *.split)
2013-09-09 00:07:31	<--	cajla (~cajla@faust.lysator.liu.se) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Ke (jkarlson@pdpc/supporter/active/ke) has quit (*.net *.split)
2013-09-09 00:07:31	<--	gilbertw1 (~gilbertw1@192.241.174.128) has quit (*.net *.split)
2013-09-09 00:07:31	<--	mortberg (~mortberg@c-46-162-99-51.cust.bredband2.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	thomassgn (~thomas@browniehive.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	kaol (kaol@piperka.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	The_third_man (~The_third@clavardage.tocards.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	betawaffle (~betawaffl@ec2-174-129-19-107.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	yeltzooo (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	dmp1ce (~david@tp.daveparrish.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	kobain (~kobian@unaffiliated/kobain) has quit (*.net *.split)
2013-09-09 00:07:31	<--	daniel-s_ (~daniel-s@2001:388:608c:4c40:f9d8:3bf9:361a:1c6f) has quit (*.net *.split)
2013-09-09 00:07:31	<--	mlh (~mlh@c220-239-109-196.belrs4.nsw.optusnet.com.au) has quit (*.net *.split)
2013-09-09 00:07:31	<--	anRch (~markmilli@ip-64-134-47-159.public.wayport.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (*.net *.split)
2013-09-09 00:07:31	<--	evohunz (~evohunz@187.85.176.249) has quit (*.net *.split)
2013-09-09 00:07:31	<--	jlamothe_ (~jlamothe@jlamothe.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	LeNsTR (~lenstr@master.qs.biz) has quit (*.net *.split)
2013-09-09 00:07:31	<--	shesek (~shesek@87.68.18.255.cable.012.net.il) has quit (*.net *.split)
2013-09-09 00:07:31	<--	twopoint718 (~chris@fsf/member/twopoint718) has quit (*.net *.split)
2013-09-09 00:07:31	<--	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (*.net *.split)
2013-09-09 00:07:31	<--	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has quit (*.net *.split)
2013-09-09 00:07:31	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	thunderrd (~thunderrd@119.42.79.179) has quit (*.net *.split)
2013-09-09 00:07:32	<--	conehead (~conehead@unaffiliated/conehead) has quit (*.net *.split)
2013-09-09 00:07:32	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Sorella (~queen@oftn/member/Sorella) has quit (*.net *.split)
2013-09-09 00:07:32	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (*.net *.split)
2013-09-09 00:07:32	<--	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has quit (*.net *.split)
2013-09-09 00:07:32	<--	go|dfish (goldfish@nat/dcunetworkingsociety/x-jfwdsjjzqmzplavb) has quit (*.net *.split)
2013-09-09 00:07:32	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit (*.net *.split)
2013-09-09 00:07:32	<--	augur (~augur@208.58.5.87) has quit (*.net *.split)
2013-09-09 00:07:32	<--	wojtekM_ (~user@78.9.7.170) has quit (*.net *.split)
2013-09-09 00:07:32	<--	stelleg (~stelleg@c-68-35-148-72.hsd1.nm.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has quit (*.net *.split)
2013-09-09 00:07:32	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	noam_ (~noam@213.57.201.130) has quit (*.net *.split)
2013-09-09 00:07:32	<--	xinming (~xinming@113.248.66.41) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Tarential (~Tarential@li421-205.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has quit (*.net *.split)
2013-09-09 00:07:32	<--	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (*.net *.split)
2013-09-09 00:07:32	<--	td123 (~thomas-dz@archlinux/developer/td123) has quit (*.net *.split)
2013-09-09 00:07:32	<--	totte (~totte@unaffiliated/totte) has quit (*.net *.split)
2013-09-09 00:07:32	<--	satc (~smuxi@202.3.77.239) has quit (*.net *.split)
2013-09-09 00:07:32	<--	statusfailed (~statusfai@statusfailed.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	effy (~quassel@222.131.154.131) has quit (*.net *.split)
2013-09-09 00:07:32	<--	peltchu_ (~xel@pi.xel.fi) has quit (*.net *.split)
2013-09-09 00:07:32	<--	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has quit (*.net *.split)
2013-09-09 00:07:32	<--	wormphlegm (~wormphleg@24.130.9.50) has quit (*.net *.split)
2013-09-09 00:07:32	<--	wollw (davidshere@unaffiliated/wollw) has quit (*.net *.split)
2013-09-09 00:07:32	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	robinbb (~robinbb-f@li234-110.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	rpenguin (rpenguin@cipherstroke.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	tessier (~treed@kernel-panic/copilotco) has quit (*.net *.split)
2013-09-09 00:07:32	<--	stiell (~stian@fsf/member/stiell) has quit (*.net *.split)
2013-09-09 00:07:32	<--	tew88- (~tom@176.56.237.134) has quit (*.net *.split)
2013-09-09 00:07:32	<--	theorbtwo (~theorb@91.84.53.6) has quit (*.net *.split)
2013-09-09 00:07:32	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	jdoliner (~jdoliner@173-228-89-104.dsl.static.sonic.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	cjay (cjay@nerdbox.nerd2nerd.org) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Excedrin (~Excedrin@baz.lerp.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Lemmih (~lemmih@37.157.250.50) has quit (*.net *.split)
2013-09-09 00:07:32	<--	McManiaC (~mcmaniac@nils.cc) has quit (*.net *.split)
2013-09-09 00:07:32	<--	FalconKirtaran2 (~FalconKir@anon-38-182.vpn.ipredator.se) has quit (*.net *.split)
2013-09-09 00:07:32	<--	zacts (~zacts@unaffiliated/zacts) has quit (*.net *.split)
2013-09-09 00:07:32	<--	jzelinskie (~ubuntu@ec2-54-226-8-57.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	neptunepink (~root@adsl-99-105-53-81.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	SirChurchill (~mrshankly@37.139.2.6) has quit (*.net *.split)
2013-09-09 00:07:32	<--	doshitan (~doshitan@ip68-102-199-178.ks.ok.cox.net) has quit (*.net *.split)
2013-09-09 00:07:32	<--	MasseR (~masse@82.192.74.13) has quit (*.net *.split)
2013-09-09 00:07:32	<--	Nimatek (~x@unaffiliated/nimatek) has quit (*.net *.split)
2013-09-09 00:07:32	<--	jb55 (~jb55@174.143.211.135) has quit (*.net *.split)
2013-09-09 00:07:32	<--	elgot (~elgot@c-a0c3e455.017-362-6c6b701.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-09 00:07:32	<--	OrangeDu1k (~orangeduc@li143-4.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:32	<--	notdan (~h@unaffiliated/notdan) has quit (*.net *.split)
2013-09-09 00:07:32	<--	kosmikus (~kosmikus@luiiise.kosmikus.org) has quit (*.net *.split)
2013-09-09 00:07:32	<--	KyleCloud (uid12278@gateway/web/irccloud.com/x-ptzxllbtxaotgnyd) has quit (*.net *.split)
2013-09-09 00:07:32	<--	jodaro (uid5995@gateway/web/irccloud.com/x-gizrzrfmtvfjifce) has quit (*.net *.split)
2013-09-09 00:07:32	<--	charlesofarrell_ (uid7413@gateway/web/irccloud.com/x-tggjofjxionrjdtc) has quit (*.net *.split)
2013-09-09 00:07:32	<--	puzza007 (uid127@gateway/web/irccloud.com/x-xvovdqykqgejvjze) has quit (*.net *.split)
2013-09-09 00:07:32	<--	xplat (~james@67.205.253.166) has quit (*.net *.split)
2013-09-09 00:07:33	<--	tulcod (~tulcod@31.25.98.155) has quit (*.net *.split)
2013-09-09 00:07:33	<--	adimit (~adimit@ardanah.baconseed.org) has quit (*.net *.split)
2013-09-09 00:07:33	<--	lambdaTerrorist (~otk@unaffiliated/xenocons) has quit (*.net *.split)
2013-09-09 00:07:33	<--	threedaymonk (~threedaym@surimi.vm.bytemark.co.uk) has quit (*.net *.split)
2013-09-09 00:07:33	<--	xnyhps (~xnyhps@s.xnyhps.nl) has quit (*.net *.split)
2013-09-09 00:07:33	<--	drewr (~drewr@valve.draines.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	quicksilver (~jules@roobarb.crazydogs.org) has quit (*.net *.split)
2013-09-09 00:07:33	<--	simon (~simon@hypnos.pronoia.dk) has quit (*.net *.split)
2013-09-09 00:07:33	<--	exicer (~exicer@host31-54-39-44.range31-54.btcentralplus.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (*.net *.split)
2013-09-09 00:07:33	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Polarina (~polarina@wesnoth/translator/Polarina) has quit (*.net *.split)
2013-09-09 00:07:33	<--	donri (~donri@unaffiliated/dagodenhall) has quit (*.net *.split)
2013-09-09 00:07:33	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has quit (*.net *.split)
2013-09-09 00:07:33	<--	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:33	<--	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	bondar (~bondar@197.156.132.62) has quit (*.net *.split)
2013-09-09 00:07:33	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	jibi (~jibi@77.42.48.122) has quit (*.net *.split)
2013-09-09 00:07:33	<--	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	hc (hc@public.chaos.hg.tu-darmstadt.de) has quit (*.net *.split)
2013-09-09 00:07:33	<--	cdidd (~cdidd@128-68-139-216.broadband.corbina.ru) has quit (*.net *.split)
2013-09-09 00:07:33	<--	ReinH (~reinh@li14-106.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	diadara (~diadara@115.249.18.25) has quit (*.net *.split)
2013-09-09 00:07:33	<--	talzeus_ (~studybot_@113.37.230.101) has quit (*.net *.split)
2013-09-09 00:07:33	<--	zarul (~zarul@ubuntu/member/zarul) has quit (*.net *.split)
2013-09-09 00:07:33	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	transfinite (~ecc@unaffiliated/transfinite) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Martty (~martty@lion.puttynuts.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	threestrikes (~wontez@ltea-047-066-103-099.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	tov (~tov@eecs-login.seas.harvard.edu) has quit (*.net *.split)
2013-09-09 00:07:33	<--	timemage (~user@unaffiliated/timemage) has quit (*.net *.split)
2013-09-09 00:07:33	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	wagle (~wagle@static-50-43-34-150.bvtn.or.frontiernet.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	poucet_ (~chris@li23-146.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	adlan (~AAFR@aafr.me) has quit (*.net *.split)
2013-09-09 00:07:33	<--	cl_away (~clahey@208.91.2.2) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Ralith (~ralith@216.162.199.202) has quit (*.net *.split)
2013-09-09 00:07:33	<--	ivan\ (~ivan@unaffiliated/ivan/x-000001) has quit (*.net *.split)
2013-09-09 00:07:33	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	newsham (~chat@udp217044uds.hawaiiantel.net) has quit (*.net *.split)
2013-09-09 00:07:33	<--	tromp (~tromp@rtc35-148.rentec.com) has quit (*.net *.split)
2013-09-09 00:07:33	<--	ido (~ido@pdpc/supporter/student/ido) has quit (*.net *.split)
2013-09-09 00:07:34	<--	srcerer (~chatzilla@dns2.klsairexpress.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	ivan` (~ivan@unaffiliated/ivan/x-000001) has quit (*.net *.split)
2013-09-09 00:07:34	<--	hpc (~juzz@ip98-169-42-110.dc.dc.cox.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	joar (~joar@fsf/member/jwandborg) has quit (*.net *.split)
2013-09-09 00:07:34	<--	wting (~wting@192.241.232.101) has quit (*.net *.split)
2013-09-09 00:07:34	<--	b_jonas (~x@russell2.math.bme.hu) has quit (*.net *.split)
2013-09-09 00:07:34	<--	guymann (~c@unaffiliated/guymann) has quit (*.net *.split)
2013-09-09 00:07:34	<--	ofan (~ofan@unaffiliated/ofan) has quit (*.net *.split)
2013-09-09 00:07:34	<--	helgikrs (~helgikrs@89.17.128.56) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Bynbo7 (~Axman6@pdpc/supporter/student/Axman6) has quit (*.net *.split)
2013-09-09 00:07:34	<--	neektza1 (~neektza@marvin.kset.org) has quit (*.net *.split)
2013-09-09 00:07:34	<--	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	paddymahoney (~paddymaho@24.137.221.230) has quit (*.net *.split)
2013-09-09 00:07:34	<--	matthavener (~matt@matthavener.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	dsp_ (~dsp@technoanimal.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	brandonw (~brandonw@24-181-232-41.dhcp.oxfr.ma.charter.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Jaak (~foo@84.50.244.132) has quit (*.net *.split)
2013-09-09 00:07:34	<--	jang (~granjan@nat/hp/x-xzfhesuewfohpejm) has quit (*.net *.split)
2013-09-09 00:07:34	<--	mroman (~roman2@fmnssun.ibone.ch) has quit (*.net *.split)
2013-09-09 00:07:34	<--	lieven_ (mal@ks24170.kimsufi.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Morgawr (~morgawr@unaffiliated/morgawr) has quit (*.net *.split)
2013-09-09 00:07:34	<--	finnrobi (~robb@notlupus.info) has quit (*.net *.split)
2013-09-09 00:07:34	<--	ggreg (~ggreg@int.0x80.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Will| (~wrboyce@88.198.95.211) has quit (*.net *.split)
2013-09-09 00:07:34	<--	banseljaj (~imami@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	tauntaun (~Anthony@li327-197.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	gdeest (~gael@ns357861.ovh.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	zaphar_ps (~zaphar@blender/coder/Zaphar-ps) has quit (*.net *.split)
2013-09-09 00:07:34	<--	stvc (~quassel@192.241.166.39) has quit (*.net *.split)
2013-09-09 00:07:34	<--	satshaba1 (~root@198.199.67.210) has quit (*.net *.split)
2013-09-09 00:07:34	<--	vvv (~vvv@mediawiki/VasilievVV) has quit (*.net *.split)
2013-09-09 00:07:34	<--	divarvel (~clement@beg-ar-loge.delafargue.name) has quit (*.net *.split)
2013-09-09 00:07:34	<--	petantik (~oz@unaffiliated/ceezer) has quit (*.net *.split)
2013-09-09 00:07:34	<--	upgrayeddd (uid2969@gateway/web/irccloud.com/x-spwbdopgfsaxucfx) has quit (*.net *.split)
2013-09-09 00:07:34	<--	bobry (uid4445@gateway/web/irccloud.com/x-owhdcpjeoijrtdkj) has quit (*.net *.split)
2013-09-09 00:07:34	<--	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Tinned_Tuna (~turner@176.58.90.210) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Riussi (~riussi@codemancers.fi) has quit (*.net *.split)
2013-09-09 00:07:34	<--	k4nar (~quassel@ks3262633.kimsufi.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	bentrevor (uid11649@gateway/web/irccloud.com/x-vxnwwndysfdjqxga) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Vertue (uid10621@gateway/web/irccloud.com/x-hwpqbrfhqzhtynha) has quit (*.net *.split)
2013-09-09 00:07:34	<--	so (shawn@unaffiliated/so) has quit (*.net *.split)
2013-09-09 00:07:34	<--	FUZxxl (~fuz@d00m.org) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Raynes (~macro@unaffiliated/raynes) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Ikarus (~ikarus@ip51cdc735.speed.planet.nl) has quit (*.net *.split)
2013-09-09 00:07:34	<--	brett (~brett@rdnzl.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	noplamodo (~noplamodo@unaffiliated/noplamodo) has quit (*.net *.split)
2013-09-09 00:07:34	<--	alej (~alej@karsten.ucsd.edu) has quit (*.net *.split)
2013-09-09 00:07:34	<--	RevJohnnyHealey (~rev@173.45.227.35) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Elision (~mustelide@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	kranius (~kranius@88-191-231-119.rev.dedibox.fr) has quit (*.net *.split)
2013-09-09 00:07:34	<--	thoughtpolice (~a@unaffiliated/thoughtpolice) has quit (*.net *.split)
2013-09-09 00:07:34	<--	anhall (mprencipe@217.30.184.161) has quit (*.net *.split)
2013-09-09 00:07:34	<--	bgamari (~bgamari@pool-108-8-228-201.spfdma.east.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	xaimus (identsucks@spacedoggle.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:34	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (*.net *.split)
2013-09-09 00:07:34	<--	akurei_ (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has quit (*.net *.split)
2013-09-09 00:07:34	<--	schlaftier (~daniel@5.158.182.23) has quit (*.net *.split)
2013-09-09 00:07:34	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (*.net *.split)
2013-09-09 00:07:34	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (*.net *.split)
2013-09-09 00:07:34	<--	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	oleo (~oleo@xdsl-78-35-176-124.netcologne.de) has quit (*.net *.split)
2013-09-09 00:07:35	<--	pavonia (~user@p5B14C5C4.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:35	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	erisco (~erisco@198-91-210-150.cpe.distributel.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	shiona (shiona@shiona.tontut.fi) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	munro (~ryan@node-2.0x0539.org) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Puffton (~Puffton@s213-103-201-120.cust.tele2.se) has quit (*.net *.split)
2013-09-09 00:07:35	<--	dyreshark (~dyreshark@198.199.76.106) has quit (*.net *.split)
2013-09-09 00:07:35	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	mobileblue (~mobileblu@dslb-094-218-066-149.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Baughn (~svein@tsugumi.brage.info) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Targen (~iguana@190.73.206.135) has quit (*.net *.split)
2013-09-09 00:07:35	<--	specklessness70 (~speckless@c-67-182-147-102.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Twey (~Twey@unaffiliated/twey) has quit (*.net *.split)
2013-09-09 00:07:35	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	kludge` (~comet@unaffiliated/espiral) has quit (*.net *.split)
2013-09-09 00:07:35	<--	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Nahra (~Nahra@unaffiliated/nahra) has quit (*.net *.split)
2013-09-09 00:07:35	<--	cruxeter1us (cruxtech@secspeed.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	nycs (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Philonous (~Philonous@dslb-188-106-138-223.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	dkordic (~danilo@93-87-124-217.dynamic.isp.telekom.rs) has quit (*.net *.split)
2013-09-09 00:07:35	<--	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	fizruk (~fizruk@79.165.40.18) has quit (*.net *.split)
2013-09-09 00:07:35	<--	johnw (~johnw@c-98-214-70-173.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:35	<--	Natch (~Natch@c-cdcee155.25-4-64736c10.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-09 00:07:35	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (*.net *.split)
2013-09-09 00:07:35	<--	nanothief (~nanothief@116.255.8.253) has quit (*.net *.split)
2013-09-09 00:07:35	<--	killy9999 (~killy@hydra.ics.p.lodz.pl) has quit (*.net *.split)
2013-09-09 00:07:35	<--	ChongLi (~chongli@24-212-141-111.cable.teksavvy.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	si14 (uid2619@gateway/web/irccloud.com/x-ahsnmzsqpaoarlib) has quit (*.net *.split)
2013-09-09 00:07:35	<--	etrepum (uid763@gateway/web/irccloud.com/x-shneosfmifqdvutw) has quit (*.net *.split)
2013-09-09 00:07:35	<--	alexander__b (~alexander@fsf/member/alexanderb) has quit (*.net *.split)
2013-09-09 00:07:35	<--	ernst (~ernst@static.85-10-192-204.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:35	<--	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has quit (*.net *.split)
2013-09-09 00:07:35	<--	ByronJohnson (~Byron@unaffiliated/bob0) has quit (*.net *.split)
2013-09-09 00:07:35	<--	MitchW (~MitchW@124-171-104-43.dyn.iinet.net.au) has quit (*.net *.split)
2013-09-09 00:07:35	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (*.net *.split)
2013-09-09 00:07:35	<--	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	ericmj (~ericmj@198.211.118.116) has quit (*.net *.split)
2013-09-09 00:07:35	<--	xymox (lechuck@unaffiliated/contempt) has quit (*.net *.split)
2013-09-09 00:07:35	<--	arbn1 (~arbn@auriga.kiwilight.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	mviljamaa (mviljamaa@kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:35	<--	joachifm (~joachifm@ulrik.uio.no) has quit (*.net *.split)
2013-09-09 00:07:35	<--	eevar (~eevar@175.80-203-27.nextgentel.com) has quit (*.net *.split)
2013-09-09 00:07:35	<--	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (*.net *.split)
2013-09-09 00:07:36	<--	plhk (~plhk@urban.v12.su) has quit (*.net *.split)
2013-09-09 00:07:36	<--	tomprince (~tomprince@socrates.hocat.ca) has quit (*.net *.split)
2013-09-09 00:07:36	<--	suiside (tajnyman@unaffiliated/suiside) has quit (*.net *.split)
2013-09-09 00:07:36	<--	TheSpectre (~root@artemis.zerosecure.com) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Vorpal (~Vorpal@unaffiliated/vorpal) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Dodek (am291698@duch.mimuw.edu.pl) has quit (*.net *.split)
2013-09-09 00:07:36	<--	cognominal__ (~cognomina@87-231-78-66.rev.numericable.fr) has quit (*.net *.split)
2013-09-09 00:07:36	<--	jaimef (jaimef@dns.mauthesis.com) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-09-09 00:07:36	<--	gbeshers (~gbeshers@pool-74-97-190-27.prvdri.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Kelet (~Kelet@unaffiliated/kelet) has quit (*.net *.split)
2013-09-09 00:07:36	<--	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has quit (*.net *.split)
2013-09-09 00:07:36	<--	otterdam (~otterdam@reddit/operator/otterdam) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Tehnix (~Tehnix@192.81.221.23) has quit (*.net *.split)
2013-09-09 00:07:36	<--	maksbotan (~quassel@gentoo/developer/maksbotan) has quit (*.net *.split)
2013-09-09 00:07:36	<--	arkx (~aku@eagleflow.fi) has quit (*.net *.split)
2013-09-09 00:07:36	<--	identity (~0xC3@50708181.static.ziggozakelijk.nl) has quit (*.net *.split)
2013-09-09 00:07:36	<--	ent (entgod@kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Zariel (~zariel@li37-84.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:36	<--	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has quit (*.net *.split)
2013-09-09 00:07:36	<--	akraut (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Ptival (~Ptival@goto.ucsd.edu) has quit (*.net *.split)
2013-09-09 00:07:36	<--	epsylon (~epsylon@abbaye.thele.me) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Veltas (~quassel@backus.compsoc.warwick.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:36	<--	joefiorini (uid3127@gateway/web/irccloud.com/x-crwzgjtvvmjdhjjr) has quit (*.net *.split)
2013-09-09 00:07:36	<--	companion_cube (~simon@sac.cedeela.fr) has quit (*.net *.split)
2013-09-09 00:07:36	<--	schroedinbug (~schroedin@71-212-238-198.hlrn.qwest.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	stass (stas@ssh.deglitch.com) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Ornedan (aitakang@melkki.cs.helsinki.fi) has quit (*.net *.split)
2013-09-09 00:07:36	<--	macron (~macron@158.255.215.93) has quit (*.net *.split)
2013-09-09 00:07:36	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (*.net *.split)
2013-09-09 00:07:36	<--	james-ubc (~james@66.183.96.217) has quit (*.net *.split)
2013-09-09 00:07:36	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	nexx (nexx@unaffiliated/xxen) has quit (*.net *.split)
2013-09-09 00:07:36	<--	akiress (~weechat@pdpc/supporter/student/akiress) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (*.net *.split)
2013-09-09 00:07:36	<--	trism (~jconti@unaffiliated/trism) has quit (*.net *.split)
2013-09-09 00:07:36	<--	dubsg (~dubsg@2601:9:5b00:10d:9cc8:99ce:34dc:80e3) has quit (*.net *.split)
2013-09-09 00:07:36	<--	hellome (~lua@192.73.239.25) has quit (*.net *.split)
2013-09-09 00:07:36	<--	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has quit (*.net *.split)
2013-09-09 00:07:36	<--	canissimia (~canissimi@unaffiliated/canissimia) has quit (*.net *.split)
2013-09-09 00:07:36	<--	dlnx` (~dlnx@hackerspace.pl) has quit (*.net *.split)
2013-09-09 00:07:36	<--	Spockz (~alessandr@thalion.alessandrovermeulen.me) has quit (*.net *.split)
2013-09-09 00:07:36	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	davorb-cellphone (~davorb-ce@194.47.245.35) has quit (*.net *.split)
2013-09-09 00:07:37	<--	hexagoxel (~hexagoxel@kiel-4d06658c.pool.mediaWays.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	ISF (~ivan@201.82.138.219) has quit (*.net *.split)
2013-09-09 00:07:37	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	rfw (~rfw@heimdall.rfw.name) has quit (*.net *.split)
2013-09-09 00:07:37	<--	arkeet (arkeet@unaffiliated/arkeet) has quit (*.net *.split)
2013-09-09 00:07:37	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (*.net *.split)
2013-09-09 00:07:37	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (*.net *.split)
2013-09-09 00:07:37	<--	kini (kini@unaffiliated/kini) has quit (*.net *.split)
2013-09-09 00:07:37	<--	otto_s_ (~user@cotb-4db35db8.pool.mediaWays.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	predator217 (~predator1@p508029DD.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:37	<--	otulp (~otulp@cm-84.209.90.171.getinternet.no) has quit (*.net *.split)
2013-09-09 00:07:37	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (*.net *.split)
2013-09-09 00:07:37	<--	lusory (~lusory@42.60.25.228) has quit (*.net *.split)
2013-09-09 00:07:37	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (*.net *.split)
2013-09-09 00:07:37	<--	sirspazzolot (~matt@c-71-205-202-84.hsd1.mi.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	niko (~niko@freenode/staff/ubuntu.member.niko) has quit (*.net *.split)
2013-09-09 00:07:37	<--	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	fimad (~fimad@173-13-165-149-sfba.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	ehamberg (~erlend@hamberg.no) has quit (*.net *.split)
2013-09-09 00:07:37	<--	mgaare (~quassel@192.81.216.48) has quit (*.net *.split)
2013-09-09 00:07:37	<--	hpaste (~hpaste@unaffiliated/chrisdone) has quit (*.net *.split)
2013-09-09 00:07:37	<--	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:37	<--	saiam^ (saiam@evo.paivola.fi) has quit (*.net *.split)
2013-09-09 00:07:37	<--	davidt (~chatzilla@davidt.scs.stanford.edu) has quit (*.net *.split)
2013-09-09 00:07:37	<--	destiny (~ircguy@93.190.3.226) has quit (*.net *.split)
2013-09-09 00:07:37	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-09-09 00:07:37	<--	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	johnbender (johnbender@gateway/shell/ircrelay.com/x-nwclfgdcfdezcuxy) has quit (*.net *.split)
2013-09-09 00:07:37	<--	mrpantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	marienz (~marienz@freenode/staff/marienz) has quit (*.net *.split)
2013-09-09 00:07:37	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (*.net *.split)
2013-09-09 00:07:37	<--	PHO_ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has quit (*.net *.split)
2013-09-09 00:07:37	<--	bind (~bind@unaffiliated/bind) has quit (*.net *.split)
2013-09-09 00:07:37	<--	tych0 (~tycho@69.163.206.84) has quit (*.net *.split)
2013-09-09 00:07:37	<--	lispy (~lispy@li343-23.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:37	<--	Svedrin (svedrin@ketos.funzt-halt.net) has quit (*.net *.split)
2013-09-09 00:07:37	<--	yan_ (~yan@64.22.109.95) has quit (*.net *.split)
2013-09-09 00:07:37	<--	fryguybob (~fryguybob@f27.cs.rochester.edu) has quit (*.net *.split)
2013-09-09 00:07:38	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-fjphqbqvbralqbzy) has quit (*.net *.split)
2013-09-09 00:07:38	<--	NeatBasis (~quassel@cl-636.hel-01.fi.sixxs.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	udevd (~kaetzchen@151.236.17.188) has quit (*.net *.split)
2013-09-09 00:07:38	<--	pyrtsa (pjahkola@kosh.org.aalto.fi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	gds (~user@2001:41c8:10:5d::10) has quit (*.net *.split)
2013-09-09 00:07:38	<--	jliikka (jliikka@xob.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	kekimmo (kekimmo@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	jbauman_ (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	pikhq (~pikhq@24-107-196-13.dhcp.stls.mo.charter.com) has quit (*.net *.split)
2013-09-09 00:07:38	<--	farn (frantk@fran.tk) has quit (*.net *.split)
2013-09-09 00:07:38	<--	fijimunk1i (~fijimunki@pool-98-113-72-161.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	canta (~canta@77-20-120-171-dynip.superkabel.de) has quit (*.net *.split)
2013-09-09 00:07:38	<--	M-ou-se (~m-ou.se@m-ou.se) has quit (*.net *.split)
2013-09-09 00:07:38	<--	`0660 (olli@oosny.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	chrisdotcode_ (~quassel@ool-6caa6f84.static.optonline.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	srhb (~srhb@static.101.127.47.78.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:38	<--	dabradley (bradley@nat/ibm/x-vrkwncfwcvnqhlmv) has quit (*.net *.split)
2013-09-09 00:07:38	<--	aford (~pi@host86-164-47-30.range86-164.btcentralplus.com) has quit (*.net *.split)
2013-09-09 00:07:38	<--	kryft (kryft@kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	Igloo (~igloo@210.99.2.81.in-addr.arpa) has quit (*.net *.split)
2013-09-09 00:07:38	<--	janiczek_ (uid12701@gateway/web/irccloud.com/x-fzriysaagvsiyqdj) has quit (*.net *.split)
2013-09-09 00:07:38	<--	nullcone (uid11626@gateway/web/irccloud.com/x-siqqamfkhkpjfyri) has quit (*.net *.split)
2013-09-09 00:07:38	<--	copton (~copton@shell.spamt.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	cods (~cods@rsbac/developer/cods) has quit (*.net *.split)
2013-09-09 00:07:38	<--	machisuji_ (~machisuji@78.46.83.103) has quit (*.net *.split)
2013-09-09 00:07:38	<--	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	edwtjo (~edwtjo@h-62-72.a213.priv.bahnhof.se) has quit (*.net *.split)
2013-09-09 00:07:38	<--	prototrout (~prototrou@24-116-81-246.cpe.cableone.net) has quit (*.net *.split)
2013-09-09 00:07:38	<--	jackhill (jackhill@pilot.trilug.org) has quit (*.net *.split)
2013-09-09 00:07:38	<--	b2coutts (stein@taurine.csclub.uwaterloo.ca) has quit (*.net *.split)
2013-09-09 00:07:38	<--	kqr1 (kqr@host155-38.etanet.se) has quit (*.net *.split)
2013-09-09 00:07:38	<--	\q (~MaskRay@unaffiliated/maskray) has quit (*.net *.split)
2013-09-09 00:07:38	<--	Eliel (~jojkaart@dyn79-415.yok.fi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	sunfun (~sunfun@2.237.168.123) has quit (*.net *.split)
2013-09-09 00:07:38	<--	SHODAN (~shozan@fsf/member/shodan) has quit (*.net *.split)
2013-09-09 00:07:38	<--	Mayzie (~Daniel.is@unaffiliated/mayazcherquoi) has quit (*.net *.split)
2013-09-09 00:07:38	<--	Th0mas (~thomas@th0mas.nl) has quit (*.net *.split)
2013-09-09 00:07:38	<--	dpwright (~daniel@li413-20.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:39	<--	lahwran (~lahwran@python/site-packages/lahwran) has quit (*.net *.split)
2013-09-09 00:07:39	<--	tippenein (~bo@199.195.252.184) has quit (*.net *.split)
2013-09-09 00:07:39	<--	isomorphismes (~ubuntu@ec2-54-243-213-161.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:39	<--	mixi (~mixi@exherbo/developer/mixi) has quit (*.net *.split)
2013-09-09 00:07:39	<--	vivekrai (uid10305@gateway/web/irccloud.com/x-vdcmzlgypjpqwfgd) has quit (*.net *.split)
2013-09-09 00:07:39	<--	chickenflu (uid71@gateway/web/irccloud.com/x-dzfnoztzbhmjgxmk) has quit (*.net *.split)
2013-09-09 00:07:39	<--	IbnFirnas (uid6178@gateway/web/irccloud.com/x-kxdbbjrmfrjbhfwp) has quit (*.net *.split)
2013-09-09 00:07:39	<--	ysuzuki (~ysuzuki@18.net220148245.t-com.ne.jp) has quit (*.net *.split)
2013-09-09 00:07:39	<--	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has quit (*.net *.split)
2013-09-09 00:07:39	<--	seantallen (~seantalle@ec2-54-234-24-103.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:39	<--	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has quit (*.net *.split)
2013-09-09 00:07:39	<--	mel- (~m@m.fuglos.org) has quit (*.net *.split)
2013-09-09 00:07:39	<--	mjrosenb (~mjrosenb@INDIUM.CLUB.CC.CMU.EDU) has quit (*.net *.split)
2013-09-09 00:07:39	<--	barrucadu (~barrucadu@fsf/member/barrucadu) has quit (*.net *.split)
2013-09-09 00:07:39	<--	joogi (~joogi@fix3d.net) has quit (*.net *.split)
2013-09-09 00:07:39	<--	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has quit (*.net *.split)
2013-09-09 00:07:39	<--	benmachine (bm380@tremulous/developer/benmachine) has quit (*.net *.split)
2013-09-09 00:07:39	<--	osfameron (~osfameron@www.greenokapi.net) has quit (*.net *.split)
2013-09-09 00:07:39	<--	sajith (~sajith@bog.hcoop.net) has quit (*.net *.split)
2013-09-09 00:07:39	<--	nitin2 (~nitin@luug.ece.vt.edu) has quit (*.net *.split)
2013-09-09 00:07:39	<--	Phlogistique (~no@neetwork.net) has quit (*.net *.split)
2013-09-09 00:07:39	<--	toddaaro (~toddaaro@opprobrio.us) has quit (*.net *.split)
2013-09-09 00:07:39	<--	spion (~spion@unaffiliated/spion) has quit (*.net *.split)
2013-09-09 00:07:39	<--	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:39	<--	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:39	<--	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has quit (*.net *.split)
2013-09-09 00:07:39	<--	Tordek (tordek@gateway/shell/blinkenshell.org/x-cgvscfhyxnqichut) has quit (*.net *.split)
2013-09-09 00:07:39	<--	michael__ (~quassel@62.253.227.100) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:40	<--	joneshf-work (~joneshf@mail.concordusapps.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	profmakx (makx@unaffiliated/profmakx) has quit (*.net *.split)
2013-09-09 00:07:40	<--	dustinswan (~dustinswa@198.199.71.201) has quit (*.net *.split)
2013-09-09 00:07:40	<--	kennyp (~kennyp@fedora/kennyp) has quit (*.net *.split)
2013-09-09 00:07:40	<--	rhodesd (~none@192.34.61.82) has quit (*.net *.split)
2013-09-09 00:07:40	<--	javax (~javax@46.246.126.38) has quit (*.net *.split)
2013-09-09 00:07:40	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	tinyghost (~ghosty@rainbowsta.rs) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Rutger` (~devbin@nelisvanaalst.demon.nl) has quit (*.net *.split)
2013-09-09 00:07:40	<--	lattenwald (~qalex@185.6.245.156) has quit (*.net *.split)
2013-09-09 00:07:40	<--	serban (serban@notromania.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	mux (mux@freebsd/developer/mux) has quit (*.net *.split)
2013-09-09 00:07:40	<--	aoh (~aki@adsl-99-115.netplaza.fi) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Mowah (~Mowah@c-0d8ce555.09-137-6c6b7013.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-09 00:07:40	<--	jrib (~jrib@upstream/dev/jrib) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	mena (~mena@asgard.tauri.hu) has quit (*.net *.split)
2013-09-09 00:07:40	<--	d3lxa (~d3lxa@ks38928.kimsufi.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	tsou (~tsou@lyon.sians.org) has quit (*.net *.split)
2013-09-09 00:07:40	<--	averell (~averell@2a00:1c18:401:c00::803:11) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-09-09 00:07:40	<--	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has quit (*.net *.split)
2013-09-09 00:07:40	<--	zebr (~zebr@arcadia.kent.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:40	<--	bd_ (~nanashi@198.244.99.244) has quit (*.net *.split)
2013-09-09 00:07:40	<--	agundry (~adam@cafe.cis.strath.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:40	<--	mkiefel (~martin@84.38.64.26) has quit (*.net *.split)
2013-09-09 00:07:40	<--	zenzike (~nick@zenzike.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	ircbrowse (~chrisdone@unaffiliated/chrisdone) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Nickeeh (~quassel@foo.kassala.de) has quit (*.net *.split)
2013-09-09 00:07:40	<--	ssttudder (~abi@46.17.57.132) has quit (*.net *.split)
2013-09-09 00:07:40	<--	hape01 (~hape01@217.144.132.70) has quit (*.net *.split)
2013-09-09 00:07:40	<--	krakrjak (~krakrjak@xvm-103-198.ghst.net) has quit (*.net *.split)
2013-09-09 00:07:40	<--	drdo (~drdo@2a02:2498:e000:20::16f:2) has quit (*.net *.split)
2013-09-09 00:07:40	<--	pjstadig (~user@ec2-54-243-195-89.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:40	<--	vehk (~vehk@unaffiliated/vehk) has quit (*.net *.split)
2013-09-09 00:07:40	<--	ocharles (ocharles@2a01:7e00::f03c:91ff:fe69:ec30) has quit (*.net *.split)
2013-09-09 00:07:40	<--	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has quit (*.net *.split)
2013-09-09 00:07:40	<--	sipa (~pw@unaffiliated/sipa1024) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Blkt (~Blkt@2a01:4f8:150:80a1::aaaa) has quit (*.net *.split)
2013-09-09 00:07:40	<--	liyang (~liyang@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-09-09 00:07:40	<--	ibab (igor@2600:3c03::f03c:91ff:feae:d6dd) has quit (*.net *.split)
2013-09-09 00:07:40	<--	popx (~popx@ethnoll.csbnet.se) has quit (*.net *.split)
2013-09-09 00:07:40	<--	tg (~x@unaffiliated/tg) has quit (*.net *.split)
2013-09-09 00:07:40	<--	mp (maciej@hell.cx) has quit (*.net *.split)
2013-09-09 00:07:40	<--	alexsdutton (~alex@comma.splice.org.uk) has quit (*.net *.split)
2013-09-09 00:07:40	<--	Iceland_jack (user@2a01:7e00::f03c:91ff:fedf:8336) has quit (*.net *.split)
2013-09-09 00:07:41	<--	xye (~QQ@2a01:4f8:d16:1f53::2) has quit (*.net *.split)
2013-09-09 00:07:41	<--	machisuji (~machisuji@2a01:4f8:162:22c6::2) has quit (*.net *.split)
2013-09-09 00:07:41	<--	dennylin93 (~dennylin9@cnmc.tw) has quit (*.net *.split)
2013-09-09 00:07:41	<--	fabjan (fabjan@Tricholoma.Update.UU.SE) has quit (*.net *.split)
2013-09-09 00:07:41	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	marchdown (~marchdown@91.200.224.77) has quit (*.net *.split)
2013-09-09 00:07:41	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (*.net *.split)
2013-09-09 00:07:41	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (*.net *.split)
2013-09-09 00:07:41	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (*.net *.split)
2013-09-09 00:07:41	<--	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	phienone (~ph@nappo.lnet.fi) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Counter-Strike (~abc@mailsh7.xs4all.nl) has quit (*.net *.split)
2013-09-09 00:07:41	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (*.net *.split)
2013-09-09 00:07:41	<--	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Peaker (~eyal@87.69.111.138) has quit (*.net *.split)
2013-09-09 00:07:41	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Eduard_Munteanu (~EduardMun@188.25.92.116) has quit (*.net *.split)
2013-09-09 00:07:41	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (*.net *.split)
2013-09-09 00:07:41	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (*.net *.split)
2013-09-09 00:07:41	<--	shintah (bebble@h-243-43.a336.priv.bahnhof.se) has quit (*.net *.split)
2013-09-09 00:07:41	<--	shachaf (~shachaf@unaffiliated/shachaf) has quit (*.net *.split)
2013-09-09 00:07:41	<--	rasmusto (~trasmuss@li519-146.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:41	<--	Eridius|korea (~kevin@unaffiliated/eridius) has quit (*.net *.split)
2013-09-09 00:07:41	<--	dilinger (~dilinger@lunge.queued.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	dexter2 (~dexter3@71-212-130-174.hlrn.qwest.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	shanse (~generic@p57B2DC10.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:41	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:41	<--	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has quit (*.net *.split)
2013-09-09 00:07:41	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:41	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (*.net *.split)
2013-09-09 00:07:42	<--	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has quit (*.net *.split)
2013-09-09 00:07:42	<--	kevinqcs1 (~turing@183.209.53.5) has quit (*.net *.split)
2013-09-09 00:07:42	<--	milessabin (~miles@private.milessabin.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Saeppel (~saep@185.7.198.1) has quit (*.net *.split)
2013-09-09 00:07:42	<--	hiredman_ (~hiredman@volyova.ec2.thelastcitadel.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	junsuiji1 (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Gracenotes_ (~person@192.241.203.42) has quit (*.net *.split)
2013-09-09 00:07:42	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (*.net *.split)
2013-09-09 00:07:42	<--	troydm (~troydm@unaffiliated/troydm) has quit (*.net *.split)
2013-09-09 00:07:42	<--	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (*.net *.split)
2013-09-09 00:07:42	<--	jonsmock (~jonsmock@c-174-60-102-51.hsd1.pa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	dwcook (~danny@unaffiliated/dwcook) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Erstarrung (~castor@ks26581.kimsufi.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	floatingman (~dnewman@c-68-47-207-131.hsd1.tn.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	redjohn (~redjohn@76.8.223.68) has quit (*.net *.split)
2013-09-09 00:07:42	<--	drmegahertz (~drmegaher@linuxuser.se) has quit (*.net *.split)
2013-09-09 00:07:42	<--	jlouis (jlouis@horus.0x90.dk) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Kinnison (vToZDVVYsu@gateway/shell/pepperfish/x-ptqxtdpyshkjhdvy) has quit (*.net *.split)
2013-09-09 00:07:42	<--	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	iemejia (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	nik_89 (~nik_89@unaffiliated/nniro) has quit (*.net *.split)
2013-09-09 00:07:42	<--	phryk (~phryk@static.39.216.9.176.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	mmaruseacph2 (~mihai@mithlond.ro) has quit (*.net *.split)
2013-09-09 00:07:42	<--	MouseTheLuckyDog (~mouse@adsl-76-193-161-115.dsl.chcgil.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	uu1101 (~uu1101@mail.medranocalvo.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	nwf (~nwf@a.rr.ietfng.org) has quit (*.net *.split)
2013-09-09 00:07:42	<--	aforemny (~aforemny@ec2-54-217-241-103.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	mike2 (~michael@unaffiliated/mike1703) has quit (*.net *.split)
2013-09-09 00:07:42	<--	AlexWebr (~Alex@50.72.145.134) has quit (*.net *.split)
2013-09-09 00:07:42	<--	lulf (~lulf@li307-13.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	qz_ (~qz@li272-85.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	ft (efftee@oldshell.chaostreff-dortmund.de) has quit (*.net *.split)
2013-09-09 00:07:42	<--	thorsten` (~Thorsten@apus.uberspace.de) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Deewiant (~deewiant@deewiant.iki.fi) has quit (*.net *.split)
2013-09-09 00:07:42	<--	bbee (~bbee@unaffiliated/bbee) has quit (*.net *.split)
2013-09-09 00:07:42	<--	mak` (~mak@lokalhost.pl) has quit (*.net *.split)
2013-09-09 00:07:42	<--	arnsholt (~arne@54.80-203-170.nextgentel.com) has quit (*.net *.split)
2013-09-09 00:07:42	<--	mokus (~mokus@172-11-177-99.lightspeed.irvnca.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	felipe_ (~felipe@unaffiliated/felipe) has quit (*.net *.split)
2013-09-09 00:07:42	<--	Liskni_si (pytt_l@ackle.nomi.cz) has quit (*.net *.split)
2013-09-09 00:07:42	<--	tomaw (tom@freenode/staff/tomaw) has quit (*.net *.split)
2013-09-09 00:07:42	<--	aristid (~aristid@unaffiliated/aristid) has quit (*.net *.split)
2013-09-09 00:07:42	<--	colah (~colah@206.248.173.86) has quit (*.net *.split)
2013-09-09 00:07:42	<--	banjiewen (banjiewen@gateway/shell/cloudant/x-cmadrfsfvofcowre) has quit (*.net *.split)
2013-09-09 00:07:42	<--	cmsd2 (~cmsd2@prospero2.dh.bytemark.co.uk) has quit (*.net *.split)
2013-09-09 00:07:42	<--	zerokarmaleft (~zkl@morpheus.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	kaw (~kaw@irrasjonal.net) has quit (*.net *.split)
2013-09-09 00:07:42	<--	mero (~gz@ec2-176-34-102-78.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:43	<--	ekipan (4b1375b0@gateway/web/freenode/ip.75.19.117.176) has quit (*.net *.split)
2013-09-09 00:07:43	<--	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (*.net *.split)
2013-09-09 00:07:43	<--	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has quit (*.net *.split)
2013-09-09 00:07:43	<--	seggy (c6fce60f@gateway/web/freenode/ip.198.252.230.15) has quit (*.net *.split)
2013-09-09 00:07:43	<--	sclv_ (c62d135f@gateway/web/freenode/ip.198.45.19.95) has quit (*.net *.split)
2013-09-09 00:07:43	<--	gpampara_off (~gpampara@174.136.1.66) has quit (*.net *.split)
2013-09-09 00:07:43	<--	akamch_` (~user@194.125.237.56) has quit (*.net *.split)
2013-09-09 00:07:43	<--	zeiris (~amtal@192.3.116.3) has quit (*.net *.split)
2013-09-09 00:07:43	<--	_janne (dmon@punainen.org) has quit (*.net *.split)
2013-09-09 00:07:43	<--	mononofu (~mononofu@vps.furidamu.org) has quit (*.net *.split)
2013-09-09 00:07:43	<--	ninegrid (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:43	<--	meretrix (~user@unaffiliated/meretrix) has quit (*.net *.split)
2013-09-09 00:07:43	<--	chaterz (Nerdwolrd@unaffiliated/chaterz) has quit (*.net *.split)
2013-09-09 00:07:43	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (*.net *.split)
2013-09-09 00:07:43	<--	mischov (~mischov@cpe-24-160-149-69.satx.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:43	<--	DarkNFoxy (~df@unaffiliated/darkfox) has quit (*.net *.split)
2013-09-09 00:07:43	<--	solirc (~solirc@213-239-220-143.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:43	<--	Chousuke (oranenj@battery.modeemi.fi) has quit (*.net *.split)
2013-09-09 00:07:43	<--	Razz (~tim@kompiler.org) has quit (*.net *.split)
2013-09-09 00:07:43	<--	absence (gXaaAUbcVr@horisont.pvv.ntnu.no) has quit (*.net *.split)
2013-09-09 00:07:43	<--	iron_houzi (~dorbin@cm-84.215.158.135.getinternet.no) has quit (*.net *.split)
2013-09-09 00:07:43	<--	bogner_ (~bogner@li325-42.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:43	<--	jlewis (~jlewis@unaffiliated/jordanlewis) has quit (*.net *.split)
2013-09-09 00:07:43	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (*.net *.split)
2013-09-09 00:07:43	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (*.net *.split)
2013-09-09 00:07:43	<--	Kabaka (~Kabaka@botters/kabaka) has quit (*.net *.split)
2013-09-09 00:07:43	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (*.net *.split)
2013-09-09 00:07:43	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (*.net *.split)
2013-09-09 00:07:44	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (*.net *.split)
2013-09-09 00:07:44	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (*.net *.split)
2013-09-09 00:07:44	<--	ihm1 (~izzy@107.14.54.0) has quit (*.net *.split)
2013-09-09 00:07:44	<--	RThinker (~yegor@77.47.204.159) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Yaniel (yaniel@evo.paivola.fi) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has quit (*.net *.split)
2013-09-09 00:07:44	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (*.net *.split)
2013-09-09 00:07:44	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (*.net *.split)
2013-09-09 00:07:44	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (*.net *.split)
2013-09-09 00:07:44	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (*.net *.split)
2013-09-09 00:07:44	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	jaspervdj (~jaspervdj@jaspervdj.be) has quit (*.net *.split)
2013-09-09 00:07:44	<--	wolfnn (~wolfnn@90.24.195.230) has quit (*.net *.split)
2013-09-09 00:07:44	<--	q66 (~quaker66@213.191.105.214) has quit (*.net *.split)
2013-09-09 00:07:44	<--	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has quit (*.net *.split)
2013-09-09 00:07:44	<--	ziman (~ziman@functor.sk) has quit (*.net *.split)
2013-09-09 00:07:44	<--	LAMMJohnson (~ja@user-5af43c0f.broadband.tesco.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	smarter (~smarter@ubuntu/member/smarter) has quit (*.net *.split)
2013-09-09 00:07:44	<--	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (*.net *.split)
2013-09-09 00:07:44	<--	hfaafb (~hfaafb@misadventuregames.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has quit (*.net *.split)
2013-09-09 00:07:44	<--	araujo (~araujo@gentoo/developer/araujo) has quit (*.net *.split)
2013-09-09 00:07:44	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (*.net *.split)
2013-09-09 00:07:44	<--	mauke (~mauke@p3m/member/mauke) has quit (*.net *.split)
2013-09-09 00:07:44	<--	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	hrefchef (~BlackHunt@pool-72-73-253-159.cmdnnj.east.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (*.net *.split)
2013-09-09 00:07:44	<--	zenoli (~pk@109.201.154.145) has quit (*.net *.split)
2013-09-09 00:07:44	<--	ozataman (~ozataman@pool-108-41-231-51.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Soft (~soft@unaffiliated/soft) has quit (*.net *.split)
2013-09-09 00:07:44	<--	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	sweeney (uid4809@gateway/web/irccloud.com/x-rnpvaozkjavyikag) has quit (*.net *.split)
2013-09-09 00:07:44	<--	dixie (dixie@real.wilbury.sk) has quit (*.net *.split)
2013-09-09 00:07:44	<--	zorzar (~zorzar@z.futw.eu) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Excureo (~c@68-113-0-218.static.knwc.wa.charter.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:44	<--	em (~em@unaffiliated/emma) has quit (*.net *.split)
2013-09-09 00:07:44	<--	ghorn (~ghorn@kulnet-nat-2.kulnet.kuleuven.be) has quit (*.net *.split)
2013-09-09 00:07:44	<--	Guest96413 (~antix@unaffiliated/malfy) has quit (*.net *.split)
2013-09-09 00:07:44	<--	KitB (~kit@kitb.pw) has quit (*.net *.split)
2013-09-09 00:07:44	<--	callen (~callen@unaffiliated/callen) has quit (*.net *.split)
2013-09-09 00:07:44	<--	ousado (~ousado@unaffiliated/ousado) has quit (*.net *.split)
2013-09-09 00:07:44	<--	s4msung (~s4msung@s4msung.de) has quit (*.net *.split)
2013-09-09 00:07:44	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	zeroXten (~zeroXten@0x10.co.uk) has quit (*.net *.split)
2013-09-09 00:07:45	<--	a11235 (~a11235@unaffiliated/a11235) has quit (*.net *.split)
2013-09-09 00:07:45	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (*.net *.split)
2013-09-09 00:07:45	<--	fixme (~fixme@202.120.40.94) has quit (*.net *.split)
2013-09-09 00:07:45	<--	bduc (~bduc@bduc.org) has quit (*.net *.split)
2013-09-09 00:07:45	<--	k00mi (~koomi@pictor.uberspace.de) has quit (*.net *.split)
2013-09-09 00:07:45	<--	MrRacoon (suthere@reaver.cat.pdx.edu) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tensorpudding (~tensorpud@99.148.203.65) has quit (*.net *.split)
2013-09-09 00:07:45	<--	kshannon_ (~kris@kris.shannon.id.au) has quit (*.net *.split)
2013-09-09 00:07:45	<--	mshroyer (~mshroyer@legolas.paleogene.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	phar (~phar@v22010096862397599.yourvserver.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	ssbr (~ssbr@python/site-packages/ssbr) has quit (*.net *.split)
2013-09-09 00:07:45	<--	mendez (~mendez@electricabac.us) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has quit (*.net *.split)
2013-09-09 00:07:45	<--	CosmicRay (~jgoerzen@glockenspiel.complete.org) has quit (*.net *.split)
2013-09-09 00:07:45	<--	robbert` (~robbert@unaffiliated/robbert) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Boreeas (~Boreeas@frozen.boreeas.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Draggor (~Draggor@75-150-231-161-Illinois.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	miasma (jmjmak@linux.utu.fi) has quit (*.net *.split)
2013-09-09 00:07:45	<--	paz (~paz@zulu824.server4you.de) has quit (*.net *.split)
2013-09-09 00:07:45	<--	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has quit (*.net *.split)
2013-09-09 00:07:45	<--	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	shelf (~bnc@unaffiliated/shelf) has quit (*.net *.split)
2013-09-09 00:07:45	<--	schlumpi_ (~schlumpi@fob.spline.inf.fu-berlin.de) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tahu (~tahu@client-178-16-41-83.inturbo.lt) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Plex- (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	jix (~jix@jixco.de) has quit (*.net *.split)
2013-09-09 00:07:45	<--	vsayer (~vsayer@c-50-156-7-219.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	mollerstrand (fredrik@notty.slacker.se) has quit (*.net *.split)
2013-09-09 00:07:45	<--	saurik (~saurik@u15259116.onlinehome-server.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Maior (~toor@stolas.doismellburning.co.uk) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (*.net *.split)
2013-09-09 00:07:45	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	flebron (~flebron@190.18.146.246) has quit (*.net *.split)
2013-09-09 00:07:45	<--	AleXoundOS (~AleXoundO@188.244.39.153) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tac (~tac-tics@38.115.166.202) has quit (*.net *.split)
2013-09-09 00:07:45	<--	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	FireFly (~firefly@oftn/member/FireFly) has quit (*.net *.split)
2013-09-09 00:07:45	<--	necroyet1 (~rthc@phire.org) has quit (*.net *.split)
2013-09-09 00:07:45	<--	valyagolev (~valyagole@109.205.248.1) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tero- (~tero@core.feriko.fi) has quit (*.net *.split)
2013-09-09 00:07:45	<--	earthy (~arthurvl@illipe.xs4all.nl) has quit (*.net *.split)
2013-09-09 00:07:45	<--	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (*.net *.split)
2013-09-09 00:07:45	<--	__main__ (~main@50.240.210.73) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Redz (~red@82.113.106.12) has quit (*.net *.split)
2013-09-09 00:07:45	<--	julmae (~no@141.255.164.89) has quit (*.net *.split)
2013-09-09 00:07:45	<--	agjacome (~agjacome@95.62.120.94) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Kuba (~jakub@unaffiliated/kuba) has quit (*.net *.split)
2013-09-09 00:07:45	<--	yano (yano@freenode/staff/yano) has quit (*.net *.split)
2013-09-09 00:07:45	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	liori (~liori@slarti.exroot.org) has quit (*.net *.split)
2013-09-09 00:07:45	<--	TheRealPygo (~Pygosceli@kiel-d9bfc4b0.pool.mediaWays.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	jroesch (~jared@chips.whatbox.ca) has quit (*.net *.split)
2013-09-09 00:07:45	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (*.net *.split)
2013-09-09 00:07:45	<--	sm (~user@li229-222.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	jzl (~jzl@ec2-23-21-191-143.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:45	<--	tabemann (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (*.net *.split)
2013-09-09 00:07:45	<--	eyck (~eyck@nat08.nowanet.pl) has quit (*.net *.split)
2013-09-09 00:07:45	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (*.net *.split)
2013-09-09 00:07:45	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (*.net *.split)
2013-09-09 00:07:45	<--	ecube (~ecube@unaffiliated/ecube) has quit (*.net *.split)
2013-09-09 00:07:45	<--	hdevalence|away (hdevalence@gateway/shell/kde/x-yqbgatcxuacouhst) has quit (*.net *.split)
2013-09-09 00:07:45	<--	OlegYch6 (~OlegYch@213.184.238.131) has quit (*.net *.split)
2013-09-09 00:07:45	<--	FreakyPenguin (~FreakyPen@sv0.famkaufmann.info) has quit (*.net *.split)
2013-09-09 00:07:45	<--	arbn (~arbn@unaffiliated/arbn) has quit (*.net *.split)
2013-09-09 00:07:45	<--	sababa (~sababa@unaffiliated/sababa) has quit (*.net *.split)
2013-09-09 00:07:46	<--	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has quit (*.net *.split)
2013-09-09 00:07:46	<--	djahandarie (darius@unaffiliated/djahandarie) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-09-09 00:07:46	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (*.net *.split)
2013-09-09 00:07:46	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Krakarn (Krakarn@62.80.204.136) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Internet13 (~chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	andares (~andares@unaffiliated/jacco) has quit (*.net *.split)
2013-09-09 00:07:46	<--	slobo (~slobo@mx1.svarog.ca) has quit (*.net *.split)
2013-09-09 00:07:46	<--	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Jaxan (~quassel@foo.kassala.de) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Adeon (~valaat@109.73.169.52) has quit (*.net *.split)
2013-09-09 00:07:46	<--	raid (macbookpro@irc.coding4coffee.org) has quit (*.net *.split)
2013-09-09 00:07:46	<--	epta (~yep@toje.ws) has quit (*.net *.split)
2013-09-09 00:07:46	<--	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has quit (*.net *.split)
2013-09-09 00:07:46	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (*.net *.split)
2013-09-09 00:07:46	<--	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mimi_vx (~quassel@vector.clanwars.cz) has quit (*.net *.split)
2013-09-09 00:07:46	<--	fxrh (~quassel@2001:1a50:11:0:5f:8f:ac66:1) has quit (*.net *.split)
2013-09-09 00:07:46	<--	jmct (uid1305@gateway/web/irccloud.com/x-vhhiiyupjrkclpuo) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Yawgmoth (~quassel@gruss.cc) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Edoxile (~Edoxile@edoxile.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	scolobb (~user@2a01:e0b:1:154:62eb:69ff:fefe:5a79) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mxf (~mxf@lab.qu.cx) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mami (mami@gateway/shell/c-base/x-nnosqquakntyvxsm) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dwierenga (~dwierenga@75-63-28-175.lightspeed.irvnca.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dlundy (~dlundy@185.21.216.183) has quit (*.net *.split)
2013-09-09 00:07:46	<--	_1126 (~1126@saturn.lileth.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	sgso (~sgs@204.62.15.119) has quit (*.net *.split)
2013-09-09 00:07:46	<--	froztbyte (~froztbyte@unaffiliated/frozt01100101) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Pad^ (~Pad@colorlesscube.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	integral (~bsmith@p3m/member/integral) has quit (*.net *.split)
2013-09-09 00:07:46	<--	lokydor (lecornec20@tom.iiens.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	pr (~pr@unaffiliated/pr) has quit (*.net *.split)
2013-09-09 00:07:46	<--	bitraten (~bitraten@unaffiliated/bitraten) has quit (*.net *.split)
2013-09-09 00:07:46	<--	vnz (~vnz@unaffiliated/vnz) has quit (*.net *.split)
2013-09-09 00:07:46	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Raynos (uid3611@gateway/web/irccloud.com/x-hkokcpwtvccrldvx) has quit (*.net *.split)
2013-09-09 00:07:46	<--	zrot (~quassel@149.154.158.30) has quit (*.net *.split)
2013-09-09 00:07:46	<--	haasn (~nand@2a01:4f8:d13:5245::2) has quit (*.net *.split)
2013-09-09 00:07:46	<--	bartavelle (~bartavell@sd-27156.dedibox.fr) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dqd (id@wikipedia/dqd) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Odd_Bloke (~oddbloke@libre.fm/user/oddbloke) has quit (*.net *.split)
2013-09-09 00:07:46	<--	hiyakashi (~hiyakashi@www19112ue.sakura.ne.jp) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Hodapp (~hodapp@198.56.208.32) has quit (*.net *.split)
2013-09-09 00:07:46	<--	electrogeek (electrogee@unaffiliated/electrogeek) has quit (*.net *.split)
2013-09-09 00:07:46	<--	BrianHV (bhv1@2600:3c03::f03c:91ff:fe96:f614) has quit (*.net *.split)
2013-09-09 00:07:46	<--	og (foobar@puck.ogr.no) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Gunni (~gunni@kjarni/gunni) has quit (*.net *.split)
2013-09-09 00:07:46	<--	nxorg8 (nxorg8@2a01:7e00::f03c:91ff:fe70:367c) has quit (*.net *.split)
2013-09-09 00:07:46	<--	thirsteh (thirsteh@linuxfordummies/Thirsteh) has quit (*.net *.split)
2013-09-09 00:07:46	<--	DigitalKiwi (~kiwi@unaffiliated/digitalkiwi) has quit (*.net *.split)
2013-09-09 00:07:46	<--	DT` (~ea@95.233.203.148) has quit (*.net *.split)
2013-09-09 00:07:46	<--	chrisyoung (~user@nyc.schrodinger.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Guest66650 (~df@64.191.40.211) has quit (*.net *.split)
2013-09-09 00:07:46	<--	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has quit (*.net *.split)
2013-09-09 00:07:46	<--	cronject (~cronject@46.7.62.22) has quit (*.net *.split)
2013-09-09 00:07:46	<--	nlogax (~nlogax@unaffiliated/nlogax) has quit (*.net *.split)
2013-09-09 00:07:46	<--	onur (~onur@ev.onur.im) has quit (*.net *.split)
2013-09-09 00:07:46	<--	ClaudiusMaximus (~claude@unaffiliated/claudiusmaximus) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Ulrar (~Ulrar@luwin.ulrar.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mavam (~mavam@unaffiliated/mavam) has quit (*.net *.split)
2013-09-09 00:07:46	<--	bunzen (~Geir@li184-224.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mapour (mapour@linux.utu.fi) has quit (*.net *.split)
2013-09-09 00:07:46	<--	supki (~matt@li305-103.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mvj4_ (~2g8@78.47.152.189) has quit (*.net *.split)
2013-09-09 00:07:46	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	pi8027 (~pi8027@www2480uf.sakura.ne.jp) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Obfuscate (~keii@unaffiliated/obfuscate) has quit (*.net *.split)
2013-09-09 00:07:46	<--	tdammers (~tobias@unaffiliated/tdammers) has quit (*.net *.split)
2013-09-09 00:07:46	<--	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has quit (*.net *.split)
2013-09-09 00:07:46	<--	iulian (iulian@ubuntu/member/iulian) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Bwild_ (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:46	<--	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:46	<--	wto (~wto@h-148-187.a336.priv.bahnhof.se) has quit (*.net *.split)
2013-09-09 00:07:46	<--	aleator (~aleator@desmaani.it.jyu.fi) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (*.net *.split)
2013-09-09 00:07:46	<--	chrra (~cra@cra.no) has quit (*.net *.split)
2013-09-09 00:07:46	<--	aninhumer (ajh239@pip.srcf.societies.cam.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:46	<--	Dybber (~dybber@dybber.dk) has quit (*.net *.split)
2013-09-09 00:07:46	<--	caligula (~caligula@adsl-76-232-9-108.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	dacc (~dacc@c-71-227-173-145.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:46	<--	bstrie (~ben@li100-7.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:47	<--	SaBer (~sber@unobtainium.futurice.com) has quit (*.net *.split)
2013-09-09 00:07:47	<--	d-snp (~tinco@tinco.nl) has quit (*.net *.split)
2013-09-09 00:07:47	<--	pyykkis_ (~jakeskik@staging.leonidasoy.fi) has quit (*.net *.split)
2013-09-09 00:07:47	<--	carter (carter@gateway/shell/ircrelay.com/x-uthowwlbcetsfkaj) has quit (*.net *.split)
2013-09-09 00:07:47	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (*.net *.split)
2013-09-09 00:07:47	<--	sordina (~Lyndon@ec2-50-17-183-50.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:47	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (*.net *.split)
2013-09-09 00:07:47	<--	taruti (taruti@ultra.violetti.org) has quit (*.net *.split)
2013-09-09 00:07:47	<--	ccxCZ (~ccxCZ@156.200.broadband11.iol.cz) has quit (*.net *.split)
2013-09-09 00:07:47	<--	Khady (~Khady@unaffiliated/khady) has quit (*.net *.split)
2013-09-09 00:07:47	<--	eL_Bart0 (eL_Bart0@dietunichtguten.org) has quit (*.net *.split)
2013-09-09 00:07:47	<--	katis (~katis@198.199.124.56) has quit (*.net *.split)
2013-09-09 00:07:47	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (*.net *.split)
2013-09-09 00:07:47	<--	skypers (~skp@88-190-221-99.rev.dedibox.fr) has quit (*.net *.split)
2013-09-09 00:07:47	<--	pqmodn (~pqmodn@unaffiliated/pqmodn) has quit (*.net *.split)
2013-09-09 00:07:47	<--	malorie_ (~bla@84.200.20.248) has quit (*.net *.split)
2013-09-09 00:07:47	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (*.net *.split)
2013-09-09 00:07:47	<--	bobthenameless (~bobthenam@c-71-227-128-93.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-09-09 00:07:47	<--	mmathis (~surya@198.199.68.171) has quit (*.net *.split)
2013-09-09 00:07:47	<--	rgrinberg (~rgrinberg@198.211.108.102) has quit (*.net *.split)
2013-09-09 00:07:47	<--	Tene (~tene@poipu/supporter/slacker/tene) has quit (*.net *.split)
2013-09-09 00:07:47	<--	davean (~davean@vervet.isomerica.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	zomg (~jani@jjh.fi) has quit (*.net *.split)
2013-09-09 00:07:47	<--	othiym23 (ogd@aglaia.aoaioxxysz.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	koala_man (vidar@unaffiliated/koala-man/x-2491903) has quit (*.net *.split)
2013-09-09 00:07:47	<--	clog (~nef@bespin.org) has quit (*.net *.split)
2013-09-09 00:07:47	<--	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has quit (*.net *.split)
2013-09-09 00:07:47	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-09-09 00:07:47	<--	tomh- (uid501@gateway/web/irccloud.com/x-zuyqdcgwmtbuzsbi) has quit (*.net *.split)
2013-09-09 00:07:47	<--	oldmanst1n (~glesica@goto10line.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	noddy2OOO (~self@numm.org) has quit (*.net *.split)
2013-09-09 00:07:47	<--	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has quit (*.net *.split)
2013-09-09 00:07:47	<--	Ceryn (~Ceryn@petardo.dk) has quit (*.net *.split)
2013-09-09 00:07:47	<--	bcoppens (~bartcopp@kde/coppens) has quit (*.net *.split)
2013-09-09 00:07:47	<--	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has quit (*.net *.split)
2013-09-09 00:07:47	<--	ParaSa1lin (~parahsail@unaffiliated/parahsailin) has quit (*.net *.split)
2013-09-09 00:07:48	<--	leroux (~leroux@unaffiliated/leroux) has quit (*.net *.split)
2013-09-09 00:07:48	<--	theDon (~td@141.30.223.187) has quit (*.net *.split)
2013-09-09 00:07:48	<--	ParahSailin (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-09 00:07:48	<--	wilfredh (uid159@gateway/web/irccloud.com/x-hpndlcnpckqjafrq) has quit (*.net *.split)
2013-09-09 00:07:48	<--	akahn (uid2243@gateway/web/irccloud.com/x-kmcffrdbbdkgqwxo) has quit (*.net *.split)
2013-09-09 00:07:48	<--	ggherdov (uid11402@gateway/web/irccloud.com/x-oikltsonwgznartv) has quit (*.net *.split)
2013-09-09 00:07:49	<--	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-armazhafgyqnyrmg) has quit (*.net *.split)
2013-09-09 00:07:49	<--	Heffalump (~ganesh@urchin.earth.li) has quit (*.net *.split)
2013-09-09 00:07:49	<--	taylorgb_ (~mystery@213.229.88.28) has quit (*.net *.split)
2013-09-09 00:07:49	<--	tudalex (~tudalex@173.234.237.188) has quit (*.net *.split)
2013-09-09 00:07:51	<--	asjo (~asjo@2505ds5-by.0.fullrate.dk) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mantovani (~mantovani@li74-187.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	wunki (~petar@wunki.org) has quit (*.net *.split)
2013-09-09 00:07:51	<--	qwandor (~quassel@qwandor.xen.prgmr.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	jhh (hampl@levheart.casablanca.cz) has quit (*.net *.split)
2013-09-09 00:07:51	<--	kfreds (~kfreds@178.209.57.22) has quit (*.net *.split)
2013-09-09 00:07:51	<--	sondove (~sondove@sondov.no) has quit (*.net *.split)
2013-09-09 00:07:51	<--	Hardolaf (~hardolaf@osuosc/Hardolaf) has quit (*.net *.split)
2013-09-09 00:07:51	<--	deggis (deggis@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:51	<--	ahf (ahf@irssi/staff/ahf) has quit (*.net *.split)
2013-09-09 00:07:51	<--	BlastHardcheese (chris@pdpc/supporter/active/blasthardcheese) has quit (*.net *.split)
2013-09-09 00:07:51	<--	duairc (~shane@things.vm.bytemark.co.uk) has quit (*.net *.split)
2013-09-09 00:07:51	<--	JPohlmann (~jannis@xfce/core-developer/JPohlmann) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mr- (~martin@pcmat00034.uni-regensburg.de) has quit (*.net *.split)
2013-09-09 00:07:51	<--	nikola (~nikola@li278-224.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	ChanServ (ChanServ@services.) has quit (*.net *.split)
2013-09-09 00:07:51	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (*.net *.split)
2013-09-09 00:07:51	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (*.net *.split)
2013-09-09 00:07:51	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (*.net *.split)
2013-09-09 00:07:51	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	jamwt1 (~jamwt@sherlock.jamwt.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (*.net *.split)
2013-09-09 00:07:51	<--	DustyDingo (~nonamen@atommuell.mum.jku.at) has quit (*.net *.split)
2013-09-09 00:07:51	<--	normanrichards (~normanric@70.114.215.220) has quit (*.net *.split)
2013-09-09 00:07:51	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (*.net *.split)
2013-09-09 00:07:51	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (*.net *.split)
2013-09-09 00:07:51	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (*.net *.split)
2013-09-09 00:07:51	<--	io2 (~io2@unaffiliated/irrequietus) has quit (*.net *.split)
2013-09-09 00:07:51	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (*.net *.split)
2013-09-09 00:07:51	<--	babalone (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:51	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (*.net *.split)
2013-09-09 00:07:51	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (*.net *.split)
2013-09-09 00:07:51	<--	watermind (~wm@2.80.223.243) has quit (*.net *.split)
2013-09-09 00:07:51	<--	ismlages (~ismlages@212.174.109.55) has quit (*.net *.split)
2013-09-09 00:07:51	<--	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	SoupE (~jloos@f055201003.adsl.alicedsl.de) has quit (*.net *.split)
2013-09-09 00:07:51	<--	Guest74748 (~mee@li94-42.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mimico__ (uid2554@gateway/web/irccloud.com/x-gehmvygmeqmpfmuw) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (*.net *.split)
2013-09-09 00:07:51	<--	tolt (~Kevin@209.65.15.42) has quit (*.net *.split)
2013-09-09 00:07:51	<--	apaku (~apaku@x2f11e4b.dyn.telefonica.de) has quit (*.net *.split)
2013-09-09 00:07:51	<--	mm_freak_ (~milch@p5DD05079.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-09 00:07:51	<--	ktosiek (~ktosiek@46.22.173.54) has quit (*.net *.split)
2013-09-09 00:07:52	<--	pierreghz (~krux@91.179.27.135) has quit (*.net *.split)
2013-09-09 00:07:52	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (*.net *.split)
2013-09-09 00:07:52	<--	bss03 (~bss@76-220-103-20.lightspeed.fyvlar.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has quit (*.net *.split)
2013-09-09 00:07:52	<--	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Ycros (ycros@gnaw.ycros.org) has quit (*.net *.split)
2013-09-09 00:07:52	<--	chirpsalot (~Chirps@unaffiliated/chirpsalot) has quit (*.net *.split)
2013-09-09 00:07:52	<--	geekosaur (allbery@dreamshell.ttuttle.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	cschneid (cschneid@2600:3c00::f03c:91ff:fedf:d92e) has quit (*.net *.split)
2013-09-09 00:07:52	<--	zero7 (uid10708@gateway/web/irccloud.com/x-rbacbporhprqzueo) has quit (*.net *.split)
2013-09-09 00:07:52	<--	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has quit (*.net *.split)
2013-09-09 00:07:52	<--	purefn (uid13625@gateway/web/irccloud.com/x-omzzprbxcjthcfuk) has quit (*.net *.split)
2013-09-09 00:07:52	<--	idnar (uid12240@gateway/web/irccloud.com/x-nmunltoqatxvmeab) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Ghoul_ (uid6924@gateway/web/irccloud.com/x-oefpjhxlxfpcxakq) has quit (*.net *.split)
2013-09-09 00:07:52	<--	nkpart (uid3844@gateway/web/irccloud.com/x-usorrgjjzwfnchjm) has quit (*.net *.split)
2013-09-09 00:07:52	<--	aloiscochard (uid2076@gateway/web/irccloud.com/x-fdodifbvjfyrcrdq) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Xorlev (uid226@gateway/web/irccloud.com/x-tgmnpzuejomkdvlu) has quit (*.net *.split)
2013-09-09 00:07:52	<--	ehd (uid1451@gateway/web/irccloud.com/x-wfpomgtakcgdlthn) has quit (*.net *.split)
2013-09-09 00:07:52	<--	joeyh (~joeyh@2001:41c8:125:49::10) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Cryovat (~null@sky.prism.winterday.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	mietek (mietek@bak.io) has quit (*.net *.split)
2013-09-09 00:07:52	<--	tridactyla (~mforney@mforney.new.xen.prgmr.com) has quit (*.net *.split)
2013-09-09 00:07:52	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (*.net *.split)
2013-09-09 00:07:52	<--	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has quit (*.net *.split)
2013-09-09 00:07:52	<--	dsfox (~dsf@98.155.82.213) has quit (*.net *.split)
2013-09-09 00:07:52	<--	philipde` (~user@cpe-69-204-201-168.stny.res.rr.com) has quit (*.net *.split)
2013-09-09 00:07:52	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	`bps (sim@functor.paivola.fi) has quit (*.net *.split)
2013-09-09 00:07:52	<--	shepheb (~bsshephe@bas1-jockvale05-3096538275.dsl.bell.ca) has quit (*.net *.split)
2013-09-09 00:07:52	<--	ortmage (ortmage@nat/google/x-ratauexiuvphlpyq) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Nik05 (~Nik05@unaffiliated/nik05) has quit (*.net *.split)
2013-09-09 00:07:52	<--	pootler (mervyn@smlh.x.rootbsd.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	kxra (kxra@fsf/staff/kxra) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Khisanth (~Khisanth@50.14.244.111) has quit (*.net *.split)
2013-09-09 00:07:52	<--	ryanakca (ryan@ubuntu/member/ryanakca) has quit (*.net *.split)
2013-09-09 00:07:52	<--	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has quit (*.net *.split)
2013-09-09 00:07:52	<--	yam (yam@liberty.xenbox.fr) has quit (*.net *.split)
2013-09-09 00:07:52	<--	saiam (saiam@tiger.eliecraft.fi) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Cerise (jerry@unaffiliated/cerise) has quit (*.net *.split)
2013-09-09 00:07:52	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (*.net *.split)
2013-09-09 00:07:52	<--	palmje (palmje@167-19-88-118.dcwest.net.au) has quit (*.net *.split)
2013-09-09 00:07:52	<--	brainproxy (~brainprox@pdpc/supporter/gold/brainproxy) has quit (*.net *.split)
2013-09-09 00:07:52	<--	Walther (walther@2001:1bc8:1004::1) has quit (*.net *.split)
2013-09-09 00:07:52	<--	juuhaa (juuhaa@halko.asteriski.fi) has quit (*.net *.split)
2013-09-09 00:07:52	<--	scshunt (raedford@taurine.csclub.uwaterloo.ca) has quit (*.net *.split)
2013-09-09 00:07:52	<--	flori_ (flori@irc.ping.de) has quit (*.net *.split)
2013-09-09 00:07:52	<--	andrewsw (~andrew@swclan.homelinux.org) has quit (*.net *.split)
2013-09-09 00:07:52	<--	bezik (~bezik@trans.liftio.com) has quit (*.net *.split)
2013-09-09 00:07:52	<--	joelteon (~joel@unaffiliated/otters) has quit (*.net *.split)
2013-09-09 00:07:52	<--	tamiko (~tamiko@pdpc/supporter/active/tamiko) has quit (*.net *.split)
2013-09-09 00:07:52	<--	pfoetchen (~pfoetchen@beiboot1.petschge.de) has quit (*.net *.split)
2013-09-09 00:07:52	<--	grazs (~g@89.221.241.91) has quit (*.net *.split)
2013-09-09 00:07:52	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (*.net *.split)
2013-09-09 00:07:52	<--	driek (~drk@whiff.xentower.nl) has quit (*.net *.split)
2013-09-09 00:07:53	<--	melter (~Melter@2001:4930:116:0:21c:c0ff:feef:eaf5) has quit (*.net *.split)
2013-09-09 00:07:53	<--	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (*.net *.split)
2013-09-09 00:07:53	<--	_flow_ (flow@star.freakempire.de) has quit (*.net *.split)
2013-09-09 00:07:53	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (*.net *.split)
2013-09-09 00:07:53	<--	lopex (uid4272@gateway/web/irccloud.com/x-jewaqnpafntjxlsu) has quit (*.net *.split)
2013-09-09 00:07:53	<--	chexxor (uid1596@gateway/web/irccloud.com/x-lfxwddnshcnulwmh) has quit (*.net *.split)
2013-09-09 00:07:53	<--	jml (~jml@unaffiliated/jml) has quit (*.net *.split)
2013-09-09 00:07:53	<--	plains (zchr@unaffiliated/plains) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Watcher7 (~w@silly.tabby.cat) has quit (*.net *.split)
2013-09-09 00:07:53	<--	strax (uid4099@gateway/web/irccloud.com/x-cvtqygjodkntiptf) has quit (*.net *.split)
2013-09-09 00:07:53	<--	SLi (sliedes@lakka.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	axiom (~Sponge_Bo@antiklimax.se) has quit (*.net *.split)
2013-09-09 00:07:53	<--	xenophon (~his_shado@64.124.65.162) has quit (*.net *.split)
2013-09-09 00:07:53	<--	flux (flux@coffee.modeemi.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	fser (~fser@ns2.lautre.net) has quit (*.net *.split)
2013-09-09 00:07:53	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has quit (*.net *.split)
2013-09-09 00:07:53	<--	samrat (uid2534@gateway/web/irccloud.com/x-tkfylwcmmjtnanfj) has quit (*.net *.split)
2013-09-09 00:07:53	<--	milli (~milli@rasler.acmeps.com) has quit (*.net *.split)
2013-09-09 00:07:53	<--	heath (quassel@unaffiliated/ybit) has quit (*.net *.split)
2013-09-09 00:07:53	<--	swistak35 (swistak35@2a01:4f8:160:11e4::10) has quit (*.net *.split)
2013-09-09 00:07:53	<--	bestzdneirf (petterrav@2001:470:6bd1::) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Athas (~athas@sigkill.dk) has quit (*.net *.split)
2013-09-09 00:07:53	<--	peddie (peddie@repl.esden.net) has quit (*.net *.split)
2013-09-09 00:07:53	<--	alpounet (~alpounet@2a01:e0b:1:82:2e0:f4ff:fe19:e9cb) has quit (*.net *.split)
2013-09-09 00:07:53	<--	inr (~inr@c83-250-22-57.bredband.comhem.se) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Bigcheese (~bigcheese@unaffiliated/bigcheese) has quit (*.net *.split)
2013-09-09 00:07:53	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (*.net *.split)
2013-09-09 00:07:53	<--	bogner (bogner@2600:3c03::f03c:91ff:fedf:7ef4) has quit (*.net *.split)
2013-09-09 00:07:53	<--	dan64 (dan64@dannyadam.com) has quit (*.net *.split)
2013-09-09 00:07:53	<--	sohum (sohum@pdpc/supporter/active/sohum) has quit (*.net *.split)
2013-09-09 00:07:53	<--	edk (edk@unaffiliated/edk) has quit (*.net *.split)
2013-09-09 00:07:53	<--	fall_ (fall@betty.countzero.no) has quit (*.net *.split)
2013-09-09 00:07:53	<--	anachron (~bjorh08@svale.uia.no) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Ezku (saukkee@kosh.org.aalto.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	horlicks (~simon@tickle.compsoc.man.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:53	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (*.net *.split)
2013-09-09 00:07:53	<--	nopcode (~nop@sushi.unix-ag.uni-kl.de) has quit (*.net *.split)
2013-09-09 00:07:53	<--	inarru (~edwardgeo@nest.insectsarerubbish.org) has quit (*.net *.split)
2013-09-09 00:07:53	<--	geal (~geal@irc.unhandledexpression.com) has quit (*.net *.split)
2013-09-09 00:07:53	<--	ipuustin (~ipuustin@2002:5870:2ea5::1) has quit (*.net *.split)
2013-09-09 00:07:53	<--	XMunkki_ (xm@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	matson (~matson@jabam.lepovirta.org) has quit (*.net *.split)
2013-09-09 00:07:53	<--	pnielsen (pnielsen@2a01:7e00::f03c:91ff:fedf:3a21) has quit (*.net *.split)
2013-09-09 00:07:53	<--	Rembane (~Rembane@li346-36.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:53	<--	prophile (~proph@oftn/member/prophile) has quit (*.net *.split)
2013-09-09 00:07:53	<--	klugez (kluge@xob.kapsi.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	ion (ion@heh.fi) has quit (*.net *.split)
2013-09-09 00:07:53	<--	dario^CIP (~dario@ircbox.informatik.uni-erlangen.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	danr (~danr@tunna.org) has quit (*.net *.split)
2013-09-09 00:07:54	<--	solarus (~solarus@tunna.org) has quit (*.net *.split)
2013-09-09 00:07:54	<--	liszt (~liszt@2607:f0d0:1002:1c::2) has quit (*.net *.split)
2013-09-09 00:07:54	<--	petanqk (siniluht@jumi.lut.fi) has quit (*.net *.split)
2013-09-09 00:07:54	<--	opqdonut (opqdonut@pseudo.fixme.fi) has quit (*.net *.split)
2013-09-09 00:07:54	<--	]OLI[ (~oli@raven.linux.ox.ac.uk) has quit (*.net *.split)
2013-09-09 00:07:54	<--	stomp (~stomp@v1.fob.spline.inf.fu-berlin.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	n00dle (~n00dle@unaffiliated/n00dle) has quit (*.net *.split)
2013-09-09 00:07:54	<--	eataix (~eataix@unaffiliated/eataix) has quit (*.net *.split)
2013-09-09 00:07:54	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Fuuzetsu (~Shana@fsf/member/Fuuzetsu) has quit (*.net *.split)
2013-09-09 00:07:54	<--	janinge (j@ninge.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	jrd0 (~jrd0@bigv.mockra.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	b52 (~b52@unaffiliated/b52) has quit (*.net *.split)
2013-09-09 00:07:54	<--	cheezey (~ec2-user@ec2-54-241-65-153.us-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	bergmark (~adnam@atmat.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	satshabad (~root@198.199.67.210) has quit (*.net *.split)
2013-09-09 00:07:54	<--	osnr (~osnr@unaffiliated/osnr) has quit (*.net *.split)
2013-09-09 00:07:54	<--	mlinksva (~quassel@rose.makesad.us) has quit (*.net *.split)
2013-09-09 00:07:54	<--	int-e (~noone@static.88-198-179-137.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Tribal (tribal@rcfreak0.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	gemelen (~gemelen@gemelen.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Laney (~laney@ubuntu/member/pdpc.active.laney) has quit (*.net *.split)
2013-09-09 00:07:54	<--	mkrull (~mkrull@kvm.uninets.eu) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Reisen (~Reisen@unaffiliated/reisen) has quit (*.net *.split)
2013-09-09 00:07:54	<--	ibid (ajk@debian/developer/ajk) has quit (*.net *.split)
2013-09-09 00:07:54	<--	aszlig (~aszlig@redmoonstudios.org) has quit (*.net *.split)
2013-09-09 00:07:54	<--	zaiste (~zaiste@static.88-198-68-40.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	def-lkb (~def@lakaban.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Starfire_ (~starfire@kekkonen.cs.hut.fi) has quit (*.net *.split)
2013-09-09 00:07:54	<--	asante (~asante@unaffiliated/asante) has quit (*.net *.split)
2013-09-09 00:07:54	<--	deavid (~quassel@ns311218.ovh.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	elliott (elliott@unaffiliated/elliott) has quit (*.net *.split)
2013-09-09 00:07:54	<--	bqp (~bqp@unaffiliated/bqp) has quit (*.net *.split)
2013-09-09 00:07:54	<--	pharaun (~pharaun@static.88-198-62-245.clients.your-server.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	sp3ctum (mikavilpas@shell.wilan.org) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Clint (~Clint@libre.fm/hacker/clint) has quit (*.net *.split)
2013-09-09 00:07:54	<--	magicman (~tchakkazu@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	mattp_ (~mattp_@intma.in) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Proteumus (~Proteumus@li349-19.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	gridaphobe (~gridaphob@goto.ucsd.edu) has quit (*.net *.split)
2013-09-09 00:07:54	<--	cross (cross@spitfire.i.gajendra.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	nicoo (~nicoo@unaffiliated/nicoo) has quit (*.net *.split)
2013-09-09 00:07:54	<--	s4muel (~s4muel@ec2-174-129-235-249.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	SuperNoeMan (~SuperNoeM@ec2-23-20-202-208.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	bxc (~benc@paella.hawaga.org.uk) has quit (*.net *.split)
2013-09-09 00:07:54	<--	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Kneiva (~kneiva@raah.fi) has quit (*.net *.split)
2013-09-09 00:07:54	<--	relrod (relrod@redhat/relrod) has quit (*.net *.split)
2013-09-09 00:07:54	<--	confound (~hdp@glaive.weftsoar.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	blast_hardcheese (~blast_har@unaffiliated/blast-hardcheese/x-0199635) has quit (*.net *.split)
2013-09-09 00:07:54	<--	sunnavy (~sunnavy@li50-215.members.linode.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Sunhay (~ssbasi@sunhay.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	skchrko (~sk@130.255.129.64) has quit (*.net *.split)
2013-09-09 00:07:54	<--	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has quit (*.net *.split)
2013-09-09 00:07:54	<--	fikusz (~fikusz@catv-89-132-137-62.catv.broadband.hu) has quit (*.net *.split)
2013-09-09 00:07:54	<--	jrslepak (~jrslepak@129.10.117.249) has quit (*.net *.split)
2013-09-09 00:07:54	<--	gereedy (geoff@mania.programmer-monk.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	brixen (~brixen@208.68.39.152) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Kruppe (~jcp@laforge.cs.uwaterloo.ca) has quit (*.net *.split)
2013-09-09 00:07:54	<--	mrowe_away (~mrowe@72.249.82.46) has quit (*.net *.split)
2013-09-09 00:07:54	<--	lunarjar (~lunarjar@2605:6400:1:fed5:22:f924:6051:57c8) has quit (*.net *.split)
2013-09-09 00:07:54	<--	warpy (uid1398@gateway/web/irccloud.com/x-ajrctoipxoluagap) has quit (*.net *.split)
2013-09-09 00:07:54	<--	orospakr (~orospakr@mobotropolis.orospakr.ca) has quit (*.net *.split)
2013-09-09 00:07:54	<--	tunixman (~tunixman@serenity.tunixman.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	ibotty (~tob@91-64-188-219-dynip.superkabel.de) has quit (*.net *.split)
2013-09-09 00:07:54	<--	bens (~bens@www.typius.net) has quit (*.net *.split)
2013-09-09 00:07:54	<--	mrd (~md@debian/developer/mrd) has quit (*.net *.split)
2013-09-09 00:07:54	<--	bsmt (~i@209.141.41.20) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Enigmagic (~nathan@unaffiliated/enigmagic) has quit (*.net *.split)
2013-09-09 00:07:54	<--	davorak (~ubuntu@ec2-50-17-231-113.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-09 00:07:54	<--	Hafydd (~Hafydd@unaffiliated/joo) has quit (*.net *.split)
2013-09-09 00:07:54	<--	smlgs (~smlgs@212.174.33.250) has quit (Max SendQ exceeded)
2013-09-09 00:09:23	<--	c_14 (~c_14@unaffiliated/c-14/x-8913907) has quit (Quit: ZNC - http://znc.in)
2013-09-09 00:13:07	<--	hive-mind (pranq@unaffiliated/contempt) has quit (Ping timeout: 260 seconds)
2013-09-09 00:13:51	-->	copumpkin (~copumpkin@ool-44c1edd0.dyn.optonline.net) has joined #haskell
2013-09-09 00:18:43	<--	copumpkin (~copumpkin@ool-44c1edd0.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-09-09 00:20:35	<--	vpetro (~textual@137.122.203.130) has quit (Quit: Computer has gone to sleep.)
2013-09-09 00:21:03	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Ping timeout: 260 seconds)
2013-09-09 00:21:28	-->	niteria_ (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-09 00:21:35	-->	c_14 (~c_14@unaffiliated/c-14/x-8913907) has joined #haskell
2013-09-09 00:21:35	-->	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has joined #haskell
2013-09-09 00:21:35	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-09 00:21:35	-->	hive-mind (pranq@unaffiliated/contempt) has joined #haskell
2013-09-09 00:21:35	-->	Morgawr (~morgawr@unaffiliated/morgawr) has joined #haskell
2013-09-09 00:21:35	-->	mlh (~mlh@c220-239-109-196.belrs4.nsw.optusnet.com.au) has joined #haskell
2013-09-09 00:21:35	-->	Kneiva (~kneiva@raah.fi) has joined #haskell
2013-09-09 00:21:35	-->	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has joined #haskell
2013-09-09 00:21:35	-->	bxc (~benc@paella.hawaga.org.uk) has joined #haskell
2013-09-09 00:21:35	-->	SuperNoeMan (~SuperNoeM@ec2-23-20-202-208.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:35	-->	stomp (~stomp@v1.fob.spline.inf.fu-berlin.de) has joined #haskell
2013-09-09 00:21:35	-->	opqdonut (opqdonut@pseudo.fixme.fi) has joined #haskell
2013-09-09 00:21:35	-->	petanqk (siniluht@jumi.lut.fi) has joined #haskell
2013-09-09 00:21:35	-->	liszt (~liszt@2607:f0d0:1002:1c::2) has joined #haskell
2013-09-09 00:21:35	-->	nicoo (~nicoo@unaffiliated/nicoo) has joined #haskell
2013-09-09 00:21:35	-->	solarus (~solarus@tunna.org) has joined #haskell
2013-09-09 00:21:35	-->	danr (~danr@tunna.org) has joined #haskell
2013-09-09 00:21:35	-->	cross (cross@spitfire.i.gajendra.net) has joined #haskell
2013-09-09 00:21:35	-->	dario^CIP (~dario@ircbox.informatik.uni-erlangen.de) has joined #haskell
2013-09-09 00:21:35	-->	ion (ion@heh.fi) has joined #haskell
2013-09-09 00:21:35	-->	klugez (kluge@xob.kapsi.fi) has joined #haskell
2013-09-09 00:21:35	-->	gridaphobe (~gridaphob@goto.ucsd.edu) has joined #haskell
2013-09-09 00:21:35	-->	prophile (~proph@oftn/member/prophile) has joined #haskell
2013-09-09 00:21:35	-->	pfoetchen (~pfoetchen@beiboot1.petschge.de) has joined #haskell
2013-09-09 00:21:35	-->	Rembane (~Rembane@li346-36.members.linode.com) has joined #haskell
2013-09-09 00:21:35	-->	Proteumus (~Proteumus@li349-19.members.linode.com) has joined #haskell
2013-09-09 00:21:35	-->	mattp_ (~mattp_@intma.in) has joined #haskell
2013-09-09 00:21:35	-->	ChanServ (ChanServ@services.) has joined #haskell
2013-09-09 00:21:35	-->	tamiko (~tamiko@pdpc/supporter/active/tamiko) has joined #haskell
2013-09-09 00:21:35	-->	pnielsen (pnielsen@2a01:7e00::f03c:91ff:fedf:3a21) has joined #haskell
2013-09-09 00:21:35	-->	magicman (~tchakkazu@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 00:21:35	-->	Clint (~Clint@libre.fm/hacker/clint) has joined #haskell
2013-09-09 00:21:35	-->	sp3ctum (mikavilpas@shell.wilan.org) has joined #haskell
2013-09-09 00:21:35	-->	pharaun (~pharaun@static.88-198-62-245.clients.your-server.de) has joined #haskell
2013-09-09 00:21:35	-->	bqp (~bqp@unaffiliated/bqp) has joined #haskell
2013-09-09 00:21:35	-->	XMunkki_ (xm@hilla.kapsi.fi) has joined #haskell
2013-09-09 00:21:35	-->	elliott (elliott@unaffiliated/elliott) has joined #haskell
2013-09-09 00:21:35	-->	deavid (~quassel@ns311218.ovh.net) has joined #haskell
2013-09-09 00:21:35	-->	asante (~asante@unaffiliated/asante) has joined #haskell
2013-09-09 00:21:35	-->	Starfire_ (~starfire@kekkonen.cs.hut.fi) has joined #haskell
2013-09-09 00:21:35	-->	def-lkb (~def@lakaban.net) has joined #haskell
2013-09-09 00:21:35	-->	zaiste (~zaiste@static.88-198-68-40.clients.your-server.de) has joined #haskell
2013-09-09 00:21:35	-->	aszlig (~aszlig@redmoonstudios.org) has joined #haskell
2013-09-09 00:21:35	-->	ibid (ajk@debian/developer/ajk) has joined #haskell
2013-09-09 00:21:35	-->	Reisen (~Reisen@unaffiliated/reisen) has joined #haskell
2013-09-09 00:21:35	-->	ipuustin (~ipuustin@2002:5870:2ea5::1) has joined #haskell
2013-09-09 00:21:35	--	Mode #haskell [+o ChanServ] by brooks.freenode.net
2013-09-09 00:21:35	-->	geal (~geal@irc.unhandledexpression.com) has joined #haskell
2013-09-09 00:21:35	-->	inarru (~edwardgeo@nest.insectsarerubbish.org) has joined #haskell
2013-09-09 00:21:35	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-09-09 00:21:35	-->	horlicks (~simon@tickle.compsoc.man.ac.uk) has joined #haskell
2013-09-09 00:21:35	-->	Ezku (saukkee@kosh.org.aalto.fi) has joined #haskell
2013-09-09 00:21:35	-->	anachron (~bjorh08@svale.uia.no) has joined #haskell
2013-09-09 00:21:35	-->	mkrull (~mkrull@kvm.uninets.eu) has joined #haskell
2013-09-09 00:21:35	-->	fall_ (fall@betty.countzero.no) has joined #haskell
2013-09-09 00:21:35	-->	nikola (~nikola@li278-224.members.linode.com) has joined #haskell
2013-09-09 00:21:35	-->	sohum (sohum@pdpc/supporter/active/sohum) has joined #haskell
2013-09-09 00:21:35	-->	mr- (~martin@pcmat00034.uni-regensburg.de) has joined #haskell
2013-09-09 00:21:35	-->	malorie_ (~bla@84.200.20.248) has joined #haskell
2013-09-09 00:21:35	-->	pqmodn (~pqmodn@unaffiliated/pqmodn) has joined #haskell
2013-09-09 00:21:35	-->	skypers (~skp@88-190-221-99.rev.dedibox.fr) has joined #haskell
2013-09-09 00:21:35	-->	mollerstrand (fredrik@notty.slacker.se) has joined #haskell
2013-09-09 00:21:35	-->	Maior (~toor@stolas.doismellburning.co.uk) has joined #haskell
2013-09-09 00:21:35	-->	saurik (~saurik@u15259116.onlinehome-server.com) has joined #haskell
2013-09-09 00:21:35	-->	JPohlmann (~jannis@xfce/core-developer/JPohlmann) has joined #haskell
2013-09-09 00:21:35	-->	duairc (~shane@things.vm.bytemark.co.uk) has joined #haskell
2013-09-09 00:21:35	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2013-09-09 00:21:35	-->	BlastHardcheese (chris@pdpc/supporter/active/blasthardcheese) has joined #haskell
2013-09-09 00:21:35	-->	ahf (ahf@irssi/staff/ahf) has joined #haskell
2013-09-09 00:21:35	-->	deggis (deggis@hilla.kapsi.fi) has joined #haskell
2013-09-09 00:21:35	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-09-09 00:21:35	-->	Laney (~laney@ubuntu/member/pdpc.active.laney) has joined #haskell
2013-09-09 00:21:35	-->	Hardolaf (~hardolaf@osuosc/Hardolaf) has joined #haskell
2013-09-09 00:21:35	-->	gemelen (~gemelen@gemelen.net) has joined #haskell
2013-09-09 00:21:35	-->	bogner_ (~bogner@li325-42.members.linode.com) has joined #haskell
2013-09-09 00:21:35	-->	kaw (~kaw@irrasjonal.net) has joined #haskell
2013-09-09 00:21:35	-->	Tribal (tribal@rcfreak0.com) has joined #haskell
2013-09-09 00:21:35	-->	int-e (~noone@static.88-198-179-137.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	zerokarmaleft (~zkl@morpheus.net) has joined #haskell
2013-09-09 00:21:36	-->	mlinksva (~quassel@rose.makesad.us) has joined #haskell
2013-09-09 00:21:36	-->	thirsteh (thirsteh@linuxfordummies/Thirsteh) has joined #haskell
2013-09-09 00:21:36	-->	nxorg8 (nxorg8@2a01:7e00::f03c:91ff:fe70:367c) has joined #haskell
2013-09-09 00:21:36	-->	mero (~gz@ec2-176-34-102-78.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	bezik (~bezik@trans.liftio.com) has joined #haskell
2013-09-09 00:21:36	-->	BrianHV (bhv1@2600:3c03::f03c:91ff:fe96:f614) has joined #haskell
2013-09-09 00:21:36	-->	electrogeek (electrogee@unaffiliated/electrogeek) has joined #haskell
2013-09-09 00:21:36	-->	bogner (bogner@2600:3c03::f03c:91ff:fedf:7ef4) has joined #haskell
2013-09-09 00:21:36	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-09-09 00:21:36	-->	cmsd2 (~cmsd2@prospero2.dh.bytemark.co.uk) has joined #haskell
2013-09-09 00:21:36	-->	banjiewen (banjiewen@gateway/shell/cloudant/x-cmadrfsfvofcowre) has joined #haskell
2013-09-09 00:21:36	-->	jhh (hampl@levheart.casablanca.cz) has joined #haskell
2013-09-09 00:21:36	-->	eL_Bart0 (eL_Bart0@dietunichtguten.org) has joined #haskell
2013-09-09 00:21:36	-->	qwandor (~quassel@qwandor.xen.prgmr.com) has joined #haskell
2013-09-09 00:21:36	-->	Bigcheese (~bigcheese@unaffiliated/bigcheese) has joined #haskell
2013-09-09 00:21:36	-->	Odd_Bloke (~oddbloke@libre.fm/user/oddbloke) has joined #haskell
2013-09-09 00:21:36	-->	colah (~colah@206.248.173.86) has joined #haskell
2013-09-09 00:21:36	-->	dqd (id@wikipedia/dqd) has joined #haskell
2013-09-09 00:21:36	-->	inr (~inr@c83-250-22-57.bredband.comhem.se) has joined #haskell
2013-09-09 00:21:36	-->	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has joined #haskell
2013-09-09 00:21:36	-->	Khady (~Khady@unaffiliated/khady) has joined #haskell
2013-09-09 00:21:36	-->	wunki (~petar@wunki.org) has joined #haskell
2013-09-09 00:21:36	-->	alpounet (~alpounet@2a01:e0b:1:82:2e0:f4ff:fe19:e9cb) has joined #haskell
2013-09-09 00:21:36	-->	aristid (~aristid@unaffiliated/aristid) has joined #haskell
2013-09-09 00:21:36	-->	tomaw (tom@freenode/staff/tomaw) has joined #haskell
2013-09-09 00:21:36	-->	Liskni_si (pytt_l@ackle.nomi.cz) has joined #haskell
2013-09-09 00:21:36	-->	felipe_ (~felipe@unaffiliated/felipe) has joined #haskell
2013-09-09 00:21:36	-->	ccxCZ (~ccxCZ@156.200.broadband11.iol.cz) has joined #haskell
2013-09-09 00:21:36	-->	taruti (taruti@ultra.violetti.org) has joined #haskell
2013-09-09 00:21:36	-->	peddie (peddie@repl.esden.net) has joined #haskell
2013-09-09 00:21:36	-->	arnsholt (~arne@54.80-203-170.nextgentel.com) has joined #haskell
2013-09-09 00:21:36	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-09-09 00:21:36	-->	dan64 (dan64@dannyadam.com) has joined #haskell
2013-09-09 00:21:36	-->	haasn (~nand@2a01:4f8:d13:5245::2) has joined #haskell
2013-09-09 00:21:36	-->	og (foobar@puck.ogr.no) has joined #haskell
2013-09-09 00:21:36	-->	fabjan (fabjan@Tricholoma.Update.UU.SE) has joined #haskell
2013-09-09 00:21:36	-->	andrewsw (~andrew@swclan.homelinux.org) has joined #haskell
2013-09-09 00:21:36	-->	sordina (~Lyndon@ec2-50-17-183-50.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	mak` (~mak@lokalhost.pl) has joined #haskell
2013-09-09 00:21:36	-->	osnr (~osnr@unaffiliated/osnr) has joined #haskell
2013-09-09 00:21:36	-->	satshabad (~root@198.199.67.210) has joined #haskell
2013-09-09 00:21:36	-->	katis (~katis@198.199.124.56) has joined #haskell
2013-09-09 00:21:36	-->	absence (gXaaAUbcVr@horisont.pvv.ntnu.no) has joined #haskell
2013-09-09 00:21:36	-->	bbee (~bbee@unaffiliated/bbee) has joined #haskell
2013-09-09 00:21:36	-->	bergmark (~adnam@atmat.net) has joined #haskell
2013-09-09 00:21:36	-->	ahihi (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-09-09 00:21:36	-->	mantovani (~mantovani@li74-187.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	flori_ (flori@irc.ping.de) has joined #haskell
2013-09-09 00:21:36	-->	cheezey (~ec2-user@ec2-54-241-65-153.us-west-1.compute.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	carter (carter@gateway/shell/ircrelay.com/x-uthowwlbcetsfkaj) has joined #haskell
2013-09-09 00:21:36	-->	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has joined #haskell
2013-09-09 00:21:36	-->	mel- (~m@m.fuglos.org) has joined #haskell
2013-09-09 00:21:36	-->	mjrosenb (~mjrosenb@INDIUM.CLUB.CC.CMU.EDU) has joined #haskell
2013-09-09 00:21:36	-->	barrucadu (~barrucadu@fsf/member/barrucadu) has joined #haskell
2013-09-09 00:21:36	-->	joogi (~joogi@fix3d.net) has joined #haskell
2013-09-09 00:21:36	-->	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has joined #haskell
2013-09-09 00:21:36	-->	osfameron (~osfameron@www.greenokapi.net) has joined #haskell
2013-09-09 00:21:36	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-09-09 00:21:36	-->	Phlogistique (~no@neetwork.net) has joined #haskell
2013-09-09 00:21:36	-->	Athas (~athas@sigkill.dk) has joined #haskell
2013-09-09 00:21:36	-->	machisuji (~machisuji@2a01:4f8:162:22c6::2) has joined #haskell
2013-09-09 00:21:36	-->	xye (~QQ@2a01:4f8:d16:1f53::2) has joined #haskell
2013-09-09 00:21:36	-->	Iceland_jack (user@2a01:7e00::f03c:91ff:fedf:8336) has joined #haskell
2013-09-09 00:21:36	-->	asjo (~asjo@2505ds5-by.0.fullrate.dk) has joined #haskell
2013-09-09 00:21:36	-->	Deewiant (~deewiant@deewiant.iki.fi) has joined #haskell
2013-09-09 00:21:36	-->	alexsdutton (~alex@comma.splice.org.uk) has joined #haskell
2013-09-09 00:21:36	-->	s4muel (~s4muel@ec2-174-129-235-249.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-09-09 00:21:36	-->	seantallen (~seantalle@ec2-54-234-24-103.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has joined #haskell
2013-09-09 00:21:36	-->	swistak35 (swistak35@2a01:4f8:160:11e4::10) has joined #haskell
2013-09-09 00:21:36	-->	tudalex (~tudalex@173.234.237.188) has joined #haskell
2013-09-09 00:21:36	-->	thorsten` (~Thorsten@apus.uberspace.de) has joined #haskell
2013-09-09 00:21:36	-->	ft (efftee@oldshell.chaostreff-dortmund.de) has joined #haskell
2013-09-09 00:21:36	-->	edk (edk@unaffiliated/edk) has joined #haskell
2013-09-09 00:21:36	-->	tg (~x@unaffiliated/tg) has joined #haskell
2013-09-09 00:21:36	-->	scshunt (raedford@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-09-09 00:21:36	-->	heath (quassel@unaffiliated/ybit) has joined #haskell
2013-09-09 00:21:36	-->	popx (~popx@ethnoll.csbnet.se) has joined #haskell
2013-09-09 00:21:36	-->	ibab (igor@2600:3c03::f03c:91ff:feae:d6dd) has joined #haskell
2013-09-09 00:21:36	-->	ysuzuki (~ysuzuki@18.net220148245.t-com.ne.jp) has joined #haskell
2013-09-09 00:21:36	-->	juuhaa (juuhaa@halko.asteriski.fi) has joined #haskell
2013-09-09 00:21:36	-->	zrot (~quassel@149.154.158.30) has joined #haskell
2013-09-09 00:21:36	-->	liyang (~liyang@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-09-09 00:21:36	-->	Raynos (uid3611@gateway/web/irccloud.com/x-hkokcpwtvccrldvx) has joined #haskell
2013-09-09 00:21:36	-->	IbnFirnas (uid6178@gateway/web/irccloud.com/x-kxdbbjrmfrjbhfwp) has joined #haskell
2013-09-09 00:21:36	-->	chickenflu (uid71@gateway/web/irccloud.com/x-dzfnoztzbhmjgxmk) has joined #haskell
2013-09-09 00:21:36	-->	vivekrai (uid10305@gateway/web/irccloud.com/x-vdcmzlgypjpqwfgd) has joined #haskell
2013-09-09 00:21:36	-->	Blkt (~Blkt@2a01:4f8:150:80a1::aaaa) has joined #haskell
2013-09-09 00:21:36	-->	taylorgb_ (~mystery@213.229.88.28) has joined #haskell
2013-09-09 00:21:36	-->	sipa (~pw@unaffiliated/sipa1024) has joined #haskell
2013-09-09 00:21:36	-->	pyykkis_ (~jakeskik@staging.leonidasoy.fi) has joined #haskell
2013-09-09 00:21:36	-->	Walther (walther@2001:1bc8:1004::1) has joined #haskell
2013-09-09 00:21:36	-->	vnz (~vnz@unaffiliated/vnz) has joined #haskell
2013-09-09 00:21:36	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-09-09 00:21:36	-->	bitraten (~bitraten@unaffiliated/bitraten) has joined #haskell
2013-09-09 00:21:36	-->	kekimmo (kekimmo@hilla.kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	mixi (~mixi@exherbo/developer/mixi) has joined #haskell
2013-09-09 00:21:36	-->	jliikka (jliikka@xob.kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	gds (~user@2001:41c8:10:5d::10) has joined #haskell
2013-09-09 00:21:36	-->	pyrtsa (pjahkola@kosh.org.aalto.fi) has joined #haskell
2013-09-09 00:21:36	-->	isomorphismes (~ubuntu@ec2-54-243-213-161.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	d-snp (~tinco@tinco.nl) has joined #haskell
2013-09-09 00:21:36	-->	tippenein (~bo@199.195.252.184) has joined #haskell
2013-09-09 00:21:36	-->	milli (~milli@rasler.acmeps.com) has joined #haskell
2013-09-09 00:21:36	-->	Gunni (~gunni@kjarni/gunni) has joined #haskell
2013-09-09 00:21:36	-->	joelteon (~joel@unaffiliated/otters) has joined #haskell
2013-09-09 00:21:36	-->	lahwran (~lahwran@python/site-packages/lahwran) has joined #haskell
2013-09-09 00:21:36	-->	pr (~pr@unaffiliated/pr) has joined #haskell
2013-09-09 00:21:36	-->	qz_ (~qz@li272-85.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	lulf (~lulf@li307-13.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	lokydor (lecornec20@tom.iiens.net) has joined #haskell
2013-09-09 00:21:36	-->	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-armazhafgyqnyrmg) has joined #haskell
2013-09-09 00:21:36	-->	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has joined #haskell
2013-09-09 00:21:36	-->	integral (~bsmith@p3m/member/integral) has joined #haskell
2013-09-09 00:21:36	-->	mike2 (~michael@unaffiliated/mike1703) has joined #haskell
2013-09-09 00:21:36	-->	SaBer (~sber@unobtainium.futurice.com) has joined #haskell
2013-09-09 00:21:36	-->	udevd (~kaetzchen@151.236.17.188) has joined #haskell
2013-09-09 00:21:36	-->	froztbyte (~froztbyte@unaffiliated/frozt01100101) has joined #haskell
2013-09-09 00:21:36	-->	Pad^ (~Pad@colorlesscube.com) has joined #haskell
2013-09-09 00:21:36	-->	sgso (~sgs@204.62.15.119) has joined #haskell
2013-09-09 00:21:36	-->	brainproxy (~brainprox@pdpc/supporter/gold/brainproxy) has joined #haskell
2013-09-09 00:21:36	-->	ggherdov (uid11402@gateway/web/irccloud.com/x-oikltsonwgznartv) has joined #haskell
2013-09-09 00:21:36	-->	bstrie (~ben@li100-7.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	dpwright (~daniel@li413-20.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	ocharles (ocharles@2a01:7e00::f03c:91ff:fe69:ec30) has joined #haskell
2013-09-09 00:21:36	-->	bartavelle (~bartavell@sd-27156.dedibox.fr) has joined #haskell
2013-09-09 00:21:36	-->	samrat (uid2534@gateway/web/irccloud.com/x-tkfylwcmmjtnanfj) has joined #haskell
2013-09-09 00:21:36	-->	akahn (uid2243@gateway/web/irccloud.com/x-kmcffrdbbdkgqwxo) has joined #haskell
2013-09-09 00:21:36	-->	wilfredh (uid159@gateway/web/irccloud.com/x-hpndlcnpckqjafrq) has joined #haskell
2013-09-09 00:21:36	-->	NeatBasis (~quassel@cl-636.hel-01.fi.sixxs.net) has joined #haskell
2013-09-09 00:21:36	-->	ParahSailin (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 00:21:36	-->	kfreds (~kfreds@178.209.57.22) has joined #haskell
2013-09-09 00:21:36	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-09-09 00:21:36	-->	Razz (~tim@kompiler.org) has joined #haskell
2013-09-09 00:21:36	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-fjphqbqvbralqbzy) has joined #haskell
2013-09-09 00:21:36	-->	Th0mas (~thomas@th0mas.nl) has joined #haskell
2013-09-09 00:21:36	-->	Chousuke (oranenj@battery.modeemi.fi) has joined #haskell
2013-09-09 00:21:36	-->	AlexWebr (~Alex@50.72.145.134) has joined #haskell
2013-09-09 00:21:36	-->	Mayzie (~Daniel.is@unaffiliated/mayazcherquoi) has joined #haskell
2013-09-09 00:21:36	-->	SHODAN (~shozan@fsf/member/shodan) has joined #haskell
2013-09-09 00:21:36	-->	sunfun (~sunfun@2.237.168.123) has joined #haskell
2013-09-09 00:21:36	-->	vsayer (~vsayer@c-50-156-7-219.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	b52 (~b52@unaffiliated/b52) has joined #haskell
2013-09-09 00:21:36	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-09-09 00:21:36	-->	pjstadig (~user@ec2-54-243-195-89.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	Eliel (~jojkaart@dyn79-415.yok.fi) has joined #haskell
2013-09-09 00:21:36	-->	drdo (~drdo@2a02:2498:e000:20::16f:2) has joined #haskell
2013-09-09 00:21:36	-->	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has joined #haskell
2013-09-09 00:21:36	-->	krakrjak (~krakrjak@xvm-103-198.ghst.net) has joined #haskell
2013-09-09 00:21:36	-->	hape01 (~hape01@217.144.132.70) has joined #haskell
2013-09-09 00:21:36	-->	ssttudder (~abi@46.17.57.132) has joined #haskell
2013-09-09 00:21:36	-->	\q (~MaskRay@unaffiliated/maskray) has joined #haskell
2013-09-09 00:21:36	-->	palmje (palmje@167-19-88-118.dcwest.net.au) has joined #haskell
2013-09-09 00:21:36	-->	caligula (~caligula@adsl-76-232-9-108.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	Nickeeh (~quassel@foo.kassala.de) has joined #haskell
2013-09-09 00:21:36	-->	fryguybob (~fryguybob@f27.cs.rochester.edu) has joined #haskell
2013-09-09 00:21:36	-->	kqr1 (kqr@host155-38.etanet.se) has joined #haskell
2013-09-09 00:21:36	-->	yan_ (~yan@64.22.109.95) has joined #haskell
2013-09-09 00:21:36	-->	fergusnoble (fergusnobl@repl.esden.net) has joined #haskell
2013-09-09 00:21:36	-->	b2coutts (stein@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-09-09 00:21:36	-->	ircbrowse (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-09-09 00:21:36	-->	Svedrin (svedrin@ketos.funzt-halt.net) has joined #haskell
2013-09-09 00:21:36	-->	jackhill (jackhill@pilot.trilug.org) has joined #haskell
2013-09-09 00:21:36	-->	Dybber (~dybber@dybber.dk) has joined #haskell
2013-09-09 00:21:36	-->	prototrout (~prototrou@24-116-81-246.cpe.cableone.net) has joined #haskell
2013-09-09 00:21:36	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-09-09 00:21:36	-->	jix (~jix@jixco.de) has joined #haskell
2013-09-09 00:21:36	-->	lispy (~lispy@li343-23.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	Plex- (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has joined #haskell
2013-09-09 00:21:36	-->	aninhumer (ajh239@pip.srcf.societies.cam.ac.uk) has joined #haskell
2013-09-09 00:21:36	-->	zenzike (~nick@zenzike.com) has joined #haskell
2013-09-09 00:21:36	-->	mkiefel (~martin@84.38.64.26) has joined #haskell
2013-09-09 00:21:36	-->	agundry (~adam@cafe.cis.strath.ac.uk) has joined #haskell
2013-09-09 00:21:36	-->	solirc (~solirc@213-239-220-143.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	tych0 (~tycho@69.163.206.84) has joined #haskell
2013-09-09 00:21:36	-->	bind (~bind@unaffiliated/bind) has joined #haskell
2013-09-09 00:21:36	-->	tahu (~tahu@client-178-16-41-83.inturbo.lt) has joined #haskell
2013-09-09 00:21:36	-->	macron (~macron@158.255.215.93) has joined #haskell
2013-09-09 00:21:36	-->	edwtjo (~edwtjo@h-62-72.a213.priv.bahnhof.se) has joined #haskell
2013-09-09 00:21:36	-->	PHO_ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has joined #haskell
2013-09-09 00:21:36	-->	bd_ (~nanashi@198.244.99.244) has joined #haskell
2013-09-09 00:21:36	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-09-09 00:21:36	-->	saiam (saiam@tiger.eliecraft.fi) has joined #haskell
2013-09-09 00:21:36	-->	dlundy (~dlundy@185.21.216.183) has joined #haskell
2013-09-09 00:21:36	-->	theDon (~td@141.30.223.187) has joined #haskell
2013-09-09 00:21:36	-->	zebr (~zebr@arcadia.kent.ac.uk) has joined #haskell
2013-09-09 00:21:36	-->	schlumpi_ (~schlumpi@fob.spline.inf.fu-berlin.de) has joined #haskell
2013-09-09 00:21:36	-->	aforemny (~aforemny@ec2-54-217-241-103.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	dwierenga (~dwierenga@75-63-28-175.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	mami (mami@gateway/shell/c-base/x-nnosqquakntyvxsm) has joined #haskell
2013-09-09 00:21:36	-->	yam (yam@liberty.xenbox.fr) has joined #haskell
2013-09-09 00:21:36	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-09-09 00:21:36	-->	mokus (~mokus@172-11-177-99.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	mxf (~mxf@lab.qu.cx) has joined #haskell
2013-09-09 00:21:36	-->	iron_houzi (~dorbin@cm-84.215.158.135.getinternet.no) has joined #haskell
2013-09-09 00:21:36	-->	leroux (~leroux@unaffiliated/leroux) has joined #haskell
2013-09-09 00:21:36	-->	shelf (~bnc@unaffiliated/shelf) has joined #haskell
2013-09-09 00:21:36	-->	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has joined #haskell
2013-09-09 00:21:36	-->	Ornedan (aitakang@melkki.cs.helsinki.fi) has joined #haskell
2013-09-09 00:21:36	-->	ParaSa1lin (~parahsail@unaffiliated/parahsailin) has joined #haskell
2013-09-09 00:21:36	-->	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has joined #haskell
2013-09-09 00:21:36	-->	jrd0 (~jrd0@bigv.mockra.net) has joined #haskell
2013-09-09 00:21:36	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-09-09 00:21:36	-->	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has joined #haskell
2013-09-09 00:21:36	-->	miasma (jmjmak@linux.utu.fi) has joined #haskell
2013-09-09 00:21:36	-->	Draggor (~Draggor@75-150-231-161-Illinois.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 00:21:36	-->	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has joined #haskell
2013-09-09 00:21:36	-->	ryanakca (ryan@ubuntu/member/ryanakca) has joined #haskell
2013-09-09 00:21:36	-->	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2013-09-09 00:21:36	-->	bcoppens (~bartcopp@kde/coppens) has joined #haskell
2013-09-09 00:21:36	-->	nopcode (~nop@sushi.unix-ag.uni-kl.de) has joined #haskell
2013-09-09 00:21:36	-->	Edoxile (~Edoxile@edoxile.net) has joined #haskell
2013-09-09 00:21:36	-->	Boreeas (~Boreeas@frozen.boreeas.net) has joined #haskell
2013-09-09 00:21:36	-->	robbert` (~robbert@unaffiliated/robbert) has joined #haskell
2013-09-09 00:21:36	-->	nwf (~nwf@a.rr.ietfng.org) has joined #haskell
2013-09-09 00:21:36	-->	chrra (~cra@cra.no) has joined #haskell
2013-09-09 00:21:36	-->	Yawgmoth (~quassel@gruss.cc) has joined #haskell
2013-09-09 00:21:36	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2013-09-09 00:21:36	-->	fxrh (~quassel@2001:1a50:11:0:5f:8f:ac66:1) has joined #haskell
2013-09-09 00:21:36	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-09-09 00:21:36	-->	CosmicRay (~jgoerzen@glockenspiel.complete.org) has joined #haskell
2013-09-09 00:21:36	-->	mimi_vx (~quassel@vector.clanwars.cz) has joined #haskell
2013-09-09 00:21:36	-->	stass (stas@ssh.deglitch.com) has joined #haskell
2013-09-09 00:21:36	-->	uu1101 (~uu1101@mail.medranocalvo.com) has joined #haskell
2013-09-09 00:21:36	-->	aleator (~aleator@desmaani.it.jyu.fi) has joined #haskell
2013-09-09 00:21:36	-->	DarkNFoxy (~df@unaffiliated/darkfox) has joined #haskell
2013-09-09 00:21:36	-->	janinge (j@ninge.net) has joined #haskell
2013-09-09 00:21:36	-->	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has joined #haskell
2013-09-09 00:21:36	-->	MouseTheLuckyDog (~mouse@adsl-76-193-161-115.dsl.chcgil.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	schroedinbug (~schroedin@71-212-238-198.hlrn.qwest.net) has joined #haskell
2013-09-09 00:21:36	-->	dacc (~dacc@c-71-227-173-145.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	companion_cube (~simon@sac.cedeela.fr) has joined #haskell
2013-09-09 00:21:36	-->	Khisanth (~Khisanth@50.14.244.111) has joined #haskell
2013-09-09 00:21:36	-->	mmaruseacph2 (~mihai@mithlond.ro) has joined #haskell
2013-09-09 00:21:36	-->	averell (~averell@2a00:1c18:401:c00::803:11) has joined #haskell
2013-09-09 00:21:36	-->	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has joined #haskell
2013-09-09 00:21:36	-->	mrpantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-09-09 00:21:36	-->	tsou (~tsou@lyon.sians.org) has joined #haskell
2013-09-09 00:21:36	-->	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has joined #haskell
2013-09-09 00:21:36	-->	kxra (kxra@fsf/staff/kxra) has joined #haskell
2013-09-09 00:21:36	-->	joefiorini (uid3127@gateway/web/irccloud.com/x-crwzgjtvvmjdhjjr) has joined #haskell
2013-09-09 00:21:36	-->	d3lxa (~d3lxa@ks38928.kimsufi.com) has joined #haskell
2013-09-09 00:21:36	-->	wto (~wto@h-148-187.a336.priv.bahnhof.se) has joined #haskell
2013-09-09 00:21:36	-->	Veltas (~quassel@backus.compsoc.warwick.ac.uk) has joined #haskell
2013-09-09 00:21:36	-->	epsylon (~epsylon@abbaye.thele.me) has joined #haskell
2013-09-09 00:21:36	-->	flux (flux@coffee.modeemi.fi) has joined #haskell
2013-09-09 00:21:36	-->	mendez (~mendez@electricabac.us) has joined #haskell
2013-09-09 00:21:36	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-09-09 00:21:36	-->	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	ssbr (~ssbr@python/site-packages/ssbr) has joined #haskell
2013-09-09 00:21:36	-->	dennylin93 (~dennylin9@cnmc.tw) has joined #haskell
2013-09-09 00:21:36	-->	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	noddy2OOO (~self@numm.org) has joined #haskell
2013-09-09 00:21:36	-->	oldmanst1n (~glesica@goto10line.net) has joined #haskell
2013-09-09 00:21:36	-->	Bwild_ (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	xenophon (~his_shado@64.124.65.162) has joined #haskell
2013-09-09 00:21:36	-->	Ptival (~Ptival@goto.ucsd.edu) has joined #haskell
2013-09-09 00:21:36	-->	phar (~phar@v22010096862397599.yourvserver.net) has joined #haskell
2013-09-09 00:21:36	-->	iulian (iulian@ubuntu/member/iulian) has joined #haskell
2013-09-09 00:21:36	-->	tomh- (uid501@gateway/web/irccloud.com/x-zuyqdcgwmtbuzsbi) has joined #haskell
2013-09-09 00:21:36	-->	axiom (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-09-09 00:21:36	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell
2013-09-09 00:21:36	-->	mshroyer (~mshroyer@legolas.paleogene.net) has joined #haskell
2013-09-09 00:21:36	-->	kshannon_ (~kris@kris.shannon.id.au) has joined #haskell
2013-09-09 00:21:36	-->	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has joined #haskell
2013-09-09 00:21:36	-->	akraut (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has joined #haskell
2013-09-09 00:21:36	-->	tensorpudding (~tensorpud@99.148.203.65) has joined #haskell
2013-09-09 00:21:36	-->	MrRacoon (suthere@reaver.cat.pdx.edu) has joined #haskell
2013-09-09 00:21:36	-->	k00mi (~koomi@pictor.uberspace.de) has joined #haskell
2013-09-09 00:21:36	-->	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has joined #haskell
2013-09-09 00:21:36	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-09-09 00:21:36	-->	tomprince (~tomprince@socrates.hocat.ca) has joined #haskell
2013-09-09 00:21:36	-->	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has joined #haskell
2013-09-09 00:21:36	-->	bduc (~bduc@bduc.org) has joined #haskell
2013-09-09 00:21:36	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-09-09 00:21:36	-->	clog (~nef@bespin.org) has joined #haskell
2013-09-09 00:21:36	-->	mena (~mena@asgard.tauri.hu) has joined #haskell
2013-09-09 00:21:36	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-09-09 00:21:36	-->	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has joined #haskell
2013-09-09 00:21:36	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-09-09 00:21:36	-->	SLi (sliedes@lakka.kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	paz (~paz@zulu824.server4you.de) has joined #haskell
2013-09-09 00:21:36	-->	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has joined #haskell
2013-09-09 00:21:36	-->	koala_man (vidar@unaffiliated/koala-man/x-2491903) has joined #haskell
2013-09-09 00:21:36	-->	jrib (~jrib@upstream/dev/jrib) has joined #haskell
2013-09-09 00:21:36	-->	epta (~yep@toje.ws) has joined #haskell
2013-09-09 00:21:36	-->	hiyakashi (~hiyakashi@www19112ue.sakura.ne.jp) has joined #haskell
2013-09-09 00:21:36	-->	raid (macbookpro@irc.coding4coffee.org) has joined #haskell
2013-09-09 00:21:36	-->	Adeon (~valaat@109.73.169.52) has joined #haskell
2013-09-09 00:21:36	-->	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-09-09 00:21:36	-->	strax (uid4099@gateway/web/irccloud.com/x-cvtqygjodkntiptf) has joined #haskell
2013-09-09 00:21:36	-->	eevar (~eevar@175.80-203-27.nextgentel.com) has joined #haskell
2013-09-09 00:21:36	-->	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Jaxan (~quassel@foo.kassala.de) has joined #haskell
2013-09-09 00:21:36	-->	joachifm (~joachifm@ulrik.uio.no) has joined #haskell
2013-09-09 00:21:36	-->	_1126 (~1126@saturn.lileth.net) has joined #haskell
2013-09-09 00:21:36	-->	ent (entgod@kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	othiym23 (ogd@aglaia.aoaioxxysz.net) has joined #haskell
2013-09-09 00:21:36	-->	mviljamaa (mviljamaa@kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	Mowah (~Mowah@c-0d8ce555.09-137-6c6b7013.cust.bredbandsbolaget.se) has joined #haskell
2013-09-09 00:21:36	-->	aoh (~aki@adsl-99-115.netplaza.fi) has joined #haskell
2013-09-09 00:21:36	-->	identity (~0xC3@50708181.static.ziggozakelijk.nl) has joined #haskell
2013-09-09 00:21:36	-->	mux (mux@freebsd/developer/mux) has joined #haskell
2013-09-09 00:21:36	-->	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has joined #haskell
2013-09-09 00:21:36	-->	Hodapp (~hodapp@198.56.208.32) has joined #haskell
2013-09-09 00:21:36	-->	arbn1 (~arbn@auriga.kiwilight.com) has joined #haskell
2013-09-09 00:21:36	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-09-09 00:21:36	-->	slobo (~slobo@mx1.svarog.ca) has joined #haskell
2013-09-09 00:21:36	-->	zomg (~jani@jjh.fi) has joined #haskell
2013-09-09 00:21:36	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-09-09 00:21:36	-->	phryk (~phryk@static.39.216.9.176.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-09-09 00:21:36	-->	arkx (~aku@eagleflow.fi) has joined #haskell
2013-09-09 00:21:36	-->	a11235 (~a11235@unaffiliated/a11235) has joined #haskell
2013-09-09 00:21:36	-->	ericmj (~ericmj@198.211.118.116) has joined #haskell
2013-09-09 00:21:36	-->	]OLI[ (~oli@raven.linux.ox.ac.uk) has joined #haskell
2013-09-09 00:21:36	-->	matson (~matson@jabam.lepovirta.org) has joined #haskell
2013-09-09 00:21:36	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-09-09 00:21:36	-->	lattenwald (~qalex@185.6.245.156) has joined #haskell
2013-09-09 00:21:36	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-09-09 00:21:36	-->	Zariel (~zariel@li37-84.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	Rutger` (~devbin@nelisvanaalst.demon.nl) has joined #haskell
2013-09-09 00:21:36	-->	s4msung (~s4msung@s4msung.de) has joined #haskell
2013-09-09 00:21:36	-->	tinyghost (~ghosty@rainbowsta.rs) has joined #haskell
2013-09-09 00:21:36	-->	mischov (~mischov@cpe-24-160-149-69.satx.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	Tehnix (~Tehnix@192.81.221.23) has joined #haskell
2013-09-09 00:21:36	-->	Fuuzetsu (~Shana@fsf/member/Fuuzetsu) has joined #haskell
2013-09-09 00:21:36	-->	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	Watcher7 (~w@silly.tabby.cat) has joined #haskell
2013-09-09 00:21:36	-->	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-09-09 00:21:36	-->	ousado (~ousado@unaffiliated/ousado) has joined #haskell
2013-09-09 00:21:36	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell
2013-09-09 00:21:36	-->	MitchW (~MitchW@124-171-104-43.dyn.iinet.net.au) has joined #haskell
2013-09-09 00:21:36	-->	sondove (~sondove@sondov.no) has joined #haskell
2013-09-09 00:21:36	-->	zeroXten (~zeroXten@0x10.co.uk) has joined #haskell
2013-09-09 00:21:36	-->	destiny (~ircguy@93.190.3.226) has joined #haskell
2013-09-09 00:21:36	-->	pootler (mervyn@smlh.x.rootbsd.net) has joined #haskell
2013-09-09 00:21:36	-->	Nik05 (~Nik05@unaffiliated/nik05) has joined #haskell
2013-09-09 00:21:36	-->	plains (zchr@unaffiliated/plains) has joined #haskell
2013-09-09 00:21:36	-->	sclv_ (c62d135f@gateway/web/freenode/ip.198.45.19.95) has joined #haskell
2013-09-09 00:21:36	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	ortmage (ortmage@nat/google/x-ratauexiuvphlpyq) has joined #haskell
2013-09-09 00:21:36	-->	davean (~davean@vervet.isomerica.net) has joined #haskell
2013-09-09 00:21:36	-->	tdammers (~tobias@unaffiliated/tdammers) has joined #haskell
2013-09-09 00:21:36	-->	shepheb (~bsshephe@bas1-jockvale05-3096538275.dsl.bell.ca) has joined #haskell
2013-09-09 00:21:36	-->	ByronJohnson (~Byron@unaffiliated/bob0) has joined #haskell
2013-09-09 00:21:36	-->	Tene (~tene@poipu/supporter/slacker/tene) has joined #haskell
2013-09-09 00:21:36	-->	jml (~jml@unaffiliated/jml) has joined #haskell
2013-09-09 00:21:36	-->	nik_89 (~nik_89@unaffiliated/nniro) has joined #haskell
2013-09-09 00:21:36	-->	machisuji_ (~machisuji@78.46.83.103) has joined #haskell
2013-09-09 00:21:36	-->	`bps (sim@functor.paivola.fi) has joined #haskell
2013-09-09 00:21:36	-->	Obfuscate (~keii@unaffiliated/obfuscate) has joined #haskell
2013-09-09 00:21:36	-->	iemejia (~ismael@apache2-noxim.yoda.dreamhost.com) has joined #haskell
2013-09-09 00:21:36	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-09 00:21:36	-->	philipde` (~user@cpe-69-204-201-168.stny.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has joined #haskell
2013-09-09 00:21:36	-->	pi8027 (~pi8027@www2480uf.sakura.ne.jp) has joined #haskell
2013-09-09 00:21:36	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-09-09 00:21:36	-->	ernst (~ernst@static.85-10-192-204.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	mvj4_ (~2g8@78.47.152.189) has joined #haskell
2013-09-09 00:21:36	-->	cods (~cods@rsbac/developer/cods) has joined #haskell
2013-09-09 00:21:36	-->	davidt (~chatzilla@davidt.scs.stanford.edu) has joined #haskell
2013-09-09 00:21:36	-->	saiam^ (saiam@evo.paivola.fi) has joined #haskell
2013-09-09 00:21:36	-->	copton (~copton@shell.spamt.net) has joined #haskell
2013-09-09 00:21:36	-->	dsfox (~dsf@98.155.82.213) has joined #haskell
2013-09-09 00:21:36	-->	supki (~matt@li305-103.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	nullcone (uid11626@gateway/web/irccloud.com/x-siqqamfkhkpjfyri) has joined #haskell
2013-09-09 00:21:36	-->	mapour (mapour@linux.utu.fi) has joined #haskell
2013-09-09 00:21:36	-->	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has joined #haskell
2013-09-09 00:21:36	-->	alexander__b (~alexander@fsf/member/alexanderb) has joined #haskell
2013-09-09 00:21:36	-->	etrepum (uid763@gateway/web/irccloud.com/x-shneosfmifqdvutw) has joined #haskell
2013-09-09 00:21:36	-->	janiczek_ (uid12701@gateway/web/irccloud.com/x-fzriysaagvsiyqdj) has joined #haskell
2013-09-09 00:21:36	-->	si14 (uid2619@gateway/web/irccloud.com/x-ahsnmzsqpaoarlib) has joined #haskell
2013-09-09 00:21:36	-->	ChongLi (~chongli@24-212-141-111.cable.teksavvy.com) has joined #haskell
2013-09-09 00:21:36	-->	Kinnison (vToZDVVYsu@gateway/shell/pepperfish/x-ptqxtdpyshkjhdvy) has joined #haskell
2013-09-09 00:21:36	-->	tridactyla (~mforney@mforney.new.xen.prgmr.com) has joined #haskell
2013-09-09 00:21:36	-->	bunzen (~Geir@li184-224.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	jlouis (jlouis@horus.0x90.dk) has joined #haskell
2013-09-09 00:21:36	-->	drmegahertz (~drmegaher@linuxuser.se) has joined #haskell
2013-09-09 00:21:36	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-09-09 00:21:36	-->	redjohn (~redjohn@76.8.223.68) has joined #haskell
2013-09-09 00:21:36	-->	chaterz (Nerdwolrd@unaffiliated/chaterz) has joined #haskell
2013-09-09 00:21:36	-->	mietek (mietek@bak.io) has joined #haskell
2013-09-09 00:21:36	-->	Igloo (~igloo@210.99.2.81.in-addr.arpa) has joined #haskell
2013-09-09 00:21:36	-->	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	meretrix (~user@unaffiliated/meretrix) has joined #haskell
2013-09-09 00:21:36	-->	ninegrid (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	kryft (kryft@kapsi.fi) has joined #haskell
2013-09-09 00:21:36	-->	Cryovat (~null@sky.prism.winterday.net) has joined #haskell
2013-09-09 00:21:36	-->	floatingman (~dnewman@c-68-47-207-131.hsd1.tn.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	joeyh (~joeyh@2001:41c8:125:49::10) has joined #haskell
2013-09-09 00:21:36	-->	Erstarrung (~castor@ks26581.kimsufi.com) has joined #haskell
2013-09-09 00:21:36	-->	ehd (uid1451@gateway/web/irccloud.com/x-wfpomgtakcgdlthn) has joined #haskell
2013-09-09 00:21:36	-->	mavam (~mavam@unaffiliated/mavam) has joined #haskell
2013-09-09 00:21:36	-->	Xorlev (uid226@gateway/web/irccloud.com/x-tgmnpzuejomkdvlu) has joined #haskell
2013-09-09 00:21:36	-->	chexxor (uid1596@gateway/web/irccloud.com/x-lfxwddnshcnulwmh) has joined #haskell
2013-09-09 00:21:36	-->	aloiscochard (uid2076@gateway/web/irccloud.com/x-fdodifbvjfyrcrdq) has joined #haskell
2013-09-09 00:21:36	-->	nkpart (uid3844@gateway/web/irccloud.com/x-usorrgjjzwfnchjm) has joined #haskell
2013-09-09 00:21:36	-->	lopex (uid4272@gateway/web/irccloud.com/x-jewaqnpafntjxlsu) has joined #haskell
2013-09-09 00:21:36	-->	Ghoul_ (uid6924@gateway/web/irccloud.com/x-oefpjhxlxfpcxakq) has joined #haskell
2013-09-09 00:21:36	-->	idnar (uid12240@gateway/web/irccloud.com/x-nmunltoqatxvmeab) has joined #haskell
2013-09-09 00:21:36	-->	purefn (uid13625@gateway/web/irccloud.com/x-omzzprbxcjthcfuk) has joined #haskell
2013-09-09 00:21:36	-->	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has joined #haskell
2013-09-09 00:21:36	-->	zero7 (uid10708@gateway/web/irccloud.com/x-rbacbporhprqzueo) has joined #haskell
2013-09-09 00:21:36	-->	dwcook (~danny@unaffiliated/dwcook) has joined #haskell
2013-09-09 00:21:36	-->	Ulrar (~Ulrar@luwin.ulrar.net) has joined #haskell
2013-09-09 00:21:36	-->	aford (~pi@host86-164-47-30.range86-164.btcentralplus.com) has joined #haskell
2013-09-09 00:21:36	-->	dabradley (bradley@nat/ibm/x-vrkwncfwcvnqhlmv) has joined #haskell
2013-09-09 00:21:36	-->	andares (~andares@unaffiliated/jacco) has joined #haskell
2013-09-09 00:21:36	-->	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	javax (~javax@46.246.126.38) has joined #haskell
2013-09-09 00:21:36	-->	Internet13 (~chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has joined #haskell
2013-09-09 00:21:36	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-09-09 00:21:36	-->	callen (~callen@unaffiliated/callen) has joined #haskell
2013-09-09 00:21:36	-->	rhodesd (~none@192.34.61.82) has joined #haskell
2013-09-09 00:21:36	-->	kennyp (~kennyp@fedora/kennyp) has joined #haskell
2013-09-09 00:21:36	-->	KitB (~kit@kitb.pw) has joined #haskell
2013-09-09 00:21:36	-->	rgrinberg (~rgrinberg@198.211.108.102) has joined #haskell
2013-09-09 00:21:36	-->	dustinswan (~dustinswa@198.199.71.201) has joined #haskell
2013-09-09 00:21:36	-->	mgaare (~quassel@192.81.216.48) has joined #haskell
2013-09-09 00:21:36	-->	ehamberg (~erlend@hamberg.no) has joined #haskell
2013-09-09 00:21:36	-->	mononofu (~mononofu@vps.furidamu.org) has joined #haskell
2013-09-09 00:21:36	-->	mmathis (~surya@198.199.68.171) has joined #haskell
2013-09-09 00:21:36	-->	profmakx (makx@unaffiliated/profmakx) has joined #haskell
2013-09-09 00:21:36	-->	jmct (uid1305@gateway/web/irccloud.com/x-vhhiiyupjrkclpuo) has joined #haskell
2013-09-09 00:21:36	-->	joneshf-work (~joneshf@mail.concordusapps.com) has joined #haskell
2013-09-09 00:21:36	-->	benmachine (bm380@tremulous/developer/benmachine) has joined #haskell
2013-09-09 00:21:36	-->	Krakarn (Krakarn@62.80.204.136) has joined #haskell
2013-09-09 00:21:36	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-09-09 00:21:36	-->	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	fixme (~fixme@202.120.40.94) has joined #haskell
2013-09-09 00:21:36	-->	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-09-09 00:21:36	-->	fimad (~fimad@173-13-165-149-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 00:21:36	-->	Guest96413 (~antix@unaffiliated/malfy) has joined #haskell
2013-09-09 00:21:36	-->	ghorn (~ghorn@kulnet-nat-2.kulnet.kuleuven.be) has joined #haskell
2013-09-09 00:21:36	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-09 00:21:36	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-09-09 00:21:36	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-09-09 00:21:36	-->	otterdam (~otterdam@reddit/operator/otterdam) has joined #haskell
2013-09-09 00:21:36	-->	_janne (dmon@punainen.org) has joined #haskell
2013-09-09 00:21:36	-->	em (~em@unaffiliated/emma) has joined #haskell
2013-09-09 00:21:36	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 00:21:36	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-09-09 00:21:36	-->	bobthenameless (~bobthenam@c-71-227-128-93.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-09-09 00:21:36	-->	scolobb (~user@2a01:e0b:1:154:62eb:69ff:fefe:5a79) has joined #haskell
2013-09-09 00:21:36	-->	srhb (~srhb@static.101.127.47.78.clients.your-server.de) has joined #haskell
2013-09-09 00:21:36	-->	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has joined #haskell
2013-09-09 00:21:36	-->	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	fser (~fser@ns2.lautre.net) has joined #haskell
2013-09-09 00:21:36	-->	jonsmock (~jonsmock@c-174-60-102-51.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Kelet (~Kelet@unaffiliated/kelet) has joined #haskell
2013-09-09 00:21:36	-->	seggy (c6fce60f@gateway/web/freenode/ip.198.252.230.15) has joined #haskell
2013-09-09 00:21:36	-->	gbeshers (~gbeshers@pool-74-97-190-27.prvdri.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has joined #haskell
2013-09-09 00:21:36	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-09-09 00:21:36	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 00:21:36	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-09-09 00:21:36	-->	troydm (~troydm@unaffiliated/troydm) has joined #haskell
2013-09-09 00:21:36	-->	chrisdotcode_ (~quassel@ool-6caa6f84.static.optonline.net) has joined #haskell
2013-09-09 00:21:36	-->	ClaudiusMaximus (~claude@unaffiliated/claudiusmaximus) has joined #haskell
2013-09-09 00:21:36	-->	_flow_ (flow@star.freakempire.de) has joined #haskell
2013-09-09 00:21:36	-->	onur (~onur@ev.onur.im) has joined #haskell
2013-09-09 00:21:36	-->	`0660 (olli@oosny.net) has joined #haskell
2013-09-09 00:21:36	-->	M-ou-se (~m-ou.se@m-ou.se) has joined #haskell
2013-09-09 00:21:36	-->	nlogax (~nlogax@unaffiliated/nlogax) has joined #haskell
2013-09-09 00:21:36	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-09-09 00:21:36	-->	nitin2 (~nitin@luug.ece.vt.edu) has joined #haskell
2013-09-09 00:21:36	-->	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has joined #haskell
2013-09-09 00:21:36	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-09 00:21:36	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-09-09 00:21:36	-->	Guest66650 (~df@64.191.40.211) has joined #haskell
2013-09-09 00:21:36	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-09 00:21:36	-->	michael__ (~quassel@62.253.227.100) has joined #haskell
2013-09-09 00:21:36	-->	killy9999 (~killy@hydra.ics.p.lodz.pl) has joined #haskell
2013-09-09 00:21:36	-->	canta (~canta@77-20-120-171-dynip.superkabel.de) has joined #haskell
2013-09-09 00:21:36	-->	nanothief (~nanothief@116.255.8.253) has joined #haskell
2013-09-09 00:21:36	-->	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-09-09 00:21:36	-->	Natch (~Natch@c-cdcee155.25-4-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-09-09 00:21:36	-->	akamch_` (~user@194.125.237.56) has joined #haskell
2013-09-09 00:21:36	-->	chrisyoung (~user@nyc.schrodinger.com) has joined #haskell
2013-09-09 00:21:36	-->	melter (~Melter@2001:4930:116:0:21c:c0ff:feef:eaf5) has joined #haskell
2013-09-09 00:21:36	-->	cognominal__ (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-09 00:21:36	-->	fijimunk1i (~fijimunki@pool-98-113-72-161.nycmny.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	Dodek (am291698@duch.mimuw.edu.pl) has joined #haskell
2013-09-09 00:21:36	-->	Tordek (tordek@gateway/shell/blinkenshell.org/x-cgvscfhyxnqichut) has joined #haskell
2013-09-09 00:21:36	-->	johnw (~johnw@c-98-214-70-173.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	farn (frantk@fran.tk) has joined #haskell
2013-09-09 00:21:36	-->	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has joined #haskell
2013-09-09 00:21:36	-->	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	fizruk (~fizruk@79.165.40.18) has joined #haskell
2013-09-09 00:21:36	-->	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Vorpal (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-09-09 00:21:36	-->	DT` (~ea@95.233.203.148) has joined #haskell
2013-09-09 00:21:36	-->	dkordic (~danilo@93-87-124-217.dynamic.isp.telekom.rs) has joined #haskell
2013-09-09 00:21:36	-->	pikhq (~pikhq@24-107-196-13.dhcp.stls.mo.charter.com) has joined #haskell
2013-09-09 00:21:36	-->	johnbender (johnbender@gateway/shell/ircrelay.com/x-nwclfgdcfdezcuxy) has joined #haskell
2013-09-09 00:21:36	-->	TheSpectre (~root@artemis.zerosecure.com) has joined #haskell
2013-09-09 00:21:36	-->	DigitalKiwi (~kiwi@unaffiliated/digitalkiwi) has joined #haskell
2013-09-09 00:21:36	-->	suiside (tajnyman@unaffiliated/suiside) has joined #haskell
2013-09-09 00:21:36	-->	cschneid (cschneid@2600:3c00::f03c:91ff:fedf:d92e) has joined #haskell
2013-09-09 00:21:36	-->	niko (~niko@freenode/staff/ubuntu.member.niko) has joined #haskell
2013-09-09 00:21:36	-->	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	djahandarie (darius@unaffiliated/djahandarie) has joined #haskell
2013-09-09 00:21:36	-->	Excureo (~c@68-113-0-218.static.knwc.wa.charter.com) has joined #haskell
2013-09-09 00:21:36	-->	sirspazzolot (~matt@c-71-205-202-84.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-09-09 00:21:36	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-09-09 00:21:36	-->	geekosaur (allbery@dreamshell.ttuttle.net) has joined #haskell
2013-09-09 00:21:36	-->	Philonous (~Philonous@dslb-188-106-138-223.pools.arcor-ip.net) has joined #haskell
2013-09-09 00:21:36	-->	chirpsalot (~Chirps@unaffiliated/chirpsalot) has joined #haskell
2013-09-09 00:21:36	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-09 00:21:36	-->	nycs (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	Gracenotes_ (~person@192.241.203.42) has joined #haskell
2013-09-09 00:21:36	-->	junsuiji1 (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Ycros (ycros@gnaw.ycros.org) has joined #haskell
2013-09-09 00:21:36	-->	hiredman_ (~hiredman@volyova.ec2.thelastcitadel.com) has joined #haskell
2013-09-09 00:21:36	-->	driek (~drk@whiff.xentower.nl) has joined #haskell
2013-09-09 00:21:36	-->	cruxeter1us (cruxtech@secspeed.com) has joined #haskell
2013-09-09 00:21:36	-->	Saeppel (~saep@185.7.198.1) has joined #haskell
2013-09-09 00:21:36	-->	Nahra (~Nahra@unaffiliated/nahra) has joined #haskell
2013-09-09 00:21:36	-->	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has joined #haskell
2013-09-09 00:21:36	-->	dixie (dixie@real.wilbury.sk) has joined #haskell
2013-09-09 00:21:36	-->	sababa (~sababa@unaffiliated/sababa) has joined #haskell
2013-09-09 00:21:36	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-09-09 00:21:36	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-09-09 00:21:36	-->	arbn (~arbn@unaffiliated/arbn) has joined #haskell
2013-09-09 00:21:36	-->	sweeney (uid4809@gateway/web/irccloud.com/x-rnpvaozkjavyikag) has joined #haskell
2013-09-09 00:21:36	-->	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has joined #haskell
2013-09-09 00:21:36	-->	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	gpampara_off (~gpampara@174.136.1.66) has joined #haskell
2013-09-09 00:21:36	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-09 00:21:36	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-09-09 00:21:36	-->	FreakyPenguin (~FreakyPen@sv0.famkaufmann.info) has joined #haskell
2013-09-09 00:21:36	-->	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has joined #haskell
2013-09-09 00:21:36	-->	kevinqcs1 (~turing@183.209.53.5) has joined #haskell
2013-09-09 00:21:36	-->	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has joined #haskell
2013-09-09 00:21:36	-->	OlegYch6 (~OlegYch@213.184.238.131) has joined #haskell
2013-09-09 00:21:36	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has joined #haskell
2013-09-09 00:21:36	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-09-09 00:21:36	-->	ecube (~ecube@unaffiliated/ecube) has joined #haskell
2013-09-09 00:21:36	-->	lusory (~lusory@42.60.25.228) has joined #haskell
2013-09-09 00:21:36	-->	Twey (~Twey@unaffiliated/twey) has joined #haskell
2013-09-09 00:21:36	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-09-09 00:21:36	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-09 00:21:36	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-09 00:21:36	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-09 00:21:36	-->	Kuraitou (~kuraitou@unaffiliated/kuraitou) has joined #haskell
2013-09-09 00:21:36	-->	specklessness70 (~speckless@c-67-182-147-102.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-09 00:21:36	-->	hdevalence|away (hdevalence@gateway/shell/kde/x-yqbgatcxuacouhst) has joined #haskell
2013-09-09 00:21:36	-->	bss03 (~bss@76-220-103-20.lightspeed.fyvlar.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	ozataman (~ozataman@pool-108-41-231-51.nycmny.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	zenoli (~pk@109.201.154.145) has joined #haskell
2013-09-09 00:21:36	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-09 00:21:36	-->	mp (maciej@hell.cx) has joined #haskell
2013-09-09 00:21:36	-->	hrefchef (~BlackHunt@pool-72-73-253-159.cmdnnj.east.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-09 00:21:36	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-09 00:21:36	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-09 00:21:36	-->	Baughn (~svein@tsugumi.brage.info) has joined #haskell
2013-09-09 00:21:36	-->	Ceryn (~Ceryn@petardo.dk) has joined #haskell
2013-09-09 00:21:36	-->	eyck (~eyck@nat08.nowanet.pl) has joined #haskell
2013-09-09 00:21:36	-->	otulp (~otulp@cm-84.209.90.171.getinternet.no) has joined #haskell
2013-09-09 00:21:36	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 00:21:36	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-09-09 00:21:36	-->	predator217 (~predator1@p508029DD.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:21:36	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-09 00:21:36	-->	pierreghz (~krux@91.179.27.135) has joined #haskell
2013-09-09 00:21:36	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-09 00:21:36	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	mm_freak_ (~milch@p5DD05079.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:21:36	-->	apaku (~apaku@x2f11e4b.dyn.telefonica.de) has joined #haskell
2013-09-09 00:21:36	-->	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has joined #haskell
2013-09-09 00:21:36	-->	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-09 00:21:36	-->	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	tabemann (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-09 00:21:36	-->	mobileblue (~mobileblu@dslb-094-218-066-149.pools.arcor-ip.net) has joined #haskell
2013-09-09 00:21:36	-->	jzl (~jzl@ec2-23-21-191-143.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has joined #haskell
2013-09-09 00:21:36	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	otto_s_ (~user@cotb-4db35db8.pool.mediaWays.net) has joined #haskell
2013-09-09 00:21:36	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-09 00:21:36	-->	shanse (~generic@p57B2DC10.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:21:36	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-09 00:21:36	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-09 00:21:36	-->	mimico__ (uid2554@gateway/web/irccloud.com/x-gehmvygmeqmpfmuw) has joined #haskell
2013-09-09 00:21:36	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 00:21:36	-->	kini (kini@unaffiliated/kini) has joined #haskell
2013-09-09 00:21:36	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-09 00:21:36	-->	dexter2 (~dexter3@71-212-130-174.hlrn.qwest.net) has joined #haskell
2013-09-09 00:21:36	-->	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	dyreshark (~dyreshark@198.199.76.106) has joined #haskell
2013-09-09 00:21:36	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-09 00:21:36	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-09 00:21:36	-->	Puffton (~Puffton@s213-103-201-120.cust.tele2.se) has joined #haskell
2013-09-09 00:21:36	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-09 00:21:36	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-09-09 00:21:36	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-09-09 00:21:36	-->	Eridius|korea (~kevin@unaffiliated/eridius) has joined #haskell
2013-09-09 00:21:36	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-09-09 00:21:36	-->	rasmusto (~trasmuss@li519-146.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	arkeet (arkeet@unaffiliated/arkeet) has joined #haskell
2013-09-09 00:21:36	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-09-09 00:21:36	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-09 00:21:36	-->	eataix (~eataix@unaffiliated/eataix) has joined #haskell
2013-09-09 00:21:36	-->	Guest74748 (~mee@li94-42.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-09-09 00:21:36	-->	shachaf (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-09-09 00:21:36	-->	hfaafb (~hfaafb@misadventuregames.com) has joined #haskell
2013-09-09 00:21:36	-->	SoupE (~jloos@f055201003.adsl.alicedsl.de) has joined #haskell
2013-09-09 00:21:36	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-09 00:21:36	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-09 00:21:36	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-09 00:21:36	-->	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has joined #haskell
2013-09-09 00:21:36	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-09-09 00:21:36	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-09 00:21:36	-->	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-09 00:21:36	-->	ismlages (~ismlages@212.174.109.55) has joined #haskell
2013-09-09 00:21:36	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-09-09 00:21:36	-->	LAMMJohnson (~ja@user-5af43c0f.broadband.tesco.net) has joined #haskell
2013-09-09 00:21:36	-->	watermind (~wm@2.80.223.243) has joined #haskell
2013-09-09 00:21:36	-->	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-09 00:21:36	-->	ziman (~ziman@functor.sk) has joined #haskell
2013-09-09 00:21:36	-->	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has joined #haskell
2013-09-09 00:21:36	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-09 00:21:36	-->	Eduard_Munteanu (~EduardMun@188.25.92.116) has joined #haskell
2013-09-09 00:21:36	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-09 00:21:36	-->	ISF (~ivan@201.82.138.219) has joined #haskell
2013-09-09 00:21:36	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-09 00:21:36	-->	hexagoxel (~hexagoxel@kiel-4d06658c.pool.mediaWays.net) has joined #haskell
2013-09-09 00:21:36	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-09-09 00:21:36	-->	TheRealPygo (~Pygosceli@kiel-d9bfc4b0.pool.mediaWays.net) has joined #haskell
2013-09-09 00:21:36	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-09 00:21:36	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-09-09 00:21:36	-->	serban (serban@notromania.com) has joined #haskell
2013-09-09 00:21:36	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-09-09 00:21:36	-->	shiona (shiona@shiona.tontut.fi) has joined #haskell
2013-09-09 00:21:36	-->	liori (~liori@slarti.exroot.org) has joined #haskell
2013-09-09 00:21:36	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-09 00:21:36	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-09 00:21:36	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-09 00:21:36	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-09 00:21:36	-->	davorb-cellphone (~davorb-ce@194.47.245.35) has joined #haskell
2013-09-09 00:21:36	-->	bestzdneirf (petterrav@2001:470:6bd1::) has joined #haskell
2013-09-09 00:21:36	-->	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has joined #haskell
2013-09-09 00:21:36	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-09 00:21:36	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-09 00:21:36	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-09 00:21:36	-->	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has joined #haskell
2013-09-09 00:21:36	-->	babalone (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:21:36	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	Spockz (~alessandr@thalion.alessandrovermeulen.me) has joined #haskell
2013-09-09 00:21:36	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-09-09 00:21:36	-->	erisco (~erisco@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 00:21:36	-->	n00dle (~n00dle@unaffiliated/n00dle) has joined #haskell
2013-09-09 00:21:36	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-09 00:21:36	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-09 00:21:36	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-09 00:21:36	-->	dlnx` (~dlnx@hackerspace.pl) has joined #haskell
2013-09-09 00:21:36	-->	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-09 00:21:36	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-09 00:21:36	-->	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-09 00:21:36	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	julmae (~no@141.255.164.89) has joined #haskell
2013-09-09 00:21:36	-->	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has joined #haskell
2013-09-09 00:21:36	-->	canissimia (~canissimi@unaffiliated/canissimia) has joined #haskell
2013-09-09 00:21:36	-->	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has joined #haskell
2013-09-09 00:21:36	-->	Redz (~red@82.113.106.12) has joined #haskell
2013-09-09 00:21:36	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-09 00:21:36	-->	pavonia (~user@p5B14C5C4.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:21:36	-->	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has joined #haskell
2013-09-09 00:21:36	-->	oleo (~oleo@xdsl-78-35-176-124.netcologne.de) has joined #haskell
2013-09-09 00:21:36	-->	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has joined #haskell
2013-09-09 00:21:36	-->	hellome (~lua@192.73.239.25) has joined #haskell
2013-09-09 00:21:36	-->	jroesch (~jared@chips.whatbox.ca) has joined #haskell
2013-09-09 00:21:36	-->	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has joined #haskell
2013-09-09 00:21:36	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-09 00:21:36	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-09 00:21:36	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-09 00:21:36	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-09 00:21:36	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-09-09 00:21:36	-->	dubsg (~dubsg@2601:9:5b00:10d:9cc8:99ce:34dc:80e3) has joined #haskell
2013-09-09 00:21:36	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 00:21:36	-->	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-09 00:21:36	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-09 00:21:36	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-09 00:21:36	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-09 00:21:36	-->	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has joined #haskell
2013-09-09 00:21:36	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-09 00:21:36	-->	agumonkey (~agu@170.158.70.86.rev.sfr.net) has joined #haskell
2013-09-09 00:21:36	-->	earthy (~arthurvl@illipe.xs4all.nl) has joined #haskell
2013-09-09 00:21:36	-->	tero- (~tero@core.feriko.fi) has joined #haskell
2013-09-09 00:21:36	-->	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has joined #haskell
2013-09-09 00:21:36	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-09 00:21:36	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-09 00:21:36	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-09 00:21:36	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-09 00:21:36	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-09 00:21:36	-->	DustyDingo (~nonamen@atommuell.mum.jku.at) has joined #haskell
2013-09-09 00:21:36	-->	necroyet1 (~rthc@phire.org) has joined #haskell
2013-09-09 00:21:36	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-09-09 00:21:36	-->	jamwt1 (~jamwt@sherlock.jamwt.com) has joined #haskell
2013-09-09 00:21:36	-->	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2013-09-09 00:21:36	-->	Counter-Strike (~abc@mailsh7.xs4all.nl) has joined #haskell
2013-09-09 00:21:36	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-09 00:21:36	-->	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-09 00:21:36	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-09 00:21:36	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 00:21:36	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-09 00:21:36	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-09 00:21:36	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-09 00:21:36	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 00:21:36	-->	tac (~tac-tics@38.115.166.202) has joined #haskell
2013-09-09 00:21:36	-->	ekipan (4b1375b0@gateway/web/freenode/ip.75.19.117.176) has joined #haskell
2013-09-09 00:21:36	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2013-09-09 00:21:36	-->	AleXoundOS (~AleXoundO@188.244.39.153) has joined #haskell
2013-09-09 00:21:36	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 00:21:36	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-09 00:21:36	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	akiress (~weechat@pdpc/supporter/student/akiress) has joined #haskell
2013-09-09 00:21:36	-->	akurei_ (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-09 00:21:36	-->	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-09 00:21:36	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-09 00:21:36	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-09 00:21:36	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 00:21:36	-->	toddaaro (~toddaaro@opprobrio.us) has joined #haskell
2013-09-09 00:21:36	-->	Yaniel (yaniel@evo.paivola.fi) has joined #haskell
2013-09-09 00:21:36	-->	Sonarpulse (~user@unaffiliated/sonarpulse) has joined #haskell
2013-09-09 00:21:36	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-09 00:21:36	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-09 00:21:36	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-09 00:21:36	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-09 00:21:36	-->	marchdown (~marchdown@91.200.224.77) has joined #haskell
2013-09-09 00:21:36	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-09 00:21:36	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-09 00:21:36	-->	crs__ (~crs_@192.210.215.64) has joined #haskell
2013-09-09 00:21:36	-->	Dashkal_ (~dashkal@unaffiliated/dashkal) has joined #haskell
2013-09-09 00:21:36	-->	luite_ (~luite@luite.com) has joined #haskell
2013-09-09 00:21:36	-->	mortberg_ (~mortberg@c-46-162-99-51.cust.bredband2.com) has joined #haskell
2013-09-09 00:21:36	-->	cajla_ (~cajla@faust.lysator.liu.se) has joined #haskell
2013-09-09 00:21:36	-->	kaol_ (kaol@piperka.net) has joined #haskell
2013-09-09 00:21:36	-->	frontend1oader (~mst@tomservo.robotrollcall.org) has joined #haskell
2013-09-09 00:21:36	-->	Boney_ (~paul@ppp118-209-98-12.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 00:21:36	-->	yeltzooo6 (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	tehroflmaoer (~tehroflma@199.101.99.208) has joined #haskell
2013-09-09 00:21:36	-->	joelb (~textual@c-67-160-197-137.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:21:36	-->	betawaffle (~betawaffl@ec2-174-129-19-107.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:36	-->	Will| (~wrboyce@88.198.95.211) has joined #haskell
2013-09-09 00:21:36	-->	ivan\ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-09-09 00:21:36	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-09 00:21:36	-->	paddymahoney (~paddymaho@24.137.221.230) has joined #haskell
2013-09-09 00:21:36	-->	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has joined #haskell
2013-09-09 00:21:36	-->	boegel|work (~boegel@ca60c171.ugent.be) has joined #haskell
2013-09-09 00:21:36	-->	thomassgn (~thomas@browniehive.net) has joined #haskell
2013-09-09 00:21:36	-->	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 00:21:36	-->	toltolt (~Kevin@209.65.15.42) has joined #haskell
2013-09-09 00:21:36	-->	daniel-s_ (~daniel-s@2001:388:608c:4c40:f9d8:3bf9:361a:1c6f) has joined #haskell
2013-09-09 00:21:36	-->	gilbertw1 (~gilbertw1@192.241.174.128) has joined #haskell
2013-09-09 00:21:44	Twey	yitz: A Font dialog?
2013-09-09 00:21:48	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-09 00:21:48	-->	relrod (relrod@nat/redhat/x-nceilrfnxscwhpbt) has joined #haskell
2013-09-09 00:21:48	-->	confound (~hdp@glaive.weftsoar.net) has joined #haskell
2013-09-09 00:21:48	-->	sunnavy (~sunnavy@li50-215.members.linode.com) has joined #haskell
2013-09-09 00:21:48	-->	Sunhay (~ssbasi@sunhay.com) has joined #haskell
2013-09-09 00:21:48	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-09-09 00:21:48	-->	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has joined #haskell
2013-09-09 00:21:48	-->	fikusz (~fikusz@catv-89-132-137-62.catv.broadband.hu) has joined #haskell
2013-09-09 00:21:48	-->	jrslepak (~jrslepak@129.10.117.249) has joined #haskell
2013-09-09 00:21:48	-->	gereedy (geoff@mania.programmer-monk.net) has joined #haskell
2013-09-09 00:21:48	-->	brixen (~brixen@208.68.39.152) has joined #haskell
2013-09-09 00:21:48	-->	Kruppe (~jcp@laforge.cs.uwaterloo.ca) has joined #haskell
2013-09-09 00:21:48	-->	mrowe_away (~mrowe@72.249.82.46) has joined #haskell
2013-09-09 00:21:48	-->	lunarjar (~lunarjar@2605:6400:1:fed5:22:f924:6051:57c8) has joined #haskell
2013-09-09 00:21:48	-->	warpy (uid1398@gateway/web/irccloud.com/x-ajrctoipxoluagap) has joined #haskell
2013-09-09 00:21:48	-->	orospakr (~orospakr@mobotropolis.orospakr.ca) has joined #haskell
2013-09-09 00:21:48	-->	tunixman (~tunixman@serenity.tunixman.com) has joined #haskell
2013-09-09 00:21:48	-->	ibotty (~tob@91-64-188-219-dynip.superkabel.de) has joined #haskell
2013-09-09 00:21:48	-->	bens (~bens@www.typius.net) has joined #haskell
2013-09-09 00:21:48	-->	mrd (~md@debian/developer/mrd) has joined #haskell
2013-09-09 00:21:48	-->	bsmt (~i@209.141.41.20) has joined #haskell
2013-09-09 00:21:48	-->	Enigmagic (~nathan@unaffiliated/enigmagic) has joined #haskell
2013-09-09 00:21:48	-->	davorak (~ubuntu@ec2-50-17-231-113.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:21:48	-->	Hafydd (~Hafydd@unaffiliated/joo) has joined #haskell
2013-09-09 00:21:55	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (Remote host closed the connection)
2013-09-09 00:21:57	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-09 00:21:58	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 00:21:58	Twey	That's not an input method, is it?
2013-09-09 00:21:58	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-09 00:21:59	Peaker	jmcarthur: the extra power transformers have over effect systems seems to be a showstopper to me..   ListT (t m)  vs:  t (ListT m)  is an important distinction.   So I find it weird so many prominent people I respect in the FP world are working on the effect system direction
2013-09-09 00:22:29	-->	jbauman (~jbauman@108-214-96-152.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 00:22:29	-->	lightquake (~lightquak@li363-105.members.linode.com) has joined #haskell
2013-09-09 00:22:29	-->	chrisbuchholz_ (~chrisbuch@li189-30.members.linode.com) has joined #haskell
2013-09-09 00:22:29	-->	ccasin_ (~ccasin@GRW565-3.cis.upenn.edu) has joined #haskell
2013-09-09 00:22:29	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-09 00:22:29	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-09 00:22:29	-->	jlamothe_ (~jlamothe@jlamothe.net) has joined #haskell
2013-09-09 00:22:29	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 00:22:29	-->	LeNsTR (~lenstr@master.qs.biz) has joined #haskell
2013-09-09 00:22:29	-->	shesek (~shesek@87.68.18.255.cable.012.net.il) has joined #haskell
2013-09-09 00:22:29	-->	twopoint718 (~chris@fsf/member/twopoint718) has joined #haskell
2013-09-09 00:22:29	-->	dsantiago (~dsantiago@cpe-76-166-214-180.socal.res.rr.com) has joined #haskell
2013-09-09 00:22:29	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-09 00:22:29	-->	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has joined #haskell
2013-09-09 00:22:29	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-09 00:22:29	-->	thunderrd (~thunderrd@119.42.79.179) has joined #haskell
2013-09-09 00:22:29	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-09 00:22:29	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 00:22:29	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-09-09 00:22:29	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-09 00:22:29	-->	go|dfish (goldfish@nat/dcunetworkingsociety/x-jfwdsjjzqmzplavb) has joined #haskell
2013-09-09 00:22:29	-->	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has joined #haskell
2013-09-09 00:22:29	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-09 00:22:29	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-09 00:22:29	-->	wojtekM_ (~user@78.9.7.170) has joined #haskell
2013-09-09 00:22:29	-->	stelleg (~stelleg@c-68-35-148-72.hsd1.nm.comcast.net) has joined #haskell
2013-09-09 00:22:29	-->	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-09 00:22:29	-->	noam_ (~noam@213.57.201.130) has joined #haskell
2013-09-09 00:22:29	-->	xinming (~xinming@113.248.66.41) has joined #haskell
2013-09-09 00:22:29	-->	Tarential (~Tarential@li421-205.members.linode.com) has joined #haskell
2013-09-09 00:22:29	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:22:29	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:22:29	-->	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has joined #haskell
2013-09-09 00:22:29	-->	Licenser (~Licenser@82.210.31.101.rev.worldbone.de) has joined #haskell
2013-09-09 00:22:29	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 00:22:29	-->	td123 (~thomas-dz@archlinux/developer/td123) has joined #haskell
2013-09-09 00:22:29	-->	totte (~totte@unaffiliated/totte) has joined #haskell
2013-09-09 00:22:29	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-09 00:22:29	-->	statusfailed (~statusfai@statusfailed.com) has joined #haskell
2013-09-09 00:22:29	-->	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has joined #haskell
2013-09-09 00:22:29	-->	effy (~quassel@222.131.154.131) has joined #haskell
2013-09-09 00:22:29	-->	peltchu_ (~xel@pi.xel.fi) has joined #haskell
2013-09-09 00:22:29	-->	monochrom (monokrom@toronto-hs-216-138-220-146.s-ip.magma.ca) has joined #haskell
2013-09-09 00:22:29	-->	wormphlegm (~wormphleg@24.130.9.50) has joined #haskell
2013-09-09 00:22:29	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-09 00:22:29	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 00:22:29	-->	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:22:29	-->	robinbb (~robinbb-f@li234-110.members.linode.com) has joined #haskell
2013-09-09 00:22:29	-->	rpenguin (rpenguin@cipherstroke.com) has joined #haskell
2013-09-09 00:22:29	-->	tessier (~treed@kernel-panic/copilotco) has joined #haskell
2013-09-09 00:22:29	-->	stiell (~stian@fsf/member/stiell) has joined #haskell
2013-09-09 00:22:29	-->	tew88- (~tom@176.56.237.134) has joined #haskell
2013-09-09 00:22:29	-->	theorbtwo (~theorb@91.84.53.6) has joined #haskell
2013-09-09 00:22:29	-->	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has joined #haskell
2013-09-09 00:22:29	-->	zacts (~zacts@unaffiliated/zacts) has joined #haskell
2013-09-09 00:22:29	-->	jdoliner (~jdoliner@173-228-89-104.dsl.static.sonic.net) has joined #haskell
2013-09-09 00:22:29	-->	cjay (cjay@nerdbox.nerd2nerd.org) has joined #haskell
2013-09-09 00:22:29	-->	Excedrin (~Excedrin@baz.lerp.com) has joined #haskell
2013-09-09 00:22:29	-->	Lemmih (~lemmih@37.157.250.50) has joined #haskell
2013-09-09 00:22:29	-->	McManiaC (~mcmaniac@nils.cc) has joined #haskell
2013-09-09 00:22:29	-->	FalconKirtaran2 (~FalconKir@anon-38-182.vpn.ipredator.se) has joined #haskell
2013-09-09 00:22:29	-->	jzelinskie (~ubuntu@ec2-54-226-8-57.compute-1.amazonaws.com) has joined #haskell
2013-09-09 00:22:29	-->	neptunepink (~root@adsl-99-105-53-81.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 00:22:29	-->	SirChurchill (~mrshankly@37.139.2.6) has joined #haskell
2013-09-09 00:22:29	-->	doshitan (~doshitan@ip68-102-199-178.ks.ok.cox.net) has joined #haskell
2013-09-09 00:22:29	-->	MasseR (~masse@82.192.74.13) has joined #haskell
2013-09-09 00:22:29	-->	Nimatek (~x@unaffiliated/nimatek) has joined #haskell
2013-09-09 00:22:29	-->	jb55 (~jb55@174.143.211.135) has joined #haskell
2013-09-09 00:22:29	-->	elgot (~elgot@c-a0c3e455.017-362-6c6b701.cust.bredbandsbolaget.se) has joined #haskell
2013-09-09 00:22:29	-->	OrangeDu1k (~orangeduc@li143-4.members.linode.com) has joined #haskell
2013-09-09 00:22:29	-->	notdan (~h@unaffiliated/notdan) has joined #haskell
2013-09-09 00:22:29	-->	kosmikus (~kosmikus@luiiise.kosmikus.org) has joined #haskell
2013-09-09 00:22:29	-->	KyleCloud (uid12278@gateway/web/irccloud.com/x-ptzxllbtxaotgnyd) has joined #haskell
2013-09-09 00:22:29	-->	jodaro (uid5995@gateway/web/irccloud.com/x-gizrzrfmtvfjifce) has joined #haskell
2013-09-09 00:22:29	-->	charlesofarrell_ (uid7413@gateway/web/irccloud.com/x-tggjofjxionrjdtc) has joined #haskell
2013-09-09 00:22:29	-->	puzza007 (uid127@gateway/web/irccloud.com/x-xvovdqykqgejvjze) has joined #haskell
2013-09-09 00:22:29	-->	xplat (~james@67.205.253.166) has joined #haskell
2013-09-09 00:22:29	-->	lambdaTerrorist (~otk@unaffiliated/xenocons) has joined #haskell
2013-09-09 00:22:29	-->	simon (~simon@hypnos.pronoia.dk) has joined #haskell
2013-09-09 00:22:29	-->	tulcod (~tulcod@31.25.98.155) has joined #haskell
2013-09-09 00:22:29	-->	adimit (~adimit@ardanah.baconseed.org) has joined #haskell
2013-09-09 00:22:29	-->	threedaymonk (~threedaym@surimi.vm.bytemark.co.uk) has joined #haskell
2013-09-09 00:22:29	-->	xnyhps (~xnyhps@s.xnyhps.nl) has joined #haskell
2013-09-09 00:22:29	-->	drewr (~drewr@valve.draines.com) has joined #haskell
2013-09-09 00:22:29	-->	quicksilver (~jules@roobarb.crazydogs.org) has joined #haskell
2013-09-09 00:22:55	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-09 00:22:55	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-09 00:22:55	-->	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-09 00:22:55	-->	pcapriot` (~paolo@176.248.81.35) has joined #haskell
2013-09-09 00:22:55	-->	ejls_ (~Epsilon01@mszy.fr) has joined #haskell
2013-09-09 00:22:55	-->	knz_ (~kena@82-170-42-189.ip.telfort.nl) has joined #haskell
2013-09-09 00:22:55	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-09-09 00:22:55	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-09 00:22:55	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 00:22:55	-->	Polarina (~polarina@wesnoth/translator/Polarina) has joined #haskell
2013-09-09 00:22:55	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-09 00:22:55	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:22:55	-->	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 00:22:55	-->	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has joined #haskell
2013-09-09 00:22:55	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-09 00:22:55	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-09 00:22:55	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 00:22:55	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 00:22:55	-->	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-09 00:22:55	-->	hc (hc@public.chaos.hg.tu-darmstadt.de) has joined #haskell
2013-09-09 00:22:55	-->	cdidd (~cdidd@128-68-139-216.broadband.corbina.ru) has joined #haskell
2013-09-09 00:22:55	-->	ReinH (~reinh@li14-106.members.linode.com) has joined #haskell
2013-09-09 00:22:55	-->	talzeus_ (~studybot_@113.37.230.101) has joined #haskell
2013-09-09 00:22:55	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-09 00:22:55	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 00:22:55	-->	transfinite (~ecc@unaffiliated/transfinite) has joined #haskell
2013-09-09 00:22:55	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-09-09 00:22:55	-->	threestrikes (~wontez@ltea-047-066-103-099.pools.arcor-ip.net) has joined #haskell
2013-09-09 00:22:55	-->	tov (~tov@eecs-login.seas.harvard.edu) has joined #haskell
2013-09-09 00:22:55	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-09 00:22:55	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-09-09 00:22:55	-->	wagle (~wagle@static-50-43-34-150.bvtn.or.frontiernet.net) has joined #haskell
2013-09-09 00:22:55	-->	poucet_ (~chris@li23-146.members.linode.com) has joined #haskell
2013-09-09 00:22:55	-->	adlan (~AAFR@aafr.me) has joined #haskell
2013-09-09 00:22:55	-->	cl_away (~clahey@208.91.2.2) has joined #haskell
2013-09-09 00:22:55	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-09-09 00:22:55	-->	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-09-09 00:22:55	-->	newsham (~chat@udp217044uds.hawaiiantel.net) has joined #haskell
2013-09-09 00:22:55	-->	tromp (~tromp@rtc35-148.rentec.com) has joined #haskell
2013-09-09 00:22:55	-->	ido (~ido@pdpc/supporter/student/ido) has joined #haskell
2013-09-09 00:22:55	-->	ivan` (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-09-09 00:22:55	-->	hpc (~juzz@ip98-169-42-110.dc.dc.cox.net) has joined #haskell
2013-09-09 00:22:55	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-09 00:22:55	-->	banseljaj (~imami@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 00:22:55	-->	matthavener (~matt@matthavener.com) has joined #haskell
2013-09-09 00:22:55	-->	Ikarus (~ikarus@ip51cdc735.speed.planet.nl) has joined #haskell
2013-09-09 00:22:55	-->	wting (~wting@192.241.232.101) has joined #haskell
2013-09-09 00:22:55	-->	b_jonas (~x@russell2.math.bme.hu) has joined #haskell
2013-09-09 00:22:55	-->	guymann (~c@unaffiliated/guymann) has joined #haskell
2013-09-09 00:22:55	-->	ofan (~ofan@unaffiliated/ofan) has joined #haskell
2013-09-09 00:22:55	-->	helgikrs (~helgikrs@89.17.128.56) has joined #haskell
2013-09-09 00:22:55	-->	Bynbo7 (~Axman6@pdpc/supporter/student/Axman6) has joined #haskell
2013-09-09 00:22:55	-->	neektza1 (~neektza@marvin.kset.org) has joined #haskell
2013-09-09 00:22:55	-->	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-09 00:22:55	-->	dsp_ (~dsp@technoanimal.net) has joined #haskell
2013-09-09 00:22:55	-->	brandonw (~brandonw@24-181-232-41.dhcp.oxfr.ma.charter.com) has joined #haskell
2013-09-09 00:22:55	-->	Jaak (~foo@84.50.244.132) has joined #haskell
2013-09-09 00:22:55	-->	jang (~granjan@nat/hp/x-xzfhesuewfohpejm) has joined #haskell
2013-09-09 00:22:55	-->	mroman (~roman2@fmnssun.ibone.ch) has joined #haskell
2013-09-09 00:22:55	-->	lieven_ (mal@ks24170.kimsufi.com) has joined #haskell
2013-09-09 00:22:55	-->	finnrobi (~robb@notlupus.info) has joined #haskell
2013-09-09 00:22:55	-->	ggreg (~ggreg@int.0x80.net) has joined #haskell
2013-09-09 00:22:55	-->	tauntaun (~Anthony@li327-197.members.linode.com) has joined #haskell
2013-09-09 00:22:55	-->	gdeest (~gael@ns357861.ovh.net) has joined #haskell
2013-09-09 00:22:55	-->	zaphar_ps (~zaphar@blender/coder/Zaphar-ps) has joined #haskell
2013-09-09 00:22:55	-->	stvc (~quassel@192.241.166.39) has joined #haskell
2013-09-09 00:22:55	-->	satshaba1 (~root@198.199.67.210) has joined #haskell
2013-09-09 00:22:55	-->	vvv (~vvv@mediawiki/VasilievVV) has joined #haskell
2013-09-09 00:22:55	-->	divarvel (~clement@beg-ar-loge.delafargue.name) has joined #haskell
2013-09-09 00:22:55	-->	petantik (~oz@unaffiliated/ceezer) has joined #haskell
2013-09-09 00:22:55	-->	upgrayeddd (uid2969@gateway/web/irccloud.com/x-spwbdopgfsaxucfx) has joined #haskell
2013-09-09 00:22:55	-->	bobry (uid4445@gateway/web/irccloud.com/x-owhdcpjeoijrtdkj) has joined #haskell
2013-09-09 00:22:55	-->	mechairoi (~mechairoi@www20325ue.sakura.ne.jp) has joined #haskell
2013-09-09 00:22:55	-->	RevJohnnyHealey (~rev@173.45.227.35) has joined #haskell
2013-09-09 00:22:55	-->	Tinned_Tuna (~turner@176.58.90.210) has joined #haskell
2013-09-09 00:22:55	-->	Riussi (~riussi@codemancers.fi) has joined #haskell
2013-09-09 00:22:55	-->	k4nar (~quassel@ks3262633.kimsufi.com) has joined #haskell
2013-09-09 00:22:55	-->	bentrevor (uid11649@gateway/web/irccloud.com/x-vxnwwndysfdjqxga) has joined #haskell
2013-09-09 00:22:55	-->	Vertue (uid10621@gateway/web/irccloud.com/x-hwpqbrfhqzhtynha) has joined #haskell
2013-09-09 00:22:55	-->	so (shawn@unaffiliated/so) has joined #haskell
2013-09-09 00:22:55	-->	anhall (mprencipe@217.30.184.161) has joined #haskell
2013-09-09 00:22:55	-->	FUZxxl (~fuz@d00m.org) has joined #haskell
2013-09-09 00:22:55	-->	Raynes (~macro@unaffiliated/raynes) has joined #haskell
2013-09-09 00:22:55	-->	alej (~alej@karsten.ucsd.edu) has joined #haskell
2013-09-09 00:22:55	-->	brett (~brett@rdnzl.net) has joined #haskell
2013-09-09 00:22:55	-->	noplamodo (~noplamodo@unaffiliated/noplamodo) has joined #haskell
2013-09-09 00:22:55	-->	Elision (~mustelide@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 00:22:55	-->	kranius (~kranius@88-191-231-119.rev.dedibox.fr) has joined #haskell
2013-09-09 00:22:55	-->	thoughtpolice (~a@unaffiliated/thoughtpolice) has joined #haskell
2013-09-09 00:22:55	-->	bgamari (~bgamari@pool-108-8-228-201.spfdma.east.verizon.net) has joined #haskell
2013-09-09 00:22:55	-->	xaimus (identsucks@spacedoggle.com) has joined #haskell
2013-09-09 00:23:02	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Quit: Leaving)
2013-09-09 00:23:06	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (Remote host closed the connection)
2013-09-09 00:23:07	<--	hive-mind (pranq@unaffiliated/contempt) has quit (Ping timeout: 240 seconds)
2013-09-09 00:23:09	yitz	Twey: sorry, right, not that one. The Special Characters dialog.
2013-09-09 00:23:10	-->	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-09 00:23:11	<--	go|dfish (goldfish@nat/dcunetworkingsociety/x-jfwdsjjzqmzplavb) has quit (Max SendQ exceeded)
2013-09-09 00:23:12	<--	satc (~smuxi@202.3.77.239) has quit (Excess Flood)
2013-09-09 00:23:12	Cale	Peaker: I find that really weird as well.
2013-09-09 00:23:12	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Max SendQ exceeded)
2013-09-09 00:23:12	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (Ping timeout: 256 seconds)
2013-09-09 00:23:12	Cale	and I don't even particularly like monad transformers
2013-09-09 00:23:12	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-09 00:23:12	Twey	I thought I was just horribly misunderstanding that.
2013-09-09 00:23:12	--	sferry is now known as Guest42080
2013-09-09 00:23:13	watermind	jmcarthur: I'm not sure if I follow that argument (of sometimes having to switch to monad transformers)...  sometimes you implement a non-monadic function but then you have to switch to monadic code, and sometimes you start with just having a monad but than having to implement transformers and add layers
2013-09-09 00:23:13	Twey	yitz: What is it?
2013-09-09 00:23:13	-->	go|dfish (goldfish@nat/dcunetworkingsociety/x-pyrronykxdjjyaft) has joined #haskell
2013-09-09 00:23:13	<--	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has quit (Read error: Connection reset by peer)
2013-09-09 00:23:13	Twey	yitz: You can enter ‘extended’ characters using sequences with the Option key, I think, but it requires some setup to be usable
2013-09-09 00:23:14	erisco	Twey, it is too clever for me :)
2013-09-09 00:23:14	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-09 00:23:14	-->	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-09 00:23:14	-->	hive-mind (pranq@unaffiliated/contempt) has joined #haskell
2013-09-09 00:23:14	Cale	watermind: Well, but the switch to using some monad will be nontrivial precisely because you'll have to encode all the information about ordering which wasn't present in the pure code.
2013-09-09 00:23:14	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-09 00:23:15	-->	Apocalisp (~textual@ip-64-134-174-142.public.wayport.net) has joined #haskell
2013-09-09 00:23:15	watermind	jmcarthur: it's all a matter of needs... sometimes all those layers you need to peel are useful, sometime they just make reasoning about the code harder
2013-09-09 00:23:15	-->	jayne (~jayne@freenode/staff/jayne) has joined #haskell
2013-09-09 00:23:15	yitz	Twey: the fn keys does something too. i never learned about all that stuff. i usually just use emacs when i need unicode characters that i don't know how to type.
2013-09-09 00:23:15	<--	watermind (~wm@2.80.223.243) has quit (Quit: Konversation terminated!)
2013-09-09 00:23:15	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-09 00:23:15	<--	chexxor (uid1596@gateway/web/irccloud.com/x-lfxwddnshcnulwmh) has quit (Ping timeout: 245 seconds)
2013-09-09 00:23:15	-->	watermind (~wm@2.80.223.243) has joined #haskell
2013-09-09 00:23:15	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-09 00:23:15	Twey	erisco: Pointedly, it's: zip [1 ..] [ (a, b) | a ← as, b ← getBs a ]
2013-09-09 00:23:15	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has quit (Remote host closed the connection)
2013-09-09 00:23:16	k00mi	jmcarthur: if m is MonadReader, isn't (t m) aswell for all t?
2013-09-09 00:23:16	<--	satc (~smuxi@202.3.77.239) has quit (Excess Flood)
2013-09-09 00:23:16	k00mi	so would that really require a second Reader layer?
2013-09-09 00:23:16	Twey	yitz: *nod* That's why the Agda input method exists.  :þ
2013-09-09 00:23:17	erisco	Twey, that I can understand
2013-09-09 00:23:17	-->	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has joined #haskell
2013-09-09 00:23:17	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-09 00:23:17	Cale	Either you do that work all the time, up front -- and have to worry about sequencing even in code which you intend to be pure, because it might not always be so, or you allow for it to be deferred (as we do in Haskell), and sometimes have to pay up later.
2013-09-09 00:23:28	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 00:24:02	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 00:24:06	erisco	Twey, thanks
2013-09-09 00:24:11	<--	ahill-89 (~xander@99.36.41.91) has quit (Quit: leaving)
2013-09-09 00:24:13	Twey	erisco: No problem ☺
2013-09-09 00:24:26	<--	niteria_ (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (Client Quit)
2013-09-09 00:24:28	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 264 seconds)
2013-09-09 00:24:30	Peaker	Kinda funny cause Haskell is known for making you pay a bit more up-front to save costs later (thinking out good types to model your problem)
2013-09-09 00:24:43	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-09 00:24:46	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-09 00:24:48	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-09-09 00:24:51	<--	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 00:25:10	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-09 00:25:20	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 00:25:38	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-09 00:26:25	-->	blast_hardcheese (~blast_har@unaffiliated/blast-hardcheese/x-0199635) has joined #haskell
2013-09-09 00:26:32	jmcarthur	k00mi: they can be different kinds of readers
2013-09-09 00:27:08	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-09 00:27:28	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-09 00:28:38	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 00:28:42	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-09 00:29:15	yitz	k00mi: transformer libraries provide an automatic instance of MonadReader for t m for certain values of t. but the library author wrote out those instances by hand - it's not automaicly true.
2013-09-09 00:29:17	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-09 00:29:55	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 00:30:18	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-09 00:30:28	<--	agumonkey (~agu@170.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-09-09 00:31:03	-->	visof (~visof@197.132.255.225) has joined #haskell
2013-09-09 00:31:15	k00mi	I see, thanks
2013-09-09 00:31:56	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 00:32:09	<--	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has quit (Quit: Leaving)
2013-09-09 00:32:14	--	Caztiel is now known as Guest90045
2013-09-09 00:32:15	<--	Guest90045 (~me@unaffiliated/caztiel) has quit (Ping timeout: 260 seconds)
2013-09-09 00:32:52	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Remote host closed the connection)
2013-09-09 00:33:13	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-09 00:33:38	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 00:33:53	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-09 00:34:24	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 00:34:44	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 00:35:01	<--	pgiarrusso (~pgiarruss@dslb-188-097-076-083.pools.arcor-ip.net) has quit (Quit: pgiarrusso)
2013-09-09 00:35:52	<--	satc (~smuxi@202.3.77.239) has quit (Excess Flood)
2013-09-09 00:37:12	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-09 00:37:51	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 00:38:05	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-09 00:39:47	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 00:40:55	ocharles	mm_freak_: starting a little SDL framework for netwire
2013-09-09 00:41:04	<--	quchen (~quchen@p54AA43E4.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2013-09-09 00:41:13	erisco	I can't think of how I can possibly construct this structure between Rule and Prod http://lpaste.net/92759
2013-09-09 00:41:38	ocharles	mm_freak_: taking some hints off your gloss clock, I'm building up a 'Scene' which will be able to view differences between frames to minimize redrawing. then as scenes are a monoid, you should be able to build scenes up really fluidly
2013-09-09 00:41:43	erisco	in mutable land it would be trivial... at a loss otherwise
2013-09-09 00:41:45	ocharles	(and wires are monoids so you don't really have to think about wires at all)
2013-09-09 00:42:22	erisco	need [Prod] to make Rule, but each Prod needs Rule
2013-09-09 00:43:08	erisco	so perhaps I can't have prodRule be of type Rule... perhaps RuleID rather
2013-09-09 00:44:11	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-09 00:45:08	erisco	bleh have a rough idea of what might be done
2013-09-09 00:45:10	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 00:45:14	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (Ping timeout: 240 seconds)
2013-09-09 00:45:56	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 00:45:57	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 00:46:50	Twey	erisco: Generally, having some sort of unique identifier inside the data-type is an antipattern in Haskell
2013-09-09 00:47:18	<--	phst` (~user@ppp-88-217-0-190.dynamic.mnet-online.de) has quit (Read error: Operation timed out)
2013-09-09 00:47:31	erisco	Twey, what do you mean?
2013-09-09 00:47:32	Twey	It's better to just talk about the interesting data, then add IDs externally (via tuples or some other data-type) as necessary
2013-09-09 00:47:33	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-09 00:48:05	Peaker	Twey: I don't think that is workable in the general case
2013-09-09 00:48:16	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-09 00:48:21	Peaker	and it may add partiality (e.g: duplicating same sums "outside" of the type as you have inside it)
2013-09-09 00:48:26	erisco	well the issue isn't about the ids it is about the circular reference
2013-09-09 00:48:34	erisco	but after some more thought I think I can fix that
2013-09-09 00:48:58	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (Client Quit)
2013-09-09 00:48:59	<--	chaterz (Nerdwolrd@unaffiliated/chaterz) has quit
2013-09-09 00:49:12	Twey	erisco: The same applies, I think: have a [(Rule, [Prod])]
2013-09-09 00:49:45	<--	twopoint718 (~chris@fsf/member/twopoint718) has left #haskell
2013-09-09 00:49:50	Twey	Unless Prods may exist without a Rule, in which case you can use a [(Maybe Rule, [Prod])]
2013-09-09 00:50:12	Twey	(or better, Set (Maybe Rule, Set Prod))
2013-09-09 00:50:24	erisco	no I can make it work I think
2013-09-09 00:50:25	<--	lopex (uid4272@gateway/web/irccloud.com/x-jewaqnpafntjxlsu) has quit (Ping timeout: 245 seconds)
2013-09-09 00:50:31	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-09 00:50:32	Twey	Peaker: What ‘sums’ do you mean here?
2013-09-09 00:50:57	erisco	> [1..2]
2013-09-09 00:50:58	lambdabot	  [1,2]
2013-09-09 00:51:29	Peaker	Twey: data Foo = Foo { ... Either (SomeId, a) (OtherId, b) ... }
2013-09-09 00:51:41	<--	samrat (uid2534@gateway/web/irccloud.com/x-tkfylwcmmjtnanfj) has quit (Ping timeout: 245 seconds)
2013-09-09 00:51:46	Peaker	Twey: if you try to move "SomeId" and "OtherId" outside of Foo into some tuple or such, it will need to add partiality
2013-09-09 00:51:58	erisco	Twey, I dunno, it may be pointless later on, so I'll keep it in mind
2013-09-09 00:51:59	<--	Lefeni (~Lefeni@c-0941e555.143-16-64736c10.cust.bredbandsbolaget.se) has quit (Quit: Leaving)
2013-09-09 00:52:22	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (Ping timeout: 248 seconds)
2013-09-09 00:52:27	<--	Will| (~wrboyce@88.198.95.211) has quit (Ping timeout: 264 seconds)
2013-09-09 00:52:30	<--	driek (~drk@whiff.xentower.nl) has quit (Ping timeout: 245 seconds)
2013-09-09 00:52:30	<--	_flow_ (flow@star.freakempire.de) has quit (Ping timeout: 245 seconds)
2013-09-09 00:53:01	<--	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-09-09 00:53:05	-->	tommd (~tommd@ip-64-134-136-93.public.wayport.net) has joined #haskell
2013-09-09 00:53:06	Twey	Peaker: Wouldn't you move the whole Either out and parameterize the type, Either (SomeId, Foo a) (OtherId, Foo b) ?
2013-09-09 00:53:07	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-09-09 00:53:28	-->	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 00:53:33	-->	DRiKE (~drk@whiff.xentower.nl) has joined #haskell
2013-09-09 00:53:42	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Read error: Operation timed out)
2013-09-09 00:54:01	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 268 seconds)
2013-09-09 00:54:03	Peaker	Twey: but then you're moving other fields of Foo into the Either
2013-09-09 00:54:34	Peaker	Twey: this kind of encoding is going to cost you -- why not just have the id's inside Foo?
2013-09-09 00:54:45	<--	Targen (~iguana@190.73.206.135) has quit (Read error: Operation timed out)
2013-09-09 00:54:57	haasn	setup: At least the following dependencies are missing: base >=4.2 && <4.6
2013-09-09 00:54:59	 *	haasn cries
2013-09-09 00:55:00	-->	miclorb (~textual@ppp121-45-185-143.lns20.syd7.internode.on.net) has joined #haskell
2013-09-09 00:55:08	-->	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has joined #haskell
2013-09-09 00:55:18	--	mrowe_away is now known as mrowe
2013-09-09 00:55:45	Twey	Peaker: I'm not sure why I'd have an Either'd ID like that anyway; I suspect it's a substantially different use-case than the one I was thinking of (in which each distinct element is identified by a unique ID, rather than by uniqueness of its properties)
2013-09-09 00:56:06	<--	RThinker (~yegor@77.47.204.159) has quit (Read error: Operation timed out)
2013-09-09 00:56:21	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-09 00:56:51	Redz	is there a way to use guards in an expression far away from toplevel?
2013-09-09 00:57:00	Twey	Redz: where, or case
2013-09-09 00:57:04	<--	visof (~visof@197.132.255.225) has quit (Quit: Leaving)
2013-09-09 00:57:08	-->	Will| (~wrboyce@88.198.95.211) has joined #haskell
2013-09-09 00:57:10	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-09 00:57:15	Twey	Redz: case () of () | pat → res; …
2013-09-09 00:57:18	Peaker	Twey: We have a type inference engine where each subexpression in each inferred value/type has its own identity, and identities can be unified and such. AST elements refers to identities, and there are various structures with referrals to identities of other structures. I've never heard the claim that this kind of thing was an antipattern, and I don't see the reason it would be
2013-09-09 00:57:27	Twey	Redz: Or the recent extension, MultiWayIf
2013-09-09 00:57:31	erisco	Twey, I can say   rule = Rule ... productions; productions = [Prod ...  for example to get the circular ref
2013-09-09 00:57:47	erisco	this only seems to work in a one to many fashion
2013-09-09 00:57:54	Twey	erisco: I'm not saying you can't, just that it's a bad idea
2013-09-09 00:57:59	erisco	Twey, why?
2013-09-09 00:58:00	<--	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has quit (Quit: Leaving)
2013-09-09 00:58:11	Twey	Just experience
2013-09-09 00:58:16	-->	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has joined #haskell
2013-09-09 00:58:23	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 260 seconds)
2013-09-09 00:58:32	erisco	so you would rather (Rule, Prod) ?
2013-09-09 00:58:44	erisco	flatten it out as it were?
2013-09-09 00:59:21	erisco	the structure gets even more complex... each Prod has a list of ProdPart, and unfortuantely a ProdPart can also have a Rule :P
2013-09-09 00:59:29	Twey	Peaker: In GHC, you mean?
2013-09-09 00:59:32	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-09 00:59:40	erisco	I set this up without a Haskell mindset it seems
2013-09-09 00:59:45	Peaker	Twey: no, in Lamdu
2013-09-09 00:59:59	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-09 01:00:04	Redz	Twey: thank you. the alternative case pattern seems suitable.
2013-09-09 01:00:07	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 01:00:08	yitz	Redz: or let
2013-09-09 01:00:11	<--	makos_ (~makos@koln-4d0b506a.pool.mediaWays.net) has quit (Ping timeout: 268 seconds)
2013-09-09 01:00:15	<--	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 01:00:25	<--	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-09-09 01:00:38	erisco	Twey, but I can assign ids to everything before constructing the actual data
2013-09-09 01:00:41	Peaker	Twey: when "mutability" is a useful part of the algorithm, identities are important, and then I don't see why it'd be an anti-pattern to use those identities in arbitrary positions inside data structures
2013-09-09 01:00:43	<--	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has quit (Ping timeout: 260 seconds)
2013-09-09 01:00:46	Twey	Peaker: I usually see it where people come from OO languages with object identity, and want to simulate it in Haskell.  I'm not denying that there are cases where it's plausible, but I think it's something to be wary of for newbies.
2013-09-09 01:00:53	erisco	Twey, and can resolve the data through a Map or something
2013-09-09 01:01:09	haasn	mgsloan: how come GtkInteractive doesn't export ‘display’?
2013-09-09 01:01:14	haasn	(in toy-gtk)
2013-09-09 01:01:19	haasn	I can't seem to define my own instance..
2013-09-09 01:01:23	Peaker	Twey: sure, it can be over-used, as type-classes are, for example.. going as far as "defining new type classes is an anti-pattern" might be a bit much though :)
2013-09-09 01:01:38	Twey	True that :þ
2013-09-09 01:01:44	Twey	Poor choice of phrasing, sorry.
2013-09-09 01:01:58	mgsloan	haasn: GtkInteractive is a constraint synonym
2013-09-09 01:02:14	Twey	erisco: I don't know what you're trying to do, sorry.  Perhaps you'd care to explain the use-case a bit more?
2013-09-09 01:02:15	mgsloan	haasn: GtkDisplay does export "display", tho!
2013-09-09 01:02:16	haasn	oh, I just saw that myself
2013-09-09 01:02:18	yitz	Peaker: in my opinion classyprelude - where *everything* becomes a type class - is an antipattern.
2013-09-09 01:02:45	mgsloan	haasn: Glad someone's trying out that stuff!  Let me know if there're any tweaks you'd make / pull requests / etc
2013-09-09 01:02:51	haasn	oh no! Couldn't match expected type `gtk-0.12.4:Graphics.UI.Gtk.Types.DrawingArea' with actual type `gtk-0.12.4:Graphics.UI.Gtk.Types.DrawWindow
2013-09-09 01:02:53	erisco	Twey, this is the full structure: http://lpaste.net/92760
2013-09-09 01:02:54	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 01:02:55	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 264 seconds)
2013-09-09 01:03:12	erisco	Twey, that I was intending anyways... and then found out what a pain it would be to construct
2013-09-09 01:03:12	haasn	mgsloan: I guess I messed up badly?
2013-09-09 01:03:23	haasn	mgsloan: I just want to implement String -> IO () -- what's the simplest way?
2013-09-09 01:03:24	leroux	Oh, this is great. http://ro-che.info/ccc/22
2013-09-09 01:03:37	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 01:03:47	Peaker	yitz: I haven't tried it -- and it might go too far. But I think it's fair to say standard Prelude and most libraries don't go far enough..  lens ecosystem might rectify this
2013-09-09 01:03:47	haasn	mgsloan: here's what I thought http://bpaste.net/show/130664/ but apparently that isn't correct
2013-09-09 01:03:56	Twey	erisco: Is this an encoding of the T → x | y | z grammar notation?
2013-09-09 01:04:02	erisco	Twey, yes
2013-09-09 01:04:26	Peaker	yitz: I love "At" and some of the classy prelude classes ended up as lens classes too ("Map" -> "Each").
2013-09-09 01:04:36	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 260 seconds)
2013-09-09 01:04:50	Peaker	"At" and "Contains" kill so much of the Data.Map/Data.Set api's in one stroke
2013-09-09 01:04:55	-->	lopex (uid4272@gateway/web/irccloud.com/x-dwjywkfysatnunem) has joined #haskell
2013-09-09 01:05:21	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 01:05:27	erisco	Twey, right now my thought is that I can relax prodRule :: Rule to prodRule :: RuleID and RuleRef Rule to RuleRef RuleID
2013-09-09 01:05:28	Twey	erisco: Context-free?
2013-09-09 01:05:33	erisco	Twey, yes
2013-09-09 01:05:38	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Read error: Operation timed out)
2013-09-09 01:05:50	<--	thunderrd (~thunderrd@119.42.79.179) has quit (Ping timeout: 245 seconds)
2013-09-09 01:06:01	erisco	Twey, and I would relax them as so because I can calculate the IDs before constructing Rule, Prod, or ProdPart
2013-09-09 01:06:02	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-09 01:06:08	-->	_flow_ (flow@star.freakempire.de) has joined #haskell
2013-09-09 01:06:15	<--	nexx (nexx@unaffiliated/xxen) has quit (Ping timeout: 264 seconds)
2013-09-09 01:06:23	-->	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 01:06:24	erisco	and as you can see I intend there to be RuleID -> Rule and ProdID -> Prod mappings, so resolving the ids back to the actual data can be done
2013-09-09 01:06:28	Peaker	erisco: do you have "mutability" here, where you want a change to a Prod be visible to multiple rules who all point at that Prod?
2013-09-09 01:06:33	-->	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has joined #haskell
2013-09-09 01:06:37	mgsloan	haasn: There's two ways to do it.  The one I usually use is "defaultDisplay", and make an instance of Diagrammable.  I wrote this code before default method signatures, so I probably aught to make that a default
2013-09-09 01:06:59	mgsloan	haasn: The other way is to use "displayDiagram yourDiagram"
2013-09-09 01:07:06	haasn	I don't have defaultDisplay or displayDiagram
2013-09-09 01:07:10	erisco	Peaker, I did not intend any mutability, but I did come up with this model assuming the conveniences of mutability
2013-09-09 01:07:21	erisco	Peaker, ie I do not want mutability
2013-09-09 01:07:22	haasn	mgsloan: what packages are those defined in?
2013-09-09 01:07:30	Peaker	erisco: if you don't need mutability you can just define everything with actual pure references rather than explicit identities
2013-09-09 01:07:32	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 01:07:42	Peaker	erisco: as a cyclic data structure
2013-09-09 01:07:45	mgsloan	haasn: This one https://github.com/mgsloan/toy-gtk-diagrams  also check out these: https://github.com/mgsloan/toy-gtk-diagrams/tree/master/Examples
2013-09-09 01:07:50	erisco	Peaker, what do you mean?
2013-09-09 01:07:53	-->	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has joined #haskell
2013-09-09 01:08:18	-->	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has joined #haskell
2013-09-09 01:08:20	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 01:08:21	erisco	Peaker, I do not know how to construct the cyclic parts aside from the one-to-many of Rule to Prod
2013-09-09 01:08:34	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-09-09 01:08:44	haasn	mgsloan: oh god, this is a dependency nightmare
2013-09-09 01:08:50	haasn	I don't even have diagrams-contrib ;_;
2013-09-09 01:09:07	mgsloan	haasn: Yeah, toy and diagrams are both split among a few different packages
2013-09-09 01:09:09	haasn	mgsloan: it requires lens <0.10 is that intentional?
2013-09-09 01:09:11	hpaste	Twey revised “No title”: “CFGs (fixed)” at http://lpaste.net/92760
2013-09-09 01:09:23	Twey	erisco: Something like this?
2013-09-09 01:09:49	<--	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has quit (Read error: Connection reset by peer)
2013-09-09 01:09:49	mgsloan	haasn: Less than 3.10, yes
2013-09-09 01:10:18	haasn	mgsloan: have you tested it with 0.10?
2013-09-09 01:10:20	Peaker	erisco: oh, mutability is not the only reason you might need explicit identities. You might need to be able to discover cyclic references, and stop your loop. Do you need this ability?
2013-09-09 01:10:21	erisco	Twey, no
2013-09-09 01:10:39	Twey	erisco: Why not?
2013-09-09 01:10:56	mgsloan	haasn: I haven't.  I didn't realize that the head version of lens was 3.10
2013-09-09 01:10:57	Twey	That is, what algorithms are you using that would be unsuitable for that representation?
2013-09-09 01:11:12	erisco	Twey, sorry I missed that Production was a list
2013-09-09 01:11:15	haasn	mgsloan: ok. I'll test it and let you know once I manage to get diagrams-contrib to build
2013-09-09 01:11:15	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (Ping timeout: 245 seconds)
2013-09-09 01:11:19	mgsloan	Thanks!
2013-09-09 01:11:26	Twey	erisco: So did I, once ;)
2013-09-09 01:11:33	yitz	Peaker: i had to deal with a lot of code in our codebase that someone "upgraded" to classy prelude. it was a major loss of information that made it far less readable and maintainable, imo.
2013-09-09 01:11:33	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-09 01:11:36	<--	tel (~tel@c-24-126-82-81.hsd1.md.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 01:11:51	Twey	Huh, did I nuke your paste?
2013-09-09 01:12:05	erisco	Twey, well other than Production needs a name, this is roughly equivalent, but simply removes the cyclic references
2013-09-09 01:12:07	geekosaur	yep
2013-09-09 01:12:22	Twey	Why does that happen?  ☹
2013-09-09 01:12:25	erisco	Twey, and relies on [Char] equivalence ... which is what I'd do with the ID anyhow
2013-09-09 01:12:34	geekosaur	you used the wrong link
2013-09-09 01:12:38	Peaker	yitz: I partially blame the IDE situation though.  We only like monomorphic functions because when we have mono-types, we can't see that they are mono when used with generic functions. But good IDEs could make this apparent
2013-09-09 01:12:44	Twey	Seems a bit unsafe
2013-09-09 01:12:56	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-09 01:13:02	geekosaur	edit and annotate are different things. and yes, I kinda wish the edit page had a big warning on it
2013-09-09 01:13:02	yitz	Peaker: the prelude definitely needs a facelift though. basicprelude is a good first step. i just think classyprelude is a bad second step.
2013-09-09 01:13:24	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-09 01:13:25	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-09 01:13:25	-->	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has joined #haskell
2013-09-09 01:13:48	geekosaur	or maybe it should be immutable like haskell :p
2013-09-09 01:15:08	yitz	Peaker: i dunno. the beauty of haskell is its type system. knowing the exact type of each symbol, without a research project - or relying on an external ide - adds a huge amount of expressiveness to haskell code and is for me one of its major advantages.
2013-09-09 01:15:19	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-09 01:15:53	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-09 01:16:56	Peaker	yitz: OTOH, having code monomorphic to strict or lazy bytestrings for no good reason is very annoying
2013-09-09 01:17:00	merijn	Peaker: If you blame the IDE situation, get back to coding! ;)
2013-09-09 01:17:01	erisco	geekosaur, then you could not annotate either
2013-09-09 01:17:03	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-09 01:17:04	Ghoul_	best way to replace all of one thing in a list with another?
2013-09-09 01:17:08	erisco	geekosaur, without generating a new url :)
2013-09-09 01:17:12	Ghoul_	I've been using map but there's probably a better way
2013-09-09 01:17:12	Peaker	merijn: :-)
2013-09-09 01:17:17	geekosaur	but that's what annotate does!
2013-09-09 01:17:28	Peaker	yitz: also, stealing tons of names for various monomorphic instances rather than just 1 name is also bad
2013-09-09 01:17:29	erisco	nope same url
2013-09-09 01:17:31	mgsloan	haasn: Actually, ignore those examples, unfortunately - things changed a while back (new diagrams, namespace changes, etc) and I still need to update them
2013-09-09 01:17:31	Twey	erisco: The nameless representation would be soething like http://lpaste.net/92760
2013-09-09 01:17:34	geekosaur	noty exactly
2013-09-09 01:17:35	Twey	something**
2013-09-09 01:17:37	bergmark	Ghoul_: better in what way?
2013-09-09 01:17:46	Ghoul_	a more *proper* way maybe
2013-09-09 01:17:51	geekosaur	you can go to the annotation directly; the link is the url is original#rannotation
2013-09-09 01:17:56	Ghoul_	there doesn't seem be a function called `replace` though
2013-09-09 01:17:58	geekosaur	but you can go directly to annotation
2013-09-09 01:17:59	Peaker	merijn: I took on a short-term contracting project that's going to postpone my Lamdu work for a month or two :-(
2013-09-09 01:18:21	-->	thunderrd (~thunderrd@119.42.79.52) has joined #haskell
2013-09-09 01:18:30	yitz	Peaker: not to me. first of all, you just change the import. second - in my experience the lazy/strict distinction is usually significant and worthwhile to be easily visible in the code.
2013-09-09 01:18:44	Twey	erisco: (would be helpful if you could repaste the original, sorry — didn't realize I λpaste had no access control :þ)
2013-09-09 01:18:54	yitz	Peaker: the names are not stolen. use qualified imports.
2013-09-09 01:19:06	geekosaur	sory, it's a<post> not r<post> in the chain
2013-09-09 01:19:11	geekosaur	it's kinda weird
2013-09-09 01:19:23	merijn	Peaker: I did the opposite, I recently found an interesting phd position which will hopefully let me invest more time into haskell coding on my various projects \o/
2013-09-09 01:19:29	erisco	Twey, sure, done
2013-09-09 01:19:31	Peaker	yitz: Qualified imports effectively annotate the type everywhere -- which may be too verbose. an IDE can annotate better than that
2013-09-09 01:19:32	Twey	erisco: (and type Grammar = Rule if you want)
2013-09-09 01:19:32	enthropy	merijn: you did robotics with haskell at some point?
2013-09-09 01:19:34	merijn	Peaker: This is, of course, assuming I actually get the job >.>
2013-09-09 01:19:44	yitz	merijn: oh that's great news!
2013-09-09 01:19:45	Peaker	merijn: cool :)
2013-09-09 01:19:56	merijn	enthropy: Nope?
2013-09-09 01:20:01	-->	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has joined #haskell
2013-09-09 01:20:02	erisco	Twey, I can take it from here I think
2013-09-09 01:20:03	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 01:20:08	enthropy	ok
2013-09-09 01:20:13	Peaker	yitz: and take Data.Binary for example, I sometimes want to generate a lazy bytestring, sometimes strict, Data.Binary itself should not really care which is generated in many cases
2013-09-09 01:20:14	bergmark	Ghoul_: seems proper to me :) don't think there's anything more specific in base
2013-09-09 01:20:20	<--	qwitwa (~josh@host86-148-39-111.range86-148.btcentralplus.com) has quit (Quit: WeeChat 0.4.1)
2013-09-09 01:20:28	merijn	Peaker: And if I don't, I'll be unemployed, so I'll still have all the time to work on Haskell!
2013-09-09 01:20:33	merijn	Peaker: It's win-win! ;)
2013-09-09 01:20:36	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-09 01:20:44	Twey	erisco: You haven't related this back to your original question, though :þ
2013-09-09 01:20:53	<--	schlaftier (~daniel@5.158.182.23) has quit (Read error: Operation timed out)
2013-09-09 01:20:57	erisco	how not?
2013-09-09 01:20:59	Ghoul_	ok
2013-09-09 01:21:08	erisco	you've removed the cyclic parts as the solution
2013-09-09 01:21:12	erisco	I was proposing the same thing
2013-09-09 01:21:12	yitz	merijn: not if i can help it. but haven't heard back yet... need to ping those guys.
2013-09-09 01:21:14	NemesisD	how do i negate flags with cabal?
2013-09-09 01:21:34	NemesisD	theres a flag "previewServer" and i'm trying to turn it off
2013-09-09 01:21:40	<--	hashcat (~chatzilla@1-172-253-148.dynamic.hinet.net) has quit (Ping timeout: 256 seconds)
2013-09-09 01:22:03	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 01:22:09	NemesisD	ah its just -
2013-09-09 01:22:11	Twey	erisco: You saw the cyclic version too, right?
2013-09-09 01:22:14	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 01:22:15	haasn	mgsloan: shame, diagrams-contrib doesn't build under lens 0.10
2013-09-09 01:22:21	haasn	so that rules out your package working :)
2013-09-09 01:22:22	Peaker	merijn: heh, if you become unemployed, you'll probably be employed at seeking Haskell jobs
2013-09-09 01:22:28	mgsloan	haasn: :/
2013-09-09 01:22:36	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Read error: Operation timed out)
2013-09-09 01:22:50	haasn	and there goes one and a half hours of my otherwise fine day :P
2013-09-09 01:22:51	ekipan	the other day I accidentally edited someone's paste instead of annotating, but I recovered it from the raw
2013-09-09 01:22:57	erisco	Twey, yes but I have no way to construct it
2013-09-09 01:23:01	ekipan	which doesn't seem to change
2013-09-09 01:23:11	erisco	Twey, the one-to-many approach doesn't apply to ProdPart/Either Rule String
2013-09-09 01:23:20	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-09 01:23:22	Twey	erisco: It's okay to construct things like: let xs = Rule $ Set.fromList [Production [Right "x", Left xs]]
2013-09-09 01:23:26	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-09 01:23:31	Twey	… in xs
2013-09-09 01:23:50	erisco	yes but that is a one-to-many... one xs to many productions
2013-09-09 01:23:59	yitz	Peaker: hmm. you do binary stuff more than me. but whenever i've used binary, it *did* matter whether the bytestring is lazy or strict. and the part of the code that just describes the serialization format is generic, just change the import.
2013-09-09 01:24:07	erisco	but that Rule is not necessarily the same Rule that owns Prod
2013-09-09 01:24:23	-->	fragamus (~textual@70.42.240.31) has joined #haskell
2013-09-09 01:24:34	Twey	erisco: It doesn't have to be; you can name any rules you like
2013-09-09 01:24:35	<--	fragamus (~textual@70.42.240.31) has quit (Max SendQ exceeded)
2013-09-09 01:24:39	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-09 01:24:43	Twey	ekipan: Haha, oh yeah!
2013-09-09 01:25:00	erisco	Twey, I do not know how to name it
2013-09-09 01:25:01	Peaker	yitz: no.. Data.Binary is (necessarily) hard-coded to a specific ByteString type
2013-09-09 01:25:03	erisco	or to get the "it"
2013-09-09 01:25:26	Peaker	yitz: and if you have Data.Binary.Strict/Data.Binary.Lazy (which don't exist now) then you get a cartesian explosion of library modules
2013-09-09 01:25:27	<--	LAMMJohnson (~ja@user-5af43c0f.broadband.tesco.net) has quit (Read error: Operation timed out)
2013-09-09 01:25:40	<--	epsilonhalbe (~epsilonha@62.68.205.246) has left #haskell
2013-09-09 01:25:47	<--	marchdown (~marchdown@91.200.224.77) has quit (Quit: marchdown)
2013-09-09 01:25:48	yitz	Peaker: yes i remember that problem
2013-09-09 01:25:49	Twey	erisco: let xys = Rule $ Set.fromList [Production [Right "x", Left yxs]]; yxs = Rule $ Set.fromList [Production [Right "y", Left xys]] in xys
2013-09-09 01:26:06	erisco	Twey, I have an arbitrary number of rules
2013-09-09 01:26:22	NemesisD	parallel cabal build jobs makes my laptop smell funny
2013-09-09 01:26:23	Twey	erisco: Sure, that's why Production takes a list
2013-09-09 01:26:36	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-09 01:26:37	Twey	You have only one starting rule
2013-09-09 01:27:20	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 01:27:24	erisco	Twey, I do not see how this answers the problem with constructing Left
2013-09-09 01:27:37	-->	predator117 (~predator1@p50803865.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 01:27:48	Twey	erisco: Would you like to post a grammar you think can't be constructed in this way?
2013-09-09 01:27:53	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-09 01:27:59	erisco	Twey, if that is your question you've missed my point
2013-09-09 01:28:03	Peaker	yitz: so either you lose convenience/performance (conversions everywhere) or you blow up in a cartesian way,  or you use type-classes (which I prefer). Maybe there are other/better options
2013-09-09 01:28:13	Twey	I may have missed your point
2013-09-09 01:28:14	erisco	Twey, the rules are *arbitrary*... I do not know at compile time
2013-09-09 01:28:32	Twey	Okay
2013-09-09 01:28:43	<--	tommd (~tommd@ip-64-134-136-93.public.wayport.net) has quit (Ping timeout: 260 seconds)
2013-09-09 01:28:45	-->	zbcm (~zbcm@147.41.7.17) has joined #haskell
2013-09-09 01:28:53	Twey	So you can use a list in the ‘let’ as well, and refer back to it
2013-09-09 01:29:02	mgsloan	haasn: Sorry about that
2013-09-09 01:29:04	erisco	but how do I construct said list?
2013-09-09 01:29:42	mgsloan	haasn: I haven't had much time for making toy release worthy, which is why it's not on hackage yet
2013-09-09 01:29:43	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 01:29:54	Twey	From whatever input you get at runtime, I'm guessing?
2013-09-09 01:29:56	<--	james-ubc (~james@66.183.96.217) has quit (Remote host closed the connection)
2013-09-09 01:29:59	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 01:30:04	erisco	Twey, I suppose if I could use indexing (ie !!) then maybe I could rig something together
2013-09-09 01:30:05	haasn	mgsloan: yeah fair enough, caused me a great deal of pain pulling all of those deps from your github page manually :P
2013-09-09 01:30:10	haasn	mgsloan: life was so much simpler when it was one package :)
2013-09-09 01:30:15	-->	beefcube (~jpf@cpe-76-186-208-34.tx.res.rr.com) has joined #haskell
2013-09-09 01:30:16	Twey	Presumably the input has names (or you would need infinite input)
2013-09-09 01:30:18	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-09 01:30:40	mgsloan	haasn: Well, the idea is that gtk / cairo deps are painful for people, and therefore if there were other backends we wouldn't want them
2013-09-09 01:30:43	Twey	You can build the named form from that, and convert to the cyclic form
2013-09-09 01:30:54	mgsloan	haasn: But there aren't other backends, so yeah, maybe a bit pointless
2013-09-09 01:31:10	mgsloan	haasn: This is what mgsloan/toy-sources is for, though - it pulls and builds all the repos
2013-09-09 01:31:13	--	Boney_ is now known as Boney
2013-09-09 01:31:18	mgsloan	haasn: Same for diagrams/diagrams-sources
2013-09-09 01:31:31	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 01:31:56	mgsloan	haasn: I recommend using cabal-dev or hsenv - they make this kind of pain go away
2013-09-09 01:32:03	<--	predator217 (~predator1@p508029DD.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-09 01:32:09	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-09 01:32:28	erisco	Twey, I'll have to puzzle from here. thanks for your help
2013-09-09 01:32:39	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 01:32:41	beefcube	how do I convert from a function with type Either a b to EitherT within do notation for EitherT?
2013-09-09 01:32:46	haasn	mgsloan: I'd prefer to keep things consistent
2013-09-09 01:32:51	haasn	mgsloan: I use portage for managing packages
2013-09-09 01:33:06	<--	rnons (~rnons@183.152.58.163) has quit (Read error: Connection reset by peer)
2013-09-09 01:33:09	haasn	it's just that sometimes a bit of manual upkeep is required because gentoo-haskell doesn't have infinite manpower :(
2013-09-09 01:33:10	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 01:33:44	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-09 01:33:49	pavonia	@src EitherT
2013-09-09 01:33:49	lambdabot	Source not found. :(
2013-09-09 01:34:49	mgsloan	haasn: I imagine!  I can certainly see that being handy for lib dependencies and such
2013-09-09 01:35:10	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Ping timeout: 240 seconds)
2013-09-09 01:35:52	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-09 01:36:21	pavonia	beefcube: EitherT . return, I guess
2013-09-09 01:36:47	<--	mischov (~mischov@cpe-24-160-149-69.satx.res.rr.com) has quit (Quit: Leaving)
2013-09-09 01:36:58	beefcube	just found it XD, don't really understand that though
2013-09-09 01:37:43	-->	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 01:37:52	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-09 01:38:26	-->	yyyyy (~yyyyy@186.203.231.223) has joined #haskell
2013-09-09 01:38:46	pavonia	beefcube: return "lifts" the Either value into the monad required for the monad insatcne of EitherT, and EitherT makes it an value of type EitherT
2013-09-09 01:38:56	pavonia	*instance
2013-09-09 01:39:01	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-09 01:39:35	<--	miclorb (~textual@ppp121-45-185-143.lns20.syd7.internode.on.net) has quit (Ping timeout: 245 seconds)
2013-09-09 01:40:26	<--	shesek (~shesek@87.68.18.255.cable.012.net.il) has quit (Ping timeout: 245 seconds)
2013-09-09 01:40:27	<--	dubsg (~dubsg@2601:9:5b00:10d:9cc8:99ce:34dc:80e3) has quit (Ping timeout: 264 seconds)
2013-09-09 01:40:34	<--	Jesin (~Jessin_@Dyn159076.cc.lehigh.edu) has quit (Quit: Leaving)
2013-09-09 01:40:56	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 01:41:06	-->	rnons (~rnons@183.152.58.163) has joined #haskell
2013-09-09 01:41:15	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-09 01:41:54	<--	cheezey (~ec2-user@ec2-54-241-65-153.us-west-1.compute.amazonaws.com) has quit (Ping timeout: 240 seconds)
2013-09-09 01:42:13	<--	robbert` (~robbert@unaffiliated/robbert) has quit (Read error: Operation timed out)
2013-09-09 01:42:55	beefcube	ah, EitherT { runEitherT :: m (Either a b) } was confusing me, but it looks like its acting as a constructor in that case, gotcha
2013-09-09 01:43:03	beefcube	it's*
2013-09-09 01:43:20	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 260 seconds)
2013-09-09 01:43:28	pavonia	it *is* a constructor
2013-09-09 01:43:31	<--	rnons (~rnons@183.152.58.163) has quit (Read error: Connection reset by peer)
2013-09-09 01:44:36	pavonia	you could also write EitherT { runEitherT = return myEitherVaue }, but that's overly verbose
2013-09-09 01:44:44	shachaf	thoughtpolice: Any chance of #7633 getting into 7.8?
2013-09-09 01:44:55	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-09 01:45:24	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-09 01:45:25	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-09 01:45:31	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-09 01:45:43	thoughtpolice	shachaf: definitely possible. i can look into it perhaps
2013-09-09 01:45:47	thoughtpolice	shachaf: or you could!
2013-09-09 01:45:47	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-09 01:46:01	<--	kevinqcs1 (~turing@183.209.53.5) has quit (Quit: Leaving.)
2013-09-09 01:46:26	<--	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-09-09 01:47:10	shachaf	thoughtpolice: What can I do to help?
2013-09-09 01:47:13	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-09 01:47:43	-->	Vicfred (~Vicfred@187.206.29.185) has joined #haskell
2013-09-09 01:48:10	<--	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-09 01:48:35	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 01:48:45	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 01:49:37	-->	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 01:49:41	-->	Sculptor_ (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-09 01:51:13	-->	riley__ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-09 01:51:15	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Ping timeout: 264 seconds)
2013-09-09 01:51:25	--	riley__ is now known as riley_
2013-09-09 01:52:04	-->	CADD (~CADD@12.227.104.109) has joined #haskell
2013-09-09 01:52:07	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-09 01:52:24	-->	CaptainK (~CaptainK@181.179.38.147) has joined #haskell
2013-09-09 01:52:33	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-09 01:52:55	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 01:53:12	-->	_riley (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-09 01:53:46	<--	_riley (~riley@75-170-137-73.desm.qwest.net) has quit (Client Quit)
2013-09-09 01:54:23	<--	riley_ (~riley@75-170-137-73.desm.qwest.net) has quit (Client Quit)
2013-09-09 01:54:46	-->	riley_ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-09 01:55:13	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 01:56:03	<--	hexagoxel (~hexagoxel@kiel-4d06658c.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-09 01:56:07	-->	jchia (~jchia@cpe-24-90-223-33.nyc.res.rr.com) has joined #haskell
2013-09-09 01:56:32	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 01:57:05	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 01:58:16	<--	mjo_ (~mjo@c-68-49-223-78.hsd1.md.comcast.net) has quit (Quit: Leaving)
2013-09-09 01:58:20	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 01:59:41	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 02:01:27	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-09 02:01:57	<--	wojtekM_ (~user@78.9.7.170) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-09 02:02:56	-->	robbert (~robbert@i96148.upc-i.chello.nl) has joined #haskell
2013-09-09 02:02:56	<--	robbert (~robbert@i96148.upc-i.chello.nl) has quit (Changing host)
2013-09-09 02:02:56	-->	robbert (~robbert@unaffiliated/robbert) has joined #haskell
2013-09-09 02:03:02	-->	chexxor (uid1596@gateway/web/irccloud.com/x-fltjbhvtitepjfxb) has joined #haskell
2013-09-09 02:03:16	hpaste	Twey annotated “No title” with “erisco's CFG name-removal” at http://lpaste.net/92760#a92766
2013-09-09 02:03:24	<--	ktosiek (~ktosiek@46.22.173.54) has quit (Ping timeout: 266 seconds)
2013-09-09 02:03:37	-->	CapitanK (~CaptainK@181.179.71.63) has joined #haskell
2013-09-09 02:03:58	<--	joelb (~textual@c-67-160-197-137.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 02:04:44	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 02:04:51	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-09 02:05:03	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 02:05:18	<--	CaptainK (~CaptainK@181.179.38.147) has quit (Ping timeout: 256 seconds)
2013-09-09 02:05:46	hpaste	Twey revised “erisco's CFG name-removal”: “erisco's CFG name-removal, happy HLint” at http://lpaste.net/92766
2013-09-09 02:05:50	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 02:06:28	<--	shesek (~shesek@77.127.54.57) has quit (Ping timeout: 264 seconds)
2013-09-09 02:07:47	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 02:07:48	-->	dmwit (~dmwit@pool-71-162-226-26.phlapa.east.verizon.net) has joined #haskell
2013-09-09 02:09:56	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-09 02:11:32	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-09 02:12:25	<--	beefcube (~jpf@cpe-76-186-208-34.tx.res.rr.com) has quit (Quit: Leaving)
2013-09-09 02:13:04	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-09 02:13:45	Twey	λpaste's edit is weird and broken
2013-09-09 02:13:48	<--	hilo (~aupiff@c-68-41-44-228.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 02:14:16	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-09 02:14:18	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-09 02:14:19	Twey	Not only does it allow you to overwrite anyone's paste and not update the raw, edits to annotations become separate pastes (and don't update the annotation)
2013-09-09 02:14:43	-->	miclorb (~textual@1.146.2.142) has joined #haskell
2013-09-09 02:14:58	Twey	But annotations to pastes resulting from an edit to an annotation are annotations to the original paste.
2013-09-09 02:15:25	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-09 02:15:47	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 02:16:14	<--	miclorb (~textual@1.146.2.142) has quit (Client Quit)
2013-09-09 02:16:39	<--	timemage (~user@unaffiliated/timemage) has quit (Ping timeout: 268 seconds)
2013-09-09 02:17:02	<--	Guest42080 (~samuel@143.226.94.218) has quit (Ping timeout: 240 seconds)
2013-09-09 02:17:03	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-09 02:17:18	serban	Hey, i have a custom type list as a parameter for a function
2013-09-09 02:17:44	ekipan	seems to me it'd be easiest to delete this broken edit feature
2013-09-09 02:17:59	serban	let's say the type is called Point, the parameter is [Point] and the function gets another Point, which I want to add to the head of the [Point] list and return it
2013-09-09 02:18:01	serban	any ideas?
2013-09-09 02:18:16	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-09 02:18:31	ekipan	:t (:)
2013-09-09 02:18:31	lambdabot	a -> [a] -> [a]
2013-09-09 02:18:34	Twey	serban: Erm, f p ps = p : ps
2013-09-09 02:18:40	mauke	serban: what's the problem?
2013-09-09 02:18:42	Twey	serban: Also known as f = (:) :þ
2013-09-09 02:19:01	serban	ty:))
2013-09-09 02:19:58	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-09 02:20:27	-->	bigos (c6f5714c@gateway/web/freenode/ip.198.245.113.76) has joined #haskell
2013-09-09 02:20:48	<--	CapitanK (~CaptainK@181.179.71.63) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-09 02:21:48	jfischoff	is there a way to make substitution fast with free monads? Perhaps with a zipper like thing?
2013-09-09 02:22:07	<--	tac (~tac-tics@38.115.166.202) has quit (Ping timeout: 264 seconds)
2013-09-09 02:22:12	jfischoff	I was thinking "Why walk when you can take the tube?" might be relevant
2013-09-09 02:22:30	<--	xinming (~xinming@113.248.66.41) has quit (Ping timeout: 245 seconds)
2013-09-09 02:22:32	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 02:23:00	-->	bkolera (~textual@123.200.143.249) has joined #haskell
2013-09-09 02:23:05	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 02:23:52	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Quit: Leaving)
2013-09-09 02:24:07	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-09 02:24:21	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Read error: Connection reset by peer)
2013-09-09 02:24:40	-->	xinming (~xinming@125.84.22.225) has joined #haskell
2013-09-09 02:24:47	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 02:25:51	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 263 seconds)
2013-09-09 02:26:18	serban	ah, not that, i knew that, although i'm a noob:)) how do i call the list from the signature? blah :: Point -> [Point] -> [Point] // Point is a custom type
2013-09-09 02:26:56	serban	eg blah Point x y [what?] = (Point x y) : [what?]
2013-09-09 02:27:08	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-09 02:27:19	ekipan	(Point x y) in parentheses
2013-09-09 02:27:43	-->	joelb (~textual@c-67-160-197-137.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 02:27:48	ekipan	otherwise its three seperate patterns: the nullary constructor Point, and two seperate variables x and y
2013-09-09 02:27:51	-->	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-09 02:27:54	geekosaur	and you can call the [what?] whatever you want
2013-09-09 02:28:32	<--	talzeus_ (~studybot_@113.37.230.101) has quit (Remote host closed the connection)
2013-09-09 02:28:44	-->	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 02:29:06	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-09 02:29:11	Twey	serban: In this case you don't need to call it anything because you're not deconstructing it, but in general you need to bracket multi-word patterns, e.g. blah (Point x y) points = Point x y : points
2013-09-09 02:29:32	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-09 02:29:35	ekipan	it's customary to name list variables in plural
2013-09-09 02:29:36	Twey	(but here it's the same as: blah point points = point : points, which is not really worth defining a function for)
2013-09-09 02:30:11	joelteon	> "A\822B\822C\822"
2013-09-09 02:30:13	lambdabot	  "A\822B\822C\822"
2013-09-09 02:30:15	joelteon	aw
2013-09-09 02:30:17	serban	aha, thanks
2013-09-09 02:30:33	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-09 02:30:41	ekipan	indeed: blah = (:)
2013-09-09 02:31:08	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-09-09 02:31:13	-->	zRecursive (~czsq888@171.216.96.18) has joined #haskell
2013-09-09 02:31:42	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 02:31:50	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-09-09 02:32:18	-->	miclorb (~textual@1.146.2.142) has joined #haskell
2013-09-09 02:32:55	Twey	> text "A\822B\822C\822"
2013-09-09 02:32:56	lambdabot	  A̶B̶C̶
2013-09-09 02:33:08	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-09 02:33:15	 *	hackagebot unix-bytestring 0.3.7 - Unix/Posix-specific functions for ByteStrings.  http://hackage.haskell.org/package/unix-bytestring-0.3.7 (WrenThornton)
2013-09-09 02:33:16	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-09-09 02:33:36	Twey	joelteon: λb renders PrettyPrint documents nicely
2013-09-09 02:33:41	mauke	Y̶E̶S̶.̶
2013-09-09 02:33:42	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-09-09 02:33:44	joelteon	oh
2013-09-09 02:33:56	joelteon	is it my terminal's fault that it displays those characters on top of each other?
2013-09-09 02:34:45	joelteon	because chrome seems to display it fine
2013-09-09 02:34:53	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-09-09 02:35:16	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-09 02:35:27	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-09 02:35:48	mauke	on top how?
2013-09-09 02:36:15	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-09 02:36:16	joelteon	it draws an a, then draws a b in the same place, then draws a c in the same place
2013-09-09 02:36:18	joelteon	so they look like a blob
2013-09-09 02:36:27	--	Nisstyre-laptop is now known as nisstyre
2013-09-09 02:36:39	mauke	sounds like a bug in your client or terminal, yes
2013-09-09 02:36:53	mauke	definitely terminal
2013-09-09 02:37:05	<--	Eduard_Munteanu (~EduardMun@188.25.92.116) has quit (Ping timeout: 264 seconds)
2013-09-09 02:37:05	joelteon	it's iterm
2013-09-09 02:37:05	mauke	a misbehaving irc client couldn't achieve blobness by itself
2013-09-09 02:37:08	joelteon	terminal can do it
2013-09-09 02:37:12	joelteon	damn
2013-09-09 02:37:40	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 264 seconds)
2013-09-09 02:38:18	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Ping timeout: 240 seconds)
2013-09-09 02:38:21	Twey	joelteon: My terminal (Terminal) does it fine
2013-09-09 02:38:24	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Ping timeout: 260 seconds)
2013-09-09 02:38:29	joelteon	yeah, terminal can draw it
2013-09-09 02:38:31	joelteon	iterm can't
2013-09-09 02:38:37	joelteon	OR it might be my font...
2013-09-09 02:39:20	Twey	Oh, I meant xfce4's Terminal, not the Mac one
2013-09-09 02:39:24	Twey	Apparently there's an iTerm 2 now
2013-09-09 02:39:42	joelteon	ahhh, it's Consolas!
2013-09-09 02:40:04	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-09-09 02:40:07	joelteon	time to switch
2013-09-09 02:40:35	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-09 02:40:40	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-09 02:40:43	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 02:40:48	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-09 02:40:51	<--	andares (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-09 02:41:04	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-09 02:41:27	<--	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-09 02:41:37	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-09 02:42:45	<--	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-09 02:42:55	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 02:43:17	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-09-09 02:44:00	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-09 02:44:03	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-09 02:44:28	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-09 02:46:18	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (Quit: WeeChat 0.4.0)
2013-09-09 02:46:24	<--	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-09 02:47:11	-->	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 02:47:56	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-09 02:48:14	-->	rodrigov_ (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-09 02:48:44	serban	question2: what do i need to derive to be able to use list functions on my data type? i currently have data Blah = Blah [Point] deriving (Show)
2013-09-09 02:49:00	serban	(eg head , etc)
2013-09-09 02:49:03	shachaf	Are you reading some introduction to Haskell?
2013-09-09 02:49:08	-->	nh2 (~niklas@r002213.203112.miinet.jp) has joined #haskell
2013-09-09 02:49:08	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 260 seconds)
2013-09-09 02:49:19	shachaf	I think a lot of your questions would be easier to answer with some more background.
2013-09-09 02:49:44	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: No route to host)
2013-09-09 02:49:49	-->	mm_freak (~milch@p5DD053D3.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 02:50:08	<--	nh2 (~niklas@r002213.203112.miinet.jp) has left #haskell
2013-09-09 02:50:11	serban	i went through learnyouahaskell.com, but i jumped right to it, please excuse me if I bothered
2013-09-09 02:50:17	-->	samrat (uid2534@gateway/web/irccloud.com/x-usonjrsmhjaehpqh) has joined #haskell
2013-09-09 02:50:22	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-09 02:50:35	geekosaur	serban, you don't derive anything for lists, they're lists
2013-09-09 02:50:49	geekosaur	they're a type, not a typeclass
2013-09-09 02:51:16	shachaf	Well, you might benefit from not jumping right to it -- the book answers a lot of questions.
2013-09-09 02:51:20	Twey	serban: You can have a list of any type.  Some functions may impose additional requirements on the type inside the list, though — e.g. sort requires Ord
2013-09-09 02:51:27	shachaf	Anyway, you can't make "head" work on your type.
2013-09-09 02:51:41	Twey	Oh, on your own data-type.
2013-09-09 02:51:42	shachaf	(But you shouldn't be using "head" in the first place. It's not a good function.)
2013-09-09 02:52:32	<--	Gracenotes_ (~person@192.241.203.42) has quit (Changing host)
2013-09-09 02:52:33	-->	Gracenotes_ (~person@wikipedia/Gracenotes) has joined #haskell
2013-09-09 02:52:38	serban	ok, back to the drawing board:))
2013-09-09 02:52:59	<--	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-09 02:53:08	S11001001	serban: There are *certain* "list" functions that are actually more broadly applicable than to "list".  lyah talks about them.  Part of thinking about your type definitions is figuring out which ones you can support correctly
2013-09-09 02:53:36	<--	sshack (~sshack@S010684c9b250babc.gv.shawcable.net) has quit (Quit: sshack)
2013-09-09 02:54:02	<--	mm_freak_ (~milch@p5DD05079.dip0.t-ipconnect.de) has quit (Ping timeout: 272 seconds)
2013-09-09 02:54:03	geekosaur	my guess is they did data Foo = Foo [something] and now want to magically go "though" the Foo.
2013-09-09 02:54:24	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Read error: Operation timed out)
2013-09-09 02:54:38	Twey	Sounds like a job for Traversable
2013-09-09 02:54:56	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-09 02:55:34	-->	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 02:56:30	--	necroyet1 is now known as necroyeti
2013-09-09 02:57:23	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-09 02:58:52	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 02:59:17	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 03:00:05	-->	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has joined #haskell
2013-09-09 03:00:23	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 03:04:24	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-09 03:04:36	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 03:05:07	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-09 03:05:27	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-09 03:05:28	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-09 03:05:28	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-09 03:06:45	-->	baba_ (~baba@p5DDCF957.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 03:06:46	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 03:06:47	<--	tabemann (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has quit (Read error: Connection reset by peer)
2013-09-09 03:07:26	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 03:07:50	<--	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-09 03:07:51	<--	sferry_ (~samuel@143.226.94.218) has quit (Ping timeout: 240 seconds)
2013-09-09 03:08:33	-->	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has joined #haskell
2013-09-09 03:09:19	joelteon	so, correct me if I'm wrong, but rex patterns are designed to be used over the whole string, right?
2013-09-09 03:09:44	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 03:09:53	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-09 03:09:59	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-09 03:10:28	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 03:11:14	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 03:11:26	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 03:12:06	dfan	The head of a Blah [Point] would be a Blah Point, which doesn't exist, anyway
2013-09-09 03:12:19	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-09 03:12:42	Twey	dfan: Surely it makes sense as Blah [Point] → Point
2013-09-09 03:12:46	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-09 03:12:55	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-09 03:13:22	Twey	I don't think it was intended to be fmap head
2013-09-09 03:13:29	dfan	Fair enough
2013-09-09 03:13:33	Twey	… and, er, Blah doesn't have a parameter
2013-09-09 03:13:43	<--	yacks (~py@103.6.159.103) has quit (Ping timeout: 260 seconds)
2013-09-09 03:14:05	-->	debo (~anonymous@108.175.233.153) has joined #haskell
2013-09-09 03:14:09	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 268 seconds)
2013-09-09 03:14:15	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-09 03:14:31	dfan	Yeah, I meant head of a Blah wouldn't be a Blah, but you're right, it could be defined to be a Point
2013-09-09 03:15:15	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-09 03:15:20	dfan	If that's what he wants, maybe he just wants Blah to be a newtype
2013-09-09 03:15:38	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Remote host closed the connection)
2013-09-09 03:15:58	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-09 03:16:13	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-09 03:16:51	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-09 03:17:19	<--	rodrigov_ (~rodrigovi@201.37.47.64) has quit (Ping timeout: 240 seconds)
2013-09-09 03:17:22	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 03:17:28	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-09 03:17:32	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 03:18:04	Twey	dfan: I think it is.  serban was confused because f ∷ Blah doesn't give head f ∷ Point.
2013-09-09 03:18:48	Twey	Oh, did you mean it should be a type alias?
2013-09-09 03:18:49	-->	amosr (~amos@28.30.233.220.static.exetel.com.au) has joined #haskell
2013-09-09 03:20:01	<--	dmwit (~dmwit@pool-71-162-226-26.phlapa.east.verizon.net) has quit (Quit: habits lol)
2013-09-09 03:20:31	--	Gracenotes_ is now known as Gracenotes
2013-09-09 03:20:42	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Ping timeout: 256 seconds)
2013-09-09 03:21:10	<--	shesek (~shesek@77.127.54.57) has quit (Read error: No route to host)
2013-09-09 03:21:35	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-09 03:22:09	-->	sgwizdak (~sgwizdak@c-98-203-222-119.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 03:22:27	<--	watermind (~wm@2.80.223.243) has quit (Ping timeout: 264 seconds)
2013-09-09 03:22:42	-->	dimday (~amcvega@199.21.149.15) has joined #haskell
2013-09-09 03:22:49	dfan	Yeah, possibly, if he wants to be able to use lots of list functions on it
2013-09-09 03:22:57	simon	does anyone know the LaTeX code for those [[ ]]-like braces used in formal semantics?
2013-09-09 03:24:00	dfan	simon: http://tex.stackexchange.com/questions/18304/double-square-braces-like-these-exp
2013-09-09 03:24:17	simon	dfan, thanks!
2013-09-09 03:24:19	<--	miclorb (~textual@1.146.2.142) has quit
2013-09-09 03:24:22	Twey	simon: You mean the ‘meaning’ braces, ⟦⟧?
2013-09-09 03:24:44	haasn	simon: \llbracket \rrbracket
2013-09-09 03:24:46	haasn	I think
2013-09-09 03:26:33	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-09-09 03:27:10	simon	Twey, yup. thanks all :)
2013-09-09 03:27:18	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-09 03:27:24	-->	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has joined #haskell
2013-09-09 03:27:24	<--	apaku (~apaku@x2f11e4b.dyn.telefonica.de) has quit (Ping timeout: 260 seconds)
2013-09-09 03:28:03	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 03:28:33	-->	apaku (~apaku@x2f14ab2.dyn.telefonica.de) has joined #haskell
2013-09-09 03:29:02	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-09 03:29:08	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-09-09 03:30:01	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-09 03:31:02	niteria	can two packages share a sandbox with cabal sandbox?
2013-09-09 03:31:23	kloplop321	Has anyone else had problems with hackage lately linking to file:// ?
2013-09-09 03:32:31	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-09 03:32:50	pharaun	i have noticed that
2013-09-09 03:32:51	Gracenotes	well, there have been such problems
2013-09-09 03:33:02	Gracenotes	might be to do with new cabal, perhaps?
2013-09-09 03:33:12	niteria	oh, I guess add-source is what I'm looking for
2013-09-09 03:33:53	-->	mno2 (~mno2@wlan45.cc.ntu.edu.tw) has joined #haskell
2013-09-09 03:35:32	-->	sleepynate (~sleepynat@172.5.214.180) has joined #haskell
2013-09-09 03:36:46	-->	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has joined #haskell
2013-09-09 03:39:12	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-09 03:40:23	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 03:40:46	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 03:40:49	-->	james111111 (~james1111@173-26-0-118.client.mchsi.com) has joined #haskell
2013-09-09 03:41:38	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 03:42:03	<--	james111111 (~james1111@173-26-0-118.client.mchsi.com) has left #haskell
2013-09-09 03:42:26	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Quit: quit)
2013-09-09 03:42:28	-->	soulofpeace (~soulofpea@119.75.11.250) has joined #haskell
2013-09-09 03:42:56	<--	debo (~anonymous@108.175.233.153) has quit (Quit: debo)
2013-09-09 03:43:11	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-09 03:43:18	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-09 03:43:25	<--	sleepynate (~sleepynat@172.5.214.180) has quit (Remote host closed the connection)
2013-09-09 03:43:33	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 03:43:49	danilo2	Can I make in haskell an instance of a typeclass, which will define a function FOR ANY type, which is not function? I mean sometihng like: instance Get a where get x = x, but "a" should not allow for (x->y->...)
2013-09-09 03:44:51	Twey	danilo2: No
2013-09-09 03:44:52	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-09 03:45:11	danilo2	Twey: ok, thank you :)
2013-09-09 03:45:50	Twey	danilo2: You can't talk about ‘any type except <foo>’ in Haskell, in general
2013-09-09 03:46:00	Makoryu	danilo2: If you do stuff with GADTs instead of typeclasses, you can restrict it to particular types
2013-09-09 03:46:03	Twey	(and I would question your motive for trying to do so)
2013-09-09 03:46:18	Makoryu	Alternatively you could do "get :: Eq a => a -> a"
2013-09-09 03:46:31	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-09 03:46:32	Twey	You can restrict typeclasses to particular types, too :þ
2013-09-09 03:46:35	Makoryu	Since Eq instances don't really work for functions
2013-09-09 03:46:39	<--	joelb (~textual@c-67-160-197-137.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 03:46:40	Twey	That's the opposite of the qeustion, though
2013-09-09 03:46:48	Twey	Makoryu: But functions aren't the only things without Eq instances.
2013-09-09 03:46:49	danilo2	Makoryu: oh, that is interesting
2013-09-09 03:46:55	Twey	question**
2013-09-09 03:47:00	Makoryu	Twey: True, but this is a cheap hack anyway :p
2013-09-09 03:47:29	Makoryu	danilo2: I'm curious why you're trying to do this, and what your actual goal is
2013-09-09 03:47:33	lukexi	is there a flag i'm missing to tell cabal not to build executables/to only build the library?
2013-09-09 03:47:37	danilo2	Makoryu: Ok, but with GADT's I will be able to restrict instances to **not functions** ?
2013-09-09 03:47:40	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 03:47:42	Twey	instance Eq (a → b) where _ == _ = True -- what do you mean?  Eq works fine for functions :þ
2013-09-09 03:47:59	danilo2	Makoryu: I was waiting for this question :D So I'm just hacking :)
2013-09-09 03:48:10	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-09 03:48:18	Makoryu	danilo2: You would be able to restrict instances to the particular types you specify, and by not specifying any function types, exclude them
2013-09-09 03:48:24	Twey	danilo2: No.  You will be able to create a parameterized type that can only be parameterized by certain other types.
2013-09-09 03:48:36	Makoryu	s/instances/"instances"/
2013-09-09 03:48:46	Makoryu	(Since this works nothing like the typeclass hack you're asking for)
2013-09-09 03:48:50	<--	baba_ (~baba@p5DDCF957.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-09 03:48:51	<--	ddinh (~David@adsl-70-231-145-202.dsl.snfc21.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-09 03:48:52	<--	babalone (~AndChat74@p5DDCF957.dip0.t-ipconnect.de) has quit (Ping timeout: 251 seconds)
2013-09-09 03:49:11	Twey	danilo2: You can do the same thing with typeclasses, by just defining an instance for every type there is except function types :þ
2013-09-09 03:49:16	danilo2	Makoryu: Could I ask you for a simple one liner example? I would be thankful for this
2013-09-09 03:49:24	-->	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 03:49:29	Makoryu	danilo2: No, because it would not be one line...
2013-09-09 03:49:41	Twey	Semicolons love you
2013-09-09 03:49:42	danilo2	Twey: Yes, I know - but for every type is ... a lot of dwork :D
2013-09-09 03:49:51	Twey	danilo2: It would be the same with a GADT
2013-09-09 03:49:54	danilo2	Makoryu: Ok, thank you :)
2013-09-09 03:50:00	niteria	but you can detect at runtime if you got a function type
2013-09-09 03:50:11	Twey	Hrm, yes
2013-09-09 03:50:12	--	Bynbo7 is now known as Axman6
2013-09-09 03:50:25	danilo2	Twey: Ah, so in GADTS I would also specify each type by hand?
2013-09-09 03:50:39	-->	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 03:50:42	niteria	but doing polyvariadic trick I guess
2013-09-09 03:50:55	Axman6	hoh muh gord, it's been so long...
2013-09-09 03:50:55	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 264 seconds)
2013-09-09 03:51:03	Twey	danilo2: Yes.  Like I said, Haskell doesn't let you talk about ‘everything except this type’ (at compile-time, but listen to niteria for a run-time solution)
2013-09-09 03:51:13	Twey	Axman6: Oh, that's you?
2013-09-09 03:51:19	danilo2	niteria: I would like to do it at compile time, to "enable" optimizations, but thank you for the trick :)
2013-09-09 03:51:24	Axman6	I think I'm me...
2013-09-09 03:51:28	Twey	Caesar cipher, got it
2013-09-09 03:51:32	 *	Twey feels silly.
2013-09-09 03:51:35	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-09 03:51:37	Axman6	heh, aye
2013-09-09 03:51:44	danilo2	Twey: ok, thank you very much :)
2013-09-09 03:52:00	Axman6	> unzip $ map (pred &&& succ) "Axman6"
2013-09-09 03:52:01	lambdabot	  ("@wl`m5","Bynbo7")
2013-09-09 03:52:05	Makoryu	danilo2: I am skeptical of these "optimizations" you mention
2013-09-09 03:52:05	Axman6	still got it
2013-09-09 03:52:31	-->	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-09 03:52:31	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Quit: leaving)
2013-09-09 03:52:36	Twey	Makoryu: Not checking types at runtime sounds like an optimization to me ;)
2013-09-09 03:52:59	Twey	Axman6: Shh.  You'll bring down the lens police.  #haskell is a very different place these days…
2013-09-09 03:53:05	<--	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Client Quit)
2013-09-09 03:53:11	danilo2	Makoryu: why? If I create an instance of a class, the call to the function can be translated to only one jump in asm, where runtime gives us (for sure) an overhead
2013-09-09 03:53:17	Axman6	Twey: is it? D:
2013-09-09 03:53:19	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-09-09 03:53:28	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Read error: Connection reset by peer)
2013-09-09 03:53:58	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-09 03:54:02	Makoryu	danilo2: I don't follow what you're trying to do exactly
2013-09-09 03:54:51	danilo2	Makoryu: I'm sorry :) I was only trying to define a function (let call it get), which will behave like "id" for simple variables and will behave differentlly for different types of functions (as parameters)
2013-09-09 03:54:56	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 03:55:01	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 03:55:15	<--	walter (~walter@c-24-218-217-69.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 03:55:26	-->	gnuvince (~vince@ip-96-43-236-126.dsl.netrevolution.com) has joined #haskell
2013-09-09 03:55:34	<--	gnuvince (~vince@ip-96-43-236-126.dsl.netrevolution.com) has quit (Changing host)
2013-09-09 03:55:35	-->	gnuvince (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-09 03:57:09	-->	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-09 03:57:22	Twey	danilo2: You *can* use OverlappingInstances and define a more specific (a → b) instance over a general a instance
2013-09-09 03:57:29	Twey	That's reasonably bad mojo, though
2013-09-09 03:58:05	danilo2	Twey: Oh! that could be something I am looking for! :)
2013-09-09 03:58:37	Twey	danilo2: Please don't do it in code I might have to use some day ;)
2013-09-09 03:58:38	<--	Redz (~red@82.113.106.12) has quit (Quit: Leaving.)
2013-09-09 03:58:39	danilo2	Twey: Why could it be bad? I know it could be error prone, but are there any other downsides?
2013-09-09 03:58:49	pavonia	danilo2: What are "simple variables" in that context?
2013-09-09 03:58:59	S11001001	danilo2: you mean "error prone" isn't a sufficient downside?
2013-09-09 03:59:07	danilo2	pavonia: I was tlaking about everything except of functions
2013-09-09 03:59:13	Twey	danilo2: What downsides could there be for a program other than being ‘error-prone’?  :þ
2013-09-09 03:59:39	danilo2	S11001001: Yes it is, I'm not planing touse it in production code - I'm just hacking with Haskell and trying to do "hacky things" :)
2013-09-09 03:59:56	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Read error: Connection reset by peer)
2013-09-09 03:59:57	danilo2	Twey: Ok, youre right :P
2013-09-09 04:00:27	<--	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has quit (Quit: Page closed)
2013-09-09 04:00:33	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 04:00:46	-->	travisb (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-09 04:01:01	--	travisb is now known as tabemann
2013-09-09 04:01:19	jfischoff	is there something like a zipper for a free monad that allows for performant substitutions?
2013-09-09 04:01:58	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 04:02:08	-->	dibblego (~nobody@baldrick.qut.edu.au) has joined #haskell
2013-09-09 04:02:25	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-09 04:03:03	dibblego	Hello, this code invokes a bug in GHC 7.4.1 that has been fixed at some time at least before (or equal to) GHC 7.6.3, however, I would like to find the bug in the database so I can document it. Any suggestions on how to find that specific bug? https://gist.github.com/tonymorris/6460828
2013-09-09 04:03:09	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-09 04:03:11	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 04:03:40	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-09 04:03:41	-->	augur_ (~augur@208.58.5.87) has joined #haskell
2013-09-09 04:03:47	shachaf	Oh, the bug where you run into trouble with duplicate instances when you define instances in ghci.
2013-09-09 04:04:04	dibblego	yes
2013-09-09 04:04:13	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 04:04:49	shachaf	http://ghc.haskell.org/trac/ghc/ticket/5820
2013-09-09 04:04:52	-->	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has joined #haskell
2013-09-09 04:05:00	dibblego	great thanks
2013-09-09 04:05:39	<--	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-09 04:05:40	khyperia	I don't really understand point-free refactoring, and how it exactly is done. Is there an offline version of @pl that I can spam without annoying people in here? (or does the command work in PM?)
2013-09-09 04:05:51	shachaf	(Found via https://encrypted.google.com/search?q=site:ghc.haskell.org+instances+ghci , for what it's worth!)
2013-09-09 04:06:02	dibblego	khyperia: yes, cabal install pointfree
2013-09-09 04:06:02	shachaf	(I often have better luck with the Google than with trac search.)
2013-09-09 04:06:08	khyperia	thanks
2013-09-09 04:06:12	shachaf	khyperia: It also works in /msg.
2013-09-09 04:06:24	dibblego	khyperia: I also have in ~/.ghci :def pl \s -> P.return P.$ ":! pointfree \"" P.++ s P.++ "\""
2013-09-09 04:06:25	shachaf	elliott: Is @pl ever going to be fixed?
2013-09-09 04:06:39	shachaf	It would be nice. Even if it just calls out to the binary or something.
2013-09-09 04:07:01	khyperia	... I have no idea what that jumble of symbols mean, dibblego.
2013-09-09 04:07:11	dibblego	khyperia: it allows me to invoke it from ghci
2013-09-09 04:07:22	khyperia	ah
2013-09-09 04:07:40	-->	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has joined #haskell
2013-09-09 04:07:49	Twey	khyperia: I'm not sure @pl is always the best way to learn about point-free style.
2013-09-09 04:07:50	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-09 04:08:16	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 268 seconds)
2013-09-09 04:08:19	Twey	khyperia: Be aware that the definitions it comes up with are often much messier than what a human could generate.
2013-09-09 04:08:34	-->	StahlGrau (~patgray@pool-108-53-133-240.nwrknj.fios.verizon.net) has joined #haskell
2013-09-09 04:08:34	<--	yacks (~py@103.6.159.103) has quit (Read error: Operation timed out)
2013-09-09 04:08:41	khyperia	Do you have a tutorial somewhere or something you could possibly link?
2013-09-09 04:08:45	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Remote host closed the connection)
2013-09-09 04:08:51	-->	gnuvince (~vince@ip-96-43-236-126.dsl.netrevolution.com) has joined #haskell
2013-09-09 04:09:00	<--	gnuvince (~vince@ip-96-43-236-126.dsl.netrevolution.com) has quit (Changing host)
2013-09-09 04:09:00	-->	gnuvince (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-09 04:09:44	Twey	khyperia: I'm not really sure it's a topic for tutorials.  As you grow more proficient with Haskell and its libraries you'll see more ways that a function can be written directly in terms of other functions.
2013-09-09 04:10:03	khyperia	ah
2013-09-09 04:10:14	<--	toltolt (~Kevin@209.65.15.42) has quit (Read error: Connection reset by peer)
2013-09-09 04:10:33	lpsmith	Ok,  I have two lists of type (Eq a) => [(a,b)] and [(a,c)],   and the "a"s are _nearly_ in the same order.   Does anybody know a good algorithm for matching up the pairs according to type a?
2013-09-09 04:10:59	shachaf	What does "nearly" mean?
2013-09-09 04:11:10	khyperia	but the thing I'm specifically having trouble with is the function composition operator, and say, how, "\x y -> f (g x) y" would look in point-free
2013-09-09 04:11:19	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-09 04:11:24	copumpkin	lpsmith: man, how'd you end up with types polymorphic in Eq?
2013-09-09 04:11:28	copumpkin	:P
2013-09-09 04:11:39	khyperia	well, maybe that wasn't the best example
2013-09-09 04:11:53	copumpkin	f =<< g
2013-09-09 04:12:06	shachaf	copumpkin: Hey, it could've been an even weirder type, like (exists a. Eq a => [(a,b)])!
2013-09-09 04:12:13	copumpkin	> (f =<< g) x y :: Expr
2013-09-09 04:12:13	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr a0)
2013-09-09 04:12:14	lambdabot	   arising from a us...
2013-09-09 04:12:21	Twey	khyperia: First you can take off the ending y, because that's directly applied, so that's \x → f (g x); then you can rewrite that with composition as ‘\x → (f . g) x’, and then you can remove the x again to give f . g
2013-09-09 04:12:30	enthropy	if you had Ord a =>, you could use a unionWith on maps you've made from the two lists
2013-09-09 04:12:35	copumpkin	> (f =<< (g :: Expr -> Expr)) x y
2013-09-09 04:12:39	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr a0)
2013-09-09 04:12:39	khyperia	right
2013-09-09 04:12:43	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 04:12:43	lambdabot	   arising from a us...
2013-09-09 04:12:46	copumpkin	> (f =<< (g :: Expr -> Expr)) x y :: Expr
2013-09-09 04:12:49	lambdabot	  f (g x) x y
2013-09-09 04:12:57	copumpkin	boo
2013-09-09 04:12:58	copumpkin	I fail
2013-09-09 04:12:58	Twey	khyperia: There's only really one way to make a function point-free, which is by η-contraction (converting \x → f x into f)
2013-09-09 04:13:04	lpsmith	copumpkin, I'm speaking loosely here
2013-09-09 04:13:13	copumpkin	lpsmith: I'm just being an asshole, sorry :)
2013-09-09 04:13:14	Twey	khyperia: The combinators are just about how you get a function into that form
2013-09-09 04:13:24	lpsmith	copumpkin, =)
2013-09-09 04:13:25	khyperia	... how do you have all these unicode symbols all quick? Do you have them bound do a shortcut or something?
2013-09-09 04:13:40	copumpkin	oh wait, that's just f . g
2013-09-09 04:14:07	slack1256	khyperia: learn about 'digraph' on vim or the equivalent on emacs/other editors
2013-09-09 04:14:12	Twey	copumpkin: I have a Compose key and UIM set to TeX-style
2013-09-09 04:14:13	lpsmith	shachaf, I have the same elements in both lists,  where the transposition-only edit distance is low relative to the length of the lsits
2013-09-09 04:14:15	dwcook	khyperia, you can also setup a compose key
2013-09-09 04:14:20	<--	bss03 (~bss@76-220-103-20.lightspeed.fyvlar.sbcglobal.net) has quit
2013-09-09 04:14:21	Twey	Er, khyperia, sorry
2013-09-09 04:14:27	dwcook	[compose]-> yields →
2013-09-09 04:14:28	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-09 04:14:29	khyperia	ah
2013-09-09 04:14:29	<--	evohunz (~evohunz@187.85.176.249) has quit (Remote host closed the connection)
2013-09-09 04:14:39	dwcook	At least under the default bindings for whatever Linuxy thing provides it
2013-09-09 04:15:06	dwcook	FreeCompose if you're on Windows
2013-09-09 04:15:11	Twey	xkb
2013-09-09 04:15:15	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-09 04:15:18	Twey	Windows has Compose key support?!
2013-09-09 04:15:24	dwcook	Not by default
2013-09-09 04:15:26	Twey	At last!
2013-09-09 04:15:28	dwcook	I had to install a program for it
2013-09-09 04:15:59	Twey	Well, obviously.
2013-09-09 04:15:59	<--	evohunz (~evohunz@187.85.176.249) has quit (Client Quit)
2013-09-09 04:16:21	<--	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 241 seconds)
2013-09-09 04:16:25	-->	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has joined #haskell
2013-09-09 04:16:34	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 04:16:36	<--	andares_ (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-09 04:17:11	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-09 04:17:42	-->	khumba (~khumba@c-76-104-197-18.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 04:18:45	<--	codesoup (~codesoup@76-10-140-212.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-09-09 04:19:16	-->	canthelp (~canthelp@unaffiliated/canthelp) has joined #haskell
2013-09-09 04:19:50	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 04:20:19	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 04:21:24	khyperia	Well then. Looks like it's working, but this irc client doesn't accept unicode characters in input or something. Works when I type it into chrome's address field, but not here.
2013-09-09 04:21:26	khyperia	Fun times.
2013-09-09 04:21:35	canthelp	why
2013-09-09 04:21:50	<--	augur_ (~augur@208.58.5.87) has quit (Ping timeout: 240 seconds)
2013-09-09 04:21:51	canthelp	who doesnt use unicode these days
2013-09-09 04:21:54	khyperia	coulda just asked, haasn, lol.
2013-09-09 04:22:05	haasn	just curious :)
2013-09-09 04:22:06	khyperia	although it works fine when I copy-paste it into the field
2013-09-09 04:22:15	khyperia	also you too Twey
2013-09-09 04:22:45	Twey	khyperia: But I saved two lines of chat! (which we've now used anyway :þ)
2013-09-09 04:22:49	khyperia	heh
2013-09-09 04:22:50	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-09 04:22:52	Twey	I'm all about communication efficiency.
2013-09-09 04:23:27	Twey	I don't know what the state of Unicode is on Windows these days, but it always used to be a bit broken
2013-09-09 04:23:36	Twey	If all else fails, you can just use emacs (+ erc)
2013-09-09 04:23:40	shachaf	Most people here use Unicode, but often just the first 128 codepoints.
2013-09-09 04:23:55	<--	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 04:24:08	canthelp	broken on windows?
2013-09-09 04:24:10	Twey	shachaf: I haven't seen much usage of the <11 range
2013-09-09 04:24:21	shachaf	Twey: Really?
2013-09-09 04:24:23	 *	shachaf disagrees.
2013-09-09 04:24:34	canthelp	as long as you stick to ucs-2 it should work on windows
2013-09-09 04:24:41	Twey	shachaf: I don't see it.  My client converted it.  :þ
2013-09-09 04:25:01	canthelp	what character?
2013-09-09 04:25:10	Twey	canthelp: \1
2013-09-09 04:25:16	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 04:25:18	canthelp	ascii 1?
2013-09-09 04:25:31	Twey	Unicode 1, specifically.  But sure.
2013-09-09 04:25:31	spaceships	so am I right that Const is the applicative functor that acts like a monoid?
2013-09-09 04:25:37	canthelp	that has special irc meaning
2013-09-09 04:25:46	joelteon	I want to use rex to just replace substrings of a string. is that possible? because it looks like rex isn't designed to do that
2013-09-09 04:25:48	canthelp	was it at the start of the message
2013-09-09 04:25:56	shachaf	spaceships: All applicative functors "act like monoids".
2013-09-09 04:26:01	Twey	canthelp: That was rather the point.
2013-09-09 04:26:13	canthelp	i thought the question was about unicode
2013-09-09 04:26:14	shachaf	But Const x <*> Const y = Const (x <> y), and pure _ = Const mempty, if that's what you mean.
2013-09-09 04:26:19	-->	codesoup (~codesoup@76-10-142-65.dsl.teksavvy.com) has joined #haskell
2013-09-09 04:26:37	Twey	canthelp: shachaf sent an ACTION command, which needs to be surrounded by \1's.
2013-09-09 04:26:43	Twey	(in the protocol)
2013-09-09 04:26:49	canthelp	yes
2013-09-09 04:26:59	<--	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-09-09 04:27:01	spaceships	shachaf: it ignores fmap, too right?
2013-09-09 04:27:08	<--	StahlGrau (~patgray@pool-108-53-133-240.nwrknj.fios.verizon.net) has left #haskell
2013-09-09 04:27:40	shachaf	spaceships: I don't know what "ignores" means, but I suspect that you'd figure out the answer to your question by looking at the definition of Const (and its instances).
2013-09-09 04:27:59	<--	yyyyy (~yyyyy@186.203.231.223) has quit (Quit: Lost terminal)
2013-09-09 04:28:16	spaceships	shachaf: thanks for your help. yep, doing that too.
2013-09-09 04:28:39	flebron	So Howard-Curry gives us a way to translate between the usual functional programs and constructive proofs. Is there a corresponding notion for typeclasses? For instance, a logical interpretation of the Functor typeclass? (I'm aware of the categorical one)
2013-09-09 04:29:01	flebron	(The question arises because (.) = fmap, and (.) is implication.)
2013-09-09 04:30:04	<--	riley_ (~riley@75-170-137-73.desm.qwest.net) has quit (Quit: Goodbye)
2013-09-09 04:30:05	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 04:30:09	<--	danilo2 (4dff721e@gateway/web/freenode/ip.77.255.114.30) has quit (Ping timeout: 250 seconds)
2013-09-09 04:30:10	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 04:30:15	<--	mno2 (~mno2@wlan45.cc.ntu.edu.tw) has quit (Ping timeout: 264 seconds)
2013-09-09 04:30:21	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Ping timeout: 276 seconds)
2013-09-09 04:30:41	<--	canthelp (~canthelp@unaffiliated/canthelp) has left #haskell ("Ex-Chat")
2013-09-09 04:30:59	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-09 04:31:42	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-09-09 04:32:49	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 04:33:33	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-09 04:33:44	Twey	flebron: Typeclasses are just type-directed sugar for passing a record of functions, i.e. a conjunction of implications
2013-09-09 04:34:00	-->	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has joined #haskell
2013-09-09 04:34:09	dwcook	Or associated values in general
2013-09-09 04:34:16	Twey	Aye
2013-09-09 04:34:21	dwcook	e.g., empty :: (Monoid m) => m
2013-09-09 04:34:33	dwcook	@type empty
2013-09-09 04:34:34	lambdabot	Alternative f => f a
2013-09-09 04:34:40	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 04:34:43	dwcook	I got the wrong name I guess
2013-09-09 04:34:44	Twey	So the meaning is that of the applied conjunction; there's no special meaning for typeclasses
2013-09-09 04:34:51	Twey	dwcook: mempty
2013-09-09 04:34:56	dwcook	@type mempty
2013-09-09 04:34:56	lambdabot	Monoid a => a
2013-09-09 04:35:00	dwcook	Thanks
2013-09-09 04:35:06	 *	Twey always confuses mempty/mappend and mzero/mplus
2013-09-09 04:35:15	shachaf	Twey: No, that's an implementation of type classes.
2013-09-09 04:35:25	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-09 04:35:49	Twey	shachaf: Sure, but for Curry–Howard purposes they're equivalent
2013-09-09 04:36:17	<--	erisco (~erisco@198-91-210-150.cpe.distributel.net) has quit (Quit: Leaving)
2013-09-09 04:37:08	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-09 04:37:21	-->	csakatoku (~csakatoku@em119-72-197-119.pool.e-mobile.ne.jp) has joined #haskell
2013-09-09 04:39:33	<--	mobileblue (~mobileblu@dslb-094-218-066-149.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-09 04:40:38	<--	mno2 (~mno2@wlan29.cc.ntu.edu.tw) has quit (Ping timeout: 248 seconds)
2013-09-09 04:42:08	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 04:42:53	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 04:43:00	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 04:43:15	-->	Kevin__ (~Kevin@209.65.15.42) has joined #haskell
2013-09-09 04:43:20	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-09 04:43:24	--	hdevalence|away is now known as hdevalence
2013-09-09 04:43:38	-->	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has joined #haskell
2013-09-09 04:43:46	-->	xpika (~alanhawki@d210-49-167-208.sun801.vic.optusnet.com.au) has joined #haskell
2013-09-09 04:43:48	augur	does GHC have an interactive editing mode, or does it merely have a big monolithic type checker?
2013-09-09 04:43:53	Ghoul_	just like there is arbituary length int's (Integer)
2013-09-09 04:44:03	Ghoul_	is there an arbituarily precise version for floats?
2013-09-09 04:44:08	-->	mno2 (~mno2@wlan46.cc.ntu.edu.tw) has joined #haskell
2013-09-09 04:44:10	enthropy	have you seen ghci?
2013-09-09 04:44:49	augur	enthropy: no what i mean is something where you can send genuine code into GHC, and have it type check portions of the code
2013-09-09 04:44:59	JuanDaugherty	augur, enthropy was answering your query
2013-09-09 04:45:03	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 04:45:09	augur	GHCi isnt what i mean, JuanDaugherty
2013-09-09 04:45:18	augur	thats why i just said what i said
2013-09-09 04:45:53	enthropy	Ghoul_: there are some bindings for mpfr, there's a Data.CReal in http://hackage.haskell.org/package/numbers-3000.1.0.3
2013-09-09 04:45:54	JuanDaugherty	scroll up
2013-09-09 04:45:59	enthropy	the latter is much easier to use
2013-09-09 04:46:16	JuanDaugherty	you see where ... .
2013-09-09 04:46:20	Ghoul_	oh okay, so haskell doesn't have it built in
2013-09-09 04:46:23	Ghoul_	thats all I needed to know, thanks
2013-09-09 04:46:25	ekipan	Ghoul_: Rational, which is Ratio Integer
2013-09-09 04:46:38	Ghoul_	is rational pure haskell?
2013-09-09 04:46:39	JuanDaugherty	it's in lambdabot code which is in ghci
2013-09-09 04:46:48	Ghoul_	or is it bound to gmp?
2013-09-09 04:46:56	augur	JuanDaugherty: i dont know what you're saying
2013-09-09 04:47:09	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-09 04:47:24	enthropy	Ghoul_: Rational is Ratio Integer, so it's a bit of both I guess
2013-09-09 04:48:54	joelteon	is it possible to make an attoparsec parser lazy?
2013-09-09 04:49:01	joelteon	lazy in the regex sense, not in the Haskell sense
2013-09-09 04:51:43	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 04:51:46	enthropy	augur: have you seen https://github.com/nominolo/scion ?
2013-09-09 04:52:15	<--	bigos (c6f5714c@gateway/web/freenode/ip.198.245.113.76) has quit (Ping timeout: 250 seconds)
2013-09-09 04:52:32	augur	enthropy: no
2013-09-09 04:52:33	augur	looking
2013-09-09 04:52:38	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 04:52:49	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-09 04:53:00	enthropy	there's another project somewhere on github for printing types of all values you've called __ or something
2013-09-09 04:53:05	augur	i should look at the GHC API
2013-09-09 04:53:42	enthropy	there's also ghc-mod
2013-09-09 04:54:12	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 260 seconds)
2013-09-09 04:54:33	enthropy	the ghc-api is not a very pretty place
2013-09-09 04:54:44	enthropy	you'll be better off using things that use it
2013-09-09 04:54:45	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-09 04:55:53	<--	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Read error: Operation timed out)
2013-09-09 04:55:54	augur	well i dont actually need to use it, i was just wondering
2013-09-09 04:55:56	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-09 04:55:57	-->	armadillu (~armadillu@user-387hebs.cable.mindspring.com) has joined #haskell
2013-09-09 04:56:30	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 04:57:39	<--	armadillu (~armadillu@user-387hebs.cable.mindspring.com) has quit (Remote host closed the connection)
2013-09-09 04:57:48	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-09 04:57:51	-->	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 04:58:49	-->	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has joined #haskell
2013-09-09 04:58:51	enthropy	it beats writing your own typechecker
2013-09-09 04:59:31	Twey	I'm not so sure…
2013-09-09 04:59:39	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 05:00:12	augur	enthropy: indeed :)
2013-09-09 05:00:18	<--	amathew (~Adium@184.152.8.103) has left #haskell
2013-09-09 05:00:22	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 05:00:28	Twey	augur: Haskell has holes now
2013-09-09 05:00:36	augur	Twey: fake holes
2013-09-09 05:00:38	<--	sferry (~samuel@atheme/member/samferry) has quit (Ping timeout: 240 seconds)
2013-09-09 05:00:55	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 05:00:57	Twey	Fake holes?
2013-09-09 05:01:44	<--	mizu_no_oto (~textual@pool-71-126-179-51.washdc.fios.verizon.net) has quit (Client Quit)
2013-09-09 05:01:58	augur	Twey: haskell cant have real holes without a real editor.
2013-09-09 05:02:45	Twey	Eh.  Not a language feature.
2013-09-09 05:03:07	augur	its an editor feature, ultimately
2013-09-09 05:03:14	augur	i mean, its a language feature too, to a minor extent
2013-09-09 05:03:17	-->	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has joined #haskell
2013-09-09 05:03:28	Twey	The language feature is holes, which GHC has
2013-09-09 05:03:39	Twey	Nice editor support for holes is a different matter
2013-09-09 05:03:43	-->	gnuvince- (~vince@ip-96-43-236-47.dsl.netrevolution.com) has joined #haskell
2013-09-09 05:03:48	<--	philipde` (~user@cpe-69-204-201-168.stny.res.rr.com) has quit (Remote host closed the connection)
2013-09-09 05:03:49	augur	holes without nice editor support are mostly useless :)
2013-09-09 05:03:52	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Disconnected by services)
2013-09-09 05:03:57	augur	i'd like to see GHC's holes tho. link?
2013-09-09 05:04:01	-->	otto_s (~user@cotb-4db34cf1.pool.mediaWays.net) has joined #haskell
2013-09-09 05:04:05	Twey	http://www.haskell.org/haskellwiki/GHC/TypeHoles
2013-09-09 05:04:06	<--	gnuvince- (~vince@ip-96-43-236-47.dsl.netrevolution.com) has quit (Changing host)
2013-09-09 05:04:06	-->	gnuvince- (~vince@unaffiliated/gnuvince) has joined #haskell
2013-09-09 05:04:08	--	gnuvince- is now known as gnuvince
2013-09-09 05:04:36	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-09 05:05:01	augur	real holes! :)
2013-09-09 05:05:33	xpika	the haskell platform Haskell Platform 2013.2.0.0 64bit opens in text edit
2013-09-09 05:05:37	Twey	You can get reasonably far.  emacs has support for loading a file into GHCi, holes and all, so compared to agda2-mode, the main thing that's missing is the ability to view information about a specific hole interactively (GHCi will just spew all the information about all the holes back at you at once, instead)
2013-09-09 05:06:34	augur	Twey: but can you interactively modify the source code, or will it just reload the whole thing each time?
2013-09-09 05:06:35	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 05:06:36	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-09 05:06:37	<--	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has quit (Quit: ZNC - http://znc.in)
2013-09-09 05:06:54	Twey	augur: The latter, but I'm not sure what the practical difference is
2013-09-09 05:07:12	augur	well if you have a big file i imagine its pretty intense, but fair enough
2013-09-09 05:07:25	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-09 05:07:26	Twey	In both cases you modify the hole, tell the editor to update, then read the new information about the hole
2013-09-09 05:07:27	<--	otto_s_ (~user@cotb-4db35db8.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-09 05:08:01	Twey	Oh, and there's no proof search, obviously
2013-09-09 05:08:13	<--	Kevin__ (~Kevin@209.65.15.42) has left #haskell ("Leaving")
2013-09-09 05:08:14	roboguy_	the last stable, major release of ghc doesn't have holes does it?
2013-09-09 05:08:17	augur	does the hole info list in-scope vars?
2013-09-09 05:08:19	-->	Kevin__ (~Kevin@209.65.15.42) has joined #haskell
2013-09-09 05:08:37	Twey	augur: Yes; see linked article
2013-09-09 05:08:43	-->	banannagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-09 05:08:44	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 05:08:46	-->	generic (~generic@p57B2DE86.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 05:08:47	-->	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has joined #haskell
2013-09-09 05:08:51	<--	Zearen (~zearen@c-98-239-129-128.hsd1.pa.comcast.net) has quit (Quit: Leaving.)
2013-09-09 05:08:54	--	apples is now known as Guest51586
2013-09-09 05:08:55	--	banannagram is now known as bananagram
2013-09-09 05:09:04	Twey	(‘Relevant bindings include:’)
2013-09-09 05:09:04	<--	Guest51586 (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has quit (Client Quit)
2013-09-09 05:09:17	Twey	s/://
2013-09-09 05:10:01	Twey	roboguy_: No, coming 7.8
2013-09-09 05:10:20	augur	Twey: lovely!
2013-09-09 05:10:41	augur	thats all we need to make an editor with good hole support :)
2013-09-09 05:11:01	Twey	Indeed
2013-09-09 05:11:08	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 05:11:14	Twey	That seems to be the plan, reading the comments on the wiki page
2013-09-09 05:11:26	augur	i hope that GHC provides that stuff in a clear datatype
2013-09-09 05:11:35	Twey	I doubt it
2013-09-09 05:11:39	augur	:(
2013-09-09 05:11:51	Twey	GHC datatypes tend to be a little baroque :þ
2013-09-09 05:11:57	augur	anyway, i ask because im going to make an editor and my hope is to eventually have haskell support
2013-09-09 05:12:07	augur	Twey: well all i mean is it shouldnt just be a big blob of text
2013-09-09 05:12:20	<--	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has quit (Ping timeout: 256 seconds)
2013-09-09 05:12:28	<--	shanse (~generic@p57B2DC10.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-09 05:12:29	--	generic is now known as shanse
2013-09-09 05:13:00	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 05:13:04	hpaste	joelteon pasted “parsing is hard” at http://lpaste.net/92772
2013-09-09 05:13:05	-->	doggone (~rolf@d5152CC9C.static.telenet.be) has joined #haskell
2013-09-09 05:13:06	Twey	augur: data SrcSpan = RealSrcSpan !RealSrcSpan | UnhelpfulSpan !FastString.FastString
2013-09-09 05:13:08	-->	Pip (~Pip__@unaffiliated/pip) has joined #haskell
2013-09-09 05:13:13	joelteon	see I can't figure out how to parse that ^
2013-09-09 05:13:15	Twey	augur: Oh, it won't be a big blob of text
2013-09-09 05:13:27	Twey	You might have to do impurity to get the values out, though
2013-09-09 05:13:33	joelteon	because how do you figure out the boundaries of a Plain text?
2013-09-09 05:13:37	augur	Twey: i dont know what you mean
2013-09-09 05:13:51	Twey	augur: Sometimes you get things wrapped up in IO-ish monads
2013-09-09 05:14:00	<--	doggone (~rolf@d5152CC9C.static.telenet.be) has quit (Client Quit)
2013-09-09 05:14:10	augur	Twey: for the hole info?
2013-09-09 05:14:48	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-09-09 05:15:00	Twey	joelteon: So &b\t starts a new B, and &/b\t ends it?
2013-09-09 05:15:21	Twey	augur: I don't know about the hole info specifically.  I'm just bemoaning the GHC API.  ☺
2013-09-09 05:15:22	augur	ok anyway, different topic
2013-09-09 05:15:46	augur	how would a plugin-like system be done in haskell?
2013-09-09 05:15:56	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 05:15:59	joelteon	Twey: yes
2013-09-09 05:16:01	<--	sgwizdak (~sgwizdak@c-98-203-222-119.hsd1.wa.comcast.net) has quit (Quit: bye)
2013-09-09 05:16:04	joelteon	\t is a tab character, not the literal \t
2013-09-09 05:16:09	Twey	Yeah
2013-09-09 05:16:11	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-09 05:16:22	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 05:16:23	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-09 05:16:28	Twey	augur: Through the GHC API, but there are several existing packages; have a Google
2013-09-09 05:16:29	augur	byb plugin-like, i mean that i want to have a program with user-installable components
2013-09-09 05:16:45	Driscoll	is there a terse way to say "map over each row in an Array"
2013-09-09 05:16:50	Driscoll	without using range or something
2013-09-09 05:17:00	Twey	I think ‘plugins’ is this week's
2013-09-09 05:17:08	Driscoll	in this case, Array (Int,Int) Int
2013-09-09 05:17:23	Twey	Driscoll: No; the Array might not even have something that can be described as a ‘row’
2013-09-09 05:17:29	Driscoll	right
2013-09-09 05:17:38	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 05:17:45	Driscoll	so the closest approximation would be to use range?
2013-09-09 05:17:50	-->	scripty (~scripty@117.192.187.94) has joined #haskell
2013-09-09 05:18:03	augur	Twey: is this week's?
2013-09-09 05:18:48	Twey	augur: Every so often one of them overtakes another.  I'm not totally sure which is in the lead at the moment, but I think it's plugins.
2013-09-09 05:19:03	augur	Twey: one of what
2013-09-09 05:19:04	augur	this week's what
2013-09-09 05:19:06	Twey	Driscoll: I'd say so, yes
2013-09-09 05:19:11	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 05:19:12	Twey	augur: Plugin package
2013-09-09 05:19:12	Driscoll	is that efficient
2013-09-09 05:19:17	Twey	Driscoll: Yes
2013-09-09 05:19:22	augur	Twey: im very confused
2013-09-09 05:19:24	Driscoll	like, my solutions was this, previously:
2013-09-09 05:19:48	Twey	augur: There are several options for a package that provides plugin support.
2013-09-09 05:20:08	Twey	augur: Generally one of them is better than the others, but that varies with time and I'm not up to date.
2013-09-09 05:20:27	Driscoll	map (myArray !) ( range ((0,0),(10,0)) )
2013-09-09 05:20:36	Driscoll	except that i was doing that for each row
2013-09-09 05:20:38	Driscoll	that seems like overkill
2013-09-09 05:20:49	Driscoll	but i can't find anything better
2013-09-09 05:20:57	augur	Twey: i still dont understand what you mean by "this week's"
2013-09-09 05:21:38	Twey	augur: Never mind; it's not important
2013-09-09 05:21:52	augur	why cant you explain it tho? :(
2013-09-09 05:21:55	augur	im curious!
2013-09-09 05:22:15	Twey	augur: I did, but you didn't get it :þ  It's not important enough to try harder.
2013-09-09 05:22:23	augur	you didn't explain it!
2013-09-09 05:22:26	Twey	Just a turn of phrase.
2013-09-09 05:22:43	augur	what do you mean this week's plugin package
2013-09-09 05:22:44	Twey	augur: The joke is that every week there's a new favourite.
2013-09-09 05:23:07	augur	that "joke" only works if everyone is in on it. :|
2013-09-09 05:23:09	Twey	Obviously the changes happen less frequently than once a week; it's a humorous hyperbole.
2013-09-09 05:23:29	<--	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has quit (Quit: Quit)
2013-09-09 05:23:32	Twey	augur: So I explained it!
2013-09-09 05:23:34	augur	you gotta add some extra words explaining how your short form connects up!
2013-09-09 05:23:40	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-09-09 05:23:45	<--	zRecursive (~czsq888@171.216.96.18) has quit (Remote host closed the connection)
2013-09-09 05:23:51	augur	"plugin packages are this weeks package topic of choice" or something
2013-09-09 05:24:05	<--	mauke (~mauke@p3m/member/mauke) has quit (Read error: Operation timed out)
2013-09-09 05:24:09	-->	dalaing (~dalaing@124-171-227-199.dyn.iinet.net.au) has joined #haskell
2013-09-09 05:24:16	Twey	That's not what I meant, though :þ
2013-09-09 05:24:22	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-09 05:24:27	Driscoll	so Twey, is what I just posted a reasonable way to do it?
2013-09-09 05:24:45	-->	xl1 (~xl@111.199.155.235) has joined #haskell
2013-09-09 05:24:46	augur	Twey: then you are confusing!
2013-09-09 05:25:04	<--	xl1 (~xl@111.199.155.235) has left #haskell
2013-09-09 05:25:23	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-09 05:25:42	-->	xl1 (~xl@111.199.155.235) has joined #haskell
2013-09-09 05:26:08	-->	user123abc (~sally@c-67-171-79-251.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 05:27:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-09-09 05:27:50	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-09 05:28:58	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 05:30:27	<--	xl1 (~xl@111.199.155.235) has quit (Ping timeout: 260 seconds)
2013-09-09 05:30:29	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: G'night everynyan~!)
2013-09-09 05:30:35	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-09 05:30:45	Twey	Driscoll: I'd say so, yes
2013-09-09 05:30:52	user123abc	I'm getting started with haskell and am trying to learn the emacs tools
2013-09-09 05:31:11	user123abc	can I use haskell-mode to look up the types and definitions of symbols in my code?
2013-09-09 05:31:38	Driscoll	thanks Twey
2013-09-09 05:32:05	-->	kizzx2 (~Adium@59.148.47.146) has joined #haskell
2013-09-09 05:32:09	<--	kizzx2 (~Adium@59.148.47.146) has quit (Max SendQ exceeded)
2013-09-09 05:32:28	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-09 05:33:38	xpika	is there a cabal install flag for hiding a package?
2013-09-09 05:33:42	<--	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-09 05:33:59	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 05:34:27	<--	ISF (~ivan@201.82.138.219) has quit (Ping timeout: 264 seconds)
2013-09-09 05:36:10	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-09 05:36:15	-->	xl1 (~xl@111.199.155.235) has joined #haskell
2013-09-09 05:37:04	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-09 05:37:52	enthropy	xpika: cabal install tells ghc to -hide-all-packages
2013-09-09 05:38:22	enthropy	I think you have to edit the .cabal file to get rid of packages that are asked for there
2013-09-09 05:38:39	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-09 05:38:41	flebron	Question. Why is (*>)       :: Applicative f => f a -> f b -> f b, not (*>) = flip const?
2013-09-09 05:39:30	enthropy	flip const wouldn't be very useful
2013-09-09 05:39:33	flebron	(Following http://www.seas.upenn.edu/~cis194/lectures/11-applicative2.html , which asks one to implement (*>).)
2013-09-09 05:39:51	flebron	Well it's the first thing that comes to mind when seeing f a -> f b -> f b.
2013-09-09 05:39:57	-->	miclorb (~textual@1.146.207.50) has joined #haskell
2013-09-09 05:40:06	enthropy	it would mean you have an Applicative constraint there without needing it
2013-09-09 05:40:11	flebron	Indeed!
2013-09-09 05:40:12	hpaste	joelteon pasted “lazy parsing in attoparsec” at http://lpaste.net/92773
2013-09-09 05:40:20	joelteon	^ seems horribly horribly un-performant to me.
2013-09-09 05:40:43	Hafydd	:t flip const
2013-09-09 05:40:44	lambdabot	b -> c -> c
2013-09-09 05:40:47	joelteon	but it works
2013-09-09 05:41:04	joelteon	oh right, and I forgot a definition, one sec
2013-09-09 05:41:19	hpaste	joelteon annotated “lazy parsing in attoparsec” with “lazy parsing in attoparsec (annotation: forgot definition of 'chunk')” at http://lpaste.net/92773#a92774
2013-09-09 05:41:37	joelteon	but it definitely works
2013-09-09 05:41:43	joelteon	i just wonder if there's a better way
2013-09-09 05:41:52	Hafydd	@src (*>)
2013-09-09 05:41:52	lambdabot	(*>) = liftA2 (const id)
2013-09-09 05:42:16	Hafydd	@unpf (*>)
2013-09-09 05:42:16	lambdabot	(*>)
2013-09-09 05:42:27	Hafydd	@unpf liftA2 (const id)
2013-09-09 05:42:27	lambdabot	liftA2 (\ _ b -> b)
2013-09-09 05:42:42	pavonia	flebron: The (f a) thing wouldn't get executed with flip const
2013-09-09 05:42:54	-->	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has joined #haskell
2013-09-09 05:43:34	flebron	What does it mean to execute an f a?
2013-09-09 05:43:42	ekipan	depends on the f
2013-09-09 05:43:46	joelteon	let lazy a b = ([] <$ try b) <|> ((:) <$> a <*> lazy a b)
2013-09-09 05:43:49	joelteon	i like that definition better
2013-09-09 05:44:07	flebron	ekipan: Is there any meaning to executing an f a, then?
2013-09-09 05:44:30	ekipan	it's kind of the point of having applicative functors in the first place
2013-09-09 05:44:36	flebron	(I'm aware specific instances will define semantics for it, but surely there's a point to the word being used in the above sentence, without meaning a specific applicative.)
2013-09-09 05:45:23	<--	xpika (~alanhawki@d210-49-167-208.sun801.vic.optusnet.com.au) has quit (Ping timeout: 260 seconds)
2013-09-09 05:45:34	Hafydd	The two `f b' values can be different in the case of *>.
2013-09-09 05:45:36	pavonia	flebron: Well, I'm not sure "execute" is the correct term here
2013-09-09 05:45:51	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Ping timeout: 260 seconds)
2013-09-09 05:45:51	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-09 05:45:52	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-09 05:45:52	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-09 05:45:54	-->	xpika (~alanhawki@d110-33-160-244.sun801.vic.optusnet.com.au) has joined #haskell
2013-09-09 05:46:19	<--	timemage (~user@unaffiliated/timemage) has quit (Ping timeout: 268 seconds)
2013-09-09 05:46:41	pavonia	maybe "to reveal the effect of the specific Applicative" is a better one :P
2013-09-09 05:47:42	 *	flebron is unsure what (*>) is supposed to be
2013-09-09 05:47:50	<--	sferry_ (~samuel@143.226.94.218) has quit (Ping timeout: 240 seconds)
2013-09-09 05:47:57	joelteon	it's <*> ignoring the left hand side
2013-09-09 05:47:58	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-09 05:48:04	joelteon	discarding, not ignoring.
2013-09-09 05:48:06	enthropy	> Nothing *> Just 2
2013-09-09 05:48:07	lambdabot	  Nothing
2013-09-09 05:48:16	ekipan	it's the same thing as (>>)
2013-09-09 05:48:17	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-09 05:48:20	ekipan	in Monad
2013-09-09 05:48:33	pavonia	> (flip const) Nothing $ Just 2
2013-09-09 05:48:34	lambdabot	  Just 2
2013-09-09 05:48:39	flebron	well in >>'s case i define it with bind
2013-09-09 05:48:53	Hafydd	> Nothing *> Just "kidding"
2013-09-09 05:48:54	lambdabot	  Nothing
2013-09-09 05:49:13	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 05:49:17	ekipan	> "abc" *> "de"
2013-09-09 05:49:18	lambdabot	  "dedede"
2013-09-09 05:49:33	Hafydd	"abc" *> "haue"
2013-09-09 05:49:34	flebron	I see the examples, but I'm not getting what it _is_ :p
2013-09-09 05:49:36	Hafydd	> "abc" *> "haue"
2013-09-09 05:49:37	lambdabot	  "hauehauehaue"
2013-09-09 05:50:21	Hafydd	@src liftA2
2013-09-09 05:50:21	lambdabot	liftA2 f a b = f <$> a <*> b
2013-09-09 05:50:32	flebron	Though I guess that's the conceptual problem I'm trying to solve - I understood Functor well enough, and Monads do seem to be a computational model (i.e. the definition of concatenation and composition of procedures), but applicative just stands weirdly in the middle
2013-09-09 05:50:39	ekipan	Parsed <$> string "stuff you want to parse, but ignore" *> string "argument to Parsed"
2013-09-09 05:51:09	enthropy	don't you need parentheses there?
2013-09-09 05:51:14	ekipan	probably
2013-09-09 05:51:44	enthropy	yeah, everything is infixl 4
2013-09-09 05:52:03	enthropy	so you're getting:    (Parsed <$> string "stuff you want to parse, but ignore") *> string "argument to Parsed"
2013-09-09 05:53:04	pavonia	flebron: Have you read http://www.soi.city.ac.uk/~ross/papers/Applicative.html ? I think it's the first publication of Applicatives
2013-09-09 05:53:32	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-09-09 05:53:43	ekipan	Paragraph <$> (string "<p>" *> contents <* string "</p>")
2013-09-09 05:53:48	flebron	nope
2013-09-09 05:54:01	flebron	pavonia: is that the recommended way to understand what applicatives are?
2013-09-09 05:54:06	fylwind	i learned applicatives by using Parsec
2013-09-09 05:54:12	pavonia	flebron: I think so
2013-09-09 05:54:14	<--	Pip (~Pip__@unaffiliated/pip) has quit (Ping timeout: 256 seconds)
2013-09-09 05:55:16	-->	dan_f (~dfeltey@c-67-186-154-39.hsd1.ct.comcast.net) has joined #haskell
2013-09-09 05:56:14	<--	user123abc (~sally@c-67-171-79-251.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-09 05:56:57	<--	dan_f (~dfeltey@c-67-186-154-39.hsd1.ct.comcast.net) has quit (Client Quit)
2013-09-09 05:57:31	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 05:57:35	dmj`	pavonia: Applicatives are in between functors and monads in power
2013-09-09 05:57:49	pavonia	yes
2013-09-09 05:58:20	-->	thakhad-24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has joined #haskell
2013-09-09 05:58:33	dmj`	pavonia: they just allow you to apply a function already inside an applicative context to a value inside a context.
2013-09-09 05:59:04	dmj`	 Just (+1) <*> Just 1
2013-09-09 05:59:14	dmj`	> Just (+1) <*> Just 1
2013-09-09 05:59:15	lambdabot	  Just 2
2013-09-09 05:59:19	-->	tanakh (~tanakh@HKRnm1709.tokyo-ip.dti.ne.jp) has joined #haskell
2013-09-09 05:59:25	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-09 05:59:26	pavonia	dmj`: Yeah, I know :P
2013-09-09 05:59:55	dmj`	pavonia: oops that was meant for flebron
2013-09-09 05:59:58	joelteon	yeah I think you're preaching to the choir heh
2013-09-09 06:00:13	-->	jaya_ (~jaya@117.192.187.94) has joined #haskell
2013-09-09 06:00:19	<--	tanakh (~tanakh@HKRnm1709.tokyo-ip.dti.ne.jp) has quit (Client Quit)
2013-09-09 06:00:30	<--	thakhad-24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has quit (Client Quit)
2013-09-09 06:00:43	-->	thakhad24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has joined #haskell
2013-09-09 06:01:50	<--	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-09 06:02:44	-->	rnons (~rnons@183.152.62.146) has joined #haskell
2013-09-09 06:03:47	<--	thakhad24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has quit (Client Quit)
2013-09-09 06:04:27	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Ping timeout: 256 seconds)
2013-09-09 06:05:48	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 06:06:07	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-09-09 06:06:58	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-09 06:10:14	-->	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has joined #haskell
2013-09-09 06:10:47	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 06:10:50	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-09 06:11:17	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 06:11:29	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 06:12:12	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 06:12:26	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-09 06:13:21	AfC	If I have a record type in a module which I'm exporting, should I a) use TypeName(..) or b) export the field names functions explicitly, or c) ...?
2013-09-09 06:13:43	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-09 06:14:04	enthropy	option a looks better in haddock
2013-09-09 06:14:25	AfC	enthropy: ah, right
2013-09-09 06:14:53	enthropy	c might be to not list any exports explicitly at all
2013-09-09 06:15:08	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 245 seconds)
2013-09-09 06:15:16	AfC	enthropy: yeah, but as soon as you have one you need to do it "Right"
2013-09-09 06:15:41	AfC	enthropy: thanks
2013-09-09 06:15:46	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 06:16:00	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-09 06:16:15	joelteon	I usually don't export data constructors just to avoid breaking old code if I add fields
2013-09-09 06:16:45	-->	canissimia_ (~canissimi@unaffiliated/canissimia) has joined #haskell
2013-09-09 06:16:57	-->	Lefeni (~Lefeni@c-0941e555.143-16-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-09-09 06:17:01	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-09 06:17:07	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-09 06:17:35	<--	Moggle (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 260 seconds)
2013-09-09 06:17:40	AfC	joelteon: I've definitely done that in other contexts - so much so that in those places I've made explicit functions that have useful names wrapping the cryptic field name [functions]
2013-09-09 06:18:31	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 06:19:44	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-09 06:19:46	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 06:19:56	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Quit: leaving)
2013-09-09 06:20:01	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: No route to host)
2013-09-09 06:20:03	<--	canissimia (~canissimi@unaffiliated/canissimia) has quit (Ping timeout: 264 seconds)
2013-09-09 06:20:35	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-09 06:20:44	-->	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has joined #haskell
2013-09-09 06:21:44	<--	rnons (~rnons@183.152.62.146) has quit (Read error: Connection reset by peer)
2013-09-09 06:23:38	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-09 06:24:06	<--	xpika (~alanhawki@d110-33-160-244.sun801.vic.optusnet.com.au) has quit (Ping timeout: 248 seconds)
2013-09-09 06:24:48	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-09 06:25:15	<--	mno2 (~mno2@wlan46.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-09 06:26:18	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-09 06:26:45	<--	xinming (~xinming@125.84.22.225) has quit (Ping timeout: 240 seconds)
2013-09-09 06:26:48	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 06:27:33	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 06:27:54	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-09 06:28:20	--	hdevalence is now known as hdevalence|away
2013-09-09 06:28:36	-->	chatsiri_ (~chatsiri_@158.108.167.170) has joined #haskell
2013-09-09 06:29:00	-->	xinming (~xinming@125.82.206.178) has joined #haskell
2013-09-09 06:30:39	<--	sferry (~samuel@atheme/member/samferry) has quit (Ping timeout: 240 seconds)
2013-09-09 06:32:16	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 264 seconds)
2013-09-09 06:32:29	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 06:32:30	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-09 06:34:55	<--	Sculptor_ (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-09 06:37:05	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Ping timeout: 245 seconds)
2013-09-09 06:38:14	-->	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-09 06:40:05	<--	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has quit (Remote host closed the connection)
2013-09-09 06:40:06	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 06:40:19	-->	SrPx (b16266fc@gateway/web/freenode/ip.177.98.102.252) has joined #haskell
2013-09-09 06:40:21	<--	path[l] (~vsi@173.252.71.189) has quit (Read error: Connection reset by peer)
2013-09-09 06:42:06	SrPx	Hey guys, I've been trying to accept the strong typing but the first thing I try to do in Haskell - work with some JSON objects I have - is proving to be a pain. Where in LiveScript all I need is `obj=JSON.parse(data); log obj.foo.bar.x;`, in Haskell seems like I have to write a schema for my JSON in the form of types :/
2013-09-09 06:43:25	SrPx	As I see it now, it just hinders my productivity for no good... is there any thing I can do? Are there tricks around that? Or a reasoning why that should be necessary?
2013-09-09 06:44:04	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 06:44:05	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-09 06:44:25	--	kaol_ is now known as kaol
2013-09-09 06:44:43	dmj`	SrPx: You mean, writing instances for FromJSON and ToJSON?
2013-09-09 06:44:55	<--	sprang (~sprang@c-24-6-190-165.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-09 06:44:55	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 06:45:05	dalaing	SrPx: for some higher level information on static types - http://gbaz.github.io/slides/hurt-statictyping-07-2013.pdf
2013-09-09 06:45:40	SrPx	dmj`: if I understood correctly, before working with the JSON I have to write a whole schema - as in, translating the shape of the JSON to Haskell types - and then some additional boilerplate to convert JSON to that schema and vice versa.
2013-09-09 06:45:53	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-09 06:46:07	-->	phischu (~pschuster@p4FD3263B.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 06:46:11	SrPx	dalaing: ok I will read that carefully :/
2013-09-09 06:46:16	copumpkin	"fail early"
2013-09-09 06:46:30	-->	Gentlecat (~Roman@79.105.226.37) has joined #haskell
2013-09-09 06:46:35	copumpkin	you could load a json object in livescript and half an hour later try to get obj.foo.bar.x
2013-09-09 06:46:40	copumpkin	and then it will fail because the input was bad
2013-09-09 06:46:43	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 264 seconds)
2013-09-09 06:46:55	copumpkin	it's the usual argument for static typing
2013-09-09 06:47:03	copumpkin	a little more up-front work for better reliability down the road
2013-09-09 06:47:10	dmj`	SrPx: I suppose it would depend on what library you are using. Have you tried aeson?
2013-09-09 06:47:12	SrPx	but as I see it now, as much as I want to believe that a strong typing system helps for some things, at this moment it is just making me completely unable to do some simple json manipulations. And that is the experience I have to judge ...!
2013-09-09 06:47:18	SrPx	dmj`: yes
2013-09-09 06:47:26	copumpkin	we could design a JSON library for haskell that gave you a super easy interface but it's kind of against our principles
2013-09-09 06:47:36	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Ping timeout: 260 seconds)
2013-09-09 06:47:44	<--	kobain (~kobian@unaffiliated/kobain) has quit (Remote host closed the connection)
2013-09-09 06:47:46	copumpkin	SrPx: it might be the experience you have to judge, but you owe it to yourself not to be short-sighted, either
2013-09-09 06:47:48	SrPx	copumpkin: problem is I'm working with livescript for months already and I've never had a problem similar to that :/ I write my code carefully
2013-09-09 06:48:03	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-09 06:48:04	<--	pavonia (~user@p5B14C5C4.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-09 06:48:05	copumpkin	SrPx: we mostly don't want to have to rely on our own good self discipline
2013-09-09 06:48:09	SrPx	copumpkin: sure, that is why I'm going to keep trying
2013-09-09 06:48:10	copumpkin	teams and such, especially
2013-09-09 06:48:18	copumpkin	anyway, I agree it's kind of painful
2013-09-09 06:48:18	dibblego	I do wonder if copumpkin is over-reaching with apologies
2013-09-09 06:48:38	BMeph	SrPx: Correct me if I'm wrong, but has your experience been in programming with languages that are object-oriented?
2013-09-09 06:48:43	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-09-09 06:48:43	copumpkin	dibblego: I apologize if I'm over-reaching with apologies
2013-09-09 06:49:06	dalaing	SrPx: I did a lot of Python before I started doing Haskell.  A little while ago I was told I could use whatever language I wanted for a little throw away program.  I did it in Haskell, it took a couple of hours, and a few minutes of writing tests (via QuickCheck) revealed a problem, and all was well
2013-09-09 06:49:27	copumpkin	I don't like dealing with JSON in Haskell either :)
2013-09-09 06:49:36	dalaing	SrPx: the next day I was told that by "whatever language I wanted" it was meant "Python", so I rewrote it in Python
2013-09-09 06:49:53	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 06:49:59	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-09 06:50:07	BMeph	copumpkin: Considering what JSON is, I'm honestly surprised at how much effort is made to be able to use it in Haskell. :\
2013-09-09 06:50:08	dalaing	SrPx: it took a little longer to write it in Python, but it took a day of writing tests to get it most of the way to the same level of confidence
2013-09-09 06:50:26	dmj`	SrPx: It's really not that hard with aeson. Suppose we had a person... data Person { firstName :: !Text, lastName :: !Text } deriving (Show, Generic)
2013-09-09 06:50:28	copumpkin	I could envision a simpler interface that requires less type modeling
2013-09-09 06:50:34	copumpkin	and is still reasonably safe
2013-09-09 06:50:46	SrPx	BMeph: no, I guess I can consider LiveScript to be FP, at least how I use it. Just without the Types. I love FP, I use high order functions all the time, my whole codebase consists of small functions combined, composed, etc. I just don't get typing yet, or why it is so tied to FP. But maybe it is a matter of time
2013-09-09 06:50:56	dmj`	SrPx: then you can declare instance FromJSON Person and instance ToJSON Person.
2013-09-09 06:51:02	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-09 06:51:09	 *	copumpkin tharps
2013-09-09 06:51:11	SrPx	a sec too many messages
2013-09-09 06:51:17	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-09 06:51:18	 *	copumpkin goes to sleep :)
2013-09-09 06:51:48	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-09 06:51:58	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 06:52:12	dmj`	SrPx: main = do { x <- (eitherDecode <$> getJSON) :: IO (Either String [Person]); case x of { Right p -> print p; Left _ -> error ":(" }  }
2013-09-09 06:52:25	SrPx	dalaing: what was it specifially?
2013-09-09 06:52:46	<--	khumba (~khumba@c-76-104-197-18.hsd1.wa.comcast.net) has quit (Quit: Leaving)
2013-09-09 06:52:47	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-09 06:52:47	dmj`	SrPx: basically, read this article. https://www.fpcomplete.com/school/text-manipulation/json
2013-09-09 06:53:25	dalaing	SrPx: it was code to parse several log files and do some stats on them
2013-09-09 06:53:31	AfC	SrPx: I just had to build a ridiculous cascade of types to extract a mere three fields from a huge nested JSON resposnse
2013-09-09 06:53:40	<--	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-09 06:53:50	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-09 06:53:55	SrPx	dmj`: what if my objects don't follow a schema? For example, I have some players with a "KI" attribute, which is a number measuring a kind of power. But other players don't have that attribute at all. Now this is just an example, but how would encoding that type even work?
2013-09-09 06:54:09	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-09 06:54:10	SrPx	AfC: ... proceed
2013-09-09 06:54:36	<--	dibblego (~nobody@baldrick.qut.edu.au) has left #haskell ("λ")
2013-09-09 06:54:43	SrPx	dmj`: ok just after that article on types
2013-09-09 06:54:44	AfC	I'm saying it was fucking awful. I tried to make lens-aeson work, but I don't think it's ready yet.
2013-09-09 06:54:54	dalaing	SrPx: there's Maybe for that - it's a type constructor, so Maybe Int is an Int that may or may not be there, Maybe String is a string that may or may not be there, etc...
2013-09-09 06:55:00	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-09 06:55:03	SrPx	AfC: so, your opinion on the typing thing? :/
2013-09-09 06:55:07	AfC	Now obviously I now have Haskell types that will help me be correct yada yada
2013-09-09 06:55:28	SrPx	dalaing: OK, I didn't know maybe worked like that, inside structs. Interesting
2013-09-09 06:55:43	dmj`	SrPx: can you share a sample .json file?
2013-09-09 06:56:03	dmj`	SrPx: So I can see specifically what you mean
2013-09-09 06:56:07	<--	roboguy_ (~roboguy_@198.59.124.24.cm.sunflower.com) has quit (Remote host closed the connection)
2013-09-09 06:57:03	-->	aneal (~aneal@2001:da8:e000:1a02:4c96:e66b:2b2e:2f5e) has joined #haskell
2013-09-09 06:57:34	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-09 06:57:54	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-09 06:58:17	SrPx	dmj`: it is not a "specific" json, i've been working with LS for months so everything I do involving communication has a JSON as a data carrier, so the thing is that if I have to formalize it everytime I want to pass a new kind of message between client/server, I will waste a good amount of time doing so :/
2013-09-09 06:58:26	SrPx	dmj`: i can send you something, though, let me see
2013-09-09 06:58:27	edwardk	AfC: what were you trying to do?
2013-09-09 06:58:37	<--	aneal (~aneal@2001:da8:e000:1a02:4c96:e66b:2b2e:2f5e) has quit (Client Quit)
2013-09-09 06:59:46	-->	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-09 06:59:47	--	squimmy_ is now known as squimmy
2013-09-09 07:00:15	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 264 seconds)
2013-09-09 07:00:35	-->	akurei__ (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-09 07:00:50	-->	zRecursive (~czsq888@221.237.92.73) has joined #haskell
2013-09-09 07:00:59	<--	akurei_ (~akurei@lak-31-142.wohnheime.ruhr-uni-bochum.de) has quit (Read error: Operation timed out)
2013-09-09 07:01:19	dalaing	SrPx: whether or not it's a waste of time depends on how much you value robustness - in your obj=JSON.parse(data); log obj.foo.bar.x, what do you want to happen if foo or bar aren't there?
2013-09-09 07:01:55	SrPx	dalaing: but it always is :/
2013-09-09 07:02:03	Twey	SrPx: Typing is bound up with FP because typing is the killer feature for FP
2013-09-09 07:02:25	edwardk	AfC: your testimonial is rather different than all the other lens-aeson testimonials so i'm really trying to figure out where the impedence mismatch comes from
2013-09-09 07:02:28	dalaing	SrPx: if you can lock down that behaviour by describing the type you're expecting, then you might have fewer surprises down the road (or fewer typos or thinkos at the end of a long day)
2013-09-09 07:02:41	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Quit: Leaving.)
2013-09-09 07:02:55	SrPx	OK I'm coming to the conclusion haskell is probably one of the greatest, safest languages out there, maybe the world would be a better, safer place if everything was in haskell... but it probably isn't the best thing when you really care about writing programs fast. Maybe it is not meant to
2013-09-09 07:03:01	<--	Vicfred (~Vicfred@187.206.29.185) has quit (Quit: Leaving)
2013-09-09 07:03:24	-->	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has joined #haskell
2013-09-09 07:03:28	dalaing	SrPx: like I said before, I used to do a lot of Python, and I code faster in Haskell now
2013-09-09 07:03:34	Twey	SrPx: For a safe language, Haskell does surprisingly well on the convenience front, too
2013-09-09 07:03:46	edwardk	SrPx: depends on how much you expect those 'fast' programs to do. i think faster in haskell than i do in any other language at this point
2013-09-09 07:03:59	<--	LeNsTR (~lenstr@master.qs.biz) has quit (Changing host)
2013-09-09 07:03:59	-->	LeNsTR (~lenstr@unaffiliated/lenstr) has joined #haskell
2013-09-09 07:04:20	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 07:04:21	Twey	There are probably people who can code Perl faster, but I'd rather use Haskell for quick, throwaway things than most other languages (Python, C++, Java, &c.)
2013-09-09 07:04:26	SrPx	yes, I could probably be miles faster in Haskell than in C++. but I guess livescript was the right combination of tools and trashy typing that is perfect to get my stuff working asap,  and that is probably hard to beat with a well designed language (sadly?)
2013-09-09 07:04:28	edwardk	SrPx: it takes a while to get back up to speed relative to what you had before, but a lot of that is familiarity with a different ecosystem, everything having new names, etc.
2013-09-09 07:04:56	SrPx	i guess i will give it another try when I have less strict deadlines, though
2013-09-09 07:04:59	Twey	LiveScript seems… dubious.  Javascript isn't really known for its terseness.  :þ
2013-09-09 07:05:30	-->	shintah (bebble@h-151-134.a336.priv.bahnhof.se) has joined #haskell
2013-09-09 07:06:04	dalaing	SrPx: these are pretty good lecture notes with excellent homework exercises, btw - http://www.seas.upenn.edu/~cis194/lectures.html
2013-09-09 07:06:51	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 07:07:00	dalaing	SrPx: I was initially skeptical about Haskell, and I think the main thing that changed for me was that my definition of "working" got more and more rigorous
2013-09-09 07:07:08	edwardk	i don't recommend picking up haskell on a deadline
2013-09-09 07:07:27	SrPx	dalaing: working?
2013-09-09 07:07:33	SrPx	edwardk: why
2013-09-09 07:07:47	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-09 07:07:58	dalaing	SrPx: from "to get stuff working asap" in your last message
2013-09-09 07:08:00	SrPx	Twey: LiveScript is pretty terse, certainly more than haskell as it doesn't have the type annotations
2013-09-09 07:08:02	edwardk	SrPx: because most languages involve picking up a little bit of syntax and then you're up to speed modulo looking up some things as you go
2013-09-09 07:08:27	<--	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has quit (Ping timeout: 260 seconds)
2013-09-09 07:08:30	<--	akurei__ (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 256 seconds)
2013-09-09 07:08:31	edwardk	SrPx: my experience is that type inference allows me to elide more code than type annotations cost me at the top level.
2013-09-09 07:09:18	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-09 07:09:22	SrPx	dalaing: I see, I mean if I was in charge of making a huge database system or a medical software or something like that, there is no way I'd be using a scripty language. I guess I just thought haskell was a serious language that was so good it worked for throwaway programs aswell as scripty langs, which does not seem to be the case
2013-09-09 07:09:35	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 268 seconds)
2013-09-09 07:09:36	edwardk	because i don't have to explicitly name exactly what namespace i want to go look for a given member in as often as not. what monoid? doesn't matter, mappend, it'll figure out which one i mean. what monad? doesn't matter. return.
2013-09-09 07:10:06	dalaing	SrPx: I respectfully disagree :)
2013-09-09 07:10:11	<--	cdidd (~cdidd@128-68-139-216.broadband.corbina.ru) has quit (Ping timeout: 268 seconds)
2013-09-09 07:10:17	scripty	SrPx you mentioned my name ;)
2013-09-09 07:10:18	Twey	SrPx: Almost all type annotations aren't required in Haskell.  The verbosity of ECMAScript syntax is far greater than of Haskell syntax, even in the rare case that you do have to use a type annotation or two.
2013-09-09 07:10:25	-->	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has joined #haskell
2013-09-09 07:10:27	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 07:10:27	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 264 seconds)
2013-09-09 07:10:47	ekipan	function and return are pretty heavy-handed keywords
2013-09-09 07:11:03	Twey	(and in those rare cases it's usually to help you track down a bug that would be more effort to find without the type annotation, so you save on time again)
2013-09-09 07:11:04	edwardk	i wrote a _lot_ of untyped code in perl/python/javascript before I found haskell. heck i wrote a javascript compiler along the way, but the sheer utility of having fmap just 'do what you mean' and still be able to reason about it unlike the perl hacks is a pretty big deal.
2013-09-09 07:11:22	dalaing	SrPx: I think I've only _just_ crossed my personal limit for talking about languages with Haskell, but I'd be surprised if I changed my mind too radically as time went on
2013-09-09 07:11:46	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-09 07:12:07	dalaing	(limit == 10k lines, ideally in production but not in this case)
2013-09-09 07:12:12	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-09 07:12:25	edwardk	my experience with perl/python/javascript is i didn't dare 'think big' beyond a certain scale, because i couldn't have any belief that the code paths i wasn't actively testing were any good. this led to a culture of fear, defensive testing through TDD-like tools to try to get some semblance of the functionality that the types give you for free
2013-09-09 07:12:30	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 07:12:47	SrPx	edwardk: yea and the fact I don't understand what you said means I really should try a little further before I take conclusions
2013-09-09 07:12:48	--	LeNsTR is now known as lenstr
2013-09-09 07:12:55	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 07:12:58	enthropy	how could a FFI work to call haskell functions from a scripting language?
2013-09-09 07:13:03	Twey	↑ what edwardk said is also my experience
2013-09-09 07:13:08	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-09 07:13:08	SrPx	scripty: woops. haha
2013-09-09 07:13:10	pharaun	edwardk: we have 1-1.5m sloc python codebase at work
2013-09-09 07:13:12	enthropy	where that language is written in a quasiquote
2013-09-09 07:13:23	pharaun	edwardk: let's put it this way... its... "exciting" to refactor it
2013-09-09 07:13:30	pharaun	so people. usually dont
2013-09-09 07:13:32	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-09 07:13:47	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-09 07:13:50	SrPx	dalaing: I didn't understand what you said/disagreed
2013-09-09 07:13:58	edwardk	pharaun: i've had some pretty darn scary python codebases myself. what i love about haskell is i don't think twice about massively refactoring an API. when I'm done assuming i didn't do anythng dumb with loop indices (why would i have any of those!) it just works
2013-09-09 07:14:08	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-09 07:14:09	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 07:14:11	Twey	Furthermore, I notice that most languages (even functional languages) with weaker type systems don't tend to use the complex combinators that seem so natural in Haskell, and where they do appear require a lot more thought to use correctly (Clojure)
2013-09-09 07:14:22	SrPx	edwardk: uh huh makes a lot of sense, haskell if very good for big projects isnt it?
2013-09-09 07:14:38	dalaing	SrPx:  I was disagreeing with "I guess I just thought haskell was a serious language that was so good it worked for throwaway programs aswell as scripty langs, which does not seem to be the case"
2013-09-09 07:14:52	dissipate_	Twey, why is there so much tension in the FP community between Haskell and Clojure?
2013-09-09 07:14:53	pharaun	edwardk: yup :) that's the real lovely thing about haskell for me
2013-09-09 07:15:06	SrPx	edwardk: I guess the whole safety thing makes it much easier to trust in the whole codebase as you keep scaling to the next levels
2013-09-09 07:15:30	dissipate_	pharaun, why do i keep reading complaints about space leaks in haskell?
2013-09-09 07:15:37	SrPx	dalaing: so you thin it is as good as script.y langs for throwaway programs?
2013-09-09 07:15:54	pharaun	dissipate_: because space leaks are context dependent and one of those harder to reason aspect about the language unfortunately
2013-09-09 07:15:56	dalaing	SrPx: yeah, although I wasn't convinced for quite a while
2013-09-09 07:16:00	edwardk	SrPx: for me, what i like about haskell is that it doesn't get in the way of code reuse for me. i mentioned this a few times elsewhere, but my experience is that haskell lets me actually achieve what "object-oriented programming" has been trying to achieve, which is that the code that i write is pretty much automatically reusable. you solve the general problem once and move on to new problems and laziness makes sure your
2013-09-09 07:16:00	edwardk	 algorithms compose, purity makes sure you didn't sneak in some dumb one-off hack that you'll forget in 6 months
2013-09-09 07:16:06	Twey	dissipate_: Is there?
2013-09-09 07:16:37	dissipate_	Twey, i dunno. i keep seeing Haskell pop up in #clojure and vice versa
2013-09-09 07:16:43	SrPx	edwardk: amazing, that was the kind of feedback I was expecting. makes a lot of sense
2013-09-09 07:16:47	edwardk	i have a _lot_ of haskell code out there. i tried to have comparable levels of coverage of concepts in other languages and failed miserably.
2013-09-09 07:17:02	AfC	edwardk: hey
2013-09-09 07:17:04	SrPx	edwardk: also you message got clipped
2013-09-09 07:17:05	edwardk	i'd always want to tweak something and it was like playing jenga
2013-09-09 07:17:07	Twey	dissipate_: If I had to guess, it's because Clojure and Haskell represent the opposite ends of the FP spectrum.  But this is the first time I've talked about Clojure in #haskell, I think.
2013-09-09 07:17:10	AfC	edwardk: (sorry, was in a meeting)
2013-09-09 07:17:19	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 260 seconds)
2013-09-09 07:17:22	edwardk	AfC: so what was it that blew up for you with lens-aeson?
2013-09-09 07:17:29	AfC	edwardk: I was trying to follow the examples and kept getting AsValue => ... errors
2013-09-09 07:17:40	Twey	dissipate_: Clojure takes a lot of ideas from Haskell, but without the types the complexity feels a bit overwhelming
2013-09-09 07:17:42	dissipate_	Twey, opposite ends of the FP spectrum in what way?
2013-09-09 07:17:52	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 07:18:07	edwardk	>>> "[12,13,{\"x\":42}]"^?nth 2.key "x"._Integer
2013-09-09 07:18:08	edwardk	Just 42
2013-09-09 07:18:08	<--	scripty (~scripty@117.192.187.94) has quit (Ping timeout: 256 seconds)
2013-09-09 07:18:09	-->	cdidd (~cdidd@128-68-6-99.broadband.corbina.ru) has joined #haskell
2013-09-09 07:18:15	<--	jaya_ (~jaya@117.192.187.94) has quit (Ping timeout: 260 seconds)
2013-09-09 07:18:27	 *	AfC tries again
2013-09-09 07:18:29	Twey	dissipate_: Clojure is untyped, has no control of effects, and focuses on syntax, whereas Haskell is all about its types
2013-09-09 07:18:30	edwardk	were you trying to use a custom ToJSON/FromJSON or something?
2013-09-09 07:18:44	SrPx	Twey: in what sense they represent the oposite ends of FP?
2013-09-09 07:18:56	SrPx	edwardk: wat
2013-09-09 07:18:56	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-09 07:18:58	AfC	edwardk: I was forced to, yes; the incoming keys have capital letters
2013-09-09 07:19:02	dissipate_	Twey, what?? it does have control over side effects and has almost no syntax.
2013-09-09 07:19:12	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-09 07:19:19	dissipate_	Twey, BTW, there is typed clojure, but it is optional.
2013-09-09 07:19:24	edwardk	SrPx: addressing afc's concerns about something unrelated
2013-09-09 07:19:31	SrPx	oh ok
2013-09-09 07:19:46	Twey	dissipate_: I've always said that it's silly to describe Haskell as a ‘functional’ language: the thing that sets Haskell apart is its type system.  The fact that it's a functional language is just a way to make that work.
2013-09-09 07:20:14	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 07:20:21	edwardk	afc: if you have a custom ToJSON/FromJSON instance for something, and you've drilled to it you can use the _JSON prism to get it out
2013-09-09 07:20:31	arkeet	haskell is a language that is functional. it works.
2013-09-09 07:20:32	AfC	edwardk: oh!
2013-09-09 07:20:39	edwardk	>>> "[12,13,{\"x\":yourcrazyinstancegoeshere}]"^?nth 2.key "x"._JSON
2013-09-09 07:20:46	 *	arkeet has met a few dysfunctional languages
2013-09-09 07:20:48	AfC	AAAAAAAAAhhhhhhhhhhhhhh
2013-09-09 07:20:51	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 07:21:02	jack_rabbit	 arkeet I see what you did there.
2013-09-09 07:21:16	edwardk	afc: nth, key, etc. all give you the 'Value' types you get out of Aeson
2013-09-09 07:21:18	AfC	edwardk: is the type of _JSON :: Value ?
2013-09-09 07:21:29	AfC	(wait, me looks)
2013-09-09 07:21:29	Twey	dissipate_: Good to know; I don't think that existed when I tried Clojure (or I just didn't dig deep enough).  By ‘no control over effects’ I meant that it has no effect typing.  Likewise, that lack of syntax is precisely what Clojure aims for; Haskell doesn't try to have an elegant syntax like that, instead preferring to support equational reasoning independent of the code's representation
2013-09-09 07:21:37	dissipate_	Twey, yes, i am interested in learning Haskell, but i'm currently more interested in learning Clojure. one major downside to Haskell IMO is that it doesn't compile to the JVM.
2013-09-09 07:21:40	edwardk	_JSON :: (ToJSON a, FromJSON a) => Prism' Value a  -- more or less
2013-09-09 07:21:58	arkeet	dissipate_: scala is probably closer to haskell
2013-09-09 07:22:01	edwardk	we're composing a fold on the right hand side of ^? there
2013-09-09 07:22:04	arkeet	and it's a JVM language
2013-09-09 07:22:13	pharaun	clojure does have the io! thing iirc
2013-09-09 07:22:20	pharaun	for banning io in function iirc
2013-09-09 07:22:29	arkeet	but I think it's worth just using haskell for a while.
2013-09-09 07:22:37	arkeet	scala lets you fall back into old habits.
2013-09-09 07:22:41	AfC	edwardk: gotcha. I have the lens-aeson docs up now
2013-09-09 07:22:47	tabemann	Scala to me just seems like a slightly better Java
2013-09-09 07:22:58	Twey	pharaun: It's not a type, though, which is the point
2013-09-09 07:23:03	dissipate_	Twey, you might want to check this out: https://github.com/clojure/core.typed
2013-09-09 07:23:04	arkeet	"slightly" seems like an understatement.
2013-09-09 07:23:09	edwardk	if you wanted to get out all of the children of an array as your json objects you can do foo^.._Array.each._JSON   and each will deserialize
2013-09-09 07:23:25	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-09 07:23:28	edwardk	AfC: lens-aeson was something definitely written for folks who know how to use lens, so the examples lead a _lot_ to be desired
2013-09-09 07:23:32	AfC	edwardk: ok, well that's useful to know. If I end up getting it working, and can contribute a useful example, I'll send you a patch
2013-09-09 07:23:38	-->	functorfun (~functorfu@27-32-126-85.static.tpgi.com.au) has joined #haskell
2013-09-09 07:23:41	--	functorfun is now known as funfunctor
2013-09-09 07:23:43	edwardk	but there is a whole channel #haskell-lens full of people who know how to use it and who are willing to help
2013-09-09 07:23:47	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-09 07:24:05	edwardk	and we're more than happy to take constructive criticism and patches for the docs
2013-09-09 07:24:10	AfC	edwardk: yeah. I was sorta wildly optimistic that I would learn how to use lens by a motivating example that would really help me out
2013-09-09 07:24:26	dissipate_	Twey, also related is Clojure has contracts: https://github.com/clojure/core.contracts
2013-09-09 07:24:39	edwardk	afc: did you see https://www.fpcomplete.com/user/tel/lens-aeson-traversals-prisms ?
2013-09-09 07:24:51	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-09-09 07:24:56	AfC	I did. That was what I was trying to follow
2013-09-09 07:24:58	dissipate_	arkeet, yeah, i'm not interested in scala at all. seems like a 'better' java. i'm trying to get away from OOP.
2013-09-09 07:24:59	pharaun	Twey: yeah, i'm having no luck with adoption of haskell at work
2013-09-09 07:25:09	arkeet	dissipate_: you should try out haskell. ;)
2013-09-09 07:25:10	pharaun	but folks are starting to adopt clojure, i have no idea what to think
2013-09-09 07:25:12	pharaun	about that
2013-09-09 07:25:21	AfC	edwardk: actually the most accessible description of how Lens & friends work
2013-09-09 07:25:22	pharaun	but as a fan of functional language i think its a nice thing
2013-09-09 07:25:27	--	kqr1 is now known as kqr
2013-09-09 07:25:30	-->	dibblego (~nobody@baldrick.qut.edu.au) has joined #haskell
2013-09-09 07:25:32	SrPx	Twey: so now that you said that, do you think haskell would be dependently typed if it was invented later?
2013-09-09 07:25:44	AfC	edwardk: I'd yet come across [and I've been following your work for a while; so nicely done there]
2013-09-09 07:25:46	dissipate_	arkeet, i want to, but i'm more interested in clojure right now. i'm very turned on to macros.
2013-09-09 07:25:46	Twey	dissipate_: There's really only so far you can go with gradual typing — people think that it's good to offer multiple options, and it's true that having the option to type a function or two is definitely a boon when writing programs, but it's totally different to having a whole typed ecosystem
2013-09-09 07:26:02	Twey	SrPx: Uhhm, probably
2013-09-09 07:26:16	edwardk	AfC: tekmo has a nice little intro that focuses on how to just use them to muck around in some data with multiple targets from a game perspective
2013-09-09 07:26:29	AfC	edwardk: thanks. I'll have a peek for that.
2013-09-09 07:26:29	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 07:26:36	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 07:26:37	SrPx	dissipate_: how is not compiling to JVM a disadvantage?!
2013-09-09 07:26:43	dissipate_	Twey, yep, i agree. for now i'm willing to live without typing.
2013-09-09 07:26:44	AfC	edwardk: [trying to keep up with Tekmo is even harder than keeping up with you :)]
2013-09-09 07:26:48	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Ping timeout: 260 seconds)
2013-09-09 07:26:58	tabemann	somehow I'm not entirely impressed by efforts to try to tack on aspects of dependent typing onto Haskell, when I've seen *real* dependent typing in other languages
2013-09-09 07:27:05	-->	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 07:27:08	arkeet	dissipate_: who needs macros ;)
2013-09-09 07:27:08	AfC	edwardk: I'll have another go this afternoon and get back to you tomorrow with my experience.
2013-09-09 07:27:10	dissipate_	SrPx, for the kinds of applications i want to write, i don't want to compile to native.
2013-09-09 07:27:17	tabemann	(of course, then, I have a hard time wrapping my brain around even the simplest of combinators in the likes of Agda...)
2013-09-09 07:27:17	edwardk	http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html with examples like: units.traversed.(around target 1.0).health -= 3
2013-09-09 07:27:47	arkeet	haskell lets you write your own control structures as ordinary functions.
2013-09-09 07:28:03	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-09 07:28:08	arkeet	in part because of the type-level separation of IO.
2013-09-09 07:28:16	dissipate_	SrPx, i'm not saying the JVM doesn't have it's warts, but i'm not too keen on compiling to native executables.
2013-09-09 07:28:19	arkeet	and because of laziness.
2013-09-09 07:28:24	tabemann	arkeet: hence why I tend to not be entirely impressed with much of the use of macros in Lisps, as many of those things aren't necessary in Haskell
2013-09-09 07:28:28	Twey	SrPx: Dependent types (with types-as-values) seem to me to be a much more elegant way of expressing type systems, even if you don't ever write any code you wouldn't have written without them.  The details of how best to structure a dependent language are still being beaten out, though, so that value of ‘later’ might be in the future.
2013-09-09 07:28:31	arkeet	tabemann: indeed!
2013-09-09 07:28:37	Twey	SrPx: I'm only an amateur type-theorist, though :þ
2013-09-09 07:28:58	dissipate_	arkeet, anyone who wants to extend the language?
2013-09-09 07:29:06	arkeet	extend with what?
2013-09-09 07:29:26	<--	AleXoundOS (~AleXoundO@188.244.39.153) has quit (Remote host closed the connection)
2013-09-09 07:29:28	dissipate_	arkeet, extend with macros
2013-09-09 07:29:31	arkeet	...
2013-09-09 07:29:36	arkeet	that do what?
2013-09-09 07:29:43	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 245 seconds)
2013-09-09 07:30:32	dissipate_	arkeet, all kinds of stuff, there are large macro libraries. much of the stuff that are built into languages like perl or python are macros in clojure.
2013-09-09 07:30:51	 *	arkeet peeks at the wikibooks page on clojure's macros and notes that those things can be done with ordinary functions in haskell.
2013-09-09 07:31:00	Twey	dissipate_: Haskell is basically a huge macro language used to build programs in IO :þ
2013-09-09 07:31:00	<--	miclorb (~textual@1.146.207.50) has quit
2013-09-09 07:31:07	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-09 07:31:25	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-09 07:31:39	 *	SrPx *reading on lenses*
2013-09-09 07:31:54	arkeet	dissipate_: and those things are just ordinary functions in haskell.
2013-09-09 07:32:02	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-09 07:32:10	Twey	Well, not all of them, but a large majority.
2013-09-09 07:32:13	arkeet	sure.
2013-09-09 07:32:23	arkeet	and macros aren't first-class values, afaik
2013-09-09 07:32:41	CADD	arkeet: they are if they are fexprs. :)
2013-09-09 07:32:50	<--	soulofpeace (~soulofpea@119.75.11.250) has quit (Ping timeout: 256 seconds)
2013-09-09 07:32:55	arkeet	this sounds worse and worse ;)
2013-09-09 07:33:01	SrPx	Twey: yea I'm waiting for a dep typed language that works for practical purposes ...
2013-09-09 07:33:13	Twey	(we do have a macro system for the odd case where you really do need a macro; it works pretty much like a standard Lisp macro system, except it's typed with the types of the code it generates and it's a little clumsier to account for having to deal with more syntax)
2013-09-09 07:33:18	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-09 07:33:18	tabemann	there is idris, but I disagree with its being designed as a strict rather than lazy language
2013-09-09 07:33:22	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Max SendQ exceeded)
2013-09-09 07:33:24	arkeet	SrPx: idris hopes to be that, no?
2013-09-09 07:33:24	Twey	SrPx: Are you aware of Idris and ATS?
2013-09-09 07:33:25	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-09 07:33:27	dissipate_	arkeet, but you can go way beyond what's in the core libraries of clojure and make your own macros
2013-09-09 07:33:40	SrPx	yes, I've done some simple things in Idris. not sure about ATS
2013-09-09 07:33:44	Twey	FSVO ‘practical’ and ‘dependently-typed’, respectively
2013-09-09 07:33:45	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-09 07:33:45	CADD	SrPx: i would third idris
2013-09-09 07:33:53	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Max SendQ exceeded)
2013-09-09 07:34:02	SrPx	but it is still experimental and takes a long time to make some simple things. hope it gets there soon, though!
2013-09-09 07:34:04	arkeet	dissipate_: I'm just saying that a lot of the things you'd use macros for in lisp or clojure or whatever can be done with ordinary functions in haskell. :)
2013-09-09 07:34:10	arkeet	which sounds a lot more attractive to me.
2013-09-09 07:34:16	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-09 07:34:21	arkeet	(and for the rest, there's template haskell.)
2013-09-09 07:34:59	dissipate_	arkeet, yep. not saying haskell isn't powerful. it is.
2013-09-09 07:35:22	SrPx	arkeet: I guess some macros could solve my JSON issue, though
2013-09-09 07:35:26	SrPx	actually ... no
2013-09-09 07:35:42	dissipate_	arkeet, get haskell to compile to JVM. :P
2013-09-09 07:36:00	arkeet	what's so good about JVM?
2013-09-09 07:36:15	<--	lusory (~lusory@42.60.25.228) has quit (Ping timeout: 264 seconds)
2013-09-09 07:36:29	tabemann	I don't see why one even *wants* to compile to the JVM
2013-09-09 07:36:31	SrPx	well I don't know where to go next, i guess I've already coded in the 20 or so most popular languages. programming is so weird nowadays, everything is wrong...
2013-09-09 07:36:31	dissipate_	arkeet, don't have to worry as much about what platform someone is running on
2013-09-09 07:36:56	CADD	SrPx: ever try factor?
2013-09-09 07:37:09	SrPx	CADD: read a lot about...
2013-09-09 07:37:14	tabemann	even if you could compile Haskell to the JVM, it would mean sacrifices that would limit performance, and it would preclude using GHC's threaded runtime (which is much better than Java HotSpot's concurrency)
2013-09-09 07:37:23	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-09 07:37:26	CADD	SrPx: oh man, its beautiful. the dataflow combinators are amazing
2013-09-09 07:37:32	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-09 07:37:48	SrPx	it is, I should read some more now
2013-09-09 07:37:51	Twey	dissipate_: Haskell compiles to LLVM, LLVM compiles to VMKit, and VMKit is trying to support a JVM
2013-09-09 07:37:56	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-09 07:38:02	Twey	Factor's pretty
2013-09-09 07:38:11	CADD	SrPx: yeah, im with you. never used it for anything, but its a purdy lang
2013-09-09 07:38:19	CADD	Twey: precisely
2013-09-09 07:38:31	Twey	It's even more impressive once you see how much of it was made by slava :þ
2013-09-09 07:38:36	enthropy	SrPx: it doesn't really seem like you have a json issue
2013-09-09 07:38:38	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-09 07:38:42	CADD	ikr? he wrote like everything
2013-09-09 07:39:07	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-09-09 07:39:09	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-09 07:39:17	Twey	I love concatenative languages, I really do
2013-09-09 07:39:27	enthropy	if can't fit your stuff into a data type you can write, then you can just leave it as Value or whatever data type represents all valid json
2013-09-09 07:39:29	Twey	I wanted to make a dependent concatenative language, but the two don't really seem to fit together syntactically
2013-09-09 07:39:30	dissipate_	tabemann, that's going to be a major limiting factor for a lot of developers. :(
2013-09-09 07:39:43	SrPx	Twey: slava?
2013-09-09 07:39:43	<--	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-09 07:39:50	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-09 07:39:54	tabemann	dissipate_: there are fundamental design issues with the JVM that make implementing Haskell for it hard to impossible
2013-09-09 07:40:13	-->	pepper_chico (~pepper_ch@189-19-133-12.dsl.telesp.net.br) has joined #haskell
2013-09-09 07:40:16	tabemann	case in point - no tail call optimization - and the use of trampolines to get around that would hurt performance too much
2013-09-09 07:40:24	dissipate_	tabemann, hmm, i didn't realize haskell has an interpreter
2013-09-09 07:40:25	Twey	SrPx: Slava Pestov, the guy who, er, single-handedly designed and implemented most of Factor
2013-09-09 07:40:45	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-09 07:41:22	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Ping timeout: 256 seconds)
2013-09-09 07:41:47	dissipate_	tabemann, what architectures has Hugs been ported to?
2013-09-09 07:41:52	-->	csakatok_ (~csakatoku@em119-72-198-118.pool.e-mobile.ne.jp) has joined #haskell
2013-09-09 07:41:53	pepper_chico	hi, I'm just starting compiling the haskell platform on linux, I don't know haskell, I getting what seems a basic error from the build
2013-09-09 07:42:03	pepper_chico	I have
2013-09-09 07:42:06	pepper_chico	newtype Vertex1 a = Vertex1 a
2013-09-09 07:42:06	pepper_chico	   deriving (Eq, Ord, Ix, Bounded, Show, Read, Typeable)
2013-09-09 07:42:15	<--	Gentlecat (~Roman@79.105.226.37) has quit (Ping timeout: 264 seconds)
2013-09-09 07:42:21	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-09 07:42:27	pepper_chico	and
2013-09-09 07:42:27	tabemann	Hugs is in C, and I don't know what platforms it has been supporting, but it's not supported anymore itself, and no one except misguided CS instructors use it anymore
2013-09-09 07:42:29	pepper_chico	instance Typeable a => Typeable (Vertex1 a) where
2013-09-09 07:42:29	pepper_chico	   typeOf = typeOfDefault
2013-09-09 07:42:39	tabemann	one should be using GHCi, not Hugs
2013-09-09 07:42:53	pepper_chico	but lines like that are giving errors like:
2013-09-09 07:43:10	arkeet	pepper_chico: would you like to put the errors and stuff on a pastebin?
2013-09-09 07:43:11	arkeet	@paste
2013-09-09 07:43:11	lambdabot	Haskell pastebin: http://lpaste.net/
2013-09-09 07:43:17	pepper_chico	‛typeOf’ is not a (visible) method of class ‛Typeable’
2013-09-09 07:43:22	SrPx	I think that in the future we will have a language where everything you have to do is to combine functions to do what you want. no ifs, no loops, no variables. just like scheme. except it would not be turing complete, allowing it to be optimized to faster than c speeds
2013-09-09 07:43:27	arkeet	also, why are you compiling the haskell platform?
2013-09-09 07:43:37	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 07:43:41	dissipate_	tabemann, if haskell had a good interpreter ported to a number of architectures, then no need for JVM.
2013-09-09 07:43:46	SrPx	Twey: oh, that is common though
2013-09-09 07:44:03	dissipate_	SrPx, APL?
2013-09-09 07:44:12	<--	asjo (~asjo@2505ds5-by.0.fullrate.dk) has quit (Ping timeout: 256 seconds)
2013-09-09 07:44:15	tabemann	dissipate_: GHCi itself at the moment only supports x86 and AMD64, but GHC otherwise supports a wider range of platforms
2013-09-09 07:44:30	SrPx	dissipate_: APL is cool, but far from perfection too
2013-09-09 07:44:38	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-09 07:44:44	pepper_chico	arkeet, because I've custom compiled ghc from sources, and picked the latest plataform release for the build, ubuntu 13.04 doesn't have a package for the platform
2013-09-09 07:44:45	-->	isenmann (~isenmann@blackhole.science-computing.de) has joined #haskell
2013-09-09 07:44:45	SrPx	is it fast? i never checked
2013-09-09 07:44:48	dissipate_	SrPx, cool as in unreadable?
2013-09-09 07:45:12	pepper_chico	arkeet, do you have an idea about that kind of error?
2013-09-09 07:45:15	<--	csakatoku (~csakatoku@em119-72-197-119.pool.e-mobile.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-09 07:45:30	SrPx	dissipate_: cool as in, has some great ideas but some bad things too. and yea, unreadable
2013-09-09 07:45:42	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-09 07:45:47	<--	hiratara (~hiratara@g037021.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 260 seconds)
2013-09-09 07:45:48	dissipate_	tabemann, bah, no ARM? port the interpreter and make it good. native executables are old stuff IMO. unless of course you are doing systems programming.
2013-09-09 07:45:55	-->	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 07:46:23	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-09-09 07:46:39	<--	canta (~canta@77-20-120-171-dynip.superkabel.de) has quit (Ping timeout: 276 seconds)
2013-09-09 07:46:40	dissipate_	SrPx, BTW, there is a modern APL language: J, has an interesting corporate backed software package: jsoftware.com
2013-09-09 07:46:43	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-09 07:46:55	SrPx	for example, I'll never pardon humanity for the fact no compiler ever is able to optimize (x -> 2*x + 2*x) to (* -> 4*x)
2013-09-09 07:47:02	-->	canta (~canta@77-20-120-171-dynip.superkabel.de) has joined #haskell
2013-09-09 07:47:15	CADD	SrPx: check out J, I had a good time with it
2013-09-09 07:47:17	SrPx	dissipate_: tried that one too. Better and worse in some aspects!
2013-09-09 07:47:22	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-09 07:47:23	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (Client Quit)
2013-09-09 07:47:24	CADD	SrPx: its written by the same guy that wrote apl
2013-09-09 07:47:27	SrPx	not much more readable IMO
2013-09-09 07:47:41	CADD	SrPx: meh, but its damn expressive.. :)
2013-09-09 07:47:41	SrPx	CADD: now that is new. interesting!
2013-09-09 07:47:46	-->	lusory (~lusory@42.60.25.228) has joined #haskell
2013-09-09 07:47:52	tabemann	dissipate_: why do you need an interpreter so badly
2013-09-09 07:48:01	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-09 07:48:08	CADD	SrPx: yeah, its super cool. and doesnt have the problem of requiring unicode. its all ascii baby
2013-09-09 07:48:08	tabemann	an actual compiler can do so many more optimizations than an interpreter can do effectively
2013-09-09 07:48:19	arkeet	pepper_chico: it would help if you posted build logs.
2013-09-09 07:48:22	dissipate_	tabemann, don't want my collaborators to have to run make
2013-09-09 07:48:27	pepper_chico	here's a pastebin of my problem for compiling haskell platform
2013-09-09 07:48:29	pepper_chico	http://pastebin.com/a2rn4Ur2
2013-09-09 07:48:31	mauke	The paste a2rn4Ur2 has been copied to http://lpaste.net/92776
2013-09-09 07:48:49	tabemann	dissipate_: I don't think GHCi is really meant for serious use anyways
2013-09-09 07:49:08	 *	SrPx just wants a scheme as safe as Haskell, as smart as Agda and as fast as C. Is SrPx really asking much? :(
2013-09-09 07:49:09	arkeet	like actual build logs.
2013-09-09 07:49:16	dissipate_	tabemann, industry has moved away from binary executables. that's just a fact. :(
2013-09-09 07:49:21	CADD	SrPx: check out shen.
2013-09-09 07:49:25	tabemann	"the industry"
2013-09-09 07:49:26	tabemann	yeah
2013-09-09 07:49:34	dissipate_	tabemann, unless of course you are doing systems programming.
2013-09-09 07:49:34	tabemann	since how are Java bytecode executables not binary executables
2013-09-09 07:49:38	-->	asjo (~asjo@2505ds5-by.0.fullrate.dk) has joined #haskell
2013-09-09 07:49:49	dissipate_	tabemann, sorry, native binary executables
2013-09-09 07:49:51	CADD	SrPx: http://shenlanguage.org/
2013-09-09 07:50:02	SrPx	CADD: I feel bad for it not being popular, must admit I should've had it a bigger chance. Is it fast?
2013-09-09 07:50:04	tabemann	the only difference between bytecode executables and native ones is that bytecode executables need a goddamn JIT if you you're going to get any performance out of them
2013-09-09 07:50:24	CADD	SrPx: it uses sbcl, so take what you want from that.
2013-09-09 07:50:28	tabemann	you've just drank too much of the Java and .NET kool-aid there
2013-09-09 07:50:30	pepper_chico	arkeet, that pastbin is not enough?
2013-09-09 07:50:36	-->	hiratara (~hiratara@h223162.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-09-09 07:50:36	dissipate_	tabemann, so everyone is back to 'make'? :(
2013-09-09 07:50:43	tabemann	how hard is make
2013-09-09 07:50:46	arkeet	pepper_chico: it tells nothing about your build environment and such.
2013-09-09 07:50:48	tabemann	and with GHC you don't even *need* make
2013-09-09 07:50:49	SrPx	CADD: well not faster than C ^^
2013-09-09 07:50:56	CADD	tabemann: if only the borroughs 5000 system actually would have made it. we would all be much happier
2013-09-09 07:51:07	dissipate_	tabemann, pretty nasty IMO. at least that's been my experience.
2013-09-09 07:51:12	CADD	SrPx: well, sbcl is pretty damn fast. given that its not running on a lispm :)
2013-09-09 07:51:19	arkeet	pepper_chico: you are using GHC 7.6.3?
2013-09-09 07:51:48	tabemann	dissipate_: invoking a compiler at the command line, or writing a Makefile to do it, isn't that hard
2013-09-09 07:51:49	 *	SrPx wonders where are the lisp machines in this imperative word!!
2013-09-09 07:52:23	SrPx	CADD: do you have some figures? I don't know much about sbcl
2013-09-09 07:52:25	tabemann	and as you are obviously comparing things to the Java world
2013-09-09 07:52:26	dissipate_	tabemann, bottom line is if i want to do a web app, or some artificial intelligence thing, i don't want my collaborators to have to run 'make'. that's old school.
2013-09-09 07:52:29	pepper_chico	arkeet, that's the full build log http://pastebin.com/XgmJsumn
2013-09-09 07:52:36	mauke	The paste XgmJsumn has been copied to http://lpaste.net/92777
2013-09-09 07:52:37	<--	jkarlson (jkarlson@kosh.org.aalto.fi) has quit (Changing host)
2013-09-09 07:52:37	-->	jkarlson (jkarlson@pdpc/supporter/active/ke) has joined #haskell
2013-09-09 07:52:41	--	jkarlson is now known as Ke
2013-09-09 07:52:41	tabemann	since when is make any harder to work with than (ugh) ant or maven
2013-09-09 07:52:43	CADD	SrPx: just think. even if you are using haskell, its still all stacks at the end of the day *sobs*
2013-09-09 07:52:48	<--	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-09-09 07:52:54	tabemann	"old school"
2013-09-09 07:52:55	arkeet	pepper_chico: are you using GHC 7.6.3?
2013-09-09 07:52:56	tabemann	exactly
2013-09-09 07:53:00	tabemann	you're just listening to the propaganda
2013-09-09 07:53:04	arkeet	looks like you aren.
2013-09-09 07:53:06	arkeet	t
2013-09-09 07:53:15	CADD	SrPx: well, there is the language benchmarks. but those come with all the obvious caveats
2013-09-09 07:53:19	arkeet	pepper_chico: it won't work with GHC HEAD.
2013-09-09 07:53:28	arkeet	you need to use 7.6.3
2013-09-09 07:53:36	arkeet	>checking version of ghc... 7.7.20130908
2013-09-09 07:53:48	arkeet	pepper_chico: http://askubuntu.com/questions/286764/how-to-install-haskell-platform-for-ubuntu-13-04
2013-09-09 07:53:49	<--	diadara (~diadara@115.249.18.25) has quit (Read error: Operation timed out)
2013-09-09 07:54:03	SrPx	CADD: wow it is indeed fast. I wonder how Racket can be slower than CL?!
2013-09-09 07:54:06	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-09 07:54:17	pepper_chico	arkeet, my simple question is why, I'd like to make the fix if syntax changed, I've used the flag, because I really wanted to try with the ghc build I have now
2013-09-09 07:54:39	arkeet	pepper_chico: if you're feeling adventurous enough to use GHC HEAD, you shouldn't be using the platform anyway.
2013-09-09 07:54:53	SrPx	CADD: would you tell me what is stopping most languages to be as fast as C, though? Is it such a hard problem to optimize code?
2013-09-09 07:55:00	arkeet	but if you're just getting started with haskell, I *really* recommend against using anything other than 7.6.3
2013-09-09 07:55:01	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-09 07:55:07	dissipate_	tabemann, ok, i don't care about JVM, just have a good interpreter that has been ported.
2013-09-09 07:55:10	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-09 07:55:19	CADD	SrPx: not enough people. love racket, they actually just recently released their jit, so the rank may be a bit outdated
2013-09-09 07:55:28	tabemann	dissipate_: and I don't see what you gain about using an interpreter
2013-09-09 07:55:28	pepper_chico	arkeet, do you have an idea why that does not compile, does it make any sense to not compile?
2013-09-09 07:55:32	arkeet	yes, it makes sense.
2013-09-09 07:55:40	arkeet	7.8 makes extensive changes to Typeable.
2013-09-09 07:55:44	CADD	SrPx: yes, optimization sucks and the x86 sucks
2013-09-09 07:55:46	tabemann	with a properly set-up build system building should be trivial
2013-09-09 07:55:49	SrPx	CADD: ... really?! How it was running on the cpu benchmark game!?
2013-09-09 07:55:51	dissipate_	tabemann, python, perl and ruby seemed to have gained a lot
2013-09-09 07:55:57	SrPx	CADD: interpreted!?
2013-09-09 07:56:02	tabemann	python, perl, and ruby are horribly slow
2013-09-09 07:56:05	CADD	SrPx: yup
2013-09-09 07:56:19	pepper_chico	arkeet, I'd like to know the quick fix for that..., just to see whether the build goes on
2013-09-09 07:56:30	pepper_chico	that's the only kind of error happening by now
2013-09-09 07:56:42	CADD	SrPx:  http://docs.racket-lang.org/guide/performance.html
2013-09-09 07:56:43	SrPx	CADD: why a language such as racket has so few people? It is almost as good as a dynamic language can get
2013-09-09 07:56:59	CADD	SrPx: it truely is. although its the lisp curse.
2013-09-09 07:57:00	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-09 07:57:01	dissipate_	tabemann, BTW, i'm saying this from *my* perspective. if the Haskell community determines that native binaries are the way to go, so be it.
2013-09-09 07:57:31	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Remote host closed the connection)
2013-09-09 07:57:52	arkeet	pepper_chico: uh, looks like you could remove the "instance ... Typeable (Vertex1 a) ..." thing
2013-09-09 07:58:19	tabemann	native binaries compiled statically means that GHC can, despite any overhead from laziness or boxing or the like, still come out as competitive with Oracle Hotspot, which has far more developers working on it than there are working on GHC
2013-09-09 07:58:20	arkeet	pepper_chico: but you still really should use 7.6.3
2013-09-09 07:59:02	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-09 07:59:04	tabemann	it means that we can do all kinds of different optimizations statically
2013-09-09 07:59:09	pepper_chico	arkeet, I'll give it a try, ghc takes too long to build
2013-09-09 07:59:34	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Ping timeout: 248 seconds)
2013-09-09 07:59:50	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-09 07:59:54	tabemann	but I should go to bed
2013-09-09 07:59:56	pepper_chico	arkeet, you say, remove, but leave the typeOf = typeOfDefault?
2013-09-09 08:00:03	dissipate_	tabemann, fair enough
2013-09-09 08:00:09	SrPx	CADD: lisp curse?
2013-09-09 08:00:17	 *	SrPx is reading that link
2013-09-09 08:00:20	<--	tabemann (~travisb@adsl-69-217-164-88.dsl.milwwi.ameritech.net) has quit (Quit: Leaving)
2013-09-09 08:00:21	arkeet	pepper_chico: no, remove that too
2013-09-09 08:00:30	pepper_chico	hmm, interesting
2013-09-09 08:00:32	arkeet	pepper_chico: but you'll probably run into trouble later
2013-09-09 08:00:32	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-09 08:01:23	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-09 08:01:35	dissipate_	what about the parrot VM?
2013-09-09 08:01:42	dissipate_	perl 6 is on there
2013-09-09 08:02:03	<--	dibblego (~nobody@baldrick.qut.edu.au) has left #haskell ("λ")
2013-09-09 08:02:04	CADD	SrPx: to put it briefly: the power of lisp is its own worst enemy.
2013-09-09 08:03:31	dissipate_	hmm, nevermind, that's for dynamic languages
2013-09-09 08:03:32	-->	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-09 08:03:32	dissipate_	CADD, how so?
2013-09-09 08:03:34	<--	ekipan (4b1375b0@gateway/web/freenode/ip.75.19.117.176) has quit (Quit: Page closed)
2013-09-09 08:03:51	CADD	SrPx: http://www.lambdassociates.org/blog/bipolar.htm
2013-09-09 08:04:31	SrPx	CADD: maybe ... I guess it is simpler than one could guess, though. I think if someone released a simple editor that made coding in lisp ridiculously easy and make a fancy app to write web apps, people would be jumping over it
2013-09-09 08:04:48	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 240 seconds)
2013-09-09 08:04:52	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 08:05:08	CADD	dissipate_: in many ways. "too academic", not understanding the purpose and beauty of its postfix and paren riddled syntax, all the concepts that it intoduced like homoiconicity, the if statement(yes lisp was the first lang to ever have the if statement), garbage collection.
2013-09-09 08:05:17	SrPx	CADD: oh ive read that
2013-09-09 08:05:27	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-09 08:05:42	CADD	dissipate_: but the lisp curse is much more of a meme than it is an actuall assesment of its failure. which is multifaceted
2013-09-09 08:06:48	CADD	SrPx: well although its not for lisp. Peaker is working on a brilliant editor for haskell called Lamdu: https://github.com/Peaker/lamdu
2013-09-09 08:06:51	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-09-09 08:07:16	CADD	SrPx: yeah, great article. im sure it resonates with a lot of people. it did with me
2013-09-09 08:07:53	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-09 08:08:06	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 248 seconds)
2013-09-09 08:08:12	dissipate_	CADD, too academic? haskell is the epitome of an academic language...
2013-09-09 08:08:22	SrPx	CADD: (actually I have been mistaken, am just reading it now)
2013-09-09 08:08:54	CADD	dissipate_: haskell isnt the only lang that has suffered such ignorance.
2013-09-09 08:09:03	CADD	SrPx: oh cool
2013-09-09 08:09:42	-->	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-09 08:10:02	-->	rnons (~rnons@183.152.62.146) has joined #haskell
2013-09-09 08:10:10	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-09 08:10:27	<--	rnons (~rnons@183.152.62.146) has quit (Client Quit)
2013-09-09 08:10:47	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-09 08:11:26	dissipate_	CADD, haskell is based on advanced mathematics. i'm not saying that's a bad thing, and it is subjective if that qualifies it as 'academic', but there is no way it is less 'academic' than lisp.
2013-09-09 08:11:27	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 240 seconds)
2013-09-09 08:11:36	<--	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has quit (Client Quit)
2013-09-09 08:11:36	pepper_chico	arkeet, yeah, you were right... will leave this for tomorrow, thanks anyway
2013-09-09 08:11:48	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 245 seconds)
2013-09-09 08:11:50	arkeet	pepper_chico: leave 7.6.3 compiling overnight ):
2013-09-09 08:11:52	arkeet	:)
2013-09-09 08:11:54	pepper_chico	lots of other problems...
2013-09-09 08:11:56	Twey	dissipate_: All programming languages are based on ‘advanced mathematics’ :þ
2013-09-09 08:11:58	pepper_chico	yeah
2013-09-09 08:12:01	pepper_chico	will do it
2013-09-09 08:12:01	<--	skchrko (~sk@130.255.129.64) has quit (Quit: Leaving)
2013-09-09 08:12:22	CADD	dissipate_: thats not what i was saying. plus its funny when people call cl a "functional" lang
2013-09-09 08:12:30	pepper_chico	I will try to checkout a tag, hope it works just simple, from the git repository
2013-09-09 08:12:34	Twey	As for academi…a…ism, Haskell isn't even near the top of the pile these days
2013-09-09 08:12:35	dissipate_	Twey, so which highly esteemed mathematicians crapped out PHP?
2013-09-09 08:12:38	arkeet	pepper_chico: no
2013-09-09 08:12:42	arkeet	just download the sources from the site.
2013-09-09 08:12:45	-->	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 08:12:52	arkeet	pepper_chico: http://www.haskell.org/ghc/download_ghc_7_6_3
2013-09-09 08:12:57	pepper_chico	=/
2013-09-09 08:13:01	pepper_chico	I just like repos
2013-09-09 08:13:02	-->	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-09 08:13:06	Twey	dissipate_: Hahah, I didn't say it was always a *good* use of advanced mathematics :þ
2013-09-09 08:13:14	arkeet	pepper_chico: there's more that can go wrong if you just do your own thing
2013-09-09 08:13:28	pepper_chico	I will just take a look anyway
2013-09-09 08:13:37	Twey	There's always some kind of semantics going on there, though, no matter how informal
2013-09-09 08:13:47	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 260 seconds)
2013-09-09 08:16:15	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 08:16:16	Twey	And something like, say, Java or C++ has ample formalizations from researchers across the world, but nobody accuses it of being based on ‘advanced mathematics’.
2013-09-09 08:16:16	pepper_chico	ghc is in a bit messy state... for build and stuff, most of thing I get, are from source, and just works, or I can just checkout a tag
2013-09-09 08:16:16	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 08:16:16	<--	NemesisD (~michael@50-46-134-23.evrt.wa.frontiernet.net) has quit (Ping timeout: 256 seconds)
2013-09-09 08:16:18	SrPx	CADD: haha increadible
2013-09-09 08:16:19	dissipate_	Twey, and BTW, if the war has come down to 2 languages: clojure vs. haskell, i think i can live with that. but sadly that is not the case. and neither of these languages will be mainstream *anytime* soon.
2013-09-09 08:16:19	<--	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has quit (Client Quit)
2013-09-09 08:16:19	Twey	Um, sure.
2013-09-09 08:16:21	<--	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-09 08:16:23	CADD	dissipate_: http://this-plt-life.tumblr.com/post/36425236106/when-somebody-says-but-clojure-will-bring-more-people
2013-09-09 08:16:46	CADD	SrPx: the article?
2013-09-09 08:17:02	SrPx	CADD: yes. also lol@that
2013-09-09 08:17:09	CADD	SrPx: cool
2013-09-09 08:17:10	<--	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has quit (Ping timeout: 248 seconds)
2013-09-09 08:17:24	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-09-09 08:17:40	<--	FreeFull (~freefull@defocus/sausage-lover) has quit
2013-09-09 08:17:41	dissipate_	CADD, i don't care about bringing more people to lisp. i'm mainly interested in FP for the advantages it gives with pure functions and excellent multi-threading, plus getting rid of OOP.
2013-09-09 08:17:51	<--	shreesh (~shreesh@50-78-25-58-static.hfc.comcastbusiness.net) has quit (Ping timeout: 276 seconds)
2013-09-09 08:18:36	CADD	dissipate_: but purity and multithreading is not even the point of fp though.
2013-09-09 08:19:06	CADD	dissipate_: recursion and functions as a value are "the point" of fp
2013-09-09 08:19:11	dissipate_	CADD, that may be true, but they are great advantages
2013-09-09 08:19:22	CADD	dissipate_: yup
2013-09-09 08:19:24	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Remote host closed the connection)
2013-09-09 08:19:35	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-09 08:19:43	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 08:20:15	dissipate_	CADD, industry and huge percentage of academia are stuck in imperative and OOP land. that's not changing anytime soon. not with haskell and not with clojure.
2013-09-09 08:20:51	CADD	dissipate_: thats fine. let them build towers of shit
2013-09-09 08:21:01	CADD	dissipate_: they will eventually learn.. :)
2013-09-09 08:21:10	Twey	That's the opposite of fine
2013-09-09 08:21:34	-->	determinant_ (~determina@183.83.58.169) has joined #haskell
2013-09-09 08:21:55	smith_	Is it possible to create a type of String that guarantees that it will contain only a certain set of characters?
2013-09-09 08:22:06	tero-	CADD: will they? FP has a steep learning curve. the imperative road might be more tempting
2013-09-09 08:22:11	CADD	Twey: you are completely right. but there is no much stoping them.
2013-09-09 08:22:44	CADD	tero-: fp has a steep learning curve to people who have been damaged by other models.
2013-09-09 08:22:56	CADD	tero-: ive heard fp-first learners dont have that much difficulty
2013-09-09 08:23:06	dissipate_	CADD, i agree
2013-09-09 08:23:40	dissipate_	almost anyone in industry has been damaged
2013-09-09 08:23:45	tero-	CADD: I buy that but what do we do with the rest of the people? :)
2013-09-09 08:23:45	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-09 08:23:56	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-09 08:24:06	CADD	tero-: oh man, now you are asking the hard questions. :)
2013-09-09 08:24:06	dissipate_	tero-, make them jobless until they learn FP
2013-09-09 08:24:35	CADD	tero-: well definatly dont do what i do and smash my friends quaint ideas of what they think programming should be. they kind of hate me for it.. :)
2013-09-09 08:24:45	CADD	tero-: and definatly dont bring up HoTT
2013-09-09 08:24:48	tero-	heh
2013-09-09 08:25:01	dissipate_	CADD, quaint ideas being OOP?
2013-09-09 08:25:03	Twey	CADD: You just managed to distract me from actual PLT with funny reaction GIFs about PLT.  Congratulations.
2013-09-09 08:25:04	-->	yyyyy (~user@186.203.231.223) has joined #haskell
2013-09-09 08:25:10	<--	pepper_chico (~pepper_ch@189-19-133-12.dsl.telesp.net.br) has quit (Quit: Saindo)
2013-09-09 08:25:14	CADD	dissipate_: hehe, there are a lot..
2013-09-09 08:25:46	CADD	Twey: ikr? i <3 axis of eval
2013-09-09 08:25:56	CADD	Twey: what are you working on?
2013-09-09 08:25:59	dissipate_	after i read the paper 'out of the tar pit' and watching Hickey's talks about the problems with OOP, i was convinced it was bad
2013-09-09 08:26:16	<--	zbcm (~zbcm@147.41.7.17) has quit (Quit: Leaving)
2013-09-09 08:26:24	<--	yyyyy (~user@186.203.231.223) has quit (Remote host closed the connection)
2013-09-09 08:26:27	SrPx	smith_: I don't think so
2013-09-09 08:26:35	smith_	SrPx: Aw.
2013-09-09 08:26:38	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-09 08:26:48	Twey	CADD: I'm playing around with proving stuff about a linear language in Agda
2013-09-09 08:27:03	CADD	dissipate_: http://axisofeval.blogspot.com/2012/11/when-everybody-and-their-dog-writes.html just to shake it up a bit.. :)
2013-09-09 08:27:06	-->	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has joined #haskell
2013-09-09 08:27:13	--	mortberg_ is now known as mortberg
2013-09-09 08:27:24	-->	yyyyy (~yyyyy@186.203.231.223) has joined #haskell
2013-09-09 08:27:24	SrPx	smith_: mind I don't know almost anything about haskell at all but people missed your question :x
2013-09-09 08:27:39	CADD	Twey: ooo, sounds interesting. i rememeber reading somewhere that you can use linear logic to make gc unnecessary?
2013-09-09 08:27:54	CADD	Twey:  i think it was called something like "look ma' no garbage"?
2013-09-09 08:28:02	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-09 08:28:27	-->	steshaw (~steshaw@101.162.204.91) has joined #haskell
2013-09-09 08:28:47	CADD	Twey: or am i totally off the mark of what you are doing?
2013-09-09 08:29:23	Twey	CADD: Haha, yeah, pretty much
2013-09-09 08:29:33	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-09-09 08:29:36	CADD	Twey: oh ok, enlighten me please
2013-09-09 08:29:40	Twey	I don't know what you're referring to specifically
2013-09-09 08:29:47	Twey	Oh no, I meant you pretty much hit it on the head
2013-09-09 08:29:47	CADD	Twey: http://home.pipeline.com/~hbaker1/LinearLisp.html
2013-09-09 08:29:52	SrPx	CADD: I think we just need a killer FP language. There is none. Period. After that it is just a matter or marketing
2013-09-09 08:29:53	CADD	Twey: i just looked it up, lol
2013-09-09 08:29:54	dissipate_	CADD, technically, 'out of the tar pit' was a critique of having side effects, not OOP itself
2013-09-09 08:29:55	Twey	Ah, that I've read
2013-09-09 08:30:21	dissipate_	CADD, and was Hickey's critique bad? i thought it was downright excellent.
2013-09-09 08:30:27	CADD	dissipate_: is that the paper called "getting energy out of the turing tarpit"
2013-09-09 08:30:29	Twey	I'd quite like a safe low-level language without GC.  AFAICT such a thing doesn't exist, so I have every intention of building it :þ
2013-09-09 08:30:34	-->	m3ga (~erikd@120.158.106.61) has joined #haskell
2013-09-09 08:30:38	Twey	Step 1) learn PLT
2013-09-09 08:30:39	CADD	dissipate_: its not. it just made me rememeber that post
2013-09-09 08:30:44	SrPx	a FP language (or computer) faster than C is the first thing we should be worrying about
2013-09-09 08:30:52	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Ping timeout: 276 seconds)
2013-09-09 08:31:02	CADD	SrPx: pretty much. although scala is officially now more popular than haskell.. *sob*
2013-09-09 08:31:10	dissipate_	CADD, nope: http://shaffner.us/cs/papers/tarpit.pdf
2013-09-09 08:31:15	Twey	SrPx: ATS is a thing, you know.
2013-09-09 08:31:18	yyyyy	Twey: You should look into SPARK. It has exactly what you need. Not FP, though.
2013-09-09 08:31:20	Twey	If that's all you're worried about.
2013-09-09 08:31:27	CADD	dissipate_: thanks
2013-09-09 08:31:33	Twey	yyyyy: Is that the Ada thing?
2013-09-09 08:31:37	<--	fizruk (~fizruk@79.165.40.18) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 08:31:48	dalaing	Twey: any thoughts on Rust?
2013-09-09 08:31:50	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 08:31:57	Twey	dalaing: Rust is okay
2013-09-09 08:32:01	CADD	Twey: i am definatly on the road of PLT
2013-09-09 08:32:02	dissipate_	CADD, another link if that one doesn't work: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.93.8928
2013-09-09 08:32:23	CADD	Twey: write yourself a scheme was a lot of fun. although i need to get better at agda
2013-09-09 08:32:31	Twey	dalaing: I think not including dependent types in Rust is an error
2013-09-09 08:32:43	yyyyy	Twey: Yes. It has an integrated theorem prover. The syntax was bearable until the latest standard, which seems to have improved it massively. On the semantics side many new things appeared.
2013-09-09 08:32:58	CADD	Twey: i think not including dependent types in any language is an error :)
2013-09-09 08:33:18	CADD	Twey: although apparently singleton types are just as good as dependent types.
2013-09-09 08:33:18	Twey	CADD: Dynamic languages are easy enough, but type theory requires thought and mathematics, neither of which I'm particularly good at :þ
2013-09-09 08:33:22	 *	hackagebot yesod-platform 1.2.4.2 - Meta package for Yesod  http://hackage.haskell.org/package/yesod-platform-1.2.4.2 (MichaelSnoyman)
2013-09-09 08:33:44	CADD	Twey: well dynamic languages are just unityped langs. but you know that
2013-09-09 08:33:44	dalaing	Twey: C/C++ interop are on their must-have list, not sure how dependent typing would fair on that front
2013-09-09 08:34:10	Twey	dalaing: Just fine
2013-09-09 08:34:19	yyyyy	Twey: www.spark-2014.org
2013-09-09 08:34:34	dalaing	Twey: sorry, efficient C/C++ interop are on their must-have list :)
2013-09-09 08:34:37	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 245 seconds)
2013-09-09 08:34:46	-->	artyomkazak (~artyomkaz@94.25.228.109) has joined #haskell
2013-09-09 08:34:52	Twey	dalaing: A more powerful type system never takes power away.  Types are irrelevant to performance; they'll probably all be erased by runtime anyway.
2013-09-09 08:35:20	Twey	(okay, sometimes dependent languages have problems with that last one, but that's the theory)
2013-09-09 08:35:27	Twey	yyyyy: Thanks; will investigate
2013-09-09 08:35:49	CADD	yyyyy: 'you cannot proceed from the informal to the formal by formal means' - Perlis
2013-09-09 08:36:14	Twey	CADD: Ada and Spark have always been pretty formalized, though.
2013-09-09 08:36:31	CADD	Twey: i know, im just quote mining.. :)
2013-09-09 08:36:37	Twey	Ahuh.
2013-09-09 08:36:48	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-09 08:37:37	yyyyy	CADD: I do admit I like Ada. I know it's not trendy at all, and I'll get stoned publicly, but it's the most enjoyable imperative language there is IMHO.
2013-09-09 08:37:52	CADD	Twey: ok hey, you are in lojban too
2013-09-09 08:38:09	CADD	yyyyy: well, i would rather use it than most imperative langs. sadly i havent yet
2013-09-09 08:38:32	Twey	CADD: I've been there for a long time.  ☺
2013-09-09 08:38:47	k00mi	Twey: I don't think dependent types in a non-research language is a good idea just yet, especially if you want actual industry adaption
2013-09-09 08:38:52	CADD	yyyyy: plus ada is govt approved. :)
2013-09-09 08:39:02	CADD	Twey: yeah, im still very green at lojban
2013-09-09 08:39:14	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-09 08:39:36	yyyyy	CADD: if you do have some free time look into SPARK directly. The flow control is specially nice, and there are many static checks in the code, though the approach is very different than e.g. haskell
2013-09-09 08:39:50	Twey	k00mi: AFAIUI dependent types are on the cusp right now — they've got solid (if new) theory behind them, but need some work to be nicer to use
2013-09-09 08:39:53	zRecursive	@src seq
2013-09-09 08:39:53	lambdabot	Source not found. Maybe you made a typo?
2013-09-09 08:40:15	CADD	yyyyy: i definitely will!
2013-09-09 08:40:23	CADD	yyyyy: i was actually just looking at it
2013-09-09 08:40:36	-->	mno2 (~mno2@wlan41.cc.ntu.edu.tw) has joined #haskell
2013-09-09 08:40:41	Twey	k00mi: But they're powerful enough that any new discoveries should be implementable after the fact
2013-09-09 08:41:00	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-09 08:41:09	Twey	(e.g. HoTT in Agda)
2013-09-09 08:41:13	-->	tuxie_ (~paranoid@e179152161.adsl.alicedsl.de) has joined #haskell
2013-09-09 08:42:15	<--	artyomkazak (~artyomkaz@94.25.228.109) has quit (Ping timeout: 264 seconds)
2013-09-09 08:42:17	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-09 08:42:29	yyyyy	CADD: government approved might be a con ;). But cross-pollinating approaches with the SPARK team could be fruitful.
2013-09-09 08:42:33	k00mi	Twey: I think that's better left to Idris and the like, rust isn't supposed to be that revolutionary
2013-09-09 08:42:50	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Ping timeout: 246 seconds)
2013-09-09 08:42:51	k00mi	Twey: is HoTT in Agda possible? I thought there are fundamental differences
2013-09-09 08:42:59	CADD	yyyyy: you are completely right on that front ;)
2013-09-09 08:43:05	k00mi	or rather, one fundamental difference
2013-09-09 08:43:13	CADD	k00mi: yeah, its been implemented in coq and agda
2013-09-09 08:43:37	CADD	k00mi: https://github.com/HoTT/HoTT-Agda
2013-09-09 08:44:15	-->	dEPz (~depz@89-212-7-19.static.t-2.net) has joined #haskell
2013-09-09 08:44:15	yyyyy	the HoTT book got here almost a week ago. I haven't got the time to read it until now. I'll happily clone that repository.
2013-09-09 08:44:59	CADD	yyyyy: yeah, i like agda a bit more than coq. although i know that if i want to be serious i will eventually have to bite the bullet and learn coq
2013-09-09 08:45:26	<--	oleo (~oleo@xdsl-78-35-176-124.netcologne.de) has quit (Read error: Operation timed out)
2013-09-09 08:45:47	-->	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has joined #haskell
2013-09-09 08:45:52	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-09 08:46:08	Twey	k00mi: AFAIK, the only issue that's been found so far is that certain types of pattern-matching in Agda allowed the proof of axiom K, which is inconsistent with HoTT
2013-09-09 08:46:10	-->	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-09 08:46:14	yyyyy	CADD: are there substantial limitations in Agda precluding its use? I thought the major distinction in usage (notwithstanding the foundational differences) was tactics in coq
2013-09-09 08:46:23	CADD	yyyyy: take a look at this branch: https://github.com/HoTT/HoTT-Agda/tree/2.0 its where all the new improvements are happening
2013-09-09 08:46:32	Twey	(the Agda people added a flag to restrict pattern-matching to patterns not known to be sufficient to prove K)
2013-09-09 08:46:51	CADD	yyyyy: yeah, coq is very heavily based on tactics while agda takes the pattern matching approach
2013-09-09 08:47:23	CADD	yyyyy: so no limitiations, just different ways.
2013-09-09 08:47:37	CADD	yyyyy: turing completeness, yadda yadda
2013-09-09 08:47:37	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Ping timeout: 268 seconds)
2013-09-09 08:47:38	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-09-09 08:48:05	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 08:48:13	Twey	CADD: Um, Turing-completeness invalidates a proof assistant :þ
2013-09-09 08:48:23	yyyyy	CADD: thanks for the link!
2013-09-09 08:48:37	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 08:48:57	CADD	Twey: i know. there is termination checking. but from a plt standpoint the ability to program anything still stands
2013-09-09 08:49:08	CADD	yyyyy: np :)
2013-09-09 08:49:33	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 08:49:43	Twey	CADD: Hmm?  That's not true — there are terminating programs that can't be proven terminating
2013-09-09 08:50:08	-->	edvo (~edvo@tmo-111-88.customers.d1-online.com) has joined #haskell
2013-09-09 08:50:45	CADD	Twey: you are completely right, i meant turing completeness more as the capability of the language to express any problem more than its proper definition
2013-09-09 08:51:07	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 08:51:14	Twey	Rather depends on the power of the termination checker, I'd assume
2013-09-09 08:51:35	Twey	I don't know whether Coq and Agda have been proven formally equivalent in computational power
2013-09-09 08:51:45	CADD	Twey: yeah, shouldnt have abused definitions around a bunch of very pedantic people. and this is speaking as a very pedantic person.. :)
2013-09-09 08:51:47	yyyyy	CADD: if i remember jacquard looms are turing complete as well, but i'd refrain from doing proofs with them :) too laborious
2013-09-09 08:51:58	Twey	Heh, sorry
2013-09-09 08:52:17	CADD	Twey: i dont know if they can. but that would be interesting!
2013-09-09 08:52:23	CADD	Twey: no need to be sorry
2013-09-09 08:52:36	CADD	Twey: please, catch me on my bullshit. i would do the same. :)
2013-09-09 08:52:49	CADD	yyyyy: omg
2013-09-09 08:53:02	--	ttm is now known as The_third_man
2013-09-09 08:54:40	-->	desc|zenbook (~heh@sdg-24-160.tm.net.my) has joined #haskell
2013-09-09 08:54:51	<--	yyyyy (~yyyyy@186.203.231.223) has quit (Quit: Lost terminal)
2013-09-09 08:56:38	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-09 08:57:08	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 08:57:57	-->	lukexi (~lukexi@c-76-102-248-18.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 08:58:32	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-09 08:59:13	-->	fradet (~fradet@modemcable146.106-21-96.mc.videotron.ca) has joined #haskell
2013-09-09 09:00:22	dissipate_	major contributor to Haskell calls it 'useless': http://www.youtube.com/watch?v=iSmkqocn0oQ
2013-09-09 09:01:16	JuanDaugherty	same ole thing with SPJ?
2013-09-09 09:01:24	JuanDaugherty	like from 2 ya oder?
2013-09-09 09:01:26	<--	zRecursive (~czsq888@221.237.92.73) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-09 09:01:32	CADD	dissipate_: blah old news..
2013-09-09 09:01:51	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 260 seconds)
2013-09-09 09:02:27	Twey	He was talking about the starting state, and he was joking.
2013-09-09 09:02:29	dissipate_	CADD, i'm surprised he hasn't ported Haskell to .NET
2013-09-09 09:02:40	dissipate_	since he works for MS
2013-09-09 09:02:44	CADD	dissipate_: lol, thats called f#
2013-09-09 09:02:57	dissipate_	i thought F# was based on ocaml?
2013-09-09 09:03:03	CADD	dissipate_: yup
2013-09-09 09:03:07	Twey	dissipate_: They prefer to take his ideas and attempt to port them to C#
2013-09-09 09:03:10	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Ping timeout: 240 seconds)
2013-09-09 09:03:18	Twey	F# wasn't by SPJ
2013-09-09 09:03:25	CADD	nope
2013-09-09 09:03:37	dissipate_	Twey, actually, what he said was interesting. they want to port pure functions and STM to imperative languages.
2013-09-09 09:03:56	Twey	dissipate_: They tried for a bit, then gave up
2013-09-09 09:04:06	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-09-09 09:04:10	dissipate_	Twey, 'they' being MS research?
2013-09-09 09:04:12	Twey	Yes
2013-09-09 09:04:20	dissipate_	gave up in 2 years?
2013-09-09 09:04:23	CADD	lol slinky code
2013-09-09 09:04:38	Twey	The existing impurity made STM hard and pure code difficult to integrate, apparently
2013-09-09 09:04:48	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-09 09:05:03	CADD	Twey: what a suprise!
2013-09-09 09:05:03	Gracenotes	then people gave up on STM and decided to pursue HTM.
2013-09-09 09:05:03	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-09 09:05:11	-->	Gal3rielol (~Gabriel@155.69.14.97) has joined #haskell
2013-09-09 09:05:14	Gracenotes	er, wait, that hasn't fully happened yet. anyway, soon.
2013-09-09 09:05:16	johnw	they wanted to port STM to cover side-effecting transactions, which essentially ended up being too near impossible
2013-09-09 09:05:33	dissipate_	and keep OOP i imagine?
2013-09-09 09:05:36	Twey	Gracenotes: HTM?
2013-09-09 09:05:40	shachaf	Gracenotes: Those are pretty unrelated for the most part.
2013-09-09 09:05:56	shachaf	Or, at least, are used to accomplish very different things.
2013-09-09 09:06:19	-->	raichoo (~raichoo@2001:470:b626:11:224:d7ff:fe96:6ca4) has joined #haskell
2013-09-09 09:06:35	-->	fizruk (~fizruk@109.74.138.26) has joined #haskell
2013-09-09 09:06:47	Gracenotes	they exist at different levels of abstraction, certainly.
2013-09-09 09:06:58	-->	skchrko (~sk@109.110.73.135) has joined #haskell
2013-09-09 09:07:01	<--	Gal3rielol (~Gabriel@155.69.14.97) has quit (Client Quit)
2013-09-09 09:07:21	Gracenotes	not sure what OOP has to do with anything, though. there are practically no OO languages, anyway.
2013-09-09 09:07:24	dissipate_	so let me get this straight. they want to keep OOP, and functions with side effects but allow pure functions as well and STM in an imperative language?
2013-09-09 09:07:38	Twey	dissipate_: Mostly just STM
2013-09-09 09:07:59	Twey	Also, want*ed*.
2013-09-09 09:08:10	dissipate_	how does OOP work with pure functions? everytime you mutate it, you get a fresh copy?
2013-09-09 09:08:22	johnw	dissipate_: what do you mean be OOP?
2013-09-09 09:08:24	dissipate_	sounds nutty
2013-09-09 09:08:35	dissipate_	johnw, object oriented programming
2013-09-09 09:08:40	Twey	Heh
2013-09-09 09:08:49	johnw	yes, I know what the acronym means; but what do you mean by it in this context?
2013-09-09 09:08:54	<--	lukexi (~lukexi@c-76-102-248-18.hsd1.ca.comcast.net) has quit (Quit: lukexi)
2013-09-09 09:09:10	johnw	are you talking about message passing, encapsulation, inheritance-based polymorphism, ...?
2013-09-09 09:09:15	dissipate_	johnw, a language with classes and objects like Java
2013-09-09 09:09:25	dissipate_	johnw, yep
2013-09-09 09:09:31	Gracenotes	classes aren't really OOP.
2013-09-09 09:09:35	Gracenotes	subclassing is terrible.
2013-09-09 09:09:43	Gracenotes	</war>, sorry.
2013-09-09 09:09:59	dissipate_	johnw, not so much inheritance though. that has been deemed bad.
2013-09-09 09:10:47	aleator	Gracenotes: I can live with subclassing but subtyping gets me ;)
2013-09-09 09:10:48	-->	yogurt_truck (~yogurt_tr@190.191.224.63) has joined #haskell
2013-09-09 09:10:52	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-09 09:11:10	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Ping timeout: 276 seconds)
2013-09-09 09:11:10	dissipate_	aleator, and what about mixins?
2013-09-09 09:11:21	johnw	dissipate_: without inheritance, how is OOP different from just having record syntax?
2013-09-09 09:11:27	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-09 09:12:07	dissipate_	johnw, interfaces
2013-09-09 09:12:12	shachaf	I suspect that this isn't a good channel for "what's the true nature of OOP" arguments.
2013-09-09 09:12:21	johnw	my only point is that "OOP" covers a broad range of ideas; when I think of OOP, I mostly consider Smalltalk
2013-09-09 09:12:22	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-09 09:12:33	dissipate_	johnw, also, mixins, which piggy back off multiple inheritance.
2013-09-09 09:12:38	johnw	but shachaf is right, I suppose there isn't much fruitful discussion here wrt Haskell
2013-09-09 09:13:20	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-09 09:13:26	Gracenotes	this is the One True Paper on what objects are: http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf
2013-09-09 09:13:26	dissipate_	shachaf, i was inquiring about these languages Simon Peyton was researching
2013-09-09 09:13:28	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-09 09:13:34	<--	sferry_ (~samuel@143.226.94.218) has quit (Quit: Leaving)
2013-09-09 09:13:35	-->	myme (~myme@djent.myme.no) has joined #haskell
2013-09-09 09:13:56	doomlord__	OOP is a vague buzzword
2013-09-09 09:13:58	Gracenotes	notably, they're contrasted with ADTs. In some ways, ADTs are more functional than objects.
2013-09-09 09:14:22	<--	Apocalisp (~textual@ip-64-134-174-142.public.wayport.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 09:14:39	CADD	doomlord__: true that. except when its smalltalk
2013-09-09 09:14:53	-->	Grey_Fox2 (~chatzilla@120.147.148.171) has joined #haskell
2013-09-09 09:15:02	<--	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-09-09 09:15:13	CADD	doomlord__: not only is it a buzzword, its a poorly defined buzzword
2013-09-09 09:15:27	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 09:15:42	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-09 09:15:48	--	Grey_Fox2 is now known as PatrickRobotham
2013-09-09 09:16:00	<--	m3ga (~erikd@120.158.106.61) has quit (Quit: disappearing into the sunset)
2013-09-09 09:16:02	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 09:16:11	dissipate_	CADD, have any idea what simon peyton was referring to in his 'nirvana' category of languages?
2013-09-09 09:16:22	doomlord__	particularly annoying when used in conjunction with C++ eg "my C++ code is propper OOP, yours isn't" etc :)
2013-09-09 09:16:33	CADD	dissipate_: the band?
2013-09-09 09:16:37	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-09 09:16:44	dissipate_	CADD, har har. :P
2013-09-09 09:16:48	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 09:16:54	CADD	dissipate_: but seriously though. useful and pure iirc?
2013-09-09 09:17:17	<--	fradet (~fradet@modemcable146.106-21-96.mc.videotron.ca) has quit (Quit: Lost terminal)
2013-09-09 09:17:25	dissipate_	CADD, 'useful and safe' is the phrase he used
2013-09-09 09:17:35	-->	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has joined #haskell
2013-09-09 09:17:42	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-09 09:17:44	CADD	dissipate_: oh lawdy tell me about it. and sadly this goes all the way from the freshman dorm to the watercooler in the corperate skyscraper
2013-09-09 09:17:51	CADD	oops
2013-09-09 09:17:51	dissipate_	BTW, how do we know this guy isn't just pandering to the guys writing his paycheck at MS?
2013-09-09 09:17:52	<--	pootler (mervyn@smlh.x.rootbsd.net) has quit (Ping timeout: 260 seconds)
2013-09-09 09:17:53	CADD	doomlord__: ^
2013-09-09 09:18:06	Gracenotes	another fun thing: I like Pierce's rule of thumb that OOP is Java where all classes are final and non-interface types only appear when they're instantiated.
2013-09-09 09:18:10	CADD	dissipate_: SPJ you mean?
2013-09-09 09:18:17	dissipate_	CADD, yep
2013-09-09 09:18:36	Cale	Anyone know whether there's a simple library around with a representation of IO actions which carry out their effect exactly once when run, and thereafter produce a cached value?
2013-09-09 09:18:38	Gracenotes	...really offtopic, though. this channel should be discussing more important things, like
2013-09-09 09:18:41	dissipate_	CADD, i find it ironic that one of the main architects of haskell is working for The Man at MS. i'm sure they pay him well though.
2013-09-09 09:18:44	CADD	dissipate_: i think you are thinking very little of SPJ's work and the virtues of referential transparency..
2013-09-09 09:19:06	CADD	Cale: like a memoization transformer?
2013-09-09 09:19:12	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 09:19:18	dissipate_	CADD, no, i'm trying to figure out what language he was working on that is both 'safe and useful'
2013-09-09 09:19:22	CADD	dissipate_: hells yeah they do
2013-09-09 09:19:29	Gracenotes	Cale: unsafeInterleaveIO?
2013-09-09 09:19:30	johnw	Cale: explicit-sharing?
2013-09-09 09:19:31	<--	xinming (~xinming@125.82.206.178) has quit (Read error: Connection reset by peer)
2013-09-09 09:19:35	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-09 09:19:37	CADD	dissipate_: he is not, they are working *towards* it
2013-09-09 09:19:51	levi	I think it's awesome that Microsoft pays people like SPJ to do researchy things with Haskell instead of making them churn out .NET frameworks or something.
2013-09-09 09:19:53	johnw	http://hackage.haskell.org/packages/archive/explicit-sharing/0.9/doc/html/Control-Monad-Sharing.html
2013-09-09 09:20:04	CADD	levi: i second that
2013-09-09 09:20:08	Cale	Gracenotes: Kind of, but safer :P
2013-09-09 09:20:08	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 09:20:15	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Read error: Operation timed out)
2013-09-09 09:20:17	-->	pootler (mervyn@smlh.x.rootbsd.net) has joined #haskell
2013-09-09 09:20:23	Cale	explicit-sharing might be it, let's see
2013-09-09 09:20:26	dissipate_	CADD, but this 'safe and useful' language that has some kind of OOP (whatever  you want to call it) is going to be 'better' than Haskell?
2013-09-09 09:20:35	Cale	hmm
2013-09-09 09:20:37	shachaf	I don't think explicit-sharing is it.
2013-09-09 09:20:54	Cale	I just want something like  makeOnce :: IO a -> Once a; runOnce :: Once a -> IO a
2013-09-09 09:21:02	CADD	dissipate_: useful != oop in that talk
2013-09-09 09:21:04	dissipate_	levi, he said in the video they were working on some language for .NET, porting some ideas from haskell...
2013-09-09 09:21:06	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-09 09:21:07	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:90ed:4b27:2e2d:7638) has joined #haskell
2013-09-09 09:21:26	-->	jonkri (~jonkri@host-95-199-212-108.mobileonline.telia.com) has joined #haskell
2013-09-09 09:21:26	<--	jonkri (~jonkri@host-95-199-212-108.mobileonline.telia.com) has quit (Changing host)
2013-09-09 09:21:26	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-09 09:21:26	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 09:21:36	-->	miclorb (~textual@1.145.173.195) has joined #haskell
2013-09-09 09:21:36	shachaf	Or just makeOne :: IO a -> IO a?
2013-09-09 09:21:37	shachaf	ce
2013-09-09 09:21:51	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 264 seconds)
2013-09-09 09:21:55	CADD	dissipate_: iirc it meant lots of mutation
2013-09-09 09:21:57	Cale	shachaf: I want the type to represent the fact that this is present.
2013-09-09 09:21:58	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:90ed:4b27:2e2d:7638) has quit (Remote host closed the connection)
2013-09-09 09:21:58	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-09 09:22:07	-->	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:bd25:34c0:9dd2:6df7) has joined #haskell
2013-09-09 09:22:14	dissipate_	CADD, true, but do you really believe MS is going to put out a non-OOP language?
2013-09-09 09:22:19	Cale	(it's easy enough to write this myself if needs be)
2013-09-09 09:22:27	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 09:22:27	shachaf	Cale: Async does that but it also spawns a thread immediately which is presumably not the behavior you want.
2013-09-09 09:22:34	CADD	dissipate_: yeah, have you ever seen the langs that come out of MSR?
2013-09-09 09:22:42	levi	dissipate_: Researching cool stuff in Haskell and then porting it to other languages is not what I meant by 'churning out .NET frameworks'.
2013-09-09 09:22:42	dissipate_	CADD, nope
2013-09-09 09:22:46	shachaf	I can't think of a library that provides exactly that.
2013-09-09 09:22:48	johnw	shachaf: why do you think explicit-sharing does not apply?
2013-09-09 09:22:49	CADD	dissipate_: oh man. crazy studd
2013-09-09 09:22:52	CADD	stuff*
2013-09-09 09:22:56	Cale	yes, I'm thinking of something like Async, except instead of forking, wait until the first time the value is demanded and then execute the action
2013-09-09 09:23:08	dissipate_	CADD, the languages in .NET don't seem crazy at all.
2013-09-09 09:23:08	shachaf	Er, I meant IO a -> IO (IO a), of course.
2013-09-09 09:23:09	-->	xinming (~xinming@125.82.198.183) has joined #haskell
2013-09-09 09:23:17	shachaf	There seems to exist http://hackage.haskell.org/package/io-memoize
2013-09-09 09:23:35	johnw	do { runOnce <- share someAction; runOnce; runOnce }
2013-09-09 09:23:38	shachaf	Which gives you that type, but not the extra Once type that you wanted.
2013-09-09 09:23:43	Cale	yeah
2013-09-09 09:24:15	dissipate_	levi, what are they churning out exactly?
2013-09-09 09:24:24	dissipate_	if not stuff for .NET
2013-09-09 09:24:44	levi	dissipate_: Mostly research papers. :P
2013-09-09 09:24:51	<--	daniel-s_ (~daniel-s@2001:388:608c:4c40:f9d8:3bf9:361a:1c6f) has quit (Ping timeout: 264 seconds)
2013-09-09 09:25:01	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 09:25:08	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 245 seconds)
2013-09-09 09:25:26	levi	Microsoft Research does actually do *research* rather than just work on the next generation of product.
2013-09-09 09:25:27	<--	AfC (~andrew@2407:7800:200:1011:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-09-09 09:25:27	shachaf	Perhaps explicit-sharing isn't the package I was thinking of...
2013-09-09 09:25:46	dissipate_	levi, which researcher came up with Visual Basic?
2013-09-09 09:26:05	CADD	dissipate_: although i cant find it right now, i remember some of the stuff that has come out. they do very very intersting stuff at msr
2013-09-09 09:26:17	levi	dissipate_: Why are you asking stupid questions?
2013-09-09 09:26:30	dissipate_	CADD, too bad they will be shut down when MS goes belly up
2013-09-09 09:26:32	CADD	levi: hehe, good question
2013-09-09 09:26:47	CADD	dissipate_: you are expecting for MS to go belly up?
2013-09-09 09:26:57	dissipate_	levi, some of their products are really bad
2013-09-09 09:27:03	shachaf	At any rate it looks rather too complicated for what Cale wants.
2013-09-09 09:27:09	shachaf	What's with all the instances?
2013-09-09 09:27:25	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-09 09:27:36	-->	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has joined #haskell
2013-09-09 09:27:43	dissipate_	CADD, it's not a matter of 'if' but 'when'. technically, though, they won't go bankrupt, just split up and have their different divisions sold off.
2013-09-09 09:28:11	shachaf	Oh, Sharing /= Shareable. Still.
2013-09-09 09:28:25	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-09 09:28:31	CADD	dissipate_: im guessing you are expecting linux to eat ms's lunch?
2013-09-09 09:28:45	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-09 09:28:50	frontend1oader	this is the year of the linux desktop
2013-09-09 09:28:53	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-09 09:29:06	ibotty	frontend1oader: also in this channel?
2013-09-09 09:29:13	dissipate_	CADD, no, but google, apple and facebook might.
2013-09-09 09:29:48	dissipate_	CADD, i don't expect windows to go away anytime soon. like i said, they will probably just split up and get sold off. the products will still be around.
2013-09-09 09:30:22	johnw	shachaf: I think it's to allow monadic lists which evaluate members only once; otherwise, the Shareable instances are all pretty meaningless ('shareArgs _ = return' in nearly every case)
2013-09-09 09:30:58	levi	dissipate_: This is not #microsoft, it's #haskell. This discussion isn't even tangentially relevant anymore.
2013-09-09 09:31:09	CADD	dissipate_: i think facebook will go away before ms
2013-09-09 09:31:13	johnw	shachaf: in fact, not just members, but tails as well
2013-09-09 09:31:14	CADD	levi: kk, it ends here
2013-09-09 09:31:40	shachaf	Thanks, levi.
2013-09-09 09:31:47	johnw	if you don't use that feature, it seem pretty similar to io-memoize, just more convuloted
2013-09-09 09:32:06	dissipate_	levi, well, to bring it back to haskell, i don't think haskell itself is ever going into .NET
2013-09-09 09:32:16	-->	cwraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-09 09:32:21	CADD	dissipate_: meh, how cares?
2013-09-09 09:32:22	shachaf	Neither of them does what Cale wants, though.
2013-09-09 09:32:31	shachaf	Given that it's three lines to write it himself, that's probably what he'll do.
2013-09-09 09:32:33	CADD	dissipate_: haskell is good on its own
2013-09-09 09:32:37	dissipate_	levi, at least not officially
2013-09-09 09:33:15	dissipate_	CADD, i don't care, but people itching to use haskell at some .NET shop will care
2013-09-09 09:33:23	 *	hackagebot dimensional 0.12.1.1 - Statically checked physical dimensions.  http://hackage.haskell.org/package/dimensional-0.12.1.1 (BjornBuckwalter)
2013-09-09 09:33:32	CADD	dissipate_: i doubt there are many of those shops
2013-09-09 09:34:28	shiona	We have all these monoids and applicatives and such. Is there such a class that empty * x = x and for every y != empty : y * x = y?
2013-09-09 09:34:33	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-09 09:34:39	dissipate_	CADD, what kind of shops are using haskell?
2013-09-09 09:35:12	shachaf	shiona: For any x?
2013-09-09 09:35:13	CADD	shiona: huh? that would only work if x = unit
2013-09-09 09:35:22	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 09:35:24	CADD	dissipate_: not enough
2013-09-09 09:35:29	Gracenotes	it wouldn't work if empty = 0.
2013-09-09 09:35:30	shachaf	I.e. ab=a, unless a=1?
2013-09-09 09:35:34	shiona	shachaf: yes, for any x
2013-09-09 09:35:50	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-09 09:36:03	shiona	would such a thing make any sense
2013-09-09 09:36:05	shachaf	Maybe you want First?
2013-09-09 09:36:14	shachaf	I'm not sure how useful a class for that is in general.
2013-09-09 09:36:48	shiona	I'll take a peek
2013-09-09 09:36:52	dissipate_	CADD, well, that brings me back to the whole native compiled binary issue. i don't know shops doing web development running those.
2013-09-09 09:37:00	Gracenotes	anyway, about porting Haskell to things in general, issues are that every call in Haskell is a tail call, and representing everything as a thunk is just stupidslow.
2013-09-09 09:37:12	shiona	yeah, sounds about right. thanks
2013-09-09 09:37:23	Gracenotes	well, porting Haskell to language VMs
2013-09-09 09:37:29	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-09 09:37:43	CADD	dissipate_: im not sure what you mean
2013-09-09 09:38:11	dissipate_	CADD, i had a whole discussion earlier about how the main haskell compiler compiles to native binary executables.
2013-09-09 09:38:15	levi	dissipate_: Look harder.  Or, instead, write a haskell program. Come back when you have questions about haskell!
2013-09-09 09:38:24	dissipate_	CADD, industry has moved away from that in a big way.
2013-09-09 09:39:05	CADD	dissipate_: well there are quite a few shops using happstack/yesod/snap
2013-09-09 09:39:12	dissipate_	Gracenotes, a VM or interpreter ported to a variety of architectures
2013-09-09 09:39:20	<--	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has quit (Ping timeout: 260 seconds)
2013-09-09 09:39:24	Gracenotes	the cargo cult industry? That's the best one to be in.
2013-09-09 09:39:55	-->	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has joined #haskell
2013-09-09 09:40:15	-->	Shaladdle (~Shaladdle@50.94.94.219) has joined #haskell
2013-09-09 09:40:24	CADD	Gracenotes: skip the cargo and just go with the cult!
2013-09-09 09:40:25	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 276 seconds)
2013-09-09 09:40:52	dissipate_	Gracenotes, CADD said above ^ that not enough shops run Haskell. either it's good for industry or it isn't.
2013-09-09 09:41:12	dissipate_	Gracenotes, and i pointed out that a huge chunk of industry has moved away from native compiled binaries
2013-09-09 09:41:33	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has joined #haskell
2013-09-09 09:41:34	CADD	dissipate_: i see it as neutral. shops should use what they want
2013-09-09 09:41:48	-->	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has joined #haskell
2013-09-09 09:41:57	CADD	dissipate_: i think compiled binaries are probably here to stay. especially in the closed source sphere
2013-09-09 09:42:22	--	cwraith is now known as c_wraith
2013-09-09 09:42:46	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-09 09:42:47	dissipate_	CADD, of course they are, for systems programming. for doing web dev though? nope.
2013-09-09 09:42:56	Gracenotes	guess what, Haskell has bytecode
2013-09-09 09:42:57	Gracenotes	BAM
2013-09-09 09:43:02	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 246 seconds)
2013-09-09 09:43:04	CADD	:D
2013-09-09 09:43:18	dissipate_	Gracenotes, and that runs on what VM?
2013-09-09 09:43:26	CADD	Gracenotes: now we just need a computer that runs haskell bytecode in-silico
2013-09-09 09:43:31	Gracenotes	ready to leverage that for the next-generation of synergistic startups.
2013-09-09 09:43:31	levi	Please don't feed the troll anymore.
2013-09-09 09:43:50	CADD	dissipate_: yeah man, i dont see where you are going with this
2013-09-09 09:44:00	-->	Itkovian (~Itkovian@b244h110.ugent.be) has joined #haskell
2013-09-09 09:44:34	dalaing	I thought it was going to #haskell-blah
2013-09-09 09:44:42	dissipate_	CADD, i'm not going anywhere, i already made my point. you can argue the reasons industry went away from native compiled binaries, but that's just a fact. you can't say Haskell should be used by more shops and then ignore this.
2013-09-09 09:44:58	CADD	dalaing: yes please. let do this in #haskell-blah
2013-09-09 09:45:00	CADD	dissipate_: ^
2013-09-09 09:45:05	shachaf	Better to go to #haskell-/dev/null
2013-09-09 09:45:18	-->	Beetny (~Beetny@ppp118-208-23-140.lns20.bne1.internode.on.net) has joined #haskell
2013-09-09 09:45:23	CADD	shachaf: :D
2013-09-09 09:45:46	dalaing	I'm not currently in #haskell-blah, so it's the same to me, maybe I should have suggested #haskell-gah
2013-09-09 09:45:58	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Ping timeout: 245 seconds)
2013-09-09 09:45:59	Gracenotes	I see a great future for firms who shave their yaks vertically rather than horizontally.
2013-09-09 09:46:19	-->	rgr (~user@e182086194.adsl.alicedsl.de) has joined #haskell
2013-09-09 09:46:34	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-09 09:47:33	<--	jonkri (~jonkri@pontarius/jon) has quit (Read error: Connection reset by peer)
2013-09-09 09:47:43	-->	zbcm (~zbcm@147.69.182.184) has joined #haskell
2013-09-09 09:47:52	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-09 09:48:37	<--	rgr (~user@e182086194.adsl.alicedsl.de) has quit (Client Quit)
2013-09-09 09:48:58	<--	james-ubc (~james@66.183.96.217) has quit (Remote host closed the connection)
2013-09-09 09:49:11	-->	rgr (~user@e182086194.adsl.alicedsl.de) has joined #haskell
2013-09-09 09:49:57	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-09 09:50:01	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-09-09 09:50:40	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-09 09:51:33	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-09 09:51:41	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Quit: leaving)
2013-09-09 09:51:48	<--	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has quit (Read error: Connection reset by peer)
2013-09-09 09:53:25	dmj`	I have a lens-aeson question.
2013-09-09 09:53:36	dmj`	In lens-aeson you can do this:
2013-09-09 09:53:37	dmj`	putStrLn $ "{\"a\": 1, \"b\": 3}" & key "a"._Integer *~ 100
2013-09-09 09:53:46	dmj`	and it will return: {"a":100,"b":3}
2013-09-09 09:54:41	dmj`	I have my own json file, and I want to modify the key "x" to be 100 let's say
2013-09-09 09:54:56	dmj`	print $ json ^? key "elements" . nth 0 . key "x" *~ 100
2013-09-09 09:54:58	-->	helloooo (~ircap@163.Red-81-32-230.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 09:55:18	-->	hari (~hari@117.193.50.136) has joined #haskell
2013-09-09 09:55:31	--	hari is now known as Guest54392
2013-09-09 09:55:35	dmj`	but that fails because I need a mutator, how do I add a mututator?
2013-09-09 09:55:58	<--	dEPz (~depz@89-212-7-19.static.t-2.net) has quit (Remote host closed the connection)
2013-09-09 09:56:30	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-09 09:56:35	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-09 09:56:57	dalaing	I don't know anything about lens-aeson, but a visual diff makes me wonder you're missing a ._Integer from that incantation
2013-09-09 09:57:05	aleator	dmj`: Does this work? print (json & key "elements" . nth 0 .key "x"._Integer *~ 100)
2013-09-09 09:57:11	--	Guest54392 is now known as hari_
2013-09-09 09:57:15	<--	phischu (~pschuster@p4FD3263B.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-09 09:57:19	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-09-09 09:57:37	hari_	In this code fragment Can anybody tell me why this pattern match overlap occurs: http://lpaste.net/92780
2013-09-09 09:57:50	CADD	Gracenotes: lol
2013-09-09 09:58:10	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 09:58:37	shachaf	I bet that's not the real reason, but I don't know anything about Aeson. A good way to get help is to give people complete, executable code that they can try things out with.
2013-09-09 09:59:02	<--	tuxie_ (~paranoid@e179152161.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-09-09 09:59:20	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 09:59:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-09 10:00:34	<--	determinant_ (~determina@183.83.58.169) has quit (Ping timeout: 276 seconds)
2013-09-09 10:00:46	<--	rgr (~user@e182086194.adsl.alicedsl.de) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-09 10:01:12	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-09 10:01:22	-->	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-09 10:01:30	dalaing	hari_: maxRows and maxCols aren't working as patterns
2013-09-09 10:01:47	hari_	dalaing, I suspected as much
2013-09-09 10:01:57	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-09 10:02:04	dalaing	(unless I've gotten something horribly wrong)
2013-09-09 10:02:42	hari_	dalaing, how do I set the pattern when I don't have an absolute value but need to match against another parameter?
2013-09-09 10:02:53	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-09 10:03:07	-->	exicer (~exicer@host31-54-39-44.range31-54.btcentralplus.com) has joined #haskell
2013-09-09 10:03:38	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-09 10:03:49	dalaing	hari_: more guards?
2013-09-09 10:04:32	-->	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has joined #haskell
2013-09-09 10:04:43	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 10:04:53	dalaing	if it was me I'd make each of those patterns into a function, use guards to work out if the 3rd and 4th parameters were 0 or the maximum values, then call the appropriate function
2013-09-09 10:05:02	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 10:05:02	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-09-09 10:05:02	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-09 10:05:16	dalaing	there could be an easier way, I haven't tried to work out what you're actually doing after the pattern match
2013-09-09 10:05:19	dmj`	aleator: Yea, that actually works, but the value isn't really updated and it only returns a subset of the json
2013-09-09 10:05:21	<--	Shaladdle (~Shaladdle@50.94.94.219) has quit (Quit: Shaladdle)
2013-09-09 10:05:38	dmj`	aleator: but yes it compiles
2013-09-09 10:06:06	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-09 10:06:38	<--	jonkri (~jonkri@pontarius/jon) has quit (Ping timeout: 240 seconds)
2013-09-09 10:07:57	hari_	dalaing, I see.
2013-09-09 10:08:09	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-09 10:09:33	hari_	dalaing, pattern matching seemed much easier to work out the flow of the code
2013-09-09 10:09:33	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-09 10:10:13	-->	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has joined #haskell
2013-09-09 10:10:17	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has left #haskell
2013-09-09 10:10:43	-->	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has joined #haskell
2013-09-09 10:10:47	-->	allsystemsarego (~allsystem@188.25.130.226) has joined #haskell
2013-09-09 10:10:48	<--	allsystemsarego (~allsystem@188.25.130.226) has quit (Changing host)
2013-09-09 10:10:48	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-09-09 10:10:57	dalaing	hari_: I have a vague feeling that a Foldable or Traversable instance for Row might be helpful in some way
2013-09-09 10:11:07	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-09 10:11:39	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 10:12:41	<--	Ulrar (~Ulrar@luwin.ulrar.net) has quit (Quit: ZNC - http://znc.in)
2013-09-09 10:13:42	hari_	dalaing, I have not yet understood those concepts traversable or foldable
2013-09-09 10:14:24	hari_	dalaing, the code is for the game "Lights Off"
2013-09-09 10:15:36	hari_	Where, when I toggle one (row, col) then (row-1, col), (row, cow-1), (row, col), (row, col+1) and (row+1,col) are affected
2013-09-09 10:16:10	hari_	Special cases happen obviously when the column and row are 0,0 or (maxrow, maxcol)
2013-09-09 10:17:25	hari_	Couldn't figure out any suitable way. I guess I must look into more advanced concepts.
2013-09-09 10:17:35	-->	Ulrar (~Ulrar@luwin.ulrar.net) has joined #haskell
2013-09-09 10:17:42	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 248 seconds)
2013-09-09 10:17:50	-->	boegel (~boegel@hpcbunny.ugent.be) has joined #haskell
2013-09-09 10:18:18	<--	helloooo (~ircap@163.Red-81-32-230.dynamicIP.rima-tde.net) has quit (K-Lined)
2013-09-09 10:18:22	<--	neptunepink (~root@adsl-99-105-53-81.dsl.pltn13.sbcglobal.net) has quit (Quit: computer exploded)
2013-09-09 10:18:24	 *	hackagebot yaml-config 0.2.0 - Configuration management  http://hackage.haskell.org/package/yaml-config-0.2.0 (FedorGogolev)
2013-09-09 10:18:37	mm_freak	ocharles: one way to achieve scene deltas easily is by having two types
2013-09-09 10:18:42	mm_freak	Scene and DScene
2013-09-09 10:19:03	-->	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has joined #haskell
2013-09-09 10:19:03	mm_freak	ocharles: the scene wires generate only scene deltas
2013-09-09 10:19:18	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 10:19:39	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-09 10:20:35	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-09 10:20:55	-->	t7 (~chatzilla@chaucer.kent.ac.uk) has joined #haskell
2013-09-09 10:21:26	-->	dubsg (~dubsg@2601:9:5b00:10d:35f2:2ee2:322f:8164) has joined #haskell
2013-09-09 10:22:39	<--	miclorb (~textual@1.145.173.195) has quit
2013-09-09 10:23:13	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-09 10:23:14	zielwasserjunki	hari_, so your function looks like: one :: (Int, Int) -> [(Int, Int)]?
2013-09-09 10:23:57	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-09 10:24:23	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-09 10:24:46	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 10:25:34	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 10:26:38	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 10:27:22	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 10:27:50	<--	Ulrar (~Ulrar@luwin.ulrar.net) has quit (Ping timeout: 248 seconds)
2013-09-09 10:28:44	-->	arenz (arenz@nat/ibm/x-pucdkflzrmfkscpd) has joined #haskell
2013-09-09 10:28:58	-->	tuxie_ (~paranoid@213.61.228.26) has joined #haskell
2013-09-09 10:29:15	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-09 10:29:26	<--	dubsg (~dubsg@2601:9:5b00:10d:35f2:2ee2:322f:8164) has quit (Ping timeout: 240 seconds)
2013-09-09 10:29:39	dmj`	Here's a better example of my lens-aeson code: For some reason it's never actually updating the value of "x" to 100
2013-09-09 10:29:50	dmj`	http://lpaste.net/7443921765627068416
2013-09-09 10:30:02	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 10:30:03	hari_	zielwasserjunki, I will post the full code
2013-09-09 10:30:07	dmj`	lens-aeson /= aeson-lens
2013-09-09 10:30:20	hari_	zielwasserjunki, I am mapping over the function on a list of rows
2013-09-09 10:30:40	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-09-09 10:31:27	<--	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has quit (Ping timeout: 240 seconds)
2013-09-09 10:31:41	-->	xexonixxexillion (~Adium@130.56.84.41) has joined #haskell
2013-09-09 10:32:19	hari_	be back later
2013-09-09 10:32:22	<--	hari_ (~hari@117.193.50.136) has quit (Quit: Ex-Chat)
2013-09-09 10:32:29	mm_freak	when you say "\_ -> …", hlint would tell you to use const…  perhaps this one should be removed
2013-09-09 10:33:22	supki	dmj`: 0 * 100 /= 100
2013-09-09 10:33:47	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Ping timeout: 246 seconds)
2013-09-09 10:33:53	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2013-09-09 10:34:09	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-09-09 10:35:01	ibotty	mm_freak: why? different strictness?
2013-09-09 10:35:09	-->	Ulrar (~Ulrar@luwin.ulrar.net) has joined #haskell
2013-09-09 10:35:41	dmj`	supki: 0 / 100 /= 100
2013-09-09 10:36:11	<--	arenz (arenz@nat/ibm/x-pucdkflzrmfkscpd) has quit (Quit: Leaving)
2013-09-09 10:36:20	supki	yes, you need +
2013-09-09 10:38:04	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-09 10:38:09	dmj`	supki: ooooooooh, so that's what that operator does :)
2013-09-09 10:38:25	mm_freak	ibotty: no, strictness is the same, but i choose between const and \_ -> depending on which one looks better or is more readable
2013-09-09 10:38:32	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-09 10:38:40	ibotty	ah so they are identically but in look
2013-09-09 10:39:03	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-09 10:39:10	<--	jonkri (~jonkri@pontarius/jon) has quit (Max SendQ exceeded)
2013-09-09 10:39:19	mm_freak	ibotty: for example if you write "mkPure $ \ds x -> …" all over your library…  then for consistency you want to write "mkPure $ \ds _ -> …"
2013-09-09 10:39:21	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Read error: Operation timed out)
2013-09-09 10:39:23	mm_freak	not something weird based on const
2013-09-09 10:39:35	dmj`	supki: It's 3:40 here give me a break
2013-09-09 10:39:37	-->	SoupEvil (~jloos@g227114108.adsl.alicedsl.de) has joined #haskell
2013-09-09 10:39:43	mm_freak	mkPure $ \ds -> const $ …
2013-09-09 10:39:47	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-09 10:39:51	<--	raichoo (~raichoo@2001:470:b626:11:224:d7ff:fe96:6ca4) has quit (Ping timeout: 264 seconds)
2013-09-09 10:39:57	mm_freak	mkPure $ \ds _ -> …
2013-09-09 10:39:58	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-09 10:40:01	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-09 10:40:30	ibotty	ah for partial constant arguments i see your point
2013-09-09 10:40:51	mm_freak	ibotty: also for this case:  mkSF_ $ \x -> …
2013-09-09 10:41:04	mm_freak	for consistency you want to write:  mkSF_ $ \_ -> …
2013-09-09 10:41:11	ibotty	it looks even more weird when you need a flip inside to apply the const trick (don't know whether hlint proposes that)
2013-09-09 10:41:14	mm_freak	hlint wants you to write something like this:  mkSF_ . const $ …
2013-09-09 10:41:19	-->	determinant_ (~determina@2001:4898:7020:301a:e516:bd37:9388:947f) has joined #haskell
2013-09-09 10:41:37	mm_freak	which is not only inconsistent, but also derails the indentation mode of my editor
2013-09-09 10:41:39	-->	arenz (arenz@nat/ibm/x-omfgtwvvofavynpf) has joined #haskell
2013-09-09 10:41:50	<--	dalaing (~dalaing@124-171-227-199.dyn.iinet.net.au) has quit (Quit: Leaving.)
2013-09-09 10:42:00	ibotty	well. i would have written it that way... but in a larger mostly identical stanza of code, maybe not.
2013-09-09 10:42:31	mm_freak	well, imagine you have a library of hundreds of similar looking functions ;)
2013-09-09 10:42:49	mm_freak	they all begin with one of those mk* functions and a set of lambda arguments
2013-09-09 10:42:50	ibotty	yes. i can imagine scenarios :D
2013-09-09 10:43:01	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 10:43:16	<--	SoupE (~jloos@f055201003.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-09-09 10:43:27	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-09 10:44:02	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-09 10:44:31	-->	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has joined #haskell
2013-09-09 10:45:22	paolino	@hoogle minBy
2013-09-09 10:45:23	lambdabot	No results found
2013-09-09 10:45:24	-->	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 10:45:43	<--	steshaw (~steshaw@101.162.204.91) has quit (Quit: Leaving.)
2013-09-09 10:47:01	paolino	uhm should I implement it with minimumBy f [x,y] , or there is a nicer way ?
2013-09-09 10:47:12	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 10:47:44	mm_freak	paolino: 'min'
2013-09-09 10:47:53	paolino	:t min
2013-09-09 10:47:54	lambdabot	Ord a => a -> a -> a
2013-09-09 10:47:59	-->	apfelbox_ (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-09 10:48:07	<--	dimday (~amcvega@199.21.149.15) has quit (Quit: Leaving.)
2013-09-09 10:48:12	mm_freak	oh, with f
2013-09-09 10:48:18	paolino	yes
2013-09-09 10:48:57	mm_freak	paolino: what is 'f'?
2013-09-09 10:49:02	paolino	fst
2013-09-09 10:49:11	ibotty	what about `min . on f`
2013-09-09 10:49:13	mm_freak	:t minimumBy
2013-09-09 10:49:14	lambdabot	(a -> a -> Ordering) -> [a] -> a
2013-09-09 10:49:22	mm_freak	that would be a type error, paolino
2013-09-09 10:49:35	mm_freak	you want to compare only the fst?
2013-09-09 10:49:50	paolino	minimumBy (comparing f)
2013-09-09 10:49:53	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has quit (Ping timeout: 246 seconds)
2013-09-09 10:50:01	mm_freak	paolino: can you compare the snd?
2013-09-09 10:50:12	mm_freak	i mean, does it have an Ord instance?
2013-09-09 10:50:21	paolino	no
2013-09-09 10:50:30	paolino	:t on
2013-09-09 10:50:31	lambdabot	(b -> b -> c) -> (a -> b) -> a -> a -> c
2013-09-09 10:51:12	ibotty	min `on` f will discard your original tuple\
2013-09-09 10:51:17	ibotty	so that won't work
2013-09-09 10:51:21	paolino	right
2013-09-09 10:52:18	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 10:52:54	-->	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has joined #haskell
2013-09-09 10:53:26	<--	Driscoll (~ben@cpe-75-83-177-253.socal.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-09 10:53:41	paolino	some prism, maybe :-P
2013-09-09 10:54:04	mm_freak	\x y -> if fst x <= fst y then x else y
2013-09-09 10:54:09	mm_freak	how about this?
2013-09-09 10:55:47	paolino	well, I asked because sometimes I look for something in Prelude which should be there but it's not because you can have it done in a more general way
2013-09-09 10:56:03	-->	hexagoxel (~hexagoxel@pc230184.eduroam.uni-kiel.de) has joined #haskell
2013-09-09 10:56:43	-->	staafl (~staafl@95.42.27.15) has joined #haskell
2013-09-09 10:57:15	paolino	also min is there to avoid that if
2013-09-09 10:57:46	paolino	but I will if :-)
2013-09-09 10:58:25	 *	hackagebot tuples-homogenous-h98 0.1.1.0 - Wrappers for n-ary tuples with Traversable and Applicative/Monad instances.  http://hackage.haskell.org/package/tuples-homogenous-h98-0.1.1.0 (PetrPudlak)
2013-09-09 10:58:27	ibotty	well i like minimumBy (comparing fst) [x, y]
2013-09-09 10:58:32	mm_freak	desparately looking for abstraction even for comparing two tuples is one of the few of The Haskeller's Burdens
2013-09-09 10:58:33	ibotty	it's even longer :D
2013-09-09 10:58:48	mm_freak	just use the damn if ;)
2013-09-09 10:59:09	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-09 10:59:13	ibotty	... but shouldn't there be a nice combinator :D
2013-09-09 10:59:33	mm_freak	how long have you been programming haskell?
2013-09-09 10:59:39	<--	exicer (~exicer@host31-54-39-44.range31-54.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-09 10:59:42	dmj`	I wrote an implementation of a Binary Search Tree, can't figure out how to implement the monad instance though... functor makes sense.. but bind is unclear to me
2013-09-09 10:59:51	hpaste	dmj pasted “Binary Search Tree” at http://lpaste.net/92781
2013-09-09 11:00:00	paolino	mm_freak, me ?
2013-09-09 11:00:31	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 11:00:52	mm_freak	dmj`: your tree may not be a monad
2013-09-09 11:01:24	mm_freak	dmj`: the usual monadic tree looks like this:  data BTree a = Leaf a | Branch (BTree a) (BTree a)
2013-09-09 11:01:26	-->	hsyl20 (~shenry@193.50.110.138) has joined #haskell
2013-09-09 11:01:41	mm_freak	but it doesn't have values at branches, only at leaves
2013-09-09 11:01:53	-->	exicer (~exicer@host86-163-240-10.range86-163.btcentralplus.com) has joined #haskell
2013-09-09 11:01:55	mm_freak	paolino: yeah
2013-09-09 11:02:33	b__	Is there a library of Parsec based parsers for common patterns?
2013-09-09 11:02:50	mm_freak	dmj`: yes, i'm pretty sure your tree type is not a monad
2013-09-09 11:02:53	<--	akamch_` (~user@194.125.237.56) has quit (Read error: Connection reset by peer)
2013-09-09 11:03:06	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Read error: No route to host)
2013-09-09 11:03:10	paolino	ibotty, this story of computing a value from another tuple it to the first an use this to sort some as to come to an end
2013-09-09 11:03:45	paolino	mm_freak, I' am hobbist so I don't program, I'm just exposed
2013-09-09 11:04:00	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 11:04:17	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-09 11:04:20	ibotty	paolino: ?
2013-09-09 11:04:34	paolino	botty, I do this in every program
2013-09-09 11:05:03	mm_freak	dmj`: in 'Node x l r >>= f' the only thing you can do is to apply f to x, completely discarding the branches
2013-09-09 11:05:49	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 11:05:53	mm_freak	paolino: sure, but for how long?  i have a followup question based on your answer…  more than one year? =)
2013-09-09 11:05:59	paolino	I'm pretty sure I always have a map snd . sortBy (comparing fst) . map (f &&& id) or similar in every application
2013-09-09 11:06:06	-->	fsvehla (~fsvehla@mailout.faxonline.at) has joined #haskell
2013-09-09 11:06:07	paolino	mm_freak, sure
2013-09-09 11:06:10	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 11:06:23	mm_freak	paolino: have you ever needed this before?  and do you find it likely that you will need it after today? =P
2013-09-09 11:06:46	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-09 11:06:47	mm_freak	if you do, maybe the proper answer is to write a wrapper type
2013-09-09 11:06:57	mm_freak	newtype Fst a = Fst a
2013-09-09 11:07:08	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-09 11:07:10	mm_freak	instance (Ord a) => Ord (Fst (a, b))
2013-09-09 11:07:11	ibotty	i think most people have a common Data.Prelude.Extra module or something like that. not for published stuff but for one-offs
2013-09-09 11:07:26	dmj`	mm_freak: interesting. I'll have to stare at it more
2013-09-09 11:08:49	dmj`	mm_freak: for pre,post,in-order traversal using (++) is ok though right?
2013-09-09 11:09:55	mm_freak	dmj`: yes, although none of those folds are natural
2013-09-09 11:10:07	mm_freak	dmj`: this is another difference…  a monadic tree always has a canonical fold
2013-09-09 11:10:14	-->	jorick (~kciroj@94-224-181-103.access.telenet.be) has joined #haskell
2013-09-09 11:10:15	<--	jorick (~kciroj@94-224-181-103.access.telenet.be) has quit (Changing host)
2013-09-09 11:10:15	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-09 11:10:25	dmj`	pre-order traversal == depth first search, with is linear, just want to make sure mine is too
2013-09-09 11:11:03	mm_freak	dmj`: do you want a binary search tree like Set or rather a finger-tree like Seq?
2013-09-09 11:12:18	-->	benj_ (~bjames@nat-123-249.guardian.co.uk) has joined #haskell
2013-09-09 11:12:29	dmj`	mm_freak: Well I mean, both would be fine, the goal is pedagogy and understanding trade-offs in a functional setting
2013-09-09 11:13:42	-->	_boegel_ (~boegel@b246h206.ugent.be) has joined #haskell
2013-09-09 11:13:50	<--	boegel (~boegel@hpcbunny.ugent.be) has quit (Ping timeout: 240 seconds)
2013-09-09 11:14:11	dmj`	mm_freak: So sets are implemented using the tree you described above?
2013-09-09 11:14:25	--	knz_ is now known as knz
2013-09-09 11:14:32	dmj`	mm_freak: Also, canonical fold, do you mean that because my tree is now a monad I can use foldM on it?
2013-09-09 11:14:43	dmj`	@src foldM
2013-09-09 11:14:44	lambdabot	foldM _ a []     = return a
2013-09-09 11:14:44	lambdabot	foldM f a (x:xs) = f a x >>= \fax -> foldM f fax xs
2013-09-09 11:14:44	--	_boegel_ is now known as boegel
2013-09-09 11:15:18	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-09 11:15:32	mm_freak	dmj`: well, sure, you can use foldM, but i'm thinking of a Foldable instance
2013-09-09 11:15:57	mm_freak	in your case, which one do you choose?  in the monadic case, you always know which one to choose
2013-09-09 11:17:08	satc	I want something like typfamilies but at kind level. Does that exist in haskell??
2013-09-09 11:17:09	-->	exicer_ (~exicer@host86-146-40-36.range86-146.btcentralplus.com) has joined #haskell
2013-09-09 11:17:26	mm_freak	satc: nope
2013-09-09 11:17:37	-->	nexx (nexx@dslb-188-108-216-070.pools.arcor-ip.net) has joined #haskell
2013-09-09 11:17:37	<--	nexx (nexx@dslb-188-108-216-070.pools.arcor-ip.net) has quit (Changing host)
2013-09-09 11:17:38	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-09 11:17:39	<--	schlaftier (~daniel@5.158.182.23) has quit (Ping timeout: 264 seconds)
2013-09-09 11:19:13	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-09 11:19:13	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 11:19:14	mm_freak	dmj`: note how (>>=) for b-trees corresponds to concatMap for lists
2013-09-09 11:19:18	mm_freak	you could call it leafMap
2013-09-09 11:19:25	-->	nominolo_ (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-09 11:19:26	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-09 11:19:26	<--	exicer (~exicer@host86-163-240-10.range86-163.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2013-09-09 11:19:34	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Max SendQ exceeded)
2013-09-09 11:19:53	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-09 11:20:06	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Quit: Lost terminal)
2013-09-09 11:20:09	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 11:20:13	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 11:20:19	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-09 11:20:31	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 276 seconds)
2013-09-09 11:20:33	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 245 seconds)
2013-09-09 11:20:55	dmj`	mm_freak: So my tree can't be a monad, but it can be a foldable functor
2013-09-09 11:20:58	-->	Kaini1123 (~kaini@078132037033.public.t-mobile.at) has joined #haskell
2013-09-09 11:20:59	<--	Twey (~Twey@unaffiliated/twey) has quit (Read error: Operation timed out)
2013-09-09 11:21:06	<--	Morgawr (~morgawr@unaffiliated/morgawr) has quit (Read error: Operation timed out)
2013-09-09 11:21:06	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-09-09 11:21:09	<--	alexander__b (~alexander@fsf/member/alexanderb) has quit (Read error: Operation timed out)
2013-09-09 11:21:10	<--	arbn1 (~arbn@auriga.kiwilight.com) has quit (Read error: Operation timed out)
2013-09-09 11:21:13	<--	shesek (~shesek@77.127.54.57) has quit (Read error: Operation timed out)
2013-09-09 11:21:15	<--	kuribas (~user@d54C430B0.access.telenet.be) has quit (Read error: Operation timed out)
2013-09-09 11:21:16	<--	mortberg (~mortberg@c-46-162-99-51.cust.bredband2.com) has quit (Read error: Operation timed out)
2013-09-09 11:21:21	<--	Puffton (~Puffton@s213-103-201-120.cust.tele2.se) has quit (Read error: Connection reset by peer)
2013-09-09 11:21:30	-->	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-09-09 11:21:30	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-09 11:21:31	-->	mortberg (~mortberg@c-46-162-99-51.cust.bredband2.com) has joined #haskell
2013-09-09 11:21:31	<--	nanothief (~nanothief@116.255.8.253) has quit (Read error: Connection reset by peer)
2013-09-09 11:21:35	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-09 11:21:44	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-09-09 11:21:46	mm_freak	dmj`: sure…  whenever you can write a toList function, you can write a Foldable instance
2013-09-09 11:21:48	-->	nanothief (~nanothief@116.255.8.253) has joined #haskell
2013-09-09 11:21:51	satc	mm_freak: Given data Foo (a :: X) = Foo a. I want X to somehow capture that a can be of type A | B | C. I know I can achieve that by defining data X = A | B | C and then lifting type X to kind level. Now suppose, data Bar (a :: Y) = Bar a, here I want Y to capture a to be A | B. Now I can not define data Y = A | B.
2013-09-09 11:22:04	-->	alexander__b (~alexander@107.4.189.109.customer.cdi.no) has joined #haskell
2013-09-09 11:22:09	-->	Morgawr (~morgawr@50708C95.static.ziggozakelijk.nl) has joined #haskell
2013-09-09 11:22:32	--	Morgawr is now known as Guest72276
2013-09-09 11:22:58	<--	alexander__b (~alexander@107.4.189.109.customer.cdi.no) has quit (Changing host)
2013-09-09 11:22:58	-->	alexander__b (~alexander@fsf/member/alexanderb) has joined #haskell
2013-09-09 11:22:59	-->	arbn1 (~arbn@auriga.kiwilight.com) has joined #haskell
2013-09-09 11:23:04	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Read error: Operation timed out)
2013-09-09 11:23:07	mm_freak	satc: data X :: * -> * where Xa :: A -> X A; Xb :: B -> X B; …
2013-09-09 11:23:27	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-09-09 11:23:36	mm_freak	data Foo (a :: X a) = Foo a
2013-09-09 11:24:20	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 11:24:42	dmj`	mm_freak: why does a monadic tree have a canonical fold? Doesn't data BTree a = Empty | Node a (BTree a) (BTree a) have one as well
2013-09-09 11:24:48	mm_freak	satc: of course you could dispense with all this type-level work and just write appropriate instances
2013-09-09 11:25:08	mm_freak	satc: instance Monoid (Foo A); instance Monoid (Foo B); …
2013-09-09 11:25:25	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-09 11:25:39	mm_freak	dmj`: you have three to choose from, each equally valid
2013-09-09 11:25:48	Taneb	I am going to make a little calculator app in Haskell
2013-09-09 11:25:51	satc	mm_freak: Thanks. Let me see if that works in my original problem.
2013-09-09 11:25:52	-->	Twey (~Twey@unaffiliated/twey) has joined #haskell
2013-09-09 11:25:56	mm_freak	iot, pre, post
2013-09-09 11:25:58	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 11:26:30	hpaste	b__ pasted “<3” at http://lpaste.net/92782
2013-09-09 11:26:49	-->	steshaw (~steshaw@101.162.204.91) has joined #haskell
2013-09-09 11:26:57	mm_freak	dmj`: the reason why you have a canonical fold for monadic trees is that you have a canonical join, which is also kind of a flattening operation
2013-09-09 11:27:05	mm_freak	join :: BTree (BTree a) -> BTree a
2013-09-09 11:27:09	-->	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has joined #haskell
2013-09-09 11:28:04	Hugh__	Hi- when you use a language pragma at the top of a file, will the compiler use it only for the code in that file or for all code in the program? thanks
2013-09-09 11:28:19	bartavelle	Hugh__, only in that file
2013-09-09 11:28:25	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-09-09 11:28:33	Hugh__	awesome. as i thought! Thakns
2013-09-09 11:28:38	mm_freak	b__: welcome to applicative style =)
2013-09-09 11:28:50	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 11:28:52	<--	hamilyon (~ashaposhn@nat4.it.hh.ru) has left #haskell
2013-09-09 11:29:03	<--	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-09 11:29:21	<--	timemage (~user@unaffiliated/timemage) has quit (Quit: .)
2013-09-09 11:29:46	dmj`	mm_freak: k, I'm gonna write out the monad instance later, 430am here
2013-09-09 11:29:52	b__	Love how I can use int for both Ints and Integers, without writing the types
2013-09-09 11:30:06	dmj`	mm_freak: thank you for the help
2013-09-09 11:30:15	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-09 11:31:02	<--	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 11:31:52	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 11:33:38	mm_freak	dmj`: you're welcome
2013-09-09 11:34:00	mm_freak	b__: welcome to H-M type inference =)
2013-09-09 11:34:15	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 256 seconds)
2013-09-09 11:34:32	b__	:)) It's so pretty
2013-09-09 11:34:58	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-09 11:35:45	-->	visof (~visof@197.246.1.40) has joined #haskell
2013-09-09 11:35:45	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-09 11:35:52	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-09-09 11:35:59	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 11:36:22	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-09 11:36:41	<--	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has quit (Ping timeout: 245 seconds)
2013-09-09 11:36:52	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 11:37:21	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Quit: Leaving)
2013-09-09 11:37:29	satc	mm_freak: http://lpaste.net/92784 I am not sure how to get rid of the type family abuse here?
2013-09-09 11:38:08	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 11:38:18	mm_freak	satc: i don't know either, because i don't know what you want to do
2013-09-09 11:39:10	mm_freak	apparently some machine code stuff
2013-09-09 11:39:21	-->	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has joined #haskell
2013-09-09 11:40:54	satc	mm_freak: Yeah.. I want haskell to infer type automatically
2013-09-09 11:41:20	<--	Krakarn (Krakarn@62.80.204.136) has quit (Remote host closed the connection)
2013-09-09 11:41:43	satc	mm_freak: http://lpaste.net/92784 See the updated code and how types are inferred in the examples at the end of the file
2013-09-09 11:42:08	mm_freak	satc: constraints won't help type inference
2013-09-09 11:42:14	-->	whald (~trem@2001:4dd0:fbbe:1:f84a:941c:dcb1:3628) has joined #haskell
2013-09-09 11:42:16	--	ejls_ is now known as ejls
2013-09-09 11:42:16	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-09 11:42:28	mm_freak	because both type classes and type families are open
2013-09-09 11:42:58	satc	mm_freak: I know that. I just want it to fail if wrong types are given
2013-09-09 11:43:03	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-09 11:43:17	mm_freak	satc: btw, DataKinds also lift [], which may be nicer than ArgList
2013-09-09 11:43:28	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-09 11:43:55	satc	mm_freak: Oh. Thanks for that.
2013-09-09 11:44:09	mm_freak	remember to use ': and '[]
2013-09-09 11:44:39	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 264 seconds)
2013-09-09 11:44:41	mm_freak	satc: i think what you really want is a simple GADT
2013-09-09 11:44:44	-->	JohnBat26 (~Eugene@89.175.77.172) has joined #haskell
2013-09-09 11:44:49	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-09 11:45:02	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Client Quit)
2013-09-09 11:45:05	-->	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-09 11:45:09	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-09 11:45:25	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Remote host closed the connection)
2013-09-09 11:45:34	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 11:46:00	-->	Krakarn (Krakarn@62.80.204.136) has joined #haskell
2013-09-09 11:46:24	mm_freak	satc: GADTs are the primary way to establish constructions, and the values are both programs and proofs
2013-09-09 11:46:46	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-09 11:46:54	satc	mm_freak: Ok.. I will try that and see if I can come up with a simpler design
2013-09-09 11:47:02	mm_freak	(i'm pretending that ⊥ doesn't exist)
2013-09-09 11:47:10	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-09 11:49:29	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-09 11:52:14	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-09-09 11:52:24	merijn	mm_freak: "type families are open" you forgot the footnote "except in 7.8 where we will have closed type families" ;)
2013-09-09 11:52:33	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-09 11:52:35	<--	SrPx (b16266fc@gateway/web/freenode/ip.177.98.102.252) has quit (Ping timeout: 250 seconds)
2013-09-09 11:52:41	mm_freak	ah, nice
2013-09-09 11:52:51	merijn	mm_freak: I know, right!
2013-09-09 11:52:56	mm_freak	finally type level functions =)
2013-09-09 11:53:03	<--	yopikh (~mand@79.175.167.200) has quit (Ping timeout: 264 seconds)
2013-09-09 11:53:48	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-09 11:54:09	mm_freak	change log for GHC 13.0.0:  Added -XAgda2013.
2013-09-09 11:56:49	--	gpampara_off is now known as gpampara
2013-09-09 11:58:15	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 260 seconds)
2013-09-09 11:58:33	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-09 11:59:09	-->	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has joined #haskell
2013-09-09 11:59:23	-->	lukas_ (~lukas@212.80.65.51) has joined #haskell
2013-09-09 11:59:24	-->	scripty (~scripty@117.221.123.93) has joined #haskell
2013-09-09 11:59:36	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Quit: amosr)
2013-09-09 12:00:07	<--	zarul (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 260 seconds)
2013-09-09 12:01:27	<--	staafl (~staafl@95.42.27.15) has quit (Ping timeout: 240 seconds)
2013-09-09 12:01:40	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-09 12:02:46	<--	funfunctor (~functorfu@27-32-126-85.static.tpgi.com.au) has quit (Ping timeout: 276 seconds)
2013-09-09 12:03:02	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 246 seconds)
2013-09-09 12:03:23	<--	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-09-09 12:03:26	 *	hackagebot sodium 0.7.0.0 - Sodium Reactive Programming (FRP) System  http://hackage.haskell.org/package/sodium-0.7.0.0 (StephenBlackheath)
2013-09-09 12:04:19	<--	nexx (nexx@unaffiliated/xxen) has quit (Ping timeout: 260 seconds)
2013-09-09 12:05:03	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 240 seconds)
2013-09-09 12:08:25	<--	apfelbox_ (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Read error: Connection reset by peer)
2013-09-09 12:08:53	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has joined #haskell
2013-09-09 12:10:49	-->	OlegYch (~OlegYch@213.184.238.131) has joined #haskell
2013-09-09 12:11:31	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-09 12:11:49	-->	unsonso (57a1c782@gateway/web/freenode/ip.87.161.199.130) has joined #haskell
2013-09-09 12:12:13	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-09 12:12:31	<--	OlegYch6 (~OlegYch@213.184.238.131) has quit (Ping timeout: 264 seconds)
2013-09-09 12:13:30	-->	akegalj (~akegalj@93-138-49-153.adsl.net.t-com.hr) has joined #haskell
2013-09-09 12:13:44	<--	mno2 (~mno2@wlan41.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-09 12:13:51	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 12:13:52	-->	augur_ (~augur@208.58.5.87) has joined #haskell
2013-09-09 12:13:59	-->	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 12:14:10	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-09 12:14:13	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-09 12:15:08	<--	visof (~visof@197.246.1.40) has quit (Ping timeout: 245 seconds)
2013-09-09 12:15:59	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-09 12:18:36	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-09 12:18:37	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-09 12:18:49	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-09 12:18:58	--	AfC is now known as AfC|soup
2013-09-09 12:19:03	<--	AfC|soup (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-09-09 12:19:20	Taneb	Update on me writing a calculator app in Haskell: I can successfully input numbers
2013-09-09 12:19:37	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Quit: Leaving.)
2013-09-09 12:21:03	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-09 12:21:33	Taneb	With decimal points!
2013-09-09 12:22:09	Hafydd	Does it have a CLI?
2013-09-09 12:22:27	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 12:22:54	<--	jaspervdj (~jaspervdj@jaspervdj.be) has quit (Read error: Operation timed out)
2013-09-09 12:23:34	Taneb	Nah, GUI
2013-09-09 12:24:15	Taneb	The main point was to help me learn to write GUI code
2013-09-09 12:24:29	<--	lukas_ (~lukas@212.80.65.51) has quit (Quit: lukas_)
2013-09-09 12:24:41	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-09 12:25:15	ocharles	mm_freak: but fast and loose reasoning is morally correct, so you don't have to feel bad about _|_ :)
2013-09-09 12:25:25	Hafydd	You should have chosen something that benefits more from not having a CLI.
2013-09-09 12:25:26	ocharles	though I do need to actually read that paper to make claims like that
2013-09-09 12:25:35	Hafydd	GUI calculators are awful.
2013-09-09 12:25:45	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-09 12:25:47	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 260 seconds)
2013-09-09 12:25:52	mm_freak	ocharles: but i feel bad about saying "proof" in the presence of ⊥ =)
2013-09-09 12:25:54	Hafydd	(Unless there's a CLI embedded in the GUI)
2013-09-09 12:26:07	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Remote host closed the connection)
2013-09-09 12:26:25	mm_freak	Taneb: which GUI framework?
2013-09-09 12:26:26	-->	thillux (~thillux@p57ABAA34.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 12:26:28	Taneb	GTK
2013-09-09 12:26:39	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 12:26:42	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 12:26:48	Taneb	Hafydd, could you suggest something?
2013-09-09 12:27:15	-->	miclorb (~textual@ppp121-44-83-40.lns20.syd6.internode.on.net) has joined #haskell
2013-09-09 12:27:28	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 12:27:44	Hafydd	Taneb: a paint program.
2013-09-09 12:27:55	Hafydd	Minesweeper.
2013-09-09 12:28:11	Taneb	Hafydd, let me do this in small steps
2013-09-09 12:28:14	Hafydd	A graph editor.
2013-09-09 12:28:19	-->	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has joined #haskell
2013-09-09 12:28:45	<--	paullik (~paullik@unaffiliated/paullik) has quit (Read error: Operation timed out)
2013-09-09 12:28:45	Kaini1123	Getting Minesweeper right is extraordinarily difficult :P
2013-09-09 12:28:54	Hafydd	What's difficult about it?
2013-09-09 12:29:07	Kaini1123	Generating fields that are guranteed to be solvable
2013-09-09 12:29:10	Hafydd	Oh, generating solvable puzzles? I suppose so.
2013-09-09 12:29:20	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-09 12:29:25	Taneb	Kaini1123, I don't think even Windows minesweeper does that
2013-09-09 12:29:53	<--	thillux (~thillux@p57ABAA34.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-09 12:29:53	Kaini1123	Taneb, yes - that's why I've never played the Windows version
2013-09-09 12:29:59	<--	bkolera (~textual@123.200.143.249) has quit (Ping timeout: 260 seconds)
2013-09-09 12:30:08	Taneb	Kaini1123, do other versions?
2013-09-09 12:30:14	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-09 12:30:15	`Jake`	There's a whole lot of strategy involved with efficient guessing
2013-09-09 12:30:37	<--	Wizek (~Wizek@catv-89-134-33-8.catv.broadband.hu) has quit (Read error: Operation timed out)
2013-09-09 12:30:55	Kaini1123	Taneb, for example http://www.chiark.greenend.org.uk/~sgtatham/puzzles/
2013-09-09 12:30:58	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 12:31:05	Taneb	Oh, wow
2013-09-09 12:31:50	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 12:32:44	-->	visof (~visof@197.161.65.28) has joined #haskell
2013-09-09 12:32:58	<--	visof (~visof@197.161.65.28) has quit (Changing host)
2013-09-09 12:32:59	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-09-09 12:33:20	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-09 12:34:13	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-09 12:35:08	<--	exicer_ (~exicer@host86-146-40-36.range86-146.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-09 12:35:29	-->	hashcat (~chatzilla@27.242.4.115) has joined #haskell
2013-09-09 12:37:39	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-09 12:39:00	<--	scripty (~scripty@117.221.123.93) has quit (Read error: Connection reset by peer)
2013-09-09 12:39:06	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-09 12:39:47	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 12:40:31	-->	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has joined #haskell
2013-09-09 12:40:35	-->	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has joined #haskell
2013-09-09 12:40:58	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-09 12:42:06	ocharles	mm_freak: here's what I came up with last night http://lpaste.net/92787
2013-09-09 12:42:30	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-09-09 12:42:33	-->	amosr (~amos@28.30.233.220.static.exetel.com.au) has joined #haskell
2013-09-09 12:42:34	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Client Quit)
2013-09-09 12:42:34	ocharles	mm_freak: idea is to build up Scenes, and when rendering I check the delta between Scenes to do the minimal amount of redrawing, though that's not yet implemented
2013-09-09 12:42:50	ocharles	mm_freak: I also use the monad under the Wire as an asset cache
2013-09-09 12:43:16	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 12:43:17	<--	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Quit: Exit IRC)
2013-09-09 12:43:32	ocharles	All a bit messy at the moment, but I'm enjoyng where it's going
2013-09-09 12:43:33	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-09 12:44:20	mm_freak	ocharles: you shouldn't call the session value 'clock'
2013-09-09 12:44:28	<--	steshaw (~steshaw@101.162.204.91) has quit (Quit: Leaving.)
2013-09-09 12:45:00	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 12:45:39	ocharles	right, it's the time delta
2013-09-09 12:45:50	ocharles	(and a new session)
2013-09-09 12:47:59	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-09 12:48:15	mm_freak	ocharles: it's not a time delta
2013-09-09 12:48:22	mm_freak	it's only a time delta for Timed T () =)
2013-09-09 12:48:39	mm_freak	it's a state delta, that's why i call it 'ds'
2013-09-09 12:48:39	mm_freak	s and ds
2013-09-09 12:48:43	ocharles	ok, makes sense
2013-09-09 12:48:55	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 276 seconds)
2013-09-09 12:48:57	ocharles	in *this* case I'm in control of it so it really is a time delta. but it seems good to get into that mode of thinking
2013-09-09 12:49:39	<--	nominolo_ (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 256 seconds)
2013-09-09 12:50:10	-->	nominolo (~nominolo@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-09 12:51:45	ocharles	using foldMap to construct the scene is fun though :)
2013-09-09 12:51:56	-->	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 12:52:28	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-09-09 12:52:44	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-09 12:53:29	-->	perspectival (perspectiv@nat/redhat/x-nlzygycekypppylp) has joined #haskell
2013-09-09 12:54:24	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-09-09 12:54:47	<--	fxr (~user@78.187.102.63) has quit (Remote host closed the connection)
2013-09-09 12:56:10	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 12:56:17	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-09 12:56:34	<--	perspectival (perspectiv@nat/redhat/x-nlzygycekypppylp) has quit (Client Quit)
2013-09-09 12:56:56	-->	perspectival (perspectiv@nat/redhat/x-kzfexpyamoesilao) has joined #haskell
2013-09-09 12:59:00	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 12:59:01	--	gpampara is now known as gpampara_off
2013-09-09 13:00:20	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-09 13:00:22	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-09 13:01:02	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 13:01:43	-->	Redz (~red@82.113.106.12) has joined #haskell
2013-09-09 13:02:05	--	gpampara_off is now known as gpampara
2013-09-09 13:02:41	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Remote host closed the connection)
2013-09-09 13:03:41	<--	csakatok_ (~csakatoku@em119-72-198-118.pool.e-mobile.ne.jp) has quit (Remote host closed the connection)
2013-09-09 13:03:51	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-09 13:04:10	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-09 13:04:40	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 13:04:57	<--	unsonso (57a1c782@gateway/web/freenode/ip.87.161.199.130) has quit (Quit: Page closed)
2013-09-09 13:05:17	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 13:05:19	<--	thunderrd (~thunderrd@119.42.79.52) has quit (Remote host closed the connection)
2013-09-09 13:05:28	-->	ijp (~user@host81-155-27-145.range81-155.btcentralplus.com) has joined #haskell
2013-09-09 13:05:50	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 245 seconds)
2013-09-09 13:06:40	-->	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has joined #haskell
2013-09-09 13:06:59	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 13:08:21	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Ping timeout: 256 seconds)
2013-09-09 13:09:16	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 13:09:29	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 13:11:28	-->	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has joined #haskell
2013-09-09 13:12:50	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 256 seconds)
2013-09-09 13:13:08	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-09 13:13:18	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Quit: Leaving)
2013-09-09 13:13:32	--	Mortomes is now known as MortyPinkman
2013-09-09 13:14:33	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 13:14:56	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-09-09 13:14:58	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Remote host closed the connection)
2013-09-09 13:15:33	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-09 13:16:47	<--	miclorb (~textual@ppp121-44-83-40.lns20.syd6.internode.on.net) has quit
2013-09-09 13:17:03	<--	lingxiao (~lingxiao@c-69-249-203-113.hsd1.pa.comcast.net) has quit (Remote host closed the connection)
2013-09-09 13:17:29	-->	crvs (~crvs@bl11-61-12.dsl.telepac.pt) has joined #haskell
2013-09-09 13:17:41	-->	crvs_ (~crvs@bl11-61-12.dsl.telepac.pt) has joined #haskell
2013-09-09 13:17:57	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Ping timeout: 245 seconds)
2013-09-09 13:18:00	<--	fsvehla (~fsvehla@mailout.faxonline.at) has quit (Quit: fsvehla)
2013-09-09 13:19:34	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-09-09 13:21:03	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 13:21:38	<--	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 13:21:48	<--	talzeus (~studybot_@101.110.31.120) has quit (Remote host closed the connection)
2013-09-09 13:22:14	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-09 13:22:29	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-09 13:23:17	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-09 13:23:18	-->	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-09 13:23:44	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-09 13:24:01	<--	codesoup (~codesoup@76-10-142-65.dsl.teksavvy.com) has quit (Ping timeout: 276 seconds)
2013-09-09 13:24:19	<--	talzeus (~studybot_@101.110.31.120) has quit (Remote host closed the connection)
2013-09-09 13:24:27	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-09 13:25:45	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-09 13:25:49	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Remote host closed the connection)
2013-09-09 13:26:06	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 13:26:42	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 13:27:09	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 13:27:53	-->	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has joined #haskell
2013-09-09 13:29:42	<--	Beetny (~Beetny@ppp118-208-23-140.lns20.bne1.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-09-09 13:29:52	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 260 seconds)
2013-09-09 13:29:59	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-09 13:31:18	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-09 13:31:49	--	Guest72276 is now known as Morgawr
2013-09-09 13:32:07	<--	Morgawr (~morgawr@50708C95.static.ziggozakelijk.nl) has quit (Changing host)
2013-09-09 13:32:08	-->	Morgawr (~morgawr@unaffiliated/morgawr) has joined #haskell
2013-09-09 13:32:22	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 248 seconds)
2013-09-09 13:32:27	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-09 13:34:00	-->	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-09 13:34:31	--	gpampara is now known as gpampara_off
2013-09-09 13:36:01	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 13:36:03	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-09 13:36:40	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 13:36:41	-->	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has joined #haskell
2013-09-09 13:36:46	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Quit: Byez...SeeSoon!EnjoyTheSilence)
2013-09-09 13:36:52	-->	chexxor_netbook (~chexxor@220-136-76-249.dynamic.hinet.net) has joined #haskell
2013-09-09 13:37:49	-->	DanielDiaz (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 13:38:55	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-09 13:39:43	-->	ts33kr (~ts33kr@193.108.171.46) has joined #haskell
2013-09-09 13:40:19	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-09 13:40:37	<--	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has quit (Ping timeout: 256 seconds)
2013-09-09 13:41:23	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-09 13:41:26	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-09 13:41:57	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 13:45:37	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-09 13:45:44	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-09-09 13:45:51	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 13:46:05	<--	JohnBat26 (~Eugene@89.175.77.172) has quit (Read error: Connection reset by peer)
2013-09-09 13:48:15	-->	jorick (~kciroj@94-224-181-103.access.telenet.be) has joined #haskell
2013-09-09 13:48:15	<--	jorick (~kciroj@94-224-181-103.access.telenet.be) has quit (Changing host)
2013-09-09 13:48:15	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-09 13:48:31	-->	amyers (~quassel@128.177.88.72) has joined #haskell
2013-09-09 13:49:03	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-09 13:49:34	<--	kushal (~kdas@fedora/kushal) has quit (Remote host closed the connection)
2013-09-09 13:49:54	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-09 13:50:17	-->	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has joined #haskell
2013-09-09 13:50:39	<--	desc|zenbook (~heh@sdg-24-160.tm.net.my) has quit (Ping timeout: 264 seconds)
2013-09-09 13:50:39	kuribas	Why isn't there a computer algebra written in haskell yet?
2013-09-09 13:50:57	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-09 13:51:10	kuribas	I am using maxima, but it's semantics are strange.
2013-09-09 13:51:23	<--	dgpratt (~dpratt71@pool-72-65-108-170.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-09-09 13:53:17	-->	JohnBat26 (~Eugene@89.175.77.172) has joined #haskell
2013-09-09 13:53:41	-->	fastov (~guest@174.36.234.43-static.reverse.softlayer.com) has joined #haskell
2013-09-09 13:53:53	<--	skchrko (~sk@109.110.73.135) has quit (Ping timeout: 245 seconds)
2013-09-09 13:54:09	<--	fastov (~guest@174.36.234.43-static.reverse.softlayer.com) has quit (Remote host closed the connection)
2013-09-09 13:54:15	<--	simukis_ (~simukis_@88-119-48-95.static.zebra.lt) has quit (Read error: Connection reset by peer)
2013-09-09 13:55:55	-->	snikkers (~snikkers@cable-217-63-82-193.zeelandnet.nl) has joined #haskell
2013-09-09 13:56:03	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-09 13:56:03	<--	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-09 13:56:15	-->	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-09 13:56:55	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-09 13:58:08	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-09 13:58:31	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-09-09 13:58:44	<--	arenz (arenz@nat/ibm/x-omfgtwvvofavynpf) has quit (Ping timeout: 256 seconds)
2013-09-09 14:02:41	<--	DanielDiaz (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-09 14:02:41	--	gpampara_off is now known as gpampara
2013-09-09 14:02:45	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Remote host closed the connection)
2013-09-09 14:02:47	-->	DanielDiaz1 (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 14:03:39	<--	DanielDiaz1 (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-09 14:03:44	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-09-09 14:03:52	-->	DanielDiaz (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 14:03:59	-->	fsvehla (~fsvehla@chello084112185050.3.11.vie.surfer.at) has joined #haskell
2013-09-09 14:04:43	<--	konundra (~eunoia7@c-50-129-162-24.hsd1.in.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 14:05:04	-->	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 14:05:18	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 14:05:34	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-09 14:05:37	<--	chexxor_netbook (~chexxor@220-136-76-249.dynamic.hinet.net) has quit (Quit: Lost terminal)
2013-09-09 14:05:59	-->	ykm (~ykm@38.snat-111-91-51.hns.net.in) has joined #haskell
2013-09-09 14:06:20	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-09 14:06:50	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-09 14:07:04	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-09 14:09:18	-->	clemux (~clemux@clara.mux.me) has joined #haskell
2013-09-09 14:09:19	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-09-09 14:09:43	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 245 seconds)
2013-09-09 14:09:48	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Client Quit)
2013-09-09 14:10:07	<--	amathew (~Adium@184.152.8.103) has left #haskell
2013-09-09 14:10:17	<--	chatsiri_ (~chatsiri_@158.108.167.170) has quit (Quit: leaving)
2013-09-09 14:10:52	<--	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-09 14:11:29	-->	akurei__ (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-09 14:11:30	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a11:34e0:b83e:9bd9:c514:c3c7) has joined #haskell
2013-09-09 14:11:50	<--	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has quit (Ping timeout: 248 seconds)
2013-09-09 14:11:54	-->	skchrko (~sk@109.110.83.124) has joined #haskell
2013-09-09 14:12:10	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-09 14:12:51	--	Saizan_ is now known as Saizan
2013-09-09 14:13:47	<--	fsvehla (~fsvehla@chello084112185050.3.11.vie.surfer.at) has quit (Quit: fsvehla)
2013-09-09 14:14:15	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-09 14:14:30	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-09 14:16:31	<--	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has quit (Quit: leaving)
2013-09-09 14:16:50	<--	determinant_ (~determina@2001:4898:7020:301a:e516:bd37:9388:947f) has quit (Write error: Connection reset by peer)
2013-09-09 14:16:57	-->	talis (~taliszhou@113.118.54.232) has joined #haskell
2013-09-09 14:17:06	-->	determinant_ (~determina@167.220.225.135) has joined #haskell
2013-09-09 14:17:46	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 14:18:02	<--	talis (~taliszhou@113.118.54.232) has quit (Client Quit)
2013-09-09 14:18:10	-->	arenz (arenz@nat/ibm/x-ruvopydolohmjwya) has joined #haskell
2013-09-09 14:18:57	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 14:20:27	shiona	is there some neat way of doing a 'reverse map', a -> [a->b] -> [b]
2013-09-09 14:20:35	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Ping timeout: 246 seconds)
2013-09-09 14:20:40	shiona	I found out using ap works, but I need to make a singleton list
2013-09-09 14:20:50	mauke	sequence
2013-09-09 14:20:59	mauke	well, flip sequence I guess
2013-09-09 14:21:17	shiona	hmm, thanks. Will take a look
2013-09-09 14:21:19	mauke	:t map . flip id
2013-09-09 14:21:19	lambdabot	a -> [a -> b] -> [b]
2013-09-09 14:21:23	edvo	:t \a -> map ($ a)
2013-09-09 14:21:24	lambdabot	a -> [a -> b] -> [b]
2013-09-09 14:21:28	mauke	:t [map . flip id, flip sequence]
2013-09-09 14:21:29	lambdabot	[a -> [a -> a1] -> [a1]]
2013-09-09 14:22:10	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-09 14:22:36	<--	DanielDiaz (~dhelta@196.Red-88-1-64.dynamicIP.rima-tde.net) has quit (Quit: Leaving.)
2013-09-09 14:22:41	mauke	:t flip ap . pure
2013-09-09 14:22:42	lambdabot	(Monad m, Applicative m) => a -> m (a -> b) -> m b
2013-09-09 14:22:57	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-09 14:23:08	mauke	:t [map . flip id, flip sequence, flip ap . pure]
2013-09-09 14:23:09	lambdabot	[a -> [a -> a1] -> [a1]]
2013-09-09 14:23:10	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 14:23:34	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 248 seconds)
2013-09-09 14:24:05	dfan	Whoa, trying to wrap my brain around flip id
2013-09-09 14:24:21	shiona	edvo: that was probably what I was looking for. Shows how little I know about $
2013-09-09 14:24:23	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 14:24:51	edvo	dfan: flip id = flip ($)
2013-09-09 14:24:51	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a11:34e0:b83e:9bd9:c514:c3c7) has quit (Quit: Bye)
2013-09-09 14:24:57	mauke	dfan: ($) = id
2013-09-09 14:25:02	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a11:34e0:b83e:9bd9:c514:c3c7) has joined #haskell
2013-09-09 14:25:07	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-09 14:25:23	mauke	:t ($)
2013-09-09 14:25:24	lambdabot	(a -> b) -> a -> b
2013-09-09 14:25:32	mauke	which is (a -> b) -> (a -> b)
2013-09-09 14:25:38	mauke	which is c -> c where c = a -> b
2013-09-09 14:25:45	mauke	which is a special case of id
2013-09-09 14:25:54	dfan	flip ($) I understand, I guess the point is that $ really is a no-op
2013-09-09 14:26:11	mauke	@src flip
2013-09-09 14:26:11	lambdabot	flip f x y = f y x
2013-09-09 14:26:21	mauke	flip id = \x y -> id y x
2013-09-09 14:26:22	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-09 14:26:28	mauke	= \x y -> y x
2013-09-09 14:26:55	-->	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has joined #haskell
2013-09-09 14:27:03	Tinned_Tuna	@src flip
2013-09-09 14:27:04	lambdabot	flip f x y = f y x
2013-09-09 14:27:09	dfan	Got it now, thanks
2013-09-09 14:27:33	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-09 14:27:40	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 256 seconds)
2013-09-09 14:27:41	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 14:28:49	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-09 14:29:06	<--	AfC (~andrew@2001:44b8:31cb:d400:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-09 14:29:11	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 14:29:56	<--	jibi (~jibi@77.42.48.122) has quit (Ping timeout: 256 seconds)
2013-09-09 14:30:07	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-09 14:30:55	<--	cods (~cods@rsbac/developer/cods) has quit (Quit: leaving)
2013-09-09 14:32:07	<--	phienone_ (~ph@eduroam-cl1002.wl.lut.fi) has quit (Ping timeout: 245 seconds)
2013-09-09 14:32:19	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 14:32:34	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-09 14:32:37	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-09 14:32:55	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-09 14:33:39	<--	zbcm (~zbcm@147.69.182.184) has quit (Ping timeout: 260 seconds)
2013-09-09 14:34:04	<--	Peaker (~eyal@87.69.111.138) has quit (Ping timeout: 264 seconds)
2013-09-09 14:35:07	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-09 14:36:15	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 14:36:24	-->	JobV (~Adium@wndsnyhed01-pool1-a130.wndsny.tds.net) has joined #haskell
2013-09-09 14:36:51	<--	ts33kr (~ts33kr@193.108.171.46) has quit (Ping timeout: 264 seconds)
2013-09-09 14:37:42	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Remote host closed the connection)
2013-09-09 14:38:03	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 264 seconds)
2013-09-09 14:39:29	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-09 14:40:29	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 14:40:36	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-09 14:40:52	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-09 14:40:53	-->	talzeus_ (~studybot_@113.37.230.101) has joined #haskell
2013-09-09 14:41:24	<--	perspectival (perspectiv@nat/redhat/x-kzfexpyamoesilao) has quit (Read error: Connection reset by peer)
2013-09-09 14:41:38	-->	perspectival (perspectiv@nat/redhat/session) has joined #haskell
2013-09-09 14:42:17	-->	Desheng (~Desheng@166.181.66.136) has joined #haskell
2013-09-09 14:42:25	-->	pygospa (~Pygosceli@kiel-d9bfdc9e.pool.mediaWays.net) has joined #haskell
2013-09-09 14:43:08	-->	Krugger (~chatzilla@188.140.47.87) has joined #haskell
2013-09-09 14:43:50	<--	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has quit (Ping timeout: 240 seconds)
2013-09-09 14:44:20	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 14:44:34	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-09 14:44:34	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-09 14:44:36	<--	arenz (arenz@nat/ibm/x-ruvopydolohmjwya) has quit (Ping timeout: 276 seconds)
2013-09-09 14:44:41	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-09 14:44:54	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Ping timeout: 248 seconds)
2013-09-09 14:45:00	<--	perspectival (perspectiv@nat/redhat/session) has quit (Changing host)
2013-09-09 14:45:01	-->	perspectival (perspectiv@nat/redhat/x-qvxbsztchcvwomcq) has joined #haskell
2013-09-09 14:45:08	<--	amyers (~quassel@128.177.88.72) has quit (Remote host closed the connection)
2013-09-09 14:45:19	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-09-09 14:45:32	<--	kitallis (~kitallis@106.51.83.46) has quit (Ping timeout: 256 seconds)
2013-09-09 14:45:32	<--	TheRealPygo (~Pygosceli@kiel-d9bfc4b0.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-09 14:45:45	-->	SpyrosTrigazis (~spyrostri@conf-211.admin.grnet.gr) has joined #haskell
2013-09-09 14:46:14	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-09 14:46:27	-->	jbracker (~quassel@m-116.informatik.uni-kiel.de) has joined #haskell
2013-09-09 14:47:58	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Client Quit)
2013-09-09 14:48:40	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-09 14:49:29	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-09 14:49:50	-->	phischu (~pschuster@p4FD317E7.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 14:49:51	-->	AntiSpamMeta2 (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-09-09 14:49:52	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Killed (card.freenode.net (Nickname regained by services)))
2013-09-09 14:49:52	--	AntiSpamMeta2 is now known as AntiSpamMeta
2013-09-09 14:50:02	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-09 14:50:48	-->	akegalj_ (~akegalj@93-138-245-37.adsl.net.t-com.hr) has joined #haskell
2013-09-09 14:50:59	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-09 14:51:18	<--	Guest66650 (~df@64.191.40.211) has quit (Ping timeout: 248 seconds)
2013-09-09 14:51:22	<--	akegalj (~akegalj@93-138-49-153.adsl.net.t-com.hr) has quit (Read error: Operation timed out)
2013-09-09 14:51:27	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a11:34e0:b83e:9bd9:c514:c3c7) has quit (Ping timeout: 240 seconds)
2013-09-09 14:52:00	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:704:c7dc:122d:4050:bcac:a549) has joined #haskell
2013-09-09 14:53:15	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 260 seconds)
2013-09-09 14:54:01	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 14:54:26	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-09-09 14:55:23	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-09 14:56:22	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 14:56:33	<--	perspectival (perspectiv@nat/redhat/x-qvxbsztchcvwomcq) has quit (Read error: Connection reset by peer)
2013-09-09 14:56:40	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-09 14:56:44	-->	perspectival (perspectiv@nat/redhat/x-cjgctparcalhshnq) has joined #haskell
2013-09-09 14:58:30	 *	hackagebot vault 0.3.0.1 - a persistent store for values of arbitrary types  http://hackage.haskell.org/package/vault-0.3.0.1 (HeinrichApfelmus)
2013-09-09 14:59:10	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 14:59:15	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-09 14:59:27	-->	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has joined #haskell
2013-09-09 14:59:55	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-09-09 15:00:10	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-09 15:00:17	-->	DarkFox (~df@64.191.40.211) has joined #haskell
2013-09-09 15:00:40	--	DarkFox is now known as Guest41978
2013-09-09 15:01:11	<--	perspectival (perspectiv@nat/redhat/x-cjgctparcalhshnq) has quit (Ping timeout: 260 seconds)
2013-09-09 15:01:28	<--	andares_ (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-09 15:01:28	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Read error: Connection reset by peer)
2013-09-09 15:01:44	<--	ykm (~ykm@38.snat-111-91-51.hns.net.in) has quit (Quit: Leaving.)
2013-09-09 15:01:44	-->	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has joined #haskell
2013-09-09 15:01:45	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-09 15:01:52	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-09-09 15:01:53	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 15:02:06	-->	Moggle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-09 15:03:05	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 15:03:11	<--	tromp (~tromp@rtc35-148.rentec.com) has quit (Read error: Connection reset by peer)
2013-09-09 15:03:18	bitonic-work	can I install a package into a specific sandbox?
2013-09-09 15:03:24	bitonic-work	like, a local package
2013-09-09 15:03:57	-->	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has joined #haskell
2013-09-09 15:05:05	-->	perspectival (perspectiv@nat/redhat/x-bcmzgqcpmzbuvzjx) has joined #haskell
2013-09-09 15:05:38	donri	bitonic-work: perhaps cabal --sandbox-config-file=FILE install ...?
2013-09-09 15:05:39	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Read error: Connection reset by peer)
2013-09-09 15:05:40	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-09 15:05:41	-->	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has joined #haskell
2013-09-09 15:06:01	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 15:06:01	bitonic-work	donri: I'll try that in a second, thanks
2013-09-09 15:06:40	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-09 15:07:28	-->	Peaker (~eyal@46.19.81.134) has joined #haskell
2013-09-09 15:08:04	<--	perspectival (perspectiv@nat/redhat/x-bcmzgqcpmzbuvzjx) has quit (Client Quit)
2013-09-09 15:09:41	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-09 15:09:51	-->	Wuzzy (~Wuzzy@p549FB069.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 15:09:57	<--	xl1 (~xl@111.199.155.235) has quit (Ping timeout: 276 seconds)
2013-09-09 15:10:42	-->	ISF (~ivan@201.82.138.219) has joined #haskell
2013-09-09 15:12:02	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 246 seconds)
2013-09-09 15:12:18	bitonic-work	unrelated question
2013-09-09 15:12:30	bitonic-work	how do I nuke *all* cabal related stuff on OS X?
2013-09-09 15:12:38	-->	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has joined #haskell
2013-09-09 15:12:40	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Remote host closed the connection)
2013-09-09 15:12:51	-->	bergey (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-09-09 15:13:13	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 15:13:39	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-09 15:13:53	-->	arenz (arenz@nat/ibm/x-geixcgjzqwnmipue) has joined #haskell
2013-09-09 15:14:05	-->	tromp (~tromp@rtc35-161.rentec.com) has joined #haskell
2013-09-09 15:14:38	<--	chuzz (~user@unaffiliated/chuzz) has quit (Quit: Leaving)
2013-09-09 15:15:16	<--	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has quit (Quit: Konversation terminated!)
2013-09-09 15:15:29	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 240 seconds)
2013-09-09 15:15:32	merijn	bitonic-work: Look in ~/Library/Haskell
2013-09-09 15:15:53	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 246 seconds)
2013-09-09 15:16:10	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 15:16:57	<--	azcodex (~azcodex_@4.Red-79-145-49.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-09 15:17:36	-->	debo (~anonymous@108.175.233.153) has joined #haskell
2013-09-09 15:17:57	<--	xexonixxexillion (~Adium@130.56.84.41) has quit (Remote host closed the connection)
2013-09-09 15:19:27	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Ping timeout: 264 seconds)
2013-09-09 15:20:36	-->	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-09 15:20:59	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Read error: Operation timed out)
2013-09-09 15:22:10	-->	jibi (~jibi@77.42.48.122) has joined #haskell
2013-09-09 15:22:39	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-09 15:23:42	bitonic-work	merijn: yeah but there are a lot of other places :(
2013-09-09 15:23:48	<--	bkolera (~textual@ppp118-208-78-112.lns20.bne4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 15:23:51	<--	lusory (~lusory@42.60.25.228) has quit (Ping timeout: 240 seconds)
2013-09-09 15:23:54	bitonic-work	I find it quite weird that there is no way to uninstall the ghc binaries
2013-09-09 15:23:59	bitonic-work	or at least I couldn't find it
2013-09-09 15:24:18	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-09 15:25:27	-->	nettsundere (~nettsunde@93.185.184.116) has joined #haskell
2013-09-09 15:25:29	<--	boegel (~boegel@b246h206.ugent.be) has quit (Ping timeout: 256 seconds)
2013-09-09 15:25:31	-->	hilo (~aupiff@67-194-1-180.wireless.umnet.umich.edu) has joined #haskell
2013-09-09 15:25:45	merijn	Eh, there is
2013-09-09 15:25:48	<--	bondar (~bondar@197.156.132.62) has quit
2013-09-09 15:25:50	<--	theorbtwo (~theorb@91.84.53.6) has quit (Ping timeout: 245 seconds)
2013-09-09 15:25:53	merijn	Haskell Platform provides an uninstaller
2013-09-09 15:25:58	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-09 15:26:17	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (Read error: Connection reset by peer)
2013-09-09 15:26:33	merijn	bitonic-work: There is an "Uninstaller" script in /Library/Frameworks/GHC.framework/Versions/Current/Tools
2013-09-09 15:26:40	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-09 15:28:13	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 15:28:17	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 15:28:35	bitonic-work	merijn: I'm talking about the GHC binaries
2013-09-09 15:28:38	bitonic-work	not the Haskell platform
2013-09-09 15:29:21	<--	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has quit (Ping timeout: 240 seconds)
2013-09-09 15:29:52	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 15:30:07	-->	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 15:31:01	merijn	bitonic-work: Well, how did you install the ghc binaries?
2013-09-09 15:31:01	-->	soiitaire (~soiitaire@li413-134.members.linode.com) has joined #haskell
2013-09-09 15:31:10	bitonic-work	merijn: from the website
2013-09-09 15:31:24	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-09 15:31:46	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 15:32:08	merijn	mmm, then I don't really know? I've only ever installed the GHC binaries via platform or by downloading them and doing the "make install" thing, both are easy to uninstall, no clue how to do so with the GHC installer
2013-09-09 15:32:10	-->	cods (~cods@tuxee.net) has joined #haskell
2013-09-09 15:32:41	<--	Moggle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-09-09 15:32:51	bitonic-work	merijn: yes, I downloaded the binaries and did `make install`.  how do I remove that?
2013-09-09 15:32:51	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 15:32:54	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-09 15:33:51	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-09 15:33:58	<--	Peaker (~eyal@46.19.81.134) has quit (Ping timeout: 256 seconds)
2013-09-09 15:34:37	<--	dubsg_ (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 15:34:43	merijn	Should be a "make uninstall" target, I hope, that or nuke the --prefix you installed into
2013-09-09 15:35:15	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-09 15:35:17	--	functorfun is now known as funfunctor
2013-09-09 15:35:43	bitonic-work	merijn: there is no `make uninstall' target, and nuking `/usr' might not be a good idea.
2013-09-09 15:35:46	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-09 15:36:47	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-09 15:37:05	merijn	ah
2013-09-09 15:37:11	merijn	This is why installing into /usr is a terrible idea >.<
2013-09-09 15:37:49	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 15:37:51	bitonic-work	actually it's /usr/local
2013-09-09 15:37:53	bitonic-work	which is a bit less bad
2013-09-09 15:38:01	bitonic-work	I never had a problem installing in /usr/local with linux
2013-09-09 15:38:11	-->	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-09 15:38:21	geekosaur	right, but you still have to disentangle it from anything else you might have installed there
2013-09-09 15:38:21	merijn	bitonic-work: Did you ever install something using make install in linux?
2013-09-09 15:38:34	bitonic-work	merijn: of course
2013-09-09 15:38:55	merijn	The only reason it's not a problem in linux (usually) is package managers carefully doing all the details for you
2013-09-09 15:39:01	-->	theorbtwo (~theorb@91.84.53.6) has joined #haskell
2013-09-09 15:39:15	bitonic-work	no no, I'm talking about installing stuff with `make install'.  but there usually is some cleanup command
2013-09-09 15:39:26	bitonic-work	with ghc you're screwed apparently
2013-09-09 15:39:49	merijn	Might be there's another cleanup command rather than "make uninstall", I just wouldn't know what
2013-09-09 15:40:11	-->	soulofpeace (~soulofpea@175.156.232.233) has joined #haskell
2013-09-09 15:40:56	bitonic-work	doesn't look like it
2013-09-09 15:41:13	<--	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has quit (Read error: Connection reset by peer)
2013-09-09 15:41:19	<--	soiitaire (~soiitaire@li413-134.members.linode.com) has quit (Ping timeout: 260 seconds)
2013-09-09 15:41:21	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-09-09 15:41:23	applikativ	bitonic-work: i always put it ghc & friends in their own directory
2013-09-09 15:41:27	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-09 15:41:29	applikativ	for frequent nuking
2013-09-09 15:42:07	applikativ	here's the list of things in .../bin
2013-09-09 15:42:09	bitonic-work	boh, I never once had to do a GHC installation.  if anything the local cabal database
2013-09-09 15:42:14	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-09 15:42:27	bitonic-work	yeah I was just doing that
2013-09-09 15:42:36	bitonic-work	installing in an isolated prefix and see what's there
2013-09-09 15:42:47	applikativ	in lib there is a separate ghc subdir
2013-09-09 15:42:51	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 264 seconds)
2013-09-09 15:43:10	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 15:43:13	applikativ	if it's parallel to what I have, so remove /usr/local/lib/ghcsomethig
2013-09-09 15:43:38	bitonic-work	applikativ: don't worry, as said I've installed the thing already in a separate prefix
2013-09-09 15:43:46	bitonic-work	but thanks ehe
2013-09-09 15:43:48	-->	normanrichards (~normanric@mobile-166-147-064-137.mycingular.net) has joined #haskell
2013-09-09 15:44:09	<--	paddymahoney (~paddymaho@24.137.221.230) has quit (Remote host closed the connection)
2013-09-09 15:44:21	applikativ	oh i thot you were trying to recover what to elimate from /usr/local
2013-09-09 15:44:30	bitonic-work	yep
2013-09-09 15:44:39	<--	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-09-09 15:46:30	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-09 15:46:56	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-09 15:47:04	bitonic-work	OK it's not that much stuff
2013-09-09 15:47:07	-->	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has joined #haskell
2013-09-09 15:47:16	applikativ	it seems to put fifty html pages directly in /usr/local/share/doc maybe that's not a much used directory
2013-09-09 15:47:23	applikativ	or directory name
2013-09-09 15:48:28	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 15:48:56	-->	emmp (~manolis@62.1.106.144.dsl.dyn.forthnet.gr) has joined #haskell
2013-09-09 15:49:00	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 15:49:10	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-09 15:49:10	-->	ozgura (~ozgura@host-89-243-198-72.as13285.net) has joined #haskell
2013-09-09 15:49:17	<--	ozgura (~ozgura@host-89-243-198-72.as13285.net) has quit (Remote host closed the connection)
2013-09-09 15:49:25	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Quit: Leaving)
2013-09-09 15:50:26	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-09 15:50:39	<--	Guest41978 (~df@64.191.40.211) has quit (Ping timeout: 264 seconds)
2013-09-09 15:50:57	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 15:51:02	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 15:51:17	bitonic-work	applikativ: it didn't here
2013-09-09 15:52:12	bitonic-work	or maybe it did, but they were all under share/doc/ghc
2013-09-09 15:52:24	-->	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-09 15:53:32	 *	hackagebot io-streams 1.1.2.0 - Simple, composable, and easy-to-use stream I/O  http://hackage.haskell.org/package/io-streams-1.1.2.0 (GregoryCollins)
2013-09-09 15:53:32	applikativ	bitonic-work: right, i get it now; i have also been haddocking things into the same local directory somehow. or maybe just cabal which i also put in that directory.
2013-09-09 15:53:41	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 258 seconds)
2013-09-09 15:53:55	applikativ	pardon distraction
2013-09-09 15:54:01	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-09 15:54:09	<--	nik_89 (~nik_89@unaffiliated/nniro) has left #haskell
2013-09-09 15:54:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-09 15:54:48	applikativ	the only other thing i see is share/man/man1/ghc.1
2013-09-09 15:54:57	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-09 15:55:09	bitonic-work	yes
2013-09-09 15:55:10	-->	thunderrd (~thunderrd@119.42.79.52) has joined #haskell
2013-09-09 15:55:52	applikativ	so it's not too hard to scrap even if you put it in /usr/local mostly you need to remember the 7 or 8 things in bin/
2013-09-09 15:55:59	-->	Targen_ (~iguana@190.73.206.135) has joined #haskell
2013-09-09 15:56:10	bitonic-work	no, it's not
2013-09-09 15:56:15	<--	Targen (~iguana@190.73.206.135) has quit (Ping timeout: 260 seconds)
2013-09-09 15:56:21	bitonic-work	it's still *way* harder than `make unistall' :)
2013-09-09 15:56:27	-->	saep (~saep@p5B2A1329.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 15:56:28	 *	merijn justs installs into ~/ghc
2013-09-09 15:56:44	applikativ	merijn: yes i think that's bitonic-work 's new plan
2013-09-09 15:56:51	bitonic-work	and by the way, the Haskell Platform installer installs yet some other place
2013-09-09 15:56:54	emmp	hey there, I'm trying to figure out the "$" operator, specifically I'm trying to figure out why the first two "in" clauses compile while the third doesn't:
2013-09-09 15:57:01	emmp	http://lpaste.net/92788
2013-09-09 15:57:02	 *	bitonic-work 's plan is to get rid of Mac OS X as soon as possible :P
2013-09-09 15:57:04	applikativ	bitonic-work: on os x?
2013-09-09 15:57:21	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Remote host closed the connection)
2013-09-09 15:57:25	bitonic-work	applikativ: yeah, it seems to put everything in some /Library and then symlinks
2013-09-09 15:57:31	applikativ	oh yeah. i have to say I don't approve of mzero's scheme, probably because of ignorance
2013-09-09 15:57:34	mauke	emmp: function application binds tighter than any operator
2013-09-09 15:57:42	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-09 15:57:55	mauke	emmp: 'a ? b c' parses as 'a ? (b c)' for any operator ?
2013-09-09 15:58:11	applikativ	he wants to make haskell platform like python and some other analogies, but this breaks the parallel with linux and impedes communication here
2013-09-09 15:58:42	-->	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-09 15:58:59	emmp	so that means that fibs is evaluated before the function composition takes place?
2013-09-09 15:59:04	<--	skchrko (~sk@109.110.83.124) has quit (Quit: Leaving)
2013-09-09 15:59:09	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-09 15:59:40	<--	whald (~trem@2001:4dd0:fbbe:1:f84a:941c:dcb1:3628) has quit (Quit: Leaving)
2013-09-09 15:59:53	mauke	emmp: no
2013-09-09 16:00:11	mauke	that means you get a type error because your code is parsed the wrong way
2013-09-09 16:00:16	mauke	nothing is evaluated
2013-09-09 16:00:32	applikativ	bitonic-work: the os x platform installer does however come with an uninstaller script
2013-09-09 16:00:49	merijn	emmp: The last one is parsed "sum . (takeWhile (< 4000000)) . (filter even fibs)"
2013-09-09 16:01:10	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 248 seconds)
2013-09-09 16:01:23	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 246 seconds)
2013-09-09 16:01:45	emmp	so it fails because it tries to compose a function with a list
2013-09-09 16:01:54	applikativ	bitonic-work: in that script would probably have rooted out the stuff you wanted to uninstall a while back and has various arguments etc for this
2013-09-09 16:02:12	applikativ	bitonic-work: i meant, 'in fact, now that i think of it, that script ...'
2013-09-09 16:02:35	merijn	emmp: Correct
2013-09-09 16:02:41	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 16:03:23	merijn	emmp: As mauke mentioned function application binds tighter than anything*
2013-09-09 16:03:23	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Quit: WeeChat 0.4.1)
2013-09-09 16:03:34	<--	yopikh (~mand@79.175.167.200) has quit (Remote host closed the connection)
2013-09-09 16:03:37	merijn	* - Unless that anything is record field updates, those bind tighter...
2013-09-09 16:03:43	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Quit: Leaving)
2013-09-09 16:04:03	mauke	also @ in patterns
2013-09-09 16:04:12	mauke	or does it?
2013-09-09 16:04:18	emmp	I don't understand "binding" in this context, according to LYAH explicit fun. application is right associative
2013-09-09 16:04:23	merijn	mauke: You can't have function application in patterns
2013-09-09 16:04:42	-->	RoXtein (~roxtein@di18.di.fct.unl.pt) has joined #haskell
2013-09-09 16:04:46	emmp	I'm trying to figure out how right association helps in this example.
2013-09-09 16:04:47	mauke	emmp: associativity only matters among operations of equal precedence
2013-09-09 16:04:50	merijn	emmp: Are you familiar with operator precedence from other languages?
2013-09-09 16:05:00	emmp	merijn, yes.
2013-09-09 16:05:16	merijn	emmp: Basically, function application has the highest precedence
2013-09-09 16:05:18	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-09 16:05:25	merijn	emmp: Higher than any operator, which includes $
2013-09-09 16:05:27	mauke	merijn: case x of x :+ Just y ->
2013-09-09 16:05:39	mauke	it's function application if you squint hard enough
2013-09-09 16:05:52	<--	gnuvince (~vince@unaffiliated/gnuvince) has quit (Ping timeout: 245 seconds)
2013-09-09 16:05:58	quchen	… meaning it's not function application? :s
2013-09-09 16:06:01	merijn	mauke: Anything is function application if you squint hard enough ;)
2013-09-09 16:06:19	mauke	well, what do you call the 'Just y' part?
2013-09-09 16:06:28	merijn	mauke: A pattern>
2013-09-09 16:06:31	emmp	ok, so by making the application explicit with $ I "separate" so to speak the function composition from the list it should be applied to.
2013-09-09 16:06:32	applikativ	bitonic-work: oh here is the script, too late, https://gist.github.com/mzero/1381399
2013-09-09 16:06:53	mauke	merijn: and 'f x' is an expression, but you can be more specific
2013-09-09 16:06:54	-->	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has joined #haskell
2013-09-09 16:07:03	merijn	emmp: Yes, since $ is an operator (and the one with the lowest predence!)
2013-09-09 16:07:04	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Quit: time to shatter reality www.maps.org/research/cluster/psilo-lsd/grof1970.pdf‎)
2013-09-09 16:07:12	mauke	like, why does it parse as x :+ (Just y) and not (x :+ Just) y?
2013-09-09 16:07:20	<--	canta (~canta@77-20-120-171-dynip.superkabel.de) has quit (Ping timeout: 246 seconds)
2013-09-09 16:07:21	-->	jacoo (~chatzilla@121.131.91.168) has joined #haskell
2013-09-09 16:07:26	emmp	great, thanks to all.
2013-09-09 16:07:28	merijn	emmp: (.) has a higher precedence than $, which is why things work out like that
2013-09-09 16:07:38	-->	canta (~canta@77-20-120-171-dynip.superkabel.de) has joined #haskell
2013-09-09 16:07:45	merijn	emmp: You can check the precedence by typing ":i ($)" in ghci
2013-09-09 16:07:49	<--	ijp (~user@host81-155-27-145.range81-155.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-09-09 16:08:20	merijn	emmp: The default (when it shows nothing) is infixl 9, function application has a precedence of 10
2013-09-09 16:08:25	<--	cognominal__ (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Read error: Connection reset by peer)
2013-09-09 16:08:32	 *	hackagebot bdo 0.1.0.0 - Update CSS in the browser without reloading the page.  http://hackage.haskell.org/package/bdo-0.1.0.0 (ChrisDone)
2013-09-09 16:08:56	emmp	and $ has zero, it seems.
2013-09-09 16:09:19	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 16:09:21	emmp	I didn't know ":i", cool.
2013-09-09 16:09:32	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-09-09 16:09:34	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-09 16:09:50	merijn	emmp: Browsing the help of ghci can be enlightening, it has many surprisingly useful features :)
2013-09-09 16:10:21	-->	revtintin (~revtintin@103.11.50.68) has joined #haskell
2013-09-09 16:10:23	emmp	I intend to read the ghci documentation at some point.
2013-09-09 16:12:24	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-09 16:13:11	<--	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has quit (Quit: leaving)
2013-09-09 16:13:31	-->	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has joined #haskell
2013-09-09 16:13:32	<--	nettsundere (~nettsunde@93.185.184.116) has quit (Quit: nettsundere)
2013-09-09 16:13:41	bennofs	emmp: for a quick glance, try :help
2013-09-09 16:13:54	-->	julmuri (~no@206.190.145.86) has joined #haskell
2013-09-09 16:14:08	emmp	ok.
2013-09-09 16:14:16	-->	kevinqcs (~turing@183.209.53.55) has joined #haskell
2013-09-09 16:14:18	<--	kevinqcs (~turing@183.209.53.55) has quit (Max SendQ exceeded)
2013-09-09 16:14:28	-->	scriptor (~Scriptor@unaffiliated/scriptor) has joined #haskell
2013-09-09 16:14:30	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 16:14:42	-->	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has joined #haskell
2013-09-09 16:14:55	<--	julmae (~no@141.255.164.89) has quit (Ping timeout: 264 seconds)
2013-09-09 16:15:00	-->	kevinqcs (~turing@183.209.53.55) has joined #haskell
2013-09-09 16:15:05	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-09 16:15:06	<--	kevinqcs (~turing@183.209.53.55) has quit (Max SendQ exceeded)
2013-09-09 16:15:29	--	hilo is now known as aupiff
2013-09-09 16:16:00	<--	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Quit: Bye)
2013-09-09 16:16:17	-->	kevinqcs (~turing@183.209.53.55) has joined #haskell
2013-09-09 16:16:57	-->	Arkantos (~arkantos@77.245.65.162) has joined #haskell
2013-09-09 16:17:29	-->	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 16:17:50	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-09 16:17:54	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-09-09 16:18:06	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Ping timeout: 264 seconds)
2013-09-09 16:18:31	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 264 seconds)
2013-09-09 16:18:44	-->	b0oh (~Adium@93.185.184.116) has joined #haskell
2013-09-09 16:19:10	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-09 16:19:17	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-09-09 16:20:52	<--	jacoo (~chatzilla@121.131.91.168) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-09 16:21:29	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-09 16:21:35	-->	Velpoman (~Velpoman@nat/yahoo/x-yldkjzlvaagbomfv) has joined #haskell
2013-09-09 16:21:44	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-09 16:22:13	<--	edon (~user@albalug/edon) has quit (Ping timeout: 245 seconds)
2013-09-09 16:25:19	-->	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 16:25:19	<--	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Client Quit)
2013-09-09 16:25:54	<--	vijaykiran (~user@gateway.finalist.com) has quit (Remote host closed the connection)
2013-09-09 16:26:12	merijn	hmm, what's the best way to represent a data type of 0, 1 or 2 elements? Should I just use a list and call it a day?
2013-09-09 16:26:23	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 16:26:40	-->	ystael (~ystael@64.206.121.41) has joined #haskell
2013-09-09 16:26:49	<--	revtintin (~revtintin@103.11.50.68) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 16:27:09	mauke	Either a (Maybe (a,a))
2013-09-09 16:27:16	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-09 16:27:20	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-09 16:27:30	sm	Maybe (Either a (a,a))
2013-09-09 16:28:02	merijn	Lovely >.>
2013-09-09 16:28:11	bennofs	Either () (Either a (a,a))
2013-09-09 16:28:37	mauke	Either () (Either (a, ()) (a,(a,()))))
2013-09-09 16:29:15	-->	determinant__ (~determina@167.220.225.80) has joined #haskell
2013-09-09 16:29:27	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 16:29:51	bergmark	@hackage these -- merijn
2013-09-09 16:29:51	lambdabot	http://hackage.haskell.org/package/these -- merijn
2013-09-09 16:31:16	elliott	not quite
2013-09-09 16:31:25	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-09 16:31:36	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 16:31:50	<--	determinant_ (~determina@167.220.225.135) has quit (Ping timeout: 246 seconds)
2013-09-09 16:31:58	-->	hari (~hari@117.193.50.136) has joined #haskell
2013-09-09 16:32:05	<--	slack1256 (~slack@181-160-170-235.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-09 16:32:07	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-09 16:32:14	bergmark	you could always define a Triether type
2013-09-09 16:32:25	--	hari is now known as Guest32068
2013-09-09 16:32:45	-->	dustin10 (~dustin10@2001:4870:600a:500::2) has joined #haskell
2013-09-09 16:32:57	<--	normanrichards (~normanric@mobile-166-147-064-137.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-09 16:33:35	-->	s1eepyn4te (~sleepynat@199.16.190.210) has joined #haskell
2013-09-09 16:33:51	<--	determinant__ (~determina@167.220.225.80) has quit (Ping timeout: 264 seconds)
2013-09-09 16:33:59	--	Guest32068 is now known as hari_
2013-09-09 16:33:59	-->	favonia (~favonia@128.237.205.196) has joined #haskell
2013-09-09 16:34:00	<--	favonia (~favonia@128.237.205.196) has quit (Changing host)
2013-09-09 16:34:00	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-09 16:34:28	-->	elediaz (~quassel@92.59.144.203) has joined #haskell
2013-09-09 16:34:35	-->	shreesh (~shreesh@209.104.235.1) has joined #haskell
2013-09-09 16:35:37	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-09 16:35:41	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Ping timeout: 246 seconds)
2013-09-09 16:35:50	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Ping timeout: 240 seconds)
2013-09-09 16:36:07	-->	xexonixxexillion (~Adium@14-202-198-83.static.tpgi.com.au) has joined #haskell
2013-09-09 16:36:28	dfan	Data.FingerTree, which has a data type with 1-4 elements, just explicitly uses One a | Two a a | etc., presumably for optimization, although it leads to a lot of boilerplate
2013-09-09 16:37:19	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 16:37:27	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Ping timeout: 240 seconds)
2013-09-09 16:38:09	-->	nettsundere (~nettsunde@93.185.184.116) has joined #haskell
2013-09-09 16:38:20	elliott	perhaps providing Traversable would ease some of that boilerplate
2013-09-09 16:38:28	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2013-09-09 16:38:36	-->	iswilson (~ian@192-0-175-9.cpe.teksavvy.com) has joined #haskell
2013-09-09 16:39:12	-->	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has joined #haskell
2013-09-09 16:39:13	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 16:39:16	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 16:39:16	-->	morazow_ (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 16:39:59	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 16:40:19	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 16:40:42	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 16:40:49	-->	paddymahoney (~paddymaho@24.137.221.230) has joined #haskell
2013-09-09 16:40:53	hari_	Would like some tips/suggestions on this code http://lpaste.net/92790
2013-09-09 16:40:56	-->	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has joined #haskell
2013-09-09 16:40:58	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 16:41:00	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-09 16:41:38	<--	Paprikachu (~Paprikach@178.113.63.45.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-09 16:41:42	<--	xexonixxexillion (~Adium@14-202-198-83.static.tpgi.com.au) has quit (Ping timeout: 248 seconds)
2013-09-09 16:42:38	<--	morazow (~morazow@p57BCEFA4.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-09 16:42:49	-->	xexonixxexillion (~Adium@14-202-198-83.static.tpgi.com.au) has joined #haskell
2013-09-09 16:43:45	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-09 16:44:36	-->	vijaykiran (~user@gateway.finalist.com) has joined #haskell
2013-09-09 16:44:59	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-09 16:45:15	merijn	hari_: Array would be a nicer way to model the board than nested lists
2013-09-09 16:45:22	merijn	hari_: Lets you use two dimensional indices
2013-09-09 16:45:33	merijn	hari_: Thus simplifying your lookups/updates
2013-09-09 16:45:54	hari_	merijn, OK
2013-09-09 16:46:06	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-09 16:46:07	<--	go|dfish (goldfish@nat/dcunetworkingsociety/x-pyrronykxdjjyaft) has quit (Ping timeout: 264 seconds)
2013-09-09 16:46:17	-->	elediaz_ (~quassel@89.130.176.54) has joined #haskell
2013-09-09 16:46:27	merijn	Additionally, lookups in Array are O(1) instead of O(n) :)
2013-09-09 16:47:01	hari_	merijn, thanks.
2013-09-09 16:47:12	merijn	hari_: Hopefully this will let you simplify "toggleColumn" as right now it's dreadfully complex
2013-09-09 16:47:13	<--	elediaz (~quassel@92.59.144.203) has quit (Ping timeout: 245 seconds)
2013-09-09 16:47:20	elliott	{,Hash,Int}Map may be even better.
2013-09-09 16:47:45	hari_	merijn, yes, I know. I'll look at Data.Array.
2013-09-09 16:48:11	hari_	merijn, you mean toggleColumns? toggleColumn is the simple function
2013-09-09 16:48:12	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Ping timeout: 256 seconds)
2013-09-09 16:48:16	merijn	elliott: It depends, I think Array makes more sense (semantically) if you're modelling a fixed NxM board
2013-09-09 16:48:22	-->	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 16:48:29	merijn	hari_: eh, yeah :)
2013-09-09 16:48:30	quchen	hari_: Also scroll down all the way for automatic HLint suggestions. (You can also install HLint locally, it's pretty handy.)
2013-09-09 16:48:47	haasn	what's the logic of toggleColumns? in lights out, don't the four squares immediately orthogonal to the one you press flip their state?
2013-09-09 16:48:47	 *	hackagebot git-annex 4.20130909 - manage files with git, without checking their contents into git  http://hackage.haskell.org/package/git-annex-4.20130909 (JoeyHess)
2013-09-09 16:48:53	haasn	(in addition to the one you did press)
2013-09-09 16:48:58	hari_	merijn, yes, I have hlint installed.
2013-09-09 16:49:01	elliott	merijn: I am speaking from an efficiency pov
2013-09-09 16:49:07	hari_	merijn, I am going through the output now.
2013-09-09 16:49:26	merijn	elliott: Agreed, although I highly doubt that'll be relevant in this example :)
2013-09-09 16:49:34	haasn	I would honestly use lenses (and maybe tables) here, you could implement logic like that in a few simple lines :)
2013-09-09 16:49:45	quchen	elliott: Maps are more efficient for small datasets, is that what you're saying?
2013-09-09 16:49:55	merijn	haasn: Yes, but lenses can be horifically intimidating with their types when you start
2013-09-09 16:50:02	merijn	quchen: No, Map has less copying
2013-09-09 16:50:15	merijn	quchen: If anything it'll be even more efficient for big datasets
2013-09-09 16:50:21	--	flazz_gone is now known as flazz
2013-09-09 16:50:23	haasn	something like toggle :: (Int,Int) -> Whatever -> Whatever; toggle pos = each.indices (\i -> distance i pos <= 1) %~ not
2013-09-09 16:50:28	merijn	quchen: Array has to copy everything, Map only log n entries
2013-09-09 16:50:38	quchen	merijn: Oh right, silly me.
2013-09-09 16:50:39	haasn	where distance (x,y) (z,w) = abs (x-z) + abs (y-w) -- or whatever
2013-09-09 16:50:45	elliott	yeah, copying an array you update all the time can suck
2013-09-09 16:50:48	quchen	Secretly added ST s everywhere I guess ;-)
2013-09-09 16:50:48	merijn	haasn: Array already has update functions like that
2013-09-09 16:51:05	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-09 16:51:05	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Ping timeout: 246 seconds)
2013-09-09 16:51:12	haasn	merijn: fair enough
2013-09-09 16:51:17	-->	ampersand27017 (~ampersand@69.3.174.98) has joined #haskell
2013-09-09 16:51:20	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-09 16:51:31	merijn	haasn: Hell, having 2 dimensional indices is the main reason I suggested array :)
2013-09-09 16:51:32	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 16:51:44	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-09 16:52:02	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 16:52:23	<--	b0oh (~Adium@93.185.184.116) has quit (Quit: Leaving.)
2013-09-09 16:52:47	hari_	haasn, that's the logic I implemented in the horrible toggleColumns function
2013-09-09 16:52:54	haasn	merijn: with tables you can have additional indices on the X and Y columns, so you could do something like foo^.with X (==) x -- to single out a column :)
2013-09-09 16:53:28	<--	elediaz_ (~quassel@89.130.176.54) has quit (Ping timeout: 245 seconds)
2013-09-09 16:53:37	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-09 16:54:10	<--	thunderrd (~thunderrd@119.42.79.52) has quit (Remote host closed the connection)
2013-09-09 16:54:25	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 16:54:36	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-09 16:54:38	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-09 16:54:39	hari_	I figured out that using List was probably a bad idea to model the board
2013-09-09 16:54:55	hari_	But didn't know the alternatives much.
2013-09-09 16:55:09	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-09 16:55:46	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-09 16:55:50	<--	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has quit (Ping timeout: 240 seconds)
2013-09-09 16:55:56	-->	b0oh (~Adium@93.185.184.116) has joined #haskell
2013-09-09 16:57:11	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-09-09 16:57:29	-->	cfricke_ (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 16:57:58	<--	akurei__ (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has quit (Remote host closed the connection)
2013-09-09 16:57:59	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-09-09 16:57:59	merijn	hari_: Yeah, many people start out with lists like that, but it quickly starts to suck for two-dimensional things :)
2013-09-09 16:58:21	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 16:58:30	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-09 16:58:56	hari_	merijn, coming from Python, I found lists easiest to figure out in haskell (similar syntax etc)
2013-09-09 16:58:56	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-09 16:59:22	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-09-09 16:59:39	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-09 16:59:50	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 240 seconds)
2013-09-09 17:00:11	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 260 seconds)
2013-09-09 17:00:12	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 251 seconds)
2013-09-09 17:00:12	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-09 17:00:15	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 240 seconds)
2013-09-09 17:00:37	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 17:01:05	-->	erochester1 (~erocheste@d-199-228-125.bootp.Virginia.EDU) has joined #haskell
2013-09-09 17:01:07	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 276 seconds)
2013-09-09 17:01:18	-->	jasonkuhrt (~jasonkuhr@modemcable175.22-82-70.mc.videotron.ca) has joined #haskell
2013-09-09 17:01:23	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Ping timeout: 245 seconds)
2013-09-09 17:01:29	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 17:01:33	-->	brisbin_ (~patrick@207.188.46.165) has joined #haskell
2013-09-09 17:02:05	--	erochester1 is now known as erochester
2013-09-09 17:02:08	-->	ekipan (4cd4e4d3@gateway/web/freenode/ip.76.212.228.211) has joined #haskell
2013-09-09 17:02:31	<--	brisbin_ (~patrick@207.188.46.165) has quit (Client Quit)
2013-09-09 17:02:55	-->	markcw (~jack@128.135.100.115) has joined #haskell
2013-09-09 17:03:02	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 240 seconds)
2013-09-09 17:03:10	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Connection reset by peer)
2013-09-09 17:03:15	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 264 seconds)
2013-09-09 17:03:20	<--	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has quit (Ping timeout: 246 seconds)
2013-09-09 17:04:28	-->	elediaz (~quassel@92.59.132.44) has joined #haskell
2013-09-09 17:04:30	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-09 17:04:35	-->	james-ubc (~james@66.183.96.217) has joined #haskell
2013-09-09 17:05:36	-->	vpetro (~textual@24.114.29.46) has joined #haskell
2013-09-09 17:05:45	ocharles	haasn: fun lensism of the day! cache cacheKey action = use cacheKey >>= maybe ((cacheKey <?=) =<< action) return
2013-09-09 17:06:03	ocharles	Use an At-like thing as a cache :)
2013-09-09 17:06:16	ocharles	(where in this case the cache is assumed to be part of some MonadState)
2013-09-09 17:06:25	-->	anRch (~markmilli@pool-108-20-105-46.bstnma.east.verizon.net) has joined #haskell
2013-09-09 17:06:42	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-09 17:06:53	ocharles	i'm glad you made me try and go further with lens, it's a lot of fun
2013-09-09 17:07:26	haasn	I don't know why it surprised me that <?= exists
2013-09-09 17:07:30	haasn	I was only aware of ?~
2013-09-09 17:07:34	haasn	but that seems very useful :)
2013-09-09 17:07:53	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 17:07:58	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-09 17:08:03	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 17:08:04	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-09 17:08:11	haasn	that (>>=) is in the reader monad?
2013-09-09 17:08:18	ocharles	no, MonadState
2013-09-09 17:08:20	haasn	er disregard that
2013-09-09 17:08:22	ocharles	:)
2013-09-09 17:08:22	haasn	yeah
2013-09-09 17:08:25	haasn	I was looking at the wrong type signature
2013-09-09 17:08:25	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 17:08:30	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-09 17:08:56	-->	Gentlecat_ (~Roman@79.105.226.37) has joined #haskell
2013-09-09 17:09:02	haasn	oh, and I missed a (. I was trying to parse maybe (cacheKey <?=) =<<
2013-09-09 17:09:04	haasn	it makes sense now
2013-09-09 17:09:06	haasn	neat!
2013-09-09 17:09:08	haasn	but confusing :)
2013-09-09 17:09:16	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-09 17:09:18	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-09 17:09:21	ocharles	but netwire 5 + lots of lens use is starting to give me some really nice code. http://lpaste.net/92794 is a scene that has a grid of the grass tile, with another tile that slides accross it
2013-09-09 17:09:26	<--	elediaz (~quassel@92.59.132.44) has quit (Ping timeout: 240 seconds)
2013-09-09 17:09:44	hari_	:t any
2013-09-09 17:09:45	lambdabot	(a -> Bool) -> [a] -> Bool
2013-09-09 17:09:53	ocharles	(I use that cache thing to only load the tileset once)
2013-09-09 17:10:01	-->	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-09 17:10:18	edwardk	nice
2013-09-09 17:11:07	haasn	looks awesome
2013-09-09 17:11:36	<--	Itkovian (~Itkovian@b244h110.ugent.be) has quit (Quit: Zzzzz ...)
2013-09-09 17:11:37	haasn	my recent obsession has been with ‘tables’ as a way to store maps with multiple indices allowing reasonably efficient lookups :)
2013-09-09 17:11:38	edwardk	fmap P (liftA2 V2 (integral 0 . 10) 0)  can probably b liftA2 (P . V2) ...
2013-09-09 17:11:39	ocharles	yea, and I plan to calculate the deltas between render frames to work out exactly what needs redrawing - so if the player only moves, then you might just redraw the grass under their feet and their new location
2013-09-09 17:11:40	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-09 17:11:57	ocharles	edwardk: for some reason I can't get that to work. let me try again
2013-09-09 17:11:59	haasn	edwardk: (P .: V2)
2013-09-09 17:12:18	ocharles	ah yea, it's because of the two arguments and that composition generally being annoying
2013-09-09 17:12:32	edwardk	i just need to get haasn interested in using morton order so you can have a single index that 'just works'
2013-09-09 17:12:39	edwardk	ocharles: ah yeah thats what it is
2013-09-09 17:12:40	<--	Ralith (~ralith@216.162.199.202) has quit (Ping timeout: 268 seconds)
2013-09-09 17:12:44	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-09 17:12:58	edwardk	that is all my pattern matcher found.
2013-09-09 17:13:05	edwardk	oh and you can replace the flip with ??
2013-09-09 17:13:13	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 17:13:19	edwardk	 flip foldMap [0 .. P (V2 24 18)]  becomes  foldMap ?? [0 .. P (V2 24 18)]
2013-09-09 17:13:23	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2013-09-09 17:13:25	ocharles	cool, that's much prettier
2013-09-09 17:13:37	-->	elediaz (~quassel@90.173.213.154) has joined #haskell
2013-09-09 17:13:51	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-09 17:13:54	ocharles	does ?? extend to multiple arguments? foo bar ?? baz $ quack == foo bar quack baz?
2013-09-09 17:14:03	<--	james-ubc (~james@66.183.96.217) has quit (Ping timeout: 264 seconds)
2013-09-09 17:14:09	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 17:14:19	edwardk	yes
2013-09-09 17:14:20	haasn	flip (foo bar) baz $ quack  (foo bar) quack baz
2013-09-09 17:14:30	ocharles	nice
2013-09-09 17:14:31	edwardk	:t (??)
2013-09-09 17:14:33	lambdabot	Functor f => f (a -> b) -> a -> f b
2013-09-09 17:14:36	haasn	but not the other way, obviously; ie. foo ?? bar baz $ quack -- :)
2013-09-09 17:14:37	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-09 17:14:49	FreeFull	:t id ?? id
2013-09-09 17:14:49	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-09 17:14:50	lambdabot	((a -> a) -> b) -> b
2013-09-09 17:14:51	<--	elediaz (~quassel@90.173.213.154) has quit (Remote host closed the connection)
2013-09-09 17:14:52	edwardk	haasn: just keep using ??
2013-09-09 17:15:00	edwardk	foo ?? bar ?? baz $ quack = foo quack bar baz
2013-09-09 17:15:02	ocharles	haasn: foo ?? bar baz $ quack isn't foo quack bar baz?
2013-09-09 17:15:07	<--	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has quit (Ping timeout: 260 seconds)
2013-09-09 17:15:08	ocharles	oh, that's a bit ickierr
2013-09-09 17:15:12	FreeFull	:t id ?? id $ id
2013-09-09 17:15:13	lambdabot	a -> a
2013-09-09 17:15:22	edwardk	ocharles: foo ?? bar baz $ quack = foo quack (bar baz)
2013-09-09 17:15:25	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-09 17:15:34	ocharles	ah
2013-09-09 17:15:38	edwardk	ocharles: ?? is good at swapping the last two args
2013-09-09 17:16:00	edwardk	you can use it to smuggle an arg deeper, but that is an emergent property rather than its initial purpose
2013-09-09 17:16:01	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-09 17:16:09	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-09 17:16:16	hari_	hlint corrected http://lpaste.net/92795
2013-09-09 17:16:17	ocharles	yea, I think an explicit lambda will work nicer there
2013-09-09 17:16:18	edwardk	it also has th benefit of letting you elide parens around the args you move past =)
2013-09-09 17:16:26	Taneb	What's this about smuggling arms dealers
2013-09-09 17:16:49	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Ping timeout: 240 seconds)
2013-09-09 17:16:56	ion	This was a nice Coq tutorial. https://www.youtube.com/playlist?list=PLDD40A96C2ED54E99
2013-09-09 17:17:04	edwardk	foo ?? bar takes a lot of arguments ?? baz does too $ quack  = foo quack (bar …) (baz ..)
2013-09-09 17:17:22	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell ("Leaving")
2013-09-09 17:17:28	-->	dubsg (~dubsg@208.74.177.104.static.etheric.net) has joined #haskell
2013-09-09 17:17:53	edwardk	but while a single (??) is often beautifying, multiple are an acquired taste, like excessively pointfree coe
2013-09-09 17:19:06	-->	akurei (~akurei@joel.neurop.ruhr-uni-bochum.de) has joined #haskell
2013-09-09 17:19:13	-->	yfyf (~yfyf@77.95.99.166) has joined #haskell
2013-09-09 17:19:18	haasn	:)
2013-09-09 17:20:15	<--	MortyPinkman (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 260 seconds)
2013-09-09 17:20:25	haasn	a good operator is signified by its ability to let you eliminate ugly parens en passant
2013-09-09 17:20:31	haasn	lens takes this to the extreme, naturally
2013-09-09 17:20:42	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-09 17:20:42	edwardk	heh
2013-09-09 17:21:26	<--	aupiff (~aupiff@67-194-1-180.wireless.umnet.umich.edu) has quit (Ping timeout: 240 seconds)
2013-09-09 17:22:12	flebron	What does "sequential" mean in     (<*>) :: f (a -> b) -> f a -> f b     -- | Sequential application.?
2013-09-09 17:22:39	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-09 17:22:57	-->	amyers (~quassel@128.177.88.72) has joined #haskell
2013-09-09 17:23:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-09 17:23:27	--	gpampara is now known as gpampara_off
2013-09-09 17:23:38	edwardk	flebron: nothing
2013-09-09 17:23:52	edwardk	its a fluff word =)
2013-09-09 17:23:57	flebron	Alright :)
2013-09-09 17:23:59	S11001001	lol edwardk
2013-09-09 17:24:03	ion	ledwardk
2013-09-09 17:24:14	S11001001	flebron: the fs can't be flipped around and mean the same
2013-09-09 17:24:15	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-09 17:24:41	ion	“sequential; application”
2013-09-09 17:24:44	edwardk	:t (<**>)
2013-09-09 17:24:45	lambdabot	Applicative f => f a -> f (a -> b) -> f b
2013-09-09 17:24:57	edwardk	is different than flip (<*>)
2013-09-09 17:24:58	haasn	I guess it distinguishes it from (<*>)'s evil twin; \f g -> flip id <$> g <*> f -- ?
2013-09-09 17:25:01	flebron	S11001001: Well application (($), if one wants) already does that, why sequential?
2013-09-09 17:25:04	edwardk	in that the 'effects' i f are sequenced left to right
2013-09-09 17:25:06	haasn	:t \f g -> flip id <$> g <*> f -- I hope I got that right
2013-09-09 17:25:07	lambdabot	Applicative f => f (a -> b) -> f a -> f b
2013-09-09 17:25:09	haasn	I did!
2013-09-09 17:25:34	edwardk	but what that means if often not 'sequential'
2013-09-09 17:25:43	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-09 17:25:48	S11001001	flebron: applicative application, not the other.  haasn's got it
2013-09-09 17:25:56	ion	flebron: The action will execute the two applicative actions that came as parameters and apply the function resulting from the first one to the value resulting from the second one.
2013-09-09 17:26:45	<--	hari_ (~hari@117.193.50.136) has left #haskell ("Ex-Chat")
2013-09-09 17:27:10	flebron	So (thinking about this in monad terms) it returns an action which is the result of first running the first parameter's action, then the second parameter's action, and then taking the first parameter's result and applying it to the second parameter's result, and returning that as the result?
2013-09-09 17:27:27	ion	An example: negation :: Parser (Integer -> Integer); negation = negate <$ char '-' <|> pure id; nat :: Parser Integer; nat = read <$> many1 digit; int :: Parser Integer; int = negation <*> nat
2013-09-09 17:27:33	flebron	(Which would seem to make sense from the `ap` definition in McBride's paper)
2013-09-09 17:27:57	ion	flebron: That sounds right.
2013-09-09 17:28:08	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Operation timed out)
2013-09-09 17:28:38	flebron	Though to be honest my notion of "then" is still (>>=) :)
2013-09-09 17:28:43	-->	io2 (~george@unaffiliated/irrequietus) has joined #haskell
2013-09-09 17:28:53	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 245 seconds)
2013-09-09 17:28:57	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 17:29:13	ion	I don’t see anything wrong with thinking of it like that.
2013-09-09 17:29:36	flebron	Not all applicatives are monads :p
2013-09-09 17:29:41	ion	Applicative is more general than Monad but when both are implemented, the concept of “then” is the same concept for both.
2013-09-09 17:30:16	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-09 17:30:23	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-09 17:30:35	-->	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has joined #haskell
2013-09-09 17:30:39	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-09 17:30:54	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 17:31:02	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 276 seconds)
2013-09-09 17:31:08	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-09 17:31:43	<--	juhp (~petersen@redhat/juhp) has quit (Quit: Ex-Chat)
2013-09-09 17:32:05	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-09 17:32:05	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-09 17:32:22	-->	artyomkazak (~artyomkaz@94.25.229.117) has joined #haskell
2013-09-09 17:33:16	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-09-09 17:33:29	<--	vijaykiran (~user@gateway.finalist.com) has quit (Ping timeout: 245 seconds)
2013-09-09 17:33:55	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has left #haskell
2013-09-09 17:34:08	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 256 seconds)
2013-09-09 17:34:11	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 17:34:37	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 17:34:57	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 17:34:57	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-09 17:35:05	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-09 17:35:06	-->	go|dfish (goldfish@nat/dcunetworkingsociety/x-xgigmrjgnhfyvljp) has joined #haskell
2013-09-09 17:35:30	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 17:35:30	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-09 17:35:31	--	rishabhjain_ is now known as rishabhjain
2013-09-09 17:36:15	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-09 17:36:35	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Client Quit)
2013-09-09 17:36:44	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-09 17:36:55	<--	juhp (~petersen@redhat/juhp) has quit (Ping timeout: 256 seconds)
2013-09-09 17:37:58	-->	io2_ (~george@unaffiliated/irrequietus) has joined #haskell
2013-09-09 17:38:03	<--	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 17:38:37	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-09 17:38:58	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-09 17:39:00	<--	t7 (~chatzilla@chaucer.kent.ac.uk) has quit (Quit: home)
2013-09-09 17:39:20	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 17:40:19	<--	io2 (~george@unaffiliated/irrequietus) has quit (Ping timeout: 260 seconds)
2013-09-09 17:40:45	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-09 17:40:46	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Client Quit)
2013-09-09 17:40:57	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: Leaving)
2013-09-09 17:41:10	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-09 17:41:10	<--	snikkers (~snikkers@cable-217-63-82-193.zeelandnet.nl) has quit (Quit: Lost terminal)
2013-09-09 17:41:19	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-09 17:41:22	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-09-09 17:41:25	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Client Quit)
2013-09-09 17:41:29	-->	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has joined #haskell
2013-09-09 17:41:40	<--	anRch (~markmilli@pool-108-20-105-46.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-09-09 17:41:42	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-09-09 17:42:40	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-09 17:44:17	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-09 17:45:10	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 17:45:36	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-09 17:45:44	<--	ampersand27017 (~ampersand@69.3.174.98) has quit (Quit: ampersand27017)
2013-09-09 17:45:57	-->	mizu_no_oto (~textual@76.24.19.222) has joined #haskell
2013-09-09 17:46:05	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has quit (Remote host closed the connection)
2013-09-09 17:46:32	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has joined #haskell
2013-09-09 17:47:16	<--	Saeppel (~saep@185.7.198.1) has quit (Ping timeout: 264 seconds)
2013-09-09 17:47:23	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-09 17:47:29	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-09 17:47:54	<--	RoXtein (~roxtein@di18.di.fct.unl.pt) has quit (Quit: Leaving)
2013-09-09 17:47:56	-->	Saeppel (~saep@185.7.198.1) has joined #haskell
2013-09-09 17:48:08	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 17:48:37	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Remote host closed the connection)
2013-09-09 17:48:42	-->	fxr (~user@78.187.102.63) has joined #haskell
2013-09-09 17:49:46	haasn	my notion of ‘then’ is *>
2013-09-09 17:50:56	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:48ac:eb5f:841b:5983) has quit (Ping timeout: 246 seconds)
2013-09-09 17:51:03	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Ping timeout: 260 seconds)
2013-09-09 17:51:04	<--	SpyrosTrigazis (~spyrostri@conf-211.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-09 17:51:23	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-09 17:51:30	-->	SpyrosTrigazis (~spyrostri@2001:648:2320:61:aa:4b0c:4562:fca6) has joined #haskell
2013-09-09 17:51:54	niteria	a *> b == a >>= \_ -> b ?
2013-09-09 17:52:06	<--	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-09 17:52:23	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Quit: Lost terminal)
2013-09-09 17:52:30	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-09 17:52:32	-->	AndChat|740025 (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 17:52:42	<--	fizruk (~fizruk@109.74.138.26) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 17:52:58	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-09 17:53:02	-->	AndChat-740025 (~AndChat74@46.115.105.214) has joined #haskell
2013-09-09 17:53:31	haasn	that's (>>), but (*>) and (>>) are expected to be the same
2013-09-09 17:53:39	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 264 seconds)
2013-09-09 17:53:43	-->	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-09 17:53:56	<--	arpunk (none@190.84.40.17) has quit (Remote host closed the connection)
2013-09-09 17:53:58	haasn	x *> y is technically flip const <$> x <*> y
2013-09-09 17:54:00	haasn	if I got that right
2013-09-09 17:54:05	haasn	:t \x y -> flip const <$> x <*> y
2013-09-09 17:54:06	lambdabot	Applicative f => f a -> f b -> f b
2013-09-09 17:54:07	haasn	I did!
2013-09-09 17:54:22	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 17:54:40	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-09 17:54:44	-->	quchen (~quchen@p54AA0B90.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 17:54:54	ekipan	the source spells it const id, which is equivalent to flip const
2013-09-09 17:55:12	<--	Martty (~martty@lion.puttynuts.com) has quit (Remote host closed the connection)
2013-09-09 17:55:25	<--	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-09 17:55:29	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-09 17:55:51	<--	SpyrosTrigazis (~spyrostri@2001:648:2320:61:aa:4b0c:4562:fca6) has quit (Ping timeout: 245 seconds)
2013-09-09 17:55:55	-->	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-09 17:56:51	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-09 17:56:53	<--	AndChat|740025 (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-09 17:56:58	-->	zzing (~textual@67.70.61.100) has joined #haskell
2013-09-09 17:57:08	inkjetunito	do you often see newbies complaining here?
2013-09-09 17:57:19	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-09-09 17:58:22	<--	arkx (~aku@eagleflow.fi) has quit (Ping timeout: 245 seconds)
2013-09-09 17:58:24	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 17:59:14	ion	Complaining about what?
2013-09-09 17:59:36	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-09 17:59:48	inkjetunito	ion: the language
2013-09-09 17:59:55	<--	zzing (~textual@67.70.61.100) has quit (Client Quit)
2013-09-09 18:00:02	<--	yfyf (~yfyf@77.95.99.166) has quit (Ping timeout: 246 seconds)
2013-09-09 18:00:04	ion	no
2013-09-09 18:00:06	<--	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has quit (Ping timeout: 248 seconds)
2013-09-09 18:00:14	haasn	I don't think I have. Most of the time, newcomers are more confused about having to unlearn their previous programming habits
2013-09-09 18:00:23	haasn	rather than complaining that Haskell isn't like them
2013-09-09 18:00:28	Taneb	Trolls complain, newbs ask questions :)
2013-09-09 18:00:37	haasn	but in general the newcomers I see here are genuinely interested in learning Haskell
2013-09-09 18:00:39	Ankhers	I vaguely remember one or two, could be trolls.
2013-09-09 18:00:47	haasn	yeah, you get obvious trolls from time to time
2013-09-09 18:01:01	-->	aupiff (~aupiff@99.110.103.119) has joined #haskell
2013-09-09 18:01:18	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 18:01:25	-->	mmaruseacph42 (9e796b9a@gateway/web/freenode/ip.158.121.107.154) has joined #haskell
2013-09-09 18:01:27	Ankhers	Though, if I remember correctly, the trolls ended up learning things nonetheless.
2013-09-09 18:01:28	inkjetunito	i think Haskell is very pleasant to learn. perhaps it's just ripe enough or something
2013-09-09 18:01:34	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: Connection reset by peer)
2013-09-09 18:01:55	-->	Mortomes (~Mortomes_@92-108-125-137.dynamic.upc.nl) has joined #haskell
2013-09-09 18:01:55	<--	Mortomes (~Mortomes_@92-108-125-137.dynamic.upc.nl) has quit (Changing host)
2013-09-09 18:01:55	-->	Mortomes (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-09 18:02:03	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 264 seconds)
2013-09-09 18:02:14	-->	arkx (~aku@eagleflow.fi) has joined #haskell
2013-09-09 18:02:29	--	gdeest is now known as wonderga
2013-09-09 18:02:39	Ankhers	I would love to ACTUALLY learn Haskell. I just don't have a real project to apply it to.
2013-09-09 18:02:51	applikativ	occasionally someone becomes dispirited and goes on the attack
2013-09-09 18:02:56	<--	phischu (~pschuster@p4FD317E7.dip0.t-ipconnect.de) has quit (Ping timeout: 332 seconds)
2013-09-09 18:03:10	haasn	applikativ: I must be on during the wrong times :P
2013-09-09 18:03:17	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-09 18:03:31	applikativ	haasn: yes, i don't think it's common
2013-09-09 18:03:39	Ankhers	haasn: or the right times...
2013-09-09 18:03:52	-->	yogurt_t_ (~yogurt_tr@190.191.224.63) has joined #haskell
2013-09-09 18:03:59	haasn	Ankhers: do you do a lot of programming in general?
2013-09-09 18:04:26	Ankhers	haasn: Yes, I am a software dev. Currently doing c++ / ruby
2013-09-09 18:04:29	-->	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has joined #haskell
2013-09-09 18:04:38	mm_freak	Ankhers: write the tools you use for for your C++/ruby development in haskell
2013-09-09 18:04:38	inkjetunito	compared to what i learned previously, the documentation has been good enough so far, the "main" implementation is in a very usable state and the introductions to the language are somewhat hype-free
2013-09-09 18:04:46	<--	mizu_no_oto (~textual@76.24.19.222) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:04:58	haasn	the way I really started learning Haskell was to just implement every single thing I'd otherwise have written in my previous ‘language of choice’ in Haskell instead
2013-09-09 18:05:02	mm_freak	Ankhers: if you're looking for a real project, you can try to write a small web page using a haskell web framework
2013-09-09 18:05:09	haasn	though if it's for work that might not be doable unfortunately
2013-09-09 18:05:33	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-09 18:05:54	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-09 18:05:58	<--	jasonkuhrt (~jasonkuhr@modemcable175.22-82-70.mc.videotron.ca) has quit (Quit: Leaving...)
2013-09-09 18:06:06	Ankhers	mm_freak: I started doing the web thing a little while ago. Yesod, apparently GHC, had a bug on OSX 64bit... So That got delayed. Now I am attempting to decide which of the three 'main' web frameworks I should try.
2013-09-09 18:06:11	flebron	haasn: Same, and the previous language was Python.
2013-09-09 18:06:18	applikativ	Ankhers: i also think a way people slip haskell into some pre-established enviroment without confusing things, is little parser executables
2013-09-09 18:06:23	<--	AndChat-740025 (~AndChat74@46.115.105.214) has quit (Ping timeout: 245 seconds)
2013-09-09 18:06:26	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-09 18:06:38	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-09 18:06:46	<--	augur_ (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-09 18:07:01	haasn	you could try WebGL game development using ghcjs, gloss and netwire :)
2013-09-09 18:07:06	<--	yogurt_truck (~yogurt_tr@190.191.224.63) has quit (Ping timeout: 245 seconds)
2013-09-09 18:07:09	applikativ	i mean, this is a fairly elementary sort of thing.
2013-09-09 18:07:10	mm_freak	Ankhers: if you can't decide write a small haskell program that selects one for you randomly =)
2013-09-09 18:07:14	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-09 18:07:20	Ankhers	lol
2013-09-09 18:07:20	-->	babalone (~AndChat74@46.115.105.214) has joined #haskell
2013-09-09 18:07:30	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-09 18:07:31	haasn	mm_freak: instance Random Project where ...
2013-09-09 18:07:44	mm_freak	i'm serious…  when i can't decide i just toss a coin
2013-09-09 18:07:51	inkjetunito	haasn: does haskell compile into JS nicely?
2013-09-09 18:07:58	haasn	inkjetunito: for some meaning of ‘nicely’
2013-09-09 18:08:08	Ankhers	We do 'code kata' from time to time here. I try and do most exercises in Haskell
2013-09-09 18:08:17	mm_freak	just to try one of them and see how far i get is usually much faster than to fail with an educated guess
2013-09-09 18:08:26	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 18:08:28	inkjetunito	haasn: i mean for not having the compiler to reimplement the whole language in js
2013-09-09 18:08:29	haasn	inkjetunito: here is pong in .js: http://hdiff.luite.com/gloss/pong/out.js
2013-09-09 18:08:31	Ankhers	fair enough.
2013-09-09 18:08:32	applikativ	i haven't noticed it lately but it used to happen a lot that there were parsec question that were actually aimed at some work project where the surroundings were in God knows what Edomite programming language
2013-09-09 18:08:37	inkjetunito	haasn: thanks
2013-09-09 18:09:00	ekipan	them names
2013-09-09 18:09:03	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-09 18:09:05	haasn	inkjetunito: well, this one was generated with ghcjs which is just a backend / extension of GHC itself, so as a result it can compile almost anything GHC can compile
2013-09-09 18:09:10	haasn	(the exception being FFI stuff, obviously)
2013-09-09 18:09:13	<--	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-09 18:09:18	mm_freak	inkjetunito: haskell requires a run-time system, which does need to be written in javascript in this case
2013-09-09 18:09:22	mm_freak	inkjetunito: there is no way around that
2013-09-09 18:09:37	inkjetunito	haasn: the output looks reasonably small
2013-09-09 18:09:43	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 18:09:50	applikativ	inkjetunito: ghcjs is the most grandiose of the hs/js schemes around. there are other simpler things
2013-09-09 18:10:04	haasn	inkjetunito: compared to a pong game written in ‘normal’ js? :)
2013-09-09 18:10:07	-->	anRch (~markmilli@ip-64-134-41-115.public.wayport.net) has joined #haskell
2013-09-09 18:10:28	inkjetunito	haasn: heh. no.
2013-09-09 18:10:36	haasn	wait a minute, that file has 93706 lines
2013-09-09 18:10:39	haasn	you call this reasonably small? :)
2013-09-09 18:10:55	haasn	to be honest, I'm surprised it runs at all (see http://hdiff.luite.com/gloss/pong/ )
2013-09-09 18:10:59	 *	applikativ looks for a Fay or Elm 'pong'
2013-09-09 18:11:07	-->	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has joined #haskell
2013-09-09 18:11:07	haasn	elm should be much smaller
2013-09-09 18:11:15	luite_	later versions make smaller code
2013-09-09 18:11:16	applikativ	yeah i head they can compile gloss
2013-09-09 18:11:17	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 245 seconds)
2013-09-09 18:11:29	haasn	with fay, you don't get the nice things like lenses ;)
2013-09-09 18:11:36	luite_	also i'm going to commit a non-concurrent runtime soon-ish
2013-09-09 18:11:37	haasn	or FRP
2013-09-09 18:11:40	mauke	I wonder what happens if you run that through the closure compiler
2013-09-09 18:11:43	applikativ	oh is that out of the question in fay?
2013-09-09 18:11:43	luite_	that gloss example is quite old
2013-09-09 18:12:05	haasn	applikativ: I'm not sure, but fay has no type classes and also lacks a lot haskell extensions
2013-09-09 18:12:16	haasn	you could probably implement basic lenses ‘manually’
2013-09-09 18:12:28	luite_	ouch
2013-09-09 18:12:48	luite_	haasn: that pong out.js file is from before we had the ghcjs optimizer in place :)
2013-09-09 18:12:54	applikativ	no Functor in fay?  lenses (narrowly construed) only need rank2types, no?
2013-09-09 18:12:54	haasn	luite_: update it!
2013-09-09 18:12:54	luite_	it's already a lot better
2013-09-09 18:13:28	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (Ping timeout: 264 seconds)
2013-09-09 18:13:37	-->	AndChat|740025 (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 18:13:42	luite_	haasn: yeah i'll go over the old examples soon, ghcjs release is in a few weeks and i'm fixing other stuff first
2013-09-09 18:13:57	<--	jbracker (~quassel@m-116.informatik.uni-kiel.de) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2013-09-09 18:14:01	<--	io2_ (~george@unaffiliated/irrequietus) has quit
2013-09-09 18:14:02	haasn	applikativ: https://github.com/faylang/fay/wiki/Why-fay-does-not-currently-support-type-classes
2013-09-09 18:14:14	luite_	also i have a non-concurrent runtime ready soon, which will make code more compact
2013-09-09 18:14:19	applikativ	it is plain that in the long run, everthing, even the children, will be made of javascript.
2013-09-09 18:14:25	mm_freak	you can have FRP in fay, but it won't look as nice
2013-09-09 18:14:39	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-09 18:14:56	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-09-09 18:14:58	haasn	mm_freak: yeah, and you'll have to implement it from scratch - whereas Elm has it ‘built in’
2013-09-09 18:15:08	haasn	which is why I said elm would be smaller :P
2013-09-09 18:15:26	<--	bondar (~bondar@197.156.132.62) has quit (Ping timeout: 245 seconds)
2013-09-09 18:15:51	<--	babalone (~AndChat74@46.115.105.214) has quit (Ping timeout: 276 seconds)
2013-09-09 18:16:01	mm_freak	not from scratch
2013-09-09 18:16:02	luite_	elm mostly has the bindings with dom/canvas built in, but haskell already has more advanced graphics libs like diagrams
2013-09-09 18:16:05	-->	lisdrumz (~lis@37.115.5.205) has joined #haskell
2013-09-09 18:16:06	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Quit: mikecaruso)
2013-09-09 18:16:19	luite_	with haskell you'd have to build your own active html elements etc
2013-09-09 18:16:22	mm_freak	you can take netwire, rewrite the classy stuff into nonclassy stuff and compile it
2013-09-09 18:16:31	mm_freak	although i'm not sure whether fay supports GADTs
2013-09-09 18:16:45	mm_freak	in any case GHCJS is what i'd choose
2013-09-09 18:16:48	luite_	i think it does
2013-09-09 18:16:51	-->	albertid (~hannes@212.255.36.244) has joined #haskell
2013-09-09 18:17:01	luite_	but it doesn't know about any dictionaries in them
2013-09-09 18:17:03	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-09 18:17:05	-->	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has joined #haskell
2013-09-09 18:17:12	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-09 18:17:13	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:17:16	-->	ecube (~ecube@unaffiliated/ecube) has joined #haskell
2013-09-09 18:17:44	<--	Argue (~Argue@112.209.122.237) has quit (Ping timeout: 256 seconds)
2013-09-09 18:17:46	mm_freak	probably because it simply doesn't have dictionaries
2013-09-09 18:17:53	mm_freak	i guess elm has the same limitation
2013-09-09 18:17:57	<--	JohnBat26 (~Eugene@89.175.77.172) has quit (Ping timeout: 245 seconds)
2013-09-09 18:18:11	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:18:29	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Ping timeout: 276 seconds)
2013-09-09 18:18:32	paolino	hi, what is the problem with pattern bindings and existentials that makes ghc brain explodes ? The possibility of recursive definitions ?
2013-09-09 18:18:43	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-09 18:18:50	levi	I don't think any of the 'compile a functional language to js' implementations that aren't built with the help of a full haskell compiler have typeclasses.
2013-09-09 18:18:51	<--	kevinqcs (~turing@183.209.53.55) has quit (Remote host closed the connection)
2013-09-09 18:18:57	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-09 18:18:57	applikativ	well, i think ghc only pretends that its brain exploded
2013-09-09 18:19:02	luite_	mm_freak: fay has some partial workaround, using dynamic dispatch on the values
2013-09-09 18:19:07	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 276 seconds)
2013-09-09 18:19:17	levi	They mostly have nicer record types, though.
2013-09-09 18:19:20	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:19:28	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-09 18:19:31	-->	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-09 18:19:54	<--	crvs_ (~crvs@bl11-61-12.dsl.telepac.pt) has quit (Quit: Lost terminal)
2013-09-09 18:19:57	paolino	applikativ, I had to clean the desk
2013-09-09 18:19:58	 *	Lethalman is using ghcjs for rewriting a static website as single page js.... working very well, using blaze-html, network and other stuff seamlessly
2013-09-09 18:19:59	levi	Except fay, which has to pass the Haskell type-checker.
2013-09-09 18:20:00	luite_	mm_freak: so you can implement a subset of typeclasses, for example Eq a where (==) :: a -> a -> Bool, you can implement that by attaching some (==) method to (a prototype) of a in JS
2013-09-09 18:20:06	-->	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has joined #haskell
2013-09-09 18:20:07	<--	crvs (~crvs@bl11-61-12.dsl.telepac.pt) has quit (Remote host closed the connection)
2013-09-09 18:20:27	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 245 seconds)
2013-09-09 18:20:30	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Quit: Leaving)
2013-09-09 18:21:22	luite_	mm_freak: of course it's not quite the same, dispatch based on value instead of type, but some very common/useful typeclasses can be done this way
2013-09-09 18:21:42	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Remote host closed the connection)
2013-09-09 18:22:11	-->	thealanwattsriot (~brianchen@216.30.179.54) has joined #haskell
2013-09-09 18:22:22	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-09 18:22:45	applikativ	paolino: ha!
2013-09-09 18:22:47	levi	From what I gather, the fay guys are working on using the 'Typing Haskell In Haskell' package to implement closer to full Haskell98 features.
2013-09-09 18:22:57	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-09 18:22:57	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-09-09 18:23:11	luite_	lethalman also has submitted a GHCJS patch that reduces the code size a bit more :) (but it still has a bug so i cannot yet merge it)
2013-09-09 18:23:19	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-09 18:23:32	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-09 18:23:40	-->	lingxiao (~lingxiao@hnt20912.wireless-pennnet.upenn.edu) has joined #haskell
2013-09-09 18:23:44	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-09 18:23:52	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Client Quit)
2013-09-09 18:24:11	<--	lingxiao (~lingxiao@hnt20912.wireless-pennnet.upenn.edu) has quit (Remote host closed the connection)
2013-09-09 18:24:11	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-09 18:24:42	-->	lingxiao (~lingxiao@hnt20912.wireless-pennnet.upenn.edu) has joined #haskell
2013-09-09 18:25:09	<--	artyomkazak (~artyomkaz@94.25.229.117) has quit (Read error: Connection reset by peer)
2013-09-09 18:25:31	<--	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has quit (Quit: leaving)
2013-09-09 18:25:32	luite_	levi: yeah although i'm not sure if that's the way they want to go now
2013-09-09 18:25:38	-->	sepp2k (~sexy@g230250245.adsl.alicedsl.de) has joined #haskell
2013-09-09 18:25:44	luite_	there was some talk about implementing a more modern algorithm
2013-09-09 18:25:50	-->	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-09 18:26:05	-->	artyomkazak (~artyomkaz@94.25.229.117) has joined #haskell
2013-09-09 18:26:23	<--	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has left #haskell
2013-09-09 18:26:25	luite_	although i'm not sure personally if it wouldn't make more sense then to just use ghc's typechecked AST then
2013-09-09 18:26:48	mm_freak	luite_: i suppose GHCJS just compiles the core language, so it doesn't have any of those issues
2013-09-09 18:26:48	luite_	haven't really paid much attention to the discussions at zurihac last week
2013-09-09 18:26:54	luite_	mm_freak: yeah, STG
2013-09-09 18:27:13	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-09 18:27:23	luite_	but that means that some code you get is less compact, or looks less like the original haskell
2013-09-09 18:27:29	bitonic-work	are there functions to read ACII data in a ByteString somewhere?  specifically Word16/32 in hex notation
2013-09-09 18:27:32	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-09 18:27:43	luite_	bitonic-work: there's base16-bytestring
2013-09-09 18:27:55	<--	Targen_ (~iguana@190.73.206.135) has quit (Ping timeout: 256 seconds)
2013-09-09 18:27:58	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-09 18:28:15	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-09 18:28:19	bitonic-work	luite_: thank you!
2013-09-09 18:28:31	luite_	bitonic-work: and binary/cereal to get the stuff out of the decoded bytestring
2013-09-09 18:28:37	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-09 18:28:46	bitonic-work	luite_: right, the problem with `binary' is that it works with lazy bytestrings
2013-09-09 18:28:57	bitonic-work	and I didn't want to pull `cereal' in
2013-09-09 18:29:19	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 18:29:21	-->	alszar (alszar@nat/rackspace/x-nxvzekrvhmseftto) has joined #haskell
2013-09-09 18:29:37	luite_	bitonic-work: wrapping a strict ByteString into a lazy one is not an expensive operation
2013-09-09 18:29:43	<--	vpetro (~textual@24.114.29.46) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:30:16	luite_	bitonic-work: but for simple things the functions in Data.ByteString.Builder will work
2013-09-09 18:30:17	-->	litherum (~Litherum@76.74.153.49) has joined #haskell
2013-09-09 18:30:20	luite_	int h bytestring pacakge
2013-09-09 18:31:11	luite_	only writing though, i think...
2013-09-09 18:31:17	bitonic-work	yeah
2013-09-09 18:31:27	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-09 18:31:42	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-09 18:31:53	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-09 18:31:55	-->	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has joined #haskell
2013-09-09 18:32:32	<--	eacameron1 (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-09-09 18:32:40	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-09-09 18:33:11	<--	visof (~visof@unaffiliated/visof) has quit (Remote host closed the connection)
2013-09-09 18:33:30	-->	tibbe (~tibbe@207.198.105.19) has joined #haskell
2013-09-09 18:34:24	-->	james-ubc (~james@dhcp-206-87-197-136.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-09 18:34:48	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-09 18:35:11	-->	exicer (~exicer@host86-130-9-198.range86-130.btcentralplus.com) has joined #haskell
2013-09-09 18:35:18	<--	hexagoxel (~hexagoxel@pc230184.eduroam.uni-kiel.de) has quit (Ping timeout: 248 seconds)
2013-09-09 18:35:30	lingxiao	hey has anyone programmed extensively with arrows? or have preference for it for some reason? if preference is the right word
2013-09-09 18:36:02	lingxiao	and would like to asnwer a few general question from me? :D
2013-09-09 18:36:18	<--	erochester (~erocheste@d-199-228-125.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-09-09 18:36:50	-->	osa1 (uid13910@gateway/web/irccloud.com/x-kjyaoetkdldkaxho) has joined #haskell
2013-09-09 18:36:56	-->	ulfdoz (~mary@p5B38A7C8.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 18:37:46	quchen	Don't ask to ask, ask.
2013-09-09 18:38:06	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-09 18:38:33	lingxiao	ok cools, what are some common computations that can be descirbed using arrows that cannot be described using monads?
2013-09-09 18:38:45	-->	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-09 18:38:45	lingxiao	I know it's more general than monads, but what are some concret examples?
2013-09-09 18:38:55	-->	eacameron (~Elliot_Ca@69.41.14.217) has joined #haskell
2013-09-09 18:39:07	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Remote host closed the connection)
2013-09-09 18:39:12	lingxiao	I'm reading the original Chalmers paper on it mind you, but would like more examples
2013-09-09 18:39:18	quchen	I don't think they're more general, they're just different. You can't make a Monad instance from every Arrow.
2013-09-09 18:39:32	quchen	(Actually you can't make a Monad instance for any arrow because the kinds don't match.)
2013-09-09 18:39:51	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-09 18:40:21	quchen	One basic example for "something" arrows can do that monads cannot is a State object that tracks whether the user has modified the state yet.
2013-09-09 18:40:39	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-09 18:40:40	-->	manolis___ (~manolis@178.128.177.7.dsl.dyn.forthnet.gr) has joined #haskell
2013-09-09 18:40:46	applikativ	paolino: oh i realized i meant to link http://lpaste.net/92798
2013-09-09 18:41:00	quchen	Monads can't capture that because in (>>= f) the "f" is fully generic, and the monad can't react to "case <f modifies>".
2013-09-09 18:41:03	<--	Krugger (~chatzilla@188.140.47.87) has quit (Ping timeout: 264 seconds)
2013-09-09 18:41:44	applikativ	paolino: if you consider the binding via Foo made at the top level, its pretty clearly insane
2013-09-09 18:41:50	<--	emmp (~manolis@62.1.106.144.dsl.dyn.forthnet.gr) has quit (Ping timeout: 240 seconds)
2013-09-09 18:41:59	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-09 18:42:23	quchen	Some FRP libraries rely on arrows, but I haven't used them. That's probably the only somewhat wide-spread use of Arrows, at least as far as I know. Many people think Arrows are broken anyway and stay away from them.
2013-09-09 18:42:39	applikativ	quchen: that you can make an arrow instance from every monad, but not vice versa, means they're more general, on one way of understanding 'general'
2013-09-09 18:42:57	applikativ	or am i in a muddle
2013-09-09 18:42:59	-->	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 18:43:05	<--	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-09 18:43:06	-->	augur (~augur@129.2.129.32) has joined #haskell
2013-09-09 18:43:07	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 18:43:21	-->	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 18:43:34	-->	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has joined #haskell
2013-09-09 18:44:14	levi	I think at least one of the XML packages uses arrows.
2013-09-09 18:44:23	quchen	applikativ: You can take any Monad and make Kleisli arrows out of that.
2013-09-09 18:44:33	applikativ	i think those are Kleisli arrows though, in the xml libs
2013-09-09 18:44:37	donri	levi: hxt
2013-09-09 18:44:38	applikativ	quchen: right
2013-09-09 18:44:40	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 18:44:44	quchen	applikativ: Similarly, monads aren't more general than functions because you can take any function and make a monad out of it (Reader).
2013-09-09 18:44:49	donri	levi: but it's really a monad
2013-09-09 18:45:01	applikativ	if so then the xml arrows don't show 'arrows are more general'
2013-09-09 18:45:38	quchen	applikativ: But I guess you could also argue the other way round somehow. :-D
2013-09-09 18:45:47	applikativ	its the ones that cant be expressed equivalently by Kleisli m a b that are 'more general'
2013-09-09 18:46:05	<--	hsyl20 (~shenry@193.50.110.138) has quit (Quit: leaving)
2013-09-09 18:46:26	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-09-09 18:46:34	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-09-09 18:46:42	applikativ	quchen: is that analogy function == monad ; monad == arrow right?
2013-09-09 18:46:49	quchen	Sort of, yes.
2013-09-09 18:46:52	applikativ	that should not be == sorry
2013-09-09 18:47:02	quchen	For suitable (==) :-)
2013-09-09 18:47:04	donri	btw if every monad can be made an arrow and arrow is equivalent to applicative+category, does that mean any applicative can be upgraded to a monad via a category instance?
2013-09-09 18:47:19	elliott	no, that just upgrades them to an arrow
2013-09-09 18:47:21	elliott	(modulo some laws)
2013-09-09 18:47:25	quchen	applikativ: Another way of looking at it: Kleisli is not an instance of Monad.
2013-09-09 18:47:33	<--	james-ubc (~james@dhcp-206-87-197-136.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 245 seconds)
2013-09-09 18:47:35	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 248 seconds)
2013-09-09 18:47:39	donri	elliott: ooh right. duh.
2013-09-09 18:47:43	donri	got that backwards there.
2013-09-09 18:47:44	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-09 18:47:55	<--	anRch (~markmilli@ip-64-134-41-115.public.wayport.net) has quit (Quit: anRch)
2013-09-09 18:48:21	shachaf	Kleisli m a is an instance of Monad!
2013-09-09 18:48:26	quchen	Oh?
2013-09-09 18:48:28	shachaf	(When m is.)
2013-09-09 18:48:29	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-09 18:49:10	<--	ISF (~ivan@201.82.138.219) has quit (Ping timeout: 248 seconds)
2013-09-09 18:49:14	shachaf	Well, maybe not *is* an instance.
2013-09-09 18:49:18	shachaf	But could be.
2013-09-09 18:49:19	donri	hm i guess what i actually meant was that any monad can be expressed as applicative plus category? is that true?
2013-09-09 18:49:30	shachaf	donri: Where did "monad" get into it?
2013-09-09 18:49:39	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 18:49:54	applikativ	quchen: Kleisli m a is an instance of monad, no? Kliesli m a b ~ ReaderT a m b
2013-09-09 18:50:02	donri	shachaf: because any monad can be expressed as arrow?
2013-09-09 18:50:09	<--	path[l] (~vsi@72.51.35.51) has quit (Quit: path[l])
2013-09-09 18:50:17	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-09 18:50:20	-->	Ralith (~ralith@66.114.129.162) has joined #haskell
2013-09-09 18:50:34	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-09 18:50:37	applikativ	oh shachaf has responded to quchen
2013-09-09 18:50:39	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 240 seconds)
2013-09-09 18:51:08	<--	soulofpeace (~soulofpea@175.156.232.233) has quit (Ping timeout: 246 seconds)
2013-09-09 18:51:16	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-09 18:51:20	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-09-09 18:51:26	-->	watermind (~wm@bl19-221-221.dsl.telepac.pt) has joined #haskell
2013-09-09 18:51:44	<--	s1eepyn4te (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-09 18:51:52	-->	jml_ (~jml@dab-crx1-h-69-10.dab.02.net) has joined #haskell
2013-09-09 18:52:05	quchen	applikativ: Hm.
2013-09-09 18:52:43	<--	jml_ (~jml@dab-crx1-h-69-10.dab.02.net) has quit (Remote host closed the connection)
2013-09-09 18:52:53	<--	tuxie_ (~paranoid@213.61.228.26) has quit (Ping timeout: 256 seconds)
2013-09-09 18:53:07	applikativ	man all these libraries in base should be thrown out; really obvious thinks like adding deriving (Show, Eq, etc.) to Identity are missing
2013-09-09 18:53:31	-->	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-09 18:53:40	donri	applikativ: but base doesn't export any Identity, does it?
2013-09-09 18:53:41	quchen	applikativ: Send a patch? Sounds like nobody bothered adding that yet
2013-09-09 18:53:41	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 18:53:48	applikativ	so of course there's no monad instance for Kleisli m a, but this is in fact *morally* required if ophans are to be avoided
2013-09-09 18:54:06	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-09 18:54:08	applikativ	donri: right, i shouldn't have mentioned base, I was thinking of transformers
2013-09-09 18:54:12	lingxiao	quchen: wait woa so now I'm a little confused, in this paper, it says:
2013-09-09 18:54:21	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Quit: Computer has gone to sleep.)
2013-09-09 18:54:22	donri	honestly i kinda want an Identity in base
2013-09-09 18:54:29	donri	there's a hidden Id in Traversable :p
2013-09-09 18:54:31	lingxiao	"for any monad m, functions of type a -> m b are poential arrows"
2013-09-09 18:54:35	-->	NihilistDandy (~ND@132.198.9.255) has joined #haskell
2013-09-09 18:54:42	quchen	donri: There are multiple Id hidden in GHC ;-)
2013-09-09 18:54:48	lingxiao	so I guess that means not all function of type a -> m b are necessarily arrows?
2013-09-09 18:54:50	donri	i can imagine
2013-09-09 18:54:56	donri	but it does export Const ...
2013-09-09 18:55:00	applikativ	yes this is nonsense, and the constant and identity functores in lens should be scrapped
2013-09-09 18:55:08	geekosaur	lingxiao, `m` is not something magic all by itself
2013-09-09 18:55:38	donri	oh dear and transformers *also* has a *separate* Constant
2013-09-09 18:55:39	applikativ	donri: i mean, supposing a Identity in genuine base, to which i was ineptly assimilating transformers
2013-09-09 18:55:41	geekosaur	if you don;t have an additional constraint it could represent any type constructor that can be parameterized by an additional type
2013-09-09 18:55:43	applikativ	of course it does
2013-09-09 18:55:49	quchen	lingxiao: Yes, for any Monad m, you can create a Kleisli arrow, i.e. "instance Monad m => Arrow (Kleisli m)", where Kleisli m a b = a -> m b.
2013-09-09 18:55:50	lingxiao	geekosaur: sorry could you expand on that? I'm sick and am having trouble understanding super terse english
2013-09-09 18:55:56	geekosaur	*many* of those are monads, but not all
2013-09-09 18:56:21	geekosaur	example: unless you have an additional constraint, I can use Data.Set as `m`
2013-09-09 18:56:24	geekosaur	which is not a monad
2013-09-09 18:56:36	geekosaur	(well, is not a Monad, because of the Ord constraint)
2013-09-09 18:57:33	applikativ	that a -> m b is an arrow ('in a and b' so to speak) is a way of saying m is a monad ; only to say it's an arrow, you have to wrap it it
2013-09-09 18:57:38	--	cfricke_ is now known as cfricke
2013-09-09 18:57:42	quchen	"All Monads are Arrows" means that given a Monad instance, you can write an Arrow instance. Similarly for "All Arrows are Monads". It is true that there are *some* Arrows you can use to write a Monad instance (Kleisli), but in general you can't.
2013-09-09 18:58:03	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-09-09 18:58:03	shachaf	Also you should forget about Arrow because it's a bad class.
2013-09-09 18:58:18	shachaf	That's the true path to long-term happiness.
2013-09-09 18:58:19	applikativ	ah the arrow trolls are here
2013-09-09 18:58:22	donri	i recently had to add a dependency on transformers *just* for runIdentity to get a safe "singleton" traversal, that felt silly
2013-09-09 18:58:40	donri	(ie. head or fromJust would have worked just as well, but didn't feel right)
2013-09-09 18:58:42	lingxiao	so in other words arrows is not a superclass to monads like functor is to applicative
2013-09-09 18:58:55	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-09 18:59:01	-->	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has joined #haskell
2013-09-09 18:59:30	lingxiao	shachaf: yeah all the arrow stuff look a little excessive to me but I dont really trust my judgement, and I've seen people use it a some, like Gabriel Gonzales
2013-09-09 18:59:32	applikativ	arrow is a fine class its that classes are no good; i realized this studying Frank for a bit
2013-09-09 18:59:45	quchen	lingxiao: Yes, Arrows are not a superclass of Monads (and can't be made one).
2013-09-09 19:00:01	lingxiao	and reading through this paper on YAMPA, which is an FRP DSl, they talk about arrows first
2013-09-09 19:00:09	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-09 19:00:13	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 19:00:14	applikativ	the usual complaint 'but my would be arrow doesnt realize arr' is enforced like mad by the syntax of Frank
2013-09-09 19:00:14	lingxiao	quchen: ok nice thanks for clearning that up
2013-09-09 19:00:28	quchen	applikativ: Classes are no good? Waitwaitwait.
2013-09-09 19:00:37	-->	cocool (~textual@132.198.9.255) has joined #haskell
2013-09-09 19:00:45	applikativ	quchen: of course i don't think that
2013-09-09 19:00:47	<--	AndChat|740025 (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2013-09-09 19:00:57	lingxiao	So if I want to understand FRP in and out, and want to use a well maintained, usable FRP library
2013-09-09 19:00:59	applikativ	it's just that the arrow idea doesn't fit too well with the whole system.
2013-09-09 19:01:03	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (Ping timeout: 260 seconds)
2013-09-09 19:01:10	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 19:01:10	lingxiao	which one should I pick, would they be the same llibrary
2013-09-09 19:01:25	quchen	lingxiao: There are also non-arrow FRP libraries.
2013-09-09 19:01:37	quchen	(Which I know nothing about. Just mentioning it.)
2013-09-09 19:01:48	joelteon	> foldl1 f [a,b,c,d]
2013-09-09 19:01:49	lambdabot	  f (f (f a b) c) d
2013-09-09 19:01:50	lingxiao	quchen: I know there's reactive banana, and a few others..
2013-09-09 19:01:53	applikativ	but the Frank language makes  'everything an arrow' to put it with extreme crudity
2013-09-09 19:01:55	joelteon	> foldr1 f [a,b,c,d]
2013-09-09 19:01:56	lambdabot	  f a (f b (f c d))
2013-09-09 19:02:03	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 264 seconds)
2013-09-09 19:02:09	lingxiao	but word yes, anyone else has played with FRP and would like to volunteer an answer?
2013-09-09 19:02:31	lingxiao	applikativ: can I ask what this "frank language" is all about?
2013-09-09 19:03:17	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-09 19:03:23	applikativ	lingxiao: yet another experimental with a fancy modern effect system
2013-09-09 19:03:47	-->	scripty (~scripty@117.221.123.93) has joined #haskell
2013-09-09 19:03:53	lingxiao	applikativ: ah and it uses arrows alot I take it, what's your criticism against it?
2013-09-09 19:04:00	-->	fl00r (~fl00r@216.70.153.210) has joined #haskell
2013-09-09 19:04:04	hpaste	cocool pasted “byorgey hw” at http://lpaste.net/92799
2013-09-09 19:04:05	fl00r	join /##freebsd
2013-09-09 19:04:06	cocool	I'm working through byorgey's homeworks in my spare time for some Haskell practice, but I've hit a snag. insert keeps stomping on old values rather than going deeper into the tree, and I'm not sure why.
2013-09-09 19:04:11	<--	manolis___ (~manolis@178.128.177.7.dsl.dyn.forthnet.gr) has quit (Quit: Leaving)
2013-09-09 19:04:17	-->	thunderrd (~thunderrd@119.42.79.52) has joined #haskell
2013-09-09 19:04:24	n-dolio	I don't see how frank would solve the problem of your arrow-like thing not having arr.
2013-09-09 19:04:33	applikativ	lingxiao: https://personal.cis.strath.ac.uk/conor.mcbride/pub/Frank/TFM.pdf http://hackage.haskell.org/package/Frank
2013-09-09 19:04:34	n-dolio	Other than that it doesn't support such things, and is deficient for such constructs.
2013-09-09 19:04:46	-->	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 19:04:49	n-dolio	If it, indeed, forces that things have arr.
2013-09-09 19:05:03	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 264 seconds)
2013-09-09 19:05:13	<--	babalone (~AndChat74@p5DE44B15.dip0.t-ipconnect.de) has quit (Client Quit)
2013-09-09 19:05:14	lingxiao	ah ok haha thanks!
2013-09-09 19:05:39	applikativ	everything a -> b is already an effect and can be subsumed under a [console, tell-mom, etc] b
2013-09-09 19:05:46	applikativ	and compose with it
2013-09-09 19:05:46	<--	zacts (~zacts@unaffiliated/zacts) has quit (Read error: Connection reset by peer)
2013-09-09 19:06:06	-->	OlegYch4 (~OlegYch@213.184.238.131) has joined #haskell
2013-09-09 19:06:42	n-dolio	Okay. Then it is a system that cannot represent arrow-like things that lack arr.
2013-09-09 19:07:09	applikativ	right, exactly, it has the same constraint that the Arrow class has
2013-09-09 19:07:10	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-09 19:07:33	applikativ	n-dolio: oh i see, you misunderstood how i was intervening n
2013-09-09 19:07:42	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 19:07:44	n-dolio	Well then it sucks for anyone who has an arrow-like thing that doesn't support arr.
2013-09-09 19:08:01	applikativ	yeah Frank sucks for them too
2013-09-09 19:08:04	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-09 19:08:05	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Quit: Computer has gone to sleep.)
2013-09-09 19:08:09	applikativ	only Frank doesn't suck
2013-09-09 19:08:15	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 240 seconds)
2013-09-09 19:08:24	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-09 19:08:27	applikativ	therefore their Arrow trolling, which is also Frank trolling, is empty
2013-09-09 19:08:31	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 276 seconds)
2013-09-09 19:08:37	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Quit: Konversation terminated!)
2013-09-09 19:08:39	<--	OlegYch (~OlegYch@213.184.238.131) has quit (Ping timeout: 264 seconds)
2013-09-09 19:08:43	<--	Neqoxec (~Neqoxec@184-63-79-123.cust.wildblue.net) has quit (Ping timeout: 256 seconds)
2013-09-09 19:08:53	<--	litherum (~Litherum@76.74.153.49) has quit (Quit: Leaving.)
2013-09-09 19:09:12	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 19:09:19	-->	OlegYch (~OlegYch@213.184.238.131) has joined #haskell
2013-09-09 19:09:38	n-dolio	Whose arrow trolling? The people who want to do things almost like Arrow, except that arr completely screws the situation?
2013-09-09 19:09:50	applikativ	of course good luck getting compositions like bip :: a [console] b; bop :: b [maybe] c; bipbop :: a [console, maybe] c going
2013-09-09 19:09:57	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-09 19:10:12	skypers	hey
2013-09-09 19:10:14	-->	Targen (~iguana@186.95.158.176) has joined #haskell
2013-09-09 19:10:23	skypers	where does cabal put apps on linux per default?
2013-09-09 19:10:27	skypers	I’ve installed something
2013-09-09 19:10:28	applikativ	n-dolio: there are such people, who think there is no actual idea in the arrow class
2013-09-09 19:10:30	skypers	I can’t run it
2013-09-09 19:10:35	skypers	it says it doesn’t exist
2013-09-09 19:10:45	mauke	~/.cabal/bin
2013-09-09 19:10:55	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 19:10:55	elliott	there's an idea to Arrow, it's just not a terribly great one.
2013-09-09 19:11:05	<--	OlegYch4 (~OlegYch@213.184.238.131) has quit (Read error: Operation timed out)
2013-09-09 19:11:06	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 19:11:13	applikativ	elliott: why is it not great?
2013-09-09 19:11:19	skypers	thank you mauke
2013-09-09 19:11:28	 *	applikativ invites n-dolio to watch the fud
2013-09-09 19:11:30	hpaste	cocool annotated “byorgey hw” with “byorgey hw (annotation)” at http://lpaste.net/92799#a92800
2013-09-09 19:11:33	-->	artyomkazak1 (~artyomkaz@94.25.229.117) has joined #haskell
2013-09-09 19:11:33	<--	artyomkazak (~artyomkaz@94.25.229.117) has quit (Quit: Leaving.)
2013-09-09 19:11:54	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-09-09 19:11:58	elliott	you pay the cost of the incredibly awkward tuples & sums programming style (especially when working with GADTs etc. where you basically have to use unsafeCoerce a lot), without actually gaining the advantages you could in terms of optimisation and flexibility.
2013-09-09 19:12:08	elliott	though if you're going to pre-brand it as FUD I don't know why I bother
2013-09-09 19:12:20	applikativ	elliott: the tuples are indeed hopeless
2013-09-09 19:12:40	<--	Gentlecat_ (~Roman@79.105.226.37) has quit (Quit: Leaving)
2013-09-09 19:13:25	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-09-09 19:13:29	-->	Gentlecat (~Roman@79.105.226.37) has joined #haskell
2013-09-09 19:13:30	joelteon	@hoogle a -> [a -> a] -> a
2013-09-09 19:13:31	lambdabot	Data.Generics.Schemes everywhere :: (forall a. Data a => a -> a) -> (forall a. Data a => a -> a)
2013-09-09 19:13:31	lambdabot	Data.Generics.Schemes everywhere' :: (forall a. Data a => a -> a) -> (forall a. Data a => a -> a)
2013-09-09 19:13:31	lambdabot	Prelude until :: (a -> Bool) -> (a -> a) -> a -> a
2013-09-09 19:13:40	joelteon	ok
2013-09-09 19:13:47	applikativ	but again, they have to do with fitting an idea into a particular programming language
2013-09-09 19:13:47	<--	arenz (arenz@nat/ibm/x-geixcgjzqwnmipue) has quit (Ping timeout: 245 seconds)
2013-09-09 19:13:56	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-09 19:14:01	Kaini1123	How can I lift f :: IO a -> IO b to f' :: MyMonad a -> MyMonad b (assuming IO at the bottom of MyMonad's monad stack)
2013-09-09 19:14:04	joelteon	oh that's just foldr ($)
2013-09-09 19:14:13	jfischoff	foldr (.)
2013-09-09 19:14:23	jfischoff	maybe both ...
2013-09-09 19:14:47	-->	Driscoll (~ben@199.21.234.7) has joined #haskell
2013-09-09 19:14:53	shachaf	Kaini1123: You cannot.
2013-09-09 19:14:57	-->	babalone (~baba@p5DE44B15.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 19:15:05	jfischoff	heh foldr ($)
2013-09-09 19:15:37	lingxiao	elliot: what do you mean by "idea to arrow", as in "potimisation and flexibility" as you said later?
2013-09-09 19:15:50	<--	Redz (~red@82.113.106.12) has quit (Ping timeout: 248 seconds)
2013-09-09 19:16:06	lingxiao	or do you mean optimisation and flexibility is needed over the monad, but the arrow implementation is cumberson?
2013-09-09 19:16:12	lingxiao	cumbersom*
2013-09-09 19:16:14	-->	ifthenelse (4c632e49@gateway/web/freenode/ip.76.99.46.73) has joined #haskell
2013-09-09 19:16:35	ifthenelse	Using optparse-applicative, how do you assign a default value if one is not supplied?
2013-09-09 19:16:47	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-09-09 19:16:57	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-09 19:17:05	Kaini1123	Hm, so how am I supposed to use Database.PostgreSQL.Simple.Transaction.withTransaction :: Connection -> IO a -> IO a in anything that's not IO-only?
2013-09-09 19:17:07	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-09 19:17:34	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 19:17:48	joelteon	ifthenelse: 'value'
2013-09-09 19:18:00	joelteon	option ( long "foo" <> short 'f' <> ... <> value "default" )
2013-09-09 19:18:19	-->	eb4890 (~hhh@2001:470:1f09:18c8:20d5:5c60:1f53:289e) has joined #haskell
2013-09-09 19:18:23	ifthenelse	like, strOption          ( long "hello"         <> metavar "TARGET"         <> value ""            <> help "Target for the greeting" )
2013-09-09 19:18:31	ifthenelse	?
2013-09-09 19:18:33	joelteon	yes
2013-09-09 19:18:37	ifthenelse	Thank you!
2013-09-09 19:18:48	-->	litherum (~Adium@2620:149:4:1b01:9c21:e2af:3bdf:db8c) has joined #haskell
2013-09-09 19:19:35	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-09 19:19:40	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-09 19:19:54	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-09 19:20:33	<--	paullik (~paullik@unaffiliated/paullik) has quit (Read error: Operation timed out)
2013-09-09 19:20:33	Twey	cocool: Your problem doesn't occur for me
2013-09-09 19:20:38	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-09 19:20:56	Twey	cocool: Leaf (LogMessage Info 1 "Nothing to report") (Node Leaf (LogMessage Info 4 "Everything normal") (Node Leaf (LogMessage Info 6 "Completed armadillo processing") Leaf))
2013-09-09 19:21:19	cocool	Weird.
2013-09-09 19:21:37	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Remote host closed the connection)
2013-09-09 19:21:41	cocool	Maybe my ghci is misbehaving
2013-09-09 19:21:46	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Ping timeout: 256 seconds)
2013-09-09 19:22:00	Twey	(I just copy/pasted your code and defined data MessageType = Info deriving (Show, Eq); type TimeStamp = Int)
2013-09-09 19:22:10	Twey	Perhaps you forgot to reload the file?
2013-09-09 19:22:27	Twey	Or maybe your parseMessage isn't working as expected
2013-09-09 19:22:49	--	Dashkal_ is now known as Dashkal
2013-09-09 19:22:50	<--	kushal (~kdas@fedora/kushal) has quit (Excess Flood)
2013-09-09 19:22:59	quchen	Is there any reason to have a separate module/type for the free Applicative when Applicative => Monad?
2013-09-09 19:23:10	<--	tibbe (~tibbe@207.198.105.19) has quit (Quit: tibbe)
2013-09-09 19:23:10	quchen	I just saw it in the "free" package
2013-09-09 19:23:23	cocool	D'oh.
2013-09-09 19:23:31	cocool	Now it works, Twey. I guess I forgot to reload :D
2013-09-09 19:23:35	Twey	Heh.
2013-09-09 19:23:40	cocool	Thanks for restoring my sanity, at least
2013-09-09 19:23:41	haasn	quchen: you mean WrappedMonad?
2013-09-09 19:23:42	Twey	Happens to everyone
2013-09-09 19:24:02	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-09 19:24:03	quchen	haasn: No, "Ap" from "Control.Applicative.Free".
2013-09-09 19:24:37	haasn	oh, I see what you mean now
2013-09-09 19:24:39	danr	quchen: the free applicative /= the free monad
2013-09-09 19:24:43	<--	cocool (~textual@132.198.9.255) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 19:24:43	haasn	yeah
2013-09-09 19:24:48	<--	Driscoll (~ben@199.21.234.7) has quit (Quit: leaving)
2013-09-09 19:24:55	quchen	danr: Oh?
2013-09-09 19:25:11	-->	OlegYch9 (~OlegYch@213.184.238.131) has joined #haskell
2013-09-09 19:25:26	quchen	danr: So in particular the "free" Applicative you can make using ap/return from the "free Monad" is not the same as the "free Applicative"?
2013-09-09 19:25:33	arkeet	correct
2013-09-09 19:25:45	--	lingxiao is now known as f
2013-09-09 19:25:51	<--	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has quit (Quit: WeeChat 0.4.0)
2013-09-09 19:25:51	danr	quchen: you cannot make a Monad instance for the free applicative of f, called Alt f in this package
2013-09-09 19:25:54	quchen	Glad I asked. Also I'm confused now. :-)
2013-09-09 19:26:02	--	f is now known as lingxiao
2013-09-09 19:26:11	<--	lingxiao (~lingxiao@hnt20912.wireless-pennnet.upenn.edu) has quit (Remote host closed the connection)
2013-09-09 19:26:13	arkeet	the free monad doesn't satisfy the universal property of the free applicative.
2013-09-09 19:26:25	ReinH	hai
2013-09-09 19:26:26	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: bbl)
2013-09-09 19:26:27	elliott	"free X" varies widely depending on what X is.
2013-09-09 19:26:31	elliott	for instance, the free monoid is a list.
2013-09-09 19:26:43	<--	OlegYch (~OlegYch@213.184.238.131) has quit (Ping timeout: 260 seconds)
2013-09-09 19:26:57	<--	b0oh (~Adium@93.185.184.116) has quit (Quit: Leaving.)
2013-09-09 19:26:59	elliott	calling the free monad Free was kind of a bad idea.
2013-09-09 19:27:05	arkeet	true
2013-09-09 19:27:14	shachaf	I've said so before, but no one listens.
2013-09-09 19:27:17	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-09 19:27:29	quchen	elliott: That one also somewhat confuses me. Free (f (Free f a)) is not the same as "FreeCons f (Free f a)" or something, which I would recognize as a list
2013-09-09 19:27:36	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 19:27:41	ifthenelse	With optparse-applicative, can you have requirements in groups? For instance, if you enable "--cheese", you need to enter "--flavor" flavors, but if you enter "--dogs", you need to enter "--color"?
2013-09-09 19:27:49	arkeet	quchen: the latter is a kind error.
2013-09-09 19:27:49	-->	b0oh (~Adium@93.185.184.116) has joined #haskell
2013-09-09 19:27:58	-->	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-09 19:27:59	shachaf	quchen: It's a list in the category of endofunctors!
2013-09-09 19:28:04	arkeet	haha
2013-09-09 19:28:19	ReinH	hah
2013-09-09 19:28:20	elliott	hmm, the free monoid and free monad show the relation between monoids and monads cutely.
2013-09-09 19:28:28	elliott	A* = A^0 + A^1 + A^2 + ...
2013-09-09 19:28:33	elliott	F* = F^0 + F^1 + F^2 + ...
2013-09-09 19:28:34	ReinH	I find it slightly strange that I understand cofree comonads but don't fully understad free monads
2013-09-09 19:28:47	<--	b0oh (~Adium@93.185.184.116) has quit (Client Quit)
2013-09-09 19:28:47	danr	elliott: oh, that's elegant
2013-09-09 19:28:52	arkeet	Free f a = a^0 + a^1 + a^2 + ...
2013-09-09 19:28:53	joastbg	i'm trying to parse a date, readTime defaultTimeLocale "%F" "1998-06-03", and then i need to import Locale, but it says its member of hidden package
2013-09-09 19:28:54	arkeet	er
2013-09-09 19:28:56	arkeet	no.
2013-09-09 19:29:01	shachaf	A regular list of A: 1 + (A * (1 + (A * ...
2013-09-09 19:29:02	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2013-09-09 19:29:04	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-09 19:29:10	arkeet	not quite.
2013-09-09 19:29:11	ReinH	shachaf: cofree [A]
2013-09-09 19:29:11	arkeet	yeah.
2013-09-09 19:29:14	arkeet	what shachaf is about to say.
2013-09-09 19:29:15	joelteon	Is there anything like rex that's designed for search-and-replace rather than just search?
2013-09-09 19:29:21	quchen	elliott: Ah, so I can see the Free Monad as a type-level list of sorts?
2013-09-09 19:29:21	shachaf	arkeet: I'll let you say it.
2013-09-09 19:29:25	arkeet	=(
2013-09-09 19:29:37	levi	joastbg: Did you add the package to your cabal file?
2013-09-09 19:29:40	arkeet	Free f a = a + f (a + f ...)
2013-09-09 19:29:50	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 240 seconds)
2013-09-09 19:29:58	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-09 19:30:02	shachaf	tharkeet
2013-09-09 19:30:04	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 19:30:05	quchen	arkeet: Oh right, I forgot about the "Pure" part.
2013-09-09 19:30:14	quchen	Starting to make sense to me now.
2013-09-09 19:30:19	-->	refried_ (~refried_@lawn-143-215-127-135.lawn.gatech.edu) has joined #haskell
2013-09-09 19:30:23	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-09 19:30:28	joastbg	I need to add haskell98 package, you mean in cabal file? i just use ghci now, playing around
2013-09-09 19:30:41	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 246 seconds)
2013-09-09 19:30:43	-->	phischu (~pschuster@p4FD32C12.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 19:30:43	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-09 19:30:46	applikativ	joastbg: you probably dont want to do that
2013-09-09 19:30:54	applikativ	joastbg: what is telling you you need to?
2013-09-09 19:31:04	-->	matheus23 (~quassel@p4FDF2E93.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 19:31:05	danr	arkeet: I think it's more like Free f a = a + f a + f^2 a + f^3 a + ...
2013-09-09 19:31:20	arkeet	danr: only if f distributes over +
2013-09-09 19:31:27	shachaf	Note that the "category of endofunctors" is a monoidal category (with functor composition).
2013-09-09 19:31:30	-->	Redz (~red@82.113.106.145) has joined #haskell
2013-09-09 19:31:37	shachaf	It's not exactly the usual kind of product.
2013-09-09 19:31:38	joastbg	applikativ: I found a link on the web, http://pleac.sourceforge.net/pleac_haskell/datesandtimes.html, but I simply need to parse a string to a date "YYYY-MM-DD"
2013-09-09 19:31:39	donri	ifthenelse: ((,) <$> cheese <*> flavor) <|> ((,) <$> dogs <*> color)  -- possibly
2013-09-09 19:31:43	ReinH	arkeet: you're describing Cofree f a
2013-09-09 19:31:48	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-09 19:31:54	arkeet	danr: e.g. Free (Const r) a = a + r, not a + r + r + r + ...
2013-09-09 19:31:57	arkeet	ReinH: nope
2013-09-09 19:32:04	ReinH	arkeet: ... yep.
2013-09-09 19:32:06	arkeet	nope
2013-09-09 19:32:06	-->	Thra11 (~Thra11@201.58.113.87.dyn.plus.net) has joined #haskell
2013-09-09 19:32:23	ReinH	sure you are
2013-09-09 19:32:28	danr	Free (Const r) a = a + Const r a + Const r (Const r a) + ..
2013-09-09 19:32:31	arkeet	I'm simply expanding the recursion in Free f a = a + f (Free f a)
2013-09-09 19:32:38	applikativ	joastbg: you can add     Default-Language: Haskell2010
2013-09-09 19:32:38	arkeet	danr: that's what I'm saying is false!
2013-09-09 19:32:53	applikativ	joastbg: or rather Haskell98
2013-09-09 19:32:55	elliott	arkeet: given that F is covariant shachaf's and my expressions are equivalent, afaict
2013-09-09 19:32:58	-->	james-ubc (~james@dhcp-206-87-197-82.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-09 19:33:05	elliott	oh, I guess the problem is that the +s give you "tags".
2013-09-09 19:33:09	elliott	so never mind.
2013-09-09 19:33:17	arkeet	the problem is f doesn't have to preserve coproducts.
2013-09-09 19:33:31	joastbg	applikativ: will this have any other effects, when used in a larger program?
2013-09-09 19:33:46	danr	arkeet: gotcha! thanks
2013-09-09 19:34:14	applikativ	adding 'haskell98'? I'm not sure what all the effects are -- it used to be clearer in the mind when ghc was making the transition
2013-09-09 19:34:25	applikativ	not that it quite made the transition, as i understand
2013-09-09 19:34:40	ReinH	arkeet: for instance, [1 :< [ 2 :< []]] :: Cofree [Int]
2013-09-09 19:34:45	applikativ	joastbg: i'm just investigating why it wants it
2013-09-09 19:35:04	arkeet	ReinH: sure. but that's not what I'm describing.
2013-09-09 19:35:07	arkeet	+ is not *
2013-09-09 19:35:07	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Quit: Ex-Chat)
2013-09-09 19:35:10	shachaf	ReinH: Cofree [Int] is a kind error.
2013-09-09 19:35:15	arkeet	heh.
2013-09-09 19:35:26	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-09 19:35:26	ReinH	Cofree [] Int :p
2013-09-09 19:35:32	danr	arkeet: since Roll (K r (Free (K r) a)) = Roll r
2013-09-09 19:35:36	joastbg	applikativ: Yes, it confuses me a bit, that it's kind of a mystery to parse a date, and why as you say, an older spec is needed
2013-09-09 19:35:39	arkeet	Free f a = a + f (Free f a).
2013-09-09 19:35:40	dissipate__	how out of date is the book 'learn you a haskell'?
2013-09-09 19:35:40	shachaf	OK, but Cofree doesn't even have +
2013-09-09 19:35:43	applikativ	joastbg: so far its looking like this little files just have the usual problems, e.g. 'import Locale' should be 'import System.Locale'
2013-09-09 19:35:44	arkeet	Cofree f a  = a * f (Cofree f a)
2013-09-09 19:35:57	arkeet	dissipate_: it's good.
2013-09-09 19:36:13	arkeet	it's current on what it covers.
2013-09-09 19:36:14	dissipate__	arkeet: but are the concepts and code samples up to date?
2013-09-09 19:36:18	ReinH	arkeet: ok
2013-09-09 19:36:21	applikativ	joastbg: which is the one that failed?
2013-09-09 19:36:34	-->	gdsx (~xsdg@sipb-vm-99.mit.edu) has joined #haskell
2013-09-09 19:36:38	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 19:36:39	ReinH	dissipate__: close enough to be useful
2013-09-09 19:36:54	dissipate__	ReinH: cool
2013-09-09 19:37:27	<--	akurei (~akurei@joel.neurop.ruhr-uni-bochum.de) has quit (Ping timeout: 260 seconds)
2013-09-09 19:37:39	joastbg	applikative: it works now, using readTime defaultTimeLocale "%F" "1998-06-03" :: UTCTim
2013-09-09 19:37:56	<--	xinming (~xinming@125.82.198.183) has quit (Read error: Connection reset by peer)
2013-09-09 19:38:03	<--	_oio_ (~kenneth@186.83.255.243) has quit (Quit: Konversation terminated!)
2013-09-09 19:38:18	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 19:38:35	-->	xinming (~xinming@125.82.196.247) has joined #haskell
2013-09-09 19:38:46	<--	mmathis (~surya@198.199.68.171) has quit (Ping timeout: 256 seconds)
2013-09-09 19:38:51	quchen	arkeet: So Cofree is Free with a product instead of sum?
2013-09-09 19:39:02	joastbg	applikativ: typo(s), it works now readTime defaultTimeLocale "%F" "1998-06-03" :: UTCTime
2013-09-09 19:39:13	applikativ	what did you have to add joastbg ?
2013-09-09 19:39:39	arkeet	quchen: Cofree is Free with a product instead of coproduct.
2013-09-09 19:39:44	arkeet	=)
2013-09-09 19:39:58	-->	madjestic (~madjestic@95.99.165.145) has joined #haskell
2013-09-09 19:40:04	joastbg	applikativ: I added: Data.Time.Format and System.Locale
2013-09-09 19:40:06	quchen	And coproduct is the inverted Pi I was always wondering about why it exists in Latex. ;-)
2013-09-09 19:40:15	<--	shoret (~user@66.11.220.78) has quit (Quit: ERC Version 5.2 (IRC client for Emacs))
2013-09-09 19:40:28	-->	cppcabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-09 19:40:30	quchen	arkeet: I'll just bite: "Sums are coproducts?"
2013-09-09 19:40:44	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-09 19:40:58	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-09 19:41:01	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 19:41:11	shachaf	Well, Cofree is also, like, codata and stuff, man.
2013-09-09 19:41:18	shachaf	Yes, sum types are coproducts.
2013-09-09 19:41:19	applikativ	joastbg: oh ok.  the longer name for Locale is the only haskell98/2010 issue so far then; the regex and time libraries may have subtle changes though, as you go through these
2013-09-09 19:41:25	shachaf	And product types are products! Isn't it great?
2013-09-09 19:41:25	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 19:41:43	quchen	Can't judge that.
2013-09-09 19:41:47	quchen	Probably yes.
2013-09-09 19:42:03	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-09 19:42:08	quchen	So what's a "product type" as opposed to a "product"?
2013-09-09 19:42:12	joastbg	applikativ: thanks for your help, I didn't find any useful info on the web about this, but now it works
2013-09-09 19:42:34	mmaruseacph42	quchen: a type which is isomporphic to a tuple
2013-09-09 19:42:48	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 19:42:57	mmaruseacph42	consider for example the type (Bool, Bool) -- it has exactly 4 values (excluding the bottoms)
2013-09-09 19:43:02	quchen	mmaruseacph42: Yes, that's what I understood as a tuple so far.
2013-09-09 19:43:03	levi	applikativ: His example works after importing Data.Time.Format, Data.Time.Clock, and System.Locale
2013-09-09 19:43:03	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-09 19:43:09	applikativ	joastbg: in general the 'haskell 98' problem is really the 'hierarchical module' problem, with old tutorial material; you need Control.Monad, not Monad, Data.List not List, its usually mechanical
2013-09-09 19:43:10	mmaruseacph42	that 4 is the product of 2 values of the first Bool and 2 values of the second one
2013-09-09 19:43:10	quchen	But now shachaf distinguished between product types and products.
2013-09-09 19:43:29	mmaruseacph42	aah, products in the cat theory sense
2013-09-09 19:43:29	shachaf	Well, a categorical product.
2013-09-09 19:43:51	mmaruseacph42	I'll listen to other speak about this since I'm not guru in category theory
2013-09-09 19:44:00	-->	mmathis (~surya@198.199.68.171) has joined #haskell
2013-09-09 19:44:10	quchen	shachaf: So "A categorical product in Hask is a product type" would be the full statement?
2013-09-09 19:44:21	shachaf	I would reverse it.
2013-09-09 19:44:24	quchen	Or "is a category that has tuples as objects"
2013-09-09 19:44:27	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-09 19:44:35	shachaf	I don't know what that second one means.
2013-09-09 19:44:40	-->	morolin (~morolin@cantor.csl.cornell.edu) has joined #haskell
2013-09-09 19:45:01	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-09 19:45:22	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-09 19:45:33	shachaf	But (A,B) is a product of A and B (disregarding ⊥ etc.).
2013-09-09 19:45:45	shachaf	(There might also be other products.)
2013-09-09 19:45:56	shachaf	Maybe I should say: ((A,B),fst,snd) is a product of A and B.
2013-09-09 19:46:15	shachaf	OK, that notation is confusing.
2013-09-09 19:46:37	haasn	⟨(A,B),fst,snd⟩
2013-09-09 19:46:40	joastbg	applikativ: I will keep this in mind
2013-09-09 19:46:46	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-09 19:46:51	elliott	curry/uncurry is cooler than fst/snd
2013-09-09 19:47:16	arkeet	what i want to understand is how Yoneda works even on non-functors.
2013-09-09 19:47:17	ion	@type uncurry const
2013-09-09 19:47:18	shachaf	How does curry/uncurry get into it?
2013-09-09 19:47:18	lambdabot	(c, b) -> c
2013-09-09 19:47:48	quchen	(A,B) is the product category of A and B, i.e. for each 'a' from A and 'b' from B it has an object (a,b). Correct so far?
2013-09-09 19:47:50	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-09 19:47:54	applikativ	π1/ π2 are cooler than curry/uncurry
2013-09-09 19:48:09	elliott	curry/uncurry let you both construct and destruct pairs.
2013-09-09 19:48:14	haasn	π₁/π₂ are cooler than π1/π2
2013-09-09 19:48:15	quchen	(... plus appropriate morphisms)
2013-09-09 19:48:24	elliott	you can say p is a product if you have (p a b -> c) <-> (a -> b -> c)
2013-09-09 19:48:30	elliott	and curry/uncurry are the two halves of that isomorphism.
2013-09-09 19:48:31	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-09 19:48:37	arkeet	no, elliott.
2013-09-09 19:48:43	shachaf	elliott: But then you have to have a definition of exponentials.
2013-09-09 19:48:47	elliott	well, yes.
2013-09-09 19:48:50	elliott	I mean in Haskell, mainly.
2013-09-09 19:48:50	shachaf	Usually you define exponentials in terms of products.
2013-09-09 19:48:56	arkeet	(x -> p a b) <-> (x -> a, x -> b)
2013-09-09 19:49:02	arkeet	where the latter (,) is just cartesian product.
2013-09-09 19:49:03	shachaf	arkeet++
2013-09-09 19:49:35	-->	Vpalle (~anonymous@87-57-183-65-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-09 19:49:35	shachaf	And for coproduct: (c a b -> x) <-> (a -> x, b -> x)
2013-09-09 19:49:48	arkeet	:t either
2013-09-09 19:49:48	lambdabot	(a -> c) -> (b -> c) -> Either a b -> c
2013-09-09 19:49:57	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-09 19:49:58	applikativ	well, this has gone off topic in a not too unfamiliar, but of course I'm not saying that
2013-09-09 19:50:06	applikativ	too unfamiliar way rather
2013-09-09 19:50:24	skypers	hi there
2013-09-09 19:50:25	<--	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has quit (Remote host closed the connection)
2013-09-09 19:50:31	applikativ	hi there skypers
2013-09-09 19:50:38	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-09 19:50:40	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-09 19:50:46	shachaf	:t (&&&)
2013-09-09 19:50:47	lambdabot	Arrow a => a b c -> a b c' -> a b (c, c')
2013-09-09 19:50:49	-->	Guest43090 (~ubuntu@94-225-100-152.access.telenet.be) has joined #haskell
2013-09-09 19:50:51	<--	spion (~spion@unaffiliated/spion) has quit (Remote host closed the connection)
2013-09-09 19:50:52	arkeet	shachaf: explain how Yoneda can get us a Functor out of nothing.
2013-09-09 19:50:53	skypers	http://t.co/Dv33Ej5SNF is here my new portfolio, written with leaf, a haskell program I wrote (already in hackagedb)
2013-09-09 19:50:56	skypers	:)
2013-09-09 19:51:05	shachaf	arkeet: Which Yoneda? Where?
2013-09-09 19:51:17	applikativ	yes shachaf explain to us how Yoneda can get a functor out of anything!
2013-09-09 19:51:20	ReinH	shachaf: the lemming
2013-09-09 19:51:29	ReinH	pretty sure it's a lemming
2013-09-09 19:51:34	arkeet	shachaf: the one in kan-extensions, say
2013-09-09 19:51:56	--	Guest43090 is now known as ttt--
2013-09-09 19:52:03	arkeet	Data.Functor.Yoneda
2013-09-09 19:52:17	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-09 19:52:49	-->	ecr (~Thunderbi@2620:101:8003:200:ddde:1ba4:3028:67bf) has joined #haskell
2013-09-09 19:52:52	shachaf	arkeet: Can I do CoYoneda instead?
2013-09-09 19:53:00	-->	l0p3n (~kristian@unaffiliated/l0p3n) has joined #haskell
2013-09-09 19:53:00	arkeet	if you'd like.
2013-09-09 19:53:22	<--	james-ubc (~james@dhcp-206-87-197-82.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 245 seconds)
2013-09-09 19:53:23	arkeet	but I want to understand it more category-theoretically.
2013-09-09 19:53:28	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-09 19:53:29	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-09 19:53:32	-->	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has joined #haskell
2013-09-09 19:53:53	-->	fredmorcos (~fredmorco@cm56-209-5.liwest.at) has joined #haskell
2013-09-09 19:53:53	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 19:54:23	<--	troydm (~troydm@unaffiliated/troydm) has quit (Quit: What is hope? That all of your wishes and all of your dreams come true? (C) Rau Le Creuset)
2013-09-09 19:54:44	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-09 19:54:46	<--	Vpalle (~anonymous@87-57-183-65-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 248 seconds)
2013-09-09 19:54:53	arkeet	shachaf: well, later.
2013-09-09 19:54:54	arkeet	I have to go.
2013-09-09 19:54:58	levi	skypers: Nice.
2013-09-09 19:55:11	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Ping timeout: 246 seconds)
2013-09-09 19:55:15	skypers	levi: thank you
2013-09-09 19:55:22	shachaf	arkeet: I'm not saying that I can do either one, of course.
2013-09-09 19:55:33	skypers	my tool – leaf – is quite nice to use, but I’d like to improve it
2013-09-09 19:55:46	applikativ	fmap f (Y phi) = Y (phi . f)
2013-09-09 19:55:47	skypers	like adding more flexible concepts, like stylesheets
2013-09-09 19:55:50	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Ping timeout: 248 seconds)
2013-09-09 19:55:55	skypers	now they’re in CSS, and hm, it’s CSS…
2013-09-09 19:55:59	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-09 19:56:23	-->	james-ubc (~james@dhcp-206-87-197-82.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-09 19:56:51	-->	tertl3 (~William@75.139.64.89) has joined #haskell
2013-09-09 19:56:56	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-09 19:56:56	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-09-09 19:57:11	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit
2013-09-09 19:57:15	levi	skypers: Have you seen Clay?
2013-09-09 19:57:23	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-09 19:57:34	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-09 19:57:41	levi	It's a combinator library for generating CSS.
2013-09-09 19:57:46	skypers	nope
2013-09-09 19:57:51	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-09 19:57:54	skypers	I use blaze html
2013-09-09 19:58:06	skypers	I’ll look forward to clay then :)
2013-09-09 19:58:19	latro`a_	hm...this might be really obvious, not sure. fix a Functor f. is it possible to prove that either there exists x :: forall a. f a, or else any "fmap f m" must apply f to something?
2013-09-09 19:58:22	levi	Doesn't seem very widely used, but I used it on my new site.
2013-09-09 19:59:06	latro`a_	(this is true, for example, with Maybe and []; it seems like it's a theorem the typechecker should be able to prove, though)
2013-09-09 19:59:07	<--	osa1 (uid13910@gateway/web/irccloud.com/x-kjyaoetkdldkaxho) has quit
2013-09-09 19:59:22	-->	Earnestly (~Earnestly@unaffiliated/earnestly) has joined #haskell
2013-09-09 19:59:43	arkeet	latro`a_: what about neither? consider Const Void
2013-09-09 20:00:07	-->	pavonia (~user@p4FEEE740.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 20:00:13	latro`a_	isn't that basically a twisted around version of the first case?
2013-09-09 20:00:25	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-09 20:00:30	arkeet	uh
2013-09-09 20:00:31	arkeet	how so?
2013-09-09 20:00:33	latro`a_	(I may misremember the definition of Const)
2013-09-09 20:00:43	latro`a_	Const a b = Const a, yes?
2013-09-09 20:00:47	arkeet	Const r a = r
2013-09-09 20:00:53	arkeet	yeah
2013-09-09 20:00:53	latro`a_	k
2013-09-09 20:01:01	-->	gentleben (~gentleben@12.250.97.26) has joined #haskell
2013-09-09 20:01:02	arkeet	so Const Void a has no values for any a.
2013-09-09 20:01:24	latro`a_	is that the third case and there are no others?
2013-09-09 20:01:32	-->	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has joined #haskell
2013-09-09 20:01:53	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Remote host closed the connection)
2013-09-09 20:02:06	arkeet	so, you are trying to say that we can't have both?
2013-09-09 20:02:19	latro`a_	more precisely that it's exactly one of the three
2013-09-09 20:02:34	<--	aupiff (~aupiff@99.110.103.119) has quit (Ping timeout: 256 seconds)
2013-09-09 20:02:35	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 20:02:48	arkeet	well it's pretty clear that there exists x :: forall a. f a, or fmap f m must apply f to anything, or neither, or both.
2013-09-09 20:03:06	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-09 20:03:14	latro`a_	well yeah
2013-09-09 20:03:26	arkeet	s/anything/something/
2013-09-09 20:03:26	latro`a_	it seems to me that neither -> uninhabited type
2013-09-09 20:03:42	<--	james-ubc (~james@dhcp-206-87-197-82.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 256 seconds)
2013-09-09 20:03:44	latro`a_	and that both -> functor laws are violated
2013-09-09 20:04:14	arkeet	consider f Void, then.
2013-09-09 20:04:37	arkeet	fmap f (x :: Void) can't apply f to anything.
2013-09-09 20:04:44	arkeet	er, (x :: f Void)
2013-09-09 20:04:46	-->	anRch (~markmilli@ip-64-134-42-37.public.wayport.net) has joined #haskell
2013-09-09 20:04:53	latro`a_	that seems to suggest that the first case is just always true, then
2013-09-09 20:05:00	latro`a_	which makes my statement true but boring
2013-09-09 20:05:03	arkeet	no, that's clearly false.
2013-09-09 20:05:07	latro`a_	hm?
2013-09-09 20:05:12	arkeet	f = Identity
2013-09-09 20:05:15	latro`a_	touche
2013-09-09 20:05:32	latro`a_	I see
2013-09-09 20:05:48	latro`a_	so basically my statement is true modulo bottoms?
2013-09-09 20:05:56	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 20:05:57	latro`a_	(meaning not very true at all)
2013-09-09 20:06:16	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-09 20:06:31	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Ping timeout: 256 seconds)
2013-09-09 20:06:47	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-09 20:07:01	-->	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-09 20:07:07	latro`a_	that is, either there exists x :: forall a. f a, or fmap g (m :: f b) must apply g to something, or b is something equivalent to Void
2013-09-09 20:07:08	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Read error: Connection reset by peer)
2013-09-09 20:07:18	applikativ	hah, there's a nice little tutorial for 'clay' part of an act of atoning for writing a monad tutorial ... http://www.stephendiehl.com/posts/haskell_web.html
2013-09-09 20:07:30	-->	luksow (~luke@apn-31-1-167-117.dynamic.gprs.plus.pl) has joined #haskell
2013-09-09 20:07:37	applikativ	'do i need to know category theory in order to write a file?'
2013-09-09 20:07:49	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-09 20:07:51	<--	_oio_ (~kenneth@186.83.255.243) has quit (Quit: Konversation terminated!)
2013-09-09 20:07:54	<--	madjestic (~madjestic@95.99.165.145) has quit (Ping timeout: 240 seconds)
2013-09-09 20:07:54	-->	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has joined #haskell
2013-09-09 20:07:57	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Client Quit)
2013-09-09 20:08:05	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-09 20:08:10	haasn	do I need to understand monads in order to use bash?
2013-09-09 20:08:15	--	hiredman_ is now known as hiredman
2013-09-09 20:08:31	latro`a_	my point here was basically "where does the b come from, if we don't have a value that can just be that type freely, and we also don't have a value to apply the function to?"
2013-09-09 20:08:36	joelteon	do i need to learn category theory to cook dinner?
2013-09-09 20:08:40	applikativ	do i need to study group theory before i can turn around?
2013-09-09 20:08:46	arkeet	latro`a_: I don't know.
2013-09-09 20:09:05	arkeet	do I need to learn quantum field theory to use irc?
2013-09-09 20:09:07	haasn	do I need to study group theory in order to look in a mirror?
2013-09-09 20:09:11	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 260 seconds)
2013-09-09 20:09:18	latro`a_	it seems to me that the "forall b" part of the type enforces *something* like what I just said
2013-09-09 20:09:22	<--	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has quit (Ping timeout: 256 seconds)
2013-09-09 20:09:27	shachaf	Do I need to study monoids in order to have an identity?
2013-09-09 20:09:28	applikativ	well, haasn no, you need to study the category Grp for that
2013-09-09 20:09:33	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-09 20:09:34	arkeet	shachaf: yes.
2013-09-09 20:09:36	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-09 20:09:43	shachaf	Do I need to study abelian groups in order to commute?
2013-09-09 20:09:46	haasn	shachaf: yes but it's easy
2013-09-09 20:09:48	arkeet	shachaf: yes.
2013-09-09 20:10:01	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-09 20:10:02	arkeet	well, abelian monoids should suffice.
2013-09-09 20:10:04	shachaf	arkeet knows that my identity is deeply connected to monoids anyway.
2013-09-09 20:10:14	shachaf	arkeet: what about abelian magmas!!!!
2013-09-09 20:10:16	-->	jayprich (~jayprich@unaffiliated/jayprich) has joined #haskell
2013-09-09 20:10:16	haasn	arkeet: commutative semigroup
2013-09-09 20:10:24	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-09 20:10:25	haasn	or that :)
2013-09-09 20:10:26	arkeet	shachaf: I don't like those.
2013-09-09 20:10:29	joelteon	I fell in some abelian magma last night in Minecraft
2013-09-09 20:10:30	shachaf	I know.
2013-09-09 20:10:36	joelteon	dropped all my iron ingots, my bucket, my shears, and some coal
2013-09-09 20:10:48	arkeet	joelteon: did you lose your identity?
2013-09-09 20:10:50	joelteon	yeah
2013-09-09 20:10:54	joelteon	but it's ok, i respawned at my bed
2013-09-09 20:10:57	arkeet	what a shame :(
2013-09-09 20:11:03	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:704:c7dc:122d:4050:bcac:a549) has quit (Ping timeout: 240 seconds)
2013-09-09 20:11:05	joelteon	and now i have to level up again
2013-09-09 20:11:10	-->	troydm (~troydm@unaffiliated/troydm) has joined #haskell
2013-09-09 20:11:37	latro`a_	is the magma a monoid now?
2013-09-09 20:11:47	applikativ	no, a lot of non group operations commute
2013-09-09 20:11:49	<--	scripty (~scripty@117.221.123.93) has quit (Write error: Connection reset by peer)
2013-09-09 20:11:49	Lethalman	just flip your head
2013-09-09 20:11:50	FreeFull	I'm in a channel with an URL shortener bot and it just randomly shortened an URL to 4monad
2013-09-09 20:11:54	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:11:55	arkeet	latro`a_: if you can find a more precise way to state the question, I might be able to give a more precise answer?
2013-09-09 20:12:22	arkeet	I'm not sure what "f is applied to something" means.
2013-09-09 20:12:48	jfischoff	does Free f a ~ Fix (f :+: K a)?
2013-09-09 20:12:49	-->	Raydiation (~bernhard@chello080108042248.32.11.vie.surfer.at) has joined #haskell
2013-09-09 20:12:52	latro`a_	in [], either the list is empty (in which case xs :: forall a. f a)
2013-09-09 20:13:03	latro`a_	or you apply the function to at least one element
2013-09-09 20:13:12	arkeet	"sure"
2013-09-09 20:13:13	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-09 20:13:16	<--	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has quit (Quit: solancile)
2013-09-09 20:13:17	-->	jmcarthur_mobile (~jmcarthur@mad2536d0.tmodns.net) has joined #haskell
2013-09-09 20:13:25	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-09 20:13:27	Raydiation	hi do you use haskell for webapps? what frameworks do you like best?
2013-09-09 20:13:27	arkeet	jfischoff: sure.
2013-09-09 20:13:34	 *	jfischoff nods
2013-09-09 20:13:52	 *	hackagebot bytes 0.12 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.12 (EdwardKmett)
2013-09-09 20:14:01	applikativ	Raydiation: well, that question not as inflamatory as 'what editor should i use'? ;)
2013-09-09 20:14:33	shachaf	arkeet: what about Foo f a = a -> f (Foo f a)
2013-09-09 20:14:42	arkeet	I don't know what that is.
2013-09-09 20:14:48	shachaf	and Bar f a = f (Bar f a) -> a
2013-09-09 20:14:51	Raydiation	applikativ: im aware of that :) i just want to dig into haskell and i do web development a lot
2013-09-09 20:14:54	arkeet	or that.
2013-09-09 20:14:56	shachaf	that one doesn't even have a constant variance!
2013-09-09 20:14:58	applikativ	Raydiation: the three happening frameworks are Yesod, Snap and Happstack. Scotty, I don't think counts as a 'framwork' quite
2013-09-09 20:14:59	arkeet	haha
2013-09-09 20:15:03	<--	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has quit (Remote host closed the connection)
2013-09-09 20:15:19	arkeet	a -> f (a -> f (a -> ...))
2013-09-09 20:15:23	arkeet	I don't know what that is.
2013-09-09 20:15:30	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-09 20:15:35	-->	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has joined #haskell
2013-09-09 20:15:41	arkeet	besides it being Fix (f . (a ->))
2013-09-09 20:15:53	haasn	consider a ~ ByteString, f ~ IO for an example that makes sense to me
2013-09-09 20:16:10	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Ping timeout: 256 seconds)
2013-09-09 20:16:19	Raydiation	applikativ: whats your personal preference?
2013-09-09 20:16:20	arkeet	I'm tired.
2013-09-09 20:16:21	shachaf	IO makes sense to you?
2013-09-09 20:16:28	haasn	or f a ~ IO (x, a)
2013-09-09 20:16:28	arkeet	IO doesn't make sense to me.
2013-09-09 20:16:31	monochrom	"Foo f a = a -> f (Foo f a)" looks interesting
2013-09-09 20:16:38	haasn	shachaf: it's just a free monad, what's the big deal?
2013-09-09 20:16:52	arkeet	free on what functor?
2013-09-09 20:16:59	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 20:17:03	haasn	http://comonad.com/reader/2011/free-monads-for-less-3/
2013-09-09 20:17:08	n-dolio	Definitely not a free monad.
2013-09-09 20:17:10	joelteon	free monad with purchase of two applicatives
2013-09-09 20:17:21	applikativ	Raydiation: oh, i don't have one, since I have never constructed a serious website. or another way to put it is, my favorite is hakyll ;)
2013-09-09 20:17:23	haasn	newtype OI a = forall o i. OI (FFI o i) o (i -> a) deriving Functor
2013-09-09 20:17:29	haasn	IO = Free OI
2013-09-09 20:17:35	haasn	sort of
2013-09-09 20:17:38	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 20:17:39	n-dolio	Oh, you mean IO is a free monad.
2013-09-09 20:17:42	shachaf	FREE monad with the purchase of two functors*!
2013-09-09 20:17:48	haasn	well, it's one possible implementation
2013-09-09 20:17:51	Raydiation	applikativ: i see, thanks :)
2013-09-09 20:17:52	shachaf	* functors must be adjoint to qualify
2013-09-09 20:18:03	jfischoff	heh
2013-09-09 20:18:05	haasn	shachaf: hahaha
2013-09-09 20:18:11	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-09 20:18:15	applikativ	Raydiation: but they are all familiar, and have different features; im not sure where the most up-to-date non-ideological comparison might be.  yesod surely has more of a 'community' than the others
2013-09-09 20:18:21	haasn	shachaf: free comonad, too
2013-09-09 20:18:22	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-09-09 20:18:26	latro`a_	what exactly is FFI o i
2013-09-09 20:18:33	shachaf	haasn: That's two free monads!
2013-09-09 20:18:34	Raydiation	applikativ: thanks, thats what i wanted to hear :)
2013-09-09 20:19:13	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:19:21	<--	tertl3 (~William@75.139.64.89) has quit (Read error: Connection reset by peer)
2013-09-09 20:19:25	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-09 20:19:31	shachaf	haasn: Anyway, the comonad is, like, cofree and stuff.
2013-09-09 20:19:31	-->	kenneth__ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:19:32	<--	kenneth__ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-09 20:19:39	haasn	latro`a_: either an impure function (if you're in a language that has that sort of thing) o -> i; or some abstract representation of an external function call or something, I guess
2013-09-09 20:19:43	<--	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has quit (Ping timeout: 245 seconds)
2013-09-09 20:19:48	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-09 20:19:48	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:19:54	edwardk	derp. i just realized HLINT listens when you say 'ignore "Parse error"'
2013-09-09 20:20:03	edwardk	that will let us kill a ton of #ifdef HLINT blocks in lens
2013-09-09 20:20:06	<--	quchen (~quchen@p54AA0B90.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-09 20:20:14	jfischoff	oh nice
2013-09-09 20:20:16	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-09 20:20:16	<--	dexter2 (~dexter3@71-212-130-174.hlrn.qwest.net) has quit (Ping timeout: 264 seconds)
2013-09-09 20:20:19	shachaf	edwardk: Does it just ignore the rest of the file in that case, or what?
2013-09-09 20:20:32	edwardk	probably, admittedly
2013-09-09 20:20:41	edwardk	so maybe we want to keep them
2013-09-09 20:20:44	shachaf	That's not so great if you actually want to use it.
2013-09-09 20:20:46	levi	Raydiation: Yesod relies heavily on domain-specific languages in Template Haskell, which has its pluses and minuses.
2013-09-09 20:20:46	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:20:58	edwardk	but it just came up at work as we were debating about using HLint internally
2013-09-09 20:21:14	monochrom	"new course: MAT 1337 Category Theory. Instructor: Adjunct Prof. Untor"
2013-09-09 20:21:21	edwardk	and putting ignore 'Parse error' was enough to mitigate the 'its a pain in the ass' concerns to where I could use it =P
2013-09-09 20:21:27	monochrom	err, s/Untor/Unctor/ !
2013-09-09 20:21:39	Raydiation	levi: you mean like using a proper template language?
2013-09-09 20:21:43	Raydiation	rather than php style?
2013-09-09 20:21:44	applikativ	monochrom: Adjunct Professors come in pairs
2013-09-09 20:21:54	-->	tuxie_ (~paranoid@e179152161.adsl.alicedsl.de) has joined #haskell
2013-09-09 20:22:27	<--	nominolo (~nominolo@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-09-09 20:22:52	levi	Raydiation: Opinions vary widely on what the 'proper' way to do templates is. Most of the Haskell frameworks have a 'blessed' template package, but you can usually use a different one if you want to via a little bit of glue code.
2013-09-09 20:22:58	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Ping timeout: 256 seconds)
2013-09-09 20:23:05	-->	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has joined #haskell
2013-09-09 20:23:07	jfischoff	So I had this idea. Take `Free f a` go to `Fix (f :+: K a)`. Then turn the Fixes into STRefs, and share the refs where the 'a's are equal. The idea is too make a Free monad that has faster substitution.
2013-09-09 20:23:09	applikativ	Raydiation: i don't think you need to get too mixed up in th to use yesod.
2013-09-09 20:23:14	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-09 20:23:22	-->	lemao (~lemao@189.60.37.42) has joined #haskell
2013-09-09 20:23:30	applikativ	Raydiation: but then i'm only intersted in the io models the different frameworks use ;)
2013-09-09 20:23:40	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-09 20:23:40	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Quit: message144)
2013-09-09 20:23:45	-->	ddp (~ddp@c-98-229-3-40.hsd1.vt.comcast.net) has joined #haskell
2013-09-09 20:23:46	Raydiation	applikativ: you mean like event driven?
2013-09-09 20:23:57	jfischoff	Am I on the right track there? is there a better way to do efficent substitution with a free monad?
2013-09-09 20:24:12	<--	ddp (~ddp@c-98-229-3-40.hsd1.vt.comcast.net) has quit (Client Quit)
2013-09-09 20:24:14	n-dolio	How are you going to determine if two arbitrary as are the same?
2013-09-09 20:24:19	jfischoff	Eq
2013-09-09 20:24:22	n-dolio	Nope.
2013-09-09 20:24:23	levi	applikativ: Just about all the Yesod examples make heavy use of quasiquoters for routes, html generation, css generation, persistence management, etc.
2013-09-09 20:24:30	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 20:24:34	<--	NihilistDandy (~ND@132.198.9.255) has quit
2013-09-09 20:24:48	jfischoff	n-dolio: go on
2013-09-09 20:24:49	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 20:24:54	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-09 20:24:59	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 20:25:01	levi	You probably could use Yesod without TH, but it's certainly not the way it's usually used.
2013-09-09 20:25:08	applikativ	levi: i think we're in complete agreement; but not every rational person is scared off by this
2013-09-09 20:25:33	n-dolio	Well, unless it's some 'optamize :: Eq a => Free f a -> Free f a' combinator.
2013-09-09 20:25:49	n-dolio	It's not going to happen automatically, though.
2013-09-09 20:25:51	edwardk	jfischoff: tuning in now what is the question?
2013-09-09 20:25:55	levi	Sure, I don't think it's a reason to be scared off, but it takes some getting used to if you're not familiar with using a lot of TH-generated code.
2013-09-09 20:26:14	jfischoff	edwardk: you know substitute from bound?
2013-09-09 20:26:21	applikativ	Raydiation: no, i meant another aspect of io, they all have different replacement for the so-called 'lazy io', yesod uses conduits, snap uses 'io-streams' increasingly, happstack is preparing to use the new pipes
2013-09-09 20:26:23	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-09 20:26:24	jfischoff	I want to make an optimize version for Free
2013-09-09 20:26:52	jfischoff	or something like Free maybe a different representation with STRefs where the Pure a are the same
2013-09-09 20:27:11	jfischoff	This is connected with unification ...
2013-09-09 20:27:34	applikativ	i haven't heard it, but it follows from first principles that `scotty` is preparing to organize io using the `machines` package
2013-09-09 20:28:02	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-09 20:28:13	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Read error: Operation timed out)
2013-09-09 20:28:59	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-09 20:29:00	dcoutts	testers requested!  http://beta.hackage.haskell.org/
2013-09-09 20:29:34	geekosaur	what, not newnewnewnewhackage? :p
2013-09-09 20:29:49	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 20:30:04	edwardk	jfischoff: i'll catch up with you about this after i get back from a meeting
2013-09-09 20:30:07	dcoutts	geekosaur: we considered that...
2013-09-09 20:30:09	-->	roconnor (~roconnor@e120-pool-d89a6ce0.brdbnd.voicenetwork.ca) has joined #haskell
2013-09-09 20:30:09	dcoutts	;-)
2013-09-09 20:30:13	-->	fractalizator (~fractaliz@g225180144.adsl.alicedsl.de) has joined #haskell
2013-09-09 20:30:17	jfischoff	edwardk: cool
2013-09-09 20:30:28	elliott	dcoutts: will the haddock stylesheet be adjusted to match the site design?
2013-09-09 20:30:38	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-09 20:30:39	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-09 20:30:39	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-09 20:30:54	<--	fractalizator (~fractaliz@g225180144.adsl.alicedsl.de) has left #haskell
2013-09-09 20:31:07	dcoutts	elliott: if someone can do that, it's not totally trivial since the .css is duplicated in each generated bundle
2013-09-09 20:31:07	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-09-09 20:31:09	donri	hackage factory factory
2013-09-09 20:31:11	-->	james-ubc (~james@206.87.195.0) has joined #haskell
2013-09-09 20:31:16	-->	aupiff (~aupiff@67-194-59-28.wireless.umnet.umich.edu) has joined #haskell
2013-09-09 20:31:17	sm	hooray
2013-09-09 20:31:20	-->	nexx (nexx@dslb-188-108-216-070.pools.arcor-ip.net) has joined #haskell
2013-09-09 20:31:20	<--	nexx (nexx@dslb-188-108-216-070.pools.arcor-ip.net) has quit (Changing host)
2013-09-09 20:31:20	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-09 20:31:36	<--	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-09-09 20:31:37	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-09 20:31:52	-->	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has joined #haskell
2013-09-09 20:32:04	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-09 20:32:05	donri	applikativ: isn't scotty just a layer on top of wai = conduit though?
2013-09-09 20:32:07	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-09 20:32:49	 *	monochrom has a bit of worry about doing final switchovers to coincide with ICFP :)  i.e., what if something goes wrong in the switching, will the staff be available to fix problems?
2013-09-09 20:34:13	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Read error: Connection reset by peer)
2013-09-09 20:34:44	luite_	hmm, is the physical location of the staff really an issue/
2013-09-09 20:34:45	luite_	?
2013-09-09 20:34:55	<--	JaRoel|4d (~jaroel|4d@2a03:5700:3:0:bd25:34c0:9dd2:6df7) has quit (Remote host closed the connection)
2013-09-09 20:34:57	<--	chrisdotcode_ (~quassel@ool-6caa6f84.static.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-09 20:35:03	tpsinnem	hm, typeclass newbie question: if i have a value of a type with a Monad instance, can i not also use Functor methods on it?
2013-09-09 20:35:03	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-09 20:35:09	<--	akegalj_ (~akegalj@93-138-245-37.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2013-09-09 20:35:19	luite_	usually you'd just remote reboot into a rescue distro if something really goes wrong... the new hackage is hosted at some proper isp isn't it?
2013-09-09 20:35:21	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-09-09 20:35:24	monochrom	yes. physical location affects internet connections and attention span
2013-09-09 20:35:47	luite_	oh i think there should be enough reliable connections in boston :)
2013-09-09 20:36:21	geekosaur	spoken like someone who's never seen a conference wifi config overload
2013-09-09 20:36:36	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-09 20:36:56	applikativ	dcoutts: i take it that the request for an upload account still vanishes into Prof. Patterson's lost email account?
2013-09-09 20:37:03	luite_	geekosaur: nah i mean many haskellers even live nearby, there's the hotel, airport and other locations
2013-09-09 20:37:11	<--	xinming (~xinming@125.82.196.247) has quit (Ping timeout: 260 seconds)
2013-09-09 20:37:18	-->	boegel (~boegel@98.138-247-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-09 20:37:24	dcoutts	applikativ: no, as it says, there's self registration
2013-09-09 20:37:37	applikativ	oh, then it's maybe a little slow?
2013-09-09 20:37:39	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 20:37:58	-->	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has joined #haskell
2013-09-09 20:38:00	-->	akurei (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has joined #haskell
2013-09-09 20:38:14	dcoutts	applikativ: ahh, no, we need to install sendmail on the new VM...
2013-09-09 20:38:15	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-09-09 20:38:32	<--	relrod (relrod@nat/redhat/x-nceilrfnxscwhpbt) has quit (Changing host)
2013-09-09 20:38:32	-->	relrod (relrod@redhat/relrod) has joined #haskell
2013-09-09 20:38:48	elliott	um, I hope you still need some kind of approval for new package uploads?
2013-09-09 20:38:57	<--	l0p3n (~kristian@unaffiliated/l0p3n) has quit (Quit: WeeChat 0.3.8)
2013-09-09 20:38:58	-->	scripty (~scripty@117.192.169.26) has joined #haskell
2013-09-09 20:39:02	-->	xinming (~xinming@125.82.197.176) has joined #haskell
2013-09-09 20:39:09	applikativ	i'm not sure what Prof. Patterson goes by in approving people
2013-09-09 20:39:22	jfischoff	there was never really any approval I think
2013-09-09 20:39:24	dcoutts	elliott: yes, as it says on the features page about self-registration
2013-09-09 20:39:35	elliott	it feels reassuring to know you have to pass a two second test to upload a new version of yesod :)
2013-09-09 20:39:39	monochrom	luite_: http://ro-che.info/ccc/13
2013-09-09 20:39:43	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 245 seconds)
2013-09-09 20:39:44	<--	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-09-09 20:39:44	ReinH	Does the prelude define a Functor instance for all Monad instances?
2013-09-09 20:39:56	geekosaur	no
2013-09-09 20:40:01	-->	yfyf (~yfyf@wcw-stud-239-231.wireless.uva.nl) has joined #haskell
2013-09-09 20:40:03	<--	scripty (~scripty@117.192.169.26) has quit (Max SendQ exceeded)
2013-09-09 20:40:08	ReinH	well, WrappedMonad
2013-09-09 20:40:13	applikativ	you mean, does it also define Functor? there must be exceptions
2013-09-09 20:40:28	-->	scripty (~scripty@117.192.169.26) has joined #haskell
2013-09-09 20:40:41	applikativ	MerelyFunctoredMonad
2013-09-09 20:40:43	-->	albertid_ (~hannes@212.255.96.239) has joined #haskell
2013-09-09 20:40:57	dcoutts	elliott: see also the bit about security
2013-09-09 20:40:59	luite_	monochrom: hehe i suspect that during most talks, half the audience will be answering stackoverflow questions anyway :)
2013-09-09 20:41:03	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-09 20:41:14	elliott	dcoutts: ok, I admit reading would help :)
2013-09-09 20:41:15	ReinH	tpsinnem: A Monad is does not necessarily have a defined Functor instance, although many do
2013-09-09 20:41:16	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-09 20:41:35	applikativ	the old test was that you used to have to be able to figure out what email account prof. patterson might be reading
2013-09-09 20:41:53	applikativ	which of course exceeded my capacities
2013-09-09 20:41:57	ReinH	Is there a principled reason to not define fmap f x = x >>= (return . f) for all monads?
2013-09-09 20:42:04	donri	applikativ: not the one listed? http://hackage.haskell.org/packages/accounts.html
2013-09-09 20:42:08	elliott	aka fmap = liftM
2013-09-09 20:42:12	ReinH	right
2013-09-09 20:42:19	applikativ	ReinH: that it's a bad definition?
2013-09-09 20:42:28	ReinH	or just a historical artifact?
2013-09-09 20:42:30	tpsinnem	ReinH: ok, thanks
2013-09-09 20:42:35	ReinH	applikativ: why?
2013-09-09 20:42:37	applikativ	is that how liftM is implemented?
2013-09-09 20:42:46	ReinH	it's the definition used for, e.g., Functor IO
2013-09-09 20:42:50	monochrom	no. but there is a reason to not write "instance Monad m => Functor m"
2013-09-09 20:42:56	applikativ	>>= can be recursive while fmap is not, for one thing
2013-09-09 20:43:03	donri	monochrom: DefaultSignatures ;)
2013-09-09 20:43:20	cppcabrera	 /close
2013-09-09 20:43:20	ReinH	applikativ: you tell me http://hackage.haskell.org/packages/archive/base/latest/doc/html/src/Control-Monad.html#liftM
2013-09-09 20:43:23	<--	cppcabrera (~alejandro@72.32.115.231) has left #haskell ("WeeChat 0.4.1")
2013-09-09 20:43:27	shachaf	applikativ: Huh?
2013-09-09 20:43:33	ReinH	applikativ: I'm not sure what you're trying to say
2013-09-09 20:43:36	monochrom	yikes, what's default signatures?
2013-09-09 20:43:39	applikativ	so it is with e.g. the Stream type in vector
2013-09-09 20:43:48	ReinH	liftM is defined using a do-sugared >>=
2013-09-09 20:43:50	<--	albertid (~hannes@212.255.36.244) has quit (Ping timeout: 240 seconds)
2013-09-09 20:44:01	donri	monochrom: they let you have an alternative type signature for a class default
2013-09-09 20:44:17	donri	default fmap :: Monad m => ...
2013-09-09 20:44:21	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 20:44:32	monochrom	onoes
2013-09-09 20:44:41	ReinH	applikativ: so please explain how it's bad, given that it's the definition used by Prelude?
2013-09-09 20:45:10	elliott	you can define a better fmap than liftM for some types.
2013-09-09 20:45:18	ReinH	elliott: yes, asolutely
2013-09-09 20:45:22	ReinH	but it's not *bad*
2013-09-09 20:45:30	donri	...but fmap = liftM would be better than no instance, surely
2013-09-09 20:45:59	ReinH	donri: but once you define it for all Monad m as liftM
2013-09-09 20:46:02	ReinH	you no longer get to choose
2013-09-09 20:46:03	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-09 20:46:07	donri	any other definition is just gonna be an optimization, yeah? can come later
2013-09-09 20:46:16	donri	ReinH: that doesn't work though
2013-09-09 20:46:16	ReinH	donri: no, once you say instance Monad m => Functor m
2013-09-09 20:46:24	ReinH	you can't then say "oh but this monad is special"
2013-09-09 20:46:36	donri	ReinH: that instance will conflict with any other instance
2013-09-09 20:46:40	jfischoff	^ this
2013-09-09 20:46:43	ReinH	donri: yes, that's what I'm saying
2013-09-09 20:46:53	donri	ReinH: (not just for monads)
2013-09-09 20:47:04	johnw	@tell heatsink Remember that code I showed you using async and wait?  Even simpler: do { (hout,herr) <- createProc ; concurrently (gather hout) (gather herr) }
2013-09-09 20:47:04	lambdabot	Consider it noted.
2013-09-09 20:47:08	<--	Palmik (~palmik@120-49-80-78.tmcz.cz) has quit (Quit: Lost terminal)
2013-09-09 20:47:13	ReinH	donri: yes, that's why you can't define instance Monad m => Functor m
2013-09-09 20:47:23	ReinH	and why fmap = liftM is not better than no instance
2013-09-09 20:47:37	donri	ReinH: i was suggesting it on a per-instance case
2013-09-09 20:47:47	-->	codesoup (~codesoup@69.196.132.244) has joined #haskell
2013-09-09 20:47:59	ReinH	donri: functor instances are defined on plenty of monad instances
2013-09-09 20:48:10	-->	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has joined #haskell
2013-09-09 20:48:13	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 20:48:13	ReinH	Functor IO is defined as liftM, although it's inlined
2013-09-09 20:48:15	<--	refried_ (~refried_@lawn-143-215-127-135.lawn.gatech.edu) has quit (Quit: Computer has gone to sleep.)
2013-09-09 20:48:17	donri	ie. better to add an instance with liftM than to refrain from adding an instance at all before you know the best definition possible
2013-09-09 20:49:11	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 20:49:19	-->	mkscrg (~mkscrg@38.88.174.106) has joined #haskell
2013-09-09 20:49:40	donri	ReinH: then aren't you answering your own question? <ReinH> Is there a principled reason to not define fmap f x = x >>= (return . f) for all monads?
2013-09-09 20:49:51	ReinH	donri: yes, I am :) I just needed to think it through.
2013-09-09 20:49:51	<--	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Quit: Leaving.)
2013-09-09 20:49:56	donri	:)
2013-09-09 20:49:57	donri	cool
2013-09-09 20:50:20	edwardk	ReinH: how would one do that definition?
2013-09-09 20:50:24	ReinH	applikativ: I'm seriously confused here. fmap is often recursive, e.g., on any recursive data type (List, Tree, etc)
2013-09-09 20:50:30	-->	Sonarpulse (~user@unaffiliated/sonarpulse) has joined #haskell
2013-09-09 20:50:34	ReinH	edwardk: one wouldn't :)
2013-09-09 20:50:35	<--	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has quit (Client Quit)
2013-09-09 20:50:41	edwardk	Sonarpulse: bytes 0.12 is released
2013-09-09 20:50:47	Sonarpulse	saw, yay!
2013-09-09 20:50:59	Sonarpulse	noticed that url in readme is analytics/bytes
2013-09-09 20:51:01	ReinH	edwardk: hard to miss if you're in #haskell-lens :p
2013-09-09 20:51:16	Sonarpulse	not ekmett/bytes
2013-09-09 20:51:36	Sonarpulse	for Travis
2013-09-09 20:51:43	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-09 20:52:07	<--	_oio_ (~kenneth@186.83.255.243) has quit (Quit: Konversation terminated!)
2013-09-09 20:52:08	edwardk	Sonarpulse: patch! =) it used to be housed under the analytics project but then nobody could find it
2013-09-09 20:52:11	applikativ	ReinH: right, but e.g. Stream is not a recursive type; fmap is not defined recursively; neither is concatMap/=<< in fact but it's a gruesome nightmare in which a Stream is itself used to represent the state of the stream
2013-09-09 20:52:16	Sonarpulse	ok
2013-09-09 20:52:17	edwardk	so i went and pulled most of them back into my own account
2013-09-09 20:52:22	-->	marsam (~mario@190.222.252.106) has joined #haskell
2013-09-09 20:52:30	edwardk	which is ironic from a finding perspective, because i have _way_ too many repositories
2013-09-09 20:52:36	<--	edvo (~edvo@tmo-111-88.customers.d1-online.com) has quit (Ping timeout: 246 seconds)
2013-09-09 20:52:51	ReinH	applikativ: I'm just trying to understand why you called the definition bad, and why you said
2013-09-09 20:52:54	ReinH	applikativ : >>= can be recursive while fmap is not, for one thing
2013-09-09 20:54:18	-->	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has joined #haskell
2013-09-09 20:54:23	mkscrg	all, is there consensus on a library for cryptographic hashes (sha, etc.)?
2013-09-09 20:54:38	<--	aupiff (~aupiff@67-194-59-28.wireless.umnet.umich.edu) has quit (Ping timeout: 240 seconds)
2013-09-09 20:54:39	Clint	no, but cryptohash is pretty good
2013-09-09 20:54:45	applikativ	ReinH: right, I think that Data.Vector....Stream.map f = concatMap (singleton . f) looks like it would be horrible
2013-09-09 20:54:50	edwardk	mkscrg: there are several out there, and i'm likely to add to the pile soon
2013-09-09 20:54:55	Sonarpulse	edwardk: readme fixed
2013-09-09 20:55:00	edwardk	Sonarpulse: thx
2013-09-09 20:55:02	Sonarpulse	np
2013-09-09 20:55:12	Sonarpulse	cabal ignores readme right?
2013-09-09 20:55:14	Sonarpulse	*hackage
2013-09-09 20:55:20	edwardk	Sonarpulse: yeah
2013-09-09 20:55:30	ReinH	applikativ: yes, there may certianly be more efficient definitions than fmap = liftM for some instances
2013-09-09 20:55:31	Clint	edwardk: what are you adding?
2013-09-09 20:55:33	edwardk	Sonarpulse: i won't re-release for this, but its nice to have the docs updated
2013-09-09 20:55:37	applikativ	ReinH: this may not be the best example, it would just surprise me if a definition of fmap in the styleof liftM would be rational
2013-09-09 20:55:42	mkscrg	edwardk: fair enough. put differently, is cryptohash a reasonable choice?
2013-09-09 20:56:00	applikativ	ReinH: this is one of the reasons why Functor => Monad is important
2013-09-09 20:56:16	applikativ	though i guess they could let us implement liftM ourselves
2013-09-09 20:56:17	edwardk	Clint: now that i have a nice theory for comonadic folds i can make 'digests' just be a left fold that you can partially feed or extract from, so the API for a cryptographic hash becomes one definition
2013-09-09 20:56:28	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-09 20:56:31	Clint	cool
2013-09-09 20:56:33	Sonarpulse	oh good
2013-09-09 20:56:48	ReinH	edwardk: that's cool :)
2013-09-09 20:57:00	ReinH	edwardk: the idea of "resumable" folds is pretty neat
2013-09-09 20:57:15	<--	james-ubc (~james@206.87.195.0) has quit (Ping timeout: 260 seconds)
2013-09-09 20:57:15	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-09 20:57:18	edwardk	Clint: with Folds you could just use 'run [1,2,3] crc32'         or 'run [3] $ run [1,2] $ duplicate crc32'   and get the same answer
2013-09-09 20:57:35	Clint	nice
2013-09-09 20:57:39	<--	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-09-09 20:57:52	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-09-09 20:57:53	donri	http://beta.hackage.haskell.org/user/EdwardKmett it almost looks like a short list when presented this way
2013-09-09 20:57:54	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Max SendQ exceeded)
2013-09-09 20:58:02	Sonarpulse	then it's not such a big such deal that I missed the release
2013-09-09 20:58:07	Sonarpulse	g2g
2013-09-09 20:58:15	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-09 20:58:22	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Remote host closed the connection)
2013-09-09 20:58:24	edwardk	donri: hah
2013-09-09 20:58:29	ReinH	donri: why am I not using Hackage 2? huh
2013-09-09 20:58:54	<--	Desheng (~Desheng@166.181.66.136) has quit (Ping timeout: 245 seconds)
2013-09-09 20:59:24	ReinH	edwardk: now I want to write an editor with rope
2013-09-09 20:59:29	ReinH	damn you
2013-09-09 20:59:37	edwardk	ReinH: don't bother. rope is old. =)
2013-09-09 20:59:41	ReinH	edwardk: but still :p
2013-09-09 20:59:55	edwardk	the version of the ropes in trifecta is better
2013-09-09 21:00:06	applikativ	somehow i think Hackage 2 is conceptually out of date, now that its' becoming real ...
2013-09-09 21:00:06	-->	Desheng (~Desheng@166.181.66.136) has joined #haskell
2013-09-09 21:00:07	ReinH	k
2013-09-09 21:00:39	applikativ	why do i need it, i would rather install things from suitably tagged repos on github somehow
2013-09-09 21:01:06	jfischoff	speaking of old, edwardk do you still use reducers?
2013-09-09 21:01:06	donri	yeah let's force everyone to depend on git and github
2013-09-09 21:01:25	applikativ	donri: admittedly that's disgusting
2013-09-09 21:01:28	Heffalump	you could view git as a software distribution mechanism - cabal upload = git push
2013-09-09 21:01:41	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 246 seconds)
2013-09-09 21:01:42	edwardk	jfischoff: not very much. i've been trying to find a more coherent version of the ideas in it, this why lens has Fold and why i'm playing with folds. ;)
2013-09-09 21:01:47	Heffalump	(I mean take the tarball, untar it, commit)
2013-09-09 21:01:48	donri	Heffalump: but why git at all, then? :p
2013-09-09 21:01:52	edwardk	they were just a little too awkward to use
2013-09-09 21:01:56	<--	anRch (~markmilli@ip-64-134-42-37.public.wayport.net) has quit (Quit: anRch)
2013-09-09 21:01:57	applikativ	donri: on the other hand almost everything on hackage is inaccessible to patches; so it might as well be thrown out
2013-09-09 21:01:57	 *	jfischoff nods
2013-09-09 21:02:18	ReinH	edwardk: so what happened to tropical semiring when you moved over to reducers? I couldn't figure out if it was a reducer.
2013-09-09 21:02:25	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-09 21:02:37	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 256 seconds)
2013-09-09 21:02:42	edwardk	jfischoff: http://hackage.haskell.org/packages/archive/folds/0.3/doc/html/Data-Fold.html#t:M captures the current notion of a reducer i kind of like
2013-09-09 21:02:47	jfischoff	the nice thing about reducers is it makes explicit the idea that some monoids have elements, which is captured anywhere else that I know of
2013-09-09 21:03:07	edwardk	ReinH: monoids < 1.3.5 or so was a bit monolithic. i went to break it up and never finished
2013-09-09 21:03:09	jfischoff	s/is/isn't
2013-09-09 21:03:12	donri	applikativ: i'm not sure what you're sayng
2013-09-09 21:03:17	ReinH	edwardk: ah. You bastard. ;)
2013-09-09 21:03:18	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-09 21:03:29	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-09 21:03:36	ReinH	jfischoff: "some monoids have elements"?
2013-09-09 21:03:47	edwardk	ReinH: i got far enough to split out the compression monoids/generators into 'compressed' but thats about it
2013-09-09 21:03:57	applikativ	donri: github can tell me if someone has patched a repo someone else has forgotten about; this alone makes it 200X as valuable as hackage which is basically an immense pile of things that dont build wont build, whose users have basically spammed our system etc
2013-09-09 21:04:08	ReinH	edwardk: well I found your old version and ported it over so it's all good ;)
2013-09-09 21:04:09	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-09 21:04:11	edwardk	reducers was an attempt to capture the more liberal notion of a semigroup reducer rather than require a monoidal reducer.
2013-09-09 21:04:11	jfischoff	ReinH: feel free to find another way to say it
2013-09-09 21:04:15	applikativ	40% of hackage is spam from 3+ years ago
2013-09-09 21:04:17	johnw	reducers!
2013-09-09 21:04:17	<--	nettsundere (~nettsunde@93.185.184.116) has quit (Quit: nettsundere)
2013-09-09 21:04:21	johnw	i was just recommending it to someone today
2013-09-09 21:04:24	<--	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has quit (Remote host closed the connection)
2013-09-09 21:04:30	edwardk	this is captured in 'folds' as M1, while the old notion of a reducer is 'M'
2013-09-09 21:04:38	edwardk	the names could use some work ;)
2013-09-09 21:04:38	ReinH	jfischoff: I would if I understood what you are saying :)
2013-09-09 21:04:39	johnw	i erroneously thought it offered O(1) snoc on regular lists, but was proven wrong reading the code
2013-09-09 21:04:48	jfischoff	oh well
2013-09-09 21:04:51	donri	applikativ: hackage 1 works like that, though. (but not hackage 2)
2013-09-09 21:04:53	ReinH	jfischoff: which I assume is my fault :)
2013-09-09 21:05:05	edwardk	johnw: sadly no magic snoc
2013-09-09 21:05:13	donri	applikativ: cabal unpack; cabal sdist; cabal upload; view "recent" log
2013-09-09 21:05:16	jfischoff	ReinH: you generours :)
2013-09-09 21:05:19	johnw	edwardk: well, I wasn't expecting *that* much magic, just a dlist under the hood
2013-09-09 21:05:20	jfischoff	err your
2013-09-09 21:05:25	applikativ	donri oh i don't have get hal daume's permission to get WordNet to compile?
2013-09-09 21:05:29	ReinH	jfischoff: now I'm not so sure ;)
2013-09-09 21:05:37	-->	rmunroe (~Randall@aram.xkcd.com) has joined #haskell
2013-09-09 21:05:38	--	rmunroe is now known as Randall
2013-09-09 21:05:39	donri	applikativ: technically no, not currently
2013-09-09 21:05:39	<--	Bluuu (a@unaffiliated/bluuu) has quit (Ping timeout: 264 seconds)
2013-09-09 21:05:40	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-09-09 21:05:45	ReinH	roconnor: ping
2013-09-09 21:05:56	--	Randall is now known as rmunroe
2013-09-09 21:06:01	-->	edvo (~edvo@141.30.247.240) has joined #haskell
2013-09-09 21:06:03	applikativ	donri: right, the while idea is no good. it is too bound up with rights
2013-09-09 21:06:10	jfischoff	So edwardk have you put much thought into a substitution friendly Free?
2013-09-09 21:06:13	edwardk	johnw: note: snoccing a d-list violates its invariants as i recall
2013-09-09 21:06:21	donri	applikativ: the "while" idea?
2013-09-09 21:06:25	jfischoff	also I don't get M on first glance
2013-09-09 21:06:31	johnw	edwardk: by dlist snoc, I meant ++[x], that shouldn't violate anything
2013-09-09 21:06:34	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Quit: Leaving)
2013-09-09 21:06:39	-->	skeet70 (~skeet70@host-69-146-87-119.bzm-mt.client.bresnan.net) has joined #haskell
2013-09-09 21:06:58	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-09 21:07:01	applikativ	donri: sorry. right this is why the hackage idea is no good. everything is in the control of dead people like hal daume
2013-09-09 21:07:08	edwardk	johnw: it violates the assumption that dlist x . dlist y == dlist (x ++ y)
2013-09-09 21:07:16	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 21:07:22	donri	anyway git for packages encourages ditching version management. cf vim addons in modern times
2013-09-09 21:07:22	jfischoff	I guess you M ? unit append m
2013-09-09 21:07:24	edwardk	the monoid homomorphism breaks
2013-09-09 21:07:28	jfischoff	err you have
2013-09-09 21:07:33	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-09 21:07:35	edwardk	but you can use the unit append
2013-09-09 21:07:42	jfischoff	not sure what m -> b is
2013-09-09 21:07:52	donri	applikativ: but it isn't?
2013-09-09 21:07:52	johnw	i don't quite follow, I was thinking of unit append
2013-09-09 21:07:55	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Quit: WeeChat 0.4.1)
2013-09-09 21:08:00	-->	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-09 21:08:05	edwardk	what i mean to say is that a dlist that takes the input list, and appends rather than prepends violates the assumption
2013-09-09 21:08:12	donri	applikativ: anyone can upload anything to any package name in hackage 1
2013-09-09 21:08:14	johnw	the only magic I was expecting was for reducers to guarantee O(n) at reduction time
2013-09-09 21:08:21	edwardk	appending with (x:)  is fine
2013-09-09 21:08:22	applikativ	donri: yes, but it's wrong
2013-09-09 21:08:35	applikativ	donri: because it's a publication system
2013-09-09 21:08:46	donri	applikativ: yes, it is. not sure what you're suggesting that would be different, though :)
2013-09-09 21:08:47	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-09 21:09:15	ReinH	donri: well, authentication might be nice ;)
2013-09-09 21:09:15	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-09 21:09:31	ReinH	signed packages?
2013-09-09 21:09:39	johnw	edwardk: if both dlists and Codensity work by right-associating the underlying operation, and if both Yoneda and Codensity are kan extensions, can I think of Yoneda as a right-association too?
2013-09-09 21:09:47	donri	ReinH: that's all part of hackage 2 or coming
2013-09-09 21:09:51	applikativ	donri: on github i can make public a patched version of a package even against the wil of the original author
2013-09-09 21:09:53	ReinH	donri: good :)
2013-09-09 21:10:02	<--	Mortomes (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 245 seconds)
2013-09-09 21:10:04	ReinH	applikativ: no one is stopping you from using haskell libraries from github
2013-09-09 21:10:14	applikativ	I do
2013-09-09 21:10:18	johnw	Yoneda seems to be more like a distributive operation than a re-association
2013-09-09 21:10:22	-->	cic (~cic@c-1180e555.012-145-6c6b7013.cust.bredbandsbolaget.se) has joined #haskell
2013-09-09 21:10:25	donri	applikativ: so what you actually want is to have the user name part of the package name
2013-09-09 21:10:40	applikativ	huh?
2013-09-09 21:10:52	-->	exFalso (~exfalso@188-143-18-52.pool.digikabel.hu) has joined #haskell
2013-09-09 21:10:54	applikativ	i want a system that is not hostage to people who have left the community
2013-09-09 21:11:03	<--	edvo (~edvo@141.30.247.240) has quit (Quit: Leaving)
2013-09-09 21:11:04	donri	i don't see how git would help
2013-09-09 21:11:08	applikativ	but more especially people who cant decide if they have
2013-09-09 21:11:33	applikativ	donri: i push patched hackage garbage to github for newbies on here about 4 times a day
2013-09-09 21:11:35	-->	tomato (~lump@94.197.120.227.threembb.co.uk) has joined #haskell
2013-09-09 21:11:38	ReinH	donri: git helps in one concrete way: cryptologically verified payload contents and history
2013-09-09 21:11:49	donri	in hackage 2 you can still upload a fork with a new name, or, convince an admin the package is unmaintained and have it transferred to you
2013-09-09 21:11:50	exFalso	Hi, is there a way to update cabal dependencies in .cabal? When i 'cabal init' it will automatically derive the dependencies and insert them in the .cabal, can i update this subsequently?
2013-09-09 21:11:52	edwardk	johnw: yes. just going back to my mis-targeted point for a second: DList a = Endo [a] -- but DLists are covariant and Endo [a] is invariant, having a in both positive and negative position. the correctness of this hinges on the fact that that Endo [a] can always be passed [] and manipulated. the ability to pass it [] hinges in the ability that it only prepends.  now (xs++) . (x:)   is a perfectly valid dlist that snoc's x , but
2013-09-09 21:11:53	edwardk	 if you just look at the Endo [a] type you can make bad inhabitants (\xs -> xs ++ [x]) which have the DList a type but which aren't valid dlists is all.
2013-09-09 21:12:22	ReinH	donri: I don't know what Hackage 2's security model is, but if it actually has one then that would be a marked improvement :)
2013-09-09 21:12:23	kuribas	exFalso: cabal update?
2013-09-09 21:12:24	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-09 21:12:24	applikativ	donri, this is hopeless paperwork, it is out of date
2013-09-09 21:12:33	johnw	edwardk: ah, I see what you mean now, thanks for explaining that
2013-09-09 21:12:33	edwardk	johnw: that is all i was saying off hand, before my attempt to say that got confused with being a criticism of dlists in general
2013-09-09 21:12:52	exFalso	kuribas: afaik that only downloads the package list from hackage?
2013-09-09 21:12:54	sm	exFalso: update them by hand. The packdeps website or command-line tool, or cabal-audit tool, will warn you of outdated deps
2013-09-09 21:13:03	johnw	I do tend to use Endo to make ad hoc dlists
2013-09-09 21:13:07	-->	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has joined #haskell
2013-09-09 21:13:08	--	apples is now known as Guest16417
2013-09-09 21:13:08	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 240 seconds)
2013-09-09 21:13:19	applikativ	donri: you really not thinking how many new users are lost because they cant install something last uploaded in Mar 2011
2013-09-09 21:13:26	edwardk	codensity right associates binds, yoneda 'fuses' fmaps (and probably right associates them)
2013-09-09 21:13:29	applikativ	donri: i think about 20 a day
2013-09-09 21:13:34	elliott	edwardk: and the condition that makes an Endo [a] a valid DList is naturality!
2013-09-09 21:13:35	donri	applikativ: the only reason your github model would "solve" that is because your user name is part of the package name. applicativ/my-forked-package
2013-09-09 21:13:35	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-09 21:13:42	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-09 21:13:45	donri	applikativ: this is equivalent to uploading applicative-my-forked-package to hackage
2013-09-09 21:13:50	johnw	anyone know how to mirror Hackage 2 yet?
2013-09-09 21:13:52	exFalso	sm: hmm thanks, i thought there must be an existing automated way of doing it seeing as it does it at 'cabal init'
2013-09-09 21:13:53	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-09 21:14:08	sm	exFalso: not yet, I think
2013-09-09 21:14:12	johnw	I only use my local Hackage mirror these days; not only does it always work, it's much faster when rebuilding the world
2013-09-09 21:14:32	applikativ	donri: i dont a darn about github, there must be a record, on the webpage pointing to patched version completely that can exist with out and against the will of the socalled original authro
2013-09-09 21:14:33	jfischoff	is there any way to make composition functor (:.:) that composes with itself? Like (:.:) :.: (:.:)?
2013-09-09 21:14:39	applikativ	this is the only feature of github i refer to
2013-09-09 21:14:56	applikativ	donri: if everything on hackage were also on github, then you could track this easily.
2013-09-09 21:15:02	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-09 21:15:09	donri	applikativ: i don't know of any such feature of github, except the "fork network". is that what you're talking about?
2013-09-09 21:15:16	-->	cesc (~cesc@ip-81-210-251-88.unitymediagroup.de) has joined #haskell
2013-09-09 21:15:18	sm	exFalso: at cabal init time, you have no code, so it can choose some deps without thinking too hard :)
2013-09-09 21:15:31	kuribas	:t (.) . (.)
2013-09-09 21:15:32	lambdabot	(b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
2013-09-09 21:15:42	applikativ	donri: yes, the fork network images are a crucial part of the github api
2013-09-09 21:16:00	ReinH	donri: I *think* what applikativ wants is a security model with strong identity and integrity guarantees.
2013-09-09 21:16:17	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-09 21:16:24	ReinH	You don't need github to get these, but it certainly is an option
2013-09-09 21:16:32	edwardk	roconnor: do you remember the link for the paper that says that if there is both a left fold and a right fold that can derive an answer then there is a monoid?
2013-09-09 21:16:34	<--	tomato (~lump@94.197.120.227.threembb.co.uk) has quit (Quit: Leaving)
2013-09-09 21:16:36	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-09 21:16:41	-->	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has joined #haskell
2013-09-09 21:16:51	applikativ	the impediments to updating dead code are simply too great.
2013-09-09 21:16:57	roconnor	edwardk, that doesn't sound familiar to me.
2013-09-09 21:16:58	applikativ	it is an academic model
2013-09-09 21:17:10	ReinH	roconnor: hai
2013-09-09 21:17:14	roconnor	hi
2013-09-09 21:17:17	edwardk	roconnor: shucks
2013-09-09 21:17:22	donri	personally i think the user centric view of github is a bad thing
2013-09-09 21:17:26	 *	roconnor is in bern
2013-09-09 21:17:28	edwardk	i just can't remember the name of the paper for the life of me and i wanted to cite it
2013-09-09 21:17:33	ReinH	roconnor: I was reading your ICFP 2010 portmortem
2013-09-09 21:17:52	roconnor	ReinH, which contest was that?
2013-09-09 21:17:55	donri	as evidenced by edwardk's problem of where to put "his" stuff
2013-09-09 21:17:55	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-09 21:17:56	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-09 21:18:02	ReinH	roconnor: the engines and fuels one
2013-09-09 21:18:06	johnw	edwardk: if Yenoda is basically doing: fmap f (fmap g (fmap h xs)) => fmap (f . g . h) xs, there should be a way to write that which shows it's a left-to-right association mapping...
2013-09-09 21:18:15	<--	Bluuu (a@unaffiliated/bluuu) has quit (Ping timeout: 260 seconds)
2013-09-09 21:18:20	-->	danald (~danald@g231084045.adsl.alicedsl.de) has joined #haskell
2013-09-09 21:18:27	roconnor	ReinH, for orbits?
2013-09-09 21:18:33	donri	or that there's a "lens" organization but lens itself is under ekmett
2013-09-09 21:18:42	ReinH	roconnor: you had to produce engines and fuels that would "power" them
2013-09-09 21:18:45	<--	scripty (~scripty@117.192.169.26) has quit (Read error: Connection reset by peer)
2013-09-09 21:18:49	ReinH	using ternary gates and encodings
2013-09-09 21:18:54	roconnor	ReinH, oh right, the cars
2013-09-09 21:18:57	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:4e3:c6ed:c60b:637c) has joined #haskell
2013-09-09 21:18:58	ReinH	yeah
2013-09-09 21:19:13	ReinH	(it was secretly a way to get programmers to generate relative termination problems)
2013-09-09 21:19:31	ReinH	roconnor: http://cl-informatik.uibk.ac.at/workspace/ajsw10/slides/BF.pdf
2013-09-09 21:19:33	edwardk	johnw: well, that is happening because all it is doing it is accumulating it in between the argument (a -> r) of forall r. (a -> r) -> f r and the actual fmap that gives you the f r at the end
2013-09-09 21:19:40	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-09 21:19:43	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-09-09 21:19:52	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-09 21:19:53	<--	marsam (~mario@190.222.252.106) has quit (Quit: WeeChat 0.4.1)
2013-09-09 21:19:54	johnw	right
2013-09-09 21:19:56	ReinH	roconnor: That was one of my first "using Haskell in anger" experiences :)
2013-09-09 21:20:08	roconnor	ReinH, :)
2013-09-09 21:20:14	applikativ	donri: the fact is at least 80 of hackage is simply uninstallable; a different idea could get rid of this in a couple of weeks
2013-09-09 21:20:27	ReinH	roconnor: we had a team of four, including a mathematician with a phd specialty in linear algebra
2013-09-09 21:20:30	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (Quit: kstuart)
2013-09-09 21:20:30	ReinH	purely by coincidence
2013-09-09 21:20:40	ReinH	roconnor: who had an appendicitis on day 1. :/
2013-09-09 21:20:50	johnw	edwardk: right
2013-09-09 21:20:53	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-09 21:21:03	luite_	ReinH: sabotage!
2013-09-09 21:21:05	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 21:21:06	ReinH	roconnor: he followed along from the hospital and would call us with suggestions
2013-09-09 21:21:09	roconnor	ReinH, I really like their encoding
2013-09-09 21:21:10	ReinH	which would save us hours of work
2013-09-09 21:21:14	johnw	edwardk: i'm just wondering why the behavior appears different in character from dlist and codensity, with which it is so intimately related
2013-09-09 21:21:15	-->	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has joined #haskell
2013-09-09 21:21:17	ReinH	roconnor: it was a very pretty problem
2013-09-09 21:21:17	monochrom	sabotage is my thought too :)
2013-09-09 21:21:37	ReinH	roconnor: writing the ternary circuit generator was fun
2013-09-09 21:22:02	ReinH	we put quite a bit of effort into circuit minimization
2013-09-09 21:22:09	edwardk	well, yoneda fuses fmap, codensity fuses (>>=)
2013-09-09 21:22:27	johnw	does it fuse >>=, or just right-associate it?  if it's fusion, then that answers my question
2013-09-09 21:22:33	DRiKE	anyone experience with cross compiling ghc for the raspberry pi (host system is Arch 64 in my case). arm-linux-gnueabihf-nm complains: 'includes/dist-derivedconstants/header/tmp.o: File format not recognized'
2013-09-09 21:22:35	ReinH	roconnor: we hand coded some basic operations and then wrote a heuristic solver
2013-09-09 21:22:40	edwardk	fusing is right associating there =)
2013-09-09 21:22:42	DRiKE	not sure how to proceed
2013-09-09 21:22:47	johnw	ah, hmm
2013-09-09 21:22:56	edwardk	it makes all the (>>=)'s happen at once
2013-09-09 21:22:56	ReinH	roconnor: what I love about ICFP competitions is that each individual piece is that interesting, and they have so many layers
2013-09-09 21:22:57	johnw	so it's like combining the behaviors of dlist and yoneda, in a sense
2013-09-09 21:23:03	edwardk	yeah
2013-09-09 21:23:05	donri	applikativ: personally i find it rather hellish with vim addons to figure out which github fork is the one you should use, and if that one with a recent fix is just a one-off get-it-to-work that's gonna be even more unmaintained than the original
2013-09-09 21:23:07	johnw	cool
2013-09-09 21:23:20	ReinH	roconnor: I think our code is still on github somewhere
2013-09-09 21:23:23	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:4e3:c6ed:c60b:637c) has quit (Ping timeout: 246 seconds)
2013-09-09 21:23:41	johnw	@tell sclv I think I found the connection between Yoneda and "fold functions": Mendler algebras expressed using Coyoneda
2013-09-09 21:23:42	lambdabot	Consider it noted.
2013-09-09 21:23:52	applikativ	donri yes the matter needs to be systematized i dont care about github of course
2013-09-09 21:23:54	ReinH	roconnor: oh btw we figured out that the server allowed HTTP basic auth so we used shell scripts and curl to ship solutions to the server :D
2013-09-09 21:23:58	ReinH	saved us a LOT of time
2013-09-09 21:24:02	edwardk	codensity f a is 'bigger' than f but it is useful in that if f has an expensive normalization step on left associated binds then you never pay it. on the other hand it mean you get no benefit of the normalization until the end
2013-09-09 21:24:03	-->	tdp93422 (4b2d007e@gateway/web/freenode/ip.75.45.0.126) has joined #haskell
2013-09-09 21:24:05	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 246 seconds)
2013-09-09 21:24:08	RichyB	ReinH, hahah, cool! One of the team members is a linear algebraist throwing suggestions in from the hospital in which he is possibly-not-dying. That's so charmingly William Gibson. :D
2013-09-09 21:24:11	<--	meretrix (~user@unaffiliated/meretrix) has quit (Remote host closed the connection)
2013-09-09 21:24:15	donri	applikativ: ah
2013-09-09 21:24:18	applikativ	donri: good luck waiting for Prof. Hal Daume to tell you which 'fork' of WordNet wins his approval
2013-09-09 21:24:21	ReinH	RichyB: I know. It was epic! (He was fine)
2013-09-09 21:24:31	edwardk	hence why Codensity f is always a 'win' for free monads… there is no normalization!
2013-09-09 21:24:32	-->	meretrix (~user@unaffiliated/meretrix) has joined #haskell
2013-09-09 21:24:37	RichyB	I love it when life goes temporarily all cyberpunk.
2013-09-09 21:24:44	johnw	edwardk: in general you don't recommend expressing effects using Codensity (Free f), but rather to use monad transformers?
2013-09-09 21:24:51	johnw	i've been reading your SO comments on that subject here and there
2013-09-09 21:24:53	ReinH	RichyB: needs trailer voiceover
2013-09-09 21:25:04	ReinH	"A race against time. Four men..."
2013-09-09 21:25:17	ReinH	"When all that you know is wrong."
2013-09-09 21:25:23	<--	Kaini1123 (~kaini@078132037033.public.t-mobile.at) has quit (Quit: Leaving)
2013-09-09 21:25:27	arnsholt	applikativ: What, you mean you use other resources than the Wall Street Journal? I'm shocked, I tell you, shocked! =p
2013-09-09 21:25:31	tdp93422	is there a native implementation of gzip (zlib) on hackage? It seems like everything I find uses FFI to the C libraries....
2013-09-09 21:25:47	ReinH	edwardk: ^
2013-09-09 21:25:50	roconnor	ReinH, really?  that would have been so much easier
2013-09-09 21:25:51	edwardk	johnw: well, i tend to prefer looking at (MonadState s m, MonadError e m) => e -> m s      than at some monolithic construction that is too big to express Reader and too small to express lazy Writer.
2013-09-09 21:25:56	ReinH	roconnor: yep! :D
2013-09-09 21:26:03	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-09 21:26:13	ReinH	roconnor: I started out writing a bunch of glue stuff in Ruby but it turns out bash and *nix tools were easier to use and faster
2013-09-09 21:26:19	geekosaur	tdp93422, gzip is not trivially reimplemented so I doubt it
2013-09-09 21:26:21	edwardk	johnw: passing in the monad transformer dictionaries _are_ the product of lawvere theories
2013-09-09 21:26:33	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-09-09 21:26:34	edwardk	they just come with a free implementation when you pick an instance
2013-09-09 21:26:35	tdp93422	Thanks /geekosaur
2013-09-09 21:26:40	johnw	edwardk: but not the coproduct?
2013-09-09 21:26:46	ReinH	roconnor: at one point we had out solver spitting out solutions into a directory and we would watch that directory for new files and then curl them
2013-09-09 21:26:46	edwardk	er coproduct
2013-09-09 21:26:51	edwardk	product of theories is easy
2013-09-09 21:26:52	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-09 21:26:56	ParahSailin	tdp93422: why not just use the c zlib?
2013-09-09 21:26:57	RichyB	tdp93422, I don't think so. I don't know of implementations of gzip in *any* language other than C, largely because zlib is so stable and it's been so long since anyone found a bug in it that *everyone* uses it through their local C FFI.
2013-09-09 21:27:04	<--	ttt-- (~ubuntu@94-225-100-152.access.telenet.be) has quit (Quit: Leaving)
2013-09-09 21:27:11	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-09 21:27:24	ParahSailin	theres probably a javascript implementation of gzip that lots of people use
2013-09-09 21:27:42	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-09 21:27:43	ParahSailin	just because people do lots of crazy stuff in javascript
2013-09-09 21:27:50	tdp93422	I wanted to write a program usable across linux, windows, and mac osx without dealing with libraries separately for each OS.
2013-09-09 21:27:50	-->	aupiff (~aupiff@c-69-136-131-33.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 21:27:59	edwardk	johnw: i find the classes a lot easier to reason about than the CPS'd lawvere theory stuff, and they have the benefit of not injecting my monad into a larger domain
2013-09-09 21:28:06	<--	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has quit (Ping timeout: 248 seconds)
2013-09-09 21:28:19	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-09 21:28:20	ReinH	roconnor: one of my absolute favorite things about the competition is that our engine solver had these parameters that constrained it, like maximum matrix size, maximum value to use, number of matrixes, etc
2013-09-09 21:28:36	-->	julmac (~no@q186.ip4.netikka.fi) has joined #haskell
2013-09-09 21:28:38	ReinH	roconnor: and we found that by varying these parameters, we could improve its ability to find solutions
2013-09-09 21:28:38	-->	scripty (~scripty@117.192.169.26) has joined #haskell
2013-09-09 21:28:42	roconnor	ReinH, you should do the ICFP 2006 contest
2013-09-09 21:28:48	sclv	johnw: neat. catching up on the scrollback now.
2013-09-09 21:28:51	edwardk	oleg's effect monad is too big to express Reader. It can only express State. Now, it can express reader.. but only by writing it as State that doesn't change State!
2013-09-09 21:28:58	ReinH	roconnor: but the parameters were pretty dependent, so it was hard to find local maximums in performance
2013-09-09 21:29:00	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-09 21:29:04	johnw	edwardk: that makes sense; though, does being the mtl maintainer mean I need to eat my salt grain? :)
2013-09-09 21:29:08	ReinH	roconnor: and we didn't *quite* have time to write a solver for the solver
2013-09-09 21:29:13	<--	hashcat (~chatzilla@27.242.4.115) has quit (Remote host closed the connection)
2013-09-09 21:29:19	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-09 21:29:28	ReinH	roconnor: so instead I wrote a benchmarking tool that would tell me the efficiency of each set of params and then I did some manual hill climbingh
2013-09-09 21:29:31	edwardk	johnw: you should know me well enough by now to know that if a better solution came along i'd drop the old one on the floor =P
2013-09-09 21:29:35	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-09 21:29:42	johnw	haha, yeah, that was purely teasing :)
2013-09-09 21:29:45	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-09 21:29:52	ReinH	roconnor: in my mind it was like tweaking knobs on an old piece of analog equipment
2013-09-09 21:29:56	ReinH	and it was awesome
2013-09-09 21:29:59	roconnor	:D
2013-09-09 21:30:17	ReinH	roconnor: I'll check out 2006
2013-09-09 21:30:24	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 256 seconds)
2013-09-09 21:30:27	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-09 21:30:40	edwardk	ICFP 2006's programming contest was amazing
2013-09-09 21:30:44	<--	julmuri (~no@206.190.145.86) has quit (Ping timeout: 246 seconds)
2013-09-09 21:30:47	ReinH	cool :D
2013-09-09 21:30:55	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 21:30:56	-->	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has joined #haskell
2013-09-09 21:30:59	edwardk	by far the best PL-theory centric contest ever
2013-09-09 21:31:02	ReinH	we should get together and form a super team for the next one
2013-09-09 21:31:09	ReinH	I will provide moral support
2013-09-09 21:31:23	--	Mortomes is now known as Guest38988
2013-09-09 21:31:25	edwardk	i always forget about it til the weekend of the contest
2013-09-09 21:31:27	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 264 seconds)
2013-09-09 21:31:28	ReinH	no but seriously that would be epic
2013-09-09 21:31:34	edwardk	then sometimes i spend a few hours to just get the feel for the problem domain
2013-09-09 21:31:36	ReinH	if you are at all interested then I will bug you about it :)
2013-09-09 21:31:53	ReinH	last one just ran so it'll be a while
2013-09-09 21:31:55	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-09 21:31:55	edwardk	e.g. the orbital mechanics one was fun
2013-09-09 21:32:12	-->	MitchellSalad (40471a12@gateway/web/freenode/ip.64.71.26.18) has joined #haskell
2013-09-09 21:32:17	<--	ifthenelse (4c632e49@gateway/web/freenode/ip.76.99.46.73) has quit (Quit: Page closed)
2013-09-09 21:32:31	edwardk	optimizing it using hohmann transfers actually put me on the leaderboard for a while
2013-09-09 21:32:41	<--	aupiff (~aupiff@c-69-136-131-33.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 21:32:42	edwardk	then life intervened
2013-09-09 21:32:54	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-09 21:33:02	-->	poseid (~pmu@p5DCBF9D1.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 21:33:06	<--	exFalso (~exfalso@188-143-18-52.pool.digikabel.hu) has left #haskell
2013-09-09 21:33:21	roconnor	I have never got the hand of controling integer approximations of mechanics.
2013-09-09 21:33:28	<--	dabradley (bradley@nat/ibm/x-vrkwncfwcvnqhlmv) has quit (Ping timeout: 276 seconds)
2013-09-09 21:33:30	roconnor	I feel I need to learn some control theory
2013-09-09 21:33:38	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 21:33:43	MitchellSalad	hi, could someone please show me how to compose these two producers? http://lpaste.net/92802
2013-09-09 21:33:49	MitchellSalad	ima pipes newb
2013-09-09 21:33:50	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-09-09 21:33:53	-->	edvo (~edvo@tmo-111-88.customers.d1-online.com) has joined #haskell
2013-09-09 21:33:55	-->	aegis__ (~aegis@188.74.124.12) has joined #haskell
2013-09-09 21:33:59	-->	julmae (~no@206.190.145.94) has joined #haskell
2013-09-09 21:34:26	-->	dabradley (bradley@nat/ibm/x-klgcasirnxawbzwr) has joined #haskell
2013-09-09 21:34:27	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Client Quit)
2013-09-09 21:34:31	-->	xinming_ (~xinming@125.82.194.215) has joined #haskell
2013-09-09 21:34:35	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2013-09-09 21:34:39	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-09 21:34:40	<--	ibotty (~tob@91-64-188-219-dynip.superkabel.de) has left #haskell
2013-09-09 21:34:41	<--	aegis__ (~aegis@188.74.124.12) has quit (Remote host closed the connection)
2013-09-09 21:34:55	-->	JaRoel|4d (~jaroel|4d@2001:980:7133:1:496d:f545:a9a5:9a13) has joined #haskell
2013-09-09 21:35:37	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-09 21:35:50	ParahSailin	MitchellSalad: you want to feed the output of one into the input of another? then at least one of them cannot be a Producer
2013-09-09 21:35:55	donri	MitchellSalad: >> is composition for producers, no?
2013-09-09 21:36:05	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-09 21:36:20	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 246 seconds)
2013-09-09 21:36:23	<--	julmac (~no@q186.ip4.netikka.fi) has quit (Ping timeout: 245 seconds)
2013-09-09 21:36:26	levi	2006 ICFP contest was epic.
2013-09-09 21:36:34	applikativ	MitchellSalad: note that these producers produce one thing only. a capitalize 'a' for example
2013-09-09 21:36:37	MitchellSalad	say, main = runEffect $ for P.stdinLn duplicate
2013-09-09 21:36:38	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-09-09 21:36:49	MitchellSalad	im trying to both duplicate and capitalize the input
2013-09-09 21:37:14	MitchellSalad	so that "foo" becomes "FOO\nFOO"
2013-09-09 21:37:18	ParahSailin	MitchellSalad: thats gonna be at least a Pipe, not a Producer
2013-09-09 21:37:18	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-09 21:37:23	poseid	when I have a structue { a: '…', b: [ '123', '456'] }, what is the operation to filter a list of that structure on the properties in b?
2013-09-09 21:37:28	applikativ	MitchellSalad: doesn't the think you just typed work?
2013-09-09 21:37:45	MitchellSalad	applikativ: it does but there's no capitalize
2013-09-09 21:37:46	ParahSailin	await >>= \q -> yield q >> yield q
2013-09-09 21:37:46	<--	xinming (~xinming@125.82.197.176) has quit (Ping timeout: 256 seconds)
2013-09-09 21:38:16	donri	MitchellSalad: a mere producer can't transform a stream
2013-09-09 21:38:19	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 21:38:32	poseid	hmm.. probably I am looking for a reject
2013-09-09 21:38:37	MitchellSalad	not even when sequenced with for/~> ?
2013-09-09 21:38:51	statusfailed	Is there an easy way to print binary data to stdout?
2013-09-09 21:38:52	applikativ	god i have to go, but for (P.stdin >-> Pipes.map (Prelude.map toUpper) ) duplicate would be one way
2013-09-09 21:38:53	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Client Quit)
2013-09-09 21:39:07	-->	`^_^v (~nycs@ip-64-32-224-203.nyc.megapath.net) has joined #haskell
2013-09-09 21:39:15	statusfailed	I want to control the endianness ideally, but printing char8's one-by-one is fine for now
2013-09-09 21:39:28	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Ping timeout: 256 seconds)
2013-09-09 21:39:30	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 21:39:35	MitchellSalad	hm, alright thanks, ill keep stepping through this tutorial
2013-09-09 21:39:35	edvo	MitchellSalad: for cat $ \s -> let cap = map toUpper s in cap ++ "\n" ++ cap
2013-09-09 21:39:40	statusfailed	or do I mean Word8. hm.
2013-09-09 21:39:46	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 21:40:01	levi	statusfailed: You must mean Word8, because Char8 is not a type.
2013-09-09 21:40:05	edvo	MitchellSalad: i meant  in yield (cap ++ "\n" ++ cap)
2013-09-09 21:40:26	-->	cfricke_ (~cfricke@96.45.197.22) has joined #haskell
2013-09-09 21:40:41	MitchellSalad	I'm not seeing how this problem involves pipes, though. can't I just sequence these two producers together with ~>?
2013-09-09 21:40:43	statusfailed	levi: looks like ^^
2013-09-09 21:40:51	statusfailed	levi: is there a putWord8?
2013-09-09 21:41:01	MitchellSalad	similar to runEffect $ for stdinLn (duplicate ~> lift . putStrLn)
2013-09-09 21:41:05	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Disconnected by services)
2013-09-09 21:41:09	--	cfricke_ is now known as cfricke
2013-09-09 21:41:12	levi	statusfailed: Char8 is the name of a package that lets you treat Word8 values as Char, though.
2013-09-09 21:41:15	MitchellSalad	except that the second producer produces Char, not String
2013-09-09 21:41:33	levi	String is [Char]
2013-09-09 21:41:36	statusfailed	levi: yeah, that's what I was looking at
2013-09-09 21:41:37	MitchellSalad	right
2013-09-09 21:41:41	statusfailed	levi: Char is 32-bit Unicode though
2013-09-09 21:41:52	statusfailed	I want to write bytes to stdout directly
2013-09-09 21:42:16	identity	Do you guys have any recommendations for libraries on hackage for processing images? Jpeg, png, bmp maybe. It needs to expose and allow one to manipulate the pixels themselves.
2013-09-09 21:42:17	<--	nycs (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-09 21:42:47	-->	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has joined #haskell
2013-09-09 21:42:53	geekosaur	JuicyPixels?
2013-09-09 21:42:53	levi	When you put a Char into a Word8 via the Char8 package, it truncates it to a Word8.
2013-09-09 21:42:56	donri	identity: people seem to like JuicyPixels
2013-09-09 21:43:03	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Ping timeout: 240 seconds)
2013-09-09 21:43:06	<--	oleo (~oleo@xdsl-87-79-199-166.netcologne.de) has quit (Read error: Connection reset by peer)
2013-09-09 21:43:15	statusfailed	levi: I have the Word8 already, i'm trying to write audio samples to stdout
2013-09-09 21:43:20	donri	MitchellSalad: you might be right it might be possible with for / ~>
2013-09-09 21:43:22	<--	cesc (~cesc@ip-81-210-251-88.unitymediagroup.de) has quit (Quit: Leaving)
2013-09-09 21:43:53	-->	oleo (~oleo@xdsl-78-35-153-43.netcologne.de) has joined #haskell
2013-09-09 21:43:54	 *	hackagebot happy 1.18.11 - Happy is a parser generator for Haskell  http://hackage.haskell.org/package/happy-1.18.11 (SimonMarlow)
2013-09-09 21:43:54	levi	statusfailed: Ok, so you just need something to take Word8 -> IO () ?
2013-09-09 21:43:59	statusfailed	levi: yeah
2013-09-09 21:44:05	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-09 21:44:34	Raydiation	any idea why i get this: fatal error: IO.hs: No such file or directory
2013-09-09 21:44:35	<--	scripty (~scripty@117.192.169.26) has quit (Quit: Leaving)
2013-09-09 21:44:39	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (Remote host closed the connection)
2013-09-09 21:44:41	Raydiation	is this a haskell default file?
2013-09-09 21:44:59	Raydiation	src/Data/Vault/Lazy.hs:6:0:
2013-09-09 21:44:59	Raydiation	     fatal error: IO.hs: No such file or directory
2013-09-09 21:44:59	Raydiation	     #include "IO.hs"
2013-09-09 21:45:05	statusfailed	levi: I can cons it actually
2013-09-09 21:45:11	applikativ	identity: juicypixels is pure haskell so of course it's highly loveable
2013-09-09 21:45:12	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-09-09 21:45:13	geekosaur	wat
2013-09-09 21:45:15	levi	statusfailed: That's putStr from Data.ByteString
2013-09-09 21:45:36	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-09-09 21:45:49	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-09 21:45:58	applikativ	MitchellSalad: isn't it something like yield . Prelude.map toUpper ~> duplicate
2013-09-09 21:46:11	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-09-09 21:46:12	identity	I had seen juicypixels, but I wasn't sure if there was a favorite, so I decided to ask. Thanks! I'll try them juicy pixels
2013-09-09 21:46:22	statusfailed	levi: yeah, putStr (cons myWord8 null)
2013-09-09 21:46:25	statusfailed	which is totes gross :p
2013-09-09 21:46:40	monochrom	statusfailed: do you mind putStr (singleton x)? :)
2013-09-09 21:46:44	<--	perspectival1 (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-09 21:46:53	statusfailed	er, not null
2013-09-09 21:46:58	statusfailed	monochrom: that's what I wanted :D
2013-09-09 21:47:01	monochrom	empty :)
2013-09-09 21:47:03	ocharles	identity: there is devil too
2013-09-09 21:47:07	ocharles	(devil bindings, that is)
2013-09-09 21:47:09	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-09 21:47:29	MitchellSalad	applikativ: but I want to use a (Char -> Producer Char IO ())
2013-09-09 21:47:38	applikativ	man those devil things are a nightmare on os x. e.g. they only make 2 formats or something
2013-09-09 21:47:41	MitchellSalad	yield . Prelude.map toUpper is String -> Producer String
2013-09-09 21:47:55	-->	aupiff (~aupiff@c-69-136-131-33.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 21:48:07	applikativ	MitchellSalad: right, I got sidetracked by putting P.stdinLn in front in my mind
2013-09-09 21:48:08	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-09 21:48:25	--	Guest38988 is now known as Mortomes_
2013-09-09 21:48:28	applikativ	but doesnt yield.toUpper~>duplicate typecheck?
2013-09-09 21:48:29	<--	Mortomes_ (~Mortomes_@dhcp-089-099-142-125.chello.nl) has quit (Changing host)
2013-09-09 21:48:29	-->	Mortomes_ (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-09 21:48:37	donri	MitchellSalad: you could probably use P.toList[M]
2013-09-09 21:48:52	levi	statusfailed: You might also be interested in Data.Binary
2013-09-09 21:48:55	applikativ	i'm adopting a fake compressed style to make pipes seem sexy like lens
2013-09-09 21:49:04	edwardk	hhahahahah
2013-09-09 21:49:10	donri	MitchellSalad: although not the way you've structured this...
2013-09-09 21:49:43	-->	sxn_ (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-09 21:49:43	edwardk	clearly the key to lens' success was the elision of spaces making it socially acceptable to golf with
2013-09-09 21:49:50	statusfailed	levi: yes, this is pretty slow :p
2013-09-09 21:49:56	applikativ	yield.toUpper~>duplicate :: Producer Char m ()
2013-09-09 21:50:01	statusfailed	plus I need 24-bit little endian
2013-09-09 21:50:11	donri	MitchellSalad: i would probably change capitalize to a Pipe and then you can toList it
2013-09-09 21:50:20	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-09 21:50:22	<--	sxn (~sxn@mnch-4d0db4b7.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-09-09 21:50:51	applikativ	yield.toUpper~>duplicate :: Monad m => Char -> Producer Char m ()
2013-09-09 21:50:52	MitchellSalad	that may be the right way to do it, i have no idea, but having read only the Producer part of the pipes tutorial it does seem like a problem that can be solved using only producers
2013-09-09 21:51:01	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 21:51:58	levi	statusfailed: Data.Binary is almost certainly what you want if you are trying to control the byte-level representation of something in input/output streams.  Or something like Data.Binary, anyway.
2013-09-09 21:52:07	Elision	for some reason this channel highlights me a lot
2013-09-09 21:52:23	Elision	what is it with y'all and elision :?
2013-09-09 21:52:26	MitchellSalad	http://lpaste.net/92802
2013-09-09 21:52:29	applikativ	donri: why does he want to toList it? i missed something
2013-09-09 21:52:36	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-09-09 21:52:47	applikativ	elision++
2013-09-09 21:53:17	Elision	here and ##math
2013-09-09 21:53:19	Elision	weird
2013-09-09 21:53:19	tpsinnem	more sort-of-newbie questions: what's the standard way of getting a useful REPL session going for a haskell project with cabal-managed dependencies?
2013-09-09 21:53:29	applikativ	MitchellSalad: do you want to duplicate letters or lines?
2013-09-09 21:53:36	MitchellSalad	lines
2013-09-09 21:53:37	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 276 seconds)
2013-09-09 21:53:37	johnw	Elision: the reason being...
2013-09-09 21:53:51	sellout-	Elision: Does your client highlight on every “…”? ;)
2013-09-09 21:53:58	levi	statusfailed: It's got get/put functions for various size and endianness combinations, and a mechanism for building generic serialization to/from your higher-level types.
2013-09-09 21:54:15	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-09-09 21:54:16	applikativ	tpsinnem: well now theres 'cabal repl' in your 'cabal sandbox'ed directory
2013-09-09 21:54:18	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Ping timeout: 245 seconds)
2013-09-09 21:54:25	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Quit: Computer has gone to sleep.)
2013-09-09 21:54:31	applikativ	tpsinnem: not that i have figured out all theins and outs of it
2013-09-09 21:54:46	donri	MitchellSalad: i might be missing something i admit, but the obvious ways to do what you want is to either change capitalize to act on String, or, make them into Pipe so you get the proper compositions that pipes offer
2013-09-09 21:55:09	MitchellSalad	right, ok
2013-09-09 21:55:11	levi	I am loving cabal sandbox + add source
2013-09-09 21:55:51	MitchellSalad	yeah, if capitalize = yield . Prelude.map toUpper, then they would compose with ~>
2013-09-09 21:56:02	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 21:56:09	Elision	sellout-: people just use the word 'elision' a lot more than I'd expect
2013-09-09 21:56:11	applikativ	MitchellSalad: I TOLD YOU SO ;)
2013-09-09 21:56:20	Elision	for a channel of non-classics-majors
2013-09-09 21:56:20	MitchellSalad	i know!
2013-09-09 21:56:23	<--	ft (efftee@oldshell.chaostreff-dortmund.de) has quit (Quit: demons to some, angels to others)
2013-09-09 21:56:57	donri	MitchellSalad: runEffect $ stdinLn >-> toList capitalize >-> duplicate >-> stdoutLn
2013-09-09 21:56:58	-->	ft (efftee@oldshell.chaostreff-dortmund.de) has joined #haskell
2013-09-09 21:57:22	statusfailed	levi: I'm just using Word16s now, but it looks good, thank you :)
2013-09-09 21:57:38	<--	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Remote host closed the connection)
2013-09-09 21:57:50	<--	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has quit (Read error: Connection reset by peer)
2013-09-09 21:58:06	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-09-09 21:58:07	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Max SendQ exceeded)
2013-09-09 21:58:27	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 264 seconds)
2013-09-09 21:58:29	-->	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has joined #haskell
2013-09-09 21:58:34	tpsinnem	applikativ: thanks. i guess i'll have to update my cabal itself first though
2013-09-09 21:58:43	donri	MitchellSalad: actually that might not do what you want after all...
2013-09-09 21:58:46	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-09 21:59:00	-->	ashnur (~ashnur@79.117.76.15) has joined #haskell
2013-09-09 21:59:12	MitchellSalad	donri: i didnt try it, still reading the consumers part
2013-09-09 21:59:19	<--	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-09-09 21:59:19	MitchellSalad	anyways thanks for the help
2013-09-09 21:59:20	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 21:59:42	donri	MitchellSalad: also, it won't even type check because i had misread the type of toList
2013-09-09 21:59:46	donri	MitchellSalad: so ignore me
2013-09-09 21:59:47	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-09 22:00:08	<--	sepp2k (~sexy@g230250245.adsl.alicedsl.de) has quit (Quit: Leaving.)
2013-09-09 22:00:35	-->	ijp (~user@host109-157-170-145.range109-157.btcentralplus.com) has joined #haskell
2013-09-09 22:00:36	donri	MitchellSalad: (i think i thought it was like mapM_ yield, which could work but do the wrong thing)
2013-09-09 22:00:51	<--	Hannibal_Smith (~ff130493@host164-75-dynamic.53-79-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-09-09 22:01:13	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 22:01:34	tpsinnem	should i be able to use 'cabal sandbox init' in a directory where i have already done a bunch of other cabal stuff? 'cabal init' and 'cabal install' etc.
2013-09-09 22:01:43	tpsinnem	.. and have things just work nicely
2013-09-09 22:01:46	-->	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has joined #haskell
2013-09-09 22:01:48	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-09 22:01:53	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: No route to host)
2013-09-09 22:02:07	<--	ft (efftee@oldshell.chaostreff-dortmund.de) has quit (Quit: demons to some, angels to others)
2013-09-09 22:02:11	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-09-09 22:02:17	donri	tpsinnem: did you try? if it fails, maybe try cabal clean first
2013-09-09 22:02:38	-->	ft (efftee@oldshell.chaostreff-dortmund.de) has joined #haskell
2013-09-09 22:03:12	-->	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has joined #haskell
2013-09-09 22:04:14	--	Guest16417 is now known as apples
2013-09-09 22:04:28	<--	ijp (~user@host109-157-170-145.range109-157.btcentralplus.com) has left #haskell
2013-09-09 22:05:16	-->	pkrnj (~pkrnj@bas2-montreal47-2925492380.dsl.bell.ca) has joined #haskell
2013-09-09 22:05:17	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-09-09 22:05:34	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-09 22:06:26	<--	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 246 seconds)
2013-09-09 22:07:36	tikhon	tpsinnem: what other cabal things have you done there?
2013-09-09 22:07:45	tikhon	oh, never mind
2013-09-09 22:07:49	tikhon	misread your question
2013-09-09 22:08:41	-->	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has joined #haskell
2013-09-09 22:09:01	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 22:09:07	<--	edvo (~edvo@tmo-111-88.customers.d1-online.com) has quit (Quit: Leaving)
2013-09-09 22:09:22	-->	ddinh (~David@airbears-136-152-151-116.AirBears.Berkeley.EDU) has joined #haskell
2013-09-09 22:09:27	-->	tel (~tel@ip-64-134-241-94.public.wayport.net) has joined #haskell
2013-09-09 22:09:31	Raydiation	can you compare type classes to magic methods in python? ie if you derive from object in python you can call len(yourObject) which is implemented by the __len__ method
2013-09-09 22:10:26	ericmoritz	Raydiation, sort of
2013-09-09 22:10:27	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 264 seconds)
2013-09-09 22:10:43	Raydiation	i see :) thanks
2013-09-09 22:10:48	tpsinnem	donri: haven't yet. was installing a current cabal version, and now doing it again because user and global installations were stepping on each others toes apparently
2013-09-09 22:10:49	donri	object implements __len__?
2013-09-09 22:11:01	ericmoritz	Raydiation, Python has some blessed methods that let you use objects like that but it isn't quite the same
2013-09-09 22:11:20	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Ping timeout: 246 seconds)
2013-09-09 22:11:32	<--	tommd (~tommd@pdx.galois.com) has quit (Quit: Leaving.)
2013-09-09 22:11:39	-->	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has joined #haskell
2013-09-09 22:11:46	Twey	There's some overlap between typeclasses and interfaces
2013-09-09 22:11:49	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-09 22:11:51	ericmoritz	Type classes are more like interfaces
2013-09-09 22:12:12	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-09 22:12:17	Raydiation	donri: yes
2013-09-09 22:12:21	Iceland_jack	It's not that far off, __abs__, __add__, ... (Num), __cmp__ (Ord), __and__ (Bits), __hash__ (Hashable), __str__ (Show), etc.
2013-09-09 22:12:22	Twey	Python's ‘magic methods’ are of course just interfaces without compiler support
2013-09-09 22:12:28	<--	amyers (~quassel@128.177.88.72) has quit (Ping timeout: 276 seconds)
2013-09-09 22:12:28	-->	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has joined #haskell
2013-09-09 22:13:12	donri	ignoring everything that makes haskell and python different, then yes, its "protocols" are close to type classes
2013-09-09 22:13:33	dissipate__	Twey: python has too much magic IMO. everything is straightforward if you don't touch the magic stuff, but once you do, things can get confusing.
2013-09-09 22:13:33	-->	zzing (~textual@wlan.cspc1.uwindsor.ca) has joined #haskell
2013-09-09 22:14:04	-->	CatMtKing (~CatMtKing@ucrwpa1-fs-33-225.bulk.ucr.edu) has joined #haskell
2013-09-09 22:14:11	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-09 22:14:29	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 22:14:47	Raydiation	to implement the interfaces i just do: instance Ord MyType where ...
2013-09-09 22:14:48	Raydiation	right?
2013-09-09 22:14:53	Raydiation	for implementing Ord
2013-09-09 22:15:07	ericmoritz	dissipate__, as a professional Python developer that moonlights as a amateur Haskell/Erlang dev; I agree.  There's a lot of magic in those magic methods.  Basically hardcoded interfaces to the built-in functions
2013-09-09 22:15:14	Iceland_jack	Raydiation: Right
2013-09-09 22:15:15	Twey	Raydiation: But interfaces are restricted to dispatching on the first argument (the object instance); typeclasses also allow you to dispatch on e.g. the return value
2013-09-09 22:15:32	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 22:15:33	Twey	dissipate__: Probably, yes
2013-09-09 22:15:36	Raydiation	thanks
2013-09-09 22:15:43	donri	Raydiation: Ord you would usually let the compiler derive for you, though
2013-09-09 22:15:44	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-09 22:15:45	dissipate__	ericmoritz: is the stuff that is magic in python get exposed up front in haskell?
2013-09-09 22:16:13	Twey	dissipate__: But the magic exists for a reason; it seems characteristic of a language that has forgotton the second clause in ‘as simple as possible, but no simpler’
2013-09-09 22:16:20	Peaker	Python is mostly "single-dispatch", though, and type-classes go far beyond that
2013-09-09 22:16:28	Raydiation	is the IO monad a type class?
2013-09-09 22:16:43	ericmoritz	dissipate__, yeah, there's a 1-to-1 connection between a function's name and its implementation.  In Python len() is implemented using the magic __len__ method.  and __eq__, etc
2013-09-09 22:16:44	Twey	Raydiation: No, but there is an associated type class (MonadIO)
2013-09-09 22:16:46	donri	Raydiation: no, IO is a type that implements the Monad interface
2013-09-09 22:16:59	Peaker	Raydiation: no, it's an instance, or an abstract type, depending on which you mean
2013-09-09 22:17:03	<--	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has quit (Ping timeout: 264 seconds)
2013-09-09 22:17:03	ericmoritz	dissipate__, 1-to-1 in Haskell that is
2013-09-09 22:17:26	Peaker	ericmoritz: methods are functions too, and they can be implemented in many different instances
2013-09-09 22:17:30	Twey	dissipate__: There's no magic in Haskell.  :þ
2013-09-09 22:17:39	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-09 22:17:42	Twey	(FSVO ‘magic’)
2013-09-09 22:17:45	Peaker	The monomorphism restriction could be said to be magic, of the bad kind
2013-09-09 22:17:45	ericmoritz	dissipate__, in Python you have to know the secret methods in order to make generic code
2013-09-09 22:18:02	dissipate__	ericmoritz: yeah, the magic stuff, the lack of good multi-threading and just the junk that goes with OOP is turning me away from python for writing apps. great scripting language though.
2013-09-09 22:18:10	<--	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has quit (Max SendQ exceeded)
2013-09-09 22:18:13	Peaker	In Python, various kinds of generic code are just not really possible/practical to make
2013-09-09 22:18:16	Twey	Peaker: Is the DMMR still standard?  I thought it was going to be off by default in H2010, but it still seems to be on in GHC
2013-09-09 22:18:31	Peaker	Twey: I think they just changed the default for ghci
2013-09-09 22:18:36	-->	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has joined #haskell
2013-09-09 22:18:37	ericmoritz	dissipate__, the more and more I work with Haskell; the more and more Python looks slapped together
2013-09-09 22:18:39	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-09-09 22:18:53	Peaker	also, unary minus in Haskell is quite magical
2013-09-09 22:18:53	dissipate__	ericmoritz: that's a big turn off.
2013-09-09 22:19:14	Twey	There are some syntactic surprises, but nothing semantic
2013-09-09 22:19:18	-->	arkanum (~quassel@187.214.119.56) has joined #haskell
2013-09-09 22:19:25	dissipate__	ericmoritz: that's fine for 99.9% of scripting though, right?
2013-09-09 22:19:29	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-09 22:19:41	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-09 22:19:46	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:4577:d92d:6e39:ec3c) has joined #haskell
2013-09-09 22:19:48	Twey	If unary minus is magic, it's the kind of magic cast by ugly demons with big claws to make everyone sad ☹
2013-09-09 22:20:02	Peaker	Twey: Well, the way memory retaining works in GHC is somewhat semantically magical
2013-09-09 22:20:15	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 256 seconds)
2013-09-09 22:20:19	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-09 22:20:20	<--	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has quit (Max SendQ exceeded)
2013-09-09 22:20:22	<--	sm (~user@li229-222.members.linode.com) has quit (Remote host closed the connection)
2013-09-09 22:20:25	Twey	Peaker: That's not something you generally think about, though
2013-09-09 22:20:26	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 22:20:35	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-09 22:20:39	--	Eridius|korea is now known as Eridius
2013-09-09 22:20:41	Twey	Optimization is allowed to be magical
2013-09-09 22:20:42	-->	sm_ (~user@li229-222.members.linode.com) has joined #haskell
2013-09-09 22:20:42	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-09 22:20:44	-->	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has joined #haskell
2013-09-09 22:20:46	<--	Eridius (~kevin@unaffiliated/eridius) has quit (Quit: Reconnecting)
2013-09-09 22:20:52	Peaker	Twey: could say the same about Python's magic, possibly
2013-09-09 22:20:53	-->	Eridius|korea (~kevin@unaffiliated/eridius) has joined #haskell
2013-09-09 22:20:54	--	Eridius|korea is now known as Eridius
2013-09-09 22:21:06	Twey	Peaker: Nope; Python's magic is required to implement the API you want
2013-09-09 22:21:13	Peaker	Twey: but the O() behavior of code is beyond the allowance of magic in optimization, IMO
2013-09-09 22:21:24	-->	dexter (~dexter3@174-16-186-130.hlrn.qwest.net) has joined #haskell
2013-09-09 22:21:27	Peaker	constant optimizations can be afforded all manners of magic though
2013-09-09 22:21:30	ParahSailin	also a little magical how infix constructors must start with :
2013-09-09 22:21:33	Twey	(to be fair Python's is not really ‘magic’ either, just convention)
2013-09-09 22:21:33	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-09 22:21:34	ericmoritz	dissipate__, yeah Python is nice for quick hacks but starts to fall apart is projects grow in size and the worts of its abstractions start showing
2013-09-09 22:21:47	--	dexter is now known as Guest54198
2013-09-09 22:21:52	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 260 seconds)
2013-09-09 22:22:17	Twey	ParahSailin: If we're talking about syntactic magic, I've always found the case distinction magical to start with
2013-09-09 22:22:22	-->	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-09-09 22:22:24	<--	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has quit (Max SendQ exceeded)
2013-09-09 22:22:42	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-09 22:22:44	-->	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has joined #haskell
2013-09-09 22:22:45	ericmoritz	dissipate__, I can't say if Haskell solves the project size problem; I haven't built a project in Haskell as large as what I work with day to day
2013-09-09 22:22:54	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Read error: Connection reset by peer)
2013-09-09 22:22:57	Twey	ParahSailin: I don't think the colon thing is significantly more magical than the general case of constructors having to start with a capital
2013-09-09 22:23:07	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Ping timeout: 260 seconds)
2013-09-09 22:23:08	<--	fredmorcos (~fredmorco@cm56-209-5.liwest.at) has quit (Quit: Leaving)
2013-09-09 22:23:11	dissipate__	ericmoritz: have you read the paper 'Out of the Tar Pit'?
2013-09-09 22:23:20	ericmoritz	dissipate__, nope, I'll look into it
2013-09-09 22:23:35	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 22:23:44	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-09 22:23:56	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:4577:d92d:6e39:ec3c) has quit (Ping timeout: 246 seconds)
2013-09-09 22:23:57	-->	danilo2 (53ee9a6e@gateway/web/freenode/ip.83.238.154.110) has joined #haskell
2013-09-09 22:24:04	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-09 22:24:07	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-09 22:24:09	dissipate__	ericmoritz: haskell and other FP languages like clojure solve a huge problem in large systems by eliminating unbridled mutable state.
2013-09-09 22:24:42	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-09 22:24:43	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-09-09 22:25:00	ericmoritz	mutable state isn't really our problem; it is project structure and the inablity to easily refactor code that is developed on by dozens of developers
2013-09-09 22:25:15	dissipate__	ericmoritz: pure functions and immutable data structures are a godsend compared to OOP and mutable state. as for abstractions, that matters too, but immutable state is a huge improvement in itself.
2013-09-09 22:25:43	-->	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has joined #haskell
2013-09-09 22:25:43	Raydiation	is this how a monad in javascript would look like? https://dpaste.de/Qd1GQ/
2013-09-09 22:25:52	tikhon	To me, the case distinction makes a lot of sense: in other languages (especially Java), the case conventions are strong enough that they may as well be language features; I think it makes sense to actually support them in the language.
2013-09-09 22:25:53	<--	matheus23 (~quassel@p4FDF2E93.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-09 22:26:08	-->	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has joined #haskell
2013-09-09 22:26:08	mauke	Raydiation: how is that a monad?
2013-09-09 22:26:15	dissipate__	ericmoritz: have you heard of Uncle Bob's stuff on clean architecture?
2013-09-09 22:26:21	danilo2	Hi! Could someody tell me why I'm geting here an compile error? The compiler wants me to use UndecidableInstances, but I know , thay are dangerous: http://lpaste.net/92804
2013-09-09 22:26:23	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Quit: Leaving)
2013-09-09 22:26:27	ericmoritz	dissipate__, nope
2013-09-09 22:26:27	Raydiation	mauke: no idea, trying to grasp the concept
2013-09-09 22:26:45	mauke	Raydiation: that's just flip id, no?
2013-09-09 22:26:58	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-09 22:27:04	Raydiation	well its some kind of partial function application i guess
2013-09-09 22:27:37	dissipate__	ericmoritz: unfortunately, a lot of the material is OOP oriented but the part about the layer abstractions applies to any language: http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html
2013-09-09 22:28:22	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 248 seconds)
2013-09-09 22:28:54	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 22:29:08	ericmoritz	Raydiation, no this is: https://github.com/ericmoritz/async-compare/blob/master/node/firsts.js#L131
2013-09-09 22:29:24	<--	eataix (~eataix@unaffiliated/eataix) has quit (Ping timeout: 240 seconds)
2013-09-09 22:29:29	<--	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-09 22:29:33	mauke	ಠ_ಠ
2013-09-09 22:29:47	danilo2	I've got a question - If I'm sure, that there will be NO OTHER instance of "FClass (Vector a) ...", does using UndecidableInstances in this code is dangerous? : http://lpaste.net/92804
2013-09-09 22:29:49	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 240 seconds)
2013-09-09 22:29:55	Raydiation	ericmoritz: isnt this essentially the same?
2013-09-09 22:30:00	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 22:30:19	Raydiation	i mean i store a value in that function basically
2013-09-09 22:30:31	ericmoritz	Raydiation, oh, yeah I guess you're implementing an Identity monad
2013-09-09 22:30:32	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-09-09 22:30:34	<--	hfaafb (~hfaafb@misadventuregames.com) has quit (Ping timeout: 240 seconds)
2013-09-09 22:30:34	Raydiation	so the next time i pass in a function that function will be called with that value
2013-09-09 22:30:34	-->	neptunepink (~root@adsl-99-105-53-117.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-09 22:30:58	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-09-09 22:31:15	Raydiation	i think this is called bind
2013-09-09 22:31:46	ericmoritz	Raydiation, you've implemented a bind factory; but yeah, that is essentially an Identity monad.
2013-09-09 22:31:48	<--	Raynes (~macro@unaffiliated/raynes) has quit (Max SendQ exceeded)
2013-09-09 22:31:50	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-09 22:31:59	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 22:32:00	-->	Raynes (~macro@li231-96.members.linode.com) has joined #haskell
2013-09-09 22:32:04	<--	rfw (~rfw@heimdall.rfw.name) has quit (Ping timeout: 264 seconds)
2013-09-09 22:32:19	<--	Raynes (~macro@li231-96.members.linode.com) has quit (Changing host)
2013-09-09 22:32:19	-->	Raynes (~macro@unaffiliated/raynes) has joined #haskell
2013-09-09 22:32:22	-->	eataix (~eataix@unaffiliated/eataix) has joined #haskell
2013-09-09 22:32:38	<--	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has quit (Quit: WeeChat 0.4.1)
2013-09-09 22:33:15	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Ping timeout: 264 seconds)
2013-09-09 22:33:23	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-09 22:33:30	ericmoritz	Raydiation, your implementation may result is some non-idiomatic JS; monad(1)(f)(g) would be the same as m >>= f >>= g in Haskell
2013-09-09 22:33:31	donri	danilo2: undecidable instances aren't that dangerous to begin with?
2013-09-09 22:33:31	<--	boegel (~boegel@98.138-247-81.adsl-dyn.isp.belgacom.be) has quit (Quit: Leaving)
2013-09-09 22:33:38	<--	eb4890 (~hhh@2001:470:1f09:18c8:20d5:5c60:1f53:289e) has quit (Remote host closed the connection)
2013-09-09 22:33:39	-->	hfaafb (~hfaafb@misadventuregames.com) has joined #haskell
2013-09-09 22:34:04	Raydiation	i see
2013-09-09 22:34:20	ericmoritz	Raydiation, though I'm no expert on JS style ;)
2013-09-09 22:35:02	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 22:35:04	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-09 22:35:17	Raydiation	so whats the difference between this and partial function application
2013-09-09 22:35:18	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 248 seconds)
2013-09-09 22:35:37	danilo2	donri: I dont know - I'm asking to know more about them. I know certain conditions that they could be dangerous, but I'm prety sure, In my code these conditions will not happen (I'm generating Haskells code).
2013-09-09 22:35:46	ericmoritz	Raydiation, in this case, nothing
2013-09-09 22:36:00	danilo2	donri: Additional does using this flag slowes down the final code? (Maybe it is completely unrelateD)
2013-09-09 22:36:07	<--	aupiff (~aupiff@c-69-136-131-33.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-09 22:36:15	ericmoritz	Raydiation, but a monad is much more than just partial application
2013-09-09 22:36:29	Twey	dissipate__: Clojure doesn't eliminate mutable state, though :þ  It just discourages it.
2013-09-09 22:36:39	donri	danilo2: no i think at worst it slows down the compiler
2013-09-09 22:36:57	donri	danilo2: http://www.haskell.org/ghc/docs/latest/html/users_guide/type-class-extensions.html#undecidable-instances
2013-09-09 22:37:10	Twey	(it doesn't even give you a way to tell whether a function is mutable or not; I hear this is effectively impossible to combine with Java interop)
2013-09-09 22:37:22	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-09 22:37:27	<--	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has quit (Ping timeout: 264 seconds)
2013-09-09 22:37:31	dissipate__	Twey: true, but isn't that an improvement over having it everywhere? i would rather have 1 function that has side effects than 200.
2013-09-09 22:37:58	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-09 22:38:05	dissipate__	Twey: side effects where you need them is a huge improvement in software design.
2013-09-09 22:38:10	-->	hiroakip (~hiroaki@p5DC628AB.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 22:38:13	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-09 22:38:19	-->	MaidenJohn (~ddd@109.110.112.168) has joined #haskell
2013-09-09 22:38:24	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 256 seconds)
2013-09-09 22:38:29	jfischoff	I don't really see the problem with undecideable instances. Worse case your you get a compiler error, of is there something worse?
2013-09-09 22:38:30	MaidenJohn	hello guys
2013-09-09 22:38:34	MaidenJohn	i need help plz
2013-09-09 22:38:43	dissipate__	Twey: the paper 'Out of the Tar Pit' goes into more detail on this.
2013-09-09 22:38:44	jfischoff	what's up
2013-09-09 22:38:47	<--	hfaafb (~hfaafb@misadventuregames.com) has quit (Ping timeout: 245 seconds)
2013-09-09 22:38:55	Twey	ericmoritz: Types give you a huge hand with refactoring.  If you write your types right in Haskell, you can have a pretty good level of confidence that when you fix all the type errors resulting from a refactor, the code should work.
2013-09-09 22:39:20	dissipate__	Twey: bottom line is Clojure and Haskell are both big improvements over more mainstream OOP languages.
2013-09-09 22:39:21	donri	danilo2: UndecidableInstances are widely used, i believe. for example mtl relies on them heavily
2013-09-09 22:39:38	MaidenJohn	i need pc games cracks or serial numbers any idea plz
2013-09-09 22:39:50	Twey	danilo2: I think you're getting the error because your instance uses ‘b → A (IO b)’ for the parameter b that is supposed to be fully determined by a
2013-09-09 22:39:55	donri	@where ops
2013-09-09 22:39:55	lambdabot	arjanb bos byorgey Cale conal copumpkin dcoutts dibblego dmhouse dolio dons edwardk elliott geekosaur glguy Heffalump Igloo jmcarthur johnw kosmikus Lemmih monochrom nyc Philippa Pseudonym quicksilver
2013-09-09 22:39:55	lambdabot	 roconnor Saizan shachaf shapr sjanssen ski sorear SyntaxPolice xerox
2013-09-09 22:39:56	danilo2	donri: Thank you :) By the way - does anywhere exist a list of Haskell Extensions, which slowes down the final code OR are very dangerous and we should (almost) never use them (like Overlaping instances)
2013-09-09 22:40:02	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 22:40:11	ericmoritz	Twey, that is what I suspect; most of our errors in Python are type errors
2013-09-09 22:40:30	Twey	danilo2: The fact that it's a polymorphic type means that the type is *not* fully determined: the caller can choose ‘b’ at call-time
2013-09-09 22:40:34	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-09 22:40:36	dissipate__	ericmoritz: i'm interested in how the Clean Architecture translates in pure FP languages like Haskell.
2013-09-09 22:40:36	-->	wolf1oo (~alex@c-24-3-23-230.hsd1.pa.comcast.net) has joined #haskell
2013-09-09 22:40:40	danilo2	Twey: Ok, I get it. So I'll stick with UndecidableInstances in this example :)
2013-09-09 22:40:41	--	Mode #haskell [+o geekosaur] by ChanServ
2013-09-09 22:40:42	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-09 22:40:53	@geekosaur	MaidenJohn, wrong channel
2013-09-09 22:41:05	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-09 22:41:06	MaidenJohn	do u know any channel plz ?
2013-09-09 22:41:19	danilo2	Twey: Ok, but as I understand, while compiling the code with -O2, the compiler would optimize it and nothing will be checked in runtime ?
2013-09-09 22:41:20	Raydiation	MaidenJohn: #hackorz
2013-09-09 22:41:24	donri	wrong network in fact
2013-09-09 22:41:25	--	Mode #haskell [+o mauke] by ChanServ
2013-09-09 22:41:25	<--	mauke has kicked MaidenJohn (how did you get here)
2013-09-09 22:41:28	jfischoff	The more extensions you turn on the more bugs you find in GHC. Which is really a pain
2013-09-09 22:41:46	<--	roconnor (~roconnor@e120-pool-d89a6ce0.brdbnd.voicenetwork.ca) has quit (Quit: Leaving)
2013-09-09 22:41:54	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-09 22:41:55	ericmoritz	Twey, and often it is a key missing from a chunk of JSON or a value being null when someone assume it would always be non-null
2013-09-09 22:41:59	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-09 22:42:09	<--	oleo (~oleo@xdsl-78-35-153-43.netcologne.de) has quit (Remote host closed the connection)
2013-09-09 22:42:19	-->	ampersand27017 (~ampersand@ip-64-134-234-197.public.wayport.net) has joined #haskell
2013-09-09 22:42:20	Twey	dissipate__: Oh, to be sure it's an improvement, but it's not really comparable to what Haskell does.  The innovation in Haskell is not that it discourages mutability (Scheme's been doing that for years, after all) but that it *programmatically and composably* separates pure functions and impure actions and gives tools for working with the separation
2013-09-09 22:42:47	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-09 22:43:01	<--	morazow_ (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-09-09 22:43:02	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Ping timeout: 240 seconds)
2013-09-09 22:43:03	--	Mode #haskell [-o geekosaur] by geekosaur
2013-09-09 22:43:08	-->	quchen (~quchen@p54AA0B90.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 22:43:18	donri	danilo2: duno, i think the general consensus is that people shouldn't be told about extensions so they don't think they should use them, which of course has the effect that they use anything GHC suggests on failure. so no i don't know of any such resource other than the ghc manual. :(
2013-09-09 22:43:19	-->	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-09-09 22:43:22	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 22:43:25	--	Mode #haskell [-o mauke] by mauke
2013-09-09 22:43:39	Twey	ericmoritz: IME most errors are type errors in Haskell if you spend the time to design your types right.
2013-09-09 22:43:45	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-09 22:44:00	wolf1oo	I'm somewhat new to the haskell state monad (and monad use in general), does anyone have any pointers? I have a parser (generated with happy) which needs to "save" the code string, for use in the error printing function. Any advice would be appreciated!
2013-09-09 22:44:11	dissipate__	Twey: interestingly the authors of 'Out of the Tar Pit' did not say Haskell was the ultimate solution. they suggested something called 'Functional Relational Programming'. i cannot assess if that's the solution or if Haskell is better.
2013-09-09 22:44:33	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-09 22:44:46	danilo2	donri: If I will ever be a "haskell master" I will write such document! :D This is one of the most important information to me, which I cannot find anywhere :)
2013-09-09 22:45:07	donri	danilo2: the ghc manual isn't *that* bad though...
2013-09-09 22:45:16	donri	user guide*
2013-09-09 22:45:20	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-09 22:45:26	Twey	ericmoritz: What ‘type error’ means in a language is entirely dependent upon the type system in the language.  In a dependently-typed language such as Agda, you can reduce *all* possible errors to type errors if you're so inclined.
2013-09-09 22:46:03	-->	ccc_ (~macroron@c-98-249-245-231.hsd1.fl.comcast.net) has joined #haskell
2013-09-09 22:46:07	Twey	(with the occasional exception of unprovable non-termination)
2013-09-09 22:46:17	donri	i like how many people think all haskell does is catch at compile time what would be a TypeError exception in python
2013-09-09 22:46:24	donri	which almost never comes up in python
2013-09-09 22:46:28	danilo2	donri: I know, I started reading it. But I'm on the beginning yet (too much work, to little time ... ) :)
2013-09-09 22:46:31	ericmoritz	Twey, my definition is someone expected a variable to hold a value of a certain type and it ended up being something else.  The bain of dynamic typing ;)
2013-09-09 22:46:38	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Quit: quit)
2013-09-09 22:46:58	-->	oleo (~oleo@xdsl-78-35-153-43.netcologne.de) has joined #haskell
2013-09-09 22:47:03	dissipate__	Twey: what's your opinion of Proof Oriented Programming? http://www.prooforientedprogramming.org/pop.html
2013-09-09 22:47:17	dissipate__	Twey: seems to go beyond even Haskell.
2013-09-09 22:47:19	-->	Brunoooo (5355eb5a@gateway/web/freenode/ip.83.85.235.90) has joined #haskell
2013-09-09 22:47:26	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-09 22:47:28	ericmoritz	These are often runtime type errors though; data coming from an external source that I do not control
2013-09-09 22:47:29	-->	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has joined #haskell
2013-09-09 22:47:38	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-09 22:47:59	Raydiation	ericmoritz: why do you return a maybe(null) if the value is not there? https://github.com/ericmoritz/async-compare/blob/master/node/firsts.js#L135 this blogpost doesnt do this http://modernjavascript.blogspot.co.at/2013/06/monads-in-plain-javascript.html
2013-09-09 22:48:03	ericmoritz	Though I suspect that Maybe and Either monads can help in this case
2013-09-09 22:48:19	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-09 22:48:28	<--	pierreghz (~krux@91.179.27.135) has quit (Ping timeout: 260 seconds)
2013-09-09 22:48:53	ericmoritz	Raydiation, because I want to be able to chain the .bind() calls
2013-09-09 22:49:01	Raydiation	i see thanks
2013-09-09 22:49:05	-->	andrea (~andrea@p3EE3E825.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 22:49:18	donri	dissipate__: isn't that basically what dependently typed languages are about
2013-09-09 22:49:26	--	andrea is now known as Guest1055
2013-09-09 22:49:28	Brunoooo	Hi, Haskell beginner here. Does anyone know why the following doesn't work? http://pastebin.com/T6k2635c . I want to transform an Int list [1,2,3] to a string list ["-","--","---"]
2013-09-09 22:49:30	mauke	The paste T6k2635c has been copied to http://lpaste.net/92809
2013-09-09 22:49:35	Raydiation	maybe its a better idea to just start with javascript and functional programming
2013-09-09 22:49:38	--	Guest1055 is now known as Andrea_
2013-09-09 22:49:50	-->	osa1 (uid13910@gateway/web/irccloud.com/x-ylhhraxblizuftdh) has joined #haskell
2013-09-09 22:49:53	-->	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has joined #haskell
2013-09-09 22:49:54	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2013-09-09 22:49:58	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-09 22:49:59	Twey	ericmoritz: Well, yes, but what can be defined as a ‘type’ depends on the language.  ‘x exists’, ‘x holds a value’, ‘x holds an array’, ‘x holds an array of integers’, ‘x holds an array of 5 integers’, and ‘x holds an array of 5 integers all of which are between 12 and 17’ are all ‘types’ that can lead to type errors, but that type error indicates the breaking of a different level of assertion about your program.  Python only 
2013-09-09 22:50:08	mauke	Brunoooo: that can't be right because '-' is not a String
2013-09-09 22:50:22	-->	pierreghz (~krux@91.179.13.34) has joined #haskell
2013-09-09 22:50:25	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Connection timed out)
2013-09-09 22:50:26	dissipate__	donri: nope. read the site.
2013-09-09 22:50:42	Brunoooo	mauke: if you replicate a char, it becomes a string right?
2013-09-09 22:50:50	ericmoritz	Twey, I'm not disagreeing.  I was just clarifying what I meant.
2013-09-09 22:50:51	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-09 22:51:02	donri	Brunoooo: i think you want something like, printLine = map (`replicate` '-')
2013-09-09 22:51:03	mauke	Brunoooo: irrelevant
2013-09-09 22:51:13	Twey	ericmoritz: *nod* I was doing the same :þ
2013-09-09 22:51:16	dissipate__	donri: in proof oriented programming, you write a formal proof and then extract a working program from that proof. this is different from writing something in a typed language.
2013-09-09 22:51:16	<--	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has left #haskell
2013-09-09 22:51:29	donri	Brunoooo: and you want to change the type to [Int] -> [String]
2013-09-09 22:51:36	Twey	ericmoritz: Haskell will certainly help you fix ‘this was meant to be an integer’ bugs, but that's really only the start.
2013-09-09 22:51:46	dissipate__	donri: or rather just writing a program in a typed language. proof > program
2013-09-09 22:51:49	Twey	dissipate__: It's not, actually
2013-09-09 22:51:50	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-09 22:51:50	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Ping timeout: 240 seconds)
2013-09-09 22:52:09	mauke	inb4 curry-howard
2013-09-09 22:52:10	scriptor	Brunoooo: your current function is taking a list of ints and returning a string, but it sounds like you want to return a list of strings instead
2013-09-09 22:52:28	Brunoooo	yes I made a mistake there, my final intention is to concatenate the result to one string. Thats why I used foldr instead of map. So [1,2,3] should become "------"
2013-09-09 22:52:33	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-09 22:52:33	donri	Twey: i think they're after a difference in mentality
2013-09-09 22:52:40	 *	Twey nods.
2013-09-09 22:52:42	dissipate__	Twey: what do you mean? you have no opinion of POP?
2013-09-09 22:52:55	hpaste	goakley pasted “Type Filtering” at http://lpaste.net/92810
2013-09-09 22:52:59	<--	Andrea_ (~andrea@p3EE3E825.dip0.t-ipconnect.de) has quit (Client Quit)
2013-09-09 22:53:05	goakley	I think I'm missing something basic here, could someone have a look at these few lines?  http://lpaste.net/92810
2013-09-09 22:53:16	ericmoritz	Twey, well the start is convincing others to use Haskell.  Sadly that is not going to happen on this project.  It is too large.  I'm stealing ideas like Maybe from Haskell to add protections against runtime typing issues though
2013-09-09 22:53:41	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 22:53:43	<--	GaelanAintAround (~Gaelan@184-157-246-110.dyn.centurytel.net) has quit (Read error: Connection reset by peer)
2013-09-09 22:53:46	Twey	dissipate__: Writing a proof is exactly equivalent to writing a program: consistent dependently-typed languages *are* ‘Proof Tools’, and the process of compiling them *is* ‘Program Extraction’
2013-09-09 22:53:57	Clint	goakley: you're missing the TypeData -> Bool function?
2013-09-09 22:54:25	<--	zzing (~textual@wlan.cspc1.uwindsor.ca) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 22:54:25	donri	> foldr ((++) . (`replicate` '-')) "" [1,2,3]
2013-09-09 22:54:27	lambdabot	  "------"
2013-09-09 22:54:27	Twey	dissipate__: My opinions on POP are exactly those on writing fully-specified dependently-typed programs :þ
2013-09-09 22:54:30	<--	artyomkazak1 (~artyomkaz@94.25.229.117) has quit (Ping timeout: 248 seconds)
2013-09-09 22:54:47	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-09 22:54:47	dissipate__	Twey: so when you write a program in Haskell you are 100% sure it is correct?
2013-09-09 22:54:50	Twey	(it's a great idea, but more work needs to be done to make it convenient)
2013-09-09 22:54:56	goakley	clint: Yes, but I'm not sure what to use for that function.  I feel like there's some sort of built in for that, but I can't figure it out.
2013-09-09 22:54:56	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-09 22:55:07	Twey	dissipate__: Haskell is not logically consistent
2013-09-09 22:55:11	benmachine	dissipate__: when you write a proof you are not 100% sure it is correct
2013-09-09 22:55:15	mauke	:t fix
2013-09-09 22:55:16	lambdabot	(a -> a) -> a
2013-09-09 22:55:32	benmachine	proofs have much better correctness properties than just reckoning something
2013-09-09 22:55:36	dissipate__	Twey: well, this might tickle your fancy (from the page): Fantasia is an open source project aimed at making Proof Oriented Programming a reality. The goal of Fantasia is to create a simple, easy, elegant, and complete environment for performing proofs. Also, Fantasia incorporates a very basic built-in extraction engine for converting proofs into python functions.
2013-09-09 22:55:39	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-09 22:55:39	--	rishabhjain_ is now known as rishabhjain
2013-09-09 22:55:39	benmachine	but don't think no-one ever makes mistakes in them
2013-09-09 22:55:42	donri	Brunoooo: ^ you need to include ++ and the base case (the empty list) or use foldr1
2013-09-09 22:55:46	scriptor	Brunoooo: replicate isn't really suited for a fold function, consider that fold is passing the function an accumulator (the string), and a list item (the number), replicate expects two ints
2013-09-09 22:55:52	quchen	dissipate__: Even if you write a proof for something, it may not be the proof for what you were trying to prove. "triple = (*2)" is the usual example.
2013-09-09 22:55:55	Raydiation	as for lifting, is this some kind of reverse decorator? i mean you run a function after a function has been run
2013-09-09 22:56:04	Twey	dissipate__: The interface does sound interesting
2013-09-09 22:56:08	<--	kitallis (~kitallis@122.166.154.133) has quit (Read error: Connection reset by peer)
2013-09-09 22:56:10	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-09 22:56:20	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-09 22:56:21	<--	kitallis (~kitallis@122.166.154.133) has quit (Client Quit)
2013-09-09 22:56:29	Clint	goakley: pattern match on the constructor
2013-09-09 22:57:06	Twey	Raydiation: Lifting is not like decorators
2013-09-09 22:57:11	ericmoritz	dissipate__, is that like Coq?
2013-09-09 22:57:12	-->	aupiff (~aupiff@c-68-40-168-223.hsd1.mi.comcast.net) has joined #haskell
2013-09-09 22:57:16	Twey	(in any intuitively-useful way)
2013-09-09 22:57:16	goakley	clint: Can one pattern match in a lambda, or do I need to define something separate?
2013-09-09 22:57:18	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-09-09 22:57:32	Clint	goakley: you can but you don't want to in this case
2013-09-09 22:57:32	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 245 seconds)
2013-09-09 22:57:32	Brunoooo	okay so I should take a different approach then. Here's the story better explained by the way: http://pastebin.com/DVubPKMr
2013-09-09 22:57:37	mauke	The paste DVubPKMr has been copied to http://lpaste.net/92811
2013-09-09 22:57:37	Twey	goakley: You can match it to a variable, but not deconstruct it
2013-09-09 22:57:40	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-09 22:57:41	quchen	> (\(a,b) -> a + b) (3, 4) -- goakley
2013-09-09 22:57:42	<--	exicer (~exicer@host86-130-9-198.range86-130.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-09-09 22:57:42	lambdabot	  7
2013-09-09 22:57:56	Raydiation	so for instance you always want to turn the result of a function into a maybe you use a lift function to not have to write Maybe(func(result))
2013-09-09 22:58:01	mauke	Brunoooo: concatMap
2013-09-09 22:58:12	donri	Brunoooo: foldr ((++) . (`replicate` '-')) "" [1,2,3]  -- if you really want to use foldr
2013-09-09 22:58:13	Twey	Raydiation: No
2013-09-09 22:58:15	Raydiation	s/result/in
2013-09-09 22:58:33	mauke	Brunoooo: also, foo xs = replicate (sum xs) '-'
2013-09-09 22:58:35	ericmoritz	Raydiation, no lift lets you take a non-monadic function a pass in a monad
2013-09-09 22:58:36	Twey	Raydiation: That doesn't even type; Maybe is a type constructor, which means it expects a type parameter.  func(result) is presumably supposed to be a value.
2013-09-09 22:58:59	-->	Apocalisp (~textual@mobile-166-147-099-010.mycingular.net) has joined #haskell
2013-09-09 22:59:08	donri	> [1,2,3] >>= flip replicate '-'
2013-09-09 22:59:09	lambdabot	  "------"
2013-09-09 22:59:13	ericmoritz	so think I want to do +1 to Just 1 (+1) returns a number
2013-09-09 22:59:16	Twey	lift strips one layer of monad transformers away to give you a value in the ‘inner’ monad.
2013-09-09 22:59:27	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-09-09 22:59:28	Twey	ericmoritz: That's fmap
2013-09-09 22:59:38	Raydiation	so lift always involves a monad?
2013-09-09 22:59:38	-->	GaelanAintAround (~Gaelan@98-125-72-82.dyn.centurytel.net) has joined #haskell
2013-09-09 22:59:40	<--	mkscrg (~mkscrg@38.88.174.106) has quit
2013-09-09 22:59:50	goakley	Clint: Pattern matching worked, wish there were something more generic though.  Thanks
2013-09-09 22:59:50	quchen	(There are many many lifts in Haskell. Some of them are called "lift", most aren't.)
2013-09-09 22:59:51	<--	Gentlecat (~Roman@79.105.226.37) has quit (Ping timeout: 240 seconds)
2013-09-09 22:59:56	dissipate__	ericmoritz: i don't know. but extracting programs from proofs sounds very elegant to me.
2013-09-09 22:59:58	Twey	Raydiation: And a monad transformer, yes.  Unless you're using a significantly different meaning of ‘lift’ than is usual.
2013-09-09 23:00:24	dissipate__	ericmoritz: can you imagine telling your boss that you *proved* correctness before you even generated the program?
2013-09-09 23:00:30	-->	mkscrg (~mkscrg@38.88.174.106) has joined #haskell
2013-09-09 23:00:36	quchen	Twey: fmap lifts a function in a Functor. There's liftAX, liftMX, lift from TH, lift from transformers, …
2013-09-09 23:00:38	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-09-09 23:00:46	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-09 23:00:49	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-09 23:01:03	quchen	I wouldn't say trafo-lift is the only "lift" function.
2013-09-09 23:01:17	tpsinnem	(ok thanks folks, 'cabal repl' in the new cabal seems to indeed work peachily)
2013-09-09 23:01:18	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-09 23:01:26	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 23:01:28	Twey	quchen: Oh, that kind of lift.
2013-09-09 23:01:45	quchen	Twey: I thought you were talking about what "lift" is in general
2013-09-09 23:01:47	Twey	I suspect Raydiation didn't mean that, though.
2013-09-09 23:01:52	quchen	Oh.
2013-09-09 23:01:54	quchen	Sorry then.
2013-09-09 23:02:00	Twey	No, I was talking about the function ‘lift’ :þ
2013-09-09 23:02:07	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-09 23:02:13	Raydiation	reading through some examples it looked like you could use any function instead of a Monad
2013-09-09 23:02:13	quchen	Oh. Well that one is fairly unique if you're talking about transformers.
2013-09-09 23:02:22	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-09 23:02:24	Twey	Raydiation: Functions are monads
2013-09-09 23:02:36	mauke	enjoy your confusion
2013-09-09 23:02:40	Twey	I mean, the function type (r →) is a monad
2013-09-09 23:02:41	Raydiation	xD
2013-09-09 23:02:44	Twey	Heh
2013-09-09 23:03:09	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-09 23:03:09	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-09 23:03:14	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-09 23:03:29	<--	ddinh (~David@airbears-136-152-151-116.AirBears.Berkeley.EDU) has quit (Ping timeout: 247 seconds)
2013-09-09 23:04:08	quchen	(r →) is the go-to Monad to confuse beginners.
2013-09-09 23:04:12	Raydiation	functions are monads in haskell? or in any other language
2013-09-09 23:04:18	<--	markcw (~jack@128.135.100.115) has quit (Ping timeout: 245 seconds)
2013-09-09 23:04:27	ericmoritz	dissipate__, my boss would just say, "uhh.. that's good right?"
2013-09-09 23:04:31	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-09 23:04:33	mauke	the type ((->) e) is an instance of Monad, which is a typeclass
2013-09-09 23:04:37	Brunoooo	donri: that worked! Can you explain to me why the "" near the end was necessary?
2013-09-09 23:04:38	-->	Neqoxec (~Neqoxec@8-12.ptpg.oregonstate.edu) has joined #haskell
2013-09-09 23:04:39	hpc	whereas, (a -> r) -> r is the go-to monad to confuse intermediate programmers
2013-09-09 23:04:54	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-09 23:04:55	mauke	hpc: but where do I put the foralls?
2013-09-09 23:05:02	quchen	You guys.
2013-09-09 23:05:05	ericmoritz	Twey, isn't fmap and liftM basically the same thing? Just one is for a Functor and the other is for a Monad
2013-09-09 23:05:06	Twey	Raydiation: Mathematically, functions are monads.  Haskell also defines a Monad instance for functions that (roughly?) corresponds to the mathematical definition.
2013-09-09 23:05:12	donri	Brunoooo: consider what would happen given an empty input list
2013-09-09 23:05:25	Brunoooo	ah thanks
2013-09-09 23:05:30	hpc	mauke: in true mathematician style, (a -> r) -> r, for all a, r
2013-09-09 23:05:43	Brunoooo	Im really new to haskell, thanks for the help :)
2013-09-09 23:05:45	-->	quarkup (~quarkup@a79-168-109-199.cpe.netcabo.pt) has joined #haskell
2013-09-09 23:05:45	mauke	well, that looks pretty boring
2013-09-09 23:05:47	Peaker	hpc: the "a" is usually a given
2013-09-09 23:05:50	mauke	@src Cont
2013-09-09 23:05:50	lambdabot	newtype Cont r a = Cont { runCont :: (a -> r) -> r }
2013-09-09 23:05:51	quchen	ericmoritz: liftM = fmap for types that are both Functor and Monad instances. Due to a historical accident, that's not enforced. However, if you violate that law, the Haskell police will put you in a jail with 1000 PHP programmers.
2013-09-09 23:05:54	Twey	ericmoritz: Yeah, to some extent fmap, liftM, and liftA are all ‘the same thing’
2013-09-09 23:06:06	Twey	Hence the name
2013-09-09 23:06:12	Twey	‘lift’ is weird, though.
2013-09-09 23:06:29	-->	artyomkazak (~artyomkaz@host-60-157-66-217.spbmts.ru) has joined #haskell
2013-09-09 23:06:32	hpc	bro, do you even liftM?
2013-09-09 23:06:33	Peaker	newtype Foo a = Foo { runFoo :: forall r. (a -> r) -> r }
2013-09-09 23:06:39	<--	ecr (~Thunderbi@2620:101:8003:200:ddde:1ba4:3028:67bf) has quit (Ping timeout: 240 seconds)
2013-09-09 23:06:44	ystael	quchen: Hours later, the attendants remove 999 dead PHP programmers from the cell.  "They weren't type correct," the Haskell programmer explains sheepishly.
2013-09-09 23:06:49	<--	wolf1oo (~alex@c-24-3-23-230.hsd1.pa.comcast.net) has left #haskell
2013-09-09 23:06:54	Twey	Heheh.
2013-09-09 23:06:56	ystael	The lone survivor stares, twitching.
2013-09-09 23:07:20	Twey	‘I never knew you could use a function like that’
2013-09-09 23:07:20	-->	ecr (~Thunderbi@nat/mozilla/x-koayimbmgvfflrwv) has joined #haskell
2013-09-09 23:07:20	ericmoritz	Twey, oh lift not liftM; I assumed he was talking about liftM
2013-09-09 23:07:29	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-09-09 23:07:29	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Ping timeout: 240 seconds)
2013-09-09 23:07:52	<--	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-09 23:07:53	donri	Brunoooo: if you use foldr1 you don't need that empty string argument, but instead it will throw a nasty exception if the input list is empty
2013-09-09 23:07:58	-->	Gentlecat (~Roman@79.105.226.37) has joined #haskell
2013-09-09 23:08:03	Twey	(don't use foldr1 please)
2013-09-09 23:08:14	hpc	Brunoooo: or more specifically, it will throw an even nastier pure exception
2013-09-09 23:08:31	Twey	Also known as ‘it breaks’
2013-09-09 23:08:32	hpc	Brunoooo: which is even less fun than plain old regular IO exceptions (like every other language has)
2013-09-09 23:08:36	hpc	yes, that
2013-09-09 23:08:39	donri	yeah, you can't catch it except in IO
2013-09-09 23:08:39	<--	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has quit (Ping timeout: 264 seconds)
2013-09-09 23:08:46	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-09 23:09:00	hpc	pure exceptions occur at an unpredictable point in IO-land, is what makes it annoying
2013-09-09 23:09:10	--	Michael is now known as Guest93309
2013-09-09 23:09:20	quchen	hpc: At least they won't leave your program in an undefined state when you throw them from pure code.
2013-09-09 23:09:23	quchen	Could be worse.
2013-09-09 23:09:46	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Quit: hit these keys in the right order and you can make)
2013-09-09 23:09:54	Twey	‘It could be worse.  You could be writing C.’
2013-09-09 23:10:12	hpc	man, you don't even know
2013-09-09 23:10:21	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-09 23:10:22	hpc	by relative standards, C is very well specified
2013-09-09 23:10:36	--	bos_ is now known as bos
2013-09-09 23:10:39	<--	phischu (~pschuster@p4FD32C12.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-09 23:10:39	Raydiation	you mean its clearly defined whats undefined
2013-09-09 23:10:58	quchen	Twey: https://www.youtube.com/watch?v=SJUhlRoBL8M
2013-09-09 23:11:16	haasn	does anybody else think “withSocketsDo $ do” is awfully redundant?
2013-09-09 23:11:17	Twey	I think a language that makes C look well-specified is not a language I want to know about
2013-09-09 23:11:18	-->	markcw (~jack@128.135.100.115) has joined #haskell
2013-09-09 23:11:21	haasn	would be cleaner to have “withSockets $ do”
2013-09-09 23:11:24	Twey	haasn: Right?!
2013-09-09 23:11:37	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 276 seconds)
2013-09-09 23:11:42	 *	haasn .oO( withSocketsDon't )
2013-09-09 23:11:47	Twey	I'm pretty sure it could just be added automatically anyway
2013-09-09 23:11:51	hpc	haha
2013-09-09 23:11:51	-->	dennis (5476d374@gateway/web/freenode/ip.84.118.211.116) has joined #haskell
2013-09-09 23:11:58	Twey	I'm not sure why we write withSocketsDo
2013-09-09 23:12:02	dennis	hey guys
2013-09-09 23:12:02	monochrom	the best way to win is of course to avoid pure exceptions
2013-09-09 23:12:06	geekosaur	because windows needs it
2013-09-09 23:12:09	-->	james-ubc (~james@dhcp-206-87-192-152.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-09 23:12:11	quchen	Twey: #ifdef __WIN__ do withSocketsDo $ do
2013-09-09 23:12:23	dennis	im playing around with criterion but i cant find any good tutorial
2013-09-09 23:12:32	Twey	geekosaur: But can't you just do it in the first sockets call?
2013-09-09 23:12:34	geekosaur	and the Do suffix makes sense if you're not following it with a do block but with a fucntion
2013-09-09 23:12:38	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-09 23:12:39	deggis	after one month of diving into world of ruby, i'd sometimes prefer writing web apps with C
2013-09-09 23:12:40	dennis	im currently using this: http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/
2013-09-09 23:12:54	geekosaur	Twey, maybe there is a procedural version that works that way
2013-09-09 23:13:00	dennis	but the commands in it are not working because the options are not displayed by the help function
2013-09-09 23:13:06	geekosaur	withSocketsDo is a bracket
2013-09-09 23:13:07	dennis	so it seems that this options are not valid anymore^^
2013-09-09 23:13:18	<--	ccc_ (~macroron@c-98-249-245-231.hsd1.fl.comcast.net) has quit (Quit: Lost terminal)
2013-09-09 23:13:18	shoret	deggis: why?
2013-09-09 23:13:20	geekosaur	makes sure winsock is properly cleaned up in case of exceptions
2013-09-09 23:13:23	RichyB	Twey, no, not really. You may be making millions of sockets calls; you don't want to be checking whether you've initialised the socket library or not yet on every single one of them.
2013-09-09 23:13:25	hpc	dennis: it's an edwardk library, there are no tutorials
2013-09-09 23:13:28	hpc	dennis: or docs
2013-09-09 23:13:28	<--	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has quit (Ping timeout: 245 seconds)
2013-09-09 23:13:41	<--	poseid (~pmu@p5DCBF9D1.dip0.t-ipconnect.de) has quit (Quit: poseid)
2013-09-09 23:13:44	Twey	RichyB: You probably won't be opening millions of sockets
2013-09-09 23:13:44	quchen	hpc: Criterion isn't by edwardk I think ..?
2013-09-09 23:13:49	monochrom	haasn: so are you just uncomfortable with the name? you can rename it, you know.
2013-09-09 23:13:49	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-09 23:14:02	hpc	oh, it's bos
2013-09-09 23:14:03	Twey	A boolean check doesn't seem terribly uncomfortable
2013-09-09 23:14:04	haasn	yes, it's just the name :)
2013-09-09 23:14:07	-->	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has joined #haskell
2013-09-09 23:14:13	geekosaur	remember, windows networking does not work like unix, there'd be a lot of fake filehandles rotting after an exception, which would throw weird errors if touched afterward
2013-09-09 23:14:14	haasn	main = let withSockets = withSocketsDo in withSockets $ do ...
2013-09-09 23:14:20	RichyB	Twey, why wouldn't I? Haskell has things like web servers written with it.
2013-09-09 23:14:28	Twey	Then you close the bracket in the socket's finalizer (@geekosaur)
2013-09-09 23:14:30	dennis	and bos has also noc docs xD?
2013-09-09 23:14:38	quchen	haasn: This channel will not tolerate redundancies in this channel!
2013-09-09 23:14:54	donri	withSockets could make you think it takes a function Socket -> IO a
2013-09-09 23:14:56	RichyB	There is an argument that could be made that perhaps (withSocketsDo) could be done by the RTS behind your back, but it's not a _huge_ wart.
2013-09-09 23:14:56	-->	fragamus (~textual@50-0-196-130.dedicated.static.sonic.net) has joined #haskell
2013-09-09 23:14:59	acowley	Yeah we follow TCWNTRITC in this channel!
2013-09-09 23:15:02	hpc	i was thinking of trifecta
2013-09-09 23:15:04	deggis	shoret: there's just so many odd features (ok, many are because of rails). and then there's "features" like this http://weber.fi.eu.org/blog/Informatique/ugly_ruby.html?lang=en
2013-09-09 23:15:05	donri	i guess that'd be singular though
2013-09-09 23:15:11	Twey	RichyB: Because operating systems only support 65535 sockets :þ
2013-09-09 23:15:18	<--	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has quit (Ping timeout: 248 seconds)
2013-09-09 23:15:24	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-09 23:15:35	dennis	well if i remeber corrctly edward told me to use that criterion thing^^
2013-09-09 23:15:44	monochrom	naw, since "sockets" is plural, withSockets :: Traversable t => t Socket -> IO a :)
2013-09-09 23:15:44	-->	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has joined #haskell
2013-09-09 23:15:46	dennis	anyone knows ho to print charts with the newest version?
2013-09-09 23:15:51	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-09 23:16:02	hpc	Twey: that's what VPNs are for!
2013-09-09 23:16:05	RichyB	Twey, fortunately that is not true.
2013-09-09 23:16:22	monochrom	err, Traversable t => (t Socket -> IO a) -> IO a !
2013-09-09 23:16:25	acowley	dennis: Just run your executable with --help
2013-09-09 23:16:27	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-09 23:16:30	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-09 23:16:36	-->	ddinh (~David@108.67.65.91) has joined #haskell
2013-09-09 23:16:43	int-e	hpc: ouch?
2013-09-09 23:16:44	acowley	dennis: You probably want, mybench -o charts.html
2013-09-09 23:16:49	-->	derelm (~derelm@p5B28103A.dip0.t-ipconnect.de) has joined #haskell
2013-09-09 23:16:58	<--	shreesh (~shreesh@209.104.235.1) has quit (Remote host closed the connection)
2013-09-09 23:17:01	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-09 23:17:06	Twey	RichyB: Hmm?  65535 Internet sockets, and Windows doesn't support local sockets anyway
2013-09-09 23:17:07	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-09-09 23:17:14	dennis	yes i actually did that and the -t option is the template option which is no png^^
2013-09-09 23:17:25	Twey	(obviously you wouldn't compile the check on non-Windows)
2013-09-09 23:17:33	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Max SendQ exceeded)
2013-09-09 23:17:48	dennis	ah that works...
2013-09-09 23:18:08	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-09-09 23:18:12	dennis	but can i save them as png?
2013-09-09 23:18:27	deggis	shoret: well, i had to have my 30 characters worth of outcry :) i like haskell programmers' attitude towards programming (and implementing actual stuff) more than i like ruby writers (so far). only my feeling
2013-09-09 23:18:29	Twey	Alternatively, compiler optimization: if the program uses sockets, wrap main in withSocketsDo.  No more checks; I don't know of many programs that repeatedly enable and disable sockets, anyway.
2013-09-09 23:18:32	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 246 seconds)
2013-09-09 23:19:04	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Quit: Leaving)
2013-09-09 23:19:24	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-09 23:19:28	luite_	Twey: but that would make every program depend on the network package?
2013-09-09 23:19:39	RichyB	Twey, the hard 64ki connections limit in TCP applies to a single client talking to a single server. Specifically, every concurrent connection must have a unique (source addr, source port, dest addr, dest port) tuple. For most servers (dest addr, dest port) is constant, so you can have up to 64*1024 connections from each client address.
2013-09-09 23:20:17	<--	Brunoooo (5355eb5a@gateway/web/freenode/ip.83.85.235.90) has quit (Quit: Page closed)
2013-09-09 23:20:21	donri	clearly we need to allow libraries to export 'main' that is automatically run before the Main.main!
2013-09-09 23:20:28	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:352a:a1de:ab83:4c6f) has joined #haskell
2013-09-09 23:20:35	luite_	donri: oh noes
2013-09-09 23:20:45	luite_	that reminds me of c++ woes
2013-09-09 23:20:48	hpc	woo static blocks!
2013-09-09 23:20:49	RichyB	You can quite happily write a Haskell program that holds open one hundred thousand TCP sockets simultaneously. I can't remember clearly but I think that I've done it myself for fun at least once.
2013-09-09 23:21:09	luite_	donri: in which order, and how do you handle errors?
2013-09-09 23:21:20	-->	applicative (~m@209.248.28.12) has joined #haskell
2013-09-09 23:21:36	donri	luite_: i'm gonna go with "random" and "not".
2013-09-09 23:21:37	-->	fizruk (~fizruk@79.165.40.18) has joined #haskell
2013-09-09 23:21:39	Twey	luite_: Only ones that use sockets
2013-09-09 23:21:43	RichyB	Twey, yeah, I'd go with that solution. "If the program uses sockets, wrap main in withSocketsDo." The only potential downside is FFI safety when mixing Haskell with other code that might expect to initialise WinSock behind your back?
2013-09-09 23:21:48	Twey	(or network, if that's your thing)
2013-09-09 23:22:17	luite_	Twey: right, in that case it does indeed look much like static initializers
2013-09-09 23:22:18	RichyB	Pretty unlikely though because it's not awfully common to write Haskell libraries and then call them from C programs instead of the other way around.
2013-09-09 23:22:25	RichyB	*The only potential downside that I can think of right now.
2013-09-09 23:22:27	<--	ulfdoz (~mary@p5B38A7C8.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-09 23:22:59	<--	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has quit (Remote host closed the connection)
2013-09-09 23:23:09	--	luite_ is now known as luite
2013-09-09 23:23:10	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-09 23:23:16	<--	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has left #haskell
2013-09-09 23:23:16	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-09-09 23:24:15	<--	Gentlecat (~Roman@79.105.226.37) has quit (Ping timeout: 260 seconds)
2013-09-09 23:24:16	Twey	RichyB: You need to call a Haskell RTS initialization function when doing that anyway — the RTS can put the socket stuff in there
2013-09-09 23:24:31	donri	Twey: hey maybe we could wrap all socket functions in withSocketsDo and use stream fusion to optimize it away!
2013-09-09 23:24:32	-->	applikativ (~m@209.248.28.12) has joined #haskell
2013-09-09 23:24:38	<--	JobV (~Adium@wndsnyhed01-pool1-a130.wndsny.tds.net) has quit (Quit: Leaving.)
2013-09-09 23:24:47	monochrom	onoes
2013-09-09 23:24:50	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:352a:a1de:ab83:4c6f) has quit (Ping timeout: 245 seconds)
2013-09-09 23:25:00	luite	donri: hehe you're the optimistic type eh
2013-09-09 23:25:00	Twey	donri: I don't think stream fusion applies to IO :þ
2013-09-09 23:25:07	-->	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-09 23:25:08	RichyB	Twey, I'd buy that.
2013-09-09 23:25:30	hpc	couldn't we just always initialize the socket system?
2013-09-09 23:25:30	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-09 23:25:31	donri	Twey: so just unsafePerformIO them all!
2013-09-09 23:25:31	luite	Twey: clearly a monad is the wrong abstraction and we need some fusable stream instead
2013-09-09 23:25:34	geekosaur	and it wouldn;t work anyway as the socket ceases to exist outside withSocketsDo. miss one "optimize away" and you are screwed
2013-09-09 23:25:36	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-09 23:25:40	applikativ	tpsinnem: are you figuring cabal sandbox/repl out?
2013-09-09 23:25:42	Twey	Hahaha
2013-09-09 23:25:58	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 248 seconds)
2013-09-09 23:26:04	-->	icarus127 (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-09 23:26:06	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-09 23:26:10	donri	geekosaur: oh come on this is only for windows, no one expects things to run bug free there anyway
2013-09-09 23:26:45	 *	Twey laughs.
2013-09-09 23:26:57	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-09 23:28:40	applikativ	the vector Stream type can take the form Stream IO a, Twey; I'm not sure how you could leverage that to work with anything but mutable arrays though ...
2013-09-09 23:28:43	tpsinnem	applicative: yeah, i didn't have much time to play with it yet but so far it indeed just works now
2013-09-09 23:28:56	benmachine	cf. Torvalds, 'When you say, "I wrote a program that crashed Windows," people just stare at you blankly and say, "Hey, I got those with the system, /for free/."'
2013-09-09 23:28:58	applikativ	oh cool.
2013-09-09 23:28:59	tpsinnem	uhm
2013-09-09 23:29:07	tpsinnem	applikativ, not applicative  :)
2013-09-09 23:29:18	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-09 23:29:28	 *	benmachine somehow read applikativ as talking about Stream IO Twey
2013-09-09 23:29:32	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-09 23:29:44	applikativ	tpsinnem: i was just going to point out that in the main directory of a file with .cabal and a sandbox, 'cabal repl' should open ghci with everything available qualifid
2013-09-09 23:29:54	applikativ	oh i'm applikativ again
2013-09-09 23:30:02	tpsinnem	yeah
2013-09-09 23:30:03	--	applikativ is now known as appliquative
2013-09-09 23:30:05	<--	Neqoxec (~Neqoxec@8-12.ptpg.oregonstate.edu) has quit (Ping timeout: 246 seconds)
2013-09-09 23:30:23	--	appliquative is now known as applikative
2013-09-09 23:30:26	<--	phienone (~ph@nappo.lnet.fi) has quit (Quit: Lost terminal)
2013-09-09 23:30:46	applikative	something mysterious going on. i forgot my freenode login anyway
2013-09-09 23:31:17	hpc	i just have a /hpc ident alias
2013-09-09 23:31:46	donri	i authenticate with SASL like a real man
2013-09-09 23:31:49	applikative	Stream IO Twey is a perfectly good type; MVector Twey is more difficult
2013-09-09 23:31:57	<--	shoret (~user@66.11.220.78) has quit (Quit: ERC Version 5.2 (IRC client for Emacs))
2013-09-09 23:32:12	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-09 23:32:25	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-09 23:32:54	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-09-09 23:33:15	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Ping timeout: 264 seconds)
2013-09-09 23:34:12	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-09 23:34:15	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-09 23:34:15	monochrom	"Stream IO Twey" is the best thing since monad transformers
2013-09-09 23:34:25	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-09 23:35:56	-->	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has joined #haskell
2013-09-09 23:35:58	<--	fragamus (~textual@50-0-196-130.dedicated.static.sonic.net) has quit (Quit: Computer has gone to sleep.)
2013-09-09 23:35:59	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-09 23:36:01	dcoutts_	applikative: I forget, was it you earlier who noticed that the email on the beta hackage was not working? Anyway, it should be fixed now so worth trying it again.
2013-09-09 23:36:11	applikative	okay dcoutts_
2013-09-09 23:36:42	<--	Raydiation (~bernhard@chello080108042248.32.11.vie.surfer.at) has left #haskell
2013-09-09 23:37:36	applikative	dcoutts_: Server error: sendmail exited with error code ExitFailure 1
2013-09-09 23:37:45	dcoutts_	heh
2013-09-09 23:38:00	 *	dcoutts_ admits he only noticed that ssmtp was installed, didn't try it
2013-09-09 23:38:01	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Remote host closed the connection)
2013-09-09 23:38:08	applikative	let me try a less bizarre email account name than what_is_it_to_do_anything etc
2013-09-09 23:38:38	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-09 23:38:43	applikative	Server error: sendmail exited with error code ExitFailure 1
2013-09-09 23:38:51	 *	dcoutts_ tries...
2013-09-09 23:38:57	monochrom	"Server error: what_is_it_to_do_anything is too long" :)
2013-09-09 23:39:32	<--	akurei (~akurei@lak-119-219.wohnheime.ruhr-uni-bochum.de) has quit (Ping timeout: 246 seconds)
2013-09-09 23:39:35	<--	ampersand27017 (~ampersand@ip-64-134-234-197.public.wayport.net) has quit (Quit: ampersand27017)
2013-09-09 23:39:38	-->	akurei_ (~akurei@31.193.12.99) has joined #haskell
2013-09-09 23:39:47	applikative	all of my addresses are bad; another 'practical.wisdom' is taken for new-age or maybe 12 step spam, when it makes perfect sense in my peculiar case
2013-09-09 23:40:04	applikative	not that i possess any
2013-09-09 23:40:49	<--	applicative (~m@209.248.28.12) has quit (Quit: Lost terminal)
2013-09-09 23:41:07	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-09 23:41:30	<--	nooodl (~nooodl@225.175-241-81.adsl-dyn.isp.belgacom.be) has quit (Quit: Ik ga weg)
2013-09-09 23:41:59	<--	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-09-09 23:42:49	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-09-09 23:42:57	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Ping timeout: 245 seconds)
2013-09-09 23:43:34	applikative	what happened to MitchellSalad his pipes questions were pitched to approximately my level ;)
2013-09-09 23:44:31	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-09 23:44:57	applikative	what are the grades of comprehension here, noob, Tenderfoot, ...?
2013-09-09 23:45:33	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Ping timeout: 245 seconds)
2013-09-09 23:46:30	<--	Guest93309 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-09 23:46:31	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Quit: Lost terminal)
2013-09-09 23:46:57	<--	tuxie_ (~paranoid@e179152161.adsl.alicedsl.de) has quit (Ping timeout: 256 seconds)
2013-09-09 23:47:40	<--	derelm (~derelm@p5B28103A.dip0.t-ipconnect.de) has quit (Quit: derelm)
2013-09-09 23:49:20	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-09 23:50:46	 *	Twey has been streamed
2013-09-09 23:50:58	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-09-09 23:51:44	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-09 23:51:54	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-09 23:52:20	haasn	rest in pieces
2013-09-09 23:53:09	-->	samhuang91 (~samhuang9@nat/cisco/x-mvjzaotppglnyvpy) has joined #haskell
2013-09-09 23:53:10	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Ping timeout: 248 seconds)
2013-09-09 23:53:12	dcoutts_	applikative: ok, we've worked out the problem, will solve it eventually
2013-09-09 23:53:37	dcoutts_	we were relaying email to haskell.org, but it's rejecting relaying (quite rightly in general)
2013-09-09 23:54:37	<--	james-ubc (~james@dhcp-206-87-192-152.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 245 seconds)
2013-09-09 23:55:08	--	sm_ is now known as sm
2013-09-09 23:55:11	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-09 23:55:29	-->	carlosgaldino (~carlosgal@177.148.140.113) has joined #haskell
2013-09-09 23:55:45	applikative	oh i see, dcoutts_
2013-09-09 23:57:17	-->	james-ubc (~james@dhcp-206-87-192-152.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-09 23:57:19	applikative	are you sure its not Dr Patterson who's not rejecting my mail?
2013-09-09 23:57:26	applikative	or is who is rather.
2013-09-09 23:57:49	monochrom	hehe
2013-09-09 23:57:51	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-09-09 23:58:03	-->	tobyp (uid4@gateway/web/irccloud.com/x-kovjedaeeuarypij) has joined #haskell
2013-09-09 23:58:15	applikative	I'm convinced he has something against me; and he's probably right.
2013-09-09 23:58:51	<--	albertid_ (~hannes@212.255.96.239) has quit (Quit: Verlassend)
2013-09-09 23:58:51	-->	Neqoxec (~Neqoxec@24.21.110.149) has joined #haskell
2013-09-09 23:58:55	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-09 23:59:00	acowley	You keep misspelling his name. Might not help.
2013-09-09 23:59:08	applikative	uh oh
2013-09-09 23:59:20	applikative	oh how interesting
2013-09-09 23:59:51	applikative	@remember It's Ross Paterson, not Ross Patterson, you fool!
2013-09-09 23:59:51	lambdabot	Done.
2013-09-10 00:00:05	applikative	oh, i wanted it to say it would never forget
2013-09-10 00:00:10	dcoutts_	applikative: yes I'm sure :-)
2013-09-10 00:00:26	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-10 00:00:32	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Quit: Lost terminal)
2013-09-10 00:00:37	dcoutts_	sendmail: RCPT TO:<foo@example.com> (550 relay not permitted)
2013-09-10 00:00:38	dcoutts_	*** Exception: sendmail exited with error code ExitFailure 1
2013-09-10 00:00:38	<--	danald (~danald@g231084045.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-09-10 00:01:02	donri	@quote It's
2013-09-10 00:01:02	lambdabot	It's says: Ross Paterson, not Ross Patterson, you fool!
2013-09-10 00:01:04	monochrom	um... last time I complained that someone was using @remember wrong, he argued back. so I'm not doing it again.
2013-09-10 00:01:09	dcoutts_	applikative: we've got ssmtp configured to relay to haskell.org, and it's the haskell.org smtp server that rejects with "550 relay not permitted"
2013-09-10 00:01:23	applikative	hhah ok i will leave it to you to express my intention donri
2013-09-10 00:01:25	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-10 00:01:35	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 00:01:40	benmachine	@forget It's Ross Paterson, not Ross Patterson, you fool!
2013-09-10 00:01:40	lambdabot	Done.
2013-09-10 00:01:51	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: qQ)
2013-09-10 00:01:52	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-09-10 00:01:58	quchen	What's the appropriate place to propose a Haddock change? There doesn't seem to be a dedicated mailing list here http://www.haskell.org/mailman/listinfo
2013-09-10 00:02:14	acowley	Doesn't it have its own trac?
2013-09-10 00:02:20	quchen	It does
2013-09-10 00:02:32	applikative	@remember applicative Note to self: It's Ross Paterson not Ross Patterson, you fool!
2013-09-10 00:02:32	lambdabot	It is forever etched in my memory.
2013-09-10 00:02:33	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 00:02:42	applikative	@quote Ross
2013-09-10 00:02:42	lambdabot	praetorian42 says: I have yet to come across a scenario where compile-time type checking is a worthwhile substitute for reasonably thought-out dynamic code
2013-09-10 00:02:46	<--	k0001 (~k0001@host3.190-136-66.telecom.net.ar) has quit (Ping timeout: 248 seconds)
2013-09-10 00:02:52	quchen	Opening a ticket without any discussion isn't how GHC proposals work, so I thought I should ask some list about it before
2013-09-10 00:02:52	applikative	@quote Patterson
2013-09-10 00:02:52	lambdabot	applicative says: Note to self: It's Ross Paterson not Ross Patterson, you fool!
2013-09-10 00:02:56	--	Michael is now known as Guest10724
2013-09-10 00:03:00	acowley	Yeah
2013-09-10 00:03:06	shachaf	I think it's considered bad form to @remember yourself.
2013-09-10 00:03:19	benmachine	shachaf: in this case it doesn't seem to be for humour
2013-09-10 00:03:24	applikative	shachaf: yes it was a technical problem, i'm hoping donri will work around it
2013-09-10 00:03:36	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (Ping timeout: 240 seconds)
2013-09-10 00:03:44	acowley	quchen: I guess it depends on how specific the proposal is. You could start by trying it out here, and see if shachaf knows if its already a lens combinator. Then try the cafe if it's a big change, etc.
2013-09-10 00:03:52	shachaf	help
2013-09-10 00:03:54	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-10 00:04:04	monochrom	oh tricky, "across" contains "ross"
2013-09-10 00:04:10	quchen	shachaf: Is there a lens combinator for adding type signatures to the Haddock index overview? :-D
2013-09-10 00:04:23	<--	tseud (~asdflkjs@188-194-208-216-dynip.superkabel.de) has quit (Ping timeout: 246 seconds)
2013-09-10 00:04:33	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 00:04:35	shachaf	That depends. What's a combinator?
2013-09-10 00:04:47	-->	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has joined #haskell
2013-09-10 00:04:50	applikative	actually I should attribute it to acowly
2013-09-10 00:05:00	acowley	You're just not good with names, are you?
2013-09-10 00:05:18	acowley	shachaf: It's a lens thing. Pretty obscure.
2013-09-10 00:05:30	applikative	@forget applicative Note to self: It's Ross Paterson not Ross Patterson, you fool!
2013-09-10 00:05:31	lambdabot	Done.
2013-09-10 00:05:39	shachaf	applikative: This is a good state.
2013-09-10 00:05:41	applikative	acowley: oh god.
2013-09-10 00:05:42	shachaf	Don't @remember it now.
2013-09-10 00:05:45	quchen	Oh, there *is* a mailing list, the reference just isn't on the main Haskell mailing list overview.
2013-09-10 00:05:53	<--	shintah (bebble@h-151-134.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-09-10 00:05:55	<--	quarkup (~quarkup@a79-168-109-199.cpe.netcabo.pt) has quit (Quit: WeeChat 0.4.1)
2013-09-10 00:06:03	monochrom	you can use @tell :)
2013-09-10 00:06:27	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 00:06:28	applikative	i tell Ross Paterson how to spell his name?
2013-09-10 00:06:44	haasn	I somehow don't think @remember will help you remember things.
2013-09-10 00:06:49	applikative	what's a good state shachaf ?
2013-09-10 00:06:54	acowley	Yes, otherwise people will always have doubt about the first vowel sound.
2013-09-10 00:07:27	<--	ystael (~ystael@64.206.121.41) has quit (Quit: leaving)
2013-09-10 00:07:38	monochrom	no, you tell yourself. :)
2013-09-10 00:07:43	-->	ystael (~ystael@64.206.121.41) has joined #haskell
2013-09-10 00:08:18	monochrom	there is also @where :)
2013-09-10 00:08:24	applikative	haasn: no, but a few erroneous @remembers and @forgets might help with a spelling issue
2013-09-10 00:08:24	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 00:08:39	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 00:09:22	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-09-10 00:09:28	applikative	haasn: I was merely attempting to express to acowlie that I wouldn't forget the spelling of Paterson's name
2013-09-10 00:09:30	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 00:09:48	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 00:09:55	acowley	:P
2013-09-10 00:10:10	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Remote host closed the connection)
2013-09-10 00:10:18	haasn	what's wrong with “acowley: I won't forget the spelling of Paterson's name again”?
2013-09-10 00:10:21	monochrom	I don't mind misspellings.
2013-09-10 00:10:33	acowley	trichromatic: That's lucky
2013-09-10 00:10:35	applikative	haasn: probably nothing?
2013-09-10 00:10:55	applikative	multichrom, very kind of you
2013-09-10 00:10:59	<--	mmaruseacph42 (9e796b9a@gateway/web/freenode/ip.158.121.107.154) has quit (Ping timeout: 250 seconds)
2013-09-10 00:11:03	 *	monochrom bows!
2013-09-10 00:11:05	applikative	monotone
2013-09-10 00:11:14	<--	raichoo (~raichoo@mue-88-130-5-020.dsl.tropolys.de) has quit (Read error: Operation timed out)
2013-09-10 00:11:21	-->	jfischoff_ (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 00:11:30	monochrom	monochromatic restriction
2013-09-10 00:12:04	-->	Jesin (~Jessin_@Dyn156109.cc.lehigh.edu) has joined #haskell
2013-09-10 00:12:09	monochrom	"hi, what does --haddock-hyperlink-source does under the monochromatic restriction?" :)
2013-09-10 00:12:44	applikative	it means that the haddocks are printed in black on a back background
2013-09-10 00:12:53	monochrom	\∩/
2013-09-10 00:12:55	applikative	black background
2013-09-10 00:12:57	<--	ystael (~ystael@64.206.121.41) has quit (Ping timeout: 245 seconds)
2013-09-10 00:13:02	<--	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Ping timeout: 256 seconds)
2013-09-10 00:13:11	acowley	The dreaded monochrom restriction is an alpha equivalence among all IRC nicks. We are #haskell.
2013-09-10 00:13:22	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 276 seconds)
2013-09-10 00:13:22	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 245 seconds)
2013-09-10 00:13:43	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-10 00:14:03	<--	aupiff (~aupiff@c-68-40-168-223.hsd1.mi.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 00:15:03	<--	Apocalisp (~textual@mobile-166-147-099-010.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-10 00:15:15	<--	Thra11 (~Thra11@201.58.113.87.dyn.plus.net) has quit (Ping timeout: 264 seconds)
2013-09-10 00:16:18	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-10 00:16:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-09-10 00:17:03	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 264 seconds)
2013-09-10 00:17:04	-->	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has joined #haskell
2013-09-10 00:17:10	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 248 seconds)
2013-09-10 00:17:48	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 00:18:10	<--	Arkantos (~arkantos@77.245.65.162) has quit (Quit: Self-derezzing...)
2013-09-10 00:18:20	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-10 00:18:21	--	jfischoff_ is now known as jfischoff
2013-09-10 00:18:23	<--	profmakx (makx@unaffiliated/profmakx) has quit (Ping timeout: 246 seconds)
2013-09-10 00:18:51	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-10 00:19:16	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-10 00:19:34	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 00:19:47	<--	tel (~tel@ip-64-134-241-94.public.wayport.net) has quit (Ping timeout: 260 seconds)
2013-09-10 00:19:50	<--	applikative (~m@209.248.28.12) has quit (Ping timeout: 248 seconds)
2013-09-10 00:20:05	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-09-10 00:20:33	-->	lusory (~lusory@42.60.25.228) has joined #haskell
2013-09-10 00:20:33	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-09-10 00:21:16	-->	profmakx (makx@moore.morphism.de) has joined #haskell
2013-09-10 00:21:17	<--	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has quit (Ping timeout: 245 seconds)
2013-09-10 00:21:22	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:a896:e2cb:8509:90ac) has joined #haskell
2013-09-10 00:21:25	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-09-10 00:21:33	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-10 00:21:34	<--	profmakx (makx@moore.morphism.de) has quit (Changing host)
2013-09-10 00:21:35	-->	profmakx (makx@unaffiliated/profmakx) has joined #haskell
2013-09-10 00:21:50	<--	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2013-09-10 00:22:10	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-10 00:22:33	<--	jmcarthur_mobile (~jmcarthur@mad2536d0.tmodns.net) has quit (Read error: Connection reset by peer)
2013-09-10 00:22:52	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-09-10 00:23:05	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-10 00:23:07	-->	jmcarthur_mobile (~jmcarthur@mad2536d0.tmodns.net) has joined #haskell
2013-09-10 00:24:33	<--	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-09-10 00:24:44	<--	Guest10724 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 00:25:31	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 00:25:42	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 276 seconds)
2013-09-10 00:25:44	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:a896:e2cb:8509:90ac) has quit (Ping timeout: 246 seconds)
2013-09-10 00:25:52	<--	wollw (davidshere@unaffiliated/wollw) has quit (Quit: leaving)
2013-09-10 00:25:52	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 00:26:05	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-10 00:26:22	-->	klaut (~klaut@188-230-223-121.dynamic.t-2.net) has joined #haskell
2013-09-10 00:26:22	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-10 00:26:49	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 00:28:03	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-09-10 00:29:03	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 00:29:10	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Read error: Connection reset by peer)
2013-09-10 00:29:22	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 00:29:31	-->	brisbin_ (~patrick@c-98-240-92-177.hsd1.tn.comcast.net) has joined #haskell
2013-09-10 00:29:35	<--	brisbin_ (~patrick@c-98-240-92-177.hsd1.tn.comcast.net) has quit (Remote host closed the connection)
2013-09-10 00:30:07	<--	klaut (~klaut@188-230-223-121.dynamic.t-2.net) has quit (Remote host closed the connection)
2013-09-10 00:30:29	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-10 00:30:58	<--	Desheng (~Desheng@166.181.66.136) has quit (Ping timeout: 245 seconds)
2013-09-10 00:30:59	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-10 00:31:00	 *	hackagebot tconfig 0.5.2 - Simple text configuration file parser library.  http://hackage.haskell.org/package/tconfig-0.5.2 (MariusGhita)
2013-09-10 00:31:16	<--	MitchellSalad (40471a12@gateway/web/freenode/ip.64.71.26.18) has quit (Quit: Page closed)
2013-09-10 00:32:14	-->	Moggle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-10 00:32:23	<--	Caztiel (~me@unaffiliated/caztiel) has quit (Ping timeout: 260 seconds)
2013-09-10 00:32:30	-->	Desheng (~Desheng@166.181.67.136) has joined #haskell
2013-09-10 00:32:57	-->	ivoscc (~ivo@pc-6-57.rcp.net.pe) has joined #haskell
2013-09-10 00:33:26	<--	Neqoxec (~Neqoxec@24.21.110.149) has quit (Ping timeout: 240 seconds)
2013-09-10 00:33:28	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-10 00:34:12	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 245 seconds)
2013-09-10 00:34:58	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-10 00:35:32	<--	chuzz (~user@unaffiliated/chuzz) has quit (Remote host closed the connection)
2013-09-10 00:35:36	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-09-10 00:37:35	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-10 00:37:41	<--	carlosgaldino (~carlosgal@177.148.140.113) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 00:38:57	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-10 00:39:02	<--	jayprich (~jayprich@unaffiliated/jayprich) has quit (Ping timeout: 248 seconds)
2013-09-10 00:39:20	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Read error: Operation timed out)
2013-09-10 00:39:27	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-09-10 00:39:28	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-10 00:39:41	icarus127	What are the practical differences between Data.Map from containers and Data.HashMap.Lazy from unordered-containers?
2013-09-10 00:39:50	-->	Apocalisp (~textual@mobile-166-147-099-010.mycingular.net) has joined #haskell
2013-09-10 00:39:51	<--	akurei_ (~akurei@31.193.12.99) has quit (Ping timeout: 264 seconds)
2013-09-10 00:40:24	Peaker	requiring Ord rather than Hashable for one..
2013-09-10 00:40:36	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 00:40:40	copumpkin	icarus12: Data.Map allows you to do ordery things with it
2013-09-10 00:40:50	copumpkin	like taking efficient ranges and finding the min/max in log time
2013-09-10 00:41:30	-->	zbcm (~zbcm@147.41.7.17) has joined #haskell
2013-09-10 00:42:05	icarus127	Ah, right I see those in the API now
2013-09-10 00:42:06	icarus127	thanks
2013-09-10 00:42:09	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-10 00:42:11	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 246 seconds)
2013-09-10 00:42:37	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-10 00:43:23	<--	pkrnj (~pkrnj@bas2-montreal47-2925492380.dsl.bell.ca) has quit (Quit: Computer has gone to sleep.)
2013-09-10 00:43:40	-->	parcs__ (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-10 00:44:11	-->	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-10 00:44:38	<--	parcs_ (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2013-09-10 00:44:52	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 00:44:59	<--	epsilonhalbe (~epsilonha@62.68.205.246) has left #haskell
2013-09-10 00:45:05	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 00:45:07	-->	NihilistDandy (~ND@c-24-147-92-50.hsd1.vt.comcast.net) has joined #haskell
2013-09-10 00:45:15	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-10 00:46:25	-->	jayprich (~jayprich@unaffiliated/jayprich) has joined #haskell
2013-09-10 00:46:46	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 00:46:55	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Client Quit)
2013-09-10 00:47:35	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 256 seconds)
2013-09-10 00:47:38	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 00:47:49	--	icarus127 is now known as asmyers
2013-09-10 00:47:51	<--	samhuang91 (~samhuang9@nat/cisco/x-mvjzaotppglnyvpy) has quit (Ping timeout: 240 seconds)
2013-09-10 00:48:11	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 00:48:13	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 00:48:22	<--	yfyf (~yfyf@wcw-stud-239-231.wireless.uva.nl) has quit (Ping timeout: 245 seconds)
2013-09-10 00:48:52	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-10 00:48:57	dennis	got another question to criterion. Is it possible to have something like: bench "myname" $ whnf (functionToTest (generateValues)) 1 and exclude the function generateValues from the testing?
2013-09-10 00:49:00	<--	poucet_ (~chris@li23-146.members.linode.com) has quit (Ping timeout: 268 seconds)
2013-09-10 00:49:10	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 248 seconds)
2013-09-10 00:49:21	<--	iswilson (~ian@192-0-175-9.cpe.teksavvy.com) has quit (Remote host closed the connection)
2013-09-10 00:49:26	<--	edon (~user@albalug/edon) has quit (Ping timeout: 240 seconds)
2013-09-10 00:49:37	--	mrshoe is now known as mrshoeASEL-IR
2013-09-10 00:49:39	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-10 00:49:52	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Client Quit)
2013-09-10 00:50:03	<--	Redz (~red@82.113.106.145) has quit (Ping timeout: 264 seconds)
2013-09-10 00:50:45	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 00:51:45	-->	[[zz]] (~q@node-1cdp.pool-101-108.dynamic.totbb.net) has joined #haskell
2013-09-10 00:52:09	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-10 00:52:14	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 240 seconds)
2013-09-10 00:52:16	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-10 00:54:28	<--	geekosaur (allbery@dreamshell.ttuttle.net) has quit (Ping timeout: 260 seconds)
2013-09-10 00:54:43	<--	Apocalisp (~textual@mobile-166-147-099-010.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-10 00:54:50	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-10 00:54:51	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Quit: leaving)
2013-09-10 00:55:00	-->	zacts (~zacts@unaffiliated/zacts) has joined #haskell
2013-09-10 00:55:17	-->	poucet (~chris@li23-146.members.linode.com) has joined #haskell
2013-09-10 00:55:33	-->	geekosaur (allbery@dreamshell.ttuttle.net) has joined #haskell
2013-09-10 00:55:43	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 00:56:10	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 00:56:22	-->	NiceOneBrah (~niceonebr@173.247.206.226) has joined #haskell
2013-09-10 00:56:24	-->	samhuang91 (~samhuang9@nat/cisco/x-kycznsermlseqivq) has joined #haskell
2013-09-10 00:56:33	--	Michael is now known as Guest85185
2013-09-10 00:58:21	<--	schlaftier (~daniel@5.158.182.23) has quit (Ping timeout: 256 seconds)
2013-09-10 00:59:01	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 00:59:31	<--	nexx (nexx@unaffiliated/xxen) has quit (Ping timeout: 276 seconds)
2013-09-10 00:59:36	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 01:00:02	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 01:00:38	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-10 01:01:15	<--	gentleben (~gentleben@12.250.97.26) has quit (Quit: gentleben)
2013-09-10 01:01:21	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-10 01:01:23	<--	evohunz (~evohunz@187.85.176.249) has quit (Ping timeout: 245 seconds)
2013-09-10 01:01:28	-->	SrPx (b11320f7@gateway/web/freenode/ip.177.19.32.247) has joined #haskell
2013-09-10 01:01:44	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 01:01:50	SrPx	Do you guys have any argument of authority supporting haskell? Like someone famous, influent or important. I guess this is the only thing that works with some people...
2013-09-10 01:01:50	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Read error: Connection reset by peer)
2013-09-10 01:02:15	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-10 01:02:19	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-10 01:02:50	ion	John Carmack, kind of
2013-09-10 01:03:38	Peaker	why does http://hackage.haskell.org/packages/archive/unix/2.6.0.1/doc/html/System-Posix-DynamicLinker.html#v:dlsym <-- return a FunPtr? dlsym can be used with functions and non-functions...
2013-09-10 01:03:47	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-10 01:04:02	<--	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has quit (Ping timeout: 256 seconds)
2013-09-10 01:04:55	Fuuzetsu	SrPx: I guess that depends on who _you_ consider famous, influential or important.
2013-09-10 01:04:56	<--	quchen (~quchen@p54AA0B90.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-10 01:04:58	Peaker	luckily, castFunPtrToPtr exists
2013-09-10 01:05:01	-->	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-10 01:05:16	SrPx	Fuuzetsu: any suggetion?
2013-09-10 01:05:38	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Ping timeout: 246 seconds)
2013-09-10 01:05:38	<--	thunderrd (~thunderrd@119.42.79.52) has quit (Ping timeout: 246 seconds)
2013-09-10 01:05:44	SrPx	Peaker: pointers in Haskell!?????????!!
2013-09-10 01:06:02	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-10 01:06:09	Cale	SrPx: of course
2013-09-10 01:06:14	-->	setmeaway (stemearay@119.201.52.138) has joined #haskell
2013-09-10 01:06:21	Fuuzetsu	Cale is famous and influential.
2013-09-10 01:06:36	Fuuzetsu	In some circles.
2013-09-10 01:06:50	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-10 01:06:52	<--	Desheng (~Desheng@166.181.67.136) has quit (Ping timeout: 256 seconds)
2013-09-10 01:06:53	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-10 01:07:00	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-10 01:07:18	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-10 01:07:19	<--	sxn_ (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-09-10 01:07:22	-->	Desheng (~Desheng@166.181.67.24) has joined #haskell
2013-09-10 01:07:28	sclv	eric meijer
2013-09-10 01:07:30	benmachine	Peaker: what's not fun about dlsym? (ha ha ha)
2013-09-10 01:07:34	<--	fizruk (~fizruk@79.165.40.18) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-10 01:07:37	SrPx	Fuuzetsu: okay. I'll update my definition to: billionaire, highly influential researcher, CEO/Founder/etc of a big business, etc etc
2013-09-10 01:07:48	Peaker	SrPx: Haskell has a C FFI, and re-exposes all of C's low-level thingies
2013-09-10 01:08:04	SrPx	cmon that is the problem with mathy people, you have to define everything
2013-09-10 01:08:08	sclv	SrPx: eric meijer has spoken well of haskell, and played a role in it over years.
2013-09-10 01:08:29	sclv	he's as highly influential as cs researchers get
2013-09-10 01:08:30	<--	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-09-10 01:08:40	-->	HugoDaniel (~hugo@bl5-41-128.dsl.telepac.pt) has joined #haskell
2013-09-10 01:08:43	sclv	doug mcillroy is also a declared haskell fan
2013-09-10 01:08:43	-->	ParahSail1n (~parahsail@99-25-202-211.lightspeed.hstntx.sbcglobal.net) has joined #haskell
2013-09-10 01:08:44	<--	ParahSail1n (~parahsail@99-25-202-211.lightspeed.hstntx.sbcglobal.net) has quit (Changing host)
2013-09-10 01:08:44	-->	ParahSail1n (~parahsail@unaffiliated/parahsailin) has joined #haskell
2013-09-10 01:08:48	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-10 01:08:49	-->	nominolo_ (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-10 01:09:04	sclv	(inventor of unix pipes, and so arguably a bit influential)
2013-09-10 01:09:15	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-10 01:09:30	-->	ParahSai1in (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 01:09:48	-->	JobV1 (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-10 01:09:53	-->	SBauer1 (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-10 01:10:00	Cale	Simon Peyton Jones is a highly influential researcher ;)
2013-09-10 01:10:00	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:10:00	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Read error: Connection reset by peer)
2013-09-10 01:10:00	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:10:00	<--	ParahSailin (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:10:01	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:10:01	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 01:10:02	sclv	honestly billionaire doesn't/shouldn't provide any authority. like if trump endorsed haskell i would hardly find that compelling
2013-09-10 01:10:04	sclv	
2013-09-10 01:10:17	<--	akahn (uid2243@gateway/web/irccloud.com/x-kmcffrdbbdkgqwxo) has quit (Ping timeout: 256 seconds)
2013-09-10 01:10:17	<--	ggherdov (uid11402@gateway/web/irccloud.com/x-oikltsonwgznartv) has quit (Ping timeout: 256 seconds)
2013-09-10 01:10:17	<--	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-armazhafgyqnyrmg) has quit (Ping timeout: 256 seconds)
2013-09-10 01:10:26	Dodek	i'd be surprised if more than a handful of billionaires knew what haskell is
2013-09-10 01:10:48	sclv	lennart likes haskell, i hear. he's pretty influential!
2013-09-10 01:10:50	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 256 seconds)
2013-09-10 01:10:53	-->	levi` (~user@c-174-52-89-43.hsd1.ut.comcast.net) has joined #haskell
2013-09-10 01:10:57	copumpkin	if someone would be convinced by a billionaire endorsing haskell, I don't think they're worth your time to convince
2013-09-10 01:10:59	<--	Guest85185 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:11:01	 *	hackagebot hopenpgp-tools 0.0.1 - hOpenPGP-based command-line tools  http://hackage.haskell.org/package/hopenpgp-tools-0.0.1 (ClintAdams)
2013-09-10 01:11:04	<--	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 01:11:10	-->	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-10 01:11:14	<--	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has quit (Quit: .)
2013-09-10 01:11:24	<--	jmcarthur_mobile (~jmcarthur@mad2536d0.tmodns.net) has quit (Ping timeout: 256 seconds)
2013-09-10 01:11:35	-->	Desheng2 (~Desheng@166.181.67.243) has joined #haskell
2013-09-10 01:11:39	<--	Velpoman (~Velpoman@nat/yahoo/x-yldkjzlvaagbomfv) has quit (Ping timeout: 264 seconds)
2013-09-10 01:11:51	<--	Desheng (~Desheng@166.181.67.24) has quit (Ping timeout: 240 seconds)
2013-09-10 01:11:58	<--	ParaSa1lin (~parahsail@unaffiliated/parahsailin) has quit (Ping timeout: 256 seconds)
2013-09-10 01:12:22	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-10 01:12:58	-->	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-eculxoofosxuylih) has joined #haskell
2013-09-10 01:13:03	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-10 01:14:40	<--	luksow (~luke@apn-31-1-167-117.dynamic.gprs.plus.pl) has quit (Quit: Wychodzi)
2013-09-10 01:15:30	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-10 01:15:58	<--	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has quit (Ping timeout: 245 seconds)
2013-09-10 01:16:09	<--	CADD (~CADD@12.227.104.109) has quit (Read error: Operation timed out)
2013-09-10 01:16:39	HugoDaniel	im a hundrionaire, and i like haskell
2013-09-10 01:16:55	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-10 01:17:28	--	levi` is now known as levi
2013-09-10 01:18:06	Twey	sclv: Lennart Poettering likes Haskell?
2013-09-10 01:18:29	 *	Twey starts looking for a new favourite language that doesn't have its head on the chopping block
2013-09-10 01:18:34	sclv	yeah and simon cowell or something i heard
2013-09-10 01:18:37	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-10 01:18:39	-->	miclorb (~textual@ppp121-44-83-40.lns20.syd6.internode.on.net) has joined #haskell
2013-09-10 01:18:40	-->	thunderrd (~thunderrd@119.42.74.149) has joined #haskell
2013-09-10 01:19:49	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 01:19:55	--	flazz is now known as flazz_gone
2013-09-10 01:20:18	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 01:20:42	applikativ	oh macilroy has that charming library where is it
2013-09-10 01:21:25	applikativ	ah here with a paper attached http://www.cs.dartmouth.edu/~doug/powser.html
2013-09-10 01:21:41	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-09-10 01:21:45	<--	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has quit (Read error: Connection reset by peer)
2013-09-10 01:22:08	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-10 01:22:10	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:fd8f:dbc5:a7fd:2a80) has joined #haskell
2013-09-10 01:22:10	<--	alszar (alszar@nat/rackspace/x-nxvzekrvhmseftto) has quit (Ping timeout: 256 seconds)
2013-09-10 01:22:10	applikativ	i think he's not a billionaire though
2013-09-10 01:22:15	<--	stepkut (~user@c-24-12-184-84.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-10 01:23:30	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 01:23:38	-->	thakhad-24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has joined #haskell
2013-09-10 01:24:21	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 01:24:40	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 01:25:03	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 01:25:10	-->	emmp (~manolis@178.128.205.133.dsl.dyn.forthnet.gr) has joined #haskell
2013-09-10 01:25:35	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Ping timeout: 246 seconds)
2013-09-10 01:26:27	-->	predator217 (~predator1@p50803AC1.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 01:26:38	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:fd8f:dbc5:a7fd:2a80) has quit (Ping timeout: 246 seconds)
2013-09-10 01:26:40	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-09-10 01:27:10	-->	tabemann (~travisb@adsl-68-248-233-187.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-10 01:27:32	emmp	hey everyone, is there a way in emacs' haskell-mode to include expressions to be evaluated on file load?
2013-09-10 01:27:35	-->	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-10 01:27:57	emmp	I get "Parse error: naked expression at top level"
2013-09-10 01:28:55	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-10 01:30:10	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 01:30:19	<--	predator117 (~predator1@p50803865.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2013-09-10 01:31:04	tabemann	umm there's a reason it 's a parse error
2013-09-10 01:31:13	tabemann	you can't *have* naked expressions at top level
2013-09-10 01:31:48	-->	normanrichards (~normanric@rrcs-67-78-97-126.sw.biz.rr.com) has joined #haskell
2013-09-10 01:31:52	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-09-10 01:31:52	emmp	yes, I understand, bust I want to evaluate a part of the file on ghci
2013-09-10 01:32:00	emmp	so that I don't have to switch buffers
2013-09-10 01:32:15	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-10 01:32:19	emmp	and type in the expressions in the REPL
2013-09-10 01:32:23	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Ping timeout: 256 seconds)
2013-09-10 01:32:28	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-10 01:33:03	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-10 01:33:29	emmp	I don't know if I'm clear.
2013-09-10 01:33:54	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-10 01:34:00	ekipan	I don't know emacs, and this doesn't fix your problem, but giving your expression a toplevel name means you won't have to retype the whole thing each time at least
2013-09-10 01:34:43	emmp	good idea.
2013-09-10 01:34:47	emmp	thanks
2013-09-10 01:34:57	-->	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-09-10 01:35:03	ekipan	I would assume there's a way to order emacs to load ghci in a buffer and evaluate that name each time you reload your file
2013-09-10 01:35:06	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 01:35:37	emmp	evaluate a single line, yes, that would be very useful.
2013-09-10 01:36:22	<--	samhuang91 (~samhuang9@nat/cisco/x-kycznsermlseqivq) has quit
2013-09-10 01:36:30	ekipan	maybe even a job for your ghci dotfile if you want it even outside emacs
2013-09-10 01:37:16	--	hdevalence|away is now known as hdevalence
2013-09-10 01:37:29	danilo2	Hello :) Is there a way in Hasell to define a typeclass "class X a where f :: a -> a" and create an instance of this class, BUT: define the method "f" in such way, that if the instance will be matched, the compiler will print my custom error message (during the compilation stage)?
2013-09-10 01:38:22	latro`a_	I don't think you can make GHC print a custom error at compile time in the first place
2013-09-10 01:38:35	enthropy	danilo2: you can have a context that won't be satisfied
2013-09-10 01:38:39	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-10 01:38:46	<--	Wuzzy (~Wuzzy@p549FB069.dip0.t-ipconnect.de) has quit (Ping timeout: 248 seconds)
2013-09-10 01:39:00	enthropy	 instance YouAreMakingATerribleMistake a => X a
2013-09-10 01:39:07	<--	artyomkazak (~artyomkaz@host-60-157-66-217.spbmts.ru) has quit (Ping timeout: 260 seconds)
2013-09-10 01:39:14	enthropy	and have no instances of the class YouAreMakingATerribleMistake
2013-09-10 01:39:19	<--	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 01:40:09	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-10 01:40:18	<--	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-09-10 01:40:22	enthropy	probably people can see through the error message "suggested fix: add instance YouAreMakingATerribleMistake Int"
2013-09-10 01:40:26	danilo2	enthropy, latero`a_ : Thank you, I know I can have a context, but I would love to replace somehow the error message - I'm translating a "pseudocode" to haskell code and it would be a lot clerer if the error will be replaced (It is probably not possible that way, but I was hoping to get an suprising answer :) )
2013-09-10 01:40:36	byorgey	danilo2: this is a feature which many people developing embedded domain-specific languages would love to have
2013-09-10 01:40:42	byorgey	it is not possible right now.
2013-09-10 01:40:46	-->	cmsmcq (~cmsmcq@65.19.20.147) has joined #haskell
2013-09-10 01:41:05	danilo2	enthropy, latero`a_, byorgey: Is it maybe possible using GHC Api?
2013-09-10 01:41:26	enthropy	you can process those error messages that contain YouAreMakingATerribleMistake
2013-09-10 01:41:38	byorgey	danilo2: not in any sane way that I know of.
2013-09-10 01:41:51	danilo2	enthropy: Yeah, that is a good solution right now :) Thank you :)
2013-09-10 01:42:17	enthropy	or just leave them as-is... there's not that much to translate
2013-09-10 01:42:25	byorgey	danilo2: however, you will be glad to hear that a PhD student is working on this
2013-09-10 01:42:30	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 01:42:41	monochrom	I am not sure that is good or bad, haha
2013-09-10 01:42:41	enthropy	if you have -XDataKinds, you can put the error message as a string
2013-09-10 01:42:42	byorgey	under Jurriaan Hage at Utrecht
2013-09-10 01:42:43	danilo2	byorgey: I'm very happy to hear that!
2013-09-10 01:43:06	danilo2	enthropy: really? how?
2013-09-10 01:43:27	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 264 seconds)
2013-09-10 01:43:31	NihilistDandy	byorgey: I've been trying out your code golf assignment. That first one's pretty rough for the second week of classes :D
2013-09-10 01:43:35	monochrom	it has a high-probability implication of "will die off after he/she graduates"
2013-09-10 01:43:47	-->	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 01:44:04	byorgey	monochrom: well, that's true, sadly.
2013-09-10 01:44:11	byorgey	but it is still better than no one working on it.
2013-09-10 01:44:36	NihilistDandy	But then I saw the mind-blowing lens thing that ekmett wrote for it, and now I'm trying to wrap my head around that
2013-09-10 01:44:38	byorgey	so I don't see how it can possibly be bad.
2013-09-10 01:44:41	danilo2	byorgey: Is it open source? Can we test it one day?
2013-09-10 01:44:43	byorgey	just good with very low probability.
2013-09-10 01:44:49	byorgey	danilo2: I have no idea.
2013-09-10 01:45:01	<--	SrPx (b11320f7@gateway/web/freenode/ip.177.19.32.247) has quit (Ping timeout: 250 seconds)
2013-09-10 01:45:08	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 01:45:09	byorgey	I don't even know the name of the PhD student.  Just that a position for working on this problem was advertised and filled.
2013-09-10 01:45:15	monochrom	relatedly, HaRe has just risen again
2013-09-10 01:45:16	hpaste	enthropy pasted “danlio” at http://lpaste.net/92813
2013-09-10 01:45:41	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-10 01:45:47	enthropy	danlio2 ^^ look there
2013-09-10 01:46:16	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-10 01:46:38	danilo2	enthropy: Thank you for this example! It is the best solution so far :) I'm starting using it right now! :)
2013-09-10 01:46:41	--	Nisstyre-laptop is now known as nisstyre
2013-09-10 01:47:11	enthropy	well I don't think you're likely to be able to do much string processing there
2013-09-10 01:47:16	-->	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has joined #haskell
2013-09-10 01:47:41	byorgey	enthropy: haha, nice
2013-09-10 01:47:45	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 01:48:14	danilo2	enthropy: Ok, but for now it is everything I need :) In the future I will dig into GHC API - "Maybe" I will find another solution for this :)
2013-09-10 01:48:41	<--	thakhad-24 (~dakhath-4@ip68-10-235-169.hr.hr.cox.net) has quit (Quit: Bye)
2013-09-10 01:49:14	-->	ics (~ics@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-10 01:50:10	byorgey	I don't think the GHC API will help very much.
2013-09-10 01:50:16	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 01:50:19	enthropy	danilo2: I'm not sure why that one only prints an error if you try to use a
2013-09-10 01:50:35	<--	kuribas (~user@d54C430B0.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 01:50:40	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-10 01:50:52	enthropy	seems like a -fdefer-type-errors is happening when it shouldn't
2013-09-10 01:50:57	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Read error: Operation timed out)
2013-09-10 01:53:01	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-10 01:53:14	danilo2	enthropy: I didn't see such error - I copied the example and trying to use "a" in "main" and getting "custom error message"
2013-09-10 01:53:43	enthropy	I mean if you just have `a' as a top-level definition
2013-09-10 01:53:48	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 01:53:50	enthropy	and do nothing with it
2013-09-10 01:53:57	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-10 01:54:02	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-10 01:54:02	<--	tibbe (~tibbe@207.198.105.20) has quit (Read error: Connection reset by peer)
2013-09-10 01:54:11	 *	edwardk waves hello.
2013-09-10 01:54:29	danilo2	entrhopy: ah, I see
2013-09-10 01:54:40	danilo2	byorgey: You're probably right, but I still need GHC API to do some work. By the way - I have a question connected to GHC API, which I will try to solve in one month from now or something like that:
2013-09-10 01:54:47	edwardk	i'm sitting here trying to devise an algorithm for computing a crc monoidally, and i think i've got it down to one missing step.
2013-09-10 01:54:58	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-09-10 01:55:22	edwardk	anybody here familiar with polynomial division in that setting?
2013-09-10 01:55:50	<--	james-ubc (~james@dhcp-206-87-192-152.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 248 seconds)
2013-09-10 01:56:23	danilo2	Right now I'm generating Haskell code and I have to create a lot of typeclasses containing one method (because the program is generating a lot of different modules, all defining datatypes, which implements the same type classes). The uestion is - Can I somehow using GHC API "fake" the existence of these files? I mean
2013-09-10 01:56:47	enthropy	why can't you have real files?
2013-09-10 01:56:50	-->	scripty (~scripty@117.192.160.184) has joined #haskell
2013-09-10 01:56:54	danilo2	Simply tell GHC that if it is searching for A/<name>.hs file it will find there a typeclass <name> ?
2013-09-10 01:57:03	<--	Jesin (~Jessin_@Dyn156109.cc.lehigh.edu) has quit (Remote host closed the connection)
2013-09-10 01:57:32	-->	pkrnj (~pkrnj@bas2-montreal47-2925492380.dsl.bell.ca) has joined #haskell
2013-09-10 01:57:32	edwardk	the two properties i'm looking to exploit is the notion of zero-blindness which drives the choice of 'initial xor' for real CRCs: crc 0 (replicate n 0 ++ a) = crc 0 a; and the linearity-like condition that all true CRCs satisfy: crc r1 a1 `xor` crc r2 a2 = crc (xor r1 r2, xor a1 a2)
2013-09-10 01:57:34	arkeet	why not generate those with TH?
2013-09-10 01:57:39	<--	scriptor (~Scriptor@unaffiliated/scriptor) has quit (Quit: scriptor)
2013-09-10 01:57:57	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 01:57:58	danilo2	enthropy: I can, but in very bad case It will generate (lets say) 100 files. Each of threm HAS TO be registered in cabal as a library (because other libraries would use it - AS A COMMON typeclass) :( (oh, maybe this is related to cabal api?)
2013-09-10 01:58:20	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Quit: sclv)
2013-09-10 01:58:30	arkeet	why do they need to be in separate files?
2013-09-10 01:58:46	enthropy	somewhere inside Distribution.Simple is something for parsing cabal files
2013-09-10 01:58:52	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 01:58:59	<--	pkrnj (~pkrnj@bas2-montreal47-2925492380.dsl.bell.ca) has quit (Client Quit)
2013-09-10 01:59:07	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-10 01:59:16	-->	brainwash (~brainwash@unaffiliated/brainwash) has joined #haskell
2013-09-10 01:59:28	<--	meretrix (~user@unaffiliated/meretrix) has quit (Read error: Operation timed out)
2013-09-10 01:59:49	-->	meretrix (~user@unaffiliated/meretrix) has joined #haskell
2013-09-10 01:59:57	danilo2	arkeet: because they are like function names. So It is simply impossible to generate in one file all possible function names. So lets say different users are generating different libraries, but if one library uses A.hs (which defines typeclass A), and other uses creates other library which uses A.hs then these typeclasses should be considered THE SAME typeclass
2013-09-10 02:00:00	<--	brainwash (~brainwash@unaffiliated/brainwash) has left #haskell
2013-09-10 02:00:18	 *	arkeet isn't following
2013-09-10 02:00:56	danilo2	enthropy: Ok, I till look into it but in few weeks from now :( I've got too much current task to move forward with this one
2013-09-10 02:01:01	danilo2	enthropy: Than you :)
2013-09-10 02:01:17	 *	enthropy did something for cabal files in http://hackage.haskell.org/package/module-management
2013-09-10 02:01:30	enthropy	hidden in the scripts/ bit that's not exported there
2013-09-10 02:01:55	edwardk	so crc r (a1 ++ a2) = crc r ((a1 ++ replicate (length a2) 0) `xor` (replicate (length a1) 0 ++ a2)) -- if we switch to ^ for replicate and + for xor to reduce the pain then we can factor that using blindness and linearity into   crc(crc(r,0^k1) + crc(0,a1), 0^k2) + crc(0,a2)
2013-09-10 02:02:13	<--	NihilistDandy (~ND@c-24-147-92-50.hsd1.vt.comcast.net) has quit
2013-09-10 02:02:46	<--	CatMtKing (~CatMtKing@ucrwpa1-fs-33-225.bulk.ucr.edu) has quit (Quit: Leaving)
2013-09-10 02:02:50	edwardk	that means all i need is the crc from a fixed initial condition and the ability to quickly calculate a crc(r,0^k) the crc from some initial state r applied to a string of k 0's
2013-09-10 02:02:52	<--	ktosiek (~ktosiek@46.22.173.54) has quit (Ping timeout: 264 seconds)
2013-09-10 02:02:57	edwardk	so now i need to find a way to compute that quickly
2013-09-10 02:03:04	danilo2	enthropy: Than you! I'll look there :)
2013-09-10 02:03:12	-->	Raydiation (~bernhard@chello080108042248.32.11.vie.surfer.at) has joined #haskell
2013-09-10 02:03:14	-->	bkolera (~textual@123.200.143.251) has joined #haskell
2013-09-10 02:03:14	edwardk	if i can do that, then the monoid itself is pretty cheap.
2013-09-10 02:03:17	<--	evohunz (~evohunz@187.85.176.249) has quit (Remote host closed the connection)
2013-09-10 02:03:28	Raydiation	hm, i think i understood the IO monad http://www.youtube.com/watch?v=z0N1aZ6SnBk
2013-09-10 02:03:29	edwardk	and you could then calculate crc's off a fingertree incrementally, etc.
2013-09-10 02:03:36	Raydiation	its basically like dependency injection
2013-09-10 02:03:43	danilo2	enthropy: Could you please tell me one mor thing? what does mean  ":: Symbol" in yours example "class Failure (a :: Symbol)" ?
2013-09-10 02:03:50	edwardk	anybody following? =)
2013-09-10 02:03:52	Raydiation	you need to pass in dependencies into the function
2013-09-10 02:04:06	arkeet	danilo2: that's a kind signature.
2013-09-10 02:04:16	arkeet	saying a has kind Symbol.
2013-09-10 02:04:24	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-10 02:04:28	danilo2	akreet: ah, ok
2013-09-10 02:04:29	arkeet	ordinary types have kind *
2013-09-10 02:04:36	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-10 02:04:59	danilo2	arkeet: I know, that ordinary have *, but what is "Symbol" then?
2013-09-10 02:05:04	arkeet	it's a kind.
2013-09-10 02:05:12	arkeet	its members are type-level strings.
2013-09-10 02:05:34	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-10 02:05:50	danilo2	arkeet: Oh I didnt see it ocmes from the import. So the symbol is simply *
2013-09-10 02:05:53	-->	astropirate_ (~astropira@184.75.215.58) has joined #haskell
2013-09-10 02:06:01	arkeet	no
2013-09-10 02:06:02	danilo2	akreet: Everything's clear now :) thanks :)
2013-09-10 02:06:05	arkeet	=(
2013-09-10 02:06:27	arkeet	but yes, Symbol is declared in GHC.TypeLits
2013-09-10 02:06:32	arkeet	or something
2013-09-10 02:06:38	Raydiation	so basically all the bind operators like >>= make sure that the IO stuff gets evaluated
2013-09-10 02:07:03	joelteon	in order, specifically
2013-09-10 02:07:15	Raydiation	is this lazy btw?
2013-09-10 02:07:33	joelteon	it's up to you
2013-09-10 02:07:36	joelteon	but lazy by default, yes
2013-09-10 02:07:46	Peaker	Raydiation: evaluation isn't the issue, >>= gives order to the composition of first class actions. not considered "evaluations"
2013-09-10 02:08:04	<--	tibbe (~tibbe@207.198.105.20) has quit (Quit: tibbe)
2013-09-10 02:08:16	Raydiation	isnt the order defined anyways?
2013-09-10 02:08:27	danilo2	arkeet: hmm So Symbol is defined as datatype in GHC.TypeList and it is not a DataTypy, but it is a somehow special "Kind" ?
2013-09-10 02:08:30	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-10 02:08:36	Raydiation	i mean if i combine f and g into f(g()) the order is given right?
2013-09-10 02:08:39	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Ping timeout: 240 seconds)
2013-09-10 02:08:40	arkeet	danilo2: there is some GHC magic, yes.
2013-09-10 02:08:53	joelteon	Raydiation: you can't do that with IO
2013-09-10 02:08:53	Peaker	Raydiation: nope, unlike most langs Haskell has no built in ordering rules
2013-09-10 02:08:54	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Read error: Connection reset by peer)
2013-09-10 02:08:59	danilo2	arkeet: heh :) I love GHC magic :)
2013-09-10 02:08:59	joelteon	oh, and that
2013-09-10 02:09:19	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-10 02:09:24	Peaker	Raydiation: either f or g could be first
2013-09-10 02:09:28	Raydiation	is there a reason why the order is not defined?
2013-09-10 02:09:50	Peaker	Raydiation: because it enables optimzations, gives compilers freedom
2013-09-10 02:10:04	Raydiation	oh nice
2013-09-10 02:10:19	Raydiation	so basically if everything was evaluated in order, we wouldnt need the IO monad?
2013-09-10 02:10:27	Peaker	the only thing that is defined is non-strictness -- and that may affect evaluation order strategies
2013-09-10 02:10:59	Peaker	Raydiation: well, we'd have 1 less reason to have it, but there are other compelling reasons
2013-09-10 02:11:01	-->	Shin-LaC (~LaC@131-193-216-34.dhcp.uic.edu) has joined #haskell
2013-09-10 02:11:15	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-10 02:11:37	Raydiation	like making side effects obvious?
2013-09-10 02:11:39	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 276 seconds)
2013-09-10 02:11:44	Raydiation	in the type sig?
2013-09-10 02:11:50	Peaker	Raydiation: yep
2013-09-10 02:12:31	Raydiation	what kind of optimizations can you do in the compiler btw?
2013-09-10 02:13:11	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Ping timeout: 246 seconds)
2013-09-10 02:13:11	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 246 seconds)
2013-09-10 02:14:06	Peaker	Raydiation: I'm not sure, maybe someone else has examples handy
2013-09-10 02:14:30	-->	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has joined #haskell
2013-09-10 02:14:35	Raydiation	stuff like check if a function is used a lot in various other functions and use more agressive optimizations?
2013-09-10 02:14:45	Raydiation	although this is normally interesting for JITs right?
2013-09-10 02:14:50	<--	dubsg (~dubsg@208.74.177.104.static.etheric.net) has quit (Remote host closed the connection)
2013-09-10 02:15:01	<--	Ralith (~ralith@66.114.129.162) has quit (Ping timeout: 245 seconds)
2013-09-10 02:15:03	<--	HugoDaniel (~hugo@bl5-41-128.dsl.telepac.pt) has quit (Quit: leaving)
2013-09-10 02:15:15	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-10 02:15:59	Peaker	Raydiation: I think some of the parallelism infrastructure (thunk eval) relies on it
2013-09-10 02:16:13	ekipan	> let x = "abc" ++ x in take 8 x -- non-strictness allows more programs to have valid values
2013-09-10 02:16:14	lambdabot	  "abcabcab"
2013-09-10 02:16:27	--	nisstyre is now known as Nisstyre-laptop
2013-09-10 02:16:28	Peaker	e.g: in corner cases, the RTS might doubly-evaluate same thunk in 2 threads
2013-09-10 02:16:34	<--	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has quit (Ping timeout: 256 seconds)
2013-09-10 02:16:45	Peaker	but it doesn't matter because eval order isn't specified
2013-09-10 02:16:46	ekipan	compare: String x() { return "abc" + x(); }
2013-09-10 02:17:23	Peaker	ekipan: but you could say "lazy", why say "non-strict" and leave eval order unspecified?
2013-09-10 02:17:24	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 02:18:12	ekipan	haskell is specified as non-strict, laziness is an implementation detail
2013-09-10 02:18:16	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 256 seconds)
2013-09-10 02:18:30	Raydiation	iirc >>= is defined in haskell. How do you write a function that enforces order?
2013-09-10 02:18:52	Peaker	ekipan: the question is what advantages this yields over specifying it's lazy and having predictable eval order
2013-09-10 02:19:04	--	Nisstyre-laptop is now known as nisstyre
2013-09-10 02:19:05	ekipan	the definition of bind (>>=) for the IO type is not expressible in Haskell, it's built in as a standard library
2013-09-10 02:19:13	Peaker	Raydiation: consider (:)
2013-09-10 02:19:18	<--	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-09-10 02:19:21	Peaker	Raydiation: it enforces order
2013-09-10 02:19:26	ekipan	and that's because the IO type itself is abstract
2013-09-10 02:19:30	Peaker	just not *evaluation* order
2013-09-10 02:19:40	<--	nova_ (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-10 02:20:04	Raydiation	thanks
2013-09-10 02:20:33	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-10 02:20:38	<--	ics (~ics@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2013-09-10 02:20:46	ekipan	the IO type (in specific) is what's special, the Monad typeclass isn't all that special
2013-09-10 02:21:03	ekipan	aside from do notation syntax, which isn't actually neccessary
2013-09-10 02:21:04	-->	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-10 02:21:07	Raydiation	monad is more like a convenience thing?
2013-09-10 02:21:14	Raydiation	that avoids repetition?
2013-09-10 02:21:41	Peaker	Yeah, a whole lot of repetition
2013-09-10 02:21:42	--	nisstyre is now known as nisstyre-laptop
2013-09-10 02:21:55	ekipan	indeed, it allows a library of functions that work on all monads, without caring how they are implemented
2013-09-10 02:22:02	Peaker	more than convenience... common vocabulary, laws, ..
2013-09-10 02:22:03	ekipan	@src sequence -- like this for instance
2013-09-10 02:22:04	lambdabot	Source not found. I am sorry.
2013-09-10 02:22:09	ekipan	dur
2013-09-10 02:22:24	Peaker	-- not accepted apparently?
2013-09-10 02:22:30	ekipan	@src sequence
2013-09-10 02:22:30	lambdabot	sequence []     = return []
2013-09-10 02:22:30	lambdabot	sequence (x:xs) = do v <- x; vs <- sequence xs; return (v:vs)
2013-09-10 02:22:30	lambdabot	-- OR: sequence = foldr (liftM2 (:)) (return [])
2013-09-10 02:22:33	geekosaur	probably not; it's a dumb plugin
2013-09-10 02:22:33	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-10 02:22:48	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-10 02:22:53	ekipan	the semicolons in do notation desugar to ordinary applications of the (>>=) bind function
2013-09-10 02:22:57	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-10 02:23:26	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 02:23:52	ekipan	sequence (x:xs) = x >>= (\v -> sequence xs -> (\vs -> return (v:vs)))
2013-09-10 02:23:55	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-10 02:23:57	Peaker	btw, most of Control.Monad belongs in Control.Applicative, will this be addressed in the Applicative migration?
2013-09-10 02:24:25	geekosaur	not immediately, I imagine
2013-09-10 02:24:32	applikativ	isnt the 'migration' not supposed to break everything on hackage?
2013-09-10 02:24:39	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-10 02:24:41	geekosaur	probably need several versions to avoid breaking everything in existence, yeh
2013-09-10 02:24:44	latro`a_	ekipan: pretty sure there's a typo there
2013-09-10 02:24:47	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Read error: Operation timed out)
2013-09-10 02:24:48	Peaker	it can be reexported
2013-09-10 02:24:49	latro`a_	because you have two -> in the same scope
2013-09-10 02:24:58	latro`a_	the second one is >>= iirc
2013-09-10 02:25:36	ekipan	whoops
2013-09-10 02:25:54	-->	agallagher (~textual@mpk-nat-3.thefacebook.com) has joined #haskell
2013-09-10 02:25:55	<--	normanrichards (~normanric@rrcs-67-78-97-126.sw.biz.rr.com) has quit
2013-09-10 02:25:58	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-10 02:26:01	-->	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has joined #haskell
2013-09-10 02:26:12	<--	markcw (~jack@128.135.100.115) has quit (Ping timeout: 256 seconds)
2013-09-10 02:28:01	ekipan	@undo sequence (x:xs) = do v <- x; vs <- sequence xs; return (v:vs)
2013-09-10 02:28:01	lambdabot	sequence (x : xs) = x >>= \ v -> sequence xs >>= \ vs -> return (v : vs);
2013-09-10 02:28:16	applikativ	a lot of Control.Monad is more like e.g. Data.Foldable and Data.Traversable anyway
2013-09-10 02:28:16	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 02:28:39	--	Michael is now known as Guest65775
2013-09-10 02:29:35	<--	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has quit (Ping timeout: 256 seconds)
2013-09-10 02:29:48	<--	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has quit (Remote host closed the connection)
2013-09-10 02:30:12	-->	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has joined #haskell
2013-09-10 02:30:37	-->	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has joined #haskell
2013-09-10 02:30:54	<--	Starfire_ (~starfire@kekkonen.cs.hut.fi) has quit (Ping timeout: 240 seconds)
2013-09-10 02:31:18	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-10 02:31:23	<--	uniquenick (~uniquenic@bas2-toronto47-1242436811.dsl.bell.ca) has quit (Ping timeout: 260 seconds)
2013-09-10 02:31:51	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-09-10 02:32:00	b2coutts	is it possible to mask/unload some or all Prelude definitions?
2013-09-10 02:32:14	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-10 02:32:18	ekipan	include Prelude hiding (stuff)
2013-09-10 02:32:24	ekipan	import
2013-09-10 02:32:32	ekipan	sorry, sneezed right there
2013-09-10 02:32:44	ekipan	all over the channel
2013-09-10 02:33:15	<--	Guest65775 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 02:33:33	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-10 02:33:42	<--	emmp (~manolis@178.128.205.133.dsl.dyn.forthnet.gr) has quit (Ping timeout: 248 seconds)
2013-09-10 02:33:45	<--	ecr (~Thunderbi@nat/mozilla/x-koayimbmgvfflrwv) has quit (Quit: ecr)
2013-09-10 02:33:59	-->	bwr_ (~bwr@69.71.1.1) has joined #haskell
2013-09-10 02:34:01	<--	mm_freak (~milch@p5DD053D3.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-10 02:34:12	ekipan	import Prelude () -- hide everything, followed by:    import qualifed Prelude as P -- or whatev
2013-09-10 02:34:19	tikhon	there is also an extension called NoImplicitPrelude
2013-09-10 02:34:30	tikhon	{-# LANGUAGE NoImplicitPrelude #-}
2013-09-10 02:34:42	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-10 02:34:43	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-10 02:34:54	tikhon	it's also enabled automatically by some other extensions like RebindableSyntax
2013-09-10 02:35:23	b2coutts	ekipan: perfect, thanks
2013-09-10 02:35:50	<--	onur (~onur@ev.onur.im) has quit (Ping timeout: 248 seconds)
2013-09-10 02:36:00	Raydiation	Peaker: ok got it http://www.youtube.com/watch?v=z0N1aZ6SnBk 57:00
2013-09-10 02:36:05	Raydiation	what kind of optimiziations you can do
2013-09-10 02:36:44	Raydiation	you can basically distribute it over many cores without having to think of that one result may depend on another result
2013-09-10 02:36:54	Raydiation	stuff like maybe writing to globals
2013-09-10 02:37:20	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-09-10 02:37:27	<--	bwr (~bwr@69.71.1.1) has quit (Ping timeout: 260 seconds)
2013-09-10 02:38:26	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Quit: azcodex)
2013-09-10 02:38:30	<--	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Read error: Operation timed out)
2013-09-10 02:38:55	-->	evohunz (~evohunz@187.85.176.249) has joined #haskell
2013-09-10 02:39:07	-->	jfhall_ (~jfhall@24-205-238-86.dhcp.snlo.ca.charter.com) has joined #haskell
2013-09-10 02:39:24	<--	jayprich (~jayprich@unaffiliated/jayprich) has quit (Quit: jayprich)
2013-09-10 02:39:31	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 02:39:40	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 02:41:33	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-09-10 02:41:33	<--	talzeus_ (~studybot_@113.37.230.101) has quit (Read error: Connection reset by peer)
2013-09-10 02:41:43	-->	ISF (~ivan@187.64.222.94) has joined #haskell
2013-09-10 02:41:44	<--	evohunz (~evohunz@187.85.176.249) has quit (Remote host closed the connection)
2013-09-10 02:42:06	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 02:42:23	-->	WraithM_ (~WraithM@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 02:42:43	-->	onur (~onur@ev.onur.im) has joined #haskell
2013-09-10 02:43:11	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-10 02:43:22	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-10 02:43:28	<--	bwr_ (~bwr@69.71.1.1) has quit (Ping timeout: 245 seconds)
2013-09-10 02:43:32	-->	ddp (~ddp@c-98-229-3-40.hsd1.vt.comcast.net) has joined #haskell
2013-09-10 02:43:42	<--	ddp (~ddp@c-98-229-3-40.hsd1.vt.comcast.net) has quit (Client Quit)
2013-09-10 02:44:33	--	mrshoeASEL-IR is now known as mrshoe
2013-09-10 02:45:32	-->	anachrome (~lily@wireless1x-155-41-64-208.bu.edu) has joined #haskell
2013-09-10 02:45:48	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 02:45:55	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 02:47:29	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-10 02:47:42	-->	Grey_Fox2 (~chatzilla@101.119.28.71) has joined #haskell
2013-09-10 02:47:44	<--	WraithM_ (~WraithM@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 02:48:18	-->	james-ubc (~james@dhcp-206-87-195-141.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 02:49:14	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-10 02:49:14	<--	bwr (~bwr@69.71.1.1) has quit (Ping timeout: 246 seconds)
2013-09-10 02:49:37	<--	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 02:49:39	-->	emmp (~manolis@188.4.36.25.dsl.dyn.forthnet.gr) has joined #haskell
2013-09-10 02:49:50	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-10 02:49:50	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 240 seconds)
2013-09-10 02:50:08	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 245 seconds)
2013-09-10 02:50:33	<--	specklessness70 (~speckless@c-67-182-147-102.hsd1.wa.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 02:52:50	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-10 02:54:18	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 02:54:58	-->	Apocalisp (~textual@24-241-110-250.static.stls.mo.charter.com) has joined #haskell
2013-09-10 02:55:59	<--	NiceOneBrah (~niceonebr@173.247.206.226) has quit (Remote host closed the connection)
2013-09-10 02:56:26	-->	carlosgaldino (~carlosgal@177.32.75.176) has joined #haskell
2013-09-10 02:58:28	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-10 02:58:47	<--	james-ubc (~james@dhcp-206-87-195-141.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 245 seconds)
2013-09-10 02:59:39	--	lambdaTerrorist is now known as xenocons
2013-09-10 03:00:04	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-10 03:00:23	<--	cdidd (~cdidd@128-68-6-99.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-09-10 03:00:33	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 03:00:49	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-10 03:01:10	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-10 03:01:47	-->	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has joined #haskell
2013-09-10 03:01:57	<--	Grey_Fox2 (~chatzilla@101.119.28.71) has quit (Read error: Connection reset by peer)
2013-09-10 03:01:58	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 248 seconds)
2013-09-10 03:03:55	--	flazz_gone is now known as flazz
2013-09-10 03:04:25	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-10 03:05:55	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-10 03:06:13	-->	cdidd (~cdidd@128-68-128-158.broadband.corbina.ru) has joined #haskell
2013-09-10 03:07:06	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 03:07:36	-->	dakhath (~dakhath@ip68-10-235-169.hr.hr.cox.net) has joined #haskell
2013-09-10 03:07:45	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-10 03:07:58	<--	lemao (~lemao@189.60.37.42) has quit (Remote host closed the connection)
2013-09-10 03:08:01	<--	dakhath (~dakhath@ip68-10-235-169.hr.hr.cox.net) has quit (Client Quit)
2013-09-10 03:08:11	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 03:08:15	-->	akahn (uid2243@gateway/web/irccloud.com/x-rhgyoahmrwuprsaq) has joined #haskell
2013-09-10 03:08:50	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Ping timeout: 246 seconds)
2013-09-10 03:09:22	<--	scripty (~scripty@117.192.160.184) has quit (Read error: Connection reset by peer)
2013-09-10 03:09:39	<--	bkolera (~textual@123.200.143.251) has quit (Ping timeout: 260 seconds)
2013-09-10 03:10:46	-->	croyd (~scaldwell@99.127.54.64) has joined #haskell
2013-09-10 03:11:45	<--	JobV1 (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-10 03:12:28	-->	litherum1 (~Litherum@76.74.153.49) has joined #haskell
2013-09-10 03:12:44	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-10 03:12:44	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 03:13:20	-->	ggherdov (uid11402@gateway/web/irccloud.com/x-tfhdnlfqmwlfoypd) has joined #haskell
2013-09-10 03:13:37	-->	dimday (~amcvega@199.19.95.160) has joined #haskell
2013-09-10 03:14:53	<--	cmsmcq (~cmsmcq@65.19.20.147) has left #haskell
2013-09-10 03:15:10	-->	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 03:15:50	--	GaelanAintAround is now known as Gaelan
2013-09-10 03:16:22	<--	canta (~canta@77-20-120-171-dynip.superkabel.de) has quit (Ping timeout: 248 seconds)
2013-09-10 03:16:33	-->	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has joined #haskell
2013-09-10 03:17:13	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2013-09-10 03:19:01	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-10 03:20:28	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 03:20:51	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-10 03:21:06	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-10 03:21:12	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell ("Leaving")
2013-09-10 03:21:48	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 03:22:07	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 03:22:39	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-09-10 03:23:45	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-10 03:23:48	<--	tamiko (~tamiko@pdpc/supporter/active/tamiko) has quit (Ping timeout: 260 seconds)
2013-09-10 03:23:55	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 03:24:13	-->	tamiko (~tamiko@pdpc/supporter/active/tamiko) has joined #haskell
2013-09-10 03:24:14	<--	astropirate_ (~astropira@184.75.215.58) has quit (Quit: Leaving)
2013-09-10 03:24:44	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-09-10 03:25:03	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-10 03:25:10	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-10 03:25:21	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-09-10 03:25:24	<--	khyperia (~khyperia@c-71-193-98-79.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-10 03:25:42	-->	nilsi_ (~nilsi@5.254.151.3) has joined #haskell
2013-09-10 03:26:39	<--	apaku (~apaku@x2f14ab2.dyn.telefonica.de) has quit (Ping timeout: 264 seconds)
2013-09-10 03:26:45	-->	johntromp (~johntromp@ool-18be0ed6.dyn.optonline.net) has joined #haskell
2013-09-10 03:26:52	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-10 03:26:59	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-10 03:27:27	-->	apaku (~apaku@x2f14e31.dyn.telefonica.de) has joined #haskell
2013-09-10 03:27:30	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 03:27:53	--	Michael is now known as Guest91622
2013-09-10 03:28:10	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 03:28:21	-->	james111111 (~james1111@173-23-175-149.client.mchsi.com) has joined #haskell
2013-09-10 03:28:26	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 03:28:33	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Ping timeout: 256 seconds)
2013-09-10 03:29:16	<--	james111111 (~james1111@173-23-175-149.client.mchsi.com) has left #haskell
2013-09-10 03:29:38	-->	ananthakumaran (~Adium@117.192.134.162) has joined #haskell
2013-09-10 03:29:53	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-10 03:30:19	<--	codesoup (~codesoup@69.196.132.244) has quit (Read error: Connection reset by peer)
2013-09-10 03:31:14	-->	anarcat (~anarcat@72.0.72.144) has joined #haskell
2013-09-10 03:31:17	anarcat	hi!
2013-09-10 03:31:37	<--	Earnestly (~Earnestly@unaffiliated/earnestly) has quit (Ping timeout: 276 seconds)
2013-09-10 03:31:43	-->	jevankovich (62d1e6dc@gateway/web/freenode/ip.98.209.230.220) has joined #haskell
2013-09-10 03:32:01	anarcat	1.111+0.2+1 == 2.111+0.2 => False. why?
2013-09-10 03:32:15	<--	ivoscc (~ivo@pc-6-57.rcp.net.pe) has quit (Ping timeout: 276 seconds)
2013-09-10 03:32:52	<--	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-10 03:32:56	<--	emmp (~manolis@188.4.36.25.dsl.dyn.forthnet.gr) has quit (Quit: Leaving)
2013-09-10 03:32:59	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Ping timeout: 260 seconds)
2013-09-10 03:33:25	shanse	> 2.111+0.2
2013-09-10 03:33:26	lambdabot	  2.3110000000000004
2013-09-10 03:34:20	applikativ	maybe if you substituted 'isNotTooFarFrom' for == you'd have better luck ;)
2013-09-10 03:34:31	anarcat	wtf? :)
2013-09-10 03:34:43	copumpkin	anarcat: it's like that in almost every programming language
2013-09-10 03:34:47	applikativ	anarcat: there are some 'exact' real libraries
2013-09-10 03:34:47	copumpkin	it's not a haskell thing :)
2013-09-10 03:34:54	applikativ	it's totally not haskell
2013-09-10 03:34:57	anarcat	well, i was expecting haskell to suck less
2013-09-10 03:35:03	pavonia	> 1.111+0.2+1 == 2.111+ (0.2 :: CReal)
2013-09-10 03:35:04	lambdabot	  True
2013-09-10 03:35:12	copumpkin	== on CReal is a lie too :P
2013-09-10 03:35:23	applikativ	anarcat: it does, try creal or the deluxe cyclotomic if you don't need all Floating operations
2013-09-10 03:35:24	copumpkin	> 1.111+0.2+1 == 2.111+ (0.2 :: Rational)
2013-09-10 03:35:25	lambdabot	  True
2013-09-10 03:35:27	copumpkin	there you go
2013-09-10 03:35:29	copumpkin	now it's exact
2013-09-10 03:35:48	applikativ	== on reals in general is a classist lie
2013-09-10 03:35:55	<--	_oio_ (~kenneth@186.83.255.243) has quit (Quit: Konversation terminated!)
2013-09-10 03:35:56	applikativ	classicist
2013-09-10 03:36:10	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 03:36:15	anarcat	interestingly, python has the exact same issue
2013-09-10 03:36:18	scshunt	type Real = Nat -> Rat
2013-09-10 03:36:37	copumpkin	anarcat: as I said, it's true of almost every language out there
2013-09-10 03:36:42	applikativ	anarcat: yes, its machine numbers, what do you expect; cabal install cyclotomic is what i recommend ;)
2013-09-10 03:36:45	copumpkin	you aren't stuck with it
2013-09-10 03:36:53	copumpkin	but your CPU provides that kind of math
2013-09-10 03:36:55	ekipan	> 1.111+0.2+1 == 2.111+ (0.2 :: Rational) -- if you really want exactness
2013-09-10 03:36:56	lambdabot	  True
2013-09-10 03:36:59	copumpkin	so most languages support it by default
2013-09-10 03:36:59	shachaf	copumpkin: You should write proofs about floating point values in Agda!
2013-09-10 03:37:04	copumpkin	shachaf: I've considered it :P
2013-09-10 03:37:09	applikativ	don't use rational its a drag
2013-09-10 03:37:10	copumpkin	but I'd need a model
2013-09-10 03:37:23	pavonia	copumpkin: What's wrong with (==) for CReals?
2013-09-10 03:37:28	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-10 03:37:30	copumpkin	pavonia: it's undecidable
2013-09-10 03:37:33	copumpkin	so it checks a truncation
2013-09-10 03:37:47	applikativ	it gives out after a zillion places.
2013-09-10 03:37:48	applikativ	the fact is it's a pseudoconcept
2013-09-10 03:37:55	pavonia	Even for finite decimal numbers?
2013-09-10 03:38:03	pavonia	*a finite number of
2013-09-10 03:38:06	anarcat	hehe
2013-09-10 03:38:10	applikativ	define them; then it wont be a pseudoconcept
2013-09-10 03:38:11	byorgey	CReal doesn't know whether a number is finite
2013-09-10 03:38:35	applikativ	define apartness and the contradictoriness of apartness, like brouwer
2013-09-10 03:38:48	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-10 03:38:56	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 03:39:03	copumpkin	> (read "0." ++ replicate 40 '0' ++ "1" :: CReal) == (read "0." ++ replicate 40 '0' ++ "2" :: CReal)
2013-09-10 03:39:05	lambdabot	  Couldn't match expected type `Data.Number.CReal.CReal'
2013-09-10 03:39:06	lambdabot	             with ac...
2013-09-10 03:39:08	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-09-10 03:39:10	copumpkin	dammit
2013-09-10 03:39:18	-->	codesoup (~codesoup@108.175.233.21) has joined #haskell
2013-09-10 03:39:19	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-10 03:39:19	copumpkin	> (read ("0." ++ replicate 40 '0' ++ "1") :: CReal) == (read ("0." ++ replicate 40 '0' ++ "2") :: CReal)
2013-09-10 03:39:20	lambdabot	  False
2013-09-10 03:39:23	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-10 03:39:26	copumpkin	grr
2013-09-10 03:39:35	copumpkin	> (read ("0." ++ replicate 60 '0' ++ "1") :: CReal) == (read ("0." ++ replicate 60 '0' ++ "2") :: CReal)
2013-09-10 03:39:36	lambdabot	  True
2013-09-10 03:39:39	copumpkin	there we go
2013-09-10 03:40:35	 *	pavonia is puzzled
2013-09-10 03:40:38	applikativ	equality in cyclotomic is derived
2013-09-10 03:40:43	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-10 03:41:03	applikativ	the elements are Integer and Map Integer Rational
2013-09-10 03:41:10	applikativ	the fields rather
2013-09-10 03:41:15	ion	pavonia: The representation of a CReal is a function from the precision you want to the result value times base^precision.
2013-09-10 03:41:27	ion	pavonia: Both being integers.
2013-09-10 03:41:35	copumpkin	> toCReal $ "0." ++ repeat '9'
2013-09-10 03:41:38	lambdabot	  1.0
2013-09-10 03:41:39	applikativ	so it can crash, but it'll be because you Map or Integers got too big for your machine
2013-09-10 03:41:42	copumpkin	sweet
2013-09-10 03:41:45	copumpkin	it works!
2013-09-10 03:41:49	applikativ	creal is a distraction
2013-09-10 03:41:52	-->	dubsg (~dubsg@2601:9:5b00:10d:3c32:238d:dba5:9bb7) has joined #haskell
2013-09-10 03:41:55	copumpkin	>_<
2013-09-10 03:42:07	shachaf	copumpkin: Finally you can use CReal's (==) to prove that 0.999... == 1!
2013-09-10 03:42:12	copumpkin	yes!
2013-09-10 03:42:15	pavonia	ion: How does it know what precision I want?
2013-09-10 03:42:22	shachaf	pavonia: You wnat 40 digits.
2013-09-10 03:42:23	copumpkin	pavonia: it keeps all precision!
2013-09-10 03:42:24	copumpkin	forever!
2013-09-10 03:42:30	shachaf	Or that.
2013-09-10 03:42:39	<--	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 03:42:40	ion	pavonia: You apply it to the integer representing the precision you want.
2013-09-10 03:42:51	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 03:42:57	bscarlet	Is there any replacement for the float2Double that used to be in GHC.Float?
2013-09-10 03:43:02	copumpkin	pavonia: when doing certain operations (showing, anything that returns a Bool), it truncates the number to 40 digits, but otherwise everything has infinite precision
2013-09-10 03:43:06	ion	realToFrac?
2013-09-10 03:43:09	copumpkin	did nobody look twice at my function?
2013-09-10 03:43:18	applikativ	well, why?
2013-09-10 03:43:31	copumpkin	> toCReal $ "0." ++ repeat '9'
2013-09-10 03:43:31	applikativ	CReal is two years ago's vogue
2013-09-10 03:43:34	lambdabot	  1.0
2013-09-10 03:43:37	copumpkin	that one :(
2013-09-10 03:43:48	<--	fl00r (~fl00r@216.70.153.210) has quit (Quit: Leaving)
2013-09-10 03:43:49	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-10 03:44:13	ion	copumpkin: I did, i was hoping to see the source.
2013-09-10 03:44:25	copumpkin	> toCReal "0.1"
2013-09-10 03:44:29	pavonia	Just to make sure, the precision of 40 is hard-wired in the code?
2013-09-10 03:44:29	lambdabot	  0.1
2013-09-10 03:44:40	monochrom	> toCReal ("0." ++ repeat '9' ++ "12345")
2013-09-10 03:44:42	copumpkin	pavonia: yes, it's a bit of a toy implementation to show what's possible
2013-09-10 03:44:43	lambdabot	  1.0
2013-09-10 03:44:49	monochrom	\∩/
2013-09-10 03:45:18	bscarlet	ion: I need something which does bit-for-bit what casting a float to a double would do in C. I didn't think realToFrac did that in all cases. Am I wrong?
2013-09-10 03:45:18	applikativ	the author of creal has had a new version for some years by the way, so the one on hackage is six ways out of date
2013-09-10 03:45:24	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-09-10 03:45:27	<--	anachrome (~lily@wireless1x-155-41-64-208.bu.edu) has quit (Ping timeout: 245 seconds)
2013-09-10 03:45:27	-->	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-10 03:45:32	copumpkin	applikativ: the real author or the apparent author?
2013-09-10 03:45:37	pavonia	copumpkin: I see, I've thought it always has infinite precision
2013-09-10 03:45:42	asmyers	So, isn't the new cabal sandbox supposed to sanbox installs?
2013-09-10 03:45:43	copumpkin	pavonia: it does!
2013-09-10 03:45:45	applikativ	the real author, the academic guy
2013-09-10 03:45:51	pavonia	O_o
2013-09-10 03:46:04	-->	james111111 (~james1111@173-23-175-149.client.mchsi.com) has joined #haskell
2013-09-10 03:46:05	copumpkin	pavonia: as I said, it only truncates for operations that it has to, in theory
2013-09-10 03:46:10	ion	pavonia: It hardcodes a number of digits only for the operations that couldn’t be implemented otherwise.
2013-09-10 03:46:13	applikativ	pavonia: scrap == and two other functions and youre fine
2013-09-10 03:46:15	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 03:46:18	copumpkin	pavonia: there's no way to check if two CReals are equal or <= or whatever, so it must truncate there
2013-09-10 03:46:23	copumpkin	it's a mathematical truth
2013-09-10 03:46:30	<--	Raydiation (~bernhard@chello080108042248.32.11.vie.surfer.at) has left #haskell
2013-09-10 03:46:35	pavonia	Ahhh
2013-09-10 03:46:40	<--	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 256 seconds)
2013-09-10 03:46:46	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 248 seconds)
2013-09-10 03:46:52	copumpkin	pavonia: the other is just for Show, because it needs to show with some finite precision
2013-09-10 03:46:59	<--	ananthakumaran (~Adium@117.192.134.162) has quit (Quit: Leaving.)
2013-09-10 03:47:00	copumpkin	I've always wondered if there's an efficient way to get an infinite string of digits
2013-09-10 03:47:06	copumpkin	the problem is that it would always be infinite
2013-09-10 03:47:17	pavonia	Yeah, that makes sense
2013-09-10 03:47:38	copumpkin	> showCReal 100 pi
2013-09-10 03:47:39	lambdabot	  "3.141592653589793238462643383279502884197169399375105820974944592307816406...
2013-09-10 03:47:48	copumpkin	> drop 100 $ showCReal 1000 pi
2013-09-10 03:47:49	lambdabot	  "79821480865132823066470938446095505822317253594081284811174502841027019385...
2013-09-10 03:47:49	-->	mhitza (~mhitza@79.117.88.27) has joined #haskell
2013-09-10 03:47:58	monochrom	consider also cyclotomic :)
2013-09-10 03:48:06	copumpkin	@hackage cyclotomic
2013-09-10 03:48:06	lambdabot	http://hackage.haskell.org/package/cyclotomic
2013-09-10 03:48:24	--	parcs__ is now known as parcs
2013-09-10 03:48:51	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-10 03:48:51	applikativ	equality in cyclotomic is exact
2013-09-10 03:49:04	applikativ	show is exact
2013-09-10 03:49:16	<--	Guest91622 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 03:49:37	-->	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 03:49:39	mhitza	does Haddock have issues with ImplicitParams in the type signature? this signature "String -> ((?configuration :: Configuration) => IO b) -> IO b" shows up as "String -> ([configuration :: Configuration] => IO b) -> IO b"
2013-09-10 03:49:57	copumpkin	I'm disappointed that nobody was puzzled by my toCReal :(
2013-09-10 03:50:01	applikativ	there is really no contest, apart from the limitation on available operations
2013-09-10 03:50:29	<--	babalone (~baba@p5DE44B15.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-10 03:50:30	applikativ	mentioning creal is like mentioning iteratees
2013-09-10 03:50:32	<--	james111111 (~james1111@173-23-175-149.client.mchsi.com) has left #haskell
2013-09-10 03:50:34	ion	copumpkin: I wasn’t puzzled by it, but i do find it neat. I’d still like to read the sauce.
2013-09-10 03:50:35	copumpkin	lol
2013-09-10 03:50:37	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 256 seconds)
2013-09-10 03:50:40	geekosaur	mhitza, probably; file a bug
2013-09-10 03:50:45	copumpkin	> @let toCReal x = if length (take 100 x) == 100 then 1 else read x :: CReal
2013-09-10 03:50:46	copumpkin	:P
2013-09-10 03:50:46	lambdabot	  <hint>:1:1: parse error on input `@'
2013-09-10 03:51:04	mhitza	geekosaur, ok, thank's for the input
2013-09-10 03:51:06	bscarlet	> realToFrac (-1/0 :: Float) :: Double
2013-09-10 03:51:07	lambdabot	  -3.402823669209385e38
2013-09-10 03:51:07	<--	jevankovich (62d1e6dc@gateway/web/freenode/ip.98.209.230.220) has quit (Ping timeout: 250 seconds)
2013-09-10 03:51:08	-->	Grey_Fox2 (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has joined #haskell
2013-09-10 03:51:11	copumpkin	> read ("0." ++ repeat '9') :: CReal
2013-09-10 03:51:20	lambdabot	 Terminated
2013-09-10 03:51:34	ion	copumpkin: Oh, i’m disappointed. I expected a CReal-wrapped function that reads just enough of the string.
2013-09-10 03:51:40	copumpkin	:P
2013-09-10 03:51:47	applikativ	equality in cyclotomic is decidable; its a theorem
2013-09-10 03:52:03	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-10 03:52:16	copumpkin	someone translate it to agda
2013-09-10 03:52:52	-->	arkanum_ (~quassel@187.214.117.18) has joined #haskell
2013-09-10 03:53:08	ion	Aww, CReal doesn’t export the data constructor even in .Internal.
2013-09-10 03:53:19	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 03:53:28	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 03:53:29	applikativ	the proof is marginally harder than that for Rationals
2013-09-10 03:54:15	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-10 03:54:15	<--	arkanum (~quassel@187.214.119.56) has quit (Ping timeout: 264 seconds)
2013-09-10 03:54:17	<--	anarcat (~anarcat@72.0.72.144) has left #haskell ("thanks")
2013-09-10 03:54:23	applikativ	in agda as usual there would be the question of verifying that what was proven was what was intended
2013-09-10 03:54:28	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 03:54:28	--	hdevalence is now known as hdevalence|away
2013-09-10 03:54:35	monochrom	copumpkin: sufficiently clever conjurer's trick is indistinguishable from advanced technology!
2013-09-10 03:54:38	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 03:54:38	<--	mkscrg (~mkscrg@38.88.174.106) has quit
2013-09-10 03:54:50	copumpkin	applikativ: it's not that hard
2013-09-10 03:54:58	ion	applikativ: Just write a proof for that.
2013-09-10 03:55:33	-->	tutorship57 (~tutorship@78.129.150.171) has joined #haskell
2013-09-10 03:55:41	copumpkin	I'd define a type cyclotomic, a binary relation on it, prove the relation is an equivalence relation, and then show that the relation is decidable
2013-09-10 03:55:48	applikativ	a proof that r == s v r /= s in agda which secure less certainty than one in prose
2013-09-10 03:55:51	<--	LAMMJohnson (~ja@user-5af43745.broadband.tesco.net) has quit (Remote host closed the connection)
2013-09-10 03:56:08	applikativ	the situation is worse the more complex the theorem
2013-09-10 03:56:16	<--	dkordic (~danilo@93-87-124-217.dynamic.isp.telekom.rs) has quit (Quit: Ex-Chat)
2013-09-10 03:56:17	applikativ	it would secure less certainty
2013-09-10 03:56:17	copumpkin	that's why we factor out functionality
2013-09-10 03:56:26	copumpkin	and state it the way I did
2013-09-10 03:56:36	copumpkin	the basic building blocks are super simple and are hard to get wrong
2013-09-10 03:56:53	applikativ	right, but gauss already knew how to do the calculation?
2013-09-10 03:56:57	<--	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-10 03:56:59	copumpkin	so?
2013-09-10 03:57:06	applikativ	shall i prove that naturals have successors?
2013-09-10 03:57:23	copumpkin	o.O
2013-09-10 03:58:03	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-10 03:58:12	haasn	would a good approach to defining ‘functional programming’ be that it's based on expansion and reduction of ASTs?
2013-09-10 03:58:19	haasn	perhaps s/ASTs/expressions/
2013-09-10 03:58:23	haasn	expression trees
2013-09-10 03:58:28	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2013-09-10 03:59:02	monochrom	equivalence relation is not enough. you have to show Leibniz's law. for every function f that you care, if x~y then f x ~ f y
2013-09-10 03:59:22	-->	Michael (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 03:59:33	copumpkin	monochrom: in a "real" language, I'd quotient the type by that relation
2013-09-10 03:59:42	copumpkin	unfortunately I don't have such a language :)
2013-09-10 03:59:45	--	Michael is now known as Guest98280
2013-09-10 03:59:51	monochrom	that works too
2013-09-10 04:00:07	applikativ	god quotients, what a disaster
2013-09-10 04:00:18	monochrom	this is why I use a real proof language, such as HOL4 and PVS
2013-09-10 04:00:21	-->	c-rog (~c-rog@2601:9:5a00:38c:9848:279:8268:6010) has joined #haskell
2013-09-10 04:00:24	-->	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-10 04:00:33	<--	tabemann (~travisb@adsl-68-248-233-187.dsl.milwwi.ameritech.net) has quit (Quit: Leaving)
2013-09-10 04:00:57	monochrom	not those curry-howard self-congratulations such as Coq or Agda
2013-09-10 04:01:09	--	Moggle_ is now known as Moogle
2013-09-10 04:01:13	applikativ	its true, really
2013-09-10 04:01:17	<--	Guest98280 (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 04:01:19	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-10 04:01:33	--	Moogle is now known as Moogle_
2013-09-10 04:01:39	Cale	SHOTS FIRED
2013-09-10 04:01:43	haasn	haha
2013-09-10 04:01:47	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-10 04:02:06	joelteon	hey, buddy, you gotta respect curry-howard
2013-09-10 04:02:08	joelteon	don't get coqy
2013-09-10 04:02:20	monochrom	haha
2013-09-10 04:02:24	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (Ping timeout: 240 seconds)
2013-09-10 04:02:39	<--	mhitza (~mhitza@79.117.88.27) has quit (Quit: Leaving)
2013-09-10 04:02:39	-->	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-10 04:02:42	--	ics is now known as sci_
2013-09-10 04:02:43	-->	sinistersnare (6c2da18a@gateway/web/cgi-irc/kiwiirc.com/ip.108.45.161.138) has joined #haskell
2013-09-10 04:02:51	--	sci_ is now known as ics
2013-09-10 04:03:04	sinistersnare	hi yall! For my 17th birthday, my best friend got me "The most obscure programming book I could find" as a joke. I know what language I am learning next!
2013-09-10 04:03:12	--	Grey_Fox2 is now known as PatrickRobotham
2013-09-10 04:03:14	sinistersnare	http://i.imgur.com/YL1QzAU.jpg :p
2013-09-10 04:03:17	-->	ghena1986 (~ghena1986@ip98-163-242-143.no.no.cox.net) has joined #haskell
2013-09-10 04:03:19	<--	ghena1986 (~ghena1986@ip98-163-242-143.no.no.cox.net) has left #haskell
2013-09-10 04:03:21	joelteon	oh boy
2013-09-10 04:03:26	joelteon	that's the most obscure one your friend could find?
2013-09-10 04:03:27	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-10 04:03:36	copumpkin	sinistersnare: I wish someone had bought that for me when I was 17
2013-09-10 04:03:37	-->	babalone (~baba@p5DE44DF7.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 04:03:44	sinistersnare	hes always perplexed when i talk to him about clojure...
2013-09-10 04:03:49	sinistersnare	which im only a newbie at too :p
2013-09-10 04:03:57	applikativ	oh awesome sinistersnare , our friends can help you get set up and so on
2013-09-10 04:04:01	monochrom	do you mean the graph theory book there?
2013-09-10 04:04:02	sinistersnare	ive thought about learning haskell, but i didnt have this book! i cant wait
2013-09-10 04:04:09	sinistersnare	yes, the graph theory book too :p
2013-09-10 04:04:33	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-10 04:04:36	sinistersnare	that was my present to myself, because its only like $6 on amazon!
2013-09-10 04:04:38	<--	c-rog (~c-rog@2601:9:5a00:38c:9848:279:8268:6010) has quit (Ping timeout: 240 seconds)
2013-09-10 04:04:43	<--	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has quit (Ping timeout: 264 seconds)
2013-09-10 04:04:50	-->	riley_ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-10 04:05:01	<--	shesek (~shesek@77.127.54.57) has quit (Remote host closed the connection)
2013-09-10 04:05:01	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-10 04:05:08	applikativ	lyah has the slight defect that there are no exercises; it could do with a repo of code samples too
2013-09-10 04:05:19	monochrom	http://www.vex.net/~trebla/weblog/fpbooks.xhtml
2013-09-10 04:05:24	applikativ	but its good
2013-09-10 04:05:28	Moogle_	sinistersnare: have fun! learning haskell is almost like releaning programming altogether.
2013-09-10 04:05:32	<--	arkanum_ (~quassel@187.214.117.18) has quit (Remote host closed the connection)
2013-09-10 04:05:51	 *	applikativ read YAHT, by the dim bulb, Prof. Daume'
2013-09-10 04:06:06	sinistersnare	feel like im stepping into a new world!
2013-09-10 04:06:17	copumpkin	dim bulb?
2013-09-10 04:06:25	monochrom	Haskell is like elephant
2013-09-10 04:06:39	applikativ	isn't that your feeling, have you looked at it lately? yaht i mean?
2013-09-10 04:06:46	applikativ	i havent looked too lately myself...
2013-09-10 04:06:48	copumpkin	I haven't read it, just curious
2013-09-10 04:06:50	<--	Shin-LaC (~LaC@131-193-216-34.dhcp.uic.edu) has quit (Quit: Computer has gone to sleep.)
2013-09-10 04:07:04	copumpkin	applikativ: you feel a lot more "trolly" with your new spelling :) you should move back to the old one
2013-09-10 04:07:05	applikativ	it isn't just that the book is dull...
2013-09-10 04:07:21	copumpkin	I haven't dealt with anything of his
2013-09-10 04:07:27	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-10 04:07:32	applikativ	copumpkin: im just irritable at the moment, waiting for someone with a genuine problem, and not just someone showing off
2013-09-10 04:08:32	-->	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has joined #haskell
2013-09-10 04:08:46	<--	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 04:09:26	-->	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has joined #haskell
2013-09-10 04:09:31	 *	copumpkin hugs applikativ 
2013-09-10 04:09:35	applikativ	but no doubt youre right
2013-09-10 04:09:36	applikativ	copumpkin: note that you have put down a number of people in the last half hour
2013-09-10 04:09:43	satc	How to check inside a module if cabal is run with enable-tests? Is there some flags set by cabal?
2013-09-10 04:10:03	copumpkin	applikativ: how so?
2013-09-10 04:10:04	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 04:10:05	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-09-10 04:10:15	applikativ	wait, what is satc's problem
2013-09-10 04:10:35	applikativ	are you asking how --enable test works, or something subtler?
2013-09-10 04:11:11	-->	ahill-89 (~xander@99.36.41.91) has joined #haskell
2013-09-10 04:11:14	satc	applikativ: I want to do certain things in a module if you are compiling with --enable-tests.
2013-09-10 04:11:20	<--	Apocalisp (~textual@24-241-110-250.static.stls.mo.charter.com) has quit (Quit: Computer has gone to sleep.)
2013-09-10 04:11:22	applikativ	-cbits-1.0.a: unknown symbol `_ffi_closure_alloc' grrrrr
2013-09-10 04:11:25	monochrom	I take it to mean: is some CPP macro defined when --enable-tests
2013-09-10 04:11:33	satc	monochrom: Yes
2013-09-10 04:12:02	Fuuzetsu	the answer is ‘no’, I believe
2013-09-10 04:12:30	satc	monochrom: Or how to achieve similar behaviour.
2013-09-10 04:12:59	applikativ	there is usually a test-suite field in the .cabal file satc but i sense you know that
2013-09-10 04:13:43	satc	applikativ: Yes. I want some thing like monochrom said. Defining a cpp mmacro which can be tested.
2013-09-10 04:15:04	applikativ	satc: i don't know about that, it isn't what i take to be the customary dumb procedure, which is to make a test.hs executable and tell cabal about it
2013-09-10 04:15:33	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 04:16:04	<--	ahill-89 (~xander@99.36.41.91) has quit (Ping timeout: 260 seconds)
2013-09-10 04:16:24	applikativ	this raises a problem with quickcheck since one would like ones propositions in the relevant file, but not to export them to ordinary users, then one uses CPP ifdef TESTING
2013-09-10 04:16:28	copumpkin	applikativ: PM please :)
2013-09-10 04:16:37	applikativ	how do you do that?
2013-09-10 04:16:42	<--	PatrickRobotham (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has quit (Ping timeout: 256 seconds)
2013-09-10 04:16:48	copumpkin	I just sent you one, just wanted to point it out
2013-09-10 04:17:24	-->	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has joined #haskell
2013-09-10 04:18:43	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 04:19:45	-->	xl1 (~xl@111.199.155.235) has joined #haskell
2013-09-10 04:20:00	<--	litherum1 (~Litherum@76.74.153.49) has quit (Quit: Leaving.)
2013-09-10 04:21:20	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-10 04:21:30	-->	mm_freak (~milch@p5DD048C3.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 04:21:50	<--	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-09-10 04:23:04	satc	applikativ: I suppose this is how it was done in older versions of cabal.
2013-09-10 04:23:29	<--	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 04:24:17	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 04:24:32	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-10 04:25:03	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-10 04:25:49	-->	PatrickRobotham (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has joined #haskell
2013-09-10 04:26:02	enthropy	applikativ: take a look at doctest
2013-09-10 04:26:14	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 248 seconds)
2013-09-10 04:26:14	<--	Targen (~iguana@186.95.158.176) has quit (Ping timeout: 240 seconds)
2013-09-10 04:26:39	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-10 04:26:40	enthropy	there is some quickcheck support for it too
2013-09-10 04:26:50	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Read error: Operation timed out)
2013-09-10 04:27:14	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 04:27:19	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-09-10 04:27:50	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-10 04:27:57	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-10 04:28:11	<--	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has quit (Quit: Page closed)
2013-09-10 04:28:23	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-09-10 04:28:23	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-10 04:28:50	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 04:29:12	<--	augur (~augur@129.2.129.32) has quit (Remote host closed the connection)
2013-09-10 04:29:45	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-10 04:33:04	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-09-10 04:33:17	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Quit: Leaving.)
2013-09-10 04:33:36	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-10 04:34:35	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-10 04:34:58	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-10 04:35:56	<--	knz (~kena@82-170-42-189.ip.telfort.nl) has quit (Ping timeout: 268 seconds)
2013-09-10 04:36:10	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Ping timeout: 240 seconds)
2013-09-10 04:37:06	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 04:37:13	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-10 04:37:30	-->	mobilebl- (~mobileblu@dslb-188-110-245-042.pools.arcor-ip.net) has joined #haskell
2013-09-10 04:38:25	-->	YayMe (~user@97-122-184-27.hlrn.qwest.net) has joined #haskell
2013-09-10 04:38:59	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 04:39:10	<--	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Quit: Lost terminal)
2013-09-10 04:39:18	-->	knz (~kena@82-170-42-189.ip.telfort.nl) has joined #haskell
2013-09-10 04:39:29	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-10 04:41:04	<--	mobileblue (~mobileblu@dslb-094-217-241-063.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-09-10 04:41:32	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-10 04:43:03	<--	shesek (~shesek@77.127.54.57) has quit (Remote host closed the connection)
2013-09-10 04:43:31	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-10 04:43:56	-->	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 04:44:03	-->	c-rog (~c-rog@2601:9:5a00:38c:98eb:17b2:a16e:4674) has joined #haskell
2013-09-10 04:44:23	<--	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-10 04:44:23	<--	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-09-10 04:45:10	<--	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-10 04:46:54	--	Gaelan is now known as GaelanAintAround
2013-09-10 04:47:31	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-10 04:48:17	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 04:48:29	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-10 04:48:31	--	GaelanAintAround is now known as Gaelan
2013-09-10 04:49:16	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-10 04:51:55	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-10 04:53:02	-->	chatsiri_ (~chatsiri_@kuwin-134-177.kuwin.ku.ac.th) has joined #haskell
2013-09-10 04:53:25	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-10 04:55:01	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 04:55:08	<--	path[l] (~vsi@72.51.35.51) has quit (Read error: Connection reset by peer)
2013-09-10 04:55:42	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-10 04:55:58	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 04:56:14	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-09-10 04:57:46	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-10 04:58:44	-->	ivoscc (~ivo@190.233.206.150) has joined #haskell
2013-09-10 04:58:51	Fuuzetsu	I'm seeing some messed up behaviour here… I have some code that does a bunch of prints and calls to system programs (ghc --version for example) and if I run it from GHCi, it's all fine and in order but if I run it in a shell, the order is all messed up.
2013-09-10 04:59:10	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-10 04:59:21	scshunt	Fuuzetsu: can you paste it (lpaste.net)
2013-09-10 04:59:23	scshunt	?
2013-09-10 04:59:34	Fuuzetsu	eh, let me push it up, one sec
2013-09-10 05:00:34	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-10 05:00:40	-->	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has joined #haskell
2013-09-10 05:00:55	<--	SBauer1 (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-10 05:00:56	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 05:00:59	mstksg	is anyone here familiar/work oftenly with the current FRP haskell ecosystem?
2013-09-10 05:01:00	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-10 05:01:06	mstksg	what is the trendy framework right now?
2013-09-10 05:01:19	Fuuzetsu	scshunt: https://github.com/Fuuzetsu/haddock/blob/tests/hoogle-test/run.lhs
2013-09-10 05:01:22	mstksg	i need to simulate a dynamic system and i feel like FRP is the appropriate approach
2013-09-10 05:01:41	mstksg	many tutorials i have found were written in the 2000's or even 1990's
2013-09-10 05:01:41	Fuuzetsu	(you'll need GHC HEAD if you want to try it yourself)
2013-09-10 05:01:49	scshunt	Fuuzetsu: that's illegible
2013-09-10 05:01:54	Fuuzetsu	https://raw.github.com/Fuuzetsu/haddock/tests/hoogle-test/run.lhs
2013-09-10 05:01:56	Fuuzetsu	try this
2013-09-10 05:02:04	Fuuzetsu	sorry, GitHub doesn't tolerate LHS
2013-09-10 05:02:10	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 05:02:18	scshunt	my guess would be something like threading
2013-09-10 05:02:29	-->	ghena1986 (~ghena1986@ip98-163-242-143.no.no.cox.net) has joined #haskell
2013-09-10 05:02:32	Fuuzetsu	Yes, as is mine but I'm not sure how to stop it.
2013-09-10 05:02:36	-->	nonconvergent (~neuromanc@c-24-30-40-161.hsd1.ga.comcast.net) has joined #haskell
2013-09-10 05:02:38	ghena1986	http://bit.ly/17KoYYq
2013-09-10 05:02:39	<--	ghena1986 (~ghena1986@ip98-163-242-143.no.no.cox.net) has left #haskell
2013-09-10 05:02:41	nonconvergent	Hi guys.
2013-09-10 05:02:50	-->	otto_s_ (~user@cotb-4db34930.pool.mediaWays.net) has joined #haskell
2013-09-10 05:02:51	mstksg	hi nonconvergent
2013-09-10 05:02:53	<--	path[l] (~vsi@173.252.71.189) has quit (Ping timeout: 264 seconds)
2013-09-10 05:03:18	geekosaur	that creature needs to be banned. hitting mutiple channels. (where's idoru?)
2013-09-10 05:03:33	geekosaur	(ghena1986 that is)
2013-09-10 05:03:34	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Quit: Ex-Chat)
2013-09-10 05:04:13	Clint	idoru: wake up
2013-09-10 05:05:03	-->	Sorella (~queen@oftn/member/Sorella) has joined #haskell
2013-09-10 05:05:51	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 260 seconds)
2013-09-10 05:05:52	<--	otto_s (~user@cotb-4db34cf1.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-09-10 05:06:50	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-09-10 05:07:51	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-10 05:08:26	-->	generic (~generic@p57B2CD23.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 05:08:29	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-10 05:09:51	<--	watermind (~wm@bl19-221-221.dsl.telepac.pt) has quit (Ping timeout: 240 seconds)
2013-09-10 05:10:17	-->	erdudley (~evan@c-67-177-13-191.hsd1.ut.comcast.net) has joined #haskell
2013-09-10 05:10:25	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 276 seconds)
2013-09-10 05:10:54	<--	DarkNFoxy (~df@unaffiliated/darkfox) has quit (Ping timeout: 264 seconds)
2013-09-10 05:11:04	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 05:11:28	-->	DarkNFoxy (~df@unaffiliated/darkfox) has joined #haskell
2013-09-10 05:11:56	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-10 05:12:15	<--	shanse (~generic@p57B2DE86.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-10 05:12:15	--	generic is now known as shanse
2013-09-10 05:12:29	-->	canta (~canta@77-20-125-14-dynip.superkabel.de) has joined #haskell
2013-09-10 05:13:41	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-09-10 05:13:49	-->	litherum1 (~Litherum@204.28.120.225) has joined #haskell
2013-09-10 05:13:51	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-10 05:15:05	<--	riley_ (~riley@75-170-137-73.desm.qwest.net) has quit (Quit: Goodbye)
2013-09-10 05:15:27	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-10 05:15:34	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-10 05:15:34	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-10 05:15:45	-->	testost (~testost@50-0-90-62.dsl.dynamic.sonic.net) has joined #haskell
2013-09-10 05:15:50	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-10 05:15:54	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 05:16:23	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-09-10 05:16:30	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-10 05:16:46	--	preflex_ is now known as preflex
2013-09-10 05:18:26	-->	anarcat (~anarcat@72.0.72.144) has joined #haskell
2013-09-10 05:18:26	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-09-10 05:18:29	anarcat	hello
2013-09-10 05:18:33	<--	litherum1 (~Litherum@204.28.120.225) has quit (Client Quit)
2013-09-10 05:18:39	--	flazz is now known as flazz_gone
2013-09-10 05:18:55	-->	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has joined #haskell
2013-09-10 05:18:58	-->	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has joined #haskell
2013-09-10 05:19:11	anarcat	i am trying to install git-annex, which depends on the "vault" package, yet that package refuses to install with cabal:      fatal error: IO.hs: No such file or directory
2013-09-10 05:19:16	anarcat	any idea?
2013-09-10 05:19:43	--	Gaelan is now known as GaelanAintAround
2013-09-10 05:19:45	-->	tabemann (~travisb@adsl-68-248-233-187.dsl.milwwi.ameritech.net) has joined #haskell
2013-09-10 05:19:55	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-09-10 05:20:01	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 05:20:57	-->	litherum1 (~Adium@204.28.120.225) has joined #haskell
2013-09-10 05:21:06	-->	mno2 (~mno2@wlan25.cc.ntu.edu.tw) has joined #haskell
2013-09-10 05:21:52	<--	testost (~testost@50-0-90-62.dsl.dynamic.sonic.net) has quit (Remote host closed the connection)
2013-09-10 05:22:12	<--	latro`a_ (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 05:22:28	-->	hari (~hari@117.193.61.91) has joined #haskell
2013-09-10 05:22:50	--	hari is now known as Guest82987
2013-09-10 05:23:00	--	Guest82987 is now known as hari_
2013-09-10 05:23:11	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-10 05:23:35	hari_	In reference to a comment to my article, I'd like to know whether this point I wrote makes sense: http://harishankar.org/blog/entry.php/musings-on-functional-programming-and-haskell#comment-55311
2013-09-10 05:23:55	<--	amathew (~Adium@184.152.8.103) has left #haskell
2013-09-10 05:25:18	hari_	I am not sure whether I made myself clear.
2013-09-10 05:25:22	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:2185:1782:d06f:6c27) has joined #haskell
2013-09-10 05:26:26	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-10 05:27:33	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 05:29:22	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 05:29:45	nisstyre	hari_: well allocating more memory instead of altering the existing memory is the actual different isn't it?
2013-09-10 05:29:53	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:2185:1782:d06f:6c27) has quit (Ping timeout: 246 seconds)
2013-09-10 05:30:00	nisstyre	whether the old memory gets deallocated is up the the runtime obviously
2013-09-10 05:30:05	nisstyre	*up to
2013-09-10 05:30:17	hari_	nisstyre of course.
2013-09-10 05:30:35	hari_	Depending on the type of value the function returns.
2013-09-10 05:30:38	-->	saep1 (~saep@p5B2A13ED.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 05:30:47	<--	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 05:30:49	nisstyre	hari_: so "mutating" could mean a functional update if you used it in a generic sense
2013-09-10 05:31:07	hari_	nisstyre, yes, I was talking in that sense.
2013-09-10 05:31:10	nisstyre	but there is a difference obviously
2013-09-10 05:31:11	-->	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 05:31:15	hari_	Not mutate as in destructive memory update.
2013-09-10 05:31:18	nisstyre	yeah
2013-09-10 05:31:21	nisstyre	I agree
2013-09-10 05:31:22	<--	saep (~saep@p5B2A1329.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-10 05:31:45	nisstyre	hari_: I think there it gets a bit fuzzy is with things like zippers
2013-09-10 05:32:00	nisstyre	where you are only updating part of a structure
2013-09-10 05:32:37	-->	Kevin_ (~Kevin@209.65.15.42) has joined #haskell
2013-09-10 05:33:08	hari_	nisstyre, thanks for the thoughts.
2013-09-10 05:33:20	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 05:33:26	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Ping timeout: 240 seconds)
2013-09-10 05:33:46	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-10 05:33:47	hari_	I must go now. Will be back later.
2013-09-10 05:33:48	nisstyre	hari_: no problem
2013-09-10 05:34:04	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-10 05:34:05	-->	Shaladdle (~Shaladdle@216.9.110.13) has joined #haskell
2013-09-10 05:34:16	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 05:34:27	<--	litherum1 (~Adium@204.28.120.225) has quit (Quit: Leaving.)
2013-09-10 05:35:00	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Remote host closed the connection)
2013-09-10 05:35:03	<--	Kevin__ (~Kevin@209.65.15.42) has quit (Ping timeout: 264 seconds)
2013-09-10 05:35:18	<--	hari_ (~hari@117.193.61.91) has left #haskell ("Ex-Chat")
2013-09-10 05:35:43	-->	ihm1_ (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-10 05:35:50	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2013-09-10 05:36:59	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-10 05:37:16	-->	derek_c (~derekchia@nat-128-84-124-0-455.cit.cornell.edu) has joined #haskell
2013-09-10 05:37:32	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-10 05:37:42	Tribal	>reverse 12
2013-09-10 05:37:57	Tribal	> reverse 12
2013-09-10 05:37:58	lambdabot	  No instance for (GHC.Show.Show a0)
2013-09-10 05:37:58	lambdabot	   arising from a use of `M1398385879.sh...
2013-09-10 05:38:03	Tribal	> reverse '12'
2013-09-10 05:38:05	lambdabot	  <hint>:1:10: parse error on input `12'
2013-09-10 05:38:07	Tribal	harhar
2013-09-10 05:38:15	Tribal	> reverse "12"
2013-09-10 05:38:16	lambdabot	  "21"
2013-09-10 05:38:38	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-10 05:38:40	--	ihm1_ is now known as ihm1
2013-09-10 05:38:46	<--	path[l] (~vsi@72.51.35.51) has quit (Quit: path[l])
2013-09-10 05:38:54	Tribal	Please don't yell at my inadequacy, ty
2013-09-10 05:39:17	-->	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has joined #haskell
2013-09-10 05:39:21	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 05:39:24	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-09-10 05:39:25	ekipan	if you'd like to feel inadequate in private, lambdabot responds to /msg's
2013-09-10 05:39:41	ekipan	explore, and then come back to the channel with questions
2013-09-10 05:39:49	-->	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has joined #haskell
2013-09-10 05:39:50	Tribal	`-`
2013-09-10 05:39:55	<--	ricree (~ricree@c-71-57-124-16.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-10 05:42:15	<--	ISF (~ivan@187.64.222.94) has quit (Ping timeout: 276 seconds)
2013-09-10 05:44:08	<--	cmccann (~cam@pool-96-235-18-135.pitbpa.fios.verizon.net) has quit (Quit: Ex-Chat)
2013-09-10 05:45:58	<--	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 245 seconds)
2013-09-10 05:48:00	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 05:48:01	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 05:48:34	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 05:49:50	-->	tac (~tac-tics@2602:306:bdb4:5100:69dd:7ea9:75c7:d0ce) has joined #haskell
2013-09-10 05:49:56	<--	xexonixxexillion (~Adium@14-202-198-83.static.tpgi.com.au) has quit (Remote host closed the connection)
2013-09-10 05:50:13	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-09-10 05:50:34	-->	bkolera (~textual@123.200.143.249) has joined #haskell
2013-09-10 05:51:02	<--	sinistersnare (6c2da18a@gateway/web/cgi-irc/kiwiirc.com/ip.108.45.161.138) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2013-09-10 05:51:26	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Quit: leaving)
2013-09-10 05:52:06	-->	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has joined #haskell
2013-09-10 05:53:14	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 05:54:30	-->	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 05:54:50	<--	ekipan (4cd4e4d3@gateway/web/freenode/ip.76.212.228.211) has quit (Quit: Page closed)
2013-09-10 05:56:18	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 05:56:38	<--	agallagher (~textual@mpk-nat-3.thefacebook.com) has quit (Ping timeout: 240 seconds)
2013-09-10 05:56:58	-->	Philonous_ (~Philonous@dslb-178-005-035-209.pools.arcor-ip.net) has joined #haskell
2013-09-10 05:57:30	<--	erdudley (~evan@c-67-177-13-191.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-09-10 05:57:38	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-10 05:58:03	<--	Philonous (~Philonous@dslb-188-106-138-223.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-10 05:58:46	<--	nisstyre-laptop (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-10 05:58:56	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Ping timeout: 246 seconds)
2013-09-10 05:59:27	-->	totimkopf (~james@unaffiliated/totimkopf) has joined #haskell
2013-09-10 05:59:37	-->	talzeus__ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 06:00:02	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 245 seconds)
2013-09-10 06:00:15	totimkopf	hello, could someone please show me how to make Map k an instance of Functor?
2013-09-10 06:02:01	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 06:02:15	enthropy	@hackage containers
2013-09-10 06:02:16	lambdabot	http://hackage.haskell.org/package/containers
2013-09-10 06:02:46	<--	andares_ (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-10 06:03:06	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-10 06:03:29	-->	sleepynate (~sleepynat@108.80.181.6) has joined #haskell
2013-09-10 06:03:36	enthropy	totimkopf: I have a instance Functor (Map k) -- Defined in `containers-0.5.0.0:Data.Map.Base'
2013-09-10 06:03:47	enthropy	so you could look in that file in the containers library
2013-09-10 06:03:53	-->	td1231 (~tom@74-95-11-102-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 06:03:57	<--	td1231 (~tom@74-95-11-102-SFBA.hfc.comcastbusiness.net) has left #haskell
2013-09-10 06:04:00	totimkopf	enthropy: thanks :)
2013-09-10 06:04:18	<--	talzeus__ (~studybot_@101.110.31.120) has quit (Ping timeout: 245 seconds)
2013-09-10 06:04:21	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-10 06:04:25	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Max SendQ exceeded)
2013-09-10 06:04:39	<--	PatrickRobotham (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has quit (Ping timeout: 260 seconds)
2013-09-10 06:04:44	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-10 06:04:49	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Max SendQ exceeded)
2013-09-10 06:05:11	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-10 06:08:31	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-09-10 06:09:19	<--	carlosgaldino (~carlosgal@177.32.75.176) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 06:10:53	totimkopf	enthropy: line 2530, correct? Why did LYAH make it seem to be a difficult thing :p
2013-09-10 06:10:56	<--	[[zz]] (~q@node-1cdp.pool-101-108.dynamic.totbb.net) has quit (Read error: Connection reset by peer)
2013-09-10 06:11:12	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-10 06:11:58	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has left #haskell
2013-09-10 06:12:04	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 06:12:23	enthropy	you have to follow through to the definition of map I guess
2013-09-10 06:13:02	enthropy	which is two lines apparently
2013-09-10 06:13:06	totimkopf	yes :)
2013-09-10 06:13:27	totimkopf	why did LYAH make it seem like a challenge, they could have just included it
2013-09-10 06:13:38	totimkopf	anyway, thank you
2013-09-10 06:13:51	enthropy	by the way ghc can derive functor instances
2013-09-10 06:14:36	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-10 06:15:07	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-10 06:16:23	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 06:16:53	-->	MitchellSalad (18065c30@gateway/web/freenode/ip.24.6.92.48) has joined #haskell
2013-09-10 06:18:36	-->	refold (~gman@h-129-27.a258.priv.bahnhof.se) has joined #haskell
2013-09-10 06:18:48	-->	litherum1 (~Adium@204.28.120.225) has joined #haskell
2013-09-10 06:19:13	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-10 06:19:36	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-10 06:19:50	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-10 06:20:04	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-10 06:20:27	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 06:20:40	<--	Sorella (~queen@oftn/member/Sorella) has quit (Quit: G'night everynyan~!)
2013-09-10 06:21:33	<--	sleepynate (~sleepynat@108.80.181.6) has quit (Remote host closed the connection)
2013-09-10 06:21:59	<--	litherum1 (~Adium@204.28.120.225) has quit (Client Quit)
2013-09-10 06:22:49	-->	agallagher (~textual@173.252.71.129) has joined #haskell
2013-09-10 06:23:20	-->	PatrickRobotham (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has joined #haskell
2013-09-10 06:23:28	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-10 06:23:51	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-10 06:24:08	<--	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 241 seconds)
2013-09-10 06:24:12	<--	andares_ (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-10 06:24:20	-->	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has joined #haskell
2013-09-10 06:24:32	<--	tac (~tac-tics@2602:306:bdb4:5100:69dd:7ea9:75c7:d0ce) has quit (Quit: Leaving)
2013-09-10 06:25:12	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 06:25:43	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 06:26:04	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:7da3:c883:5d36:bd60) has joined #haskell
2013-09-10 06:26:26	<--	skeet70 (~skeet70@host-69-146-87-119.bzm-mt.client.bresnan.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 06:27:30	-->	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has joined #haskell
2013-09-10 06:27:59	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-10 06:30:26	<--	c-rog (~c-rog@2601:9:5a00:38c:98eb:17b2:a16e:4674) has quit (Remote host closed the connection)
2013-09-10 06:30:26	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:7da3:c883:5d36:bd60) has quit (Ping timeout: 245 seconds)
2013-09-10 06:31:17	-->	c-rog (~c-rog@c-67-180-202-11.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 06:31:25	<--	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has quit (Read error: Connection reset by peer)
2013-09-10 06:31:46	-->	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has joined #haskell
2013-09-10 06:38:03	-->	mkscrg (~mkscrg@173-228-85-139.dsl.dynamic.sonic.net) has joined #haskell
2013-09-10 06:39:10	MitchellSalad	how come the associative operator for a Pipe was named >-> and not >~>, for symmetry with >~ and ~>
2013-09-10 06:39:21	satc	How do you guys export Arbitrary instances of a data type you defined? I mean suppose I have a package A which defined data Foo, Now I wrote some tests in A and defined Arbitrary instance there. Now I have a pacakge B which uses Foo, and while writing the tests for that I need the arbitrary instance for Foo. Defining Arbitrary instance with Foo in the same module is not an option as it will add dependency on QuickCheck even if the user might not want to run the
2013-09-10 06:39:21	satc	tests.
2013-09-10 06:39:22	MitchellSalad	</persnickety>
2013-09-10 06:40:07	S11001001	satc: put in some random object, say "import ThatObject._ where you want to use these arbs"
2013-09-10 06:40:38	<--	johntromp (~johntromp@ool-18be0ed6.dyn.optonline.net) has quit (Remote host closed the connection)
2013-09-10 06:40:43	S11001001	satc: by convention, the name of the library you distribute with these arbs is "yourlib-scalacheck-binding"
2013-09-10 06:40:44	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-10 06:41:30	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-10 06:42:30	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-10 06:42:36	satc	S11001001: Wait.. what. I am saying I dont want to export Arbitrary instance with the package as it adds dependency on QuickCheck. So I have defined that in tests. Now how do I use them if I want to use Arbitray instances in another package.
2013-09-10 06:42:43	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Quit: Leaving.)
2013-09-10 06:42:59	<--	anarcat (~anarcat@72.0.72.144) has left #haskell
2013-09-10 06:43:04	<--	bkolera (~textual@123.200.143.249) has quit (Ping timeout: 260 seconds)
2013-09-10 06:43:07	S11001001	satc: is "another package" in the same build, or a different one?
2013-09-10 06:43:29	<--	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has quit (Read error: Operation timed out)
2013-09-10 06:43:36	S11001001	satc: I assumed you were building a library of data types and wanted to provide arbs to library users who wanted them.
2013-09-10 06:44:16	satc	S11001001: Yes, but I dont want to add dependency on quickcheckk for users who dont want them.
2013-09-10 06:44:35	S11001001	satc: yes to "building a library of data types..."?
2013-09-10 06:44:40	-->	jungnam (jungnam@61.74.233.216) has joined #haskell
2013-09-10 06:44:51	<--	mkscrg (~mkscrg@173-228-85-139.dsl.dynamic.sonic.net) has quit
2013-09-10 06:45:22	satc	Lets say I am writing a second library which uses the first
2013-09-10 06:45:35	<--	derek_c (~derekchia@nat-128-84-124-0-455.cit.cornell.edu) has quit (Quit: leaving)
2013-09-10 06:45:42	S11001001	which could be in a separate build?
2013-09-10 06:45:42	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-10 06:46:29	Ghoul_	System.FilePath behaves differently on windows than it should when including Posix
2013-09-10 06:46:48	Ghoul_	Shake realized this and wrote a better `normalize` which behaves proper
2013-09-10 06:47:16	<--	diadara (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-09-10 06:47:17	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-10 06:47:31	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-10 06:47:57	satc	S11001001: Yes.
2013-09-10 06:47:58	S11001001	satc: Ugh, I am sorry, I have been talking nonsense, thought this was #scala (where your problem is also relevant) until Ghoul_ started talking about that.  Ick.
2013-09-10 06:48:18	<--	diadara (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-09-10 06:48:24	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-10 06:48:34	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-10 06:48:50	satc	Ghoul_: Wait, that was for??
2013-09-10 06:49:01	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 06:49:18	S11001001	satc: no, I was really confused for a bit that Ghoul_ was talking about a haskell library in #scala; not related to your question :)
2013-09-10 06:50:02	<--	Shaladdle (~Shaladdle@216.9.110.13) has quit (Quit: Shaladdle)
2013-09-10 06:50:17	S11001001	satc: Anyway, perhaps the same technique applies, though; you could define a library of arbs that depends on your main library, and have the tests for your main library in that library of arbs instead.  I imagine this wouldn't be ideal, though
2013-09-10 06:50:36	Ghoul_	satc: it was just a remark. probably not related to your problem.
2013-09-10 06:50:51	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-10 06:54:53	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-09-10 06:55:01	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-10 06:55:25	<--	mno2 (~mno2@wlan25.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 06:55:44	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 06:55:58	-->	amosr (~amos@149.171.231.242) has joined #haskell
2013-09-10 06:56:52	<--	MitchellSalad (18065c30@gateway/web/freenode/ip.24.6.92.48) has left #haskell
2013-09-10 06:56:58	-->	MitchellSalad (18065c30@gateway/web/freenode/ip.24.6.92.48) has joined #haskell
2013-09-10 06:57:02	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-10 06:57:18	-->	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-10 06:57:19	<--	tharper (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Changing host)
2013-09-10 06:57:19	-->	tharper (~tomh@unaffiliated/sioraiocht) has joined #haskell
2013-09-10 06:58:08	<--	pavonia (~user@p4FEEE740.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-10 06:59:17	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-10 06:59:50	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 240 seconds)
2013-09-10 07:00:50	<--	lightquake (~lightquak@li363-105.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-09-10 07:00:51	<--	robinbb (~robinbb-f@li234-110.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-09-10 07:00:57	-->	lightquake (~lightquak@li363-105.members.linode.com) has joined #haskell
2013-09-10 07:01:08	-->	robinbb (~robinbb-f@li234-110.members.linode.com) has joined #haskell
2013-09-10 07:01:47	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-10 07:02:06	heath	why is static typing important again?
2013-09-10 07:02:30	satc	S11001001: Yeah, this was what I am doing right now. Thought there might be a better solution.
2013-09-10 07:03:54	S11001001	satc: it happens to work well for scala because of the different way the build system works.  I don't know, maybe haskell projects are doing something better that works for cabal.
2013-09-10 07:05:07	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Remote host closed the connection)
2013-09-10 07:06:12	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-10 07:06:45	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 07:07:18	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-10 07:07:38	<--	yacks (~py@103.6.159.103) has quit (Quit: Leaving)
2013-09-10 07:07:59	<--	ivoscc (~ivo@190.233.206.150) has quit (Remote host closed the connection)
2013-09-10 07:08:48	-->	ananthakumaran (~Adium@117.192.134.162) has joined #haskell
2013-09-10 07:09:12	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 260 seconds)
2013-09-10 07:09:55	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Client Quit)
2013-09-10 07:10:43	<--	Obfuscate (~keii@unaffiliated/obfuscate) has quit (Remote host closed the connection)
2013-09-10 07:10:57	-->	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 07:11:09	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-10 07:11:48	-->	Obfuscate (~keii@unaffiliated/obfuscate) has joined #haskell
2013-09-10 07:12:01	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-10 07:12:10	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-10 07:12:31	<--	Desheng2 (~Desheng@166.181.67.243) has quit (Quit: Bye)
2013-09-10 07:12:37	-->	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-10 07:12:46	<--	ananthakumaran (~Adium@117.192.134.162) has quit (Client Quit)
2013-09-10 07:12:51	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 07:13:11	-->	Apocalisp (~textual@ip-64-134-174-142.public.wayport.net) has joined #haskell
2013-09-10 07:14:48	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 260 seconds)
2013-09-10 07:15:19	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 07:18:29	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-10 07:19:22	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-10 07:19:32	<--	Apocalisp (~textual@ip-64-134-174-142.public.wayport.net) has quit (Quit: Leaving...)
2013-09-10 07:21:14	-->	kizzx2 (~Adium@059148047146.ctinets.com) has joined #haskell
2013-09-10 07:21:17	-->	csakatoku (~csakatoku@em119-72-198-132.pool.e-mobile.ne.jp) has joined #haskell
2013-09-10 07:21:42	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-10 07:22:35	<--	Mortomes_ (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 260 seconds)
2013-09-10 07:26:03	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-10 07:26:07	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-10 07:26:57	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:b80f:3894:f5be:c004) has joined #haskell
2013-09-10 07:28:04	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 07:28:39	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 07:29:20	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 07:31:18	<--	tabemann (~travisb@adsl-68-248-233-187.dsl.milwwi.ameritech.net) has quit (Quit: Leaving)
2013-09-10 07:31:20	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:b80f:3894:f5be:c004) has quit (Ping timeout: 246 seconds)
2013-09-10 07:31:21	-->	morazow_ (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 07:32:25	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-10 07:32:35	<--	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has quit (Read error: Connection reset by peer)
2013-09-10 07:32:36	heath	re: my question from earlier...
2013-09-10 07:32:56	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-10 07:33:02	-->	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-10 07:33:23	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-10 07:33:38	heath	makes sense that if you send a value to another function, that function should compute the same result over and over, that's why static is good. case closed </haskell_101>
2013-09-10 07:33:44	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-10 07:33:56	-->	Mortomes|Bus (~Mortomes_@109.35.183.190) has joined #haskell
2013-09-10 07:34:04	<--	dubsg (~dubsg@2601:9:5b00:10d:3c32:238d:dba5:9bb7) has quit (Remote host closed the connection)
2013-09-10 07:34:23	<--	Mortomes|Bus (~Mortomes_@109.35.183.190) has quit (Changing host)
2013-09-10 07:34:23	-->	Mortomes|Bus (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 07:34:49	-->	csakatok_ (~csakatoku@em119-72-194-50.pool.e-mobile.ne.jp) has joined #haskell
2013-09-10 07:35:41	-->	poseid (~pmu@p5DCBF8C1.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 07:35:45	-->	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-10 07:36:40	<--	xenophon (~his_shado@64.124.65.162) has quit (Ping timeout: 245 seconds)
2013-09-10 07:37:06	<--	refold (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Quit: leaving)
2013-09-10 07:37:21	-->	xenophon (~his_shado@64.124.65.162) has joined #haskell
2013-09-10 07:37:28	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 07:37:33	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 07:37:51	<--	csakatoku (~csakatoku@em119-72-198-132.pool.e-mobile.ne.jp) has quit (Ping timeout: 256 seconds)
2013-09-10 07:38:36	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Quit: Одлазим)
2013-09-10 07:39:31	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 07:39:39	-->	jorick (~kciroj@94-224-181-103.access.telenet.be) has joined #haskell
2013-09-10 07:39:39	<--	jorick (~kciroj@94-224-181-103.access.telenet.be) has quit (Changing host)
2013-09-10 07:39:39	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-10 07:39:59	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-10 07:41:20	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-10 07:41:29	-->	kamatsu (~Adium@vampire.ertos.nicta.com.au) has joined #haskell
2013-09-10 07:41:36	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-09-10 07:41:49	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-10 07:41:50	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 240 seconds)
2013-09-10 07:42:15	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-09-10 07:42:58	<--	OlegYch9 (~OlegYch@213.184.238.131) has quit (Ping timeout: 256 seconds)
2013-09-10 07:42:58	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-10 07:43:37	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-10 07:44:24	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-10 07:44:26	johnw	can "cabal sandbox" use an alternate GHC tarball, like hsenv --ghc=PATH does?
2013-09-10 07:45:18	-->	mbuf (user@nat/redhat/x-pvtztkgyunzvusjo) has joined #haskell
2013-09-10 07:47:07	<--	Mortomes|Bus (~Mortomes_@unaffiliated/mortomes) has quit
2013-09-10 07:47:25	-->	Mortomes|Bus (~Mortomes_@109.35.183.190) has joined #haskell
2013-09-10 07:47:33	-->	mno2 (~mno2@wlan70.cc.ntu.edu.tw) has joined #haskell
2013-09-10 07:47:36	-->	shintah (bebble@h-151-191.a336.priv.bahnhof.se) has joined #haskell
2013-09-10 07:47:41	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-10 07:48:00	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 07:48:14	<--	Mortomes|Bus (~Mortomes_@109.35.183.190) has quit (Changing host)
2013-09-10 07:48:14	-->	Mortomes|Bus (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 07:48:22	<--	morazow_ (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-09-10 07:48:22	<--	james-ubc (~james@dhcp-206-87-192-37.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 276 seconds)
2013-09-10 07:48:41	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 07:50:12	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-09-10 07:50:26	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-10 07:51:22	<--	slack1256 (~slack@181-160-150-107.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-10 07:51:56	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 07:54:43	--	gpampara_off is now known as gpampara
2013-09-10 07:54:54	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-09-10 07:56:03	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 07:56:09	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-10 07:56:21	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-10 07:56:50	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 07:58:24	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-10 07:58:51	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-10 07:58:56	<--	poseid (~pmu@p5DCBF8C1.dip0.t-ipconnect.de) has quit (Quit: poseid)
2013-09-10 07:59:09	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-10 07:59:15	<--	mno2 (~mno2@wlan70.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 07:59:29	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-09-10 07:59:56	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 08:00:40	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 268 seconds)
2013-09-10 08:00:54	-->	hiroaki (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 08:01:05	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 256 seconds)
2013-09-10 08:02:16	<--	PatrickRobotham (~chatzilla@dyn-49-127-66-22.its.monash.edu.au) has quit (Ping timeout: 264 seconds)
2013-09-10 08:02:50	<--	hiroakip (~hiroaki@p5DC628AB.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-10 08:04:39	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-09-10 08:04:43	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 245 seconds)
2013-09-10 08:04:55	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-10 08:05:01	-->	litherum1 (~Adium@204.28.120.240) has joined #haskell
2013-09-10 08:05:17	<--	tharper (~tomh@unaffiliated/sioraiocht) has quit (Remote host closed the connection)
2013-09-10 08:05:25	<--	plains (zchr@unaffiliated/plains) has quit (Ping timeout: 245 seconds)
2013-09-10 08:05:28	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Remote host closed the connection)
2013-09-10 08:05:50	<--	strax (uid4099@gateway/web/irccloud.com/x-cvtqygjodkntiptf) has quit (Ping timeout: 245 seconds)
2013-09-10 08:05:52	<--	colah (~colah@206.248.173.86) has quit (Ping timeout: 264 seconds)
2013-09-10 08:06:15	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-fjphqbqvbralqbzy) has quit (Ping timeout: 264 seconds)
2013-09-10 08:06:21	<--	mgaare (~quassel@192.81.216.48) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-10 08:06:26	-->	mgaare_ (~quassel@192.81.216.48) has joined #haskell
2013-09-10 08:06:38	<--	SLi (sliedes@lakka.kapsi.fi) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-10 08:06:40	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (Ping timeout: 245 seconds)
2013-09-10 08:06:44	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-09-10 08:06:59	-->	SLi (sliedes@lakka.kapsi.fi) has joined #haskell
2013-09-10 08:07:06	<--	tobyp (uid4@gateway/web/irccloud.com/x-kovjedaeeuarypij) has quit (Ping timeout: 245 seconds)
2013-09-10 08:07:13	-->	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-10 08:07:27	<--	xinming_ (~xinming@125.82.194.215) has quit (Ping timeout: 264 seconds)
2013-09-10 08:07:30	<--	grazs (~g@89.221.241.91) has quit (Ping timeout: 245 seconds)
2013-09-10 08:07:31	<--	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has quit (Ping timeout: 245 seconds)
2013-09-10 08:07:32	<--	udevd (~kaetzchen@151.236.17.188) has quit (Remote host closed the connection)
2013-09-10 08:07:40	-->	udevd (~kaetzchen@151.236.17.188) has joined #haskell
2013-09-10 08:07:54	<--	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has quit (Ping timeout: 240 seconds)
2013-09-10 08:07:55	<--	joastbg (~joastbg@c83-251-174-153.bredband.comhem.se) has quit (Client Quit)
2013-09-10 08:07:59	<--	ddinh (~David@108.67.65.91) has quit (Remote host closed the connection)
2013-09-10 08:08:03	<--	cic (~cic@c-1180e555.012-145-6c6b7013.cust.bredbandsbolaget.se) has quit (Ping timeout: 264 seconds)
2013-09-10 08:08:03	<--	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has quit (Ping timeout: 264 seconds)
2013-09-10 08:08:03	<--	ehamberg (~erlend@hamberg.no) has quit (Ping timeout: 264 seconds)
2013-09-10 08:08:03	<--	destiny (~ircguy@93.190.3.226) has quit (Ping timeout: 264 seconds)
2013-09-10 08:08:13	-->	ehamberg (~erlend@hamberg.no) has joined #haskell
2013-09-10 08:08:13	-->	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 08:08:17	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-10 08:08:20	-->	xinming (~xinming@125.82.194.215) has joined #haskell
2013-09-10 08:08:20	<--	milli (~milli@rasler.acmeps.com) has quit (Ping timeout: 245 seconds)
2013-09-10 08:08:20	<--	opqdonut (opqdonut@pseudo.fixme.fi) has quit (Ping timeout: 245 seconds)
2013-09-10 08:08:39	<--	dlnx` (~dlnx@hackerspace.pl) has quit (Ping timeout: 264 seconds)
2013-09-10 08:08:42	-->	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has joined #haskell
2013-09-10 08:08:46	-->	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has joined #haskell
2013-09-10 08:08:59	-->	dlnx` (~dlnx@hackerspace.pl) has joined #haskell
2013-09-10 08:09:00	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-10 08:09:19	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-10 08:10:11	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-10 08:10:43	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-10 08:10:44	<--	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has quit (Read error: Operation timed out)
2013-09-10 08:10:54	-->	dalaing (~dalaing@124-171-227-199.dyn.iinet.net.au) has joined #haskell
2013-09-10 08:11:01	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-10 08:11:15	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-09-10 08:11:17	<--	arkeet (arkeet@unaffiliated/arkeet) has quit (Quit: ZNC - http://znc.sourceforge.net)
2013-09-10 08:11:17	<--	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has quit (Quit: ZNC - http://znc.in)
2013-09-10 08:11:24	-->	arkeet (arkeet@unaffiliated/arkeet) has joined #haskell
2013-09-10 08:11:30	-->	apples (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has joined #haskell
2013-09-10 08:11:30	-->	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has joined #haskell
2013-09-10 08:11:30	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (Remote host closed the connection)
2013-09-10 08:11:30	<--	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (Quit: Quit)
2013-09-10 08:11:48	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-09-10 08:11:48	--	apples is now known as Guest77905
2013-09-10 08:12:03	-->	colah (~colah@206.248.173.86) has joined #haskell
2013-09-10 08:12:49	<--	bestzdneirf (petterrav@2001:470:6bd1::) has quit (Quit: ZNC - http://znc.in)
2013-09-10 08:12:51	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-10 08:12:51	<--	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-10 08:13:00	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 08:13:17	-->	milli (~milli@rasler.acmeps.com) has joined #haskell
2013-09-10 08:13:20	-->	PatrickRobotham (~chatzilla@101.119.28.71) has joined #haskell
2013-09-10 08:13:26	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (Quit: ..::::..)
2013-09-10 08:13:40	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-09-10 08:14:01	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-10 08:14:03	<--	marienz (~marienz@freenode/staff/marienz) has quit (Ping timeout: 624 seconds)
2013-09-10 08:14:47	-->	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-10 08:15:38	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-10 08:15:41	-->	destiny (~ircguy@93.190.3.226) has joined #haskell
2013-09-10 08:15:49	-->	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 08:15:59	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-09-10 08:16:46	<--	ion (ion@heh.fi) has quit (Quit: :q)
2013-09-10 08:17:09	-->	ion (ion@heh.fi) has joined #haskell
2013-09-10 08:17:17	<--	MitchellSalad (18065c30@gateway/web/freenode/ip.24.6.92.48) has quit (Quit: Page closed)
2013-09-10 08:18:22	<--	Bluuu (a@unaffiliated/bluuu) has quit (Ping timeout: 245 seconds)
2013-09-10 08:18:31	<--	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has quit (Read error: Connection timed out)
2013-09-10 08:19:11	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-10 08:19:23	-->	pyx (~pyx@unaffiliated/pyx) has joined #haskell
2013-09-10 08:19:28	<--	pyx (~pyx@unaffiliated/pyx) has quit (Client Quit)
2013-09-10 08:19:30	<--	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection timed out)
2013-09-10 08:19:42	<--	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has quit (Client Quit)
2013-09-10 08:19:46	<--	PatrickRobotham (~chatzilla@101.119.28.71) has quit (Read error: Connection reset by peer)
2013-09-10 08:20:01	-->	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 08:20:30	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-10 08:21:23	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-09-10 08:21:36	-->	plains (zchr@unaffiliated/plains) has joined #haskell
2013-09-10 08:21:58	<--	zbcm (~zbcm@147.41.7.17) has quit (Quit: Leaving)
2013-09-10 08:22:27	-->	ananthakumaran (~Adium@122.166.180.215) has joined #haskell
2013-09-10 08:23:22	<--	FreeFull (~freefull@defocus/sausage-lover) has quit
2013-09-10 08:25:06	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 08:26:04	-->	fizruk (~fizruk@109.74.138.26) has joined #haskell
2013-09-10 08:26:16	-->	PatrickRobotham (~chatzilla@101.119.28.71) has joined #haskell
2013-09-10 08:27:26	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-10 08:27:43	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 256 seconds)
2013-09-10 08:27:48	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:59b:c1fd:5441:4591) has joined #haskell
2013-09-10 08:27:55	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-09-10 08:28:01	<--	JaRoel|4d (~jaroel|4d@2001:980:7133:1:496d:f545:a9a5:9a13) has quit (Ping timeout: 245 seconds)
2013-09-10 08:28:53	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 256 seconds)
2013-09-10 08:29:19	-->	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 08:29:22	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-09-10 08:29:30	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-10 08:30:03	dmj`	in Data.Set, why isn't null defined as null Tip = True; null _ = False;
2013-09-10 08:30:23	<--	plains (zchr@unaffiliated/plains) has quit (Quit: ZNC - http://znc.in)
2013-09-10 08:30:23	<--	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (Quit: Quit)
2013-09-10 08:30:32	dmj`	null t = case t of { Tip -> True; Bin {} -> False }
2013-09-10 08:30:33	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-10 08:31:04	dmj`	or does it not matter
2013-09-10 08:31:16	<--	yopikh (~mand@79.175.167.200) has quit (Remote host closed the connection)
2013-09-10 08:31:24	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (Read error: Operation timed out)
2013-09-10 08:31:38	-->	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-09-10 08:32:14	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:59b:c1fd:5441:4591) has quit (Ping timeout: 246 seconds)
2013-09-10 08:32:55	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 08:32:58	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 08:33:17	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-10 08:33:23	-->	opqdonut (opqdonut@pseudo.fixme.fi) has joined #haskell
2013-09-10 08:33:45	<--	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has quit (Ping timeout: 245 seconds)
2013-09-10 08:34:37	identity	Is anyone here familiar with juicypixels? generateFoldImage, in particular. I'm getting stack overflows when trying to generate an image
2013-09-10 08:34:41	-->	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has joined #haskell
2013-09-10 08:34:57	enthropy	dmj`: I don't think having a _ saves you anything
2013-09-10 08:35:24	enthropy	the runtime still has to look for which constructor you have to decide which case to take
2013-09-10 08:36:20	<--	kamatsu (~Adium@vampire.ertos.nicta.com.au) has quit (Quit: Leaving.)
2013-09-10 08:36:40	-->	bestzdneirf (petterrav@2001:470:6bd1::) has joined #haskell
2013-09-10 08:37:01	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Quit: Computer has gone to sleep.)
2013-09-10 08:37:07	shachaf	dmj`: The second thing you gave is the actual definition?
2013-09-10 08:37:13	dmj`	shachaf: yes
2013-09-10 08:37:19	shachaf	I doubt it matters.
2013-09-10 08:37:47	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-10 08:37:48	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-10 08:37:51	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-09-10 08:38:00	-->	kamatsu (~Adium@vampire.ertos.nicta.com.au) has joined #haskell
2013-09-10 08:38:08	enthropy	there might be a "software engineering" argument in favor of the second
2013-09-10 08:38:19	<--	__main__ (~main@50.240.210.73) has quit (Ping timeout: 264 seconds)
2013-09-10 08:38:32	enthropy	since if you add some new constructors, you'll have some warnings to look at and make updates accordingly
2013-09-10 08:38:52	<--	Mortomes|Bus (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 241 seconds)
2013-09-10 08:38:54	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 268 seconds)
2013-09-10 08:39:16	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-10 08:39:18	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Quit: WeeChat 0.3.7)
2013-09-10 08:40:17	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-10 08:40:27	<--	litherum1 (~Adium@204.28.120.240) has quit (Quit: Leaving.)
2013-09-10 08:41:00	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-10 08:41:15	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-10 08:43:36	<--	juiko (~juiko@pc-141-163-120-200.cm.vtr.net) has quit (Ping timeout: 256 seconds)
2013-09-10 08:43:49	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Quit: dpathakj)
2013-09-10 08:43:55	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 08:44:31	-->	dubsg (~dubsg@2601:9:5b00:10d:5087:1717:8ef0:c839) has joined #haskell
2013-09-10 08:45:10	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-10 08:46:48	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 245 seconds)
2013-09-10 08:46:50	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-10 08:47:34	<--	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-10 08:47:56	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-10 08:48:05	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-10 08:48:58	-->	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-10 08:49:02	<--	dubsg (~dubsg@2601:9:5b00:10d:5087:1717:8ef0:c839) has quit (Ping timeout: 240 seconds)
2013-09-10 08:49:52	<--	ananthakumaran (~Adium@122.166.180.215) has quit (Read error: Connection reset by peer)
2013-09-10 08:49:56	<--	c-rog (~c-rog@c-67-180-202-11.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-10 08:50:12	identity	How would I go about tracking down where a stack overflow is happening? I'm pretty sure I know where, but I'm unsure, as I cannot replicate the overflow in ghci.
2013-09-10 08:50:31	shachaf	@where rts-xc might help.
2013-09-10 08:50:31	lambdabot	ghc -prof -fprof-auto -rtsopts -osuf .p_o foo.hs && ./foo +RTS -xc # print stack traces on unhandled exceptions
2013-09-10 08:50:52	<--	Krakarn (Krakarn@62.80.204.136) has quit (Ping timeout: 245 seconds)
2013-09-10 08:50:58	shachaf	Also set options in ghci to limit the stack size?
2013-09-10 08:51:02	shachaf	I think there's something.
2013-09-10 08:51:06	-->	ananthakumaran (~Adium@122.166.180.215) has joined #haskell
2013-09-10 08:51:08	identity	it doesn't by default?
2013-09-10 08:51:18	shachaf	I don't rmeember the details.
2013-09-10 08:51:24	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 08:51:24	identity	if I compile my program, and increase the stack size to something ridiculous, like 500m, it still consumes all my ram
2013-09-10 08:51:41	identity	if I run the same thing in ghci, it finishes fine without eating all my megabytes
2013-09-10 08:52:20	identity	i'll check that out though, thanks
2013-09-10 08:52:38	shachaf	Oh. I don't know. Optimizations?
2013-09-10 08:52:44	<--	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has quit (Read error: Connection reset by peer)
2013-09-10 08:52:53	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 08:53:07	dmj`	identity: is the code long? why not post it?
2013-09-10 08:53:22	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 245 seconds)
2013-09-10 08:53:48	-->	andares (~andares@unaffiliated/jacco) has joined #haskell
2013-09-10 08:54:40	<--	PatrickRobotham (~chatzilla@101.119.28.71) has quit (Read error: Connection reset by peer)
2013-09-10 08:55:10	identity	dmj`: it is somewhat long, yes, and not really commented and somewhat .. messy
2013-09-10 08:55:22	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 08:55:27	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-09-10 08:55:32	identity	however, -xc did help me track some stuff down. It seems I probably need to make my data type strict
2013-09-10 08:55:49	identity	putting bangs in a couple of places helped, but it doesn't seem to be enough
2013-09-10 08:55:52	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-10 08:55:52	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-10 08:55:52	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-10 08:57:32	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 08:57:47	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 246 seconds)
2013-09-10 08:58:14	<--	dalaing (~dalaing@124-171-227-199.dyn.iinet.net.au) has quit (Quit: Leaving.)
2013-09-10 08:58:27	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 08:58:38	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Ping timeout: 240 seconds)
2013-09-10 08:58:46	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-10 08:59:20	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-09-10 09:00:09	-->	Mortomes|Bus (~Mortomes_@145.107.80.242) has joined #haskell
2013-09-10 09:00:27	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-10 09:00:35	-->	phischu (~pschuster@p4FD300A9.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 09:00:46	-->	PatrickRobotham (~chatzilla@101.119.28.71) has joined #haskell
2013-09-10 09:01:15	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Remote host closed the connection)
2013-09-10 09:02:04	identity	found the error! thanks shachaf, -xc really helped :)
2013-09-10 09:03:18	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-10 09:03:34	-->	marienz (~marienz@freenode/staff/marienz) has joined #haskell
2013-09-10 09:04:34	<--	Mortomes|Bus (~Mortomes_@145.107.80.242) has quit (Ping timeout: 256 seconds)
2013-09-10 09:05:32	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-10 09:05:35	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 240 seconds)
2013-09-10 09:06:26	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 09:07:57	-->	canissimia (~canissimi@unaffiliated/canissimia) has joined #haskell
2013-09-10 09:08:04	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-09-10 09:09:56	-->	exicer (~exicer@host86-130-9-198.range86-130.btcentralplus.com) has joined #haskell
2013-09-10 09:10:13	<--	canissimia_ (~canissimi@unaffiliated/canissimia) has quit (Ping timeout: 256 seconds)
2013-09-10 09:11:53	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 241 seconds)
2013-09-10 09:11:53	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Read error: Connection reset by peer)
2013-09-10 09:11:53	<--	totimkopf (~james@unaffiliated/totimkopf) has quit (Quit: leaving)
2013-09-10 09:13:31	<--	phischu (~pschuster@p4FD300A9.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-09-10 09:14:12	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-10 09:15:25	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-10 09:15:45	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-10 09:15:49	<--	PatrickRobotham (~chatzilla@101.119.28.71) has quit (Read error: Connection reset by peer)
2013-09-10 09:16:09	-->	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has joined #haskell
2013-09-10 09:16:26	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-10 09:16:32	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 09:18:22	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Ping timeout: 245 seconds)
2013-09-10 09:19:28	<--	andares (~andares@unaffiliated/jacco) has quit (Read error: No route to host)
2013-09-10 09:19:55	-->	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has joined #haskell
2013-09-10 09:20:26	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 09:20:44	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 09:20:55	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 09:21:09	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-10 09:21:37	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 09:21:44	-->	andares (~andares@unaffiliated/jacco) has joined #haskell
2013-09-10 09:22:10	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 09:22:14	-->	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 09:23:54	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 276 seconds)
2013-09-10 09:23:56	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Read error: Connection reset by peer)
2013-09-10 09:24:14	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Quit: Leaving)
2013-09-10 09:24:43	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-10 09:24:57	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-10 09:25:01	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 09:25:09	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-10 09:25:18	-->	andares_ (~andares@AR1.Hawthorne.reallyfast.net) has joined #haskell
2013-09-10 09:25:19	<--	andares_ (~andares@AR1.Hawthorne.reallyfast.net) has quit (Client Quit)
2013-09-10 09:27:34	-->	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has joined #haskell
2013-09-10 09:27:51	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-10 09:28:29	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:5dea:bc85:286:6ed) has joined #haskell
2013-09-10 09:28:49	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:5dea:bc85:286:6ed) has quit (Remote host closed the connection)
2013-09-10 09:28:55	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-10 09:29:50	-->	madjestic (~madjestic@188.89.187.68) has joined #haskell
2013-09-10 09:30:14	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-09-10 09:30:40	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-10 09:32:45	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-10 09:33:07	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Max SendQ exceeded)
2013-09-10 09:33:28	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 245 seconds)
2013-09-10 09:33:34	-->	JaRoel|4d (~jaroel|4d@94.142.212.90) has joined #haskell
2013-09-10 09:33:39	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-10 09:33:49	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-10 09:34:40	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 09:35:32	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-10 09:36:33	 *	hackagebot acid-state 0.12.0 - Add ACID guarantees to any serializable Haskell data structure.  http://hackage.haskell.org/package/acid-state-0.12.0 (DavidHimmelstrup)
2013-09-10 09:36:48	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-09-10 09:37:07	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-10 09:38:10	-->	SpyrosTr_ (~spyrostri@conf-210.admin.grnet.gr) has joined #haskell
2013-09-10 09:39:19	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-10 09:39:29	-->	nh2 (~niklas@r002213.203112.miinet.jp) has joined #haskell
2013-09-10 09:39:35	-->	artyomkazak (~artyomkaz@94.25.228.59) has joined #haskell
2013-09-10 09:40:06	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-10 09:41:07	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-10 09:41:18	-->	Starfire_ (~starfire@kekkonen.cs.hut.fi) has joined #haskell
2013-09-10 09:42:23	-->	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has joined #haskell
2013-09-10 09:42:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 268 seconds)
2013-09-10 09:43:05	<--	xl1 (~xl@111.199.155.235) has quit (Ping timeout: 264 seconds)
2013-09-10 09:43:11	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 09:43:29	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-10 09:44:21	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Quit: dpathakj)
2013-09-10 09:47:18	-->	PatrickRobotham (~chatzilla@101.119.26.249) has joined #haskell
2013-09-10 09:47:59	-->	m3ga (~erikd@101.170.234.15) has joined #haskell
2013-09-10 09:48:10	-->	ScriptDevil (~ashok@unaffiliated/scriptdevil) has joined #haskell
2013-09-10 09:48:24	<--	madjestic (~madjestic@188.89.187.68) has quit (Ping timeout: 240 seconds)
2013-09-10 09:49:12	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 09:50:09	-->	madjestic (~madjestic@188.89.187.68) has joined #haskell
2013-09-10 09:51:44	<--	amosr (~amos@149.171.231.242) has quit (Quit: amosr)
2013-09-10 09:52:22	-->	Mortomes|Uni (~Mortomes_@145.107.80.242) has joined #haskell
2013-09-10 09:52:56	<--	Mortomes|Uni (~Mortomes_@145.107.80.242) has quit (Changing host)
2013-09-10 09:52:57	-->	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 09:53:49	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-10 09:53:53	<--	nominolo_ (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-09-10 09:54:02	<--	madjestic (~madjestic@188.89.187.68) has quit (Read error: Connection reset by peer)
2013-09-10 09:55:09	-->	t7 (~chatzilla@chaucer.kent.ac.uk) has joined #haskell
2013-09-10 09:56:23	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-10 09:56:30	-->	Itkovian (~Itkovian@b244h178.ugent.be) has joined #haskell
2013-09-10 09:56:34	<--	kitallis (~kitallis@106.51.83.46) has quit (Client Quit)
2013-09-10 09:56:58	<--	andares (~andares@unaffiliated/jacco) has quit (Read error: No route to host)
2013-09-10 09:57:35	-->	andares (~andares@unaffiliated/jacco) has joined #haskell
2013-09-10 09:57:49	-->	visof (~visof@197.161.65.28) has joined #haskell
2013-09-10 09:57:56	<--	visof (~visof@197.161.65.28) has quit (Changing host)
2013-09-10 09:57:57	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-09-10 09:58:53	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Ping timeout: 245 seconds)
2013-09-10 09:59:11	-->	skchrko (~sk@109.110.83.124) has joined #haskell
2013-09-10 09:59:26	<--	m3ga (~erikd@101.170.234.15) has quit (Ping timeout: 240 seconds)
2013-09-10 10:00:08	<--	nilsi_ (~nilsi@5.254.151.3) has quit (Ping timeout: 245 seconds)
2013-09-10 10:01:32	<--	pcapriot` (~paolo@176.248.81.35) has quit (Ping timeout: 268 seconds)
2013-09-10 10:01:39	<--	JaRoel|4d (~jaroel|4d@94.142.212.90) has quit (Remote host closed the connection)
2013-09-10 10:02:11	-->	JaRoel|4d (~jaroel|4d@94.142.212.90) has joined #haskell
2013-09-10 10:02:41	-->	c-rog (~c-rog@c-67-180-202-11.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 10:03:05	-->	strax (uid4099@gateway/web/irccloud.com/x-agzsjenrsvceixni) has joined #haskell
2013-09-10 10:03:15	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-jihhrlxnmtvaxmjq) has joined #haskell
2013-09-10 10:03:16	-->	tobyp (uid4@gateway/web/irccloud.com/x-erffyfkkynrigyru) has joined #haskell
2013-09-10 10:03:26	<--	visof (~visof@unaffiliated/visof) has quit (Read error: Operation timed out)
2013-09-10 10:03:49	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 10:04:19	-->	cic (~cic@c-1180e555.012-145-6c6b7013.cust.bredbandsbolaget.se) has joined #haskell
2013-09-10 10:04:45	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-10 10:06:04	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 10:06:17	<--	JaRoel|4d (~jaroel|4d@94.142.212.90) has quit (Ping timeout: 245 seconds)
2013-09-10 10:06:35	 *	hackagebot vault 0.3.0.2 - a persistent store for values of arbitrary types  http://hackage.haskell.org/package/vault-0.3.0.2 (HeinrichApfelmus)
2013-09-10 10:07:39	-->	arenz (arenz@nat/ibm/x-dyamrekbmflaqjhi) has joined #haskell
2013-09-10 10:07:42	<--	c-rog (~c-rog@c-67-180-202-11.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 10:10:09	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-09-10 10:10:59	-->	m3ga (~erikd@110.150.61.205) has joined #haskell
2013-09-10 10:11:03	-->	manung (~manung@195.89.19.142) has joined #haskell
2013-09-10 10:11:15	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 10:12:51	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-09-10 10:13:09	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-10 10:18:12	-->	threesome (~threesome@cst-prg-8-20.cust.vodafone.cz) has joined #haskell
2013-09-10 10:18:55	-->	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has joined #haskell
2013-09-10 10:18:56	-->	visof (~visof@197.246.1.40) has joined #haskell
2013-09-10 10:19:32	<--	Itkovian (~Itkovian@b244h178.ugent.be) has quit (Quit: Zzzzz ...)
2013-09-10 10:19:55	<--	satc (~smuxi@202.3.77.239) has quit (Ping timeout: 260 seconds)
2013-09-10 10:20:17	-->	Itkovian (~Itkovian@b244h178.ugent.be) has joined #haskell
2013-09-10 10:20:17	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-10 10:20:41	-->	visof_ (~visof@197.246.1.40) has joined #haskell
2013-09-10 10:23:20	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 10:24:21	<--	visof (~visof@197.246.1.40) has quit (Ping timeout: 268 seconds)
2013-09-10 10:24:37	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-10 10:24:55	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-10 10:24:56	<--	miclorb (~textual@ppp121-44-83-40.lns20.syd6.internode.on.net) has quit
2013-09-10 10:25:17	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-10 10:25:49	-->	kayloos (~kayloos@shop3.diku.dk) has joined #haskell
2013-09-10 10:26:27	<--	oleo (~oleo@xdsl-78-35-153-43.netcologne.de) has quit (Ping timeout: 260 seconds)
2013-09-10 10:27:12	-->	oleo (~oleo@xdsl-78-35-172-62.netcologne.de) has joined #haskell
2013-09-10 10:27:37	<--	threesome (~threesome@cst-prg-8-20.cust.vodafone.cz) has quit (Ping timeout: 276 seconds)
2013-09-10 10:27:38	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-10 10:28:17	-->	phischu (~pschuster@dhcp206.uni-koblenz.de) has joined #haskell
2013-09-10 10:28:22	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Ping timeout: 245 seconds)
2013-09-10 10:29:33	--	oleo is now known as Guest58739
2013-09-10 10:30:27	<--	exicer (~exicer@host86-130-9-198.range86-130.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-09-10 10:30:33	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-10 10:30:40	bitonic-work	what's the fastest way of building a bytestring of known width?  I'd probably imagine allocating, modifying, and then packing a CString to be as good as it gets, but maybe there is an easier way
2013-09-10 10:31:08	-->	tuxie_ (~paranoid@213.61.228.26) has joined #haskell
2013-09-10 10:31:34	 *	hackagebot bdo 1.0.0 - Update CSS in the browser without reloading the page.  http://hackage.haskell.org/package/bdo-1.0.0 (ChrisDone)
2013-09-10 10:32:13	-->	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-10 10:33:17	nh2	bitonic-work: http://stackoverflow.com/questions/18682527/how-to-convert-between-bytestring-and-storable-vector
2013-09-10 10:33:19	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-10 10:33:50	nh2	going the other way around, Ptr, writing, and then putting the constructor around?
2013-09-10 10:34:12	<--	kamatsu (~Adium@vampire.ertos.nicta.com.au) has quit (Quit: Leaving.)
2013-09-10 10:34:23	-->	apwb (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-10 10:34:23	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-10 10:34:32	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-10 10:34:51	-->	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has joined #haskell
2013-09-10 10:35:36	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 10:35:48	<--	nilg (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-09-10 10:36:07	-->	xl1 (~xl@221.218.220.127) has joined #haskell
2013-09-10 10:36:15	-->	nilg` (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-10 10:36:51	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-09-10 10:37:26	-->	kamatsu (~Adium@vampire.ertos.nicta.com.au) has joined #haskell
2013-09-10 10:37:30	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Ping timeout: 256 seconds)
2013-09-10 10:37:31	<--	tudalex (~tudalex@173.234.237.188) has quit (Ping timeout: 256 seconds)
2013-09-10 10:37:31	--	apwb is now known as sShintah
2013-09-10 10:37:47	<--	kamatsu (~Adium@vampire.ertos.nicta.com.au) has quit (Client Quit)
2013-09-10 10:38:24	-->	tudalex|away (~tudalex@173.234.237.188) has joined #haskell
2013-09-10 10:38:25	-->	SoupE (~jloos@f048157087.adsl.alicedsl.de) has joined #haskell
2013-09-10 10:38:26	bitonic-work	nh2: yeah, actually `Data.ByteString.Internal.create' seems to be the right thing
2013-09-10 10:38:36	--	tudalex|away is now known as tudalex
2013-09-10 10:38:38	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 10:38:41	bitonic-work	although an interface through unboxed vectors or something like that would be nicer
2013-09-10 10:39:27	<--	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has quit (Ping timeout: 240 seconds)
2013-09-10 10:40:49	Taneb	You know the whole "cabal is not a package manager" thing? What would a package manager for Haskell libraries actually involve?
2013-09-10 10:40:57	-->	zbcm (~zbcm@147.69.182.184) has joined #haskell
2013-09-10 10:41:00	quchen	Taneb: uninstalling
2013-09-10 10:41:23	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 260 seconds)
2013-09-10 10:41:42	<--	SoupEvil (~jloos@g227114108.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-09-10 10:41:55	quchen	(I still think Cabal is a package manager.)
2013-09-10 10:42:02	Taneb	quchen, could writing a Haskell library package manager be something I could manage? (I'm bored and in a useful mood)
2013-09-10 10:42:49	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-10 10:43:13	fylwind	i think the difficulty is the fact that it's somewhat platform dependent
2013-09-10 10:43:28	quchen	Taneb: That would be a Cabal modification. I don't know how hard that specific task is. It sounds easy, but on the other hand if it was, then someone would have done it already.
2013-09-10 10:43:54	-->	JaRoel|4d (~jaroel|4d@94.142.212.90) has joined #haskell
2013-09-10 10:44:26	quchen	(You could also make your own package manager of course, but that would be a giant project - that starts with reinventing Cabal)
2013-09-10 10:44:27	<--	m3ga (~erikd@110.150.61.205) has quit (Quit: disappearing into the sunset)
2013-09-10 10:44:39	nh2	bitonic-work: I think Unboxed is not as flexible as Storable, you can't get Ptrs to it so it won't go as well with bytestrings and you can't just use it for interfacing with outside
2013-09-10 10:44:59	-->	petapetapeta (~quassel@6164198-cl69.boa.fiberby.dk) has joined #haskell
2013-09-10 10:45:09	-->	aupiff (~aupiff@98.209.82.28) has joined #haskell
2013-09-10 10:45:24	bitonic-work	nh2: well I wasn't saying it was, I was saying that having an interface of that kind would be nice
2013-09-10 10:45:30	-->	hrehf (~s@krlh-5f71384b.pool.mediaWays.net) has joined #haskell
2013-09-10 10:45:33	<--	hrehf (~s@krlh-5f71384b.pool.mediaWays.net) has quit (Client Quit)
2013-09-10 10:45:36	-->	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 10:46:13	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-10 10:46:27	nh2	Taneb, quchen: Just the fact that it's not been done doesn't necessarily make it hard, especially for Cabal. Making profiling and normal compilation run in parallel took 4 lines (and a bit of interleaved output handling), and I've wanted it for years
2013-09-10 10:47:02	quchen	nh2: Hm. Well I guess academia spoiled me in that respect then ;-)
2013-09-10 10:47:50	quchen	nh2: Got a link to the corresponding 4 lines?
2013-09-10 10:47:57	mero	Is there a way to go from [IO String] to IO String by concatenting all the individual strings (Foldable msum throws everything but the last IO action away)?
2013-09-10 10:48:10	quchen	:t mapM concat -- mero
2013-09-10 10:48:11	lambdabot	[[[b]]] -> [[b]]
2013-09-10 10:48:22	quchen	Eh wait
2013-09-10 10:48:36	identity	foldM concat?
2013-09-10 10:48:44	nh2	quchen: https://github.com/nh2/cabal/commit/f33ed21752c49058079690ae21f19de8827a4fce
2013-09-10 10:48:50	quchen	:t fmap concat . sequence
2013-09-10 10:48:51	lambdabot	(Monad f, Functor f) => [f [a]] -> f [a]
2013-09-10 10:48:54	quchen	Better.
2013-09-10 10:49:07	mero	thanks!
2013-09-10 10:49:11	nh2	(I haven't done the interleaved output handling yet, but they are currently making some convenience for that so I'm waiting)
2013-09-10 10:49:26	<--	aupiff (~aupiff@98.209.82.28) has quit (Ping timeout: 240 seconds)
2013-09-10 10:49:30	mstksg	is there any way i can have the cpp pass read from environment variables?
2013-09-10 10:50:03	-->	hari (~hari@117.193.61.91) has joined #haskell
2013-09-10 10:50:04	quchen	nh2: Ah, that's from the GSOC branch that was merged yesterday?
2013-09-10 10:50:14	--	hari is now known as hari_
2013-09-10 10:50:24	nh2	quchen: no, that's my custom things
2013-09-10 10:50:37	nh2	oh wait
2013-09-10 10:50:39	nh2	in https://github.com/haskell/cabal/pull/1413
2013-09-10 10:50:48	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-10 10:50:58	quchen	nh2: Ah, I see, it's not building dependencies in parallel, but normal+profiling versions.
2013-09-10 10:51:01	nh2	no I don't think it's part of what 23Skidoo has written so far
2013-09-10 10:51:04	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 10:51:04	nh2	yes
2013-09-10 10:51:13	quchen	nh2: While you're at it, consider adding another parallel build for shared libs.
2013-09-10 10:51:32	Taneb	@type fmap concat . sequence
2013-09-10 10:51:34	lambdabot	(Monad f, Functor f) => [f [a]] -> f [a]
2013-09-10 10:51:41	nh2	quchen: I was refraining from that because I wasn't sure how it will work with 7.8 when shared is default
2013-09-10 10:51:41	quchen	:t (fmap concat . sequence) `asAppliedTo` (undefined :: [IO String])
2013-09-10 10:51:42	lambdabot	[IO [Char]] -> IO [Char]
2013-09-10 10:52:02	quchen	nh2: Shared is default? Didn't know that
2013-09-10 10:52:02	nh2	quchen: this one is much better for daily use though: https://github.com/haskell/cabal/pull/1410
2013-09-10 10:52:09	identity	quchen: Didn't know about asAppliedTo. Thanks
2013-09-10 10:52:13	<--	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 256 seconds)
2013-09-10 10:52:18	<--	coeus (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Ping timeout: 276 seconds)
2013-09-10 10:52:29	mstksg	is anyone here currently working with FRP?  is there a library right now that has emerged as canonical?  which ones are popular/strong?
2013-09-10 10:52:40	<--	JaRoel|4d (~jaroel|4d@94.142.212.90) has quit (Ping timeout: 264 seconds)
2013-09-10 10:52:50	<--	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-09-10 10:52:53	quchen	identity: It's a Lambdabot convenience function. It's just `const` with a specalized type.
2013-09-10 10:53:03	<--	artyomkazak (~artyomkaz@94.25.228.59) has quit (Read error: Connection reset by peer)
2013-09-10 10:53:13	-->	allsystemsarego (~allsystem@188.25.130.226) has joined #haskell
2013-09-10 10:53:13	<--	allsystemsarego (~allsystem@188.25.130.226) has quit (Changing host)
2013-09-10 10:53:13	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-09-10 10:53:25	nh2	mstksg: I would try netwire and reactive-banana now, there have come some great turorials and examples for those in recent days
2013-09-10 10:54:13	nh2	mstksg: e.g. http://jshaskell.blogspot.jp/2012/11/breakout-improved-and-with-netwire.html
2013-09-10 10:54:16	identity	quchen: Yeah I figured it was a lambdabot convenience function, but it's still handy to know :)
2013-09-10 10:54:30	mstksg	nh2: thanks, i'll check it out :)
2013-09-10 10:55:24	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 10:55:36	-->	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-10 10:56:12	<--	dimday (~amcvega@199.19.95.160) has quit (Quit: Leaving.)
2013-09-10 10:57:26	-->	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has joined #haskell
2013-09-10 10:57:27	-->	icz (~icz@x1-6-74-44-01-e6-1f-12.k448.webspeed.dk) has joined #haskell
2013-09-10 10:58:20	<--	chrisbuchholz_ (~chrisbuch@li189-30.members.linode.com) has left #haskell
2013-09-10 10:58:21	-->	chuzz (~user@host168-102-dynamic.14-87-r.retail.telecomitalia.it) has joined #haskell
2013-09-10 10:58:21	<--	chuzz (~user@host168-102-dynamic.14-87-r.retail.telecomitalia.it) has quit (Changing host)
2013-09-10 10:58:22	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-10 10:58:42	-->	chrisbuchholz (~chrisbuch@li189-30.members.linode.com) has joined #haskell
2013-09-10 10:59:03	-->	artyomkazak (~artyomkaz@94.25.228.59) has joined #haskell
2013-09-10 10:59:25	<--	hari_ (~hari@117.193.61.91) has left #haskell ("Ex-Chat")
2013-09-10 11:00:17	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 11:00:31	johnw	did anyone see my cafe post just now entitled "Please excuse brief service disruption"?
2013-09-10 11:00:40	-->	denver (~denver@adsl-ull-31-178.50-151.net24.it) has joined #haskell
2013-09-10 11:00:47	<--	croyd (~scaldwell@99.127.54.64) has quit (Quit: croyd)
2013-09-10 11:00:52	Fuuzetsu	yes
2013-09-10 11:00:55	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-10 11:00:57	johnw	excellent, thanks!
2013-09-10 11:02:51	-->	latro`a_ (~Ian@68.33.46.25) has joined #haskell
2013-09-10 11:03:53	<--	tudalex (~tudalex@173.234.237.188) has quit (Ping timeout: 245 seconds)
2013-09-10 11:03:53	<--	tobyp (uid4@gateway/web/irccloud.com/x-erffyfkkynrigyru) has quit (Ping timeout: 245 seconds)
2013-09-10 11:03:53	<--	gilbertw1 (~gilbertw1@192.241.174.128) has quit (Ping timeout: 245 seconds)
2013-09-10 11:04:43	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Ping timeout: 245 seconds)
2013-09-10 11:04:43	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 245 seconds)
2013-09-10 11:04:43	<--	wollw (davidshere@unaffiliated/wollw) has quit (Ping timeout: 245 seconds)
2013-09-10 11:04:43	<--	nanothief (~nanothief@116.255.8.253) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:05	<--	denver (~denver@adsl-ull-31-178.50-151.net24.it) has quit (Remote host closed the connection)
2013-09-10 11:05:08	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:08	<--	lightquake (~lightquak@li363-105.members.linode.com) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:08	<--	latro`a (~Ian@c-68-33-46-25.hsd1.md.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:08	<--	mauke (~mauke@p3m/member/mauke) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:08	<--	mm_freak (~milch@p5DD048C3.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:08	<--	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	pierreghz (~krux@91.179.13.34) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	morolin (~morolin@cantor.csl.cornell.edu) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	tromp (~tromp@rtc35-161.rentec.com) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:09	<--	arbn1 (~arbn@auriga.kiwilight.com) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:33	<--	manung (~manung@195.89.19.142) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:33	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-09-10 11:05:39	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 260 seconds)
2013-09-10 11:06:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 11:07:27	-->	glosoli (~glosoli@93.93.59.25) has joined #haskell
2013-09-10 11:07:28	-->	levi` (~user@c-174-52-89-43.hsd1.ut.comcast.net) has joined #haskell
2013-09-10 11:07:28	-->	arbn2 (~arbn@auriga.kiwilight.com) has joined #haskell
2013-09-10 11:07:28	-->	lightquake_ (~lightquak@li363-105.members.linode.com) has joined #haskell
2013-09-10 11:07:28	--	lightquake_ is now known as lightquake
2013-09-10 11:10:14	-->	Earnestly (~Earnestly@123.81.90.146.dyn.plus.net) has joined #haskell
2013-09-10 11:10:29	-->	tudalex|away (~tudalex@173.234.237.188) has joined #haskell
2013-09-10 11:10:39	--	tudalex|away is now known as tudalex
2013-09-10 11:11:48	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (*.net *.split)
2013-09-10 11:11:48	<--	strax (uid4099@gateway/web/irccloud.com/x-agzsjenrsvceixni) has quit (*.net *.split)
2013-09-10 11:11:48	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (*.net *.split)
2013-09-10 11:11:48	<--	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has quit (*.net *.split)
2013-09-10 11:11:48	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:11:48	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (*.net *.split)
2013-09-10 11:11:48	<--	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has quit (*.net *.split)
2013-09-10 11:11:48	<--	colah (~colah@206.248.173.86) has quit (*.net *.split)
2013-09-10 11:11:48	<--	arkeet (arkeet@unaffiliated/arkeet) has quit (*.net *.split)
2013-09-10 11:11:48	<--	agallagher (~textual@173.252.71.129) has quit (*.net *.split)
2013-09-10 11:11:48	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-10 11:11:48	<--	Kevin_ (~Kevin@209.65.15.42) has quit (*.net *.split)
2013-09-10 11:11:48	<--	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-10 11:11:48	<--	shanse (~generic@p57B2CD23.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:11:48	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (*.net *.split)
2013-09-10 11:11:48	<--	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has quit (*.net *.split)
2013-09-10 11:11:48	<--	akahn (uid2243@gateway/web/irccloud.com/x-rhgyoahmrwuprsaq) has quit (*.net *.split)
2013-09-10 11:11:48	<--	juhp (~petersen@redhat/juhp) has quit (*.net *.split)
2013-09-10 11:11:48	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:11:48	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (*.net *.split)
2013-09-10 11:11:48	<--	osa1 (uid13910@gateway/web/irccloud.com/x-ylhhraxblizuftdh) has quit (*.net *.split)
2013-09-10 11:11:49	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (*.net *.split)
2013-09-10 11:11:49	<--	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	`^_^v (~nycs@ip-64-32-224-203.nyc.megapath.net) has quit (*.net *.split)
2013-09-10 11:11:49	<--	litherum (~Adium@2620:149:4:1b01:9c21:e2af:3bdf:db8c) has quit (*.net *.split)
2013-09-10 11:11:49	<--	Saeppel (~saep@185.7.198.1) has quit (*.net *.split)
2013-09-10 11:11:49	<--	paddymahoney (~paddymaho@24.137.221.230) has quit (*.net *.split)
2013-09-10 11:11:49	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	relrod (relrod@redhat/relrod) has quit (*.net *.split)
2013-09-10 11:11:49	<--	confound (~hdp@glaive.weftsoar.net) has quit (*.net *.split)
2013-09-10 11:11:49	<--	sunnavy (~sunnavy@li50-215.members.linode.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	Sunhay (~ssbasi@sunhay.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has quit (*.net *.split)
2013-09-10 11:11:49	<--	fikusz (~fikusz@catv-89-132-137-62.catv.broadband.hu) has quit (*.net *.split)
2013-09-10 11:11:49	<--	jrslepak (~jrslepak@129.10.117.249) has quit (*.net *.split)
2013-09-10 11:11:49	<--	gereedy (geoff@mania.programmer-monk.net) has quit (*.net *.split)
2013-09-10 11:11:49	<--	brixen (~brixen@208.68.39.152) has quit (*.net *.split)
2013-09-10 11:11:49	<--	Kruppe (~jcp@laforge.cs.uwaterloo.ca) has quit (*.net *.split)
2013-09-10 11:11:49	<--	mrowe (~mrowe@72.249.82.46) has quit (*.net *.split)
2013-09-10 11:11:49	<--	lunarjar (~lunarjar@2605:6400:1:fed5:22:f924:6051:57c8) has quit (*.net *.split)
2013-09-10 11:11:49	<--	warpy (uid1398@gateway/web/irccloud.com/x-ajrctoipxoluagap) has quit (*.net *.split)
2013-09-10 11:11:49	<--	orospakr (~orospakr@mobotropolis.orospakr.ca) has quit (*.net *.split)
2013-09-10 11:11:49	<--	tunixman (~tunixman@serenity.tunixman.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	bens (~bens@www.typius.net) has quit (*.net *.split)
2013-09-10 11:11:49	<--	mrd (~md@debian/developer/mrd) has quit (*.net *.split)
2013-09-10 11:11:49	<--	bsmt (~i@209.141.41.20) has quit (*.net *.split)
2013-09-10 11:11:49	<--	Enigmagic (~nathan@unaffiliated/enigmagic) has quit (*.net *.split)
2013-09-10 11:11:49	<--	davorak (~ubuntu@ec2-50-17-231-113.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:11:49	<--	Hafydd (~Hafydd@unaffiliated/joo) has quit (*.net *.split)
2013-09-10 11:15:31	-->	nilg`` (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-10 11:18:28	<--	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit (*.net *.split)
2013-09-10 11:18:28	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (*.net *.split)
2013-09-10 11:18:28	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (*.net *.split)
2013-09-10 11:18:28	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (*.net *.split)
2013-09-10 11:18:28	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	arenz (arenz@nat/ibm/x-dyamrekbmflaqjhi) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Bluuu (a@unaffiliated/bluuu) has quit (*.net *.split)
2013-09-10 11:18:28	<--	io2 (~io2@unaffiliated/irrequietus) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	udevd (~kaetzchen@151.236.17.188) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (*.net *.split)
2013-09-10 11:18:28	<--	shesek (~shesek@77.127.54.57) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Ralith (~ralith@216.162.199.202) has quit (*.net *.split)
2013-09-10 11:18:28	<--	nonconvergent (~neuromanc@c-24-30-40-161.hsd1.ga.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	ParahSai1in (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	ParahSail1n (~parahsail@unaffiliated/parahsailin) has quit (*.net *.split)
2013-09-10 11:18:28	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has quit (*.net *.split)
2013-09-10 11:18:28	<--	hackagebot (~rss2irc@li229-222.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:28	<--	rmunroe (~Randall@aram.xkcd.com) has quit (*.net *.split)
2013-09-10 11:18:28	<--	Peaker (~eyal@87.69.111.138) has quit (*.net *.split)
2013-09-10 11:18:28	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:28	<--	jaspervdj (~jaspervdj@jaspervdj.be) has quit (*.net *.split)
2013-09-10 11:18:29	<--	alexander__b (~alexander@fsf/member/alexanderb) has quit (*.net *.split)
2013-09-10 11:18:29	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (*.net *.split)
2013-09-10 11:18:29	<--	edsko (~edsko@80.111.60.101) has quit (*.net *.split)
2013-09-10 11:18:29	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ivan\ (~ivan@unaffiliated/ivan/x-000001) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Boney (~paul@ppp118-209-98-12.lns20.mel4.internode.on.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	frontend1oader (~mst@tomservo.robotrollcall.org) has quit (*.net *.split)
2013-09-10 11:18:29	<--	luite (~luite@luite.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	crs__ (~crs_@192.210.215.64) has quit (*.net *.split)
2013-09-10 11:18:29	<--	shiona (shiona@shiona.tontut.fi) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	munro (~ryan@node-2.0x0539.org) has quit (*.net *.split)
2013-09-10 11:18:29	<--	dyreshark (~dyreshark@198.199.76.106) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Baughn (~svein@tsugumi.brage.info) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (*.net *.split)
2013-09-10 11:18:29	<--	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Nahra (~Nahra@unaffiliated/nahra) has quit (*.net *.split)
2013-09-10 11:18:29	<--	cruxeter1us (cruxtech@secspeed.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	johnw (~johnw@c-98-214-70-173.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Natch (~Natch@c-cdcee155.25-4-64736c10.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-10 11:18:29	<--	killy9999 (~killy@hydra.ics.p.lodz.pl) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ChongLi (~chongli@24-212-141-111.cable.teksavvy.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	si14 (uid2619@gateway/web/irccloud.com/x-ahsnmzsqpaoarlib) has quit (*.net *.split)
2013-09-10 11:18:29	<--	etrepum (uid763@gateway/web/irccloud.com/x-shneosfmifqdvutw) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ernst (~ernst@static.85-10-192-204.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:29	<--	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ByronJohnson (~Byron@unaffiliated/bob0) has quit (*.net *.split)
2013-09-10 11:18:29	<--	MitchW (~MitchW@124-171-104-43.dyn.iinet.net.au) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ericmj (~ericmj@198.211.118.116) has quit (*.net *.split)
2013-09-10 11:18:29	<--	xymox (lechuck@unaffiliated/contempt) has quit (*.net *.split)
2013-09-10 11:18:29	<--	mviljamaa (mviljamaa@kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:29	<--	joachifm (~joachifm@ulrik.uio.no) has quit (*.net *.split)
2013-09-10 11:18:29	<--	eevar (~eevar@175.80-203-27.nextgentel.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (*.net *.split)
2013-09-10 11:18:29	<--	plhk (~plhk@urban.v12.su) has quit (*.net *.split)
2013-09-10 11:18:29	<--	tomprince (~tomprince@socrates.hocat.ca) has quit (*.net *.split)
2013-09-10 11:18:29	<--	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has quit (*.net *.split)
2013-09-10 11:18:29	<--	t7 (~chatzilla@chaucer.kent.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:29	<--	canissimia (~canissimi@unaffiliated/canissimia) has quit (*.net *.split)
2013-09-10 11:18:29	<--	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ehamberg (~erlend@hamberg.no) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Philonous_ (~Philonous@dslb-178-005-035-209.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	babalone (~baba@p5DE44DF7.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:18:29	<--	tutorship57 (~tutorship@78.129.150.171) has quit (*.net *.split)
2013-09-10 11:18:29	<--	apaku (~apaku@x2f14e31.dyn.telefonica.de) has quit (*.net *.split)
2013-09-10 11:18:29	<--	onur (~onur@ev.onur.im) has quit (*.net *.split)
2013-09-10 11:18:29	<--	jfhall_ (~jfhall@24-205-238-86.dhcp.snlo.ca.charter.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ktosiek (~ktosiek@46.22.173.54) has quit (*.net *.split)
2013-09-10 11:18:29	<--	poucet (~chris@li23-146.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	Guest54198 (~dexter3@174-16-186-130.hlrn.qwest.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ashnur (~ashnur@79.117.76.15) has quit (*.net *.split)
2013-09-10 11:18:29	<--	julmae (~no@206.190.145.94) has quit (*.net *.split)
2013-09-10 11:18:29	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (*.net *.split)
2013-09-10 11:18:29	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (*.net *.split)
2013-09-10 11:18:29	<--	ecube (~ecube@unaffiliated/ecube) has quit (*.net *.split)
2013-09-10 11:18:29	<--	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	bergey (~user@ip-66-80-90-109.iad.megapath.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	pootler (mervyn@smlh.x.rootbsd.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	suiside (tajnyman@unaffiliated/suiside) has quit (*.net *.split)
2013-09-10 11:18:30	<--	TheSpectre (~root@artemis.zerosecure.com) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Vorpal (~Vorpal@unaffiliated/vorpal) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Dodek (am291698@duch.mimuw.edu.pl) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Tesseraction (~Tesseract@unaffiliated/tesseraction) has quit (*.net *.split)
2013-09-10 11:18:30	<--	gbeshers (~gbeshers@pool-74-97-190-27.prvdri.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Kelet (~Kelet@unaffiliated/kelet) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has quit (*.net *.split)
2013-09-10 11:18:30	<--	otterdam (~otterdam@reddit/operator/otterdam) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Tehnix (~Tehnix@192.81.221.23) has quit (*.net *.split)
2013-09-10 11:18:30	<--	maksbotan (~quassel@gentoo/developer/maksbotan) has quit (*.net *.split)
2013-09-10 11:18:30	<--	identity (~0xC3@50708181.static.ziggozakelijk.nl) has quit (*.net *.split)
2013-09-10 11:18:30	<--	ent (entgod@kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Zariel (~zariel@li37-84.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:30	<--	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has quit (*.net *.split)
2013-09-10 11:18:30	<--	akraut (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Ptival (~Ptival@goto.ucsd.edu) has quit (*.net *.split)
2013-09-10 11:18:30	<--	epsylon (~epsylon@abbaye.thele.me) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Veltas (~quassel@backus.compsoc.warwick.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:30	<--	joefiorini (uid3127@gateway/web/irccloud.com/x-crwzgjtvvmjdhjjr) has quit (*.net *.split)
2013-09-10 11:18:30	<--	companion_cube (~simon@sac.cedeela.fr) has quit (*.net *.split)
2013-09-10 11:18:30	<--	schroedinbug (~schroedin@71-212-238-198.hlrn.qwest.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	stass (stas@ssh.deglitch.com) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Ornedan (aitakang@melkki.cs.helsinki.fi) has quit (*.net *.split)
2013-09-10 11:18:30	<--	macron (~macron@158.255.215.93) has quit (*.net *.split)
2013-09-10 11:18:30	<--	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has quit (*.net *.split)
2013-09-10 11:18:30	<--	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:18:30	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Itkovian (~Itkovian@b244h178.ugent.be) has quit (*.net *.split)
2013-09-10 11:18:30	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (*.net *.split)
2013-09-10 11:18:30	<--	tamiko (~tamiko@pdpc/supporter/active/tamiko) has quit (*.net *.split)
2013-09-10 11:18:30	<--	setmeaway (stemearay@119.201.52.138) has quit (*.net *.split)
2013-09-10 11:18:30	<--	zacts (~zacts@unaffiliated/zacts) has quit (*.net *.split)
2013-09-10 11:18:30	<--	profmakx (makx@unaffiliated/profmakx) has quit (*.net *.split)
2013-09-10 11:18:30	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:30	<--	arkx (~aku@eagleflow.fi) has quit (*.net *.split)
2013-09-10 11:18:30	<--	fxr (~user@78.187.102.63) has quit (*.net *.split)
2013-09-10 11:18:30	<--	go|dfish (goldfish@nat/dcunetworkingsociety/x-xgigmrjgnhfyvljp) has quit (*.net *.split)
2013-09-10 11:18:30	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	theorbtwo (~theorb@91.84.53.6) has quit (*.net *.split)
2013-09-10 11:18:30	<--	pygospa (~Pygosceli@kiel-d9bfdc9e.pool.mediaWays.net) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Twey (~Twey@unaffiliated/twey) has quit (*.net *.split)
2013-09-10 11:18:30	<--	jungnam (jungnam@61.74.233.216) has quit (*.net *.split)
2013-09-10 11:18:30	<--	jchia (~jchia@cpe-24-90-223-33.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:30	<--	akiress (~weechat@pdpc/supporter/student/akiress) has quit (*.net *.split)
2013-09-10 11:18:30	<--	hellome (~lua@192.73.239.25) has quit (*.net *.split)
2013-09-10 11:18:30	<--	Spockz (~alessandr@thalion.alessandrovermeulen.me) has quit (*.net *.split)
2013-09-10 11:18:30	<--	davorb-cellphone (~davorb-ce@194.47.245.35) has quit (*.net *.split)
2013-09-10 11:18:30	<--	kini (kini@unaffiliated/kini) has quit (*.net *.split)
2013-09-10 11:18:30	<--	otulp (~otulp@cm-84.209.90.171.getinternet.no) has quit (*.net *.split)
2013-09-10 11:18:31	<--	sirspazzolot (~matt@c-71-205-202-84.hsd1.mi.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	niko (~niko@freenode/staff/ubuntu.member.niko) has quit (*.net *.split)
2013-09-10 11:18:31	<--	fimad (~fimad@173-13-165-149-sfba.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	hpaste (~hpaste@unaffiliated/chrisdone) has quit (*.net *.split)
2013-09-10 11:18:31	<--	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	saiam^ (saiam@evo.paivola.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	davidt (~chatzilla@davidt.scs.stanford.edu) has quit (*.net *.split)
2013-09-10 11:18:31	<--	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has quit (*.net *.split)
2013-09-10 11:18:31	<--	johnbender (johnbender@gateway/shell/ircrelay.com/x-nwclfgdcfdezcuxy) has quit (*.net *.split)
2013-09-10 11:18:31	<--	mrpantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	PHO_ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has quit (*.net *.split)
2013-09-10 11:18:31	<--	bind (~bind@unaffiliated/bind) has quit (*.net *.split)
2013-09-10 11:18:31	<--	tych0 (~tycho@69.163.206.84) has quit (*.net *.split)
2013-09-10 11:18:31	<--	lispy (~lispy@li343-23.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	Svedrin (svedrin@ketos.funzt-halt.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	yan_ (~yan@64.22.109.95) has quit (*.net *.split)
2013-09-10 11:18:31	<--	fryguybob (~fryguybob@f27.cs.rochester.edu) has quit (*.net *.split)
2013-09-10 11:18:31	<--	NeatBasis (~quassel@cl-636.hel-01.fi.sixxs.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	pyrtsa (pjahkola@kosh.org.aalto.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	gds (~user@2001:41c8:10:5d::10) has quit (*.net *.split)
2013-09-10 11:18:31	<--	jliikka (jliikka@xob.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	kekimmo (kekimmo@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	wolfnn (~wolfnn@90.24.195.230) has quit (*.net *.split)
2013-09-10 11:18:31	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (*.net *.split)
2013-09-10 11:18:31	<--	zbcm (~zbcm@147.69.182.184) has quit (*.net *.split)
2013-09-10 11:18:31	<--	nilg` (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has quit (*.net *.split)
2013-09-10 11:18:31	<--	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has quit (*.net *.split)
2013-09-10 11:18:31	<--	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has quit (*.net *.split)
2013-09-10 11:18:31	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (*.net *.split)
2013-09-10 11:18:31	<--	YayMe (~user@97-122-184-27.hlrn.qwest.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	codesoup (~codesoup@108.175.233.21) has quit (*.net *.split)
2013-09-10 11:18:31	<--	talzeus (~studybot_@101.110.31.120) has quit (*.net *.split)
2013-09-10 11:18:31	<--	cdidd (~cdidd@128-68-128-158.broadband.corbina.ru) has quit (*.net *.split)
2013-09-10 11:18:31	<--	meretrix (~user@unaffiliated/meretrix) has quit (*.net *.split)
2013-09-10 11:18:31	<--	rfw (~rfw@heimdall.rfw.name) has quit (*.net *.split)
2013-09-10 11:18:31	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	phienone (~ph@nappo.lnet.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	neptunepink (~root@adsl-99-105-53-117.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	Eridius (~kevin@unaffiliated/eridius) has quit (*.net *.split)
2013-09-10 11:18:31	<--	kcj (~casey@unaffiliated/kcj) has quit (*.net *.split)
2013-09-10 11:18:31	<--	dabradley (bradley@nat/ibm/x-klgcasirnxawbzwr) has quit (*.net *.split)
2013-09-10 11:18:31	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	lisdrumz (~lis@37.115.5.205) has quit (*.net *.split)
2013-09-10 11:18:31	<--	yogurt_t_ (~yogurt_tr@190.191.224.63) has quit (*.net *.split)
2013-09-10 11:18:31	<--	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	debo (~anonymous@108.175.233.153) has quit (*.net *.split)
2013-09-10 11:18:31	<--	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has quit (*.net *.split)
2013-09-10 11:18:31	<--	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has quit (*.net *.split)
2013-09-10 11:18:31	<--	asjo (~asjo@2505ds5-by.0.fullrate.dk) has quit (*.net *.split)
2013-09-10 11:18:31	<--	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	jayne (~jayne@freenode/staff/jayne) has quit (*.net *.split)
2013-09-10 11:18:31	<--	betawaffle (~betawaffl@ec2-174-129-19-107.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	pikhq (~pikhq@24-107-196-13.dhcp.stls.mo.charter.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	farn (frantk@fran.tk) has quit (*.net *.split)
2013-09-10 11:18:31	<--	fijimunk1i (~fijimunki@pool-98-113-72-161.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	M-ou-se (~m-ou.se@m-ou.se) has quit (*.net *.split)
2013-09-10 11:18:31	<--	`0660 (olli@oosny.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	srhb (~srhb@static.101.127.47.78.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:31	<--	aford (~pi@host86-164-47-30.range86-164.btcentralplus.com) has quit (*.net *.split)
2013-09-10 11:18:31	<--	kryft (kryft@kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:31	<--	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	Igloo (~igloo@210.99.2.81.in-addr.arpa) has quit (*.net *.split)
2013-09-10 11:18:31	<--	janiczek_ (uid12701@gateway/web/irccloud.com/x-fzriysaagvsiyqdj) has quit (*.net *.split)
2013-09-10 11:18:31	<--	nullcone (uid11626@gateway/web/irccloud.com/x-siqqamfkhkpjfyri) has quit (*.net *.split)
2013-09-10 11:18:31	<--	copton (~copton@shell.spamt.net) has quit (*.net *.split)
2013-09-10 11:18:31	<--	machisuji_ (~machisuji@78.46.83.103) has quit (*.net *.split)
2013-09-10 11:18:31	<--	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	edwtjo (~edwtjo@h-62-72.a213.priv.bahnhof.se) has quit (*.net *.split)
2013-09-10 11:18:32	<--	prototrout (~prototrou@24-116-81-246.cpe.cableone.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	jackhill (jackhill@pilot.trilug.org) has quit (*.net *.split)
2013-09-10 11:18:32	<--	b2coutts (stein@taurine.csclub.uwaterloo.ca) has quit (*.net *.split)
2013-09-10 11:18:32	<--	kqr (kqr@host155-38.etanet.se) has quit (*.net *.split)
2013-09-10 11:18:32	<--	\q (~MaskRay@unaffiliated/maskray) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Eliel (~jojkaart@dyn79-415.yok.fi) has quit (*.net *.split)
2013-09-10 11:18:32	<--	sunfun (~sunfun@2.237.168.123) has quit (*.net *.split)
2013-09-10 11:18:32	<--	SHODAN (~shozan@fsf/member/shodan) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Mayzie (~Daniel.is@unaffiliated/mayazcherquoi) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Th0mas (~thomas@th0mas.nl) has quit (*.net *.split)
2013-09-10 11:18:32	<--	dpwright (~daniel@li413-20.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:32	<--	lahwran (~lahwran@python/site-packages/lahwran) has quit (*.net *.split)
2013-09-10 11:18:32	<--	tippenein (~bo@199.195.252.184) has quit (*.net *.split)
2013-09-10 11:18:32	<--	isomorphismes (~ubuntu@ec2-54-243-213-161.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:32	<--	mixi (~mixi@exherbo/developer/mixi) has quit (*.net *.split)
2013-09-10 11:18:32	<--	vivekrai (uid10305@gateway/web/irccloud.com/x-vdcmzlgypjpqwfgd) has quit (*.net *.split)
2013-09-10 11:18:32	<--	chickenflu (uid71@gateway/web/irccloud.com/x-dzfnoztzbhmjgxmk) has quit (*.net *.split)
2013-09-10 11:18:32	<--	IbnFirnas (uid6178@gateway/web/irccloud.com/x-kxdbbjrmfrjbhfwp) has quit (*.net *.split)
2013-09-10 11:18:32	<--	ysuzuki (~ysuzuki@18.net220148245.t-com.ne.jp) has quit (*.net *.split)
2013-09-10 11:18:32	<--	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has quit (*.net *.split)
2013-09-10 11:18:32	<--	seantallen (~seantalle@ec2-54-234-24-103.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:32	<--	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has quit (*.net *.split)
2013-09-10 11:18:32	<--	mel- (~m@m.fuglos.org) has quit (*.net *.split)
2013-09-10 11:18:32	<--	mjrosenb (~mjrosenb@INDIUM.CLUB.CC.CMU.EDU) has quit (*.net *.split)
2013-09-10 11:18:32	<--	barrucadu (~barrucadu@fsf/member/barrucadu) has quit (*.net *.split)
2013-09-10 11:18:32	<--	joogi (~joogi@fix3d.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has quit (*.net *.split)
2013-09-10 11:18:32	<--	benmachine (bm380@tremulous/developer/benmachine) has quit (*.net *.split)
2013-09-10 11:18:32	<--	osfameron (~osfameron@www.greenokapi.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	sajith (~sajith@bog.hcoop.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	nitin2 (~nitin@luug.ece.vt.edu) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Phlogistique (~no@neetwork.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	toddaaro (~toddaaro@opprobrio.us) has quit (*.net *.split)
2013-09-10 11:18:32	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (*.net *.split)
2013-09-10 11:18:32	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (*.net *.split)
2013-09-10 11:18:32	<--	fizruk (~fizruk@109.74.138.26) has quit (*.net *.split)
2013-09-10 11:18:32	<--	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Guest77905 (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has quit (*.net *.split)
2013-09-10 11:18:32	<--	dlnx` (~dlnx@hackerspace.pl) has quit (*.net *.split)
2013-09-10 11:18:32	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:32	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (*.net *.split)
2013-09-10 11:18:32	<--	Obfuscate (~keii@unaffiliated/obfuscate) has quit (*.net *.split)
2013-09-10 11:18:32	<--	saep1 (~saep@p5B2A13ED.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:18:32	<--	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has quit (*.net *.split)
2013-09-10 11:18:33	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (*.net *.split)
2013-09-10 11:18:33	<--	GaelanAintAround (~Gaelan@98-125-72-82.dyn.centurytel.net) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (*.net *.split)
2013-09-10 11:18:33	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (*.net *.split)
2013-09-10 11:18:33	<--	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Tordek (tordek@gateway/shell/blinkenshell.org/x-cgvscfhyxnqichut) has quit (*.net *.split)
2013-09-10 11:18:33	<--	michael__ (~quassel@62.253.227.100) has quit (*.net *.split)
2013-09-10 11:18:33	<--	joneshf-work (~joneshf@mail.concordusapps.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	dustinswan (~dustinswa@198.199.71.201) has quit (*.net *.split)
2013-09-10 11:18:33	<--	kennyp (~kennyp@fedora/kennyp) has quit (*.net *.split)
2013-09-10 11:18:33	<--	rhodesd (~none@192.34.61.82) has quit (*.net *.split)
2013-09-10 11:18:33	<--	javax (~javax@46.246.126.38) has quit (*.net *.split)
2013-09-10 11:18:33	<--	tinyghost (~ghosty@rainbowsta.rs) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Rutger` (~devbin@nelisvanaalst.demon.nl) has quit (*.net *.split)
2013-09-10 11:18:33	<--	lattenwald (~qalex@185.6.245.156) has quit (*.net *.split)
2013-09-10 11:18:33	<--	serban (serban@notromania.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	mux (mux@freebsd/developer/mux) has quit (*.net *.split)
2013-09-10 11:18:33	<--	aoh (~aki@adsl-99-115.netplaza.fi) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Mowah (~Mowah@c-0d8ce555.09-137-6c6b7013.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-10 11:18:33	<--	jrib (~jrib@upstream/dev/jrib) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	mena (~mena@asgard.tauri.hu) has quit (*.net *.split)
2013-09-10 11:18:33	<--	d3lxa (~d3lxa@ks38928.kimsufi.com) has quit (*.net *.split)
2013-09-10 11:18:33	<--	tsou (~tsou@lyon.sians.org) has quit (*.net *.split)
2013-09-10 11:18:33	<--	averell (~averell@2a00:1c18:401:c00::803:11) has quit (*.net *.split)
2013-09-10 11:18:33	<--	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has quit (*.net *.split)
2013-09-10 11:18:34	<--	zebr (~zebr@arcadia.kent.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:34	<--	bd_ (~nanashi@198.244.99.244) has quit (*.net *.split)
2013-09-10 11:18:34	<--	agundry (~adam@cafe.cis.strath.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:34	<--	mkiefel (~martin@84.38.64.26) has quit (*.net *.split)
2013-09-10 11:18:34	<--	zenzike (~nick@zenzike.com) has quit (*.net *.split)
2013-09-10 11:18:34	<--	ircbrowse (~chrisdone@unaffiliated/chrisdone) has quit (*.net *.split)
2013-09-10 11:18:34	<--	Nickeeh (~quassel@foo.kassala.de) has quit (*.net *.split)
2013-09-10 11:18:34	<--	ssttudder (~abi@46.17.57.132) has quit (*.net *.split)
2013-09-10 11:18:34	<--	hape01 (~hape01@217.144.132.70) has quit (*.net *.split)
2013-09-10 11:18:34	<--	krakrjak (~krakrjak@xvm-103-198.ghst.net) has quit (*.net *.split)
2013-09-10 11:18:34	<--	drdo (~drdo@2a02:2498:e000:20::16f:2) has quit (*.net *.split)
2013-09-10 11:18:34	<--	pjstadig (~user@ec2-54-243-195-89.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:34	<--	vehk (~vehk@unaffiliated/vehk) has quit (*.net *.split)
2013-09-10 11:18:34	<--	ocharles (ocharles@2a01:7e00::f03c:91ff:fe69:ec30) has quit (*.net *.split)
2013-09-10 11:18:34	<--	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has quit (*.net *.split)
2013-09-10 11:18:34	<--	sipa (~pw@unaffiliated/sipa1024) has quit (*.net *.split)
2013-09-10 11:18:34	<--	Blkt (~Blkt@2a01:4f8:150:80a1::aaaa) has quit (*.net *.split)
2013-09-10 11:18:34	<--	liyang (~liyang@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-09-10 11:18:34	<--	ibab (igor@2600:3c03::f03c:91ff:feae:d6dd) has quit (*.net *.split)
2013-09-10 11:18:34	<--	popx (~popx@ethnoll.csbnet.se) has quit (*.net *.split)
2013-09-10 11:18:34	<--	tg (~x@unaffiliated/tg) has quit (*.net *.split)
2013-09-10 11:18:34	<--	mp (maciej@hell.cx) has quit (*.net *.split)
2013-09-10 11:18:34	<--	alexsdutton (~alex@comma.splice.org.uk) has quit (*.net *.split)
2013-09-10 11:18:34	<--	Iceland_jack (user@2a01:7e00::f03c:91ff:fedf:8336) has quit (*.net *.split)
2013-09-10 11:18:34	<--	xye (~QQ@2a01:4f8:d16:1f53::2) has quit (*.net *.split)
2013-09-10 11:18:34	<--	machisuji (~machisuji@2a01:4f8:162:22c6::2) has quit (*.net *.split)
2013-09-10 11:18:34	<--	dennylin93 (~dennylin9@cnmc.tw) has quit (*.net *.split)
2013-09-10 11:18:34	<--	fabjan (fabjan@Tricholoma.Update.UU.SE) has quit (*.net *.split)
2013-09-10 11:18:34	<--	andares (~andares@unaffiliated/jacco) has quit (*.net *.split)
2013-09-10 11:18:34	<--	PatrickRobotham (~chatzilla@101.119.26.249) has quit (*.net *.split)
2013-09-10 11:18:34	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (*.net *.split)
2013-09-10 11:18:34	<--	yopikh (~mand@79.175.167.200) has quit (*.net *.split)
2013-09-10 11:18:34	<--	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (*.net *.split)
2013-09-10 11:18:34	<--	valyagolev (~valyagole@109.205.248.1) has quit (*.net *.split)
2013-09-10 11:18:35	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has quit (*.net *.split)
2013-09-10 11:18:35	<--	mgaare_ (~quassel@192.81.216.48) has quit (*.net *.split)
2013-09-10 11:18:35	<--	xenophon (~his_shado@64.124.65.162) has quit (*.net *.split)
2013-09-10 11:18:35	<--	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	troydm (~troydm@unaffiliated/troydm) has quit (*.net *.split)
2013-09-10 11:18:35	<--	isenmann (~isenmann@blackhole.science-computing.de) has quit (*.net *.split)
2013-09-10 11:18:35	<--	c_14 (~c_14@unaffiliated/c-14/x-8913907) has quit (*.net *.split)
2013-09-10 11:18:35	<--	thomassgn (~thomas@browniehive.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Dashkal (~dashkal@unaffiliated/dashkal) has quit (*.net *.split)
2013-09-10 11:18:35	<--	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Counter-Strike (~abc@mailsh7.xs4all.nl) has quit (*.net *.split)
2013-09-10 11:18:35	<--	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	shachaf (~shachaf@unaffiliated/shachaf) has quit (*.net *.split)
2013-09-10 11:18:35	<--	rasmusto (~trasmuss@li519-146.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	dilinger (~dilinger@lunge.queued.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has quit (*.net *.split)
2013-09-10 11:18:35	<--	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (*.net *.split)
2013-09-10 11:18:35	<--	milessabin (~miles@private.milessabin.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	hiredman (~hiredman@volyova.ec2.thelastcitadel.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	junsuiji1 (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Gracenotes (~person@wikipedia/Gracenotes) has quit (*.net *.split)
2013-09-10 11:18:35	<--	idoru (idoru@freenode/utility-bot/ex-server/idoru) has quit (*.net *.split)
2013-09-10 11:18:35	<--	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has quit (*.net *.split)
2013-09-10 11:18:35	<--	jonsmock (~jonsmock@c-174-60-102-51.hsd1.pa.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	dwcook (~danny@unaffiliated/dwcook) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Erstarrung (~castor@ks26581.kimsufi.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	floatingman (~dnewman@c-68-47-207-131.hsd1.tn.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	redjohn (~redjohn@76.8.223.68) has quit (*.net *.split)
2013-09-10 11:18:35	<--	drmegahertz (~drmegaher@linuxuser.se) has quit (*.net *.split)
2013-09-10 11:18:35	<--	jlouis (jlouis@horus.0x90.dk) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Kinnison (vToZDVVYsu@gateway/shell/pepperfish/x-ptqxtdpyshkjhdvy) has quit (*.net *.split)
2013-09-10 11:18:35	<--	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	iemejia (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	phryk (~phryk@static.39.216.9.176.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	mmaruseacph2 (~mihai@mithlond.ro) has quit (*.net *.split)
2013-09-10 11:18:35	<--	MouseTheLuckyDog (~mouse@adsl-76-193-161-115.dsl.chcgil.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	uu1101 (~uu1101@mail.medranocalvo.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	nwf (~nwf@a.rr.ietfng.org) has quit (*.net *.split)
2013-09-10 11:18:35	<--	aforemny (~aforemny@ec2-54-217-241-103.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	mike2 (~michael@unaffiliated/mike1703) has quit (*.net *.split)
2013-09-10 11:18:35	<--	AlexWebr (~Alex@50.72.145.134) has quit (*.net *.split)
2013-09-10 11:18:35	<--	lulf (~lulf@li307-13.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	qz_ (~qz@li272-85.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	thorsten` (~Thorsten@apus.uberspace.de) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Amadiro (jonathri@dalvik.ping.uio.no) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Deewiant (~deewiant@deewiant.iki.fi) has quit (*.net *.split)
2013-09-10 11:18:35	<--	bbee (~bbee@unaffiliated/bbee) has quit (*.net *.split)
2013-09-10 11:18:35	<--	mak` (~mak@lokalhost.pl) has quit (*.net *.split)
2013-09-10 11:18:35	<--	arnsholt (~arne@54.80-203-170.nextgentel.com) has quit (*.net *.split)
2013-09-10 11:18:35	<--	mokus (~mokus@172-11-177-99.lightspeed.irvnca.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:35	<--	felipe_ (~felipe@unaffiliated/felipe) has quit (*.net *.split)
2013-09-10 11:18:35	<--	Liskni_si (pytt_l@ackle.nomi.cz) has quit (*.net *.split)
2013-09-10 11:18:35	<--	tomaw (tom@freenode/staff/tomaw) has quit (*.net *.split)
2013-09-10 11:18:35	<--	aristid (~aristid@unaffiliated/aristid) has quit (*.net *.split)
2013-09-10 11:18:35	<--	banjiewen (banjiewen@gateway/shell/cloudant/x-cmadrfsfvofcowre) has quit (*.net *.split)
2013-09-10 11:18:35	<--	cmsd2 (~cmsd2@prospero2.dh.bytemark.co.uk) has quit (*.net *.split)
2013-09-10 11:18:35	<--	zerokarmaleft (~zkl@morpheus.net) has quit (*.net *.split)
2013-09-10 11:18:36	<--	kaw (~kaw@irrasjonal.net) has quit (*.net *.split)
2013-09-10 11:18:36	<--	mero (~gz@ec2-176-34-102-78.eu-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:36	<--	dennis (5476d374@gateway/web/freenode/ip.84.118.211.116) has quit (*.net *.split)
2013-09-10 11:18:36	<--	danilo2 (53ee9a6e@gateway/web/freenode/ip.83.238.154.110) has quit (*.net *.split)
2013-09-10 11:18:36	<--	tdp93422 (4b2d007e@gateway/web/freenode/ip.75.45.0.126) has quit (*.net *.split)
2013-09-10 11:18:36	<--	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (*.net *.split)
2013-09-10 11:18:36	<--	seggy (c6fce60f@gateway/web/freenode/ip.198.252.230.15) has quit (*.net *.split)
2013-09-10 11:18:36	<--	sclv_ (c62d135f@gateway/web/freenode/ip.198.45.19.95) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Brando753 (~Brando753@unaffiliated/brando753) has quit (*.net *.split)
2013-09-10 11:18:36	<--	gpampara (~gpampara@174.136.1.66) has quit (*.net *.split)
2013-09-10 11:18:36	<--	zeiris (~amtal@192.3.116.3) has quit (*.net *.split)
2013-09-10 11:18:36	<--	_janne (dmon@punainen.org) has quit (*.net *.split)
2013-09-10 11:18:36	<--	mononofu (~mononofu@vps.furidamu.org) has quit (*.net *.split)
2013-09-10 11:18:36	<--	ninegrid (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:36	<--	solirc (~solirc@213-239-220-143.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Chousuke (oranenj@battery.modeemi.fi) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Razz (~tim@kompiler.org) has quit (*.net *.split)
2013-09-10 11:18:36	<--	absence (gXaaAUbcVr@horisont.pvv.ntnu.no) has quit (*.net *.split)
2013-09-10 11:18:36	<--	iron_houzi (~dorbin@cm-84.215.158.135.getinternet.no) has quit (*.net *.split)
2013-09-10 11:18:36	<--	bogner_ (~bogner@li325-42.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:36	<--	jlewis (~jlewis@unaffiliated/jordanlewis) has quit (*.net *.split)
2013-09-10 11:18:36	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (*.net *.split)
2013-09-10 11:18:36	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (*.net *.split)
2013-09-10 11:18:36	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (*.net *.split)
2013-09-10 11:18:36	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (*.net *.split)
2013-09-10 11:18:36	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Kabaka (~Kabaka@botters/kabaka) has quit (*.net *.split)
2013-09-10 11:18:36	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (*.net *.split)
2013-09-10 11:18:36	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (*.net *.split)
2013-09-10 11:18:36	<--	icz (~icz@x1-6-74-44-01-e6-1f-12.k448.webspeed.dk) has quit (*.net *.split)
2013-09-10 11:18:36	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (*.net *.split)
2013-09-10 11:18:36	<--	SoupE (~jloos@f048157087.adsl.alicedsl.de) has quit (*.net *.split)
2013-09-10 11:18:36	<--	phischu (~pschuster@dhcp206.uni-koblenz.de) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Guest58739 (~oleo@xdsl-78-35-172-62.netcologne.de) has quit (*.net *.split)
2013-09-10 11:18:36	<--	q66 (~quaker66@213.191.105.214) has quit (*.net *.split)
2013-09-10 11:18:36	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (*.net *.split)
2013-09-10 11:18:36	<--	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-09-10 11:18:36	<--	ts33kr (~ts33kr@193.34.60.123) has quit (*.net *.split)
2013-09-10 11:18:36	<--	__main__ (~main@50.240.210.73) has quit (*.net *.split)
2013-09-10 11:18:36	<--	xinming (~xinming@125.82.194.215) has quit (*.net *.split)
2013-09-10 11:18:36	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (*.net *.split)
2013-09-10 11:18:36	<--	hiroaki (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:18:36	<--	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has quit (*.net *.split)
2013-09-10 11:18:36	<--	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has quit (*.net *.split)
2013-09-10 11:18:36	<--	mobilebl- (~mobileblu@dslb-188-110-245-042.pools.arcor-ip.net) has quit (*.net *.split)
2013-09-10 11:18:36	<--	chexxor (uid1596@gateway/web/irccloud.com/x-fltjbhvtitepjfxb) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Will| (~wrboyce@88.198.95.211) has quit (*.net *.split)
2013-09-10 11:18:36	<--	blast_hardcheese (~blast_har@unaffiliated/blast-hardcheese/x-0199635) has quit (*.net *.split)
2013-09-10 11:18:36	<--	boegel|work (~boegel@ca60c171.ugent.be) has quit (*.net *.split)
2013-09-10 11:18:36	<--	tehroflmaoer (~tehroflma@199.101.99.208) has quit (*.net *.split)
2013-09-10 11:18:36	<--	Yaniel (yaniel@evo.paivola.fi) has quit (*.net *.split)
2013-09-10 11:18:37	<--	ziman (~ziman@functor.sk) has quit (*.net *.split)
2013-09-10 11:18:37	<--	smarter (~smarter@ubuntu/member/smarter) has quit (*.net *.split)
2013-09-10 11:18:37	<--	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:37	<--	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has quit (*.net *.split)
2013-09-10 11:18:37	<--	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has quit (*.net *.split)
2013-09-10 11:18:37	<--	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:37	<--	hrefchef (~BlackHunt@pool-72-73-253-159.cmdnnj.east.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:37	<--	zenoli (~pk@109.201.154.145) has quit (*.net *.split)
2013-09-10 11:18:37	<--	ozataman (~ozataman@pool-108-41-231-51.nycmny.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:37	<--	Soft (~soft@unaffiliated/soft) has quit (*.net *.split)
2013-09-10 11:18:37	<--	sweeney (uid4809@gateway/web/irccloud.com/x-rnpvaozkjavyikag) has quit (*.net *.split)
2013-09-10 11:18:37	<--	dixie (dixie@real.wilbury.sk) has quit (*.net *.split)
2013-09-10 11:18:37	<--	zorzar (~zorzar@z.futw.eu) has quit (*.net *.split)
2013-09-10 11:18:37	<--	Excureo (~c@68-113-0-218.static.knwc.wa.charter.com) has quit (*.net *.split)
2013-09-10 11:18:37	<--	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:37	<--	em (~em@unaffiliated/emma) has quit (*.net *.split)
2013-09-10 11:18:37	<--	ghorn (~ghorn@kulnet-nat-2.kulnet.kuleuven.be) has quit (*.net *.split)
2013-09-10 11:18:37	<--	Guest96413 (~antix@unaffiliated/malfy) has quit (*.net *.split)
2013-09-10 11:18:37	<--	KitB (~kit@kitb.pw) has quit (*.net *.split)
2013-09-10 11:18:37	<--	callen (~callen@unaffiliated/callen) has quit (*.net *.split)
2013-09-10 11:18:37	<--	ousado (~ousado@unaffiliated/ousado) has quit (*.net *.split)
2013-09-10 11:18:37	<--	s4msung (~s4msung@s4msung.de) has quit (*.net *.split)
2013-09-10 11:18:37	<--	zeroXten (~zeroXten@0x10.co.uk) has quit (*.net *.split)
2013-09-10 11:18:37	<--	a11235 (~a11235@unaffiliated/a11235) has quit (*.net *.split)
2013-09-10 11:18:37	<--	fixme (~fixme@202.120.40.94) has quit (*.net *.split)
2013-09-10 11:18:37	<--	bduc (~bduc@bduc.org) has quit (*.net *.split)
2013-09-10 11:18:37	<--	k00mi (~koomi@pictor.uberspace.de) has quit (*.net *.split)
2013-09-10 11:18:37	<--	MrRacoon (suthere@reaver.cat.pdx.edu) has quit (*.net *.split)
2013-09-10 11:18:37	<--	tensorpudding (~tensorpud@99.148.203.65) has quit (*.net *.split)
2013-09-10 11:18:37	<--	kshannon_ (~kris@kris.shannon.id.au) has quit (*.net *.split)
2013-09-10 11:18:37	<--	mshroyer (~mshroyer@legolas.paleogene.net) has quit (*.net *.split)
2013-09-10 11:18:37	<--	phar (~phar@v22010096862397599.yourvserver.net) has quit (*.net *.split)
2013-09-10 11:18:38	<--	ssbr (~ssbr@python/site-packages/ssbr) has quit (*.net *.split)
2013-09-10 11:18:38	<--	mendez (~mendez@electricabac.us) has quit (*.net *.split)
2013-09-10 11:18:38	<--	CosmicRay (~jgoerzen@glockenspiel.complete.org) has quit (*.net *.split)
2013-09-10 11:18:38	<--	Boreeas (~Boreeas@frozen.boreeas.net) has quit (*.net *.split)
2013-09-10 11:18:38	<--	Draggor (~Draggor@75-150-231-161-Illinois.hfc.comcastbusiness.net) has quit (*.net *.split)
2013-09-10 11:18:38	<--	miasma (jmjmak@linux.utu.fi) has quit (*.net *.split)
2013-09-10 11:18:38	<--	paz (~paz@zulu824.server4you.de) has quit (*.net *.split)
2013-09-10 11:18:38	<--	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has quit (*.net *.split)
2013-09-10 11:18:38	<--	shelf (~bnc@unaffiliated/shelf) has quit (*.net *.split)
2013-09-10 11:18:38	<--	schlumpi_ (~schlumpi@fob.spline.inf.fu-berlin.de) has quit (*.net *.split)
2013-09-10 11:18:38	<--	tahu (~tahu@client-178-16-41-83.inturbo.lt) has quit (*.net *.split)
2013-09-10 11:18:38	<--	Plex- (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has quit (*.net *.split)
2013-09-10 11:18:38	<--	jix (~jix@jixco.de) has quit (*.net *.split)
2013-09-10 11:18:38	<--	vsayer (~vsayer@c-50-156-7-219.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:39	<--	mollerstrand (fredrik@notty.slacker.se) has quit (*.net *.split)
2013-09-10 11:18:39	<--	saurik (~saurik@u15259116.onlinehome-server.com) has quit (*.net *.split)
2013-09-10 11:18:39	<--	Maior (~toor@stolas.doismellburning.co.uk) has quit (*.net *.split)
2013-09-10 11:18:39	<--	samrat (uid2534@gateway/web/irccloud.com/x-usonjrsmhjaehpqh) has quit (*.net *.split)
2013-09-10 11:18:39	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (*.net *.split)
2013-09-10 11:18:39	<--	kaol (kaol@piperka.net) has quit (*.net *.split)
2013-09-10 11:18:39	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (*.net *.split)
2013-09-10 11:18:39	<--	FireFly (~firefly@oftn/member/FireFly) has quit (*.net *.split)
2013-09-10 11:18:39	<--	necroyeti (~rthc@phire.org) has quit (*.net *.split)
2013-09-10 11:18:39	<--	tero- (~tero@core.feriko.fi) has quit (*.net *.split)
2013-09-10 11:18:39	<--	earthy (~arthurvl@illipe.xs4all.nl) has quit (*.net *.split)
2013-09-10 11:18:39	<--	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:39	<--	yano (yano@freenode/staff/yano) has quit (*.net *.split)
2013-09-10 11:18:39	<--	liori (~liori@slarti.exroot.org) has quit (*.net *.split)
2013-09-10 11:18:39	<--	jroesch (~jared@chips.whatbox.ca) has quit (*.net *.split)
2013-09-10 11:18:39	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (*.net *.split)
2013-09-10 11:18:39	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:39	<--	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:39	<--	jzl (~jzl@ec2-23-21-191-143.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:39	<--	eyck (~eyck@nat08.nowanet.pl) has quit (*.net *.split)
2013-09-10 11:18:39	<--	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has quit (*.net *.split)
2013-09-10 11:18:39	<--	hdevalence|away (hdevalence@gateway/shell/kde/x-yqbgatcxuacouhst) has quit (*.net *.split)
2013-09-10 11:18:39	<--	FreakyPenguin (~FreakyPen@sv0.famkaufmann.info) has quit (*.net *.split)
2013-09-10 11:18:40	<--	arbn (~arbn@unaffiliated/arbn) has quit (*.net *.split)
2013-09-10 11:18:40	<--	sababa (~sababa@unaffiliated/sababa) has quit (*.net *.split)
2013-09-10 11:18:40	<--	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has quit (*.net *.split)
2013-09-10 11:18:40	<--	djahandarie (darius@unaffiliated/djahandarie) has quit (*.net *.split)
2013-09-10 11:18:40	<--	dju (dju@fsf/member/dju) has quit (*.net *.split)
2013-09-10 11:18:40	<--	n-dolio (~dolio@gw1.mcgraw-hill.com) has quit (*.net *.split)
2013-09-10 11:18:40	<--	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Internet13 (~chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has quit (*.net *.split)
2013-09-10 11:18:40	<--	slobo (~slobo@mx1.svarog.ca) has quit (*.net *.split)
2013-09-10 11:18:40	<--	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Jaxan (~quassel@foo.kassala.de) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Adeon (~valaat@109.73.169.52) has quit (*.net *.split)
2013-09-10 11:18:40	<--	raid (macbookpro@irc.coding4coffee.org) has quit (*.net *.split)
2013-09-10 11:18:40	<--	epta (~yep@toje.ws) has quit (*.net *.split)
2013-09-10 11:18:40	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (*.net *.split)
2013-09-10 11:18:40	<--	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has quit (*.net *.split)
2013-09-10 11:18:40	<--	mimi_vx (~quassel@vector.clanwars.cz) has quit (*.net *.split)
2013-09-10 11:18:40	<--	fxrh (~quassel@2001:1a50:11:0:5f:8f:ac66:1) has quit (*.net *.split)
2013-09-10 11:18:40	<--	jmct (uid1305@gateway/web/irccloud.com/x-vhhiiyupjrkclpuo) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Yawgmoth (~quassel@gruss.cc) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Edoxile (~Edoxile@edoxile.net) has quit (*.net *.split)
2013-09-10 11:18:40	<--	scolobb (~user@2a01:e0b:1:154:62eb:69ff:fefe:5a79) has quit (*.net *.split)
2013-09-10 11:18:40	<--	mxf (~mxf@lab.qu.cx) has quit (*.net *.split)
2013-09-10 11:18:40	<--	mami (mami@gateway/shell/c-base/x-nnosqquakntyvxsm) has quit (*.net *.split)
2013-09-10 11:18:40	<--	dwierenga (~dwierenga@75-63-28-175.lightspeed.irvnca.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:40	<--	dlundy (~dlundy@185.21.216.183) has quit (*.net *.split)
2013-09-10 11:18:40	<--	_1126 (~1126@saturn.lileth.net) has quit (*.net *.split)
2013-09-10 11:18:40	<--	sgso (~sgs@204.62.15.119) has quit (*.net *.split)
2013-09-10 11:18:40	<--	froztbyte (~froztbyte@unaffiliated/frozt01100101) has quit (*.net *.split)
2013-09-10 11:18:40	<--	Pad^ (~Pad@colorlesscube.com) has quit (*.net *.split)
2013-09-10 11:18:40	<--	integral (~bsmith@p3m/member/integral) has quit (*.net *.split)
2013-09-10 11:18:40	<--	lokydor (lecornec20@tom.iiens.net) has quit (*.net *.split)
2013-09-10 11:18:40	<--	pr (~pr@unaffiliated/pr) has quit (*.net *.split)
2013-09-10 11:18:40	<--	bitraten (~bitraten@unaffiliated/bitraten) has quit (*.net *.split)
2013-09-10 11:18:40	<--	vnz (~vnz@unaffiliated/vnz) has quit (*.net *.split)
2013-09-10 11:18:40	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (*.net *.split)
2013-09-10 11:18:41	<--	Raynos (uid3611@gateway/web/irccloud.com/x-hkokcpwtvccrldvx) has quit (*.net *.split)
2013-09-10 11:18:41	<--	zrot (~quassel@149.154.158.30) has quit (*.net *.split)
2013-09-10 11:18:41	<--	haasn (~nand@2a01:4f8:d13:5245::2) has quit (*.net *.split)
2013-09-10 11:18:41	<--	bartavelle (~bartavell@sd-27156.dedibox.fr) has quit (*.net *.split)
2013-09-10 11:18:41	<--	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has quit (*.net *.split)
2013-09-10 11:18:41	<--	dqd (id@wikipedia/dqd) has quit (*.net *.split)
2013-09-10 11:18:41	<--	Odd_Bloke (~oddbloke@libre.fm/user/oddbloke) has quit (*.net *.split)
2013-09-10 11:18:41	<--	hiyakashi (~hiyakashi@www19112ue.sakura.ne.jp) has quit (*.net *.split)
2013-09-10 11:18:41	<--	Hodapp (~hodapp@198.56.208.32) has quit (*.net *.split)
2013-09-10 11:18:41	<--	electrogeek (electrogee@unaffiliated/electrogeek) has quit (*.net *.split)
2013-09-10 11:18:41	<--	BrianHV (bhv1@2600:3c03::f03c:91ff:fe96:f614) has quit (*.net *.split)
2013-09-10 11:18:41	<--	og (foobar@puck.ogr.no) has quit (*.net *.split)
2013-09-10 11:18:41	<--	Gunni (~gunni@kjarni/gunni) has quit (*.net *.split)
2013-09-10 11:18:41	<--	nxorg8 (nxorg8@2a01:7e00::f03c:91ff:fe70:367c) has quit (*.net *.split)
2013-09-10 11:18:41	<--	thirsteh (thirsteh@linuxfordummies/Thirsteh) has quit (*.net *.split)
2013-09-10 11:18:41	<--	jaimef (jaimef@dns.mauthesis.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	predator217 (~predator1@p50803AC1.dip0.t-ipconnect.de) has quit (*.net *.split)
2013-09-10 11:18:42	<--	thunderrd (~thunderrd@119.42.74.149) has quit (*.net *.split)
2013-09-10 11:18:42	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	sm (~user@li229-222.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (*.net *.split)
2013-09-10 11:18:42	<--	mmathis (~surya@198.199.68.171) has quit (*.net *.split)
2013-09-10 11:18:42	<--	Martty (~martty@lion.puttynuts.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	Morgawr (~morgawr@unaffiliated/morgawr) has quit (*.net *.split)
2013-09-10 11:18:42	<--	Ulrar (~Ulrar@luwin.ulrar.net) has quit (*.net *.split)
2013-09-10 11:18:42	<--	Lefeni (~Lefeni@c-0941e555.143-16-64736c10.cust.bredbandsbolaget.se) has quit (*.net *.split)
2013-09-10 11:18:42	<--	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:42	<--	DigitalKiwi (~kiwi@unaffiliated/digitalkiwi) has quit (*.net *.split)
2013-09-10 11:18:42	<--	DT` (~ea@95.233.203.148) has quit (*.net *.split)
2013-09-10 11:18:42	<--	chrisyoung (~user@nyc.schrodinger.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has quit (*.net *.split)
2013-09-10 11:18:42	<--	cronject (~cronject@46.7.62.22) has quit (*.net *.split)
2013-09-10 11:18:42	<--	nlogax (~nlogax@unaffiliated/nlogax) has quit (*.net *.split)
2013-09-10 11:18:42	<--	ClaudiusMaximus (~claude@unaffiliated/claudiusmaximus) has quit (*.net *.split)
2013-09-10 11:18:42	<--	mavam (~mavam@unaffiliated/mavam) has quit (*.net *.split)
2013-09-10 11:18:42	<--	bunzen (~Geir@li184-224.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	mapour (mapour@linux.utu.fi) has quit (*.net *.split)
2013-09-10 11:18:42	<--	supki (~matt@li305-103.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	mvj4_ (~2g8@78.47.152.189) has quit (*.net *.split)
2013-09-10 11:18:42	<--	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has quit (*.net *.split)
2013-09-10 11:18:42	<--	pi8027 (~pi8027@www2480uf.sakura.ne.jp) has quit (*.net *.split)
2013-09-10 11:18:43	<--	tdammers (~tobias@unaffiliated/tdammers) has quit (*.net *.split)
2013-09-10 11:18:43	<--	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has quit (*.net *.split)
2013-09-10 11:18:43	<--	iulian (iulian@ubuntu/member/iulian) has quit (*.net *.split)
2013-09-10 11:18:43	<--	Bwild_ (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has quit (*.net *.split)
2013-09-10 11:18:43	<--	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:43	<--	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:43	<--	wto (~wto@h-148-187.a336.priv.bahnhof.se) has quit (*.net *.split)
2013-09-10 11:18:43	<--	aleator (~aleator@desmaani.it.jyu.fi) has quit (*.net *.split)
2013-09-10 11:18:43	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (*.net *.split)
2013-09-10 11:18:43	<--	chrra (~cra@cra.no) has quit (*.net *.split)
2013-09-10 11:18:43	<--	aninhumer (ajh239@pip.srcf.societies.cam.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:43	<--	Dybber (~dybber@dybber.dk) has quit (*.net *.split)
2013-09-10 11:18:43	<--	caligula (~caligula@adsl-76-232-9-108.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:43	<--	dacc (~dacc@c-71-227-173-145.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:43	<--	bstrie (~ben@li100-7.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:43	<--	SaBer (~sber@unobtainium.futurice.com) has quit (*.net *.split)
2013-09-10 11:18:43	<--	d-snp (~tinco@tinco.nl) has quit (*.net *.split)
2013-09-10 11:18:43	<--	pyykkis_ (~jakeskik@staging.leonidasoy.fi) has quit (*.net *.split)
2013-09-10 11:18:43	<--	carter (carter@gateway/shell/ircrelay.com/x-uthowwlbcetsfkaj) has quit (*.net *.split)
2013-09-10 11:18:43	<--	ahihi (~transient@cs149054.pp.htv.fi) has quit (*.net *.split)
2013-09-10 11:18:43	<--	sordina (~Lyndon@ec2-50-17-183-50.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:43	<--	MetaCosm (~MetaCosm@unaffiliated/metacosm) has quit (*.net *.split)
2013-09-10 11:18:43	<--	taruti (taruti@ultra.violetti.org) has quit (*.net *.split)
2013-09-10 11:18:43	<--	ccxCZ (~ccxCZ@156.200.broadband11.iol.cz) has quit (*.net *.split)
2013-09-10 11:18:43	<--	Khady (~Khady@unaffiliated/khady) has quit (*.net *.split)
2013-09-10 11:18:43	<--	eL_Bart0 (eL_Bart0@dietunichtguten.org) has quit (*.net *.split)
2013-09-10 11:18:43	<--	katis (~katis@198.199.124.56) has quit (*.net *.split)
2013-09-10 11:18:43	<--	skypers (~skp@88-190-221-99.rev.dedibox.fr) has quit (*.net *.split)
2013-09-10 11:18:43	<--	pqmodn (~pqmodn@unaffiliated/pqmodn) has quit (*.net *.split)
2013-09-10 11:18:43	<--	malorie_ (~bla@84.200.20.248) has quit (*.net *.split)
2013-09-10 11:18:43	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (*.net *.split)
2013-09-10 11:18:43	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (*.net *.split)
2013-09-10 11:18:43	<--	tuxie_ (~paranoid@213.61.228.26) has quit (*.net *.split)
2013-09-10 11:18:43	<--	xorox90 (uid7069@gateway/web/irccloud.com/x-jihhrlxnmtvaxmjq) has quit (*.net *.split)
2013-09-10 11:18:43	<--	ScriptDevil (~ashok@unaffiliated/scriptdevil) has quit (*.net *.split)
2013-09-10 11:18:43	<--	Starfire_ (~starfire@kekkonen.cs.hut.fi) has quit (*.net *.split)
2013-09-10 11:18:43	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (*.net *.split)
2013-09-10 11:18:43	<--	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:43	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (*.net *.split)
2013-09-10 11:18:43	<--	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has quit (*.net *.split)
2013-09-10 11:18:43	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (*.net *.split)
2013-09-10 11:18:43	<--	shintah (bebble@h-151-191.a336.priv.bahnhof.se) has quit (*.net *.split)
2013-09-10 11:18:43	<--	nneko001__ (~save@masq241.gtn.ru) has quit (*.net *.split)
2013-09-10 11:18:44	<--	otto_s_ (~user@cotb-4db34930.pool.mediaWays.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-eculxoofosxuylih) has quit (*.net *.split)
2013-09-10 11:18:44	<--	lusory (~lusory@42.60.25.228) has quit (*.net *.split)
2013-09-10 11:18:44	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (*.net *.split)
2013-09-10 11:18:44	<--	gdsx (~xsdg@sipb-vm-99.mit.edu) has quit (*.net *.split)
2013-09-10 11:18:44	<--	cods (~cods@tuxee.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	zarul (~zarul@ubuntu/member/zarul) has quit (*.net *.split)
2013-09-10 11:18:44	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (*.net *.split)
2013-09-10 11:18:44	<--	mortberg (~mortberg@c-46-162-99-51.cust.bredband2.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	hiratara (~hiratara@h223162.dynamic.ppp.asahi-net.or.jp) has quit (*.net *.split)
2013-09-10 11:18:44	<--	bobthenameless (~bobthenam@c-71-227-128-93.hsd1.wa.comcast.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	rgrinberg (~rgrinberg@198.211.108.102) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Tene (~tene@poipu/supporter/slacker/tene) has quit (*.net *.split)
2013-09-10 11:18:44	<--	davean (~davean@vervet.isomerica.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	zomg (~jani@jjh.fi) has quit (*.net *.split)
2013-09-10 11:18:44	<--	othiym23 (ogd@aglaia.aoaioxxysz.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	koala_man (vidar@unaffiliated/koala-man/x-2491903) has quit (*.net *.split)
2013-09-10 11:18:44	<--	clog (~nef@bespin.org) has quit (*.net *.split)
2013-09-10 11:18:44	<--	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has quit (*.net *.split)
2013-09-10 11:18:44	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	tomh- (uid501@gateway/web/irccloud.com/x-zuyqdcgwmtbuzsbi) has quit (*.net *.split)
2013-09-10 11:18:44	<--	oldmanst1n (~glesica@goto10line.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	noddy2OOO (~self@numm.org) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Ceryn (~Ceryn@petardo.dk) has quit (*.net *.split)
2013-09-10 11:18:44	<--	bcoppens (~bartcopp@kde/coppens) has quit (*.net *.split)
2013-09-10 11:18:44	<--	leroux (~leroux@unaffiliated/leroux) has quit (*.net *.split)
2013-09-10 11:18:44	<--	theDon (~td@141.30.223.187) has quit (*.net *.split)
2013-09-10 11:18:44	<--	wilfredh (uid159@gateway/web/irccloud.com/x-hpndlcnpckqjafrq) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Heffalump (~ganesh@urchin.earth.li) has quit (*.net *.split)
2013-09-10 11:18:44	<--	taylorgb_ (~mystery@213.229.88.28) has quit (*.net *.split)
2013-09-10 11:18:44	<--	mantovani (~mantovani@li74-187.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	wunki (~petar@wunki.org) has quit (*.net *.split)
2013-09-10 11:18:44	<--	qwandor (~quassel@qwandor.xen.prgmr.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	jhh (hampl@levheart.casablanca.cz) has quit (*.net *.split)
2013-09-10 11:18:44	<--	kfreds (~kfreds@178.209.57.22) has quit (*.net *.split)
2013-09-10 11:18:44	<--	sondove (~sondove@sondov.no) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Hardolaf (~hardolaf@osuosc/Hardolaf) has quit (*.net *.split)
2013-09-10 11:18:44	<--	deggis (deggis@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:44	<--	ahf (ahf@irssi/staff/ahf) has quit (*.net *.split)
2013-09-10 11:18:44	<--	BlastHardcheese (chris@pdpc/supporter/active/blasthardcheese) has quit (*.net *.split)
2013-09-10 11:18:44	<--	duairc (~shane@things.vm.bytemark.co.uk) has quit (*.net *.split)
2013-09-10 11:18:44	<--	JPohlmann (~jannis@xfce/core-developer/JPohlmann) has quit (*.net *.split)
2013-09-10 11:18:44	<--	mr- (~martin@pcmat00034.uni-regensburg.de) has quit (*.net *.split)
2013-09-10 11:18:44	<--	nikola (~nikola@li278-224.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	ChanServ (ChanServ@services.) has quit (*.net *.split)
2013-09-10 11:18:44	<--	kayloos (~kayloos@shop3.diku.dk) has quit (*.net *.split)
2013-09-10 11:18:44	<--	skchrko (~sk@109.110.83.124) has quit (*.net *.split)
2013-09-10 11:18:44	<--	SpyrosTr_ (~spyrostri@conf-210.admin.grnet.gr) has quit (*.net *.split)
2013-09-10 11:18:44	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (*.net *.split)
2013-09-10 11:18:44	<--	milli (~milli@rasler.acmeps.com) has quit (*.net *.split)
2013-09-10 11:18:44	<--	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has quit (*.net *.split)
2013-09-10 11:18:44	<--	SLi (sliedes@lakka.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:44	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (*.net *.split)
2013-09-10 11:18:44	<--	csakatok_ (~csakatoku@em119-72-194-50.pool.e-mobile.ne.jp) has quit (*.net *.split)
2013-09-10 11:18:44	<--	augur (~augur@208.58.5.87) has quit (*.net *.split)
2013-09-10 11:18:44	<--	kushal (kdas@fedora/kushal) has quit (*.net *.split)
2013-09-10 11:18:44	<--	DarkNFoxy (~df@unaffiliated/darkfox) has quit (*.net *.split)
2013-09-10 11:18:44	<--	_flow_ (flow@star.freakempire.de) has quit (*.net *.split)
2013-09-10 11:18:44	<--	DRiKE (~drk@whiff.xentower.nl) has quit (*.net *.split)
2013-09-10 11:18:44	<--	Gothmog_ (~tobias@user.nullteilerfrei.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	yeltzooo6 (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	cajla_ (~cajla@faust.lysator.liu.se) has quit (*.net *.split)
2013-09-10 11:18:45	<--	jamwt1 (~jamwt@sherlock.jamwt.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mornfall (~mornfall@kde/developer/mornfall) has quit (*.net *.split)
2013-09-10 11:18:45	<--	DustyDingo (~nonamen@atommuell.mum.jku.at) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ismlages (~ismlages@212.174.109.55) has quit (*.net *.split)
2013-09-10 11:18:45	<--	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Guest74748 (~mee@li94-42.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mimico__ (uid2554@gateway/web/irccloud.com/x-gehmvygmeqmpfmuw) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (*.net *.split)
2013-09-10 11:18:45	<--	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Ycros (ycros@gnaw.ycros.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	chirpsalot (~Chirps@unaffiliated/chirpsalot) has quit (*.net *.split)
2013-09-10 11:18:45	<--	cschneid (cschneid@2600:3c00::f03c:91ff:fedf:d92e) has quit (*.net *.split)
2013-09-10 11:18:45	<--	zero7 (uid10708@gateway/web/irccloud.com/x-rbacbporhprqzueo) has quit (*.net *.split)
2013-09-10 11:18:45	<--	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has quit (*.net *.split)
2013-09-10 11:18:45	<--	purefn (uid13625@gateway/web/irccloud.com/x-omzzprbxcjthcfuk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	idnar (uid12240@gateway/web/irccloud.com/x-nmunltoqatxvmeab) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Ghoul_ (uid6924@gateway/web/irccloud.com/x-oefpjhxlxfpcxakq) has quit (*.net *.split)
2013-09-10 11:18:45	<--	nkpart (uid3844@gateway/web/irccloud.com/x-usorrgjjzwfnchjm) has quit (*.net *.split)
2013-09-10 11:18:45	<--	aloiscochard (uid2076@gateway/web/irccloud.com/x-fdodifbvjfyrcrdq) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Xorlev (uid226@gateway/web/irccloud.com/x-tgmnpzuejomkdvlu) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ehd (uid1451@gateway/web/irccloud.com/x-wfpomgtakcgdlthn) has quit (*.net *.split)
2013-09-10 11:18:45	<--	joeyh (~joeyh@2001:41c8:125:49::10) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Cryovat (~null@sky.prism.winterday.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mietek (mietek@bak.io) has quit (*.net *.split)
2013-09-10 11:18:45	<--	tridactyla (~mforney@mforney.new.xen.prgmr.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (*.net *.split)
2013-09-10 11:18:45	<--	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has quit (*.net *.split)
2013-09-10 11:18:45	<--	dsfox (~dsf@98.155.82.213) has quit (*.net *.split)
2013-09-10 11:18:45	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	`bps (sim@functor.paivola.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	shepheb (~bsshephe@bas1-jockvale05-3096538275.dsl.bell.ca) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ortmage (ortmage@nat/google/x-ratauexiuvphlpyq) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Nik05 (~Nik05@unaffiliated/nik05) has quit (*.net *.split)
2013-09-10 11:18:45	<--	kxra (kxra@fsf/staff/kxra) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Khisanth (~Khisanth@50.14.244.111) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ryanakca (ryan@ubuntu/member/ryanakca) has quit (*.net *.split)
2013-09-10 11:18:45	<--	yam (yam@liberty.xenbox.fr) has quit (*.net *.split)
2013-09-10 11:18:45	<--	saiam (saiam@tiger.eliecraft.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Cerise (jerry@unaffiliated/cerise) has quit (*.net *.split)
2013-09-10 11:18:45	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	palmje (palmje@167-19-88-118.dcwest.net.au) has quit (*.net *.split)
2013-09-10 11:18:45	<--	brainproxy (~brainprox@pdpc/supporter/gold/brainproxy) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Walther (walther@2001:1bc8:1004::1) has quit (*.net *.split)
2013-09-10 11:18:45	<--	juuhaa (juuhaa@halko.asteriski.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	scshunt (raedford@taurine.csclub.uwaterloo.ca) has quit (*.net *.split)
2013-09-10 11:18:45	<--	flori_ (flori@irc.ping.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	andrewsw (~andrew@swclan.homelinux.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	bezik (~bezik@trans.liftio.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	joelteon (~joel@unaffiliated/otters) has quit (*.net *.split)
2013-09-10 11:18:45	<--	pfoetchen (~pfoetchen@beiboot1.petschge.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	grazs (~g@89.221.241.91) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has quit (*.net *.split)
2013-09-10 11:18:45	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (*.net *.split)
2013-09-10 11:18:45	<--	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (*.net *.split)
2013-09-10 11:18:45	<--	bestzdneirf (petterrav@2001:470:6bd1::) has quit (*.net *.split)
2013-09-10 11:18:45	<--	opqdonut (opqdonut@pseudo.fixme.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	geekosaur (allbery@dreamshell.ttuttle.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	albel727 (~albel727@unaffiliated/albel727) has quit (*.net *.split)
2013-09-10 11:18:45	<--	melter (~Melter@2001:4930:116:0:21c:c0ff:feef:eaf5) has quit (*.net *.split)
2013-09-10 11:18:45	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (*.net *.split)
2013-09-10 11:18:45	<--	jml (~jml@unaffiliated/jml) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Watcher7 (~w@silly.tabby.cat) has quit (*.net *.split)
2013-09-10 11:18:45	<--	axiom (~Sponge_Bo@antiklimax.se) has quit (*.net *.split)
2013-09-10 11:18:45	<--	flux (flux@coffee.modeemi.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	fser (~fser@ns2.lautre.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	heath (quassel@unaffiliated/ybit) has quit (*.net *.split)
2013-09-10 11:18:45	<--	swistak35 (swistak35@2a01:4f8:160:11e4::10) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Athas (~athas@sigkill.dk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	peddie (peddie@repl.esden.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	alpounet (~alpounet@2a01:e0b:1:82:2e0:f4ff:fe19:e9cb) has quit (*.net *.split)
2013-09-10 11:18:45	<--	inr (~inr@c83-250-22-57.bredband.comhem.se) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Bigcheese (~bigcheese@unaffiliated/bigcheese) has quit (*.net *.split)
2013-09-10 11:18:45	<--	neurocyte (neurocyte@marvin.vdbonline.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	bogner (bogner@2600:3c03::f03c:91ff:fedf:7ef4) has quit (*.net *.split)
2013-09-10 11:18:45	<--	dan64 (dan64@dannyadam.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	sohum (sohum@pdpc/supporter/active/sohum) has quit (*.net *.split)
2013-09-10 11:18:45	<--	edk (edk@unaffiliated/edk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	fall_ (fall@betty.countzero.no) has quit (*.net *.split)
2013-09-10 11:18:45	<--	anachron (~bjorh08@svale.uia.no) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Ezku (saukkee@kosh.org.aalto.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	horlicks (~simon@tickle.compsoc.man.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	lpsmith (~lpsmith@unaffiliated/lpsmith) has quit (*.net *.split)
2013-09-10 11:18:45	<--	nopcode (~nop@sushi.unix-ag.uni-kl.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	inarru (~edwardgeo@nest.insectsarerubbish.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	geal (~geal@irc.unhandledexpression.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ipuustin (~ipuustin@2002:5870:2ea5::1) has quit (*.net *.split)
2013-09-10 11:18:45	<--	XMunkki_ (xm@hilla.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	matson (~matson@jabam.lepovirta.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	pnielsen (pnielsen@2a01:7e00::f03c:91ff:fedf:3a21) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Rembane (~Rembane@li346-36.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	prophile (~proph@oftn/member/prophile) has quit (*.net *.split)
2013-09-10 11:18:45	<--	klugez (kluge@xob.kapsi.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	dario^CIP (~dario@ircbox.informatik.uni-erlangen.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	danr (~danr@tunna.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	solarus (~solarus@tunna.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	liszt (~liszt@2607:f0d0:1002:1c::2) has quit (*.net *.split)
2013-09-10 11:18:45	<--	petanqk (siniluht@jumi.lut.fi) has quit (*.net *.split)
2013-09-10 11:18:45	<--	]OLI[ (~oli@raven.linux.ox.ac.uk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	stomp (~stomp@v1.fob.spline.inf.fu-berlin.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	zoktar (~zoktar@unaffiliated/zoktar) has quit (*.net *.split)
2013-09-10 11:18:45	<--	tomejaguar (~tom@weber.jaguarpaw.co.uk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	eataix (~eataix@unaffiliated/eataix) has quit (*.net *.split)
2013-09-10 11:18:45	<--	benj_ (~bjames@nat-123-249.guardian.co.uk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	n00dle (~n00dle@unaffiliated/n00dle) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Fuuzetsu (~Shana@fsf/member/Fuuzetsu) has quit (*.net *.split)
2013-09-10 11:18:45	<--	janinge (j@ninge.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	jrd0 (~jrd0@bigv.mockra.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	b52 (~b52@unaffiliated/b52) has quit (*.net *.split)
2013-09-10 11:18:45	<--	bergmark (~adnam@atmat.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	satshabad (~root@198.199.67.210) has quit (*.net *.split)
2013-09-10 11:18:45	<--	osnr (~osnr@unaffiliated/osnr) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mlinksva (~quassel@rose.makesad.us) has quit (*.net *.split)
2013-09-10 11:18:45	<--	int-e (~noone@static.88-198-179-137.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Tribal (tribal@rcfreak0.com) has quit (*.net *.split)
2013-09-10 11:18:45	<--	gemelen (~gemelen@gemelen.net) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Laney (~laney@ubuntu/member/pdpc.active.laney) has quit (*.net *.split)
2013-09-10 11:18:45	<--	mkrull (~mkrull@kvm.uninets.eu) has quit (*.net *.split)
2013-09-10 11:18:45	<--	Reisen (~Reisen@unaffiliated/reisen) has quit (*.net *.split)
2013-09-10 11:18:45	<--	ibid (ajk@debian/developer/ajk) has quit (*.net *.split)
2013-09-10 11:18:45	<--	aszlig (~aszlig@redmoonstudios.org) has quit (*.net *.split)
2013-09-10 11:18:45	<--	zaiste (~zaiste@static.88-198-68-40.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:45	<--	def-lkb (~def@lakaban.net) has quit (*.net *.split)
2013-09-10 11:18:46	<--	asante (~asante@unaffiliated/asante) has quit (*.net *.split)
2013-09-10 11:18:46	<--	deavid (~quassel@ns311218.ovh.net) has quit (*.net *.split)
2013-09-10 11:18:46	<--	elliott (elliott@unaffiliated/elliott) has quit (*.net *.split)
2013-09-10 11:18:46	<--	bqp (~bqp@unaffiliated/bqp) has quit (*.net *.split)
2013-09-10 11:18:46	<--	pharaun (~pharaun@static.88-198-62-245.clients.your-server.de) has quit (*.net *.split)
2013-09-10 11:18:46	<--	sp3ctum (mikavilpas@shell.wilan.org) has quit (*.net *.split)
2013-09-10 11:18:46	<--	Clint (~Clint@libre.fm/hacker/clint) has quit (*.net *.split)
2013-09-10 11:18:46	<--	magicman (~tchakkazu@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has quit (*.net *.split)
2013-09-10 11:18:46	<--	mattp_ (~mattp_@intma.in) has quit (*.net *.split)
2013-09-10 11:18:46	<--	Proteumus (~Proteumus@li349-19.members.linode.com) has quit (*.net *.split)
2013-09-10 11:18:46	<--	gridaphobe (~gridaphob@goto.ucsd.edu) has quit (*.net *.split)
2013-09-10 11:18:46	<--	cross (cross@spitfire.i.gajendra.net) has quit (*.net *.split)
2013-09-10 11:18:46	<--	nicoo (~nicoo@unaffiliated/nicoo) has quit (*.net *.split)
2013-09-10 11:18:46	<--	s4muel (~s4muel@ec2-174-129-235-249.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:46	<--	SuperNoeMan (~SuperNoeM@ec2-23-20-202-208.compute-1.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:46	<--	bxc (~benc@paella.hawaga.org.uk) has quit (*.net *.split)
2013-09-10 11:18:46	<--	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has quit (*.net *.split)
2013-09-10 11:18:46	<--	Kneiva (~kneiva@raah.fi) has quit (*.net *.split)
2013-09-10 11:18:46	<--	ggherdov (uid11402@gateway/web/irccloud.com/x-tfhdnlfqmwlfoypd) has quit (Max SendQ exceeded)
2013-09-10 11:18:46	-->	paddymahoney (~paddymaho@24.137.221.230) has joined #haskell
2013-09-10 11:20:39	<--	Earnestly (~Earnestly@123.81.90.146.dyn.plus.net) has quit (Quit: WeeChat 0.4.2-rc1)
2013-09-10 11:21:18	-->	dschoepe (~dschoepe@ds00.ekb.sgsnet.se) has joined #haskell
2013-09-10 11:22:31	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-10 11:22:31	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-10 11:22:31	-->	Hafydd (~Hafydd@unaffiliated/joo) has joined #haskell
2013-09-10 11:22:31	-->	davorak (~ubuntu@ec2-50-17-231-113.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	Enigmagic (~nathan@unaffiliated/enigmagic) has joined #haskell
2013-09-10 11:22:31	-->	bsmt (~i@209.141.41.20) has joined #haskell
2013-09-10 11:22:31	-->	mrd (~md@debian/developer/mrd) has joined #haskell
2013-09-10 11:22:31	-->	bens (~bens@www.typius.net) has joined #haskell
2013-09-10 11:22:31	-->	tunixman (~tunixman@serenity.tunixman.com) has joined #haskell
2013-09-10 11:22:31	-->	orospakr (~orospakr@mobotropolis.orospakr.ca) has joined #haskell
2013-09-10 11:22:31	-->	warpy (uid1398@gateway/web/irccloud.com/x-ajrctoipxoluagap) has joined #haskell
2013-09-10 11:22:31	-->	lunarjar (~lunarjar@2605:6400:1:fed5:22:f924:6051:57c8) has joined #haskell
2013-09-10 11:22:31	-->	mrowe (~mrowe@72.249.82.46) has joined #haskell
2013-09-10 11:22:31	-->	Kruppe (~jcp@laforge.cs.uwaterloo.ca) has joined #haskell
2013-09-10 11:22:31	-->	brixen (~brixen@208.68.39.152) has joined #haskell
2013-09-10 11:22:31	-->	gereedy (geoff@mania.programmer-monk.net) has joined #haskell
2013-09-10 11:22:31	-->	jrslepak (~jrslepak@129.10.117.249) has joined #haskell
2013-09-10 11:22:31	-->	fikusz (~fikusz@catv-89-132-137-62.catv.broadband.hu) has joined #haskell
2013-09-10 11:22:31	-->	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has joined #haskell
2013-09-10 11:22:31	-->	Sunhay (~ssbasi@sunhay.com) has joined #haskell
2013-09-10 11:22:31	-->	sunnavy (~sunnavy@li50-215.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	confound (~hdp@glaive.weftsoar.net) has joined #haskell
2013-09-10 11:22:31	-->	relrod (relrod@redhat/relrod) has joined #haskell
2013-09-10 11:22:31	-->	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has joined #haskell
2013-09-10 11:22:31	-->	Saeppel (~saep@185.7.198.1) has joined #haskell
2013-09-10 11:22:31	-->	litherum (~Adium@2620:149:4:1b01:9c21:e2af:3bdf:db8c) has joined #haskell
2013-09-10 11:22:31	-->	`^_^v (~nycs@ip-64-32-224-203.nyc.megapath.net) has joined #haskell
2013-09-10 11:22:31	-->	thetallguy1 (~beshers@cpe-98-155-82-213.san.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-09-10 11:22:31	-->	osa1 (uid13910@gateway/web/irccloud.com/x-ylhhraxblizuftdh) has joined #haskell
2013-09-10 11:22:31	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	juhp (~petersen@redhat/juhp) has joined #haskell
2013-09-10 11:22:31	-->	akahn (uid2243@gateway/web/irccloud.com/x-rhgyoahmrwuprsaq) has joined #haskell
2013-09-10 11:22:31	-->	linduxed (~linduxed@h-199-200.a176.priv.bahnhof.se) has joined #haskell
2013-09-10 11:22:31	-->	shanse (~generic@p57B2CD23.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Kevin_ (~Kevin@209.65.15.42) has joined #haskell
2013-09-10 11:22:31	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	agallagher (~textual@173.252.71.129) has joined #haskell
2013-09-10 11:22:31	-->	arkeet (arkeet@unaffiliated/arkeet) has joined #haskell
2013-09-10 11:22:31	-->	colah (~colah@206.248.173.86) has joined #haskell
2013-09-10 11:22:31	-->	twn (~tmielika@melkinpaasi.cs.helsinki.fi) has joined #haskell
2013-09-10 11:22:31	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-09-10 11:22:31	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has joined #haskell
2013-09-10 11:22:31	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-10 11:22:31	-->	strax (uid4099@gateway/web/irccloud.com/x-agzsjenrsvceixni) has joined #haskell
2013-09-10 11:22:31	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 11:22:31	-->	tromp_ (~tromp@rtc35-161.rentec.com) has joined #haskell
2013-09-10 11:22:31	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-10 11:22:31	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 11:22:31	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 11:22:31	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-10 11:22:31	-->	AntiSpamMeta (~MetaBot@AntiSpamMeta/.) has joined #haskell
2013-09-10 11:22:31	-->	morolin_ (~morolin@cantor.csl.cornell.edu) has joined #haskell
2013-09-10 11:22:31	-->	dialelo1 (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-09-10 11:22:31	-->	wollw_ (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 11:22:31	-->	pierregh1 (~krux@91.179.13.34) has joined #haskell
2013-09-10 11:22:31	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-10 11:22:31	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-10 11:22:31	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-09-10 11:22:31	-->	mm_freak_ (~milch@p5DD048C3.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	obcode_ (~obcode@ob.cs.hm.edu) has joined #haskell
2013-09-10 11:22:31	-->	manung (~manung@195.89.19.142) has joined #haskell
2013-09-10 11:22:31	-->	EvilMachine (~evi1m4chi@xdsl-78-34-108-90.netcologne.de) has joined #haskell
2013-09-10 11:22:31	-->	nanothief_ (~nanothief@116.255.8.253) has joined #haskell
2013-09-10 11:22:31	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-10 11:22:31	-->	icz (~icz@x1-6-74-44-01-e6-1f-12.k448.webspeed.dk) has joined #haskell
2013-09-10 11:22:31	-->	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has joined #haskell
2013-09-10 11:22:31	-->	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-10 11:22:31	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 11:22:31	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-10 11:22:31	-->	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	zbcm (~zbcm@147.69.182.184) has joined #haskell
2013-09-10 11:22:31	-->	SoupE (~jloos@f048157087.adsl.alicedsl.de) has joined #haskell
2013-09-10 11:22:31	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 11:22:31	-->	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has joined #haskell
2013-09-10 11:22:31	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-10 11:22:31	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-10 11:22:31	-->	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-10 11:22:31	-->	tuxie_ (~paranoid@213.61.228.26) has joined #haskell
2013-09-10 11:22:31	-->	phischu (~pschuster@dhcp206.uni-koblenz.de) has joined #haskell
2013-09-10 11:22:31	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-10 11:22:31	-->	Guest58739 (~oleo@xdsl-78-35-172-62.netcologne.de) has joined #haskell
2013-09-10 11:22:31	-->	kayloos (~kayloos@shop3.diku.dk) has joined #haskell
2013-09-10 11:22:31	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-10 11:22:31	-->	Itkovian (~Itkovian@b244h178.ugent.be) has joined #haskell
2013-09-10 11:22:31	-->	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has joined #haskell
2013-09-10 11:22:31	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-09-10 11:22:31	-->	arenz (arenz@nat/ibm/x-dyamrekbmflaqjhi) has joined #haskell
2013-09-10 11:22:31	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-10 11:22:31	-->	xorox90 (uid7069@gateway/web/irccloud.com/x-jihhrlxnmtvaxmjq) has joined #haskell
2013-09-10 11:22:31	-->	skchrko (~sk@109.110.83.124) has joined #haskell
2013-09-10 11:22:31	-->	andares (~andares@unaffiliated/jacco) has joined #haskell
2013-09-10 11:22:31	-->	t7 (~chatzilla@chaucer.kent.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	ScriptDevil (~ashok@unaffiliated/scriptdevil) has joined #haskell
2013-09-10 11:22:31	-->	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has joined #haskell
2013-09-10 11:22:31	-->	Starfire_ (~starfire@kekkonen.cs.hut.fi) has joined #haskell
2013-09-10 11:22:31	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-10 11:22:31	-->	SpyrosTr_ (~spyrostri@conf-210.admin.grnet.gr) has joined #haskell
2013-09-10 11:22:31	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-09-10 11:22:31	-->	io2 (~io2@unaffiliated/irrequietus) has joined #haskell
2013-09-10 11:22:31	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-09-10 11:22:31	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-10 11:22:31	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-10 11:22:31	-->	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 11:22:31	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 11:22:31	-->	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has joined #haskell
2013-09-10 11:22:31	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-10 11:22:31	-->	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has joined #haskell
2013-09-10 11:22:31	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-10 11:22:31	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-10 11:22:31	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-10 11:22:31	-->	canissimia (~canissimi@unaffiliated/canissimia) has joined #haskell
2013-09-10 11:22:31	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-10 11:22:31	-->	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-10 11:22:31	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-10 11:22:31	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-10 11:22:31	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-10 11:22:31	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-10 11:22:31	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-10 11:22:31	-->	bestzdneirf (petterrav@2001:470:6bd1::) has joined #haskell
2013-09-10 11:22:31	-->	opqdonut (opqdonut@pseudo.fixme.fi) has joined #haskell
2013-09-10 11:22:31	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-10 11:22:31	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-09-10 11:22:31	-->	thalassarche (~thalassar@unaffiliated/thalassarche) has joined #haskell
2013-09-10 11:22:31	-->	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	fizruk (~fizruk@109.74.138.26) has joined #haskell
2013-09-10 11:22:31	-->	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-10 11:22:31	-->	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	[swift] (~swift@v-1045.fw1.sfo1.mozilla.net) has joined #haskell
2013-09-10 11:22:31	-->	milli (~milli@rasler.acmeps.com) has joined #haskell
2013-09-10 11:22:31	-->	Brando753 (~Brando753@unaffiliated/brando753) has joined #haskell
2013-09-10 11:22:31	-->	thorkilnaur (~thorkilna@87-58-52-58-static.dk.customer.tdc.net) has joined #haskell
2013-09-10 11:22:31	-->	Guest77905 (~apples@2001:4800:7813:516:d43b:4bc6:ff05:4344) has joined #haskell
2013-09-10 11:22:31	-->	zoktar (~zoktar@unaffiliated/zoktar) has joined #haskell
2013-09-10 11:22:31	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-10 11:22:31	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-10 11:22:31	-->	dlnx` (~dlnx@hackerspace.pl) has joined #haskell
2013-09-10 11:22:31	-->	Dtgr (~user@91-157-208-237.elisa-laajakaista.fi) has joined #haskell
2013-09-10 11:22:31	-->	valdyn (~valdyn@host-88-217-143-53.customer.m-online.net) has joined #haskell
2013-09-10 11:22:31	-->	xinming (~xinming@125.82.194.215) has joined #haskell
2013-09-10 11:22:31	-->	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	ehamberg (~erlend@hamberg.no) has joined #haskell
2013-09-10 11:22:31	-->	udevd (~kaetzchen@151.236.17.188) has joined #haskell
2013-09-10 11:22:31	-->	SLi (sliedes@lakka.kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-09-10 11:22:31	-->	mgaare_ (~quassel@192.81.216.48) has joined #haskell
2013-09-10 11:22:31	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-10 11:22:31	-->	hiroaki (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-10 11:22:31	-->	shintah (bebble@h-151-191.a336.priv.bahnhof.se) has joined #haskell
2013-09-10 11:22:31	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-10 11:22:31	-->	xenophon (~his_shado@64.124.65.162) has joined #haskell
2013-09-10 11:22:31	-->	csakatok_ (~csakatoku@em119-72-194-50.pool.e-mobile.ne.jp) has joined #haskell
2013-09-10 11:22:31	-->	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-10 11:22:31	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-10 11:22:31	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-10 11:22:31	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-10 11:22:31	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-10 11:22:31	-->	Obfuscate (~keii@unaffiliated/obfuscate) has joined #haskell
2013-09-10 11:22:31	-->	jungnam (jungnam@61.74.233.216) has joined #haskell
2013-09-10 11:22:31	-->	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-10 11:22:31	-->	Philonous_ (~Philonous@dslb-178-005-035-209.pools.arcor-ip.net) has joined #haskell
2013-09-10 11:22:31	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-10 11:22:31	-->	saep1 (~saep@p5B2A13ED.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	DarkNFoxy (~df@unaffiliated/darkfox) has joined #haskell
2013-09-10 11:22:31	-->	otto_s_ (~user@cotb-4db34930.pool.mediaWays.net) has joined #haskell
2013-09-10 11:22:31	-->	nonconvergent (~neuromanc@c-24-30-40-161.hsd1.ga.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has joined #haskell
2013-09-10 11:22:31	-->	YayMe (~user@97-122-184-27.hlrn.qwest.net) has joined #haskell
2013-09-10 11:22:31	-->	mobilebl- (~mobileblu@dslb-188-110-245-042.pools.arcor-ip.net) has joined #haskell
2013-09-10 11:22:31	-->	tomejaguar (~tom@weber.jaguarpaw.co.uk) has joined #haskell
2013-09-10 11:22:31	-->	babalone (~baba@p5DE44DF7.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	tutorship57 (~tutorship@78.129.150.171) has joined #haskell
2013-09-10 11:22:31	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-09-10 11:22:31	-->	apaku (~apaku@x2f14e31.dyn.telefonica.de) has joined #haskell
2013-09-10 11:22:31	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-10 11:22:31	-->	tamiko (~tamiko@pdpc/supporter/active/tamiko) has joined #haskell
2013-09-10 11:22:31	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-10 11:22:31	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	cdidd (~cdidd@128-68-128-158.broadband.corbina.ru) has joined #haskell
2013-09-10 11:22:31	-->	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has joined #haskell
2013-09-10 11:22:31	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-10 11:22:31	-->	onur (~onur@ev.onur.im) has joined #haskell
2013-09-10 11:22:31	-->	jfhall_ (~jfhall@24-205-238-86.dhcp.snlo.ca.charter.com) has joined #haskell
2013-09-10 11:22:31	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-10 11:22:31	-->	meretrix (~user@unaffiliated/meretrix) has joined #haskell
2013-09-10 11:22:31	-->	predator217 (~predator1@p50803AC1.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:22:31	-->	thunderrd (~thunderrd@119.42.74.149) has joined #haskell
2013-09-10 11:22:31	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-10 11:22:31	-->	jonsterling (jonsterlin@gateway/shell/ircrelay.com/x-eculxoofosxuylih) has joined #haskell
2013-09-10 11:22:31	-->	ParahSai1in (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 11:22:31	-->	ParahSail1n (~parahsail@unaffiliated/parahsailin) has joined #haskell
2013-09-10 11:22:31	-->	setmeaway (stemearay@119.201.52.138) has joined #haskell
2013-09-10 11:22:31	-->	geekosaur (allbery@dreamshell.ttuttle.net) has joined #haskell
2013-09-10 11:22:31	-->	poucet (~chris@li23-146.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	zacts (~zacts@unaffiliated/zacts) has joined #haskell
2013-09-10 11:22:31	-->	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-10 11:22:31	-->	hamishmack (~hamishmac@121-73-30-206.cable.telstraclear.net) has joined #haskell
2013-09-10 11:22:31	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-10 11:22:31	-->	hackagebot (~rss2irc@li229-222.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	profmakx (makx@unaffiliated/profmakx) has joined #haskell
2013-09-10 11:22:31	-->	lusory (~lusory@42.60.25.228) has joined #haskell
2013-09-10 11:22:31	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-10 11:22:31	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-10 11:22:31	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-10 11:22:31	-->	dennis (5476d374@gateway/web/freenode/ip.84.118.211.116) has joined #haskell
2013-09-10 11:22:31	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-10 11:22:31	-->	GaelanAintAround (~Gaelan@98-125-72-82.dyn.centurytel.net) has joined #haskell
2013-09-10 11:22:31	-->	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-10 11:22:31	-->	eataix (~eataix@unaffiliated/eataix) has joined #haskell
2013-09-10 11:22:31	-->	neptunepink (~root@adsl-99-105-53-117.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	danilo2 (53ee9a6e@gateway/web/freenode/ip.83.238.154.110) has joined #haskell
2013-09-10 11:22:31	-->	Guest54198 (~dexter3@174-16-186-130.hlrn.qwest.net) has joined #haskell
2013-09-10 11:22:31	-->	Eridius (~kevin@unaffiliated/eridius) has joined #haskell
2013-09-10 11:22:31	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	solancile (~solancile@c-67-185-62-121.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	ashnur (~ashnur@79.117.76.15) has joined #haskell
2013-09-10 11:22:31	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-09-10 11:22:31	-->	dabradley (bradley@nat/ibm/x-klgcasirnxawbzwr) has joined #haskell
2013-09-10 11:22:31	-->	julmae (~no@206.190.145.94) has joined #haskell
2013-09-10 11:22:31	-->	tdp93422 (4b2d007e@gateway/web/freenode/ip.75.45.0.126) has joined #haskell
2013-09-10 11:22:31	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-10 11:22:31	-->	rmunroe (~Randall@aram.xkcd.com) has joined #haskell
2013-09-10 11:22:31	-->	troydm (~troydm@unaffiliated/troydm) has joined #haskell
2013-09-10 11:22:31	-->	mmathis (~surya@198.199.68.171) has joined #haskell
2013-09-10 11:22:31	-->	gdsx (~xsdg@sipb-vm-99.mit.edu) has joined #haskell
2013-09-10 11:22:31	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-10 11:22:31	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-09-10 11:22:31	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-10 11:22:31	-->	Martty (~martty@lion.puttynuts.com) has joined #haskell
2013-09-10 11:22:31	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-10 11:22:31	-->	ecube (~ecube@unaffiliated/ecube) has joined #haskell
2013-09-10 11:22:31	-->	lisdrumz (~lis@37.115.5.205) has joined #haskell
2013-09-10 11:22:31	-->	yogurt_t_ (~yogurt_tr@190.191.224.63) has joined #haskell
2013-09-10 11:22:31	-->	arkx (~aku@eagleflow.fi) has joined #haskell
2013-09-10 11:22:31	-->	fxr (~user@78.187.102.63) has joined #haskell
2013-09-10 11:22:31	-->	go|dfish (goldfish@nat/dcunetworkingsociety/x-xgigmrjgnhfyvljp) has joined #haskell
2013-09-10 11:22:31	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	joe9 (~user@ip70-179-153-227.fv.ks.cox.net) has joined #haskell
2013-09-10 11:22:31	-->	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	theorbtwo (~theorb@91.84.53.6) has joined #haskell
2013-09-10 11:22:31	-->	cods (~cods@tuxee.net) has joined #haskell
2013-09-10 11:22:31	-->	debo (~anonymous@108.175.233.153) has joined #haskell
2013-09-10 11:22:31	-->	bergey (~user@ip-66-80-90-109.iad.megapath.net) has joined #haskell
2013-09-10 11:22:31	-->	msuszczy (~Martin@mnm000u03.u-3mrs.fr) has joined #haskell
2013-09-10 11:22:31	-->	pygospa (~Pygosceli@kiel-d9bfdc9e.pool.mediaWays.net) has joined #haskell
2013-09-10 11:22:31	-->	zarul (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-10 11:22:31	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-10 11:22:31	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-09-10 11:22:31	-->	Twey (~Twey@unaffiliated/twey) has joined #haskell
2013-09-10 11:22:31	-->	Morgawr (~morgawr@unaffiliated/morgawr) has joined #haskell
2013-09-10 11:22:31	-->	alexander__b (~alexander@fsf/member/alexanderb) has joined #haskell
2013-09-10 11:22:31	-->	mortberg (~mortberg@c-46-162-99-51.cust.bredband2.com) has joined #haskell
2013-09-10 11:22:31	-->	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-09-10 11:22:31	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	benj_ (~bjames@nat-123-249.guardian.co.uk) has joined #haskell
2013-09-10 11:22:31	-->	Ulrar (~Ulrar@luwin.ulrar.net) has joined #haskell
2013-09-10 11:22:31	-->	brisbin (~patrick@c-65-96-61-65.hsd1.ct.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-10 11:22:31	-->	Sebastien-L (~Sebastien@darkstar2.fullsix.com) has joined #haskell
2013-09-10 11:22:31	-->	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has joined #haskell
2013-09-10 11:22:31	-->	pootler (mervyn@smlh.x.rootbsd.net) has joined #haskell
2013-09-10 11:22:31	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-10 11:22:31	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-10 11:22:31	-->	hiratara (~hiratara@h223162.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-09-10 11:22:31	-->	asjo (~asjo@2505ds5-by.0.fullrate.dk) has joined #haskell
2013-09-10 11:22:31	-->	isenmann (~isenmann@blackhole.science-computing.de) has joined #haskell
2013-09-10 11:22:31	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-09-10 11:22:31	-->	Lefeni (~Lefeni@c-0941e555.143-16-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-09-10 11:22:31	-->	bscarlet (~bscarlet@static-71-174-103-29.bstnma.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	bytbox (~s@pool-71-163-114-49.washdc.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	samrat (uid2534@gateway/web/irccloud.com/x-usonjrsmhjaehpqh) has joined #haskell
2013-09-10 11:22:31	-->	chexxor (uid1596@gateway/web/irccloud.com/x-fltjbhvtitepjfxb) has joined #haskell
2013-09-10 11:22:31	-->	jchia (~jchia@cpe-24-90-223-33.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	_flow_ (flow@star.freakempire.de) has joined #haskell
2013-09-10 11:22:31	-->	Will| (~wrboyce@88.198.95.211) has joined #haskell
2013-09-10 11:22:31	-->	DRiKE (~drk@whiff.xentower.nl) has joined #haskell
2013-09-10 11:22:31	-->	Gothmog_ (~tobias@user.nullteilerfrei.de) has joined #haskell
2013-09-10 11:22:31	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-10 11:22:31	-->	blast_hardcheese (~blast_har@unaffiliated/blast-hardcheese/x-0199635) has joined #haskell
2013-09-10 11:22:31	-->	jayne (~jayne@freenode/staff/jayne) has joined #haskell
2013-09-10 11:22:31	-->	c_14 (~c_14@unaffiliated/c-14/x-8913907) has joined #haskell
2013-09-10 11:22:31	-->	thomassgn (~thomas@browniehive.net) has joined #haskell
2013-09-10 11:22:31	-->	boegel|work (~boegel@ca60c171.ugent.be) has joined #haskell
2013-09-10 11:22:31	-->	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has joined #haskell
2013-09-10 11:22:31	-->	ivan\ (~ivan@unaffiliated/ivan/x-000001) has joined #haskell
2013-09-10 11:22:31	-->	betawaffle (~betawaffl@ec2-174-129-19-107.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	tehroflmaoer (~tehroflma@199.101.99.208) has joined #haskell
2013-09-10 11:22:31	-->	yeltzooo6 (~yeltzooo@ec2-54-241-122-161.us-west-1.compute.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	Boney (~paul@ppp118-209-98-12.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 11:22:31	-->	frontend1oader (~mst@tomservo.robotrollcall.org) has joined #haskell
2013-09-10 11:22:31	-->	kaol (kaol@piperka.net) has joined #haskell
2013-09-10 11:22:31	-->	cajla_ (~cajla@faust.lysator.liu.se) has joined #haskell
2013-09-10 11:22:31	-->	luite (~luite@luite.com) has joined #haskell
2013-09-10 11:22:31	-->	Dashkal (~dashkal@unaffiliated/dashkal) has joined #haskell
2013-09-10 11:22:31	-->	crs__ (~crs_@192.210.215.64) has joined #haskell
2013-09-10 11:22:31	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-10 11:22:31	-->	Yaniel (yaniel@evo.paivola.fi) has joined #haskell
2013-09-10 11:22:31	-->	toddaaro (~toddaaro@opprobrio.us) has joined #haskell
2013-09-10 11:22:31	-->	akiress (~weechat@pdpc/supporter/student/akiress) has joined #haskell
2013-09-10 11:22:31	-->	bjorkintosh (~bjork@ip68-13-229-200.ok.ok.cox.net) has joined #haskell
2013-09-10 11:22:31	-->	Counter-Strike (~abc@mailsh7.xs4all.nl) has joined #haskell
2013-09-10 11:22:31	-->	FireFly (~firefly@oftn/member/FireFly) has joined #haskell
2013-09-10 11:22:31	-->	jamwt1 (~jamwt@sherlock.jamwt.com) has joined #haskell
2013-09-10 11:22:31	-->	mornfall (~mornfall@kde/developer/mornfall) has joined #haskell
2013-09-10 11:22:31	-->	necroyeti (~rthc@phire.org) has joined #haskell
2013-09-10 11:22:31	-->	DustyDingo (~nonamen@atommuell.mum.jku.at) has joined #haskell
2013-09-10 11:22:31	-->	tero- (~tero@core.feriko.fi) has joined #haskell
2013-09-10 11:22:31	-->	earthy (~arthurvl@illipe.xs4all.nl) has joined #haskell
2013-09-10 11:22:31	-->	thetallguy (~beshers@cpe-24-165-86-58.san.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has joined #haskell
2013-09-10 11:22:31	-->	jroesch (~jared@chips.whatbox.ca) has joined #haskell
2013-09-10 11:22:31	-->	hellome (~lua@192.73.239.25) has joined #haskell
2013-09-10 11:22:31	-->	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-10 11:22:31	-->	n00dle (~n00dle@unaffiliated/n00dle) has joined #haskell
2013-09-10 11:22:31	-->	Spockz (~alessandr@thalion.alessandrovermeulen.me) has joined #haskell
2013-09-10 11:22:31	-->	davorb-cellphone (~davorb-ce@194.47.245.35) has joined #haskell
2013-09-10 11:22:31	-->	liori (~liori@slarti.exroot.org) has joined #haskell
2013-09-10 11:22:31	-->	shiona (shiona@shiona.tontut.fi) has joined #haskell
2013-09-10 11:22:31	-->	serban (serban@notromania.com) has joined #haskell
2013-09-10 11:22:31	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-09-10 11:22:31	-->	ziman (~ziman@functor.sk) has joined #haskell
2013-09-10 11:22:31	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-09-10 11:22:31	-->	ismlages (~ismlages@212.174.109.55) has joined #haskell
2013-09-10 11:22:31	-->	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	s_quark (~s_quark@unaffiliated/s-quark/x-7744039) has joined #haskell
2013-09-10 11:22:31	-->	iemejia_ (~ismael@apache2-noxim.yoda.dreamhost.com) has joined #haskell
2013-09-10 11:22:31	-->	shachaf (~shachaf@unaffiliated/shachaf) has joined #haskell
2013-09-10 11:22:31	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-09-10 11:22:31	-->	Guest74748 (~mee@li94-42.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	mikeplus64 (~mikeplus6@unaffiliated/mikeplus64) has joined #haskell
2013-09-10 11:22:31	-->	rasmusto (~trasmuss@li519-146.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	munro (~ryan@node-2.0x0539.org) has joined #haskell
2013-09-10 11:22:31	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-09-10 11:22:31	-->	dyreshark (~dyreshark@198.199.76.106) has joined #haskell
2013-09-10 11:22:31	-->	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	kini (kini@unaffiliated/kini) has joined #haskell
2013-09-10 11:22:31	-->	mimico__ (uid2554@gateway/web/irccloud.com/x-gehmvygmeqmpfmuw) has joined #haskell
2013-09-10 11:22:31	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	jzl (~jzl@ec2-23-21-191-143.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-10 11:22:31	-->	willb1 (~wibenton@willb-laptop.cs.wisc.edu) has joined #haskell
2013-09-10 11:22:31	-->	kakos (~kakos@c-174-51-43-7.hsd1.co.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-09-10 11:22:31	-->	otulp (~otulp@cm-84.209.90.171.getinternet.no) has joined #haskell
2013-09-10 11:22:31	-->	eyck (~eyck@nat08.nowanet.pl) has joined #haskell
2013-09-10 11:22:31	-->	Ceryn (~Ceryn@petardo.dk) has joined #haskell
2013-09-10 11:22:31	-->	Baughn (~svein@tsugumi.brage.info) has joined #haskell
2013-09-10 11:22:31	-->	m0g (~Mog@88-191-117-112.rev.poneytelecom.eu) has joined #haskell
2013-09-10 11:22:31	-->	hrefchef (~BlackHunt@pool-72-73-253-159.cmdnnj.east.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	mp (maciej@hell.cx) has joined #haskell
2013-09-10 11:22:31	-->	zenoli (~pk@109.201.154.145) has joined #haskell
2013-09-10 11:22:31	-->	ozataman (~ozataman@pool-108-41-231-51.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	hdevalence|away (hdevalence@gateway/shell/kde/x-yqbgatcxuacouhst) has joined #haskell
2013-09-10 11:22:31	-->	Kuraitou (~kuraitou@unaffiliated/kuraitou) has joined #haskell
2013-09-10 11:22:31	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-10 11:22:31	-->	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has joined #haskell
2013-09-10 11:22:31	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has joined #haskell
2013-09-10 11:22:31	-->	FreakyPenguin (~FreakyPen@sv0.famkaufmann.info) has joined #haskell
2013-09-10 11:22:31	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-09-10 11:22:31	-->	gpampara (~gpampara@174.136.1.66) has joined #haskell
2013-09-10 11:22:31	-->	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has joined #haskell
2013-09-10 11:22:31	-->	sweeney (uid4809@gateway/web/irccloud.com/x-rnpvaozkjavyikag) has joined #haskell
2013-09-10 11:22:31	-->	arbn (~arbn@unaffiliated/arbn) has joined #haskell
2013-09-10 11:22:31	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-09-10 11:22:31	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-10 11:22:31	-->	sababa (~sababa@unaffiliated/sababa) has joined #haskell
2013-09-10 11:22:31	-->	dixie (dixie@real.wilbury.sk) has joined #haskell
2013-09-10 11:22:31	-->	eci (~eci@dsl-hkibrasgw3-50ddc9-199.dhcp.inet.fi) has joined #haskell
2013-09-10 11:22:31	-->	Nahra (~Nahra@unaffiliated/nahra) has joined #haskell
2013-09-10 11:22:31	-->	cruxeter1us (cruxtech@secspeed.com) has joined #haskell
2013-09-10 11:22:31	-->	hiredman (~hiredman@volyova.ec2.thelastcitadel.com) has joined #haskell
2013-09-10 11:22:31	-->	Ycros (ycros@gnaw.ycros.org) has joined #haskell
2013-09-10 11:22:31	-->	junsuiji1 (~junsuijin@c-76-17-174-68.hsd1.mn.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Gracenotes (~person@wikipedia/Gracenotes) has joined #haskell
2013-09-10 11:22:31	-->	idoru (idoru@freenode/utility-bot/ex-server/idoru) has joined #haskell
2013-09-10 11:22:31	-->	chirpsalot (~Chirps@unaffiliated/chirpsalot) has joined #haskell
2013-09-10 11:22:31	-->	zorzar (~zorzar@z.futw.eu) has joined #haskell
2013-09-10 11:22:31	-->	sirspazzolot (~matt@c-71-205-202-84.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Excureo (~c@68-113-0-218.static.knwc.wa.charter.com) has joined #haskell
2013-09-10 11:22:31	-->	djahandarie (darius@unaffiliated/djahandarie) has joined #haskell
2013-09-10 11:22:31	-->	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	niko (~niko@freenode/staff/ubuntu.member.niko) has joined #haskell
2013-09-10 11:22:31	-->	cschneid (cschneid@2600:3c00::f03c:91ff:fedf:d92e) has joined #haskell
2013-09-10 11:22:31	-->	suiside (tajnyman@unaffiliated/suiside) has joined #haskell
2013-09-10 11:22:31	-->	DigitalKiwi (~kiwi@unaffiliated/digitalkiwi) has joined #haskell
2013-09-10 11:22:31	-->	TheSpectre (~root@artemis.zerosecure.com) has joined #haskell
2013-09-10 11:22:31	-->	johnbender (johnbender@gateway/shell/ircrelay.com/x-nwclfgdcfdezcuxy) has joined #haskell
2013-09-10 11:22:31	-->	pikhq (~pikhq@24-107-196-13.dhcp.stls.mo.charter.com) has joined #haskell
2013-09-10 11:22:31	-->	DT` (~ea@95.233.203.148) has joined #haskell
2013-09-10 11:22:31	-->	Vorpal (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-09-10 11:22:31	-->	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has joined #haskell
2013-09-10 11:22:31	-->	farn (frantk@fran.tk) has joined #haskell
2013-09-10 11:22:31	-->	johnw (~johnw@c-98-214-70-173.hsd1.il.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Tordek (tordek@gateway/shell/blinkenshell.org/x-cgvscfhyxnqichut) has joined #haskell
2013-09-10 11:22:31	-->	Dodek (am291698@duch.mimuw.edu.pl) has joined #haskell
2013-09-10 11:22:31	-->	fijimunk1i (~fijimunki@pool-98-113-72-161.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	melter (~Melter@2001:4930:116:0:21c:c0ff:feef:eaf5) has joined #haskell
2013-09-10 11:22:31	-->	chrisyoung (~user@nyc.schrodinger.com) has joined #haskell
2013-09-10 11:22:31	-->	Natch (~Natch@c-cdcee155.25-4-64736c10.cust.bredbandsbolaget.se) has joined #haskell
2013-09-10 11:22:31	-->	killy9999 (~killy@hydra.ics.p.lodz.pl) has joined #haskell
2013-09-10 11:22:31	-->	michael__ (~quassel@62.253.227.100) has joined #haskell
2013-09-10 11:22:31	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-10 11:22:31	-->	kloeri (~kloeri@freenode/staff/exherbo.kloeri) has joined #haskell
2013-09-10 11:22:31	-->	nitin2 (~nitin@luug.ece.vt.edu) has joined #haskell
2013-09-10 11:22:31	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-09-10 11:22:31	-->	nlogax (~nlogax@unaffiliated/nlogax) has joined #haskell
2013-09-10 11:22:31	-->	M-ou-se (~m-ou.se@m-ou.se) has joined #haskell
2013-09-10 11:22:31	-->	`0660 (olli@oosny.net) has joined #haskell
2013-09-10 11:22:31	-->	ClaudiusMaximus (~claude@unaffiliated/claudiusmaximus) has joined #haskell
2013-09-10 11:22:31	-->	yriw (~yriw3209@csl.ec.t.kanazawa-u.ac.jp) has joined #haskell
2013-09-10 11:22:31	-->	Tesseraction (~Tesseract@unaffiliated/tesseraction) has joined #haskell
2013-09-10 11:22:31	-->	gbeshers (~gbeshers@pool-74-97-190-27.prvdri.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	seggy (c6fce60f@gateway/web/freenode/ip.198.252.230.15) has joined #haskell
2013-09-10 11:22:31	-->	Kelet (~Kelet@unaffiliated/kelet) has joined #haskell
2013-09-10 11:22:31	-->	jonsmock (~jonsmock@c-174-60-102-51.hsd1.pa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	fser (~fser@ns2.lautre.net) has joined #haskell
2013-09-10 11:22:31	-->	Adios (~Pettankok@fourleaf.cs.ccu.edu.tw) has joined #haskell
2013-09-10 11:22:31	-->	srhb (~srhb@static.101.127.47.78.clients.your-server.de) has joined #haskell
2013-09-10 11:22:31	-->	scolobb (~user@2a01:e0b:1:154:62eb:69ff:fefe:5a79) has joined #haskell
2013-09-10 11:22:31	-->	dju (dju@fsf/member/dju) has joined #haskell
2013-09-10 11:22:31	-->	bobthenameless (~bobthenam@c-71-227-128-93.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	n-dolio (~dolio@gw1.mcgraw-hill.com) has joined #haskell
2013-09-10 11:22:31	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-09-10 11:22:31	-->	em (~em@unaffiliated/emma) has joined #haskell
2013-09-10 11:22:31	-->	_janne (dmon@punainen.org) has joined #haskell
2013-09-10 11:22:31	-->	otterdam (~otterdam@reddit/operator/otterdam) has joined #haskell
2013-09-10 11:22:31	-->	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has joined #haskell
2013-09-10 11:22:31	-->	ghorn (~ghorn@kulnet-nat-2.kulnet.kuleuven.be) has joined #haskell
2013-09-10 11:22:31	-->	Guest96413 (~antix@unaffiliated/malfy) has joined #haskell
2013-09-10 11:22:31	-->	fimad (~fimad@173-13-165-149-sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 11:22:31	-->	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-09-10 11:22:31	-->	fixme (~fixme@202.120.40.94) has joined #haskell
2013-09-10 11:22:31	-->	benmachine (bm380@tremulous/developer/benmachine) has joined #haskell
2013-09-10 11:22:31	-->	joneshf-work (~joneshf@mail.concordusapps.com) has joined #haskell
2013-09-10 11:22:31	-->	jmct (uid1305@gateway/web/irccloud.com/x-vhhiiyupjrkclpuo) has joined #haskell
2013-09-10 11:22:31	-->	mononofu (~mononofu@vps.furidamu.org) has joined #haskell
2013-09-10 11:22:31	-->	dustinswan (~dustinswa@198.199.71.201) has joined #haskell
2013-09-10 11:22:31	-->	rgrinberg (~rgrinberg@198.211.108.102) has joined #haskell
2013-09-10 11:22:31	-->	KitB (~kit@kitb.pw) has joined #haskell
2013-09-10 11:22:31	-->	kennyp (~kennyp@fedora/kennyp) has joined #haskell
2013-09-10 11:22:31	-->	rhodesd (~none@192.34.61.82) has joined #haskell
2013-09-10 11:22:31	-->	callen (~callen@unaffiliated/callen) has joined #haskell
2013-09-10 11:22:31	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-09-10 11:22:31	-->	Internet13 (~chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has joined #haskell
2013-09-10 11:22:31	-->	javax (~javax@46.246.126.38) has joined #haskell
2013-09-10 11:22:31	-->	adnap (~adnap@cpe-70-112-164-154.austin.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	aford (~pi@host86-164-47-30.range86-164.btcentralplus.com) has joined #haskell
2013-09-10 11:22:31	-->	dwcook (~danny@unaffiliated/dwcook) has joined #haskell
2013-09-10 11:22:31	-->	zero7 (uid10708@gateway/web/irccloud.com/x-rbacbporhprqzueo) has joined #haskell
2013-09-10 11:22:31	-->	kk1fff (uid13630@gateway/web/irccloud.com/x-nefexgdcpyjufdef) has joined #haskell
2013-09-10 11:22:31	-->	purefn (uid13625@gateway/web/irccloud.com/x-omzzprbxcjthcfuk) has joined #haskell
2013-09-10 11:22:31	-->	idnar (uid12240@gateway/web/irccloud.com/x-nmunltoqatxvmeab) has joined #haskell
2013-09-10 11:22:31	-->	Ghoul_ (uid6924@gateway/web/irccloud.com/x-oefpjhxlxfpcxakq) has joined #haskell
2013-09-10 11:22:31	-->	nkpart (uid3844@gateway/web/irccloud.com/x-usorrgjjzwfnchjm) has joined #haskell
2013-09-10 11:22:31	-->	aloiscochard (uid2076@gateway/web/irccloud.com/x-fdodifbvjfyrcrdq) has joined #haskell
2013-09-10 11:22:31	-->	Xorlev (uid226@gateway/web/irccloud.com/x-tgmnpzuejomkdvlu) has joined #haskell
2013-09-10 11:22:31	-->	mavam (~mavam@unaffiliated/mavam) has joined #haskell
2013-09-10 11:22:31	-->	ehd (uid1451@gateway/web/irccloud.com/x-wfpomgtakcgdlthn) has joined #haskell
2013-09-10 11:22:31	-->	Erstarrung (~castor@ks26581.kimsufi.com) has joined #haskell
2013-09-10 11:22:31	-->	joeyh (~joeyh@2001:41c8:125:49::10) has joined #haskell
2013-09-10 11:22:31	-->	floatingman (~dnewman@c-68-47-207-131.hsd1.tn.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Cryovat (~null@sky.prism.winterday.net) has joined #haskell
2013-09-10 11:22:31	-->	kryft (kryft@kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	ninegrid (~ninegrid@cpe-68-203-28-246.austin.res.rr.com) has joined #haskell
2013-09-10 11:22:31	-->	stepcut (~stepcut@c-24-12-184-84.hsd1.il.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	Igloo (~igloo@210.99.2.81.in-addr.arpa) has joined #haskell
2013-09-10 11:22:31	-->	mietek (mietek@bak.io) has joined #haskell
2013-09-10 11:22:31	-->	redjohn (~redjohn@76.8.223.68) has joined #haskell
2013-09-10 11:22:31	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-09-10 11:22:31	-->	drmegahertz (~drmegaher@linuxuser.se) has joined #haskell
2013-09-10 11:22:31	-->	jlouis (jlouis@horus.0x90.dk) has joined #haskell
2013-09-10 11:22:31	-->	bunzen (~Geir@li184-224.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	tridactyla (~mforney@mforney.new.xen.prgmr.com) has joined #haskell
2013-09-10 11:22:31	-->	Kinnison (vToZDVVYsu@gateway/shell/pepperfish/x-ptqxtdpyshkjhdvy) has joined #haskell
2013-09-10 11:22:31	-->	ChongLi (~chongli@24-212-141-111.cable.teksavvy.com) has joined #haskell
2013-09-10 11:22:31	-->	si14 (uid2619@gateway/web/irccloud.com/x-ahsnmzsqpaoarlib) has joined #haskell
2013-09-10 11:22:31	-->	janiczek_ (uid12701@gateway/web/irccloud.com/x-fzriysaagvsiyqdj) has joined #haskell
2013-09-10 11:22:31	-->	etrepum (uid763@gateway/web/irccloud.com/x-shneosfmifqdvutw) has joined #haskell
2013-09-10 11:22:31	-->	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has joined #haskell
2013-09-10 11:22:31	-->	mapour (mapour@linux.utu.fi) has joined #haskell
2013-09-10 11:22:31	-->	nullcone (uid11626@gateway/web/irccloud.com/x-siqqamfkhkpjfyri) has joined #haskell
2013-09-10 11:22:31	-->	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	supki (~matt@li305-103.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	dsfox (~dsf@98.155.82.213) has joined #haskell
2013-09-10 11:22:31	-->	saiam^ (saiam@evo.paivola.fi) has joined #haskell
2013-09-10 11:22:31	-->	davidt (~chatzilla@davidt.scs.stanford.edu) has joined #haskell
2013-09-10 11:22:31	-->	copton (~copton@shell.spamt.net) has joined #haskell
2013-09-10 11:22:31	-->	mvj4_ (~2g8@78.47.152.189) has joined #haskell
2013-09-10 11:22:31	-->	ernst (~ernst@static.85-10-192-204.clients.your-server.de) has joined #haskell
2013-09-10 11:22:31	-->	ndngvr (~ndngvr@bcaec5e83086.click-network.com) has joined #haskell
2013-09-10 11:22:31	-->	pi8027 (~pi8027@www2480uf.sakura.ne.jp) has joined #haskell
2013-09-10 11:22:31	-->	gbarboza (~gbarboza@unaffiliated/sonicvanajr) has joined #haskell
2013-09-10 11:22:31	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 11:22:31	-->	iemejia (~ismael@apache2-noxim.yoda.dreamhost.com) has joined #haskell
2013-09-10 11:22:31	-->	`bps (sim@functor.paivola.fi) has joined #haskell
2013-09-10 11:22:31	-->	machisuji_ (~machisuji@78.46.83.103) has joined #haskell
2013-09-10 11:22:31	-->	jml (~jml@unaffiliated/jml) has joined #haskell
2013-09-10 11:22:31	-->	Tene (~tene@poipu/supporter/slacker/tene) has joined #haskell
2013-09-10 11:22:31	-->	ByronJohnson (~Byron@unaffiliated/bob0) has joined #haskell
2013-09-10 11:22:31	-->	shepheb (~bsshephe@bas1-jockvale05-3096538275.dsl.bell.ca) has joined #haskell
2013-09-10 11:22:31	-->	tdammers (~tobias@unaffiliated/tdammers) has joined #haskell
2013-09-10 11:22:31	-->	davean (~davean@vervet.isomerica.net) has joined #haskell
2013-09-10 11:22:31	-->	ortmage (ortmage@nat/google/x-ratauexiuvphlpyq) has joined #haskell
2013-09-10 11:22:31	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	sclv_ (c62d135f@gateway/web/freenode/ip.198.45.19.95) has joined #haskell
2013-09-10 11:22:31	-->	Nik05 (~Nik05@unaffiliated/nik05) has joined #haskell
2013-09-10 11:22:31	-->	zeroXten (~zeroXten@0x10.co.uk) has joined #haskell
2013-09-10 11:22:31	-->	sondove (~sondove@sondov.no) has joined #haskell
2013-09-10 11:22:31	-->	MitchW (~MitchW@124-171-104-43.dyn.iinet.net.au) has joined #haskell
2013-09-10 11:22:31	-->	lambdabot (lambdabot@2a01:7e00::f03c:91ff:fedf:9fdd) has joined #haskell
2013-09-10 11:22:31	-->	ousado (~ousado@unaffiliated/ousado) has joined #haskell
2013-09-10 11:22:31	-->	Watcher7 (~w@silly.tabby.cat) has joined #haskell
2013-09-10 11:22:31	-->	Fuuzetsu (~Shana@fsf/member/Fuuzetsu) has joined #haskell
2013-09-10 11:22:31	-->	Tehnix (~Tehnix@192.81.221.23) has joined #haskell
2013-09-10 11:22:31	-->	tinyghost (~ghosty@rainbowsta.rs) has joined #haskell
2013-09-10 11:22:31	-->	s4msung (~s4msung@s4msung.de) has joined #haskell
2013-09-10 11:22:31	-->	Rutger` (~devbin@nelisvanaalst.demon.nl) has joined #haskell
2013-09-10 11:22:31	-->	Zariel (~zariel@li37-84.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	maksbotan (~quassel@gentoo/developer/maksbotan) has joined #haskell
2013-09-10 11:22:31	-->	lattenwald (~qalex@185.6.245.156) has joined #haskell
2013-09-10 11:22:31	-->	matson (~matson@jabam.lepovirta.org) has joined #haskell
2013-09-10 11:22:31	-->	]OLI[ (~oli@raven.linux.ox.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	ericmj (~ericmj@198.211.118.116) has joined #haskell
2013-09-10 11:22:31	-->	a11235 (~a11235@unaffiliated/a11235) has joined #haskell
2013-09-10 11:22:31	-->	phryk (~phryk@static.39.216.9.176.clients.your-server.de) has joined #haskell
2013-09-10 11:22:31	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-09-10 11:22:31	-->	zomg (~jani@jjh.fi) has joined #haskell
2013-09-10 11:22:31	-->	slobo (~slobo@mx1.svarog.ca) has joined #haskell
2013-09-10 11:22:31	-->	Hodapp (~hodapp@198.56.208.32) has joined #haskell
2013-09-10 11:22:31	-->	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has joined #haskell
2013-09-10 11:22:31	-->	mux (mux@freebsd/developer/mux) has joined #haskell
2013-09-10 11:22:31	-->	identity (~0xC3@50708181.static.ziggozakelijk.nl) has joined #haskell
2013-09-10 11:22:31	-->	aoh (~aki@adsl-99-115.netplaza.fi) has joined #haskell
2013-09-10 11:22:31	-->	Mowah (~Mowah@c-0d8ce555.09-137-6c6b7013.cust.bredbandsbolaget.se) has joined #haskell
2013-09-10 11:22:31	-->	mviljamaa (mviljamaa@kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	othiym23 (ogd@aglaia.aoaioxxysz.net) has joined #haskell
2013-09-10 11:22:31	-->	ent (entgod@kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	_1126 (~1126@saturn.lileth.net) has joined #haskell
2013-09-10 11:22:31	-->	joachifm (~joachifm@ulrik.uio.no) has joined #haskell
2013-09-10 11:22:31	-->	Jaxan (~quassel@foo.kassala.de) has joined #haskell
2013-09-10 11:22:31	-->	eevar (~eevar@175.80-203-27.nextgentel.com) has joined #haskell
2013-09-10 11:22:31	-->	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-09-10 11:22:31	-->	Adeon (~valaat@109.73.169.52) has joined #haskell
2013-09-10 11:22:31	-->	raid (macbookpro@irc.coding4coffee.org) has joined #haskell
2013-09-10 11:22:31	-->	hiyakashi (~hiyakashi@www19112ue.sakura.ne.jp) has joined #haskell
2013-09-10 11:22:31	-->	epta (~yep@toje.ws) has joined #haskell
2013-09-10 11:22:31	-->	jrib (~jrib@upstream/dev/jrib) has joined #haskell
2013-09-10 11:22:31	-->	koala_man (vidar@unaffiliated/koala-man/x-2491903) has joined #haskell
2013-09-10 11:22:31	-->	paz (~paz@zulu824.server4you.de) has joined #haskell
2013-09-10 11:22:31	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-09-10 11:22:31	-->	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has joined #haskell
2013-09-10 11:22:31	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-09-10 11:22:31	-->	mena (~mena@asgard.tauri.hu) has joined #haskell
2013-09-10 11:22:31	-->	clog (~nef@bespin.org) has joined #haskell
2013-09-10 11:22:31	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-09-10 11:22:31	-->	bduc (~bduc@bduc.org) has joined #haskell
2013-09-10 11:22:31	-->	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has joined #haskell
2013-09-10 11:22:31	-->	tomprince (~tomprince@socrates.hocat.ca) has joined #haskell
2013-09-10 11:22:31	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-09-10 11:22:31	-->	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has joined #haskell
2013-09-10 11:22:31	-->	k00mi (~koomi@pictor.uberspace.de) has joined #haskell
2013-09-10 11:22:31	-->	MrRacoon (suthere@reaver.cat.pdx.edu) has joined #haskell
2013-09-10 11:22:31	-->	tensorpudding (~tensorpud@99.148.203.65) has joined #haskell
2013-09-10 11:22:31	-->	akraut (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has joined #haskell
2013-09-10 11:22:31	-->	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has joined #haskell
2013-09-10 11:22:31	-->	kshannon_ (~kris@kris.shannon.id.au) has joined #haskell
2013-09-10 11:22:31	-->	mshroyer (~mshroyer@legolas.paleogene.net) has joined #haskell
2013-09-10 11:22:31	-->	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell
2013-09-10 11:22:31	-->	axiom (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-09-10 11:22:31	-->	tomh- (uid501@gateway/web/irccloud.com/x-zuyqdcgwmtbuzsbi) has joined #haskell
2013-09-10 11:22:31	-->	iulian (iulian@ubuntu/member/iulian) has joined #haskell
2013-09-10 11:22:31	-->	phar (~phar@v22010096862397599.yourvserver.net) has joined #haskell
2013-09-10 11:22:31	-->	Ptival (~Ptival@goto.ucsd.edu) has joined #haskell
2013-09-10 11:22:31	-->	Bwild_ (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has joined #haskell
2013-09-10 11:22:31	-->	oldmanst1n (~glesica@goto10line.net) has joined #haskell
2013-09-10 11:22:31	-->	noddy2OOO (~self@numm.org) has joined #haskell
2013-09-10 11:22:31	-->	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	dennylin93 (~dennylin9@cnmc.tw) has joined #haskell
2013-09-10 11:22:31	-->	ssbr (~ssbr@python/site-packages/ssbr) has joined #haskell
2013-09-10 11:22:31	-->	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has joined #haskell
2013-09-10 11:22:31	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-09-10 11:22:31	-->	mendez (~mendez@electricabac.us) has joined #haskell
2013-09-10 11:22:31	-->	flux (flux@coffee.modeemi.fi) has joined #haskell
2013-09-10 11:22:31	-->	epsylon (~epsylon@abbaye.thele.me) has joined #haskell
2013-09-10 11:22:31	-->	Veltas (~quassel@backus.compsoc.warwick.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	wto (~wto@h-148-187.a336.priv.bahnhof.se) has joined #haskell
2013-09-10 11:22:31	-->	d3lxa (~d3lxa@ks38928.kimsufi.com) has joined #haskell
2013-09-10 11:22:31	-->	joefiorini (uid3127@gateway/web/irccloud.com/x-crwzgjtvvmjdhjjr) has joined #haskell
2013-09-10 11:22:31	-->	kxra (kxra@fsf/staff/kxra) has joined #haskell
2013-09-10 11:22:31	-->	k0ral (~k0ral@vau06-1-82-228-255-43.fbx.proxad.net) has joined #haskell
2013-09-10 11:22:31	-->	tsou (~tsou@lyon.sians.org) has joined #haskell
2013-09-10 11:22:31	-->	mrpantoufle (~mrpantouf@che33-1-82-66-19-31.fbx.proxad.net) has joined #haskell
2013-09-10 11:22:31	-->	Nshag (user@chl45-1-88-123-84-8.fbx.proxad.net) has joined #haskell
2013-09-10 11:22:31	-->	averell (~averell@2a00:1c18:401:c00::803:11) has joined #haskell
2013-09-10 11:22:31	-->	mmaruseacph2 (~mihai@mithlond.ro) has joined #haskell
2013-09-10 11:22:31	-->	Khisanth (~Khisanth@50.14.244.111) has joined #haskell
2013-09-10 11:22:31	-->	companion_cube (~simon@sac.cedeela.fr) has joined #haskell
2013-09-10 11:22:31	-->	dacc (~dacc@c-71-227-173-145.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	schroedinbug (~schroedin@71-212-238-198.hlrn.qwest.net) has joined #haskell
2013-09-10 11:22:31	-->	MouseTheLuckyDog (~mouse@adsl-76-193-161-115.dsl.chcgil.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	janinge (j@ninge.net) has joined #haskell
2013-09-10 11:22:31	-->	aleator (~aleator@desmaani.it.jyu.fi) has joined #haskell
2013-09-10 11:22:31	-->	uu1101 (~uu1101@mail.medranocalvo.com) has joined #haskell
2013-09-10 11:22:31	-->	stass (stas@ssh.deglitch.com) has joined #haskell
2013-09-10 11:22:31	-->	mimi_vx (~quassel@vector.clanwars.cz) has joined #haskell
2013-09-10 11:22:31	-->	CosmicRay (~jgoerzen@glockenspiel.complete.org) has joined #haskell
2013-09-10 11:22:31	-->	Maxdamantus (~Maxdamant@2001:470:f078::dead:beef:cafe) has joined #haskell
2013-09-10 11:22:31	-->	fxrh (~quassel@2001:1a50:11:0:5f:8f:ac66:1) has joined #haskell
2013-09-10 11:22:31	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2013-09-10 11:22:31	-->	Yawgmoth (~quassel@gruss.cc) has joined #haskell
2013-09-10 11:22:31	-->	chrra (~cra@cra.no) has joined #haskell
2013-09-10 11:22:31	-->	nwf (~nwf@a.rr.ietfng.org) has joined #haskell
2013-09-10 11:22:31	-->	Boreeas (~Boreeas@frozen.boreeas.net) has joined #haskell
2013-09-10 11:22:31	-->	Edoxile (~Edoxile@edoxile.net) has joined #haskell
2013-09-10 11:22:31	-->	nopcode (~nop@sushi.unix-ag.uni-kl.de) has joined #haskell
2013-09-10 11:22:31	-->	bcoppens (~bartcopp@kde/coppens) has joined #haskell
2013-09-10 11:22:31	-->	ryanakca (ryan@ubuntu/member/ryanakca) has joined #haskell
2013-09-10 11:22:31	-->	Draggor (~Draggor@75-150-231-161-Illinois.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 11:22:31	-->	miasma (jmjmak@linux.utu.fi) has joined #haskell
2013-09-10 11:22:31	-->	byorgey (~byorgey@LVN513-9.cis.upenn.edu) has joined #haskell
2013-09-10 11:22:31	-->	jrd0 (~jrd0@bigv.mockra.net) has joined #haskell
2013-09-10 11:22:31	-->	Ornedan (aitakang@melkki.cs.helsinki.fi) has joined #haskell
2013-09-10 11:22:31	-->	shelf (~bnc@unaffiliated/shelf) has joined #haskell
2013-09-10 11:22:31	-->	leroux (~leroux@unaffiliated/leroux) has joined #haskell
2013-09-10 11:22:31	-->	iron_houzi (~dorbin@cm-84.215.158.135.getinternet.no) has joined #haskell
2013-09-10 11:22:31	-->	mxf (~mxf@lab.qu.cx) has joined #haskell
2013-09-10 11:22:31	-->	mokus (~mokus@172-11-177-99.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	yam (yam@liberty.xenbox.fr) has joined #haskell
2013-09-10 11:22:31	-->	mami (mami@gateway/shell/c-base/x-nnosqquakntyvxsm) has joined #haskell
2013-09-10 11:22:31	-->	dwierenga (~dwierenga@75-63-28-175.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	aforemny (~aforemny@ec2-54-217-241-103.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	schlumpi_ (~schlumpi@fob.spline.inf.fu-berlin.de) has joined #haskell
2013-09-10 11:22:31	-->	zebr (~zebr@arcadia.kent.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	theDon (~td@141.30.223.187) has joined #haskell
2013-09-10 11:22:31	-->	dlundy (~dlundy@185.21.216.183) has joined #haskell
2013-09-10 11:22:31	-->	saiam (saiam@tiger.eliecraft.fi) has joined #haskell
2013-09-10 11:22:31	-->	bd_ (~nanashi@198.244.99.244) has joined #haskell
2013-09-10 11:22:31	-->	PHO_ (~pho@2001:0:53aa:64c:146b:ac4d:24a1:7d74) has joined #haskell
2013-09-10 11:22:31	-->	edwtjo (~edwtjo@h-62-72.a213.priv.bahnhof.se) has joined #haskell
2013-09-10 11:22:31	-->	macron (~macron@158.255.215.93) has joined #haskell
2013-09-10 11:22:31	-->	tahu (~tahu@client-178-16-41-83.inturbo.lt) has joined #haskell
2013-09-10 11:22:31	-->	bind (~bind@unaffiliated/bind) has joined #haskell
2013-09-10 11:22:31	-->	tych0 (~tycho@69.163.206.84) has joined #haskell
2013-09-10 11:22:31	-->	solirc (~solirc@213-239-220-143.clients.your-server.de) has joined #haskell
2013-09-10 11:22:31	-->	agundry (~adam@cafe.cis.strath.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	mkiefel (~martin@84.38.64.26) has joined #haskell
2013-09-10 11:22:31	-->	zenzike (~nick@zenzike.com) has joined #haskell
2013-09-10 11:22:31	-->	aninhumer (ajh239@pip.srcf.societies.cam.ac.uk) has joined #haskell
2013-09-10 11:22:31	-->	Plex- (~beams@v-74-91-115-151.unman-vds.internap-chicago.nfoservers.com) has joined #haskell
2013-09-10 11:22:31	-->	lispy (~lispy@li343-23.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	jix (~jix@jixco.de) has joined #haskell
2013-09-10 11:22:31	-->	Cerise (jerry@unaffiliated/cerise) has joined #haskell
2013-09-10 11:22:31	-->	prototrout (~prototrou@24-116-81-246.cpe.cableone.net) has joined #haskell
2013-09-10 11:22:31	-->	Dybber (~dybber@dybber.dk) has joined #haskell
2013-09-10 11:22:31	-->	jackhill (jackhill@pilot.trilug.org) has joined #haskell
2013-09-10 11:22:31	-->	Svedrin (svedrin@ketos.funzt-halt.net) has joined #haskell
2013-09-10 11:22:31	-->	ircbrowse (~chrisdone@unaffiliated/chrisdone) has joined #haskell
2013-09-10 11:22:31	-->	b2coutts (stein@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-09-10 11:22:31	-->	fergusnoble (fergusnobl@repl.esden.net) has joined #haskell
2013-09-10 11:22:31	-->	yan_ (~yan@64.22.109.95) has joined #haskell
2013-09-10 11:22:31	-->	kqr (kqr@host155-38.etanet.se) has joined #haskell
2013-09-10 11:22:31	-->	fryguybob (~fryguybob@f27.cs.rochester.edu) has joined #haskell
2013-09-10 11:22:31	-->	Nickeeh (~quassel@foo.kassala.de) has joined #haskell
2013-09-10 11:22:31	-->	caligula (~caligula@adsl-76-232-9-108.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-10 11:22:31	-->	palmje (palmje@167-19-88-118.dcwest.net.au) has joined #haskell
2013-09-10 11:22:31	-->	\q (~MaskRay@unaffiliated/maskray) has joined #haskell
2013-09-10 11:22:31	-->	ssttudder (~abi@46.17.57.132) has joined #haskell
2013-09-10 11:22:31	-->	hape01 (~hape01@217.144.132.70) has joined #haskell
2013-09-10 11:22:31	-->	krakrjak (~krakrjak@xvm-103-198.ghst.net) has joined #haskell
2013-09-10 11:22:31	-->	drdo (~drdo@2a02:2498:e000:20::16f:2) has joined #haskell
2013-09-10 11:22:31	-->	Eliel (~jojkaart@dyn79-415.yok.fi) has joined #haskell
2013-09-10 11:22:31	-->	pjstadig (~user@ec2-54-243-195-89.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	DrSyzygy (~mik@unseen-university.ankh-morpork.se) has joined #haskell
2013-09-10 11:22:31	-->	b52 (~b52@unaffiliated/b52) has joined #haskell
2013-09-10 11:22:31	-->	vsayer (~vsayer@c-50-156-7-219.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 11:22:31	-->	sunfun (~sunfun@2.237.168.123) has joined #haskell
2013-09-10 11:22:31	-->	SHODAN (~shozan@fsf/member/shodan) has joined #haskell
2013-09-10 11:22:31	-->	Mayzie (~Daniel.is@unaffiliated/mayazcherquoi) has joined #haskell
2013-09-10 11:22:31	-->	AlexWebr (~Alex@50.72.145.134) has joined #haskell
2013-09-10 11:22:31	-->	Chousuke (oranenj@battery.modeemi.fi) has joined #haskell
2013-09-10 11:22:31	-->	Th0mas (~thomas@th0mas.nl) has joined #haskell
2013-09-10 11:22:31	-->	Razz (~tim@kompiler.org) has joined #haskell
2013-09-10 11:22:31	-->	vehk (~vehk@unaffiliated/vehk) has joined #haskell
2013-09-10 11:22:31	-->	kfreds (~kfreds@178.209.57.22) has joined #haskell
2013-09-10 11:22:31	-->	NeatBasis (~quassel@cl-636.hel-01.fi.sixxs.net) has joined #haskell
2013-09-10 11:22:31	-->	wilfredh (uid159@gateway/web/irccloud.com/x-hpndlcnpckqjafrq) has joined #haskell
2013-09-10 11:22:31	-->	bartavelle (~bartavell@sd-27156.dedibox.fr) has joined #haskell
2013-09-10 11:22:31	-->	ocharles (ocharles@2a01:7e00::f03c:91ff:fe69:ec30) has joined #haskell
2013-09-10 11:22:31	-->	dpwright (~daniel@li413-20.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	bstrie (~ben@li100-7.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	brainproxy (~brainprox@pdpc/supporter/gold/brainproxy) has joined #haskell
2013-09-10 11:22:31	-->	sgso (~sgs@204.62.15.119) has joined #haskell
2013-09-10 11:22:31	-->	Pad^ (~Pad@colorlesscube.com) has joined #haskell
2013-09-10 11:22:31	-->	froztbyte (~froztbyte@unaffiliated/frozt01100101) has joined #haskell
2013-09-10 11:22:31	-->	SaBer (~sber@unobtainium.futurice.com) has joined #haskell
2013-09-10 11:22:31	-->	mike2 (~michael@unaffiliated/mike1703) has joined #haskell
2013-09-10 11:22:31	-->	integral (~bsmith@p3m/member/integral) has joined #haskell
2013-09-10 11:22:31	-->	ab9rf (~kmartin@pyrzqxgl-1-pt.tunnel.tserv9.chi1.ipv6.he.net) has joined #haskell
2013-09-10 11:22:31	-->	lokydor (lecornec20@tom.iiens.net) has joined #haskell
2013-09-10 11:22:31	-->	lulf (~lulf@li307-13.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	qz_ (~qz@li272-85.members.linode.com) has joined #haskell
2013-09-10 11:22:31	-->	pr (~pr@unaffiliated/pr) has joined #haskell
2013-09-10 11:22:31	-->	lahwran (~lahwran@python/site-packages/lahwran) has joined #haskell
2013-09-10 11:22:31	-->	joelteon (~joel@unaffiliated/otters) has joined #haskell
2013-09-10 11:22:31	-->	Gunni (~gunni@kjarni/gunni) has joined #haskell
2013-09-10 11:22:31	-->	tippenein (~bo@199.195.252.184) has joined #haskell
2013-09-10 11:22:31	-->	d-snp (~tinco@tinco.nl) has joined #haskell
2013-09-10 11:22:31	-->	isomorphismes (~ubuntu@ec2-54-243-213-161.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:31	-->	pyrtsa (pjahkola@kosh.org.aalto.fi) has joined #haskell
2013-09-10 11:22:31	-->	gds (~user@2001:41c8:10:5d::10) has joined #haskell
2013-09-10 11:22:31	-->	jliikka (jliikka@xob.kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	mixi (~mixi@exherbo/developer/mixi) has joined #haskell
2013-09-10 11:22:31	-->	kekimmo (kekimmo@hilla.kapsi.fi) has joined #haskell
2013-09-10 11:22:31	-->	bitraten (~bitraten@unaffiliated/bitraten) has joined #haskell
2013-09-10 11:22:31	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-09-10 11:22:31	-->	vnz (~vnz@unaffiliated/vnz) has joined #haskell
2013-09-10 11:22:31	-->	Walther (walther@2001:1bc8:1004::1) has joined #haskell
2013-09-10 11:22:31	-->	pyykkis_ (~jakeskik@staging.leonidasoy.fi) has joined #haskell
2013-09-10 11:22:31	-->	sipa (~pw@unaffiliated/sipa1024) has joined #haskell
2013-09-10 11:22:31	-->	taylorgb_ (~mystery@213.229.88.28) has joined #haskell
2013-09-10 11:22:31	-->	Blkt (~Blkt@2a01:4f8:150:80a1::aaaa) has joined #haskell
2013-09-10 11:22:31	-->	vivekrai (uid10305@gateway/web/irccloud.com/x-vdcmzlgypjpqwfgd) has joined #haskell
2013-09-10 11:22:31	-->	chickenflu (uid71@gateway/web/irccloud.com/x-dzfnoztzbhmjgxmk) has joined #haskell
2013-09-10 11:22:31	-->	IbnFirnas (uid6178@gateway/web/irccloud.com/x-kxdbbjrmfrjbhfwp) has joined #haskell
2013-09-10 11:22:31	-->	Raynos (uid3611@gateway/web/irccloud.com/x-hkokcpwtvccrldvx) has joined #haskell
2013-09-10 11:22:31	-->	liyang (~liyang@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-09-10 11:22:31	-->	zrot (~quassel@149.154.158.30) has joined #haskell
2013-09-10 11:22:31	-->	juuhaa (juuhaa@halko.asteriski.fi) has joined #haskell
2013-09-10 11:22:31	-->	ysuzuki (~ysuzuki@18.net220148245.t-com.ne.jp) has joined #haskell
2013-09-10 11:22:31	-->	ibab (igor@2600:3c03::f03c:91ff:feae:d6dd) has joined #haskell
2013-09-10 11:22:31	-->	popx (~popx@ethnoll.csbnet.se) has joined #haskell
2013-09-10 11:22:31	-->	heath (quassel@unaffiliated/ybit) has joined #haskell
2013-09-10 11:22:31	-->	scshunt (raedford@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-09-10 11:22:31	-->	tg (~x@unaffiliated/tg) has joined #haskell
2013-09-10 11:22:31	-->	edk (edk@unaffiliated/edk) has joined #haskell
2013-09-10 11:22:31	-->	thorsten` (~Thorsten@apus.uberspace.de) has joined #haskell
2013-09-10 11:22:31	-->	swistak35 (swistak35@2a01:4f8:160:11e4::10) has joined #haskell
2013-09-10 11:22:32	-->	ciaranm (~ciaranm@paludis/shiny-hat-wearer/ciaranm) has joined #haskell
2013-09-10 11:22:32	-->	seantallen (~seantalle@ec2-54-234-24-103.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	Amadiro (jonathri@dalvik.ping.uio.no) has joined #haskell
2013-09-10 11:22:32	-->	s4muel (~s4muel@ec2-174-129-235-249.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	alexsdutton (~alex@comma.splice.org.uk) has joined #haskell
2013-09-10 11:22:32	-->	Deewiant (~deewiant@deewiant.iki.fi) has joined #haskell
2013-09-10 11:22:32	-->	Iceland_jack (user@2a01:7e00::f03c:91ff:fedf:8336) has joined #haskell
2013-09-10 11:22:32	-->	xye (~QQ@2a01:4f8:d16:1f53::2) has joined #haskell
2013-09-10 11:22:32	-->	machisuji (~machisuji@2a01:4f8:162:22c6::2) has joined #haskell
2013-09-10 11:22:32	-->	Athas (~athas@sigkill.dk) has joined #haskell
2013-09-10 11:22:32	-->	Kneiva (~kneiva@raah.fi) has joined #haskell
2013-09-10 11:22:32	-->	rs0 (~ubuntu@ec2-54-245-248-5.us-west-2.compute.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	bxc (~benc@paella.hawaga.org.uk) has joined #haskell
2013-09-10 11:22:32	-->	SuperNoeMan (~SuperNoeM@ec2-23-20-202-208.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	stomp (~stomp@v1.fob.spline.inf.fu-berlin.de) has joined #haskell
2013-09-10 11:22:32	-->	petanqk (siniluht@jumi.lut.fi) has joined #haskell
2013-09-10 11:22:32	-->	liszt (~liszt@2607:f0d0:1002:1c::2) has joined #haskell
2013-09-10 11:22:32	-->	nicoo (~nicoo@unaffiliated/nicoo) has joined #haskell
2013-09-10 11:22:32	-->	solarus (~solarus@tunna.org) has joined #haskell
2013-09-10 11:22:32	-->	danr (~danr@tunna.org) has joined #haskell
2013-09-10 11:22:32	-->	cross (cross@spitfire.i.gajendra.net) has joined #haskell
2013-09-10 11:22:32	-->	dario^CIP (~dario@ircbox.informatik.uni-erlangen.de) has joined #haskell
2013-09-10 11:22:32	-->	klugez (kluge@xob.kapsi.fi) has joined #haskell
2013-09-10 11:22:32	-->	gridaphobe (~gridaphob@goto.ucsd.edu) has joined #haskell
2013-09-10 11:22:32	-->	prophile (~proph@oftn/member/prophile) has joined #haskell
2013-09-10 11:22:32	-->	pfoetchen (~pfoetchen@beiboot1.petschge.de) has joined #haskell
2013-09-10 11:22:32	-->	Rembane (~Rembane@li346-36.members.linode.com) has joined #haskell
2013-09-10 11:22:32	-->	Proteumus (~Proteumus@li349-19.members.linode.com) has joined #haskell
2013-09-10 11:22:32	-->	mattp_ (~mattp_@intma.in) has joined #haskell
2013-09-10 11:22:32	-->	ChanServ (ChanServ@services.) has joined #haskell
2013-09-10 11:22:32	-->	pnielsen (pnielsen@2a01:7e00::f03c:91ff:fedf:3a21) has joined #haskell
2013-09-10 11:22:32	-->	magicman (~tchakkazu@adsl-76-230-21-225.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-10 11:22:32	-->	Clint (~Clint@libre.fm/hacker/clint) has joined #haskell
2013-09-10 11:22:32	-->	sp3ctum (mikavilpas@shell.wilan.org) has joined #haskell
2013-09-10 11:22:32	-->	pharaun (~pharaun@static.88-198-62-245.clients.your-server.de) has joined #haskell
2013-09-10 11:22:32	-->	bqp (~bqp@unaffiliated/bqp) has joined #haskell
2013-09-10 11:22:32	-->	XMunkki_ (xm@hilla.kapsi.fi) has joined #haskell
2013-09-10 11:22:32	-->	elliott (elliott@unaffiliated/elliott) has joined #haskell
2013-09-10 11:22:32	-->	deavid (~quassel@ns311218.ovh.net) has joined #haskell
2013-09-10 11:22:32	-->	asante (~asante@unaffiliated/asante) has joined #haskell
2013-09-10 11:22:32	-->	def-lkb (~def@lakaban.net) has joined #haskell
2013-09-10 11:22:32	-->	zaiste (~zaiste@static.88-198-68-40.clients.your-server.de) has joined #haskell
2013-09-10 11:22:32	-->	aszlig (~aszlig@redmoonstudios.org) has joined #haskell
2013-09-10 11:22:32	-->	ibid (ajk@debian/developer/ajk) has joined #haskell
2013-09-10 11:22:32	-->	Reisen (~Reisen@unaffiliated/reisen) has joined #haskell
2013-09-10 11:22:32	-->	ipuustin (~ipuustin@2002:5870:2ea5::1) has joined #haskell
2013-09-10 11:22:32	-->	geal (~geal@irc.unhandledexpression.com) has joined #haskell
2013-09-10 11:22:32	-->	inarru (~edwardgeo@nest.insectsarerubbish.org) has joined #haskell
2013-09-10 11:22:32	-->	lpsmith (~lpsmith@unaffiliated/lpsmith) has joined #haskell
2013-09-10 11:22:32	-->	horlicks (~simon@tickle.compsoc.man.ac.uk) has joined #haskell
2013-09-10 11:22:32	-->	Ezku (saukkee@kosh.org.aalto.fi) has joined #haskell
2013-09-10 11:22:32	-->	anachron (~bjorh08@svale.uia.no) has joined #haskell
2013-09-10 11:22:32	-->	mkrull (~mkrull@kvm.uninets.eu) has joined #haskell
2013-09-10 11:22:32	-->	fall_ (fall@betty.countzero.no) has joined #haskell
2013-09-10 11:22:32	-->	nikola (~nikola@li278-224.members.linode.com) has joined #haskell
2013-09-10 11:22:32	-->	sohum (sohum@pdpc/supporter/active/sohum) has joined #haskell
2013-09-10 11:22:32	-->	mr- (~martin@pcmat00034.uni-regensburg.de) has joined #haskell
2013-09-10 11:22:32	-->	malorie_ (~bla@84.200.20.248) has joined #haskell
2013-09-10 11:22:32	-->	pqmodn (~pqmodn@unaffiliated/pqmodn) has joined #haskell
2013-09-10 11:22:32	-->	skypers (~skp@88-190-221-99.rev.dedibox.fr) has joined #haskell
2013-09-10 11:22:32	-->	mollerstrand (fredrik@notty.slacker.se) has joined #haskell
2013-09-10 11:22:32	-->	Maior (~toor@stolas.doismellburning.co.uk) has joined #haskell
2013-09-10 11:22:32	-->	saurik (~saurik@u15259116.onlinehome-server.com) has joined #haskell
2013-09-10 11:22:32	-->	JPohlmann (~jannis@xfce/core-developer/JPohlmann) has joined #haskell
2013-09-10 11:22:32	-->	duairc (~shane@things.vm.bytemark.co.uk) has joined #haskell
2013-09-10 11:22:32	-->	jlewis (~jlewis@unaffiliated/jordanlewis) has joined #haskell
2013-09-10 11:22:32	-->	BlastHardcheese (chris@pdpc/supporter/active/blasthardcheese) has joined #haskell
2013-09-10 11:22:32	-->	ahf (ahf@irssi/staff/ahf) has joined #haskell
2013-09-10 11:22:32	-->	deggis (deggis@hilla.kapsi.fi) has joined #haskell
2013-09-10 11:22:32	--	Mode #haskell [+o ChanServ] by brooks.freenode.net
2013-09-10 11:22:32	-->	Laney (~laney@ubuntu/member/pdpc.active.laney) has joined #haskell
2013-09-10 11:22:32	-->	Hardolaf (~hardolaf@osuosc/Hardolaf) has joined #haskell
2013-09-10 11:22:32	-->	gemelen (~gemelen@gemelen.net) has joined #haskell
2013-09-10 11:22:32	-->	bogner_ (~bogner@li325-42.members.linode.com) has joined #haskell
2013-09-10 11:22:32	-->	kaw (~kaw@irrasjonal.net) has joined #haskell
2013-09-10 11:22:32	-->	Tribal (tribal@rcfreak0.com) has joined #haskell
2013-09-10 11:22:32	-->	int-e (~noone@static.88-198-179-137.clients.your-server.de) has joined #haskell
2013-09-10 11:22:32	-->	zerokarmaleft (~zkl@morpheus.net) has joined #haskell
2013-09-10 11:22:32	-->	mlinksva (~quassel@rose.makesad.us) has joined #haskell
2013-09-10 11:22:32	-->	thirsteh (thirsteh@linuxfordummies/Thirsteh) has joined #haskell
2013-09-10 11:22:32	-->	nxorg8 (nxorg8@2a01:7e00::f03c:91ff:fe70:367c) has joined #haskell
2013-09-10 11:22:32	-->	mero (~gz@ec2-176-34-102-78.eu-west-1.compute.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	bezik (~bezik@trans.liftio.com) has joined #haskell
2013-09-10 11:22:32	-->	BrianHV (bhv1@2600:3c03::f03c:91ff:fe96:f614) has joined #haskell
2013-09-10 11:22:32	-->	electrogeek (electrogee@unaffiliated/electrogeek) has joined #haskell
2013-09-10 11:22:32	-->	bogner (bogner@2600:3c03::f03c:91ff:fedf:7ef4) has joined #haskell
2013-09-10 11:22:32	-->	neurocyte (neurocyte@marvin.vdbonline.net) has joined #haskell
2013-09-10 11:22:32	-->	cmsd2 (~cmsd2@prospero2.dh.bytemark.co.uk) has joined #haskell
2013-09-10 11:22:32	-->	banjiewen (banjiewen@gateway/shell/cloudant/x-cmadrfsfvofcowre) has joined #haskell
2013-09-10 11:22:32	-->	jhh (hampl@levheart.casablanca.cz) has joined #haskell
2013-09-10 11:22:32	-->	eL_Bart0 (eL_Bart0@dietunichtguten.org) has joined #haskell
2013-09-10 11:22:32	-->	qwandor (~quassel@qwandor.xen.prgmr.com) has joined #haskell
2013-09-10 11:22:32	-->	Bigcheese (~bigcheese@unaffiliated/bigcheese) has joined #haskell
2013-09-10 11:22:32	-->	Odd_Bloke (~oddbloke@libre.fm/user/oddbloke) has joined #haskell
2013-09-10 11:22:32	-->	dqd (id@wikipedia/dqd) has joined #haskell
2013-09-10 11:22:32	-->	inr (~inr@c83-250-22-57.bredband.comhem.se) has joined #haskell
2013-09-10 11:22:32	-->	Jello_Raptor (Jello_Rapt@2600:3c03::f03c:91ff:fedf:ec6c) has joined #haskell
2013-09-10 11:22:32	-->	Khady (~Khady@unaffiliated/khady) has joined #haskell
2013-09-10 11:22:32	-->	wunki (~petar@wunki.org) has joined #haskell
2013-09-10 11:22:32	-->	alpounet (~alpounet@2a01:e0b:1:82:2e0:f4ff:fe19:e9cb) has joined #haskell
2013-09-10 11:22:32	-->	aristid (~aristid@unaffiliated/aristid) has joined #haskell
2013-09-10 11:22:32	-->	tomaw (tom@freenode/staff/tomaw) has joined #haskell
2013-09-10 11:22:32	-->	Liskni_si (pytt_l@ackle.nomi.cz) has joined #haskell
2013-09-10 11:22:32	-->	felipe_ (~felipe@unaffiliated/felipe) has joined #haskell
2013-09-10 11:22:32	-->	ccxCZ (~ccxCZ@156.200.broadband11.iol.cz) has joined #haskell
2013-09-10 11:22:32	-->	taruti (taruti@ultra.violetti.org) has joined #haskell
2013-09-10 11:22:32	-->	peddie (peddie@repl.esden.net) has joined #haskell
2013-09-10 11:22:32	-->	arnsholt (~arne@54.80-203-170.nextgentel.com) has joined #haskell
2013-09-10 11:22:32	-->	MetaCosm (~MetaCosm@unaffiliated/metacosm) has joined #haskell
2013-09-10 11:22:32	-->	dan64 (dan64@dannyadam.com) has joined #haskell
2013-09-10 11:22:32	-->	haasn (~nand@2a01:4f8:d13:5245::2) has joined #haskell
2013-09-10 11:22:32	-->	og (foobar@puck.ogr.no) has joined #haskell
2013-09-10 11:22:32	-->	fabjan (fabjan@Tricholoma.Update.UU.SE) has joined #haskell
2013-09-10 11:22:32	-->	andrewsw (~andrew@swclan.homelinux.org) has joined #haskell
2013-09-10 11:22:32	-->	sordina (~Lyndon@ec2-50-17-183-50.compute-1.amazonaws.com) has joined #haskell
2013-09-10 11:22:32	-->	mak` (~mak@lokalhost.pl) has joined #haskell
2013-09-10 11:22:32	-->	osnr (~osnr@unaffiliated/osnr) has joined #haskell
2013-09-10 11:22:32	-->	satshabad (~root@198.199.67.210) has joined #haskell
2013-09-10 11:22:32	-->	katis (~katis@198.199.124.56) has joined #haskell
2013-09-10 11:22:32	-->	absence (gXaaAUbcVr@horisont.pvv.ntnu.no) has joined #haskell
2013-09-10 11:22:32	-->	bbee (~bbee@unaffiliated/bbee) has joined #haskell
2013-09-10 11:22:32	-->	bergmark (~adnam@atmat.net) has joined #haskell
2013-09-10 11:22:32	-->	ahihi (~transient@cs149054.pp.htv.fi) has joined #haskell
2013-09-10 11:22:32	-->	mantovani (~mantovani@li74-187.members.linode.com) has joined #haskell
2013-09-10 11:22:32	-->	flori_ (flori@irc.ping.de) has joined #haskell
2013-09-10 11:22:32	-->	carter (carter@gateway/shell/ircrelay.com/x-uthowwlbcetsfkaj) has joined #haskell
2013-09-10 11:22:32	-->	gseitz (~gseitz@217-162-127-140.dynamic.hispeed.ch) has joined #haskell
2013-09-10 11:22:32	-->	mel- (~m@m.fuglos.org) has joined #haskell
2013-09-10 11:22:32	-->	mjrosenb (~mjrosenb@INDIUM.CLUB.CC.CMU.EDU) has joined #haskell
2013-09-10 11:22:32	-->	barrucadu (~barrucadu@fsf/member/barrucadu) has joined #haskell
2013-09-10 11:22:32	-->	joogi (~joogi@fix3d.net) has joined #haskell
2013-09-10 11:22:32	-->	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has joined #haskell
2013-09-10 11:22:32	-->	osfameron (~osfameron@www.greenokapi.net) has joined #haskell
2013-09-10 11:22:32	-->	sajith (~sajith@bog.hcoop.net) has joined #haskell
2013-09-10 11:22:32	-->	Phlogistique (~no@neetwork.net) has joined #haskell
2013-09-10 11:23:04	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-10 11:23:12	<--	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has quit (Remote host closed the connection)
2013-09-10 11:23:15	donri	https://github.com/valderman/haste-compiler
2013-09-10 11:23:15	-->	kstuart (~Thunderbi@host-92-30-63-82.as13285.net) has joined #haskell
2013-09-10 11:23:16	<--	dschoepe (~dschoepe@ds00.ekb.sgsnet.se) has quit (Changing host)
2013-09-10 11:23:16	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 11:23:16	fylwind	thanks for the link
2013-09-10 11:23:16	Cale	https://rawgithub.com/RudolfVonKrugstein/jshaskell-blog/master/6_BreakoutImproved/code/compiled/BreakoutImproved.js
2013-09-10 11:23:16	-->	hashcat (~chatzilla@27.242.4.115) has joined #haskell
2013-09-10 11:23:16	Cale	:D
2013-09-10 11:23:17	-->	Earnestea (~Earnestly@unaffiliated/earnestly) has joined #haskell
2013-09-10 11:23:17	-->	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 11:23:17	-->	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has joined #haskell
2013-09-10 11:23:20	Cale	It's like "hey, this isn't so bad... oh wait"
2013-09-10 11:23:21	-->	codesoup (~codesoup@108.175.233.21) has joined #haskell
2013-09-10 11:23:21	fylwind	yeah I was "inspecting" the page source and saw like a bunch of JS functions named after haskell stuff
2013-09-10 11:23:22	fylwind	and I missed the blob of minified JS
2013-09-10 11:23:23	donri	i'm guessing the first half is the hand-written "RTS"
2013-09-10 11:23:23	quchen	Cale: After you said that I was like "what does Cale mean this code isn't so bad … oh wait"
2013-09-10 11:23:23	quchen	It's a safe bet to assume everyone does that :-D
2013-09-10 11:23:36	quchen	It's a well-hidden abomination, you have to admit that
2013-09-10 11:24:03	-->	ggherdov (uid11402@gateway/web/irccloud.com/x-kevtazlzzwdkpcgt) has joined #haskell
2013-09-10 11:24:15	artyomkazak	I fell for it too
2013-09-10 11:24:37	<--	xinming (~xinming@125.82.194.215) has quit (Ping timeout: 241 seconds)
2013-09-10 11:25:23	<--	EvilMachine (~evi1m4chi@xdsl-78-34-108-90.netcologne.de) has quit (Quit: EvilMachine)
2013-09-10 11:25:24	<--	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has quit (Ping timeout: 268 seconds)
2013-09-10 11:25:41	donri	i wonder how the ghc rts code compares to -fvia-c output
2013-09-10 11:25:50	-->	xinming (~xinming@125.82.194.215) has joined #haskell
2013-09-10 11:26:49	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-09-10 11:27:33	-->	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has joined #haskell
2013-09-10 11:27:53	nh2	Cale: any advanced javascripter will have no problem debugging that! :P
2013-09-10 11:27:55	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-09-10 11:28:27	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-10 11:29:16	<--	manung (~manung@195.89.19.142) has quit (Quit: manung)
2013-09-10 11:30:35	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (Read error: Operation timed out)
2013-09-10 11:30:35	Cale	A different style of abomination here: http://hdiff.luite.com/gloss/styrene/out.js
2013-09-10 11:31:19	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 260 seconds)
2013-09-10 11:31:26	-->	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has joined #haskell
2013-09-10 11:31:35	-->	shergill (~user@gateway/tor-sasl/shergill) has joined #haskell
2013-09-10 11:31:47	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 260 seconds)
2013-09-10 11:32:30	-->	manung (~manung@195.89.19.142) has joined #haskell
2013-09-10 11:32:58	<--	manung (~manung@195.89.19.142) has quit (Client Quit)
2013-09-10 11:33:27	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-10 11:33:32	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-09-10 11:34:19	quchen	Cale: GHCJS is not a fair comparison!
2013-09-10 11:34:31	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-10 11:34:37	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Ping timeout: 245 seconds)
2013-09-10 11:35:00	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Remote host closed the connection)
2013-09-10 11:35:50	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 245 seconds)
2013-09-10 11:35:59	Hafydd	Hahah!
2013-09-10 11:36:49	MedDev	Hafydd, I love those moments :)
2013-09-10 11:36:54	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 11:38:39	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-09-10 11:39:07	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 11:40:32	<--	glosoli (~glosoli@93.93.59.25) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 11:41:54	-->	hexagoxel (~hexagoxel@pc228186.wlan.uni-kiel.de) has joined #haskell
2013-09-10 11:42:30	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 11:42:49	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-10 11:43:17	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-10 11:45:34	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 11:46:30	-->	gbonobb (d96f44b2@gateway/web/freenode/ip.217.111.68.178) has joined #haskell
2013-09-10 11:46:58	gbonobb	Hey guys, anyone able to help me setup sublimehaskell, i got a few issues
2013-09-10 11:47:20	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 260 seconds)
2013-09-10 11:47:39	Kaini	gbonobb, ask
2013-09-10 11:48:00	gbonobb	i have the same setup on linux and works perfectly but on a windows machine it does not
2013-09-10 11:48:12	gbonobb	not sure whats the problem really
2013-09-10 11:48:21	gbonobb	it just doesnt build the project
2013-09-10 11:48:33	gbonobb	or do any linting
2013-09-10 11:48:52	gbonobb	if i start REPL prelude loads and builds the project
2013-09-10 11:49:08	gbonobb	but when i save the file building never ends and no linting
2013-09-10 11:49:14	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-09-10 11:49:24	gbonobb	in my path i added the bin under the haskell platform
2013-09-10 11:49:38	gbonobb	and also the bin in %APPDATA%
2013-09-10 11:49:56	gbonobb	also in add path in sublime haskell added them both
2013-09-10 11:50:02	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 11:50:15	Kaini	gbonobb, how did you set your PATH? Notice that you cannot use SublimeHaskell's "add_to_PATH" since it will always separate directories with ":" while Windows would need ";"
2013-09-10 11:50:33	gbonobb	hmm
2013-09-10 11:50:50	gbonobb	i added the path from user variables
2013-09-10 11:51:01	gbonobb	sp that i can use ghci and cabal from command line
2013-09-10 11:51:17	gbonobb	that explains why cabal never builds the project
2013-09-10 11:51:18	<--	__main__ (~main@50.240.210.73) has quit (Ping timeout: 240 seconds)
2013-09-10 11:51:25	Kaini	and you can invoke hlint from command line as well?
2013-09-10 11:51:26	gbonobb	it cant find it by the looks of it
2013-09-10 11:51:44	gbonobb	so how can i tell sublimehaskell about the exe
2013-09-10 11:51:57	gbonobb	usi guess use ;
2013-09-10 11:52:29	gbonobb	"add_to_PATH": ["C:\\HaskellPlatform2013_2_0_0\\2013.2.0.0\\bin"]
2013-09-10 11:52:39	-->	scripty (~scripty@117.192.175.240) has joined #haskell
2013-09-10 11:52:47	gbonobb	"add_to_PATH" --> ; ["C:\\HaskellPlatform2013_2_0_0\\2013.2.0.0\\bin",
2013-09-10 11:52:54	gbonobb	is this what you mean
2013-09-10 11:52:59	Kaini	No no
2013-09-10 11:53:06	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-10 11:53:15	gbonobb	haha i thought so as that will break python
2013-09-10 11:54:00	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 256 seconds)
2013-09-10 11:54:11	<--	Peaker (~eyal@87.69.111.138) has quit (Read error: Operation timed out)
2013-09-10 11:54:19	gbonobb	"add_to_PATH": ["C:\\HaskellPlatform2013_2_0_0\\2013.2.0.0\\bin", "C:\\Users\\username\\AppData\\Roaming\\cabal\\bin"] } thats what i have
2013-09-10 11:54:33	-->	dhil (~dhil@2001:878:302:3:c685:8ff:fe42:7e03) has joined #haskell
2013-09-10 11:54:44	-->	Krakarn (Krakarn@62.80.204.136) has joined #haskell
2013-09-10 11:55:06	gbonobb	the platform bin has ghci and stuff whereas the cabal bin holds cabal, ghc-mod exes etc
2013-09-10 11:55:22	Kaini	I haven't investigated this issue any further, but it looks like SublimeHaskell contains code ala ":".join(add_to_PATH) which will not work on Windows. I never managed to get add_to_PATH running on Windows - just don't use this variable. Set your Path in the System Settings (Win+Break, Change settings, environment variables, ...)
2013-09-10 11:56:14	<--	ndonaldson (~nic@61.69.24.113) has quit (Ping timeout: 268 seconds)
2013-09-10 11:56:14	gbonobb	Hmm so the paths under sublimehaskell settings should be emtpy
2013-09-10 11:56:18	Kaini	Yes
2013-09-10 11:56:21	<--	dhil (~dhil@2001:878:302:3:c685:8ff:fe42:7e03) has quit (Client Quit)
2013-09-10 11:56:28	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 11:57:40	Kaini	If you are able to invoke ghc, cabal and hlint, stylish-haskell in an emtpy powershell, your PATH is set correctly.
2013-09-10 11:57:54	Kaini	(You can print your path with "$env:Path")
2013-09-10 11:58:28	gbonobb	1 sec trying now
2013-09-10 11:59:39	-->	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has joined #haskell
2013-09-10 11:59:41	<--	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has quit (Changing host)
2013-09-10 11:59:42	-->	nexx (~nexx@unaffiliated/xxen) has joined #haskell
2013-09-10 11:59:44	-->	carlosgaldino (~carlosgal@177.32.75.176) has joined #haskell
2013-09-10 12:01:04	<--	nexx (~nexx@unaffiliated/xxen) has quit (Remote host closed the connection)
2013-09-10 12:01:30	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-10 12:02:14	gbonobb	Kaini: Yeap they all work from command line
2013-09-10 12:02:24	gbonobb	maybe is a sublime haskell windows issue
2013-09-10 12:02:43	Kaini	Did you restart Sublime Text and try again?
2013-09-10 12:03:21	gbonobb	1 sec i actually removed the plugin and installing now
2013-09-10 12:05:10	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-10 12:05:31	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Read error: Connection reset by peer)
2013-09-10 12:05:33	-->	gusto_ (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-10 12:07:07	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-09-10 12:09:11	gbonobb	ok
2013-09-10 12:09:18	gbonobb	is doing something it was not doing before
2013-09-10 12:09:26	gbonobb	loading standard modules
2013-09-10 12:09:32	gbonobb	this looks promising
2013-09-10 12:10:24	-->	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has joined #haskell
2013-09-10 12:11:00	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Ping timeout: 256 seconds)
2013-09-10 12:11:03	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 268 seconds)
2013-09-10 12:11:28	<--	Kevin_ (~Kevin@209.65.15.42) has quit (Read error: Connection reset by peer)
2013-09-10 12:11:40	<--	setmeaway (stemearay@119.201.52.138) has quit (Ping timeout: 264 seconds)
2013-09-10 12:11:50	-->	Kevin_ (~Kevin@209.65.15.42) has joined #haskell
2013-09-10 12:13:43	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-10 12:14:11	gbonobb	OK no paths set, but unfortunatelly still stays at Building.... indefinitely
2013-09-10 12:14:45	gbonobb	Sublime Haskell: running build commands: [['cabal', 'build'], ['cabal', 'build', '-v0', '--ghc-options=-fforce-recomp -Wall -fno-code']]
2013-09-10 12:14:47	dennis	Hi
2013-09-10 12:14:48	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 12:15:09	dennis	im trying to benchmark something with criterion
2013-09-10 12:15:32	<--	ScriptDevil (~ashok@unaffiliated/scriptdevil) has quit (Ping timeout: 256 seconds)
2013-09-10 12:15:32	gbonobb	WindowsError, system cant find file specified
2013-09-10 12:15:37	gbonobb	in the console
2013-09-10 12:15:44	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 12:15:50	gbonobb	so i am assuming it cant find cabal
2013-09-10 12:15:55	gbonobb	brb
2013-09-10 12:16:22	Kaini	gbonobb, does "cabal build" work in the PowerShell?
2013-09-10 12:17:27	dennis	i used 2 different computers and on one if it i always get an error after a while which says: "\Data\Vector\Generic.hs 244 ((!)): index our of Bounds (-veryBigInt, Count)
2013-09-10 12:17:55	<--	chatsiri_ (~chatsiri_@kuwin-134-177.kuwin.ku.ac.th) has quit (Ping timeout: 245 seconds)
2013-09-10 12:18:03	dennis	has this to do something with ghc version or so?
2013-09-10 12:18:41	luite	Cale: ack i should really take those examples offline
2013-09-10 12:18:56	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-10 12:19:11	Cale	luite: I like them! :)
2013-09-10 12:19:25	donri	dennis: 64 bit vs 32 bit perhaps?
2013-09-10 12:19:44	Cale	It's just fun to look at the generated output and marvel at how good modern web browsers are at executing javascript
2013-09-10 12:19:44	luite	Cale: hehe well at least update them with something from a recent build
2013-09-10 12:20:02	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-10 12:20:04	dennis	Well they are both 64 bit
2013-09-10 12:20:14	-->	Yuu-chan (~yuu@192.162.88.2) has joined #haskell
2013-09-10 12:20:20	nh2	gbonobb: oh a SublimeHaskell windows user!
2013-09-10 12:20:34	nh2	gbonobb: let's try and make it work
2013-09-10 12:21:20	<--	kayloos (~kayloos@shop3.diku.dk) has quit (Remote host closed the connection)
2013-09-10 12:21:49	dennis	can i somehow look which version of ghc i installed? 64 or 32?
2013-09-10 12:22:11	<--	epsilonhalbe (~epsilonha@62.68.205.246) has quit (Ping timeout: 260 seconds)
2013-09-10 12:22:16	donri	dennis: uh actually index out of bounds might not have to do with the architecture. dunno.
2013-09-10 12:22:31	nh2	Kaini: how are paths in windows supposed to be joined?
2013-09-10 12:22:36	nh2	semicolon?
2013-09-10 12:22:38	Kaini	nh2, ;
2013-09-10 12:22:54	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Quit: Leaving)
2013-09-10 12:23:12	-->	lemao (~lemao@189.60.37.42) has joined #haskell
2013-09-10 12:23:19	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-10 12:23:38	Kaini	nh2, os.pathsep in python
2013-09-10 12:23:58	Cale	luite: It would be interesting to see if the newer build performs better.
2013-09-10 12:24:00	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-10 12:25:14	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 12:25:59	luite	Cale: it's probably a bit slower, since it uses function calls for many things to save a bit of space, and js engines don't always inline them reliably
2013-09-10 12:26:06	<--	Pad^ (~Pad@colorlesscube.com) has quit (Changing host)
2013-09-10 12:26:06	-->	Pad^ (~Pad@unaffiliated/pad/x-1632456) has joined #haskell
2013-09-10 12:26:17	luite	although the newer builds have some other optimizations
2013-09-10 12:26:32	donri	luite: is it slow on firefox because of firefox or because of ghcjs?
2013-09-10 12:26:34	-->	Shaladdle (~Shaladdle@68.248.62.130) has joined #haskell
2013-09-10 12:26:48	luite	Int, Char, Word values are all represented by a javascript number now, no boxing anymore
2013-09-10 12:27:26	luite	(works for all single-constructor ADT's with one primitive field that fits in a JS var)
2013-09-10 12:27:27	-->	ScriptDevil (~ashok@122.248.163.3) has joined #haskell
2013-09-10 12:27:49	nh2	Kaini, gbonobb: pushed
2013-09-10 12:27:55	luite	donri: firefox has a poor memory manager, slow allocator and non-generational gc
2013-09-10 12:28:00	luite	that doesn't play well with haskell
2013-09-10 12:28:30	donri	luite: fun!
2013-09-10 12:30:13	luite	donri: if the example was carefully written to run fully in unboxed arrays without allocation, firefox would do much better
2013-09-10 12:30:37	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 12:30:43	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-10 12:31:14	-->	Paprikac_ (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 12:31:55	donri	luite: do you know if they're working on those things in firefox at all?
2013-09-10 12:32:02	donri	they seem to be putting all their monies on asm.js
2013-09-10 12:32:22	<--	scripty (~scripty@117.192.175.240) has quit (Read error: Connection reset by peer)
2013-09-10 12:32:34	-->	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has joined #haskell
2013-09-10 12:32:35	<--	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has quit (Changing host)
2013-09-10 12:32:35	-->	nexx (~nexx@unaffiliated/xxen) has joined #haskell
2013-09-10 12:32:39	luite	donri: yeah they've been trying to track down all unsafe memory things in their C (or C++?) library earlir this year
2013-09-10 12:33:14	luite	donri: by using some combination of static analysis with macros that catch lots of common patterns
2013-09-10 12:33:43	<--	hexagoxel (~hexagoxel@pc228186.wlan.uni-kiel.de) has quit (Ping timeout: 276 seconds)
2013-09-10 12:33:48	-->	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has joined #haskell
2013-09-10 12:34:01	donri	luite: and GC?
2013-09-10 12:34:02	-->	Redz (~red@82.113.106.145) has joined #haskell
2013-09-10 12:34:06	luite	problem is that if you want to go to a generational compacting GC, every write suddenly needs to go through a write barrier
2013-09-10 12:34:25	luite	donri: they have an implementation of that somewhere
2013-09-10 12:34:29	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-10 12:34:47	luite	donri: of a generational gc
2013-09-10 12:34:51	Hugh__	Hello - what is the difference between cabal and cabal-dev?
2013-09-10 12:35:05	donri	Hugh__: cabal-dev is outdated
2013-09-10 12:35:25	Redz	why does it print only after a endline?
2013-09-10 12:35:26	Redz	main = forever $ getChar >>= print
2013-09-10 12:35:26	donri	Hugh__: latest cabal-install has sandboxes now
2013-09-10 12:35:42	dcoutts_	Hugh__: cabal-dev is/was a wrapper around cabal to provide better sandboxing. The latest release of cabal now has sandboxes natively.
2013-09-10 12:35:44	donri	Hugh__: and a repl
2013-09-10 12:35:50	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 246 seconds)
2013-09-10 12:35:57	luite	donri: not sure about the status, the real risk is in the libraries, that's much more code, and more tricky bugs
2013-09-10 12:36:02	Hugh__	ok... so sandboxes keep all packages separate?
2013-09-10 12:36:15	kuribas	Is there a portable version of decodeFloat?
2013-09-10 12:36:28	donri	Hugh__: well, they give you separate environments
2013-09-10 12:37:01	<--	Kelet (~Kelet@unaffiliated/kelet) has quit (Read error: Connection reset by peer)
2013-09-10 12:37:11	Hugh__	sorry, what is the difference?
2013-09-10 12:37:57	donri	Hugh__: that you can share sandboxes and that you still can't install different builds of the same package version in one sandbox
2013-09-10 12:38:10	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-09-10 12:38:18	<--	kizzx2 (~Adium@059148047146.ctinets.com) has quit (Quit: Leaving.)
2013-09-10 12:38:25	donri	Hugh__: but i'm not quite sure what *you* meant by "all packages separate" :)
2013-09-10 12:38:50	donri	Hugh__: when you install into a sandbox, all the dependencies install into that same sandbox, too
2013-09-10 12:39:11	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 12:39:51	nh2	Hugh__: from your sandbox you can still see the system-wide installed packages
2013-09-10 12:39:52	Hugh__	I am trying to really understand where everything is stored on the file system. Let's back up... given a totally clean Ubuntu install, installing the Haskell Platform for the very first time where do all the Prelude packages go?
2013-09-10 12:40:11	Hugh__	nh2 - ahh! Ok, so those would be Prelude?
2013-09-10 12:40:30	donri	Hugh__: prelude normally comes from the "base" package
2013-09-10 12:40:38	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 268 seconds)
2013-09-10 12:40:56	Hugh__	so prelude is not actually a package?
2013-09-10 12:40:58	donri	Hugh__: it's probably in some place like /usr/lib[64]/ghc-*/base-*
2013-09-10 12:41:15	donri	Hugh__: it's a module which is part of a package :)
2013-09-10 12:42:04	merijn	Redz: stdin is line buffered, so getChar doesn't get any input until you input a new line
2013-09-10 12:42:16	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-10 12:42:26	merijn	Redz: You need to disable buffering on stdin to stop that
2013-09-10 12:42:26	Hugh__	ok, so Package is synonymous with Jar and module is synonymous with a java Package
2013-09-10 12:42:27	nh2	Hugh__: you can see with dpkg -L ghc
2013-09-10 12:42:41	donri	Hugh__: something like that
2013-09-10 12:42:43	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Ping timeout: 256 seconds)
2013-09-10 12:44:33	<--	mno2 (~mno2@wlan44.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-10 12:44:35	Hugh__	ok, last question I promise... when would it ever not be better to always use sandboxes? In other words, surely the way to go is always use sandboxes for all projects?
2013-09-10 12:44:56	donri	Hugh__: it means builds take longer, at least initially
2013-09-10 12:44:59	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 12:45:02	Hugh__	then when you delete a project you remove all files
2013-09-10 12:45:05	nh2	Hugh__: the haskell module / java package comparison goes ok, but in java a jar is a real file while a package is like a package on ubuntu: it can deliver you packages, but it is not a file itself (it's a grouping of files)
2013-09-10 12:45:20	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-09-10 12:45:20	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-10 12:45:26	Hugh__	got it! thanks nh2
2013-09-10 12:45:37	donri	Hugh__: no need to promise no further questions - ask away!
2013-09-10 12:45:54	nh2	Hugh__: if you install all packages 100 times it'll take disk space and your maintenance time to keep them updated
2013-09-10 12:45:56	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 12:46:27	nh2	if you are writing projects that work quite independently of dependency versions, you sometimes need not care
2013-09-10 12:46:37	Redz	merijn: i wonder why this works in ghci. did you know how to fix this?
2013-09-10 12:46:44	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 264 seconds)
2013-09-10 12:47:06	<--	gusto_ (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-09-10 12:47:32	donri	Redz: possibly ghci isn't line buffered
2013-09-10 12:47:43	Hugh__	btw - I usually cut and paste these conversations for future reference. You guys are giving some very valuable advice - maybe with your permission I could collate them and then open-source them somewhere for others to benefit? Just an idea..
2013-09-10 12:47:49	nh2	Redz: http://www.haskell.org/hoogle/?hoogle=hSetBuffering
2013-09-10 12:48:02	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-10 12:48:27	donri	Hugh__: the channel is publicly logged anyway. i don't know what the copyright implications are. feel free to use anything *I* say though.
2013-09-10 12:48:34	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 12:48:45	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-09-10 12:48:46	<--	ScriptDevil (~ashok@122.248.163.3) has quit (Ping timeout: 245 seconds)
2013-09-10 12:48:50	Ikarus	I have two Ints, I want to divide them and get the Double out of them, obviously / doesn't just work, what am I supposed to be doing ?
2013-09-10 12:48:50	Hugh__	oh right, is it searchable somewhere?
2013-09-10 12:49:04	nh2	Hugh__: http://tunes.org/~nef/logs/haskell/?C=M;O=D
2013-09-10 12:49:06	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-09-10 12:49:06	donri	Hugh__: http://ircbrowse.net/
2013-09-10 12:49:32	Hugh__	thanks all, great assistance! out
2013-09-10 12:49:48	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-10 12:49:59	nh2	Ikarus: first convert them both to Doubles using fromIntegral
2013-09-10 12:50:22	-->	kayloos (~kayloos@shop3.diku.dk) has joined #haskell
2013-09-10 12:50:27	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 12:50:41	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-10 12:50:41	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 256 seconds)
2013-09-10 12:50:48	<--	Shaladdle (~Shaladdle@68.248.62.130) has quit (Quit: Shaladdle)
2013-09-10 12:50:49	-->	ScriptDevil (~ashok@122.248.163.3) has joined #haskell
2013-09-10 12:50:51	<--	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 12:51:05	-->	Paprikachu (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 12:51:05	Redz	nh2: thank you.
2013-09-10 12:51:22	-->	b_ (~b@185.6.205.4) has joined #haskell
2013-09-10 12:51:30	nh2	Ikarus: fromIntegral is like a generalized version of a (double) cast in other languages, it can infer the type of what you want to convert to from the environment
2013-09-10 12:51:51	<--	Paprikac_ (~Paprikach@80.120.175.113) has quit (Ping timeout: 264 seconds)
2013-09-10 12:52:42	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-10 12:52:51	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-09-10 12:53:20	<--	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-10 12:53:26	-->	Kelet (~Kelet@unaffiliated/kelet) has joined #haskell
2013-09-10 12:53:45	<--	kayloos (~kayloos@shop3.diku.dk) has quit (Remote host closed the connection)
2013-09-10 12:53:46	-->	rgr (~user@f054058053.adsl.alicedsl.de) has joined #haskell
2013-09-10 12:55:06	kuribas	Is Int32 or Int64 faster than
2013-09-10 12:55:10	kuribas	integer?
2013-09-10 12:55:27	nh2	kuribas: yes
2013-09-10 12:56:03	-->	kayloos (~kayloos@shop3.diku.dk) has joined #haskell
2013-09-10 12:56:08	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-10 12:58:02	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Ping timeout: 256 seconds)
2013-09-10 13:00:39	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Ping timeout: 240 seconds)
2013-09-10 13:00:45	kuribas	And the size of Int is platform dependent?
2013-09-10 13:00:58	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-10 13:01:11	-->	hajimeho_ (~hajimehos@218.110.11.228) has joined #haskell
2013-09-10 13:01:14	-->	brisbin_ (~patrick@D57D17C2.static.ziggozakelijk.nl) has joined #haskell
2013-09-10 13:02:13	<--	brisbin_ (~patrick@D57D17C2.static.ziggozakelijk.nl) has quit (Client Quit)
2013-09-10 13:02:25	-->	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has joined #haskell
2013-09-10 13:02:27	<--	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has quit (Changing host)
2013-09-10 13:02:28	-->	Mortomes (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 13:02:43	<--	mroman (~roman2@fmnssun.ibone.ch) has left #haskell
2013-09-10 13:03:03	-->	paullik (~paullik@5-15-250-117.residential.rdsnet.ro) has joined #haskell
2013-09-10 13:03:03	<--	paullik (~paullik@5-15-250-117.residential.rdsnet.ro) has quit (Changing host)
2013-09-10 13:03:03	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-10 13:03:10	<--	dialelo1 (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Read error: No route to host)
2013-09-10 13:03:11	<--	danilo2 (53ee9a6e@gateway/web/freenode/ip.83.238.154.110) has quit (Ping timeout: 250 seconds)
2013-09-10 13:03:21	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-09-10 13:03:39	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-10 13:03:44	-->	kayloos_ (~kayloos@shop3.diku.dk) has joined #haskell
2013-09-10 13:03:53	<--	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-10 13:04:34	-->	kdas__ (kdas@nat/redhat/x-gzvoemnrtaauzild) has joined #haskell
2013-09-10 13:04:37	<--	kayloos (~kayloos@shop3.diku.dk) has quit (Read error: Connection reset by peer)
2013-09-10 13:04:46	quchen	kuribas: Yes.
2013-09-10 13:05:14	quchen	kuribas: Try evaluating `maxBound :: Int`.
2013-09-10 13:05:20	quchen	> maxBound :: Int
2013-09-10 13:05:22	lambdabot	  2147483647
2013-09-10 13:05:23	kuribas	Why doesn't decodeFloat return (Int64, Int) instead of (Integer, Int)?  Isn't the first more efficient?
2013-09-10 13:06:22	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-10 13:06:35	quchen	I don't think it matters much there. Integer is basically "data Integer = Small Int | Large BigInt".
2013-09-10 13:06:40	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 260 seconds)
2013-09-10 13:06:51	quchen	So the overhead you're introducing is one comparison for "largeness" and adding the constructor.
2013-09-10 13:06:57	--	kdas__ is now known as kushal
2013-09-10 13:07:05	<--	kushal (kdas@nat/redhat/x-gzvoemnrtaauzild) has quit (Changing host)
2013-09-10 13:07:05	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-10 13:07:06	kuribas	> maxBound :: Int64
2013-09-10 13:07:08	lambdabot	  9223372036854775807
2013-09-10 13:07:11	-->	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-10 13:07:32	<--	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-09-10 13:07:33	kuribas	 Int64 is larger than Int.  And I would think Int64 is cheaper than BigNum.
2013-09-10 13:07:55	quchen	Int64 is not necessarily larger than Int.
2013-09-10 13:08:09	quchen	On 64-bit machines they're often identical.
2013-09-10 13:08:17	Fuuzetsu	not everyone is running on 64 bit system
2013-09-10 13:08:21	quchen	And Int64 has a max bound, while Bigint doesn't.
2013-09-10 13:08:40	kuribas	I am running on 64 bit, but 32bit ubuntu...
2013-09-10 13:08:45	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 13:08:58	-->	Sorella (~quildreen@201.80.214.167) has joined #haskell
2013-09-10 13:08:58	<--	Sorella (~quildreen@201.80.214.167) has quit (Changing host)
2013-09-10 13:08:58	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-10 13:09:12	kuribas	quchen: True, but a double floating point mantissa is 52 bits.
2013-09-10 13:09:48	quicksilver	the reason is simply historical
2013-09-10 13:09:56	quicksilver	it's not because Int64 is faster or slower than Integer
2013-09-10 13:10:11	quicksilver	it's because decodeFloat was written when Integer was the only sensible option
2013-09-10 13:10:32	kuribas	I see.
2013-09-10 13:11:13	quicksilver	decodeFloat might even be in the standard(?)
2013-09-10 13:11:16	quicksilver	whilst Int64 isn't(?)
2013-09-10 13:11:20	quicksilver	unsure of facts :-)
2013-09-10 13:12:17	-->	iLoop (~iLoop@unaffiliated/iloop) has joined #haskell
2013-09-10 13:12:18	quchen	quicksilver: Both decodeFloat and IntX are in the standard
2013-09-10 13:12:39	kuribas	decodeFloat is also in the standard?
2013-09-10 13:12:41	quchen	Yes.
2013-09-10 13:12:59	kuribas	So I can rely on it being portable?
2013-09-10 13:13:04	-->	tobyp (uid4@gateway/web/irccloud.com/x-powylrmzdwlgqtre) has joined #haskell
2013-09-10 13:13:19	quchen	It's part of the RealFloat typeclass, which is a standard typeclass mentioned in the report.
2013-09-10 13:14:11	kuribas	Ah, nice!
2013-09-10 13:14:29	quchen	Section 6.4.3 (in the PDF at least)
2013-09-10 13:15:40	-->	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 13:15:46	quicksilver	quchen: where is Int64?
2013-09-10 13:16:09	quchen	quicksilver: 8.4.2, foreign types
2013-09-10 13:16:12	quicksilver	ah
2013-09-10 13:16:13	quicksilver	http://www.haskell.org/onlinereport/haskell2010/haskellch18.html
2013-09-10 13:16:42	quchen	Or there.
2013-09-10 13:16:48	quchen	That's probably the better hit.
2013-09-10 13:16:55	b__	Anyone familiar with this error? ByteCodeLink.lookupCE During interactive linking, GHCi couldn't find the following symbol: Numuszm0zi1zi0zi0_NumusziTypes_zdfShowEntry_closure
2013-09-10 13:17:00	<--	ScriptDevil (~ashok@122.248.163.3) has quit (Changing host)
2013-09-10 13:17:00	-->	ScriptDevil (~ashok@unaffiliated/scriptdevil) has joined #haskell
2013-09-10 13:17:02	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 13:17:21	quchen	"All arithmetic is performed modulo 2ˆn, where n is the number of bits in the type." - So integer overflows are specified by the report? I thought it was undefined
2013-09-10 13:18:03	-->	tazjin (~tazjin@2a01:2b0:3041:3018:14d6:c0f3:85fa:af5d) has joined #haskell
2013-09-10 13:18:23	quicksilver	nope, the report specifies integer arithmetic much better than the C standard
2013-09-10 13:18:26	quicksilver	it's a positive feature
2013-09-10 13:18:35	quicksilver	what it famously doesn't specify is the exact size of Int
2013-09-10 13:19:23	quchen	quicksilver: But it gives a lower bound at least
2013-09-10 13:19:39	quchen	Namely ">= signed Int32"
2013-09-10 13:20:02	<--	agallagher (~textual@173.252.71.129) has quit (Quit: Computer has gone to sleep.)
2013-09-10 13:20:03	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-09-10 13:20:29	-->	gilbertw1 (~gilbertw1@192.241.174.128) has joined #haskell
2013-09-10 13:21:40	kuribas	That's probably for performance reasons?
2013-09-10 13:21:50	<--	csakatok_ (~csakatoku@em119-72-194-50.pool.e-mobile.ne.jp) has quit (Remote host closed the connection)
2013-09-10 13:22:05	int-e	quchen: hmm, really? I thought it was 30 bits. And it is, the minimal range of Int is -2^29 .. 2^29-1.
2013-09-10 13:22:30	quchen	int-e: Oh, right. Premature logarithm.
2013-09-10 13:22:49	quchen	What I tried avoiding to say was "A fixed-precision integer type with at least the range [-2ˆ29 .. 2ˆ29-1]."
2013-09-10 13:23:04	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 13:25:14	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 256 seconds)
2013-09-10 13:26:38	quicksilver	kuribas: they were prepared to assume that efficient 32 bit words existed but they didn't want to exclude implementations which used bit-tagging
2013-09-10 13:26:53	-->	RoXtein (~roxtein@di18.di.fct.unl.pt) has joined #haskell
2013-09-10 13:26:56	quicksilver	although none of the implementations that we have do use bit-tagging on integer words as far as I know
2013-09-10 13:28:23	int-e	did / does lazy ml use such tags?
2013-09-10 13:28:25	-->	hexagoxel (~hexagoxel@pc228186.wlan.uni-kiel.de) has joined #haskell
2013-09-10 13:30:26	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Read error: Operation timed out)
2013-09-10 13:31:09	<--	debo (~anonymous@108.175.233.153) has quit (Quit: debo)
2013-09-10 13:31:37	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 13:31:47	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-10 13:33:22	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 13:33:32	-->	b0oh (~Adium@93.185.184.116) has joined #haskell
2013-09-10 13:33:42	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 13:35:57	-->	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 13:36:19	<--	asante (~asante@unaffiliated/asante) has quit
2013-09-10 13:37:10	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-10 13:37:14	-->	LAMMJohnson (~ja@user-5af43ba9.broadband.tesco.net) has joined #haskell
2013-09-10 13:37:18	<--	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-10 13:37:29	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Max SendQ exceeded)
2013-09-10 13:38:03	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-10 13:38:21	<--	b0oh (~Adium@93.185.184.116) has left #haskell
2013-09-10 13:38:22	<--	dfan (~user@c-50-137-76-60.hsd1.ma.comcast.net) has quit (Client Quit)
2013-09-10 13:38:28	-->	asante (~asante@unaffiliated/asante) has joined #haskell
2013-09-10 13:39:15	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 13:39:30	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 13:41:20	-->	matthiasgoergens (~matthias@182.55.233.78) has joined #haskell
2013-09-10 13:41:58	-->	akegalj (~akegalj@93-138-245-37.adsl.net.t-com.hr) has joined #haskell
2013-09-10 13:42:02	-->	jbracker (~quassel@m-116.informatik.uni-kiel.de) has joined #haskell
2013-09-10 13:43:07	<--	hajimeho_ (~hajimehos@218.110.11.228) has quit (Remote host closed the connection)
2013-09-10 13:43:34	<--	matthiasgoergens (~matthias@182.55.233.78) has quit (Quit: Leaving.)
2013-09-10 13:44:10	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-09-10 13:45:05	-->	CaptainK (~CaptainK@181.178.230.86) has joined #haskell
2013-09-10 13:45:28	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-10 13:46:02	<--	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-09-10 13:46:03	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-10 13:46:07	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-10 13:46:14	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 13:46:30	<--	zbcm (~zbcm@147.69.182.184) has quit (Ping timeout: 276 seconds)
2013-09-10 13:46:57	<--	bergey (~user@ip-66-80-90-109.iad.megapath.net) has quit (Remote host closed the connection)
2013-09-10 13:47:00	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-10 13:47:36	-->	ccapndave (~ccapndave@157-113.1-85.cust.bluewin.ch) has joined #haskell
2013-09-10 13:47:56	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-10 13:48:01	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-10 13:48:34	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-10 13:48:36	-->	CapitanK (~CaptainK@181.179.77.239) has joined #haskell
2013-09-10 13:48:42	<--	CaptainK (~CaptainK@181.178.230.86) has quit (Read error: Connection reset by peer)
2013-09-10 13:49:23	<--	kayloos_ (~kayloos@shop3.diku.dk) has quit (Remote host closed the connection)
2013-09-10 13:49:33	-->	igstan (~igstan@5-12-82-133.residential.rdsnet.ro) has joined #haskell
2013-09-10 13:49:59	<--	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has quit (Remote host closed the connection)
2013-09-10 13:50:00	gbonobb	nh2, still here?
2013-09-10 13:50:03	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-10 13:50:04	gbonobb	:)
2013-09-10 13:50:07	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 13:50:07	ccapndave	Hey all - sorry for noob questions, but am trying to get my head properly around recursion at last.  This super-simple minimum function I made at https://gist.github.com/ccapndave/6508299 is different to the examples at http://stackoverflow.com/questions/13792477/recursion-haskell-minimum-value-function but I can't figure out what's wrong with it
2013-09-10 13:50:15	ccapndave	(if indeed anything is wrong with it)
2013-09-10 13:50:21	nh2	gbonobb: yes
2013-09-10 13:50:32	gbonobb	awesome
2013-09-10 13:50:38	gbonobb	any ideas on how to get it working
2013-09-10 13:50:46	nh2	gbonobb: I pushed a change
2013-09-10 13:50:51	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-10 13:50:52	nh2	to use ; for windows
2013-09-10 13:50:57	nh2	maybe you can try that
2013-09-10 13:51:11	gbonobb	how exactly
2013-09-10 13:51:18	gbonobb	you mean set the path
2013-09-10 13:51:46	nh2	gbonobb: no I mean I updated sublimehaskell
2013-09-10 13:52:15	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-09-10 13:52:29	nh2	and you how have to install the new version
2013-09-10 13:52:31	<--	CapitanK (~CaptainK@181.179.77.239) has quit (Read error: Connection reset by peer)
2013-09-10 13:52:31	gbonobb	ahh cool
2013-09-10 13:52:40	gbonobb	so i can download the zip file
2013-09-10 13:52:41	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-10 13:52:41	nh2	I am not sure how/when sublime updates things
2013-09-10 13:52:49	nh2	you can git clone it
2013-09-10 13:52:54	gbonobb	i will manually drop in in packages
2013-09-10 13:53:00	gbonobb	or git clone it yes
2013-09-10 13:53:08	nh2	git clone will be better in case we change more
2013-09-10 13:53:13	gbonobb	so then should i just set the path or
2013-09-10 13:53:17	gbonobb	ok cool
2013-09-10 13:53:39	bergmark	ccapndave: it seems ok, are you sure there's something wrong with it?
2013-09-10 13:53:53	ccapndave	bergmark Not at all, just that it was different to the ones on that page
2013-09-10 13:53:58	gbonobb	i am using sublime 2 by the way
2013-09-10 13:53:59	ccapndave	bergmark Maybe its ok
2013-09-10 13:54:20	nh2	gbonobb: yep I'm using that as well
2013-09-10 13:54:26	ccapndave	bergmark Do you (or anyone) happen to know of an online set of recursion exercises I can work through to train my skills?
2013-09-10 13:54:35	bergmark	ccapndave: 99 haskell problems
2013-09-10 13:54:43	bergmark	@where 99 haskell
2013-09-10 13:54:43	lambdabot	I know nothing about 99.
2013-09-10 13:54:48	bergmark	ep
2013-09-10 13:54:52	-->	CapitanK (~CaptainK@181.179.75.5) has joined #haskell
2013-09-10 13:54:57	bergmark	http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems
2013-09-10 13:54:58	gbonobb	haha cool so i will just do a git clone in the packages folder
2013-09-10 13:55:02	<--	talzeus (~studybot_@101.110.31.120) has quit (Remote host closed the connection)
2013-09-10 13:55:02	-->	Peaker (~eyal@bzq-79-181-179-236.red.bezeqint.net) has joined #haskell
2013-09-10 13:55:07	ccapndave	Cool
2013-09-10 13:55:08	ccapndave	Thanks
2013-09-10 13:55:58	bergmark	ccapndave: only issue i see with your findMin is that you call findMin xs twice so it could be more efficient
2013-09-10 13:56:28	ccapndave	bergmark Ah right.  I need to use 'where' to assign it, right?
2013-09-10 13:57:55	<--	artyomkazak (~artyomkaz@94.25.228.59) has quit (Ping timeout: 245 seconds)
2013-09-10 13:58:37	gbonobb	ok cloned
2013-09-10 13:58:46	gbonobb	and just restarted st2
2013-09-10 13:58:55	gbonobb	loading modules
2013-09-10 13:59:15	<--	codesoup (~codesoup@108.175.233.21) has quit (Ping timeout: 260 seconds)
2013-09-10 13:59:36	bergmark	ccapndave: right
2013-09-10 13:59:55	<--	ScriptDevil (~ashok@unaffiliated/scriptdevil) has quit (Quit: leaving)
2013-09-10 14:00:31	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 14:00:34	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-10 14:00:54	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-10 14:01:29	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-09-10 14:02:31	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-10 14:02:32	<--	xinming (~xinming@125.82.194.215) has quit (Ping timeout: 245 seconds)
2013-09-10 14:03:26	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-10 14:03:29	-->	xinming (~xinming@125.82.194.215) has joined #haskell
2013-09-10 14:03:39	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 14:04:02	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-10 14:04:23	--	jlamothe_ is now known as jlamothe
2013-09-10 14:04:39	gbonobb	nh2: Ok now it works much better, i opened an hs file and linting and build occured
2013-09-10 14:04:39	petapetapeta	I am using Alex to lex some text. When it fails lexing I want it to fail gracefully, but right now it simply crashes with the message "Lexical error". How can I prevent this?
2013-09-10 14:05:04	gbonobb	however if i open my cabal progrect it still seems to build forever
2013-09-10 14:05:10	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-10 14:05:18	nh2	gbonobb: depending on the cabal project, it might take a while
2013-09-10 14:05:30	nh2	how long does it take if you go there in the terminal and do cabal build?
2013-09-10 14:05:44	gbonobb	pretty quick
2013-09-10 14:05:46	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-10 14:05:51	gbonobb	is a simple hello project
2013-09-10 14:05:58	nh2	hmm sounds weird
2013-09-10 14:06:03	gbonobb	1 sec
2013-09-10 14:06:08	gbonobb	maybe i can make a new one
2013-09-10 14:06:13	nh2	if you look in the settings, there is an option for what it does exactly
2013-09-10 14:06:24	nh2	default is "first build then warnings"
2013-09-10 14:06:31	gbonobb	yes
2013-09-10 14:06:32	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-10 14:06:33	nh2	maybe you can change it to build only
2013-09-10 14:06:37	nh2	and see if that is faster
2013-09-10 14:06:41	nh2	that should only do cabal build
2013-09-10 14:06:41	-->	codesoup (~codesoup@108.175.233.21) has joined #haskell
2013-09-10 14:06:51	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-09-10 14:06:58	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Ping timeout: 268 seconds)
2013-09-10 14:07:04	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-10 14:07:07	nh2	you could also do Ctrl-Backtick to open the sublime terminal and look if you get any error messages
2013-09-10 14:07:41	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 14:07:43	nh2	if you find any, you could post them as an issue on the sublimehaskell github
2013-09-10 14:08:07	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-10 14:08:07	gbonobb	ok cool
2013-09-10 14:08:15	gbonobb	thanks for your help, really appreciated
2013-09-10 14:08:48	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-10 14:08:56	-->	shahn (~shahn@f052149087.adsl.alicedsl.de) has joined #haskell
2013-09-10 14:08:56	nh2	welcome! I'll go home now, post errors if you encounter any :)
2013-09-10 14:09:09	gbonobb	Will do, thanks man!
2013-09-10 14:09:45	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-10 14:09:47	<--	nh2 (~niklas@r002213.203112.miinet.jp) has quit (Quit: Leaving.)
2013-09-10 14:10:05	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-10 14:10:11	<--	CapitanK (~CaptainK@181.179.75.5) has quit (Read error: Connection reset by peer)
2013-09-10 14:10:11	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 14:10:24	<--	normanrichards (~normanric@70.114.215.220) has quit (Client Quit)
2013-09-10 14:11:36	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-10 14:11:40	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-10 14:13:16	<--	igstan (~igstan@5-12-82-133.residential.rdsnet.ro) has quit (Quit: igstan)
2013-09-10 14:13:27	<--	Peaker (~eyal@bzq-79-181-179-236.red.bezeqint.net) has quit (Ping timeout: 264 seconds)
2013-09-10 14:13:31	<--	gbonobb (d96f44b2@gateway/web/freenode/ip.217.111.68.178) has quit (Quit: Page closed)
2013-09-10 14:13:44	-->	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has joined #haskell
2013-09-10 14:14:03	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-10 14:14:05	<--	zielwasserjunki (~zwj@host-188-174-242-168.customer.m-online.net) has quit (Client Quit)
2013-09-10 14:14:24	<--	wollw_ (davidshere@unaffiliated/wollw) has quit (Quit: leaving)
2013-09-10 14:14:31	-->	flebron_ (~flebron@gw.dc.uba.ar) has joined #haskell
2013-09-10 14:14:38	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 14:14:38	<--	wollw (davidshere@unaffiliated/wollw) has quit (Client Quit)
2013-09-10 14:14:52	<--	LAMMJohnson (~ja@user-5af43ba9.broadband.tesco.net) has quit (Read error: Operation timed out)
2013-09-10 14:15:04	flebron_	Hi. Constructors (say Just) are functions, right?
2013-09-10 14:15:13	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 14:15:20	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-09-10 14:15:22	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:3ccb:a38a:8c18:c05c:837c) has joined #haskell
2013-09-10 14:15:31	<--	wollw (davidshere@unaffiliated/wollw) has quit (Client Quit)
2013-09-10 14:15:41	m3ga	:t Just
2013-09-10 14:15:42	lambdabot	a -> Maybe a
2013-09-10 14:15:46	ocharles	flebron_: right
2013-09-10 14:15:48	flebron_	Yeah I know the :t.
2013-09-10 14:15:51	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 14:16:04	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Ping timeout: 264 seconds)
2013-09-10 14:17:31	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 245 seconds)
2013-09-10 14:18:07	-->	LAMMJohnson (~ja@user-5af43cf5.broadband.tesco.net) has joined #haskell
2013-09-10 14:18:09	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 14:18:16	shiona	Say I happen to want to code golf. How would I read in data in as succinctly as possible?
2013-09-10 14:18:33	shiona	Like an input row of some floats and a char
2013-09-10 14:18:42	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-10 14:18:52	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 14:19:00	<--	codesoup (~codesoup@108.175.233.21) has quit (Ping timeout: 276 seconds)
2013-09-10 14:19:21	<--	wollw (davidshere@unaffiliated/wollw) has quit (Client Quit)
2013-09-10 14:19:46	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-09-10 14:20:41	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-10 14:20:47	Yuu-chan	shiona: Lazy IO?
2013-09-10 14:21:09	<--	xl1 (~xl@221.218.220.127) has quit (Ping timeout: 268 seconds)
2013-09-10 14:21:21	shiona	Yuu-chan: any good text on those?
2013-09-10 14:21:28	shiona	..or that
2013-09-10 14:21:42	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-10 14:21:44	<--	carlosgaldino (~carlosgal@177.32.75.176) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 14:22:01	donri	flebron_: they're not *only* functions, though. can't pattern match on functions for one.
2013-09-10 14:22:33	akegalj	how to use uncurryN from tuple package? Do i need to turn some extensions on?
2013-09-10 14:22:34	donri	flebron_: and you can't write a function as a constructor (ie. with an upper case)
2013-09-10 14:22:45	donri	flebron_: but yeah, you can use them as functions
2013-09-10 14:23:23	Yuu-chan	shiona: sorry, but I didn't understand the task right. I imagine of something like map (read :: String -> Float) . words <$> getContents to parse a (possibly) infinite stream of serialized numbers.
2013-09-10 14:23:39	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 264 seconds)
2013-09-10 14:23:43	donri	akegalj: looks like it's just type magic
2013-09-10 14:24:03	<--	ccapndave (~ccapndave@157-113.1-85.cust.bluewin.ch) has quit (Ping timeout: 240 seconds)
2013-09-10 14:24:47	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 14:25:01	shiona	Yuu-chan: hmm, I'm not sure what I'm really after myself
2013-09-10 14:25:08	donri	akegalj: ie. just use it like "uncurry"
2013-09-10 14:25:20	<--	mbuf (user@nat/redhat/x-pvtztkgyunzvusjo) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 14:25:21	shiona	I guess I'd better leave this for a later time
2013-09-10 14:25:39	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 14:25:58	-->	ptek (~textual@217.64.164.1) has joined #haskell
2013-09-10 14:26:05	akegalj	donri: hm, ok i'll try again. GHC was not happy when i tryed using it like uncurry
2013-09-10 14:26:13	<--	shahn (~shahn@f052149087.adsl.alicedsl.de) has quit (Quit: Konversation terminated!)
2013-09-10 14:26:14	-->	codesoup (~codesoup@76-10-180-23.dsl.teksavvy.com) has joined #haskell
2013-09-10 14:26:23	donri	@lpaste the code and error, akegalj
2013-09-10 14:26:23	lambdabot	Haskell pastebin: http://lpaste.net/
2013-09-10 14:26:41	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-10 14:26:50	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 14:27:57	-->	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-10 14:28:02	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 14:28:50	akegalj	donri: http://lpaste.net/92822
2013-09-10 14:29:29	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-10 14:29:59	flebron_	donri: Yeah, I'm aware, it was a theory qustion :)
2013-09-10 14:30:04	Yuu-chan	shiona: how that Pong would look?
2013-09-10 14:30:20	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-10 14:30:28	shiona	?
2013-09-10 14:30:30	-->	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 14:30:37	-->	thealanwattsriot (~brianchen@216.30.179.54) has joined #haskell
2013-09-10 14:31:23	Yuu-chan	Oops :-[ I mean golf.
2013-09-10 14:31:33	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-10 14:32:06	Yuu-chan	Mixed things with my friend who tries to write Pong.
2013-09-10 14:32:07	-->	artyomkazak (~artyomkaz@host-41-157-66-217.spbmts.ru) has joined #haskell
2013-09-10 14:32:17	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Client Quit)
2013-09-10 14:32:40	shiona	code golf is a term meaning 'the art of writing short, working programs'
2013-09-10 14:32:43	donri	akegalj: the Num constraint is ambiguous, you need to give it a type signature or more type information
2013-09-10 14:32:48	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Read error: Connection reset by peer)
2013-09-10 14:32:52	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-10 14:32:55	-->	thealanwattsriot (~brianchen@216.30.179.54) has joined #haskell
2013-09-10 14:32:56	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 14:33:04	donri	akegalj: for example this works: uncurryN (+) (1,2) :: Int
2013-09-10 14:33:04	shiona	usually extremely unreadable and hacky, but working code
2013-09-10 14:33:06	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-10 14:33:25	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-10 14:34:12	akegalj	donri: oh, thank you very much!
2013-09-10 14:34:55	Yuu-chan	One could consider whole Haskell a golf...
2013-09-10 14:35:03	donri	akegalj: that Curry class would work better with an added inverse fundep, i think
2013-09-10 14:35:21	-->	visof__ (~visof@197.161.65.28) has joined #haskell
2013-09-10 14:35:30	akegalj	donri: don't know what that is :/
2013-09-10 14:35:40	akegalj	donri: i am haskell beginer
2013-09-10 14:35:43	donri	akegalj: class Curry a b | a -> b, b -> a
2013-09-10 14:35:53	akegalj	donri: ah, ok
2013-09-10 14:35:54	-->	dfan (~user@vpn.harmonixmusic.com) has joined #haskell
2013-09-10 14:35:57	donri	but lennart is smarter than me so i might be missing something
2013-09-10 14:36:06	mjboa	Hi guys, if anyone has some extra time i just uploaded a tiny project i made, a redis clone. http://github.com/michaelbeaumont/hatic
2013-09-10 14:36:15	-->	malkomalko (~malkomalk@66-234-38-99.nyc.cable.nyct.net) has joined #haskell
2013-09-10 14:36:18	mjboa	would be awesome to get general comments on it
2013-09-10 14:36:31	mjboa	style, tips, ideas for a beginner
2013-09-10 14:36:51	<--	nexx (~nexx@unaffiliated/xxen) has quit (Ping timeout: 264 seconds)
2013-09-10 14:37:31	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 14:37:55	<--	visof_ (~visof@197.246.1.40) has quit (Ping timeout: 245 seconds)
2013-09-10 14:37:59	-->	LAMMJohn1on (~ja@user-5af43dec.broadband.tesco.net) has joined #haskell
2013-09-10 14:38:29	donri	akegalj: yeah nevermind i tried it and ghc goes mad
2013-09-10 14:38:44	udoprog	mjboa: spend more time writing a comprehensive README, it will catch peoples attention. Use another popular project's README as a starting point for how to structure it
2013-09-10 14:38:54	akegalj	donri: can you also explain me what is the "| a -> b" part in class definition?
2013-09-10 14:39:04	merijn	akegalj: It's a functional dependency
2013-09-10 14:39:07	donri	akegalj: that's the fundep, aka. functional dependency
2013-09-10 14:39:27	akegalj	merijn, donri: oh, ok.. il do reading now
2013-09-10 14:39:35	donri	akegalj: it says that for any 'a' there can only be one 'b'
2013-09-10 14:40:27	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 14:40:50	<--	LAMMJohnson (~ja@user-5af43cf5.broadband.tesco.net) has quit (Ping timeout: 245 seconds)
2013-09-10 14:41:16	akegalj	donri: ah ok :)
2013-09-10 14:41:26	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-10 14:41:33	-->	LAMMJohnson (~ja@user-5af43e11.broadband.tesco.net) has joined #haskell
2013-09-10 14:42:00	<--	pygospa (~Pygosceli@kiel-d9bfdc9e.pool.mediaWays.net) has quit (Disconnected by services)
2013-09-10 14:42:11	-->	pygospa (~Pygosceli@kiel-d9bfc688.pool.mediaWays.net) has joined #haskell
2013-09-10 14:42:23	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-10 14:42:32	donri	akegalj: oh i know why my extra fundep doesn't work: a -> b ~ a -> a' -> b'
2013-09-10 14:42:56	mjboa	udoprog: good idea, that's literally all it can do though. i just wrote it as an exercise. was looking for a sort of quick code review i guess.
2013-09-10 14:43:03	<--	LAMMJohn1on (~ja@user-5af43dec.broadband.tesco.net) has quit (Ping timeout: 276 seconds)
2013-09-10 14:43:04	donri	because b can be a' -> b'
2013-09-10 14:43:27	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 14:43:38	merijn	mjboa: The haskell reddit is also a good place to ask for critiques
2013-09-10 14:43:56	<--	b_ (~b@185.6.205.4) has quit (Read error: Connection reset by peer)
2013-09-10 14:43:58	<--	b__ (~basdirks@185.6.205.4) has quit (Read error: No route to host)
2013-09-10 14:44:23	donri	mjboa: needs moar acid-state ;)
2013-09-10 14:44:41	akegalj	donri: yeah, i understand
2013-09-10 14:45:03	-->	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 14:46:15	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Ping timeout: 245 seconds)
2013-09-10 14:46:34	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 14:46:35	-->	Peaker (~eyal@bzq-109-65-221-78.red.bezeqint.net) has joined #haskell
2013-09-10 14:46:42	<--	ashnur (~ashnur@79.117.76.15) has quit (Quit: WeeChat 0.4.1)
2013-09-10 14:47:28	<--	Redz (~red@82.113.106.145) has quit (Quit: Leaving.)
2013-09-10 14:47:28	mjboa	donri: yeah i realize it's been done and better with acid-state but i was writing to learn more than anything else
2013-09-10 14:47:34	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-10 14:48:09	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-09-10 14:48:10	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 14:48:15	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-10 14:48:16	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 14:48:17	donri	mjboa: oh i meant you could implement it using acid-state. acid-state alone isn't a redis clone.
2013-09-10 14:48:28	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 14:49:37	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-10 14:49:42	mjboa	donri: oh ok
2013-09-10 14:49:43	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-10 14:50:22	<--	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has quit (Quit: WeeChat 0.4.0)
2013-09-10 14:50:22	-->	matthiasgoergens (~matthias@182.55.233.78) has joined #haskell
2013-09-10 14:50:32	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-10 14:50:51	<--	codesoup (~codesoup@76-10-180-23.dsl.teksavvy.com) has quit (Ping timeout: 276 seconds)
2013-09-10 14:51:18	-->	akegalj_ (~akegalj@93-138-64-112.adsl.net.t-com.hr) has joined #haskell
2013-09-10 14:51:22	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-10 14:51:32	-->	Gentlecat (~Roman@79.105.226.165) has joined #haskell
2013-09-10 14:51:48	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 14:52:15	-->	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has joined #haskell
2013-09-10 14:52:41	-->	udoprog (~udoprog@h-36-21.a254.priv.bahnhof.se) has joined #haskell
2013-09-10 14:53:35	-->	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has joined #haskell
2013-09-10 14:53:58	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 14:54:02	-->	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has joined #haskell
2013-09-10 14:54:15	<--	akegalj (~akegalj@93-138-245-37.adsl.net.t-com.hr) has quit (Ping timeout: 240 seconds)
2013-09-10 14:55:25	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 245 seconds)
2013-09-10 14:55:26	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:3ccb:a38a:8c18:c05c:837c) has quit (Quit: Bye)
2013-09-10 14:55:33	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:3ccb:a38a:8c18:c05c:837c) has joined #haskell
2013-09-10 14:56:19	-->	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has joined #haskell
2013-09-10 14:57:02	<--	Peaker (~eyal@bzq-109-65-221-78.red.bezeqint.net) has quit (Ping timeout: 240 seconds)
2013-09-10 14:57:09	-->	talzeus__ (~studybot_@113.37.230.101) has joined #haskell
2013-09-10 14:58:11	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 14:59:08	AfC	Hey, cool, a new acid-state version mere hours ago
2013-09-10 14:59:48	matthiasgoergens	Which is the current lens library of choice?
2013-09-10 14:59:54	donri	AfC: the main new thing i think is you can createArchive on a remote state
2013-09-10 15:00:10	donri	matthiasgoergens: "lens"
2013-09-10 15:00:14	matthiasgoergens	Ok, I'l try that.
2013-09-10 15:01:00	<--	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has quit (Ping timeout: 256 seconds)
2013-09-10 15:01:08	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-10 15:01:28	merijn	Isn't the answer to "what is the current X library of choice?" always "lens" :p
2013-09-10 15:01:47	donri	merijn: "lens"
2013-09-10 15:01:52	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:3ccb:a38a:8c18:c05c:837c) has quit (Quit: Bye)
2013-09-10 15:01:58	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Client Quit)
2013-09-10 15:02:00	donri	(ie. it's the answer to *any* question)
2013-09-10 15:02:14	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:56e2:bcff:22fa:d6b3:79c) has joined #haskell
2013-09-10 15:02:18	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 15:02:30	matthiasgoergens	I am working on something similar to regex-applicative.
2013-09-10 15:02:36	-->	shreesh (~shreesh@209.104.235.1) has joined #haskell
2013-09-10 15:02:41	matthiasgoergens	But one that gives you all matches (and of course with no backtracking).
2013-09-10 15:02:43	<--	osa1_ (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 256 seconds)
2013-09-10 15:03:04	matthiasgoergens	Or rather, not no backtracking, but in at most linear time per match.
2013-09-10 15:03:33	-->	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-10 15:03:41	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-09-10 15:04:28	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-10 15:04:44	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 15:05:11	<--	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-10 15:05:20	-->	SpyrosTrigazis (~spyrostri@2001:648:2320:61:68a5:baad:fbf2:2807) has joined #haskell
2013-09-10 15:05:48	-->	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 15:06:50	-->	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has joined #haskell
2013-09-10 15:06:58	matthiasgoergens	I have a design, but I am scratching my head on how to fit it into types.
2013-09-10 15:07:32	<--	SpyrosTr_ (~spyrostri@conf-210.admin.grnet.gr) has quit (Ping timeout: 253 seconds)
2013-09-10 15:07:54	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 15:08:34	-->	LAMMJohn1on (~ja@user-5af43ee2.broadband.tesco.net) has joined #haskell
2013-09-10 15:09:28	<--	LAMMJohnson (~ja@user-5af43e11.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 15:09:29	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has left #haskell
2013-09-10 15:09:29	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 15:10:11	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 246 seconds)
2013-09-10 15:11:44	<--	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-09-10 15:11:52	<--	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (Read error: Connection reset by peer)
2013-09-10 15:12:09	Lethalman	is haskellwiki down?
2013-09-10 15:12:14	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-09-10 15:12:19	Lethalman	the whole haskell.org seems to be
2013-09-10 15:12:51	artyomkazak	I think it went down more than half an hour ago
2013-09-10 15:13:08	-->	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has joined #haskell
2013-09-10 15:13:28	<--	LAMMJohn1on (~ja@user-5af43ee2.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-10 15:13:38	-->	LAMMJohnson (~ja@user-5af43ef4.broadband.tesco.net) has joined #haskell
2013-09-10 15:15:01	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-10 15:15:28	-->	dzorin (~guest@174.36.234.43-static.reverse.softlayer.com) has joined #haskell
2013-09-10 15:15:55	-->	aergus (~aergus@81.214.102.169) has joined #haskell
2013-09-10 15:16:33	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-09-10 15:16:47	--	GaelanAintAround is now known as Gaelan
2013-09-10 15:17:14	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-10 15:17:30	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 276 seconds)
2013-09-10 15:17:32	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-10 15:18:23	lurkorg	Hi all, I'm trying to get keypresses from SDL, but when I try to print out a character nothing gets printed, not even a blank space. http://lpaste.net/92823
2013-09-10 15:18:52	--	gpampara is now known as gpampara_off
2013-09-10 15:19:04	--	Gaelan is now known as GaelanAintAround
2013-09-10 15:19:27	-->	anakreon (~user@petitesrousses.imag.fr) has joined #haskell
2013-09-10 15:19:31	-->	denver (~denver@adsl-ull-31-178.50-151.net24.it) has joined #haskell
2013-09-10 15:19:57	-->	Croms (~dv@wcw-eduroam-42-90.wireless.uva.nl) has joined #haskell
2013-09-10 15:20:29	--	lurkorg is now known as yaxu
2013-09-10 15:22:25	-->	hsyl20 (~shenry@193.50.110.138) has joined #haskell
2013-09-10 15:22:45	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-10 15:23:30	<--	dwins (~dwins@c-98-218-148-100.hsd1.va.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 15:23:49	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 15:24:19	-->	LAMMJohn1on (~ja@user-5af43f83.broadband.tesco.net) has joined #haskell
2013-09-10 15:25:24	<--	LAMMJohn1on (~ja@user-5af43f83.broadband.tesco.net) has quit (Client Quit)
2013-09-10 15:25:39	-->	gnoel (1000@cpe-69-201-134-63.nyc.res.rr.com) has joined #haskell
2013-09-10 15:26:17	-->	vpetro (~textual@24.114.29.46) has joined #haskell
2013-09-10 15:26:31	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 15:26:37	<--	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (Ping timeout: 250 seconds)
2013-09-10 15:26:39	<--	LAMMJohnson (~ja@user-5af43ef4.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 15:27:05	-->	iswilson (~ian@192-0-175-9.cpe.teksavvy.com) has joined #haskell
2013-09-10 15:27:08	<--	Palmik (~palmik@120-49-80-78.tmcz.cz) has quit (Quit: Lost terminal)
2013-09-10 15:27:26	-->	AnalogFile_ (974208af@gateway/web/freenode/ip.151.66.8.175) has joined #haskell
2013-09-10 15:29:51	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (Remote host closed the connection)
2013-09-10 15:30:01	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-10 15:30:06	-->	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has joined #haskell
2013-09-10 15:30:57	sopvop	so, haskell.org is down?
2013-09-10 15:31:22	sclv_	yes it is
2013-09-10 15:31:28	sclv_	we sent a reboot request to the host.
2013-09-10 15:31:42	sclv_	so hopefully it'll be back shortly, though it may have to fsck
2013-09-10 15:31:48	sopvop	you should set update topic :)
2013-09-10 15:31:50	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-09-10 15:31:57	sclv_	we'll update the channel plus reddit as things progress
2013-09-10 15:32:05	sclv_	if an op is around they can do so
2013-09-10 15:32:20	sopvop	so, any mirrors for ghc-7.6.3?
2013-09-10 15:32:29	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-10 15:32:35	<--	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-09-10 15:33:03	ski	@help unshift-topic
2013-09-10 15:33:04	lambdabot	Add a new topic item to the front of the topic list
2013-09-10 15:33:07	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 15:33:28	-->	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has joined #haskell
2013-09-10 15:33:49	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-10 15:33:56	luite	sclv_: it's a hetzner server, right?
2013-09-10 15:34:11	<--	Lefeni (~Lefeni@c-0941e555.143-16-64736c10.cust.bredbandsbolaget.se) has quit (Quit: Leaving)
2013-09-10 15:34:24	sclv_	luite: yah
2013-09-10 15:34:29	<--	chrisyoung (~user@nyc.schrodinger.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-10 15:35:30	-->	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-10 15:35:37	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-10 15:35:40	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-10 15:35:51	-->	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-09-10 15:36:21	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-10 15:36:21	<--	RoXtein (~roxtein@di18.di.fct.unl.pt) has quit (Ping timeout: 276 seconds)
2013-09-10 15:36:31	luite	sclv_: ah i had some problem where they wouldn't come back up unless i sent them ctrl+alt+del, with nothing about fsck in the log (standard ubuntu 12.04 loaded from their rescue system installer). have you seen something similar?
2013-09-10 15:36:43	-->	Peaker (~eyal@bzq-218-132-196.cablep.bezeqint.net) has joined #haskell
2013-09-10 15:37:44	sclv_	luite: i'm not doing that portion myself, you can check in on #haskell-infrastructure if you have any ideas/suggestions/etc
2013-09-10 15:38:16	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Client Quit)
2013-09-10 15:38:35	<--	Paprikachu (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 15:38:47	luite	oh ok, nah i don't have suggestions, was just wondering if you had solved it already, sending ctrl+alt+del doesn't feel like a proper solution :)
2013-09-10 15:39:16	-->	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 15:39:17	-->	b_ (~b@185.6.205.4) has joined #haskell
2013-09-10 15:40:06	<--	nh2 (~niklas@122x216x87x221.ap122.ftth.ucom.ne.jp) has quit (Ping timeout: 256 seconds)
2013-09-10 15:40:11	sclv_	we sent a hardware reset request but haven't seen an effect yet, also don't know why it happened, so we'll see...
2013-09-10 15:40:33	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Remote host closed the connection)
2013-09-10 15:41:06	kaw	What's the state of Haskell on larger "embedded" devices? Is it easy to cross-compile to ARM, and how much memory would a small program need to run effectively?
2013-09-10 15:41:12	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-09-10 15:41:15	<--	Peaker (~eyal@bzq-218-132-196.cablep.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-09-10 15:41:24	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 15:41:45	quchen	kaw: I run Haskell on my Raspi, the compiler comes in a Raspbian package.
2013-09-10 15:42:14	Earnestea	Would you consider the rpi to be "embedded"?
2013-09-10 15:42:27	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-10 15:42:29	kaw	With the scare quotes, certainly
2013-09-10 15:42:35	quchen	Depends on whether you use it to embed it.
2013-09-10 15:43:07	kaw	I read reports on Google that ghc would crash with out-of-memory errors on RPi when installing more complex stuff
2013-09-10 15:43:22	<--	yopikh (~mand@79.175.167.200) has quit (Quit: Lost terminal)
2013-09-10 15:43:35	Earnestea	Oh, I really thought you meant embedded programming and I was curious, nevermind :p
2013-09-10 15:43:50	kaw	On the other hand the programs I'm thinking of wouldn't be nearly as complex as ghc, so that might not be a problem
2013-09-10 15:43:53	quchen	I haven't compiled "more complex stuff" on it yet.
2013-09-10 15:44:22	quchen	Compiling GHC on Raspi is not very easy I imagine. Someone said the build fails after a day or so. :-)
2013-09-10 15:44:24	kaw	Earnestea: Well, there's really no hope of getting ghc-based Haskell stuff to run on anything truly tiny, is there?
2013-09-10 15:44:28	-->	endojelly (~anyfoo@zomgie.de) has joined #haskell
2013-09-10 15:44:29	-->	Paprikac_ (~Paprikach@80.120.175.113) has joined #haskell
2013-09-10 15:44:46	Earnestea	kaw: I guess not; that's why it perked my curiosity see heh
2013-09-10 15:44:48	quchen	Wasn't there a post of Haskell running on a 32kb ram machine?
2013-09-10 15:45:13	<--	Paprikac_ (~Paprikach@80.120.175.113) has quit (Remote host closed the connection)
2013-09-10 15:45:39	<--	fizruk (~fizruk@109.74.138.26) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-10 15:45:39	quchen	(Not GHC though)
2013-09-10 15:46:04	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Ping timeout: 264 seconds)
2013-09-10 15:46:17	merijn	kaw: Well, I wouldn't say "no hope", but it would require a significant amount of engineering work and building the compiler on the embedded platform is unlikely
2013-09-10 15:46:35	-->	cppcabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 15:46:37	kaw	quchen: That sounds theoretically interesting, but surely it must've been missing some major functionality? I assume there are good reasons ghc is not 32 KiB
2013-09-10 15:46:39	merijn	kaw: Building a specialised runtime for embedded is certaintly not unthinkable, but it's hard to see what the point would be
2013-09-10 15:46:57	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 15:46:58	quchen	kaw: http://www.youtube.com/watch?v=fOsjEfNmTkY
2013-09-10 15:46:59	merijn	kaw: Well, there's no reason why the compiler has to run on the platform running the code
2013-09-10 15:47:02	<--	jbracker (~quassel@m-116.informatik.uni-kiel.de) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2013-09-10 15:47:14	merijn	kaw: Most small embedded environments can't run a C compiler either
2013-09-10 15:47:17	-->	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has joined #haskell
2013-09-10 15:47:24	<--	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has quit (Ping timeout: 276 seconds)
2013-09-10 15:47:28	kaw	merijn: Right, my question wasn't about running the compiler, it was about running the compiled programs
2013-09-10 15:47:39	kaw	People mentioned the compiler as an example of a program
2013-09-10 15:48:17	merijn	kaw: Anyway, as I said, I don't see a conceptual problem, but you'd need to invest a lot of time in building a different runtime and potentially a different GC approach
2013-09-10 15:48:37	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-10 15:48:54	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-09-10 15:48:58	-->	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-10 15:49:04	kaw	Right
2013-09-10 15:49:05	--	cruxeter1us is now known as cruxeternus
2013-09-10 15:49:06	sopvop	yay! found mirror! http://www.vislab.uq.edu.au/ag3/distfiles/ghc-7.6.3-x86_64-unknown-linux.tar.bz2
2013-09-10 15:49:21	kaw	But say I have some tens of megabytes of memory, rather than 30 kilobytes?
2013-09-10 15:49:29	quchen	sopvop: Worst comes to worst you can clone from github and build it yourself
2013-09-10 15:49:32	merijn	sopvop: I think johnw is hosting ghc binaries too, but that may just be HEAD
2013-09-10 15:49:39	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-10 15:49:41	<--	kobain (~kobian@unaffiliated/kobain) has quit (Excess Flood)
2013-09-10 15:49:57	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-10 15:49:58	-->	uvelichitel (~uvelichit@37.73.201.51) has joined #haskell
2013-09-10 15:49:59	merijn	kaw: Even then, the runtime system is quite big and complicated
2013-09-10 15:50:06	sopvop	quchen I'm on a completely fresh system. with wiped /home.
2013-09-10 15:50:27	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-10 15:50:44	kaw	merijn: Right, I guess that's what I feared
2013-09-10 15:50:48	--	Mortomes is now known as Heisenmort
2013-09-10 15:50:55	merijn	kaw: There are minimal runtimes, though
2013-09-10 15:51:04	-->	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has joined #haskell
2013-09-10 15:51:05	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 241 seconds)
2013-09-10 15:51:18	-->	RoXtein (~roxtein@di18.di.fct.unl.pt) has joined #haskell
2013-09-10 15:51:27	merijn	kaw: House is runtime for running haskell without OS (i.e. barebones) and there' HaLVM that lets you run code directly in Xen
2013-09-10 15:51:30	-->	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-10 15:51:33	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-10 15:51:42	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-09-10 15:51:43	<--	yaxu (~alex@145.255.244.150) has quit (Quit: Leaving.)
2013-09-10 15:51:57	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-10 15:52:52	kaw	merijn: Oh, okay? Sounds interesting.. would it still be possible to run libraries not specifically tailored for those runtimes on those?
2013-09-10 15:53:10	merijn	kaw: I'm not entirely up-to-date on what is/isn't possible there
2013-09-10 15:53:13	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-10 15:53:19	<--	obcode_ (~obcode@ob.cs.hm.edu) has quit (Quit: leaving)
2013-09-10 15:53:36	-->	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has joined #haskell
2013-09-10 15:54:02	-->	kizzx2 (~Adium@223.19.229.251) has joined #haskell
2013-09-10 15:54:06	<--	kizzx2 (~Adium@223.19.229.251) has quit (Max SendQ exceeded)
2013-09-10 15:54:23	Hugh__	Hi - having just installed yesod ok, when i start it I get ...
2013-09-10 15:54:25	Hugh__	cabal: Cannot find the program 'ghc' at 'yesod-ghc-wrapper' or on the path
2013-09-10 15:54:26	-->	kizzx2 (~Adium@223.19.229.251) has joined #haskell
2013-09-10 15:54:28	<--	kizzx2 (~Adium@223.19.229.251) has quit (Max SendQ exceeded)
2013-09-10 15:54:32	Hugh__	but ghc IS on the Path?
2013-09-10 15:54:46	-->	kizzx2 (~Adium@223.19.229.251) has joined #haskell
2013-09-10 15:54:50	<--	kizzx2 (~Adium@223.19.229.251) has quit (Max SendQ exceeded)
2013-09-10 15:54:53	applikativ	mysterious
2013-09-10 15:55:03	merijn	What's "which ghc" say?
2013-09-10 15:55:15	-->	kizzx2 (~Adium@223.19.229.251) has joined #haskell
2013-09-10 15:55:16	applikativ	what is 'yesod-ghc-wrapper'? i wonder
2013-09-10 15:55:17	<--	kizzx2 (~Adium@223.19.229.251) has quit (Max SendQ exceeded)
2013-09-10 15:55:18	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-10 15:55:41	Hugh__	"/usr/bin/ghc"
2013-09-10 15:55:43	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-09-10 15:55:57	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-10 15:56:19	-->	markcw (~jack@2602:306:32a1:4810:5d2:2df3:65f5:bf99) has joined #haskell
2013-09-10 15:57:02	Hugh__	no idea what the wrapper is..
2013-09-10 15:57:02	<--	iLoop (~iLoop@unaffiliated/iloop) has quit (Quit: Leaving...)
2013-09-10 15:57:05	applikativ	this happens when you do 'yesod init'?
2013-09-10 15:57:41	Hugh__	no, yesod init works fine. this is when I do yesod devel to start the server
2013-09-10 15:58:11	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (Read error: Operation timed out)
2013-09-10 15:58:22	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2013-09-10 15:58:34	<--	dzorin (~guest@174.36.234.43-static.reverse.softlayer.com) has quit (Remote host closed the connection)
2013-09-10 15:58:57	applikativ	it might be really simple; i wonder if anyone is awake in #yesod
2013-09-10 15:59:36	-->	obcode (~obcode@ob.cs.hm.edu) has joined #haskell
2013-09-10 15:59:41	applikativ	i'm rooting around the source for the wrapper thing
2013-09-10 15:59:45	Hugh__	thanks..
2013-09-10 15:59:53	applikativ	it seems to be an executable, which is a little odd given the error
2013-09-10 16:00:46	Hugh__	#yesod
2013-09-10 16:01:34	Hugh__	is it me, or is building and packaging and dependency management a real nightmare in Haskell?
2013-09-10 16:01:57	elliott	yes. it's a real nightmare lots of other places too though :p
2013-09-10 16:02:20	Hugh__	sure...
2013-09-10 16:02:42	applikativ	ah the error is from https://github.com/yesodweb/yesod/blob/master/yesod-bin/ghcwrapper.hs#L51
2013-09-10 16:02:48	Hugh__	BASIC never had this problem ;)
2013-09-10 16:02:58	applikativ	i mean, that's the action of writing the error message
2013-09-10 16:03:01	sopvop	static link, and no problems!
2013-09-10 16:03:20	applikativ	Hugh__: i think it's increasing, but yesod is by far the greatest strain
2013-09-10 16:03:24	applikativ	its just immense
2013-09-10 16:03:38	<--	vpetro (~textual@24.114.29.46) has quit (Quit: Computer has gone to sleep.)
2013-09-10 16:03:44	-->	LAMMJohnson (~ja@user-5af430cc.broadband.tesco.net) has joined #haskell
2013-09-10 16:03:45	<--	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Ping timeout: 245 seconds)
2013-09-10 16:03:55	applikativ	it wouldn't be so bad if it were ruby and just a question of getting a pile of files in place, there's this monster labor of compilation
2013-09-10 16:04:35	Hugh__	so why not for most packages just download the binary and link files?
2013-09-10 16:04:49	merijn	Hugh__: And who is responsible for building these binaries?
2013-09-10 16:04:49	Hugh__	why does one need all the source too?
2013-09-10 16:04:59	Hugh__	the developer ?!
2013-09-10 16:05:02	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-10 16:05:07	--	morolin_ is now known as morolin
2013-09-10 16:05:15	merijn	Hugh__: If you're willing to dedicate the resource to build for all platforms, I'd gladly distribute binaries of my code
2013-09-10 16:05:27	haasn	hpc: any hope for compatibility with newer GHC versions? https://gs1.wac.edgecastcdn.net/8019B6/data.tumblr.com/tumblr_lxixxuK7ia1qdlh1io1_r1_250.gif
2013-09-10 16:05:34	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-10 16:05:34	haasn	sorry, wrong link https://github.com/headprogrammingczar/ghc-man-completion/
2013-09-10 16:05:41	haasn	don't know how I managed to screw that up :(
2013-09-10 16:05:47	<--	dcoutts (~duncan@unaffiliated/dcoutts) has quit (Remote host closed the connection)
2013-09-10 16:05:49	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-10 16:05:50	merijn	Hugh__: Unfortunately, I have 1 Mac and a cheapo VPS host and I'm not gonna pay to build for all possible platforms and architectures and I suspect I'm not the only one
2013-09-10 16:06:06	--	morolin is now known as morolin_
2013-09-10 16:06:10	Hugh__	fair enough.
2013-09-10 16:06:11	merijn	Not to mention the cost of maintaining the infrastructure to do that
2013-09-10 16:06:13	-->	morolin (~morolin@cantor.csl.cornell.edu) has joined #haskell
2013-09-10 16:06:28	-->	CapitanK (~CaptainK@181.179.44.240) has joined #haskell
2013-09-10 16:06:51	 *	hackagebot statvfs 0.1 - Get unix filesystem statistics with statfs, statvfs  http://hackage.haskell.org/package/statvfs-0.1 (GergelyRisko)
2013-09-10 16:06:51	-->	dcoutts (~duncan@host90-152-0-50.ipv4.regusnet.com) has joined #haskell
2013-09-10 16:06:51	<--	dcoutts (~duncan@host90-152-0-50.ipv4.regusnet.com) has quit (Changing host)
2013-09-10 16:06:51	-->	dcoutts (~duncan@unaffiliated/dcoutts) has joined #haskell
2013-09-10 16:07:04	<--	morolin_ (~morolin@cantor.csl.cornell.edu) has quit (Quit: Leaving)
2013-09-10 16:07:11	Hugh__	someone mentioned static link to 'it' above and all will be fine... not sure if that was for my benefit...
2013-09-10 16:07:37	aloiscochard	I'm crying... come back dear haskell.org
2013-09-10 16:07:51	merijn	aloiscochard: We're working on it
2013-09-10 16:07:51	<--	CapitanK (~CaptainK@181.179.44.240) has quit (Read error: Connection reset by peer)
2013-09-10 16:08:14	merijn	aloiscochard: The host went down hard
2013-09-10 16:08:33	Hugh__	darn giraffes jinxed it I reckon
2013-09-10 16:08:40	-->	Velpoman (~Velpoman@nat/yahoo/x-dsmjwhkhiloklgjj) has joined #haskell
2013-09-10 16:08:41	linduxed	is haskell.org running on haskell?
2013-09-10 16:08:54	linduxed	just out of curiosity...
2013-09-10 16:08:59	merijn	linduxed: Define "haskell.org"
2013-09-10 16:09:16	merijn	linduxed: Old hackage is CGI scripts, the wiki is php, new-hackage is haskell
2013-09-10 16:09:28	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-10 16:09:31	-->	CapitanK (~CaptainK@181.179.106.37) has joined #haskell
2013-09-10 16:09:49	merijn	linduxed: But in this case the physical machine hosting the various vms has died
2013-09-10 16:09:50	linduxed	ok haha
2013-09-10 16:09:59	linduxed	oh damn
2013-09-10 16:10:03	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 16:10:08	Hugh__	poor old machine. RIP.
2013-09-10 16:10:13	solirc	merijn: Since when is it done?
2013-09-10 16:10:19	solirc	^down..
2013-09-10 16:10:56	merijn	solirc: An hour or so ago?
2013-09-10 16:11:04	 *	solirc looks sad.
2013-09-10 16:11:32	Hugh__	going back to my point about binaries versus source, and wearing my devil's advocate hat, surely this is a clear reason to put haskell on the jvm?
2013-09-10 16:11:45	merijn	Hugh__: How so?
2013-09-10 16:11:49	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 16:12:04	merijn	Hugh__: The JVM is entirely unsuited to the way haskell code compiles
2013-09-10 16:12:08	Hugh__	build once... deploy wherever
2013-09-10 16:12:14	-->	travisstaton (~tstaton@70.127.254.161) has joined #haskell
2013-09-10 16:12:35	Hugh__	how so?
2013-09-10 16:12:39	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-09-10 16:12:49	merijn	I talked to a few scala guys, they're having huge issues with getting the JVM to work remotely well with their generated code
2013-09-10 16:12:51	Tinned_Tuna	merijn: (I'm not familiar with how GHC operates, but here goes!)
2013-09-10 16:12:51	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 16:13:03	Hugh__	(btw, I am being facetious)
2013-09-10 16:13:14	Tinned_Tuna	merijn: isn't the JVM a stack machine, and doesn't a G-Machine assume a stack machine to run on?
2013-09-10 16:13:17	merijn	Hugh__: Because memory allocation/GC of haskell follows a very different pattern than Java, so their GC is tuned for entirely different things
2013-09-10 16:13:40	Hugh__	this to do with laziness?
2013-09-10 16:13:51	-->	visof (~visof@197.246.1.40) has joined #haskell
2013-09-10 16:14:12	merijn	Hugh__: Not so much, but haskell allocation rates can sometimes reach up to hundreds of MB per second
2013-09-10 16:14:35	<--	markcw (~jack@2602:306:32a1:4810:5d2:2df3:65f5:bf99) has quit (Ping timeout: 245 seconds)
2013-09-10 16:14:36	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 16:14:40	merijn	Hugh__: Because the way GHC GC's it's very cheap to allocate a lot, as long as you don't keep the value around for long
2013-09-10 16:14:53	merijn	Hugh__: In Java GC becomes cheaper if you allocate *less*
2013-09-10 16:14:57	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Quit: Ex-Chat)
2013-09-10 16:15:16	merijn	Hugh__: or at least for longer durations
2013-09-10 16:15:30	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Quit: Leaving)
2013-09-10 16:15:30	-->	Sorella (~quildreen@201.80.214.167) has joined #haskell
2013-09-10 16:15:54	Hugh__	ok, so would it not be technically possible - and given a couple of million quid - to build a VM specifically for haskell?
2013-09-10 16:16:08	Tinned_Tuna	Hugh__: that's perfectly possible
2013-09-10 16:16:15	merijn	Hugh__: Sure, but it'd be a better investment to invest in LLVM
2013-09-10 16:16:22	Hugh__	LLVM?
2013-09-10 16:16:25	Tinned_Tuna	I'd have to side with merijn :-)
2013-09-10 16:16:49	Tinned_Tuna	Although, I'd love to see an RPython (aka pypy) Haskell interpreter of some sort.
2013-09-10 16:16:50	merijn	Hugh__: The "Low Level Virtual Machine"
2013-09-10 16:16:50	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 16:16:54	Hugh__	ah
2013-09-10 16:16:55	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-10 16:17:13	merijn	Hugh__: It's basically "machine independent assembly" that comes with a suite of backends/optimisers to compile it to different architecture
2013-09-10 16:17:37	merijn	Hugh__: So basically, any langage that can compile to LLVM can compile to any platform LLVM can compile too
2013-09-10 16:17:43	<--	visof__ (~visof@197.161.65.28) has quit (Ping timeout: 268 seconds)
2013-09-10 16:17:43	Hugh__	yeah, nice. Makes a whole bunch of sense. Get as close to the silicon without touching it
2013-09-10 16:17:48	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 16:17:52	merijn	Hugh__: It's meant to replace C as a low level target language
2013-09-10 16:17:55	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-10 16:18:29	merijn	Hugh__: The advantage of LLVM being that it has a lot of industry support (like Apple) that are invested in supporting/maintaining/expanding it
2013-09-10 16:18:48	Tinned_Tuna	merijn: not to mention you get a lot of optimisations for free.
2013-09-10 16:18:54	merijn	So rather than waste a lot of money doing it yourself, it's more efficient to join the winning team ;)
2013-09-10 16:19:06	Hugh__	so with LLVM one would no longer need the jvm
2013-09-10 16:19:09	donri	(but note that llvm isn't really a vm)
2013-09-10 16:19:26	-->	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has joined #haskell
2013-09-10 16:19:31	Tinned_Tuna	Hugh__: the JVM would still have its place in the world.
2013-09-10 16:19:33	-->	ystael (~ystael@64.206.121.41) has joined #haskell
2013-09-10 16:19:33	merijn	Hugh__: You can read more here: http://www.llvm.org/
2013-09-10 16:19:45	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Ping timeout: 264 seconds)
2013-09-10 16:20:25	<--	Sorella (~quildreen@201.80.214.167) has quit (Quit: Ex-Chat)
2013-09-10 16:20:34	Hugh__	OK, thanks
2013-09-10 16:21:01	<--	WraithM (~WraithM@64.210.76.250) has quit (Quit: leaving)
2013-09-10 16:21:02	<--	ananthakumaran (~Adium@122.166.180.215) has quit (Quit: Leaving.)
2013-09-10 16:21:18	-->	WraithM (~WraithM@64.210.76.250) has joined #haskell
2013-09-10 16:21:37	Hugh__	... so going back to my yesod problem... someone mentioned to static link it?
2013-09-10 16:21:52	--	flazz_gone is now known as flazz
2013-09-10 16:21:54	applikativ	well, yesod is wilder than ever, i thought i'd try it with cabal sandbox; now it's up to 110 installed packages; amazing
2013-09-10 16:22:10	-->	Taneb (~nathan@host-92-30-187-55.as13285.net) has joined #haskell
2013-09-10 16:22:20	-->	vpetro (~textual@24.114.29.46) has joined #haskell
2013-09-10 16:22:23	<--	anakreon (~user@petitesrousses.imag.fr) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-10 16:22:24	<--	thunderrd (~thunderrd@119.42.74.149) has quit (Remote host closed the connection)
2013-09-10 16:22:40	-->	m0g_ (c134671e@gateway/web/freenode/ip.193.52.103.30) has joined #haskell
2013-09-10 16:22:44	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Read error: Operation timed out)
2013-09-10 16:23:04	Hugh__	it appears to be a beast
2013-09-10 16:23:13	<--	denver (~denver@adsl-ull-31-178.50-151.net24.it) has quit (Remote host closed the connection)
2013-09-10 16:23:15	Hugh__	great system though.
2013-09-10 16:23:22	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-10 16:23:24	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-10 16:23:46	<--	CapitanK (~CaptainK@181.179.106.37) has quit (Read error: Connection reset by peer)
2013-09-10 16:24:03	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-09-10 16:24:07	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 16:24:08	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-10 16:24:26	<--	skchrko (~sk@109.110.83.124) has quit (Quit: Leaving)
2013-09-10 16:24:55	-->	LAMMJohn1on (~ja@user-5af4320e.broadband.tesco.net) has joined #haskell
2013-09-10 16:25:22	<--	matthiasgoergens (~matthias@182.55.233.78) has quit (Quit: Leaving.)
2013-09-10 16:25:35	Hugh__	I will stick my question on stackoverflow and for sake of completeness and the logs will report back with an answer
2013-09-10 16:26:15	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 16:26:22	applikativ	i think stackoverflow may be the best way to get an answer from the yesod crowd
2013-09-10 16:26:37	applikativ	something is really wacked with the most recent vault package
2013-09-10 16:26:44	-->	bigstones (974c4592@gateway/web/freenode/ip.151.76.69.146) has joined #haskell
2013-09-10 16:27:05	applikativ	instead of the actual source, each module has cpp stuff saying 'include IO.hs'
2013-09-10 16:27:15	aloiscochard	merijn: thanks, may the force be with you guys!
2013-09-10 16:27:31	<--	LAMMJohnson (~ja@user-5af430cc.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 16:29:16	-->	LAMMJohnson (~ja@user-5af4324a.broadband.tesco.net) has joined #haskell
2013-09-10 16:29:30	applikativ	the first file here is the current 'vault', the second the previous http://lpaste.net/92825
2013-09-10 16:29:46	<--	artyomkazak (~artyomkaz@host-41-157-66-217.spbmts.ru) has quit (Ping timeout: 240 seconds)
2013-09-10 16:30:00	<--	LAMMJohn1on (~ja@user-5af4320e.broadband.tesco.net) has quit (Ping timeout: 245 seconds)
2013-09-10 16:30:29	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 16:30:37	applikativ	oh its a cpp subtlety after all; i figured hackage was being spammed
2013-09-10 16:30:52	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-10 16:31:04	<--	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has quit (Quit: Konversation terminated!)
2013-09-10 16:31:32	applikativ	oh i chanced to do cabal update in a crucial interval
2013-09-10 16:32:07	-->	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has joined #haskell
2013-09-10 16:32:47	Hugh__	yesh, I posted on stackO about the vault and Michael Snoyman answered there was a bug with current vault. He has raised a bug
2013-09-10 16:33:14	-->	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has joined #haskell
2013-09-10 16:33:39	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-10 16:33:41	Hugh__	http://stackoverflow.com/questions/18702508/cant-install-yesod-on-ubuntu-12-04
2013-09-10 16:33:44	-->	LAMMJohn1on (~ja@user-5af4326d.broadband.tesco.net) has joined #haskell
2013-09-10 16:33:48	<--	jungnam (jungnam@61.74.233.216) has quit (Read error: Connection reset by peer)
2013-09-10 16:33:50	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-09-10 16:33:52	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-10 16:34:05	-->	jungnam (jungnam@61.74.233.216) has joined #haskell
2013-09-10 16:34:12	<--	LAMMJohnson (~ja@user-5af4324a.broadband.tesco.net) has quit (Ping timeout: 276 seconds)
2013-09-10 16:34:15	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Disconnected by services)
2013-09-10 16:34:25	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-10 16:34:26	-->	PJBoy_ (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-10 16:34:33	--	PJBoy_ is now known as PJBoy
2013-09-10 16:34:39	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-10 16:34:56	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-10 16:35:03	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 16:35:03	--	PJBoy is now known as Guest16118
2013-09-10 16:35:28	<--	icz (~icz@x1-6-74-44-01-e6-1f-12.k448.webspeed.dk) has quit (Read error: Operation timed out)
2013-09-10 16:36:01	<--	lisdrumz (~lis@37.115.5.205) has quit (Quit: Ухожу я от вас (xchat 2.4.5 или старше))
2013-09-10 16:36:06	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Read error: Operation timed out)
2013-09-10 16:36:23	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 16:37:05	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Ping timeout: 245 seconds)
2013-09-10 16:37:05	<--	bestzdneirf (petterrav@2001:470:6bd1::) has quit (Ping timeout: 245 seconds)
2013-09-10 16:37:11	<--	Earnestea (~Earnestly@unaffiliated/earnestly) has quit (Read error: Connection reset by peer)
2013-09-10 16:37:15	<--	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has quit (Remote host closed the connection)
2013-09-10 16:37:24	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-09-10 16:37:27	<--	bondar (~bondar@197.156.132.62) has quit (Ping timeout: 264 seconds)
2013-09-10 16:37:42	-->	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has joined #haskell
2013-09-10 16:38:03	<--	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 16:38:06	<--	LAMMJohn1on (~ja@user-5af4326d.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-10 16:38:12	-->	bestzdneirf (~bestzdnei@2001:470:6bd1::) has joined #haskell
2013-09-10 16:38:13	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-10 16:38:16	-->	scriptor (~Scriptor@unaffiliated/scriptor) has joined #haskell
2013-09-10 16:38:21	<--	grazs (~g@89.221.241.91) has quit (Ping timeout: 245 seconds)
2013-09-10 16:38:21	<--	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has quit (Ping timeout: 245 seconds)
2013-09-10 16:38:52	<--	opqdonut (opqdonut@pseudo.fixme.fi) has quit (Remote host closed the connection)
2013-09-10 16:39:14	-->	icz (~icz@x1-6-74-44-01-e6-1f-12.k448.webspeed.dk) has joined #haskell
2013-09-10 16:39:15	<--	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-10 16:39:18	-->	danilo2 (959cc887@gateway/web/freenode/ip.149.156.200.135) has joined #haskell
2013-09-10 16:39:18	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-10 16:39:23	-->	morazow_ (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 16:39:36	-->	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-09-10 16:39:59	danilo2	Hello :) Is it possible in hasklel to write an instance for a very conrete types and a "default" instance, which will be used if the previous is not matched?
2013-09-10 16:40:26	-->	ekipan (4b1801f0@gateway/web/freenode/ip.75.24.1.240) has joined #haskell
2013-09-10 16:40:28	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-10 16:40:34	danr	danilo2: yes with UndecidableInstances
2013-09-10 16:40:36	ski	it's considered evil
2013-09-10 16:40:46	<--	m0g_ (c134671e@gateway/web/freenode/ip.193.52.103.30) has quit (Quit: Page closed)
2013-09-10 16:40:50	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Ping timeout: 245 seconds)
2013-09-10 16:40:58	elliott	danilo2: not really, breaks the open world assumption
2013-09-10 16:40:59	ski	danr : rather `OverlappingInstances' and `InconsistentInstances'
2013-09-10 16:41:00	elliott	UndecidableInstances does not help
2013-09-10 16:41:12	-->	dustin10 (~dustin10@2001:4870:600a:500::2) has joined #haskell
2013-09-10 16:41:14	danilo2	danr, ski: I know its evil, but I want to use it in one place in generated haskell code - so I'm sure nobady will write additional instaces for it
2013-09-10 16:41:22	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 16:41:33	applikativ	is this your own type class danilo2 ?
2013-09-10 16:41:37	ski	(sorry, `IncoherentInstances', not `InconsistentInstances')
2013-09-10 16:41:43	danilo2	applikativ: yes
2013-09-10 16:42:01	<--	TDJACR (~TDJACR@lilug/member/tdjacr) has quit (Quit: Quit)
2013-09-10 16:42:02	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-10 16:42:16	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-10 16:42:25	applikativ	in your own class you can give default implementations though this may not help
2013-09-10 16:42:27	-->	Paprikachu (~Paprikach@77.117.86.190.wireless.dyn.drei.com) has joined #haskell
2013-09-10 16:42:27	ski	perhaps you can avoid using a type class at all ?
2013-09-10 16:42:33	applikativ	nothing wrong with that, on the contrary
2013-09-10 16:42:34	<--	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has quit (Client Quit)
2013-09-10 16:42:37	-->	sellout- (~Adium@c-67-176-62-45.hsd1.co.comcast.net) has joined #haskell
2013-09-10 16:42:39	-->	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 16:43:00	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-10 16:43:02	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-10 16:43:17	danilo2	applikativ: Ok, I will try with default implementwation of my class
2013-09-10 16:43:27	<--	morazow (~morazow@p57BCEBC0.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-10 16:43:32	danilo2	ski: No, I have to use it
2013-09-10 16:43:38	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 16:44:14	bigstones	hello, is it me or haskell.org is down?
2013-09-10 16:44:15	ski	why ?
2013-09-10 16:44:16	applikativ	what is special about this concrete type?  you might subtly be able to manage the matter with the original definition of the class
2013-09-10 16:44:19	ski	bigstones : yes
2013-09-10 16:45:01	<--	Yuu-chan (~yuu@192.162.88.2) has left #haskell
2013-09-10 16:45:12	applikativ	bigstones: if you need hackage nonsense there is the other site...
2013-09-10 16:45:35	applikativ	@hackage-mirror
2013-09-10 16:45:35	lambdabot	Unknown command, try @list
2013-09-10 16:45:38	danilo2	ski: because it defines a common function name :)
2013-09-10 16:45:39	applikativ	almost
2013-09-10 16:45:46	applikativ	@where hackage-mirror
2013-09-10 16:45:47	lambdabot	remote-repo: hdiff.luite.com:http://hdiff.luite.com/packages/archive/
2013-09-10 16:45:50	<--	hashcat (~chatzilla@27.242.4.115) has quit (Ping timeout: 256 seconds)
2013-09-10 16:46:02	ystael	What is the standard technique for when you want a different instance implementation of a class at a type?  (like a different ordering on integers or something)
2013-09-10 16:46:14	danilo2	ski: It is very compelx I thing - this is a complex idea connected to this genrated code - I have to make type class because the name of some functions (like this) should be common
2013-09-10 16:46:17	applikativ	newtyping is the standard technique
2013-09-10 16:46:21	-->	functorfun (~functorfu@58.178.95.122) has joined #haskell
2013-09-10 16:46:22	--	functorfun is now known as funfunctor
2013-09-10 16:46:32	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 16:46:53	bigstones	applikativ: no thanks, I just needed the wiki, but I'll use google cache
2013-09-10 16:46:57	applikativ	you can also make a class that provides for this, but it's usually  more pain
2013-09-10 16:47:02	<--	bestzdneirf (~bestzdnei@2001:470:6bd1::) has quit (Quit: ZNC - http://znc.in)
2013-09-10 16:47:05	applikativ	bigstones: ah good
2013-09-10 16:47:06	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-10 16:47:21	ski	danilo2 : why can't you take the function as an argument ?
2013-09-10 16:47:24	-->	LAMMJohnson (~ja@user-5af432be.broadband.tesco.net) has joined #haskell
2013-09-10 16:47:27	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 240 seconds)
2013-09-10 16:47:31	ystael	applikativ: got it, thank you!
2013-09-10 16:47:52	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-09-10 16:47:58	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Client Quit)
2013-09-10 16:48:00	-->	TDJACR (~TDJACR@2001:470:1f07:d3a:b103:f894:274f:34ca) has joined #haskell
2013-09-10 16:48:04	<--	TDJACR (~TDJACR@2001:470:1f07:d3a:b103:f894:274f:34ca) has quit (Changing host)
2013-09-10 16:48:05	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-09-10 16:48:49	-->	jobstijl0 (~job@5070A080.static.ziggozakelijk.nl) has joined #haskell
2013-09-10 16:48:52	--	jobstijl0 is now known as jobstijl
2013-09-10 16:49:02	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 16:49:04	-->	opqdonut (opqdonut@pseudo.fixme.fi) has joined #haskell
2013-09-10 16:49:15	-->	dubsg (~dubsg@208.74.177.104.static.etheric.net) has joined #haskell
2013-09-10 16:49:25	-->	artyomkazak (~artyomkaz@94.25.228.26) has joined #haskell
2013-09-10 16:49:46	<--	vpetro (~textual@24.114.29.46) has quit (Quit: Computer has gone to sleep.)
2013-09-10 16:49:48	<--	johnbender (johnbender@gateway/shell/ircrelay.com/x-nwclfgdcfdezcuxy) has left #haskell
2013-09-10 16:50:30	<--	aergus (~aergus@81.214.102.169) has quit (Ping timeout: 264 seconds)
2013-09-10 16:51:44	--	ccasin_ is now known as ccasin
2013-09-10 16:51:44	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 16:51:47	<--	LAMMJohnson (~ja@user-5af432be.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-10 16:51:50	<--	malkomalko (~malkomalk@66-234-38-99.nyc.cable.nyct.net) has quit (Remote host closed the connection)
2013-09-10 16:51:54	<--	bigstones (974c4592@gateway/web/freenode/ip.151.76.69.146) has quit (Quit: Page closed)
2013-09-10 16:52:08	-->	kevinqcs (~turing@183.209.53.55) has joined #haskell
2013-09-10 16:52:25	<--	synonymous (~Adium@60-242-194-203.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-10 16:52:26	-->	magneticduck (~magneticd@188.251.5.54) has joined #haskell
2013-09-10 16:52:41	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-10 16:52:47	magneticduck	it seems like the hoogle is down; what's a function that can convert Int to Integer?
2013-09-10 16:52:54	-->	aergus (~aergus@81.214.102.169) has joined #haskell
2013-09-10 16:53:32	Kinnison	fromIntegral
2013-09-10 16:53:33	Kinnison	?
2013-09-10 16:53:40	magneticduck	ah k
2013-09-10 16:53:55	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-10 16:53:56	magneticduck	I forgot all about the integral side of the number spectrum =P
2013-09-10 16:53:59	magneticduck	thanks
2013-09-10 16:54:13	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-10 16:54:15	-->	ampersand27017 (~ampersand@69.3.174.98) has joined #haskell
2013-09-10 16:54:39	kuribas	A hilbert R-tree works only with positive coordinates, right?
2013-09-10 16:54:53	<--	phischu (~pschuster@dhcp206.uni-koblenz.de) has quit (Read error: Operation timed out)
2013-09-10 16:55:21	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-09-10 16:55:34	kuribas	I have made a space filling curve that fills the space from the origin, not from the bottom left corner like the hilbert curve.
2013-09-10 16:55:36	hpaste	danilo2 pasted “Hacking typeclasses” at http://lpaste.net/92828
2013-09-10 16:55:55	kuribas	I wonder if that could be used instead of the hilbert curve?
2013-09-10 16:56:08	danilo2	could somebody help me please to make it working ? I basically want one instance to be default, while the other to be applied only when it matches: http://lpaste.net/92828
2013-09-10 16:57:10	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 16:57:53	-->	tibbe (~tibbe@207.198.105.19) has joined #haskell
2013-09-10 16:58:09	flazz	how can I change a "Maybe a" into a "MaybeT m b"
2013-09-10 16:58:15	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 240 seconds)
2013-09-10 16:58:32	merijn	:t MaybeT
2013-09-10 16:58:33	lambdabot	Not in scope: data constructor `MaybeT'
2013-09-10 16:58:39	ekipan	@type lift
2013-09-10 16:58:40	lambdabot	(Monad m, MonadTrans t) => m a -> t m a
2013-09-10 16:58:47	merijn	:t Control.Monad.Maybe.MaybeT
2013-09-10 16:58:48	lambdabot	Couldn't find qualified module.
2013-09-10 16:58:50	merijn	aww
2013-09-10 16:58:55	-->	Gecemmo (~textual@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-10 16:58:57	merijn	:t Control.Monad.Trans.Maybe.MaybeT
2013-09-10 16:58:58	lambdabot	m (Maybe a) -> Control.Monad.Trans.Maybe.MaybeT m a
2013-09-10 16:59:00	merijn	whoops
2013-09-10 16:59:10	merijn	"MaybeT . return" works
2013-09-10 16:59:23	<--	Gecemmo (~textual@c83-251-174-153.bredband.comhem.se) has quit (Client Quit)
2013-09-10 16:59:23	merijn	I don't think lift is Right
2013-09-10 16:59:44	merijn	:t lift `asAppliedTo` (Just 'c')
2013-09-10 16:59:45	lambdabot	MonadTrans t => Maybe Char -> t Maybe Char
2013-09-10 16:59:50	-->	yesthisisuser (~chatzilla@41.59.28.58) has joined #haskell
2013-09-10 17:00:02	danilo2	ski: I didnt saw your question - I will think about passing it as argument, but for now I do notsee such possibility
2013-09-10 17:00:13	<--	julmae (~no@206.190.145.94) has quit (Read error: Connection reset by peer)
2013-09-10 17:00:31	flazz	merijn: is the maybeness mostly coincidental?
2013-09-10 17:00:37	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-10 17:00:39	danilo2	ski, elliott: Could you please look here and give me hint how can I make it working? : http://lpaste.net/92828
2013-09-10 17:00:57	yesthisisuser	Has anyone used HaskellDB? I'm having some trouble figuring out how to define a table...
2013-09-10 17:01:21	-->	julmac (~no@206.190.145.91) has joined #haskell
2013-09-10 17:01:28	merijn	flazz: I'm not sure what you mean by that?
2013-09-10 17:01:30	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-10 17:01:43	<--	petapetapeta (~quassel@6164198-cl69.boa.fiberby.dk) has quit (Ping timeout: 260 seconds)
2013-09-10 17:01:54	merijn	flazz: And I just saw you have an 'a' in your first signature, but a 'b' in the second, is that right?
2013-09-10 17:01:56	flazz	i was thing i could lift or something like that
2013-09-10 17:02:07	flazz	merijn: just to say they are different
2013-09-10 17:02:20	merijn	flazz: lift does something else
2013-09-10 17:02:29	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Ping timeout: 240 seconds)
2013-09-10 17:02:35	-->	pycabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 17:02:35	flazz	yeah
2013-09-10 17:02:43	merijn	flazz: lift can turn "IO a" into "MaybeT IO a", not "Maybe a" into "MaybeT IO a"
2013-09-10 17:02:50	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-10 17:02:54	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-10 17:02:58	merijn	But like I said "MaybeT . return" works
2013-09-10 17:03:14	flazz	thanks
2013-09-10 17:03:14	merijn	:t Control.Monad.Trans.Maybe.MaybeT . return
2013-09-10 17:03:15	lambdabot	Monad m => Maybe a -> Control.Monad.Trans.Maybe.MaybeT m a
2013-09-10 17:03:16	<--	t7 (~chatzilla@chaucer.kent.ac.uk) has quit (Quit: home)
2013-09-10 17:03:16	-->	Swizec_ (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-10 17:03:18	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-10 17:03:30	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-10 17:03:32	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-10 17:03:57	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Ping timeout: 268 seconds)
2013-09-10 17:03:58	ski	danilo2 : what are the laws of the operation `test'
2013-09-10 17:04:00	ski	?
2013-09-10 17:04:15	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-10 17:04:16	-->	malkomalko (~malkomalk@rrcs-24-103-19-147.nyc.biz.rr.com) has joined #haskell
2013-09-10 17:04:50	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 17:06:12	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 17:06:29	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Ping timeout: 264 seconds)
2013-09-10 17:06:35	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 17:06:41	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-10 17:06:42	<--	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has quit (Ping timeout: 276 seconds)
2013-09-10 17:07:11	--	pycabrera is now known as cppcabrera
2013-09-10 17:07:32	-->	hashcat (~chatzilla@39.12.220.170) has joined #haskell
2013-09-10 17:07:35	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-10 17:07:40	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 264 seconds)
2013-09-10 17:07:43	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 17:08:16	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-10 17:08:50	danilo2	ski: the operation test (in the example is useless) but it should generally be able to call "f" on arguments which can be IO a or Pure a. If it gets for example "test (+) (a::IO Int) (b :: Pure Int)" it will result in IO Int
2013-09-10 17:09:31	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-10 17:09:56	-->	YayMe` (~user@199.127.202.2) has joined #haskell
2013-09-10 17:10:12	<--	Ralith (~ralith@216.162.199.202) has quit (Ping timeout: 256 seconds)
2013-09-10 17:10:32	hpaste	danilo2 pasted “Fun with typeclasses” at http://lpaste.net/92833
2013-09-10 17:10:45	danilo2	ski: look at the working example I've got here: http://lpaste.net/92833
2013-09-10 17:11:02	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-10 17:11:18	danilo2	ski: Right now I have to declare ALL possible permutations of Instances, but as you can see, every implementation (aapart of one) has the same body
2013-09-10 17:11:53	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-10 17:12:02	-->	phischu (~pschuster@dslb-088-077-221-243.pools.arcor-ip.net) has joined #haskell
2013-09-10 17:12:21	danilo2	ski: look at lines 14-17 - the implementation allows you to use function "add" on arguments of types Pure or IO and results appropriate Typed argument
2013-09-10 17:12:40	ski	is there a point to  print'  ?
2013-09-10 17:12:46	flazz	merijn: that worked great thanks
2013-09-10 17:13:02	ekipan	I don't understand why you need to parameterize over all 3 type constructors, if you can let them be the same, then apply2 = liftM2
2013-09-10 17:13:10	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-10 17:13:14	ekipan	and your Pure type = Identity
2013-09-10 17:13:15	danilo2	ski: no, sorry for that :)
2013-09-10 17:13:32	hpaste	danilo2 revised “Fun with typeclasses”: “No title” at http://lpaste.net/92833
2013-09-10 17:13:44	<--	tuxie_ (~paranoid@213.61.228.26) has quit (Quit: Kolba)
2013-09-10 17:13:52	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-10 17:13:56	danilo2	ski: I've removed the print'
2013-09-10 17:14:31	ski	hm, why `class GetIO a b' rather than `class GetIO a' ?
2013-09-10 17:14:34	danilo2	ekipan: I want to have "Pure" data constructor
2013-09-10 17:14:38	-->	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has joined #haskell
2013-09-10 17:14:43	ekipan	@src Identity
2013-09-10 17:14:44	lambdabot	newtype Identity a = Identity { runIdentity :: a }
2013-09-10 17:14:52	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-10 17:15:09	applikativ	Pure and Identity are similar in that neither has a Show instance
2013-09-10 17:15:20	<--	Itkovian (~Itkovian@b244h178.ugent.be) has quit (Quit: Zzzzz ...)
2013-09-10 17:15:39	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Read error: Connection reset by peer)
2013-09-10 17:15:47	ekipan	Identity x >>= f = Identity (f x)
2013-09-10 17:15:50	-->	Arsche (~MyrAchle@server56310.uk2net.com) has joined #haskell
2013-09-10 17:15:51	-->	malkomal_ (~malkomalk@rrcs-24-103-19-147.nyc.biz.rr.com) has joined #haskell
2013-09-10 17:16:06	applikativ	no, its f x, or am i in a muddle
2013-09-10 17:16:20	ekipan	erm, yes
2013-09-10 17:16:27	applikativ	fmap f (Identity x) = Identity (f x)
2013-09-10 17:16:27	-->	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has joined #haskell
2013-09-10 17:16:33	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Remote host closed the connection)
2013-09-10 17:16:35	danilo2	ski: I think it is impopsible to write  `class GetIO a' instead of `class GetIO a b' - seriously
2013-09-10 17:16:37	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 17:16:47	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell ("Leaving")
2013-09-10 17:16:55	ekipan	Identity x >>= f = f x
2013-09-10 17:17:00	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 17:17:02	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-10 17:17:11	-->	petapetapeta (~Peter@130.225.165.43) has joined #haskell
2013-09-10 17:17:34	<--	malkomalko (~malkomalk@rrcs-24-103-19-147.nyc.biz.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-10 17:17:55	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-10 17:18:05	danilo2	ski: Do you have any dea how to do it ?
2013-09-10 17:18:15	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (Ping timeout: 240 seconds)
2013-09-10 17:18:24	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-10 17:18:41	applikativ	its Apply2 you are worried about danilo2 ?
2013-09-10 17:18:41	-->	markcw (~jack@128.135.100.110) has joined #haskell
2013-09-10 17:18:45	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-09-10 17:19:10	<--	malkomal_ (~malkomalk@rrcs-24-103-19-147.nyc.biz.rr.com) has quit (Read error: Connection reset by peer)
2013-09-10 17:19:21	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 17:19:33	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 17:19:58	danilo2	applikativ: I want to create Apply3, Apply4 etc - BUT using current implementation (http://lpaste.net/92833) - I have to specify EACH possible permutation of PURE and IO arguments (see lines: 30-34). I want to shorten it, because the implementations are all the same
2013-09-10 17:20:25	-->	anRch (~markmilli@ip-64-134-96-145.public.wayport.net) has joined #haskell
2013-09-10 17:20:38	-->	Belgarion0 (~aoeu@Brain.BrokenBrain.se) has joined #haskell
2013-09-10 17:20:41	fser	hi
2013-09-10 17:20:46	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Read error: No route to host)
2013-09-10 17:20:51	ekipan	so you just want to be able to mix pure and IO computation without doing your own lifting?
2013-09-10 17:21:07	danilo2	ekipan: Some hack like this :)
2013-09-10 17:21:12	ekipan	seems like a lot of work without any real benefit
2013-09-10 17:21:14	fser	suppose I have a function taking a long time to run (f x y = ... complex and time consuming stuff)
2013-09-10 17:21:48	danilo2	ekipan: But I will not use it by hand - really - lets say it is only a hack I want to create to my generated code :)
2013-09-10 17:21:49	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2013-09-10 17:22:09	fser	is there any optimisation in list comprehension order? I mean [(a,b) | a <- [1..], b <- [1..], f a b, a + b < 50 ] rather than [(a,b) | a <- [1..], b <- [1..], a + b < 50, f a b ] ?
2013-09-10 17:22:24	--	Guest58739 is now known as oleo
2013-09-10 17:22:33	ekipan	seems it would be easier to generate the fmaps and binds in your generated code
2013-09-10 17:22:40	dolio	fser: No.
2013-09-10 17:22:49	fser	ok thanks :)
2013-09-10 17:23:03	danilo2	applikativ: Is it possible?
2013-09-10 17:23:08	-->	divyansr (~divyansr@106.51.65.240) has joined #haskell
2013-09-10 17:23:46	-->	maxter (~maxter@sundownness.lullaby.volia.net) has joined #haskell
2013-09-10 17:23:53	-->	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has joined #haskell
2013-09-10 17:24:55	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-10 17:25:29	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Ping timeout: 240 seconds)
2013-09-10 17:25:35	YayMe`	I've designed something that feels similar to a monad to me, but not quite I'm guessing. Curious if anybody here could help me decide if it fits. It's in C# but structural behaviour seems reminiscent. It interacts with hardware/users in a way they can give input and the input goes basically in the form of (hardware, eventInfo) to one of two places on a handler depending on the event, and that place on the handler al
2013-09-10 17:25:36	YayMe`	ways returns a handler that is used for the following (hardware, eventInfo) to be sent to
2013-09-10 17:26:20	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 17:26:33	danr	YayMe`: is it a functor?
2013-09-10 17:26:50	-->	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has joined #haskell
2013-09-10 17:26:57	<--	tibbe (~tibbe@207.198.105.19) has quit (Quit: tibbe)
2013-09-10 17:26:57	YayMe`	it feels similar to my intuition about a monad because you always have a current handler, you give it something and it returns a new handler, and moreover it may return a handler that returns a handler; the flatness of it feels monadic
2013-09-10 17:27:06	YayMe`	it never nests like I think of functors as doing
2013-09-10 17:27:17	ekipan	all monads are functors
2013-09-10 17:27:24	ekipan	if it isn't a functor, it's not a monad
2013-09-10 17:27:28	YayMe`	good point
2013-09-10 17:27:30	<--	Gentlecat (~Roman@79.105.226.165) has quit (Ping timeout: 245 seconds)
2013-09-10 17:27:44	<--	arenz (arenz@nat/ibm/x-dyamrekbmflaqjhi) has quit (Read error: Operation timed out)
2013-09-10 17:27:50	-->	maxter_ (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-10 17:28:04	ski	danilo2 : did you try ?
2013-09-10 17:28:30	-->	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has joined #haskell
2013-09-10 17:28:43	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-10 17:29:00	-->	LAMMJohnson (~ja@user-5af434ba.broadband.tesco.net) has joined #haskell
2013-09-10 17:29:01	danilo2	ski: What did I try? I'm trying all the time :)
2013-09-10 17:29:23	YayMe`	on second thought perhaps it's not. it doesn't really contain information you can act upon, rather it contains continuations that you can step through one by one
2013-09-10 17:29:24	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Connection reset by peer)
2013-09-10 17:29:41	<--	maxter_ (~maxter@gaffeless.chaperon.volia.net) has quit (Client Quit)
2013-09-10 17:29:52	notdan	So, haskell.org is down, as well as ghc.haskell.org and git.haskell.org
2013-09-10 17:29:56	-->	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-10 17:30:43	sellout-	notdan: Those all sound like haskell.org to me ;)
2013-09-10 17:30:55	sellout-	notdan: But yes, I too am frustrated by that this morning.
2013-09-10 17:30:58	YayMe`	all possible paths through those continuations could be traced to look like a tree which is a functor, but at each node is simply a decision path through continuations rather than content like a functor..
2013-09-10 17:31:27	<--	maxter (~maxter@sundownness.lullaby.volia.net) has quit (Ping timeout: 264 seconds)
2013-09-10 17:31:28	-->	maxter_ (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-10 17:31:39	<--	sellout- (~Adium@c-67-176-62-45.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-09-10 17:31:39	<--	RThinker (~yegor@77.47.204.159) has quit (Read error: Connection reset by peer)
2013-09-10 17:31:40	applikativ	notdan: "Update: the main box is back up, but now we need to individually manually fsck the VMs. :-(
2013-09-10 17:31:47	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-10 17:32:13	YayMe`	give it X continuation returns node A give it Y continuation returns node B, the fact that each node is simply another continuation is what's tripping my intuition about monads
2013-09-10 17:32:31	ski	danilo2 : `class GetIO f where getIO :: f a -> IO a' seems to work fine here
2013-09-10 17:32:41	YayMe`	Does this sound like any known type of structure or am I simply mistaken?
2013-09-10 17:32:42	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Read error: Operation timed out)
2013-09-10 17:32:45	<--	SpyrosTrigazis (~spyrostri@2001:648:2320:61:68a5:baad:fbf2:2807) has quit (Remote host closed the connection)
2013-09-10 17:32:47	<--	Hugh__ (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 17:33:10	-->	pavonia (~user@p4FEEE561.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 17:33:11	-->	SpyrosTrigazis (~spyrostri@2001:648:2320:61:68a5:baad:fbf2:2807) has joined #haskell
2013-09-10 17:33:29	<--	aergus (~aergus@81.214.102.169) has quit (Quit: Leaving)
2013-09-10 17:33:45	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 17:33:49	<--	ekipan (4b1801f0@gateway/web/freenode/ip.75.24.1.240) has quit (Quit: Page closed)
2013-09-10 17:34:10	<--	visof (~visof@197.246.1.40) has quit (Ping timeout: 268 seconds)
2013-09-10 17:34:34	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 17:34:36	danilo2	ski: I'm very sorry. I do not know why it didnt work when I was trying... I had to make a mistake. Thank you for pointign this out! :)
2013-09-10 17:34:51	<--	martinalex (~quassel@188-245.eduroam.rwth-aachen.de) has quit (Ping timeout: 260 seconds)
2013-09-10 17:34:57	-->	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has joined #haskell
2013-09-10 17:35:31	ski	YayMe` : hard to get a good idea about the shape of your type ..
2013-09-10 17:35:54	YayMe`	let's see if I can define a data type... it would be something like
2013-09-10 17:36:01	<--	RThinker (~yegor@77.47.204.159) has quit (Client Quit)
2013-09-10 17:36:07	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-10 17:36:12	-->	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 17:36:18	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-10 17:36:27	-->	sellout- (~Adium@66.185.107.123) has joined #haskell
2013-09-10 17:36:33	--	hdevalence|away is now known as hdevalence
2013-09-10 17:36:34	-->	tibbe (tibbe@nat/google/x-hxqgupihcfngkuru) has joined #haskell
2013-09-10 17:37:03	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Remote host closed the connection)
2013-09-10 17:37:09	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-10 17:37:14	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-10 17:37:19	YayMe`	data Handler = Handler {UserInput = (Hw, Ev) -> Handler, HwEvent = (Hw, Ev) -> Handler}
2013-09-10 17:37:30	<--	SpyrosTrigazis (~spyrostri@2001:648:2320:61:68a5:baad:fbf2:2807) has quit (Ping timeout: 245 seconds)
2013-09-10 17:38:14	YayMe`	one of two event types occur, you hand it to the handler and it hands you the next handler to deal with the next event
2013-09-10 17:38:32	danilo2	ski: Ok, after fixing the GetIO signature I added (GetIO a) constrain to Apply2 instance and it works now :) Thank you! :)
2013-09-10 17:38:59	applikativ	you should presumably lowercase UserInput and HwEvent YayMe`
2013-09-10 17:39:01	-->	quchen (~quchen@p54AA0810.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 17:39:16	YayMe`	Ah yes, I always forget the syntax for record types
2013-09-10 17:39:37	YayMe`	I need to write more haskell...
2013-09-10 17:39:39	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-10 17:39:44	applikativ	oh and userInput :: (Hw,Ev) -> Handler
2013-09-10 17:39:58	-->	artyomkazak1 (~artyomkaz@94.25.228.31) has joined #haskell
2013-09-10 17:40:07	<--	artyomkazak (~artyomkaz@94.25.228.26) has quit (Ping timeout: 264 seconds)
2013-09-10 17:40:35	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 17:40:51	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 17:41:15	<--	morolin (~morolin@cantor.csl.cornell.edu) has quit (Ping timeout: 245 seconds)
2013-09-10 17:41:20	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 17:41:22	<--	Heisenmort (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 256 seconds)
2013-09-10 17:41:24	YayMe`	applikativ: aye. Basically there's a starting handler at the beginning of a session, and then user and hardware events step through various different handlers where each handler has knowledge of a fixed set of next possible handlers that it may branch towards depending on the user or hardware events that occur
2013-09-10 17:42:47	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-09-10 17:43:41	YayMe`	ski: the best guess I can come up with talking through this is that it may be similar to the haskell cont type?
2013-09-10 17:44:28	 *	paolino has done the first hopengl UI with sprite patch and cords 
2013-09-10 17:44:37	applikativ	i'm not seeing why you shouldn't be working with some version of StateT (Hw,Ev) or something?
2013-09-10 17:44:46	<--	paullik (~paullik@unaffiliated/paullik) has quit (Read error: Operation timed out)
2013-09-10 17:45:31	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Ping timeout: 264 seconds)
2013-09-10 17:45:51	<--	ampersand27017 (~ampersand@69.3.174.98) has quit (Quit: ampersand27017)
2013-09-10 17:46:29	-->	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has joined #haskell
2013-09-10 17:46:37	-->	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 17:46:55	applikativ	good work paolino.
2013-09-10 17:46:57	-->	visof (~visof@197.133.197.6) has joined #haskell
2013-09-10 17:47:36	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-10 17:47:41	paolino	applikativ, is it ok to put a you tube link here with a small animation of it ?
2013-09-10 17:47:42	ski	YayMe` : and presumably the handler does some `IO' before giving back the next handler
2013-09-10 17:47:47	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-09-10 17:48:23	YayMe`	ski: yeah, that's why the Hw is passed in with the event
2013-09-10 17:48:30	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-10 17:48:31	-->	erochester1 (~erocheste@137.54.39.24) has joined #haskell
2013-09-10 17:48:44	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 17:48:46	ski	`Hw' being ?
2013-09-10 17:48:49	YayMe`	Hardware
2013-09-10 17:49:05	ski	simulation of some kind of hardware ?
2013-09-10 17:49:17	applikativ	paolino: why not?
2013-09-10 17:49:19	YayMe`	an abstraction over a literal piece of hardware
2013-09-10 17:49:31	YayMe`	gives some facilities for a few simple interactions with the hardware
2013-09-10 17:49:38	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 17:49:58	ski	and you can use different `Hw' values for each "event call" ?
2013-09-10 17:50:03	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 17:50:12	YayMe`	Nope
2013-09-10 17:50:27	<--	LAMMJohnson (~ja@user-5af434ba.broadband.tesco.net) has quit (Ping timeout: 245 seconds)
2013-09-10 17:50:38	YayMe`	it's the same abstraction everytime, just a way of accessing the hardware for that IO you guessed I was doing
2013-09-10 17:50:40	<--	tibbe (tibbe@nat/google/x-hxqgupihcfngkuru) has quit (Quit: tibbe)
2013-09-10 17:51:11	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Ping timeout: 260 seconds)
2013-09-10 17:51:16	hpaste	danilo2 revised “Fun with typeclasses”: “No title” at http://lpaste.net/92833
2013-09-10 17:51:18	YayMe`	the part that changes is the Ev (event), based on the particular event the handler may do X on the hardware or Y on the hardware before returning the next handler
2013-09-10 17:51:25	-->	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has joined #haskell
2013-09-10 17:51:33	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-10 17:51:39	<--	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has left #haskell
2013-09-10 17:51:44	danilo2	ski: I've updated the example (I was hoping it will work,but still does not work) - is it possible to make lines 33-34 working?
2013-09-10 17:51:48	YayMe`	also the difference in the event may cause it to return handler A or handler B
2013-09-10 17:51:56	danilo2	ski: http://lpaste.net/92833
2013-09-10 17:52:04	paolino	applikativ, dunno . http://www.youtube.com/watch?v=CvEZgLd1zss
2013-09-10 17:52:08	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 256 seconds)
2013-09-10 17:52:14	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 17:52:25	<--	yesthisisuser (~chatzilla@41.59.28.58) has quit (Quit: ChatZilla 0.9.90.1 [Iceweasel 18.0/20130110114934])
2013-09-10 17:52:46	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Read error: Connection reset by peer)
2013-09-10 17:52:47	-->	zzing (~textual@wlan.cspc1.uwindsor.ca) has joined #haskell
2013-09-10 17:52:57	-->	Kiryx (~Kiryx@84-234-41-12.internetia.net.pl) has joined #haskell
2013-09-10 17:53:00	danilo2	applicativ: Could you look please (according to our prevous talk) at: http://lpaste.net/92833? Im talking about the lines (33-34) - the line 33 should be "default"
2013-09-10 17:53:01	-->	ananthakumaran (~Adium@117.192.134.162) has joined #haskell
2013-09-10 17:53:12	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Quit: Computer has gone to sleep.)
2013-09-10 17:53:30	<--	erochester1 (~erocheste@137.54.39.24) has quit (Ping timeout: 276 seconds)
2013-09-10 17:53:44	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-10 17:55:11	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: brb)
2013-09-10 17:55:50	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-10 17:56:05	ski	YayMe` : well, i was not seeing any `IO' in that type -- perhaps there's a driver/interpreter somewhere that does the I/O ?
2013-09-10 17:56:58	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 17:57:23	--	levi` is now known as levi
2013-09-10 17:57:47	-->	tuxie_ (~paranoid@g225065022.adsl.alicedsl.de) has joined #haskell
2013-09-10 17:57:54	<--	phischu (~pschuster@dslb-088-077-221-243.pools.arcor-ip.net) has left #haskell
2013-09-10 17:57:54	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 17:58:47	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-10 17:58:50	<--	quchen (~quchen@p54AA0810.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2013-09-10 17:59:04	<--	Croms (~dv@wcw-eduroam-42-90.wireless.uva.nl) has quit (Quit: Croms)
2013-09-10 17:59:25	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-10 17:59:29	 *	applikativ demands a free fpcomplete FP Haskell IDE account! 
2013-09-10 18:00:10	YayMe`	ski: yes, the HW object effectively allows the handler to send commands to the driver
2013-09-10 18:00:32	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Remote host closed the connection)
2013-09-10 18:00:34	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-10 18:01:00	YayMe`	(Hw, Ev) goes in, the handler looks at the ev, sends some messages to the driver through the hw based on the ev, and then based on the ev decides the next handler.
2013-09-10 18:01:16	YayMe`	next handler; same thing.
2013-09-10 18:01:36	-->	morolin (~morolin@nat-128-84-124-0-198.cit.cornell.edu) has joined #haskell
2013-09-10 18:02:29	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-10 18:02:45	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 18:02:58	-->	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-10 18:04:23	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-10 18:04:26	ski	YayMe` : would general functions be written to accept a `Handler' and return a `Handler' ?
2013-09-10 18:05:00	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-10 18:05:10	ski	iow, pass some `Ev'ents to the `Handler, getting a new one, which it returns
2013-09-10 18:05:15	YayMe`	No, there's a higher level point in the stack that's kind of like (Handler, Hw, Ev) -> Handler
2013-09-10 18:05:36	YayMe`	but it's fairly obvious how that's implemented
2013-09-10 18:05:51	<--	kushal (kdas@fedora/kushal) has quit (Ping timeout: 276 seconds)
2013-09-10 18:05:58	<--	morolin (~morolin@nat-128-84-124-0-198.cit.cornell.edu) has quit (Client Quit)
2013-09-10 18:06:11	<--	magneticduck (~magneticd@188.251.5.54) has quit (Quit: WeeChat 0.3.7)
2013-09-10 18:06:15	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 245 seconds)
2013-09-10 18:06:15	flebron	Could one define constructor functions as functions whose normal form does not need to reduce the function to anything?
2013-09-10 18:06:31	<--	oleo (~oleo@xdsl-78-35-172-62.netcologne.de) has quit (Quit: Leaving)
2013-09-10 18:07:09	<--	funfunctor (~functorfu@58.178.95.122) has quit (Quit: Lost terminal)
2013-09-10 18:07:21	ski	flebron : how about `div 1 0', is `div' a constructor function ?
2013-09-10 18:07:36	flebron	No, but that reduces to something, does it not?
2013-09-10 18:07:36	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: Connection reset by peer)
2013-09-10 18:07:53	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 18:08:05	ski	typically, in small-step operational semantics, such terms are said to be "stuck"
2013-09-10 18:08:08	flebron	And even if it's bottom, it's still not an issue.
2013-09-10 18:08:14	ski	they're formalized as not reducing further
2013-09-10 18:08:19	flebron	(Because then the normal form doesn't exist.)
2013-09-10 18:08:32	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Quit: WeeChat 0.4.1)
2013-09-10 18:08:33	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-10 18:09:05	ski	and one typically singles out a subset of the non-reducing terms as the "values"
2013-09-10 18:09:10	flebron	The way I had understood div 1 0 is that it reduces to bottom, so it doesn' thave a normal form.
2013-09-10 18:09:11	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 18:09:36	solirc	has anyone got this before (with http-conduit): InternalIOException connect: unsupported operation (Cannot assign requested address)
2013-09-10 18:09:37	ski	"bottom" is a concept from denotational semantics
2013-09-10 18:09:41	-->	pycabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 18:10:20	flebron	Denotational semantics do have a notion of reduction, correct?
2013-09-10 18:10:21	ski	though if you want, you could say that `div 1 0' reduces to `Wrong' (this is sometimes done)
2013-09-10 18:10:28	ski	flebron : nope
2013-09-10 18:10:37	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-09-10 18:11:03	ski	Denotational semantics maps terms into some "mathematical domain" of "true values"
2013-09-10 18:11:12	ski	usually including a "bottom" value
2013-09-10 18:11:30	ski	it doesn't take into account the steps taken by a machine to compute these values
2013-09-10 18:11:53	ski	reduction belongs to operational semantics
2013-09-10 18:12:00	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-10 18:12:02	--	pycabrera is now known as cppcabrera_afk
2013-09-10 18:12:05	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Ping timeout: 245 seconds)
2013-09-10 18:12:14	<--	_1126 (~1126@saturn.lileth.net) has quit (Read error: Connection reset by peer)
2013-09-10 18:12:19	-->	Heisenmort (~Mortomes_@92-108-125-137.dynamic.upc.nl) has joined #haskell
2013-09-10 18:12:26	ski	(if you want, you could think of den. sem. as a compiler from expressions into math)
2013-09-10 18:12:35	flebron	I suppose I've been using a mix, then. I've been assigning the concept of bottom to two things, the things that do not finish reduction successfully.
2013-09-10 18:12:46	flebron	(Which is either those that never finish reducing, or that finish unsuccessfully.)
2013-09-10 18:12:55	flebron	(i.e. bottom = bottom or undefined)
2013-09-10 18:13:07	<--	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has quit (Ping timeout: 264 seconds)
2013-09-10 18:13:15	<--	Heisenmort (~Mortomes_@92-108-125-137.dynamic.upc.nl) has quit (Changing host)
2013-09-10 18:13:16	-->	Heisenmort (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 18:13:23	-->	sinistersnare (cddef8b0@gateway/web/cgi-irc/kiwiirc.com/ip.205.222.248.176) has joined #haskell
2013-09-10 18:13:46	-->	_1126 (~1126@saturn.lileth.net) has joined #haskell
2013-09-10 18:14:05	ski	well, you can relate operational semantics and denotational semantics to each other. but they're separate domains, so to speak
2013-09-10 18:14:11	-->	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has joined #haskell
2013-09-10 18:14:48	<--	fizbin (~Adium@pool-96-235-147-85.cmdnnj.east.verizon.net) has quit (Ping timeout: 256 seconds)
2013-09-10 18:15:08	<--	yacks (~py@103.6.159.103) has quit (Read error: Connection reset by peer)
2013-09-10 18:15:16	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 18:15:20	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-09-10 18:15:39	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 18:15:44	flebron	So what is the definition in each case of a constructor function, vis. a normal function?
2013-09-10 18:16:08	flebron	(I'm using Haskell as part of a freshman algebra course I'm teaching, and I want to be pedantically correct in case of any questions.)
2013-09-10 18:16:24	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-10 18:16:51	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-10 18:16:54	-->	litherum1 (~Litherum@76.74.153.49) has joined #haskell
2013-09-10 18:17:11	ski	in terms of operational semantics, you'd single out s subset of the terms as values (to be distinguished from the den. sem. notion of value)
2013-09-10 18:17:17	ski	so you might have
2013-09-10 18:17:24	-->	erochester (~erocheste@137.54.44.28) has joined #haskell
2013-09-10 18:17:56	ski	  e  ::=  ( e , e )  |  pi_0 e  |  pi_1 e
2013-09-10 18:18:29	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 18:18:32	 *	Lethalman has to read something for the first time about operational semantics
2013-09-10 18:18:33	ski	       |  iota_0 e  |  iota_1 e  |  case e of iota_0 x -> e | iota_1 x -> e
2013-09-10 18:18:42	Lethalman	ski, could you point me to some paper for absolute beginners? :-)
2013-09-10 18:18:53	ski	       |  \ x . e  |  e e
2013-09-10 18:19:00	ski	       |  x  |  let x = e in e
2013-09-10 18:19:03	ski	or some such
2013-09-10 18:19:05	<--	danilo2 (959cc887@gateway/web/freenode/ip.149.156.200.135) has quit (Ping timeout: 250 seconds)
2013-09-10 18:19:06	Lethalman	(ops, sorry broke your output)
2013-09-10 18:19:07	ski	and then perhaps
2013-09-10 18:19:18	ski	  v  ::=  ( v , v )
2013-09-10 18:19:31	ski	       |  iota_0 v  |  iota_1 v
2013-09-10 18:19:40	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-10 18:19:41	ski	       |  \ x . e
2013-09-10 18:20:00	flebron	I'm not sure I understand the use of | here.
2013-09-10 18:20:09	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Quit: WeeChat 0.4.1)
2013-09-10 18:20:12	ski	alternative
2013-09-10 18:20:35	ski	`e  ::=  X  |  Y' means "an `e' can be of the shape `X', alternatively of the shape `Y'"
2013-09-10 18:20:48	<--	ptek (~textual@217.64.164.1) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 18:20:50	<--	raichoo (~raichoo@2001:470:b626:11:f2de:f1ff:fe42:776b) has quit (Ping timeout: 245 seconds)
2013-09-10 18:20:56	ski	this is (more or less) BNF, used to describe the abstract syntax
2013-09-10 18:21:09	flebron	Oh OK, so every one was | except the one before "case e of".
2013-09-10 18:21:15	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Ping timeout: 264 seconds)
2013-09-10 18:21:16	flebron	That one was "such that".
2013-09-10 18:21:23	ski	sorry ?
2013-09-10 18:21:40	flebron	"|   iota_0 e  |  iota_1 e  |  case e of iota_0 x -> e | iota_1 x -> e"
2013-09-10 18:21:46	<--	swistak35 (swistak35@2a01:4f8:160:11e4::10) has quit (Excess Flood)
2013-09-10 18:21:52	flebron	I can't parse that - "e looks like case e of iota_0 x"?
2013-09-10 18:22:08	-->	alszar (alszar@nat/rackspace/x-jlvbongnoxspckjg) has joined #haskell
2013-09-10 18:22:33	-->	ashnur (~ashnur@79.117.76.15) has joined #haskell
2013-09-10 18:23:04	lightquake	I have an array that I'm going to be filling in mostly sequentially (i.e., from 0 up to N), but where the maximum size of the array might change and where might be some 'holes' I have to go fill in later
2013-09-10 18:23:07	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-10 18:23:20	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-10 18:23:34	lightquake	for example, I might fill in 0-19, 21-30, 35-50, and then later fill in 20, 31-34
2013-09-10 18:23:36	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-10 18:23:39	-->	swistak35 (swistak35@2a01:4f8:160:11e4::10) has joined #haskell
2013-09-10 18:23:43	lightquake	which array-like structure do I want?
2013-09-10 18:24:02	ski	Lethalman : perhaps try "Practical Foundations for Programming Languages" by Robert Harper in 2013-07-05 (so far) at <http://www.cs.cmu.edu/~rwh/plbook/>
2013-09-10 18:24:15	Lethalman	ski, thanks
2013-09-10 18:24:16	<--	RoXtein (~roxtein@di18.di.fct.unl.pt) has quit (Quit: Leaving)
2013-09-10 18:24:54	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Quit: dpathakj)
2013-09-10 18:24:56	sclv_	w00t most haskell.org services back up now
2013-09-10 18:25:45	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-10 18:25:46	Lethalman	ski, ah I was thinking of "A Structural Approach to Operational Semantics"
2013-09-10 18:25:49	ski	flebron : one alternative form for `e' is `iota_0 e' (where `e' is again a placeholder, a nonterminal, to be replaced anew, recursively), another is `iota_1 e', a third is `case e of iota_0 x -> e | iota_1 x -> e'
2013-09-10 18:26:07	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-10 18:26:21	<--	sinistersnare (cddef8b0@gateway/web/cgi-irc/kiwiirc.com/ip.205.222.248.176) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2013-09-10 18:26:22	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-10 18:26:23	flebron	Oh OK e is a type variable, each time it's a different 'e'.
2013-09-10 18:26:48	flebron	Well, type variable in the usual semantics, (a, a) means same type, but could have different values of type a.
2013-09-10 18:26:51	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-10 18:27:07	lightquake	ah, sounds like I want Sequence
2013-09-10 18:27:07	ski	flebron : in Haskell, this could correspond to `data Expr = Pair Expr Expr | Pi0 Expr | Pi1 Expr | Iota0 Expr | Iota1 Expr | CaseIota Expr (Ident,Expr) (Ident,Expr) | Abstract Ident Expr | Apply Expr Expr | Var Ident | LetIn Ident Expr Expr'
2013-09-10 18:27:14	flebron	In this case, you use e as a set, and say that elements of e can be "case x of iota_0 y" where x and y are things in e?
2013-09-10 18:27:18	flebron	Right, right.
2013-09-10 18:27:24	-->	cfricke_ (~cfricke@96.45.197.22) has joined #haskell
2013-09-10 18:27:43	flebron	What would the iotas represent here? (I assume pis are projections)
2013-09-10 18:27:46	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Disconnected by services)
2013-09-10 18:27:52	--	cfricke_ is now known as cfricke
2013-09-10 18:27:54	ski	`Left' and `Right'
2013-09-10 18:28:01	ski	while the `pi's are `fst' and `snd'
2013-09-10 18:28:15	-->	cppcabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 18:28:35	ski	(`pi' and `iota' is the traditional names. sometimes `projl',`projr',`inl',`inr' or similar are used)
2013-09-10 18:28:39	-->	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has joined #haskell
2013-09-10 18:28:46	<--	cppcabrera_afk (~alejandro@72.32.115.231) has quit (Ping timeout: 245 seconds)
2013-09-10 18:28:49	flebron	Right, from products and coproducts.
2013-09-10 18:28:58	flebron	What is Abstract? \ident -> expr?
2013-09-10 18:29:03	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-10 18:29:04	ski	lambda abstraction
2013-09-10 18:29:17	-->	scripty (~scripty@117.192.175.240) has joined #haskell
2013-09-10 18:29:19	--	cppcabrera is now known as cppcabrera_afk
2013-09-10 18:29:24	flebron	OK, and where would constructor functions fit in this language?
2013-09-10 18:29:30	<--	visof (~visof@197.133.197.6) has quit (Ping timeout: 264 seconds)
2013-09-10 18:29:45	ski	`iota_0' and `iota_1' would play the role of constructor functions
2013-09-10 18:29:58	<--	kier (~kier@host86-173-144-219.range86-173.btcentralplus.com) has quit (Quit: Lost terminal)
2013-09-10 18:30:05	<--	anRch (~markmilli@ip-64-134-96-145.public.wayport.net) has quit (Quit: anRch)
2013-09-10 18:30:05	ski	and possibly, depending on how you think about it, also `(...,...)'
2013-09-10 18:30:37	flebron	Ah, OK.
2013-09-10 18:30:38	ski	you could instead add a new nonterminal `con' and add `con e' as an alternative
2013-09-10 18:31:00	flebron	OK so it's adding new terms to the language.
2013-09-10 18:31:09	ski	(and assume it's populated with whatever constructors you have in the language)
2013-09-10 18:31:16	<--	wting (~wting@192.241.232.101) has quit (Quit: leaving)
2013-09-10 18:31:18	flebron	Versus functions which aren't new, they are all the same type of term, "Apply Expr Expr".
2013-09-10 18:31:32	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-10 18:31:44	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-10 18:31:55	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-10 18:31:57	ski	yes, new canonical forms
2013-09-10 18:32:19	-->	ksf (~ksf@d069212.adsl.hansenet.de) has joined #haskell
2013-09-10 18:32:46	flebron	OK, how does this jive with the notion that :t Just is a -> Maybe a?
2013-09-10 18:32:56	-->	tibbe (tibbe@nat/google/x-fbqloqwparibxihj) has joined #haskell
2013-09-10 18:33:00	ski	anyway, you'd define a binary relation `~>' on `e', and then extend to its reflexive-transitive closure
2013-09-10 18:33:43	<--	lurkorg (~alex@145.255.244.150) has left #haskell
2013-09-10 18:33:44	ski	well, that's a conventient thing, so we can say `Just' on its own as an expression, rather than having to say `\x -> Just x' (as one has to do in OCaml)
2013-09-10 18:33:58	ski	s/conventient/convenient/
2013-09-10 18:34:10	<--	tazjin (~tazjin@2a01:2b0:3041:3018:14d6:c0f3:85fa:af5d) has quit (Ping timeout: 245 seconds)
2013-09-10 18:34:12	<--	Lethalman (~luca@net77-43-20-100.mclink.it) has quit (Quit: Sto andando via)
2013-09-10 18:34:13	flebron	So it's not strictly true that ctors are functions?
2013-09-10 18:34:26	ski	*nod*
2013-09-10 18:34:42	ski	well, s/true/necessary/
2013-09-10 18:34:52	flebron	Ah, OK. Cool, the idea seems consistent. Thanks :))
2013-09-10 18:35:07	YayMe`	Is the <- supposed to be the element-of symbol from math?
2013-09-10 18:35:22	ski	probably depends on context
2013-09-10 18:35:33	ski	`<-' as occuring where ?
2013-09-10 18:35:40	merijn	YayMe`: in list comprehensions, yes
2013-09-10 18:35:50	YayMe`	in list comprehensions it makes perfect sense that it would be, the other day it just dawned on me it looks *kind of* similar
2013-09-10 18:35:50	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 18:35:56	merijn	In do-syntax that doesn't necessarily makes less sense
2013-09-10 18:36:03	merijn	eh
2013-09-10 18:36:11	merijn	doesn't necessarily make sense
2013-09-10 18:36:15	ski	YayMe` : in Miranda, list comprehensions are called "ZF comprehensions"
2013-09-10 18:36:18	flebron	(In fact, the do sintax for the list monad _is_ the <- from list comprehensions :p)
2013-09-10 18:36:20	<--	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has quit (Ping timeout: 256 seconds)
2013-09-10 18:36:23	YayMe`	merijn: true, but it still somewhat makes sense
2013-09-10 18:36:30	ski	(where "ZF" being this common axiom system for set theory ..)
2013-09-10 18:36:32	applikativ	in list comprehensios you can sort of read it that way
2013-09-10 18:36:34	flebron	(And with MonadComprehensions, your lists too can be of any monad!)
2013-09-10 18:36:35	merijn	-XMonadComprehensions :)
2013-09-10 18:37:06	applikativ	what they have to do with ZF in particular God knows; as if it were a syntax
2013-09-10 18:37:07	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 18:37:18	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 18:37:27	ski	`MonadComprehensions' : comprehending monads has never been simpler !
2013-09-10 18:37:36	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-10 18:37:37	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 18:37:43	-->	Ralith (~ralith@66.114.129.162) has joined #haskell
2013-09-10 18:37:52	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-10 18:38:07	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-10 18:38:23	applikativ	[x++y| x <- readFile "a.txt" , y <- readFile "b.txt"] >>= writeFile "c.txt"
2013-09-10 18:38:23	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Read error: Connection reset by peer)
2013-09-10 18:38:48	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 18:38:48	applikativ	need a bit of join syntax
2013-09-10 18:38:51	YayMe`	i.e. x <- randomIO blabla does kind of make sense to say "x element of the set of the return from randomIO blabla
2013-09-10 18:39:20	YayMe`	applikativ: really? That is interesting...
2013-09-10 18:39:28	joelteon	why does cabal repl exit 0 without doing anything?
2013-09-10 18:39:32	applikativ	main = join [writeFile "b.txt" (x++y) | x <- readFile "a.txt" , y <- readFile "b.txt"]
2013-09-10 18:39:43	-->	Thra11 (~Thra11@201.58.113.87.dyn.plus.net) has joined #haskell
2013-09-10 18:39:46	applikativ	whoops meant to write c.txt
2013-09-10 18:40:01	-->	mjs2600 (~user@24.106.194.14) has joined #haskell
2013-09-10 18:40:27	-->	fredel (~fredel@151.50.178.31) has joined #haskell
2013-09-10 18:40:28	ski	  [() | x <- readFile "a.txt" , y <- readFile "b.txt" , () <- writeFile "c.txt" (x ++ y)]
2013-09-10 18:40:32	-->	artyomkazak (~artyomkaz@94.25.228.61) has joined #haskell
2013-09-10 18:40:53	YayMe`	ski / applikativ : So either of you have a sense that the structure I spoke about is (or almost is) a monad/monoid/functor/semigroupoid/hylomorphic arrow or whatever other types of structures there are formal understandings of?
2013-09-10 18:40:58	-->	wojtekM_ (~user@78.8.252.90) has joined #haskell
2013-09-10 18:41:19	applikativ	ah, well there you are, still less than ideal ski
2013-09-10 18:41:21	YayMe`	or is it more of just some thing I put together, and good for me.
2013-09-10 18:41:33	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-10 18:41:39	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 18:41:41	ski	  () <- catFiles a b c  =  x <- readFile a , y <- readFile b , () <- writeFile c (x ++ y)   -- ho, hum
2013-09-10 18:41:44	<--	mjs2600 (~user@24.106.194.14) has left #haskell
2013-09-10 18:41:53	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-10 18:42:06	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-10 18:42:07	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-10 18:42:08	applikativ	it's a menace that we cant use them with parallel comprehensions
2013-09-10 18:42:09	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-10 18:42:18	YayMe`	[ writeFile "c.txt" (x ++ y) | x <- readFile "a.txt", y <- readFile "b.txt" ] no?
2013-09-10 18:42:23	ski	YayMe` : i was pondering whether maybe `Cont Handler a' would be useful in your case
2013-09-10 18:42:26	-->	werdem (~werdem@151.50.178.31) has joined #haskell
2013-09-10 18:42:30	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-10 18:42:31	ski	YayMe` : needs `join'
2013-09-10 18:42:34	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 18:42:37	YayMe`	10:42 *** rishabhjain_ JOIN
2013-09-10 18:42:40	applikativ	YayMe`: that's an IO (IO ()) so you need join or ski's device
2013-09-10 18:42:43	wojtekM_	> pure case 1 of {1->1; 2->2}
2013-09-10 18:42:44	wojtekM_	 
2013-09-10 18:42:44	lambdabot	  <hint>:1:6: parse error on input `case'
2013-09-10 18:42:46	YayMe`	oops
2013-09-10 18:42:50	wojtekM_	why?
2013-09-10 18:42:52	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 18:42:53	--	rishabhjain_ is now known as rishabhjain
2013-09-10 18:42:55	<--	artyomkazak1 (~artyomkaz@94.25.228.31) has quit (Ping timeout: 245 seconds)
2013-09-10 18:43:19	applikativ	> pure (case 1 of {1->1; 2->2}) :: [Int]
2013-09-10 18:43:20	lambdabot	  [1]
2013-09-10 18:43:25	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-10 18:43:27	 *	ski prefers to be left with his own device
2013-09-10 18:43:35	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-10 18:43:37	-->	ksf_ (~ksf@d129146.adsl.hansenet.de) has joined #haskell
2013-09-10 18:43:41	wojtekM_	applikativ: Yes, but why?
2013-09-10 18:43:44	ski	wojtekM_ : no good reason, afaict
2013-09-10 18:44:10	wojtekM_	sometimes $ helps, but not always
2013-09-10 18:44:12	applikativ	> pure do return () :: [[90]]
2013-09-10 18:44:13	lambdabot	  <hint>:1:6: parse error on input `do'
2013-09-10 18:44:15	applikativ	> pure do return () :: [[()]]
2013-09-10 18:44:17	lambdabot	  <hint>:1:6: parse error on input `do'
2013-09-10 18:44:27	applikativ	> pure $ do return () :: [[()]]
2013-09-10 18:44:28	lambdabot	  Couldn't match expected type `[()]' with actual type `()'
2013-09-10 18:44:41	applikativ	oh genuine type idiocy
2013-09-10 18:44:41	YayMe`	ski: where a is (Hw, Ev) ? does it make sense what I said in that it could be seen as a tree of continuations; depending on your input the continuations will return node A or node B which is another continuation
2013-09-10 18:45:00	<--	ksf (~ksf@d069212.adsl.hansenet.de) has quit (Ping timeout: 245 seconds)
2013-09-10 18:45:05	applikativ	oh no i get it.
2013-09-10 18:45:06	<--	yfyf (~yfyf@77-172-242-47.ip.telfort.nl) has quit (Quit: leaving)
2013-09-10 18:45:34	-->	robindv (~robin@celp.nl) has joined #haskell
2013-09-10 18:45:35	applikativ	wojtekM_: yes i don't know why theres not a caesura before 'case' and 'do'
2013-09-10 18:45:43	-->	wereHamster (~tomc@azeroth.caurea.org) has joined #haskell
2013-09-10 18:46:08	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-10 18:46:08	wojtekM_	So I should just put braces around my case and move on?
2013-09-10 18:46:18	applikativ	people frequently complain about having to write .... $ do ..., when it seems like the parser can hardly fail to start a mental parens at 'do'
2013-09-10 18:46:34	YayMe`	[ writeFile "c.txt" x | x <- readFile "a.txt" >>= (++) (readFile "b.txt") ]
2013-09-10 18:46:35	YayMe`	no?
2013-09-10 18:46:39	applikativ	> pure $ case 1 of {1->1; 2->2} :: [Int]
2013-09-10 18:46:39	ski	> (`asTypeOf` [[]]) $ pure $ do return ()
2013-09-10 18:46:40	lambdabot	  [1]
2013-09-10 18:46:40	-->	visof (~visof@197.161.65.28) has joined #haskell
2013-09-10 18:46:41	lambdabot	  [[()]]
2013-09-10 18:46:50	applikativ	wojtekM_: you can use $ if you like
2013-09-10 18:47:05	<--	petapetapeta (~Peter@130.225.165.43) has quit (Ping timeout: 245 seconds)
2013-09-10 18:47:13	hpaste	wereHamster pasted “getJSON” at http://lpaste.net/92836
2013-09-10 18:47:20	applikativ	frankly it reads better than the proposed alternative syntax or parser rule would
2013-09-10 18:47:23	wojtekM_	applikativ: $ doesn't work in my code, only () works
2013-09-10 18:47:25	ski	YayMe` : not sure if `Handler' is quite continuations, but could be related anyway
2013-09-10 18:47:30	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Client Quit)
2013-09-10 18:47:34	wereHamster	can somebody pleaes have a look at the code ^^^ and tell me if it leaks memory or file descriptors?
2013-09-10 18:47:35	-->	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has joined #haskell
2013-09-10 18:47:37	b2coutts	does anyone know what the sanest way is of talking to youtube with haskell?
2013-09-10 18:47:44	applikativ	oh i thought i was writing your code let me look at history
2013-09-10 18:47:53	ski	YayMe` : `Cont Handler a' would be `(a -> Handler) -> Handler'
2013-09-10 18:48:04	applikativ	b2coutts: a dos-attack program?
2013-09-10 18:48:07	<--	Argue (~Argue@112.209.122.237) has quit (Quit: Leaving)
2013-09-10 18:48:17	b2coutts	as far as I can tell, there's no youtube API for haskell, and right now I'm using the ugly hack of using wget and parsing the HTML directly
2013-09-10 18:48:29	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-10 18:48:32	<--	erochester (~erocheste@137.54.44.28) has quit (Quit: Leaving.)
2013-09-10 18:48:48	b2coutts	while making very strong assumptions about the structure of the HTML, so whenever youtube decides to change their HTML structure my code will break
2013-09-10 18:48:50	haasn	I'd look for something related to libquvi
2013-09-10 18:48:59	haasn	but I don't see anything on hayoo
2013-09-10 18:49:00	ski	YayMe` : your `[ writeFile "c.txt" x | x <- readFile "a.txt" >>= (++) (readFile "b.txt") ]' both needs `join' and also needs a `liftM',`fmap' for the `(++)'
2013-09-10 18:49:22	exicer	b2coutts: Which library do you use to parse HTML ?
2013-09-10 18:49:26	YayMe`	Oo yeah, I see why I need the join.
2013-09-10 18:49:41	applikativ	b2coutts: man it seems true, the only youtube thing on hackage is a script that uses curl. I wonder if we can vote it off of hackage?
2013-09-10 18:49:43	<--	owst (~owst@tarsier.ecs.soton.ac.uk) has quit (Ping timeout: 264 seconds)
2013-09-10 18:49:56	YayMe`	the liftM is less explicable to me?
2013-09-10 18:50:21	ski	@type readFile "a.txt" >>= (readFile "b.txt" ++)
2013-09-10 18:50:22	lambdabot	    Couldn't match expected type `[Char]' with actual type `IO String'
2013-09-10 18:50:23	lambdabot	    In the return type of a call of `readFile'
2013-09-10 18:50:23	lambdabot	    In the first argument of `(++)', namely `readFile "b.txt"'
2013-09-10 18:50:35	YayMe`	Oo I see it
2013-09-10 18:50:43	YayMe`	ah yeah I forgot about lambdabot
2013-09-10 18:50:50	-->	madjestic (~madjestic@31.20.125.64) has joined #haskell
2013-09-10 18:50:50	ski	@type liftM (++) . readFile "b.txt" =<< readFile "a.txt"
2013-09-10 18:50:51	lambdabot	    Couldn't match expected type `String -> IO [a0]'
2013-09-10 18:50:52	lambdabot	                with actual type `IO String'
2013-09-10 18:50:52	lambdabot	    In the return type of a call of `readFile'
2013-09-10 18:51:10	b2coutts	exicer: I'm basically just using basic string/list functions :P
2013-09-10 18:51:12	applikativ	b2coutts: or are you 'periodic'? https://github.com/periodic/youtube-haskell
2013-09-10 18:51:16	YayMe`	I was thinking String -> IO a but I forget I'm handing ++ an IO String when it needs a String
2013-09-10 18:51:22	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-10 18:51:26	YayMe`	or rather needs an [a]
2013-09-10 18:51:34	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-10 18:51:36	--	functorfun is now known as funfunctor
2013-09-10 18:51:40	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 245 seconds)
2013-09-10 18:51:40	<--	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has quit (Ping timeout: 245 seconds)
2013-09-10 18:51:42	b2coutts	applikativ: not him; I'm basically making a thing that lets you use the CLI to search youtube and queue up songs from it in MPD
2013-09-10 18:51:52	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-10 18:51:54	<--	zzing (~textual@wlan.cspc1.uwindsor.ca) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 18:51:58	b2coutts	using quvi to convert youtube URLs into things that MPD understands
2013-09-10 18:52:05	-->	justinleitgeb (~justinlei@186.101.162.167) has joined #haskell
2013-09-10 18:52:22	-->	Gentlecat (~Roman@79.105.226.165) has joined #haskell
2013-09-10 18:52:25	b2coutts	it's at the point where I'm sort of considering uploading/sharing the code, but I don't want to share something that uses an unreliable hack to handle searching
2013-09-10 18:52:33	<--	justinleitgeb (~justinlei@186.101.162.167) has quit
2013-09-10 18:52:47	<--	divyansr (~divyansr@106.51.65.240) has quit (Remote host closed the connection)
2013-09-10 18:52:49	-->	justinleitgeb (~justinlei@186.101.162.167) has joined #haskell
2013-09-10 18:52:53	ski	@type (`liftM` readFile "b.txt") . (++) =<< readFile "a.txt"  -- oh, right
2013-09-10 18:52:54	lambdabot	IO [Char]
2013-09-10 18:52:57	wereHamster	or where can I get help re. conduits?
2013-09-10 18:53:09	-->	ecr (~Thunderbi@2620:101:8003:200:6938:cf26:ea77:f799) has joined #haskell
2013-09-10 18:53:21	YayMe`	b2coutts doesn't youtube have a REST API that would be far more consistent than the HTML? (as well as plausibly returning JSON you could just use a JSON serializer for?)
2013-09-10 18:54:12	YayMe`	https://developers.google.com/youtube/?csw=1
2013-09-10 18:54:29	ski	flebron : anyway, you'd construct this so that no "value" can be reduced, and then a term has a normal form if there is a sequence of reduction steps ending in a value
2013-09-10 18:54:36	b2coutts	YayMe`: I have very limited experience with such things, and the googling I did suggested that google had APIs for major languages like python, but nothing for haskell
2013-09-10 18:54:58	flebron	ski: Those would be operational semantics, correct?
2013-09-10 18:55:12	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 18:55:17	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Read error: Connection reset by peer)
2013-09-10 18:55:19	YayMe`	b2coutts: those are clients not APIs, the API is simple http requests. You're already making simple http requests, you just need to use the REST API URLs instead of the actual html page URLs
2013-09-10 18:55:21	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-10 18:55:27	hpaste	wereHamster revised “getJSON”: “No title” at http://lpaste.net/92836
2013-09-10 18:55:35	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-10 18:55:36	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-10 18:55:44	ski	YayMe` : anyway, i'm still not clear on how `Handler's are used
2013-09-10 18:55:44	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-10 18:55:54	b2coutts	YayMe`: ah, I see, so they essentially have pages up that aren't meant to actually be visited by users, but rather read by code?
2013-09-10 18:55:58	mstksg	a package i'm using hides a runReaderT function to unwrap one of their monads and I'd like to use it; however, the environment type is also hidden.  is there anything I can do?
2013-09-10 18:56:03	b2coutts	(and they presumably remain somewhat consistent)
2013-09-10 18:56:06	-->	wting (~wting@192.241.163.137) has joined #haskell
2013-09-10 18:56:15	<--	hexagoxel (~hexagoxel@pc228186.wlan.uni-kiel.de) has quit (Ping timeout: 245 seconds)
2013-09-10 18:56:24	<--	cdxr (~cdx@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Quit: leaving)
2013-09-10 18:56:26	<--	fredel (~fredel@151.50.178.31) has quit (Remote host closed the connection)
2013-09-10 18:56:38	-->	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has joined #haskell
2013-09-10 18:56:43	mstksg	by use it, i mean re-implement it in my own project instead of having to import the hidden function
2013-09-10 18:56:47	-->	raichoo (~raichoo@mue-88-130-18-248.dsl.tropolys.de) has joined #haskell
2013-09-10 18:56:58	mstksg	but i'm having problems because it requires an environment with a hidden data constructor
2013-09-10 18:57:11	YayMe`	ski: there's a current one for your user session, user does some things which fire events (or hardware does), those events are sent to the sessions current handler which returns the next handler which should be your current handler. You can imagine the "current handler" as like being the focal point of a zipper on a continuation tree (the constructor for handlers actually takes a previous handler so the zipper analo
2013-09-10 18:57:11	YayMe`	gy is quite right if that helps any)
2013-09-10 18:57:13	ski	i can imagine `doEvt :: Hw -> Ev -> Handler -> Handler', which could be abstracted to `doEvt :: Ev -> ReaderT Hw (Cont Handler ())' or something, if desired
2013-09-10 18:57:46	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-10 18:57:54	ski	@unmtl ReaderT Hw (Cont Handler) ()
2013-09-10 18:57:55	lambdabot	Hw -> (Cont Handler) ()
2013-09-10 18:57:59	ski	@botsmack
2013-09-10 18:58:00	lambdabot	:)
2013-09-10 18:58:19	robindv	Hi, i'm using knuths worst case algorithm for a worst-case solution for mastermind; the statement on line 65 is very slow because it has to evaluate all the reactions. Is there a more clever way to solve this? See http://lpaste.net/3725877265922260992
2013-09-10 18:58:30	YayMe`	@unmtl ReaderT (Hw, Ev) (Cont Handler) ()
2013-09-10 18:58:30	lambdabot	Hw -> Ev -> (Cont Handler) ()
2013-09-10 18:58:47	<--	werdem (~werdem@151.50.178.31) has quit (Remote host closed the connection)
2013-09-10 18:59:12	ski	does the above `doEvt' idea sound right ?
2013-09-10 18:59:25	ski	who decides to "do an `Ev'" ?
2013-09-10 18:59:31	ski	user code, or system code ?
2013-09-10 18:59:33	YayMe`	yes
2013-09-10 18:59:42	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-10 19:00:04	ski	iow, does user code decide "i want to do this", and then eventually fires away events to the system ?
2013-09-10 19:00:06	YayMe`	sorry, yes it sounds right, and actually the hardware fires the user code
2013-09-10 19:00:10	<--	tibbe (tibbe@nat/google/x-fbqloqwparibxihj) has quit (Quit: tibbe)
2013-09-10 19:00:17	ski	or perhaps the system provides the events, and the user code just handles them ?
2013-09-10 19:00:21	ski	or perhaps both ?
2013-09-10 19:00:39	YayMe`	system provides events, user code just handles them
2013-09-10 19:00:40	-->	xrq (~user@unaffiliated/xrq) has joined #haskell
2013-09-10 19:00:54	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-09-10 19:01:09	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-10 19:01:17	-->	divyansr (~divyansr@106.51.65.240) has joined #haskell
2013-09-10 19:01:22	YayMe`	the hardware specifically kicks out events which my user code picks up and runs with.
2013-09-10 19:01:24	<--	madjestic (~madjestic@31.20.125.64) has quit (Ping timeout: 240 seconds)
2013-09-10 19:01:30	<--	divyansr (~divyansr@106.51.65.240) has quit (Remote host closed the connection)
2013-09-10 19:01:41	ski	the above caller of `doEvt' fires events could, i think, be done with `Handler' as the "answer"/"final result" type of a continuation monad
2013-09-10 19:02:10	ski	but it sounds like, if present, `doEvt' would be on the system side of things
2013-09-10 19:02:17	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-10 19:02:19	-->	edvo (~edvo@tmo-111-88.customers.d1-online.com) has joined #haskell
2013-09-10 19:02:19	YayMe`	yeah, that's exactly right
2013-09-10 19:02:23	<--	edvo (~edvo@tmo-111-88.customers.d1-online.com) has quit (Client Quit)
2013-09-10 19:02:26	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Quit: Leaving)
2013-09-10 19:02:29	ski	so user code would probably then not have much use for `Cont Handler'
2013-09-10 19:02:38	-->	edvo (~edvo@tmo-111-88.customers.d1-online.com) has joined #haskell
2013-09-10 19:02:55	YayMe`	other than knowing it is in the context of one if I've structured it right
2013-09-10 19:03:05	-->	ksf__ (~ksf@d166148.adsl.hansenet.de) has joined #haskell
2013-09-10 19:03:10	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-10 19:03:27	-->	tibbe (tibbe@nat/google/x-enlnregzgvpjasza) has joined #haskell
2013-09-10 19:03:28	-->	fizbin (~Adium@pool-173-72-91-234.cmdnnj.east.verizon.net) has joined #haskell
2013-09-10 19:03:33	ski	user code would perhaps have use of an operation which polls for the next event (or next event passed to its subsystem)
2013-09-10 19:03:34	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-10 19:03:38	ski	or perhaps there is to be no polling
2013-09-10 19:03:45	YayMe`	No polling
2013-09-10 19:03:53	ski	(well, polling or blocking, i.e.)
2013-09-10 19:04:14	YayMe`	no blocking either actually
2013-09-10 19:04:25	<--	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-10 19:04:43	ski	what should user code be able to do, in response to it being fired as a result of the system responding to an event ?
2013-09-10 19:04:48	<--	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has quit (Remote host closed the connection)
2013-09-10 19:04:55	ski	send events of its own ?
2013-09-10 19:04:55	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-10 19:05:00	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 245 seconds)
2013-09-10 19:05:02	ski	manipulate hardware ?
2013-09-10 19:05:09	YayMe`	manipulate hardware yes
2013-09-10 19:05:21	YayMe`	and then move to the next handler which knows about the next manipulations that need be done
2013-09-10 19:05:33	-->	LAMMJohnson (~ja@user-5af437c3.broadband.tesco.net) has joined #haskell
2013-09-10 19:05:38	-->	madjestic (~madjestic@178.231.216.222) has joined #haskell
2013-09-10 19:05:39	applikativ	robindv: i cant concentrate adequately to find the klunk in here; but the important point is that colours::[Colour]; colours=[minBound..maxBound] ;)
2013-09-10 19:05:46	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 19:05:57	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-10 19:06:00	-->	cfricke_ (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-10 19:06:06	<--	ksf_ (~ksf@d129146.adsl.hansenet.de) has quit (Ping timeout: 264 seconds)
2013-09-10 19:06:09	ski	so no cascaded event sends ?
2013-09-10 19:06:09	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 19:06:15	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-10 19:06:22	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-10 19:06:55	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 19:06:58	robindv	applikativ: thanks for your look :)
2013-09-10 19:07:52	YayMe`	ski: Right.
2013-09-10 19:08:11	<--	cfricke (~cfricke@96.45.197.22) has quit (Ping timeout: 240 seconds)
2013-09-10 19:08:16	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-10 19:09:02	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-10 19:09:06	<--	scripty (~scripty@117.192.175.240) has quit (Read error: Connection reset by peer)
2013-09-10 19:09:06	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 19:09:21	-->	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has joined #haskell
2013-09-10 19:09:30	-->	scripty (~scripty@117.192.175.240) has joined #haskell
2013-09-10 19:09:32	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 19:10:05	 *	ski would like to see some silly example of how handlers are written
2013-09-10 19:10:08	<--	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has quit (Quit: WeeChat 0.4.1)
2013-09-10 19:10:43	-->	_d3f (~gnu@46.183.216.234) has joined #haskell
2013-09-10 19:10:56	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-10 19:11:16	<--	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has quit (Quit: WeeChat 0.4.0)
2013-09-10 19:11:55	<--	Targen (~iguana@190.73.206.135) has quit (Ping timeout: 260 seconds)
2013-09-10 19:11:59	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Quit: Computer has gone to sleep.)
2013-09-10 19:12:05	<--	tibbe (tibbe@nat/google/x-enlnregzgvpjasza) has quit (Quit: tibbe)
2013-09-10 19:12:08	 *	applikativ , when he hears the word 'knuth' just gets an image of mutually recursive latex macros expanding each other and everything into an obscure error; I think we are supposed to feel some uplift though
2013-09-10 19:12:09	-->	toplelnoob (~toplelnoo@BSN-143-124-148.dial-up.dsl.siol.net) has joined #haskell
2013-09-10 19:13:04	YayMe`	loginHandler = Handler \(hw, ev) -> case attemptLogin (userInputFrom ev) of True -> mainHandler; _ -> sendMessage loginFailed hw >> loginHandler
2013-09-10 19:13:11	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-10 19:13:13	YayMe`	ski: tell me if that makes any sense at all
2013-09-10 19:13:24	--	cppcabrera_afk is now known as cppcabrera
2013-09-10 19:13:35	-->	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has joined #haskell
2013-09-10 19:13:49	-->	petapetapeta (~Peter@130.225.165.43) has joined #haskell
2013-09-10 19:13:59	<--	visof (~visof@197.161.65.28) has quit (Read error: Connection reset by peer)
2013-09-10 19:14:04	<--	hc (hc@public.chaos.hg.tu-darmstadt.de) has quit (Ping timeout: 268 seconds)
2013-09-10 19:14:10	YayMe`	(i only modeled one of the two event types on the handler, we can ignore that there are two types of events for the moment as their implementations are quite similar)
2013-09-10 19:14:31	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-10 19:14:33	-->	oleo (~oleo@xdsl-78-35-172-62.netcologne.de) has joined #haskell
2013-09-10 19:14:35	<--	litherum1 (~Litherum@76.74.153.49) has quit (Quit: Leaving.)
2013-09-10 19:14:45	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 276 seconds)
2013-09-10 19:14:46	<--	ashnur (~ashnur@79.117.76.15) has quit (Quit: WeeChat 0.4.1)
2013-09-10 19:15:14	<--	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has left #haskell
2013-09-10 19:15:17	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-10 19:15:32	-->	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has joined #haskell
2013-09-10 19:15:36	-->	phienone_ (~ph@nappo.lnet.fi) has joined #haskell
2013-09-10 19:16:13	<--	phienone_ (~ph@nappo.lnet.fi) has quit (Client Quit)
2013-09-10 19:18:50	-->	xuser (~xuser@unaffiliated/xuser) has joined #haskell
2013-09-10 19:19:05	ski	hmm, `inputUser :: Cont Handler (Hw,Ev); inputUser = Cont $ \userInput -> Handler userInput someHardwareEventHandler'
2013-09-10 19:19:17	<--	Guest16118 (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-10 19:19:23	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 246 seconds)
2013-09-10 19:19:52	-->	aegis__ (~aegis@188.74.124.12) has joined #haskell
2013-09-10 19:20:16	-->	ddp (~ddp@199.106.164.15) has joined #haskell
2013-09-10 19:20:27	ski	and then `loginHandler = do (hw,ev) <- inputUser; ok <- attemptLogin (userInputFrom ev); if ok then mainHandler else do sendMessage loginFailed hw; loginHandler'
2013-09-10 19:20:55	aegis__	hey! could anyone give me a hit on why this code is throwing me a nasty little error? I understand it comes from the constraint on "b" (if I use Int instead it works), but my code seems to me quite reasonable... http://lpaste.net/92838
2013-09-10 19:21:06	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-10 19:21:07	 *	ski ponders what the difference is here
2013-09-10 19:21:10	mauke	:t take
2013-09-10 19:21:11	lambdabot	Int -> [a] -> [a]
2013-09-10 19:21:11	<--	ddp (~ddp@199.106.164.15) has quit (Client Quit)
2013-09-10 19:21:19	mauke	:t genericTake
2013-09-10 19:21:20	lambdabot	Integral i => i -> [a] -> [a]
2013-09-10 19:21:24	-->	hc (hc@public.chaos.hg.tu-darmstadt.de) has joined #haskell
2013-09-10 19:21:40	mr-	aegis__: take wants an Int
2013-09-10 19:21:42	-->	fizruk (~fizruk@79.165.40.18) has joined #haskell
2013-09-10 19:21:59	mr-	and so does drop
2013-09-10 19:22:16	aegis__	@mr- that makes sense, I should have checked that; sorry for bothering you!
2013-09-10 19:22:16	lambdabot	Maybe you meant: url src rc msg more arr
2013-09-10 19:22:27	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-10 19:22:33	mr-	aegis__: no problem at all
2013-09-10 19:23:01	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-10 19:23:20	-->	Shaladdle (~Shaladdle@128.237.196.12) has joined #haskell
2013-09-10 19:23:26	aegis__	mr-: I've a question though: would you lean towards using genericTake or replacing b by Int?
2013-09-10 19:23:56	<--	edvo (~edvo@tmo-111-88.customers.d1-online.com) has quit (Ping timeout: 256 seconds)
2013-09-10 19:24:05	mr-	aegis__: I would just use an Int, if possible
2013-09-10 19:24:18	<--	Wuzzy (~Wuzzy@p549F8D42.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-10 19:24:23	ski	YayMe` : i suppose with your `loginHandler', there can't ever happen anything after the `mainHandler'/`loginHandler' invocation in the body
2013-09-10 19:24:37	-->	edvo (~edvo@tmo-096-204.customers.d1-online.com) has joined #haskell
2013-09-10 19:24:37	aegis__	mr-: also, is there a specific reason why take isn't generic by default? It would work on everything it currently does (Ints), and Integers
2013-09-10 19:24:41	cschneid	why is take so specified? is there a downside to using "genericTake" all the time?
2013-09-10 19:24:55	cschneid	other than it's rather annoying name comparatively.
2013-09-10 19:24:56	ski	YayMe` : while with mine, another Handler could call `loginHandler', and then do something after it
2013-09-10 19:25:04	ski	i'm not sure whether this is good or bad
2013-09-10 19:25:21	<--	Shaladdle (~Shaladdle@128.237.196.12) has quit (Client Quit)
2013-09-10 19:25:24	mr-	aegis__: I don't know. Probably historic reasons
2013-09-10 19:25:53	aegis__	mr-: noted; thanks!
2013-09-10 19:27:15	-->	pratz (~pratz@122.169.29.141) has joined #haskell
2013-09-10 19:27:38	pratz	Hello guys
2013-09-10 19:27:49	robindv	There is a very slow statement on line 71, http://lpaste.net/1868603359817105408 anyone knowns a better solution?
2013-09-10 19:27:58	Ikarus	given a list in haskell with many duplicates, is there an easy way to determine the (maximum) number of duplicates (optionally, I have the elements that might be duplicate in a non-duplicate list)
2013-09-10 19:27:58	pratz	from within ghci, can I know what all types does Integral has ?
2013-09-10 19:28:21	-->	SingingBoyo (~brandon@dhcp-128-189-206-60.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 19:29:22	ski	> logBase 10 1868603359817105408
2013-09-10 19:29:23	lambdabot	  18.27151712538968
2013-09-10 19:29:29	ski	pratz : perhaps try `:info Integral
2013-09-10 19:29:30	ski	'
2013-09-10 19:30:30	<--	scriptor (~Scriptor@unaffiliated/scriptor) has left #haskell
2013-09-10 19:30:36	pratz	ski: cool, thanks
2013-09-10 19:30:47	edvo	Ikarus: maximum . map length . group . sort
2013-09-10 19:30:49	Kelet	Does anyone know of any SDL bindings for Haskell that are for SDL 2 (and not 1.2)?
2013-09-10 19:31:03	<--	xuser (~xuser@unaffiliated/xuser) has left #haskell
2013-09-10 19:31:04	Kelet	Googling is unfruitful
2013-09-10 19:31:09	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-10 19:31:18	Yaniel	@hoogle sdl
2013-09-10 19:31:18	lambdabot	package SDL
2013-09-10 19:31:18	lambdabot	package SDL-gfx
2013-09-10 19:31:18	lambdabot	package SDL-image
2013-09-10 19:31:18	<--	path[l] (~vsi@72.51.35.51) has quit (Quit: path[l])
2013-09-10 19:31:31	leroux	Kelet: I think they're working on that atm.
2013-09-10 19:31:52	<--	pierregh1 (~krux@91.179.13.34) has quit (Ping timeout: 256 seconds)
2013-09-10 19:32:26	<--	akegalj_ (~akegalj@93-138-64-112.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2013-09-10 19:32:38	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-10 19:32:41	<--	SingingBoyo (~brandon@dhcp-128-189-206-60.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 246 seconds)
2013-09-10 19:32:49	mr-	Ikarus: if your elements can be ordered, you could do something like  maximumBy (comparing length) . group . sort
2013-09-10 19:33:10	mr-	(probably hideous complexity, but easy to write ;-)
2013-09-10 19:33:24	Ikarus	mr-: thing is, I am doing this to reduce complexity :)
2013-09-10 19:33:30	Ikarus	and no, they have no natural ordering
2013-09-10 19:33:31	-->	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 19:33:36	<--	morazow_ (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-10 19:33:37	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-10 19:33:48	-->	pierreghz (~krux@83.80-247-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-10 19:34:05	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-10 19:34:33	mr-	hmm, sorry then
2013-09-10 19:34:49	aegis__	haskell is all about beauty anyway, isn't it?
2013-09-10 19:34:59	aegis__	complexity, performance, who cares
2013-09-10 19:35:05	aegis__	as long as it's beautiful :3
2013-09-10 19:35:05	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-10 19:35:19	mr-	Ikarus: and the elements are not grouped already
2013-09-10 19:35:27	-->	cybee (bc3e3aae@gateway/web/freenode/ip.188.62.58.174) has joined #haskell
2013-09-10 19:35:31	Ikarus	mr-: they are not
2013-09-10 19:35:37	cybee	anyone around?
2013-09-10 19:35:39	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Remote host closed the connection)
2013-09-10 19:35:47	<--	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has quit (Quit: Lost terminal)
2013-09-10 19:35:53	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-10 19:36:09	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-09-10 19:36:29	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-10 19:36:36	cybee	nobody?
2013-09-10 19:36:58	<--	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has quit (Ping timeout: 256 seconds)
2013-09-10 19:36:59	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-10 19:37:08	Yaniel	maybe?
2013-09-10 19:37:10	-->	davidsd (~davidsd@e204074.ext.net.ias.edu) has joined #haskell
2013-09-10 19:37:54	<--	madjestic (~madjestic@178.231.216.222) has quit (Ping timeout: 240 seconds)
2013-09-10 19:38:17	cybee	is there any way to show which programm is open on which workspace?
2013-09-10 19:38:18	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-10 19:38:39	-->	yyyyy (~yyyyy@186.203.231.223) has joined #haskell
2013-09-10 19:38:42	-->	litherum1 (~Litherum@17.114.106.18) has joined #haskell
2013-09-10 19:38:56	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 19:39:00	<--	diadara (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-10 19:39:13	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-09-10 19:41:03	danr	cybee: are you using xmonad? xmobar shows at least which workspaces are populated
2013-09-10 19:41:11	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Remote host closed the connection)
2013-09-10 19:41:27	-->	artyomkazak1 (~artyomkaz@94.25.228.30) has joined #haskell
2013-09-10 19:41:41	<--	uvelichitel (~uvelichit@37.73.201.51) has quit (Read error: Connection reset by peer)
2013-09-10 19:41:44	cybee	I'm using dzen
2013-09-10 19:41:51	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-10 19:41:51	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-09-10 19:41:58	shachaf	cybee: There's a #xmonad channel (but even there, you should just ask your question, not ask if someone is around).
2013-09-10 19:42:16	cybee	thx
2013-09-10 19:42:30	<--	cybee (bc3e3aae@gateway/web/freenode/ip.188.62.58.174) has left #haskell
2013-09-10 19:42:52	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-10 19:42:55	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Ping timeout: 245 seconds)
2013-09-10 19:43:22	<--	tutorship57 (~tutorship@78.129.150.171) has quit (Ping timeout: 245 seconds)
2013-09-10 19:44:15	-->	artyomkazak2 (~artyomkaz@94.25.228.41) has joined #haskell
2013-09-10 19:44:17	<--	artyomkazak (~artyomkaz@94.25.228.61) has quit (Ping timeout: 268 seconds)
2013-09-10 19:44:31	-->	ianclarksmith (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-10 19:45:23	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 19:45:46	<--	h4199 (~chatzilla@76.237.235.219) has quit (Read error: Connection reset by peer)
2013-09-10 19:45:48	<--	wojtekM_ (~user@78.8.252.90) has quit (Read error: Connection reset by peer)
2013-09-10 19:46:01	-->	wojtekM_ (~user@78.8.252.90) has joined #haskell
2013-09-10 19:46:01	<--	yyyyy (~yyyyy@186.203.231.223) has quit (Quit: Lost terminal)
2013-09-10 19:46:08	<--	artyomkazak1 (~artyomkaz@94.25.228.30) has quit (Ping timeout: 260 seconds)
2013-09-10 19:46:15	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-09-10 19:46:22	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-10 19:47:07	-->	filserge (~guest@174.36.234.43-static.reverse.softlayer.com) has joined #haskell
2013-09-10 19:47:16	 *	hackagebot basic-prelude 0.3.6.0 - An enhanced core prelude; a common foundation for alternate preludes.  http://hackage.haskell.org/package/basic-prelude-0.3.6.0 (MichaelSnoyman)
2013-09-10 19:47:46	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-10 19:48:19	<--	filserge (~guest@174.36.234.43-static.reverse.softlayer.com) has quit (Remote host closed the connection)
2013-09-10 19:48:57	-->	quchen (~quchen@p54AA0810.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 19:49:01	-->	anRch (~markmilli@ip-64-134-99-187.public.wayport.net) has joined #haskell
2013-09-10 19:49:15	-->	beaky (~beaky@92.99.13.63) has joined #haskell
2013-09-10 19:49:17	beaky	hello
2013-09-10 19:49:48	beaky	how do I put a comma between every element in a [String], and then concat the [String] to a string
2013-09-10 19:49:53	applikativ	ah, hi beaky
2013-09-10 19:50:00	<--	raichoo (~raichoo@mue-88-130-18-248.dsl.tropolys.de) has quit (Ping timeout: 256 seconds)
2013-09-10 19:50:20	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-10 19:50:21	applikativ	> concat ["hello"," ","world"]
2013-09-10 19:50:22	lambdabot	  "hello world"
2013-09-10 19:50:33	beaky	> concat $ intersperse ", " $ map show [1..100]
2013-09-10 19:50:34	lambdabot	  "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,...
2013-09-10 19:50:42	applikativ	h
2013-09-10 19:50:52	-->	pycabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 19:51:23	-->	krusader (~guest@80.179.199.81.cable.012.net.il) has joined #haskell
2013-09-10 19:51:36	<--	Gentlecat (~Roman@79.105.226.165) has quit (Read error: Connection reset by peer)
2013-09-10 19:51:38	ski	> intercalate "," (map show [0 .. 99])
2013-09-10 19:51:39	lambdabot	  "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,...
2013-09-10 19:51:56	applikativ	is there still a problem?
2013-09-10 19:52:05	 *	ski has no idea
2013-09-10 19:52:17	 *	hackagebot yesod-auth 1.2.3 - Authentication for Yesod.  http://hackage.haskell.org/package/yesod-auth-1.2.3 (MichaelSnoyman)
2013-09-10 19:52:19	 *	hackagebot yesod-bin 1.2.3.3 - The yesod helper executable.  http://hackage.haskell.org/package/yesod-bin-1.2.3.3 (MichaelSnoyman)
2013-09-10 19:52:21	 *	hackagebot yesod-core 1.2.4.3 - Creation of type-safe, RESTful web applications.  http://hackage.haskell.org/package/yesod-core-1.2.4.3 (MichaelSnoyman)
2013-09-10 19:52:23	 *	hackagebot yesod-form 1.3.2.2 - Form handling support for Yesod Web Framework  http://hackage.haskell.org/package/yesod-form-1.3.2.2 (MichaelSnoyman)
2013-09-10 19:52:26	applikativ	uhoh
2013-09-10 19:52:28	<--	ananthakumaran (~Adium@117.192.134.162) has quit (Quit: Leaving.)
2013-09-10 19:52:40	aegis__	is it ok performance-wise to use and overuse composition in haskell? It's tempting (and good in terms of correctness) to build functions out of smaller functions but I wonder if is doens't affect performance when you have a function that is composed from 3 other functions which are themselves composed...
2013-09-10 19:52:59	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Ping timeout: 260 seconds)
2013-09-10 19:53:01	--	Swizec_ is now known as Swizec
2013-09-10 19:53:07	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-10 19:53:10	ski	it's usually ok, i think
2013-09-10 19:53:12	mstksg	good in terms of correctness = more correct?
2013-09-10 19:53:13	applikativ	there is trouble sometimes.
2013-09-10 19:53:20	jfhall_	aegis__ that's how you should write haskell
2013-09-10 19:53:24	applikativ	but aegis__ there is a compiler
2013-09-10 19:53:33	-->	tibbe (tibbe@nat/google/x-npqbaosltjxxifok) has joined #haskell
2013-09-10 19:53:37	ski	@wn correctest
2013-09-10 19:53:38	lambdabot	No match for "correctest".
2013-09-10 19:53:42	jfhall_	a lot of the time there is fusion
2013-09-10 19:53:45	aegis__	applikativ: yep, I just wonder if the compiler is smart enough to do a better job than we would
2013-09-10 19:53:45	<--	litherum1 (~Litherum@17.114.106.18) has quit (Ping timeout: 276 seconds)
2013-09-10 19:53:53	jfhall_	which will bind function composition
2013-09-10 19:54:14	aegis__	jfhall_: ok, so no worries about this kind of "exponential" composition?
2013-09-10 19:54:33	<--	beaky (~beaky@92.99.13.63) has quit (Ping timeout: 260 seconds)
2013-09-10 19:54:36	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-10 19:54:45	jfhall_	aegis__: it can be an issue, but in general that shouldn't be your initial concern
2013-09-10 19:54:53	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-10 19:55:02	-->	vijaykiran (~user@87-239-97-58-dsl.qfast.net) has joined #haskell
2013-09-10 19:55:05	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 19:55:20	jfhall_	aegis__: the point of haskell is to write correct, composable code, and let the compiler optimize for you
2013-09-10 19:55:37	mstksg	premature optimization is the root of etc. etc.
2013-09-10 19:55:44	elliott	heh, if only it was always so easy though
2013-09-10 19:55:49	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 19:55:51	jfhall_	as the compiler and libraries get better, there is more "fusion" (plus other optimiszations) that can occur
2013-09-10 19:55:51	--	pycabrera is now known as cppcabrera
2013-09-10 19:55:52	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 240 seconds)
2013-09-10 19:55:55	donri	aegis__: you know laziness and inlining makes that more or less indistinguishable from writing out the expanded function by hand
2013-09-10 19:56:19	merijn	elliott: The other option is to wait for edwardk, dons or bos to write a high performance library for solving your problem, no? :p
2013-09-10 19:56:34	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: No route to host)
2013-09-10 19:56:34	-->	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has joined #haskell
2013-09-10 19:57:03	enthropy	could/should ghc accept duplicate instances whose implementations are duplicate?
2013-09-10 19:57:23	applikativ	aegis__: there are no worries about exponential composition, it is mostly just inlined and vanishes, but there are a million subtleties of course
2013-09-10 19:57:28	enthropy	specifically I think it's sane to allow multiple  `deriving instance Typeable Foo'
2013-09-10 19:57:38	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-09-10 19:57:41	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-09-10 19:57:52	ocharles	composition and everything doesn't stop you from implementing the wrong algorithm, it should be noted
2013-09-10 19:58:00	jfhall_	indeed
2013-09-10 19:58:08	enthropy	this way you don't need CPP to support versions of libraries that have those instances and those that don't
2013-09-10 19:58:17	jfhall_	the idea is that small composable chunks should be more clear
2013-09-10 19:58:19	ocharles	but for the most part, I don't worry about composition that when i'm building programs - that's something for the profiling step
2013-09-10 19:58:30	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 256 seconds)
2013-09-10 19:58:51	quchen	enthropy: You can't have multiple instances of the same thing because of the open world assumption.
2013-09-10 19:58:54	-->	Lethalman (~lethal@151.28.31.3) has joined #haskell
2013-09-10 19:58:54	aegis__	thanks for the explanations
2013-09-10 19:59:00	quchen	i.e. there are no "qualified instance imports"
2013-09-10 19:59:13	<--	ianclarksmith (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 19:59:14	applikativ	enthropy: yes i often wondered why it needs to balk at its own derived instances when they bump into each other
2013-09-10 19:59:33	k0001	ocharles: Hi. Will you need the GZip thing for your talk?
2013-09-10 19:59:34	<--	petapetapeta (~Peter@130.225.165.43) has quit (Ping timeout: 248 seconds)
2013-09-10 19:59:40	enthropy	quchen, I mean when I ask ghc to derive an instance in module A, that's going to be the same code as if the instance was derived somewhere else, right?
2013-09-10 20:00:00	quchen	enthropy: I don't know, but I think that's a sane assumption.
2013-09-10 20:00:33	quchen	The only difference I can think of is an orphan warning, but there may be other subtleties (although I don't expect any).
2013-09-10 20:00:36	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 20:00:41	donri	enthropy: y u orphan instances tho :(
2013-09-10 20:01:02	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 246 seconds)
2013-09-10 20:01:12	enthropy	donri: I want to do typeable/generic things with Cabal's datastructures
2013-09-10 20:01:29	ocharles	k0001: oh hey, i didn't know you hung out here!
2013-09-10 20:01:31	enthropy	Generic being GHC.Generics.Generic
2013-09-10 20:01:38	-->	petapetapeta (~Peter@130.225.165.43) has joined #haskell
2013-09-10 20:01:42	applikativ	send a patch for missing instances enthropy ?
2013-09-10 20:01:49	ocharles	k0001: i'm not really going to be talking about pipes-tar in the talk, i've already got too much to talk about :)
2013-09-10 20:01:50	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-10 20:02:03	enthropy	applikativ: the typeable ones are in 1.18
2013-09-10 20:02:27	enthropy	so to support people with Cabal < 1.18, I now need some CPP
2013-09-10 20:02:37	donri	enthropy: http://hackage.haskell.org/packages/archive/template-haskell/2.8.0.0/doc/html/Language-Haskell-TH.html#g:6 ;)
2013-09-10 20:02:38	applikativ	oh
2013-09-10 20:03:06	enthropy	which makes things more fragile, since now there are two versions of the same file
2013-09-10 20:03:11	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-09-10 20:03:14	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Max SendQ exceeded)
2013-09-10 20:03:17	enthropy	only one of which really gets tested
2013-09-10 20:03:19	k0001	ocharles: yeah, I'm frequently here, but I don't talk much :)
2013-09-10 20:03:28	-->	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has joined #haskell
2013-09-10 20:03:28	<--	nexx (~nexx@dslb-188-108-180-150.pools.arcor-ip.net) has quit (Changing host)
2013-09-10 20:03:28	-->	nexx (~nexx@unaffiliated/xxen) has joined #haskell
2013-09-10 20:03:54	enthropy	donri: that's useful, but you can't use a deriving instance Typeable from TH
2013-09-10 20:03:55	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-09-10 20:04:29	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 20:04:31	<--	robindv (~robin@celp.nl) has left #haskell
2013-09-10 20:04:37	enthropy	there's this http://hackage.haskell.org/package/typeable-th, but I think that's going to break for ghc-7.8
2013-09-10 20:04:48	applikativ	why would anyone use Cabal<1.18 ;)
2013-09-10 20:04:51	<--	edvo (~edvo@tmo-096-204.customers.d1-online.com) has quit (Quit: Leaving)
2013-09-10 20:04:55	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 20:05:11	<--	davidt (~chatzilla@davidt.scs.stanford.edu) has quit (Remote host closed the connection)
2013-09-10 20:05:18	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Ping timeout: 256 seconds)
2013-09-10 20:05:20	-->	AlecTaylor (alec.taylo@unaffiliated/alectaylor) has joined #haskell
2013-09-10 20:05:24	enthropy	due to this bug http://ghc.haskell.org/trac/ghc/ticket/8100
2013-09-10 20:05:24	AlecTaylor	hi
2013-09-10 20:06:06	-->	cppcabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-10 20:06:06	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 20:06:11	enthropy	applikativ: because it breaks people's non-trivial Setup.hs
2013-09-10 20:06:14	applikativ	hi AlecTaylor
2013-09-10 20:06:30	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 248 seconds)
2013-09-10 20:06:48	AlecTaylor	Monads are just function workflows utilising lexical closure?
2013-09-10 20:07:04	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-09-10 20:07:15	 *	applikativ advises against propositions beginning 'monads are ..'
2013-09-10 20:07:46	 *	applikativ advises against propositions with '.. are just ..' in the middle
2013-09-10 20:07:47	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-10 20:07:52	 *	AlecTaylor requests applikativ to define "monad"
2013-09-10 20:08:09	ocharles	applikativ's suggestions are just like how monads are just monads
2013-09-10 20:08:12	 *	ocharles watches applikativ explode
2013-09-10 20:08:29	-->	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has joined #haskell
2013-09-10 20:08:30	enthropy	maybe you've just defined "function workflows utilising lexical closure" as longer way to say monad
2013-09-10 20:08:30	 *	applikativ splat.
2013-09-10 20:08:55	 *	AlecTaylor thought applikativ swallowed
2013-09-10 20:09:23	applikativ	i define monads by listing them, the so-called ostensive definition: List, Maybe, IO, ...
2013-09-10 20:09:40	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-10 20:10:10	applikativ	what is it that List, IO, Maybe, BinaryTree, (->) Int etc. all are?
2013-09-10 20:10:29	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Ping timeout: 246 seconds)
2013-09-10 20:10:31	enthropy	what are types of kind * -> *?
2013-09-10 20:10:32	applikativ	but e.g. Set isn't
2013-09-10 20:11:10	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 20:11:36	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-09-10 20:11:41	applikativ	not sure what to say about this new definition, AlecTaylor
2013-09-10 20:11:43	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 20:12:25	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-10 20:12:26	<--	Khisanth (~Khisanth@50.14.244.111) has quit (Quit: Leaving)
2013-09-10 20:12:36	<--	YayMe (~user@97-122-184-27.hlrn.qwest.net) has quit (Ping timeout: 276 seconds)
2013-09-10 20:12:42	-->	Khisanth (~Khisanth@50.14.244.111) has joined #haskell
2013-09-10 20:12:43	<--	tel (~tel@static-108-15-20-23.bltmmd.fios.verizon.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 20:13:22	<--	edsko (~edsko@80.111.60.101) has quit (Quit: This computer has gone to sleep)
2013-09-10 20:13:23	AlecTaylor	What's the definition?
2013-09-10 20:13:46	applikativ	"function workflows utilising lexical closure" -- not that i'm not in favor of it.
2013-09-10 20:13:50	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 272 seconds)
2013-09-10 20:13:52	quchen	A Monad is something that is an instance of Monad and obeys the Monad laws. (If it doesn't, it's a Nonad.)
2013-09-10 20:14:26	 *	k00mi thinks giving Set as a counterexample is a bad idea, seeing as the reason it isn't one in haskell is pretty stupid
2013-09-10 20:14:30	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-09-10 20:14:41	 *	applikativ agrees, it was pretty haskellcentric
2013-09-10 20:15:18	elliott	Set would actually be a pain to use as a monad in Haskell even if it was allowed, but anyway.
2013-09-10 20:15:30	-->	scottschecter (~scottsche@c-76-115-234-122.hsd1.wa.comcast.net) has joined #haskell
2013-09-10 20:16:11	quchen	How can Set be a Monad?
2013-09-10 20:16:15	applikativ	no, its just icky since the power set functor is basically the paradigmatic monad
2013-09-10 20:16:18	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-10 20:16:19	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 264 seconds)
2013-09-10 20:16:28	ski	quchen : it's a monad over a different category
2013-09-10 20:16:44	haasn	Nonad :)
2013-09-10 20:16:47	quchen	ski: And which category is that?
2013-09-10 20:16:48	-->	cppcabrera (~alejandro@72.3.161.23) has joined #haskell
2013-09-10 20:16:57	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-10 20:17:10	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 20:17:12	-->	DanielDiaz (~dhelta@5.Red-79-150-27.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 20:17:25	-->	zzing (~textual@wlan.cspc1.uwindsor.ca) has joined #haskell
2013-09-10 20:17:45	ski	category of ordered types, i think
2013-09-10 20:17:46	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Ping timeout: 256 seconds)
2013-09-10 20:18:04	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Quit: rishabhjain_)
2013-09-10 20:18:08	ski	though this makes me wonder which ordering on the sets we want here (if any)
2013-09-10 20:18:10	quchen	ski: Oh, you mean the mathematical Set, not Haskell's Set
2013-09-10 20:18:11	-->	ary_ (~ary@53564EFD.cm-6-7b.dynamic.ziggo.nl) has joined #haskell
2013-09-10 20:18:17	<--	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has quit (Remote host closed the connection)
2013-09-10 20:18:23	--	ary_ is now known as ary__
2013-09-10 20:18:23	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-10 20:18:42	<--	LAMMJohnson (~ja@user-5af437c3.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 20:18:45	<--	zzing (~textual@wlan.cspc1.uwindsor.ca) has quit (Client Quit)
2013-09-10 20:18:55	-->	NiceOneBrah (~niceonebr@173.247.206.226) has joined #haskell
2013-09-10 20:19:06	ski	i mean finite sets, implemented by referring to total order on elements
2013-09-10 20:19:08	<--	applikativ (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Quit: Lost terminal)
2013-09-10 20:19:10	haasn	quchen: wouldn't Haskell's Set be a monad over the subcategory of Hask that has Ord instances?
2013-09-10 20:19:16	haasn	not sure if that makes formal sense
2013-09-10 20:20:00	-->	LAMMJohnson (~ja@user-5af437c3.broadband.tesco.net) has joined #haskell
2013-09-10 20:20:08	quchen	That wasn't my question anyway, which was "How can Set be a Monad", and not "how can Set be a monad".
2013-09-10 20:20:39	ski	with current definition of `Monad', it can't
2013-09-10 20:20:48	<--	flebron_ (~flebron@gw.dc.uba.ar) has quit (Read error: Connection reset by peer)
2013-09-10 20:21:00	<--	yitz (~abba@line236.adsl.actcom.co.il) has quit (Quit: Lost terminal)
2013-09-10 20:21:04	k00mi	Oleg did it via Cont IIRC
2013-09-10 20:21:04	quchen	That makes things easier. The reason is because >>= can't require Ord I assume.
2013-09-10 20:21:17	<--	yacks (~py@103.6.159.103) has quit (Ping timeout: 245 seconds)
2013-09-10 20:21:36	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 20:21:39	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-10 20:22:22	-->	mceier (~mceier@89-69-201-93.dynamic.chello.pl) has joined #haskell
2013-09-10 20:22:31	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-10 20:22:40	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: Konversation terminated!)
2013-09-10 20:22:58	-->	inkjetunito (~abcdefg@ip-178-203-84-65.unitymediagroup.de) has joined #haskell
2013-09-10 20:23:03	<--	inkjetunito (~abcdefg@ip-178-203-84-65.unitymediagroup.de) has quit (Changing host)
2013-09-10 20:23:04	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-10 20:23:20	<--	ecr (~Thunderbi@2620:101:8003:200:6938:cf26:ea77:f799) has quit (Ping timeout: 245 seconds)
2013-09-10 20:23:24	<--	aegis__ (~aegis@188.74.124.12) has quit (Remote host closed the connection)
2013-09-10 20:23:52	haasn	I'm guessing it would be possible to make a Set-like monad that can eventually be flattened down to a Set (with an Ord constraint) using some sort of kan extension?
2013-09-10 20:24:18	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-10 20:24:41	ocharles	there's a whole paper on Set Monad's in Haskell
2013-09-10 20:24:49	ocharles	perhaps it was from the Sunroof author's?
2013-09-10 20:24:54	ocharles	or maybe it was kansas lava
2013-09-10 20:25:34	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 20:25:40	Reite	So what would >>= do in the set monad?
2013-09-10 20:26:49	quchen	Like list I assume
2013-09-10 20:26:56	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Ping timeout: 246 seconds)
2013-09-10 20:26:58	-->	ecr (~Thunderbi@nat/mozilla/x-kwhdfvqvzaxzoxoo) has joined #haskell
2013-09-10 20:27:03	haasn	that would be my thought as well
2013-09-10 20:27:19	Reite	ah
2013-09-10 20:27:19	haasn	join' :: Ord a => Set (Set a) -> Set a
2013-09-10 20:27:21	Reite	that makes sense
2013-09-10 20:27:31	haasn	there's one really obvious implementation of this
2013-09-10 20:27:31	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 264 seconds)
2013-09-10 20:27:33	quchen	Reite: On the other hand, you can't change the order of lists elements by >>=
2013-09-10 20:27:53	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-09-10 20:27:57	<--	vijaykiran (~user@87-239-97-58-dsl.qfast.net) has quit (Ping timeout: 245 seconds)
2013-09-10 20:28:12	shachaf	You can make a monad for Set that doesn't normalize until you lower it, Codensity-style.
2013-09-10 20:28:16	shachaf	But it's a bad idea.
2013-09-10 20:28:56	quchen	shachaf: i.e. newtype wrap Set, define a Monad for that, and do the normalization when extracting the Set again?
2013-09-10 20:29:04	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-10 20:29:14	<--	scripty (~scripty@117.192.175.240) has quit (Read error: Connection reset by peer)
2013-09-10 20:29:21	quchen	(Is that codensity style? Spoiler: I'm just guessing.)
2013-09-10 20:29:24	shachaf	Something along those lines.
2013-09-10 20:29:25	haasn	shachaf: why is it a bad idea?
2013-09-10 20:29:28	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 20:29:31	<--	wojtekM_ (~user@78.8.252.90) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-10 20:29:59	shachaf	haasn: Because the set can grow but can never shrink.
2013-09-10 20:30:26	shachaf	With normal monads right-association is generally good, but it can easily be the opposite here.
2013-09-10 20:30:26	haasn	(>>= const Set.empty) ?
2013-09-10 20:30:34	ericmoritz	where is the implementation of mzero and mplus for Maybe?
2013-09-10 20:30:50	shachaf	I think we might not be talking about the same thing.
2013-09-10 20:30:53	shachaf	Here, the CoYoneda-style Set is simpler, and lets you define Functor:
2013-09-10 20:30:54	ericmoritz	I don't see it here: http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/Data-Maybe.html#Maybe
2013-09-10 20:31:27	quchen	ericmoritz: Control.Monad
2013-09-10 20:31:31	shachaf	data Set' a = forall x. Ord x => Set' (Set x) (x -> a)
2013-09-10 20:31:54	shachaf	You can make a Functor instance for that, and write liftSet and lowerSet to turn Set into Set' and back.
2013-09-10 20:32:04	<--	tromp_ (~tromp@rtc35-161.rentec.com) has quit
2013-09-10 20:32:04	<--	Velpoman (~Velpoman@nat/yahoo/x-dsmjwhkhiloklgjj) has quit (Quit: leaving)
2013-09-10 20:32:15	-->	Velpoman (~Velpoman@nat/yahoo/x-vjsgqohgfabkcgwb) has joined #haskell
2013-09-10 20:32:19	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 264 seconds)
2013-09-10 20:32:19	-->	Targen (~iguana@186.95.107.210) has joined #haskell
2013-09-10 20:32:57	ski	@quote coyoneda
2013-09-10 20:32:58	lambdabot	No quotes match.
2013-09-10 20:33:09	<--	anRch (~markmilli@ip-64-134-99-187.public.wayport.net) has quit (Quit: anRch)
2013-09-10 20:33:10	ocharles	dcoutts: ping
2013-09-10 20:33:20	dcoutts	ocharles: mm?
2013-09-10 20:33:38	ocharles	dcoutts: hey, can I convince you to expose http://code.haskell.org/bzlib/Codec/Compression/BZip/Stream.hsc in that library? :)
2013-09-10 20:33:49	quchen	shachaf: Set' is a type that has a "dummy set" whose only purpose is to be mapped to a proper set using the (x → a) field?
2013-09-10 20:33:56	ocharles	dcoutts: I'd like to use it in pipes-bzlib, but the only interface you provide right now works with lazy bytestrings
2013-09-10 20:34:06	enthropy	quchen: http://ghc.haskell.org/trac/ghc/ticket/8263 follows from our discussion earlier
2013-09-10 20:34:10	dcoutts	ocharles: ah yes, same issue as with my zlib package
2013-09-10 20:34:23	quchen	shachaf: Just asking because foralls are still somewhat mysterious to me, so every time I see one I'm trying to make sense of them.
2013-09-10 20:34:26	dcoutts	ocharles: I've been rewriting it to expose an ST/IO-based interface as the lower layer
2013-09-10 20:34:29	<--	goakley (~goakley@c-69-248-110-139.hsd1.nj.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-10 20:34:40	dcoutts	ocharles: but I don't want to expose the really ugly parts because that's just so hard to use
2013-09-10 20:34:56	ocharles	dcoutts: that sounds fine
2013-09-10 20:35:00	-->	ijp (~user@host86-183-36-214.range86-183.btcentralplus.com) has joined #haskell
2013-09-10 20:35:04	shachaf	quchen: It does "map fusion" for a Set.
2013-09-10 20:35:05	ocharles	it sounds like it's on your radar, which is good news
2013-09-10 20:35:12	monochrom	quchen: this "forall" makes an existential type, not a universal type.
2013-09-10 20:35:14	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 20:35:17	shachaf	quchen: This forall is really an exists, if that helps.
2013-09-10 20:35:18	dcoutts	ocharles: yes, problem is it has been for some time :-(
2013-09-10 20:35:46	monochrom	because GHC doesn't want to hijack one more keyword
2013-09-10 20:35:53	ocharles	dcoutts: hum, anything i can help with? or is it still mostly in your head atm?
2013-09-10 20:35:57	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 256 seconds)
2013-09-10 20:36:00	<--	hiroaki (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has quit (Quit: Ex-Chat)
2013-09-10 20:36:02	ski	because the constructor really is polymorphic
2013-09-10 20:36:02	dcoutts	ocharles: I was perhaps too ambitious with trying to do it with ST, and I should perhaps simplify and just use IO and then use unsafePerformIO for the existing lazy bytestring interface
2013-09-10 20:36:20	dcoutts	ocharles: if you have more time than me, then yes, help would be good
2013-09-10 20:36:26	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Read error: Connection reset by peer)
2013-09-10 20:36:39	monochrom	the constructor, of course, can be said to be a universal type
2013-09-10 20:36:43	dcoutts	ocharles: basic idea is to expose an IO interface that makes the demand really clear
2013-09-10 20:37:00	ski	quchen : `data CoYoneda f b = forall a. FMapIncl (a -> b) (f a)' vs. `newtype CoDensity f a = ProjBind (forall b. (a -> f b) -> f b)'
2013-09-10 20:37:06	dcoutts	ocharles: so no tricky rules on when you can call what
2013-09-10 20:37:17	ski	s/to be a/to be of a/
2013-09-10 20:37:19	quchen	monochrom: Oh right, I remember stumbling upon that earlier.
2013-09-10 20:37:45	quchen	monochrom: I also don't remember how I resolved it, time to open up that logic book again ;-)
2013-09-10 20:37:50	dcoutts	ocharles: so it should use types that make it clear when output is available, and when input is demanded
2013-09-10 20:38:00	ocharles	dcoutts: ok, i like that style of programming
2013-09-10 20:38:12	ski	quchen : `forall a. (..a.. -> ...)' is logically equivalent with `(exists a. ..a..) -> ...'
2013-09-10 20:38:18	-->	kylcarte (~kcarter@pdx.galois.com) has joined #haskell
2013-09-10 20:38:21	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-10 20:38:25	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-10 20:38:26	-->	lilred (~lilred@wpa071174.Wireless.McGill.CA) has joined #haskell
2013-09-10 20:38:30	dcoutts	ocharles: in the spirit of the attoparsec parse type, but in IO (ideally I would do the base in ST and then just lift to IO for the IO version of the interface)
2013-09-10 20:38:37	lilred	How should I represent union types in SQL?
2013-09-10 20:38:38	-->	Freeway- (~Freeway@546AAAD8.cm-12-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-10 20:39:06	quchen	ski:  Ah, it's a law that ∀x.(x => y) = (\exists a. a) => y?
2013-09-10 20:39:11	ski	quchen : so `FMapIncl :: forall a. (a -> b) -> f a -> CoYoneda f b' is almost the same as `FMapIncl :: forall a. (a -> b,f a) -> CoYoneda f b' which is logically equivalent with `FMapIncl :: (exists a. (a -> b,f a)) -> CoYoneda f b'
2013-09-10 20:39:14	<--	pratz (~pratz@122.169.29.141) has quit (Ping timeout: 240 seconds)
2013-09-10 20:39:17	quchen	That reminds me to get the \exists glyph in my autoreplace. :-)
2013-09-10 20:39:38	ski	quchen : provided `y' doesn't depend on `x', yes
2013-09-10 20:39:55	ocharles	dcoutts: ok, i'm actually not familiar with attoparsec. oddly everything that needs a parser has usually already been written now :)
2013-09-10 20:40:09	-->	hiroakip (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has joined #haskell
2013-09-10 20:40:18	dcoutts	ocharles: oh don't worry, I just meant the type
2013-09-10 20:40:20	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Read error: Connection reset by peer)
2013-09-10 20:40:20	Freeway-	sombody can
2013-09-10 20:40:23	Freeway-	 tell me what
2013-09-10 20:40:25	Freeway-	need to know
2013-09-10 20:40:30	Freeway-	 to leanr haskell or lisp
2013-09-10 20:40:33	quchen	ski: Okay, thanks
2013-09-10 20:40:45	ski	quchen : it's also a classical law that `exists a. (..a.. -> ...)' is logically equivalent to `(forall a. ..a..) -> ...' .. but we tend to not use that in Haskell
2013-09-10 20:40:47	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-10 20:40:49	Freeway-	 what kind of begining knowldge i need to know
2013-09-10 20:40:52	sclv_	?where lyah
2013-09-10 20:40:52	lambdabot	http://www.learnyouahaskell.com/
2013-09-10 20:40:56	<--	LAMMJohnson (~ja@user-5af437c3.broadband.tesco.net) has quit (Ping timeout: 246 seconds)
2013-09-10 20:40:57	-->	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has joined #haskell
2013-09-10 20:41:02	sclv_	Freeway-: you should be able to just go to that site and get going
2013-09-10 20:41:06	sclv_	you need very little knowledge
2013-09-10 20:41:29	ocharles	dcoutts: the IResult type, or Parser?
2013-09-10 20:41:35	Freeway-	dude
2013-09-10 20:41:36	Freeway-	 the see
2013-09-10 20:41:39	dcoutts	ocharles: probably IResult
2013-09-10 20:41:40	Freeway-	 i need to code in
2013-09-10 20:41:41	quchen	ski: Well if it's a law in natural deduction then it's one in classical logic as well, no?
2013-09-10 20:41:43	Freeway-	 C#
2013-09-10 20:41:46	Freeway-	 i can code in C#
2013-09-10 20:41:50	Freeway-	 just variebels
2013-09-10 20:41:53	Freeway-	i am beginner
2013-09-10 20:41:54	<--	shesek (~shesek@77.127.54.57) has quit (Remote host closed the connection)
2013-09-10 20:42:06	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-10 20:42:26	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 20:42:42	-->	pratz (~pratz@122.169.15.62) has joined #haskell
2013-09-10 20:42:51	ski	quchen : natural deduction is a specific style in which a logic can be presented in. that logic can be classical logic, intuitionistic logic, modal logic, &c.
2013-09-10 20:42:57	monochrom	http://www.vex.net/~trebla/weblog/any-all-some.html :)
2013-09-10 20:43:04	<--	ijp (~user@host86-183-36-214.range86-183.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-09-10 20:43:18	quchen	ski: s/natural deduction/intuitionistic logic/ then.
2013-09-10 20:43:39	ocharles	dcoutts: ok, that makes sense. have you got any partial code done, or should i start from the latest version on hackage?
2013-09-10 20:43:42	lilred	Hey guys, how should I represent union types in an SQL database?
2013-09-10 20:43:47	ocharles	not saying i will be able to, but if i were to...
2013-09-10 20:43:51	quchen	lilred: This is not #sql.
2013-09-10 20:43:52	-->	shesek (~shesek@77.127.54.57) has joined #haskell
2013-09-10 20:43:56	ski	monochrom : i tend to think of it as depending on the polarity of the subphrase in which "any" occurs -- but possibly this doesn't capture all correct uses of it
2013-09-10 20:44:12	lilred	quchen: but SQL guys usually don't know anything about union types
2013-09-10 20:44:21	ski	quchen : still, the latter one above isn't a law in intuitionistic logic
2013-09-10 20:44:27	<--	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-09-10 20:44:46	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-10 20:44:52	-->	phyrex1an1 (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-10 20:44:52	--	phyrex1an1 is now known as phyrex1an
2013-09-10 20:44:52	jfischoff	?lilred: depends. you can have extra columns that are NULL sometimes or make seperate tables
2013-09-10 20:45:11	donri	lilred: http://stackoverflow.com/questions/1730665/how-to-emulate-tagged-union-in-a-database random google :p
2013-09-10 20:45:18	Freeway-	can sombody
2013-09-10 20:45:24	Freeway-	 explain me why people programm
2013-09-10 20:45:24	lilred	Thank you a lot jfischoff and donri!
2013-09-10 20:45:25	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 245 seconds)
2013-09-10 20:45:26	quchen	monochrom: I understand ∀ and ∃, but my understanding scales very bad ;-)
2013-09-10 20:45:33	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-10 20:46:02	quchen	ski: Oh, propositional calculus or something along those lines then?
2013-09-10 20:46:41	-->	thealanwattsriot (~brianchen@216.30.179.54) has joined #haskell
2013-09-10 20:46:43	<--	tibbe (tibbe@nat/google/x-npqbaosltjxxifok) has quit (Quit: tibbe)
2013-09-10 20:46:45	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Max SendQ exceeded)
2013-09-10 20:47:04	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 20:47:17	 *	hackagebot text-locale-encoding 0.1.0.2 - Encode and decode Text to/from ByteString using TextEncoding  http://hackage.haskell.org/package/text-locale-encoding-0.1.0.2 (MikhailKuddah)
2013-09-10 20:47:22	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 20:47:53	-->	bacchus (9e823203@gateway/web/freenode/ip.158.130.50.3) has joined #haskell
2013-09-10 20:48:11	-->	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has joined #haskell
2013-09-10 20:48:14	-->	liquidpsion (~psion@153.9.254.208) has joined #haskell
2013-09-10 20:48:16	--	bacchus is now known as Guest5947
2013-09-10 20:48:21	<--	jml (~jml@unaffiliated/jml) has quit (Ping timeout: 245 seconds)
2013-09-10 20:48:31	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 20:48:57	 *	ski . o O ( "Using Algebraic Datatypes as Uniform Representation for Structured Data" by Markus Mottl in 2003-03-10 at <http://web.archive.org/web/20100131042843/http://www.ocaml.info/oefai/papers/algebraic_dts/> )
2013-09-10 20:49:03	<--	travisstaton (~tstaton@70.127.254.161) has quit (Ping timeout: 240 seconds)
2013-09-10 20:49:21	ski	quchen : you can't even express it in propositional logic
2013-09-10 20:49:30	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 20:49:52	--	Guest5947 is now known as nichthus
2013-09-10 20:50:19	<--	julmac (~no@206.190.145.91) has quit (Ping timeout: 264 seconds)
2013-09-10 20:50:38	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-09-10 20:50:40	Freeway-	guys i want make
2013-09-10 20:50:43	-->	beaky (~beaky@92.99.13.63) has joined #haskell
2013-09-10 20:50:44	beaky	hello
2013-09-10 20:50:44	Freeway-	 a webrowser
2013-09-10 20:50:46	Freeway-	 for muslims
2013-09-10 20:50:58	Freeway-	a browser that forbid porn
2013-09-10 20:51:02	beaky	how do I make a sequence like this: [1, 3, 5, ..., n, n - 2, ... 1]
2013-09-10 20:51:27	-->	julmac (~no@206.190.145.90) has joined #haskell
2013-09-10 20:51:39	nichthus	> [1,3..32] ++ [30, 29..1]
2013-09-10 20:51:40	lambdabot	  [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,30,29,28,27,26,25,24,23,22,21,2...
2013-09-10 20:51:46	ski	> let n = 10 in [1,3 .. n] ++ [n - 2,n - 4 .. 1]
2013-09-10 20:51:48	lambdabot	  [1,3,5,7,9,8,6,4,2]
2013-09-10 20:52:08	beaky	wow
2013-09-10 20:52:14	beaky	how do I do that in c++
2013-09-10 20:52:20	<--	desc|zenbook (~heh@120.141.148.63) has quit (Ping timeout: 256 seconds)
2013-09-10 20:52:34	 *	ski doesn't know C++
2013-09-10 20:52:47	nichthus	Maybe that's a question for ##c++.
2013-09-10 20:52:55	-->	desc|zenbook (~heh@120.141.148.63) has joined #haskell
2013-09-10 20:52:59	-->	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has joined #haskell
2013-09-10 20:53:02	-->	Oejet (~Oejet@unaffiliated/oejet) has joined #haskell
2013-09-10 20:53:06	Taneb	Wait, that's...
2013-09-10 20:53:09	<--	kludge` (~comet@unaffiliated/espiral) has quit (Remote host closed the connection)
2013-09-10 20:53:10	beaky	but the haskell way is so elegant
2013-09-10 20:53:16	-->	jml (~jml@2a01:e0b:1:116:ad8d:d5f0:ffad:8ba1) has joined #haskell
2013-09-10 20:53:22	beaky	it looks exactly as I defined it :D
2013-09-10 20:53:27	Taneb	> let foo n = [1 .. n] ++ [n -2, n - 4 ..1] in foo 32
2013-09-10 20:53:28	lambdabot	  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28...
2013-09-10 20:53:37	Taneb	> let foo n = [1, 3 .. n] ++ [n -2, n - 4 ..1] in foo 32
2013-09-10 20:53:38	lambdabot	  [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,30,28,26,24,22,20,18,16,14,12,1...
2013-09-10 20:53:46	Taneb	Or something idk
2013-09-10 20:53:54	--	Mode #haskell [+o monochrom] by ChanServ
2013-09-10 20:53:55	-->	LAMMJohnson (~ja@user-5af43f7a.broadband.tesco.net) has joined #haskell
2013-09-10 20:53:57	--	Mode #haskell [+b *!*@546AAAD8.cm-12-3c.dynamic.ziggo.nl] by monochrom
2013-09-10 20:53:57	<--	monochrom has kicked Freeway- (Freeway-)
2013-09-10 20:54:02	--	Mode #haskell [-o monochrom] by monochrom
2013-09-10 20:54:52	beaky	> let n = 11 in [1, 3..n] ++ [n - 2, n - 4 ..1]
2013-09-10 20:54:53	lambdabot	  [1,3,5,7,9,11,9,7,5,3,1]
2013-09-10 20:54:56	beaky	wow
2013-09-10 20:55:17	monochrom	haven't you learned haskell for a long time?
2013-09-10 20:55:27	beaky	yes
2013-09-10 20:55:59	beaky	i am still a beginner though :(
2013-09-10 20:56:05	-->	zzing (~textual@198-91-210-150.cpe.distributel.net) has joined #haskell
2013-09-10 20:56:39	inkjetunito	:o beaky
2013-09-10 20:56:46	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-10 20:57:12	-->	t4nk222 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-09-10 20:57:14	t4nk222	hello
2013-09-10 20:57:17	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 20:57:29	t4nk222	i have a      board n = array ((1,1),(n,n)) [((i,j), 0) | i <- [1..n], j <- [1..n]]
2013-09-10 20:58:03	<--	ksf__ (~ksf@d166148.adsl.hansenet.de) has quit (Remote host closed the connection)
2013-09-10 20:58:04	t4nk222	can i use somehow Show for this one or i need to write own function for formatted showing?
2013-09-10 20:58:19	nichthus	?instances-importing Data.Array Show
2013-09-10 20:58:20	lambdabot	(), (a, b), (a, b, c), (a, b, c, d), All, Any, Array a b, Bool, Char, Double, Dual a, Either a b, First a, Float, Int, Integer, Last a, Maybe a, Ordering, Product a, ST s a, Sum a, [a]
2013-09-10 20:58:27	Taneb	There is a show instance, but it's not formatted at all
2013-09-10 20:58:28	merijn	t4nk222: Show won't pretty print it as a board, if that's what you're asking
2013-09-10 20:58:32	monochrom	it has a Show instance already. but it's linear.
2013-09-10 20:58:42	merijn	t4nk222: I believe Show will print "fromList [...]"
2013-09-10 20:58:47	quchen	Also Show isn't for prettyprinting.
2013-09-10 20:58:51	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-10 20:58:54	monochrom	in fact, let's try
2013-09-10 20:58:58	-->	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 20:58:58	t4nk222	merijn: well, so, i need to rewrite Show Array?
2013-09-10 20:59:16	merijn	t4nk222: I would just write "prettyPrint :: Array ?? -> String""
2013-09-10 20:59:16	monochrom	> show (array ((1,1),(2,2)) [((i,j), 0) | i <- [1..2], j <- [1..2]])
2013-09-10 20:59:17	lambdabot	  "array ((1,1),(2,2)) [((1,1),0),((1,2),0),((2,1),0),((2,2),0)]"
2013-09-10 20:59:19	nichthus	The impulse to rewrite instances is one you should eliminate. It can only lead to trouble.
2013-09-10 20:59:20	t4nk222	i want to get pretty board
2013-09-10 20:59:30	ski	@let tabulate ix f = array ix [(i,f i) | i <- range ix]
2013-09-10 20:59:31	<--	joar (~joar@fsf/member/jwandborg) has quit (Quit: leaving)
2013-09-10 20:59:32	lambdabot	 Defined.
2013-09-10 20:59:35	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-10 20:59:36	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-10 20:59:36	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-10 20:59:43	quchen	How about "prettyprint :: Array … → String"?
2013-09-10 20:59:47	<--	sferry (~samuel@atheme/member/samferry) has quit (Max SendQ exceeded)
2013-09-10 20:59:48	merijn	t4nk222: Sure, but why would you need to use show for that? You could just write your own pretty print
2013-09-10 21:00:06	t4nk222	merijn: dont like to re-invent the wheel =)
2013-09-10 21:00:08	monochrom	I suggest: write your own code, and give it your own name.
2013-09-10 21:00:10	ski	t4nk222 : if you use something like ^, you could define it as `board n = tabulate ((1,1),(n,n)) $ \(i,j) -> 0'
2013-09-10 21:00:11	-->	sferry (~samuel@143.226.94.218) has joined #haskell
2013-09-10 21:00:11	<--	sferry (~samuel@143.226.94.218) has quit (Changing host)
2013-09-10 21:00:11	-->	sferry (~samuel@atheme/member/samferry) has joined #haskell
2013-09-10 21:00:15	nichthus	?hackage boxes
2013-09-10 21:00:16	lambdabot	http://hackage.haskell.org/package/boxes
2013-09-10 21:00:22	t4nk222	merijn: thought it is already implemented
2013-09-10 21:00:50	<--	Heisenmort (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 245 seconds)
2013-09-10 21:00:57	-->	aupiff (~aupiff@67-194-24-162.wireless.umnet.umich.edu) has joined #haskell
2013-09-10 21:01:08	t4nk222	thanks
2013-09-10 21:01:16	merijn	t4nk222: If it's a 2 dimensional array you can write it as: unlines . map (map (foo . snd)) . groupBy ((==) `on` (fst . fst)) . assocs
2013-09-10 21:01:35	nichthus	Don't do that...
2013-09-10 21:01:37	merijn	t4nk222: Just replace foo with a function that returns a single character
2013-09-10 21:02:02	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 21:02:07	-->	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has joined #haskell
2013-09-10 21:02:08	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Read error: Connection reset by peer)
2013-09-10 21:02:31	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 21:02:41	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-10 21:02:42	nichthus	merijn: You don't like pretty printing libraries?
2013-09-10 21:03:00	-->	coltfred (~coltfred@host-174-45-107-146.bzm-mt.client.bresnan.net) has joined #haskell
2013-09-10 21:03:42	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-10 21:03:56	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 21:04:04	<--	Lethalman (~lethal@151.28.31.3) has quit (Ping timeout: 260 seconds)
2013-09-10 21:04:05	merijn	nichthus: I'm not aware of any that render arrays as squares and anything else needs most of that logic to make it work
2013-09-10 21:04:23	nichthus	I linked to one...
2013-09-10 21:04:37	-->	codesoup (~codesoup@76-10-180-23.dsl.teksavvy.com) has joined #haskell
2013-09-10 21:04:37	<--	pratz (~pratz@122.169.15.62) has quit (Remote host closed the connection)
2013-09-10 21:04:39	-->	raichoo (~raichoo@mue-88-130-18-248.dsl.tropolys.de) has joined #haskell
2013-09-10 21:05:20	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 21:05:24	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Write error: Broken pipe)
2013-09-10 21:05:24	merijn	nichthus: Still needs to groups lists together and filter out the indices
2013-09-10 21:05:29	<--	t4nk222 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-09-10 21:05:30	<--	liquidpsion (~psion@153.9.254.208) has quit (Ping timeout: 264 seconds)
2013-09-10 21:05:47	<--	lilred (~lilred@wpa071174.Wireless.McGill.CA) has quit (Quit: Leaving)
2013-09-10 21:05:51	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-10 21:06:05	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 21:06:46	<--	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has quit (Ping timeout: 248 seconds)
2013-09-10 21:07:25	merijn	So the only thing boxes would remove from that code is replacing foo with something else and changing the unlines into some other concatenation
2013-09-10 21:07:38	nichthus	hcat [vcat [boxFor (arr ! (i, j)) | i <- [0..whatever]] | j <- [0..whatever]]
2013-09-10 21:08:07	<--	chuzz (~user@unaffiliated/chuzz) has quit (Ping timeout: 260 seconds)
2013-09-10 21:08:26	<--	milessabin (~miles@private.milessabin.com) has quit (Quit: Konversation terminated!)
2013-09-10 21:08:33	-->	milessabin_ (~miles@private.milessabin.com) has joined #haskell
2013-09-10 21:09:18	nichthus	advantages: elements don't have to render to a single character for this to look good; easy to swap out vcat/hcat for something that does more pretty-printing later
2013-09-10 21:09:20	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-09-10 21:10:07	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-10 21:10:18	--	Guest54198 is now known as terminalRepeat
2013-09-10 21:10:56	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-10 21:12:15	<--	NeatBasis (~quassel@cl-636.hel-01.fi.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-09-10 21:12:18	 *	hackagebot wai-app-static 1.3.2 - WAI application for static serving  http://hackage.haskell.org/package/wai-app-static-1.3.2 (MichaelSnoyman)
2013-09-10 21:13:10	mjboa	what's the difference between forall a. [a] and [forall a. a] ?
2013-09-10 21:13:25	-->	CapitanK (~CaptainK@181.179.35.205) has joined #haskell
2013-09-10 21:13:36	-->	ianclarksmith (~ianclarks@ip-64-134-45-10.public.wayport.net) has joined #haskell
2013-09-10 21:13:59	nichthus	The former says: pick a type; I am a list all of whose elements are that type. The latter says: I am a list; for each element, pick a type, and I am an element of that type.
2013-09-10 21:14:23	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-10 21:14:36	<--	milessabin_ (~miles@private.milessabin.com) has quit (Ping timeout: 245 seconds)
2013-09-10 21:14:52	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 21:14:52	geekosaur	of course the latter is useless because you can't retrieve the type afterward
2013-09-10 21:14:55	ocharles	nichthus: but semantically, how is that different? either way, you have a list of elements of any type (though all the same type, when you choose a type)
2013-09-10 21:14:59	ocharles	oh
2013-09-10 21:14:59	mjboa	ok, that was my intuition, thanks
2013-09-10 21:15:22	-->	setmeaway (~setmeaway@119.201.52.138) has joined #haskell
2013-09-10 21:15:37	nichthus	ocharles: I guess you spotted it, but "though all the same type" is the mistake.
2013-09-10 21:15:44	-->	NeatBasis (~quassel@cable-tku-50deef-108.dhcp.inet.fi) has joined #haskell
2013-09-10 21:15:51	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-09-10 21:15:57	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 21:16:07	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-10 21:16:09	<--	ianclarksmith (~ianclarks@ip-64-134-45-10.public.wayport.net) has quit (Max SendQ exceeded)
2013-09-10 21:16:10	-->	Heisenmort (~Mortomes_@dhcp-089-099-142-125.chello.nl) has joined #haskell
2013-09-10 21:16:16	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp153.bu.edu) has joined #haskell
2013-09-10 21:16:24	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 21:16:28	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-10 21:17:03	-->	LAMMJohn1on (~ja@user-5af430f6.broadband.tesco.net) has joined #haskell
2013-09-10 21:17:10	ocharles	nichthus: no, i haven't spotted it
2013-09-10 21:17:17	ocharles	nichthus: it really says each element can be a different type?
2013-09-10 21:17:20	<--	Heisenmort (~Mortomes_@dhcp-089-099-142-125.chello.nl) has quit (Changing host)
2013-09-10 21:17:21	-->	Heisenmort (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-10 21:17:26	mjboa	ocharles: yeah
2013-09-10 21:17:41	nichthus	well
2013-09-10 21:17:44	ocharles	weird
2013-09-10 21:17:46	nichthus	To be precise, no.
2013-09-10 21:17:47	n-dolio	@type \(x:y:zs) -> (x :: Int, y :: String)
2013-09-10 21:17:48	lambdabot	    Couldn't match type `Int' with `[Char]'
2013-09-10 21:17:49	lambdabot	    Expected type: String
2013-09-10 21:17:49	lambdabot	      Actual type: Int
2013-09-10 21:17:51	-->	Draconx|Laptop (~nbowler@fsf/member/Draconx) has joined #haskell
2013-09-10 21:17:54	nichthus	Each element has the same type, namely, forall a. a.
2013-09-10 21:17:55	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-10 21:18:19	nichthus	Whereas in forall a. [a], once you've fixed a type a, the elements are no longer polymorphic. They all have *that* type.
2013-09-10 21:18:35	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-10 21:18:39	<--	flebron (~flebron@190.18.146.246) has quit (Read error: Connection reset by peer)
2013-09-10 21:18:46	haasn	the latter can be an instantiation of the former
2013-09-10 21:18:49	haasn	the same is not true in reverse :)
2013-09-10 21:18:54	haasn	I think
2013-09-10 21:18:55	nichthus	So forall a. [a] can be specialized to [Int], [Bool], [Maybe String], etc.
2013-09-10 21:19:03	haasn	wait nvm
2013-09-10 21:19:13	 *	monochrom has a cunning plan! use impredicative types. in "forall a. [a]", put a = forall b. b :)
2013-09-10 21:19:15	<--	sferry_ (~samuel@143.226.94.218) has quit (Max SendQ exceeded)
2013-09-10 21:19:16	nichthus	But in [forall a. a] you have a bunch of elements, and each can independently be specialized as you please -- to Int, Bool, Maybe String, etc.
2013-09-10 21:19:25	haasn	monochrom: yes that's what I meant
2013-09-10 21:19:29	ocharles	oh, i thought that choosing one would still choose all the rest
2013-09-10 21:19:38	nichthus	no
2013-09-10 21:19:43	-->	sferry_ (~samuel@143.226.94.218) has joined #haskell
2013-09-10 21:19:43	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Read error: Operation timed out)
2013-09-10 21:19:43	ocharles	i guess it expands to (forall a. a) : (forall a. a) : ...
2013-09-10 21:19:50	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 21:19:54	<--	LAMMJohnson (~ja@user-5af43f7a.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 21:19:55	nichthus	And yes, with impredicative types everything goes wonky, as usual.
2013-09-10 21:19:57	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 21:20:34	haasn	it's possible to write f :: [forall a. a] -> forall b. [b]
2013-09-10 21:20:38	haasn	(with impredicative types)
2013-09-10 21:20:43	haasn	I think they're equivalent
2013-09-10 21:20:49	haasn	they're both equally useless, that is
2013-09-10 21:21:04	haasn	the only thing you can get out of either of them is a length
2013-09-10 21:21:11	nichthus	maybe so :)
2013-09-10 21:21:37	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-09-10 21:21:50	<--	sferry (~samuel@atheme/member/samferry) has quit (Ping timeout: 240 seconds)
2013-09-10 21:22:19	acowley	What is going on with new hackage and documentation? Some packages are missing docs altogether, others have individual missing pages.
2013-09-10 21:22:45	monochrom	do you mean the beta one?
2013-09-10 21:22:51	acowley	Yeah
2013-09-10 21:22:53	elliott	haasn: only [] inhabits [forall a. a] ignoring _|_
2013-09-10 21:22:59	nichthus	to = \xs. /\b. map (@b) xs                fro = \xs -> xs@forall a. a
2013-09-10 21:23:04	nichthus	haasn: Like that?
2013-09-10 21:23:05	elliott	nichthus isn't right, also
2013-09-10 21:23:08	elliott	(forall a. a) doesn't let you pick
2013-09-10 21:23:16	acowley	I know, beta, but the inconsistency is strange
2013-09-10 21:23:27	-->	milessabin_ (~miles@private.milessabin.com) has joined #haskell
2013-09-10 21:23:29	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-10 21:23:31	--	milessabin_ is now known as milessabin
2013-09-10 21:23:48	haasn	I have no idea what that syntax means nichthus but
2013-09-10 21:23:52	monochrom	yeah, definitely report it, you may have saved their lives
2013-09-10 21:23:55	haasn	λ let f :: [forall a. a] -> forall b. [b]; f x = map g x where g :: (forall a. a) -> b; g x = x
2013-09-10 21:23:57	haasn	^- is what I wrote in GHCi
2013-09-10 21:24:00	-->	litherum1 (~Litherum@17.114.106.18) has joined #haskell
2013-09-10 21:24:05	<--	litherum1 (~Litherum@17.114.106.18) has quit (Client Quit)
2013-09-10 21:24:29	nichthus	 /\ for capital lambda, @ for type application
2013-09-10 21:24:54	-->	chester_ (~chester@95-27-213-245.broadband.corbina.ru) has joined #haskell
2013-09-10 21:24:54	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-10 21:25:15	haasn	elliott: only [] inhabits forall a. [a] too, ignoring _|_
2013-09-10 21:25:43	haasn	and if you stop ignoring ⊥, they both contain lists of arbitrary lengths containing only ⊥s
2013-09-10 21:25:51	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 260 seconds)
2013-09-10 21:25:54	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp153.bu.edu) has quit (Quit: aaaaaaaaa)
2013-09-10 21:26:05	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-10 21:26:08	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 21:26:09	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-10 21:26:17	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-10 21:26:25	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 21:26:29	n-dolio	And partial lists.
2013-09-10 21:26:53	haasn	yes
2013-09-10 21:27:36	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-10 21:28:00	nichthus	elliott: What does "(forall a. a) doesn't let you pick" mean?
2013-09-10 21:29:03	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Ping timeout: 264 seconds)
2013-09-10 21:29:08	elliott	nichthus: oh, I misread what you said.
2013-09-10 21:29:18	elliott	I thought you thought (forall a. a) was actually (exists a. a), but you didn't.
2013-09-10 21:29:35	nichthus	oh, right, the difference can be a bit subtle, yeah
2013-09-10 21:30:01	ski	i'd say it's more stark than subtle
2013-09-10 21:30:26	<--	sferry_ (~samuel@143.226.94.218) has quit (Quit: Leaving)
2013-09-10 21:30:36	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-10 21:30:54	nichthus	Well. My explanation at least didn't highlight the difference, because I wasn't careful about differentiating between the guy building the list and the guy consuming it.
2013-09-10 21:32:36	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-10 21:32:49	ski	let's add uniformity principles to Haskell
2013-09-10 21:33:07	<--	Taneb (~nathan@host-92-30-187-55.as13285.net) has quit (Ping timeout: 264 seconds)
2013-09-10 21:33:08	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-10 21:33:10	sclv_	yes, lets have a haskell uniform!
2013-09-10 21:33:21	sclv_	green jumpsuits
2013-09-10 21:33:46	ski	e.g. we should be able to write `(forall a. Either (f a) (g a)) -> Either (forall a. f a) (forall a. g a)'
2013-09-10 21:33:55	geekosaur	green jumpsuit apparatus = Monad?
2013-09-10 21:34:08	elliott	ski: by parametricity?
2013-09-10 21:34:10	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 21:34:21	sclv_	i don't believe that proposition
2013-09-10 21:34:22	joe9	 I am running some usb transactions against a device using System.USB : http://codepad.org/C5xBOCZA . In this code, I would get the usb transaction to do and then find and open the device and run that transaction. Now, I want to leverage this code so that I can have multiple similar devices connected and I pick which one I want to run the transaction on.
2013-09-10 21:34:22	ski	elliott : i suspect parametricity doesn't grant us that
2013-09-10 21:34:33	sclv_	its very strong -- what logics allow that?
2013-09-10 21:34:38	elliott	I think it does, for any f and g?
2013-09-10 21:34:44	joe9	To do that, I would have to move the DeviceHandle to a parameter.
2013-09-10 21:35:08	nichthus	Does Haskell even have parametricity?
2013-09-10 21:35:10	sclv_	oh, haha you're right, parametricity is blunt
2013-09-10 21:35:11	elliott	examine the argument at a = (). output the same constructor as you get, and then from{Left,Right} the argument's output when demanded for a specific a
2013-09-10 21:35:13	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-10 21:35:20	joe9	I could change the functions to be -> DeviceHandle -> IO () or, I could use a state monad or some such.
2013-09-10 21:35:22	elliott	since it has no way to switch from Left to Right depending on the choice of a because of parametricity
2013-09-10 21:35:25	elliott	no?
2013-09-10 21:35:27	ski	sclv_ : then how about `(forall S : Power Nat. exists n : Nat. R(S,n)) -> (exists n : Nat. forall S : Power Nat. R(S,n))' (which is the original one) ?
2013-09-10 21:35:43	joe9	just wanted to check if there is a better way of going about it.
2013-09-10 21:36:30	joe9	When I start the program, it identifies the multiple devices, prompts me for which one I choose to run the transactions against. and then run different transactions against each such device.
2013-09-10 21:36:34	ski	elliott : in any case, it would be related to parametricity
2013-09-10 21:36:35	-->	Gecemmo (~textual@c83-251-174-153.bredband.comhem.se) has joined #haskell
2013-09-10 21:36:45	ski	(or some readings of it)
2013-09-10 21:38:03	ski	sclv_ : the intuition for the latter one being that there is no way to pick a natural number for *each* subset of the natural numbers, except by picking the same one for all of them
2013-09-10 21:38:07	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-10 21:38:41	sclv_	hmm... this feels related to the AoC
2013-09-10 21:38:50	elliott	ski: in essence, my claim is that foo :: (forall a. Either (f a) (g a)) -> Either (forall a. f a) (forall a. g a); foo x = case (x :: Either (f ()) (g ())) of Left _ -> Left (fromLeft x); Right _ -> Right (fromRight x) is fully defined
2013-09-10 21:38:51	-->	markcw (~jack@128.135.100.110) has joined #haskell
2013-09-10 21:38:56	n-dolio	(forall a. Either a (Not a)) -> Either (forall a. a) (forall a. Not a)
2013-09-10 21:39:17	elliott	right, internalised parametricity contradicts LEM, I think that is widely known?
2013-09-10 21:39:25	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 21:39:30	ski	and the intuition for `(forall a. Either (f a) (g a)) -> Either (forall a. f a) (forall a. g a)' would be that a value of type `forall a. Either (f a) (g a)' has to decide whether it is `Left ...' or `Right ...' (or perhaps bottom), without being able to depend on what type is chosen for `a', and because we can choose any type for `a', we should thus be able to extract `Either (forall a. f a) (forall a. g a)'
2013-09-10 21:39:51	ski	sclv_ : how so ?
2013-09-10 21:40:05	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 246 seconds)
2013-09-10 21:40:09	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: qqQQ)
2013-09-10 21:40:19	<--	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has quit (Read error: Operation timed out)
2013-09-10 21:40:36	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 21:40:55	sclv_	ski: well you get an ordering and you choose it freely.
2013-09-10 21:41:08	sclv_	ok that's not useful
2013-09-10 21:41:13	ski	ordering ?
2013-09-10 21:41:22	sclv_	i'm not feeling very articulate about this, sorry
2013-09-10 21:41:53	<--	nichthus (9e823203@gateway/web/freenode/ip.158.130.50.3) has quit (Ping timeout: 250 seconds)
2013-09-10 21:42:20	-->	tibbe (tibbe@nat/google/x-rtmoxzodrthuvirn) has joined #haskell
2013-09-10 21:42:23	ski	of course, `(forall a. Either (f a) (g a)) -> Either (forall a. f a) (forall a. g a)' probably wouldn't work in a type-passing implementation
2013-09-10 21:42:33	joe9	I think Reader monad is ideal for my situation
2013-09-10 21:42:34	sclv_	the HoTT book has a description of how to view AoC in terms of exists and forall commute
2013-09-10 21:42:48	sclv_	it seems to translate to this case for me, but i can't quite put it together
2013-09-10 21:43:09	sclv_	it also helps to clarify why there's something nonconstructive about it
2013-09-10 21:43:14	ski	(where you perhaps pass sizes of respective types to enable more unboxing, or perhaps to describe layout of data to GC)
2013-09-10 21:43:36	aristid	joe9: note that Reader r a is "the same" as r -> a
2013-09-10 21:43:43	ski	sclv_ : i'd say "distribute" rather than "commute", no ?
2013-09-10 21:43:56	sclv_	hmm... that might indeed be better.
2013-09-10 21:44:13	joe9	aristid: thanks.
2013-09-10 21:44:43	-->	Thulsadum (~thul@dengon.die-welt.net) has joined #haskell
2013-09-10 21:44:55	ski	sclv_ : `(a : A) -> ((b : B) * R a b)' being equivalent to `(f : A -> B) * ((a : A) -> R a b)'
2013-09-10 21:44:59	Thulsadum	good evening
2013-09-10 21:45:41	n-dolio	That one is constructive.
2013-09-10 21:45:50	joe9	aristid: is a Reader monad a good way to pass the device handle around?
2013-09-10 21:45:56	n-dolio	But you probably meant R a (f a).
2013-09-10 21:46:07	<--	toplelnoob (~toplelnoo@BSN-143-124-148.dial-up.dsl.siol.net) has quit (Remote host closed the connection)
2013-09-10 21:46:16	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-10 21:46:16	joe9	I have functions that do different things using a device handle.
2013-09-10 21:46:18	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-09-10 21:46:19	n-dolio	You get problems when you squash things.
2013-09-10 21:46:47	joe9	I currently have each such function open and close the device. I want to change that to pass the devicehandle to each function instead.
2013-09-10 21:47:12	ski	n-dolio : er, yes
2013-09-10 21:47:22	-->	boegel (~boegel@boegel.ugent.be) has joined #haskell
2013-09-10 21:47:26	ski	"squash" being quotients, yes ?
2013-09-10 21:47:42	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-10 21:47:53	-->	tutorship57 (~tutorship@78.129.150.164) has joined #haskell
2013-09-10 21:48:06	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 21:48:08	 *	ski still hasn't accepted LEM following from AoC
2013-09-10 21:48:12	<--	tutorship57 (~tutorship@78.129.150.164) has quit (Client Quit)
2013-09-10 21:48:50	-->	Taneb (~nathan@host-92-23-140-113.as13285.net) has joined #haskell
2013-09-10 21:48:51	<--	aupiff (~aupiff@67-194-24-162.wireless.umnet.umich.edu) has quit (Ping timeout: 247 seconds)
2013-09-10 21:49:00	n-dolio	Something of the sort.
2013-09-10 21:49:34	n-dolio	All the truncations that people talk about in HoTT, too, probably.
2013-09-10 21:49:43	<--	sxn (~sxn@mnch-4d0469d2.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-10 21:49:58	-->	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has joined #haskell
2013-09-10 21:50:03	n-dolio	It's not terribly clear to me how it creates problems.
2013-09-10 21:50:12	ski	which ?
2013-09-10 21:50:32	n-dolio	Putting squashing in the theorem of choice.
2013-09-10 21:51:05	n-dolio	Like, it'd be simple if it just said, "you've squashed away relevant information and are conjuring it back up."
2013-09-10 21:51:17	n-dolio	But you also resquash out any information you've conjured.
2013-09-10 21:51:20	<--	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has quit (Write error: Connection timed out)
2013-09-10 21:51:34	n-dolio	So it seems kosher at first blush.
2013-09-10 21:51:57	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-10 21:52:29	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 21:52:46	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-10 21:53:40	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-10 21:53:45	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 245 seconds)
2013-09-10 21:54:00	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-10 21:54:20	enthropy	could -XRecordWildCards be faked for an extensible record?
2013-09-10 21:54:25	<--	CapitanK (~CaptainK@181.179.35.205) has quit (Read error: Connection reset by peer)
2013-09-10 21:54:41	<--	beaky (~beaky@92.99.13.63) has quit (Quit: leaving)
2013-09-10 21:54:47	<--	hashcat (~chatzilla@39.12.220.170) has quit (Ping timeout: 260 seconds)
2013-09-10 21:55:35	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-10 21:55:42	enthropy	you have pattern quasiquotes
2013-09-10 21:57:26	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-10 21:57:26	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-10 21:58:13	<--	Arsche (~MyrAchle@server56310.uk2net.com) has quit (Ping timeout: 252 seconds)
2013-09-10 21:58:14	-->	CapitanK (~CaptainK@181.179.49.215) has joined #haskell
2013-09-10 21:58:30	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Ping timeout: 248 seconds)
2013-09-10 21:59:59	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 22:00:00	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Ping timeout: 245 seconds)
2013-09-10 22:00:22	<--	jackhill (jackhill@pilot.trilug.org) has quit (Read error: Connection reset by peer)
2013-09-10 22:00:32	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-10 22:00:40	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Remote host closed the connection)
2013-09-10 22:00:52	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-10 22:00:54	<--	pierreghz (~krux@83.80-247-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 256 seconds)
2013-09-10 22:01:40	haasn	no it's still statically typed
2013-09-10 22:01:47	haasn	or am I misunderstanding
2013-09-10 22:01:52	haasn	I mean uh
2013-09-10 22:01:54	haasn	monomorphically typed
2013-09-10 22:02:13	<--	Kevin_ (~Kevin@209.65.15.42) has quit (Read error: Connection reset by peer)
2013-09-10 22:02:19	 *	hackagebot minimal-configuration 0.1 - Minimal ini like configuration library with a few extras  http://hackage.haskell.org/package/minimal-configuration-0.1 (MariusGhita)
2013-09-10 22:02:22	-->	pierreghz (~krux@91.179.45.203) has joined #haskell
2013-09-10 22:02:31	haasn	oh, are you talking about implementing something similar to RecordWildCards for extensible records?
2013-09-10 22:02:32	-->	tilo (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-10 22:02:36	-->	Kevin_ (~Kevin@209.65.15.42) has joined #haskell
2013-09-10 22:02:37	--	tilo is now known as noteventime
2013-09-10 22:02:37	ski	let `A' be any proposition, and define `U' and `V' as subsets of `{0,1}' by `U = {x : {0,1} | x = 0 \/ (x = 1 /\ A)}' and `V = {x : {0,1} | (x = 0 /\ A) \/ x = 1}'
2013-09-10 22:02:42	-->	Shaladdle (~Shaladdle@128.237.200.231) has joined #haskell
2013-09-10 22:02:46	ski	now `forall S : {U,V}. exists x : {0,1}. x \in S', so by AoC, we get `exists f : {U,V} -> {0,1}. forall S : {U,V}. f(S) \in S'
2013-09-10 22:02:49	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-10 22:03:15	ski	open this and consider `f(U)' and `f(V)' which are elements of `{0,1}'. if `A' holds then they must be equal (since `U' and `V' then are equal); so if they're not equal, `not A' holds
2013-09-10 22:03:41	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-10 22:04:06	ski	alternatively if they are (both) equal (to `0' or to `1'), then both `U' and `V' contain `0', or they both contain `1' (because `f(U) \in U' and `f(V) \in V'), in which case `A' holds
2013-09-10 22:04:13	ski	n-dolio : ok ?
2013-09-10 22:04:30	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Read error: Connection reset by peer)
2013-09-10 22:04:46	ski	(note that `{0,1}' here is discrete : has decidable equality)
2013-09-10 22:05:26	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 256 seconds)
2013-09-10 22:05:30	<--	cfricke_ (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Ping timeout: 264 seconds)
2013-09-10 22:05:41	<--	kloplop321 (~kloplop32@74-141-69-172.dhcp.insightbb.com) has quit (Read error: Connection reset by peer)
2013-09-10 22:06:30	<--	tommd (~tommd@pdx.galois.com) has quit (Remote host closed the connection)
2013-09-10 22:06:41	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-10 22:06:41	-->	anRch (~markmilli@23.30.182.241) has joined #haskell
2013-09-10 22:06:48	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-10 22:06:54	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-10 22:07:04	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-10 22:07:04	scanlonman	Hello everyone, is "Learn You a Haskell for Great Good!" still a recommended book?
2013-09-10 22:07:07	-->	kloplop321 (~kloplop32@74-141-69-172.dhcp.insightbb.com) has joined #haskell
2013-09-10 22:07:10	johnw	yes!
2013-09-10 22:07:11	ski	i believe so
2013-09-10 22:07:22	scanlonman	Thank you!
2013-09-10 22:07:42	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-09-10 22:08:06	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-10 22:08:18	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 276 seconds)
2013-09-10 22:08:30	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 22:08:49	<--	AlecTaylor (alec.taylo@unaffiliated/alectaylor) has quit (Ping timeout: 256 seconds)
2013-09-10 22:09:04	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-09-10 22:09:14	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-10 22:09:14	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-10 22:09:14	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-10 22:09:15	-->	AlecTaylor (alec.taylo@unaffiliated/alectaylor) has joined #haskell
2013-09-10 22:09:43	<--	coltfred (~coltfred@host-174-45-107-146.bzm-mt.client.bresnan.net) has quit (Ping timeout: 260 seconds)
2013-09-10 22:10:16	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-10 22:11:07	-->	elediaz (~quassel@92.59.150.27) has joined #haskell
2013-09-10 22:11:11	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-10 22:11:43	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 22:12:09	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-10 22:12:14	-->	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-10 22:13:03	<--	paolino (~paolino@net-2-40-115-189.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-09-10 22:13:20	-->	SingingBoyo (~brandon@dhcp-128-189-200-232.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 22:13:30	n-dolio	ski: I've worked through the construction before.
2013-09-10 22:13:43	aleator	How efficient is acidState? I've got terrible performance with hedis and am looking for replacements
2013-09-10 22:14:25	<--	nonconvergent (~neuromanc@c-24-30-40-161.hsd1.ga.comcast.net) has left #haskell
2013-09-10 22:14:32	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-10 22:14:55	-->	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has joined #haskell
2013-09-10 22:15:06	n-dolio	I just don't have a good intuitive sense for where the operation that I would deem non-constructive is happening.
2013-09-10 22:15:08	-->	travisstaton (~tstaton@70.127.254.161) has joined #haskell
2013-09-10 22:16:26	<--	matheus23 (~quassel@p4FDF2FC9.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-10 22:16:53	<--	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has quit (Ping timeout: 261 seconds)
2013-09-10 22:17:08	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-10 22:17:09	n-dolio	For instance, I don't think I believe that adding quotient types necessarily lets you prove excluded middle.
2013-09-10 22:17:53	ski	i don't think so either
2013-09-10 22:18:07	Taneb	aleator, it's pretty good, I think
2013-09-10 22:18:11	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 22:18:18	ski	i think the problem in the above is the (purported) proof of `forall S : {U,V}. exists x : {0,1}. x \in S'
2013-09-10 22:18:18	-->	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-09-10 22:18:20	-->	jackhill (jackhill@pilot.trilug.org) has joined #haskell
2013-09-10 22:18:21	n-dolio	But I'd have to work through a lot more to figure out where that argument above fails for the formulation of quotient types I'd add.
2013-09-10 22:18:22	<--	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has quit (Remote host closed the connection)
2013-09-10 22:18:24	enthropy	haasn: yes
2013-09-10 22:18:31	<--	sopvop (~sopvop@ppp78-37-170-192.pppoe.avangarddsl.ru) has quit (Quit: Konversation terminated!)
2013-09-10 22:18:39	-->	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-09-10 22:18:46	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-09-10 22:18:50	ski	we have to ask, what does `{U,V}' mean here ?
2013-09-10 22:19:02	n-dolio	Yes, that's not even a thing.
2013-09-10 22:19:04	-->	agallagher (~textual@mpk-nat-3.thefacebook.com) has joined #haskell
2013-09-10 22:19:16	ski	possibly it means `{S : Power {0,1} | S = U \/ S = V}'
2013-09-10 22:19:24	-->	ccapndave (~ccapndave@157-113.1-85.cust.bluewin.ch) has joined #haskell
2013-09-10 22:19:44	-->	coltfred (~coltfred@inet-hqmc01-o.oracle.com) has joined #haskell
2013-09-10 22:19:45	enthropy	haasn: the problem is that when I have     let [wildp| |] = (x .=. 1 .*. y .=. 2 .*. emptyRecord)
2013-09-10 22:19:45	ski	or perhaps something more subtle that doesn't even let us computationally detect whether we got an `U' or a `V'
2013-09-10 22:20:02	<--	tero- (~tero@core.feriko.fi) has quit (Remote host closed the connection)
2013-09-10 22:20:09	enthropy	haasn: the wildp quaisquote doesn't know what's on the right hand side
2013-09-10 22:20:10	<--	pierreghz (~krux@91.179.45.203) has quit (Ping timeout: 256 seconds)
2013-09-10 22:20:24	haasn	enthropy: I'm not familiar with the new extensible records system, sorry. I haven't looked at them yet
2013-09-10 22:20:44	enthropy	haasn: I mean for HList-type records
2013-09-10 22:21:07	enthropy	I don't think it has anything to do with new things
2013-09-10 22:21:20	<--	_d3f (~gnu@46.183.216.234) has quit (Quit: WeeChat 0.4.1)
2013-09-10 22:21:20	ski	assuming the former case, i think `forall S : {S : Power {0,1} | S = U \/ S = V}. exists x : {0,1}. x \in S' oughtn't to work, because the `S = U \/ S = V' condition here ought to be a condition whose information can't be used to "exhibit" any information in the result, here the `\/'
2013-09-10 22:21:26	<--	petapetapeta (~Peter@130.225.165.43) has quit (Ping timeout: 248 seconds)
2013-09-10 22:21:41	jfischoff	aleator: what are you seeing with hedis? I ask because I use it, but haven't profiled it
2013-09-10 22:22:01	<--	troydm (~troydm@unaffiliated/troydm) has quit (Quit: What is hope? That all of your wishes and all of your dreams come true? (C) Rau Le Creuset)
2013-09-10 22:22:23	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-10 22:22:31	n-dolio	Was the original Diaconescu (I think) paper using something this set-theory-ish?
2013-09-10 22:22:49	<--	kitallis (~kitallis@122.166.154.133) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-10 22:22:49	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-10 22:22:54	n-dolio	Oh, it was.
2013-09-10 22:22:58	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-10 22:22:59	ski	n-dolio : e.g. a cauchy sequence is a sequence of reals satisfying a certain property. we don't want the result of functions from the reals to be able to depend on *how* we have proved this property -- but if we have a function from reals to reals, then we can use the information in this property to prove the corresponding information in the property for the output real
2013-09-10 22:23:15	-->	ParahSailin (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 22:23:22	<--	ParahSailin (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has quit (Changing host)
2013-09-10 22:23:22	-->	ParahSailin (~Rob@unaffiliated/parahsailin) has joined #haskell
2013-09-10 22:23:22	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Read error: Operation timed out)
2013-09-10 22:23:31	ski	n-dolio : i'm not sure. <http://en.wikipedia.org/wiki/Diaconescu%27s_theorem> seems to list a variant of the above (i haven't considered it in detail)
2013-09-10 22:23:37	enthropy	haasn: I guess I can do -XRecordPuns though
2013-09-10 22:23:44	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Read error: Operation timed out)
2013-09-10 22:23:50	-->	Kuraitou_ (~kuraitou@unaffiliated/kuraitou) has joined #haskell
2013-09-10 22:23:50	<--	Shaladdle (~Shaladdle@128.237.200.231) has quit (Quit: Shaladdle)
2013-09-10 22:24:48	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Quit: Leaving)
2013-09-10 22:24:57	ski	(the variant i described above comes from "Elements of Intuitionism" by Michael Dummet. "A Course in Constructive Algebra" also has a (very brief) formulation, but i wasn't able to decide it)
2013-09-10 22:25:00	<--	Paprikachu (~Paprikach@77.117.86.190.wireless.dyn.drei.com) has quit (Ping timeout: 245 seconds)
2013-09-10 22:25:11	n-dolio	ski: Anyhow, I thought I saw an article a while back where one of the HoTT guys was talking about this....
2013-09-10 22:25:14	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-10 22:25:20	ski	ok ?
2013-09-10 22:26:06	n-dolio	And he was implying that the 'theorem of choice' was what you get with pi and sigma, and the 'axiom' was more like if you insisted that the theorem still held for arbitrary types even when your 'forall' and 'exists' were truncated to propositions.
2013-09-10 22:26:12	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-10 22:26:39	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-10 22:26:43	<--	ParahSai1in (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has quit (Read error: Operation timed out)
2013-09-10 22:26:51	DRiKE	anyone successfully compiled ghc for ARM (raspberry pi)? my compilation fails with 'ghc-cabal: /tmp/32486.o: does not exist'
2013-09-10 22:26:53	-->	Paprikachu (~Paprikach@77.117.83.73.wireless.dyn.drei.com) has joined #haskell
2013-09-10 22:26:56	<--	beckerb (~beckerb@2001:660:3013:3:7aac:c0ff:fea0:a7b4) has quit (Quit: Konversation terminated!)
2013-09-10 22:26:59	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (Ping timeout: 256 seconds)
2013-09-10 22:26:59	<--	ary__ (~ary@53564EFD.cm-6-7b.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-10 22:26:59	-->	pierreghz (~krux@91.179.3.59) has joined #haskell
2013-09-10 22:27:30	n-dolio	But I'm not sure I see what's wrong with that, either. Because when I think about squashing things, it tends to be all right to eliminate such that you 'create' information as long as your result squashes it away.
2013-09-10 22:27:56	n-dolio	Which is what the propositional choice thing looks like.
2013-09-10 22:27:59	<--	CapitanK (~CaptainK@181.179.49.215) has quit (Read error: Connection reset by peer)
2013-09-10 22:28:21	n-dolio	I may not have fully understood what the article was getting at, though.
2013-09-10 22:28:28	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 22:28:29	<--	hsyl20 (~shenry@193.50.110.138) has quit (Quit: leaving)
2013-09-10 22:28:48	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-10 22:28:51	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-10 22:28:52	elliott	maybe the problem is that the "exists" info has to be lifted out of a truncation too many? or something.
2013-09-10 22:28:53	-->	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has joined #haskell
2013-09-10 22:28:57	elliott	to distribute.
2013-09-10 22:29:01	elliott	hi, I know nothing.
2013-09-10 22:29:01	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 22:29:38	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-10 22:30:07	-->	CapitanK (~CaptainK@181.179.73.131) has joined #haskell
2013-09-10 22:30:38	n-dolio	Like, 'forall a:A. exists b:B. R a b' doesn't have a function from A to B, but neither does 'exists f:A->B. forall a. R a (f a)'.
2013-09-10 22:30:39	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-10 22:30:41	n-dolio	If it's squashed.
2013-09-10 22:30:48	--	Kuraitou_ is now known as Kuraitou
2013-09-10 22:31:06	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 22:31:07	n-dolio	So it's okay in that respect.
2013-09-10 22:31:39	zzing	Does anyone know if the new xcode coming is compatible with ghc? It didn't work with one of the betas, but that was about two months ago.
2013-09-10 22:31:40	-->	jeff_s1 (~Jeff@c-76-20-137-179.hsd1.mi.comcast.net) has joined #haskell
2013-09-10 22:32:01	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 268 seconds)
2013-09-10 22:32:03	<--	AlecTaylor (alec.taylo@unaffiliated/alectaylor) has quit (Ping timeout: 256 seconds)
2013-09-10 22:32:16	ski	n-dolio : well, it could be that to compute the result, you need the "squashed" input info, even though the answer doesn't depend on the exact proof of it ?
2013-09-10 22:32:20	 *	hackagebot HaRe 0.7.0.3 - the Haskell Refactorer.  http://hackage.haskell.org/package/HaRe-0.7.0.3 (AlanZimmerman)
2013-09-10 22:32:38	ski	or is this a notion of "squashing" where the info isn't present at run-time ?
2013-09-10 22:33:05	-->	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-10 22:33:20	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-10 22:33:23	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-10 22:33:51	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 22:34:33	<--	CapitanK (~CaptainK@181.179.73.131) has quit (Read error: Connection reset by peer)
2013-09-10 22:34:42	ski	there's also stuff like for every `x' on the "complex unit circle", there is an `y' such that `x = y^2', but you can't make a global continuous choice of `y' given `x'
2013-09-10 22:35:35	-->	troydm (~troydm@unaffiliated/troydm) has joined #haskell
2013-09-10 22:36:06	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-10 22:36:15	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-09-10 22:36:31	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 264 seconds)
2013-09-10 22:37:23	<--	joar (~joar@fsf/member/jwandborg) has quit (Remote host closed the connection)
2013-09-10 22:37:26	n-dolio	I would expect that the information doesn't (need to) exist at runtime.
2013-09-10 22:37:33	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-10 22:37:36	ski	or `forall x : |R. exists n : |Z. |x - n| =< 1/2', which i don't think ought to be provable on a constructive interpretation of `exists', but which could be fine for a weak one, as in your last squashing case above
2013-09-10 22:37:43	n-dolio	I don't really know how propositional truncation works in HoTT, though. I need to read the book.
2013-09-10 22:37:52	<--	yacks (~py@103.6.159.103) has quit (Ping timeout: 260 seconds)
2013-09-10 22:37:57	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-10 22:38:43	ski	i think possibly both variants (no run-time info vs. run-time info present, but "real" result may not essentially depend on it (though may depend on its presence)) have merit
2013-09-10 22:38:47	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-10 22:38:47	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-10 22:38:56	-->	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 22:39:07	exicer	Oh man, I'm trying to understand conduits - reading the conduits chapter of the yesod book - and I can't even understand the type signatures
2013-09-10 22:39:17	<--	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has quit (Quit: WeeChat 0.4.1)
2013-09-10 22:39:35	n-dolio	I don't think you could prove the |x - n| <= 1/2 without introducing something that would obviously be the non-constructive culprit.
2013-09-10 22:39:49	exicer	How should I interpret Resource m => Conduit Int m Text ?
2013-09-10 22:39:56	-->	parcs (~patrick@ool-4353aab4.dyn.optonline.net) has joined #haskell
2013-09-10 22:40:21	ski	well, i mentioned the `|x - n| <= 1/2' one, because a book suggested it as a refutation of (general) AoC (they assumed the premise above to be evidently true)
2013-09-10 22:40:39	<--	ystael (~ystael@64.206.121.41) has quit (Ping timeout: 268 seconds)
2013-09-10 22:40:42	<--	ccapndave (~ccapndave@157-113.1-85.cust.bluewin.ch) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-10 22:40:56	--	Guest77905 is now known as apples
2013-09-10 22:41:13	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-10 22:41:19	<--	oleo (~oleo@xdsl-78-35-172-62.netcologne.de) has quit (Ping timeout: 264 seconds)
2013-09-10 22:41:32	-->	oleo (~oleo@xdsl-78-35-156-100.netcologne.de) has joined #haskell
2013-09-10 22:41:37	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-10 22:41:54	<--	rgr (~user@f054058053.adsl.alicedsl.de) has quit (Ping timeout: 240 seconds)
2013-09-10 22:41:56	-->	LAMMJohnson (~ja@user-5af4353d.broadband.tesco.net) has joined #haskell
2013-09-10 22:41:58	Twey	exicer: That's a Conduit that takes Ints to Text in the m monad, isn't it?
2013-09-10 22:41:59	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Quit: message144)
2013-09-10 22:41:59	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-10 22:42:15	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-10 22:42:31	<--	LAMMJohn1on (~ja@user-5af430f6.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-10 22:42:32	-->	tero (~tero@core.feriko.fi) has joined #haskell
2013-09-10 22:42:55	--	tero is now known as tero-
2013-09-10 22:43:15	exicer	Twey: I don't really get the "in the monad m" part (I am still getting to grips with monads).
2013-09-10 22:43:25	exicer	Could you give an example using Maybe ?
2013-09-10 22:43:28	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Read error: Operation timed out)
2013-09-10 22:43:37	elliott	maybe do that part before conduits :) it's considerably more fundamental
2013-09-10 22:43:41	Twey	exicer: You should probably hold off on Conduit and read the monad chapters of LYAH or something, then
2013-09-10 22:43:56	bitonic	is there a quick way to build a package with an executable target through a sandbox?
2013-09-10 22:43:57	exicer	Oh, no I get the definition of monads, and even (kinda) understand some
2013-09-10 22:44:06	bitonic	so without installing any libraries required globally
2013-09-10 22:44:20	exicer	Does in the monad just mean, using values that are "wrapped" in Just,  or Nothing ?
2013-09-10 22:44:49	exicer	So it takes something like it takes Int to Maybe Text  ?
2013-09-10 22:44:55	Twey	exicer: If m = Maybe, then it's a conduit that takes an Int and eventually produces a Maybe Int (if I remember correctly)
2013-09-10 22:45:05	Twey	Yeah, more or less
2013-09-10 22:45:22	shoret	is there a way (that could be used e.g. in a pre-commit hook) to tell whether ghc -Wall produced any warnings?
2013-09-10 22:45:39	exicer	Right, that actually makes sense then.. all of the stuff in the type signature with a lack of arrow confused me :p
2013-09-10 22:46:48	<--	LAMMJohnson (~ja@user-5af4353d.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-10 22:46:53	n-dolio	ski: I don't know. Maybe. I'd have to think a while about what equality of that existential type is.
2013-09-10 22:46:55	<--	desc|zenbook (~heh@120.141.148.63) has quit (Read error: Connection reset by peer)
2013-09-10 22:47:35	donri	Twey: type Conduit i m o = ConduitM i o m () -- so presumably it produces Maybe () in the monad, and yields Text to the next Conduit or Sink
2013-09-10 22:47:45	donri	exicer: ^
2013-09-10 22:47:56	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-10 22:48:03	ski	n-dolio : talking about `{S : Power {0,1} | S = U \/ S = V}' or what ?
2013-09-10 22:48:23	n-dolio	ski: No, exists n: |Z. |x - n| <= 1/2.
2013-09-10 22:48:28	ski	ok
2013-09-10 22:48:51	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-10 22:48:55	n-dolio	To compute n, you need the representation of r. But to get that, you need to eliminate a quotient, which requires that you produce results that respect the quotient.
2013-09-10 22:48:55	ski	with a strong reading, it means that you can compute `n'
2013-09-10 22:49:34	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has left #haskell
2013-09-10 22:49:58	shoret	answering my own question: use -Werror
2013-09-10 22:49:59	n-dolio	So it would require proving that you produce 'the same proof' for all equivalent representations of r.
2013-09-10 22:50:03	ski	with a weaker reading, it could mean that you can compute an `n', but it may depend not only on the actual real number `x', but also on how it's represented as a cauchy sequence -- but then you only get to open the existential if you promise that your end result won't depend on the actual `n' being computed
2013-09-10 22:50:11	Twey	Yeah
2013-09-10 22:50:12	n-dolio	So you have to decide what 'the same proof' is for that exists.
2013-09-10 22:51:06	<--	boegel (~boegel@boegel.ugent.be) has quit (Quit: Leaving)
2013-09-10 22:51:09	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 22:51:27	ski	(so the end result depends only on the knowledge that there "exists" (in this weak sense) a natural number, but mayn't depend on *which* such natural number is computed)
2013-09-10 22:51:33	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 22:51:43	donri	exicer: but if you were after an analogy, i guess you could say it's like Int -> IO Text if m = IO. that's not how it's implemented though.
2013-09-10 22:51:46	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-09-10 22:52:02	-->	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has joined #haskell
2013-09-10 22:52:20	 *	hackagebot mwc-random 0.13.0.0 - Fast, high quality pseudo random number generation  http://hackage.haskell.org/package/mwc-random-0.13.0.0 (BryanOSullivan)
2013-09-10 22:52:27	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-10 22:52:39	ski	n-dolio : with strong `exists', it must be the same `n' for equivalent Cauchy sequences, and the same proof of the inequality
2013-09-10 22:52:46	ski	with weaker `exists', hmm
2013-09-10 22:53:09	donri	exicer: (btw did you mean MonadResource not Resource?)
2013-09-10 22:54:05	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 22:54:25	ski	with the "no run-time" `exists', there is no witness for `n', so only the proofs of the inequality would be compared, i think (whatever that means)
2013-09-10 22:54:49	ski	with "mustn't depend on actual value" `exists', i'm not sure
2013-09-10 22:55:13	-->	sbahra (~sbahra@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-10 22:55:40	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-09-10 22:56:45	-->	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-09-10 22:56:51	<--	Kiryx (~Kiryx@84-234-41-12.internetia.net.pl) has quit (Ping timeout: 260 seconds)
2013-09-10 22:57:23	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 22:57:56	donri	exicer: and you should check out pipes too
2013-09-10 22:58:04	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-10 22:58:50	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Ping timeout: 246 seconds)
2013-09-10 22:59:21	-->	ekipan (4cd4e01c@gateway/web/freenode/ip.76.212.224.28) has joined #haskell
2013-09-10 23:00:51	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-10 23:00:58	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has left #haskell
2013-09-10 23:01:20	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-10 23:01:39	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-10 23:01:54	<--	eataix (~eataix@unaffiliated/eataix) has quit (Ping timeout: 240 seconds)
2013-09-10 23:02:01	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-10 23:02:09	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Ping timeout: 240 seconds)
2013-09-10 23:02:15	<--	mrshoe (~mrshoe@mail.davidshoemaker.me) has quit (Ping timeout: 240 seconds)
2013-09-10 23:02:52	<--	dilinger (~dilinger@lunge.queued.net) has quit (Ping timeout: 264 seconds)
2013-09-10 23:02:55	<--	rfw (~rfw@heimdall.rfw.name) has quit (Ping timeout: 276 seconds)
2013-09-10 23:02:55	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-09-10 23:02:55	-->	eataix (~eataix@unaffiliated/eataix) has joined #haskell
2013-09-10 23:02:58	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-09-10 23:03:17	-->	erochester (~erocheste@137.54.11.221) has joined #haskell
2013-09-10 23:03:27	-->	dilinger (~dilinger@lunge.queued.net) has joined #haskell
2013-09-10 23:03:28	-->	mrshoe (~mrshoe@mail.davidshoemaker.me) has joined #haskell
2013-09-10 23:03:28	<--	rasmusto (~trasmuss@li519-146.members.linode.com) has quit (Ping timeout: 264 seconds)
2013-09-10 23:03:29	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (Excess Flood)
2013-09-10 23:03:30	-->	BigEndian (~hurp@li547-53.members.linode.com) has joined #haskell
2013-09-10 23:03:39	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Quit: Shaladdle)
2013-09-10 23:03:40	<--	sm (~user@li229-222.members.linode.com) has quit (Remote host closed the connection)
2013-09-10 23:03:41	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 23:03:44	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 246 seconds)
2013-09-10 23:03:45	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-10 23:03:45	<--	Tarential (~Tarential@li421-205.members.linode.com) has quit (Excess Flood)
2013-09-10 23:03:48	<--	artyomkazak2 (~artyomkaz@94.25.228.41) has quit (Ping timeout: 256 seconds)
2013-09-10 23:03:51	-->	sm_ (~user@li229-222.members.linode.com) has joined #haskell
2013-09-10 23:04:04	<--	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has quit (Quit: blasting off again!)
2013-09-10 23:04:06	<--	agallagher (~textual@mpk-nat-3.thefacebook.com) has quit (Ping timeout: 248 seconds)
2013-09-10 23:04:09	-->	rasmusto (~trasmuss@li519-146.members.linode.com) has joined #haskell
2013-09-10 23:04:09	-->	Tarential (~Tarential@li421-205.members.linode.com) has joined #haskell
2013-09-10 23:04:13	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-10 23:04:20	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 23:04:33	-->	rfw (~rfw@heimdall.rfw.name) has joined #haskell
2013-09-10 23:04:47	<--	phst` (~user@ppp-46-244-169-148.dynamic.mnet-online.de) has quit (Ping timeout: 260 seconds)
2013-09-10 23:05:04	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 23:05:31	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-09-10 23:06:00	<--	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has quit (Quit: :3)
2013-09-10 23:06:10	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 276 seconds)
2013-09-10 23:06:21	-->	acfoltzer (Adam@2600:3c01::f03c:91ff:fedf:682e) has joined #haskell
2013-09-10 23:06:23	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-10 23:06:34	-->	ivoscc (~ivo@pc-6-57.rcp.net.pe) has joined #haskell
2013-09-10 23:06:35	-->	akurei (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has joined #haskell
2013-09-10 23:06:49	-->	perlite_ (~perlite@1-164-208-45.dynamic.hinet.net) has joined #haskell
2013-09-10 23:07:08	-->	AleXoundOS (~AleXoundO@188.244.39.73) has joined #haskell
2013-09-10 23:07:35	<--	dsirenko_ (~DSirenko@cl-169.led-01.ru.sixxs.net) has quit (Ping timeout: 246 seconds)
2013-09-10 23:07:43	<--	erochester (~erocheste@137.54.11.221) has quit (Ping timeout: 264 seconds)
2013-09-10 23:07:58	<--	shreesh (~shreesh@209.104.235.1) has quit (Remote host closed the connection)
2013-09-10 23:08:06	-->	markcw (~jack@128.135.100.110) has joined #haskell
2013-09-10 23:08:20	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-10 23:08:24	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-10 23:08:47	-->	dsirenko_ (~DSirenko@195.177.74.50) has joined #haskell
2013-09-10 23:08:52	<--	perlite (~perlite@114-25-194-217.dynamic.hinet.net) has quit (Ping timeout: 264 seconds)
2013-09-10 23:08:57	--	perlite_ is now known as perlite
2013-09-10 23:09:55	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 260 seconds)
2013-09-10 23:11:16	<--	AleXoundOS (~AleXoundO@188.244.39.73) has quit (Ping timeout: 245 seconds)
2013-09-10 23:11:29	d3lxa	with esqueleto, any idea how to filter out maybe/null values when doing a join? I use innerJoin, but still got maybe type
2013-09-10 23:11:34	<--	coltfred (~coltfred@inet-hqmc01-o.oracle.com) has quit (Ping timeout: 248 seconds)
2013-09-10 23:12:00	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-10 23:12:10	<--	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has quit (Quit: WeeChat 0.4.0)
2013-09-10 23:12:38	 *	hackagebot tensor 0.3.0 - A completely type-safe library for linear algebra  http://hackage.haskell.org/package/tensor-0.3.0 (NicolaSquartini)
2013-09-10 23:12:48	-->	eis_ (~eis@109.197.218.46) has joined #haskell
2013-09-10 23:13:14	-->	magnap (bcb3eb89@gateway/web/freenode/ip.188.179.235.137) has joined #haskell
2013-09-10 23:14:05	<--	Taneb (~nathan@host-92-23-140-113.as13285.net) has quit (Quit: Leaving)
2013-09-10 23:14:33	<--	ivoscc (~ivo@pc-6-57.rcp.net.pe) has quit (Quit: Konversation terminated!)
2013-09-10 23:14:42	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-09-10 23:15:08	<--	taylorgb_ (~mystery@213.229.88.28) has quit (Ping timeout: 256 seconds)
2013-09-10 23:15:14	<--	nilg`` (~user@ALagny-551-1-238-4.w83-114.abo.wanadoo.fr) has quit (Remote host closed the connection)
2013-09-10 23:15:19	-->	applicative (~m@mt-wireless-pittnet-150-212-26-35.wireless.pitt.edu) has joined #haskell
2013-09-10 23:15:30	-->	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-10 23:15:57	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-10 23:16:16	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-09-10 23:17:19	<--	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has quit (Ping timeout: 264 seconds)
2013-09-10 23:17:55	<--	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has quit (Ping timeout: 264 seconds)
2013-09-10 23:18:35	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-10 23:18:54	<--	magnap (bcb3eb89@gateway/web/freenode/ip.188.179.235.137) has quit (Quit: Page closed)
2013-09-10 23:19:00	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-10 23:19:04	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-10 23:19:18	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 23:19:19	-->	ddinh (~David@108.67.65.91) has joined #haskell
2013-09-10 23:19:26	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-10 23:19:30	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-10 23:19:39	-->	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has joined #haskell
2013-09-10 23:19:40	<--	martinalex (~quassel@jupiter.kawo2.rwth-aachen.de) has quit (Ping timeout: 256 seconds)
2013-09-10 23:19:45	<--	dfan (~user@vpn.harmonixmusic.com) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 23:19:56	<--	chester_ (~chester@95-27-213-245.broadband.corbina.ru) has quit (Quit: Leaving.)
2013-09-10 23:20:36	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-09-10 23:20:50	-->	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-10 23:21:32	applicative	@tell dcoutts It seems the user accounts mail gizmo on beta.hackage.etc is working
2013-09-10 23:21:32	lambdabot	Consider it noted.
2013-09-10 23:21:45	dcoutts	applicative: yep, thanks
2013-09-10 23:22:01	applicative	oh there you are.
2013-09-10 23:22:02	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-09-10 23:22:07	 *	dcoutts also checked it out this morning after johnw fixed the mail setup
2013-09-10 23:22:43	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 264 seconds)
2013-09-10 23:22:55	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 245 seconds)
2013-09-10 23:23:13	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-10 23:24:20	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 23:24:23	-->	tim_ (~tim@46.246.47.13) has joined #haskell
2013-09-10 23:24:26	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-10 23:24:48	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has left #haskell
2013-09-10 23:26:12	<--	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-09-10 23:26:14	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-10 23:26:16	<--	tuxie_ (~paranoid@g225065022.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-10 23:26:42	-->	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-10 23:27:46	-->	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has joined #haskell
2013-09-10 23:27:53	-->	gentleben (~gentleben@12.250.97.26) has joined #haskell
2013-09-10 23:28:11	<--	Bluuu (a@unaffiliated/bluuu) has quit (Ping timeout: 256 seconds)
2013-09-10 23:29:03	<--	applicative (~m@mt-wireless-pittnet-150-212-26-35.wireless.pitt.edu) has quit (Ping timeout: 264 seconds)
2013-09-10 23:29:07	-->	schoppenhauer (~quassel@unaffiliated/schoppenhauer) has joined #haskell
2013-09-10 23:29:08	<--	c-rog (~c-rog@75-101-56-204.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-10 23:29:15	<--	elediaz (~quassel@92.59.150.27) has quit (Quit: http://quassel-irc.org - Chatee cómodamente donde sea.)
2013-09-10 23:29:35	-->	magnap (bcb3eb89@gateway/web/freenode/ip.188.179.235.137) has joined #haskell
2013-09-10 23:29:54	<--	kuribas (~user@d54C430B0.access.telenet.be) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 23:30:04	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-10 23:30:05	-->	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has joined #haskell
2013-09-10 23:30:39	-->	aegis__ (~aegis@188.74.124.12) has joined #haskell
2013-09-10 23:30:43	-->	artyomkazak (~artyomkaz@94.25.228.41) has joined #haskell
2013-09-10 23:30:56	aegis__	hey! what's the naming convention for a "tree" variable? i.e. xs for lists
2013-09-10 23:31:45	donri	"tree"
2013-09-10 23:31:48	shachaf	Lots of conventions. It depends on the tree.
2013-09-10 23:31:49	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-10 23:31:52	ocharles	aegis__: depends on the tree doesn't it? In a binary tree, you might use 'l' and 'r'
2013-09-10 23:31:53	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 23:31:56	shachaf	For example, "l" and "r" for -- yes, that.
2013-09-10 23:32:04	 *	ocharles zooms past shachaf 
2013-09-10 23:32:10	aegis__	I see
2013-09-10 23:32:26	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 23:32:31	shachaf	You can always use the McBridesque (Tree cs u js)
2013-09-10 23:32:34	donri	don't be afraid to use variable names longer than two characters
2013-09-10 23:32:48	<--	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has quit (Quit: leaving)
2013-09-10 23:32:50	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-10 23:32:55	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-10 23:33:27	shachaf	I'd be afraid of triggering some strange untested edge case in the GHC parser.
2013-09-10 23:33:32	ski	aegis__ : sometimes i use `at' for a tree of `a's
2013-09-10 23:33:43	ocharles	i find mcbride-notation requires i get out a tome of classic literature
2013-09-10 23:34:09	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-10 23:34:19	<--	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-10 23:34:20	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Read error: Operation timed out)
2013-09-10 23:34:50	ocharles	You could also use edwardk notation, and have ATreeLike and then T c k y f g h a
2013-09-10 23:34:53	bgamari	What is the "*" type in a GHC heap profile?
2013-09-10 23:35:11	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-10 23:35:25	<--	magnap (bcb3eb89@gateway/web/freenode/ip.188.179.235.137) has quit (Ping timeout: 250 seconds)
2013-09-10 23:36:05	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-10 23:36:29	<--	Gecemmo (~textual@c83-251-174-153.bredband.comhem.se) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-10 23:36:47	<--	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-09-10 23:37:19	<--	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-09-10 23:37:47	Twey	ocharles: I think you mean T k i l e v r y o n
2013-09-10 23:38:01	<--	dennis (5476d374@gateway/web/freenode/ip.84.118.211.116) has quit (Ping timeout: 250 seconds)
2013-09-10 23:38:14	shachaf	Twey: "s t a b" is my fault.
2013-09-10 23:38:18	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-10 23:38:21	Twey	shachaf: How's that?
2013-09-10 23:38:29	ocharles	Twey: :)
2013-09-10 23:38:33	shachaf	What do you mean?
2013-09-10 23:38:41	<--	tim_ (~tim@46.246.47.13) has quit (Quit: Reconnecting)
2013-09-10 23:38:44	ocharles	Twey: it used to be a b c d
2013-09-10 23:38:45	ocharles	iirc
2013-09-10 23:38:49	-->	tim_ (~tim@46.246.47.13) has joined #haskell
2013-09-10 23:38:50	Twey	shachaf: Did you drive edwardk to his homicidal rage?  :þ
2013-09-10 23:38:53	Twey	Oh, I see.
2013-09-10 23:38:53	<--	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Quit: Leaving.)
2013-09-10 23:39:04	elliott	edwardk notation is bt/seta
2013-09-10 23:39:23	edwardk	no, that should have been 'best eva' but it was a typo
2013-09-10 23:39:34	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-10 23:39:35	Twey	Heh
2013-09-10 23:39:39	<--	d_arcy (~Day_dream@gar31-4-82-240-199-124.fbx.proxad.net) has quit (Remote host closed the connection)
2013-09-10 23:39:49	elliott	types hungarian is (a) proof our tooling sucks; (b) addictive.
2013-09-10 23:39:59	shachaf	Twey: https://github.com/ekmett/lens/commit/495d8c95396132cbad6b56cdf62ca586dd6555ad
2013-09-10 23:40:00	-->	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has joined #haskell
2013-09-10 23:40:02	<--	jfhall_ (~jfhall@24-205-238-86.dhcp.snlo.ca.charter.com) has quit (Ping timeout: 245 seconds)
2013-09-10 23:40:09	<--	nomeata (nobody@nomeata.de) has quit (Quit: Client exiting)
2013-09-10 23:40:37	Twey	shachaf: Got it :þ
2013-09-10 23:40:43	<--	raichoo (~raichoo@mue-88-130-18-248.dsl.tropolys.de) has quit (Ping timeout: 264 seconds)
2013-09-10 23:40:44	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-10 23:41:20	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Client Quit)
2013-09-10 23:41:32	shachaf	I think "GeneralizedIndexedRelevantTraversal i m m a s t a b u" was edwardk, though.
2013-09-10 23:41:39	<--	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-10 23:41:40	<--	anRch (~markmilli@23.30.182.241) has quit (Quit: anRch)
2013-09-10 23:41:52	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-10 23:41:55	<--	yano (yano@freenode/staff/yano) has quit (Ping timeout: 624 seconds)
2013-09-10 23:41:56	-->	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has joined #haskell
2013-09-10 23:42:27	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-09-10 23:42:30	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-10 23:42:49	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-10 23:42:51	Twey	Haha
2013-09-10 23:42:53	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-10 23:43:18	joelteon	the longest english word you can spell with distinct one letter type variables is
2013-09-10 23:43:19	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-09-10 23:43:25	joelteon	u n c o p y r i g h t a b l e
2013-09-10 23:43:37	shachaf	They aren't always distinct.
2013-09-10 23:43:51	joelteon	Yeah, but if you wanted distinct ones.
2013-09-10 23:43:55	monochrom	I don't like hungarian. it doesn't scale to type systems such as HM or above
2013-09-10 23:44:17	<--	maxter_ (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 264 seconds)
2013-09-10 23:44:17	Twey	joelteon: I'll bear that in mind next time I'm writing GPL'd code.
2013-09-10 23:44:40	Twey	What is ‘type Hungarian’?
2013-09-10 23:44:45	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-10 23:44:50	-->	coltfred (~coltfred@inet-hqmc01-o.oracle.com) has joined #haskell
2013-09-10 23:44:58	-->	markcw (~jack@128.135.100.110) has joined #haskell
2013-09-10 23:44:59	-->	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has joined #haskell
2013-09-10 23:45:03	-->	coltfred_ (~coltfred@inet-hqmc01-o.oracle.com) has joined #haskell
2013-09-10 23:45:37	elliott	Twey: naming variables after their types in very generic code.
2013-09-10 23:45:45	<--	fizbin (~Adium@pool-173-72-91-234.cmdnnj.east.verizon.net) has quit (Quit: Leaving.)
2013-09-10 23:45:46	<--	coltfred_ (~coltfred@inet-hqmc01-o.oracle.com) has left #haskell
2013-09-10 23:45:50	Twey	Ah, like that.
2013-09-10 23:45:50	elliott	along with hole-based programming it simplifies knotty but polymorphic definitions (e.g. Cont's monad instance, say) immensely.
2013-09-10 23:46:01	 *	Twey nods.
2013-09-10 23:46:06	elliott	seta is what we call the (s -> Either t a) functions in prisms
2013-09-10 23:46:20	monochrom	the hungarian notation was invented at a time when you couldn't hover your mouse to a name and have the editor display its type above
2013-09-10 23:46:57	elliott	well, there is something to the immediate visual knowledge that since you have an "ab" and an "a", you can easily satisfy the need for a b
2013-09-10 23:46:57	Twey	Eww, mice.
2013-09-10 23:47:12	sclv_	yeah i agree
2013-09-10 23:47:13	elliott	were the types always displayed alongside the names (and abbreviated to not be cumbersome), then yeah, it would not be so necessary
2013-09-10 23:47:17	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-10 23:47:19	<--	eis_ (~eis@109.197.218.46) has quit (Ping timeout: 264 seconds)
2013-09-10 23:47:31	sclv_	sometimes when i'm just working through 'how do i write this value given these functions'
2013-09-10 23:47:35	elliott	on the other hand, for code generic enough that it helps a lot, the variables don't often have more useful names than "f" and "x" anyway, so naming after the types does no harm
2013-09-10 23:47:43	sclv_	then the 'type hungarian' names are as expressive as i can be
2013-09-10 23:47:47	elliott	though I draw the line at "fmap ab ..."
2013-09-10 23:47:50	edwardk	I just posted https://www.fpcomplete.com/user/edwardk/parallel-crc  -- if anyone wants to take a look through and make sure i don't have any glaring typos/bugs, that would be awesome
2013-09-10 23:47:55	<--	__main__ (~main@50.240.210.73) has quit (Ping timeout: 245 seconds)
2013-09-10 23:48:09	Twey	For concrete types it doesn't make a lot of sense, because the names should already describe their types by what they are… but very generic or abstract values just beg for type-abbreviation, especially since there isn't much other semantic meaning to attach to them
2013-09-10 23:48:09	sclv_	elliott: you can always do a2b or fab
2013-09-10 23:48:15	<--	epsilonhalbe (~epsilonha@62.68.205.246) has left #haskell
2013-09-10 23:48:38	ocharles	erm, am i being stupid here? Do we a have function that's like a fold over booleans, like maybe for Maybe?
2013-09-10 23:48:47	Twey	ocharles: No.  ☹
2013-09-10 23:48:47	johnw	edwardk: you were taught about CRCs in grade school?
2013-09-10 23:48:59	<--	artyomkazak (~artyomkaz@94.25.228.41) has quit (Ping timeout: 240 seconds)
2013-09-10 23:49:01	donri	ocharles: not in base no
2013-09-10 23:49:03	edwardk	long division =P
2013-09-10 23:49:04	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-10 23:49:10	-->	artyomkazak (~artyomkaz@94.25.228.26) has joined #haskell
2013-09-10 23:49:10	ocharles	Twey: gah, i have to bring in a lambda and if just for this!?
2013-09-10 23:49:10	edwardk	and yes. weren't you?
2013-09-10 23:49:14	donri	@hackage cond
2013-09-10 23:49:14	lambdabot	http://hackage.haskell.org/package/cond
2013-09-10 23:49:14	johnw	haha
2013-09-10 23:49:24	ocharles	donri: don't really want to go outside base, this is for a talk
2013-09-10 23:49:25	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-10 23:49:25	<--	sidus (~abracadab@37-5-74-93-dynip.superkabel.de) has quit (Quit: ChatZilla 0.9.87 [Iceape 2.7.12/20130119095535])
2013-09-10 23:49:27	monochrom	supposedly if' is the fold over booleans
2013-09-10 23:49:37	donri	ocharles: agreed, i want a 'bool' function too
2013-09-10 23:49:38	johnw	nice article!  cant' read it in full now, but I love the subtitles
2013-09-10 23:49:39	monochrom	does lambdabot have if' ?
2013-09-10 23:49:39	Twey	ocharles: I usually define bool : r → r → Bool → r
2013-09-10 23:49:45	edwardk	johnw: that BackEndError thing has been getting worse all day
2013-09-10 23:49:47	monochrom	> if'
2013-09-10 23:49:48	lambdabot	  Not in scope: if'
2013-09-10 23:49:48	lambdabot	 Perhaps you meant f' (imported from Debug.SimpleReflect)
2013-09-10 23:49:52	donri	monochrom: if' has the wrong type, usually, methinks
2013-09-10 23:49:54	Twey	It used to
2013-09-10 23:49:54	johnw	edwardk: which BackEndError thing?
2013-09-10 23:49:57	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:56e2:bcff:22fa:d6b3:79c) has quit (Quit: Bye)
2013-09-10 23:49:59	-->	luksow (~luke@apn-31-2-47-89.dynamic.gprs.plus.pl) has joined #haskell
2013-09-10 23:50:00	Twey	But yes, the argument order is backwards
2013-09-10 23:50:04	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:56e2:bcff:22fa:d6b3:79c) has joined #haskell
2013-09-10 23:50:08	donri	monochrom: (and name!)
2013-09-10 23:50:20	ocharles	I might suggest this to libraries
2013-09-10 23:50:22	edwardk	johnw: see comment in haskell-lens: [17:45] edwardk:	 johnw: i keep getting errors like "BackendError "Could not lookup 9862062bef330ecc9f8d22790e212a2f6464a14d: Object not found - failed to find pack entry (9862062bef330ecc9f8d22790e212a2f6464a14d)""       on the FP complete site about every 5th or 6th time i do something
2013-09-10 23:50:27	monochrom	alright, if cond floats your boat, all the better
2013-09-10 23:50:32	edwardk	johnw: i'm getting tweets from other people who can't read the post
2013-09-10 23:50:36	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-09-10 23:50:44	edwardk	and its been slowly getting worse all day
2013-09-10 23:50:44	johnw	omg, that's horrific
2013-09-10 23:50:57	ocharles	there is no 'bool' in base, so it's free there
2013-09-10 23:50:59	-->	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has joined #haskell
2013-09-10 23:51:03	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 23:51:04	-->	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-10 23:51:08	johnw	let me check the logs
2013-09-10 23:51:09	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-10 23:51:31	Twey	I'm not totally happy with naming eliminators after their types, but it's an established tradition now
2013-09-10 23:51:44	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-10 23:51:52	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-10 23:51:54	ekipan	@define bool t f b = if b then t else f
2013-09-10 23:51:55	lambdabot	 Defined.
2013-09-10 23:52:03	ekipan	er
2013-09-10 23:52:06	<--	markcw (~jack@128.135.100.110) has quit (Ping timeout: 248 seconds)
2013-09-10 23:52:06	shachaf	It should be f t b
2013-09-10 23:52:07	ekipan	@define bool f t b = if b then t else f
2013-09-10 23:52:08	lambdabot	 .L.hs:153:1: Warning:
2013-09-10 23:52:08	lambdabot	     Pattern match(es) are overlapped
2013-09-10 23:52:08	lambdabot	     In an equat...
2013-09-10 23:52:11	donri	ocharles: it should be bool f t b = if b then t else f and it should be in Data.Bool and possibly even Prelude.
2013-09-10 23:52:14	donri	ocharles: IMHO :)
2013-09-10 23:52:28	<--	cppcabrera (~alejandro@72.3.161.23) has left #haskell ("WeeChat 0.4.1")
2013-09-10 23:52:28	ekipan	definitely
2013-09-10 23:52:33	ocharles	donri: agreed
2013-09-10 23:52:42	Twey	Aye
2013-09-10 23:52:45	sclv_	edwardk: that crc thing is quite nice
2013-09-10 23:52:52	ekipan	@undef
2013-09-10 23:52:52	lambdabot	Undefined.
2013-09-10 23:52:53	ocharles	donri: searching fpcomplete hoogle show's five (!) equal definitions in different libraries
2013-09-10 23:52:54	edwardk	thanks!
2013-09-10 23:52:58	<--	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has quit (Quit: Lämnar)
2013-09-10 23:53:02	edwardk	it turned out _way_ more elegant in the end than i expected
2013-09-10 23:53:15	Twey	If we have ‘maybe’ and ‘either’ in Prelude there's no excuse not to have bool as well
2013-09-10 23:53:17	donri	ocharles: people seem to often get this wrong. they want to put the True case first, or even the boolean first too, but that's all inconsistent with the other catamorphisms
2013-09-10 23:53:21	monochrom	Twey: how would you like to name them?
2013-09-10 23:53:29	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-10 23:53:31	bgamari	What is the * type in a GHC heap profile?
2013-09-10 23:53:34	ocharles	donri: yea, I figured you put False first because maybe has Nothing first
2013-09-10 23:53:38	donri	ocharles: and doesn't compose as nicely
2013-09-10 23:53:38	bgamari	do I recall correctly that this was a closure?
2013-09-10 23:53:39	ocharles	and either has Left first
2013-09-10 23:53:48	<--	sellout- (~Adium@66.185.107.123) has quit (Quit: Leaving.)
2013-09-10 23:53:48	donri	ocharles: yeah
2013-09-10 23:53:52	Twey	monochrom: Probably elimMaybe, elimBool, …
2013-09-10 23:54:12	ocharles	donri: just being consistent seemed good enough, if it makes for better composition - great!
2013-09-10 23:54:23	ekipan	it makes sense that false is "less" than true
2013-09-10 23:54:28	donri	ocharles: well at least putting the boolean last does
2013-09-10 23:54:34	ekipan	and the cases should be in order
2013-09-10 23:54:35	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a10:56e2:bcff:22fa:d6b3:79c) has quit (Ping timeout: 245 seconds)
2013-09-10 23:54:44	Twey	‘bool’ makes sense for a Church encoding where the eliminator is the type
2013-09-10 23:54:54	donri	i guess the folds are in the wrong order though?
2013-09-10 23:54:56	donri	:t foldl
2013-09-10 23:54:57	lambdabot	(a -> b -> a) -> a -> [b] -> a
2013-09-10 23:54:57	monochrom	it makes sense that falsehood comes before truth, no? :)
2013-09-10 23:55:17	ocharles	should I be emailing libraries@ for this?
2013-09-10 23:55:18	ekipan	we need a:   list nil cons = foldr cons nil
2013-09-10 23:55:19	-->	jmcarthur_mobile (~jmcarthur@meb4636d0.tmodns.net) has joined #haskell
2013-09-10 23:55:21	donri	ocharles: yes!
2013-09-10 23:55:23	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-10 23:55:38	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 250 seconds)
2013-09-10 23:55:44	monochrom	no, not foldr please. this is not about argument order
2013-09-10 23:55:54	sclv_	<3 streaming calculations
2013-09-10 23:55:57	Twey	Or you could always get all classy and class Elim a f | a → f where elim ∷ f
2013-09-10 23:55:58	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-10 23:56:41	-->	message144 (~message14@cpe-76-170-68-13.socal.res.rr.com) has joined #haskell
2013-09-10 23:56:44	monochrom	the eliminators should have the exact strength of the case-of pattern-matching construct. no more no less.
2013-09-10 23:56:52	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-10 23:56:54	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Read error: No route to host)
2013-09-10 23:57:03	<--	Thra11 (~Thra11@201.58.113.87.dyn.plus.net) has quit (Ping timeout: 260 seconds)
2013-09-10 23:57:04	<--	SingingBoyo (~brandon@dhcp-128-189-200-232.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 256 seconds)
2013-09-10 23:57:11	Twey	True
2013-09-10 23:57:12	<--	milessabin (~miles@private.milessabin.com) has quit (Ping timeout: 260 seconds)
2013-09-10 23:57:45	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-10 23:58:03	ekipan	is foldr not that for lists?
2013-09-10 23:58:14	monochrom	no
2013-09-10 23:58:15	Twey	It's not the same sort of thing
2013-09-10 23:58:41	Twey	list ∷ r → (a → [a] → r) → r is missing too
2013-09-10 23:58:42	monochrom	case-of doesn't come bundled with a hardwired recursion. therefore list's eliminator should not, too.
2013-09-10 23:58:48	donri	they're all catamorphisms, no?
2013-09-10 23:58:53	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-09-10 23:59:00	ekipan	I see
2013-09-10 23:59:10	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-10 23:59:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 245 seconds)
2013-09-10 23:59:10	Twey	donri: They're all eliminators, to be sure
2013-09-10 23:59:37	monochrom	elimination /= catamorphism. you have to pick one and stick to it. they happen to be equal for boring types such as Bool
2013-09-10 23:59:42	Twey	But you can write foldl with list easily, whereas list with foldr is a pain
2013-09-10 23:59:51	-->	artyomkazak1 (~artyomkaz@host-41-157-66-217.spbmts.ru) has joined #haskell
2013-09-11 00:00:06	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Ping timeout: 264 seconds)
2013-09-11 00:00:07	Twey	(statement also holds when made consistent)
2013-09-11 00:00:47	<--	artyomkazak (~artyomkaz@94.25.228.26) has quit (Ping timeout: 260 seconds)
2013-09-11 00:00:52	-->	applicative (17194f5d@gateway/web/freenode/ip.23.25.79.93) has joined #haskell
2013-09-11 00:01:24	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-11 00:01:52	applicative	what are the magic words I put in my ~/.cabal/config if I insist e.g. that my already-installed version of bytestring or pony be used?
2013-09-11 00:02:08	monochrom	constraint: bytestring installed
2013-09-11 00:02:14	monochrom	another line for pony
2013-09-11 00:02:23	-->	tromp (~tromp@rtc35-161.rentec.com) has joined #haskell
2013-09-11 00:02:25	applicative	ah thanks, i was close
2013-09-11 00:02:27	ocharles	alright, proposed
2013-09-11 00:02:29	ocharles	lets see what happens
2013-09-11 00:02:37	monochrom	see my http://www.vex.net/~trebla/haskell/cabal-cabal.xhtml#lockdown
2013-09-11 00:02:39	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-11 00:03:11	monochrom	you can also do it on the command line, if you don't want it permanent/pervasive
2013-09-11 00:03:18	applicative	ah yes, monochrom thanks; i want to see how it interacts with the sandbox machinery in particular
2013-09-11 00:04:22	<--	cronject (~cronject@46.7.62.22) has quit (Ping timeout: 248 seconds)
2013-09-11 00:05:00	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-09-11 00:05:00	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-11 00:05:10	-->	rgr (~user@5.159.229.17) has joined #haskell
2013-09-11 00:05:15	mstksg	is it safe to say that if i use ghc to compile to c, i can just distribute the c and everyone can compile it as native binaries and everyone is happy?
2013-09-11 00:05:18	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Ping timeout: 276 seconds)
2013-09-11 00:05:21	bgamari	Does Data.Vector.Vector have a Distributive instance somewhere
2013-09-11 00:05:30	monochrom	no, it is unsafe
2013-09-11 00:05:50	-->	derelm (~derelm@p5B280115.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 00:05:55	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 00:05:55	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-09-11 00:05:55	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-11 00:06:14	ekipan	doesn't ghc require a very specific (bundled) gcc because of the evil mangler?
2013-09-11 00:06:23	bgamari	blarg, need type-sized vectors
2013-09-11 00:06:32	ekipan	I wonder if llvm bitcode would be more useful for your purpose
2013-09-11 00:06:40	bgamari	ekipan, I don't believe the evil mangler does any mangling any more
2013-09-11 00:07:00	applicative	mstksg: ghc only makes c in special circumstances anyway; have you looked at jhc?
2013-09-11 00:07:16	mstksg	applicative: i haven't
2013-09-11 00:07:34	<--	wole (~wole@88-105-44-76.dynamic.dsl.as9105.com) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-11 00:07:49	applicative	the appeal of jhc has always been making that simple; it is buildable again as ajhc, but is ahem, a work in progress
2013-09-11 00:07:50	merijn	Also, isn't the C backend deprecated and slated for removal?
2013-09-11 00:07:52	mstksg	i just wonder if there's a way i can produce and distribute haskell software without the end user needing ghc
2013-09-11 00:07:54	<--	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has quit (Ping timeout: 276 seconds)
2013-09-11 00:07:55	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 276 seconds)
2013-09-11 00:08:05	merijn	mstksg: Just build binaries and distribute those?
2013-09-11 00:08:21	merijn	mstksg: How did you think windows software was sold?
2013-09-11 00:08:22	arkeet	mstksg: that is sort of how ghc gets ported to new platforms.
2013-09-11 00:08:27	applicative	https://github.com/ajhc/ajhc mstksg
2013-09-11 00:08:32	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-11 00:08:37	merijn	mstksg: The only downside is that you need to build for every OS/architecture combination
2013-09-11 00:08:46	mstksg	all windows runs under the same architecture?
2013-09-11 00:09:04	mstksg	or do i need to package multiple binaries
2013-09-11 00:09:18	applicative	merijn: the c backend is used for various purposes still, new platforms ; i guess thats what arkeet was saying; or so it was recently
2013-09-11 00:09:20	Twey	Heheheh
2013-09-11 00:09:20	merijn	mstksg: No, even on windows they need a different version for different architectures, but windows only really supports x86 and x86_64 anyway and the latter can transparently run the former
2013-09-11 00:09:21	mstksg	actually i'm sure this is a general software distribution question and has little to do with haskell
2013-09-11 00:09:28	<--	artyomkazak1 (~artyomkaz@host-41-157-66-217.spbmts.ru) has quit (Quit: Leaving.)
2013-09-11 00:09:29	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 00:09:31	edwardk	johnw: one thing that may be a factor is i do have a dozen or so extra articles waiting 'in the wings' for me to finish them.
2013-09-11 00:09:35	<--	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Ping timeout: 245 seconds)
2013-09-11 00:09:42	geekosaur	there is 32 vs. 64 bit, but windows hasn't practically supported anything other than x86 for a long time. (well there is arm win8, but nobody's doing anything serious on that)
2013-09-11 00:09:54	edwardk	johnw: so if you have something that is marginal with regards to timeouts, i may be just pushing you over the edge
2013-09-11 00:10:02	-->	ISF (~ivan@187.64.222.94) has joined #haskell
2013-09-11 00:10:12	merijn	mstksg: What sort of clients do you have in mind? Will this be inside a company where you have control over the hardware? b2b, consumer software?
2013-09-11 00:10:21	Twey	mstksg: Well, the Windows solution is to ship a ‘side by side configuration’ with your application that contains everything the application needs to run.
2013-09-11 00:10:23	johnw	edwardk: AWS should never be that sensitive in this area
2013-09-11 00:10:38	johnw	I just found one possible problem, going to hotfix production now to see what effect it has
2013-09-11 00:10:40	<--	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-11 00:10:41	merijn	mstksg: Consumer software is the biggest problem, for B2B or whatever you can just compile the proper version on-demand
2013-09-11 00:10:54	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-11 00:11:08	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Client Quit)
2013-09-11 00:11:13	Twey	Windows tends to grow a bit over time…
2013-09-11 00:11:14	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-11 00:11:16	merijn	mstksg: Basically, distributing haskell in binary is exactly the same as shipping C or C++ binaries
2013-09-11 00:11:17	<--	ssttudder (~abi@46.17.57.132) has quit (Ping timeout: 246 seconds)
2013-09-11 00:11:28	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-11 00:11:33	elliott	modulo gmp
2013-09-11 00:11:41	merijn	elliott: That's just another library
2013-09-11 00:11:56	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-11 00:12:00	mstksg	merijn: it's mostly a general question, but one in specific right now is technically b2b but i don't have full control over what platforms they use and i'd like to just use a nice tidy package that works for all of theirs.  but yeah, i think i'll read up on C/C++ distribution because i feel like there is nothing unique to haskell in this problem
2013-09-11 00:12:03	merijn	No different from any other library dependency in C/C++
2013-09-11 00:12:13	elliott	merijn: with licensing issues
2013-09-11 00:12:19	elliott	integer-simple etc.
2013-09-11 00:12:25	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-11 00:12:25	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Client Quit)
2013-09-11 00:12:28	merijn	elliott: How so? gmp has LGPL with static linking exception
2013-09-11 00:13:10	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-11 00:13:14	elliott	uh, or some issue.
2013-09-11 00:13:16	merijn	Actually, I'm not 100% sure on the static linking exception of gmp, but C libraries are by default dynamically linked anyway
2013-09-11 00:13:17	elliott	I forget whether it's licensing or what.
2013-09-11 00:13:24	edwardk	switching to an ipad so i can keep track of what is going on
2013-09-11 00:13:27	merijn	Which means you still comply
2013-09-11 00:13:31	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 00:14:00	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-11 00:14:28	merijn	mstksg: If you're doing B2B you could just call it "specialisation/customisation/install services" and build and test copies specifically for the business that's paying as extra service
2013-09-11 00:14:40	applicative	monochrom: hm, 'cabal sandbox _' balks at the 'constraint: pony installed' fields in the local cabal.config .  I wonder if this is a bug or the nature of the case
2013-09-11 00:15:08	merijn	mstksg: You maybe have to do a bunch of fiddling, but once you do that you can reuse those changes for all future clients with the same platform
2013-09-11 00:15:27	merijn	mstksg: Basically JIT creation of binary packages ;)
2013-09-11 00:15:42	applicative	i need 'constraint: text installed' too keep my machine from melting every 10 min; and constraint: edwardk installed for another reason
2013-09-11 00:15:58	edwardk	:P
2013-09-11 00:16:11	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 260 seconds)
2013-09-11 00:16:12	hpc	edwardk obeys no restraints
2013-09-11 00:16:20	monochrom	mstksg: I am not sure whether I agree or disagree with "not language-specifc". even you seem to show a disparity. you're assuming "all computers you care have C compilers, but no Haskell compiler". what is the logical conclusion of that? answer: you can't say that C and Haskell are on equal footing.
2013-09-11 00:16:42	hpc	i have seen systems ship without gcc
2013-09-11 00:17:00	hpc	which makes for some serious awkwardness when they also ship without wireless drivers :(
2013-09-11 00:17:08	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 00:17:30	merijn	hpc: That'd make me happy, provided they had another compiler for C instead :p
2013-09-11 00:17:49	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-09-11 00:18:06	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-09-11 00:18:08	donri	like visual studio
2013-09-11 00:18:10	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-09-11 00:18:15	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-11 00:18:17	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 246 seconds)
2013-09-11 00:18:34	hpc	there was nothing
2013-09-11 00:18:44	hpc	no gcc, no make
2013-09-11 00:18:51	merijn	donri: more like clang/icc/whatever sun's compiler is called
2013-09-11 00:18:55	<--	tibbe (tibbe@nat/google/x-rtmoxzodrthuvirn) has quit (Quit: tibbe)
2013-09-11 00:19:10	merijn	I'm thoroughly impressed by icc and sun's stuff
2013-09-11 00:19:10	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 245 seconds)
2013-09-11 00:19:24	monochrom	applicative: "constraint: pony installed" leads to errors when pony is not present in any database considered.
2013-09-11 00:19:27	donri	or tinycc
2013-09-11 00:19:40	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-11 00:19:49	hpc	merijn: i have heard good things about the intel assembler too
2013-09-11 00:20:05	monochrom	therefore, for example, if pony is in --user, and you use sandbox, which suppresses --user, you have a problem
2013-09-11 00:20:57	<--	shintah (bebble@h-151-191.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-09-11 00:21:04	merijn	hpc: With idb gone we should see a nice increase in gdb quality
2013-09-11 00:21:16	<--	aegis__ (~aegis@188.74.124.12) has quit (Remote host closed the connection)
2013-09-11 00:21:16	<--	Paprikachu (~Paprikach@77.117.83.73.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-11 00:22:22	-->	ssttudder (~abi@46.17.57.132) has joined #haskell
2013-09-11 00:22:30	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Ping timeout: 245 seconds)
2013-09-11 00:22:44	applicative	monochrom: so it is the content of the field, not the field itself; or however you say it
2013-09-11 00:23:56	applicative	monochrom: yes, i want it to look to --user for explicitly mentioned things; but i suppose this is a recipe for disaster.
2013-09-11 00:24:16	applicative	monochrom: or a reason for installing the haskell platform ....
2013-09-11 00:24:48	-->	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-11 00:24:56	-->	acowley (~acowley@pool-72-82-182-79.cmdnnj.east.verizon.net) has joined #haskell
2013-09-11 00:25:05	monochrom	if you want a lib visible to all sandboxes, such as base, you have to put it in --global, such as base is.
2013-09-11 00:25:10	<--	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 248 seconds)
2013-09-11 00:25:25	applicative	maybe i should just put a few heavy duty libraries I'm unlikely to have anythign to do with like text and vector in --global
2013-09-11 00:25:36	monochrom	or else, you have to convince sandboxes to include --user. but I am not sure any sandbox providers like it.
2013-09-11 00:26:04	mstksg	monochrom: by that, i meant that the issues i would have to deal with in distributing a binary (and not source code) are not too different in haskell than they are in C++ etc
2013-09-11 00:26:14	Twey	I thought the point of a sandbox was that it was uncontaminated by system configuration.
2013-09-11 00:26:36	applicative	yes, i'm not sure i grasp what would be involved in the latter; but it occurs that rebuilding text -- which presumably has a huge size as built anyway -- is really pissing me off
2013-09-11 00:26:39	-->	tibbe (tibbe@nat/google/x-qiubhbigpahslbwo) has joined #haskell
2013-09-11 00:26:49	applicative	rather, that's whats really pissing me off
2013-09-11 00:27:13	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 00:27:14	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Quit: leaving)
2013-09-11 00:27:32	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-09-11 00:27:38	applicative	so i should put it in --global  but this suggests i should decide what all else to put there
2013-09-11 00:27:42	 *	hackagebot cookbook 0.1.3.0 - An independent library of common haskell operations.  http://hackage.haskell.org/package/cookbook-0.1.3.0 (NatePisarski)
2013-09-11 00:28:05	<--	hiroakip (~hiroaki@p5DC62D0F.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-11 00:28:50	 *	applicative wonders what's in Cookbook.Continuous 
2013-09-11 00:29:56	-->	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has joined #haskell
2013-09-11 00:30:03	<--	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has quit (Read error: Connection reset by peer)
2013-09-11 00:30:04	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-11 00:30:18	monochrom	do take inspiration from Haskell Platform
2013-09-11 00:30:19	acowley	applicative: I think what's needed is something like the --sandbox=DIR option for setting a base sandbox
2013-09-11 00:30:20	-->	JesuZ (~jesuz87@dsl-hkibrasgw5-58c05f-197.dhcp.inet.fi) has joined #haskell
2013-09-11 00:30:52	acowley	applicative: Or maybe a variant of add-source like add-sandbox
2013-09-11 00:30:52	-->	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has joined #haskell
2013-09-11 00:31:05	joe9	Is there a ReaderIO monad? I could use ReaderT m IO (), but, just wanted to check if there is a ReaderIO monad instead.
2013-09-11 00:31:23	-->	arash_ (~arash@c-453571d5.08-80-73746f22.cust.bredbandsbolaget.se) has joined #haskell
2013-09-11 00:31:34	<--	augur (~augur@208.58.5.87) has quit (Read error: Connection reset by peer)
2013-09-11 00:31:35	applicative	acowley: yes, something like that, I keep thinking, but I'm still not sure I understand what the picture Mikhail G wants me to have is, yet
2013-09-11 00:32:00	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-11 00:32:01	monochrom	no ReaderIO. go ahead with ReaderT x IO.
2013-09-11 00:32:10	<--	davidsd (~davidsd@e204074.ext.net.ias.edu) has quit (Quit: davidsd)
2013-09-11 00:32:12	joe9	monochrom: ok, thakns.
2013-09-11 00:32:14	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-09-11 00:32:21	applicative	monochrom: yes, it seems it will be haskell platform minus the gui-ish stuff maybe.
2013-09-11 00:32:33	-->	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-11 00:32:40	<--	ismlages (~ismlages@212.174.109.55) has quit (Ping timeout: 243 seconds)
2013-09-11 00:33:19	<--	bwr (~bwr@69.71.1.1) has quit (Quit: :q)
2013-09-11 00:33:23	monochrom	I think there is quite some market of "Haskell Platform sans OpenGL"
2013-09-11 00:33:34	<--	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has quit (Client Quit)
2013-09-11 00:34:11	tinyghost	what's wrong with OpenGL in Haskell Platform
2013-09-11 00:34:14	applicative	i guess it is a platitude that this whole thing will morph one's picture of global user sandbox
2013-09-11 00:34:23	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 260 seconds)
2013-09-11 00:34:26	-->	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 00:34:27	applicative	and their relations
2013-09-11 00:34:27	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-09-11 00:34:30	applicative	tinyghost: oh nothing
2013-09-11 00:34:35	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-09-11 00:34:45	<--	Oejet (~Oejet@unaffiliated/oejet) has left #haskell
2013-09-11 00:34:54	acowley	Is OpenGL really that big a problem? I've installed it on Mac, Windows, and Linux without trouble
2013-09-11 00:35:09	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 00:35:12	<--	derelm (~derelm@p5B280115.dip0.t-ipconnect.de) has quit (Quit: derelm)
2013-09-11 00:35:23	mstksg	any way to check for redundant build-depends in my cabal file?
2013-09-11 00:35:25	<--	sm (~user@li229-222.members.linode.com) has left #haskell
2013-09-11 00:35:26	applicative	acowlaigh i have no trouble on os x
2013-09-11 00:35:57	<--	tibbe (tibbe@nat/google/x-qiubhbigpahslbwo) has quit (Quit: tibbe)
2013-09-11 00:36:01	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-09-11 00:36:03	-->	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has joined #haskell
2013-09-11 00:36:06	monochrom	there is no relation between market demand and problems
2013-09-11 00:36:06	mstksg	i'm not very organized so i just throw things in there to test but forget to take them out later
2013-09-11 00:36:22	acowley	mstksg: I don't know of an automated tool to do that, so I usually try pulling things out and rebuilding :/
2013-09-11 00:36:32	donri	mstksg: there's a silly way: move the .cabal file and cabal init to get a list of minimal depends
2013-09-11 00:36:33	applicative	tinyghost: i would end up installing all of it but mostly locally; this is turning out to untenable with sandboxes, since i end up installing a quarter of it in every sandbox
2013-09-11 00:36:51	acowley	monochrom: Why do you think there is a market, then?
2013-09-11 00:37:02	monochrom	because there is free will
2013-09-11 00:37:09	applicative	tinyghost: since as monochrom was saying, the sandboxed ignore your local --user cabal stuff
2013-09-11 00:37:11	<--	javax (~javax@46.246.126.38) has quit (Ping timeout: 246 seconds)
2013-09-11 00:37:18	edwardk	I continue to just trash my system state as needed ;)
2013-09-11 00:37:18	acowley	applicative: I just bite the bullet and have giant sandboxes everywhere :/
2013-09-11 00:37:31	tinyghost	ah D:
2013-09-11 00:37:38	acowley	edwardk: sanboxes with add-source makes life easier, I find
2013-09-11 00:37:41	monochrom	no wonder everyone is reporting "my sandbox is 2GB" :)
2013-09-11 00:37:42	edwardk	I've yet to figure out a good workflow that includes a sandbox
2013-09-11 00:37:46	ReinH	edwardk: your new SoH article is down :(
2013-09-11 00:37:52	applicative	acowley: yes thats what i have now, it isn't even that i care about that it is building text and vector that kills me
2013-09-11 00:37:57	edwardk	ReinH: It's up just click a lot
2013-09-11 00:38:03	-->	javax (~javax@46.246.126.38) has joined #haskell
2013-09-11 00:38:04	-->	zbcm (~zbcm@147.41.7.17) has joined #haskell
2013-09-11 00:38:07	acowley	edwardk: I add-source the handful of my own packages I'm working on, and everything gets pulled in automatically without me having to cabal install everything
2013-09-11 00:38:25	monochrom	text takes a long time to build
2013-09-11 00:38:30	acowley	applicative: I hear ya.
2013-09-11 00:38:40	-->	tibbe (tibbe@nat/google/x-jmyrogctpkabyxgj) has joined #haskell
2013-09-11 00:38:42	applicative	all of my hard won conceptions are outdated
2013-09-11 00:39:05	applicative	everything solid melts in the air, everything sacred is profaned, now that we have sandboxes
2013-09-11 00:39:06	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-11 00:39:10	edwardk	Maybe I'll sit down with some folks and try to figure out a more productive way to work at ICFP
2013-09-11 00:39:20	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Remote host closed the connection)
2013-09-11 00:39:24	-->	milessabin (~miles@87.194.133.242) has joined #haskell
2013-09-11 00:39:31	acowley	applicative: You should make that a sign for a school playground
2013-09-11 00:39:34	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 256 seconds)
2013-09-11 00:39:43	<--	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-11 00:40:10	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-11 00:40:29	acowley	edwardk: It saves you when you're tweaking one package that's being used as a dep of another. You can tweak, then build the downstream package for testing. When everything's working, push the new versions.
2013-09-11 00:40:46	<--	justinleitgeb (~justinlei@186.101.162.167) has quit (Remote host closed the connection)
2013-09-11 00:40:49	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-11 00:40:59	-->	yano (yano@freenode/staff/yano) has joined #haskell
2013-09-11 00:41:00	applicative	criterion should go in --global clearly, and presumably quickcheck  actually that decides quite a few things
2013-09-11 00:41:21	applicative	if its not wrong to begin with
2013-09-11 00:41:25	acowley	Sometimes packages want a particular version of quickcheck. Just sandbox everything and see how it goes!
2013-09-11 00:41:45	applicative	its true
2013-09-11 00:41:48	edwardk	I just tweak, then go build the other stuff. Thrashes maybe a dozen packages
2013-09-11 00:42:09	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-11 00:42:12	applicative	edwardk: you mean using --local not a sandbox
2013-09-11 00:42:25	edwardk	I'm sad that I can't benchmark some code on old hash able, due to constraints in criterion
2013-09-11 00:42:34	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-11 00:43:02	edwardk	I strongly suspect the reason why the cola can't benefit from the filter is hashable 1.2
2013-09-11 00:43:03	<--	jmcarthur_mobile (~jmcarthur@meb4636d0.tmodns.net) has quit (Read error: Connection reset by peer)
2013-09-11 00:43:10	monochrom	rename old hashable to another package name. maybe also rename modules.
2013-09-11 00:43:12	edwardk	applicative: Yes.
2013-09-11 00:43:20	<--	schlaftier (~daniel@5.158.182.23) has quit (Read error: Operation timed out)
2013-09-11 00:43:23	applicative	if you were actually using edwardk-land in your sandboxes you'd know what me and acowley are talking about!
2013-09-11 00:43:37	<--	ahill-89 (~xander@adsl-99-36-41-91.dsl.snlo01.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-11 00:43:45	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:43:56	edwardk	More effort than I was expecting to put in. As it is I'll just write a lighter weight weak hash class
2013-09-11 00:43:59	acowley	Welcome to the sandbox, watch it bring you to your knees
2013-09-11 00:44:01	applicative	Downloading profunctors-x.y.z; Building freefooT-a.b.c
2013-09-11 00:44:11	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 260 seconds)
2013-09-11 00:44:39	acowley	applicative: I actually find it pretty satisfying how complicated some of these builds are and how smoothly they come together in the sandbox
2013-09-11 00:44:44	edwardk	I get the experience when I migrate GHC versions
2013-09-11 00:44:49	dcoutts_	edwardk: the right solution to this is private dependencies
2013-09-11 00:44:56	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 00:44:56	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-09-11 00:44:59	acowley	edwardk: But now you can have it every other day!
2013-09-11 00:45:15	edwardk	Dcoutts: I export instances in almost all of those cases
2013-09-11 00:45:21	applicative	acowley: yes, actually, i take a special pleasure in it too
2013-09-11 00:45:29	edwardk	They are very much part of my public API
2013-09-11 00:45:30	dcoutts_	edwardk: e.g. criterion, does it expose its use of hashable?
2013-09-11 00:45:39	edwardk	Oh. Sorry for that, he's
2013-09-11 00:45:41	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Quit: Leaving.)
2013-09-11 00:45:41	edwardk	Er yes
2013-09-11 00:46:00	edwardk	Had switched topics in the meanwhile and was confused :)
2013-09-11 00:46:12	dcoutts_	:-)
2013-09-11 00:46:37	dcoutts_	edwardk: if not then it should not matter what version of hashable it uses, and private deps would let us do that
2013-09-11 00:46:41	 *	applicative knows nothing about 'private dependencies'; it sounds dangerous
2013-09-11 00:46:45	-->	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has joined #haskell
2013-09-11 00:47:04	<--	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has quit (Quit: Ik ga weg)
2013-09-11 00:47:04	dcoutts_	applicative: it gives enough info to the solver to know when it's safe to use multiple versions of a package
2013-09-11 00:47:09	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-09-11 00:47:14	dcoutts_	we have a design for it worked out
2013-09-11 00:47:18	dcoutts_	but the project
2013-09-11 00:47:21	dcoutts_	erm
2013-09-11 00:47:22	applicative	i see, it is not an existing mechanism.
2013-09-11 00:47:30	dcoutts_	but that bit of the project didn't get completed
2013-09-11 00:47:39	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-11 00:47:42	 *	hackagebot hexpat-lens 0.0.4 - Lenses for Hexpat.  http://hackage.haskell.org/package/hexpat-lens-0.0.4 (JosephAbrahamson)
2013-09-11 00:47:57	<--	diadara (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-11 00:48:23	-->	ahill-89 (~xander@99.127.139.11) has joined #haskell
2013-09-11 00:48:47	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-11 00:49:15	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 00:49:22	edwardk	Now I wonder if I can modify the CRC trick todo Fletcher checksums like Adler32
2013-09-11 00:49:24	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-09-11 00:49:27	acowley	Making cabal-install accept --dependencies-only as well as --only-dependencies is probably my favorite feature addition to any software for 2013
2013-09-11 00:49:55	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: Leaving.)
2013-09-11 00:50:02	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:51:12	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has left #haskell
2013-09-11 00:51:18	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 00:51:19	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-11 00:51:41	merijn	acowley: Even more than the fact that "cabal build/test/haddock" now automatically running "cabal configure/build" if needed?
2013-09-11 00:52:11	acowley	merijn: Yes. It's such a long flag to type in that when you get it backwards it's super frustrating.
2013-09-11 00:52:29	donri	acowley: i just tab complete it
2013-09-11 00:52:39	acowley	edwardk: Have you had any more thoughts on resource tracking in machines? The issue on github seemed to go off track and stall.
2013-09-11 00:52:49	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:52:53	donri	acowley: also you can use word transpose to swap those if you get the order wrong
2013-09-11 00:53:03	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 264 seconds)
2013-09-11 00:53:11	<--	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has quit (Quit: leaving)
2013-09-11 00:53:15	acowley	donri: I would need a smart shell for that, wouldn't I? Whenever I try another shell, things seem to break.
2013-09-11 00:53:24	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 00:53:34	donri	acowley: that's all bash
2013-09-11 00:53:38	<--	quchen (~quchen@p54AA0810.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-11 00:53:39	acowley	donri: I meant backwards in the sense that, when typing it, I would think "No, no, --only-dependencies is the wrong one, --dep-only is the right one!"
2013-09-11 00:53:53	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:53:54	-->	hiroaki (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:54:03	<--	FreeFull (~freefull@defocus/sausage-lover) has quit (Ping timeout: 276 seconds)
2013-09-11 00:54:07	acowley	donri: How can I teach my bash about the ways of the cabal?
2013-09-11 00:54:48	YayMe`	I know of the and function, and all, but I couldn't help letting my imagination get away from myself, is this a terribly stupid use of the maybe monad? http://stackoverflow.com/questions/18729768#18730017
2013-09-11 00:55:24	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2013-09-11 00:55:44	johnw	cabal 1.18 and pkg-config are driving me nuts
2013-09-11 00:55:44	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 00:55:49	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Client Quit)
2013-09-11 00:56:10	johnw	i'm getting this: https://gist.github.com/6516930
2013-09-11 00:56:13	donri	acowley: might depend on the OS. on my fedora system it's automatically done. otherwise it might be something like . /etc/bash_completion
2013-09-11 00:56:19	johnw	but it only happens running under Jenkins, not when I run it myself at the shell
2013-09-11 00:56:39	<--	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 276 seconds)
2013-09-11 00:56:52	<--	Velpoman (~Velpoman@nat/yahoo/x-vjsgqohgfabkcgwb) has quit (Quit: Lost terminal)
2013-09-11 00:56:55	<--	hiroaki (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Client Quit)
2013-09-11 00:57:10	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Ping timeout: 248 seconds)
2013-09-11 00:57:47	 *	hackagebot data-extra 2.5.0 - Extra utilities for working on Data.* types.  http://hackage.haskell.org/package/data-extra-2.5.0 (ChrisDone)
2013-09-11 00:57:49	 *	hackagebot data-extra 2.5.1 - Extra utilities for working on Data.* types.  http://hackage.haskell.org/package/data-extra-2.5.1 (ChrisDone)
2013-09-11 00:57:53	donri	acowley: also if you type --only-dependencies and hit M-e it changes it to --dependencies-only
2013-09-11 00:58:05	donri	acowley: sorry, M-t
2013-09-11 00:58:07	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-11 00:58:43	acowley	donri: Sounds like sorcery. Wouldn't I need the point to be there, too?
2013-09-11 00:58:45	applicative	YayMe`: it is sort of like doing instance (Eq a , Applicative f) => Eq (f a) where ... . As people sometimes do for Num
2013-09-11 00:58:47	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 245 seconds)
2013-09-11 00:58:55	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 00:59:04	--	sm_ is now known as sm
2013-09-11 00:59:04	Fuuzetsu	Is there a way to tell GHC to not optimise my modules? I basically want the same optimisation level as if I was loading the module into GHCi (none at all I believe)
2013-09-11 00:59:17	donri	acowley: the cursor needs to be right after it yes
2013-09-11 00:59:19	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 264 seconds)
2013-09-11 00:59:23	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:59:23	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Client Quit)
2013-09-11 00:59:25	-->	hiroaki (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 00:59:33	<--	hiroaki (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Read error: Connection reset by peer)
2013-09-11 00:59:39	-->	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 00:59:44	acowley	Fuuzetsu: -O0
2013-09-11 01:00:09	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Quit: WeeChat 0.4.1)
2013-09-11 01:00:35	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-11 01:00:36	ekipan	YayMe`: whether it's stupid or not I can't say, but I can shorten the definitions of your "lifted boolean" comparisons:  boolToMaybe True = Just True; boolToMaybe False = Nothing
2013-09-11 01:00:44	acowley	donri: I've installed bash-completion, my bash is still ignorant
2013-09-11 01:00:55	edwardk	acowley: I'm talking to tekmo and Snoyman about exception handling tonight actually
2013-09-11 01:00:59	YayMe`	applicative: That's interesting... they do this as a convenience or you mean because they don't know something (which I probably don't as well)
2013-09-11 01:01:08	YayMe`	ekipan: I thought about that but then you don't get the nice infixity
2013-09-11 01:01:10	acowley	edwardk: Is that a regular thing you guys do?
2013-09-11 01:01:12	ekipan	YayMe`: then   x |!?| y = boolToMaybe (x !? y) -- for each operator !?
2013-09-11 01:01:25	applicative	YayMe`: I think the instance  I mentioned has a pile of downsides
2013-09-11 01:01:37	edwardk	Not so much
2013-09-11 01:01:49	ekipan	I'd actually make that   Just (), since you aren't using False
2013-09-11 01:01:53	YayMe`	ekipan:  it's a difference of mightBe $ bla >= alb vs bla |>=| alb
2013-09-11 01:01:54	acowley	edwardk: I worry that it's easy to overthink this
2013-09-11 01:02:01	edwardk	Working on improving communication though
2013-09-11 01:02:08	donri	acowley: yeah you may need to source something in your bashrc. i forgot how you do it when the system doesn't do it for you.
2013-09-11 01:02:14	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Remote host closed the connection)
2013-09-11 01:02:17	YayMe`	applicative: Yeah, sounds like something I'd do.
2013-09-11 01:02:24	ekipan	YayMe`: define your operators based on it:  x |==| y = boolToMaybe (x == y)
2013-09-11 01:02:31	edwardk	acowley: Sure. I just got busy with other things and machines languished
2013-09-11 01:02:48	 *	hackagebot data-extra 2.5.2 - Extra utilities for working on Data.* types.  http://hackage.haskell.org/package/data-extra-2.5.2 (ChrisDone)
2013-09-11 01:02:49	YayMe`	ekipan: I was thinking about that as well, that does actually make more sense. Either way it's a silly nonsense approach to the problem
2013-09-11 01:02:57	applicative	are these definitions the equivalent of liftM2 (>=) and similarly?
2013-09-11 01:03:03	ekipan	{- or even -} (|==|) = (==) `on` boolToMaybe
2013-09-11 01:03:26	YayMe`	applicative: Nah, liftM2 wouldn't automate False->Nothing
2013-09-11 01:03:44	-->	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has joined #haskell
2013-09-11 01:03:50	edwardk	guard?
2013-09-11 01:03:54	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 01:04:22	ekipan	@src guard
2013-09-11 01:04:22	lambdabot	guard True  =  return ()
2013-09-11 01:04:22	lambdabot	guard False =  mzero
2013-09-11 01:04:27	-->	rmyers (~rmyers@hank.catsanddogshavealltheluck.com) has joined #haskell
2013-09-11 01:04:42	arkeet	> [guard False, guard True] :: Maybe ()
2013-09-11 01:04:43	lambdabot	  Couldn't match expected type `Data.Maybe.Maybe ()'
2013-09-11 01:04:44	lambdabot	             with actual...
2013-09-11 01:04:46	arkeet	> [guard False, guard True] :: [Maybe ()]
2013-09-11 01:04:47	-->	timemage (~user@unaffiliated/timemage) has joined #haskell
2013-09-11 01:04:48	lambdabot	  [Nothing,Just ()]
2013-09-11 01:04:50	YayMe`	edwardk: Yeah, that would perfectly define my `mightBe` i was imagining
2013-09-11 01:04:56	edwardk	I use it a lot when I need to give back a result or fail conditionally
2013-09-11 01:05:06	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 01:05:06	<--	iemejia (~ismael@apache2-noxim.yoda.dreamhost.com) has quit (Quit: Lost terminal)
2013-09-11 01:05:15	ekipan	@src mzero Maybe
2013-09-11 01:05:15	lambdabot	Source not found. I feel much better now.
2013-09-11 01:05:21	edwardk	x <$ guard (p x)
2013-09-11 01:05:25	ekipan	didn't lambdabot used to be able to show methods like that?
2013-09-11 01:05:34	edwardk	ekipan: Nothing
2013-09-11 01:05:37	applicative	> guard (3 == 2) :: Maybe Bool
2013-09-11 01:05:38	lambdabot	  Couldn't match type `()' with `GHC.Types.Bool'
2013-09-11 01:05:39	lambdabot	 Expected type: Data.Maybe.M...
2013-09-11 01:05:42	applicative	bah
2013-09-11 01:05:44	ekipan	well obviously, but the question still stands
2013-09-11 01:05:46	applicative	i never use guard
2013-09-11 01:06:01	YayMe`	> guard $ 3 == 2
2013-09-11 01:06:03	lambdabot	  No instance for (Control.Monad.MonadPlus m0)
2013-09-11 01:06:03	lambdabot	   arising from a use of `e_13...
2013-09-11 01:06:09	edwardk	applicative: You need a version that also returns the art
2013-09-11 01:06:14	ekipan	is there a way to query lambdabot for instance methods?
2013-09-11 01:06:14	mstksg	donri: i guess that's worth a shot haha thanks
2013-09-11 01:06:17	edwardk	Er arg or something
2013-09-11 01:06:20	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 01:06:25	ekipan	the source of instance methods
2013-09-11 01:06:27	merijn	ekipan: What do you mean by method?
2013-09-11 01:06:49	ekipan	like I could ask lb the src of (>>=) under ((->) r) for instance
2013-09-11 01:06:56	applicative	isnt there @info as in ghci?
2013-09-11 01:07:02	applicative	oh
2013-09-11 01:07:14	-->	torkjak_ (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-11 01:07:15	merijn	There's @src, but @src is filled with lies
2013-09-11 01:07:18	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-11 01:07:24	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-11 01:07:33	ekipan	how to you phrase such a question?
2013-09-11 01:07:36	applicative	no, it just uses the hbc implementation
2013-09-11 01:07:39	ekipan	@src (>>=) (->)
2013-09-11 01:07:40	lambdabot	Source not found. Just what do you think you're doing Dave?
2013-09-11 01:08:04	joe9	any idris users here? do you like Effects?
2013-09-11 01:08:07	merijn	ekipan: Normally I'd just use hoogle to look at the real source
2013-09-11 01:08:08	acowley	How do I use the bash-completion file that comes with cabal-install?
2013-09-11 01:08:17	joe9	not sure if thy are as good as monads. just wanted to check.
2013-09-11 01:08:44	<--	Michae___ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-11 01:08:47	merijn	ekipan: ((->) r) monad instance can be found in Control.Monad.Instances
2013-09-11 01:09:10	YayMe`	I suppose to take the example I wrote to the Nth degree then you could simply define and as \arr mapM_ guard arr == Just ()
2013-09-11 01:09:12	applicative	it would certainly be pleasing to be able to pull of the main trick in Haskell
2013-09-11 01:09:12	merijn	joe9: Effects are competing with monad transformers, not with monads, as far as I understood
2013-09-11 01:09:14	ekipan	well for answering a newbie question I'd like to be able to get lambdabot to just print a method src real quick sometimes
2013-09-11 01:09:18	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-11 01:09:23	<--	james-ubc (~james@dhcp-206-87-196-92.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 246 seconds)
2013-09-11 01:09:29	applicative	joe9: yes, as merijn says.
2013-09-11 01:09:33	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-09-11 01:09:35	joe9	merijn: yes, misspoke that.
2013-09-11 01:09:39	ekipan	I know what ((->) r)'s (>>=) is
2013-09-11 01:09:40	merijn	ekipan: The @src in lambdabot are just handcoded rules and they don't cover all possible sources
2013-09-11 01:09:44	<--	milessabin (~miles@87.194.133.242) has quit (Ping timeout: 246 seconds)
2013-09-11 01:09:50	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-11 01:09:55	applicative	monad transformers are actually not as bad as these academics think
2013-09-11 01:09:56	merijn	ekipan: The only really reliable way are the source links on Hackage
2013-09-11 01:10:02	merijn	applicative: "these academics"
2013-09-11 01:10:07	joe9	applicative: ok, thanks.
2013-09-11 01:10:11	applicative	haha
2013-09-11 01:10:17	merijn	applicative: The majority is very skeptical about effects
2013-09-11 01:10:17	Twey	Damn academics.  Can't trust 'em.  Trying to turn us against those poor innocent monad transformers.
2013-09-11 01:10:27	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-11 01:10:45	applicative	well, the brilliant effects crowd over-rates the difficulty of monad transformers
2013-09-11 01:10:47	merijn	applicative: So unless "these academics" means "the Idriss guys" that seems a bit of an overstatement
2013-09-11 01:10:47	applicative	there
2013-09-11 01:11:04	acowley	I avoided MTs for a long time due to the weirdness with composition
2013-09-11 01:11:05	applicative	oh, this approach has been around for a while
2013-09-11 01:11:13	Twey	I think it's less about difficulty and more about awkwardness
2013-09-11 01:11:17	edwardk	Hah
2013-09-11 01:11:29	-->	milessabin (~miles@private.milessabin.com) has joined #haskell
2013-09-11 01:11:41	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Quit: Ex-Chat)
2013-09-11 01:11:43	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Ping timeout: 260 seconds)
2013-09-11 01:11:43	edwardk	I find them less awkward and more powerful than the proposed replacements
2013-09-11 01:11:45	merijn	Also, the main problem we discussed was the fact that with Effects you *still* need to provide an ordering to the layering to figure out what's going on
2013-09-11 01:11:48	YayMe`	acowley: I am still succesfully avoiding them! pretty easy when you write C# every day...
2013-09-11 01:12:08	acowley	Now I think we're pretty much able to have foo :: (IElem MyField rs, MonadIO m) => StateT rs m r
2013-09-11 01:12:09	merijn	The only advantage Effects seems to have is that they place nicely with very fine granularity
2013-09-11 01:12:20	applicative	it's strange, i think i believed in the need for fancy effect systems before i actually grasped monad transformers practically.
2013-09-11 01:12:23	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 01:12:28	merijn	Which doesn't seem to be the case for transformers (given the exponential explosion you'd get in mtl)
2013-09-11 01:12:30	applicative	now i don't know what i was thinking
2013-09-11 01:13:07	merijn	The Idriss example I saw had to manually encode the layering of effects to get the order you (implicitly) get from monad transformers, thus mostly eliminating any benefit
2013-09-11 01:13:12	<--	gentleben (~gentleben@12.250.97.26) has quit (Quit: gentleben)
2013-09-11 01:13:20	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 01:13:29	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 01:13:31	acowley	I was scared off because in my earliest days of Haskelling we wallowed in the misery of ordering issues with MTs
2013-09-11 01:13:32	edwardk	merijn: Just can't safely define Reader or write lazy Writer at all
2013-09-11 01:13:56	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 01:14:00	applicative	when i was studying the little Frank language, i remember thinking there was a curious mental regression involved.  he wanted Maybe to be a 'effect', for example
2013-09-11 01:14:02	-->	ezyang (~ezyang@dr-wily.mit.edu) has joined #haskell
2013-09-11 01:14:10	edwardk	or deal with non Typeable states, ST..
2013-09-11 01:14:10	<--	nexx (~nexx@unaffiliated/xxen) has quit (Ping timeout: 245 seconds)
2013-09-11 01:14:29	applicative	everything was turning into something like an exception
2013-09-11 01:14:34	<--	ezyang (~ezyang@dr-wily.mit.edu) has left #haskell
2013-09-11 01:14:44	joe9	Is this a good way to go about transforming my code to readerT monad: before:  http://codepad.org/9tqPsX1q  http://codepad.org/yhyTFXQ2 , after: http://codepad.org/3bicnzQr  http://codepad.org/FfscJWNC
2013-09-11 01:14:45	-->	Jesin (~Jessin_@Dyn156116.cc.lehigh.edu) has joined #haskell
2013-09-11 01:14:52	<--	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-11 01:15:20	ekipan	why 4 pastes instead of 1?
2013-09-11 01:15:41	joe9	ekipan: you are correct. will post 1 in a minute.
2013-09-11 01:15:56	edwardk	Looks like my CRC trick can be adapted to Fletcher and Adler checksums as well. I guess that means this will be a 2-parter
2013-09-11 01:15:57	-->	mrsolo (~mrsolo@50.148.169.160) has joined #haskell
2013-09-11 01:16:06	johnw	you don't need to nest the runReaderT like that
2013-09-11 01:16:11	joe9	 http://codepad.org/Rk9je0Ui
2013-09-11 01:16:15	johnw	in maintainer2, don't call ask, just call sendTxn1 directly
2013-09-11 01:16:20	johnw	it will inherit the Reader environment from the caller
2013-09-11 01:16:25	<--	tibbe (tibbe@nat/google/x-jmyrogctpkabyxgj) has quit (Quit: tibbe)
2013-09-11 01:16:34	joe9	johnw: ok, thanks.
2013-09-11 01:16:38	johnw	otherwise, if you use runReaderT like that, it's not different that just passing it as an argument everywhere
2013-09-11 01:16:56	johnw	the idea is that intermediate functions can ignore the reader environment
2013-09-11 01:17:01	<--	mrsolo (~mrsolo@50.148.169.160) has quit (Client Quit)
2013-09-11 01:17:11	applicative	another curiosity of the algebraic effects crowd is that they follow something like moggi's enumeration of effects / notions of computation, which strangely we dont.  Nobody thinks of the Maybe monad as expressing an 'effect'.
2013-09-11 01:17:26	edwardk	True
2013-09-11 01:17:31	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 01:17:34	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 01:17:38	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-11 01:17:39	-->	Pengoo (~Pengoo@S0106602ad0726c1f.vf.shawcable.net) has joined #haskell
2013-09-11 01:17:44	joe9	jjjj:r
2013-09-11 01:17:50	joe9	sorry about the other line.
2013-09-11 01:17:54	applicative	once you enter monad land you drop the moggi account altogether it seems, only IO really fits his picture. everything else is just value manipulation for us. I'm putting this wrong
2013-09-11 01:18:03	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 01:18:45	applicative	but pigworker is busily working at his maybe effect, his state effect his this effect that effect, when for me they all have, e.g. show instances
2013-09-11 01:19:35	Twey	applicative: Do we not?  The behaviour of (>>=) under Maybe can have the ‘effect’ of ‘stop the computation’
2013-09-11 01:19:47	-->	xuser (~xuser@unaffiliated/xuser) has joined #haskell
2013-09-11 01:20:00	applicative	yes, of course
2013-09-11 01:20:16	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-09-11 01:20:18	-->	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has joined #haskell
2013-09-11 01:20:32	acowley	applicative: I think the idea is to more uniformly account for things
2013-09-11 01:20:34	applicative	similarly concatMap has the 'effect' of making the next indeterministic draw
2013-09-11 01:20:42	Twey	Aye
2013-09-11 01:21:05	applicative	but i feel it is regression to use what is basically an exception system where we use e.g. Maybe as if it were air
2013-09-11 01:21:50	Twey	Perhaps
2013-09-11 01:21:50	joe9	johnw: is this what you meant wrt maintenance2 :  http://codepad.org/oGMOUFo2 . I get this error: http://codepad.org/PRDv32xF
2013-09-11 01:21:57	Saizan	separating the uses of Maybe-as-computationa-context vs. Maybe-as-data has its uses
2013-09-11 01:21:57	acowley	Yeah, hmm. We need a proponent of the approach to argue its merits.
2013-09-11 01:22:06	acowley	Saizan: Why?
2013-09-11 01:22:30	applicative	acowley: I'm making like i'm against it. It's bottomlessly interesting of course.
2013-09-11 01:22:35	johnw	joe9: code is missing, can you show me the whole thing?
2013-09-11 01:22:35	Twey	I usually think of effects as being a specialization — you temporarily put aside some of the power of MTs for nicer composition
2013-09-11 01:22:40	johnw	i don't see where you're calling maintenance2
2013-09-11 01:22:41	acowley	applicative: Yeah :)
2013-09-11 01:22:59	johnw	or what the signature of sleep is
2013-09-11 01:23:04	Saizan	acowley: e.g. things like liftM2 might get automated
2013-09-11 01:23:08	johnw	i think you just need "liftIO (sleep 1)"
2013-09-11 01:23:08	acowley	Twey: It's not clear that it *is* nicer, though, if your still have ordering concerns
2013-09-11 01:23:20	johnw	and also liftIO for readTransactionsShowFilePath
2013-09-11 01:23:21	acowley	Saizan: Ah, now that's a good point
2013-09-11 01:23:26	Twey	Yes
2013-09-11 01:23:33	<--	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 01:23:48	applicative	somehow i feel like once you get accustomed to haskelly modes of combination, you sort of lose your grip on what they were worrying about under the heading of "Maybe-as-computational-context"
2013-09-11 01:23:58	Saizan	also, the way you specify the semantics of effects is not really more an exception system than the Free monad is
2013-09-11 01:23:58	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 01:24:04	applicative	it was just an opaque idea that vanishes in the light of day
2013-09-11 01:24:11	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 01:24:24	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Read error: Connection reset by peer)
2013-09-11 01:24:28	Twey	That was always the selling point of DD — that functions like ‘map’ can work on IO &c. just like on pure values, with no need for a separate mapM
2013-09-11 01:24:32	Saizan	it might be a bit more like alpfelmus(?)'s operational
2013-09-11 01:24:42	joe9	johnw: this is the full code: http://codepad.org/Go9zaBYU . Instead of having the device in SendTxn. I want to move the getMyDevice to the main function.
2013-09-11 01:24:42	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 264 seconds)
2013-09-11 01:24:51	-->	nasarde (~andreasg@host204.190-231-220.telecom.net.ar) has joined #haskell
2013-09-11 01:24:51	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 01:24:53	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-11 01:24:54	johnw	see my liftIO comments
2013-09-11 01:24:54	joe9	and, I am thinking of using the ReaderT to do that.
2013-09-11 01:24:56	Twey	‘apfelmus’
2013-09-11 01:24:57	elliott	Saizan: one too many ls :)
2013-09-11 01:25:01	shachaf	Twey: But mapM has more infromation than map.
2013-09-11 01:25:05	elliott	the opposite of my problem!
2013-09-11 01:25:08	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 01:25:11	Saizan	acowley, Twey: yeah, having only one "map" isn't bad either
2013-09-11 01:25:20	-->	predator117 (~predator1@p50803BA0.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 01:25:56	<--	AnalogFile_ (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (Ping timeout: 250 seconds)
2013-09-11 01:25:57	Saizan	shachaf: Frank has laziness explicit in the types
2013-09-11 01:26:10	applicative	It hadn't occured to me that Heinrich Apfelmus is violating the old hackage requirement for 'real name'
2013-09-11 01:26:11	Twey	shachaf: The extra information in an effect system is carried by the effect
2013-09-11 01:26:16	joe9	johnw, the sleep line is commented out.
2013-09-11 01:26:17	acowley	Saizan: Are these potential benefits realized in any of today's contenders?
2013-09-11 01:26:18	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-11 01:26:28	Twey	applicative: I thought he was just blessed with a silly name
2013-09-11 01:26:29	shachaf	OK. So the information is there.
2013-09-11 01:26:40	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-11 01:26:42	acowley	applicative: I think we agreed to accept that as his or her real name
2013-09-11 01:26:49	shachaf	That sounds more like "functions like mapM can be used without newtype noise", in that case.
2013-09-11 01:26:50	joe9	jonhw, if you are talking about the sleep in line 91
2013-09-11 01:26:55	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-11 01:26:58	johnw	joe9: then how can you have a syntax error on 101 in your paste, when 101 is commented out in your code?
2013-09-11 01:27:00	 *	applicative adopts Johnny Appleseed
2013-09-11 01:27:11	Saizan	shachaf: yeah, it might be more like that
2013-09-11 01:27:16	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-11 01:27:27	joe9	johnw, sorry, wrong error. I will paste the error in a second.
2013-09-11 01:27:37	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Colloquy for iPad - http://colloquy.mobi)
2013-09-11 01:27:38	 *	applicative reconsiders in favor of Joe Babyfood
2013-09-11 01:27:49	shachaf	Did you see http://timmaxwell.org/pages/monad-embed/ ?
2013-09-11 01:27:51	<--	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-09-11 01:27:52	Twey	shachaf: But you can write effect-polymorphic functions
2013-09-11 01:27:56	joe9	johnw: http://codepad.org/DOS2UgVb very sorry about that.
2013-09-11 01:28:16	Saizan	acowley: Frank has something, but it's mostly a proof of concept
2013-09-11 01:28:18	<--	coltfred (~coltfred@inet-hqmc01-o.oracle.com) has quit (Ping timeout: 256 seconds)
2013-09-11 01:28:21	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-11 01:28:22	shachaf	Twey: Yes, and mapM is monad-polymorphic.
2013-09-11 01:28:24	johnw	it's still complaining about a commented-out line?
2013-09-11 01:28:32	johnw	oh, there's a cat
2013-09-11 01:28:33	<--	kcj (~casey@unaffiliated/kcj) has quit (Read error: No route to host)
2013-09-11 01:28:33	shachaf	I don't know much about Frank, so maybe what I'm saying is nonsense.
2013-09-11 01:28:38	<--	predator217 (~predator1@p50803AC1.dip0.t-ipconnect.de) has quit (Ping timeout: 248 seconds)
2013-09-11 01:28:38	applicative	Frank has cool syntax
2013-09-11 01:28:45	<--	janua (~Thunderbi@cpc1-slam4-0-0-cust133.2-4.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-11 01:28:54	johnw	joe9: what is at the real line 91 in your code?
2013-09-11 01:28:56	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Read error: Connection reset by peer)
2013-09-11 01:29:04	johnw	it's better now to paste in the "cat" line at the top, but just the file itself
2013-09-11 01:29:05	joe9	    (sendTxn1 txn []) >> return ()
2013-09-11 01:29:24	joe9	johnw, ok, makes sense.
2013-09-11 01:29:30	<--	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-11 01:29:39	johnw	liftIO (readTransactionsShowFilePath False)
2013-09-11 01:29:42	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 01:30:16	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-11 01:31:09	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-11 01:31:14	-->	Guest60865 (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-11 01:31:40	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-09-11 01:31:46	-->	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-09-11 01:32:16	Saizan	actually Frank's syntax is too much of an ascii soup for me
2013-09-11 01:32:28	--	Guest60865 is now known as fran
2013-09-11 01:33:19	--	flazz is now known as flazz_gone
2013-09-11 01:33:27	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-11 01:33:39	<--	alszar (alszar@nat/rackspace/x-jlvbongnoxspckjg) has quit (Ping timeout: 260 seconds)
2013-09-11 01:33:40	Twey	shachaf: I want to say effect polymorphism isn't restricted to monads, but I'm having a hard time thinking of an example for which that's important (if you wrap everything pure in Identity).
2013-09-11 01:33:59	joe9	johnw: file without the cat line: http://codepad.org/R5BdR6ZG
2013-09-11 01:34:25	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-11 01:34:39	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 01:34:40	joe9	johnw: thanks. that worked.
2013-09-11 01:34:52	<--	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has quit (Quit: Konversation terminated!)
2013-09-11 01:35:03	joe9	johnw: thanks. that makes it easy to code.
2013-09-11 01:35:13	joe9	just put all the non-reader stuff in liftIO.
2013-09-11 01:35:33	johnw	yep
2013-09-11 01:35:43	Twey	joe9: Seems like you should deal with that Maybe earlier instead of using fromJust later on
2013-09-11 01:36:04	johnw	I added a wrapper to hlint so that uses of fromJust show up as on error
2013-09-11 01:36:14	<--	Lethalman (~lethal@ppp-3-31.28-151.libero.it) has quit (Ping timeout: 256 seconds)
2013-09-11 01:36:20	<--	nasarde (~andreasg@host204.190-231-220.telecom.net.ar) has quit (Ping timeout: 246 seconds)
2013-09-11 01:36:29	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-11 01:36:37	Twey	johnw: Also head, tail, &c.?
2013-09-11 01:36:47	joe9	Twey, good idea. thanks.
2013-09-11 01:37:04	-->	nasarde (~andreasg@host204.190-231-220.telecom.net.ar) has joined #haskell
2013-09-11 01:37:32	joe9	twey, I should change this to use safe
2013-09-11 01:37:44	<--	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has quit (Ping timeout: 246 seconds)
2013-09-11 01:37:49	joe9	johnw, let me run this through hlint.
2013-09-11 01:37:53	Twey	Pattern-matching usually suffices
2013-09-11 01:38:07	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-11 01:38:20	applicative	Saizan: what you have something against type signatures like: if Bool then {[] X} else {[] X} [] X
2013-09-11 01:38:45	<--	swistak35 (swistak35@2a01:4f8:160:11e4::10) has quit (Ping timeout: 245 seconds)
2013-09-11 01:38:52	Twey	Generally I find the extra overhead of the Maybes safe returns means I might as well have used a pattern-match or eliminator in the first place
2013-09-11 01:38:52	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-11 01:38:53	joe9	johnw, would you mind sharing that wrapper please?
2013-09-11 01:39:15	<--	hpaste (~hpaste@unaffiliated/chrisdone) has quit (Ping timeout: 264 seconds)
2013-09-11 01:39:15	<--	Svedrin (svedrin@ketos.funzt-halt.net) has quit (Ping timeout: 264 seconds)
2013-09-11 01:39:15	Twey	applicative: I have a lot against [] being an infix operator :þ
2013-09-11 01:39:30	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-11 01:39:50	applicative	Twey, oh it isn't really, it's the substitute for -> but can contain 'effects' or whatever
2013-09-11 01:40:00	applicative	i havent looked at it since it came out
2013-09-11 01:40:04	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 01:40:23	Twey	applicative: Yep.  But it's infix, and the least infix-looking symbol I've ever seen.
2013-09-11 01:40:25	<--	peddie (peddie@repl.esden.net) has quit (Ping timeout: 245 seconds)
2013-09-11 01:40:57	applicative	i'm looking for an example where it pays off
2013-09-11 01:40:58	Twey	ATS does this thing where it expands the arrowhead: int -> int becomes int -<exn,ntm> int
2013-09-11 01:41:12	<--	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Read error: No route to host)
2013-09-11 01:41:31	joe9	johnw: thanks for your help.
2013-09-11 01:41:35	-->	normanrichards (~normanric@mobile-166-147-066-117.mycingular.net) has joined #haskell
2013-09-11 01:41:50	joe9	http://codepad.org/fZ0WrYug is what I have now.
2013-09-11 01:41:51	-->	peddie (peddie@repl.esden.net) has joined #haskell
2013-09-11 01:41:56	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-09-11 01:42:11	-->	swistak35 (swistak35@2a01:4f8:160:11e4::10) has joined #haskell
2013-09-11 01:42:15	applicative	sexp [ReadLine, Abort] SExp
2013-09-11 01:42:57	applicative	here this is like sexp :: MaybeT IO SExp.
2013-09-11 01:43:34	applicative	the bracketed material should look like a modal operator [ ] p -> <> p
2013-09-11 01:43:38	applicative	but marked
2013-09-11 01:43:50	Twey	Oh, is that what it's supposed to be
2013-09-11 01:44:28	applicative	main [Console] SExp is like main :: IO SexP
2013-09-11 01:44:38	applicative	but
2013-09-11 01:44:39	applicative	pop (Stk X) [Console] X
2013-09-11 01:44:53	-->	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has joined #haskell
2013-09-11 01:44:59	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-11 01:45:05	applicative	is like pop :: Kleisli (Stk X) IO X
2013-09-11 01:45:27	applicative	oh wait not the right order for Kleisli
2013-09-11 01:45:43	-->	Svedrin (svedrin@ketos.funzt-halt.net) has joined #haskell
2013-09-11 01:45:51	Twey	joe9: You can change the sequence in isVendorWrite to mapM (. ctSetupMsg) and remove the redundancy
2013-09-11 01:45:59	applicative	pop takes you from a Stk X to an X in a Console-effectful way
2013-09-11 01:46:35	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-11 01:46:40	<--	hpaste (~hpaste@unaffiliated/chrisdone) has quit (Ping timeout: 245 seconds)
2013-09-11 01:46:46	<--	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has quit (Ping timeout: 248 seconds)
2013-09-11 01:47:04	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell ("Leaving")
2013-09-11 01:47:15	monochrom	onoes, hpaste disappears
2013-09-11 01:47:19	Twey	joe9: By ‘deal with the Maybe’ I meant to pattern-match and do something on the Nothing case, not move the fromJust further up the file.  :þ  You've got a bunch of ‘head’s in there, too.
2013-09-11 01:49:15	<--	luksow (~luke@apn-31-2-47-89.dynamic.gprs.plus.pl) has quit (Quit: Wychodzi)
2013-09-11 01:49:18	<--	charliesome (~root@ppp118-209-75-254.lns20.mel4.internode.on.net) has quit (Client Quit)
2013-09-11 01:49:25	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-11 01:49:27	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 01:49:30	<--	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has quit (Quit: biscarch)
2013-09-11 01:50:18	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-11 01:50:28	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 01:51:02	-->	buckmaster (~buckmaste@CPE-124-187-150-238.lns17.ken.bigpond.net.au) has joined #haskell
2013-09-11 01:51:06	<--	Krakarn (Krakarn@62.80.204.136) has quit (Ping timeout: 264 seconds)
2013-09-11 01:51:21	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-11 01:52:30	<--	yano (yano@freenode/staff/yano) has quit (Ping timeout: 600 seconds)
2013-09-11 01:52:36	 *	applicative seconds Twey 's judgment without even looking at the file. 
2013-09-11 01:52:49	<--	kevinqcs (~turing@183.209.53.55) has quit (Quit: Leaving.)
2013-09-11 01:52:56	<--	babalone (~baba@p5DE44DF7.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-09-11 01:53:28	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-11 01:53:55	-->	hpaste (~hpaste@unaffiliated/chrisdone) has joined #haskell
2013-09-11 01:55:13	-->	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 01:56:04	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-11 01:56:06	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-11 01:57:20	Thulsadum	nice, first non trivial application written in haskell. i'm so proud. :D
2013-09-11 01:57:39	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-11 01:58:21	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 245 seconds)
2013-09-11 01:58:23	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 246 seconds)
2013-09-11 01:58:24	-->	tabemann (~travisb@adsl-76-229-158-129.dsl.milwwi.sbcglobal.net) has joined #haskell
2013-09-11 01:58:28	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 01:58:33	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-11 01:58:33	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Quit: HugoDaniel)
2013-09-11 01:58:59	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-11 01:59:13	applicative	oh awesome Thulsadum.
2013-09-11 01:59:17	applicative	but what does it do?
2013-09-11 01:59:21	-->	jim (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-11 01:59:38	--	jim is now known as Guest51428
2013-09-11 01:59:44	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-11 01:59:45	Thulsadum	applicative: it's n irc bot how greets people joining a channel
2013-09-11 01:59:49	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-11 02:00:07	<--	nasarde (~andreasg@host204.190-231-220.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-09-11 02:00:27	-->	SrPx (b16263d8@gateway/web/freenode/ip.177.98.99.216) has joined #haskell
2013-09-11 02:00:29	SrPx	what happened to clean?
2013-09-11 02:00:31	applicative	oh an irc bot nice.
2013-09-11 02:00:38	<--	ddinh (~David@108.67.65.91) has quit (Read error: Operation timed out)
2013-09-11 02:00:45	monochrom	good good
2013-09-11 02:00:51	Guest51428	what can you do if cabal install fails on a package (I can see what the bug is, and know how to fix it, and have submitted a bug report, but....  How can I get the package to work for me *now* without having to work outside of cabal)
2013-09-11 02:00:52	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 245 seconds)
2013-09-11 02:01:15	--	flazz_gone is now known as flazz
2013-09-11 02:01:17	-->	nasarde (~andreasg@190.231.220.204) has joined #haskell
2013-09-11 02:01:29	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-09-11 02:01:33	geekosaur	cabal unpack <pkgname>, go into the directory, fix it, "cabal install" (no package name)
2013-09-11 02:01:34	shachaf	How "outside" is outside?
2013-09-11 02:01:43	shachaf	"cabal unpack" is now "cabal get"
2013-09-11 02:01:47	Thulsadum	applicative: yep, and i like the elegance of haskell, but i think my solution is not the most elegant one :D
2013-09-11 02:01:51	geekosaur	figures
2013-09-11 02:01:52	applicative	Guest51428: what is the failure
2013-09-11 02:02:06	Guest51428	geekosaur- that sounds like it might do it for me, thanks!
2013-09-11 02:02:26	-->	ddinh (~David@airbears2-136-152-142-32.AirBears2.Berkeley.EDU) has joined #haskell
2013-09-11 02:02:38	-->	amosr (~amos@28.30.233.220.static.exetel.com.au) has joined #haskell
2013-09-11 02:02:43	Guest51428	I assume that cabal will handle the upgrade for me later when it is fixed, correct?
2013-09-11 02:02:45	applicative	cabal unpack still works fine for me; there was a warning for the dev version ?
2013-09-11 02:03:14	geekosaur	cabal's bad at upgrades in general, although I don't know what the latest one might have added to deal with it
2013-09-11 02:03:17	<--	asmyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-11 02:03:26	joe9	twey: thanks a lot for your feedback.
2013-09-11 02:03:27	geekosaur	(well, realy, it's hobbled by ghc being bad at upgrades)
2013-09-11 02:03:29	applicative	Guest51428: just use a sandbox!
2013-09-11 02:04:26	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 02:04:45	<--	xuser (~xuser@unaffiliated/xuser) has left #haskell
2013-09-11 02:04:52	monochrom	Guest51428: see my http://www.vex.net/~trebla/haskell/sicp.xhtml#pigeon for what "upgrade" means. in fact, see the whole thing.
2013-09-11 02:05:07	applicative	in order to install the groom package, which is basically a one liner, i must install cpphs and haskell-src-exts
2013-09-11 02:05:18	Twey	joe9: No problem ☺
2013-09-11 02:05:21	-->	ISO8601 (yano@freenode/staff/yano) has joined #haskell
2013-09-11 02:05:43	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-09-11 02:05:54	-->	babalone (~baba@46.246.44.171) has joined #haskell
2013-09-11 02:06:01	<--	Guest51428 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:06:02	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Colloquy for iPad - http://colloquy.mobi)
2013-09-11 02:06:04	applicative	haskell-src-exts is a major environmental menace. i can feel the heat.
2013-09-11 02:06:13	<--	SoupE (~jloos@f048157087.adsl.alicedsl.de) has quit (Read error: Operation timed out)
2013-09-11 02:06:41	-->	jim_ (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-11 02:06:54	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 02:07:55	<--	Nimatek (~x@unaffiliated/nimatek) has quit (Ping timeout: 245 seconds)
2013-09-11 02:08:11	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 02:08:16	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-11 02:08:48	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-11 02:08:48	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 02:09:14	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 02:09:18	-->	riley_ (~riley@75-170-137-73.desm.qwest.net) has joined #haskell
2013-09-11 02:09:34	buckmaster	Hey everyone, quick question - I've read that Yesod didn't support authorisation using a MongoDB backend in 2012. Is that still the case? (I asked in #yesod but it's pretty quiet over there)
2013-09-11 02:09:54	<--	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (Read error: Operation timed out)
2013-09-11 02:10:13	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 02:10:14	-->	vpetro (~textual@65.94.237.114) has joined #haskell
2013-09-11 02:10:30	-->	sdb_ (~sdb_@cpe-74-68-156-14.nyc.res.rr.com) has joined #haskell
2013-09-11 02:10:35	Guest2098	geekosaur- sorry, I was kicked off before I could thank you, so thanks!
2013-09-11 02:10:53	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 02:11:08	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-11 02:11:23	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-11 02:11:28	<--	tim_ (~tim@46.246.47.13) has quit (Quit: leaving)
2013-09-11 02:11:40	-->	tim (~tim@46.246.47.13) has joined #haskell
2013-09-11 02:11:47	-->	carlosgaldino (~carlosgal@177.32.75.176) has joined #haskell
2013-09-11 02:11:55	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-11 02:12:06	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-11 02:12:12	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-11 02:13:00	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Remote host closed the connection)
2013-09-11 02:13:07	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 02:13:12	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-09-11 02:13:31	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-11 02:13:43	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-11 02:15:03	-->	charliesome (~root@202-129-124-155.perm.iinet.net.au) has joined #haskell
2013-09-11 02:15:58	<--	Ralith (~ralith@66.114.129.162) has quit (Read error: Operation timed out)
2013-09-11 02:16:30	<--	DanielDiaz (~dhelta@5.Red-79-150-27.dynamicIP.rima-tde.net) has quit (Quit: Leaving.)
2013-09-11 02:16:49	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-11 02:17:03	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 02:17:03	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-09-11 02:17:26	applicative	oh buckmaster I think the most effective venue for yesod questions is StackOverflow
2013-09-11 02:17:55	<--	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has quit (Ping timeout: 264 seconds)
2013-09-11 02:18:05	<--	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 02:18:05	buckmaster	applicative - cheers, I'll try that!
2013-09-11 02:18:21	-->	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has joined #haskell
2013-09-11 02:18:22	<--	SrPx (b16263d8@gateway/web/freenode/ip.177.98.99.216) has quit (Ping timeout: 250 seconds)
2013-09-11 02:18:32	-->	hiroakip (~hiroaki@77-20-192-229-dynip.superkabel.de) has joined #haskell
2013-09-11 02:18:49	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Quit: azcodex)
2013-09-11 02:21:04	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-11 02:21:18	-->	rofer (~rofer@rofer.me) has joined #haskell
2013-09-11 02:21:34	<--	applicative (17194f5d@gateway/web/freenode/ip.23.25.79.93) has quit (Quit: Page closed)
2013-09-11 02:22:09	-->	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has joined #haskell
2013-09-11 02:22:09	<--	DaveS (~DaveS@c-67-172-211-11.hsd1.va.comcast.net) has quit (Changing host)
2013-09-11 02:22:10	-->	DaveS (~DaveS@unaffiliated/daves) has joined #haskell
2013-09-11 02:22:29	<--	yogurt_t_ (~yogurt_tr@190.191.224.63) has quit (Remote host closed the connection)
2013-09-11 02:22:49	-->	yogurt_truck (~yogurt_tr@190.191.224.63) has joined #haskell
2013-09-11 02:23:12	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:23:16	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-11 02:23:23	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-11 02:23:50	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 02:23:51	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-11 02:24:12	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-11 02:24:34	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 02:25:25	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 245 seconds)
2013-09-11 02:25:30	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-11 02:26:45	<--	vpetro (~textual@65.94.237.114) has quit (Quit: Computer has gone to sleep.)
2013-09-11 02:26:59	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 02:28:53	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-11 02:28:59	-->	chatsiri_ (~chatsiri_@14.207.185.205) has joined #haskell
2013-09-11 02:29:11	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-11 02:30:30	<--	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has quit (Quit: .)
2013-09-11 02:31:18	--	ISO8601 is now known as yano
2013-09-11 02:31:32	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:31:52	<--	iswilson (~ian@192-0-175-9.cpe.teksavvy.com) has quit (Quit: Leaving)
2013-09-11 02:32:39	<--	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-09-11 02:32:49	-->	SrPx_ (b16263d8@gateway/web/freenode/ip.177.98.99.216) has joined #haskell
2013-09-11 02:32:56	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-11 02:32:58	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-09-11 02:34:17	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-11 02:34:52	-->	csakatoku (~csakatoku@em117-55-68-166.emobile.ad.jp) has joined #haskell
2013-09-11 02:35:04	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-11 02:35:07	hpaste	sdb_ pasted “Euler 14” at http://lpaste.net/5440644775621427200
2013-09-11 02:35:28	hpaste	sdb_ revised “Euler 14”: “No title” at http://lpaste.net/5440644775621427200
2013-09-11 02:35:56	sdb_	I'm trying to do Euler 14 in Haskell.. now in an imperative language I would use memoization.. but my functional approach is taking forever. Am I missing something to make this more performant? see above paste
2013-09-11 02:36:06	<--	arash_ (~arash@c-453571d5.08-80-73746f22.cust.bredbandsbolaget.se) has quit (Ping timeout: 264 seconds)
2013-09-11 02:36:18	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 02:36:41	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 245 seconds)
2013-09-11 02:37:02	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-11 02:37:09	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-11 02:37:31	tabemann	there's libraries that do memoization out there IIRC; mind you they probably are using unsafePerformIO behind the scenes
2013-09-11 02:38:01	Dodek	sdb_: there are at least three things you could do here
2013-09-11 02:38:03	tabemann	there's also an approach I've seen to doing memoization that *doesn't* use unsafePerformIO
2013-09-11 02:38:09	Dodek	one has just been mentioned by tabemann
2013-09-11 02:38:13	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-11 02:38:20	tabemann	that relies on top level partial functions
2013-09-11 02:38:31	<--	ninzine (~ninzine@tomten.ar.ett.fyllesv.in) has quit (Ping timeout: 260 seconds)
2013-09-11 02:38:41	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Client Quit)
2013-09-11 02:38:42	Dodek	sdb_: as for the second, you can pass memoization map around in nextCollatz
2013-09-11 02:38:43	tabemann	it's mentioned in an answer on StackOverflow by edwardk
2013-09-11 02:39:23	Dodek	sdb_: just create an empty map from Data.Map, and add memoizations to it as needed, passing it as an argument and returning updated map
2013-09-11 02:39:47	Dodek	sdb_: this is a bit cumbersome, so there's also third solution: you can use State monad to make this memoization map implicit
2013-09-11 02:39:54	-->	ninzine (~ninzine@tomten.ar.ett.fyllesv.in) has joined #haskell
2013-09-11 02:40:00	Dodek	sdb_: and write memoization just like in imperative programming language
2013-09-11 02:40:21	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-11 02:40:24	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-11 02:40:25	sdb_	I see
2013-09-11 02:40:36	Dodek	sdb_: btw, a while ago i've tried to do exact the same thing as project euler 14, but for different purpose
2013-09-11 02:40:38	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-11 02:40:51	Dodek	sdb_: it turned out that memoization actually slowed down my program
2013-09-11 02:41:01	Dodek	sdb_: (it was in c++, though)
2013-09-11 02:41:05	tabemann	http://stackoverflow.com/questions/3208258/memoization-in-haskell < read this
2013-09-11 02:41:29	tabemann	specifically Edward Kmett's answer
2013-09-11 02:41:31	sdb_	is there a more intelligent way of applying these functions that would not need memoization
2013-09-11 02:41:37	-->	peterbb (~peterbb@1x-193-157-252-191.uio.no) has joined #haskell
2013-09-11 02:42:03	-->	jonke_ (~jonke@h87-96-186-149.dynamic.se.alltele.net) has joined #haskell
2013-09-11 02:42:07	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 02:42:08	adnap	Is there a way to take something like data F = F Int Int and make Int -> F like "deconstruct (Foo x _) = Foo x" without pattern matching?
2013-09-11 02:42:14	tabemann	the advantage of his approach here is that it requires neither passing around a map nor unsafePerformIO
2013-09-11 02:42:27	arkeet	adnap: pattern matching is the only way to deconstruct things
2013-09-11 02:42:42	adnap	s/Foo/F/g
2013-09-11 02:42:57	sdb_	ahh very interesting tabemann
2013-09-11 02:42:58	arkeet	actually
2013-09-11 02:43:07	tabemann	admap: data F = F { getFoo : Int, getBar : Int }
2013-09-11 02:43:11	arkeet	sure.
2013-09-11 02:43:15	arkeet	record syntax helps.
2013-09-11 02:43:26	arkeet	also, ::
2013-09-11 02:43:42	 *	tabemann is a former MLer...
2013-09-11 02:43:54	adnap	deconstruct f = F (getFoo f)
2013-09-11 02:43:59	-->	sinistersnare (6c1c5d99@gateway/web/cgi-irc/kiwiirc.com/ip.108.28.93.153) has joined #haskell
2013-09-11 02:44:01	adnap	Meh
2013-09-11 02:44:06	arkeet	adnap: uh
2013-09-11 02:44:09	arkeet	F (getFoo f) is a type error.
2013-09-11 02:44:16	arkeet	no wait.
2013-09-11 02:44:18	adnap	I don't think so
2013-09-11 02:44:22	arkeet	well, the type you gave is wrong.
2013-09-11 02:44:32	adnap	getFoo :: F -> Int
2013-09-11 02:44:35	<--	jonke (~jonke@h87-96-186-149.dynamic.se.alltele.net) has quit (Ping timeout: 260 seconds)
2013-09-11 02:44:37	arkeet	that would be deconstruct :: F -> (Int -> F)
2013-09-11 02:44:38	adnap	F :: Int -> Int -> F
2013-09-11 02:44:51	adnap	arkeet: Yes, exactly
2013-09-11 02:44:57	arkeet	ok.
2013-09-11 02:45:02	arkeet	lenses!
2013-09-11 02:45:15	adnap	I never gave a type originally
2013-09-11 02:45:25	-->	johntromp (~johntromp@ool-18be0ed6.dyn.optonline.net) has joined #haskell
2013-09-11 02:45:37	adnap	Lenses can help?
2013-09-11 02:45:40	ekipan	I'd rather call deconstruct setBar
2013-09-11 02:45:47	arkeet	^
2013-09-11 02:45:55	adnap	Oh, I see
2013-09-11 02:46:05	adnap	A setBar lens
2013-09-11 02:46:09	arkeet	a bar lens
2013-09-11 02:46:16	ekipan	a lens is a pair of getter and setter
2013-09-11 02:46:27	adnap	I thought there were "setter lenses"
2013-09-11 02:46:29	ekipan	to, uh, a first approximation
2013-09-11 02:46:42	arkeet	@let data F = F Int Int deriving Show
2013-09-11 02:46:42	<--	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:46:43	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:46:43	lambdabot	 Defined.
2013-09-11 02:46:57	adnap	Anyway, there's also...
2013-09-11 02:47:07	arkeet	@let bar :: Lens' F Int; bar f (Foo x y) = Foo x <$> f y
2013-09-11 02:47:08	lambdabot	 .L.hs:162:8: Not in scope: data constructor `Foo'
2013-09-11 02:47:08	lambdabot	 
2013-09-11 02:47:08	lambdabot	 .L.hs:162:19: Not in sc...
2013-09-11 02:47:14	arkeet	@let bar :: Lens' F Int; bar f (F x y) = F x <$> f y
2013-09-11 02:47:15	lambdabot	 Defined.
2013-09-11 02:47:21	arkeet	:t set bar
2013-09-11 02:47:22	lambdabot	Int -> F -> F
2013-09-11 02:47:23	adnap	setBar f = \x -> f { getBar = x }
2013-09-11 02:47:34	arkeet	> set bar 3 (Foo 1 2)
2013-09-11 02:47:35	lambdabot	  Not in scope: data constructor `Foo'
2013-09-11 02:47:38	arkeet	> set bar 3 (F 1 2)
2013-09-11 02:47:38	arkeet	=(
2013-09-11 02:47:42	<--	ecr (~Thunderbi@nat/mozilla/x-kwhdfvqvzaxzoxoo) has quit (Quit: ecr)
2013-09-11 02:47:45	lambdabot	  F 1 3
2013-09-11 02:47:49	ekipan	> bar .~ 3 (F 1 2)
2013-09-11 02:47:50	lambdabot	  No instance for (GHC.Num.Num (L.F -> GHC.Types.Int))
2013-09-11 02:47:51	lambdabot	   arising from the li...
2013-09-11 02:47:51	adnap	lol
2013-09-11 02:47:58	adnap	I totally fucked everyone up by mixing Foo and F
2013-09-11 02:48:01	arkeet	yep
2013-09-11 02:48:13	ekipan	I've not actually used 'em, don't know my way around the lens functions
2013-09-11 02:48:16	adnap	Notice: @let bar :: Lens' F Int; bar f (Foo x y) = Foo x <$> f y
2013-09-11 02:48:23	ekipan	what the infix spelling of set?
2013-09-11 02:48:28	arkeet	(.~)
2013-09-11 02:48:32	arkeet	you just have your associativity wrong
2013-09-11 02:48:33	ekipan	oh
2013-09-11 02:48:35	ekipan	right yes
2013-09-11 02:48:36	adnap	I thought you use over
2013-09-11 02:48:43	arkeet	adnap: over is for modifying with a function.
2013-09-11 02:48:44	shachaf	arkeet: Well, precedence. Or something.
2013-09-11 02:48:46	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-11 02:48:49	arkeet	set l f = over l (const f)
2013-09-11 02:48:53	arkeet	hm, I shouldn't have called that f.
2013-09-11 02:48:57	arkeet	shachaf: yeah that's the word I was looking for.
2013-09-11 02:49:02	--	GaelanAintAround is now known as Gaelan
2013-09-11 02:49:18	ekipan	(bar %~ (*2)) (F 1 2)
2013-09-11 02:49:22	ekipan	> (bar %~ (*2)) (F 1 2)
2013-09-11 02:49:25	lambdabot	  F 1 4
2013-09-11 02:49:49	arkeet	@let foo :: Lens' F Int; foo f (F x y) = (\x' -> F x' y) <$> f x
2013-09-11 02:49:50	lambdabot	 Defined.
2013-09-11 02:50:11	<--	chatsiri_ (~chatsiri_@14.207.185.205) has quit (Ping timeout: 260 seconds)
2013-09-11 02:50:58	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-11 02:51:52	-->	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has joined #haskell
2013-09-11 02:52:16	adnap	arkeet: What is 'f' in foo?
2013-09-11 02:52:17	<--	talzeus__ (~studybot_@113.37.230.101) has quit (Read error: Connection reset by peer)
2013-09-11 02:52:19	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Quit: Lost terminal)
2013-09-11 02:52:33	-->	tac (~tac-tics@2602:306:bdb4:5100:60ef:66c4:32fc:b6c6) has joined #haskell
2013-09-11 02:52:37	arkeet	adnap: it's the (a -> f b) in Lens s t a b = Functor f => (a -> f b) -> (s -> f t)
2013-09-11 02:52:40	<--	nasarde (~andreasg@190.231.220.204) has quit (Ping timeout: 250 seconds)
2013-09-11 02:53:41	ekipan	type Lens' s a = Lens s t a b
2013-09-11 02:53:46	ekipan	er
2013-09-11 02:53:47	adnap	akiress: It seems to make a Functor of Int...
2013-09-11 02:53:48	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-11 02:53:50	ekipan	= Lens s s a a
2013-09-11 02:54:05	arkeet	:t foo
2013-09-11 02:54:06	lambdabot	Functor f => (Int -> f Int) -> F -> f F
2013-09-11 02:54:13	adnap	Yes
2013-09-11 02:54:14	arkeet	adnap: f :: Int -> f Int
2013-09-11 02:54:20	arkeet	F isn't the functor.
2013-09-11 02:54:25	adnap	I know
2013-09-11 02:54:26	arkeet	ok.
2013-09-11 02:54:36	ekipan	:t set
2013-09-11 02:54:37	lambdabot	ASetter s t a b -> b -> s -> t
2013-09-11 02:54:38	arkeet	adnap: do you know how lens works?
2013-09-11 02:54:39	shachaf	id :: Functor f => (F -> f F) -> F -> f F
2013-09-11 02:54:48	arkeet	just roughly.
2013-09-11 02:54:55	adnap	arkeet: I have studied examples before.
2013-09-11 02:55:00	arkeet	like why the types are what they are.
2013-09-11 02:55:22	-->	zRecursive (~czsq888@171.214.172.234) has joined #haskell
2013-09-11 02:55:28	adnap	arkeet: I have probably forgotten stuff because I haven't adjusted to using them
2013-09-11 02:55:40	arkeet	> foo (Identity . const 3) (F 1 2)
2013-09-11 02:55:43	lambdabot	  Identity {runIdentity = F 3 2}
2013-09-11 02:56:01	arkeet	> foo Const (F 1 2)
2013-09-11 02:56:02	lambdabot	  No instance for (GHC.Show.Show
2013-09-11 02:56:02	lambdabot	                    (Control.Applicative.Con...
2013-09-11 02:56:02	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-11 02:56:06	arkeet	ehh
2013-09-11 02:56:29	<--	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has quit (Ping timeout: 250 seconds)
2013-09-11 02:56:34	arkeet	> getConst $ foo Const (F 1 2)
2013-09-11 02:56:37	lambdabot	  1
2013-09-11 02:56:42	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 02:56:43	arkeet	:t Const
2013-09-11 02:56:44	lambdabot	a -> Const a b
2013-09-11 02:56:46	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-11 02:56:56	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 02:57:12	arkeet	adnap: the particular Functor that gets used depends on what we're doing with the lens.
2013-09-11 02:57:17	arkeet	getting uses Const. setting uses Identity.
2013-09-11 02:57:28	adnap	arkeet: Okay
2013-09-11 02:57:41	<--	scshunt (raedford@taurine.csclub.uwaterloo.ca) has quit (Quit: leaving)
2013-09-11 02:57:56	adnap	I'm going to do something else. Thanks for the help
2013-09-11 02:57:59	-->	mbuf (~user@49.248.85.191) has joined #haskell
2013-09-11 02:58:08	-->	jmcarthur (~jake@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 02:58:25	<--	litherum (~Adium@2620:149:4:1b01:9c21:e2af:3bdf:db8c) has quit (Quit: Leaving.)
2013-09-11 02:58:38	-->	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has joined #haskell
2013-09-11 02:58:39	arkeet	> runIdentity . foo (Identity . (+5)) $ Foo 1 2
2013-09-11 02:58:41	lambdabot	  Not in scope: data constructor `Foo'
2013-09-11 02:58:43	arkeet	> runIdentity . foo (Identity . (+5)) $ F 1 2
2013-09-11 02:58:44	arkeet	arghhh
2013-09-11 02:58:46	lambdabot	  F 6 2
2013-09-11 02:58:57	<--	dubsg (~dubsg@208.74.177.104.static.etheric.net) has quit (Remote host closed the connection)
2013-09-11 02:59:02	arkeet	anyway, this is basically how over is implemented.
2013-09-11 02:59:09	arkeet	over l f = runIdentity . l (Identity . f)
2013-09-11 02:59:16	arkeet	view l = getConst . l Const
2013-09-11 02:59:17	<--	normanrichards (~normanric@mobile-166-147-066-117.mycingular.net) has quit (Read error: Connection reset by peer)
2013-09-11 02:59:42	arkeet	views l f = getConst . l (Const . f) -- nicer parallel with over
2013-09-11 03:00:12	arkeet	> views traverse Sum [1..5]
2013-09-11 03:00:15	lambdabot	  Sum {getSum = 15}
2013-09-11 03:00:29	arkeet	the Applicative instance for Const gives us foldMap for free from that too :>
2013-09-11 03:00:38	arkeet	> foldMap Sum [1..5]
2013-09-11 03:00:39	lambdabot	  Sum {getSum = 15}
2013-09-11 03:00:52	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 245 seconds)
2013-09-11 03:00:57	-->	scshunt (raedford@taurine.csclub.uwaterloo.ca) has joined #haskell
2013-09-11 03:01:00	arkeet	lenstastic!
2013-09-11 03:01:49	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Quit: Leaving)
2013-09-11 03:02:50	 *	hackagebot diagrams-svg 0.8 - SVG backend for diagrams drawing EDSL.  http://hackage.haskell.org/package/diagrams-svg-0.8 (BrentYorgey)
2013-09-11 03:02:52	 *	hackagebot SVGFonts 1.4 - Fonts from the SVG-Font format  http://hackage.haskell.org/package/SVGFonts-1.4 (BrentYorgey)
2013-09-11 03:02:58	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-11 03:03:11	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 03:03:13	<--	meretrix (~user@unaffiliated/meretrix) has quit (Remote host closed the connection)
2013-09-11 03:03:20	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-11 03:04:23	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-11 03:05:07	peterbb	Hi! :) What is the best way to get something "equivalent" to non-linear patterns? I feel guards are a bit verbose. I have tried using View Patterns, and I'm unsure how successfull I was. Example: https://gist.github.com/peterbb/6517990 Any opinions?
2013-09-11 03:05:18	-->	pioneerdom28 (~pioneerdo@78.129.150.164) has joined #haskell
2013-09-11 03:06:21	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-11 03:06:26	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-11 03:06:57	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 03:07:25	-->	dimday (~amcvega@23.29.114.154) has joined #haskell
2013-09-11 03:07:30	<--	shesek (~shesek@77.127.54.57) has quit (Read error: No route to host)
2013-09-11 03:08:13	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has left #haskell
2013-09-11 03:08:13	-->	zxq9 (~ceverett@FL1-119-244-165-183.okn.mesh.ad.jp) has joined #haskell
2013-09-11 03:08:18	ski	> let (x,(x ==) -> True) = (3,3) in x
2013-09-11 03:08:19	-->	meretrix (~user@unaffiliated/meretrix) has joined #haskell
2013-09-11 03:08:20	lambdabot	  3
2013-09-11 03:08:46	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-11 03:09:06	arkeet	> let (id &&& id) -> (x, (x==) -> True) = 3 in x
2013-09-11 03:09:07	lambdabot	  <hint>:1:17: parse error on input `->'
2013-09-11 03:09:10	arkeet	hm.
2013-09-11 03:09:34	arkeet	do I forget how view patterns work
2013-09-11 03:09:42	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 03:10:18	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-09-11 03:10:24	arkeet	:t join (,)
2013-09-11 03:10:24	lambdabot	a -> (a, a)
2013-09-11 03:10:28	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-11 03:11:16	elliott	arkeet: what do you expect "let f -> x = y in ..." to do?
2013-09-11 03:11:36	arkeet	x = f y
2013-09-11 03:11:51	arkeet	uh
2013-09-11 03:11:54	arkeet	I don't know!
2013-09-11 03:12:00	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-09-11 03:12:35	peterbb	ski: yes, that's what I've tried.
2013-09-11 03:12:52	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 03:12:55	<--	mbuf (~user@49.248.85.191) has quit (Ping timeout: 245 seconds)
2013-09-11 03:13:14	ski	> let ((id &&& id) -> (x, (x==) -> True)) = 3 in x  -- la la la
2013-09-11 03:13:15	lambdabot	  3
2013-09-11 03:13:22	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 245 seconds)
2013-09-11 03:14:08	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-11 03:14:18	ekipan	> let (x,(x ==) -> True) = (3,4) in x
2013-09-11 03:14:19	lambdabot	  *Exception: <interactive>:3:5-30: Irrefutable pattern failed for pattern (x...
2013-09-11 03:14:27	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Ping timeout: 260 seconds)
2013-09-11 03:14:27	<--	myme (~myme@djent.myme.no) has quit (Ping timeout: 260 seconds)
2013-09-11 03:14:30	ekipan	> let ~(x,(x ==) -> True) = (3,4) in x
2013-09-11 03:14:31	lambdabot	  *Exception: <interactive>:3:5-31: Irrefutable pattern failed for pattern (x...
2013-09-11 03:14:37	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-09-11 03:14:45	ekipan	I suppose the view would need the ~
2013-09-11 03:15:11	-->	Kuba (~jakub@unaffiliated/kuba) has joined #haskell
2013-09-11 03:15:39	ski	> let (x,(x ==) -> ~True) = (3,4) in x
2013-09-11 03:15:41	lambdabot	  3
2013-09-11 03:15:44	<--	tac (~tac-tics@2602:306:bdb4:5100:60ef:66c4:32fc:b6c6) has quit (Quit: Leaving)
2013-09-11 03:16:07	ekipan	an elaborate way of spelling "3" to be sure
2013-09-11 03:16:33	<--	acowley (~acowley@pool-72-82-182-79.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-11 03:16:45	arkeet	> let (x,(x+) -> y) = (3,4) in y
2013-09-11 03:16:46	lambdabot	  7
2013-09-11 03:17:01	arkeet	> let (x,join (,) -> y) = (3,4) in y
2013-09-11 03:17:02	lambdabot	  (4,4)
2013-09-11 03:17:03	ekipan	that's just silly
2013-09-11 03:17:05	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-11 03:17:08	-->	myme (~myme@djent.myme.no) has joined #haskell
2013-09-11 03:17:10	arkeet	> let (join (,) -> y) = 3 in y
2013-09-11 03:17:11	lambdabot	  (3,3)
2013-09-11 03:17:16	arkeet	> let join (,) -> y = 3 in y
2013-09-11 03:17:17	lambdabot	  <hint>:1:14: parse error on input `->'
2013-09-11 03:17:20	arkeet	ah, so my problem was parentheses.
2013-09-11 03:17:40	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Ping timeout: 256 seconds)
2013-09-11 03:17:46	-->	nilsi_ (~nilsi@5.254.150.16) has joined #haskell
2013-09-11 03:17:56	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-11 03:17:57	<--	wolfnn (~wolfnn@90.24.195.230) has quit (Ping timeout: 245 seconds)
2013-09-11 03:18:20	haasn	> let ((x ==) -> True, x) = (3,3) in x
2013-09-11 03:18:21	arkeet	> let (join (,) -> (y,(y==) -> True)) = 3 in y
2013-09-11 03:18:22	lambdabot	  *Exception: <interactive>:3:5-31: Irrefutable pattern failed for pattern ((...
2013-09-11 03:18:22	lambdabot	  3
2013-09-11 03:18:38	arkeet	interesting
2013-09-11 03:18:45	ekipan	views and arrows, needs more lenses
2013-09-11 03:18:45	<--	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-11 03:18:54	ekipan	somebody jam some in
2013-09-11 03:19:08	arkeet	> let ((bacon ==) -> True, bacon) = (3,3) in bacon
2013-09-11 03:19:09	lambdabot	  Not in scope: `bacon'
2013-09-11 03:19:11	arkeet	I thought so.
2013-09-11 03:19:37	haasn	> x == 3
2013-09-11 03:19:38	joelteon	> let (bacon, (bacon ==) -> True) = (3,3) in bacon
2013-09-11 03:19:38	lambdabot	  False
2013-09-11 03:19:39	lambdabot	  3
2013-09-11 03:19:44	haasn	oh..
2013-09-11 03:19:47	arkeet	:t x
2013-09-11 03:19:48	lambdabot	Expr
2013-09-11 03:19:57	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 03:20:01	arkeet	> (x + x) + x = x + (x + x)
2013-09-11 03:20:01	ski	> let (memo (0,12) -> fib) = \n -> case n of 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2) in fib 12
2013-09-11 03:20:03	lambdabot	  <hint>:1:13: parse error on input `='
2013-09-11 03:20:04	arkeet	> (x + x) + x == x + (x + x)
2013-09-11 03:20:05	haasn	so they get bound from left to right, only
2013-09-11 03:20:06	lambdabot	  False
2013-09-11 03:20:07	haasn	sadness :(
2013-09-11 03:20:07	arkeet	yeah
2013-09-11 03:20:08	lambdabot	  144
2013-09-11 03:20:36	arkeet	:t memo
2013-09-11 03:20:37	lambdabot	Ix i => (i, i) -> (i -> e) -> i -> e
2013-09-11 03:20:47	arkeet	huh
2013-09-11 03:20:53	arkeet	@index memo
2013-09-11 03:20:54	lambdabot	bzzt
2013-09-11 03:20:54	ski	you can guess how it's implemented
2013-09-11 03:21:03	arkeet	unsafePerformIO and an array?
2013-09-11 03:21:10	ski	no `unsafePerformIO'
2013-09-11 03:21:14	arkeet	oh.
2013-09-11 03:21:15	arkeet	an array then.
2013-09-11 03:21:20	ski	yes
2013-09-11 03:21:25	arkeet	ok, and laziness.
2013-09-11 03:21:30	ski	aye
2013-09-11 03:21:31	haasn	Ix sort of gives it away
2013-09-11 03:21:38	arkeet	neat
2013-09-11 03:21:42	shachaf	:t ix
2013-09-11 03:21:47	shachaf	:t Control.Lens.ix
2013-09-11 03:21:48	lambdabot	(Indexable (Index m) p, Ixed f m) => Index m -> p (IxValue m) (f (IxValue m)) -> m -> f m
2013-09-11 03:21:49	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-11 03:22:12	shachaf	ix's type is so awe-inspiring that lambdabot won't tell you unless you fully-qualify it.
2013-09-11 03:22:30	ski	too bad you can't write `(memo (0,12) -> fib) 0 = 0; (memo (0,12) -> fib) 1 = 1; (memo (0,12) -> fib) n = fib (n-1) + fib (n-2)' or something similar
2013-09-11 03:22:46	haasn	what's the longest type in ‘lens’, as measured by the output of :t ?
2013-09-11 03:22:46	<--	pioneerdom28 (~pioneerdo@78.129.150.164) has quit (Ping timeout: 256 seconds)
2013-09-11 03:22:50	shachaf	ski: You can't?
2013-09-11 03:22:56	 *	hackagebot diagrams 0.7.1.1 - Embedded domain-specific language for declarative vector graphics  http://hackage.haskell.org/package/diagrams-0.7.1.1 (BrentYorgey)
2013-09-11 03:22:56	haasn	of any single value
2013-09-11 03:22:58	 *	hackagebot diagrams-builder 0.4.0.3 - hint-based build service for the diagrams graphics EDSL.  http://hackage.haskell.org/package/diagrams-builder-0.4.0.3 (BrentYorgey)
2013-09-11 03:22:59	ski	shachaf : try it ?
2013-09-11 03:23:00	joelteon	well
2013-09-11 03:23:03	arkeet	:t beside
2013-09-11 03:23:10	arkeet	:t Control.Lens.beside
2013-09-11 03:23:11	lambdabot	(Applicative (Data.Profunctor.Rep.Rep q), Applicative f, Data.Profunctor.Rep.Representable q) => Overloading p q f s t a b -> Overloading p q f s' t' a b -> Overloading p q f (s, s') (t, t') a
2013-09-11 03:23:11	lambdabot	b
2013-09-11 03:23:19	<--	tim (~tim@46.246.47.13) has quit (Ping timeout: 248 seconds)
2013-09-11 03:23:19	arkeet	I'm sure there's better.
2013-09-11 03:23:20	shachaf	ski: Oh, I see. I misunderstood.
2013-09-11 03:23:22	ski	shachaf : i don't think they thought of `ViewPatterns' being used in the above way
2013-09-11 03:23:22	ekipan	good gravy
2013-09-11 03:23:23	arkeet	and it will shortly become even longer.
2013-09-11 03:23:31	arkeet	once I submit my change.
2013-09-11 03:23:42	shachaf	yes, you can't define functions that way.
2013-09-11 03:23:47	shachaf	s/y/Y/
2013-09-11 03:23:57	-->	tnks (~tnks@cpe-70-112-104-61.austin.res.rr.com) has joined #haskell
2013-09-11 03:24:06	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-11 03:24:22	ski	btw, with `f (foo -> Left  x) = ..x..; f (foo -> Right x) = ..x..' do you get a single `foo' call or not ?
2013-09-11 03:24:34	arkeet	I think you do.
2013-09-11 03:24:35	haasn	ski: does (memo (0,12) -> fib) = \case 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2)  work?
2013-09-11 03:24:36	<--	apaku (~apaku@x2f14e31.dyn.telefonica.de) has quit (Ping timeout: 245 seconds)
2013-09-11 03:24:37	<--	zzing (~textual@198-91-210-150.cpe.distributel.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-11 03:24:39	shachaf	I think GHC guarantees a single call.
2013-09-11 03:24:42	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 03:24:46	ski	haasn : should work
2013-09-11 03:24:48	<--	zRecursive (~czsq888@171.214.172.234) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-11 03:25:03	haasn	ski: seems better than repeating the view pattern to me either way
2013-09-11 03:25:07	-->	pioneerdom28 (~pioneerdo@78.129.150.164) has joined #haskell
2013-09-11 03:25:19	tnks	I'd learned about monad transformers with respect to monads not composing. . . so curious why StateT constructs with s -> m (a, s) instead of s -> (m a, s)
2013-09-11 03:25:21	ski	shachaf : then i think it could be reasonable to assume the same for the `fib' example above
2013-09-11 03:25:30	shachaf	Yes.
2013-09-11 03:25:44	ski	haasn : depends
2013-09-11 03:25:48	shachaf	That's what I thought you were saying "too bad" about. But then I saw that something else was going on.
2013-09-11 03:26:00	ekipan	> (\case _ x -> x) () -- does lambdacase do multiple arguments?
2013-09-11 03:26:01	lambdabot	  <hint>:1:3: parse error on input `case'
2013-09-11 03:26:02	arkeet	let (memo (0,12) -> fib) = f; f 0 = 0; ...
2013-09-11 03:26:16	arkeet	ekipan: case doesn't do multiple arguments, so no?
2013-09-11 03:26:17	-->	apaku (~apaku@x2f12c25.dyn.telefonica.de) has joined #haskell
2013-09-11 03:26:26	ekipan	lambda does though
2013-09-11 03:26:28	ski	arkeet : but then you need an auxilary name, which this was supposed to get rid of
2013-09-11 03:26:29	elliott	arkeet: that's the wrong way around.
2013-09-11 03:26:33	elliott	or, maybe not.
2013-09-11 03:26:51	elliott	ok, I get it now
2013-09-11 03:26:51	arkeet	ski: well that was my intention.
2013-09-11 03:26:59	<--	Jesin (~Jessin_@Dyn156116.cc.lehigh.edu) has quit (Quit: Leaving)
2013-09-11 03:27:10	arkeet	is memo in some library?
2013-09-11 03:27:16	ski	dunno
2013-09-11 03:27:53	haasn	> uncurry (\case (_,x) -> x) 3 4 -- ekipan
2013-09-11 03:27:54	lambdabot	  <hint>:1:11: parse error on input `case'
2013-09-11 03:27:57	ski	@let tabulate :: Ix i => (i,i) -> (i -> e) -> Array i e; tabulate ix f = array ix [(i,f i) | i <- range ix]  -- ought to be in a library
2013-09-11 03:27:59	haasn	err
2013-09-11 03:27:59	lambdabot	 Defined.
2013-09-11 03:28:02	haasn	also s/uncurry/curry/
2013-09-11 03:28:10	ekipan	true
2013-09-11 03:28:13	arkeet	ski: tabulate is already taken by profunctor-extras
2013-09-11 03:28:19	arkeet	=(
2013-09-11 03:28:22	ski	(well, for any `IArray', really, but lambdabot doesn't seem to have that imported)
2013-09-11 03:28:31	ski	arkeet : for what ?
2013-09-11 03:28:33	arkeet	doesn't vector have that sort of thing?
2013-09-11 03:28:40	ekipan	> curry3 (\case (_, _, x) -> x) undefined undefined ()
2013-09-11 03:28:41	lambdabot	  <hint>:1:10: parse error on input `case'
2013-09-11 03:28:44	arkeet	ski: it's one of the isos for representable profunctors
2013-09-11 03:29:03	arkeet	I'm not sure why it's called that.
2013-09-11 03:29:03	 *	ski has been mentioning `tabulate' here on and off for several years
2013-09-11 03:29:12	arkeet	:t tabulate
2013-09-11 03:29:13	lambdabot	Ix i => (i, i) -> (i -> e) -> Array i e
2013-09-11 03:29:16	arkeet	er
2013-09-11 03:29:29	ski	@type Data.Profunctor.Rep.tabulate
2013-09-11 03:29:30	lambdabot	Data.Profunctor.Rep.Representable p => (d -> Data.Profunctor.Rep.Rep p c) -> p d c
2013-09-11 03:29:32	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 03:29:33	arkeet	yeah.
2013-09-11 03:29:36	haasn	:t Control.Lens.ifailing
2013-09-11 03:29:37	lambdabot	(Applicative f, Indexable i p) => Traversing (Indexed i) f s t a b -> Traversing (Indexed i) f s t a b -> Over p f s t a b
2013-09-11 03:29:40	-->	talzeus (~studybot_@101.110.31.120) has joined #haskell
2013-09-11 03:29:41	<--	nilsi_ (~nilsi@5.254.150.16) has quit (Remote host closed the connection)
2013-09-11 03:30:09	haasn	beside is much longer
2013-09-11 03:30:14	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-11 03:30:23	peterbb	So ... is this (== x) -> True pattern unidiomatic? Do you think I just should use guards? Or is there some other way to achive non-linear pattern matching?
2013-09-11 03:30:41	ski	peterbb : pattern guards, i suppose
2013-09-11 03:30:58	ski	(you probably won't think that is better than ordinary guards in this case, though)
2013-09-11 03:31:11	-->	CaptainK (~CaptainK@181.179.83.9) has joined #haskell
2013-09-11 03:31:12	--	flazz is now known as flazz_gone
2013-09-11 03:31:15	-->	PhineasRex (~chris@c-24-60-137-35.hsd1.nh.comcast.net) has joined #haskell
2013-09-11 03:31:22	haasn	arkeet: I guess the biggest ‘type’ in lens is still the context on Conjoined
2013-09-11 03:31:31	peterbb	Its pattern-guards I use at the bottom here, right? (the commented part) https://gist.github.com/peterbb/6517990
2013-09-11 03:31:35	ski	arkeet : i suppose one could ask edwardk about `tabulate'
2013-09-11 03:32:08	sclv	clearly tabulate, as a common name, deserves to be taken by a widely used package such as profunctor-extras
2013-09-11 03:32:26	ski	peterbb : no, just an ordinary guard
2013-09-11 03:32:39	<--	csakatoku (~csakatoku@em117-55-68-166.emobile.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-11 03:32:43	<--	ahill-89 (~xander@99.127.139.11) has quit (Quit: leaving)
2013-09-11 03:32:55	peterbb	ski: oh, ok, I'll look it up then.
2013-09-11 03:33:06	sclv	although actually i think the representable notion of tabulation actually sorta generalizes ski's :-)
2013-09-11 03:33:28	ski	peterbb : it's basically like guards, but instead of only getting `Bool's back, you can also bind variables in the guards
2013-09-11 03:33:39	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-11 03:33:42	ski	sclv : yea, i was pondering that
2013-09-11 03:33:44	haasn	I wouldn't mind importing profunctor-extras qualified if I ever needed to use it together with arrays, personally
2013-09-11 03:34:34	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-11 03:34:55	arkeet	well, lens uses it internally
2013-09-11 03:35:03	<--	ddinh (~David@airbears2-136-152-142-32.AirBears2.Berkeley.EDU) has quit (Ping timeout: 264 seconds)
2013-09-11 03:35:03	arkeet	I haven't really seen it elsewhere
2013-09-11 03:35:51	-->	Nimatek (~x@unaffiliated/nimatek) has joined #haskell
2013-09-11 03:36:03	-->	vpetro (~textual@137.122.200.65) has joined #haskell
2013-09-11 03:36:15	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-09-11 03:36:17	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-11 03:36:32	-->	csakatoku (~csakatoku@em117-55-68-166.emobile.ad.jp) has joined #haskell
2013-09-11 03:36:36	-->	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has joined #haskell
2013-09-11 03:36:42	<--	travisstaton (~tstaton@70.127.254.161) has quit (Ping timeout: 245 seconds)
2013-09-11 03:37:56	-->	ddinh (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-11 03:37:58	<--	buckmaster (~buckmaste@CPE-124-187-150-238.lns17.ken.bigpond.net.au) has quit (Remote host closed the connection)
2013-09-11 03:38:04	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Ping timeout: 256 seconds)
2013-09-11 03:38:24	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-11 03:38:42	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 03:38:50	-->	seanlerner (~seanlerne@24-104-79-38-ip-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 03:38:59	-->	SoupEvil (~jloos@g227007197.adsl.alicedsl.de) has joined #haskell
2013-09-11 03:39:39	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 03:39:57	<--	Taslem (320472e7@gateway/web/freenode/ip.50.4.114.231) has quit (Quit: Page closed)
2013-09-11 03:40:04	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-11 03:40:04	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-11 03:40:55	-->	tac (~tac-tics@2602:306:bdb4:5100:60ef:66c4:32fc:b6c6) has joined #haskell
2013-09-11 03:44:02	-->	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has joined #haskell
2013-09-11 03:45:02	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-11 03:47:12	-->	mbuf (~user@49.248.85.191) has joined #haskell
2013-09-11 03:47:21	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-11 03:47:46	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-09-11 03:48:01	<--	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has left #haskell
2013-09-11 03:48:06	napping	well, -fprof-auto-call turned up a nice slow cost centre, but I can't tell which it is
2013-09-11 03:48:44	sellout-	I’m using haskell-ghci-mode in Emacs – wondering if there’s any way to make it possible to :load Alex and Happy files.
2013-09-11 03:48:53	napping	they're all just named after the function, and I don't see any options for getting line numbers or such
2013-09-11 03:49:33	<--	babalone (~baba@46.246.44.171) has quit (Ping timeout: 276 seconds)
2013-09-11 03:49:35	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 245 seconds)
2013-09-11 03:49:44	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (Read error: Connection reset by peer)
2013-09-11 03:49:49	arkeet	would be nice if cabal could build non-profiling and profiling libraries in parallel
2013-09-11 03:50:50	-->	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has joined #haskell
2013-09-11 03:53:27	--	ekipan is now known as [][][]
2013-09-11 03:53:52	--	[][][] is now known as {[`^`]}
2013-09-11 03:54:41	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-11 03:55:26	-->	babu` (~user@122.167.224.134) has joined #haskell
2013-09-11 03:55:31	--	{[`^`]} is now known as ekipan
2013-09-11 03:56:42	<--	tel (~tel@71.206.43.93) has quit (Ping timeout: 276 seconds)
2013-09-11 03:57:54	<--	CaptainK (~CaptainK@181.179.83.9) has quit (Ping timeout: 256 seconds)
2013-09-11 03:57:55	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-09-11 03:58:00	napping	ouch, why is Data.Text.index O(n)?
2013-09-11 03:58:14	shachaf	Because UTF-16.
2013-09-11 03:58:15	arkeet	napping: because utf-
2013-09-11 03:58:16	arkeet	yeah
2013-09-11 03:58:19	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 03:58:29	arkeet	oh it's 16?
2013-09-11 03:58:33	shachaf	Yep.
2013-09-11 03:58:33	arkeet	oh yeah
2013-09-11 03:58:55	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 03:59:23	napping	well, that would nicely explain the parser being approximately O(n^2)
2013-09-11 03:59:44	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 03:59:47	<--	babu` (~user@122.167.224.134) has quit (Ping timeout: 240 seconds)
2013-09-11 03:59:59	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-11 04:00:13	DaveS	why does UTF16 matter?
2013-09-11 04:00:28	arkeet	DaveS: variable-length characters.
2013-09-11 04:00:32	DaveS	ah
2013-09-11 04:00:42	arkeet	some take one code point, some take two.
2013-09-11 04:00:44	arkeet	er
2013-09-11 04:00:45	arkeet	code unit
2013-09-11 04:01:41	monochrom	err, if you write a parser, it should use head and tail, not index. if you use parsec, the Stream instance already does it for you.
2013-09-11 04:01:56	-->	james-ubc (~james@dhcp-128-189-78-37.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 04:02:02	napping	it's currently something like a tabling CYK parser
2013-09-11 04:02:31	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 04:03:15	-->	travisstaton (~tstaton@70.127.254.161) has joined #haskell
2013-09-11 04:03:31	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 264 seconds)
2013-09-11 04:03:34	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 04:03:36	<--	mercwithamouth (~kingdom@99-38-191-69.lightspeed.clmasc.sbcglobal.net) has quit (Quit: Lost terminal)
2013-09-11 04:03:44	-->	rndm (~rndm@209.20.82.67) has joined #haskell
2013-09-11 04:04:22	napping	I do plan to organize things so it fills in order, but wanted a performance baseline first
2013-09-11 04:04:25	-->	CaptainK (~CaptainK@181.179.79.55) has joined #haskell
2013-09-11 04:05:09	<--	torkjak_ (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-09-11 04:05:27	monochrom	if you really like random access, pour your Text into a Vector Char first :)
2013-09-11 04:05:41	shachaf	Or use UCS-2.625!
2013-09-11 04:05:51	napping	Bytestring.Char8 is doing the job for now
2013-09-11 04:05:55	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-11 04:05:58	shachaf	napping: :-(
2013-09-11 04:06:06	arkeet	:-(
2013-09-11 04:06:11	napping	I'll have to see about Happy's UTF8-parsing tricks eventually
2013-09-11 04:06:44	monochrom	Char8 is against God's will
2013-09-11 04:07:08	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 04:07:16	haasn	monochrom: write pipes-text please!
2013-09-11 04:07:22	-->	startling (~startling@162-225-240-170.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-11 04:08:18	joelteon	Someone write pipes-HTTP
2013-09-11 04:08:24	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 04:09:23	-->	dubsg (~dubsg@2601:9:5b00:10d:cdac:27c9:7146:3ec6) has joined #haskell
2013-09-11 04:11:02	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-11 04:11:13	-->	Kevin__ (~Kevin@209.65.15.42) has joined #haskell
2013-09-11 04:11:16	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-11 04:12:31	<--	travisstaton (~tstaton@70.127.254.161) has quit (Ping timeout: 264 seconds)
2013-09-11 04:12:38	<--	CaptainK (~CaptainK@181.179.79.55) has quit (Ping timeout: 256 seconds)
2013-09-11 04:12:42	<--	MrWoohoo (~MrWoohoo@pool-108-38-175-139.lsanca.fios.verizon.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-11 04:12:59	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-11 04:13:00	<--	sj4nz (~sj4nz@98.156.105.243) has quit (Read error: Connection reset by peer)
2013-09-11 04:13:13	meretrix	pipes works pretty well with http-conduit
2013-09-11 04:13:43	<--	Kevin_ (~Kevin@209.65.15.42) has quit (Ping timeout: 260 seconds)
2013-09-11 04:13:46	-->	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has joined #haskell
2013-09-11 04:14:35	<--	dubsg (~dubsg@2601:9:5b00:10d:cdac:27c9:7146:3ec6) has quit (Ping timeout: 245 seconds)
2013-09-11 04:14:52	joelteon	pipes and conduit sounds like it would kill you
2013-09-11 04:15:03	<--	mrowe (~mrowe@72.249.82.46) has left #haskell
2013-09-11 04:15:12	-->	ParahSailin_ (~ropoctl@unaffiliated/parahsailin) has joined #haskell
2013-09-11 04:15:40	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 04:16:03	monochrom	Col. Mustard, pipe, and the dining room? :)
2013-09-11 04:16:33	<--	tac (~tac-tics@2602:306:bdb4:5100:60ef:66c4:32fc:b6c6) has quit (Quit: Leaving)
2013-09-11 04:16:51	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-11 04:16:52	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 276 seconds)
2013-09-11 04:16:52	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 276 seconds)
2013-09-11 04:17:15	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-11 04:18:17	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-11 04:18:18	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-11 04:18:31	<--	osa1 (uid13910@gateway/web/irccloud.com/x-ylhhraxblizuftdh) has quit
2013-09-11 04:18:43	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-11 04:18:53	-->	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has joined #haskell
2013-09-11 04:20:49	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Quit: leaving)
2013-09-11 04:20:50	<--	elgot (~elgot@c-a0c3e455.017-362-6c6b701.cust.bredbandsbolaget.se) has quit (Ping timeout: 245 seconds)
2013-09-11 04:21:01	-->	travisstaton (~tstaton@70.127.254.161) has joined #haskell
2013-09-11 04:21:10	-->	xl1 (~xl@221.218.220.127) has joined #haskell
2013-09-11 04:21:54	<--	rgr (~user@5.159.229.17) has quit (Ping timeout: 240 seconds)
2013-09-11 04:22:05	-->	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has joined #haskell
2013-09-11 04:22:28	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-11 04:22:42	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-11 04:23:44	-->	mm_freak (~milch@pD9FD08BE.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 04:24:28	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-11 04:24:38	-->	pizzaplane (~mgibson@c-98-234-41-23.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 04:25:23	<--	shoret (~user@66.11.220.78) has quit (Ping timeout: 260 seconds)
2013-09-11 04:25:32	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-09-11 04:25:40	<--	mm_freak_ (~milch@p5DD048C3.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-11 04:26:05	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-11 04:27:07	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Read error: Operation timed out)
2013-09-11 04:27:09	flebron	Hi. I'm reading the Applicative paper. Why is it true that "Moreover, any expression built from the Applicative combinators can be transformed to a canonical form in which a single pure function is ‘applied’ to the eﬀectful parts in depth-ﬁrst order". It seems true-ish to me, but how can one prove it?
2013-09-11 04:28:22	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 04:28:56	--	Gaelan is now known as GaelanAintAround
2013-09-11 04:29:23	elliott	repeated application of the laws :)
2013-09-11 04:30:00	<--	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has quit (Ping timeout: 245 seconds)
2013-09-11 04:30:06	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-09-11 04:31:19	-->	tjohnson (~tjohnson@199.223.122.26) has joined #haskell
2013-09-11 04:32:05	flebron	Oh, the interchange one. u <*> pure x = pure (\f -> f x) <*> u
2013-09-11 04:32:19	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Read error: Operation timed out)
2013-09-11 04:32:37	<--	riley_ (~riley@75-170-137-73.desm.qwest.net) has quit (Quit: Goodbye)
2013-09-11 04:34:35	<--	CODEtaku (~otakucode@CPE-76-89-17-209.natall.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-09-11 04:34:45	<--	NiceOneBrah (~niceonebr@173.247.206.226) has quit (Remote host closed the connection)
2013-09-11 04:34:50	-->	mmhelloworld (~marimuthu@pool-108-53-115-24.nwrknj.fios.verizon.net) has joined #haskell
2013-09-11 04:35:10	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 04:35:19	<--	james-ubc (~james@dhcp-128-189-78-37.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-11 04:35:42	-->	ianclarksmith (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-11 04:35:54	--	ianclarksmith is now known as ics
2013-09-11 04:36:10	<--	`Jake` (~Jake@dslb-178-002-068-043.pools.arcor-ip.net) has quit (Quit: Konversation terminated!)
2013-09-11 04:36:18	-->	mno2 (~mno2@wlan30.cc.ntu.edu.tw) has joined #haskell
2013-09-11 04:36:55	-->	james-ubc (~james@dhcp-128-189-78-37.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 04:37:03	<--	mobilebl- (~mobileblu@dslb-188-110-245-042.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-11 04:37:12	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-11 04:37:50	k0001	joelteon: I'm doing some experiments towards that end right now.
2013-09-11 04:39:17	<--	amathew (~Adium@184.152.8.103) has quit (Quit: Leaving.)
2013-09-11 04:39:19	-->	ivoscc (~ivo@190.232.74.75) has joined #haskell
2013-09-11 04:39:46	joelteon	sweet
2013-09-11 04:40:13	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 04:41:08	-->	chatsiri_ (~chatsiri_@158.108.238.76) has joined #haskell
2013-09-11 04:42:37	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 04:43:12	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-11 04:43:22	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-11 04:44:10	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 245 seconds)
2013-09-11 04:44:22	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Client Quit)
2013-09-11 04:44:41	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 04:44:41	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 04:44:59	-->	mobileblue (~mobileblu@dslb-188-110-240-253.pools.arcor-ip.net) has joined #haskell
2013-09-11 04:45:12	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-11 04:45:48	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-11 04:46:20	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-11 04:47:21	-->	meiji11 (~user@75.158.41.148) has joined #haskell
2013-09-11 04:47:30	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 245 seconds)
2013-09-11 04:49:41	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Quit: Leaving)
2013-09-11 04:50:32	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 04:50:55	--	GaelanAintAround is now known as Gaelan
2013-09-11 04:51:39	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 04:51:42	<--	startling (~startling@162-225-240-170.lightspeed.cicril.sbcglobal.net) has quit (Quit: leaving)
2013-09-11 04:51:44	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-11 04:51:45	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-11 04:51:53	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-11 04:51:53	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-11 04:52:02	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 04:52:06	chrisdotcode	does -Werror catch *all* warnings, or just the ones that you've explicitly enabled?
2013-09-11 04:52:30	--	Gaelan is now known as GaelanAintAround
2013-09-11 04:53:52	johnw	-Werror does not imply -Wall
2013-09-11 04:54:25	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Quit: efforeffort)
2013-09-11 04:56:35	chrisdotcode	johnw: so to get *every* single warning as an error, I'd use:
2013-09-11 04:56:35	chrisdotcode	"-Wall -Werror fwarn-tabs -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unused-do-bind -fwarn-implicit-prelude"?
2013-09-11 04:56:35	chrisdotcode	(referencing http://www.haskell.org/ghc/docs/7.0.2/html/users_guide/options-sanity.html)
2013-09-11 04:56:58	-->	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has joined #haskell
2013-09-11 04:57:05	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 245 seconds)
2013-09-11 04:57:14	johnw	looks right to me
2013-09-11 04:57:44	<--	message144 (~message14@cpe-76-170-68-13.socal.res.rr.com) has quit (Quit: message144)
2013-09-11 04:57:45	Twey	-Werror makes non-fatal warnings into fatal errors
2013-09-11 04:57:46	<--	fixme (~fixme@202.120.40.94) has quit (Quit: WeeChat 0.4.1)
2013-09-11 04:57:59	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 04:57:59	sclv	chrisdotcode: i would not recommend such a thing though
2013-09-11 04:58:03	Twey	So wherever your other options produce a warning, -Werror turns it into an error
2013-09-11 04:58:11	chrisdotcode	sclv: well, why not
2013-09-11 04:58:12	chrisdotcode	?
2013-09-11 04:58:23	sclv	because not every warning is something you may care about
2013-09-11 04:58:45	-->	amathew (~Adium@184.152.8.103) has joined #haskell
2013-09-11 04:58:53	chrisdotcode	sclv: well for the sake of pendantic-ness, I was just curious...
2013-09-11 04:58:56	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-11 04:59:05	sclv	its hard to selectively disable warnings unfortunately
2013-09-11 04:59:25	tikhon	sclv: hard or just tedious?
2013-09-11 04:59:30	sclv	that would be a nice feature to add -- pragmas to selectively turn off warnings where e.g. you know the pattern match is complete but ghc can't see through the gadt
2013-09-11 04:59:35	sclv	tikhon: afaik, hard
2013-09-11 04:59:45	sclv	you can disable warnings with flags
2013-09-11 04:59:47	tikhon	do you mean disabling a particular warning just for one expression?
2013-09-11 04:59:50	sclv	but not like "for this function ony"
2013-09-11 04:59:55	tikhon	ah
2013-09-11 05:00:02	tikhon	yeah, I'm not sure if that's possible
2013-09-11 05:00:26	tikhon	if it isn't, we should be embarassed—even Java has that :P
2013-09-11 05:00:27	<--	amathew (~Adium@184.152.8.103) has left #haskell
2013-09-11 05:00:39	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-11 05:00:41	sclv	its hard even to say -Wall except for this one file where yes please don't warn orphan instances or etc.
2013-09-11 05:00:59	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-11 05:01:00	tikhon	eh, that's not too bad
2013-09-11 05:01:09	tikhon	you just have to have the right magical incantation
2013-09-11 05:01:40	tikhon	but yeah, there are some warnings you really don't want to live without
2013-09-11 05:01:41	sclv	in my experience putting the nowarns in the GHC pragma at the top of the file didn't work
2013-09-11 05:02:00	sclv	like the cmd line/cabal -Wall overrode them
2013-09-11 05:02:00	tikhon	really? that's always worked for me, but I haven't used it too much
2013-09-11 05:02:01	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-11 05:02:16	tikhon	I usually either turn a warning off everywhere or fix it everywhere
2013-09-11 05:02:42	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:02:47	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-11 05:02:51	<--	vpetro (~textual@137.122.200.65) has quit
2013-09-11 05:03:17	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-11 05:03:23	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 05:03:58	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-09-11 05:04:32	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 05:04:42	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-11 05:04:49	-->	[1]tufflax (~tufflax@80.217.106.199) has joined #haskell
2013-09-11 05:05:05	-->	nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-11 05:05:38	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Client Quit)
2013-09-11 05:05:51	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 05:06:03	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-09-11 05:06:18	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Client Quit)
2013-09-11 05:07:04	-->	generic (~generic@p57B2CE2A.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 05:07:42	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-11 05:07:56	-->	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-09-11 05:08:05	-->	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-11 05:08:07	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 05:08:48	-->	Pip (~Pip__@unaffiliated/pip) has joined #haskell
2013-09-11 05:08:52	<--	codesoup (~codesoup@76-10-180-23.dsl.teksavvy.com) has quit (Ping timeout: 276 seconds)
2013-09-11 05:09:38	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-11 05:09:45	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-11 05:10:01	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-11 05:10:15	<--	shanse (~generic@p57B2CD23.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-11 05:10:15	--	generic is now known as shanse
2013-09-11 05:10:20	-->	james111111 (~james1111@173-23-175-149.client.mchsi.com) has joined #haskell
2013-09-11 05:10:39	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Changing host)
2013-09-11 05:10:39	-->	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has joined #haskell
2013-09-11 05:12:00	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-11 05:12:14	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-09-11 05:12:48	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-11 05:13:07	-->	mauke_ (~mauke@p3m/member/mauke) has joined #haskell
2013-09-11 05:13:08	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-09-11 05:13:15	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-11 05:13:48	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 05:13:50	-->	Tailor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 05:14:09	-->	andares_ (~andares@unaffiliated/jacco) has joined #haskell
2013-09-11 05:14:12	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-09-11 05:14:19	<--	andares (~andares@unaffiliated/jacco) has quit (Read error: No route to host)
2013-09-11 05:14:24	<--	mattp_ (~mattp_@intma.in) has quit (Ping timeout: 240 seconds)
2013-09-11 05:15:33	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 245 seconds)
2013-09-11 05:15:36	-->	codesoup (~codesoup@76-10-150-185.dsl.teksavvy.com) has joined #haskell
2013-09-11 05:15:44	--	preflex_ is now known as preflex
2013-09-11 05:15:49	<--	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has quit (Ping timeout: 240 seconds)
2013-09-11 05:17:09	sellout-	Well, that was easy enough – in .ghci added :defs for lalex and lhappy (which run the appropriate command, then :loads the result), then modified haskell-ghci.el to use :lalex or :lhappy instead of :load when C-c C-l is run from the appropriate type of file.
2013-09-11 05:17:39	sellout-	But has this really not been done before? Do people just eschew the lex/yacc style stuff? (understandable, if so)
2013-09-11 05:17:46	--	mauke_ is now known as mauke
2013-09-11 05:17:56	-->	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has joined #haskell
2013-09-11 05:18:28	tikhon	I think it's much less popular than parser combinators
2013-09-11 05:18:30	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 248 seconds)
2013-09-11 05:18:41	johnw	it has its niche
2013-09-11 05:19:02	<--	xl1 (~xl@221.218.220.127) has quit (Ping timeout: 248 seconds)
2013-09-11 05:19:12	-->	miclorb (~textual@123.208.41.251) has joined #haskell
2013-09-11 05:19:22	<--	tabemann (~travisb@adsl-76-229-158-129.dsl.milwwi.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-09-11 05:19:51	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has left #haskell ("Leaving")
2013-09-11 05:20:04	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 256 seconds)
2013-09-11 05:20:20	tikhon	hmm, does it?
2013-09-11 05:20:48	elliott	ghc uses it
2013-09-11 05:20:54	johnw	if you know the entire grammar in advance and it can be expressed in LL(1) or LALR(1), then I think happy may be a better choice
2013-09-11 05:21:13	tikhon	yeah, but does it have to be an external tool like that?
2013-09-11 05:21:24	tikhon	I mean, couldn't you implement something like that as a normal Haskell library?
2013-09-11 05:21:27	johnw	yes, you don't want to pay the cost of generating the tables at runtime
2013-09-11 05:21:30	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Ping timeout: 240 seconds)
2013-09-11 05:21:31	-->	path[l]_ (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-11 05:21:42	<--	Pip (~Pip__@unaffiliated/pip) has quit (Ping timeout: 248 seconds)
2013-09-11 05:22:28	<--	Targen (~iguana@186.95.107.210) has quit (Ping timeout: 260 seconds)
2013-09-11 05:22:39	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-11 05:24:30	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:24:34	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 05:25:09	<--	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has quit (Quit: This computer has gone to sleep)
2013-09-11 05:25:30	<--	lemao (~lemao@189.60.37.42) has quit (Remote host closed the connection)
2013-09-11 05:25:55	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-09-11 05:26:14	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-11 05:28:48	levi	You could do a happy-style parser inline via Template Haskell or a HSX-style preprocessor.
2013-09-11 05:29:30	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-11 05:30:48	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-11 05:31:02	<--	lusory (~lusory@42.60.25.228) has quit (Read error: Connection reset by peer)
2013-09-11 05:31:04	<--	talzeus_ (~studybot_@101.110.31.120) has quit (Ping timeout: 264 seconds)
2013-09-11 05:31:08	-->	talzeus__ (~studybot_@101.110.31.120) has joined #haskell
2013-09-11 05:32:32	-->	user (~user@24-212-249-26.cable.teksavvy.com) has joined #haskell
2013-09-11 05:32:48	-->	tabemann (~travisb@adsl-76-199-151-40.dsl.milwwi.sbcglobal.net) has joined #haskell
2013-09-11 05:33:17	<--	saep1 (~saep@p5B2A13ED.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-11 05:33:19	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:33:34	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-11 05:34:17	<--	path[l]_ (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l]_)
2013-09-11 05:35:55	<--	tjohnson (~tjohnson@199.223.122.26) has quit (Ping timeout: 264 seconds)
2013-09-11 05:36:52	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Quit: Ex-Chat)
2013-09-11 05:37:20	<--	seanlerner (~seanlerne@24-104-79-38-ip-static.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-11 05:37:54	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-11 05:38:10	-->	arenz (arenz@nat/ibm/x-sxsofflsslobebfy) has joined #haskell
2013-09-11 05:38:16	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-11 05:38:22	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:38:46	<--	thalassarche (~thalassar@unaffiliated/thalassarche) has quit (Ping timeout: 256 seconds)
2013-09-11 05:38:57	-->	seanlern_ (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 05:39:58	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-11 05:40:17	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-11 05:42:22	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:43:29	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 05:43:44	-->	Kevin_ (~Kevin@209.65.15.42) has joined #haskell
2013-09-11 05:43:47	-->	finishingmove (~finishing@178-221-168-154.dynamic.isp.telekom.rs) has joined #haskell
2013-09-11 05:44:50	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Ping timeout: 246 seconds)
2013-09-11 05:45:34	<--	finishingmove (~finishing@178-221-168-154.dynamic.isp.telekom.rs) has quit (Client Quit)
2013-09-11 05:45:51	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-09-11 05:46:11	<--	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has quit (Quit: Leaving)
2013-09-11 05:46:36	-->	saep1 (~saep@p5B2A09E9.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 05:46:43	<--	Kevin__ (~Kevin@209.65.15.42) has quit (Ping timeout: 256 seconds)
2013-09-11 05:48:33	<--	seanlern_ (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-11 05:48:37	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-11 05:49:24	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-11 05:50:16	-->	finishingmove (~finishing@178-221-168-154.dynamic.isp.telekom.rs) has joined #haskell
2013-09-11 05:50:36	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-11 05:52:14	--	hdevalence is now known as hdevalence|away
2013-09-11 05:54:21	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 276 seconds)
2013-09-11 05:54:50	<--	peterbb (~peterbb@1x-193-157-252-191.uio.no) has quit (Ping timeout: 240 seconds)
2013-09-11 05:55:20	-->	xl1 (~xl@123.113.145.194) has joined #haskell
2013-09-11 05:55:35	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-11 05:55:38	-->	Philonous__ (~Philonous@dslb-178-005-045-113.pools.arcor-ip.net) has joined #haskell
2013-09-11 05:56:12	<--	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has quit (Quit: mrotondo)
2013-09-11 05:56:55	carter	tikhon yo!
2013-09-11 05:56:58	carter	hows the west?
2013-09-11 05:57:42	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Remote host closed the connection)
2013-09-11 05:57:46	<--	johntromp (~johntromp@ool-18be0ed6.dyn.optonline.net) has quit (Remote host closed the connection)
2013-09-11 05:57:47	shachaf	tikhon is back?
2013-09-11 05:58:43	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Ping timeout: 264 seconds)
2013-09-11 05:58:49	tikhon	yeah, I'm back in the bay area
2013-09-11 05:58:50	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 05:59:03	<--	fridim_ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has quit (Ping timeout: 264 seconds)
2013-09-11 05:59:06	tikhon	it's nice, as ever
2013-09-11 05:59:11	-->	zhanrnl (~lennart@c-76-21-115-135.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 05:59:12	<--	Philonous_ (~Philonous@dslb-178-005-035-209.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-09-11 05:59:15	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Remote host closed the connection)
2013-09-11 05:59:33	-->	otto_s (~user@cotb-4db353a0.pool.mediaWays.net) has joined #haskell
2013-09-11 06:00:59	<--	user (~user@24-212-249-26.cable.teksavvy.com) has quit (Quit: This computer has gone to sleep)
2013-09-11 06:01:23	-->	acharles_ (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 06:01:26	<--	Tailor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 256 seconds)
2013-09-11 06:01:27	<--	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 06:01:28	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-11 06:02:59	 *	hackagebot yjftp-libs 0.0.2 - CUI FTP client like 'ftp', 'ncftp'  http://hackage.haskell.org/package/yjftp-libs-0.0.2 (YoshikuniJujo)
2013-09-11 06:03:08	<--	otto_s_ (~user@cotb-4db34930.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-09-11 06:04:51	<--	SrPx_ (b16263d8@gateway/web/freenode/ip.177.98.99.216) has left #haskell
2013-09-11 06:06:06	<--	talzeus__ (~studybot_@101.110.31.120) has quit (Ping timeout: 264 seconds)
2013-09-11 06:06:45	-->	Targen (~iguana@190.73.206.135) has joined #haskell
2013-09-11 06:07:44	<--	mbuf (~user@49.248.85.191) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 06:07:52	<--	miclorb (~textual@123.208.41.251) has quit
2013-09-11 06:10:36	-->	scripty (~scripty@117.192.175.240) has joined #haskell
2013-09-11 06:11:26	<--	chatsiri_ (~chatsiri_@158.108.238.76) has quit (Ping timeout: 246 seconds)
2013-09-11 06:12:35	-->	sjindel (~sjindel@INDIUM.CLUB.CC.CMU.EDU) has joined #haskell
2013-09-11 06:13:21	carter	anyone know a good Hlist reverse that uses type familes ?
2013-09-11 06:14:03	carter	oh
2013-09-11 06:14:05	carter	i think i got it
2013-09-11 06:14:42	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-11 06:14:43	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-11 06:15:24	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-11 06:17:13	-->	xl2 (~xl@123.113.145.194) has joined #haskell
2013-09-11 06:17:15	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-11 06:18:23	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-11 06:18:26	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Ping timeout: 256 seconds)
2013-09-11 06:18:47	-->	shesek (~shesek@77.125.107.41) has joined #haskell
2013-09-11 06:19:15	<--	xl1 (~xl@123.113.145.194) has quit (Ping timeout: 260 seconds)
2013-09-11 06:19:36	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-11 06:21:25	-->	xl1 (~xl@221.219.150.204) has joined #haskell
2013-09-11 06:21:38	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 06:21:40	<--	xl2 (~xl@123.113.145.194) has quit (Ping timeout: 245 seconds)
2013-09-11 06:23:00	 *	hackagebot xturtle 0.1.12 - turtle like LOGO  http://hackage.haskell.org/package/xturtle-0.1.12 (YoshikuniJujo)
2013-09-11 06:23:25	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-09-11 06:23:27	<--	yacks (~py@103.6.159.103) has quit (Quit: Leaving)
2013-09-11 06:24:23	-->	chatsiri_ (~chatsiri_@158.108.180.98) has joined #haskell
2013-09-11 06:26:19	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-09-11 06:26:52	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-11 06:27:03	<--	dennylin93 (~dennylin9@cnmc.tw) has quit (Remote host closed the connection)
2013-09-11 06:28:43	-->	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has joined #haskell
2013-09-11 06:29:05	-->	fayden (~fayden@QUBCPQ0940W-LP140-03-845445005.dsl.bell.ca) has joined #haskell
2013-09-11 06:30:06	-->	slack1256 (~slack@181-160-191-17.baf.movistar.cl) has joined #haskell
2013-09-11 06:32:09	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-11 06:32:19	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-09-11 06:36:02	<--	PhineasRex (~chris@c-24-60-137-35.hsd1.nh.comcast.net) has left #haskell
2013-09-11 06:37:26	-->	litherum (~Adium@204.28.120.225) has joined #haskell
2013-09-11 06:37:29	<--	Draconx|Laptop (~nbowler@fsf/member/Draconx) has quit (Quit: Leaving)
2013-09-11 06:38:02	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-11 06:38:04	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 06:38:25	<--	james111111 (~james1111@173-23-175-149.client.mchsi.com) has quit (Quit: james111111)
2013-09-11 06:38:29	-->	acharles (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 06:38:36	-->	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has joined #haskell
2013-09-11 06:38:44	-->	miclorb (~textual@1.145.254.169) has joined #haskell
2013-09-11 06:39:12	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 06:39:56	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-11 06:40:07	<--	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-09-11 06:40:30	<--	acharles_ (~acharles@c-76-102-1-50.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 06:40:37	<--	mmhelloworld (~marimuthu@pool-108-53-115-24.nwrknj.fios.verizon.net) has quit (Quit: mmhelloworld)
2013-09-11 06:41:39	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 06:41:40	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-09-11 06:42:12	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-09-11 06:42:25	-->	Krakarn (Krakarn@62.80.204.136) has joined #haskell
2013-09-11 06:42:43	<--	rickyrickyrice (~rickyrick@c-50-161-100-151.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 06:42:48	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 06:42:55	<--	xl1 (~xl@221.219.150.204) has quit (Ping timeout: 245 seconds)
2013-09-11 06:43:35	-->	xl1 (~xl@114.254.147.196) has joined #haskell
2013-09-11 06:43:49	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 06:44:02	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-11 06:44:37	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Quit: message144)
2013-09-11 06:45:44	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-09-11 06:45:44	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Read error: Operation timed out)
2013-09-11 06:47:10	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-11 06:47:36	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-11 06:48:42	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-09-11 06:49:02	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 256 seconds)
2013-09-11 06:49:20	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-11 06:50:48	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-11 06:51:33	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 06:51:50	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-11 06:51:53	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-11 06:51:58	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 06:52:42	<--	Zamarok_ (~Zamarok@zfogg.student.umd.edu) has quit (Quit: WeeChat 0.4.1)
2013-09-11 06:53:02	-->	csakatok_ (~csakatoku@em117-55-68-11.emobile.ad.jp) has joined #haskell
2013-09-11 06:54:40	--	hdevalence|away is now known as hdevalence
2013-09-11 06:56:03	<--	csakatoku (~csakatoku@em117-55-68-166.emobile.ad.jp) has quit (Ping timeout: 264 seconds)
2013-09-11 06:57:10	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-11 06:57:41	-->	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has joined #haskell
2013-09-11 06:58:08	-->	litherum1 (~Adium@204.28.120.240) has joined #haskell
2013-09-11 06:59:23	<--	litherum (~Adium@204.28.120.225) has quit (Ping timeout: 246 seconds)
2013-09-11 06:59:40	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-11 06:59:44	-->	elgot (~elgot@c-bdcce455.017-362-6c6b701.cust.bredbandsbolaget.se) has joined #haskell
2013-09-11 06:59:48	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 07:00:28	<--	mak` (~mak@lokalhost.pl) has quit (Ping timeout: 264 seconds)
2013-09-11 07:00:29	<--	pavonia (~user@p4FEEE561.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-09-11 07:00:51	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-11 07:01:04	<--	chatsiri_ (~chatsiri_@158.108.180.98) has quit (Quit: leaving)
2013-09-11 07:01:05	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-11 07:01:24	<--	mno2 (~mno2@wlan30.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-11 07:01:41	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-11 07:02:27	-->	mmhelloworld (~marimuthu@pool-98-109-33-92.nwrknj.east.verizon.net) has joined #haskell
2013-09-11 07:02:56	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 07:03:00	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 07:04:37	<--	Betal (~Betal@unaffiliated/betal) has quit (Disconnected by services)
2013-09-11 07:05:12	-->	ulfdoz (~mary@193.90.235.206) has joined #haskell
2013-09-11 07:06:00	-->	adu (~alt@pool-173-66-15-105.washdc.fios.verizon.net) has joined #haskell
2013-09-11 07:06:03	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-11 07:06:17	<--	oleo (~oleo@xdsl-78-35-156-100.netcologne.de) has quit (Quit: Leaving)
2013-09-11 07:07:12	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-11 07:07:26	MedDev	Besides sequence is there any way I can append to the right hand side of a Vector/List-esque object in O(1) time vs O(n) time?
2013-09-11 07:08:06	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-11 07:08:28	tikhon	have you looked at difference lists?
2013-09-11 07:08:35	MedDev	i will now :)
2013-09-11 07:09:29	adu	hi all
2013-09-11 07:09:30	-->	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 07:09:37	shachaf	So you can make a "difference category" with e.g. (k a b) <=> (forall r. k b r -> k a r)
2013-09-11 07:09:51	shachaf	(You can also use forall r. k r a -> k r b, I guess...)
2013-09-11 07:09:56	-->	Bluuu (a@unaffiliated/bluuu) has joined #haskell
2013-09-11 07:09:57	 *	MedDev hears a loud wooshing noise as that concept goes over his head
2013-09-11 07:10:12	shachaf	In what cases are the types actuall equal, rather than "too big" like you get with a "difference monoid"?
2013-09-11 07:10:16	<--	adu (~alt@pool-173-66-15-105.washdc.fios.verizon.net) has quit (Client Quit)
2013-09-11 07:10:22	shachaf	y
2013-09-11 07:10:36	-->	adu (~alt@pool-173-66-15-105.washdc.fios.verizon.net) has joined #haskell
2013-09-11 07:11:36	MedDev	still new to such concepts as categories
2013-09-11 07:11:37	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-11 07:12:34	latro`a_	difference lists are quite nice
2013-09-11 07:13:18	<--	james-ubc (~james@dhcp-128-189-78-37.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-11 07:13:27	dmj`	MedDev: a category is just a collection of objects and morphisms that can compose.
2013-09-11 07:13:30	shachaf	Difference lists are too big. :-(
2013-09-11 07:13:47	shachaf	But Church (/Boehm-Berarducci lists) are just right.
2013-09-11 07:13:57	shachaf	s/ lists\)/) lists/
2013-09-11 07:14:08	latro`a_	it's a very simple idea: (x:) is a list function, and you can pre- or post-compose it with other list functions. [x,y,z] is then isomorphic to (x:) . (y:) . (z:), where the isomorphism is given by ($ [])
2013-09-11 07:14:38	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-11 07:16:00	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-11 07:16:16	shachaf	A Haskell "difference list" is a list that abstracts [] (the end of the list) by taking it as an argument.
2013-09-11 07:16:24	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-11 07:16:36	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-09-11 07:16:41	MedDev	hmm ok, that doesn't sound all that scary.
2013-09-11 07:16:59	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-09-11 07:17:05	latro`a_	it's actually not; the main thing is that you actually construct the "list" (i.e. the object of type [a]) all at once
2013-09-11 07:17:12	shachaf	For example, the list (1:2:3:[]) becomes the function (\end -> 1:2:3:end)
2013-09-11 07:17:13	<--	andares_ (~andares@unaffiliated/jacco) has quit (Read error: Connection reset by peer)
2013-09-11 07:17:13	-->	andares__ (~andares@AR1.Hawthorne.reallyfast.net) has joined #haskell
2013-09-11 07:17:14	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-11 07:17:22	<--	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2013-09-11 07:17:40	-->	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-09-11 07:17:55	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 245 seconds)
2013-09-11 07:18:09	<--	miclorb (~textual@1.145.254.169) has quit
2013-09-11 07:18:17	shachaf	There are advantages and disadvantages. This is definitely not a panacea, so you should understand the disadvantages before you use it everywhere.
2013-09-11 07:18:42	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Quit: dpathakj)
2013-09-11 07:18:43	latro`a_	one application I used this for was adaptive integration
2013-09-11 07:19:11	latro`a_	where it is convenient to have the list of the nodes that get used be in order
2013-09-11 07:19:19	-->	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 07:19:30	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 07:19:34	latro`a_	but they are never generated in order
2013-09-11 07:19:38	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 256 seconds)
2013-09-11 07:22:41	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Quit: Computer has gone to sleep.)
2013-09-11 07:22:55	latro`a_	http://lpaste.net/92842 if you're interested, MedDev
2013-09-11 07:23:09	latro`a_	ah, I missed a couple type synonyms
2013-09-11 07:23:21	MedDev	hmmm, if I'm not concatenating a lot, and always reading the data in a left to right (0..length-1) fashion Sequence should be fine? or do I have to worry about memory? I have a type of Seq (Seq Double) (something like 32-64k sub sequences with 32 doubles each) just wondering if this is an 'insane' thing to do?
2013-09-11 07:23:34	latro`a_	fixed
2013-09-11 07:23:53	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-11 07:24:03	johnw	shachaf: what name would you give to (\(cons, end) -> 1 `cons` 2 `cons` 3 `cons` end)?
2013-09-11 07:24:21	latro`a_	the main logic here is in adaptive'
2013-09-11 07:24:30	shachaf	johnw: That's the aforementioned Church (/Boehm-Berarducci, whatever) encoding of a list.
2013-09-11 07:24:31	<--	perlite (~perlite@1-164-208-45.dynamic.hinet.net) has quit (Remote host closed the connection)
2013-09-11 07:24:36	shachaf	(Except without the tuple.)
2013-09-11 07:24:52	shachaf	newtype List a = List { forall r. (a -> r -> r) -> r -> r }
2013-09-11 07:24:57	-->	perlite (~perlite@1-164-208-45.dynamic.hinet.net) has joined #haskell
2013-09-11 07:24:57	johnw	I've also heard it called a "fold function"
2013-09-11 07:24:58	shachaf	The two arguments are cons and end.
2013-09-11 07:25:07	shachaf	It's also a fold, sure.
2013-09-11 07:25:18	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (Quit: out)
2013-09-11 07:25:35	johnw	forall r. (a -> r -> r) -> r -> r -- what is the relationship there to Yoneda?
2013-09-11 07:25:40	shachaf	It's Mu of (Foo b = Maybe (a,b))
2013-09-11 07:25:50	shachaf	(Mu of Foo, that is.)
2013-09-11 07:25:52	johnw	sure, that makes sense
2013-09-11 07:25:55	shachaf	Which relationship are you thinking of?
2013-09-11 07:26:05	johnw	i don't have a particular relationship in mind
2013-09-11 07:26:18	latro`a_	any interest in that link, MedDev? if not I'll head off to bed
2013-09-11 07:26:19	johnw	this is an area I've been pondering lately, so I wondered what your thoughts were
2013-09-11 07:26:41	<--	mp (maciej@hell.cx) has quit (Ping timeout: 246 seconds)
2013-09-11 07:26:47	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Quit: Shaladdle)
2013-09-11 07:26:49	-->	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has joined #haskell
2013-09-11 07:26:52	shachaf	It's Codensity Endo but I don't know if that's significant in any way.
2013-09-11 07:26:59	shachaf	(And also not really related to what you asked.)
2013-09-11 07:27:07	<--	ehamberg (~erlend@hamberg.no) has quit (Ping timeout: 245 seconds)
2013-09-11 07:27:07	<--	pootler (mervyn@smlh.x.rootbsd.net) has quit (Ping timeout: 245 seconds)
2013-09-11 07:27:09	johnw	it's something else to think about, thanks
2013-09-11 07:27:18	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-11 07:27:19	MedDev	latro`a_, don't wanna keep you up :) I will keep investigating. I think sequence is what I want, but I will try playing with diff lists.
2013-09-11 07:27:21	shachaf	What sort of thing are you thinking of?
2013-09-11 07:27:27	<--	mmhelloworld (~marimuthu@pool-98-109-33-92.nwrknj.east.verizon.net) has quit (Quit: mmhelloworld)
2013-09-11 07:27:29	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-11 07:27:39	latro`a_	nah, if you have any quick questions about it or something I can answer them
2013-09-11 07:27:47	<--	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has quit (Quit: ihm1)
2013-09-11 07:27:47	-->	pootler (mervyn@smlh.x.rootbsd.net) has joined #haskell
2013-09-11 07:27:49	johnw	wondering how these church encoded lists relate to morphisms in the category of list algebras
2013-09-11 07:27:50	latro`a_	I don't have to be up or anything
2013-09-11 07:27:57	latro`a_	would rather put off sleeping tbh :)
2013-09-11 07:28:01	-->	ehamberg (~erlend@hamberg.no) has joined #haskell
2013-09-11 07:28:12	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-11 07:28:15	MedDev	I feel you :) always battle with that feeling of "just twenty more minutes then bed"
2013-09-11 07:28:51	latro`a_	the part that makes this clever is the "nodesa . nodesb" part
2013-09-11 07:28:51	enthropy	latro`a_: maybe it's better to actually build up some data that holds the function values / current estimates
2013-09-11 07:29:08	enthropy	(on the topic of integration, not difference lists)
2013-09-11 07:29:09	latro`a_	maybe; this was not meant to be optimal
2013-09-11 07:29:24	shachaf	johnw: Which category is that again?
2013-09-11 07:29:27	latro`a_	I thought it was kinda elegant, though
2013-09-11 07:30:06	<--	ivoscc (~ivo@190.232.74.75) has quit (Ping timeout: 264 seconds)
2013-09-11 07:30:07	johnw	shachaf: a sub-category of the category of F-Algebras?  i may not know what I'm talking about
2013-09-11 07:30:44	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-11 07:30:49	-->	nilg (~user@ALagny-551-1-247-53.w83-114.abo.wanadoo.fr) has joined #haskell
2013-09-11 07:30:49	latro`a_	this particular adaptive integration method is rather simple
2013-09-11 07:30:52	shachaf	Now I'm a bit more confused.
2013-09-11 07:30:58	johnw	ok, never mind for now
2013-09-11 07:31:00	shachaf	What are the objects and what are the arrows?
2013-09-11 07:31:12	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-09-11 07:31:27	johnw	oh, right, this church encoded object wouldn't be in that category, only the algebras are there
2013-09-11 07:31:46	enthropy	latro`a_: when you explain the algorithm to people, you might draw a tree I think
2013-09-11 07:31:59	latro`a_	that's true
2013-09-11 07:32:02	johnw	(where by object I meant value)
2013-09-11 07:32:17	latro`a_	but you don't really need the tree
2013-09-11 07:32:29	enthropy	maybe there's no cost for it?
2013-09-11 07:32:33	 *	enthropy dunnos
2013-09-11 07:32:39	latro`a_	there's cost to retaining that data
2013-09-11 07:32:47	shachaf	I think I'm missing some context here. :-) What are the objects involved here?
2013-09-11 07:32:51	latro`a_	this never holds on to a value of f
2013-09-11 07:33:00	shachaf	(This whole area is one that I'd like to understand better.)
2013-09-11 07:33:16	johnw	shachaf: let me finish my phone meeting and then I'll be ready to dig in
2013-09-11 07:33:50	latro`a_	but yes, I could see some potential optimization or such that might be doable with the tree at hand
2013-09-11 07:33:59	latro`a_	at the very least it would generalize better
2013-09-11 07:34:01	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 07:34:11	latro`a_	it'd deal with overlapping nodes between subintervals as well
2013-09-11 07:34:21	latro`a_	(which was a minor problem with my adaptive Simpson version)
2013-09-11 07:34:27	<--	scripty (~scripty@117.192.175.240) has quit (Ping timeout: 276 seconds)
2013-09-11 07:34:49	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-11 07:35:13	-->	arash_ (~arash@c-453571d5.08-80-73746f22.cust.bredbandsbolaget.se) has joined #haskell
2013-09-11 07:35:19	<--	ulfdoz (~mary@193.90.235.206) has quit (Ping timeout: 260 seconds)
2013-09-11 07:35:35	-->	ranjan (~ranjan@122.175.11.56) has joined #haskell
2013-09-11 07:35:50	<--	ranjan (~ranjan@122.175.11.56) has quit (Client Quit)
2013-09-11 07:35:52	<--	b_ (~b@185.6.205.4) has quit (Quit: Lost terminal)
2013-09-11 07:36:17	-->	ranjan (~ranjan@122.175.11.56) has joined #haskell
2013-09-11 07:36:22	<--	ranjan (~ranjan@122.175.11.56) has quit (Client Quit)
2013-09-11 07:37:45	-->	Guest45690 (~ranjan@122.175.11.56) has joined #haskell
2013-09-11 07:37:47	<--	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has quit (Ping timeout: 256 seconds)
2013-09-11 07:37:59	-->	shintah (bebble@h-218-178.a336.priv.bahnhof.se) has joined #haskell
2013-09-11 07:38:24	<--	Guest45690 (~ranjan@122.175.11.56) has quit (Client Quit)
2013-09-11 07:38:45	-->	ranjan_ (~ranjan@122.175.11.56) has joined #haskell
2013-09-11 07:39:49	-->	mp (maciej@hell.cx) has joined #haskell
2013-09-11 07:39:53	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-11 07:40:01	-->	b0oh (~Adium@93.185.184.116) has joined #haskell
2013-09-11 07:40:34	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-11 07:40:36	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-09-11 07:40:38	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: sleep)
2013-09-11 07:41:05	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Client Quit)
2013-09-11 07:41:29	<--	ranjan_ (~ranjan@122.175.11.56) has quit (Client Quit)
2013-09-11 07:41:50	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-11 07:41:53	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-11 07:43:11	-->	jkoshy (jkoshy@nat/google/x-aitxjnspvnkbgdrf) has joined #haskell
2013-09-11 07:43:41	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-09-11 07:44:29	-->	ananthakumaran (~Adium@122.166.180.215) has joined #haskell
2013-09-11 07:46:16	-->	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 07:46:46	<--	meiji11 (~user@75.158.41.148) has quit (Ping timeout: 248 seconds)
2013-09-11 07:46:53	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 07:46:56	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-11 07:47:32	<--	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has quit
2013-09-11 07:47:32	<--	arash_ (~arash@c-453571d5.08-80-73746f22.cust.bredbandsbolaget.se) has quit (Read error: Operation timed out)
2013-09-11 07:47:45	-->	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has joined #haskell
2013-09-11 07:48:13	johnw	shachaf: ok, I have a half hour now
2013-09-11 07:48:27	johnw	shachaf: I assume you are pretty well-versed in F-algebras?
2013-09-11 07:50:08	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 07:51:21	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 276 seconds)
2013-09-11 07:51:27	arkeet	shachaf eats F-algebras for breakfast.
2013-09-11 07:51:31	arkeet	I assume he eats breakfast.
2013-09-11 07:51:40	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 245 seconds)
2013-09-11 07:51:42	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Quit: WeeChat 0.3.7)
2013-09-11 07:52:06	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 07:52:28	shachaf	Am I? I don't know.
2013-09-11 07:52:35	johnw	i can't even imagine you not being so
2013-09-11 07:53:17	johnw	what I'm trying to figure out is that a church-encoding for a list is like a "proto-value", to which you can apply any list-algebra
2013-09-11 07:53:38	shachaf	By list-algebra you mean a function of type [A] -> A for some type A?
2013-09-11 07:53:52	johnw	yes
2013-09-11 07:53:59	shachaf	OK.
2013-09-11 07:54:14	shachaf	I'm not sure what the rest means.
2013-09-11 07:54:29	shachaf	Oh, I see.
2013-09-11 07:54:40	johnw	so, where coyoneda abstracts over the arguments to fmap, the fold function for a list seems to abstract over the arguments for any list-algebra, albeit recursively applied
2013-09-11 07:54:41	shachaf	Do I?
2013-09-11 07:54:44	johnw	haha
2013-09-11 07:55:02	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 246 seconds)
2013-09-11 07:55:12	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-11 07:55:42	shachaf	Let's give a name to Foo a b = Maybe (a,b).
2013-09-11 07:55:48	shachaf	Call it Foo.
2013-09-11 07:55:53	johnw	k
2013-09-11 07:56:43	shachaf	Foo is related to [], because Foo a [a] is isomorphic to a.
2013-09-11 07:56:54	<--	dimday (~amcvega@23.29.114.154) has quit (Ping timeout: 240 seconds)
2013-09-11 07:56:58	johnw	you mean, to [a]?
2013-09-11 07:56:59	shachaf	But you already know that. I'm not sure what you're getting at with []-algebras, though.
2013-09-11 07:57:04	shachaf	Yes, to [a]
2013-09-11 07:57:39	johnw	take my function \c z -> 1 `c` 2 `c` 3 `c` z
2013-09-11 07:57:57	arkeet	:t \c z -> 1 `c` 2 `c` 3 `c` z
2013-09-11 07:57:58	lambdabot	(Num a, Num a1) => (a -> a1 -> a) -> a1 -> a
2013-09-11 07:57:58	shachaf	OK. That function is :: Mu (Foo a)
2013-09-11 07:58:05	johnw	if I somehow apply the initial []-algebra to this function, I get a list
2013-09-11 07:58:07	shachaf	Or a type isomorphic to it.
2013-09-11 07:58:16	johnw	but I can't just "apply the initial []-
2013-09-11 07:58:22	johnw	algebra", because it is itself a function
2013-09-11 07:58:32	shachaf	Wait, where did []-algebras get into it?
2013-09-11 07:58:42	arkeet	are you talking about Foo-algebras or []-algebras?
2013-09-11 07:58:45	shachaf	We have (Foo a)-algebras.
2013-09-11 07:58:48	<--	AlecTaylor (~alec.tayl@unaffiliated/alectaylor) has quit (Ping timeout: 252 seconds)
2013-09-11 07:58:48	arkeet	where [] = Mu Foo
2013-09-11 07:58:51	johnw	oh, I'm still thinking about lists
2013-09-11 07:58:51	arkeet	er,
2013-09-11 07:58:56	arkeet	yeah Foo a.
2013-09-11 07:59:01	johnw	let me adjust to Foos
2013-09-11 07:59:26	johnw	let me take a step back
2013-09-11 08:00:02	shachaf	It might be simpler if you use Maybe instead.
2013-09-11 08:00:08	shachaf	Maybe is nice and simple.
2013-09-11 08:00:11	johnw	good idea
2013-09-11 08:00:32	shachaf	data Nat = Z | S Nat
2013-09-11 08:00:45	johnw	then my abstracted value is \f -> f 1, where f can be Just or () -> Nothing
2013-09-11 08:00:56	shachaf	We know that Maybe Nat is isomorphic to Nat.
2013-09-11 08:00:57	shachaf	?
2013-09-11 08:00:58	johnw	sorry, forall a. a -> Nothing
2013-09-11 08:01:02	johnw	const Nothing
2013-09-11 08:01:06	shachaf	?
2013-09-11 08:01:07	<--	tabemann (~travisb@adsl-76-199-151-40.dsl.milwwi.sbcglobal.net) has quit (Quit: Leaving)
2013-09-11 08:01:12	shachaf	I'm confused.
2013-09-11 08:01:18	johnw	you know what, I think I'm making no sense at all and now may not be a good time for me to attempt this
2013-09-11 08:01:38	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-11 08:01:50	johnw	I know that I can encode a "proto value" for Maybe as a church encoding
2013-09-11 08:01:53	johnw	\f -> f 1
2013-09-11 08:01:56	shachaf	This is a useful thing to attempt, though.
2013-09-11 08:02:03	johnw	now the caller decides whether this is going to become a Just 1, or a Nothing
2013-09-11 08:02:07	shachaf	There's no "1" here.
2013-09-11 08:02:17	johnw	why not?
2013-09-11 08:02:23	shachaf	Or, hmm. We're talking about different things again.
2013-09-11 08:02:31	arkeet	what's (the type of) f?
2013-09-11 08:02:39	-->	anarcat (~anarcat@72.0.72.144) has joined #haskell
2013-09-11 08:02:41	johnw	f :: Int -> Maybe Int
2013-09-11 08:02:44	anarcat	> length $ filter (\x -> x) [ True, False ] == 1
2013-09-11 08:02:45	shachaf	I'm talking about Nat, which is the fixed point of Maybe.
2013-09-11 08:02:46	lambdabot	  Couldn't match expected type `[a0]'
2013-09-11 08:02:46	lambdabot	             with actual type `GHC.Type...
2013-09-11 08:02:56	arkeet	ok, f could do a lot of things then.
2013-09-11 08:03:06	arkeet	f :: forall a. a -> Maybe a  could not.
2013-09-11 08:03:14	arkeet	I dunno.
2013-09-11 08:03:16	arkeet	hi
2013-09-11 08:03:23	shachaf	hi arkeet
2013-09-11 08:03:26	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-11 08:03:29	johnw	well, so \f -> f 1 is my undecided Maybe value
2013-09-11 08:03:32	shachaf	Maybe we should take this to #haskell-overflow.
2013-09-11 08:03:35	johnw	ok
2013-09-11 08:04:27	anarcat	> (length $ filter (\x -> x) [ True, False ]) == 1
2013-09-11 08:04:29	lambdabot	  True
2013-09-11 08:04:52	anarcat	^^ is there a better way of doing this? i was banging my head on foldr and figured there was no other way...
2013-09-11 08:05:20	shachaf	anarcat: length (filter (\x -> x) [ True, False ]) == 1 is better.
2013-09-11 08:05:30	shachaf	Syntactically, I mean. No $
2013-09-11 08:05:39	anarcat	ah well, that's not what i meant :)
2013-09-11 08:05:45	anarcat	but okay
2013-09-11 08:05:54	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-11 08:06:01	shachaf	Of course, there are many other things that could be improved about that expression. :-) But on syntax, you're pretty stuck with $ being less sticky than ==
2013-09-11 08:06:09	shachaf	(You can change it, but don't.)
2013-09-11 08:06:13	anarcat	oh right
2013-09-11 08:06:14	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-11 08:06:21	anarcat	i was using == just to demonstrate the purpose...
2013-09-11 08:06:21	-->	akegalj (~akegalj@93-138-64-112.adsl.net.t-com.hr) has joined #haskell
2013-09-11 08:06:30	anarcat	i am more looking at improving the expression
2013-09-11 08:06:38	anarcat	that lambda seems kind of silly
2013-09-11 08:07:35	-->	joneshf-laptop (~joneshf@086.112-30-64.ftth.swbr.surewest.net) has joined #haskell
2013-09-11 08:08:08	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (Ping timeout: 260 seconds)
2013-09-11 08:08:36	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-11 08:08:39	<--	jobstijl (~job@5070A080.static.ziggozakelijk.nl) has quit (Remote host closed the connection)
2013-09-11 08:08:48	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-09-11 08:09:02	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 08:09:52	-->	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has joined #haskell
2013-09-11 08:10:10	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 08:10:29	-->	petapetapeta (~Peter@130.225.165.43) has joined #haskell
2013-09-11 08:10:33	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (Read error: Operation timed out)
2013-09-11 08:11:24	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-11 08:11:52	chexxor	How do I test two functions for equivalence? I saw someone here do it a few days ago.
2013-09-11 08:12:17	tikhon	that's not really possible in general
2013-09-11 08:12:18	arkeet	what sort of functions?
2013-09-11 08:12:20	arkeet	and that
2013-09-11 08:12:22	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-11 08:12:41	tikhon	also, do you mean test like QuickCheck or like Eq?
2013-09-11 08:12:41	shachaf	reallyUnsafePtrEquality# will not test functions for equivalence.
2013-09-11 08:12:44	shachaf	It's really unsafe.
2013-09-11 08:12:46	chexxor	I reimplemented map as a fold. I want to verify it's correct.
2013-09-11 08:12:46	 *	arkeet . o O ( (Int -> Bool) -> Bool )
2013-09-11 08:12:57	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-11 08:13:01	shachaf	arkeet: Make it Integer while you're at it!
2013-09-11 08:13:03	arkeet	chexxor: you can run it on some test inputs.
2013-09-11 08:13:06	arkeet	shachaf: oh, good point.
2013-09-11 08:13:13	-->	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has joined #haskell
2013-09-11 08:13:13	chexxor	probably quickcheck
2013-09-11 08:13:21	arkeet	sure.
2013-09-11 08:13:37	tikhon	QuickCheck just generates random inputs to test your function on
2013-09-11 08:13:38	arkeet	then you can get evidence that it's not incorrect.
2013-09-11 08:13:38	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-09-11 08:13:39	-->	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has joined #haskell
2013-09-11 08:13:51	tikhon	so it's not a 100% guarantee, but it's pretty good
2013-09-11 08:14:05	-->	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has joined #haskell
2013-09-11 08:14:13	tikhon	are you familiar with QuickCheck?
2013-09-11 08:14:23	chexxor	no
2013-09-11 08:14:26	tikhon	oh
2013-09-11 08:14:39	tikhon	the basic idea is simple—just what I said earlier
2013-09-11 08:14:44	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-09-11 08:14:50	arkeet	> check \x -> x*2 = x+x
2013-09-11 08:14:51	lambdabot	  <hint>:1:7: parse error on input `\'
2013-09-11 08:14:54	arkeet	@check \x -> x*2 = x+x
2013-09-11 08:14:54	lambdabot	 <unknown>.hs: 1: 11:Parse error: =
2013-09-11 08:14:57	arkeet	uh
2013-09-11 08:15:00	arkeet	@check \x -> x*2 == x+x
2013-09-11 08:15:02	tikhon	@check \x -> x*2 == x+x
2013-09-11 08:15:06	lambdabot	  +++ OK, passed 100 tests.
2013-09-11 08:15:11	lambdabot	  +++ OK, passed 100 tests.
2013-09-11 08:15:21	chexxor	I can use @check in my .hs file?
2013-09-11 08:15:23	tikhon	so you give QuickCheck a function which returns a boolean
2013-09-11 08:15:30	leroux	chexxor: lambdabot, I think.
2013-09-11 08:15:30	arkeet	chexxor: no, @check is a lambdabot command.
2013-09-11 08:15:32	tikhon	chexxor: no, @check is lambdabot-specific
2013-09-11 08:16:27	tikhon	the general convention is to name the tests prop_*
2013-09-11 08:16:38	tikhon	"prop" is short for property
2013-09-11 08:16:52	chexxor	ok, from ghci, I import Test.QuickCheck, then I use quickCheck function?
2013-09-11 08:16:59	tikhon	so you could have a file with a property like prop_myMap ls = myMap (+1) ls == map (+1) ls
2013-09-11 08:17:04	arkeet	e.g. you might write prop_double :: Int -> Int; prop_double x = x*2 == x+x
2013-09-11 08:17:06	arkeet	or something.
2013-09-11 08:17:18	dmj`	chexxor: http://book.realworldhaskell.org/read/testing-and-quality-assurance.html
2013-09-11 08:17:29	arkeet	hm, I think quickcheck was able to generate functions as well?
2013-09-11 08:18:04	jfischoff	coarbitrary
2013-09-11 08:18:15	<--	ystael (~ystael@209-6-92-113.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com) has quit (Ping timeout: 240 seconds)
2013-09-11 08:18:20	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Ping timeout: 245 seconds)
2013-09-11 08:18:27	-->	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has joined #haskell
2013-09-11 08:18:38	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-11 08:18:49	<--	zbcm (~zbcm@147.41.7.17) has quit (Quit: Leaving)
2013-09-11 08:19:37	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-11 08:19:39	<--	DaveS (~DaveS@unaffiliated/daves) has quit (Ping timeout: 260 seconds)
2013-09-11 08:19:41	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 08:20:40	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 08:20:43	<--	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has quit (Quit: Leaving.)
2013-09-11 08:20:47	-->	DaveS (~DaveS@unaffiliated/daves) has joined #haskell
2013-09-11 08:20:58	<--	shesek (~shesek@77.125.107.41) has quit (Read error: No route to host)
2013-09-11 08:21:17	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Ping timeout: 245 seconds)
2013-09-11 08:21:28	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-09-11 08:21:46	-->	dimday (~amcvega@49.144.140.31) has joined #haskell
2013-09-11 08:22:23	leroux	Has anyone had problem with $ cabal install http ?
2013-09-11 08:22:25	-->	miclorb (~textual@1.145.157.90) has joined #haskell
2013-09-11 08:22:32	leroux	problems*
2013-09-11 08:22:59	tikhon	what sort of problems?
2013-09-11 08:23:01	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 08:23:20	jfischoff	what version of ghc?
2013-09-11 08:23:22	leroux	Nevermind, I've found... https://github.com/haskell/cabal/issues/1137
2013-09-11 08:23:52	<--	ananthakumaran (~Adium@122.166.180.215) has quit (Read error: Connection reset by peer)
2013-09-11 08:24:29	chexxor	so there's no equivalent of @check in ghci?
2013-09-11 08:24:34	leroux	There is.
2013-09-11 08:24:36	-->	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has joined #haskell
2013-09-11 08:24:41	leroux	It just calls QuickCheck.
2013-09-11 08:24:50	leroux	chexxor: You can also install lambdabot.
2013-09-11 08:25:03	<--	anarcat (~anarcat@72.0.72.144) has left #haskell ("tx")
2013-09-11 08:25:05	-->	ananthakumaran (~Adium@122.166.180.215) has joined #haskell
2013-09-11 08:25:06	tikhon	there's just a function you can run, I believe
2013-09-11 08:25:12	chexxor	I don't want to make functions and such, I just want to say "quickCheck map == map' "
2013-09-11 08:25:22	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 08:25:35	leroux	Sure, you can do that.
2013-09-11 08:25:41	<--	JaRoel|4d (~jaroel|4d@sink.jaroel.nl) has quit (Remote host closed the connection)
2013-09-11 08:25:42	<--	petapetapeta (~Peter@130.225.165.43) has quit (Ping timeout: 248 seconds)
2013-09-11 08:25:48	arkeet	well, quickCheck $ \f x -> map f x == map' f x
2013-09-11 08:25:48	shachaf	Don't install lambdabot to run QuickCheck.
2013-09-11 08:25:52	tikhon	quickCheck $ \ ls f -> myMap f ls == map f ls
2013-09-11 08:25:54	arkeet	Don't install lambdabot.
2013-09-11 08:25:59	leroux	http://hackage.haskell.org/packages/archive/QuickCheck/2.4.2/doc/html/Test-QuickCheck.html#v:quickCheck
2013-09-11 08:26:39	tikhon	you'll have to do :m + Test.QuickCheck too
2013-09-11 08:26:44	tikhon	to import the QuickCheck module
2013-09-11 08:27:02	arkeet	you'll also have to give better type annotations.
2013-09-11 08:27:10	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-11 08:27:24	tikhon	honestly, I'd just hardcode the function to be something like (+ 1)
2013-09-11 08:27:31	arkeet	or that.
2013-09-11 08:27:33	tikhon	(the function being mapped over the list, that is)
2013-09-11 08:27:59	tikhon	given the types, that should be more than good enough
2013-09-11 08:28:35	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-11 08:28:49	chexxor	 quickCheck ( map (+1) == map' (+1) )
2013-09-11 08:28:52	tikhon	quickCheck $ \ ls -> myMap (+1) ls == map (+1) ls
2013-09-11 08:28:53	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-11 08:28:59	tikhon	no, you want to make the list argument explicit
2013-09-11 08:28:59	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-11 08:29:08	tikhon	you could also have a pointfree version, but that's a bit trickier
2013-09-11 08:29:10	shachaf	But then you have to read Wadler's paper.
2013-09-11 08:29:31	tikhon	quickCheck $ \ ls -> (==) <$> map (+1) <*> map' (+1)
2013-09-11 08:29:35	tikhon	I think that should work
2013-09-11 08:29:37	tikhon	erm
2013-09-11 08:29:42	tikhon	without the \ ls -> bit
2013-09-11 08:29:48	tikhon	quickCheck $ (==) <$> map (+1) <*> map' (+1)
2013-09-11 08:29:48	<--	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has quit (Read error: No route to host)
2013-09-11 08:29:58	tikhon	but the explicit version is nicer
2013-09-11 08:30:03	shachaf	tikhon: I don't think this is a reasonable recommendation given the context. :-)
2013-09-11 08:30:16	tikhon	no, it probably isn't
2013-09-11 08:30:17	tikhon	and yet
2013-09-11 08:30:18	shachaf	You should only use point-free code if you'd be able to derive it yourself.
2013-09-11 08:30:26	chexxor	Not in scope: `<$>'
2013-09-11 08:30:27	<--	zhanrnl (~lennart@c-76-21-115-135.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 08:30:33	tikhon	chexxor: yeah, don't use that version
2013-09-11 08:30:34	-->	sShintah (~oer894n@c83-248-105-252.bredband.comhem.se) has joined #haskell
2013-09-11 08:30:45	tikhon	just think of it as unholy magic
2013-09-11 08:30:49	<--	charliesome (~root@202-129-124-155.perm.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 08:31:03	chexxor	tikhon: omg, your first version worked
2013-09-11 08:31:05	-->	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has joined #haskell
2013-09-11 08:31:07	chexxor	magic!
2013-09-11 08:31:13	 *	arkeet prefers liftA2
2013-09-11 08:31:23	 *	tikhon prefers idiom brackets
2013-09-11 08:31:30	 *	shachaf prefers magic
2013-09-11 08:31:33	<--	adu (~alt@pool-173-66-15-105.washdc.fios.verizon.net) has quit (Quit: adu)
2013-09-11 08:31:34	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 248 seconds)
2013-09-11 08:31:35	tikhon	(| map (+1) == map' (+1) |)
2013-09-11 08:31:38	tikhon	idiom brackets *are* magic
2013-09-11 08:31:49	tikhon	also, I'm not entirely certain that would actually work
2013-09-11 08:31:50	shachaf	They're magic because it decided where to lift there automatically, right?
2013-09-11 08:31:54	tikhon	yes
2013-09-11 08:31:59	shachaf	What to lift and what not to lift.
2013-09-11 08:32:00	-->	JohnBat26 (~Eugene@89.175.77.172) has joined #haskell
2013-09-11 08:32:02	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-11 08:32:23	tikhon	the rules are actually straightforward, but I haven't used them enough to know them well
2013-09-11 08:32:33	-->	emporas (~emporas@ppp-2-84-228-118.home.otenet.gr) has joined #haskell
2013-09-11 08:32:36	shachaf	"magic" is just another word for "primitive".
2013-09-11 08:32:52	tikhon	or the opposite
2013-09-11 08:32:57	tikhon	sufficiently advanced technology and all that
2013-09-11 08:33:04	shachaf	Hmm?
2013-09-11 08:33:13	tikhon	it's a famous quote by Arthur C. Clarke
2013-09-11 08:33:17	shachaf	Yes, I know.
2013-09-11 08:33:26	tikhon	oh
2013-09-11 08:33:26	shachaf	If technology is sufficiently advanced, you treat it as a primitive rather than understanding it in terms of smaller primitives.
2013-09-11 08:33:29	shachaf	Therefore it's magic.
2013-09-11 08:33:31	tikhon	oh, that'
2013-09-11 08:33:37	tikhon	that's what you meant by "primitive"
2013-09-11 08:33:47	-->	mno2 (~mno2@wlan82.cc.ntu.edu.tw) has joined #haskell
2013-09-11 08:33:49	shachaf	Ah. Yes.
2013-09-11 08:33:56	tikhon	I took the opposite meaning
2013-09-11 08:34:05	carter	as did i
2013-09-11 08:34:12	shachaf	I guess that meaning exists. :-(
2013-09-11 08:34:19	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-09-11 08:34:26	arkeet	the indecomposable black box meaning.
2013-09-11 08:34:31	chexxor	omg, thanks. I was banging my head against the wall here. I checked the type signature, saw the "Testable" and "IO ()" and just about gave up
2013-09-11 08:34:34	tikhon	it's usually easy to tell them apart because one is almost always a noun and the other an adjective
2013-09-11 08:34:51	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-11 08:34:55	tikhon	but here the part of speech was somewhat ambiguous
2013-09-11 08:34:56	arkeet	chexxor: yeah, quickchec uses a bit of typeclass magic to accept functions with an arbitrary number of arguments.
2013-09-11 08:35:29	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-11 08:35:39	chexxor	looks like Testable is just a type synonym for Boolean (among others), correct?
2013-09-11 08:35:53	shachaf	Maybe I should use another word.
2013-09-11 08:35:57	-->	charliesome (~root@202-129-124-155.perm.iinet.net.au) has joined #haskell
2013-09-11 08:35:58	shachaf	"magic" is just another word for "fundamental"?
2013-09-11 08:35:59	<--	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has quit (Ping timeout: 260 seconds)
2013-09-11 08:35:59	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Ping timeout: 246 seconds)
2013-09-11 08:36:08	shachaf	"atomic"?
2013-09-11 08:36:11	shachaf	I don't know.
2013-09-11 08:36:17	-->	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has joined #haskell
2013-09-11 08:36:22	tikhon	chexxor: Testable is a class, just like Show or Read
2013-09-11 08:36:22	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-11 08:36:56	tikhon	Bool is one member of the class
2013-09-11 08:37:12	tikhon	but it also includes functions returning booleans, with any number of arguments
2013-09-11 08:37:40	tikhon	as long as QuickCheck knows how to generate the arguments
2013-09-11 08:38:08	arkeet	(you might see it mention Arbitrary. that's how it randomly generates input)
2013-09-11 08:38:41	tikhon	basically, Testable represents any sort of property that QuickCheck knows how to work with
2013-09-11 08:39:12	<--	ParahSailin_ (~ropoctl@unaffiliated/parahsailin) has quit (Quit: ParahSailin_)
2013-09-11 08:39:27	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 08:40:05	chexxor	ok, I'll keep that question on the backburner. It's a typeclass topic?
2013-09-11 08:40:22	tikhon	Yes, since Testable is a typeclass
2013-09-11 08:40:26	tikhon	have you not covered those yet?
2013-09-11 08:40:49	arkeet	(Arbitrary is another typeclass. maybe let's not worry about it too much.)
2013-09-11 08:41:14	<--	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-09-11 08:41:19	-->	phischu (~pschuster@dslb-088-077-221-243.pools.arcor-ip.net) has joined #haskell
2013-09-11 08:41:41	chexxor	tikhon: not yet, I'm only now working on folds and and writing pointfree functions. Week 4 of my endeavor
2013-09-11 08:41:54	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-11 08:41:57	tikhon	oh, typeclasses are a lot of fun
2013-09-11 08:42:05	<--	Caztiel (~me@unaffiliated/caztiel) has quit (Ping timeout: 245 seconds)
2013-09-11 08:42:16	tikhon	one of the first things I learned about in Haskell, personally
2013-09-11 08:42:20	-->	poglesbyg (~poglesbyg@uib-guest.uib.no) has joined #haskell
2013-09-11 08:42:43	-->	dEPz (~depz@89-212-7-19.static.t-2.net) has joined #haskell
2013-09-11 08:42:55	<--	funfunctor (~functorfu@122.193.dsl.syd.iprimus.net.au) has quit (Ping timeout: 245 seconds)
2013-09-11 08:43:02	<--	poglesbyg (~poglesbyg@uib-guest.uib.no) has quit (Client Quit)
2013-09-11 08:44:04	--	Guest74748 is now known as mee
2013-09-11 08:44:09	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 08:44:31	dissipate_	would it help to study category theory in addition to learning haskell?
2013-09-11 08:44:49	tikhon	help? not *that* much
2013-09-11 08:44:57	tikhon	but it would certainly be fun and happy
2013-09-11 08:45:23	-->	aggregatebot (~aggregate@107-208-218-105.lightspeed.tukrga.sbcglobal.net) has joined #haskell
2013-09-11 08:45:39	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has left #haskell
2013-09-11 08:45:43	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-11 08:45:48	dissipate_	tikhon, have you studied category theory?
2013-09-11 08:45:56	tikhon	hmm, a bit
2013-09-11 08:46:03	shachaf	Well, people who like that sort of thing will find it to be just the sort of thing they like.
2013-09-11 08:46:15	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-11 08:46:17	tikhon	tautology
2013-09-11 08:46:31	shachaf	Aren't they all?
2013-09-11 08:46:42	tikhon	see, this is what learning about category theory gets you
2013-09-11 08:46:55	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 240 seconds)
2013-09-11 08:47:12	chexxor	before starting Haskell, I studied a bit of set theory and category theory. Their understanding of types, functors, and members of a set is very helpful concepts.
2013-09-11 08:47:21	dissipate_	do the concepts of category theory map directly to the concepts in haskell, or does haskell borrow from other branches?
2013-09-11 08:47:40	chexxor	by studying, I mean watching some youtube video lectures and reading a bit of wikibooks
2013-09-11 08:47:47	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-11 08:48:02	dissipate_	chexxor, i'm thinking about getting a book on CT, but don't know which one
2013-09-11 08:48:10	-->	functorfun (~functorfu@CPE-121-217-222-117.lnse3.cht.bigpond.net.au) has joined #haskell
2013-09-11 08:48:11	--	functorfun is now known as funfunctor
2013-09-11 08:48:12	tikhon	dissipate_: that's a bit of a false dichotomy: there's plenty of stuff in Haskell that isn't really from any branch of mathematics
2013-09-11 08:48:29	shachaf	I recommend not worrying about category theory if you're learning Haskell (and vice versa).
2013-09-11 08:48:30	<--	zxq9 (~ceverett@FL1-119-244-165-183.okn.mesh.ad.jp) has quit (Remote host closed the connection)
2013-09-11 08:48:37	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-11 08:48:38	--	hdevalence is now known as hdevalence|away
2013-09-11 08:48:49	-->	zxq9 (~ceverett@FL1-119-244-165-183.okn.mesh.ad.jp) has joined #haskell
2013-09-11 08:49:13	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-11 08:49:23	dmj`	dissipate_: Hask is a category, but it is not cartesian-closed
2013-09-11 08:49:25	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-11 08:49:30	dmj`	dissipate_: http://www.haskell.org/haskellwiki/Hask
2013-09-11 08:49:39	chexxor	dissipate_: http://en.wikibooks.org/wiki/Haskell/Category_theory
2013-09-11 08:49:47	arkeet	I recommend following shachaf's recommendation.
2013-09-11 08:50:00	arkeet	there is no need to introduce category theory.
2013-09-11 08:50:16	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-11 08:50:32	shachaf	tikhon: If you're around, you can come to bacat and learn about adjunctions sometime this month!
2013-09-11 08:50:41	dissipate_	hmm, interesting
2013-09-11 08:50:43	tikhon	any particular time this month?
2013-09-11 08:51:09	<--	codesoup (~codesoup@76-10-150-185.dsl.teksavvy.com) has quit (Ping timeout: 276 seconds)
2013-09-11 08:51:14	dissipate_	arkeet, and what if one wants to develop the next versions of the GHC?
2013-09-11 08:51:56	<--	Soft (~soft@unaffiliated/soft) has quit (Ping timeout: 240 seconds)
2013-09-11 08:51:56	leroux	dissipate_: http://ghc.haskell.org/trac/ghc/wiki/Newcomers
2013-09-11 08:52:02	<--	pizzaplane (~mgibson@c-98-234-41-23.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 08:52:08	tikhon	dissipate_: then you almost definitely do not need to know about category theory
2013-09-11 08:52:23	dissipate_	hmm, this all feels so familiar to my studies of abstract algebra
2013-09-11 08:52:30	tikhon	yes
2013-09-11 08:52:33	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-11 08:52:41	tikhon	it's like an abstract version of abstract algebra
2013-09-11 08:52:44	arkeet	category theory is the abstract study of abstractions.
2013-09-11 08:52:48	arkeet	=(
2013-09-11 08:52:58	-->	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has joined #haskell
2013-09-11 08:53:00	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Remote host closed the connection)
2013-09-11 08:53:16	-->	rishi_ (~textual@1.23.33.157) has joined #haskell
2013-09-11 08:53:30	-->	skchrko (~sk@109.110.83.124) has joined #haskell
2013-09-11 08:53:43	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-09-11 08:53:43	shachaf	tikhon: Hmm, it's not scheduled yet. I think it's often on the last Wednesday.
2013-09-11 08:53:51	arkeet	it can give some useful insights but there is no need to actually know it to be as productive as you would in any other language
2013-09-11 08:54:12	arkeet	(or even more productive, in fact)
2013-09-11 08:54:18	<--	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has quit (Quit: Quit)
2013-09-11 08:54:37	shachaf	(Or structural. Take your pick.)
2013-09-11 08:55:10	dmj`	dissipate_: These videos are very good (https://www.scss.tcd.ie/Edsko.de.Vries/ct/catsters/linear.php), Just started on initial and terminal objects, Eugenia Cheng is a very good teacher.
2013-09-11 08:55:38	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-09-11 08:55:46	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-11 08:55:59	shachaf	The videos are great, but you shouldn't watch them to learn Haskell.
2013-09-11 08:56:18	dissipate_	dmj`, can one use category theory to extend the haskell language?
2013-09-11 08:56:22	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-09-11 08:56:34	arkeet	I don't know what that means, but you shouldn't be concerned with category theory.
2013-09-11 08:56:36	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 08:56:38	-->	epsilonhalbe (~epsilonha@62.68.205.246) has joined #haskell
2013-09-11 08:56:49	tikhon	category theory guides the *design* of the language (to some extent) and the libraries
2013-09-11 08:56:54	-->	SpyrosTrigazis (~spyrostri@2001:648:2320:61:c818:970a:9194:e355) has joined #haskell
2013-09-11 08:57:01	arkeet	(to some extent)
2013-09-11 08:57:22	arkeet	(the extent varies depending on whether your name is edwardk)
2013-09-11 08:57:43	rishi_	I'm wondering about the benefits of non-lazy evaluation for an interpreter (applicative order vs normal order). Why would you want non-lazy evaluation?
2013-09-11 08:57:52	-->	codesoup (~codesoup@76-10-180-15.dsl.teksavvy.com) has joined #haskell
2013-09-11 08:57:53	<--	miclorb (~textual@1.145.157.90) has quit
2013-09-11 08:58:07	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-11 08:58:39	shachaf	Normal order and lazy are not the same thing.
2013-09-11 08:58:48	-->	tuxie_ (~paranoid@g225065069.adsl.alicedsl.de) has joined #haskell
2013-09-11 08:58:54	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-11 08:59:02	rishi_	Oh?
2013-09-11 08:59:36	<--	eevar (~eevar@175.80-203-27.nextgentel.com) has quit (Read error: Operation timed out)
2013-09-11 08:59:52	tikhon	normal order evaluates under lambdas, I believe
2013-09-11 09:00:20	tikhon	it isn't really used in practice
2013-09-11 09:00:31	-->	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has joined #haskell
2013-09-11 09:00:31	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-09-11 09:01:00	shachaf	But maybe you're concerned with strict vs. non-strict semantics?
2013-09-11 09:01:16	-->	ginmaniac (~ginmaniac@194.95.197.2) has joined #haskell
2013-09-11 09:01:18	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-11 09:01:24	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 09:01:25	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 09:01:46	shachaf	Applicative-order, call-by-value, etc. are implementations of strict semantics. Normal-order, call by name, lazy, etc. are implementations of non-strict semantics.
2013-09-11 09:02:02	rishi_	Yes, I believe so.
2013-09-11 09:02:03	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-11 09:02:11	-->	raichoo (~raichoo@2001:470:b626:11:224:d7ff:fe96:6ca4) has joined #haskell
2013-09-11 09:02:12	<--	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has quit (Ping timeout: 256 seconds)
2013-09-11 09:02:27	rishi_	I'm not sure I understand the benefits of strict evaluation
2013-09-11 09:02:40	shachaf	Well, if you're a mathematician, non-strict evaluation is probably better.
2013-09-11 09:02:57	tikhon	if you care about performance, you might like strict evaluation more
2013-09-11 09:03:09	shachaf	Everything that evaluates to some value with strict evaluation evaluates evaluates to the same value with non-strict evaluation.
2013-09-11 09:03:28	-->	eevar (~eevar@175.80-203-27.nextgentel.com) has joined #haskell
2013-09-11 09:03:29	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-11 09:03:38	tikhon	also, every single popular language aside from Haskell is basically strict
2013-09-11 09:03:40	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 09:03:54	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 09:04:06	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 09:04:12	tikhon	if you allow side-effects when an expression gets evaluated, you want to be strict
2013-09-11 09:04:31	<--	funfunctor (~functorfu@CPE-121-217-222-117.lnse3.cht.bigpond.net.au) has quit (Quit: leaving)
2013-09-11 09:04:48	tikhon	and—what a coincidence—every single popular language aside from Haskell has rampant side-effects
2013-09-11 09:04:52	-->	Lethalman (~luca@net77-43-20-100.mclink.it) has joined #haskell
2013-09-11 09:05:07	<--	tuxie_ (~paranoid@g225065069.adsl.alicedsl.de) has quit (Read error: Operation timed out)
2013-09-11 09:05:26	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Remote host closed the connection)
2013-09-11 09:05:30	-->	talzeus_ (~studybot_@101.110.31.120) has joined #haskell
2013-09-11 09:06:19	<--	eis (~eis@109.197.218.46) has quit (Ping timeout: 260 seconds)
2013-09-11 09:06:30	dmj`	dissipate_: The language itself allows for the expression of algebraic structure like monads and functors. I wouldn't say category theory can be used to extend haskell though, moreso mathematics I'd assume. IO as a monad seemed like a good design choice though.
2013-09-11 09:06:46	--	gpampara_off is now known as gpampara
2013-09-11 09:07:02	-->	snowylike2 (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-11 09:07:09	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-11 09:07:18	<--	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has quit (Read error: Connection reset by peer)
2013-09-11 09:07:57	dmj`	shachaf: correct me if I'm wrong
2013-09-11 09:08:17	-->	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has joined #haskell
2013-09-11 09:08:19	-->	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has joined #haskell
2013-09-11 09:09:08	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 09:09:08	arkeet	analogy:
2013-09-11 09:09:15	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 264 seconds)
2013-09-11 09:09:16	arkeet	I wouldn't try to teach category theory to someone who is learning linear algebra.
2013-09-11 09:09:40	shachaf	arkeet: But I was going to learn linear algebra. :-(
2013-09-11 09:09:47	tikhon	I'd try to convince them to learn Haskell instead
2013-09-11 09:09:58	-->	artyomkazak (~artyomkaz@94.25.228.27) has joined #haskell
2013-09-11 09:10:01	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 276 seconds)
2013-09-11 09:10:01	arkeet	shachaf: :-(
2013-09-11 09:10:05	tikhon	I figure everything else is pointless without a nice dose of functional programming :)
2013-09-11 09:10:05	arkeet	guess you're out of luck
2013-09-11 09:10:30	shachaf	arkeet: What if I learn about linear logic?
2013-09-11 09:10:37	arkeet	I don't know!
2013-09-11 09:10:39	shachaf	I hear that, like, comonoids and stuff, man.
2013-09-11 09:10:39	arkeet	I don't know linear logic.
2013-09-11 09:10:50	-->	mak` (~mak@lokalhost.pl) has joined #haskell
2013-09-11 09:10:52	tikhon	linear types seem fun
2013-09-11 09:10:53	<--	AnalogFile (974208af@gateway/web/freenode/ip.151.66.8.175) has quit (Ping timeout: 250 seconds)
2013-09-11 09:11:09	arkeet	are linear types subsumed by dependent types?
2013-09-11 09:11:16	shachaf	class Comonoid w where comempty :: w -> (); comappend :: w -> (w,w)
2013-09-11 09:11:38	shachaf	arkeet: How does that work?
2013-09-11 09:11:41	levi	You learn to generalize algebraic concepts to Fields in Linear Algebra, which is one step further towards the extreme generalization of category theory.
2013-09-11 09:11:43	arkeet	how does what work?
2013-09-11 09:11:55	shachaf	subsuming
2013-09-11 09:12:02	arkeet	shachaf: I don't know!
2013-09-11 09:12:34	shachaf	arkeet: You should work out laws for class Functor m => Monad m where monad :: Free m a -> m a
2013-09-11 09:12:42	arkeet	shachaf: I thought that was your job?
2013-09-11 09:13:06	shachaf	I have another job now.
2013-09-11 09:13:17	jfischoff	yeah what's up with that ;)
2013-09-11 09:13:20	arkeet	anyway, I thought the laws were monad makes m a free monad monad algebra.
2013-09-11 09:13:22	<--	Guest29604 (~arthur@37.157.213.180) has quit (Ping timeout: 245 seconds)
2013-09-11 09:13:27	arkeet	makes `m` a
2013-09-11 09:13:48	-->	madjestic (~madjestic@188.90.177.218) has joined #haskell
2013-09-11 09:13:49	<--	xinming (~xinming@125.82.194.215) has quit (Read error: Connection reset by peer)
2013-09-11 09:14:11	-->	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has joined #haskell
2013-09-11 09:14:25	shachaf	Hmm, that sounds like a nice law.
2013-09-11 09:14:40	-->	xinming (~xinming@125.87.101.172) has joined #haskell
2013-09-11 09:14:50	shachaf	Let's see what it would mean.
2013-09-11 09:14:55	arkeet	(the free monad monad being a monad on the category of endofunctors.)
2013-09-11 09:15:18	<--	jonkri (~jonkri@pontarius/jon) has quit (Ping timeout: 248 seconds)
2013-09-11 09:15:24	arkeet	the worst thing about that sentence is that it is meaningful.
2013-09-11 09:15:34	shachaf	I guess you mean a T-algebra, not an F-algebra?
2013-09-11 09:15:43	-->	zbcm (~zbcm@147.69.152.51) has joined #haskell
2013-09-11 09:15:49	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 09:15:53	shachaf	You should call T-algebras "monad algebras" to distinguish them from the other kind.
2013-09-11 09:15:55	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-11 09:15:56	arkeet	it's an algebra for the "free monad
2013-09-11 09:15:58	arkeet	I did.
2013-09-11 09:16:04	arkeet	that's why I said free monad monad algebra, not free monad algebra.
2013-09-11 09:16:17	shachaf	Ah.
2013-09-11 09:16:34	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 09:16:38	shachaf	What do the laws work out to?
2013-09-11 09:16:50	arkeet	I don't know. there are some commutative diagrams.
2013-09-11 09:16:58	akegalj	what's the name of function in Prelude which [1,1,1,2,2,2,1,1] -> [1,2,1] ?
2013-09-11 09:16:59	arkeet	just instantiate them for the free monad monad.
2013-09-11 09:17:01	shachaf	Yes, but it's past midnight.
2013-09-11 09:17:07	arkeet	akegalj: map head . group
2013-09-11 09:17:18	arkeet	(that's 4 functions in Prelude, but whatever)
2013-09-11 09:17:22	akegalj	arkeet: thanks :)
2013-09-11 09:17:24	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-11 09:17:41	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-11 09:18:01	<--	jonkri (~jonkri@pontarius/jon) has quit (Max SendQ exceeded)
2013-09-11 09:18:01	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-09-11 09:18:08	 *	hackagebot crypto-cipher-types 0.0.5 - Generic cryptography cipher types  http://hackage.haskell.org/package/crypto-cipher-types-0.0.5 (VincentHanquez)
2013-09-11 09:18:11	 *	arkeet prefers the version where head and group are from Data.List.NonEmpty
2013-09-11 09:18:29	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-11 09:18:31	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 09:18:38	shachaf	arkeet: That's the great thing about unqualified names.
2013-09-11 09:18:38	arkeet	(not map, though)
2013-09-11 09:18:42	arkeet	shachaf: :)
2013-09-11 09:18:46	<--	artyomkazak (~artyomkaz@94.25.228.27) has quit (Ping timeout: 245 seconds)
2013-09-11 09:18:54	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-09-11 09:18:55	-->	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 09:19:17	<--	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has quit (Ping timeout: 240 seconds)
2013-09-11 09:19:33	arkeet	shachaf: and of course, don't forget the law "monad is a natural transformation"
2013-09-11 09:19:36	<--	jim_ (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-11 09:19:40	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 09:19:41	<--	jonkri (~jonkri@pontarius/jon) has quit (Max SendQ exceeded)
2013-09-11 09:19:42	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-09-11 09:19:57	Hafydd	what's the name of function in Prelude with [1,1] -> [1,2,1] -> [1,3,3,1] -> [1,4,6,4,1] -> ...?
2013-09-11 09:20:02	-->	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has joined #haskell
2013-09-11 09:20:13	arkeet	that would be more than 4 functions, I reckon.
2013-09-11 09:20:24	tikhon	that's just Pascal's triangle, isn't it?
2013-09-11 09:20:25	<--	Guest2098 (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-09-11 09:20:26	shachaf	arkeet: Oh, so the reason I was asking about monoids being monads was to see where the monoid laws come from.
2013-09-11 09:20:34	shachaf	When you have an adjunction.
2013-09-11 09:20:47	shachaf	Since one of the monad laws is a naturality law so I wanted to figure out what naturality would be in the first place.
2013-09-11 09:20:50	shachaf	And so on.
2013-09-11 09:20:54	arkeet	shachaf: but a monoid is just a 2-category with one 1-cell.
2013-09-11 09:21:26	arkeet	where naturality is trivial, or something.
2013-09-11 09:21:29	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 09:21:33	Hafydd	> (\xs -> zipWith (+) (0 : xs) (xs ++ [0])) [1,3,3,1]
2013-09-11 09:21:34	lambdabot	  [1,4,6,4,1]
2013-09-11 09:21:34	arkeet	I don't know.
2013-09-11 09:21:50	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Read error: Connection reset by peer)
2013-09-11 09:21:57	<--	aupiff (~aupiff@c-98-209-82-28.hsd1.mi.comcast.net) has quit (Read error: Operation timed out)
2013-09-11 09:22:00	arkeet	> iterate (\xs -> zipWith (+) (0 : xs) (xs ++ [0])) []
2013-09-11 09:22:01	lambdabot	  [[],[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[...
2013-09-11 09:22:04	arkeet	aw.
2013-09-11 09:22:05	arkeet	> iterate (\xs -> zipWith (+) (0 : xs) (xs ++ [0])) [1]
2013-09-11 09:22:07	lambdabot	  [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]...
2013-09-11 09:23:01	<--	Valodim (~Valodim@mail.mugenguild.com) has quit (Read error: Operation timed out)
2013-09-11 09:23:02	 *	arkeet imagines there ought to be some log-time recursive way to calculate binomial coefficients, by vague analogy with exponentiation by squaring
2013-09-11 09:23:33	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-11 09:23:50	<--	dimday (~amcvega@49.144.140.31) has quit (Ping timeout: 248 seconds)
2013-09-11 09:24:01	-->	Beetny (~Beetny@ppp118-208-6-18.lns20.bne1.internode.on.net) has joined #haskell
2013-09-11 09:24:39	-->	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-09-11 09:24:52	-->	ParahSai1in (~Rob@50-194-178-148-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 09:25:11	jfischoff	has anyone messed with a type like this: newtype FixRef s f = FixRef (STRef s (f (FixRef s f)))?
2013-09-11 09:25:24	jfischoff	sort of a mutable Fix
2013-09-11 09:25:51	shachaf	Sounds fishy.
2013-09-11 09:25:52	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:26:00	tikhon	hmm, could you express that with normal Fix?
2013-09-11 09:26:11	shachaf	Since it's not a functor.
2013-09-11 09:26:26	jfischoff	type FreeF f a = f :+: K a; type Free' s f a = FixRef s (FreeF f a)
2013-09-11 09:26:27	<--	AfC (~andrew@2407:7800:200:1011:2ad2:44ff:fe08:a4c) has quit (Remote host closed the connection)
2013-09-11 09:26:52	jfischoff	then I can do efficient substitution
2013-09-11 09:26:58	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 09:27:00	shachaf	Free' f is also not a Functor.
2013-09-11 09:27:38	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 09:27:41	<--	tinyghost (~ghosty@rainbowsta.rs) has quit (Remote host closed the connection)
2013-09-11 09:27:42	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-09-11 09:27:42	<--	ParahSailin (~Rob@unaffiliated/parahsailin) has quit (Ping timeout: 264 seconds)
2013-09-11 09:27:43	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 09:28:18	-->	yitz (~abba@line236.adsl.actcom.co.il) has joined #haskell
2013-09-11 09:28:22	<--	jkoshy (jkoshy@nat/google/x-aitxjnspvnkbgdrf) has quit (Quit: jkoshy)
2013-09-11 09:28:41	arkeet	I only see kind errors.
2013-09-11 09:28:54	<--	madjestic (~madjestic@188.90.177.218) has quit (Ping timeout: 240 seconds)
2013-09-11 09:28:58	arkeet	hm.
2013-09-11 09:29:02	jfischoff	where?
2013-09-11 09:29:02	arkeet	I'm bad at kind inference, probably.
2013-09-11 09:29:36	-->	tinyghost (~ghosty@rainbowsta.rs) has joined #haskell
2013-09-11 09:29:53	jfischoff	I feel like there should be some representation of a free monad that allows for efficient substitution
2013-09-11 09:30:09	<--	AlecTaylor (~alec.tayl@cpmon.mq.edu.au) has quit (Ping timeout: 276 seconds)
2013-09-11 09:30:29	arkeet	what do free monads have to do with substitution?
2013-09-11 09:31:19	jfischoff	you can use monads to do variable substitution
2013-09-11 09:31:31	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-11 09:31:32	-->	madjestic (~madjestic@188.90.177.218) has joined #haskell
2013-09-11 09:31:33	-->	kamatsu (~Adium@2402:1800:4000:2:29c2:5f21:7403:4bfc) has joined #haskell
2013-09-11 09:31:38	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-09-11 09:32:13	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Read error: Connection reset by peer)
2013-09-11 09:32:14	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 256 seconds)
2013-09-11 09:32:24	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:34:06	-->	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 09:34:07	<--	dcoutts_ (~dcoutts@cpc6-oxfd21-2-0-cust475.4-3.cable.virginmedia.com) has quit (Changing host)
2013-09-11 09:34:07	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-11 09:36:30	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-11 09:36:54	<--	bergmark (~adnam@atmat.net) has quit (Ping timeout: 240 seconds)
2013-09-11 09:37:21	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 09:37:40	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-11 09:37:57	<--	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has quit (Ping timeout: 276 seconds)
2013-09-11 09:38:14	 *	hackagebot hspec 1.7.2.1 - Behavior-Driven Development for Haskell  http://hackage.haskell.org/package/hspec-1.7.2.1 (SimonHengel)
2013-09-11 09:38:19	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 264 seconds)
2013-09-11 09:38:51	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-09-11 09:38:53	-->	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has joined #haskell
2013-09-11 09:38:53	-->	dimday (~amcvega@50.23.115.112) has joined #haskell
2013-09-11 09:39:02	-->	xexonixxexillion (~Adium@130.56.86.81) has joined #haskell
2013-09-11 09:39:36	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2013-09-11 09:39:45	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 09:40:29	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:40:33	<--	xl1 (~xl@114.254.147.196) has quit (Ping timeout: 276 seconds)
2013-09-11 09:40:37	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-11 09:40:47	joelteon	anybody happen to know if there's an aptitude package for hlint?
2013-09-11 09:40:49	joelteon	and what it's called
2013-09-11 09:40:52	joelteon	if one exists
2013-09-11 09:40:54	<--	madjestic (~madjestic@188.90.177.218) has quit (Ping timeout: 240 seconds)
2013-09-11 09:40:55	joelteon	and what version it is
2013-09-11 09:41:03	-->	ashnur (~ashnur@79.117.70.30) has joined #haskell
2013-09-11 09:41:08	johnw	you can't find it with apt-cache search?
2013-09-11 09:41:11	hvr	aptitude?
2013-09-11 09:41:11	tikhon	you can install it with cabal, you know
2013-09-11 09:41:25	joelteon	tikhon: it requires src-exts which takes like 2 minutes to install
2013-09-11 09:41:30	joelteon	and these test runs are pretty slow anyway
2013-09-11 09:41:35	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-11 09:41:35	joelteon	and I don't have apt-cache because this is OSX
2013-09-11 09:41:40	hvr	fwiw, here's a .deb package for ubuntu: Filename: pool/universe/h/hlint/hlint_1.8.43-1_amd64.deb
2013-09-11 09:41:44	leroux	joelteon: brew search ?
2013-09-11 09:41:49	johnw	aptitude on Mac?
2013-09-11 09:41:52	johnw	never heard of that
2013-09-11 09:41:53	tikhon	woah, using aptitude on a mac?
2013-09-11 09:41:55	joelteon	leroux: my CI builds run on an ubuntu box
2013-09-11 09:41:56	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-11 09:42:06	arkeet	your ubuntu box might have apt-cache
2013-09-11 09:42:07	tikhon	can you run apt-cache on that box?
2013-09-11 09:42:07	leroux	Ahh, that makes more sense.
2013-09-11 09:42:14	joelteon	i don't have SSH access to it, it's travis-ci
2013-09-11 09:42:19	tikhon	ah
2013-09-11 09:42:20	joelteon	boy i should've clarified all this a lot earlier
2013-09-11 09:42:25	tikhon	probably :)
2013-09-11 09:42:35	arkeet	ah, that would explain why 2 minutes matters.
2013-09-11 09:42:38	johnw	yeah, just a bit :)
2013-09-11 09:42:42	<--	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-11 09:42:48	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:42:57	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 245 seconds)
2013-09-11 09:43:00	-->	xl1 (~xl@123.113.154.94) has joined #haskell
2013-09-11 09:43:02	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Ping timeout: 248 seconds)
2013-09-11 09:44:30	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Client Quit)
2013-09-11 09:44:37	-->	madjestic (~madjestic@188.90.177.218) has joined #haskell
2013-09-11 09:45:11	-->	bergmark (~adnam@atmat.net) has joined #haskell
2013-09-11 09:46:08	<--	Soft (~soft@unaffiliated/soft) has quit (Ping timeout: 260 seconds)
2013-09-11 09:46:14	<--	ekipan (4cd4e01c@gateway/web/freenode/ip.76.212.224.28) has quit (Quit: Page closed)
2013-09-11 09:46:31	-->	SingingBoyo (~brandon@199.119.234.233) has joined #haskell
2013-09-11 09:47:20	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-11 09:48:34	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-11 09:49:43	-->	etehtsea (~kes@188.134.44.6) has joined #haskell
2013-09-11 09:49:50	-->	oleo (5098faa7@gateway/web/freenode/ip.80.152.250.167) has joined #haskell
2013-09-11 09:50:30	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-11 09:50:35	-->	babalone (~baba@p5DDCD557.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 09:50:50	-->	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has joined #haskell
2013-09-11 09:51:14	-->	rgr (~user@d230171.adsl.hansenet.de) has joined #haskell
2013-09-11 09:52:14	Ikarus	Is there a clean and easy way to "invert" the outcome of something that returns Bool
2013-09-11 09:52:42	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Remote host closed the connection)
2013-09-11 09:52:49	Iceland_jack	Ikarus: Do you mean True ↦ False, False ↦ True? not?
2013-09-11 09:53:29	Ikarus	Iceland_jack: okay, I am going to commit a sin, as I would in many C-like languages, !f
2013-09-11 09:53:39	-->	Itkovian (~Itkovian@b244h212.ugent.be) has joined #haskell
2013-09-11 09:53:44	tikhon	@ty not
2013-09-11 09:53:45	lambdabot	Bool -> Bool
2013-09-11 09:53:53	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 09:53:57	Iceland_jack	Ikarus: Depending on your purpose that may not be what you want, what are you trying to do?
2013-09-11 09:54:03	tikhon	and if you have a function, you could do (not .)
2013-09-11 09:54:03	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 09:54:05	tikhon	@ty (not .)
2013-09-11 09:54:06	lambdabot	(a -> Bool) -> a -> Bool
2013-09-11 09:54:17	Ikarus	tikhon: ah, that is more what I want :)
2013-09-11 09:54:37	joelteon	:t ((not .) .)
2013-09-11 09:54:38	lambdabot	(a -> a1 -> Bool) -> a -> a1 -> Bool
2013-09-11 09:54:41	<--	litherum1 (~Adium@204.28.120.240) has quit (Quit: Leaving.)
2013-09-11 09:55:04	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-09-11 09:55:19	 *	Iceland_jack has a feeling Ikarus is doing something wrong
2013-09-11 09:55:28	-->	t7 (~chatzilla@chaucer.kent.ac.uk) has joined #haskell
2013-09-11 09:55:49	Ikarus	Iceland_jack: oh, I know I am, but let me break stuff, I need to learn
2013-09-11 09:56:22	-->	JaRoel (~jaroel|4d@2a03:5700:3:0:8d0f:fc4e:a3bf:171a) has joined #haskell
2013-09-11 09:56:22	Iceland_jack	Do that :)
2013-09-11 09:57:13	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:57:43	<--	phischu (~pschuster@dslb-088-077-221-243.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-11 09:58:05	-->	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-11 09:58:24	-->	neto (~neto@145.107.80.165) has joined #haskell
2013-09-11 09:58:33	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-11 09:58:42	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-11 09:58:42	-->	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 09:59:05	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Max SendQ exceeded)
2013-09-11 09:59:13	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 09:59:40	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-11 09:59:44	-->	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has joined #haskell
2013-09-11 10:00:00	<--	dimday (~amcvega@50.23.115.112) has quit (Ping timeout: 245 seconds)
2013-09-11 10:00:53	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Read error: Connection reset by peer)
2013-09-11 10:01:18	-->	thunderrd (~thunderrd@119.42.78.38) has joined #haskell
2013-09-11 10:01:43	<--	__main__ (~main@50.240.210.73) has quit (Ping timeout: 264 seconds)
2013-09-11 10:02:00	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 10:03:07	-->	__main__ (~main@50.240.210.73) has joined #haskell
2013-09-11 10:03:17	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-11 10:05:47	<--	FreeFull (~freefull@defocus/sausage-lover) has quit
2013-09-11 10:06:15	-->	nh2 (~niklas@r002213.203112.miinet.jp) has joined #haskell
2013-09-11 10:07:20	<--	neto (~neto@145.107.80.165) has quit (Ping timeout: 246 seconds)
2013-09-11 10:07:34	<--	Kobata (Kobata@cpe-65-24-117-41.columbus.res.rr.com) has quit (Quit: Leaving)
2013-09-11 10:07:38	-->	petapetapeta (~Peter@shop3.diku.dk) has joined #haskell
2013-09-11 10:08:30	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-11 10:08:55	<--	SingingBoyo (~brandon@199.119.234.233) has quit (Ping timeout: 264 seconds)
2013-09-11 10:09:21	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-11 10:10:08	<--	GaelanAintAround (~Gaelan@98-125-72-82.dyn.centurytel.net) has quit (Ping timeout: 246 seconds)
2013-09-11 10:10:08	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-09-11 10:10:23	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 10:10:25	-->	jkoshy (jkoshy@nat/google/x-wxrybgqkfxiyiovf) has joined #haskell
2013-09-11 10:10:28	<--	tikhon (~user@2602:306:326f:8d10:8a53:2eff:fe28:8ce1) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 10:10:37	-->	shesek (~shesek@77.125.107.41) has joined #haskell
2013-09-11 10:11:00	-->	SingingBoyo (~brandon@199.119.234.233) has joined #haskell
2013-09-11 10:11:14	-->	Kobata (~Kobata@cpe-65-24-117-41.columbus.res.rr.com) has joined #haskell
2013-09-11 10:12:32	-->	GaelanAintAround (~Gaelan@98-125-160-127.dyn.centurytel.net) has joined #haskell
2013-09-11 10:12:35	<--	petapetapeta (~Peter@shop3.diku.dk) has quit (Ping timeout: 260 seconds)
2013-09-11 10:14:18	<--	xinming (~xinming@125.87.101.172) has quit (Ping timeout: 240 seconds)
2013-09-11 10:14:48	<--	charliesome (~root@202-129-124-155.perm.iinet.net.au) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 10:14:56	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-11 10:15:19	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-11 10:15:31	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 264 seconds)
2013-09-11 10:15:35	<--	finishingmove (~finishing@178-221-168-154.dynamic.isp.telekom.rs) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-11 10:15:37	-->	xinming (~xinming@125.87.101.172) has joined #haskell
2013-09-11 10:16:19	<--	Tekerson_ (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has quit (Ping timeout: 260 seconds)
2013-09-11 10:16:59	-->	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has joined #haskell
2013-09-11 10:17:26	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-11 10:17:58	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-11 10:18:28	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-11 10:18:57	-->	hsyl20 (~shenry@193.50.110.138) has joined #haskell
2013-09-11 10:19:00	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-11 10:20:34	-->	ts33kr (~ts33kr@193.34.60.123) has joined #haskell
2013-09-11 10:20:40	-->	SoupE (~jloos@f055247019.adsl.alicedsl.de) has joined #haskell
2013-09-11 10:20:42	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-11 10:21:12	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-11 10:22:49	<--	rishi_ (~textual@1.23.33.157) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 10:23:33	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 10:24:06	<--	SoupEvil (~jloos@g227007197.adsl.alicedsl.de) has quit (Ping timeout: 248 seconds)
2013-09-11 10:24:22	-->	eikke (~nicolas@78-20-0-121.access.telenet.be) has joined #haskell
2013-09-11 10:27:10	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 10:27:21	<--	wagle (~wagle@static-50-43-34-150.bvtn.or.frontiernet.net) has quit (Ping timeout: 268 seconds)
2013-09-11 10:27:31	<--	Targen (~iguana@190.73.206.135) has quit (Ping timeout: 264 seconds)
2013-09-11 10:27:42	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-09-11 10:28:51	-->	biscarch (~chris@c-67-161-27-113.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 10:28:55	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Quit: dpathakj)
2013-09-11 10:31:05	-->	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has joined #haskell
2013-09-11 10:31:35	-->	hashcat (~chatzilla@1-172-250-47.dynamic.hinet.net) has joined #haskell
2013-09-11 10:32:19	<--	jonkri (~jonkri@pontarius/jon) has quit (Ping timeout: 264 seconds)
2013-09-11 10:34:22	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 10:34:49	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 240 seconds)
2013-09-11 10:35:18	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 248 seconds)
2013-09-11 10:36:35	-->	nova_ (~nova@catv-86-101-199-145.catv.broadband.hu) has joined #haskell
2013-09-11 10:37:46	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-11 10:37:56	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-11 10:38:30	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-09-11 10:38:52	<--	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-11 10:39:03	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 276 seconds)
2013-09-11 10:39:39	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-11 10:40:35	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-11 10:41:12	-->	edsko (~edsko@80.111.60.101) has joined #haskell
2013-09-11 10:41:17	-->	exicer (~exicer@global-1-27.nat.csx.cam.ac.uk) has joined #haskell
2013-09-11 10:42:54	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-09-11 10:44:00	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-11 10:45:52	<--	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has quit (Ping timeout: 260 seconds)
2013-09-11 10:47:55	-->	Suika (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-09-11 10:49:07	<--	SingingBoyo (~brandon@199.119.234.233) has quit (Ping timeout: 264 seconds)
2013-09-11 10:50:41	<--	kamatsu (~Adium@2402:1800:4000:2:29c2:5f21:7403:4bfc) has quit (Quit: Leaving.)
2013-09-11 10:50:45	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Ping timeout: 276 seconds)
2013-09-11 10:50:54	-->	Taneb (~nathan@host-92-23-140-113.as13285.net) has joined #haskell
2013-09-11 10:51:16	-->	anakreon (~user@petitesrousses.imag.fr) has joined #haskell
2013-09-11 10:51:32	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-11 10:51:40	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 10:51:46	-->	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has joined #haskell
2013-09-11 10:53:22	-->	dimday (~amcvega@114.108.252.168) has joined #haskell
2013-09-11 10:55:06	<--	dimday (~amcvega@114.108.252.168) has quit (Client Quit)
2013-09-11 10:56:05	--	Suika is now known as erkin
2013-09-11 10:56:09	anakreon	I have this tree definition data CDef p = P p | T [CDef p] | S [CDef p] where P is a leaf and T and S are two different node types. I want to store simple lenses in the leafs (e.g Lens' a1 b, Lens' a2 b, ...). All get methods return the same type. Any advice on how to achieve this?
2013-09-11 10:57:43	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 10:57:47	-->	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has joined #haskell
2013-09-11 10:57:59	 *	arkeet is confused. a tree of lenses?
2013-09-11 10:58:34	<--	kushal (kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-11 10:58:34	anakreon	I think a starting point is the paper by O. Kiselyov on "Strongly typed heterogeneous collections"
2013-09-11 10:59:08	anakreon	Yes, a tree of setter and getter functions
2013-09-11 11:00:13	<--	Kuba (~jakub@unaffiliated/kuba) has quit (Remote host closed the connection)
2013-09-11 11:00:53	anakreon	Do you know what e and l stand for in that paper in "data HCons e l = HCons e l"?
2013-09-11 11:00:54	<--	Taneb (~nathan@host-92-23-140-113.as13285.net) has quit (Quit: Leaving)
2013-09-11 11:01:23	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-11 11:02:20	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 11:03:07	<--	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has quit (Ping timeout: 264 seconds)
2013-09-11 11:03:36	-->	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has joined #haskell
2013-09-11 11:03:56	quicksilver	anakreon: if they have unknown/varying source types a1 a2 how will you use it?
2013-09-11 11:04:17	quicksilver	you could easily enough abstract over the a1 and store that but, that would be useless.
2013-09-11 11:05:05	quicksilver	data SomeLens b = forall a1 . MkSL (Lens' a1 b) -- probably useless
2013-09-11 11:06:28	anakreon	I just need to process the tree.
2013-09-11 11:06:50	-->	SingingBoyo (~brandon@199.119.234.211) has joined #haskell
2013-09-11 11:07:05	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-11 11:07:19	quicksilver	that's not enough of an answer I'm afraid
2013-09-11 11:07:24	quicksilver	what kind of processing?
2013-09-11 11:08:26	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-09-11 11:08:29	-->	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-11 11:10:00	<--	SpyrosTrigazis (~spyrostri@2001:648:2320:61:c818:970a:9194:e355) has quit (Ping timeout: 245 seconds)
2013-09-11 11:10:55	anakreon	The idea is still vogue for me as well.
2013-09-11 11:12:31	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-11 11:12:47	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-11 11:12:57	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 11:13:08	<--	jonkri (~jonkri@pontarius/jon) has quit (Ping timeout: 246 seconds)
2013-09-11 11:14:03	-->	donri (~donri@unaffiliated/dagodenhall) has joined #haskell
2013-09-11 11:14:05	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-11 11:16:41	<--	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-11 11:17:25	quicksilver	anakreon: ok, well there isn't a general answer to your question. (Except 'yes you can'). The correct way to apply type discipline to your problem depends on how you need to be able to use that structure.
2013-09-11 11:17:37	-->	AlecTaylor (~alec.tayl@58.165.161.124) has joined #haskell
2013-09-11 11:17:55	<--	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has quit (Ping timeout: 260 seconds)
2013-09-11 11:18:05	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-11 11:18:08	-->	cwraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-11 11:18:28	-->	Tekerson (~brenton@ppp118-208-176-188.lns20.bne4.internode.on.net) has joined #haskell
2013-09-11 11:20:01	-->	nexx (~nexx@unaffiliated/xxen) has joined #haskell
2013-09-11 11:22:46	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2013-09-11 11:24:32	anakreon	quicksilver: This declaration typechecks: "type SomeLens b = forall a1 . Lens' a1 b" and data CDef p = P (SomeLens p) | .. with RankNTypes extension.
2013-09-11 11:24:48	quicksilver	yes, it does.
2013-09-11 11:24:51	<--	exicer (~exicer@global-1-27.nat.csx.cam.ac.uk) has quit (Ping timeout: 251 seconds)
2013-09-11 11:24:55	quicksilver	as I remarked it's probably useless
2013-09-11 11:24:58	quicksilver	but it certainly works.
2013-09-11 11:26:30	-->	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has joined #haskell
2013-09-11 11:27:50	<--	SingingBoyo (~brandon@199.119.234.211) has quit (Ping timeout: 256 seconds)
2013-09-11 11:28:09	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-09-11 11:28:11	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-09-11 11:29:08	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-11 11:29:29	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 11:29:40	<--	b0oh (~Adium@93.185.184.116) has quit (Quit: Leaving.)
2013-09-11 11:30:33	<--	slack1256 (~slack@181-160-191-17.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-09-11 11:30:50	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-09-11 11:31:10	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-11 11:31:15	<--	AlecTaylor (~alec.tayl@58.165.161.124) has quit (Ping timeout: 256 seconds)
2013-09-11 11:31:39	-->	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has joined #haskell
2013-09-11 11:32:10	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-09-11 11:32:22	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-11 11:32:39	<--	bondar (~bondar@197.156.132.62) has quit (Ping timeout: 264 seconds)
2013-09-11 11:32:39	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 264 seconds)
2013-09-11 11:33:30	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 256 seconds)
2013-09-11 11:34:57	<--	augur (~augur@208.58.5.87) has quit (Ping timeout: 276 seconds)
2013-09-11 11:35:12	-->	tazjin (~tazjin@2a01:2b0:3041:3018:749a:9a95:b7e3:79ec) has joined #haskell
2013-09-11 11:35:16	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-11 11:36:21	<--	dmj` (~user@c-98-213-42-255.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 11:36:42	-->	SpyrosTrigazis (~spyrostri@conf-228.admin.grnet.gr) has joined #haskell
2013-09-11 11:37:33	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-11 11:38:28	 *	hackagebot bdo 1.0.1 - Update CSS in the browser without reloading the page.  http://hackage.haskell.org/package/bdo-1.0.1 (ChrisDone)
2013-09-11 11:38:53	<--	ginmaniac (~ginmaniac@194.95.197.2) has quit (Quit: WeeChat 0.4.1)
2013-09-11 11:39:06	-->	derelm (~derelm@p5B283785.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 11:39:46	-->	hexagoxel (~hexagoxel@pc23121.eduroam.uni-kiel.de) has joined #haskell
2013-09-11 11:40:00	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2013-09-11 11:40:07	<--	SpyrosTr_ (~spyrostri@nat.admin.grnet.gr) has quit (Ping timeout: 264 seconds)
2013-09-11 11:40:50	<--	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has quit (Ping timeout: 245 seconds)
2013-09-11 11:42:11	<--	cwraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-11 11:42:17	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-11 11:44:39	<--	cronject (~cronject@46.7.62.22) has quit (Ping timeout: 264 seconds)
2013-09-11 11:44:39	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 11:44:53	-->	madjesti1 (~madjestic@188.89.171.88) has joined #haskell
2013-09-11 11:46:39	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 11:47:54	<--	madjestic (~madjestic@188.90.177.218) has quit (Ping timeout: 240 seconds)
2013-09-11 11:47:57	-->	bondar (~bondar@197.156.132.62) has joined #haskell
2013-09-11 11:48:38	-->	owst (~owst@tarsier.ecs.soton.ac.uk) has joined #haskell
2013-09-11 11:48:56	-->	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has joined #haskell
2013-09-11 11:49:49	-->	amatsu (~amatsumag@125.63.54.35) has joined #haskell
2013-09-11 11:49:55	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 11:50:35	<--	blbrown_win3 (~blbrown_w@c-76-17-20-230.hsd1.ga.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-11 11:51:15	<--	tazjin (~tazjin@2a01:2b0:3041:3018:749a:9a95:b7e3:79ec) has quit (Ping timeout: 245 seconds)
2013-09-11 11:53:31	adnap	Is there a command in GHCI to print the source of a function defined by let in GHCI?
2013-09-11 11:53:42	merijn	adnap: nope
2013-09-11 11:54:27	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 276 seconds)
2013-09-11 11:54:32	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-11 11:57:09	 *	adnap cue sad trombone
2013-09-11 11:57:20	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-09-11 11:58:06	 *	Kinnison only tends to use ghci to explore code written in a file.  Using it to define new code seems risky -- you might lose it more easily.
2013-09-11 11:58:17	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 11:58:18	<--	oleo (5098faa7@gateway/web/freenode/ip.80.152.250.167) has quit
2013-09-11 11:59:01	<--	hashcat (~chatzilla@1-172-250-47.dynamic.hinet.net) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-11 11:59:27	merijn	Yeah, not to mention editing in ghci is rather annoying
2013-09-11 12:00:19	adnap	I was experimenting and I got carried away!
2013-09-11 12:00:35	Kinnison	hehe
2013-09-11 12:00:36	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-09-11 12:00:44	Kinnison	Your history or scrollback might help :-)
2013-09-11 12:00:46	donri	adnap: C-r let nameoffunction
2013-09-11 12:00:47	adnap	GHCI should just make a temporary module when you define stuff
2013-09-11 12:01:19	-->	sj4nz (~sj4nz@98.156.105.243) has joined #haskell
2013-09-11 12:02:02	 *	merijn just permanently has a text file + ghci loading it open for experimentation
2013-09-11 12:02:45	<--	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Quit: Leaving)
2013-09-11 12:02:48	donri	also ghci has :e[dit]
2013-09-11 12:02:49	-->	petapetapeta (~Peter@shop3.diku.dk) has joined #haskell
2013-09-11 12:02:52	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Quit: Byez...SeeSoon!EnjoyTheSilence)
2013-09-11 12:02:55	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-11 12:03:15	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 12:03:16	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Client Quit)
2013-09-11 12:03:31	<--	xl1 (~xl@123.113.154.94) has quit (Ping timeout: 264 seconds)
2013-09-11 12:03:34	 *	hackagebot diagrams-builder 0.4.0.4 - hint-based build service for the diagrams graphics EDSL.  http://hackage.haskell.org/package/diagrams-builder-0.4.0.4 (BrentYorgey)
2013-09-11 12:04:05	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 12:04:17	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Client Quit)
2013-09-11 12:04:21	<--	zbcm (~zbcm@147.69.152.51) has quit (Quit: Leaving)
2013-09-11 12:05:02	-->	jibi (~jibi@93-58-159-33.ip159.fastwebnet.it) has joined #haskell
2013-09-11 12:05:10	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 12:05:18	donri	...which a also :reloads it if loaded
2013-09-11 12:05:50	<--	anakreon (~user@petitesrousses.imag.fr) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-11 12:06:41	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-11 12:06:54	<--	madjesti1 (~madjestic@188.89.171.88) has quit (Ping timeout: 240 seconds)
2013-09-11 12:06:56	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 256 seconds)
2013-09-11 12:07:23	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 260 seconds)
2013-09-11 12:08:00	-->	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has joined #haskell
2013-09-11 12:08:07	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-11 12:08:36	<--	etehtsea (~kes@188.134.44.6) has quit (Quit: Computer has gone to sleep.)
2013-09-11 12:09:17	-->	xl1 (~xl@123.113.149.121) has joined #haskell
2013-09-11 12:09:21	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 12:09:47	<--	threesome (~threesome@customer-79-127-150-148.net.angelnet.cz) has quit (Quit: Leaving)
2013-09-11 12:12:28	-->	kushal (kdas@fedora/kushal) has joined #haskell
2013-09-11 12:13:28	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 12:13:39	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Remote host closed the connection)
2013-09-11 12:14:47	-->	CaptainK (~CaptainK@181.178.238.15) has joined #haskell
2013-09-11 12:14:47	<--	CaptainK (~CaptainK@181.178.238.15) has quit (Client Quit)
2013-09-11 12:14:52	<--	schlaftier (~daniel@5.158.182.23) has quit (Ping timeout: 256 seconds)
2013-09-11 12:15:03	-->	CaptainK (~CaptainK@181.178.238.15) has joined #haskell
2013-09-11 12:15:16	<--	kryft (kryft@kapsi.fi) has quit (Ping timeout: 276 seconds)
2013-09-11 12:16:06	<--	Soft (~soft@unaffiliated/soft) has quit (Ping timeout: 248 seconds)
2013-09-11 12:16:32	-->	kryft (kryft@kapsi.fi) has joined #haskell
2013-09-11 12:17:40	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-11 12:18:40	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2013-09-11 12:18:42	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-11 12:18:56	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 246 seconds)
2013-09-11 12:19:08	-->	lemao (~lemao@189.60.37.42) has joined #haskell
2013-09-11 12:19:26	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-11 12:20:00	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 245 seconds)
2013-09-11 12:20:44	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Remote host closed the connection)
2013-09-11 12:21:14	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-11 12:22:15	-->	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-09-11 12:23:28	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-09-11 12:25:33	-->	weie (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-09-11 12:27:02	-->	akurei_ (~akurei@46.21.151.107) has joined #haskell
2013-09-11 12:27:28	<--	akurei (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-09-11 12:27:52	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-11 12:27:56	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 12:28:15	<--	emporas (~emporas@ppp-2-84-228-118.home.otenet.gr) has quit (Ping timeout: 276 seconds)
2013-09-11 12:28:49	kuribas	I use emacs and c-c c-l, it works well with ghci.
2013-09-11 12:28:59	-->	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has joined #haskell
2013-09-11 12:29:10	<--	xl1 (~xl@123.113.149.121) has quit (Ping timeout: 245 seconds)
2013-09-11 12:29:15	-->	maxter (~maxter@recordness.overtime.volia.net) has joined #haskell
2013-09-11 12:30:06	<--	bitonic-work (~user@77-56-49-28.dclient.hispeed.ch) has quit (Ping timeout: 264 seconds)
2013-09-11 12:30:11	-->	ismlages (~ismlages@212.174.109.55) has joined #haskell
2013-09-11 12:30:22	-->	amgarching (~matveev@theo1.theochem.tu-muenchen.de) has joined #haskell
2013-09-11 12:30:41	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (Changing host)
2013-09-11 12:30:42	-->	mirsal (~mirsal@videolan/developer/Mirsal) has joined #haskell
2013-09-11 12:31:15	<--	jkoshy (jkoshy@nat/google/x-wxrybgqkfxiyiovf) has quit (Quit: jkoshy)
2013-09-11 12:31:49	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-11 12:32:08	amgarching	Hi. Haskellers are know for abstract thinking. There is an fmap that takes a tree and produces a tree of the same shape given a function f: number -> number. There is differentiation that takes a tree and produces a tree of the same shape given a function f: tree -> number. Compare the overall structure of fmap and dd here http://pastebin.com/uRrFpYGh Arent these two somehow related? I have a feeling of re-inventing a wheel here.
2013-09-11 12:32:13	mauke	The paste uRrFpYGh has been copied to http://lpaste.net/92844
2013-09-11 12:32:21	-->	akurei__ (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has joined #haskell
2013-09-11 12:32:26	<--	akurei_ (~akurei@46.21.151.107) has quit (Ping timeout: 256 seconds)
2013-09-11 12:32:49	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 276 seconds)
2013-09-11 12:34:08	-->	doomlord__ (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-09-11 12:34:10	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Read error: Operation timed out)
2013-09-11 12:34:35	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-11 12:34:41	-->	xl1 (~xl@111.199.155.60) has joined #haskell
2013-09-11 12:34:48	merijn	amgarching: tbh I can't really tell what dd is doing
2013-09-11 12:35:56	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-09-11 12:36:15	int-e	but they're both folds.
2013-09-11 12:36:22	<--	SpyrosTrigazis (~spyrostri@conf-228.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-11 12:36:35	merijn	int-e: I figured it was probably a fold, yeah
2013-09-11 12:36:56	-->	SpyrosTrigazis (~spyrostri@conf-228.admin.grnet.gr) has joined #haskell
2013-09-11 12:37:08	-->	PatrickRobotham (~chatzilla@120.147.148.171) has joined #haskell
2013-09-11 12:38:46	merijn	oh, g is being fmapped and f is the merge that combines leaves together?
2013-09-11 12:38:54	amgarching	(ddd f x), which is partially appplied dd, differentiates f :: Tree -> Double with respect all tree elements. Derivatives are returned as a Tree of the same shape.
2013-09-11 12:38:57	merijn	Except
2013-09-11 12:39:06	merijn	Why is the terminal case then "g f x"?
2013-09-11 12:39:40	 *	merijn is confused
2013-09-11 12:39:56	amgarching	g takes a function of a single argument and differentiates it at a point, for example.
2013-09-11 12:40:03	<--	CaptainK (~CaptainK@181.178.238.15) has quit (Ping timeout: 260 seconds)
2013-09-11 12:40:50	<--	kludge` (~comet@unaffiliated/espiral) has quit (Quit: leaving)
2013-09-11 12:41:10	<--	SpyrosTrigazis (~spyrostri@conf-228.admin.grnet.gr) has quit (Ping timeout: 248 seconds)
2013-09-11 12:41:19	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-11 12:41:26	amgarching	fold translates a Tree to anything. Here the shapes of the in/out Trees are the same
2013-09-11 12:41:41	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-11 12:41:42	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Ping timeout: 248 seconds)
2013-09-11 12:41:43	<--	Michael_ (~michael@c-68-50-118-161.hsd1.md.comcast.net) has quit (Remote host closed the connection)
2013-09-11 12:41:44	amgarching	so it is too general an opertion.
2013-09-11 12:42:00	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 12:42:33	<--	petapetapeta (~Peter@shop3.diku.dk) has quit (Ping timeout: 276 seconds)
2013-09-11 12:44:22	int-e	Oh no, dd is not easily expressed as a fold; the accumulated g argument spoils the structure.
2013-09-11 12:45:07	Cale	int-e: wait, is g accumulated?
2013-09-11 12:45:10	<--	krusader (~guest@80.179.199.81.cable.012.net.il) has quit (Read error: Connection reset by peer)
2013-09-11 12:45:12	int-e	how can you apply f to a cons?
2013-09-11 12:45:23	int-e	Cale: along spines. not over the tree.
2013-09-11 12:45:58	amgarching	g isnt an accumulator. It is the constant input. In the example below (g f x) is specialized to a procedure of numerically differentiaing f(x) at x.
2013-09-11 12:46:31	amgarching	f :: Tree -> Double
2013-09-11 12:46:33	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Read error: Connection reset by peer)
2013-09-11 12:47:09	amgarching	Tree is represented as nested lists (cons cells).
2013-09-11 12:47:40	int-e	Cale, amgarching: I'm mixing up f and g.
2013-09-11 12:47:53	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Quit: amosr)
2013-09-11 12:48:13	amgarching	The terminal case f :: Double -> Double can be differentiated by "usual means". That is what g is doing.
2013-09-11 12:48:53	-->	madjestic (~madjestic@188.89.171.88) has joined #haskell
2013-09-11 12:48:58	Cale	This kind of abuse of weakly-typed lists as trees makes me feel uneasy
2013-09-11 12:49:14	int-e	how does (lambda (x) (f (cons x t)))  work? How can f be applied to a pair?
2013-09-11 12:49:17	Cale	I want to replace this with a proper tree type so that I can see what's going on
2013-09-11 12:49:30	merijn	Cale: Yeah, that was my thought too
2013-09-11 12:49:41	 *	merijn still has a hard time figuring out what dd is doing exactly
2013-09-11 12:49:54	<--	wchun (~wchun@81-232-46-25-no38.tbcn.telia.com) has quit (Quit: Leaving)
2013-09-11 12:50:46	amgarching	Original x ,where f(x) is differentiated, is also a pair in this case. This lambda makes a different pair and applies f, which is legal.
2013-09-11 12:51:05	-->	Valodim (~Valodim@mail.mugenguild.com) has joined #haskell
2013-09-11 12:51:36	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-11 12:52:29	-->	jkoshy (jkoshy@nat/google/x-bruwkfzctbajukqf) has joined #haskell
2013-09-11 12:52:39	<--	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has quit (Ping timeout: 260 seconds)
2013-09-11 12:53:37	-->	perspectival (~perspecti@37-48-41-165.tmcz.cz) has joined #haskell
2013-09-11 12:53:40	-->	luksow (~luke@apn-31-2-47-89.dynamic.gprs.plus.pl) has joined #haskell
2013-09-11 12:55:28	<--	talzeus (~studybot_@101.110.31.120) has quit (Remote host closed the connection)
2013-09-11 12:55:36	<--	csakatok_ (~csakatoku@em117-55-68-11.emobile.ad.jp) has quit (Ping timeout: 260 seconds)
2013-09-11 12:56:35	-->	csakatoku (~csakatoku@em117-55-68-161.emobile.ad.jp) has joined #haskell
2013-09-11 12:57:59	-->	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has joined #haskell
2013-09-11 12:58:08	Cale	Heh, the fact that we're consing together the results of two recursive applications of dd there is probably what makes it most confusing to Haskell programmers -- it has the appearance of a type error ;)
2013-09-11 12:58:49	-->	dubsg (~dubsg@2601:9:5b00:10d:b03d:6cf5:fc1c:d21d) has joined #haskell
2013-09-11 12:59:31	-->	Chawitsch (5cf987b7@gateway/web/freenode/ip.92.249.135.183) has joined #haskell
2013-09-11 12:59:32	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Read error: Connection reset by peer)
2013-09-11 12:59:40	-->	adinapoli (~adinapoli@217.113.163.2) has joined #haskell
2013-09-11 13:00:21	int-e	ok, so dd is polymorphic, something like   dd :: (Diff t a) => (a -> b) -> (t a -> a) -> t a -> t b, and the pair case defines an implementation instance (Diff h a, Diff t a) => Diff (h,t) a.
2013-09-11 13:00:24	<--	madjestic (~madjestic@188.89.171.88) has quit (Ping timeout: 240 seconds)
2013-09-11 13:00:43	-->	madjestic (~madjestic@188.89.171.88) has joined #haskell
2013-09-11 13:00:57	int-e	(the 't' in Diff t a represents a tuple of elements of type a)
2013-09-11 13:01:40	quicksilver	if 't' is a type of kind * -> *
2013-09-11 13:01:49	quicksilver	then how is (h,t) well formed?
2013-09-11 13:01:55	 *	quicksilver may have missed some context here
2013-09-11 13:02:10	int-e	err, the first argument should have type ((a -> a) -> b).
2013-09-11 13:02:25	hpaste	Cale pasted “Haskell version (typechecks)” at http://lpaste.net/92845
2013-09-11 13:02:29	<--	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has quit (Quit: leaving)
2013-09-11 13:02:32	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-11 13:02:44	Cale	lol, that hlint
2013-09-11 13:03:20	<--	dubsg (~dubsg@2601:9:5b00:10d:b03d:6cf5:fc1c:d21d) has quit (Ping timeout: 245 seconds)
2013-09-11 13:03:31	-->	petapetapeta (~Peter@shop3.diku.dk) has joined #haskell
2013-09-11 13:03:36	<--	Sculptor (~Sculptor@adsl6-060.ptt.rs) has quit (Ping timeout: 256 seconds)
2013-09-11 13:04:38	<--	akurei__ (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has quit (Ping timeout: 248 seconds)
2013-09-11 13:05:18	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-11 13:05:29	-->	Taneb (~nathan@host-92-23-140-113.as13285.net) has joined #haskell
2013-09-11 13:06:36	-->	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-11 13:06:37	<--	mno2 (~mno2@wlan82.cc.ntu.edu.tw) has quit (Quit: mno2)
2013-09-11 13:07:05	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 13:07:40	-->	wolfnn (~wolfnn@90.24.195.230) has joined #haskell
2013-09-11 13:07:40	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-11 13:08:15	-->	tazjin (~tazjin@2a01:2b0:3041:3018:5cdd:af5a:310f:bfec) has joined #haskell
2013-09-11 13:08:34	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 13:08:43	int-e	quicksilver: http://lpaste.net/92846
2013-09-11 13:08:58	<--	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-11 13:09:00	int-e	quicksilver: you were right about (h,t) not being well-formed, of course.
2013-09-11 13:09:19	<--	perspectival (~perspecti@37-48-41-165.tmcz.cz) has quit (Quit: Leaving.)
2013-09-11 13:09:20	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 13:09:26	-->	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-11 13:09:36	int-e	or well-kinded, really.
2013-09-11 13:09:56	<--	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has quit (Read error: Connection reset by peer)
2013-09-11 13:09:58	-->	Sculptor (~Sculptor@adsl6-060.ptt.rs) has joined #haskell
2013-09-11 13:10:13	-->	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has joined #haskell
2013-09-11 13:11:20	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 13:11:39	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 264 seconds)
2013-09-11 13:12:01	<--	Argue (~Argue@112.209.122.237) has quit (Read error: Connection reset by peer)
2013-09-11 13:12:13	quicksilver	int-e: ah. You wanted a higher-kinded (,)
2013-09-11 13:12:18	quicksilver	and, indeed, you wrote one.
2013-09-11 13:12:46	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-09-11 13:12:48	Cale	Okay, so hmm, this doesn't appear to be a straightforward catamorphism of this Tree type that I defined.
2013-09-11 13:13:05	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-11 13:13:24	Cale	It might be expressible somehow as a function-producing one...
2013-09-11 13:13:33	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 13:14:12	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-11 13:14:24	-->	chuzz (~user@unaffiliated/chuzz) has joined #haskell
2013-09-11 13:14:35	<--	effy (~quassel@222.131.154.131) has quit (Ping timeout: 245 seconds)
2013-09-11 13:14:53	hpaste	Cale revised “Haskell version (typechecks)”: “Haskell version of dd + foldTree” at http://lpaste.net/92845
2013-09-11 13:15:48	-->	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has joined #haskell
2013-09-11 13:16:07	-->	mbuf (user@nat/redhat/x-hvuitddieynyuioh) has joined #haskell
2013-09-11 13:16:18	kuribas	amgarching: This is for differentiating polynomials?
2013-09-11 13:16:48	int-e	it's for finding partial derivatives given a function that produces derivatives for single variable functions
2013-09-11 13:17:04	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-11 13:17:11	Cale	It's easy to write fmap with foldTree though.
2013-09-11 13:17:12	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-11 13:17:35	amgarching	for differentiating a function of arbitrary many arguments structured as nested lists, kuribas
2013-09-11 13:17:36	Cale	fmap f = foldTree Nil f Pair
2013-09-11 13:17:44	<--	shesek (~shesek@77.125.107.41) has quit (Ping timeout: 246 seconds)
2013-09-11 13:18:09	-->	perspectival (~perspecti@35.158.broadband4.iol.cz) has joined #haskell
2013-09-11 13:18:35	 *	hackagebot crypto-cipher-tests 0.0.5 - Generic cryptography cipher tests  http://hackage.haskell.org/package/crypto-cipher-tests-0.0.5 (VincentHanquez)
2013-09-11 13:20:20	<--	osa1 (~omer@host-18-139.ilurcco.clients.pavlovmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-11 13:21:05	amgarching	at the beginning I though of converting a tree of numbers into a tree of lambdas, Tree Double -> Tree (Double -> Tree Double), where each lambda takes a single argument and returns a Tree with that number at the proper position. I guess you call that "lenses" or similar.
2013-09-11 13:21:15	<--	Heisenmort (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 245 seconds)
2013-09-11 13:22:16	-->	phischu (~pschuster@dhcp206.uni-koblenz.de) has joined #haskell
2013-09-11 13:22:40	<--	ericmj (~ericmj@198.211.118.116) has left #haskell
2013-09-11 13:22:49	Cale	oh, I suppose it might be more consistent for my dd to produce Atom (g f x) in the Atom case
2013-09-11 13:23:31	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Leaving...)
2013-09-11 13:24:17	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 13:24:23	<--	divyansr (57ee5441@gateway/web/freenode/ip.87.238.84.65) has quit (Ping timeout: 250 seconds)
2013-09-11 13:25:00	Cale	dd :: ((Tree a -> t) -> a -> b) -> (Tree a -> t) -> Tree a -> Tree b
2013-09-11 13:25:04	Cale	then
2013-09-11 13:25:14	-->	Swizec (~swizec@BSN-142-112-173.dial-up.dsl.siol.net) has joined #haskell
2013-09-11 13:25:38	Cale	What type is t expected to be?
2013-09-11 13:26:31	Cale	hm!
2013-09-11 13:26:43	amgarching	f :: Tree Double -> Double, I think
2013-09-11 13:26:58	Cale	ah, okay
2013-09-11 13:27:05	kuribas	amgarching: Are you calculating the jacobian of a multivalued function?
2013-09-11 13:27:44	<--	epsilonhalbe (~epsilonha@62.68.205.246) has left #haskell
2013-09-11 13:27:49	amgarching	the function is singe-valued so far. So just partial derivatives.
2013-09-11 13:28:02	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-11 13:28:14	<--	xinming (~xinming@125.87.101.172) has quit (Ping timeout: 246 seconds)
2013-09-11 13:28:25	amgarching	single-valued but *multivariate*
2013-09-11 13:28:55	-->	sopvop (~sopvop@178.71.252.151) has joined #haskell
2013-09-11 13:29:24	-->	xinming (~xinming@125.87.101.172) has joined #haskell
2013-09-11 13:29:27	-->	CaptainK (~CaptainK@181.178.226.228) has joined #haskell
2013-09-11 13:29:34	<--	CaptainK (~CaptainK@181.178.226.228) has quit (Client Quit)
2013-09-11 13:29:46	-->	CaptainK (~CaptainK@181.178.226.228) has joined #haskell
2013-09-11 13:29:56	amgarching	Jacobian (as a matrix) is more appropriate for multivalued multivariate functions, I think.
2013-09-11 13:30:03	Cale	So, eliminating g and replacing it with (,) then gives dd :: (Tree a -> t) -> Tree a -> Tree (Tree a -> t, a)
2013-09-11 13:30:20	Cale	and moreover, the second component of the pairs will always be the element which was there in the original tree
2013-09-11 13:30:25	-->	gehmehgeh (~geh@unaffiliated/gehmehgeh) has joined #haskell
2013-09-11 13:30:26	Cale	so maybe we should eliminate that too...
2013-09-11 13:31:05	-->	jonkri (~jonkri@94.234.185.249) has joined #haskell
2013-09-11 13:31:05	<--	jonkri (~jonkri@94.234.185.249) has quit (Changing host)
2013-09-11 13:31:05	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 13:31:27	-->	CapitanK (~CaptainK@181.179.85.203) has joined #haskell
2013-09-11 13:31:33	-->	b__ (~basdirks@185.6.205.4) has joined #haskell
2013-09-11 13:32:18	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-09-11 13:32:39	Chawitsch	Hey guys, could you help me with something? I'm learning Haskell from LYAH and reached the part that talks about the State Monad. While I was writing some really basic code that works on list based stacks to test my knowledge I realized that I couldn't figure out why this piece of code works: runState (pop >>= return pop) [1..5].
2013-09-11 13:32:46	Chawitsch	When I use >> everything is clear as the value from the first pop is simply ignored, but I don't understand what happens exactly when I use the >>= function this way. It expects a function as its second argument, but the result of return in the Monad instance for State is a function wrapped in State. How does that work in this case?
2013-09-11 13:33:00	<--	csakatoku (~csakatoku@em117-55-68-161.emobile.ad.jp) has quit (Remote host closed the connection)
2013-09-11 13:33:21	Cale	Chawitsch: Well, it must not be a State computation then!
2013-09-11 13:33:38	-->	b0oh (~Adium@188.134.45.47) has joined #haskell
2013-09-11 13:33:44	-->	arash_ (~arash@c-453571d5.08-80-73746f22.cust.bredbandsbolaget.se) has joined #haskell
2013-09-11 13:33:46	Cale	Chawitsch: If the second argument to >>= must be a function, then the return had better be the return for the function monad :)
2013-09-11 13:34:42	Chawitsch	Hmm, shouldn't everything belong to the same monad when I use function from the Monad class? I thought that was the case.
2013-09-11 13:34:44	<--	CaptainK (~CaptainK@181.178.226.228) has quit (Ping timeout: 240 seconds)
2013-09-11 13:34:48	Cale	i.e. instance Monad ((->) e) where return x v = x; (x >>= f) v = f (x v) v
2013-09-11 13:35:02	-->	KaneTW_ (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-09-11 13:35:14	Chawitsch	It would make perfect sense to me if return in this case would be the return from the function monad. :)
2013-09-11 13:35:21	-->	shreesh (~shreesh@2002:324e:193a:1234:e8e0:13f5:7a6e:f2a1) has joined #haskell
2013-09-11 13:35:26	-->	neto (~neto@145.107.80.147) has joined #haskell
2013-09-11 13:35:27	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-11 13:35:27	Chawitsch	I just thought that's not possible.
2013-09-11 13:35:47	Cale	Well, it'll be whatever return its type demands it to be
2013-09-11 13:35:48	-->	matheus23 (~quassel@p4FDF2FFE.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 13:35:50	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 245 seconds)
2013-09-11 13:35:55	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 264 seconds)
2013-09-11 13:35:55	--	KaneTW_ is now known as KaneTW
2013-09-11 13:35:57	-->	jobstijl0 (~job@5070A080.static.ziggozakelijk.nl) has joined #haskell
2013-09-11 13:36:04	-->	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-11 13:36:05	-->	nooodl_ (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-11 13:36:10	Cale	and so if you put it in a context which needs a function, it'll have to be producing a function, so that's the instance which will be selected
2013-09-11 13:36:11	-->	ginmaniac (~ginmaniac@194.95.197.2) has joined #haskell
2013-09-11 13:36:37	amgarching	dd :: (Tree a -> t) -> Tree a -> Tree (a -> t, a), would be a list/tree of univariate lambdas paired with inital values. Also nice.
2013-09-11 13:36:39	<--	nooodl_ (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has quit (Read error: Connection reset by peer)
2013-09-11 13:37:17	Cale	amgarching: I haven't gotten that far yet :)
2013-09-11 13:37:47	Chawitsch	Alright, thanks Cale.
2013-09-11 13:37:57	-->	julmae (~no@q186.ip4.netikka.fi) has joined #haskell
2013-09-11 13:38:15	<--	dlnx` (~dlnx@hackerspace.pl) has left #haskell
2013-09-11 13:38:20	Cale	Chawitsch: for reference, you probably shouldn't abuse the function monad like that -- it still *is* confusing to see that code :)
2013-09-11 13:38:47	-->	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has joined #haskell
2013-09-11 13:39:02	Chawitsch	Yeah, I know, that's probably the reason I got confused as well. :)
2013-09-11 13:39:35	<--	shreesh (~shreesh@2002:324e:193a:1234:e8e0:13f5:7a6e:f2a1) has quit (Ping timeout: 245 seconds)
2013-09-11 13:39:50	<--	exicer (~exicer@global-1-28.nat.csx.cam.ac.uk) has quit (Ping timeout: 248 seconds)
2013-09-11 13:39:52	<--	julmac (~no@206.190.145.90) has quit (Ping timeout: 256 seconds)
2013-09-11 13:39:56	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 260 seconds)
2013-09-11 13:40:03	Chawitsch	LYAH sticks to the do notation, but I wanted to make sure I understand how to use >>= as well.
2013-09-11 13:40:25	-->	MoALTz (~no@host86-142-125-80.range86-142.btcentralplus.com) has joined #haskell
2013-09-11 13:40:31	merijn	Chawitsch: Smart, I support that approach :)
2013-09-11 13:40:43	Chawitsch	pop >> pop is much simpler though. :)
2013-09-11 13:40:50	Cale	@free dd :: Tree (Tree a -> t) -> Tree a -> Tree (Tree a -> t)
2013-09-11 13:40:51	lambdabot	(forall h. (forall k p. g . k = p . $map_Tree f                        =>                         h k = p)           =>            $map_Tree h x = y) => (forall f1 f2. g . f1 = f2 . $map_Tree f
2013-09-11 13:40:51	lambdabot	         =>                q f1 = f2) => $map_Tree q (dd x z) = dd y ($map_Tree f z)
2013-09-11 13:40:55	Cale	heh
2013-09-11 13:41:29	-->	nilsi_ (~nilsi@61.172.24.42) has joined #haskell
2013-09-11 13:41:31	merijn	Chawitsch: As Cale pointed out, which monad is used for a function like return or >>= depends on the type inferred for it
2013-09-11 13:41:37	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 13:41:41	<--	neto (~neto@145.107.80.147) has quit (Ping timeout: 245 seconds)
2013-09-11 13:42:10	merijn	> return 3 $ 5 -- Chawitsch: It's inferred here that the result of "return 3" must be a function type, as it is applied to 5, so it uses the return of the function monad
2013-09-11 13:42:11	lambdabot	  3
2013-09-11 13:42:16	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-11 13:42:23	-->	julmac (~no@206.190.145.84) has joined #haskell
2013-09-11 13:42:37	Cale	That free theorem is a barrel of monkeys
2013-09-11 13:43:18	merijn	Cale: Funny, but flinging slightly too much poo?
2013-09-11 13:43:35	quicksilver	I think Cale meant "illegal to import into the USA"
2013-09-11 13:43:37	<--	derelm (~derelm@p5B283785.dip0.t-ipconnect.de) has quit (Quit: derelm)
2013-09-11 13:43:48	-->	hamilyon (~ashaposhn@nat4.it.hh.ru) has joined #haskell
2013-09-11 13:43:48	Cale	I meant all of these things
2013-09-11 13:44:08	Cale	hmm
2013-09-11 13:44:25	donri	alternatively you could say which function you get when you type return or >>= depends on the type
2013-09-11 13:44:48	-->	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has joined #haskell
2013-09-11 13:44:57	kuribas	amgarching: What does your tree represent?  A single multivariate function?
2013-09-11 13:45:05	<--	julmae (~no@q186.ip4.netikka.fi) has quit (Ping timeout: 240 seconds)
2013-09-11 13:45:34	Chawitsch	So just to makes sure I understand things. When I use return and give it a function, then it will be the return from the function monad. If I use return this way on the right side of >>= when the left side is a stateful computation, then "return someFunction" must give back a State as well. Is that right?
2013-09-11 13:45:34	Cale	Chawitsch: It's also worth noting that this is nothing special about monads, it's just how type classes work -- you get the same context-dependent behaviour from 'read', for example.
2013-09-11 13:45:36	<--	dgpratt (~dpratt71@pool-72-65-103-227.ptldme.east.myfairpoint.net) has quit (Ping timeout: 276 seconds)
2013-09-11 13:45:41	Cale	> read "123" + 5
2013-09-11 13:45:43	lambdabot	  128
2013-09-11 13:45:58	Cale	> read "[123,456]" ++ [789]
2013-09-11 13:45:59	<--	nilsi_ (~nilsi@61.172.24.42) has quit (Remote host closed the connection)
2013-09-11 13:45:59	lambdabot	  [123,456,789]
2013-09-11 13:46:23	-->	kamatsu1 (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-11 13:47:15	donri	a bit like methods on an object, except it can depend on any variable type like the return value
2013-09-11 13:47:16	Cale	(but it is a reason that monads tend not to be a useful abstraction in most other programming languages, because obtaining this kind of type-dependent polymorphism is usually hard)
2013-09-11 13:47:32	-->	veryrandomname (~fabi@i59F6AAAA.versanet.de) has joined #haskell
2013-09-11 13:47:56	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 245 seconds)
2013-09-11 13:48:09	<--	dEPz (~depz@89-212-7-19.static.t-2.net) has quit (Remote host closed the connection)
2013-09-11 13:48:25	merijn	:t (>>=)
2013-09-11 13:48:26	lambdabot	Monad m => m a -> (a -> m b) -> m b
2013-09-11 13:48:44	merijn	Chawitsch: As you see, the right hand side of >>= is a *function* that returns a value of type "m b"
2013-09-11 13:49:00	<--	destiny (~ircguy@93.190.3.226) has quit (Ping timeout: 268 seconds)
2013-09-11 13:49:12	merijn	Chawitsch: So if the left hand side (m a) is "State Int Char" then the right hand side must be "Char -> State Int b"
2013-09-11 13:49:14	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-11 13:49:37	kuribas	:t \a b -> a >>= return b
2013-09-11 13:49:39	lambdabot	Monad m => m a -> m b -> m b
2013-09-11 13:50:10	merijn	Chawitsch: iow, if you have "return whatever" on the right hand side of ">>=" type inference will see "oh, the right hand side needs a function, so 'return' must result in a function, which can only happen if this is the return of the function monad"
2013-09-11 13:50:22	Chawitsch	I think I understand now. The implementation of >>= in the State monad applies the value from the first computation to the right hand side, therefore if I use return there like I did in my example it has to return a function.
2013-09-11 13:50:35	hpaste	int-e annotated “Haskell version (typechecks)” with “Haskell version (fold)” at http://lpaste.net/92845#a92849
2013-09-11 13:50:50	merijn	Chawitsch: Correct
2013-09-11 13:51:21	-->	RoXtein (~roxtein@di18.di.fct.unl.pt) has joined #haskell
2013-09-11 13:51:23	int-e	Cale: so it's a function producing fold (and I wasted way too much time on it.)
2013-09-11 13:51:34	merijn	Chawitsch: The same happens in my example of "(return 3) 5"
2013-09-11 13:51:45	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-09-11 13:53:10	Chawitsch	Alright, thanks guys for clearing things up for me. :)
2013-09-11 13:53:54	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 13:54:04	<--	Beetny (~Beetny@ppp118-208-6-18.lns20.bne1.internode.on.net) has quit (Ping timeout: 276 seconds)
2013-09-11 13:54:10	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 245 seconds)
2013-09-11 13:54:24	<--	madjestic (~madjestic@188.89.171.88) has quit (Ping timeout: 240 seconds)
2013-09-11 13:54:27	-->	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has joined #haskell
2013-09-11 13:55:00	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-11 13:55:54	Cale	int-e: Well done!
2013-09-11 13:56:11	Cale	int-e: Now let's see the proof of equivalence! ;)
2013-09-11 13:56:17	-->	madjestic (~madjestic@95.99.171.220) has joined #haskell
2013-09-11 13:56:37	Cale	(no, I'm pretty sure I believe it, supposing that this typechecks)
2013-09-11 13:56:48	-->	kevinqcs (~turing@183.209.53.55) has joined #haskell
2013-09-11 13:57:31	<--	kamatsu1 (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 260 seconds)
2013-09-11 13:59:23	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 13:59:32	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Read error: Connection reset by peer)
2013-09-11 13:59:37	veryrandomname	I'm using GHC.Generics to automatically derive new instances for a class  I made. When I try to automatically derive something like Double and  Int the compiler accepts, but I get <<loop>> on program  start. As a generic instance I'd like interpolerate d a b = b and I think I've done that, can somebody point me to the mistake? https://gist.github.com/veryrandomname/6522529
2013-09-11 13:59:53	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-11 14:00:29	Cale	btw, are you sure you aren't looking for the word "interpolate"?
2013-09-11 14:00:35	-->	eff_ (~quassel@222.131.154.131) has joined #haskell
2013-09-11 14:00:47	veryrandomname	fuu
2013-09-11 14:01:11	<--	kushal (kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-11 14:01:22	<--	carlosgaldino (~carlosgal@177.32.75.176) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 14:01:27	-->	kevinqcs1 (~turing@183.208.24.49) has joined #haskell
2013-09-11 14:01:48	-->	asmyers (~quassel@128.177.88.35) has joined #haskell
2013-09-11 14:02:03	-->	Hugh (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has joined #haskell
2013-09-11 14:02:06	veryrandomname	I'm probably expecting too much work from others with this question, right?
2013-09-11 14:02:18	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-11 14:02:33	<--	CapitanK (~CaptainK@181.179.85.203) has quit (Ping timeout: 256 seconds)
2013-09-11 14:02:52	Hugh	hello - please can someone point me to an article or tutorial etc about the build process in haskell. specifically, what .hi files are and how linking works? thanks
2013-09-11 14:03:03	Cale	veryrandomname: Well, hmm -- you're saying that this module here loops?
2013-09-11 14:03:17	Hugh	I am a little confused as to the role cabal plays in all this...
2013-09-11 14:03:18	-->	shesek (~shesek@77.126.185.249) has joined #haskell
2013-09-11 14:03:26	Cale	veryrandomname: What's your main?
2013-09-11 14:03:40	<--	kevinqcs (~turing@183.209.53.55) has quit (Ping timeout: 256 seconds)
2013-09-11 14:03:41	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-09-11 14:03:42	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-09-11 14:03:50	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 248 seconds)
2013-09-11 14:04:08	veryrandomname	Cale: oh you think the main would be responsible? I can send upload it, but I'm pretty sure the generic derivation is the problem
2013-09-11 14:04:12	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-11 14:04:25	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 240 seconds)
2013-09-11 14:04:28	dcoutts	Hugh: familiar with gcc + make ?  the analogy is ghc + cabal. The .o and .hi files are related to the compiler, and then cabal just manages where files go, dependencies etc
2013-09-11 14:04:33	Cale	veryrandomname: It might be, but it's hard to see where the loop is if I don't know how to reproduce it :P
2013-09-11 14:04:58	veryrandomname	just try instance Interpolerate Int
2013-09-11 14:05:06	<--	codesoup (~codesoup@76-10-180-15.dsl.teksavvy.com) has quit (Ping timeout: 276 seconds)
2013-09-11 14:05:21	dcoutts	Hugh: or perhaps more accurately, cabal has equivalent features to ./configure + make + make install, plus some automation for installing dependencies
2013-09-11 14:05:36	veryrandomname	Cale: oh wait you're right. instance Interpolerate Int will work, but if you try to actually use the function it will loop
2013-09-11 14:05:45	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Ping timeout: 276 seconds)
2013-09-11 14:05:46	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-11 14:05:46	Hugh	yes, thanks that is clear. So the .hi files are 'headers' and the .o files are binaries?
2013-09-11 14:05:54	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-11 14:06:31	<--	PatrickRobotham (~chatzilla@120.147.148.171) has quit (Ping timeout: 264 seconds)
2013-09-11 14:06:38	veryrandomname	 Cale: I'll set something up, but let me first change Interpolerate to Interpolate^^
2013-09-11 14:06:41	Cale	veryrandomname: I'm just saying, if you want help with stuff, it's generally more helpful to give a module which can be compiled (or which at least evokes the compile errors you're having trouble with) :)
2013-09-11 14:07:00	veryrandomname	Cale: I'll do that
2013-09-11 14:07:38	nh2	Hugh: close, but .hi files are not written by the programmer as compared to .h files, and do more. Try running `ghc --show-iface` on one
2013-09-11 14:07:48	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-09-11 14:07:57	Cale	veryrandomname: The instance you have for Int works for me
2013-09-11 14:07:58	<--	Chawitsch (5cf987b7@gateway/web/freenode/ip.92.249.135.183) has quit (Quit: Page closed)
2013-09-11 14:07:59	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-11 14:08:03	<--	jon_r (~jon_r@unaffiliated/jon-r/x-7174399) has quit (Quit: Computer has gone to sleep.)
2013-09-11 14:08:24	veryrandomname	Cale: yeah sure, but try the generic derivation
2013-09-11 14:08:48	Hugh	@nh2 wow there is a bunch of stuff there!
2013-09-11 14:08:48	lambdabot	Maybe you meant: thx ghc
2013-09-11 14:08:57	nh2	Hugh: they specify types, dependencies (for checking and compilation avoidance), inlinings (for cross-module code inlining -> performance) and a few other things
2013-09-11 14:09:09	kuribas	Can I see which function definitions are in the interface file?
2013-09-11 14:09:12	-->	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has joined #haskell
2013-09-11 14:09:17	Hugh	(btw, on this chanel how does one reply to another person specifically?)
2013-09-11 14:09:20	<--	shesek (~shesek@77.126.185.249) has quit (Ping timeout: 260 seconds)
2013-09-11 14:09:31	nh2	kuribas: yes, also ghc --show-iface
2013-09-11 14:09:42	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-11 14:10:01	Hugh	so to clarify, doing a standard ghc on a single .hs file will produce a single .hi and a single .o file?
2013-09-11 14:10:03	nh2	Hugh: just mention their name in the text, like "Hugh: .."
2013-09-11 14:10:12	Hugh	nh2 got it
2013-09-11 14:10:20	Hugh	nh2: got it
2013-09-11 14:10:50	nh2	Hugh: yes, that's what it will typically produce
2013-09-11 14:10:54	kuribas	nh2: I don't see any function definitions, only types.  Does it mean ghc doesn't inline any definition?
2013-09-11 14:11:40	-->	JobV (~Adium@wndsnyhed01-pool1-a130.wndsny.tds.net) has joined #haskell
2013-09-11 14:11:45	<--	ndonaldson (~nic@61.69.24.113) has quit (Ping timeout: 240 seconds)
2013-09-11 14:11:53	-->	codesoup (~codesoup@69-165-129-17.dsl.teksavvy.com) has joined #haskell
2013-09-11 14:11:53	Hugh	nh2 thanks for your help on this one!
2013-09-11 14:11:54	Cale	ghci> to $ ginterpolerate 0.4 (from $ Just (20 :: Int)) (from $ Just (50 :: Int)) :: Maybe Int
2013-09-11 14:11:54	Cale	Just 32
2013-09-11 14:12:00	Cale	veryrandomname: Well, that much worked
2013-09-11 14:12:22	-->	CapitanK (~CaptainK@181.178.229.2) has joined #haskell
2013-09-11 14:12:28	nh2	kuribas: If ghc inlines functions inside your module, that won't be reflected in the interface file, but if ghc thinks a function might be useful to be inlined in *another* module, it will put the code (core form of it) into the interface file. You have to compile with -O or -O2 for that
2013-09-11 14:12:39	<--	Jonno_FTW (~come@9ch.in) has quit (Remote host closed the connection)
2013-09-11 14:13:14	nh2	Hugh: if you want to learn more about the build process with ghc only or with cabal, you can pass a -v to both of them; you can get more output with -v3
2013-09-11 14:13:30	<--	ibab (igor@2600:3c03::f03c:91ff:feae:d6dd) has quit (Quit: WeeChat 0.4.0)
2013-09-11 14:13:36	veryrandomname	Cale: ok you misunderstood me. just wait a sec, I'll upload a file
2013-09-11 14:13:49	-->	Kaini (~kaini@078132075217.public.t-mobile.at) has joined #haskell
2013-09-11 14:13:50	<--	Kaini (~kaini@078132075217.public.t-mobile.at) has quit (Changing host)
2013-09-11 14:13:50	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-09-11 14:14:01	<--	thunderrd (~thunderrd@119.42.78.38) has quit (Quit: If it wasn't written down, it didn't happen...)
2013-09-11 14:14:25	<--	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-09-11 14:14:40	-->	CaptainK (~CaptainK@181.179.56.181) has joined #haskell
2013-09-11 14:14:53	-->	exFalso (~exfalso@85-238-92-95.pool.digikabel.hu) has joined #haskell
2013-09-11 14:15:02	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:a12:629f:af85:248b:4a01:cec8) has joined #haskell
2013-09-11 14:15:12	exFalso	Hi, is there a way to use hxt with a ByteString input html?
2013-09-11 14:15:25	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 14:15:30	donri	exFalso: decode it to text and unpack it to string :p
2013-09-11 14:15:53	exFalso	donri: sounds... efficient
2013-09-11 14:15:59	donri	nope
2013-09-11 14:16:29	donri	exFalso: hxt isn't very efficient anyway, might want to look at hexpat or xml-conduit
2013-09-11 14:16:35	Cale	HXT is a bit older than ByteString
2013-09-11 14:16:35	exFalso	hxt has really nice features and its so weird that it needs a String input
2013-09-11 14:16:48	kuribas	nh2: Thanks, I didn't know this.
2013-09-11 14:16:48	donri	agreed
2013-09-11 14:16:57	-->	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 14:16:59	veryrandomname	Cale: try this https://gist.github.com/veryrandomname/6522738
2013-09-11 14:17:09	exFalso	donri: will look into xml-conduit, ty
2013-09-11 14:17:30	Cale	I can also vouch for the usability of hexpat-pickle
2013-09-11 14:17:53	donri	i prefer xml-picklers
2013-09-11 14:18:02	Cale	veryrandomname: oh
2013-09-11 14:18:05	Cale	er...
2013-09-11 14:18:07	nh2	exFalso: "haskell has really nice features so it's weird that it has string as a default datatype, duplicate elimination takes n² and it stack overflows on large input" :P
2013-09-11 14:18:13	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-11 14:18:36	 *	hackagebot http-conduit 1.9.5 - HTTP client package with conduit interface and HTTPS support.  http://hackage.haskell.org/package/http-conduit-1.9.5 (MichaelSnoyman)
2013-09-11 14:18:51	<--	CapitanK (~CaptainK@181.178.229.2) has quit (Ping timeout: 264 seconds)
2013-09-11 14:18:55	merijn	exFalso: I have a good experience with html-conduit for dealing with HTML
2013-09-11 14:19:04	Cale	I like String as a default.
2013-09-11 14:19:15	Cale	It's good for many many small programs.
2013-09-11 14:19:16	merijn	exFalso: It plays very nicely with http-coduit too, giving you an easy way to fetch documents
2013-09-11 14:19:22	Cale	and it's reasonably easy to work with
2013-09-11 14:19:34	nh2	exFalso: just mind that the input might not be wellformed ... depending on the purpose
2013-09-11 14:19:35	merijn	exFalso: (html-conduit is essentially the html variation of xml-conduit, the API is mostly the same)
2013-09-11 14:19:43	Cale	The other two are strawmen :)
2013-09-11 14:19:53	<--	mbuf (user@nat/redhat/x-hvuitddieynyuioh) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 14:20:20	kuribas	hackage doesn't like -O2.  Is there any reason not to use it?
2013-09-11 14:20:23	donri	string is nice in the same way lazy io is nice: sort of beautiful in theory, often awful in practice :p
2013-09-11 14:20:38	donri	kuribas: slower compilation
2013-09-11 14:20:41	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 14:20:44	merijn	kuribas: Not really, it might increase compile time a bit
2013-09-11 14:20:50	merijn	kuribas: That's about it
2013-09-11 14:20:52	<--	nexx (~nexx@unaffiliated/xxen) has quit (Ping timeout: 245 seconds)
2013-09-11 14:21:07	nh2	Cale: never would I dare employing such! :D
2013-09-11 14:21:14	<--	satc (~smuxi@202.3.77.239) has quit (Ping timeout: 256 seconds)
2013-09-11 14:21:26	<--	CaptainK (~CaptainK@181.179.56.181) has quit (Ping timeout: 240 seconds)
2013-09-11 14:21:50	nh2	kuribas: often -O2 does not help you much over O
2013-09-11 14:21:52	-->	oleo (~oleo@xdsl-84-44-155-46.netcologne.de) has joined #haskell
2013-09-11 14:22:05	exFalso	merijn: thanks, my use case is scraping that's why i liked the hxt arrows
2013-09-11 14:22:38	donri	exFalso: hxt doesn't really need to be an arrow though
2013-09-11 14:22:55	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-11 14:23:11	<--	cads (~m@adsl-74-160-16-161.asm.bellsouth.net) has quit (Ping timeout: 260 seconds)
2013-09-11 14:23:11	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 246 seconds)
2013-09-11 14:23:16	-->	dgpratt (~dpratt71@207.182.200.34) has joined #haskell
2013-09-11 14:23:57	<--	sopvop (~sopvop@178.71.252.151) has quit (Quit: Konversation terminated!)
2013-09-11 14:23:58	-->	shesek (~shesek@77.126.185.249) has joined #haskell
2013-09-11 14:24:11	-->	beaky (~beaky@92.99.13.63) has joined #haskell
2013-09-11 14:24:13	beaky	hello
2013-09-11 14:24:22	beaky	how to do for loop in haskel
2013-09-11 14:24:36	beaky	ah forM_
2013-09-11 14:24:37	merijn	exFalso: ok, then definitely check out http-conduit and html-conduit together
2013-09-11 14:25:00	-->	Maerten (~maarten@ip89-219-208-87.adsl2.static.versatel.nl) has joined #haskell
2013-09-11 14:25:09	-->	functorfun (~functorfu@122.193.dsl.syd.iprimus.net.au) has joined #haskell
2013-09-11 14:25:11	--	functorfun is now known as funfunctor
2013-09-11 14:25:13	kuribas	I also find that -Wall gives a lot of garbage.
2013-09-11 14:25:14	donri	exFalso: but, hxt can handle the http side for you too with hxt-{http,curl} (and you can speed it up a bit with hxt-hexpat)
2013-09-11 14:25:53	nh2	kuribas: -Wall is great. You should always use it. Which output do you not like? I can convert you :)
2013-09-11 14:26:05	merijn	donri: Sure, but why bother if you're going to use html/xml conduit? Might as well use http-conduit then
2013-09-11 14:26:09	donri	-Wall is too lenient :(
2013-09-11 14:26:20	merijn	-Wall -Werror!
2013-09-11 14:26:21	donri	merijn: i meant if you're already using hxt
2013-09-11 14:26:41	donri	merijn: i didn't mean that it only warns, i mean that it excludes some useful warnings
2013-09-11 14:26:46	kuribas	For example: Warning: Defined but not used: `dmin'
2013-09-11 14:26:48	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 14:27:00	nh2	donri: what would you like to have more than -Wall?
2013-09-11 14:27:12	donri	-fwarn-tabs and -fwarn-missing-import-lists comes to mind
2013-09-11 14:27:16	kuribas	 Warning: Top-level binding with no type signature:
2013-09-11 14:27:27	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-11 14:27:31	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-09-11 14:27:39	donri	kuribas: why is it garbage to know that code is unused?
2013-09-11 14:27:57	merijn	kuribas: defined but not used == delete
2013-09-11 14:28:09	nh2	kuribas: look at this: https://github.com/meteficha/mtl/commit/a60fc2695c5e1bfe72e564c53b88ef266957a00d it breaks the world
2013-09-11 14:28:32	nh2	a simple -Wall would have immediately revealed this error
2013-09-11 14:28:38	merijn	donri: What's -fwarn-missing-import-lists do?
2013-09-11 14:28:42	-->	Afish (~Miranda@mail.vsoft.pl) has joined #haskell
2013-09-11 14:28:53	-->	exicer (~exicer@host81-149-102-120.in-addr.btopenworld.com) has joined #haskell
2013-09-11 14:29:00	kuribas	I use the variable in another definition of the function.
2013-09-11 14:29:01	donri	merijn: warn for open imports
2013-09-11 14:29:14	nh2	donri: granted
2013-09-11 14:29:19	merijn	donri: But <3 open imports
2013-09-11 14:29:23	<--	asmyers (~quassel@128.177.88.35) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-11 14:29:33	donri	merijn: i tend to use qualified imports
2013-09-11 14:29:39	-->	asmyers (~quassel@128.177.88.72) has joined #haskell
2013-09-11 14:29:49	donri	merijn: open imports make proper PVP awful
2013-09-11 14:29:49	nh2	kuribas: if you want to name something that you really do not want to use, you can write an underscore in front of it: _dmin
2013-09-11 14:29:52	kuribas	donri: line 45 https://github.com/kuribas/cubicbezier/blob/master/Geom2D/CubicBezier/Intersection.hs
2013-09-11 14:29:53	merijn	I have better things to do than specify all of Control.Applicative,Control.Monad,Control.Conccurrent every time
2013-09-11 14:29:58	merijn	donri: Why?
2013-09-11 14:30:40	donri	merijn: you are allowed to add new exports without bumping the A.B, which means if you depend on A.B.* and use an open import you can get name conflicts
2013-09-11 14:30:44	merijn	kuribas: Use _ or _dmin instead?
2013-09-11 14:30:48	-->	vijaykiran (~user@213.208.206.28) has joined #haskell
2013-09-11 14:31:13	merijn	kuribas: Variables starting with _ don't cause unused warnings
2013-09-11 14:31:16	nh2	kuribas: yes, _ would be appropriate here, as it is used for the last argument
2013-09-11 14:31:19	kuribas	Oh, I see.
2013-09-11 14:32:48	merijn	donri: meh, I'd rather fix that once, should it ever happen than write out the imports every single time
2013-09-11 14:33:03	donri	merijn: or use qualified imports ;)
2013-09-11 14:33:10	donri	granted, they suck for operators
2013-09-11 14:33:18	merijn	donri: They suck for functions too
2013-09-11 14:33:25	-->	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has joined #haskell
2013-09-11 14:33:31	nh2	donri: do you do it with Prelude as well? :P
2013-09-11 14:33:43	nh2	sb. might hide catch from the prelude
2013-09-11 14:34:14	kuribas	Also, do I need to specify all typesignature?  Even when it is obvious?
2013-09-11 14:34:18	donri	you'd love my code, all qualified imports, named like the origin package, with ' on strict modules, very few operators and parenthesis preferred over ($) ;)
2013-09-11 14:34:25	merijn	kuribas: And as far as the "top level binding with no signature" I'm a firm believer that top level definitions should always have type signatures
2013-09-11 14:34:51	donri	also i avoid layout alignment, only indenting
2013-09-11 14:35:11	merijn	kuribas: Define obvious? I just looked at findOuter and aside from the 2nd argument being a list, I have no clue what it's type is
2013-09-11 14:35:11	<--	sleepynate (~sleepynat@172-5-214-180.lightspeed.livnmi.sbcglobal.net) has quit (Remote host closed the connection)
2013-09-11 14:35:34	nh2	kuribas: yes, top level functions with type signatures is great for defining your api, like you do in a .h file as well. Due to type inference, many things are not obvious, e.g. x = 1 can have all kinds of types
2013-09-11 14:35:49	donri	nh2: i do it with prelude if i would otherwise need a "hiding"
2013-09-11 14:36:01	donri	and i don't "as" it ;)
2013-09-11 14:36:16	beaky	how do you bubble sort a list in haskell
2013-09-11 14:36:25	merijn	kuribas: Or, for example, what the type of 'd' in intersectPt is
2013-09-11 14:36:26	kuribas	I see...
2013-09-11 14:36:35	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-11 14:36:43	kuribas	Double
2013-09-11 14:36:54	<--	edon (~user@albalug/edon) has quit (Remote host closed the connection)
2013-09-11 14:37:01	merijn	kuribas: Try looking at this code 3 years from now and see if you remember ;)
2013-09-11 14:37:10	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-11 14:37:15	nh2	beaky: use e.g. http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html#v:insert if you don't want to implement that yourself
2013-09-11 14:37:16	kuribas	That's a good point :)
2013-09-11 14:37:32	beaky	ah
2013-09-11 14:37:34	merijn	kuribas: I could find out that it's Double, by looking up the definition of Point, but I'm lazy. It'd be much nicer if it said right there what it was
2013-09-11 14:37:36	beaky	thanks
2013-09-11 14:37:56	-->	julmae (~no@q186.ip4.netikka.fi) has joined #haskell
2013-09-11 14:38:19	-->	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has joined #haskell
2013-09-11 14:38:39	quchen	You don't bubblesort in Haskell. :-s
2013-09-11 14:38:45	merijn	kuribas: Usually if I'm exploring a haskell codebase I'll be looking at the types and not so much at the actual code.
2013-09-11 14:39:12	quchen	Bubblesort is used only because it's super simple to implement and the algorithm is easy to understand. Both of these are done better by Haskell's list quicksort. :-)
2013-09-11 14:39:26	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-11 14:39:45	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 14:39:48	-->	Sorella (~quildreen@187.20.218.214) has joined #haskell
2013-09-11 14:39:48	<--	Sorella (~quildreen@187.20.218.214) has quit (Changing host)
2013-09-11 14:39:48	-->	Sorella (~quildreen@oftn/member/Sorella) has joined #haskell
2013-09-11 14:39:56	beaky	ah
2013-09-11 14:40:10	beaky	but i heard the list qsort is actually bad even though it looks very elegant
2013-09-11 14:40:15	donri	merijn: better still when i *do* use unqualified imports, i use import lists and *one import line per imported name*" :)
2013-09-11 14:40:17	-->	julmuri (~no@109.123.79.238) has joined #haskell
2013-09-11 14:40:19	donri	i'm crazy, i know
2013-09-11 14:40:23	-->	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has joined #haskell
2013-09-11 14:40:31	<--	julmac (~no@206.190.145.84) has quit (Ping timeout: 256 seconds)
2013-09-11 14:40:35	-->	amosr (~amos@28.30.233.220.static.exetel.com.au) has joined #haskell
2013-09-11 14:40:38	quchen	You wouldn't want to use that list quicksort in production, no.
2013-09-11 14:40:40	merijn	donri: How are your modules not 1500 lines of imports?
2013-09-11 14:40:47	quchen	If you want to sort a list, use Data.List.sort.
2013-09-11 14:40:50	donri	merijn: because i mostly use qualified imports
2013-09-11 14:40:54	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-09-11 14:40:59	quchen	(List.sort is Mergesort on steroids.)
2013-09-11 14:41:10	nh2	donri: you should use Cucumber Haskell!
2013-09-11 14:41:19	quchen	nh2: Get out ;-)
2013-09-11 14:41:37	donri	merijn: i'm still experimenting with style though. the idea is to optimize for tool friendliness. tools are line-oriented.
2013-09-11 14:41:48	<--	pygospa (~Pygosceli@kiel-d9bfc688.pool.mediaWays.net) has quit (Disconnected by services)
2013-09-11 14:41:58	-->	TheRealPygo (~Pygosceli@kiel-d9bfcf55.pool.mediaWays.net) has joined #haskell
2013-09-11 14:42:05	donri	merijn: this makes for fewer merge conflicts, and if there's an error or warning for an import it points at the *exact* imported name
2013-09-11 14:42:27	nh2	donri: "when I want to define the module MyModule, I better import the module Data.List, but qualified, with the beautiful short-cut name List, and I import the function foldl and also foldr and also foldl1 but I do not wish to see the function nub"
2013-09-11 14:42:40	-->	steshaw (~steshaw@CPE-1-121-191-4.qwl9.woo.bigpond.net.au) has joined #haskell
2013-09-11 14:42:46	<--	julmae (~no@q186.ip4.netikka.fi) has quit (Ping timeout: 248 seconds)
2013-09-11 14:42:48	quchen	donri: Speaking of explicit import lists, is there a nice way to find out where a name was defined if there is no import list? (Grep is my current approach.)
2013-09-11 14:42:50	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-11 14:43:22	quchen	(Or searching the Haddock index.)
2013-09-11 14:43:24	donri	quchen: yeah that's another point in favor or "proper imports". but you can use hdevtools for example to find out what ghc thinks.
2013-09-11 14:43:32	<--	oddsignals (~oddsignal@cm-84.211.85.228.getinternet.no) has quit (Quit: Lost terminal)
2013-09-11 14:43:39	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-11 14:43:41	<--	Hugh (~hugh@cpc7-brig16-2-0-cust345.3-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-11 14:43:52	donri	:HdevtoolsInfo in vim gives you the ghci :info for the name under cursor, basically
2013-09-11 14:44:11	-->	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has joined #haskell
2013-09-11 14:44:17	veryrandomname	How can I see the value of GHC.Generics.from (5::Int)? Or does somebody know what GHC.Generics representation Numbers have?
2013-09-11 14:44:23	nh2	quchen: how is that AMP stuff going, I'm very interested
2013-09-11 14:44:39	<--	steshaw (~steshaw@CPE-1-121-191-4.qwl9.woo.bigpond.net.au) has quit (Client Quit)
2013-09-11 14:44:46	donri	veryrandomname: if you bind it to a name you can :t the name
2013-09-11 14:45:00	-->	steshaw (~steshaw@CPE-1-121-191-4.qwl9.woo.bigpond.net.au) has joined #haskell
2013-09-11 14:45:03	veryrandomname	donri: cool thanks!
2013-09-11 14:45:05	donri	veryrandomname: and it should give you the concrete type rather than the type family
2013-09-11 14:45:27	donri	veryrandomname: you could also use standalone deriving to derive Show for the generic representation types
2013-09-11 14:45:45	donri	veryrandomname: (i've proposed that for inclusion upstream, but it's not there yet)
2013-09-11 14:46:06	<--	tensorpudding (~tensorpud@99.148.203.65) has quit (Ping timeout: 240 seconds)
2013-09-11 14:46:42	<--	jkoshy (jkoshy@nat/google/x-bruwkfzctbajukqf) has quit (Quit: jkoshy)
2013-09-11 14:47:52	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 256 seconds)
2013-09-11 14:47:59	<--	steshaw (~steshaw@CPE-1-121-191-4.qwl9.woo.bigpond.net.au) has quit (Client Quit)
2013-09-11 14:48:06	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-11 14:48:36	nh2	have to go, quchen I will annoy you later with my questions :)
2013-09-11 14:48:41	-->	dfan (~user@vpn.harmonixmusic.com) has joined #haskell
2013-09-11 14:48:56	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 14:49:05	-->	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has joined #haskell
2013-09-11 14:49:12	-->	Mortomes|Uni (~Mortomes_@145.107.80.101) has joined #haskell
2013-09-11 14:49:18	<--	Mortomes|Uni (~Mortomes_@145.107.80.101) has quit (Changing host)
2013-09-11 14:49:19	-->	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-11 14:49:50	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 240 seconds)
2013-09-11 14:50:35	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-09-11 14:50:46	<--	ashnur (~ashnur@79.117.70.30) has quit (Ping timeout: 275 seconds)
2013-09-11 14:51:15	-->	akegalj_ (~akegalj@93-141-84-22.adsl.net.t-com.hr) has joined #haskell
2013-09-11 14:51:37	quchen	@tell nh2 Coding is finished, what's left is hoping thoughtpolice can manage my nooby patches
2013-09-11 14:51:37	lambdabot	Consider it noted.
2013-09-11 14:52:37	-->	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has joined #haskell
2013-09-11 14:52:58	-->	statix (~Nima@catv-80-98-128-158.catv.broadband.hu) has joined #haskell
2013-09-11 14:53:38	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-09-11 14:55:07	-->	justinleitgeb (~justinlei@186.101.162.167) has joined #haskell
2013-09-11 14:55:09	<--	akegalj (~akegalj@93-138-64-112.adsl.net.t-com.hr) has quit (Ping timeout: 276 seconds)
2013-09-11 14:55:11	beaky	is archlinux the best linux distro for haskell
2013-09-11 14:55:43	quchen	No.
2013-09-11 14:55:54	<--	milessabin (~miles@private.milessabin.com) has quit (Ping timeout: 264 seconds)
2013-09-11 14:55:59	shiona	My understanding is that since everyone install everything with cabal the underlying system doesn't really matter
2013-09-11 14:56:23	beaky	ah
2013-09-11 14:56:26	veryrandomname	shiona: but ghc isn't installed with cabal
2013-09-11 14:57:36	veryrandomname	ghc on ubuntu is probably older than ghc on arch
2013-09-11 14:57:50	<--	xl1 (~xl@111.199.155.60) has quit (Ping timeout: 246 seconds)
2013-09-11 14:58:02	-->	nycs (~nycs@rrcs-24-39-141-128.nyc.biz.rr.com) has joined #haskell
2013-09-11 14:58:22	-->	CaptainK (~CaptainK@181.179.32.18) has joined #haskell
2013-09-11 14:58:23	shiona	can be, but I don't think that having one fresher package in the repositories is quite worth the extra work that is to keep arch running
2013-09-11 14:58:27	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 14:58:59	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 14:59:29	-->	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has joined #haskell
2013-09-11 14:59:40	<--	nh2 (~niklas@r002213.203112.miinet.jp) has quit (Quit: Leaving.)
2013-09-11 14:59:55	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 15:00:13	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 15:01:02	<--	`^_^v (~nycs@ip-64-32-224-203.nyc.megapath.net) has quit (Ping timeout: 240 seconds)
2013-09-11 15:01:08	-->	CapitanK (~CaptainK@181.179.39.177) has joined #haskell
2013-09-11 15:01:28	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-11 15:01:52	<--	CaptainK (~CaptainK@181.179.32.18) has quit (Read error: Connection reset by peer)
2013-09-11 15:03:12	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-09-11 15:03:45	kuribas	Where can I find a description of the strictness annotations in the interface file?
2013-09-11 15:04:22	<--	amosr (~amos@28.30.233.220.static.exetel.com.au) has quit (Quit: amosr)
2013-09-11 15:04:24	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:a12:629f:af85:248b:4a01:cec8) has quit (Ping timeout: 260 seconds)
2013-09-11 15:04:36	-->	jmcarthur_mobile (~jmcarthur@172.56.4.24) has joined #haskell
2013-09-11 15:04:47	kuribas	For example:  {- Arity: 2, HasNoCafRefs, Strictness: U(LLLL)U(L)
2013-09-11 15:04:52	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-11 15:05:15	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 15:05:17	-->	shahn (~shahn@37-5-17-167-dynip.superkabel.de) has joined #haskell
2013-09-11 15:05:18	-->	tensorpudding (~tensorpud@99.148.195.184) has joined #haskell
2013-09-11 15:05:42	kuribas	Ok, I found it in the manual.
2013-09-11 15:06:30	<--	julmuri (~no@109.123.79.238) has quit (Read error: Connection reset by peer)
2013-09-11 15:06:58	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-11 15:07:38	-->	julmac (~no@109.123.79.238) has joined #haskell
2013-09-11 15:08:02	-->	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has joined #haskell
2013-09-11 15:08:47	donri	beaky: arch is bad for haskell because they prefer packaging the latest ghc over packaging a correct haskell-platform (but they still pretend to package platform, but broken)
2013-09-11 15:09:00	beaky	ah
2013-09-11 15:09:04	<--	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has quit (Ping timeout: 260 seconds)
2013-09-11 15:09:04	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-11 15:09:05	beaky	thats bad
2013-09-11 15:09:16	beaky	no wonder my haskell is always broken in arch :(
2013-09-11 15:09:20	merijn	donri: Linux distro's shipping a broken haskell platform? No, that can't be :p
2013-09-11 15:09:24	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 256 seconds)
2013-09-11 15:09:32	-->	b1collector (47a20440@gateway/web/freenode/ip.71.162.4.64) has joined #haskell
2013-09-11 15:09:38	beaky	so i should use haskell on osx?
2013-09-11 15:09:39	donri	merijn: sarcasm?
2013-09-11 15:09:51	donri	it's never been broken on fedora...
2013-09-11 15:10:35	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-11 15:10:40	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 15:10:41	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-11 15:10:54	-->	flazz_gone (~flazz@2001:4800:780d:509:8f7b:f0fa:ff04:5ae7) has joined #haskell
2013-09-11 15:10:54	<--	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 264 seconds)
2013-09-11 15:10:55	k00mi	beaky: are you aware of the haskell repos for arch?
2013-09-11 15:11:00	merijn	donri: Maybe, but the only people I ever see complain/ask questions about/have problems with broken platform tend to be on linux
2013-09-11 15:11:04	-->	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-11 15:11:06	beaky	i never tried those repo
2013-09-11 15:11:12	bergmark	beaky: you could also just install the regular HP
2013-09-11 15:11:16	donri	merijn: yeah i think ubuntu likes to ship it broken too
2013-09-11 15:11:21	merijn	donri: My logical conclusion has been that them breaking it is not very rare
2013-09-11 15:11:29	 *	ocharles is a happy NixOS & Haskell user
2013-09-11 15:11:38	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-09-11 15:11:40	beaky	nixos wow
2013-09-11 15:12:09	donri	merijn: although i think we might be talking about different kinds of brokenness. i mean shipping a haskell-platform package but with versions not specified for that platform version.
2013-09-11 15:12:20	-->	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has joined #haskell
2013-09-11 15:12:55	<--	Afish (~Miranda@mail.vsoft.pl) has quit (Ping timeout: 245 seconds)
2013-09-11 15:13:02	-->	talzeus__ (~studybot_@113.37.230.101) has joined #haskell
2013-09-11 15:13:22	quchen	Eh?
2013-09-11 15:13:23	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-11 15:13:36	quchen	It's a package full of things that are sort of related to the current release of the HP?
2013-09-11 15:13:52	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-09-11 15:13:55	donri	quchen: something like that. the same packages, but different versions.
2013-09-11 15:13:58	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-11 15:13:59	veryrandomname	donri: I've looked up haskell platform on arch. it seems all cool https://aur.archlinux.org/packages/haskell-platform/
2013-09-11 15:14:21	donri	veryrandomname: that's on AUR and ancient
2013-09-11 15:14:23	<--	[1]tufflax (~tufflax@80.217.106.199) has quit (Read error: Connection reset by peer)
2013-09-11 15:14:39	veryrandomname	donri: there isn't anything else
2013-09-11 15:14:52	quchen	Just compile the HP yourself (bonus points: that checks whether your build system is setup alright) and those problems seize to exist
2013-09-11 15:15:25	donri	veryrandomname: i could be misremembering or they stopped shipping it
2013-09-11 15:15:29	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-11 15:16:25	-->	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has joined #haskell
2013-09-11 15:16:48	veryrandomname	I don't think the os is that important. all I read is that using windows + haskell is annoying, everything else seems ok.
2013-09-11 15:16:54	<--	talzeus (~studybot_@s207.213.146.210.fls.vectant.ne.jp) has quit (Ping timeout: 248 seconds)
2013-09-11 15:17:01	<--	jml (~jml@2a01:e0b:1:116:ad8d:d5f0:ffad:8ba1) has quit (Changing host)
2013-09-11 15:17:01	-->	jml (~jml@unaffiliated/jml) has joined #haskell
2013-09-11 15:17:44	-->	arianvp (~git@82.196.10.105) has joined #haskell
2013-09-11 15:17:47	sellout-	veryrandomname: s/\+ haskell//
2013-09-11 15:18:14	arianvp	> map (+3) [1,2,3]
2013-09-11 15:18:15	lambdabot	  [4,5,6]
2013-09-11 15:18:30	<--	Tritlo (~Tritlo@2a00:c88:4000:e00e:8ea9:82ff:feac:7690) has quit (Ping timeout: 246 seconds)
2013-09-11 15:18:43	veryrandomname	sellout-: what does 's/\+ haskell//' mean?
2013-09-11 15:19:26	-->	Hannibal_Smith (~ff130493@host141-116-dynamic.51-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-11 15:19:50	-->	FreeFull (~freefull@defocus/sausage-lover) has joined #haskell
2013-09-11 15:20:27	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-09-11 15:20:39	-->	shreesh (~shreesh@209.104.235.1) has joined #haskell
2013-09-11 15:21:11	<--	arenz (arenz@nat/ibm/x-sxsofflsslobebfy) has quit (Read error: Operation timed out)
2013-09-11 15:21:17	<--	copumpkin (~copumpkin@unaffiliated/copumpkin) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 15:21:18	-->	dwins (~dwins@75.103.7.74) has joined #haskell
2013-09-11 15:21:34	saep1	veryrandomname: replace the literal string "+ haskell" with the empty string ""
2013-09-11 15:21:45	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-11 15:22:08	veryrandomname	saep1: oh
2013-09-11 15:22:27	<--	b__ (~basdirks@185.6.205.4) has quit (Ping timeout: 240 seconds)
2013-09-11 15:22:29	<--	dwins (~dwins@75.103.7.74) has left #haskell
2013-09-11 15:22:44	<--	perlite (~perlite@1-164-208-45.dynamic.hinet.net) has quit (Quit: leaving)
2013-09-11 15:22:53	-->	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has joined #haskell
2013-09-11 15:22:55	-->	kobain (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-11 15:23:21	-->	perlite (~perlite@1-164-208-45.dynamic.hinet.net) has joined #haskell
2013-09-11 15:23:44	<--	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2013-09-11 15:23:49	beaky	how do I use haskell to make apps
2013-09-11 15:24:08	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-11 15:24:17	Taneb	beaky, what kind of apps?
2013-09-11 15:24:21	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-09-11 15:24:22	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-11 15:24:27	-->	fizbin (~Adium@pool-173-72-91-234.cmdnnj.east.verizon.net) has joined #haskell
2013-09-11 15:24:45	quchen	1. You learn to program things in Haskell.
2013-09-11 15:24:48	donri	beaky: you export main :: IO a from a Main or unnamed module
2013-09-11 15:24:51	quchen	2. You apply these skills to make apps.
2013-09-11 15:24:55	<--	fizbin (~Adium@pool-173-72-91-234.cmdnnj.east.verizon.net) has quit (Client Quit)
2013-09-11 15:24:57	<--	DexterLB (~dex@79-100-22-189.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-11 15:25:05	-->	fizbin (~Adium@pool-173-72-91-234.cmdnnj.east.verizon.net) has joined #haskell
2013-09-11 15:25:44	beaky	i want to make tetris
2013-09-11 15:26:53	-->	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has joined #haskell
2013-09-11 15:28:14	veryrandomname	beaky: what you call app is just a program with things to see. Once you know the basics of haskell you can use sdl to make a game http://www.haskell.org/haskellwiki/SDL
2013-09-11 15:28:25	totte	donri: Sorry, what is wrong about the way Arch packages GHC?
2013-09-11 15:28:34	totte	I don't get it.
2013-09-11 15:28:39	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-11 15:28:41	donri	totte: apparently nothing currently
2013-09-11 15:29:01	-->	mno2 (~mno2@1.34.43.236) has joined #haskell
2013-09-11 15:29:12	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 15:29:36	<--	exicer (~exicer@host81-149-102-120.in-addr.btopenworld.com) has quit (Ping timeout: 276 seconds)
2013-09-11 15:30:01	-->	LuisRicardoRC (~LuisRicar@186.148.90.138) has joined #haskell
2013-09-11 15:30:08	veryrandomname	totte: there maybe was a broken haskell platform package, but now the haskell platform package is ok. nothing with ghc
2013-09-11 15:30:18	-->	DexterLB (~dex@79-100-22-189.btc-net.bg) has joined #haskell
2013-09-11 15:30:18	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-09-11 15:30:45	totte	Why is the Haskell platform package preferable to GHC on its own plus packages for Hackage packages?
2013-09-11 15:31:11	donri	totte: that's arguable, but it's certainly wrong to ship a haskell-platform package if it doesn't follow the "spec"
2013-09-11 15:31:33	-->	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has joined #haskell
2013-09-11 15:31:46	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-09-11 15:31:55	donri	it might make sense for arch linux to prefer ghc over platform, though
2013-09-11 15:31:58	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-11 15:32:56	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-11 15:32:58	-->	osa1 (uid13910@gateway/web/irccloud.com/x-bdxibkqngpirtugr) has joined #haskell
2013-09-11 15:33:15	<--	Krakarn (Krakarn@62.80.204.136) has quit (Ping timeout: 264 seconds)
2013-09-11 15:33:44	quchen	totte: I think the Haskell platform's purpose is to be a package of things you install right after GHC. It's usually available to all users (as a standard lib sbould be), and everything that depends on it is guaranteed to work without version conflicts.
2013-09-11 15:34:09	quchen	On the other hand, if you install packages from the HP on a per-need basis, you may find yourself in dependency hell much easier.
2013-09-11 15:34:25	<--	b1collector (47a20440@gateway/web/freenode/ip.71.162.4.64) has left #haskell
2013-09-11 15:34:28	totte	I've never used it. Is the platform a bundle of packages from Hackage?
2013-09-11 15:34:36	quchen	Pretty much, yes.
2013-09-11 15:34:46	-->	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has joined #haskell
2013-09-11 15:34:57	merijn	totte: A tested, playing together nicely, stable precompiled bundle of packages, to be precise
2013-09-11 15:35:15	-->	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has joined #haskell
2013-09-11 15:35:27	-->	b1collector (47a20440@gateway/web/freenode/ip.71.162.4.64) has joined #haskell
2013-09-11 15:35:28	<--	Peaker (~eyal@87.69.111.138) has quit (Ping timeout: 256 seconds)
2013-09-11 15:36:09	-->	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-11 15:36:34	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-11 15:36:36	<--	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 260 seconds)
2013-09-11 15:36:52	totte	Are these: https://github.com/haskell/haskell-platform/blob/master/haskell-platform.cabal#L65-L100 the included packages?
2013-09-11 15:37:00	-->	augur (~augur@129-2-129-32.wireless.umd.edu) has joined #haskell
2013-09-11 15:37:49	veryrandomname	totte: I think its only the 4 things at the top
2013-09-11 15:38:10	veryrandomname	totte: cabal-install alex happy haddock and ghc of cource
2013-09-11 15:38:12	<--	CapitanK (~CaptainK@181.179.39.177) has quit (Read error: Connection reset by peer)
2013-09-11 15:38:41	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-09-11 15:39:29	dcoutts	totte: yes, plus the build-tools
2013-09-11 15:39:38	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 15:39:47	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-11 15:40:08	dcoutts	totte: see the comments begin/end platform packages
2013-09-11 15:40:13	-->	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 15:40:31	-->	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has joined #haskell
2013-09-11 15:40:43	-->	edvo (~edvo@tmo-096-204.customers.d1-online.com) has joined #haskell
2013-09-11 15:41:32	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 15:41:35	-->	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 15:41:43	totte	Yikes. Thanks. Guess I ought to give the platform a shot instead of compiling 20+ Hackage packages myself.
2013-09-11 15:41:55	statix	guys is haskell a good choice as first experience with functional programming if you only have experience with C/C++/Java?
2013-09-11 15:41:57	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 15:42:01	<--	yopikh (~mand@79.175.167.200) has quit (Quit: leaving)
2013-09-11 15:42:29	-->	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has joined #haskell
2013-09-11 15:42:36	<--	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has quit (Max SendQ exceeded)
2013-09-11 15:42:44	fizbin	statix: Language is less important than book/course/mentor/whatever else you're using to learn FP.
2013-09-11 15:42:50	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-11 15:43:00	-->	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has joined #haskell
2013-09-11 15:43:21	statix	fizbin: I'm using the learnyouahaskell.com
2013-09-11 15:43:27	--	hdevalence|away is now known as hdevalence
2013-09-11 15:43:32	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-11 15:43:33	ocharles	statix: good choice
2013-09-11 15:43:53	fizbin	Okay, that's a fair enough choice. Given that, then use Haskell.
2013-09-11 15:44:15	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 15:44:30	fizbin	Some people find the approach in things like SICP or SIOD more to their liking; if that, then use scheme.
2013-09-11 15:44:32	totte	statix: I like that book.
2013-09-11 15:44:38	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 248 seconds)
2013-09-11 15:44:46	veryrandomname	statix: I started with C++ too and got very happy with haskell as my first functional programming language.
2013-09-11 15:44:48	<--	glosoli (~glosoli@unaffiliated/glosoli) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-11 15:44:57	quchen	SICP isn't about Scheme though.
2013-09-11 15:45:01	statix	good to know, thanks
2013-09-11 15:45:14	statix	maybe i mess with haskell for a while and try a couple of other language later on
2013-09-11 15:45:27	fizbin	quchen: Not directly, no. But it's written assuming that you'll be using scheme.
2013-09-11 15:45:34	statix	still kinda confused with this one
2013-09-11 15:45:45	jeff_s1	Does anyone know how to improve the performance of abs on Ints? I'm finding that it's quicker to just generate another random Int until I get a positive one than to take its absolute value.
2013-09-11 15:45:47	-->	kitallis (~kitallis@106.51.83.46) has joined #haskell
2013-09-11 15:46:02	jeff_s1	Maybe inlining or specialization?
2013-09-11 15:46:31	<--	dubsg (~dubsg@c-98-234-232-67.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2013-09-11 15:46:36	-->	dpathakj (~dpathakj@198.244.107.230) has joined #haskell
2013-09-11 15:46:46	ocharles	jeff_s1: you're saying that generating a bunch of random integers and picking the first > 0 is faster than calling abs?
2013-09-11 15:46:50	<--	dpathakj (~dpathakj@198.244.107.230) has quit (Client Quit)
2013-09-11 15:46:50	Hafydd	What do you do when you get 0?
2013-09-11 15:46:59	fizbin	jeff_s1: What about bitmasking?
2013-09-11 15:47:06	quchen	jeff_s1: The fastest thing I can think of is bitwise and on the sign bit.
2013-09-11 15:47:16	arianvp	Does the anology between Monads and LINQ hold well?
2013-09-11 15:47:18	jeff_s1	ocharles: yes
2013-09-11 15:47:18	quchen	If you need even more performance you'll probably need primops.
2013-09-11 15:47:25	jeff_s1	fizbin & quchen: Good ideas.
2013-09-11 15:47:32	arianvp	I need to explain a friend monads. and he knows some java and C#
2013-09-11 15:47:45	veryrandomname	what is it about SICP that I keep reading the name?
2013-09-11 15:47:48	jeff_s1	I just tried checking that x < 0 before calling abs, and that is much faster than just calling abs.
2013-09-11 15:47:50	arianvp	(I think it holds well, though LINQ is llimited to 'enumerable' types)
2013-09-11 15:47:53	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-11 15:47:55	<--	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-09-11 15:47:56	ocharles	jeff_s1: what type are you taking abs on?
2013-09-11 15:48:07	jeff_s1	ocharles: Int (Int64 on my machine)
2013-09-11 15:48:11	arianvp	veryrandonname. SICP is an introductory course on programming in Scheme
2013-09-11 15:48:20	arianvp	it's a legendery book of 800 pages of magic
2013-09-11 15:48:22	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Quit: Leaving)
2013-09-11 15:48:23	arianvp	worth the read
2013-09-11 15:48:34	quchen	SICP is an introductory course on programming. It uses Scheme.
2013-09-11 15:48:37	ocharles	jeff_s1: that seems very strange as abs on Int is just a check for == 0 and otherwise negating it
2013-09-11 15:48:40	quchen	That way round. ^^
2013-09-11 15:48:42	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 15:48:49	<--	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has quit (Quit: WeeChat 0.3.0)
2013-09-11 15:48:55	ocharles	jeff_s1: are you sure your Int isn't actually a big thunk? how are you benchmarking this?
2013-09-11 15:48:55	jeff_s1	So I think this is kind of silly: why is "if x < 0 then abs x else x" faster than "abs x"?
2013-09-11 15:49:00	<--	sellout- (~Adium@c-98-245-81-139.hsd1.co.comcast.net) has quit (Quit: Leaving.)
2013-09-11 15:49:05	-->	yogert (~Adium@swiftwireless-pat.uc.edu) has joined #haskell
2013-09-11 15:49:13	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-11 15:49:16	quchen	jeff_s1: s/abs x/-x
2013-09-11 15:49:16	arianvp	you shouldn't bother with such micro-optimisations
2013-09-11 15:49:17	jeff_s1	ocharles: That's worth checking. I'm just using time on the command line.
2013-09-11 15:49:27	fizbin	jeff_s1: What optimization settings are you passing the compiler?
2013-09-11 15:49:50	jeff_s1	-O3
2013-09-11 15:49:50	-->	kushal (~kdas@fedora/kushal) has joined #haskell
2013-09-11 15:50:02	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Client Quit)
2013-09-11 15:50:09	fizbin	Whoa. That should have inlined abs on Int64.
2013-09-11 15:50:10	Excedrin	are you sure abs isn't implemented as sqrt(x^2) ?
2013-09-11 15:50:13	<--	petapetapeta (~Peter@shop3.diku.dk) has quit (Remote host closed the connection)
2013-09-11 15:50:18	-->	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has joined #haskell
2013-09-11 15:50:48	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 15:50:50	ocharles	jeff_s1: well forec whatever you are taking abs of before benchmarking
2013-09-11 15:50:52	ocharles	force*
2013-09-11 15:51:04	ocharles	e.g, x `seq` benchmarkAbs x
2013-09-11 15:51:17	-->	Eagle_Erwin (~Erwin@codeserver.student.utwente.nl) has joined #haskell
2013-09-11 15:51:17	-->	nik_89 (~nik_89@unaffiliated/nniro) has joined #haskell
2013-09-11 15:51:23	merijn	Excedrin: wut
2013-09-11 15:51:30	-->	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-11 15:51:32	merijn	Excedrin: That would be the most god awful idea *ever*
2013-09-11 15:51:34	merijn	:t abs
2013-09-11 15:51:35	lambdabot	Num a => a -> a
2013-09-11 15:51:58	merijn	Excedrin: Also, impossible, sqrt only works on Floating and friends, Num also supports Integrals et al
2013-09-11 15:51:59	ocharles	merijn: well, not quite so awful on constructive reals
2013-09-11 15:52:01	ocharles	but still quite awful :)
2013-09-11 15:52:02	merijn	:t sqrt
2013-09-11 15:52:02	fizbin	> let x :: Int64 = minBound in abs x
2013-09-11 15:52:03	lambdabot	Floating a => a -> a
2013-09-11 15:52:04	lambdabot	  -9223372036854775808
2013-09-11 15:52:14	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-11 15:52:29	fizbin	jeff_s1: Another reason to not trust abs of a random number. ^^^
2013-09-11 15:52:33	merijn	> let x :: Int64 = minBound + 1 in abs x
2013-09-11 15:52:35	lambdabot	  9223372036854775807
2013-09-11 15:52:47	-->	mjo (~mjo@c-68-49-223-78.hsd1.md.comcast.net) has joined #haskell
2013-09-11 15:52:53	fizbin	Not that it's that likely, but...
2013-09-11 15:52:59	Excedrin	looks like it uses negateInt
2013-09-11 15:53:21	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-11 15:53:31	--	hdevalence is now known as hdevalence|away
2013-09-11 15:53:31	ocharles	I am still curious about jeff_s1's benchmarking. I have a feeling that maybe 'abs' forces its argument, whereas a hand-rolled version just produces a thunk
2013-09-11 15:53:41	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 15:53:42	merijn	Any Hakyll users? Does anyone know what flavour of regex it uses?
2013-09-11 15:53:44	ocharles	so comparing them is pointless, one is doing work, the other isn't
2013-09-11 15:54:05	fizbin	> let mask :: Int64 = maxBound; x :: Int64 = minBound in mask .&. x
2013-09-11 15:54:06	jeff_s1	The prize goes to ocharles. "x `seq` abs x" is much faster than just "abs x".
2013-09-11 15:54:07	lambdabot	  Ambiguous occurrence `.&.'
2013-09-11 15:54:07	lambdabot	 It could refer to either `Data.Bits..&.',
2013-09-11 15:54:07	lambdabot	     ...
2013-09-11 15:54:10	quchen	ocharles: For Int,  abs n  = if n `geInt` 0 then n else negate n
2013-09-11 15:54:11	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-11 15:54:40	-->	ParahSailin (~ropoctl@99-25-202-211.lightspeed.hstntx.sbcglobal.net) has joined #haskell
2013-09-11 15:54:40	<--	ParahSailin (~ropoctl@99-25-202-211.lightspeed.hstntx.sbcglobal.net) has quit (Changing host)
2013-09-11 15:54:40	-->	ParahSailin (~ropoctl@unaffiliated/parahsailin) has joined #haskell
2013-09-11 15:54:44	quchen	ocharles: I don't think anything is forced "more" than "n > 0" there.
2013-09-11 15:55:09	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 15:55:10	fizbin	jeff_s1: You shouldn't use abs of rand for "random non-negative number" anyway though for correctness reasons.
2013-09-11 15:55:27	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-11 15:55:30	quchen	fizbin: Why's that?
2013-09-11 15:55:42	quchen	Counting the 0 differently?
2013-09-11 15:55:53	ocharles	quchen: yes, I'm aware of what the definition is
2013-09-11 15:56:09	ocharles	quchen: well, that could be checked in ghci
2013-09-11 15:56:24	fizbin	jeff_s1, quchen: Counting the zero, and the fact that (abs minBound) == minBound.
2013-09-11 15:56:26	ocharles	my general point is this discussion is pointless until I see proof that abs is so much slower :P
2013-09-11 15:57:08	-->	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 15:57:17	<--	b0oh (~Adium@188.134.45.47) has quit (Quit: Leaving.)
2013-09-11 15:57:58	-->	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 15:57:58	fizbin	jeff_s1, quchen: Also, many people wanting a "random non-negative number" actually want "random number in the range 0 .. N" and plan to use modulo on their random non-negative number to get there, which has additional correctness issues.
2013-09-11 15:58:29	-->	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has joined #haskell
2013-09-11 15:58:55	<--	LuisRicardoRC (~LuisRicar@186.148.90.138) has quit (Read error: Connection reset by peer)
2013-09-11 15:58:55	quchen	fizbin: Is there an easy and correct way to get such a random number then?
2013-09-11 15:59:15	-->	LuisRicardoRC (~LuisRicar@186.148.90.138) has joined #haskell
2013-09-11 15:59:15	mkramer	mersenne twister
2013-09-11 15:59:50	ocharles	unless you want something cryptographically secure
2013-09-11 15:59:53	ocharles	in which case, not mersenne twister.
2013-09-11 16:00:31	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-11 16:00:38	quchen	Not?
2013-09-11 16:00:40	quchen	Hm.
2013-09-11 16:00:51	quchen	Stop destroying all my randomnedd knowledge.
2013-09-11 16:00:58	quchen	s/dd/ss
2013-09-11 16:01:25	ocharles	https://en.wikipedia.org/wiki/Mersenne_twister#Disadvantages apparently maybe it can be made secure
2013-09-11 16:01:35	-->	Swizec_ (~swizec@BSN-142-112-173.dial-up.dsl.siol.net) has joined #haskell
2013-09-11 16:01:40	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 16:01:42	<--	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-09-11 16:02:32	quchen	Oh, I was aware of the "bad initial state" problem, but not the predictability.
2013-09-11 16:03:07	jeff_s1	It looks like using Data.Bits to get the absolute value of an Int is the same speed as using abs.
2013-09-11 16:03:20	fizbin	quchen: The usual way is to do what the java j.u.Random class does: if N is a power of 2, take the appropriate number of bits off the top; else, take (random int) & (max positive int) and if that's less than N*(max positive int / N), take modulo N, otherwise choose a new random number.
2013-09-11 16:03:28	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Remote host closed the connection)
2013-09-11 16:03:49	-->	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has joined #haskell
2013-09-11 16:03:50	quchen	Stochastically terminating? Oh.
2013-09-11 16:03:56	quchen	I wouldn't have expected that here.
2013-09-11 16:04:14	-->	deech (~user@68-188-13-62.static.stls.mo.charter.com) has joined #haskell
2013-09-11 16:04:20	<--	deech (~user@68-188-13-62.static.stls.mo.charter.com) has left #haskell
2013-09-11 16:04:24	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-09-11 16:04:37	<--	Swizec (~swizec@BSN-142-112-173.dial-up.dsl.siol.net) has quit (Ping timeout: 245 seconds)
2013-09-11 16:04:49	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 16:04:51	fizbin	quchen: Yeah, it sucks, but fast stochastic termination is really your best bet. Also, picking N to be a power of 2 where possible.
2013-09-11 16:04:52	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Remote host closed the connection)
2013-09-11 16:05:25	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 16:05:26	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-11 16:05:50	-->	Mortomes|Uni (~Mortomes_@145.107.80.101) has joined #haskell
2013-09-11 16:05:52	<--	Mortomes|Uni (~Mortomes_@145.107.80.101) has quit (Changing host)
2013-09-11 16:05:53	-->	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-11 16:06:29	-->	OlegYch (~OlegYch@213.184.238.131) has joined #haskell
2013-09-11 16:06:31	quchen	Stochastic termination isn't too bad, it's just not very elegant.
2013-09-11 16:06:32	-->	anRch (~markmilli@pool-108-20-105-46.bstnma.east.verizon.net) has joined #haskell
2013-09-11 16:06:38	<--	Starfire_ (~starfire@kekkonen.cs.hut.fi) has quit (Ping timeout: 256 seconds)
2013-09-11 16:06:52	quchen	This sounded like something that has an "oh wow" solution :-)
2013-09-11 16:07:15	kuribas	Is (_|_, _|_) equivalent to _|_?   As for as strictness is concerned?
2013-09-11 16:07:26	quchen	kuribas: No
2013-09-11 16:07:33	ocharles	jeff_s1: you still haven't posted your benchamrk anywhere
2013-09-11 16:07:36	quchen	> (undefined, undefined) `seq` ()
2013-09-11 16:07:37	lambdabot	  ()
2013-09-11 16:07:48	quchen	> undefined `seq` ()
2013-09-11 16:07:50	lambdabot	  *Exception: Prelude.undefined
2013-09-11 16:07:54	-->	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has joined #haskell
2013-09-11 16:08:09	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-09-11 16:08:38	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-09-11 16:08:45	quchen	kuribas: At least in Haskell bottom and (bot, bot) are different. There are people here that can help you further with the logical side of things, where that distinction may be wrong.
2013-09-11 16:08:47	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Read error: Operation timed out)
2013-09-11 16:08:51	quchen	(I'm not one of them, unfortunately.)
2013-09-11 16:09:10	<--	setmeaway (~setmeaway@119.201.52.138) has quit (Ping timeout: 245 seconds)
2013-09-11 16:09:13	quchen	Similarly, const ⊥ /= ⊥.
2013-09-11 16:09:47	mr-	:t const undefined -- :-)
2013-09-11 16:09:48	lambdabot	b -> a
2013-09-11 16:09:56	-->	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has joined #haskell
2013-09-11 16:09:57	jeff_s1	ocharles: I'm working on https://github.com/logicchains/Levgen-Parallel-Benchmarks
2013-09-11 16:10:20	<--	veryrandomname (~fabi@i59F6AAAA.versanet.de) has left #haskell
2013-09-11 16:10:22	<--	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has quit (Remote host closed the connection)
2013-09-11 16:10:30	quchen	:t (`seq` undefined) -- mr: use this one to avoid space leaks
2013-09-11 16:10:31	lambdabot	a -> b
2013-09-11 16:10:43	<--	martinalex (~quassel@164-097.eduroam.rwth-aachen.de) has quit (Ping timeout: 264 seconds)
2013-09-11 16:11:18	-->	aupiff (~aupiff@108-254-160-58.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-11 16:11:22	 *	mr- greps his code for const undefined
2013-09-11 16:11:23	kuribas	quchen: I have a lazy function which compiles to an unboxed function by gh: "splitBezier undefined 0.5 `seq` ()" => undefined
2013-09-11 16:11:26	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 16:12:32	quchen	And splitBezier's return type is a tuple?
2013-09-11 16:12:35	kuribas	But a written out constructor on the LHS is always strict right?
2013-09-11 16:12:54	quchen	..?
2013-09-11 16:13:02	kuribas	Ok, I am being stupid...
2013-09-11 16:13:11	kuribas	splitBezier (CubicBezier a b c d) t = ...
2013-09-11 16:13:14	<--	azcodex (~azcodex_@250.Red-83-32-82.dynamicIP.rima-tde.net) has quit (Quit: azcodex)
2013-09-11 16:13:28	-->	paolino (~paolino@net-93-147-210-11.cust.dsl.teletu.it) has joined #haskell
2013-09-11 16:13:32	-->	Velpoman (~Velpoman@nat/yahoo/x-bikvwpxlexzwqlph) has joined #haskell
2013-09-11 16:13:37	-->	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has joined #haskell
2013-09-11 16:13:43	kuribas	So it is strict in the first argument.
2013-09-11 16:13:44	quchen	Well, pattern matching will have to evaluate the first argument.
2013-09-11 16:13:50	quchen	Right.
2013-09-11 16:14:01	quchen	You can make the pattern irrefutable using ~ though in order to avoid that.
2013-09-11 16:14:12	<--	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-09-11 16:14:19	kuribas	Yes, I see.
2013-09-11 16:15:06	kuribas	I used lazy matching to get state into a comonadic structure.  It's pretty cool.
2013-09-11 16:16:05	fizbin	> minBound :: Int32
2013-09-11 16:16:06	lambdabot	  -2147483648
2013-09-11 16:16:28	<--	ananthakumaran (~Adium@122.166.180.215) has quit (Quit: Leaving.)
2013-09-11 16:16:41	<--	efforeffort (~efforeffo@c-107-5-116-239.hsd1.mi.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 16:17:19	fizbin	> let iLogBase b i = if i < b then 1 else 1 + iLogBase b (i `div` b) in iLogBase 2147483561 30
2013-09-11 16:17:21	lambdabot	  1
2013-09-11 16:17:44	<--	markcw (~jack@99-42-20-129.lightspeed.cicril.sbcglobal.net) has quit (Read error: No route to host)
2013-09-11 16:18:00	<--	LuisRicardoRC (~LuisRicar@186.148.90.138) has quit (Remote host closed the connection)
2013-09-11 16:18:13	<--	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-11 16:18:40	 *	hackagebot diagrams-lib 0.7.1 - Embedded domain-specific language for declarative graphics  http://hackage.haskell.org/package/diagrams-lib-0.7.1 (BrentYorgey)
2013-09-11 16:18:56	-->	leifw (~user@cpe-24-90-73-46.nyc.res.rr.com) has joined #haskell
2013-09-11 16:19:00	-->	julmae (~no@46.28.49.140) has joined #haskell
2013-09-11 16:19:18	<--	yogert (~Adium@swiftwireless-pat.uc.edu) has quit (Quit: Leaving.)
2013-09-11 16:19:21	<--	jonkri (~jonkri@pontarius/jon) has quit (Quit: jonkri)
2013-09-11 16:20:39	<--	kitallis (~kitallis@106.51.83.46) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-11 16:21:11	-->	ystael (~ystael@64.206.121.41) has joined #haskell
2013-09-11 16:21:15	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-09-11 16:22:15	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Ping timeout: 276 seconds)
2013-09-11 16:22:20	<--	julmac (~no@109.123.79.238) has quit (Ping timeout: 260 seconds)
2013-09-11 16:23:41	 *	hackagebot diagrams-svg 0.8.0.1 - SVG backend for diagrams drawing EDSL.  http://hackage.haskell.org/package/diagrams-svg-0.8.0.1 (BrentYorgey)
2013-09-11 16:24:05	<--	hamilyon (~ashaposhn@nat4.it.hh.ru) has left #haskell
2013-09-11 16:24:51	-->	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 16:25:08	jeff_s1	So genRandomPos at https://github.com/shawjef3/Levgen-Parallel-Benchmarks/blob/master/H.hs fixes the problem of abs being lazy causing a performance problem. Thanks ocharles! Now I'm wondering why I needed to make genRandomPos using seq when I'm doing deepseq later.
2013-09-11 16:25:43	-->	yoeight (5a231cb6@gateway/web/freenode/ip.90.35.28.182) has joined #haskell
2013-09-11 16:26:06	-->	artyomkazak (~artyomkaz@94.25.228.20) has joined #haskell
2013-09-11 16:26:07	-->	Starfire_ (~starfire@kekkonen.cs.hut.fi) has joined #haskell
2013-09-11 16:26:09	--	milessabin__ is now known as milessabin
2013-09-11 16:26:24	-->	sellout- (~Adium@c-67-176-62-45.hsd1.co.comcast.net) has joined #haskell
2013-09-11 16:26:25	-->	nuttycom (~nuttycom@2601:1:9b80:3b8:227:eff:fe03:3d2b) has joined #haskell
2013-09-11 16:26:36	-->	jonkri (~jonkri@pontarius/jon) has joined #haskell
2013-09-11 16:26:55	<--	DaveS (~DaveS@unaffiliated/daves) has quit (Ping timeout: 264 seconds)
2013-09-11 16:27:32	Taneb	Anyone know how Graphics.Rendering.Cairo.getCurrentPoint behaves if there is no current point? Throw an exception?
2013-09-11 16:28:06	dcoutts	Taneb: quickest answer is probably to try it and see
2013-09-11 16:28:17	Taneb	dcoutts, I was worrying someone might say that
2013-09-11 16:28:27	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-11 16:28:44	-->	magneticduck (~magneticd@188.251.5.54) has joined #haskell
2013-09-11 16:29:14	<--	statix (~Nima@catv-80-98-128-158.catv.broadband.hu) has quit (Quit: Leaving)
2013-09-11 16:29:22	-->	yoeight_ (~yoeight@APuteaux-552-1-113-182.w90-35.abo.wanadoo.fr) has joined #haskell
2013-09-11 16:29:29	magneticduck	hey everybody, I've done a little bit of browsing through System.Process, but I haven't found a function that simply executes a process, waits for it to finish, and returns all of the stdout collected
2013-09-11 16:29:33	magneticduck	how would I do something like that?
2013-09-11 16:29:42	magneticduck	preferably using only things from the process package
2013-09-11 16:29:47	<--	yoeight (5a231cb6@gateway/web/freenode/ip.90.35.28.182) has quit (Client Quit)
2013-09-11 16:29:55	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 16:29:58	-->	_d3f (~gnu@46.183.216.234) has joined #haskell
2013-09-11 16:30:10	<--	xexonixxexillion (~Adium@130.56.86.81) has quit (Remote host closed the connection)
2013-09-11 16:30:14	<--	exFalso (~exfalso@85-238-92-95.pool.digikabel.hu) has left #haskell
2013-09-11 16:30:16	magneticduck	do I really have to deal with handles?
2013-09-11 16:30:17	edvo	magneticduck: readProcess
2013-09-11 16:30:33	magneticduck	wonderful thanks
2013-09-11 16:30:39	edvo	you are welcome
2013-09-11 16:31:17	magneticduck	uhh, why do I have to give it a filename and parameters?
2013-09-11 16:31:28	<--	_d3f (~gnu@46.183.216.234) has quit (Client Quit)
2013-09-11 16:31:28	magneticduck	I'm actually running in this case a bit of a complex bash script
2013-09-11 16:31:35	magneticduck	I mean, with pipes and all
2013-09-11 16:31:41	<--	normanrichards (~normanric@70.114.215.220) has quit
2013-09-11 16:31:49	magneticduck	sox out.wav -n stat 2>&1 | sed -n 's#^Length (seconds):[^0-9]*\([0-9.]*\)$#\1#p'
2013-09-11 16:32:09	-->	_d3f (~gnu@nl2.ovpn.to) has joined #haskell
2013-09-11 16:32:11	edvo	well, it does not work with pipes
2013-09-11 16:32:11	geekosaur	"/bin/sh", ["-c", yourpipelinehere]
2013-09-11 16:32:28	geekosaur	note that it's a single parameter string
2013-09-11 16:32:40	magneticduck	oh ofc
2013-09-11 16:32:42	Taneb	dcoutts, thanks, it gives "(0, 0)"
2013-09-11 16:32:44	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-11 16:32:51	magneticduck	yes I gotcha
2013-09-11 16:32:55	Taneb	Which to me feels like the wrong behaviour :(
2013-09-11 16:33:41	 *	hackagebot diagrams-builder 0.4.0.5 - hint-based build service for the diagrams graphics EDSL.  http://hackage.haskell.org/package/diagrams-builder-0.4.0.5 (BrentYorgey)
2013-09-11 16:34:06	--	Swizec_ is now known as Swizec
2013-09-11 16:34:19	<--	akegalj_ (~akegalj@93-141-84-22.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2013-09-11 16:34:20	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 16:34:32	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-11 16:34:48	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Client Quit)
2013-09-11 16:35:06	-->	markcw (~jack@2602:306:32a1:4810:7d75:f68d:c7bb:9dbd) has joined #haskell
2013-09-11 16:35:17	-->	yogert (~Adium@daapwireless-pat.uc.edu) has joined #haskell
2013-09-11 16:35:18	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 16:35:32	yoeight_	Hi everybody. Do someone already have this weird error message 'No instance for (At (M.IntMap [Char])) arising from a use of `at'' with that expression 'IntMap.fromList [(1, "hello")] ^. at 1' ?
2013-09-11 16:35:47	yoeight_	when using lens package
2013-09-11 16:35:50	<--	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has quit (Ping timeout: 246 seconds)
2013-09-11 16:35:54	<--	yogert (~Adium@daapwireless-pat.uc.edu) has quit (Client Quit)
2013-09-11 16:36:08	<--	raichoo (~raichoo@2001:470:b626:11:224:d7ff:fe96:6ca4) has quit (Quit: Leaving.)
2013-09-11 16:36:33	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-11 16:36:33	yoeight_	some setup info: ghc 7.6.3 on Arch 3.10
2013-09-11 16:36:53	supki	> IM.fromList [(1, "hello")] ^. at 1
2013-09-11 16:36:56	lambdabot	  Just "hello"
2013-09-11 16:37:01	supki	what lens version?
2013-09-11 16:37:12	yoeight_	3.9.1
2013-09-11 16:37:26	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 248 seconds)
2013-09-11 16:37:40	supki	uhm
2013-09-11 16:37:52	supki	can you paste the code somewhere?
2013-09-11 16:38:01	ocharles	I think you might have a different version of containers loaded
2013-09-11 16:38:15	ocharles	lens defines an At instance for a specific version of containers (the one it was compiled against)
2013-09-11 16:38:38	ocharles	my guess is you have two versions of containers installed
2013-09-11 16:38:39	supki	shouldn't the version be in the error message then?
2013-09-11 16:38:47	<--	Peaker (~eyal@bzq-84-108-131-193.cablep.bezeqint.net) has quit (Ping timeout: 245 seconds)
2013-09-11 16:39:04	ocharles	supki: No, yoeight_ has imported an IntMap qualified, and that one doesn't have an instance, no need to say any more there
2013-09-11 16:39:12	ocharles	yoeight_: what is the output of ':i At' ?
2013-09-11 16:39:30	-->	morazow_ (~morazow@p548A400D.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 16:39:40	yoeight_	No it's not but I both 0.5.0.0, 0.5.3.1 version installed on my machine
2013-09-11 16:40:17	kuribas	Are inlined arguments always lazy in ghc, even when they are obviously strict?
2013-09-11 16:40:39	<--	LAMMJohnson (~ja@user-5af43575.broadband.tesco.net) has quit (Ping timeout: 256 seconds)
2013-09-11 16:40:43	-->	LAMMJohn1on (~ja@user-5af43312.broadband.tesco.net) has joined #haskell
2013-09-11 16:40:43	kuribas	For example: vectorMag (Point x y) = sqrt(x*x + y*y)
2013-09-11 16:40:47	kuribas	x and y :: Double
2013-09-11 16:40:52	yoeight_	Prelude Control.Lens> :i At
2013-09-11 16:40:53	yoeight_	class At m where
2013-09-11 16:40:53	yoeight_	  at :: Index m -> IndexedLens' (Index m) m (Maybe (IxValue m))
2013-09-11 16:40:53	yoeight_	  	-- Defined in `Control.Lens.At'
2013-09-11 16:41:10	-->	theorb (~theorb@91.84.53.6) has joined #haskell
2013-09-11 16:41:36	<--	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has quit (Remote host closed the connection)
2013-09-11 16:41:40	<--	mattp_ (~mattp_@h216-235-10-210.host.egate.net) has quit (Quit: WeeChat 0.4.1)
2013-09-11 16:41:48	-->	cppcabrera (~alejandro@72.32.115.231) has joined #haskell
2013-09-11 16:41:48	-->	mattp_ (~mattp_@intma.in) has joined #haskell
2013-09-11 16:42:05	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-11 16:42:24	kuribas	 Strictness: U(U(L)U(L))m
2013-09-11 16:42:29	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Ping timeout: 240 seconds)
2013-09-11 16:42:32	ocharles	yoeight_: that's not the full output. use http://lpaste.net
2013-09-11 16:42:43	magneticduck	rofl is "Network.CGI.Protocol" the only place where a "maybeRead" function is implemented?
2013-09-11 16:42:48	-->	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has joined #haskell
2013-09-11 16:42:50	-->	aytek (~aytek@212.174.25.180) has joined #haskell
2013-09-11 16:42:57	ocharles	magneticduck: that's in the latest base
2013-09-11 16:43:21	magneticduck	oh it is
2013-09-11 16:43:22	ocharles	magneticduck: http://hackage.haskell.org/packages/archive/base/4.6.0.1/doc/html/Text-Read.html#v:readMaybe is what you are looking for, right?
2013-09-11 16:43:26	magneticduck	huh, didn't show up on hoogle
2013-09-11 16:43:42	<--	morazow (~morazow@p57BCEBD3.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-09-11 16:43:43	-->	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 16:43:44	ocharles	magneticduck: it's also in 'safe'
2013-09-11 16:43:45	magneticduck	I searched for (Read a) => String -> Maybe a
2013-09-11 16:43:49	magneticduck	cool
2013-09-11 16:44:00	ocharles	if you need to support earlier versions of base
2013-09-11 16:44:12	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-11 16:44:33	magneticduck	uh, I guess my base isn't the latest
2013-09-11 16:44:37	-->	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has joined #haskell
2013-09-11 16:44:37	<--	edon (~user@albalug/edon) has quit (Ping timeout: 256 seconds)
2013-09-11 16:44:38	-->	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has joined #haskell
2013-09-11 16:45:25	<--	markcw (~jack@2602:306:32a1:4810:7d75:f68d:c7bb:9dbd) has quit (Ping timeout: 245 seconds)
2013-09-11 16:45:29	-->	EvilPenguin (~EvilPengu@50.193.235.235) has joined #haskell
2013-09-11 16:45:51	<--	theorbtwo (~theorb@91.84.53.6) has quit (Ping timeout: 264 seconds)
2013-09-11 16:46:00	--	theorb is now known as theorbtwo
2013-09-11 16:46:15	kuribas	Or does U(L) mean S for Double's ?
2013-09-11 16:46:42	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-09-11 16:46:58	-->	k0001 (~k0001@host155.186-124-2.telecom.net.ar) has joined #haskell
2013-09-11 16:47:01	--	milessabin__ is now known as milessabin
2013-09-11 16:48:03	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 16:48:06	<--	Soft (~soft@unaffiliated/soft) has quit (Ping timeout: 264 seconds)
2013-09-11 16:48:27	yoeight_	ocharles actually it is, I'll make a lpaste
2013-09-11 16:48:51	-->	scriptor (~Scriptor@unaffiliated/scriptor) has joined #haskell
2013-09-11 16:49:50	-->	dubsg (~dubsg@208.74.177.104.static.etheric.net) has joined #haskell
2013-09-11 16:50:11	<--	luksow (~luke@apn-31-2-47-89.dynamic.gprs.plus.pl) has quit (Quit: Wychodzi)
2013-09-11 16:50:20	ocharles	yoeight_: oh, so it is, my apologies. normally it shows you instances
2013-09-11 16:50:23	ocharles	I wonder why it isn't here
2013-09-11 16:50:51	<--	aupiff (~aupiff@108-254-160-58.lightspeed.livnmi.sbcglobal.net) has quit (Ping timeout: 276 seconds)
2013-09-11 16:51:22	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-11 16:51:30	yoeight_	ocharles edkmett makes it work
2013-09-11 16:51:43	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 16:51:44	yoeight_	someone had the answer
2013-09-11 16:52:08	yoeight_	just unregister last containers package makes it work
2013-09-11 16:52:13	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-09-11 16:52:18	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 16:52:32	yoeight_	thanks for your time guys
2013-09-11 16:52:35	edwardk	np
2013-09-11 16:53:27	ocharles	so it was multiple containers versions as I thought?
2013-09-11 16:53:43	ocharles	edwardk: how come :i At doesn't show all the instances?
2013-09-11 16:54:04	yoeight_	yes sir
2013-09-11 16:55:59	quchen	edwardk: Fairly basic question, why does Lens use `type` for `Getting` etc? GHC isn't very good at printing type synonyms when errors occur so newtypes would get rid of that problem. I suspect there's a good reason to use `type` then?
2013-09-11 16:56:04	-->	xexonixxexillion (~Adium@14-202-198-83.static.tpgi.com.au) has joined #haskell
2013-09-11 16:56:07	-->	theorb (~theorb@91.84.53.6) has joined #haskell
2013-09-11 16:56:17	ocharles	quchen: the whole point is to allow people to write lens stuff without depending on lens
2013-09-11 16:56:24	ocharles	you can't do that if you start introducing newtypes
2013-09-11 16:56:25	edwardk	quchen: yes, if you newtype them then all the magic subtyping that drives lens wouldn't work
2013-09-11 16:56:28	elliott	quchen: because it wouldn't work with newtype.
2013-09-11 16:56:37	elliott	you can pass a Lens and a Getter and a Traversal as a Getting
2013-09-11 16:56:42	elliott	because the types fit the same form
2013-09-11 16:56:49	edwardk	basically the whole library would be a mess of foo.asTraversal bar   or some god awful mess
2013-09-11 16:56:50	elliott	and you get subtyping from the constraints they place on the f and p
2013-09-11 16:56:51	quchen	Ah, okay.
2013-09-11 16:56:58	<--	eff_ (~quassel@222.131.154.131) has quit (Read error: Connection reset by peer)
2013-09-11 16:57:06	elliott	this is why we need a lens language :)
2013-09-11 16:57:13	-->	ampersand27017 (~ampersand@69.3.174.98) has joined #haskell
2013-09-11 16:57:18	edwardk	lens is definitely putting some pressure on ghc to support better type alias preservation though =)
2013-09-11 16:57:32	ocharles	yea, I'd love to see that happen
2013-09-11 16:57:40	ocharles	I'm just about able to figure things out these days
2013-09-11 16:57:52	-->	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has joined #haskell
2013-09-11 16:58:08	-->	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has joined #haskell
2013-09-11 16:58:29	-->	aupiff (~aupiff@67-194-63-40.wireless.umnet.umich.edu) has joined #haskell
2013-09-11 16:58:40	elliott	lens is a pretty good argument for subtyping being a good thing.
2013-09-11 16:58:44	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-11 16:58:59	edwardk	or at least that one can reason about subtyping through class relationships
2013-09-11 16:59:14	beaky	why is functional programming significant
2013-09-11 16:59:23	beaky	apart from treating data as code
2013-09-11 16:59:26	beaky	code as data*
2013-09-11 16:59:37	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-11 16:59:44	quchen	@google why functional programming matters
2013-09-11 16:59:45	lambdabot	http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf
2013-09-11 16:59:46	lambdabot	Title: Why Functional Programming Matters
2013-09-11 17:00:01	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 17:00:12	<--	SpyrosTrigazis (~spyrostri@nat.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-11 17:00:27	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 17:00:30	--	flazz_gone is now known as flazz
2013-09-11 17:00:31	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 240 seconds)
2013-09-11 17:00:39	-->	SpyrosTrigazis (~spyrostri@conf-198.admin.grnet.gr) has joined #haskell
2013-09-11 17:00:42	<--	theorbtwo (~theorb@91.84.53.6) has quit (Ping timeout: 264 seconds)
2013-09-11 17:00:43	beaky	even in functional languages, I seldom use functions as a type for holding type (i.e. a substitute for records declared with 'data')
2013-09-11 17:00:48	-->	ananthakumaran (~Adium@117.192.139.66) has joined #haskell
2013-09-11 17:00:48	--	theorb is now known as theorbtwo
2013-09-11 17:01:40	<--	nova_ (~nova@catv-86-101-199-145.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-11 17:02:14	Sonderblade	beaky: what is your question?
2013-09-11 17:02:25	-->	thabersack (~thabersac@c-76-105-47-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:02:26	<--	ginmaniac (~ginmaniac@194.95.197.2) has quit (Ping timeout: 246 seconds)
2013-09-11 17:02:29	beaky	what is functional programming and why is it significant
2013-09-11 17:02:41	-->	Krakarn (Krakarn@62.80.204.136) has joined #haskell
2013-09-11 17:02:57	magneticduck	@FAQ
2013-09-11 17:02:57	lambdabot	Unknown command, try @list
2013-09-11 17:03:17	magneticduck	uh, anyway, read the www.haskell.org website, they have an good article on that
2013-09-11 17:03:17	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Remote host closed the connection)
2013-09-11 17:03:26	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-11 17:03:26	-->	eff_ (~quassel@114.246.78.93) has joined #haskell
2013-09-11 17:03:28	--	arash_ is now known as Tarrasch
2013-09-11 17:03:29	magneticduck	ask questions after reading that
2013-09-11 17:03:38	beaky	yes haskel.org has many cool recourses
2013-09-11 17:03:43	beaky	(wow i am bad at typing)
2013-09-11 17:03:51	<--	Mortomes|Uni (~Mortomes_@unaffiliated/mortomes) has quit (Ping timeout: 240 seconds)
2013-09-11 17:03:53	magneticduck	http://www.haskell.org/haskellwiki/Introduction
2013-09-11 17:03:57	beaky	my typing has become worese over time
2013-09-11 17:04:20	<--	shesek (~shesek@77.126.185.249) has quit (Ping timeout: 260 seconds)
2013-09-11 17:04:31	-->	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has joined #haskell
2013-09-11 17:05:26	beaky	wow i like the speradsheet analogy
2013-09-11 17:05:58	-->	phyrex1an (~phyrex1an@cm-84.211.97.217.getinternet.no) has joined #haskell
2013-09-11 17:06:10	-->	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has joined #haskell
2013-09-11 17:06:18	-->	Mortomes|Uni (~Mortomes_@145.107.80.101) has joined #haskell
2013-09-11 17:07:57	-->	malkomalko (~malkomalk@66-234-38-99.nyc.cable.nyct.net) has joined #haskell
2013-09-11 17:08:14	-->	allsystemsarego (~allsystem@188.25.130.226) has joined #haskell
2013-09-11 17:08:15	<--	allsystemsarego (~allsystem@188.25.130.226) has quit (Changing host)
2013-09-11 17:08:15	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-09-11 17:08:19	-->	erochester1 (~erocheste@137.54.50.172) has joined #haskell
2013-09-11 17:08:30	beaky	but the qsort example doesn't sit well with me :(
2013-09-11 17:09:26	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:09:31	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-09-11 17:09:50	beaky	i wonder what an actual haskell qsort looks like
2013-09-11 17:10:02	-->	theorb (~theorb@91.84.53.6) has joined #haskell
2013-09-11 17:10:08	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Ping timeout: 246 seconds)
2013-09-11 17:10:31	ericmoritz	is there an idiom to make (read) return Nothing if the parse fails?
2013-09-11 17:10:40	<--	Mortomes|Uni (~Mortomes_@145.107.80.101) has quit (Ping timeout: 256 seconds)
2013-09-11 17:10:41	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 256 seconds)
2013-09-11 17:10:54	<--	madjestic (~madjestic@95.99.171.220) has quit (Ping timeout: 240 seconds)
2013-09-11 17:11:02	beaky	so all that functional programming offers over traditional paradigms is improved modularity due to referential transparency of pure functions and first-class functions?
2013-09-11 17:11:23	merijn	ericmoritz: Text.Read.readMaybe in GHC 7.6
2013-09-11 17:11:28	ericmoritz	thanks
2013-09-11 17:11:32	<--	thabersack (~thabersac@c-76-105-47-205.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 17:11:35	merijn	ericmoritz: In older versions you need to implement it using reads
2013-09-11 17:11:44	merijn	> reads "1" :: Int
2013-09-11 17:11:46	lambdabot	  Couldn't match expected type `GHC.Types.Int'
2013-09-11 17:11:47	lambdabot	             with actual type ...
2013-09-11 17:11:47	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-11 17:11:56	merijn	oh, duh
2013-09-11 17:11:58	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-11 17:12:01	merijn	> reads "1" :: [(Int,String)]
2013-09-11 17:12:02	lambdabot	  [(1,"")]
2013-09-11 17:12:03	-->	madjestic (~madjestic@31.21.67.172) has joined #haskell
2013-09-11 17:12:07	merijn	> reads "1" :: [(Char,String)]
2013-09-11 17:12:08	lambdabot	  []
2013-09-11 17:12:14	mkramer	beaky: http://augustss.blogspot.com/2007/08/quicksort-in-haskell-quicksort-is.html
2013-09-11 17:12:19	-->	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has joined #haskell
2013-09-11 17:12:27	<--	tomboy64 (~tomboy@gateway/tor-sasl/tomboy64) has quit (Quit: Uhh ... gotta go.)
2013-09-11 17:12:44	mkramer	you're right beaky, Haskell examples are often sneaky in that nobody would really write things that way other than for didactic purposes
2013-09-11 17:12:53	merijn	ericmoritz: Although (depending on what you're doing) it might be better to switch to a proper parsing approach
2013-09-11 17:12:56	luite	beaky: i think it captures the characteristics of the quicksort algorithm quite nicely actually. it doesn't have worse asymptotics than a regular (not recursion-to-loop optimized) imperative implementation does it?
2013-09-11 17:13:08	mkramer	of course, all language pedagogy employs that dichotomy to some extent
2013-09-11 17:13:11	<--	kazimir42 (~kazimir42@gateway/tor-sasl/kazimir42) has quit (Remote host closed the connection)
2013-09-11 17:13:15	elliott	beaky: I would say that the advantage of functional programming is that <beaky> haskell achieves safety, modularity, and speed through functional programming :D
2013-09-11 17:13:24	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-09-11 17:13:31	-->	mbuf (~user@49.248.82.84) has joined #haskell
2013-09-11 17:13:33	-->	dustin10 (~dustin10@2001:4870:600a:500::2) has joined #haskell
2013-09-11 17:13:42	 *	hackagebot diagrams-haddock 0.2.1 - Preprocessor for embedding diagrams in Haddock documentation  http://hackage.haskell.org/package/diagrams-haddock-0.2.1 (BrentYorgey)
2013-09-11 17:13:46	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-11 17:14:17	-->	Kevin (~Kevin@209.65.15.42) has joined #haskell
2013-09-11 17:14:18	-->	S11001001 (~sirian@gw1.mcgraw-hill.com) has joined #haskell
2013-09-11 17:14:18	<--	S11001001 (~sirian@gw1.mcgraw-hill.com) has quit (Changing host)
2013-09-11 17:14:18	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-11 17:14:19	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-11 17:14:36	<--	aytek (~aytek@212.174.25.180) has quit (Quit: Leaving)
2013-09-11 17:14:39	<--	theorbtwo (~theorb@91.84.53.6) has quit (Ping timeout: 264 seconds)
2013-09-11 17:14:48	--	theorb is now known as theorbtwo
2013-09-11 17:15:25	<--	Itkovian (~Itkovian@b244h212.ugent.be) has quit (Quit: Zzzzz ...)
2013-09-11 17:15:40	beaky	ah
2013-09-11 17:16:52	beaky	so the real haskell qsort is quite imperative :D
2013-09-11 17:17:03	<--	Kevin_ (~Kevin@209.65.15.42) has quit (Ping timeout: 264 seconds)
2013-09-11 17:17:10	merijn	That's because quicksort is quite imperative
2013-09-11 17:17:12	beaky	maybe it is more accurately representing the nature of qsort as an imperative algorithm
2013-09-11 17:17:14	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-11 17:17:20	merijn	If you want a functional sort, look at merge sort
2013-09-11 17:17:26	<--	shahn (~shahn@37-5-17-167-dynip.superkabel.de) has quit (Remote host closed the connection)
2013-09-11 17:17:28	luite	merijn: really? it's quite functional i think
2013-09-11 17:17:38	beaky	ah didn't know mergesort played nice with functional language
2013-09-11 17:17:39	merijn	luite: When compared to merge sort?
2013-09-11 17:17:45	-->	shahn (~shahn@37-5-17-167-dynip.superkabel.de) has joined #haskell
2013-09-11 17:17:51	-->	e98 (~e98@p4FD5E6FC.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 17:17:57	luite	merijn: oh wait, are you referring to more optimized implementations or the simple one?
2013-09-11 17:18:18	beaky	but the thing I like about haskell (which might not be common to all functional language) is the expressiveness of the type system
2013-09-11 17:18:38	beaky	maybe its not a property unique to purely functional language though
2013-09-11 17:18:39	e98	does the ghc 7.8 dynlib changes imply that by default ghc will not build static executables anymore?
2013-09-11 17:18:53	luite	by default executables are still static
2013-09-11 17:18:58	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-09-11 17:19:04	luite	but the ghc programs themselves are not
2013-09-11 17:19:09	luite	on linux at least
2013-09-11 17:19:16	luite	perhaps windows not yet
2013-09-11 17:19:48	merijn	luite: I mean *actual* quick sort, not this example everyone trots out
2013-09-11 17:19:53	e98	luite: ah, does that mean in 7.6 the binaries in bin/ do run without lib/?
2013-09-11 17:20:02	e98	luite: to some extent 'run' I suppose
2013-09-11 17:20:17	merijn	luite: The filter+append recursion isn't actually quicksort, it doesn't even have the same complexity
2013-09-11 17:20:25	<--	tazjin (~tazjin@2a01:2b0:3041:3018:5cdd:af5a:310f:bfec) has quit (Ping timeout: 245 seconds)
2013-09-11 17:20:26	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-09-11 17:20:45	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 276 seconds)
2013-09-11 17:20:51	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-11 17:20:55	merijn	mergesort is elegant and efficient even if you have a naive functional implementation
2013-09-11 17:21:05	luite	merijn: where is the complexity different?
2013-09-11 17:21:12	-->	Guest29604 (~arthur@37.157.213.180) has joined #haskell
2013-09-11 17:21:27	<--	anRch (~markmilli@pool-108-20-105-46.bstnma.east.verizon.net) has quit (Quit: anRch)
2013-09-11 17:21:48	luite	(other than stack usage because it doesn't optimize sorting the larger partition)
2013-09-11 17:21:55	<--	LAMMJohn1on (~ja@user-5af43312.broadband.tesco.net) has quit (Ping timeout: 260 seconds)
2013-09-11 17:22:14	merijn	luite: See the blog post earlier: http://augustss.blogspot.co.uk/2007/08/quicksort-in-haskell-quicksort-is.html
2013-09-11 17:22:27	luite	merijn: it doesn't say anything about the complexity
2013-09-11 17:22:32	<--	joaopizani (~joaopizan@5350C46E.cm-6-1d.dynamic.ziggo.nl) has quit (Quit: Lost terminal)
2013-09-11 17:22:37	edwardk	beaky: did you wake up and decide to troll today?
2013-09-11 17:23:18	<--	Ralith (~ralith@216.162.199.202) has quit (Ping timeout: 248 seconds)
2013-09-11 17:23:39	merijn	luite: Oh, I thought it was that blogpost, I'd have to look up which post that was that discusses quicksort complexity
2013-09-11 17:23:49	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-11 17:24:05	-->	Peaker (~eyal@87.69.111.138) has joined #haskell
2013-09-11 17:25:07	merijn	luite: I don't immediately see an explanation of what's wrong here, but the consensus that is not O(n log n): http://stackoverflow.com/questions/11355621/pseudo-quicksort-time-complexity
2013-09-11 17:25:15	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-11 17:25:23	luite	merijn: but where is it actually different? it copies the lists a few times, but that doesn't change the complexity (you have to traverse the whole list for partitioning anyway), appending is the same, you only append every time you partition
2013-09-11 17:25:31	-->	KSkrzet (~tener@dynamic-78-8-247-238.ssp.dialog.net.pl) has joined #haskell
2013-09-11 17:25:58	<--	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has quit (Ping timeout: 256 seconds)
2013-09-11 17:26:04	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-11 17:26:04	-->	Gentlecat (~Roman@79.105.215.159) has joined #haskell
2013-09-11 17:26:09	luite	merijn: stack space use is different if you don't carefully choose your tail calls, but fixing that doesn't require switching to destructive update
2013-09-11 17:26:29	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-11 17:26:30	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Ping timeout: 240 seconds)
2013-09-11 17:26:30	-->	efforeffort (~efforeffo@d-111-197.eecs.umich.edu) has joined #haskell
2013-09-11 17:26:39	merijn	luite: Which still doesn't change the fact that merge sort is equally elegant *AND* better performing
2013-09-11 17:26:52	beaky	btw, how do i go about writing mergeSort :: (Ord a) => [a] -> [a] in haskell
2013-09-11 17:26:52	luite	merijn: sure but that totally isn't the point...
2013-09-11 17:27:01	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-11 17:27:11	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-11 17:27:27	merijn	luite: I'm saying quickosrt is terrible example because the speed is horrendous and merge sort is much better, and you respond by saying "it's quite functional"
2013-09-11 17:28:05	merijn	luite: How is it "functional" if there are significantly better implementations of the same behaviour
2013-09-11 17:28:20	<--	GaelanAintAround (~Gaelan@98-125-160-127.dyn.centurytel.net) has quit (Ping timeout: 245 seconds)
2013-09-11 17:28:31	merijn	By that logic you can call anything that has an elegant implementation functional, regardless of how sucky the runtime
2013-09-11 17:28:35	luite	merijn: i meant functional as opposed to imperative, since you claimed that quicksort is really an imperative algorithm
2013-09-11 17:28:45	<--	quchen (~quchen@wthp151d.physik.uni-wuerzburg.de) has quit (Ping timeout: 245 seconds)
2013-09-11 17:29:04	mkramer	the reason why quicksort is important is because it has an imperative implementation that is fast on real hardware
2013-09-11 17:29:07	merijn	luite: I did, and I stand by that. Quicksort is elegant and speedy in imperative code and in functional code it is merely elegant
2013-09-11 17:29:19	-->	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has joined #haskell
2013-09-11 17:29:24	merijn	While merge sort is both elegant *and* speedy in functional code
2013-09-11 17:29:29	donri	arguably the usual functional implementation isn't even "quicksort"
2013-09-11 17:29:36	luite	donri: argh you again
2013-09-11 17:29:39	luite	err
2013-09-11 17:29:40	donri	:D
2013-09-11 17:29:40	merijn	donri: Yes, that was what I said at first
2013-09-11 17:29:41	luite	not you
2013-09-11 17:29:42	luite	but again
2013-09-11 17:29:46	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-11 17:29:49	luite	donri: why isn't it? i'm not convinced
2013-09-11 17:30:05	luite	it's not a well-performing implementation, sure
2013-09-11 17:30:07	donri	luite: i said arguably because i'm not smart enough to judge myself ;)
2013-09-11 17:30:18	-->	jdegoes (~jdegoes@70-91-169-68-BusName-Colorado.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 17:30:23	donri	but the argument goes, quicksort by definition uses mutation
2013-09-11 17:30:25	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:30:30	donri	qsort without ST in haskell, doesn't
2013-09-11 17:30:43	merijn	luite: The argument provided in the SO link is that the key idea of quicksort is it's smart partitioning, which the naive qsort in haskell doesn't do
2013-09-11 17:31:07	merijn	luite: If the partitioning is not they key idea that makes it quicksort, what is?
2013-09-11 17:31:09	hpaste	edwardk pasted “CRCs: support for multiple CRC types” at http://lpaste.net/92851
2013-09-11 17:31:12	merijn	luite: The fact that it sorts?
2013-09-11 17:31:19	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 17:31:19	-->	GaelanAintAround (~Gaelan@207-118-80-54.dyn.centurytel.net) has joined #haskell
2013-09-11 17:31:29	merijn	Then I might as well call merge sort quicksort and call it a day
2013-09-11 17:31:40	edwardk	finally found a way that doesn't suck when it comes to encoding multiple versions of the galois field
2013-09-11 17:31:41	n-dolio	Is that meant to be a bad argument?
2013-09-11 17:31:47	<--	KSkrzet (~tener@dynamic-78-8-247-238.ssp.dialog.net.pl) has quit (Quit: Ex-Chat)
2013-09-11 17:31:48	edwardk	go reflection!
2013-09-11 17:31:57	<--	snowylike2 (~sn@91-67-170-78-dynip.superkabel.de) has quit (Read error: Connection timed out)
2013-09-11 17:32:04	n-dolio	There are many higher level details that distinguish quick sort from merge sort.
2013-09-11 17:32:21	merijn	n-dolio: It was reductio ad absurdum
2013-09-11 17:32:24	n-dolio	Or, maybe not 'many,' but some obvious ones.
2013-09-11 17:32:44	merijn	n-dolio: See my lines above that
2013-09-11 17:32:45	luite	merijn: the key is choosing a pivot and then partitioning around that. the fact that other implementations make it easier to make a pivot-chooser that handles common practical scenarios (in particular already sorted data) better, really doesn't make it a different algorithm
2013-09-11 17:32:51	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Quit: mikecaruso)
2013-09-11 17:32:55	<--	grazs (~g@89.221.241.91) has quit (Ping timeout: 245 seconds)
2013-09-11 17:33:33	merijn	luite: But you don't partition around a pivot in the functional one
2013-09-11 17:33:41	n-dolio	Yes, you do.
2013-09-11 17:33:43	luite	merijn: you do!
2013-09-11 17:33:57	merijn	There is no around if you have no left hand side...
2013-09-11 17:33:57	luite	the pivot is just the first element of the list, since that's easily accessible
2013-09-11 17:34:11	luite	merijn: uh?
2013-09-11 17:34:30	<--	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has quit (Ping timeout: 248 seconds)
2013-09-11 17:34:52	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Client Quit)
2013-09-11 17:35:03	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-09-11 17:35:03	<--	hiji (~hijim@FL1-110-233-147-43.kng.mesh.ad.jp) has quit (Ping timeout: 256 seconds)
2013-09-11 17:35:20	sellout-	merijn: qsort [5, 2, 9, 7, 3] –> qsort [2, 3] ++ [5] ++ qsort [9, 7]
2013-09-11 17:35:21	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-09-11 17:35:24	merijn	Anyway, I should do something more constructive, so I will leave it at this with the parting shot that if you say that quicksort is a nicer functional sort than merge sort, you're clearly insane (ad hominem bonus + 10!)
2013-09-11 17:35:35	sellout-	merijn: See the lefthand side?
2013-09-11 17:35:52	<--	morazow_ (~morazow@p548A400D.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2013-09-11 17:35:52	luite	merijn: i never said that...
2013-09-11 17:36:01	Cale	beaky: fwiw, I think the non-in-place version can rightfully be called quicksort too
2013-09-11 17:36:08	merijn	sellout-: I don't consider copying and duplicating all smaller elements in a list "partitioning"
2013-09-11 17:36:33	-->	markcw (~jack@128.135.100.109) has joined #haskell
2013-09-11 17:36:36	Cale	beaky: But some people are more picky about what characteristics are required to call something "quicksort"
2013-09-11 17:36:43	n-dolio	I guess we should rename the 'partition' function, then.
2013-09-11 17:36:55	beaky	ah
2013-09-11 17:37:05	merijn	luite: Then I wonder what the point was of disagreeing with me when I stated that I thought quicksort was quite imperative compared to merge sort
2013-09-11 17:37:19	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-11 17:37:19	merijn	n-dolio: There's different usages of partitioning going on there
2013-09-11 17:37:45	merijn	n-dolio: partition the function refers to logical grouping, the partitioning in quicksort is about dividing a space
2013-09-11 17:37:55	 *	elliott cries.
2013-09-11 17:38:08	--	gpampara is now known as gpampara_off
2013-09-11 17:38:40	<--	phienone (~ph@nappo.lnet.fi) has quit (Quit: Lost terminal)
2013-09-11 17:38:46	-->	LAMMJohnson (~ja@user-5af43312.broadband.tesco.net) has joined #haskell
2013-09-11 17:38:47	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:39:07	luite	merijn: you said that quicksort is in essence an imperative algorithm. i disagree with that, arguing that the common quicksort example is still quicksort, and nicely functional. i never said anything about nicer than merge sort, or about it being a good practical implementation
2013-09-11 17:39:10	Cale	beaky: To write mergesort, I would recommend first writing merge :: (Ord a) => [a] -> [a] -> [a], which merges two sorted lists to get another, and then applying it to pairs of even/odd adjacent elements in map (:[]) xs (i.e. take your list, make each element of it into a singleton list which is trivially sorted, and then merge adjacent pairs together recursively until you're done.
2013-09-11 17:39:12	Cale	)
2013-09-11 17:39:43	luite	merijn: i have to leave for dinner now, sorry :p
2013-09-11 17:40:12	-->	exobit (~exobit@ext.corp.bitshelter.com) has joined #haskell
2013-09-11 17:40:39	-->	PhineasRex (~chris@c-24-60-137-35.hsd1.nh.comcast.net) has joined #haskell
2013-09-11 17:40:45	merijn	luite: I wonder how you turned "<merijn> That's because quicksort is quite imperative" into "you said that quicksort is in essence an imperative algorithm"
2013-09-11 17:41:19	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-09-11 17:41:51	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-11 17:41:52	Cale	http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/src/Data-List.html#sort
2013-09-11 17:42:07	Cale	The implementation of sort in GHC happens to be such a mergesort
2013-09-11 17:42:32	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 245 seconds)
2013-09-11 17:42:50	Cale	oh, it looks like it chops into already-sorted sequences though
2013-09-11 17:43:18	Cale	I recall at one point it just did the simple thing of splitting into singletons
2013-09-11 17:43:54	<--	LAMMJohnson (~ja@user-5af43312.broadband.tesco.net) has quit (Ping timeout: 264 seconds)
2013-09-11 17:44:02	-->	nilsi_ (~nilsi@46.246.21.49) has joined #haskell
2013-09-11 17:44:13	Cale	beaky: ^^
2013-09-11 17:44:41	<--	aupiff (~aupiff@67-194-63-40.wireless.umnet.umich.edu) has quit (Ping timeout: 256 seconds)
2013-09-11 17:44:50	<--	nilsi_ (~nilsi@46.246.21.49) has quit (Remote host closed the connection)
2013-09-11 17:45:45	-->	davidsd (~davidsd@e204074.ext.net.ias.edu) has joined #haskell
2013-09-11 17:45:53	-->	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has joined #haskell
2013-09-11 17:46:00	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-09-11 17:46:12	<--	shahn (~shahn@37-5-17-167-dynip.superkabel.de) has quit (Quit: Konversation terminated!)
2013-09-11 17:46:17	<--	psii (~psii@gateway/tor-sasl/foopsi) has quit (Quit: WeeChat 0.4.1)
2013-09-11 17:46:36	<--	SpyrosTrigazis (~spyrostri@conf-198.admin.grnet.gr) has quit (Remote host closed the connection)
2013-09-11 17:46:43	<--	whaletechno (~whaletech@unaffiliated/whaletechno) has quit (Quit: ha det bra)
2013-09-11 17:47:02	-->	SpyrosTrigazis (~spyrostri@2001:648:2320:61:5c32:611:e87b:18e6) has joined #haskell
2013-09-11 17:47:10	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-11 17:47:13	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:47:23	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 17:47:38	kuribas	How can I see the assembler output from ghc?
2013-09-11 17:47:40	-->	shahn_ (~shahn@37-5-17-167-dynip.superkabel.de) has joined #haskell
2013-09-11 17:47:44	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-11 17:47:56	<--	vijaykiran (~user@213.208.206.28) has quit (Ping timeout: 264 seconds)
2013-09-11 17:47:56	<--	Hannibal_Smith (~ff130493@host141-116-dynamic.51-79-r.retail.telecomitalia.it) has quit (Quit: Sto andando via)
2013-09-11 17:48:17	merijn	kuribas: Disassemble the binary?
2013-09-11 17:48:20	<--	grazs (~g@89.221.241.91) has quit (Ping timeout: 245 seconds)
2013-09-11 17:48:22	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has quit (Client Quit)
2013-09-11 17:48:28	bartavelle	kuribas, ghc-core is handy
2013-09-11 17:48:37	donri	kuribas: the ghc-core package is helpful for that, but you will probably find looking at Core more useful
2013-09-11 17:48:40	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-11 17:48:42	kuribas	I already have core output...
2013-09-11 17:48:44	donri	(which it also does)
2013-09-11 17:48:53	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-11 17:48:54	bartavelle	ghc-core displays both
2013-09-11 17:49:02	Cale	-ddump-asm
2013-09-11 17:49:14	geekosaur	-ddump-asm is a thing, but is not going to be very enlightening
2013-09-11 17:49:17	-->	kstt (~paulfrome@mal35-2-82-228-176-228.fbx.proxad.net) has joined #haskell
2013-09-11 17:49:20	<--	ampersand27017 (~ampersand@69.3.174.98) has quit (Quit: ampersand27017)
2013-09-11 17:49:24	kuribas	thanks
2013-09-11 17:49:28	merijn	geekosaur: Depends on why you wanna look at it :)
2013-09-11 17:49:28	kstt	hello
2013-09-11 17:49:40	kuribas	I want to see what Core translates to.
2013-09-11 17:49:51	-->	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has joined #haskell
2013-09-11 17:49:55	<--	eikke (~nicolas@78-20-0-121.access.telenet.be) has quit (Ping timeout: 260 seconds)
2013-09-11 17:50:13	-->	jeetu (~jeetu@117.192.20.226) has joined #haskell
2013-09-11 17:50:13	-->	revtintin (~revtintin@103.11.50.16) has joined #haskell
2013-09-11 17:50:17	geekosaur	it translates to cmm, I believe :)
2013-09-11 17:50:34	hpaste	beaky pasted “merge” at http://lpaste.net/92852
2013-09-11 17:50:45	kuribas	Well, I mean how it translates into asm...
2013-09-11 17:50:50	beaky	I think I nailed down merge, but I don't know how to do the mergeSort bit :(
2013-09-11 17:51:10	Cale	beaky: If you'd like to cheat a little, have a look at the code I linked
2013-09-11 17:51:11	<--	Sonderblade (~boo@130.144.241.83.in-addr.dgcsystems.net) has quit (Quit: Lämnar)
2013-09-11 17:51:16	<--	SpyrosTrigazis (~spyrostri@2001:648:2320:61:5c32:611:e87b:18e6) has quit (Ping timeout: 245 seconds)
2013-09-11 17:51:32	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-11 17:51:40	beaky	yeah reading the haskell base source is enlighening
2013-09-11 17:51:43	Cale	beaky: Start with a function which takes a list of lists, and applies merge to adjacent even/odd pairs of lists
2013-09-11 17:52:02	Cale	beaky: and then write something which applies that function until there's only one list left
2013-09-11 17:52:06	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-09-11 17:52:08	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-11 17:52:35	-->	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has joined #haskell
2013-09-11 17:52:40	<--	eacameron (~Elliot_Ca@69.41.14.217) has quit (Read error: Connection reset by peer)
2013-09-11 17:52:49	Cale	i.e. you'll cut the number of lists roughly in half each time
2013-09-11 17:53:01	kstt	My application must read a hand-written data file, representing a n-tree of tuples. From your experience, what data format should I use ? XML, YAML, JSON, haskell show/read ?  Performance is not an issue, I prefer simplicity, conciseness of the code and of the data file, and robustness against format error. Thx
2013-09-11 17:53:11	<--	hexagoxel (~hexagoxel@pc23121.eduroam.uni-kiel.de) has quit (Ping timeout: 256 seconds)
2013-09-11 17:54:07	-->	jim_ (~jim@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-11 17:54:29	-->	kitallis (~kitallis@122.166.154.133) has joined #haskell
2013-09-11 17:54:32	-->	anRch (~markmilli@ip-64-134-41-115.public.wayport.net) has joined #haskell
2013-09-11 17:54:56	merijn	s-expressions are usually not a terrible data format :p
2013-09-11 17:54:56	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-11 17:55:04	-->	Targen (~iguana@186.95.158.176) has joined #haskell
2013-09-11 17:55:19	<--	JaRoel (~jaroel|4d@2a03:5700:3:0:8d0f:fc4e:a3bf:171a) has quit (Remote host closed the connection)
2013-09-11 17:55:24	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-09-11 17:55:27	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-09-11 17:55:45	-->	JaRoel|4d (~jaroel|4d@94.142.213.250) has joined #haskell
2013-09-11 17:56:00	Cale	Nothing is going to beat haskell show/read for simplicity, but 'read' will error out if there's a problem with the format, and even reads/readsPrec won't tell you what's wrong (but you'll get an empty list of parses)
2013-09-11 17:56:16	Cale	There are some nice JSON libraries
2013-09-11 17:56:33	donri	yaml might be optimal for the hand-writing part of it
2013-09-11 17:56:56	donri	but it's rather liberal so format error robustness is questionable
2013-09-11 17:57:02	<--	adinapoli (~adinapoli@217.113.163.2) has quit (Remote host closed the connection)
2013-09-11 17:57:16	gwern	http://lpaste.net/92853 type error; apparently the value is too general for the function I apply to it, but I'm not sure how I would narrow it down
2013-09-11 17:57:27	ocharles	JSON generated by Aeson and GHC.Generics can be a nice way to get going with it - but that ties your JSON schema to your code schema, so you might not want that in the long run
2013-09-11 17:57:35	gwern	(more frustratingly, this only became a problem upon upgrading pandoc, it ran just fine yesterday!)
2013-09-11 17:57:48	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 276 seconds)
2013-09-11 17:58:13	Cale	 Couldn't match expected type `V.Vector GoodReads'
2013-09-11 17:58:13	Cale	                with actual type `vector-0.9.1:Data.Vector.Vector a0'
2013-09-11 17:58:21	Cale	This looks like package mismatch
2013-09-11 17:58:35	-->	pycabrera (~alejandro@72.3.234.177) has joined #haskell
2013-09-11 17:58:45	Cale	Normally, if those occurrences of 'Vector' were the same type, those would unify with GoodReads ~ a0
2013-09-11 17:58:47	gwern	package mismatch? where would that be coming from
2013-09-11 17:58:50	<--	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has quit (Ping timeout: 256 seconds)
2013-09-11 17:58:51	donri	ghc-pkg list vector?
2013-09-11 17:58:58	-->	shesek (~shesek@77.125.11.97) has joined #haskell
2013-09-11 17:59:17	-->	elediaz_ (~quassel@90.173.212.57) has joined #haskell
2013-09-11 17:59:24	<--	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-09-11 17:59:28	gwern	donri: '/var/lib/ghc/package.conf.d    vector-0.9.1 /home/gwern/.ghc/x86_64-linux-7.4.1/package.conf.d    vector-0.10.0.1'
2013-09-11 17:59:52	-->	Noldorin (~noldorin@unaffiliated/noldorin) has joined #haskell
2013-09-11 17:59:59	donri	i've never had that problem with cabal, but it seems to show up easily with ghci and runhaskell is basically ghci isn't it?
2013-09-11 18:00:06	<--	cppcabrera (~alejandro@72.32.115.231) has quit (Read error: Operation timed out)
2013-09-11 18:00:11	gwern	I get the same error using just ghc too
2013-09-11 18:00:15	-->	Shou (~sister@81.191.185.181) has joined #haskell
2013-09-11 18:00:28	--	pycabrera is now known as cppcabrera
2013-09-11 18:00:29	<--	JaRoel|4d (~jaroel|4d@94.142.213.250) has quit (Ping timeout: 264 seconds)
2013-09-11 18:00:41	donri	but you're not passing explicit -package options, surely? cabal will, though
2013-09-11 18:00:44	Cale	Data.Csv depends on Vector
2013-09-11 18:00:57	Cale	But which version was it built against?
2013-09-11 18:01:18	kuribas	Does ghc do supercompilation?  For example, can it transform sum [a, b, c
2013-09-11 18:01:20	gwern	hm. I don't know. I don't think pandoc depends on cassava so it probably didn't get upgraded last night
2013-09-11 18:01:32	kuribas	] into a + b + c?
2013-09-11 18:01:38	Cale	By current guess is that your pandoc and cassava are built against two different vector packages
2013-09-11 18:01:46	-->	mstksg (~justin@ip68-5-181-190.oc.oc.cox.net) has joined #haskell
2013-09-11 18:01:57	Cale	kuribas: no
2013-09-11 18:02:00	gwern	'$ cabal install Resolving dependencies... In order, the following will be installed: cassava-0.2.2.0 (reinstall) changes: vector-0.9.1 -> 0.10.0.1 Warning: Note that reinstalls are always dangerous. Continuing anyway... Configuring cassava-0.2.2.0...' <-- looks like it
2013-09-11 18:02:29	Cale	My*, heh
2013-09-11 18:02:58	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-11 18:03:08	kuribas	Cale: Is there no incentive to enable supercompilation for ghc?
2013-09-11 18:04:17	Cale	kuribas: I seem to recall that Neil Mitchell (ndm when he's online) has done a bunch of work on supercompilation.
2013-09-11 18:04:28	gwern	Cale: yep, that fixed it, thanks
2013-09-11 18:04:33	ocharles	I think Max Bolingbroke did work on that
2013-09-11 18:04:35	Cale	gwern: no problem
2013-09-11 18:04:35	ocharles	(also)
2013-09-11 18:04:40	ocharles	kuribas: is sum [a, b, c] -> a + b + c really supercompilation though?
2013-09-11 18:04:46	e98	is there any way to run ghci inplace in a 7.8 build tree? 7.8's 'make install' fails and I wanted to check the utf-8 issue reported to see if it affects me
2013-09-11 18:04:49	gwern	Cale: yeah, ndm's thesis was aon supercompilation, wasn't it? but iirc his work never made it into ghc (as usual)
2013-09-11 18:05:17	ocharles	http://vimeo.com/16753555 that's Max's work on supercompilation
2013-09-11 18:05:25	-->	snowylike (~sn@91-67-170-78-dynip.superkabel.de) has joined #haskell
2013-09-11 18:05:44	kuribas	ocharles: Well, supercompilation would do the transform.
2013-09-11 18:05:44	gwern	ghc - where theses and summer of codes go to die
2013-09-11 18:06:03	<--	shesek (~shesek@77.125.11.97) has quit (Read error: Operation timed out)
2013-09-11 18:06:35	-->	LAMMJohnson (~ja@user-5af43312.broadband.tesco.net) has joined #haskell
2013-09-11 18:06:36	<--	edvo (~edvo@tmo-096-204.customers.d1-online.com) has quit (Quit: Leaving)
2013-09-11 18:06:47	ion	What’s the Community’s favorite type-safe printf replacement? I’ll accept any method, including quasiquotes.
2013-09-11 18:07:02	Cale	I like show and concat
2013-09-11 18:07:24	ion	cale: I need formatting like %5.2f
2013-09-11 18:07:41	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-09-11 18:07:56	donri	printf-mauke doesn't look like complete crap, but haven't used it
2013-09-11 18:07:57	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-11 18:08:15	<--	JohnBat26 (~Eugene@89.175.77.172) has quit (Quit: KVIrc 4.3.1 Aria http://www.kvirc.net/)
2013-09-11 18:08:44	-->	eacameron (~Elliot_Ca@pdev.ces.cvnt.net) has joined #haskell
2013-09-11 18:08:54	-->	litherum (~Adium@76.74.153.49) has joined #haskell
2013-09-11 18:08:56	-->	quchen (~quchen@p54AA4DA8.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 18:09:00	kstt	merijn, Cale, donri, ocharles: thx. Failing without error message is too bad. ocharles, data won't be generated, but hand-written.
2013-09-11 18:09:11	kuribas	gwern: Didn't his paper work with the Yhc compiler?
2013-09-11 18:09:30	gwern	kuribas: yes, but he was comparing with GHC (to show the value of his techniques) and was hoping to get it into ghc, iirc
2013-09-11 18:09:34	<--	phischu (~pschuster@dhcp206.uni-koblenz.de) has quit (Read error: Operation timed out)
2013-09-11 18:09:45	Cale	kstt: If it were me, it would probably come down to asking what format I'd like to enter the data in
2013-09-11 18:10:09	<--	eff_ (~quassel@114.246.78.93) has quit (Ping timeout: 276 seconds)
2013-09-11 18:10:11	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-11 18:10:13	Cale	kstt: and then either writing a Parsec parser for that format, or using something existing if I decided on something like JSON
2013-09-11 18:10:14	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (Ping timeout: 248 seconds)
2013-09-11 18:10:16	-->	nebnesknarf (~bfr@brln-4db97e08.pool.mediaWays.net) has joined #haskell
2013-09-11 18:10:40	kstt	Cale : Indeed, and that would certainly be YAML. But I don't know what exists to read a data structure from Yaml.
2013-09-11 18:10:57	Clint	@hackage yaml
2013-09-11 18:10:57	lambdabot	http://hackage.haskell.org/package/yaml
2013-09-11 18:11:03	Cale	http://hackage.haskell.org/package/yaml
2013-09-11 18:11:04	n-dolio	Max's work was on GHC, I think.
2013-09-11 18:11:17	-->	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has joined #haskell
2013-09-11 18:11:19	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-09-11 18:11:23	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 246 seconds)
2013-09-11 18:11:30	n-dolio	(Unsurprisingly.)
2013-09-11 18:11:35	ion	donri: Thanks. That’s one of the alternatives i was looking at. I suppose i’ll just pick that one.
2013-09-11 18:11:45	n-dolio	I don't know what came of it, though.
2013-09-11 18:12:05	-->	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has joined #haskell
2013-09-11 18:12:07	<--	scriptor (~Scriptor@unaffiliated/scriptor) has left #haskell
2013-09-11 18:12:13	Cale	Yeah, ndm's work was on Yhc, though there was, I think, a standalone source -> source supercompiler (supero?)
2013-09-11 18:12:33	kstt	Cale, Clint : can I just *derive* the n-tree and have the YAML parser for free, like with JSON and built-in read ?
2013-09-11 18:12:47	kstt	It does not seem so, at first glance
2013-09-11 18:13:02	-->	dmwit (~dmwit@pool-71-162-226-26.phlapa.east.verizon.net) has joined #haskell
2013-09-11 18:13:22	<--	mkramer (~Adium@ip68-225-32-235.hr.hr.cox.net) has left #haskell
2013-09-11 18:13:34	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-11 18:13:53	kstt	http://hackage.haskell.org/packages/archive/yaml/0.8.5/doc/html/Data-Yaml.html#g:5  <- Is that a documentation bug ? Yaml package with Aeson doc ?
2013-09-11 18:14:17	donri	kstt: you can derive the json instances
2013-09-11 18:14:35	-->	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 18:14:36	Clint	not a bug
2013-09-11 18:14:42	geekosaur	"This module reuses most of the infrastructure from the aeson package."
2013-09-11 18:14:45	geekosaur	right at the very top
2013-09-11 18:14:50	donri	"For the most part, YAML content translates directly into JSON, and therefore there is very little data loss. If you need to deal with YAML more directly (e.g., directly deal with aliases), you should use the Text.Libyaml module instead."
2013-09-11 18:14:54	kstt	ah, yes, indeed ...
2013-09-11 18:15:03	-->	eff_ (~quassel@123.118.173.167) has joined #haskell
2013-09-11 18:15:24	kstt	cool, good news. Thank you
2013-09-11 18:15:53	beaky	@hoogle [a] -> [[a]]
2013-09-11 18:15:54	lambdabot	Data.List inits :: [a] -> [[a]]
2013-09-11 18:15:54	lambdabot	Data.List permutations :: [a] -> [[a]]
2013-09-11 18:15:54	lambdabot	Data.List subsequences :: [a] -> [[a]]
2013-09-11 18:15:54	<--	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has quit (Quit: gentleben)
2013-09-11 18:15:56	merijn	I've started to dislike JSON as a serialisation format
2013-09-11 18:16:01	<--	quchen (~quchen@p54AA4DA8.dip0.t-ipconnect.de) has quit (Ping timeout: 268 seconds)
2013-09-11 18:16:07	merijn	Mostly because of it's ridiculous treatment of numbers
2013-09-11 18:16:09	Kinnison	It's faster than YAML :-(
2013-09-11 18:16:35	<--	mbuf (~user@49.248.82.84) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-11 18:16:55	hpaste	beaky pasted “Improving mergesort” at http://lpaste.net/92854
2013-09-11 18:17:14	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-09-11 18:17:21	beaky	how do I improve my mergesort?
2013-09-11 18:17:43	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: rebooting)
2013-09-11 18:18:06	<--	_oio_ (~kenneth@186.83.255.243) has quit (Ping timeout: 264 seconds)
2013-09-11 18:18:55	beaky	wow haskell mergesort looks very elegant
2013-09-11 18:19:03	beaky	in C  it would take me dozens of lines
2013-09-11 18:19:08	beaky	(in c++ only 3 lines)
2013-09-11 18:19:09	--	Philonous__ is now known as Philonous
2013-09-11 18:19:15	<--	nasarde (~andreasg@OL203-132.fibertel.com.ar) has quit (Ping timeout: 256 seconds)
2013-09-11 18:19:32	-->	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has joined #haskell
2013-09-11 18:19:34	-->	scriptor (~Scriptor@unaffiliated/scriptor) has joined #haskell
2013-09-11 18:19:50	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-11 18:19:52	<--	tnks (~tnks@cpe-70-112-104-61.austin.res.rr.com) has left #haskell
2013-09-11 18:20:43	beaky	btw is there a generic merge in the prelude
2013-09-11 18:21:34	<--	nebnesknarf (~bfr@brln-4db97e08.pool.mediaWays.net) has quit (Quit: Bye)
2013-09-11 18:21:35	<--	ggherdov (uid11402@gateway/web/irccloud.com/x-kevtazlzzwdkpcgt) has quit (Changing host)
2013-09-11 18:21:35	-->	ggherdov (uid11402@unaffiliated/ggherdov) has joined #haskell
2013-09-11 18:21:35	<--	ggherdov (uid11402@unaffiliated/ggherdov) has quit (Changing host)
2013-09-11 18:21:35	-->	ggherdov (uid11402@gateway/web/irccloud.com/x-kevtazlzzwdkpcgt) has joined #haskell
2013-09-11 18:21:40	dmwit	Not in Prelude, but data-ordlist has it.
2013-09-11 18:21:41	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-11 18:22:01	-->	dwins (~dwins@75.103.7.74) has joined #haskell
2013-09-11 18:22:12	<--	dwins (~dwins@75.103.7.74) has left #haskell
2013-09-11 18:22:14	<--	revtintin (~revtintin@103.11.50.16) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-09-11 18:22:47	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-11 18:23:03	<--	Swizec (~swizec@BSN-142-112-173.dial-up.dsl.siol.net) has quit (Ping timeout: 264 seconds)
2013-09-11 18:23:13	<--	merijn (~merijn@laptop-27-102.macs.hw.ac.uk) has quit (Ping timeout: 256 seconds)
2013-09-11 18:23:15	beaky	aww :(
2013-09-11 18:23:30	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-09-11 18:23:52	ion	I wonder if PEBKAC? λ> let n = 42 :: Double in (Text.Printf.Mauke.printf "%10.1f" n, Text.Printf.printf "%10.1f" n) :: (String, String)
2013-09-11 18:23:53	ion	("42.0","      42.0")
2013-09-11 18:23:57	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-09-11 18:24:02	-->	shesek (~shesek@77.125.11.97) has joined #haskell
2013-09-11 18:24:28	-->	cfricke_ (~cfricke@96.45.197.22) has joined #haskell
2013-09-11 18:24:51	<--	shahn_ (~shahn@37-5-17-167-dynip.superkabel.de) has quit (Quit: Konversation terminated!)
2013-09-11 18:25:04	int-e	ion: looks like a bug in the first printf.
2013-09-11 18:25:15	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-09-11 18:25:33	-->	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has joined #haskell
2013-09-11 18:25:49	ion	"%010.1f" makes Mauke.printf return "00000042.0", "% 10.1f" makes Mauke.printf return " 42.0"
2013-09-11 18:25:55	<--	shesek (~shesek@77.125.11.97) has quit (Max SendQ exceeded)
2013-09-11 18:25:56	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-11 18:26:07	<--	cfricke (~cfricke@96.45.197.22) has quit (Remote host closed the connection)
2013-09-11 18:26:15	<--	anRch (~markmilli@ip-64-134-41-115.public.wayport.net) has quit (Quit: anRch)
2013-09-11 18:26:20	--	erochester1 is now known as erochester
2013-09-11 18:26:20	-->	shesek (~shesek@77.125.11.97) has joined #haskell
2013-09-11 18:26:44	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-11 18:26:46	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-11 18:27:24	geekosaur	I think that's a longstanding bug in Text.Printf?
2013-09-11 18:27:32	geekosaur	oh, hm, wrong one
2013-09-11 18:27:38	geekosaur	maukes produced the wrong output
2013-09-11 18:27:47	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-11 18:28:06	geekosaur	it *was* a bug in Text.Printf for a long time though, so understandable that later replacements copied it
2013-09-11 18:28:13	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (Ping timeout: 240 seconds)
2013-09-11 18:28:30	-->	JaRoel|4d (~jaroel|4d@2001:980:7133:1:b858:1000:881f:db85) has joined #haskell
2013-09-11 18:28:46	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 245 seconds)
2013-09-11 18:29:02	-->	zammy (~sammy@ppp-222-64.98-62.inwind.it) has joined #haskell
2013-09-11 18:29:20	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-11 18:29:26	-->	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-09-11 18:29:26	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-09-11 18:30:02	-->	ecr (~Thunderbi@2620:101:8003:200:498c:46f3:161:f393) has joined #haskell
2013-09-11 18:30:20	sellout-	Man, my :lalex definition for ghci streamlines things so much.
2013-09-11 18:30:29	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-09-11 18:30:52	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-11 18:31:13	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-11 18:31:21	ion	I suppose i’ll try this one next. http://hackage.haskell.org/packages/archive/holey-format/1.2.0/doc/html/Text-Format.html
2013-09-11 18:31:37	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-11 18:31:41	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-11 18:31:54	magneticduck	hey is there a simple way to get show for floats to not use scientific notation?
2013-09-11 18:32:07	<--	_oio_ (~kenneth@186.83.255.243) has quit (Client Quit)
2013-09-11 18:32:11	magneticduck	> 1/100
2013-09-11 18:32:12	lambdabot	  1.0e-2
2013-09-11 18:32:26	magneticduck	> 1/100 :: CReal
2013-09-11 18:32:27	-->	_oio_ (~kenneth@186.83.255.243) has joined #haskell
2013-09-11 18:32:28	lambdabot	  0.01
2013-09-11 18:32:44	magneticduck	oh, I guess I just solved my problem; now the question is "is there a faster way?"
2013-09-11 18:32:47	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-11 18:32:52	magneticduck	without having to use CReal
2013-09-11 18:33:04	-->	uvelichitel (~uvelichit@37.73.243.85) has joined #haskell
2013-09-11 18:33:08	dmwit	magneticduck: Yes, see the show?Float functions in Numeric.
2013-09-11 18:33:22	geekosaur	yeh, I'd poke at Numeric for formatting functions
2013-09-11 18:33:37	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-11 18:33:38	-->	tibbe (~tibbe@207.198.105.19) has joined #haskell
2013-09-11 18:33:42	<--	xinming (~xinming@125.87.101.172) has quit (Ping timeout: 264 seconds)
2013-09-11 18:33:48	geekosaur	showFFloat specifically
2013-09-11 18:34:01	-->	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has joined #haskell
2013-09-11 18:34:01	<--	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has quit (Changing host)
2013-09-11 18:34:01	-->	Mortomes (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-11 18:34:07	donri	ion: how about xformat :)
2013-09-11 18:34:11	-->	gentleben (~gentleben@12.250.97.26) has joined #haskell
2013-09-11 18:34:12	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 276 seconds)
2013-09-11 18:34:15	-->	Sonderblade (~Sonderbla@h-52-183.a157.priv.bahnhof.se) has joined #haskell
2013-09-11 18:34:19	<--	cfricke_ (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-09-11 18:34:37	-->	xinming (~xinming@125.87.101.172) has joined #haskell
2013-09-11 18:34:37	-->	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has joined #haskell
2013-09-11 18:35:34	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 240 seconds)
2013-09-11 18:35:42	int-e	> liftM2 (\f x -> f Nothing x "") [Numeric.showEFloat, Numeric.showFFloat, Numeric.showGFloat] [1e10,1,1e-10]
2013-09-11 18:35:43	lambdabot	  ["1.0e10","1.0e0","1.0e-10","10000000000.0","1.0","0.0000000001","1.0e10","...
2013-09-11 18:36:25	<--	SoupE (~jloos@f055247019.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-09-11 18:36:28	donri	ion: and perhaps talk to mauke who's here
2013-09-11 18:36:35	-->	danilo2 (959cc887@gateway/web/freenode/ip.149.156.200.135) has joined #haskell
2013-09-11 18:36:41	-->	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has joined #haskell
2013-09-11 18:37:14	<--	dmwit (~dmwit@pool-71-162-226-26.phlapa.east.verizon.net) has quit (Quit: answered my question)
2013-09-11 18:37:24	danilo2	Hello! Is it possible in Haskell to write such newtype: "newtype MyIO a = MyIO (IO a) ", which will be instance of Show in such way,  that it will return "MyIO Int" for MyIO (IO Int) ?
2013-09-11 18:37:28	-->	james-ubc (~james@dhcp-206-87-195-89.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 18:37:42	ion	donri: I picked holey-format over it because its authors were more familiar to me. :-P Or is xformat better in some way?
2013-09-11 18:38:00	<--	seynb (~seynb@ip68-230-151-201.ri.ri.cox.net) has quit (Quit: Leaving)
2013-09-11 18:38:20	danilo2	Or is it possible sismply to add Show instance to IO ?
2013-09-11 18:38:23	-->	Thra11 (~Thra11@87.113.58.201) has joined #haskell
2013-09-11 18:38:25	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-11 18:38:28	ion	danilo2: You could do that with instance (Typeable a) => Show (MyIO a), i think.
2013-09-11 18:38:37	-->	dwins (~dwins@75.103.7.74) has joined #haskell
2013-09-11 18:38:43	<--	dwins (~dwins@75.103.7.74) has left #haskell
2013-09-11 18:39:02	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-09-11 18:39:04	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Read error: Connection reset by peer)
2013-09-11 18:39:06	ion	Adding an orphan Show instance to IO would also be possible similarly.
2013-09-11 18:39:08	donri	nah that'll show it as MyIO <IO Int>
2013-09-11 18:39:12	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-11 18:39:23	donri	uh <<IO Int>> even, maybe
2013-09-11 18:39:30	-->	ashnur (~ashnur@79.117.70.30) has joined #haskell
2013-09-11 18:39:37	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-11 18:39:40	leroux	danilo2: You may need to use FlexibleInstances and TypeSynonymInstances.
2013-09-11 18:39:52	-->	SoupEvil (~jloos@f055240000.adsl.alicedsl.de) has joined #haskell
2013-09-11 18:39:53	ion	> putStrLn "hai"  -- Did lambdabot have that instance?
2013-09-11 18:39:55	lambdabot	  <IO ()>
2013-09-11 18:40:32	donri	ion: no clue re xformat
2013-09-11 18:41:14	Maior	@hoogle (Monad m) => (a -> b) -> (a -> m b)
2013-09-11 18:41:14	lambdabot	Control.Monad liftM :: Monad m => (a1 -> r) -> m a1 -> m r
2013-09-11 18:41:15	lambdabot	Control.Monad ap :: Monad m => m (a -> b) -> m a -> m b
2013-09-11 18:41:15	lambdabot	Prelude ($) :: (a -> b) -> a -> b
2013-09-11 18:41:44	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-11 18:42:03	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-11 18:42:11	<--	OlegYch (~OlegYch@213.184.238.131) has quit (Ping timeout: 246 seconds)
2013-09-11 18:42:31	danilo2	ion, leroux, donri: thank you - I'm trying it right now :)
2013-09-11 18:42:31	<--	madjestic (~madjestic@31.21.67.172) has quit (Read error: Connection reset by peer)
2013-09-11 18:42:59	-->	epsilonhalbe (~epsilonha@178.115.129.89.wireless.dyn.drei.com) has joined #haskell
2013-09-11 18:43:14	<--	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has quit (Ping timeout: 240 seconds)
2013-09-11 18:43:14	-->	kobain_ (~kobian@190.57.227.106) has joined #haskell
2013-09-11 18:43:14	<--	kobain_ (~kobian@190.57.227.106) has quit (Changing host)
2013-09-11 18:43:14	-->	kobain_ (~kobian@unaffiliated/kobain) has joined #haskell
2013-09-11 18:43:36	<--	kobain (~kobian@unaffiliated/kobain) has quit (Ping timeout: 256 seconds)
2013-09-11 18:43:51	-->	OlegYch (~OlegYch@213.184.238.131) has joined #haskell
2013-09-11 18:44:24	donri	uh ignore me danilo2 i misread ion
2013-09-11 18:44:33	beaky	why is my mergesort so inefficient
2013-09-11 18:44:49	hpaste	danilo2 pasted “Show IO” at http://lpaste.net/92855
2013-09-11 18:44:54	hpaste	beaky pasted “inefficient mergesort” at http://lpaste.net/92856
2013-09-11 18:45:10	danilo2	ion, leroux, donri: The following code "hangs" when running: http://lpaste.net/92855
2013-09-11 18:45:22	<--	maxiepoo (~Max@c-24-18-249-12.hsd1.wa.comcast.net) has quit (Quit: maxiepoo)
2013-09-11 18:45:52	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (Ping timeout: 245 seconds)
2013-09-11 18:46:02	-->	u__ (~phillip@adsl-75-57-165-215.dsl.emhril.sbcglobal.net) has joined #haskell
2013-09-11 18:46:25	donri	danilo2: you need to define show too
2013-09-11 18:46:38	int-e	beaky: ouch. you're merging a list of increasing lists with a bunch of singleton lists
2013-09-11 18:46:51	<--	edon (~user@albalug/edon) has quit (Ping timeout: 260 seconds)
2013-09-11 18:47:03	donri	danilo2: https://github.com/mokus0/show/blob/master/ShowFun.hs
2013-09-11 18:47:24	danilo2	donri: ahhh ok!
2013-09-11 18:47:34	danilo2	donri: thanks!
2013-09-11 18:47:51	<--	epsilonhalbe (~epsilonha@178.115.129.89.wireless.dyn.drei.com) has quit (Ping timeout: 276 seconds)
2013-09-11 18:48:04	beaky	ah
2013-09-11 18:48:13	hpaste	int-e annotated “inefficient mergesort” with “inefficient mergesort (binary fold)” at http://lpaste.net/92856#a92857
2013-09-11 18:48:14	beaky	so my mergesort is just as crappy as the qsort example?
2013-09-11 18:48:42	<--	jmcarthur_mobile (~jmcarthur@172.56.4.24) has quit (Ping timeout: 256 seconds)
2013-09-11 18:48:46	int-e	beaky: if I haven't messed up (I typed it directly into lpaste), that version should perform fine
2013-09-11 18:48:51	<--	u_ (~phillip@adsl-75-57-172-142.dsl.emhril.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-11 18:48:54	<--	kstt (~paulfrome@mal35-2-82-228-176-228.fbx.proxad.net) has quit (Ping timeout: 240 seconds)
2013-09-11 18:49:35	<--	Argue (~Argue@112.209.122.237) has quit (Quit: Leaving)
2013-09-11 18:49:36	int-e	beaky: your code is essentially a naive insertion sort, which is O(n^2) on average. (The qsort example is still O(n log n) average.)
2013-09-11 18:49:38	-->	Nisstyre-laptop (~yours@oftn/member/Nisstyre) has joined #haskell
2013-09-11 18:49:39	beaky	yes yours works very fast
2013-09-11 18:49:46	beaky	almost as fast as prelude one :D
2013-09-11 18:49:47	<--	hsyl20 (~shenry@193.50.110.138) has quit (Quit: Lost terminal)
2013-09-11 18:49:51	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-11 18:50:02	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 245 seconds)
2013-09-11 18:50:12	--	Nisstyre-laptop is now known as nisstyre
2013-09-11 18:51:02	<--	RoXtein (~roxtein@di18.di.fct.unl.pt) has quit (Quit: Leaving)
2013-09-11 18:52:16	beaky	hmm the naive qsort is slow too :(
2013-09-11 18:52:27	<--	james-ubc (~james@dhcp-206-87-195-89.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-11 18:52:30	int-e	beaky: on random input?
2013-09-11 18:52:34	-->	jmcarthur_mobile (~jmcarthur@mf72d36d0.tmodns.net) has joined #haskell
2013-09-11 18:52:40	beaky	whent he list is reversed
2013-09-11 18:52:43	-->	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has joined #haskell
2013-09-11 18:52:49	beaky	(is that the worst case? :D)
2013-09-11 18:52:51	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-11 18:52:55	<--	akurei__ (~akurei@dslb-084-056-099-013.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-09-11 18:53:00	int-e	beaky: close enough, it will be quadratic.
2013-09-11 18:53:39	int-e	... yes, that is actually the worst possible, along with the sorted list.
2013-09-11 18:53:45	beaky	:D
2013-09-11 18:53:47	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-09-11 18:53:54	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-09-11 18:54:53	joe9	I have a function whose return type is Test. I want to change it to ReaderT Device Test. I get this error though: http://codepad.org/Uj8U7Gkd . Any suggestions on how to go about fixing it, please?
2013-09-11 18:55:04	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 264 seconds)
2013-09-11 18:55:13	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2013-09-11 18:56:06	<--	erochester (~erocheste@137.54.50.172) has quit (Quit: Leaving.)
2013-09-11 18:56:07	<--	b1collector (47a20440@gateway/web/freenode/ip.71.162.4.64) has quit (Quit: Page closed)
2013-09-11 18:56:12	-->	phienone (~ph@86.50.38.67) has joined #haskell
2013-09-11 18:56:55	<--	tibbe (~tibbe@207.198.105.19) has quit (Quit: tibbe)
2013-09-11 18:57:15	donri	joe9: either add a monad parameter or use Reader
2013-09-11 18:57:31	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-11 18:57:40	joe9	donri: oh, I could use Reader. got it. thanks.
2013-09-11 18:57:41	-->	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-09-11 18:58:14	-->	exicer (~exicer@host86-148-122-42.range86-148.btcentralplus.com) has joined #haskell
2013-09-11 18:58:35	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-11 18:58:35	<--	Caztiel (~me@unaffiliated/caztiel) has left #haskell
2013-09-11 18:58:59	<--	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has quit (Ping timeout: 260 seconds)
2013-09-11 18:59:18	<--	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has quit (Quit: croyd)
2013-09-11 18:59:26	-->	mittenchops (~mittencho@cpe-67-243-51-108.nyc.res.rr.com) has joined #haskell
2013-09-11 18:59:32	-->	erochester (~erocheste@137.54.50.172) has joined #haskell
2013-09-11 18:59:41	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-09-11 19:00:06	-->	danald (~danald@e179142147.adsl.alicedsl.de) has joined #haskell
2013-09-11 19:00:26	ion	I have trouble figuring out how to compose, say, fixed 1 with right 8 ' ' with holey-format.
2013-09-11 19:00:32	-->	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has joined #haskell
2013-09-11 19:01:48	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Quit: rishabhjain)
2013-09-11 19:02:04	-->	james-ubc (~james@dhcp-206-87-195-89.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-11 19:02:05	<--	jophish_ (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Ping timeout: 245 seconds)
2013-09-11 19:02:15	donri	ion: (.) ?
2013-09-11 19:02:32	-->	b0bbi10 (~me@g229160056.adsl.alicedsl.de) has joined #haskell
2013-09-11 19:02:47	ion	donri: right 8 ' ' . fixed 1 seems to behave like "%8s%.1f"
2013-09-11 19:02:52	<--	_d3f (~gnu@nl2.ovpn.to) has quit (Ping timeout: 256 seconds)
2013-09-11 19:03:19	<--	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has quit (Read error: Operation timed out)
2013-09-11 19:04:53	-->	_d3f (~gnu@79.172.193.111) has joined #haskell
2013-09-11 19:05:14	<--	emurillo510 (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-09-11 19:06:41	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-11 19:06:42	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 264 seconds)
2013-09-11 19:06:46	acomar	hmm... so I'm installing cabal 1.18 via the method suggested on the announce page. When my package manager updates to the latest version (or newer) and I want to use that over the locally installed version, is it just a matter of removing the package from the cabal bin and lib dirs or is there some other stuff that has to be cleaned up as well?
2013-09-11 19:07:09	acomar	(that is, I want to remove the package from cabal entirely)
2013-09-11 19:07:21	dcoutts	acomar: you'd need to rebuild anything that depended on it
2013-09-11 19:07:39	dcoutts	which would be obvious since ghc-pkg tells you when you're breaking things by removing dependencies
2013-09-11 19:07:43	donri	acomar: ghc-pkg unregister Cabal; rm ~/.cabal/bin/cabal
2013-09-11 19:07:44	dcoutts	and lists broken packages
2013-09-11 19:07:45	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-09-11 19:08:08	-->	thunderrd (~thunderrd@119.42.78.38) has joined #haskell
2013-09-11 19:08:42	<--	mee (~mee@li94-42.members.linode.com) has quit (Quit: WeeChat 0.3.8)
2013-09-11 19:08:57	acomar	thanks dcoutts, donri
2013-09-11 19:09:07	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-09-11 19:09:12	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 245 seconds)
2013-09-11 19:09:16	yitz	trivia question: what binds more tightly than function application in an expression?
2013-09-11 19:09:43	donri	yitz: record notation
2013-09-11 19:10:13	-->	madjestic (~madjestic@31.21.67.172) has joined #haskell
2013-09-11 19:10:14	yitz	donri: i had no doubt you knew the answer :)
2013-09-11 19:10:15	Peaker	yitz: record syntax
2013-09-11 19:10:24	dcoutts	bah, beaten to it
2013-09-11 19:10:29	yitz	Peaker you too :)
2013-09-11 19:11:01	dcoutts	f x { y = z }
2013-09-11 19:11:07	<--	litherum (~Adium@76.74.153.49) has quit (Quit: Leaving.)
2013-09-11 19:11:09	yitz	> let add3 = fmap (+3) . getFirst in add3 (First $ Just 10) { getFirst = Just 20 }
2013-09-11 19:11:10	lambdabot	  Just 23
2013-09-11 19:11:17	<--	kitallis (~kitallis@122.166.154.133) has quit (Ping timeout: 264 seconds)
2013-09-11 19:11:32	elliott	yitz: module qualification
2013-09-11 19:11:56	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-11 19:12:07	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-11 19:12:20	yitz	elliott: aha ok. but that's more connected with tokenization than with expression precedence
2013-09-11 19:13:11	-->	grazs (~g@89.221.241.91) has joined #haskell
2013-09-11 19:13:33	donri	> 5 * do 3 + 2
2013-09-11 19:13:35	lambdabot	  25
2013-09-11 19:13:38	Peaker	Lots of people like to add parenthesis in Haskell code for these "lesser known" rules, but I find it so arbitrary.. either you go maximally parens (Lisp), or minimal parens (hlint, yay)
2013-09-11 19:14:13	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-11 19:14:20	-->	ekipan (4cd4e1e9@gateway/web/freenode/ip.76.212.225.233) has joined #haskell
2013-09-11 19:14:27	<--	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has quit (Remote host closed the connection)
2013-09-11 19:14:34	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-11 19:14:50	<--	b0bbi10 (~me@g229160056.adsl.alicedsl.de) has quit (Remote host closed the connection)
2013-09-11 19:14:51	<--	gwern (~gwern@wikipedia/Gwern) has quit (Ping timeout: 260 seconds)
2013-09-11 19:15:05	<--	ekipan (4cd4e1e9@gateway/web/freenode/ip.76.212.225.233) has quit (Client Quit)
2013-09-11 19:15:07	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-11 19:15:44	sleepynate	I think you mean (L (i (s (p))))
2013-09-11 19:15:45	-->	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has joined #haskell
2013-09-11 19:15:47	-->	gwern (~gwern@pool-71-178-85-208.washdc.east.verizon.net) has joined #haskell
2013-09-11 19:15:47	<--	gwern (~gwern@pool-71-178-85-208.washdc.east.verizon.net) has quit (Changing host)
2013-09-11 19:15:47	-->	gwern (~gwern@wikipedia/Gwern) has joined #haskell
2013-09-11 19:15:49	<--	danilo2 (959cc887@gateway/web/freenode/ip.149.156.200.135) has quit (Ping timeout: 250 seconds)
2013-09-11 19:15:58	-->	ts33kr_ (~ts33kr@193.34.60.123) has joined #haskell
2013-09-11 19:16:14	donri	H $ a $ s $ k $ e $ l l
2013-09-11 19:16:45	-->	S_J (S_J@m83-180-209-15.cust.tele2.se) has joined #haskell
2013-09-11 19:16:48	-->	nasarde (~andreasg@OL203-132.fibertel.com.ar) has joined #haskell
2013-09-11 19:17:22	-->	ekipan (4cd4e1e9@gateway/web/freenode/ip.76.212.225.233) has joined #haskell
2013-09-11 19:17:24	<--	madjestic (~madjestic@31.21.67.172) has quit (Ping timeout: 240 seconds)
2013-09-11 19:18:14	<--	mno2 (~mno2@1.34.43.236) has quit (Quit: mno2)
2013-09-11 19:19:18	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Ping timeout: 264 seconds)
2013-09-11 19:19:19	--	ts33kr_ is now known as ts33kr
2013-09-11 19:19:36	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 245 seconds)
2013-09-11 19:19:44	-->	whaletechno (~whaletech@unaffiliated/whaletechno) has joined #haskell
2013-09-11 19:19:52	-->	trism (~jconti@unaffiliated/trism) has joined #haskell
2013-09-11 19:19:56	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-11 19:19:59	-->	csakatoku (~csakatoku@softbank126009008011.bbtec.net) has joined #haskell
2013-09-11 19:20:07	-->	madjestic (~madjestic@31.21.67.172) has joined #haskell
2013-09-11 19:20:15	<--	thealanwattsriot (~brianchen@75-146-23-33-Richmond.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-11 19:20:32	-->	Kuraitou (~kuraitou@unaffiliated/kuraitou) has joined #haskell
2013-09-11 19:20:40	aristid	donri: argh it must be l $ l to look regular *panics*
2013-09-11 19:21:13	sleepynate	donri: No instance for (t0 -> t0)
2013-09-11 19:21:16	donri	aristid: H . a . s . k . e . l $ l
2013-09-11 19:21:32	donri	sleepynate: good point
2013-09-11 19:21:44	-->	tibbe (tibbe@nat/google/x-zujhnkcqaehoyhgt) has joined #haskell
2013-09-11 19:21:45	artyomkazak	s
2013-09-11 19:22:03	aristid	donri: i'll let that pass because H . a . s . k . e . l $ l = H $ a $ s $ k $ e $ l $ l
2013-09-11 19:22:39	donri	sleepynate: actually what?
2013-09-11 19:22:42	-->	ihm1 (~izzy@cpe-66-65-160-29.nyc.res.rr.com) has joined #haskell
2013-09-11 19:23:14	-->	eis_ (~eis@109.197.218.46) has joined #haskell
2013-09-11 19:23:30	-->	Ralith (~ralith@66.114.129.162) has joined #haskell
2013-09-11 19:24:09	sleepynate	donri: passing a function to itself takes other arguments without an assignment should cause a No Instance error
2013-09-11 19:24:17	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-11 19:24:22	-->	pratz (~pratz@122.169.15.62) has joined #haskell
2013-09-11 19:24:28	donri	> id id
2013-09-11 19:24:29	lambdabot	  No instance for (Data.Typeable.Internal.Typeable a0)
2013-09-11 19:24:30	lambdabot	   arising from a use ...
2013-09-11 19:24:34	donri	:t id id
2013-09-11 19:24:35	lambdabot	a -> a
2013-09-11 19:24:45	donri	:t const const
2013-09-11 19:24:46	lambdabot	b -> a -> b1 -> a
2013-09-11 19:24:48	-->	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has joined #haskell
2013-09-11 19:25:06	<--	pratz (~pratz@122.169.15.62) has left #haskell
2013-09-11 19:25:11	donri	sleepynate: what do you mean
2013-09-11 19:25:50	sleepynate	if you call id id with saying like, let x = id id, you'll get No Instance
2013-09-11 19:25:59	-->	DaveS (~DaveS@unaffiliated/daves) has joined #haskell
2013-09-11 19:26:11	sleepynate	> let l = id
2013-09-11 19:26:13	lambdabot	  not an expression: `let l = id'
2013-09-11 19:26:16	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-11 19:26:17	Hafydd	> let x = id id in x 1
2013-09-11 19:26:19	lambdabot	  1
2013-09-11 19:26:36	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-09-11 19:26:47	YayMe`	:t const . const
2013-09-11 19:26:48	lambdabot	a -> b -> b1 -> a
2013-09-11 19:26:52	joe9	I am trying to change a function (checkMaintenance1 ) with return type Test to a function (checkMaintenance2 ) with return type Reader Device Test. http://codepad.org/vORWuB7I . Any thoughts on what I am missing please?
2013-09-11 19:26:57	-->	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has joined #haskell
2013-09-11 19:26:59	sleepynate	> let l = id in l l
2013-09-11 19:27:00	lambdabot	  No instance for (Data.Typeable.Internal.Typeable a0)
2013-09-11 19:27:00	lambdabot	   arising from a use ...
2013-09-11 19:27:02	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 248 seconds)
2013-09-11 19:27:02	sleepynate	see?
2013-09-11 19:27:12	donri	:t let l = id in l l
2013-09-11 19:27:13	lambdabot	a -> a
2013-09-11 19:27:21	<--	yacks (~py@103.6.159.103) has quit (Quit: Leaving)
2013-09-11 19:27:29	joe9	error message is : http://codepad.org/Cqvh62zD
2013-09-11 19:27:38	donri	problem is you're trying to Show a generic function
2013-09-11 19:27:39	Hafydd	> let l = id in l l 1
2013-09-11 19:27:40	YayMe`	> let l = const in const . const
2013-09-11 19:27:40	lambdabot	  1
2013-09-11 19:27:42	lambdabot	  No instance for (Data.Typeable.Internal.Typeable b1)
2013-09-11 19:27:42	lambdabot	   arising from a use ...
2013-09-11 19:27:46	donri	> id
2013-09-11 19:27:47	lambdabot	  No instance for (Data.Typeable.Internal.Typeable a0)
2013-09-11 19:27:47	lambdabot	   arising from a use ...
2013-09-11 19:27:52	donri	> id :: Int -> Int
2013-09-11 19:27:53	merijn	sleepynate: lambdabot can't print functions
2013-09-11 19:27:53	lambdabot	  <Int -> Int>
2013-09-11 19:27:59	donri	sure it can ;)
2013-09-11 19:28:03	merijn	sleepynate: At least not polymorphic ones
2013-09-11 19:28:08	donri	yeah
2013-09-11 19:28:09	-->	thealanwattsriot (~brianchen@216.30.179.54) has joined #haskell
2013-09-11 19:28:16	merijn	donri: I know, but that's an ugly hack no to be relied upon
2013-09-11 19:28:17	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-11 19:28:25	Hafydd	That error message is pretty misleading.
2013-09-11 19:28:32	-->	martijn_ (~martijn@ip51cf50f3.direct-adsl.nl) has joined #haskell
2013-09-11 19:28:44	donri	Hafydd: well it's cut off
2013-09-11 19:28:46	ekipan	joe9: checkmaintainance2 label = return (checkmaintenance1 label)
2013-09-11 19:28:51	donri	it'd probably say that a0 is ambiguous
2013-09-11 19:28:51	merijn	Hafydd: Yes, but I think that's mostly caused by the show instance for non-polymorphic functions
2013-09-11 19:29:03	donri	and it wants typeable because of special Show instances in lambdabot
2013-09-11 19:29:21	merijn	If you type "id" into ghci it will report there's not show instance for "a -> a"
2013-09-11 19:29:26	donri	> id `asAppliedTo` 5  -- does it work with defaulting though?
2013-09-11 19:29:32	lambdabot	  <Integer -> Integer>
2013-09-11 19:29:40	Hafydd	merijn: well, yes; that's my point.
2013-09-11 19:29:48	merijn	Hafydd: Blame elliott
2013-09-11 19:29:59	-->	aupiff (~aupiff@67-194-64-248.wireless.umnet.umich.edu) has joined #haskell
2013-09-11 19:30:48	joe9	ekipan: cool, thanks.
2013-09-11 19:30:54	donri	would be nice if lambdabot could display complete but shortened down type error messages
2013-09-11 19:31:06	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-09-11 19:32:00	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-09-11 19:32:07	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (Ping timeout: 245 seconds)
2013-09-11 19:32:19	-->	vijaykiran (~user@217.149.135.124) has joined #haskell
2013-09-11 19:32:33	<--	martijn_ (~martijn@ip51cf50f3.direct-adsl.nl) has quit (Client Quit)
2013-09-11 19:33:02	-->	martijn (~martijn@ip51cf50f3.direct-adsl.nl) has joined #haskell
2013-09-11 19:33:03	<--	artyomkazak (~artyomkaz@94.25.228.20) has quit (Ping timeout: 260 seconds)
2013-09-11 19:33:26	--	martijn is now known as Guest954
2013-09-11 19:33:51	--	Guest954 is now known as martijn__
2013-09-11 19:33:58	<--	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has quit (Ping timeout: 248 seconds)
2013-09-11 19:34:57	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 268 seconds)
2013-09-11 19:35:44	<--	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has quit (Ping timeout: 256 seconds)
2013-09-11 19:35:48	-->	artyomkazak (~artyomkaz@host-67-159-66-217.spbmts.ru) has joined #haskell
2013-09-11 19:35:51	-->	tuxie_ (~paranoid@g225065069.adsl.alicedsl.de) has joined #haskell
2013-09-11 19:36:17	<--	DaveS (~DaveS@unaffiliated/daves) has quit (Ping timeout: 245 seconds)
2013-09-11 19:36:18	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-11 19:37:15	<--	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has quit (Ping timeout: 276 seconds)
2013-09-11 19:37:26	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-11 19:38:08	-->	yacks (~py@103.6.159.103) has joined #haskell
2013-09-11 19:39:15	<--	shesek (~shesek@77.125.11.97) has quit (Read error: No route to host)
2013-09-11 19:39:33	--	gpampara_off is now known as gpampara
2013-09-11 19:39:53	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 19:40:06	<--	aupiff (~aupiff@67-194-64-248.wireless.umnet.umich.edu) has quit (Read error: Connection reset by peer)
2013-09-11 19:40:12	-->	aupiff (~aupiff@67-194-64-248.wireless.umnet.umich.edu) has joined #haskell
2013-09-11 19:41:06	-->	peterbb__ (~peterbb@1x-193-157-252-191.uio.no) has joined #haskell
2013-09-11 19:41:55	--	hdevalence|away is now known as hdevalence
2013-09-11 19:42:27	-->	wagle (~wagle@static-50-43-15-195.bvtn.or.frontiernet.net) has joined #haskell
2013-09-11 19:43:46	<--	mirsal (~mirsal@videolan/developer/Mirsal) has quit (Ping timeout: 245 seconds)
2013-09-11 19:44:12	<--	skchrko (~sk@109.110.83.124) has quit (Quit: Leaving)
2013-09-11 19:44:14	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-09-11 19:44:46	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-09-11 19:45:13	<--	martijn__ (~martijn@ip51cf50f3.direct-adsl.nl) has quit (Quit: martijn__)
2013-09-11 19:46:09	-->	tim (~quassel@91-119-119-221.dynamic.xdsl-line.inode.at) has joined #haskell
2013-09-11 19:47:35	-->	coltfred (~coltfred@ip-64-134-138-105.public.wayport.net) has joined #haskell
2013-09-11 19:48:29	-->	vireax (~xavier83@122.161.32.140) has joined #haskell
2013-09-11 19:49:02	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-11 19:50:34	<--	malkomalko (~malkomalk@66-234-38-99.nyc.cable.nyct.net) has quit (Remote host closed the connection)
2013-09-11 19:51:06	paolino	> do {Nothing >> Just 1}
2013-09-11 19:51:07	lambdabot	  Nothing
2013-09-11 19:51:08	-->	scampbell (~scampbell@mail.scampbell.net) has joined #haskell
2013-09-11 19:51:15	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2013-09-11 19:51:24	paolino	> do {Nothing >>=  Just 1}
2013-09-11 19:51:25	lambdabot	  Couldn't match expected type `a0 -> Data.Maybe.Maybe b0'
2013-09-11 19:51:25	lambdabot	             with ...
2013-09-11 19:51:44	paolino	> do {Nothing >>=  \_ -> Just 1}
2013-09-11 19:51:45	lambdabot	  Nothing
2013-09-11 19:51:51	donri	> Nothing >>= Just
2013-09-11 19:51:52	lambdabot	  Nothing
2013-09-11 19:51:54	-->	t4nk406 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-09-11 19:52:07	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 245 seconds)
2013-09-11 19:52:10	ekipan	Nothing >>= _ = Nothing -- from definition of (>>=)
2013-09-11 19:52:20	<--	petermw (~scpmw@cslin101.csunix.comp.leeds.ac.uk) has quit (Remote host closed the connection)
2013-09-11 19:52:25	-->	DaveS (~DaveS@unaffiliated/daves) has joined #haskell
2013-09-11 19:52:41	t4nk406	hello
2013-09-11 19:52:49	t4nk406	i am reading a http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/
2013-09-11 19:52:54	<--	madjestic (~madjestic@31.21.67.172) has quit (Ping timeout: 240 seconds)
2013-09-11 19:53:03	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-11 19:53:05	-->	satc (~smuxi@202.3.77.239) has joined #haskell
2013-09-11 19:53:26	t4nk406	but this one fails with exception Not in scope: type variable `a' : data Complex = Num a => Complex { real :: a, img :: a}
2013-09-11 19:53:50	paolino	data Complex a = ..
2013-09-11 19:53:52	<--	james-ubc (~james@dhcp-206-87-195-89.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 256 seconds)
2013-09-11 19:54:07	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-11 19:54:10	-->	Arkantos (~arkantos@77.245.65.162) has joined #haskell
2013-09-11 19:54:11	<--	phienone (~ph@86.50.38.67) has quit (Quit: Lost terminal)
2013-09-11 19:54:19	-->	shoret (~user@66.11.220.78) has joined #haskell
2013-09-11 19:54:22	ekipan	an error in the tut
2013-09-11 19:54:28	t4nk406	umm?
2013-09-11 19:54:41	satc	I have the following situation, data Foo = A | B | C | D | E.   type family isA (x :: Foo) :: Bool ; type instance isA A = True; Now how to declare isA to be false for rest of the types of kind Foo. I dont want to write each one of them saying they are False?
2013-09-11 19:54:45	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-11 19:54:50	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-11 19:54:58	ekipan	the tutorial text is erroneous, paolino gives the correction
2013-09-11 19:55:39	-->	luigy (~luigy@192.241.244.155) has joined #haskell
2013-09-11 19:55:39	paolino	satc True is not a type
2013-09-11 19:55:52	paolino	or you lifted it ..
2013-09-11 19:56:21	notdan	A also is not a type
2013-09-11 19:56:26	tromp	i cannot fathom any good reason for using isA
2013-09-11 19:56:28	merijn	satc: You can't in GHCs older than 7.7
2013-09-11 19:56:32	<--	paullik (~paullik@unaffiliated/paullik) has quit (Ping timeout: 268 seconds)
2013-09-11 19:56:45	t4nk406	 Data constructor `Complex' has existential type variables, a context, or a specialised result type        (Use -XExistentialQuantification or -XGADTs to allow this)
2013-09-11 19:56:48	merijn	paolino, notdan: Clearly he is using DataKinds
2013-09-11 19:56:53	t4nk406	should i do that?
2013-09-11 19:57:23	geekosaur	hm
2013-09-11 19:57:28	notdan	ok well then you need closed type families
2013-09-11 19:57:28	paolino	t4nk406, you have to add 'a' after Complex
2013-09-11 19:57:30	merijn	satc: Basically, GHC prior to 7.7 only supports open type families where that functions isn't possible. GHC >7.7 also supports closed type families, which *do* allow this
2013-09-11 19:57:34	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-11 19:57:42	geekosaur	paolino, it's whining about the Num a => constraint
2013-09-11 19:57:42	<--	cfricke (~cfricke@CPE00f1f3072bf9-CM001ceacce8e2.cpe.net.cable.rogers.com) has quit (Ping timeout: 264 seconds)
2013-09-11 19:57:51	satc	merijn: How ?
2013-09-11 19:58:11	geekosaur	which, yes, is deprecated these days because it doesn't do what most people hope
2013-09-11 19:58:18	joe9	program: http://codepad.org/fKeQaPhb, error: http://codepad.org/HPrnzL7W . Any suggestions on how to get it working please?
2013-09-11 19:58:22	paolino	oh sorry
2013-09-11 19:58:25	joe9	ekipan: any thoughts on this, please?
2013-09-11 19:58:26	merijn	satc: I don't know the syntax in 7.7, it got changed but googling for "ghc closed type families" should probably turn up a manual/explanation
2013-09-11 19:58:28	t4nk406	paolino: did that
2013-09-11 19:58:28	-->	pavonia (~user@p4FEEE69F.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 19:58:30	<--	edsko (~edsko@80.111.60.101) has quit (Quit: This computer has gone to sleep)
2013-09-11 19:58:45	-->	akurei__ (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has joined #haskell
2013-09-11 19:58:50	t4nk406	paolino: and now it asks me for some flags
2013-09-11 19:59:10	paolino	take away the constraint Num a =>
2013-09-11 19:59:12	ekipan	I'd personally delete the Num a => context
2013-09-11 19:59:24	-->	voxpopuli (~fanservic@CMU-840304.WV.CC.CMU.EDU) has joined #haskell
2013-09-11 19:59:26	paolino	*context
2013-09-11 19:59:37	ekipan	same diff
2013-09-11 19:59:46	<--	_oio_ (~kenneth@186.83.255.243) has quit (Quit: Konversation terminated!)
2013-09-11 19:59:48	t4nk406	helped, thanks =)
2013-09-11 19:59:48	-->	DT`` (~ea@host158-158-dynamic.37-79-r.retail.telecomitalia.it) has joined #haskell
2013-09-11 19:59:55	paolino	and add it to the functions later
2013-09-11 20:00:06	<--	travisstaton (~tstaton@70.127.254.161) has quit (Ping timeout: 264 seconds)
2013-09-11 20:00:38	paolino	function having args Complex a will need it
2013-09-11 20:00:48	-->	Lethalman_ (~lethal@ppp-3-31.28-151.libero.it) has joined #haskell
2013-09-11 20:00:54	-->	phienone (~ph@nappo.lnet.fi) has joined #haskell
2013-09-11 20:00:59	t4nk406	y, thanks
2013-09-11 20:01:10	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 248 seconds)
2013-09-11 20:01:42	<--	DT` (~ea@95.233.203.148) has quit (Ping timeout: 248 seconds)
2013-09-11 20:01:43	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Quit: Computer has gone to sleep.)
2013-09-11 20:02:22	--	hdevalence is now known as hdevalence|away
2013-09-11 20:02:33	-->	ksf (~ksf@d030151.adsl.hansenet.de) has joined #haskell
2013-09-11 20:02:45	-->	babu` (~user@122.167.204.69) has joined #haskell
2013-09-11 20:03:15	<--	DaveS (~DaveS@unaffiliated/daves) has quit (Ping timeout: 264 seconds)
2013-09-11 20:03:28	-->	edvo (~edvo@tmo-096-204.customers.d1-online.com) has joined #haskell
2013-09-11 20:03:51	<--	mak` (~mak@lokalhost.pl) has quit (Ping timeout: 264 seconds)
2013-09-11 20:04:04	<--	Soft (~soft@unaffiliated/soft) has quit (Ping timeout: 264 seconds)
2013-09-11 20:05:12	-->	normanrichards (~normanric@mobile-166-147-065-085.mycingular.net) has joined #haskell
2013-09-11 20:05:12	<--	akurei__ (~akurei@dslb-084-056-121-029.pools.arcor-ip.net) has quit (Ping timeout: 256 seconds)
2013-09-11 20:05:13	<--	tuxie_ (~paranoid@g225065069.adsl.alicedsl.de) has quit (Ping timeout: 256 seconds)
2013-09-11 20:05:13	<--	t4nk406 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-09-11 20:05:23	-->	phischu (~pschuster@p4FD315FA.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 20:05:39	satc	merijn: What ghc version is syntax type family Foo a where Foo Int = Bool ... supported?
2013-09-11 20:06:21	satc	merijn: I can see the syntax in haskell wiki but trying that says parse error.
2013-09-11 20:06:42	<--	ananthakumaran (~Adium@117.192.139.66) has quit (Ping timeout: 245 seconds)
2013-09-11 20:06:44	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-11 20:07:01	joe9	i cannot figure out what I am doing wrong here: http://codepad.org/fnMqOfH6 . it says that Reader does not exist.  Not in scope: data constructor `Reader'
2013-09-11 20:07:02	joe9	a
2013-09-11 20:07:03	geekosaur	6.12.1 looks like'
2013-09-11 20:07:10	mr-	satc: you'll have to enable it
2013-09-11 20:07:24	joe9	and I imported control.monad.reader
2013-09-11 20:07:29	geekosaur	erm
2013-09-11 20:08:23	notdan	satc: GHC 7.7 aka GHC HEAD
2013-09-11 20:08:25	satc	mr-: I am already using TypeFamilies extension. How else do I enable it?
2013-09-11 20:08:40	notdan	you'll have to either compile it yourself or get a nightly build maybe
2013-09-11 20:08:53	merijn	satc: That syntax only works in 7.7, if your compiler is older it doesn't support it yet
2013-09-11 20:08:56	Thulsadum	mh, i'm quite new and i wonder what would be the way to append an item received via IO to an existing list?
2013-09-11 20:09:04	satc	merijn: Thanks
2013-09-11 20:09:34	merijn	Thulsadum: Appending to lists is almost universally a bad idea, it's an operation that takes O(n)
2013-09-11 20:09:44	joe9	Thulsadum: item <- io_action; let list1 = list ++ [item]
2013-09-11 20:09:49	merijn	Thulsadum: Perhaps you want a queue or other FIFO stucture?
2013-09-11 20:11:39	Thulsadum	merijn: prepending would work as well ;) the problem is to alter that data
2013-09-11 20:11:50	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-09-11 20:12:10	-->	ianclarksmith (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-11 20:12:10	--	ianclarksmith is now known as ics
2013-09-11 20:12:41	merijn	Thulsadum: You can't, the list is immutable. You can create a new list by simply appending the item to the old one, though
2013-09-11 20:12:41	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Remote host closed the connection)
2013-09-11 20:12:57	Thulsadum	assume i have a global collect (list, fifo, queue, w/e) with phonebook entries, initialy read from a file. now i would like to add an item during runtime by user input and want du add it there
2013-09-11 20:13:18	joe9	Thulsadum: State monad?
2013-09-11 20:13:33	merijn	Thulsadum: I'd keep the list in an IORef/MVar and put the new one in and/or the State monad, depending on the application
2013-09-11 20:13:37	Thulsadum	yep, that's my problem, i can't :D but i can't figure out how to do it the haskell way
2013-09-11 20:14:01	Thulsadum	ok, so i'll have a look at the state monad
2013-09-11 20:14:06	Thulsadum	thanks for the input
2013-09-11 20:14:36	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-11 20:14:47	-->	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has joined #haskell
2013-09-11 20:14:53	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-11 20:15:07	merijn	Thulsadum: Will you have multiple threads accessing this list of entries in parallel?
2013-09-11 20:15:17	merijn	Thulsadum: If so, you might want to take the MVar approach
2013-09-11 20:15:53	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-11 20:15:55	Thulsadum	multi threading is in far feature atm.
2013-09-11 20:16:09	-->	HugoDaniel (~Thunderbi@elab.fcsh.unl.pt) has joined #haskell
2013-09-11 20:16:23	joe9	can anyone please help with this reader monad usage: http://codepad.org/i3W1CSZr is the program, error message: http://codepad.org/nUL7jWxb . I tried ask >>= , but could not get it to compile. Any thoughts, please?
2013-09-11 20:16:32	Thulsadum	it's as mentioned a simple phonebook for educational prupose :D
2013-09-11 20:16:48	Thulsadum	nothing huge, big. just to get used with haskell
2013-09-11 20:16:49	merijn	Thulsadum: You might be pleasantly surprised how much easier multithreading is in Haskell compared to other languages :)
2013-09-11 20:16:54	--	GaelanAintAround is now known as Gaelan
2013-09-11 20:16:56	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-09-11 20:17:05	<--	ksf (~ksf@d030151.adsl.hansenet.de) has quit (Remote host closed the connection)
2013-09-11 20:17:30	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Ping timeout: 264 seconds)
2013-09-11 20:17:48	Thulsadum	merijn: I'll if the time is right. for now i'm quite surprise how everything is described in a quite elegant way
2013-09-11 20:18:46	<--	erochester (~erocheste@137.54.50.172) has quit (Read error: Connection reset by peer)
2013-09-11 20:18:47	-->	erochester1 (~erocheste@137.54.50.172) has joined #haskell
2013-09-11 20:19:27	-->	carlosgaldino (~carlosgal@187.121.89.73) has joined #haskell
2013-09-11 20:19:58	<--	shft (~shft@94.41.72.34.dynamic.ufanet.ru) has quit (Ping timeout: 268 seconds)
2013-09-11 20:20:17	-->	kitallis (~kitallis@122.167.245.16) has joined #haskell
2013-09-11 20:20:42	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-11 20:20:51	-->	josephle (~joseph_h_@128.237.173.255) has joined #haskell
2013-09-11 20:21:04	mauke	joe9: why are you mixing -X and LANGUAGE?
2013-09-11 20:21:38	<--	jesyspa (~jesyspa@ip4da1331c.direct-adsl.nl) has quit (Quit: leaving)
2013-09-11 20:21:55	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-11 20:22:11	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-09-11 20:22:42	mauke	joe9: what's the type of TestCase?
2013-09-11 20:23:20	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-09-11 20:23:47	 *	hackagebot printf-mauke 0.5.2 - A Perl printf like formatter.  http://hackage.haskell.org/package/printf-mauke-0.5.2 (LukasMai)
2013-09-11 20:23:58	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-11 20:24:00	-->	akurei (~akurei@dslb-084-056-109-154.pools.arcor-ip.net) has joined #haskell
2013-09-11 20:24:06	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-11 20:24:07	<--	LAMMJohnson (~ja@user-5af43312.broadband.tesco.net) has quit (Remote host closed the connection)
2013-09-11 20:24:13	-->	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has joined #haskell
2013-09-11 20:24:32	mauke	ion: can you try again?
2013-09-11 20:24:44	satc	Where are the ghc nightly builds available? All I could find is the git source.
2013-09-11 20:24:51	<--	babu` (~user@122.167.204.69) has quit (Ping timeout: 264 seconds)
2013-09-11 20:25:32	-->	mirsal (~mirsal@2001:470:69e8:1::1) has joined #haskell
2013-09-11 20:26:09	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-11 20:26:27	--	erochester1 is now known as erochester
2013-09-11 20:26:31	<--	dyreshark (~dyreshark@198.199.76.106) has quit (Quit: I just dont know what went wrong!)
2013-09-11 20:26:37	-->	travisstaton (~tstaton@70.127.254.161) has joined #haskell
2013-09-11 20:26:45	joelteon	I don't think anybody provides GHC nightly builds at the moment
2013-09-11 20:27:00	-->	OlegYch0 (~OlegYch@213.184.238.131) has joined #haskell
2013-09-11 20:27:02	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-11 20:27:33	-->	dyreshark (~dyreshark@198.199.76.106) has joined #haskell
2013-09-11 20:28:32	<--	mirsal (~mirsal@2001:470:69e8:1::1) has quit (Changing host)
2013-09-11 20:28:32	-->	mirsal (~mirsal@videolan/developer/Mirsal) has joined #haskell
2013-09-11 20:28:46	<--	OlegYch (~OlegYch@213.184.238.131) has quit (Ping timeout: 245 seconds)
2013-09-11 20:28:51	-->	skchrko (~sk@130.255.129.64) has joined #haskell
2013-09-11 20:28:52	Athas	Is there a way to speed up ghci loading up files, by doing preprocessing or something?
2013-09-11 20:28:54	<--	akurei (~akurei@dslb-084-056-109-154.pools.arcor-ip.net) has quit (Ping timeout: 264 seconds)
2013-09-11 20:29:11	mauke	yeah, compile them
2013-09-11 20:29:12	Athas	One of my modules depends on a happy-generated parser, and it takes a very long time to load, despite not changing.
2013-09-11 20:29:26	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-11 20:29:30	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 264 seconds)
2013-09-11 20:29:59	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-11 20:30:02	Athas	mauke: how do I do that?
2013-09-11 20:30:07	mauke	with ghc
2013-09-11 20:30:10	merijn	Athas: By calling ghc? ;)
2013-09-11 20:30:23	<--	sxn (~sxn@mnch-5d874554.pool.mediaWays.net) has quit (Quit: Leaving)
2013-09-11 20:30:47	Athas	Well, this is a Cabal project, so I suppose there are .o files lying around somewhere in the dist directory.  Should I just add them to the include path?
2013-09-11 20:30:52	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-11 20:31:08	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Read error: Connection reset by peer)
2013-09-11 20:31:26	dcoutts	Athas: use :set -fobject-code
2013-09-11 20:31:30	dcoutts	in ghci
2013-09-11 20:31:32	joelteon	i might set up some nightly builds eventually satc
2013-09-11 20:31:35	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-11 20:31:36	joelteon	but for now you might try using hsvm
2013-09-11 20:31:38	joelteon	/plug
2013-09-11 20:31:40	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-11 20:31:54	joe9	mauke, regarding -X and LANGUAGE, should I not do that?
2013-09-11 20:31:55	-->	sxn (~sxn@mnch-5d874554.pool.mediaways.net) has joined #haskell
2013-09-11 20:32:01	joe9	regarding type of TestCase: TestCase :: Assertion -> Test
2013-09-11 20:32:01	merijn	I believe johnw has nightly builds somewhere
2013-09-11 20:32:04	Athas	dcoutts: wow, thanks, that did the trick.  I'll read up on that flag.
2013-09-11 20:32:13	-->	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-11 20:32:14	-->	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has joined #haskell
2013-09-11 20:32:15	johnw	merijn: http://ghc.newartisans.com
2013-09-11 20:32:17	mauke	joe9: I'm just wondering why
2013-09-11 20:32:36	merijn	joelteon: There you go ;)
2013-09-11 20:32:39	<--	travisstaton (~tstaton@70.127.254.161) has quit (Ping timeout: 264 seconds)
2013-09-11 20:32:44	mauke	joe9: also, why not {-# OPTIONS_GHC -XUnicodeSyntax #-} {-# LANGUAGE DoAndIfThenElse #-} ?
2013-09-11 20:33:03	merijn	satc: Yeah, haskell.org is no longer hosting nightly builds, but see johnw's URL
2013-09-11 20:33:05	mauke	joe9: what's Assertion?
2013-09-11 20:33:36	-->	akurei (~akurei@dslb-084-056-109-154.pools.arcor-ip.net) has joined #haskell
2013-09-11 20:33:38	joe9	IO ()
2013-09-11 20:34:05	mauke	joe9: IO doesn't provide ask
2013-09-11 20:34:49	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-11 20:35:32	joe9	mauke, makes sense. Thanks. How do I change a Test to a Reader Device Test?
2013-09-11 20:35:43	<--	ts33kr (~ts33kr@193.34.60.123) has quit (Quit: Computer has gone to sleep.)
2013-09-11 20:35:44	joe9	without using just return.
2013-09-11 20:35:55	mauke	hwat
2013-09-11 20:35:56	<--	Palmik (~palmik@120-49-80-78.tmcz.cz) has quit (Quit: Lost terminal)
2013-09-11 20:36:02	joe9	I want the Test function to read the device from the env and then use it.
2013-09-11 20:36:07	mauke	what env?
2013-09-11 20:37:44	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-11 20:37:53	joe9	mauke: I have this function checkMaintenance:  http://codepad.org/ZzNgf9rc and I want to change the return type of it from Test to Reader Device Test.
2013-09-11 20:38:40	joe9	so, I do not call the "(Just device) <- getMyDevice " in that  function, but, the caller function sends it as a parameter.
2013-09-11 20:38:45	<--	akurei (~akurei@dslb-084-056-109-154.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-09-11 20:38:52	joe9	mauke, does that make sense?
2013-09-11 20:39:00	mauke	... = do device <- ask; TestLabel (...) . TestCase $ do ...
2013-09-11 20:39:39	joe9	mauke: http://codepad.org/Z1CcCGUJ
2013-09-11 20:40:02	-->	psii (~psii@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-11 20:40:03	joe9	mauke, I tried that but could not get it to work: http://codepad.org/4xg2f5Tq
2013-09-11 20:40:07	mauke	getting closer
2013-09-11 20:40:29	<--	nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-09-11 20:40:29	-->	quchen (~quchen@p54AA4DA8.dip0.t-ipconnect.de) has joined #haskell
2013-09-11 20:40:30	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-11 20:40:31	mauke	you need a return
2013-09-11 20:40:49	-->	akurei_ (~akurei@dslb-084-056-109-154.pools.arcor-ip.net) has joined #haskell
2013-09-11 20:40:59	mauke	TestLabel returns Test, not Reader Device Test
2013-09-11 20:41:06	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-09-11 20:41:07	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-11 20:41:16	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-09-11 20:42:06	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Quit: Computer has gone to sleep.)
2013-09-11 20:42:15	<--	dthibodeau (~david@modemcable008.143-201-24.mc.videotron.ca) has quit (Ping timeout: 276 seconds)
2013-09-11 20:42:16	<--	fergusnoble (fergusnobl@repl.esden.net) has quit (Ping timeout: 260 seconds)
2013-09-11 20:43:04	joe9	mauke: that helped. thanks a lot.
2013-09-11 20:43:27	-->	fergusnoble (fergusnobl@repl.esden.net) has joined #haskell
2013-09-11 20:43:48	 *	hackagebot hdbi 1.1.1 - Haskell Database Independent interface  http://hackage.haskell.org/package/hdbi-1.1.1 (AlekseyUymanov)
2013-09-11 20:44:48	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-11 20:44:51	-->	LAMMJohnson (~ja@user-5af43312.broadband.tesco.net) has joined #haskell
2013-09-11 20:45:22	<--	brett (~brett@rdnzl.net) has left #haskell
2013-09-11 20:45:43	-->	boegel (~boegel@boegel.ugent.be) has joined #haskell
2013-09-11 20:46:17	-->	derek_c (~derekchia@nat-128-84-124-0-746.cit.cornell.edu) has joined #haskell
2013-09-11 20:46:27	--	irc: disconnected from server
2013-09-13 19:46:43	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-09-13 19:46:43	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-09-13 19:46:43	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-09-13 19:46:44	--	Nicks #haskell: [@ChanServ \q ]OLI[ _1126 __main__ _br_ _d3f _flow_ _janne _nova `0660 `bps a11235 ab9rf absence acabrera acfoltzer acharles acomar Adeon adimit Adios adlan adnap aess afarmer aford aforemny aggregatebot agumonkey agundry ahf ahihi akahn akegalj akiress akraut alanz albel727 aleator alej alexander__b AleXoundOS alexsdutton Alice3 allsystemsarego aloiscochard|off alpounet alvdav Amadiro amatsu amgarching anachrome anachron AnalogFile ananthakumaran andares_ anders^^ andrewsw anhall aninhumer Ankhers AntiSpamMeta aoh apaku apples Apsod araujo arbn arbn2 arianvp aristid Arkantos arkeet arkx arm32 arnsholt arpunk artyomkazak arun asante asjo aszlig Athas averell axiom b0c1 b2coutts b52 b__ b_jonas bananagram banjiewen banseljaj barrucadu bartavelle Baughn bbee bbloom bcoppens bd_ bduc BeardedCoder Belgarion0 benj_ benmachine bens bentrevor bergey bergmark betawaffle bezik bgamari bgilbert bgyss Bigcheese BigEndian bind biscarch bitraten bjorkintosh blackyy blast_hardcheese BlastHardcheese Blkt blz37 BMeph bobry bobthenameless boegel|work bogdanp bogner bogner_ bondar Boney_ boothead Boreeas bos bqp brainproxy Brando753 brandonw BrianHV brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild_ bxc byorgey ByronJohnson bytbox c_14 c_wraith cads2 cajla_ Cale caligula callen canissimia canta carlosgaldino carter CatMtKing Caztiel ccasin ccxCZ cdidd cdk Cerise Ceryn cfricke charlesofarrell_ chatsiri_ chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrisdotcode_ chrra chuzz ciaranm cic CindyLinz cinimod cjay cl_away ClaudiusMaximus clemux Clint Clinteger clog cmsd2 CODEtaku cods colah coltfred companion_cube conal confound copton CosmicRay Cromulent cronject cross crs__ cruxeternus Cryovat cschneid cynick cyphase d-snp d3lxa d_arcy dabradley dacc dan64 DanC__ danharaj danilo2_ danr danvet dario^CIP DarkFox Dashkal davean David davidsd davorak davorb-cellphone dcoutts de-Vri-es deavid Deewiant def-lkb deggis demolithion Der_Dackel destiny DexterLB dfan dgpratt dgvncsz0f diadara_ DigitalKiwi dilinger Discoloda dissipate_ dissipate__ divarvel dixie djahandarie dju dlundy Dodek dogmaT dolio DolphR donri Doom99 doomlord doomlord__ doshitan dpwright dqd Draconx|Laptop Draggor DrCode drdo dreixel drewr DRiKE drmegahertz dropdrive DrSyzygy dsantiago dsirenko_ dsp_ DT`` Dtgr duairc dubsg dustin10 dustinswan DustyDingo dwcook dwierenga Dybber dyreshark dysinger eacameron Eagle_Erwin eci ecr ecube edk Edoxile edwardk edwtjo eevar effy ehamberg ehd eike_c ejls eL_Bart0 electrogeek elgot Eliel Elision elliott emurillo510 endojelly Enigmagic ent enthropy Entroacceptor epsilonhalbe epsylon epta ericmj ericmoritz Eridius eriksensei ernst erochester Erstarrung es917 etabot ethercrow etrepum EvilPenguin Excedrin Excurio exicer exobit eyck Ezku f8l fabjan FalconKirtaran2 fall_ farn fayden felipe_ fergusnoble fikusz fimad finnrobi FireFly fizbin fizruk fl00r flazz floatingman flori_ flux fmapE foxnorth fran FreakyPenguin FreeFull fridim_ frontend1oader froztbyte fryguybob fser ft Fubar^ Fuuzetsu FUZxxl fxr fxrh fylwind gabriel__ GaelanAintAround gbarboza gbeshers gdh1c gds gdsx geal geekosaur gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes grazs gridaphobe gseitz gthorslund guampa Guest2098 Guest35050 Guest44995 Guest96413 Gunni guymann H1FuelCell haasn hackagebot Hafydd hamid hamishmack hape01 Hardolaf hashcat hc hdevalence heath Heffalump heikkih helgikrs hellome hiptobecubic hiratara hiredman hive-mind hiyakashi Hodapp horlicks hpaste hpc hpd hrefchef hvr ibid IbnFirnas Iceland_jack ics icz identity idnar ido idoru iemejia Igloo ijp Ikarus inarru inr int-e integral Internet13 io2 ion ipuustin ircbrowse iron_houzi isomorphic isomorphismes iswilson iulian ivan\ ivan` Jaak jackhill jackieh jaimef james-ubc jamestastic jamwt1 jang janiczek janinge JaRoel|4d jaspervdj javawizard javax Jaxan jayne jb55 jbauman jchild jdoliner Jeanne-Kamikaze jeetu jeff_s1 Jello_Raptor jfhall jfischoff jhh jhormuz jibi jimleroyer jix jlamothe jlewis jliikka jlouis jmcarthur jmcarthur_mobile jmct jml joachifm jobstijl0 JobV jodaro joe9 joefiorini joelteon joeyh johnny934759 johnw joneshf-laptop joneshf-work Jonno_FTW jonsterling joogi JPohlmann jrd0 jrib jroesch jrslepak jssanders JuanDaugherty julmac junsuijin juuhaa jvaneenwyk jyyou jzelinskie jzl k0001_ k00mi k0ral k4nar Kabaka Kaini kakos KaneTW kaol katis kav kaw Ke kekimmo Kelet kerrick Kevin__ kevinqcs kfreds Khady Khisanth killy9999 kini Kinnison Kiryx kitallis KitB kizzx2 kloeri kloplop321 kludge` klugez kmels Kneiva knyppeldynan knz koala_man kobain Kobata kosmikus kqr Krakarn krakrjak kranius kronixx Kruppe kryft kshannon_ kstuart ktosiek Kuraitou kushal kxra kylcarte KyleCloud laar lahwran lambdabot lambdanaut LAMMJohnson Laney latro`a_ lattenwald Lefeni leifw lemao Lemmih lenstr leroux levi Licenser lieven_ lifelong88 lightquake linduxed liori Liskni_si lispy liszt liyang lokydor lopex lpsmith luigy luite lulf lunarjar lurkorg M-ou-se m0g m3ga machisuji machisuji_ MacMagnus macron Maerten magicman Maior mak` maksbotan malorie_ mami mantovani maoe mapour marienz martinalex martingale Martty MasseR matheus23 Matrixiumn matson matthavener mattp_ mauke mavam Maxdamantus maxter Mayzie` mbrock mceier McManiaC mechairoi mel- melter mena mendez mephx MercurialAlchemi meretrix mero message144 MetaCosm mgaare_ mgsloan miasma michael__ mietek mike2 mikecaruso mikeplus64 milessabin_ milli mimi_vx mimico__ MindlessDrone mirsal MitchW mixi mizu_no_oto mjo mjrosenb MK_FG mkiefel mkrull mlen mlh mlinksva mm_freak_ mmaruseacph2 mmathis MoALTz mobileblue mokus mollerstrand monochrom mononofu Morgawr mornfall morolin mortberg MouseTheLuckyDog Mowah mp mr- mrd MrFahrenheit mrpantoufle MrRacoon mrshoe mrsolo mshroyer mstksg munro mviljamaa mvj4_ mxf myme n-dolio n00dle Nahra nanothief_ Natch natte ndngvr NeatBasis necroyeti neektza1 neptunepink Neqoxec neto neurocyte newsham Nickeeh nicoo Nik05 nik_89 niklasb niko nikola nilg Nimatek ninegrid ninzine niteria nitin2 nkpart nlogax noam noddy2OOO Noldorin nooodl nopcode noplamodo normanrichards notdan noteventime Nshag nullcone nwf nxorg8 nycs obcode Obfuscate ocharles Odd_Bloke ofan og oldmanst1n oleo onur opqdonut OrangeDu1k ormaaj Ornedan orospakr ortmage osa1 osfameron osnr othiym23 otterdam otto_s otulp ousado ozataman Pad^ paddymahoney Palmik palmje paolino Paprikachu ParahSai1in ParahSail1n ParahSailin parcs_ paz peddie peltchu_ perlite perspectival petanqk petantik pfoetchen phar pharaun phienone Philippa Philonous phischu Phlogistique PHO_ phryk pi8027 pierreghz pikhq pjstadig Plex- plhk pmade pnielsen poindontcare Polarina pootler popx poucet pqmodn pr predator217 preflex profmakx prophile Proteumus prototrout ps-auxw ptek Ptival Puffton Pullphinger puzza007 pyrtsa pyykkis_ q66 Quadrescence quicksilver qwandor qz raft raichoo raid Ralith Rarrikins rasmusto Raynes Raynos Razz redjohn refold ReinH Reisen Reite relrod Rembane resnik RevJohnnyHealey rfw rgr rgrinberg rhodesd RichyB Riussi rmunroe rmyers rndm robbert robinbb rofer rpenguin rs0 Rutger` ryanakca ryant5000 s00pcan S11001001 s4msung s4muel s_quark sababa SaBer saep saiam saiam^ Saizan sajith saki_mob saml samrat satc satshaba1 satshabad saurik sbahra schlumpi_ schoppenhauer schroedinbug sclv sclv_ scolobb scottschecter scshunt Sculptor sdb_ seantallen SegFaultAX seggy sellout- sepp2k serban seschwar setmeaway sgso shachaf shanse shelf shennyg shepheb shergill Shin-LaC shiona shmup SHODAN Shou shreesh si14 simon Siod sipa SirChurchill sirspazzolot Sizur sjindel ski skunkwerks skyflash skypers sleepynate SLi slobo sm smarter smith_ smlgs so Soft sohum solancile solarus solirc sondove sordina Sorella SoupEvil sp3ctum Spaceghost spaceships Spion_ Spockz squimmy srh_ srhb ssbr ssttudder staafl Starfire stass statusfailed stelleg stepcut stiell stomp strax strmpnk stvc suiside sunfun Sunhay sunnavy SuperNoeMan supersym supki Svedrin sweeney swistak35 Swizec sxn t7 tahu talzeus_ talzeus__ tamiko Tarential Targen taruti tauli tauntaun tavelram td123 tdammers TDJACR Tehnix tehroflmaoer Tekerson Tene tensorpudding tero- Tesseraction tessier tew88- tg Th0mas The_third_man theDon theorbtwo TheRealPygo TheSpectre thetallguy thetallguy1 thirsteh thorkilnaur thorsten` thoughtpolice Thra11 threedaymonk threestrikes Thulsadum tibbe tiffany Tinned_Tuna tinyghost tippenein tjohnson tko tobyp toddaaro tomaw tomboy64 tomejaguar tomh- tommd tomprince torkjak_ totte tov tpsinnem travisstaton Tribal tridactyla trism tristero tromp troydm tsou tudalex tulcod tunixman twanvl Twey twn tych0 u_ udevd udoprog ulfdoz Ulrar uniquenick upgrayeddd user123abc uu1101 uvelichitel valdyn Valodim vehk Veltas Vendethiel Vertue vijaykiran viktech_ vili vimes vivekrai vmeson vnz vobi Vorpal voxpopuli Vq vsayer vvv wagle wak walter Walther warp warpy Watcher7 waterlaz watermind weie_ wereHamster whaletechno wilfredh willb1 Willis Will| wole wolfnn wollw wonderga wormphlegm WraithM wting wto wunki Wuzzy xaimus xenocons xenophon xexonixxexillion xinming XMunkki_ xnyhps Xorlev xorox90 xplat xrq xye xymox Y_Less yacks yam yan_ Yaniel yano Yawgmoth YayMe Ycros yeltzooo6 yogurt_truck yriw ystael ysuzuki zacts zaiste Zamarok_ zammy zaphar_ps Zariel zebr zenoli zenzike zero7 zerokarmaleft zeroXten zhulikas ziman zoktar zomg zorzar zrot zw01 zxq9]
2013-09-13 19:46:44	--	Channel #haskell: 1182 nicks (1 op, 0 halfops, 0 voices, 1181 normals)
2013-09-13 19:46:44	--	URL for #haskell: http://www.haskell.org/
2013-09-13 19:46:45	--	Mode #haskell [+CLcnpt]
2013-09-13 19:46:45	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-09-13 19:47:45	-->	MrWoohoo (~MrWoohoo@pool-173-67-109-81.lsanca.fios.verizon.net) has joined #haskell
2013-09-13 19:48:54	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-13 19:50:01	-->	anRch (~markmilli@23.30.182.241) has joined #haskell
2013-09-13 19:50:31	-->	CaptainK (~CaptainK@181.179.105.78) has joined #haskell
2013-09-13 19:50:35	-->	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has joined #haskell
2013-09-13 19:50:38	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-13 19:51:09	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 19:51:42	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 264 seconds)
2013-09-13 19:52:06	haasn	Ikarus: note that this is a natural consequence of nonstrictness and the way ‘any’ etc. are defined
2013-09-13 19:52:14	<--	noteventime (~user@130.243.214.213) has quit (Ping timeout: 240 seconds)
2013-09-13 19:52:19	-->	ellipsis (~ellipsis@c-76-105-146-89.hsd1.or.comcast.net) has joined #haskell
2013-09-13 19:52:21	Ikarus	haasn: I was just verifying my mind
2013-09-13 19:52:39	haasn	Ikarus: any f xs = foldr (||) False (map f xs) -- and True || _ = True; hence the rest of the fold never needs to be inspected in this case
2013-09-13 19:52:40	<--	hpc (~juzz@ip98-169-42-110.dc.dc.cox.net) has quit (Ping timeout: 268 seconds)
2013-09-13 19:52:41	haasn	ah, okay
2013-09-13 19:53:00	-->	litherum (~Adium@2620:149:4:1b01:9d5:ed73:b40c:406f) has joined #haskell
2013-09-13 19:53:11	ericmoritz	I'm trying to create a parsec parser to choose either http:// or https:// but it doesn't seem to work
2013-09-13 19:53:14	ericmoritz	parse (choice [string "http://", string "https://"]) "-" "https://"
2013-09-13 19:53:31	-->	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 19:53:33	-->	agumonkey (~agu@147.158.70.86.rev.sfr.net) has joined #haskell
2013-09-13 19:53:52	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp133.bu.edu) has quit (Quit: leaving)
2013-09-13 19:54:06	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-13 19:54:08	-->	napping (~brandon@qchost236-138.cs.illinois.edu) has joined #haskell
2013-09-13 19:54:36	napping	is there an instance like (Monoid v, Ord k) => Monoid (NewtypeOfMap k v) anywhere}
2013-09-13 19:54:57	joelteon	damn
2013-09-13 19:55:05	ericmoritz	I tried <|> as well with the same result
2013-09-13 19:55:08	joelteon	attoparsec and parsec have very different behavior, but only parsec supports state
2013-09-13 19:55:22	<--	Shin-LaC (~LaC@108-243-41-60.lightspeed.cicril.sbcglobal.net) has quit (Quit: Computer has gone to sleep.)
2013-09-13 19:55:32	joe9	Clint: is there a way I could create my own monad of the MonadReader typeclass that can  use a reader monad for both Assertions and Tests?
2013-09-13 19:55:46	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-13 19:55:48	-->	ghorn__ (~ghorn@94-225-161-158.access.telenet.be) has joined #haskell
2013-09-13 19:55:49	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-09-13 19:56:33	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 256 seconds)
2013-09-13 19:56:39	<--	Thra11 (~Thra11@87.113.58.201) has quit (Ping timeout: 260 seconds)
2013-09-13 19:56:45	<--	shergill (~user@gateway/tor-sasl/shergill) has quit (Remote host closed the connection)
2013-09-13 19:56:56	Clint	joe9: yes, but again, you're going to have to lift everything if you do that
2013-09-13 19:57:04	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-13 19:57:11	<--	alvdav (~quassel@I63-5O.static.anw.at) has quit (Remote host closed the connection)
2013-09-13 19:57:50	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-09-13 19:58:01	k0001_	pp
2013-09-13 19:58:29	-->	OscarZ (~oscarz@a91-156-5-222.elisa-laajakaista.fi) has joined #haskell
2013-09-13 19:58:43	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-13 19:58:58	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-13 19:58:58	-->	elediaz_ (~quassel@92.59.140.119) has joined #haskell
2013-09-13 19:59:02	<--	cfricke (~cfricke@96.45.197.22) has quit (Quit: leaving)
2013-09-13 19:59:18	-->	Eduard_Munteanu (~EduardMun@188.25.244.214) has joined #haskell
2013-09-13 19:59:20	-->	cfricke (~cfricke@96.45.197.22) has joined #haskell
2013-09-13 20:00:06	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-13 20:00:46	-->	ksh (~user@gateway/tor-sasl/skulls) has joined #haskell
2013-09-13 20:01:34	-->	boegel (~boegel@boegel.ugent.be) has joined #haskell
2013-09-13 20:01:44	<--	hashcat (~chatzilla@27.243.74.65) has quit (Quit: ChatZilla 0.9.87-7.1450hg.fc19 [XULRunner 23.0.1/20130902133717])
2013-09-13 20:01:49	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-13 20:01:52	phischu	ericmoritz: parse (choice [try (string "http://"), string "https://"]) "-" "https://" the problem here is that if the first parser comsumes any input (which it does because "http" matches) then the second parser is not even tried
2013-09-13 20:02:15	<--	CaptainK (~CaptainK@181.179.105.78) has quit (Ping timeout: 260 seconds)
2013-09-13 20:02:31	joe9	is there some implementation of Effects in Haskell?
2013-09-13 20:02:46	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-09-13 20:03:10	<--	ijp (~user@host109-150-135-12.range109-150.btcentralplus.com) has quit (Read error: Operation timed out)
2013-09-13 20:03:14	-->	ijp` (~user@host109-150-134-199.range109-150.btcentralplus.com) has joined #haskell
2013-09-13 20:03:26	ericmoritz	phischu, ok. thanks
2013-09-13 20:03:27	-->	visof (~visof@197.132.168.5) has joined #haskell
2013-09-13 20:03:40	--	ijp` is now known as supremeleaderijp
2013-09-13 20:03:53	-->	OlegYch (~OlegYch@178.163.170.186) has joined #haskell
2013-09-13 20:03:55	joelteon	> foldr1 f [a,b,c,d]
2013-09-13 20:03:56	lambdabot	  f a (f b (f c d))
2013-09-13 20:04:05	<--	eike_c (~eike@pD9F66798.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-13 20:04:10	-->	Lethalman (~lethal@ppp-158-6.28-151.libero.it) has joined #haskell
2013-09-13 20:04:15	joelteon	> foldr1 (\x y -> f (x n) y) [a,b,c,d]
2013-09-13 20:04:16	lambdabot	  Couldn't match expected type `Debug.SimpleReflect.Expr.Expr -> t0'
2013-09-13 20:04:16	lambdabot	        ...
2013-09-13 20:04:24	joelteon	> foldr1 (\x y -> f (x n) y) [a,b,c,d :: Expr -> Expr]
2013-09-13 20:04:26	lambdabot	  Couldn't match expected type `Debug.SimpleReflect.Expr.Expr
2013-09-13 20:04:26	lambdabot	               ...
2013-09-13 20:04:27	ReinH	Ikarus: also note that this requires a right fold. :)
2013-09-13 20:05:03	<--	visof (~visof@197.132.168.5) has quit (Changing host)
2013-09-13 20:05:03	-->	visof (~visof@unaffiliated/visof) has joined #haskell
2013-09-13 20:05:07	<--	kizzx2 (~Adium@223.19.229.251) has quit (Quit: Leaving.)
2013-09-13 20:05:52	-->	twanvl_ (~Twan@77.250.86.217) has joined #haskell
2013-09-13 20:06:04	-->	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-13 20:06:15	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-13 20:06:17	ReinH	This is because right folds immediately return the application of f to the head of the list and the recursive case.
2013-09-13 20:06:40	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-13 20:07:35	<--	anRch (~markmilli@23.30.182.241) has quit (Read error: Connection reset by peer)
2013-09-13 20:07:46	-->	anRch (~markmilli@23.30.182.241) has joined #haskell
2013-09-13 20:08:25	<--	vijaykiran (~user@D549B3DC.cm-10-1a.dynamic.ziggo.nl) has quit (Ping timeout: 246 seconds)
2013-09-13 20:08:27	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-13 20:08:44	danilo2_	Could osmebody tell me why I cannot pattern match against "b (a x y)" if I can pattern match against "(a x y)" and "(b x y"), where "let a x y = (x,y)" and "let b (x,y) = (y,x)"? for example it fails: let b (a x y) = (3,4)
2013-09-13 20:09:09	-->	CaptainK (~CaptainK@181.179.66.210) has joined #haskell
2013-09-13 20:09:35	geekosaur	you seem to be confusing function calls with patterns?
2013-09-13 20:09:40	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-13 20:09:54	Iceland_jack	danilo2_: You can pattern match on constructors
2013-09-13 20:09:56	napping	the "a x y" isn't really a pattern, but defining a function a
2013-09-13 20:10:00	geekosaur	patterns involve *constructors* not functions
2013-09-13 20:10:13	napping	it's more or less sugar for let a = \x y -> ...
2013-09-13 20:10:27	danilo2_	Iceland_jack: Ok, nvm - that was my mistake :)
2013-09-13 20:10:30	danilo2_	thanks :)
2013-09-13 20:10:34	Iceland_jack	No problem!
2013-09-13 20:10:52	<--	ghorn__ (~ghorn@94-225-161-158.access.telenet.be) has quit (Ping timeout: 246 seconds)
2013-09-13 20:11:09	<--	Apsod (~Apsod@c-1dd0e255.029-1-64736c12.cust.bredbandsbolaget.se) has quit (Read error: Connection reset by peer)
2013-09-13 20:11:13	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-09-13 20:11:43	-->	hpc (~juzz@ip98-169-42-110.dc.dc.cox.net) has joined #haskell
2013-09-13 20:11:51	<--	OlegYch (~OlegYch@178.163.170.186) has quit (Ping timeout: 256 seconds)
2013-09-13 20:11:58	napping	There are some languages where partial functions applied to the wrong sort of data just hang around and you can pattern match on them.
2013-09-13 20:12:51	napping	You could probably fake up something similar if you know the heap representation of thunks - Making map f (map g l) = map (f . g) l  an actual clause of the function definition might be interesting
2013-09-13 20:13:05	napping	rewrite rules at runtime
2013-09-13 20:13:06	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-13 20:13:11	-->	gentleben (~gentleben@12.250.97.26) has joined #haskell
2013-09-13 20:13:21	-->	hiroakip (~hiroaki@37.83.118.205) has joined #haskell
2013-09-13 20:14:30	<--	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-13 20:14:36	-->	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has joined #haskell
2013-09-13 20:14:48	ReinH	napping: fmap :)
2013-09-13 20:14:58	--	supremeleaderijp is now known as ijp
2013-09-13 20:15:21	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-13 20:15:31	ReinH	(Set.map breaks that rule)
2013-09-13 20:15:31	napping	I suppose it should go for fmap, yes
2013-09-13 20:15:46	ReinH	it's guaranteed to be true for fmap, but not for map :)
2013-09-13 20:16:00	napping	I was just thinking the plain Prelude.map
2013-09-13 20:16:02	-->	strg (~strg@a89-182-1-47.net-htp.de) has joined #haskell
2013-09-13 20:16:10	ReinH	sure :)
2013-09-13 20:16:22	-->	revtintin (~revtintin@103.11.50.169) has joined #haskell
2013-09-13 20:16:28	napping	I double you could do that generically for fmap - the idea is to mess with generated code for map so rather than forcing the list it gets right away, checks if it's a thunk to apply map
2013-09-13 20:16:42	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-13 20:16:46	-->	Taneb (~nathan@host-92-23-140-113.as13285.net) has joined #haskell
2013-09-13 20:16:57	ReinH	you don't need to know anything about the heap to do it though
2013-09-13 20:16:58	napping	and if so, manually rips out the function and list argument of the inner map to call something different
2013-09-13 20:17:06	napping	?!
2013-09-13 20:17:07	lambdabot	Maybe you meant: v @ ? .
2013-09-13 20:17:15	Clint	does anyone use optparse-applicative to emulate function composition?
2013-09-13 20:17:36	ReinH	fmap fusion can be done at the langauge level and GHC will often optimize that away
2013-09-13 20:17:45	ReinH	(the core level)
2013-09-13 20:17:52	napping	I mean to do it dynamically, in connection with lazy evaluation
2013-09-13 20:18:09	-->	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has joined #haskell
2013-09-13 20:18:11	ReinH	but... you can do it statically...
2013-09-13 20:18:24	napping	say you've got an unforced call to map stored in a cell of data.map
2013-09-13 20:19:05	ReinH	napping: how would the runtime know that?
2013-09-13 20:19:17	napping	I just explained that
2013-09-13 20:19:43	ReinH	so map has a special case for thunks containing another map
2013-09-13 20:19:57	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-13 20:20:01	napping	I'm not yet suggesting you could do it automtically
2013-09-13 20:20:20	<--	cinimod (~user@cpc12-nmal16-2-0-cust137.croy.cable.virginmedia.com) has quit (Ping timeout: 264 seconds)
2013-09-13 20:20:22	-->	ijp` (~user@host86-141-181-235.range86-141.btcentralplus.com) has joined #haskell
2013-09-13 20:20:41	ReinH	I guess I don't understand why you'd want to do it dynamically when it can be done at compile time as an optimization step
2013-09-13 20:20:42	<--	visof (~visof@unaffiliated/visof) has quit (Ping timeout: 246 seconds)
2013-09-13 20:20:42	napping	because it can't always be done sanely at compile time
2013-09-13 20:20:55	napping	consider Map.alter (fmap (map (+1))) k
2013-09-13 20:21:12	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-13 20:21:15	<--	ijp (~user@host109-150-134-199.range109-150.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-13 20:21:21	napping	you have a Data.Lazy.Map storing lists, and randomly and dynamiclly pick cells to (map (+1)) over
2013-09-13 20:21:30	--	ijp` is now known as ijp
2013-09-13 20:21:53	ReinH	but... that's not the same case as fmap f . fmap g, is it?
2013-09-13 20:21:53	 *	hackagebot parcom-lib 0.4.0.0 - A simple parser-combinator library, a bit like Parsec but without the frills  http://hackage.haskell.org/package/parcom-lib-0.4.0.0 (TobiasDammers)
2013-09-13 20:22:12	ReinH	that's (fmap . fmap) f ?
2013-09-13 20:22:23	<--	rgr (~user@e182082180.adsl.alicedsl.de) has quit (Ping timeout: 240 seconds)
2013-09-13 20:22:26	napping	the fmap there is just for the Maybe on alter
2013-09-13 20:22:35	ReinH	ok
2013-09-13 20:22:47	napping	adjust (map (+1)) k if you assume the key exists
2013-09-13 20:22:52	ReinH	ok
2013-09-13 20:23:09	napping	statically doing (fmap f . fmap g) for every fmap is stronger
2013-09-13 20:23:23	napping	but I have in mind calls dynamically happening to come together, even if it's not statically apparent
2013-09-13 20:23:37	napping	(here you can of course do something like manually defunctionalize to a pair of list and pending increment)
2013-09-13 20:23:49	napping	(but GHC won't do that automatically)
2013-09-13 20:23:58	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-13 20:24:14	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-13 20:24:16	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 256 seconds)
2013-09-13 20:24:50	<--	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-09-13 20:25:23	-->	cdk (~cdk@24-212-219-10.cable.teksavvy.com) has joined #haskell
2013-09-13 20:25:59	<--	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has quit (Ping timeout: 256 seconds)
2013-09-13 20:27:08	<--	anRch (~markmilli@23.30.182.241) has quit (Quit: anRch)
2013-09-13 20:27:42	joe9	anyone using Effects for real world haskell programming? Would you mind sharing some example code, please?
2013-09-13 20:28:54	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-13 20:29:30	<--	Guest35050 (~baba@p5DDCD9F6.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-13 20:29:50	-->	justinleitgeb (~justinlei@186.101.162.167) has joined #haskell
2013-09-13 20:29:55	-->	elediaz (~quassel@90.173.198.244) has joined #haskell
2013-09-13 20:30:30	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-13 20:30:42	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Max SendQ exceeded)
2013-09-13 20:30:43	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-13 20:30:45	-->	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has joined #haskell
2013-09-13 20:31:13	-->	rmrf (~rmrf@183.81.16.113) has joined #haskell
2013-09-13 20:31:28	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-13 20:31:52	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Max SendQ exceeded)
2013-09-13 20:31:53	 *	hackagebot parcom-lib 0.3.0.1 - A simple parser-combinator library, a bit like Parsec but without the frills  http://hackage.haskell.org/package/parcom-lib-0.3.0.1 (TobiasDammers)
2013-09-13 20:32:35	<--	elediaz_ (~quassel@92.59.140.119) has quit (Ping timeout: 260 seconds)
2013-09-13 20:33:10	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-09-13 20:34:26	-->	epsilonhalbe1 (~epsilonha@193-83-29-229.adsl.highway.telekom.at) has joined #haskell
2013-09-13 20:34:26	<--	justinleitgeb (~justinlei@186.101.162.167) has quit (Ping timeout: 264 seconds)
2013-09-13 20:35:03	-->	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-13 20:35:36	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 256 seconds)
2013-09-13 20:35:43	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 246 seconds)
2013-09-13 20:35:59	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-09-13 20:36:34	-->	hamid (~nithp@unaffiliated/hamid) has joined #haskell
2013-09-13 20:36:38	<--	epsilonhalbe (~epsilonha@193-83-29-229.adsl.highway.telekom.at) has quit (Read error: Operation timed out)
2013-09-13 20:36:47	-->	nexx (nexx@dslb-188-108-191-236.pools.arcor-ip.net) has joined #haskell
2013-09-13 20:36:47	<--	nexx (nexx@dslb-188-108-191-236.pools.arcor-ip.net) has quit (Changing host)
2013-09-13 20:36:47	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-09-13 20:36:53	 *	hackagebot module-management 0.17.2 - Clean up module imports, split and merge modules  http://hackage.haskell.org/package/module-management-0.17.2 (DavidFox)
2013-09-13 20:37:29	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Ping timeout: 240 seconds)
2013-09-13 20:37:47	-->	aupiff (~aupiff@67-194-69-190.wireless.umnet.umich.edu) has joined #haskell
2013-09-13 20:37:52	-->	xico (~xico@cpe-76-88-18-40.san.res.rr.com) has joined #haskell
2013-09-13 20:38:11	-->	scripty (~scripty@117.192.178.222) has joined #haskell
2013-09-13 20:38:45	-->	pavonia (~user@p4FEEE0D4.dip0.t-ipconnect.de) has joined #haskell
2013-09-13 20:39:19	-->	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has joined #haskell
2013-09-13 20:39:20	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-13 20:39:26	-->	jaya_ (~jaya@117.192.178.222) has joined #haskell
2013-09-13 20:39:36	-->	justinleitgeb (~justinlei@186.101.162.167) has joined #haskell
2013-09-13 20:39:41	<--	Cromulent (~Cromulent@cpc1-reig5-2-0-cust251.6-3.cable.virginmedia.com) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-09-13 20:39:45	-->	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 20:39:50	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-13 20:40:33	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-13 20:40:56	<--	perspectival (~perspecti@35.158.broadband4.iol.cz) has quit (Quit: Leaving.)
2013-09-13 20:41:15	-->	codesoup (~codesoup@184.175.19.180) has joined #haskell
2013-09-13 20:41:38	<--	Targen (~iguana@186.95.158.176) has quit (Ping timeout: 264 seconds)
2013-09-13 20:41:51	<--	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Quit: cekilicy_)
2013-09-13 20:42:09	-->	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-13 20:42:22	enthropy	joe9: the example for Control.Effects.State looks very much like code that uses Control.Monad.ST (of which there should be plenty "real world" uses on hackage)
2013-09-13 20:43:35	<--	jaya_ (~jaya@117.192.178.222) has left #haskell
2013-09-13 20:43:58	-->	Targen (~iguana@190.39.61.34) has joined #haskell
2013-09-13 20:44:34	-->	ghorn__ (~ghorn@94-225-161-158.access.telenet.be) has joined #haskell
2013-09-13 20:44:52	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-13 20:46:12	-->	RThinker (~yegor@77.47.204.159) has joined #haskell
2013-09-13 20:46:25	-->	shft (~shft@94.41.100.201.dynamic.ufanet.ru) has joined #haskell
2013-09-13 20:47:05	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-09-13 20:48:25	-->	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has joined #haskell
2013-09-13 20:49:22	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-13 20:49:23	-->	jaya_ (~jaya@117.192.178.222) has joined #haskell
2013-09-13 20:49:47	<--	kitallis (~kitallis@122.172.199.121) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-13 20:49:54	<--	uvelichitel (~uvelichit@37.73.204.3) has quit (Ping timeout: 264 seconds)
2013-09-13 20:51:21	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Computer has gone to sleep.)
2013-09-13 20:51:44	<--	akegalj (~akegalj@93-138-60-124.adsl.net.t-com.hr) has quit (Quit: Lost terminal)
2013-09-13 20:51:49	<--	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Ping timeout: 240 seconds)
2013-09-13 20:52:14	<--	martinalex (~quassel@bacchus.kawo2.rwth-aachen.de) has quit (Read error: Operation timed out)
2013-09-13 20:52:55	-->	path[l] (~vsi@mpk-nat-4.thefacebook.com) has joined #haskell
2013-09-13 20:53:56	-->	dmj` (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has joined #haskell
2013-09-13 20:54:12	<--	wting (~wting@192.241.163.137) has quit (Quit: Lost terminal)
2013-09-13 20:54:29	<--	ananthakumaran (~Adium@117.192.140.176) has quit (Quit: Leaving.)
2013-09-13 20:54:37	<--	Targen (~iguana@190.39.61.34) has quit (Ping timeout: 246 seconds)
2013-09-13 20:54:51	-->	Targen_ (~iguana@190.38.156.156) has joined #haskell
2013-09-13 20:55:18	<--	kushal (~kdas@fedora/kushal) has quit (Quit: Leaving)
2013-09-13 20:55:21	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-09-13 20:55:28	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit
2013-09-13 20:55:32	<--	artyomkazak (~artyomkaz@94.25.228.118) has quit (Ping timeout: 264 seconds)
2013-09-13 20:55:39	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-09-13 20:56:31	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Remote host closed the connection)
2013-09-13 20:56:40	jhormuz	In Control.Lens, is there a way to export all generated lenses in bulk, much like I can export all field records using "Item(..)"?
2013-09-13 20:56:53	 *	hackagebot jacobi-roots 0.2.0.3 - Roots of two shifted Jacobi polynomials (Legendre and Radau) to double precision  http://hackage.haskell.org/package/jacobi-roots-0.2.0.3 (GregHorn)
2013-09-13 20:56:55	 *	hackagebot parcom-lib 0.4.0.1 - A simple parser-combinator library, a bit like Parsec but without the frills  http://hackage.haskell.org/package/parcom-lib-0.4.0.1 (TobiasDammers)
2013-09-13 20:57:15	-->	kitallis (~kitallis@122.172.199.121) has joined #haskell
2013-09-13 20:57:26	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 246 seconds)
2013-09-13 20:57:48	shachaf	jhormuz: Not really, no.
2013-09-13 20:58:00	jhormuz	shachaf: bummer....
2013-09-13 20:58:25	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-13 20:58:45	jhormuz	thx anyway
2013-09-13 20:58:49	-->	wting (~wting@192.241.163.137) has joined #haskell
2013-09-13 20:59:02	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 240 seconds)
2013-09-13 20:59:42	-->	hexagoxel (~hexagoxel@kiel-4d066e94.pool.mediaWays.net) has joined #haskell
2013-09-13 20:59:50	joe9	can anyone please help with this: program: http://codepad.org/spBoaq4u , error: http://codepad.org/kKnU2QxT
2013-09-13 21:00:35	<--	MercurialAlchemi (~Mercurial@178.157.253.142) has quit (Remote host closed the connection)
2013-09-13 21:00:43	-->	earthy (~arthurvl@illipe.xs4all.nl) has joined #haskell
2013-09-13 21:00:43	joe9	enthropy: I could not find a reader in the Effects http://hackage.haskell.org/package/effects and I also did not see any commits in the last year.
2013-09-13 21:00:45	joe9	not sure if it is maintained actively.
2013-09-13 21:00:49	<--	wting (~wting@192.241.163.137) has quit (Client Quit)
2013-09-13 21:01:27	enthropy	maybe it's doesn't need any changes?
2013-09-13 21:01:32	enthropy	*it
2013-09-13 21:01:37	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-09-13 21:01:37	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-09-13 21:01:51	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-13 21:02:01	enthropy	the reader effect would just be passing an argument in, no?
2013-09-13 21:02:03	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Remote host closed the connection)
2013-09-13 21:02:14	<--	litherum (~Adium@2620:149:4:1b01:9d5:ed73:b40c:406f) has quit (Ping timeout: 240 seconds)
2013-09-13 21:02:15	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Read error: Connection reset by peer)
2013-09-13 21:02:56	sclv_	joe9: i don't think the effects library is much more than a proof of concept?
2013-09-13 21:03:18	-->	azcodex (~azcodex_@173.red-80-26-174.adsl.dynamic.ccgg.telefonica.net) has joined #haskell
2013-09-13 21:03:22	<--	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has quit (Ping timeout: 246 seconds)
2013-09-13 21:03:31	joe9	Isn't there a program / app/ website which tells you what functions I need to add to join 2 functions?
2013-09-13 21:03:48	joe9	I have these 2 functions that I want to string together.
2013-09-13 21:03:52	-->	b0fh_ua (~b0fh_ua@185.17.3.22) has joined #haskell
2013-09-13 21:03:58	-->	OlegYch (~OlegYch@178.163.170.134) has joined #haskell
2013-09-13 21:04:09	joe9	I recall that there was some functionality to tell how they can be joined, lift, etc..
2013-09-13 21:04:13	joe9	any thoughts, please?
2013-09-13 21:04:15	<--	azcodex (~azcodex_@173.red-80-26-174.adsl.dynamic.ccgg.telefonica.net) has quit (Client Quit)
2013-09-13 21:04:34	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-13 21:04:34	-->	azcodex (~azcodex_@173.red-80-26-174.adsl.dynamic.ccgg.telefonica.net) has joined #haskell
2013-09-13 21:04:49	sclv_	joe9: also what is the type of readTransactionsShowFilePath  ?
2013-09-13 21:04:59	sclv_	and what do you mean "join two functions" ?
2013-09-13 21:05:02	-->	Ankhers (~user@gateway/tor-sasl/ankhers) has joined #haskell
2013-09-13 21:05:09	sclv_	compose them?
2013-09-13 21:05:13	-->	wting (~wting@192.241.163.137) has joined #haskell
2013-09-13 21:05:24	<--	twanvl_ (~Twan@77.250.86.217) has quit (Ping timeout: 260 seconds)
2013-09-13 21:05:28	<--	wting (~wting@192.241.163.137) has quit (Client Quit)
2013-09-13 21:05:39	sclv_	for your error I think you should be using liftIO instead of "lift"
2013-09-13 21:05:45	sclv_	since you're lifting through readerT and then identity
2013-09-13 21:05:46	joe9	http://codepad.org/z2qYl1Y0 sclv_ I am trying the one in the second line.
2013-09-13 21:05:57	sclv_	so (lift . lift) would work, but liftIO is more idiomatic
2013-09-13 21:06:05	joe9	sclv_ : thanks.
2013-09-13 21:06:09	-->	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has joined #haskell
2013-09-13 21:06:15	<--	chrisdotcode_ (~quassel@ool-6caa6f84.static.optonline.net) has quit (Remote host closed the connection)
2013-09-13 21:06:37	ericmoritz	is there a prefered HMAC package?  There's quite a few
2013-09-13 21:06:43	sclv_	liftIO universally lifts anything of type IO a to m (IO a) for any depth monad transformer stack
2013-09-13 21:06:47	-->	ham1 (~ham1@87.113.189.5) has joined #haskell
2013-09-13 21:06:57	sclv_	or m IO a rather
2013-09-13 21:07:06	sclv_	for any depth monad transformer stack with IO at base
2013-09-13 21:07:13	-->	wting (~wting@192.241.163.137) has joined #haskell
2013-09-13 21:07:26	FreeFull	Is there a liftReader or liftState?
2013-09-13 21:07:43	n-dolio	No.
2013-09-13 21:07:50	n-dolio	Well, actually.
2013-09-13 21:07:51	-->	martijn__ (~martijn__@ip51cf50f3.direct-adsl.nl) has joined #haskell
2013-09-13 21:07:54	n-dolio	There is now, I think.
2013-09-13 21:07:56	n-dolio	@type state
2013-09-13 21:07:56	lambdabot	MonadState s m => (s -> (a, s)) -> m a
2013-09-13 21:08:08	<--	ham1 (~ham1@87.113.189.5) has left #haskell
2013-09-13 21:08:11	joe9	sclv_: I seem to be missing something: http://codepad.org/V9E3x2ma
2013-09-13 21:08:11	n-dolio	@type reader
2013-09-13 21:08:12	lambdabot	MonadReader r m => (r -> a) -> m a
2013-09-13 21:08:33	n-dolio	Yeah, those.
2013-09-13 21:09:02	<--	bgilbert (~textual@64.20.30.66) has quit (Ping timeout: 256 seconds)
2013-09-13 21:09:13	sclv_	oh word, your type signature is goofy
2013-09-13 21:09:15	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-09-13 21:09:24	sclv_	do you really want to produce something in monad reader that contains IO actions
2013-09-13 21:09:27	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-13 21:09:30	sclv_	or do you want a readerT over IO ?
2013-09-13 21:09:33	-->	ntus1017 (~ntus1017@113.172.207.37) has joined #haskell
2013-09-13 21:09:33	FreeFull	n-dolio: That works if you are making a new state/reader function, but what if you have something of type   State a ?
2013-09-13 21:09:43	FreeFull	Well, not function
2013-09-13 21:09:50	n-dolio	Then unwrap it.
2013-09-13 21:09:56	joe9	sclv_ : no, I want to use Reader and not ReaderT. As I want to be able to use Reader Device Test or Reader Device Assertion.
2013-09-13 21:10:09	n-dolio	@type state . runState
2013-09-13 21:10:10	lambdabot	MonadState s m => State s a -> m a
2013-09-13 21:10:23	FreeFull	Oh, I guess you could   state . runState
2013-09-13 21:10:30	joe9	I could use ReaderT Device IO () for Reader Device Assertion. But, I would have to use ReaderT Device Identity Test for Reader Device Test.
2013-09-13 21:10:39	joe9	sclv_: does that make sense?
2013-09-13 21:10:44	<--	boothead (~ben@cpc6-bexl8-2-0-cust318.2-3.cable.virginmedia.com) has quit (Ping timeout: 246 seconds)
2013-09-13 21:11:05	elliott	I don't see why to use Reader rather than (->) here.
2013-09-13 21:11:06	elliott	if it was ReaderT then OK.
2013-09-13 21:11:09	<--	CatMtKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Quit: Leaving)
2013-09-13 21:11:41	sclv_	i don't know what you want enough to know if it makes sense
2013-09-13 21:11:50	<--	blackyy (~opera@p5B21D8BA.dip0.t-ipconnect.de) has left #haskell
2013-09-13 21:12:08	joe9	elliott: if you do not mind me asking, why is it for ReaderT?
2013-09-13 21:13:01	sclv_	yeah i'm leaning towards elliott here if i understand your code -- just passing around Device directly seems to make sense here.
2013-09-13 21:13:06	sclv_	or using a ReaderT over it
2013-09-13 21:13:26	sclv_	but even then i don't think it cleans much up :-)
2013-09-13 21:14:35	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 260 seconds)
2013-09-13 21:16:00	-->	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has joined #haskell
2013-09-13 21:16:58	-->	dgvncsz0f (~nil@unaffiliated/dsouza) has joined #haskell
2013-09-13 21:18:04	-->	zos (~user@80.174.53.186.dyn.user.ono.com) has joined #haskell
2013-09-13 21:18:07	-->	arpunk_ (~arpunk@190.84.40.17) has joined #haskell
2013-09-13 21:18:09	joe9	program: http://codepad.org/obJumtZy , error: http://codepad.org/wNWU1Mox
2013-09-13 21:18:13	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-13 21:18:22	joe9	I am trying with ReaderT.
2013-09-13 21:18:58	-->	xinming_ (~xinming@125.82.205.119) has joined #haskell
2013-09-13 21:18:59	k0001_	ReaderT makes more sense because it probably means that you also want another monad transformer, and you could happily use both. But if you don't really need another monad transformer besides Reader, then you can get around with just passing Device around.
2013-09-13 21:18:59	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Remote host closed the connection)
2013-09-13 21:19:09	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-09-13 21:19:09	-->	jorick (~kciroj@unaffiliated/jorick) has joined #haskell
2013-09-13 21:19:15	-->	noteventime (~user@nl104-214-213.student.uu.se) has joined #haskell
2013-09-13 21:19:27	<--	zos (~user@80.174.53.186.dyn.user.ono.com) has left #haskell
2013-09-13 21:19:36	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-09-13 21:19:45	<--	gentleben (~gentleben@12.250.97.26) has quit (Quit: gentleben)
2013-09-13 21:20:29	joe9	k0001_: ok, thanks.
2013-09-13 21:21:07	joe9	Any suggestions on how I can change this function:  Device -> IO [Word8] to return a type of ReaderT Device IO [Word8]
2013-09-13 21:21:09	<--	xinming (~xinming@125.87.101.153) has quit (Read error: Connection reset by peer)
2013-09-13 21:21:18	-->	tommd (~tommd@pdx.galois.com) has joined #haskell
2013-09-13 21:21:42	<--	arpunk (~arpunk@190.84.40.17) has quit (Ping timeout: 264 seconds)
2013-09-13 21:22:13	k0001_	:t ReaderT
2013-09-13 21:22:13	lambdabot	(r -> m a) -> ReaderT r m a
2013-09-13 21:22:32	joe9	k0001_: oh, that simple. thanks. sorry for the bother.
2013-09-13 21:22:57	k0001_	joe9: no problem :)
2013-09-13 21:22:57	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-09-13 21:23:10	<--	torkjak_ (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-09-13 21:23:18	-->	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-13 21:23:31	-->	artyomkazak (~artyomkaz@94.25.228.118) has joined #haskell
2013-09-13 21:23:33	<--	ptek (~textual@217.64.164.1) has quit (Remote host closed the connection)
2013-09-13 21:23:40	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-09-13 21:24:06	<--	Kabaka (~Kabaka@botters/kabaka) has quit (Remote host closed the connection)
2013-09-13 21:24:12	<--	martijn__ (~martijn__@ip51cf50f3.direct-adsl.nl) has quit (Quit: martijn__)
2013-09-13 21:24:14	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-09-13 21:24:20	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 256 seconds)
2013-09-13 21:24:21	-->	hrehf (~s@krlh-5f71318c.pool.mediaWays.net) has joined #haskell
2013-09-13 21:24:33	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-09-13 21:26:37	user123abc	data Loc = Temp Int | Mem Int
2013-09-13 21:26:40	-->	Kabaka (~Kabaka@botters/kabaka) has joined #haskell
2013-09-13 21:27:16	<--	Palmik (~palmik@120-49-80-78.tmcz.cz) has quit (Read error: Operation timed out)
2013-09-13 21:27:30	<--	favonia (~favonia@pdpc/supporter/student/favonia) has quit (Ping timeout: 264 seconds)
2013-09-13 21:27:39	user123abc	I want to have a function that's only defined for things of form Temp Int, but I don't want to do newtype Temp = Temp Int because I want my Loc constructor to be named Temp
2013-09-13 21:27:47	<--	dmj` (~user@205-178-72-74.c3-0.snb-ubr1.chi-snb.il.cable.rcn.com) has quit (Ping timeout: 256 seconds)
2013-09-13 21:28:17	<--	hamid (~nithp@unaffiliated/hamid) has quit (Quit: Lost terminal)
2013-09-13 21:28:31	-->	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has joined #haskell
2013-09-13 21:28:34	-->	resnik (~sethroot@108.71.82.84) has joined #haskell
2013-09-13 21:28:48	user123abc	is there some way to solve this except for renaming my Loc constructor? (data Loc = LTemp Temp ...)
2013-09-13 21:28:59	user123abc	I'm pretty new, obviously
2013-09-13 21:29:02	<--	lurkorg (~alex@145.255.244.150) has left #haskell
2013-09-13 21:29:26	<--	applicative (~m@mt-wireless-pittnet-150-212-26-241.wireless.pitt.edu) has quit (Ping timeout: 256 seconds)
2013-09-13 21:29:39	-->	Guest35050 (~baba@p5DDCD9F6.dip0.t-ipconnect.de) has joined #haskell
2013-09-13 21:30:30	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-09-13 21:30:49	<--	xexonixxexillion (~Adium@130.56.90.85) has quit (Remote host closed the connection)
2013-09-13 21:31:09	-->	aboutaaron (~vesuvius@50-1-84-28.dsl.dynamic.sonic.net) has joined #haskell
2013-09-13 21:31:18	chrisdone	user123abc: that Loc as defined above can't be distinguished in the type of a function
2013-09-13 21:31:39	<--	hrehf (~s@krlh-5f71318c.pool.mediaWays.net) has quit (Quit: bfg)
2013-09-13 21:31:45	<--	aboutaaron (~vesuvius@50-1-84-28.dsl.dynamic.sonic.net) has quit (Client Quit)
2013-09-13 21:31:46	Eduard_Munteanu	user123abc: naming and what your function operates on are distinct things, which of those is your goal?
2013-09-13 21:32:24	user123abc	both these responses confuse me, tbh
2013-09-13 21:32:31	user123abc	could you rephrase that, chrisdone?
2013-09-13 21:32:43	-->	aboutaaron (~vesuvius@50-1-84-28.dsl.dynamic.sonic.net) has joined #haskell
2013-09-13 21:33:09	Eduard_Munteanu	user123abc: your function has to handle any Loc regardless of how you name the data constructors.
2013-09-13 21:33:58	Eduard_Munteanu	Unless you use some tricks like GADTs.
2013-09-13 21:34:04	chrisdone	so you have data Loc = Temp Int | Mem Int, and you have some function f :: Loc -> …, but you're saying this `f' only cares about the Temp constructor, correct?
2013-09-13 21:34:06	user123abc	but I don't want my function to handle any Loc
2013-09-13 21:34:08	geekosaur	user123abc, you seem to think that `data Loc = Temp Int | Mem Int` defines two types. it's only one
2013-09-13 21:34:24	-->	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has joined #haskell
2013-09-13 21:34:40	chrisdone	user123abc: what is the function?
2013-09-13 21:34:43	inkjetunito	is it a common convention to begin a haskell file name with a capital letter? :o
2013-09-13 21:34:49	Eduard_Munteanu	user123abc: well, think about it... what is it going to do if given a wrong Loc?
2013-09-13 21:34:50	geekosaur	you don't get to specify a function type that only matches one data constructor of a type
2013-09-13 21:34:50	chrisdone	inkjetunito: yes
2013-09-13 21:35:00	inkjetunito	chrisdone: ok. thanks
2013-09-13 21:35:00	user123abc	I can't give the type of this function, since my issue is with the type system
2013-09-13 21:35:10	<--	kitallis (~kitallis@122.172.199.121) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-13 21:35:24	chrisdone	user123abc: sure, but what does the function do?
2013-09-13 21:35:25	chrisdone	give a limited code definition
2013-09-13 21:35:25	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-09-13 21:35:34	pavonia	user123abc: Why don't you just pass it an Int?
2013-09-13 21:35:43	-->	kitallis (~kitallis@122.172.199.121) has joined #haskell
2013-09-13 21:36:16	user123abc	it treats a temp as a destination for a computation and takes Loc args as data sources for computation
2013-09-13 21:36:31	user123abc	pavonia, that's a good point, though I was hoping to be able to document that my Int is supposed to represent a temp
2013-09-13 21:36:36	merijn	inkjetunito: In fact, you almost always have to. Module names must begin with a capital letter and files must be named the same as the module in them
2013-09-13 21:36:47	user123abc	but temps can also be Locs
2013-09-13 21:36:55	inkjetunito	merijn: ah. makes sense
2013-09-13 21:36:55	Eduard_Munteanu	user123abc: you could use a type synonym to make things more clear
2013-09-13 21:37:09	merijn	inkjetunito: So the only way you can have non-capital file names is 1) it's not exporting a module (i.e. just your main program) or 2) it's on a case insensitive filesystem
2013-09-13 21:37:22	user123abc	Eduard_Munteanu, good idea - I think that could do it
2013-09-13 21:37:25	<--	CaptainK (~CaptainK@181.179.66.210) has quit (Ping timeout: 256 seconds)
2013-09-13 21:37:35	<--	cads2 (~m@adsl-74-160-80-249.asm.bellsouth.net) has quit (Ping timeout: 252 seconds)
2013-09-13 21:37:37	user123abc	thanks
2013-09-13 21:37:57	<--	AleXoundOS (~AleXoundO@188.244.39.56) has quit (Quit: Leaving)
2013-09-13 21:38:18	-->	Shieni (~shiensha@cs147026.pp.htv.fi) has joined #haskell
2013-09-13 21:38:59	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 260 seconds)
2013-09-13 21:39:51	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-13 21:41:17	<--	Shou (~sister@81.191.185.181) has quit (Quit: meow meow meow)
2013-09-13 21:41:23	user123abc	yeah, that works exactly like I wanted it to
2013-09-13 21:41:30	-->	agallagher (~textual@173.252.71.129) has joined #haskell
2013-09-13 21:41:44	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-13 21:42:25	chrisdone	yay
2013-09-13 21:42:28	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-09-13 21:42:34	chrisdone	hey kamatsu
2013-09-13 21:44:43	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-13 21:45:01	<--	bbloom (~bbloom@cpe-66-108-225-123.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-09-13 21:45:30	<--	aboutaaron (~vesuvius@50-1-84-28.dsl.dynamic.sonic.net) has left #haskell
2013-09-13 21:45:35	<--	paolino (~paolino@net-93-144-78-254.cust.dsl.teletu.it) has quit (Ping timeout: 260 seconds)
2013-09-13 21:45:35	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-09-13 21:46:02	-->	gentleben (~gentleben@c-98-207-40-73.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 21:46:26	<--	shreesh (~shreesh@209.104.235.1) has quit (Remote host closed the connection)
2013-09-13 21:46:35	<--	boegel (~boegel@boegel.ugent.be) has quit (Quit: Leaving)
2013-09-13 21:46:50	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-09-13 21:48:00	<--	kitallis (~kitallis@122.172.199.121) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-13 21:48:45	<--	robbert (~robbert@unaffiliated/robbert) has quit (Ping timeout: 245 seconds)
2013-09-13 21:48:53	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-13 21:49:02	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-09-13 21:49:02	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-09-13 21:49:28	jhormuz	Does anyone know a point free/lambda free way to duplicate an item, ie- this "\x -> (x, x)" without the lambda or new function written?
2013-09-13 21:49:42	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 21:49:42	pavonia	:t join (,)
2013-09-13 21:49:42	Clint	@pl \x -> (x, x)
2013-09-13 21:49:42	lambdabot	join (,)
2013-09-13 21:49:42	lambdabot	a -> (a, a)
2013-09-13 21:50:01	jhormuz	awesome!
2013-09-13 21:50:18	jhormuz	thanks
2013-09-13 21:50:23	chrisdone	:t id&&&id
2013-09-13 21:50:24	lambdabot	a -> (a, a)
2013-09-13 21:50:28	chrisdone	just for variation
2013-09-13 21:50:44	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit
2013-09-13 21:50:58	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-09-13 21:51:32	haasn	:t runState get
2013-09-13 21:51:32	lambdabot	s -> (s, s)
2013-09-13 21:51:38	haasn	more variation :)
2013-09-13 21:51:43	chrisdone	clever!
2013-09-13 21:52:00	chrisdone	ʘ‿ʘ
2013-09-13 21:52:02	-->	cads2 (~m@adsl-74-160-80-249.asm.bellsouth.net) has joined #haskell
2013-09-13 21:53:39	-->	phst` (~user@ppp-46-244-163-240.dynamic.mnet-online.de) has joined #haskell
2013-09-13 21:53:54	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-13 21:54:22	<--	ntus1017 (~ntus1017@113.172.207.37) has quit (Remote host closed the connection)
2013-09-13 21:54:31	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 21:56:57	-->	naibed (~naibed@a91-156-194-77.elisa-laajakaista.fi) has joined #haskell
2013-09-13 21:57:00	-->	acowley (~acowley@SEASNet-10-09.grasp.upenn.edu) has joined #haskell
2013-09-13 21:57:32	<--	scripty (~scripty@117.192.178.222) has quit (Read error: Connection reset by peer)
2013-09-13 21:58:10	-->	Bluuu (~a@unaffiliated/bluuu) has joined #haskell
2013-09-13 21:58:19	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-13 21:58:34	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-13 21:59:03	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 260 seconds)
2013-09-13 21:59:58	<--	conehead (~conehead@unaffiliated/conehead) has quit (Remote host closed the connection)
2013-09-13 22:00:31	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-09-13 22:00:31	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-13 22:00:31	<--	xinming_ (~xinming@125.82.205.119) has quit (Ping timeout: 264 seconds)
2013-09-13 22:00:43	-->	jarlg (~jarlg@c-178-73-200-246.anonymous.at.anonine.com) has joined #haskell
2013-09-13 22:01:04	-->	xinming (~xinming@125.82.205.119) has joined #haskell
2013-09-13 22:01:12	edwardk	jhormuz: use makeClassy ''Foo then export HasFoo(..)
2013-09-13 22:01:21	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-09-13 22:01:21	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-09-13 22:01:21	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-09-13 22:01:25	-->	robbert (~robbert@i96148.upc-i.chello.nl) has joined #haskell
2013-09-13 22:01:25	<--	robbert (~robbert@i96148.upc-i.chello.nl) has quit (Changing host)
2013-09-13 22:01:25	-->	robbert (~robbert@unaffiliated/robbert) has joined #haskell
2013-09-13 22:01:27	-->	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-13 22:01:36	<--	agallagher (~textual@173.252.71.129) has quit (Quit: Computer has gone to sleep.)
2013-09-13 22:01:51	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 260 seconds)
2013-09-13 22:01:57	acowley	edwardk: Did anything come out of your exceptional powwow with Snoyman and Tekmo?
2013-09-13 22:02:07	-->	zolk3ri1 (~zolk3ri@catv-89-132-196-182.catv.broadband.hu) has joined #haskell
2013-09-13 22:02:07	edwardk	i missed it =/
2013-09-13 22:02:08	haasn	edwardk: at first I thought that was supposed to be a solution on how to write \x -> (x, x) in a pointfree way..
2013-09-13 22:02:15	<--	zolk3ri1 (~zolk3ri@catv-89-132-196-182.catv.broadband.hu) has left #haskell
2013-09-13 22:02:16	edwardk	they came up with some useful stuff
2013-09-13 22:02:17	<--	vimes (~vimes@94.7.222.165) has quit (Read error: Connection reset by peer)
2013-09-13 22:02:18	-->	paolino (~paolino@net-93-144-78-254.cust.dsl.teletu.it) has joined #haskell
2013-09-13 22:02:26	jhormuz	edwardk- thanks, I will look at that
2013-09-13 22:02:26	edwardk	:t join (,)
2013-09-13 22:02:27	lambdabot	a -> (a, a)
2013-09-13 22:02:43	acowley	edwardk: One thing that I do in some of my code is register cleanup actions, but explicitly make the caller run them
2013-09-13 22:02:44	-->	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has joined #haskell
2013-09-13 22:03:00	 *	edwardk scrolls up and see that in the history and goes 'oh'
2013-09-13 22:03:07	<--	amathew (~Adium@nol-lo0.fw.nyc2.appnexus.com) has left #haskell
2013-09-13 22:03:19	acowley	edwardk: It lets me kick off encapsulated processes that are intended to run asynchronously to some kind of top-level logic that shuts things down some time later
2013-09-13 22:03:51	shachaf	Oh, I guess makeClassy is possible. But it's hardly the same thing.
2013-09-13 22:03:58	edwardk	acowley: yeah, but that is pretty heavy systems-wise, you have to have the top level monitor, it doesn't play well when you don't all the control flow, etc.
2013-09-13 22:04:17	-->	sebzim4500 (5614eef8@gateway/web/freenode/ip.86.20.238.248) has joined #haskell
2013-09-13 22:04:17	edwardk	er when you don't own all
2013-09-13 22:04:19	FreeFull	:t \f g -> fmap f . ap g
2013-09-13 22:04:19	lambdabot	(Monad f, Functor f) => (a -> b) -> f (a1 -> a) -> f a1 -> f b
2013-09-13 22:04:39	acowley	edwardk: Yeah, I don't think it's by any means ideal, but more continuing on with what I said the other day about it being easy to over-think this.
2013-09-13 22:04:43	<--	David (~David@unaffiliated/david) has quit (Ping timeout: 264 seconds)
2013-09-13 22:04:46	edwardk	acowley: sure
2013-09-13 22:05:00	edwardk	i honestly don't think the MonadBaseControl stuff is _that_ bad.
2013-09-13 22:05:08	acowley	edwardk: I have processes that allocate scarce resources, but it's hard to scope the use of those resources
2013-09-13 22:05:27	edwardk	i have a few things i'd like to liberalize is all
2013-09-13 22:05:40	<--	xinming (~xinming@125.82.205.119) has quit (Ping timeout: 263 seconds)
2013-09-13 22:05:50	<--	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has quit (Quit: foxnorth)
2013-09-13 22:06:17	-->	xinming (~xinming@125.82.205.119) has joined #haskell
2013-09-13 22:06:26	-->	CaptainK (~CaptainK@181.179.56.2) has joined #haskell
2013-09-13 22:06:46	-->	litherum (~Adium@2620:149:4:1b01:9d5:ed73:b40c:406f) has joined #haskell
2013-09-13 22:07:01	elliott	monad-control is sad :(
2013-09-13 22:07:10	-->	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has joined #haskell
2013-09-13 22:07:10	<--	Mortomes (~Mortomes_@dhcp-089-099-142-125.chello.nl) has quit (Changing host)
2013-09-13 22:07:10	-->	Mortomes (~Mortomes_@unaffiliated/mortomes) has joined #haskell
2013-09-13 22:07:52	<--	skyflash (~skyflash@206.172.31.228) has quit (Remote host closed the connection)
2013-09-13 22:08:56	<--	kludge` (~comet@unaffiliated/espiral) has quit (Quit: leaving)
2013-09-13 22:09:08	<--	elediaz (~quassel@90.173.198.244) has quit (Quit: http://quassel-irc.org - Chatee cómodamente donde sea.)
2013-09-13 22:09:27	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 22:09:38	FreeFull	:t \f g -> liftM f . ap g
2013-09-13 22:09:39	lambdabot	Monad m => (a1 -> r) -> m (a -> a1) -> m a -> m r
2013-09-13 22:09:51	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-13 22:09:53	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-09-13 22:10:12	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Write error: Connection reset by peer)
2013-09-13 22:10:50	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-13 22:10:52	<--	pootler (mervyn@smlh.x.rootbsd.net) has quit (Ping timeout: 245 seconds)
2013-09-13 22:11:11	FreeFull	:t (liftM reverse . ap (+3)) (,)
2013-09-13 22:11:12	lambdabot	    Occurs check: cannot construct the infinite type:
2013-09-13 22:11:12	lambdabot	      a1 = b0 -> (a1 -> [a0], b0)
2013-09-13 22:11:12	lambdabot	    Expected type: (a1 -> [a0]) -> a1
2013-09-13 22:11:17	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-13 22:11:38	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-09-13 22:11:42	FreeFull	:t (liftM const . ap (+3)) (,)
2013-09-13 22:11:43	lambdabot	    Occurs check: cannot construct the infinite type:
2013-09-13 22:11:43	lambdabot	      a0 = b0 -> (a0 -> a10, b0)
2013-09-13 22:11:43	lambdabot	    Expected type: (a0 -> a10) -> a0
2013-09-13 22:12:12	<--	acabrera (~alejandro@72.3.234.177) has left #haskell ("WeeChat 0.4.1")
2013-09-13 22:12:34	<--	paddymahoney (~paddymaho@24.137.221.230) has quit (Quit: Leaving)
2013-09-13 22:13:04	-->	Claudius1aximus (~claude@unaffiliated/claudiusmaximus) has joined #haskell
2013-09-13 22:13:12	-->	David (~David@136.152.142.155) has joined #haskell
2013-09-13 22:13:55	<--	sebzim4500 (5614eef8@gateway/web/freenode/ip.86.20.238.248) has quit (Quit: Page closed)
2013-09-13 22:14:11	<--	jarlg (~jarlg@c-178-73-200-246.anonymous.at.anonine.com) has quit (Quit: WeeChat 0.4.0)
2013-09-13 22:15:35	-->	edon (~user@albalug/edon) has joined #haskell
2013-09-13 22:17:05	-->	Shou (~sister@81.191.185.181) has joined #haskell
2013-09-13 22:17:09	<--	ClaudiusMaximus (~claude@unaffiliated/claudiusmaximus) has quit (Ping timeout: 248 seconds)
2013-09-13 22:18:29	FreeFull	:t (liftM reverse . ap (join (+3))) (,)
2013-09-13 22:18:30	lambdabot	    Occurs check: cannot construct the infinite type:
2013-09-13 22:18:30	lambdabot	      a1 = a1 -> (b0 -> (a1, b0)) -> [a0]
2013-09-13 22:18:30	lambdabot	    Expected type: a1 -> a1 -> (b0 -> (a1, b0)) -> [a0]
2013-09-13 22:18:33	FreeFull	:t (liftM reverse . ap (join (+3)))
2013-09-13 22:18:34	lambdabot	    Occurs check: cannot construct the infinite type:
2013-09-13 22:18:34	lambdabot	      a2 = a2 -> a1 -> [a0]
2013-09-13 22:18:34	lambdabot	    Expected type: a2 -> a2 -> a1 -> [a0]
2013-09-13 22:18:47	<--	Bluuu (~a@unaffiliated/bluuu) has quit (Ping timeout: 256 seconds)
2013-09-13 22:19:07	<--	aupiff (~aupiff@67-194-69-190.wireless.umnet.umich.edu) has quit (Ping timeout: 260 seconds)
2013-09-13 22:19:19	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-13 22:19:43	Thulsadum	ok, slowly but surely the clouds about monads are clearing.
2013-09-13 22:20:05	-->	Ubiquite (~Ubiquite@85.191.24.109.rev.sfr.net) has joined #haskell
2013-09-13 22:20:20	Thulsadum	but i guess they will come back, when i'm going to take a look in more advanced ones :D
2013-09-13 22:20:23	<--	robbert (~robbert@unaffiliated/robbert) has quit (Ping timeout: 246 seconds)
2013-09-13 22:20:26	<--	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has quit (Quit: fjh)
2013-09-13 22:21:28	YayMe	Clint: That looks like EBNF to you?
2013-09-13 22:21:55	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 260 seconds)
2013-09-13 22:21:55	-->	robbert (~robbert@i96148.upc-i.chello.nl) has joined #haskell
2013-09-13 22:21:55	<--	robbert (~robbert@i96148.upc-i.chello.nl) has quit (Changing host)
2013-09-13 22:21:56	-->	robbert (~robbert@unaffiliated/robbert) has joined #haskell
2013-09-13 22:21:59	Clint	YayMe: or some other kind of BNF
2013-09-13 22:23:15	YayMe	Clint: Yeah it has similarities to some of the BNF like grammars I've seen, however the part that i don't recognize is the * in {<alpha>*4}
2013-09-13 22:23:16	-->	revtintin2 (~revtintin@103.11.50.169) has joined #haskell
2013-09-13 22:23:20	<--	revtintin2 (~revtintin@103.11.50.169) has quit (Client Quit)
2013-09-13 22:23:53	Clint	YayMe: that's in ebnf
2013-09-13 22:24:17	YayMe	I can pretty much parse it just by common sense except for that because I don't know if it's saying up-to 4 times or specifically 4 times
2013-09-13 22:25:59	<--	revtintin (~revtintin@103.11.50.169) has quit (Ping timeout: 260 seconds)
2013-09-13 22:26:23	YayMe	Clint: I'm looking on wikipedia and don't see anything of the nature.. it uses * as a comment modifier according to wikipedia
2013-09-13 22:26:48	-->	agallagher (~textual@mpk-nat-2.thefacebook.com) has joined #haskell
2013-09-13 22:27:10	YayMe	Ah here it is "* repetition-symbol"
2013-09-13 22:27:11	Clint	YayMe: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form#Conventions
2013-09-13 22:27:35	YayMe	Cool, thanks! I'll devour this wikipedia article so I can understand the grammar I'm reading more correctly.
2013-09-13 22:28:08	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-13 22:28:22	YayMe	Thought EBNF doesn't use the := from appearances...
2013-09-13 22:28:32	<--	Der_Dackel (~DerDackel@p4FD6F8D7.dip0.t-ipconnect.de) has quit (Quit: Der_Dackel)
2013-09-13 22:29:52	<--	rmrf (~rmrf@183.81.16.113) has quit (Quit: Leaving.)
2013-09-13 22:29:55	-->	normanrichards (~normanric@adsl-99-18-226-170.dsl.aus2tx.sbcglobal.net) has joined #haskell
2013-09-13 22:31:04	YayMe	Whatever. I think I have a feel for their grammar after poking at it for a bit of a while.. I think they're just using pseudo form
2013-09-13 22:31:49	-->	b0oh (~Adium@188.134.45.47) has joined #haskell
2013-09-13 22:32:57	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-13 22:33:22	acowley	Hmm. If you have an executable named Foo, and you say "cabal run foo", Foo will be built, but the executable won't be run on a case-sensitive filesystem
2013-09-13 22:33:30	joe9	when using emacs with ghci-mod, how do I see the compiler errors / warningn?
2013-09-13 22:33:41	acowley	Not sure if there's a better outcome there
2013-09-13 22:33:48	joe9	I see the color changing  whene there is an error, but , no message.
2013-09-13 22:33:53	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Remote host closed the connection)
2013-09-13 22:34:19	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-13 22:34:25	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-13 22:34:27	acowley	joe9: M-?
2013-09-13 22:34:31	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Client Quit)
2013-09-13 22:34:37	acowley	Well, that's with ghc-mod
2013-09-13 22:34:54	<--	conal (~textual@208-75-245-66.utilitytelephone.net) has quit (Ping timeout: 264 seconds)
2013-09-13 22:34:54	joe9	acowley: it says M-? is undefined.
2013-09-13 22:35:16	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Max SendQ exceeded)
2013-09-13 22:35:30	joe9	acowley: do you recall the function name, by any chance?
2013-09-13 22:35:30	acowley	joe9: Yeah, I'm not sure I've used ghci-mod, actually.
2013-09-13 22:35:49	-->	NemesisD (~michael@70.89.125.98) has joined #haskell
2013-09-13 22:36:14	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-13 22:36:23	-->	heyduck (~heyduck@216.55.25.70) has joined #haskell
2013-09-13 22:36:23	<--	heyduck (~heyduck@216.55.25.70) has quit (Remote host closed the connection)
2013-09-13 22:36:28	<--	CaptainK (~CaptainK@181.179.56.2) has quit (Read error: Connection reset by peer)
2013-09-13 22:36:33	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-09-13 22:36:34	-->	boegel (~boegel@boegel.ugent.be) has joined #haskell
2013-09-13 22:36:38	<--	normanrichards (~normanric@adsl-99-18-226-170.dsl.aus2tx.sbcglobal.net) has quit (Ping timeout: 240 seconds)
2013-09-13 22:36:42	joe9	acowley: ok, thanks.
2013-09-13 22:37:13	FreeFull	Huh, mapM id is sequence
2013-09-13 22:38:10	-->	ezyang (~ezyang@dr-wily.mit.edu) has joined #haskell
2013-09-13 22:38:11	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-09-13 22:38:11	FreeFull	I can see why
2013-09-13 22:38:13	ezyang	What's the standard cpp macro for checking if you are on Windows?
2013-09-13 22:38:19	-->	madjestic (~madjestic@178.224.0.244) has joined #haskell
2013-09-13 22:39:10	-->	CaptainK (~CaptainK@181.179.76.199) has joined #haskell
2013-09-13 22:39:36	<--	Neqoxec (~Neqoxec@24.21.110.149) has quit (Ping timeout: 245 seconds)
2013-09-13 22:39:45	-->	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-13 22:40:20	joe9	this function http://codepad.org/mhSay1ls . I want to change it to commented line without using the txns variable. Is that possible?
2013-09-13 22:40:33	joe9	error: http://codepad.org/6BLUrrHU
2013-09-13 22:40:39	joe9	is there a flipM oslt?
2013-09-13 22:40:50	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-09-13 22:41:06	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-09-13 22:41:11	bergmark	@pl (\txns -> readTxn (head . filter isEepromTxnOutput $ txns))
2013-09-13 22:41:11	lambdabot	readTxn . head . filter isEepromTxnOutput
2013-09-13 22:41:41	joe9	 @pl (\txns -> readTxn (head . filter isEepromTxnOutput $ txns) 8)
2013-09-13 22:41:51	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-13 22:43:50	<--	NemesisD (~michael@70.89.125.98) has quit (Ping timeout: 240 seconds)
2013-09-13 22:44:19	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-09-13 22:44:28	acowley	I can't parse your paste
2013-09-13 22:44:35	-->	NemesisD (~michael@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has joined #haskell
2013-09-13 22:44:41	acowley	The working version has imbalanced parens
2013-09-13 22:44:55	tdammers	*sigh* I need a better computer
2013-09-13 22:45:03	Thulsadum	how could I do IO (i.e. O) on monadic data?
2013-09-13 22:45:27	joe9	 acowley: sorry about that.
2013-09-13 22:45:28	tdammers	compiling lens takes ages... I don't even want to think about yesod
2013-09-13 22:46:38	benmachine	Thulsadum: do you have specific data or specific IO in mind?
2013-09-13 22:46:43	-->	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has joined #haskell
2013-09-13 22:46:59	Thulsadum	printing an Int
2013-09-13 22:47:03	merijn	Thulsadum: In what sense? Do you mean "I have an 'IO a' and an 'a -> IO ()' (say, print) how do I combine them?"
2013-09-13 22:47:13	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-13 22:47:18	<--	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-13 22:47:33	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-09-13 22:47:48	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 22:47:56	Thulsadum	I have an Identiy' (my own implementation) containing an Int, and I would like to print the Int, merijn. :)
2013-09-13 22:48:13	<--	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has quit (Quit: Konversation terminated!)
2013-09-13 22:48:14	merijn	Thulsadum: Well, you'd have to get it out of the identity first
2013-09-13 22:48:25	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: Connection reset by peer)
2013-09-13 22:48:29	-->	bos_ (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 22:48:39	Thulsadum	I thought the concept of monads is to prevent that?
2013-09-13 22:48:49	merijn	Thulsadum: Monads are just an interface
2013-09-13 22:48:56	merijn	Thulsadum: Lists are a monad, you can get things out of lists
2013-09-13 22:49:15	merijn	Thulsadum: There is no way to get things out *using the monadic interface*
2013-09-13 22:49:20	-->	CatMtKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has joined #haskell
2013-09-13 22:49:28	merijn	Thulsadum: And IO doesn't provide a way to get things out at all
2013-09-13 22:49:28	Thulsadum	ah ok
2013-09-13 22:49:48	merijn	Thulsadum: For other types, if that type provides a way of getting things out (pattern matching, a function, etc.) you can just use that
2013-09-13 22:49:48	Thulsadum	so simplye pattern match the Monadic type agains a function and leave the binding stuff?
2013-09-13 22:49:55	merijn	Thulsadum: Yeah
2013-09-13 22:50:12	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-13 22:50:31	<--	paolino (~paolino@net-93-144-78-254.cust.dsl.teletu.it) has quit (Remote host closed the connection)
2013-09-13 22:50:35	FreeFull	@hoogle MonadPlus m => Bool -> m a -> m a
2013-09-13 22:50:38	lambdabot	Control.Monad mplus :: MonadPlus m => m a -> m a -> m a
2013-09-13 22:50:38	lambdabot	Control.Monad unless :: Monad m => Bool -> m () -> m ()
2013-09-13 22:50:38	lambdabot	Control.Monad when :: Monad m => Bool -> m () -> m ()
2013-09-13 22:50:44	Thulsadum	ah. purely overwheelming this stuff, but i like it. :D a challanging language/subject of research
2013-09-13 22:50:52	Thulsadum	ty, merijn :)
2013-09-13 22:50:54	<--	madjestic (~madjestic@178.224.0.244) has quit (Ping timeout: 240 seconds)
2013-09-13 22:51:06	FreeFull	Huh, I wonder why the standard libraries don't have a function with that type signature
2013-09-13 22:51:44	FreeFull	> let when' False _ = mzero; when' True x = x in (when' True (Just 2),when' False (Just 3))
2013-09-13 22:51:44	lambdabot	  (Just 2,Nothing)
2013-09-13 22:51:48	-->	quchen (~quchen@p54AA4BCE.dip0.t-ipconnect.de) has joined #haskell
2013-09-13 22:51:57	 *	hackagebot acme-php 0.0.3 - The flexibility of Haskell and the safety of PHP  http://hackage.haskell.org/package/acme-php-0.0.3 (JoeQuinn)
2013-09-13 22:52:07	<--	bos_ (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-13 22:52:40	napping	FreeFull: I usually define something like that too. \b m -> (guard b >> m) has that type
2013-09-13 22:52:42	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 22:52:55	merijn	Thulsadum: Basically, the monadic interface provides users with a way to combine things, without needing access to the internals of said things. Think of >>= in case of IO "IO a -> (a -> IO b) -> IO b" I can combine IO actions, without being able to see how IO is implemented (i.e. it's a nice form of encapsulation)
2013-09-13 22:53:06	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: Connection reset by peer)
2013-09-13 22:53:10	enthropy	too bad hackage search doesn't have a way to just show "newest package"
2013-09-13 22:53:11	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-13 22:53:14	FreeFull	napping: It is useful
2013-09-13 22:53:25	enthropy	so you're stuck looking at foo-0.1 foo-0.2 ...
2013-09-13 22:53:32	jhormuz	edwardk- The makeClassy thing worked for me (thanks), but now I have another question....  How can I initialize a record (from nothing), avoiding the underscore names, but labeling the values (ie- I don't want to just use a nameless list, cuz I have many values and I wouldn't know which is which)
2013-09-13 22:53:38	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 22:54:28	Thulsadum	merijn: am i assuming right, that i group functions by the return value to a certain monad?
2013-09-13 22:54:32	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-13 22:54:45	-->	[elvin] (~elvin@178.128.166.105.dsl.dyn.forthnet.gr) has joined #haskell
2013-09-13 22:54:57	merijn	Thulsadum: However, if you *do* expose the implementation details (like list, Maybe, Identity, etc) then you do get to use those details. It's just the in some cases the pre-built monadic interface lets you save a lot of time, because you can build generic code that works for any monad and automatically reuse it. Take a look at for example the monad-loops package which has a whole bunch of looping things pre-built
2013-09-13 22:55:26	merijn	Thulsadum: I'm not sure exactly what you mean by "grouping functions by the return value to a certain monad"?
2013-09-13 22:56:50	Thulsadum	mh, let's take foo:: a->b->MondadicType () ; bar :: a->b->MonadicType (), these function are 'bound' to the monad, aren't they?
2013-09-13 22:57:10	-->	madjestic (~madjestic@178.224.0.244) has joined #haskell
2013-09-13 22:57:23	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 260 seconds)
2013-09-13 22:57:33	Thulsadum	(well they will create an instance of that MonadicType thingy, and thus force you into the monadic interface)
2013-09-13 22:57:44	merijn	Thulsadum: They don't force anything
2013-09-13 22:57:50	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-09-13 22:58:07	merijn	Thulsadum: Take "replicate :: Int -> a -> [a]" does that force you to use the list monad?
2013-09-13 22:58:09	<--	napping (~brandon@qchost236-138.cs.illinois.edu) has quit (Quit: leaving)
2013-09-13 22:58:32	merijn	You can, if you want too, of course
2013-09-13 22:58:39	Thulsadum	mh
2013-09-13 22:58:47	merijn	> replicate 5 () >>= \x -> [1,2]
2013-09-13 22:58:48	lambdabot	  [1,2,1,2,1,2,1,2,1,2]
2013-09-13 22:59:03	merijn	> replicate 5 ()
2013-09-13 22:59:04	Iceland_jack	> [1..5] >> [1,2]
2013-09-13 22:59:04	lambdabot	  [(),(),(),(),()]
2013-09-13 22:59:05	lambdabot	  [1,2,1,2,1,2,1,2,1,2]
2013-09-13 22:59:08	donri	m a -> a is not part of the monad interface and not provided by many monads, but it is separately provided by some
2013-09-13 22:59:13	<--	ulfdoz (~mary@p5B38B509.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2013-09-13 22:59:34	<--	path[l] (~vsi@mpk-nat-4.thefacebook.com) has quit (Quit: path[l])
2013-09-13 22:59:59	merijn	Thulsadum: I personally believe many people over think this monad thing, I tend to encourage people to use >> and >>= directly to write code and ignore do notation at the start
2013-09-13 23:00:16	merijn	Thulsadum: This helps you get used to the fact that >>= is just a normal function
2013-09-13 23:00:19	-->	phulin (~Adium@18.111.77.93) has joined #haskell
2013-09-13 23:00:32	phulin	How do I get an SYB Generic instance for Text?
2013-09-13 23:00:33	Thulsadum	yeah, i ommit it atm as well, because it hides too much, to understand
2013-09-13 23:00:47	merijn	Take a look at the implementation for Maybe, for example
2013-09-13 23:00:47	merijn	@src Maybe >>=
2013-09-13 23:00:48	lambdabot	Source not found. Listen, broccoli brains, I don't have time to listen to this trash.
2013-09-13 23:00:56	merijn	@src Maybe (>>=)
2013-09-13 23:00:56	lambdabot	(Just x) >>= k      = k x
2013-09-13 23:00:56	lambdabot	Nothing  >>= _      = Nothing
2013-09-13 23:01:00	benmachine	phulin: depends if you're ok with it being inefficient
2013-09-13 23:01:03	<--	laar (~laar@ip60-210-173-82.adsl2.static.versatel.nl) has quit (Quit: Leaving.)
2013-09-13 23:01:13	Thulsadum	i implemented that just a moment ago :D
2013-09-13 23:01:17	jfischoff	phulin: it has one
2013-09-13 23:01:30	<--	erochester (~erocheste@d-137-155-131.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-09-13 23:01:34	phulin	jfischoff: where?
2013-09-13 23:01:39	Thulsadum	where does lambdabot take the source from?
2013-09-13 23:01:45	merijn	Thulsadum: It's hard coded
2013-09-13 23:01:59	jfischoff	Instances …. Data Text I'm looking at the doc
2013-09-13 23:02:01	merijn	Thulsadum: But you can search on Hoogle and the documentation will have a link to the source
2013-09-13 23:02:07	donri	Thulsadum: https://github.com/mokus0/lambdabot/blob/master/lambdabot/State/source
2013-09-13 23:02:11	<--	CaptainK (~CaptainK@181.179.76.199) has quit (Read error: Connection reset by peer)
2013-09-13 23:02:17	merijn	Thulsadum: For instances of typeclasses, the source is usually in the same module as the datatype
2013-09-13 23:02:31	donri	[or the class]
2013-09-13 23:02:38	enthropy	johnw: using c2hsc, shouldn't  --cppopts="-B/usr/share/R/include/" let the cpp find a file  /usr/share/R/include/R_ext/Arith.h, which is #include <R_ext/Arith.h>?
2013-09-13 23:02:51	Thulsadum	ha, never seen that small source link on top :D
2013-09-13 23:02:58	Thulsadum	guess, i need new glasses. :p
2013-09-13 23:03:05	merijn	Thulsadum: Individual functions/datatypes have links too
2013-09-13 23:03:13	merijn	Thulsadum: Just look on the right side of the screen :)
2013-09-13 23:03:14	<--	mizu_no_oto (~textual@gw1.mcgraw-hill.com) has quit (Quit: Computer has gone to sleep.)
2013-09-13 23:03:19	<--	David (~David@136.152.142.155) has quit (Ping timeout: 260 seconds)
2013-09-13 23:03:46	Thulsadum	rediscovering the docs... :D
2013-09-13 23:04:01	merijn	Thulsadum: The thing that forces you to use the monadic interface is the fact that IO doesn't export it's constructors, so you can't pattern match to get values out of IO
2013-09-13 23:04:15	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-09-13 23:05:00	Thulsadum	so hiding the constructors will force it into a jail?
2013-09-13 23:05:45	merijn	Thulsadum: Yes, no exported constructors == no pattern matching, think of it as making instance variables "private" in something like Java/C++
2013-09-13 23:06:04	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-13 23:06:08	merijn	Thulsadum: It lets you hide implementation details and stops people from messing around with things they shouldn't
2013-09-13 23:06:11	Thulsadum	mh, nice :)
2013-09-13 23:06:26	Thulsadum	yeah, I see.
2013-09-13 23:06:35	-->	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-13 23:06:39	-->	sepp2k1 (~sexy@e179232186.adsl.alicedsl.de) has joined #haskell
2013-09-13 23:06:42	-->	OlegYch2 (~OlegYch@178.163.170.134) has joined #haskell
2013-09-13 23:06:43	<--	robbert (~robbert@unaffiliated/robbert) has quit (Ping timeout: 260 seconds)
2013-09-13 23:06:53	merijn	Thulsadum: semi-relatedly, I was working on an explanation of IO. It's not quite done, but if you have any feedback on what is helpful or what is confusing, that's always good
2013-09-13 23:06:57	merijn	Thulsadum: https://gist.github.com/merijn/6478573
2013-09-13 23:07:17	<--	boegel (~boegel@boegel.ugent.be) has quit (Quit: Leaving)
2013-09-13 23:07:22	Thulsadum	i'll have a look right now. :)
2013-09-13 23:07:54	<--	sepp2k (~sexy@f054015062.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-13 23:07:55	<--	matheus23 (~quassel@p4FDF2A06.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-09-13 23:08:18	-->	aupiff (~aupiff@67-194-69-190.wireless.umnet.umich.edu) has joined #haskell
2013-09-13 23:08:48	-->	ijp` (~user@host86-141-181-235.range86-141.btcentralplus.com) has joined #haskell
2013-09-13 23:09:03	-->	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has joined #haskell
2013-09-13 23:09:24	-->	d3lxa_ (~d3lxa@ks38928.kimsufi.com) has joined #haskell
2013-09-13 23:09:27	<--	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Remote host closed the connection)
2013-09-13 23:09:31	-->	rhodesd-alt (~none@192.34.61.82) has joined #haskell
2013-09-13 23:09:35	-->	BigEndia1 (~hurp@li547-53.members.linode.com) has joined #haskell
2013-09-13 23:09:39	-->	agundry_ (~adam@cafe.cis.strath.ac.uk) has joined #haskell
2013-09-13 23:09:44	<--	Lethalman (~lethal@ppp-158-6.28-151.libero.it) has quit (Ping timeout: 256 seconds)
2013-09-13 23:09:47	-->	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has joined #haskell
2013-09-13 23:09:53	<--	ijp (~user@host86-141-181-235.range86-141.btcentralplus.com) has quit (Disconnected by services)
2013-09-13 23:09:56	--	ijp` is now known as ijp
2013-09-13 23:10:08	<--	b0oh (~Adium@188.134.45.47) has quit (Quit: Leaving.)
2013-09-13 23:10:43	-->	Ralith_ (~ralith@66.114.129.162) has joined #haskell
2013-09-13 23:10:49	<--	Ankhers (~user@gateway/tor-sasl/ankhers) has quit (Ping timeout: 240 seconds)
2013-09-13 23:10:53	<--	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Client Quit)
2013-09-13 23:11:07	-->	zebr_ (~zebr@arcadia.kent.ac.uk) has joined #haskell
2013-09-13 23:11:09	-->	refold_ (~gman@h-129-27.a258.priv.bahnhof.se) has joined #haskell
2013-09-13 23:11:16	-->	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-13 23:11:36	-->	Kiryx_ (~Kiryx@85-202-48-130.internetia.net.pl) has joined #haskell
2013-09-13 23:11:44	-->	menalath (~mena@asgard.tauri.hu) has joined #haskell
2013-09-13 23:11:56	-->	ryant50001 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-09-13 23:12:47	<--	aupiff (~aupiff@67-194-69-190.wireless.umnet.umich.edu) has quit (Ping timeout: 255 seconds)
2013-09-13 23:13:25	-->	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has joined #haskell
2013-09-13 23:13:40	-->	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has joined #haskell
2013-09-13 23:14:04	<--	d3lxa (~d3lxa@ks38928.kimsufi.com) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:05	--	d3lxa_ is now known as d3lxa
2013-09-13 23:14:08	<--	OlegYch (~OlegYch@178.163.170.134) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:08	<--	BigEndian (~hurp@li547-53.members.linode.com) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:08	<--	rhodesd (~none@192.34.61.82) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:08	<--	tsou (~tsou@lyon.sians.org) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:08	<--	agundry (~adam@cafe.cis.strath.ac.uk) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:12	<--	Ralith (~ralith@66.114.129.162) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:12	<--	refold (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:14	<--	Kiryx (~Kiryx@85-202-48-130.internetia.net.pl) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:15	<--	zebr (~zebr@arcadia.kent.ac.uk) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:16	<--	jrib (~jrib@upstream/dev/jrib) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:16	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:16	<--	mena (~mena@asgard.tauri.hu) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:17	<--	CatMtKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:17	<--	lattenwald (~qalex@185.6.245.156) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:18	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:18	<--	mkiefel (~martin@84.38.64.26) has quit (Remote host closed the connection)
2013-09-13 23:14:18	<--	naibed (~naibed@a91-156-194-77.elisa-laajakaista.fi) has quit (Quit: Lost terminal)
2013-09-13 23:14:19	<--	dustinswan (~dustinswa@198.199.71.201) has quit (Ping timeout: 246 seconds)
2013-09-13 23:14:20	-->	mkiefel (~martin@nopw.de) has joined #haskell
2013-09-13 23:14:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-13 23:14:26	-->	dogmaT_ (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has joined #haskell
2013-09-13 23:14:38	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 264 seconds)
2013-09-13 23:15:11	<--	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2013-09-13 23:15:36	<--	dogmaT (~dogmat@ip-94-112-149-96.net.upcbroadband.cz) has quit (Ping timeout: 246 seconds)
2013-09-13 23:15:37	-->	tsou (~tsou@82.226.64.106) has joined #haskell
2013-09-13 23:15:42	-->	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has joined #haskell
2013-09-13 23:15:43	-->	David (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-13 23:15:43	<--	David (~David@108-67-65-91.lightspeed.sntcca.sbcglobal.net) has quit (Changing host)
2013-09-13 23:15:43	-->	David (~David@unaffiliated/david) has joined #haskell
2013-09-13 23:15:46	<--	iswilson (~ian@192-0-175-9.cpe.teksavvy.com) has quit (Quit: Leaving)
2013-09-13 23:15:54	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-09-13 23:15:56	<--	tg (~x@unaffiliated/tg) has quit (Ping timeout: 246 seconds)
2013-09-13 23:16:11	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-13 23:16:13	<--	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has quit (Ping timeout: 246 seconds)
2013-09-13 23:17:13	-->	robbert (~robbert@i96148.upc-i.chello.nl) has joined #haskell
2013-09-13 23:17:13	<--	robbert (~robbert@i96148.upc-i.chello.nl) has quit (Changing host)
2013-09-13 23:17:13	-->	robbert (~robbert@unaffiliated/robbert) has joined #haskell
2013-09-13 23:17:52	-->	nimish (~nimish@raddison04.r.subnet.rcn.com) has joined #haskell
2013-09-13 23:17:53	<--	phulin (~Adium@18.111.77.93) has quit (Quit: Leaving.)
2013-09-13 23:18:04	<--	weie_ (~eie@softbank221078042071.bbtec.net) has quit (Quit: Leaving...)
2013-09-13 23:18:24	-->	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-09-13 23:18:54	-->	nomeata (nobody@nomeata.de) has joined #haskell
2013-09-13 23:18:57	-->	s00pcan (~chris@108-208-64-149.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-09-13 23:19:18	-->	eis (~eis@109.197.218.46) has joined #haskell
2013-09-13 23:19:19	-->	dgvncsz0` (~nil@186.202.169.96) has joined #haskell
2013-09-13 23:19:28	<--	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has quit (Ping timeout: 246 seconds)
2013-09-13 23:19:28	<--	threestrikes (~wontez@ltea-047-066-076-239.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2013-09-13 23:19:28	<--	mjo (~mjo@c-68-49-223-78.hsd1.md.comcast.net) has quit (Ping timeout: 246 seconds)
2013-09-13 23:19:28	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 246 seconds)
2013-09-13 23:19:29	Iceland_jack	Thulsadum: As a silly example you might want to represent numbers from 5 to 20: so you make a ‘smart constructor’ like so:
2013-09-13 23:19:29	Iceland_jack	    smart n | 5 <= n && n <= 20 = Just (Foo n)
2013-09-13 23:19:29	Iceland_jack	            | otherwise         = Nothing
2013-09-13 23:19:29	-->	lattenwald (~qalex@185.6.245.156) has joined #haskell
2013-09-13 23:19:29	Iceland_jack	Then you hide the Foo constructor and you will know that everything with that constructor is between 5 and 20
2013-09-13 23:19:29	Iceland_jack	So it's a way to maintain invariants
2013-09-13 23:19:41	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Read error: Connection reset by peer)
2013-09-13 23:19:42	--	eis is now known as Guest98639
2013-09-13 23:19:47	<--	phischu (~pschuster@dslb-084-063-127-187.pools.arcor-ip.net) has quit (Ping timeout: 260 seconds)
2013-09-13 23:20:23	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-09-13 23:20:39	Thulsadum	yeah, that's quite cool, Iceland_jack
2013-09-13 23:20:55	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-13 23:20:59	[elvin]	hey anyone knows, vty-ui is for terminal  ?
2013-09-13 23:21:02	-->	mjo (~mjo@c-68-49-223-78.hsd1.md.comcast.net) has joined #haskell
2013-09-13 23:21:25	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-13 23:21:28	Iceland_jack	Thulsadum: Another thing you can do is to use it to make restricted IO monads
2013-09-13 23:21:37	merijn	[elvin]: Yes
2013-09-13 23:21:43	Iceland_jack	where you know that some monad can only perform a specific action (check the time, read from a file, ...)
2013-09-13 23:21:57	[elvin]	god and has all these widgets seems very cool
2013-09-13 23:22:18	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 264 seconds)
2013-09-13 23:23:02	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Ping timeout: 240 seconds)
2013-09-13 23:23:08	-->	Shin-LaC (~LaC@c-67-167-208-105.hsd1.il.comcast.net) has joined #haskell
2013-09-13 23:23:52	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-09-13 23:24:08	-->	tg (~x@unaffiliated/tg) has joined #haskell
2013-09-13 23:24:58	-->	Beetny (~Beetny@ppp118-208-0-67.lns20.bne1.internode.on.net) has joined #haskell
2013-09-13 23:25:31	-->	zw01 (~zev@107-199-61-12.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-13 23:25:34	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Quit: mikecaruso)
2013-09-13 23:25:50	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-09-13 23:25:52	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-13 23:25:56	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 264 seconds)
2013-09-13 23:26:01	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-13 23:26:44	-->	dustinswan (~dustinswa@198.199.71.201) has joined #haskell
2013-09-13 23:27:07	<--	nulvinge (~idk@h-35-6.a336.priv.bahnhof.se) has quit (Quit: Lost terminal)
2013-09-13 23:27:25	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-13 23:27:29	<--	cekilicy_ (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Ping timeout: 240 seconds)
2013-09-13 23:27:43	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-09-13 23:28:35	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-13 23:28:49	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-13 23:29:00	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp136.bu.edu) has joined #haskell
2013-09-13 23:29:24	<--	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has quit (Quit: Ex-Chat)
2013-09-13 23:29:24	<--	chidy (~chidimuor@host86-180-156-36.range86-180.btcentralplus.com) has quit (Quit: chidy)
2013-09-13 23:30:53	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-09-13 23:32:00	<--	_d3f (~gnu@79.172.193.111) has quit (Quit: WeeChat 0.4.1)
2013-09-13 23:32:21	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-13 23:32:34	<--	MusangKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Quit: Leaving)
2013-09-13 23:32:55	-->	CatMtKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has joined #haskell
2013-09-13 23:33:05	Thulsadum	merijn: it's nice written, but has not much new stuff to me. i like the analogy of getline to ls ;)
2013-09-13 23:33:48	merijn	Thulsadum: That's good, if not much of that is new, then you're already on your way to knowing most you need to know :)
2013-09-13 23:33:53	<--	madjestic (~madjestic@178.224.0.244) has quit (Read error: Connection reset by peer)
2013-09-13 23:33:59	-->	Lethalman (~lethal@91.252.220.130) has joined #haskell
2013-09-13 23:34:17	-->	lcfrs_ (~lcfrs@8.25.197.24) has joined #haskell
2013-09-13 23:34:19	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Read error: Connection reset by peer)
2013-09-13 23:34:55	merijn	Thulsadum: The neat thing is that you can actually make IO actions without executing, for example, try this in ghci
2013-09-13 23:34:58	<--	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has quit (Remote host closed the connection)
2013-09-13 23:35:03	merijn	> map print [1..10] !! 3
2013-09-13 23:35:05	lambdabot	  <IO ()>
2013-09-13 23:35:39	-->	normanrichards (~normanric@adsl-99-18-226-170.dsl.aus2tx.sbcglobal.net) has joined #haskell
2013-09-13 23:35:53	<--	maxter (~maxter@recordness.overtime.volia.net) has quit (Quit: Konversation terminated!)
2013-09-13 23:36:21	<--	Paprikachu (~Paprikach@77.117.76.140.wireless.dyn.drei.com) has quit (Remote host closed the connection)
2013-09-13 23:36:21	arkeet	but ghci would execute that
2013-09-13 23:36:29	hpc	and print 4
2013-09-13 23:36:35	leroux	I think he's trying to point out that (!! 3) is where it is executing it.
2013-09-13 23:36:39	arkeet	yes
2013-09-13 23:36:40	leroux	> map print [1..10]
2013-09-13 23:36:43	lambdabot	  [<IO ()>,<IO ()>,<IO ()>,<IO ()>,<IO ()>,<IO ()>,<IO ()>,<IO ()>,<IO ()>,<I...
2013-09-13 23:36:58	 *	hackagebot hashable 1.2.1.0 - A class for types that can be converted to a hash value  http://hackage.haskell.org/package/hashable-1.2.1.0 (JohanTibell)
2013-09-13 23:37:15	merijn	Well, rather I was pointing out that it *wasn't* executing the other 9
2013-09-13 23:37:16	hpc	Thulsadum: it's common practice in haskell to make an infinite computation and then just take the parts you need
2013-09-13 23:37:22	merijn	But that's largely the same thing
2013-09-13 23:38:16	arkeet	> print 4 `seq` ()
2013-09-13 23:38:17	lambdabot	  ()
2013-09-13 23:38:20	<--	Excurio (~c@68-113-0-218.static.knwc.wa.charter.com) has quit (Remote host closed the connection)
2013-09-13 23:38:45	<--	Taneb (~nathan@host-92-23-140-113.as13285.net) has quit (Quit: Leaving)
2013-09-13 23:39:00	arkeet	merijn: I dunno, it never even constructs the other 9
2013-09-13 23:39:01	hpc	> [error "aha! crashed", "nope! not crashed"] !! 1
2013-09-13 23:39:03	lambdabot	  "nope! not crashed"
2013-09-13 23:39:14	Thulsadum	hpc: i've already noticed that :)
2013-09-13 23:39:25	hpc	> fix error -- have you noticed this?
2013-09-13 23:39:26	lambdabot	  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *E...
2013-09-13 23:39:26	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp136.bu.edu) has quit (Ping timeout: 240 seconds)
2013-09-13 23:39:27	merijn	arkeet: It constructs th first 3, so you're wrong ;)
2013-09-13 23:39:42	merijn	Well, actually
2013-09-13 23:39:43	merijn	hmm
2013-09-13 23:39:44	arkeet	no, it makes the cons cells
2013-09-13 23:39:50	merijn	pfft
2013-09-13 23:39:56	arkeet	but never evaluates the inside
2013-09-13 23:40:27	hpc	it constructs the beginning cons cells of the lists, which contain thunks to (print x) for x in [1,2,3,4]
2013-09-13 23:40:28	hpc	then it evaluates the thunk for 4
2013-09-13 23:40:41	hpc	then it executes it
2013-09-13 23:40:59	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-13 23:42:00	--	Ralith_ is now known as Ralith
2013-09-13 23:42:16	[elvin]	what would be the imperative equivalent? like a loop with an if and a counter for elements?
2013-09-13 23:42:35	hpc	the imperative equivalent is (print 4)
2013-09-13 23:42:40	hpc	:P
2013-09-13 23:42:41	<--	jfhall (~jfhall@24-205-238-86.dhcp.snlo.ca.charter.com) has quit (Quit: leaving)
2013-09-13 23:42:41	<--	Discoloda (6bd31e6e@gateway/web/freenode/ip.107.211.30.110) has quit (Ping timeout: 250 seconds)
2013-09-13 23:42:41	<--	acowley (~acowley@SEASNet-10-09.grasp.upenn.edu) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-09-13 23:42:48	[elvin]	haha no it is not and you know it
2013-09-13 23:43:09	<--	perlite (~perlite@1-164-208-45.dynamic.hinet.net) has quit (Read error: Connection reset by peer)
2013-09-13 23:43:13	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-09-13 23:43:52	hpc	[elvin]: it's more of a lazy/strict thing than a functional/imperative thing
2013-09-13 23:44:13	-->	Excureo (~c@68-113-0-218.static.knwc.wa.charter.com) has joined #haskell
2013-09-13 23:44:14	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 240 seconds)
2013-09-13 23:44:37	[elvin]	yes thats right. i have in mind that imperative is never lazy
2013-09-13 23:44:38	Thulsadum	is there an alternative way for something like that? getLine >>= (\x -> return $ reverse x) >>= putStrLn
2013-09-13 23:44:58	Thulsadum	well the anonymous function ist somewhat awkward
2013-09-13 23:44:58	hpc	:t getLine >>= (\x -> return $ reverse x) >>= putStrLn
2013-09-13 23:44:59	lambdabot	IO ()
2013-09-13 23:45:02	<--	user123abc (~sally@c-67-171-79-251.hsd1.pa.comcast.net) has quit (Ping timeout: 240 seconds)
2013-09-13 23:45:07	arkeet	getLine >>= putStrLn . reverse
2013-09-13 23:45:31	-->	perlite (~perlite@36-224-96-142.dynamic-ip.hinet.net) has joined #haskell
2013-09-13 23:45:31	Iceland_jack	:t fmap reverse getLine >>= putStrLn
2013-09-13 23:45:31	lambdabot	IO ()
2013-09-13 23:45:38	hpc	interact reverse
2013-09-13 23:45:46	Iceland_jack	hpc: Not the same
2013-09-13 23:45:47	hpc	one line of input is enough for everyone
2013-09-13 23:45:51	Thulsadum	interact is to specific
2013-09-13 23:45:51	<--	Shin-LaC (~LaC@c-67-167-208-105.hsd1.il.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-09-13 23:45:51	arkeet	:t getLine >>= putStrLn . reverse
2013-09-13 23:45:51	lambdabot	IO ()
2013-09-13 23:46:01	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-13 23:46:15	arkeet	the ordering is nicer with =<<
2013-09-13 23:46:30	hpc	"nicer" meaning linear ;)
2013-09-13 23:46:40	Thulsadum	but i guess, the composition operator was the thing, i was looking for :D
2013-09-13 23:46:41	Iceland_jack	:t do line <- getLine; putStrLn (reverse line)
2013-09-13 23:46:42	lambdabot	IO ()
2013-09-13 23:47:06	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-13 23:47:08	arkeet	yes, that corresponds to the one I wrote
2013-09-13 23:47:17	Thulsadum	yep
2013-09-13 23:48:07	YayMe	Graa why does F# need in-order declarations... that is so damned annoying when you want to declare a mutually recursive type
2013-09-13 23:48:25	hpc	YayMe: because the type-checker is in-order too
2013-09-13 23:48:34	YayMe	well the type-checker is dumb then.
2013-09-13 23:48:38	YayMe	grumble
2013-09-13 23:48:40	hpc	YayMe: see also, the order of parameters of (|>)
2013-09-13 23:49:01	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:1507:b460:b9c5:d4ad:c45b:d01e) has quit (Quit: Bye)
2013-09-13 23:49:08	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:1507:b460:b9c5:d4ad:c45b:d01e) has joined #haskell
2013-09-13 23:49:10	-->	[JJ]Albert (~Albert@c-68-58-90-223.hsd1.in.comcast.net) has joined #haskell
2013-09-13 23:49:37	<--	ecr (~Thunderbi@2620:101:8003:200:981a:5246:3f48:c20f) has quit (Quit: ecr)
2013-09-13 23:49:40	-->	Bryan792 (~bryan@c-24-23-223-91.hsd1.ca.comcast.net) has joined #haskell
2013-09-13 23:50:25	YayMe	I shouldn't complain, were it not for F# and fparsec I wouldn't have any chance of convincing colleagues to let me write anything in an FP language.
2013-09-13 23:50:36	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-13 23:50:52	<--	strg (~strg@a89-182-1-47.net-htp.de) has quit (Ping timeout: 264 seconds)
2013-09-13 23:51:14	<--	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-09-13 23:51:15	-->	scripty (~scripty@117.192.178.222) has joined #haskell
2013-09-13 23:51:41	lcfrs_	Is anyone here working with Thrift?
2013-09-13 23:52:01	-->	Hermit (~hermit@unaffiliated/grpala) has joined #haskell
2013-09-13 23:52:03	lcfrs_	I've got the Haskell example to work
2013-09-13 23:52:16	Thulsadum	merijn: if you write an article like the one about IO, in the near futur, about State, I'd like to read it. :D
2013-09-13 23:52:51	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-09-13 23:53:02	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Ping timeout: 240 seconds)
2013-09-13 23:53:44	lcfrs_	Thrift Compiler needs some work. It doesn't hide functions that the current module exports, so compile fails because of the ambiguous defn
2013-09-13 23:53:46	arkeet	but there's nothing magic about State
2013-09-13 23:53:50	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 240 seconds)
2013-09-13 23:54:04	merijn	Thulsadum: State is actually much simpler than IO
2013-09-13 23:54:24	arkeet	a -> State s b  =  (a, s)  -> (b, s)
2013-09-13 23:54:36	-->	Swizec (~swizec@BSN-142-181-105.dial-up.dsl.siol.net) has joined #haskell
2013-09-13 23:54:39	merijn	Thulsadum: Do you understand the conceptual idea that you can simulate state by passing it in as an extra argument and then returning it as an extra result?
2013-09-13 23:54:58	merijn	Thulsadum: State does *exactly* that, but it hides the ugly extra parameter/result
2013-09-13 23:55:07	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-13 23:55:23	YayMe	merijn: The control flow and side effecting types are a lot more clear to me as a normally imperative programmer than the stateful abstractions
2013-09-13 23:55:24	merijn	Thulsadum: The best advice is, try to implement Monad and get/put for State yourself
2013-09-13 23:55:43	merijn	Thulsadum: Here's your hint: "data State s a = State (s -> (a, s))"
2013-09-13 23:55:43	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-13 23:56:10	Thulsadum	ok :D
2013-09-13 23:56:18	<--	Lethalman (~lethal@91.252.220.130) has quit (Ping timeout: 264 seconds)
2013-09-13 23:56:19	YayMe	maybe/either mimic behaviours I deal with every day in imperative programming, IO and STM as well, but in imperative programming I never work with anything that behaves like the State, Reader, or Writer types (that I can identify...)
2013-09-13 23:56:34	<--	Ubiquite (~Ubiquite@85.191.24.109.rev.sfr.net) has quit (Remote host closed the connection)
2013-09-13 23:56:41	quchen	Seconding merijn's suggestion. Writing State myself was probably the most valuable thing I did to learn about Monads.
2013-09-13 23:56:46	merijn	YayMe: I'm always recommend trying to implemennt them yourself
2013-09-13 23:57:19	merijn	YayMe: Further hints for reader/writer "data Reader r a = Reader (r -> a)" and "data Writer w a = Writer (a, w)"
2013-09-13 23:57:26	<--	cfricke (~cfricke@96.45.197.22) has quit (Ping timeout: 240 seconds)
2013-09-13 23:57:28	Thulsadum	yeah, i implemented Identity and Maybe thus far, was quite educational
2013-09-13 23:58:09	YayMe	merijn: Yeah... I just don't understand what I'm supposed to use the state/reader/writer monads for which is where it get's confusing. Maybe/Either have an obvious purpose, but the purpose of those ones is ?
2013-09-13 23:58:25	joelteon	the purpose of those is their name
2013-09-13 23:58:47	merijn	YayMe: Imagine your application has a global config read from a file, what's the easiest way to make sure you have access to the config everywhere? Reader
2013-09-13 23:58:59	merijn	YayMe: You want to collect log interactions? Writer.
2013-09-13 23:59:06	-->	Thra11 (~Thra11@87.113.58.201) has joined #haskell
2013-09-13 23:59:12	<--	arun (~arun@unaffiliated/sindian) has quit (Remote host closed the connection)
2013-09-13 23:59:13	merijn	YayMe: Generic "I want to maintain some state." State
2013-09-13 23:59:25	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-09-13 23:59:38	<--	chuzz (~user@unaffiliated/chuzz) has quit (Ping timeout: 264 seconds)
2013-09-13 23:59:50	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 240 seconds)
2013-09-14 00:00:27	YayMe	merijn: That is possibly the most helpful explanation I've heard. The state I kind of figured that from the name but then I'd heard people refer to it as for functional composition which made it less clear.
2013-09-14 00:00:32	-->	applicative (~m@eh-wireless-pittnet-150-212-1-19.wireless.pitt.edu) has joined #haskell
2013-09-14 00:00:40	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-14 00:01:36	<--	jvaneenwyk (~jvaneenwy@38.110.159.138) has quit (Quit: Leaving)
2013-09-14 00:01:38	merijn	YayMe: Functional composition is what it does, state is what it's for
2013-09-14 00:01:59	merijn	YayMe: Like I said, State *literally* works by just adding an extra input argument and extra return value everywhere
2013-09-14 00:01:59	 *	hackagebot parcom-lib 0.5.0.0 - A simple parser-combinator library, a bit like Parsec but without the frills  http://hackage.haskell.org/package/parcom-lib-0.5.0.0 (TobiasDammers)
2013-09-14 00:02:15	-->	MedDev (~MDev@68-187-73-233.dhcp.unas.ut.charter.com) has joined #haskell
2013-09-14 00:02:23	merijn	YayMe: The monad implementation of State then carefully hides this from you and thus all the argument passing for you
2013-09-14 00:03:14	-->	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2013-09-14 00:03:18	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-14 00:03:25	-->	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has joined #haskell
2013-09-14 00:03:35	-->	psii (~psi@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-14 00:03:37	inkjetunito	can haskell do implicit conversions, like String to Data.Text?
2013-09-14 00:03:41	YayMe	merijn: Aye, I just need to implement it I suppose. Moreover, I need to use it for something so I can have a sense about how it's used. The other thing that confuses me is all of those types have functions other than bind that you have to use to work with them
2013-09-14 00:04:01	joelteon	inkjetunito: at compile-time, kind of
2013-09-14 00:04:04	Rarrikins	inkjetunito: For literals, yes.
2013-09-14 00:04:07	<--	kronixx (~zarul@ubuntu/member/zarul) has quit (Ping timeout: 260 seconds)
2013-09-14 00:04:10	joelteon	yeah, for literals
2013-09-14 00:04:17	YayMe	inkjetunito: haskell doesn't do any run-time conversions. something is a certain type and that's the type it is
2013-09-14 00:04:18	<--	epsilonhalbe1 (~epsilonha@193-83-29-229.adsl.highway.telekom.at) has quit (Ping timeout: 264 seconds)
2013-09-14 00:04:26	merijn	inkjetunito: Did you mean "I'm to lazy to write "Data.Text.pack" for all my String literals?
2013-09-14 00:04:32	<--	resnik (~sethroot@108.71.82.84) has quit (Quit: Lost terminal)
2013-09-14 00:04:34	inkjetunito	merijn: yes!
2013-09-14 00:04:47	merijn	inkjetunito: {-# LANGUAGE OverloadedStrings #-}
2013-09-14 00:05:04	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 260 seconds)
2013-09-14 00:05:18	merijn	inkjetunito: You know how numeric literals are "Num a => a"
2013-09-14 00:05:26	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-09-14 00:05:26	inkjetunito	thanks guys
2013-09-14 00:05:28	<--	applicative (~m@eh-wireless-pittnet-150-212-1-19.wireless.pitt.edu) has quit (Ping timeout: 256 seconds)
2013-09-14 00:05:32	<--	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has quit (Quit: Leaving.)
2013-09-14 00:05:34	Rarrikins	No problem.
2013-09-14 00:05:37	merijn	inkjetunito: That turns String literals into "IsString a => a" (where Text is of course an IsString instance)
2013-09-14 00:05:42	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-09-14 00:05:51	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-14 00:06:53	-->	kronixx (~zarul@ubuntu/member/zarul) has joined #haskell
2013-09-14 00:07:39	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-09-14 00:08:01	<--	normanrichards (~normanric@adsl-99-18-226-170.dsl.aus2tx.sbcglobal.net) has quit
2013-09-14 00:08:11	<--	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-09-14 00:08:27	<--	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has quit (Ping timeout: 276 seconds)
2013-09-14 00:08:28	-->	psii_ (~psi@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-14 00:08:40	<--	ystael (~ystael@64.206.121.41) has quit (Ping timeout: 256 seconds)
2013-09-14 00:08:46	-->	ashnur (~ashnur@79.117.68.150) has joined #haskell
2013-09-14 00:08:48	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-14 00:08:59	<--	c_14 (~c_14@unaffiliated/c-14/x-8913907) has quit (Quit: ZNC - http://znc.in)
2013-09-14 00:09:13	<--	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has quit (Ping timeout: 246 seconds)
2013-09-14 00:09:50	<--	artyomkazak (~artyomkaz@94.25.228.118) has quit (Ping timeout: 240 seconds)
2013-09-14 00:09:53	-->	dropdrive (~dropdrive@cpe-74-68-130-168.nyc.res.rr.com) has joined #haskell
2013-09-14 00:09:55	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-09-14 00:10:35	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-09-14 00:10:57	<--	Arkantos (~arkantos@77.245.65.162) has quit (Ping timeout: 264 seconds)
2013-09-14 00:11:07	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-14 00:11:19	-->	dissipate_ (~steve@ip72-220-90-25.sd.sd.cox.net) has joined #haskell
2013-09-14 00:11:28	-->	c_14 (~c_14@unaffiliated/c-14/x-8913907) has joined #haskell
2013-09-14 00:11:34	<--	Swizec (~swizec@BSN-142-181-105.dial-up.dsl.siol.net) has quit (Ping timeout: 256 seconds)
2013-09-14 00:11:49	<--	psii (~psi@gateway/tor-sasl/foopsi) has quit (Ping timeout: 240 seconds)
2013-09-14 00:12:07	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-09-14 00:13:25	<--	Thra11 (~Thra11@87.113.58.201) has quit (Ping timeout: 246 seconds)
2013-09-14 00:13:29	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-09-14 00:14:26	joe9	:t TestCase
2013-09-14 00:14:27	lambdabot	Not in scope: data constructor `TestCase'
2013-09-14 00:14:35	<--	xnyhps (~xnyhps@s.xnyhps.nl) has quit (Ping timeout: 245 seconds)
2013-09-14 00:14:58	joe9	TestCase :: Asertion -> Test -- What should I do to get this to be ReaderT Device Test?
2013-09-14 00:15:08	joe9	Or, should it be ReaderT Device Identity Test
2013-09-14 00:15:48	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-14 00:16:15	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-14 00:16:29	joe9	:t TestCase $ return () :: Test
2013-09-14 00:16:30	lambdabot	Not in scope: data constructor `TestCase'
2013-09-14 00:16:30	lambdabot	Not in scope: type constructor or class `Test'
2013-09-14 00:16:51	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-09-14 00:17:04	-->	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has joined #haskell
2013-09-14 00:17:35	-->	SingingBoyo (~brandon@dhcp-128-189-205-141.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-14 00:17:38	<--	exicer (~exicer@host81-151-181-87.range81-151.btcentralplus.com) has quit (Ping timeout: 264 seconds)
2013-09-14 00:17:58	joelteon	couldn't you do ReaderT Device IO () and then liftIO all your assertions?
2013-09-14 00:18:01	<--	dgvncsz0` (~nil@186.202.169.96) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-09-14 00:18:45	arkeet	I'd rather emit  MonadReader Device m => m Test
2013-09-14 00:18:50	-->	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has joined #haskell
2013-09-14 00:19:11	-->	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has joined #haskell
2013-09-14 00:19:25	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 00:20:47	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-14 00:20:54	<--	inkjetunito (~abcdefg@unaffiliated/inkjetunit) has quit (Quit: qQQ)
2013-09-14 00:20:59	<--	nomeata (nobody@nomeata.de) has quit (Quit: Client exiting)
2013-09-14 00:22:01	<--	psii_ (~psi@gateway/tor-sasl/foopsi) has quit (Quit: WeeChat 0.4.1)
2013-09-14 00:22:34	-->	xnyhps (~xnyhps@s.xnyhps.nl) has joined #haskell
2013-09-14 00:22:36	<--	mgsloan (~mgsloan@c-24-19-162-135.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2013-09-14 00:22:49	-->	psii (~psi@gateway/tor-sasl/foopsi) has joined #haskell
2013-09-14 00:23:34	<--	shft (~shft@94.41.100.201.dynamic.ufanet.ru) has quit (Ping timeout: 246 seconds)
2013-09-14 00:23:41	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-09-14 00:24:43	<--	Swizec (~swizec@BSN-77-212-100.static.dsl.siol.net) has quit (Quit: Leaving...)
2013-09-14 00:26:19	-->	artyomkazak (~artyomkaz@host-116-158-66-217.spbmts.ru) has joined #haskell
2013-09-14 00:26:27	enthropy	johnw: nevermind, it works if I leave off the final /include/
2013-09-14 00:27:02	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Ping timeout: 240 seconds)
2013-09-14 00:27:26	-->	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-14 00:27:28	<--	davidsd (~davidsd@e204074.ext.net.ias.edu) has quit (Quit: davidsd)
2013-09-14 00:28:33	<--	jhormuz (~jhormuz@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-09-14 00:28:55	<--	justinleitgeb (~justinlei@186.101.162.167) has quit (Remote host closed the connection)
2013-09-14 00:29:29	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Ping timeout: 240 seconds)
2013-09-14 00:29:47	<--	afarmer (~afarmer@achmelvich.ittc.ku.edu) has quit (Read error: Connection reset by peer)
2013-09-14 00:30:02	-->	lambdanaut (~lambdanau@rrcs-70-63-94-165.midsouth.biz.rr.com) has joined #haskell
2013-09-14 00:30:08	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-14 00:30:35	<--	Thulsadum (~thul@dengon.die-welt.net) has quit (Ping timeout: 264 seconds)
2013-09-14 00:30:59	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-09-14 00:31:15	-->	makos (~makos@koln-4d0dce0b.pool.mediaWays.net) has joined #haskell
2013-09-14 00:31:22	-->	Thulsadum (~thul@dengon.die-welt.net) has joined #haskell
2013-09-14 00:31:54	<--	neto (~neto@ip4-190-173-82.adsl2.static.versatel.nl) has quit (Ping timeout: 264 seconds)
2013-09-14 00:32:36	-->	guampa (~guampa@gateway/tor-sasl/guampa) has joined #haskell
2013-09-14 00:32:53	-->	yng (~user@pool-71-183-213-222.nycmny.fios.verizon.net) has joined #haskell
2013-09-14 00:33:15	<--	bennofs (~benno@dslb-088-073-245-023.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-09-14 00:33:19	-->	ISF (~ivan@187.64.222.94) has joined #haskell
2013-09-14 00:33:31	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-14 00:33:40	<--	CatMtKing (~CatMtKing@mobilenet1-4-159-148.bulk.ucr.edu) has quit (Quit: Leaving)
2013-09-14 00:34:46	<--	gthorslund (~gthorslun@90-225-30-104-no155.bredband.skanova.com) has quit (Remote host closed the connection)
2013-09-14 00:36:42	<--	sxn (~sxn@mnch-4d047a26.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-14 00:37:05	-->	sxn (~sxn@mnch-5d87b22a.pool.mediaWays.net) has joined #haskell
2013-09-14 00:40:01	<--	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has quit (Quit: fjh)
2013-09-14 00:40:21	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Quit: cekilicy)
2013-09-14 00:40:57	<--	jchild (~textual@rrcs-50-75-181-175.nys.biz.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-14 00:41:35	-->	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has joined #haskell
2013-09-14 00:41:51	-->	schlaftier (~daniel@5.158.182.23) has joined #haskell
2013-09-14 00:42:50	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-09-14 00:43:20	--	GaelanAintAround is now known as Gaelan
2013-09-14 00:43:40	<--	sbahra (~sbahra@nol-lo0.fw.nyc2.appnexus.com) has quit (Quit: sbahra)
2013-09-14 00:43:41	<--	Doom99 (~cheezle.c@pool-96-246-149-193.nycmny.fios.verizon.net) has quit (Quit: Miranda IM! Smaller, Faster, Easier. http://miranda-im.org)
2013-09-14 00:43:45	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-14 00:43:47	<--	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has quit (Ping timeout: 260 seconds)
2013-09-14 00:43:55	<--	hiroakip (~hiroaki@37.83.118.205) has quit (Quit: Ex-Chat)
2013-09-14 00:44:35	-->	phulin (~Adium@18.224.1.208) has joined #haskell
2013-09-14 00:44:37	<--	pmade (~pmade@c-67-172-151-101.hsd1.co.comcast.net) has quit (Quit: bye.)
2013-09-14 00:45:02	-->	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has joined #haskell
2013-09-14 00:45:16	Thulsadum	Num ist not an instance of Eq?
2013-09-14 00:45:39	<--	carlosgaldino (~carlosgal@187.121.89.73) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-14 00:45:42	geekosaur	Num is a class. specific Num instances may not be instances of Eq
2013-09-14 00:45:54	<--	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has quit (Read error: No route to host)
2013-09-14 00:46:04	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-09-14 00:46:18	yng	hello, how do I get a partial applied function such as "func = (++) _ [1]"?
2013-09-14 00:46:22	geekosaur	(this allows evil things like Num instances for functions)
2013-09-14 00:46:24	Thulsadum	mh, ok
2013-09-14 00:46:30	-->	KaneTW (~kane@cl-972.dus-01.de.sixxs.net) has joined #haskell
2013-09-14 00:46:35	-->	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has joined #haskell
2013-09-14 00:46:35	<--	[elvin] (~elvin@178.128.166.105.dsl.dyn.forthnet.gr) has quit (Ping timeout: 260 seconds)
2013-09-14 00:46:41	-->	path[l]_ (~vsi@64.125.189.90) has joined #haskell
2013-09-14 00:46:43	geekosaur	yng, you can use lambda notation, or flip, or sections
2013-09-14 00:46:54	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Ping timeout: 264 seconds)
2013-09-14 00:46:54	--	path[l]_ is now known as path[l]
2013-09-14 00:47:10	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-14 00:47:13	geekosaur	(++ [1])   <-- operator section
2013-09-14 00:47:22	enthropy	Thulsadum: it used to be   class Eq a => Num a
2013-09-14 00:47:25	<--	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has quit (Quit: mikecaruso)
2013-09-14 00:47:30	-->	dgpratt (~dpratt71@pool-72-65-111-196.ptldme.east.myfairpoint.net) has joined #haskell
2013-09-14 00:47:32	yng	ty I will check it out
2013-09-14 00:47:37	Thulsadum	make sense for floating point numbers, i guess that's why, an instance of Num is not automaticly an instance of Eq
2013-09-14 00:47:47	geekosaur	sadly floats are still Eq
2013-09-14 00:47:47	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Read error: Connection reset by peer)
2013-09-14 00:47:50	<--	phulin (~Adium@18.224.1.208) has quit (Client Quit)
2013-09-14 00:47:54	<--	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has quit (Quit: WeeChat 0.4.1)
2013-09-14 00:48:01	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-09-14 00:48:06	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-09-14 00:48:12	-->	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has joined #haskell
2013-09-14 00:48:18	FreeFull	Nums also used to be Show
2013-09-14 00:48:24	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-14 00:48:38	ReinH	geekosaur: "evil" :p
2013-09-14 00:48:41	-->	mikecaruso (~Thunderbi@209-6-145-43.c3-0.bkl-ubr1.sbo-bkl.ma.cable.rcn.com) has joined #haskell
2013-09-14 00:49:04	FreeFull	What is evil is this:
2013-09-14 00:49:06	-->	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has joined #haskell
2013-09-14 00:49:08	FreeFull	> (1/0) == (1/0)
2013-09-14 00:49:08	geekosaur	eeeeeeeeeebil :p
2013-09-14 00:49:09	lambdabot	  True
2013-09-14 00:49:20	FreeFull	> (0/0) == (0/0)
2013-09-14 00:49:21	lambdabot	  False
2013-09-14 00:49:26	ReinH	yng: it would generally be more efficient to cons onto the front of the array (1:) than concat onto the end (++ [1])
2013-09-14 00:49:41	chrisdone	hehe, ocaml guys
2013-09-14 00:49:46	ReinH	yng: so it might make more sense to build your array in reverse using (:) and then reverse once at the end
2013-09-14 00:50:06	<--	NemesisD (~michael@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Quit: WeeChat 0.4.1)
2013-09-14 00:50:19	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-09-14 00:50:29	chrisdone	"can ocaml do shared memory parallelism?" "no, but we tend not to do that anyway, it's bad"
2013-09-14 00:50:42	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-14 00:50:50	<--	mirsal (~mirsal@videolan/developer/Mirsal) has quit (Ping timeout: 245 seconds)
2013-09-14 00:51:20	chrisdone	it's sort of like
2013-09-14 00:51:38	chrisdone	"can haskell update functions in-place in ghci while running?" "no, but we tend not to do that anyway, it's bad"
2013-09-14 00:51:44	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Ping timeout: 256 seconds)
2013-09-14 00:52:02	<--	Kelet (~Kelet@unaffiliated/kelet) has quit (Quit: Leaving)
2013-09-14 00:52:16	-->	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-14 00:52:24	ijp	if we can do it, it's good. if we can't, it's bad.
2013-09-14 00:52:41	enthropy	there's plenty of bad stuff you can do
2013-09-14 00:52:47	luite	chrisdone: it kind of can replace code at runtime now though, simonm was talking about loading new libs and unloading the old ones without restarting
2013-09-14 00:52:59	luite	chrisdone: used at facebook, and patches already in HEAD
2013-09-14 00:53:09	hpc	@hackage acme-php -- bad things you can do
2013-09-14 00:53:09	lambdabot	http://hackage.haskell.org/package/acme-php -- bad things you can do
2013-09-14 00:53:36	<--	tefter (~tefter@87.250.40.232) has quit (Read error: Operation timed out)
2013-09-14 00:53:36	chrisdone	ijp: pretty much
2013-09-14 00:53:37	geekosaur	updated with more evil just today!
2013-09-14 00:53:56	hpc	slightly less evil, really
2013-09-14 00:54:00	hpc	i made sortBy work
2013-09-14 00:54:01	-->	tefter (~tefter@87.250.40.232) has joined #haskell
2013-09-14 00:54:05	chrisdone	luite: hmm, that seems like a totally different thing?
2013-09-14 00:54:22	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Remote host closed the connection)
2013-09-14 00:54:22	hpc	it previously failed to terminate on sorted lists, and returned unsorted lists as if it were id
2013-09-14 00:54:44	joe9	joelteon: what would the type for Test be? just Test? I mean runReaderT on all Assertions?
2013-09-14 00:54:52	chrisdone	luite: you mean i can update a loaded library in ghci, :reload my module and start using the new library version?
2013-09-14 00:54:53	luite	chrisdone: oh perhaps, i just thought it was cool that that worked. you meant like erlang?
2013-09-14 00:55:00	hpc	i fixed it with unsafeCoerce
2013-09-14 00:55:33	 *	geekosaur feels like that's a punch line
2013-09-14 00:55:33	chrisdone	luite: sure. erlang, or smalltalk/lisp for a more ancient example
2013-09-14 00:55:34	ReinH	ijp: No true Haskeller.
2013-09-14 00:55:36	luite	chrisdone: no compile new code to a dynamic lib, load it at runtime, and unload the old one automaticlly when no code refers to it anymore
2013-09-14 00:55:42	quchen	hpc: You can't just change core functionality like that, at least provide a compatibility module
2013-09-14 00:55:55	<--	AnalogFile (974239d2@gateway/web/freenode/ip.151.66.57.210) has quit (Ping timeout: 250 seconds)
2013-09-14 00:56:08	hpc	quchen: nah, just stay on 0.0.2
2013-09-14 00:56:16	<--	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 256 seconds)
2013-09-14 00:56:23	ReinH	chrisdone: except that GHC hot code loading is a thing now right? :)
2013-09-14 00:56:23	hpc	and then backport security fixes
2013-09-14 00:56:36	hpc	what could possibly go wrong!
2013-09-14 00:56:38	<--	SingingBoyo (~brandon@dhcp-128-189-205-141.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 240 seconds)
2013-09-14 00:57:04	ijp	ReinH: no true scotsman would make a no true scotsman argument
2013-09-14 00:57:06	chrisdone	luite: the simple example is, i run this in ghci: forkIO $ forever $ go  and then i tell ghci: let go = print "yo" to update 'go' and the loop now prints "yo"
2013-09-14 00:57:09	ijp	irony aside
2013-09-14 00:57:40	chrisdone	luite: can you do that with the loading/unloading business?
2013-09-14 00:57:47	donri	chrisdone: not ghci but you can achieve something similar with "plugins"
2013-09-14 00:58:01	chrisdone	donri: plugins, don't make me laugh.  have you ever tried it?
2013-09-14 00:58:05	donri	hm or maybe not
2013-09-14 00:58:12	donri	yeah it's rather crude
2013-09-14 00:58:20	donri	plus it wouldn't do your example, i realized
2013-09-14 00:58:33	donri	you'd have to restart that thread
2013-09-14 00:58:53	luite	chrisdone: hm, i'm not quite sure, i think there's still some explicit connection to the lib, not seamless replacement, but i don't really know for sure
2013-09-14 00:59:00	chrisdone	i don't know why ghc HQ never cared about this, i thought all the original haskellers were lispers, but it just seems it didn't matter much to anyone
2013-09-14 00:59:12	FreeFull	I tried   forkIO $ forever $ return ()   and it hung ghci
2013-09-14 00:59:26	chrisdone	FreeFull: lol. why did you try it?
2013-09-14 00:59:33	chrisdone	"i wonder what this'll do" =p
2013-09-14 00:59:55	donri	guys i tried rm -rf /  but it's just sitting there doing nothing
2013-09-14 01:00:05	chrisdone	system "sudo killall X & xeyes"
2013-09-14 01:00:09	ReinH	donri: just give it time
2013-09-14 01:00:20	FreeFull	chrisdone: Updating go shouldn't change anything that depended on the previous go
2013-09-14 01:00:21	donri	ReinH: ok thanks good advice
2013-09-14 01:00:22	FreeFull	Because of how Haskell's semantics work
2013-09-14 01:00:31	chrisdone	FreeFull: i disagree
2013-09-14 01:00:45	chrisdone	introducing a _new_ binding to go shouldn't change any previous uses of it
2013-09-14 01:00:53	chrisdone	but _updating_ that go should change _that_ go
2013-09-14 01:01:09	FreeFull	You're not updating the go though
2013-09-14 01:01:18	<--	nooodl (~nooodl@127.180-241-81.adsl-dyn.isp.belgacom.be) has quit (Ping timeout: 264 seconds)
2013-09-14 01:01:20	chrisdone	not presently, that's kinda the point of the discussion
2013-09-14 01:01:25	chrisdone	i want an update facility
2013-09-14 01:01:26	Saizan	FreeFull: chrisdone is asking for a new feature in ghci
2013-09-14 01:01:28	FreeFull	You're making a new binding that happens to have the same name
2013-09-14 01:01:30	<--	sunfun (~sunfun@2.237.168.123) has quit (Quit: "see you")
2013-09-14 01:01:43	FreeFull	Which isn't something that makes sense in the IO monad
2013-09-14 01:02:04	FreeFull	You basically want an implicit IORef?
2013-09-14 01:02:05	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-14 01:02:11	chrisdone	i looked at ghci's source and it scared me, so i haven't started work on it yet =p
2013-09-14 01:02:30	<--	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has quit (Quit: Computer has gone to sleep.)
2013-09-14 01:02:32	Saizan	he wants to mess with ghci's implicit environment :)
2013-09-14 01:02:48	FreeFull	I'm pretty sure changing ghci to do that would break things for people, including their mental models
2013-09-14 01:03:15	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-09-14 01:03:16	-->	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has joined #haskell
2013-09-14 01:03:54	-->	solution (solution@144.76.77.158) has joined #haskell
2013-09-14 01:04:07	<--	BeardedCoder (~user@of1-nat2.aus1.rackspace.com) has quit (Ping timeout: 264 seconds)
2013-09-14 01:04:49	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-09-14 01:05:31	chrisdone	FreeFull: think of it like stopping your program, re-defining that function, re-running it from scratch and continuing from where you were at. there's nothing weird about that. now just imagine you can do that in one operation
2013-09-14 01:05:45	-->	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-14 01:05:47	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-09-14 01:06:03	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-14 01:06:26	chrisdone	or actually just like everything is in an IORef. which _might_ be a cheeky way to achieve it in ghci
2013-09-14 01:06:38	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 240 seconds)
2013-09-14 01:06:44	FreeFull	chrisdone: Just don't get into problems with sharing and laziness
2013-09-14 01:06:52	<--	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has quit (Quit: WeeChat 0.4.1)
2013-09-14 01:07:09	-->	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has joined #haskell
2013-09-14 01:07:30	Saizan	chrisdone: well, you won't get the same result by just updating go, it won't change the result of past uses
2013-09-14 01:07:47	Saizan	unless they are still thunks :)
2013-09-14 01:07:48	chrisdone	Saizan: sure
2013-09-14 01:08:09	<--	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has quit (Read error: Connection reset by peer)
2013-09-14 01:08:14	-->	sunfun (~sunfun@networks.skibx.com) has joined #haskell
2013-09-14 01:08:21	Saizan	so it ends up being quite weirder then what you described
2013-09-14 01:08:43	<--	milessabin (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 246 seconds)
2013-09-14 01:08:54	Saizan	but i guess people have found its uses
2013-09-14 01:08:57	chrisdone	on a scale of 1 to 11 how weird would you characterize it?
2013-09-14 01:09:03	 *	chrisdone holds mic to Saizan
2013-09-14 01:09:27	<--	merijn (~merijn@cpc8-sgyl32-2-0-cust1015.18-2.cable.virginmedia.com) has quit (Ping timeout: 260 seconds)
2013-09-14 01:09:33	-->	f8l (~f8l@87-205-67-129.adsl.inetia.pl) has joined #haskell
2013-09-14 01:09:35	Saizan	dunno, call/cc in pure code weird?
2013-09-14 01:10:08	chrisdone	Saizan: i came up with (along with mgsloan) one idea of transforming all declarations of IO actions into IORef'd wrappers that would lookup that value every time they ran
2013-09-14 01:10:18	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Ping timeout: 264 seconds)
2013-09-14 01:10:36	<--	Bryan792 (~bryan@c-24-23-223-91.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-14 01:11:15	chrisdone	so let go = print "yo", would become, let go = unsafePerformIO $ do r <- newIORef (print "yo"); return (join (readIORef r))
2013-09-14 01:11:15	Saizan	yeah, that'd be just "global IORef" weird
2013-09-14 01:11:48	Saizan	*nod*
2013-09-14 01:11:59	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-14 01:12:14	<--	ghorn__ (~ghorn@94-225-161-158.access.telenet.be) has quit (Ping timeout: 240 seconds)
2013-09-14 01:12:21	-->	ericmoritz` (~eric@pool-96-255-37-182.washdc.fios.verizon.net) has joined #haskell
2013-09-14 01:12:24	chrisdone	ah, not quite right, missing:
2013-09-14 01:12:35	-->	fridim__ (~fridim@bas2-montreal07-2925317559.dsl.bell.ca) has joined #haskell
2013-09-14 01:12:44	chrisdone	let (go,go_ref) = unsafePerformIO $ do r <- newIORef (print "yo"); return (join (readIORef r),r)
2013-09-14 01:12:45	-->	Moogle_ (~chatzilla@S01061859333fe9b7.wp.shawcable.net) has joined #haskell
2013-09-14 01:12:48	-->	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-09-14 01:13:12	chrisdone	(but go_ref would be some generated/non-conflicting name)
2013-09-14 01:13:22	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 01:13:23	-->	wfaler (~Android@176.251.115.21) has joined #haskell
2013-09-14 01:14:42	chrisdone	i can't remember what the down-sides were. hmph
2013-09-14 01:15:00	enthropy	it's not implemented yet?
2013-09-14 01:15:29	enthropy	/and it doesn't seem like you could fake it with built-in stuff (quasiquotes for example)
2013-09-14 01:15:37	luite	chrisdone: you could walk the heap, replace closure headers with the new version
2013-09-14 01:15:44	luite	hm
2013-09-14 01:15:46	Saizan	but if you are at the ghci prompt can't you just make a combinator for that?
2013-09-14 01:16:00	luite	chrisdone is quite good at things that i have to implement in ghcjs :(
2013-09-14 01:16:06	luite	+suggesting things
2013-09-14 01:16:56	Saizan	well, you'd have to keep go_ref around, but that's not so much of a pain
2013-09-14 01:17:11	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-14 01:17:16	elliott	did anyone figure out how to reliably re-thunk evaluated stuff?
2013-09-14 01:17:23	elliott	that's something that would be useful for things like this
2013-09-14 01:18:01	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:1507:b460:b9c5:d4ad:c45b:d01e) has quit (Remote host closed the connection)
2013-09-14 01:18:02	<--	cekilicy (~cekilicy@gateway/tor-sasl/cekilicy) has quit (Remote host closed the connection)
2013-09-14 01:19:21	-->	Kelet (~Kelet@unaffiliated/kelet) has joined #haskell
2013-09-14 01:19:26	<--	edon (~user@albalug/edon) has quit (Ping timeout: 264 seconds)
2013-09-14 01:19:38	enthropy	elliott: like what?
2013-09-14 01:19:41	FreeFull	elliott: Would something like ((\() -> x) ())   work?
2013-09-14 01:20:16	FreeFull	I don't think it would
2013-09-14 01:20:17	luite	elliott: hm, that sounds kind of impossible to do in a practical way, you'd have to track dependencies for everything
2013-09-14 01:20:31	<--	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has quit (Read error: Connection reset by peer)
2013-09-14 01:20:33	elliott	well, it's kind of vague.
2013-09-14 01:20:43	elliott	I think rwbarton did something like that for a Map that was stored on disk and automatically swapped out unused parts after a while?
2013-09-14 01:20:46	luite	but it seems like a good challenge :)
2013-09-14 01:20:51	elliott	and used unsafePerformIO to load them back again
2013-09-14 01:20:54	-->	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2013-09-14 01:20:54	elliott	horrific but cute
2013-09-14 01:20:56	FreeFull	You just need to thunk the constructors
2013-09-14 01:21:00	luite	hehe
2013-09-14 01:21:03	chrisdone	Saizan: sure, a combinator would help define it. personally, i'd like to load in X.hs into ghci with this applied to all top-level IO forms, e.g. from emacs, and then i go to one of the forms, edit the code, hit C-M-x (which is what i do in lisp) and it updates the function by writing the ioref
2013-09-14 01:21:04	-->	jrib (~jrib@upstream/dev/jrib) has joined #haskell
2013-09-14 01:21:05	ion	rethunk ¡x = x
2013-09-14 01:21:13	chrisdone	elliott: that's pretty cool
2013-09-14 01:21:16	-->	Jesin (~Jessin_@dhcp123-203.eecs.lehigh.edu) has joined #haskell
2013-09-14 01:21:19	ericmoritz`	what is the common practice in distributing private packages?
2013-09-14 01:21:25	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-09-14 01:21:42	-->	predator117 (~predator1@p50802CB6.dip0.t-ipconnect.de) has joined #haskell
2013-09-14 01:21:44	chrisdone	ericmoritz`: i've seen a bunch of haskell companies using their own hackage server
2013-09-14 01:22:10	chrisdone	ericmoritz`: or do you just mean like sending a haskell package to your dad by email?
2013-09-14 01:22:16	danilo2_	Hi! I've go ont small question to you :) Is it possible in Haskell to write an instance of show for empty untyped list? I would love this code: "let a = []; print a" to ouptut "[]". I need this to my domain language (so this would be not used in "production Haskell code")
2013-09-14 01:22:34	enthropy	ericmoritz`:  like seereason.com make debian packages I think
2013-09-14 01:22:38	enthropy	ones like
2013-09-14 01:23:43	enthropy	danilo2_: maybe you can turn on -XExtendedDefaultRules and have ghc decide that a :: [()]
2013-09-14 01:24:11	enthropy	which will print what you're asking for
2013-09-14 01:24:13	FreeFull	> show ([] :: String)
2013-09-14 01:24:14	lambdabot	  "\"\""
2013-09-14 01:24:42	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-09-14 01:24:45	danilo2_	enthropy: I think this is exactly what I was looking for
2013-09-14 01:24:50	danilo2_	enthropy: thank you! :)
2013-09-14 01:24:55	-->	mrotondo (~mrotondo@50-0-18-170.dsl.static.sonic.net) has joined #haskell
2013-09-14 01:24:58	ericmoritz`	 chrisdone: in the a company sense.  We have a number of sites that would use the same packages that I would like to include when building them
2013-09-14 01:24:59	<--	fjh (~fjh@brln-4d0cc2e7.pool.mediaWays.net) has quit (Quit: fjh)
2013-09-14 01:25:11	<--	Targen_ (~iguana@190.38.156.156) has quit (Ping timeout: 260 seconds)
2013-09-14 01:25:13	chrisdone	Saizan: after all, without having everything else in the module reeferring to that IORef'd version, the live update is useless
2013-09-14 01:25:19	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-09-14 01:25:26	<--	makos (~makos@koln-4d0dce0b.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-09-14 01:25:26	<--	predator217 (~predator1@p50803E08.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-14 01:25:33	<--	lcfrs_ (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-09-14 01:26:03	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-14 01:26:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-09-14 01:26:37	Saizan	chrisdone: yeah, i was naively hoping you'd be appeased with this working only for definitions at the prompt :)
2013-09-14 01:27:01	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-09-14 01:27:19	chrisdone	Saizan: hehe
2013-09-14 01:27:34	-->	jmcarthur_mobile (~jmcarthur@2607:fb90:1507:b460:b9c5:d4ad:c45b:d01e) has joined #haskell
2013-09-14 01:27:34	enthropy	chrisdone: you could have {-# OPTIONS_GHC -F -pgmF somethingYouNeedToWrite #-} that'll do your unsafePerformIO etc.
2013-09-14 01:28:06	chrisdone	indeed
2013-09-14 01:28:21	chrisdone	i wonder, can that be turned on in ghci globally? the pgmf stuff?
2013-09-14 01:28:23	enthropy	there are still some details to be filled in though
2013-09-14 01:28:25	<--	bos (~bos@facebook/mercurial/bos) has quit (Read error: Operation timed out)
2013-09-14 01:28:31	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-14 01:28:36	--	ericmoritz is now known as Guest22141
2013-09-14 01:28:36	chrisdone	like "i'm hacking now, use my preprocessor"
2013-09-14 01:28:58	chrisdone	enthropy: what details?
2013-09-14 01:29:28	enthropy	well sending your updated function to ghc can't use :reload
2013-09-14 01:29:35	-->	path[l]_ (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-14 01:29:42	chrisdone	ah, sure, i'd use emacs to do that
2013-09-14 01:29:44	enthropy	since that wipes out things you've done before
2013-09-14 01:30:08	chrisdone	just send e.g. modifyIORef go_ref $ <new go definition>
2013-09-14 01:30:16	--	ericmoritz` is now known as ericmoritz\0
2013-09-14 01:30:20	FreeFull	This would work so much easier in a strict language
2013-09-14 01:30:37	FreeFull	{-# LANGUAGE StrictHaskell #-}
2013-09-14 01:30:50	<--	path[l] (~vsi@64.125.189.90) has quit (Ping timeout: 264 seconds)
2013-09-14 01:30:50	--	path[l]_ is now known as path[l]
2013-09-14 01:31:01	elliott	chrisdone: maybe write a ghc plugin
2013-09-14 01:31:37	<--	donri (~donri@unaffiliated/dagodenhall) has quit (Remote host closed the connection)
2013-09-14 01:31:38	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-09-14 01:32:11	chrisdone	elliott: as a core-to-core transformation?
2013-09-14 01:32:36	chrisdone	hmm =)
2013-09-14 01:33:07	-->	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has joined #haskell
2013-09-14 01:33:25	jmcarthur_mobile	FreeFull: what would be easier in a strict language?
2013-09-14 01:33:33	<--	jobstijl0 (~job@5070A080.static.ziggozakelijk.nl) has quit (Remote host closed the connection)
2013-09-14 01:33:41	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-09-14 01:33:46	elliott	chrisdone: wrap every IO action in that mess! and then let you use a structural editor to edit arbitrary subexpressions and reload seamlessly
2013-09-14 01:33:51	elliott	kittens!
2013-09-14 01:34:39	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-09-14 01:34:41	 *	chrisdone reads the compiler plugins manual entry
2013-09-14 01:35:02	chrisdone	holy beans this looks well easy
2013-09-14 01:35:44	elliott	there's an example plugin on hackage that makes the language strict, that might be good to look at for reference and stuff
2013-09-14 01:35:53	<--	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-14 01:36:32	-->	dolio (~dolio@c-174-63-84-118.hsd1.ma.comcast.net) has joined #haskell
2013-09-14 01:36:34	<--	artyomkazak (~artyomkaz@host-116-158-66-217.spbmts.ru) has quit (Ping timeout: 256 seconds)
2013-09-14 01:37:09	-->	mikeit (~mikeit@net-93-65-150-84.cust.dsl.vodafone.it) has joined #haskell
2013-09-14 01:37:10	-->	Wuzzy2 (~Wuzzy@p549F931A.dip0.t-ipconnect.de) has joined #haskell
2013-09-14 01:38:32	chrisdone	happily, i'm already familiar with core. so from this docs http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/compiler-plugins.html i can see how to write it
2013-09-14 01:38:52	benmachine	chrisdone: not that this is helpful to you, but your idea terrifies me
2013-09-14 01:39:01	chrisdone	lol
2013-09-14 01:39:12	-->	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has joined #haskell
2013-09-14 01:39:15	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 01:39:20	-->	justinleitgeb (~justinlei@186.4.224.10) has joined #haskell
2013-09-14 01:39:31	<--	tauli (~tauli@e182221028.adsl.alicedsl.de) has quit (Quit: tauli)
2013-09-14 01:39:56	<--	ijp (~user@host86-141-181-235.range86-141.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-09-14 01:40:25	<--	Wuzzy (~Wuzzy@p549F9D68.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-14 01:40:36	-->	w0rm_x (~dd@176.16.61.18) has joined #haskell
2013-09-14 01:41:05	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Remote host closed the connection)
2013-09-14 01:41:17	chrisdone	hm, yeah. i can use modguts to get all the top-level decls, use the core to check the type is an IO action
2013-09-14 01:41:20	 *	chrisdone fiddles
2013-09-14 01:41:23	-->	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 01:41:37	benmachine	chrisdone: it does seem like the semantics are a bit hairy, like, you seem to need to have a consistent idea of what it means to "restart" something and how much you actually need to restart
2013-09-14 01:43:05	chrisdone	me and sloan couldn't think of a way to do updates for pure values in a consistent way
2013-09-14 01:43:07	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-09-14 01:43:26	<--	kmels (~kmels@168.234.49.90) has quit (Read error: Connection reset by peer)
2013-09-14 01:43:36	chrisdone	but IO values are easy!
2013-09-14 01:43:42	<--	coltfred (~coltfred@rnt88-pat-126.rightnow.com) has quit (Ping timeout: 264 seconds)
2013-09-14 01:44:04	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-14 01:44:12	elliott	chrisdone: I do think this kind of thing is going to be inherently a hack with Haskell.
2013-09-14 01:44:18	-->	kmels (~kmels@168.234.49.90) has joined #haskell
2013-09-14 01:44:18	<--	justinleitgeb (~justinlei@186.4.224.10) has quit (Ping timeout: 264 seconds)
2013-09-14 01:44:19	elliott	you want to design your language holistically around this kind of hot-swapping goal
2013-09-14 01:44:32	chrisdone	elliott: even for just IO?
2013-09-14 01:44:33	<--	walter (~walter@c-98-216-15-111.hsd1.ma.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-14 01:44:39	elliott	well, less so.
2013-09-14 01:44:42	elliott	but it's still kinda hairy :)
2013-09-14 01:44:52	elliott	if you restrict yourself to top-level definitions then I guess it's not so bad.
2013-09-14 01:44:55	elliott	(except inlining?)
2013-09-14 01:44:55	chrisdone	hmm with IO it seems equivalent to using IORefs manually fo reverything
2013-09-14 01:45:01	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-09-14 01:45:03	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Quit: dissipate__)
2013-09-14 01:45:19	chrisdone	true. probably unsafePerformIO complicates matters
2013-09-14 01:46:09	benmachine	I wondered about inlining but it's not a problem with the just-redefine-everything interpretation
2013-09-14 01:46:12	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-09-14 01:46:13	chrisdone	though ghci doesn't aggressively inline
2013-09-14 01:46:17	benmachine	at least conceptually
2013-09-14 01:47:11	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-09-14 01:47:24	benmachine	but I'm going to stop talking about this because I'm not the target audience nor terribly well-placed to help :P
2013-09-14 01:47:54	<--	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 256 seconds)
2013-09-14 01:48:52	-->	teburt (889f07cf@gateway/web/freenode/ip.136.159.7.207) has joined #haskell
2013-09-14 01:49:16	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-14 01:49:34	<--	hexagoxel (~hexagoxel@kiel-4d066e94.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-09-14 01:49:39	-->	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has joined #haskell
2013-09-14 01:49:46	teburt	looking for help with ghc-iphone cross compiler, but haskell-iphone is empty
2013-09-14 01:49:54	-->	johntromp (~johntromp@ool-18be0ed6.dyn.optonline.net) has joined #haskell
2013-09-14 01:50:01	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-09-14 01:50:31	<--	H1FuelCell (~quassel@103.248.87.162) has quit (Read error: Operation timed out)
2013-09-14 01:50:34	sclv	teburt: feel free to ask here but i imagine that email to the authors would probably be better
2013-09-14 01:50:39	sclv	its a small group of ppl familiar with that stuff
2013-09-14 01:50:51	<--	Ralith (~ralith@66.114.129.162) has quit (Ping timeout: 260 seconds)
2013-09-14 01:51:12	-->	copumpkin (~copumpkin@unaffiliated/copumpkin) has joined #haskell
2013-09-14 01:51:29	copumpkin	has anyone ever wished they had something like a replicateM that took a Kleisli arrow?
2013-09-14 01:51:48	copumpkin	something like foldr (>=>) return $ replicate n f
2013-09-14 01:52:18	--	sunfun is now known as atticus
2013-09-14 01:52:22	benmachine	copumpkin: I've definitely used foldr (<=<) return before
2013-09-14 01:52:26	benmachine	don't think with replicate
2013-09-14 01:52:28	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-14 01:52:47	-->	ThatOtherPerson_ (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2013-09-14 01:52:50	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Quit: Leaving)
2013-09-14 01:53:37	copumpkin	hmm, maybe I'm thinking of it wrong
2013-09-14 01:54:59	chrisdone	:t \n f -> foldr (>=>) return $ replicate n f
2013-09-14 01:55:00	lambdabot	Monad m => Int -> (c -> m c) -> c -> m c
2013-09-14 01:55:29	copumpkin	that might not be quite what I'm after either
2013-09-14 01:55:31	 *	copumpkin thinks harder
2013-09-14 01:55:53	--	atticus is now known as sunfun
2013-09-14 01:56:04	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-14 01:56:27	<--	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has quit (Ping timeout: 260 seconds)
2013-09-14 01:56:46	-->	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2013-09-14 01:56:47	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-09-14 01:57:14	chrisdone	yay, my ghc plugin says ‘Hello!’
2013-09-14 01:57:22	benmachine	:D
2013-09-14 01:57:28	<--	ThatOtherPerson_ (~ThatOther@unaffiliated/thatotherpersony) has quit (Ping timeout: 256 seconds)
2013-09-14 01:57:31	benmachine	no further work necessary
2013-09-14 01:57:43	chrisdone	job done. pack everything up lads
2013-09-14 01:58:27	<--	phst` (~user@ppp-46-244-163-240.dynamic.mnet-online.de) has quit (Ping timeout: 260 seconds)
2013-09-14 01:59:48	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Read error: Operation timed out)
2013-09-14 01:59:57	<--	noteventime (~user@nl104-214-213.student.uu.se) has quit (Remote host closed the connection)
2013-09-14 02:00:06	<--	tjohnson (~tjohnson@8-16.ptpg.oregonstate.edu) has quit (Ping timeout: 264 seconds)
2013-09-14 02:00:20	-->	rogovski (~user@c-71-233-213-41.hsd1.ct.comcast.net) has joined #haskell
2013-09-14 02:00:43	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-09-14 02:00:47	<--	jamestastic (~james@50-196-189-141-static.hfc.comcastbusiness.net) has quit (Quit: jamestastic)
2013-09-14 02:00:56	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-09-14 02:01:11	<--	jaspervdj (~jaspervdj@jaspervdj.be) has quit (Read error: Operation timed out)
2013-09-14 02:01:28	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (Read error: Connection reset by peer)
2013-09-14 02:02:29	chrisdone	phew
2013-09-14 02:02:34	<--	ktosiek (~ktosiek@46.22.173.54) has quit (Ping timeout: 256 seconds)
2013-09-14 02:02:51	chrisdone	running it with ghc inlines too much, but in ghci i get a top-level go definition
2013-09-14 02:03:18	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit
2013-09-14 02:03:23	chrisdone	like this http://lpaste.net/8375821732035952640
2013-09-14 02:04:00	joe9	is there a better way of writing this: http://codepad.org/YL4R6eJw
2013-09-14 02:04:06	<--	RThinker (~yegor@77.47.204.159) has quit (Ping timeout: 264 seconds)
2013-09-14 02:04:07	-->	foxnorth (~chriscata@ool-44c705f3.dyn.optonline.net) has joined #haskell
2013-09-14 02:04:22	joe9	i think the checkBit functions can be put in a sequence or something like that.
2013-09-14 02:04:28	joe9	without the need for the \status.
2013-09-14 02:04:35	chrisdone	>=> could do the trick
2013-09-14 02:04:35	joe9	but, I cannot figure it out.
2013-09-14 02:04:43	<--	schlaftier (~daniel@5.158.182.23) has quit (Ping timeout: 264 seconds)
2013-09-14 02:04:43	<--	MoALTz (~no@host86-142-125-80.range86-142.btcentralplus.com) has quit (Ping timeout: 246 seconds)
2013-09-14 02:04:45	joe9	chrisdone: thanks.
2013-09-14 02:05:27	chrisdone	or, yeah, mapM_ ($ status) [checkbit …, checkbit …, …]
2013-09-14 02:05:28	chrisdone	something like that
2013-09-14 02:05:31	-->	jaspervdj (~jaspervdj@jaspervdj.be) has joined #haskell
2013-09-14 02:05:49	chrisdone	ah, point-free
2013-09-14 02:06:07	-->	ktosiek (~ktosiek@46.22.173.54) has joined #haskell
2013-09-14 02:06:23	chrisdone	forM_ [checkbit …, checkbit …] . ($) but maybe that's too fancy
2013-09-14 02:06:37	-->	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has joined #haskell
2013-09-14 02:06:54	elliott	flip ($) surely
2013-09-14 02:07:06	joe9	chrisdone:  thanks. let me put it together. the forM is too fancy for me.
2013-09-14 02:07:08	chrisdone	yeah
2013-09-14 02:07:11	joe9	I would not understand it later.
2013-09-14 02:07:12	chrisdone	hm unless checkBit returns a useful value at the end, in which case probably >=> is best
2013-09-14 02:07:30	rogovski	:t surely
2013-09-14 02:07:30	lambdabot	Not in scope: `surely'
2013-09-14 02:07:33	joe9	 checkbit: http://codepad.org/Ra0Okc5K
2013-09-14 02:07:35	chrisdone	elliott: so fancy i got it wrong =p
2013-09-14 02:07:42	chrisdone	rogovski: don't call me surely
2013-09-14 02:07:45	elliott	you have a weird way of spelling ugly
2013-09-14 02:08:20	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-14 02:09:05	chrisdone	elliott: no u
2013-09-14 02:09:05	<--	Rutger` (~devbin@nelisvanaalst.demon.nl) has quit (Read error: Connection reset by peer)
2013-09-14 02:09:29	rogovski	sorry. im a bit tense. i almost hung myself today trying to decipher the scalaz documentation
2013-09-14 02:10:11	<--	tefter (~tefter@87.250.40.232) has quit (Quit: Leaving)
2013-09-14 02:10:20	chrisdone	what's that?
2013-09-14 02:10:38	<--	jmcarthur_mobile (~jmcarthur@2607:fb90:1507:b460:b9c5:d4ad:c45b:d01e) has quit (Ping timeout: 240 seconds)
2013-09-14 02:10:48	joe9	chrisdone: http://codepad.org/jSG0v8zo I could not figure out how to fit the >=> with the mapM_
2013-09-14 02:10:52	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-14 02:10:55	<--	wolfnn (~wolfnn@AMontsouris-651-1-198-125.w83-202.abo.wanadoo.fr) has quit (Quit: Leaving.)
2013-09-14 02:11:04	-->	wolfnn (~wolfnn@AMontsouris-651-1-198-125.w83-202.abo.wanadoo.fr) has joined #haskell
2013-09-14 02:11:38	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-09-14 02:11:57	joe9	does not work: http://codepad.org/8cMsJqgE
2013-09-14 02:12:03	-->	rgr (~user@5.159.229.17) has joined #haskell
2013-09-14 02:12:03	 *	hackagebot cookbook 0.1.3.1 - An independent library of common haskell operations.  http://hackage.haskell.org/package/cookbook-0.1.3.1 (NatePisarski)
2013-09-14 02:12:05	<--	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-14 02:12:13	chrisdone	joe9: ah, i meant either: >>= (checkBit … >=> checkBit … >=> checkBit …) or >>= (\status -> mapM ($ status)  [ … ])
2013-09-14 02:12:16	-->	jmcarthur_mobile (~jmcarthur@pool-98-113-42-84.nycmny.fios.verizon.net) has joined #haskell
2013-09-14 02:12:30	-->	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-09-14 02:12:34	chrisdone	:t (>=>)
2013-09-14 02:12:35	lambdabot	Monad m => (a -> m b) -> (b -> m c) -> a -> m c
2013-09-14 02:13:06	joe9	chrisdone: using mapM_ , is there any way I can get rid of the \status?
2013-09-14 02:13:15	joe9	flip mapM_?
2013-09-14 02:13:17	chrisdone	ah, wait. what does checkBit return?
2013-09-14 02:13:23	chrisdone	umm
2013-09-14 02:13:29	<--	srhb (~srhb@static.101.127.47.78.clients.your-server.de) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-14 02:13:35	chrisdone	i don't think so, not without doing a bunch of flips
2013-09-14 02:14:00	<--	smith_ (smith@gateway/shell/anapnea.net/x-oszkadvxtulmvdps) has quit (Quit: leaving)
2013-09-14 02:14:09	joe9	chrisdone: ok, thanks.
2013-09-14 02:14:22	-->	Rutger` (~devbin@nelisvanaalst.demon.nl) has joined #haskell
2013-09-14 02:14:24	-->	dissipate__ (~dissipate@204.15.64.187) has joined #haskell
2013-09-14 02:14:38	<--	wolfnn (~wolfnn@AMontsouris-651-1-198-125.w83-202.abo.wanadoo.fr) has quit (Read error: Operation timed out)
2013-09-14 02:15:18	-->	davidsd (~davidsd@e204074.ext.net.ias.edu) has joined #haskell
2013-09-14 02:15:23	<--	dissipate__ (~dissipate@204.15.64.187) has quit (Client Quit)
2013-09-14 02:15:50	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 264 seconds)
2013-09-14 02:16:15	<--	zammy (~sammy@ppp-222-64.98-62.inwind.it) has quit (Remote host closed the connection)
2013-09-14 02:16:18	ellipsis	I'm trying to install pipes-network-tls and I'm getting this error when cabal tries to install network-simple-tls: http://lpaste.net/92464
2013-09-14 02:16:25	-->	a3f (~chatzilla@217.55.17.238) has joined #haskell
2013-09-14 02:16:27	ellipsis	any ideas?
2013-09-14 02:16:44	<--	cads2 (~m@adsl-74-160-80-249.asm.bellsouth.net) has quit (Remote host closed the connection)
2013-09-14 02:17:34	chrisdone	ellipsis: presumably there's a library version mismatch where the version the author of network-simple-tls used a different crypto-random (or whichever) package version to the one you're compiling with
2013-09-14 02:17:34	-->	arpunk__ (~arpunk@190.84.40.17) has joined #haskell
2013-09-14 02:17:43	a3f	Is there some wayto achieve failthrough in case statements? (like omitting the break in C)
2013-09-14 02:18:18	a3f	fallthrough*
2013-09-14 02:18:22	chrisdone	ellipsis: i'd probably check out when the package was uploaded and bisect the dependency it's failing to build with back to when it worked, and then add a constraint for that specific version
2013-09-14 02:18:42	chrisdone	ellipsis: and then maybe notify the author that their package don't build nomore with latest version of X
2013-09-14 02:19:06	<--	gabriel__ (~gabriel@r186-55-141-170.dialup.adsl.anteldata.net.uy) has quit (Ping timeout: 264 seconds)
2013-09-14 02:19:29	chrisdone	a3f: not that i'm aware of
2013-09-14 02:19:31	ellipsis	chrisdone: how do I add a constraint?
2013-09-14 02:19:43	chrisdone	ellipsis: i think it's --constraint foo==1.2.3
2013-09-14 02:19:46	<--	ormaaj (~ormaaj@71-220-70-190.mpls.qwest.net) has quit (Ping timeout: 246 seconds)
2013-09-14 02:20:06	chrisdone	cabal install --help | grep constraint
2013-09-14 02:20:19	-->	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has joined #haskell
2013-09-14 02:20:26	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-14 02:20:30	ellipsis	it's in a cabal-dev environment - can I add that to my .cabal file?
2013-09-14 02:20:36	chrisdone	sure
2013-09-14 02:20:42	<--	arpunk_ (~arpunk@190.84.40.17) has quit (Ping timeout: 256 seconds)
2013-09-14 02:20:45	chrisdone	in your build-depends
2013-09-14 02:21:02	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 240 seconds)
2013-09-14 02:21:11	chrisdone	can also pass it to cabal-dev install afaik
2013-09-14 02:21:34	ellipsis	it seems a little weird to say "I need this package at this version" when it's actually a package I need that requires that version
2013-09-14 02:21:41	ellipsis	but :/
2013-09-14 02:21:48	chrisdone	yeah, i feel ya buddy
2013-09-14 02:21:52	<--	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has quit (Ping timeout: 246 seconds)
2013-09-14 02:22:17	chrisdone	this is why people advocate adding maximum versions to dependencies
2013-09-14 02:22:18	-->	jhormuz (~jhormuz@adsl-76-254-70-233.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-09-14 02:22:31	yng	b
2013-09-14 02:22:38	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-14 02:22:40	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-09-14 02:22:42	<--	yng (~user@pool-71-183-213-222.nycmny.fios.verizon.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-14 02:22:47	-->	napping (~brandon@c-98-222-49-87.hsd1.il.comcast.net) has joined #haskell
2013-09-14 02:22:50	-->	dmj` (~user@ip-64-134-165-134.public.wayport.net) has joined #haskell
2013-09-14 02:22:51	chrisdone	haha, i knew that guy was an emacs user
2013-09-14 02:23:09	chrisdone	he typed C-x b RET but messed it up =)
2013-09-14 02:23:16	-->	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has joined #haskell
2013-09-14 02:24:06	enthropy	a3f: closest might be:   `do when (x == 1) blah; when (x == 2) blah2; ...`
2013-09-14 02:24:42	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-09-14 02:25:19	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has left #haskell
2013-09-14 02:25:47	a3f	I just tried out getOpts and i got a case tree(?) i want to process now, you need to specify a process in the arguments, you can do that via window name, class name, process id, handle .... etc.
2013-09-14 02:25:48	<--	oleo (~oleo@xdsl-78-35-162-62.netcologne.de) has quit (Ping timeout: 256 seconds)
2013-09-14 02:26:02	a3f	and there's much repetitive code I think I should be able to eliminate
2013-09-14 02:26:05	a3f	just dont know how
2013-09-14 02:26:06	-->	oleo (~oleo@xdsl-78-35-145-61.netcologne.de) has joined #haskell
2013-09-14 02:27:25	enthropy	there are alternatives to getopt that promise to work out with less code
2013-09-14 02:27:36	 *	enthropy uses cmdargs
2013-09-14 02:28:06	-->	Ralith (~ralith@c-66-235-0-97.sea.wa.customer.broadstripe.net) has joined #haskell
2013-09-14 02:28:32	enthropy	a3f: if you can paste that repetitive code maybe somebody here will see the pattern/how to eliminate it
2013-09-14 02:28:59	a3f	I am still writing it atm, it's like
2013-09-14 02:29:27	a3f	windowstitle -> HWND -> pid -> Handle
2013-09-14 02:29:35	a3f	HWND -> pid -> Handle
2013-09-14 02:29:43	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 260 seconds)
2013-09-14 02:29:53	a3f	for windowstitle and and HWND respectively
2013-09-14 02:29:59	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-14 02:30:03	<--	bitonic (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Ping timeout: 260 seconds)
2013-09-14 02:30:12	hpaste	flebron pasted “Comments on clarity, design, being idiomatic, improvements?” at http://lpaste.net/92954
2013-09-14 02:30:20	a3f	it just appeared to me in C I would just omit the break; and arrange them under each other
2013-09-14 02:30:27	-->	CaptainK (~CaptainK@181.179.39.195) has joined #haskell
2013-09-14 02:30:32	a3f	and wondered if i couldnt just do the same in Haskell
2013-09-14 02:30:50	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-09-14 02:31:18	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-09-14 02:32:12	<--	Hermit (~hermit@unaffiliated/grpala) has quit (Quit: WeeChat 0.3.8)
2013-09-14 02:32:29	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-09-14 02:32:32	<--	rogovski (~user@c-71-233-213-41.hsd1.ct.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-14 02:33:12	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-09-14 02:34:14	<--	Eduard_Munteanu (~EduardMun@188.25.244.214) has quit (Ping timeout: 240 seconds)
2013-09-14 02:35:22	<--	DolphR (~dolph@79.142.224.177.nat.router4.bolignet.dk) has quit (Quit: Leaving.)
2013-09-14 02:35:38	<--	kmels (~kmels@168.234.49.90) has quit (Read error: Operation timed out)
2013-09-14 02:35:41	<--	nimish (~nimish@raddison04.r.subnet.rcn.com) has quit (Quit: nimish)
2013-09-14 02:36:19	-->	anachrome (~lily@cumm111-0b02-acm2-dhcp136.bu.edu) has joined #haskell
2013-09-14 02:36:38	<--	danvet (~daniel@178-83-130-250.dynamic.hispeed.ch) has quit (Ping timeout: 240 seconds)
2013-09-14 02:37:31	Ghoul_	implicit variables are cool
2013-09-14 02:37:36	Ghoul_	err, parameter. things.
2013-09-14 02:37:52	Ghoul_	are there any famous real world uses?
2013-09-14 02:38:03	Thulsadum	my phone book application works :D
2013-09-14 02:38:08	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-14 02:38:22	Thulsadum	and this without states.
2013-09-14 02:39:30	<--	agjacome (~agjacome@95.62.120.94) has quit (Ping timeout: 264 seconds)
2013-09-14 02:39:40	-->	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has joined #haskell
2013-09-14 02:40:12	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-14 02:40:18	<--	refold_ (~gman@h-129-27.a258.priv.bahnhof.se) has quit (Quit: leaving)
2013-09-14 02:40:21	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Remote host closed the connection)
2013-09-14 02:41:00	-->	ekipan (4b1374c9@gateway/web/freenode/ip.75.19.116.201) has joined #haskell
2013-09-14 02:41:00	<--	dubsg (~dubsg@208.74.177.104.static.etheric.net) has quit (Remote host closed the connection)
2013-09-14 02:41:51	hpaste	DanBurton pasted “Diagonal list monad” at http://lpaste.net/92955
2013-09-14 02:42:00	DanBurton	Hey all, is this the right "diagonal list monad"? ^
2013-09-14 02:42:19	<--	quchen (~quchen@p54AA4BCE.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-09-14 02:42:38	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 02:42:39	-->	gabriel__ (~gabriel@r186-55-141-170.dialup.adsl.anteldata.net.uy) has joined #haskell
2013-09-14 02:42:47	elliott	there is no ZipList monad
2013-09-14 02:42:59	elliott	therefore, find the law you violated :)
2013-09-14 02:43:11	dmj`	@typ flip concatMap
2013-09-14 02:43:12	lambdabot	[a] -> (a -> [b]) -> [b]
2013-09-14 02:43:12	DanBurton	>,<
2013-09-14 02:43:28	elliott	the problem is that the lists aren't required to be the same size
2013-09-14 02:43:33	elliott	(if they were, it would be iso to Reader)
2013-09-14 02:44:07	<--	teburt (889f07cf@gateway/web/freenode/ip.136.159.7.207) has quit (Quit: Page closed)
2013-09-14 02:44:18	DanBurton	suppose that instead of List, it were "Vect n" for some n. ooohhh I know what to do...
2013-09-14 02:44:30	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 264 seconds)
2013-09-14 02:44:43	pavonia	What is a diagonal list, btw?
2013-09-14 02:45:07	elliott	then it is iso to reader
2013-09-14 02:45:12	elliott	(Fin n ->)
2013-09-14 02:45:20	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-14 02:45:35	DanBurton	pavonia: it's not the list that's diagonal, it's the monad instance that I'm trying to write
2013-09-14 02:45:49	DanBurton	where "join" selects the diagonal of a matrix [[a]] -> [a]
2013-09-14 02:46:15	pavonia	Ah
2013-09-14 02:46:21	jmcarthur	yeah there is indeed a problem with this idea :)
2013-09-14 02:46:46	<--	anachrome (~lily@cumm111-0b02-acm2-dhcp136.bu.edu) has quit (Ping timeout: 256 seconds)
2013-09-14 02:46:51	<--	Ralith (~ralith@c-66-235-0-97.sea.wa.customer.broadstripe.net) has quit (Ping timeout: 260 seconds)
2013-09-14 02:47:23	DanBurton	I'm messing around with reflection, so I wanted to write "using1 diagonalListMonad $ do x <- [1,2,3]; y <- [11, 22, 33]; return (x, y)" and get "[(1, 11), (2, 22), (3, 33)]" as the result
2013-09-14 02:47:54	jmcarthur	another problem with this monad is just operational. it tends to be inefficient
2013-09-14 02:48:08	<--	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2013-09-14 02:48:16	-->	joar (~joar@fsf/member/jwandborg) has joined #haskell
2013-09-14 02:48:27	jmcarthur	DanBurton: that expression could be written with just Applicative
2013-09-14 02:48:34	jmcarthur	DanBurton: and then you can just use ZipList
2013-09-14 02:48:43	<--	niklasb (~codeslay0@p5B3124A7.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-09-14 02:48:53	jmcarthur	of course i imagine you have something more complex in mind
2013-09-14 02:48:58	elliott	that constraints stuff is very unsafe, by the way.
2013-09-14 02:49:04	elliott	if you use it to override existing instances.
2013-09-14 02:49:20	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-14 02:49:20	thoughtpolice	man, everyone loves that 'using' function
2013-09-14 02:49:23	DanBurton	jmcarthur: indeed. But I am less interested in lists, and more interested in the idea of being able to do exactly what elliott is saying is unsafe
2013-09-14 02:49:24	-->	kniu (~kniu@c-67-160-8-163.hsd1.wa.comcast.net) has joined #haskell
2013-09-14 02:49:39	DanBurton	love love love
2013-09-14 02:49:41	pavonia	:t using
2013-09-14 02:49:41	jmcarthur	elliott: you mean reflection?
2013-09-14 02:49:41	lambdabot	Not in scope: `using'
2013-09-14 02:49:47	 *	thoughtpolice isn't sure he should have included it considering it's so unsafe
2013-09-14 02:49:53	jmcarthur	oh
2013-09-14 02:49:58	thoughtpolice	but it was too good of a trick to pass up writing about
2013-09-14 02:50:36	hpaste	DanBurton pasted “using1 with reflection” at http://lpaste.net/92956
2013-09-14 02:50:59	-->	jssanders (~jssanders@c-24-98-104-29.hsd1.ga.comcast.net) has joined #haskell
2013-09-14 02:51:05	elliott	jmcarthur: the constraints stuff.
2013-09-14 02:51:09	elliott	reflection is fine.
2013-09-14 02:51:12	elliott	using it to do that is not
2013-09-14 02:51:21	-->	binroot (~binroot@137.54.23.78) has joined #haskell
2013-09-14 02:51:32	DanBurton	What exactly would you say makes it so "unsafe"? I mean, I get the same sense of unsafety, but I cannot articulate why.
2013-09-14 02:51:38	jmcarthur	i'm afraid i am not familiar enough with the constraints stuff to know the difference
2013-09-14 02:51:40	elliott	GHC can and will use the *real* instance if you break things up enough.
2013-09-14 02:51:48	elliott	two instances is not allowed, something will go wrong.
2013-09-14 02:51:53	thoughtpolice	DanBurton: because GHC will just pick an instance if you fiddle too much
2013-09-14 02:51:54	elliott	if it works it's by accident. don't rely on it
2013-09-14 02:52:03	elliott	for instance, try separating into another top level definition, try separating into another module
2013-09-14 02:52:03	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-14 02:52:08	jmcarthur	using it to override an existing instance does sounds scary to me
2013-09-14 02:52:10	thoughtpolice	it's entirely possible for example, for you to just change the scope in which 'using' occurs, and your program will change
2013-09-14 02:52:13	thoughtpolice	which is pretty damn unsafe
2013-09-14 02:52:15	elliott	try poking at it slightly with a stick and watch it topple over
2013-09-14 02:52:16	-->	seschwar (~seschwar@unaffiliated/seschwar) has joined #haskell
2013-09-14 02:52:23	 *	thoughtpolice actually has an example of this
2013-09-14 02:52:25	DanBurton	lol
2013-09-14 02:52:27	jmcarthur	what happens if i override an Ord instance and use it with a Set?
2013-09-14 02:52:33	thoughtpolice	https://gist.github.com/thoughtpolice/6059758
2013-09-14 02:52:48	thoughtpolice	oh, and that one is super fun too, because it only happens on GHC 7.6, not HEAD, and not 7.4
2013-09-14 02:52:58	thoughtpolice	so yes, it makes your reasoning capabilities go bye-bye
2013-09-14 02:53:18	a3f	main = print =<< findWindow "Tibia" [] -- someone got an idea why this always returns Nothing? In C I would prefix with L for Unicode but Haskell strings are Unicode by default aren't they?
2013-09-14 02:53:40	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-14 02:53:49	<--	kniu (~kniu@c-67-160-8-163.hsd1.wa.comcast.net) has quit (Client Quit)
2013-09-14 02:53:54	jmcarthur	a3f: what is findWindow?
2013-09-14 02:53:58	thoughtpolice	hence why i was hesitant to include it in my article. but again it's a neat trick of tying constraints together
2013-09-14 02:53:59	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 260 seconds)
2013-09-14 02:54:16	thoughtpolice	(perhaps i should have just left it at 'with', and left 'using' as an exercise for the reader)
2013-09-14 02:54:32	DanBurton	I just like the idea of being able to use first-class instances
2013-09-14 02:54:42	<--	t7 (~tommo@188-220-237-234.zone11.bethere.co.uk) has quit (Quit: Konversation terminated!)
2013-09-14 02:54:44	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-14 02:54:52	a3f	@jmcarthur Graphics.Win32.findWindow returns the HWND of the process with the specified title
2013-09-14 02:54:52	lambdabot	Unknown command, try @list
2013-09-14 02:55:21	thoughtpolice	sure, i'd suggest just using 'with' if you really want that in a sane manner. using saves you some verbosity, but it has a large cost comparatively.
2013-09-14 02:56:41	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-14 02:56:50	a3f	<lambdabot> this works?
2013-09-14 02:56:54	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 264 seconds)
2013-09-14 02:57:04	a3f	ahm... how do I specify  auser by name ? ^^
2013-09-14 02:57:27	<--	w0rm_x (~dd@176.16.61.18) has quit (Quit: ...)
2013-09-14 02:57:37	DanBurton	thoughtpolice: it would be nice to at least have a quasiquoter or something so one doesn't have to sprinkle "Lift" everywhere in a given chunk of code manually
2013-09-14 02:57:51	-->	rnons (~rnons@60.185.250.157) has joined #haskell
2013-09-14 02:58:06	-->	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-09-14 02:58:10	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-14 02:58:31	-->	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 02:59:14	DanBurton	I just want to be able to syntactically say "this chunk of code uses *this* monad instance"
2013-09-14 02:59:27	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 260 seconds)
2013-09-14 02:59:42	DanBurton	instead of dealing with newtypes and lift lift lift everywhere
2013-09-14 02:59:43	-->	zbcm (~zbcm@147.69.198.125) has joined #haskell
2013-09-14 03:00:12	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-14 03:00:19	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-09-14 03:00:31	DanBurton	and the only other way to get that right now is to bind the relevant function names yourself for your given scope with RebindableSyntax
2013-09-14 03:01:15	-->	mm_freak (~milch@pD9FD1181.dip0.t-ipconnect.de) has joined #haskell
2013-09-14 03:01:20	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-09-14 03:01:27	<--	seanlerner (~seanlerne@173-164-85-85-Oregon.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2013-09-14 03:01:28	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-09-14 03:01:30	<--	mm_freak_ (~milch@pD9FD1181.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-09-14 03:01:36	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-14 03:04:14	-->	niklasb (~codeslay0@p5B3124A7.dip0.t-ipconnect.de) has joined #haskell
2013-09-14 03:05:24	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-14 03:05:26	<--	b__ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 240 seconds)
2013-09-14 03:06:33	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-09-14 03:07:00	<--	mikeit (~mikeit@net-93-65-150-84.cust.dsl.vodafone.it) has quit (Quit: Ex-Chat)
2013-09-14 03:07:04	<--	scripty (~scripty@117.192.178.222) has quit (Quit: Leaving)
2013-09-14 03:07:06	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Client Quit)
2013-09-14 03:07:12	-->	mikeit (~mikeit@net-93-65-150-84.cust.dsl.vodafone.it) has joined #haskell
2013-09-14 03:07:43	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 246 seconds)
2013-09-14 03:08:02	<--	dmj` (~user@ip-64-134-165-134.public.wayport.net) has quit (Ping timeout: 264 seconds)
2013-09-14 03:08:25	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-14 03:08:52	<--	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-09-14 03:09:02	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 240 seconds)
2013-09-14 03:09:44	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-14 03:10:04	<--	_nova (~nova@catv-80-99-240-71.catv.broadband.hu) has quit (Ping timeout: 264 seconds)
2013-09-14 03:10:26	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-09-14 03:10:51	-->	chrisdotcode (~quassel@pool-108-14-33-89.nycmny.fios.verizon.net) has joined #haskell
2013-09-14 03:10:51	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-09-14 03:10:57	-->	croyd (~scaldwell@99-127-54-64.lightspeed.austtx.sbcglobal.net) has joined #haskell
2013-09-14 03:10:58	<--	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has quit (Read error: Connection reset by peer)
2013-09-14 03:11:10	-->	dmj` (~user@50-200-5-112-static.hfc.comcastbusiness.net) has joined #haskell
2013-09-14 03:11:16	-->	litherum1 (~Litherum@76.74.153.49) has joined #haskell
2013-09-14 03:12:03	<--	Jesin (~Jessin_@dhcp123-203.eecs.lehigh.edu) has quit (Remote host closed the connection)
2013-09-14 03:12:58	<--	agumonkey (~agu@147.158.70.86.rev.sfr.net) has quit (Ping timeout: 246 seconds)
2013-09-14 03:14:05	-->	gabriel_ (~gabriel@r190-134-100-56.dialup.adsl.anteldata.net.uy) has joined #haskell
2013-09-14 03:14:51	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 260 seconds)
2013-09-14 03:17:02	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2013-09-14 03:17:18	<--	cdxr (~cdxr@c-71-202-242-236.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-09-14 03:17:39	-->	Arkantos (~arkantos@77.245.65.162) has joined #haskell
2013-09-14 03:18:00	<--	gabriel__ (~gabriel@r186-55-141-170.dialup.adsl.anteldata.net.uy) has quit (Ping timeout: 256 seconds)
2013-09-14 03:18:56	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-09-14 03:19:40	<--	Krakarn (Krakarn@62.80.204.136) has quit
2013-09-14 03:19:41	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-09-14 03:19:55	<--	a3f (~chatzilla@217.55.17.238) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 20.0.1/20130409194949])
2013-09-14 03:20:19	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-14 03:20:40	flebron	Should I try to align equal signs in a multiline let binding?
2013-09-14 03:21:20	-->	coltfred (~coltfred@host-174-45-107-146.bzm-mt.client.bresnan.net) has joined #haskell
2013-09-14 03:21:23	<--	apaku (~apaku@x2f041ba.dyn.telefonica.de) has quit (Ping timeout: 260 seconds)
2013-09-14 03:21:37	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-09-14 03:21:42	<--	litherum (~Adium@2620:149:4:1b01:9d5:ed73:b40c:406f) has quit (Quit: Leaving.)
2013-09-14 03:22:13	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-09-14 03:22:30	<--	mikeit (~mikeit@net-93-65-150-84.cust.dsl.vodafone.it) has quit (Quit: Ex-Chat)
2013-09-14 03:22:46	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-09-14 03:22:46	-->	mikeit (~mikeit@net-93-65-150-84.cust.dsl.vodafone.it) has joined #haskell
2013-09-14 03:23:02	-->	apaku (~apaku@x2f100ec.dyn.telefonica.de) has joined #haskell
2013-09-14 03:23:08	-->	Jesin (~Jessin_@Dyn143227.cc.lehigh.edu) has joined #haskell
2013-09-14 03:23:34	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-09-14 03:25:43	-->	xjiujiu (~quassel@218.77.14.202) has joined #haskell
2013-09-14 03:26:44	-->	message144 (~message14@cpe-76-173-242-89.socal.res.rr.com) has joined #haskell
2013-09-14 03:26:58	<--	Kelet (~Kelet@unaffiliated/kelet) has quit (Quit: Leaving)
2013-09-14 03:26:59	<--	CaptainK (~CaptainK@181.179.39.195) has quit (Read error: Connection reset by peer)
2013-09-14 03:27:17	-->	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-14 03:27:29	<--	ics (~ianclarks@ool-18bf6d86.dyn.optonline.net) has quit (Max SendQ exceeded)
2013-09-14 03:27:32	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-09-14 03:27:54	-->	CaptainK (~CaptainK@181.178.231.218) has joined #haskell
2013-09-14 03:28:01	DanBurton	flebron: only if it makes you happy
2013-09-14 03:28:15	copumpkin	liftM f (g =<< x)
2013-09-14 03:28:19	copumpkin	can that be rearranged?
2013-09-14 03:28:25	<--	wfaler (~Android@176.251.115.21) has quit (Quit: -a- Connection Timed Out)
2013-09-14 03:28:26	<--	flebron (~flebron@190.18.146.246) has quit
2013-09-14 03:28:38	copumpkin	according to the monad laws, that is
2013-09-14 03:28:39	-->	hiptobecubic (~john@unaffiliated/hiptobecubic) has joined #haskell
2013-09-14 03:28:40	-->	wfaler (~Android@176.251.115.21) has joined #haskell
2013-09-14 03:28:40	DanBurton	f `liftM` x >>= g -- does that count?
2013-09-14 03:28:43	DanBurton	;P
2013-09-14 03:28:50	copumpkin	:)
2013-09-14 03:28:51	-->	ianclarksmith (~ianclarks@ool-18bf6d86.dyn.optonline.net) has joined #haskell
2013-09-14 03:29:48	DanBurton	well if g = return . h, then it's liftM (f . h) x, if I didn't get that mixed up
2013-09-14 03:29:55	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-09-14 03:30:08	conal	New blog post: "Optimizing CCCs" http://conal.net/blog/posts/optimizing-cccs
2013-09-14 03:30:13	copumpkin	yeah, but g isn't that simple :)
2013-09-14 03:30:16	<--	azcodex (~azcodex_@173.red-80-26-174.adsl.dynamic.ccgg.telefonica.net) has quit (Read error: Connection reset by peer)
2013-09-14 03:30:35	copumpkin	I think I can move the liftM in
2013-09-14 03:30:43	DanBurton	(g . liftM f =<< x) -- like this
2013-09-14 03:31:01	DanBurton	wait no
2013-09-14 03:31:04	DanBurton	other way around
2013-09-14 03:31:12	DanBurton	(liftM f . g =<< x)
2013-09-14 03:31:18	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Quit: path[l])
2013-09-14 03:31:41	DanBurton	seems legit
2013-09-14 03:31:48	--	Gaelan is now known as GaelanAintAround
2013-09-14 03:31:49	copumpkin	yup
2013-09-14 03:32:16	 *	hackagebot thyme 0.3.0.1 - A faster time library  http://hackage.haskell.org/package/thyme-0.3.0.1 (LiyangHu)
2013-09-14 03:32:38	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-09-14 03:33:13	<--	fran (~fran@cl-282.udi-01.br.sixxs.net) has quit (Read error: Connection timed out)
2013-09-14 03:34:00	copumpkin	perfect, thanks :)
2013-09-14 03:34:25	-->	fran (~fran@cl-282.udi-01.br.sixxs.net) has joined #haskell
2013-09-14 03:34:31	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-09-14 03:34:31	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-09-14 03:35:47	-->	kmels (~kmels@190.148.103.83) has joined #haskell
2013-09-14 03:35:47	elliott	conal++
2013-09-14 03:35:53	conal	:)
2013-09-14 03:36:11	-->	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has joined #haskell
2013-09-14 03:36:27	-->	mmhelloworld (~marimuthu@pool-98-109-33-92.nwrknj.east.verizon.net) has joined #haskell
2013-09-14 03:36:38	<--	sepp2k1 (~sexy@e179232186.adsl.alicedsl.de) has quit (Read error: Connection reset by peer)
2013-09-14 03:37:40	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-09-14 03:37:59	-->	path[l] (~vsi@mpk-nat-7.thefacebook.com) has joined #haskell
2013-09-14 03:39:07	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-09-14 03:40:00	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-09-14 03:40:08	-->	pheaver (~pweaver@c-98-246-240-144.hsd1.or.comcast.net) has joined #haskell
2013-09-14 03:41:07	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 260 seconds)
2013-09-14 03:41:57	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-09-14 03:42:08	<--	xjiujiu (~quassel@218.77.14.202) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-14 03:42:34	-->	xjiujiu (~quassel@218.77.14.202) has joined #haskell
2013-09-14 03:42:41	<--	jchild (~textual@cpe-74-77-5-119.buffalo.res.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-09-14 03:42:50	<--	path[l] (~vsi@mpk-nat-7.thefacebook.com) has quit (Ping timeout: 264 seconds)
2013-09-14 03:42:51	-->	baba (~baba@p5DDCD6FA.dip0.t-ipconnect.de) has joined #haskell
2013-09-14 03:43:14	--	baba is now known as Guest2006
2013-09-14 03:43:28	-->	glguy (~glguy@unaffiliated/glguy) has joined #haskell
2013-09-14 03:43:40	<--	mmhelloworld (~marimuthu@pool-98-109-33-92.nwrknj.east.verizon.net) has left #haskell
2013-09-14 03:44:04	DanBurton	bind g >>> fmap f  ==>  bind g >>> bind (f >>> return)  ==>  bind (g >>> bind (f >>> return))  ==>  bind (g >>> fmap f)
2013-09-14 03:44:07	-->	h4199 (~chatzilla@adsl-76-237-232-255.dsl.rcsntx.sbcglobal.net) has joined #haskell
2013-09-14 03:44:47	-->	tabemann (~travisb@adsl-76-199-166-65.dsl.milwwi.sbcglobal.net) has joined #haskell
2013-09-14 03:44:54	DanBurton	from laws about how fmap f = bind (f >>> return) and how bind f >>> bind g = bind (f >>> bind g)
2013-09-14 03:45:12	<--	james-ubc (~james@dhcp-206-87-193-42.ubcsecure.wireless.ubc.ca) has quit (Ping timeout: 256 seconds)
2013-09-14 03:45:15	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-09-14 03:45:18	CaptainK	is there a printed mailed version of a haskell magazine?
2013-09-14 03:46:26	<--	Guest35050 (~baba@p5DDCD9F6.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-09-14 03:46:26	DanBurton	CaptainK: I am not aware of any such thing. Academic journals for PL, perhaps?
2013-09-14 03:46:34	CaptainK	sure would like to get an ol fasion magazine subscription
2013-09-14 03:47:06	<--	steamboat (~sehrlich@2601:d:6b80:28b:980d:d0a6:e467:6b8) has quit (Quit: Leaving.)
2013-09-14 03:47:12	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-09-14 03:47:20	CaptainK	like the old days when programming my zx81
2013-09-14 03:47:43	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-09-14 03:47:48	CaptainK	feature a company using haskell
2013-09-14 03:47:59	<--	kmels (~kmels@190.148.103.83) has quit (Ping timeout: 260 seconds)
2013-09-14 03:47:59	--	GaelanAintAround is now known as Gaelan
2013-09-14 03:48:00	CaptainK	feature some cool programming tips
2013-09-14 03:48:48	CaptainK	version debates and future trends
2013-09-14 03:48:50	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Ping timeout: 264 seconds)
2013-09-14 03:50:24	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-09-14 03:50:34	-->	ThatOtherPerson (~ThatOther@unaffiliated/thatotherpersony) has joined #haskell
2013-09-14 03:50:38	-->	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has joined #haskell
2013-09-14 03:51:12	<--	tjohnson (~tjohnson@71-20-46-196.war.clearwire-wmx.net) has quit (Remote host closed the connection)
2013-09-14 03:51:29	<--	joar (~joar@fsf/member/jwandborg) has quit (Ping timeout: 246 seconds)
2013-09-14 03:52:05	-->	path[l] (~vsi@72.51.35.51) has joined #haskell
2013-09-14 03:52:08	<--	dagnachew (~dagnachew@bas1-montreal30-2925424085.dsl.bell.ca) has quit (Quit: WeeChat 0.4.1)
2013-09-14 03:52:25	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-09-14 03:53:34	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-09-14 03:54:25	-->	milessabin__ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has joined #haskell
2013-09-14 03:54:30	--	Mortomes is now known as Mortomesleeping
2013-09-14 03:54:35	<--	c_wraith (~c_wraith@c-67-168-202-19.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-09-14 03:54:57	--	ianclarksmith is now known as ics
2013-09-14 03:55:02	-->	zeiris (~amtal@192.3.116.3) has joined #haskell
2013-09-14 03:55:04	<--	CaptainK (~CaptainK@181.178.231.218) has left #haskell ("Your only limitation to creation is your imagination.")
2013-09-14 03:55:17	-->	CaptainK (~CaptainK@181.178.231.218) has joined #haskell
2013-09-14 03:56:51	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-09-14 03:57:00	<--	xjiujiu (~quassel@218.77.14.202) has quit (Quit: No Ping reply in 180 seconds.)
2013-09-14 03:57:23	<--	rgr (~user@5.159.229.17) has quit (Ping timeout: 240 seconds)
2013-09-14 03:57:24	-->	xjiujiu (~quassel@218.77.14.202) has joined #haskell
2013-09-14 03:57:25	<--	milessabin_ (~miles@host86-152-144-185.range86-152.btcentralplus.com) has quit (Ping timeout: 246 seconds)
2013-09-14 03:58:16	<--	fl00r (~fl00r@216.70.153.210) has quit (Quit: Leaving)
2013-09-14 03:58:28	<--	dmj` (~user@50-200-5-112-static.hfc.comcastbusiness.net) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-09-14 03:58:54	<--	tabemann (~travisb@adsl-76-199-166-65.dsl.milwwi.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-09-14 03:59:52	<--	zeiris (~amtal@192.3.116.3) has quit (Ping timeout: 256 seconds)
2013-09-14 03:59:53	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Read error: Operation timed out)
2013-09-14 04:00:15	--	Gaelan is now known as GaelanAintAround
