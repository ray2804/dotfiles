#!/bin/sh

 # When you want to parse commandline arguments in a professional way, getopts is the tool of choice. Unlike its older brother getopt (note the missing s!), it's a shell builtin command. The advantage is

 #    you don't need to hand your positional parameters through to an external program
 #    getopts can easily set shell variables you can use for parsing (impossible for an external process!)
 #    you don't have to argue with several getopt implementations which had buggy concepts in the past (whitespaces, …)
 #    getopts is defined in POSIX®

# Goals:
# * parse commandline arguments in a 'professional' way with built-ins
# * don't need to hand your positional parameters through to an external program
# * getopts can easily set shell variables you can use for parsing (impossible for an external process!)

# Terminology

# Consider the following commandline:
# $ mybackup -x -f /etc/mybackup.conf -r ./foo.txt ./bar.txt

# All these symbols are positional parameters, but you can divide them into some logical groups:

# mybackup is a command, -x is an option, a flag, a switch: one character, indroduced by a dash (-)
# -f is also an option, but this option has an additional argument (argument to the option -f): /etc/mybackup.conf. This argument is usually separated from its option (by a whitespace or any other splitting character) but that's not a must, -f/etc/mybackup.conf is valid.
#  -r depends on the configuration. In this example, -r doesn't take arguments, so it's a standalone option, like -x
# This is ONLY implied as mybackup usually would involve 2 files to copy from (source) to (target). But there is noway of telling, by this example
# ./foo.txt and ./bar.txt are remaining arguments without any option related. These often are used as mass-arguments (like for example the filenames you specify for cp(1)) or for arguments that don't need an option to be recognized because of the intended behaviour of the program (like the filename argument you give your text-editor to open and display - why would one need an extra switch for that?). POSIX® calls them operands.

# How it works

# In general you need to call getopts several times. Each time it will use "the next" positional parameter (and a possible argument), if parsable, and provide it to you. getopts will not change the positional parameter set — if you want to shift it, you have to do it manually after processing:

# shift $((OPTIND-1))
# now do something with $@

# Since getopts will set an exit status of FALSE when there's nothing left to parse, it's easy to use it in a while-loop:

while getopts ...; do
  echo
done

#getopts will parse options and their possible arguments. It will stop parsing on the first non-option argument (a string that doesn't begin with a hyphen (-) that isn't an argument for any option infront of it). It will also stop parsing when it sees the -- (double-hyphen), which means end of options.


#Used variables
#variable	description
#OPTIND	Holds the index to the next argument to be processed. This is how getopts "remembers" its own status between invocations. Also usefull to shift the positional parameters after processing with getopts. OPTIND is initially set to 1, and needs to be re-set to 1 if you want to parse anything again with getopts
#OPTARG	This variable is set to any argument for an option found by getopts. It also contains the option flag of an unknown option.
#OPTERR	(Values 0 or 1) Indicates if Bash should display error messages generated by the getopts builtin. The value is initialized to 1 on every shell startup - so be sure to always set it to 0 if you don't want to see annoying messages!

#getopts also uses these variables for error reporting (they're set to value-combinations which arent possible in normal operation).



# Set early
MOD="BPSH"
APP="LCS"

prefix=$(basename $0)
fullname=$0
tempdir=$(mktemp -d "{prefix}.XXXX")

trap 'rm -r ${tempdir}' EXIT

oneline_usage="$fullname [-fhpantvV] [-d todo_config] action [task_number] [task_description]"

# Portable form of bash associative array
CMDS=("add:a"
      "compile:c"
      "copy:cp"
      "help:h"
      "list:ls"
      "list-all:la"
      "move:mv"
      "shell:sh")


for command in "${CMDS[@]}" ; do
    KEY=${command%%:*}
    VALUE=${command#*:}
    printf "%s is aliased to %s.\n" "$KEY" "$VALUE"
    printf "'--%s' is long options for -%s.\n" "$KEY" "$VALUE"
done



#export (${MOD}_${APP} ${BASE} ${FULL})

#${PROG}_FULL_SH="$0"
#export ${PROG}_SH TODO_FULL_SH


usage()
{
    cat <<-EndUsage
		Usage: $oneline_usage
		Try '$TODO_SH -h' for more information.
	EndUsage
    exit 1
}

die()
{
    echo "$*"
    exit 1
}

shorthelp()
{
    cat <<-EndHelp
		Usage: $oneline_usage

		Actions:
		  add|a "THING I NEED TO DO +project @context"
		  addm "THINGS I NEED TO DO
		      MORE THINGS I NEED TO DO"
		  addto DEST "TEXT TO ADD"
		  append|app ITEM# "TEXT TO APPEND"
		  archive
		  command [ACTIONS]
		  deduplicate
		  del|rm ITEM# [TERM]
		  depri|dp ITEM#[, ITEM#, ITEM#, ...]
		  do ITEM#[, ITEM#, ITEM#, ...]
		  help
		  list|ls [TERM...]
		  listall|lsa [TERM...]
		  listaddons
		  listcon|lsc
		  listfile|lf [SRC [TERM...]]
		  listpri|lsp [PRIORITIES] [TERM...]
		  listproj|lsprj [TERM...]
		  move|mv ITEM# DEST [SRC]
		  prepend|prep ITEM# "TEXT TO PREPEND"
		  pri|p ITEM# PRIORITY
		  replace ITEM# "UPDATED TODO"
		  report
		  shorthelp

		Actions can be added and overridden using scripts in the actions
		directory.
EndHelp

	# Only list the one-line usage from the add-on actions. This assumes that
	# add-ons use the same usage indentation structure as todo.sh.
	addonHelp | grep -e '^  Add-on Actions:' -e '^    [[:alpha:]]'

	cat <<-EndHelpFooter

			  See "help" for more details.

	EndHelpFooter

	exit 0
}





# put() {
# 	[ "$#" != 3 ] && exit 1
# 	mapname=$1; key=$2; value=$3
# 	[ -d "${mapdir}/${mapname}" ] || mkdir "${mapdir}/${mapname}"
# 	echo $value >"${mapdir}/${mapname}/${key}"
# }

# get() {
# 	[ "$#" != 2 ] && exit 1
# 	mapname=$1; key=$2
# 	cat "${mapdir}/${mapname}/${key}"
# }
