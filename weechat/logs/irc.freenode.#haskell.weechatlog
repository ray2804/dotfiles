2013-08-30 22:40:55	-->	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-08-30 22:40:55	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-08-30 22:40:55	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-08-30 22:40:55	--	Nicks #haskell: [@ChanServ [swift] \q __main__ _br_ _flow_ _janne _justjust `0660 `^_^v `bps a11235 ab9rf absence acfoltzer acomar_ acowley Adeon adimit Adios adlan adnap aess aford aforemny agundry ahf ahihi akahn akiress akraut albel727 aleator alej alexander__b alexsdutton AlexWebr Alice3 allsystemsarego almondjelly aloiscochard alpounet alvdav Amadiro Amanas amatsu anachron andares anders^^ andrewsw anhall aninhumer anRch AntiSpamMeta aoh apaku Apocalisp apples applicative araujo arbn arborist arcatan arenz aristid arkeet arkx arlinius arnsholt arpunk asante asjo aszlig Athas augur aupiff averell Axman6 aztek b0c1 b2coutts b52 b_jonas bananagram banjiewen barrucadu bartavelle basdirks_ Baughn bbee bbloom bcoppens bcw bd_ bduc Belgarion0 benj_ bennofs bens bentrevor bergey Bergle_1 bergmark betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitonic` bitraten blackdog blast_hardcheese BlastHardcheese Blkt BMeph bobry bobthenameless bogner bogner_ Boney Boreeas bos bqp brainproxy Brando753 brandonw breck7 brendan brett BrianHV briden brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild bxc byorgey ByronJohnson c_14 cads cajla Cale caleb_9 caligula callen canissimia canta carp carter ccasin ccxCZ cdidd cdk centrinia Cerise cfricke charlesofarrell_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrra ciaranm CindyLinz cjay clahey ClaudiusMaximus Clint clog cmsd2 codesoup CODEtaku cods coeus_ colah companion_cube conehead confound copton_ copumpkin CosmicRay Counter-Strike cow-orker Croms cronject cross crs_ cruxeternus Cryovat cschneid cynick cyphase d-snp_ d3lxa dabradley dacc dan64 DanBurton danharaj danr dario^CIP DarkFox DarkNFoxy Dashkal davean davidt davorak dcoutts de-Vri-es deavid Deewiant def-lkb deggis demolithion Desheng2 destiny dexter2 DexterLB dfan dgpratt dgvncsz0f DigitalKiwi dilinger_ dino- divarvel dixie djahandarie djcoin dju dlundy dmp1ce dmwit Dodek dogmaT dolio DolphR donri doomlord doomlord_ doshitan dpwright dqd Draconx Draggor drbean DrCode drdo dreixel drewr drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dumael dustin10 dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dysinger dyspeptics15 eacameron earthy eataix ecc ecube edk Edoxile Eduard_Munteanu edwtjo eeezkil eevar eff_ ehamberg ehd eis_ ejls eL_Bart0 electrogeek elgot Eliel Elision elliott Enigmagic ent epsylon epta ericmathison ericmj ericmoritz Eridius erkin ernst erochester ersran9 Erstarrung es917 etrepum EvanR EvilPenguin Excedrin Excureo exobit eyck Ezku ezrios f8l fabjan fall_ farn felipe_ fergusnoble fijimunkii fikusz finnrobi FireFly fl00r flazz_gone flori_ flux fogus|gone fran FreakyPe1guin FreeFull frontendloader froztbyte fry fryguybob ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gambogi gbarboza gbeshers gbluma_ gdeest gds geal geekosaur gehmehgeh gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 glguy gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes greymalkin gridaphobe gseitz gthorslund guampa guerrilla Guest19190 Guest22019 Guest80998 Guest92121 Guest98659 Gunni guymann h4199 h_chiro_ haasn hackagebot Hafydd hamilyon hamishmack hannese hape01 Hardolaf hashcat hc hdevalence heath heruur hexagoxel hfaafb hiptobecubic hiratara hiredman hive-mind hkj horlicks hoverbear hpc hpd hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack identity idnar ido idoru Igloo inarru inr int-e integral Internet13 io2 ioanel ion ipuustin ircbrowse iron_houzi ismlages isomorphic isomorphismes iulian ivan\ ivan` j2j Jaak jackhill jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jaspervdj Jaxan jayne jayprich jb55 jbauman jbomo jchild jcp jdegoes jdoles jdoliner Jeanne-Kamikaze jeff_s1 Jello_Raptor Jesin JesuZ jfischoff jhh jibi jix jkpl jlewis jliikka jlouis jmbto jmcarthur jmct jml joachifm joar jobstijl JobV jodaro joe9 joefiorini joehillen joelteon joeyh johnw joneshf-work jonke Jonno_FTW jonsmock jonsterling joogi jorick JPohlmann jrd0 jrib jroesch jrslepak junsuijin juuhaa jyyou jzelinskie jzl k0001 k00mi k0ral k4nar Kabaka_ Kaini kakos KaneTW kaol katis kav kaw kayloos Ke kekimmo kerrick ketil kfreds Khady Khisanth killy9999 kini Kinnison KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man kobain Kobata kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft kshannon kstuart kttm kubrat Kuraitou kxra KyleCloud lahwran lambdabot lambdanaut Laney latro`a_ lattenwald LazinCajun Lefeni Lemmih lenstr leroux levi Licenser lieven_ lightquake linduxed linux_noob_666 liori Liskni_si lispy liszt litherum liyang ljhms ljos lokydor lopex lpaste lpsmith luite lukexi lulf lunarjar lurkorg lusory M-ou-se m0g m3ga maattdd machisuji machisuji_ macron madjestic magicman Maior majoh mak` make_sense maksbotan malorie_ mami mannyv mantovani maoe mapreduce marienz martinalex Martty MasseR matheus23 mattp_ mauke mavam Maxdamantus maximumsteve Mayzie mbrock mcbonz mceier McManiaC mcstar mcw09 mechairoi mee mel- melter mendez mephx meretrix merijn mero MetaCosm mgaare mgsloan miasma michaf mietek MigoMipo mike2 mikeplus32 milessabin MileyCyrus milli mimi_vx mimico__ MindlessDrone mirsal mixi mjo_ mjrosenb MK_FG mkiefel mkrull mlamari_ mlh mlinksva mm_freak_ mmaruseacph2 mmathis mnbernstein MoALTz mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes MouseTheLuckyDog Mowah mr- mrd MrFahrenheit mroman mrowe_away mrpantoufle MrRacoon mrshoe mrsolo MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4 mxf myme n-dolio n00dle Nahra napping Natch ndngvr ndrei NeatBasis necroyeti neektza1 NemesisD neptunepink Neqoxec neurocyte newbie__ newsham Nickeeh nicoo Nik05 nik_89 niko nikola nilg` nilsi_ Nimatek nimish ninegrid ninzine Nisstyre niteria nkpart nlogax noam noddy Noldorin nominolo nooodl nopcode_ noplamodo normanrichards notdan Nshag nuttycom1 nwf nxorg8 obcode Obfuscate ocharles Odd_Bloke ofan og Okasu oldmanstan OlegYch oleo ollehar opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s_ otulp ousado Ov3rload Pad^ paddymahoney palaga palmje pantech pantsman ParahSailin ParaSa1lin parcs path[l] pcapriotti peddie peltchu Pengoo pentace perlite petanqk petantik pfoetchen pharaun phienone philipde` Philonous Phlogistique PHO_ phryk phst` pi8029 PiepScuim pikhq pjstadig Plex- plhk plucas pnielsen Polarina popx poucet pqmodn pr Pranz predator117 preflex profmakx prophile Proteumus prototrout ps-auxw Ptival purefn puzza007 pygospa pyrtsa pyykkis_ q66 Quadrescence quaestor quicksilver qwandor qz_ raft raichoo raid Ralith Rarrikins rasmusto Raynes Raynos Razz reactormonk redjohn ReinH reinoud Reisen Reite relrod Rembane resnik RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb roconnor rpenguin_ rs0 RThinker Rutger`_ ryanakca ryant5000 s00pcan s4msung s4muel s_quark sababa SaBer saep Sagi saiam saiam^ Saizan sajith saml samrat satshaba1 satshabad saurik SBauer scanlonman schlumpi_ schoppenhauer schroedinbug sclv sclv_ scooty-puff scottschecter scripty scshunt Sculptor sdx23 seantallen SegFaultAX sellout- seschwar sferry_ Sgeo sgso shachaf shajra shanse shelf shennyg shepheb shergill shesek Shin-LaC shintah shiona SHODAN Shou si14 silasm simon simukis_ sinclair|net sipa SirChurchill sirspazzolot sj4nz skchrko ski skulls skypers sleepybug sleepynate SLi slobo sm smarter so sohum solancile solarus solirc solrize solution Sonarpulse sordina Sorella SoupEvil sp3ctum Spaceghost spaceships Spockz SpyrosTr_ Squid_Tamer squimmy srcerer ssbr ssttudder Starfire_ stass statusfailed steamboat stelleg stepcut stevej stiell stomp strmpnk_ stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supki Svedrin swistak35 Swizec swook` sxn tahu TallerGhostWalt talzeus talzeus_ Tamae tamiko Taneb Tarential Targen tarmo taruti tauli tauntaun tavelram taylorgb_ tazjin tcrayford td123 tdammers Tehnix tehroflmaoer Tekerson tel Tene tensorpudding tero- tertl3 Tesseraction tessier tew88 tg Th0mas tharper_ thealanwattsriot theDon TheFuzzball theorbtwo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice thr33strikes threedaymonk thunderrd tibbe tiffany tiksa timemage Tinned_Tuna tippenein TML tobyo2 tolt tomaw tomboy64 tomejaguar tomh- tommd tomprince torkjak totte tpsinnem tragalo Tribal tridactyla trism tromp__ troydm ts33kr tsou ttm tudalex tufflax tulcod tunixman turiya Twey twn tych0 tylergillies_ u_ udevd udoprog ulfdoz Ulrar uniquenick upgrayeddd uu1101 valdyn Valodim ve vehk Veltas Vertue viktech vili vivekrai vmeson vnz vobi void64 Vorpal voxpopuli vpm Vq vsayer vvv wagle Walther WanderingMonad warpy Watcher7 waterlaz watermind weie wereHamster whaletechno WhereIsMySpoon wilfredh willb1 Will| wimpunk Wizek wole wolfnn wollw wormphlegm WraithM wto wtw wunki Wuzzy xaimus xenocons xenophon xinming XMunkki_ xnyhps Xorlev xorox90 xplat xplat_ xRamses xye xymox Y-Less yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yogert yogurt_truck YoungFrog yriw ystael ysuzuki zaiste zammy zaphar_ps Zariel zcourts zebr zeiris_ Zenol zenoli zenzike zero7 zerokarmaleft zett_zelett ziman zoktar zomg zorzar zrot zw01]
2013-08-30 22:40:55	--	Channel #haskell: 1166 nicks (1 op, 0 halfops, 0 voices, 1165 normals)
2013-08-30 22:40:58	--	Mode #haskell [+CLcnpt]
2013-08-30 22:40:58	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-08-30 22:41:04	--	URL for #haskell: http://www.haskell.org/
2013-08-30 22:41:20	-->	MercurialAlchemi (~Mercurial@sopona.idm.fr) has joined #haskell
2013-08-30 22:42:00	mcstar	omg, around 2006 #haskell had 3000 nicks?
2013-08-30 22:42:16	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-08-30 22:42:30	<--	steamboat (~sehrlich@c-76-17-123-250.hsd1.ga.comcast.net) has quit (Quit: Leaving.)
2013-08-30 22:42:43	ski	not that i recall
2013-08-30 22:42:48	-->	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has joined #haskell
2013-08-30 22:42:55	Cale	mcstar: More like around 300
2013-08-30 22:42:59	WraithM	Source?
2013-08-30 22:43:09	mcstar	SPJ presentation, there's a bar-chart
2013-08-30 22:43:16	Cale	The nick counter has only gone up
2013-08-30 22:43:23	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-30 22:43:26	mcstar	its hard to understand what he says
2013-08-30 22:44:05	mcstar	'at any moment there was a couple hundred users logged in' thats what he says
2013-08-30 22:44:05	Cale	oh, maybe 3000 unique nicks, rather than concurrent
2013-08-30 22:44:14	Zenol	Is use c >>= (\b' -> b .= b') simplifiable?
2013-08-30 22:44:26	mcstar	for the whole year, ok
2013-08-30 22:44:45	Cale	Well, you could write (b .=) =<< c
2013-08-30 22:45:14	Cale	Not sure if clearer
2013-08-30 22:45:21	Eduard_Munteanu	It's a bubble. :P
2013-08-30 22:45:34	Zenol	er, yeh. I was hopping there was on operator so that i can write c ???? b :/
2013-08-30 22:45:45	Cale	Well, what's .=?
2013-08-30 22:45:58	<--	reinoud (~reinoud@aardappel.xs4all.nl) has quit (Quit: Leaving.)
2013-08-30 22:46:02	ski	Zenol : define `c ???? b = (b .=) =<< c' ?
2013-08-30 22:46:18	Zenol	Cale: Len's .= operator (.~ but in a state monad)
2013-08-30 22:47:08	Cale	Oh, right. I tend to not use lens' infix operators.
2013-08-30 22:47:19	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-30 22:47:29	Cale	I wouldn't be too surprised if it had something for that...
2013-08-30 22:48:10	-->	weie_ (~eie@softbank221078042071.bbtec.net) has joined #haskell
2013-08-30 22:48:19	Cale	There is <~
2013-08-30 22:48:47	-->	joelb (~textual@office.khanacademy.org) has joined #haskell
2013-08-30 22:48:58	Cale	(<~) :: MonadState s m => ASetter s s a b -> m b -> m ()
2013-08-30 22:49:25	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-08-30 22:49:37	Cale	So perhaps  b <~ c  is what you want.
2013-08-30 22:49:43	Zenol	Cale:  (b <~ use c) yeh, thanks :D
2013-08-30 22:49:45	Cale	yeah
2013-08-30 22:49:54	<--	weie (~eie@softbank221078042071.bbtec.net) has quit (Ping timeout: 264 seconds)
2013-08-30 22:50:33	-->	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has joined #haskell
2013-08-30 22:50:48	monochrom	3000 nicks is a lot of nicks :)
2013-08-30 22:50:50	<--	bcw (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-30 22:51:12	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-08-30 22:51:39	<--	scripty (~scripty@117.192.183.64) has quit (Quit: Leaving)
2013-08-30 22:52:26	Cale	Many of them were a secret bot run by dons to occasionally join the channel with a nick that hadn't appeared before. ;)
2013-08-30 22:52:45	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-08-30 22:52:59	Cale	But yeah, it's interesting to see how many non-idlers there are.
2013-08-30 22:53:07	thr33strikes	is there a command in haskell that will let me manipulate the names of files that is not OS specific?
2013-08-30 22:53:22	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-08-30 22:53:28	-->	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has joined #haskell
2013-08-30 22:53:32	Cale	renameFile :: FilePath -> FilePath -> IO ()
2013-08-30 22:53:39	sm	from the filepath package
2013-08-30 22:53:42	Cale	In System.Directory
2013-08-30 22:53:52	Cale	Which is in directory
2013-08-30 22:53:54	sm	oh, and the directory package
2013-08-30 22:53:55	-->	Riccardo (82f58947@gateway/web/freenode/ip.130.245.137.71) has joined #haskell
2013-08-30 22:54:15	thr33strikes	I thougth that was OS specific?  I'll re-read thanks for the info
2013-08-30 22:54:23	-->	markov_twain (~markov_tw@68-119-76-233.dhcp.mtgm.al.charter.com) has joined #haskell
2013-08-30 22:54:29	Cale	Everything in System.Directory is OS agnostic
2013-08-30 22:54:34	monochrom	module System.FilePath is fairly OS-independent. the package name is filepath. comes with Haskell Platform.
2013-08-30 22:54:35	sm	which is awesome
2013-08-30 22:54:39	Cale	Which is why the module is a little anemic
2013-08-30 22:54:49	monochrom	example: </> does the right thing
2013-08-30 22:54:51	 *	sm loves OS agnostic
2013-08-30 22:55:00	<--	ryant5000 (~ryan@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-30 22:55:15	Eduard_Munteanu	Am I supposed to use Parsec for arranging input / doing a first pass over data, like splitting things into lines and fields?
2013-08-30 22:55:41	Cale	Eduard_Munteanu: You certainly can, and it wouldn't be too much of an abuse
2013-08-30 22:56:00	Cale	Eduard_Munteanu: For anything more complicated than what you can handle easily with lines/words
2013-08-30 22:56:05	Eduard_Munteanu	I see... would I just call 'parse' again on the result for the next pass though?
2013-08-30 22:56:09	monochrom	I don't know about "supposed". it is your call, not mine.
2013-08-30 22:56:23	Eduard_Munteanu	Yeah, it is more complicated after that.
2013-08-30 22:56:56	Eduard_Munteanu	Bah, I want HList. :)
2013-08-30 22:57:08	-->	Guest44651 (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has joined #haskell
2013-08-30 22:57:13	<--	newbie__ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 22:57:30	Eduard_Munteanu	Or dependent types.
2013-08-30 22:57:35	Cale	Eduard_Munteanu: It's up to you whether to nest your use of parsec like that. Parsec is capable of handling streams of tokens of an arbitrary type if you want to tokenise first, though many people will avoid a separate tokenising pass.
2013-08-30 22:57:53	<--	jchild (~textual@rrcs-50-75-181-175.nys.biz.rr.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-30 22:58:15	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 22:58:16	monochrom	"the solution depends on the problem"
2013-08-30 22:58:31	<--	araujo (~araujo@gentoo/developer/araujo) has quit (Read error: Connection reset by peer)
2013-08-30 22:58:31	<--	arenz (~arenz@HSI-KBW-109-193-252-079.hsi7.kabel-badenwuerttemberg.de) has quit (Ping timeout: 246 seconds)
2013-08-30 22:58:37	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-08-30 22:58:59	<--	danharaj (~Adium@rrcs-24-39-113-178.nyc.biz.rr.com) has quit (Quit: Leaving.)
2013-08-30 22:59:13	-->	araujo (~araujo@gentoo/developer/araujo) has joined #haskell
2013-08-30 22:59:18	Eduard_Munteanu	I'm parsing records with colon-separated fields. The first field dictates the type of what follows, but any given field can have different stuff in it depending on that.
2013-08-30 22:59:28	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-30 22:59:58	Riccardo	I'm using "cabal-dev ghci" to try out a few functions from my haskell project. I also have some extra imports in ~/.ghci for stuff that i often and up using (e.g. monads, pretty print). however, cabal-dev wants me to put the related packages in build-depends. can I avoid that?
2013-08-30 23:00:00	Eduard_Munteanu	Also the order of the records (lines/rows) is important.
2013-08-30 23:00:06	tdammers	hmm, you could probably split the input into "tokens" (fields) easily without parsec
2013-08-30 23:00:18	Sonarpulse	what do you all think the chances are that Haskell gets dependant types within the next decade?
2013-08-30 23:00:21	Eduard_Munteanu	tdammers: that's what I first did, yeah
2013-08-30 23:00:23	mm_freak_	http://hackage.haskell.org/package/acme-schoenfinkel
2013-08-30 23:00:25	mm_freak_	i had to =)
2013-08-30 23:00:35	Kinnison	You're a bad person.
2013-08-30 23:00:38	monochrom	two-pass maximizes programmer sanity. one-pass maximizes execution efficiency. choose your poison.
2013-08-30 23:01:01	Eduard_Munteanu	I have to group lines into logical units before parsing.
2013-08-30 23:01:18	mm_freak_	but it's actually a type class:  class (Category cat) => Schoenfinkel cat
2013-08-30 23:01:20	Ralith	with sufficiently clever abstractions you can write one-pass as if it were two-pass
2013-08-30 23:01:25	<--	dgpratt (~dpratt71@207.182.200.34) has quit (Quit: Leaving)
2013-08-30 23:01:29	-->	NiceOneBrah (~niceonebr@173.247.206.226) has joined #haskell
2013-08-30 23:01:29	Eduard_Munteanu	Anyway my concern is I need a big function calling a bunch of parsers, and then fill a record type.
2013-08-30 23:01:36	mm_freak_	schoen :: cat (a, b) c -> cat a (cat b c)
2013-08-30 23:01:37	<--	anRch (~markmilli@173-9-87-73-NewEngland.hfc.comcastbusiness.net) has quit (Quit: anRch)
2013-08-30 23:01:38	haasn	mm_freak_: I like these names, they're pretty (sorry)
2013-08-30 23:01:45	Cale	Well, you don't lose *much* sanity avoiding the tokenising pass with a parser combinator library, because you build parsers for each of your tokens, and then use those.
2013-08-30 23:01:47	mm_freak_	they're schön =)
2013-08-30 23:01:50	Eduard_Munteanu	Ralith: maybe it does do fusion
2013-08-30 23:02:04	monochrom	haha mm_freak_
2013-08-30 23:02:17	haasn	mm_freak_: but why ‘oe’? :)
2013-08-30 23:02:29	haasn	this is an acme-package, after all
2013-08-30 23:02:39	-->	xBsd (~xBsd@h195-91-233-2.ln.rinet.ru) has joined #haskell
2013-08-30 23:02:39	Cale	haasn: Because ö is a little hard to type, I guess.
2013-08-30 23:02:53	Cale	(unless you have a keyboard layout which has it directly)
2013-08-30 23:02:54	Eduard_Munteanu	It's a bit annoying because I have to map certain properties to certain fields of a certain record
2013-08-30 23:02:55	-->	mxc (~maxcan@199.21.86.2) has joined #haskell
2013-08-30 23:03:00	mm_freak_	haasn: there are unicode variants if you prefer
2013-08-30 23:03:13	mm_freak_	that's why it needs ConstraintKinds
2013-08-30 23:03:15	<--	ioanel (~Thunderbi@188.25.17.113) has quit (Quit: ioanel)
2013-08-30 23:03:19	mm_freak_	type Schönfinkel = Schoenfinkel
2013-08-30 23:03:19	mm_freak_	=)
2013-08-30 23:03:23	monochrom	yeah, it comes with both schoen and schön
2013-08-30 23:03:25	haasn	heh
2013-08-30 23:03:33	haasn	awesome
2013-08-30 23:03:34	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-08-30 23:03:42	<--	path[l] (~vsi@173.252.71.3) has quit (Ping timeout: 264 seconds)
2013-08-30 23:03:47	<--	erochester (~erocheste@d-199-247-40.bootp.Virginia.EDU) has quit (Quit: Leaving.)
2013-08-30 23:04:02	monochrom	BUT! it doesn't have Control.Category.Schönfinkel
2013-08-30 23:04:09	haasn	schön/hässlich
2013-08-30 23:04:14	mm_freak_	it even comes with a test suite to show that curry = schoen =P
2013-08-30 23:04:22	<--	eis_ (~eis@109.197.218.46) has quit (Read error: Connection reset by peer)
2013-08-30 23:04:34	haasn	in this model, schön should be uncurry
2013-08-30 23:04:36	haasn	clearly
2013-08-30 23:04:37	 *	hackagebot acme-schoenfinkel 0.1.0 - Proper names for curry and uncurry  http://hackage.haskell.org/package/acme-schoenfinkel-0.1.0 (ErtugrulSoeylemez)
2013-08-30 23:04:39	haasn	I mean uh
2013-08-30 23:04:41	haasn	curry
2013-08-30 23:04:45	-->	eis_ (~eis@109.197.218.46) has joined #haskell
2013-08-30 23:04:47	mm_freak_	monochrom: i didn't want to mess up the file system of people =P
2013-08-30 23:05:17	 *	Kinnison notes that hub.darcs.net doesn't set the encoding to utf8 on the pages it sends
2013-08-30 23:05:24	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-08-30 23:05:24	Eduard_Munteanu	I keep wishing to design a combinator to take a field number and parse it into various types.
2013-08-30 23:05:27	Kinnison	""SchÃ¶nfinkelization""
2013-08-30 23:05:31	monochrom	iso-8859-1 die die die
2013-08-30 23:05:31	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:05:41	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Client Quit)
2013-08-30 23:05:57	-->	ham1 (~ham1@87.115.15.49) has joined #haskell
2013-08-30 23:06:05	Eduard_Munteanu	I think I should do a more extensive first-pass.
2013-08-30 23:06:12	<--	ham1 (~ham1@87.115.15.49) has left #haskell
2013-08-30 23:06:15	 *	monochrom told firefox to default to utf-8
2013-08-30 23:06:20	haasn	Kinnison: the page is actually set to UTF-8 for me
2013-08-30 23:06:26	haasn	it looks like an encoding error server side, oh no
2013-08-30 23:06:27	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-30 23:06:39	Kinnison	oh well, oops
2013-08-30 23:06:42	mauke	WTF-8
2013-08-30 23:06:47	Eduard_Munteanu	Heh.
2013-08-30 23:07:06	<--	tazjin (~tazjin@c80-216-5-83.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-30 23:07:36	haasn	or perhaps a client-side error on mm_freak_'s end?
2013-08-30 23:07:51	monochrom	the http header has "Content-Type: text/html; charset=utf-8" alright
2013-08-30 23:08:11	-->	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has joined #haskell
2013-08-30 23:08:12	lispy	Also, I like that the unicode charaters break the syntax highlighting
2013-08-30 23:08:16	lispy	http://hub.darcs.net/ertes/acme-schoenfinkel/browse/Control/Category/Schoenfinkel.hs
2013-08-30 23:08:18	monochrom	emphasis: the http header, I do not mean the html code
2013-08-30 23:08:19	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-30 23:08:28	haasn	http://hub.darcs.net/nand/test-repo
2013-08-30 23:08:31	haasn	works fine for me
2013-08-30 23:08:35	-->	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has joined #haskell
2013-08-30 23:08:50	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-08-30 23:09:07	 *	monochrom hugs his home-brew program based on the HTTP library
2013-08-30 23:09:30	mm_freak_	sm: -highlight-
2013-08-30 23:10:08	haasn	(oh, I've made the repo public now so you can access it and confirm it works for you too)
2013-08-30 23:10:16	mm_freak_	http://hackage.haskell.org/package/acme-schoenfinkel
2013-08-30 23:10:20	<--	xinming (~xinming@125.82.196.167) has quit (Ping timeout: 256 seconds)
2013-08-30 23:10:21	mm_freak_	includes 'hässlich' now
2013-08-30 23:10:27	mm_freak_	and tests the unicode versions as well
2013-08-30 23:10:44	monochrom	you are to be congratulated! XD
2013-08-30 23:10:56	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-30 23:11:05	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 23:11:08	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-30 23:11:13	haasn	great, now I can use it without moral issues
2013-08-30 23:11:15	<--	Guest44651 (~brian@c-71-202-194-95.hsd1.ca.comcast.net) has quit (Read error: Operation timed out)
2013-08-30 23:11:25	monochrom	remember to update the bounds on base when a future GHC comes out!
2013-08-30 23:11:29	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-30 23:11:33	<--	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-08-30 23:11:41	sm	mm_freak_: ?
2013-08-30 23:12:00	-->	xinming (~xinming@125.82.198.43) has joined #haskell
2013-08-30 23:12:07	mm_freak_	sm: darcshub does not handle unicode properly via SSH
2013-08-30 23:12:22	<--	totte (~totte@unaffiliated/totte) has quit (Read error: Operation timed out)
2013-08-30 23:12:27	tdammers	darcshub doesn't handle unicode properly via http either
2013-08-30 23:12:33	mm_freak_	sm: ssh ertes@hub.darcs.net init acme-schoenfinkel "Schönfinkelization package: proper names for curry and uncurry."
2013-08-30 23:12:35	<--	thealanwattsriot (~brianchen@216.30.179.54) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:12:38	turiya	how do I remove an element at a specific location in a list? Does using take and drop copy the list twice unnecessarily?
2013-08-30 23:12:40	ibotty	tdammers: i noticed as well
2013-08-30 23:12:49	mm_freak_	i fixed it now via web interface
2013-08-30 23:12:59	tdammers	also, I'd like to see `häßlich` as well
2013-08-30 23:13:04	monochrom	darcs was written when GHC did not support utf-8. can't be helped.
2013-08-30 23:13:09	<--	WraithM (~WraithM@64.210.76.250) has quit (Ping timeout: 248 seconds)
2013-08-30 23:13:10	sm	rats.. patches welcome
2013-08-30 23:13:11	mm_freak_	tdammers: that's no longer proper german =)
2013-08-30 23:13:12	haasn	http://hub.darcs.net/nand/test-repo2 confirm
2013-08-30 23:13:14	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:13:19	tdammers	it was in the days of good Moses
2013-08-30 23:13:27	ski	turiya : `take n &&& drop n = splitAt n'
2013-08-30 23:13:45	<--	alvdav (~quassel@I63-5O.static.anw.at) has quit (Ping timeout: 245 seconds)
2013-08-30 23:13:51	mm_freak_	turiya: it doesn't copy twice, but it traverses twice
2013-08-30 23:13:52	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-30 23:13:53	joelteon	@pl \n -> take n &&& drop n
2013-08-30 23:13:56	lambdabot	liftM2 (&&&) take drop
2013-08-30 23:13:56	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-30 23:14:05	ski	@botsmack
2013-08-30 23:14:05	lambdabot	:)
2013-08-30 23:14:06	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-30 23:14:23	ibotty	@pl-resume
2013-08-30 23:14:24	monochrom	turiya: it will copy the first portion of the list, but should be just once if you do it right. also, use splitAt, it will traverse the list just once, but same amount of copying
2013-08-30 23:14:28	dmwit	turiya: Answer: you don't remove an element at a specific location in a list.
2013-08-30 23:14:29	lambdabot	liftM2 (&&&) take drop
2013-08-30 23:14:29	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-30 23:14:31	ibotty	(what should it do?)
2013-08-30 23:14:36	joelteon	ibotty: @pl is fucked atm
2013-08-30 23:14:38	 *	hackagebot acme-schoenfinkel 0.1.1 - Proper names for curry and uncurry  http://hackage.haskell.org/package/acme-schoenfinkel-0.1.1 (ErtugrulSoeylemez)
2013-08-30 23:14:39	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:14:40	 *	hackagebot xmlgen 0.6.0.0 - Fast XML generation library  http://hackage.haskell.org/package/xmlgen-0.6.0.0 (StefanWehr)
2013-08-30 23:14:56	monochrom	for better results, consider using a different approach altogether
2013-08-30 23:15:07	dmwit	ibotty: It should not claim it got suspended.
2013-08-30 23:15:29	dmwit	Oh, that Ertugrul. Such a joker.
2013-08-30 23:15:41	ibotty	joelteon: what about splitAt
2013-08-30 23:15:45	mm_freak_	dmwit: that's me =P
2013-08-30 23:15:55	<--	simukis_ (~simukis_@78.63.244.234) has quit (Ping timeout: 260 seconds)
2013-08-30 23:15:55	 *	dmwit waves
2013-08-30 23:16:00	lispy	monochrom: I thought the real problem with darcs and unicode is that storing arbitrary text content is not 100% compatible with encodings.
2013-08-30 23:16:04	-->	Heffalump (~ganesh@urchin.earth.li) has joined #haskell
2013-08-30 23:16:10	applicative	omg this is awesome. i want it in base!
2013-08-30 23:16:11	-->	ShaneCurran (~shane@orchestra/user/TechieShane) has joined #haskell
2013-08-30 23:16:11	lispy	monochrom: I'm trying to tihnk of how to explain...
2013-08-30 23:16:35	<--	ShaneCurran (~shane@orchestra/user/TechieShane) has quit (Excess Flood)
2013-08-30 23:16:36	dmwit	Storing text content in your RCS when the filesystem only knows bytes is a recipe for disaster, yes.
2013-08-30 23:16:41	monochrom	do you mean, darcs cannot know which encoding you want to use, for each file?
2013-08-30 23:16:45	lispy	monochrom: Maybe this example helps, someone creates a file in one encoding and someone submits a patch in a different encoding (but for that existing file)
2013-08-30 23:17:13	mm_freak_	does darcs even need to know for text files?
2013-08-30 23:17:14	dmwit	s/is a recipe/seems like a recipe/
2013-08-30 23:17:18	Kinnison	anything other than utf8 should just be banned (for interchange)
2013-08-30 23:17:19	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-08-30 23:17:21	lispy	Also, unix path names don't have encoding info stored anywhere
2013-08-30 23:17:25	tel	applicative aw, I'm not sure if I like the new name for generalization purposes or wish it dependended on strict pair
2013-08-30 23:17:25	dmwit	mm_freak_: It does patches by line. So yes.
2013-08-30 23:17:38	mm_freak_	dmwit: it does patches by line, so no
2013-08-30 23:17:43	Heffalump	dmwit: not really, because a line break is a line break
2013-08-30 23:17:47	Heffalump	it needs to know for metadata
2013-08-30 23:17:49	dmwit	mm_freak_: You're not thinking big enough. =)
2013-08-30 23:17:49	applicative	tel I agree, of course people complain about the use of lazy pairs for Arrow too.
2013-08-30 23:17:58	<--	SpyrosTr_ (~spyrostri@ppp089210054071.access.hol.gr) has quit (Remote host closed the connection)
2013-08-30 23:18:08	applicative	tel: so mm_freak_ is just repeating all the old mistakes ;)
2013-08-30 23:18:13	mm_freak_	dmwit: if my acme-schoenfinkel package proves anything, it is that i do think big enough =P
2013-08-30 23:18:16	tel	ha
2013-08-30 23:18:19	dmwit	When I write my file in UTF-32 I'll be laughing at your UTF-8 based line detection into my sleeve.
2013-08-30 23:18:25	-->	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has joined #haskell
2013-08-30 23:18:29	 *	monochrom has a cunning plan!
2013-08-30 23:18:36	mm_freak_	schoen :: (Schoenfinkel cat) => cat (a, b) c -> cat a (cat b c)
2013-08-30 23:18:37	mm_freak_	=P
2013-08-30 23:18:45	Kinnison	dmwit: I don't want your steenky patches
2013-08-30 23:18:48	monochrom	mm_freak_: for each function, provide both a strict version and a non-strict version :)
2013-08-30 23:18:51	applicative	Control.Category.Schoenfinkel.Strict
2013-08-30 23:18:55	mm_freak_	lol
2013-08-30 23:18:55	tel	bahaha
2013-08-30 23:18:58	dmwit	err
2013-08-30 23:19:00	 *	monochrom has a more cunning plan!
2013-08-30 23:19:05	dmwit	That's a rooky error. I meant UCS-32 of course.
2013-08-30 23:19:06	tel	or overload it on Field1 and Field2?
2013-08-30 23:19:09	-->	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has joined #haskell
2013-08-30 23:19:12	<--	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Read error: Connection reset by peer)
2013-08-30 23:19:16	applicative	tel, that's it!
2013-08-30 23:19:18	Kinnison	dmwit: that's more like it
2013-08-30 23:19:21	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Read error: Connection reset by peer)
2013-08-30 23:19:22	dmwit	UCS-4?
2013-08-30 23:19:22	tel	yessss
2013-08-30 23:19:23	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-30 23:19:26	dmwit	crap, I'm really making a hash of it
2013-08-30 23:19:28	monochrom	mm_freak_: for each function, add a Bool parameter for strictness :)
2013-08-30 23:19:33	Kinnison	UCS-32 sounds awesome
2013-08-30 23:19:36	-->	sleepynate (~sleepynat@199.16.190.210) has joined #haskell
2013-08-30 23:19:45	tel	monochrom oh. that's.
2013-08-30 23:19:46	mm_freak_	feel free to send patches or do pull-requests =P
2013-08-30 23:19:48	Kinnison	256 bit character codes
2013-08-30 23:19:54	tel	monochrom geniusterrible
2013-08-30 23:19:54	lispy	UCS-32: File encodings bloat edition :)
2013-08-30 23:20:03	Kinnison	One character SHA-256 hashes :-)
2013-08-30 23:20:24	lispy	We should have unicode points for x86 instructions
2013-08-30 23:20:28	applicative	i give up on the Field2 plan, it's too horrifying
2013-08-30 23:20:30	dmwit	Heffalump: I'm not 100% sure I understood your point.
2013-08-30 23:20:39	mm_freak_	WrappedSchoenfinkel does make a point, though =)
2013-08-30 23:20:46	lispy	so you could embed instructions in plaintext (yay?!)
2013-08-30 23:20:53	mm_freak_	every ArrowApply is a Schoenfinkel
2013-08-30 23:21:02	<--	Floris (~Floris@D97AC440.cm-3-3d.dynamic.ziggo.nl) has quit (Quit: Floris)
2013-08-30 23:21:20	Heffalump	I did jump into the middle of the conversation, but I thought you were talking about darcs and encoding
2013-08-30 23:21:23	mm_freak_	should rename it to WrappedArrowApply though
2013-08-30 23:21:33	dmwit	Heffalump: Yes, I think we were. And so?
2013-08-30 23:21:56	ibotty	something different: i like to use GOA in ghci, is it possible to use it even within cabal repl or cabal-dev ghci? without installing in the cabal sandbox, that is
2013-08-30 23:22:00	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Remote host closed the connection)
2013-08-30 23:22:01	Heffalump	so I was saying that I don't think the encoding matters for detecting line-endings
2013-08-30 23:22:12	dmwit	I think it does.
2013-08-30 23:22:19	<--	JobV (~Adium@70-90-40-33-Michigan.hfc.comcastbusiness.net) has quit (Quit: Leaving.)
2013-08-30 23:22:29	-->	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has joined #haskell
2013-08-30 23:22:35	tel	:t f <$> view _1 <*> view _2
2013-08-30 23:22:36	lambdabot	(Show b1, Show b2, Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1, FromExpr b) => f b
2013-08-30 23:22:40	tel	ooh
2013-08-30 23:22:42	-->	gordon_ (gordon@nano.smar.fi) has joined #haskell
2013-08-30 23:22:42	dmwit	To be somewhat obtuse about it, I choose EBCDIC as my encoding.
2013-08-30 23:22:43	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-30 23:22:44	lispy	I thought droundy told me that there are some pathelogical normalization cases for line-endings but that he deemed them sufficiently esoteric(?) to ignore them?
2013-08-30 23:22:47	-->	totte (~totte@unaffiliated/totte) has joined #haskell
2013-08-30 23:22:47	<--	Riccardo (82f58947@gateway/web/freenode/ip.130.245.137.71) has quit (Quit: Page closed)
2013-08-30 23:22:48	gordon_	hello!
2013-08-30 23:22:55	<--	SpyrosTrigazis (~spyrostri@ppp089210054071.access.hol.gr) has quit (Ping timeout: 260 seconds)
2013-08-30 23:23:00	gordon_	I've got a question about some IDE for haskell
2013-08-30 23:23:05	gordon_	what are you guys using ?
2013-08-30 23:23:07	Heffalump	dmwit: ah, ok
2013-08-30 23:23:14	lispy	gordon_: I use vim and emacs
2013-08-30 23:23:19	lispy	gordon_: not IDEs exactly
2013-08-30 23:23:26	dmwit	Heffalump: But not even being obtuse, UTF-16 is weird enough that it probably matters.
2013-08-30 23:23:29	Heffalump	I'm with droundy on that :-)
2013-08-30 23:23:29	gordon_	lispy: something more IDE-like ?
2013-08-30 23:23:30	haasn	mm_freak_: oh god
2013-08-30 23:23:31	shanse	vim and emacs?
2013-08-30 23:23:32	-->	poppingtonic (~poppingto@212.49.88.103) has joined #haskell
2013-08-30 23:23:34	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (Quit: ZNC - http://znc.in)
2013-08-30 23:23:36	gordon_	ok..
2013-08-30 23:23:39	lispy	gordon_: FPcomplete is making an IDE. It's web based. I think it's in a closed beta.
2013-08-30 23:23:41	Heffalump	dmwit: hmm, point
2013-08-30 23:23:44	acowley	gordon_: emacs with ghc-mod
2013-08-30 23:23:44	tel	applicative there's no way to write schoen with Field1 Field2, right? Because we need the two constraints together to make a prism
2013-08-30 23:23:44	lispy	gordon_: eclipseFP?
2013-08-30 23:23:52	haasn	mm_freak_: this bug goes all the way back to SSH.Util, which has fromLBS :: LBS.ByteString -> String; fromLBS = map (toEnum . fromIntegral) . LBS.unpack
2013-08-30 23:23:53	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-08-30 23:23:57	<--	jibi (~jibi@77.42.48.122) has quit (Quit: .)
2013-08-30 23:24:13	mm_freak_	haasn: that information may be useful to sm
2013-08-30 23:24:16	mm_freak_	sm: -highlight again-
2013-08-30 23:24:18	lispy	gordon_: http://eclipsefp.github.io/install.html
2013-08-30 23:24:23	gordon_	lispy: I'm not quite fan of eclipse
2013-08-30 23:24:26	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 23:24:32	gordon_	it likes to freeze after while
2013-08-30 23:24:33	tel	haasn whoa
2013-08-30 23:24:34	lispy	gordon_: You're making this difficult :)
2013-08-30 23:24:41	lispy	gordon_: what do you mean by IDE
2013-08-30 23:24:46	gordon_	lispy: well it's hard to beat intellij you know...
2013-08-30 23:24:50	lispy	gordon_: what would be your ideal IDE?
2013-08-30 23:24:58	gordon_	lispy: intellij for haskell :)
2013-08-30 23:25:00	lispy	hmmm
2013-08-30 23:25:01	-->	anachrome (~lily@adsl-69-183-229-127.dsl.wlfrct.sbcglobal.net) has joined #haskell
2013-08-30 23:25:03	gordon_	or qt creator
2013-08-30 23:25:03	ibotty	whut?
2013-08-30 23:25:23	gordon_	but now I'm looking for something fast
2013-08-30 23:25:30	gordon_	with some kind of code completion
2013-08-30 23:25:33	lispy	gordon_: have you tried tihs? https://code.google.com/p/ideah/
2013-08-30 23:25:41	sm	haasn: that would be great to drop in an issue at http://hub.darcs.net/simon/darcsden/issues
2013-08-30 23:25:56	lispy	vim has completeion
2013-08-30 23:26:00	haasn	sm: sure thing
2013-08-30 23:26:02	lispy	(so does emacs)
2013-08-30 23:26:04	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-08-30 23:26:06	gordon_	hm
2013-08-30 23:26:08	-->	mauke_ (~mauke@p3m/member/mauke) has joined #haskell
2013-08-30 23:26:09	sm	as for rendering of unicode, that may be a highlighting-kate issue
2013-08-30 23:26:13	-->	diadara__ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:26:13	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Client Quit)
2013-08-30 23:26:19	gordon_	I will use vim then
2013-08-30 23:26:20	mm_freak_	sm: that actually works
2013-08-30 23:26:28	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-30 23:26:29	gordon_	since I'm using it as text editor
2013-08-30 23:26:49	-->	preflex_ (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-08-30 23:26:49	sm	mm_freak_: I did see the color changing unexpectedly at non-ascii chars
2013-08-30 23:26:58	<--	bwr (~bwr@69.71.1.1) has quit (Quit: :q)
2013-08-30 23:26:59	mm_freak_	gordon_: intelli* is difficult in haskell
2013-08-30 23:27:15	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Ping timeout: 260 seconds)
2013-08-30 23:27:18	mm_freak_	sm: oh ok…  at least in the README.md it works
2013-08-30 23:27:26	gordon_	mm_freak_: this is why I asked here
2013-08-30 23:27:34	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Read error: Connection reset by peer)
2013-08-30 23:27:34	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-30 23:27:39	gordon_	I would like to learn something functional
2013-08-30 23:27:47	-->	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has joined #haskell
2013-08-30 23:27:49	gordon_	I will probably use scala in the end
2013-08-30 23:27:58	gordon_	but haskell is somehow 'pure functional'
2013-08-30 23:28:01	--	preflex_ is now known as preflex
2013-08-30 23:28:04	-->	jfischoff (~jfischoff@corp.imvu.com) has joined #haskell
2013-08-30 23:28:06	<--	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has quit (Remote host closed the connection)
2013-08-30 23:28:08	joelteon	heh, scala
2013-08-30 23:28:10	gordon_	so would like to learn good practices
2013-08-30 23:28:21	mm_freak_	gordon_: scala and haskell have little in common actually
2013-08-30 23:28:38	mm_freak_	haskell actually ruined me for scala =)
2013-08-30 23:28:40	lispy	if you're just learning the basics then hopefully the choice of ide/editor doesn't matter yet
2013-08-30 23:28:40	monochrom	good practice regarding which editor to use?!
2013-08-30 23:28:42	<--	ericmoritz (~ericmorit@host-7.131.54.159.gannett.com) has quit (Ping timeout: 256 seconds)
2013-08-30 23:28:42	<--	heruur (~tvh@2a00:12d0:a101:6f01:5eff:35ff:fe06:c201) has quit (Ping timeout: 264 seconds)
2013-08-30 23:28:43	gordon_	mm_freak_: it's about paradigm
2013-08-30 23:28:49	gordon_	monochrom: nah
2013-08-30 23:28:51	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-30 23:28:54	sm	thanks haasn
2013-08-30 23:28:57	-->	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-30 23:28:59	monochrom	ok that's better
2013-08-30 23:29:02	-->	heruur (~tvh@2a00:12d0:a101:6f01:223:14ff:fe98:9164) has joined #haskell
2013-08-30 23:29:08	<--	diadara__ (~diadara@115.249.18.25) has quit (Client Quit)
2013-08-30 23:29:11	<--	Taneb (~nathan@host-92-23-115-247.as13285.net) has quit (Quit: Leaving)
2013-08-30 23:29:13	mm_freak_	gordon_: start with something that doesn't get in the way of your learning experience
2013-08-30 23:29:15	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-08-30 23:29:17	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:29:19	<--	eeezkil (~eeezkil@unaffiliated/eeezkil) has quit (Quit: ^D)
2013-08-30 23:29:22	lispy	notepad.exe
2013-08-30 23:29:30	mm_freak_	in other words, don't waste your time trying to find a "good IDE", because there is none
2013-08-30 23:29:30	gordon_	mm_freak_: this is what I'm looking for
2013-08-30 23:29:36	mm_freak_	most of us just use a text editor like emacs or vim
2013-08-30 23:29:36	applicative	here's a typical passage of frege that people like van heijenoort associate with currying http://www.scribd.com/doc/118467145/gottlob-frege-m-furth-translator-the-basic-laws-of-arithmetic-exposition-of-the-system#page=155
2013-08-30 23:29:38	dmwit	lispy: ...run in Wine
2013-08-30 23:29:39	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #haskell
2013-08-30 23:29:46	gordon_	ok
2013-08-30 23:29:49	gordon_	so I will get kate ;0
2013-08-30 23:29:51	gordon_	;)
2013-08-30 23:30:05	monochrom	throw a die to choose between Haskell, OCaml, F#, Scala, whatever you think up. or learn them all.
2013-08-30 23:30:16	dmwit	"go with your heart"
2013-08-30 23:30:20	mm_freak_	gordon_: that's fine…  all you really need is an editor with a built-in command to trigger compilation =)
2013-08-30 23:30:24	-->	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-30 23:30:24	<--	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has quit (Quit: Leaving)
2013-08-30 23:30:31	mm_freak_	IIRC kate has that
2013-08-30 23:30:37	ibotty	but hdevtools integration is great
2013-08-30 23:30:39	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2013-08-30 23:30:42	 *	lispy uses split windows/tmux and has a shell in one window and vim in the other
2013-08-30 23:30:46	mm_freak_	what is hdevtools?
2013-08-30 23:30:50	<--	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has quit (Ping timeout: 245 seconds)
2013-08-30 23:30:52	--	mauke_ is now known as mauke
2013-08-30 23:30:57	ibotty	ghcmod, but faster
2013-08-30 23:31:02	mm_freak_	what is ghcmod?
2013-08-30 23:31:06	ibotty	:D
2013-08-30 23:31:09	monochrom	well, dmwit, in this case, due to lack of information, the heart says nothing. when this happens, I go with the die instead. it's in fact probabilistically better than asking stranger's opinion
2013-08-30 23:31:09	lispy	full screen terminals. I use the finest that the 1970s had to offer.
2013-08-30 23:31:16	 *	applicative uses pico-mod
2013-08-30 23:31:24	ibotty	ghc running in the background, constantly compiling your code
2013-08-30 23:31:26	ibotty	:D
2013-08-30 23:31:29	applicative	and hdev-nano
2013-08-30 23:31:33	mm_freak_	ah
2013-08-30 23:31:34	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-30 23:31:47	mm_freak_	what's that good for?
2013-08-30 23:31:52	dmwit	heart... runs on information?
2013-08-30 23:32:07	ibotty	it's great. an instance after saving, i see type errors
2013-08-30 23:32:21	mm_freak_	i see…  that would probably slow me down =)
2013-08-30 23:32:21	monochrom	like, until the day your brain has a USB 3.0 port and you can upload your brain for a full analysis, my opinion of what you should do is pretty irrelevant to what's best for you. seriously.
2013-08-30 23:32:27	mm_freak_	i often write pages of code before compiling
2013-08-30 23:32:48	-->	path[l] (~vsi@173.252.71.3) has joined #haskell
2013-08-30 23:32:59	haasn	monochrom: if a die is better than asking a stranger's opinion then just ask a stranger's opinion and do the opposite of what they suggest?
2013-08-30 23:33:09	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:33:10	-->	shahn (~shahn@f052129092.adsl.alicedsl.de) has joined #haskell
2013-08-30 23:33:14	donri	mm_freak_: in vim hdevtools can be used for inspecting types of [sub]expressions, inspect the :info of an identifier, get compilation errors and warnings on save next to the line numbers
2013-08-30 23:33:19	 *	applicative hadn't realized there'd been *so much work* on haskell.nanorc lately! https://github.com/serialhex/nano-highlight/blob/master/haskell.nanorc
2013-08-30 23:33:20	<--	scooty-puff (~andy@216.161.30.26) has quit (Ping timeout: 245 seconds)
2013-08-30 23:33:33	dmwit	haasn: Does that work when there are more than two choices?
2013-08-30 23:33:39	mm_freak_	donri: thanks, that sounds much more useful
2013-08-30 23:33:42	donri	mm_freak_: the type inspection is particularly cool
2013-08-30 23:33:48	ibotty	it's the same that ghci uses, so no
2013-08-30 23:33:53	donri	mm_freak_: especially with -fdefer-type-errors
2013-08-30 23:34:02	<--	dustin10 (~dustin10@2001:4870:600a:500::2) has quit (Quit: Leaving)
2013-08-30 23:34:05	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-30 23:34:08	mm_freak_	i think i've never used that flag
2013-08-30 23:34:18	<--	MercurialAlchemi (~Mercurial@sopona.idm.fr) has quit (Ping timeout: 264 seconds)
2013-08-30 23:34:20	dmwit	haasn: ...hm, I guess rolling a die among the choices not suggested by a stranger is still better than rolling a die among all choices.
2013-08-30 23:34:24	donri	mm_freak_: yeah it's much less usable without editor integration
2013-08-30 23:34:44	mm_freak_	what i'd really like is something like agda's emacs mode
2013-08-30 23:35:00	<--	uniquenick (~uniquenic@CPE000024ce7a51-CM78cd8e7dbf05.cpe.net.cable.rogers.com) has quit (Ping timeout: 245 seconds)
2013-08-30 23:35:03	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:35:06	<--	diadara (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-30 23:35:12	donri	yeah, can't wait for vim support for type holes, although i guess they're far from what agda provides
2013-08-30 23:35:15	mm_freak_	with holes, case splitting, inference, etc.
2013-08-30 23:35:35	<--	Okasu (~1@unaffiliated/okasu) has quit (Quit: leaving)
2013-08-30 23:35:53	tel	vim is getting type holes?
2013-08-30 23:36:09	dmwit	No, GHC is.
2013-08-30 23:36:10	tel	I would jump the emacs ship in a second
2013-08-30 23:36:11	mm_freak_	vim already has a bit type hole i think =P
2013-08-30 23:36:13	tel	oh, yes
2013-08-30 23:36:16	<--	sxn (~sxn@mnch-4d047838.pool.mediaWays.net) has quit (Ping timeout: 245 seconds)
2013-08-30 23:36:21	mm_freak_	s/bit/big/
2013-08-30 23:36:26	tel	ha
2013-08-30 23:36:31	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-30 23:36:41	-->	danilo2 (b2257576@gateway/web/freenode/ip.178.37.117.118) has joined #haskell
2013-08-30 23:36:48	tel	every time I use agda mode and then go back to Haskell I find myself C-c C-c'ing cases
2013-08-30 23:36:57	tel	that's easily my favorite
2013-08-30 23:37:29	mm_freak_	mine is C-c C-l together with holes
2013-08-30 23:37:51	<--	dgvncsz0f (~nil@unaffiliated/dsouza) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-30 23:37:51	mm_freak_	combined with C-c C-f and C-c C-a
2013-08-30 23:38:03	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-30 23:38:41	danilo2	What would you use to achive this effect: I've got a list of Strings and a Monad State function "getName" (we can use it like: newname <- getName). And I want to "zip" this string list with new generated names, so it would be something like [("a", "name1"), ("b", "name2"), ...]. Is there any simple and nice method to do it?
2013-08-30 23:38:42	--	hdevalence is now known as hdevalence|away
2013-08-30 23:38:58	tel	agsy is nice, but I tend to feel it only ever has me by about 3 seconds
2013-08-30 23:38:59	-->	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has joined #haskell
2013-08-30 23:39:00	<--	Ov3rload (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has quit (Quit: Ov3rload)
2013-08-30 23:39:12	tel	either I can give enough information for myself to figure it out or agsy can't either
2013-08-30 23:39:19	tel	but it does type for me
2013-08-30 23:39:23	<--	lambdanaut (~lambdanau@rrcs-98-101-176-171.midsouth.biz.rr.com) has quit (Remote host closed the connection)
2013-08-30 23:39:32	<--	cdidd (~cdidd@128-68-18-47.broadband.corbina.ru) has quit (Ping timeout: 268 seconds)
2013-08-30 23:39:49	-->	cdidd (~cdidd@128-68-19-30.broadband.corbina.ru) has joined #haskell
2013-08-30 23:40:32	-->	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has joined #haskell
2013-08-30 23:41:20	monochrom	danilo2: I may write my own recursion. if forced to not write my own recursion (but why?), I may absue zipWithM
2013-08-30 23:41:40	<--	phst` (~user@ppp-46-244-219-155.dynamic.mnet-online.de) has quit (Ping timeout: 245 seconds)
2013-08-30 23:41:46	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-08-30 23:42:42	monochrom	zipWithM (\a _ -> do{b<-getName; return(a,b)} ) the_string_list (repeat ())
2013-08-30 23:42:44	tel	danilo2 mapM (Data.Traversable.sequence . (return . id &&& getName))
2013-08-30 23:43:09	monochrom	oh, mapM is simpler
2013-08-30 23:43:10	tel	or monochrom's it's much actually simpler
2013-08-30 23:43:14	tel	haha
2013-08-30 23:43:20	<--	jorick (~kciroj@unaffiliated/jorick) has quit (Read error: Connection reset by peer)
2013-08-30 23:43:25	gordon_	ok guys
2013-08-30 23:43:28	gordon_	thanks for help
2013-08-30 23:43:33	gordon_	may come back later
2013-08-30 23:43:36	gordon_	take care
2013-08-30 23:43:39	monochrom	mine is more complicated due to (repeat ()) only to ignore it
2013-08-30 23:43:39	<--	gordon_ (gordon@nano.smar.fi) has left #haskell ("WeeChat 0.4.1")
2013-08-30 23:43:46	tel	okay, use mapM and don't use control arrow tricks, that'd be my actual suggestion ; )
2013-08-30 23:43:53	danilo2	monochrom, tel: Thank you. I'm going to try it :) monochrom: I wanted simply to know the easiest solution. I do not want to create my own recursions if there is a solution ;)
2013-08-30 23:43:57	-->	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has joined #haskell
2013-08-30 23:44:29	tel	danilo2 gl :)
2013-08-30 23:44:29	monochrom	yeah, combine mapM with my lambda adapted. mapM (\a -> do{b<-getName; return(a,b)})
2013-08-30 23:44:35	tel	nice
2013-08-30 23:44:38	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-08-30 23:45:02	danilo2	tel, monochrom: Ok I will :) btw - what is "&&&" ?
2013-08-30 23:45:05	tel	I do like control arrow tricks a lot
2013-08-30 23:45:23	monochrom	&&& helps you make tuples from functions
2013-08-30 23:45:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-30 23:45:25	tel	danilo2 "fanout", it takes to functions like (a -> b) and (a -> c) and turns them into (a -> (b, c))
2013-08-30 23:45:26	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-30 23:45:29	tel	:t (&&&)
2013-08-30 23:45:30	lambdabot	Arrow a => a b c -> a b c' -> a b (c, c')
2013-08-30 23:45:43	mm_freak_	:t liftA2 (,)
2013-08-30 23:45:44	lambdabot	Applicative f => f a -> f b -> f (a, b)
2013-08-30 23:45:48	monochrom	> (sin &&& abs) (-4.1)
2013-08-30 23:45:49	lambdabot	  (0.8182771110644103,4.1)
2013-08-30 23:46:03	mm_freak_	> liftA2 (,) sin abs (-4.1)
2013-08-30 23:46:04	lambdabot	  (0.8182771110644103,4.1)
2013-08-30 23:46:36	danilo2	Oh, thats nice :) Thank you :)
2013-08-30 23:46:36	-->	apfelbox (~apfelbox@2a02:8070:2720:4d00:4d00:e79a:249d:93cd) has joined #haskell
2013-08-30 23:46:39	mm_freak_	works better in theses cases:  arr (unschoen f) . (g &&& h)
2013-08-30 23:46:42	<--	ystael (~ystael@64.206.121.41) has quit (Ping timeout: 264 seconds)
2013-08-30 23:46:44	mm_freak_	liftA2 f g h
2013-08-30 23:47:11	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-08-30 23:47:19	tel	mm_freak_ unschoen. : )
2013-08-30 23:47:26	tel	it makes me happy
2013-08-30 23:47:30	mm_freak_	=)
2013-08-30 23:48:10	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-30 23:48:19	<--	augur (~augur@208.58.5.87) has quit (Remote host closed the connection)
2013-08-30 23:48:37	<--	make_sense (~make_sens@178.124.126.144) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-30 23:48:40	-->	ivoscc (~ivo@190.40.183.198) has joined #haskell
2013-08-30 23:48:53	<--	maattdd (~matthieu@wpa037066.Wireless.McGill.CA) has quit (Ping timeout: 248 seconds)
2013-08-30 23:48:57	applicative	(|sin,abs|) (-4.1)
2013-08-30 23:49:03	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-30 23:49:07	-->	DMcGill (~DMcGill@host-78-151-20-102.as13285.net) has joined #haskell
2013-08-30 23:49:15	mm_freak_	suggested by someone named applicative =)
2013-08-30 23:49:35	applicative	i'm still worried about these lazy pairs!
2013-08-30 23:49:54	monochrom	use a Bool parameter to control strictness
2013-08-30 23:49:56	tel	we could at least write unshoen f as f <$> view _1 <*> view _2
2013-08-30 23:50:18	tel	I'm still plugging away at how to get schoen from it
2013-08-30 23:50:22	-->	MercurialAlchemi (~Mercurial@178.157.253.142) has joined #haskell
2013-08-30 23:50:28	applicative	@type \f ->  f <$> view _1 <*> view _2
2013-08-30 23:50:29	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:50:35	<--	turiya (~turiya@14.99.84.16) has quit (Quit: Leaving)
2013-08-30 23:50:45	mm_freak_	monochrom: that's blind
2013-08-30 23:50:48	applicative	:(
2013-08-30 23:50:52	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-30 23:50:53	mm_freak_	data Strict = Strict | Nonstrict
2013-08-30 23:51:08	mm_freak_	newtype Strict = Strict { runStrict :: Bool }
2013-08-30 23:51:09	monochrom	oh, that's better
2013-08-30 23:51:09	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-08-30 23:51:18	applicative	hah
2013-08-30 23:51:26	tel	:)
2013-08-30 23:51:29	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-30 23:51:31	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-30 23:51:46	monochrom	in fact, why don't I suggest this:
2013-08-30 23:51:47	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-30 23:51:50	tel	:t \f -> f <$> view _1 <*> view _2
2013-08-30 23:51:50	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:51:52	applicative	the newtype associates strictness with truth
2013-08-30 23:51:52	tel	@type \f -> f <$> view _1 <*> view _2
2013-08-30 23:51:53	lambdabot	(Applicative f, MonadReader s f, Field2 s s b2 b2, Field1 s s b1 b1) => (b1 -> b2 -> b) -> f b
2013-08-30 23:51:58	mm_freak_	a more serious note i do sometimes use Alternative+Foldable as a Bool replacement
2013-08-30 23:52:07	monochrom	use an Int parameter to control strictness. now you really have no clue which number means what :)
2013-08-30 23:52:21	mm_freak_	monochrom: do you have a clue with Bool?
2013-08-30 23:52:31	tel	monochrom I think we should keep with the theme and use the german words for strict/unstrict
2013-08-30 23:52:35	applicative	strict, very strict , very very strict
2013-08-30 23:52:36	tel	or true/false
2013-08-30 23:52:40	tel	whichever is more clear
2013-08-30 23:52:41	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-30 23:52:46	monochrom	no, but Bool means fewer experiments to discover the meaning
2013-08-30 23:53:17	mm_freak_	the bits in the Int may specify the strictness on particular arguments
2013-08-30 23:53:32	mm_freak_	f 3 ⊥ x = ⊥
2013-08-30 23:53:34	tel	data Strictly = StrictA | StrictB | Strict2
2013-08-30 23:54:05	tel	then use Maybe Strictly
2013-08-30 23:54:13	mm_freak_	f 3 ⊥ y = f 3 x ⊥ = ⊥
2013-08-30 23:54:20	mm_freak_	f 1 ⊥ y = ⊥
2013-08-30 23:54:27	mm_freak_	f 2 x ⊥ = ⊥
2013-08-30 23:54:33	monochrom	this is excellent
2013-08-30 23:54:48	-->	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has joined #haskell
2013-08-30 23:54:50	mm_freak_	use Integer for functions with more than 30 arguments
2013-08-30 23:55:21	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-30 23:55:26	applicative	the german for 'lazy evaluation' seems to be 'lazy evaluation'
2013-08-30 23:55:38	applicative	Bedarfsauswertung
2013-08-30 23:55:50	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Ping timeout: 245 seconds)
2013-08-30 23:55:50	mm_freak_	applicative: faule auswertung
2013-08-30 23:55:51	tel	nicht strikt
2013-08-30 23:55:58	mm_freak_	tel: no, that's not the same thing
2013-08-30 23:56:24	tel	I don't know german, I just like the rhyme :)
2013-08-30 23:56:26	applicative	i was thinking we would translate 'call by value' as something like
2013-08-30 23:56:34	<--	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has quit (Quit: MindlessDrone)
2013-08-30 23:56:36	applicative	Wertauswertung
2013-08-30 23:56:46	tel	ooh
2013-08-30 23:56:47	applicative	making a hash of this...
2013-08-30 23:57:23	haasn	I just use “lazy Evaluation”. I don't write very good german
2013-08-30 23:57:31	mm_freak_	tel: it's not a rhyme in german =)
2013-08-30 23:57:40	tel	aw
2013-08-30 23:58:05	mm_freak_	applicative: aufruf mit/durch/via wert
2013-08-30 23:58:18	monochrom	I don't know German. I'm too lazy.
2013-08-30 23:58:42	monochrom	(Ich bin über lazy?)
2013-08-30 23:58:49	mm_freak_	ubarlazy
2013-08-30 23:58:52	monochrom	(Ichbinüberlazy?)
2013-08-30 23:59:08	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-30 23:59:22	-->	Alpha64 (~Alpha64@unaffiliated/alpha64) has joined #haskell
2013-08-30 23:59:23	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-08-31 00:00:14	<--	ljos (~bjarte@tunnel-32-84.vpn.uib.no) has quit (Ping timeout: 264 seconds)
2013-08-31 00:00:22	absence	does haskel have a bit scan / find first 0/1 function somewhere in the libs? (like the bsf/bsr x86 instruction)
2013-08-31 00:00:29	absence	haskell*
2013-08-31 00:00:37	<--	eff_ (~quassel@123.122.71.85) has quit (Ping timeout: 248 seconds)
2013-08-31 00:00:37	<--	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has quit (Remote host closed the connection)
2013-08-31 00:01:09	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 00:01:22	monochrom	anyway, Oleg et al's "extensible effects" is pretty mind-blowing. but it has a drawback. you now have to write like "v :: Int <- ask" or other ways of really nailing the type of v to Int, or whatever type you want. because the type of "ask" is too general to tell the type-inferrer
2013-08-31 00:01:54	-->	eff_ (~quassel@123.122.71.85) has joined #haskell
2013-08-31 00:01:59	-->	ulfdoz_ (~mary@p5B38BCD6.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 00:02:02	mm_freak_	absence: no, but you can define it easily in terms of Data.Bits combinators
2013-08-31 00:02:12	<--	nik_89 (~nik_89@unaffiliated/nniro) has quit (Remote host closed the connection)
2013-08-31 00:02:28	monochrom	in fact, it gets better. local ((1::Int) +) (do .. v::Int <- ask ...)  both type annotations are necessary
2013-08-31 00:03:15	ParahSailin	absence: yes i did something with those instructions
2013-08-31 00:03:21	<--	cfricke (~cfricke@96.45.197.22) has quit (Ping timeout: 245 seconds)
2013-08-31 00:03:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-08-31 00:03:38	-->	eyolfson (~eyolfson@laforge.cs.uwaterloo.ca) has joined #haskell
2013-08-31 00:03:42	<--	xBsd (~xBsd@h195-91-233-2.ln.rinet.ru) has quit
2013-08-31 00:03:58	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-31 00:04:36	<--	ulfdoz (~mary@p5B389C35.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-08-31 00:04:36	--	ulfdoz_ is now known as ulfdoz
2013-08-31 00:04:44	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-08-31 00:05:20	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 00:05:51	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 260 seconds)
2013-08-31 00:06:06	<--	io2 (~io2@unaffiliated/irrequietus) has quit
2013-08-31 00:06:07	ParahSailin	my mistake, that was the popcnt primop that is in there
2013-08-31 00:06:08	<--	DanBurton (~danburton@204-16-157-170-static.ipnetworksinc.net) has quit (Read error: Connection reset by peer)
2013-08-31 00:06:31	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Remote host closed the connection)
2013-08-31 00:06:33	chrisdone	monochrom: what do you think of Disciple?
2013-08-31 00:06:49	chrisdone	and its effect typing
2013-08-31 00:06:50	monochrom	I don't know. haven't looked.
2013-08-31 00:07:46	-->	apeiros (~apeiros@77-58-115-64.dclient.hispeed.ch) has joined #haskell
2013-08-31 00:07:55	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Quit: scooty-puff)
2013-08-31 00:07:57	<--	apeiros (~apeiros@77-58-115-64.dclient.hispeed.ch) has left #haskell
2013-08-31 00:08:05	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-31 00:08:31	<--	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 00:08:34	absence	ParahSailin, mm_freak_: ok no problem, i'll define my own. thanks!
2013-08-31 00:08:49	chrisdone	monochrom: dude it's ace
2013-08-31 00:08:58	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 00:08:59	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-08-31 00:09:11	<--	ulfdoz (~mary@p5B38BCD6.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-08-31 00:09:17	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:09:18	haasn	> lengthOf (takingWhile not bits) 512
2013-08-31 00:09:19	lambdabot	  9
2013-08-31 00:09:30	monochrom	can a free monad be made a MonadFix? what restriction on the functor is sufficient? or is it hopeless?
2013-08-31 00:09:32	-->	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has joined #haskell
2013-08-31 00:09:44	<--	stevej (~stevej@162-205-176-51.lightspeed.sntcca.sbcglobal.net) has quit (Quit: invalid pointer/painter)
2013-08-31 00:09:47	<--	tcrayford (tcrayford@gateway/shell/ircrelay.com/x-fyiirmrkbzaeetgh) has left #haskell ("Linkinus - http://linkinus.com")
2013-08-31 00:09:49	bootcode	g'night
2013-08-31 00:09:50	haasn	absence: like this? ^
2013-08-31 00:09:50	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Remote host closed the connection)
2013-08-31 00:10:36	applicative	"If the intel bsf and bsr instructions ever become GHC primops, this code should be reimplemented using these."
2013-08-31 00:10:44	applicative	says Data.IntSet
2013-08-31 00:10:51	bootcode	i have plain text + some line/col based regions, which I would like to convert to fancy highlighted html. Anyone aware of a suitable library?
2013-08-31 00:11:12	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 00:11:16	-->	staafl (~staafl@95-42-27-15.btc-net.bg) has joined #haskell
2013-08-31 00:11:33	<--	staafl (~staafl@95-42-27-15.btc-net.bg) has quit (Read error: Connection reset by peer)
2013-08-31 00:11:35	ParahSailin	absence: here's how you make a primop http://ghc.haskell.org/trac/ghc/ticket/5413
2013-08-31 00:11:35	ski	`bsf' ?
2013-08-31 00:11:38	chrisdone	bootcode: how do you want to highlight the plain text?
2013-08-31 00:11:55	mm_freak_	monochrom: pretty much hopeless
2013-08-31 00:12:16	mm_freak_	the proper answer is:  we don't know how to do it
2013-08-31 00:12:20	applicative	bit scan forward
2013-08-31 00:12:22	bootcode	chrisdone: with custom spans with ids, will plug some js in them
2013-08-31 00:12:23	newbie_	a question about lens. In http://pastebin.com/QThQMd1s, how do i use strike?
2013-08-31 00:12:30	mauke	The paste QThQMd1s has been copied to http://lpaste.net/92340
2013-08-31 00:12:42	ski	applicative : so `bsr' isn't "branch to subroutine" then ?
2013-08-31 00:12:49	Th0mas	I'm having a bit of trouble understanding the functioning of (>>). What determines that it executes the first argument before the second? I can understand why this works with (>>=) where the second argument depends on the return value of the first, but with (>>) it doesn't. Could anyone explain?
2013-08-31 00:12:51	<--	matheus23 (~quassel@p4FDF262A.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2013-08-31 00:12:52	chrisdone	bootcode: so what does f "hello world" output?
2013-08-31 00:12:52	applicative	I'm not seeing a lot of progress on that one ParahSailin
2013-08-31 00:13:10	applicative	> f "hello world"
2013-08-31 00:13:11	lambdabot	  No instance for (Debug.SimpleReflect.Expr.FromExpr a0)
2013-08-31 00:13:11	lambdabot	   arising from a us...
2013-08-31 00:13:13	newbie_	i mean, execStateT strike initialState must be modified to take new arg
2013-08-31 00:13:13	<--	amyers (~quassel@c-68-48-207-151.hsd1.md.comcast.net) has quit (Read error: Operation timed out)
2013-08-31 00:13:20	<--	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has quit (Ping timeout: 245 seconds)
2013-08-31 00:13:34	Heffalump	Th0mas: there's no particular guarantee, it just depends on the monad
2013-08-31 00:13:42	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-08-31 00:13:43	monochrom	Th0mas: it depends on the monad. for IO, it executes left-to-right because IO says so
2013-08-31 00:13:56	Heffalump	m1 >> m2 is no different from m1 >>= \_ -> m2, in any case
2013-08-31 00:14:22	Heffalump	but consider the Maybe monad
2013-08-31 00:14:26	Th0mas	Hm, alright, but how is that implemented inside of IO then?
2013-08-31 00:14:31	monochrom	for examples of right-to-left, see my http://lpaste.net/41790/ and http://lpaste.net/63925
2013-08-31 00:14:32	-->	mbrock (~mbrock@static.114.24.47.78.clients.your-server.de) has joined #haskell
2013-08-31 00:14:35	Chousuke	Th0mas: magic :p
2013-08-31 00:14:42	<--	LazinCajun (~LazinCaju@c-71-56-1-128.hsd1.ga.comcast.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 00:14:44	Heffalump	that will also force left->right evaluation at least to the point of checkign that the left-hand argument is None or Some.
2013-08-31 00:14:46	bootcode	chrisdone: assuming I have regions A:[0,3) and B:[6,8) it outputs "<span id="A">hel</span>lo <span id="B">wo</span>rld"
2013-08-31 00:14:55	Heffalump	I mean Just or Nothing (sorry, too much F#...)
2013-08-31 00:15:05	applicative	i assume >> is separately implemented for IO, so that it can mean approximately, "and then"
2013-08-31 00:15:05	ski	Th0mas : `IO' is a primitive, just like `Int' or `Float'
2013-08-31 00:15:06	monochrom	IO is implemented by the compiler making up object code
2013-08-31 00:15:11	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Ping timeout: 260 seconds)
2013-08-31 00:15:32	monochrom	and the compiler obviously chooses to invent object code that does left-to-right
2013-08-31 00:15:43	bootcode	chrisdone: I don't have problem implementing it, just though worth a question to deduplicate effort
2013-08-31 00:16:01	chrisdone	bootcode: hm, nope, don't know of such function
2013-08-31 00:16:09	Cale	applicative: It wouldn't have to be separately implemented, but it might be
2013-08-31 00:16:21	bootcode	chrisdone: np, thanks
2013-08-31 00:16:39	applicative	Cale: of course. iobind is implemented so as to mean 'and then, with the result...'
2013-08-31 00:16:40	Cale	applicative: Even with the hacky implementation that GHC uses, the data dependencies will keep things straight.
2013-08-31 00:17:27	chrisdone	bootcode: that might be a nice function to package =) applyTransformations :: [(Int,Int,Text -> Text)] -> Text -> Text
2013-08-31 00:17:36	 *	applicative only believes in the ajhc's implementation of io since it's guaranteed to be truly opaque 
2013-08-31 00:17:42	Th0mas	ski, monochrom, Heffalump: Ah alright, kinda makes sense. So are there more of these magic monads? I assume you can't do this with monads implemented in Haskell?
2013-08-31 00:17:53	monochrom	ST
2013-08-31 00:17:56	chrisdone	applicative: 'believe in'?
2013-08-31 00:18:10	monochrom	STM (unrelated to ST)
2013-08-31 00:18:30	<--	xplat_ (~james@67.205.253.80) has quit (Ping timeout: 264 seconds)
2013-08-31 00:18:34	monochrom	if you write your own monad, you can make it do whatever you want
2013-08-31 00:18:36	<--	eyolfson (~eyolfson@laforge.cs.uwaterloo.ca) has left #haskell ("WeeChat 0.4.1")
2013-08-31 00:18:56	-->	kingugo (~kingugo@196.46.245.50) has joined #haskell
2013-08-31 00:19:04	applicative	chrisdone: what, you believe in Hugs' IO?
2013-08-31 00:19:12	monochrom	including left-to-right, right-to-left, and there-and-back-again
2013-08-31 00:19:17	Th0mas	monochrom: Even if you implement it in Haskell? Doesn't it all boil down to some piece of "magic" in the end?
2013-08-31 00:19:18	chrisdone	applicative:  i don't know, it depends what 'believe in' means
2013-08-31 00:19:24	mm_freak_	out-and-back-in
2013-08-31 00:19:32	<--	kingugo (~kingugo@196.46.245.50) has quit (Client Quit)
2013-08-31 00:19:36	haasn	Identity
2013-08-31 00:19:40	monochrom	(indeed, logicT is there-and-back-again. it is exactly for trying and backtracking)
2013-08-31 00:19:56	applicative	http://ogi.altocumulus.org/~hallgren/Programatica/tools/pfe.cgi?Hugs.Prelude#tIO
2013-08-31 00:19:57	chrisdone	applicative: is it like Luke, I believe in you, or like I believe in Santa Claus, or what?
2013-08-31 00:20:26	-->	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 00:20:27	applicative	chrisdone: I mean, I avoid these disputes by pointing out that there are diverse implementations
2013-08-31 00:20:34	mm_freak_	Free, Coroutine and ContinueT are out-and-back-in
2013-08-31 00:20:37	monochrom	no, a lot of monads are just very complex pure functions. they are still pure functions. they are just complex enough you want to put a simpler monadic face in front
2013-08-31 00:20:41	applicative	ghc, I believe in you!
2013-08-31 00:21:01	-->	Patchou (~Tamae@mna75-1-81-57-129-31.fbx.proxad.net) has joined #haskell
2013-08-31 00:21:14	monochrom	for example Control.Monad.State.Strict (left-to-right) and Control.Monad.State.Lazy (right-to-left).
2013-08-31 00:21:15	<--	carp (5c1e45c9@gateway/web/freenode/ip.92.30.69.201) has left #haskell
2013-08-31 00:21:27	mm_freak_	ContT can also do mark-and-return
2013-08-31 00:21:30	tel	Th0mas Usually there end up being roughly two steps—you build the monad that models whatever kind of effect you want and then you interpret it into whatever magic monads have the runtime effects you want
2013-08-31 00:21:30	<--	shahn (~shahn@f052129092.adsl.alicedsl.de) has quit (Quit: Konversation terminated!)
2013-08-31 00:21:38	monochrom	guess what, they're both s -> (s, a). (or s -> (a,s), I forgot which, doesn't matter)
2013-08-31 00:22:02	mm_freak_	monochrom: memorize "sas" =)
2013-08-31 00:22:07	mm_freak_	s -> (a, s)
2013-08-31 00:22:17	Th0mas	monochrom: Interesting, still can't quite bend my mind around it though, I'll look into those definitions
2013-08-31 00:22:17	chrisdone	monochrom: we need named tuples like trex =)
2013-08-31 00:22:22	mm_freak_	or check random's type
2013-08-31 00:22:24	mm_freak_	:t random
2013-08-31 00:22:25	lambdabot	(RandomGen g, Random a) => g -> (a, g)
2013-08-31 00:22:28	Cale	applicative: It *looks* like they're doing something similar, though I'm entirely unfamiliar with ajhc: https://github.com/ajhc/ajhc/blob/arafura/lib/jhc-prim/Jhc/Prim/IO.hs
2013-08-31 00:22:30	chrisdone	s -> (state::s,value::a)
2013-08-31 00:23:06	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 00:23:06	tel	Th0mas try reading about free monads, http://www.haskellforall.com/2012/07/purify-code-using-free-monads.html
2013-08-31 00:23:06	mm_freak_	random's interface is almost made for state monads
2013-08-31 00:23:13	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 00:23:34	<--	Tamae (~Tamae@mna75-1-81-57-129-31.fbx.proxad.net) has quit (Ping timeout: 246 seconds)
2013-08-31 00:23:36	Cale	It would be nice to see a compiler which attempted a representation of IO actions which didn't rely on polluting the meaning of type level (->)
2013-08-31 00:23:49	ski	applicative : "ajhc" ?
2013-08-31 00:23:53	monochrom	the problem with "mnemonic: sas" is: why is it not "mnemonic: ssa" :)
2013-08-31 00:24:07	Cale	ski: http://ajhc.metasepi.org/
2013-08-31 00:24:12	Th0mas	tel: Thanks, will read that
2013-08-31 00:24:30	applicative	ski i was just fiddling with it earlier https://github.com/ajhc/ajhc
2013-08-31 00:24:34	<--	jayprich (~jayprich@unaffiliated/jayprich) has quit (Ping timeout: 256 seconds)
2013-08-31 00:24:46	applicative	amazingly it builds without a hitch
2013-08-31 00:24:51	<--	gehmehgeh (~geh@unaffiliated/gehmehgeh) has quit (Quit: leaving)
2013-08-31 00:24:53	chrisdone	cale: https://github.com/chrisdone/fore#translating-to-javascript =p
2013-08-31 00:25:25	applicative	ski: it makes a very nice, small 'hello world' which i'm sure you were much asking after
2013-08-31 00:25:47	<--	xRamses (~xRamses@194-166-73-195.adsl.highway.telekom.at) has quit (Ping timeout: 268 seconds)
2013-08-31 00:25:58	chrisdone	cale: https://github.com/chrisdone/fore/blob/master/js/instances.js#L68
2013-08-31 00:26:00	applicative	did mm_freak_ say ssa or sas?
2013-08-31 00:26:06	mm_freak_	monochrom: because it fits with other things =)
2013-08-31 00:26:11	bos	lenses. zomg.
2013-08-31 00:26:17	ski	applicative : hm, not sure that i was asking after anything ?
2013-08-31 00:26:18	applicative	@type unfoldr
2013-08-31 00:26:19	lambdabot	(b -> Maybe (a, b)) -> b -> [a]
2013-08-31 00:26:29	<--	newbie_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 00:27:00	ski	monochrom : the way to recall `s -> (s, a)' vs. `s -> (a,s)' is that it's the wrong one
2013-08-31 00:27:07	applicative	bos they're great just stick to the main three combinators
2013-08-31 00:27:26	bos	applicative: i have no idea how i'd figure out what the main combinators are
2013-08-31 00:27:26	c_wraith	I still think unfoldr is an incredibly awkward type!
2013-08-31 00:27:38	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 00:27:59	ski	chrisdone : Trex :)
2013-08-31 00:28:10	mm_freak_	> unfoldr (Just . randomR (0, 9)) (mkStdGen 0)
2013-08-31 00:28:11	chrisdone	ski: yay someone else who likes it =)
2013-08-31 00:28:11	lambdabot	  [5,5,5,0,2,9,3,3,3,8,5,2,4,2,6,7,2,3,7,4,4,8,2,7,8,1,2,1,3,2,9,4,5,6,2,2,2,...
2013-08-31 00:28:14	Cale	(,) s is itself a functor, and so it would be much nicer to use s -> (s,a), but for whatever reason, mtl doesn't.
2013-08-31 00:28:17	FreeFull	:t state random
2013-08-31 00:28:23	lambdabot	(MonadState s m, RandomGen s, Random a) => m a
2013-08-31 00:28:44	applicative	> (True,False) ^. _1
2013-08-31 00:28:46	lambdabot	  True
2013-08-31 00:28:48	ski	chrisdone : now if only we could have lightweight variants as well (OCaml calls them "polymorphic variants") or at least positional variants ..
2013-08-31 00:28:53	applicative	there's one combinator bos ^^^
2013-08-31 00:29:03	chrisdone	ski: what's that?
2013-08-31 00:29:03	mm_freak_	Cale: s -> (s, a) would be more sensible, but then you would have to swap everything else all the time
2013-08-31 00:29:17	Cale	mm_freak_: You mean, in existing code
2013-08-31 00:29:29	mm_freak_	Cale: in existing libraries
2013-08-31 00:29:32	mm_freak_	for example 'random'
2013-08-31 00:29:36	mm_freak_	:t state random
2013-08-31 00:29:37	lambdabot	(MonadState s m, RandomGen s, Random a) => m a
2013-08-31 00:29:39	 *	hackagebot hspec-expectations 0.3.3 - Catchy combinators for HUnit  http://hackage.haskell.org/package/hspec-expectations-0.3.3 (SimonHengel)
2013-08-31 00:29:45	applicative	> _1 .~ "California" $ (1,2)
2013-08-31 00:29:46	lambdabot	  ("California",2)
2013-08-31 00:29:51	applicative	theres the other ^^ bos
2013-08-31 00:29:53	Cale	right, well, it's obviously in the wrong order in random as well
2013-08-31 00:30:04	ski	chrisdone : so you can say `foo :: Blah -> (forward :: X | back :: Y | stay :: Z)' or whatever
2013-08-31 00:30:13	bos	applicative: i'm trying to figure out how to use lenses from a state monad to transform part of the state
2013-08-31 00:30:30	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-08-31 00:30:31	applicative	easy
2013-08-31 00:30:31	donri	bos: the "=" operators
2013-08-31 00:30:36	tel	applicative bos or for the combinator shy: view and set
2013-08-31 00:30:41	donri	:t (.=)
2013-08-31 00:30:42	lambdabot	MonadState s m => ASetter s s a b -> b -> m ()
2013-08-31 00:30:45	ski	chrisdone : when you don't want to either use `Either's (possibly nesting them, or say `Either3',&c.) nor having to define a new type for a one- or two-off use case
2013-08-31 00:30:49	chrisdone	ski: as a sum type?
2013-08-31 00:30:52	ski	yes
2013-08-31 00:30:53	chrisdone	ski: nice =)
2013-08-31 00:30:54	applicative	> runState (_1 += 1 ) (1,"California")
2013-08-31 00:30:55	lambdabot	  ((),(2,"California"))
2013-08-31 00:31:04	chrisdone	ski: that would indeed be cool
2013-08-31 00:31:22	-->	pootler (~merv.hamm@94.198.124.172) has joined #haskell
2013-08-31 00:31:23	-->	augur (~augur@ip-64-134-240-172.public.wayport.net) has joined #haskell
2013-08-31 00:31:24	<--	MigoMipo (~MigoMipo@84-217-193-174.tn.glocalnet.net) has quit (Quit: Leaving)
2013-08-31 00:31:31	bos	applicative: ah, found http://www.haskellforall.com/2013/05/program-imperatively-using-haskell.html
2013-08-31 00:31:32	Cale	chrisdone: That's pretty reasonable-looking
2013-08-31 00:31:38	ski	chrisdone : see <http://caml.inria.fr/pub/docs/manual-ocaml-4.00/manual006.html#toc36> for OCaml's take on that (including some subtyping stuff as well)
2013-08-31 00:31:41	applicative	> runState (_1 += 1 ; _2 %= reverse ) (1,"California")
2013-08-31 00:31:42	lambdabot	  <hint>:1:19: parse error on input `;'
2013-08-31 00:31:46	applicative	uho
2013-08-31 00:31:56	applicative	> runState (do {_1 += 1 ; _2 %= reverse }) (1,"California")
2013-08-31 00:31:57	lambdabot	  ((),(2,"ainrofilaC"))
2013-08-31 00:31:59	chrisdone	cale: although i suppose it's based on GHC, so the (->) abuse already happened by this point
2013-08-31 00:32:02	bos	applicative: ver' nice
2013-08-31 00:32:28	donri	bos: https://github.com/ekmett/lens/blob/master/examples/Pong.hs
2013-08-31 00:32:29	tel	bos the Pong example is pretty nice for state updating lenses
2013-08-31 00:32:30	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-08-31 00:32:31	applicative	> runState (do {_1 += 1 ; _2._1 %= reverse }) (1,(True,"California"))
2013-08-31 00:32:32	lambdabot	  Couldn't match type `GHC.Types.Bool' with `[a0]'
2013-08-31 00:32:32	tel	donri :)
2013-08-31 00:32:35	applicative	oops
2013-08-31 00:32:43	chrisdone	ski: so much cool stuff in ocaml
2013-08-31 00:32:44	applicative	> runState (do {_1 += 1 ; _2._2 %= reverse }) (1,(True,"California"))
2013-08-31 00:32:46	lambdabot	  ((),(2,(True,"ainrofilaC")))
2013-08-31 00:32:58	bos	donri: thanks
2013-08-31 00:33:03	tel	checkBounds uses (^.) (%=) (+=) (*=)
2013-08-31 00:33:12	ski	chrisdone : yeah, i try to keep an eye on the MLs (and Scheme)
2013-08-31 00:33:18	 *	monochrom needs a backtracking monad to search in github source trees
2013-08-31 00:33:22	-->	myname_ (~yyetim@sat.ee.Princeton.EDU) has joined #haskell
2013-08-31 00:33:24	applicative	yes that pong of haasn s is better than most tutorials
2013-08-31 00:33:44	ski	monochrom : the `Back' button doesn't work ?
2013-08-31 00:33:51	ski	monochrom : try the `Clone' button ?
2013-08-31 00:33:51	donri	chrisdone: did you see https://www.google-melange.com/gsoc/project/google/gsoc2013/adamgundry/23001
2013-08-31 00:33:53	chrisdone	ski: i also saw a while back the partially applied named function arguments which was interesting
2013-08-31 00:33:55	-->	ts33kr (~ts33kr@37.229.98.23) has joined #haskell
2013-08-31 00:34:06	<--	yogert (~Adium@cpe-71-67-124-248.cinci.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 00:34:08	ski	chrisdone : what was that ?
2013-08-31 00:34:22	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 00:34:24	FreeFull	> flip runState (mkStdGen 0) $ sequence . repeat 10 $ state random
2013-08-31 00:34:25	lambdabot	  Couldn't match expected type `m0 a2
2013-08-31 00:34:25	lambdabot	                               -> [Cont...
2013-08-31 00:34:39	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 00:34:40	monochrom	the 'back' button works
2013-08-31 00:34:40	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-08-31 00:35:11	<--	bitonic` (~user@xdsl-188-155-179-93.adslplus.ch) has quit (Read error: Operation timed out)
2013-08-31 00:35:14	leroux	Is there anything like <$> but for allow IO?
2013-08-31 00:35:20	chrisdone	donri: nope
2013-08-31 00:35:23	ski	leroux : with what type ?
2013-08-31 00:35:29	leroux	Umm, so a Maybe.
2013-08-31 00:35:39	monochrom	Hug's IO is cool, it's almost Codensity of the free monad you expect, except for this Obj type
2013-08-31 00:35:47	FreeFull	> flip runState (mkStdGen 0) . sequence . replicate 10 $ state random
2013-08-31 00:35:48	lambdabot	  ([2092838931,-2143208520,2034827062,-1587933427,-1272503422,316817438,20070...
2013-08-31 00:35:58	ski	@type (<$>) :: (a -> b) -> (IO a -> IO b)
2013-08-31 00:35:59	lambdabot	(a -> b) -> IO a -> IO b
2013-08-31 00:36:09	tel	leroux IO is a Functor, so read <$> getLine works
2013-08-31 00:36:11	<--	xinming (~xinming@125.82.198.43) has quit (Ping timeout: 260 seconds)
2013-08-31 00:36:16	ski	leroux : do you want `(a -> Maybe b) -> (IO a -> IO (Maybe b))' ?
2013-08-31 00:36:19	<--	sleepynate (~sleepynat@199.16.190.210) has quit (Remote host closed the connection)
2013-08-31 00:36:24	chrisdone	ski: i don't remember the syntax, but it was something like: let f :: foo:Int -> bar:Char -> () = …;  and then f bar:'a' would have type foo:Char -> ()
2013-08-31 00:36:40	chrisdone	ski: similar to keyword args in lisp, but you could partially apply them
2013-08-31 00:36:59	leroux	Umm. I need `(a -> IO b) -> Maybe a -> b`.
2013-08-31 00:37:01	leroux	Something like that.
2013-08-31 00:37:02	FreeFull	leroux: You can do all possible IO using <$> and join
2013-08-31 00:37:08	leroux	I can do thsi with cases.
2013-08-31 00:37:09	FreeFull	Ah
2013-08-31 00:37:21	FreeFull	No, you can't do that
2013-08-31 00:37:21	leroux	I did, but I'd rather find a better way to do it.
2013-08-31 00:37:27	leroux	Oh.
2013-08-31 00:37:28	-->	nasarde (~user@OL203-132.fibertel.com.ar) has joined #haskell
2013-08-31 00:37:31	leroux	So, just stick with using a case?
2013-08-31 00:37:33	FreeFull	You could if it was IO b at the end
2013-08-31 00:37:41	leroux	Sure, IO b at the end.
2013-08-31 00:37:44	leroux	I'm doing this in a do.
2013-08-31 00:37:47	leroux	Sorry about that.
2013-08-31 00:37:50	-->	xinming (~xinming@125.87.84.67) has joined #haskell
2013-08-31 00:38:01	augur	byorgey: :)
2013-08-31 00:38:09	FreeFull	What do you want to happen if the function is given Nothing?
2013-08-31 00:38:18	leroux	I need to it return Nothing.
2013-08-31 00:38:20	chrisdone	donri: i quite liked spj's proposal, good to see this guy is going to do that
2013-08-31 00:38:20	monochrom	my question too. what if Nothing
2013-08-31 00:38:32	leroux	I'll paste my code, one sec.
2013-08-31 00:38:42	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 00:39:00	<--	Pranz (~Zorro_24@c80-217-216-30.bredband.comhem.se) has quit (Quit: Lämnar)
2013-08-31 00:39:03	chrisdone	ski: (i really don't know ocaml, so sorry if that syntax is completely ass-backwards)
2013-08-31 00:39:09	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 00:39:10	mm_freak_	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:39:19	FreeFull	mm_freak_: I just wrote that
2013-08-31 00:39:34	<--	lurkorg (~alex@145.255.244.150) has quit (Quit: Leaving.)
2013-08-31 00:39:40	mm_freak_	FreeFull: didn't see it
2013-08-31 00:39:47	FreeFull	mm_freak_: I didn't send it before you did
2013-08-31 00:39:53	mm_freak_	ah =)
2013-08-31 00:39:56	mm_freak_	haha =P
2013-08-31 00:40:02	FreeFull	=P
2013-08-31 00:40:36	FreeFull	:t fmap (undefined :: a -> IO b) Nothing
2013-08-31 00:40:37	lambdabot	Maybe (IO b)
2013-08-31 00:40:38	<--	ski (~md9slj@t-2020-07.studat.chalmers.se) has quit (Ping timeout: 240 seconds)
2013-08-31 00:40:41	FreeFull	Hmm
2013-08-31 00:40:53	leroux	mm_freak_: Yeah, I need that.
2013-08-31 00:41:06	leroux	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:07	<--	donri (~dag@unaffiliated/dagodenhall) has quit (Read error: Connection reset by peer)
2013-08-31 00:41:13	mm_freak_	:t T.traverse :: (a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:14	lambdabot	(a -> IO b) -> Maybe a -> IO (Maybe b)
2013-08-31 00:41:22	leroux	Ahh, cool.
2013-08-31 00:41:29	monochrom	God
2013-08-31 00:41:31	mm_freak_	import Data.Traversable (traverse)
2013-08-31 00:41:32	FreeFull	mm_freak_: There probably is some other way too
2013-08-31 00:41:43	<--	tel (~tel@209.249.230.2) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 00:42:02	myname_	what libraries do you prefer for data crunching on large text files? PCRE? ByteString? FFI?
2013-08-31 00:42:08	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 00:42:19	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 00:42:21	mm_freak_	myname_: depends on the type of data crunching
2013-08-31 00:42:23	<--	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:42:33	myname_	just big text files with floats and ints in them
2013-08-31 00:42:44	mm_freak_	myname_: that doesn't really answer the question
2013-08-31 00:42:52	myname_	i mean in the general sense
2013-08-31 00:42:56	myname_	let's say
2013-08-31 00:43:12	lpaste	leroux pasted “No title” at http://lpaste.net/92341
2013-08-31 00:43:15	myname_	i want to add some numbers that start with a particular string
2013-08-31 00:43:21	chrisdone	the general sense is the problem, the choice depends on the particular
2013-08-31 00:43:24	myname_	and multiply with some other string
2013-08-31 00:43:39	leroux	FreeFull: mm_freak_: http://lpaste.net/92341
2013-08-31 00:43:43	mm_freak_	myname_: this is really two steps:  the parsing and the handling
2013-08-31 00:43:55	leroux	Going to try traverse now.
2013-08-31 00:43:59	myname_	yes, for parsing, i can simply use String with regular expr
2013-08-31 00:44:05	myname_	but that is very slow
2013-08-31 00:44:34	myname_	or i can use ByteString's, but in the end the code looks too cluttered
2013-08-31 00:44:35	<--	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 00:44:44	bos	ok, code converted to lenses and StateT in not too much time, whew
2013-08-31 00:44:51	mm_freak_	myname_: for a small command line application it's easiest to use a lazy Text
2013-08-31 00:44:53	myname_	i was wondering if other people had experience
2013-08-31 00:44:54	chrisdone	if it's binary, or near binary, it can be ByteString with parsec with binary, cereal or attoparsec, or bytestring-based regexps. if it's text, you can use parsec with Text
2013-08-31 00:45:12	mm_freak_	attoparsec is fine if the grammar is more complicated than that
2013-08-31 00:45:33	myname_	i realized bytestring has integer parsing
2013-08-31 00:45:36	myname_	but not float parsing
2013-08-31 00:45:42	-->	rckrd (~root@c-03cce555.020-157-73746f39.cust.bredbandsbolaget.se) has joined #haskell
2013-08-31 00:45:45	mm_freak_	ByteString is a bad idea for text
2013-08-31 00:45:47	myname_	what would be easiest to parse floats?
2013-08-31 00:46:00	mm_freak_	the "easiest" in the literal sense is 'read'
2013-08-31 00:46:11	mm_freak_	> read "1.5e10" :: Double
2013-08-31 00:46:12	chrisdone	the text package has various number parsers
2013-08-31 00:46:12	lambdabot	  1.5e10
2013-08-31 00:46:14	myname_	definitely, but "read" is very slow
2013-08-31 00:46:15	chrisdone	http://hackage.haskell.org/packages/archive/text/0.11.3.1/doc/html/Data-Text-Read.html
2013-08-31 00:46:22	myname_	on text
2013-08-31 00:46:35	myname_	if the text had integers
2013-08-31 00:46:45	myname_	i would definitely use bytestring, which is significantly faster
2013-08-31 00:46:56	myname_	but with floats in them, do i have to write my own parser?
2013-08-31 00:46:57	mm_freak_	myname_: first find a good package for parsing numbers…  then my personal way would be to embed the parser in a pipes Pipe
2013-08-31 00:47:33	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 00:47:44	myname_	is there a reason why bytestring doesn't support float parsing?
2013-08-31 00:47:44	bos	myname_: if you need to parse doubles very efficiently, use the double-conversion package
2013-08-31 00:47:47	mm_freak_	myname_: and no, ByteString is not significantly faster than Text
2013-08-31 00:47:59	myname_	i've tried several things
2013-08-31 00:48:02	bos	myname_: parsing doubles is very very complicated
2013-08-31 00:48:03	myname_	it worked pretty fast for me
2013-08-31 00:48:04	mm_freak_	it's slightly faster and the difference will be shadowed by I/O speed
2013-08-31 00:48:07	myname_	about 5x
2013-08-31 00:48:13	--	clahey is now known as cl_away
2013-08-31 00:48:26	mm_freak_	5x compared to what?
2013-08-31 00:48:30	<--	resnik (~sethroot@108.71.82.84) has quit (Ping timeout: 264 seconds)
2013-08-31 00:48:30	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Ping timeout: 264 seconds)
2013-08-31 00:48:40	shachaf	bos: Is that a UPS pun of some sort?
2013-08-31 00:48:42	myname_	read with regular strings
2013-08-31 00:48:51	bos	shachaf: what?
2013-08-31 00:48:51	mm_freak_	myname_: again, i'm talking about Text, not String
2013-08-31 00:48:58	shachaf	"double conversion". I guess not.
2013-08-31 00:48:59	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-08-31 00:49:03	monochrom	String is known to be fat and slow
2013-08-31 00:49:10	<--	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has quit (Ping timeout: 256 seconds)
2013-08-31 00:49:14	<--	sferry_ (~samuel@143.226.94.218) has quit (Quit: This computer has gone to sleep)
2013-08-31 00:49:51	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 00:49:57	<--	djcoin (~djcoin@ip-189.net-81-220-96.nantes.rev.numericable.fr) has quit (Quit: WeeChat 0.4.0)
2013-08-31 00:50:28	<--	kobain (~kobian@unaffiliated/kobain) has quit
2013-08-31 00:50:35	applicative	can i tell "ghc -e" to bring a module in scope?
2013-08-31 00:50:42	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 00:50:46	myname_	i hadn't seen Text in use before!
2013-08-31 00:50:55	myname_	is it as general as String
2013-08-31 00:50:55	<--	seschwar (~seschwar@unaffiliated/seschwar) has quit (Quit: :qa)
2013-08-31 00:50:58	chrisdone	yes
2013-08-31 00:50:59	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 00:51:10	chrisdone	everyone serious uses text these days
2013-08-31 00:51:17	mm_freak_	myname_: strict Text is not, but lazy Text is
2013-08-31 00:51:27	-->	desc|zenbook (~heh@120.141.196.237) has joined #haskell
2013-08-31 00:51:30	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 00:51:33	myname_	with Double, Int parsing, and support for regular expression libraries?
2013-08-31 00:51:37	mm_freak_	i think lazy Text and String are isomorphic
2013-08-31 00:51:44	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 240 seconds)
2013-08-31 00:51:52	myname_	nice
2013-08-31 00:51:55	mm_freak_	myname_: not sure what library to use for Double parsing, but otherwise yes
2013-08-31 00:52:16	chrisdone	i suppose it depends on the doubles in question
2013-08-31 00:52:17	bos	mm_freak_: text
2013-08-31 00:52:22	<--	kttm (~kttm@p57954141.dip0.t-ipconnect.de) has quit (Quit: leaving)
2013-08-31 00:52:44	chrisdone	if you know that the format ahead of time is trivial in all cases, your parser can be straight-forward
2013-08-31 00:52:47	mm_freak_	Data.Text.Read
2013-08-31 00:52:48	mm_freak_	hah!
2013-08-31 00:52:51	mm_freak_	bos: thanks =)
2013-08-31 00:52:53	myname_	so is there no function that would do: read :: String -> Double
2013-08-31 00:52:59	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-08-31 00:53:04	myname_	oh the read
2013-08-31 00:53:06	myname_	ok
2013-08-31 00:53:19	chrisdone	i kinda linked that above
2013-08-31 00:53:20	applicative	https://github.com/bos/text/blob/master/Data/Text/Read.hs
2013-08-31 00:53:21	shachaf	mm_freak_: Nearly.
2013-08-31 00:53:25	<--	sm (~user@li229-222.members.linode.com) has quit (Remote host closed the connection)
2013-08-31 00:53:30	shachaf	Well, it depends on what you mean by isomorphic.
2013-08-31 00:53:43	shachaf	There's a bijection, of course, but Text can't hold the same Chars as String.
2013-08-31 00:53:45	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 245 seconds)
2013-08-31 00:53:45	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-08-31 00:53:57	shachaf	(In particular a String can have the invalid UTF-16 codepoints like U+D800.)
2013-08-31 00:54:01	bos	that's because String and Char are in a state of sin
2013-08-31 00:54:04	<--	jdegoes (~jdegoes@70-91-169-68-BusName-Colorado.hfc.comcastbusiness.net) has quit (Quit: jdegoes)
2013-08-31 00:54:10	-->	sm (~user@li229-222.members.linode.com) has joined #haskell
2013-08-31 00:54:15	mm_freak_	shachaf: can it?  how?
2013-08-31 00:54:19	shachaf	> '\xd800'
2013-08-31 00:54:20	lambdabot	  '\55296'
2013-08-31 00:54:21	myname_	are there any tutorials on Text on the wikis?
2013-08-31 00:54:22	shachaf	bos: Agreed.
2013-08-31 00:54:32	mm_freak_	> T.singleton '\xd800'
2013-08-31 00:54:33	lambdabot	  Not in scope: `T.singleton'
2013-08-31 00:54:33	lambdabot	 Perhaps you meant one of these:
2013-08-31 00:54:33	lambdabot	   `M.singleto...
2013-08-31 00:54:36	bos	"sortamorphic"
2013-08-31 00:54:37	 *	applicative had not thought Char had undone so many
2013-08-31 00:54:39	mm_freak_	> Data.Text.singleton '\xd800'
2013-08-31 00:54:40	lambdabot	  Not in scope: `Data.Text.singleton'
2013-08-31 00:54:41	chrisdone	myname_: the documentation is insufficient?
2013-08-31 00:54:46	myname_	i saw many on regular String's and some for performance on ByteStrings but not for Text
2013-08-31 00:55:03	shachaf	lambdabot doesn't import Text. :-(
2013-08-31 00:55:04	bos	myname_: it has almost the same API
2013-08-31 00:55:14	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 00:55:21	mm_freak_	shachaf: that's accepted here in GHCi
2013-08-31 00:55:21	shachaf	Anyway, Text uses UTF-16, so it can't directly represent these.
2013-08-31 00:55:26	shachaf	mm_freak_: "accepted" how?
2013-08-31 00:55:28	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 00:55:37	mm_freak_	it gives nonsense back though
2013-08-31 00:55:42	mm_freak_	"\65533"
2013-08-31 00:55:42	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 00:55:51	shachaf	Right.
2013-08-31 00:55:54	bos	that's not nonsense, it's the unicode replacement character
2013-08-31 00:55:56	myname_	is it as similar as simply replacing ":: String" with ":: Text"?
2013-08-31 00:56:08	monochrom	applicative: I tried a few things unsuccessfully. you probably have to make do with the like of ghc -e "Data.Char.chr 120"
2013-08-31 00:56:12	-->	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has joined #haskell
2013-08-31 00:56:14	mm_freak_	myname_: not really…  you use Text almost like you use ByteString
2013-08-31 00:56:15	chrisdone	bos: text's is 3x nicer because it has fromStrict/toStrict
2013-08-31 00:56:19	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 00:56:24	mm_freak_	import qualified Data.Text as T
2013-08-31 00:56:27	<--	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:56:40	applicative	with {-#LANGUAGE OverloadedStrings #-} and the usual qualified imports its'a little like that myname_
2013-08-31 00:56:41	lispy	I thought ByteString had thos enow
2013-08-31 00:56:58	applicative	it does
2013-08-31 00:57:00	lispy	@hoogle fromStrict
2013-08-31 00:57:01	lambdabot	Data.ByteString.Lazy fromStrict :: ByteString -> ByteString
2013-08-31 00:57:01	lambdabot	Data.ByteString.Lazy.Char8 fromStrict :: ByteString -> ByteString
2013-08-31 00:57:01	lambdabot	Data.Text.Lazy fromStrict :: Text -> Text
2013-08-31 00:57:06	shachaf	Pray, Mr. O'Sullivan, if you put into the Text wrong figures, will the right answers come out?
2013-08-31 00:57:07	chrisdone	oh, seems that bytestring has them
2013-08-31 00:57:07	mm_freak_	myname_: to make your life easier follow applicative's suggestion and also use the Monoid interface
2013-08-31 00:57:09	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 00:57:11	chrisdone	yeah
2013-08-31 00:57:19	mm_freak_	> "abc" <> "def"
2013-08-31 00:57:20	lambdabot	  "abcdef"
2013-08-31 00:57:23	mm_freak_	works with Text as well
2013-08-31 00:57:34	<--	pantech (~pantech@178-191-40-119.adsl.highway.telekom.at) has quit (Quit: Verlassend)
2013-08-31 00:57:35	bos	the "<>" operator is pronounched "fishsticks"
2013-08-31 00:57:35	myname_	ok, i guess i'll need to try a few examples
2013-08-31 00:57:39	monochrom	haha shachaf
2013-08-31 00:57:39	lispy	> text "abc" <> text "def"
2013-08-31 00:57:40	lambdabot	  abcdef
2013-08-31 00:57:45	myname_	thanks!
2013-08-31 00:57:47	mm_freak_	:t text
2013-08-31 00:57:48	lambdabot	String -> Doc
2013-08-31 00:57:54	myname_	so how do i upvote again?
2013-08-31 00:57:58	bos	we need a "><>" operator too
2013-08-31 00:58:00	chrisdone	lispy: it used to kill me inside using fromChunks/toChunks
2013-08-31 00:58:04	leroux	How should I simplify this? http://lpaste.net/92341
2013-08-31 00:58:06	mm_freak_	myname_: nickname++
2013-08-31 00:58:08	myname_	mm_freak_++
2013-08-31 00:58:19	mm_freak_	@karma c
2013-08-31 00:58:19	lambdabot	c has a karma of 1
2013-08-31 00:58:21	lispy	chrisdone: Yeah, and it was poorly motivated
2013-08-31 00:58:28	myname_	applicative++
2013-08-31 00:58:30	mm_freak_	c++ hasn't been written?
2013-08-31 00:58:33	mm_freak_	@karma c
2013-08-31 00:58:33	lambdabot	c has a karma of 1
2013-08-31 00:58:36	Iceland_jack	bos: Yes we need more operators whose function cannot be inferred by their names! :)
2013-08-31 00:58:37	mcstar	i bet bos deserves a ++ too
2013-08-31 00:58:38	lispy	chrisdone: It was an intentional omission to get people to not ping-pong between the two
2013-08-31 00:58:45	<--	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has quit (Read error: No route to host)
2013-08-31 00:59:10	mm_freak_	myname_: most of us don't really care about virtual karma though =)
2013-08-31 00:59:16	FreeFull	bos: I always pronounced <> mappend
2013-08-31 00:59:22	chrisdone	lispy: understandable
2013-08-31 00:59:28	-->	waterlaz (~waterlaz@109.106.20.63.sumtel.ua) has joined #haskell
2013-08-31 00:59:31	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 00:59:34	monochrom	bos++
2013-08-31 00:59:38	mm_freak_	mm_freak_--
2013-08-31 00:59:41	mm_freak_	mm_freak++
2013-08-31 00:59:59	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:00:05	applicative	'mappend' is so horrible i'll take any operator
2013-08-31 01:00:09	lispy	at one point java++ was an easter egg that would decrease your karma :)
2013-08-31 01:00:19	lispy	?karma c
2013-08-31 01:00:19	lambdabot	c has a karma of 1
2013-08-31 01:00:40	mm_freak_	@karma C++
2013-08-31 01:00:40	lambdabot	C++ has a karma of -2
2013-08-31 01:00:42	mm_freak_	@karma C
2013-08-31 01:00:42	lambdabot	C has a karma of 1
2013-08-31 01:00:45	mm_freak_	lol
2013-08-31 01:00:47	applicative	i used to write (<>)=mappend; o = mempty but of course it was untenable
2013-08-31 01:00:48	--	DarkFox is now known as darknfoxx
2013-08-31 01:00:52	--	DarkNFoxy is now known as DarkFox
2013-08-31 01:00:56	<--	myname_ (~yyetim@sat.ee.Princeton.EDU) has quit (Quit: Lost terminal)
2013-08-31 01:00:59	--	darknfoxx is now known as DarkNFoxy
2013-08-31 01:01:05	mm_freak_	how come C++ has a lower karma than C?
2013-08-31 01:01:17	lispy	mm_freak_: have you used it? :)
2013-08-31 01:01:23	applicative	hahahahaha
2013-08-31 01:01:24	mm_freak_	lispy: sure
2013-08-31 01:01:27	-->	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has joined #haskell
2013-08-31 01:01:31	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 01:01:35	applicative	lispy++
2013-08-31 01:01:59	monochrom	applicative: consider ^|{-><< :)
2013-08-31 01:02:13	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 01:02:15	mm_freak_	while both are a pain, C++ is less of a pain than C =)
2013-08-31 01:02:17	monochrom	err, I have an invalid { there. nevermind
2013-08-31 01:02:58	lispy	mm_freak_: I'd rather use C sparingly and when I need it and then skip over C++ for some proper high level language when I don't actually need C
2013-08-31 01:03:11	applicative	'unterminated {-' is the error ...
2013-08-31 01:03:20	lpaste	chrisdone annotated “No title” with “leroux” at http://lpaste.net/92341#a92343
2013-08-31 01:03:20	-->	chord (322f530e@gateway/web/freenode/ip.50.47.83.14) has joined #haskell
2013-08-31 01:03:30	<--	apfelbox (~apfelbox@2a02:8070:2720:4d00:4d00:e79a:249d:93cd) has quit (Ping timeout: 264 seconds)
2013-08-31 01:03:41	chord	why isn't haskell dominating against erlang, clojure, lisp, etc.
2013-08-31 01:03:53	applicative	it crushes them all
2013-08-31 01:03:54	monochrom	why do I care
2013-08-31 01:04:07	lispy	chord: please elaborate
2013-08-31 01:04:14	applicative	chord: have you ever looked at any erlang???
2013-08-31 01:04:19	Iceland_jack	No please don't, we don't need a language war
2013-08-31 01:04:19	leroux	chrisdone: Thanks! I got it down to 4 lines with traverse... but now I'll use what you pasted.
2013-08-31 01:04:23	monochrom	but to answer: it surely dominates. in my home directory.
2013-08-31 01:04:25	<--	shintah (bebble@h-123-170-194.a336.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2013-08-31 01:04:28	leroux	chrisdone++
2013-08-31 01:04:37	 *	chrisdone beams
2013-08-31 01:04:40	-->	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has joined #haskell
2013-08-31 01:04:59	chord	you guys agree theres going to be a revival of functional programming because of multicore?
2013-08-31 01:05:05	chord	so which language will riseL?
2013-08-31 01:05:15	chrisdone	a revival implies there was a death
2013-08-31 01:05:24	chrisdone	and some kind of life in the past
2013-08-31 01:05:25	monochrom	I declare this off-topic.
2013-08-31 01:05:29	lispy	I think the revival has already started and I don't think multicore will play the role that has been hyped
2013-08-31 01:05:46	lispy	good point, #haskell-blah?
2013-08-31 01:06:14	mcstar	#haskell-functional-revival
2013-08-31 01:06:15	fylwind	nominolo: thanks for creating the account :)
2013-08-31 01:06:17	applicative	chord: anyway we love those other languages you mention.
2013-08-31 01:06:21	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:06:43	<--	erochester (~erocheste@c-71-206-171-217.hsd1.va.comcast.net) has quit (Quit: Leaving.)
2013-08-31 01:07:08	<--	napping (~brandon@qchost236-138.cs.illinois.edu) has quit (Quit: leaving)
2013-08-31 01:07:12	-->	tel (~tel@c-71-206-33-51.hsd1.md.comcast.net) has joined #haskell
2013-08-31 01:07:14	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-08-31 01:07:25	chord	if you need high multicore performance which language do you use
2013-08-31 01:07:35	mcstar	c++ + openmp
2013-08-31 01:07:42	<--	heruur (~tvh@2a00:12d0:a101:6f01:223:14ff:fe98:9164) has quit (Ping timeout: 264 seconds)
2013-08-31 01:07:46	lispy	I have friends that code in erlang and they're good people. Very hard working.
2013-08-31 01:07:55	chrisdone	lispy: lol
2013-08-31 01:07:57	c_wraith	lispy: that sounds like an insult
2013-08-31 01:07:57	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 01:08:13	chrisdone	lispy: "i'm not languagist, hell, some of my _friends_ are erlang programmers!"
2013-08-31 01:08:14	chord	mcstar really we still sticking with C++?
2013-08-31 01:08:21	mcstar	i am
2013-08-31 01:08:22	lispy	chrisdone: :)
2013-08-31 01:08:23	<--	hexagoxel (~hexagoxel@kiel-5f77b653.pool.mediaWays.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:09:14	-->	saml (~sam@adfb12c6.cst.lightpath.net) has joined #haskell
2013-08-31 01:09:33	applicative	chord, I use erlang then http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&lang=ghc&lang2=erlang&data=u64q
2013-08-31 01:09:35	<--	conehead (~conehead@unaffiliated/conehead) has quit (Ping timeout: 245 seconds)
2013-08-31 01:09:53	-->	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 01:10:01	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:10:07	chord	mcstar give me an answer that doesn't requier c++ pain
2013-08-31 01:10:35	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-08-31 01:10:59	mcstar	pain?
2013-08-31 01:11:03	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 01:11:19	chord	you like C++ ?
2013-08-31 01:11:22	fylwind	it is kinda painful after using a language like haskell
2013-08-31 01:11:28	-->	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 01:11:32	mcstar	yes, more or less
2013-08-31 01:11:37	chord	WOW
2013-08-31 01:11:41	applicative	dunno that c++ is looking pretty good, its like almost 3x as fast as haskell and oh so safe http://benchmarksgame.alioth.debian.org/u64q/benchmark.php?test=all&lang=ghc&lang2=gpp&data=u64q
2013-08-31 01:11:45	lispy	I've given up on explaining why I use haskell in terms of technical reasons. These days I simply tell people, "I enjoy programming in Haskell." Yes, it's that simple. Programming with haskell is enjoyable.
2013-08-31 01:11:47	<--	litherum (~Adium@2620:149:4:1b01:2d59:1365:a9cf:e96) has quit (Quit: Leaving.)
2013-08-31 01:11:58	applicative	it's beautiful
2013-08-31 01:12:05	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 01:12:19	applicative	it's unbelievable, really.
2013-08-31 01:12:31	mm_freak_	lispy: problem is that you can't use haskell everywhere
2013-08-31 01:12:42	mm_freak_	when i have a choice between C and C++, i choose C++
2013-08-31 01:12:51	lpaste	chrisdone annotated “No title” with “golfing” at http://lpaste.net/92341#a92344
2013-08-31 01:13:21	lispy	mm_freak_: When it comes down to C or C++ for me I usually don't get to choose :)
2013-08-31 01:13:25	mcstar	i really think the 'one language to rule them all' attitude is counterproductive
2013-08-31 01:13:31	[swift]	i find that a conversation about the benefits and drawbacks of haskell is not much fun unless the other person is familiar with some sort of ML-like language or at least some sort of lisp
2013-08-31 01:13:35	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-08-31 01:13:54	applicative	one idris to rule them all
2013-08-31 01:13:59	mm_freak_	mcstar: but haskell currently rules them all, as long as you can compile it to the target architecture =P
2013-08-31 01:14:00	-->	litherum (~Adium@2620:149:4:1b01:c09:6649:b470:14b4) has joined #haskell
2013-08-31 01:14:00	Sonarpulse	^ YES
2013-08-31 01:14:04	Sonarpulse	idris
2013-08-31 01:14:06	chrisdone	idchris
2013-08-31 01:14:10	chrisdone	:3
2013-08-31 01:14:20	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 01:14:24	lispy	idchris :: Chris -> Chris
2013-08-31 01:14:26	mm_freak_	idris has the potential to rule them all, but it doesn't yet =)
2013-08-31 01:14:29	chrisdone	:p
2013-08-31 01:14:30	FreeFull	Lisp is very far from the ML world
2013-08-31 01:14:40	<--	ivoscc (~ivo@190.40.183.198) has quit (Ping timeout: 256 seconds)
2013-08-31 01:14:55	Sonarpulse	I asked earlier, do you all think Haskell will have dependant types in 10 years?
2013-08-31 01:14:57	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 01:14:59	chrisdone	lisp belongs in the python, ruby camp
2013-08-31 01:15:00	chord	so why do people choose lisp or erlang over haskell?
2013-08-31 01:15:01	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 01:15:01	<--	wolfnn (~wolfnn@90.24.131.251) has quit (Ping timeout: 245 seconds)
2013-08-31 01:15:05	mm_freak_	Sonarpulse: unlikely
2013-08-31 01:15:11	chrisdone	chord: they do?
2013-08-31 01:15:14	<--	WraithM (~matt@c-69-246-196-61.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 01:15:17	applicative	they do??
2013-08-31 01:15:19	mcstar	'who knows such things? only the Oracle'
2013-08-31 01:15:25	mm_freak_	chord: erlang has a problem domain haskell currently doesn't solve
2013-08-31 01:15:31	FreeFull	chrisdone: Lisp isn't really like python or ruby either
2013-08-31 01:15:36	Sonarpulse	distributed process?
2013-08-31 01:15:37	mm_freak_	but why people choose lisp?  no idea
2013-08-31 01:15:40	mm_freak_	ask paul graham
2013-08-31 01:15:52	fylwind	do you include "scheme" under lisp?
2013-08-31 01:16:01	chrisdone	Sonarpulse: i presume you mean full dependent types, not limited or some subset. it could have them today, but do you want full dependent types?
2013-08-31 01:16:08	Sonarpulse	I feel idris and agda and epigram will pull haskell in that direction
2013-08-31 01:16:10	mm_freak_	fylwind: i referred to common lisp
2013-08-31 01:16:10	lispy	It was fun to have abit of off-topic discussion, but we should probably get back to Haskell.
2013-08-31 01:16:11	chirpsalot	mm_freak_: if you want to implement a language lispy ones are great :P
2013-08-31 01:16:19	Sonarpulse	lest Haskell go the fate of OCaml
2013-08-31 01:16:27	mm_freak_	chirpsalot: eager/strict lispy ones are
2013-08-31 01:16:29	fylwind	mm_freak_: ah, the uglier of the siblings :)
2013-08-31 01:16:30	FreeFull	Scheme is more lisp than lisp
2013-08-31 01:16:32	mcstar	ppl just want to program their algorithms, irrespective or typing, and they dont care much about ahead-of-time verfication
2013-08-31 01:16:41	mcstar	of*
2013-08-31 01:16:43	thr33strikes	just installed cabal and did an update, will that alone give me access to the module System
2013-08-31 01:16:46	chrisdone	FreeFull: lisp is far more similar to python and ruby than ml
2013-08-31 01:16:49	chord	mcstar until it deletes your harddrive
2013-08-31 01:16:59	mcstar	haskell can do that too
2013-08-31 01:17:05	applicative	emacs --execute "(print (+ 1 2 3))"
2013-08-31 01:17:08	lispy	thr33strikes: You mean access to hackage?
2013-08-31 01:17:11	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-08-31 01:17:15	mm_freak_	in fact GHC used to delete your source file when you had a type error
2013-08-31 01:17:16	FreeFull	chrisdone: I'd say it simply stands on its own
2013-08-31 01:17:20	chrisdone	FreeFull: dynamically, strongly typed, imperative, interpreted culture
2013-08-31 01:17:29	mm_freak_	http://www.reddit.com/r/haskell/comments/127emo/brian_osullivans_favorite_bug_in_ghc/
2013-08-31 01:17:36	thr33strikes	does hackage include the System module?
2013-08-31 01:17:43	chrisdone	FreeFull: the only differences i can think of is the syntax and macrology culture. can you think of other differences?
2013-08-31 01:17:55	applicative	thr33strikes: I think you are looking at an old tutorial?
2013-08-31 01:17:58	mm_freak_	thr33strikes: there is no System module
2013-08-31 01:17:58	<--	scanlonman (~scanlonma@71-13-216-147.dhcp.mrqt.mi.charter.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 01:18:05	FreeFull	thr33strikes: System was part of haskell 98 but isn't in the newer standard
2013-08-31 01:18:12	-->	wavewave (2efdbc23@gateway/web/freenode/ip.46.253.188.35) has joined #haskell
2013-08-31 01:18:12	chirpsalot	mm_freak_: it was just so offended that you would feed it such an ill-typed program :).
2013-08-31 01:18:20	thr33strikes	what took it's place?
2013-08-31 01:18:21	lispy	thr33strikes: ah, I misunderstood your question.
2013-08-31 01:18:27	mm_freak_	=)
2013-08-31 01:18:31	applicative	thr33strikes: I think it's broken up
2013-08-31 01:18:35	-->	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has joined #haskell
2013-08-31 01:18:37	lispy	thr33strikes: what thing do you need from System? We can use hoogle to find it
2013-08-31 01:18:41	lispy	?hoogle getArgs
2013-08-31 01:18:41	lambdabot	System.Environment getArgs :: IO [String]
2013-08-31 01:18:41	lambdabot	System.Posix.Env.ByteString getArgs :: IO [ByteString]
2013-08-31 01:18:41	lambdabot	Graphics.UI.GLUT.Initialization getArgsAndInitialize :: IO (String, [String])
2013-08-31 01:18:45	<--	Croms (~dv@92.109.224.112) has quit (Ping timeout: 245 seconds)
2013-08-31 01:18:45	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 245 seconds)
2013-08-31 01:18:45	leroux	chrisdone: How can I change it from [a] to a?
2013-08-31 01:18:48	applicative	thr33strikes: if you specify haskell 98 it will understand you
2013-08-31 01:18:49	leroux	I don't need that forM...
2013-08-31 01:18:56	chrisdone	leroux: `it'?
2013-08-31 01:18:59	leroux	Uhh.
2013-08-31 01:19:02	-->	ecube_ (~ecube@unaffiliated/ecube) has joined #haskell
2013-08-31 01:19:02	leroux	http://lpaste.net/92341#a92343
2013-08-31 01:19:04	wavewave	hi
2013-08-31 01:19:20	applicative	thr33strikes: what is the module your are looking at, that imports System? can you paste it?
2013-08-31 01:19:21	leroux	file is a Maybe FilePath
2013-08-31 01:19:25	chrisdone	leroux: ?
2013-08-31 01:19:29	applicative	hi wavewave
2013-08-31 01:19:31	chrisdone	mhm
2013-08-31 01:19:38	mm_freak_	leroux: if you need a specific piece of functionality it is always a good idea to write its type first
2013-08-31 01:19:43	mm_freak_	is [a] -> a what you want?
2013-08-31 01:19:52	wavewave	applicative: hi hi
2013-08-31 01:19:53	<--	ts33kr (~ts33kr@37.229.98.23) has quit (Quit: Computer has gone to sleep.)
2013-08-31 01:19:54	chrisdone	@djinn [a] -> a
2013-08-31 01:19:54	lambdabot	Error: Undefined type []
2013-08-31 01:19:59	chrisdone	bah, always forget about that
2013-08-31 01:20:05	--	ecube_ is now known as ecube
2013-08-31 01:20:05	chrisdone	djinn, learn some more stuff
2013-08-31 01:20:15	mm_freak_	let him figure out himself what's wrong with the type =)
2013-08-31 01:20:22	mcstar	:t head
2013-08-31 01:20:22	lambdabot	[a] -> a
2013-08-31 01:20:27	mcstar	thats a nice one
2013-08-31 01:20:29	leroux	Not head...
2013-08-31 01:20:34	mm_freak_	mcstar: call "spoiler alert" first
2013-08-31 01:20:37	chrisdone	mm_freak_: “that is why you will fail”
2013-08-31 01:20:40	mcstar	oh
2013-08-31 01:20:42	Sonarpulse	chrisdrone: does idris have "full dependent types"
2013-08-31 01:20:43	lispy	Tip for anyone using chrome: You can make a shortcut so that tying 'h foo' in the address bar does a hoogle search. In settings manage search engines and add an entry like this: http://www.haskell.org/hoogle/?hoogle=%s
2013-08-31 01:20:50	mm_freak_	Sonarpulse: yes
2013-08-31 01:20:52	applicative	Sonarpulse: !!!!
2013-08-31 01:20:53	thr33strikes	I was trying to use System.Directory
2013-08-31 01:20:59	Sonarpulse	just checking....
2013-08-31 01:21:05	geekosaur	thr33strikes, you already have it, but it's not accessible by default. You can force the comp-iler into haskell98 mode and then you'd have System. But then you'll have trouble using modern Haskell modules
2013-08-31 01:21:21	-->	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 01:21:27	alexander__b	stephan boyer's functional programming intro with "fython" are quite nice
2013-08-31 01:21:32	applicative	ah, so you figured it out thr33strikes ?
2013-08-31 01:21:36	<--	S11001001 (~sirian@c-50-169-36-118.hsd1.ma.comcast.net) has quit (Changing host)
2013-08-31 01:21:36	-->	S11001001 (~sirian@fsf/member/S11001001) has joined #haskell
2013-08-31 01:21:44	<--	tibbe (tibbe@nat/google/x-lrggyzhlzqihoyaw) has quit (Quit: tibbe)
2013-08-31 01:21:50	alexander__b	implements Maybe, List and Writer in a python-like language to help you understand them (and monads in general). I approve.
2013-08-31 01:21:53	fylwind	there's a quirk with the chrome search: if you type a search with the wRonG cAsing once, chrome will remember it and use it every time
2013-08-31 01:22:00	geekosaur	yeh
2013-08-31 01:22:14	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 01:22:15	chrisdone	Sonarpulse: there's a tension between the type system being powerful and not requiring you to provide it with proofs
2013-08-31 01:22:22	Sonarpulse	Sure
2013-08-31 01:22:23	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-08-31 01:22:31	thr33strikes	I'd like to stay modern but I was looking for a portable way to rename files within a directory
2013-08-31 01:22:51	Sonarpulse	I would say keep "System F Haskell" and "System FC Haskell"  as langauge subsets
2013-08-31 01:22:58	Sonarpulse	for those that really care about type inference
2013-08-31 01:22:59	thr33strikes	I could sit here and hack away at it but I'm sure it's an easy lib command
2013-08-31 01:23:04	lispy	fylwind: heh
2013-08-31 01:23:06	mm_freak_	my experience with agda is that you don't really have to /write/ type signatures…  you only tell, "here is the type signature, figure out its content", and most of the time it works
2013-08-31 01:23:10	lpaste	leroux pasted “filePerms” at http://lpaste.net/92345
2013-08-31 01:23:18	applicative	thr33strikes: you can just give the modules the name of the files and they will compile together thr33strikes
2013-08-31 01:23:22	mm_freak_	idris might follow a similar path as soon as we have a good emacs mode for it =)
2013-08-31 01:23:34	chrisdone	don't tempt me
2013-08-31 01:23:35	leroux	chrisdone: If you could, take a look at filePerms.
2013-08-31 01:23:43	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 01:23:44	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:23:51	lispy	mm_freak_: you put holes in the type signatures?
2013-08-31 01:23:58	lispy	mm_freak_: is that what you mean?
2013-08-31 01:24:00	 *	applicative started using idris first to escape emacs
2013-08-31 01:24:07	mm_freak_	lispy: either that or this:  f : _ → _ → _
2013-08-31 01:24:13	 *	applicative then realized it was better anyway
2013-08-31 01:24:38	mm_freak_	depending on whther i'm planning to write the type signature or just leave it with placeholders
2013-08-31 01:25:04	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 01:25:06	lispy	mm_freak_: oh, I hadn't thought of using wild cards. So then can you C-c C-. f <RET> to find out the type of f?
2013-08-31 01:25:14	<--	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 01:25:14	mm_freak_	applicative: depending on what you mean by "better"
2013-08-31 01:25:18	mm_freak_	agda is better for theorem proving
2013-08-31 01:25:22	fl00r	is there a way to zip two lists but keep the rest of the longer one?
2013-08-31 01:25:24	Sonarpulse	Did the idris people ever plan on forking GHC instead of writing their own compiler?
2013-08-31 01:25:27	thr33strikes	seemed like the System.Directory was easy to use already,  I'm sure there is a good reason why it was removed.  I'm just too new to know why, can anyone answer?
2013-08-31 01:25:52	applicative	agda does have any 'theorem proving' support
2013-08-31 01:25:55	applicative	doesnt
2013-08-31 01:26:02	chord	you guys need to work on GHC to make it generate code that beats C++ in the benchmarks
2013-08-31 01:26:12	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 01:26:12	mm_freak_	lispy: what does that command do?
2013-08-31 01:26:20	mcstar	't <== f means "apply f with arguments such that it returns a value of type t"' omg, witchcraft
2013-08-31 01:26:26	applicative	Sonarpulse: the compiler is totally different; it already writes java javascript you name it
2013-08-31 01:26:38	Sonarpulse	as target langauge?
2013-08-31 01:26:45	Sonarpulse	interesting
2013-08-31 01:26:54	applicative	mm_freak_: idris is *way* better for actual 'theorem proving'
2013-08-31 01:27:01	Sonarpulse	well my point is there if Idris does become the one lanague to rule them all
2013-08-31 01:27:02	ion	java{,script}
2013-08-31 01:27:06	applicative	i don't actually see any use for agda at all
2013-08-31 01:27:15	Sonarpulse	it would be a shame to throw away all the work that went into GHC
2013-08-31 01:27:23	applicative	except for -without-K
2013-08-31 01:27:35	mm_freak_	applicative: does it allow coinductive proofs?
2013-08-31 01:27:47	-->	Beetny (~Beetny@ppp118-208-158-9.lns20.bne1.internode.on.net) has joined #haskell
2013-08-31 01:27:51	-->	ryant50001 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-31 01:27:55	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 01:28:08	mm_freak_	i mean proper coinduction using codata or guards…  coinduction that doesn't allow you to prove false
2013-08-31 01:28:12	lispy	mm_freak_: Isn't that the command that normalizes a term?
2013-08-31 01:28:30	applicative	codata are built into idris from the bottom up
2013-08-31 01:28:31	mm_freak_	lispy: i don't know…  the set of commands i use is very limited =)
2013-08-31 01:28:48	mm_freak_	applicative: that's not the question
2013-08-31 01:28:49	lispy	mm_freak_: what I'm trying to ask is: if you do that trick with _ then is there a way to ask agda to tell you what it inferred?
2013-08-31 01:28:58	mietek	Failed to install cryptocipher-0.3.1
2013-08-31 01:29:04	mietek	Anyone else?
2013-08-31 01:29:16	mm_freak_	lispy: good question…  i don't think so
2013-08-31 01:29:22	mm_freak_	well, yes
2013-08-31 01:29:25	mm_freak_	you can ask for the type of f
2013-08-31 01:29:43	<--	nimish (~nimish@dynamic-acs-24-154-115-248.zoominternet.net) has quit (Quit: nimish)
2013-08-31 01:29:45	 *	lispy should just try it
2013-08-31 01:30:04	<--	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has quit
2013-08-31 01:30:16	mm_freak_	lispy: agda2-infer-type-toplevel
2013-08-31 01:30:24	mm_freak_	but it seems like it's not bound by default
2013-08-31 01:30:26	<--	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 01:30:26	mietek	http://hackage.haskell.org/packages/archive/cryptocipher/0.3.1/logs/failure/ghc-7.4
2013-08-31 01:30:35	mietek	I'm in cabal hell again
2013-08-31 01:30:43	applicative	mm_freak_: define a function Stream a -> Stream a, where codata Stream a = Cons a (Stream a)
2013-08-31 01:30:47	<--	enthropy (83680801@gateway/web/freenode/ip.131.104.8.1) has quit (Quit: Page closed)
2013-08-31 01:31:00	mietek	And this time, it's due to trying to install git-annex from a completely blank slate
2013-08-31 01:31:38	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:32:22	lispy	mm_freak_: C-c C-d
2013-08-31 01:32:27	<--	TheFuzzball (~TheFuzzba@46-64-87-101.zone15.bethere.co.uk) has quit (Quit: Leaving...)
2013-08-31 01:32:31	lispy	but it's just telling me f's type is metavariables
2013-08-31 01:32:54	<--	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 264 seconds)
2013-08-31 01:33:22	thr33strikes	am I forced to use the old System.Directory if I need to manipulate directory names
2013-08-31 01:33:24	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 01:33:31	<--	saml (~sam@adfb12c6.cst.lightpath.net) has quit (Quit: Leaving)
2013-08-31 01:33:42	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:35:02	mm_freak_	applicative: (xs : Stream Nat) -> AllEven xs -> AllEven (map (+ 2) xs)
2013-08-31 01:35:10	mm_freak_	would you trust such a proof in idris?
2013-08-31 01:35:16	geekosaur	thr33strikes, you were a little unclear before. System.Directory is current
2013-08-31 01:35:25	geekosaur	everything used to be jumbled into System before
2013-08-31 01:35:56	geekosaur	http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/directory-1.2.0.1/System-Directory.html
2013-08-31 01:36:03	thr33strikes	thanks
2013-08-31 01:36:10	-->	tibbe (~tibbe@207.198.105.20) has joined #haskell
2013-08-31 01:36:13	jfischoff	what steps does cabal take to build with profiling when there is template haskell? I need to recreate the logic in make, anyone have an example make file that does a profiling build?
2013-08-31 01:37:49	-->	tyfighter (~tyfighter@c-98-210-65-59.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 01:37:57	monochrom	I think cabal just calls ghc with -prof -fauto-prof etc
2013-08-31 01:38:08	geekosaur	use cabal -v3 to watch what it does?
2013-08-31 01:38:13	-->	jodaro1 (~Adium@64.156.167.128) has joined #haskell
2013-08-31 01:38:32	monochrom	but yeah use cabal -v3 or maybe -v2 or -v1 to see for real
2013-08-31 01:39:01	-->	predator217 (~predator1@p50803C88.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 01:39:11	<--	DMcGill (~DMcGill@host-78-151-20-102.as13285.net) has quit (Ping timeout: 260 seconds)
2013-08-31 01:39:17	chrisdone	@let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just))
2013-08-31 01:39:17	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-08-31 01:39:33	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder
2013-08-31 01:39:33	lambdabot	(a1 -> a1 -> a) -> [a1] -> [a1] -> ([a], [a1])
2013-08-31 01:39:52	chrisdone	fl00r: behold, my creation
2013-08-31 01:39:56	chrisdone	ψ(｀∇´)ψ
2013-08-31 01:39:58	fl00r	holy...
2013-08-31 01:40:00	jfischoff	cool thanks guys
2013-08-31 01:40:03	 *	applicative is working on AllEven but must go, mm_freak_ 
2013-08-31 01:40:12	monochrom	you are to be congratulated. what does it do anyway? :)
2013-08-31 01:40:13	arkeet	you're a monster
2013-08-31 01:40:23	arkeet	> zipRemainder (,) [1,2] [3,4,5,6]
2013-08-31 01:40:23	mm_freak_	applicative: i'm not asking whether you can write the proof in idris — you can
2013-08-31 01:40:24	lambdabot	  Not in scope: `zipRemainder'
2013-08-31 01:40:30	chrisdone	> curry ((catMaybes.map(uncurry (liftM2 (,)))***catMaybes.takeWhile isJust.map snd) . span (uncurry (on (&&) isJust)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) [1,2,3] [1,2,3,4,5]
2013-08-31 01:40:30	mm_freak_	applicative: i'm asking whether you can /trust/ the proof
2013-08-31 01:40:31	lambdabot	  ([(1,1),(2,2),(3,3)],[4,5])
2013-08-31 01:40:37	mm_freak_	applicative: because you can certainly prove false in idris
2013-08-31 01:40:47	arkeet	chrisdone: now make it work with two different input types
2013-08-31 01:41:03	fl00r	it's going to take me 2 hours to figure what it's doing
2013-08-31 01:41:04	fl00r	haha
2013-08-31 01:41:16	fl00r	impressive
2013-08-31 01:41:16	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Ping timeout: 245 seconds)
2013-08-31 01:41:24	<--	Kaini (~kaini@unaffiliated/kaini) has quit (Read error: Connection reset by peer)
2013-08-31 01:41:29	applicative	mm_freak_: oh, thats what you're worried about; i would hope it wasn't so conservative you couldn't prove false every few minutes
2013-08-31 01:41:31	 *	monochrom likes the tone of "this software looks awesome! what problem does it solve anyway?"
2013-08-31 01:41:42	arkeet	@let import Data.These
2013-08-31 01:41:43	lambdabot	 .L.hs:102:1:
2013-08-31 01:41:43	lambdabot	     Failed to load interface for `Data.These'
2013-08-31 01:41:43	lambdabot	     Perhaps you...
2013-08-31 01:41:44	arkeet	=(
2013-08-31 01:42:06	monochrom	Perhaps you mean: Data.This, Data.That, Data.Those
2013-08-31 01:42:19	fylwind	what's ψ(｀∇´)ψ for?
2013-08-31 01:42:21	<--	NemesisD (~michael@70.89.125.98-Busname-WA.hfc.comcastbusiness.net) has quit (Quit: rage)
2013-08-31 01:42:24	mm_freak_	applicative: idris requires you to enable the termination checker, which is very conservative
2013-08-31 01:42:35	mm_freak_	applicative: my fear is that it may not handle coinductive proofs properly
2013-08-31 01:42:36	chrisdone	this is a common problem, there must be a zipWithRemainder thingie somewhere
2013-08-31 01:42:53	arkeet	chrisdone: check out Data.Align
2013-08-31 01:42:57	<--	predator117 (~predator1@p508027E6.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2013-08-31 01:43:03	applicative	mm_freak_: the track record of agda and coq can hardly be better ;)
2013-08-31 01:43:22	arkeet	not quite the same, perhaps
2013-08-31 01:43:30	mm_freak_	applicative: the difference is that idris doesn't even try ;)
2013-08-31 01:43:34	arkeet	alignWith :: (These a b -> c) -> f a -> f b -> f c
2013-08-31 01:43:40	applicative	mm_freak_: i have *much* more confidence in the principal developer
2013-08-31 01:43:47	mm_freak_	if you can prove false in agda, it's a major bug
2013-08-31 01:44:01	mm_freak_	in fact it will immediately become the highest priority bug
2013-08-31 01:44:25	mm_freak_	that's basically the difference between a "proof assistant" and a "programming language with dependent types" =)
2013-08-31 01:44:26	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in f
2013-08-31 01:44:26	lambdabot	FromExpr a => a
2013-08-31 01:44:33	chrisdone	:t let zipRemainder f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder
2013-08-31 01:44:34	lambdabot	(a1 -> a2 -> a) -> [a1] -> [a2] -> ([a], [a2])
2013-08-31 01:44:41	 *	hackagebot kevin 0.10.0 - a dAmn  IRC proxy  http://hackage.haskell.org/package/kevin-0.10.0 (JoelTaylor)
2013-08-31 01:44:46	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 01:44:49	arkeet	now what if I have more a1s than a2s
2013-08-31 01:44:53	applicative	mm_freak_: this is truly absurd but I must go
2013-08-31 01:44:57	chrisdone	arkeet: the same-type restriction acme from the on (&&) isJust
2013-08-31 01:45:01	monochrom	there hasn't been a prove-false incident for a long time, isn't that right?
2013-08-31 01:45:13	mm_freak_	monochrom: as far as i know, yes
2013-08-31 01:45:15	mm_freak_	applicative: have fun =)
2013-08-31 01:45:20	fl00r	i feel less embarrassed that i couldn't figure out how to do it now
2013-08-31 01:45:36	mcstar	it is way easier than chrisdone suggests
2013-08-31 01:45:41	-->	tac (~tac-tics@2602:306:bdb4:5100:cc7b:a920:f37c:78e3) has joined #haskell
2013-08-31 01:45:41	mcstar	you should just write it yourself
2013-08-31 01:45:42	monochrom	that's good to hear and more than good enough for me
2013-08-31 01:45:54	<--	m3ga (~erikd@hendrix.mega-nerd.net) has quit (Quit: disappearing into the sunset)
2013-08-31 01:46:04	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 01:46:15	mm_freak_	i think the last bug was because of a collapsed universe
2013-08-31 01:46:19	mm_freak_	i.e. Type : Type
2013-08-31 01:46:32	mm_freak_	or rather Set : Set in agda terms
2013-08-31 01:46:54	chrisdone	fl00r: yeah i'm just messing around. a simple fold or basic recursion would give you the solution in short time
2013-08-31 01:46:54	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-08-31 01:47:16	fl00r	ok cool
2013-08-31 01:47:23	fl00r	thanks!
2013-08-31 01:47:38	deech	Hi all, I'm trying to get my Haskell library to statically link against a C library but so far have been unsuccessful. The output of `cabal build` is here: https://gist.github.com/deech/6395316
2013-08-31 01:48:07	mm_freak_	fl00r: what would be the type of such a function anyway?
2013-08-31 01:48:18	mm_freak_	because "keep the longer suffix" doesn't seem to make sense to me
2013-08-31 01:48:39	tel	arkeet isn't it just `partitionThese . align`?
2013-08-31 01:48:40	<--	Targen (~iguana@190.38.156.156) has quit (Ping timeout: 256 seconds)
2013-08-31 01:48:41	mcstar	([(a,a)],[a])
2013-08-31 01:49:21	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:49:25	fl00r	well i was thinking something like [a] -> [b] -> ([(a, b)], [a], [b])
2013-08-31 01:49:40	chrisdone	@data These a b = This a | That b | These a b
2013-08-31 01:49:40	lambdabot	Unknown command, try @list
2013-08-31 01:49:41	 *	hackagebot damnpacket 0.1.0.2 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.0.2 (JoelTaylor)
2013-08-31 01:49:50	chrisdone	what was the syntax
2013-08-31 01:49:58	arkeet	fl00r: that is (partitionTHese .) . align
2013-08-31 01:49:58	jmcarthur	fl00r: might as well be   [a] -> [b] -> ([(a,b)], Either [a] [b])
2013-08-31 01:50:12	geekosaur	"@let data ..."
2013-08-31 01:50:18	chrisdone	@let data These a b = This a | That b | These a b
2013-08-31 01:50:18	lambdabot	 Defined.
2013-08-31 01:50:21	chrisdone	kewl
2013-08-31 01:50:26	-->	edwardk_ (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 01:50:39	mm_freak_	:t \xs ys -> let zs = zip xs ys; n = length zs in (zs, drop n xs, drop n ys)
2013-08-31 01:50:40	lambdabot	[a] -> [a1] -> ([(a, a1)], [a], [a1])
2013-08-31 01:50:47	mm_freak_	write it properly though =)
2013-08-31 01:50:48	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Read error: Operation timed out)
2013-08-31 01:50:50	tel	arkeet I'm getting non-exhaustive patterns in partitionThese though
2013-08-31 01:50:54	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 01:50:55	--	edwardk_ is now known as edwardk
2013-08-31 01:50:59	arkeet	@let align xs [] = This <$> xs; align [] ys = That <$> ys; align (x:xs) (y:ys) = These x y : align xs ys
2013-08-31 01:50:59	lambdabot	 Defined.
2013-08-31 01:51:14	arkeet	tel: that's a bug!
2013-08-31 01:51:24	tel	!!
2013-08-31 01:51:29	fl00r	awesome...definitely will be able to figure it out now
2013-08-31 01:51:33	fl00r	thanks, everyone
2013-08-31 01:51:34	tel	this was just pulled from hackage
2013-08-31 01:51:37	chrisdone	mm_freak_: eww named variables =p
2013-08-31 01:51:40	arkeet	it's a bug in these!
2013-08-31 01:51:48	tel	arket :(
2013-08-31 01:51:52	tel	arkeet :(
2013-08-31 01:51:54	mm_freak_	chrisdone: eww arrows ;)
2013-08-31 01:51:57	chrisdone	needs moar golf
2013-08-31 01:52:00	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 01:52:12	jmcarthur	this is commonly desired enough that there should be a standard function for some variant of this
2013-08-31 01:52:16	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 01:52:21	mm_freak_	chrisdone: the named variables are for sharing
2013-08-31 01:52:21	arkeet	partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:25	arkeet	@let partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:26	lambdabot	 Defined.
2013-08-31 01:52:29	arkeet	oh crap.
2013-08-31 01:52:29	arkeet	I can't type.
2013-08-31 01:52:31	arkeet	@Undefine
2013-08-31 01:52:31	lambdabot	Undefined.
2013-08-31 01:52:32	tel	hah, I was just doing that
2013-08-31 01:52:33	 *	chrisdone golf claps to get everyone in the mood
2013-08-31 01:52:35	chrisdone	https://www.youtube.com/watch?v=sTHHjTV5PL0
2013-08-31 01:52:35	arkeet	@let partitionTHese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:36	lambdabot	 .L.hs:143:17: Not in scope: data constructor `These'
2013-08-31 01:52:36	lambdabot	 
2013-08-31 01:52:36	lambdabot	 .L.hs:145:17: Not in...
2013-08-31 01:52:41	arkeet	@let partitionThese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:52:41	lambdabot	 .L.hs:143:17: Not in scope: data constructor `These'
2013-08-31 01:52:41	lambdabot	 
2013-08-31 01:52:41	lambdabot	 .L.hs:145:17: Not in...
2013-08-31 01:52:47	arkeet	ooops.
2013-08-31 01:52:49	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 01:53:00	arkeet	@let data These a b = This a | That b | These a b deriving (Eq,Show)
2013-08-31 01:53:01	lambdabot	 Defined.
2013-08-31 01:53:03	geekosaur	heh
2013-08-31 01:53:05	arkeet	@let align xs [] = This <$> xs; align [] ys = That <$> ys; align (x:xs) (y:ys) = These x y : align xs ys
2013-08-31 01:53:05	lambdabot	 Defined.
2013-08-31 01:53:08	arkeet	@let partitionThese [] = ([],([],[])); partitionThese (These x y:xs) = first ((x, y):) $ partitionThese xs; partitionThese (This x :xs) = second (first (x:)) $ partitionThese xs; partitionThese (That y:xs) = second (second (y:)) $ partitionThese xs
2013-08-31 01:53:09	lambdabot	 Defined.
2013-08-31 01:53:16	arkeet	:t (partitionThese.).align
2013-08-31 01:53:17	lambdabot	[a] -> [a1] -> ([(a, a1)], ([a], [a1]))
2013-08-31 01:53:18	<--	niteria (~niteria@81-233-94-170-no75.tbcn.telia.com) has left #haskell
2013-08-31 01:53:21	tel	@let (.:) = (.).(.)
2013-08-31 01:53:22	lambdabot	 Defined.
2013-08-31 01:53:26	tel	partitionThese .: align
2013-08-31 01:53:29	tel	:t partitionThese .: align
2013-08-31 01:53:29	lambdabot	[a] -> [a1] -> ([(a, a1)], ([a], [a1]))
2013-08-31 01:53:30	tel	:P
2013-08-31 01:53:45	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-08-31 01:53:53	arkeet	:t \f -> first (fmap f) . (partitionThese.) . align
2013-08-31 01:53:53	lambdabot	    Couldn't match type `(f0 a0, d0)'
2013-08-31 01:53:53	lambdabot	                  with `[a10] -> ([(a1, a10)], ([a1], [a10]))'
2013-08-31 01:53:53	lambdabot	    Expected type: ([a10] -> ([(a1, a10)], ([a1], [a10])))
2013-08-31 01:53:59	chrisdone	poor fl00r. i asked #haskell and all i got was this lousy lambdabot tshirt
2013-08-31 01:54:04	tel	> (partitionThese .: align) [1,2,3] [1,2]
2013-08-31 01:54:07	lambdabot	  ([(1,1),(2,2)],([3],[]))
2013-08-31 01:54:07	fl00r	haha
2013-08-31 01:54:13	arkeet	:t \f -> (first (fmap f) . partitionThese .) . align
2013-08-31 01:54:14	lambdabot	    The operator `.' [infixr 9] of a section
2013-08-31 01:54:14	lambdabot	        must have lower precedence than that of the operand,
2013-08-31 01:54:14	lambdabot	          namely `.' [infixr 9]
2013-08-31 01:54:16	arkeet	afggh
2013-08-31 01:54:23	arkeet	:t \f -> (first (fmap f) . partitionThese) .: align
2013-08-31 01:54:23	lambdabot	((a, a1) -> b) -> [a] -> [a1] -> ([b], ([a], [a1]))
2013-08-31 01:54:33	mm_freak_	ok, this is annoying…  i'm returning to my editor =)
2013-08-31 01:54:35	arkeet	:t \f -> (first (fmap $ curry f) . partitionThese) .: align
2013-08-31 01:54:36	lambdabot	(((a, a1), b) -> c) -> [a] -> [a1] -> ([b -> c], ([a], [a1]))
2013-08-31 01:54:39	arkeet	nope.
2013-08-31 01:54:41	 *	hackagebot damnpacket 0.1.0.3 - Parsing dAmn packets  http://hackage.haskell.org/package/damnpacket-0.1.0.3 (JoelTaylor)
2013-08-31 01:54:45	arkeet	:t \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:54:45	lambdabot	(a -> a1 -> b) -> [a] -> [a1] -> ([b], ([a], [a1]))
2013-08-31 01:54:57	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 01:55:07	chrisdone	arkeet: take your fail to /msg lambdabot, only great success may be displayed herein =p
2013-08-31 01:55:13	arkeet	but I'm done.
2013-08-31 01:55:25	<--	tel (~tel@c-71-206-33-51.hsd1.md.comcast.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 01:55:29	chrisdone	that's what she said
2013-08-31 01:55:33	jmcarthur	but you named f
2013-08-31 01:55:35	 *	chrisdone regrets
2013-08-31 01:55:37	<--	Eduard_Munteanu (~EduardMun@188.25.6.153) has quit (Ping timeout: 246 seconds)
2013-08-31 01:55:44	jmcarthur	chrisdone: fail
2013-08-31 01:55:46	chrisdone	jmcarthur: hahaha
2013-08-31 01:56:02	chrisdone	@unpl \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:56:02	lambdabot	\ f -> (\ c -> first (fmap (uncurry f)) (partitionThese c)) .: align
2013-08-31 01:56:07	chrisdone	@pl \f -> (first (fmap $ uncurry f) . partitionThese) .: align
2013-08-31 01:56:10	lambdabot	(.: align) . flip ((.) . first . (fmap $) . uncurry) partitionThese
2013-08-31 01:56:10	lambdabot	optimization suspended, use @pl-resume to continue.
2013-08-31 01:56:20	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 01:56:28	arkeet	@let zipRemainder f = (partitionEithers .) . zipWIth (\a b -> maybe (Left b) (Right . (f ?? b)) a) . (++ repeat Nothing) . map Just
2013-08-31 01:56:29	lambdabot	 .L.hs:160:7:
2013-08-31 01:56:29	lambdabot	     Not in scope: `zipWIth'
2013-08-31 01:56:29	lambdabot	     Perhaps you meant one of thes...
2013-08-31 01:56:32	arkeet	....
2013-08-31 01:56:36	chrisdone	arkeet: no fail!
2013-08-31 01:56:37	arkeet	@let zipRemainder f = (partitionEithers .) . zipWith (\a b -> maybe (Left b) (Right . (f ?? b)) a) . (++ repeat Nothing) . map Just
2013-08-31 01:56:38	lambdabot	 Defined.
2013-08-31 01:56:40	arkeet	:P
2013-08-31 01:56:42	arkeet	:t zipRemainder
2013-08-31 01:56:43	lambdabot	(a -> a1 -> b) -> [a] -> [a1] -> ([a1], [b])
2013-08-31 01:56:48	<--	anachrome (~lily@adsl-69-183-229-127.dsl.wlfrct.sbcglobal.net) has quit (Quit: gonna do something other than listen to stars)
2013-08-31 01:56:50	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Read error: Connection reset by peer)
2013-08-31 01:57:00	jmcarthur	...
2013-08-31 01:57:03	jmcarthur	fail
2013-08-31 01:57:05	jmcarthur	try again
2013-08-31 01:57:08	jmcarthur	elsewhere
2013-08-31 01:57:09	arkeet	no
2013-08-31 01:57:09	chrisdone	yeah, that only takes the second list
2013-08-31 01:57:16	chrisdone	only an idea would make a function taht does that
2013-08-31 01:57:17	chrisdone	<_<
2013-08-31 01:57:21	arkeet	chrisdone: and I suppose yours did something else.
2013-08-31 01:57:23	chrisdone	> _>
2013-08-31 01:57:24	lambdabot	  <hint>:1:3:
2013-08-31 01:57:24	lambdabot	     parse error (possibly incorrect indentation or mismatched ...
2013-08-31 01:57:31	ezrios	hah
2013-08-31 01:58:18	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 264 seconds)
2013-08-31 01:58:27	arkeet	@let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just))
2013-08-31 01:58:27	lambdabot	Plugin `eval' failed with: Ambiguous infix expression
2013-08-31 01:58:52	arkeet	er?
2013-08-31 01:59:26	arkeet	> let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder' (,) [1,2] [3..6]
2013-08-31 01:59:27	lambdabot	  ([(1,3),(2,4)],[5,6])
2013-08-31 01:59:44	arkeet	> let zipRemainder' f = curry ((catMaybes.map(uncurry (liftM2 f))***catMaybes.takeWhile isJust.map snd) . span ((\(x,y) -> isJust x&&isJust y)) . uncurry zip . ((++repeat Nothing).map Just *** (++repeat Nothing).map Just)) in zipRemainder' (,) [1..4] [5..6]
2013-08-31 01:59:45	lambdabot	  ([(1,5),(2,6)],[])
2013-08-31 01:59:57	arkeet	yeah, same as mine.
2013-08-31 01:59:58	chrisdone	i like that you had to run it to be sure =)
2013-08-31 02:00:13	mcstar	> let zipret xs ys = (zip (take m xs) (take m ys), if d > 0 then drop d xs else drop d ys) where l1 = length xs; l2 = length ys; d = l1-l2; m = min l1 l2 in zipret [1,2,3] [4,3,5,4,3,2]
2013-08-31 02:00:14	lambdabot	  ([(1,4),(2,3),(3,5)],[4,3,5,4,3,2])
2013-08-31 02:00:15	arkeet	well, I didn't even try to understand it except by looking at the type.
2013-08-31 02:00:27	arkeet	eww, length
2013-08-31 02:00:42	arkeet	eww, Int
2013-08-31 02:01:02	nooodl	isn't that supposed to return ([(1,4),(2,3),(3,5)],[4,3,2])
2013-08-31 02:01:19	arkeet	he got d wrong.
2013-08-31 02:01:28	-->	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has joined #haskell
2013-08-31 02:01:35	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:01:36	mcstar	(negate d)
2013-08-31 02:01:37	arkeet	perhaps if he used abs...
2013-08-31 02:01:57	mcstar	sry, its late
2013-08-31 02:02:36	arkeet	but still, length =(
2013-08-31 02:02:49	mcstar	i didnt want to write out a recursive function
2013-08-31 02:02:55	-->	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has joined #haskell
2013-08-31 02:03:10	arkeet	you could have used lazy nats
2013-08-31 02:03:16	mcstar	thats fl00r's homework :)
2013-08-31 02:03:24	arkeet	where length = void, (-) = (\\), and so on
2013-08-31 02:03:39	arkeet	take = zipWith (const id)
2013-08-31 02:03:57	arkeet	min = zipWith const, as well.
2013-08-31 02:04:00	fl00r	i didn't know data.these existed...there's some cool stuff in there
2013-08-31 02:04:04	-->	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has joined #haskell
2013-08-31 02:04:04	chrisdone	drop = unsafePerformIO (system "xeyes&killall life")
2013-08-31 02:04:11	arkeet	haha
2013-08-31 02:04:19	<--	RThinker (~yegor@176.102.17.117) has quit (Quit: Leaving.)
2013-08-31 02:04:25	nooodl	http://codepad.org/RuUhDEKN is this valid
2013-08-31 02:04:25	<--	talzeus (~studybot_@113.37.230.101) has quit (Read error: Connection reset by peer)
2013-08-31 02:04:40	chrisdone	hehe, that url sounds like a street fighter move
2013-08-31 02:04:42	 *	hackagebot handa-gdata 0.6.7 - Library and command-line utility for accessing Google services and APIs.  http://hackage.haskell.org/package/handa-gdata-0.6.7 (BrianBush)
2013-08-31 02:05:36	chrisdone	nooodl: pretty fly for a nooodl guy
2013-08-31 02:06:15	monochrom	I love xeyes
2013-08-31 02:06:16	mcstar	2 am, bb
2013-08-31 02:06:31	edwardk	chrisdone: hah!
2013-08-31 02:06:32	chrisdone	monochrom: me2
2013-08-31 02:06:46	<--	normanrichards (~normanric@rrcs-108-178-120-144.sw.biz.rr.com) has quit (Quit: normanrichards)
2013-08-31 02:06:52	chord	you guys ever make a game with haskell?
2013-08-31 02:07:28	<--	tibbe (~tibbe@207.198.105.20) has quit (Quit: tibbe)
2013-08-31 02:07:40	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-08-31 02:07:44	arkeet	ok, sent a pull request for these.
2013-08-31 02:07:44	ski_	chrisdone : yeah, that's OCaml's labels, described at the same page as the polymorphic variants link i mentioned above
2013-08-31 02:08:12	chrisdone	aha
2013-08-31 02:08:32	edwardk	Arkeet good it'll fix those haddocks too!
2013-08-31 02:09:09	arkeet	??
2013-08-31 02:09:26	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 02:09:33	chrisdone	elliott: wonder if we can get `these' in lambdabot =]
2013-08-31 02:09:40	edwardk	The ones on hackage were built back when haddock had a bug/ bad interaction w GHC API
2013-08-31 02:09:41	arkeet	^
2013-08-31 02:09:49	arkeet	edwardk: ah, so just a new upload will fix it.
2013-08-31 02:09:59	edwardk	Yeah
2013-08-31 02:10:01	elliott	chrisdone: one second, have to deal with something else first.
2013-08-31 02:10:22	--	Mode #haskell [+o elliott] by ChanServ
2013-08-31 02:10:25	--	Mode #haskell [+b *!*322f530e@*.50.47.83.14] by elliott
2013-08-31 02:10:25	<--	elliott has kicked chord (chord)
2013-08-31 02:10:28	chrisdone	elliott: didn't mean immediately, just a suggestion for your `copious free time' =)
2013-08-31 02:10:30	--	Mode #haskell [+b chord!*@*] by elliott
2013-08-31 02:10:33	--	Mode #haskell [-o elliott] by elliott
2013-08-31 02:10:39	elliott	okay, now I'll start considering it.
2013-08-31 02:10:39	arkeet	hm, what did chord do?
2013-08-31 02:10:49	arkeet	or was he one of those persistent trolls
2013-08-31 02:10:54	elliott	arkeet: get banned for doing exactly what you see in /lastlog chord
2013-08-31 02:10:55	elliott	twice.
2013-08-31 02:10:59	elliott	or more.
2013-08-31 02:11:02	<--	AfC (~andrew@2001:44b8:31cb:d400:6e88:14ff:fe33:2a9c) has quit (Quit: Leaving.)
2013-08-31 02:11:09	Fuuzetsu	edwardk: what Haddock bug?
2013-08-31 02:11:14	monochrom	elliott has long memory :)
2013-08-31 02:11:14	arkeet	ah, I see.
2013-08-31 02:11:16	<--	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has quit (Ping timeout: 264 seconds)
2013-08-31 02:11:16	<--	dschoepe (~dschoepe@unaffiliated/dschoepe) has quit (Quit: WeeChat 0.4.1)
2013-08-31 02:11:19	arkeet	the name sounds familiar anyway.
2013-08-31 02:11:26	elliott	edwardk was too reasonable for chord the first time so they had to troll about bitcoin or something to finally get banned :p
2013-08-31 02:11:28	-->	ryant5000 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has joined #haskell
2013-08-31 02:11:41	chrisdone	documentation of trollery http://ircbrowse.net/browse/haskell?q=chord
2013-08-31 02:11:52	<--	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 02:12:05	monochrom	chrisdone + elliott = big brother is watching you! :)
2013-08-31 02:12:13	tel	kill them with kindness..?
2013-08-31 02:12:27	monochrom	Departments of Truth and Love :)
2013-08-31 02:12:32	edwardk	Fuuzetsu: It was including lots of 'administrative' instance requirements in the haddocks, making them scary
2013-08-31 02:12:35	elliott	you don't need kindness for ban evasion :)
2013-08-31 02:12:38	chrisdone	2+2=5
2013-08-31 02:12:47	chrisdone	(…with the appropriate Num instance)
2013-08-31 02:12:59	edwardk	Things that it already had, so the instances looked way worse than they were
2013-08-31 02:13:02	-->	conehead (~conehead@unaffiliated/conehead) has joined #haskell
2013-08-31 02:13:06	<--	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 02:13:08	monochrom	(or just hide Prelude's (+) and define your own)
2013-08-31 02:13:19	c_wraith	> let 2 + 2 = 3.997 in 2 + 2
2013-08-31 02:13:21	lambdabot	  3.997
2013-08-31 02:13:36	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 02:13:45	Fuuzetsu	edwardk: Is it fixed? Is there a ticket?
2013-08-31 02:13:46	chrisdone	monochrom: import O'Brien ((+))
2013-08-31 02:13:57	edwardk	Long fixed, and there was
2013-08-31 02:13:59	<--	jodaro1 (~Adium@64.156.167.128) has left #haskell
2013-08-31 02:14:01	tel	monochrom does that go into the whole "How to Write Maintainable Haskell Code" bit?
2013-08-31 02:14:12	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-08-31 02:14:15	<--	hannese (~jsessgseg@c83-248-25-46.bredband.comhem.se) has quit (Read error: Operation timed out)
2013-08-31 02:14:40	elliott	chrisdone: looks like these fails to be Safe Haskell going by the haddocks
2013-08-31 02:14:48	chrisdone	ah
2013-08-31 02:14:51	elliott	though that may be the fault of a dependency and upload time and not true if I installed it now
2013-08-31 02:14:57	arkeet	huh hmm.
2013-08-31 02:15:01	arkeet	I'm looking at the lenses in these.
2013-08-31 02:15:09	elliott	it goes to show how little people care about Safe Haskell that everything is broken in it
2013-08-31 02:15:17	<--	zammy (~sammy@62.98.83.53) has quit (Remote host closed the connection)
2013-08-31 02:15:18	<--	ryant50001 (~ryan@cpe-68-175-46-181.nyc.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 02:15:27	arkeet	why isn't here = _This and there = _That, and havit be a type-changing prism?
2013-08-31 02:15:45	edwardk	Safety is a nice goal, but overrated
2013-08-31 02:15:46	arkeet	oh wait never mind...
2013-08-31 02:15:48	monochrom	Safe Haskell is fairly new. people need time to adapt.
2013-08-31 02:15:56	arkeet	because These.
2013-08-31 02:16:09	<--	goldkatze (~nobody@unaffiliated/goldkatze) has quit (Read error: Operation timed out)
2013-08-31 02:16:11	edwardk	That and it is too easy to screw up
2013-08-31 02:16:22	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 02:16:26	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 02:16:35	 *	arkeet considers what the Monad instance for These is
2013-08-31 02:16:35	edwardk	I wish saying Trustworthy was setting a floor rather than lowering Safe to Trustworthy
2013-08-31 02:16:38	elliott	monochrom: I tend to see support for Safe HAskell regressing :/
2013-08-31 02:16:44	<--	Amanas (~Amanas@c-24-128-204-226.hsd1.ma.comcast.net) has left #haskell ("Leaving")
2013-08-31 02:16:57	chrisdone	edwardk: i really want to spend a weekend porting ndm's `catch' to ghc
2013-08-31 02:17:16	monochrom	but I predict: in the long run, more people will care about Safe Haskell than about getting more Haskell libs to work on Windows!
2013-08-31 02:17:30	edwardk	Sounds fun, chrisdone
2013-08-31 02:17:34	chrisdone	monochrom: ha
2013-08-31 02:17:54	arkeet	yeah, I guess it's what I expected.
2013-08-31 02:17:54	edwardk	They already do
2013-08-31 02:18:07	<--	xymox (lechuck@unaffiliated/contempt) has quit (Ping timeout: 240 seconds)
2013-08-31 02:18:25	 *	arkeet ponders whether it's lawful
2013-08-31 02:18:36	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 02:20:20	-->	sclv (~sclv@c-76-116-128-106.hsd1.de.comcast.net) has joined #haskell
2013-08-31 02:20:24	Sonarpulse	edwardk, is bytes supposed to eventually replace binary and serial?
2013-08-31 02:20:30	<--	jdoliner (~jdoliner@173-228-89-104.dsl.static.sonic.net) has quit (Ping timeout: 264 seconds)
2013-08-31 02:21:10	-->	xymox (lechuck@unaffiliated/contempt) has joined #haskell
2013-08-31 02:21:25	edwardk	Sonarpulse: It is so I can avoid duplicating code to work with both
2013-08-31 02:21:40	edwardk	Also it let me avoid the annoying list encodings in each
2013-08-31 02:22:29	<--	Ralith (~ralith@66.114.129.162) has quit (Ping timeout: 248 seconds)
2013-08-31 02:22:32	Sonarpulse	ok
2013-08-31 02:22:53	<--	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has quit (Read error: Operation timed out)
2013-08-31 02:23:02	Sonarpulse	The fact it does both so nicely is great evidence how redundant they are
2013-08-31 02:23:07	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Remote host closed the connection)
2013-08-31 02:23:35	glguy	binary is converging with cereal
2013-08-31 02:23:46	tel	glguy is one slated to eat the other?
2013-08-31 02:23:50	<--	tyfighter (~tyfighter@c-98-210-65-59.hsd1.ca.comcast.net) has quit (Quit: tyfighter)
2013-08-31 02:23:53	glguy	I don't think so
2013-08-31 02:23:55	Sonarpulse	crossing fingers...
2013-08-31 02:24:01	edwardk	glguy: Well, bytes is just a thin compatibility shim over both
2013-08-31 02:24:12	ski_	leroux : .. did you manage to get something working ?
2013-08-31 02:24:13	glguy	I'm just explaining why they are so similar now
2013-08-31 02:24:13	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 02:24:18	edwardk	Yeah
2013-08-31 02:24:51	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 02:24:52	leroux	ski_: http://ghc.haskell.org/trac/ghc/attachment/ticket/2184/0001-Fix-2184.-findExecutable-checks-if-the-file-actually.patch
2013-08-31 02:25:00	tel	Is there any guidance on how to pick between them even? I once thought it was a lazy/strict thing, but I think even that's been equilibriated?
2013-08-31 02:25:06	Sonarpulse	the overlap between those two just makes me feels so OCD
2013-08-31 02:25:27	edwardk	Tel: it's lazy vs strict still
2013-08-31 02:25:28	glguy	f.s.v.o OCD
2013-08-31 02:25:37	tel	ok
2013-08-31 02:25:50	glguy	You can run binary on strict stuff now with the incremental run functions
2013-08-31 02:26:04	glguy	and cereal's "Put" functionality isn't different from binary's
2013-08-31 02:27:06	edwardk	I'm not wedded to keeping bytes if binary has fully subsumed the other. It came about pragmatically I needed both instances for stuff in the old analytics code base
2013-08-31 02:27:46	-->	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has joined #haskell
2013-08-31 02:28:06	ski_	leroux : the last lines looks like an instance of `(>>=)' for `Maybe'
2013-08-31 02:28:40	glguy	the only thing I'm aware of that binary is missing that cereal has is "isolate" and "label"
2013-08-31 02:28:42	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 02:28:51	leroux	ski_: You're right.
2013-08-31 02:29:15	tel	glguy what does label even do?
2013-08-31 02:29:32	glguy	labels a sub parser to help you figure out parse errors
2013-08-31 02:29:37	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 02:29:41	glguy	you get a stack trace when something goes wrong
2013-08-31 02:29:44	tel	oh
2013-08-31 02:30:08	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 02:30:10	edwardk	What'll probably happen is when I tackle semi indexed binary, I'll do that in bytes.
2013-08-31 02:30:12	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 02:30:47	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 02:31:18	<--	cdidd (~cdidd@128-68-19-30.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 02:31:23	tel	edwardk do you have semi-indexed json somewhere already? or was that just a joke on reddit?
2013-08-31 02:31:26	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Client Quit)
2013-08-31 02:31:45	edwardk	It's not a joke, but it isn't on hackage yet
2013-08-31 02:31:56	tel	ah
2013-08-31 02:32:09	tel	very cool :)
2013-08-31 02:32:20	glguy	What is "semi-indexed"?
2013-08-31 02:32:30	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:32:34	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 02:32:43	edwardk	It needs more succinct indexed dictionary code than I have now. Ddarius volunteered to help With that
2013-08-31 02:32:56	edwardk	@google semi indexed semi structured
2013-08-31 02:32:58	tel	glguy partial indexing of serialized data
2013-08-31 02:32:59	lambdabot	http://www.di.unipi.it/~ottavian/files/semi_index_cikm.pdf
2013-08-31 02:32:59	lambdabot	Title: Semi-Indexing Semi-Structured Data in Tiny Space
2013-08-31 02:33:07	-->	morvism (~morvism@adsl-99-127-27-151.dsl.wlfrct.sbcglobal.net) has joined #haskell
2013-08-31 02:33:10	edwardk	That describes a version for Jason
2013-08-31 02:33:14	edwardk	Er json
2013-08-31 02:33:26	tel	edwardk ipad is like a foreign accent
2013-08-31 02:33:29	<--	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has quit (Remote host closed the connection)
2013-08-31 02:34:11	<--	jfischoff (~jfischoff@corp.imvu.com) has quit (Quit: jfischoff)
2013-08-31 02:34:13	edwardk	Yeah
2013-08-31 02:34:39	-->	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 02:34:46	-->	ndonaldson (~nic@61.69.24.113) has joined #haskell
2013-08-31 02:35:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 02:35:30	<--	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has quit (Ping timeout: 264 seconds)
2013-08-31 02:35:37	-->	cdidd (~cdidd@128-68-19-241.broadband.corbina.ru) has joined #haskell
2013-08-31 02:35:49	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:36:01	thr33strikes	I'm trying to use this command to list things in a directory,  listDirectory :: FilePath -> IO [FilePath]
2013-08-31 02:36:03	edwardk	glguy: Build an index that is ~3-5% of the document size that you can build fast enough to accelerate a query you're doing on the fly rather than parse and query, but which you can also store
2013-08-31 02:36:04	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:36:30	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-08-31 02:36:42	thr33strikes	I have it written in a file with ext .hs
2013-08-31 02:36:44	glguy	You compute the index structure once and store it?
2013-08-31 02:36:48	edwardk	glguy: I have a variant that covers data.binary as well which makes it so you only pay to deserialize the parts you look at via mmap
2013-08-31 02:36:51	edwardk	You can
2013-08-31 02:36:54	-->	Moataz-E (~Moataz-E@cnat159.wlan.net.ed.ac.uk) has joined #haskell
2013-08-31 02:36:58	thr33strikes	why won't it run?
2013-08-31 02:36:59	<--	cdidd (~cdidd@128-68-19-241.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 02:37:00	edwardk	But even on the fly it is a win
2013-08-31 02:37:15	edwardk	And you can compress the doc chunk wise after indexing
2013-08-31 02:37:15	<--	obcode (~obcode@ob.cs.hm.edu) has quit (Remote host closed the connection)
2013-08-31 02:37:42	tel	thr33strikes can you put your code up on a paste site like http://lpaste.net/
2013-08-31 02:37:52	edwardk	Take say a 340k json doc to a 10k index and 42k block store that queries 2-3x faster than the original
2013-08-31 02:37:55	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Client Quit)
2013-08-31 02:37:59	thr33strikes	sure
2013-08-31 02:38:11	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:38:11	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 02:38:17	-->	xpika (~jrg@58.171.21.27) has joined #haskell
2013-08-31 02:38:28	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:38:55	ski_	leroux : `return (perms >>= \p -> guard (executable p) >> return p)', i suppose
2013-08-31 02:39:08	-->	cdidd (~cdidd@95-24-229-144.broadband.corbina.ru) has joined #haskell
2013-08-31 02:39:13	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:39:17	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 02:39:30	lpaste	thr33strikes pasted “Newbie” at http://lpaste.net/92350
2013-08-31 02:39:41	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 02:40:10	edwardk	glguy: With the binary variant you can make a lazy expression that jumps around the index on the binary in succinct extra space
2013-08-31 02:40:42	FreeFull	thr33strikes: Where are you getting listDirectory from? I can't find it, but there is getDirectoryContents with the same type signature in System.Directory
2013-08-31 02:40:46	glguy	edwardk: do you need a class of non-failing parsers for it to work out?
2013-08-31 02:40:52	edwardk	Now O(1) to get to your nth child for an ADT
2013-08-31 02:41:01	-->	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has joined #haskell
2013-08-31 02:41:20	thr33strikes	from system-fileio
2013-08-31 02:41:26	edwardk	no you can semi index a parser too! But it works well for Binary given the unfailing aspect
2013-08-31 02:41:27	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 268 seconds)
2013-08-31 02:41:30	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 02:41:33	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:41:59	tel	thr33strikes you should try using it in an interpreter like ghci, what you've written is only the type, not a program that will run
2013-08-31 02:42:07	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Quit: lukexi)
2013-08-31 02:42:38	-->	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has joined #haskell
2013-08-31 02:42:40	edwardk	with parsing it is particularly interesting because the recognizer builds the semi index, which i can flesh out with an AST
2013-08-31 02:42:56	levi	edwardk: You haven't happened to have written a reversible binary protocol parser suitable for context-sensitive packet decoding, have you?
2013-08-31 02:43:32	edwardk	Normally parsing blows up memory usage e.g. 20x, this way it blows up 1.1x, then you pay for what you look at
2013-08-31 02:43:48	edwardk	levi: Not recently
2013-08-31 02:44:02	thr33strikes	my ghci has prelude> is that ok?
2013-08-31 02:44:08	FreeFull	thr33strikes: A full program using that module would be something like       import Filesystem; main = mapM_ print (listDirectory ".")
2013-08-31 02:44:21	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-08-31 02:44:34	FreeFull	In GHCi, you can do   import Filesystem       and then     listDirectory "your directory"
2013-08-31 02:44:44	FreeFull	"." is the current directory
2013-08-31 02:44:45	levi	edwardk: Old stuff that's out there somewhere is fine with me, even if it's bitrotted. But if there's nothing handy, that's fine too.
2013-08-31 02:45:14	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:45:29	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:45:38	edwardk	levi: Nothing handy/usable
2013-08-31 02:45:44	-->	lcfrs (~lcfrs@8.25.197.24) has joined #haskell
2013-08-31 02:46:23	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 02:46:42	<--	bos (~bos@facebook/mercurial/bos) has quit (Remote host closed the connection)
2013-08-31 02:47:02	<--	shesek (~shesek@IGLD-84-228-157-55.inter.net.il) has quit (Ping timeout: 264 seconds)
2013-08-31 02:47:19	-->	bos (~bos@facebook/mercurial/bos) has joined #haskell
2013-08-31 02:47:48	thr33strikes	Freefull I just tried what you said and the module loaded but when I called list.Directory i received a not in scope error
2013-08-31 02:48:35	tel	anyone have any recommended reading for DSEL examples? I'm thinking of Hudak's stuff, the diagrams/monoids paper, financial contracts, &c.
2013-08-31 02:48:43	-->	mm_freak (~milch@pD9F92BBB.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 02:48:44	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 02:49:00	glguy	edwardk: and is any of this on your github?
2013-08-31 02:49:02	<--	path[l] (~vsi@173.252.71.3) has quit (Quit: path[l])
2013-08-31 02:49:15	levi	edwardk: Having done it before, do you have a 1-sentence summary of the approach you used?
2013-08-31 02:49:15	edwardk	Not yet
2013-08-31 02:49:17	<--	Squid_Tamer (~s@198.23.138.21) has quit (Remote host closed the connection)
2013-08-31 02:49:18	<--	zett_zelett (~zett_zele@p5DE798BF.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-08-31 02:49:38	-->	litherum1 (~Adium@156.39.10.22) has joined #haskell
2013-08-31 02:49:41	<--	watermind (~wm@2.80.250.44) has quit (Quit: Konversation terminated!)
2013-08-31 02:49:46	edwardk	Levi at the time I cared about protocol recognition from fragments while losing surrounding context often
2013-08-31 02:50:01	<--	lcfrs (~lcfrs@8.25.197.24) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:40	<--	bos (~bos@facebook/mercurial/bos) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:40	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 245 seconds)
2013-08-31 02:51:48	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 02:52:11	-->	ye_ (~ye@nyufwa-wlessauthclients-07.natpool.nyu.edu) has joined #haskell
2013-08-31 02:52:20	<--	fl00r (~fl00r@216.70.153.210) has left #haskell ("Leaving")
2013-08-31 02:52:27	<--	morvism (~morvism@adsl-99-127-27-151.dsl.wlfrct.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:52:29	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-08-31 02:52:35	<--	mm_freak_ (~milch@p5DD05A2D.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-08-31 02:52:39	levi	I don't have that problem at the moment; I'm mostly just wishing for a nice way to write protocol parsers/printers. I have some vague ideas and some inspiration to work from, but meanwhile I just have a mess of Data.Binary instances.
2013-08-31 02:52:50	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Read error: Connection reset by peer)
2013-08-31 02:53:00	<--	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has quit (Read error: Operation timed out)
2013-08-31 02:53:23	<--	h4199 (~chatzilla@adsl-76-237-235-219.dsl.rcsntx.sbcglobal.net) has quit (Ping timeout: 260 seconds)
2013-08-31 02:53:26	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:53:26	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:53:28	<--	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Ping timeout: 240 seconds)
2013-08-31 02:53:30	<--	tommd (~tommd@pdx.galois.com) has quit (Ping timeout: 264 seconds)
2013-08-31 02:53:49	<--	es917 (~es@149.142.141.102) has quit (Quit: es917)
2013-08-31 02:53:52	edwardk	I leave protocols to a former life. I never want to sit there staring at packets again ;)
2013-08-31 02:54:37	danharaj	edwardk: would you know how I can use parametricity to guarantee quantified functions on GADT-defined functors are natural?
2013-08-31 02:54:47	danharaj	I am not good with free theorem
2013-08-31 02:55:23	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 02:55:26	enthropy	are people aware of a cleaner/better way to propagate type information when pretending that polymorphic functions are first-class?
2013-08-31 02:55:27	edwardk	danharaj: Let me talk about that at a computer later :)
2013-08-31 02:55:28	enthropy	http://code.haskell.org/~aavogt/HList/docs/HList/Data-HList-FakePrelude.html
2013-08-31 02:55:34	danharaj	ok cool
2013-08-31 02:56:07	danharaj	I finally have all the pieces of understanding I need and now I need to make parametricity do all the dirty work for me ;)
2013-08-31 02:57:29	danharaj	edwardk: the key to all of it is that FinSet -> * is the free cartesian monoidal closed category generated from 1 object. It inherits a cartesian product from FinSet^Op via Day Convolution but also gets a nonsymmetric monoidal structure from its free object status as it is isomorphic to its own endofunctor category. This second monoidal structure is what variable substitution is all about.
2013-08-31 02:58:12	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 02:58:24	<--	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2013-08-31 02:58:28	<--	shepheb (~bsshephe@bas1-jockvale05-3096537925.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-08-31 02:58:29	<--	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-08-31 02:58:40	-->	Cale (~Cale@CPEc8d3a35c2cdd-CM78cd8ec9750d.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 02:58:54	danharaj	A monoid object in that category is a cartesian operad, and also gives rise to a relative monad on *. I'm sure the relation to left modules and Maybe on * will fall out when I implement all this jazz formally in detail.
2013-08-31 02:59:14	-->	ology (~gene@67.204.140.157) has joined #haskell
2013-08-31 02:59:19	-->	path[l] (~vsi@173.252.71.3) has joined #haskell
2013-08-31 02:59:22	<--	ssbr (~ssbr@python/site-packages/ssbr) has quit (Quit: ZNC - http://znc.in)
2013-08-31 02:59:36	-->	shepheb (~bsshephe@bas1-jockvale05-3096537563.dsl.bell.ca) has joined #haskell
2013-08-31 02:59:40	mm_freak	could anyone tell me how i go from Exp Int to Exp DIM2 in accelerate?  i want to duplicate the given coordinate
2013-08-31 02:59:47	mm_freak	15 -> Z :. 15 :. 15
2013-08-31 03:00:18	-->	Croms (~dv@92.109.224.112) has joined #haskell
2013-08-31 03:00:56	lpaste	thr33strikes revised “Newbie”: “Baby Step” at http://lpaste.net/92350
2013-08-31 03:01:08	levi	I know what *almost* all those words meant now, at least at a surface level.
2013-08-31 03:01:19	levi	What they meant together... that's another story.
2013-08-31 03:01:43	qz_	is there any idiomatic way to process sequences with lookahead/skip? say i have list of strings and need to merge strings starting with 'A' with next string
2013-08-31 03:02:29	<--	nilsi_ (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-08-31 03:02:45	<--	path[l] (~vsi@173.252.71.3) has quit (Client Quit)
2013-08-31 03:02:52	mm_freak	qz_: one way is foldr on tails
2013-08-31 03:03:04	-->	nilsi (~nilsi@46.165.220.223) has joined #haskell
2013-08-31 03:03:13	<--	fmapE (~fmapE@c-98-220-223-120.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 03:03:22	mm_freak	qz_: otherwise it's probably easiest to just write a recursive function
2013-08-31 03:03:38	qz_	mm_freak: i can do merging this way, but how to skip then?
2013-08-31 03:03:47	-->	oldthird (~oldthird@24-246-13-189.cable.teksavvy.com) has joined #haskell
2013-08-31 03:03:56	mm_freak	qz_: f (x:xs) | not (p x) = f xs
2013-08-31 03:04:01	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 03:04:07	<--	Reite (~Reite@cm-84.215.72.51.getinternet.no) has quit (Ping timeout: 260 seconds)
2013-08-31 03:04:27	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Remote host closed the connection)
2013-08-31 03:04:30	mm_freak	with the fold:  f x xs | not (p x) = xs
2013-08-31 03:04:40	<--	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has quit (Quit: Gone.)
2013-08-31 03:04:50	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-08-31 03:05:04	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 03:05:17	mm_freak	accelerate is a bit hard to work with =/
2013-08-31 03:05:49	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Colloquy for iPad - http://colloquy.mobi)
2013-08-31 03:05:58	qz_	uh, accelerate is overkill for that
2013-08-31 03:06:29	mm_freak	qz_: no, that wasn't related to your question =)
2013-08-31 03:06:33	-->	Alpha64_ (~Alpha64@190.191.162.115) has joined #haskell
2013-08-31 03:06:38	qz_	oh
2013-08-31 03:06:47	mm_freak	i'm trying to write a simple accelerate program, but right now can't figure out even simple things
2013-08-31 03:06:57	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 03:07:05	<--	ve (~a@vortis.xen.tardis.ed.ac.uk) has quit (Ping timeout: 245 seconds)
2013-08-31 03:07:17	<--	Moataz-E (~Moataz-E@cnat159.wlan.net.ed.ac.uk) has quit (Ping timeout: 248 seconds)
2013-08-31 03:07:51	-->	RichyB (~RichyB@2a02:2498:1:3c1:6ef0:49ff:fea1:d2ca) has joined #haskell
2013-08-31 03:08:49	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: Zzzzz ...)
2013-08-31 03:08:55	-->	nilsi_ (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 03:10:05	-->	dazed_and_amused (~jon@174-20-165-192.mpls.qwest.net) has joined #haskell
2013-08-31 03:10:11	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-08-31 03:11:33	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 03:11:54	<--	nilsi (~nilsi@46.165.220.223) has quit (Ping timeout: 264 seconds)
2013-08-31 03:12:32	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:13:16	<--	tel (~tel@71.206.43.93) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 03:14:32	--	GaelanAintAround is now known as Gaelan
2013-08-31 03:15:33	k00mi	mm_freak: marlow's book has a section on accelerate
2013-08-31 03:15:55	<--	NiceOneBrah (~niceonebr@173.247.206.226) has quit (Remote host closed the connection)
2013-08-31 03:16:07	<--	path[l] (~vsi@173.252.71.189) has quit (Read error: Connection reset by peer)
2013-08-31 03:16:48	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 03:17:05	<--	bennofs (~benno@dslb-088-073-195-148.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-08-31 03:17:30	<--	ormaaj (~ormaaj@97-116-0-235.mpls.qwest.net) has quit (Ping timeout: 264 seconds)
2013-08-31 03:17:32	lpaste	thr33strikes pasted “Works in ghci but not as a script file...” at http://lpaste.net/92352
2013-08-31 03:17:55	-->	jdegoes (~jdegoes@c-71-237-89-104.hsd1.co.comcast.net) has joined #haskell
2013-08-31 03:17:58	arkeet	thr33strikes: yeah, tha'ts not a complete program
2013-08-31 03:18:02	arkeet	:p
2013-08-31 03:18:09	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: This computer has gone to sleep)
2013-08-31 03:18:14	arkeet	ghci lets you evaluate expressions
2013-08-31 03:18:20	arkeet	.hs files have to contain declarations
2013-08-31 03:18:38	ski_	thr33strikes : `main = print =<< getCurrentDirectory'
2013-08-31 03:18:41	arkeet	e.g. main = getCurrentDirectory >>= putStrLn
2013-08-31 03:18:43	<--	joelb (~textual@office.khanacademy.org) has quit (Quit: Computer has gone to sleep.)
2013-08-31 03:19:13	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 03:19:23	thr33strikes	ghci makes it so easy
2013-08-31 03:19:28	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 03:20:09	<--	mxc (~maxcan@199.21.86.2) has quit (Quit: mxc)
2013-08-31 03:20:21	arkeet	I don't know what you were expecting.
2013-08-31 03:21:08	arkeet	ghci takes expressions (or IO actions), evaluates (or runs) them, and prints the results.
2013-08-31 03:21:11	arkeet	that's particular to ghci.
2013-08-31 03:21:20	-->	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has joined #haskell
2013-08-31 03:21:27	arkeet	i.e. it's a REPL
2013-08-31 03:21:29	ski_	thr33strikes : (simplifying somewhat) in a Haskell source file you write declarations, in the interactor (GHCi,Hugs,&c.) you write expressions
2013-08-31 03:21:36	monochrom	did you know: just a year ago, "import System.Directory" was illegal in ghci
2013-08-31 03:21:40	<--	joehillen (~joe@38.104.125.2) has quit (Ping timeout: 245 seconds)
2013-08-31 03:21:50	arkeet	monochrom: it was? I'm pretty sure I used ghci a year ago and that worked fine.
2013-08-31 03:21:59	monochrom	then make it 2 years
2013-08-31 03:22:03	arkeet	or 2.
2013-08-31 03:22:12	monochrom	then make it 3 years
2013-08-31 03:22:12	arkeet	but I believe that at some point it didn't work.
2013-08-31 03:22:18	ski_	make it `n' years ago, for `n' a natural number
2013-08-31 03:22:24	thr33strikes	lol
2013-08-31 03:22:37	FreeFull	monochrom: What about :m System.Directory
2013-08-31 03:22:48	ski_	FreeFull: always worked (afaik)
2013-08-31 03:22:48	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 03:22:51	monochrom	that has always existed
2013-08-31 03:22:55	arkeet	thr33strikes: anyway, the stuff that you type into ghci and the stuff that goes into a .hs file are different.
2013-08-31 03:22:55	heatsink	Bullies were tazing her?!
2013-08-31 03:23:01	ski_	(in GHCi, i.e. -- doesn't work in Hugs)
2013-08-31 03:23:02	heatsink	nm, wrong window
2013-08-31 03:23:10	arkeet	thr33strikes: something like LYAH should explain the difference.
2013-08-31 03:23:42	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 03:23:45	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 03:24:09	<--	wavewave (2efdbc23@gateway/web/freenode/ip.46.253.188.35) has quit (Ping timeout: 250 seconds)
2013-08-31 03:24:13	ski_	thr33strikes : in a source file you mostly put things you tell the computer (definitions), in the interactor you mostly put things you ask the computer (expressions to evaluate, expressions to ask what type they have,&c.)
2013-08-31 03:24:37	ski_	(incidentally, the same pattern is true of common Prolog systems)
2013-08-31 03:24:42	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 03:24:47	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-08-31 03:25:05	monochrom	I understand your expectation from elsewhere. in both Python and SML, the input to REPL and the input to editor can be identical.
2013-08-31 03:25:06	FreeFull	thr33strikes: Have you ever used any other programming language?
2013-08-31 03:25:30	ski_	monochrom : true
2013-08-31 03:25:33	monochrom	you can ask, so why not ghc too. and I can answer: you didn't pay enough money to make it happen.
2013-08-31 03:25:52	heatsink	Isn't GHCI's prompt supposed to be a do block?
2013-08-31 03:26:01	ski_	heatsink : sortof, yes
2013-08-31 03:26:03	arkeet	sort of.
2013-08-31 03:26:13	FreeFull	sort of, in IO
2013-08-31 03:26:13	arkeet	5 isn't the kind of statement you'd put in a do block, though
2013-08-31 03:26:17	monochrom	even "import MMM" in ghci was a recent Google SoC project IIRC
2013-08-31 03:26:21	heatsink	oh, right
2013-08-31 03:26:29	arkeet	there's an implicit "print" then
2013-08-31 03:26:43	FreeFull	I assume data and such came along with import
2013-08-31 03:27:03	monochrom	yeah, a bunch of declarations were from that project
2013-08-31 03:27:08	thoughtpolice	i think 'import Foo.Bar' happened in like 7.0, and full GHCi declaration syntax happened in 7.2
2013-08-31 03:27:12	-->	ormaaj (~ormaaj@97-116-119-35.mpls.qwest.net) has joined #haskell
2013-08-31 03:27:16	thoughtpolice	because 'import' i know for a fact was supported first
2013-08-31 03:27:34	thoughtpolice	and before that we just had :m+
2013-08-31 03:27:38	geekosaur	import was added in 7.4, data in 7.6, IIRC
2013-08-31 03:27:47	joelteon	I remember when import was added
2013-08-31 03:27:47	geekosaur	and 7.4.1's import was a bit buggy
2013-08-31 03:27:49	monochrom	thoughtpolice follows GHC development closely. trust him more than me
2013-08-31 03:27:51	thoughtpolice	ah, maybe that was it
2013-08-31 03:27:51	joelteon	those were dark days
2013-08-31 03:28:16	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 03:28:29	-->	tikhon (~user@adsl-75-36-188-216.dsl.pltn13.sbcglobal.net) has joined #haskell
2013-08-31 03:28:37	FreeFull	Next step, make pragmas work
2013-08-31 03:28:43	thoughtpolice	geekosaur: ah, we're both wrong!
2013-08-31 03:28:59	thoughtpolice	the full top-level declaration syntax was actually 7.4.1, it seems
2013-08-31 03:29:02	enthropy	there's some multi-line input support too
2013-08-31 03:29:10	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 03:29:11	enthropy	but probably nobody uses it
2013-08-31 03:29:15	ski_	yea, `:{ ... :}'
2013-08-31 03:29:23	arkeet	or :set +m
2013-08-31 03:29:30	<--	arborist (~arborist@e182017161.adsl.alicedsl.de) has quit (Ping timeout: 264 seconds)
2013-08-31 03:29:40	arkeet	and -m
2013-08-31 03:29:49	thoughtpolice	hvr uses it :)
2013-08-31 03:29:50	FreeFull	:{ :}  is only useful for .ghci files
2013-08-31 03:30:04	arkeet	er...
2013-08-31 03:30:07	thoughtpolice	i speculate it may tie into some emacs mode functionality, though
2013-08-31 03:30:08	-->	contorted (~androirc@adsl-184-43-6-206.bgk.bellsouth.net) has joined #haskell
2013-08-31 03:30:13	thoughtpolice	he's submitted a few patches for multiline recently
2013-08-31 03:30:19	FreeFull	Since the code still ends up parsed as it if was on one line
2013-08-31 03:30:25	arkeet	yeah.
2013-08-31 03:30:30	 *	enthropy thought the line-editing was better
2013-08-31 03:30:47	enthropy	FreeFull: a long time ago it used to be
2013-08-31 03:31:01	FreeFull	When did it change?
2013-08-31 03:31:11	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:31:28	FreeFull	Because for me it still is as if it was on one line
2013-08-31 03:31:31	thr33strikes	Freefull: I was learning Python but stopped because I thought Haskell was more interesting
2013-08-31 03:31:41	tel	there needs to be a nice way to define a type and an implementation separately
2013-08-31 03:31:42	thoughtpolice	it changed when full top level syntax was added to GHCi. you can do ":{\ndata Foo\ndata Bar:}" for example which would otherwise be a parse error
2013-08-31 03:31:43	ski_	hm, i recall in the OCaml GUI toplevel, you'd send input by `C-RET', and you could edit previous rows of unsent input
2013-08-31 03:31:44	-->	Ralith (~ralith@216.162.199.202) has joined #haskell
2013-08-31 03:31:51	enthropy	FreeFull: I have a patch dated "Thu Apr 29 13:02:46 EDT 2010"
2013-08-31 03:31:56	FreeFull	thr33strikes: Well, Haskell is more interesting
2013-08-31 03:31:59	ski_	tel : how do you mean ?
2013-08-31 03:32:00	enthropy	http://ghc.haskell.org/trac/ghc/ticket/3984
2013-08-31 03:32:13	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-08-31 03:32:19	FreeFull	enthropy: Which still isn't in current ghc stable
2013-08-31 03:32:27	tel	ski_ I want to be able to let-define fns with constrained types
2013-08-31 03:32:54	<--	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 03:32:59	arkeet	let f :: ...; f ... = ...
2013-08-31 03:32:59	ski_	tel : like `let idBool :: Bool -> Bool; idBool b = b' ?
2013-08-31 03:33:10	mm_freak	k00mi: i've read that one
2013-08-31 03:33:16	FreeFull	enthropy: Nevermind, it didn't work because I didn't use a do
2013-08-31 03:33:19	tel	ooh.
2013-08-31 03:33:38	mm_freak	k00mi: it doesn't explain how to solve my current problem though
2013-08-31 03:33:39	tel	I wasn't aware that worked—
2013-08-31 03:33:57	ski_	tel : also with `{'s and `}'s, if you really want to
2013-08-31 03:34:00	thr33strikes	I was told that for some learning a functional language from the beggining would be easier because I wouldn't have bad habits
2013-08-31 03:34:05	enthropy	the line-editing didn't get done because haskeline didn't/doesn't? support that very well
2013-08-31 03:34:22	tel	ski_ I'd been trying with multiline mode, but didn't know how to do the lets
2013-08-31 03:34:24	ski_	tel : and of course you can separate multiple defining equations for `idBool' with `;'
2013-08-31 03:34:29	monochrom	not so much bad habits as prejudice
2013-08-31 03:34:37	thr33strikes	ic
2013-08-31 03:34:41	FreeFull	thr33strikes: .hs files behave differently from the GHCi prompt
2013-08-31 03:34:51	FreeFull	As others have already said
2013-08-31 03:35:09	thr33strikes	I read that earlier today but didn't remember exactly what the book was trying to get at
2013-08-31 03:35:14	tel	nifty
2013-08-31 03:35:23	<--	dazed_and_amused (~jon@174-20-165-192.mpls.qwest.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 03:35:32	tel	is it possible to do that with :{ :}
2013-08-31 03:35:58	thr33strikes	with python I learned a lot more when I just jumped in and tryied to build something
2013-08-31 03:36:08	<--	glguy (~glguy@unaffiliated/glguy) has quit (Quit: Sleeping)
2013-08-31 03:36:14	ski_	@let idBool :: Bool -> Bool; idBool b = b; idBool _ = error "unhandled case in `idBool'"
2013-08-31 03:36:15	lambdabot	 .L.hs:153:1: Warning:
2013-08-31 03:36:15	lambdabot	     Pattern match(es) are overlapped
2013-08-31 03:36:15	lambdabot	     In an equat...
2013-08-31 03:36:31	thr33strikes	I know now I need to go back and look at some of the syntax a little more when using the .hs files
2013-08-31 03:36:32	ski_	heh
2013-08-31 03:36:41	arkeet	thr33strikes: you should get used to using .hs files :)
2013-08-31 03:36:50	thr33strikes	yea lol
2013-08-31 03:37:00	arkeet	it's good to put a bunch of declarations into a .hs file, and then load that into ghci
2013-08-31 03:37:03	arkeet	to poke around
2013-08-31 03:37:05	tel	thr33strikes I usually write my ideas in a .hs file and load them in ghci with :r
2013-08-31 03:37:08	<--	ology (~gene@67.204.140.157) has quit (Quit: Twas bryllyg, and ye slythy toves did gyre and gymble in ye wabe)
2013-08-31 03:37:09	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 03:37:10	tel	yeah, what arkeet said
2013-08-31 03:37:11	tel	: )
2013-08-31 03:37:14	FreeFull	ski_: I wonder if there is any case where the pattern matches overlap, but not completely
2013-08-31 03:37:22	<--	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has quit (Remote host closed the connection)
2013-08-31 03:37:22	arkeet	much easier than trying to write a big function definition within ghci.
2013-08-31 03:37:40	thr33strikes	writing for me is slow now because I'm trying to learn VIM as well
2013-08-31 03:37:48	ski_	thr33strikes : typically one edits the source file a bit, then tries to load it into the interactor, going back to fix type errors if any, then try out some example uses of the definitions in the source from the interactor, then back again
2013-08-31 03:37:55	FreeFull	ski_: That is, there are values that only match one of the two, for both, but there are some that match both
2013-08-31 03:38:06	monochrom	I am totally not thrilled about being able to write a whole program in a REPL. I mean, you are welcome to do it, but I couldn't care less. what happens if I'm 90% done and someone pulls the plug?
2013-08-31 03:38:24	<--	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has quit (Quit: http://youtu.be/gadevqmO5DA)
2013-08-31 03:38:39	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 260 seconds)
2013-08-31 03:38:54	thr33strikes	that's what I was originally doing but I got stuck with trying to use the System.Directory library
2013-08-31 03:39:01	ski_	thr33strikes : while something like vim or emacs may be quite helpful in the long run, it may perhaps be a bit much to both learn it and Haskell. if you have a favorite text editor, you could use it for the while, while learning the basics of Haskell
2013-08-31 03:39:07	monochrom	therefore, I always type into a file and save anyway. then try a few tests in REPL. advanced REPL features are irrelevant.
2013-08-31 03:39:08	tel	monochrom I mostly do it when I've loaded some intermediate data that I'm playing along with
2013-08-31 03:39:09	FreeFull	monochrom: There isn't a convienient way to save the code you write into ghci anyway
2013-08-31 03:39:16	-->	joneshf-laptop (~joneshf@c-98-208-36-36.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 03:39:17	tel	because repl reloads kill local state
2013-08-31 03:39:17	<--	contorted (~androirc@adsl-184-43-6-206.bgk.bellsouth.net) has quit (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
2013-08-31 03:39:28	monochrom	speaking of which, Python's REPL of reloading/refreshing sucks
2013-08-31 03:39:32	ski_	FreeFull : `(True,_)' vs. `(_,True)' ?
2013-08-31 03:39:36	arkeet	monochrom: heh.
2013-08-31 03:39:38	FreeFull	monochrom: But it is nice to have advanced features when you are just messing around because you don't know what exactly to do yet
2013-08-31 03:39:44	tel	monochrom yesss..
2013-08-31 03:39:49	tel	ugh
2013-08-31 03:39:52	FreeFull	ski_: That would work
2013-08-31 03:40:00	thr33strikes	I'm getting the hang of vim but I think of it as the first time I started actually typing
2013-08-31 03:40:13	thr33strikes	it was brutal for me then but after a while it became second nature
2013-08-31 03:40:16	FreeFull	> case (True, True) of (True,_) -> 'a'; (_,True) -> 'b'
2013-08-31 03:40:18	lambdabot	  'a'
2013-08-31 03:40:27	FreeFull	ski_: Seems it doesn't warn on that
2013-08-31 03:40:33	ski_	@let por True _ = True; por _ True = True; por False False = False
2013-08-31 03:40:34	lambdabot	 Defined.
2013-08-31 03:40:34	thr33strikes	everyday I learn a little more
2013-08-31 03:40:50	ski_	FreeFull : well, it ought to
2013-08-31 03:40:57	monochrom	FreeFull: I mess around with the help of a file. it's even better, the file is a log of all things I try
2013-08-31 03:41:00	thr33strikes	I equate it to video games lol and anything to do with muscle memory
2013-08-31 03:41:13	thr33strikes	repetition is best for me
2013-08-31 03:42:03	FreeFull	monochrom: Usually I am actually writing something so I have a file loaded into ghci anyway
2013-08-31 03:42:05	ski_	FreeFull : one thing that i appreciate about the MLs is that overlapped patterns is an error and inexhaustive patterns is a noisy warning
2013-08-31 03:42:12	tel	thr33strikes I definitely find that to be the case with vim and emacs. They're quite complex, but when you learn them well their way of thinking gets "in your fingers"
2013-08-31 03:42:14	FreeFull	And test in the REPL as I write
2013-08-31 03:42:52	monochrom	yes that's what I do too
2013-08-31 03:42:57	ski_	thr33strikes : of course it's your call whether to try both at the same time or not. just mentioning the option
2013-08-31 03:42:57	<--	MileyCyrus (~doctor_wh@208.154.19.95.dynamic.jazztel.es) has quit (Quit: Me'n vaig)
2013-08-31 03:43:01	FreeFull	> case (True, True) of (True,_) -> 'a'; (True,True) -> 'b'
2013-08-31 03:43:02	lambdabot	  mueval-core: UnknownError "GHC returned a result but said: [GhcError {errMs...
2013-08-31 03:43:06	thr33strikes	I haven't tried emacs yet
2013-08-31 03:43:31	thr33strikes	I don't mind the advice
2013-08-31 03:43:35	thr33strikes	that's why I'm here
2013-08-31 03:43:47	monochrom	the point is: you totally don't need "REPL can accept complete program raw" for real work
2013-08-31 03:43:50	thr33strikes	just think of me as putty to be molded lol
2013-08-31 03:44:12	arkeet	vim is good :)
2013-08-31 03:44:32	monochrom	it's a much overrated gimmick for beginners who use such gimmick for maybe 2 weeks
2013-08-31 03:44:40	FreeFull	monochrom: There is a context switch between the REPL and the editor, people don't like that
2013-08-31 03:44:45	-->	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has joined #haskell
2013-08-31 03:44:52	FreeFull	I guess that's why some people work with the REPL built into their editor
2013-08-31 03:45:00	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 03:45:05	ski_	thr33strikes : i find emacs relatively nice, but i hear vim is good as well
2013-08-31 03:45:07	<--	nilsi_ (~nilsi@183.245.65.242) has quit (Read error: Connection reset by peer)
2013-08-31 03:45:10	<--	augur (~augur@ip-64-134-240-172.public.wayport.net) has quit (Remote host closed the connection)
2013-08-31 03:45:23	thr33strikes	have any of you used a different keyboard layout I have a friend who like dvorky, or something like that
2013-08-31 03:45:43	FreeFull	monochrom: Sometimes you want to do a one-off thing to test something and don't want to make a file only to delete it afterwards
2013-08-31 03:45:45	<--	xinming (~xinming@125.87.84.67) has quit (Ping timeout: 256 seconds)
2013-08-31 03:46:02	ski_	thr33strikes : .. oh. i first read your "putty" as "PuTTY"
2013-08-31 03:46:06	ski_	@wn putty
2013-08-31 03:46:07	lambdabot	*** "putty" wn "WordNet (r) 3.0 (2006)"
2013-08-31 03:46:07	lambdabot	putty
2013-08-31 03:46:07	lambdabot	    n 1: a dough-like mixture of whiting and boiled linseed oil;
2013-08-31 03:46:07	lambdabot	         used especially to patch woodwork or secure panes of glass
2013-08-31 03:46:07	lambdabot	    v 1: apply putty in order to fix or fill; "putty the window
2013-08-31 03:46:09	lambdabot	         sash"
2013-08-31 03:46:19	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:46:20	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 03:46:38	thr33strikes	better word would have been clay
2013-08-31 03:46:49	FreeFull	arkeet: What do you think about emacs + evil?
2013-08-31 03:46:53	-->	yucht (~miles@nat-oitwireless-outside-vapornet3-d-168.Princeton.EDU) has joined #haskell
2013-08-31 03:47:16	ski_	FreeFull : with GNU Screen, the context switch is only a `^A^A' away (or `^A^I' if you display both interactor and editor at the same time)
2013-08-31 03:47:20	thr33strikes	arkeet: evil?
2013-08-31 03:47:22	-->	xinming (~xinming@125.82.205.253) has joined #haskell
2013-08-31 03:47:48	ski_	@google emacs evil
2013-08-31 03:47:48	lambdabot	http://www.emacswiki.org/emacs/Evil
2013-08-31 03:47:49	lambdabot	Title: EmacsWiki: Evil
2013-08-31 03:47:54	<--	tauli (~tauli@e182221028.adsl.alicedsl.de) has quit (Quit: tauli)
2013-08-31 03:47:55	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 245 seconds)
2013-08-31 03:47:59	<--	yucht (~miles@nat-oitwireless-outside-vapornet3-d-168.Princeton.EDU) has quit (Client Quit)
2013-08-31 03:48:13	FreeFull	ski_: Don't forget having to reload the repl too, and potentially losing your repl-local definitions
2013-08-31 03:48:30	ski_	thr33strikes : it's an Emacs "mode" for emulating some of the basic keybindings of vi, iiuc
2013-08-31 03:48:42	ski_	FreeFull : true
2013-08-31 03:48:57	-->	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has joined #haskell
2013-08-31 03:49:32	-->	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has joined #haskell
2013-08-31 03:50:11	FreeFull	ski_: I think it does a lot more than basic keybindings
2013-08-31 03:50:33	ski_	thr33strikes : re different keyboard layout, i happen to have moved my `0' key to the left of the `1' key ..
2013-08-31 03:50:46	ski_	FreeFull : probably. i don't know details
2013-08-31 03:50:47	<--	raichoo (~raichoo@e182221028.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 03:51:18	-->	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 03:51:23	-->	solrize (~solrize@unaffiliated/solrize) has joined #haskell
2013-08-31 03:52:06	<--	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 264 seconds)
2013-08-31 03:52:08	thr33strikes	can anyone recommend a great beginners haskell books?  The ones I've been finding go more into the explanation of functional programming vs the hands on coding.
2013-08-31 03:52:32	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-08-31 03:52:43	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:52:54	arkeet	thr33strikes: LYAH
2013-08-31 03:52:56	arkeet	@where lyah
2013-08-31 03:52:56	lambdabot	http://www.learnyouahaskell.com/
2013-08-31 03:52:58	ski_	(and also i have moved my left `Ctrl' key to the left of the `a' key, as i believe is common amongst Emacs users)
2013-08-31 03:53:15	arkeet	ski_: I did that and I'm not an emacs user.
2013-08-31 03:53:19	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 03:53:22	ski_	thr33strikes : ooc, which ones have you been finding ?
2013-08-31 03:53:29	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-08-31 03:53:44	FreeFull	ski_: Apparently doesn't do ex mode though
2013-08-31 03:54:02	-->	CaptainK (~CaptainK@181.179.77.190) has joined #haskell
2013-08-31 03:54:12	ski_	arkeet : well, i didn't say "only" :) -- may i inquire as to your reasons ?
2013-08-31 03:54:19	ski_	FreeFull : which ?
2013-08-31 03:54:31	thr33strikes	I was actually reading that today
2013-08-31 03:54:47	arkeet	ski_: well, a couple.
2013-08-31 03:54:52	 *	ski_ has chatted some with someone who uses `ex' to code
2013-08-31 03:54:58	thr33strikes	it was the best of the bunch
2013-08-31 03:54:58	<--	spion (~spion@unaffiliated/spion) has quit (Ping timeout: 246 seconds)
2013-08-31 03:55:05	arkeet	it's generally easier to reach, the real left ctrl key on my laptop is tiny, and I hate accidentally pressing caps lock.
2013-08-31 03:55:27	<--	apaku (~apaku@x2f12313.dyn.telefonica.de) has quit (Ping timeout: 260 seconds)
2013-08-31 03:55:31	haasn	I'm randomly getting mandelbrot: thread blocked indefinitely in an MVar operation when working with repa-devil
2013-08-31 03:55:36	<--	c_wraith (~c_wraith@commie.pwrsrc.net) has quit (Ping timeout: 256 seconds)
2013-08-31 03:55:56	haasn	I have absolutely *no* idea what causes it. It seems to either happen, or not, depending on arbitrary changes I make to the code
2013-08-31 03:56:27	-->	Quadrescence (~quad@unaffiliated/quadrescence) has joined #haskell
2013-08-31 03:56:42	-->	apaku (~apaku@x2f0aa7f.dyn.telefonica.de) has joined #haskell
2013-08-31 03:56:49	thr33strikes	ski: not sure what you're asking
2013-08-31 03:56:51	monochrom	"the devil is in the MVars" :)
2013-08-31 03:56:58	slack1256	heh
2013-08-31 03:57:13	haasn	http://bpaste.net/show/127922/
2013-08-31 03:57:16	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 03:57:17	haasn	maybe somebody can figure out what's wrong?
2013-08-31 03:57:27	arkeet	step 1: use lpaste
2013-08-31 03:57:27	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 03:57:28	arkeet	;)
2013-08-31 03:57:31	haasn	I used the exact same ‘render’ function, with one minor change (V2 instead of a tuple) in another program
2013-08-31 03:57:33	haasn	and it worked fine
2013-08-31 03:57:39	arkeet	what's the problem?
2013-08-31 03:57:44	ski_	thr33strikes : which Haskell beginner books you had been finding (that go more into the explanations of functional programming than hand-on-coding)
2013-08-31 03:57:46	arkeet	step 0: include the error message
2013-08-31 03:57:52	haasn	arkeet: “<<loop>> thread blocked indefinitely in an MVar operation”
2013-08-31 03:57:57	haasn	I just said that
2013-08-31 03:57:58	FreeFull	ski_: evil
2013-08-31 03:58:06	arkeet	oh.
2013-08-31 03:58:12	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-08-31 03:58:15	arkeet	oh, I don't know anything about repa-devil.
2013-08-31 03:58:29	arkeet	sounds like a bug.
2013-08-31 03:58:30	haasn	I'll try another repa representation
2013-08-31 03:58:37	haasn	I can't think of any other explanation for it
2013-08-31 03:58:44	haasn	if I remove the (x `seq`) bit it works
2013-08-31 03:58:59	Ralith	haasn: because your weirdass /. operator is a loop, probably
2013-08-31 03:59:01	thr33strikes	Ski_: Programming in Haskell by Graham Hutton
2013-08-31 03:59:29	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 03:59:46	thr33strikes	Ski_: it just be me though because I'm new
2013-08-31 03:59:50	monochrom	oh! is it because /. wants non-strict but you make trivial too strict?
2013-08-31 04:00:17	ski_	thr33strikes : if you're new to functional programming, such explanations may also be helpful. that being said, you could come back later to that when you know the basics of the language
2013-08-31 04:00:34	thr33strikes	Ski_:yes I was thinking the same thing
2013-08-31 04:00:54	haasn	monochrom: maybe? heh; I tried adding ! to both arguments of /. and now I just get a good old endless loop
2013-08-31 04:00:59	haasn	no <<loop>> even
2013-08-31 04:01:27	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 04:01:32	thr33strikes	Ski_: I jumped into Perarls of functional Algoriths by Richard Bird and that was definitely over my head
2013-08-31 04:01:54	ski_	thr33strikes : different people learn best in different ways, and different people may have different goals. if you fell LYAH is more helpful atm, go for it. just keep in mind that there may be deeper lessons that may be harder to grasp, but that may still be worthwhile to grok
2013-08-31 04:01:58	<--	q66 (~quaker66@213.191.105.214) has quit (Quit: Leaving)
2013-08-31 04:02:01	haasn	hmm; I changed the type to :: Int -> Int -> Double -- and got the same error as before, <<loop>>
2013-08-31 04:02:03	ski_	thr33strikes : *nod*
2013-08-31 04:02:13	haasn	this is really weirding me out right now. nothing makes sense
2013-08-31 04:02:20	haasn	the sky is falling etc.
2013-08-31 04:02:22	<--	CaptainK (~CaptainK@181.179.77.190) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2013-08-31 04:02:37	Ralith	haasn: your /. is defined as a loop. How many times do I need to repeat myself?
2013-08-31 04:02:44	haasn	oh!
2013-08-31 04:02:50	Ralith	:P
2013-08-31 04:02:58	haasn	I typo'd / as /.
2013-08-31 04:03:01	ski_	FreeFull : ok
2013-08-31 04:03:03	arkeet	haha
2013-08-31 04:03:04	Ralith	thought that might be it
2013-08-31 04:03:08	<--	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has left #haskell ("Konversation terminated!")
2013-08-31 04:03:15	monochrom	oh damn. I missed that too
2013-08-31 04:03:44	<--	dysinger (~tim@cpe-24-94-76-59.hawaii.res.rr.com) has quit (Quit: dysinger)
2013-08-31 04:03:50	<--	flebron (~flebron@190.18.146.246) has quit
2013-08-31 04:03:52	monochrom	so, keep the seq, fix /.
2013-08-31 04:04:19	thr33strikes	Ski_: The more I go over the harder subjects eventually I usually have an ahhhaaa moment and it just clicks
2013-08-31 04:04:26	monochrom	also, answer: as many times as /. loops? :)
2013-08-31 04:04:32	tel	Is there a package with a lazy sorted data type?
2013-08-31 04:04:33	 *	ski_ nods
2013-08-31 04:04:59	Ralith	tel: how would that be distinct from sorting a list?
2013-08-31 04:05:06	thr33strikes	I'll just be laying in bed or doing something and its like a light comes on
2013-08-31 04:05:18	thr33strikes	may take days but it's great when it happens
2013-08-31 04:05:22	 *	ski_ knows the feeling
2013-08-31 04:05:24	arkeet	thr33strikes: may take weeks
2013-08-31 04:05:25	tel	I want to get out the smallest thing before the whole list is sorted
2013-08-31 04:05:26	<--	plucas (~plucas@209-58-196-124.static-ip.telepacific.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-31 04:05:32	arkeet	tel: then
2013-08-31 04:05:35	-->	xl (~xl@123.113.159.146) has joined #haskell
2013-08-31 04:05:36	arkeet	just do that
2013-08-31 04:05:37	arkeet	sort is lazy
2013-08-31 04:05:41	arkeet	iirc
2013-08-31 04:05:47	tel	oh
2013-08-31 04:06:06	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-08-31 04:06:26	tel	I figured it would be some kind of quicksort thing—where I just need bubble
2013-08-31 04:06:38	arkeet	hm, maybe not
2013-08-31 04:06:45	monochrom	eventually I will have to show you how, e.g., "maximum (sort xs)" is linear time because of some laziness
2013-08-31 04:06:51	thr33strikes	this is a hobby for me so my "goal" in a sense is to reach those ahhaa moments
2013-08-31 04:07:01	monochrom	err, sorry, "take 1 (sort xs)"
2013-08-31 04:07:15	arkeet	for which implementation of sort?
2013-08-31 04:07:17	FreeFull	tel: fold with min
2013-08-31 04:07:24	monochrom	for the one that comes with GHC
2013-08-31 04:07:35	<--	nilsi (~nilsi@183.245.65.242) has quit (Ping timeout: 260 seconds)
2013-08-31 04:07:42	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 04:07:47	monochrom	or generally most merge sorts
2013-08-31 04:07:49	<--	EvilPenguin (~EvilPengu@50.193.235.235) has quit (Quit: Computer has gone to sleep.)
2013-08-31 04:08:09	FreeFull	tel: Will be O(n) rather than O(n log n)
2013-08-31 04:08:12	tel	I didn't expect that to hold! interesting
2013-08-31 04:08:24	thr33strikes	did any of you have to read LYAH more than once?
2013-08-31 04:08:33	ski_	i remember reading chapter after chapter of "Haskell: The Craft of Functional Programming", thinking "hm, how i can do anything without loops and assignment. .. hm, ok, i can do simple things, but more complex stuff ? .. ok, but surely I/O ? .." -- and also other lights lit up in the process
2013-08-31 04:08:45	arkeet	monochrom: it doesn't seem to be lazy enough here.
2013-08-31 04:08:49	FreeFull	thr33strikes: I mixed things up for myself
2013-08-31 04:08:59	arkeet	head (sort [1..10000000]) is as expensive as length
2013-08-31 04:09:09	arkeet	7.4.2 though
2013-08-31 04:09:12	thr33strikes	Freefull: how so?
2013-08-31 04:09:23	monochrom	that is linear, and I did promise linear
2013-08-31 04:09:30	arkeet	length of sort, I mean.
2013-08-31 04:09:47	arkeet	one sec
2013-08-31 04:09:47	FreeFull	thr33strikes: There are other materials than LYAH out there. I personally tend to read documentation and articles about things
2013-08-31 04:09:49	monochrom	oh, then I will have to investigate later
2013-08-31 04:10:01	FreeFull	And eventually you'll be advanced enough that LYAH won't be useful anymore
2013-08-31 04:10:16	FreeFull	It is great to get you started though
2013-08-31 04:10:20	<--	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:10:33	tel	hm, there's a wealth of information in the source it turns out
2013-08-31 04:10:39	-->	ve (~a@vortis.xen.tardis.ed.ac.uk) has joined #haskell
2013-08-31 04:10:54	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:11:10	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 04:11:50	thr33strikes	Ski: that's pretty much how I feel, my big question is how is the code structured, it seems like it's easy to create spaghetti code.  I know you'll all educate me in that regard as to why its not though.
2013-08-31 04:11:53	leroux	thr33strikes: https://gist.github.com/leroux/6395804
2013-08-31 04:11:58	FreeFull	monochrom: I wonder if  take 1 . sort    would be linear with my homegrown mergesort
2013-08-31 04:12:15	-->	TDJACR (~TDJACR@lilug/member/tdjacr) has joined #haskell
2013-08-31 04:12:21	monochrom	it most likely will be. this one is very hard to screw up :)
2013-08-31 04:13:00	arkeet	yeah, same result in 7.6.3
2013-08-31 04:13:10	arkeet	ghc screwed it up; so can you!
2013-08-31 04:13:35	thr33strikes	Leroux thanks
2013-08-31 04:13:44	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 256 seconds)
2013-08-31 04:14:00	leroux	I should probably add a few of those to the haskell-wiki.
2013-08-31 04:14:03	tel	hah
2013-08-31 04:14:08	monochrom	at some point, they switched the sorting algorithm. it was merge sort years ago. the current algorithm is faster in practice, but looks less like merge sort, I still don't exactly know what it is
2013-08-31 04:14:16	-->	m3ga (~erikd@hendrix.mega-nerd.net) has joined #haskell
2013-08-31 04:14:24	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 04:14:26	tel	monochrom yeah.. I'm trying to figure it out
2013-08-31 04:14:35	tel	probably ought to take a look at the paper referenced
2013-08-31 04:14:35	monochrom	try going back to 6.12 :)
2013-08-31 04:14:54	arkeet	I don't have that :)
2013-08-31 04:15:14	-->	croyd (637f3640@gateway/web/freenode/ip.99.127.54.64) has joined #haskell
2013-08-31 04:16:01	<--	litherum1 (~Adium@156.39.10.22) has quit (Quit: Leaving.)
2013-08-31 04:16:33	ski_	thr33strikes : it's possible to write unreadable code, yes. one tries to fight that partially by abstracting out common patterns (refactoring is simplified by the absence of side-effects)
2013-08-31 04:16:52	<--	void64 (~luke@37.214.9.42) has quit (Read error: Operation timed out)
2013-08-31 04:17:12	ski_	thr33strikes : though it's possibly to go overboard with abstraction that isn't warranted by either existing code or code that one would otherwise have to write
2013-08-31 04:18:00	ski_	thr33strikes : still, there are certain patterns of structuring code that are common
2013-08-31 04:18:53	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 268 seconds)
2013-08-31 04:19:01	-->	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has joined #haskell
2013-08-31 04:19:54	ski_	monochrom : is it still a merge sort, or something else ?
2013-08-31 04:20:04	thr33strikes	ski_: I haven't written or seen enough code to recognize them though
2013-08-31 04:20:05	ski_	(if merge sort, bottom-up or top-down ?=
2013-08-31 04:20:07	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 04:20:07	ski_	)
2013-08-31 04:20:20	--	flazz_gone is now known as flazz
2013-08-31 04:21:04	ski_	thr33strikes : a quite common one is to write a "wrapper" function that is responsible for any "initialization" ior "finalization" of a "worker" function that does the main work
2013-08-31 04:21:30	haasn	wait, why does instance Num (Complex a) require RealFloat a!?
2013-08-31 04:21:41	monochrom	with merge sort, you can reason like this approximately: take 1 (mergesort xs) ends up looking like a single-elimination tournament.
2013-08-31 04:21:43	haasn	As far as I can tell there are no operations being used in the instance that would require such a heavy constraint
2013-08-31 04:21:46	haasn	it excludes, for example, Fixed
2013-08-31 04:21:53	haasn	ah, http://hackage.haskell.org/package/complex-generic
2013-08-31 04:22:29	thr33strikes	ski_: I've understood that to be a OOP type pattern, it holds true for functional programming as well?
2013-08-31 04:22:40	ski_	and writing such a worker in accumulator-passing-style isn't that uncommon (though it's more common in the strict FPLs. due to non-strictness, Haskell can often get away (efficiently) with non-tail-recursive formulations where a strict language would want tail-recursion, usually by accumulator)
2013-08-31 04:22:43	thr33strikes	ski_: Can you explain why?
2013-08-31 04:22:53	ski_	thr33strikes : why what ?
2013-08-31 04:23:06	FreeFull	How do I make sure my sort' gets evaluated without using its output?
2013-08-31 04:23:22	ski_	FreeFull : `seq' ?
2013-08-31 04:23:38	-->	shrekster (~small@c-24-18-241-158.hsd1.wa.comcast.net) has joined #haskell
2013-08-31 04:23:42	ski_	FreeFull : or, if in `IO' monad, try `evaluate'
2013-08-31 04:23:55	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:24:05	ski_	@type Control.Exception.evaluate
2013-08-31 04:24:06	lambdabot	a -> IO a
2013-08-31 04:24:22	FreeFull	ski_: seq stops on the first outermost constructor it finds so it wouldn't do
2013-08-31 04:24:24	monochrom	must you avoid using its output? because, frankly, seq and evaluate count as using its output, too
2013-08-31 04:24:31	thr33strikes	I've understood that to be a OOP type pattern, it holds true   . `^_^v
2013-08-31 04:24:32	thr33strikes	                         | for functional programming as well?
2013-08-31 04:24:51	FreeFull	monochrom: Well, I basically don't want the data to leave the program because that's slow
2013-08-31 04:24:54	monochrom	and "evaluate (length (sort' xs))" counts as using even more
2013-08-31 04:25:17	ski_	FreeFull : then either try something like `rnf', or write a custom forcer ?
2013-08-31 04:25:29	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 04:25:30	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 04:25:34	monochrom	"evaluate (rnf (sort' xs))" is also good
2013-08-31 04:25:53	monochrom	let me just say I don't understand your definition of "use"
2013-08-31 04:26:00	FreeFull	I want to compare the speed difference between     sort' xs    and    take 1 . sort xs'
2013-08-31 04:26:03	monochrom	mathematical definition
2013-08-31 04:26:22	arkeet	FreeFull: for benchmarking, you may be interested in criterion :)
2013-08-31 04:26:25	FreeFull	monochrom: By use I meant write to a file or to the screen
2013-08-31 04:26:26	thr33strikes	ski: so you're saying there are patterns in functional programming just like there are in other pardigms.
2013-08-31 04:26:35	monochrom	then "evaluate (rnf (sort' xs))" and "evaluate (rnf (take 1 (sort' xs]"
2013-08-31 04:26:36	ski_	thr33strikes : hm, i wasn't aware that worker-wrapper was that common in OOP (any language ?), but ok
2013-08-31 04:26:47	-->	binroot (~binroot@ip98-169-217-175.dc.dc.cox.net) has joined #haskell
2013-08-31 04:26:49	ski_	thr33strikes : to some extent, yes
2013-08-31 04:26:51	monochrom	where ] is the lisp ] hehe
2013-08-31 04:27:53	ski_	thr33strikes : however, to some extent, patterns in OOP will in some cases not be needed in (typical) FP. iow those OOP patterns exist because of inabilities to abstract or express more directly what is desired
2013-08-31 04:27:55	<--	acowley (~acowley@pool-72-82-163-252.cmdnnj.east.verizon.net) has quit (Quit: Textual IRC Client: http://www.textualapp.com/)
2013-08-31 04:28:14	thr33strikes	ic
2013-08-31 04:28:18	ski_	monochrom ;)
2013-08-31 04:28:30	monochrom	or you can say, those patterns are used in FP more often but with trivial syntax, even no syntax
2013-08-31 04:29:02	<--	dgpratt_ (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has quit (Ping timeout: 256 seconds)
2013-08-31 04:29:02	thr33strikes	ski_: what was the hardest concept for you to grasp when you initially started learning FP?
2013-08-31 04:29:12	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 04:29:17	monochrom	"mapM_ c xs" can be described as either "uses the Command pattern" or "eliminates the Command pattern"
2013-08-31 04:29:33	ski_	hm, hard to say (was more than 10 years ago)
2013-08-31 04:29:35	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Ping timeout: 245 seconds)
2013-08-31 04:30:07	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 04:30:08	ski_	thr33strikes : the pervasive use of recursion is certainly a common stumbling-block, though
2013-08-31 04:30:11	-->	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has joined #haskell
2013-08-31 04:31:16	shachaf	monochrom: How do I use the Comonad pattern?
2013-08-31 04:31:34	monochrom	I don't know yet
2013-08-31 04:31:34	thr33strikes	when you say pervasive do programmers unwittingly use recursion too much or not enough?
2013-08-31 04:32:11	FreeFull	Ok, I tried it out, and with take 1 it is measurably faster than without
2013-08-31 04:32:15	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 04:32:17	FreeFull	Noticeably even
2013-08-31 04:32:19	monochrom	\∩/
2013-08-31 04:32:19	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 04:32:21	arkeet	I think he just means figuring out how to write things using recursion.
2013-08-31 04:32:37	arkeet	instead of e.g. loops like you would in some other languages.
2013-08-31 04:32:39	ski_	thr33strikes : programmers who (solely) use imperative programming languages tend to under-use recursion (of course there are exceptions, people who understand the benefits and costs of it)
2013-08-31 04:33:03	<--	nooodl (~nooodl@91.176.171.15) has quit (Quit: Ik ga weg)
2013-08-31 04:33:09	<--	tolt (~Kevin@209.65.15.42) has quit (Ping timeout: 248 seconds)
2013-08-31 04:33:31	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:33:40	FreeFull	shachaf: extract and extend your code
2013-08-31 04:33:57	arkeet	I guess beginner FPers might have a tendency to do explicit recursion instead of e.g. using a fold
2013-08-31 04:34:14	-->	ksf (~ksf@d086145.adsl.hansenet.de) has joined #haskell
2013-08-31 04:34:36	ski_	which i think is helpful for later understanding the point of recursion combinators like folds
2013-08-31 04:34:39	-->	tolt (~Kevin@209.65.15.42) has joined #haskell
2013-08-31 04:34:47	arkeet	sure.
2013-08-31 04:35:25	ski_	(just like using some `goto's or `jmp's/`bne's could be useful to better appreciate structured programming constructs=
2013-08-31 04:35:32	ski_	)
2013-08-31 04:35:35	<--	codesoup (~codesoup@69-196-177-207.dsl.teksavvy.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:35:52	<--	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has quit (Quit: Leaving.)
2013-08-31 04:35:55	-->	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 04:36:04	-->	Betal (~Betal@unaffiliated/betal) has joined #haskell
2013-08-31 04:36:15	FreeFull	I don't understand anymore how people can make new programming languages where you don't have simple lambdas
2013-08-31 04:36:22	FreeFull	By simple I mean easy
2013-08-31 04:36:58	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Ping timeout: 256 seconds)
2013-08-31 04:37:12	thr33strikes	is it mandatory that I learn lambda calculus to fully grasp FP?
2013-08-31 04:37:24	FreeFull	thr33strikes: Nope
2013-08-31 04:37:30	<--	tac (~tac-tics@2602:306:bdb4:5100:cc7b:a920:f37c:78e3) has quit (Ping timeout: 245 seconds)
2013-08-31 04:37:35	arkeet	there's not much to learn about lambda calculus.
2013-08-31 04:37:50	 *	ski_ . o O ( "Sacrificing the calf of flexibility on the altar of reliability" by Peter J. Denning in 1976 at <http://dl.acm.org/citation.cfm?id=807704> )
2013-08-31 04:38:24	FreeFull	thr33strikes: If you really want you could learn about System F, but I wouldn't do that until you're an advanced haskeller
2013-08-31 04:38:37	 *	arkeet hasn't learned about System F
2013-08-31 04:38:43	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Quit: leaving)
2013-08-31 04:38:49	arkeet	I should probably pick up a copy of TaPL at some point.
2013-08-31 04:38:58	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:39:44	thr33strikes	it's almost 5am here
2013-08-31 04:39:52	thr33strikes	goodnight all and thanks for the info
2013-08-31 04:39:56	FreeFull	Almost 4am here
2013-08-31 04:40:03	FreeFull	We really should go to bed earlier =P
2013-08-31 04:40:05	thr33strikes	I'll be back tomorrow after some readying and coding
2013-08-31 04:40:07	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Client Quit)
2013-08-31 04:40:21	<--	thr33strikes (~wontez@ltea-047-066-086-113.pools.arcor-ip.net) has left #haskell ("WeeChat 0.3.8")
2013-08-31 04:40:23	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:40:26	FreeFull	I should have been asleep hours ago
2013-08-31 04:40:32	FreeFull	This isn't good for my health
2013-08-31 04:41:34	-->	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has joined #haskell
2013-08-31 04:41:34	edwardk	FreeFull: bah. i'm still walking around. you'll be fine ;)
2013-08-31 04:41:36	haasn	Ralith/monochrom: Runs fine now http://hub.darcs.net/nand/mandelbrot/browse/mandelbrot.hs  and the output is beautiful http://hub.darcs.net/nand/mandelbrot/raw/mandelbrot.png :)
2013-08-31 04:41:41	haasn	runs in about 0.130ms on my machine
2013-08-31 04:41:42	FreeFull	ski_: Sometimes when you're writing C, goto is the best thing to use
2013-08-31 04:41:50	-->	augur (~augur@208.58.5.87) has joined #haskell
2013-08-31 04:41:52	haasn	edwardk: I have a lensy version of the mandelbrot function but it's like 5x slower ;)
2013-08-31 04:42:02	FreeFull	edwardk: Humans are meant to be diurnal =P
2013-08-31 04:42:18	edwardk	haasn: sad
2013-08-31 04:42:28	FreeFull	haasn: Make it faster
2013-08-31 04:42:33	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Client Quit)
2013-08-31 04:42:34	ski_	FreeFull: yes, partly because of not getting guarantees about tail-calls (though GCC gives you some with `-fsibling-calls', at least=
2013-08-31 04:42:36	edwardk	haasn: link?
2013-08-31 04:42:38	ski_	)
2013-08-31 04:42:38	edwardk	oh
2013-08-31 04:42:48	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 04:42:48	-->	codesoup (~codesoup@69-165-142-157.dsl.teksavvy.com) has joined #haskell
2013-08-31 04:42:50	ski_	here's a quote from the above paper :
2013-08-31 04:42:53	haasn	edwardk: iterate (\z -> z^2+c) ^? taking 100 folded.filtered diverges.asIndex
2013-08-31 04:43:01	FreeFull	ski_: I meant for handling failure
2013-08-31 04:43:03	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Quit: Leaving.)
2013-08-31 04:43:04	haasn	returns the number of steps until it diverges, if any
2013-08-31 04:43:05	ski_	  The term “flexibility” is usually used to denote the existence of a range of choices available to a programmer or implementor -- the more choice, the better the flexibility. Flexibility is sometimes referred to as “generality”. Because it is frequently presented in the desirable terms, “delaying the binding of virtual objects to their realisations”,
2013-08-31 04:43:07	haasn	capped at 100 arbitrarily
2013-08-31 04:43:22	ski_	  increased flexibility has generally been considered a fatted calf of great succulence, sought voraciously and in the hope that the increased complexity that invariably attends it can be kept under control. In recent years, the wisdom of this quest has been called into question, for flexibility without discipline appears contrary to the plans of the god of reliability.
2013-08-31 04:43:28	haasn	  where diverges (r:+i) = r^2 + r^2 > 4 -- or diverges = (>2) . magnitude
2013-08-31 04:43:28	ski_	  (An automobile with independent steering mechanisms for both front wheels is more flexible but less disciplined than an ordinary one. It is mainly of metaphysical interest, offensive to the god of safe highways.)
2013-08-31 04:43:36	edwardk	haasn: i wonder if i could get that to run on fpcomplete
2013-08-31 04:43:46	haasn	the repa stuff?
2013-08-31 04:43:51	edwardk	haasn: yeah
2013-08-31 04:44:14	<--	Noldorin (~noldorin@unaffiliated/noldorin) has quit (Quit: Computer has gone to sleep.)
2013-08-31 04:44:26	FreeFull	ski_: Believe it or not, there is some C code that is actually better with goto than with any looping/conditional construct or recursion
2013-08-31 04:44:49	tibbe	edwardk: is mapM = traversable going to become a reality in 7.8?
2013-08-31 04:44:50	<--	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has quit (Remote host closed the connection)
2013-08-31 04:44:50	ski_	FreeFull : i believe it
2013-08-31 04:44:58	arkeet	traverse*
2013-08-31 04:45:01	FreeFull	The Linux kernel makes good use of goto
2013-08-31 04:45:15	ski_	FreeFull : C being a "portable assembler" is a long way from the truth
2013-08-31 04:45:16	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2013-08-31 04:45:17	arkeet	I like having the _option_ to use goto.
2013-08-31 04:45:24	haasn	arkeet: Data.Traversable.mapM I'd guess; then again, we have Applicative => Monad now right?
2013-08-31 04:45:27	edwardk	tibbe: i think the plan was for 7.8 to just include warnings if you don't have Applicative instances for your Monads, then 7.10 to make the jump with a bunch of other stuff
2013-08-31 04:45:36	FreeFull	ski_: Nothing to do with assembler
2013-08-31 04:45:37	-->	path[l] (~vsi@173.252.71.189) has joined #haskell
2013-08-31 04:45:37	edwardk	or did we already get the refactoring patch in for 7.8?
2013-08-31 04:45:38	haasn	oh, right, 7.10
2013-08-31 04:45:41	tibbe	edwardk: ah
2013-08-31 04:45:44	FreeFull	Just the goto being the cleanest thing
2013-08-31 04:45:48	tibbe	edwardk: not sure, I thought we did
2013-08-31 04:46:00	edwardk	tibbe: i haven't run HEAD since it would have gone in if it is
2013-08-31 04:46:09	ski_	FreeFull : it has to do with it, due to the lack of flexible (and preferably compsable) ways of expressing what you want
2013-08-31 04:46:12	tibbe	edwardk: but the warning is probably good, but then we should fix mapM for 7.10 (if I'm right to believe that it doesn't break any code)
2013-08-31 04:46:12	edwardk	tibbe: i should get more on top of this
2013-08-31 04:46:27	tibbe	edwardk: me too, too little time as usual
2013-08-31 04:46:38	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-31 04:46:49	FreeFull	ski_: Well, sure, in Haskell you could just have some higher level thing that handles failure
2013-08-31 04:47:04	edwardk	tibbe: it'll be fine. 7.10 is going to do a lot of generalization. replacing the old mapM in Prelude, etc.
2013-08-31 04:47:07	ski_	FreeFull : the control flow of logic programming languages can't easily be encoded in plain C, e.g.
2013-08-31 04:47:26	edwardk	tibbe: minimizing the constraints is pretty much the least worrying thing on the radar
2013-08-31 04:47:34	tibbe	edwardk: that would be neat I think (given that we're doing Applicative => Monad)
2013-08-31 04:47:36	edwardk	the main concern is ensuring we don't lose foldr/build fusion
2013-08-31 04:47:56	elliott	is foldr itself getting generalised?
2013-08-31 04:47:56	tibbe	edwardk: I realized a while back that a strict mapM (or traverse) needs Monad though. I was a bit surprised at first.
2013-08-31 04:47:58	elliott	that iwll be so weird.
2013-08-31 04:47:58	edwardk	once we have that niggling concern out of the way, the rest of it is pretty much 'do the obvious stuff'
2013-08-31 04:48:01	elliott	*will
2013-08-31 04:48:21	tibbe	edwardk: who will make sure that fusion etc still works with generalized foldr?
2013-08-31 04:48:25	edwardk	tibbe: yeah i have a <$!> combinator for strict fmap that needs monad.
2013-08-31 04:48:38	tibbe	edwardk: me too (in cassava)
2013-08-31 04:48:47	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 04:48:57	<--	WanderingMonad (~principii@71-37-133-106.spkn.qwest.net) has quit (Remote host closed the connection)
2013-08-31 04:49:07	tibbe	edwardk: I went on a crush-all-the-thunks bash one day to get the memory usage down to the absolute minimum needed to hold the result
2013-08-31 04:49:12	ski_	edwardk,tibbe : hm, how does strictness here entail monads ? (related to the strictness monad in any way ?)
2013-08-31 04:49:17	edwardk	tibbe: well, we're going to try to plug the committee in a bit better into the mainline ghc dev process with 7.9, especially now that simon and igloo have moved on
2013-08-31 04:49:24	tibbe	edwardk: you can get quite a few thunks with the standard fmap, traverse, etc combinators
2013-08-31 04:49:38	tibbe	ski_: you need to look at the value to force it
2013-08-31 04:49:41	<--	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has quit (Remote host closed the connection)
2013-08-31 04:50:00	<--	thealanwattsriot (~brianchen@c-24-125-40-241.hsd1.va.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 04:50:01	tibbe	ski_: monad has (a -> m b) so you can force it before the next action
2013-08-31 04:50:03	<--	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has quit (Ping timeout: 260 seconds)
2013-08-31 04:50:18	tibbe	edwardk: sounds good
2013-08-31 04:50:20	edwardk	so once 7.9 ramps up we'll try to get a version of things running with full AMP + Foldable/Traversable/Monoid generalization as early as possible, and see if any of the concerns about foldr/build are founded
2013-08-31 04:50:30	-->	tobyo2 (~tobyo@cpe-66-75-28-175.san.res.rr.com) has joined #haskell
2013-08-31 04:50:38	ski_	tibbe : and when is it useful ?
2013-08-31 04:50:39	 *	tibbe needs to make a hashable, unordered-containers, containers, cabal, and cassava release the next few weeks
2013-08-31 04:50:49	tibbe	ski_: if you don't want thunks
2013-08-31 04:50:53	tel	foldable/traversable/monoid generalization is also slated for 7.10?
2013-08-31 04:50:56	edwardk	At least half the committee will be in Boston for ICFP. Dan and I live here, byorgey is nearby, etc.
2013-08-31 04:51:01	edwardk	tel: yeah
2013-08-31 04:51:13	tel	nice!
2013-08-31 04:51:15	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 245 seconds)
2013-08-31 04:51:24	tibbe	edwardk: I will be at haskell symposium and the haskell symposium
2013-08-31 04:51:38	ski_	tibbe : are you talking about `mapM'/`mapA' in some cases being strict like this, or a separate combinator (perhaps named `mapM') ?
2013-08-31 04:51:46	tibbe	edwardk: I took 2.5 months off work and I can't take another full week for icfp
2013-08-31 04:51:49	-->	Desheng3 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 04:52:04	tibbe	ski_: I made a separate strict mapM and fmap for that purpose
2013-08-31 04:52:09	ski_	ok
2013-08-31 04:52:12	edwardk	tibbe: btw- i've been working on trying to get a usable "cache oblivious lookahead array" -- which will give us an 'unboxed array-like Data.Map with amortized B-Tree asymptotics' haven't gotten the insert performance down to Map times yet though
2013-08-31 04:52:25	tibbe	ski_: this was in the context that we can now have mapM = traverse with only an Applicative constraint
2013-08-31 04:52:30	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 04:52:39	tibbe	edwardk: interesting
2013-08-31 04:52:49	ski_	tibbe : ok. i'm not seeing how that relates to the strictness, though
2013-08-31 04:52:51	tibbe	edwardk: what do you think about <$!>, traverse', etc in base btw?
2013-08-31 04:52:52	edwardk	tibbe: its not a Data.Map plug-in replacement though, it'd be very much its own beast, but it does have the benefit of being completely cache oblivious
2013-08-31 04:53:04	tibbe	ski_: try to write a strict mapM with only an Applicative constraint
2013-08-31 04:53:19	tibbe	edwardk: we should write a type class for maps
2013-08-31 04:53:21	edwardk	I'd be in favor of <$!> easily.   traverse' is an interesting prospect. i'd want to sit down and do some laws
2013-08-31 04:53:35	tibbe	edwardk: so both Data.Map, Data.HashMap can be an instance. We can do it with constraint kinds I think.
2013-08-31 04:53:46	tibbe	edwardk: that'd be great
2013-08-31 04:53:48	ski_	tibbe : so the strict version of `mapM' needs `Monad' -- anything else ?
2013-08-31 04:53:54	tibbe	edwardk: instead of everyone rolling their own
2013-08-31 04:53:59	tibbe	ski_: just Monad
2013-08-31 04:54:00	edwardk	the hell of such a typeclass is that you have to choose what to put in it, and the type extensions are sad =(
2013-08-31 04:54:00	elliott	I don't think you need ConstraintKinds, just MPTCs
2013-08-31 04:54:09	elliott	well, maybe ConstraintKinds is less fiddly.
2013-08-31 04:54:12	tibbe	ski_: I was initially surprise about this insight (that you need Monad)
2013-08-31 04:54:19	elliott	huge typeclasses are horrifying though
2013-08-31 04:54:25	ski_	tibbe : i mean, anything else being the lesson/point of this, than that realization ?
2013-08-31 04:54:32	tibbe	elliott: you need the type class constrain in there somewhere
2013-08-31 04:54:39	-->	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has joined #haskell
2013-08-31 04:55:01	edwardk	tibbe: the strictness-needs-a-monad thing has been the only reason i've been considering something like a monadic traversal for lens
2013-08-31 04:55:05	tibbe	a benefit of such a type class would be that you can create new containers without writing 100 functions (many can be given for free with default impls)
2013-08-31 04:55:09	arkeet	I don't know how you'd do it with MPTCs.
2013-08-31 04:55:11	FreeFull	edwardk: Mathematical laws are so much nicer than legal laws
2013-08-31 04:55:13	edwardk	because that seems to be the only 'correct' monadic travrsal
2013-08-31 04:55:13	tibbe	edwardk: ah
2013-08-31 04:55:16	-->	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-31 04:55:27	tibbe	edwardk: right
2013-08-31 04:55:37	elliott	tibbe: it can go in the instance if you use an mptc
2013-08-31 04:55:46	elliott	but I guess key-polymorphic stuff gets a little uglier
2013-08-31 04:56:02	tibbe	elliott: I haven't seen a design with MPTC that I liked
2013-08-31 04:56:07	ski_	@remember FreeFull Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:07	lambdabot	I will remember.
2013-08-31 04:56:16	edwardk	elliott: the main thing i don't want to lose is the ability to have polymorphic recursion through a map.
2013-08-31 04:56:21	FreeFull	@quote FreeFull
2013-08-31 04:56:21	lambdabot	FreeFull says: Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:24	FreeFull	@quote FreeFull
2013-08-31 04:56:24	lambdabot	FreeFull says: Mathematical laws are so much nicer than legal laws
2013-08-31 04:56:29	ski_	@quote
2013-08-31 04:56:29	lambdabot	EvanLaforge says: Then we can tell them about how we had to walk in the snow both ways uphill fighting space leaks with bare hands while they just have to read about it.
2013-08-31 04:56:32	edwardk	i use that all over the place
2013-08-31 04:56:35	FreeFull	I swear there was a different quote with me
2013-08-31 04:56:35	arkeet	I wouldn't mind if traverse' laws only gave definedness relations instead of actual equality
2013-08-31 04:57:02	edwardk	tibbe: i suppose if we do traverse' then fmap' is also in order
2013-08-31 04:57:04	arkeet	<= is almost as good as =
2013-08-31 04:57:13	FreeFull	Seems not
2013-08-31 04:57:16	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 04:57:33	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-08-31 04:57:39	FreeFull	arkeet: < is almost as good as <=
2013-08-31 04:57:40	edwardk	arkeet: ah for reasoning in the presence of bottoms?
2013-08-31 04:57:49	arkeet	yes
2013-08-31 04:58:00	tibbe	edwardk: yeah
2013-08-31 04:58:12	-->	ISF (~ivan@201.82.138.219) has joined #haskell
2013-08-31 04:58:14	FreeFull	4 am, sleep time
2013-08-31 04:58:20	ski_	night, FreeFull
2013-08-31 04:58:36	arkeet	FreeFull: no, = => <= but <= =/> <
2013-08-31 04:59:03	arkeet	=>
2013-08-31 04:59:07	edwardk	tibbe: remind me if i don't bring up the topic again after 7.9 starts up, because i want to make sure i remember and we haven't set up a core libraries committee issue tracker. either that or email core-libraries-committee@haskell.org about this issue.
2013-08-31 04:59:26	tibbe	edwardk: file a ticket! :)
2013-08-31 04:59:30	edwardk	tibbe: but i think the strict traversals are a very good idea
2013-08-31 04:59:31	tibbe	edwardk: CC both of us
2013-08-31 04:59:35	edwardk	heh
2013-08-31 04:59:38	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 04:59:52	tibbe	edwardk: file it on the ghc tracker for now
2013-08-31 04:59:53	FreeFull	arkeet: But   x <= y  ==  x < succ y
2013-08-31 05:00:04	tibbe	edwardk: my memory is terrible
2013-08-31 05:00:09	edwardk	likewise ;)
2013-08-31 05:00:15	edwardk	who are you again? =)
2013-08-31 05:00:30	arkeet	FreeFull: (a) that's only true of like integers, and (b) I'm talking about a different <=
2013-08-31 05:00:55	FreeFull	I might be talking about a different succ
2013-08-31 05:01:14	arkeet	ok, so what's succ on the rational numbers?
2013-08-31 05:01:18	ski_	there is no generic `succ' in domain theory
2013-08-31 05:01:33	arkeet	or, well, a partial order
2013-08-31 05:01:41	edwardk	tibbe: also did you see the post in the matrix multiplication series that talked about a bit twidling hack that may make some operations in IntMap go faster?
2013-08-31 05:01:43	<--	Desheng3 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 260 seconds)
2013-08-31 05:01:48	FreeFull	arkeet: Clearly adding an infinitinessal
2013-08-31 05:01:56	tibbe	edwardk: hehe
2013-08-31 05:02:00	FreeFull	For rationals
2013-08-31 05:02:06	edwardk	tibbe: i've had zero time to benchmark it, but from a logical perspective it can pay off
2013-08-31 05:02:08	arkeet	FreeFull: I give you a poset {a,b,c} defined by a < b and a < c
2013-08-31 05:02:11	arkeet	what is succ a?
2013-08-31 05:02:14	tibbe	edwardk: I didn't see it but someone mentioned it
2013-08-31 05:02:16	edwardk	https://www.fpcomplete.com/user/edwardk/revisiting-matrix-multiplication/part-4
2013-08-31 05:02:21	tibbe	edwardk: haven't had time to look I'm afraid
2013-08-31 05:02:34	FreeFull	arkeet: Well, that's a good point
2013-08-31 05:02:34	edwardk	basically it replaces the Prefix/Mask combo with the pair of the least and greatest entries in the map
2013-08-31 05:02:57	FreeFull	arkeet: succ a is some x such that a < x
2013-08-31 05:03:02	edwardk	and then uses the fact that a < b && a < xor a b    can be used to compare two integers by the position that their msb is at, rather than their full value.
2013-08-31 05:03:03	arkeet	which one?
2013-08-31 05:03:15	edwardk	that is enough to tell you which of the 6 cases intmap ever deals with you're in.
2013-08-31 05:03:17	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 268 seconds)
2013-08-31 05:03:26	arkeet	anyway, my point is that usually <= is more useful.
2013-08-31 05:03:29	edwardk	but now you have not only the msbs, but more information about the rest of the bits
2013-08-31 05:03:39	FreeFull	arkeet: I can't really dig my way out of this one
2013-08-31 05:03:41	-->	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has joined #haskell
2013-08-31 05:03:44	arkeet	:p
2013-08-31 05:03:52	ski_	FreeFull : `succ a' ought to be the unique `b' such that there is no `x' with `a < x /\ x < b' -- but such a `b' needn't exist -- and there may also be more than one such `b'
2013-08-31 05:03:54	edwardk	so you can quickly reject things that are outside of the range when searching or deleting
2013-08-31 05:03:57	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 05:04:03	<--	hiratara (~hiratara@h222123.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 260 seconds)
2013-08-31 05:04:04	arkeet	or no such b
2013-08-31 05:04:14	ski_	(which i said :)
2013-08-31 05:04:17	tibbe	edwardk: interesting, would be worth a benchmark
2013-08-31 05:04:17	arkeet	oh.
2013-08-31 05:04:22	edwardk	it gives faster rejections for deleting things that are missing or failed lookups, because it can happen way up the tree
2013-08-31 05:04:24	arkeet	> succ True
2013-08-31 05:04:25	lambdabot	  *Exception: Prelude.Enum.Bool.succ: bad argument
2013-08-31 05:04:32	edwardk	and you get easy access to the minimum and maximum key in the intmap
2013-08-31 05:04:43	FreeFull	> succ Eq
2013-08-31 05:04:44	lambdabot	  Not in scope: data constructor `Eq'
2013-08-31 05:04:44	lambdabot	 Perhaps you meant `EQ' (imported from ...
2013-08-31 05:04:47	FreeFull	> succ EQ
2013-08-31 05:04:47	edwardk	which means the common 'max key + 1' operations for IntMap become cheaper
2013-08-31 05:04:48	lambdabot	  GT
2013-08-31 05:04:56	arkeet	> iterate succ LT
2013-08-31 05:04:57	lambdabot	  [LT,EQ,GT,*Exception: Prelude.Enum.Ordering.succ: bad argument
2013-08-31 05:05:09	-->	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has joined #haskell
2013-08-31 05:05:19	tibbe	edwardk: I'm ashamed to say that I user pointer equality in unordered-containers to avoid allocation altogether if nothing was deleted
2013-08-31 05:05:21	edwardk	tibbe: i posted it with a call for benchmarks but nobody has descended into the criterion mines yt ;)
2013-08-31 05:05:28	FreeFull	There ought be a typeclass for circular orderings
2013-08-31 05:05:37	<--	breck7 (~breck7@c-98-210-196-114.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 05:05:41	-->	void64 (~luke@37.17.114.54) has joined #haskell
2013-08-31 05:05:42	edwardk	tibbe: i'm not above that. i'd be willing to see it in Data.Map too =P
2013-08-31 05:06:22	monochrom	FreeFull: lambda is intrinsically hard with: (take a breath, it's mouthful) mutable variables where both lvalue and rvalue use the same name. example: var v; ... (\x -> x+v)  do you want that "v" to refer to "the value at the time this lambda is built" or "do the dereference when the lambda is used"?  at the end, it's a bikeshed colour debate, or you have to add extra syntax to disambiguate.
2013-08-31 05:06:26	<--	tommd (~tommd@c-98-246-76-64.hsd1.or.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 05:06:29	edwardk	lens is pushing 130 or so unsafe coerces at this point. i can't stand on moral high ground =P
2013-08-31 05:06:39	tibbe	edwardk: we could do it there, haven't gotten around to it. It makes delete >2x faster for misses
2013-08-31 05:06:53	-->	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has joined #haskell
2013-08-31 05:06:54	tibbe	edwardk: as there is no allocation
2013-08-31 05:06:57	edwardk	yeah
2013-08-31 05:07:00	haasn	does anybody know if gpipe still works? (ie. with updated packages / 7.6) I would be interested in writing pixel shaders using it
2013-08-31 05:07:12	haasn	maybe write a toy media player using it and hs-ffmpeg or whatever :P
2013-08-31 05:07:34	-->	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has joined #haskell
2013-08-31 05:07:40	FreeFull	monochrom: I didn't think of mutability
2013-08-31 05:07:41	edwardk	so if i were to hypothetically head off and bang out a patch for it, you'd be favorably inclined?
2013-08-31 05:07:57	FreeFull	monochrom: Pure programming languages are making me forget
2013-08-31 05:07:58	ski_	monochrom : whence ?
2013-08-31 05:08:14	FreeFull	Anyway, SLEEP
2013-08-31 05:08:21	FreeFull	Maybe I'll dream of Haskell
2013-08-31 05:08:23	monochrom	now, look at Haskell. you have to first do "p <- v". now you have two names. you can write either (\x -> x+p) or (\x -> ... v ... too lazy to write). you know what the code wants at a glance.
2013-08-31 05:08:43	arkeet	monochrom: I think the former is the only one that makes sense.
2013-08-31 05:08:45	--	Gaelan is now known as GaelanAintAround
2013-08-31 05:08:48	arkeet	the one where it captures the value.
2013-08-31 05:08:53	arkeet	:c
2013-08-31 05:09:13	monochrom	SML is a similar story, with a different notation.
2013-08-31 05:09:23	tibbe	edwardk: sure
2013-08-31 05:09:32	tibbe	edwardk: you can look at unordered-containers
2013-08-31 05:09:38	FreeFull	arkeet: It captures a value either way
2013-08-31 05:09:47	edwardk	anyways the main things i'd expect my msb comparison trick to pay off for would be hedge unions, false deletes and false searches, it otherwise turns a couple of masks and ands and compares into 2-3 xors and compares
2013-08-31 05:09:48	arkeet	the value at the time the lambda is made.
2013-08-31 05:09:48	tibbe	edwardk: where I have ptrEq = reallyUnsafePtrEquality ;)
2013-08-31 05:09:54	edwardk	heh
2013-08-31 05:10:03	tibbe	edwardk: much shorter
2013-08-31 05:10:07	-->	Philonous_ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has joined #haskell
2013-08-31 05:10:09	tibbe	edwardk: gotta go I'm afraid, ttyl
2013-08-31 05:10:19	edwardk	i'll keep chasing after getting the COLA down to something fast enough to compete with you
2013-08-31 05:10:28	tibbe	cool
2013-08-31 05:10:33	edwardk	right now its 3x slower but contiguous storage for inserts, searches should be faster though
2013-08-31 05:10:35	<--	tibbe (~tibbe@c-67-180-91-205.hsd1.ca.comcast.net) has quit (Quit: tibbe)
2013-08-31 05:10:57	-->	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-08-31 05:10:57	-->	ssbr (~ssbr@198.144.189.184) has joined #haskell
2013-08-31 05:11:03	--	ssbr is now known as Guest53958
2013-08-31 05:11:09	<--	Philonous (~Philonous@dslb-188-106-143-163.pools.arcor-ip.net) has quit (Read error: Operation timed out)
2013-08-31 05:11:20	<--	Guest53958 (~ssbr@198.144.189.184) has quit (Changing host)
2013-08-31 05:11:20	-->	Guest53958 (~ssbr@python/site-packages/ssbr) has joined #haskell
2013-08-31 05:11:40	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 05:11:53	--	Guest53958 is now known as ssbr`
2013-08-31 05:12:13	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 05:12:21	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit
2013-08-31 05:12:33	Ralith	haasn: congrats
2013-08-31 05:14:04	<--	ye_ (~ye@nyufwa-wlessauthclients-07.natpool.nyu.edu) has quit (Remote host closed the connection)
2013-08-31 05:15:36	-->	kooga (~kooga@142.6.30.125.dy.iij4u.or.jp) has joined #haskell
2013-08-31 05:15:41	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 05:18:50	-->	generic (~generic@p5798F435.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 05:20:23	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 05:21:56	joelteon	why doesn't hClose happen immediately?
2013-08-31 05:22:08	joelteon	it returns but the handle isn't *actually* closed
2013-08-31 05:22:12	joelteon	until someone tries to write to it
2013-08-31 05:22:15	<--	shanse (~generic@p57B2D332.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2013-08-31 05:22:16	--	generic is now known as shanse
2013-08-31 05:22:19	-->	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 05:22:52	-->	stacky (18905d58@gateway/web/freenode/ip.24.144.93.88) has joined #haskell
2013-08-31 05:23:01	m3ga	joelteon: that is just one of the many problems with lazy I/O
2013-08-31 05:23:14	joelteon	well, can I force it?
2013-08-31 05:23:16	<--	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has quit (Quit: leaving)
2013-08-31 05:23:18	<--	hattusili_III (~quassel@c-98-226-100-65.hsd1.in.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:23:32	-->	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has joined #haskell
2013-08-31 05:24:14	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:24:23	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-08-31 05:24:26	m3ga	joelteon: not possible to force it as far as i know. solution is to use one of iteratee/enumerator/conduit/pipe/stream-io/machines libraries
2013-08-31 05:24:52	m3ga	i prefer conduit myself, mainly because it is used in yesod.
2013-08-31 05:24:56	Cale	joelteon: The handle will be closed automatically when the entire file is finished being read, or when the garbage collector collects it.
2013-08-31 05:25:09	-->	fmapE (~eamsden@c-98-220-223-120.hsd1.in.comcast.net) has joined #haskell
2013-08-31 05:25:35	Cale	You give up direct control over the handle when you apply hGetContents.
2013-08-31 05:26:01	Cale	(I'm assuming you're talking about hGetContents)
2013-08-31 05:26:24	ski_	joelteon : you should not `hClose' a handle passed to `hGetContents'
2013-08-31 05:26:46	arkeet	lazy IO =(
2013-08-31 05:26:49	Cale	If you want direct control over the handle, don't use lazy hGetContents. One of the easiest ways to avoid using lazy hGetContents is just to use the strict one from Data.Text or Data.ByteString
2013-08-31 05:26:54	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:26:56	joelteon	oh, I use hGetChar
2013-08-31 05:27:07	joelteon	does that count?
2013-08-31 05:27:13	Cale	If you're using hGetChar, you're allowed to apply hClose yourself.
2013-08-31 05:27:34	<--	tikhon (~user@adsl-75-36-188-216.dsl.pltn13.sbcglobal.net) has quit (Read error: Operation timed out)
2013-08-31 05:27:42	joelteon	Right, well, the question was how do I make it close the handle when hClose returns
2013-08-31 05:27:43	-->	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has joined #haskell
2013-08-31 05:27:55	Cale	That... that's what hClose does.
2013-08-31 05:27:58	ski_	Cale : i'd expect the strict ones apply `hClose' themselves as well ?
2013-08-31 05:28:22	-->	otto_s (~user@cotb-4d05b9dc.pool.mediaWays.net) has joined #haskell
2013-08-31 05:28:35	Cale	ski_: yeah
2013-08-31 05:28:41	joelteon	ok
2013-08-31 05:28:46	joelteon	well that's the source of my question then
2013-08-31 05:29:05	Cale	joelteon: The only thing that hClose does is to close the handle it's applied to.
2013-08-31 05:29:06	arkeet	why do you think it doesn't close?
2013-08-31 05:29:15	joelteon	ok, everybody just hang on a minute
2013-08-31 05:29:22	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-31 05:29:29	<--	trism (~jconti@unaffiliated/trism) has quit (Quit: leaving)
2013-08-31 05:29:55	 *	hackagebot bytes 0.11.1 - Sharing code for serialization between binary and cereal  http://hackage.haskell.org/package/bytes-0.11.1 (EdwardKmett)
2013-08-31 05:30:10	joelteon	aha
2013-08-31 05:30:11	ski_	(imo, applying `hClose' to a handle that has been passed to `hGetContents' should either be an error, or do nothing)
2013-08-31 05:30:12	geekosaur	I didn;t think the lazy I/O thing had anything to do with it...
2013-08-31 05:30:14	joelteon	oh, hClose is actually hanging
2013-08-31 05:30:18	joelteon	it's not returning
2013-08-31 05:30:29	joelteon	I had it at the end of a do block so I didn't realize
2013-08-31 05:30:52	ski_	perhaps some code would be in order at this point
2013-08-31 05:30:52	geekosaur	what do you have open on the handle?
2013-08-31 05:31:08	joelteon	a connection to an IRC client
2013-08-31 05:31:36	joelteon	hClose returns when the client attemps to send a PING command (after a few seconds)
2013-08-31 05:31:39	-->	dennylin93 (~dennylin9@cnmc.tw) has joined #haskell
2013-08-31 05:31:40	<--	otto_s_ (~user@cotb-4db3410c.pool.mediaWays.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:32:15	arkeet	are you actually waiting for input?
2013-08-31 05:32:17	geekosaur	I am tempted to say something has the socket locked in the I/O manager
2013-08-31 05:32:31	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 245 seconds)
2013-08-31 05:32:32	arkeet	code would be good.
2013-08-31 05:32:38	geekosaur	^^
2013-08-31 05:32:40	joelteon	this is a pretty complex app
2013-08-31 05:32:44	joelteon	so I'll try to make a simplified version
2013-08-31 05:32:54	<--	mauke (~mauke@p3m/member/mauke) has quit (Disconnected by services)
2013-08-31 05:33:02	-->	mauke (~mauke@p3m/member/mauke) has joined #haskell
2013-08-31 05:33:05	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 05:33:43	<--	MrFahrenheit (~RageOfTho@77.221.25.95) has quit (Read error: Operation timed out)
2013-08-31 05:33:46	<--	binroot (~binroot@ip98-169-217-175.dc.dc.cox.net) has quit
2013-08-31 05:33:57	<--	preflex (~preflex@unaffiliated/mauke/bot/preflex) has quit (Read error: Operation timed out)
2013-08-31 05:34:01	-->	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has joined #haskell
2013-08-31 05:34:09	<--	kooga (~kooga@142.6.30.125.dy.iij4u.or.jp) has left #haskell (".")
2013-08-31 05:34:20	<--	lemao (~lemao@46-253-188-33.dynamic.monzoon.net) has quit (Remote host closed the connection)
2013-08-31 05:34:45	-->	recycle (~recycle@2600:1012:b00b:6271:f98d:9c1e:7831:7da6) has joined #haskell
2013-08-31 05:34:46	-->	lemao (~lemao@2a02:200:1fff:5:750d:9f77:d553:9bb5) has joined #haskell
2013-08-31 05:34:54	-->	preflex (~preflex@unaffiliated/mauke/bot/preflex) has joined #haskell
2013-08-31 05:36:33	<--	acomar_ (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2013-08-31 05:38:10	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 05:38:24	-->	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has joined #haskell
2013-08-31 05:38:30	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Ping timeout: 264 seconds)
2013-08-31 05:38:39	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell
2013-08-31 05:39:04	-->	luksow (~luke@apn-46-169-89-177.dynamic.gprs.plus.pl) has joined #haskell
2013-08-31 05:39:10	<--	oleo (~oleo@xdsl-78-35-166-200.netcologne.de) has quit (Ping timeout: 245 seconds)
2013-08-31 05:39:30	<--	lemao (~lemao@2a02:200:1fff:5:750d:9f77:d553:9bb5) has quit (Ping timeout: 264 seconds)
2013-08-31 05:39:59	-->	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has joined #haskell
2013-08-31 05:41:00	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-08-31 05:41:02	<--	path[l] (~vsi@173.252.71.189) has quit (Read error: Connection reset by peer)
2013-08-31 05:42:12	-->	Desheng3 (~Desheng@166.181.67.245) has joined #haskell
2013-08-31 05:42:17	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:42:34	-->	h4199 (~chatzilla@76.237.235.219) has joined #haskell
2013-08-31 05:43:10	<--	Croms (~dv@92.109.224.112) has quit (Quit: Croms)
2013-08-31 05:43:29	<--	Tekmo (~gabriel@70-36-143-224.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-08-31 05:43:49	-->	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 05:45:30	<--	Desheng2 (~Desheng@cpe-67-253-52-69.maine.res.rr.com) has quit (Ping timeout: 264 seconds)
2013-08-31 05:46:39	edwardk	haasn: iterate (\z -> z^2+c) ^? taking 100 folded.filtered diverges.asIndex   can probably use iterated
2013-08-31 05:46:41	edwardk	:t iterated
2013-08-31 05:46:51	edwardk	:t Control.Lens.iterated
2013-08-31 05:46:52	lambdabot	(Applicative f, Contravariant f) => (a -> a) -> (a -> f a) -> a -> f a
2013-08-31 05:47:08	edwardk	so then you can move that over to the right
2013-08-31 05:47:50	edwardk	taking 100 (iterated $ \z -> z^c+c).filtered diverges.asIndex
2013-08-31 05:49:17	<--	void64 (~luke@37.17.114.54) has quit (Ping timeout: 256 seconds)
2013-08-31 05:49:26	<--	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has quit (Remote host closed the connection)
2013-08-31 05:50:03	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 05:50:18	-->	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has joined #haskell
2013-08-31 05:50:32	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 05:50:54	<--	j2j (~Thunderbi@pool-71-187-21-47.nwrknj.fios.verizon.net) has quit (Quit: j2j)
2013-08-31 05:51:05	-->	conal (~textual@173-166-248-200-stockton.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 05:51:16	joelteon	here we go
2013-08-31 05:51:18	joelteon	https://gist.github.com/joelteon/6396126
2013-08-31 05:51:39	joelteon	I'm guessing it's because the reading thread is blocking it
2013-08-31 05:54:00	<--	nasarde (~user@OL203-132.fibertel.com.ar) has quit (Remote host closed the connection)
2013-08-31 05:54:13	-->	nasarde (~user@OL203-132.fibertel.com.ar) has joined #haskell
2013-08-31 05:54:27	joelteon	-threaded doesn't help
2013-08-31 05:56:05	<--	nasarde (~user@OL203-132.fibertel.com.ar) has quit (Client Quit)
2013-08-31 05:58:06	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 05:58:44	ski_	edwardk : contravariant applicative ?
2013-08-31 05:59:01	edwardk	contravariant + applicative = monoid
2013-08-31 05:59:08	edwardk	the argument is necessarily phantom
2013-08-31 05:59:25	ski_	`Contravariant' being contravariant functor ?
2013-08-31 05:59:30	edwardk	:t contramap absurd
2013-08-31 05:59:31	lambdabot	Not in scope: `absurd'
2013-08-31 05:59:35	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 05:59:37	edwardk	:t fmap Data.Void.absurd
2013-08-31 05:59:38	lambdabot	Functor f => f Data.Void.Void -> f b
2013-08-31 05:59:41	edwardk	:t contramap Data.Void.absurd
2013-08-31 05:59:42	lambdabot	Contravariant f => f b -> f Data.Void.Void
2013-08-31 05:59:48	edwardk	:t contramap Data.Void.absurd . fmap Data.Void.absurd
2013-08-31 05:59:49	lambdabot	(Functor f, Contravariant f) => f Data.Void.Void -> f Data.Void.Void
2013-08-31 05:59:56	edwardk	:t fmap Data.Void.absurd . contramap Data.Void.absurd
2013-08-31 05:59:57	lambdabot	(Functor f, Contravariant f) => f b1 -> f b
2013-08-31 06:00:08	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 06:00:08	shachaf	:t contramap (const ()) . fmap (const ())
2013-08-31 06:00:10	joelteon	don't all empty data decls have inhabitants?
2013-08-31 06:00:11	lambdabot	(Functor f, Contravariant f) => f a1 -> f a
2013-08-31 06:00:13	edwardk	so the argument can be freely changed to anything you want
2013-08-31 06:00:15	joelteon	zero* inhabitants
2013-08-31 06:00:33	edwardk	joelteon: the logic works here even if you invert and go to () instead.
2013-08-31 06:00:39	shachaf	() is just as valid as Void there.
2013-08-31 06:00:40	edwardk	going through Void is just clearer
2013-08-31 06:00:47	joelteon	yeah, but I mean the existence of Void itself
2013-08-31 06:00:52	<--	Bergle_1 (~berg@101.165.6.203) has left #haskell
2013-08-31 06:00:57	 *	shachaf sighs at multi-second latency.
2013-08-31 06:01:10	joelteon	is Void just a package that exports an empty data declaration and some helpers?
2013-08-31 06:01:19	edwardk	joelteon: we often 'pretend' when playing with haskell as a category. we use Void as the placeholder for the uninhabited data type that would exist if we didn't have all the other nice things
2013-08-31 06:01:19	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 06:01:24	edwardk	joelteon yes
2013-08-31 06:01:33	joelteon	ohhhhhhhhhhhhhhhhhhhhhhhh
2013-08-31 06:01:50	joelteon	ok, I thought it was doing some deep type-level magic or something
2013-08-31 06:02:07	 *	ski_ used `killThread :: SystemM Void' in a monad for cooperative threads
2013-08-31 06:02:13	edwardk	joelteon: Void is a placeholder for a canonical uninhabited data type. we often need a name for it, so it gives you a canonical one to pick
2013-08-31 06:02:20	joelteon	ok neat
2013-08-31 06:02:22	edwardk	its like saying () is the unit data type
2013-08-31 06:02:28	joelteon	that makes much more sense
2013-08-31 06:02:38	edwardk	we could make our own data Unit = Unit  -- but it'd be tedius and cripple interoperability
2013-08-31 06:02:51	-->	yogert (~Adium@74.83.24.51) has joined #haskell
2013-08-31 06:02:58	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:03:19	<--	luksow (~luke@apn-46-169-89-177.dynamic.gprs.plus.pl) has quit (Ping timeout: 260 seconds)
2013-08-31 06:03:28	edwardk	i tend to return things like 'IO a' for absurd results, and when i accept them accept Foo Void when i require that it not give me any
2013-08-31 06:03:44	edwardk	that way i don't have to cast with 'absurd' administratively.
2013-08-31 06:04:20	shachaf	In edwardkland _|_ is a "nice thing"
2013-08-31 06:04:52	edwardk	shachaf: fix is nice, hylo is nice, etc.
2013-08-31 06:04:58	ski_	(hm, "kland" sounds mildly dutch in my ears ..)
2013-08-31 06:05:50	-->	levi (~user@c-174-52-89-43.hsd1.ut.comcast.net) has joined #haskell
2013-08-31 06:06:46	ski_	edwardk : and similarly accept things like `IO a' for trivial (monadic) inputs, while return things like `IO ()' for trivial results ?
2013-08-31 06:06:57	edwardk	yep
2013-08-31 06:07:50	edwardk	it avoids similar administrative () <$ 's
2013-08-31 06:08:03	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:08:07	ski_	hm .. i wonder whether one could state any similar rules-of-thumb for `(,)' and `Either'
2013-08-31 06:08:11	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 06:08:27	-->	Argue (~Argue@112.209.122.237) has joined #haskell
2013-08-31 06:08:35	<--	pentace (~user@p5B14C91A.dip0.t-ipconnect.de) has quit (Quit: Bye!)
2013-08-31 06:09:59	<--	Sorella (~quildreen@oftn/member/Sorella) has quit (Quit: Ex-Chat)
2013-08-31 06:10:14	ski_	instead of `IO (Either a b)', return `forall c. (a -> IO c) -> (b -> IO c) -> IO c' or what ?
2013-08-31 06:10:27	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 06:10:52	ski_	or perhaps just `forall c. (a -> c) -> (b -> c) -> IO c'
2013-08-31 06:11:41	<--	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 06:12:42	<--	cads (~m@adsl-208-61-1-166.asm.bellsouth.net) has quit (Ping timeout: 276 seconds)
2013-08-31 06:12:44	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-08-31 06:12:46	ski_	edwardk : though i think i wouldn't overly mind having to do `() <$ ...' (or `_ <- ...') for actual results being ignored
2013-08-31 06:13:02	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 06:13:26	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 06:13:33	-->	eduardo (~user@177.32.67.203) has joined #haskell
2013-08-31 06:13:47	joelteon	also, does anyone have an idea as to how to solve my problem?
2013-08-31 06:15:49	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:16:09	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 06:16:40	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 268 seconds)
2013-08-31 06:17:30	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-08-31 06:17:52	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 06:17:56	<--	eduardo (~user@177.32.67.203) has quit (Ping timeout: 245 seconds)
2013-08-31 06:18:49	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 06:18:57	edwardk	ski_: i don't like the operational performance aspect of it, and its quite annoying in a parser to have to choose between having common leaf level parsers for keywords or chars having to return a useful result or not
2013-08-31 06:19:41	-->	lesur (~lesur@n220246167052.netvigator.com) has joined #haskell
2013-08-31 06:19:47	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 06:20:00	<--	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has quit (Ping timeout: 245 seconds)
2013-08-31 06:20:34	<--	lesur (~lesur@n220246167052.netvigator.com) has quit (Remote host closed the connection)
2013-08-31 06:20:40	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 06:20:41	edwardk	() <$ is only free if the compiler knows the exact monad/functor being used and has a place to insert the change
2013-08-31 06:21:20	ski_	or can do something `CoYoneda'-like i suppose
2013-08-31 06:21:57	ski_	(not following the keywords vs. chars, though)
2013-08-31 06:22:23	ski_	monochrom : re "mutable variables where both lvalue and rvalue use the same name", how about "Work with pointers is simple, no need to dereference or getting address, all this is automatically inserted. Example: $int** ptrptr; $int i = ptrptr; - here in i = ptrptr; is automatical double dereferencing a pointer." at <http://ya-lang.com/> ?
2013-08-31 06:22:24	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 06:22:55	<--	albel727 (~albel727@unaffiliated/albel727) has quit (Ping timeout: 245 seconds)
2013-08-31 06:24:15	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Read error: Operation timed out)
2013-08-31 06:24:23	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 06:24:40	-->	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 06:25:01	<--	Nisstyre (~yours@oftn/member/Nisstyre) has quit (Quit: Leaving)
2013-08-31 06:25:17	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:25:42	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 264 seconds)
2013-08-31 06:26:20	<--	tel (~tel@71.206.43.93) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 06:26:39	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 06:26:40	monochrom	answer: Dunning-Kruger effect on people who invent languages
2013-08-31 06:27:27	joelteon	oh hey, pipes-safe fixes the problem
2013-08-31 06:28:53	<--	ye_ (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Ping timeout: 248 seconds)
2013-08-31 06:29:24	<--	recycle (~recycle@2600:1012:b00b:6271:f98d:9c1e:7831:7da6) has quit (Remote host closed the connection)
2013-08-31 06:29:51	<--	tufflax (~tufflax@c80-217-106-199.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2013-08-31 06:30:01	<--	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2013-08-31 06:30:10	<--	mno2_ (~mno2@1.34.43.236) has quit (Quit: mno2_)
2013-08-31 06:30:38	monochrom	joelteon: I am not impressed with one thread doing hgetchar and another thread doing hclose. IMO no one is supposed to do that. in any case, currently, hclose hangs because hgetchar starts first and is in progress. I call it "not meant to be solved".
2013-08-31 06:30:51	joelteon	ok
2013-08-31 06:30:54	joelteon	what should I do instead
2013-08-31 06:31:09	monochrom	use killThread first
2013-08-31 06:31:23	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-08-31 06:31:33	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 06:32:23	-->	a_ (~a@115-64-96-169.static.tpgi.com.au) has joined #haskell
2013-08-31 06:32:46	-->	tac (~tac-tics@2602:306:bdb4:5100:84b4:e111:4ba2:2344) has joined #haskell
2013-08-31 06:33:03	<--	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has quit (Quit: leaving)
2013-08-31 06:33:16	monochrom	Handle uses MVars to store its states precisely because you people abuse it like this
2013-08-31 06:33:39	monochrom	IOW hgetchar has acquired a lock and hclose is waiting on it
2013-08-31 06:34:00	monochrom	I feel really offended. irrationally. don't mind me.
2013-08-31 06:35:07	-->	albel727 (~albel727@unaffiliated/albel727) has joined #haskell
2013-08-31 06:35:09	<--	stacky (18905d58@gateway/web/freenode/ip.24.144.93.88) has quit (Quit: Page closed)
2013-08-31 06:36:25	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-08-31 06:37:05	-->	arquebus (~frath@c-107-3-164-239.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:37:36	<--	guampa (~guampa@gateway/tor-sasl/guampa) has quit (Quit: quit)
2013-08-31 06:38:08	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 06:39:18	-->	pratz (~pratz@122.179.148.23) has joined #haskell
2013-08-31 06:39:27	<--	Wuzzy (~Wuzzy@p549FBF3F.dip0.t-ipconnect.de) has quit (Quit: Wuzzy)
2013-08-31 06:39:30	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 06:40:11	<--	a_ (~a@115-64-96-169.static.tpgi.com.au) has quit (Quit: Leaving)
2013-08-31 06:42:28	-->	joachifm_ (~joachifm@66.37-191-130.fiber.lynet.no) has joined #haskell
2013-08-31 06:42:41	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 06:43:31	-->	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has joined #haskell
2013-08-31 06:43:55	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Client Quit)
2013-08-31 06:44:19	<--	joachifm (~joachifm@ulrik.uio.no) has quit (Disconnected by services)
2013-08-31 06:44:59	--	joachifm_ is now known as joachifm
2013-08-31 06:45:12	<--	arquebus (~frath@c-107-3-164-239.hsd1.ca.comcast.net) has quit (Quit: Konversation terminated!)
2013-08-31 06:46:56	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 06:48:02	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Remote host closed the connection)
2013-08-31 06:48:12	-->	tearful (~user@67.51.113.178) has joined #haskell
2013-08-31 06:48:42	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 264 seconds)
2013-08-31 06:49:02	<--	Spaceghost (~anhedonia@unaffiliated/spaceghost) has quit (Ping timeout: 240 seconds)
2013-08-31 06:49:45	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-08-31 06:51:02	-->	ntus1017 (~ntus1017@123.21.91.156) has joined #haskell
2013-08-31 06:51:12	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 06:51:33	<--	S11001001 (~sirian@fsf/member/S11001001) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-31 06:51:37	joelteon	o_o
2013-08-31 06:52:09	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Ping timeout: 240 seconds)
2013-08-31 06:52:33	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Client Quit)
2013-08-31 06:53:36	<--	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:54:20	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 06:54:27	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 256 seconds)
2013-08-31 06:54:28	<--	linux_noob_666 (~linux_noo@93-103-58-51.dynamic.t-2.net) has quit (Ping timeout: 264 seconds)
2013-08-31 06:54:29	<--	conehead (~conehead@unaffiliated/conehead) has quit (Quit: Computer has gone to sleep.)
2013-08-31 06:54:34	Sonarpulse	Is there anyways to do an existentail type like
2013-08-31 06:54:58	 *	hackagebot cryptohash 0.10.0 - collection of crypto hashes, fast, pure and practical  http://hackage.haskell.org/package/cryptohash-0.10.0 (VincentHanquez)
2013-08-31 06:55:13	Sonarpulse	data X Constraint = forall a. Constraint a => X a
2013-08-31 06:55:18	-->	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has joined #haskell
2013-08-31 06:55:32	<--	ddp (~ddp@wsip-68-110-169-4.ph.ph.cox.net) has quit (Client Quit)
2013-08-31 06:55:47	-->	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 06:55:59	-->	[[zz]] (~q@node-o34.pool-101-108.dynamic.totbb.net) has joined #haskell
2013-08-31 06:56:04	<--	pratz (~pratz@122.179.148.23) has quit (Remote host closed the connection)
2013-08-31 06:56:43	<--	ntus1017 (~ntus1017@123.21.91.156) has quit (Remote host closed the connection)
2013-08-31 06:57:23	-->	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has joined #haskell
2013-08-31 07:00:07	ski_	Sonarpulse : try with `constraint' instead of `Constraint' ?
2013-08-31 07:00:19	Sonarpulse	http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/constraint-kind.html
2013-08-31 07:00:21	Sonarpulse	relevant?
2013-08-31 07:00:29	Sonarpulse	if so, I think i got it
2013-08-31 07:00:38	-->	goldkatze (~nobody@unaffiliated/goldkatze) has joined #haskell
2013-08-31 07:00:47	ski_	or else try `data X constraint where MkX :: constraint a => a -> X constraint'
2013-08-31 07:01:01	ski_	yes, you need the constraint kind extension
2013-08-31 07:01:06	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 264 seconds)
2013-08-31 07:01:12	<--	joachifm (~joachifm@66.37-191-130.fiber.lynet.no) has quit (Quit: leaving)
2013-08-31 07:02:05	<--	tac (~tac-tics@2602:306:bdb4:5100:84b4:e111:4ba2:2344) has quit (Ping timeout: 245 seconds)
2013-08-31 07:05:01	-->	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has joined #haskell
2013-08-31 07:06:04	-->	typeclassy (~user@ool-435124b5.dyn.optonline.net) has joined #haskell
2013-08-31 07:07:05	Sonarpulse	thanks ski_
2013-08-31 07:07:07	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 07:07:29	<--	yogert (~Adium@74.83.24.51) has quit (Quit: Leaving.)
2013-08-31 07:08:25	-->	ersran9_ (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 07:08:35	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-08-31 07:08:39	-->	void64 (~luke@37.17.112.226) has joined #haskell
2013-08-31 07:09:07	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 07:09:26	-->	edwardk (~edwardk@pdpc/supporter/professional/edwardk) has joined #haskell
2013-08-31 07:09:35	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Ping timeout: 245 seconds)
2013-08-31 07:10:17	-->	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has joined #haskell
2013-08-31 07:10:33	-->	mxc (~maxcan@204.14.159.15) has joined #haskell
2013-08-31 07:10:39	-->	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has joined #haskell
2013-08-31 07:11:55	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 07:12:12	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 07:12:46	-->	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has joined #haskell
2013-08-31 07:14:13	<--	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 07:16:24	-->	pkrnj (~pkrnj@bas2-montreal47-1128591412.dsl.bell.ca) has joined #haskell
2013-08-31 07:16:40	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 07:17:13	<--	refried_ (~refried_@z69-94-207-36.ips.direcpath.com) has quit (Ping timeout: 245 seconds)
2013-08-31 07:18:06	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 264 seconds)
2013-08-31 07:18:32	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 07:18:38	-->	ioanel (~Thunderbi@188.25.11.158) has joined #haskell
2013-08-31 07:18:40	<--	MoALTz (~no@host86-137-42-235.range86-137.btcentralplus.com) has quit (Quit: Leaving)
2013-08-31 07:20:53	<--	jamesaanderson (~jamesaand@107-215-201-164.lightspeed.irvnca.sbcglobal.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 07:20:58	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 07:21:05	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 256 seconds)
2013-08-31 07:21:13	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-08-31 07:21:39	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-08-31 07:23:53	<--	viktech (~viktech__@CPE-65-26-203-215.wi.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-08-31 07:24:08	-->	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has joined #haskell
2013-08-31 07:25:36	-->	lemao (~lemao@46-253-188-36.dynamic.monzoon.net) has joined #haskell
2013-08-31 07:26:13	<--	ksf (~ksf@d086145.adsl.hansenet.de) has quit (Quit: Leaving)
2013-08-31 07:26:21	<--	h4199 (~chatzilla@76.237.235.219) has quit (Ping timeout: 268 seconds)
2013-08-31 07:26:40	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 245 seconds)
2013-08-31 07:28:45	<--	Jesin (~Jessin_@Dyn157039.cc.lehigh.edu) has quit (Ping timeout: 245 seconds)
2013-08-31 07:30:36	<--	void64 (~luke@37.17.112.226) has quit (Ping timeout: 240 seconds)
2013-08-31 07:32:31	<--	srhb (~srhb@79.142.224.156.nat.router2.bolignet.dk) has quit (Ping timeout: 268 seconds)
2013-08-31 07:38:01	-->	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has joined #haskell
2013-08-31 07:39:40	-->	cleek (~cleek@187.191.31.157) has joined #haskell
2013-08-31 07:39:45	-->	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 07:40:00	 *	hackagebot crypto-random 0.0.1 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.1 (VincentHanquez)
2013-08-31 07:40:10	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Quit: Pozdrav)
2013-08-31 07:40:33	jfischoff	are there any functor like type classes that work with types of kind: (* -> *) -> (* -> *) -> * -> * ?
2013-08-31 07:41:50	-->	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:42:27	<--	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 07:42:41	-->	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:43:30	<--	aryabhata (~aryabhata@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 07:44:09	<--	croyd (637f3640@gateway/web/freenode/ip.99.127.54.64) has quit (Ping timeout: 250 seconds)
2013-08-31 07:44:09	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 07:46:03	<--	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has quit (Read error: No route to host)
2013-08-31 07:48:41	<--	blackdog (~blackdog@static.211.106.9.5.clients.your-server.de) has left #haskell
2013-08-31 07:48:51	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 07:50:35	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 07:51:58	-->	kerrick (~kerrick@75-144-29-34-novato.ca.sfba.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 07:52:03	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-08-31 07:53:03	-->	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has joined #haskell
2013-08-31 07:55:12	<--	heatsink (~heatsink@99-47-196-161.lightspeed.dctril.sbcglobal.net) has quit (Quit: Leaving)
2013-08-31 07:55:58	-->	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has joined #haskell
2013-08-31 07:57:11	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 07:57:12	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Quit: leaving)
2013-08-31 07:57:24	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 07:58:15	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 07:58:29	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-08-31 07:59:38	-->	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has joined #haskell
2013-08-31 07:59:41	<--	cleek (~cleek@187.191.31.157) has quit (Quit: Saliendo)
2013-08-31 07:59:54	-->	Taneb (~nathan@host-92-23-115-247.as13285.net) has joined #haskell
2013-08-31 07:59:58	-->	ananthakumaran (~Adium@117.192.135.70) has joined #haskell
2013-08-31 08:00:02	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:00:25	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:00:41	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 08:02:03	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:02:06	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:05:24	-->	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 08:05:42	-->	cleek_ (~cleek-hq@187.191.31.157) has joined #haskell
2013-08-31 08:05:45	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 08:06:24	bootcode	is there a way to set a type context on an associated type synonym?
2013-08-31 08:06:42	-->	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 08:06:42	<--	lemao (~lemao@46-253-188-36.dynamic.monzoon.net) has quit (Ping timeout: 264 seconds)
2013-08-31 08:07:05	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 08:07:36	bootcode	class HasLength a where type Length a ... -- want to have constraint Num (Length a)
2013-08-31 08:07:44	<--	kayloos (~kayloos@dhcp-189-225.gjk.dk) has quit (Remote host closed the connection)
2013-08-31 08:08:37	-->	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has joined #haskell
2013-08-31 08:08:45	<--	mxc (~maxcan@204.14.159.15) has quit (Quit: mxc)
2013-08-31 08:08:49	<--	jfischoff (~jfischoff@66-140-190-154.lightspeed.sntcca.sbcglobal.net) has quit (Quit: jfischoff)
2013-08-31 08:09:36	-->	bitonic` (~user@xdsl-188-155-179-93.adslplus.ch) has joined #haskell
2013-08-31 08:09:58	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:10:00	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-08-31 08:10:00	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:13:18	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 08:13:29	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 08:14:25	dmwit	bootcode: You can put it in the context of the instance declaration.
2013-08-31 08:14:28	mm_freak	Data.Data.Data allows to extract values, right?
2013-08-31 08:14:53	dmwit	bootcode: ...or the class declaration if you want.
2013-08-31 08:14:57	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Quit: corkexaminer)
2013-08-31 08:15:04	dmwit	class Num (Length a) => HasLength a where type Length a
2013-08-31 08:15:15	mm_freak	which requires FlexibleContexts
2013-08-31 08:15:26	dmwit	Hm, does it? =)
2013-08-31 08:15:30	mm_freak	yeah
2013-08-31 08:15:42	dmwit	okay =)
2013-08-31 08:15:54	dmwit	If you've gone all the way to TypeFamilies, though, FlexibleContexts shouldn't bother you.
2013-08-31 08:15:55	mm_freak	type families, despite being elegant, are often awkward to work with
2013-08-31 08:16:02	mm_freak	sometimes so awkward that i go back to fundeps
2013-08-31 08:16:23	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 240 seconds)
2013-08-31 08:16:50	mm_freak	well, associated types, not type families in general
2013-08-31 08:17:12	dmwit	associated types are GHC's greatest lie =P
2013-08-31 08:17:15	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 08:17:35	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 08:17:53	-->	fylwind_ (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has joined #haskell
2013-08-31 08:17:58	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 256 seconds)
2013-08-31 08:20:15	bootcode	dmwit: thank you
2013-08-31 08:20:16	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-31 08:20:48	<--	fylwind (~fyl@76-250-60-119.lightspeed.lnngmi.sbcglobal.net) has quit (Ping timeout: 256 seconds)
2013-08-31 08:21:03	-->	zett_zelett (~zett_zele@p5DE7AC83.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 08:21:42	<--	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has quit (Ping timeout: 264 seconds)
2013-08-31 08:21:51	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 268 seconds)
2013-08-31 08:22:23	-->	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:22:25	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Client Quit)
2013-08-31 08:22:48	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 08:22:49	-->	zhulikas (~meh@78-60-186-41.static.zebra.lt) has joined #haskell
2013-08-31 08:23:05	<--	j-wang (~j-wang@108-65-1-75.lightspeed.sntcca.sbcglobal.net) has quit (Quit: j-wang)
2013-08-31 08:23:25	<--	ehaliewicz (~user@50-0-51-11.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 08:23:40	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 08:24:14	<--	tov (~tov@pool-173-76-80-139.bstnma.fios.verizon.net) has quit (Quit: leaving)
2013-08-31 08:24:29	<--	Alpha64_ (~Alpha64@190.191.162.115) has quit (Quit: Leaving)
2013-08-31 08:24:32	<--	Alpha64 (~Alpha64@unaffiliated/alpha64) has quit (Read error: Connection reset by peer)
2013-08-31 08:24:37	<--	typeclassy (~user@ool-435124b5.dyn.optonline.net) has quit (Ping timeout: 248 seconds)
2013-08-31 08:24:38	-->	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has joined #haskell
2013-08-31 08:24:42	-->	yopikh (~mand@79.175.167.200) has joined #haskell
2013-08-31 08:26:35	mm_freak	what's a good, ideally short english word for "continuous event"?  like an explosion, which stretches over a time interval
2013-08-31 08:26:51	joelteon	o_o
2013-08-31 08:27:06	<--	breck7 (~breck7@c-98-210-152-219.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2013-08-31 08:27:16	-->	tov (~tov@eecs-login.seas.harvard.edu) has joined #haskell
2013-08-31 08:27:27	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Read error: Connection reset by peer)
2013-08-31 08:27:38	fylwind_	transition?
2013-08-31 08:27:55	--	fylwind_ is now known as fylwind
2013-08-31 08:27:56	bootcode	dmwit: if I have context (HasLength a) on a function, it won't automatically take up the (Num (Length a)) constraint? Error message seems to indicate this.
2013-08-31 08:28:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 08:28:51	-->	recycle (~recycle@cpe-76-88-36-147.san.res.rr.com) has joined #haskell
2013-08-31 08:28:55	mm_freak	ok, think of a real function defined only for a finite interval
2013-08-31 08:28:57	<--	Shaladdle (~Shaladdle@c-67-165-107-107.hsd1.pa.comcast.net) has quit (Quit: Leaving)
2013-08-31 08:29:01	dmwit	?quote dmwit first.three
2013-08-31 08:29:01	lambdabot	dmwit says: Type families are not injective. Your first three inscrutable error messages with type families in them will be because you don't understand this rule.
2013-08-31 08:29:10	mm_freak	like the half circle: \x -> sqrt (1 - x^2)
2013-08-31 08:29:23	mm_freak	and now consider the horizontal axis to be time
2013-08-31 08:29:31	mm_freak	is there a good short name for those kinds of functions?
2013-08-31 08:29:35	dmwit	bootcode: But that's just a guess. Post your code and error and we'll check if that's really the problem.
2013-08-31 08:30:02	-->	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 08:30:27	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 08:30:37	-->	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has joined #haskell
2013-08-31 08:30:37	<--	pantsman (~pantsman@188-222-133-52.zone13.bethere.co.uk) has quit (Changing host)
2013-08-31 08:30:37	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 08:30:42	-->	fl00r (~fl00r@pool-71-189-238-151.lsanca.fios.verizon.net) has joined #haskell
2013-08-31 08:30:57	mm_freak	or think of morse code, which is not discrete blips, but continuous peeps
2013-08-31 08:31:11	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Quit: WeeChat 0.4.1)
2013-08-31 08:31:12	 *	ski_ is only thinking of "wavelet"
2013-08-31 08:31:43	mm_freak	it may be Time -> Maybe String instead of Time -> Maybe Double =)
2013-08-31 08:32:09	<--	Taneb (~nathan@host-92-23-115-247.as13285.net) has quit (Quit: Leaving)
2013-08-31 08:32:32	mm_freak	Event is appropriate, but already used =/
2013-08-31 08:32:37	bootcode	dmwit: That property needs some study from me indeed. The error was caused by having the fun take (Length a) as arg, but I didn't specify the HasLength context.
2013-08-31 08:33:03	bootcode	dmwit: Thought the context is kind of implicit, given that `Length a` doesn't have an actual value otherwise
2013-08-31 08:34:03	<--	soulofpeace (~soulofpea@cm115.gamma160.maxonline.com.sg) has quit (Ping timeout: 260 seconds)
2013-08-31 08:34:48	dmwit	bootcode: Yes, the problem is that knowing what type "Length a" is doesn't tell you anything about what type "a" is.
2013-08-31 08:34:54	<--	oldthird (~oldthird@24-246-13-189.cable.teksavvy.com) has quit (Quit: Leaving)
2013-08-31 08:35:25	<--	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has quit (Ping timeout: 268 seconds)
2013-08-31 08:35:26	<--	pantsman (~pantsman@pdpc/supporter/active/pantsman) has quit (Ping timeout: 245 seconds)
2013-08-31 08:36:01	<--	hoverbear (~andrew@unaffiliated/hoverbear) has quit (Quit: hoverbear)
2013-08-31 08:37:10	Sonarpulse	If you don't need isEmpty, unGet, or multiple readers (and fairness), which is better: TChan or Chan?
2013-08-31 08:37:39	<--	aess (~jelena@75-101-96-171.dsl.static.sonic.net) has quit (Ping timeout: 276 seconds)
2013-08-31 08:37:55	dmwit	bootcode: ...and, not to put too fine a point on it, one must know what type "a" is to know how to construct the "Num" dictionary for "Length a" (in GHC's implementation of type classes).
2013-08-31 08:38:54	dmwit	Sonarpulse: TChan has all the advantages of STM. Chan has all the advantages of no STM.
2013-08-31 08:39:20	<--	Itkovian (~Itkovian@178-118-76-90.access.telenet.be) has quit (Quit: P00f.)
2013-08-31 08:39:43	Sonarpulse	I am making a game (including engine)
2013-08-31 08:39:48	dmwit	Advantages of STM: everything is composable. Advantages of no STM: no transaction overhead, different wakeup policy might be exploitable.
2013-08-31 08:39:57	Sonarpulse	ok
2013-08-31 08:40:17	Sonarpulse	my plan is to have a graphics, networking, input, and sound loop/master thread/ sort of act
2013-08-31 08:40:30	Sonarpulse	each has a FIFO inbox, like an actor
2013-08-31 08:40:47	Sonarpulse	but also access to a big glob of shared state
2013-08-31 08:41:03	Sonarpulse	some of which uses STM, some of which is just wild west IORefs
2013-08-31 08:41:10	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 08:41:28	-->	mno2_ (~mno2@1.34.43.236) has joined #haskell
2013-08-31 08:41:37	Sonarpulse	No idea if this is a good plan, but it sounds kinda neat and symmetrical.
2013-08-31 08:42:05	Sonarpulse	I guess CHan is better. the master threads might delegate to worker threads, and then fairness is probably good
2013-08-31 08:42:09	u_	what's a good explanation of huet's higher-order unification alg?
2013-08-31 08:42:15	Sonarpulse	thanks
2013-08-31 08:42:19	<--	Sonarpulse (~user@unaffiliated/sonarpulse) has left #haskell ("ERC Version 5.3 (IRC client for Emacs)")
2013-08-31 08:42:35	dmwit	Hrm. Is fairness one of Chan's promises?
2013-08-31 08:42:41	dmwit	Doesn't sound right.
2013-08-31 08:42:54	-->	tel (~tel@71.206.43.93) has joined #haskell
2013-08-31 08:44:16	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Client Quit)
2013-08-31 08:44:47	dmwit	Okay. Fairness probably comes about anyway from MVar's FIFO promises.
2013-08-31 08:45:07	 *	hackagebot set-cover 0.0.1 - Solve exact set cover problems like Sudoku, 8 Queens, Soma Cube, Tetris Cube  http://hackage.haskell.org/package/set-cover-0.0.1 (HenningThielemann)
2013-08-31 08:45:25	<--	ioanel (~Thunderbi@188.25.11.158) has quit (Remote host closed the connection)
2013-08-31 08:46:04	-->	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has joined #haskell
2013-08-31 08:46:15	<--	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has quit (Remote host closed the connection)
2013-08-31 08:46:28	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 08:47:05	-->	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 08:47:09	-->	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has joined #haskell
2013-08-31 08:48:42	<--	dialelo (~dialelo@80.174.57.119.dyn.user.ono.com) has quit (Client Quit)
2013-08-31 08:49:02	<--	tel (~tel@71.206.43.93) has quit (Quit: Textual IRC Client: www.textualapp.com)
2013-08-31 08:50:26	<--	acomar (~acomar@pool-108-18-234-214.washdc.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-08-31 08:51:12	-->	teodor98 (~teodor@92.80.39.229) has joined #haskell
2013-08-31 08:53:40	<--	MedDev (~MDev@96-41-232-235.dhcp.ftbg.wi.charter.com) has quit (Ping timeout: 256 seconds)
2013-08-31 08:53:40	<--	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has quit (Read error: Connection reset by peer)
2013-08-31 08:55:49	<--	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has quit (Read error: Operation timed out)
2013-08-31 09:00:23	--	irc: disconnected from server
2013-08-31 09:00:47	-->	supersymmetry (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has joined #haskell
2013-08-31 09:00:47	--	Topic for #haskell is "http://www.haskell.org | Paste code/errors: http://lpaste.net/new/haskell | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | Administrative issues: #haskell-ops | Hackage down? http://hdiff.luite.com"
2013-08-31 09:00:47	--	Topic set by mauke (~mauke@p3m/member/mauke) on Wed, 17 Jul 2013 13:52:43
2013-08-31 09:00:47	--	Nicks #haskell: [@ChanServ [[zz]] [swift] \q __main__ _br_ _flow_ _janne `0660 `^_^v `bps a11235 ab9rf absence acfoltzer Adeon adimit Adios adlan adnap aford aforemny agundry ahf ahihi akahn akiress akraut albel727 aleator alej alexander__b alexsdutton AlexWebr almondjelly aloiscochard alpounet Amadiro amatsu anachron ananthakumaran andares anders^^ andrewsw anhall aninhumer AntiSpamMeta aoh apaku apples applicative araujo arbn arcatan Argue aristid arkeet arkx arlinius arnsholt arpunk asante asjo aszlig Athas augur aupiff averell Axman6 aztek b0c1 b2coutts b52 b_jonas banjiewen barrucadu bartavelle basdirks1 basdirks_ Baughn bbee bbloom bcoppens bd_ bduc Beetny Belgarion0 benj_ bens bentrevor bergey bergmark Betal betawaffle bethebunny bezik bgamari Bigcheese BigEndian bind biscarch bitonic` bitraten blast_hardcheese BlastHardcheese Blkt BMeph bobry bobthenameless bogner bogner_ Boney bootcode Boreeas bqp brainproxy Brando753 brandonw brendan brett BrianHV briden brisbin brixen bscarlet bsmt bstrie bunzen burp Bwild Bwild_ bxc byorgey ByronJohnson c_14 cajla Cale caleb_9 caligula callen canissimia canta carter ccasin ccxCZ cdidd cdk ceii centrinia Cerise chairs_ charlesofarrell_ cheezey chexxor chickenflu chirpsalot ChongLi Chousuke chrisbuchholz chrisdone chrra ciaranm CindyLinz cjay cl_away ClaudiusMaximus cleek_ Clint clog cmsd2 codesoup CODEtaku cods coeus_ colah companion_cube conal confound copton_ copumpkin corkexaminer CosmicRay Counter-Strike cow-orker cronject cross crs_ cruxeternus Cryovat cschneid cynick cynick_ cyphase d-snp_ d3lxa dabradley dacc dan64 danilo2 danr dario^CIP DarkFox DarkNFoxy Dashkal davean davidt davorak dcoutts deavid Deewiant def-lkb deggis demolithion dennylin93 desc|zenbook Desheng3 destiny dexter2 DexterLB dfan DigitalKiwi dilinger_ dino- divarvel dixie djahandarie dju dlundy dmp1ce dmwit Dodek dogmaT dolio DolphR doomlord doomlord__ doshitan dpwright dqd Draconx Draggor drbean DrCode drdo dreixel drewr drmegahertz dropdrive DrSyzygy dsantiago dsfox dsirenko_ dsp_ DT` Dtgr dthibodeau duairc dumael dustinswan DustyDin1o dwcook dwierenga Dybber dyreshark dyspeptics15 eacameron earthy eataix ecc ecube edk Edoxile edwardk edwtjo eevar eff_ eff__ ehamberg ehd eis_ ejls eL_Bart0 electrogeek elgot Eliel Elision elliott elton_ Enigmagic ent enthropy epsylon epta ericmathison ericmj Eridius ernst ersran9_ Erstarrung etrepum EvanR Excedrin Excureo eyck Ezku ezrios f8l fabjan fall_ farn felipe_ fergusnoble fijimunkii fikusz finnrobi FireFly fl00r flazz flori_ flux fmapE fogus|gone fosky fran FreakyPe1guin FreeFull frontendloader froztbyte fry fryguybob ft Fubar^ Fuuzetsu FUZxxl fxrh fylwind FZ GaelanAintAround gambogi gbarboza gbeshers gbluma gbluma_ gdeest gds geal geekosaur gemelen geoffh gereedy ggherdov ggreg ghorn Ghoul_ gienah gilbertw1 gnoel goldkatze Gothmog_ go|dfish gpampara_off Gracenotes greymalkin gridaphobe gseitz gthorslund guerrilla Guest19190 Guest22019 Guest53212 Guest80998 Guest92121 Guest98659 Gunni guymann h_chiro_ haasn hackagebot Hafydd hamilyon hamishmack hape01 Hardolaf hashcat hc hdevalence|away heath Heffalump hfaafb hiptobecubic hiratara hiredman hive-mind horlicks hpc hpd hvr IanKelling ibab ibid IbnFirnas ibotty Iceland_jack identity idnar ido idoru Igloo inarru inr int-e integral Internet13 ion ipuustin ircbrowse iron_houzi ISF ismlages isomorphismes iulian iulian_ ivan\ ivan` Jaak jack_rabbit jackhill jaepark jaimef jamwt jang janiczek janinge JaRoel|4d jascase901 jaspervdj Jaxan jayne jb55 jbauman jbomo jcp jdegoes jdoles jeff_s1 Jello_Raptor JesuZ jhh jix jkpl jlewis jliikka jlouis jmcarthur jmct jml joar jobstijl jodaro joe9 joefiorini joelteon joeyh johnw joneshf-laptop joneshf-work jonke Jonno_FTW jonsmock jonsterling joogi JPohlmann jrd0 jrib jroesch jrslepak junsuijin juuhaa jyyou jzelinskie jzl k0001 k00mi k0ral k4nar Kabaka_ kakos kamatsu KaneTW kaol katis kav kaw kcj Ke kekimmo kerrick ketil kfreds Khady Khisanth killy9999 kini Kinnison KitB kk1fff kloeri kloplop321 kludge` klugez Kneiva knigitz knyppeldynan knz koala_man Kobata kosmikus kqr1 Krakarn krakrjak kranius Kruppe kryft kshannon kstuart kubrat kubrat_ Kuraitou Kuraitou_ kxra KyleCloud lahwran lambdabot Laney latro`a_ lattenwald Lefeni Lemmih lenstr leroux levi Licenser lieven_ lightquake linduxed liori Liskni_si lispy liszt litherum liyang ljhms lokydor lopex lpaste lpsmith luite lukexi lulf lunarjar lusory M-ou-se m0g m3ga machisuji machisuji_ macron magicman Maior majoh mak` maksbotan malorie_ mami mannyv mantovani maoe mapreduce marienz markov_twain martinalex Martty MasseR mattp_ mauke mavam Maxdamantus maximums1eve maximumsteve maxter Mayzie mbrock mcbonz mceier McManiaC mcw09 mechairoi mee mel- melter mendez mephx MercurialAlchemi meretrix mero MetaCosm mgaare mgsloan miasma michaf mietek mike2 mikeplus32 milessabin milli mimi_vx mimico__ mirsal mixi mjo_ mjrosenb mjs2600 MK_FG mkiefel mkrull mlamari_ mlh mlinksva mm_freak mmaruseacph2 mmathis mnbernstein mno2_ mokus mollerstrand MOMI monochrom mononofu Morgawr mornfall morolin mortberg Mortomes MouseTheLuckyDog Mowah mr- mrcheeks mrd mroman mrowe_away mrpantoufle MrRacoon mrshoe mrsolo MrWoohoo mshroyer mstksg munro mux mviljamaa mvj4 mxf myme n-dolio n00dle nabilhassein Nahra Natch ndngvr ndonaldson NeatBasis necroyeti neektza1 neptunepink Neqoxec neurocyte newsham Nickeeh nicoo Nik05 niko nikola nilg` Nimatek ninegrid ninzine nkpart nlogax noam noddy noddy2OOO nominolo nopcode_ noplamodo normanrichards notdan Nshag nuttycom1 nwf nxorg8 Obfuscate Obfuscate` ocharles Odd_Bloke ofan og oldmanst1n oldmanstan OlegYch oleo opqdonut OrangeDu1k ormaaj Ornedan orospakr osfameron osnr othiym23 otterdam otto_s otulp ousado Pad^ paddymahoney palaga palmje ParahSailin ParaSa1lin parcs Patchou path[l] pcapriotti peddie peltchu Pengoo perlite petanqk petantik pfoetchen phar pharaun phienone philipde` Philonous_ phischu Phlogistique PHO_ phryk pi8029 PiepScuim pikhq pjstadig Plex- plhk pnielsen Polarina pootler poppingtonic popx poucet pqmodn pr predator217 preflex profmakx prophile Proteumus prototrout ps-auxw Ptival Ptival_ purefn puzza007 pxqr pygospa pyrtsa pyykkis_ Quadrescence quaestor quicksilver qwandor qz_ raft raid Ralith Rarrikins rasmusto Raynes Raynos Razz rckrd reactormonk recycle redjohn ReinH Reisen relrod Rembane RevJohnnyHealey rfw rgrinberg rhodesd RichyB Riussi robbert` robinbb roconnor roconnor_ rpenguin_ rs0 Rutger`_ ryanakca ryant5000 s00pcan s4msung s4muel s_quark sababa SaBer saep Sagi saiam saiam^ Saizan sajith samrat satshaba1 satshabad saurik schlumpi_ schoppenhauer schroedinbug sclv sclv_ scottschecter scshunt Sculptor Sculptor_ sdx23 sdx32 seantallen SegFaultAX sellout- senthilkumarv Sgeo sgso shachaf shajra shanse shelf shennyg shepheb shergill Shin-LaC shiona SHODAN Shou shrekster si14 silasm simon simukis_ sinclair|net sipa SirChurchill sirspazzolot Sixmsj skchrko ski_ skulls skypers slack1256 sleepybug SLi slobo sm smarter so sohum solancile solarus solirc solrize solution sordina SoupEvil sp3ctum Spaceghost spaceships Spockz squimmy srcerer ssbr` ssttudder Starfire_ stass statusfailed stelleg stepcut stiell stomp strmpnk_ stvc sudlowbot suiside sunfun Sunhay_ sunnavy SuperNoeMan supersym supersymmetry supki Svedrin swistak35 Swizec swook` tahu TallerGhostWalt talzeus_ tamiko Tarential tarmo taruti tauntaun tavelram taylorgb_ td123 tdammers TDJACR tearful Tehnix tehroflmaoer Tekerson Tene tensorpudding teodor98 tero- tertl3 Tesseraction tessier tew88 tg Th0mas theDon theorbtwo TheSpectre thetallguy thetallguy1 thirsteh thomassgn thorkilnaur thorsten` thoughtpolice threedaymonk thunderrd timemage Tinned_Tuna tippenein TML tobyo2 tolt tomaw tomboy64 tomejaguar tomh- tomh-_ tomprince torkjak totte tov tpsinnem tragalo Tribal tridactyla tromp__ troydm tsou ttm tudalex tulcod tunixman Twey twn tych0 tylergillies_ u_ udevd udoprog Ulrar upgrayeddd uu1101 valdyn Valodim ve vehk Veltas Vertue vili vili_ vivekrai vmeson vnz vobi Vorpal voxpopuli vpm Vq vsayer vvv wagle Walther warpy Watcher7 waterlaz weie_ wereHamster whaletechno WhereIsMySpoon wilfredh willb1 Will| wimpunk Wizek wole wollw wormphlegm wto wtw wunki xaimus xenocons xenophon xinming xl XMunkki_ xnyhps Xorlev xorox90 xpika xplat xye xymox yacks yam yan_ Yaniel yano Yawgmoth Ycros yeltzooo yogurt_truck yopikh YoungFrog yriw ystael ysuzuki zaiste zaphar_ps Zariel zcourts zebr zeiris_ zenoli zenzike zero7 zerokarmaleft zett_zelett zhulikas ziman zoktar zomg zorzar zrot zw01]
2013-08-31 09:00:47	--	Channel #haskell: 1074 nicks (1 op, 0 halfops, 0 voices, 1073 normals)
2013-08-31 09:00:47	--	URL for #haskell: http://www.haskell.org/
2013-08-31 09:00:50	<--	Kuraitou (~kuraitou@unaffiliated/kuraitou) has quit (Disconnected by services)
2013-08-31 09:00:59	--	Kuraitou_ is now known as Kuraitou
2013-08-31 09:01:00	<--	cynick (~worm@ec2-67-202-63-47.compute-1.amazonaws.com) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	lukexi (~lukexi@75-101-60-164.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	sdx23 (~sdx23@unaffiliated/sdx23) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	noddy (~self@numm.org) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:00	<--	maximumsteve (~alf_pog@ip68-107-99-90.sd.sd.cox.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	Bwild (~irc@static-72-67-52-110.lsanca.fios.verizon.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:00	<--	oldmanstan (~glesica@goto10line.net) has quit (Read error: Operation timed out)
2013-08-31 09:01:01	<--	basdirks_ (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	bootcode (~robin@178-83-236-126.dynamic.hispeed.ch) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	<--	iulian (iulian@ubuntu/member/iulian) has quit (Ping timeout: 256 seconds)
2013-08-31 09:01:01	-->	BMeph_ (BMeph@ip68-7-212-2.sd.sd.cox.net) has joined #haskell
2013-08-31 09:01:03	-->	tessier_ (~treed@216.105.40.125) has joined #haskell
2013-08-31 09:01:04	--	Mode #haskell [+CLcnpt]
2013-08-31 09:01:04	--	Channel created on Sun, 26 Nov 2006 07:42:48
2013-08-31 09:01:08	<--	tessier_ (~treed@216.105.40.125) has quit (Changing host)
2013-08-31 09:01:08	-->	tessier_ (~treed@kernel-panic/copilotco) has joined #haskell
2013-08-31 09:01:51	-->	axiom (~Sponge_Bo@antiklimax.se) has joined #haskell
2013-08-31 09:02:02	-->	CindyLin1 (~cindy_utf@112-121-80-249.mwsrv.com) has joined #haskell
2013-08-31 09:02:10	-->	adlan_ (~AAFR@aafr.me) has joined #haskell
2013-08-31 09:02:21	-->	mshroyer_ (~mshroyer@legolas.paleogene.net) has joined #haskell
2013-08-31 09:02:38	-->	Rarrikin1 (~Rarrikins@unaffiliated/rarrikins) has joined #haskell
2013-08-31 09:02:46	-->	kryft_ (kryft@kapsi.fi) has joined #haskell
2013-08-31 09:02:55	-->	kshannon_ (~kris@kris.shannon.id.au) has joined #haskell
2013-08-31 09:02:57	-->	strmpnk (strmpnk@gateway/shell/ircrelay.com/x-wtzynwldnssjwqxp) has joined #haskell
2013-08-31 09:03:07	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 09:03:26	-->	jyyou_ (~jyyou@Plaslab.cs.nctu.edu.tw) has joined #haskell
2013-08-31 09:03:27	<--	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has quit (Read error: Connection reset by peer)
2013-08-31 09:03:29	-->	akraut_ (uid3423@gateway/web/irccloud.com/x-tqkufhdbigabcnhs) has joined #haskell
2013-08-31 09:03:37	-->	knyppeld1nan (~kristina@c213-89-17-64.bredband.comhem.se) has joined #haskell
2013-08-31 09:03:42	-->	kwos (~kwos@103.5.142.6) has joined #haskell
2013-08-31 09:03:49	kwos	hi all!
2013-08-31 09:03:50	-->	Philonous__ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has joined #haskell
2013-08-31 09:03:57	-->	tensorpuddin (~tensorpud@99.148.203.65) has joined #haskell
2013-08-31 09:04:23	-->	kanibe_ (~yo@alamentin-551-1-66-27.w90-31.abo.wanadoo.fr) has joined #haskell
2013-08-31 09:04:35	-->	MrRacoon_ (suthere@reaver.cat.pdx.edu) has joined #haskell
2013-08-31 09:04:37	<--	ystael (~ystael@pool-108-20-249-231.bstnma.east.verizon.net) has quit (Ping timeout: 248 seconds)
2013-08-31 09:04:43	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 09:04:43	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 09:04:52	<--	kanibe_ (~yo@alamentin-551-1-66-27.w90-31.abo.wanadoo.fr) has quit (Read error: Connection reset by peer)
2013-08-31 09:04:59	-->	kitallis (~kitallis@122.166.176.62) has joined #haskell
2013-08-31 09:05:00	<--	zett_zelett (~zett_zele@p5DE7AC83.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2013-08-31 09:05:05	-->	doomlord_ (~servitor@host86-180-26-144.range86-180.btcentralplus.com) has joined #haskell
2013-08-31 09:05:15	-->	isomorphic (~isomorphi@gateway/tor-sasl/isomorphic) has joined #haskell
2013-08-31 09:05:33	-->	MOMI_ (uid4868@gateway/web/irccloud.com/x-apbxuwjcuckighzo) has joined #haskell
2013-08-31 09:05:52	-->	diadara (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:05:54	-->	maoe1 (~maoe@218.201.120.153.tokyo.global.crust-r.net) has joined #haskell
2013-08-31 09:06:06	yopikh	kwos: hi one
2013-08-31 09:06:06	kwos	is there some standard library for testing numerical computations?
2013-08-31 09:06:11	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 09:06:40	-->	kav_ (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has joined #haskell
2013-08-31 09:06:43	-->	pi8030 (~pi8027@www2480uf.sakura.ne.jp) has joined #haskell
2013-08-31 09:06:47	kwos	I wonder what's the best way to compare results of interpolation with the actual function
2013-08-31 09:07:01	kwos	since obviously they will disagree a tiny bit in some places
2013-08-31 09:07:13	-->	clog_ (~nef@bespin.org) has joined #haskell
2013-08-31 09:07:27	<--	phienone (~ph@nappo.lnet.fi) has quit (Read error: Connection reset by peer)
2013-08-31 09:07:48	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 09:07:59	kwos	oh, QuickCheck has something (~==?) :: (AEq a, Show a) => a -> a -> Result
2013-08-31 09:08:39	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 09:09:56	-->	edon (~user@albalug/edon) has joined #haskell
2013-08-31 09:10:07	kwos	yopikh: yo!
2013-08-31 09:10:08	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 09:10:30	kwos	too damn hot to go out, time to write some Haskell :)
2013-08-31 09:11:09	-->	k00mi_ (~koomi@pictor.uberspace.de) has joined #haskell
2013-08-31 09:11:11	-->	ceii_ (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 09:11:14	-->	Vorpal_ (~Vorpal@unaffiliated/vorpal) has joined #haskell
2013-08-31 09:11:24	-->	sj4nz (~sj4nz@cpe-98-156-105-243.kc.res.rr.com) has joined #haskell
2013-08-31 09:11:24	<--	ananthakumaran (~Adium@117.192.135.70) has quit (*.net *.split)
2013-08-31 09:11:24	<--	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Philonous_ (~Philonous@dslb-178-005-044-198.pools.arcor-ip.net) has quit (*.net *.split)
2013-08-31 09:11:24	<--	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	eff_ (~quassel@123.122.71.85) has quit (*.net *.split)
2013-08-31 09:11:24	<--	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	supersym (~supersym@5418F772.cm-5-1d.dynamic.ziggo.nl) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Sculptor (~Sculptor@89.110.199.224) has quit (*.net *.split)
2013-08-31 09:11:24	<--	doomlord (~doomlod@host86-180-26-144.range86-180.btcentralplus.com) has quit (*.net *.split)
2013-08-31 09:11:24	<--	roconnor (~roconnor@e120-pool-d89a7e29.brdbnd.voicenetwork.ca) has quit (*.net *.split)
2013-08-31 09:11:24	<--	Rarrikins (~Rarrikins@unaffiliated/rarrikins) has quit (*.net *.split)
2013-08-31 09:11:25	<--	BMeph (BMeph@ip68-7-212-2.sd.sd.cox.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	michaf (~phar@v22010096862397599.yourvserver.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (*.net *.split)
2013-08-31 09:11:25	<--	kav (~kari@dsl-espbrasgw1-50dfb0-166.dhcp.inet.fi) has quit (*.net *.split)
2013-08-31 09:11:25	<--	xenophon (~his_shado@64.124.65.162) has quit (*.net *.split)
2013-08-31 09:11:25	<--	tavelram (~tavelram@c-8-8-8-8.odn.sgsnet.se) has quit (*.net *.split)
2013-08-31 09:11:25	<--	td123 (~thomas-dz@archlinux/developer/td123) has quit (*.net *.split)
2013-08-31 09:11:25	<--	maoe (~maoe@218.201.120.153.tokyo.global.crust-r.net) has quit (*.net *.split)
2013-08-31 09:11:25	<--	adlan (~AAFR@aafr.me) has quit (*.net *.split)
2013-08-31 09:11:25	<--	knyppeldynan (~kristina@c213-89-17-64.bredband.comhem.se) has quit (*.net *.split)
2013-08-31 09:11:25	<--	Vorpal (~Vorpal@unaffiliated/vorpal) has quit (*.net *.split)
2013-08-31 09:11:25	<--	tensorpudding (~tensorpud@99.148.203.65) has quit (*.net *.split)
2013-08-31 09:11:25	<--	pi8029 (~pi8027@www2480uf.sakura.ne.jp) has quit (*.net *.split)
2013-08-31 09:11:25	<--	vili (~nick@cpe-76-189-107-110.neo.res.rr.com) has quit (*.net *.split)
2013-08-31 09:11:25	<--	CindyLinz (~cindy_utf@112-121-80-249.mwsrv.com) has quit (*.net *.split)
2013-08-31 09:11:25	<--	plhk (~plhk@urban.v12.su) has quit (*.net *.split)
2013-08-31 09:11:25	<--	MOMI (uid4868@gateway/web/irccloud.com/x-hnfppbmhfzqzpaer) has quit (*.net *.split)
2013-08-31 09:11:26	<--	tomh- (uid501@gateway/web/irccloud.com/x-wmdrklhcyetyebly) has quit (*.net *.split)
2013-08-31 09:11:26	<--	k00mi (~koomi@pictor.uberspace.de) has quit (*.net *.split)
2013-08-31 09:11:26	<--	majoh (~Sponge_Bo@antiklimax.se) has quit (*.net *.split)
2013-08-31 09:11:26	<--	Obfuscate (~keii@unaffiliated/obfuscate) has quit (*.net *.split)
2013-08-31 09:11:26	<--	Ptival (~Ptival@goto.ucsd.edu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	kubrat (uid12741@gateway/web/irccloud.com/x-oyebatjfpurgkfmu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	akraut (uid3423@gateway/web/irccloud.com/x-uxwbxfnxhtihuans) has quit (*.net *.split)
2013-08-31 09:11:26	<--	shennyg (uid4021@gateway/web/irccloud.com/x-tsxzanjbwpyrfyjf) has quit (*.net *.split)
2013-08-31 09:11:26	<--	tomprince (~tomprince@socrates.hocat.ca) has quit (*.net *.split)
2013-08-31 09:11:26	<--	clog (~nef@bespin.org) has quit (*.net *.split)
2013-08-31 09:11:26	<--	mshroyer (~mshroyer@legolas.paleogene.net) has quit (*.net *.split)
2013-08-31 09:11:26	<--	neektza1 (~neektza@marvin.kset.org) has quit (*.net *.split)
2013-08-31 09:11:26	<--	MrRacoon (suthere@reaver.cat.pdx.edu) has quit (*.net *.split)
2013-08-31 09:11:26	<--	jyyou (~jyyou@Plaslab.cs.nctu.edu.tw) has quit (*.net *.split)
2013-08-31 09:11:26	<--	jrib (~jrib@upstream/dev/jrib) has quit (*.net *.split)
2013-08-31 09:11:26	<--	kshannon (~kris@kris.shannon.id.au) has quit (*.net *.split)
2013-08-31 09:11:26	<--	gbluma_ (~gbluma@ec2-50-17-204-222.compute-1.amazonaws.com) has quit (*.net *.split)
2013-08-31 09:11:27	<--	strmpnk_ (strmpnk@gateway/shell/ircrelay.com/x-offscltpowhztkne) has quit (*.net *.split)
2013-08-31 09:11:27	<--	tessier (~treed@kernel-panic/copilotco) has quit (*.net *.split)
2013-08-31 09:11:27	<--	kryft (kryft@kapsi.fi) has quit (*.net *.split)
2013-08-31 09:11:27	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:11:27	--	tensorpuddin is now known as tensorpudding
2013-08-31 09:11:41	<--	diadara (~diadara@115.249.18.25) has quit (Ping timeout: 245 seconds)
2013-08-31 09:11:44	-->	jrib (~jrib@upstream/dev/jrib) has joined #haskell
2013-08-31 09:11:45	-->	oleo (~oleo@xdsl-87-79-194-70.netcologne.de) has joined #haskell
2013-08-31 09:11:51	-->	shennyg (uid4021@gateway/web/irccloud.com/x-oscqjhkpebtaadjt) has joined #haskell
2013-08-31 09:11:52	--	MOMI_ is now known as MOMI
2013-08-31 09:11:59	--	kubrat_ is now known as kubrat
2013-08-31 09:12:01	-->	neektza1 (~neektza@marvin.kset.org) has joined #haskell
2013-08-31 09:12:07	--	akraut_ is now known as akraut
2013-08-31 09:12:11	--	tomh-_ is now known as tomh-
2013-08-31 09:12:25	<--	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has quit (Ping timeout: 268 seconds)
2013-08-31 09:12:29	--	kubrat is now known as Guest66158
2013-08-31 09:12:39	<--	desc|zenbook (~heh@120.141.196.237) has quit (Ping timeout: 240 seconds)
2013-08-31 09:12:46	-->	cyphase_ (~cyphase@unaffiliated/cyphase) has joined #haskell
2013-08-31 09:12:51	--	knyppeld1nan is now known as knyppeldynan
2013-08-31 09:12:55	-->	sxn (~sxn@mnch-4d0db864.pool.mediaWays.net) has joined #haskell
2013-08-31 09:12:56	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 09:13:30	-->	dalaing (~dalaing@124-170-121-31.dyn.iinet.net.au) has joined #haskell
2013-08-31 09:14:34	-->	heruur (~tvh@2a00:12d0:a101:7001:223:14ff:fe98:9164) has joined #haskell
2013-08-31 09:14:39	<--	dreixel (~dreixel@host81-132-84-228.range81-132.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2013-08-31 09:14:51	-->	dreixel (~dreixel@host86-155-212-216.range86-155.btcentralplus.com) has joined #haskell
2013-08-31 09:15:21	<--	ceii_ (~ceii@43-65.1-85.cust.bluewin.ch) has quit (Remote host closed the connection)
2013-08-31 09:16:00	<--	Internet13 (chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has quit (Ping timeout: 276 seconds)
2013-08-31 09:16:01	<--	spaceships (~spaceship@c-67-189-58-218.hsd1.or.comcast.net) has quit (Quit: leaving)
2013-08-31 09:16:03	-->	ceii (~ceii@43-65.1-85.cust.bluewin.ch) has joined #haskell
2013-08-31 09:16:13	-->	lq (~user@115.238.153.244) has joined #haskell
2013-08-31 09:17:15	-->	tavelram__ (~tavelram@c-8-8-8-8.odn.sgsnet.se) has joined #haskell
2013-08-31 09:17:15	-->	ananthakumaran (~Adium@117.192.135.70) has joined #haskell
2013-08-31 09:17:15	-->	enthropy (~aavogt@CPE00222d67ba9d-CM00222d67ba99.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 09:17:15	-->	mrcheeks (~user@CPE001839838ebe-CM001ac30d4784.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 09:17:15	-->	td123 (~thomas-dz@archlinux/developer/td123) has joined #haskell
2013-08-31 09:17:15	-->	plhk (~plhk@urban.v12.su) has joined #haskell
2013-08-31 09:17:15	-->	tomprince (~tomprince@socrates.hocat.ca) has joined #haskell
2013-08-31 09:17:18	-->	turiya (~turiya@14.96.74.172) has joined #haskell
2013-08-31 09:17:56	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 09:18:00	<--	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has quit (Quit: Leaving.)
2013-08-31 09:18:37	-->	alanz (~alanz@105-236-132-131.access.mtnbusiness.co.za) has joined #haskell
2013-08-31 09:18:40	--	gpampara_off is now known as gpampara
2013-08-31 09:18:51	-->	Internet13 (chatzilla@cpc7-croy20-2-0-cust13.croy.cable.virginmedia.com) has joined #haskell
2013-08-31 09:20:19	turiya	for printing the list [0..512*512-1], the total alloc = 52,669,024 bytes. The total memory needed for storing the list is 512*512*8 = 2,097,152 bytes. Why is the total alloc much more than this? Is it due to the printing?
2013-08-31 09:20:52	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 09:22:27	pxqr	any http lib to encode/decode requests and responses?
2013-08-31 09:23:11	pxqr	http-types do not provide request and response types
2013-08-31 09:23:14	-->	newbie (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 09:23:28	newbie	hello
2013-08-31 09:23:36	pxqr	while the HTTP package do not allow "*" in start-line
2013-08-31 09:23:38	--	newbie is now known as Guest43682
2013-08-31 09:23:59	Guest43682	with x:xs i say head plus list
2013-08-31 09:25:02	augur	turiya: how are you calculating that
2013-08-31 09:25:07	pxqr	turiya: did you specify -O2?
2013-08-31 09:25:48	Guest43682	but how can i say list plus tail? It should work like addToList e (xs:s)
2013-08-31 09:25:51	turiya	i used the -prof and -fprof-auto and ran with +RTS -p
2013-08-31 09:25:53	augur	turiya: that is to say, elaborate on why you think 512*512*8 makes sense
2013-08-31 09:25:56	turiya	i did specify O2
2013-08-31 09:25:58	<--	fl00r (~fl00r@pool-71-189-238-151.lsanca.fios.verizon.net) has quit (Remote host closed the connection)
2013-08-31 09:26:05	pxqr	list additionaly takes around 3 words per elem
2013-08-31 09:26:27	-->	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 09:26:33	pxqr	+ unboxed Int take one 2 words
2013-08-31 09:26:39	turiya	oh.. the list length is 512*512 and eight bytes for storing each element
2013-08-31 09:26:59	ski_	Guest43682 : "tail" is always a list. perhaps you meant "list (i.e. init) plus last" ?
2013-08-31 09:27:11	pxqr	turiya: 3 + 2 = 5 words per element
2013-08-31 09:27:14	ski_	> (init &&& last) "list"
2013-08-31 09:27:15	<--	diadara_ (~diadara@115.249.18.25) has quit (Quit: Konversation terminated!)
2013-08-31 09:27:17	lambdabot	  ("lis",'t')
2013-08-31 09:27:25	Guest43682	ski_: yes, for recursion
2013-08-31 09:27:29	turiya	pxqr: why 3+2?
2013-08-31 09:27:29	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:27:43	Guest43682	addToList e [] = [e]
2013-08-31 09:27:59	Guest43682	addToList e (xs:x) = some_logic
2013-08-31 09:28:04	-->	pantsman (~pantsman@pdpc/supporter/active/pantsman) has joined #haskell
2013-08-31 09:28:05	ski_	Guest43682 : in general, that's a bad idea (it's inefficient -- if you want this, either initially reverse the list, or use another data structure=
2013-08-31 09:28:11	<--	normanrichards (~normanric@70.114.215.220) has quit (Quit: normanrichards)
2013-08-31 09:28:26	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 09:28:47	ski_	given a non-empty list, you can directly access its head (first element) and tail (list of all the rest of the elements, possibly zero of them)
2013-08-31 09:29:11	ski_	you can't directly access the last element, nor the list of the initial elements (all but the last element)
2013-08-31 09:29:21	augur	Guest43682: you might also want to consider whether you need access to both ends of the list
2013-08-31 09:29:30	ski_	the only way to reach those is by going *via* the "head plus tail" representation
2013-08-31 09:29:32	-->	allsystemsarego (~allsystem@5-12-37-127.residential.rdsnet.ro) has joined #haskell
2013-08-31 09:29:32	<--	allsystemsarego (~allsystem@5-12-37-127.residential.rdsnet.ro) has quit (Changing host)
2013-08-31 09:29:32	-->	allsystemsarego (~allsystem@unaffiliated/allsystemsarego) has joined #haskell
2013-08-31 09:29:34	augur	if the answer is no, then you should just treat the whole list as "backwards"
2013-08-31 09:29:38	turiya	what is the amount of memory required to store a list of size n (Ints)
2013-08-31 09:30:06	pxqr	[1,2] = {:#, head_ptr = {Int#, 1#}, tail_ptr = {:#, head_ptr = { Int#, 2# }, tail_ptr = { []# } }}
2013-08-31 09:30:08	augur	turiya: going by what pxqr said, 5n words
2013-08-31 09:30:29	augur	whatever a word is here
2013-08-31 09:30:30	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 09:30:43	Kinnison	s/word/pointer/
2013-08-31 09:30:51	Guest43682	ski_: well, i'll try queue then
2013-08-31 09:31:07	Guest43682	ski_: thought list is two-sided
2013-08-31 09:31:09	Kinnison	In essence, it's hardware and implementation dependent
2013-08-31 09:31:19	ski_	Guest43682: btw, wb from earlier
2013-08-31 09:31:40	Guest43682	ski_: wb?
2013-08-31 09:31:41	turiya	i see, so the remaining is the overhead for printing
2013-08-31 09:31:43	ski_	the standard "list" type in Haskell is singly-linked lists
2013-08-31 09:31:52	ski_	Guest43682 : meaning "welcome back"
2013-08-31 09:31:58	Guest43682	ski_: ah =)
2013-08-31 09:32:00	augur	Kinnison: indeed, but that maps to some hardware specific thing in this case :)
2013-08-31 09:32:09	<--	lq (~user@115.238.153.244) has quit (Ping timeout: 268 seconds)
2013-08-31 09:32:21	augur	using pxqr's numbers, turiya's system has words of length 40.1832763671875
2013-08-31 09:32:32	ski_	Guest43682 : but also see what augur said, in case you missed it
2013-08-31 09:32:52	pxqr	augur: well, we can floor that to 40 :)
2013-08-31 09:32:53	<--	applicative (~m@pool-71-182-234-215.pitbpa.fios.verizon.net) has quit (Ping timeout: 248 seconds)
2013-08-31 09:32:53	augur	which suggests he's on a 32 bit-word system, and the extra overhead is from the printing
2013-08-31 09:32:55	turiya	is there a way to check word size in haskell
2013-08-31 09:33:18	augur	pxqr: do systems ever use non-2^n memory content sizes?
2013-08-31 09:33:18	-->	lq (~user@115.238.153.243) has joined #haskell
2013-08-31 09:33:25	Guest43682	ski_: i need only access from end of list. But reversing is bad idea, due to performance
2013-08-31 09:33:28	Quadrescence	36 bits!
2013-08-31 09:34:27	pxqr	augur: I don't know; do you mean something like data Foo = Foo {-# UNPACK #-} !Word8 {-# UNPACK #-} !Word8   ?
2013-08-31 09:34:27	ski_	Guest43682: why is reversing bad, if you only do it once (or maybe twice) ?
2013-08-31 09:35:21	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 09:35:25	augur	pxqr: i mean it seems unlikely that any memory manufacturer is mapping each address to a non-2^n-sized location in memory
2013-08-31 09:35:46	--	gpampara is now known as gpampara_off
2013-08-31 09:35:47	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-31 09:35:51	ski_	Guest43682: are you attempting to write an incremental algorithm ? iow one which can process through a list without the whole list needing to fit in memory at any one time ?
2013-08-31 09:36:03	--	kryft_ is now known as kryft
2013-08-31 09:36:10	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:36:11	Guest43682	ski_: in algorithm, i add many elements, and every time i will reverse this list, so the number of reversions is much more then 2
2013-08-31 09:36:16	ski_	Guest43682: where is the list coming from ?
2013-08-31 09:36:38	ski_	Guest43682 : why reverse every time you add elements ?
2013-08-31 09:36:46	ski_	do you need to add both to front and back ?
2013-08-31 09:36:50	ski_	or only to back end ?
2013-08-31 09:36:54	<--	u_ (~phillip@adsl-75-57-168-247.dsl.emhril.sbcglobal.net) has quit (Remote host closed the connection)
2013-08-31 09:37:05	Guest43682	ski_: in fact, i have next task. A list (let it be list) is like [(1, 2), (3, 4), (10, 20)]
2013-08-31 09:37:24	 *	ski_ awaits an answer :)
2013-08-31 09:37:32	pxqr	augur: i don't know;
2013-08-31 09:37:33	turiya	i have 20% alloc for the list in the main and the rest should be for printing then? this means that more memory has been allocated for printing than to generate the list
2013-08-31 09:37:49	Guest43682	ski_ when i add new element (Double, Double), it must stay between two nearest points
2013-08-31 09:38:00	mauke	Guest43682: why?
2013-08-31 09:38:03	<--	diadara_ (~diadara@115.249.18.25) has quit (Read error: Connection reset by peer)
2013-08-31 09:38:14	ski_	Guest43682 : do you only need to add elements at the end ?
2013-08-31 09:38:26	Guest43682	ski_: e.g. add (6, 8) -> [(1, 2), (3, 4), (6, 8), (10, 20)]
2013-08-31 09:38:35	ski_	hm, ok
2013-08-31 09:38:47	ski_	that looks like insert-in-sorted-list
2013-08-31 09:38:54	Guest43682	ski_: yes
2013-08-31 09:39:15	ski_	so then another data structure would be better than a list
2013-08-31 09:39:25	Guest43682	ski_: and inner pairs never intersects
2013-08-31 09:39:29	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 09:39:33	ski_	a `Set', e.g.
2013-08-31 09:39:53	Guest43682	ski_:, yes, i'm googling about queues, found a good post on SO
2013-08-31 09:40:12	ski_	(if you want to implement it yourself, try some variant of search trees)
2013-08-31 09:40:16	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:41:09	<--	diadara_ (~diadara@115.249.18.25) has quit (Client Quit)
2013-08-31 09:41:14	ski_	queues are probably not good (unless perhaps if you mean priority queues)
2013-08-31 09:41:28	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 09:41:34	Guest43682	ski_: its basics, so should be already implemented
2013-08-31 09:41:44	ski_	queues typically have efficient adding to one end and removing from the other end (and perhaps also vice versa)
2013-08-31 09:41:53	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 09:41:54	-->	Taneb (~nathan@host-92-23-115-247.as13285.net) has joined #haskell
2013-08-31 09:41:56	ski_	while you seem to be wanting to insert in order
2013-08-31 09:42:01	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-08-31 09:42:08	turiya	augur:  (52,669,704 * 0.2) / (512*512*5) = 0.8 < 1 (the 0.2 is for the 20% alloc for the list), so may be the whole list is not stored in memory then?
2013-08-31 09:42:19	<--	teodor98 (~teodor@92.80.39.229) has quit (Read error: Operation timed out)
2013-08-31 09:42:21	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 09:42:30	augur	turiya: who knows!
2013-08-31 09:43:05	Guest43682	ski_: an ideal variant would be (xs:x), but it is impossible
2013-08-31 09:43:52	turiya	so, it is hard to understand where memory is being used..
2013-08-31 09:45:10	 *	hackagebot crypto-random 0.0.2 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.2 (VincentHanquez)
2013-08-31 09:45:24	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 09:48:09	 *	ski_ idly wonders why `ViewPatterns' aren't enabled in lambdabot
2013-08-31 09:48:48	ski_	Guest43682 : `((init &&& last) -> (xs,x))' would work, but you don't want it
2013-08-31 09:49:06	ski_	(because it's inefficient)
2013-08-31 09:50:08	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 09:50:21	<--	k0001 (~k0001@host241.190-226-194.telecom.net.ar) has quit (Ping timeout: 240 seconds)
2013-08-31 09:50:26	-->	sjoerd_visscher (~sjoerd_vi@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 09:50:38	-->	teodor98 (~teodor@92.80.39.229) has joined #haskell
2013-08-31 09:50:51	<--	ersran9_ (~quassel@unaffiliated/ersran9) has quit (Remote host closed the connection)
2013-08-31 09:52:40	pxqr	> 512*512 * 5 * 8 + 512 * 512 * 7 * 2 * 8
2013-08-31 09:52:41	lambdabot	  39845888
2013-08-31 09:52:58	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 09:53:23	augur	> 512*512*5*32
2013-08-31 09:53:24	lambdabot	  41943040
2013-08-31 09:53:55	Guest43682	ski_: well, i do another thing. I reverse list from beginning. So not [(1, 2), (3, 4), (10, 20)] but [(20, 10) ,(4, 3), (2, 1)]
2013-08-31 09:54:20	Guest43682	ski_: then seems like i can work with simple list
2013-08-31 09:54:23	pxqr	maybe show takes 7 chars per number
2013-08-31 09:54:29	ski_	well, it won't help if you want to add stuff into the middle of it
2013-08-31 09:54:32	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 09:54:50	Guest43682	ski_: i ll show a code a bit later
2013-08-31 09:54:50	adnap	Why does isEOF block?
2013-08-31 09:54:56	adnap	after calling getLine
2013-08-31 09:55:13	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 09:56:46	mauke	so it can tell you whether it's reached the end of the file
2013-08-31 09:57:37	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 09:59:10	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 09:59:16	-->	kamatsu (~Adium@123-243-95-236.static.tpgi.com.au) has joined #haskell
2013-08-31 09:59:22	lpaste	adnap pasted “eof block” at http://lpaste.net/92356
2013-08-31 09:59:25	-->	elediaz (~eleazar@90.173.211.6) has joined #haskell
2013-08-31 10:00:11	adnap	mauke: If I type something which does not contain EOF and press enter, why should isEOF block?
2013-08-31 10:00:25	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 10:00:54	pxqr	when blah (return ()) makes no sense
2013-08-31 10:01:16	-->	c_wraith (~c_wraith@commie.pwrsrc.net) has joined #haskell
2013-08-31 10:01:45	-->	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has joined #haskell
2013-08-31 10:02:03	mauke	adnap: "contain EOF" makes no sense
2013-08-31 10:02:04	adnap	pxqr: It could also be when (not eof) loop
2013-08-31 10:02:16	ski_	adnap: the `when' won't do what you probably intended it to do
2013-08-31 10:02:21	adnap	mauke: When I press enter and not CTRL+D
2013-08-31 10:02:35	adnap	ski_: It seems to
2013-08-31 10:02:35	mauke	where/when?
2013-08-31 10:02:49	mauke	and yeah, you're not actually using eof anywhere
2013-08-31 10:02:56	adnap	wtf
2013-08-31 10:03:01	adnap	isEOF
2013-08-31 10:03:09	adnap	...is in there
2013-08-31 10:03:10	mauke	whole sentences, please
2013-08-31 10:03:25	adnap	What do you mean I'm "not actually using eof"?
2013-08-31 10:03:33	ski_	adnap `when (...) $ return ()' is equal to `return ()' (assuming `...' isn't bottom)
2013-08-31 10:03:35	mauke	what I said
2013-08-31 10:03:51	mauke	the value of eof has no effect on the behavior of the program
2013-08-31 10:04:13	adnap	I thought when does the IO when the first argument is True
2013-08-31 10:04:17	knz	hi all
2013-08-31 10:04:17	mauke	correct
2013-08-31 10:04:41	ski_	adnap : you are probably misunderstanding the effect of `return ()'
2013-08-31 10:04:45	knz	maybe dumb question: I have a function "rgb2gray f ix = f1 (rgb f ix)" which types properly; but "rgb2gray = f1 . rgb" doesn't
2013-08-31 10:04:55	adnap	ski_: Yes
2013-08-31 10:04:55	<--	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has quit (Ping timeout: 246 seconds)
2013-08-31 10:04:58	Guest43682	ski_: well, indeed, that didn't help. I really need insert into sorted list
2013-08-31 10:05:00	ski_	`return ()' is simply an `IO'-action that does nothing interesting
2013-08-31 10:05:01	adnap	ski_: I forgot that return doesn't exit the program
2013-08-31 10:05:01	knz	what am I missing?
2013-08-31 10:05:15	-->	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has joined #haskell
2013-08-31 10:05:15	mauke	knz: rgb2gray f = f1 . rgb f
2013-08-31 10:05:18	adnap	I will change it to "when (not eof) loop"
2013-08-31 10:05:22	pxqr	misunderstanding could be shrinked to just return using QC terms
2013-08-31 10:05:29	ski_	in particular, `return ()' does not "cause the containing function to return" (whatever that would mean here)
2013-08-31 10:05:37	mauke	knz: rgb2gray = (f1 .) . rgb
2013-08-31 10:05:57	ski_	adnap : that's better. `unless eof loop' would also work, in case you prefer that
2013-08-31 10:06:15	-->	wavewave (513fb702@gateway/web/freenode/ip.81.63.183.2) has joined #haskell
2013-08-31 10:06:22	knz	mauke: aha
2013-08-31 10:06:29	<--	tearful (~user@67.51.113.178) has quit (Ping timeout: 248 seconds)
2013-08-31 10:06:34	ski_	  rgb2gray f ix = f1 (rgb f ix)
2013-08-31 10:06:41	ski_	  rgb2gray f ix = f1 ((rgb f) ix)
2013-08-31 10:06:50	ski_	  rgb2gray f ix = (f1 . rgb f) ix
2013-08-31 10:06:56	ski_	  rgb2gray f = f1 . rgb f
2013-08-31 10:07:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 10:07:04	ski_	  rgb2gray f = (f1 .) (rgb f)
2013-08-31 10:07:05	pxqr	> :i :.
2013-08-31 10:07:06	lambdabot	  <hint>:1:1: parse error on input `:'
2013-08-31 10:07:11	ski_	  rgb2gray f = ((f1 .) . rgb) f
2013-08-31 10:07:15	pxqr	@ty :.
2013-08-31 10:07:15	ski_	  rgb2gray = (f1 .) . rgb
2013-08-31 10:07:16	lambdabot	parse error on input `:.'
2013-08-31 10:07:25	-->	zammy (~sammy@ppp-53-83.98-62.inwind.it) has joined #haskell
2013-08-31 10:07:29	ski_	@type (.:)
2013-08-31 10:07:30	lambdabot	(b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
2013-08-31 10:07:42	pxqr	yep
2013-08-31 10:08:07	-->	what-is-this (4c15709a@gateway/web/freenode/ip.76.21.112.154) has joined #haskell
2013-08-31 10:08:11	knz	wut
2013-08-31 10:08:12	<--	epta (~yep@toje.ws) has quit (Quit: leaving)
2013-08-31 10:08:30	ski_	knz : if you use `infixr 9; (.:) = (.) . (.)' (or defined as `(f . g) x y = f (g x y)', if you prefer), you get `rgb2gray = f1 .: rgb'
2013-08-31 10:08:31	-->	epta (~yep@toje.ws) has joined #haskell
2013-08-31 10:08:33	lpaste	adnap annotated “eof block” with “eof block (annotation)” at http://lpaste.net/92356#a92358
2013-08-31 10:08:45	<--	jbomo (~dkd@pool-108-23-62-223.lsanca.fios.verizon.net) has quit (Ping timeout: 245 seconds)
2013-08-31 10:08:54	adnap	I still don't understand why the first line is not printed right away
2013-08-31 10:09:13	ski_	knz : did you follow the above step-by-step refactoring of the `rgb2gray' definition ?
2013-08-31 10:09:19	<--	Guest43682 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 10:09:33	mauke	adnap: because null (f x) has to evaluate f x before it can return a result
2013-08-31 10:09:35	arkeet	adnap: huh? it's waiting for getLine
2013-08-31 10:09:36	knz	ski_: yeah, ut I had missed the definition of .:
2013-08-31 10:09:42	-->	teodor98_ (~teodor@109.97.143.123) has joined #haskell
2013-08-31 10:09:55	adnap	mauke: null?
2013-08-31 10:09:59	ski_	knz : if you want to, i can continue from above
2013-08-31 10:10:00	what-is-this	Hi all, I'm trying to model continuations that call the provided function exactly once (well, perhaps these objects are not continuations).. does anything like this exist?
2013-08-31 10:10:02	ski_	  rgb2gray = (f1 .) . rgb
2013-08-31 10:10:04	adnap	arkeet: I mean after I type something and press enter
2013-08-31 10:10:10	knz	ski_: it's fine, I got that
2013-08-31 10:10:12	knz	(and it works)
2013-08-31 10:10:13	<--	tharper_ (~tomh@c83-250-198-77.bredband.comhem.se) has quit (Remote host closed the connection)
2013-08-31 10:10:15	ski_	  rgb2gray = (.) f1 . rgb
2013-08-31 10:10:16	mauke	adnap: what programming languages do you know?
2013-08-31 10:10:23	ski_	  rgb2gray = (.) ((.) f1) rgb
2013-08-31 10:10:26	adnap	mauke: C, C++, Java, and Haskell
2013-08-31 10:10:32	ski_	  rgb2gray = ((.) . (.)) f1 rgb
2013-08-31 10:10:36	ski_	  rgb2gray = (.:) f1 rgb
2013-08-31 10:10:39	mauke	adnap: not Haskell if you don't know null
2013-08-31 10:10:40	ski_	  rgb2gray = f1 .: rgb
2013-08-31 10:10:51	adnap	mauke: null checks if a list is empty, right?
2013-08-31 10:10:54	mauke	yes
2013-08-31 10:10:58	knz	more general question: is there an operator (or is it possible to define one) which captures this pattern generally?
2013-08-31 10:11:02	adnap	mauke: I don't know why you mentioned it. It's not in my code
2013-08-31 10:11:03	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-08-31 10:11:06	mauke	and isEOF checks whether you've reached the end of an IO stream
2013-08-31 10:11:13	mauke	it's analogous
2013-08-31 10:11:18	<--	ndonaldson (~nic@61.69.24.113) has quit (Quit: Leaving)
2013-08-31 10:11:20	adnap	mauke: Please don't pick on me
2013-08-31 10:11:25	ski_	knz : so, the basic answer to why your original attempt didn't work is that `.' only "transmits one argument into the right function"
2013-08-31 10:11:26	pxqr	knz: dot rule?
2013-08-31 10:11:28	-->	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 10:11:37	mauke	adnap: please don't play dumb
2013-08-31 10:11:42	adnap	mauke: I'm not
2013-08-31 10:11:44	knz	like if I have f :: a->b and g :: x->y->...->a, have some syntax f OP g that has type x->y->..->b ?
2013-08-31 10:11:45	ski_	knz : see the definition of the `.:' operator above
2013-08-31 10:11:47	mauke	adnap: me neither
2013-08-31 10:11:48	<--	slack1256 (~slack@181-160-151-12.baf.movistar.cl) has quit (Quit: Konversation terminated!)
2013-08-31 10:11:57	mauke	a list is either empty or a cons of an element and the rest of the list
2013-08-31 10:12:04	-->	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has joined #haskell
2013-08-31 10:12:07	mauke	an IO stream is either at EOF or contains a Char and the rest of the stream
2013-08-31 10:12:21	<--	teodor98 (~teodor@92.80.39.229) has quit (Ping timeout: 248 seconds)
2013-08-31 10:12:29	ski_	knz : oh, you mean for any number of curried arguments -- i don't think so, at least not without scary (well) type class stuff
2013-08-31 10:12:38	knz	o
2013-08-31 10:12:39	knz	k
2013-08-31 10:12:48	mauke	now, how can isEOF tell which it is?
2013-08-31 10:14:16	what-is-this	anyone? basically, Cont' :: (a -> m r) -> m r; but the argument can be called exactly once - anything like this or similar?
2013-08-31 10:14:20	adnap	mauke: isEOF could look at the last character that was buffered and base the result on that
2013-08-31 10:14:34	mauke	adnap: how would that help?
2013-08-31 10:14:43	mauke	also, what do you mean by buffered?
2013-08-31 10:15:02	adnap	mauke: Because then when I type "hello" and press enter, isEOF would know based on those actions that EOF has not been reached yet
2013-08-31 10:15:09	mauke	how would it know?
2013-08-31 10:15:10	Kinnison	If the stream is stdin fr.ex. then the process won't get any more bytes after the enter
2013-08-31 10:15:15	Kinnison	the read() would block
2013-08-31 10:15:18	Kinnison	thus isEOF() would block
2013-08-31 10:15:25	-->	lemao (~lemao@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:15:32	Kinnison	because it cannot find another character or the EOF indicator until read() returns
2013-08-31 10:15:38	mauke	adnap: getLine would consume "hello\n", and then isEOF has an unknown stream
2013-08-31 10:15:55	adnap	mauke: isEOF could look at \n : unknown stream
2013-08-31 10:16:00	mauke	there is no \n
2013-08-31 10:16:05	mauke	getLine has already consumed it
2013-08-31 10:16:16	Kinnison	indeedy
2013-08-31 10:16:54	adnap	What does Ctrl + d do?
2013-08-31 10:17:05	mauke	sends a virtual EOF, effectively
2013-08-31 10:17:12	adnap	Is that a characteR?
2013-08-31 10:17:14	mauke	no
2013-08-31 10:17:30	adnap	How does isEOF know that a stream is empty?
2013-08-31 10:17:38	Kinnison	because read() returns zero
2013-08-31 10:17:44	mauke	how does null know a list is empty?
2013-08-31 10:17:48	mauke	[] isn't an element
2013-08-31 10:18:10	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 10:18:36	adnap	I guess I don't know how to make my program do what I want. I guess I will make it exit when one types "quit" or something
2013-08-31 10:18:49	mauke	what do you want it to do?
2013-08-31 10:18:55	ski_	what-is-this : perhaps try "Linear Continuation-Passing" and "Linearly Used Continuations" at <http://www.cs.bham.ac.uk/~hxt/research/hayo-thielecke-publications.shtml> by Hayo Thielecke et al. ?
2013-08-31 10:19:08	adnap	I just want it to print lines that were read immediately after enter is pressed, and stop immediately after Ctrl + D is pressed
2013-08-31 10:19:16	adnap	(d
2013-08-31 10:19:17	adnap	*d
2013-08-31 10:19:28	-->	Thra11 (~Thra11@200.248.90.146.dyn.plus.net) has joined #haskell
2013-08-31 10:19:44	mauke	loop = eof <- isEOF; when (not eof) $ do s <- getLine; putStrLn s; loop
2013-08-31 10:20:10	 *	hackagebot crypto-numbers 0.2.0 - Cryptographic numbers: functions and algorithms  http://hackage.haskell.org/package/crypto-numbers-0.2.0 (VincentHanquez)
2013-08-31 10:20:12	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 10:20:16	adnap	mauke: Thanks. I didn't think of that
2013-08-31 10:20:18	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 10:20:18	pharaun	pxqr: if you find a http library for encoding/decode requests/responses i would be interested in it :)
2013-08-31 10:20:31	Kinnison	getContents >>= putStr
2013-08-31 10:20:31	mauke	you can tell your original structure can't be right because it doesn't handle empty input
2013-08-31 10:20:45	mauke	also, I normally wouldn't use isEOF
2013-08-31 10:20:47	adnap	I don't understand
2013-08-31 10:21:00	mauke	adnap: what if there are 0 lines?
2013-08-31 10:21:05	pxqr	http-types seems like near that I need, but there are no request/response types
2013-08-31 10:21:05	mauke	your original code always calls getLine
2013-08-31 10:21:14	pxqr	just headers, methods etc
2013-08-31 10:21:14	adnap	mauke: Then wouldn't EOF be reached immediately?
2013-08-31 10:21:19	mauke	adnap: yes
2013-08-31 10:21:22	what-is-this	ski_: that looks promising - Do you think it can be enforced at the type level though? A cursory glance seems to indicate that they prove equivalence between general continuations and linear continuations.
2013-08-31 10:21:25	mauke	that's the problem
2013-08-31 10:21:31	adnap	Oh, getLine blocks?
2013-08-31 10:21:35	adnap	If there is no input?
2013-08-31 10:21:38	mauke	no
2013-08-31 10:21:43	mauke	how would that make sense?
2013-08-31 10:21:49	pxqr	pharaun: however I think I'll just use http-types
2013-08-31 10:21:54	ski_	what-is-this : i suspect not, if you mean by the type level in Haskell
2013-08-31 10:21:57	<--	fosky (~fosky@ppp118-209-28-50.lns20.mel4.internode.on.net) has quit (Ping timeout: 248 seconds)
2013-08-31 10:22:02	adnap	What is wrong with calling getLine first if there are 0 lines?
2013-08-31 10:22:07	mauke	"read a line. if you've reached the end of the file, block forever"
2013-08-31 10:22:19	Kinnison	adnap: If you're just experimenting and want something which reads lines, runs a function over them, writes the result out, etc.  then look at interact
2013-08-31 10:22:23	Kinnison	@hoogle interact
2013-08-31 10:22:23	lambdabot	Prelude interact :: (String -> String) -> IO ()
2013-08-31 10:22:23	lambdabot	System.IO interact :: (String -> String) -> IO ()
2013-08-31 10:22:23	lambdabot	Data.ByteString interact :: (ByteString -> ByteString) -> IO ()
2013-08-31 10:22:28	adnap	Kinnison: I don't
2013-08-31 10:22:31	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 10:22:33	Kinnison	aah okay
2013-08-31 10:22:36	what-is-this	ski_: I see. Do you think this requires dependent types? (I've a similar question, which I'm pretty sure would require dependent types.)
2013-08-31 10:22:36	mauke	adnap: what could it possibly do?
2013-08-31 10:22:40	pharaun	pxqr: fair enough :)
2013-08-31 10:22:43	adnap	mauke: What is "it"?
2013-08-31 10:22:49	pharaun	i'll dig into http-types then
2013-08-31 10:22:50	mauke	I mean, I know what it actually does, but what choice does it have? (it = getLine)
2013-08-31 10:22:57	ski_	what-is-this : no. i think it requires linear types
2013-08-31 10:23:09	adnap	mauke: I don't know how to answer these questions. They're rhetorical
2013-08-31 10:23:24	mauke	they're not
2013-08-31 10:23:24	Kinnison	adnap: Your code has a bug -- if the input is empty, then getLine will throw an exception
2013-08-31 10:23:33	adnap	Kinnison: Thank you
2013-08-31 10:23:39	Kinnison	adnap: Always check the exit case first
2013-08-31 10:23:55	adnap	Kinnison: I didn't know getLine did that, and I'm reading from standard in, so I wouldn't know how to specify no input
2013-08-31 10:24:05	<--	corkexaminer (~chrisdorn@cpc4-brig17-2-0-cust142.3-3.cable.virginmedia.com) has quit (Ping timeout: 248 seconds)
2013-08-31 10:24:06	Kinnison	< /dev/null
2013-08-31 10:24:09	Kinnison	is an obvious way
2013-08-31 10:24:12	what-is-this	ski_: "linear types", TIL
2013-08-31 10:24:15	mauke	or press ctrl-d
2013-08-31 10:24:19	Kinnison	indeed
2013-08-31 10:24:27	knz	mauke, ski_: http://pastebin.com/fVjDw7CY -- thanks!
2013-08-31 10:24:32	mauke	The paste fVjDw7CY has been copied to http://lpaste.net/92360
2013-08-31 10:24:38	-->	eeezkil (~eeezkil@unaffiliated/eeezkil) has joined #haskell
2013-08-31 10:24:42	mauke	some possible choices: it could throw an IO exception (this is what it actually does), call 'error', or return an empty string
2013-08-31 10:24:45	adnap	Pressing Ctrl-d exits the program. Perhaps I didn't realize that...
2013-08-31 10:24:49	mauke	or your suggestion: it could simply not return, blocking forever
2013-08-31 10:24:53	<--	cleek_ (~cleek-hq@187.191.31.157) has quit (Quit: Saliendo)
2013-08-31 10:24:57	adnap	Is "eof.hs: <stdin>: hGetLine: end of file" an error?
2013-08-31 10:25:03	mauke	it's an exception
2013-08-31 10:25:11	 *	hackagebot crypto-pubkey 0.2.0 - Public Key cryptography  http://hackage.haskell.org/package/crypto-pubkey-0.2.0 (VincentHanquez)
2013-08-31 10:25:13	 *	hackagebot cprng-aes 0.5.0 - Crypto Pseudo Random Number Generator using AES in counter mode.  http://hackage.haskell.org/package/cprng-aes-0.5.0 (VincentHanquez)
2013-08-31 10:25:14	ski_	what-is-this : alternatively, you could try to settle for a dynamic check on the use-once (though that is probably bound to degrade to just use-at-most-once, see e.g. `call/1c', e.g. mentioned at <http://lists.gnu.org/archive/html/guile-devel/2001-03/msg00030.html>)
2013-08-31 10:25:17	mauke	or rather, the result of not catching the exception
2013-08-31 10:25:19	adnap	Okay
2013-08-31 10:25:25	mauke	you get an error message on stderr and the program exits
2013-08-31 10:25:32	--	Vorpal_ is now known as Vorpal
2013-08-31 10:26:21	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 10:26:47	ski_	what-is-this : linear types comes from linear logic, via the Curry-Howard correspondence
2013-08-31 10:27:57	ski_	what-is-this : also note that linear types are distinct from uniqueness types as in Clean and Mercury (which ensures that you can sometimes safely use update-in-place to construct a new value from an old one, since there are no other references to the old one)
2013-08-31 10:27:58	-->	sudoku (d953ae87@gateway/web/freenode/ip.217.83.174.135) has joined #haskell
2013-08-31 10:28:18	-->	newbie2_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 10:28:55	ski_	what-is-this : iirc, Wadler has some paper re linear types
2013-08-31 10:29:29	what-is-this	ski_: yep, "linear types can change the world" by him seems quite accessible.
2013-08-31 10:29:29	ski_	(though possibly also mentions (confuses with ?) uniqueness types)
2013-08-31 10:29:30	<--	eldariof (~CLD@pppoe-200-238-dyn-sr.volgaline.ru) has quit (Ping timeout: 268 seconds)
2013-08-31 10:29:31	<--	Sculptor_ (~Sculptor@89.110.199.224) has quit (Quit: Одлазим)
2013-08-31 10:29:47	newbie2_	well, insert from Data.List helped me. I'm not sure about good O( ), but i can later change adding
2013-08-31 10:30:01	<--	nominolo (~nominolo@158-79.63-188.cust.bluewin.ch) has quit (Ping timeout: 245 seconds)
2013-08-31 10:30:11	 *	hackagebot tls 1.1.3 - TLS/SSL protocol native implementation (Server and Client)  http://hackage.haskell.org/package/tls-1.1.3 (VincentHanquez)
2013-08-31 10:30:35	ski_	what-is-this : for uniqueness types, check out Clean (the other lazy functional language), and Mercury (the logic/functional language with a static mode and determinism system (in addition to type system))
2013-08-31 10:30:59	<--	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 10:31:08	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Client Quit)
2013-08-31 10:31:37	-->	corkexaminer (~chrisdorn@178.111.151.90) has joined #haskell
2013-08-31 10:32:11	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 10:32:28	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 10:32:59	-->	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has joined #haskell
2013-08-31 10:33:02	pxqr	hm, tls package seems pretty mature, does there are native https lib based on the tls?
2013-08-31 10:33:21	<--	danilo2 (b2257576@gateway/web/freenode/ip.178.37.117.118) has quit (Quit: Page closed)
2013-08-31 10:33:28	--	iulian_ is now known as iulian
2013-08-31 10:33:36	<--	iulian (iulian@d67-193-152-156.home3.cgocable.net) has quit (Changing host)
2013-08-31 10:33:36	-->	iulian (iulian@ubuntu/member/iulian) has joined #haskell
2013-08-31 10:34:00	<--	sudoku (d953ae87@gateway/web/freenode/ip.217.83.174.135) has quit (Quit: Page closed)
2013-08-31 10:34:01	<--	wole (~wole@88-105-53-125.dynamic.dsl.as9105.com) has quit (Quit: Nettalk6 - www.ntalk.de)
2013-08-31 10:35:26	-->	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has joined #haskell
2013-08-31 10:35:55	what-is-this	ski_: thanks for the pointers! linear types seems exactly the thing I want - though I'll probably need more time to completely grok it.
2013-08-31 10:35:57	<--	mcstar (~mcstar@adsl-89-132-40-74.monradsl.monornet.hu) has quit (Client Quit)
2013-08-31 10:38:07	-->	make_sense (~make_sens@178.124.126.144) has joined #haskell
2013-08-31 10:38:30	<--	Desheng3 (~Desheng@166.181.67.245) has quit (Ping timeout: 256 seconds)
2013-08-31 10:38:34	-->	wole (~wole@88-105-53-125.dynamic.dsl.as9105.com) has joined #haskell
2013-08-31 10:39:14	<--	ericmathison (~ericmathi@172-15-249-133.lightspeed.irvnca.sbcglobal.net) has quit (Quit: leaving)
2013-08-31 10:39:34	<--	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has quit (Ping timeout: 246 seconds)
2013-08-31 10:40:48	-->	ioanel (~Thunderbi@188.25.9.126) has joined #haskell
2013-08-31 10:41:06	ski_	what-is-this : see <http://www.mercurylang.org/> and <http://wiki.clean.cs.ru.nl/Clean> for those two languages
2013-08-31 10:41:17	-->	vobi (~vobi@2001:1a50:11:0:5f:8f:ac93:280) has joined #haskell
2013-08-31 10:41:54	<--	teodor98_ (~teodor@109.97.143.123) has quit (Ping timeout: 264 seconds)
2013-08-31 10:42:47	ski_	what-is-this : also lolli <http://www.lix.polytechnique.fr/~dale/lolli/>, a(n intuitionistic) linear-logic based logic programming language might be interesting (also see <http://www.cs.rmit.edu.au/lygon/> for a take on classical linear logic)
2013-08-31 10:42:48	-->	SoupE (~jloos@f055007221.adsl.alicedsl.de) has joined #haskell
2013-08-31 10:43:24	ski_	what-is-this : .. are you familiar with any logic programming language or technique ?
2013-08-31 10:44:09	newbie2_	one more newbie question. In http://pastebin.com/QThQMd1s, how do i use strike with damage parameter?
2013-08-31 10:44:10	mauke	The paste QThQMd1s has been copied to http://lpaste.net/92361
2013-08-31 10:44:15	what-is-this	ski_: no, unfortunately.
2013-08-31 10:44:51	<--	lurkorg (~alex@145.255.244.150) has quit (Quit: Leaving.)
2013-08-31 10:45:11	ski_	what-is-this : then it would possibly be simplest to start with Prolog
2013-08-31 10:45:11	 *	hackagebot tls 1.1.4 - TLS/SSL protocol native implementation (Server and Client)  http://hackage.haskell.org/package/tls-1.1.4 (VincentHanquez)
2013-08-31 10:45:13	-->	dcoutts_ (~dcoutts@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:45:13	<--	dcoutts_ (~dcoutts@cust.static.81-63-183-2.swisscomdata.ch) has quit (Changing host)
2013-08-31 10:45:13	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-08-31 10:45:13	 *	hackagebot tls-extra 0.6.5 - TLS extra default values and helpers  http://hackage.haskell.org/package/tls-extra-0.6.5 (VincentHanquez)
2013-08-31 10:45:26	ski_	there's a ##prolog channel here. there's also a #mercury channel
2013-08-31 10:45:53	-->	RThinker (~yegor@176.102.17.117) has joined #haskell
2013-08-31 10:46:07	<--	SoupEvil (~jloos@f049092198.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 10:46:20	what-is-this	ski_: prolog is certainly very high up on my should-learn-someday list. I was hoping though that I might be able to model this linear type construction somehow in haskell (since that's the thing I'm currently trying to learn).
2013-08-31 10:46:27	newbie2_	execStateT strike 100 initialState fails
2013-08-31 10:47:05	ski_	what-is-this : yes, the logic programming aspects of it are distinct (but related to) the typing aspects of it
2013-08-31 10:47:45	what-is-this	ski_: unfortunately, not being even slightly acquainted with type systems, I can't even tell at a glance whether what I want is even possible in haskell! perhaps I should invest more time in learning basics of type systems - any pointers to how does one go about learning type systems and type inference?
2013-08-31 10:47:58	ski_	newbie2_ : just guessing here, perhaps you meant `execStateT (strike 100) initialState' ?
2013-08-31 10:48:00	<--	jascase901 (~jason@ip184-187-176-25.sb.sd.cox.net) has quit (Ping timeout: 268 seconds)
2013-08-31 10:48:27	-->	Kaini (~kaini@unaffiliated/kaini) has joined #haskell
2013-08-31 10:48:44	 *	ski_ looks at the paste
2013-08-31 10:48:56	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-08-31 10:49:15	newbie2_	ski_: yes, thanks
2013-08-31 10:49:16	-->	Desheng2 (~Desheng@166.181.67.245) has joined #haskell
2013-08-31 10:49:18	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 264 seconds)
2013-08-31 10:49:23	ski_	newbie2_ : `d do ...' ?
2013-08-31 10:49:24	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-08-31 10:50:11	 *	hackagebot tls-debug 0.2.5 - Set of programs for TLS testing and debugging  http://hackage.haskell.org/package/tls-debug-0.2.5 (VincentHanquez)
2013-08-31 10:50:48	newbie2_	ski_: and one more question : is it possible to remove IO this code?
2013-08-31 10:50:49	-->	solrize (~solrize@unaffiliated/solrize) has joined #haskell
2013-08-31 10:51:06	newbie2_	ski_: and one more question : is it possible to remove IO _from_ this code?
2013-08-31 10:51:48	ski_	what-is-this : you could try "Polymorphic Type Inference" by Michael Schwartzbach in 1995-03 at <http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/TYPE/typeinf.pdf>, istr it being relatively easy-going
2013-08-31 10:51:53	-->	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has joined #haskell
2013-08-31 10:52:13	ski_	what-is-this : as to linear types, i suspect you can't have them in Haskell without extending the type system
2013-08-31 10:52:26	newbie2_	ski_: StateT requires a monad, so can i put some empty one?
2013-08-31 10:52:49	ski_	newbie2_ : it uses `putStrLn', so no, you can't remove `IO' from it
2013-08-31 10:53:04	arkeet	you might be able to move it elsewhere, though!
2013-08-31 10:53:09	newbie2_	ski_: forgot, ofc without that line
2013-08-31 10:53:21	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-31 10:53:26	newbie2_	ski_: just health -=
2013-08-31 10:53:32	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 10:53:37	-->	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 10:53:40	ski_	then you could have `StateT Game Identity ()' or `State Game ()' e.g.
2013-08-31 10:53:49	what-is-this	ski_: wow, that tutorial seems awesome,  thanks!
2013-08-31 10:53:49	arkeet	or Monad m => StateT Game m ()
2013-08-31 10:53:53	ski_	yes
2013-08-31 10:54:16	ski_	or `MonadState Game m => Damage -> m ()'
2013-08-31 10:54:18	-->	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 10:54:44	arkeet	or that yeah
2013-08-31 10:54:44	ski_	(obviously `Damage ->' would be present in some place in the earlier alternatives, as well=
2013-08-31 10:54:47	<--	Sixmsj (~Sixmsj@c-98-248-201-226.hsd1.ca.comcast.net) has quit (Quit: Sixmsj)
2013-08-31 10:54:47	ski_	)
2013-08-31 10:54:48	mm_freak	type IShouldReallyUseFunctionalReactiveProgrammingBecauseGlobalStateBasedGamesSuckT = StateT Game
2013-08-31 10:54:56	arkeet	:p
2013-08-31 10:55:34	ski_	i thought the point of the state monad was to not have global state ;P
2013-08-31 10:55:41	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 10:55:45	-->	Desheng3 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 10:55:52	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 10:56:04	<--	Desheng2 (~Desheng@166.181.67.245) has quit (Ping timeout: 256 seconds)
2013-08-31 10:56:17	newbie2_	well when i have smth like a game, there is no way except State Monad to code it, isn't it?
2013-08-31 10:56:24	arkeet	false!
2013-08-31 10:56:28	-->	Alice3 (~Alice@cpc18-grim14-2-0-cust478.12-3.cable.virginmedia.com) has joined #haskell
2013-08-31 10:56:41	arkeet	let mm_freak tell you about frp.
2013-08-31 10:56:47	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 10:57:00	knz	another question: how can I explicitly import the constructor ":." from Data.Array.Repa.Index? (http://hackage.haskell.org/packages/archive/repa/3.2.2.3/doc/html/Data-Array-Repa-Index.html)
2013-08-31 10:57:00	arkeet	I probably should have a look at netwire at some point.
2013-08-31 10:57:16	knz	I try to write import Data.Array.Repa.Index (:.) but that does not work
2013-08-31 10:57:18	arkeet	knz: import blah ((:.))
2013-08-31 10:57:22	knz	nope
2013-08-31 10:57:24	arkeet	yes
2013-08-31 10:57:26	arkeet	double parentheses
2013-08-31 10:57:38	arkeet	because "(:.)" is the name of the thing you're importing.
2013-08-31 10:57:50	mm_freak	ski_: StateT is global state
2013-08-31 10:57:59	mm_freak	when used in a game
2013-08-31 10:58:01	knz	arkeet: it's a constructor, not a function
2013-08-31 10:58:04	knz	t.hs:18:8: Not in scope: data constructor `:.'
2013-08-31 10:58:05	arkeet	I know!
2013-08-31 10:58:05	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 10:58:16	arkeet	ah. that imports the type, I guess.
2013-08-31 10:58:20	arkeet	((:.)(..))
2013-08-31 10:58:20	arkeet	;)
2013-08-31 10:58:21	<--	maxter (~maxter@gaffeless.chaperon.volia.net) has quit (Ping timeout: 245 seconds)
2013-08-31 10:58:30	ski_	newbie2_ : e.g. instead of a state-monad, you *could* use plain explicit state-passing/threading-style, as per "What the hell are Monads?" by Noel Winstanley in 1999 at <http://web.cecs.pdx.edu/~antoy/Courses/TPFLP/lectures/MONADS/Noel/research/monads.html> (before the monadic stuff is introduced)
2013-08-31 10:58:40	mm_freak	knz: ((:.)(:.))
2013-08-31 10:58:41	<--	corkexaminer (~chrisdorn@178.111.151.90) has quit (Ping timeout: 256 seconds)
2013-08-31 10:58:46	mm_freak	knz: ((:.)((:.)))
2013-08-31 10:58:49	knz	this syntax is awful :)
2013-08-31 10:58:53	mm_freak	a bit awkward, yeah
2013-08-31 10:58:58	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 10:59:00	ski_	mm_freak : depends on how far the state "reaches", no ?
2013-08-31 10:59:04	knz	:t (..)
2013-08-31 10:59:05	lambdabot	parse error on input `..'
2013-08-31 10:59:13	ski_	(though i agree with you in some sense)
2013-08-31 10:59:15	arkeet	import Module (Foo(..)) imports Foo and all its constructors.
2013-08-31 10:59:20	knz	aha
2013-08-31 10:59:21	knz	k
2013-08-31 10:59:21	knz	thx
2013-08-31 10:59:24	-->	hexagoxel_ (~hexagoxel@kiel-5f76868f.pool.mediaWays.net) has joined #haskell
2013-08-31 10:59:31	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 10:59:32	mm_freak	ski_: in a game it probably reaches very far =)
2013-08-31 10:59:46	mm_freak	likely over the entire application, but in the best case over a game session
2013-08-31 10:59:54	mm_freak	the latter isn't much of an improvement
2013-08-31 10:59:59	adnap	Well this is fun:
2013-08-31 11:00:06	adnap	>   [Act: 1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]  [1|(status)   2|(msgs)     3|#haskell   4|##japanese 5|#japa~utf8 6|#gentoo    7|#gentoo-ja   ]   [8|#anime     9|#hask~blah 0|##club~ntu q|#wanikani  w|##physics  e|#BDS~unity r|#darcs       ]   [t|#fsf       y|##law      u|##cars     i|##ele~nics o|#grub      p|##crypto   a|#ratpoison   ]
2013-08-31 11:00:07	lambdabot	  Not in scope: data constructor `Act'Not in scope: `status'
2013-08-31 11:00:08	lambdabot	 Perhaps you mea...
2013-08-31 11:00:17	adnap	Err, woops
2013-08-31 11:00:18	adnap	lol
2013-08-31 11:00:19	arkeet	what
2013-08-31 11:00:24	adnap	pted.
2013-08-31 11:00:31	adnap	> let f, g :: Int -> Int; f x = g x; g x = f x in f 2
2013-08-31 11:00:34	ski_	mm_freak : i just attempting to argue that you probably *could* localize the state in it quite some more
2013-08-31 11:00:37	Ghoul_	I find that every time I go to write a real world thing I start with a state transformer
2013-08-31 11:00:38	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:00:51	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 11:00:57	-->	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has joined #haskell
2013-08-31 11:01:00	adnap	I always get screwed over by the middle-click
2013-08-31 11:01:04	Ghoul_	and then realize I need a pipe transformer or something, so I wrap that in. Then I need IO, so I refractor that. Then I need EitherT or Error or something like that
2013-08-31 11:01:15	Ghoul_	and a few days of development later I have a 5-trans stack :(
2013-08-31 11:01:17	<--	kwos (~kwos@103.5.142.6) has quit (Quit: Computer has gone to sleep)
2013-08-31 11:01:21	arkeet	adnap: so what's fun?
2013-08-31 11:01:26	arkeet	oh.
2013-08-31 11:01:27	-->	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has joined #haskell
2013-08-31 11:01:29	adnap	arkeet: I was being sarcastic
2013-08-31 11:01:32	arkeet	that's not very surprising.
2013-08-31 11:01:33	arkeet	:p
2013-08-31 11:01:45	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:02:19	arkeet	mm_freak: is there a good introduction to netwire somewhere?
2013-08-31 11:02:20	adnap	arkeet: Well, this is "malicious". Even a safe module could write this
2013-08-31 11:02:31	arkeet	> fix id
2013-08-31 11:02:35	arkeet	adnap: and?
2013-08-31 11:02:36	ski_	Ghoul_ : with or without any `ContT' in it ?
2013-08-31 11:02:38	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:02:39	mm_freak	ski_: assuming that all the game objects depend on each other, there is really only one way to localize:  automata and proper data dependencies
2013-08-31 11:02:46	mm_freak	ski_: from there it's a small step to FRP =)
2013-08-31 11:03:06	<--	Desheng3 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:03:06	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 264 seconds)
2013-08-31 11:03:08	<--	arlinius (~eamlei@gateway/tor-sasl/maerline) has quit (Remote host closed the connection)
2013-08-31 11:03:11	mm_freak	arkeet: the netwire 5 tutorial is quite decent, but not finished yet
2013-08-31 11:03:11	<--	simukis_ (~simukis_@78.63.244.234) has quit (Remote host closed the connection)
2013-08-31 11:03:15	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 11:03:22	mm_freak	arkeet: http://hub.darcs.net/ertes/netwire
2013-08-31 11:03:32	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 11:03:36	arkeet	thanks
2013-08-31 11:03:41	arkeet	netwire 5, you say.
2013-08-31 11:03:43	Ghoul_	ski_: I don't use ContT, I've never learnt about it
2013-08-31 11:03:50	mm_freak	yeah =)
2013-08-31 11:03:53	mm_freak	it's not on hackage yet
2013-08-31 11:03:53	<--	Sagi (maarten@gateway/utwente.nl/session) has quit (Ping timeout: 240 seconds)
2013-08-31 11:04:03	mm_freak	the API is still not stabilized
2013-08-31 11:04:21	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 256 seconds)
2013-08-31 11:04:24	ski_	mm_freak : i think that's probably the case -- but you could possibly have lots of transforms of `State s' stuff into automata ?
2013-08-31 11:04:37	<--	roconnor_ (~roconnor@e120-pool-d89a7e29.brdbnd.voicenetwork.ca) has quit (Ping timeout: 248 seconds)
2013-08-31 11:04:38	-->	donri (~dag@unaffiliated/dagodenhall) has joined #haskell
2013-08-31 11:04:51	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 11:05:10	ski_	Ghoul_ : then you haven't had real fun with monad transformer stacks yet :)
2013-08-31 11:05:16	 *	hackagebot crypto-random 0.0.3 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.3 (VincentHanquez)
2013-08-31 11:05:29	mm_freak	ski_: local state transforms are pretty much what automata are, but with one important difference:  the state is invisible from outside
2013-08-31 11:05:31	-->	quchen (~quchen@port-92-195-112-6.dynamic.qsc.de) has joined #haskell
2013-08-31 11:05:33	adnap	arkeet: Could I write a program that tries to get a result from a function and gives up if the result is not returned in a certain amount of time?
2013-08-31 11:05:42	mm_freak	data Auto a b = forall s. Auto s ((a, s) -> (b, s))
2013-08-31 11:05:47	arkeet	adnap: lambdabot does it!
2013-08-31 11:06:11	ski_	mm_freak : ok, which is basically a synchonous stream processor
2013-08-31 11:06:19	mm_freak	ski_: exactly
2013-08-31 11:06:31	adnap	arkeet: Well, if my program interprets functions, I need some way to protect against functions which never return a result
2013-08-31 11:06:38	ski_	  data SSP a b = GetPut (a -> (b,SSP a b))
2013-08-31 11:06:38	arkeet	adnap: lambdabot does it!
2013-08-31 11:06:44	mm_freak	this is the usual definition, which is easier to work with:  newtype Auto a b = Auto (a -> (b, Auto a b))
2013-08-31 11:06:54	mm_freak	you can find it in 'arrows', 'machines' and some other libraries
2013-08-31 11:07:04	mm_freak	also yampa's SF is pretty close to it
2013-08-31 11:07:07	-->	maxter (~maxter@gaffeless.chaperon.volia.net) has joined #haskell
2013-08-31 11:07:18	adnap	arkeet: Do you think what I suggested is a good way, or is there a way to tell that a function is not doing anything productive for simple cases like the one I posted?
2013-08-31 11:07:29	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 11:07:43	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 11:07:45	arkeet	adnap: I missed your suggestion
2013-08-31 11:07:49	<--	what-is-this (4c15709a@gateway/web/freenode/ip.76.21.112.154) has quit (Ping timeout: 250 seconds)
2013-08-31 11:07:51	ski_	mm_freak : Fudgets are also related (though asynchronous, and with hidden I/O channels)
2013-08-31 11:07:54	<--	solrize (~solrize@unaffiliated/solrize) has quit (Ping timeout: 264 seconds)
2013-08-31 11:08:04	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 11:08:19	adnap	arkeet: Try to call the function and throw some kind of error/exception if the function does not return a result within some interval of time
2013-08-31 11:08:30	<--	bduc (~bduc@bduc.org) has quit (Quit: Reconnecting)
2013-08-31 11:08:31	augur	ski_: what an interesting type
2013-08-31 11:08:32	-->	Toxaris (~default@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 11:08:34	arkeet	adnap: well, lambdabot does that.
2013-08-31 11:08:37	-->	bduc (~bduc@bduc.org) has joined #haskell
2013-08-31 11:08:46	mm_freak	ski_: for games you want to make this abstraction as lightweight as possible…  Auto is a thin layer around regular haskell functions
2013-08-31 11:08:47	ski_	augur : `SSP' ?
2013-08-31 11:08:50	augur	ski_: yeah
2013-08-31 11:08:51	augur	hmm
2013-08-31 11:09:01	adnap	arkeet: Well, I don't know if lambdabot is as good as it gets
2013-08-31 11:09:07	arkeet	I don't know either.
2013-08-31 11:09:11	adnap	Okay
2013-08-31 11:09:14	augur	data SSP a b = SSP { get :: a -> b, put :: a -> SSP a b }
2013-08-31 11:09:15	arkeet	I can't think of any way to do better, though.
2013-08-31 11:09:27	adnap	> let f, g :: Int -> Int; f x = g x; g x = f x in f 2
2013-08-31 11:09:34	lambdabot	  mueval-core: Time limit exceeded
2013-08-31 11:09:38	mm_freak	augur: s/put/next/
2013-08-31 11:09:42	adnap	It seems like this should be detectable by analysis
2013-08-31 11:09:46	augur	mm_freak: even better!
2013-08-31 11:09:56	ski_	  data ASP a b = Get (a -> ASP a b) | Put b (ASP a b)
2013-08-31 11:10:01	augur	coalgebras! :D
2013-08-31 11:10:40	augur	at least i THINK this is a coalgebra. hmm
2013-08-31 11:10:42	mm_freak	add a time argument and you've got yampa's SF
2013-08-31 11:10:44	augur	is it?
2013-08-31 11:10:49	<--	skulls (~user@gateway/tor-sasl/skulls) has quit (Ping timeout: 240 seconds)
2013-08-31 11:10:56	mm_freak	newtype SF a b = SF (DTime -> a -> (b, SF a b))
2013-08-31 11:11:06	mm_freak	timeDelta :: DTime
2013-08-31 11:11:27	augur	it feels kinda coalgebraic
2013-08-31 11:11:36	ski_	augur,mm_freak : <ftp://ftp.cpsc.ucalgary.ca/pub/projects/charity/examples/misc/proc.ch> at <http://pll.cpsc.ucalgary.ca/charity1/www/home.html> is also basically the same thing
2013-08-31 11:11:47	<--	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has quit (Quit: q+)
2013-08-31 11:12:38	-->	wolfnn (~wolfnn@90.24.131.251) has joined #haskell
2013-08-31 11:12:47	ski_	adnap : detecting that in general is equivalent to solving the halting problem
2013-08-31 11:13:10	adnap	ski_: I know
2013-08-31 11:13:14	<--	elediaz (~eleazar@90.173.211.6) has quit (Quit: Saliendo)
2013-08-31 11:13:19	-->	dschoepe (~dschoepe@unaffiliated/dschoepe) has joined #haskell
2013-08-31 11:13:31	ski_	adnap : however, in some cases GHC can detect it using "blackholing", and then it prints something like "<loop>"
2013-08-31 11:13:48	adnap	ski_: The example I posted seems simple to detect
2013-08-31 11:13:56	ski_	(detecting when forcing a thunk wants to force the same thunk)
2013-08-31 11:14:08	-->	Caztiel (~me@unaffiliated/caztiel) has joined #haskell
2013-08-31 11:14:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:14:37	-->	mjo (~mjo@82-68-90-198.dsl.in-addr.zen.co.uk) has joined #haskell
2013-08-31 11:14:45	ski_	augur : your variant is (more or less) coalgebraic, at least
2013-08-31 11:15:17	 *	hackagebot crypto-random 0.0.4 - Simple cryptographic random related types  http://hackage.haskell.org/package/crypto-random-0.0.4 (VincentHanquez)
2013-08-31 11:15:31	ski_	  SSP a b = b ^ a * SSP a b ^ a
2013-08-31 11:16:04	-->	patrick_ (~patrick@24-52-232-230.cable.teksavvy.com) has joined #haskell
2013-08-31 11:16:04	ski_	augur : hm, i suppose we want some concept corresponding to "polynomial functor", maybe ?
2013-08-31 11:16:35	augur	ski_: well, its the fix of   SSPF a b x = a -> (b,x) ofcourse
2013-08-31 11:16:51	-->	Palmik (~palmik@120-49-80-78.tmcz.cz) has joined #haskell
2013-08-31 11:16:59	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-08-31 11:17:03	ski_	yes, the question is whether `a ->' there would be allowed
2013-08-31 11:17:21	ski_	(in the Charity `proc', they do that via exponentials=
2013-08-31 11:17:22	ski_	)
2013-08-31 11:17:30	<--	codesoup (~codesoup@69-165-142-157.dsl.teksavvy.com) has quit (Ping timeout: 245 seconds)
2013-08-31 11:17:30	augur	i think that makes it non-coalgebraic
2013-08-31 11:18:09	ski_	is `T = A + T^B' algebraic ?
2013-08-31 11:18:10	augur	because a coalgebra is an f :: a -> f a
2013-08-31 11:18:22	augur	ski_: well its not an algebra!
2013-08-31 11:18:23	ski_	(where `A' and `B' are constants)
2013-08-31 11:18:38	ski_	it's a polynomial functor
2013-08-31 11:18:39	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 11:18:57	augur	ski_: maybe, but that doesnt make it a coalgebra :)
2013-08-31 11:19:20	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 11:19:26	ski_	well, the issue there was algebraic, not coalgebraic
2013-08-31 11:19:36	-->	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has joined #haskell
2013-08-31 11:20:15	<--	dalaing (~dalaing@124-170-121-31.dyn.iinet.net.au) has quit (Quit: Leaving.)
2013-08-31 11:20:18	ski_	`<X,f>' is an `F'-algebra when `f : F X --> X'
2013-08-31 11:20:22	-->	Vendethiel (Vendethiel@172.102.116.78.rev.sfr.net) has joined #haskell
2013-08-31 11:20:37	ski_	(anarchic `F'-algebra, i.e.=
2013-08-31 11:21:50	ski_	augur : do you want any restrictions placed on the functor `F' ?
2013-08-31 11:22:48	augur	ski_: i dont want anything
2013-08-31 11:22:57	-->	merijn (~merijn@inconsistent.nl) has joined #haskell
2013-08-31 11:22:58	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 246 seconds)
2013-08-31 11:23:01	<--	tiksa (~tiksa@109-92-2-90.dynamic.isp.telekom.rs) has quit (Quit: Pozdrav)
2013-08-31 11:23:59	ski_	augur : it's not clear to me if you want to be talking about `F'-algebras or something else
2013-08-31 11:24:14	ski_	perhaps universal algebra stuff ?
2013-08-31 11:24:40	-->	Reite (~Reite@cm-84.215.72.51.getinternet.no) has joined #haskell
2013-08-31 11:24:52	augur	ski_: i dont want anything :)
2013-08-31 11:24:53	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:26:07	ski_	hm, iiuc, universal algebras only have polynomial functors (with natural numbers as exponents)
2013-08-31 11:26:37	ski_	augur : what is wrong with you !?
2013-08-31 11:27:07	<--	Betal (~Betal@unaffiliated/betal) has quit (Remote host closed the connection)
2013-08-31 11:27:20	augur	:(
2013-08-31 11:28:00	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 11:28:00	-->	nneko001__ (~save@masq241.gtn.ru) has joined #haskell
2013-08-31 11:28:10	-->	skulls (~user@gateway/tor-sasl/skulls) has joined #haskell
2013-08-31 11:29:08	ski_	anyway, you seemed to want to determine whether `SSP' was coalgebraic
2013-08-31 11:29:10	arkeet	!?
2013-08-31 11:29:47	augur	^!?
2013-08-31 11:29:49	ski_	so i was wondering in which sense you intended that term
2013-08-31 11:29:52	newbie2_	if i have smth like tetris with already done list of blocks, should i use state or it is better to use pure functionality?
2013-08-31 11:30:10	 *	ski_ hands augur some linear logic exponentials to play with
2013-08-31 11:30:13	augur	ski_: oh, i just meant it looked like a coalgebra sort of
2013-08-31 11:31:04	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 11:31:34	newbie2_	in fact, there is no global states. But my field have same layers, which number increases with new blocks. So, what can you advise me to do?
2013-08-31 11:31:47	haasn	edwardk: iterated needs to be made an indexed traversal
2013-08-31 11:31:50	haasn	then it would work
2013-08-31 11:32:04	<--	Beetny (~Beetny@ppp118-208-158-9.lns20.bne1.internode.on.net) has quit (Ping timeout: 240 seconds)
2013-08-31 11:32:07	haasn	indexed fold, even
2013-08-31 11:32:25	-->	Pimms (~Pimms@host86-166-165-37.range86-166.btcentralplus.com) has joined #haskell
2013-08-31 11:32:29	-->	Transhumanist (~Transhuma@ppp121-45-209-95.lns20.cbr1.internode.on.net) has joined #haskell
2013-08-31 11:33:02	<--	kludge` (~comet@unaffiliated/espiral) has quit (Ping timeout: 240 seconds)
2013-08-31 11:33:33	<--	Pimms (~Pimms@host86-166-165-37.range86-166.btcentralplus.com) has left #haskell
2013-08-31 11:33:56	 *	ski_ . o O ( "Clean Game Library" <http://cleangl.sourceforge.net/> )
2013-08-31 11:34:18	<--	patrick_ (~patrick@24-52-232-230.cable.teksavvy.com) has quit (Ping timeout: 264 seconds)
2013-08-31 11:35:55	augur	hmm
2013-08-31 11:36:09	augur	data ZeroF :: * where
2013-08-31 11:36:15	augur	er, sorry
2013-08-31 11:36:21	augur	data ZeroF :: * -> * where
2013-08-31 11:36:28	augur	how do you write a functor instance for this?
2013-08-31 11:36:52	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 256 seconds)
2013-08-31 11:36:53	augur	it's obviously a functor, with fmap being ALMOST the identity
2013-08-31 11:36:59	augur	but the types wont line up for the identity
2013-08-31 11:37:03	augur	so you couldnt do fmap x = x
2013-08-31 11:37:06	<--	pootler (~merv.hamm@94.198.124.172) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:34	<--	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has quit (Read error: Operation timed out)
2013-08-31 11:38:54	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 264 seconds)
2013-08-31 11:38:58	-->	kludge` (~comet@unaffiliated/espiral) has joined #haskell
2013-08-31 11:39:05	<--	epta (~yep@toje.ws) has quit (Quit: leaving)
2013-08-31 11:39:06	augur	i /guess/ you could do fmap x = undefined, because the only way itll get called is with a non-terminative value anyway
2013-08-31 11:39:09	augur	terminating*
2013-08-31 11:39:15	<--	elton_ (~emurillo5@c-71-198-108-179.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2013-08-31 11:39:22	augur	but that seems hacky
2013-08-31 11:39:29	augur	oh if only we had absurd patterns!
2013-08-31 11:39:29	-->	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has joined #haskell
2013-08-31 11:39:38	-->	pootler (~merv.hamm@94.198.124.172) has joined #haskell
2013-08-31 11:40:53	augur	ofcourse, type ZeroF = Const Zero works just as well, so im just being silly, but
2013-08-31 11:42:14	<--	aztek (~aztek@128-72-68-66.broadband.corbina.ru) has quit (Remote host closed the connection)
2013-08-31 11:42:36	-->	Eduard_Munteanu (~EduardMun@188.25.244.142) has joined #haskell
2013-08-31 11:44:17	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-08-31 11:44:54	<--	merijn (~merijn@inconsistent.nl) has quit (Ping timeout: 264 seconds)
2013-08-31 11:45:49	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 11:45:51	<--	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-31 11:45:58	<--	diadara_ (~diadara@115.249.18.25) has quit (Ping timeout: 245 seconds)
2013-08-31 11:46:27	augur	ok question
2013-08-31 11:47:47	augur	first some context: when showing that   Store a b  ~  forall f. Functor f => (a -> f a) -> f b  , we can reason as follows
2013-08-31 11:48:03	-->	MK_FG (~MK_FG@188.226.62.174) has joined #haskell
2013-08-31 11:48:03	<--	MK_FG (~MK_FG@188.226.62.174) has quit (Changing host)
2013-08-31 11:48:03	-->	MK_FG (~MK_FG@pdpc/supporter/active/mk-fg) has joined #haskell
2013-08-31 11:48:57	augur	we cant just store a b, because not every functor lets us inject into it, we cant store an f b because we dont know the functor, so all we can do is somehow use fmap as  fmap h :: f c -> f b  for some c
2013-08-31 11:49:22	-->	nooodl (~nooodl@91.176.171.15) has joined #haskell
2013-08-31 11:49:33	augur	but f c yields a similar problem, so our only recourse is to try c = a and h :: a -> b
2013-08-31 11:50:03	<--	wollw (davidshere@75-101-23-161.dsl.dynamic.sonic.net) has quit (Quit: leaving)
2013-08-31 11:50:09	augur	then we just need to supply an a, and we can get from a to f a to f b
2013-08-31 11:50:16	-->	arlinius (~eamlei@gateway/tor-sasl/maerline) has joined #haskell
2013-08-31 11:50:18	-->	jzl_ (~JzL@ec2-54-221-254-160.compute-1.amazonaws.com) has joined #haskell
2013-08-31 11:50:28	augur	this seems kind of forced by the fact that we're polymorphic on f.
2013-08-31 11:50:38	augur	does this emerge from the usual free theorems?
2013-08-31 11:51:25	augur	i cant imagine how it would, but i dont know. free theorems usually are about polymorphism over types not functors
2013-08-31 11:51:36	<--	gusto (~gusto@2001:470:1f0b:226:221:6aff:feb8:e0b2) has quit (Quit: leaving)
2013-08-31 11:52:10	augur	sorry, i think thats actually that b -> Store a b is iso to that. whatever. you get the question :P
2013-08-31 11:52:18	ski_	augur `fmap f z = case z of {}' ?
2013-08-31 11:52:36	augur	ski_: hmm! maybe that would work yeah
2013-08-31 11:52:42	augur	lovely!
2013-08-31 11:52:52	<--	flebron (~flebron@190.18.146.246) has quit
2013-08-31 11:52:53	ski_	you'll need a recent extension, i think
2013-08-31 11:52:56	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 11:53:10	-->	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-08-31 11:53:12	ski_	(obviously `EmptyDataDecls' ought to have supported this from the start)
2013-08-31 11:54:06	<--	jzl (~JzL@ec2-54-221-211-179.compute-1.amazonaws.com) has quit (Ping timeout: 264 seconds)
2013-08-31 11:55:17	-->	wollw (davidshere@unaffiliated/wollw) has joined #haskell
2013-08-31 11:55:18	 *	hackagebot hspec-meta 1.7.1 - A version of Hspec which is used to test Hspec itself  http://hackage.haskell.org/package/hspec-meta-1.7.1 (SimonHengel)
2013-08-31 11:55:38	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 11:55:46	joelteon	how do you test hspec-meta?
2013-08-31 11:55:51	<--	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 245 seconds)
2013-08-31 11:56:13	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 11:56:43	ski_	@free foo :: Functor f => (a -> f a) -> f b
2013-08-31 11:56:43	lambdabot	Extra stuff at end of line
2013-08-31 11:56:47	ski_	@free foo :: (a -> f a) -> f b
2013-08-31 11:56:47	lambdabot	Plugin `free' failed with: src/Lambdabot/Plugin/Haskell/Free/Type.hs:(152,17)-(160,45): Non-exhaustive patterns in case
2013-08-31 11:56:53	ski_	@free foo :: (forall a b. (a -> b) -> (f a -> f b)) -> (a -> f a) -> f b
2013-08-31 11:56:53	lambdabot	Plugin `free' failed with: src/Lambdabot/Plugin/Haskell/Free/Type.hs:(152,17)-(160,45): Non-exhaustive patterns in case
2013-08-31 11:57:16	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 246 seconds)
2013-08-31 11:57:18	-->	ts33kr (~ts33kr@193.108.171.89) has joined #haskell
2013-08-31 11:58:53	ski_	@free f :: [a] -> Maybe (a,a)
2013-08-31 11:58:53	lambdabot	$map_Maybe ($map_Pair g g) . f = f . $map g
2013-08-31 11:59:36	ski_	@free x :: Bool
2013-08-31 11:59:36	lambdabot	x = x
2013-08-31 11:59:40	ski_	@free x :: Maybe a
2013-08-31 11:59:41	lambdabot	$map_Maybe f x = x
2013-08-31 11:59:48	-->	xwl (~user@182.48.101.22) has joined #haskell
2013-08-31 12:00:06	<--	Thra11 (~Thra11@200.248.90.146.dyn.plus.net) has quit (Ping timeout: 264 seconds)
2013-08-31 12:00:18	 *	hackagebot io-streams 1.1.1.0 - Simple, composable, and easy-to-use stream I/O  http://hackage.haskell.org/package/io-streams-1.1.1.0 (GregoryCollins)
2013-08-31 12:00:20	 *	hackagebot hspec 1.7.1 - Behavior-Driven Development for Haskell  http://hackage.haskell.org/package/hspec-1.7.1 (SimonHengel)
2013-08-31 12:00:22	 *	hackagebot HTF 0.11.0.0 - The Haskell Test Framework  http://hackage.haskell.org/package/HTF-0.11.0.0 (StefanWehr)
2013-08-31 12:01:05	--	jzl_ is now known as jzl
2013-08-31 12:01:29	 *	ski_ tries to recall how to derive the free stuff
2013-08-31 12:01:41	-->	Desheng2 (~Desheng@166.182.66.48) has joined #haskell
2013-08-31 12:01:53	-->	Soft (~soft@dyn58-80.yok.fi) has joined #haskell
2013-08-31 12:01:53	--	Soft is now known as Soft-
2013-08-31 12:02:21	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 12:02:29	-->	matheus23 (~quassel@p4FDF3159.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 12:02:31	<--	jaimef (jaimef@dns.mauthesis.com) has quit (Excess Flood)
2013-08-31 12:05:37	-->	babu` (~user@122.172.245.2) has joined #haskell
2013-08-31 12:05:57	-->	ollehar (~Thunderbi@h138n10-u-a32.ias.bredband.telia.com) has joined #haskell
2013-08-31 12:06:40	-->	Bluuu (~a@unaffiliated/bluuu) has joined #haskell
2013-08-31 12:07:22	-->	tpsinnem (~tpsinnem@a91-156-149-49.elisa-laajakaista.fi) has joined #haskell
2013-08-31 12:07:29	-->	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has joined #haskell
2013-08-31 12:07:33	<--	copumpkin (~textual@unaffiliated/copumpkin) has quit (Ping timeout: 248 seconds)
2013-08-31 12:08:11	-->	copumpkin (~textual@unaffiliated/copumpkin) has joined #haskell
2013-08-31 12:08:15	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 12:11:00	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 12:12:17	-->	jaimef (jaimef@dns.mauthesis.com) has joined #haskell
2013-08-31 12:15:16	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Remote host closed the connection)
2013-08-31 12:16:49	-->	kuribas (~user@d54C430B0.access.telenet.be) has joined #haskell
2013-08-31 12:17:06	-->	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has joined #haskell
2013-08-31 12:19:09	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 12:19:18	<--	Desheng2 (~Desheng@166.182.66.48) has quit (Ping timeout: 245 seconds)
2013-08-31 12:19:29	<--	Transhumanist (~Transhuma@ppp121-45-209-95.lns20.cbr1.internode.on.net) has quit (Quit: KVIrc 4.1.3 Equilibrium http://www.kvirc.net/)
2013-08-31 12:19:29	-->	peter_zfs (~a@130.43.66.138.dsl.dyn.forthnet.gr) has joined #haskell
2013-08-31 12:20:30	<--	silasm (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Ping timeout: 268 seconds)
2013-08-31 12:20:41	-->	agjacome (~agjacome@95.62.120.94) has joined #haskell
2013-08-31 12:20:42	-->	epta (~yep@toje.ws) has joined #haskell
2013-08-31 12:21:15	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-08-31 12:21:54	<--	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has quit (Quit: Leaving)
2013-08-31 12:22:13	Ghoul_	ski_: is ContT useful or un-useful in making transformer stacks easier to manage?
2013-08-31 12:22:42	arkeet	neither. but it makes your transformer stack more awesome :>D
2013-08-31 12:22:58	arkeet	(I don't understand ContT.)
2013-08-31 12:23:11	-->	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has joined #haskell
2013-08-31 12:23:19	-->	ashnur (~ashnur@79.117.78.147) has joined #haskell
2013-08-31 12:23:33	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 248 seconds)
2013-08-31 12:23:35	jophish	Yo yo yo
2013-08-31 12:23:50	mm_freak	Ghoul_: if you imagine your sequence of computations as a directed graph, ContT basically allows you to pick any subtree of it and stick it to anywhere (where the types match)
2013-08-31 12:24:09	jophish	I'm writing a compiler for a small functional language with a similar syntax to haskell (Using Language.Haskell.Exts to parse it in fact).
2013-08-31 12:24:53	mm_freak	Ghoul_: two of the simplest things you can implement with it is 'goto', 'continue' and 'break' from imperative languages
2013-08-31 12:25:03	mm_freak	s/two/three/
2013-08-31 12:25:03	Ghoul_	Oh, so it's basically lego
2013-08-31 12:25:17	jophish	I'm planning to use Hindley–Milner for the internal representation. Where can people recommend looking for something similar to a Haskell->HM compiler
2013-08-31 12:25:18	newbie2_	in_line :: Integer -> [(Integer, Integer)] -> Integer -- returns 1 if integer is in one of tuples, otherwise 0. Note that tuples are sorted and not intersected
2013-08-31 12:25:18	 *	hackagebot xmlgen 0.6.1.0 - Fast XML generation library  http://hackage.haskell.org/package/xmlgen-0.6.1.0 (StefanWehr)
2013-08-31 12:25:22	mm_freak	lego for programs, yeah =)
2013-08-31 12:25:27	jophish	I don't think GHC uses HM any more
2013-08-31 12:25:27	newbie2_	what is the fasted way to do that?
2013-08-31 12:25:35	Ghoul_	That's cool I guess
2013-08-31 12:25:40	Ghoul_	is there a performance impact?
2013-08-31 12:25:54	<--	xwl (~user@182.48.101.22) has quit (Remote host closed the connection)
2013-08-31 12:25:58	mm_freak	newbie2_: a recursive function
2013-08-31 12:26:07	-->	bwr (~bwr@69.71.1.1) has joined #haskell
2013-08-31 12:26:11	-->	kayloos (~kayloos@dhcp-189-225.gjk.dk) has joined #haskell
2013-08-31 12:26:22	newbie2_	mm_freak: tuples are sorted, can i use it somehow?
2013-08-31 12:26:26	mm_freak	Ghoul_: ContT performs CPS transformation, which usually gives you even higher performance =)
2013-08-31 12:26:43	-->	Desheng2 (~Desheng@166.182.67.48) has joined #haskell
2013-08-31 12:26:45	mm_freak	Ghoul_: that's the main purpose of Codensity, which is ContT with the continuation effects hidden
2013-08-31 12:27:00	newbie2_	mm_freak: intuition says that exists O(1) algo
2013-08-31 12:27:04	mm_freak	newbie2_: you can use it to break early
2013-08-31 12:27:11	mm_freak	no, definitely not O(1)
2013-08-31 12:27:14	Ghoul_	Sounds cool
2013-08-31 12:27:15	mm_freak	it's still O(n)
2013-08-31 12:27:30	mm_freak	newbie2_: you may want to use Data.Set instead
2013-08-31 12:27:45	-->	ulfdoz (~mary@p5B388748.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 12:28:08	mm_freak	Ghoul_: once the enthusiasm is over you will realize that you don't really need ContT for anything =)
2013-08-31 12:28:26	mm_freak	Ghoul_: but it's cool to try out =)
2013-08-31 12:28:36	mm_freak	Ghoul_: in fact the best way to understand ContT is to implement it yourself
2013-08-31 12:28:36	Ghoul_	I'm trying to imagine how this "higher performance" thing will work
2013-08-31 12:28:41	-->	SingingBoyo (~brandon@154.5.184.233) has joined #haskell
2013-08-31 12:29:03	Ghoul_	I'm familiar with CPS but I can't imagine how it's going to make tightly knit code faster by lego-izing it
2013-08-31 12:29:23	mm_freak	Ghoul_: it gets rid of some memory operations
2013-08-31 12:29:29	mm_freak	consider a CPSed Either
2013-08-31 12:29:46	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 12:30:00	mm_freak	type Either e a = forall c. (e -> c) -> (a -> c) -> c
2013-08-31 12:30:25	mm_freak	when you apply this function it just calls the proper function right away…  it does not compare a tag in memory
2013-08-31 12:31:13	mm_freak	in general you won't notice much of a difference, but there are some algorithms where CPS can boost performance quite a bit
2013-08-31 12:31:13	Ghoul_	okay.
2013-08-31 12:31:15	<--	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Ping timeout: 245 seconds)
2013-08-31 12:31:33	<--	babu` (~user@122.172.245.2) has quit (Read error: Connection reset by peer)
2013-08-31 12:31:53	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 12:32:03	-->	Feuerbach (~feuerbach@cust.static.81-63-183-2.swisscomdata.ch) has joined #haskell
2013-08-31 12:32:24	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 12:32:31	-->	Okasu (~1@unaffiliated/okasu) has joined #haskell
2013-08-31 12:32:53	mm_freak	one huge drawback of ContT and related monad transformers is that it kills MonadFix
2013-08-31 12:34:30	-->	Beetny (~Beetny@ppp118-208-31-97.lns20.bne1.internode.on.net) has joined #haskell
2013-08-31 12:34:37	<--	bwr (~bwr@69.71.1.1) has quit (Quit: :q)
2013-08-31 12:35:24	-->	jarlg (~jarlg@c-178-73-207-244.anonymous.at.anonine.com) has joined #haskell
2013-08-31 12:35:35	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 12:36:13	-->	dropster (~Kim@0x3ec6efe6.inet.dsl.telianet.dk) has joined #haskell
2013-08-31 12:36:14	<--	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has quit (Quit: Lost terminal)
2013-08-31 12:37:03	-->	q66 (~quaker66@213.191.105.214) has joined #haskell
2013-08-31 12:39:18	Ghoul_	oh god
2013-08-31 12:39:24	Ghoul_	its horrifically confusing to read code that uses it
2013-08-31 12:39:52	-->	Lethalman (~lethal@ppp-249-30.28-151.libero.it) has joined #haskell
2013-08-31 12:40:21	aristid	ContT? just gotta link this: http://blog.sigfpe.com/2008/12/mother-of-all-monads.html
2013-08-31 12:41:18	-->	ski_ (~md9slj@t-2025-09.studat.chalmers.se) has joined #haskell
2013-08-31 12:42:31	<--	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 12:42:47	-->	Neqoxec (~Neqoxec@c-24-21-110-149.hsd1.or.comcast.net) has joined #haskell
2013-08-31 12:43:06	Ghoul_	thanks'
2013-08-31 12:43:19	<--	Jonno_FTW (~come@150.101.97.171) has quit (Ping timeout: 268 seconds)
2013-08-31 12:43:24	Ghoul_	hmm, typo, or I could really mean thanks-prime
2013-08-31 12:43:29	Ghoul_	an alternate extra strict variant of thanks
2013-08-31 12:43:52	aristid	surely you meant dthanks/dt
2013-08-31 12:44:02	-->	shintah (bebble@h-226-30.a336.priv.bahnhof.se) has joined #haskell
2013-08-31 12:44:16	arkeet	aristid: lol
2013-08-31 12:44:18	<--	azm (~x@unaffiliated/azm) has quit (Ping timeout: 264 seconds)
2013-08-31 12:44:38	Ghoul_	lol
2013-08-31 12:44:47	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 260 seconds)
2013-08-31 12:44:48	-->	kallisti (~adam@c-24-99-220-130.hsd1.ga.comcast.net) has joined #haskell
2013-08-31 12:46:14	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 12:46:26	-->	apfelbox (~apfelbox@HSI-KBW-085-216-010-183.hsi.kabelbw.de) has joined #haskell
2013-08-31 12:46:31	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 12:46:59	<--	eriksensei (~eriksense@546B12FD.cm-12-4a.dynamic.ziggo.nl) has quit (Quit: Leaving.)
2013-08-31 12:47:13	ski_	Ghoul_ : as i said, `ContT' is fun
2013-08-31 12:47:34	<--	Feuerbach (~feuerbach@cust.static.81-63-183-2.swisscomdata.ch) has left #haskell ("bye")
2013-08-31 12:47:37	newbie2_	can you give examples of usage RBTree?
2013-08-31 12:47:48	newbie2_	i mean syntax
2013-08-31 12:47:55	ski_	aristid : that must be equal to `hanks', right ?
2013-08-31 12:48:26	-->	Kiryx (~Kiryx@178.183.255.102.dsl.dynamic.t-mobile.pl) has joined #haskell
2013-08-31 12:48:36	<--	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has quit (Quit: Computer has gone to sleep.)
2013-08-31 12:49:03	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-08-31 12:49:49	<--	ashnur (~ashnur@79.117.78.147) has quit (Quit: WeeChat 0.4.1)
2013-08-31 12:50:14	-->	xwl (~user@182.48.101.22) has joined #haskell
2013-08-31 12:50:20	-->	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 12:50:31	-->	hkj (~textual@ti0035a380-dhcp1320.bb.online.no) has joined #haskell
2013-08-31 12:51:21	Ghoul_	ContT StateT sounds like fun fun fun
2013-08-31 12:51:30	<--	chairs_ (~Silas@173-228-7-128.dsl.static.sonic.net) has quit (Quit: Leaving)
2013-08-31 12:52:35	Ghoul_	now, the way to cheat thinking of real applications, now that I know how it works, is to hop on gist.github.com and search for ContT and let the knowledge flow in :P
2013-08-31 12:52:38	-->	zbcm (~zbcm@58.169.107.43) has joined #haskell
2013-08-31 12:53:17	newbie2_	and can i mao in RBTree?
2013-08-31 12:53:19	newbie2_	*map
2013-08-31 12:54:06	ski_	who broke `unmtl' ?
2013-08-31 12:54:14	ski_	@unmtl ReaderT r (WriterT w m) a
2013-08-31 12:54:14	lambdabot	r -> (WriterT w m) a
2013-08-31 12:55:07	ski_	newbie2_ : not sure how `RBTree' is defined ..
2013-08-31 12:55:19	 *	hackagebot network-multicast 0.0.9 - Simple multicast library  http://hackage.haskell.org/package/network-multicast-0.0.9 (AudreyTang)
2013-08-31 12:55:45	newbie2_	data RBTree a = Node Color a !(RBTree a) !(RBTree a) | Leaf    	-- Defined in `Data.Tree.RBTree'
2013-08-31 12:56:21	ski_	replace each value `x' of type `a' with `f x', where `f' is the function to map over it
2013-08-31 12:57:56	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 12:58:14	-->	newbie2 (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has joined #haskell
2013-08-31 12:59:27	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 12:59:54	<--	RThinker (~yegor@176.102.17.117) has quit (Quit: Leaving.)
2013-08-31 13:00:03	<--	newbie2_ (5d4be72d@gateway/web/freenode/ip.93.75.231.45) has quit (Ping timeout: 250 seconds)
2013-08-31 13:00:19	 *	hackagebot genprog 0.1.0.2 - Genetic programming library  http://hackage.haskell.org/package/genprog-0.1.0.2 (JanSnajder)
2013-08-31 13:00:53	-->	longqm (~longqm@219.224.160.186) has joined #haskell
2013-08-31 13:01:00	-->	senthilkumarv (~senthilku@14.140.43.50) has joined #haskell
2013-08-31 13:01:09	<--	make_sense (~make_sens@178.124.126.144) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 13:05:26	<--	senthilkumarv (~senthilku@14.140.43.50) has quit (Ping timeout: 240 seconds)
2013-08-31 13:06:02	<--	mrsolo (~mrsolo@c-50-148-169-160.hsd1.ca.comcast.net) has quit (Quit: This computer has gone to sleep)
2013-08-31 13:06:14	<--	xwl (~user@182.48.101.22) has quit (Remote host closed the connection)
2013-08-31 13:07:03	<--	vijaykiran (~user@80.113.145.6) has quit (Ping timeout: 260 seconds)
2013-08-31 13:09:36	<--	arborist (~arborist@e182017126.adsl.alicedsl.de) has quit (Ping timeout: 245 seconds)
2013-08-31 13:11:02	-->	RThinker (~yegor@176.102.17.117) has joined #haskell
2013-08-31 13:11:10	-->	bennofs (~benno@dslb-088-073-195-148.pools.arcor-ip.net) has joined #haskell
2013-08-31 13:11:47	-->	spion (~spion@unaffiliated/spion) has joined #haskell
2013-08-31 13:13:27	-->	soulofpeace (~soulofpea@175.156.232.233) has joined #haskell
2013-08-31 13:14:59	-->	ykm (~ykm@38.snat-111-91-51.hns.net.in) has joined #haskell
2013-08-31 13:15:45	<--	dropster (~Kim@0x3ec6efe6.inet.dsl.telianet.dk) has quit (Quit: Leaving.)
2013-08-31 13:16:00	<--	zhulikas (~meh@78-60-186-41.static.zebra.lt) has quit (Ping timeout: 268 seconds)
2013-08-31 13:16:10	-->	MindlessDrone (~MindlessD@HSI-KBW-134-3-130-100.hsi14.kabel-badenwuerttemberg.de) has joined #haskell
2013-08-31 13:17:31	<--	tpsinnem (~tpsinnem@a91-156-149-49.elisa-laajakaista.fi) has quit (Ping timeout: 245 seconds)
2013-08-31 13:17:37	<--	clog_ (~nef@bespin.org) has quit (Quit: ^C)
2013-08-31 13:17:49	-->	clog (~nef@bespin.org) has joined #haskell
2013-08-31 13:18:04	-->	mjboa (~mike@ip-178-203-192-18.unitymediagroup.de) has joined #haskell
2013-08-31 13:18:18	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:18:51	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-08-31 13:19:30	bmm	Hi. I'm trying to use the Lazy bytestring to murmur-hash a file per chunk. But I keep getting a Data.ByteString.Internal.ByteString where murmur-hash expects a Data.ByteString. How can I deal with that?
2013-08-31 13:19:33	-->	tauli (~tauli@p5B149BFD.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 13:19:38	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 13:19:54	donri	bmm: they're the same thing
2013-08-31 13:20:07	lpaste	bmm pasted “Not working murmurhash of a file” at http://lpaste.net/92362
2013-08-31 13:20:51	donri	bmm: paste error please :)
2013-08-31 13:21:08	bmm	donri: ok, will paste...
2013-08-31 13:21:13	ski_	hm, is there any composition type present in lambdabot ?
2013-08-31 13:21:32	lpaste	bmm annotated “Not working murmurhash of a file” with “Not working murmurhash of a file (annotation)” at http://lpaste.net/92362#a92363
2013-08-31 13:21:32	<--	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has quit (Quit: Leaving)
2013-08-31 13:21:35	Ghoul_	what does this do
2013-08-31 13:21:38	Ghoul_	fullTree (pred -> n) = do ...
2013-08-31 13:22:03	Ghoul_	particularly, the (pred -> n) thing. Never seen anything like that before
2013-08-31 13:22:04	mm_freak	Ghoul_: it's a view pattern
2013-08-31 13:22:15	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 13:22:21	mm_freak	same as:  fullTree n' | n <- pred n' = …
2013-08-31 13:22:35	mm_freak	or:  fullTree n' = let n = pred n' in …
2013-08-31 13:22:36	<--	arpunk (none@190.84.40.17) has quit (Read error: Connection reset by peer)
2013-08-31 13:23:20	bmm	donri: added the error to the paste earlier. If they are the same, I'm probably missing some kind of import, because I would expect the Bytestring instance of Hashable from the murmur library to be picked up.
2013-08-31 13:23:45	Ghoul_	oh wow
2013-08-31 13:23:47	Ghoul_	thats pretty cool
2013-08-31 13:23:49	-->	arpunk (none@190.84.40.17) has joined #haskell
2013-08-31 13:24:00	<--	path[l] (~vsi@c-67-188-10-68.hsd1.ca.comcast.net) has quit (Quit: path[l])
2013-08-31 13:24:06	mm_freak	Ghoul_: it requires an extension though…  i use lets and pattern guards
2013-08-31 13:24:11	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Ping timeout: 245 seconds)
2013-08-31 13:24:15	donri	bmm: yes it has those instances, which suggests you might have multiple versions of some packages installed. try: ghc-pkg list bytestring
2013-08-31 13:24:25	Ghoul_	extensions aren't scary
2013-08-31 13:24:41	Ghoul_	imho haskell 2010 is seriously lacking some type level stuff
2013-08-31 13:24:56	<--	Quadrescence (~quad@unaffiliated/quadrescence) has quit (Quit: This computer has gone to sleep)
2013-08-31 13:24:58	Ghoul_	Like, we have to pull out extensions even to implement a lot of prelude in a *nice* way
2013-08-31 13:25:18	bmm	donri: Ah, so I do! I thought cabal-dev would fix that, but I'll try a complete clean of cabal-dev and try again. Thanks for the tip!
2013-08-31 13:25:37	Ghoul_	Although it gets worrying when there's a longer list of extensions than module exports in your code :P
2013-08-31 13:25:49	donri	bmm: with cabal-dev i think you need to use "cabal-dev ghc-pkg"
2013-08-31 13:25:53	<--	xl (~xl@123.113.159.146) has left #haskell
2013-08-31 13:26:15	donri	also cabal-dev is still subject to the global package db
2013-08-31 13:26:43	-->	znode (~znode@14.117.30.140) has joined #haskell
2013-08-31 13:27:37	bmm	donri: did a complete clean and that fixed it! I used cabal-dev to install a newer version of bytestring earlier and that probably caused the problem. Thanks! I would have never caught that.
2013-08-31 13:27:41	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 13:27:44	mm_freak	Ghoul_: even my acme package from yesterday, single module, uses two extensions =)
2013-08-31 13:28:14	donri	bmm: i don't recommend upgrading core packages
2013-08-31 13:28:45	donri	bmm: actually i'd suggest putting "constraint: bytestring installed" (etc for all core packages, maybe even platform) in ~/.cabal/config
2013-08-31 13:29:27	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 260 seconds)
2013-08-31 13:29:41	donri	bmm: http://www.vex.net/~trebla/haskell/haskell-platform.xhtml#correction
2013-08-31 13:29:57	bmm	donri: I had to because I wanted a "chunks" function of the 0.10 which was not in 0.9. "rm -rf cabal-dev; cabal-dev install etc..." seems to fix it all. I'll look up the link you sent now.
2013-08-31 13:30:26	donri	bmm: well it's real messy to upgrade ghc's core libraries without upgrading ghc
2013-08-31 13:30:29	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 13:30:54	donri	bmm: if you want bytestring .10 upgrade ghc/platform
2013-08-31 13:31:17	-->	gienah (~mwright@gentoo/developer/gienah) has joined #haskell
2013-08-31 13:32:00	bmm	donri: I decided that I want a full laptop os upgrade to go with it, and the full laptop upgrade is still putting me of ;) Maybe next weekend :D
2013-08-31 13:32:12	-->	hajimeho_ (~hajimehos@p6e0be4.tokynt01.ap.so-net.ne.jp) has joined #haskell
2013-08-31 13:32:28	-->	azm (~x@unaffiliated/azm) has joined #haskell
2013-08-31 13:34:14	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 13:34:35	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 13:34:50	newbie2	what type should i use to cover Integer, Double and Rational?
2013-08-31 13:35:20	lpaste	valyagolev pasted “parse error” at http://lpaste.net/92364
2013-08-31 13:35:21	<--	asQuirreL (~asQuirreL@93-96-151-124.zone4.bethere.co.uk) has quit (Quit: Computer has gone to sleep.)
2013-08-31 13:35:22	valyagolev	hey guys, I'm trying Arrows and getting parse error, can you tell me what I'm doing wrong?
2013-08-31 13:35:25	 *	hackagebot miniutter 0.4.2 - Simple English clause creation from arbitrary words.  http://hackage.haskell.org/package/miniutter-0.4.2 (MikolajKonarski)
2013-08-31 13:35:48	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 13:35:52	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 13:36:11	valyagolev	nm! forgot -XArrows
2013-08-31 13:36:15	hari_	One of the things, I've noticed as a beginner is that tutorials in haskell tend to get complicated very quickly after the first couple of chapters.
2013-08-31 13:36:52	Eduard_Munteanu	Can you invert a parser in Parsec?
2013-08-31 13:37:00	-->	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has joined #haskell
2013-08-31 13:37:10	hari_	I mean, I hit a road block in this chapter: http://en.wikibooks.org/wiki/Haskell/YAHT/Type_advanced
2013-08-31 13:37:52	Eduard_Munteanu	i.e. given a parser, apply it and if it succeeds back out, and if it fails consume the input and return what has been consumed.
2013-08-31 13:38:25	-->	zett_zelett (~zett_zele@62.217.41.192) has joined #haskell
2013-08-31 13:38:26	-->	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has joined #haskell
2013-08-31 13:38:30	Eduard_Munteanu	hari_: what exactly?
2013-08-31 13:38:46	hari_	I could not understand the difference between type class and new type.
2013-08-31 13:38:58	<--	jarlg (~jarlg@c-178-73-207-244.anonymous.at.anonine.com) has quit (Read error: Operation timed out)
2013-08-31 13:39:26	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 13:39:41	Eduard_Munteanu	hari_: they're in a whole different category. Newtypes are types, while typeclasses are like sets of types with a common interface.
2013-08-31 13:39:54	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 13:39:56	<--	yacks (~py@103.6.159.99) has quit (Quit: Leaving)
2013-08-31 13:39:58	-->	kwos (~kwos@240.91.30.125.dy.iij4u.or.jp) has joined #haskell
2013-08-31 13:40:16	hari_	How does newtype differ from data?
2013-08-31 13:40:25	 *	hackagebot algebraic-classes 0.5 - Conversions between algebraic classes and F-algebras.  http://hackage.haskell.org/package/algebraic-classes-0.5 (SjoerdVisscher)
2013-08-31 13:40:39	Eduard_Munteanu	hari_: it only contains one value
2013-08-31 13:40:39	hpc	hari_: a newtype is restricted to one constructor of one field
2013-08-31 13:40:47	hpc	hari_: and it is the "same size" as the field
2013-08-31 13:41:11	hpc	hari_: so for instance, with "data Foo = Foo ()", Foo has the following distinct values
2013-08-31 13:41:14	Eduard_Munteanu	hari_: it is also represented more efficiently, since unlike data it does no packing/unpacking at runtime
2013-08-31 13:41:14	hpc	undefined
2013-08-31 13:41:15	hpc	Foo undefined
2013-08-31 13:41:17	hpc	Foo ()
2013-08-31 13:41:30	hpc	hari_: if it's a newtype, (Foo undefined) is semantically the same as undefined
2013-08-31 13:41:40	hari_	you mean newtype holds only one value?
2013-08-31 13:41:49	hpc	yes
2013-08-31 13:42:01	Eduard_Munteanu	hari_: that value can be a tuple or something else though
2013-08-31 13:42:47	hari_	I have trouble grasping the concept of isomorphic mentioned in the tutorial
2013-08-31 13:43:01	<--	zett_zelett (~zett_zele@62.217.41.192) has quit (Ping timeout: 256 seconds)
2013-08-31 13:43:14	hpc	isomorphic is fancy greek for "same shape"
2013-08-31 13:43:17	Eduard_Munteanu	hari_: isomorphic ~ "same shape". It means two types are equivalent.
2013-08-31 13:43:23	<--	madjestic (~madjestic@178-84-90-204.dynamic.upc.nl) has quit (Ping timeout: 240 seconds)
2013-08-31 13:43:32	hpc	in very non-mathematical language, it means you can go back and forth between A and B
2013-08-31 13:43:40	hiptobecubic	hari_, in boring, possibly imprecise terms it means you can convert between them without losing anything
2013-08-31 13:43:42	hpc	without any "changes"
2013-08-31 13:43:51	hari_	OK
2013-08-31 13:44:02	hiptobecubic	bool <-> int, are not, for example
2013-08-31 13:44:09	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 13:44:15	Eduard_Munteanu	E.g. data Foo a = Baz | Bar a  is isomorphic to  data Maybe a = Nothing | Just a
2013-08-31 13:44:23	hari_	So according to the tutorial, MyInt and Int are identical, except for that I define the ordering in MyInt
2013-08-31 13:45:00	kaw	Hey, I'm getting a bunch of errors about not being able to match "bytestring-0.9.2.1:Data.ByteString.Lazy.Internal.ByteString" with "Data.ByteString.Lazy.Internal.ByteString" -- what might cause this? Is there something wrong with my code or with my package installations?
2013-08-31 13:45:01	jdoles	hiptobecubic: bool and int could be isomorphic by mapping all even values to true and all odd values to false.
2013-08-31 13:45:13	hari_	Hmm,,,
2013-08-31 13:45:21	<--	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has quit
2013-08-31 13:45:25	 *	hackagebot free-functors 0.6 - Provides free functors that are adjoint to functors that forget class constraints.  http://hackage.haskell.org/package/free-functors-0.6 (SjoerdVisscher)
2013-08-31 13:45:43	hiptobecubic	jdoles, isn't that just a mapping? Not an isomorphism? How do you recover your int?
2013-08-31 13:45:44	Eduard_Munteanu	jdoles: that would only work for an infinitely countable Bool
2013-08-31 13:45:46	hpc	kaw: that's happening when you try to cabal-install?
2013-08-31 13:45:47	hari_	Maybe a is used to define functions that can return either Just a or nothing, right?
2013-08-31 13:45:57	hpc	likely going to be just a versions issue
2013-08-31 13:46:01	hiptobecubic	jdoles, Eduard_Munteanu, yes you'd need int -> [bool] or something
2013-08-31 13:46:02	kaw	hpc: No, it's happening when I try to ghc --make my program
2013-08-31 13:46:07	hpc	hmm
2013-08-31 13:46:26	<--	DrCode (~DrCode@gateway/tor-sasl/drcode) has quit (Remote host closed the connection)
2013-08-31 13:46:37	Eduard_Munteanu	hari_: yeah... you could also say functions which can fail.
2013-08-31 13:46:42	hpc	if it happened to me i would just re-install; that's beyond my ability to actually fix
2013-08-31 13:46:43	<--	arborist (~arborist@e182017126.adsl.alicedsl.de) has quit (Ping timeout: 260 seconds)
2013-08-31 13:46:46	hari_	OK
2013-08-31 13:46:49	hiptobecubic	kaw, anytime ghc gives me version numbers of packages, i have always borked my packages
2013-08-31 13:46:58	hari_	Understood.
2013-08-31 13:47:23	kaw	Ironically it's happening after I tried to clear out everything and reinstall because of another package problem
2013-08-31 13:47:32	kaw	So how do I do that properly, what should I clear exactly?
2013-08-31 13:47:39	<--	SingingBoyo (~brandon@154.5.184.233) has quit (Ping timeout: 260 seconds)
2013-08-31 13:47:45	hiptobecubic	you have two bytestrings installed i would guess? One older and one more recent and it's getting confused? I'm not particularly well versed in this, i just screw it up a lot
2013-08-31 13:47:58	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 13:48:09	Eduard_Munteanu	kaw: what did you clear?
2013-08-31 13:48:17	<--	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has quit (Client Quit)
2013-08-31 13:48:21	kaw	~/.ghc and ~/.cabal
2013-08-31 13:48:28	Eduard_Munteanu	That's fine. :/
2013-08-31 13:48:32	hpc	did you install any packages --global?
2013-08-31 13:48:34	Eduard_Munteanu	Well, unless you did --global installs.
2013-08-31 13:48:46	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:48:48	hiptobecubic	kaw, make a cabal file for your program and use cabal-dev :)
2013-08-31 13:48:49	hari_	How does one automatically reply to a person in XChat without typing the name fully?
2013-08-31 13:48:53	-->	DrCode (~DrCode@gateway/tor-sasl/drcode) has joined #haskell
2013-08-31 13:48:58	<--	longqm (~longqm@219.224.160.186) has quit (Quit: Leaving)
2013-08-31 13:48:58	hpc	hari_: start typing and press tab
2013-08-31 13:49:01	hiptobecubic	hari_, most IRC clients have tab completion
2013-08-31 13:49:04	hpc	h<tab> -> hari_
2013-08-31 13:49:05	kaw	Would that happen only if I explicitly passed --global, or would it happen automatically if I ran cabal as root?
2013-08-31 13:49:21	hari_	hpc,  thanks
2013-08-31 13:49:22	kaw	I'm pretty sure I haven't done the former but I have done the latter
2013-08-31 13:49:30	hpc	kaw: if you ran cabal as root, it would go into root's ~/.ghc and ~/.cabal
2013-08-31 13:49:37	hpc	which is usually /root
2013-08-31 13:49:52	kaw	Ooh, true. I'll try to delete those
2013-08-31 13:50:17	hpc	however, if you are installing conflicting things as root locally, then running things as a normal user
2013-08-31 13:50:20	hpc	those shouldn't interact
2013-08-31 13:50:31	hari_	is it permitted to ask how you folks first got into Haskell and how you became proficient with it?
2013-08-31 13:50:33	hiptobecubic	kaw, also i can't recommend running cabal (or anything else)  as root if you have no idea what it does :)
2013-08-31 13:50:42	-->	bmm_ (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 13:50:44	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Client Quit)
2013-08-31 13:50:53	hari_	And what motivated you to learn?
2013-08-31 13:50:59	kaw	Heh, I know, I know. I've been flailing a bit with this packageing stuff, honestly
2013-08-31 13:51:03	kaw	packaging*
2013-08-31 13:51:21	hpc	hari_: i saw someone write an entire webserver in 60 lines with no depends but TCP
2013-08-31 13:51:27	hpc	hari_: and then thought "i must learn this"
2013-08-31 13:51:44	hari_	hpc, wow, webserver in 60 lines of code... amazing
2013-08-31 13:52:10	hpc	i have since written mostly just ridiculous code
2013-08-31 13:52:19	hpc	acme-packages and stuff
2013-08-31 13:52:28	hiptobecubic	hari_, chasing wikipedia links starting at set theory. "Proficient" is too strong a word.
2013-08-31 13:52:37	<--	soulofpeace (~soulofpea@175.156.232.233) has quit (Ping timeout: 248 seconds)
2013-08-31 13:52:47	donri	or you can write a web server in a few hundred lines of code with some dependencies and serve some 450 000 requests per second with ghc HEAD ;)
2013-08-31 13:52:57	hari_	hiptobecubic, I find it so interesting to know how people discover things to learn
2013-08-31 13:53:00	kaw	Hm, no, it looks like nothing has been installed to /root
2013-08-31 13:53:39	<--	poppingtonic (~poppingto@212.49.88.103) has quit (Quit: ERC Version 5.3 (IRC client for Emacs))
2013-08-31 13:53:40	kaw	Using -v it seems clear that when I sudo cabal it installs to my own home directory, possibly with the wrong permissions, I don't know
2013-08-31 13:53:47	<--	sclv_ (c62d1326@gateway/web/freenode/ip.198.45.19.38) has quit (Ping timeout: 250 seconds)
2013-08-31 13:54:05	newbie2	Couldn't match type `Integer' with `GHC.Real.Ratio Integer'. How can i fix that?
2013-08-31 13:54:11	Eduard_Munteanu	hari_: funnily I've seen someone blogging about it, the first thought was "oh, another PHP/Ruby...". But a quick visit to Wikipedia proved that *very* wrong. :)
2013-08-31 13:54:17	hpc	newbie2: can you paste your code?
2013-08-31 13:54:19	hpc	@hpaste
2013-08-31 13:54:19	lambdabot	Haskell pastebin: http://lpaste.net/
2013-08-31 13:54:41	-->	diadara_ (~diadara@115.249.18.25) has joined #haskell
2013-08-31 13:54:52	hpc	newbie2: without knowing anything at all about your code, it kind of looks like you are trying to use modulo?
2013-08-31 13:54:55	hari_	Eduard_Munteanu, I also read about functional programming and then was interested in Haskell.
2013-08-31 13:54:57	-->	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 13:55:02	Eduard_Munteanu	Anyway I found purity and other things quite motivational just by being weird. :)
2013-08-31 13:55:08	-->	knigitz (~knigitz@pool-108-15-75-85.bltmmd.fios.verizon.net) has joined #haskell
2013-08-31 13:55:16	hari_	Not sure why I chose Haskell, though. Maybe because it was deemed "tough" to learn and also because it has a nice name. :)
2013-08-31 13:55:23	newbie2	hpc: just changed all my Integer type to Rational
2013-08-31 13:55:35	-->	ashnur (~ashnur@79.117.78.0) has joined #haskell
2013-08-31 13:55:36	zomg	Best article on type families: "Type Families and Pokemon"
2013-08-31 13:55:44	zomg	That was some brilliant execution in that one.
2013-08-31 13:55:45	zomg	:D
2013-08-31 13:57:23	newbie2	http://lpaste.net/92365
2013-08-31 13:57:42	newbie2	and when i type 4, for example, it blames me
2013-08-31 13:58:19	-->	tiffany (~kawaii@fl-76-5-40-101.dhcp.embarqhsd.net) has joined #haskell
2013-08-31 13:58:20	donri	:t 4 :: Rational
2013-08-31 13:58:21	lambdabot	Rational
2013-08-31 13:58:58	hpc	what's the body of the function?
2013-08-31 13:59:24	hari_	In classifying programming languages, where exactly does "functional" fall into? Is it at a level higher than Object Oriented and procedural? I assume "imperative" is used as a generic term for OOP and procedural
2013-08-31 13:59:40	-->	kofno_ (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 14:00:21	hpc	hari_: they're different styles, not really levels
2013-08-31 14:00:37	donri	hari_: http://www.info.ucl.ac.be/~pvr/paradigms.html :p
2013-08-31 14:00:47	zomg	the level of abstraction would probably depend on the libraries being used
2013-08-31 14:00:58	hpc	so to take an extreme example, assembly language
2013-08-31 14:01:01	<--	zbcm (~zbcm@58.169.107.43) has quit (Ping timeout: 268 seconds)
2013-08-31 14:01:03	hpc	is very low-level and procedural
2013-08-31 14:01:08	zomg	though maybe FP languages inherently have a higher level abstraction
2013-08-31 14:01:10	hpc	but not all procedural languages are low-level
2013-08-31 14:01:21	<--	nilsi (~nilsi@183.245.65.242) has quit (Read error: Connection reset by peer)
2013-08-31 14:01:25	hpc	and the reduceron is a theoretical cpu with a functional assembly language
2013-08-31 14:01:42	hari_	I forgot about "Declarative" paradigm :)
2013-08-31 14:01:49	-->	arborist (~arborist@e182017126.adsl.alicedsl.de) has joined #haskell
2013-08-31 14:01:51	hari_	Yes, I find that chart very interesitng.
2013-08-31 14:02:24	-->	nilsi (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 14:02:40	hari_	donri, Must take the time to digest that!
2013-08-31 14:03:04	-->	cads (~m@adsl-208-61-1-166.asm.bellsouth.net) has joined #haskell
2013-08-31 14:03:27	donri	hm there should be a version for type systems too somewhere...
2013-08-31 14:04:23	newbie2	:t 4
2013-08-31 14:04:23	lambdabot	Num a => a
2013-08-31 14:05:26	hari_	:t 4.0
2013-08-31 14:05:27	lambdabot	Fractional a => a
2013-08-31 14:05:29	<--	torkjak (~torkjak@gateway/tor-sasl/torkjak) has quit (Ping timeout: 240 seconds)
2013-08-31 14:05:52	hari_	:t (4/3)
2013-08-31 14:05:52	lambdabot	Fractional a => a
2013-08-31 14:06:09	ski_	"Declarative" is often construed to include both "Functional" and "Logic"
2013-08-31 14:06:38	Eduard_Munteanu	I wonder if SQL fits in any of those two.
2013-08-31 14:07:00	hari_	I wonder why C++ isn't on that chart.
2013-08-31 14:07:02	-->	torkjak (~torkjak@gateway/tor-sasl/torkjak) has joined #haskell
2013-08-31 14:07:11	donri	hari_: http://james-iry.blogspot.com/2010/05/types-la-chart.html
2013-08-31 14:07:11	hpc	C++ /is/ the chart
2013-08-31 14:07:22	companion_cube	SQL is some bastard logic programming
2013-08-31 14:07:47	aristid	companion_cube: no, it's bastard relational algebra:)
2013-08-31 14:07:56	companion_cube	which is a subset of logic ;)
2013-08-31 14:08:02	Eduard_Munteanu	C++ is a weird language.
2013-08-31 14:08:04	companion_cube	it's basically non recursive datalog
2013-08-31 14:08:23	Ghoul_	oooh pred/succ simulates n+k patterns
2013-08-31 14:08:25	Ghoul_	tats cool
2013-08-31 14:08:26	aristid	companion_cube: i believe relational algebra can do some things that datalog can't, but i might be mistaken
2013-08-31 14:08:43	Ghoul_	w/ ViewPatterns, sorry, should have mentioned that
2013-08-31 14:08:44	ski_	Eduard_Munteanu : SQL is sortof a logic/relational programming language
2013-08-31 14:08:45	companion_cube	right, maybe you need to add aggregates
2013-08-31 14:09:39	-->	GaXo (~other@94.25.229.71) has joined #haskell
2013-08-31 14:09:57	aristid	companion_cube: aggregates are not a primitive operation in relational algebra:)
2013-08-31 14:10:11	-->	fredmorcos (~fredmorco@46.218.17.109.rev.sfr.net) has joined #haskell
2013-08-31 14:10:13	-->	chatsiri_ (~chatsiri_@kuwinwpa-139-51.kuwin.ku.ac.th) has joined #haskell
2013-08-31 14:10:15	GaXo	Hello, i'm trying to use Data.Graph and i wonder is there some visualisation tool for Graph ADT?
2013-08-31 14:10:19	<--	Sgeo (~quassel@ool-ad034ea6.dyn.optonline.net) has quit (Read error: Connection reset by peer)
2013-08-31 14:10:21	companion_cube	but you cannot encode them, right?
2013-08-31 14:10:35	companion_cube	you need to add them as a primitive to get some features of SQL
2013-08-31 14:10:40	hari_	I had a nephew drop in and ask for help with C++ and I was stumped. The worst part is that, in our schools, they still use Borland Turbo C++ on DOS.
2013-08-31 14:10:46	companion_cube	apart from that, pure relational algebra should be less powerful than datalog
2013-08-31 14:10:55	hpc	wow, borland
2013-08-31 14:10:55	ski_	SQL,Datalog and other deductive database languages are based on a bottom-up sets-at-a-time interpretation of relational/logic programming, rather than the top-down tuple-at-a-time interpretation employed in languages like Prolog,Mercury,Oz,Goedel,Curry,Escher
2013-08-31 14:10:55	aristid	companion_cube: yeah but i was comparing relational algebra and datalog, not SQL and datalog
2013-08-31 14:10:59	tomejaguar	Here is a cool category theory approach to relational algebra: http://arxiv.org/pdf/1305.0297v1
2013-08-31 14:11:15	GaXo	By visualisation i mean (Graph -> IO ()) and within that IO i want either save pictuare of nodes in graph or display it.
2013-08-31 14:11:30	companion_cube	ski_: Datalog doesn't presuppose a top down or bottom up approach
2013-08-31 14:11:32	companion_cube	both are valid
2013-08-31 14:11:33	hpc	tomejaguar: can't tell if snarxiv... :P
2013-08-31 14:11:52	companion_cube	aristid: so I think datalog encompasses relational algebra
2013-08-31 14:12:19	-->	latermuse (~ron@112.201.131.21) has joined #haskell
2013-08-31 14:12:44	-->	cognominal (~cognomina@87-231-78-66.rev.numericable.fr) has joined #haskell
2013-08-31 14:12:45	tomejaguar	hpc: why, does it sound weird?
2013-08-31 14:12:46	ski_	companion_cube : ok, but i was under the impression that bottom-up was the main intended approach
2013-08-31 14:13:02	Eduard_Munteanu	hari_: same thing here usually... at least when I was in highschool
2013-08-31 14:13:16	--	k00mi_ is now known as k00mi
2013-08-31 14:13:16	aristid	companion_cube: hmm maybe
2013-08-31 14:13:22	ski_	(i know that it is possible to mix the two in the same system)
2013-08-31 14:13:22	hpc	tomejaguar: mostly "operad"
2013-08-31 14:13:37	aristid	companion_cube: and if you then extend datalog with aggregates, you can do everything that SQL can? MWAHAHAHA
2013-08-31 14:13:44	tomejaguar	An operad is a perfectly cromulent category theory gadget
2013-08-31 14:13:51	companion_cube	ski_: not always, for instance, datalog with negation is usually done with top-down
2013-08-31 14:13:57	companion_cube	(I think)
2013-08-31 14:14:12	companion_cube	top-down with tabbling, that is
2013-08-31 14:14:13	 *	Eduard_Munteanu hands out passes to ##categorytheory for everybody :D
2013-08-31 14:14:19	--	kofno_ is now known as kofno
2013-08-31 14:14:21	aristid	companion_cube: i guess a problem is that there isn't ONE datalog, eh?
2013-08-31 14:14:23	companion_cube	aristid: I don't know, there are also subqueries ^^
2013-08-31 14:14:25	aristid	datalog without negation
2013-08-31 14:14:29	hari_	Eduard_Munteanu, haha, they refuse to even use python in our schools for teaching
2013-08-31 14:14:30	<--	vijaykiran (~user@80.113.145.6) has quit (Ping timeout: 264 seconds)
2013-08-31 14:14:42	companion_cube	aristid: well, datalog is a logic language, so you can have several approaches
2013-08-31 14:14:48	fredmorcos	I have a couple of statements I made up after going through Monads in LYAH. I'd like to make sure they're somewhat correct. Is it okay to just toss them here?
2013-08-31 14:14:49	aristid	companion_cube: how are subqueries not possible in relational algebra? (which you said is a subset of what datalog can do)
2013-08-31 14:14:50	Eduard_Munteanu	Not that you need one, but it earns you a free Yoneda shake. :P
2013-08-31 14:15:07	aristid	companion_cube: datalog without negation isn't just a different approach, it's strictly less powerful
2013-08-31 14:15:14	GaXo	Trying Data.GraphViz with Data.Graph but i'm getting: No instance for (Data.Graph.Inductive.Graph.Graph GHC.Arr.Array) for (graphToDot nonClusteredParams g) where g is Graph. Can you help me?
2013-08-31 14:15:23	companion_cube	aristid: I'm just not sure it can be reduced cleanly to something without subqueries
2013-08-31 14:15:28	ski_	companion_cube : hm, i thought one required stratification, and then interpreted `p,not q' by set difference ?
2013-08-31 14:15:29	companion_cube	aristid: but how? What is less powerful?
2013-08-31 14:15:39	aristid	companion_cube: datalog without negation.
2013-08-31 14:15:44	Ghoul_	I found this benchmark on gist. It benchmarks CPS, ConstT and regular construction of a tree. CPS/ConstT are about 3 magnitudes faster than the regular construction and I can't figure out why http://lpaste.net/92366
2013-08-31 14:15:47	hiptobecubic	ineda shake too
2013-08-31 14:15:53	companion_cube	aristid: oh, like differences? right
2013-08-31 14:15:55	mjboa	hey can anyone enlighten me? What does fix from Data.Function do? Specifically, I'm trying to understand the defition of Iteratee in Data.Enumerator
2013-08-31 14:16:03	Eduard_Munteanu	hari_: yes, I think it's definitely not the best language to teach first. Especially since they never intend to teach any low-level or hw-specific stuff.
2013-08-31 14:16:08	companion_cube	but datalog with negation doesn't necessarily require stratification
2013-08-31 14:16:14	companion_cube	just the existence of stable models
2013-08-31 14:16:19	mjboa	also confusing me is the use of ($ m0) in the definition for bind for Iteratee
2013-08-31 14:16:26	-->	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has joined #haskell
2013-08-31 14:16:29	Eduard_Munteanu	mjboa: link?
2013-08-31 14:16:36	mjboa	http://hackage.haskell.org/packages/archive/enumerator/0.4.19/doc/html/src/Data-Enumerator-Internal.html
2013-08-31 14:16:45	aristid	companion_cube: yes... so that's where there are even different datalogs even if you have negation
2013-08-31 14:16:45	companion_cube	http://www.sciencedirect.com/science/article/pii/0743106694000285  for instance
2013-08-31 14:16:50	hari_	Eduard_Munteanu, I agree. C++ put me off OOP for a long time
2013-08-31 14:17:00	hari_	Even now I am prejudiced against OOP
2013-08-31 14:17:24	mjboa	all in the definition of bind for Iteratee a m
2013-08-31 14:18:13	-->	nexx (nexx@dslb-188-108-102-080.pools.arcor-ip.net) has joined #haskell
2013-08-31 14:18:13	<--	nexx (nexx@dslb-188-108-102-080.pools.arcor-ip.net) has quit (Changing host)
2013-08-31 14:18:13	-->	nexx (nexx@unaffiliated/xxen) has joined #haskell
2013-08-31 14:18:40	Eduard_Munteanu	mjboa: it's (fix $ do ...) then you apply m0 to that.
2013-08-31 14:18:41	<--	hiptobecubic (~john@unaffiliated/hiptobecubic) has quit (Quit: 00 PC LOAD LETTER)
2013-08-31 14:18:48	Eduard_Munteanu	s/do//
2013-08-31 14:18:58	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 14:19:12	Eduard_Munteanu	mjboa: you do understand the ($ m0) section, right?
2013-08-31 14:19:18	mjboa	not really
2013-08-31 14:19:22	ski_	mjboa : `fix $ \bind m -> ..bind..m..' is the same as `let bind m = ..bind..m.. in bind'
2013-08-31 14:19:24	mjboa	i mean it's reversed somehow
2013-08-31 14:19:32	hpc	mjboa: you know what ($) is?
2013-08-31 14:19:34	-->	Ov3rload1 (~Thunderbi@host230-59-dynamic.25-79-r.retail.telecomitalia.it) has joined #haskell
2013-08-31 14:19:36	hpc	@src ($)
2013-08-31 14:19:36	lambdabot	f $ x = f x
2013-08-31 14:19:36	mjboa	yea
2013-08-31 14:19:42	hpc	so take (flip ($))
2013-08-31 14:19:47	Eduard_Munteanu	:t ($ ?x)
2013-08-31 14:19:48	lambdabot	(?x::a) => (a -> b) -> b
2013-08-31 14:19:50	hpc	which is (x # f = f x)
2013-08-31 14:19:54	hpc	and then partially apply it to x
2013-08-31 14:20:03	mjboa	ok got that
2013-08-31 14:20:13	Eduard_Munteanu	:t (+ 3)
2013-08-31 14:20:14	hpc	now you have something of type (a -> b) -> b
2013-08-31 14:20:14	lambdabot	Num a => a -> a
2013-08-31 14:20:24	Taneb	Huh
2013-08-31 14:20:29	ski_	mjboa : and `($ m0) fix $ \bind m -> ..bind..m..' is the same as `let bind m = ..bind..m.. in bind m0'
2013-08-31 14:20:29	hpc	which is a function that takes a function from (a -> b), then applies an a to it
2013-08-31 14:20:37	Taneb	Github + Literate haskell + CPP doesn't mix well
2013-08-31 14:20:38	hpc	specifically the one you partially applied
2013-08-31 14:20:49	hpc	@let foo = ($ 10)
2013-08-31 14:20:50	lambdabot	 Defined.
2013-08-31 14:20:59	hpc	> foo (+ 13)
2013-08-31 14:21:04	Eduard_Munteanu	They chose to do that because the right side of fix is taken up by the definition itself.
2013-08-31 14:21:05	lambdabot	  23
2013-08-31 14:21:09	ski_	(er s/fix/$ fix/ in what i last said)
2013-08-31 14:21:10	hpc	> foo (* 6)
2013-08-31 14:21:11	aegis__	hey! could someone explain me how this code actually works: http://lpaste.net/7073542533552275456 ? I have an intuition on how it works but I don't understand why it doesn't get stuck as fib needs fib to build one more element of the list why itself needs fib which..
2013-08-31 14:21:13	Taneb	It seems like it's interpreting #ifdef as a header
2013-08-31 14:21:14	lambdabot	  60
2013-08-31 14:21:38	hpc	aegis__: okay, so
2013-08-31 14:21:42	companion_cube	ski_: even with stratified negation, I think datalog is more powerful than relational algebra
2013-08-31 14:21:49	hpc	aegis__: we begin with fib = 1 : 1 : <thunk>
2013-08-31 14:21:52	companion_cube	(you can do set difference with negation)
2013-08-31 14:22:02	hpc	aegis__: we force the first two elements, and nothing really happens
2013-08-31 14:22:13	mjboa	so what does fix do?
2013-08-31 14:22:14	ski_	companion_cube : hm, did i imply otherwise ?
2013-08-31 14:22:17	companion_cube	no
2013-08-31 14:22:18	-->	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has joined #haskell
2013-08-31 14:22:19	hpc	aegis__: now we force the next element, which is the head of (zip fib (tail fib))
2013-08-31 14:22:31	aegis__	hpc: so far so good, which is (1, 1)
2013-08-31 14:22:35	hpc	aegis__: so fib = 1 : 1 : <thunk> and tail fib = 1 : <thunk>
2013-08-31 14:22:42	Ghoul_	aegis__: theres a major win here with laziness
2013-08-31 14:22:52	hpc	aegis__: so we follow the definition of zip, which is to get (1, 1) yes
2013-08-31 14:22:54	mjboa	is it like a recursive let or something?
2013-08-31 14:22:55	Ghoul_	the first 2 elements are certain, and after that, they are only generated on-demand
2013-08-31 14:22:56	hpc	and add them to get two
2013-08-31 14:22:57	GaXo	Mayb i should not use Data.Graph.
2013-08-31 14:23:03	hpc	now fib = 1 : 1 : 2 : <thunk>
2013-08-31 14:23:09	GaXo	What do recomend me for graphs in haskell?
2013-08-31 14:23:10	companion_cube	ski_: but thanks, that made things clearer in my head about why negation is necessary
2013-08-31 14:23:19	<--	latermuse (~ron@112.201.131.21) has quit (Quit: pissed off)
2013-08-31 14:23:21	hpc	we force the next element of that thunk, which is 1 + 2
2013-08-31 14:23:28	-->	Wuzzy (~Wuzzy@p549FB8EB.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 14:23:30	hpc	because tail fib = 1 : 2 : <thunk>
2013-08-31 14:23:35	<--	nabilhassein (~user@ool-4a582b9e.dyn.optonline.net) has quit (Ping timeout: 260 seconds)
2013-08-31 14:23:52	hpc	there should really be an animation for this
2013-08-31 14:24:01	Eduard_Munteanu	mjboa: it lets one write recursive definitions without explicit recursion. E.g. fix $ \f -> ... f something  gives you something like   foo = ... foo something
2013-08-31 14:24:08	Eduard_Munteanu	:t fix
2013-08-31 14:24:09	lambdabot	(a -> a) -> a
2013-08-31 14:24:25	<--	cronject (~cronject@46.7.62.22) has quit (Read error: Connection reset by peer)
2013-08-31 14:24:29	<--	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has quit (Ping timeout: 240 seconds)
2013-08-31 14:24:51	aegis__	hpc: that's the part I am confused about; how did 2 get pushed to the result of fib? I mean, we are building a sequence in the first call to fib but the call to fib in the list comprehension is "another call", building another sequence, no? (I migh tbe unclear here --')
2013-08-31 14:24:51	Eduard_Munteanu	> fix (1:)
2013-08-31 14:24:52	lambdabot	  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
2013-08-31 14:25:04	-->	Nisstyre (~yours@oftn/member/Nisstyre) has joined #haskell
2013-08-31 14:25:31	ski_	companion_cube : is necessary for what ?
2013-08-31 14:25:36	Eduard_Munteanu	fix (1:) = fix (\recurse -> 1:recurse)
2013-08-31 14:25:41	<--	Beetny (~Beetny@ppp118-208-31-97.lns20.bne1.internode.on.net) has quit (Ping timeout: 268 seconds)
2013-08-31 14:25:41	Eduard_Munteanu	@src fix
2013-08-31 14:25:41	lambdabot	fix f = let x = f x in x
2013-08-31 14:26:16	int-e	Ghoul_: This is analogous to constructing lists: The 'Tree' version is akin to constructing a list of length n by appending n singleton lists; the CPS version is analogous to using a difference list.
2013-08-31 14:26:16	Eduard_Munteanu	That's a little complicated though.
2013-08-31 14:26:20	ski_	hpc : please, fibonacci begins with `0' :)
2013-08-31 14:26:20	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 14:26:24	companion_cube	ski_: I mean, datalog without negation isn't powerful enough, if it cannot simulate relational algebra
2013-08-31 14:26:27	Eduard_Munteanu	fix f = f (fix f)   is easier to comprehend.
2013-08-31 14:26:36	ski_	ok
2013-08-31 14:26:45	-->	ecr (~Thunderbi@205.175.97.165) has joined #haskell
2013-08-31 14:27:04	<--	ecr (~Thunderbi@205.175.97.165) has quit (Client Quit)
2013-08-31 14:27:07	ski_	  fix f = x where x = f x  -- is the version i prefer to read
2013-08-31 14:27:13	mjboa	alright i think im slowly comprehending it, thanks
2013-08-31 14:27:23	ski_	> fix (0 :)
2013-08-31 14:27:24	lambdabot	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...
2013-08-31 14:27:27	<--	GaXo (~other@94.25.229.71) has quit (Quit: leaving)
2013-08-31 14:27:46	int-e	Ghoul_: in particular, fullTree n will create n root nodes (and later traverse them), while the CPS version constructs only one.
2013-08-31 14:27:49	hpc	aegis__: getting into implementation details would be that fib is modified in place
2013-08-31 14:28:07	ski_	> (`fix` 12) $ \fib n -> case n of 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2)
2013-08-31 14:28:08	lambdabot	  144
2013-08-31 14:28:17	-->	Jonno_FTW (~come@9ch.in) has joined #haskell
2013-08-31 14:28:21	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 245 seconds)
2013-08-31 14:28:27	hpc	aegis__: every instance of "fib" in the definition is shared, so evaluating part of one leaves it evaluated for all of them
2013-08-31 14:28:29	-->	burp (~quassel@gateway/tor-sasl/paladin/x-27099049) has joined #haskell
2013-08-31 14:28:39	Kaini	Why is there no zipWithM_ with the function as last parameter?
2013-08-31 14:28:39	hpc	but even without the sharing you would just have a really slow fib
2013-08-31 14:28:44	int-e	Ghoul_: I guess the comment in the beginning says that fullTree n is O(n^2) and the other two versions are O(n). That's precisely what happens.
2013-08-31 14:28:54	Eduard_Munteanu	> ($ 12) $ fix $ \fib n -> case n of 0 -> 0; 1 -> 1; n -> fib (n-1) + fib (n-2)
2013-08-31 14:28:55	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 14:28:55	lambdabot	  144
2013-08-31 14:28:59	aegis__	hpc: ok, so there is really only one instance of the result of fib
2013-08-31 14:29:04	hpc	yeah
2013-08-31 14:29:25	-->	mkramer (~Adium@ip70-174-41-99.hr.hr.cox.net) has joined #haskell
2013-08-31 14:29:28	<--	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has quit (Remote host closed the connection)
2013-08-31 14:29:40	-->	kofno (~kofno@cpe-24-165-210-251.neo.res.rr.com) has joined #haskell
2013-08-31 14:29:41	-->	erkin (~PinkiePie@unaffiliated/erkin) has joined #haskell
2013-08-31 14:29:42	<--	sinclair|net (~chatzilla@ip-118-90-32-136.xdsl.xnet.co.nz) has quit (Quit: ChatZilla 0.9.90.1 [Firefox 23.0.1/20130814063812])
2013-08-31 14:29:53	aegis__	hpc: is there a name for this "property" ? I mean, if I want to check how another language treats this kind of sitution
2013-08-31 14:29:54	Eduard_Munteanu	Kaini: that'd be nice, yeah... like forM is for mapM.
2013-08-31 14:30:25	<--	nneko001__ (~save@masq241.gtn.ru) has quit (Quit: Konversation terminated!)
2013-08-31 14:30:27	-->	vijaykiran (~user@80.113.145.6) has joined #haskell
2013-08-31 14:30:30	hpc	aegis__: "sharing" is what you probably want
2013-08-31 14:31:04	Eduard_Munteanu	aegis__: also "memoization"
2013-08-31 14:31:18	-->	JobV (~Adium@adsl-69-208-70-86.dsl.klmzmi.ameritech.net) has joined #haskell
2013-08-31 14:31:31	aegis__	hpc: ok, thanks a lot for your explanations, it's much clearer now :-)
2013-08-31 14:32:03	hpc	aegis__: sharing isn't really important to the definition, btw
2013-08-31 14:32:03	Eduard_Munteanu	aegis__: though it's specific to non-strict languages, otherwise the order of evaluation is already fixed.
2013-08-31 14:32:11	<--	rishabhjain (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-08-31 14:32:15	-->	rishabhjain_ (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 14:32:20	mjboa	let f x = x + 1
2013-08-31 14:32:22	hpc	all it does is make it faster
2013-08-31 14:32:30	mjboa	how can I understand the type ($ f)
2013-08-31 14:32:33	-->	rodrigovidal (~rodrigovi@201.37.47.64) has joined #haskell
2013-08-31 14:32:57	Eduard_Munteanu	mjboa: ($ f) means "apply f to something (as an argument)"
2013-08-31 14:33:24	hpc	mjboa: to expand it out completely, ($ f) g = g (\x -> x + 1)
2013-08-31 14:33:42	aegis__	Eduard_Munteanu: makes sense
2013-08-31 14:34:09	bmm_	I'm getting a space overflow I don't understand. http://lpaste.net/92367 Should I create an issue for the murmur-hash library?
2013-08-31 14:34:09	mjboa	so it's (flip $) f?
2013-08-31 14:34:16	hpc	yes
2013-08-31 14:34:24	Eduard_Munteanu	(flip ($)) f
2013-08-31 14:34:42	hpc	all sections work that way
2013-08-31 14:34:48	hpc	(+ 5) = flip (+) 5
2013-08-31 14:35:03	mjboa	Eduard_Munteanu: that's where i was stuck, didn't put the parenthesis around the $
2013-08-31 14:35:06	mjboa	thanks
2013-08-31 14:35:08	hpc	(- 5) = negative 5 -- minus is kind of a silly one
2013-08-31 14:35:15	-->	_d3f (~gnu@ip-static-94-242-252-66.as5577.net) has joined #haskell
2013-08-31 14:35:23	Eduard_Munteanu	:t (flip $) ?f
2013-08-31 14:35:23	lambdabot	(?f::a -> b -> c) => b -> a -> c
2013-08-31 14:35:28	Eduard_Munteanu	:t (flip ($)) ?f
2013-08-31 14:35:29	lambdabot	(?f::b) => (b -> c) -> c
2013-08-31 14:35:34	aegis__	hpc: erm it might not be that part I was confused about then; what I mean is that when you have fib = 1 : 1 : 2 : [a+b, (a, b) <- zip fib (tail fib)], how does the list comprehension draws (1,2) out of it? how does it get access to this 2 we just pushed? if there is only one instance of the result of fib it makes sense but then it's not only a matter of speed; the function wouldn't work without it
2013-08-31 14:35:44	ski_	aegis__ : also, "memoization/tabling of functions" is a different thing
2013-08-31 14:36:01	Eduard_Munteanu	(flip $) f = flip $ f = flip f
2013-08-31 14:36:17	<--	nilsi (~nilsi@183.245.65.242) has quit (Remote host closed the connection)
2013-08-31 14:36:26	-->	tommi (~tommi@dynamic-adsl-78-13-79-92.clienti.tiscali.it) has joined #haskell
2013-08-31 14:36:30	mjboa	Eduard_Munteanu: is the ? there something for lambdabot? never seen that syntax before
2013-08-31 14:36:33	--	cynick_ is now known as cynick
2013-08-31 14:36:34	tommi	!list
2013-08-31 14:36:35	monochrom	tommi: http://lpaste.net
2013-08-31 14:36:49	-->	nilsi (~nilsi@46.165.220.223) has joined #haskell
2013-08-31 14:36:56	Eduard_Munteanu	mjboa: it's for implicit parameters, I'm misusing it to introduce and ask for f's type.
2013-08-31 14:36:57	-->	shesek (~shesek@IGLD-84-228-157-55.inter.net.il) has joined #haskell
2013-08-31 14:37:07	<--	bmm_ (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Quit: Ex-Chat)
2013-08-31 14:37:17	-->	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has joined #haskell
2013-08-31 14:37:21	<--	tommi (~tommi@dynamic-adsl-78-13-79-92.clienti.tiscali.it) has left #haskell
2013-08-31 14:37:35	Eduard_Munteanu	mjboa: so it's not a lambdabot thing, it's a GHC Haskell thing
2013-08-31 14:37:40	-->	Sculptor (~Sculptor@89.110.199.224) has joined #haskell
2013-08-31 14:37:58	<--	noam (~noam@213.57.201.130) has quit (Read error: Connection reset by peer)
2013-08-31 14:38:06	ski_	aegis__ `fib = 1 : 1 : 2 : [a+b, (a, b) <- zip fib (tail fib)]' is equivalent to `fib = 1 : fib2; fib2 = 1 : fib3; fib3 = 2 : fib4; fib4 = [a+b, (a, b) <- zip fib (tail fib)]'
2013-08-31 14:38:11	aegis__	mjboa: 7.8.3 http://www.haskell.org/ghc/docs/6.12.1/html/users_guide/other-type-extensions.html
2013-08-31 14:38:11	-->	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has joined #haskell
2013-08-31 14:39:17	aegis__	ski_: light bulb, thanks !
2013-08-31 14:39:22	ski_	aegis__ : then `fib4 = [a+b | (a, b) <- zip fib (tail fib)]', in the presence of the other definitions are equivalent to `fib4 = [a+b | (a, b) <- zip (1:1:2:fib4) (tail (1:1:2:fib4))]'
2013-08-31 14:39:32	ski_	which is equivalent to `fib4 = [a+b | (a, b) <-'
2013-08-31 14:39:34	ski_	er
2013-08-31 14:39:42	ski_	`fib4 = [a+b | (a, b) <-'
2013-08-31 14:39:46	 *	ski_ sighs
2013-08-31 14:39:53	-->	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 14:40:29	ski_	which is equivalent to `fib4 = [a+b | (a,b) <- zip (1:1:2:fib4) (1:2:fib4)]'
2013-08-31 14:40:46	<--	fredmorcos (~fredmorco@46.218.17.109.rev.sfr.net) has quit (Quit: Leaving)
2013-08-31 14:40:59	ski_	which is equivalent to `fib4 = (1 + 1) : (1 + 2) : [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:09	ski_	which is equivalent to `fib4 = 2 : 3 : [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:19	aegis__	ski_: you can stop there, the expansion made it clear :p thanks
2013-08-31 14:41:28	ski_	which is equivalent to `fib4 = 2 : fib5; fib5 = 3 : fib6; fib6 = [a+b | (a,b) <- zip (2:fib4) fib4]'
2013-08-31 14:41:31	ski_	&c.
2013-08-31 14:41:48	<--	kitallis (~kitallis@122.166.176.62) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2013-08-31 14:41:50	donri	fibs = 0 : 1 : (zipWith (+) <*> tail) fibs
2013-08-31 14:42:58	ski_	aegis__ : it would be enough here to provide the first two values initially (outside the list comprehension) -- noting that one usually starts with `0',`1' rather than `1',`1', that'd be `fibs = 0 : 1 : zipWith (+) fibs (tail fibs)'
2013-08-31 14:43:05	<--	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 256 seconds)
2013-08-31 14:43:54	arkeet	if you provide more than two, it's wrong.
2013-08-31 14:43:57	-->	deech (~user@71-85-232-25.dhcp.stls.mo.charter.com) has joined #haskell
2013-08-31 14:43:58	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 14:44:00	mjboa	I want to practice more with haskell but I find myself starved of ideas or worthwhile projects. What can I write that will lead me to a deeper understanding of haskell and possibly also creating something useful along the way?
2013-08-31 14:44:05	donri	@quote aztec
2013-08-31 14:44:05	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-08-31 14:44:06	arkeet	> fix $ \fibs -> 1:1:2:zipWith (+) fibs (tail fibs)
2013-08-31 14:44:07	lambdabot	  [1,1,2,2,3,4,5,7,9,12,16,21,28,37,49,65,86,114,151,200,265,351,465,616,816,...
2013-08-31 14:44:07	-->	CaptainK (~CaptainK@181.178.232.51) has joined #haskell
2013-08-31 14:44:09	ski_	aegis__ : so, due to "memoization of values", we so to speak get "internal names" generated for each list node, and so the whole generation "chases its own tail"
2013-08-31 14:44:11	arkeet	not very fibby.
2013-08-31 14:44:26	<--	Lethalman (~lethal@ppp-249-30.28-151.libero.it) has quit (Ping timeout: 256 seconds)
2013-08-31 14:44:37	deech	Does c2hs allow me to write custom functions to process enumerations?
2013-08-31 14:44:45	Ghoul_	int-e: thanks I /think/ I have some understanding now
2013-08-31 14:45:03	mjboa	How do i get to that point to where I can contribute to GHC for example? It seems like there's an enormous gap between reading Learn you a haskell/real world haskell and contributing to GHC or writing a useful library
2013-08-31 14:45:09	arkeet	> fix $ \fibs -> 1:1:1:1:1:zipWith (+) fibs (tail fibs)
2013-08-31 14:45:11	lambdabot	  [1,1,1,1,1,2,2,2,2,3,4,4,4,5,7,8,8,9,12,15,16,17,21,27,31,33,38,48,58,64,71...
2013-08-31 14:45:35	ski_	aegis__ : and what arkeet says
2013-08-31 14:45:55	<--	Bluuu (~a@unaffiliated/bluuu) has quit (Ping timeout: 256 seconds)
2013-08-31 14:46:00	arkeet	but yes, starting with 0,1 is good.
2013-08-31 14:46:15	<--	yopikh (~mand@79.175.167.200) has quit (Remote host closed the connection)
2013-08-31 14:46:26	arkeet	F_0 = 0, etc.
2013-08-31 14:46:48	zomg	mjboa: what do you code in other languages than haskell?
2013-08-31 14:47:04	ion	I thought everyone knows the Fibonacci sequence begins with -144, 89.
2013-08-31 14:47:05	arkeet	@localtime
2013-08-31 14:47:05	lambdabot	Local time for arkeet is 土 8月 31 05:46:03 2013
2013-08-31 14:47:07	arkeet	oops.
2013-08-31 14:47:31	mjboa	python
2013-08-31 14:47:38	arkeet	what do you do in python?
2013-08-31 14:47:47	mjboa	not much honestly
2013-08-31 14:47:51	mjboa	mostly mess around
2013-08-31 14:48:03	zomg	what was the reason you learned haskell (or the reason you learned python for that matter)
2013-08-31 14:48:21	mjboa	python initially because of django
2013-08-31 14:48:24	donri	> fix ((0:1:).(zipWith(+)`ap`tail))
2013-08-31 14:48:25	lambdabot	  The operator `:' [infixr 5] of a section
2013-08-31 14:48:25	lambdabot	     must have lower precedence th...
2013-08-31 14:48:36	-->	GaXo (~other@94.25.229.71) has joined #haskell
2013-08-31 14:48:36	donri	> fix ((0:).(1:).(zipWith(+)`ap`tail))
2013-08-31 14:48:38	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:48:42	GaXo	Hello?
2013-08-31 14:48:52	zomg	mjboa: well, you could do web apps with haskell then. A variety of nice libs are available for that
2013-08-31 14:49:10	<--	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has quit (Ping timeout: 245 seconds)
2013-08-31 14:49:12	mjboa	im a second year comp sci student now, had haskell in a programming course. found it fascinating
2013-08-31 14:49:16	arkeet	donri: why not <*> instead of `ap`
2013-08-31 14:49:29	donri	arkeet: because aztec :(
2013-08-31 14:49:30	<--	rodrigovidal (~rodrigovi@201.37.47.64) has quit (Ping timeout: 240 seconds)
2013-08-31 14:49:32	<--	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has quit (Ping timeout: 256 seconds)
2013-08-31 14:49:37	Eduard_Munteanu	How do you invert Parsec parsers? I'm having difficulty seeing how you take care not to overlap parsers.
2013-08-31 14:49:37	arkeet	but one character
2013-08-31 14:49:38	donri	but With destroys it
2013-08-31 14:49:39	GaXo	I want to represent my datastructure as graph and then visualize it. What library do you guys recommend?
2013-08-31 14:49:44	mjboa	been tying to understand category theory, type inference etc ever since
2013-08-31 14:49:47	arkeet	@quote zip`ap`tail
2013-08-31 14:49:47	lambdabot	quicksilver says: zip`ap`tail - the Aztec god of consecutive numbers
2013-08-31 14:50:04	mjboa	i find it much more compelling than python
2013-08-31 14:50:09	zomg	mjboa: yeah that's the reason I'm using haskell as well, it's more interesting than the other languages I know
2013-08-31 14:50:20	Eduard_Munteanu	GaXo: diagrams?
2013-08-31 14:50:23	donri	> fix((0:).(1:).(zipWith(+)<*>tail))
2013-08-31 14:50:24	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:50:25	<--	jack_rabbit (~kyle@c-98-253-60-75.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 14:50:28	Eduard_Munteanu	GaXo: I mean the 'diagrams' package.
2013-08-31 14:50:31	Eduard_Munteanu	@hackage diagrams
2013-08-31 14:50:31	lambdabot	http://hackage.haskell.org/package/diagrams
2013-08-31 14:50:35	donri	> fix((0:).(1:).zipWith(+)<*>tail)
2013-08-31 14:50:36	lambdabot	  Couldn't match type `[c0] -> [c0]' with `[a0]'
2013-08-31 14:50:36	lambdabot	 Expected type: [c0] -> [a0]...
2013-08-31 14:50:42	zomg	mjboa: when I was starting haskell I really just took whatever ideas I wanted to code and instead of using whatever else I knew I just tried doing it in haskell =)
2013-08-31 14:50:44	-->	tpsinnem (~tpsinnem@dsl-espbrasgw1-50dfb9-125.dhcp.inet.fi) has joined #haskell
2013-08-31 14:51:01	nooodl	> fix$(0:).(1:).(zipWith(+)<*>tail)
2013-08-31 14:51:02	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:51:16	<--	kcj (~casey@unaffiliated/kcj) has quit (Ping timeout: 245 seconds)
2013-08-31 14:51:35	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 260 seconds)
2013-08-31 14:51:48	mjboa	like what? all the random stuff i think of seems to have been done already and 100 times better at that and then i get the feeling im wasting my time
2013-08-31 14:52:21	GaXo	Eduard_Munteanu: Uh, sorry, visualising isn't purpose but a nice to have thing. Main aspects of desired graph library should be performance and it should be possible to store something in vertices.
2013-08-31 14:52:26	-->	hualet_deepin (~user@183.94.4.120) has joined #haskell
2013-08-31 14:52:31	ski_	> fix ((0 :) . scanl (+) 1)
2013-08-31 14:52:32	Eduard_Munteanu	Oh.
2013-08-31 14:52:35	lambdabot	  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
2013-08-31 14:52:53	zomg	mjboa: well it's hard to say what would be compelling for you, but I'd imagine there's some reason why you're studying compsci and languages
2013-08-31 14:52:56	<--	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has quit (Ping timeout: 245 seconds)
2013-08-31 14:53:03	GaXo	Data.Graph from containers is fine but lacking ease of visalisation and graph ops.
2013-08-31 14:53:16	<--	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-08-31 14:53:18	zomg	mjboa: I'd honestly just do whatever seems to be fun and interesting and not worry about if it has been done before or not. You'll learn something along the way for sure
2013-08-31 14:53:39	-->	hiratara (~hiratara@j081215.dynamic.ppp.asahi-net.or.jp) has joined #haskell
2013-08-31 14:53:41	mjboa	true
2013-08-31 14:54:40	GaXo	It's truly great to make graph easy as graphFromEdges' [(tile :: myCustomADT, 1 :: Int, [1])]. And FGL seems to be dead long ago...
2013-08-31 14:55:02	GaXo	Any FGL gurus around?
2013-08-31 14:55:10	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Remote host closed the connection)
2013-08-31 14:55:22	GaXo	What these labels(LNode, LVertex) are about?
2013-08-31 14:55:36	GaXo	Does main purose of labels is to store custom info?
2013-08-31 14:55:43	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 14:55:54	Ghoul_	int-e: so, could I say simply, that the tree is "double lazy" ?
2013-08-31 14:56:35	-->	Lethalman (~lethal@ppp-117-6.28-151.libero.it) has joined #haskell
2013-08-31 14:56:38	-->	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has joined #haskell
2013-08-31 14:57:10	-->	alem0lars (~alem0lars@87.19.244.180) has joined #haskell
2013-08-31 14:57:11	ski_	preflex: xseen ddarius
2013-08-31 14:57:13	preflex	 ddarius was last seen on freenode/#haskell 364 days, 3 hours, 54 minutes and 10 seconds ago, saying: > let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 "hello, world"
2013-08-31 14:57:17	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 14:57:21	-->	ps-auxw (~arneb@2001:470:c807:0:1532:4e5f:2ad3:4123) has joined #haskell
2013-08-31 14:57:21	-->	PJBoy (~PJBoy@cpc4-aztw24-2-0-cust253.aztw.cable.virginmedia.com) has joined #haskell
2013-08-31 14:57:37	arkeet	> let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 "hello, world"
2013-08-31 14:57:38	lambdabot	  "hell, wold"
2013-08-31 14:57:49	arkeet	> let f n = g (n-1) where g k [] = []; g 0 (_:xs) = g (n-1) xs; g k (x:xs) = x:g (k-1) xs in f 5 [0..]
2013-08-31 14:57:50	lambdabot	  [0,1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,20,21,22,23,25,26,27,28,30,31,32,3...
2013-08-31 14:57:58	arkeet	ah.
2013-08-31 14:58:49	GaXo	Well, FGL seems to be very odd library.
2013-08-31 14:59:01	GaXo	Why on earth i'm forced to label edges?
2013-08-31 14:59:25	<--	nilsi (~nilsi@46.165.220.223) has quit (Remote host closed the connection)
2013-08-31 14:59:36	int-e	Ghoul_: maybe, you'd have to explain what you mean by that.
2013-08-31 15:00:01	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Ping timeout: 245 seconds)
2013-08-31 15:00:50	<--	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has quit (Quit: Moving server)
2013-08-31 15:00:52	<--	rckrd (~root@c-03cce555.020-157-73746f39.cust.bredbandsbolaget.se) has quit (Ping timeout: 256 seconds)
2013-08-31 15:00:58	-->	glosoli (~glosoli@78-56-153-115.static.zebra.lt) has joined #haskell
2013-08-31 15:01:04	<--	glosoli (~glosoli@78-56-153-115.static.zebra.lt) has quit (Changing host)
2013-08-31 15:01:04	-->	glosoli (~glosoli@unaffiliated/glosoli) has joined #haskell
2013-08-31 15:01:26	<--	ndrei (~avo@83.142.149.227) has quit (Ping timeout: 256 seconds)
2013-08-31 15:01:34	Ghoul_	sorry I think I understood it wrong
2013-08-31 15:01:41	-->	nilsi_ (~nilsi@183.245.65.242) has joined #haskell
2013-08-31 15:01:53	Ghoul_	im having a hard time understanding how they behave differently because they look like they should produce the same structure
2013-08-31 15:02:44	-->	Jeanne-Kamikaze (~Jeanne-Ka@235.211.223.87.dynamic.jazztel.es) has joined #haskell
2013-08-31 15:03:46	<--	hualet_deepin (~user@183.94.4.120) has quit (Read error: Connection reset by peer)
2013-08-31 15:04:06	<--	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2013-08-31 15:04:39	<--	tailcalled (~tailcalle@87-59-205-110-dynamic.dk.customer.tdc.net) has quit (Ping timeout: 260 seconds)
2013-08-31 15:04:52	<--	bmm (~bram@a82-161-94-8.adsl.xs4all.nl) has quit (Quit: Ex-Chat)
2013-08-31 15:05:01	-->	stulli (~stulli@e180007005.adsl.alicedsl.de) has joined #haskell
2013-08-31 15:05:04	<--	AgentM (~AgentM@cpe-74-64-32-157.nyc.res.rr.com) has quit (Quit: Leaving.)
2013-08-31 15:05:04	<--	GaXo (~other@94.25.229.71) has quit (Quit: leaving)
2013-08-31 15:06:12	-->	ndrei (~avo@83.142.149.227) has joined #haskell
2013-08-31 15:06:15	<--	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has quit (Ping timeout: 245 seconds)
2013-08-31 15:06:21	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Quit: Leaving.)
2013-08-31 15:06:43	-->	favonia (~favonia@pdpc/supporter/student/favonia) has joined #haskell
2013-08-31 15:06:54	<--	jophish (~jophish@cpc2-oxfd18-2-0-cust473.4-3.cable.virginmedia.com) has quit (Remote host closed the connection)
2013-08-31 15:07:16	-->	SBauer (~SBauer@ip68-229-91-95.ri.ri.cox.net) has joined #haskell
2013-08-31 15:07:16	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:07:30	<--	Lethalman (~lethal@ppp-117-6.28-151.libero.it) has quit (Read error: Connection reset by peer)
2013-08-31 15:08:31	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:09:35	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 15:10:43	<--	RThinker (~yegor@176.102.17.117) has quit (Ping timeout: 260 seconds)
2013-08-31 15:11:51	-->	maattdd (~matthieu@modemcable120.201-160-184.mc.videotron.ca) has joined #haskell
2013-08-31 15:13:52	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 15:14:08	<--	erkin (~PinkiePie@unaffiliated/erkin) has quit (Quit: Ouch! Got SIGABRT, dying...)
2013-08-31 15:14:24	<--	chatsiri_ (~chatsiri_@kuwinwpa-139-51.kuwin.ku.ac.th) has quit (Ping timeout: 268 seconds)
2013-08-31 15:14:25	-->	pgiarrusso (~pgiarruss@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 15:15:25	<--	CaptainK (~CaptainK@181.178.232.51) has quit (Read error: Connection reset by peer)
2013-08-31 15:15:36	-->	CaptainK (~CaptainK@181.178.232.51) has joined #haskell
2013-08-31 15:15:36	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:15:45	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:16:02	Eduard_Munteanu	Hm, I think I figured it out: isNot = manyTill anyToken . try . (eof <|>)
2013-08-31 15:16:33	-->	mena (~mena@asgard.tauri.hu) has joined #haskell
2013-08-31 15:16:36	-->	phischu (~pschuster@p57BDE0B5.dip0.t-ipconnect.de) has joined #haskell
2013-08-31 15:16:39	<--	basdirks1 (~basdirks@5352A151.cm-6-3c.dynamic.ziggo.nl) has quit (Remote host closed the connection)
2013-08-31 15:16:54	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:17:03	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:17:03	<--	smarter (~smarter@ubuntu/member/smarter) has quit (Read error: Connection reset by peer)
2013-08-31 15:17:09	<--	joelb (~textual@c-76-102-13-163.hsd1.ca.comcast.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 15:17:33	-->	smarter (~smarter@ubuntu/member/smarter) has joined #haskell
2013-08-31 15:17:59	-->	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has joined #haskell
2013-08-31 15:18:39	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Ping timeout: 260 seconds)
2013-08-31 15:18:43	Eduard_Munteanu	Then sepBy could be something nicer like  sepBy' sep = sepBy (isNot sep) sep
2013-08-31 15:18:52	-->	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has joined #haskell
2013-08-31 15:19:37	<--	Spaceghost (~anhedonia@juancarlosbatman.diputadosmisiones.gov.ar) has quit (Changing host)
2013-08-31 15:19:37	-->	Spaceghost (~anhedonia@unaffiliated/spaceghost) has joined #haskell
2013-08-31 15:19:43	Eduard_Munteanu	Needs a better name than isNot though.
2013-08-31 15:21:29	-->	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has joined #haskell
2013-08-31 15:21:32	<--	_justjust (~justjust@146-52-43-55-dynip.superkabel.de) has quit (Client Quit)
2013-08-31 15:21:41	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 15:23:32	-->	valyagolev (~valyagole@109.205.248.1) has joined #haskell
2013-08-31 15:25:24	-->	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has joined #haskell
2013-08-31 15:25:32	 *	hackagebot final 0.1 - utility to add extra safety to monadic returns  http://hackage.haskell.org/package/final-0.1 (GergelyRisko)
2013-08-31 15:25:51	<--	edon (~user@albalug/edon) has quit (Ping timeout: 245 seconds)
2013-08-31 15:26:11	-->	RThinker (~yegor@176.102.5.205) has joined #haskell
2013-08-31 15:26:15	-->	migge (~marc@ip-130-180-117-113.unitymediagroup.de) has joined #haskell
2013-08-31 15:26:24	<--	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has quit (Remote host closed the connection)
2013-08-31 15:26:29	-->	kcj (~casey@unaffiliated/kcj) has joined #haskell
2013-08-31 15:27:19	-->	bananagram (~bot@c-76-30-158-226.hsd1.tx.comcast.net) has joined #haskell
2013-08-31 15:27:30	-->	hari_ (~hari@117.193.40.173) has joined #haskell
2013-08-31 15:29:31	<--	valyagolev (~valyagole@109.205.248.1) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2013-08-31 15:29:38	<--	coeus_ (~coeus@dslb-084-061-103-134.pools.arcor-ip.net) has quit (Client Quit)
2013-08-31 15:30:37	-->	nik_89 (~nik_89@unaffiliated/nniro) has joined #haskell
2013-08-31 15:30:43	-->	Vq (~vq@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-08-31 15:32:03	<--	migge (~marc@ip-130-180-117-113.unitymediagroup.de) has quit (Quit: Ex-Chat)
2013-08-31 15:33:23	-->	dgpratt (~dpratt71@pool-72-73-105-90.ptldme.east.myfairpoint.net) has joined #haskell
2013-08-31 15:33:49	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 15:33:53	turiya	hi
2013-08-31 15:34:47	-->	MrFahrenheit (~RageOfTho@77.221.25.95) has joined #haskell
2013-08-31 15:34:53	hari_	I actually find the wikipedia page on monad to be a pretty sound explanation of the concept. Seems like I am beginning to get a feel for the idea
2013-08-31 15:35:07	turiya	i am trying to use Data.Graph.Inductive.Graph but dont understand how to create a graph. The Graph is a type class so the type of my Graph should be Graph Gr, however this gives me an error
2013-08-31 15:35:08	-->	make_sense (~make_sens@178.124.126.144) has joined #haskell
2013-08-31 15:35:42	turiya	Predicate `Graph Gr' used as a type
2013-08-31 15:35:48	<--	danharaj (~Adium@ool-457a8edb.dyn.optonline.net) has quit (Quit: Leaving.)
2013-08-31 15:35:53	-->	phst` (~user@ppp-46-244-219-155.dynamic.mnet-online.de) has joined #haskell
2013-08-31 15:37:43	-->	jmbto (~jmbto@2a01:e35:2f15:c40:211:d8ff:fe7d:2c4a) has joined #haskell
2013-08-31 15:39:08	-->	de-Vri-es (~quassel@50709F23.static.ziggozakelijk.nl) has joined #haskell
2013-08-31 15:39:44	<--	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has quit (Quit: Computer has gone to sleep.)
2013-08-31 15:40:15	aegis__	turiya: you can't use a typeclass as a type constructor
2013-08-31 15:40:27	aegis__	:k Eq
2013-08-31 15:40:27	lambdabot	* -> Constraint
2013-08-31 15:40:50	aegis__	:k Maybe
2013-08-31 15:40:50	lambdabot	* -> *
2013-08-31 15:40:55	<--	agjacome (~agjacome@95.62.120.94) has quit (Quit: leaving)
2013-08-31 15:41:28	turiya	aegis__ : aha, thanks
2013-08-31 15:41:40	<--	ecube (~ecube@unaffiliated/ecube) has quit (Ping timeout: 245 seconds)
2013-08-31 15:41:40	turiya	it worked now
2013-08-31 15:42:10	<--	simukis_ (~simukis_@78.63.244.234) has quit (Quit: simukis_)
2013-08-31 15:42:19	Vendethiel	Is there a way to get a function as value ? ala Function1
2013-08-31 15:42:24	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 15:43:09	-->	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has joined #haskell
2013-08-31 15:43:23	-->	twanvl_ (~Twan@dhcp-077-250-086-217.chello.nl) has joined #haskell
2013-08-31 15:45:28	<--	Zenol (~Zenol@ip-91.net-81-220-73.rev.numericable.fr) has quit (Ping timeout: 246 seconds)
2013-08-31 15:45:53	haasn	is there a good way to write :: Foldable f => f a -> Tree a -- such that the resulting tree is as balanced as possible, and preserves the fold order?
2013-08-31 15:46:19	-->	talzeus (~studybot_@ai126248154025.9.tss.access-internet.ne.jp) has joined #haskell
2013-08-31 15:46:49	haasn	or [a] -> Tree a, really
2013-08-31 15:46:59	donri	Vendethiel: a function is a value
2013-08-31 15:47:05	<--	twanvl (~Twan@dhcp-077-250-086-217.chello.nl) has quit (Ping timeout: 268 seconds)
2013-08-31 15:47:21	Vendethiel	donri: yeah but it automatically gets called, doesn't it ?
2013-08-31 15:47:27	donri	type Function a b = a -> b
2013-08-31 15:47:29	donri	Vendethiel: no
2013-08-31 15:47:46	Vendethiel	mmh ok
2013-08-31 15:47:48	Jaxan	Vendethiel: it can only be called if there are arguments to call it with
2013-08-31 15:47:51	-->	normanrichards (~normanric@70.114.215.220) has joined #haskell
2013-08-31 15:48:03	donri	Vendethiel: only if you apply it to an argument and its evaluation is forced
2013-08-31 15:48:05	-->	sleepynate (~sleepynat@108-80-181-6.lightspeed.livnmi.sbcglobal.net) has joined #haskell
2013-08-31 15:48:08	-->	paullik (~paullik@unaffiliated/paullik) has joined #haskell
2013-08-31 15:48:09	<--	rishabhjain_ (~anonymous@14.139.122.114) has quit (Read error: Connection reset by peer)
2013-08-31 15:48:10	-->	rishabhjain (~anonymous@14.139.122.114) has joined #haskell
2013-08-31 15:48:13	-->	exobit (~exobit@pool-108-46-34-123.nycmny.fios.verizon.net) has joined #haskell
2013-08-31 15:49:10	Jaxan	> length [\n -> n+1, \n -> n*2]
2013-08-31 15:49:11	lambdabot	  2
2013-08-31 15:49:38	-->	fridim_ (~fridim@bas2-montreal07-2925317871.dsl.bell.ca) has joined #haskell
2013-08-31 15:49:45	Jaxan	Vendethiel: in this example a list of functions is used, but the functions arent called
2013-08-31 15:50:57	-->	JuanDaugherty (~Ren@cpe-76-180-168-166.buffalo.res.rr.com) has joined #haskell
2013-08-31 15:51:03	-->	talzeus__ (~studybot_@u911106.xgsnuf71.imtp.tachikawa.mopera.net) has joined #haskell
2013-08-31 15:52:00	-->	petrus (~petrus@unaffiliated/petrus) has joined #haskell
2013-08-31 15:52:31	<--	SLi (sliedes@lakka.kapsi.fi) has quit (Remote host closed the connection)
2013-08-31 15:52:59	<--	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has quit (Read error: Connection reset by peer)
2013-08-31 15:53:15	-->	mrkotfw (~mrkotfw@108-65-198-8.lightspeed.sntcca.sbcglobal.net) has joined #haskell
2013-08-31 15:53:28	<--	talzeus (~studybot_@ai126248154025.9.tss.access-internet.ne.jp) has quit (Ping timeout: 245 seconds)
2013-08-31 15:53:35	-->	mizu_no_oto (~textual@c-76-24-19-222.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 15:54:17	-->	void64 (~luke@37.17.113.245) has joined #haskell
2013-08-31 15:55:15	meretrix	Say I have "data X = A | B", "data Data = { x :: X, y :: Int }", and "data Pair = Pair Data Data".  Is there any way to constrain the Pair constructor to require the first argument has "x == A" and the second has "x == B"?
2013-08-31 15:55:36	meretrix	Is this a case where I need GADT?
2013-08-31 15:56:00	-->	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has joined #haskell
2013-08-31 15:56:30	-->	desc|zenbook (~heh@120.141.196.237) has joined #haskell
2013-08-31 15:56:48	-->	ski (~md9slj@t-2020-07.studat.chalmers.se) has joined #haskell
2013-08-31 15:56:54	-->	ye (~ye@c-68-38-23-215.hsd1.nj.comcast.net) has joined #haskell
2013-08-31 15:57:21	aegis__	meretrix: that wouldn't make much sense I believe; A and B are data constructors, not types
2013-08-31 15:57:34	-->	SLi (sliedes@lakka.kapsi.fi) has joined #haskell
2013-08-31 15:57:44	-->	cronject (~cronject@46.7.62.22) has joined #haskell
2013-08-31 15:57:59	-->	cfricke (~cfricke@192-0-193-76.cpe.teksavvy.com) has joined #haskell
2013-08-31 15:58:24	-->	kr1shnak (~kr1shnak@host86-176-98-114.range86-176.btcentralplus.com) has joined #haskell
2013-08-31 15:58:40	-->	mjs2600 (~mjs2600@west-7b-pat-1.oit.duke.edu) has joined #haskell
2013-08-31 15:58:57	-->	edon (~user@albalug/edon) has joined #haskell
2013-08-31 15:59:30	donri	data A; data B; data Data x = Data { x :: x, y :: Int }; data Pair = Pair (Data A) (Data B)
2013-08-31 15:59:30	<--	_d3f (~gnu@ip-static-94-242-252-66.as5577.net) has quit (Quit: WeeChat 0.4.1)
2013-08-31 15:59:53	donri	actually
2013-08-31 16:00:07	donri	data Data x = Data { y :: Int }
2013-08-31 16:00:28	-->	Fubar^ (~fubar@81-225-108-241-no123.tbcn.telia.com) has joined #haskell
2013-08-31 16:01:26	meretrix	Ok, I guess that makes sense. So A and B become types.
2013-08-31 16:01:27	donri	data Data x where DataA :: Int -> Data A; DataB :: Int -> Data B
2013-08-31 16:02:06	<--	mcw09 (~jack@c-98-206-162-0.hsd1.il.comcast.net) has quit (Ping timeout: 245 seconds)
2013-08-31 16:02:29	<--	simukis_ (~simukis_@78.63.244.234) has quit (Read error: Operation timed out)
2013-08-31 16:02:29	-->	kier (~kier@host86-184-169-153.range86-184.btcentralplus.com) has joined #haskell
2013-08-31 16:02:55	<--	hari_ (~hari@117.193.40.173) has left #haskell ("Ex-Chat")
2013-08-31 16:02:59	<--	mjs2600 (~mjs2600@west-7b-pat-1.oit.duke.edu) has quit (Ping timeout: 256 seconds)
2013-08-31 16:03:00	donri	but not sure this justifies a gadt though, data A = A; data Data x = Data { x :: x, y :: Int} -- now DataA == Data A
2013-08-31 16:03:02	<--	petrus (~petrus@unaffiliated/petrus) has quit (Quit: WeeChat 0.4.1)
2013-08-31 16:03:03	-->	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has joined #haskell
2013-08-31 16:03:41	<--	CaptainK (~CaptainK@181.178.232.51) has quit (Read error: Connection reset by peer)
2013-08-31 16:04:11	hpc	that's just an ordinary ADT with record syntax
2013-08-31 16:04:11	-->	scripty (~scripty@117.192.172.178) has joined #haskell
2013-08-31 16:04:27	-->	yacks (~py@103.6.159.99) has joined #haskell
2013-08-31 16:04:59	-->	u_ (~phillip@adsl-75-57-168-247.dsl.emhril.sbcglobal.net) has joined #haskell
2013-08-31 16:05:01	donri	exactly
2013-08-31 16:05:05	-->	flebron (~flebron@190.18.146.246) has joined #haskell
2013-08-31 16:05:44	-->	CaptainK (~CaptainK@181.38.17.90) has joined #haskell
2013-08-31 16:06:05	-->	ele_ (~quassel@90.173.233.56) has joined #haskell
2013-08-31 16:08:05	<--	CaptainK (~CaptainK@181.38.17.90) has quit (Read error: Connection reset by peer)
2013-08-31 16:08:32	<--	sjoerd_visscher (~sjoerd_vi@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 240 seconds)
2013-08-31 16:08:57	-->	_d3f (~gnu@ip-static-94-242-252-67.as5577.net) has joined #haskell
2013-08-31 16:08:59	<--	wavewave (513fb702@gateway/web/freenode/ip.81.63.183.2) has quit (Ping timeout: 250 seconds)
2013-08-31 16:09:03	-->	breck7 (~breck7@75-144-246-6-SFBA.hfc.comcastbusiness.net) has joined #haskell
2013-08-31 16:09:38	-->	sjoerd_visscher (~sjoerd_vi@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 16:10:18	<--	nominolo (~nominolo@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-08-31 16:10:18	<--	lemao (~lemao@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 264 seconds)
2013-08-31 16:10:27	<--	Toxaris (~default@cust.static.81-63-183-2.swisscomdata.ch) has quit (Ping timeout: 260 seconds)
2013-08-31 16:10:34	<--	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has quit (Ping timeout: 256 seconds)
2013-08-31 16:10:44	-->	Y-Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has joined #haskell
2013-08-31 16:11:23	<--	Wizek (~Wizek@catv-80-98-252-30.catv.broadband.hu) has quit (Ping timeout: 245 seconds)
2013-08-31 16:11:30	<--	eis_ (~eis@109.197.218.46) has quit (Ping timeout: 264 seconds)
2013-08-31 16:11:34	-->	lurkorg (~alex@145.255.244.150) has joined #haskell
2013-08-31 16:11:50	-->	nilg (~user@77.70.2.229) has joined #haskell
2013-08-31 16:11:58	-->	dropster (~Kim@62.198.239.230) has joined #haskell
2013-08-31 16:12:16	-->	simukis_ (~simukis_@78.63.244.234) has joined #haskell
2013-08-31 16:13:06	<--	ijp (~user@host31-50-107-143.range31-50.btcentralplus.com) has left #haskell ("(prompt (begin (control f (f 0) (f 0)) (control f (f 0) (f 0))))")
2013-08-31 16:13:20	ski_	  data A = MkA; data B = MkB
2013-08-31 16:13:23	-->	ersran9 (~quassel@unaffiliated/ersran9) has joined #haskell
2013-08-31 16:13:28	ski_	  data Data :: * -> *
2013-08-31 16:13:30	ski_	    where
2013-08-31 16:13:38	ski_	    DataA {y :: Int} :: Data A
2013-08-31 16:13:46	ski_	    DataB {y :: Int} :: Data B}
2013-08-31 16:13:50	ski_	  data Pair = MkPair (forall a. a -> Data a)
2013-08-31 16:14:18	<--	Y_Less (Y_Less@2a01:7e00::f03c:91ff:fe69:c328) has quit (Ping timeout: 264 seconds)
2013-08-31 16:14:39	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Quit: ampersand27017)
2013-08-31 16:14:39	ski_	hm, actually, the last one doesn't work
2013-08-31 16:14:59	donri	also i think they're changing record gadt syntax
2013-08-31 16:15:02	-->	refried_ (~refried_@166.205.66.195) has joined #haskell
2013-08-31 16:15:04	-->	voxpopuli (~fanservic@c-24-3-22-132.hsd1.pa.comcast.net) has joined #haskell
2013-08-31 16:15:07	<--	scooty-puff (~andy@97-116-36-152.mpls.qwest.net) has quit (Ping timeout: 260 seconds)
2013-08-31 16:15:07	ski_	donri : to what ?
2013-08-31 16:15:08	-->	choccow (~user@p5067-ipbfp302sizuokaden.shizuoka.ocn.ne.jp) has joined #haskell
2013-08-31 16:15:10	<--	ykm (~ykm@38.snat-111-91-51.hns.net.in) has quit (Quit: Leaving.)
2013-08-31 16:15:13	donri	but again, i don't think you need a gadt in this simple case
2013-08-31 16:15:23	 *	haasn wonders how many people actually genuinely use the operators like <.&.~ in lens
2013-08-31 16:15:33	 *	hackagebot aws 0.8.0 - Amazon Web Services (AWS) for Haskell  http://hackage.haskell.org/package/aws-0.8.0 (AristidBreitkreuz)
2013-08-31 16:15:35	-->	Makoryu (~bloodgog@pool-74-104-128-81.bstnma.fios.verizon.net) has joined #haskell
2013-08-31 16:15:35	 *	hackagebot algebraic-classes 0.5.1 - Conversions between algebraic classes and F-algebras.  http://hackage.haskell.org/package/algebraic-classes-0.5.1 (SjoerdVisscher)
2013-08-31 16:15:36	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 16:16:03	<--	refried_ (~refried_@166.205.66.195) has quit (Client Quit)
2013-08-31 16:16:52	-->	Apocalisp (~textual@c-174-62-237-65.hsd1.ma.comcast.net) has joined #haskell
2013-08-31 16:16:55	aristid	(almost exactly one year after 0.7.0, aws 0.8.0 is out :D)
2013-08-31 16:17:04	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 16:17:30	aristid	how long does hackage need these days to get to build packages?:)
2013-08-31 16:17:45	<--	turiya (~turiya@14.96.74.172) has quit (Quit: Leaving)
2013-08-31 16:17:49	deech	What is the recommended way of binding a C enum to Haskell? In the binding I'm working on the enum isn't exhaustive and numbers are being cast to it in different parts of the code.
2013-08-31 16:17:49	donri	ski_: https://github.com/ghc/ghc/commit/9fc2778cf20990524b13705a519b0c337ad197fe  -- not sure if it was already deprecated though
2013-08-31 16:18:06	Makoryu	I heard somewhere that GHC doesn't know how to represent enumerable datatypes as plain ints. Is this still true?
2013-08-31 16:18:13	<--	Desheng2 (~Desheng@166.182.67.48) has quit (Ping timeout: 248 seconds)
2013-08-31 16:18:31	aristid	is it possible that hackage doesn't do any builds anymore? :(
2013-08-31 16:18:36	<--	cipherson (~cipherson@CPEc8d3a35d1363-CMbc14012eb660.cpe.net.cable.rogers.com) has quit (Remote host closed the connection)
2013-08-31 16:18:44	donri	aristid: it has to to build docs
2013-08-31 16:19:00	Makoryu	deech: Ouch. In that situation I think I'd use a layer of indirection that "translates" the C values to a Haskell type that only represents legal states
2013-08-31 16:19:14	aristid	donri: hm
2013-08-31 16:19:23	-->	Itay (~quassel@IGLD-84-229-14-111.inter.net.il) has joined #haskell
2013-08-31 16:19:27	-->	druznek (~druznek@2-230-53-80.ip200.fastwebnet.it) has joined #haskell
2013-08-31 16:19:31	aristid	donri: it's just that all the What's new packages have no docs/no built tag
2013-08-31 16:20:13	donri	aristid: the bottom ones do for me...
2013-08-31 16:20:28	<--	void64 (~luke@37.17.113.245) has quit (Ping timeout: 246 seconds)
2013-08-31 16:20:29	<--	matheus23 (~quassel@p4FDF3159.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2013-08-31 16:20:43	deech	Makoryu: How do you mean?
2013-08-31 16:20:52	-->	ampersand27017 (~ampersand@76.91.115.14) has joined #haskell
2013-08-31 16:20:52	<--	ampersand27017 (~ampersand@76.91.115.14) has quit (Client Quit)
2013-08-31 16:21:13	aristid	donri: hmm either i was blind or they are being built as we speak:)
2013-08-31 16:21:29	Eduard_Munteanu	Hm... why aren't empty declarations allowed for newtypes?
2013-08-31 16:21:44	donri	aristid: actually only the top three ones haven't built yet
2013-08-31 16:21:56	donri	aristid: i think it builds stuff every few hours
2013-08-31 16:21:58	Makoryu	deech: Well, I'd write a datatype describing what the enum is supposed to represent, and then only allow access to the C version via functions that can translate back and forth between those formats
2013-08-31 16:22:11	-->	kitallis (~kitallis@122.166.176.62) has joined #haskell
2013-08-31 16:22:16	Makoryu	Eduard_Munteanu: Because of the way newtypes allocate storage
2013-08-31 16:22:16	aristid	donri: this one is a bit older and also not built, hm: http://hackage.haskell.org/package/tls-debug-0.2.5
2013-08-31 16:22:31	Eduard_Munteanu	Makoryu: how do you mean?
2013-08-31 16:22:31	donri	aristid: not a lib
2013-08-31 16:22:37	deech	Makoryu: Ah. Thanks!
2013-08-31 16:22:43	Makoryu	Eduard_Munteanu: Don't think of them like datatypes. Think of them as opaque type synonyms
2013-08-31 16:22:58	-->	mjs2600 (~mjs2600@user-0c999kc.cable.mindspring.com) has joined #haskell
2013-08-31 16:23:05	-->	joachifm (~joachifm@ulrik.uio.no) has joined #haskell
2013-08-31 16:23:18	<--	ersran9 (~quassel@unaffiliated/ersran9) has quit (Ping timeout: 264 seconds)
2013-08-31 16:23:27	-->	dcoutts_ (~dcoutts@unaffiliated/dcoutts) has joined #haskell
2013-08-31 16:23:30	Eduard_Munteanu	Makoryu: well, yes... and IMO newtype VoidN ~ newtype VoidN' = VoidN' Void    where data Void
2013-08-31 16:23:41	donri	what would an empty newtype even *mean*
2013-08-31 16:23:42	Eduard_Munteanu	Actually they're the same thing, not just ~
2013-08-31 16:23:44	<--	aegis__ (~aegis@cust-1-10-109-94.dyn.as47377.net) has quit (Remote host closed the connection)
2013-08-31 16:23:51	Makoryu	deech: I dunno if that's the right thing to do *in this case* but as a rule of thumb you should have "gatekeepers" like that between non-Haskell (dirty) types and typesafe stuff
2013-08-31 16:23:53	donri	newtype wraps an existing type
2013-08-31 16:24:10	<--	Tarential (~Tarential@li421-205.members.linode.com) has quit (Excess Flood)
2013-08-31 16:24:21	Makoryu	Eduard_Munteanu: Newtypes are lifted
2013-08-31 16:24:23	Eduard_Munteanu	It means only bottom inhabits it.
2013-08-31 16:24:29	Makoryu	IIRC
2013-08-31 16:24:33	-->	Tarential (~Tarential@li421-205.members.linode.com) has joined #haskell
2013-08-31 16:24:40	-->	lemao (~lemao@77-56-49-28.dclient.hispeed.ch) has joined #haskell
2013-08-31 16:24:42	Makoryu	So it does generate extra thunks
2013-08-31 16:24:54	Eduard_Munteanu	I thought it wasn't supposed to.
2013-08-31 16:24:55	donri	Eduard_Munteanu: but what type does it wrap? i suppose we could have a syntax for wrapping a type without a value constructor...
2013-08-31 16:25:01	Makoryu	Maybe I'm remembering wrong
2013-08-31 16:25:14	Eduard_Munteanu	donri: it doesn't need to wrap a type.
2013-08-31 16:25:16	donri	newtype Empty :: Void, or something
2013-08-31 16:25:17	Makoryu	At any rate you can only use newtype to wrap existing types, even if they're Void
2013-08-31 16:25:34	donri	which might let you derive instances or something
2013-08-31 16:25:41	--	irc: disconnected from server
